void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],char const*,char const(&)[18]>(uint64_t a1, const char **a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Expected an opening '(' before a ");
    WTF::PrintStream::printf(v5, "%s", *a2);
    WTF::PrintStream::printf(v5, "%s", "'s parameter list");
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::parseDefaultValueForDestructuringPattern<JSC::ASTBuilder>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  if (*(_DWORD *)(a1 + 7368) == 21)
  {
    v9 = *(_DWORD *)(a1 + 7400);
    v10 = *(_DWORD *)(a1 + 7412);
    v11 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v9;
    *(_DWORD *)(a1 + 7448) = v10;
    *(_DWORD *)(a1 + 7452) = v11;
    v12 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v12 + 4) = v9;
    v13 = *(_DWORD *)(a1 + 12);
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x197EB8784);
    }
    v15 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
    *(_BYTE *)(v12 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v15, a5, a6, a7, a8);
    v22 = 0;
    v23 = *(_QWORD *)(a1 + 7496);
    v24 = a1;
    *(_QWORD *)(a1 + 7496) = &v22;
    JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, (uint64_t)&v22, v16, v17, v18, v19, v20, v21);
    *(_QWORD *)(v24 + 7496) = v23;
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseBindingOrAssignmentElement<JSC::ASTBuilder>(uint64_t a1, JSC::ASTBuilder *a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8)
{
  if ((_DWORD)a3 == 5)
    return JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentElement<JSC::ASTBuilder>(a1, a2, a4, a5, a6, a7, a8, a8);
  else
    return JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const*>(uint64_t a1, int a2, const char **a3)
{
  void (**v5)(WTF::StringPrintStream *__hidden);
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  void (**v31)(WTF::StringPrintStream *__hidden);
  WTF *v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v5 = off_1E3572250;
    v31 = off_1E3572250;
    v32 = (WTF *)v34;
    v33 = xmmword_199122F80;
    v34[0] = 0;
    if (a2)
    {
      JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v31);
      v6 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v31[4])(&v31);
      WTF::PrintStream::printf(v6, "%s", ". ");
      v31[5]((WTF::StringPrintStream *)&v31);
      v5 = v31;
    }
    v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v5[4])(&v31);
    WTF::PrintStream::printf(v7, "%s", *a3);
    WTF::PrintStream::printf(v7, "%s", ".");
    v31[5]((WTF::StringPrintStream *)&v31);
    WTF::String::fromUTF8WithLatin1Fallback(v32, v33, &v30);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v30, v8, v9, v10, v11, v12, v13);
    v21 = v30;
    v30 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    if (v32 != (WTF *)v34)
      WTF::fastFree((unint64_t)v32, v14, v15, v16, v17, v18, v19, v20);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseObjectRestBindingOrAssignmentElement<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char ***a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((_DWORD)a3 == 5)
    return JSC::Parser<JSC::Lexer<char16_t>>::parseObjectRestAssignmentElement<JSC::ASTBuilder>(a1, (JSC::ASTBuilder *)a2, a3, a4, (char *)a5, a6, a7, a8);
  else
    return JSC::Parser<JSC::Lexer<char16_t>>::parseObjectRestElement<JSC::ASTBuilder>(a1, a2, a3, a4, a5, a6);
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[64]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Cannot use 'let' as an identifier name for a LexicalDeclaration");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::createBindingPattern<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::AtomStringImpl *a5, uint64_t a6, uint64_t a7, char ***a8)
{
  char v8;
  int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  WTF::StringImpl *v31;

  v8 = a7;
  v11 = a4;
  if ((_DWORD)a3 != 4)
  {
    if ((a3 - 1) < 3)
    {
      if ((_DWORD)a3 == 2)
        v20 = 2;
      else
        v20 = 1;
      v21 = JSC::Parser<JSC::Lexer<char16_t>>::declareVariable(a1, a5, v20, 2, (uint64_t)a5, a6, a7, (uint64_t)a8);
      if (!v21)
        goto LABEL_3;
      if ((v21 & 1) == 0)
        goto LABEL_13;
      v29 = *(_DWORD *)(a1 + 12);
      if (v29)
      {
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v29 - 1) + 9) & 1) != 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v31 = *(WTF::StringImpl **)a5;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(a1, "Cannot destructure to a variable named '", (uint64_t *)&v31);
          }
          return 0;
        }
LABEL_13:
        if (v21 >= 2)
        {
          v22 = *(_DWORD *)(a1 + 7368);
          if (v22 == 20 || (v22 & 0x100000) != 0)
          {
            JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
          }
          else if (!*(_QWORD *)(a1 + 7360))
          {
            v31 = *(WTF::StringImpl **)a5;
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 1, "Cannot declare a lexical variable twice: '", (uint64_t *)&v31);
          }
          return 0;
        }
        goto LABEL_3;
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x197EB8D04);
    }
    if ((_DWORD)a3)
      goto LABEL_3;
    v23 = JSC::Parser<JSC::Lexer<unsigned char>>::declareHoistedVariable((uint64_t *)a1, a5, a3, a4, (uint64_t)a5, a6, a7, (uint64_t)a8);
    if ((v23 & 1) != 0)
    {
      v30 = *(_DWORD *)(a1 + 12);
      if (!v30)
        goto LABEL_37;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v30 - 1) + 9) & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v31 = *(WTF::StringImpl **)a5;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(a1, "Cannot declare a variable named '", (uint64_t *)&v31);
        }
        return 0;
      }
    }
    if (v23 >= 2)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        v31 = *(WTF::StringImpl **)a5;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[73],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v31);
      }
      return 0;
    }
    goto LABEL_3;
  }
  JSC::Parser<JSC::Lexer<char16_t>>::declareRestOrNormalParameter(a1, a5, a8, a4, (uint64_t)a5, a6, a7, (uint64_t)a8);
  if (*(_QWORD *)(a1 + 7360))
    return 0;
LABEL_3:
  if (!v11)
  {
    if (JSC::Parser<JSC::Lexer<unsigned char>>::exportName(*(_QWORD *)(a1 + 7512), *(WTF::StringImpl **)a5, a3, a4, (uint64_t)a5, a6, a7, (uint64_t)a8))
    {
      JSC::ModuleScopeData::exportBinding(*(_QWORD *)(a1 + 7512), *(WTF::StringImpl **)a5, a5, v24, v25, v26, v27, v28);
      goto LABEL_4;
    }
    if (!*(_QWORD *)(a1 + 7360))
    {
      v31 = *(WTF::StringImpl **)a5;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v31);
    }
    return 0;
  }
LABEL_4:
  v14 = a6 + 48;
  v15 = a6 + 60;
  v16 = *(uint64_t **)(a2 + 8);
  result = *v16;
  if ((unint64_t)(v16[1] - *v16) <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    result = *v16;
  }
  *v16 = result + 48;
  *(_QWORD *)result = &off_1E358B760;
  v18 = *(_QWORD *)v14;
  *(_DWORD *)(result + 16) = *(_DWORD *)(v14 + 8);
  *(_QWORD *)(result + 8) = v18;
  v19 = *(_QWORD *)v15;
  *(_DWORD *)(result + 28) = *(_DWORD *)(v15 + 8);
  *(_QWORD *)(result + 20) = v19;
  *(_QWORD *)(result + 32) = a5;
  *(_BYTE *)(result + 40) = v8;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(uint64_t a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 0;
  v3 = *(_QWORD *)(a1 + 7496);
  v4 = a1;
  *(_QWORD *)(a1 + 7496) = &v2;
  result = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>();
  *(_QWORD *)(v4 + 7496) = v3;
  return result;
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(uint64_t a1, const char *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", a2);
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[32],char const*>(uint64_t a1, const char *a2, const char **a3)
{
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  void (**v31)(WTF::StringPrintStream *__hidden);
  WTF *v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v31 = off_1E3572250;
    v32 = (WTF *)v34;
    v33 = xmmword_199122F80;
    v34[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v31);
    v6 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v31[4])(&v31);
    WTF::PrintStream::printf(v6, "%s", ". ");
    v31[5]((WTF::StringPrintStream *)&v31);
    v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v31[4])(&v31);
    WTF::PrintStream::printf(v7, "%s", a2);
    WTF::PrintStream::printf(v7, "%s", *a3);
    WTF::PrintStream::printf(v7, "%s", ".");
    v31[5]((WTF::StringPrintStream *)&v31);
    WTF::String::fromUTF8WithLatin1Fallback(v32, v33, &v30);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v30, v8, v9, v10, v11, v12, v13);
    v21 = v30;
    v30 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    if (v32 != (WTF *)v34)
      WTF::fastFree((unint64_t)v32, v14, v15, v16, v17, v18, v19, v20);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentElement<JSC::ASTBuilder>(uint64_t a1, JSC::ASTBuilder *a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _BYTE *v16;
  _DWORD *v17;
  _OWORD *v18;
  int v19;
  int v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  int *v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  WTF::AtomStringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  char v53;
  int v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;

  if ((*(_DWORD *)(a1 + 7368) | 4) != 4)
    goto LABEL_2;
  v16 = (_BYTE *)(a1 + 7344);
  v17 = (_DWORD *)(a1 + 7368);
  v18 = (_OWORD *)(a1 + 7296);
  v58 = *(_OWORD *)(a1 + 7296);
  v19 = *(_DWORD *)(a1 + 7316);
  v57 = *(_QWORD *)(a1 + 7336);
  v56 = *(_OWORD *)(a1 + 7320);
  v53 = *(_BYTE *)(a1 + 7344);
  v54 = v19;
  v20 = *((_DWORD *)a2 + 263);
  v21 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
  v22 = *(unsigned int *)(a1 + 7404);
  v23 = *(int **)(a1 + 7288);
  v24 = *v23;
  v51 = v23[1];
  v52 = *(_BYTE *)(a1 + 7345);
  v25 = *((_BYTE *)v23 + 56);
  result = JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, 5, a3, a4, a5, a6, a7);
  if (!result || *v17 <= 0x13u && ((1 << *v17) & 0x80114) != 0)
  {
    JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), v21, v22, v26, v27, v28, v29, v30);
    v35 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v35 = v24;
    *(_BYTE *)(v35 + 56) = v25;
    v36 = *(_DWORD *)(a1 + 7400);
    v37 = *(_DWORD *)(a1 + 7412);
    v38 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v36;
    *(_DWORD *)(a1 + 7448) = v37;
    *(_DWORD *)(a1 + 7452) = v38;
    *(_DWORD *)(v35 + 4) = v36;
    v39 = *(_DWORD *)(a1 + 12);
    if (!v39)
    {
      __break(0xC471u);
      JUMPOUT(0x197EB9344);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v35, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v39 - 1) + 9) & 1, v31, v32, v33, v34);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v51;
    *v18 = v58;
    *(_DWORD *)(a1 + 7312) = v20;
    *(_DWORD *)(a1 + 7316) = v54;
    *(_OWORD *)(a1 + 7320) = v56;
    *(_QWORD *)(a1 + 7336) = v57;
    *v16 = v53;
    *(_BYTE *)(a1 + 7345) = v52;
    *((_DWORD *)a2 + 263) = v20;
    v41 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::~StringImpl(v41, v40, a3, a4, (uint64_t)a5, a6, a7, a8);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
LABEL_2:
    *(_QWORD *)&v56 = *(_QWORD *)(a1 + 7416);
    DWORD2(v56) = *(_DWORD *)(a1 + 7424);
    v10 = JSC::Parser<JSC::Lexer<char16_t>>::parseMemberExpression<JSC::ASTBuilder>(a1, a2, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)&v58 = v10;
    if (v10 && (v11 = v10, ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10) & 1) != 0))
    {
      v12 = *(_DWORD *)(a1 + 12);
      if (!v12)
        goto LABEL_29;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v12 - 1) + 9) & 1) == 0)
        return JSC::ASTBuilder::createAssignmentElement((uint64_t)a2, &v58, (uint64_t *)&v56, (uint64_t *)(a1 + 7444));
      if (!*(_QWORD *)(a1 + 7320))
        return JSC::ASTBuilder::createAssignmentElement((uint64_t)a2, &v58, (uint64_t *)&v56, (uint64_t *)(a1 + 7444));
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 112))(v11))
        return JSC::ASTBuilder::createAssignmentElement((uint64_t)a2, &v58, (uint64_t *)&v56, (uint64_t *)(a1 + 7444));
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      v14 = **(_QWORD **)(a1 + 7320);
      if (*(_QWORD *)(v13 + 1248) != v14 && *(_QWORD *)(v13 + 880) != v14)
        return JSC::ASTBuilder::createAssignmentElement((uint64_t)a2, &v58, (uint64_t *)&v56, (uint64_t *)(a1 + 7444));
      v42 = *(_DWORD *)(a1 + 12);
      if (!v42)
      {
LABEL_29:
        __break(0xC471u);
        JUMPOUT(0x197EB933CLL);
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v42 - 1) + 9) & 1) == 0)
        return JSC::ASTBuilder::createAssignmentElement((uint64_t)a2, &v58, (uint64_t *)&v56, (uint64_t *)(a1 + 7444));
      if (!*(_QWORD *)(a1 + 7360))
      {
        v55 = **(_QWORD **)(a1 + 7320);
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, &v55);
      }
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Invalid destructuring assignment target");
    }
    return 0;
  }
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseMemberExpression<JSC::ASTBuilder>(uint64_t a1, JSC::ASTBuilder *a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int *v10;
  _OWORD *v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  const WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _BOOL8 v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  const WTF::StringImpl *v49;
  uint64_t v50;
  int v51;
  int32x2_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  BOOL v56;
  _BOOL8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t NewTargetExpr;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  JSC::ASTBuilder *v69;
  char v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t *v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  _QWORD *v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  JSC::ASTBuilder *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  int v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  JSC::ASTBuilder *v145;
  uint64_t *v146;
  char v147;
  void (**v148)(JSC::IntegerNode *__hidden);
  double v149;
  int v150;
  int v151;
  int v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  JSC::ASTBuilder *v157;
  uint64_t *v158;
  char v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  int v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  JSC::ASTBuilder *v168;
  uint64_t *v169;
  int v170;
  int v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  int v179;
  int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  unsigned __int8 v185;
  int v186;
  int v187;
  int v188;
  int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  JSC::ASTBuilder *v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  int v217;
  int v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  unsigned __int8 v224;
  int v225;
  int v226;
  JSC::ASTBuilder *v227;
  int v228;
  int v229;
  int v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t *v234;
  int v235;
  int v236;
  int v237;
  uint64_t *v238;
  uint64_t *v239;
  int v240;
  int v241;
  int v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  const WTF::StringImpl *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unsigned __int16 *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _BYTE *v262;
  size_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  size_t v270;
  int *v271;
  _BYTE *v272;
  int v273;
  int v274;
  int v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t *v280;
  int v281;
  int v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  int v287;
  char v288;
  uint64_t *v289;
  int v290;
  uint64_t v291;
  void (**v292)(JSC::ArgumentListNode *__hidden);
  void (**v293)(JSC::DotAccessorNode *__hidden);
  uint64_t v294;
  int *v295;
  int v296;
  void (**v297)(JSC::DotAccessorNode *__hidden);
  unsigned int v298;
  int v299;
  int v300;
  unsigned int *v301;
  int v302;
  uint64_t v303;
  int v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unsigned __int8 *v313;
  int v314;
  unsigned int v315;
  int v316;
  int v317;
  int v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  WTF *v322;
  int v324;
  int v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  int v329;
  int v330;
  int v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  __n128 v342;
  int v343;
  int v344;
  uint64_t *v345;
  int v346;
  int v347;
  uint64_t v348;
  int v349;
  int v350;
  int v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  int v355;
  uint64_t v356;
  JSC::ParserArena *v357;
  uint64_t v358;
  int v359;
  int v360;
  int v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  _OWORD *v365;
  int v366;
  uint64_t v367;
  char v368;
  uint64_t v369;
  uint64_t v370;
  char v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  int v378;
  int v379;
  uint64_t v380;
  int v381;
  unsigned __int8 *v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  int v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  uint64_t *v390;
  int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  uint64_t v396;
  int v397;
  uint64_t v398;
  int v399;
  int v400;
  uint64_t v401;
  char *v402;
  uint64_t v403;
  int v404;
  int v405;
  int v406;
  int v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  int v413;
  int v414;
  int v415;
  uint64_t v416;
  int v417;
  void (**v418)(JSC::ArgumentListNode *__hidden);
  uint64_t v419;
  uint64_t v420;
  int v421;
  int v422;
  int v423;
  int v424;
  uint64_t v425;
  int v426;
  uint64_t v427;
  int v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  __n128 SpreadExpression;
  uint64_t v435;
  int v436;
  void (**v437)(JSC::ArgumentListNode *__hidden);
  unsigned __int8 **v438;
  unsigned __int8 *v439;
  unsigned __int8 *i;
  int v441;
  int v442;
  int v443;
  uint64_t v444;
  int v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  uint64_t v449;
  unsigned __int8 *v450;
  JSC::ParserArena *v451;
  unsigned __int8 *v452;
  int v453;
  int v454;
  int v455;
  uint64_t v456;
  int v457;
  uint64_t v458;
  int v459;
  int v460;
  int v461;
  uint64_t v462;
  int v463;
  uint64_t v464;
  int v465;
  uint64_t *v466;
  uint64_t Arguments;
  char v468;
  uint64_t *v469;
  uint64_t v470;
  int v471;
  int v473;
  int v474;
  int v475;
  uint64_t v476;
  int v477;
  uint64_t v478;
  uint64_t *v479;
  int v480;
  BOOL v481;
  unint64_t v482;
  void *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  _BOOL4 v490;
  int v491;
  unsigned int v492;
  uint64_t v493;
  _OWORD *v494;
  __int128 *v495;
  __int128 *v496;
  JSC::ASTBuilder *v497;
  int v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  int v502;
  int v503;
  uint64_t v504;
  int v505;
  WTF::AtomStringImpl *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  WTF::StringImpl *v514;
  uint64_t v515;
  unint64_t v516;
  __int16 *v517;
  __int16 v518;
  uint64_t v519;
  int v520;
  int v521;
  int v522;
  int v523;
  WTF::StringImpl *v524;
  int v526;
  int v527;
  int v528;
  uint64_t v529;
  int v530;
  uint64_t v531;
  uint64_t *v532;
  const char *v533;
  int v534;
  int v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  unsigned __int32 v539;
  unsigned int v540;
  int v541;
  int v542;
  int v543;
  int v544;
  uint64_t v545;
  int v546;
  uint64_t v547;
  int v548;
  _OWORD *v549;
  uint64_t *v550;
  WTF::AtomStringImpl *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  WTF::StringImpl *v560;
  uint64_t v561;
  unint64_t v562;
  __int16 *v563;
  __int16 v564;
  uint64_t v565;
  int v566;
  int v567;
  int v568;
  int v569;
  int v570;
  WTF::StringImpl *v571;
  __int16 v572;
  int v573;
  int32x2_t v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  __int128 v578;
  WTF *v579;
  uint64_t *v580;
  uint64_t v581;
  int v582;
  unsigned int v583;
  uint64_t v584;
  int v585;
  unsigned int v586;
  unsigned int v587;
  unsigned int v588;
  unsigned int v589;
  uint64_t *v590;
  int v591;
  int v592;
  int v593;
  uint64_t v594;
  int v595;
  uint64_t v596;
  int v597;
  unsigned int v598;
  unsigned int v599;
  unsigned int v600;
  int v601;
  unsigned int v602;
  unsigned int v603;
  unsigned int v604;
  uint64_t v605;
  unsigned int v606;
  int v607;
  unsigned int v608;
  unsigned int v609;
  unsigned int v610;
  unsigned int v611;
  uint64_t v612;
  unsigned int v613;
  unsigned int v614;
  int v615;
  WTF::AtomStringImpl *v616;
  uint64_t v617;
  uint64_t v618;
  unsigned int v619;
  char v620;
  int v621;
  int v622;
  uint64_t v623;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  int v630;
  int v631;
  int v632;
  int v633;
  unsigned __int8 *v634;
  WTF::StringImpl *v635;
  uint64_t v636;
  uint64_t *v637;
  uint64_t v638;
  unsigned int v639;
  int v640;
  int v641;
  uint64_t v642;
  int v643;
  uint64_t v644;
  JSC::ASTBuilder *v645;
  uint64_t v646;
  uint64_t v647;
  JSC::ParserArena *v648;
  uint64_t v649;
  int v650;
  unsigned int v651;
  int v652;
  JSC::ParserArena *v653;
  uint64_t v654;
  uint64_t *v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  JSC::ASTBuilder *v659;
  uint64_t v660;
  uint64_t v661;
  JSC::ParserArena *v662;
  uint64_t v663;
  int v664;
  int v665;
  int v666;
  uint64_t *v667;
  uint64_t v668;
  int v669;
  uint64_t v670;
  char v671;
  int v672;
  int v673;
  int v674;
  uint64_t v675;
  int v676;
  uint64_t v677;
  uint64_t v678;
  int v679;
  int v680;
  unsigned int v681;
  uint64_t v682;
  uint64_t v683;
  unint64_t v684;
  void *v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  unint64_t v692;
  void *v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t *v700;
  uint64_t v701;
  uint64_t v702;
  _OWORD *v703;
  int v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  void *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  unint64_t v715;
  void *v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  int v723;
  int v724;
  int v725;
  uint64_t v726;
  int v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  int v731;
  int v732;
  int v733;
  uint64_t v734;
  int v735;
  uint64_t v736;
  uint64_t v737;
  unsigned int v738;
  unsigned int v739;
  _QWORD *v740;
  uint64_t v741;
  uint64_t v742;
  _QWORD *v743;
  uint64_t v744;
  uint64_t v745;
  _QWORD *v746;
  uint64_t v747;
  uint64_t v748;
  int v749;
  int v750;
  int v751;
  uint64_t v752;
  int v753;
  uint64_t v754;
  uint64_t v755;
  const char *v756;
  uint64_t v757;
  int v758;
  int v759;
  int v760;
  int v761;
  uint64_t v762;
  int v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  _DWORD *v767;
  int v768;
  _DWORD *v769;
  _QWORD *v770;
  uint64_t v771;
  uint64_t *v772;
  uint64_t v773;
  uint64_t v774;
  JSC::ParserArena *v775;
  int v776;
  int v777;
  int v778;
  uint64_t v779;
  uint64_t v780;
  int v781;
  uint64_t v782;
  int v783;
  int v784;
  int v785;
  int v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  int v792;
  int v793;
  int v794;
  int v795;
  uint64_t v796;
  int v797;
  uint64_t v798;
  char v799;
  unsigned __int8 v800;
  unint64_t v801;
  void *v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  _QWORD *v809;
  uint64_t v810;
  _QWORD *v811;
  _QWORD *v812;
  JSC::ASTBuilder *v813;
  uint64_t ElementList;
  uint64_t *v815;
  uint64_t v816;
  uint64_t v817;
  JSC::ArgumentListNode *v818;
  int v819;
  int v820;
  int v821;
  uint64_t v822;
  int v823;
  uint64_t v824;
  int v825;
  const char *v826;
  int v827;
  uint64_t v828;
  int v829;
  int v830;
  int v831;
  uint64_t v832;
  int v833;
  uint64_t v834;
  int v835;
  int v836;
  int v837;
  uint64_t v838;
  int v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  int v846;
  int v847;
  int v848;
  uint64_t v849;
  int v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  int v855;
  int v856;
  int v857;
  uint64_t v858;
  int v859;
  uint64_t v860;
  int v861;
  int v862;
  int v863;
  int v864;
  uint64_t v865;
  int v866;
  uint64_t v867;
  int v868;
  uint64_t v869;
  const char *v870;
  uint64_t v871;
  int v872;
  unsigned int v873;
  uint64_t v874;
  const char *v876;
  unsigned int v877;
  uint64_t v878;
  unsigned int v879;
  unsigned int v880;
  unsigned int v881;
  unsigned int v882;
  const char *v883;
  uint64_t v884;
  int v885;
  const char *v886;
  uint64_t *v887;
  int v888;
  int v889;
  int v890;
  uint64_t v891;
  int v892;
  uint64_t v893;
  int v894;
  uint64_t v895;
  int v896;
  int v897;
  int v898;
  int v899;
  uint64_t v900;
  int v901;
  uint64_t v902;
  int v903;
  uint64_t v904;
  int v905;
  int v906;
  int v907;
  uint64_t v908;
  int v909;
  uint64_t v910;
  uint64_t v911;
  const char *v912;
  int v913;
  int v914;
  int v915;
  uint64_t v916;
  int v917;
  uint64_t v918;
  unsigned int v919;
  unsigned int v920;
  unsigned int v921;
  unsigned int v922;
  uint64_t v923;
  int v924;
  _BOOL4 v925;
  int v926;
  int v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  int v932;
  int v933;
  int v934;
  uint64_t v935;
  int v936;
  uint64_t v937;
  int v939;
  uint64_t *v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  int v948;
  uint64_t v949;
  int v950;
  int v951;
  uint64_t v952;
  int v953;
  uint64_t v954;
  int v955;
  uint64_t v956;
  int v957;
  uint64_t v958;
  _BYTE v959[12];
  __n128 v960;
  unint64_t v961;
  JSC::ParserArena *v962;
  JSC::ParserArena *v963;
  unsigned __int8 *v964;
  unsigned int v965;
  _OWORD *v966;
  int *v967;
  unsigned int v968;
  uint64_t v969;
  uint64_t *v970;
  uint64_t *v971;
  unsigned int v972;
  uint64_t v973;
  unint64_t v974;
  JSC::ASTBuilder *v975;
  uint64_t v976;
  int v977;
  WTF *v978;
  uint64_t v979;
  __int128 v980;
  uint64_t v981;
  int v982;
  __int128 v983;
  __int128 v984;
  uint64_t v985;
  int v986;
  __int128 v987;
  uint64_t v988;
  int v989;
  _BYTE v990[24];
  __int128 v991;
  int v992;
  uint64_t v993;
  int v994;
  __int128 v995;
  uint64_t v996;

  v9 = (unsigned __int8 *)(a1 + 7344);
  v974 = a1 + 7416;
  v975 = a2;
  v10 = (int *)(a1 + 7368);
  v981 = *(_QWORD *)(a1 + 7416);
  v982 = *(_DWORD *)(a1 + 7424);
  v11 = (_OWORD *)(a1 + 7400);
  v980 = *(_OWORD *)(a1 + 7400);
  v978 = 0;
  v979 = 0;
  v12 = *(_DWORD *)(a1 + 7368);
  if (v12 != 519)
  {
    if (v12 != 543)
    {
      v13 = 0;
      v14 = 1;
      goto LABEL_4;
    }
    v13 = 0;
    goto LABEL_485;
  }
  do
  {
    if (HIDWORD(v979) == (_DWORD)v979)
    {
      v401 = WTF::Vector<JSC::JSTextPosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v978, HIDWORD(v979) + 1, v974);
      v402 = (char *)v978 + 12 * HIDWORD(v979);
      v403 = *(_QWORD *)v401;
      v404 = *(_DWORD *)(v401 + 8);
    }
    else
    {
      v402 = (char *)v978 + 12 * HIDWORD(v979);
      v403 = *(_QWORD *)v974;
      v404 = *(_DWORD *)(v974 + 8);
    }
    *((_DWORD *)v402 + 2) = v404;
    *(_QWORD *)v402 = v403;
    ++HIDWORD(v979);
    v405 = *(_DWORD *)(a1 + 7400);
    v406 = *(_DWORD *)(a1 + 7412);
    v407 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v405;
    *(_DWORD *)(a1 + 7448) = v406;
    *(_DWORD *)(a1 + 7452) = v407;
    v408 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v408 + 4) = v405;
    v409 = *(_DWORD *)(a1 + 12);
    if (!v409)
    {
      __break(0xC471u);
      JUMPOUT(0x197EBEB8CLL);
    }
    v410 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v409 - 1) + 9) & 1;
    *(_BYTE *)(v408 + 56) = 0;
    v12 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v408, (uint64_t)v10, 0, v410, (uint64_t)a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v12;
  }
  while (v12 == 519);
  v13 = HIDWORD(v979);
  v14 = HIDWORD(v979) == 0;
  v196 = v12 == 543;
  if (v12 == 19 && HIDWORD(v979) != 0)
  {
    v973 = HIDWORD(v979);
    v819 = *(_DWORD *)(a1 + 7400);
    v820 = *(_DWORD *)(a1 + 7412);
    v821 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v819;
    *(_DWORD *)(a1 + 7448) = v820;
    *(_DWORD *)(a1 + 7452) = v821;
    v822 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v822 + 4) = v819;
    v823 = *(_DWORD *)(a1 + 12);
    if (!v823)
    {
      __break(0xC471u);
      JUMPOUT(0x197EBEC98);
    }
    v824 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v823 - 1) + 9) & 1;
    *(_BYTE *)(v822 + 56) = 0;
    v825 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v822, (uint64_t)v10, 0, v824, (uint64_t)a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v825;
    if (v825 != 12)
      goto LABEL_642;
    if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 2408) && !v9[40])
    {
      v919 = *(_DWORD *)(a1 + 12);
      v920 = v919 - 1;
      v921 = v919 - 1;
      while (1)
      {
        v922 = v921;
        if (!v921)
          break;
        if (!v919)
        {
          __break(0xC471u);
          JUMPOUT(0x197EBECF8);
        }
        v923 = *(_QWORD *)a1;
        v924 = *(_DWORD *)(*(_QWORD *)a1 + 720 * v921-- + 10) & 0x405400;
        if (v924 == 0x400000)
        {
          v925 = v9[1] != 0;
          v926 = v9[192];
          if (!v9[192])
            goto LABEL_898;
          goto LABEL_972;
        }
      }
      v925 = v9[1] != 0;
      if (v9[192])
      {
LABEL_972:
        if (v919 <= v922)
        {
          __break(0xC471u);
          JUMPOUT(0x197EBED18);
        }
        v923 = *(_QWORD *)a1;
        v926 = *(unsigned __int8 *)(*(_QWORD *)a1 + 720 * v922 + 14) - 1 < 2;
        goto LABEL_898;
      }
      if (!v919)
      {
        __break(0xC471u);
        JUMPOUT(0x197EBED38);
      }
      v922 = 0;
      v926 = 0;
      v923 = *(_QWORD *)a1;
LABEL_898:
      v927 = *(_DWORD *)(v923 + 720 * v920 + 10);
      if ((v926 & 1) == 0 && !v925 && (v927 & 0x100100) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v883 = "new.target is only valid inside functions or static blocks";
          v884 = a1;
          v885 = 0;
LABEL_797:
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v884, v885, v883);
        }
        goto LABEL_79;
      }
      if ((v927 & 0x800) != 0)
      {
        if (v919 <= v922)
        {
          __break(0xC471u);
          JUMPOUT(0x197EBED10);
        }
        if ((*(_BYTE *)(v923 + 720 * v922 + 12) & 1) != 0)
          v955 = v926;
        else
          v955 = 1;
        if (((v925 | v955) & 1) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "new.target is not valid inside arrow functions in global code");
          goto LABEL_79;
        }
        *(_BYTE *)(v923 + 720 * v920 + 32) |= 0x20u;
      }
      NewTargetExpr = JSC::ASTBuilder::createNewTargetExpr((uint64_t)v975, v980, SDWORD2(v980));
      v932 = *(_DWORD *)(a1 + 7400);
      v933 = *(_DWORD *)(a1 + 7412);
      v934 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v932;
      *(_DWORD *)(a1 + 7448) = v933;
      *(_DWORD *)(a1 + 7452) = v934;
      v935 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v935 + 4) = v932;
      v936 = *(_DWORD *)(a1 + 12);
      if (!v936)
      {
        __break(0xC471u);
        JUMPOUT(0x197EBED00);
      }
      --v973;
      v937 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v936 - 1) + 9) & 1;
      *(_BYTE *)(v935 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v935, (uint64_t)v10, 0, v937, v928, v929, v930, v931);
      goto LABEL_506;
    }
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_79;
    v826 = "\"new.\" can only be followed with target";
    goto LABEL_692;
  }
  if (v12 == 543)
  {
LABEL_485:
    v973 = v13;
    v583 = *(_DWORD *)(a1 + 12);
    if (!v583)
    {
      __break(0xC471u);
      JUMPOUT(0x197EBEC58);
    }
    v584 = *(_QWORD *)a1;
    v585 = *(_DWORD *)(a1 + 12);
    while (1)
    {
      v586 = v585 - 1;
      if (v585 == 1)
        break;
      --v585;
      v587 = v586;
      if ((*(_DWORD *)(v584 + 720 * v586 + 10) & 0x405400) == 0x400000)
        goto LABEL_489;
    }
    v587 = 0;
LABEL_489:
    v588 = v583 - 1;
    do
    {
      v589 = v588;
      if (!v588)
        break;
      --v588;
    }
    while ((*(_BYTE *)(v584 + 720 * v589 + 13) & 8) == 0);
    if (v589 <= v586 && (*(_DWORD *)(v584 + 720 * (v583 - 1) + 10) & 0x100) == 0)
    {
      if (v583 <= v586)
      {
        __break(0xC471u);
        JUMPOUT(0x197EBECD0);
      }
      if ((*(_BYTE *)(v584 + 720 * v587 + 13) & 2) == 0 || *(_DWORD *)(v584 + 720 * v587 + 20))
        goto LABEL_815;
    }
    v590 = (uint64_t *)*((_QWORD *)v975 + 1);
    NewTargetExpr = *v590;
    if ((unint64_t)(v590[1] - *v590) <= 0x1F)
    {
      JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v975 + 1));
      NewTargetExpr = *v590;
    }
    *v590 = NewTargetExpr + 32;
    *(_DWORD *)(NewTargetExpr + 8) = v980;
    *(int32x2_t *)(NewTargetExpr + 12) = vrev64_s32(*(int32x2_t *)((char *)&v980 + 4));
    *(_DWORD *)(NewTargetExpr + 20) = -1;
    *(_BYTE *)(NewTargetExpr + 24) = 0;
    *(_BYTE *)(NewTargetExpr + 25) = 126;
    *(_BYTE *)(NewTargetExpr + 26) = 0;
    *(_QWORD *)NewTargetExpr = &off_1E35848C8;
    v591 = *(_DWORD *)(a1 + 7400);
    v592 = *(_DWORD *)(a1 + 7412);
    v593 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v591;
    *(_DWORD *)(a1 + 7448) = v592;
    *(_DWORD *)(a1 + 7452) = v593;
    v594 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v594 + 4) = v591;
    v595 = *(_DWORD *)(a1 + 12);
    if (!v595)
    {
      __break(0xC471u);
      JUMPOUT(0x197EBEC60);
    }
    v596 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v595 - 1) + 9) & 1;
    *(_BYTE *)(v594 + 56) = 0;
    v597 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v594, (uint64_t)v10, 0, v596, (uint64_t)a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v597;
    v598 = *(_DWORD *)(a1 + 12);
    if (v597 != 2)
    {
      if (!v598)
      {
        __break(0xC471u);
        JUMPOUT(0x197EBEC80);
      }
      v599 = v598 - 1;
      goto LABEL_500;
    }
    if (!v598)
    {
      __break(0xC471u);
      JUMPOUT(0x197EBEC70);
    }
    v599 = v598 - 1;
    if (*(_BYTE *)(*(_QWORD *)a1 + 720 * (v598 - 1) + 14) != 2)
    {
LABEL_500:
      v600 = ~v599 + v598;
      v601 = *(_DWORD *)(a1 + 12);
      while (1)
      {
        v602 = v601 - 1;
        if (v601 == 1)
          break;
        --v601;
        v603 = v602;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v602 + 12) & 0x40) != 0)
          goto LABEL_503;
      }
      v603 = v600;
LABEL_503:
      if (v598 <= v602)
      {
        __break(0xC471u);
        JUMPOUT(0x197EBEC68);
      }
      v604 = v603;
      *(_DWORD *)(*(_QWORD *)a1 + 720 * v603 + 10) |= 0x20u;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 148))
        goto LABEL_505;
      v873 = *(_DWORD *)(a1 + 12);
      if (v873 <= v602)
      {
        __break(0xC471u);
        JUMPOUT(0x197EBECB8);
      }
      v874 = *(_QWORD *)a1;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v603 + 11) & 8) != 0)
        goto LABEL_753;
      if (v873 <= v586)
      {
        __break(0xC471u);
        JUMPOUT(0x197EBECD8);
      }
      if ((*(_BYTE *)(v874 + 720 * v587 + 13) & 2) != 0)
      {
LABEL_753:
        if (v873 <= v586)
        {
          __break(0xC471u);
          JUMPOUT(0x197EBECC8);
        }
        v604 = v587;
      }
      if (v589 > v586)
      {
LABEL_505:
        v196 = 1;
        goto LABEL_506;
      }
      v196 = 1;
      if (*(_DWORD *)(v874 + 720 * v604 + 20) == 1)
      {
LABEL_815:
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "super is not valid in this context");
        goto LABEL_79;
      }
LABEL_506:
      if (NewTargetExpr)
      {
        v195 = 0;
LABEL_145:
        v13 = v973;
        goto LABEL_199;
      }
      goto LABEL_75;
    }
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_79;
    v826 = "super call is not valid in this context";
LABEL_692:
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, v826);
    goto LABEL_79;
  }
LABEL_4:
  if (v12 == 539)
  {
    v973 = v13;
    v855 = *(_DWORD *)(a1 + 7400);
    v856 = *(_DWORD *)(a1 + 7412);
    v857 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v855;
    *(_DWORD *)(a1 + 7448) = v856;
    *(_DWORD *)(a1 + 7452) = v857;
    v858 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v858 + 4) = v855;
    v859 = *(_DWORD *)(a1 + 12);
    if (!v859)
    {
      __break(0xC471u);
      JUMPOUT(0x197EBECB0);
    }
    v860 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v859 - 1) + 9) & 1;
    *(_BYTE *)(v858 + 56) = 0;
    v861 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v858, (uint64_t)v10, 0, v860, (uint64_t)a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v861;
    *(_QWORD *)v990 = *(_QWORD *)(a1 + 7444);
    *(_DWORD *)&v990[8] = *(_DWORD *)(a1 + 7452);
    if (v861 == 19)
    {
      v862 = *(_DWORD *)(a1 + 7400);
      v863 = *(_DWORD *)(a1 + 7412);
      v864 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v862;
      *(_DWORD *)(a1 + 7448) = v863;
      *(_DWORD *)(a1 + 7452) = v864;
      v865 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v865 + 4) = v862;
      v866 = *(_DWORD *)(a1 + 12);
      if (!v866)
      {
        __break(0xC471u);
        JUMPOUT(0x197EBECC0);
      }
      v867 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v866 - 1) + 9) & 1;
      *(_BYTE *)(v865 + 56) = 0;
      v868 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v865, (uint64_t)v10, 0, v867, (uint64_t)a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v868;
      if (v868 != 12)
        goto LABEL_642;
      v869 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(v869 + 48) + 3888) && !v9[40])
      {
        if (*(_DWORD *)(a1 + 7480) == 1)
        {
          v939 = *(_DWORD *)(a1 + 12);
          if (!v939)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBED20);
          }
          v941 = *(_QWORD *)(v869 + 96);
          v940 = (uint64_t *)(v869 + 96);
          JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v939 - 1), v941, 0);
          *(_QWORD *)(a1 + 7320) = v940;
          JSC::ASTBuilder::createResolve((uint64_t)v975, (uint64_t)&v980, v940, &v981, (uint64_t *)(a1 + 7444), 1);
          JSC::ASTBuilder::createImportMetaExpr(*((_QWORD *)v975 + 1), (uint64_t)&v980, v942);
          v948 = *(_DWORD *)(a1 + 12);
          if (!v948)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBED28);
          }
          NewTargetExpr = v943;
          v949 = *(_QWORD *)a1 + 720 * (v948 - 1);
          *(_DWORD *)(v949 + 10) |= 4u;
          LODWORD(v949) = *(_DWORD *)(a1 + 7400);
          v950 = *(_DWORD *)(a1 + 7412);
          v951 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v949;
          *(_DWORD *)(a1 + 7448) = v950;
          *(_DWORD *)(a1 + 7452) = v951;
          v952 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v952 + 4) = v949;
          v953 = *(_DWORD *)(a1 + 12);
          if (!v953)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBED30);
          }
          v954 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v953 - 1) + 9) & 1;
          *(_BYTE *)(v952 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v952, (uint64_t)v10, 0, v954, v944, v945, v946, v947);
LABEL_856:
          v196 = 0;
          goto LABEL_506;
        }
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_79;
        v870 = "import.meta is only valid inside modules";
        v871 = a1;
        v872 = 0;
LABEL_748:
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v871, v872, v870);
        goto LABEL_79;
      }
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_79;
      v870 = "\"import.\" can only be followed with meta";
LABEL_747:
      v871 = a1;
      v872 = 1;
      goto LABEL_748;
    }
    if (!v14)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use new with import");
      goto LABEL_79;
    }
    if (v861 != 2)
    {
      if (v861 == 20 || (v861 & 0x100000) != 0)
      {
LABEL_642:
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        goto LABEL_79;
      }
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_79;
      v870 = "import call expects one or two arguments";
      goto LABEL_747;
    }
    v888 = *(_DWORD *)(a1 + 7400);
    v889 = *(_DWORD *)(a1 + 7412);
    v890 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v888;
    *(_DWORD *)(a1 + 7448) = v889;
    *(_DWORD *)(a1 + 7452) = v890;
    v891 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v891 + 4) = v888;
    v892 = *(_DWORD *)(a1 + 12);
    if (!v892)
    {
      __break(0xC471u);
      JUMPOUT(0x197EBECE0);
    }
    v893 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v892 - 1) + 9) & 1;
    *(_BYTE *)(v891 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v891, (uint64_t)v10, 0, v893, (uint64_t)a5, a6, a7, a8);
    v894 = *(_DWORD *)(a1 + 7300);
    v895 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
    v896 = *(_DWORD *)(a1 + 7368);
    if (v895)
    {
      if (v896 != 6)
      {
        v904 = 0;
        goto LABEL_879;
      }
      v897 = *(_DWORD *)(a1 + 7400);
      v898 = *(_DWORD *)(a1 + 7412);
      v899 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v897;
      *(_DWORD *)(a1 + 7448) = v898;
      *(_DWORD *)(a1 + 7452) = v899;
      v900 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v900 + 4) = v897;
      v901 = *(_DWORD *)(a1 + 12);
      if (!v901)
      {
        __break(0xC471u);
        JUMPOUT(0x197EBECE8);
      }
      v902 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v901 - 1) + 9) & 1;
      *(_BYTE *)(v900 + 56) = 0;
      v903 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v900, (uint64_t)v10, 0, v902, (uint64_t)a5, a6, a7, a8);
      v904 = 0;
      *(_DWORD *)(a1 + 7368) = v903;
      if (v903 == 3)
        goto LABEL_854;
      v904 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
      v896 = *(_DWORD *)(a1 + 7368);
      if (v904)
      {
        if (v896 == 6)
        {
          v913 = *(_DWORD *)(a1 + 7400);
          v914 = *(_DWORD *)(a1 + 7412);
          v915 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v913;
          *(_DWORD *)(a1 + 7448) = v914;
          *(_DWORD *)(a1 + 7452) = v915;
          v916 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v916 + 4) = v913;
          v917 = *(_DWORD *)(a1 + 12);
          if (!v917)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBED08);
          }
          v918 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v917 - 1) + 9) & 1;
          *(_BYTE *)(v916 + 56) = 0;
          v896 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v916, (uint64_t)v10, 0, v918, (uint64_t)a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v896;
        }
LABEL_879:
        if (v896 == 3)
        {
LABEL_854:
          v905 = *(_DWORD *)(a1 + 7400);
          v906 = *(_DWORD *)(a1 + 7412);
          v907 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v905;
          *(_DWORD *)(a1 + 7448) = v906;
          *(_DWORD *)(a1 + 7452) = v907;
          v908 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v908 + 4) = v905;
          v909 = *(_DWORD *)(a1 + 12);
          if (!v909)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBECF0);
          }
          v910 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v909 - 1) + 9) & 1;
          *(_BYTE *)(v908 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v908, (uint64_t)v10, 0, v910, (uint64_t)a5, a6, a7, a8);
          JSC::ASTBuilder::createImportExpr(*((_QWORD *)v975 + 1), (uint64_t)&v980, v895, v904, &v981, (uint64_t *)v990, (uint64_t *)(a1 + 7444));
          NewTargetExpr = v911;
          *(_DWORD *)(a1 + 7300) = v894;
          goto LABEL_856;
        }
        if (v896 != 20 && (v896 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "import call expects one or two arguments");
          goto LABEL_890;
        }
LABEL_889:
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_890:
        *(_DWORD *)(a1 + 7300) = v894;
        goto LABEL_79;
      }
    }
    if (v896 != 20 && (v896 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[24]>(a1);
      goto LABEL_890;
    }
    goto LABEL_889;
  }
  if (v12 != 12)
  {
    v17 = 0;
    goto LABEL_10;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
  v16 = **(_QWORD **)(a1 + 7376);
  v17 = v16 == *(_QWORD *)(v15 + 896) && v9[40] == 0;
  if ((*((_BYTE *)v975 + 24) & 2) != 0 || v16 != *(_QWORD *)(v15 + 880))
    goto LABEL_10;
  v491 = *(_DWORD *)(a1 + 12);
  if (!v491)
  {
    __break(0xC471u);
    JUMPOUT(0x197EBEBD0);
  }
  v492 = v491 - 1;
  v493 = *(_QWORD *)a1;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v492 + 12) & 0x10) != 0 || v9[1])
    goto LABEL_10;
  v972 = v17;
  v973 = v13;
  v494 = v11;
  if (*(_BYTE *)(v493 + 720 * v492 + 14) == 2)
  {
    v13 = v973;
    v17 = v972;
    goto LABEL_10;
  }
  v495 = (__int128 *)(a1 + 7296);
  v987 = *(_OWORD *)(a1 + 7296);
  LODWORD(v971) = *(_DWORD *)(a1 + 7316);
  v496 = (__int128 *)(a1 + 7320);
  *(_QWORD *)&v990[16] = *(_QWORD *)(a1 + 7336);
  *(_OWORD *)v990 = *(_OWORD *)(a1 + 7320);
  LODWORD(v970) = *v9;
  v497 = v975;
  v498 = *((_DWORD *)v975 + 263);
  v499 = *(int *)(a1 + 7408);
  v500 = *(int *)(a1 + 7404);
  v501 = *(_QWORD *)(a1 + 7288);
  LODWORD(v969) = *(_DWORD *)(v501 + 4);
  v968 = *(_DWORD *)v501;
  v965 = *(unsigned __int8 *)(v501 + 56);
  v993 = *(_QWORD *)v974;
  v994 = *(_DWORD *)(v974 + 8);
  v984 = *v494;
  v502 = *(_DWORD *)(a1 + 7400);
  v503 = *(_DWORD *)(a1 + 7412);
  *(_DWORD *)(a1 + 7444) = v502;
  *(_DWORD *)(a1 + 7448) = v503;
  *(_DWORD *)(a1 + 7452) = v500;
  *(_DWORD *)(v501 + 4) = v502;
  v504 = *(_BYTE *)(v493 + 720 * v492 + 9) & 1;
  *(_BYTE *)(v501 + 56) = 0;
  v505 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v501, (uint64_t)v10, 0, v504, (uint64_t)a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v505;
  if (v505 != 19)
    goto LABEL_422;
  v957 = v498;
  v967 = v10;
  v983 = *v495;
  LODWORD(v964) = *(_DWORD *)(a1 + 7316);
  v995 = *v496;
  v996 = *(_QWORD *)(a1 + 7336);
  LODWORD(v963) = *v9;
  v534 = v9[1];
  v535 = *((_DWORD *)v497 + 263);
  v536 = *(int *)(a1 + 7408);
  v537 = *(int *)(a1 + 7404);
  v538 = *(_QWORD *)(a1 + 7288);
  v540 = *(_DWORD *)v538;
  v539 = *(_DWORD *)(v538 + 4);
  v541 = *(unsigned __int8 *)(v538 + 56);
  v542 = *(_DWORD *)(a1 + 7400);
  v543 = *(_DWORD *)(a1 + 7412);
  *(_DWORD *)(a1 + 7444) = v542;
  *(_DWORD *)(a1 + 7448) = v543;
  *(_DWORD *)(a1 + 7452) = v537;
  *(_DWORD *)(v538 + 4) = v542;
  v544 = *(_DWORD *)(a1 + 12);
  if (!v544)
  {
    __break(0xC471u);
    JUMPOUT(0x197EBEC38);
  }
  v958 = v536;
  *(_DWORD *)v959 = v541;
  *(_DWORD *)&v959[4] = v540;
  v960.n128_u32[0] = v539;
  LODWORD(v961) = v535;
  LODWORD(v962) = v534;
  v545 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v544 - 1) + 9) & 1;
  *(_BYTE *)(v538 + 56) = 0;
  v546 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v538, (uint64_t)v967, 0, v545, v509, v510, v511, v512);
  *(_DWORD *)(a1 + 7368) = v546;
  if (v546 != 12
    || (v547 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952), **(_QWORD **)(a1 + 7376) != *(_QWORD *)(v547 + 1768)))
  {
    v10 = v967;
    v498 = v957;
LABEL_422:
    v513 = *(_QWORD *)(a1 + 7288);
    *(_BYTE *)(v513 + 150) = 0;
    v514 = *(WTF::StringImpl **)(v513 + 152);
    *(_QWORD *)(v513 + 152) = 0;
    if (v514)
    {
      if (*(_DWORD *)v514 == 2)
      {
        WTF::StringImpl::~StringImpl(v514, v506, v507, v508, v509, v510, v511, v512);
        WTF::fastFree(v684, v685, v686, v687, v688, v689, v690, v691);
      }
      else
      {
        *(_DWORD *)v514 -= 2;
      }
    }
    v515 = *(_QWORD *)(v513 + 88);
    v516 = *(_QWORD *)(v513 + 96);
    v517 = (__int16 *)(v515 + 2 * v499);
    *(_QWORD *)(v513 + 80) = v517;
    *(_QWORD *)(v513 + 112) = v515 + 2 * v500;
    *(_DWORD *)(v513 + 20) = 0;
    *(_DWORD *)(v513 + 36) = 0;
    if ((unint64_t)v517 >= v516)
      v518 = 0;
    else
      v518 = *v517;
    *(_WORD *)(v513 + 176) = v518;
    v519 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v519 = v968;
    *(_BYTE *)(v519 + 56) = v965;
    v520 = *(_DWORD *)(a1 + 7400);
    v521 = *(_DWORD *)(a1 + 7412);
    v522 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v520;
    *(_DWORD *)(a1 + 7448) = v521;
    *(_DWORD *)(a1 + 7452) = v522;
    *(_DWORD *)(v519 + 4) = v520;
    v523 = *(_DWORD *)(a1 + 12);
    if (!v523)
    {
      __break(0xC471u);
      JUMPOUT(0x197EBEC30);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v519, (uint64_t)v10, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v523 - 1) + 9) & 1, v509, v510, v511, v512);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v969;
    *v495 = v987;
    *(_DWORD *)(a1 + 7312) = v498;
    *(_DWORD *)(a1 + 7316) = (_DWORD)v971;
    *v496 = *(_OWORD *)v990;
    *(_QWORD *)(a1 + 7336) = *(_QWORD *)&v990[16];
    *v9 = v970;
    v9[1] = 0;
    *((_DWORD *)v975 + 263) = v498;
    v524 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    v11 = v494;
    v13 = v973;
    v17 = v972;
    if (v524)
    {
      if (*(_DWORD *)v524 == 2)
      {
        WTF::StringImpl::~StringImpl(v524, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
        WTF::fastFree(v692, v693, v694, v695, v696, v697, v698, v699);
      }
      else
      {
        *(_DWORD *)v524 -= 2;
      }
    }
    goto LABEL_10;
  }
  v9[195] = 1;
  v548 = *(_DWORD *)(a1 + 12);
  if (!v548)
  {
    __break(0xC471u);
    JUMPOUT(0x197EBEC40);
  }
  v549 = v494;
  v550 = (uint64_t *)(v547 + 880);
  JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v548 - 1), *(_QWORD *)(v547 + 880), 0);
  *(_QWORD *)(a1 + 7320) = v550;
  JSC::ASTBuilder::createResolve((uint64_t)v975, (uint64_t)&v984, v550, &v993, (uint64_t *)(a1 + 7444), 0);
  NewTargetExpr = v558;
  v559 = *(_QWORD *)(a1 + 7288);
  *(_BYTE *)(v559 + 150) = 0;
  v560 = *(WTF::StringImpl **)(v559 + 152);
  *(_QWORD *)(v559 + 152) = 0;
  v11 = v549;
  v17 = v972;
  if (v560)
  {
    if (*(_DWORD *)v560 == 2)
    {
      WTF::StringImpl::~StringImpl(v560, v551, v552, v553, v554, v555, v556, v557);
      WTF::fastFree(v707, v708, v709, v710, v711, v712, v713, v714);
    }
    else
    {
      *(_DWORD *)v560 -= 2;
    }
  }
  v561 = *(_QWORD *)(v559 + 88);
  v562 = *(_QWORD *)(v559 + 96);
  v563 = (__int16 *)(v561 + 2 * v958);
  *(_QWORD *)(v559 + 80) = v563;
  *(_QWORD *)(v559 + 112) = v561 + 2 * v537;
  *(_DWORD *)(v559 + 20) = 0;
  *(_DWORD *)(v559 + 36) = 0;
  if ((unint64_t)v563 >= v562)
    v564 = 0;
  else
    v564 = *v563;
  v10 = v967;
  *(_WORD *)(v559 + 176) = v564;
  v565 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)v565 = *(_DWORD *)&v959[4];
  *(_BYTE *)(v565 + 56) = v959[0];
  v566 = *(_DWORD *)(a1 + 7400);
  v567 = *(_DWORD *)(a1 + 7412);
  v568 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v566;
  *(_DWORD *)(a1 + 7448) = v567;
  *(_DWORD *)(a1 + 7452) = v568;
  *(_DWORD *)(v565 + 4) = v566;
  v569 = *(_DWORD *)(a1 + 12);
  if (!v569)
  {
    __break(0xC471u);
    JUMPOUT(0x197EBEC48);
  }
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v565, (uint64_t)v10, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v569 - 1) + 9) & 1, v554, v555, v556, v557);
  *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v960.n128_u32[0];
  *v495 = v983;
  v570 = v961;
  *(_DWORD *)(a1 + 7312) = v961;
  *(_DWORD *)(a1 + 7316) = (_DWORD)v964;
  *v496 = v995;
  *(_QWORD *)(a1 + 7336) = v996;
  *v9 = v963;
  v9[1] = v962;
  *((_DWORD *)v975 + 263) = v570;
  v571 = *(WTF::StringImpl **)(a1 + 7360);
  *(_QWORD *)(a1 + 7360) = 0;
  v13 = v973;
  if (v571)
  {
    if (*(_DWORD *)v571 == 2)
    {
      WTF::StringImpl::~StringImpl(v571, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      WTF::fastFree(v715, v716, v717, v718, v719, v720, v721, v722);
    }
    else
    {
      *(_DWORD *)v571 -= 2;
    }
  }
  if (!NewTargetExpr)
  {
LABEL_10:
    if ((unint64_t)&v956 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
        v9[8] = 1;
      }
      goto LABEL_75;
    }
    v18 = *v10;
    if (*v10 <= 512)
    {
      switch(v18)
      {
        case 0:
          v19 = *(_DWORD *)(a1 + 7400);
          v20 = *(_DWORD *)(a1 + 7404);
          LODWORD(v969) = *(_DWORD *)(a1 + 7408);
          v21 = *(_DWORD *)(a1 + 7412);
          *(_DWORD *)(a1 + 7444) = v19;
          *(_DWORD *)(a1 + 7448) = v21;
          LODWORD(v971) = v20;
          *(_DWORD *)(a1 + 7452) = v20;
          v22 = *(_QWORD *)(a1 + 7288);
          LODWORD(v970) = v19;
          *(_DWORD *)(v22 + 4) = v19;
          v23 = *(_DWORD *)(a1 + 12);
          if (!v23)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBEACCLL);
          }
          v24 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v23 - 1) + 9) & 1;
          *(_BYTE *)(v22 + 56) = 0;
          v25 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v22, (uint64_t)v10, 0, v24, (uint64_t)a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v25;
          v32 = *(_DWORD *)(a1 + 7300);
          if (v25 == 1)
          {
            v473 = *(_DWORD *)(a1 + 7400);
            v474 = *(_DWORD *)(a1 + 7412);
            v475 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v473;
            *(_DWORD *)(a1 + 7448) = v474;
            *(_DWORD *)(a1 + 7452) = v475;
            v476 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v476 + 4) = v473;
            v477 = *(_DWORD *)(a1 + 12);
            if (!v477)
            {
              __break(0xC471u);
              JUMPOUT(0x197EBEBA4);
            }
            v478 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v477 - 1) + 9) & 1;
            *(_BYTE *)(v476 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v476, (uint64_t)v10, 0, v478, v28, v29, v30, v31);
            v479 = (uint64_t *)*((_QWORD *)v975 + 1);
            NewTargetExpr = *v479;
            if ((unint64_t)(v479[1] - *v479) <= 0x27)
            {
              JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v975 + 1));
              NewTargetExpr = *v479;
            }
            *v479 = NewTargetExpr + 40;
            v480 = v969;
            *(_DWORD *)(NewTargetExpr + 8) = (_DWORD)v970;
            *(_DWORD *)(NewTargetExpr + 12) = v480;
            *(_DWORD *)(NewTargetExpr + 16) = (_DWORD)v971;
            *(_DWORD *)(NewTargetExpr + 20) = -1;
            *(_BYTE *)(NewTargetExpr + 24) = 0;
            *(_BYTE *)(NewTargetExpr + 25) = 126;
            *(_BYTE *)(NewTargetExpr + 26) = 0;
            *(_QWORD *)NewTargetExpr = &off_1E35851C8;
            *(_QWORD *)(NewTargetExpr + 32) = 0;
          }
          else
          {
            v33 = JSC::Parser<JSC::Lexer<char16_t>>::parseProperty<JSC::ASTBuilder>(a1, (uint64_t)v975, v26, v27, v28, v29, v30, v31);
            v968 = v32;
            if (!v33)
            {
              if (*v10 == 20 || (*v10 & 0x100000) != 0)
              {
                JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
              }
              else if (!*(_QWORD *)(a1 + 7360))
              {
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse object literal property");
              }
              NewTargetExpr = 0;
              goto LABEL_383;
            }
            v34 = v33;
            v35 = *(_QWORD **)v33;
            v966 = v11;
            v973 = v13;
            v36 = v35
               && *v35 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v975 + 41952) + 16)
               && (v572 = *(_WORD *)(v33 + 24), (v572 & 0x7FF) == 1)
               && (v572 & 0x3800) == 0;
            v972 = v17;
            v37 = (uint64_t *)*((_QWORD *)v975 + 1);
            v38 = *v37;
            if ((unint64_t)(v37[1] - *v37) <= 0x37)
            {
              JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v975 + 1));
              v38 = *v37;
            }
            *v37 = v38 + 56;
            v39 = v969;
            *(_DWORD *)(v38 + 8) = (_DWORD)v970;
            *(_DWORD *)(v38 + 12) = v39;
            *(_DWORD *)(v38 + 16) = (_DWORD)v971;
            *(_DWORD *)(v38 + 20) = -1;
            *(_BYTE *)(v38 + 24) = 0;
            *(_BYTE *)(v38 + 25) = 126;
            *(_BYTE *)(v38 + 26) = 0;
            *(_QWORD *)v38 = &off_1E357ABE0;
            *(_QWORD *)(v38 + 32) = v34;
            *(_QWORD *)(v38 + 40) = 0;
            v40 = v38;
            *(_BYTE *)(v38 + 48) = 0;
            while (1)
            {
              v41 = *v10;
              if (*v10 != 6)
                break;
              v42 = *(_DWORD *)(a1 + 7400);
              v43 = *(_DWORD *)(a1 + 7412);
              v44 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v42;
              *(_DWORD *)(a1 + 7448) = v43;
              *(_DWORD *)(a1 + 7452) = v44;
              v45 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v45 + 4) = v42;
              v46 = *(_DWORD *)(a1 + 12);
              if (!v46)
              {
                __break(0xC471u);
                JUMPOUT(0x197EBEA74);
              }
              v47 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v46 - 1) + 9) & 1;
              *(_BYTE *)(v45 + 56) = 0;
              v48 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v45, (uint64_t)v10, 0, v47, (uint64_t)a5, a6, a7, a8);
              *(_DWORD *)(a1 + 7368) = v48;
              if (v48 == 1)
                goto LABEL_160;
              v51 = *(_DWORD *)(a1 + 7400);
              v52 = *(int32x2_t *)(v9 + 60);
              v53 = JSC::Parser<JSC::Lexer<char16_t>>::parseProperty<JSC::ASTBuilder>(a1, (uint64_t)v975, v49, v50, (uint64_t)a5, a6, a7, a8);
              if (!v53)
              {
                if (*v10 == 20 || (*v10 & 0x100000) != 0)
                {
                  JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
                }
                else if (!*(_QWORD *)(a1 + 7360))
                {
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse object literal property");
                }
                NewTargetExpr = 0;
                v11 = v966;
                v13 = v973;
LABEL_382:
                v17 = v972;
LABEL_383:
                v32 = v968;
                goto LABEL_165;
              }
              v54 = v53;
              if (*(_QWORD *)v53
                && ((v55 = *(_WORD *)(v53 + 24),
                     **(_QWORD **)v53 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v975 + 41952) + 16))
                  ? (v56 = (v55 & 0x7FF) == 1)
                  : (v56 = 0),
                    v56))
              {
                v490 = (v55 & 0x3800) == 0;
                if (v490 && v36)
                {
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Attempted to redefine __proto__ property");
                  goto LABEL_381;
                }
                v57 = v490 | v36;
              }
              else
              {
                v57 = v36;
              }
              v58 = *((_QWORD *)v975 + 1);
              v59 = *(_QWORD *)v58;
              v60 = *(_QWORD *)(v58 + 8);
              if ((unint64_t)(v60 - *(_QWORD *)v58) <= 0x37)
              {
                if (v60)
                {
                  v743 = (_QWORD *)(v58 + 24);
                  v744 = v60 - 8000;
                  *(_QWORD *)v990 = v60 - 8000;
                  v745 = *(unsigned int *)(v58 + 36);
                  if ((_DWORD)v745 == *(_DWORD *)(v58 + 32))
                  {
                    v811 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v743, v745 + 1, (unint64_t)v990);
                    v745 = *(unsigned int *)(v58 + 36);
                    *(_QWORD *)(*(_QWORD *)(v58 + 24) + 8 * v745) = *v811;
                  }
                  else
                  {
                    *(_QWORD *)(*v743 + 8 * v745) = v744;
                  }
                  *(_DWORD *)(v58 + 36) = v745 + 1;
                }
                v59 = WTF::fastMalloc((WTF *)0x1F40);
                *(_QWORD *)(v58 + 8) = v59 + 8000;
              }
              *(_QWORD *)v58 = v59 + 56;
              *(_DWORD *)(v59 + 8) = v51;
              *(int32x2_t *)(v59 + 12) = vrev64_s32(v52);
              *(_DWORD *)(v59 + 20) = -1;
              *(_BYTE *)(v59 + 24) = 0;
              *(_BYTE *)(v59 + 25) = 126;
              *(_BYTE *)(v59 + 26) = 0;
              *(_QWORD *)v59 = &off_1E357ABE0;
              *(_QWORD *)(v59 + 32) = v54;
              *(_QWORD *)(v59 + 40) = 0;
              *(_BYTE *)(v59 + 48) = 0;
              *(_QWORD *)(v40 + 40) = v59;
              v40 = v59;
              v36 = v57;
            }
            if (v41 == 1)
            {
LABEL_160:
              v228 = *(_DWORD *)(a1 + 7400);
              v229 = *(_DWORD *)(a1 + 7412);
              v230 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v228;
              *(_DWORD *)(a1 + 7448) = v229;
              *(_DWORD *)(a1 + 7452) = v230;
              v231 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v231 + 4) = v228;
              v232 = *(_DWORD *)(a1 + 12);
              if (!v232)
              {
                __break(0xC471u);
                JUMPOUT(0x197EBEB64);
              }
              v233 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v232 - 1) + 9) & 1;
              *(_BYTE *)(v231 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v231, (uint64_t)v10, 0, v233, (uint64_t)a5, a6, a7, a8);
              v234 = (uint64_t *)*((_QWORD *)v975 + 1);
              NewTargetExpr = *v234;
              v17 = v972;
              v32 = v968;
              if ((unint64_t)(v234[1] - *v234) <= 0x27)
              {
                JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v975 + 1));
                NewTargetExpr = *v234;
              }
              *v234 = NewTargetExpr + 40;
              v235 = v969;
              *(_DWORD *)(NewTargetExpr + 8) = (_DWORD)v970;
              *(_DWORD *)(NewTargetExpr + 12) = v235;
              *(_DWORD *)(NewTargetExpr + 16) = (_DWORD)v971;
              *(_DWORD *)(NewTargetExpr + 20) = -1;
              *(_BYTE *)(NewTargetExpr + 24) = 0;
              *(_BYTE *)(NewTargetExpr + 25) = 126;
              *(_BYTE *)(NewTargetExpr + 26) = 0;
              *(_QWORD *)NewTargetExpr = &off_1E35851C8;
              *(_QWORD *)(NewTargetExpr + 32) = v38;
              v11 = v966;
              goto LABEL_164;
            }
            if (v41 == 20 || (v41 & 0x100000) != 0)
            {
              JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_381:
              NewTargetExpr = 0;
              v11 = v966;
              v13 = v973;
              goto LABEL_382;
            }
            v13 = v973;
            v17 = v972;
            v32 = v968;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[15]>(a1, "}", "object literal");
            NewTargetExpr = 0;
            v11 = v966;
          }
          goto LABEL_165;
        case 1:
        case 3:
        case 5:
        case 6:
        case 7:
        case 13:
          goto LABEL_74;
        case 2:
          v170 = *(_DWORD *)(a1 + 7400);
          v171 = *(_DWORD *)(a1 + 7412);
          v172 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v170;
          *(_DWORD *)(a1 + 7448) = v171;
          *(_DWORD *)(a1 + 7452) = v172;
          v173 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v173 + 4) = v170;
          v174 = *(_DWORD *)(a1 + 12);
          if (!v174)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBEAF4);
          }
          v175 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v174 - 1) + 9) & 1;
          *(_BYTE *)(v173 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v173, (uint64_t)v10, 0, v175, (uint64_t)a5, a6, a7, a8);
          v32 = *(_DWORD *)(a1 + 7300);
          v176 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, (uint64_t)v975);
          v177 = *(_DWORD *)(a1 + 7368);
          if (v177 == 3)
          {
            NewTargetExpr = v176;
            v178 = *(_DWORD *)(a1 + 7400);
            v179 = *(_DWORD *)(a1 + 7412);
            v180 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v178;
            *(_DWORD *)(a1 + 7448) = v179;
            *(_DWORD *)(a1 + 7452) = v180;
            v181 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v181 + 4) = v178;
            v182 = *(_DWORD *)(a1 + 12);
            if (!v182)
            {
              __break(0xC471u);
              JUMPOUT(0x197EBEB44);
            }
            v183 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v182 - 1) + 9) & 1;
            *(_BYTE *)(v181 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v181, (uint64_t)v10, 0, v183, (uint64_t)a5, a6, a7, a8);
            goto LABEL_165;
          }
          if (v177 == 20 || (v177 & 0x100000) != 0)
            goto LABEL_405;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[20]>(a1);
          goto LABEL_406;
        case 4:
          v995 = *v11;
          v100 = *(_DWORD *)(a1 + 7400);
          v101 = *(_DWORD *)(a1 + 7412);
          v102 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v100;
          *(_DWORD *)(a1 + 7448) = v101;
          *(_DWORD *)(a1 + 7452) = v102;
          v103 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v103 + 4) = v100;
          v104 = *(_DWORD *)(a1 + 12);
          if (!v104)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBEAD4);
          }
          v105 = (uint64_t *)(a1 + 7444);
          v106 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v104 - 1) + 9) & 1;
          *(_BYTE *)(v103 + 56) = 0;
          v107 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v103, (uint64_t)v10, 0, v106, (uint64_t)a5, a6, a7, a8);
          v112 = 0;
          *(_DWORD *)(a1 + 7368) = v107;
          v32 = *(_DWORD *)(a1 + 7300);
          while (2)
          {
            if (v107 == 5)
            {
              v453 = *(_DWORD *)(a1 + 7400);
              v454 = *(_DWORD *)(a1 + 7412);
              v455 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v453;
              *(_DWORD *)(a1 + 7448) = v454;
              *(_DWORD *)(a1 + 7452) = v455;
              v456 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v456 + 4) = v453;
              v457 = *(_DWORD *)(a1 + 12);
              if (!v457)
              {
                __break(0xC471u);
                JUMPOUT(0x197EBEB9CLL);
              }
              v458 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v457 - 1) + 9) & 1;
              *(_BYTE *)(v456 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v456, (uint64_t)v10, 0, v458, v108, v109, v110, v111);
              JSC::ASTBuilder::createArray((uint64_t)v975, (uint64_t)&v995, v112);
LABEL_37:
              NewTargetExpr = v61;
            }
            else
            {
              v970 = v105;
              if (v107 == 6)
              {
                v731 = *(_DWORD *)(a1 + 7400);
                v732 = *(_DWORD *)(a1 + 7412);
                v733 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v731;
                *(_DWORD *)(a1 + 7448) = v732;
                *(_DWORD *)(a1 + 7452) = v733;
                v734 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v734 + 4) = v731;
                v735 = *(_DWORD *)(a1 + 12);
                if (!v735)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EBEB34);
                }
                v736 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v735 - 1) + 9) & 1;
                *(_BYTE *)(v734 + 56) = 0;
                v107 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v734, (uint64_t)v10, 0, v736, v108, v109, v110, v111);
                *(_DWORD *)(a1 + 7368) = v107;
                ++v112;
                v105 = v970;
                continue;
              }
              v972 = v17;
              if (v107 == 37)
              {
                *(_OWORD *)v990 = *v11;
                *(_QWORD *)&v987 = *(_QWORD *)v974;
                DWORD2(v987) = *(_DWORD *)(v974 + 8);
                *(_QWORD *)&v984 = *(_QWORD *)(a1 + 7428);
                DWORD2(v984) = *(_DWORD *)(a1 + 7436);
                v759 = *(_DWORD *)(a1 + 7400);
                v760 = *(_DWORD *)(a1 + 7412);
                v761 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v759;
                *(_DWORD *)(a1 + 7448) = v760;
                *(_DWORD *)(a1 + 7452) = v761;
                v762 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v762 + 4) = v759;
                v763 = *(_DWORD *)(a1 + 12);
                if (!v763)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EBEC88);
                }
                v764 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v763 - 1) + 9) & 1;
                *(_BYTE *)(v762 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v762, (uint64_t)v10, 0, v764, v108, v109, v110, v111);
                v765 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpressionOrPropagateErrorClass<JSC::ASTBuilder>(a1, (uint64_t)v975);
                if (!v765)
                {
                  if (*v10 == 20 || (*v10 & 0x100000) != 0)
                  {
                    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
                  }
                  else if (!*(_QWORD *)(a1 + 7360))
                  {
                    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse subject of a spread operation");
                  }
                  NewTargetExpr = 0;
                  v17 = v972;
                  break;
                }
                JSC::ASTBuilder::createSpreadExpression(*((JSC::ParserArena **)v975 + 1), (uint64_t)v990, v765, (uint64_t *)&v987, (uint64_t *)&v984, v105);
                v113 = v766;
              }
              else
              {
                *(_DWORD *)v990 = 0;
                *(_QWORD *)&v990[8] = *(_QWORD *)(a1 + 7496);
                *(_QWORD *)&v990[16] = a1;
                *(_QWORD *)(a1 + 7496) = v990;
                v113 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, v975, v990);
                v114 = *(_QWORD *)&v990[8];
                if (!v113 && *(_QWORD *)&v990[8])
                  **(_DWORD **)&v990[8] = *(_DWORD *)v990;
                *(_QWORD *)(*(_QWORD *)&v990[16] + 7496) = v114;
              }
              LODWORD(v971) = v32;
              v973 = v13;
              if (!v113)
              {
                if (*v10 == 20 || (*v10 & 0x100000) != 0)
                {
                  JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
                }
                else if (!*(_QWORD *)(a1 + 7360))
                {
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse array literal element");
                }
                NewTargetExpr = 0;
                v13 = v973;
                goto LABEL_577;
              }
              v115 = (uint64_t *)*((_QWORD *)v975 + 1);
              v116 = *v115;
              if ((unint64_t)(v115[1] - *v115) <= 0x17)
              {
                JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v975 + 1));
                v116 = *v115;
              }
              *v115 = v116 + 24;
              *(_QWORD *)v116 = 0;
              *(_QWORD *)(v116 + 8) = v113;
              *(_DWORD *)(v116 + 16) = v112;
              v117 = (_QWORD *)v116;
LABEL_97:
              while (1)
              {
                v118 = *v10;
                if (*v10 != 6)
                  break;
                v119 = *(_DWORD *)(a1 + 7400);
                v120 = *(_DWORD *)(a1 + 7412);
                v121 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v119;
                *(_DWORD *)(a1 + 7448) = v120;
                *(_DWORD *)(a1 + 7452) = v121;
                v122 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v122 + 4) = v119;
                v123 = *(_DWORD *)(a1 + 12);
                if (!v123)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EBEA64);
                }
                v124 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v123 - 1) + 9) & 1;
                *(_BYTE *)(v122 + 56) = 0;
                v125 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v122, (uint64_t)v10, 0, v124, (uint64_t)a5, a6, a7, a8);
                v130 = 0;
                *(_DWORD *)(a1 + 7368) = v125;
                while (v125 != 37)
                {
                  if (v125 == 5)
                  {
                    v672 = *(_DWORD *)(a1 + 7400);
                    v673 = *(_DWORD *)(a1 + 7412);
                    v674 = *(_DWORD *)(a1 + 7404);
                    *(_DWORD *)(a1 + 7444) = v672;
                    *(_DWORD *)(a1 + 7448) = v673;
                    *(_DWORD *)(a1 + 7452) = v674;
                    v675 = *(_QWORD *)(a1 + 7288);
                    *(_DWORD *)(v675 + 4) = v672;
                    v676 = *(_DWORD *)(a1 + 12);
                    if (!v676)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197EBEC78);
                    }
                    v677 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v676 - 1) + 9) & 1;
                    *(_BYTE *)(v675 + 56) = 0;
                    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v675, (uint64_t)v10, 0, v677, v126, v127, v128, v129);
                    JSC::ASTBuilder::createArray((uint64_t)v975, (uint64_t)&v995, v130, v116);
                    NewTargetExpr = v678;
                    goto LABEL_576;
                  }
                  if (v125 != 6)
                  {
                    *(_DWORD *)v990 = 0;
                    *(_QWORD *)&v990[8] = *(_QWORD *)(a1 + 7496);
                    *(_QWORD *)&v990[16] = a1;
                    *(_QWORD *)(a1 + 7496) = v990;
                    v131 = v975;
                    v132 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, v975, v990);
                    v133 = *(_QWORD *)&v990[8];
                    if (v132)
                    {
                      *(_QWORD *)(*(_QWORD *)&v990[16] + 7496) = *(_QWORD *)&v990[8];
                      v134 = *((_QWORD *)v131 + 1);
                      v135 = *(_QWORD *)v134;
                      v136 = *(_QWORD *)(v134 + 8);
                      if ((unint64_t)(v136 - *(_QWORD *)v134) <= 0x17)
                      {
                        v969 = v132;
                        if (v136)
                        {
                          v740 = (_QWORD *)(v134 + 24);
                          v741 = v136 - 8000;
                          *(_QWORD *)v990 = v741;
                          v742 = *(unsigned int *)(v134 + 36);
                          if ((_DWORD)v742 == *(_DWORD *)(v134 + 32))
                          {
                            v809 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v740, v742 + 1, (unint64_t)v990);
                            v742 = *(unsigned int *)(v134 + 36);
                            *(_QWORD *)(*(_QWORD *)(v134 + 24) + 8 * v742) = *v809;
                          }
                          else
                          {
                            *(_QWORD *)(*v740 + 8 * v742) = v741;
                          }
                          *(_DWORD *)(v134 + 36) = v742 + 1;
                        }
                        v135 = WTF::fastMalloc((WTF *)0x1F40);
                        *(_QWORD *)(v134 + 8) = v135 + 8000;
                        v132 = v969;
                      }
                      *(_QWORD *)v134 = v135 + 24;
                      *(_QWORD *)v135 = 0;
                      *(_QWORD *)(v135 + 8) = v132;
                      *(_DWORD *)(v135 + 16) = v130;
                      *v117 = v135;
                      v117 = (_QWORD *)v135;
                      goto LABEL_97;
                    }
                    if (*(_QWORD *)&v990[8])
                      **(_DWORD **)&v990[8] = *(_DWORD *)v990;
                    *(_QWORD *)(*(_QWORD *)&v990[16] + 7496) = v133;
                    if (*v10 == 20 || (*v10 & 0x100000) != 0)
                    {
                      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
                    }
                    else if (!*(_QWORD *)(a1 + 7360))
                    {
                      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse array literal element");
                    }
                    NewTargetExpr = 0;
LABEL_576:
                    v13 = v973;
LABEL_577:
                    v17 = v972;
                    v32 = v971;
                    goto LABEL_165;
                  }
                  v829 = *(_DWORD *)(a1 + 7400);
                  v830 = *(_DWORD *)(a1 + 7412);
                  v831 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v829;
                  *(_DWORD *)(a1 + 7448) = v830;
                  *(_DWORD *)(a1 + 7452) = v831;
                  v832 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v832 + 4) = v829;
                  v833 = *(_DWORD *)(a1 + 12);
                  if (!v833)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EBEA6CLL);
                  }
                  v834 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v833 - 1) + 9) & 1;
                  *(_BYTE *)(v832 + 56) = 0;
                  v125 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v832, (uint64_t)v10, 0, v834, v126, v127, v128, v129);
                  *(_DWORD *)(a1 + 7368) = v125;
                  ++v130;
                }
                v639 = *(_DWORD *)(a1 + 7400);
                v640 = *(_DWORD *)(a1 + 7404);
                v965 = *(_DWORD *)(a1 + 7408);
                *(_QWORD *)&v987 = *(_QWORD *)v974;
                DWORD2(v987) = *(_DWORD *)(v974 + 8);
                *(_QWORD *)&v984 = *(_QWORD *)(a1 + 7428);
                DWORD2(v984) = *(_DWORD *)(a1 + 7436);
                v641 = *(_DWORD *)(a1 + 7412);
                *(_DWORD *)(a1 + 7444) = v639;
                *(_DWORD *)(a1 + 7448) = v641;
                v968 = v639;
                LODWORD(v969) = v640;
                *(_DWORD *)(a1 + 7452) = v640;
                v642 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v642 + 4) = v639;
                v643 = *(_DWORD *)(a1 + 12);
                if (!v643)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EBEAA4);
                }
                v644 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v643 - 1) + 9) & 1;
                *(_BYTE *)(v642 + 56) = 0;
                v967 = v10;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v642, (uint64_t)v10, 0, v644, v126, v127, v128, v129);
                *(_DWORD *)v990 = 0;
                *(_QWORD *)&v990[8] = *(_QWORD *)(a1 + 7496);
                *(_QWORD *)&v990[16] = a1;
                *(_QWORD *)(a1 + 7496) = v990;
                v645 = v975;
                v646 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, v975, v990);
                v647 = *(_QWORD *)&v990[8];
                v964 = (unsigned __int8 *)v646;
                if (!v646)
                {
                  if (*(_QWORD *)&v990[8])
                    **(_DWORD **)&v990[8] = *(_DWORD *)v990;
                  *(_QWORD *)(*(_QWORD *)&v990[16] + 7496) = v647;
                  if (*v967 == 20 || (*v967 & 0x100000) != 0)
                  {
                    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
                  }
                  else if (!*(_QWORD *)(a1 + 7360))
                  {
                    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse subject of a spread operation");
                  }
                  NewTargetExpr = 0;
                  v13 = v973;
                  v10 = v967;
                  goto LABEL_577;
                }
                *(_QWORD *)(*(_QWORD *)&v990[16] + 7496) = *(_QWORD *)&v990[8];
                v648 = (JSC::ParserArena *)*((_QWORD *)v645 + 1);
                v649 = *(_QWORD *)v648;
                if (*((_QWORD *)v648 + 1) - *(_QWORD *)v648 <= 0x47uLL)
                {
                  v963 = (JSC::ParserArena *)*((_QWORD *)v645 + 1);
                  JSC::ParserArena::allocateFreeablePool(v648);
                  v648 = v963;
                  v649 = *(_QWORD *)v963;
                }
                *(_QWORD *)v648 = v649 + 72;
                v650 = v969;
                v651 = v965;
                *(_DWORD *)(v649 + 8) = v968;
                *(_DWORD *)(v649 + 12) = v651;
                *(_DWORD *)(v649 + 16) = v650;
                *(_DWORD *)(v649 + 20) = -1;
                *(_BYTE *)(v649 + 24) = 0;
                *(_BYTE *)(v649 + 25) = 126;
                *(_BYTE *)(v649 + 26) = 0;
                *(_QWORD *)v649 = &off_1E3585648;
                *(_QWORD *)(v649 + 64) = v964;
                *(_QWORD *)(v649 + 28) = v984;
                *(_DWORD *)(v649 + 36) = DWORD2(v984);
                *(_QWORD *)(v649 + 52) = -1;
                *(_DWORD *)(v649 + 60) = -1;
                *(_DWORD *)(v649 + 48) = DWORD2(v987);
                *(_QWORD *)(v649 + 40) = v987;
                v652 = *((_DWORD *)v970 + 2);
                *(_QWORD *)(v649 + 52) = *v970;
                *(_DWORD *)(v649 + 60) = v652;
                v653 = (JSC::ParserArena *)*((_QWORD *)v645 + 1);
                v654 = *(_QWORD *)v653;
                if (*((_QWORD *)v653 + 1) - *(_QWORD *)v653 <= 0x17uLL)
                {
                  JSC::ParserArena::allocateFreeablePool(v653);
                  v654 = *(_QWORD *)v653;
                }
                *(_QWORD *)v653 = v654 + 24;
                *(_QWORD *)v654 = 0;
                *(_QWORD *)(v654 + 8) = v649;
                *(_DWORD *)(v654 + 16) = v130;
                *v117 = v654;
                v117 = (_QWORD *)v654;
                v10 = v967;
              }
              if (v118 == 5)
              {
                v273 = *(_DWORD *)(a1 + 7400);
                v274 = *(_DWORD *)(a1 + 7412);
                v275 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v273;
                *(_DWORD *)(a1 + 7448) = v274;
                *(_DWORD *)(a1 + 7452) = v275;
                v276 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v276 + 4) = v273;
                v277 = *(_DWORD *)(a1 + 12);
                v17 = v972;
                v32 = v971;
                if (!v277)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EBEB6CLL);
                }
                v278 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v277 - 1) + 9) & 1;
                *(_BYTE *)(v276 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v276, (uint64_t)v10, 0, v278, (uint64_t)a5, a6, a7, a8);
                JSC::ASTBuilder::createArray(*((JSC::ParserArena **)v975 + 1), (uint64_t)&v995, v116);
                NewTargetExpr = v279;
LABEL_164:
                v13 = v973;
              }
              else
              {
                v17 = v972;
                v32 = v971;
                if (v118 == 37)
                {
                  v13 = v973;
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(a1, "The '...' operator should come before a target expression");
                }
                else
                {
                  v481 = v118 != 20 && (v118 & 0x100000) == 0;
                  v13 = v973;
                  if (v481)
                  {
                    if (!*(_QWORD *)(a1 + 7360))
                      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected either a closing ']' or a ',' following an array element");
                  }
                  else
                  {
LABEL_405:
                    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
                  }
                }
LABEL_406:
                NewTargetExpr = 0;
              }
            }
            break;
          }
LABEL_165:
          *(_DWORD *)(a1 + 7300) = v32;
          break;
        case 8:
          v77 = JSC::Parser<JSC::Lexer<char16_t>>::parseTemplateLiteral<JSC::ASTBuilder>(a1, (uint64_t)v975, 1, a4, (uint64_t)a5, a6, a7, a8);
          goto LABEL_195;
        case 9:
          v973 = v13;
          v149 = *(double *)(a1 + 7376);
          v150 = *(_DWORD *)(a1 + 7400);
          v151 = *(_DWORD *)(a1 + 7404);
          v152 = *(_DWORD *)(a1 + 7408);
          v153 = *(_DWORD *)(a1 + 7412);
          *(_DWORD *)(a1 + 7444) = v150;
          *(_DWORD *)(a1 + 7448) = v153;
          *(_DWORD *)(a1 + 7452) = v151;
          v154 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v154 + 4) = v150;
          v155 = *(_DWORD *)(a1 + 12);
          if (!v155)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBEAE4);
          }
          v156 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v155 - 1) + 9) & 1;
          *(_BYTE *)(v154 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v154, (uint64_t)v10, 0, v156, (uint64_t)a5, a6, a7, a8);
          v157 = v975;
          ++*((_DWORD *)v975 + 7);
          v158 = (uint64_t *)*((_QWORD *)v157 + 1);
          NewTargetExpr = *v158;
          if ((unint64_t)(v158[1] - *v158) <= 0x27)
          {
            JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v157 + 1));
            NewTargetExpr = *v158;
          }
          *v158 = NewTargetExpr + 40;
          if ((*(_QWORD *)&v149 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || v149 != (double)(int)v149
            || (v159 = 3, !(int)v149) && (*(_QWORD *)&v149 & 0x8000000000000000) != 0)
          {
            if (*(_QWORD *)&v149 >> 49 == 32766)
              v159 = 3;
            else
              v159 = 2;
          }
          *(_DWORD *)(NewTargetExpr + 8) = v150;
          *(_DWORD *)(NewTargetExpr + 12) = v152;
          *(_DWORD *)(NewTargetExpr + 16) = v151;
          *(_DWORD *)(NewTargetExpr + 20) = -1;
          *(_BYTE *)(NewTargetExpr + 24) = 0;
          *(_BYTE *)(NewTargetExpr + 25) = v159;
          *(_BYTE *)(NewTargetExpr + 26) = 0;
          *(double *)(NewTargetExpr + 32) = v149;
          v148 = &off_1E3578920;
          goto LABEL_128;
        case 10:
          v973 = v13;
          v137 = *(double *)(a1 + 7376);
          v138 = *(_DWORD *)(a1 + 7400);
          v139 = *(_DWORD *)(a1 + 7404);
          v140 = *(_DWORD *)(a1 + 7408);
          v141 = *(_DWORD *)(a1 + 7412);
          *(_DWORD *)(a1 + 7444) = v138;
          *(_DWORD *)(a1 + 7448) = v141;
          *(_DWORD *)(a1 + 7452) = v139;
          v142 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v142 + 4) = v138;
          v143 = *(_DWORD *)(a1 + 12);
          if (!v143)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBEADCLL);
          }
          v144 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v143 - 1) + 9) & 1;
          *(_BYTE *)(v142 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v142, (uint64_t)v10, 0, v144, (uint64_t)a5, a6, a7, a8);
          v145 = v975;
          ++*((_DWORD *)v975 + 7);
          v146 = (uint64_t *)*((_QWORD *)v145 + 1);
          NewTargetExpr = *v146;
          if ((unint64_t)(v146[1] - *v146) <= 0x27)
          {
            JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v145 + 1));
            NewTargetExpr = *v146;
          }
          *v146 = NewTargetExpr + 40;
          if ((*(_QWORD *)&v137 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || v137 != (double)(int)v137
            || (v147 = 3, !(int)v137) && (*(_QWORD *)&v137 & 0x8000000000000000) != 0)
          {
            if (*(_QWORD *)&v137 >> 49 == 32766)
              v147 = 3;
            else
              v147 = 2;
          }
          *(_DWORD *)(NewTargetExpr + 8) = v138;
          *(_DWORD *)(NewTargetExpr + 12) = v140;
          *(_DWORD *)(NewTargetExpr + 16) = v139;
          *(_DWORD *)(NewTargetExpr + 20) = -1;
          *(_BYTE *)(NewTargetExpr + 24) = 0;
          *(_BYTE *)(NewTargetExpr + 25) = v147;
          *(_BYTE *)(NewTargetExpr + 26) = 0;
          *(double *)(NewTargetExpr + 32) = v137;
          v148 = &off_1E3578AB0;
LABEL_128:
          *(_QWORD *)NewTargetExpr = v148;
          if (v17)
            goto LABEL_637;
          goto LABEL_144;
        case 11:
          v972 = v17;
          v973 = v13;
          v966 = v11;
          v184 = *(_QWORD *)(a1 + 7376);
          v185 = v9[40];
          v186 = *(_DWORD *)(a1 + 7400);
          v187 = *(_DWORD *)(a1 + 7404);
          v188 = *(_DWORD *)(a1 + 7408);
          v189 = *(_DWORD *)(a1 + 7412);
          *(_DWORD *)(a1 + 7444) = v186;
          *(_DWORD *)(a1 + 7448) = v189;
          *(_DWORD *)(a1 + 7452) = v187;
          v190 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v190 + 4) = v186;
          v191 = *(_DWORD *)(a1 + 12);
          if (!v191)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBEAFCLL);
          }
          v192 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v191 - 1) + 9) & 1;
          *(_BYTE *)(v190 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v190, (uint64_t)v10, 0, v192, (uint64_t)a5, a6, a7, a8);
          v193 = v975;
          ++*((_DWORD *)v975 + 7);
          v194 = (uint64_t *)*((_QWORD *)v193 + 1);
          NewTargetExpr = *v194;
          if ((unint64_t)(v194[1] - *v194) <= 0x2F)
          {
            JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v193 + 1));
            NewTargetExpr = *v194;
          }
          *v194 = NewTargetExpr + 48;
          *(_DWORD *)(NewTargetExpr + 8) = v186;
          *(_DWORD *)(NewTargetExpr + 12) = v188;
          *(_DWORD *)(NewTargetExpr + 16) = v187;
          *(_DWORD *)(NewTargetExpr + 20) = -1;
          *(_BYTE *)(NewTargetExpr + 24) = 0;
          *(_BYTE *)(NewTargetExpr + 25) = 8;
          *(_BYTE *)(NewTargetExpr + 26) = 0;
          *(_QWORD *)NewTargetExpr = &off_1E3583E38;
          *(_QWORD *)(NewTargetExpr + 32) = v184;
          *(_BYTE *)(NewTargetExpr + 40) = v185;
          *(_BYTE *)(NewTargetExpr + 41) = 0;
          v11 = v966;
          goto LABEL_143;
        case 12:
          v96 = *(_DWORD *)(a1 + 12);
          if (!v96)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBEAC4);
          }
          v90 = v96 - 1;
          v91 = *(_QWORD *)a1;
          v97 = *(uint64_t **)(a1 + 7376);
          v98 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v90 + 12) & 0x10) != 0)
          {
            v99 = *v97;
            if (*v97 == *(_QWORD *)(v98 + 880))
            {
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_75;
              v756 = "Cannot use 'arguments' as an identifier in static block";
              v757 = a1;
              v758 = 0;
              goto LABEL_654;
            }
          }
          else
          {
            v99 = *v97;
          }
          if (v99 != *(_QWORD *)(v98 + 896) || v9[40])
          {
            if (v9[1] && v99 == *(_QWORD *)(v98 + 880))
            {
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_75;
              v756 = "Cannot reference 'arguments' in class field initializer";
              v757 = a1;
              v758 = 1;
LABEL_654:
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v757, v758, v756);
              goto LABEL_75;
            }
LABEL_191:
            *(_QWORD *)&v995 = *(_QWORD *)v974;
            DWORD2(v995) = *(_DWORD *)(v974 + 8);
            v280 = *(uint64_t **)(a1 + 7376);
            if (*(_BYTE *)(v91 + 720 * v90 + 14) == 2
              && *v280 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 880))
            {
              if (v18 == 20 || (v18 & 0x100000) != 0)
              {
                JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
              }
              else if (!*(_QWORD *)(a1 + 7360))
              {
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "arguments is not valid in this context");
              }
              NewTargetExpr = 0;
              break;
            }
            *(_OWORD *)v990 = *v11;
            v281 = *(_DWORD *)(a1 + 7400);
            v282 = *(_DWORD *)(a1 + 7412);
            v283 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v281;
            *(_DWORD *)(a1 + 7448) = v282;
            *(_DWORD *)(a1 + 7452) = v283;
            v284 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v284 + 4) = v281;
            v285 = *(_BYTE *)(v91 + 720 * v90 + 9) & 1;
            *(_BYTE *)(v284 + 56) = 0;
            v286 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v284, (uint64_t)v10, 0, v285, (uint64_t)a5, a6, a7, a8);
            *(_DWORD *)(a1 + 7368) = v286;
            if (v286 == 38)
            {
              NewTargetExpr = 0;
              break;
            }
            v287 = *(_DWORD *)(a1 + 12);
            if (!v287)
            {
              __break(0xC471u);
              JUMPOUT(0x197EBEA7CLL);
            }
            JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v287 - 1), *v280, *v280 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 1248));
            *(_QWORD *)(a1 + 7320) = v280;
            JSC::ASTBuilder::createResolve((uint64_t)v975, (uint64_t)v990, v280, (uint64_t *)&v995, (uint64_t *)(a1 + 7444), 1);
            goto LABEL_195;
          }
          *(_QWORD *)&v987 = *(_QWORD *)v974;
          DWORD2(v987) = *(_DWORD *)(v974 + 8);
          v995 = *v11;
          v776 = *(_DWORD *)(a1 + 7400);
          v777 = *(_DWORD *)(a1 + 7412);
          v778 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v776;
          *(_DWORD *)(a1 + 7448) = v777;
          *(_DWORD *)(a1 + 7452) = v778;
          v779 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v779 + 4) = v776;
          v780 = *(_BYTE *)(v91 + 720 * v90 + 9) & 1;
          *(_BYTE *)(v779 + 56) = 0;
          v781 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v779, (uint64_t)v10, 0, v780, (uint64_t)a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v781;
          if (v781 == 523)
          {
            v782 = *(_QWORD *)(a1 + 7288);
            if (!*(_BYTE *)(v782 + 56))
            {
              v783 = *(_DWORD *)(a1 + 7400);
              v784 = *(_DWORD *)(a1 + 7412);
              v785 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v783;
              *(_DWORD *)(a1 + 7448) = v784;
              *(_DWORD *)(a1 + 7452) = v785;
              *(_DWORD *)(v782 + 4) = v783;
              v786 = *(_DWORD *)(a1 + 12);
              if (!v786)
              {
                __break(0xC471u);
                JUMPOUT(0x197EBECA0);
              }
              v787 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v786 - 1) + 9) & 1;
              *(_BYTE *)(v782 + 56) = 0;
              v792 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v782, (uint64_t)v10, 0, v787, (uint64_t)a5, a6, a7, a8);
              *(_DWORD *)(a1 + 7368) = v792;
              if (v792 == 191488)
              {
                v793 = *(_DWORD *)(a1 + 7400);
                v794 = *(_DWORD *)(a1 + 7412);
                v795 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v793;
                *(_DWORD *)(a1 + 7448) = v794;
                *(_DWORD *)(a1 + 7452) = v795;
                v796 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v796 + 4) = v793;
                v797 = *(_DWORD *)(a1 + 12);
                if (!v797)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EBECA8);
                }
                v798 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v797 - 1) + 9) & 1;
                *(_BYTE *)(v796 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v796, (uint64_t)v10, 0, v798, v788, v789, v790, v791);
                v799 = 16;
              }
              else
              {
                v799 = 9;
              }
              v800 = v9[130];
              v9[130] = v799;
              v992 = 0;
              v991 = 0u;
              *(_OWORD *)&v990[8] = 0u;
              *(_QWORD *)v990 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
              if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(a1, (uint64_t)v975, 0, 0, 0, 1, SDWORD2(v995), (uint64_t)v990, 0, 0) & 1) != 0)
              {
                NewTargetExpr = JSC::ASTBuilder::createFunctionExpr((uint64_t)v975, (uint64_t)&v995, (uint64_t)v990, a4, (uint64_t)a5, a6, a7, a8);
              }
              else
              {
                if (*v10 == 20 || (*v10 & 0x100000) != 0)
                {
                  JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
                }
                else if (!*(_QWORD *)(a1 + 7360))
                {
                  v886 = "Cannot parse async function expression";
                  if (v792 == 191488)
                    v886 = "Cannot parse async generator function expression";
                  *(_QWORD *)&v984 = v886;
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const*>(a1, 1, (const char **)&v984);
                }
                NewTargetExpr = 0;
              }
              v9[130] = v800;
              break;
            }
          }
          else if (v781 == 38)
          {
            NewTargetExpr = 0;
            break;
          }
          v827 = *(_DWORD *)(a1 + 12);
          if (!v827)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBEC90);
          }
          JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v827 - 1), *v97, 0);
          *(_QWORD *)(a1 + 7320) = v97;
          JSC::ASTBuilder::createResolve((uint64_t)v975, (uint64_t)&v995, v97, (uint64_t *)&v987, (uint64_t *)(a1 + 7444), 1);
          NewTargetExpr = v828;
          break;
        case 14:
          v972 = v17;
          v964 = v9;
          v973 = v13;
          v160 = *(_QWORD *)(a1 + 7376);
          v161 = *(_DWORD *)(a1 + 7400);
          v162 = *(_DWORD *)(a1 + 7404);
          v163 = *(_DWORD *)(a1 + 7408);
          v164 = *(_DWORD *)(a1 + 7412);
          *(_DWORD *)(a1 + 7444) = v161;
          *(_DWORD *)(a1 + 7448) = v164;
          *(_DWORD *)(a1 + 7452) = v162;
          v165 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v165 + 4) = v161;
          v166 = *(_DWORD *)(a1 + 12);
          if (!v166)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBEAECLL);
          }
          v167 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v166 - 1) + 9) & 1;
          *(_BYTE *)(v165 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v165, (uint64_t)v10, 0, v167, (uint64_t)a5, a6, a7, a8);
          v168 = v975;
          ++*((_DWORD *)v975 + 7);
          v169 = (uint64_t *)*((_QWORD *)v168 + 1);
          NewTargetExpr = *v169;
          if ((unint64_t)(v169[1] - *v169) <= 0x27)
          {
            JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v168 + 1));
            NewTargetExpr = *v169;
          }
          *v169 = NewTargetExpr + 40;
          *(_DWORD *)(NewTargetExpr + 8) = v161;
          *(_DWORD *)(NewTargetExpr + 12) = v163;
          *(_DWORD *)(NewTargetExpr + 16) = v162;
          *(_DWORD *)(NewTargetExpr + 20) = -1;
          *(_BYTE *)(NewTargetExpr + 24) = 0;
          *(_BYTE *)(NewTargetExpr + 25) = 4;
          *(_BYTE *)(NewTargetExpr + 26) = 0;
          *(_QWORD *)NewTargetExpr = &off_1E3583FC0;
          *(_QWORD *)(NewTargetExpr + 32) = v160;
          v9 = v964;
LABEL_143:
          if ((v972 & 1) != 0)
            goto LABEL_637;
LABEL_144:
          v195 = 0;
          v196 = 0;
          goto LABEL_145;
        default:
          if (v18 == 25)
          {
            v236 = 61;
            goto LABEL_167;
          }
          if (v18 != 512)
            goto LABEL_74;
          *(_OWORD *)v990 = *v11;
          v71 = *(_DWORD *)(a1 + 7400);
          v72 = *(_DWORD *)(a1 + 7412);
          v73 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v71;
          *(_DWORD *)(a1 + 7448) = v72;
          *(_DWORD *)(a1 + 7452) = v73;
          v74 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v74 + 4) = v71;
          v75 = *(_DWORD *)(a1 + 12);
          if (!v75)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBEB54);
          }
          v76 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v75 - 1) + 9) & 1;
          *(_BYTE *)(v74 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v74, (uint64_t)v10, 0, v76, (uint64_t)a5, a6, a7, a8);
          JSC::ASTBuilder::createNull((uint64_t)v975, (uint64_t)v990);
          goto LABEL_195;
      }
LABEL_196:
      if (NewTargetExpr)
      {
        if (!v17)
        {
LABEL_198:
          v195 = 0;
          v196 = 0;
          goto LABEL_199;
        }
        v973 = v13;
        goto LABEL_637;
      }
LABEL_75:
      if (*v10 != 20 && (*v10 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse base expression");
        goto LABEL_79;
      }
      goto LABEL_642;
    }
    if (v18 > 540)
    {
      switch(v18)
      {
        case 541:
          v32 = *(_DWORD *)(a1 + 7300);
          *(_QWORD *)&v990[8] = 0;
          *(_QWORD *)&v990[16] = 0;
          *(_QWORD *)v990 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
          v61 = JSC::Parser<JSC::Lexer<char16_t>>::parseClass<JSC::ASTBuilder>(a1, (uint64_t)v975, 0, (uint64_t)v990);
          goto LABEL_37;
        case 542:
        case 543:
          goto LABEL_74;
        case 544:
          v95 = *(_DWORD *)(a1 + 12);
          if (!v95)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBEAB4);
          }
          v90 = v95 - 1;
          v91 = *(_QWORD *)a1;
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v90 + 9) & 1) == 0)
            goto LABEL_191;
          goto LABEL_74;
        case 545:
          v80 = *(_DWORD *)(a1 + 12);
          if (!v80)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBEABCLL);
          }
          goto LABEL_73;
        case 546:
          v89 = *(_DWORD *)(a1 + 12);
          if (!v89)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBEAACLL);
          }
          v90 = v89 - 1;
          v91 = *(_QWORD *)a1;
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v89 - 1) + 12) & 0x10) != 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[90]>(a1);
            goto LABEL_75;
          }
          if (*(_DWORD *)(a1 + 7316))
          {
            v92 = *(_DWORD *)(a1 + 12);
            while (1)
            {
              v93 = v92;
              if (v92 == 1)
                break;
              --v92;
              if ((*(_BYTE *)(v91 + 720 * (v93 - 1) + 12) & 0x40) != 0)
                goto LABEL_68;
            }
            v92 = 0;
LABEL_68:
            if (v89 <= v93 - 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197EBEB74);
            }
            if ((*(_BYTE *)(v91 + 720 * v92 + 11) & 0x40) != 0 || ((1 << v9[130]) & 0x6000) != 0)
            {
              v77 = JSC::Parser<JSC::Lexer<char16_t>>::parseAwaitExpression<JSC::ASTBuilder>(a1, (uint64_t)v975, a3, a4, (uint64_t)a5, a6, a7, a8);
              goto LABEL_195;
            }
            goto LABEL_191;
          }
          if (*v9)
            goto LABEL_191;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[57]>(a1);
          break;
        default:
          if (v18 == 191489)
          {
            v236 = 0;
LABEL_167:
            v237 = JSC::Lexer<char16_t>::scanRegExp(*(unsigned int **)(a1 + 7288), (uint64_t)v10, v236, a4, a5, a6, a7, a8);
            *(_DWORD *)(a1 + 7368) = v237;
            if (v237 == 16)
            {
              v238 = *(uint64_t **)(a1 + 7376);
              v239 = *(uint64_t **)(a1 + 7384);
              *(_QWORD *)&v995 = *(_QWORD *)v974;
              DWORD2(v995) = *(_DWORD *)(v974 + 8);
              *(_OWORD *)v990 = *v11;
              v240 = *(_DWORD *)(a1 + 7400);
              v241 = *(_DWORD *)(a1 + 7412);
              v242 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v240;
              *(_DWORD *)(a1 + 7448) = v241;
              *(_DWORD *)(a1 + 7452) = v242;
              v243 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v243 + 4) = v240;
              v244 = *(_DWORD *)(a1 + 12);
              if (!v244)
              {
                __break(0xC471u);
                JUMPOUT(0x197EBEB3CLL);
              }
              v245 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v244 - 1) + 9) & 1;
              *(_BYTE *)(v243 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v243, (uint64_t)v10, 0, v245, (uint64_t)a5, a6, a7, a8);
              NewTargetExpr = JSC::ASTBuilder::createRegExp((uint64_t)v975, (uint64_t)v990, v238, v239, (unsigned int *)&v995);
              if (!NewTargetExpr)
              {
                v246 = *v238;
                if (*v238)
                {
                  v247 = *(unsigned int *)(v246 + 16);
                  v248 = *(const WTF::StringImpl **)(v246 + 8);
                  LODWORD(v246) = *(_DWORD *)(v246 + 4);
                  v249 = (v247 >> 2) & 1;
                }
                else
                {
                  v248 = 0;
                  v249 = 1;
                }
                v250 = v246 | (unint64_t)(v249 << 32);
                v251 = *v239;
                v972 = v17;
                if (v251)
                {
                  v252 = *(unsigned int *)(v251 + 16);
                  v253 = *(unsigned __int16 **)(v251 + 8);
                  LODWORD(v251) = *(_DWORD *)(v251 + 4);
                  v254 = (v252 >> 2) & 1;
                }
                else
                {
                  v253 = 0;
                  v254 = 1;
                }
                v261 = 2
                     * JSC::Yarr::checkSyntax(v248, v250, v253, v251 | (unint64_t)(v254 << 32));
                v262 = (_BYTE *)JSC::Yarr::errorMessage(JSC::Yarr::ErrorCode)::errorMessages[v261];
                if (v262)
                {
                  v263 = strlen((const char *)JSC::Yarr::errorMessage(JSC::Yarr::ErrorCode)::errorMessages[v261]);
                  if (v263)
                  {
                    v270 = v263;
                    if (v263 >> 31)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197EBEB94);
                    }
                    v271 = (int *)WTF::fastCompactMalloc((WTF *)(v263 + 20));
                    v272 = v271 + 5;
                    *v271 = 2;
                    v271[1] = v270;
                    *((_QWORD *)v271 + 1) = v271 + 5;
                    v271[4] = 4;
                    if (v270 == 1)
                      *v272 = *v262;
                    else
                      memcpy(v272, v262, v270);
                  }
                  else
                  {
                    v271 = &WTF::StringImpl::s_emptyAtomString;
                    WTF::StringImpl::s_emptyAtomString += 2;
                  }
                  JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, (WTF::AtomStringImpl *)v271, v264, v265, v266, v267, v268, v269);
                  v17 = v972;
                  if (*v271 == 2)
                  {
                    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v271, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
                    WTF::fastFree(v482, v483, v484, v485, v486, v487, v488, v489);
                  }
                  else
                  {
                    *v271 -= 2;
                  }
                }
                else
                {
                  JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, 0, v255, v256, v257, v258, v259, v260);
                  v17 = v972;
                }
              }
              goto LABEL_196;
            }
            if (v237 == 20 || (v237 & 0x100000) != 0)
              goto LABEL_74;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Invalid regular expression");
            goto LABEL_75;
          }
          if (v18 != 1048592)
            goto LABEL_74;
          v78 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
          v79 = **(_QWORD **)(a1 + 7376);
          if (v79 != v78[41])
            goto LABEL_303;
          v399 = *(_DWORD *)(a1 + 12);
          if (!v399)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBEB7CLL);
          }
          v90 = v399 - 1;
          v91 = *(_QWORD *)a1;
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v90 + 9) & 1) != 0)
          {
LABEL_303:
            if (v79 != v78[16] || !*v9)
              goto LABEL_52;
            v400 = *(_DWORD *)(a1 + 12);
            if (!v400)
            {
              __break(0xC471u);
              JUMPOUT(0x197EBEB84);
            }
            v90 = v400 - 1;
            v91 = *(_QWORD *)a1;
            if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * v90 + 10) & 0x102000) != 0 || *(_DWORD *)(a1 + 7480) == 1)
            {
LABEL_52:
              if (v79 != v78[62])
                goto LABEL_74;
              v80 = *(_DWORD *)(a1 + 12);
              if (!v80)
              {
                __break(0xC471u);
                JUMPOUT(0x197EB986CLL);
              }
LABEL_73:
              v90 = v80 - 1;
              v91 = *(_QWORD *)a1;
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v90 + 9) & 1) != 0
                || (*(_BYTE *)(v91 + 720 * v90 + 11) & 2) != 0)
              {
                goto LABEL_74;
              }
            }
          }
          goto LABEL_191;
      }
      goto LABEL_75;
    }
    if (v18 > 522)
    {
      if (v18 == 523)
      {
        v203 = *(_DWORD *)(a1 + 7300);
        v995 = *v11;
        v204 = *(_DWORD *)(a1 + 7408);
        v205 = *(_DWORD *)(a1 + 7400);
        v206 = *(_DWORD *)(a1 + 7412);
        v207 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v205;
        *(_DWORD *)(a1 + 7448) = v206;
        *(_DWORD *)(a1 + 7452) = v207;
        v208 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v208 + 4) = v205;
        v209 = *(_DWORD *)(a1 + 12);
        if (!v209)
        {
          __break(0xC471u);
          JUMPOUT(0x197EBEB24);
        }
        v210 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v209 - 1) + 9) & 1;
        *(_BYTE *)(v208 + 56) = 0;
        v211 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v208, (uint64_t)v10, 0, v210, (uint64_t)a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v211;
        v992 = 0;
        v991 = 0u;
        *(_OWORD *)&v990[8] = 0u;
        *(_QWORD *)v990 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        if (v211 == 191488)
        {
          v216 = *(_DWORD *)(a1 + 7400);
          v217 = *(_DWORD *)(a1 + 7412);
          v218 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v216;
          *(_DWORD *)(a1 + 7448) = v217;
          *(_DWORD *)(a1 + 7452) = v218;
          v219 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v219 + 4) = v216;
          v220 = *(_DWORD *)(a1 + 12);
          if (!v220)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBEB4CLL);
          }
          v221 = v13;
          v222 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v220 - 1) + 9) & 1;
          *(_BYTE *)(v219 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v219, (uint64_t)v10, 0, v222, v212, v213, v214, v215);
          v223 = 2;
        }
        else
        {
          v221 = v13;
          v223 = 0;
        }
        v224 = v9[130];
        v9[130] = v223;
        v225 = *(_DWORD *)(a1 + 12);
        if (!v225)
        {
          __break(0xC471u);
          JUMPOUT(0x197EBEB2CLL);
        }
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v225 - 1) + 12) & 1) != 0)
          v226 = v9[144];
        else
          v226 = 0;
        v227 = v975;
        if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(a1, (uint64_t)v975, 0, 0, v226, v226 != 2, v204, (uint64_t)v990, 0, 0) & 1) != 0)
        {
          NewTargetExpr = JSC::ASTBuilder::createFunctionExpr((uint64_t)v227, (uint64_t)&v995, (uint64_t)v990, a4, (uint64_t)a5, a6, a7, a8);
        }
        else
        {
          v972 = v17;
          if (*v10 == 20 || (*v10 & 0x100000) != 0)
          {
            JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
          }
          else if (!*(_QWORD *)(a1 + 7360))
          {
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse function expression");
          }
          NewTargetExpr = 0;
          v17 = v972;
        }
        v9[130] = v224;
        *(_DWORD *)(a1 + 7300) = v203;
        v13 = v221;
        goto LABEL_196;
      }
      if (v18 == 526)
      {
        *(_OWORD *)v990 = *v11;
        v81 = *(_DWORD *)(a1 + 7400);
        v82 = *(_DWORD *)(a1 + 7412);
        v83 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v81;
        *(_DWORD *)(a1 + 7448) = v82;
        *(_DWORD *)(a1 + 7452) = v83;
        v84 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v84 + 4) = v81;
        v85 = *(_DWORD *)(a1 + 12);
        if (!v85)
        {
          __break(0xC471u);
          JUMPOUT(0x197EBEB0CLL);
        }
        v86 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v85 - 1) + 9) & 1;
        *(_BYTE *)(v84 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v84, (uint64_t)v10, 0, v86, (uint64_t)a5, a6, a7, a8);
        v87 = *(_DWORD *)(a1 + 12);
        if (!v87)
        {
          __break(0xC471u);
          JUMPOUT(0x197EBEB14);
        }
        v88 = v87 - 1;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v88 + 11) & 8) != 0)
          *(_BYTE *)(*(_QWORD *)a1 + 720 * v88 + 32) |= 4u;
        JSC::ASTBuilder::createThisExpr((uint64_t)v975, (uint64_t)v990);
        goto LABEL_195;
      }
    }
    else
    {
      if (v18 == 513)
      {
        *(_OWORD *)v990 = *v11;
        v197 = *(_DWORD *)(a1 + 7400);
        v198 = *(_DWORD *)(a1 + 7412);
        v199 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v197;
        *(_DWORD *)(a1 + 7448) = v198;
        *(_DWORD *)(a1 + 7452) = v199;
        v200 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v200 + 4) = v197;
        v201 = *(_DWORD *)(a1 + 12);
        if (!v201)
        {
          __break(0xC471u);
          JUMPOUT(0x197EBEB1CLL);
        }
        v202 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v201 - 1) + 9) & 1;
        *(_BYTE *)(v200 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v200, (uint64_t)v10, 0, v202, (uint64_t)a5, a6, a7, a8);
        v69 = v975;
        v70 = 1;
        goto LABEL_148;
      }
      if (v18 == 514)
      {
        *(_OWORD *)v990 = *v11;
        v63 = *(_DWORD *)(a1 + 7400);
        v64 = *(_DWORD *)(a1 + 7412);
        v65 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v63;
        *(_DWORD *)(a1 + 7448) = v64;
        *(_DWORD *)(a1 + 7452) = v65;
        v66 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v66 + 4) = v63;
        v67 = *(_DWORD *)(a1 + 12);
        if (!v67)
        {
          __break(0xC471u);
          JUMPOUT(0x197EBEB04);
        }
        v68 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v67 - 1) + 9) & 1;
        *(_BYTE *)(v66 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v66, (uint64_t)v10, 0, v68, (uint64_t)a5, a6, a7, a8);
        v69 = v975;
        v70 = 0;
LABEL_148:
        JSC::ASTBuilder::createBoolean((uint64_t)v69, (uint64_t)v990, v70);
LABEL_195:
        NewTargetExpr = v77;
        goto LABEL_196;
      }
    }
LABEL_74:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    goto LABEL_75;
  }
  if (!v17)
    goto LABEL_198;
LABEL_637:
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)NewTargetExpr + 112))(NewTargetExpr)
    || *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
  {
    v195 = 0;
    v196 = 0;
  }
  else
  {
    if (*v10 == 12
      || JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, *v10, *(_QWORD **)(a1 + 7376))
      || JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376))|| *v10 == 546|| *v10 == 1048592&& **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
    {
      v767 = *(_DWORD **)(a1 + 7496);
      if (v767)
        *v767 = 2;
      goto LABEL_642;
    }
    v196 = 0;
    v195 = 1;
  }
  v13 = v973;
LABEL_199:
  v288 = 0;
  v289 = (uint64_t *)(a1 + 7444);
  v290 = *(_DWORD *)(a1 + 7368);
  v291 = a1 + 7428;
  v292 = &off_1E3585948;
  v293 = &off_1E35854C8;
LABEL_200:
  if (v290 != 39)
  {
    v294 = 0;
    v295 = 0;
LABEL_202:
    v296 = 0;
    while (1)
    {
      if (v290 > 18)
      {
        if (v290 != 19)
          goto LABEL_220;
        LODWORD(v970) = v296;
        v967 = v295;
        v968 = v294;
        v297 = v293;
        v969 = v291;
        v971 = v289;
        ++*(_DWORD *)(a1 + 7304);
        *(_QWORD *)v990 = *(_QWORD *)v974;
        *(_DWORD *)&v990[8] = *(_DWORD *)(v974 + 8);
        v298 = *(_DWORD *)(a1 + 7400);
        v299 = *(_DWORD *)(a1 + 7412);
        v300 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v298;
        *(_DWORD *)(a1 + 7448) = v299;
        *(_DWORD *)(a1 + 7452) = v300;
        v301 = *(unsigned int **)(a1 + 7288);
        v301[1] = v298;
        v302 = *(_DWORD *)(a1 + 12);
        if (!v302)
        {
          __break(0xC471u);
          JUMPOUT(0x197EBE998);
        }
        v303 = v195;
        v973 = v13;
        v304 = JSC::Lexer<char16_t>::lexExpectIdentifier(v301, (uint64_t)v10, 1u, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v302 - 1) + 9) & 1, (uint64_t)a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v304;
        v964 = *(unsigned __int8 **)(a1 + 7376);
        if (v304 == 12)
        {
          v305 = 0;
        }
        else
        {
          v966 = v11;
          if (v304 != 13)
          {
            if (v304 == 20 || (v304 & 0x100000) != 0)
              goto LABEL_642;
            if (!*(_QWORD *)(a1 + 7360))
            {
              v876 = "'?.'";
              if (!v967)
                v876 = "'.'";
              *(_QWORD *)&v995 = v876;
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[32],char const*>(a1, "Expected a property name after ", (const char **)&v995);
            }
            goto LABEL_79;
          }
          v679 = v196;
          if ((v196 & 1) != 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot access private names from super");
            goto LABEL_79;
          }
          v680 = *(_DWORD *)(a1 + 12);
          if (!v680)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBE978);
          }
          v196 = (uint64_t)v9;
          v681 = v680 - 1;
          v682 = *(_QWORD *)a1;
          v683 = *(_QWORD *)v964;
          if (*(_BYTE *)(*(_QWORD *)a1 + 720 * (v680 - 1) + 14) == 2
            && (JSC::Scope::hasPrivateName(*(_QWORD *)(v682 + 720 * v681 + 160), *(_QWORD *)v964) & 1) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              *(_QWORD *)&v995 = v683;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[44],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (WTF::PrintStream **)&v995);
            }
            goto LABEL_79;
          }
          JSC::Scope::useVariable(v682 + 720 * v681, v683, 0);
          v305 = 1;
          v9 = (unsigned __int8 *)v196;
          *(_BYTE *)(v196 + 194) = 1;
          *(_QWORD *)(a1 + 7336) = v964;
          *(_DWORD *)(a1 + 7368) = 12;
          v11 = v966;
          LODWORD(v196) = v679;
        }
        v972 = v196;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)NewTargetExpr + 240))(NewTargetExpr))
          *((_DWORD *)v975 + 6) |= 0x200u;
        v310 = *((_QWORD *)v975 + 1);
        v312 = *(_QWORD *)v310;
        v311 = *(_QWORD *)(v310 + 8);
        if ((unint64_t)(v311 - *(_QWORD *)v310) <= 0x57)
        {
          v966 = v11;
          if (v311)
          {
            v746 = (_QWORD *)(v310 + 24);
            v747 = v311 - 8000;
            *(_QWORD *)&v995 = v311 - 8000;
            v748 = *(unsigned int *)(v310 + 36);
            if ((_DWORD)v748 == *(_DWORD *)(v310 + 32))
            {
              v812 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v746, v748 + 1, (unint64_t)&v995);
              v748 = *(unsigned int *)(v310 + 36);
              *(_QWORD *)(*(_QWORD *)(v310 + 24) + 8 * v748) = *v812;
            }
            else
            {
              *(_QWORD *)(*v746 + 8 * v748) = v747;
            }
            *(_DWORD *)(v310 + 36) = v748 + 1;
          }
          v312 = WTF::fastMalloc((WTF *)0x1F40);
          *(_QWORD *)(v310 + 8) = v312 + 8000;
          v11 = v966;
        }
        *(_QWORD *)v310 = v312 + 88;
        *(_DWORD *)(v312 + 8) = v980;
        *(int32x2_t *)(v312 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v980 + 4));
        *(_DWORD *)(v312 + 20) = -1;
        *(_BYTE *)(v312 + 24) = 0;
        *(_BYTE *)(v312 + 25) = 126;
        *(_BYTE *)(v312 + 26) = 0;
        v313 = v964;
        *(_QWORD *)(v312 + 32) = NewTargetExpr;
        *(_QWORD *)(v312 + 40) = v313;
        *(_DWORD *)(v312 + 48) = v305;
        *(_QWORD *)v312 = v297;
        *(_QWORD *)(v312 + 52) = *(_QWORD *)v990;
        *(_DWORD *)(v312 + 60) = *(_DWORD *)&v990[8];
        *(_QWORD *)(v312 + 76) = -1;
        *(_DWORD *)(v312 + 84) = -1;
        *(_QWORD *)(v312 + 64) = v981;
        *(_DWORD *)(v312 + 72) = v982;
        v314 = *(_DWORD *)(a1 + 7436);
        *(_QWORD *)(v312 + 76) = *(_QWORD *)(a1 + 7428);
        *(_DWORD *)(v312 + 84) = v314;
        v315 = *(_DWORD *)(a1 + 12);
        if ((v972 & 1) != 0)
        {
          if (!v315)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBE990);
          }
          v737 = *(_QWORD *)a1;
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v315 - 1) + 11) & 8) != 0)
          {
            v738 = *(_DWORD *)(a1 + 12);
            while (1)
            {
              v739 = v738;
              if (v738 == 1)
                break;
              --v738;
              if ((*(_BYTE *)(v737 + 720 * (v739 - 1) + 12) & 0x40) != 0)
                goto LABEL_612;
            }
            v738 = 0;
LABEL_612:
            if (v315 <= v739 - 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197EBE980);
            }
            *(_BYTE *)(v737 + 720 * v738 + 32) |= 0x10u;
          }
        }
        v316 = *(_DWORD *)(a1 + 7400);
        v317 = *(_DWORD *)(a1 + 7412);
        v318 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v316;
        *(_DWORD *)(a1 + 7448) = v317;
        *(_DWORD *)(a1 + 7452) = v318;
        v319 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v319 + 4) = v316;
        v13 = v973;
        if (!v315)
        {
          __break(0xC471u);
          JUMPOUT(0x197EBE988);
        }
        v320 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v315 - 1) + 9) & 1;
        *(_BYTE *)(v319 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v319, (uint64_t)v10, 0, v320, v306, v307, v308, v309);
        v195 = v303;
        v289 = v971;
        v291 = v969;
        v292 = &off_1E3585948;
        v293 = v297;
        goto LABEL_214;
      }
      if (v290 != 2)
      {
        if (v290 == 4)
        {
          LODWORD(v970) = v296;
          v966 = v11;
          v967 = v295;
          v968 = v294;
          v969 = v291;
          v971 = v289;
          v965 = v195;
          ++*(_DWORD *)(a1 + 7304);
          *(_QWORD *)v990 = *(_QWORD *)v974;
          *(_DWORD *)&v990[8] = *(_DWORD *)(v974 + 8);
          v377 = *(_DWORD *)(a1 + 7400);
          v378 = *(_DWORD *)(a1 + 7412);
          v379 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v377;
          *(_DWORD *)(a1 + 7448) = v378;
          *(_DWORD *)(a1 + 7452) = v379;
          v380 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v380 + 4) = v377;
          v381 = *(_DWORD *)(a1 + 12);
          if (!v381)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBE928);
          }
          v382 = v9;
          v383 = v13;
          v384 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v381 - 1) + 9) & 1;
          *(_BYTE *)(v380 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v380, (uint64_t)v10, 0, v384, (uint64_t)a5, a6, a7, a8);
          v385 = *(_DWORD *)(a1 + 7300);
          v386 = *(_DWORD *)(a1 + 7296);
          v387 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, (uint64_t)v975);
          if (!v387)
          {
            if (*v10 == 20 || (*v10 & 0x100000) != 0)
              goto LABEL_764;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse subscript expression");
LABEL_765:
            v94 = 0;
            *(_DWORD *)(a1 + 7300) = v385;
            goto LABEL_225;
          }
          v388 = v387;
          v972 = v196;
          v389 = *(_DWORD *)(a1 + 7296);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)NewTargetExpr + 240))(NewTargetExpr))
            *((_DWORD *)v975 + 6) |= 0x200u;
          v390 = (uint64_t *)*((_QWORD *)v975 + 1);
          v312 = *v390;
          if ((unint64_t)(v390[1] - *v390) <= 0x57)
          {
            v775 = (JSC::ParserArena *)*((_QWORD *)v975 + 1);
            JSC::ParserArena::allocateFreeablePool(v775);
            v390 = (uint64_t *)v775;
            v312 = *(_QWORD *)v775;
          }
          *v390 = v312 + 88;
          *(_DWORD *)(v312 + 8) = v980;
          *(int32x2_t *)(v312 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v980 + 4));
          *(_DWORD *)(v312 + 20) = -1;
          *(_BYTE *)(v312 + 24) = 0;
          *(_BYTE *)(v312 + 25) = 126;
          *(_BYTE *)(v312 + 26) = 0;
          *(_QWORD *)v312 = &off_1E3585348;
          *(_QWORD *)(v312 + 64) = NewTargetExpr;
          *(_QWORD *)(v312 + 72) = v388;
          *(_BYTE *)(v312 + 80) = v386 != v389;
          *(_QWORD *)(v312 + 28) = *(_QWORD *)v990;
          *(_DWORD *)(v312 + 36) = *(_DWORD *)&v990[8];
          *(_QWORD *)(v312 + 52) = -1;
          *(_DWORD *)(v312 + 60) = -1;
          *(_QWORD *)(v312 + 40) = v981;
          *(_DWORD *)(v312 + 48) = v982;
          v391 = *(_DWORD *)(a1 + 7436);
          *(_QWORD *)(v312 + 52) = *(_QWORD *)(a1 + 7428);
          *(_DWORD *)(v312 + 60) = v391;
          if ((v972 & 1) != 0)
          {
            v877 = *(_DWORD *)(a1 + 12);
            if (!v877)
            {
              __break(0xC471u);
              JUMPOUT(0x197EBE920);
            }
            v878 = *(_QWORD *)a1;
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v877 - 1) + 11) & 8) != 0)
            {
              v879 = *(_DWORD *)(a1 + 12);
              while (1)
              {
                v880 = v879;
                if (v879 == 1)
                  break;
                --v879;
                if ((*(_BYTE *)(v878 + 720 * (v880 - 1) + 12) & 0x40) != 0)
                  goto LABEL_784;
              }
              v879 = 0;
LABEL_784:
              if (v877 <= v880 - 1)
              {
                __break(0xC471u);
                JUMPOUT(0x197EBEA08);
              }
              *(_BYTE *)(v878 + 720 * v879 + 32) |= 0x10u;
            }
          }
          v392 = *v10;
          v292 = &off_1E3585948;
          v294 = v968;
          if (*v10 != 5)
          {
            if (v392 != 20 && (v392 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[21]>(a1, "]", "subscript expression");
              goto LABEL_765;
            }
LABEL_764:
            JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
            goto LABEL_765;
          }
          v393 = *(_DWORD *)(a1 + 7400);
          v394 = *(_DWORD *)(a1 + 7412);
          v395 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v393;
          *(_DWORD *)(a1 + 7448) = v394;
          *(_DWORD *)(a1 + 7452) = v395;
          v396 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v396 + 4) = v393;
          v397 = *(_DWORD *)(a1 + 12);
          if (!v397)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBE918);
          }
          v398 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v397 - 1) + 9) & 1;
          *(_BYTE *)(v396 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v396, (uint64_t)v10, 0, v398, (uint64_t)a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7300) = v385;
          v13 = v383;
          v9 = v382;
          v11 = v966;
          v195 = v965;
          v289 = v971;
          v291 = v969;
          v293 = &off_1E35854C8;
        }
        else
        {
          if (v290 != 8)
          {
LABEL_220:
            v321 = *v10;
            if (v295)
            {
              v969 = v291;
              v971 = v289;
              v965 = v195;
              v636 = v196;
              v973 = v13;
              if ((v296 & 1) == 0)
                *((_BYTE *)v295 + 26) = 1;
              v637 = (uint64_t *)*((_QWORD *)v975 + 1);
              v638 = *v637;
              if ((unint64_t)(v637[1] - *v637) <= 0x2F)
              {
                JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v975 + 1));
                v638 = *v637;
              }
              *v637 = v638 + 48;
              *(_DWORD *)(v638 + 8) = v980;
              *(int32x2_t *)(v638 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v980 + 4));
              *(_DWORD *)(v638 + 20) = -1;
              *(_BYTE *)(v638 + 24) = 0;
              *(_BYTE *)(v638 + 25) = 126;
              *(_BYTE *)(v638 + 26) = 0;
              *(_QWORD *)v638 = &off_1E35884F8;
              *(_QWORD *)(v638 + 32) = NewTargetExpr;
              *(_BYTE *)(v638 + 40) = v321 != 39;
              v321 = *v10;
              NewTargetExpr = v638;
              v13 = v973;
              v196 = v636;
              v195 = v965;
              v289 = v971;
              v291 = v969;
              v292 = &off_1E3585948;
              v293 = &off_1E35854C8;
            }
            v290 = 39;
            if (v321 == 39)
              goto LABEL_200;
            if ((v196 & 1) == 0)
            {
              if (v13)
              {
                v573 = v980;
                v574 = vrev64_s32(*(int32x2_t *)((char *)&v980 + 4));
                v575 = v13;
                v576 = 12 * v13 - 12;
                v577 = v575 - 1;
                *(_QWORD *)&v578 = -1;
                *((_QWORD *)&v578 + 1) = -1;
                do
                {
                  if (v577 >= HIDWORD(v979))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EBEC50);
                  }
                  v579 = v978;
                  v580 = (uint64_t *)*((_QWORD *)v975 + 1);
                  v94 = *v580;
                  if ((unint64_t)(v580[1] - *v580) <= 0x4F)
                  {
                    v887 = v289;
                    JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v975 + 1));
                    *(_QWORD *)&v578 = -1;
                    *((_QWORD *)&v578 + 1) = -1;
                    v289 = v887;
                    v94 = *v580;
                  }
                  *v580 = v94 + 80;
                  *(_DWORD *)(v94 + 8) = v573;
                  *(int32x2_t *)(v94 + 12) = v574;
                  *(_DWORD *)(v94 + 20) = -1;
                  *(_BYTE *)(v94 + 24) = 0;
                  *(_WORD *)(v94 + 25) = 126;
                  *(_OWORD *)(v94 + 28) = v578;
                  *(_OWORD *)(v94 + 44) = v578;
                  *(_DWORD *)(v94 + 60) = -1;
                  *(_QWORD *)v94 = &off_1E3585AC8;
                  *(_QWORD *)(v94 + 64) = NewTargetExpr;
                  *(_QWORD *)(v94 + 72) = 0;
                  v581 = *(_QWORD *)((char *)v579 + v576);
                  *(_DWORD *)(v94 + 36) = *(_DWORD *)((char *)v579 + v576 + 8);
                  *(_QWORD *)(v94 + 28) = v581;
                  *(_QWORD *)(v94 + 40) = v981;
                  *(_DWORD *)(v94 + 48) = v982;
                  v582 = *((_DWORD *)v289 + 2);
                  *(_QWORD *)(v94 + 52) = *v289;
                  v576 -= 12;
                  --v577;
                  NewTargetExpr = v94;
                  *(_DWORD *)(v94 + 60) = v582;
                }
                while (v577 != -1);
              }
              else
              {
                v94 = NewTargetExpr;
              }
              goto LABEL_225;
            }
            if (!*(_QWORD *)(a1 + 7360))
            {
              v533 = "Cannot use new with super call";
              if (!v13)
                v533 = "super is not valid in this context";
              *(_QWORD *)v990 = v533;
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const*>(a1, 0, (const char **)v990);
            }
            goto LABEL_79;
          }
          LODWORD(v970) = v296;
          v968 = v294;
          v969 = v291;
          v972 = v196;
          v967 = v295;
          if (v295)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use tagged templates in an optional chain");
            goto LABEL_79;
          }
          if ((v972 & 1) != 0)
          {
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_79;
            v912 = "Cannot use super as tag for tagged templates";
            goto LABEL_861;
          }
          v700 = v289;
          v701 = v195;
          v702 = v13;
          v703 = v11;
          *(_QWORD *)v990 = *(_QWORD *)v974;
          *(_DWORD *)&v990[8] = *(_DWORD *)(v974 + 8);
          v704 = *(_DWORD *)(a1 + 7300);
          v705 = JSC::Parser<JSC::Lexer<char16_t>>::parseTemplateLiteral<JSC::ASTBuilder>(a1, (uint64_t)v975, 0, a4, (uint64_t)a5, a6, a7, a8);
          if (!v705)
          {
            if (*v10 == 20 || (*v10 & 0x100000) != 0)
            {
              JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
            }
            else if (!*(_QWORD *)(a1 + 7360))
            {
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse template literal");
            }
            v94 = 0;
            *(_DWORD *)(a1 + 7300) = v704;
            goto LABEL_225;
          }
          JSC::ASTBuilder::createTaggedTemplate(*((JSC::ParserArena **)v975 + 1), (uint64_t)&v980, NewTargetExpr, v705, &v981, (uint64_t *)v990, v700);
          v289 = v700;
          v312 = v706;
          v9[193] = 1;
          *(_DWORD *)(a1 + 7300) = v704;
          v11 = v703;
          v13 = v702;
          v195 = v701;
          v291 = v969;
          v292 = &off_1E3585948;
          v293 = &off_1E35854C8;
LABEL_214:
          v294 = v968;
        }
        v295 = v967;
        v296 = (int)v970;
        goto LABEL_216;
      }
      v972 = v196;
      v965 = v195;
      v971 = v289;
      v969 = v291;
      v968 = v294;
      v967 = v295;
      LODWORD(v970) = v296;
      if ((v196 & 1) != 0)
      {
        if (v9[1])
        {
          if (*v10 == 20 || (*v10 & 0x100000) != 0)
            goto LABEL_642;
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_79;
          v883 = "super call is not valid in class field initializer context";
          v884 = a1;
          v885 = 1;
          goto LABEL_797;
        }
        ++*(_DWORD *)(a1 + 7304);
        v324 = *(_DWORD *)(a1 + 7300);
        if (v13)
        {
          LODWORD(v963) = *(_DWORD *)(a1 + 7300);
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use new with super call");
          goto LABEL_447;
        }
      }
      else
      {
        ++*(_DWORD *)(a1 + 7304);
        v324 = *(_DWORD *)(a1 + 7300);
        if (v13)
        {
          v985 = *v289;
          v986 = *((_DWORD *)v289 + 2);
          v421 = *v10;
          LODWORD(v963) = v324;
          if (v421 != 2)
          {
            if (v421 != 20 && (v421 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected opening '(' at start of argument list");
              goto LABEL_442;
            }
            goto LABEL_441;
          }
          v422 = *(_DWORD *)(a1 + 7400);
          v423 = *(_DWORD *)(a1 + 7412);
          v424 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v422;
          *(_DWORD *)(a1 + 7448) = v423;
          *(_DWORD *)(a1 + 7452) = v424;
          v425 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v425 + 4) = v422;
          v426 = *(_DWORD *)(a1 + 12);
          if (!v426)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBEA00);
          }
          v427 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v426 - 1) + 9) & 1;
          *(_BYTE *)(v425 + 56) = 0;
          v428 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v425, (uint64_t)v10, 0, v427, (uint64_t)a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v428;
          v995 = *v11;
          if (v428 != 3)
          {
            v973 = v13;
            v993 = *(_QWORD *)v974;
            v994 = *(_DWORD *)(v974 + 8);
            *(_QWORD *)&v959[4] = a1 + 7428;
            v988 = *(_QWORD *)(a1 + 7428);
            v989 = *(_DWORD *)(a1 + 7436);
            LODWORD(v962) = *(_DWORD *)(a1 + 7296);
            if (v428 == 37)
            {
              *(_OWORD *)v990 = *v11;
              *(_QWORD *)&v987 = *(_QWORD *)v974;
              DWORD2(v987) = *(_DWORD *)(v974 + 8);
              *(_QWORD *)&v984 = **(_QWORD **)&v959[4];
              DWORD2(v984) = *(_DWORD *)(*(_QWORD *)&v959[4] + 8);
              v835 = *(_DWORD *)(a1 + 7400);
              v836 = *(_DWORD *)(a1 + 7412);
              v837 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v835;
              *(_DWORD *)(a1 + 7448) = v836;
              *(_DWORD *)(a1 + 7452) = v837;
              v838 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v838 + 4) = v835;
              v839 = *(_DWORD *)(a1 + 12);
              if (!v839)
              {
                __break(0xC471u);
                JUMPOUT(0x197EBE9F0);
              }
              v840 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v839 - 1) + 9) & 1;
              *(_BYTE *)(v838 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v838, (uint64_t)v10, 0, v840, v429, v430, v431, v432);
              v841 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
              if (*(_QWORD *)(a1 + 7360))
              {
                v435 = 0;
                v433 = 0;
              }
              else
              {
                *(_QWORD *)&v983 = *v971;
                DWORD2(v983) = *((_DWORD *)v971 + 2);
                SpreadExpression = JSC::ASTBuilder::createSpreadExpression((JSC::ParserArena *)*((_QWORD *)v975 + 1), (uint64_t)v990, v841, (uint64_t *)&v987, (uint64_t *)&v984, (uint64_t *)&v983);
                v435 = 1;
              }
            }
            else
            {
              *(_DWORD *)v990 = 0;
              *(_QWORD *)&v990[8] = *(_QWORD *)(a1 + 7496);
              *(_QWORD *)&v990[16] = a1;
              *(_QWORD *)(a1 + 7496) = v990;
              v433 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, v975, v990);
              v435 = 0;
              *(_QWORD *)(*(_QWORD *)&v990[16] + 7496) = *(_QWORD *)&v990[8];
            }
            v436 = *v10;
            if (v433)
            {
              if (v436 == 37)
              {
                if (!*(_QWORD *)(a1 + 7360))
LABEL_709:
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "The '...' operator should come before the target expression");
              }
              else
              {
                v437 = v292;
                LODWORD(v961) = v435 != 0;
                v438 = (unsigned __int8 **)*((_QWORD *)v975 + 1);
                v439 = *v438;
                if ((unint64_t)(v438[1] - *v438) <= 0x2F)
                {
                  v842 = v433;
                  v843 = v435;
                  JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v975 + 1));
                  v435 = v843;
                  v433 = v842;
                  v439 = *v438;
                }
                *v438 = v439 + 48;
                *((_DWORD *)v439 + 2) = v995;
                *(int32x2_t *)(v439 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v995 + 4));
                *((_DWORD *)v439 + 5) = -1;
                v439[24] = 0;
                v439[25] = 126;
                v439[26] = 0;
                *(_QWORD *)v439 = v437;
                *((_QWORD *)v439 + 4) = 0;
                *((_QWORD *)v439 + 5) = v433;
                for (i = v439; ; i = v452)
                {
                  v441 = *v10;
                  if (*v10 == 3)
                    break;
                  if (v441 != 6)
                  {
                    if (v441 == 20 || (v441 & 0x100000) != 0)
                      goto LABEL_441;
                    if (!*(_QWORD *)(a1 + 7360))
                      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[14]>(a1);
                    goto LABEL_442;
                  }
                  v442 = *(_DWORD *)(a1 + 7400);
                  SpreadExpression.n128_u64[0] = *(_QWORD *)(v9 + 60);
                  v443 = *(_DWORD *)(a1 + 7412);
                  *(_DWORD *)(a1 + 7444) = v442;
                  *(_DWORD *)(a1 + 7448) = v443;
                  v960 = SpreadExpression;
                  *(_DWORD *)(a1 + 7452) = SpreadExpression.n128_u32[0];
                  v444 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v444 + 4) = v442;
                  v445 = *(_DWORD *)(a1 + 12);
                  if (!v445)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EBE938);
                  }
                  v446 = v435;
                  v447 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v445 - 1) + 9) & 1;
                  *(_BYTE *)(v444 + 56) = 0;
                  v448 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v444, (uint64_t)v10, 0, v447, (uint64_t)a5, a6, a7, a8);
                  *(_DWORD *)(a1 + 7368) = v448;
                  if (v448 == 3)
                    break;
                  if (v448 == 37)
                  {
                    v964 = i;
                    *(_OWORD *)v990 = *v11;
                    *(_QWORD *)&v987 = *(_QWORD *)v974;
                    DWORD2(v987) = *(_DWORD *)(v974 + 8);
                    *(_QWORD *)&v984 = **(_QWORD **)&v959[4];
                    DWORD2(v984) = *(_DWORD *)(*(_QWORD *)&v959[4] + 8);
                    v846 = *(_DWORD *)(a1 + 7400);
                    v847 = *(_DWORD *)(a1 + 7412);
                    v848 = *(_DWORD *)(a1 + 7404);
                    *(_DWORD *)(a1 + 7444) = v846;
                    *(_DWORD *)(a1 + 7448) = v847;
                    *(_DWORD *)(a1 + 7452) = v848;
                    v849 = *(_QWORD *)(a1 + 7288);
                    *(_DWORD *)(v849 + 4) = v846;
                    v850 = *(_DWORD *)(a1 + 12);
                    if (!v850)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197EBE930);
                    }
                    v851 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v850 - 1) + 9) & 1;
                    *(_BYTE *)(v849 + 56) = 0;
                    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v849, (uint64_t)v10, 0, v851, (uint64_t)a5, a6, a7, a8);
                    v852 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
                    if (*(_QWORD *)(a1 + 7360))
                    {
                      v449 = 0;
                    }
                    else
                    {
                      *(_QWORD *)&v983 = *v971;
                      DWORD2(v983) = *((_DWORD *)v971 + 2);
                      JSC::ASTBuilder::createSpreadExpression(*((JSC::ParserArena **)v975 + 1), (uint64_t)v990, v852, (uint64_t *)&v987, (uint64_t *)&v984, (uint64_t *)&v983);
                      v446 = 1;
                    }
                    i = v964;
                    v435 = v446;
                  }
                  else
                  {
                    *(_DWORD *)v990 = 0;
                    *(_QWORD *)&v990[8] = *(_QWORD *)(a1 + 7496);
                    *(_QWORD *)&v990[16] = a1;
                    *(_QWORD *)(a1 + 7496) = v990;
                    v449 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, v975, v990);
                    v435 = 0;
                    *(_QWORD *)(*(_QWORD *)&v990[16] + 7496) = *(_QWORD *)&v990[8];
                  }
                  if (*(_QWORD *)(a1 + 7360))
                    goto LABEL_442;
                  if (*v10 == 37)
                    goto LABEL_709;
                  v450 = i;
                  if ((_DWORD)v435 == 1)
                    LODWORD(v961) = 1;
                  v451 = (JSC::ParserArena *)*((_QWORD *)v975 + 1);
                  v452 = *(unsigned __int8 **)v451;
                  if (*((_QWORD *)v451 + 1) - *(_QWORD *)v451 <= 0x2FuLL)
                  {
                    v964 = v9;
                    v966 = v11;
                    v853 = v449;
                    v854 = v435;
                    JSC::ParserArena::allocateFreeablePool(v451);
                    v435 = v854;
                    v449 = v853;
                    v11 = v966;
                    v9 = v964;
                    v452 = *(unsigned __int8 **)v451;
                  }
                  *(_QWORD *)v451 = v452 + 48;
                  *((_DWORD *)v452 + 2) = v442;
                  SpreadExpression.n128_u64[1] = v960.n128_u64[1];
                  *(int32x2_t *)(v452 + 12) = vrev64_s32((int32x2_t)v960.n128_u64[0]);
                  *((_DWORD *)v452 + 5) = -1;
                  v452[24] = 0;
                  v452[25] = 126;
                  v452[26] = 0;
                  *(_QWORD *)v452 = v437;
                  *((_QWORD *)v452 + 4) = 0;
                  *((_QWORD *)v452 + 5) = v449;
                  *((_QWORD *)v450 + 4) = v452;
                }
                v459 = *(_DWORD *)(a1 + 7400);
                v460 = *(_DWORD *)(a1 + 7412);
                v461 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v459;
                *(_DWORD *)(a1 + 7448) = v460;
                *(_DWORD *)(a1 + 7452) = v461;
                v462 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v462 + 4) = v459;
                v463 = *(_DWORD *)(a1 + 12);
                if (!v463)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EBE940);
                }
                v464 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v463 - 1) + 9) & 1;
                *(_BYTE *)(v462 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v462, (uint64_t)v10, 0, v464, (uint64_t)a5, a6, a7, a8);
                v13 = v973;
                if ((v961 & 1) == 0)
                {
                  v465 = *(_DWORD *)(a1 + 7296);
                  v466 = (uint64_t *)*((_QWORD *)v975 + 1);
                  Arguments = *v466;
                  v195 = v965;
                  v289 = v971;
                  v295 = v967;
                  v296 = (int)v970;
                  if ((unint64_t)(v466[1] - *v466) <= 0xF)
                  {
                    JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v975 + 1));
                    v296 = (int)v970;
                    v295 = v967;
                    v289 = v971;
                    v195 = v965;
                    Arguments = *v466;
                  }
                  v56 = (_DWORD)v962 == v465;
                  *v466 = Arguments + 16;
                  v468 = !v56;
                  *(_QWORD *)Arguments = v439;
                  *(_BYTE *)(Arguments + 8) = v468;
                  v292 = v437;
                  v294 = v968;
                  goto LABEL_366;
                }
                v813 = v975;
                ElementList = JSC::ASTBuilder::createElementList(v975, (JSC::ArgumentListNode *)v439);
                JSC::ASTBuilder::createArray(*((JSC::ParserArena **)v813 + 1), (uint64_t)&v995, ElementList);
                v815 = v971;
                JSC::ASTBuilder::createSpreadExpression(*((JSC::ParserArena **)v813 + 1), (uint64_t)&v995, v816, &v993, &v988, v971);
                JSC::ASTBuilder::createArgumentsList(*((_QWORD *)v813 + 1), (uint64_t)&v995, v817);
                Arguments = JSC::ASTBuilder::createArguments(*((JSC::ASTBuilder **)v813 + 1), v818, (_DWORD)v962 != *(_DWORD *)(a1 + 7296));
                v289 = v815;
                v195 = v965;
                v292 = v437;
                v294 = v968;
                v295 = v967;
                v296 = (int)v970;
                if (Arguments)
                  goto LABEL_366;
              }
LABEL_442:
              if (*v10 == 20 || (*v10 & 0x100000) != 0)
              {
                JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
              }
              else if (!*(_QWORD *)(a1 + 7360))
              {
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse call arguments");
              }
LABEL_447:
              v94 = 0;
              *(_DWORD *)(a1 + 7300) = (_DWORD)v963;
              goto LABEL_225;
            }
            if (v436 != 20 && (v436 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse function argument");
              goto LABEL_442;
            }
LABEL_441:
            JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
            goto LABEL_442;
          }
          v526 = *(_DWORD *)(a1 + 7400);
          v527 = *(_DWORD *)(a1 + 7412);
          v528 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v526;
          *(_DWORD *)(a1 + 7448) = v527;
          *(_DWORD *)(a1 + 7452) = v528;
          v529 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v529 + 4) = v526;
          v530 = *(_DWORD *)(a1 + 12);
          if (!v530)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBE9F8);
          }
          v531 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v530 - 1) + 9) & 1;
          *(_BYTE *)(v529 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v529, (uint64_t)v10, 0, v531, v429, v430, v431, v432);
          v532 = (uint64_t *)*((_QWORD *)v975 + 1);
          Arguments = *v532;
          if ((unint64_t)(v532[1] - *v532) <= 0xF)
          {
            JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v975 + 1));
            Arguments = *v532;
          }
          *v532 = Arguments + 16;
          *(_QWORD *)Arguments = 0;
          *(_BYTE *)(Arguments + 8) = 0;
          v195 = v965;
          v289 = v971;
          v295 = v967;
          v296 = (int)v970;
LABEL_366:
          v469 = (uint64_t *)*((_QWORD *)v975 + 1);
          v470 = *v469;
          if ((unint64_t)(v469[1] - *v469) <= 0x4F)
          {
            v844 = v294;
            v845 = Arguments;
            JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v975 + 1));
            v296 = (int)v970;
            v295 = v967;
            v289 = v971;
            v195 = v965;
            Arguments = v845;
            v294 = v844;
            v470 = *v469;
          }
          *v469 = v470 + 80;
          --v13;
          *(_DWORD *)(v470 + 8) = v980;
          *(int32x2_t *)(v470 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v980 + 4));
          *(_DWORD *)(v470 + 20) = -1;
          *(_BYTE *)(v470 + 24) = 0;
          *(_BYTE *)(v470 + 25) = 126;
          *(_BYTE *)(v470 + 26) = 0;
          *(_QWORD *)v470 = &off_1E3585AC8;
          *(_QWORD *)(v470 + 64) = NewTargetExpr;
          *(_QWORD *)(v470 + 72) = Arguments;
          *(_QWORD *)(v470 + 28) = v985;
          *(_DWORD *)(v470 + 36) = v986;
          *(_QWORD *)(v470 + 52) = -1;
          *(_DWORD *)(v470 + 60) = -1;
          *(_QWORD *)(v470 + 40) = v981;
          *(_DWORD *)(v470 + 48) = v982;
          v471 = *((_DWORD *)v289 + 2);
          *(_QWORD *)(v470 + 52) = *v289;
          v370 = v470;
          *(_DWORD *)(v470 + 60) = v471;
          goto LABEL_275;
        }
      }
      LODWORD(v963) = v324;
      v325 = *(_DWORD *)(a1 + 12);
      if (!v325)
      {
        __break(0xC471u);
        JUMPOUT(0x197EBE958);
      }
      v961 = *(unsigned int *)(*(_QWORD *)a1 + 720 * (v325 - 1) + 180);
      v976 = *v289;
      v977 = *((_DWORD *)v289 + 2);
      v990[0] = 0;
      BYTE8(v991) = 0;
      v326 = *(_QWORD *)(a1 + 7216);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)NewTargetExpr + 136))(NewTargetExpr))
      {
        v373 = *(_QWORD *)(*(_QWORD *)(v326 + 41952) + 48);
        v374 = **(_QWORD **)(NewTargetExpr + 40);
        if (v374 == *(_QWORD *)(v373 + 320) || v374 == *(_QWORD *)(v373 + 80))
        {
          if (BYTE8(v991))
          {
            v375 = *(_QWORD *)&v990[8];
            if (*(_QWORD *)&v990[8])
            {
              v810 = v991;
              if ((unint64_t)v991 <= *(_QWORD *)(*(_QWORD *)&v990[8] + 24))
                v810 = *(_QWORD *)(*(_QWORD *)&v990[8] + 24);
              *(_QWORD *)(*(_QWORD *)&v990[8] + 24) = v810;
            }
            *(_QWORD *)(*(_QWORD *)v990 + 7528) = v375;
          }
          v376 = *(_QWORD *)(a1 + 7528);
          *(_QWORD *)v990 = a1;
          *(_QWORD *)&v990[8] = v376;
          if (v376)
            v376 = *(_QWORD *)(v376 + 16) + 1;
          *(_QWORD *)&v990[16] = v376;
          *(_QWORD *)&v991 = v376;
          *(_QWORD *)(a1 + 7528) = v990;
          BYTE8(v991) = 1;
        }
      }
      v328 = *v10;
      if (*v10 == 2)
      {
        v329 = *(_DWORD *)(a1 + 7400);
        v330 = *(_DWORD *)(a1 + 7412);
        v331 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v329;
        *(_DWORD *)(a1 + 7448) = v330;
        *(_DWORD *)(a1 + 7452) = v331;
        v332 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v332 + 4) = v329;
        v333 = *(_DWORD *)(a1 + 12);
        if (!v333)
        {
          __break(0xC471u);
          JUMPOUT(0x197EBE950);
        }
        v334 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v333 - 1) + 9) & 1;
        *(_BYTE *)(v332 + 56) = 0;
        v335 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v332, (uint64_t)v10, 0, v334, v327, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v335;
        v987 = *v11;
        if (v335 == 3)
        {
          v413 = *(_DWORD *)(a1 + 7400);
          v414 = *(_DWORD *)(a1 + 7412);
          v415 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v413;
          *(_DWORD *)(a1 + 7448) = v414;
          *(_DWORD *)(a1 + 7452) = v415;
          v416 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v416 + 4) = v413;
          v417 = *(_DWORD *)(a1 + 12);
          if (!v417)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBE960);
          }
          v418 = v292;
          v419 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v417 - 1) + 9) & 1;
          *(_BYTE *)(v416 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v416, (uint64_t)v10, 0, v419, v336, v337, v338, v339);
          v420 = *((_QWORD *)v975 + 1);
          a5 = *(char **)v420;
          if (*(_QWORD *)(v420 + 8) - *(_QWORD *)v420 <= 0xFuLL)
          {
            JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v975 + 1));
            a5 = *(char **)v420;
          }
          *(_QWORD *)v420 = a5 + 16;
          *(_QWORD *)a5 = 0;
          a5[8] = 0;
          v292 = v418;
        }
        else
        {
          v988 = *(_QWORD *)v974;
          v989 = *(_DWORD *)(v974 + 8);
          v985 = *(_QWORD *)v969;
          v986 = *(_DWORD *)(a1 + 7436);
          LODWORD(v973) = *(_DWORD *)(a1 + 7296);
          if (v335 == 37)
          {
            v995 = *v11;
            *(_QWORD *)&v984 = *(_QWORD *)v974;
            DWORD2(v984) = *(_DWORD *)(v974 + 8);
            *(_QWORD *)&v983 = *(_QWORD *)v969;
            DWORD2(v983) = *(_DWORD *)(v969 + 8);
            v723 = *(_DWORD *)(a1 + 7400);
            v724 = *(_DWORD *)(a1 + 7412);
            v725 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v723;
            *(_DWORD *)(a1 + 7448) = v724;
            *(_DWORD *)(a1 + 7452) = v725;
            v726 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v726 + 4) = v723;
            v727 = *(_DWORD *)(a1 + 12);
            if (!v727)
            {
              __break(0xC471u);
              JUMPOUT(0x197EBE9B8);
            }
            v728 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v727 - 1) + 9) & 1;
            *(_BYTE *)(v726 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v726, (uint64_t)v10, 0, v728, v336, v337, v338, v339);
            v729 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
            if (*(_QWORD *)(a1 + 7360))
            {
              v343 = 0;
              v340 = 0;
            }
            else
            {
              v993 = *v971;
              v994 = *((_DWORD *)v971 + 2);
              v342 = JSC::ASTBuilder::createSpreadExpression((JSC::ParserArena *)*((_QWORD *)v975 + 1), (uint64_t)&v995, v729, (uint64_t *)&v984, (uint64_t *)&v983, &v993);
              v343 = 1;
            }
          }
          else
          {
            LODWORD(v995) = 0;
            *((_QWORD *)&v995 + 1) = *(_QWORD *)(a1 + 7496);
            v996 = a1;
            *(_QWORD *)(a1 + 7496) = &v995;
            v340 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, v975, &v995);
            v343 = 0;
            *(_QWORD *)(v996 + 7496) = *((_QWORD *)&v995 + 1);
          }
          v344 = *v10;
          if (v340)
          {
            if (v344 == 37)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "The '...' operator should come before the target expression");
              a5 = 0;
            }
            else
            {
              v966 = v11;
              v964 = v9;
              LODWORD(v962) = v343 != 0;
              v345 = (uint64_t *)*((_QWORD *)v975 + 1);
              v196 = *v345;
              if ((unint64_t)(v345[1] - *v345) <= 0x2F)
              {
                v730 = v340;
                JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v975 + 1));
                v340 = v730;
                v196 = *v345;
              }
              *v345 = v196 + 48;
              v346 = DWORD1(v987);
              v347 = DWORD2(v987);
              *(_QWORD *)v959 = v987;
              *(_DWORD *)(v196 + 8) = v987;
              *(_DWORD *)(v196 + 12) = v347;
              *(_DWORD *)(v196 + 16) = v346;
              *(_DWORD *)(v196 + 20) = -1;
              *(_BYTE *)(v196 + 24) = 0;
              *(_BYTE *)(v196 + 25) = 126;
              *(_BYTE *)(v196 + 26) = 0;
              *(_QWORD *)(v196 + 32) = 0;
              *(_QWORD *)(v196 + 40) = v340;
              v348 = v196;
              v292 = &off_1E3585948;
              *(_QWORD *)v196 = &off_1E3585948;
              while (1)
              {
                v349 = *v10;
                if (*v10 == 3)
                  break;
                if (v349 != 6)
                {
                  if (v349 == 20 || (v349 & 0x100000) != 0)
                  {
                    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_326:
                    a5 = 0;
                    v9 = v964;
                    v11 = v966;
                    LOBYTE(v196) = v972;
                    goto LABEL_331;
                  }
                  v9 = v964;
                  v11 = v966;
                  LOBYTE(v196) = v972;
                  v294 = v968;
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[14]>(a1);
                  goto LABEL_370;
                }
                v350 = *(_DWORD *)(a1 + 7400);
                v342.n128_u64[0] = *(_QWORD *)(v964 + 60);
                v351 = *(_DWORD *)(a1 + 7412);
                *(_DWORD *)(a1 + 7444) = v350;
                *(_DWORD *)(a1 + 7448) = v351;
                v960 = v342;
                *(_DWORD *)(a1 + 7452) = v342.n128_u32[0];
                v352 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v352 + 4) = v350;
                v353 = *(_DWORD *)(a1 + 12);
                if (!v353)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EBE9A8);
                }
                v354 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v353 - 1) + 9) & 1;
                *(_BYTE *)(v352 + 56) = 0;
                v355 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v352, (uint64_t)v10, 0, v354, v341, a6, a7, a8);
                *(_DWORD *)(a1 + 7368) = v355;
                if (v355 == 3)
                  break;
                if (v355 == 37)
                {
                  v995 = *v966;
                  *(_QWORD *)&v984 = *(_QWORD *)v974;
                  DWORD2(v984) = *(_DWORD *)(v974 + 8);
                  *(_QWORD *)&v983 = *(_QWORD *)v969;
                  DWORD2(v983) = *(_DWORD *)(v969 + 8);
                  v749 = *(_DWORD *)(a1 + 7400);
                  v750 = *(_DWORD *)(a1 + 7412);
                  v751 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v749;
                  *(_DWORD *)(a1 + 7448) = v750;
                  *(_DWORD *)(a1 + 7452) = v751;
                  v752 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v752 + 4) = v749;
                  v753 = *(_DWORD *)(a1 + 12);
                  if (!v753)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EBE9A0);
                  }
                  v754 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v753 - 1) + 9) & 1;
                  *(_BYTE *)(v752 + 56) = 0;
                  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v752, (uint64_t)v10, 0, v754, v341, a6, a7, a8);
                  v755 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
                  if (*(_QWORD *)(a1 + 7360))
                  {
                    v356 = 0;
                  }
                  else
                  {
                    v993 = *v971;
                    v994 = *((_DWORD *)v971 + 2);
                    JSC::ASTBuilder::createSpreadExpression(*((JSC::ParserArena **)v975 + 1), (uint64_t)&v995, v755, (uint64_t *)&v984, (uint64_t *)&v983, &v993);
                    v343 = 1;
                  }
                  v292 = &off_1E3585948;
                }
                else
                {
                  LODWORD(v995) = 0;
                  *((_QWORD *)&v995 + 1) = *(_QWORD *)(a1 + 7496);
                  v996 = a1;
                  *(_QWORD *)(a1 + 7496) = &v995;
                  v356 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, v975, &v995);
                  v343 = 0;
                  *(_QWORD *)(v996 + 7496) = *((_QWORD *)&v995 + 1);
                }
                if (*(_QWORD *)(a1 + 7360))
                  goto LABEL_326;
                if (*v10 == 37)
                {
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "The '...' operator should come before the target expression");
                  goto LABEL_326;
                }
                if (v343 == 1)
                  LODWORD(v962) = 1;
                v357 = (JSC::ParserArena *)*((_QWORD *)v975 + 1);
                v358 = *(_QWORD *)v357;
                if (*((_QWORD *)v357 + 1) - *(_QWORD *)v357 <= 0x2FuLL)
                {
                  v958 = v356;
                  JSC::ParserArena::allocateFreeablePool(v357);
                  v356 = v958;
                  v358 = *(_QWORD *)v357;
                }
                *(_QWORD *)v357 = v358 + 48;
                *(_DWORD *)(v358 + 8) = v350;
                v342.n128_u64[1] = v960.n128_u64[1];
                *(int32x2_t *)(v358 + 12) = vrev64_s32((int32x2_t)v960.n128_u64[0]);
                *(_DWORD *)(v358 + 20) = -1;
                *(_BYTE *)(v358 + 24) = 0;
                *(_BYTE *)(v358 + 25) = 126;
                *(_BYTE *)(v358 + 26) = 0;
                v292 = &off_1E3585948;
                *(_QWORD *)v358 = &off_1E3585948;
                *(_QWORD *)(v358 + 32) = 0;
                *(_QWORD *)(v358 + 40) = v356;
                *(_QWORD *)(v348 + 32) = v358;
                v348 = v358;
              }
              v359 = *(_DWORD *)(a1 + 7400);
              v360 = *(_DWORD *)(a1 + 7412);
              v361 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v359;
              *(_DWORD *)(a1 + 7448) = v360;
              *(_DWORD *)(a1 + 7452) = v361;
              v362 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v362 + 4) = v359;
              v363 = *(_DWORD *)(a1 + 12);
              if (!v363)
              {
                __break(0xC471u);
                JUMPOUT(0x197EBE9B0);
              }
              v364 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v363 - 1) + 9) & 1;
              *(_BYTE *)(v362 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v362, (uint64_t)v10, 0, v364, v341, a6, a7, a8);
              v9 = v964;
              v365 = v966;
              if ((v962 & 1) == 0)
              {
                v366 = *(_DWORD *)(a1 + 7296);
                v367 = *((_QWORD *)v975 + 1);
                a5 = *(char **)v367;
                if (*(_QWORD *)(v367 + 8) - *(_QWORD *)v367 <= 0xFuLL)
                {
                  JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v975 + 1));
                  a5 = *(char **)v367;
                }
                v56 = (_DWORD)v973 == v366;
                *(_QWORD *)v367 = a5 + 16;
                v368 = !v56;
                *(_QWORD *)a5 = v196;
                a5[8] = v368;
                LOBYTE(v196) = v972;
                v292 = &off_1E3585948;
                v294 = v968;
                v11 = v365;
                goto LABEL_263;
              }
              v655 = (uint64_t *)*((_QWORD *)v975 + 1);
              v656 = *v655;
              if ((unint64_t)(v655[1] - *v655) <= 0x17)
              {
                JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v975 + 1));
                v656 = *v655;
              }
              *v655 = v656 + 24;
              v657 = *(_QWORD *)(v196 + 40);
              *(_QWORD *)v656 = 0;
              *(_QWORD *)(v656 + 8) = v657;
              *(_DWORD *)(v656 + 16) = 0;
              v658 = *(_QWORD *)(v196 + 32);
              if (v658)
              {
                v770 = (_QWORD *)v656;
                do
                {
                  v771 = v656;
                  v772 = (uint64_t *)*((_QWORD *)v975 + 1);
                  v773 = *v772;
                  if ((unint64_t)(v772[1] - *v772) <= 0x17)
                  {
                    JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v975 + 1));
                    v773 = *v772;
                  }
                  *v772 = v773 + 24;
                  v774 = *(_QWORD *)(v658 + 40);
                  *(_QWORD *)v773 = 0;
                  *(_QWORD *)(v773 + 8) = v774;
                  *(_DWORD *)(v773 + 16) = 0;
                  *v770 = v773;
                  v658 = *(_QWORD *)(v658 + 32);
                  v770 = (_QWORD *)v773;
                  v656 = v771;
                }
                while (v658);
              }
              v659 = v975;
              JSC::ASTBuilder::createArray(*((JSC::ParserArena **)v975 + 1), (uint64_t)&v987, v656);
              v661 = v660;
              v662 = (JSC::ParserArena *)*((_QWORD *)v659 + 1);
              v663 = *(_QWORD *)v662;
              if (*((_QWORD *)v662 + 1) - *(_QWORD *)v662 <= 0x47uLL)
              {
                v962 = (JSC::ParserArena *)*((_QWORD *)v659 + 1);
                JSC::ParserArena::allocateFreeablePool(v662);
                v662 = v962;
                v663 = *(_QWORD *)v962;
              }
              *(_QWORD *)v662 = v663 + 72;
              v665 = *(_DWORD *)v959;
              v664 = *(_DWORD *)&v959[4];
              *(_DWORD *)(v663 + 8) = *(_DWORD *)v959;
              *(_DWORD *)(v663 + 12) = v347;
              *(_DWORD *)(v663 + 16) = v664;
              *(_DWORD *)(v663 + 20) = -1;
              *(_BYTE *)(v663 + 24) = 0;
              *(_BYTE *)(v663 + 25) = 126;
              *(_BYTE *)(v663 + 26) = 0;
              *(_QWORD *)v663 = &off_1E3585648;
              *(_QWORD *)(v663 + 64) = v661;
              *(_QWORD *)(v663 + 28) = v985;
              *(_DWORD *)(v663 + 36) = v986;
              *(_QWORD *)(v663 + 52) = -1;
              *(_DWORD *)(v663 + 60) = -1;
              *(_DWORD *)(v663 + 48) = v989;
              *(_QWORD *)(v663 + 40) = v988;
              v666 = *((_DWORD *)v971 + 2);
              *(_QWORD *)(v663 + 52) = *v971;
              *(_DWORD *)(v663 + 60) = v666;
              v667 = (uint64_t *)*((_QWORD *)v659 + 1);
              v668 = *v667;
              if ((unint64_t)(v667[1] - *v667) <= 0x2F)
              {
                JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v659 + 1));
                v665 = *(_DWORD *)v959;
                v664 = *(_DWORD *)&v959[4];
                v668 = *v667;
              }
              *v667 = v668 + 48;
              *(_DWORD *)(v668 + 8) = v665;
              *(_DWORD *)(v668 + 12) = v347;
              *(_DWORD *)(v668 + 16) = v664;
              *(_DWORD *)(v668 + 20) = -1;
              *(_BYTE *)(v668 + 24) = 0;
              *(_WORD *)(v668 + 25) = 126;
              *(_QWORD *)v668 = &off_1E3585948;
              *(_QWORD *)(v668 + 32) = 0;
              *(_QWORD *)(v668 + 40) = v663;
              v669 = *(_DWORD *)(a1 + 7296);
              v670 = *((_QWORD *)v659 + 1);
              a5 = *(char **)v670;
              if (*(_QWORD *)(v670 + 8) - *(_QWORD *)v670 <= 0xFuLL)
              {
                JSC::ParserArena::allocateFreeablePool(*((JSC::ParserArena **)v659 + 1));
                a5 = *(char **)v670;
              }
              v56 = (_DWORD)v973 == v669;
              *(_QWORD *)v670 = a5 + 16;
              v671 = !v56;
              *(_QWORD *)a5 = v668;
              a5[8] = v671;
              v9 = v964;
              v11 = v966;
            }
            LOBYTE(v196) = v972;
            v292 = &off_1E3585948;
          }
          else
          {
            if (v344 == 20 || (v344 & 0x100000) != 0)
            {
              JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
            }
            else if (!*(_QWORD *)(a1 + 7360))
            {
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse function argument");
            }
            a5 = 0;
          }
        }
LABEL_331:
        v294 = v968;
      }
      else
      {
        v294 = v968;
        if (v328 == 20 || (v328 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected opening '(' at start of argument list");
        }
LABEL_370:
        a5 = 0;
      }
LABEL_263:
      if (v965)
      {
        if (!a5 || *v10 == 38)
        {
          v768 = *(_DWORD *)(a1 + 12);
          if (!v768)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBE970);
          }
          JSC::Scope::revertToPreviousUsedVariables((JSC::Scope *)(*(_QWORD *)a1 + 720 * (v768 - 1)), v961, a3, a4, (uint64_t)a5, a6, a7, a8);
          v769 = *(_DWORD **)(a1 + 7496);
          if (v769)
            *v769 = 2;
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
          v371 = 0;
          goto LABEL_649;
        }
      }
      else if (!a5)
      {
        if (*v10 == 20 || (*v10 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse call arguments");
        }
        v371 = 0;
LABEL_649:
        v370 = NewTargetExpr;
        goto LABEL_650;
      }
      if ((v196 & 1) == 0)
        goto LABEL_266;
      v606 = *(_DWORD *)(a1 + 12);
      if (!v606)
      {
        __break(0xC471u);
        JUMPOUT(0x197EBE9E8);
      }
      v607 = *(_DWORD *)(a1 + 12);
      while (1)
      {
        v608 = v607 - 1;
        if (v607 == 1)
          break;
        --v607;
        v609 = v608;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v608 + 12) & 0x40) != 0)
          goto LABEL_521;
      }
      v609 = 0;
LABEL_521:
      if (v606 <= v608)
      {
        __break(0xC471u);
        JUMPOUT(0x197EBE9C0);
      }
      v610 = v609;
      *(_DWORD *)(*(_QWORD *)a1 + 720 * v609 + 10) |= 0x10u;
      v611 = *(_DWORD *)(a1 + 12);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 148))
      {
        if (!v611)
        {
          __break(0xC471u);
          JUMPOUT(0x197EBE9C8);
        }
        v612 = *(_QWORD *)a1;
        v613 = v611 - 1;
        goto LABEL_525;
      }
      v973 = NewTargetExpr;
      v966 = v11;
      if (!v611)
      {
        __break(0xC471u);
        JUMPOUT(0x197EBE9E0);
      }
      v613 = v611 - 1;
      v881 = v611;
      while (1)
      {
        v882 = v881;
        if (v881 == 1)
          break;
        --v881;
        if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v882 - 1) + 10) & 0x405400) == 0x400000)
          goto LABEL_790;
      }
      v881 = 0;
LABEL_790:
      if (v611 <= v882 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197EBE9D0);
      }
      v612 = *(_QWORD *)a1;
      if (*(_BYTE *)(*(_QWORD *)a1 + 720 * v881 + 15) == 2)
      {
        v11 = v966;
        NewTargetExpr = v973;
LABEL_525:
        v294 = v968;
        if ((*(_BYTE *)(v612 + 720 * v613 + 11) & 8) != 0)
        {
          if (v611 <= v608)
          {
            __break(0xC471u);
            JUMPOUT(0x197EBE9D8);
          }
          *(_BYTE *)(v612 + 720 * v610 + 32) |= 8u;
          v294 = v968;
        }
LABEL_266:
        if (BYTE8(v991))
          v369 = v991 - *(_QWORD *)&v990[16];
        else
          v369 = 0;
        LODWORD(v970) = v294 == HIDWORD(v976);
        v370 = JSC::ASTBuilder::makeFunctionCallNode((uint64_t)v975, (uint64_t)&v980, NewTargetExpr, v288 & 1, (uint64_t)a5, &v981, &v976, v971, v369, (_DWORD)v294 == HIDWORD(v976));
        v371 = 1;
        goto LABEL_270;
      }
      v11 = v966;
      NewTargetExpr = v973;
      if ((*(_BYTE *)(v612 + 720 * v881 + 13) & 2) != 0 && *(_BYTE *)(v612 + 720 * v881 + 16) == 1)
        goto LABEL_525;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "super is not valid in this context");
      v371 = 0;
      v11 = v966;
      v370 = v973;
LABEL_650:
      v294 = v968;
LABEL_270:
      v195 = v965;
      v289 = v971;
      v295 = v967;
      v296 = (int)v970;
      if (BYTE8(v991))
      {
        v372 = *(_QWORD *)&v990[8];
        if (*(_QWORD *)&v990[8])
        {
          v605 = v991;
          if ((unint64_t)v991 <= *(_QWORD *)(*(_QWORD *)&v990[8] + 24))
            v605 = *(_QWORD *)(*(_QWORD *)&v990[8] + 24);
          *(_QWORD *)(*(_QWORD *)&v990[8] + 24) = v605;
        }
        *(_QWORD *)(*(_QWORD *)v990 + 7528) = v372;
      }
      if ((v371 & 1) == 0)
        goto LABEL_447;
      v13 = 0;
LABEL_275:
      *(_DWORD *)(a1 + 7300) = (_DWORD)v963;
      v312 = v370;
      v291 = v969;
      v293 = &off_1E35854C8;
LABEL_216:
      v290 = *v10;
      v288 = v972;
      NewTargetExpr = v312;
      v196 = 0;
    }
  }
  v969 = v291;
  v971 = v289;
  v965 = v195;
  v966 = v11;
  v967 = v10;
  v964 = v9;
  v973 = v13;
  if (v13)
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      v912 = "Cannot call constructor in an optional chain";
LABEL_861:
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, v912);
    }
  }
  else
  {
    v972 = v196;
    if ((v196 & 1) == 0)
    {
      v614 = *(_DWORD *)(a1 + 7412);
      v995 = *(_OWORD *)(a1 + 7296);
      LODWORD(v962) = *(_DWORD *)(a1 + 7316);
      *(_OWORD *)v990 = *(_OWORD *)(a1 + 7320);
      *(_QWORD *)&v990[16] = *(_QWORD *)(a1 + 7336);
      LODWORD(v970) = *v964;
      LODWORD(v963) = v964[1];
      v615 = *((_DWORD *)v975 + 263);
      v616 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
      v617 = *(unsigned int *)(a1 + 7404);
      v618 = *(_QWORD *)(a1 + 7288);
      v619 = *(_DWORD *)v618;
      LODWORD(v961) = *(_DWORD *)(v618 + 4);
      v620 = *(_BYTE *)(v618 + 56);
      v621 = *(_DWORD *)(a1 + 7400);
      *(_DWORD *)(a1 + 7444) = v621;
      v968 = v614;
      *(_DWORD *)(a1 + 7448) = v614;
      *(_DWORD *)(a1 + 7452) = v617;
      *(_DWORD *)(v618 + 4) = v621;
      v622 = *(_DWORD *)(a1 + 12);
      if (!v622)
      {
        __break(0xC471u);
        JUMPOUT(0x197EBE948);
      }
      v623 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v622 - 1) + 9) & 1;
      *(_BYTE *)(v618 + 56) = 0;
      v10 = v967;
      v290 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v618, (uint64_t)v967, 0, v623, (uint64_t)a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v290;
      if (v290 > 8 || ((1 << v290) & 0x114) == 0)
      {
        JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), v616, v617, a4, (uint64_t)a5, a6, a7, a8);
        v629 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)v629 = v619;
        *(_BYTE *)(v629 + 56) = v620;
        v630 = *(_DWORD *)(a1 + 7400);
        v631 = *(_DWORD *)(a1 + 7412);
        v632 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v630;
        *(_DWORD *)(a1 + 7448) = v631;
        *(_DWORD *)(a1 + 7452) = v632;
        *(_DWORD *)(v629 + 4) = v630;
        v633 = *(_DWORD *)(a1 + 12);
        if (!v633)
        {
          __break(0xC471u);
          JUMPOUT(0x197EBE968);
        }
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v629, (uint64_t)v967, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v633 - 1) + 9) & 1, v625, v626, v627, v628);
        *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v961;
        *(_OWORD *)(a1 + 7296) = v995;
        *(_DWORD *)(a1 + 7312) = v615;
        *(_DWORD *)(a1 + 7316) = (_DWORD)v962;
        *(_OWORD *)(a1 + 7320) = *(_OWORD *)v990;
        *(_QWORD *)(a1 + 7336) = *(_QWORD *)&v990[16];
        v634 = v964;
        *v964 = v970;
        v634[1] = v963;
        *((_DWORD *)v975 + 263) = v615;
        v635 = *(WTF::StringImpl **)(a1 + 7360);
        *(_QWORD *)(a1 + 7360) = 0;
        if (v635)
        {
          if (*(_DWORD *)v635 == 2)
          {
            WTF::StringImpl::~StringImpl(v635, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
            WTF::fastFree(v801, v802, v803, v804, v805, v806, v807, v808);
          }
          else
          {
            *(_DWORD *)v635 -= 2;
          }
        }
        v290 = 19;
        v10 = v967;
      }
      v295 = (int *)NewTargetExpr;
      v9 = v964;
      v11 = v966;
      v13 = v973;
      v196 = v972;
      v195 = v965;
      v289 = v971;
      v291 = v969;
      v292 = &off_1E3585948;
      v293 = &off_1E35854C8;
      v294 = v968;
      goto LABEL_202;
    }
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use super as the base of an optional chain");
  }
LABEL_79:
  v94 = 0;
LABEL_225:
  v322 = v978;
  if (v978)
  {
    v978 = 0;
    LODWORD(v979) = 0;
    WTF::fastFree((unint64_t)v322, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
  return v94;
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[24]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Cannot parse expression");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(uint64_t a1, uint64_t a2)
{
  int32x2_t *v3;
  int v5;
  int32x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  int32x2_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  JSC::ParserArena *v34;
  void (**v35)(JSC::CommaNode *__hidden);
  uint64_t *v36;
  uint64_t v37;
  void (**v38)(JSC::CommaNode *__hidden);
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int32x2_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  JSC::ParserArena *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  JSC::ParserArena *v57;
  uint64_t v58;
  JSC::ParserArena *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v3 = (int32x2_t *)(a1 + 7300);
  if ((unint64_t)&v59 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v13 = 0;
      v3[6].i8[4] = 1;
      return v13;
    }
    return 0;
  }
  v5 = *(_DWORD *)(a1 + 7400);
  v6 = *(int32x2_t *)(a1 + 7404);
  LODWORD(v60) = 0;
  v61 = *(_QWORD *)(a1 + 7496);
  v62 = a1;
  *(_QWORD *)(a1 + 7496) = &v60;
  v7 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, &v60);
  *(_QWORD *)(v62 + 7496) = v61;
  if (!v7)
  {
    v54 = *(_DWORD *)(a1 + 7368);
    if (v54 != 20 && (v54 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[24]>(a1);
      return 0;
    }
    goto LABEL_38;
  }
  v12 = v7;
  *(_DWORD *)(v7 + 20) = *(_DWORD *)(a1 + 7448);
  if (*(_DWORD *)(a1 + 7368) == 6)
  {
    *(_BYTE *)(v7 + 24) = 1;
    v15 = *(_QWORD *)(v7 + 8);
    v16 = *(_DWORD *)(v7 + 16);
    v60 = v15;
    LODWORD(v61) = v16;
    v17 = *(_QWORD *)(a1 + 7520);
    if (v17 && (v15 & 0x80000000) == 0)
      JSC::DebuggerPausePositions::appendPause(v17, (uint64_t)&v60);
    v18 = *(_DWORD *)(a1 + 7400);
    v19 = *(_DWORD *)(a1 + 7412);
    v20 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v18;
    *(_DWORD *)(a1 + 7448) = v19;
    *(_DWORD *)(a1 + 7452) = v20;
    v21 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v21 + 4) = v18;
    v22 = *(_DWORD *)(a1 + 12);
    if (!v22)
      goto LABEL_41;
    v23 = (_DWORD *)(a1 + 7368);
    v24 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v22 - 1) + 9) & 1;
    *(_BYTE *)(v21 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v21, a1 + 7368, 0, v24, v8, v9, v10, v11);
    *v3 = vadd_s32(*v3, (int32x2_t)0x100000001);
    v25 = *(_DWORD *)(a1 + 7400);
    v26 = v3[13];
    LODWORD(v60) = 0;
    v61 = *(_QWORD *)(a1 + 7496);
    v62 = a1;
    *(_QWORD *)(a1 + 7496) = &v60;
    v27 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, &v60);
    *(_QWORD *)(v62 + 7496) = v61;
    if (v27)
    {
      *(_BYTE *)(v27 + 24) = 1;
      v32 = *(_QWORD *)(v27 + 8);
      v33 = *(_DWORD *)(v27 + 16);
      v60 = v32;
      LODWORD(v61) = v33;
      if (*(_QWORD *)(a1 + 7520) && (v32 & 0x80000000) == 0)
      {
        v55 = v27;
        JSC::DebuggerPausePositions::appendPause(*(_QWORD *)(a1 + 7520), (uint64_t)&v60);
        v27 = v55;
      }
      *(_DWORD *)(v27 + 20) = *(_DWORD *)(a1 + 7448);
      v34 = *(JSC::ParserArena **)(a2 + 8);
      v13 = *(_QWORD *)v34;
      if (*((_QWORD *)v34 + 1) - *(_QWORD *)v34 <= 0x2FuLL)
      {
        v56 = v27;
        v57 = *(JSC::ParserArena **)(a2 + 8);
        JSC::ParserArena::allocateFreeablePool(v57);
        v34 = v57;
        v27 = v56;
        v13 = *(_QWORD *)v57;
      }
      *(_QWORD *)v34 = v13 + 48;
      *(_DWORD *)(v13 + 8) = v5;
      *(int32x2_t *)(v13 + 12) = vrev64_s32(v6);
      *(_DWORD *)(v13 + 20) = -1;
      *(_BYTE *)(v13 + 24) = 0;
      *(_BYTE *)(v13 + 25) = 126;
      *(_BYTE *)(v13 + 26) = 0;
      v35 = &off_1E35896F8;
      *(_QWORD *)v13 = &off_1E35896F8;
      *(_QWORD *)(v13 + 32) = v12;
      *(_QWORD *)(v13 + 40) = 0;
      v36 = *(uint64_t **)(a2 + 8);
      v37 = *v36;
      if ((unint64_t)(v36[1] - *v36) <= 0x2F)
      {
        v58 = v27;
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
        v35 = &off_1E35896F8;
        v27 = v58;
        v37 = *v36;
      }
      *v36 = v37 + 48;
      *(_DWORD *)(v37 + 8) = v25;
      *(int32x2_t *)(v37 + 12) = vrev64_s32(v26);
      *(_DWORD *)(v37 + 20) = -1;
      *(_BYTE *)(v37 + 24) = 0;
      *(_WORD *)(v37 + 25) = 126;
      *(_QWORD *)v37 = &off_1E35896F8;
      *(_QWORD *)(v37 + 32) = v27;
      *(_QWORD *)(v37 + 40) = 0;
      *(_QWORD *)(v13 + 40) = v37;
      if (*v23 != 6)
      {
LABEL_15:
        *(_DWORD *)(v13 + 20) = *(_DWORD *)(a1 + 7448);
        return v13;
      }
      while (1)
      {
        v38 = v35;
        v39 = *(_DWORD *)(a1 + 7400);
        v40 = *(_DWORD *)(a1 + 7412);
        v41 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v39;
        *(_DWORD *)(a1 + 7448) = v40;
        *(_DWORD *)(a1 + 7452) = v41;
        v42 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v42 + 4) = v39;
        v43 = *(_DWORD *)(a1 + 12);
        if (!v43)
          break;
        v44 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v43 - 1) + 9) & 1;
        *(_BYTE *)(v42 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v42, a1 + 7368, 0, v44, v28, v29, v30, v31);
        v45 = *(_DWORD *)(a1 + 7400);
        v46 = v3[13];
        LODWORD(v60) = 0;
        v61 = *(_QWORD *)(a1 + 7496);
        v62 = a1;
        *(_QWORD *)(a1 + 7496) = &v60;
        v47 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, &v60);
        *(_QWORD *)(v62 + 7496) = v61;
        if (!v47)
          goto LABEL_30;
        v48 = v47;
        *(_DWORD *)(v47 + 20) = *(_DWORD *)(a1 + 7448);
        *(_BYTE *)(v47 + 24) = 1;
        v49 = *(_QWORD *)(v47 + 8);
        v50 = *(_DWORD *)(v47 + 16);
        v60 = v49;
        LODWORD(v61) = v50;
        v51 = *(_QWORD *)(a1 + 7520);
        if (v51 && (v49 & 0x80000000) == 0)
          JSC::DebuggerPausePositions::appendPause(v51, (uint64_t)&v60);
        v52 = *(JSC::ParserArena **)(a2 + 8);
        v53 = *(_QWORD *)v52;
        if (*((_QWORD *)v52 + 1) - *(_QWORD *)v52 <= 0x2FuLL)
        {
          v59 = *(JSC::ParserArena **)(a2 + 8);
          JSC::ParserArena::allocateFreeablePool(v52);
          v52 = v59;
          v53 = *(_QWORD *)v59;
        }
        *(_QWORD *)v52 = v53 + 48;
        *(_DWORD *)(v53 + 8) = v45;
        *(int32x2_t *)(v53 + 12) = vrev64_s32(v46);
        *(_DWORD *)(v53 + 20) = -1;
        *(_BYTE *)(v53 + 24) = 0;
        *(_WORD *)(v53 + 25) = 126;
        v35 = v38;
        *(_QWORD *)v53 = v38;
        *(_QWORD *)(v53 + 32) = v48;
        *(_QWORD *)(v53 + 40) = 0;
        *(_QWORD *)(v37 + 40) = v53;
        v37 = v53;
        if (*v23 != 6)
          goto LABEL_15;
      }
LABEL_41:
      __break(0xC471u);
      JUMPOUT(0x197EBF394);
    }
LABEL_30:
    if (*v23 != 20 && (*v23 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse expression in a comma expression");
      return 0;
    }
LABEL_38:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return 0;
  }
  return v7;
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[21]>(uint64_t a1, const char *a2, const char *a3)
{
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  void (**v31)(WTF::StringPrintStream *__hidden);
  WTF *v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v31 = off_1E3572250;
    v32 = (WTF *)v34;
    v33 = xmmword_199122F80;
    v34[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v31);
    v6 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v31[4])(&v31);
    WTF::PrintStream::printf(v6, "%s", ". ");
    v31[5]((WTF::StringPrintStream *)&v31);
    v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v31[4])(&v31);
    WTF::PrintStream::printf(v7, "%s", "Expected '");
    WTF::PrintStream::printf(v7, "%s", a2);
    WTF::PrintStream::printf(v7, "%s", "' to ");
    WTF::PrintStream::printf(v7, "%s", "end");
    WTF::PrintStream::printf(v7, "%s", " a ");
    WTF::PrintStream::printf(v7, "%s", a3);
    WTF::PrintStream::printf(v7, "%s", ".");
    v31[5]((WTF::StringPrintStream *)&v31);
    WTF::String::fromUTF8WithLatin1Fallback(v32, v33, &v30);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v30, v8, v9, v10, v11, v12, v13);
    v21 = v30;
    v30 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    if (v32 != (WTF *)v34)
      WTF::fastFree((unint64_t)v32, v14, v15, v16, v17, v18, v19, v20);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseTemplateLiteral<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  JSC::ParserArena *v30;
  uint64_t result;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  JSC::ParserArena *v44;
  const char *v45;
  int v46;
  int v48;
  int v49;
  int v50;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  char v57;

  v11 = *(_DWORD *)(a1 + 7300);
  v12 = *(_DWORD *)(a1 + 7400);
  v13 = *(_DWORD *)(a1 + 7404);
  v14 = *(_DWORD *)(a1 + 7408);
  v57 = 0;
  v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseTemplateString<JSC::ASTBuilder>(a1, a2, 1, a3, &v57, a6, a7, a8);
  if (!v15)
  {
    v46 = *(_DWORD *)(a1 + 7368);
    if (v46 != 20 && (v46 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse head template element");
      goto LABEL_33;
    }
    goto LABEL_52;
  }
  v16 = v15;
  v17 = *(_QWORD *)(a2 + 8);
  v18 = *(_QWORD **)v17;
  if (*(_QWORD *)(v17 + 8) - *(_QWORD *)v17 <= 0xFuLL)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v18 = *(_QWORD **)v17;
  }
  *(_QWORD *)v17 = v18 + 2;
  *v18 = 0;
  v18[1] = v16;
  if (!v57)
  {
    if (*(_DWORD *)(a1 + 7368) == 1)
    {
LABEL_30:
      if (*(_QWORD *)(a1 + 7360))
      {
LABEL_33:
        result = 0;
        goto LABEL_16;
      }
      v45 = "Template literal expression cannot be empty";
LABEL_32:
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, v45);
      goto LABEL_33;
    }
    v19 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
    if (v19)
    {
      v23 = v19;
      v56 = v14;
      v24 = *(_QWORD *)(a2 + 8);
      v25 = *(_QWORD **)v24;
      if (*(_QWORD *)(v24 + 8) - *(_QWORD *)v24 <= 0xFuLL)
      {
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
        v25 = *(_QWORD **)v24;
      }
      *(_QWORD *)v24 = v25 + 2;
      *v25 = 0;
      v25[1] = v23;
      v26 = JSC::Parser<JSC::Lexer<char16_t>>::parseTemplateString<JSC::ASTBuilder>(a1, a2, 0, a3, &v57, v20, v21, v22);
      if (v26)
      {
        v27 = v26;
        v54 = v12;
        v55 = v13;
        v28 = *(_QWORD *)(a2 + 8);
        v29 = *(_QWORD **)v28;
        if (*(_QWORD *)(v28 + 8) - *(_QWORD *)v28 <= 0xFuLL)
        {
          JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
          v29 = *(_QWORD **)v28;
        }
        *(_QWORD *)v28 = v29 + 2;
        *v29 = 0;
        v29[1] = v27;
        *v18 = v29;
        if (v57)
        {
LABEL_13:
          v30 = *(JSC::ParserArena **)(a2 + 8);
          result = *(_QWORD *)v30;
          if (*((_QWORD *)v30 + 1) - *(_QWORD *)v30 <= 0x2FuLL)
          {
            JSC::ParserArena::allocateFreeablePool(v30);
            result = *(_QWORD *)v30;
          }
          *(_QWORD *)v30 = result + 48;
          *(_DWORD *)(result + 8) = v54;
          *(_DWORD *)(result + 12) = v56;
          *(_DWORD *)(result + 16) = v55;
          *(_DWORD *)(result + 20) = -1;
          *(_BYTE *)(result + 24) = 0;
          *(_BYTE *)(result + 25) = 126;
          *(_BYTE *)(result + 26) = 0;
          *(_QWORD *)result = &off_1E35842C8;
          *(_QWORD *)(result + 32) = v18;
          *(_QWORD *)(result + 40) = v25;
          goto LABEL_16;
        }
        v32 = v25;
        v53 = v11;
        while (*(_DWORD *)(a1 + 7368) != 1)
        {
          v33 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
          if (!v33)
          {
            v50 = *(_DWORD *)(a1 + 7368);
            if (v50 != 20 && (v50 & 0x100000) == 0)
              goto LABEL_53;
            goto LABEL_52;
          }
          v37 = v33;
          v38 = *(_QWORD *)(a2 + 8);
          v39 = *(_QWORD **)v38;
          if (*(_QWORD *)(v38 + 8) - *(_QWORD *)v38 <= 0xFuLL)
          {
            JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
            v39 = *(_QWORD **)v38;
          }
          *(_QWORD *)v38 = v39 + 2;
          *v39 = 0;
          v39[1] = v37;
          *v32 = v39;
          v40 = JSC::Parser<JSC::Lexer<char16_t>>::parseTemplateString<JSC::ASTBuilder>(a1, a2, 0, a3, &v57, v34, v35, v36);
          if (!v40)
          {
            v52 = *(_DWORD *)(a1 + 7368);
            if (v52 == 20 || (v52 & 0x100000) != 0)
            {
              JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
              result = 0;
              v11 = v53;
              goto LABEL_16;
            }
            v11 = v53;
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_33;
            goto LABEL_58;
          }
          v41 = v40;
          v42 = *(_QWORD *)(a2 + 8);
          v43 = *(_QWORD **)v42;
          if (*(_QWORD *)(v42 + 8) - *(_QWORD *)v42 <= 0xFuLL)
          {
            JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
            v43 = *(_QWORD **)v42;
          }
          *(_QWORD *)v42 = v43 + 2;
          *v43 = 0;
          v43[1] = v41;
          *v29 = v43;
          v32 = v39;
          v29 = v43;
          v11 = v53;
          if (v57)
            goto LABEL_13;
        }
        goto LABEL_30;
      }
      v49 = *(_DWORD *)(a1 + 7368);
      if (v49 != 20 && (v49 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
LABEL_58:
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse template element");
        goto LABEL_33;
      }
    }
    else
    {
      v48 = *(_DWORD *)(a1 + 7368);
      if (v48 != 20 && (v48 & 0x100000) == 0)
      {
LABEL_53:
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_33;
        v45 = "Cannot parse expression in template literal";
        goto LABEL_32;
      }
    }
LABEL_52:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    goto LABEL_33;
  }
  v44 = *(JSC::ParserArena **)(a2 + 8);
  result = *(_QWORD *)v44;
  if (*((_QWORD *)v44 + 1) - *(_QWORD *)v44 <= 0x2FuLL)
  {
    JSC::ParserArena::allocateFreeablePool(v44);
    result = *(_QWORD *)v44;
  }
  *(_QWORD *)v44 = result + 48;
  *(_DWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 12) = v14;
  *(_DWORD *)(result + 16) = v13;
  *(_DWORD *)(result + 20) = -1;
  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 25) = 126;
  *(_BYTE *)(result + 26) = 0;
  *(_QWORD *)result = &off_1E35842C8;
  *(_QWORD *)(result + 32) = v18;
  *(_QWORD *)(result + 40) = 0;
LABEL_16:
  *(_DWORD *)(a1 + 7300) = v11;
  return result;
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[20]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", ")");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "compound expression");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseAwaitExpression<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int32x2_t *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  double *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  const char *v46;
  _BOOL4 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  BOOL v61;
  double *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t LogicalNot;
  double *v75;
  int v76;
  int v77;
  uint64_t *v78;
  uint64_t result;
  int v80;
  int v81;
  const char *v82;
  int v83;
  const char *v84;
  int v85;
  char v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  int v98;
  const char *v99;
  int v100;
  const char *v101;
  int v102;
  __int128 v103;
  _DWORD v104[3];

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7404);
  v11 = *(_DWORD *)(a1 + 7408);
  v95 = *(_QWORD *)(a1 + 7416);
  v96 = *(_DWORD *)(a1 + 7424);
  v12 = *(_DWORD *)(a1 + 7412);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v12;
  *(_DWORD *)(a1 + 7452) = v10;
  v13 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v13 + 4) = v9;
  v14 = *(_DWORD *)(a1 + 12);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197EC06A0);
  }
  v16 = (int32x2_t *)(a1 + 7300);
  v17 = (_DWORD *)(a1 + 7368);
  v89 = a1 + 7444;
  v18 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v14 - 1) + 9) & 1;
  *(_BYTE *)(v13 + 56) = 0;
  v19 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v13, a1 + 7368, 0, v18, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v19;
  v24 = *(_QWORD *)(a1 + 7416);
  v92 = a1;
  v93 = v24;
  v94 = *(_DWORD *)(a1 + 7424);
  v90 = 0;
  v91 = *(_QWORD *)(a1 + 7496);
  *(_QWORD *)(a1 + 7496) = &v90;
  v25 = *(_BYTE *)(a1 + 7440);
  *(_BYTE *)(a1 + 7440) = 1;
  v104[0] = 0;
  if ((_DWORD)v19 != 546)
    goto LABEL_10;
  v26 = *(_DWORD *)(a1 + 12);
  v27 = v26 - 1;
  do
  {
    v28 = v27;
    if (!v27)
      break;
    if (!v26)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC06A8);
    }
    --v27;
  }
  while ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v28 + 12) & 0x40) == 0);
  if (v26 <= v28)
  {
    __break(0xC471u);
    JUMPOUT(0x197EC06B0);
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v28 + 11) & 0x40) == 0 && ((1 << *(_BYTE *)(a1 + 7474)) & 0x6000) == 0)
  {
LABEL_10:
    v86 = v25;
    v87 = v11;
    v88 = v9;
    v103 = *(_OWORD *)(a1 + 7400);
    if ((v19 & 0x100) != 0)
    {
      v31 = v10;
      do
      {
        v29 = v19;
        ++*(_DWORD *)(a1 + 7300);
        JSC::ASTBuilder::appendUnaryToken(a2, v104, v19, (unsigned int *)(a1 + 7416), v20, v21, v22, v23);
        v36 = *(_DWORD *)(a1 + 7400);
        v37 = *(_DWORD *)(a1 + 7412);
        v38 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v36;
        *(_DWORD *)(a1 + 7448) = v37;
        *(_DWORD *)(a1 + 7452) = v38;
        v39 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v39 + 4) = v36;
        v40 = *(_DWORD *)(a1 + 12);
        if (!v40)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC0690);
        }
        v30 = (v29 & 0xFFFFFFFC) == 256;
        v41 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v40 - 1) + 9) & 1;
        *(_BYTE *)(v39 + 56) = 0;
        v19 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v39, a1 + 7368, 0, v41, v32, v33, v34, v35);
        *(_DWORD *)(a1 + 7368) = v19;
        ++*(_DWORD *)(a1 + 7304);
        if ((v19 & 0x100) == 0)
          goto LABEL_19;
      }
      while ((v29 & 0xFFFFFFFC) != 0x100);
      if (!*(_QWORD *)(a1 + 7360))
      {
        v101 = JSC::operatorString((JSC *)1, v29);
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[5],char const*,char const(&)[42]>(a1, &v101);
      }
      goto LABEL_18;
    }
    v29 = 0;
    v30 = 0;
LABEL_19:
    v101 = *(const char **)(a1 + 7416);
    v102 = *(_DWORD *)(a1 + 7424);
    v43 = JSC::Parser<JSC::Lexer<char16_t>>::parseMemberExpression<JSC::ASTBuilder>(a1, a2);
    if (v43)
    {
      v42 = (double *)v43;
      if ((v29 & 0xFFFFFFFC) == 0x100)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 256))(v43))
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v99 = JSC::Parser<JSC::Lexer<char16_t>>::metaPropertyName<JSC::ASTBuilder>((uint64_t)v42);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[36]>(a1, &v99);
          }
          goto LABEL_103;
        }
        if (((*(uint64_t (**)(double *))(*(_QWORD *)v42 + 88))(v42) & 1) == 0)
        {
          v81 = *(_DWORD *)(a1 + 12);
          if (!v81)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC06E8);
          }
          v31 = v10;
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v81 - 1) + 9) & 1) != 0
            || ((*(uint64_t (**)(double *))(*(_QWORD *)v42 + 296))(v42) & 1) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              if ((v29 & 0xFFFFFFFD) == 0x100)
                v82 = "++";
              else
                v82 = "--";
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[8],char const(&)[3],char const(&)[51]>(a1, v82);
            }
            goto LABEL_18;
          }
        }
      }
      v44 = *(_DWORD *)(a1 + 12);
      if (!v44)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC06B8);
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v44 - 1) + 9) & 1) != 0
        && (*(unsigned int (**)(double *))(*(_QWORD *)v42 + 112))(v42))
      {
        v45 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        v46 = **(const char ***)(a1 + 7320);
        v47 = v46 == *(const char **)(v45 + 1248) || v46 == *(const char **)(v45 + 880);
        if (v30 && v47)
        {
          v48 = *(_DWORD *)(a1 + 12);
          if (!v48)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC06E0);
          }
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v48 - 1) + 9) & 1) != 0)
          {
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_103;
            goto LABEL_102;
          }
          v47 = 1;
        }
      }
      else
      {
        v47 = 0;
      }
      if (*v17 == 257)
      {
        if (!(*(unsigned int (**)(double *))(*(_QWORD *)v42 + 256))(v42))
        {
          if (((*(uint64_t (**)(double *))(*(_QWORD *)v42 + 88))(v42) & 1) == 0)
          {
            v85 = *(_DWORD *)(a1 + 12);
            if (!v85)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC06F8);
            }
            v31 = v10;
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v85 - 1) + 9) & 1) != 0
              || ((*(uint64_t (**)(double *))(*(_QWORD *)v42 + 296))(v42) & 1) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                v84 = "Postfix -- operator applied to value that is not a reference";
                goto LABEL_145;
              }
LABEL_18:
              v42 = 0;
              v10 = v31;
LABEL_88:
              v11 = v87;
              v9 = v88;
              v25 = v86;
              goto LABEL_89;
            }
          }
          *v16 = vadd_s32(*v16, (int32x2_t)0x100000001);
          JSC::ASTBuilder::makePostfixNode(a2, (uint64_t)&v103, (uint64_t)v42, 6, (uint64_t *)&v101, (uint64_t *)v89, (uint64_t *)(a1 + 7428));
          v42 = v62;
          ++*(_DWORD *)(a1 + 7296);
          if (v47)
          {
            v63 = *(_DWORD *)(a1 + 12);
            if (!v63)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC06D8);
            }
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v63 - 1) + 9) & 1) != 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                v99 = **(const char ***)(a1 + 7320);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[36]>(a1, (uint64_t *)&v99);
              }
              goto LABEL_103;
            }
          }
          if (!v30)
          {
            v64 = *(_DWORD *)(a1 + 7400);
            v65 = *(_DWORD *)(a1 + 7412);
            v66 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v64;
            *(_DWORD *)(a1 + 7448) = v65;
            *(_DWORD *)(a1 + 7452) = v66;
            v58 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v58 + 4) = v64;
            v59 = *(_DWORD *)(a1 + 12);
            if (!v59)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC06C8);
            }
            goto LABEL_62;
          }
          goto LABEL_125;
        }
      }
      else
      {
        if (*v17 != 256)
          goto LABEL_63;
        if (!(*(unsigned int (**)(double *))(*(_QWORD *)v42 + 256))(v42))
        {
          if (((*(uint64_t (**)(double *))(*(_QWORD *)v42 + 88))(v42) & 1) == 0)
          {
            v83 = *(_DWORD *)(a1 + 12);
            if (!v83)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC06F0);
            }
            v31 = v10;
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v83 - 1) + 9) & 1) != 0
              || ((*(uint64_t (**)(double *))(*(_QWORD *)v42 + 296))(v42) & 1) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                v84 = "Postfix ++ operator applied to value that is not a reference";
LABEL_145:
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, v84);
                goto LABEL_18;
              }
              goto LABEL_18;
            }
          }
          *v16 = vadd_s32(*v16, (int32x2_t)0x100000001);
          JSC::ASTBuilder::makePostfixNode(a2, (uint64_t)&v103, (uint64_t)v42, 5, (uint64_t *)&v101, (uint64_t *)v89, (uint64_t *)(a1 + 7428));
          v42 = v53;
          ++*(_DWORD *)(a1 + 7296);
          if (!v47)
            goto LABEL_40;
          v54 = *(_DWORD *)(a1 + 12);
          if (!v54)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC06D0);
          }
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v54 - 1) + 9) & 1) == 0)
          {
LABEL_40:
            if (!v30)
            {
              v55 = *(_DWORD *)(a1 + 7400);
              v56 = *(_DWORD *)(a1 + 7412);
              v57 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v55;
              *(_DWORD *)(a1 + 7448) = v56;
              *(_DWORD *)(a1 + 7452) = v57;
              v58 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v58 + 4) = v55;
              v59 = *(_DWORD *)(a1 + 12);
              if (!v59)
              {
                __break(0xC471u);
                JUMPOUT(0x197EBFF60);
              }
LABEL_62:
              v67 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v59 - 1) + 9) & 1;
              *(_BYTE *)(v58 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v58, a1 + 7368, 0, v67, v49, v50, v51, v52);
LABEL_63:
              v99 = *(const char **)v89;
              v100 = *(_DWORD *)(a1 + 7452);
              if (v104[0])
              {
                v68 = *(_DWORD *)(a2 + 1052);
                while (1)
                {
                  v69 = *(_QWORD *)(a2 + 1040) + 16 * v68;
                  v101 = *(const char **)(v69 - 12);
                  v102 = *(_DWORD *)(v69 - 4);
                  v70 = *(_DWORD *)(v69 - 16);
                  if (v70 <= 773)
                  {
                    switch(v70)
                    {
                      case 256:
                      case 258:
                        v97 = v101 | ((unint64_t)(HIDWORD(v101) + 2) << 32);
                        v98 = v102;
                        v71 = a2;
                        v72 = (uint64_t)v42;
                        v73 = 5;
                        goto LABEL_73;
                      case 257:
                      case 259:
                        v97 = v101 | ((unint64_t)(HIDWORD(v101) + 2) << 32);
                        v98 = v102;
                        v71 = a2;
                        v72 = (uint64_t)v42;
                        v73 = 6;
LABEL_73:
                        JSC::ASTBuilder::makePrefixNode(v71, (uint64_t)&v103, v72, v73, (uint64_t *)&v101, (uint64_t *)&v97, (uint64_t *)&v99);
                        v42 = v75;
                        ++*(_DWORD *)(a1 + 7296);
                        goto LABEL_87;
                      case 260:
                        LogicalNot = JSC::ASTBuilder::createLogicalNot(a2, (uint64_t)&v103, v42);
                        goto LABEL_86;
                      case 261:
                        JSC::ASTBuilder::makeBitwiseNotNode(a2, (uint64_t)&v103, v42);
                        goto LABEL_86;
                      default:
                        goto LABEL_147;
                    }
                  }
                  if (v70 <= 775)
                  {
                    if (v70 == 774)
                      JSC::ASTBuilder::makeTypeOfNode(a2, (uint64_t)&v103, v42);
                    else
                      JSC::ASTBuilder::createVoid(a2, (uint64_t)&v103, (uint64_t)v42);
                  }
                  else
                  {
                    switch(v70)
                    {
                      case 776:
                        if ((*(unsigned int (**)(double *))(*(_QWORD *)v42 + 112))(v42))
                        {
                          v76 = *(_DWORD *)(a1 + 12);
                          if (!v76)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x197EC06C0);
                          }
                          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v76 - 1) + 9) & 1) != 0)
                          {
                            if (!*(_QWORD *)(a1 + 7360))
                            {
                              v97 = **(_QWORD **)(a1 + 7320);
                              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[37],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v97);
                            }
                            goto LABEL_103;
                          }
                        }
                        if ((*(unsigned int (**)(double *))(*(_QWORD *)v42 + 96))(v42))
                        {
                          if (!*(_QWORD *)(a1 + 7360))
                          {
                            v97 = **(_QWORD **)(a1 + 7336);
                            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],WTF::UniquedStringImpl *>(a1, (uint64_t *)&v97);
                          }
                          goto LABEL_103;
                        }
                        LogicalNot = (uint64_t)JSC::ASTBuilder::makeDeleteNode(a2, (uint64_t)&v103, (_QWORD **)v42, (uint64_t *)(*(_QWORD *)(a2 + 1040)+ 16 * *(unsigned int *)(a2 + 1052)- 12), (uint64_t *)&v99, (uint64_t *)&v99);
                        break;
                      case 174336:
                        JSC::ASTBuilder::createUnaryPlus(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v103, (uint64_t)v42);
                        break;
                      case 174337:
                        JSC::ASTBuilder::makeNegateNode(a2, (uint64_t)&v103, (uint64_t)v42);
                        break;
                      default:
LABEL_147:
                        __break(0xC471u);
                        JUMPOUT(0x197EC0698);
                    }
                  }
LABEL_86:
                  v42 = (double *)LogicalNot;
LABEL_87:
                  v77 = v104[0];
                  v68 = *(_DWORD *)(a2 + 1052) - 1;
                  *(_DWORD *)(a2 + 1052) = v68;
                  v104[0] = v77 - 1;
                  if (v77 == 1)
                    goto LABEL_88;
                }
              }
              goto LABEL_88;
            }
LABEL_125:
            if (!*(_QWORD *)(a1 + 7360))
            {
              v99 = JSC::operatorString(0, v29);
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[5],char const*,char const(&)[42]>(a1, &v99);
            }
LABEL_103:
            v42 = 0;
            goto LABEL_88;
          }
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_103;
          v46 = **(const char ***)(a1 + 7320);
LABEL_102:
          v99 = v46;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v99);
          goto LABEL_103;
        }
      }
      if (!*(_QWORD *)(a1 + 7360))
      {
        v99 = JSC::Parser<JSC::Lexer<char16_t>>::metaPropertyName<JSC::ASTBuilder>((uint64_t)v42);
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[38]>(a1, &v99);
      }
      goto LABEL_103;
    }
    v61 = (*v17 & 0x100000) == 0 && *v17 != 20;
    if (v29)
    {
      v9 = v88;
      v25 = v86;
      if (v61)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v99 = JSC::operatorString((JSC *)1, v29);
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[31],char const*,char const(&)[9]>(a1, &v99);
        }
        goto LABEL_98;
      }
    }
    else
    {
      v9 = v88;
      v25 = v86;
      if (v61)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse member expression");
        goto LABEL_98;
      }
    }
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_98:
    v42 = 0;
    goto LABEL_89;
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 12) & 0x10) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' within static block");
    *(_BYTE *)(a1 + 7440) = v25;
    goto LABEL_117;
  }
  v42 = (double *)JSC::Parser<JSC::Lexer<char16_t>>::parseAwaitExpression<JSC::ASTBuilder>(a1, a2);
LABEL_89:
  *(_BYTE *)(a1 + 7440) = v25;
  if (v42)
  {
    *(_DWORD *)(a2 + 24) |= 0x80u;
    v78 = *(uint64_t **)(a2 + 8);
    result = *v78;
    if ((unint64_t)(v78[1] - *v78) <= 0x47)
    {
      JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
      result = *v78;
    }
    *v78 = result + 72;
    *(_DWORD *)(result + 8) = v9;
    *(_DWORD *)(result + 12) = v11;
    *(_DWORD *)(result + 16) = v10;
    *(_DWORD *)(result + 20) = -1;
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 25) = 126;
    *(_BYTE *)(result + 26) = 0;
    *(_QWORD *)result = &off_1E358AF00;
    *(_QWORD *)(result + 64) = v42;
    *(_QWORD *)(result + 28) = v93;
    *(_DWORD *)(result + 36) = v94;
    *(_QWORD *)(result + 52) = -1;
    *(_DWORD *)(result + 60) = -1;
    *(_DWORD *)(result + 48) = v96;
    *(_QWORD *)(result + 40) = v95;
    v80 = *(_DWORD *)(v89 + 8);
    *(_QWORD *)(result + 52) = *(_QWORD *)v89;
    *(_DWORD *)(result + 60) = v80;
    goto LABEL_93;
  }
LABEL_117:
  if (*v17 == 20 || (*v17 & 0x100000) != 0)
  {
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
  }
  else if (!*(_QWORD *)(a1 + 7360))
  {
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Failed to parse await expression");
  }
  result = 0;
LABEL_93:
  *(_QWORD *)(v92 + 7496) = v91;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, int a3, char a4, char a5, int a6, int a7, uint64_t a8, int a9, uint64_t a10)
{
  int v10;
  int v11;
  int v15;
  int v16;
  char v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  int v38;
  __int128 *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _BOOL4 v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  BOOL v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL4 v62;
  uint64_t v63;
  int v64;
  int v65;
  __int128 v66;
  int v67;
  __int128 v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  __int128 *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  char v94;
  void *v95;
  uint64_t v96;
  unsigned int *v97;
  WTF *v98;
  WTF *v99;
  WTF *v100;
  WTF::StringImpl **v101;
  WTF::StringImpl **v102;
  int v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  WTF::AtomStringImpl *v111;
  WTF *v112;
  unint64_t v113;
  unint64_t v114;
  unsigned int *v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  WTF::StringImpl **v126;
  uint64_t *v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  WTF::StringImpl **v147;
  WTF::StringImpl *v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int *v167;
  int v168;
  char v169;
  WTF::StringImpl *v170;
  uint64_t v171;
  unint64_t v172;
  __int16 *v173;
  __int16 v174;
  uint64_t v175;
  int v176;
  int v177;
  int v178;
  int v179;
  WTF::StringImpl *v180;
  int v181;
  uint64_t v182;
  WTF::StringImpl **v183;
  WTF::StringImpl *v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  const char *v193;
  unint64_t v194;
  WTF::StringImpl *v195;
  uint64_t v196;
  char hasDeclaredParameter;
  uint64_t v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  BOOL v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  int v232;
  int v233;
  int v234;
  int v235;
  uint64_t v236;
  int v237;
  unint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  unsigned __int8 v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unsigned int *v283;
  WTF::StringImpl *v284;
  unint64_t v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  WTF *v300;
  uint64_t v301;
  char v302;
  const char *v303;
  int v304;
  int v305;
  char v306;
  BOOL v307;
  unint64_t v308;
  BOOL *v309;
  uint64_t v311;
  unsigned int v312;
  BOOL v313;
  int v314;
  int v317;
  WTF *v319;
  WTF::StringImpl **v320;
  WTF *v321;
  WTF *v322;
  int v323;
  __int128 v324;
  unint64_t v325;
  WTF *v326;
  WTF *v327;
  uint64_t v328;
  _BYTE v329[64];
  int v330;
  char v331;
  int v332;
  char v333;
  _BYTE v334[40];
  const char *v335[12];
  uint64_t v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  _BYTE v341[32];
  int v342;
  __int128 v343;
  _QWORD v344[2];
  uint64_t v345[10];
  int v346;
  int v347;
  __int128 v348;
  int v349;
  unsigned int v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t *v353;
  const char *v354;
  char v355;
  int v356;
  int v357;
  char v358;
  __int128 v359;

  v358 = a5;
  v356 = a7;
  v357 = a6;
  v10 = *(unsigned __int8 *)(a1 + 7474);
  v355 = v10;
  v11 = 1 << v10;
  if (((1 << v10) & 0x1F8FFF) == 0)
    goto LABEL_354;
  v15 = *(_DWORD *)(a1 + 12);
  v312 = v15 - 1;
  v16 = *(_DWORD *)(a1 + 7368);
  v309 = (BOOL *)(a1 + 7344);
  if (v16 != 546
    && (v16 != 1048592 || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128)))
  {
    v17 = 0;
    v18 = 0;
    goto LABEL_5;
  }
  if (!*v309)
    goto LABEL_300;
  if (!v15)
  {
LABEL_354:
    __break(0xC471u);
    JUMPOUT(0x197EC1458);
  }
  if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * v312 + 10) & 0x102000) == 0 && *(_DWORD *)(a1 + 7480) != 1)
  {
    v18 = 0;
    goto LABEL_301;
  }
LABEL_300:
  v18 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
LABEL_301:
  v17 = 1;
LABEL_5:
  v354 = v18;
  v19 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  v21 = v20;
  v351 = v19;
  v352 = v20;
  v353 = (uint64_t *)a1;
  if (*(_DWORD *)(v19 + 12) <= v20)
  {
    __break(0xC471u);
    JUMPOUT(0x197EC1E98);
  }
  v22 = v19;
  v23 = v20;
  JSC::Scope::setSourceParseMode(*(_QWORD *)v19 + 720 * v20, v10);
  v29 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v29)
  {
    __break(0xC471u);
    JUMPOUT(0x197EC1EA0);
  }
  v30 = *(_QWORD *)a1;
  v31 = v29 - 1;
  if ((_DWORD)v29 != 1 && (*(_DWORD *)(v30 + 720 * (v29 - 1) + 10) & 0x400000) != 0)
  {
    v32 = 720 * v29;
    while (1)
    {
      v33 = v32 - 720;
      if (v32 == 720)
        break;
      v34 = *(_BYTE *)(v30 + v32 - 1428);
      v32 -= 720;
      if ((v34 & 0x40) != 0)
      {
        if (*(_BYTE *)(v30 + v33 - 712) != 2)
          *(_BYTE *)(v30 + 720 * (v29 - 1) + 8) = 0;
        break;
      }
    }
  }
  if (*(_DWORD *)(v22 + 12) <= v21)
  {
    __break(0xC471u);
    JUMPOUT(0x197EC1EA8);
  }
  v35 = *(_QWORD *)v22 + 720 * v23;
  *(_DWORD *)(v35 + 20) = a6;
  v36 = (int *)(a1 + 7368);
  *(_BYTE *)(v35 + 15) = a5;
  v37 = a1 + 7316;
  v38 = *(_DWORD *)(a1 + 7316);
  *(_DWORD *)(a1 + 7316) = 1;
  v39 = (__int128 *)(a1 + 7400);
  v40 = *(_DWORD *)(a1 + 7408);
  v41 = *(_QWORD *)(a1 + 7328);
  *(_QWORD *)(a1 + 7328) = 0;
  v349 = -1;
  v350 = v40;
  v348 = 0uLL;
  v346 = 0;
  v347 = -1;
  v345[0] = a1;
  v345[1] = (uint64_t)&v349;
  v345[2] = a8;
  v345[3] = (uint64_t)&v355;
  v345[4] = a2;
  v345[5] = (uint64_t)&v348;
  v345[6] = (uint64_t)&v347;
  v345[7] = (uint64_t)&v356;
  v345[8] = (uint64_t)&v350;
  v345[9] = (uint64_t)&v351;
  v42 = *(_QWORD *)(a1 + 7216);
  v344[0] = v42;
  v314 = v38;
  if ((v11 & 0x840) != 0)
  {
    v348 = *v39;
    *(_DWORD *)(a8 + 32) = *(_DWORD *)(a1 + 7400);
    v347 = v40 - *(_DWORD *)(a1 + 7404);
    v181 = v347;
    v349 = v40;
    *(_DWORD *)(a8 + 24) = v40;
    *(_DWORD *)(a8 + 40) = v181;
    if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(JSC::ASTBuilder &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::ASTBuilder> &,JSC::Parser<JSC::Lexer<char16_t>>::FunctionDefinitionType,std::optional<int>)::{lambda(void)#1}::operator()(v345) & 1) != 0)
    {
      v55 = 1;
      goto LABEL_29;
    }
    if (*(_DWORD *)(a1 + 12) <= v312)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC1F18);
    }
    JSC::Scope::MaybeParseAsGeneratorFunctionForScope::MaybeParseAsGeneratorFunctionForScope((uint64_t)&v324, &v351, (*(_DWORD *)(*(_QWORD *)a1 + 720 * v312 + 10) >> 9) & 1);
    if (*(_DWORD *)(a1 + 12) <= v312)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC1F20);
    }
    v228 = *v309;
    *v309 = (*(_DWORD *)(*(_QWORD *)a1 + 720 * v312 + 10) & 0x2000 | (1 << v355) & 0x38F80) == 0;
    JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionParameters<JSC::SyntaxChecker,JSC::ParserFunctionInfo<JSC::ASTBuilder>>(a1, (uint64_t)v344, a8, v223, v224, v225, v226, v227);
    v229 = *(_QWORD *)(a1 + 7360);
    *v309 = v228;
    if (*(_DWORD *)(v324 + 12) <= DWORD2(v324))
    {
      __break(0xC471u);
      JUMPOUT(0x197EC1F28);
    }
    *(_DWORD *)(*(_QWORD *)v324 + 720 * DWORD2(v324) + 10) = *(_DWORD *)(*(_QWORD *)v324 + 720 * DWORD2(v324) + 10) & 0xFFFFFDFF | (v325 << 9);
    if (v229)
      goto LABEL_32;
    v230 = *v36;
    if (*v36 == 38)
    {
      v231 = *(_QWORD *)(a1 + 7288);
      if (!*(_BYTE *)(v231 + 56))
      {
        v232 = *(_DWORD *)(a1 + 7400);
        v233 = *(_DWORD *)(a1 + 7412);
        v234 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v232;
        *(_DWORD *)(a1 + 7448) = v233;
        *(_DWORD *)(a1 + 7452) = v234;
        *(_DWORD *)(v231 + 4) = v232;
        v235 = *(_DWORD *)(a1 + 12);
        if (!v235)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC1F30);
        }
        v236 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v235 - 1) + 9) & 1;
        *(_BYTE *)(v231 + 56) = 0;
        v237 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v231, a1 + 7368, 0, v236, v25, v26, v27, v28);
        *(_DWORD *)(a1 + 7368) = v237;
        v65 = v237 == 0;
        goto LABEL_47;
      }
    }
    else if (v230 != 20 && (v230 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a '=>' after arrow function parameter declaration");
      goto LABEL_32;
    }
    goto LABEL_43;
  }
  v43 = *(_BYTE *)(v30 + 720 * v31 + 9);
  v44 = (v43 & 1) == 0;
  if (a9 || (v11 & 0x201) == 0)
  {
    if (v29 <= v312)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC1EB0);
    }
    if ((*(_BYTE *)(v30 + 720 * v312 + 11) & 2) != 0)
      v44 = 0;
  }
  if (a3 == 2)
    goto LABEL_28;
  if ((v17 & 1) == 0)
  {
    v45 = *v36;
    if (*v36 != 12)
    {
      v62 = (v45 == 544 || v45 == 1048592 && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(v42 + 41952) + 328))
         && (v43 & 1) == 0;
      if (v62 || !v44)
      {
        if (v62)
          goto LABEL_24;
      }
      else
      {
        if (v45 == 545)
          goto LABEL_24;
        if (v45 == 1048592)
        {
          if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(v42 + 41952) + 496))
            goto LABEL_24;
          if (a3 != 1)
            goto LABEL_28;
          goto LABEL_43;
        }
      }
      if (a3 != 1)
        goto LABEL_28;
      v63 = a1 + 7316;
      if (v45 == 2)
      {
        if (!v10)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Function statements must have a name");
          goto LABEL_257;
        }
        if (v10 == 9)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Async function statements must have a name");
          goto LABEL_257;
        }
      }
      else
      {
        if ((*(_BYTE *)(v30 + 720 * v31 + 9) & 1) != 0 && v45 == 532)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            *(_QWORD *)&v324 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), v40, *(_DWORD *)(a1 + 7412));
            *((_QWORD *)&v324 + 1) = v279;
            v335[0] = JSC::stringForFunctionMode();
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6],char const(&)[16]>(a1, (uint64_t)&v324, v335);
          }
          goto LABEL_257;
        }
        if ((v45 - 531) <= 1)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            *(_QWORD *)&v324 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), v40, *(_DWORD *)(a1 + 7412));
            *((_QWORD *)&v324 + 1) = v280;
            v335[0] = JSC::stringForFunctionMode();
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&v324, v335);
          }
          goto LABEL_257;
        }
        if ((v45 & 0x200) != 0)
        {
          if ((v45 - 544) >= 3)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              *(_QWORD *)&v324 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), v40, *(_DWORD *)(a1 + 7412));
              *((_QWORD *)&v324 + 1) = v301;
              v335[0] = JSC::stringForFunctionMode();
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&v324, v335);
            }
            goto LABEL_257;
          }
          if (v45 == 546)
          {
            if (*v309 && (*(_DWORD *)(v30 + 720 * v31 + 10) & 0x102000) == 0)
            {
              v37 = a1 + 7316;
              if (*(_DWORD *)(a1 + 7480) != 1)
                goto LABEL_43;
            }
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_257;
            *(_QWORD *)&v324 = JSC::stringForFunctionMode();
            v335[0] = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
            v303 = "Cannot use 'await' as a ";
          }
          else
          {
            if (v45 == 544)
            {
              v37 = a1 + 7316;
              if ((*(_BYTE *)(v30 + 720 * v31 + 9) & 1) != 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                {
                  *(_QWORD *)&v324 = JSC::stringForFunctionMode();
                  v335[0] = "in strict mode";
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[6],char const(&)[2],char const*>(a1, (const char **)&v324, v335);
                }
                goto LABEL_257;
              }
              goto LABEL_43;
            }
            if ((*(_BYTE *)(v30 + 720 * v31 + 9) & 1) == 0)
            {
              v37 = a1 + 7316;
              if ((*(_BYTE *)(v30 + 720 * v31 + 11) & 2) == 0)
                goto LABEL_43;
            }
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_257;
            *(_QWORD *)&v324 = JSC::stringForFunctionMode();
            v335[0] = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierYieldReason(a1);
            v303 = "Cannot use 'yield' as a ";
          }
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[6],char const(&)[2],char const*>(a1, v303, (const char **)&v324, v335);
          goto LABEL_257;
        }
      }
LABEL_43:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      goto LABEL_32;
    }
  }
LABEL_24:
  v46 = *(_QWORD *)(a1 + 7376);
  *(_QWORD *)a8 = v46;
  *(_QWORD *)(a1 + 7328) = v46;
  if (v18)
  {
    if (a9 == 1 || (v11 & 0x30E00) != 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[39],char const*&>(a1, &v354);
      goto LABEL_32;
    }
  }
  else
  {
    if ((v11 & 0x30E00) != 0 && !a9 && *v36 == 546)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        *(_QWORD *)&v324 = JSC::stringForFunctionMode();
        v193 = " named 'await'";
LABEL_189:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],char const*,char const(&)[15]>(a1, (const char **)&v324, v193);
      }
LABEL_32:
      v55 = 0;
      goto LABEL_29;
    }
    if ((v11 & 0x70004) != 0 && !a9 && *v36 == 545)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_32;
      *(_QWORD *)&v324 = JSC::stringForFunctionMode();
      v193 = " named 'yield'";
      goto LABEL_189;
    }
  }
  v47 = v43 & 1;
  v48 = *(_DWORD *)(a1 + 7400);
  v49 = *(_DWORD *)(a1 + 7412);
  v50 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v48;
  *(_DWORD *)(a1 + 7448) = v49;
  *(_DWORD *)(a1 + 7452) = v50;
  v51 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v51 + 4) = v48;
  *(_BYTE *)(v51 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v51, a1 + 7368, 0, v47, v25, v26, v27, v28);
  if ((a4 & 1) == 0)
  {
    if (*(_DWORD *)(v351 + 12) <= v352)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC1EF8);
    }
    v63 = a1 + 7316;
    v125 = (uint64_t *)(*(_QWORD *)v351 + 720 * v352);
    v126 = *(WTF::StringImpl ***)a8;
    v127 = v125 + 15;
    v128 = **(WTF::StringImpl ***)a8;
    if (v128)
      *(_DWORD *)v128 += 2;
    v129 = *v127;
    if (*v127)
      goto LABEL_108;
    v130 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)(v130 + 16) = 0;
    v130 += 16;
    *(_WORD *)(v130 + 8) = 0;
    *(_QWORD *)(v130 + 16) = 0;
    *(_WORD *)(v130 + 24) = 0;
    *(_QWORD *)(v130 + 32) = 0;
    *(_WORD *)(v130 + 40) = 0;
    *(_QWORD *)(v130 + 48) = 0;
    *(_WORD *)(v130 + 56) = 0;
    *(_QWORD *)(v130 + 64) = 0;
    *(_WORD *)(v130 + 72) = 0;
    *(_QWORD *)(v130 + 80) = 0;
    *(_WORD *)(v130 + 88) = 0;
    *(_QWORD *)(v130 + 96) = 0;
    *(_WORD *)(v130 + 104) = 0;
    *(_QWORD *)(v130 + 112) = 0;
    *(_WORD *)(v130 + 120) = 0;
    *v127 = v130;
    *(_DWORD *)(v130 - 4) = 8;
    *(_DWORD *)(*v127 - 8) = 7;
    *(_DWORD *)(*v127 - 16) = 0;
    *(_DWORD *)(*v127 - 12) = 0;
    v129 = *v127;
    if (*v127)
LABEL_108:
      v131 = *(_DWORD *)(v129 - 8);
    else
      v131 = 0;
    v132 = *((_DWORD *)v128 + 4);
    if ((v132 & 0x20) != 0)
      v132 = *((_DWORD *)v128 + 8);
    v133 = v131 & (v132 >> 8);
    v134 = v129 + 16 * v133;
    v135 = *(WTF::StringImpl **)v134;
    if (*(_QWORD *)v134)
    {
      v144 = 0;
      v145 = 1;
      while (v135 != v128)
      {
        if (v135 == (WTF::StringImpl *)-1)
          v144 = v134;
        v133 = (v133 + v145) & v131;
        v134 = v129 + 16 * v133;
        v135 = *(WTF::StringImpl **)v134;
        ++v145;
        if (!*(_QWORD *)v134)
        {
          if (v144)
          {
            *(_QWORD *)v144 = 0;
            *(_WORD *)(v144 + 8) = 0;
            --*(_DWORD *)(*v127 - 16);
            v134 = v144;
          }
          if (v128)
            goto LABEL_112;
          goto LABEL_113;
        }
      }
      goto LABEL_119;
    }
LABEL_112:
    *(_DWORD *)v128 += 2;
LABEL_113:
    *(_QWORD *)v134 = v128;
    *(_WORD *)(v134 + 8) = 0;
    v136 = *v127;
    if (*v127)
      v137 = *(_DWORD *)(v136 - 12) + 1;
    else
      v137 = 1;
    *(_DWORD *)(v136 - 12) = v137;
    v138 = *v127;
    if (*v127)
      v139 = *(_DWORD *)(v138 - 12);
    else
      v139 = 0;
    v140 = (*(_DWORD *)(v138 - 16) + v139);
    v141 = *(unsigned int *)(v138 - 4);
    if (v141 > 0x400)
    {
      if (v141 > 2 * v140)
        goto LABEL_119;
    }
    else if (3 * v141 > 4 * v140)
    {
LABEL_119:
      if (v128)
      {
        if (*(_DWORD *)v128 == 2)
        {
          WTF::StringImpl::~StringImpl(v128, v52, v53, v24, v25, v26, v27, v28);
          WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
        }
        else
        {
          *(_DWORD *)v128 -= 2;
        }
      }
      *(_WORD *)(v134 + 8) &= ~4u;
      v142 = *(_QWORD *)(*v125 + 41952);
      if (*(WTF::StringImpl **)(v142 + 1248) != *v126)
      {
        v37 = a1 + 7316;
        if (*(WTF::StringImpl **)(v142 + 880) != *v126)
          goto LABEL_28;
      }
      v143 = *(_DWORD *)(a1 + 12);
      if (!v143)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC1F60);
      }
      v37 = a1 + 7316;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v143 - 1) + 9) & 1) == 0)
        goto LABEL_28;
      if (!*(_QWORD *)(a1 + 7360))
      {
        *(_QWORD *)&v324 = **(_QWORD **)a8;
        v335[0] = JSC::stringForFunctionMode();
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[18],char const*,char const(&)[21]>(a1, (uint64_t *)&v324, v335);
      }
LABEL_257:
      v55 = 0;
      v37 = v63;
      goto LABEL_29;
    }
    v134 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(v125 + 15, (WTF::StringImpl **)v134);
    goto LABEL_119;
  }
LABEL_28:
  v348 = *v39;
  *(_DWORD *)(a8 + 32) = *(_DWORD *)(a1 + 7400);
  v54 = *(_DWORD *)(a1 + 7408);
  v347 = v54 - *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a8 + 40) = v347;
  v349 = v54;
  *(_DWORD *)(a8 + 24) = v54;
  v55 = 1;
  if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(JSC::ASTBuilder &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::ASTBuilder> &,JSC::Parser<JSC::Lexer<char16_t>>::FunctionDefinitionType,std::optional<int>)::{lambda(void)#1}::operator()(v345) & 1) != 0)
    goto LABEL_29;
  v58 = *v309;
  *v309 = ((1 << v355) & 0x38F80) == 0;
  JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionParameters<JSC::SyntaxChecker,JSC::ParserFunctionInfo<JSC::ASTBuilder>>(a1, (uint64_t)v344, a8, v24, v25, v26, v27, v28);
  v61 = *(_QWORD *)(a1 + 7360);
  *v309 = v58;
  if (v61)
    goto LABEL_32;
  v64 = *v36;
  if (*v36)
  {
    if (v64 != 20 && (v64 & 0x100000) == 0)
    {
      *(_QWORD *)&v324 = JSC::stringForFunctionMode();
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43],char const*,char const(&)[6]>(a1, (const char **)&v324);
      goto LABEL_32;
    }
    goto LABEL_43;
  }
  if ((a10 & 0xFF00000000) != 0 && *(_DWORD *)(a1 + 7448) != (_DWORD)a10)
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[80]>(a1);
    goto LABEL_32;
  }
  v65 = 2;
LABEL_47:
  v346 = v65;
  *(_QWORD *)(a1 + 7328) = v41;
  v343 = *(_OWORD *)(a1 + 7296);
  v66 = *(_OWORD *)(v37 + 16);
  *(_OWORD *)v341 = *(_OWORD *)v37;
  *(_OWORD *)&v341[16] = v66;
  v311 = v37;
  v342 = *(_DWORD *)(v37 + 32);
  v67 = *(_DWORD *)(a2 + 1052);
  v336 = 0x800000000;
  *(_QWORD *)&v68 = -1;
  *((_QWORD *)&v68 + 1) = -1;
  v337 = v68;
  v338 = v68;
  v339 = v68;
  v340 = v68;
  if (*(_DWORD *)(v351 + 12) <= v352)
  {
    __break(0xC471u);
    JUMPOUT(0x197EC1ED0);
  }
  v69 = *(_QWORD *)v351 + 720 * v352;
  v70 = *(_DWORD *)(v69 + 180);
  if (v70)
  {
    v71 = *(_QWORD *)(v69 + 168);
    v72 = v71 + 72 * v70;
    while (1)
    {
      v73 = *(unsigned int *)(v71 + 4);
      v74 = (_QWORD *)(v71 + 8);
      if ((_DWORD)v73 != 8)
        v74 = (_QWORD *)*v74;
      v75 = 0;
      while ((_DWORD)v73 != v75)
      {
        v76 = v75;
        v77 = v74[v75++];
        if (v77 != -1)
        {
          v78 = v76;
          goto LABEL_56;
        }
      }
      v78 = *(unsigned int *)(v71 + 4);
LABEL_56:
      if ((_DWORD)v73 != (_DWORD)v78)
        break;
LABEL_57:
      v71 += 72;
      if (v71 == v72)
        goto LABEL_60;
    }
    v194 = v78 | (v73 << 32);
    while (1)
    {
      if (*(_DWORD *)(v351 + 12) <= v352)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC1F00);
      }
      v308 = v194;
      v195 = (WTF::StringImpl *)v74[v194];
      v196 = *(_QWORD *)v351 + 720 * v352;
      if (v195)
      {
        *(_DWORD *)v195 += 2;
        hasDeclaredParameter = JSC::Scope::hasDeclaredParameter(v196, v195, v60, v24, v25, v26, v27, v28);
        v198 = (uint64_t)v195;
        if (*(_DWORD *)v195 == 2)
        {
          v306 = hasDeclaredParameter;
          WTF::StringImpl::~StringImpl(v195, v59, v60, v24, v25, v26, v27, v28);
          WTF::fastFree((unint64_t)v195, v239, v240, v241, v242, v243, v244, v245);
          v198 = (uint64_t)v195;
          if ((v306 & 1) != 0)
            goto LABEL_197;
        }
        else
        {
          *(_DWORD *)v195 -= 2;
          if ((hasDeclaredParameter & 1) != 0)
            goto LABEL_197;
        }
      }
      else
      {
        v302 = JSC::Scope::hasDeclaredParameter(v196, 0, v60, v24, v25, v26, v27, v28);
        v198 = 0;
        if ((v302 & 1) != 0)
          goto LABEL_197;
      }
      v199 = (const char *)v198;
      WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>::add((uint64_t)&v324, (unsigned int *)&v336, v198);
      if (*(_DWORD *)(a1 + 12) <= v312)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC1F08);
      }
      v205 = *(_QWORD *)a1;
      v335[0] = v199;
      WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v205 + 720 * v312 + 696), (uint64_t *)v335, v200, v201, v202, v203, v204, (uint64_t)&v324);
LABEL_197:
      if (HIDWORD(v308) <= (v78 + 1))
        v206 = (v78 + 1);
      else
        v206 = HIDWORD(v308);
      while ((_DWORD)v206 - 1 != (_DWORD)v78)
      {
        v78 = (v78 + 1);
        if (v74[v78] != -1)
        {
          LODWORD(v206) = v78;
          goto LABEL_203;
        }
      }
      v78 = v206;
LABEL_203:
      v194 = v78 | v308 & 0xFFFFFFFF00000000;
      LODWORD(v78) = v206;
      if ((_DWORD)v73 == (_DWORD)v206)
        goto LABEL_57;
    }
  }
LABEL_60:
  v335[0] = (const char *)a2;
  v335[1] = (const char *)v344;
  v335[2] = (const char *)&v348;
  v335[3] = (const char *)&v347;
  v335[4] = (const char *)&v356;
  v335[5] = (const char *)&v350;
  v335[6] = (const char *)&v349;
  v335[7] = &v358;
  v335[8] = (const char *)&v357;
  v335[9] = (const char *)&v346;
  v79 = a8;
  v335[10] = (const char *)a8;
  v335[11] = (const char *)a1;
  if (((0x70E04u >> v355) & 1) != 0)
  {
    v246 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
    *(_QWORD *)&v324 = v246;
    *((_QWORD *)&v324 + 1) = v247;
    v325 = a1;
    v248 = 1 << v355;
    if (v355 == 11)
      v249 = 8;
    else
      v249 = 7;
    if ((v248 & 0x30000) != 0)
      v249 = 15;
    if ((v248 & 0x30E00) == 0)
      v249 = 1;
    if (*(_DWORD *)(v246 + 12) <= v247)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC1F38);
    }
    JSC::Scope::setSourceParseMode(*(_QWORD *)v246 + 720 * v247, v249);
    JSC::Parser<JSC::Lexer<unsigned char>>::resetImplementationVisibilityIfNeeded((uint64_t *)a1);
    v257 = DWORD2(v324);
    if (*(_DWORD *)(v324 + 12) <= DWORD2(v324))
    {
      __break(0xC471u);
      JUMPOUT(0x197EC1F40);
    }
    v258 = *(_QWORD *)v324;
    v259 = *(_QWORD *)v324 + 720 * DWORD2(v324);
    *(_BYTE *)(v259 + 15) = 0;
    *(_DWORD *)(v259 + 20) = v357;
    if (*(_DWORD *)(v351 + 12) <= v352)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC1F48);
    }
    if ((*(_BYTE *)(*(_QWORD *)v351 + 720 * v352 + 13) & 4) != 0)
      *(_DWORD *)(v258 + 720 * v257 + 10) = *(_DWORD *)(v258 + 720 * v257 + 10) & 0xFB7FFFFF | 0x4000000;
    *(_QWORD *)(a8 + 8) = JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(JSC::ASTBuilder &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::ASTBuilder> &,JSC::Parser<JSC::Lexer<char16_t>>::FunctionDefinitionType,std::optional<int>)::{lambda(void)#2}::operator()((uint64_t)v335, v250, v251, v252, v253, v254, v255, v256);
    if (*(_DWORD *)(v324 + 12) <= DWORD2(v324))
    {
      __break(0xC471u);
      JUMPOUT(0x197EC1F50);
    }
    if ((*(_BYTE *)(*(_QWORD *)v324 + 720 * DWORD2(v324) + 9) & 1) != 0)
    {
      if (*(_DWORD *)(v351 + 12) <= v352)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC1F58);
      }
      *(_BYTE *)(*(_QWORD *)v351 + 720 * v352 + 9) |= 1u;
    }
    v325 = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v334, (uint64_t *)a1, 1, v260, v261, v262, v263, v264);
    std::tuple<JSC::VariableEnvironment,WTF::Vector<JSC::FunctionMetadataNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~tuple((uint64_t)v334, v265, v266, v267, v268, v269, v270, v271);
    JSC::Parser<JSC::Lexer<char16_t>>::AutoPopScopeRef::~AutoPopScopeRef((uint64_t)&v324, v272, v273, v274, v275, v276, v277, v278);
    v37 = v311;
    v79 = a8;
  }
  else
  {
    *(_QWORD *)(a8 + 8) = JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(JSC::ASTBuilder &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::ASTBuilder> &,JSC::Parser<JSC::Lexer<char16_t>>::FunctionDefinitionType,std::optional<int>)::{lambda(void)#2}::operator()((uint64_t)v335, (uint64_t)v59, v60, v24, v25, v26, v27, v28);
    v37 = v311;
  }
  v82 = (__int128 *)(a1 + 7296);
  *(_OWORD *)(a1 + 7296) = v343;
  *(_DWORD *)(a1 + 7312) = v67;
  *(_OWORD *)v37 = *(_OWORD *)v341;
  *(_OWORD *)(v37 + 14) = *(_OWORD *)&v341[14];
  *(_DWORD *)(a2 + 1052) = v67;
  v83 = *(_QWORD *)(v79 + 8);
  if (!v83)
  {
    if (*v36 == 20 || (*v36 & 0x100000) != 0)
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      *(_QWORD *)&v324 = JSC::stringForFunctionMode();
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[31],char const*>(a1, 1, "Cannot parse the body of this ", (const char **)&v324);
    }
    goto LABEL_235;
  }
  v84 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v83 + 28) = (*(_QWORD *)(v84 + 80) - *(_QWORD *)(v84 + 88)) >> 1;
  if (*(_DWORD *)(v351 + 12) <= v352)
  {
    __break(0xC471u);
    JUMPOUT(0x197EC1ED8);
  }
  if (a3 == 2 || (*(_BYTE *)(*(_QWORD *)v351 + 720 * v352 + 9) & 1) == 0)
    goto LABEL_69;
  if (((1 << v355) & 0x100067) == 0 && ((1 << v355) & 0x30E00) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197EC1AD4);
  }
  v85 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
  v86 = **(_QWORD **)v79;
  if (*(_QWORD *)(v85 + 880) == v86)
  {
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_235;
    *(_QWORD *)&v324 = *(_QWORD *)(v85 + 880);
LABEL_234:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[46]>(a1, (uint64_t *)&v324);
    goto LABEL_235;
  }
  if (*(_QWORD *)(v85 + 1248) == v86)
  {
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_235;
    *(_QWORD *)&v324 = **(_QWORD **)v79;
    goto LABEL_234;
  }
LABEL_69:
  v87 = *(_QWORD *)(a1 + 7400);
  v88 = *(_QWORD *)(a1 + 7408);
  *(_DWORD *)(v79 + 28) = *(_DWORD *)(a1 + 7380);
  v89 = v346;
  if (v346)
  {
    v90 = HIDWORD(v87);
    LODWORD(v324) = v348;
    *(int32x2_t *)((char *)&v324 + 4) = vrev64_s32(*(int32x2_t *)((char *)&v348 + 4));
    v91 = *(_QWORD *)(a1 + 7520);
    if (v91)
    {
      JSC::DebuggerPausePositions::appendEntry(v91, (uint64_t)&v324);
      v238 = *(_QWORD *)(a1 + 7520);
      *(_QWORD *)&v324 = __PAIR64__(v88, v87);
      DWORD2(v324) = HIDWORD(v87);
      if (v238)
        JSC::DebuggerPausePositions::appendLeave(v238, (uint64_t)&v324);
    }
    v89 = v346;
    LODWORD(v92) = *(_DWORD *)(v79 + 28);
  }
  else
  {
    LODWORD(v87) = *(_DWORD *)(v84 + 132);
    LODWORD(v90) = *(_DWORD *)(v84 + 136);
    v88 = *(_QWORD *)(v84 + 140);
    v92 = HIDWORD(v88);
    *(_DWORD *)(v79 + 28) = HIDWORD(v88);
  }
  if (*(_QWORD *)(a1 + 7464) && (v89 != 2 ? (v93 = 8) : (v93 = 16), (int)v92 - *(_DWORD *)(v79 + 24) > v93))
  {
    LOWORD(v326) = 0;
    v327 = (WTF *)v329;
    v328 = 8;
    v330 = 1;
    v94 = v333 & 0xE0;
    v333 &= 0xE0u;
    LODWORD(v324) = v87;
    *(_QWORD *)((char *)&v324 + 4) = v88;
    HIDWORD(v324) = v90;
    v325 = __PAIR64__(*(_DWORD *)(v79 + 16), v92);
    v331 = v358;
    v332 = v357;
    if (!v89)
    {
      v333 = v94 | 0x10;
      v330 = *v36;
    }
    if (*(_DWORD *)(v351 + 12) <= v352)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC1EF0);
    }
    JSC::Scope::fillParametersForSourceProviderCache(*(_QWORD *)v351 + 720 * v352, (uint64_t)&v324, (uint64_t)&v336, v24, v25, v26, v27, v28);
    JSC::SourceProviderCacheItem::create((uint64_t *)&v359, (unsigned int *)&v324);
    v97 = (unsigned int *)v359;
    v98 = v327;
    if (v329 != (_BYTE *)v327 && v327)
    {
      v327 = 0;
      LODWORD(v328) = 0;
      WTF::fastFree((unint64_t)v98, v95, v96, v24, v25, v26, v27, v28);
    }
  }
  else
  {
    v97 = 0;
  }
  if (*(_DWORD *)(v351 + 12) <= v352)
  {
    __break(0xC471u);
    JUMPOUT(0x197EC1EE0);
  }
  v353 = 0;
  JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v320, (uint64_t *)a1, 1, v24, v25, v26, v27, v28);
  v99 = v322;
  if (v322)
  {
    v322 = 0;
    v323 = 0;
    WTF::fastFree((unint64_t)v99, v80, v81, v24, v25, v26, v27, v28);
  }
  v100 = v321;
  v321 = 0;
  if (v100)
  {
    v101 = *(WTF::StringImpl ***)v100;
    if (*(_QWORD *)v100)
    {
      v182 = *((unsigned int *)v101 - 1);
      if ((_DWORD)v182)
      {
        v183 = *(WTF::StringImpl ***)v100;
        do
        {
          v184 = *v183;
          if (*v183 != (WTF::StringImpl *)-1)
          {
            *v183 = 0;
            if (v184)
            {
              if (*(_DWORD *)v184 == 2)
              {
                WTF::StringImpl::~StringImpl(v184, (WTF::AtomStringImpl *)v80, v81, v24, v25, v26, v27, v28);
                WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
              }
              else
              {
                *(_DWORD *)v184 -= 2;
              }
            }
          }
          v183 += 2;
          --v182;
        }
        while (v182);
      }
      WTF::fastFree((unint64_t)(v101 - 2), v80, v81, v24, v25, v26, v27, v28);
    }
    WTF::fastFree((unint64_t)v100, v80, v81, v24, v25, v26, v27, v28);
  }
  v102 = v320;
  if (v320)
  {
    v146 = *((unsigned int *)v320 - 1);
    if ((_DWORD)v146)
    {
      v147 = v320;
      do
      {
        v148 = *v147;
        if (*v147 != (WTF::StringImpl *)-1)
        {
          *v147 = 0;
          if (v148)
          {
            if (*(_DWORD *)v148 == 2)
            {
              WTF::StringImpl::~StringImpl(v148, (WTF::AtomStringImpl *)v80, v81, v24, v25, v26, v27, v28);
              WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
            }
            else
            {
              *(_DWORD *)v148 -= 2;
            }
          }
        }
        v147 += 2;
        --v146;
      }
      while (v146);
    }
    WTF::fastFree((unint64_t)(v102 - 2), v80, v81, v24, v25, v26, v27, v28);
  }
  if (!v346)
  {
    v359 = *v82;
    v317 = *(_DWORD *)(a1 + 7316);
    v325 = *(_QWORD *)(a1 + 7336);
    v324 = *(_OWORD *)(a1 + 7320);
    v313 = *v309;
    v305 = *(_DWORD *)(a2 + 1052);
    v307 = v309[1];
    v165 = *(int *)(a1 + 7408);
    v166 = *(int *)(a1 + 7404);
    v167 = *(int **)(a1 + 7288);
    v168 = *v167;
    v304 = v167[1];
    v169 = *((_BYTE *)v167 + 56);
    *((_BYTE *)v167 + 150) = 0;
    v170 = (WTF::StringImpl *)*((_QWORD *)v167 + 19);
    *((_QWORD *)v167 + 19) = 0;
    if (v170)
    {
      if (*(_DWORD *)v170 == 2)
      {
        WTF::StringImpl::~StringImpl(v170, (WTF::AtomStringImpl *)v80, v81, v24, v25, v26, v27, v28);
        WTF::fastFree(v207, v208, v209, v210, v211, v212, v213, v214);
      }
      else
      {
        *(_DWORD *)v170 -= 2;
      }
    }
    v171 = *((_QWORD *)v167 + 11);
    v172 = *((_QWORD *)v167 + 12);
    v173 = (__int16 *)(v171 + 2 * v165);
    *((_QWORD *)v167 + 10) = v173;
    *((_QWORD *)v167 + 14) = v171 + 2 * v166;
    v167[5] = 0;
    v167[9] = 0;
    if ((unint64_t)v173 >= v172)
      v174 = 0;
    else
      v174 = *v173;
    v79 = a8;
    *((_WORD *)v167 + 88) = v174;
    v175 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v175 = v168;
    *(_BYTE *)(v175 + 56) = v169;
    v176 = *(_DWORD *)(a1 + 7400);
    v177 = *(_DWORD *)(a1 + 7412);
    v178 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v176;
    *(_DWORD *)(a1 + 7448) = v177;
    *(_DWORD *)(a1 + 7452) = v178;
    *(_DWORD *)(v175 + 4) = v176;
    v179 = *(_DWORD *)(a1 + 12);
    if (!v179)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC1F10);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v175, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v179 - 1) + 9) & 1, v25, v26, v27, v28);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v304;
    *v82 = v359;
    *(_DWORD *)(a1 + 7312) = v305;
    *(_DWORD *)(a1 + 7316) = v317;
    *(_OWORD *)(a1 + 7320) = v324;
    *(_QWORD *)(a1 + 7336) = v325;
    v37 = v311;
    *v309 = v313;
    v309[1] = v307;
    *(_DWORD *)(a2 + 1052) = v305;
    v180 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (v180)
    {
      if (*(_DWORD *)v180 == 2)
      {
        WTF::StringImpl::~StringImpl(v180, (WTF::AtomStringImpl *)v80, v81, v24, v25, v26, v27, v28);
        WTF::fastFree(v215, v216, v217, v218, v219, v220, v221, v222);
      }
      else
      {
        *(_DWORD *)v180 -= 2;
      }
    }
    goto LABEL_94;
  }
  v103 = *v36;
  if (*v36 == 1)
  {
    v104 = *(_DWORD *)(a1 + 7400);
    v105 = *(_DWORD *)(a1 + 7412);
    v106 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v104;
    *(_DWORD *)(a1 + 7448) = v105;
    *(_DWORD *)(a1 + 7452) = v106;
    v107 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v107 + 4) = v104;
    v108 = *(_DWORD *)(a1 + 12);
    if (!v108)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC1EE8);
    }
    v109 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v108 - 1) + 9) & 1;
    *(_BYTE *)(v107 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v107, a1 + 7368, 0, v109, v25, v26, v27, v28);
LABEL_94:
    if (v97)
    {
      v110 = *(_QWORD *)(a1 + 7464);
      v111 = (WTF::AtomStringImpl *)*(unsigned int *)(v79 + 24);
      v319 = (WTF *)v97;
      JSC::SourceProviderCache::add(v110, v111, (uint64_t *)&v319, v24, v25, v26, v27, v28);
      v112 = v319;
      if (v319)
      {
        v113 = *((unsigned int *)v319 + 6);
        if ((_DWORD)v113)
        {
          v114 = 0;
          v115 = (unsigned int *)((char *)v319 + 33);
          do
          {
            v116 = (WTF::StringImpl *)(*v115 | ((unint64_t)*((unsigned __int8 *)v115 + 4) << 32));
            if (*(_DWORD *)v116 == 2)
            {
              WTF::StringImpl::~StringImpl(v116, (WTF::AtomStringImpl *)v80, v81, v24, v25, v26, v27, v28);
              WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
              v113 = *((unsigned int *)v112 + 6);
            }
            else
            {
              *(_DWORD *)v116 -= 2;
            }
            ++v114;
            v115 = (unsigned int *)((char *)v115 + 5);
          }
          while (v114 < v113);
        }
        WTF::fastFree((unint64_t)v112, v80, v81, v24, v25, v26, v27, v28);
      }
    }
    *(_DWORD *)(v79 + 36) = *(_DWORD *)(a1 + 7444);
    v55 = 1;
    goto LABEL_135;
  }
  if (v103 == 20 || (v103 & 0x100000) != 0)
  {
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
  }
  else if (!*(_QWORD *)(a1 + 7360))
  {
    *(_QWORD *)&v324 = JSC::stringForFunctionMode();
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[32],char const*,char const(&)[6]>(a1, (const char **)&v324);
  }
  if (v97)
  {
    v281 = v97[6];
    if ((_DWORD)v281)
    {
      v282 = 0;
      v283 = (unsigned int *)((char *)v97 + 33);
      do
      {
        v284 = (WTF::StringImpl *)(*v283 | ((unint64_t)*((unsigned __int8 *)v283 + 4) << 32));
        if (*(_DWORD *)v284 == 2)
        {
          WTF::StringImpl::~StringImpl(v284, (WTF::AtomStringImpl *)v80, v81, v24, v25, v26, v27, v28);
          WTF::fastFree(v285, v286, v287, v288, v289, v290, v291, v292);
          v281 = v97[6];
        }
        else
        {
          *(_DWORD *)v284 -= 2;
        }
        ++v282;
        v283 = (unsigned int *)((char *)v283 + 5);
      }
      while (v282 < v281);
    }
    WTF::fastFree((unint64_t)v97, v80, v81, v24, v25, v26, v27, v28);
  }
LABEL_235:
  v55 = 0;
  v37 = v311;
LABEL_135:
  if (HIDWORD(v336) != 8)
    WTF::fastFree(v337, v80, v81, v24, v25, v26, v27, v28);
LABEL_29:
  *(_DWORD *)v37 = v314;
  v56 = v353;
  if (v353)
  {
    v353 = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v324, v56, 0, v24, v25, v26, v27, v28);
    v300 = v326;
    if (v326)
    {
      v326 = 0;
      LODWORD(v327) = 0;
      WTF::fastFree((unint64_t)v300, v293, v294, v295, v296, v297, v298, v299);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v324, (WTF::AtomStringImpl *)v293, v294, v295, v296, v297, v298, v299);
  }
  return v55;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(JSC::ASTBuilder &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::ASTBuilder> &,JSC::Parser<JSC::Lexer<char16_t>>::FunctionDefinitionType,std::optional<int>)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  int v21;
  unsigned int v22;
  __int16 v23;
  int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  unint64_t v73;
  __int16 *v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  _QWORD *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  __int16 v113;
  __int16 v114;
  __int16 v115;
  __int16 v116;
  int v117;
  uint64_t v118;
  char v119;
  char v120;
  int v121;
  int v122;
  int v123;
  _BYTE v124[24];
  WTF *v125;
  int v126;
  uint64_t v127;

  if ((_BYTE)dword_1ECF4C6C3)
  {
    v2 = *a1;
    if (!*(_QWORD *)(*a1 + 7520))
    {
      v3 = *(_QWORD *)(v2 + 7464);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = *(_DWORD *)a1[1];
          v6 = *(_DWORD *)(v4 - 8);
          v7 = 9 * ((v5 + ~(v5 << 15)) ^ ((v5 + ~(v5 << 15)) >> 10));
          v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
          v9 = v6 & (v8 ^ HIWORD(v8));
          v10 = *(_DWORD *)(v4 + 16 * v9);
          if (v10 != v5)
          {
            v11 = 1;
            while (v10 != 0x7FFFFFFF)
            {
              v9 = ((_DWORD)v9 + v11) & v6;
              v10 = *(_DWORD *)(v4 + 16 * v9);
              ++v11;
              if (v10 == v5)
                goto LABEL_9;
            }
            return 0;
          }
LABEL_9:
          v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
          if (v12)
          {
            v13 = *(_DWORD *)(v12 + 28);
            v15 = *(_QWORD *)(v12 + 8);
            v14 = *(_QWORD *)(v12 + 16);
            v16 = *(_QWORD *)v12 >> 33;
            v17 = HIDWORD(v14) & 0x7FFFFFFF;
            v18 = (*(_QWORD *)(*(_QWORD *)(v2 + 7288) + 112) - *(_QWORD *)(*(_QWORD *)(v2 + 7288) + 88)) >> 1;
            v121 = v18;
            if ((_DWORD)v16 == *(_DWORD *)(a1[2] + 32))
              v19 = v18;
            else
              v19 = HIDWORD(v14) & 0x7FFFFFFF;
            v20 = *(_BYTE *)a1[3];
            if (((1 << v20) & 0x840) != 0)
              v21 = (v14 & 0x8000000000000000) == 0;
            else
              v21 = 2;
            v22 = v13 >> 30;
            if ((v15 & 0x100000000) != 0)
            {
              v23 = 16;
            }
            else
            {
              if (v22)
              {
                if (v22 == 1)
                  goto LABEL_19;
              }
              else if (((1 << v20) & 0x60400) == 0)
              {
LABEL_19:
                v23 = 16 * ((v13 & 0x10000000 | *(_QWORD *)(v12 + 16) & 1 | *(_QWORD *)v12 & 0x100000000) == 0);
                goto LABEL_20;
              }
              v23 = 0;
            }
LABEL_20:
            v24 = *(_DWORD *)(v2 + 12);
            if (v24)
            {
              v122 = *(_DWORD *)(a1[2] + 32);
              v123 = v21;
              v25 = v15 >> 1;
              v26 = *(_BYTE *)(*(_QWORD *)v2 + 720 * (v24 - 1) + 8);
              v27 = a1[5];
              v28 = *(_DWORD *)a1[6];
              v29 = *(_DWORD *)a1[7];
              v30 = *(_DWORD *)a1[8];
              v31 = v14 >> 1;
              v32 = *(uint64_t **)(a1[4] + 8);
              v33 = *v32;
              if ((unint64_t)(v32[1] - *v32) <= 0x8F)
              {
                v101 = *(_QWORD *)v12 >> 33;
                v118 = HIDWORD(v14) & 0x7FFFFFFF;
                v120 = *(_BYTE *)a1[3];
                v114 = v23;
                v116 = v22;
                v110 = v14 >> 1;
                v112 = a1[5];
                v106 = *(_DWORD *)a1[8];
                v108 = *(_DWORD *)a1[7];
                v104 = *(_DWORD *)a1[6];
                JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a1[4] + 8));
                v28 = v104;
                v30 = v106;
                v29 = v108;
                v31 = v110;
                v27 = v112;
                v23 = v114;
                LOWORD(v22) = v116;
                LODWORD(v17) = v118;
                v20 = v120;
                LODWORD(v16) = v101;
                v21 = v123;
                v33 = *v32;
              }
              v34 = v25 - v19;
              *v32 = v33 + 144;
              v127 = v33;
              v35 = v32 + 5;
              v36 = *((unsigned int *)v32 + 13);
              if ((_DWORD)v36 == *((_DWORD *)v32 + 12))
              {
                v117 = v17;
                v119 = v20;
                v113 = v23;
                v115 = v22;
                v102 = v16;
                v109 = v31;
                v111 = v27;
                v105 = v30;
                v107 = v29;
                v103 = v28;
                v86 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, (unint64_t)&v127);
                v28 = v103;
                v30 = v105;
                v29 = v107;
                v31 = v109;
                v27 = v111;
                v23 = v113;
                LOWORD(v22) = v115;
                LODWORD(v17) = v117;
                v20 = v119;
                LODWORD(v16) = v102;
                v21 = v123;
                v36 = *((unsigned int *)v32 + 13);
                *(_QWORD *)(v32[5] + 8 * v36) = *v86;
              }
              else
              {
                *(_QWORD *)(*v35 + 8 * v36) = v33;
              }
              *((_DWORD *)v32 + 13) = v36 + 1;
              *(_DWORD *)(v33 + 16) = v16;
              *(_DWORD *)(v33 + 20) = v25;
              *(_DWORD *)(v33 + 24) = v17;
              *(_DWORD *)(v33 + 28) = -1;
              *(_BYTE *)(v33 + 32) = 0;
              *(_QWORD *)v33 = &off_1E3596470;
              *(_QWORD *)(v33 + 8) = &unk_1E3596490;
              *(_WORD *)(v33 + 33) = v23 | ((v21 == 0) << 8) | v26 & 3 | (4 * (v15 & 1)) | (32 * v22) | *(_WORD *)(v33 + 33) & 0xF800;
              *(_BYTE *)(v33 + 35) = v20;
              *(_QWORD *)(v33 + 40) = 0;
              *(_QWORD *)(v33 + 48) = 0;
              *(_DWORD *)(v33 + 56) = v28;
              *(_DWORD *)(v33 + 60) = v34;
              *(_DWORD *)(v33 + 64) = v29;
              *(_DWORD *)(v33 + 68) = v30;
              *(_DWORD *)(v33 + 72) = v5;
              *(_QWORD *)(v33 + 80) = 0;
              *(_QWORD *)(v33 + 88) = 0;
              *(_QWORD *)(v33 + 96) = -1;
              *(_QWORD *)(v33 + 104) = 0;
              *(_QWORD *)(v33 + 112) = 0;
              *(_QWORD *)(v33 + 120) = -1;
              *(_DWORD *)(v33 + 128) = *(_DWORD *)(v27 + 8);
              *(_DWORD *)(v33 + 132) = v31;
              *(_DWORD *)(v33 + 136) = 0;
              v37 = a1[2];
              *(_QWORD *)(v37 + 8) = v33;
              *(_DWORD *)(v37 + 28) = *(_DWORD *)v12 >> 1;
              *(_DWORD *)(v37 + 16) = *(_DWORD *)(v12 + 16) >> 1;
              v38 = (uint64_t *)a1[9];
              v39 = *v38;
              v40 = *((_DWORD *)v38 + 2);
              if (*(_DWORD *)(v39 + 12) <= v40)
              {
                __break(0xC471u);
                JUMPOUT(0x197EC2544);
              }
              v41 = v16;
              JSC::Scope::restoreFromSourceProviderCache(*(_QWORD *)v39 + 720 * v40, v12);
              *(_QWORD *)(a1[9] + 16) = 0;
              JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v124, (uint64_t *)v2, 1, v42, v43, v44, v45, v46);
              v54 = v125;
              if (v125)
              {
                v125 = 0;
                v126 = 0;
                WTF::fastFree((unint64_t)v54, v47, v48, v49, v50, v51, v52, v53);
              }
              JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v124, (WTF::AtomStringImpl *)v47, v48, v49, v50, v51, v52, v53);
              v63 = *(_QWORD *)(v12 + 8);
              v62 = *(_QWORD *)(v12 + 16);
              v64 = *(_QWORD *)v12;
              if ((v62 & 0x8000000000000000) != 0)
                v65 = *(_DWORD *)(v12 + 28) & 0xFFFFFF;
              else
                v65 = 1;
              v66 = v123;
              v67 = v41;
              *(_QWORD *)(v2 + 7372) = 0;
              *(_DWORD *)(v2 + 7368) = v65;
              *(_DWORD *)(v2 + 7380) = v63 >> 1;
              v68 = v63 >> 33;
              *(_QWORD *)(v2 + 7392) = 0;
              *(_QWORD *)(v2 + 7384) = 0;
              v69 = HIDWORD(v62) & 0x7FFFFFFF;
              *(_DWORD *)(v2 + 7400) = v64 >> 33;
              *(_DWORD *)(v2 + 7404) = v69;
              *(_DWORD *)(v2 + 7408) = v63 >> 1;
              *(_DWORD *)(v2 + 7412) = v63 >> 33;
              *(_QWORD *)(v2 + 7416) = -1;
              *(_QWORD *)(v2 + 7424) = -1;
              *(_QWORD *)(v2 + 7432) = -1;
              if (v67 == v122)
              {
                LODWORD(v69) = v121;
                *(_DWORD *)(v2 + 7404) = v121;
              }
              v70 = *(_QWORD *)(v2 + 7288);
              *(_BYTE *)(v70 + 150) = 0;
              v71 = *(WTF::StringImpl **)(v70 + 152);
              *(_QWORD *)(v70 + 152) = 0;
              if (v71)
              {
                if (*(_DWORD *)v71 == 2)
                {
                  WTF::StringImpl::~StringImpl(v71, v55, v56, v57, v58, v59, v60, v61);
                  WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
                  v66 = v123;
                }
                else
                {
                  *(_DWORD *)v71 -= 2;
                }
              }
              v72 = *(_QWORD *)(v70 + 88);
              v73 = *(_QWORD *)(v70 + 96);
              v74 = (__int16 *)(v72 + 2 * v68);
              *(_QWORD *)(v70 + 80) = v74;
              *(_QWORD *)(v70 + 112) = v72 + 2 * (int)v69;
              v75 = v2 + 7368;
              *(_DWORD *)(v70 + 20) = 0;
              *(_DWORD *)(v70 + 36) = 0;
              if ((unint64_t)v74 >= v73)
                v76 = 0;
              else
                v76 = *v74;
              *(_WORD *)(v70 + 176) = v76;
              v77 = *(_QWORD *)(v2 + 7288);
              v78 = *(_DWORD *)(v2 + 7400);
              *(_DWORD *)v77 = v78;
              if ((v66 - 1) < 2)
              {
                v79 = *(_QWORD *)(a1[2] + 8);
                if (v79)
                  v80 = v79 + 8;
                else
                  v80 = 0;
                *(_DWORD *)(v80 + 20) = (*(_QWORD *)(v77 + 80) - *(_QWORD *)(v77 + 88)) >> 1;
                v81 = *(_DWORD *)(v2 + 7412);
                v82 = *(_DWORD *)(v2 + 7404);
                *(_DWORD *)(v2 + 7444) = v78;
                *(_DWORD *)(v2 + 7448) = v81;
                *(_DWORD *)(v2 + 7452) = v82;
                *(_DWORD *)(v77 + 4) = v78;
                v83 = *(_DWORD *)(v2 + 12);
                if (!v83)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EC254CLL);
                }
                v84 = *(_BYTE *)(*(_QWORD *)v2 + 720 * (v83 - 1) + 9) & 1;
                *(_BYTE *)(v77 + 56) = 0;
                *(_DWORD *)(v2 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v77, v75, 0, v84, v58, v59, v60, v61);
                goto LABEL_43;
              }
              if (v66)
              {
LABEL_43:
                *(_DWORD *)(a1[2] + 36) = *(_DWORD *)(v2 + 7444);
                return 1;
              }
              v95 = *(_DWORD *)(v2 + 7412);
              v96 = *(_DWORD *)(v2 + 7404);
              *(_DWORD *)(v2 + 7444) = v78;
              *(_DWORD *)(v2 + 7448) = v95;
              *(_DWORD *)(v2 + 7452) = v96;
              *(_DWORD *)(v77 + 4) = v78;
              v97 = *(_DWORD *)(v2 + 12);
              if (v97)
              {
                v98 = *(_BYTE *)(*(_QWORD *)v2 + 720 * (v97 - 1) + 9) & 1;
                *(_BYTE *)(v77 + 56) = 0;
                *(_DWORD *)(v2 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v77, v75, 0, v98, v58, v59, v60, v61);
                v99 = *(_QWORD *)(a1[2] + 8);
                if (v99)
                  v100 = v99 + 8;
                else
                  v100 = 0;
                *(_DWORD *)(v100 + 20) = (*(_QWORD *)(*(_QWORD *)(v2 + 7288) + 80)
                                        - *(_QWORD *)(*(_QWORD *)(v2 + 7288) + 88)) >> 1;
                goto LABEL_43;
              }
              __break(0xC471u);
            }
            else
            {
              __break(0xC471u);
            }
            JUMPOUT(0x197EC253CLL);
          }
        }
      }
    }
  }
  return 0;
}

void JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionParameters<JSC::SyntaxChecker,JSC::ParserFunctionInfo<JSC::ASTBuilder>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  int v9;
  int v10;
  WTF::AtomStringImpl *v12;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  char v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  char **v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char **v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  const char *v73;
  const char *v74;
  const char *v75;
  uint64_t v76;
  char **v77;
  uint64_t v78;
  unint64_t v79;
  const char *v80;
  const char *v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  BOOL isAllowedIdentifierLet;
  uint64_t v100;
  uint64_t v101;
  BOOL isAllowedIdentifierYield;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  const char *v121;
  int v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  char v133;
  int v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  const char *v158;
  uint64_t v159;
  const char *v160;
  const char **Range;
  uint64_t v162;
  const char *v163;
  unsigned __int8 v164;

  v8 = (_BYTE *)(a1 + 7344);
  v9 = *(unsigned __int8 *)(a1 + 7474);
  v10 = 1 << v9;
  if (((1 << v9) & 0x7000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197EC2E18);
  }
  if (v9 == 20)
    return;
  v12 = (WTF::AtomStringImpl *)a2;
  v14 = *(_DWORD *)(a1 + 7316);
  *(_DWORD *)(a1 + 7316) = 0;
  v15 = a1 + 7368;
  LODWORD(a2) = *(_DWORD *)(a1 + 7368);
  if ((v10 & 0x840) != 0)
  {
    if ((_DWORD)a2 == 12)
      goto LABEL_145;
    v10 = v14;
    isAllowedIdentifierLet = JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, a2, *(_QWORD **)(a1 + 7376));
    LODWORD(a2) = *(_DWORD *)(a1 + 7368);
    if (isAllowedIdentifierLet
      || (isAllowedIdentifierYield = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, a2, *(_QWORD **)(a1 + 7376)), LODWORD(a2) = *(_DWORD *)(a1 + 7368), isAllowedIdentifierYield))
    {
      if ((_DWORD)a2 != 2)
        goto LABEL_145;
    }
    else if ((_DWORD)a2 != 2)
    {
      if ((_DWORD)a2 == 546)
        goto LABEL_145;
      if ((_DWORD)a2 != 1048592)
      {
LABEL_258:
        v152 = *(_DWORD *)(a1 + 12);
        if (!v152)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC3A00);
        }
        v153 = v152 - 1;
        v154 = *(_QWORD *)a1;
        if ((_DWORD)a2 == 532 && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v153 + 9) & 1) != 0)
        {
          v14 = v10;
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_59;
          Range = (const char **)JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
          v162 = v155;
          v163 = JSC::stringForFunctionMode();
LABEL_96:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6],char const(&)[16]>(a1, (uint64_t)&Range, &v163);
          goto LABEL_59;
        }
        if ((a2 - 531) <= 1)
        {
          v14 = v10;
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_59;
          Range = (const char **)JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
          v162 = v156;
          v163 = JSC::stringForFunctionMode();
LABEL_114:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&Range, &v163);
          goto LABEL_59;
        }
        if ((a2 & 0x200) == 0)
        {
LABEL_276:
          if ((_DWORD)a2 != 20 && (a2 & 0x100000) == 0)
          {
            v14 = v10;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected an arrow function input parameter");
            goto LABEL_59;
          }
          goto LABEL_321;
        }
        if ((a2 - 544) < 3)
        {
          if ((_DWORD)a2 != 546)
          {
            if ((_DWORD)a2 == 544)
            {
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v153 + 9) & 1) == 0)
                goto LABEL_276;
              v14 = v10;
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_59;
LABEL_79:
              Range = (const char **)JSC::stringForFunctionMode();
              v163 = "in strict mode";
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[6],char const(&)[2],char const*>(a1, (const char **)&Range, &v163);
              goto LABEL_59;
            }
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v153 + 9) & 1) == 0
              && (*(_BYTE *)(v154 + 720 * v153 + 11) & 2) == 0)
            {
              goto LABEL_276;
            }
            v14 = v10;
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_59;
            goto LABEL_122;
          }
          if (*v8 && (*(_DWORD *)(v154 + 720 * v153 + 10) & 0x102000) == 0 && *(_DWORD *)(a1 + 7480) != 1)
            goto LABEL_276;
          v14 = v10;
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_59;
LABEL_119:
          Range = (const char **)JSC::stringForFunctionMode();
          v163 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
          v81 = "Cannot use 'await' as a ";
LABEL_123:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[6],char const(&)[2],char const*>(a1, v81, (const char **)&Range, &v163);
          goto LABEL_59;
        }
        v14 = v10;
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_59;
        Range = (const char **)JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v162 = v159;
        v163 = JSC::stringForFunctionMode();
LABEL_141:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&Range, &v163);
        goto LABEL_59;
      }
LABEL_336:
      if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
LABEL_145:
        *(_DWORD *)(a3 + 16) = 1;
        if (JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, v12, 4, 0, 0, 0, a7, a8))goto LABEL_59;
        if (*(_DWORD *)v15 != 20 && (*(_DWORD *)v15 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
          goto LABEL_59;
        }
        goto LABEL_244;
      }
      goto LABEL_258;
    }
    v103 = *(_DWORD *)(a1 + 7400);
    v104 = *(_DWORD *)(a1 + 7412);
    v105 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v103;
    *(_DWORD *)(a1 + 7448) = v104;
    *(_DWORD *)(a1 + 7452) = v105;
    v106 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v106 + 4) = v103;
    v107 = *(_DWORD *)(a1 + 12);
    if (!v107)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC39D8);
    }
    v108 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v107 - 1) + 9) & 1;
    *(_BYTE *)(v106 + 56) = 0;
    v109 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v106, v15, 0, v108, v100, v101, a7, a8);
    *(_DWORD *)(a1 + 7368) = v109;
    if (v109 == 3)
    {
      *(_DWORD *)(a3 + 16) = 0;
      goto LABEL_183;
    }
    v124 = 0;
    v164 = 0;
    Range = 0;
    while (1)
    {
      if (v109 == 37)
      {
        v143 = *(_DWORD *)(a1 + 7400);
        v144 = *(_DWORD *)(a1 + 7412);
        v145 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v143;
        *(_DWORD *)(a1 + 7448) = v144;
        *(_DWORD *)(a1 + 7452) = v145;
        v146 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v146 + 4) = v143;
        v147 = *(_DWORD *)(a1 + 12);
        if (!v147)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC39F0);
        }
        v148 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v147 - 1) + 9) & 1;
        *(_BYTE *)(v146 + 56) = 0;
        v149 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v146, v15, 0, v148, v110, v111, v112, v113);
        *(_DWORD *)(a1 + 7368) = v149;
        if (JSC::Parser<JSC::Lexer<char16_t>>::isDisallowedIdentifierAwait(a1, v149, *(_QWORD **)(a1 + 7376)))
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a parameter name in an async function");
          goto LABEL_317;
        }
        JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, v12, 4, (char ***)&Range, &v164, 0, v150, v151);
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_317;
        if (*(_DWORD *)v15 == 6)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Rest parameter should be the last parameter in a function declaration");
          goto LABEL_317;
        }
        v131 = 0;
        LODWORD(v132) = 1;
      }
      else
      {
        if (v109 == 3)
          goto LABEL_183;
        if (!JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, v12, 4, (char ***)&Range, &v164, 0, v112, v113))
        {
          if (*(_DWORD *)v15 == 20 || (*(_DWORD *)v15 & 0x100000) != 0)
          {
            JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
          }
          else if (!*(_QWORD *)(a1 + 7360))
          {
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
          }
          goto LABEL_317;
        }
        v131 = JSC::Parser<JSC::Lexer<char16_t>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, v12, v125, v126, v127, v128, v129, v130);
        v132 = *(_QWORD *)(a1 + 7360);
        if (v132)
          goto LABEL_317;
        v124 |= v131 != 0;
      }
      if (Range)
        break;
      if (v131)
        v133 = 1;
      else
        v133 = v132;
      if ((v133 & 1) != 0 || v164)
      {
        v141 = *(_DWORD *)(a1 + 12);
        if (!v141)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC39F8);
        }
        v142 = *(_QWORD *)a1 + 720 * (v141 - 1);
        *(_DWORD *)(v142 + 10) = *(_DWORD *)(v142 + 10) & 0xFB7FFFFF | 0x4000000;
      }
      if ((v132 & 1) != 0)
      {
        v134 = *(_DWORD *)v15;
LABEL_251:
        if (v134 != 3)
        {
          if (v134 != 20 && (v134 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              goto LABEL_64;
            goto LABEL_59;
          }
          goto LABEL_321;
        }
LABEL_183:
        v114 = *(_DWORD *)(a1 + 7400);
        v115 = *(_DWORD *)(a1 + 7412);
        v116 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v114;
        *(_DWORD *)(a1 + 7448) = v115;
        *(_DWORD *)(a1 + 7452) = v116;
        v117 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v117 + 4) = v114;
        v118 = *(_DWORD *)(a1 + 12);
        if (!v118)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC39E0);
        }
        v119 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v118 - 1) + 9) & 1;
        *(_BYTE *)(v117 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v117, v15, 0, v119, v110, v111, v112, v113);
LABEL_185:
        v14 = v10;
        goto LABEL_59;
      }
      if ((v124 & 1) == 0)
        ++*(_DWORD *)(a3 + 16);
      v134 = *(_DWORD *)v15;
      if (*(_DWORD *)v15 != 6)
        goto LABEL_251;
      v135 = *(_DWORD *)(a1 + 7400);
      v136 = *(_DWORD *)(a1 + 7412);
      v137 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v135;
      *(_DWORD *)(a1 + 7448) = v136;
      *(_DWORD *)(a1 + 7452) = v137;
      v138 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v138 + 4) = v135;
      v139 = *(_DWORD *)(a1 + 12);
      if (!v139)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC39D0);
      }
      v140 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v139 - 1) + 9) & 1;
      *(_BYTE *)(v138 + 56) = 0;
      v109 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v138, v15, 0, v140, v110, v111, v112, v113);
      *(_DWORD *)(a1 + 7368) = v109;
    }
    if ((v124 & 1) != 0)
    {
      v163 = *Range;
      v160 = "' not allowed in function with default parameter values";
    }
    else
    {
      if (!v164)
      {
        v163 = *Range;
        if ((_DWORD)v132)
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[48]>(a1, (uint64_t *)&v163);
        else
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[35]>(a1, (uint64_t *)&v163);
        goto LABEL_317;
      }
      v163 = *Range;
      v160 = "' not allowed in function with destructuring parameters";
    }
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[56]>(a1, (uint64_t *)&v163, v160);
LABEL_317:
    if (*(_DWORD *)v15 != 20 && (*(_DWORD *)v15 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
LABEL_236:
        Range = (const char **)JSC::stringForFunctionMode();
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],char const*>(a1, (const char **)&Range);
      }
      goto LABEL_59;
    }
LABEL_321:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    goto LABEL_185;
  }
  if ((_DWORD)a2 != 2)
  {
    v47 = *(_DWORD *)(a1 + 12);
    if (!v47)
    {
      __break(0xC471u);
      goto LABEL_335;
    }
    v48 = v47 - 1;
    v49 = *(_QWORD *)a1;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v48 + 9) & 1) != 0 && (_DWORD)a2 == 532)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_59;
      v50 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
      v15 = *(unsigned int *)(a1 + 7408);
      a3 = *(unsigned int *)(a1 + 7412);
      v51 = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
      if (a2 <= v15)
      {
        v52 = 0x100000000;
        v51 = (char **)"";
        goto LABEL_72;
      }
      LODWORD(v52) = a3 - v15;
      if ((int)a2 - (int)v15 <= (a3 - v15))
      {
        LODWORD(v52) = a2 - v15;
        if (!(_DWORD)v15)
        {
          v52 = a2;
          goto LABEL_72;
        }
      }
      v52 = v52;
      v53 = a2 - v15;
      if ((a2 & 0xFF00000000) != 0)
      {
        if (v53 >= v52)
        {
          v51 = (char **)((char *)v51 + v15);
          v52 = v52 | 0x100000000;
LABEL_72:
          Range = (const char **)v51;
          v162 = v52;
          v74 = "getter";
          switch(v9)
          {
            case 0:
              v74 = "function";
              break;
            case 1:
            case 2:
              v74 = "generator function";
              break;
            case 3:
              break;
            case 4:
              v74 = "setter";
              break;
            case 5:
              v74 = "method";
              break;
            case 6:
              v74 = "arrow function";
              break;
            case 7:
            case 9:
              v74 = "async function";
              break;
            case 8:
            case 11:
              v74 = "async arrow function";
              break;
            case 10:
              v74 = "async method";
              break;
            case 12:
            case 13:
            case 14:
            case 19:
              __break(0xC471u);
              JUMPOUT(0x197EC35E0);
            case 15:
            case 16:
              v74 = "async generator function";
              break;
            case 17:
              v74 = "async generator method";
              break;
            case 18:
              v74 = "generator method";
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197EC3708);
          }
          v163 = v74;
          goto LABEL_96;
        }
      }
      else if (v53 >= v52)
      {
        v51 = (char **)((char *)v51 + 2 * v15);
        goto LABEL_72;
      }
      goto LABEL_335;
    }
    if ((a2 - 531) <= 1)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_59;
      v54 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
      v15 = *(unsigned int *)(a1 + 7408);
      a3 = *(unsigned int *)(a1 + 7412);
      v55 = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54);
      if (a2 <= v15)
      {
        v56 = 0x100000000;
        v55 = (char **)"";
        goto LABEL_81;
      }
      LODWORD(v56) = a3 - v15;
      if ((int)a2 - (int)v15 <= (a3 - v15))
      {
        LODWORD(v56) = a2 - v15;
        if (!(_DWORD)v15)
        {
          v56 = a2;
          goto LABEL_81;
        }
      }
      v56 = v56;
      v57 = a2 - v15;
      if ((a2 & 0xFF00000000) != 0)
      {
        if (v57 >= v56)
        {
          v55 = (char **)((char *)v55 + v15);
          v56 = v56 | 0x100000000;
LABEL_81:
          Range = (const char **)v55;
          v162 = v56;
          v75 = "getter";
          switch(v9)
          {
            case 0:
              v75 = "function";
              break;
            case 1:
            case 2:
              v75 = "generator function";
              break;
            case 3:
              break;
            case 4:
              v75 = "setter";
              break;
            case 5:
              v75 = "method";
              break;
            case 6:
              v75 = "arrow function";
              break;
            case 7:
            case 9:
              v75 = "async function";
              break;
            case 8:
            case 11:
              v75 = "async arrow function";
              break;
            case 10:
              v75 = "async method";
              break;
            case 12:
            case 13:
            case 14:
            case 19:
              __break(0xC471u);
              JUMPOUT(0x197EC364CLL);
            case 15:
            case 16:
              v75 = "async generator function";
              break;
            case 17:
              v75 = "async generator method";
              break;
            case 18:
              v75 = "generator method";
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197EC37A0);
          }
          v163 = v75;
          goto LABEL_114;
        }
      }
      else if (v57 >= v56)
      {
        v55 = (char **)((char *)v55 + 2 * v15);
        goto LABEL_81;
      }
LABEL_335:
      __break(1u);
      goto LABEL_336;
    }
    if ((a2 & 0x200) != 0)
    {
      if ((a2 - 544) >= 3)
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_59;
        v76 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
        v15 = *(unsigned int *)(a1 + 7408);
        a3 = *(unsigned int *)(a1 + 7412);
        v77 = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 24))(v76);
        if (a2 <= v15)
        {
          v78 = 0x100000000;
          v77 = (char **)"";
        }
        else
        {
          LODWORD(v78) = a3 - v15;
          if ((int)a2 - (int)v15 > (a3 - v15) || (LODWORD(v78) = a2 - v15, (_DWORD)v15))
          {
            v78 = v78;
            v79 = a2 - v15;
            if ((a2 & 0xFF00000000) != 0)
            {
              if (v79 < v78)
                goto LABEL_335;
              v77 = (char **)((char *)v77 + v15);
              v78 = v78 | 0x100000000;
            }
            else
            {
              if (v79 < v78)
                goto LABEL_335;
              v77 = (char **)((char *)v77 + 2 * v15);
            }
          }
          else
          {
            v78 = a2;
          }
        }
        Range = (const char **)v77;
        v162 = v78;
        v80 = "getter";
        switch(v9)
        {
          case 0:
            v80 = "function";
            break;
          case 1:
          case 2:
            v80 = "generator function";
            break;
          case 3:
            break;
          case 4:
            v80 = "setter";
            break;
          case 5:
            v80 = "method";
            break;
          case 6:
            v80 = "arrow function";
            break;
          case 7:
          case 9:
            v80 = "async function";
            break;
          case 8:
          case 11:
            v80 = "async arrow function";
            break;
          case 10:
            v80 = "async method";
            break;
          case 12:
          case 13:
          case 14:
          case 19:
            __break(0xC471u);
            JUMPOUT(0x197EC3780);
          case 15:
          case 16:
            v80 = "async generator function";
            break;
          case 17:
            v80 = "async generator method";
            break;
          case 18:
            v80 = "generator method";
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x197EC3860);
        }
        v163 = v80;
        goto LABEL_141;
      }
      if ((_DWORD)a2 == 546)
      {
        if (!*v8 || (*(_DWORD *)(v49 + 720 * v48 + 10) & 0x102000) != 0 || *(_DWORD *)(a1 + 7480) == 1)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_59;
          goto LABEL_119;
        }
      }
      else if ((_DWORD)a2 == 544)
      {
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v48 + 9) & 1) != 0)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_59;
          goto LABEL_79;
        }
      }
      else if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v48 + 9) & 1) != 0 || (*(_BYTE *)(v49 + 720 * v48 + 11) & 2) != 0)
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_59;
LABEL_122:
        Range = (const char **)JSC::stringForFunctionMode();
        v163 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierYieldReason(a1);
        v81 = "Cannot use 'yield' as a ";
        goto LABEL_123;
      }
    }
    if ((_DWORD)a2 != 20 && (a2 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        v73 = "getter";
        switch(v9)
        {
          case 0:
            v73 = "function";
            break;
          case 1:
          case 2:
            v73 = "generator function";
            break;
          case 3:
            break;
          case 4:
            v73 = "setter";
            break;
          case 5:
            v73 = "method";
            break;
          case 6:
            v73 = "arrow function";
            break;
          case 7:
          case 9:
            v73 = "async function";
            break;
          case 8:
          case 11:
            v73 = "async arrow function";
            break;
          case 10:
            v73 = "async method";
            break;
          case 12:
          case 13:
          case 14:
          case 19:
            __break(0xC471u);
            JUMPOUT(0x197EC3760);
          case 15:
          case 16:
            v73 = "async generator function";
            break;
          case 17:
            v73 = "async generator method";
            break;
          case 18:
            v73 = "generator method";
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x197EC3838);
        }
        Range = (const char **)v73;
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],char const*,char const(&)[18]>(a1, (const char **)&Range);
      }
      goto LABEL_59;
    }
    goto LABEL_244;
  }
  v16 = *(_DWORD *)(a1 + 7400);
  v17 = *(_DWORD *)(a1 + 7412);
  v18 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v16;
  *(_DWORD *)(a1 + 7448) = v17;
  *(_DWORD *)(a1 + 7452) = v18;
  v19 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v19 + 4) = v16;
  v20 = *(_DWORD *)(a1 + 12);
  if (!v20)
  {
    __break(0xC471u);
    JUMPOUT(0x197EC3818);
  }
  v21 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v20 - 1) + 9) & 1;
  *(_BYTE *)(v19 + 56) = 0;
  v22 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v19, v15, 0, v21, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v22;
  if (v9 == 3)
  {
    if (v22 == 3)
    {
      v82 = *(_DWORD *)(a1 + 7400);
      v83 = *(_DWORD *)(a1 + 7412);
      v84 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v82;
      *(_DWORD *)(a1 + 7448) = v83;
      *(_DWORD *)(a1 + 7452) = v84;
      v85 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v85 + 4) = v82;
      v86 = *(_DWORD *)(a1 + 12);
      if (!v86)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC397CLL);
      }
      v87 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v86 - 1) + 9) & 1;
      *(_BYTE *)(v85 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v85, v15, 0, v87, v23, v24, v25, v26);
      *(_DWORD *)(a3 + 16) = 0;
      goto LABEL_59;
    }
    if (v22 != 20 && (v22 & 0x100000) == 0)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_59;
      v121 = "getter functions must have no parameters";
LABEL_199:
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, v121);
      goto LABEL_59;
    }
    goto LABEL_244;
  }
  if (v9 == 4)
  {
    if (v22 != 3)
    {
      Range = 0;
      v164 = 0;
      if (JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, v12, 4, (char ***)&Range, &v164, 0, v25, v26))
      {
        v94 = JSC::Parser<JSC::Lexer<char16_t>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, v12, v88, v89, v90, v91, v92, v93);
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_59;
        if (v94 || v164)
        {
          if (Range)
          {
            v163 = *Range;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[57]>(a1, (uint64_t *)&v163);
            goto LABEL_59;
          }
          v122 = *(_DWORD *)(a1 + 12);
          if (!v122)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC39E8);
          }
          v123 = *(_QWORD *)a1 + 720 * (v122 - 1);
          *(_DWORD *)(v123 + 10) = *(_DWORD *)(v123 + 10) & 0xFB7FFFFF | 0x4000000;
        }
        *(_DWORD *)(a3 + 16) = v94 == 0;
        v95 = *(_DWORD *)v15;
        if (*(_DWORD *)v15 == 3)
        {
          v96 = *(_DWORD *)(a1 + 7400);
          v97 = *(_DWORD *)(a1 + 7412);
          v98 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v96;
          *(_DWORD *)(a1 + 7448) = v97;
          *(_DWORD *)(a1 + 7452) = v98;
          v70 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v70 + 4) = v96;
          v71 = *(_DWORD *)(a1 + 12);
          if (!v71)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC302CLL);
          }
LABEL_58:
          v72 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v71 - 1) + 9) & 1;
          *(_BYTE *)(v70 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v70, v15, 0, v72, v23, v24, v25, v26);
          goto LABEL_59;
        }
        if (v95 == 6)
          goto LABEL_197;
        if (v95 != 20 && (v95 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ')' after a parameter declaration");
          goto LABEL_59;
        }
LABEL_244:
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        goto LABEL_59;
      }
      if (*(_DWORD *)v15 == 20 || (*(_DWORD *)v15 & 0x100000) != 0)
        goto LABEL_244;
    }
LABEL_197:
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_59;
    v121 = "setter functions must have one parameter";
    goto LABEL_199;
  }
  if (v22 == 3)
  {
    *(_DWORD *)(a3 + 16) = 0;
LABEL_57:
    v67 = *(_DWORD *)(a1 + 7400);
    v68 = *(_DWORD *)(a1 + 7412);
    v69 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v67;
    *(_DWORD *)(a1 + 7448) = v68;
    *(_DWORD *)(a1 + 7452) = v69;
    v70 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v70 + 4) = v67;
    v71 = *(_DWORD *)(a1 + 12);
    if (!v71)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC3840);
    }
    goto LABEL_58;
  }
  v27 = 0;
  v164 = 0;
  Range = 0;
  while (1)
  {
    if (v22 == 37)
    {
      v58 = *(_DWORD *)(a1 + 7400);
      v59 = *(_DWORD *)(a1 + 7412);
      v60 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v58;
      *(_DWORD *)(a1 + 7448) = v59;
      *(_DWORD *)(a1 + 7452) = v60;
      v61 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v61 + 4) = v58;
      v62 = *(_DWORD *)(a1 + 12);
      if (!v62)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC3810);
      }
      v63 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v62 - 1) + 9) & 1;
      *(_BYTE *)(v61 + 56) = 0;
      v64 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v61, v15, 0, v63, v23, v24, v25, v26);
      *(_DWORD *)(a1 + 7368) = v64;
      if (v64 == 546
        || v64 == 1048592
        && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
        if (!*v8)
          goto LABEL_378;
        v157 = *(_DWORD *)(a1 + 12);
        if (!v157)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC3808);
        }
        if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v157 - 1) + 10) & 0x102000) != 0
          || *(_DWORD *)(a1 + 7480) == 1)
        {
LABEL_378:
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a parameter name in an async function");
          goto LABEL_233;
        }
      }
      JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, v12, 4, (char ***)&Range, &v164, 0, v65, v66);
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_233;
      if (*(_DWORD *)v15 == 6)
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Rest parameter should be the last parameter in a function declaration");
        goto LABEL_233;
      }
      v34 = 0;
      LODWORD(v35) = 1;
    }
    else
    {
      if (v22 == 3)
        goto LABEL_57;
      if (!JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, v12, 4, (char ***)&Range, &v164, 0, v25, v26))
      {
        if (*(_DWORD *)v15 == 20 || (*(_DWORD *)v15 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
        }
        goto LABEL_233;
      }
      v34 = JSC::Parser<JSC::Lexer<char16_t>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, v12, v28, v29, v30, v31, v32, v33);
      v35 = *(_QWORD *)(a1 + 7360);
      if (v35)
        goto LABEL_233;
      v27 |= v34 != 0;
    }
    if (!Range)
    {
      v36 = v164;
      goto LABEL_17;
    }
    if ((v27 & 1) != 0)
    {
      v163 = *Range;
      v158 = "' not allowed in function with default parameter values";
      goto LABEL_285;
    }
    if (v164)
    {
      v163 = *Range;
      v158 = "' not allowed in function with destructuring parameters";
LABEL_285:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[56]>(a1, (uint64_t *)&v163, v158);
LABEL_233:
      if (*(_DWORD *)v15 == 20 || (*(_DWORD *)v15 & 0x100000) != 0)
        goto LABEL_244;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_59;
      goto LABEL_236;
    }
    if ((_DWORD)v35)
    {
      v163 = *Range;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[48]>(a1, (uint64_t *)&v163);
      goto LABEL_233;
    }
    if ((v10 & 0x160438) != 0)
    {
      v163 = *Range;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[26]>(a1, (uint64_t *)&v163);
      goto LABEL_233;
    }
    v36 = 0;
LABEL_17:
    if (v34)
      v37 = 1;
    else
      v37 = v35;
    if ((v37 & 1) != 0 || v36)
    {
      v45 = *(_DWORD *)(a1 + 12);
      if (!v45)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC3800);
      }
      v46 = *(_QWORD *)a1 + 720 * (v45 - 1);
      *(_DWORD *)(v46 + 10) = *(_DWORD *)(v46 + 10) & 0xFB7FFFFF | 0x4000000;
    }
    if ((v35 & 1) != 0)
      break;
    if ((v27 & 1) == 0)
      ++*(_DWORD *)(a3 + 16);
    v38 = *(_DWORD *)v15;
    if (*(_DWORD *)v15 != 6)
      goto LABEL_56;
    v39 = *(_DWORD *)(a1 + 7400);
    v40 = *(_DWORD *)(a1 + 7412);
    v41 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v39;
    *(_DWORD *)(a1 + 7448) = v40;
    *(_DWORD *)(a1 + 7452) = v41;
    v42 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v42 + 4) = v39;
    v43 = *(_DWORD *)(a1 + 12);
    if (!v43)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC36E8);
    }
    v44 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v43 - 1) + 9) & 1;
    *(_BYTE *)(v42 + 56) = 0;
    v22 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v42, v15, 0, v44, v23, v24, v25, v26);
    *(_DWORD *)(a1 + 7368) = v22;
  }
  v38 = *(_DWORD *)v15;
LABEL_56:
  if (v38 == 3)
    goto LABEL_57;
  if (v38 == 20 || (v38 & 0x100000) != 0)
    goto LABEL_244;
  if (*(_QWORD *)(a1 + 7360))
    goto LABEL_59;
LABEL_64:
  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ')' or a ',' after a parameter declaration");
LABEL_59:
  *(_DWORD *)(a1 + 7316) = v14;
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43],char const*,char const(&)[6]>(uint64_t a1, const char **a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Expected an opening '{' at the start of a ");
    WTF::PrintStream::printf(v5, "%s", *a2);
    WTF::PrintStream::printf(v5, "%s", " body");
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(JSC::ASTBuilder &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::ASTBuilder> &,JSC::Parser<JSC::Lexer<char16_t>>::FunctionDefinitionType,std::optional<int>)::{lambda(void)#2}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  int v35;
  __int16 v36;
  __int16 v37;
  int v38;
  int v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  _DWORD *v49;
  int v50;
  __int16 v52;
  _QWORD *v53;
  int v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char v60;
  int v61;
  __int16 v62;
  __int16 v63;
  int v64;
  int v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t *v69;
  int v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  __int16 v74;
  uint64_t v75;
  int v76;
  const char *v77;
  int v78;
  int v79;
  _DWORD *v80;
  char v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  char v88;
  const char *v89;

  v8 = *(_QWORD *)(a1 + 88);
  v9 = v8 + 7345;
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v87 = *(_QWORD *)(a1 + 16);
  v82 = **(_DWORD **)(a1 + 24);
  v83 = **(_DWORD **)(a1 + 32);
  v84 = **(_DWORD **)(a1 + 40);
  v85 = **(_DWORD **)(a1 + 48);
  v12 = **(unsigned __int8 **)(a1 + 56);
  v13 = **(_DWORD **)(a1 + 64);
  v14 = **(_DWORD **)(a1 + 72);
  v86 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 16);
  v88 = *(_BYTE *)(v8 + 7345);
  v81 = **(_BYTE **)(a1 + 56);
  if (v14 == 2)
  {
    *(_BYTE *)v9 = 0;
  }
  else if (!v14)
  {
    v80 = (_DWORD *)(v8 + 7456);
    v79 = *(_DWORD *)(v8 + 7456);
    *(_DWORD *)(v8 + 7456) = 0;
    if (*(_QWORD *)(v8 + 7520))
    {
      v75 = v8 + 7345;
      if (JSC::Parser<JSC::Lexer<char16_t>>::parseArrowFunctionSingleExpressionBodySourceElements<JSC::ASTBuilder>(v8, v10))
      {
        v27 = 256;
LABEL_57:
        v9 = v75;
LABEL_8:
        v28 = *(_DWORD *)(v8 + 12);
        if (!v28)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC42C0);
        }
        v29 = *(_BYTE *)(v9 + 129);
        v30 = v28 - 1;
        v31 = *(_QWORD *)v8;
        if (v13 == 1)
        {
          v37 = 16;
        }
        else
        {
          v32 = v31 + 720 * v30;
          v33 = *(_DWORD *)(v32 + 10);
          v34 = *(_BYTE *)(v32 + 32);
          if (v12)
          {
            if (v12 == 1)
            {
LABEL_12:
              v35 = v33 & 0x20 | v34 & 0x10;
              v36 = ~(8 * v33) & 0x10;
              if (v35)
                v37 = 0;
              else
                v37 = v36;
              goto LABEL_15;
            }
          }
          else if (((1 << v29) & 0x60400) == 0)
          {
            goto LABEL_12;
          }
          v37 = 0;
        }
LABEL_15:
        v38 = *(_DWORD *)(v8 + 7408);
        v39 = *(_DWORD *)(v8 + 7404);
        v40 = v31 + 720 * v30;
        v41 = *(_BYTE *)(v40 + 8);
        v42 = *(_BYTE *)(v40 + 9);
        v43 = *(uint64_t **)(v10 + 8);
        v44 = *v43;
        if ((unint64_t)(v43[1] - *v43) <= 0x8F)
        {
          v74 = v27;
          JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v43);
          v27 = v74;
          v44 = *v43;
        }
        v45 = v38 - v39;
        *v43 = v44 + 144;
        v89 = (const char *)v44;
        v46 = v43 + 5;
        v47 = *((unsigned int *)v43 + 13);
        if ((_DWORD)v47 == *((_DWORD *)v43 + 12))
        {
          v52 = v27;
          v53 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v46, v47 + 1, (unint64_t)&v89);
          v27 = v52;
          v47 = *((unsigned int *)v43 + 13);
          *(_QWORD *)(v43[5] + 8 * v47) = *v53;
        }
        else
        {
          *(_QWORD *)(*v46 + 8 * v47) = v44;
        }
        v48 = v88;
        v49 = v80;
        v50 = v79;
        *((_DWORD *)v43 + 13) = v47 + 1;
        *(_DWORD *)(v44 + 16) = *(_DWORD *)(v8 + 7400);
        *(int32x2_t *)(v44 + 20) = vrev64_s32(*(int32x2_t *)(v9 + 59));
        *(_DWORD *)(v44 + 28) = -1;
        *(_BYTE *)(v44 + 32) = 0;
        *(_QWORD *)v44 = &off_1E3596470;
        *(_QWORD *)(v44 + 8) = &unk_1E3596490;
        *(_WORD *)(v44 + 33) = v37 | v27 | *(_WORD *)(v44 + 33) & 0xF800 | v41 & 3 | (32 * (v81 & 3)) | (4 * (v42 & 3));
        *(_BYTE *)(v44 + 35) = v29;
        *(_QWORD *)(v44 + 40) = 0;
        *(_QWORD *)(v44 + 48) = 0;
        *(_DWORD *)(v44 + 56) = v82;
        *(_DWORD *)(v44 + 60) = v45;
        *(_DWORD *)(v44 + 64) = v83;
        *(_DWORD *)(v44 + 68) = v84;
        *(_DWORD *)(v44 + 72) = v85;
        *(_QWORD *)(v44 + 80) = 0;
        *(_QWORD *)(v44 + 88) = 0;
        *(_QWORD *)(v44 + 96) = -1;
        *(_QWORD *)(v44 + 104) = 0;
        *(_QWORD *)(v44 + 112) = 0;
        *(_QWORD *)(v44 + 120) = -1;
        *(_DWORD *)(v44 + 128) = *(_DWORD *)(v87 + 8);
        *(_QWORD *)(v44 + 132) = v86;
        goto LABEL_20;
      }
    }
    else
    {
      if (JSC::Parser<JSC::Lexer<char16_t>>::parseArrowFunctionSingleExpressionBodySourceElements<JSC::SyntaxChecker>(v8, v11))
      {
        v27 = 256;
        goto LABEL_8;
      }
      v75 = v8 + 7345;
    }
    v78 = *(_DWORD *)(v8 + 7368);
    if (v78 != 20 && (v78 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(v8 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v8, 1, "Cannot parse body of this arrow function");
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  v15 = *(_DWORD *)(v8 + 7400);
  v16 = *(_DWORD *)(v8 + 7412);
  v17 = *(_DWORD *)(v8 + 7404);
  *(_DWORD *)(v8 + 7444) = v15;
  *(_DWORD *)(v8 + 7448) = v16;
  *(_DWORD *)(v8 + 7452) = v17;
  v18 = *(_QWORD *)(v8 + 7288);
  *(_DWORD *)(v18 + 4) = v15;
  v19 = *(_DWORD *)(v8 + 12);
  if (!v19)
    goto LABEL_67;
  v20 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v19 - 1) + 9) & 1;
  *(_BYTE *)(v18 + 56) = 0;
  v21 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v18, v8 + 7368, 0, v20, a5, a6, a7, a8);
  *(_DWORD *)(v8 + 7368) = v21;
  if (v21 != 1)
  {
    v80 = (_DWORD *)(v8 + 7456);
    v79 = *(_DWORD *)(v8 + 7456);
    *(_DWORD *)(v8 + 7456) = 0;
    if (!*(_QWORD *)(v8 + 7520))
    {
      if (JSC::Parser<JSC::Lexer<char16_t>>::parseSourceElements<JSC::SyntaxChecker>(v8, v11, 0, v22, v23, v24, v25, v26))
      {
        v27 = 0;
        goto LABEL_8;
      }
      v75 = v8 + 7345;
LABEL_49:
      v76 = *(_DWORD *)(v8 + 7368);
      if (v76 != 20 && (v76 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(v8 + 7360))
        {
          v77 = "Cannot parse body of this arrow function";
          if (v14 == 2)
            v77 = "Cannot parse body of this function";
          v89 = v77;
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const*>(v8, 1, &v89);
        }
        goto LABEL_64;
      }
LABEL_63:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(v8);
LABEL_64:
      v44 = 0;
      v9 = v75;
      v48 = v88;
      v49 = v80;
      v50 = v79;
LABEL_20:
      *v49 = v50;
      goto LABEL_21;
    }
    v75 = v8 + 7345;
    if (!JSC::Parser<JSC::Lexer<char16_t>>::parseSourceElements<JSC::ASTBuilder>(v8, v10, 0, v22, v23, v24, v25, v26))
      goto LABEL_49;
    v27 = 0;
    goto LABEL_57;
  }
  v54 = *(_DWORD *)(v8 + 12);
  if (!v54)
  {
LABEL_67:
    __break(0xC471u);
    JUMPOUT(0x197EC42B8);
  }
  v55 = *(_BYTE *)(v8 + 7474);
  v56 = v54 - 1;
  v57 = *(_QWORD *)v8;
  if (v13 == 1)
  {
    v63 = 16;
  }
  else
  {
    v58 = v57 + 720 * v56;
    v59 = *(_DWORD *)(v58 + 10);
    v60 = *(_BYTE *)(v58 + 32);
    if (v12)
    {
      if (v12 == 1)
      {
LABEL_34:
        v61 = v59 & 0x20 | v60 & 0x10;
        v62 = ~(8 * v59) & 0x10;
        if (v61)
          v63 = 0;
        else
          v63 = v62;
        goto LABEL_37;
      }
    }
    else if (((1 << v55) & 0x60400) == 0)
    {
      goto LABEL_34;
    }
    v63 = 0;
  }
LABEL_37:
  v64 = *(_DWORD *)(v8 + 7408);
  v65 = *(_DWORD *)(v8 + 7404);
  v66 = v57 + 720 * v56;
  v67 = *(_BYTE *)(v66 + 8);
  v68 = *(_BYTE *)(v66 + 9);
  v69 = *(uint64_t **)(v10 + 8);
  v44 = *v69;
  if ((unint64_t)(v69[1] - *v69) <= 0x8F)
  {
    JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v69);
    v44 = *v69;
  }
  v70 = v64 - v65;
  *v69 = v44 + 144;
  v89 = (const char *)v44;
  v71 = v69 + 5;
  v72 = *((unsigned int *)v69 + 13);
  if ((_DWORD)v72 == *((_DWORD *)v69 + 12))
  {
    v73 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v71, v72 + 1, (unint64_t)&v89);
    v72 = *((unsigned int *)v69 + 13);
    *(_QWORD *)(v69[5] + 8 * v72) = *v73;
  }
  else
  {
    *(_QWORD *)(*v71 + 8 * v72) = v44;
  }
  v48 = v88;
  *((_DWORD *)v69 + 13) = v72 + 1;
  *(_DWORD *)(v44 + 16) = *(_DWORD *)(v8 + 7400);
  *(int32x2_t *)(v44 + 20) = vrev64_s32(*(int32x2_t *)(v8 + 7404));
  *(_DWORD *)(v44 + 28) = -1;
  *(_BYTE *)(v44 + 32) = 0;
  *(_QWORD *)v44 = &off_1E3596470;
  *(_QWORD *)(v44 + 8) = &unk_1E3596490;
  *(_WORD *)(v44 + 33) = v63 | *(_WORD *)(v44 + 33) & 0xF800 | v67 & 3 | (32 * (v81 & 3)) | (4 * (v68 & 3));
  *(_BYTE *)(v44 + 35) = v55;
  *(_QWORD *)(v44 + 40) = 0;
  *(_QWORD *)(v44 + 48) = 0;
  *(_DWORD *)(v44 + 56) = v82;
  *(_DWORD *)(v44 + 60) = v70;
  *(_DWORD *)(v44 + 64) = v83;
  *(_DWORD *)(v44 + 68) = v84;
  *(_DWORD *)(v44 + 72) = v85;
  *(_QWORD *)(v44 + 80) = 0;
  *(_QWORD *)(v44 + 88) = 0;
  *(_QWORD *)(v44 + 96) = -1;
  *(_QWORD *)(v44 + 104) = 0;
  *(_QWORD *)(v44 + 112) = 0;
  *(_QWORD *)(v44 + 120) = -1;
  *(_DWORD *)(v44 + 128) = *(_DWORD *)(v87 + 8);
  *(_QWORD *)(v44 + 132) = v86;
LABEL_21:
  *(_BYTE *)v9 = v48;
  return v44;
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[31],char const*>(uint64_t a1, int a2, const char *a3, const char **a4)
{
  void (**v7)(WTF::StringPrintStream *__hidden);
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  void (**v33)(WTF::StringPrintStream *__hidden);
  WTF *v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v7 = off_1E3572250;
    v33 = off_1E3572250;
    v34 = (WTF *)v36;
    v35 = xmmword_199122F80;
    v36[0] = 0;
    if (a2)
    {
      JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v33);
      v8 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v33[4])(&v33);
      WTF::PrintStream::printf(v8, "%s", ". ");
      v33[5]((WTF::StringPrintStream *)&v33);
      v7 = v33;
    }
    v9 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v7[4])(&v33);
    WTF::PrintStream::printf(v9, "%s", a3);
    WTF::PrintStream::printf(v9, "%s", *a4);
    WTF::PrintStream::printf(v9, "%s", ".");
    v33[5]((WTF::StringPrintStream *)&v33);
    WTF::String::fromUTF8WithLatin1Fallback(v34, v35, &v32);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v32, v10, v11, v12, v13, v14, v15);
    v23 = v32;
    v32 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::~StringImpl(v23, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      else
      {
        *(_DWORD *)v23 -= 2;
      }
    }
    if (v34 != (WTF *)v36)
      WTF::fastFree((unint64_t)v34, v16, v17, v18, v19, v20, v21, v22);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[32],char const*,char const(&)[6]>(uint64_t a1, const char **a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Expected a closing '}' after a ");
    WTF::PrintStream::printf(v5, "%s", *a2);
    WTF::PrintStream::printf(v5, "%s", " body");
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, char ***a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v27;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  const WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  WTF::AtomStringImpl *NumericIdentifier;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  const char *v145;
  int v146;
  unsigned int v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  WTF::PrintStream *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  WTF::PrintStream *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  int v165;
  int v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  int v176;
  int v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  WTF::PrintStream *v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  WTF::PrintStream *v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t *v190;
  const char *v191;
  uint64_t v192;
  WTF::PrintStream *v193;
  WTF::PrintStream *v194;
  unint64_t *v195;
  WTF::AtomStringImpl *v196;
  int v197;
  int v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  int v206;
  int v207;
  int v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  int v212;
  int v213;
  unsigned int v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  WTF::AtomStringImpl *v222;
  unint64_t *v223;
  unint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  _DWORD *v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  WTF::AtomStringImpl *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  int v259;
  int v260;
  int v261;
  unsigned int v262;
  const char *v263;
  unsigned int v264;
  int v265;
  const char *v266;
  WTF::PrintStream *v267;
  uint64_t v268;
  uint64_t v269;

  v9 = (unsigned __int8 *)(a1 + 7344);
  if ((unint64_t)&v263 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
    v19 = 0;
    v9[8] = 1;
    return v19;
  }
  ++*(_DWORD *)(a1 + 7296);
  v12 = *(_DWORD *)(a1 + 7300);
  v13 = (int *)(a1 + 7368);
  v14 = *(_DWORD *)(a1 + 7368);
  if (v14 == 12)
  {
LABEL_3:
    v19 = JSC::Parser<JSC::Lexer<char16_t>>::createBindingPattern<JSC::SyntaxChecker>(a1, a3, *(WTF::AtomStringImpl **)(a1 + 7376), a4, (uint64_t)a5, a6, a7, a8);
    v20 = *(_DWORD *)(a1 + 7400);
    v21 = *(_DWORD *)(a1 + 7412);
    v22 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v20;
    *(_DWORD *)(a1 + 7448) = v21;
    *(_DWORD *)(a1 + 7452) = v22;
    v23 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v23 + 4) = v20;
    v24 = *(_DWORD *)(a1 + 12);
    if (!v24)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC5A0CLL);
    }
    v25 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v24 - 1) + 9) & 1;
    *(_BYTE *)(v23 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v23, a1 + 7368, 0, v25, v15, v16, v17, v18);
    goto LABEL_5;
  }
  v27 = a6;
  v265 = *(_DWORD *)(a1 + 7300);
  if (v14 > 3)
  {
    if (v14 > 544)
    {
      if (v14 == 545)
      {
LABEL_314:
        v261 = *(_DWORD *)(a1 + 12);
        if (!v261)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC5C50);
        }
        v262 = v261 - 1;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v262 + 9) & 1) == 0
          && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v262 + 11) & 2) == 0)
        {
          goto LABEL_262;
        }
        v12 = v265;
        if (v14 != 1048592)
          goto LABEL_88;
        v257 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
        v258 = **(_QWORD **)(a1 + 7376);
LABEL_318:
        if (v258 != v257[16])
          goto LABEL_88;
        goto LABEL_319;
      }
      if (v14 != 1048592)
      {
        if (v14 != 546)
          goto LABEL_88;
LABEL_75:
        v141 = *v9;
        if (!*v9)
          goto LABEL_359;
        v142 = *(_DWORD *)(a1 + 12);
        if (!v142)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC5B8CLL);
        }
        v12 = v265;
        if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v142 - 1) + 10) & 0x102000) != 0
          || *(_DWORD *)(a1 + 7480) == 1)
        {
LABEL_359:
          if (!*(_QWORD *)(a1 + 7360))
          {
            if (a3 >= 6)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC5B38);
            }
            v267 = (WTF::PrintStream *)off_1E357B2E8[(int)a3];
            if (!v141)
              goto LABEL_264;
            v143 = *(_DWORD *)(a1 + 12);
            if (!v143)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC5B94);
            }
            v144 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v143 - 1) + 10);
            if ((v144 & 0x2000) != 0)
            {
LABEL_264:
              v145 = "in an async function";
            }
            else if ((v144 & 0x100000) != 0)
            {
              v145 = "in a static block";
            }
            else
            {
              if (*(_DWORD *)(a1 + 7480) != 1)
              {
                __break(0xC471u);
                JUMPOUT(0x197EC5B58);
              }
              v145 = "in a module";
            }
            v266 = v145;
LABEL_266:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[2],char const*>(a1, "Cannot use 'await' as a ", (const char **)&v267, &v266);
          }
LABEL_109:
          v19 = 0;
          v12 = v265;
          goto LABEL_5;
        }
        goto LABEL_3;
      }
      v257 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v258 = **(_QWORD **)(a1 + 7376);
      if (v258 != v257[41])
      {
LABEL_313:
        v12 = v265;
        if (v258 != v257[62])
          goto LABEL_318;
        goto LABEL_314;
      }
    }
    else
    {
      if (v14 == 4)
      {
        v111 = *(_DWORD *)(a1 + 7400);
        v112 = *(_DWORD *)(a1 + 7412);
        v113 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v111;
        *(_DWORD *)(a1 + 7448) = v112;
        *(_DWORD *)(a1 + 7452) = v113;
        v114 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v114 + 4) = v111;
        v115 = *(_DWORD *)(a1 + 12);
        if (v115)
        {
          v116 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v115 - 1) + 9) & 1;
          *(_BYTE *)(v114 + 56) = 0;
          v117 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v114, a1 + 7368, 0, v116, (uint64_t)a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v117;
          if (a5)
            *a5 = 1;
          v122 = (v27 + 1);
          v123 = "Expected either a closing ']' or a ',' following an element destructuring pattern";
          while (1)
          {
            if (v117 == 6)
            {
              v138 = *(_DWORD *)(a1 + 7400);
              v139 = *(_DWORD *)(a1 + 7412);
              v140 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v138;
              *(_DWORD *)(a1 + 7448) = v139;
              *(_DWORD *)(a1 + 7452) = v140;
              v135 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v135 + 4) = v138;
              v136 = *(_DWORD *)(a1 + 12);
              if (!v136)
              {
                __break(0xC471u);
                JUMPOUT(0x197EC4CC0);
              }
            }
            else
            {
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_109;
              if (v117 == 5)
                goto LABEL_218;
              if (v117 == 37)
              {
                v197 = *(_DWORD *)(a1 + 7400);
                v198 = *(_DWORD *)(a1 + 7412);
                v199 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v197;
                *(_DWORD *)(a1 + 7448) = v198;
                *(_DWORD *)(a1 + 7452) = v199;
                v200 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v200 + 4) = v197;
                v201 = *(_DWORD *)(a1 + 12);
                if (!v201)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EC5B18);
                }
                v202 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v201 - 1) + 9) & 1;
                *(_BYTE *)(v200 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v200, a1 + 7368, 0, v202, v118, v119, v120, v121);
                v205 = JSC::Parser<JSC::Lexer<char16_t>>::parseBindingOrAssignmentElement<JSC::SyntaxChecker>(a1, a2, a3, (uint64_t)a4, (uint64_t)a5, v122, v203, v204);
                if ((_DWORD)a3 == 5 && !v205)
                  goto LABEL_109;
                v131 = *v13;
                if (v205)
                {
                  v123 = "Expected a closing ']' following a rest element destructuring pattern";
LABEL_217:
                  if (v131 != 5)
                  {
                    if (v131 != 20 && (v131 & 0x100000) == 0)
                    {
                      if (!*(_QWORD *)(a1 + 7360))
                      {
                        v267 = (WTF::PrintStream *)v123;
                        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const*>(a1, 1, (const char **)&v267);
                      }
                      goto LABEL_109;
                    }
                    goto LABEL_126;
                  }
LABEL_218:
                  v206 = *(_DWORD *)(a1 + 7400);
                  v207 = *(_DWORD *)(a1 + 7412);
                  v208 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v206;
                  *(_DWORD *)(a1 + 7448) = v207;
                  *(_DWORD *)(a1 + 7452) = v208;
                  v209 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v209 + 4) = v206;
                  v210 = *(_DWORD *)(a1 + 12);
                  v12 = v265;
                  if (!v210)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EC5AF4);
                  }
                  v211 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v210 - 1) + 9) & 1;
                  *(_BYTE *)(v209 + 56) = 0;
                  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v209, a1 + 7368, 0, v211, v118, v119, v120, v121);
                  v19 = 33;
                  goto LABEL_5;
                }
LABEL_229:
                if (v131 != 20 && (v131 & 0x100000) == 0)
                {
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse this destructuring pattern");
                  goto LABEL_109;
                }
                goto LABEL_126;
              }
              v124 = JSC::Parser<JSC::Lexer<char16_t>>::parseBindingOrAssignmentElement<JSC::SyntaxChecker>(a1, a2, a3, (uint64_t)a4, (uint64_t)a5, v122, v120, v121);
              if ((_DWORD)a3 == 5 && !v124)
                goto LABEL_109;
              if (!v124)
              {
LABEL_228:
                v131 = *v13;
                goto LABEL_229;
              }
              JSC::Parser<JSC::Lexer<char16_t>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, a2, v125, v126, v127, v128, v129, v130);
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_109;
              v131 = *v13;
              if (*v13 != 6)
                goto LABEL_217;
              v132 = *(_DWORD *)(a1 + 7400);
              v133 = *(_DWORD *)(a1 + 7412);
              v134 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v132;
              *(_DWORD *)(a1 + 7448) = v133;
              *(_DWORD *)(a1 + 7452) = v134;
              v135 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v135 + 4) = v132;
              v136 = *(_DWORD *)(a1 + 12);
              if (!v136)
              {
                __break(0xC471u);
                JUMPOUT(0x197EC5A64);
              }
            }
            v137 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v136 - 1) + 9) & 1;
            *(_BYTE *)(v135 + 56) = 0;
            v117 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v135, a1 + 7368, 0, v137, v118, v119, v120, v121);
            *(_DWORD *)(a1 + 7368) = v117;
          }
        }
LABEL_299:
        __break(0xC471u);
        JUMPOUT(0x197EC5AECLL);
      }
      if (v14 != 544)
      {
LABEL_88:
        if ((_DWORD)a3 == 5)
          goto LABEL_89;
        v146 = *(_DWORD *)(a1 + 12);
        if (!v146)
        {
          __break(0xC471u);
          goto LABEL_298;
        }
        v147 = v146 - 1;
        v148 = *(_QWORD *)a1;
        v149 = *(_BYTE *)(*(_QWORD *)a1 + 720 * v147 + 9);
        if (v14 == 532 && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v147 + 9) & 1) != 0)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_89;
          v150 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
          v151 = *(unsigned int *)(a1 + 7408);
          v152 = *(_DWORD *)(a1 + 7412);
          v153 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v150 + 24))(v150);
          if (v154 <= v151)
          {
            v155 = 0x100000000;
            v153 = (WTF::PrintStream *)"";
            goto LABEL_117;
          }
          LODWORD(v155) = v152 - v151;
          if ((int)v154 - (int)v151 <= (v152 - v151))
          {
            LODWORD(v155) = v154 - v151;
            if (!(_DWORD)v151)
            {
              v155 = v154;
              goto LABEL_117;
            }
          }
          v155 = v155;
          v156 = v154 - v151;
          if ((v154 & 0xFF00000000) != 0)
          {
            if (v156 >= v155)
            {
              v153 = (WTF::PrintStream *)((char *)v153 + v151);
              v155 = v155 | 0x100000000;
LABEL_117:
              v267 = v153;
              v268 = v155;
              if (a3 >= 5)
              {
                __break(0xC471u);
                JUMPOUT(0x197EC58D4);
              }
              v266 = off_1E357B2A0[(int)a3];
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[16]>(a1, (uint64_t)&v267, &v266);
LABEL_89:
              v19 = 0;
              goto LABEL_5;
            }
          }
          else if (v156 >= v155)
          {
            v153 = (WTF::PrintStream *)((char *)v153 + 2 * v151);
            goto LABEL_117;
          }
          goto LABEL_298;
        }
        if ((v14 - 531) <= 1)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_89;
          v157 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
          v158 = *(unsigned int *)(a1 + 7408);
          v159 = *(_DWORD *)(a1 + 7412);
          v160 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v157 + 24))(v157);
          if (v161 <= v158)
          {
            v162 = 0x100000000;
            v160 = (WTF::PrintStream *)"";
            goto LABEL_143;
          }
          LODWORD(v162) = v159 - v158;
          if ((int)v161 - (int)v158 <= (v159 - v158))
          {
            LODWORD(v162) = v161 - v158;
            if (!(_DWORD)v158)
            {
              v162 = v161;
              goto LABEL_143;
            }
          }
          v162 = v162;
          v163 = v161 - v158;
          if ((v161 & 0xFF00000000) != 0)
          {
            if (v163 >= v162)
            {
              v160 = (WTF::PrintStream *)((char *)v160 + v158);
              v162 = v162 | 0x100000000;
LABEL_143:
              v267 = v160;
              v268 = v162;
              if (a3 >= 5)
              {
                __break(0xC471u);
                JUMPOUT(0x197EC5978);
              }
              v266 = off_1E357B2A0[(int)a3];
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*>(a1, (uint64_t)&v267, &v266);
              goto LABEL_89;
            }
          }
          else if (v163 >= v162)
          {
            v160 = (WTF::PrintStream *)((char *)v160 + 2 * v158);
            goto LABEL_143;
          }
LABEL_298:
          __break(1u);
          goto LABEL_299;
        }
        if ((v14 & 0x200) != 0)
        {
          if ((v14 - 544) >= 3)
          {
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_89;
            v183 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
            v184 = *(unsigned int *)(a1 + 7408);
            v185 = *(_DWORD *)(a1 + 7412);
            v186 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v183 + 24))(v183);
            if (v187 <= v184)
            {
              v188 = 0x100000000;
              v186 = (WTF::PrintStream *)"";
            }
            else
            {
              LODWORD(v188) = v185 - v184;
              if ((int)v187 - (int)v184 > (v185 - v184) || (LODWORD(v188) = v187 - v184, (_DWORD)v184))
              {
                v188 = v188;
                v189 = v187 - v184;
                if ((v187 & 0xFF00000000) != 0)
                {
                  if (v189 < v188)
                    goto LABEL_298;
                  v186 = (WTF::PrintStream *)((char *)v186 + v184);
                  v188 = v188 | 0x100000000;
                }
                else
                {
                  if (v189 < v188)
                    goto LABEL_298;
                  v186 = (WTF::PrintStream *)((char *)v186 + 2 * v184);
                }
              }
              else
              {
                v188 = v187;
              }
            }
            v267 = v186;
            v268 = v188;
            if (a3 >= 5)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC59C4);
            }
            v266 = off_1E357B2A0[(int)a3];
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*>(a1, (uint64_t)&v267, &v266);
            goto LABEL_89;
          }
          if (v14 == 544)
          {
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v147 + 9) & 1) != 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                if (a3 >= 5)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EC5A2CLL);
                }
                v182 = (WTF::PrintStream *)off_1E357B2A0[(int)a3];
                v266 = "in strict mode";
                v267 = v182;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[2],char const*>(a1, (const char **)&v267, &v266);
              }
              goto LABEL_89;
            }
          }
          else if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v147 + 9) & 1) != 0
                 || (*(_BYTE *)(v148 + 720 * v147 + 11) & 2) != 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              if (a3 >= 5)
              {
                __break(0xC471u);
                JUMPOUT(0x197EC59E4);
              }
              v267 = (WTF::PrintStream *)off_1E357B2A0[(int)a3];
              if ((v149 & 1) != 0)
              {
                v191 = "in strict mode";
              }
              else
              {
                if ((*(_BYTE *)(v148 + 720 * v147 + 11) & 2) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EC5A4CLL);
                }
                v191 = "in a generator function";
              }
              v266 = v191;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[2],char const*>(a1, "Cannot use 'yield' as a ", (const char **)&v267, &v266);
            }
            goto LABEL_89;
          }
        }
        else if ((_DWORD)a3 != 4 && v14 == 13)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            if (a3 >= 4)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC59A4);
            }
            v267 = (WTF::PrintStream *)off_1E357B2C8[(int)a3];
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[32],char const*>(a1, "Cannot use a private name as a ", (const char **)&v267);
          }
          goto LABEL_89;
        }
        if (v14 == 20 || (v14 & 0x100000) != 0)
          goto LABEL_211;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a parameter pattern or a ')' in parameter list");
        goto LABEL_89;
      }
    }
    v259 = *(_DWORD *)(a1 + 12);
    if (!v259)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC5B60);
    }
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v259 - 1) + 9) & 1) == 0)
    {
      if (v14 == 544)
      {
        v12 = v265;
        if ((a3 - 1) <= 1)
        {
LABEL_51:
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[64]>(a1);
          goto LABEL_109;
        }
        goto LABEL_3;
      }
LABEL_262:
      v12 = v265;
      if (v14 != 1048592)
        goto LABEL_3;
LABEL_319:
      if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
        goto LABEL_3;
      goto LABEL_75;
    }
    if (v14 != 1048592)
    {
      v12 = v265;
      goto LABEL_88;
    }
    v257 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
    v258 = **(_QWORD **)(a1 + 7376);
    goto LABEL_313;
  }
  if (v14)
    goto LABEL_88;
  v30 = *(_DWORD *)(a1 + 7400);
  v31 = *(_DWORD *)(a1 + 7412);
  v32 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v30;
  *(_DWORD *)(a1 + 7448) = v31;
  *(_DWORD *)(a1 + 7452) = v32;
  v33 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v33 + 4) = v30;
  v34 = *(_DWORD *)(a1 + 12);
  if (!v34)
  {
    __break(0xC471u);
    JUMPOUT(0x197EC5AD4);
  }
  v35 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v34 - 1) + 9) & 1;
  *(_BYTE *)(v33 + 56) = 0;
  v42 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v33, a1 + 7368, 0, v35, (uint64_t)a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v42;
  if (a5)
    *a5 = 1;
  v264 = v27 + 1;
  v263 = "Expected either a closing '}' or an ',' after a property destructuring pattern";
  while (v42 != 37)
  {
    if (v42 == 1)
    {
      v263 = "Expected either a closing '}' or an ',' after a property destructuring pattern";
      v12 = v265;
      goto LABEL_131;
    }
    if (v42 <= 544)
    {
      switch(v42)
      {
        case 4:
          v43 = *(_DWORD *)(a1 + 12);
          v44 = *(_DWORD *)(a1 + 7400);
          v45 = *(_DWORD *)(a1 + 7412);
          v46 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v44;
          *(_DWORD *)(a1 + 7448) = v45;
          *(_DWORD *)(a1 + 7452) = v46;
          v47 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v47 + 4) = v44;
          if (!v43)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC5A9CLL);
          }
          v48 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v43 - 1) + 9) & 1;
          *(_BYTE *)(v47 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v47, a1 + 7368, 0, v48, v38, v39, v40, v41);
          LODWORD(v267) = 0;
          v268 = *(_QWORD *)(a1 + 7496);
          v269 = a1;
          *(_QWORD *)(a1 + 7496) = &v267;
          v54 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, (uint64_t)&v267, v49, v50, v51, v52, v53);
          *(_QWORD *)(v269 + 7496) = v268;
          v55 = *(_DWORD *)(a1 + 7368);
          if (!v54)
          {
            if (v55 != 20 && (v55 & 0x100000) == 0)
            {
              v12 = v265;
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse computed property name");
              goto LABEL_89;
            }
LABEL_126:
            JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
            goto LABEL_109;
          }
          if (v55 != 5)
          {
            if (v55 != 20 && (v55 & 0x100000) == 0)
            {
              v12 = v265;
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected ']' to end end a computed property name");
              goto LABEL_89;
            }
            goto LABEL_126;
          }
          NumericIdentifier = 0;
          break;
        case 5:
        case 6:
        case 7:
        case 8:
        case 13:
          goto LABEL_44;
        case 9:
        case 10:
          v190 = *(unint64_t **)(a1 + 7248);
          if (!v190)
          {
            v190 = (unint64_t *)WTF::fastMalloc((WTF *)0x818);
            v190[1] = 0;
            v190[2] = 0;
            *v190 = 0;
            WTF::SegmentedVector<JSC::Identifier,64ul>::clear(v190, v215, v216, v217, v218, v219, v220, v221);
            bzero(v190 + 3, 0x800uLL);
            v223 = *(unint64_t **)(a1 + 7248);
            *(_QWORD *)(a1 + 7248) = v190;
            if (v223)
            {
              WTF::SegmentedVector<JSC::Identifier,64ul>::~SegmentedVector(v223, v222, (uint64_t)v36, v37, v38, v39, v40, v41);
              WTF::fastFree(v224, v225, v226, v227, v228, v229, v230, v231);
              v190 = *(unint64_t **)(a1 + 7248);
            }
          }
          NumericIdentifier = (WTF::AtomStringImpl *)JSC::IdentifierArena::makeNumericIdentifier((JSC::IdentifierArena *)v190, *(uint64_t ***)(a1 + 7216), *(double *)(a1 + 7376), v36, v37, v38, v39, v40, v41);
          goto LABEL_21;
        case 11:
          v195 = *(unint64_t **)(a1 + 7248);
          if (!v195)
          {
            v195 = (unint64_t *)WTF::fastMalloc((WTF *)0x818);
            v195[1] = 0;
            v195[2] = 0;
            *v195 = 0;
            WTF::SegmentedVector<JSC::Identifier,64ul>::clear(v195, v234, v235, v236, v237, v238, v239, v240);
            bzero(v195 + 3, 0x800uLL);
            v248 = *(unint64_t **)(a1 + 7248);
            *(_QWORD *)(a1 + 7248) = v195;
            if (v248)
            {
              WTF::SegmentedVector<JSC::Identifier,64ul>::~SegmentedVector(v248, v241, v242, v243, v244, v245, v246, v247);
              WTF::fastFree(v249, v250, v251, v252, v253, v254, v255, v256);
              v195 = *(unint64_t **)(a1 + 7248);
            }
          }
          JSC::IdentifierArena::makeBigIntDecimalIdentifier((JSC::IdentifierArena *)v195, *(JSC::VM **)(a1 + 7216), *(const JSC::Identifier **)(a1 + 7376), v9[40]);
          NumericIdentifier = v196;
          if (v196)
            goto LABEL_21;
          if (*v13 == 20 || (*v13 & 0x100000) != 0)
            goto LABEL_126;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse big int property name");
          goto LABEL_109;
        case 12:
          goto LABEL_26;
        case 14:
          goto LABEL_45;
        default:
          if ((v42 - 531) < 2)
            goto LABEL_45;
          if (v42 != 544)
            goto LABEL_44;
          v110 = *(_DWORD *)(a1 + 12);
          if (!v110)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC5ABCLL);
          }
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v110 - 1) + 9) & 1) != 0)
            goto LABEL_45;
          if ((a3 - 3) >= 0xFFFFFFFE)
            goto LABEL_51;
          goto LABEL_26;
      }
      goto LABEL_21;
    }
    if (v42 != 1048592)
    {
      if (v42 == 545)
      {
        v213 = *(_DWORD *)(a1 + 12);
        if (!v213)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC5A94);
        }
        v214 = v213 - 1;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v214 + 9) & 1) != 0
          || (*(_BYTE *)(*(_QWORD *)a1 + 720 * v214 + 11) & 2) != 0)
        {
          goto LABEL_45;
        }
      }
      else if (v42 != 546)
      {
LABEL_44:
        if ((v42 & 0x200) == 0)
        {
          if ((_DWORD)a3 == 5)
            goto LABEL_109;
          if (v42 != 20 && (v42 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected a property name");
            goto LABEL_109;
          }
          goto LABEL_126;
        }
LABEL_45:
        NumericIdentifier = *(WTF::AtomStringImpl **)(a1 + 7376);
LABEL_21:
        v57 = *(_DWORD *)(a1 + 7400);
        v58 = *(_DWORD *)(a1 + 7412);
        v59 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v57;
        *(_DWORD *)(a1 + 7448) = v58;
        *(_DWORD *)(a1 + 7452) = v59;
        v60 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v60 + 4) = v57;
        v61 = *(_DWORD *)(a1 + 12);
        if (!v61)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC5ACCLL);
        }
        v62 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v61 - 1) + 9) & 1;
        *(_BYTE *)(v60 + 56) = 0;
        v63 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v60, a1 + 7368, 0, v62, v38, v39, v40, v41);
        *(_DWORD *)(a1 + 7368) = v63;
        if (v63 != 18)
        {
          if ((_DWORD)a3 == 5)
            goto LABEL_109;
          if (v42 == 531)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              v267 = *(WTF::PrintStream **)NumericIdentifier;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[64],WTF::UniquedStringImpl *,char const(&)[2]>(a1, &v267);
            }
            goto LABEL_109;
          }
          if (v42 == 532)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              v267 = *(WTF::PrintStream **)NumericIdentifier;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[64],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v267);
            }
            goto LABEL_109;
          }
          if ((v42 & 0x200) != 0)
          {
LABEL_226:
            if (!*(_QWORD *)(a1 + 7360))
            {
              v267 = *(WTF::PrintStream **)NumericIdentifier;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[58],WTF::UniquedStringImpl *,char const(&)[2]>(a1, &v267);
            }
            goto LABEL_109;
          }
          if (v63 != 20 && (v63 & 0x100000) == 0)
          {
            v12 = v265;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ':' prior to a named destructuring property");
            goto LABEL_89;
          }
          goto LABEL_126;
        }
        v68 = *(_DWORD *)(a1 + 7400);
        v69 = *(_DWORD *)(a1 + 7412);
        v70 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v68;
        *(_DWORD *)(a1 + 7448) = v69;
        *(_DWORD *)(a1 + 7452) = v70;
        v71 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v71 + 4) = v68;
        v72 = *(_DWORD *)(a1 + 12);
        if (!v72)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC5AC4);
        }
        v73 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v72 - 1) + 9) & 1;
        *(_BYTE *)(v71 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v71, a1 + 7368, 0, v73, v64, v65, v66, v67);
        v76 = JSC::Parser<JSC::Lexer<char16_t>>::parseBindingOrAssignmentElement<JSC::SyntaxChecker>(a1, a2, a3, (uint64_t)a4, (uint64_t)a5, v264, v74, v75);
        v12 = v265;
        goto LABEL_30;
      }
    }
LABEL_26:
    NumericIdentifier = *(WTF::AtomStringImpl **)(a1 + 7376);
    v83 = *(_DWORD *)(a1 + 7368);
    v84 = *(_DWORD *)(a1 + 7400);
    v85 = *(_DWORD *)(a1 + 7412);
    v86 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v84;
    *(_DWORD *)(a1 + 7448) = v85;
    *(_DWORD *)(a1 + 7452) = v86;
    v87 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v87 + 4) = v84;
    v88 = *(_DWORD *)(a1 + 12);
    if (!v88)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC5A54);
    }
    v89 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v88 - 1) + 9) & 1;
    *(_BYTE *)(v87 + 56) = 0;
    v90 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v87, a1 + 7368, 0, v89, v38, v39, v40, v41);
    *(_DWORD *)(a1 + 7368) = v90;
    if (v90 == 18)
    {
      v95 = *(_DWORD *)(a1 + 7400);
      v96 = *(_DWORD *)(a1 + 7412);
      v97 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v95;
      *(_DWORD *)(a1 + 7448) = v96;
      *(_DWORD *)(a1 + 7452) = v97;
      v98 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v98 + 4) = v95;
      v99 = *(_DWORD *)(a1 + 12);
      v12 = v265;
      if (!v99)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC5A8CLL);
      }
      v100 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v99 - 1) + 9) & 1;
      *(_BYTE *)(v98 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v98, a1 + 7368, 0, v100, v91, v92, v93, v94);
      v76 = JSC::Parser<JSC::Lexer<char16_t>>::parseBindingOrAssignmentElement<JSC::SyntaxChecker>(a1, a2, a3, (uint64_t)a4, (uint64_t)a5, v264, v101, v102);
    }
    else
    {
      if (v42 == 1048592)
        goto LABEL_226;
      v12 = v265;
      if (v83 == 546
        || v83 == 1048592
        && *(_QWORD *)NumericIdentifier == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
        if (!*v9)
          goto LABEL_360;
        v260 = *(_DWORD *)(a1 + 12);
        if (!v260)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC5AB4);
        }
        v12 = v265;
        if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v260 - 1) + 10) & 0x102000) != 0
          || *(_DWORD *)(a1 + 7480) == 1)
        {
LABEL_360:
          if (!*(_QWORD *)(a1 + 7360))
          {
            v267 = (WTF::PrintStream *)JSC::destructuringKindToVariableKindName(a3);
            v266 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
            goto LABEL_266;
          }
          goto LABEL_109;
        }
      }
      if ((_DWORD)a3 != 5)
      {
        v76 = JSC::Parser<JSC::Lexer<char16_t>>::createBindingPattern<JSC::SyntaxChecker>(a1, a3, NumericIdentifier, a4, v91, v92, v93, v94);
        goto LABEL_32;
      }
      v192 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      v193 = *(WTF::PrintStream **)(v192 + 1248);
      v194 = *(WTF::PrintStream **)NumericIdentifier;
      if (v193 == *(WTF::PrintStream **)NumericIdentifier || *(WTF::PrintStream **)(v192 + 880) == v194)
      {
        v232 = *(_DWORD *)(a1 + 12);
        if (!v232)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC5AACLL);
        }
        v12 = v265;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v232 - 1) + 9) & 1) != 0)
        {
          v233 = *(_DWORD **)(a1 + 7496);
          if (v233 && *v233 == 1)
            *v233 = 0;
          if (!*(_QWORD *)(a1 + 7360))
          {
            v267 = v194;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v267);
          }
          goto LABEL_109;
        }
      }
      if (v90 == 21)
      {
        v212 = *(_DWORD *)(a1 + 12);
        if (!v212)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC5AA4);
        }
        JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v212 - 1), (uint64_t)v194, v193 == v194);
      }
      v76 = JSC::Parser<JSC::Lexer<char16_t>>::createBindingPattern<JSC::SyntaxChecker>(a1, 5, NumericIdentifier, a4, v91, v92, v93, v94);
    }
LABEL_30:
    if ((_DWORD)a3 == 5 && !v76)
      goto LABEL_89;
LABEL_32:
    if (!v76)
      goto LABEL_228;
    JSC::Parser<JSC::Lexer<char16_t>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, a2, v77, v78, v79, v80, v81, v82);
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_89;
    v103 = *v13;
    if (*v13 != 6)
      goto LABEL_132;
    v104 = *(_DWORD *)(a1 + 7400);
    v105 = *(_DWORD *)(a1 + 7412);
    v106 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v104;
    *(_DWORD *)(a1 + 7448) = v105;
    *(_DWORD *)(a1 + 7452) = v106;
    v107 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v107 + 4) = v104;
    v108 = *(_DWORD *)(a1 + 12);
    if (!v108)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC5A5CLL);
    }
    v109 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v108 - 1) + 9) & 1;
    *(_BYTE *)(v107 + 56) = 0;
    v42 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v107, a1 + 7368, 0, v109, v38, v39, v40, v41);
    *(_DWORD *)(a1 + 7368) = v42;
  }
  v165 = *(_DWORD *)(a1 + 7400);
  v166 = *(_DWORD *)(a1 + 7412);
  v167 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v165;
  *(_DWORD *)(a1 + 7448) = v166;
  *(_DWORD *)(a1 + 7452) = v167;
  v168 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v168 + 4) = v165;
  v169 = *(_DWORD *)(a1 + 12);
  if (!v169)
  {
    __break(0xC471u);
    JUMPOUT(0x197EC5B10);
  }
  v170 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v169 - 1) + 9) & 1;
  *(_BYTE *)(v168 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v168, a1 + 7368, 0, v170, v38, v39, v40, v41);
  v175 = JSC::Parser<JSC::Lexer<char16_t>>::parseObjectRestBindingOrAssignmentElement<JSC::SyntaxChecker>(a1, a2, a3, a4, v171, v172, v173, v174);
  v19 = 0;
  v12 = v265;
  if (!*(_QWORD *)(a1 + 7360) && v175)
  {
    v263 = "Expected a closing '}' following a rest element destructuring pattern";
LABEL_131:
    v103 = *v13;
LABEL_132:
    if ((_DWORD)a3 != 5)
    {
      if (v103 == 1)
        goto LABEL_134;
      if (v103 != 20 && (v103 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v267 = (WTF::PrintStream *)v263;
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const*>(a1, 1, (const char **)&v267);
        }
        goto LABEL_89;
      }
LABEL_211:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      goto LABEL_89;
    }
    if (v103 != 1)
      goto LABEL_89;
LABEL_134:
    v176 = *(_DWORD *)(a1 + 7400);
    v177 = *(_DWORD *)(a1 + 7412);
    v178 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v176;
    *(_DWORD *)(a1 + 7448) = v177;
    *(_DWORD *)(a1 + 7452) = v178;
    v179 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v179 + 4) = v176;
    v180 = *(_DWORD *)(a1 + 12);
    if (!v180)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC5ADCLL);
    }
    v181 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v180 - 1) + 9) & 1;
    *(_BYTE *)(v179 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v179, a1 + 7368, 0, v181, v38, v39, v40, v41);
    v19 = 34;
  }
LABEL_5:
  *(_DWORD *)(a1 + 7300) = v12;
  return v19;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  if (*(_DWORD *)(a1 + 7368) != 21)
    return 0;
  v10 = *(_DWORD *)(a1 + 7400);
  v11 = *(_DWORD *)(a1 + 7412);
  v12 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v10;
  *(_DWORD *)(a1 + 7448) = v11;
  *(_DWORD *)(a1 + 7452) = v12;
  v13 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v13 + 4) = v10;
  v14 = *(_DWORD *)(a1 + 12);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197EC5D44);
  }
  v16 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v14 - 1) + 9) & 1;
  *(_BYTE *)(v13 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v13, a1 + 7368, 2, v16, a5, a6, a7, a8);
  v22 = 0;
  v23 = *(_QWORD *)(a1 + 7496);
  v24 = a1;
  *(_QWORD *)(a1 + 7496) = &v22;
  result = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, (uint64_t)&v22, v17, v18, v19, v20, v21);
  *(_QWORD *)(v24 + 7496) = v23;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseBindingOrAssignmentElement<JSC::SyntaxChecker>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((_DWORD)a3 == 5)
    return JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentElement<JSC::SyntaxChecker>(a1, a2, a4, a5, a6, a6, a7, a8);
  else
    return JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, a3, a4, a5, a6);
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseObjectRestBindingOrAssignmentElement<JSC::SyntaxChecker>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, char ***a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((_DWORD)a3 == 5)
    return JSC::Parser<JSC::Lexer<char16_t>>::parseObjectRestAssignmentElement<JSC::SyntaxChecker>(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  else
    return JSC::Parser<JSC::Lexer<char16_t>>::parseObjectRestElement<JSC::SyntaxChecker>(a1, a3, a4, (uint64_t)a4, a5, a6, a7, a8);
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::createBindingPattern<JSC::SyntaxChecker>(uint64_t a1, int a2, WTF::AtomStringImpl *a3, char ***a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;

  if (a2 != 4)
  {
    if ((a2 - 1) < 3)
    {
      if (a2 == 2)
        v11 = 2;
      else
        v11 = 1;
      v12 = JSC::Parser<JSC::Lexer<char16_t>>::declareVariable(a1, a3, v11, 2, a5, a6, a7, a8);
      if (!v12)
        return 31;
      if ((v12 & 1) == 0)
      {
LABEL_10:
        if (v12 < 2)
          return 31;
        v13 = *(_DWORD *)(a1 + 7368);
        if (v13 == 20 || (v13 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          v17 = *(_QWORD *)a3;
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 1, "Cannot declare a lexical variable twice: '", &v17);
        }
        return 0;
      }
      v16 = *(_DWORD *)(a1 + 12);
      if (v16)
      {
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v16 - 1) + 9) & 1) != 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v17 = *(_QWORD *)a3;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(a1, "Cannot destructure to a variable named '", &v17);
          }
          return 0;
        }
        goto LABEL_10;
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x197EC5F1CLL);
    }
    if (a2)
      return 31;
    v14 = JSC::Parser<JSC::Lexer<unsigned char>>::declareHoistedVariable((uint64_t *)a1, a3, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if ((v14 & 1) != 0)
    {
      v15 = *(_DWORD *)(a1 + 12);
      if (!v15)
        goto LABEL_30;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v15 - 1) + 9) & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v17 = *(_QWORD *)a3;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(a1, "Cannot declare a variable named '", &v17);
        }
        return 0;
      }
    }
    if (v14 < 2)
      return 31;
    if (!*(_QWORD *)(a1 + 7360))
    {
      v17 = *(_QWORD *)a3;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[73],WTF::UniquedStringImpl *,char const(&)[2]>(a1, &v17);
    }
    return 0;
  }
  JSC::Parser<JSC::Lexer<char16_t>>::declareRestOrNormalParameter(a1, a3, a4, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(a1 + 7360))
    return 31;
  return 0;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(uint64_t a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 0;
  v3 = *(_QWORD *)(a1 + 7496);
  v4 = a1;
  *(_QWORD *)(a1 + 7496) = &v2;
  result = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>();
  *(_QWORD *)(v4 + 7496) = v3;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentElement<JSC::SyntaxChecker>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  int v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  _BYTE *v16;
  _DWORD *v17;
  _OWORD *v18;
  int v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  WTF::AtomStringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;

  if ((*(_DWORD *)(a1 + 7368) | 4) == 4)
  {
    v16 = (_BYTE *)(a1 + 7344);
    v17 = (_DWORD *)(a1 + 7368);
    v18 = (_OWORD *)(a1 + 7296);
    v55 = *(_OWORD *)(a1 + 7296);
    v19 = *(_DWORD *)(a1 + 7316);
    v54 = *(_QWORD *)(a1 + 7336);
    v53 = *(_OWORD *)(a1 + 7320);
    v51 = *(_BYTE *)(a1 + 7344);
    v52 = v19;
    v50 = *(_BYTE *)(a1 + 7345);
    v20 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
    v21 = *(unsigned int *)(a1 + 7404);
    v22 = *(int **)(a1 + 7288);
    v24 = *v22;
    v23 = v22[1];
    v25 = *((_BYTE *)v22 + 56);
    result = JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 5, a3, a4, a5);
    if ((_DWORD)result && (*v17 > 0x13u || ((1 << *v17) & 0x80114) == 0))
      return result;
    JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), v20, v21, v26, v27, v28, v29, v30);
    v35 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v35 = v24;
    *(_BYTE *)(v35 + 56) = v25;
    v36 = *(_DWORD *)(a1 + 7400);
    v37 = *(_DWORD *)(a1 + 7412);
    v38 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v36;
    *(_DWORD *)(a1 + 7448) = v37;
    *(_DWORD *)(a1 + 7452) = v38;
    *(_DWORD *)(v35 + 4) = v36;
    v39 = *(_DWORD *)(a1 + 12);
    if (!v39)
      goto LABEL_25;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v35, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v39 - 1) + 9) & 1, v31, v32, v33, v34);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v23;
    *v18 = v55;
    *(_DWORD *)(a1 + 7312) = 0;
    *(_DWORD *)(a1 + 7316) = v52;
    *(_OWORD *)(a1 + 7320) = v53;
    *(_QWORD *)(a1 + 7336) = v54;
    *v16 = v51;
    *(_BYTE *)(a1 + 7345) = v50;
    v41 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::~StringImpl(v41, v40, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
  }
  v10 = JSC::Parser<JSC::Lexer<char16_t>>::parseMemberExpression<JSC::SyntaxChecker>(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v10 > 0x30 || (v11 = v10, ((1 << v10) & 0x1000002030004) == 0))
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Invalid destructuring assignment target");
    return 0;
  }
  v12 = *(_DWORD *)(a1 + 12);
  if (!v12)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x197EC6210);
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v12 - 1) + 9) & 1) == 0)
    return 31;
  v13 = *(_QWORD **)(a1 + 7320);
  result = 31;
  if (v13)
  {
    if (v11 - 1 <= 1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      if (*(_QWORD *)(v15 + 1248) == *v13 || *(_QWORD *)(v15 + 880) == *v13)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v53 = *v13;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v53);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseMemberExpression<JSC::SyntaxChecker>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  const char *v9;
  unsigned __int8 *v11;
  int v12;
  char *v13;
  _BOOL4 v14;
  uint64_t v15;
  _BOOL4 v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned __int8 v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  char v84;
  int v85;
  int v86;
  BOOL v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  int v94;
  unsigned int *v95;
  unsigned int v96;
  uint64_t v97;
  char v98;
  unsigned __int16 *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unsigned __int16 *v105;
  unsigned __int16 *v106;
  unsigned int v107;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  unsigned __int8 *v118;
  uint64_t v119;
  int *v120;
  int v121;
  int v122;
  WTF *v123;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int v154;
  int v155;
  int v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  int v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  int v175;
  int v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  int v180;
  int v181;
  _DWORD *v182;
  int v183;
  int v184;
  int v185;
  int v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  int *v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  int v197;
  int v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  int v204;
  int v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t *v210;
  int v211;
  int v212;
  int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  const WTF::StringImpl *v218;
  unint64_t v219;
  uint64_t v220;
  unsigned __int16 *v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _BYTE *v230;
  size_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  size_t v238;
  int *v239;
  _BYTE *v240;
  int v241;
  int v242;
  int v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  uint64_t *v247;
  int v248;
  int v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  int v254;
  uint64_t v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int *v262;
  int v263;
  int *v264;
  unsigned int v265;
  uint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  uint64_t v269;
  int v270;
  int v271;
  int v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  int v276;
  int v277;
  int v278;
  int v279;
  uint64_t v280;
  int v281;
  uint64_t v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  uint64_t v288;
  char *v289;
  uint64_t v290;
  int v291;
  int v292;
  int v293;
  int v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  int v299;
  int v300;
  int v301;
  int v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  uint64_t v313;
  int v314;
  uint64_t v315;
  int v317;
  int v318;
  int v319;
  unint64_t v321;
  void *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  _OWORD *v329;
  uint64_t v330;
  __int128 v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  uint64_t v338;
  int v340;
  uint64_t v341;
  void *v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int v350;
  int v352;
  int v353;
  int v354;
  unsigned int v355;
  unsigned int v356;
  uint64_t v357;
  int v358;
  unsigned int v359;
  unsigned int v360;
  unsigned __int8 *v361;
  unsigned int v362;
  unsigned int v363;
  int v364;
  int v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  unsigned int v370;
  unsigned int v371;
  unsigned int v372;
  int v373;
  unsigned int v374;
  unsigned int v375;
  unsigned int v376;
  unsigned int v377;
  uint64_t v378;
  const char *v379;
  int v380;
  unsigned int v381;
  uint64_t v382;
  int v383;
  WTF::AtomStringImpl *v384;
  unint64_t v385;
  int v386;
  int v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  int v391;
  uint64_t v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  uint64_t v398;
  int v399;
  const char *v400;
  uint64_t v401;
  int v402;
  int v403;
  int v404;
  int v405;
  unsigned int v406;
  int v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int v413;
  unsigned int v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  int v418;
  int v419;
  int v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  const char *v428;
  uint64_t v429;
  WTF::StringImpl *v430;
  uint64_t v431;
  unint64_t v432;
  __int16 *v433;
  __int16 v434;
  uint64_t v435;
  int v436;
  int v437;
  int v438;
  int v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  WTF::StringImpl *v443;
  int v444;
  const char *v445;
  uint64_t *v446;
  unsigned int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  int v451;
  const char *v452;
  unsigned __int8 *v453;
  const char *v454;
  unsigned __int8 *v455;
  int v456;
  int v457;
  uint64_t v458;
  int v459;
  uint64_t v460;
  unsigned __int8 *v461;
  int v462;
  int v463;
  int v464;
  uint64_t v465;
  int v466;
  uint64_t v467;
  unsigned __int8 *v468;
  const char *v469;
  unsigned __int8 *v470;
  int v471;
  _DWORD *v472;
  unsigned __int8 *v473;
  const char *v474;
  unsigned __int8 *v475;
  int v476;
  int v477;
  uint64_t v478;
  int v479;
  uint64_t v480;
  int v481;
  _DWORD *v482;
  unsigned __int8 *v483;
  unsigned __int8 *v484;
  unsigned __int8 *v485;
  int v486;
  int v487;
  unsigned int v488;
  uint64_t v489;
  unsigned int v490;
  _DWORD *v491;
  unsigned int v492;
  uint64_t *v493;
  uint64_t v494;
  uint64_t v495;
  unint64_t *v496;
  _DWORD *v497;
  unsigned __int8 *v498;
  int v499;
  int v500;
  uint64_t v501;
  int v502;
  uint64_t v503;
  unsigned __int8 *v504;
  int v505;
  int v506;
  uint64_t v507;
  int v508;
  uint64_t v509;
  int v510;
  unsigned __int8 *v511;
  unint64_t v512;
  void *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  void *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unsigned __int8 *v528;
  int v529;
  int v530;
  uint64_t v531;
  int v532;
  uint64_t v533;
  int v534;
  int v535;
  int v536;
  int v537;
  uint64_t v538;
  int v539;
  uint64_t v540;
  int v541;
  uint64_t v542;
  const char *v543;
  uint64_t v544;
  int v545;
  unint64_t v546;
  void *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  int v555;
  uint64_t v556;
  unint64_t v557;
  unint64_t v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  int v563;
  uint64_t v564;
  const char *v566;
  unsigned __int8 *v567;
  int v568;
  int v569;
  int v570;
  int v571;
  uint64_t v572;
  uint64_t v573;
  int v574;
  uint64_t v575;
  int v576;
  int v577;
  int v578;
  int v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  int v585;
  int v586;
  int v587;
  uint64_t v588;
  int v589;
  uint64_t v590;
  char v591;
  unsigned __int8 v592;
  unsigned __int8 *v593;
  int v594;
  int v595;
  uint64_t v596;
  int v597;
  uint64_t v598;
  int v599;
  const char *v600;
  unsigned __int8 *v601;
  int v602;
  unsigned __int8 *v603;
  const char *v604;
  unsigned __int8 *v605;
  int v606;
  int v607;
  uint64_t v608;
  int v609;
  uint64_t v610;
  unsigned __int8 *v611;
  int v612;
  int v613;
  int v614;
  uint64_t v615;
  int v616;
  uint64_t v617;
  unsigned __int8 *v618;
  unsigned __int8 *v619;
  int v620;
  int v621;
  int v622;
  uint64_t v623;
  int v624;
  uint64_t v625;
  int v626;
  int v627;
  int v628;
  int v629;
  int v630;
  int v631;
  uint64_t v632;
  int v633;
  uint64_t v634;
  int v635;
  int v636;
  int v637;
  int v638;
  uint64_t v639;
  int v640;
  uint64_t v641;
  int v642;
  unsigned __int8 *v643;
  int v644;
  int v645;
  int v646;
  int v647;
  uint64_t v648;
  int v649;
  uint64_t v650;
  unsigned __int8 *v651;
  const char *v652;
  unsigned __int8 *v653;
  unsigned __int8 *v654;
  const char *v656;
  const char *v658;
  uint64_t v659;
  int v660;
  const char *v661;
  unsigned int v662;
  uint64_t v663;
  unsigned int v664;
  unsigned int v665;
  const char *v666;
  int v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  int v672;
  uint64_t v673;
  int v674;
  int v675;
  uint64_t v676;
  int v677;
  uint64_t v678;
  int v679;
  unsigned int v680;
  unsigned int v681;
  unsigned int v682;
  unsigned int v683;
  uint64_t v684;
  int v685;
  _BOOL4 v686;
  int v687;
  int v688;
  int v689;
  int v690;
  int v691;
  uint64_t v692;
  uint64_t v693;
  int v694;
  unsigned __int8 *v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  __int128 v699;
  _QWORD *v700;
  uint64_t v701;
  int v702;
  int v703;
  unsigned int v704;
  unsigned __int8 *v705;
  int v706;
  int v707;
  int v708;
  uint64_t v709;
  int v710;
  uint64_t v711;
  int v712;
  int v713;
  int v714;
  int v715;
  uint64_t v716;
  int v717;
  uint64_t v718;
  int v719;
  int v720;
  int v721;
  uint64_t v722;
  int v723;
  uint64_t v724;
  int v725;
  int v726;
  int v727;
  int v728;
  uint64_t v729;
  int v730;
  uint64_t v731;
  int v732;
  uint64_t v733;
  int v734;
  unsigned int v735;
  size_t __len;
  _QWORD *v737;
  const char *v738;
  unsigned __int8 *v739;
  unint64_t v740;
  int *v741;
  __int128 v742;
  WTF *v743;
  uint64_t v744;
  _BYTE v745[24];
  __int128 v746;

  v9 = (const char *)a2;
  v11 = (unsigned __int8 *)(a1 + 7344);
  v741 = (int *)(a1 + 7368);
  v743 = 0;
  v744 = 0;
  v12 = *(_DWORD *)(a1 + 7368);
  if (v12 != 519)
  {
    if (v12 != 543)
    {
      v13 = 0;
      v14 = 0;
      goto LABEL_4;
    }
    v13 = 0;
    goto LABEL_317;
  }
  v8 = 720;
  do
  {
    if (HIDWORD(v744) == (_DWORD)v744)
    {
      v288 = WTF::Vector<JSC::JSTextPosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v743, HIDWORD(v744) + 1, a1 + 7416);
      v289 = (char *)v743 + 12 * HIDWORD(v744);
      v290 = *(_QWORD *)v288;
      v291 = *(_DWORD *)(v288 + 8);
    }
    else
    {
      v289 = (char *)v743 + 12 * HIDWORD(v744);
      v290 = *(_QWORD *)(a1 + 7416);
      v291 = *(_DWORD *)(a1 + 7424);
    }
    *((_DWORD *)v289 + 2) = v291;
    *(_QWORD *)v289 = v290;
    ++HIDWORD(v744);
    v292 = *(_DWORD *)(a1 + 7400);
    v293 = *(_DWORD *)(a1 + 7412);
    v294 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v292;
    *(_DWORD *)(a1 + 7448) = v293;
    *(_DWORD *)(a1 + 7452) = v294;
    v295 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v295 + 4) = v292;
    v296 = *(_DWORD *)(a1 + 12);
    if (!v296)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC9BD8);
    }
    v297 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v296 - 1) + 9) & 1;
    *(_BYTE *)(v295 + 56) = 0;
    v12 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v295, (uint64_t)v741, 0, v297, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v12;
  }
  while (v12 == 519);
  v13 = (char *)HIDWORD(v744);
  v14 = HIDWORD(v744) != 0;
  v87 = v12 == 543;
  if (v12 == 19 && HIDWORD(v744) != 0)
  {
    v593 = v11;
    v469 = v9;
    v470 = v593;
    LODWORD(v593) = *(_DWORD *)(a1 + 7400);
    v594 = *(_DWORD *)(a1 + 7412);
    v595 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = (_DWORD)v593;
    *(_DWORD *)(a1 + 7448) = v594;
    *(_DWORD *)(a1 + 7452) = v595;
    v596 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v596 + 4) = (_DWORD)v593;
    v597 = *(_DWORD *)(a1 + 12);
    if (!v597)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC9CE0);
    }
    v598 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v597 - 1) + 9) & 1;
    *(_BYTE *)(v596 + 56) = 0;
    v599 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v596, (uint64_t)v741, 0, v598, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v599;
    if (v599 != 12)
      goto LABEL_455;
    if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 2408) && !v470[40])
    {
      v680 = *(_DWORD *)(a1 + 12);
      v681 = v680 - 1;
      v682 = v680 - 1;
      while (1)
      {
        v683 = v682;
        if (!v682)
          break;
        if (!v680)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC9D40);
        }
        v684 = *(_QWORD *)a1;
        v685 = *(_DWORD *)(*(_QWORD *)a1 + 720 * v682-- + 10) & 0x405400;
        if (v685 == 0x400000)
        {
          v686 = v470[1] != 0;
          v687 = v470[192];
          if (!v470[192])
            goto LABEL_695;
LABEL_737:
          if (v680 <= v683)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9D50);
          }
          v684 = *(_QWORD *)a1;
          v687 = *(unsigned __int8 *)(*(_QWORD *)a1 + 720 * v683 + 14) - 1 < 2;
          goto LABEL_695;
        }
      }
      v686 = v470[1] != 0;
      if (v470[192])
        goto LABEL_737;
      if (!v680)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC9D48);
      }
      v683 = 0;
      v687 = 0;
      v684 = *(_QWORD *)a1;
LABEL_695:
      v688 = *(_DWORD *)(v684 + 720 * v681 + 10);
      if ((v688 & 0x100100) == 0 && ((v686 | v687) & 1) == 0)
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_38;
        v658 = "new.target is only valid inside functions or static blocks";
        v659 = a1;
        v660 = 0;
        goto LABEL_630;
      }
      if ((v688 & 0x800) != 0)
      {
        if (v680 <= v683)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC9D58);
        }
        if ((*(_BYTE *)(v684 + 720 * v683 + 12) & 1) != 0 && ((v686 | v687) & 1) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "new.target is not valid inside arrow functions in global code");
          goto LABEL_38;
        }
        *(_BYTE *)(v684 + 720 * v681 + 32) |= 0x20u;
      }
      --v13;
      v689 = *(_DWORD *)(a1 + 7400);
      v690 = *(_DWORD *)(a1 + 7412);
      v691 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v689;
      *(_DWORD *)(a1 + 7448) = v690;
      *(_DWORD *)(a1 + 7452) = v691;
      v692 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v692 + 4) = v689;
      v693 = *(_BYTE *)(v684 + 720 * v681 + 9) & 1;
      *(_BYTE *)(v692 + 56) = 0;
      v694 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v692, (uint64_t)v741, 0, v693, a5, a6, a7, a8);
      v88 = 0;
      *(_DWORD *)(a1 + 7368) = v694;
      LODWORD(v24) = 0x80000000;
      goto LABEL_542;
    }
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_38;
    v600 = "\"new.\" can only be followed with target";
    goto LABEL_540;
  }
  if (v12 == 543)
  {
LABEL_317:
    v355 = *(_DWORD *)(a1 + 12);
    if (!v355)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC9C58);
    }
    v356 = v355 - 1;
    v357 = *(_QWORD *)a1;
    v358 = *(_DWORD *)(a1 + 12);
    while (1)
    {
      v359 = v358 - 1;
      if (v358 == 1)
        break;
      --v358;
      v360 = v359;
      if ((*(_DWORD *)(v357 + 720 * v359 + 10) & 0x405400) == 0x400000)
        goto LABEL_321;
    }
    v360 = 0;
LABEL_321:
    v361 = v11;
    v362 = v355 - 1;
    do
    {
      v363 = v362;
      if (!v362)
        break;
      --v362;
    }
    while ((*(_BYTE *)(v357 + 720 * v363 + 13) & 8) == 0);
    if (v363 <= v359 && (*(_DWORD *)(v357 + 720 * v356 + 10) & 0x100) == 0)
    {
      if (v355 <= v359)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC9D20);
      }
      if ((*(_BYTE *)(v357 + 720 * v360 + 13) & 2) == 0 || *(_DWORD *)(v357 + 720 * v360 + 20))
      {
LABEL_340:
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "super is not valid in this context");
        goto LABEL_38;
      }
    }
    v364 = *(_DWORD *)(a1 + 7400);
    v365 = *(_DWORD *)(a1 + 7412);
    v366 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v364;
    *(_DWORD *)(a1 + 7448) = v365;
    *(_DWORD *)(a1 + 7452) = v366;
    v367 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v367 + 4) = v364;
    v368 = *(_BYTE *)(v357 + 720 * v356 + 9) & 1;
    *(_BYTE *)(v367 + 56) = 0;
    v369 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v367, (uint64_t)v741, 0, v368, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v369;
    v370 = *(_DWORD *)(a1 + 12);
    if (v369 != 2)
    {
      if (!v370)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC9C88);
      }
      v371 = v370 - 1;
      goto LABEL_329;
    }
    if (!v370)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC9C78);
    }
    v371 = v370 - 1;
    if (*(_BYTE *)(*(_QWORD *)a1 + 720 * (v370 - 1) + 14) != 2)
    {
LABEL_329:
      v372 = ~v371 + v370;
      v373 = *(_DWORD *)(a1 + 12);
      while (1)
      {
        v374 = v373 - 1;
        if (v373 == 1)
          break;
        --v373;
        v375 = v374;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v374 + 12) & 0x40) != 0)
          goto LABEL_332;
      }
      v375 = v372;
LABEL_332:
      if (v370 <= v374)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC9C60);
      }
      v376 = v375;
      *(_DWORD *)(*(_QWORD *)a1 + 720 * v375 + 10) |= 0x20u;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 148))
      {
        v88 = 0;
        LODWORD(v24) = 14;
        v87 = 1;
      }
      else
      {
        v377 = *(_DWORD *)(a1 + 12);
        if (v377 <= v374)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC9C68);
        }
        v378 = *(_QWORD *)a1;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v375 + 11) & 8) != 0)
          goto LABEL_600;
        if (v377 <= v359)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC9C70);
        }
        if ((*(_BYTE *)(v378 + 720 * v360 + 13) & 2) != 0)
        {
LABEL_600:
          if (v377 <= v359)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9D18);
          }
          v376 = v360;
        }
        v88 = 0;
        LODWORD(v24) = 14;
        v87 = 1;
        if (v363 <= v359)
        {
          v11 = v361;
          if (*(_DWORD *)(v378 + 720 * v376 + 20) != 1)
            goto LABEL_61;
          goto LABEL_340;
        }
      }
      v11 = v361;
      goto LABEL_61;
    }
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_38;
    v600 = "super call is not valid in this context";
LABEL_540:
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, v600);
    goto LABEL_38;
  }
LABEL_4:
  if (v12 == 539)
  {
    v528 = v11;
    v469 = v9;
    v470 = v528;
    LODWORD(v528) = *(_DWORD *)(a1 + 7400);
    v529 = *(_DWORD *)(a1 + 7412);
    v530 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = (_DWORD)v528;
    *(_DWORD *)(a1 + 7448) = v529;
    *(_DWORD *)(a1 + 7452) = v530;
    v531 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v531 + 4) = (_DWORD)v528;
    v532 = *(_DWORD *)(a1 + 12);
    if (!v532)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC9CC8);
    }
    v533 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v532 - 1) + 9) & 1;
    *(_BYTE *)(v531 + 56) = 0;
    v534 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v531, (uint64_t)v741, 0, v533, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v534;
    if (v534 == 19)
    {
      v535 = *(_DWORD *)(a1 + 7400);
      v536 = *(_DWORD *)(a1 + 7412);
      v537 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v535;
      *(_DWORD *)(a1 + 7448) = v536;
      *(_DWORD *)(a1 + 7452) = v537;
      v538 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v538 + 4) = v535;
      v539 = *(_DWORD *)(a1 + 12);
      if (!v539)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC9CD0);
      }
      v540 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v539 - 1) + 9) & 1;
      *(_BYTE *)(v538 + 56) = 0;
      v541 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v538, (uint64_t)v741, 0, v540, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v541;
      if (v541 != 12)
        goto LABEL_455;
      v542 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(v542 + 48) + 3888) && !v470[40])
      {
        if (*(_DWORD *)(a1 + 7480) == 1)
        {
          v667 = *(_DWORD *)(a1 + 12);
          if (!v667)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9D28);
          }
          JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v667 - 1), *(_QWORD *)(v542 + 96), 0);
          *(_QWORD *)(a1 + 7320) = v542 + 96;
          v672 = *(_DWORD *)(a1 + 12);
          if (!v672)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9D30);
          }
          v673 = *(_QWORD *)a1 + 720 * (v672 - 1);
          *(_DWORD *)(v673 + 10) |= 4u;
          LODWORD(v673) = *(_DWORD *)(a1 + 7400);
          v674 = *(_DWORD *)(a1 + 7412);
          v675 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v673;
          *(_DWORD *)(a1 + 7448) = v674;
          *(_DWORD *)(a1 + 7452) = v675;
          v676 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v676 + 4) = v673;
          v677 = *(_DWORD *)(a1 + 12);
          if (!v677)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9D38);
          }
          v678 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v677 - 1) + 9) & 1;
          *(_BYTE *)(v676 + 56) = 0;
          v679 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v676, (uint64_t)v741, 0, v678, v668, v669, v670, v671);
          v87 = 0;
          v88 = 0;
          *(_DWORD *)(a1 + 7368) = v679;
          LODWORD(v24) = -2147483647;
          goto LABEL_542;
        }
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_38;
        v543 = "import.meta is only valid inside modules";
        v544 = a1;
        v545 = 0;
LABEL_504:
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v544, v545, v543);
        goto LABEL_38;
      }
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_38;
      v543 = "\"import.\" can only be followed with meta";
LABEL_503:
      v544 = a1;
      v545 = 1;
      goto LABEL_504;
    }
    if (v14)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use new with import");
      goto LABEL_38;
    }
    if (v534 != 2)
    {
      if (v534 == 20 || (v534 & 0x100000) != 0)
        goto LABEL_455;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_38;
      v543 = "import call expects one or two arguments";
      goto LABEL_503;
    }
    v620 = *(_DWORD *)(a1 + 7400);
    v621 = *(_DWORD *)(a1 + 7412);
    v622 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v620;
    *(_DWORD *)(a1 + 7448) = v621;
    *(_DWORD *)(a1 + 7452) = v622;
    v623 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v623 + 4) = v620;
    v624 = *(_DWORD *)(a1 + 12);
    if (!v624)
    {
      __break(0xC471u);
      JUMPOUT(0x197EC9CF8);
    }
    v625 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v624 - 1) + 9) & 1;
    *(_BYTE *)(v623 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v623, (uint64_t)v741, 0, v625, a5, a6, a7, a8);
    v626 = *(_DWORD *)(a1 + 7300);
    v627 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1);
    v628 = *(_DWORD *)(a1 + 7368);
    if (v627)
    {
      if (v628 != 6)
        goto LABEL_589;
      v629 = *(_DWORD *)(a1 + 7400);
      v630 = *(_DWORD *)(a1 + 7412);
      v631 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v629;
      *(_DWORD *)(a1 + 7448) = v630;
      *(_DWORD *)(a1 + 7452) = v631;
      v632 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v632 + 4) = v629;
      v633 = *(_DWORD *)(a1 + 12);
      if (!v633)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC9D00);
      }
      v634 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v633 - 1) + 9) & 1;
      *(_BYTE *)(v632 + 56) = 0;
      v635 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v632, (uint64_t)v741, 0, v634, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v635;
      if (v635 == 3)
        goto LABEL_579;
      v644 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1);
      v628 = *(_DWORD *)(a1 + 7368);
      if (v644)
      {
        if (v628 == 6)
        {
          v645 = *(_DWORD *)(a1 + 7400);
          v646 = *(_DWORD *)(a1 + 7412);
          v647 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v645;
          *(_DWORD *)(a1 + 7448) = v646;
          *(_DWORD *)(a1 + 7452) = v647;
          v648 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v648 + 4) = v645;
          v649 = *(_DWORD *)(a1 + 12);
          if (!v649)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9D10);
          }
          v650 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v649 - 1) + 9) & 1;
          *(_BYTE *)(v648 + 56) = 0;
          v628 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v648, (uint64_t)v741, 0, v650, a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v628;
        }
LABEL_589:
        if (v628 == 3)
        {
LABEL_579:
          v636 = *(_DWORD *)(a1 + 7400);
          v637 = *(_DWORD *)(a1 + 7412);
          v638 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v636;
          *(_DWORD *)(a1 + 7448) = v637;
          *(_DWORD *)(a1 + 7452) = v638;
          v639 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v639 + 4) = v636;
          v640 = *(_DWORD *)(a1 + 12);
          if (!v640)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9D08);
          }
          v641 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v640 - 1) + 9) & 1;
          *(_BYTE *)(v639 + 56) = 0;
          v642 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v639, (uint64_t)v741, 0, v641, a5, a6, a7, a8);
          v87 = 0;
          v13 = 0;
          v88 = 0;
          *(_DWORD *)(a1 + 7368) = v642;
          *(_DWORD *)(a1 + 7300) = v626;
          LODWORD(v24) = 15;
          goto LABEL_542;
        }
        if (v628 != 20 && (v628 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "import call expects one or two arguments");
          goto LABEL_608;
        }
LABEL_607:
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_608:
        v24 = 0;
        *(_DWORD *)(a1 + 7300) = v626;
        goto LABEL_98;
      }
    }
    if (v628 != 20 && (v628 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[24]>(a1);
      goto LABEL_608;
    }
    goto LABEL_607;
  }
  v15 = *(_QWORD *)(a1 + 7216);
  v16 = v12 == 12 && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(v15 + 41952) + 896) && v11[40] == 0;
  if ((unint64_t)&v732 < *(_QWORD *)(v15 + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v11[8] = 1;
    }
    goto LABEL_34;
  }
  v17 = *v741;
  if (*v741 > 511)
  {
    switch(v17)
    {
      case 512:
        v18 = *(_DWORD *)(a1 + 7400);
        v19 = *(_DWORD *)(a1 + 7412);
        v20 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v18;
        *(_DWORD *)(a1 + 7448) = v19;
        *(_DWORD *)(a1 + 7452) = v20;
        v21 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v21 + 4) = v18;
        v22 = *(_DWORD *)(a1 + 12);
        if (!v22)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC9AFCLL);
        }
        v23 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v22 - 1) + 9) & 1;
        *(_BYTE *)(v21 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v21, (uint64_t)v741, 0, v23, a5, a6, a7, a8);
        LODWORD(v24) = 8;
        goto LABEL_59;
      case 513:
        v133 = *(_DWORD *)(a1 + 7400);
        v134 = *(_DWORD *)(a1 + 7412);
        v135 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v133;
        *(_DWORD *)(a1 + 7448) = v134;
        *(_DWORD *)(a1 + 7452) = v135;
        v56 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v56 + 4) = v133;
        v57 = *(_DWORD *)(a1 + 12);
        if (!v57)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC9B34);
        }
        goto LABEL_121;
      case 514:
        v53 = *(_DWORD *)(a1 + 7400);
        v54 = *(_DWORD *)(a1 + 7412);
        v55 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v53;
        *(_DWORD *)(a1 + 7448) = v54;
        *(_DWORD *)(a1 + 7452) = v55;
        v56 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v56 + 4) = v53;
        v57 = *(_DWORD *)(a1 + 12);
        if (!v57)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC6588);
        }
LABEL_121:
        v136 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v57 - 1) + 9) & 1;
        *(_BYTE *)(v56 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v56, (uint64_t)v741, 0, v136, a5, a6, a7, a8);
        LODWORD(v24) = 9;
        goto LABEL_59;
      case 515:
      case 516:
      case 517:
      case 518:
      case 519:
      case 520:
      case 521:
      case 522:
      case 524:
      case 525:
      case 527:
      case 528:
      case 529:
      case 530:
      case 531:
      case 532:
      case 533:
      case 534:
      case 535:
      case 536:
      case 537:
      case 538:
      case 539:
      case 540:
      case 542:
      case 543:
        goto LABEL_33;
      case 523:
        v34 = *(_DWORD *)(a1 + 7300);
        v66 = *(_DWORD *)(a1 + 7408);
        v67 = *(_DWORD *)(a1 + 7400);
        v68 = *(_DWORD *)(a1 + 7412);
        v69 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v67;
        *(_DWORD *)(a1 + 7448) = v68;
        *(_DWORD *)(a1 + 7452) = v69;
        v70 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v70 + 4) = v67;
        v71 = *(_DWORD *)(a1 + 12);
        if (!v71)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC9B1CLL);
        }
        v72 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v71 - 1) + 9) & 1;
        *(_BYTE *)(v70 + 56) = 0;
        v73 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v70, (uint64_t)v741, 0, v72, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v73;
        v746 = 0u;
        *(_OWORD *)&v745[8] = 0u;
        *(_QWORD *)v745 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        if (v73 == 191488)
        {
          v78 = *(_DWORD *)(a1 + 7400);
          v79 = *(_DWORD *)(a1 + 7412);
          v80 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v78;
          *(_DWORD *)(a1 + 7448) = v79;
          *(_DWORD *)(a1 + 7452) = v80;
          v81 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v81 + 4) = v78;
          v82 = *(_DWORD *)(a1 + 12);
          if (!v82)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9B8CLL);
          }
          v83 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v82 - 1) + 9) & 1;
          *(_BYTE *)(v81 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v81, (uint64_t)v741, 0, v83, v74, v75, v76, v77);
          v84 = 2;
        }
        else
        {
          v84 = 0;
        }
        v8 = v11[130];
        v11[130] = v84;
        v85 = *(_DWORD *)(a1 + 12);
        if (!v85)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC9B24);
        }
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v85 - 1) + 12) & 1) != 0)
          v86 = v11[144];
        else
          v86 = 0;
        if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, v9, 0, 0, v86, v86 != 2, v66, (WTF::StringImpl ***)v745, 0) & 1) != 0)
        {
          LODWORD(v24) = 12;
        }
        else
        {
          v651 = v11;
          v652 = v9;
          v653 = v651;
          if (*v741 == 20 || (*v741 & 0x100000) != 0)
          {
            JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
          }
          else if (!*(_QWORD *)(a1 + 7360))
          {
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse function expression");
          }
          LODWORD(v24) = 0;
          v654 = v653;
          v9 = v652;
          v11 = v654;
        }
        v11[130] = v8;
        goto LABEL_57;
      case 526:
        v58 = *(_DWORD *)(a1 + 7400);
        v59 = *(_DWORD *)(a1 + 7412);
        v60 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v58;
        *(_DWORD *)(a1 + 7448) = v59;
        *(_DWORD *)(a1 + 7452) = v60;
        v61 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v61 + 4) = v58;
        v62 = *(_DWORD *)(a1 + 12);
        if (!v62)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC9B0CLL);
        }
        v63 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v62 - 1) + 9) & 1;
        *(_BYTE *)(v61 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v61, (uint64_t)v741, 0, v63, a5, a6, a7, a8);
        v64 = *(_DWORD *)(a1 + 12);
        if (!v64)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC9B14);
        }
        v65 = v64 - 1;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v65 + 11) & 8) != 0)
          *(_BYTE *)(*(_QWORD *)a1 + 720 * v65 + 32) |= 4u;
        LODWORD(v24) = 7;
        goto LABEL_59;
      case 541:
        v34 = *(_DWORD *)(a1 + 7300);
        *(_QWORD *)&v745[8] = 0;
        *(_QWORD *)&v745[16] = 0;
        *(_QWORD *)v745 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        LODWORD(v24) = JSC::Parser<JSC::Lexer<char16_t>>::parseClass<JSC::SyntaxChecker>(a1, (uint64_t)v9, 0, (WTF ***)v745);
        goto LABEL_57;
      case 544:
        v137 = *(_DWORD *)(a1 + 12);
        if (!v137)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC9B3CLL);
        }
        v51 = v137 - 1;
        v52 = *(_QWORD *)a1;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v51 + 9) & 1) == 0)
          goto LABEL_185;
        goto LABEL_33;
      case 545:
        v50 = *(_DWORD *)(a1 + 12);
        if (!v50)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC9B04);
        }
        goto LABEL_32;
      case 546:
        v129 = *(_DWORD *)(a1 + 12);
        if (!v129)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC9B2CLL);
        }
        v51 = v129 - 1;
        v52 = *(_QWORD *)a1;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v129 - 1) + 12) & 0x10) != 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[90]>(a1);
        }
        else
        {
          if (*(_DWORD *)(a1 + 7316))
          {
            v130 = *(_DWORD *)(a1 + 12);
            while (1)
            {
              v131 = v130;
              if (v130 == 1)
                break;
              --v130;
              if ((*(_BYTE *)(v52 + 720 * (v131 - 1) + 12) & 0x40) != 0)
                goto LABEL_116;
            }
            v130 = 0;
LABEL_116:
            if (v129 <= v131 - 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC9BACLL);
            }
            if ((*(_BYTE *)(v52 + 720 * v130 + 11) & 0x40) != 0 || ((1 << v11[130]) & 0x6000) != 0)
            {
              v132 = JSC::Parser<JSC::Lexer<char16_t>>::parseAwaitExpression<JSC::SyntaxChecker>(a1, (uint64_t)v9, a3, a4, a5, a6, a7, a8);
LABEL_157:
              LODWORD(v24) = v132;
              goto LABEL_58;
            }
            goto LABEL_185;
          }
          if (*v11)
            goto LABEL_185;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[57]>(a1);
        }
        break;
      default:
        if (v17 != 191489)
        {
          if (v17 != 1048592)
            goto LABEL_33;
          v48 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
          v49 = **(_QWORD **)(a1 + 7376);
          if (v49 != v48[41])
            goto LABEL_217;
          v283 = *(_DWORD *)(a1 + 12);
          if (!v283)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9BD0);
          }
          v51 = v283 - 1;
          v52 = *(_QWORD *)a1;
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v51 + 9) & 1) != 0)
          {
LABEL_217:
            if (v49 != v48[16] || !*v11)
              goto LABEL_28;
            v284 = *(_DWORD *)(a1 + 12);
            if (!v284)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC9BE0);
            }
            v51 = v284 - 1;
            v52 = *(_QWORD *)a1;
            if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * v51 + 10) & 0x102000) != 0 || *(_DWORD *)(a1 + 7480) == 1)
            {
LABEL_28:
              if (v49 != v48[62])
                goto LABEL_33;
              v50 = *(_DWORD *)(a1 + 12);
              if (!v50)
              {
                __break(0xC471u);
                JUMPOUT(0x197EC64FCLL);
              }
LABEL_32:
              v51 = v50 - 1;
              v52 = *(_QWORD *)a1;
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v51 + 9) & 1) != 0
                || (*(_BYTE *)(v52 + 720 * v51 + 11) & 2) != 0)
              {
                goto LABEL_33;
              }
            }
          }
LABEL_185:
          v247 = *(uint64_t **)(a1 + 7376);
          if (*(_BYTE *)(v52 + 720 * v51 + 14) == 2
            && *v247 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 880))
          {
            if (v17 != 20 && (v17 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "arguments is not valid in this context");
              break;
            }
LABEL_33:
            JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
            break;
          }
          v248 = *(_DWORD *)(a1 + 7400);
          v249 = *(_DWORD *)(a1 + 7412);
          v250 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v248;
          *(_DWORD *)(a1 + 7448) = v249;
          *(_DWORD *)(a1 + 7452) = v250;
          v251 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v251 + 4) = v248;
          v252 = *(_BYTE *)(v52 + 720 * v51 + 9) & 1;
          *(_BYTE *)(v251 + 56) = 0;
          v253 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v251, (uint64_t)v741, 0, v252, a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v253;
          if (v253 == 38)
            break;
          v254 = *(_DWORD *)(a1 + 12);
          if (!v254)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9AC4);
          }
          v739 = v11;
          v740 = (unint64_t)v13;
          v738 = v9;
          v255 = *v247;
          v256 = v254 - 1;
          v257 = *(_QWORD *)a1;
          v258 = *(_QWORD *)a1 + 720 * v256;
          if (*v247 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 1248))
            v259 = 2;
          else
            v259 = *(_DWORD *)(v258 + 10) & 2;
          *(_DWORD *)(v258 + 10) = v259 | *(_DWORD *)(v258 + 10) & 0xFFFFFFFD;
          v260 = *(unsigned int *)(v258 + 180);
          if (!(_DWORD)v260)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9ACCLL);
          }
          v261 = v260 - 1;
          v8 = *(_QWORD *)(v257 + 720 * v256 + 168);
          v262 = (unsigned int *)(v8 + 72 * (v260 - 1));
          v264 = (int *)(v262 + 1);
          v263 = v262[1];
          v265 = *v262;
          if (v263 == 8)
          {
            if (v265)
            {
              v266 = *v262;
              v267 = (_QWORD *)(v8 + 72 * v261 + 8);
              v268 = v267;
              v269 = v266;
              while (*v268 != v255)
              {
                ++v268;
                if (!--v269)
                {
                  if (v265 <= 7)
                    goto LABEL_198;
                  v329 = (_OWORD *)WTF::fastMalloc((WTF *)0x200);
                  v330 = 0;
                  *(_QWORD *)&v331 = -1;
                  *((_QWORD *)&v331 + 1) = -1;
                  *v329 = v331;
                  v329[1] = v331;
                  v329[2] = v331;
                  v329[3] = v331;
                  v329[4] = v331;
                  v329[5] = v331;
                  v329[6] = v331;
                  v329[7] = v331;
                  v329[8] = v331;
                  v329[9] = v331;
                  v329[10] = v331;
                  v329[11] = v331;
                  v329[12] = v331;
                  v329[13] = v331;
                  v329[14] = v331;
                  v329[15] = v331;
                  v329[16] = v331;
                  v329[17] = v331;
                  v329[18] = v331;
                  v329[19] = v331;
                  v329[20] = v331;
                  v329[21] = v331;
                  v329[22] = v331;
                  v329[23] = v331;
                  v329[24] = v331;
                  v329[25] = v331;
                  v329[26] = v331;
                  v329[27] = v331;
                  v329[28] = v331;
                  v329[29] = v331;
                  v329[30] = v331;
                  v329[31] = v331;
                  *v264 = 64;
                  do
                  {
                    v332 = v267[v330];
                    if (v332 != -1)
                    {
                      v333 = (~(v332 << 32) + v332) ^ ((unint64_t)(~(v332 << 32) + v332) >> 22);
                      v334 = 9 * ((v333 + ~(v333 << 13)) ^ ((v333 + ~(v333 << 13)) >> 8));
                      v335 = (v334 ^ (v334 >> 15)) + ~((v334 ^ (v334 >> 15)) << 27);
                      v336 = v335 ^ (v335 >> 31);
                      v337 = v336 & 0x3F;
                      v338 = *((_QWORD *)v329 + v337);
                      if (v338 != -1 && v338 != v332)
                      {
                        LOBYTE(v337) = v336 & 0x3F;
                        v340 = 1;
                        do
                        {
                          v337 = ((_BYTE)v337 + (_BYTE)v340) & 0x3F;
                          v341 = *((_QWORD *)v329 + v337);
                          ++v340;
                        }
                        while (v341 != -1 && v341 != v332);
                      }
                      *((_QWORD *)v329 + v337) = v332;
                    }
                    ++v330;
                  }
                  while (v330 != 8);
                  v265 = *v262;
                  *v267 = v329;
                  v263 = 64;
                  goto LABEL_296;
                }
              }
              goto LABEL_200;
            }
            v266 = 0;
LABEL_198:
            *(_QWORD *)(v8 + 72 * v261 + 8 * v266 + 8) = v255;
          }
          else
          {
LABEL_296:
            if (3 * v263 <= 4 * v265)
            {
              v546 = v8 + 72 * v261;
              v8 = *(_QWORD *)(v546 + 8);
              __len = 8 * (2 * v263);
              v737 = (_QWORD *)(v546 + 8);
              v343 = (void *)WTF::fastMalloc((WTF *)__len);
              memset(v343, 255, __len);
              *v264 = 2 * v263;
              if (v263)
              {
                v554 = 0;
                v555 = 2 * v263 - 1;
                do
                {
                  v556 = *(_QWORD *)(v8 + 8 * v554);
                  if (v556 != -1)
                  {
                    v557 = (~(v556 << 32) + v556) ^ ((unint64_t)(~(v556 << 32) + v556) >> 22);
                    v558 = 9 * ((v557 + ~(v557 << 13)) ^ ((v557 + ~(v557 << 13)) >> 8));
                    v559 = (v558 ^ (v558 >> 15)) + ~((v558 ^ (v558 >> 15)) << 27);
                    v560 = v555 & ((v559 >> 31) ^ v559);
                    v561 = *((_QWORD *)v343 + v560);
                    if (v561 != -1 && v561 != v556)
                    {
                      v563 = 1;
                      do
                      {
                        v560 = ((_DWORD)v560 + v563) & v555;
                        v564 = *((_QWORD *)v343 + v560);
                        ++v563;
                      }
                      while (v564 != -1 && v564 != v556);
                    }
                    *((_QWORD *)v343 + v560) = v556;
                  }
                  ++v554;
                }
                while (v554 != v263);
              }
              WTF::fastFree(v8, v547, v548, v549, v550, v551, v552, v553);
              v263 = *v264;
              *v737 = v343;
            }
            else
            {
              v343 = *(void **)(v8 + 72 * v261 + 8);
            }
            v344 = (~(v255 << 32) + v255) ^ ((unint64_t)(~(v255 << 32) + v255) >> 22);
            v345 = 9 * ((v344 + ~(v344 << 13)) ^ ((v344 + ~(v344 << 13)) >> 8));
            v346 = (v345 ^ (v345 >> 15)) + ~((v345 ^ (v345 >> 15)) << 27);
            v347 = (v263 - 1) & ((v346 >> 31) ^ v346);
            v348 = *((_QWORD *)v343 + v347);
            if (v348 != -1 && v348 != v255)
            {
              v350 = 1;
              do
              {
                v347 = ((_DWORD)v347 + v350) & (v263 - 1);
                v348 = *((_QWORD *)v343 + v347);
                ++v350;
              }
              while (v348 != -1 && v348 != v255);
            }
            if (v348 == v255)
              goto LABEL_200;
            *((_QWORD *)v343 + v347) = v255;
            v265 = *v262;
          }
          *v262 = v265 + 1;
LABEL_200:
          *(_QWORD *)(a1 + 7320) = v247;
          LODWORD(v24) = 2;
          v9 = v738;
          v11 = v739;
          v13 = (char *)v740;
          goto LABEL_59;
        }
        LODWORD(a3) = 0;
LABEL_162:
        v209 = JSC::Lexer<char16_t>::scanRegExp(*(unsigned int **)(a1 + 7288), (uint64_t)v741, a3, a4, (char *)a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v209;
        if (v209 == 16)
        {
          v8 = *(_QWORD *)(a1 + 7376);
          v210 = *(uint64_t **)(a1 + 7384);
          v211 = *(_DWORD *)(a1 + 7400);
          v212 = *(_DWORD *)(a1 + 7412);
          v213 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v211;
          *(_DWORD *)(a1 + 7448) = v212;
          *(_DWORD *)(a1 + 7452) = v213;
          v214 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v214 + 4) = v211;
          v215 = *(_DWORD *)(a1 + 12);
          if (!v215)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9B84);
          }
          v216 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v215 - 1) + 9) & 1;
          *(_BYTE *)(v214 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v214, (uint64_t)v741, 0, v216, a5, a6, a7, a8);
          LODWORD(v24) = JSC::SyntaxChecker::createRegExp(*(_QWORD *)v8, *v210);
          if ((_DWORD)v24)
            goto LABEL_59;
          v217 = *(_QWORD *)v8;
          if (*(_QWORD *)v8)
          {
            v218 = *(const WTF::StringImpl **)(v217 + 8);
            v219 = *(unsigned int *)(v217 + 4) | ((unint64_t)((*(_DWORD *)(v217 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v218 = 0;
            v219 = 0x100000000;
          }
          v220 = *v210;
          if (*v210)
          {
            v221 = *(unsigned __int16 **)(v220 + 8);
            v222 = *(unsigned int *)(v220 + 4) | ((unint64_t)((*(_DWORD *)(v220 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v221 = 0;
            v222 = 0x100000000;
          }
          v229 = 2 * JSC::Yarr::checkSyntax(v218, v219, v221, v222);
          v230 = (_BYTE *)JSC::Yarr::errorMessage(JSC::Yarr::ErrorCode)::errorMessages[v229];
          if (v230)
          {
            v231 = strlen((const char *)JSC::Yarr::errorMessage(JSC::Yarr::ErrorCode)::errorMessages[v229]);
            if (v231)
            {
              v238 = v231;
              if (v231 >> 31)
              {
                __break(0xC471u);
                JUMPOUT(0x197EC9BE8);
              }
              v239 = (int *)WTF::fastCompactMalloc((WTF *)(v231 + 20));
              v240 = v239 + 5;
              *v239 = 2;
              v239[1] = v238;
              *((_QWORD *)v239 + 1) = v239 + 5;
              v239[4] = 4;
              if (v238 == 1)
                *v240 = *v230;
              else
                memcpy(v240, v230, v238);
            }
            else
            {
              v239 = &WTF::StringImpl::s_emptyAtomString;
              WTF::StringImpl::s_emptyAtomString += 2;
            }
            JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, (WTF::AtomStringImpl *)v239, v232, v233, v234, v235, v236, v237);
            if (*v239 == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v239, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v321, v322, v323, v324, v325, v326, v327, v328);
            }
            else
            {
              *v239 -= 2;
            }
          }
          else
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, 0, v223, v224, v225, v226, v227, v228);
          }
        }
        else
        {
          if (v209 == 20 || (v209 & 0x100000) != 0)
            goto LABEL_33;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Invalid regular expression");
        }
        break;
    }
LABEL_34:
    if (*v741 != 20 && (*v741 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse base expression");
      goto LABEL_38;
    }
    goto LABEL_455;
  }
  a3 = 61;
  switch(v17)
  {
    case 0:
      v25 = *(_DWORD *)(a1 + 7400);
      v26 = *(_DWORD *)(a1 + 7412);
      v27 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v25;
      *(_DWORD *)(a1 + 7448) = v26;
      *(_DWORD *)(a1 + 7452) = v27;
      v28 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v28 + 4) = v25;
      v29 = *(_DWORD *)(a1 + 12);
      if (!v29)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC9B44);
      }
      v30 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v29 - 1) + 9) & 1;
      *(_BYTE *)(v28 + 56) = 0;
      v31 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v28, (uint64_t)v741, 0, v30, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v31;
      v34 = *(_DWORD *)(a1 + 7300);
      if (v31 == 1)
      {
        v317 = *(_DWORD *)(a1 + 7400);
        v318 = *(_DWORD *)(a1 + 7412);
        v319 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v317;
        *(_DWORD *)(a1 + 7448) = v318;
        *(_DWORD *)(a1 + 7452) = v319;
        v206 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v206 + 4) = v317;
        v207 = *(_DWORD *)(a1 + 12);
        if (!v207)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC7840);
        }
        goto LABEL_160;
      }
      v35 = JSC::Parser<JSC::Lexer<char16_t>>::parseProperty<JSC::SyntaxChecker>(a1, v9, v32, v33, a5, a6, a7, a8);
      if ((_WORD)v35)
      {
        v36 = (v35 & 0xFF0000) != 0;
        v8 = 720;
        while (1)
        {
          v37 = *v741;
          if (*v741 != 6)
            break;
          v38 = *(_DWORD *)(a1 + 7400);
          v39 = *(_DWORD *)(a1 + 7412);
          v40 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v38;
          *(_DWORD *)(a1 + 7448) = v39;
          *(_DWORD *)(a1 + 7452) = v40;
          v41 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v41 + 4) = v38;
          v42 = *(_DWORD *)(a1 + 12);
          if (!v42)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9AD4);
          }
          v43 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v42 - 1) + 9) & 1;
          *(_BYTE *)(v41 + 56) = 0;
          v44 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v41, (uint64_t)v741, 0, v43, a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v44;
          if (v44 == 1)
            goto LABEL_159;
          v47 = JSC::Parser<JSC::Lexer<char16_t>>::parseProperty<JSC::SyntaxChecker>(a1, v9, v45, v46, a5, a6, a7, a8);
          if (!(_WORD)v47)
            goto LABEL_462;
          if ((((v47 & 0xFF0000) != 0) & v36) == 1)
          {
            v695 = v11;
            v474 = v9;
            v475 = v695;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Attempted to redefine __proto__ property");
            goto LABEL_466;
          }
          v36 |= (v47 & 0xFF0000) != 0;
        }
        if (v37 == 1)
        {
LABEL_159:
          v203 = *(_DWORD *)(a1 + 7400);
          v204 = *(_DWORD *)(a1 + 7412);
          v205 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v203;
          *(_DWORD *)(a1 + 7448) = v204;
          *(_DWORD *)(a1 + 7452) = v205;
          v206 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v206 + 4) = v203;
          v207 = *(_DWORD *)(a1 + 12);
          if (!v207)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9B9CLL);
          }
LABEL_160:
          v208 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v207 - 1) + 9) & 1;
          *(_BYTE *)(v206 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v206, (uint64_t)v741, 0, v208, a5, a6, a7, a8);
          LODWORD(v24) = 11;
          goto LABEL_57;
        }
        if (v37 != 20 && (v37 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[15]>(a1, "}", "object literal");
          goto LABEL_254;
        }
LABEL_253:
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_254:
        LODWORD(v24) = 0;
        goto LABEL_57;
      }
LABEL_462:
      v484 = v11;
      v474 = v9;
      v475 = v484;
      if (*v741 == 20 || (*v741 & 0x100000) != 0)
        goto LABEL_708;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse object literal property");
      goto LABEL_466;
    case 2:
      v160 = *(_DWORD *)(a1 + 7400);
      v161 = *(_DWORD *)(a1 + 7412);
      v162 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v160;
      *(_DWORD *)(a1 + 7448) = v161;
      *(_DWORD *)(a1 + 7452) = v162;
      v163 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v163 + 4) = v160;
      v164 = *(_DWORD *)(a1 + 12);
      if (!v164)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC9B6CLL);
      }
      v165 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v164 - 1) + 9) & 1;
      *(_BYTE *)(v163 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v163, (uint64_t)v741, 0, v165, a5, a6, a7, a8);
      v34 = *(_DWORD *)(a1 + 7300);
      v166 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(a1, (uint64_t)v9);
      v167 = *(_DWORD *)(a1 + 7368);
      if (v167 == 3)
      {
        LODWORD(v24) = v166;
        v168 = *(_DWORD *)(a1 + 7400);
        v169 = *(_DWORD *)(a1 + 7412);
        v170 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v168;
        *(_DWORD *)(a1 + 7448) = v169;
        *(_DWORD *)(a1 + 7452) = v170;
        v171 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v171 + 4) = v168;
        v172 = *(_DWORD *)(a1 + 12);
        if (!v172)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC9B94);
        }
        v173 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v172 - 1) + 9) & 1;
        *(_BYTE *)(v171 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v171, (uint64_t)v741, 0, v173, a5, a6, a7, a8);
        goto LABEL_57;
      }
      if (v167 == 20 || (v167 & 0x100000) != 0)
        goto LABEL_253;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[20]>(a1);
      goto LABEL_254;
    case 4:
      v174 = *(_DWORD *)(a1 + 7400);
      v175 = *(_DWORD *)(a1 + 7412);
      v176 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v174;
      *(_DWORD *)(a1 + 7448) = v175;
      *(_DWORD *)(a1 + 7452) = v176;
      v177 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v177 + 4) = v174;
      v178 = *(_DWORD *)(a1 + 12);
      if (!v178)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC9B74);
      }
      v179 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v178 - 1) + 9) & 1;
      *(_BYTE *)(v177 + 56) = 0;
      v180 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v177, (uint64_t)v741, 2, v179, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v180;
      v34 = *(_DWORD *)(a1 + 7300);
      while (2)
      {
        switch(v180)
        {
          case 5:
            v285 = *(_DWORD *)(a1 + 7400);
            v286 = *(_DWORD *)(a1 + 7412);
            v287 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v285;
            *(_DWORD *)(a1 + 7448) = v286;
            *(_DWORD *)(a1 + 7452) = v287;
            v244 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v244 + 4) = v285;
            v245 = *(_DWORD *)(a1 + 12);
            if (!v245)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC7568);
            }
            goto LABEL_180;
          case 6:
            v453 = v11;
            v454 = v9;
            v455 = v453;
            LODWORD(v453) = *(_DWORD *)(a1 + 7400);
            v456 = *(_DWORD *)(a1 + 7412);
            v457 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = (_DWORD)v453;
            *(_DWORD *)(a1 + 7448) = v456;
            *(_DWORD *)(a1 + 7452) = v457;
            v458 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v458 + 4) = (_DWORD)v453;
            v459 = *(_DWORD *)(a1 + 12);
            if (!v459)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC9AF4);
            }
            v460 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v459 - 1) + 9) & 1;
            *(_BYTE *)(v458 + 56) = 0;
            v180 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v458, (uint64_t)v741, 2, v460, a5, a6, a7, a8);
            *(_DWORD *)(a1 + 7368) = v180;
            v461 = v455;
            v9 = v454;
            v11 = v461;
            continue;
          case 37:
            v504 = v11;
            v474 = v9;
            v475 = v504;
            LODWORD(v504) = *(_DWORD *)(a1 + 7400);
            v505 = *(_DWORD *)(a1 + 7412);
            v506 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = (_DWORD)v504;
            *(_DWORD *)(a1 + 7448) = v505;
            *(_DWORD *)(a1 + 7452) = v506;
            v507 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v507 + 4) = (_DWORD)v504;
            v508 = *(_DWORD *)(a1 + 12);
            if (!v508)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC9CC0);
            }
            v509 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v508 - 1) + 9) & 1;
            *(_BYTE *)(v507 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v507, (uint64_t)v741, 0, v509, a5, a6, a7, a8);
            *(_DWORD *)v745 = 0;
            *(_QWORD *)&v745[8] = *(_QWORD *)(a1 + 7496);
            *(_QWORD *)&v745[16] = a1;
            *(_QWORD *)(a1 + 7496) = v745;
            v510 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v474, v745);
            v482 = *(_DWORD **)&v745[8];
            if (v510)
            {
              *(_QWORD *)(*(_QWORD *)&v745[16] + 7496) = *(_QWORD *)&v745[8];
              v511 = v475;
              v9 = v474;
              v11 = v511;
              goto LABEL_145;
            }
LABEL_702:
            if (v482)
              *v482 = *(_DWORD *)v745;
            *(_QWORD *)(*(_QWORD *)&v745[16] + 7496) = v482;
            if (*v741 != 20 && (*v741 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse subject of a spread operation");
              goto LABEL_466;
            }
LABEL_708:
            JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
            goto LABEL_466;
        }
      }
      *(_DWORD *)v745 = 0;
      *(_QWORD *)&v745[8] = *(_QWORD *)(a1 + 7496);
      *(_QWORD *)&v745[16] = a1;
      *(_QWORD *)(a1 + 7496) = v745;
      v181 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v9, v745);
      v182 = *(_DWORD **)&v745[8];
      if (!v181)
      {
LABEL_562:
        v618 = v11;
        v474 = v9;
        v475 = v618;
        if (v182)
          *v182 = *(_DWORD *)v745;
        *(_QWORD *)(*(_QWORD *)&v745[16] + 7496) = v182;
        if (*v741 != 20 && (*v741 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse array literal element");
LABEL_466:
          LODWORD(v24) = 0;
          goto LABEL_467;
        }
        goto LABEL_708;
      }
      *(_QWORD *)(*(_QWORD *)&v745[16] + 7496) = *(_QWORD *)&v745[8];
LABEL_145:
      v8 = (unint64_t)v745;
      while (1)
      {
        while (1)
        {
          v183 = *v741;
          if (*v741 != 6)
          {
            if (v183 != 5)
            {
              if (v183 == 37)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(a1, "The '...' operator should come before a target expression");
                goto LABEL_254;
              }
              if (v183 != 20 && (v183 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected either a closing ']' or a ',' following an array element");
                goto LABEL_254;
              }
              goto LABEL_253;
            }
            v241 = *(_DWORD *)(a1 + 7400);
            v242 = *(_DWORD *)(a1 + 7412);
            v243 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v241;
            *(_DWORD *)(a1 + 7448) = v242;
            *(_DWORD *)(a1 + 7452) = v243;
            v244 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v244 + 4) = v241;
            v245 = *(_DWORD *)(a1 + 12);
            if (!v245)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC9BA4);
            }
LABEL_180:
            v246 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v245 - 1) + 9) & 1;
            *(_BYTE *)(v244 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v244, (uint64_t)v741, 0, v246, a5, a6, a7, a8);
            LODWORD(v24) = 30;
            goto LABEL_57;
          }
          v184 = *(_DWORD *)(a1 + 7400);
          v185 = *(_DWORD *)(a1 + 7412);
          v186 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v184;
          *(_DWORD *)(a1 + 7448) = v185;
          *(_DWORD *)(a1 + 7452) = v186;
          v187 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v187 + 4) = v184;
          v188 = *(_DWORD *)(a1 + 12);
          if (!v188)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9AE4);
          }
          v189 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v188 - 1) + 9) & 1;
          *(_BYTE *)(v187 + 56) = 0;
          v190 = v741;
          v191 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v187, (uint64_t)v741, 2, v189, a5, a6, a7, a8);
LABEL_149:
          *v190 = v191;
          if (v191 != 37)
            break;
          v473 = v11;
          v474 = v9;
          v475 = v473;
          LODWORD(v473) = *(_DWORD *)(a1 + 7400);
          v476 = *(_DWORD *)(a1 + 7412);
          v477 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = (_DWORD)v473;
          *(_DWORD *)(a1 + 7448) = v476;
          *(_DWORD *)(a1 + 7452) = v477;
          v478 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v478 + 4) = (_DWORD)v473;
          v479 = *(_DWORD *)(a1 + 12);
          if (!v479)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9ADCLL);
          }
          v480 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v479 - 1) + 9) & 1;
          *(_BYTE *)(v478 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v478, (uint64_t)v741, 0, v480, v192, v193, v194, v195);
          *(_DWORD *)v745 = 0;
          *(_QWORD *)&v745[8] = *(_QWORD *)(a1 + 7496);
          *(_QWORD *)&v745[16] = a1;
          *(_QWORD *)(a1 + 7496) = v745;
          v481 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v474, v745);
          v482 = *(_DWORD **)&v745[8];
          if (!v481)
            goto LABEL_702;
          *(_QWORD *)(*(_QWORD *)&v745[16] + 7496) = *(_QWORD *)&v745[8];
          v483 = v475;
          v9 = v474;
          v11 = v483;
        }
        if (v191 == 5)
          break;
        if (v191 == 6)
        {
          v603 = v11;
          v604 = v9;
          v605 = v603;
          LODWORD(v603) = *(_DWORD *)(a1 + 7400);
          v606 = *(_DWORD *)(a1 + 7412);
          v607 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = (_DWORD)v603;
          *(_DWORD *)(a1 + 7448) = v606;
          *(_DWORD *)(a1 + 7452) = v607;
          v608 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v608 + 4) = (_DWORD)v603;
          v609 = *(_DWORD *)(a1 + 12);
          if (!v609)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9AECLL);
          }
          v610 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v609 - 1) + 9) & 1;
          *(_BYTE *)(v608 + 56) = 0;
          v190 = v741;
          v191 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v608, (uint64_t)v741, 0, v610, v192, v193, v194, v195);
          v611 = v605;
          v9 = v604;
          v11 = v611;
          goto LABEL_149;
        }
        *(_DWORD *)v745 = 0;
        *(_QWORD *)&v745[8] = *(_QWORD *)(a1 + 7496);
        *(_QWORD *)&v745[16] = a1;
        *(_QWORD *)(a1 + 7496) = v745;
        v196 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v9, v745);
        v182 = *(_DWORD **)&v745[8];
        if (!v196)
          goto LABEL_562;
        *(_QWORD *)(*(_QWORD *)&v745[16] + 7496) = *(_QWORD *)&v745[8];
      }
      v498 = v11;
      v474 = v9;
      v475 = v498;
      LODWORD(v498) = *(_DWORD *)(a1 + 7400);
      v499 = *(_DWORD *)(a1 + 7412);
      v500 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = (_DWORD)v498;
      *(_DWORD *)(a1 + 7448) = v499;
      *(_DWORD *)(a1 + 7452) = v500;
      v501 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v501 + 4) = (_DWORD)v498;
      v502 = *(_DWORD *)(a1 + 12);
      if (!v502)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC9CB8);
      }
      v503 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v502 - 1) + 9) & 1;
      *(_BYTE *)(v501 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v501, (uint64_t)v741, 0, v503, v192, v193, v194, v195);
      LODWORD(v24) = 30;
LABEL_467:
      v485 = v475;
      v9 = v474;
      v11 = v485;
LABEL_57:
      *(_DWORD *)(a1 + 7300) = v34;
LABEL_58:
      if (!(_DWORD)v24)
        goto LABEL_34;
LABEL_59:
      if (v16)
      {
        v468 = v11;
        v469 = v9;
        v470 = v468;
        if ((v24 - 1) <= 1 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
        {
          v471 = *v741;
          if (*v741 == 12)
            goto LABEL_453;
          v87 = 0;
          if (v471 > 545)
          {
            if (v471 != 1048592)
            {
              v109 = v471 == 546;
              v643 = v470;
              v9 = v469;
              v11 = v643;
              v88 = 1;
              if (!v109)
                goto LABEL_61;
              goto LABEL_453;
            }
            v700 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
            v701 = **(_QWORD **)(a1 + 7376);
            if (v701 != v700[41])
            {
LABEL_828:
              if (v701 != v700[62])
              {
LABEL_837:
                if (v701 != v700[16])
                  goto LABEL_838;
LABEL_453:
                v472 = *(_DWORD **)(a1 + 7496);
                if (v472)
                  *v472 = 2;
                goto LABEL_455;
              }
LABEL_829:
              v703 = *(_DWORD *)(a1 + 12);
              if (!v703)
              {
                __break(0xC471u);
                JUMPOUT(0x197EC9DDCLL);
              }
              v704 = v703 - 1;
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v704 + 9) & 1) == 0
                && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v704 + 11) & 2) == 0)
              {
                goto LABEL_453;
              }
              if (v471 != 1048592)
              {
                v87 = 0;
                v88 = 1;
                goto LABEL_542;
              }
              v700 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
              v701 = **(_QWORD **)(a1 + 7376);
              goto LABEL_837;
            }
          }
          else
          {
            if (v471 == 545)
              goto LABEL_829;
            if (v471 != 544)
            {
              v619 = v470;
              v9 = v469;
              v11 = v619;
              v88 = 1;
              goto LABEL_61;
            }
          }
          v702 = *(_DWORD *)(a1 + 12);
          if (!v702)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9D60);
          }
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v702 - 1) + 9) & 1) == 0)
            goto LABEL_453;
          if (v471 != 1048592)
          {
LABEL_838:
            v705 = v470;
            v9 = v469;
            v11 = v705;
            v87 = 0;
            v88 = 1;
            goto LABEL_61;
          }
          v700 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
          v701 = **(_QWORD **)(a1 + 7376);
          goto LABEL_828;
        }
        v87 = 0;
        v88 = 0;
LABEL_542:
        v601 = v470;
        v9 = v469;
        v11 = v601;
        goto LABEL_61;
      }
      v87 = 0;
      v88 = 0;
LABEL_61:
      v89 = *(_DWORD *)(a1 + 7368);
      a3 = 1;
      a4 = 0x900000000000001;
      a5 = 12;
LABEL_62:
      if (v89 == 39)
      {
        if (v13)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v656 = "Cannot call constructor in an optional chain";
LABEL_620:
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, v656);
          }
          goto LABEL_38;
        }
        if (v87)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use super as the base of an optional chain");
          goto LABEL_38;
        }
        v742 = *(_OWORD *)(a1 + 7296);
        LODWORD(v739) = *(_DWORD *)(a1 + 7316);
        *(_QWORD *)&v745[16] = *(_QWORD *)(a1 + 7336);
        *(_OWORD *)v745 = *(_OWORD *)(a1 + 7320);
        LODWORD(v738) = *v11;
        LODWORD(v737) = v11[1];
        v733 = *(int *)(a1 + 7408);
        v416 = *(int *)(a1 + 7404);
        v417 = *(_QWORD *)(a1 + 7288);
        v418 = *(_DWORD *)(v417 + 4);
        v735 = *(_DWORD *)v417;
        LODWORD(__len) = v418;
        v734 = *(unsigned __int8 *)(v417 + 56);
        v419 = *(_DWORD *)(a1 + 7400);
        v420 = *(_DWORD *)(a1 + 7412);
        *(_DWORD *)(a1 + 7444) = v419;
        *(_DWORD *)(a1 + 7448) = v420;
        *(_DWORD *)(a1 + 7452) = v416;
        *(_DWORD *)(v417 + 4) = v419;
        v421 = *(_DWORD *)(a1 + 12);
        if (!v421)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC9938);
        }
        v422 = v88;
        v423 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v421 - 1) + 9) & 1;
        *(_BYTE *)(v417 + 56) = 0;
        v89 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v417, (uint64_t)v741, 0, v423, 12, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v89;
        if (v89 > 8 || ((1 << v89) & 0x114) == 0)
        {
          v740 = 0;
          v428 = v9;
          v429 = *(_QWORD *)(a1 + 7288);
          *(_BYTE *)(v429 + 150) = 0;
          v430 = *(WTF::StringImpl **)(v429 + 152);
          *(_QWORD *)(v429 + 152) = 0;
          if (v430)
          {
            if (*(_DWORD *)v430 == 2)
            {
              WTF::StringImpl::~StringImpl(v430, a2, v424, v425, v426, a6, a7, a8);
              WTF::fastFree(v512, v513, v514, v515, v516, v517, v518, v519);
            }
            else
            {
              *(_DWORD *)v430 -= 2;
            }
          }
          v431 = *(_QWORD *)(v429 + 88);
          v432 = *(_QWORD *)(v429 + 96);
          v433 = (__int16 *)(v431 + 2 * v733);
          *(_QWORD *)(v429 + 80) = v433;
          *(_QWORD *)(v429 + 112) = v431 + 2 * v416;
          *(_DWORD *)(v429 + 20) = 0;
          *(_DWORD *)(v429 + 36) = 0;
          if ((unint64_t)v433 >= v432)
            v434 = 0;
          else
            v434 = *v433;
          *(_WORD *)(v429 + 176) = v434;
          v435 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)v435 = v735;
          *(_BYTE *)(v435 + 56) = v734;
          v436 = *(_DWORD *)(a1 + 7400);
          v437 = *(_DWORD *)(a1 + 7412);
          v438 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v436;
          *(_DWORD *)(a1 + 7448) = v437;
          *(_DWORD *)(a1 + 7452) = v438;
          *(_DWORD *)(v435 + 4) = v436;
          v439 = *(_DWORD *)(a1 + 12);
          if (!v439)
          {
            __break(0xC471u);
            JUMPOUT(0x197EC9940);
          }
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v435, (uint64_t)v741, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v439 - 1) + 9) & 1, v426, a6, a7, a8);
          *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = __len;
          *(_OWORD *)(a1 + 7296) = v742;
          *(_DWORD *)(a1 + 7312) = 0;
          *(_DWORD *)(a1 + 7316) = (_DWORD)v739;
          *(_OWORD *)(a1 + 7320) = *(_OWORD *)v745;
          *(_QWORD *)(a1 + 7336) = *(_QWORD *)&v745[16];
          *v11 = v738;
          v11[1] = v737;
          v443 = *(WTF::StringImpl **)(a1 + 7360);
          *(_QWORD *)(a1 + 7360) = 0;
          if (v443)
          {
            if (*(_DWORD *)v443 == 2)
            {
              WTF::StringImpl::~StringImpl(v443, a2, v440, v441, v442, a6, a7, a8);
              WTF::fastFree(v520, v521, v522, v523, v524, v525, v526, v527);
            }
            else
            {
              *(_DWORD *)v443 -= 2;
            }
          }
          v89 = 19;
          v9 = v428;
          v13 = (char *)v740;
        }
        v90 = v24;
        a3 = 1;
        a4 = 0x900000000000001;
        a5 = 12;
        v88 = v422;
      }
      else
      {
        v90 = 0;
      }
      v91 = v89 - 2;
      while (2)
      {
        switch(v91)
        {
          case 0u:
            if (!v87)
            {
              ++*(_DWORD *)(a1 + 7304);
              v122 = *(_DWORD *)(a1 + 7300);
              if (v13)
              {
                v299 = *v741;
                if (*v741 != 2)
                {
                  if (v299 != 20 && (v299 & 0x100000) == 0)
                  {
                    if (!*(_QWORD *)(a1 + 7360))
                      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected opening '(' at start of argument list");
                    goto LABEL_556;
                  }
                  goto LABEL_555;
                }
                v300 = *(_DWORD *)(a1 + 7400);
                v301 = *(_DWORD *)(a1 + 7412);
                v302 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v300;
                *(_DWORD *)(a1 + 7448) = v301;
                *(_DWORD *)(a1 + 7452) = v302;
                v303 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v303 + 4) = v300;
                v304 = *(_DWORD *)(a1 + 12);
                if (!v304)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EC9970);
                }
                v305 = v88;
                --v13;
                v306 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v304 - 1) + 9) & 1;
                *(_BYTE *)(v303 + 56) = 0;
                v307 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v303, (uint64_t)v741, 2, v306, 12, a6, a7, a8);
                *(_DWORD *)(a1 + 7368) = v307;
                if (v307 == 3)
                {
                  v352 = *(_DWORD *)(a1 + 7400);
                  v353 = *(_DWORD *)(a1 + 7412);
                  v354 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v352;
                  *(_DWORD *)(a1 + 7448) = v353;
                  *(_DWORD *)(a1 + 7452) = v354;
                  v313 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v313 + 4) = v352;
                  v314 = *(_DWORD *)(a1 + 12);
                  if (!v314)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EC7AE0);
                  }
                }
                else
                {
                  if (v307 != 37)
                  {
                    *(_DWORD *)v745 = 0;
                    *(_QWORD *)&v745[8] = *(_QWORD *)(a1 + 7496);
                    *(_QWORD *)&v745[16] = a1;
                    *(_QWORD *)(a1 + 7496) = v745;
                    v308 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v9, v745);
                    *(_QWORD *)(*(_QWORD *)&v745[16] + 7496) = *(_QWORD *)&v745[8];
                    if (v308)
                      goto LABEL_238;
LABEL_551:
                    if (*v741 != 20 && (*v741 & 0x100000) == 0)
                    {
                      if (!*(_QWORD *)(a1 + 7360))
                        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse function argument");
                      goto LABEL_556;
                    }
LABEL_555:
                    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_556:
                    if (*v741 == 20 || (*v741 & 0x100000) != 0)
                    {
LABEL_660:
                      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
                    }
                    else if (!*(_QWORD *)(a1 + 7360))
                    {
                      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse call arguments");
                    }
LABEL_661:
                    v24 = 0;
                    *(_DWORD *)(a1 + 7300) = v122;
                    goto LABEL_98;
                  }
                  v612 = *(_DWORD *)(a1 + 7400);
                  v613 = *(_DWORD *)(a1 + 7412);
                  v614 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v612;
                  *(_DWORD *)(a1 + 7448) = v613;
                  *(_DWORD *)(a1 + 7452) = v614;
                  v615 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v615 + 4) = v612;
                  v616 = *(_DWORD *)(a1 + 12);
                  if (!v616)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EC9968);
                  }
                  v617 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v616 - 1) + 9) & 1;
                  *(_BYTE *)(v615 + 56) = 0;
                  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v615, (uint64_t)v741, 0, v617, a5, a6, a7, a8);
                  JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1);
                  if (*(_QWORD *)(a1 + 7360))
                    goto LABEL_551;
LABEL_238:
                  v309 = *v741;
                  if (*v741 != 6)
                  {
                    if (v309 != 37)
                      goto LABEL_240;
                    if (*(_QWORD *)(a1 + 7360))
                      goto LABEL_556;
LABEL_839:
                    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "The '...' operator should come before the target expression");
                    goto LABEL_556;
                  }
                  do
                  {
                    v706 = *(_DWORD *)(a1 + 7400);
                    v707 = *(_DWORD *)(a1 + 7412);
                    v708 = *(_DWORD *)(a1 + 7404);
                    *(_DWORD *)(a1 + 7444) = v706;
                    *(_DWORD *)(a1 + 7448) = v707;
                    *(_DWORD *)(a1 + 7452) = v708;
                    v709 = *(_QWORD *)(a1 + 7288);
                    *(_DWORD *)(v709 + 4) = v706;
                    v710 = *(_DWORD *)(a1 + 12);
                    if (!v710)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197EC9F58);
                    }
                    v711 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v710 - 1) + 9) & 1;
                    *(_BYTE *)(v709 + 56) = 0;
                    v712 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v709, (uint64_t)v741, 2, v711, a5, a6, a7, a8);
                    *(_DWORD *)(a1 + 7368) = v712;
                    if (v712 == 3)
                      goto LABEL_241;
                    if (v712 == 37)
                    {
                      v713 = *(_DWORD *)(a1 + 7400);
                      v714 = *(_DWORD *)(a1 + 7412);
                      v715 = *(_DWORD *)(a1 + 7404);
                      *(_DWORD *)(a1 + 7444) = v713;
                      *(_DWORD *)(a1 + 7448) = v714;
                      *(_DWORD *)(a1 + 7452) = v715;
                      v716 = *(_QWORD *)(a1 + 7288);
                      *(_DWORD *)(v716 + 4) = v713;
                      v717 = *(_DWORD *)(a1 + 12);
                      if (!v717)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197EC9F50);
                      }
                      v718 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v717 - 1) + 9) & 1;
                      *(_BYTE *)(v716 + 56) = 0;
                      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v716, (uint64_t)v741, 0, v718, a5, a6, a7, a8);
                      JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1);
                    }
                    else
                    {
                      *(_DWORD *)v745 = 0;
                      *(_QWORD *)&v745[8] = *(_QWORD *)(a1 + 7496);
                      *(_QWORD *)&v745[16] = a1;
                      *(_QWORD *)(a1 + 7496) = v745;
                      JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v9, v745);
                      *(_QWORD *)(*(_QWORD *)&v745[16] + 7496) = *(_QWORD *)&v745[8];
                    }
                    if (*(_QWORD *)(a1 + 7360))
                      goto LABEL_556;
                    v309 = *v741;
                  }
                  while (*v741 == 6);
                  if (v309 == 37)
                    goto LABEL_839;
LABEL_240:
                  if (v309 != 3)
                  {
                    if (v309 == 20 || (v309 & 0x100000) != 0)
                      goto LABEL_555;
                    if (!*(_QWORD *)(a1 + 7360))
                      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[14]>(a1);
                    goto LABEL_556;
                  }
LABEL_241:
                  v310 = *(_DWORD *)(a1 + 7400);
                  v311 = *(_DWORD *)(a1 + 7412);
                  v312 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v310;
                  *(_DWORD *)(a1 + 7448) = v311;
                  *(_DWORD *)(a1 + 7452) = v312;
                  v313 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v313 + 4) = v310;
                  v314 = *(_DWORD *)(a1 + 12);
                  if (!v314)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EC9960);
                  }
                }
                v118 = v11;
                v315 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v314 - 1) + 9) & 1;
                *(_BYTE *)(v313 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v313, (uint64_t)v741, 0, v315, a5, a6, a7, a8);
                LODWORD(v24) = 19;
                a3 = 1;
                a4 = 0x900000000000001;
                a5 = 12;
                v88 = v305;
LABEL_368:
                *(_DWORD *)(a1 + 7300) = v122;
                v120 = v741;
                goto LABEL_87;
              }
LABEL_354:
              v380 = *(_DWORD *)(a1 + 12);
              if (!v380)
              {
                __break(0xC471u);
                JUMPOUT(0x197EC99B8);
              }
              v381 = v380 - 1;
              v382 = *(_QWORD *)a1;
              v740 = *(unsigned int *)(*(_QWORD *)a1 + 720 * v381 + 180);
              v383 = *(_DWORD *)(a1 + 7368);
              if (v383 == 2)
              {
                v384 = (WTF::AtomStringImpl *)v88;
                v385 = v8;
                v386 = *(_DWORD *)(a1 + 7400);
                v387 = *(_DWORD *)(a1 + 7412);
                v388 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v386;
                *(_DWORD *)(a1 + 7448) = v387;
                *(_DWORD *)(a1 + 7452) = v388;
                v389 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v389 + 4) = v386;
                v390 = *(_BYTE *)(v382 + 720 * v381 + 9) & 1;
                *(_BYTE *)(v389 + 56) = 0;
                v391 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v389, (uint64_t)v741, 2, v390, 12, a6, a7, a8);
                *(_DWORD *)(a1 + 7368) = v391;
                if (v391 == 3)
                {
                  v403 = *(_DWORD *)(a1 + 7400);
                  v404 = *(_DWORD *)(a1 + 7412);
                  v405 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v403;
                  *(_DWORD *)(a1 + 7448) = v404;
                  *(_DWORD *)(a1 + 7452) = v405;
                  v398 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v398 + 4) = v403;
                  v399 = *(_DWORD *)(a1 + 12);
                  if (!v399)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EC7F44);
                  }
                }
                else
                {
                  if (v391 != 37)
                  {
                    *(_DWORD *)v745 = 0;
                    *(_QWORD *)&v745[8] = *(_QWORD *)(a1 + 7496);
                    *(_QWORD *)&v745[16] = a1;
                    *(_QWORD *)(a1 + 7496) = v745;
                    v393 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v9, v745);
                    *(_QWORD *)(*(_QWORD *)&v745[16] + 7496) = *(_QWORD *)&v745[8];
                    if (v393)
                      goto LABEL_359;
LABEL_444:
                    v400 = v9;
                    if (*v741 != 20 && (*v741 & 0x100000) == 0)
                    {
                      if (!*(_QWORD *)(a1 + 7360))
                      {
                        v402 = 1;
                        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse function argument");
LABEL_364:
                        a3 = 1;
                        a4 = 0x900000000000001;
                        a5 = 12;
                        v8 = v385;
                        v88 = (uint64_t)v384;
                        if ((_DWORD)v384)
                        {
                          if ((v402 & 1) != 0 || *v741 == 38)
                          {
                            v486 = *(_DWORD *)(a1 + 12);
                            if (!v486)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x197EC9CB0);
                            }
                            v487 = v122;
                            v488 = v486 - 1;
                            v489 = *(_QWORD *)a1 + 720 * v488;
                            v492 = *(_DWORD *)(v489 + 180);
                            v491 = (_DWORD *)(v489 + 180);
                            v490 = v492;
                            v493 = (uint64_t *)(v491 - 3);
                            if (v492 < v740)
                            {
                              if (*(_DWORD *)(*(_QWORD *)a1 + 720 * v488 + 176) < v740)
                                WTF::Vector<WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v491 - 3), (void *)v740, 1, 0x900000000000001, 12, a6, a7, a8);
                              v696 = *v493;
                              if (*v493 && *v491 != (_DWORD)v740)
                              {
                                v697 = v696 + 72 * v740;
                                v698 = v696 + 72 * *v491;
                                *(_QWORD *)&v699 = -1;
                                *((_QWORD *)&v699 + 1) = -1;
                                do
                                {
                                  *(_QWORD *)v698 = 0x800000000;
                                  *(_OWORD *)(v698 + 8) = v699;
                                  *(_OWORD *)(v698 + 24) = v699;
                                  *(_OWORD *)(v698 + 40) = v699;
                                  *(_OWORD *)(v698 + 56) = v699;
                                  v698 += 72;
                                }
                                while (v698 != v697);
                              }
                            }
                            else if (v490 != (_DWORD)v740)
                            {
                              v494 = *v493;
                              v495 = 72 * v490 - 72 * v740;
                              v496 = (unint64_t *)(v494 + 72 * v740 + 8);
                              do
                              {
                                if (*((_DWORD *)v496 - 1) != 8)
                                  WTF::fastFree(*v496, a2, a3, a4, a5, a6, a7, a8);
                                v496 += 9;
                                v495 -= 72;
                              }
                              while (v495);
                            }
                            *v491 = v740;
                            v497 = *(_DWORD **)(a1 + 7496);
                            if (v497)
                              *v497 = 2;
                            JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
                            v122 = v487;
                            goto LABEL_661;
                          }
                        }
                        else if (v402)
                        {
                          goto LABEL_556;
                        }
                        if (v87)
                        {
                          v406 = *(_DWORD *)(a1 + 12);
                          if (!v406)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x197EC99B0);
                          }
                          v407 = *(_DWORD *)(a1 + 12);
                          v9 = v400;
                          while (1)
                          {
                            v408 = v407 - 1;
                            if (v407 == 1)
                              break;
                            --v407;
                            v409 = v408;
                            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v408 + 12) & 0x40) != 0)
                              goto LABEL_386;
                          }
                          v409 = 0;
LABEL_386:
                          if (v406 <= v408)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x197EC9988);
                          }
                          v410 = v409;
                          *(_DWORD *)(*(_QWORD *)a1 + 720 * v409 + 10) |= 0x10u;
                          v411 = *(_DWORD *)(a1 + 12);
                          if (*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 148))
                          {
                            if (!v411)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x197EC9990);
                            }
                            a2 = v384;
                            v415 = *(_QWORD *)a1;
                            v412 = v411 - 1;
                            v9 = v400;
                            a3 = 1;
                            a4 = 0x900000000000001;
                            a5 = 12;
                          }
                          else
                          {
                            if (!v411)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x197EC99A8);
                            }
                            a2 = v384;
                            v412 = v411 - 1;
                            v413 = *(_DWORD *)(a1 + 12);
                            while (1)
                            {
                              v414 = v413;
                              if (v413 == 1)
                                break;
                              --v413;
                              if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v414 - 1) + 10) & 0x405400) == 0x400000)
                                goto LABEL_392;
                            }
                            v413 = 0;
LABEL_392:
                            if (v411 <= v414 - 1)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x197EC9998);
                            }
                            v415 = *(_QWORD *)a1;
                            if (*(_BYTE *)(*(_QWORD *)a1 + 720 * v413 + 15) != 2
                              && ((*(_BYTE *)(v415 + 720 * v413 + 13) & 2) == 0
                               || *(_BYTE *)(v415 + 720 * v413 + 16) != 1))
                            {
                              if (!*(_QWORD *)(a1 + 7360))
                                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "super is not valid in this context");
                              goto LABEL_661;
                            }
                          }
                          v118 = v11;
                          if ((*(_BYTE *)(v415 + 720 * v412 + 11) & 8) != 0)
                          {
                            if (v411 <= v408)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x197EC99A0);
                            }
                            v13 = 0;
                            *(_BYTE *)(v415 + 720 * v410 + 32) |= 8u;
                            LODWORD(v24) = 18;
                            a3 = 1;
                            a4 = 0x900000000000001;
                            a5 = 12;
                          }
                          else
                          {
                            v13 = 0;
                            LODWORD(v24) = 18;
                          }
                          v88 = (uint64_t)a2;
                        }
                        else
                        {
                          LODWORD(v24) = 18;
                          v118 = v11;
                          v9 = v400;
                          v13 = 0;
                        }
                        goto LABEL_368;
                      }
LABEL_381:
                      v402 = 1;
                      goto LABEL_364;
                    }
LABEL_380:
                    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
                    goto LABEL_381;
                  }
                  v462 = *(_DWORD *)(a1 + 7400);
                  v463 = *(_DWORD *)(a1 + 7412);
                  v464 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v462;
                  *(_DWORD *)(a1 + 7448) = v463;
                  *(_DWORD *)(a1 + 7452) = v464;
                  v465 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v465 + 4) = v462;
                  v466 = *(_DWORD *)(a1 + 12);
                  if (!v466)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EC9980);
                  }
                  v467 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v466 - 1) + 9) & 1;
                  *(_BYTE *)(v465 + 56) = 0;
                  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v465, (uint64_t)v741, 0, v467, v392, a6, a7, a8);
                  *(_DWORD *)v745 = 0;
                  *(_QWORD *)&v745[8] = *(_QWORD *)(a1 + 7496);
                  *(_QWORD *)&v745[16] = a1;
                  *(_QWORD *)(a1 + 7496) = v745;
                  JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v9, v745);
                  *(_QWORD *)(*(_QWORD *)&v745[16] + 7496) = *(_QWORD *)&v745[8];
                  if (*(_QWORD *)(a1 + 7360))
                    goto LABEL_444;
LABEL_359:
                  v394 = *v741;
                  if (*v741 == 6)
                  {
                    while (1)
                    {
                      v719 = *(_DWORD *)(a1 + 7400);
                      v720 = *(_DWORD *)(a1 + 7412);
                      v721 = *(_DWORD *)(a1 + 7404);
                      *(_DWORD *)(a1 + 7444) = v719;
                      *(_DWORD *)(a1 + 7448) = v720;
                      *(_DWORD *)(a1 + 7452) = v721;
                      v722 = *(_QWORD *)(a1 + 7288);
                      *(_DWORD *)(v722 + 4) = v719;
                      v723 = *(_DWORD *)(a1 + 12);
                      if (!v723)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197ECA09CLL);
                      }
                      v724 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v723 - 1) + 9) & 1;
                      *(_BYTE *)(v722 + 56) = 0;
                      v725 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v722, (uint64_t)v741, 2, v724, v392, a6, a7, a8);
                      *(_DWORD *)(a1 + 7368) = v725;
                      if (v725 == 3)
                        break;
                      if (v725 == 37)
                      {
                        v726 = *(_DWORD *)(a1 + 7400);
                        v727 = *(_DWORD *)(a1 + 7412);
                        v728 = *(_DWORD *)(a1 + 7404);
                        *(_DWORD *)(a1 + 7444) = v726;
                        *(_DWORD *)(a1 + 7448) = v727;
                        *(_DWORD *)(a1 + 7452) = v728;
                        v729 = *(_QWORD *)(a1 + 7288);
                        *(_DWORD *)(v729 + 4) = v726;
                        v730 = *(_DWORD *)(a1 + 12);
                        if (!v730)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x197ECA094);
                        }
                        v731 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v730 - 1) + 9) & 1;
                        *(_BYTE *)(v729 + 56) = 0;
                        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v729, (uint64_t)v741, 0, v731, v392, a6, a7, a8);
                      }
                      *(_DWORD *)v745 = 0;
                      *(_QWORD *)&v745[8] = *(_QWORD *)(a1 + 7496);
                      *(_QWORD *)&v745[16] = a1;
                      *(_QWORD *)(a1 + 7496) = v745;
                      JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v9, v745);
                      *(_QWORD *)(*(_QWORD *)&v745[16] + 7496) = *(_QWORD *)&v745[8];
                      if (*(_QWORD *)(a1 + 7360))
                      {
                        v400 = v9;
                        goto LABEL_381;
                      }
                      v394 = *v741;
                      if (*v741 != 6)
                      {
                        if (v394 != 37)
                          goto LABEL_361;
                        v400 = v9;
                        goto LABEL_852;
                      }
                    }
                  }
                  else
                  {
                    if (v394 == 37)
                    {
                      v400 = v9;
                      if (!*(_QWORD *)(a1 + 7360))
LABEL_852:
                        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "The '...' operator should come before the target expression");
                      goto LABEL_381;
                    }
LABEL_361:
                    if (v394 != 3)
                    {
                      v400 = v9;
                      if (v394 != 20 && (v394 & 0x100000) == 0)
                      {
                        if (!*(_QWORD *)(a1 + 7360))
                          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[14]>(a1);
                        goto LABEL_381;
                      }
                      goto LABEL_380;
                    }
                  }
                  v395 = *(_DWORD *)(a1 + 7400);
                  v396 = *(_DWORD *)(a1 + 7412);
                  v397 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v395;
                  *(_DWORD *)(a1 + 7448) = v396;
                  *(_DWORD *)(a1 + 7452) = v397;
                  v398 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v398 + 4) = v395;
                  v399 = *(_DWORD *)(a1 + 12);
                  if (!v399)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EC9978);
                  }
                }
                v400 = v9;
                v401 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v399 - 1) + 9) & 1;
                *(_BYTE *)(v398 + 56) = 0;
                v402 = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v398, (uint64_t)v741, 0, v401, v392, a6, a7, a8);
                goto LABEL_364;
              }
              v400 = v9;
              if (v383 != 20 && (v383 & 0x100000) == 0)
              {
                v384 = (WTF::AtomStringImpl *)v88;
                v385 = v8;
                if (!*(_QWORD *)(a1 + 7360))
                {
                  v402 = 1;
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected opening '(' at start of argument list");
                  goto LABEL_364;
                }
                goto LABEL_381;
              }
              v384 = (WTF::AtomStringImpl *)v88;
              v385 = v8;
              goto LABEL_380;
            }
            if (!v11[1])
            {
              ++*(_DWORD *)(a1 + 7304);
              v122 = *(_DWORD *)(a1 + 7300);
              if (v13)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use new with super call");
                goto LABEL_661;
              }
              goto LABEL_354;
            }
            if (*v741 == 20 || (*v741 & 0x100000) != 0)
              goto LABEL_455;
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_38;
            v658 = "super call is not valid in class field initializer context";
            v659 = a1;
            v660 = 1;
            break;
          case 2u:
            LODWORD(v740) = v88;
            ++*(_DWORD *)(a1 + 7304);
            v270 = *(_DWORD *)(a1 + 7400);
            v271 = *(_DWORD *)(a1 + 7412);
            v272 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v270;
            *(_DWORD *)(a1 + 7448) = v271;
            *(_DWORD *)(a1 + 7452) = v272;
            v273 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v273 + 4) = v270;
            v274 = *(_DWORD *)(a1 + 12);
            if (!v274)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC9958);
            }
            v118 = v11;
            v275 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v274 - 1) + 9) & 1;
            *(_BYTE *)(v273 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v273, (uint64_t)v741, 0, v275, 12, a6, a7, a8);
            v122 = *(_DWORD *)(a1 + 7300);
            if (!JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(a1, (uint64_t)v9))
            {
              if (*v741 == 20 || (*v741 & 0x100000) != 0)
                goto LABEL_660;
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse subscript expression");
              goto LABEL_661;
            }
            if (v87)
            {
              v662 = *(_DWORD *)(a1 + 12);
              if (!v662)
              {
                __break(0xC471u);
                JUMPOUT(0x197EC9950);
              }
              v663 = *(_QWORD *)a1;
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v662 - 1) + 11) & 8) != 0)
              {
                v664 = *(_DWORD *)(a1 + 12);
                while (1)
                {
                  v665 = v664;
                  if (v664 == 1)
                    break;
                  --v664;
                  if ((*(_BYTE *)(v663 + 720 * (v665 - 1) + 12) & 0x40) != 0)
                    goto LABEL_648;
                }
                v664 = 0;
LABEL_648:
                if (v662 <= v665 - 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EC9930);
                }
                *(_BYTE *)(v663 + 720 * v664 + 32) |= 0x10u;
              }
            }
            v276 = *v741;
            if (*v741 == 5)
            {
              v277 = *(_DWORD *)(a1 + 7400);
              v278 = *(_DWORD *)(a1 + 7412);
              v279 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v277;
              *(_DWORD *)(a1 + 7448) = v278;
              *(_DWORD *)(a1 + 7452) = v279;
              v280 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v280 + 4) = v277;
              v281 = *(_DWORD *)(a1 + 12);
              if (!v281)
              {
                __break(0xC471u);
                JUMPOUT(0x197EC9948);
              }
              v282 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v281 - 1) + 9) & 1;
              *(_BYTE *)(v280 + 56) = 0;
              v120 = v741;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v280, (uint64_t)v741, 0, v282, a5, a6, a7, a8);
              *(_DWORD *)(a1 + 7300) = v122;
              LODWORD(v24) = 16;
              a3 = 1;
              a4 = 0x900000000000001;
              a5 = 12;
              v88 = v740;
              goto LABEL_87;
            }
            if (v276 != 20 && (v276 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[21]>(a1, "]", "subscript expression");
              goto LABEL_661;
            }
            goto LABEL_660;
          case 6u:
            if (v90)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use tagged templates in an optional chain");
              goto LABEL_38;
            }
            if (!v87)
            {
              v449 = (uint64_t)v9;
              v450 = v88;
              v451 = *(_DWORD *)(a1 + 7300);
              v452 = (const char *)v449;
              if (JSC::Parser<JSC::Lexer<char16_t>>::parseTemplateLiteral<JSC::SyntaxChecker>(a1, v449, 0, 0x900000000000001, 12, a6, a7, a8))
              {
                v118 = v11;
                v11[193] = 1;
                *(_DWORD *)(a1 + 7300) = v451;
                LODWORD(v24) = 53;
                a3 = 1;
                a4 = 0x900000000000001;
                a5 = 12;
                v88 = v450;
                v120 = v741;
                v9 = v452;
                goto LABEL_87;
              }
              if (*v741 == 20 || (*v741 & 0x100000) != 0)
              {
                JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
              }
              else if (!*(_QWORD *)(a1 + 7360))
              {
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse template literal");
              }
              v24 = 0;
              *(_DWORD *)(a1 + 7300) = v451;
              goto LABEL_98;
            }
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_38;
            v656 = "Cannot use super as tag for tagged templates";
            goto LABEL_620;
          case 0x11u:
            ++*(_DWORD *)(a1 + 7304);
            v92 = *(_DWORD *)(a1 + 7400);
            v93 = *(_DWORD *)(a1 + 7412);
            v94 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v92;
            *(_DWORD *)(a1 + 7448) = v93;
            *(_DWORD *)(a1 + 7452) = v94;
            v95 = *(unsigned int **)(a1 + 7288);
            v95[1] = v92;
            v96 = *(_DWORD *)(a1 + 12);
            if (!v96)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC9928);
            }
            v97 = v88;
            v98 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v96 - 1) + 9);
            v99 = (unsigned __int16 *)*((_QWORD *)v95 + 10);
            v100 = *((_QWORD *)v95 + 12);
            if ((unint64_t)v99 >= v100 || (*v99 | 0x20u) - 97 > 0x19)
              goto LABEL_108;
            v101 = *((_QWORD *)v95 + 11);
            v102 = ((unint64_t)v99 - v101) >> 1;
            v103 = (unint64_t)(*((_QWORD *)v95 + 14) - v101) >> 1;
            v104 = *v95 | ((unint64_t)v102 << 32);
            v105 = v99 + 1;
            do
            {
              v106 = v105;
              if ((unint64_t)v105 >= v100)
              {
                LOWORD(v107) = 0;
LABEL_82:
                *((_WORD *)v95 + 88) = v107;
                *((_QWORD *)v95 + 10) = v106;
                *(_QWORD *)(a1 + 7376) = 0;
                *(_DWORD *)(a1 + 7400) = *v95;
                v110 = *((_QWORD *)v95 + 11);
                *(_DWORD *)(a1 + 7404) = (unint64_t)(*((_QWORD *)v95 + 14) - v110) >> 1;
                *(_DWORD *)(a1 + 7408) = ((unint64_t)v99 - v110) >> 1;
                *(_DWORD *)(a1 + 7412) = (unint64_t)(*((_QWORD *)v95 + 10) - v110) >> 1;
                *(_QWORD *)(a1 + 7416) = v104;
                *(_DWORD *)(a1 + 7424) = v103;
                v111 = *((_QWORD *)v95 + 11);
                v112 = (unint64_t)(*((_QWORD *)v95 + 10) - v111) >> 1;
                v113 = (unint64_t)(*((_QWORD *)v95 + 14) - v111) >> 1;
                *(_QWORD *)(v11 + 84) = *v95 | ((unint64_t)v112 << 32);
                *(_DWORD *)(a1 + 7436) = v113;
                v95[15] = 12;
                *(_DWORD *)(a1 + 7368) = 12;
                goto LABEL_83;
              }
              ++v105;
              v107 = *v106;
            }
            while (v107 - 48 < 0xA || (v107 | 0x20) - 97 < 0x1A);
            if (v107 <= 0x7F)
            {
              v109 = v107 - 36 > 0x3B || ((1 << (v107 - 36)) & 0x900000000000001) == 0;
              if (v109)
                goto LABEL_82;
            }
LABEL_108:
            *((_BYTE *)v95 + 56) = 0;
            v128 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator(v95, (uint64_t)v741, 5, v98 & 1, 12, a6, a7, a8);
            *(_DWORD *)(a1 + 7368) = v128;
            if (v128 != 12)
            {
              v740 = (unint64_t)v13;
              if (v128 == 13)
              {
                if (v87)
                {
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot access private names from super");
                }
                else
                {
                  v444 = *(_DWORD *)(a1 + 12);
                  if (!v444)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EC9908);
                  }
                  v445 = v9;
                  v446 = *(uint64_t **)(a1 + 7376);
                  v447 = v444 - 1;
                  v24 = *(_QWORD *)a1;
                  v448 = *v446;
                  if (*(_BYTE *)(*(_QWORD *)a1 + 720 * (v444 - 1) + 14) != 2
                    || (JSC::Scope::hasPrivateName(*(_QWORD *)(v24 + 720 * v447 + 160), *v446) & 1) != 0)
                  {
                    JSC::Scope::useVariable(v24 + 720 * v447, v448, 0);
                    v11[194] = 1;
                    *(_QWORD *)(a1 + 7336) = v446;
                    *(_DWORD *)(a1 + 7368) = 12;
                    v96 = *(_DWORD *)(a1 + 12);
                    LODWORD(v24) = 25;
                    v9 = v445;
                    v13 = (char *)v740;
                    goto LABEL_85;
                  }
                  if (!*(_QWORD *)(a1 + 7360))
                  {
                    *(_QWORD *)v745 = v448;
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[44],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (WTF::PrintStream **)v745);
                  }
                }
                goto LABEL_38;
              }
              if (v128 != 20 && (v128 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                {
                  v661 = "'?.'";
                  if (!v90)
                    v661 = "'.'";
                  *(_QWORD *)v745 = v661;
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[32],char const*>(a1, "Expected a property name after ", (const char **)v745);
                }
                goto LABEL_38;
              }
LABEL_455:
              JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_38:
              v24 = 0;
              goto LABEL_98;
            }
            v96 = *(_DWORD *)(a1 + 12);
            if (!v87)
              goto LABEL_84;
LABEL_83:
            if (!v96)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC9920);
            }
            v125 = *(_QWORD *)a1;
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v96 - 1) + 11) & 8) != 0)
            {
              v126 = v96;
              while (1)
              {
                v127 = v126;
                if (v126 == 1)
                  break;
                --v126;
                if ((*(_BYTE *)(v125 + 720 * (v127 - 1) + 12) & 0x40) != 0)
                  goto LABEL_106;
              }
              v126 = 0;
LABEL_106:
              if (v96 <= v127 - 1)
              {
                __break(0xC471u);
                JUMPOUT(0x197EC9910);
              }
              *(_BYTE *)(v125 + 720 * v126 + 32) |= 0x10u;
              LODWORD(v24) = 17;
            }
            else
            {
LABEL_84:
              LODWORD(v24) = 17;
            }
LABEL_85:
            v114 = *(_DWORD *)(a1 + 7400);
            v115 = *(_DWORD *)(a1 + 7412);
            v116 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v114;
            *(_DWORD *)(a1 + 7448) = v115;
            *(_DWORD *)(a1 + 7452) = v116;
            v117 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v117 + 4) = v114;
            if (!v96)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC9918);
            }
            v118 = v11;
            v119 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v96 - 1) + 9) & 1;
            *(_BYTE *)(v117 + 56) = 0;
            v120 = v741;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v117, (uint64_t)v741, 0, v119, a5, a6, a7, a8);
            a3 = 1;
            a4 = 0x900000000000001;
            a5 = 12;
            v88 = v97;
LABEL_87:
            v87 = 0;
            v121 = *v120;
            v11 = v118;
            v91 = v121 - 2;
            if ((v121 - 2) <= 0x11)
              continue;
LABEL_92:
            if (v90)
              v24 = 24;
            else
              v24 = v24;
            v89 = 39;
            if (*v741 == 39)
              goto LABEL_62;
            if (v87)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                v379 = "Cannot use new with super call";
                if (!v13)
                  v379 = "super is not valid in this context";
                *(_QWORD *)v745 = v379;
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const*>(a1, 0, (const char **)v745);
              }
              goto LABEL_38;
            }
            if (v13)
            {
              if ((unint64_t)(v13 - 1) >= HIDWORD(v744))
              {
                __break(0xC471u);
                JUMPOUT(0x197EC9C80);
              }
              v24 = 19;
            }
LABEL_98:
            v123 = v743;
            if (v743)
            {
              v743 = 0;
              LODWORD(v744) = 0;
              WTF::fastFree((unint64_t)v123, a2, a3, a4, a5, a6, a7, a8);
            }
            return v24;
          default:
            goto LABEL_92;
        }
        break;
      }
LABEL_630:
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v659, v660, v658);
      goto LABEL_38;
    case 8:
      v132 = JSC::Parser<JSC::Lexer<char16_t>>::parseTemplateLiteral<JSC::SyntaxChecker>(a1, (uint64_t)v9, 1u, a4, a5, a6, a7, a8);
      goto LABEL_157;
    case 9:
      v148 = *(_DWORD *)(a1 + 7400);
      v149 = *(_DWORD *)(a1 + 7412);
      v150 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v148;
      *(_DWORD *)(a1 + 7448) = v149;
      *(_DWORD *)(a1 + 7452) = v150;
      v151 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v151 + 4) = v148;
      v152 = *(_DWORD *)(a1 + 12);
      if (!v152)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC9B5CLL);
      }
      v153 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v152 - 1) + 9) & 1;
      *(_BYTE *)(v151 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v151, (uint64_t)v741, 0, v153, a5, a6, a7, a8);
      LODWORD(v24) = 3;
      goto LABEL_59;
    case 10:
      v197 = *(_DWORD *)(a1 + 7400);
      v198 = *(_DWORD *)(a1 + 7412);
      v199 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v197;
      *(_DWORD *)(a1 + 7448) = v198;
      *(_DWORD *)(a1 + 7452) = v199;
      v200 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v200 + 4) = v197;
      v201 = *(_DWORD *)(a1 + 12);
      if (!v201)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC9B7CLL);
      }
      v202 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v201 - 1) + 9) & 1;
      *(_BYTE *)(v200 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v200, (uint64_t)v741, 0, v202, a5, a6, a7, a8);
      LODWORD(v24) = 4;
      goto LABEL_59;
    case 11:
      v154 = *(_DWORD *)(a1 + 7400);
      v155 = *(_DWORD *)(a1 + 7412);
      v156 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v154;
      *(_DWORD *)(a1 + 7448) = v155;
      *(_DWORD *)(a1 + 7452) = v156;
      v157 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v157 + 4) = v154;
      v158 = *(_DWORD *)(a1 + 12);
      if (!v158)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC9B64);
      }
      v159 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v158 - 1) + 9) & 1;
      *(_BYTE *)(v157 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v157, (uint64_t)v741, 0, v159, a5, a6, a7, a8);
      LODWORD(v24) = 6;
      goto LABEL_59;
    case 12:
      v144 = *(_DWORD *)(a1 + 12);
      if (!v144)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC9B54);
      }
      v51 = v144 - 1;
      v52 = *(_QWORD *)a1;
      v145 = *(uint64_t **)(a1 + 7376);
      v146 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v51 + 12) & 0x10) != 0)
      {
        v147 = *v145;
        if (*v145 == *(_QWORD *)(v146 + 880))
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'arguments' as an identifier in static block");
          goto LABEL_34;
        }
      }
      else
      {
        v147 = *v145;
      }
      if (v147 == *(_QWORD *)(v146 + 896) && !v11[40])
      {
        v566 = v9;
        v567 = v11;
        v568 = *(_DWORD *)(a1 + 7408);
        v569 = *(_DWORD *)(a1 + 7400);
        v570 = *(_DWORD *)(a1 + 7412);
        v571 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v569;
        *(_DWORD *)(a1 + 7448) = v570;
        *(_DWORD *)(a1 + 7452) = v571;
        v572 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v572 + 4) = v569;
        v573 = *(_BYTE *)(v52 + 720 * v51 + 9) & 1;
        *(_BYTE *)(v572 + 56) = 0;
        v574 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v572, (uint64_t)v741, 0, v573, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v574;
        if (v574 == 523)
        {
          v575 = *(_QWORD *)(a1 + 7288);
          if (!*(_BYTE *)(v575 + 56))
          {
            v576 = *(_DWORD *)(a1 + 7400);
            v577 = *(_DWORD *)(a1 + 7412);
            v578 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v576;
            *(_DWORD *)(a1 + 7448) = v577;
            *(_DWORD *)(a1 + 7452) = v578;
            *(_DWORD *)(v575 + 4) = v576;
            v579 = *(_DWORD *)(a1 + 12);
            if (!v579)
            {
              __break(0xC471u);
              JUMPOUT(0x197EC9CE8);
            }
            v580 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v579 - 1) + 9) & 1;
            *(_BYTE *)(v575 + 56) = 0;
            v8 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v575, (uint64_t)v741, 0, v580, a5, a6, a7, a8);
            *(_DWORD *)(a1 + 7368) = v8;
            if ((_DWORD)v8 == 191488)
            {
              v585 = *(_DWORD *)(a1 + 7400);
              v586 = *(_DWORD *)(a1 + 7412);
              v587 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v585;
              *(_DWORD *)(a1 + 7448) = v586;
              *(_DWORD *)(a1 + 7452) = v587;
              v588 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v588 + 4) = v585;
              v589 = *(_DWORD *)(a1 + 12);
              if (!v589)
              {
                __break(0xC471u);
                JUMPOUT(0x197EC9CF0);
              }
              v590 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v589 - 1) + 9) & 1;
              *(_BYTE *)(v588 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v588, (uint64_t)v741, 0, v590, v581, v582, v583, v584);
              v591 = 16;
            }
            else
            {
              v591 = 9;
            }
            v592 = v11[130];
            v567[130] = v591;
            v746 = 0u;
            *(_OWORD *)&v745[8] = 0u;
            *(_QWORD *)v745 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
            if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, v566, 0, 0, 0, 1, v568, (WTF::StringImpl ***)v745, 0) & 1) != 0)
            {
              LODWORD(v24) = 12;
            }
            else
            {
              if (*v741 == 20 || (*v741 & 0x100000) != 0)
              {
                JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
              }
              else if (!*(_QWORD *)(a1 + 7360))
              {
                v666 = "Cannot parse async function expression";
                if ((_DWORD)v8 == 191488)
                  v666 = "Cannot parse async generator function expression";
                *(_QWORD *)&v742 = v666;
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const*>(a1, 1, (const char **)&v742);
              }
              LODWORD(v24) = 0;
            }
            v567[130] = v592;
            v11 = v567;
            v9 = v566;
            goto LABEL_58;
          }
        }
        else if (v574 == 38)
        {
          goto LABEL_34;
        }
        v602 = *(_DWORD *)(a1 + 12);
        if (!v602)
        {
          __break(0xC471u);
          JUMPOUT(0x197EC9CD8);
        }
        JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v602 - 1), *v145, 0);
        *(_QWORD *)(a1 + 7320) = v145;
        LODWORD(v24) = 2;
        v9 = v566;
        goto LABEL_59;
      }
      if (!v11[1] || v147 != *(_QWORD *)(v146 + 880))
        goto LABEL_185;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot reference 'arguments' in class field initializer");
      goto LABEL_34;
    case 14:
      v138 = *(_DWORD *)(a1 + 7400);
      v139 = *(_DWORD *)(a1 + 7412);
      v140 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v138;
      *(_DWORD *)(a1 + 7448) = v139;
      *(_DWORD *)(a1 + 7452) = v140;
      v141 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v141 + 4) = v138;
      v142 = *(_DWORD *)(a1 + 12);
      if (!v142)
      {
        __break(0xC471u);
        JUMPOUT(0x197EC9B4CLL);
      }
      v143 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v142 - 1) + 9) & 1;
      *(_BYTE *)(v141 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v141, (uint64_t)v741, 0, v143, a5, a6, a7, a8);
      LODWORD(v24) = 5;
      goto LABEL_59;
    case 25:
      goto LABEL_162;
    default:
      goto LABEL_33;
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2)
{
  int32x2_t *v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;

  v3 = (int32x2_t *)(a1 + 7300);
  if ((unint64_t)&v30 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      result = 0;
      v3[6].i8[4] = 1;
      return result;
    }
    return 0;
  }
  v31 = 0;
  v32 = *(_QWORD *)(a1 + 7496);
  v33 = a1;
  *(_QWORD *)(a1 + 7496) = &v31;
  result = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v31);
  *(_QWORD *)(v33 + 7496) = v32;
  v10 = *(_DWORD *)(a1 + 7368);
  if (!(_DWORD)result)
  {
    if (v10 != 20 && (v10 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[24]>(a1);
      return 0;
    }
LABEL_24:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return 0;
  }
  if (v10 == 6)
  {
    v11 = *(_DWORD *)(a1 + 7400);
    v12 = *(_DWORD *)(a1 + 7412);
    v13 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v11;
    *(_DWORD *)(a1 + 7448) = v12;
    *(_DWORD *)(a1 + 7452) = v13;
    v14 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v14 + 4) = v11;
    v15 = *(_DWORD *)(a1 + 12);
    if (!v15)
      goto LABEL_25;
    v16 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v15 - 1) + 9) & 1;
    *(_BYTE *)(v14 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v14, a1 + 7368, 0, v16, v6, v7, v8, v9);
    *v3 = vadd_s32(*v3, (int32x2_t)0x100000001);
    v31 = 0;
    v32 = *(_QWORD *)(a1 + 7496);
    v33 = a1;
    *(_QWORD *)(a1 + 7496) = &v31;
    v17 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v31);
    *(_QWORD *)(v33 + 7496) = v32;
    v22 = *(_DWORD *)(a1 + 7368);
    if (v17)
    {
      if (v22 != 6)
        return 47;
      while (1)
      {
        v23 = *(_DWORD *)(a1 + 7400);
        v24 = *(_DWORD *)(a1 + 7412);
        v25 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v23;
        *(_DWORD *)(a1 + 7448) = v24;
        *(_DWORD *)(a1 + 7452) = v25;
        v26 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v26 + 4) = v23;
        v27 = *(_DWORD *)(a1 + 12);
        if (!v27)
          break;
        v28 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v27 - 1) + 9) & 1;
        *(_BYTE *)(v26 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v26, a1 + 7368, 2, v28, v18, v19, v20, v21);
        v31 = 0;
        v32 = *(_QWORD *)(a1 + 7496);
        v33 = a1;
        *(_QWORD *)(a1 + 7496) = &v31;
        v29 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v31);
        *(_QWORD *)(v33 + 7496) = v32;
        v22 = *(_DWORD *)(a1 + 7368);
        if (!v29)
          goto LABEL_20;
        result = 47;
        if (v22 != 6)
          return result;
      }
LABEL_25:
      __break(0xC471u);
      JUMPOUT(0x197ECA438);
    }
LABEL_20:
    if (v22 != 20 && (v22 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse expression in a comma expression");
      return 0;
    }
    goto LABEL_24;
  }
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseTemplateLiteral<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t result;
  const char *v18;
  int v19;
  int v20;
  char v22;

  v11 = *(_DWORD *)(a1 + 7300);
  v22 = 0;
  if (!JSC::Parser<JSC::Lexer<char16_t>>::parseTemplateString<JSC::SyntaxChecker>(a1, 1, a3, &v22, a5, a6, a7, a8))
  {
    v20 = *(_DWORD *)(a1 + 7368);
    if (v20 != 20 && (v20 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse head template element");
      goto LABEL_15;
    }
    goto LABEL_24;
  }
  do
  {
    if (v22)
    {
      result = 52;
      goto LABEL_11;
    }
    if (*(_DWORD *)(a1 + 7368) == 1)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_15;
      v18 = "Template literal expression cannot be empty";
      goto LABEL_14;
    }
    if (!JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(a1, a2))
    {
      v19 = *(_DWORD *)(a1 + 7368);
      if (v19 == 20 || (v19 & 0x100000) != 0)
        goto LABEL_24;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_15;
      v18 = "Cannot parse expression in template literal";
LABEL_14:
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, v18);
      goto LABEL_15;
    }
  }
  while (JSC::Parser<JSC::Lexer<char16_t>>::parseTemplateString<JSC::SyntaxChecker>(a1, 0, a3, &v22, v12, v13, v14, v15));
  v16 = *(_DWORD *)(a1 + 7368);
  if (v16 != 20 && (v16 & 0x100000) == 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse template element");
    goto LABEL_15;
  }
LABEL_24:
  JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_15:
  result = 0;
LABEL_11:
  *(_DWORD *)(a1 + 7300) = v11;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseAwaitExpression<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _BYTE *v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  _BOOL4 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  uint64_t result;
  int v52;
  const char *v53;
  char v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int v62;
  const char *v63;
  const char *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197ECAD58);
  }
  v15 = (_BYTE *)(a1 + 7440);
  v16 = (_DWORD *)(a1 + 7368);
  v17 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v18 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v17, a5, a6, a7, a8);
  v23 = v18;
  *(_DWORD *)(a1 + 7368) = v18;
  v65 = 0;
  v66 = *(_QWORD *)(a1 + 7496);
  v67 = a1;
  *(_QWORD *)(a1 + 7496) = &v65;
  v24 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  v25 = *(_BYTE *)(a1 + 7440);
  *(_BYTE *)(a1 + 7440) = 1;
  if (v18 != 546)
    goto LABEL_10;
  v26 = *(_DWORD *)(a1 + 12);
  if (!v26)
  {
    __break(0xC471u);
    JUMPOUT(0x197ECAD60);
  }
  v27 = *(_DWORD *)(a1 + 12);
  while (1)
  {
    v28 = v27;
    if (v27 == 1)
      break;
    --v27;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v28 - 1) + 12) & 0x40) != 0)
      goto LABEL_7;
  }
  v27 = 0;
LABEL_7:
  if (v26 <= v28 - 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197ECAD68);
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v27 + 11) & 0x40) == 0 && ((1 << *(_BYTE *)(a1 + 7474)) & 0x6000) == 0)
  {
LABEL_10:
    if ((v18 & 0x100) != 0)
    {
      while (1)
      {
        v34 = v18;
        ++*(_DWORD *)(a1 + 7300);
        *(_DWORD *)(a2 + 12) = v18;
        v41 = *(_DWORD *)(a1 + 7400);
        v42 = *(_DWORD *)(a1 + 7412);
        v43 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v41;
        *(_DWORD *)(a1 + 7448) = v42;
        *(_DWORD *)(a1 + 7452) = v43;
        v44 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v44 + 4) = v41;
        v45 = *(_DWORD *)(a1 + 12);
        if (!v45)
        {
          __break(0xC471u);
          JUMPOUT(0x197ECAD50);
        }
        v46 = v34 & 0xFFFFFFFC;
        v47 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v45 - 1) + 9) & 1;
        *(_BYTE *)(v44 + 56) = 0;
        v18 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v44, a1 + 7368, 0, v47, v19, v20, v21, v22);
        *(_DWORD *)(a1 + 7368) = v18;
        ++*(_DWORD *)(a1 + 7304);
        if ((v18 & 0x100) == 0)
          break;
        if (v46 == 256)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_23;
          v48 = 1;
          goto LABEL_33;
        }
      }
      v29 = JSC::Parser<JSC::Lexer<char16_t>>::parseMemberExpression<JSC::SyntaxChecker>(a1, a2);
      if (v29)
      {
        if (v46 != 256)
          goto LABEL_13;
        if ((v29 & 0x80000000) != 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v68 = JSC::Parser<JSC::Lexer<char16_t>>::metaPropertyName<JSC::SyntaxChecker>(v29);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[36]>(a1, &v68);
          }
        }
        else
        {
          if (v29 <= 0x19)
          {
            v35 = 1;
            if (((1 << v29) & 0x2030004) != 0)
              goto LABEL_14;
          }
          v49 = *(_DWORD *)(a1 + 12);
          if (!v49)
          {
            __break(0xC471u);
            JUMPOUT(0x197ECAD78);
          }
          if (v29 == 18 && (*(_BYTE *)(*(_QWORD *)a1 + 720 * (v49 - 1) + 9) & 1) == 0)
          {
            v29 = 18;
            v35 = 1;
            goto LABEL_14;
          }
          if (!*(_QWORD *)(a1 + 7360))
          {
            if ((v34 & 0xFFFFFFFD) == 0x100)
              v64 = "++";
            else
              v64 = "--";
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[8],char const(&)[3],char const(&)[51]>(a1, v64);
          }
        }
      }
      else
      {
        if (*v16 == 20 || (*v16 & 0x100000) != 0)
          goto LABEL_89;
        if (!*(_QWORD *)(a1 + 7360))
        {
          if (v34 <= 773)
          {
            v53 = "logical-not";
            switch(v34)
            {
              case 256:
              case 258:
                v53 = "prefix-increment";
                goto LABEL_97;
              case 257:
              case 259:
                v53 = "prefix-decrement";
                goto LABEL_97;
              case 260:
                goto LABEL_97;
              case 261:
                v53 = "bitwise-not";
                goto LABEL_97;
              default:
                goto LABEL_134;
            }
          }
          switch(v34)
          {
            case 774:
              v53 = "typeof";
              break;
            case 775:
              v53 = "void";
              break;
            case 776:
              v53 = "delete";
              break;
            default:
LABEL_134:
              __break(0xC471u);
              JUMPOUT(0x197ECAD48);
          }
LABEL_97:
          v68 = v53;
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[31],char const*,char const(&)[9]>(a1, &v68);
        }
      }
      goto LABEL_23;
    }
    v29 = JSC::Parser<JSC::Lexer<char16_t>>::parseMemberExpression<JSC::SyntaxChecker>(a1, a2);
    if (!v29)
    {
      if (*v16 == 20 || (*v16 & 0x100000) != 0)
      {
LABEL_89:
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      }
      else if (!*(_QWORD *)(a1 + 7360))
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse member expression");
      }
      goto LABEL_23;
    }
    v34 = 0;
LABEL_13:
    v35 = 0;
LABEL_14:
    v36 = *(_DWORD *)(a1 + 12);
    if (!v36)
    {
      __break(0xC471u);
      JUMPOUT(0x197ECAD70);
    }
    LOBYTE(v37) = 0;
    v38 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v36 - 1) + 9);
    if (v29 <= 2 && (v38 & 1) != 0)
    {
      v39 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      v40 = **(_QWORD **)(a1 + 7320);
      v37 = v40 == *(_QWORD *)(v39 + 1248) || v40 == *(_QWORD *)(v39 + 880);
      if ((v35 & v37) == 1)
      {
        if (*(_QWORD *)(a1 + 7360))
        {
LABEL_23:
          *v15 = v25;
          *(_DWORD *)(a2 + 12) = v24;
          goto LABEL_24;
        }
        v68 = **(const char ***)(a1 + 7320);
LABEL_22:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v68);
        goto LABEL_23;
      }
    }
    if (*v16 == 257)
    {
      if ((v29 & 0x80000000) == 0)
      {
        if ((v29 > 0x19 || ((1 << v29) & 0x2030004) == 0) && (v29 != 18 || (v38 & 1) != 0))
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_23;
          v63 = "Postfix -- operator applied to value that is not a reference";
          goto LABEL_114;
        }
        ++*(_DWORD *)(a1 + 7304);
        *(int32x2_t *)(a1 + 7296) = vadd_s32(*(int32x2_t *)(a1 + 7296), (int32x2_t)0x100000001);
        v54 = !v37;
        if ((v38 & 1) == 0)
          v54 = 1;
        if ((v54 & 1) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v68 = **(const char ***)(a1 + 7320);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[36]>(a1, (uint64_t *)&v68);
          }
          goto LABEL_23;
        }
        goto LABEL_77;
      }
    }
    else
    {
      if (*v16 != 256)
        goto LABEL_79;
      if ((v29 & 0x80000000) == 0)
      {
        if ((v29 > 0x19 || ((1 << v29) & 0x2030004) == 0) && (v29 != 18 || (v38 & 1) != 0))
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_23;
          v63 = "Postfix ++ operator applied to value that is not a reference";
LABEL_114:
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, v63);
          goto LABEL_23;
        }
        ++*(_DWORD *)(a1 + 7304);
        *(int32x2_t *)(a1 + 7296) = vadd_s32(*(int32x2_t *)(a1 + 7296), (int32x2_t)0x100000001);
        v50 = !v37;
        if ((v38 & 1) == 0)
          v50 = 1;
        if ((v50 & 1) == 0)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_23;
          v68 = **(const char ***)(a1 + 7320);
          goto LABEL_22;
        }
LABEL_77:
        if (v35)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v48 = 0;
LABEL_33:
            v68 = JSC::operatorString((JSC *)v48, v34);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[5],char const*,char const(&)[42]>(a1, &v68);
          }
          goto LABEL_23;
        }
        v55 = v38 & 1;
        v56 = *(_DWORD *)(a1 + 7400);
        v57 = *(_DWORD *)(a1 + 7412);
        v58 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v56;
        *(_DWORD *)(a1 + 7448) = v57;
        *(_DWORD *)(a1 + 7452) = v58;
        v59 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v59 + 4) = v56;
        *(_BYTE *)(v59 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v59, a1 + 7368, 0, v55, v30, v31, v32, v33);
        v29 = 21;
LABEL_79:
        if ((v23 & 0x100) == 0)
        {
LABEL_80:
          *v15 = v25;
          *(_DWORD *)(a2 + 12) = v24;
          goto LABEL_81;
        }
        v60 = *(_DWORD *)(a2 + 12);
        if ((v60 - 256) >= 6 && (v60 - 774) >= 3 && (v60 - 174336) > 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197ECAD80);
        }
        if (v60 > 773)
        {
          if ((v60 - 774) < 2)
            goto LABEL_80;
          v61 = v60 - 174336;
        }
        else
        {
          if ((v60 - 256) < 4)
          {
            ++*(_DWORD *)(a1 + 7296);
            goto LABEL_80;
          }
          v61 = v60 - 260;
        }
        if (v61 >= 2)
        {
          if (v29 >= 3)
          {
            if (v29 == 25)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                v68 = **(const char ***)(a1 + 7336);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],WTF::UniquedStringImpl *>(a1, (uint64_t *)&v68);
              }
              goto LABEL_23;
            }
          }
          else
          {
            v62 = *(_DWORD *)(a1 + 12);
            if (!v62)
            {
              __break(0xC471u);
              JUMPOUT(0x197ECAD88);
            }
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v62 - 1) + 9) & 1) != 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                v68 = **(const char ***)(a1 + 7320);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[37],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v68);
              }
              goto LABEL_23;
            }
          }
        }
        goto LABEL_80;
      }
    }
    if (!*(_QWORD *)(a1 + 7360))
    {
      v68 = JSC::Parser<JSC::Lexer<char16_t>>::metaPropertyName<JSC::SyntaxChecker>(v29);
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[38]>(a1, &v68);
    }
    goto LABEL_23;
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 12) & 0x10) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' within static block");
    goto LABEL_23;
  }
  v52 = JSC::Parser<JSC::Lexer<char16_t>>::parseAwaitExpression<JSC::SyntaxChecker>(a1, a2);
  *v15 = v25;
  *(_DWORD *)(a2 + 12) = v24;
  if (v52)
  {
LABEL_81:
    result = 55;
    goto LABEL_55;
  }
LABEL_24:
  if (*v16 == 20 || (*v16 & 0x100000) != 0)
  {
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
  }
  else if (!*(_QWORD *)(a1 + 7360))
  {
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Failed to parse await expression");
  }
  result = 0;
LABEL_55:
  *(_QWORD *)(v67 + 7496) = v66;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::SyntaxChecker>(uint64_t a1, const char *a2, int a3, char a4, char a5, int a6, int a7, WTF::StringImpl ***a8, int a9)
{
  int v9;
  int v10;
  int v14;
  unsigned int v15;
  int v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  __int128 *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _BOOL4 v42;
  int v43;
  WTF::StringImpl **v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  BOOL v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  int v61;
  int v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  char v86;
  int v87;
  void *v88;
  uint64_t v89;
  unsigned int *v90;
  WTF *v91;
  WTF *v92;
  WTF *v93;
  WTF::StringImpl **v94;
  WTF::StringImpl **v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  WTF::AtomStringImpl *v104;
  WTF *v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int *v108;
  WTF::StringImpl *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BOOL4 v118;
  uint64_t v119;
  uint64_t *v120;
  WTF::StringImpl **v121;
  uint64_t *v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  WTF::StringImpl **v125;
  uint64_t v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  WTF::StringImpl **v141;
  WTF::StringImpl *v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  WTF::StringImpl **v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  char hasDeclaredParameter;
  uint64_t v166;
  WTF::StringImpl **v167;
  uint64_t v168;
  uint64_t v169;
  WTF::StringImpl **v170;
  WTF::StringImpl *v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  const char *v180;
  uint64_t v181;
  unsigned int v182;
  unsigned int v183;
  int v184;
  unsigned __int8 v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  WTF *v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  int v229;
  BOOL v230;
  BOOL v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  int v235;
  int v236;
  int v237;
  int v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  __int128 *v242;
  uint64_t v243;
  __int128 v244;
  uint64_t v245;
  uint64_t v246;
  __int128 *v247;
  uint64_t v248;
  __int128 v249;
  uint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  WTF *v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unsigned int *v262;
  WTF::StringImpl *v263;
  unint64_t v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  const char *v273;
  char v275;
  char v276;
  uint64_t v277;
  BOOL *v278;
  unint64_t v279;
  int v280;
  WTF *v284;
  WTF::StringImpl **v285;
  WTF *v286;
  WTF *v287;
  int v288;
  unsigned int *v289;
  __int128 v290;
  int v291;
  int v292;
  WTF *v293;
  WTF *v294;
  uint64_t v295;
  _BYTE v296[64];
  int v297;
  char v298;
  int v299;
  char v300;
  _BYTE v301[24];
  WTF *v302;
  int v303;
  const char *v304[12];
  uint64_t v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  _OWORD v310[2];
  int v311;
  __int128 v312;
  _QWORD v313[2];
  uint64_t v314[10];
  int v315;
  int v316;
  __int128 v317;
  int v318;
  unsigned int v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  const char *v323;
  char v324;
  int v325;
  int v326;
  char v327;

  v327 = a5;
  v325 = a7;
  v326 = a6;
  v9 = *(unsigned __int8 *)(a1 + 7474);
  v324 = v9;
  v10 = 1 << v9;
  if (((1 << v9) & 0x1F8FFF) == 0)
    goto LABEL_358;
  v14 = *(_DWORD *)(a1 + 12);
  v15 = v14 - 1;
  v16 = *(_DWORD *)(a1 + 7368);
  v278 = (BOOL *)(a1 + 7344);
  if (v16 != 546
    && (v16 != 1048592 || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128)))
  {
    v276 = 0;
    v17 = 0;
    goto LABEL_5;
  }
  if (!*v278)
    goto LABEL_298;
  if (!v14)
  {
LABEL_358:
    __break(0xC471u);
    JUMPOUT(0x197ECBC44);
  }
  if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * v15 + 10) & 0x102000) == 0 && *(_DWORD *)(a1 + 7480) != 1)
  {
    v17 = 0;
    goto LABEL_299;
  }
LABEL_298:
  v17 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
LABEL_299:
  v276 = 1;
LABEL_5:
  v323 = v17;
  v18 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  v20 = v19;
  v320 = v18;
  v321 = v19;
  v322 = (uint64_t *)a1;
  if (*(_DWORD *)(v18 + 12) <= v19)
  {
    __break(0xC471u);
    JUMPOUT(0x197ECC430);
  }
  v21 = v18;
  v22 = v19;
  JSC::Scope::setSourceParseMode(*(_QWORD *)v18 + 720 * v19, v9);
  v28 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v28)
  {
    __break(0xC471u);
    JUMPOUT(0x197ECC438);
  }
  v29 = *(_QWORD *)a1;
  v30 = v28 - 1;
  if ((_DWORD)v28 != 1 && (*(_DWORD *)(v29 + 720 * (v28 - 1) + 10) & 0x400000) != 0)
  {
    v31 = 720 * v28;
    while (1)
    {
      v32 = v31 - 720;
      if (v31 == 720)
        break;
      v33 = *(_BYTE *)(v29 + v31 - 1428);
      v31 -= 720;
      if ((v33 & 0x40) != 0)
      {
        if (*(_BYTE *)(v29 + v32 - 712) != 2)
          *(_BYTE *)(v29 + 720 * (v28 - 1) + 8) = 0;
        break;
      }
    }
  }
  if (*(_DWORD *)(v21 + 12) <= v20)
  {
    __break(0xC471u);
    JUMPOUT(0x197ECC440);
  }
  v34 = *(_QWORD *)v21 + 720 * v22;
  *(_DWORD *)(v34 + 20) = a6;
  v35 = (int *)(a1 + 7368);
  *(_BYTE *)(v34 + 15) = a5;
  v36 = a1 + 7316;
  v280 = *(_DWORD *)(a1 + 7316);
  *(_DWORD *)(a1 + 7316) = 1;
  v37 = (__int128 *)(a1 + 7400);
  v38 = *(_DWORD *)(a1 + 7408);
  v39 = *(_QWORD *)(a1 + 7328);
  *(_QWORD *)(a1 + 7328) = 0;
  v318 = -1;
  v319 = v38;
  v317 = 0uLL;
  v315 = 0;
  v316 = -1;
  v314[0] = a1;
  v314[1] = (uint64_t)&v318;
  v314[2] = (uint64_t)a8;
  v314[3] = (uint64_t)&v324;
  v314[4] = (uint64_t)a2;
  v314[5] = (uint64_t)&v317;
  v314[6] = (uint64_t)&v316;
  v314[7] = (uint64_t)&v325;
  v314[8] = (uint64_t)&v319;
  v314[9] = (uint64_t)&v320;
  v40 = *(_QWORD *)(a1 + 7216);
  v313[0] = v40;
  if ((v10 & 0x840) == 0)
  {
    v41 = *(_BYTE *)(v29 + 720 * v30 + 9);
    v42 = (v41 & 1) == 0;
    if (a9 || (v10 & 0x201) == 0)
    {
      if (v28 <= v15)
      {
        __break(0xC471u);
        JUMPOUT(0x197ECC448);
      }
      if ((*(_BYTE *)(v29 + 720 * v15 + 11) & 2) != 0)
        v42 = 0;
    }
    if (a3 == 2)
      goto LABEL_28;
    if ((v276 & 1) != 0 || (v43 = *v35, *v35 == 12))
    {
LABEL_24:
      v44 = *(WTF::StringImpl ***)(a1 + 7376);
      *a8 = v44;
      *(_QWORD *)(a1 + 7328) = v44;
      if (v17)
      {
        if (a9 == 1 || (v10 & 0x30E00) != 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[39],char const*&>(a1, &v323);
          goto LABEL_30;
        }
      }
      else
      {
        if ((v10 & 0x30E00) != 0 && !a9 && *v35 == 546)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            *(_QWORD *)&v290 = JSC::stringForFunctionMode();
            v180 = " named 'await'";
LABEL_234:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],char const*,char const(&)[15]>(a1, (const char **)&v290, v180);
            goto LABEL_30;
          }
          goto LABEL_30;
        }
        if ((v10 & 0x70004) != 0 && !a9 && *v35 == 545)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            *(_QWORD *)&v290 = JSC::stringForFunctionMode();
            v180 = " named 'yield'";
            goto LABEL_234;
          }
LABEL_30:
          v53 = 0;
          goto LABEL_31;
        }
      }
      v45 = v41 & 1;
      v46 = *(_DWORD *)(a1 + 7400);
      v47 = *(_DWORD *)(a1 + 7412);
      v48 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v46;
      *(_DWORD *)(a1 + 7448) = v47;
      *(_DWORD *)(a1 + 7452) = v48;
      v49 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v49 + 4) = v46;
      *(_BYTE *)(v49 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v49, a1 + 7368, 0, v45, v24, v25, v26, v27);
      if ((a4 & 1) != 0)
        goto LABEL_28;
      if (*(_DWORD *)(v320 + 12) <= v321)
      {
        __break(0xC471u);
        JUMPOUT(0x197ECC498);
      }
      v120 = (uint64_t *)(*(_QWORD *)v320 + 720 * v321);
      v121 = *a8;
      v122 = v120 + 15;
      v123 = **a8;
      if (v123)
        *(_DWORD *)v123 += 2;
      v124 = *v122;
      if (*v122)
        goto LABEL_116;
      v125 = v121;
      v126 = WTF::fastMalloc((WTF *)0x90);
      v121 = v125;
      *(_QWORD *)(v126 + 16) = 0;
      v126 += 16;
      *(_WORD *)(v126 + 8) = 0;
      *(_QWORD *)(v126 + 16) = 0;
      *(_WORD *)(v126 + 24) = 0;
      *(_QWORD *)(v126 + 32) = 0;
      *(_WORD *)(v126 + 40) = 0;
      *(_QWORD *)(v126 + 48) = 0;
      *(_WORD *)(v126 + 56) = 0;
      *(_QWORD *)(v126 + 64) = 0;
      *(_WORD *)(v126 + 72) = 0;
      *(_QWORD *)(v126 + 80) = 0;
      *(_WORD *)(v126 + 88) = 0;
      *(_QWORD *)(v126 + 96) = 0;
      *(_WORD *)(v126 + 104) = 0;
      *(_QWORD *)(v126 + 112) = 0;
      *(_WORD *)(v126 + 120) = 0;
      *v122 = v126;
      *(_DWORD *)(v126 - 4) = 8;
      *(_DWORD *)(*v122 - 8) = 7;
      *(_DWORD *)(*v122 - 16) = 0;
      *(_DWORD *)(*v122 - 12) = 0;
      v124 = *v122;
      if (*v122)
LABEL_116:
        v127 = *(_DWORD *)(v124 - 8);
      else
        v127 = 0;
      v128 = *((_DWORD *)v123 + 4);
      if ((v128 & 0x20) != 0)
        v128 = *((_DWORD *)v123 + 8);
      v129 = v127 & (v128 >> 8);
      v130 = v124 + 16 * v129;
      v131 = *(WTF::StringImpl **)v130;
      if (*(_QWORD *)v130)
      {
        v151 = 0;
        v152 = 1;
        while (v131 != v123)
        {
          if (v131 == (WTF::StringImpl *)-1)
            v151 = v130;
          v129 = (v129 + v152) & v127;
          v130 = v124 + 16 * v129;
          v131 = *(WTF::StringImpl **)v130;
          ++v152;
          if (!*(_QWORD *)v130)
          {
            if (v151)
            {
              *(_QWORD *)v151 = 0;
              *(_WORD *)(v151 + 8) = 0;
              --*(_DWORD *)(*v122 - 16);
              v130 = v151;
            }
            if (v123)
              goto LABEL_120;
            goto LABEL_121;
          }
        }
      }
      else
      {
LABEL_120:
        *(_DWORD *)v123 += 2;
LABEL_121:
        *(_QWORD *)v130 = v123;
        *(_WORD *)(v130 + 8) = 0;
        v132 = *v122;
        if (*v122)
          v133 = *(_DWORD *)(v132 - 12) + 1;
        else
          v133 = 1;
        *(_DWORD *)(v132 - 12) = v133;
        v134 = *v122;
        if (*v122)
          v135 = *(_DWORD *)(v134 - 12);
        else
          v135 = 0;
        v136 = (*(_DWORD *)(v134 - 16) + v135);
        v137 = *(unsigned int *)(v134 - 4);
        if (v137 > 0x400)
        {
          if (v137 > 2 * v136)
            goto LABEL_127;
        }
        else if (3 * v137 > 4 * v136)
        {
          goto LABEL_127;
        }
        v167 = v121;
        v168 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(v120 + 15, (WTF::StringImpl **)v130);
        v121 = v167;
        v130 = v168;
      }
LABEL_127:
      if (v123)
      {
        if (*(_DWORD *)v123 == 2)
        {
          v153 = v121;
          WTF::StringImpl::~StringImpl(v123, v50, v51, v23, v24, v25, v26, v27);
          WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
          v121 = v153;
        }
        else
        {
          *(_DWORD *)v123 -= 2;
        }
      }
      *(_WORD *)(v130 + 8) &= ~4u;
      v138 = *(_QWORD *)(*v120 + 41952);
      if (*(WTF::StringImpl **)(v138 + 1248) == *v121 || *(WTF::StringImpl **)(v138 + 880) == *v121)
      {
        v139 = *(_DWORD *)(a1 + 12);
        if (!v139)
        {
          __break(0xC471u);
          JUMPOUT(0x197ECC4F8);
        }
        v119 = a1 + 7316;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v139 - 1) + 9) & 1) != 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            *(_QWORD *)&v290 = **a8;
            v304[0] = JSC::stringForFunctionMode();
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[18],char const*,char const(&)[21]>(a1, (uint64_t *)&v290, v304);
          }
          goto LABEL_263;
        }
      }
LABEL_28:
      v317 = *v37;
      *((_DWORD *)a8 + 7) = *(_DWORD *)(a1 + 7400);
      v52 = *(_DWORD *)(a1 + 7408);
      v316 = v52 - *(_DWORD *)(a1 + 7404);
      *((_DWORD *)a8 + 9) = v316;
      v318 = v52;
      *((_DWORD *)a8 + 5) = v52;
      v53 = 1;
      if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::SyntaxChecker>(JSC::SyntaxChecker &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::SyntaxChecker> &,JSC::Parser<JSC::Lexer<char16_t>>::FunctionDefinitionType,std::optional<int>)::{lambda(void)#1}::operator()(v314) & 1) != 0)
      {
LABEL_31:
        v58 = v280;
        goto LABEL_32;
      }
      v54 = *v278;
      *v278 = ((1 << v324) & 0x38F80) == 0;
      JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionParameters<JSC::SyntaxChecker,JSC::ParserFunctionInfo<JSC::SyntaxChecker>>(a1, (uint64_t)v313, (uint64_t)a8, v23, v24, v25, v26, v27);
      v57 = *(_QWORD *)(a1 + 7360);
      *v278 = v54;
      if (v57)
        goto LABEL_30;
      v61 = *v35;
      if (!*v35)
      {
        v62 = 2;
        goto LABEL_36;
      }
      if (v61 != 20 && (v61 & 0x100000) == 0)
      {
        *(_QWORD *)&v290 = JSC::stringForFunctionMode();
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43],char const*,char const(&)[6]>(a1, (const char **)&v290);
        goto LABEL_30;
      }
LABEL_101:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      goto LABEL_30;
    }
    v118 = (v43 == 544 || v43 == 1048592 && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(v40 + 41952) + 328))
        && (v41 & 1) == 0;
    if (v118 || !v42)
    {
      if (v118)
        goto LABEL_24;
    }
    else
    {
      if (v43 == 545)
        goto LABEL_24;
      if (v43 == 1048592)
      {
        if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(v40 + 41952) + 496))
        {
          if (a3 == 1)
            goto LABEL_101;
          goto LABEL_28;
        }
        goto LABEL_24;
      }
    }
    if (a3 != 1)
      goto LABEL_28;
    v119 = a1 + 7316;
    if (v43 == 2)
    {
      if (v9)
      {
        if (v9 != 9)
          goto LABEL_101;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Async function statements must have a name");
      }
      else if (!*(_QWORD *)(a1 + 7360))
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Function statements must have a name");
      }
LABEL_263:
      v53 = 0;
      v36 = v119;
      goto LABEL_31;
    }
    if ((*(_BYTE *)(v29 + 720 * v30 + 9) & 1) != 0 && v43 == 532)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        *(_QWORD *)&v290 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), v38, *(_DWORD *)(a1 + 7412));
        *((_QWORD *)&v290 + 1) = v250;
        v304[0] = JSC::stringForFunctionMode();
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6],char const(&)[16]>(a1, (uint64_t)&v290, v304);
      }
      goto LABEL_263;
    }
    if ((v43 - 531) <= 1)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        *(_QWORD *)&v290 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), v38, *(_DWORD *)(a1 + 7412));
        *((_QWORD *)&v290 + 1) = v259;
        v304[0] = JSC::stringForFunctionMode();
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&v290, v304);
      }
      goto LABEL_263;
    }
    if ((v43 & 0x200) == 0)
      goto LABEL_101;
    if ((v43 - 544) >= 3)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        *(_QWORD *)&v290 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), v38, *(_DWORD *)(a1 + 7412));
        *((_QWORD *)&v290 + 1) = v272;
        v304[0] = JSC::stringForFunctionMode();
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&v290, v304);
      }
      goto LABEL_263;
    }
    if (v43 == 546)
    {
      if (*v278 && (*(_DWORD *)(v29 + 720 * v30 + 10) & 0x102000) == 0)
      {
        v36 = a1 + 7316;
        if (*(_DWORD *)(a1 + 7480) != 1)
          goto LABEL_101;
      }
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_263;
      *(_QWORD *)&v290 = JSC::stringForFunctionMode();
      v304[0] = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
      v273 = "Cannot use 'await' as a ";
    }
    else
    {
      if (v43 == 544)
      {
        v36 = a1 + 7316;
        if ((*(_BYTE *)(v29 + 720 * v30 + 9) & 1) == 0)
          goto LABEL_101;
        if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v290 = JSC::stringForFunctionMode();
          v304[0] = "in strict mode";
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[6],char const(&)[2],char const*>(a1, (const char **)&v290, v304);
        }
        goto LABEL_263;
      }
      if ((*(_BYTE *)(v29 + 720 * v30 + 9) & 1) == 0)
      {
        v36 = a1 + 7316;
        if ((*(_BYTE *)(v29 + 720 * v30 + 11) & 2) == 0)
          goto LABEL_101;
      }
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_263;
      *(_QWORD *)&v290 = JSC::stringForFunctionMode();
      v304[0] = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierYieldReason(a1);
      v273 = "Cannot use 'yield' as a ";
    }
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[6],char const(&)[2],char const*>(a1, v273, (const char **)&v290, v304);
    goto LABEL_263;
  }
  v317 = *v37;
  *((_DWORD *)a8 + 7) = *(_DWORD *)(a1 + 7400);
  v316 = v38 - *(_DWORD *)(a1 + 7404);
  v225 = v316;
  v318 = v38;
  *((_DWORD *)a8 + 5) = v38;
  *((_DWORD *)a8 + 9) = v225;
  if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::SyntaxChecker>(JSC::SyntaxChecker &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::SyntaxChecker> &,JSC::Parser<JSC::Lexer<char16_t>>::FunctionDefinitionType,std::optional<int>)::{lambda(void)#1}::operator()(v314) & 1) != 0)
  {
    v53 = 1;
    goto LABEL_31;
  }
  if (*(_DWORD *)(a1 + 12) <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x197ECC4D0);
  }
  v226 = v320;
  v227 = v321;
  if (*(_DWORD *)(v320 + 12) <= v321)
  {
    __break(0xC471u);
    JUMPOUT(0x197ECC4D8);
  }
  v228 = *(_QWORD *)v320 + 720 * v321;
  v229 = *(_DWORD *)(v228 + 10);
  *(_DWORD *)(v228 + 10) = v229 & 0xFFFFFDFF | (((*(_DWORD *)(*(_QWORD *)a1 + 720 * v15 + 10) >> 9) & 1) << 9);
  if (*(_DWORD *)(a1 + 12) <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x197ECC4E0);
  }
  v230 = (*(_DWORD *)(*(_QWORD *)a1 + 720 * v15 + 10) & 0x2000 | (1 << v324) & 0x38F80) == 0;
  v231 = *v278;
  *v278 = v230;
  JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionParameters<JSC::SyntaxChecker,JSC::ParserFunctionInfo<JSC::SyntaxChecker>>(a1, (uint64_t)v313, (uint64_t)a8, v23, v24, v25, v26, v27);
  v232 = *(_QWORD *)(a1 + 7360);
  *v278 = v231;
  if (*(_DWORD *)(v226 + 12) <= v227)
  {
    __break(0xC471u);
    JUMPOUT(0x197ECC4E8);
  }
  *(_DWORD *)(*(_QWORD *)v226 + 720 * v227 + 10) = *(_DWORD *)(*(_QWORD *)v226 + 720 * v227 + 10) & 0xFFFFFDFF | v229 & 0x200;
  if (v232)
  {
LABEL_227:
    v53 = 0;
    v36 = a1 + 7316;
    goto LABEL_31;
  }
  v233 = *v35;
  v36 = a1 + 7316;
  if (*v35 != 38)
  {
    if (v233 == 20 || (v233 & 0x100000) != 0)
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a '=>' after arrow function parameter declaration");
    }
    goto LABEL_227;
  }
  v234 = *(_QWORD *)(a1 + 7288);
  if (*(_BYTE *)(v234 + 56))
    goto LABEL_101;
  v235 = *(_DWORD *)(a1 + 7400);
  v236 = *(_DWORD *)(a1 + 7412);
  v237 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v235;
  *(_DWORD *)(a1 + 7448) = v236;
  *(_DWORD *)(a1 + 7452) = v237;
  *(_DWORD *)(v234 + 4) = v235;
  v238 = *(_DWORD *)(a1 + 12);
  if (!v238)
  {
    __break(0xC471u);
    JUMPOUT(0x197ECC4F0);
  }
  v239 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v238 - 1) + 9) & 1;
  *(_BYTE *)(v234 + 56) = 0;
  v240 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v234, a1 + 7368, 0, v239, v24, v25, v26, v27);
  *(_DWORD *)(a1 + 7368) = v240;
  v62 = v240 == 0;
LABEL_36:
  *(_QWORD *)(a1 + 7328) = v39;
  v312 = *(_OWORD *)(a1 + 7296);
  v63 = *(_OWORD *)(v36 + 16);
  v310[0] = *(_OWORD *)v36;
  v315 = v62;
  v310[1] = v63;
  v277 = v36;
  v311 = *(_DWORD *)(v36 + 32);
  v305 = 0x800000000;
  *(_QWORD *)&v64 = -1;
  *((_QWORD *)&v64 + 1) = -1;
  v306 = v64;
  v307 = v64;
  v308 = v64;
  v309 = v64;
  if (*(_DWORD *)(v320 + 12) <= v321)
  {
    __break(0xC471u);
    JUMPOUT(0x197ECC450);
  }
  v65 = *(_QWORD *)v320 + 720 * v321;
  v66 = *(_DWORD *)(v65 + 180);
  if (v66)
  {
    v67 = *(_QWORD *)(v65 + 168);
    v68 = v67 + 72 * v66;
    while (1)
    {
      v69 = *(unsigned int *)(v67 + 4);
      v70 = (_QWORD *)(v67 + 8);
      if ((_DWORD)v69 != 8)
        v70 = (_QWORD *)*v70;
      v71 = 0;
      while ((_DWORD)v69 != v71)
      {
        v72 = v71;
        v73 = v70[v71++];
        if (v73 != -1)
        {
          v74 = v72;
          goto LABEL_45;
        }
      }
      v74 = *(unsigned int *)(v67 + 4);
LABEL_45:
      if ((_DWORD)v69 != (_DWORD)v74)
        break;
LABEL_46:
      v67 += 72;
      if (v67 == v68)
        goto LABEL_49;
    }
    v162 = v74 | (v69 << 32);
    while (1)
    {
      if (*(_DWORD *)(v320 + 12) <= v321)
      {
        __break(0xC471u);
        JUMPOUT(0x197ECC490);
      }
      v279 = v162;
      v163 = (WTF::StringImpl *)v70[v162];
      v164 = *(_QWORD *)v320 + 720 * v321;
      if (!v163)
        break;
      *(_DWORD *)v163 += 2;
      hasDeclaredParameter = JSC::Scope::hasDeclaredParameter(v164, v163, v56, v23, v24, v25, v26, v27);
      if (*(_DWORD *)v163 == 2)
      {
        v275 = hasDeclaredParameter;
        WTF::StringImpl::~StringImpl(v163, v55, v56, v23, v24, v25, v26, v27);
        WTF::fastFree(v217, v218, v219, v220, v221, v222, v223, v224);
        if ((v275 & 1) != 0)
          goto LABEL_165;
        goto LABEL_164;
      }
      *(_DWORD *)v163 -= 2;
      if ((hasDeclaredParameter & 1) == 0)
        goto LABEL_164;
LABEL_165:
      if (HIDWORD(v279) <= (v74 + 1))
        v166 = (v74 + 1);
      else
        v166 = HIDWORD(v279);
      while ((_DWORD)v166 - 1 != (_DWORD)v74)
      {
        v74 = (v74 + 1);
        if (v70[v74] != -1)
        {
          LODWORD(v166) = v74;
          goto LABEL_171;
        }
      }
      v74 = v166;
LABEL_171:
      v162 = v74 | v279 & 0xFFFFFFFF00000000;
      LODWORD(v74) = v166;
      if ((_DWORD)v69 == (_DWORD)v166)
        goto LABEL_46;
    }
    if ((JSC::Scope::hasDeclaredParameter(v164, 0, v56, v23, v24, v25, v26, v27) & 1) != 0)
      goto LABEL_165;
LABEL_164:
    WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>::add((uint64_t)&v290, (unsigned int *)&v305, (uint64_t)v163);
    goto LABEL_165;
  }
LABEL_49:
  v304[0] = a2;
  v304[1] = (const char *)v313;
  v304[2] = (const char *)&v317;
  v304[3] = (const char *)&v316;
  v304[4] = (const char *)&v325;
  v304[5] = (const char *)&v319;
  v304[6] = (const char *)&v318;
  v304[7] = &v327;
  v304[8] = (const char *)&v326;
  v304[9] = (const char *)&v315;
  v304[10] = (const char *)a8;
  v304[11] = (const char *)a1;
  if (((0x70E04u >> v324) & 1) != 0)
  {
    v181 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
    v183 = v182;
    v184 = 1 << v324;
    if (v324 == 11)
      v185 = 8;
    else
      v185 = 7;
    if ((v184 & 0x30000) != 0)
      v185 = 15;
    if ((v184 & 0x30E00) == 0)
      v185 = 1;
    if (*(_DWORD *)(v181 + 12) <= v182)
    {
      __break(0xC471u);
      JUMPOUT(0x197ECC4A0);
    }
    v186 = v181;
    v187 = v182;
    JSC::Scope::setSourceParseMode(*(_QWORD *)v181 + 720 * v182, v185);
    v195 = *(unsigned int *)(a1 + 12);
    if (!(_DWORD)v195)
    {
      __break(0xC471u);
      JUMPOUT(0x197ECC4A8);
    }
    if ((_DWORD)v195 != 1)
    {
      v196 = v195 - 1;
      v197 = *(_QWORD *)a1;
      if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v195 - 1) + 10) & 0x400000) != 0)
      {
        v198 = 720 * v195;
        while (1)
        {
          v199 = v198 - 720;
          if (v198 == 720)
            break;
          v200 = *(_BYTE *)(v197 + v198 - 1428);
          v198 -= 720;
          if ((v200 & 0x40) != 0)
          {
            if (*(_BYTE *)(v197 + v199 - 712) != 2)
              *(_BYTE *)(v197 + 720 * v196 + 8) = 0;
            break;
          }
        }
      }
    }
    if (*(_DWORD *)(v186 + 12) <= v183)
    {
      __break(0xC471u);
      JUMPOUT(0x197ECC4B0);
    }
    v201 = *(_QWORD *)v186;
    v202 = *(_QWORD *)v186 + 720 * v187;
    *(_BYTE *)(v202 + 15) = 0;
    *(_DWORD *)(v202 + 20) = v326;
    if (*(_DWORD *)(v320 + 12) <= v321)
    {
      __break(0xC471u);
      JUMPOUT(0x197ECC4B8);
    }
    if ((*(_BYTE *)(*(_QWORD *)v320 + 720 * v321 + 13) & 4) != 0)
      *(_DWORD *)(v201 + 720 * v187 + 10) = *(_DWORD *)(v201 + 720 * v187 + 10) & 0xFB7FFFFF | 0x4000000;
    *((_DWORD *)a8 + 2) = JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::SyntaxChecker>(JSC::SyntaxChecker &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::SyntaxChecker> &,JSC::Parser<JSC::Lexer<char16_t>>::FunctionDefinitionType,std::optional<int>)::{lambda(void)#2}::operator()((uint64_t)v304, v188, v189, v190, v191, v192, v193, v194);
    if (*(_DWORD *)(v186 + 12) <= v183)
    {
      __break(0xC471u);
      JUMPOUT(0x197ECC4C0);
    }
    v208 = *(_BYTE *)(*(_QWORD *)v186 + 720 * v187 + 9);
    v36 = v277;
    if ((v208 & 1) != 0)
    {
      if (*(_DWORD *)(v320 + 12) <= v321)
      {
        __break(0xC471u);
        JUMPOUT(0x197ECC4C8);
      }
      *(_BYTE *)(*(_QWORD *)v320 + 720 * v321 + 9) |= 1u;
    }
    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v301, (uint64_t *)a1, 0, v203, v204, v205, v206, v207);
    v216 = v302;
    if (v302)
    {
      v302 = 0;
      v303 = 0;
      WTF::fastFree((unint64_t)v216, v209, v210, v211, v212, v213, v214, v215);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v301, (WTF::AtomStringImpl *)v209, v210, v211, v212, v213, v214, v215);
  }
  else
  {
    *((_DWORD *)a8 + 2) = JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::SyntaxChecker>(JSC::SyntaxChecker &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::SyntaxChecker> &,JSC::Parser<JSC::Lexer<char16_t>>::FunctionDefinitionType,std::optional<int>)::{lambda(void)#2}::operator()((uint64_t)v304, (uint64_t)v55, v56, v23, v24, v25, v26, v27);
    v36 = v277;
  }
  *(_OWORD *)(a1 + 7296) = v312;
  *(_DWORD *)(a1 + 7312) = 0;
  *(_OWORD *)v36 = v310[0];
  *(_OWORD *)(v36 + 14) = *(_OWORD *)((char *)v310 + 14);
  if (*((_DWORD *)a8 + 2))
  {
    if (*(_DWORD *)(v320 + 12) <= v321)
    {
      __break(0xC471u);
      JUMPOUT(0x197ECC458);
    }
    v77 = *(_QWORD *)(a1 + 7288);
    if (a3 == 2 || (*(_BYTE *)(*(_QWORD *)v320 + 720 * v321 + 9) & 1) == 0)
      goto LABEL_58;
    if (((1 << v324) & 0x100067) == 0 && ((1 << v324) & 0x30E00) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197ECBDACLL);
    }
    v78 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
    v79 = **a8;
    if (*(WTF::StringImpl **)(v78 + 880) == v79)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        *(_QWORD *)&v290 = *(_QWORD *)(v78 + 880);
LABEL_255:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[46]>(a1, (uint64_t *)&v290);
      }
    }
    else
    {
      if (*(WTF::StringImpl **)(v78 + 1248) != v79)
      {
LABEL_58:
        v80 = *(_QWORD *)(a1 + 7400);
        v81 = *(_QWORD *)(a1 + 7408);
        *((_DWORD *)a8 + 6) = *(_DWORD *)(a1 + 7380);
        if (v315)
        {
          v82 = HIDWORD(v80);
          v83 = *(_QWORD *)(a1 + 7520);
          if (v83)
          {
            LODWORD(v290) = 1;
            DWORD1(v290) = v317;
            *((int32x2_t *)&v290 + 1) = vrev64_s32(*(int32x2_t *)((char *)&v317 + 4));
            v241 = *(unsigned int *)(v83 + 12);
            if ((_DWORD)v241 == *(_DWORD *)(v83 + 8))
            {
              v242 = (__int128 *)WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v83, v241 + 1, (unint64_t)&v290);
              v241 = *(unsigned int *)(v83 + 12);
              v243 = *(_QWORD *)v83;
              v244 = *v242;
            }
            else
            {
              v243 = *(_QWORD *)v83;
              v244 = v290;
            }
            *(_OWORD *)(v243 + 16 * v241) = v244;
            ++*(_DWORD *)(v83 + 12);
            v245 = *(_QWORD *)(a1 + 7520);
            if (v245)
            {
              LODWORD(v290) = 3;
              *(_QWORD *)((char *)&v290 + 4) = __PAIR64__(v81, v80);
              HIDWORD(v290) = HIDWORD(v80);
              v246 = *(unsigned int *)(v245 + 12);
              if ((_DWORD)v246 == *(_DWORD *)(v245 + 8))
              {
                v247 = (__int128 *)WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v245, v246 + 1, (unint64_t)&v290);
                v246 = *(unsigned int *)(v245 + 12);
                v248 = *(_QWORD *)v245;
                v249 = *v247;
              }
              else
              {
                v248 = *(_QWORD *)v245;
                v249 = v290;
              }
              *(_OWORD *)(v248 + 16 * v246) = v249;
              ++*(_DWORD *)(v245 + 12);
            }
          }
        }
        else
        {
          LODWORD(v80) = *(_DWORD *)(v77 + 132);
          LODWORD(v82) = *(_DWORD *)(v77 + 136);
          v81 = *(_QWORD *)(v77 + 140);
          *((_DWORD *)a8 + 6) = HIDWORD(v81);
        }
        if (*(_QWORD *)(a1 + 7464)
          && ((v84 = *((_DWORD *)a8 + 6), v315 != 2) ? (v85 = 8) : (v85 = 16), v84 - *((_DWORD *)a8 + 5) > v85))
        {
          LOWORD(v293) = 0;
          v294 = (WTF *)v296;
          v295 = 8;
          v297 = 1;
          v86 = v300 & 0xE0;
          v300 &= 0xE0u;
          LODWORD(v290) = v80;
          *(_QWORD *)((char *)&v290 + 4) = v81;
          HIDWORD(v290) = v82;
          v87 = *((_DWORD *)a8 + 3);
          v291 = v84;
          v292 = v87;
          v298 = v327;
          v299 = v326;
          if (!v315)
          {
            v300 = v86 | 0x10;
            v297 = *v35;
          }
          if (*(_DWORD *)(v320 + 12) <= v321)
          {
            __break(0xC471u);
            JUMPOUT(0x197ECC468);
          }
          JSC::Scope::fillParametersForSourceProviderCache(*(_QWORD *)v320 + 720 * v321, (uint64_t)&v290, (uint64_t)&v305, v23, v24, v25, v26, v27);
          JSC::SourceProviderCacheItem::create((uint64_t *)&v289, (unsigned int *)&v290);
          v90 = v289;
          v91 = v294;
          if (v296 != (_BYTE *)v294 && v294)
          {
            v294 = 0;
            LODWORD(v295) = 0;
            WTF::fastFree((unint64_t)v91, v88, v89, v23, v24, v25, v26, v27);
          }
        }
        else
        {
          v90 = 0;
        }
        if (*(_DWORD *)(v320 + 12) <= v321)
        {
          __break(0xC471u);
          JUMPOUT(0x197ECC460);
        }
        v322 = 0;
        JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v285, (uint64_t *)a1, 0, v23, v24, v25, v26, v27);
        v92 = v287;
        if (v287)
        {
          v287 = 0;
          v288 = 0;
          WTF::fastFree((unint64_t)v92, v75, v76, v23, v24, v25, v26, v27);
        }
        v93 = v286;
        if (v286)
        {
          v94 = *(WTF::StringImpl ***)v286;
          if (*(_QWORD *)v286)
          {
            v169 = *((unsigned int *)v94 - 1);
            if ((_DWORD)v169)
            {
              v170 = *(WTF::StringImpl ***)v286;
              do
              {
                v171 = *v170;
                if (*v170 != (WTF::StringImpl *)-1)
                {
                  *v170 = 0;
                  if (v171)
                  {
                    if (*(_DWORD *)v171 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v171, (WTF::AtomStringImpl *)v75, v76, v23, v24, v25, v26, v27);
                      WTF::fastFree(v172, v173, v174, v175, v176, v177, v178, v179);
                    }
                    else
                    {
                      *(_DWORD *)v171 -= 2;
                    }
                  }
                }
                v170 += 2;
                --v169;
              }
              while (v169);
            }
            WTF::fastFree((unint64_t)(v94 - 2), v75, v76, v23, v24, v25, v26, v27);
          }
          WTF::fastFree((unint64_t)v93, v75, v76, v23, v24, v25, v26, v27);
        }
        v95 = v285;
        if (v285)
        {
          v140 = *((unsigned int *)v285 - 1);
          if ((_DWORD)v140)
          {
            v141 = v285;
            do
            {
              v142 = *v141;
              if (*v141 != (WTF::StringImpl *)-1)
              {
                *v141 = 0;
                if (v142)
                {
                  if (*(_DWORD *)v142 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v142, (WTF::AtomStringImpl *)v75, v76, v23, v24, v25, v26, v27);
                    WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
                  }
                  else
                  {
                    *(_DWORD *)v142 -= 2;
                  }
                }
              }
              v141 += 2;
              --v140;
            }
            while (v140);
          }
          WTF::fastFree((unint64_t)(v95 - 2), v75, v76, v23, v24, v25, v26, v27);
        }
        v36 = v277;
        if (!v315)
          goto LABEL_82;
        v96 = *v35;
        if (*v35 == 1)
        {
          v97 = *(_DWORD *)(a1 + 7400);
          v98 = *(_DWORD *)(a1 + 7412);
          v99 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v97;
          *(_DWORD *)(a1 + 7448) = v98;
          *(_DWORD *)(a1 + 7452) = v99;
          v100 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v100 + 4) = v97;
          v101 = *(_DWORD *)(a1 + 12);
          if (!v101)
          {
            __break(0xC471u);
            JUMPOUT(0x197ECC470);
          }
          v102 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v101 - 1) + 9) & 1;
          *(_BYTE *)(v100 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v100, a1 + 7368, 0, v102, v24, v25, v26, v27);
LABEL_82:
          if (v90)
          {
            v103 = *(_QWORD *)(a1 + 7464);
            v104 = (WTF::AtomStringImpl *)*((unsigned int *)a8 + 5);
            v284 = (WTF *)v90;
            JSC::SourceProviderCache::add(v103, v104, (uint64_t *)&v284, v23, v24, v25, v26, v27);
            v105 = v284;
            if (v284)
            {
              v106 = *((unsigned int *)v284 + 6);
              if ((_DWORD)v106)
              {
                v107 = 0;
                v108 = (unsigned int *)((char *)v284 + 33);
                do
                {
                  v109 = (WTF::StringImpl *)(*v108 | ((unint64_t)*((unsigned __int8 *)v108 + 4) << 32));
                  if (*(_DWORD *)v109 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v109, (WTF::AtomStringImpl *)v75, v76, v23, v24, v25, v26, v27);
                    WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
                    v106 = *((unsigned int *)v105 + 6);
                  }
                  else
                  {
                    *(_DWORD *)v109 -= 2;
                  }
                  ++v107;
                  v108 = (unsigned int *)((char *)v108 + 5);
                }
                while (v107 < v106);
              }
              WTF::fastFree((unint64_t)v105, v75, v76, v23, v24, v25, v26, v27);
            }
          }
          *((_DWORD *)a8 + 8) = *(_DWORD *)(a1 + 7444);
          v53 = 1;
          goto LABEL_104;
        }
        if (v96 == 20 || (v96 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v290 = JSC::stringForFunctionMode();
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[32],char const*,char const(&)[6]>(a1, (const char **)&v290);
        }
        if (v90)
        {
          v260 = v90[6];
          if ((_DWORD)v260)
          {
            v261 = 0;
            v262 = (unsigned int *)((char *)v90 + 33);
            do
            {
              v263 = (WTF::StringImpl *)(*v262 | ((unint64_t)*((unsigned __int8 *)v262 + 4) << 32));
              if (*(_DWORD *)v263 == 2)
              {
                WTF::StringImpl::~StringImpl(v263, (WTF::AtomStringImpl *)v75, v76, v23, v24, v25, v26, v27);
                WTF::fastFree(v264, v265, v266, v267, v268, v269, v270, v271);
                v260 = v90[6];
              }
              else
              {
                *(_DWORD *)v263 -= 2;
              }
              ++v261;
              v262 = (unsigned int *)((char *)v262 + 5);
            }
            while (v261 < v260);
          }
          WTF::fastFree((unint64_t)v90, v75, v76, v23, v24, v25, v26, v27);
        }
        goto LABEL_293;
      }
      if (!*(_QWORD *)(a1 + 7360))
      {
        *(_QWORD *)&v290 = **a8;
        goto LABEL_255;
      }
    }
    v53 = 0;
    goto LABEL_104;
  }
  if (*v35 == 20 || (*v35 & 0x100000) != 0)
  {
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
  }
  else if (!*(_QWORD *)(a1 + 7360))
  {
    *(_QWORD *)&v290 = JSC::stringForFunctionMode();
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[31],char const*>(a1, 1, "Cannot parse the body of this ", (const char **)&v290);
  }
LABEL_293:
  v53 = 0;
  v36 = v277;
LABEL_104:
  v58 = v280;
  if (HIDWORD(v305) != 8)
    WTF::fastFree(v306, v75, v76, v23, v24, v25, v26, v27);
LABEL_32:
  *(_DWORD *)v36 = v58;
  v59 = v322;
  if (v322)
  {
    v322 = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v290, v59, 0, v23, v24, v25, v26, v27);
    v258 = v293;
    if (v293)
    {
      v293 = 0;
      LODWORD(v294) = 0;
      WTF::fastFree((unint64_t)v258, v251, v252, v253, v254, v255, v256, v257);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v290, (WTF::AtomStringImpl *)v251, v252, v253, v254, v255, v256, v257);
  }
  return v53;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::SyntaxChecker>(JSC::SyntaxChecker &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::SyntaxChecker> &,JSC::Parser<JSC::Lexer<char16_t>>::FunctionDefinitionType,std::optional<int>)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  unint64_t v54;
  __int16 *v55;
  __int16 v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE v74[24];
  WTF *v75;
  int v76;

  if (!(_BYTE)dword_1ECF4C6C3)
    return 0;
  v2 = *a1;
  if (*(_QWORD *)(*a1 + 7520))
    return 0;
  v3 = *(_QWORD *)(v2 + 7464);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = *(_DWORD *)a1[1];
  v6 = *(_DWORD *)(v4 - 8);
  v7 = 9 * ((v5 + ~(v5 << 15)) ^ ((v5 + ~(v5 << 15)) >> 10));
  v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
  v9 = v6 & (v8 ^ HIWORD(v8));
  v10 = *(_DWORD *)(v4 + 16 * v9);
  if (v10 != v5)
  {
    v11 = 1;
    while (v10 != 0x7FFFFFFF)
    {
      v9 = ((_DWORD)v9 + v11) & v6;
      v10 = *(_DWORD *)(v4 + 16 * v9);
      ++v11;
      if (v10 == v5)
        goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
  if (!v12)
    return 0;
  if (((1 << *(_BYTE *)a1[3]) & 0x840) != 0)
    v14 = *(_QWORD *)(v12 + 16) >= 0;
  else
    v14 = 2;
  if (!*(_DWORD *)(v2 + 12))
  {
    __break(0xC471u);
    JUMPOUT(0x197ECC854);
  }
  v15 = *(_QWORD *)(v2 + 7288);
  v16 = *(_QWORD *)(v15 + 112);
  v17 = *(_QWORD *)(v15 + 88);
  v18 = *(_QWORD *)v12;
  v19 = (_DWORD *)a1[2];
  v20 = v19[7];
  v19[2] = 36;
  v19[6] = *(_DWORD *)v12 >> 1;
  v19[3] = *(_DWORD *)(v12 + 16) >> 1;
  v21 = (uint64_t *)a1[9];
  v22 = *v21;
  v23 = *((_DWORD *)v21 + 2);
  if (*(_DWORD *)(v22 + 12) <= v23)
  {
    __break(0xC471u);
    JUMPOUT(0x197ECC85CLL);
  }
  v24 = v18 >> 33;
  JSC::Scope::restoreFromSourceProviderCache(*(_QWORD *)v22 + 720 * v23, v12);
  *(_QWORD *)(a1[9] + 16) = 0;
  JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v74, (uint64_t *)v2, 0, v25, v26, v27, v28, v29);
  v37 = v75;
  if (v75)
  {
    v75 = 0;
    v76 = 0;
    WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v74, (WTF::AtomStringImpl *)v30, v31, v32, v33, v34, v35, v36);
  v46 = *(_QWORD *)(v12 + 8);
  v45 = *(_QWORD *)(v12 + 16);
  v47 = *(_QWORD *)v12;
  if ((v45 & 0x8000000000000000) != 0)
    v48 = *(_DWORD *)(v12 + 28) & 0xFFFFFF;
  else
    v48 = 1;
  *(_DWORD *)(v2 + 7368) = v48;
  *(_QWORD *)(v2 + 7372) = 0;
  *(_DWORD *)(v2 + 7380) = v46 >> 1;
  v49 = v46 >> 33;
  *(_QWORD *)(v2 + 7392) = 0;
  *(_QWORD *)(v2 + 7384) = 0;
  v50 = HIDWORD(v45) & 0x7FFFFFFF;
  *(_DWORD *)(v2 + 7400) = v47 >> 33;
  *(_DWORD *)(v2 + 7404) = v50;
  *(_DWORD *)(v2 + 7408) = v46 >> 1;
  *(_DWORD *)(v2 + 7412) = v46 >> 33;
  *(_QWORD *)(v2 + 7416) = -1;
  *(_QWORD *)(v2 + 7424) = -1;
  *(_QWORD *)(v2 + 7432) = -1;
  if ((_DWORD)v24 == v20)
  {
    v50 = (unint64_t)(v16 - v17) >> 1;
    *(_DWORD *)(v2 + 7404) = v50;
  }
  v51 = *(_QWORD *)(v2 + 7288);
  *(_BYTE *)(v51 + 150) = 0;
  v52 = *(WTF::StringImpl **)(v51 + 152);
  *(_QWORD *)(v51 + 152) = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      v65 = v50;
      WTF::StringImpl::~StringImpl(v52, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
      LODWORD(v50) = v65;
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  v53 = *(_QWORD *)(v51 + 88);
  v54 = *(_QWORD *)(v51 + 96);
  v55 = (__int16 *)(v53 + 2 * v49);
  *(_QWORD *)(v51 + 80) = v55;
  *(_QWORD *)(v51 + 112) = v53 + 2 * (int)v50;
  *(_DWORD *)(v51 + 20) = 0;
  *(_DWORD *)(v51 + 36) = 0;
  if ((unint64_t)v55 >= v54)
    v56 = 0;
  else
    v56 = *v55;
  *(_WORD *)(v51 + 176) = v56;
  v57 = *(_QWORD *)(v2 + 7288);
  v58 = *(_DWORD *)(v2 + 7400);
  *(_DWORD *)v57 = v58;
  if (!v14)
  {
    v59 = *(_DWORD *)(v2 + 7412);
    v60 = *(_DWORD *)(v2 + 7404);
    *(_DWORD *)(v2 + 7444) = v58;
    *(_DWORD *)(v2 + 7448) = v59;
    *(_DWORD *)(v2 + 7452) = v60;
    *(_DWORD *)(v57 + 4) = v58;
    v61 = *(_DWORD *)(v2 + 12);
    if (v61)
      goto LABEL_28;
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x197ECC804);
  }
  if ((v14 - 1) >= 2)
    goto LABEL_29;
  v63 = *(_DWORD *)(v2 + 7412);
  v64 = *(_DWORD *)(v2 + 7404);
  *(_DWORD *)(v2 + 7444) = v58;
  *(_DWORD *)(v2 + 7448) = v63;
  *(_DWORD *)(v2 + 7452) = v64;
  *(_DWORD *)(v57 + 4) = v58;
  v61 = *(_DWORD *)(v2 + 12);
  if (!v61)
    goto LABEL_39;
LABEL_28:
  v62 = *(_BYTE *)(*(_QWORD *)v2 + 720 * (v61 - 1) + 9) & 1;
  *(_BYTE *)(v57 + 56) = 0;
  *(_DWORD *)(v2 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v57, v2 + 7368, 0, v62, v41, v42, v43, v44);
LABEL_29:
  *(_DWORD *)(a1[2] + 32) = *(_DWORD *)(v2 + 7444);
  return 1;
}

void JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionParameters<JSC::SyntaxChecker,JSC::ParserFunctionInfo<JSC::SyntaxChecker>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  int v9;
  int v10;
  int v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  const char *v79;
  const char *v80;
  const char *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  const char *v90;
  int v92;
  const char *v93;
  const char *v94;
  const char *v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  const char *v101;
  const char *v102;
  int v103;
  const char *v104;
  BOOL isAllowedIdentifierLet;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  BOOL isAllowedIdentifierYield;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  char v119;
  int v120;
  uint64_t v121;
  char v122;
  int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  const char *v132;
  int v133;
  uint64_t v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  const char *v146;
  int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  const char *Range;
  uint64_t v154;
  const char *v155;
  unsigned __int8 v156;

  v8 = (_BYTE *)(a1 + 7344);
  v9 = *(unsigned __int8 *)(a1 + 7474);
  v10 = 1 << v9;
  if (((1 << v9) & 0x7000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197ECD284);
  }
  if (v9 == 20)
    return;
  v14 = *(_DWORD *)(a1 + 7316);
  *(_DWORD *)(a1 + 7316) = 0;
  v15 = (int *)(a1 + 7368);
  v16 = *(_DWORD *)(a1 + 7368);
  if ((v10 & 0x840) != 0)
  {
    if (v16 == 12)
      goto LABEL_166;
    v10 = v14;
    isAllowedIdentifierLet = JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, v16, *(_QWORD **)(a1 + 7376));
    v110 = *(_DWORD *)(a1 + 7368);
    if (isAllowedIdentifierLet
      || (isAllowedIdentifierYield = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, v110, *(_QWORD **)(a1 + 7376)), v110 = *(_DWORD *)(a1 + 7368), isAllowedIdentifierYield))
    {
      if (v110 == 2)
        goto LABEL_242;
    }
    else
    {
      if (v110 == 2)
      {
LABEL_242:
        v112 = *(_DWORD *)(a1 + 7400);
        v113 = *(_DWORD *)(a1 + 7412);
        v114 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v112;
        *(_DWORD *)(a1 + 7448) = v113;
        *(_DWORD *)(a1 + 7452) = v114;
        v115 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v115 + 4) = v112;
        v116 = *(_DWORD *)(a1 + 12);
        if (!v116)
        {
          __break(0xC471u);
          JUMPOUT(0x197ECE15CLL);
        }
        v117 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v116 - 1) + 9) & 1;
        *(_BYTE *)(v115 + 56) = 0;
        v118 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v115, (uint64_t)v15, 0, v117, v106, v107, v108, v109);
        *(_DWORD *)(a1 + 7368) = v118;
        if (v118 == 3)
        {
          *(_DWORD *)(a3 + 12) = 0;
          goto LABEL_309;
        }
        v119 = 0;
        v156 = 0;
        Range = 0;
        while (1)
        {
          if (v118 == 37)
          {
            v135 = *(_DWORD *)(a1 + 7400);
            v136 = *(_DWORD *)(a1 + 7412);
            v137 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v135;
            *(_DWORD *)(a1 + 7448) = v136;
            *(_DWORD *)(a1 + 7452) = v137;
            v138 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v138 + 4) = v135;
            v139 = *(_DWORD *)(a1 + 12);
            if (!v139)
            {
              __break(0xC471u);
              JUMPOUT(0x197ECE164);
            }
            v140 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v139 - 1) + 9) & 1;
            *(_BYTE *)(v138 + 56) = 0;
            v141 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v138, (uint64_t)v15, 0, v140, v24, v25, v26, v27);
            *(_DWORD *)(a1 + 7368) = v141;
            if (JSC::Parser<JSC::Lexer<char16_t>>::isDisallowedIdentifierAwait(a1, v141, *(_QWORD **)(a1 + 7376)))
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a parameter name in an async function");
              goto LABEL_339;
            }
            JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 4, &Range, &v156, 0);
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_339;
            if (*v15 == 6)
            {
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Rest parameter should be the last parameter in a function declaration");
              goto LABEL_339;
            }
            v120 = 0;
            LODWORD(v121) = 1;
          }
          else
          {
            if (v118 == 3)
              goto LABEL_309;
            if (!JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 4, &Range, &v156, 0))
            {
              if (*v15 == 20 || (*v15 & 0x100000) != 0)
              {
                JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
              }
              else if (!*(_QWORD *)(a1 + 7360))
              {
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
              }
              goto LABEL_339;
            }
            v120 = JSC::Parser<JSC::Lexer<char16_t>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, a2);
            v121 = *(_QWORD *)(a1 + 7360);
            if (v121)
              goto LABEL_339;
            v119 |= v120 != 0;
          }
          if (Range)
            break;
          if (v120)
            v122 = 1;
          else
            v122 = v121;
          if ((v122 & 1) != 0 || v156)
          {
            v130 = *(_DWORD *)(a1 + 12);
            if (!v130)
            {
              __break(0xC471u);
              JUMPOUT(0x197ECE16CLL);
            }
            v131 = *(_QWORD *)a1 + 720 * (v130 - 1);
            *(_DWORD *)(v131 + 10) = *(_DWORD *)(v131 + 10) & 0xFB7FFFFF | 0x4000000;
          }
          if ((v121 & 1) != 0)
          {
            v123 = *v15;
LABEL_308:
            if (v123 == 3)
            {
LABEL_309:
              v142 = *(_DWORD *)(a1 + 7400);
              v143 = *(_DWORD *)(a1 + 7412);
              v144 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v142;
              *(_DWORD *)(a1 + 7448) = v143;
              *(_DWORD *)(a1 + 7452) = v144;
              v70 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v70 + 4) = v142;
              v71 = *(_DWORD *)(a1 + 12);
              if (!v71)
              {
                __break(0xC471u);
                JUMPOUT(0x197ECE174);
              }
              goto LABEL_58;
            }
            if (v123 != 20 && (v123 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                goto LABEL_64;
              goto LABEL_59;
            }
LABEL_123:
            JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
            goto LABEL_59;
          }
          if ((v119 & 1) == 0)
            ++*(_DWORD *)(a3 + 12);
          v123 = *v15;
          if (*v15 != 6)
            goto LABEL_308;
          v124 = *(_DWORD *)(a1 + 7400);
          v125 = *(_DWORD *)(a1 + 7412);
          v126 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v124;
          *(_DWORD *)(a1 + 7448) = v125;
          *(_DWORD *)(a1 + 7452) = v126;
          v127 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v127 + 4) = v124;
          v128 = *(_DWORD *)(a1 + 12);
          if (!v128)
          {
            __break(0xC471u);
            JUMPOUT(0x197ECE140);
          }
          v129 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v128 - 1) + 9) & 1;
          *(_BYTE *)(v127 + 56) = 0;
          v118 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v127, (uint64_t)v15, 0, v129, v24, v25, v26, v27);
          *(_DWORD *)(a1 + 7368) = v118;
        }
        if ((v119 & 1) != 0)
        {
          v155 = *(const char **)Range;
          v152 = "' not allowed in function with default parameter values";
        }
        else
        {
          if (!v156)
          {
            v155 = *(const char **)Range;
            if ((_DWORD)v121)
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[48]>(a1, (uint64_t *)&v155);
            else
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[35]>(a1, (uint64_t *)&v155);
            goto LABEL_339;
          }
          v155 = *(const char **)Range;
          v152 = "' not allowed in function with destructuring parameters";
        }
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[56]>(a1, (uint64_t *)&v155, v152);
LABEL_339:
        if (*v15 != 20 && (*v15 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            Range = JSC::stringForFunctionMode();
LABEL_283:
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],char const*>(a1, &Range);
          }
          goto LABEL_59;
        }
        goto LABEL_123;
      }
      if (v110 != 546
        && (v110 != 1048592
         || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128)))
      {
        v147 = *(_DWORD *)(a1 + 12);
        if (!v147)
        {
          __break(0xC471u);
          JUMPOUT(0x197ECE184);
        }
        v148 = v147 - 1;
        if (v110 == 532 && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v148 + 9) & 1) != 0)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_59;
          Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
          v154 = v149;
          v155 = JSC::stringForFunctionMode();
LABEL_100:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6],char const(&)[16]>(a1, (uint64_t)&Range, &v155);
          goto LABEL_59;
        }
        if ((v110 - 531) <= 1)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_59;
          Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
          v154 = v150;
          v155 = JSC::stringForFunctionMode();
LABEL_118:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&Range, &v155);
          goto LABEL_59;
        }
        if ((v110 & 0x200) != 0)
        {
          if ((v110 - 544) >= 3)
          {
LABEL_393:
            v14 = v10;
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_59;
            Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v154 = v151;
            v155 = JSC::stringForFunctionMode();
LABEL_162:
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&Range, &v155);
            goto LABEL_59;
          }
          if (v110 == 544)
          {
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v148 + 9) & 1) != 0)
            {
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_59;
              Range = JSC::stringForFunctionMode();
              goto LABEL_212;
            }
          }
          else if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v148 + 9) & 1) != 0
                 || (*(_BYTE *)(*(_QWORD *)a1 + 720 * v148 + 11) & 2) != 0)
          {
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_59;
            Range = JSC::stringForFunctionMode();
            v155 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierYieldReason(a1);
            goto LABEL_195;
          }
        }
        if (v110 != 20 && (v110 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected an arrow function input parameter");
          goto LABEL_59;
        }
        goto LABEL_123;
      }
    }
LABEL_166:
    *(_DWORD *)(a3 + 12) = 1;
    if (JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 4, 0, 0, 0))goto LABEL_59;
    if (*v15 != 20 && (*v15 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
      goto LABEL_59;
    }
    goto LABEL_123;
  }
  if (v16 != 2)
  {
    v42 = *(_DWORD *)(a1 + 12);
    if (!v42)
    {
      __break(0xC471u);
      goto LABEL_392;
    }
    v43 = v42 - 1;
    v44 = *(_QWORD *)a1;
    v45 = *(_BYTE *)(*(_QWORD *)a1 + 720 * v43 + 9);
    if ((v45 & 1) != 0 && v16 == 532)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_59;
      v46 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
      v47 = *(unsigned int *)(a1 + 7408);
      v48 = *(_DWORD *)(a1 + 7412);
      v49 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46);
      if (v50 <= v47)
      {
        v51 = 0x100000000;
        v49 = "";
        goto LABEL_75;
      }
      LODWORD(v51) = v48 - v47;
      if ((int)v50 - (int)v47 <= (v48 - v47))
      {
        LODWORD(v51) = v50 - v47;
        if (!(_DWORD)v47)
        {
          v51 = v50;
          goto LABEL_75;
        }
      }
      v51 = v51;
      v52 = v50 - v47;
      if ((v50 & 0xFF00000000) != 0)
      {
        if (v52 >= v51)
        {
          v49 += v47;
          v51 = v51 | 0x100000000;
LABEL_75:
          Range = v49;
          v154 = v51;
          v80 = "getter";
          switch(v9)
          {
            case 0:
              v80 = "function";
              break;
            case 1:
            case 2:
              v80 = "generator function";
              break;
            case 3:
              break;
            case 4:
              v80 = "setter";
              break;
            case 5:
              v80 = "method";
              break;
            case 6:
              v80 = "arrow function";
              break;
            case 7:
            case 9:
              v80 = "async function";
              break;
            case 8:
            case 11:
              v80 = "async arrow function";
              break;
            case 10:
              v80 = "async method";
              break;
            case 12:
            case 13:
            case 14:
            case 19:
              __break(0xC471u);
              JUMPOUT(0x197ECDB20);
            case 15:
            case 16:
              v80 = "async generator function";
              break;
            case 17:
              v80 = "async generator method";
              break;
            case 18:
              v80 = "generator method";
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197ECDBCCLL);
          }
          v155 = v80;
          goto LABEL_100;
        }
      }
      else if (v52 >= v51)
      {
        v49 += 2 * v47;
        goto LABEL_75;
      }
      goto LABEL_392;
    }
    if ((v16 - 531) <= 1)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_59;
      v53 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
      v54 = *(unsigned int *)(a1 + 7408);
      v55 = *(_DWORD *)(a1 + 7412);
      v56 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
      if (v57 <= v54)
      {
        v58 = 0x100000000;
        v56 = "";
        goto LABEL_85;
      }
      LODWORD(v58) = v55 - v54;
      if ((int)v57 - (int)v54 <= (v55 - v54))
      {
        LODWORD(v58) = v57 - v54;
        if (!(_DWORD)v54)
        {
          v58 = v57;
          goto LABEL_85;
        }
      }
      v58 = v58;
      v59 = v57 - v54;
      if ((v57 & 0xFF00000000) != 0)
      {
        if (v59 >= v58)
        {
          v56 += v54;
          v58 = v58 | 0x100000000;
LABEL_85:
          Range = v56;
          v154 = v58;
          v82 = "getter";
          switch(v9)
          {
            case 0:
              v82 = "function";
              break;
            case 1:
            case 2:
              v82 = "generator function";
              break;
            case 3:
              break;
            case 4:
              v82 = "setter";
              break;
            case 5:
              v82 = "method";
              break;
            case 6:
              v82 = "arrow function";
              break;
            case 7:
            case 9:
              v82 = "async function";
              break;
            case 8:
            case 11:
              v82 = "async arrow function";
              break;
            case 10:
              v82 = "async method";
              break;
            case 12:
            case 13:
            case 14:
            case 19:
              __break(0xC471u);
              JUMPOUT(0x197ECDB40);
            case 15:
            case 16:
              v82 = "async generator function";
              break;
            case 17:
              v82 = "async generator method";
              break;
            case 18:
              v82 = "generator method";
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197ECDC44);
          }
          v155 = v82;
          goto LABEL_118;
        }
      }
      else if (v59 >= v58)
      {
        v56 += 2 * v54;
        goto LABEL_85;
      }
LABEL_392:
      __break(1u);
      goto LABEL_393;
    }
    if ((v16 & 0x200) == 0)
    {
LABEL_69:
      if (v16 != 20 && (v16 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v79 = "getter";
          switch(v9)
          {
            case 0:
              v79 = "function";
              break;
            case 1:
            case 2:
              v79 = "generator function";
              break;
            case 3:
              break;
            case 4:
              v79 = "setter";
              break;
            case 5:
              v79 = "method";
              break;
            case 6:
              v79 = "arrow function";
              break;
            case 7:
            case 9:
              v79 = "async function";
              break;
            case 8:
            case 11:
              v79 = "async arrow function";
              break;
            case 10:
              v79 = "async method";
              break;
            case 12:
            case 13:
            case 14:
            case 19:
              __break(0xC471u);
              JUMPOUT(0x197ECDC04);
            case 15:
            case 16:
              v79 = "async generator function";
              break;
            case 17:
              v79 = "async generator method";
              break;
            case 18:
              v79 = "generator method";
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197ECDD5CLL);
          }
          Range = v79;
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],char const*,char const(&)[18]>(a1, &Range);
        }
        goto LABEL_59;
      }
      goto LABEL_123;
    }
    if ((v16 - 544) >= 3)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_59;
      v83 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
      v84 = *(unsigned int *)(a1 + 7408);
      v85 = *(_DWORD *)(a1 + 7412);
      v86 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 24))(v83);
      if (v87 <= v84)
      {
        v88 = 0x100000000;
        v86 = "";
      }
      else
      {
        LODWORD(v88) = v85 - v84;
        if ((int)v87 - (int)v84 > (v85 - v84) || (LODWORD(v88) = v87 - v84, (_DWORD)v84))
        {
          v88 = v88;
          v89 = v87 - v84;
          if ((v87 & 0xFF00000000) != 0)
          {
            if (v89 < v88)
              goto LABEL_392;
            v86 += v84;
            v88 = v88 | 0x100000000;
          }
          else
          {
            if (v89 < v88)
              goto LABEL_392;
            v86 += 2 * v84;
          }
        }
        else
        {
          v88 = v87;
        }
      }
      Range = v86;
      v154 = v88;
      v90 = "getter";
      switch(v9)
      {
        case 0:
          v90 = "function";
          break;
        case 1:
        case 2:
          v90 = "generator function";
          break;
        case 3:
          break;
        case 4:
          v90 = "setter";
          break;
        case 5:
          v90 = "method";
          break;
        case 6:
          v90 = "arrow function";
          break;
        case 7:
        case 9:
          v90 = "async function";
          break;
        case 8:
        case 11:
          v90 = "async arrow function";
          break;
        case 10:
          v90 = "async method";
          break;
        case 12:
        case 13:
        case 14:
        case 19:
          __break(0xC471u);
          JUMPOUT(0x197ECDC24);
        case 15:
        case 16:
          v90 = "async generator function";
          break;
        case 17:
          v90 = "async generator method";
          break;
        case 18:
          v90 = "generator method";
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x197ECDDFCLL);
      }
      v155 = v90;
      goto LABEL_162;
    }
    if (v16 == 546)
    {
      v92 = *v8;
      if (*v8 && (*(_DWORD *)(v44 + 720 * v43 + 10) & 0x102000) == 0 && *(_DWORD *)(a1 + 7480) != 1)
        goto LABEL_69;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_59;
      v93 = "getter";
      switch(v9)
      {
        case 0:
          v93 = "function";
          break;
        case 1:
        case 2:
          v93 = "generator function";
          break;
        case 3:
          break;
        case 4:
          v93 = "setter";
          break;
        case 5:
          v93 = "method";
          break;
        case 6:
          v93 = "arrow function";
          break;
        case 7:
        case 9:
          v93 = "async function";
          break;
        case 8:
        case 11:
          v93 = "async arrow function";
          break;
        case 10:
          v93 = "async method";
          break;
        case 12:
        case 13:
        case 14:
        case 19:
          __break(0xC471u);
          JUMPOUT(0x197ECDD2CLL);
        case 15:
        case 16:
          v93 = "async generator function";
          break;
        case 17:
          v93 = "async generator method";
          break;
        case 18:
          v93 = "generator method";
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x197ECDF5CLL);
      }
      Range = v93;
      if (!v92 || (v103 = *(_DWORD *)(v44 + 720 * v43 + 10), (v103 & 0x2000) != 0))
      {
        v104 = "in an async function";
      }
      else if ((v103 & 0x100000) != 0)
      {
        v104 = "in a static block";
      }
      else
      {
        if (*(_DWORD *)(a1 + 7480) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197ECDE8CLL);
        }
        v104 = "in a module";
      }
      v155 = v104;
      v102 = "Cannot use 'await' as a ";
LABEL_196:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[6],char const(&)[2],char const*>(a1, v102, &Range, &v155);
      goto LABEL_59;
    }
    if (v16 == 544)
    {
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v43 + 9) & 1) == 0)
        goto LABEL_69;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_59;
      v81 = "getter";
      switch(v9)
      {
        case 0:
          v81 = "function";
          break;
        case 1:
        case 2:
          v81 = "generator function";
          break;
        case 3:
          break;
        case 4:
          v81 = "setter";
          break;
        case 5:
          v81 = "method";
          break;
        case 6:
          v81 = "arrow function";
          break;
        case 7:
        case 9:
          v81 = "async function";
          break;
        case 8:
        case 11:
          v81 = "async arrow function";
          break;
        case 10:
          v81 = "async method";
          break;
        case 12:
        case 13:
        case 14:
        case 19:
          __break(0xC471u);
          JUMPOUT(0x197ECDEACLL);
        case 15:
        case 16:
          v81 = "async generator function";
          break;
        case 17:
          v81 = "async generator method";
          break;
        case 18:
          v81 = "generator method";
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x197ECDFBCLL);
      }
      Range = v81;
LABEL_212:
      v155 = "in strict mode";
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[6],char const(&)[2],char const*>(a1, &Range, &v155);
      goto LABEL_59;
    }
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v43 + 9) & 1) == 0 && (*(_BYTE *)(v44 + 720 * v43 + 11) & 2) == 0)
      goto LABEL_69;
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_59;
    v94 = "getter";
    switch(v9)
    {
      case 0:
        v94 = "function";
        break;
      case 1:
      case 2:
        v94 = "generator function";
        break;
      case 3:
        break;
      case 4:
        v94 = "setter";
        break;
      case 5:
        v94 = "method";
        break;
      case 6:
        v94 = "arrow function";
        break;
      case 7:
      case 9:
        v94 = "async function";
        break;
      case 8:
      case 11:
        v94 = "async arrow function";
        break;
      case 10:
        v94 = "async method";
        break;
      case 12:
      case 13:
      case 14:
      case 19:
        __break(0xC471u);
        JUMPOUT(0x197ECDCFCLL);
      case 15:
      case 16:
        v94 = "async generator function";
        break;
      case 17:
        v94 = "async generator method";
        break;
      case 18:
        v94 = "generator method";
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197ECDF1CLL);
    }
    Range = v94;
    if ((v45 & 1) != 0)
    {
      v101 = "in strict mode";
    }
    else
    {
      if ((*(_BYTE *)(v44 + 720 * v43 + 11) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197ECDC64);
      }
      v101 = "in a generator function";
    }
    v155 = v101;
LABEL_195:
    v102 = "Cannot use 'yield' as a ";
    goto LABEL_196;
  }
  v17 = *(_DWORD *)(a1 + 7400);
  v18 = *(_DWORD *)(a1 + 7412);
  v19 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v17;
  *(_DWORD *)(a1 + 7448) = v18;
  *(_DWORD *)(a1 + 7452) = v19;
  v20 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v20 + 4) = v17;
  v21 = *(_DWORD *)(a1 + 12);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x197ECDD04);
  }
  v22 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v21 - 1) + 9) & 1;
  *(_BYTE *)(v20 + 56) = 0;
  v23 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v20, (uint64_t)v15, 0, v22, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v23;
  if (v9 == 3)
  {
    if (v23 == 3)
    {
      v73 = *(_DWORD *)(a1 + 7400);
      v74 = *(_DWORD *)(a1 + 7412);
      v75 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v73;
      *(_DWORD *)(a1 + 7448) = v74;
      *(_DWORD *)(a1 + 7452) = v75;
      v76 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v76 + 4) = v73;
      v77 = *(_DWORD *)(a1 + 12);
      if (!v77)
      {
        __break(0xC471u);
        JUMPOUT(0x197ECE064);
      }
      v78 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v77 - 1) + 9) & 1;
      *(_BYTE *)(v76 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v76, (uint64_t)v15, 0, v78, v24, v25, v26, v27);
      *(_DWORD *)(a3 + 12) = 0;
      goto LABEL_59;
    }
    if (v23 == 20 || (v23 & 0x100000) != 0)
      goto LABEL_123;
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_59;
    v95 = "getter functions must have no parameters";
LABEL_143:
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, v95);
    goto LABEL_59;
  }
  if (v9 == 4)
  {
    if (v23 != 3)
    {
      Range = 0;
      v156 = 0;
      if (JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 4, &Range, &v156, 0))
      {
        v96 = JSC::Parser<JSC::Lexer<char16_t>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, a2);
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_59;
        if (v96 || v156)
        {
          if (Range)
          {
            v155 = *(const char **)Range;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[57]>(a1, (uint64_t *)&v155);
            goto LABEL_59;
          }
          v133 = *(_DWORD *)(a1 + 12);
          if (!v133)
          {
            __break(0xC471u);
            JUMPOUT(0x197ECE17CLL);
          }
          v134 = *(_QWORD *)a1 + 720 * (v133 - 1);
          *(_DWORD *)(v134 + 10) = *(_DWORD *)(v134 + 10) & 0xFB7FFFFF | 0x4000000;
        }
        *(_DWORD *)(a3 + 12) = v96 == 0;
        v97 = *v15;
        if (*v15 == 3)
        {
          v98 = *(_DWORD *)(a1 + 7400);
          v99 = *(_DWORD *)(a1 + 7412);
          v100 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v98;
          *(_DWORD *)(a1 + 7448) = v99;
          *(_DWORD *)(a1 + 7452) = v100;
          v70 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v70 + 4) = v98;
          v71 = *(_DWORD *)(a1 + 12);
          if (!v71)
          {
            __break(0xC471u);
            JUMPOUT(0x197ECD1E4);
          }
LABEL_58:
          v72 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v71 - 1) + 9) & 1;
          *(_BYTE *)(v70 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v70, (uint64_t)v15, 0, v72, v24, v25, v26, v27);
          goto LABEL_59;
        }
        if (v97 != 6)
        {
          if (v97 != 20 && (v97 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ')' after a parameter declaration");
            goto LABEL_59;
          }
          goto LABEL_123;
        }
      }
      else if (*v15 == 20 || (*v15 & 0x100000) != 0)
      {
        goto LABEL_123;
      }
    }
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_59;
    v95 = "setter functions must have one parameter";
    goto LABEL_143;
  }
  if (v23 == 3)
  {
    *(_DWORD *)(a3 + 12) = 0;
LABEL_57:
    v67 = *(_DWORD *)(a1 + 7400);
    v68 = *(_DWORD *)(a1 + 7412);
    v69 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v67;
    *(_DWORD *)(a1 + 7448) = v68;
    *(_DWORD *)(a1 + 7452) = v69;
    v70 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v70 + 4) = v67;
    v71 = *(_DWORD *)(a1 + 12);
    if (!v71)
    {
      __break(0xC471u);
      JUMPOUT(0x197ECDDDCLL);
    }
    goto LABEL_58;
  }
  v28 = 0;
  v156 = 0;
  Range = 0;
  while (1)
  {
    if (v23 == 37)
    {
      v60 = *(_DWORD *)(a1 + 7400);
      v61 = *(_DWORD *)(a1 + 7412);
      v62 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v60;
      *(_DWORD *)(a1 + 7448) = v61;
      *(_DWORD *)(a1 + 7452) = v62;
      v63 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v63 + 4) = v60;
      v64 = *(_DWORD *)(a1 + 12);
      if (!v64)
      {
        __break(0xC471u);
        JUMPOUT(0x197ECDD3CLL);
      }
      v65 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v64 - 1) + 9) & 1;
      *(_BYTE *)(v63 + 56) = 0;
      v66 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v63, (uint64_t)v15, 0, v65, v24, v25, v26, v27);
      *(_DWORD *)(a1 + 7368) = v66;
      if (v66 == 546
        || v66 == 1048592
        && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
        if (!*v8)
          goto LABEL_450;
        v145 = *(_DWORD *)(a1 + 12);
        if (!v145)
        {
          __break(0xC471u);
          JUMPOUT(0x197ECDD34);
        }
        if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v145 - 1) + 10) & 0x102000) != 0
          || *(_DWORD *)(a1 + 7480) == 1)
        {
LABEL_450:
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a parameter name in an async function");
          goto LABEL_274;
        }
      }
      JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 4, &Range, &v156, 0);
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_274;
      if (*v15 == 6)
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Rest parameter should be the last parameter in a function declaration");
        goto LABEL_274;
      }
      v29 = 0;
      LODWORD(v30) = 1;
    }
    else
    {
      if (v23 == 3)
        goto LABEL_57;
      if (!JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 4, &Range, &v156, 0))
      {
        if (*v15 == 20 || (*v15 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
        }
        goto LABEL_274;
      }
      v29 = JSC::Parser<JSC::Lexer<char16_t>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, a2);
      v30 = *(_QWORD *)(a1 + 7360);
      if (v30)
        goto LABEL_274;
      v28 |= v29 != 0;
    }
    if (!Range)
    {
      v31 = v156;
      goto LABEL_17;
    }
    if ((v28 & 1) != 0)
    {
      v155 = *(const char **)Range;
      v146 = "' not allowed in function with default parameter values";
      goto LABEL_328;
    }
    if (v156)
    {
      v155 = *(const char **)Range;
      v146 = "' not allowed in function with destructuring parameters";
LABEL_328:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[56]>(a1, (uint64_t *)&v155, v146);
LABEL_274:
      if (*v15 == 20 || (*v15 & 0x100000) != 0)
        goto LABEL_123;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_59;
      v132 = "getter";
      switch(v9)
      {
        case 0:
          v132 = "function";
          break;
        case 1:
        case 2:
          v132 = "generator function";
          break;
        case 3:
          break;
        case 4:
          v132 = "setter";
          break;
        case 5:
          v132 = "method";
          break;
        case 6:
          v132 = "arrow function";
          break;
        case 7:
        case 9:
          v132 = "async function";
          break;
        case 8:
        case 11:
          v132 = "async arrow function";
          break;
        case 10:
          v132 = "async method";
          break;
        case 12:
        case 13:
        case 14:
        case 19:
        case 20:
          __break(0xC471u);
          JUMPOUT(0x197ECDC84);
        case 15:
        case 16:
          v132 = "async generator function";
          break;
        case 17:
          v132 = "async generator method";
          break;
        case 18:
          v132 = "generator method";
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x197ECDF3CLL);
      }
      Range = v132;
      goto LABEL_283;
    }
    if ((_DWORD)v30)
    {
      v155 = *(const char **)Range;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[48]>(a1, (uint64_t *)&v155);
      goto LABEL_274;
    }
    if ((v10 & 0x160438) != 0)
    {
      v155 = *(const char **)Range;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[26]>(a1, (uint64_t *)&v155);
      goto LABEL_274;
    }
    v31 = 0;
LABEL_17:
    if (v29)
      v32 = 1;
    else
      v32 = v30;
    if ((v32 & 1) != 0 || v31)
    {
      v40 = *(_DWORD *)(a1 + 12);
      if (!v40)
      {
        __break(0xC471u);
        JUMPOUT(0x197ECDD0CLL);
      }
      v41 = *(_QWORD *)a1 + 720 * (v40 - 1);
      *(_DWORD *)(v41 + 10) = *(_DWORD *)(v41 + 10) & 0xFB7FFFFF | 0x4000000;
    }
    if ((v30 & 1) != 0)
      break;
    if ((v28 & 1) == 0)
      ++*(_DWORD *)(a3 + 12);
    v33 = *v15;
    if (*v15 != 6)
      goto LABEL_56;
    v34 = *(_DWORD *)(a1 + 7400);
    v35 = *(_DWORD *)(a1 + 7412);
    v36 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v34;
    *(_DWORD *)(a1 + 7448) = v35;
    *(_DWORD *)(a1 + 7452) = v36;
    v37 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v37 + 4) = v34;
    v38 = *(_DWORD *)(a1 + 12);
    if (!v38)
    {
      __break(0xC471u);
      JUMPOUT(0x197ECDBACLL);
    }
    v39 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v38 - 1) + 9) & 1;
    *(_BYTE *)(v37 + 56) = 0;
    v23 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v37, (uint64_t)v15, 0, v39, v24, v25, v26, v27);
    *(_DWORD *)(a1 + 7368) = v23;
  }
  v33 = *v15;
LABEL_56:
  if (v33 == 3)
    goto LABEL_57;
  if (v33 == 20 || (v33 & 0x100000) != 0)
    goto LABEL_123;
  if (*(_QWORD *)(a1 + 7360))
    goto LABEL_59;
LABEL_64:
  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ')' or a ',' after a parameter declaration");
LABEL_59:
  *(_DWORD *)(a1 + 7316) = v14;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::SyntaxChecker>(JSC::SyntaxChecker &,JSC::FunctionNameRequirements,BOOL,JSC::ConstructorKind,JSC::SuperBinding,unsigned int,JSC::ParserFunctionInfo<JSC::SyntaxChecker> &,JSC::Parser<JSC::Lexer<char16_t>>::FunctionDefinitionType,std::optional<int>)::{lambda(void)#2}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  char v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  int v31;
  int v33;
  const char *v34;
  const char *v35;

  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = **(_DWORD **)(a1 + 72);
  v12 = (_BYTE *)(v8 + 7345);
  v13 = *(_BYTE *)(v8 + 7345);
  if (v11 == 2)
  {
    *v12 = 0;
  }
  else if (!v11)
  {
    v26 = (_DWORD *)(v8 + 7456);
    v27 = *(_DWORD *)(v8 + 7456);
    *(_DWORD *)(v8 + 7456) = 0;
    if (*(_QWORD *)(v8 + 7520))
      v30 = v9;
    else
      v30 = v10;
    if (JSC::Parser<JSC::Lexer<char16_t>>::parseArrowFunctionSingleExpressionBodySourceElements<JSC::SyntaxChecker>(v8, v30))goto LABEL_8;
    v31 = *(_DWORD *)(v8 + 7368);
    if (v31 != 20 && (v31 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(v8 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v8, 1, "Cannot parse body of this arrow function");
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  v14 = *(_DWORD *)(v8 + 7400);
  v15 = *(_DWORD *)(v8 + 7412);
  v16 = *(_DWORD *)(v8 + 7404);
  *(_DWORD *)(v8 + 7444) = v14;
  *(_DWORD *)(v8 + 7448) = v15;
  *(_DWORD *)(v8 + 7452) = v16;
  v17 = *(_QWORD *)(v8 + 7288);
  *(_DWORD *)(v17 + 4) = v14;
  v18 = *(_DWORD *)(v8 + 12);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x197ECE604);
  }
  v19 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v18 - 1) + 9) & 1;
  *(_BYTE *)(v17 + 56) = 0;
  v20 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v17, v8 + 7368, 0, v19, a5, a6, a7, a8);
  *(_DWORD *)(v8 + 7368) = v20;
  if (v20 == 1)
  {
    if (*(_DWORD *)(v8 + 12))
    {
      result = 36;
      goto LABEL_11;
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x197ECE5FCLL);
  }
  v26 = (_DWORD *)(v8 + 7456);
  v27 = *(_DWORD *)(v8 + 7456);
  *(_DWORD *)(v8 + 7456) = 0;
  if (*(_QWORD *)(v8 + 7520))
    v28 = v9;
  else
    v28 = v10;
  if (!JSC::Parser<JSC::Lexer<char16_t>>::parseSourceElements<JSC::SyntaxChecker>(v8, v28, 0, v21, v22, v23, v24, v25))
  {
    v33 = *(_DWORD *)(v8 + 7368);
    if (v33 != 20 && (v33 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(v8 + 7360))
      {
        v34 = "Cannot parse body of this arrow function";
        if (v11 == 2)
          v34 = "Cannot parse body of this function";
        v35 = v34;
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const*>(v8, 1, &v35);
      }
      goto LABEL_21;
    }
LABEL_20:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(v8);
LABEL_21:
    result = 0;
    goto LABEL_10;
  }
LABEL_8:
  if (!*(_DWORD *)(v8 + 12))
    goto LABEL_36;
  result = 36;
LABEL_10:
  *v26 = v27;
LABEL_11:
  *v12 = v13;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseArrowFunctionSingleExpressionBodySourceElements<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if ((unint64_t)&v6 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      result = 0;
      *(_BYTE *)(a1 + 7352) = 1;
      return result;
    }
    return 0;
  }
  v7 = 0;
  v8 = *(_QWORD *)(a1 + 7496);
  v9 = a1;
  *(_QWORD *)(a1 + 7496) = &v7;
  v3 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v7);
  *(_QWORD *)(v9 + 7496) = v8;
  if (!v3)
  {
    v5 = *(_DWORD *)(a1 + 7368);
    if (v5 == 20 || (v5 & 0x100000) != 0)
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the arrow function expression");
    }
    return 0;
  }
  return 35;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseSourceElements<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  char v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  unint64_t v36;
  __int16 *v37;
  __int16 v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  WTF::StringImpl **v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char v76;
  char v77;
  int v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  int v82;
  _QWORD *v83;

  v83 = 0;
  v11 = (_BYTE *)(a1 + 7344);
  v82 = 0;
  v12 = a1 + 7296;
  v81 = *(_OWORD *)(a1 + 7296);
  v79 = *(_OWORD *)(a1 + 7320);
  v80 = *(_QWORD *)(a1 + 7336);
  v77 = *(_BYTE *)(a1 + 7344);
  v78 = *(_DWORD *)(a1 + 7316);
  v76 = *(_BYTE *)(a1 + 7345);
  v13 = *(int *)(a1 + 7408);
  v14 = *(int *)(a1 + 7404);
  v15 = *(int **)(a1 + 7288);
  v17 = *v15;
  v16 = v15[1];
  v18 = *((_BYTE *)v15 + 56);
  if (!JSC::Parser<JSC::Lexer<char16_t>>::parseStatementListItem<JSC::SyntaxChecker>(a1, a2, &v83, &v82, a5, a6, a7, a8))
  {
LABEL_27:
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    else
      return 35;
  }
  v26 = a3 == 0;
  while (1)
  {
    if (!v26 || !v83)
    {
LABEL_4:
      v26 = 0;
      goto LABEL_5;
    }
    if (v82 != 12 || (v27 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952), v27[3] != *v83))
    {
      v83 = 0;
      v26 = 1;
      goto LABEL_5;
    }
    v28 = *(unsigned int *)(a1 + 12);
    if (!(_DWORD)v28)
    {
      __break(0xC471u);
      JUMPOUT(0x197ECEAECLL);
    }
    v29 = *(_QWORD *)a1;
    v30 = *(_QWORD *)a1 + 720 * (v28 - 1);
    *(_BYTE *)(v30 + 9) |= 1u;
    if (v28 <= (int)v28 - 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197ECEAF4);
    }
    v31 = *(_DWORD *)(v29 + 720 * ((int)v28 - 1) + 10);
    if ((v31 & 0x800000) == 0)
      break;
    if ((v31 & 0x4400) != 0 && (_DWORD)v28 != 1)
    {
      v65 = (int)v28 - 2;
      if (v65 >= v28)
      {
        __break(0xC471u);
        JUMPOUT(0x197ECEB04);
      }
      if ((*(_BYTE *)(v29 + 720 * (int)v65 + 12) & 0x80) == 0)
        break;
    }
LABEL_18:
    v33 = *(_QWORD *)(a1 + 7288);
    *(_BYTE *)(v33 + 150) = 0;
    v34 = *(WTF::StringImpl **)(v33 + 152);
    *(_QWORD *)(v33 + 152) = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl(v34, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
    }
    v35 = *(_QWORD *)(v33 + 88);
    v36 = *(_QWORD *)(v33 + 96);
    v37 = (__int16 *)(v35 + 2 * v13);
    *(_QWORD *)(v33 + 80) = v37;
    *(_QWORD *)(v33 + 112) = v35 + 2 * v14;
    *(_DWORD *)(v33 + 20) = 0;
    *(_DWORD *)(v33 + 36) = 0;
    if ((unint64_t)v37 >= v36)
      v38 = 0;
    else
      v38 = *v37;
    *(_WORD *)(v33 + 176) = v38;
    v39 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v39 = v17;
    *(_BYTE *)(v39 + 56) = v18;
    v40 = *(_DWORD *)(a1 + 7400);
    v41 = *(_DWORD *)(a1 + 7412);
    v42 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v40;
    *(_DWORD *)(a1 + 7448) = v41;
    *(_DWORD *)(a1 + 7452) = v42;
    *(_DWORD *)(v39 + 4) = v40;
    v43 = *(_DWORD *)(a1 + 12);
    if (!v43)
    {
      __break(0xC471u);
      JUMPOUT(0x197ECEAFCLL);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v39, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v43 - 1) + 9) & 1, v22, v23, v24, v25);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v16;
    *(_OWORD *)v12 = v81;
    *(_DWORD *)(a1 + 7312) = 0;
    *(_DWORD *)(a1 + 7316) = v78;
    *(_OWORD *)(v12 + 24) = v79;
    *(_QWORD *)(v12 + 40) = v80;
    *v11 = v77;
    v11[1] = v76;
    v47 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (!v47)
      goto LABEL_4;
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v44, v45, v46, v22, v23, v24, v25);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
      v26 = 0;
      if (*(_QWORD *)(a1 + 7360))
        return 0;
    }
    else
    {
      v26 = 0;
      *(_DWORD *)v47 -= 2;
    }
LABEL_5:
    if (!JSC::Parser<JSC::Lexer<char16_t>>::parseStatementListItem<JSC::SyntaxChecker>(a1, a2, &v83, &v82, v22, v23, v24, v25))goto LABEL_27;
  }
  v66 = *(WTF::StringImpl ***)(a1 + 7328);
  v67 = (WTF::StringImpl *)v27[110];
  if (!v66)
  {
LABEL_40:
    if (JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredVariable((uint64_t *)a1, v67, v20, v21, v22, v23, v24, v25))
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a variable named 'arguments' in strict mode");
      return 0;
    }
    if (JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredVariable((uint64_t *)a1, *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 1248), v69, v70, v71, v72, v73, v74))
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a variable named 'eval' in strict mode");
      return 0;
    }
    v75 = *(_DWORD *)(a1 + 12);
    if (!v75)
    {
      __break(0xC471u);
      JUMPOUT(0x197ECEB0CLL);
    }
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v75 - 1) + 13) & 4) != 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(a1, "'use strict' directive not allowed inside a function with a non-simple parameter list");
      return 0;
    }
    if ((JSC::Parser<JSC::Lexer<unsigned char>>::isValidStrictMode(a1) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Invalid parameters or function name in strict mode");
      return 0;
    }
    goto LABEL_18;
  }
  v68 = *v66;
  if (v67 != v68)
  {
    if ((WTF::StringImpl *)v27[156] == v68)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot name a function 'eval' in strict mode");
      return 0;
    }
    goto LABEL_40;
  }
  if (!*(_QWORD *)(a1 + 7360))
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot name a function 'arguments' in strict mode");
  return 0;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseStatementListItem<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int32x2_t *v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  unsigned int *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _WORD *i;
  BOOL v22;
  unint64_t v23;
  unsigned int v24;
  _DWORD *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  char v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int32x2_t *v91;
  WTF::StringImpl *v92;
  uint64_t *v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _OWORD *v117;
  int v118;
  _OWORD *v119;
  __int128 v120;
  int v121;
  char v122;
  const char *v123;
  _OWORD *v125;
  int v126;
  unsigned int v127;
  WTF::AtomStringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  char v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  int v149;
  WTF::AtomStringImpl *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  WTF *v157;
  int32x2_t *v158;
  WTF::StringImpl *v159;
  int v160;
  unsigned int v161;
  WTF *v162;
  unint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  int v172;
  unint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  _OWORD *v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  int v192;
  int v193;
  WTF::AtomStringImpl *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  WTF *v201;
  int32x2_t *v202;
  WTF::StringImpl *v203;
  uint64_t v204;
  WTF *v205;
  uint64_t v206;
  int v207;
  int32x2_t *v208;
  WTF::AtomStringImpl *v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int v212;
  int v213;
  char v214;
  int v215;
  int v216;
  int v217;
  uint64_t v218;
  int v219;
  int v220;
  WTF::AtomStringImpl *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  char v225;
  int v226;
  int v227;
  int v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  WTF::StringImpl *v244;
  unint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  int v271;
  int v272;
  const char *v273;
  _QWORD *v274;
  uint64_t v275;
  int v276;
  unsigned int v277;
  _BYTE v278[4];
  int v279;
  int v280;
  unsigned int v281;
  int32x2_t *v282;
  unint64_t v283;
  WTF *v284;
  unsigned int *v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  int v289;
  WTF *v290;
  uint64_t v291;
  __int128 v292;

  v8 = a1;
  v9 = (int32x2_t *)(a1 + 7300);
  v10 = *(_DWORD *)(a1 + 7456);
  *(_DWORD *)(a1 + 7456) = v10 + 1;
  if ((unint64_t)v278 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
    goto LABEL_106;
  v11 = a3;
  v12 = a2;
  v13 = (unsigned int *)(a1 + 7368);
  v14 = *(_DWORD *)(a1 + 7368);
  if (v14 <= 522)
  {
    if (v14 != 12)
    {
      if (v14 != 521)
        goto LABEL_5;
      v43 = 2;
LABEL_59:
      v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseVariableDeclaration<JSC::SyntaxChecker>(a1, a2, v43);
      goto LABEL_48;
    }
    goto LABEL_15;
  }
  if (v14 <= 543)
  {
    if (v14 == 523)
    {
      v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionDeclaration<JSC::SyntaxChecker>(a1, a2, 0, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_48;
    }
    if (v14 == 541)
    {
      v286 = 0uLL;
      *(_QWORD *)&v287 = 0;
      if (JSC::Parser<JSC::Lexer<char16_t>>::parseClass<JSC::SyntaxChecker>(a1, a2, 1, (WTF ***)&v286))
      {
        v41 = (_QWORD *)v286;
        if (JSC::Parser<JSC::Lexer<char16_t>>::declareVariable(v8, (WTF::AtomStringImpl *)v286, 1, 2, v37, v38, v39, v40) < 2)
        {
          v15 = 43;
          goto LABEL_49;
        }
        if (!*(_QWORD *)(v8 + 7360))
        {
          *(_QWORD *)&v292 = *v41;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[32],WTF::UniquedStringImpl *,char const(&)[2]>(v8, (uint64_t *)&v292);
        }
        goto LABEL_166;
      }
      if (*v13 != 20 && (*v13 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(v8 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[22]>(v8);
        goto LABEL_166;
      }
LABEL_241:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(v8);
      goto LABEL_166;
    }
    goto LABEL_5;
  }
  if (v14 == 544)
  {
    v42 = *(_DWORD *)(a1 + 12);
    if (!v42)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED0084);
    }
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v42 - 1) + 9) & 1) == 0)
    {
      v125 = (_OWORD *)(a1 + 7296);
      v292 = *(_OWORD *)(a1 + 7296);
      v126 = *(_DWORD *)(a1 + 7316);
      v284 = (WTF *)(a1 + 7320);
      *(_QWORD *)&v287 = *(_QWORD *)(a1 + 7336);
      v286 = *(_OWORD *)(a1 + 7320);
      v127 = *(unsigned __int8 *)(a1 + 7344);
      v280 = v126;
      v281 = v127;
      v282 = (int32x2_t *)(a1 + 7300);
      LODWORD(v283) = *(unsigned __int8 *)(a1 + 7345);
      v128 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
      v129 = *(unsigned int *)(a1 + 7404);
      v130 = *(_QWORD *)(a1 + 7288);
      v131 = *(_DWORD *)v130;
      v279 = *(_DWORD *)(v130 + 4);
      v132 = *(_BYTE *)(v130 + 56);
      v133 = *(_DWORD *)(v8 + 7400);
      v134 = *(_DWORD *)(v8 + 7412);
      *(_DWORD *)(v8 + 7444) = v133;
      *(_DWORD *)(v8 + 7448) = v134;
      *(_DWORD *)(v8 + 7452) = v129;
      *(_DWORD *)(v130 + 4) = v133;
      *(_BYTE *)(v130 + 56) = 0;
      v285 = (unsigned int *)(v8 + 7368);
      v135 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v130, v8 + 7368, 0, 0, a5, a6, a7, a8);
      *(_DWORD *)(v8 + 7368) = v135;
      if (v135 == 12
        || (v184 = v135) == 0
        || (v135 - 544) < 3
        || v135 == 1048592
        && ((v274 = *(_QWORD **)(*(_QWORD *)(v8 + 7216) + 41952), v275 = **(_QWORD **)(v8 + 7376), v275 == v274[41])
         || v275 == v274[62]
         || v275 == v274[16]))
      {
        JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(v8 + 7288), v128, v129, v136, v137, v138, v139, v140);
        v145 = *(_QWORD *)(v8 + 7288);
        *(_DWORD *)v145 = v131;
        *(_BYTE *)(v145 + 56) = v132;
        v146 = *(_DWORD *)(v8 + 7400);
        v147 = *(_DWORD *)(v8 + 7412);
        v148 = *(_DWORD *)(v8 + 7404);
        *(_DWORD *)(v8 + 7444) = v146;
        *(_DWORD *)(v8 + 7448) = v147;
        *(_DWORD *)(v8 + 7452) = v148;
        *(_DWORD *)(v145 + 4) = v146;
        v149 = *(_DWORD *)(v8 + 12);
        if (!v149)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED0144);
        }
        *(_DWORD *)(v8 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v145, (uint64_t)v285, 0, *(_BYTE *)(*(_QWORD *)v8 + 720 * (v149 - 1) + 9) & 1, v141, v142, v143, v144);
        *(_DWORD *)(*(_QWORD *)(v8 + 7288) + 4) = v279;
        *v125 = v292;
        *(_DWORD *)(v8 + 7312) = 0;
        *(_DWORD *)(v8 + 7316) = v280;
        v157 = v284;
        *(_OWORD *)v284 = v286;
        *((_QWORD *)v157 + 2) = v287;
        v158 = v282;
        v282[5].i8[4] = v281;
        v158[5].i8[5] = v283;
        v159 = *(WTF::StringImpl **)(v8 + 7360);
        *(_QWORD *)(v8 + 7360) = 0;
        if (v159)
        {
          if (*(_DWORD *)v159 == 2)
          {
            WTF::StringImpl::~StringImpl(v159, v150, v151, v152, v153, v154, v155, v156);
            WTF::fastFree(v174, v175, v176, v177, v178, v179, v180, v181);
          }
          else
          {
            *(_DWORD *)v159 -= 2;
          }
        }
      }
      else
      {
        JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(v8 + 7288), v128, v129, v136, v137, v138, v139, v140);
        v189 = *(_QWORD *)(v8 + 7288);
        *(_DWORD *)v189 = v131;
        *(_BYTE *)(v189 + 56) = v132;
        v190 = *(_DWORD *)(v8 + 7400);
        v191 = *(_DWORD *)(v8 + 7412);
        v192 = *(_DWORD *)(v8 + 7404);
        *(_DWORD *)(v8 + 7444) = v190;
        *(_DWORD *)(v8 + 7448) = v191;
        *(_DWORD *)(v8 + 7452) = v192;
        *(_DWORD *)(v189 + 4) = v190;
        v193 = *(_DWORD *)(v8 + 12);
        if (!v193)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED015CLL);
        }
        *(_DWORD *)(v8 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v189, (uint64_t)v285, 0, *(_BYTE *)(*(_QWORD *)v8 + 720 * (v193 - 1) + 9) & 1, v185, v186, v187, v188);
        *(_DWORD *)(*(_QWORD *)(v8 + 7288) + 4) = v279;
        *v125 = v292;
        *(_DWORD *)(v8 + 7312) = 0;
        *(_DWORD *)(v8 + 7316) = v280;
        v201 = v284;
        *(_OWORD *)v284 = v286;
        *((_QWORD *)v201 + 2) = v287;
        v202 = v282;
        v282[5].i8[4] = v281;
        v202[5].i8[5] = v283;
        v203 = *(WTF::StringImpl **)(v8 + 7360);
        *(_QWORD *)(v8 + 7360) = 0;
        if (v203)
        {
          if (*(_DWORD *)v203 == 2)
          {
            WTF::StringImpl::~StringImpl(v203, v194, v195, v196, v197, v198, v199, v200);
            WTF::fastFree(v245, v246, v247, v248, v249, v250, v251, v252);
          }
          else
          {
            *(_DWORD *)v203 -= 2;
          }
        }
        if (v184 != 4)
        {
          v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpressionOrLabelStatement<JSC::SyntaxChecker>(v8, v12, 1, v196, v197, v198, v199, v200);
          goto LABEL_48;
        }
      }
    }
    a1 = v8;
    a2 = v12;
    v43 = 1;
    goto LABEL_59;
  }
  if ((v14 - 545) >= 2)
  {
    if (v14 != 1048592)
    {
LABEL_5:
      if ((unint64_t)v278 >= *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
      {
        v15 = 0;
        v16 = *(unsigned __int8 *)(a1 + 7505);
        *(_BYTE *)(a1 + 7505) = 0;
        v17 = *(_DWORD *)(a1 + 7368);
        if (v17 <= 514)
        {
          if (v17 == 1)
            goto LABEL_49;
          if (v17)
          {
            switch(v17)
            {
              case 12:
                goto LABEL_61;
              case 14:
                *a3 = *(_QWORD *)(a1 + 7376);
                if (a4)
                  *a4 = *(_DWORD *)(a1 + 7412) - *(_DWORD *)(a1 + 7408);
                LODWORD(v15) = *(_DWORD *)(a1 + 7304);
                goto LABEL_75;
              case 17:
                v58 = *(_DWORD *)(a1 + 7400);
                v59 = *(_DWORD *)(a1 + 7412);
                v60 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v58;
                *(_DWORD *)(a1 + 7448) = v59;
                *(_DWORD *)(a1 + 7452) = v60;
                v61 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v61 + 4) = v58;
                v62 = *(_DWORD *)(v8 + 12);
                if (!v62)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197ED012CLL);
                }
                v63 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v62 - 1) + 9) & 1;
                *(_BYTE *)(v61 + 56) = 0;
                *(_DWORD *)(v8 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v61, v8 + 7368, 0, v63, a5, a6, a7, a8);
                v18 = 43;
                goto LABEL_48;
              case 20:
                goto LABEL_49;
              default:
                goto LABEL_75;
            }
            goto LABEL_49;
          }
          v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseBlockStatement<JSC::SyntaxChecker>(a1, a2, 0, (uint64_t)a4, a5, a6, a7, a8);
LABEL_47:
          if ((_DWORD)v18)
          {
LABEL_48:
            v15 = v18;
            goto LABEL_49;
          }
LABEL_166:
          v15 = 0;
          goto LABEL_49;
        }
        switch(v17)
        {
          case 515:
            v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseBreakStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_47;
          case 516:
          case 517:
            goto LABEL_49;
          case 518:
            v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseForStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_47;
          case 519:
          case 521:
          case 526:
          case 531:
          case 532:
          case 535:
          case 536:
          case 538:
          case 539:
          case 540:
          case 541:
          case 542:
          case 543:
            goto LABEL_75;
          case 520:
            v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseVariableDeclaration<JSC::SyntaxChecker>(a1, a2, 0);
            goto LABEL_47;
          case 522:
            v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseContinueStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_47;
          case 523:
            v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionDeclarationStatement<JSC::SyntaxChecker>(a1, a2, v16 != 0);
            goto LABEL_47;
          case 524:
            v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseReturnStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_47;
          case 525:
            v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseIfStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_47;
          case 527:
            v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseDoWhileStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_47;
          case 528:
            v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseWhileStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_47;
          case 529:
            v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseSwitchStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_47;
          case 530:
            v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseWithStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_47;
          case 533:
            v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseThrowStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_47;
          case 534:
            v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseTryStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_47;
          case 537:
            v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseDebuggerStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_47;
          case 544:
          case 545:
          case 546:
            goto LABEL_61;
          default:
            if (v17 != 1048592)
            {
LABEL_75:
              v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpressionStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              if (*v11 && (_DWORD)v15 != *(_DWORD *)(v8 + 7304))
                *v11 = 0;
              goto LABEL_47;
            }
            if (JSC::Parser<JSC::Lexer<unsigned char>>::matchAllowedEscapedContextualKeyword(a1))
            {
LABEL_61:
              v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpressionOrLabelStatement<JSC::SyntaxChecker>(v8, v12, 0, (uint64_t)a4, a5, a6, a7, a8);
              goto LABEL_47;
            }
            break;
        }
        goto LABEL_241;
      }
LABEL_106:
      if (!*(_QWORD *)(a1 + 7360))
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
        v15 = 0;
        v9[6].i8[4] = 1;
        goto LABEL_49;
      }
      goto LABEL_166;
    }
    if (!JSC::Parser<JSC::Lexer<unsigned char>>::matchAllowedEscapedContextualKeyword(a1))
      goto LABEL_241;
LABEL_15:
    if (**(_QWORD **)(v8 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 7216) + 41952) + 896) && !v9[10].i8[4])
    {
      v64 = v8 + 7368;
      v292 = *(_OWORD *)(v8 + 7296);
      LODWORD(v285) = *(_DWORD *)(v8 + 7316);
      *(_QWORD *)&v287 = *(_QWORD *)(v8 + 7336);
      v286 = *(_OWORD *)(v8 + 7320);
      LODWORD(v284) = v9[5].u8[4];
      v282 = v9;
      LODWORD(v283) = v9[5].u8[5];
      v65 = (WTF::AtomStringImpl *)*(unsigned int *)(v8 + 7408);
      v66 = *(unsigned int *)(v8 + 7404);
      v67 = *(_QWORD *)(v8 + 7288);
      v68 = *(_DWORD *)v67;
      v69 = *(_DWORD *)(v67 + 4);
      v70 = *(_BYTE *)(v67 + 56);
      v281 = *(_DWORD *)(v8 + 7420);
      v71 = *(_DWORD *)(v8 + 7400);
      v72 = *(_DWORD *)(v8 + 7412);
      *(_DWORD *)(v8 + 7444) = v71;
      *(_DWORD *)(v8 + 7448) = v72;
      *(_DWORD *)(v8 + 7452) = v66;
      *(_DWORD *)(v67 + 4) = v71;
      v73 = *(_DWORD *)(v8 + 12);
      if (!v73)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED0134);
      }
      v74 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v73 - 1) + 9) & 1;
      *(_BYTE *)(v67 + 56) = 0;
      v80 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v67, v64, 0, v74, a5, a6, a7, a8);
      *(_DWORD *)(v8 + 7368) = v80;
      v81 = *(_QWORD *)(v8 + 7288);
      if (v80 == 523 && !*(_BYTE *)(v81 + 56))
      {
        v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseAsyncFunctionDeclaration<JSC::SyntaxChecker>(v8, v12, v281, v75, v76, v77, v78, v79);
        goto LABEL_48;
      }
      JSC::Lexer<char16_t>::setOffset(v81, v65, v66, v75, v76, v77, v78, v79);
      v86 = *(_QWORD *)(v8 + 7288);
      *(_DWORD *)v86 = v68;
      *(_BYTE *)(v86 + 56) = v70;
      v87 = *(_DWORD *)(v8 + 7400);
      v88 = *(_DWORD *)(v8 + 7412);
      v89 = *(_DWORD *)(v8 + 7404);
      *(_DWORD *)(v8 + 7444) = v87;
      *(_DWORD *)(v8 + 7448) = v88;
      *(_DWORD *)(v8 + 7452) = v89;
      *(_DWORD *)(v86 + 4) = v87;
      v90 = *(_DWORD *)(v8 + 12);
      if (!v90)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED013CLL);
      }
      *(_DWORD *)(v8 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v86, v64, 0, *(_BYTE *)(*(_QWORD *)v8 + 720 * (v90 - 1) + 9) & 1, v82, v83, v84, v85);
      *(_DWORD *)(*(_QWORD *)(v8 + 7288) + 4) = v69;
      *(_OWORD *)(v8 + 7296) = v292;
      *(_DWORD *)(v8 + 7312) = 0;
      *(_DWORD *)(v8 + 7316) = (_DWORD)v285;
      *(_OWORD *)(v8 + 7320) = v286;
      *(_QWORD *)(v8 + 7336) = v287;
      v91 = v282;
      v282[5].i8[4] = (char)v284;
      v91[5].i8[5] = v283;
      v92 = *(WTF::StringImpl **)(v8 + 7360);
      *(_QWORD *)(v8 + 7360) = 0;
      if (v92)
      {
        if (*(_DWORD *)v92 == 2)
        {
          WTF::StringImpl::~StringImpl(v92, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v261, v262, v263, v264, v265, v266, v267, v268);
        }
        else
        {
          *(_DWORD *)v92 -= 2;
        }
      }
      v9 = v282;
      v13 = (unsigned int *)(v8 + 7368);
    }
  }
  v19 = *(_DWORD *)(v8 + 12);
  if (!v19)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED0038);
  }
  if ((*(_BYTE *)(*(_QWORD *)v8 + 720 * (v19 - 1) + 12) & 0x10) != 0)
  {
    if (*v13 == 546)
    {
      if (*(_QWORD *)(v8 + 7360))
        goto LABEL_166;
      v123 = "Cannot use 'await' within static block";
    }
    else
    {
      if (*v13 != 545)
        goto LABEL_18;
      if (*(_QWORD *)(v8 + 7360))
        goto LABEL_166;
      v123 = "Cannot use 'yield' within static block";
    }
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v8, 1, v123);
    goto LABEL_166;
  }
LABEL_18:
  v284 = 0;
  v285 = v13;
  v283 = 0;
  v290 = 0;
  v291 = 0;
  while (2)
  {
    while (2)
    {
      v20 = *(_QWORD *)(v8 + 7288);
      for (i = *(_WORD **)(v20 + 80); ; ++i)
      {
        v23 = *(_QWORD *)(v20 + 96);
        if ((unint64_t)i >= v23)
          break;
        v24 = (unsigned __int16)*i;
        if (v24 <= 0xFF)
        {
          v22 = *i > 0x20u || ((1 << v24) & 0x100001A00) == 0;
          if (!v22 || *i == 160)
            continue;
        }
        else
        {
          if (u_charType((unsigned __int16)*i) == 12 || v24 == 65279)
            continue;
          v24 = (unsigned __int16)*i;
        }
        if (v24 != 10 && v24 != 13 && (v24 & 0xFFFE) != 0x2028)
        {
          v23 = *(_QWORD *)(v20 + 96);
          break;
        }
      }
      v26 = v285;
      if ((unint64_t)i >= v23)
      {
        v27 = *v285;
LABEL_34:
        switch(v27)
        {
          case 12:
            if (**(_QWORD **)(v8 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 7216) + 41952) + 896)
              || v9[10].i8[4])
            {
              goto LABEL_36;
            }
            v206 = v8 + 7296;
            v292 = *(_OWORD *)(v8 + 7296);
            LODWORD(v283) = *(_DWORD *)(v8 + 7316);
            *(_QWORD *)&v287 = *(_QWORD *)(v8 + 7336);
            v286 = *(_OWORD *)(v8 + 7320);
            v220 = v9[5].u8[4];
            v208 = v9;
            v281 = v9[5].u8[5];
            LODWORD(v282) = v220;
            v221 = (WTF::AtomStringImpl *)*(unsigned int *)(v8 + 7408);
            v222 = *(unsigned int *)(v8 + 7404);
            v223 = *(_QWORD *)(v8 + 7288);
            v224 = *(_DWORD *)v223;
            v213 = *(_DWORD *)(v223 + 4);
            v225 = *(_BYTE *)(v223 + 56);
            v226 = *(_DWORD *)(v8 + 7400);
            v227 = *(_DWORD *)(v8 + 7412);
            *(_DWORD *)(v8 + 7444) = v226;
            *(_DWORD *)(v8 + 7448) = v227;
            *(_DWORD *)(v8 + 7452) = v222;
            *(_DWORD *)(v223 + 4) = v226;
            v228 = *(_DWORD *)(v8 + 12);
            if (!v228)
            {
              __break(0xC471u);
              JUMPOUT(0x197ED016CLL);
            }
            v229 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v228 - 1) + 9) & 1;
            *(_BYTE *)(v223 + 56) = 0;
            v230 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v223, (uint64_t)v285, 0, v229, a5, a6, a7, a8);
            *(_DWORD *)(v8 + 7368) = v230;
            v231 = *(_QWORD *)(v8 + 7288);
            if (v230 == 523 && !*(_BYTE *)(v231 + 56))
            {
              if (!*(_QWORD *)(v8 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(v8, "Cannot use async function declaration in single-statement context");
              goto LABEL_172;
            }
            JSC::Lexer<char16_t>::setOffset(v231, v221, v222, (uint64_t)a4, a5, a6, a7, a8);
            v236 = *(_QWORD *)(v8 + 7288);
            *(_DWORD *)v236 = v224;
            *(_BYTE *)(v236 + 56) = v225;
            v237 = *(_DWORD *)(v8 + 7400);
            v238 = *(_DWORD *)(v8 + 7412);
            v239 = *(_DWORD *)(v8 + 7404);
            *(_DWORD *)(v8 + 7444) = v237;
            *(_DWORD *)(v8 + 7448) = v238;
            *(_DWORD *)(v8 + 7452) = v239;
            *(_DWORD *)(v236 + 4) = v237;
            v240 = *(_DWORD *)(v8 + 12);
            if (!v240)
            {
              __break(0xC471u);
              JUMPOUT(0x197ECFDC4);
            }
            break;
          case 544:
            v206 = v8 + 7296;
            v292 = *(_OWORD *)(v8 + 7296);
            LODWORD(v283) = *(_DWORD *)(v8 + 7316);
            *(_QWORD *)&v287 = *(_QWORD *)(v8 + 7336);
            v286 = *(_OWORD *)(v8 + 7320);
            v207 = v9[5].u8[4];
            v208 = v9;
            v281 = v9[5].u8[5];
            LODWORD(v282) = v207;
            v209 = (WTF::AtomStringImpl *)*(unsigned int *)(v8 + 7408);
            v210 = *(unsigned int *)(v8 + 7404);
            v211 = *(_QWORD *)(v8 + 7288);
            v212 = *(_DWORD *)v211;
            v213 = *(_DWORD *)(v211 + 4);
            v214 = *(_BYTE *)(v211 + 56);
            v215 = *(_DWORD *)(v8 + 7400);
            v216 = *(_DWORD *)(v8 + 7412);
            *(_DWORD *)(v8 + 7444) = v215;
            *(_DWORD *)(v8 + 7448) = v216;
            *(_DWORD *)(v8 + 7452) = v210;
            *(_DWORD *)(v211 + 4) = v215;
            v217 = *(_DWORD *)(v8 + 12);
            if (!v217)
            {
              __break(0xC471u);
              JUMPOUT(0x197ED0164);
            }
            v218 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v217 - 1) + 9) & 1;
            *(_BYTE *)(v211 + 56) = 0;
            v219 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v211, (uint64_t)v285, 0, v218, a5, a6, a7, a8);
            *(_DWORD *)(v8 + 7368) = v219;
            if (v219 == 4)
            {
              if (!*(_QWORD *)(v8 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v8, 1, "Cannot use lexical declaration in single-statement context");
              goto LABEL_172;
            }
            JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(v8 + 7288), v209, v210, (uint64_t)a4, a5, a6, a7, a8);
            v236 = *(_QWORD *)(v8 + 7288);
            *(_DWORD *)v236 = v212;
            *(_BYTE *)(v236 + 56) = v214;
            v241 = *(_DWORD *)(v8 + 7400);
            v242 = *(_DWORD *)(v8 + 7412);
            v243 = *(_DWORD *)(v8 + 7404);
            *(_DWORD *)(v8 + 7444) = v241;
            *(_DWORD *)(v8 + 7448) = v242;
            *(_DWORD *)(v8 + 7452) = v243;
            *(_DWORD *)(v236 + 4) = v241;
            v240 = *(_DWORD *)(v8 + 12);
            if (!v240)
            {
              __break(0xC471u);
              JUMPOUT(0x197ED0174);
            }
            break;
          case 541:
            if (!*(_QWORD *)(v8 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v8, 1, "'class' declaration is not directly within a block statement");
            goto LABEL_172;
          default:
LABEL_36:
            if ((unint64_t)v278 < *(_QWORD *)(*(_QWORD *)(v8 + 7216) + 93104))
            {
              if (!*(_QWORD *)(v8 + 7360))
              {
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(v8);
                v9[6].i8[4] = 1;
              }
            }
            else
            {
              LODWORD(v286) = 0;
              *((_QWORD *)&v286 + 1) = *(_QWORD *)(v8 + 7496);
              *(_QWORD *)&v287 = v8;
              *(_QWORD *)(v8 + 7496) = &v286;
              v28 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(v8, v12, &v286);
              *(_QWORD *)(v287 + 7496) = *((_QWORD *)&v286 + 1);
              v29 = *(_DWORD *)(v8 + 7368);
              if (v28)
              {
                if (v29 != 6)
                {
LABEL_39:
                  if (v29 == 17)
                  {
                    v30 = *(_DWORD *)(v8 + 7400);
                    v31 = *(_DWORD *)(v8 + 7412);
                    v32 = *(_DWORD *)(v8 + 7404);
                    *(_DWORD *)(v8 + 7444) = v30;
                    *(_DWORD *)(v8 + 7448) = v31;
                    *(_DWORD *)(v8 + 7452) = v32;
                    v33 = *(_QWORD *)(v8 + 7288);
                    *(_DWORD *)(v33 + 4) = v30;
                    v34 = *(_DWORD *)(v8 + 12);
                    if (!v34)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197ED007CLL);
                    }
                    v35 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v34 - 1) + 9) & 1;
                    *(_BYTE *)(v33 + 56) = 0;
                    *(_DWORD *)(v8 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v33, (uint64_t)v285, 0, v35, a5, a6, a7, a8);
LABEL_42:
                    v15 = 43;
                    goto LABEL_43;
                  }
                  v15 = 43;
                  if (v29 == 1 || v29 == 20 || *(_BYTE *)(*(_QWORD *)(v8 + 7288) + 56))
                    goto LABEL_43;
LABEL_171:
                  JSC::Parser<JSC::Lexer<char16_t>>::logError(v8);
                  goto LABEL_172;
                }
                v44 = *(_DWORD *)(v8 + 7400);
                v45 = *(_DWORD *)(v8 + 7412);
                v46 = *(_DWORD *)(v8 + 7404);
                *(_DWORD *)(v8 + 7444) = v44;
                *(_DWORD *)(v8 + 7448) = v45;
                *(_DWORD *)(v8 + 7452) = v46;
                v47 = *(_QWORD *)(v8 + 7288);
                *(_DWORD *)(v47 + 4) = v44;
                v48 = *(_DWORD *)(v8 + 12);
                if (!v48)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197ED00BCLL);
                }
                v49 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v48 - 1) + 9) & 1;
                *(_BYTE *)(v47 + 56) = 0;
                *(_DWORD *)(v8 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v47, (uint64_t)v285, 0, v49, a5, a6, a7, a8);
                *v9 = vadd_s32(*v9, (int32x2_t)0x100000001);
                LODWORD(v286) = 0;
                *((_QWORD *)&v286 + 1) = *(_QWORD *)(v8 + 7496);
                *(_QWORD *)&v287 = v8;
                *(_QWORD *)(v8 + 7496) = &v286;
                v50 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(v8, v12, &v286);
                *(_QWORD *)(v287 + 7496) = *((_QWORD *)&v286 + 1);
                v29 = *(_DWORD *)(v8 + 7368);
                if (v50)
                {
                  if (v29 != 6)
                    goto LABEL_39;
                  while (1)
                  {
                    v51 = *(_DWORD *)(v8 + 7400);
                    v52 = *(_DWORD *)(v8 + 7412);
                    v53 = *(_DWORD *)(v8 + 7404);
                    *(_DWORD *)(v8 + 7444) = v51;
                    *(_DWORD *)(v8 + 7448) = v52;
                    *(_DWORD *)(v8 + 7452) = v53;
                    v54 = *(_QWORD *)(v8 + 7288);
                    *(_DWORD *)(v54 + 4) = v51;
                    v55 = *(_DWORD *)(v8 + 12);
                    if (!v55)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197ED00E8);
                    }
                    v56 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v55 - 1) + 9) & 1;
                    *(_BYTE *)(v54 + 56) = 0;
                    *(_DWORD *)(v8 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v54, (uint64_t)v285, 2, v56, a5, a6, a7, a8);
                    LODWORD(v286) = 0;
                    *((_QWORD *)&v286 + 1) = *(_QWORD *)(v8 + 7496);
                    *(_QWORD *)&v287 = v8;
                    *(_QWORD *)(v8 + 7496) = &v286;
                    v57 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(v8, v12, &v286);
                    *(_QWORD *)(v287 + 7496) = *((_QWORD *)&v286 + 1);
                    v29 = *(_DWORD *)(v8 + 7368);
                    if (!v57)
                      break;
                    if (v29 != 6)
                      goto LABEL_39;
                  }
                }
                if (v29 == 20 || (v29 & 0x100000) != 0)
                {
                  JSC::Parser<JSC::Lexer<char16_t>>::logError(v8);
                  v26 = v285;
                }
                else
                {
                  v26 = v285;
                  if (!*(_QWORD *)(v8 + 7360))
                    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v8, 1, "Cannot parse expression in a comma expression");
                }
              }
              else if (v29 == 20 || (v29 & 0x100000) != 0)
              {
                JSC::Parser<JSC::Lexer<char16_t>>::logError(v8);
              }
              else if (!*(_QWORD *)(v8 + 7360))
              {
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[24]>(v8);
              }
            }
            if (*v26 != 20 && (*v26 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(v8 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v8, 1, "Cannot parse expression statement");
              goto LABEL_172;
            }
            goto LABEL_171;
        }
        *(_DWORD *)(v8 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v236, (uint64_t)v285, 0, *(_BYTE *)(*(_QWORD *)v8 + 720 * (v240 - 1) + 9) & 1, v232, v233, v234, v235);
        *(_DWORD *)(*(_QWORD *)(v8 + 7288) + 4) = v213;
        *(_OWORD *)v206 = v292;
        *(_DWORD *)(v8 + 7312) = 0;
        *(_DWORD *)(v8 + 7316) = v283;
        *(_OWORD *)(v206 + 24) = v286;
        *(_QWORD *)(v206 + 40) = v287;
        v208[5].i8[4] = (char)v282;
        v208[5].i8[5] = v281;
        v244 = *(WTF::StringImpl **)(v8 + 7360);
        *(_QWORD *)(v8 + 7360) = 0;
        if (v244)
        {
          if (*(_DWORD *)v244 == 2)
          {
            WTF::StringImpl::~StringImpl(v244, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v253, v254, v255, v256, v257, v258, v259, v260);
          }
          else
          {
            *(_DWORD *)v244 -= 2;
          }
        }
        v9 = v208;
        v26 = v285;
        goto LABEL_36;
      }
      v27 = *v285;
      if (*i != 58)
        goto LABEL_34;
      if (v27 > 545)
      {
        if (v27 == 1048592)
        {
          v269 = *(_QWORD **)(*(_QWORD *)(v8 + 7216) + 41952);
          v270 = **(_QWORD **)(v8 + 7376);
          if (v270 == v269[41])
            goto LABEL_258;
LABEL_262:
          v26 = v285;
          if (v270 != v269[16])
          {
LABEL_303:
            if (v270 != v269[62])
              goto LABEL_126;
            goto LABEL_304;
          }
        }
        else if (v27 != 546)
        {
          goto LABEL_126;
        }
        if (!v9[5].i8[4])
          goto LABEL_338;
        v272 = *(_DWORD *)(v8 + 12);
        if (!v272)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED0074);
        }
        if ((*(_DWORD *)(*(_QWORD *)v8 + 720 * (v272 - 1) + 10) & 0x102000) != 0
          || *(_DWORD *)(v8 + 7480) == 1)
        {
LABEL_338:
          if (*(_QWORD *)(v8 + 7360))
            goto LABEL_172;
          *(_QWORD *)&v286 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(v8);
          v273 = "Cannot use 'await' as a label ";
          goto LABEL_308;
        }
        v26 = v285;
        if (v27 != 1048592)
          goto LABEL_126;
        v269 = *(_QWORD **)(*(_QWORD *)(v8 + 7216) + 41952);
        v270 = **(_QWORD **)(v8 + 7376);
        goto LABEL_303;
      }
      if (v27 == 545)
      {
LABEL_304:
        v276 = *(_DWORD *)(v8 + 12);
        if (!v276)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED0200);
        }
        v277 = v276 - 1;
        v26 = v285;
        if ((*(_BYTE *)(*(_QWORD *)v8 + 720 * v277 + 9) & 1) == 0
          && (*(_BYTE *)(*(_QWORD *)v8 + 720 * v277 + 11) & 2) == 0)
        {
          goto LABEL_126;
        }
        if (*(_QWORD *)(v8 + 7360))
          goto LABEL_172;
        *(_QWORD *)&v286 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierYieldReason(v8);
        v273 = "Cannot use 'yield' as a label ";
LABEL_308:
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[31],char const*>(v8, 0, v273, (const char **)&v286);
        goto LABEL_172;
      }
      if (v27 != 544)
        goto LABEL_126;
LABEL_258:
      v271 = *(_DWORD *)(v8 + 12);
      if (!v271)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED0048);
      }
      if ((*(_BYTE *)(*(_QWORD *)v8 + 720 * (v271 - 1) + 9) & 1) != 0)
      {
        if (!*(_QWORD *)(v8 + 7360))
        {
          *(_QWORD *)&v286 = "in strict mode";
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],char const*>(v8, (const char **)&v286);
        }
        goto LABEL_172;
      }
      v26 = v285;
      if (v27 == 1048592)
      {
        v269 = *(_QWORD **)(*(_QWORD *)(v8 + 7216) + 41952);
        v270 = **(_QWORD **)(v8 + 7376);
        goto LABEL_262;
      }
LABEL_126:
      v93 = *(uint64_t **)(v8 + 7376);
      *(_QWORD *)&v292 = *(_QWORD *)(v8 + 7416);
      DWORD2(v292) = *(_DWORD *)(v8 + 7424);
      v288 = *(_QWORD *)(v8 + 7428);
      v289 = *(_DWORD *)(v8 + 7436);
      v94 = *(_DWORD *)(v8 + 7400);
      v95 = *(_DWORD *)(v8 + 7412);
      v96 = *(_DWORD *)(v8 + 7404);
      *(_DWORD *)(v8 + 7444) = v94;
      *(_DWORD *)(v8 + 7448) = v95;
      *(_DWORD *)(v8 + 7452) = v96;
      v97 = *(_QWORD *)(v8 + 7288);
      *(_DWORD *)(v97 + 4) = v94;
      v98 = *(_DWORD *)(v8 + 12);
      if (!v98)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED0020);
      }
      v99 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v98 - 1) + 9) & 1;
      *(_BYTE *)(v97 + 56) = 0;
      v100 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v97, (uint64_t)v26, 0, v99, a5, a6, a7, a8);
      *(_DWORD *)(v8 + 7368) = v100;
      if (v100 != 18)
      {
        if (v100 != 20 && (v100 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(v8 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(v8, "Labels must be followed by a ':'");
          goto LABEL_172;
        }
        goto LABEL_171;
      }
      v101 = *(_DWORD *)(v8 + 7400);
      v102 = *(_DWORD *)(v8 + 7412);
      v103 = *(_DWORD *)(v8 + 7404);
      *(_DWORD *)(v8 + 7444) = v101;
      *(_DWORD *)(v8 + 7448) = v102;
      *(_DWORD *)(v8 + 7452) = v103;
      v104 = *(_QWORD *)(v8 + 7288);
      *(_DWORD *)(v104 + 4) = v101;
      v105 = *(_DWORD *)(v8 + 12);
      if (!v105)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED0028);
      }
      v106 = *(_BYTE *)(*(_QWORD *)v8 + 720 * (v105 - 1) + 9) & 1;
      *(_BYTE *)(v104 + 56) = 0;
      v107 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v104, (uint64_t)v26, 0, v106, a5, a6, a7, a8);
      *(_DWORD *)(v8 + 7368) = v107;
      a3 = (_QWORD *)v283;
      if ((_DWORD)v283)
      {
        v204 = v283;
        v205 = v284;
        while (*v93 != **(_QWORD **)v205)
        {
          v205 = (WTF *)((char *)v205 + 32);
          --v204;
          a3 = (_QWORD *)v283;
          if (!v204)
            goto LABEL_130;
        }
        if (v107 != 20 && (v107 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(v8 + 7360))
          {
            *(_QWORD *)&v286 = *v93;
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[35],WTF::UniquedStringImpl *,char const(&)[2]>(v8, (uint64_t *)&v286);
          }
          goto LABEL_172;
        }
        goto LABEL_171;
      }
LABEL_130:
      v108 = *(_DWORD *)(v8 + 12);
      if (!v108)
      {
LABEL_271:
        __break(0xC471u);
        JUMPOUT(0x197ED0030);
      }
      v109 = v108 - 1;
      v110 = *(_QWORD *)v8;
      v111 = v108 - 1;
      while (1)
      {
        v112 = *(_QWORD *)(v110 + 720 * v109 + 40);
        if (v112)
        {
          v113 = *(unsigned int *)(v112 + 12);
          v114 = 16 * v113 - 16;
          v115 = v113;
          do
          {
            if ((int)v115 < 1)
              goto LABEL_133;
            if (--v115 >= v113)
            {
              __break(0xC471u);
              JUMPOUT(0x197ED0040);
            }
            v116 = *(_QWORD *)(*(_QWORD *)v112 + v114);
            v114 -= 16;
            a2 = *v93;
          }
          while (v116 != *v93);
          if (v107 != 20 && (v107 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(v8 + 7360))
            {
              *(_QWORD *)&v286 = v116;
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(v8, 1, "Cannot find scope for the label '", (uint64_t *)&v286);
            }
            goto LABEL_172;
          }
          goto LABEL_171;
        }
LABEL_133:
        if (!v111 || (*(_BYTE *)(v110 + 720 * v109 + 12) & 0x40) != 0)
          break;
        v111 = v109 - 1;
        v109 = (v109 - 1);
        if (v108 <= v111)
          goto LABEL_271;
      }
      *(_QWORD *)&v286 = v93;
      *((_QWORD *)&v286 + 1) = v292;
      LODWORD(v287) = DWORD2(v292);
      *(_QWORD *)((char *)&v287 + 4) = v288;
      HIDWORD(v287) = v289;
      if ((_DWORD)a3 == (_DWORD)v291)
      {
        v117 = (_OWORD *)WTF::Vector<JSC::LabelInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v290, v283 + 1, (unint64_t)&v286);
        v118 = HIDWORD(v291);
        v284 = v290;
        v119 = (_OWORD *)((char *)v290 + 32 * HIDWORD(v291));
        v120 = v117[1];
        *v119 = *v117;
        v119[1] = v120;
      }
      else
      {
        v182 = v287;
        v183 = (_OWORD *)((char *)v284 + 32 * v283);
        *v183 = v286;
        v183[1] = v182;
        v118 = v283;
      }
      v283 = (v118 + 1);
      HIDWORD(v291) = v118 + 1;
      a2 = *v285;
      if ((_DWORD)a2 == 12
        || JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(v8, a2, *(_QWORD **)(v8 + 7376))
        || JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(v8, *(_DWORD *)(v8 + 7368), *(_QWORD **)(v8 + 7376)))
      {
        continue;
      }
      break;
    }
    v282 = v9;
    v121 = *v285;
    v122 = 1;
    if ((int)*v285 <= 526)
    {
      if (v121 != 518)
        goto LABEL_244;
    }
    else
    {
      v9 = v282;
      if ((v121 - 527) < 2)
        break;
      if (v121 == 546
        || v121 == 1048592
        && **(_QWORD **)(v8 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 7216) + 41952) + 128))
      {
        continue;
      }
LABEL_244:
      v122 = 0;
    }
    break;
  }
  *(_QWORD *)&v286 = 0;
  if ((_DWORD)v283)
  {
    v160 = *(_DWORD *)(v8 + 12);
    if (!v160)
    {
LABEL_189:
      __break(0xC471u);
      JUMPOUT(0x197ECF99CLL);
    }
    v161 = v160 - 1;
    v163 = v283;
    v162 = v284;
    while (1)
    {
      v164 = *(_QWORD **)v162;
      v162 = (WTF *)((char *)v162 + 32);
      JSC::Scope::pushLabel(*(_QWORD *)v8 + 720 * (v160 - 1), v164, v122);
      if (!--v163)
        break;
      v160 = *(_DWORD *)(v8 + 12);
      if (!v160)
        goto LABEL_189;
    }
    v282[25].i8[5] = 1;
    v170 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::SyntaxChecker>(v8, v12, &v286, v165, v166, v167, v168, v169);
    if (*(_DWORD *)(v8 + 12) <= v161)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED014CLL);
    }
    v171 = *(_QWORD *)(*(_QWORD *)v8 + 720 * v161 + 40);
    v172 = *(_DWORD *)(v171 + 12) - 1;
    do
    {
      if (v172 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED0154);
      }
      *(_DWORD *)(v171 + 12) = v172--;
      --v283;
    }
    while (v283);
    if (v170)
      goto LABEL_42;
  }
  else
  {
    v282[25].i8[5] = 1;
    v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::SyntaxChecker>(v8, v12, &v286, (uint64_t)a4, a5, a6, a7, a8);
    if ((_DWORD)v15)
      goto LABEL_43;
  }
  if (*v285 == 20 || (*v285 & 0x100000) != 0)
    goto LABEL_171;
  if (!*(_QWORD *)(v8 + 7360))
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[23]>(v8);
LABEL_172:
  v15 = 0;
LABEL_43:
  if (v284)
  {
    v290 = 0;
    LODWORD(v291) = 0;
    WTF::fastFree((unint64_t)v284, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
LABEL_49:
  *(_DWORD *)(v8 + 7456) = v10;
  return v15;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseVariableDeclaration<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  char v15;
  _BYTE v16[12];
  int v17;
  int v18;
  int v19;

  v19 = 0;
  JSC::Parser<JSC::Lexer<char16_t>>::parseVariableDeclarationList<JSC::SyntaxChecker>(a1, a2, &v19, &v18, &v17, (uint64_t)v16, (uint64_t)v16, (uint64_t)v16, 1, a3, &v15);
  if (*(_QWORD *)(a1 + 7360))
    return 0;
  v8 = *(_DWORD *)(a1 + 7368);
  if (v8 == 17)
  {
    v9 = *(_DWORD *)(a1 + 7400);
    v10 = *(_DWORD *)(a1 + 7412);
    v11 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v9;
    *(_DWORD *)(a1 + 7448) = v10;
    *(_DWORD *)(a1 + 7452) = v11;
    result = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(result + 4) = v9;
    v13 = *(_DWORD *)(a1 + 12);
    if (v13)
    {
      v14 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
      *(_BYTE *)(result + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)result, a1 + 7368, 0, v14, v4, v5, v6, v7);
      return 43;
    }
    else
    {
      __break(0xC471u);
    }
    return result;
  }
  result = 43;
  if (v8 != 1 && v8 != 20 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
  {
    if ((v8 & 0x100000) != 0)
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    else
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected ';' after variable declaration");
    return 0;
  }
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseExpressionOrLabelStatement<JSC::SyntaxChecker>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _WORD *i;
  BOOL v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v18;
  int v20;
  int *v21;
  _QWORD *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;
  __int128 v48;
  char v49;
  int v50;
  int v52;
  unsigned int v53;
  _QWORD **v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  __int128 v65;
  _OWORD *v66;
  uint64_t v67;
  _QWORD **v68;
  _QWORD *v70;
  uint64_t v71;
  int v72;
  int v73;
  const char *v74;
  int v75;
  unsigned int v76;
  _BYTE *v77;
  char v78;
  int *v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;

  v78 = a3;
  v8 = a2;
  v10 = 0;
  v11 = 0;
  v77 = (_BYTE *)(a1 + 7344);
  v86 = 0;
  v87 = 0;
  v79 = (int *)(a1 + 7368);
LABEL_2:
  v12 = *(_QWORD *)(a1 + 7288);
  for (i = *(_WORD **)(v12 + 80); ; ++i)
  {
    v15 = *(_QWORD *)(v12 + 96);
    if ((unint64_t)i >= v15)
      break;
    v16 = (unsigned __int16)*i;
    if (v16 <= 0xFF)
    {
      v14 = *i > 0x20u || ((1 << v16) & 0x100001A00) == 0;
      if (!v14 || *i == 160)
        continue;
    }
    else
    {
      if (u_charType((unsigned __int16)*i) == 12 || v16 == 65279)
        continue;
      v16 = (unsigned __int16)*i;
    }
    if (v16 != 10 && v16 != 13 && (v16 & 0xFFFE) != 0x2028)
    {
      v15 = *(_QWORD *)(v12 + 96);
      break;
    }
  }
  if ((unint64_t)i >= v15 || *i != 58)
  {
    v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpressionStatement<JSC::SyntaxChecker>(a1, v8, a3, a4, a5, a6, a7, a8);
    goto LABEL_18;
  }
  v20 = *(_DWORD *)(a1 + 7368);
  if (v20 > 545)
  {
    v21 = v79;
    if (v20 == 1048592)
    {
      v70 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v71 = **(_QWORD **)(a1 + 7376);
      if (v71 == v70[41])
        goto LABEL_105;
LABEL_109:
      v21 = v79;
      if (v71 != v70[16])
      {
LABEL_128:
        if (v71 != v70[62])
          goto LABEL_31;
        goto LABEL_129;
      }
    }
    else if (v20 != 546)
    {
      goto LABEL_31;
    }
    if (!*v77)
      goto LABEL_149;
    v73 = *(_DWORD *)(a1 + 12);
    if (!v73)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED0AE4);
    }
    if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v73 - 1) + 10) & 0x102000) != 0
      || *(_DWORD *)(a1 + 7480) == 1)
    {
LABEL_149:
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_68;
      *(_QWORD *)&v80 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
      v74 = "Cannot use 'await' as a label ";
      goto LABEL_133;
    }
    v21 = v79;
    if (v20 != 1048592)
      goto LABEL_31;
    v70 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
    v71 = **(_QWORD **)(a1 + 7376);
    goto LABEL_128;
  }
  v21 = v79;
  if (v20 == 545)
  {
LABEL_129:
    v75 = *(_DWORD *)(a1 + 12);
    if (!v75)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED0B80);
    }
    v76 = v75 - 1;
    v21 = v79;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v76 + 9) & 1) == 0
      && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v76 + 11) & 2) == 0)
    {
      goto LABEL_31;
    }
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_68;
    *(_QWORD *)&v80 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierYieldReason(a1);
    v74 = "Cannot use 'yield' as a label ";
LABEL_133:
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[31],char const*>(a1, 0, v74, (const char **)&v80);
    goto LABEL_68;
  }
  if (v20 != 544)
    goto LABEL_31;
LABEL_105:
  v72 = *(_DWORD *)(a1 + 12);
  if (!v72)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED0AB8);
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v72 - 1) + 9) & 1) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      *(_QWORD *)&v80 = "in strict mode";
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],char const*>(a1, (const char **)&v80);
    }
  }
  else
  {
    v21 = v79;
    if (v20 == 1048592)
    {
      v70 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v71 = **(_QWORD **)(a1 + 7376);
      goto LABEL_109;
    }
LABEL_31:
    v22 = *(_QWORD **)(a1 + 7376);
    v84 = *(_QWORD *)(a1 + 7416);
    v85 = *(_DWORD *)(a1 + 7424);
    v82 = *(_QWORD *)(a1 + 7428);
    v83 = *(_DWORD *)(a1 + 7436);
    v23 = *(_DWORD *)(a1 + 7400);
    v24 = *(_DWORD *)(a1 + 7412);
    v25 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v23;
    *(_DWORD *)(a1 + 7448) = v24;
    *(_DWORD *)(a1 + 7452) = v25;
    v26 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v26 + 4) = v23;
    v27 = *(_DWORD *)(a1 + 12);
    if (!v27)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED0A98);
    }
    v28 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v27 - 1) + 9) & 1;
    *(_BYTE *)(v26 + 56) = 0;
    v29 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v26, (uint64_t)v21, 0, v28, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v29;
    if (v29 == 18)
    {
      v30 = *(_DWORD *)(a1 + 7400);
      v31 = *(_DWORD *)(a1 + 7412);
      v32 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v30;
      *(_DWORD *)(a1 + 7448) = v31;
      *(_DWORD *)(a1 + 7452) = v32;
      v33 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v33 + 4) = v30;
      v34 = *(_DWORD *)(a1 + 12);
      if (!v34)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED0AA0);
      }
      v35 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v34 - 1) + 9) & 1;
      *(_BYTE *)(v33 + 56) = 0;
      v36 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v33, (uint64_t)v21, 0, v35, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v36;
      a2 = v11;
      if (!(_DWORD)v11)
      {
LABEL_35:
        v37 = *(_DWORD *)(a1 + 12);
        if (!v37)
        {
LABEL_118:
          __break(0xC471u);
          JUMPOUT(0x197ED0AA8);
        }
        v38 = v37 - 1;
        v39 = *(_QWORD *)a1;
        v40 = v37 - 1;
        while (1)
        {
          v41 = *(_QWORD *)(v39 + 720 * v38 + 40);
          if (v41)
            break;
LABEL_38:
          if (!v40 || (*(_BYTE *)(v39 + 720 * v38 + 12) & 0x40) != 0)
          {
            *(_QWORD *)&v80 = v22;
            *((_QWORD *)&v80 + 1) = v84;
            LODWORD(v81) = v85;
            *(_QWORD *)((char *)&v81 + 4) = v82;
            HIDWORD(v81) = v83;
            if ((_DWORD)a2 == (_DWORD)v87)
            {
              v46 = (_OWORD *)WTF::Vector<JSC::LabelInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v86, v11 + 1, (unint64_t)&v80);
              LODWORD(a2) = HIDWORD(v87);
              v10 = v86;
              v47 = (_OWORD *)(v86 + 32 * HIDWORD(v87));
              v48 = v46[1];
              *v47 = *v46;
              v47[1] = v48;
            }
            else
            {
              v65 = v81;
              v66 = (_OWORD *)(v10 + 32 * v11);
              *v66 = v80;
              v66[1] = v65;
            }
            v11 = (a2 + 1);
            HIDWORD(v87) = a2 + 1;
            a2 = *v21;
            if ((_DWORD)a2 == 12
              || JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, a2, *(_QWORD **)(a1 + 7376))
              || JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376)))
            {
              goto LABEL_2;
            }
            v49 = 0;
            v50 = *v79;
            if (*v79 <= 526)
            {
              if (v50 == 518)
LABEL_57:
                v49 = 1;
            }
            else
            {
              if ((v50 - 527) < 2)
                goto LABEL_57;
              if (v50 == 546)
                goto LABEL_2;
              if (v50 == 1048592)
              {
                if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
                  goto LABEL_2;
                v49 = 0;
              }
            }
            *(_QWORD *)&v80 = 0;
            if ((_DWORD)v11)
            {
              v52 = *(_DWORD *)(a1 + 12);
              if (!v52)
              {
LABEL_75:
                __break(0xC471u);
                JUMPOUT(0x197ED0864);
              }
              v53 = v52 - 1;
              v54 = (_QWORD **)v10;
              v55 = v11;
              while (1)
              {
                v56 = *v54;
                v54 += 4;
                JSC::Scope::pushLabel(*(_QWORD *)a1 + 720 * (v52 - 1), v56, v49);
                if (!--v55)
                  break;
                v52 = *(_DWORD *)(a1 + 12);
                if (!v52)
                  goto LABEL_75;
              }
              v77[161] = v78;
              v62 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::SyntaxChecker>(a1, v8, &v80, v57, v58, v59, v60, v61);
              if (*(_DWORD *)(a1 + 12) <= v53)
              {
                __break(0xC471u);
                JUMPOUT(0x197ED0AECLL);
              }
              v63 = *(_QWORD *)(*(_QWORD *)a1 + 720 * v53 + 40);
              v64 = *(_DWORD *)(v63 + 12) - 1;
              do
              {
                if (v64 == -1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197ED0AF4);
                }
                *(_DWORD *)(v63 + 12) = v64--;
                --v11;
              }
              while (v11);
              if (v62)
              {
                v18 = 43;
                goto LABEL_18;
              }
            }
            else
            {
              v77[161] = v78;
              v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::SyntaxChecker>(a1, v8, &v80, a4, a5, a6, a7, a8);
              if ((_DWORD)v18)
                goto LABEL_18;
            }
            if (*v79 != 20 && (*v79 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[23]>(a1);
              goto LABEL_68;
            }
            goto LABEL_67;
          }
          v40 = v38 - 1;
          v38 = (v38 - 1);
          if (v37 <= v40)
            goto LABEL_118;
        }
        v42 = *(unsigned int *)(v41 + 12);
        v43 = 16 * v42 - 16;
        v44 = v42;
        do
        {
          if ((int)v44 < 1)
            goto LABEL_38;
          if (--v44 >= v42)
          {
            __break(0xC471u);
            JUMPOUT(0x197ED0AB0);
          }
          v45 = *(_QWORD *)(*(_QWORD *)v41 + v43);
          v43 -= 16;
          a2 = v11;
        }
        while (v45 != *v22);
        if (v36 != 20 && (v36 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            *(_QWORD *)&v80 = v45;
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 1, "Cannot find scope for the label '", (uint64_t *)&v80);
          }
          goto LABEL_68;
        }
        goto LABEL_67;
      }
      v67 = v11;
      v68 = (_QWORD **)v10;
      while (*v22 != **v68)
      {
        v68 += 4;
        --v67;
        v21 = v79;
        a2 = v11;
        if (!v67)
          goto LABEL_35;
      }
      if (v36 == 20 || (v36 & 0x100000) != 0)
      {
LABEL_67:
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      }
      else if (!*(_QWORD *)(a1 + 7360))
      {
        *(_QWORD *)&v80 = *v22;
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[35],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v80);
      }
    }
    else
    {
      if (v29 == 20 || (v29 & 0x100000) != 0)
        goto LABEL_67;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Labels must be followed by a ':'");
    }
  }
LABEL_68:
  v18 = 0;
LABEL_18:
  if (v10)
  {
    v86 = 0;
    LODWORD(v87) = 0;
    WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  return v18;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionDeclaration<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _BYTE v40[24];
  _OWORD v41[2];
  uint64_t v42;

  v9 = *(unsigned int *)(a1 + 7408);
  v10 = *(_DWORD *)(a1 + 7400);
  v11 = *(_DWORD *)(a1 + 7412);
  v12 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v10;
  *(_DWORD *)(a1 + 7448) = v11;
  *(_DWORD *)(a1 + 7452) = v12;
  v13 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v13 + 4) = v10;
  v14 = *(_DWORD *)(a1 + 12);
  if (!v14)
  {
    __break(0xC471u);
    goto LABEL_30;
  }
  v17 = (_DWORD *)(a1 + 7368);
  v18 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v14 - 1) + 9) & 1;
  *(_BYTE *)(v13 + 56) = 0;
  v19 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v13, a1 + 7368, 0, v18, a5, a6, a7, a8);
  v24 = 0;
  *(_DWORD *)(a1 + 7368) = v19;
  if (v19 != 191488)
  {
LABEL_3:
    v25 = *(_BYTE *)(a1 + 7474);
    *(_BYTE *)(a1 + 7474) = v24;
    v42 = 0;
    memset(v41, 0, sizeof(v41));
    if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, a2, 1, 1, 0, 1, v9, v41, 1) & 1) == 0)
    {
      if (*v17 == 20 || (*v17 & 0x100000) != 0)
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      }
      else if (!*(_QWORD *)(a1 + 7360))
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse this function");
      }
      goto LABEL_22;
    }
    JSC::Parser<JSC::Lexer<char16_t>>::declareFunction((uint64_t)v40, (uint64_t *)a1, *(WTF::StringImpl ***)&v41[0], v26, v27, v28, v29, v30);
    if ((v40[0] & 1) == 0)
      goto LABEL_5;
    v38 = *(_DWORD *)(a1 + 12);
    if (v38)
    {
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v38 - 1) + 9) & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v39 = **(_QWORD **)&v41[0];
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(a1, "Cannot declare a function named '", &v39);
        }
        goto LABEL_22;
      }
LABEL_5:
      if ((v40[0] & 2) == 0)
      {
        result = 43;
LABEL_7:
        *(_BYTE *)(a1 + 7474) = v25;
        return result;
      }
      if (!*(_QWORD *)(a1 + 7360))
      {
        v39 = **(_QWORD **)&v41[0];
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[77],WTF::UniquedStringImpl *,char const(&)[2]>(a1, &v39);
      }
LABEL_22:
      result = 0;
      goto LABEL_7;
    }
    __break(0xC471u);
LABEL_30:
    JUMPOUT(0x197ED0DF0);
  }
  if (a3 != 1)
  {
    v32 = *(_DWORD *)(a1 + 7400);
    v33 = *(_DWORD *)(a1 + 7412);
    v34 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v32;
    *(_DWORD *)(a1 + 7448) = v33;
    *(_DWORD *)(a1 + 7452) = v34;
    v35 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v35 + 4) = v32;
    v36 = *(_DWORD *)(a1 + 12);
    if (!v36)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED0DF8);
    }
    v37 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v36 - 1) + 9) & 1;
    *(_BYTE *)(v35 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v35, a1 + 7368, 0, v37, v20, v21, v22, v23);
    v24 = 2;
    goto LABEL_3;
  }
  if (!*(_QWORD *)(a1 + 7360))
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot use generator function declaration in single-statement context");
  return 0;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseAsyncFunctionDeclaration<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  int v37;
  uint64_t v38;
  _BYTE v39[24];
  _OWORD v40[2];
  uint64_t v41;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    goto LABEL_31;
  }
  v16 = (_DWORD *)(a1 + 7368);
  v17 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v18 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v17, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v18;
  v41 = 0;
  memset(v40, 0, sizeof(v40));
  if (v18 == 191488)
  {
    v23 = *(_DWORD *)(a1 + 7400);
    v24 = *(_DWORD *)(a1 + 7412);
    v25 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v23;
    *(_DWORD *)(a1 + 7448) = v24;
    *(_DWORD *)(a1 + 7452) = v25;
    v26 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v26 + 4) = v23;
    v27 = *(_DWORD *)(a1 + 12);
    if (!v27)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED1064);
    }
    v28 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v27 - 1) + 9) & 1;
    *(_BYTE *)(v26 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v26, a1 + 7368, 0, v28, v19, v20, v21, v22);
    v29 = 16;
  }
  else
  {
    v29 = 9;
  }
  v30 = *(_BYTE *)(a1 + 7474);
  *(_BYTE *)(a1 + 7474) = v29;
  if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, a2, 1, 1, 0, 1, a3, v40, 1) & 1) == 0)
  {
    if (*v16 != 20 && (*v16 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse this async function");
      goto LABEL_27;
    }
LABEL_20:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_27:
    result = 0;
    goto LABEL_10;
  }
  if (!*(_QWORD *)&v40[0])
  {
    if (*v16 != 20 && (*v16 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Async function statements must have a name");
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  JSC::Parser<JSC::Lexer<char16_t>>::declareFunction((uint64_t)v39, (uint64_t *)a1, *(WTF::StringImpl ***)&v40[0], v31, v32, v33, v34, v35);
  if ((v39[0] & 1) == 0)
    goto LABEL_8;
  v37 = *(_DWORD *)(a1 + 12);
  if (!v37)
  {
    __break(0xC471u);
LABEL_31:
    JUMPOUT(0x197ED105CLL);
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v37 - 1) + 9) & 1) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      v38 = **(_QWORD **)&v40[0];
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(a1, "Cannot declare an async function named '", &v38);
    }
    goto LABEL_27;
  }
LABEL_8:
  if ((v39[0] & 2) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      v38 = **(_QWORD **)&v40[0];
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[84],WTF::UniquedStringImpl *,char const(&)[2]>(a1, &v38);
    }
    goto LABEL_27;
  }
  result = 43;
LABEL_10:
  *(_BYTE *)(a1 + 7474) = v30;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  int v10;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL matched;
  uint64_t v25;

  v9 = (_BYTE *)(a1 + 7352);
  v10 = *(_DWORD *)(a1 + 7456);
  *(_DWORD *)(a1 + 7456) = v10 + 1;
  if ((unint64_t)&v25 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v12 = 0;
      *v9 = 1;
      goto LABEL_9;
    }
LABEL_36:
    v12 = 0;
    goto LABEL_9;
  }
  v12 = 0;
  v13 = *(unsigned __int8 *)(a1 + 7505);
  *(_BYTE *)(a1 + 7505) = 0;
  v14 = *(_DWORD *)(a1 + 7368);
  if (v14 > 514)
  {
    switch(v14)
    {
      case 515:
        v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseBreakStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_8;
      case 516:
      case 517:
        goto LABEL_9;
      case 518:
        v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseForStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_8;
      case 519:
      case 521:
      case 526:
      case 531:
      case 532:
      case 535:
      case 536:
      case 538:
      case 539:
      case 540:
      case 541:
      case 542:
      case 543:
        goto LABEL_16;
      case 520:
        v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseVariableDeclaration<JSC::SyntaxChecker>(a1, a2, 0);
        goto LABEL_8;
      case 522:
        v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseContinueStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_8;
      case 523:
        v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionDeclarationStatement<JSC::SyntaxChecker>(a1, a2, v13 != 0);
        goto LABEL_8;
      case 524:
        v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseReturnStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_8;
      case 525:
        v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseIfStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_8;
      case 527:
        v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseDoWhileStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_8;
      case 528:
        v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseWhileStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_8;
      case 529:
        v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseSwitchStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_8;
      case 530:
        v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseWithStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_8;
      case 533:
        v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseThrowStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_8;
      case 534:
        v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseTryStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_8;
      case 537:
        v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseDebuggerStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_8;
      case 544:
      case 545:
      case 546:
        goto LABEL_12;
      default:
        if (v14 != 1048592)
        {
LABEL_16:
          v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpressionStatement<JSC::SyntaxChecker>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*a3 && (_DWORD)v12 != *(_DWORD *)(a1 + 7304))
            *a3 = 0;
          goto LABEL_8;
        }
        v23 = a2;
        matched = JSC::Parser<JSC::Lexer<unsigned char>>::matchAllowedEscapedContextualKeyword(a1);
        a2 = v23;
        if (matched)
        {
LABEL_12:
          v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpressionOrLabelStatement<JSC::SyntaxChecker>(a1, a2, 0);
          goto LABEL_8;
        }
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        break;
    }
    goto LABEL_36;
  }
  if (v14 != 1)
  {
    if (v14)
    {
      switch(v14)
      {
        case 12:
          goto LABEL_12;
        case 14:
          *a3 = *(_QWORD *)(a1 + 7376);
          LODWORD(v12) = *(_DWORD *)(a1 + 7304);
          goto LABEL_16;
        case 17:
          v17 = *(_DWORD *)(a1 + 7400);
          v18 = *(_DWORD *)(a1 + 7412);
          v19 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v17;
          *(_DWORD *)(a1 + 7448) = v18;
          *(_DWORD *)(a1 + 7452) = v19;
          v20 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v20 + 4) = v17;
          v21 = *(_DWORD *)(a1 + 12);
          if (!v21)
          {
            __break(0xC471u);
            JUMPOUT(0x197ED1300);
          }
          v22 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v21 - 1) + 9) & 1;
          *(_BYTE *)(v20 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v20, a1 + 7368, 0, v22, a5, a6, a7, a8);
          v12 = 43;
          break;
        case 20:
          break;
        default:
          goto LABEL_16;
      }
    }
    else
    {
      v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseBlockStatement<JSC::SyntaxChecker>(a1, a2, 0, a4, a5, a6, a7, a8);
LABEL_8:
      v12 = v15;
    }
  }
LABEL_9:
  *(_DWORD *)(a1 + 7456) = v10;
  return v12;
}

void JSC::Parser<JSC::Lexer<char16_t>>::parseVariableDeclarationList<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, _BYTE *a11)
{
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  WTF::AtomStringImpl *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t i;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v52;
  uint64_t v53;
  int v54;
  int v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  __int16 v72;
  char *v73;
  uint64_t v74;
  int v75;
  char **v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t casual;
  uint64_t v95;
  uint64_t v96;
  int v97;
  _BOOL4 v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  WTF::StringImpl **v110;
  _BOOL4 v111;
  uint64_t v112;
  char v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  char *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  unsigned int v128;
  char *v129;
  int v131;
  _BOOL4 v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  BOOL hasLexicallyDeclaredVariable;
  BOOL v143;
  _BOOL4 v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  BOOL v157;
  int v158;
  const char *v159;
  int v160;
  _QWORD *v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  unsigned int v166;
  _BYTE *v167;
  unint64_t StatusReg;
  uint64_t v169;
  uint64_t v171;
  int v177;
  _DWORD *v179;
  const char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;

  v12 = 0;
  v13 = 0;
  v167 = (_BYTE *)(a1 + 7344);
  v179 = (_DWORD *)(a1 + 7368);
  v169 = a1 + 7444;
  v171 = a1 + 7416;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    while (1)
    {
      *a4 = 0;
      v14 = *(_DWORD *)(a1 + 7400);
      v15 = *(_DWORD *)(a1 + 7412);
      v16 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v14;
      *(_DWORD *)(a1 + 7448) = v15;
      *(_DWORD *)(a1 + 7452) = v16;
      v17 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v17 + 4) = v14;
      v18 = *(_DWORD *)(a1 + 12);
      if (!v18)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED20F4);
      }
      v19 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v18 - 1) + 9) & 1;
      *(_BYTE *)(v17 + 56) = 0;
      v20 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v17, (uint64_t)v179, 0, v19, (uint64_t)a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v20;
      ++*a3;
      if (v20 == 12)
        break;
      if (v20 <= 544)
      {
        if (v20 == 13)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot use a private name to declare a variable");
          return;
        }
        if (v20 != 544)
          goto LABEL_114;
LABEL_210:
        v163 = *(_DWORD *)(a1 + 12);
        if (!v163)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED210CLL);
        }
        v164 = v13;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v163 - 1) + 9) & 1) == 0)
          break;
        if (v20 != 1048592)
          goto LABEL_114;
        v161 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
        v162 = **(_QWORD **)(a1 + 7376);
        goto LABEL_237;
      }
      if (v20 == 545)
        goto LABEL_238;
      if (v20 != 1048592)
      {
        if (v20 == 546)
          break;
        goto LABEL_114;
      }
      v161 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v162 = **(_QWORD **)(a1 + 7376);
      if (v162 == v161[41])
        goto LABEL_210;
      v164 = v13;
LABEL_237:
      v13 = v164;
      if (v162 != v161[62])
        goto LABEL_242;
LABEL_238:
      v165 = *(_DWORD *)(a1 + 12);
      if (!v165)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED2228);
      }
      v166 = v165 - 1;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v166 + 9) & 1) == 0
        && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v166 + 11) & 2) == 0)
      {
        break;
      }
      if (v20 == 1048592)
      {
        v161 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
        v162 = **(_QWORD **)(a1 + 7376);
LABEL_242:
        if (v162 == v161[16])
        {
          v20 = 1048592;
          break;
        }
      }
LABEL_114:
      v113 = v167[96];
      v167[96] = 1;
      v114 = JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, a10, 0, 0, 0);
      v167[96] = v113;
      v115 = *(_DWORD *)(a1 + 7368);
      if (!v114)
      {
        if (v115 == 20 || (v115 & 0x100000) != 0)
          goto LABEL_216;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse this destructuring pattern");
        return;
      }
      if (a9 == 1 && v115 != 21)
      {
        if (v115 == 20 || (v115 & 0x100000) != 0)
          goto LABEL_216;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected an initializer in destructuring variable declaration");
        return;
      }
      *a4 = v114;
      if (v115 == 21)
      {
        v116 = *(_DWORD *)(a1 + 7400);
        v117 = *(_DWORD *)(a1 + 7412);
        v118 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v116;
        *(_DWORD *)(a1 + 7448) = v117;
        *(_DWORD *)(a1 + 7452) = v118;
        v119 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v119 + 4) = v116;
        v120 = *(_DWORD *)(a1 + 12);
        if (!v120)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED2104);
        }
        v121 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v120 - 1) + 9) & 1;
        *(_BYTE *)(v119 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v119, (uint64_t)v179, 2, v121, (uint64_t)a5, a6, a7, a8);
        LODWORD(v181) = 0;
        v182 = *(_QWORD *)(a1 + 7496);
        v183 = a1;
        *(_QWORD *)(a1 + 7496) = &v181;
        v122 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v181);
        *(_QWORD *)(v183 + 7496) = v182;
        if (*(_QWORD *)(a1 + 7360))
          return;
        v29 = 0;
        *a5 = v122;
        v87 = 48;
        goto LABEL_60;
      }
      if (v115 != 6)
        return;
    }
    v25 = *(_DWORD *)(a1 + 12);
    if (!v25)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED20FCLL);
    }
    v26 = *(_QWORD *)a1;
    v27 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v25 - 1) + 10);
    if ((v27 & 0x100000) != 0
      && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 880))
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'arguments' as an identifier in static block");
      return;
    }
    if (v20 == 544)
      goto LABEL_200;
    if (v20 == 1048592)
      break;
    if (v20 != 546)
      goto LABEL_9;
LABEL_185:
    LOBYTE(v156) = *v167 != 0;
    v157 = (v27 & 0x102000) != 0 || *v167 == 0;
    if (v157 || (v156 = *(_DWORD *)(a1 + 7480), v156 == 1))
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        if (a10 >= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED2154);
        }
        v181 = off_1E357B338[a10];
        v158 = ((v27 & 0x2000) == 0) & v156;
        if (v158)
          v159 = "in a static block";
        else
          v159 = "in an async function";
        if ((v27 & 0x100000) == 0 && (v158 & 1) != 0)
        {
          if (*(_DWORD *)(a1 + 7480) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197ED2174);
          }
          v159 = "in a module";
        }
        v180 = v159;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[2],char const*>(a1, "Cannot use 'await' as a ", (const char **)&v181, &v180);
      }
      return;
    }
LABEL_9:
    v28 = *(_DWORD *)(a1 + 7424);
    *(_QWORD *)a6 = *(_QWORD *)(a1 + 7416);
    *(_DWORD *)(a6 + 8) = v28;
    v29 = *(WTF::AtomStringImpl **)(a1 + 7376);
    v30 = *(_DWORD *)(a1 + 7400);
    v31 = *(_DWORD *)(a1 + 7412);
    v32 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v30;
    *(_DWORD *)(a1 + 7448) = v31;
    *(_DWORD *)(a1 + 7452) = v32;
    v33 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v33 + 4) = v30;
    v34 = *(_DWORD *)(a1 + 12);
    if (!v34)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED20ECLL);
    }
    v35 = *(_BYTE *)(v26 + 720 * (v34 - 1) + 9) & 1;
    *(_BYTE *)(v33 + 56) = 0;
    v177 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v33, (uint64_t)v179, 0, v35, v21, v22, v23, v24);
    *v179 = v177;
    if (!a10)
    {
      v78 = JSC::Parser<JSC::Lexer<unsigned char>>::declareHoistedVariable((uint64_t *)a1, v29, v37, v38, (uint64_t)a5, a6, a7, a8);
LABEL_54:
      if (!v78)
        goto LABEL_55;
      goto LABEL_204;
    }
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 148)
      && *(_DWORD *)(a1 + 7456) == 1
      && ((JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredParameter((uint64_t *)a1, *(WTF::StringImpl **)v29, v37, v38, (uint64_t)a5, a6, a7, a8) & 1) != 0|| (JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredVariable((uint64_t *)a1, *(WTF::StringImpl **)v29, v39, v40, v41, v42, v43, v44) & 1) != 0))
    {
LABEL_155:
      if (a10 == 2)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v181 = *(char **)v29;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v181);
        }
      }
      else if (a10 == 1)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v181 = *(char **)v29;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[39],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v181);
        }
      }
      else if (!*(_QWORD *)(a1 + 7360))
      {
        v181 = *(char **)v29;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[73],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v181);
      }
      return;
    }
    v45 = *(_DWORD *)(a1 + 12);
    if (!v45)
    {
LABEL_230:
      __break(0xC471u);
      JUMPOUT(0x197ED212CLL);
    }
    v46 = v45 - 1;
    v47 = *(_QWORD *)a1;
    for (i = *(_QWORD *)a1 + 720 * (v45 - 1); ; i = v47 + 720 * v46)
    {
      v49 = *(_DWORD *)(i + 10);
      if ((v49 & 0x80) != 0)
        break;
      if (v45 <= --v46)
        goto LABEL_230;
    }
    if (v45 <= v46)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED2114);
    }
    if ((v49 & 0x80000) != 0)
    {
      if (v45 <= v46 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED211CLL);
      }
      v140 = v47 + 720 * (v46 - 1);
      v141 = *(WTF::StringImpl **)v29;
      if (*(_QWORD *)v29)
      {
        *(_DWORD *)v141 += 2;
        hasLexicallyDeclaredVariable = JSC::Scope::hasLexicallyDeclaredVariable(v140, v141, v37, v38, (uint64_t)a5, a6, a7, a8);
        v143 = hasLexicallyDeclaredVariable;
        if (*(_DWORD *)v141 == 2)
        {
          WTF::StringImpl::~StringImpl(v141, v36, v37, v38, (uint64_t)a5, a6, a7, a8);
          WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
          if (v143)
            goto LABEL_155;
        }
        else
        {
          *(_DWORD *)v141 -= 2;
          if (hasLexicallyDeclaredVariable)
            goto LABEL_155;
        }
      }
      else if (JSC::Scope::hasLexicallyDeclaredVariable(v140, 0, v37, v38, (uint64_t)a5, a6, a7, a8))
      {
        goto LABEL_155;
      }
      v45 = *(_DWORD *)(a1 + 12);
    }
    if (v45 <= v46)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED2124);
    }
    v50 = *(_QWORD *)a1;
    v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 720 * v46) + 41952);
    v52 = *(_QWORD *)(v51 + 1248) == *(_QWORD *)v29 || *(_QWORD *)(v51 + 880) == *(_QWORD *)v29;
    v53 = v50 + 720 * v46;
    v54 = *(_DWORD *)(v53 + 10);
    if ((v54 & 0x800000) == 0 || v52)
      v56 = 0;
    else
      v56 = 0x800000;
    *(_DWORD *)(v53 + 10) = v56 | v54 & 0xFF7FFFFF;
    v57 = *(char **)v29;
    if (*(_QWORD *)v29)
      *(_DWORD *)v57 += 2;
    v58 = (uint64_t *)(v53 + 144);
    v59 = *(_QWORD *)(v53 + 144);
    if (v59)
      goto LABEL_32;
    v91 = *(_QWORD *)(StatusReg + 752);
    if (v91)
    {
      v92 = (_BYTE *)(v91 + 9776);
      *(_BYTE *)(v91 + 9776) = 1;
      v93 = *(unsigned int *)(v91 + 9792);
      if ((_DWORD)v93)
      {
        *(_DWORD *)(v91 + 9792) = v93 - *(_DWORD *)(v91 + 9796);
        casual = *(_QWORD *)(v91 + 9784) - v93;
LABEL_79:
        *v92 = 0;
        goto LABEL_80;
      }
      v107 = *(_QWORD *)(v91 + 9816);
      v108 = *(_QWORD *)(v91 + 9800);
      if (v107)
      {
LABEL_104:
        v109 = __clz(v107);
        *(_QWORD *)(v91 + 9816) = v107 & ~(0x8000000000000000 >> v109);
        casual = v108 + 16 * v109;
        goto LABEL_79;
      }
      v133 = v52;
      if (*(_BYTE *)(v91 + 9781) == 6)
      {
        v134 = *(_DWORD *)(v91 + 9812);
        v135 = *(unsigned int *)(v91 + 9808);
        if (v135 < v134)
        {
          *(_QWORD *)&v92[8 * v135 + 56] = 0;
          v136 = (unint64_t *)(v91 + 8 * v135 + 9840);
          v137 = v134 - 1 - v135;
          while (v137)
          {
            v108 += 1024;
            v139 = *v136++;
            v138 = v139;
            LODWORD(v135) = v135 + 1;
            --v137;
            if (v139)
            {
              v107 = __rbit64(v138);
              *(_DWORD *)(v91 + 9808) = v135;
              *(_QWORD *)(v91 + 9800) = v108;
              v52 = v133;
              goto LABEL_104;
            }
          }
          *(_DWORD *)(v91 + 9808) = v134;
        }
      }
      *v92 = 0;
      v52 = v133;
    }
    v144 = v52;
    casual = bmalloc_allocate_casual(144, 1);
    v52 = v144;
LABEL_80:
    *(_QWORD *)(casual + 16) = 0;
    v95 = casual + 16;
    *(_WORD *)(v95 + 8) = 0;
    *(_QWORD *)(v95 + 16) = 0;
    *(_WORD *)(v95 + 24) = 0;
    *(_QWORD *)(v95 + 32) = 0;
    *(_WORD *)(v95 + 40) = 0;
    *(_QWORD *)(v95 + 48) = 0;
    *(_WORD *)(v95 + 56) = 0;
    *(_QWORD *)(v95 + 64) = 0;
    *(_WORD *)(v95 + 72) = 0;
    *(_QWORD *)(v95 + 80) = 0;
    *(_WORD *)(v95 + 88) = 0;
    *(_QWORD *)(v95 + 96) = 0;
    *(_WORD *)(v95 + 104) = 0;
    *(_QWORD *)(v95 + 112) = 0;
    *(_WORD *)(v95 + 120) = 0;
    *v58 = v95;
    *(_DWORD *)(v95 - 4) = 8;
    *(_DWORD *)(*v58 - 8) = 7;
    *(_DWORD *)(*v58 - 16) = 0;
    *(_DWORD *)(*v58 - 12) = 0;
    v59 = *v58;
    if (!*v58)
    {
      v60 = 0;
      goto LABEL_33;
    }
LABEL_32:
    v60 = *(_DWORD *)(v59 - 8);
LABEL_33:
    v61 = *((_DWORD *)v57 + 4);
    if ((v61 & 0x20) != 0)
      v61 = *((_DWORD *)v57 + 8);
    v62 = v60 & (v61 >> 8);
    v63 = v59 + 16 * v62;
    v64 = *(WTF::StringImpl **)v63;
    if (!*(_QWORD *)v63)
      goto LABEL_36;
    v96 = 0;
    v97 = 1;
    do
    {
      if (v64 == (WTF::StringImpl *)v57)
      {
        v71 = 1;
        goto LABEL_44;
      }
      if (v64 == (WTF::StringImpl *)-1)
        v96 = v63;
      v62 = (v62 + v97) & v60;
      v63 = v59 + 16 * v62;
      v64 = *(WTF::StringImpl **)v63;
      ++v97;
    }
    while (*(_QWORD *)v63);
    if (v96)
    {
      *(_QWORD *)v96 = 0;
      *(_WORD *)(v96 + 8) = 0;
      --*(_DWORD *)(*v58 - 16);
      v63 = v96;
    }
    if (v57)
LABEL_36:
      *(_DWORD *)v57 += 2;
    *(_QWORD *)v63 = v57;
    *(_WORD *)(v63 + 8) = 0;
    v65 = *v58;
    if (*v58)
      v66 = *(_DWORD *)(v65 - 12) + 1;
    else
      v66 = 1;
    *(_DWORD *)(v65 - 12) = v66;
    v67 = *v58;
    if (*v58)
      v68 = *(_DWORD *)(v67 - 12);
    else
      v68 = 0;
    v69 = (*(_DWORD *)(v67 - 16) + v68);
    v70 = *(unsigned int *)(v67 - 4);
    if (v70 > 0x400)
    {
      if (v70 <= 2 * v69)
      {
LABEL_110:
        v110 = (WTF::StringImpl **)v63;
        v111 = v52;
        v112 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(v58, v110);
        v52 = v111;
        v63 = v112;
      }
    }
    else if (3 * v70 <= 4 * v69)
    {
      goto LABEL_110;
    }
    v71 = 0;
LABEL_44:
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
      {
        v98 = v52;
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v57, v36, v37, v38, (uint64_t)a5, a6, a7, a8);
        WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
        v52 = v98;
      }
      else
      {
        *(_DWORD *)v57 -= 2;
      }
    }
    v72 = a10;
    if (a10 != 2)
      v72 = 8;
    *(_WORD *)(v63 + 8) |= v72;
    if ((v71 & 1) == 0)
    {
      v73 = *(char **)v29;
      v74 = v50 + 720 * v46;
      v75 = *(_DWORD *)(v74 + 620);
      v76 = (char **)(v74 + 624);
      if (v75 == 8)
      {
        v77 = *(unsigned int *)(v50 + 720 * v46 + 616);
        if (!(_DWORD)v77)
          goto LABEL_52;
        if (*v76 != v73)
        {
          v89 = 0;
          while (v77 - 1 != v89)
          {
            v90 = *(char **)(v50 + 720 * v46 + 632 + 8 * v89++);
            if (v90 == v73)
            {
              if (v89 >= v77)
                break;
              goto LABEL_138;
            }
          }
LABEL_52:
          v78 = 0;
          goto LABEL_53;
        }
      }
      else
      {
        v123 = *v76;
        v124 = (unint64_t)&v73[~((_QWORD)v73 << 32)] ^ ((unint64_t)&v73[~((_QWORD)v73 << 32)] >> 22);
        v125 = 9 * ((v124 + ~(v124 << 13)) ^ ((v124 + ~(v124 << 13)) >> 8));
        v126 = (v125 ^ (v125 >> 15)) + ~((v125 ^ (v125 >> 15)) << 27);
        v127 = v75 - 1;
        v128 = v127 & ((v126 >> 31) ^ v126);
        v129 = *(char **)&v123[8 * v128];
        if (v129 != (char *)-1 && v129 != v73)
        {
          v131 = 1;
          do
          {
            v128 = (v128 + v131) & v127;
            v129 = *(char **)&v123[8 * v128];
            ++v131;
          }
          while (v129 != (char *)-1 && v129 != v73);
        }
        if (v129 != v73)
          goto LABEL_52;
      }
    }
LABEL_138:
    v78 = 2;
LABEL_53:
    if (!v52)
      goto LABEL_54;
    LOBYTE(v78) = v78 | 1;
LABEL_204:
    if ((v78 & 1) != 0)
    {
      v160 = *(_DWORD *)(a1 + 12);
      if (!v160)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED2134);
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v160 - 1) + 9) & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v181 = *(char **)v29;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],WTF::UniquedStringImpl *,char const(&)[16]>(a1, (uint64_t *)&v181);
        }
        return;
      }
    }
    if ((v78 & 2) != 0)
      goto LABEL_155;
LABEL_55:
    if (v177 == 21)
    {
      v79 = *(_QWORD *)v171;
      *(_DWORD *)(a7 + 8) = *(_DWORD *)(v171 + 8);
      *(_QWORD *)a7 = v79;
      LODWORD(v79) = *(_DWORD *)(a1 + 7400);
      v80 = *(_DWORD *)(a1 + 7412);
      v81 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v79;
      *(_DWORD *)(a1 + 7448) = v80;
      *(_DWORD *)(a1 + 7452) = v81;
      v82 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v82 + 4) = v79;
      v83 = *(_DWORD *)(a1 + 12);
      if (!v83)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED20E4);
      }
      v84 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v83 - 1) + 9) & 1;
      *(_BYTE *)(v82 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v82, (uint64_t)v179, 2, v84, (uint64_t)a5, a6, a7, a8);
      if (*(_QWORD *)(a1 + 7360))
        return;
      LODWORD(v181) = 0;
      v182 = *(_QWORD *)(a1 + 7496);
      v183 = a1;
      *(_QWORD *)(a1 + 7496) = &v181;
      v85 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v181);
      *(_QWORD *)(v183 + 7496) = v182;
      v86 = *(_QWORD *)v169;
      *(_DWORD *)(a8 + 8) = *(_DWORD *)(v169 + 8);
      *(_QWORD *)a8 = v86;
      *a5 = v85;
      if (!v85)
      {
        if (*v179 != 20 && (*v179 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v181 = *(char **)v29;
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[57],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v181);
          }
          return;
        }
LABEL_216:
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        return;
      }
      goto LABEL_59;
    }
    if (!a9 && a10 == 2)
    {
      *a11 = 1;
LABEL_59:
      v87 = 27;
      goto LABEL_60;
    }
    v87 = 27;
    if (a9 && a10 == 2)
    {
      if (*v179 == 20 || (*v179 & 0x100000) != 0)
        goto LABEL_216;
      if (!*(_QWORD *)(a1 + 7360))
      {
        v181 = *(char **)v29;
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[26],WTF::UniquedStringImpl *,char const(&)[2],char const(&)[26]>(a1, (uint64_t *)&v181);
      }
      return;
    }
LABEL_60:
    if (v12)
      v88 = v13;
    else
      v88 = 47;
    if ((_DWORD)v13)
    {
      v12 = 47;
      v13 = v88;
    }
    else
    {
      v13 = v87;
    }
    if (*v179 != 6)
    {
      if (v29)
        *a4 = 31;
      return;
    }
  }
  v153 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
  v154 = **(_QWORD **)(a1 + 7376);
  if (v154 != *(_QWORD *)(v153 + 328))
  {
    v155 = v13;
LABEL_184:
    LODWORD(v13) = v155;
    if (v154 != *(_QWORD *)(v153 + 128))
      goto LABEL_9;
    goto LABEL_185;
  }
LABEL_200:
  if (a10 - 1 > 1)
  {
    v155 = v13;
    if (v20 != 1048592)
      goto LABEL_9;
    v153 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
    v154 = **(_QWORD **)(a1 + 7376);
    goto LABEL_184;
  }
  if ((v20 & 0x100000) != 0)
    goto LABEL_216;
  if (!*(_QWORD *)(a1 + 7360))
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[64]>(a1);
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[57],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, uint64_t *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v40);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v40[5]((WTF::StringPrintStream *)&v40);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v5, "%s", "Expected expression as the intializer for the variable '");
    v12 = *a2;
    if (*a2)
    {
      v13 = *(char **)(v12 + 8);
      v14 = *(unsigned int *)(v12 + 4);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v13, v14, (uint64_t)&v37, v11);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v13, v14, 0, v6, v7, v8, v9, v10, (uint64_t)&v37);
      WTF::printExpectedCStringHelper(v5, "StringImpl*", &v37);
      if (v38 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    }
    else
    {
      WTF::PrintStream::printf(v5, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf(v5, "%s", "'");
    WTF::PrintStream::printf(v5, "%s", ".");
    v40[5]((WTF::StringPrintStream *)&v40);
    WTF::String::fromUTF8WithLatin1Fallback(v41, v42, &v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v37, v15, v16, v17, v18, v19, v20);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v21, v22, v23, v24, v25, v26, v27);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[26],WTF::UniquedStringImpl *,char const(&)[2],char const(&)[26]>(uint64_t a1, uint64_t *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v40);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v40[5]((WTF::StringPrintStream *)&v40);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v5, "%s", "const declared variable '");
    v12 = *a2;
    if (*a2)
    {
      v13 = *(char **)(v12 + 8);
      v14 = *(unsigned int *)(v12 + 4);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v13, v14, (uint64_t)&v37, v11);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v13, v14, 0, v6, v7, v8, v9, v10, (uint64_t)&v37);
      WTF::printExpectedCStringHelper(v5, "StringImpl*", &v37);
      if (v38 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    }
    else
    {
      WTF::PrintStream::printf(v5, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf(v5, "%s", "'");
    WTF::PrintStream::printf(v5, "%s", " must have an initializer");
    WTF::PrintStream::printf(v5, "%s", ".");
    v40[5]((WTF::StringPrintStream *)&v40);
    WTF::String::fromUTF8WithLatin1Fallback(v41, v42, &v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v37, v15, v16, v17, v18, v19, v20);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v21, v22, v23, v24, v25, v26, v27);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseExpressionStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int32x2_t *v10;
  _DWORD *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t result;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v41;
  __int128 v42;
  int v43;
  __int128 v44;
  __int8 v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  char v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  __int128 v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  char v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  WTF::AtomStringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int8 v100;
  int32x2_t *v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  int32x2_t *v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;

  v10 = (int32x2_t *)(a1 + 7300);
  v11 = (_DWORD *)(a1 + 7368);
  v12 = *(_DWORD *)(a1 + 7368);
  switch(v12)
  {
    case 12:
      if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896)
        || *(_BYTE *)(a1 + 7384))
      {
        break;
      }
      v41 = a1 + 7296;
      v62 = *(_OWORD *)(a1 + 7296);
      v63 = *(_DWORD *)(a1 + 7316);
      v116 = *(_QWORD *)(a1 + 7336);
      v64 = *(_OWORD *)(a1 + 7320);
      v114 = v62;
      v115 = v64;
      v111 = *(unsigned __int8 *)(a1 + 7344);
      v112 = v63;
      v113 = (int32x2_t *)(a1 + 7300);
      v45 = *(_BYTE *)(a1 + 7345);
      v65 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
      v66 = *(unsigned int *)(a1 + 7404);
      v67 = *(_QWORD *)(a1 + 7288);
      v68 = *(_DWORD *)v67;
      v50 = *(_DWORD *)(v67 + 4);
      v69 = *(_BYTE *)(v67 + 56);
      v70 = *(_DWORD *)(a1 + 7400);
      v71 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v70;
      *(_DWORD *)(a1 + 7448) = v71;
      *(_DWORD *)(a1 + 7452) = v66;
      *(_DWORD *)(v67 + 4) = v70;
      v72 = *(_DWORD *)(a1 + 12);
      if (!v72)
      {
LABEL_67:
        __break(0xC471u);
        JUMPOUT(0x197ED2BB4);
      }
      v73 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v72 - 1) + 9) & 1;
      *(_BYTE *)(v67 + 56) = 0;
      v79 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v67, (uint64_t)v11, 0, v73, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v79;
      v80 = *(_QWORD *)(a1 + 7288);
      if (v79 == 523 && !*(_BYTE *)(v80 + 56))
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot use async function declaration in single-statement context");
        return 0;
      }
      JSC::Lexer<char16_t>::setOffset(v80, v65, v66, v74, v75, v76, v77, v78);
      v85 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v85 = v68;
      *(_BYTE *)(v85 + 56) = v69;
      v86 = *(_DWORD *)(a1 + 7400);
      v87 = *(_DWORD *)(a1 + 7412);
      v88 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v86;
      *(_DWORD *)(a1 + 7448) = v87;
      *(_DWORD *)(a1 + 7452) = v88;
      *(_DWORD *)(v85 + 4) = v86;
      v89 = *(_DWORD *)(a1 + 12);
      if (!v89)
        goto LABEL_67;
      goto LABEL_55;
    case 544:
      v41 = a1 + 7296;
      v42 = *(_OWORD *)(a1 + 7296);
      v43 = *(_DWORD *)(a1 + 7316);
      v116 = *(_QWORD *)(a1 + 7336);
      v44 = *(_OWORD *)(a1 + 7320);
      v114 = v42;
      v115 = v44;
      v111 = *(unsigned __int8 *)(a1 + 7344);
      v112 = v43;
      v113 = (int32x2_t *)(a1 + 7300);
      v45 = *(_BYTE *)(a1 + 7345);
      v46 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
      v47 = *(unsigned int *)(a1 + 7404);
      v48 = *(_QWORD *)(a1 + 7288);
      v49 = *(_DWORD *)v48;
      v50 = *(_DWORD *)(v48 + 4);
      v51 = *(_BYTE *)(v48 + 56);
      v52 = *(_DWORD *)(a1 + 7400);
      v53 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v52;
      *(_DWORD *)(a1 + 7448) = v53;
      *(_DWORD *)(a1 + 7452) = v47;
      *(_DWORD *)(v48 + 4) = v52;
      v54 = *(_DWORD *)(a1 + 12);
      if (!v54)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED2CC4);
      }
      v55 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v54 - 1) + 9) & 1;
      *(_BYTE *)(v48 + 56) = 0;
      v56 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v48, (uint64_t)v11, 0, v55, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v56;
      if (v56 == 4)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot use lexical declaration in single-statement context");
        return 0;
      }
      JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), v46, v47, v57, v58, v59, v60, v61);
      v85 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v85 = v49;
      *(_BYTE *)(v85 + 56) = v51;
      v90 = *(_DWORD *)(a1 + 7400);
      v91 = *(_DWORD *)(a1 + 7412);
      v92 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v90;
      *(_DWORD *)(a1 + 7448) = v91;
      *(_DWORD *)(a1 + 7452) = v92;
      *(_DWORD *)(v85 + 4) = v90;
      v89 = *(_DWORD *)(a1 + 12);
      if (!v89)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED2CCCLL);
      }
LABEL_55:
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v85, (uint64_t)v11, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v89 - 1) + 9) & 1, v81, v82, v83, v84);
      *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v50;
      *(_OWORD *)v41 = v114;
      *(_DWORD *)(a1 + 7312) = 0;
      v100 = v111;
      *(_DWORD *)(a1 + 7316) = v112;
      *(_OWORD *)(v41 + 24) = v115;
      *(_QWORD *)(v41 + 40) = v116;
      v101 = v113;
      v113[5].i8[4] = v100;
      v101[5].i8[5] = v45;
      v102 = *(WTF::StringImpl **)(a1 + 7360);
      *(_QWORD *)(a1 + 7360) = 0;
      if (v102)
      {
        if (*(_DWORD *)v102 == 2)
        {
          WTF::StringImpl::~StringImpl(v102, v93, v94, v95, v96, v97, v98, v99);
          WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
        }
        else
        {
          *(_DWORD *)v102 -= 2;
        }
      }
      v10 = v113;
      break;
    case 541:
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "'class' declaration is not directly within a block statement");
      return 0;
  }
  if ((unint64_t)&v111 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v10[6].i8[4] = 1;
    }
    goto LABEL_29;
  }
  LODWORD(v115) = 0;
  *((_QWORD *)&v115 + 1) = *(_QWORD *)(a1 + 7496);
  v116 = a1;
  *(_QWORD *)(a1 + 7496) = &v115;
  v13 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v115);
  *(_QWORD *)(v116 + 7496) = *((_QWORD *)&v115 + 1);
  v18 = *(_DWORD *)(a1 + 7368);
  if (!v13)
  {
    if (v18 == 20 || (v18 & 0x100000) != 0)
      goto LABEL_43;
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[24]>(a1);
LABEL_29:
    if (*v11 != 20 && (*v11 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse expression statement");
      return 0;
    }
LABEL_33:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return 0;
  }
  if (v18 != 6)
    goto LABEL_6;
  v26 = *(_DWORD *)(a1 + 7400);
  v27 = *(_DWORD *)(a1 + 7412);
  v28 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v26;
  *(_DWORD *)(a1 + 7448) = v27;
  *(_DWORD *)(a1 + 7452) = v28;
  v29 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v29 + 4) = v26;
  v30 = *(_DWORD *)(a1 + 12);
  if (!v30)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED2CB4);
  }
  v31 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v30 - 1) + 9) & 1;
  *(_BYTE *)(v29 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v29, (uint64_t)v11, 0, v31, v14, v15, v16, v17);
  *v10 = vadd_s32(*v10, (int32x2_t)0x100000001);
  LODWORD(v115) = 0;
  *((_QWORD *)&v115 + 1) = *(_QWORD *)(a1 + 7496);
  v116 = a1;
  *(_QWORD *)(a1 + 7496) = &v115;
  v32 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v115);
  *(_QWORD *)(v116 + 7496) = *((_QWORD *)&v115 + 1);
  v18 = *(_DWORD *)(a1 + 7368);
  if (!v32)
  {
LABEL_39:
    if (v18 != 20 && (v18 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse expression in a comma expression");
      goto LABEL_29;
    }
LABEL_43:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    goto LABEL_29;
  }
  while (v18 == 6)
  {
    v33 = *(_DWORD *)(a1 + 7400);
    v34 = *(_DWORD *)(a1 + 7412);
    v35 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v33;
    *(_DWORD *)(a1 + 7448) = v34;
    *(_DWORD *)(a1 + 7452) = v35;
    v36 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v36 + 4) = v33;
    v37 = *(_DWORD *)(a1 + 12);
    if (!v37)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED2CBCLL);
    }
    v38 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v37 - 1) + 9) & 1;
    *(_BYTE *)(v36 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v36, (uint64_t)v11, 2, v38, v14, v15, v16, v17);
    LODWORD(v115) = 0;
    *((_QWORD *)&v115 + 1) = *(_QWORD *)(a1 + 7496);
    v116 = a1;
    *(_QWORD *)(a1 + 7496) = &v115;
    v39 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v115);
    *(_QWORD *)(v116 + 7496) = *((_QWORD *)&v115 + 1);
    v18 = *(_DWORD *)(a1 + 7368);
    if (!v39)
      goto LABEL_39;
  }
LABEL_6:
  if (v18 != 17)
  {
    result = 43;
    if (v18 == 1 || v18 == 20 || *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
      return result;
    goto LABEL_33;
  }
  v19 = *(_DWORD *)(a1 + 7400);
  v20 = *(_DWORD *)(a1 + 7412);
  v21 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v19;
  *(_DWORD *)(a1 + 7448) = v20;
  *(_DWORD *)(a1 + 7452) = v21;
  v22 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v22 + 4) = v19;
  v23 = *(_DWORD *)(a1 + 12);
  if (!v23)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED2C90);
  }
  v24 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v23 - 1) + 9) & 1;
  *(_BYTE *)(v22 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v22, (uint64_t)v11, 0, v24, v14, v15, v16, v17);
  return 43;
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[35],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, uint64_t *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v40);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v40[5]((WTF::StringPrintStream *)&v40);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v5, "%s", "Attempted to redeclare the label '");
    v12 = *a2;
    if (*a2)
    {
      v13 = *(char **)(v12 + 8);
      v14 = *(unsigned int *)(v12 + 4);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v13, v14, (uint64_t)&v37, v11);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v13, v14, 0, v6, v7, v8, v9, v10, (uint64_t)&v37);
      WTF::printExpectedCStringHelper(v5, "StringImpl*", &v37);
      if (v38 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    }
    else
    {
      WTF::PrintStream::printf(v5, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf(v5, "%s", "'");
    WTF::PrintStream::printf(v5, "%s", ".");
    v40[5]((WTF::StringPrintStream *)&v40);
    WTF::String::fromUTF8WithLatin1Fallback(v41, v42, &v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v37, v15, v16, v17, v18, v19, v20);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v21, v22, v23, v24, v25, v26, v27);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, int a2, const char *a3, uint64_t *a4)
{
  void (**v7)(WTF::StringPrintStream *__hidden);
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  int v42;
  char v43;
  void (**v44)(WTF::StringPrintStream *__hidden);
  WTF *v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v7 = off_1E3572250;
    v44 = off_1E3572250;
    v45 = (WTF *)v47;
    v46 = xmmword_199122F80;
    v47[0] = 0;
    if (a2)
    {
      JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v44);
      v8 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v44[4])(&v44);
      WTF::PrintStream::printf(v8, "%s", ". ");
      v44[5]((WTF::StringPrintStream *)&v44);
      v7 = v44;
    }
    v9 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v7[4])(&v44);
    WTF::PrintStream::printf(v9, "%s", a3);
    v16 = *a4;
    if (*a4)
    {
      v17 = *(char **)(v16 + 8);
      v18 = *(unsigned int *)(v16 + 4);
      if ((*(_BYTE *)(v16 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v17, v18, (uint64_t)&v41, v15);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v17, v18, 0, v10, v11, v12, v13, v14, (uint64_t)&v41);
      WTF::printExpectedCStringHelper(v9, "StringImpl*", &v41);
      if (v42 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v42])(&v43, &v41);
    }
    else
    {
      WTF::PrintStream::printf(v9, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf(v9, "%s", "'");
    WTF::PrintStream::printf(v9, "%s", ".");
    v44[5]((WTF::StringPrintStream *)&v44);
    WTF::String::fromUTF8WithLatin1Fallback(v45, v46, &v41);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v41, v19, v20, v21, v22, v23, v24);
    v32 = v41;
    v41 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
        WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
      }
      else
      {
        *(_DWORD *)v32 -= 2;
      }
    }
    if (v45 != (WTF *)v47)
      WTF::fastFree((unint64_t)v45, v25, v26, v27, v28, v29, v30, v31);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[23]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Cannot parse statement");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseClass<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, int a3, WTF ***a4)
{
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int i;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  WTF::StringImpl **v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  WTF::StringImpl **NumericIdentifier;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  _BOOL4 v89;
  int v90;
  BOOL v91;
  unsigned int v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  int v96;
  uint64_t v97;
  _BOOL4 v98;
  int v99;
  int v100;
  char v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unsigned int v106;
  char v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  WTF *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  WTF *v144;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  WTF *v161;
  WTF::AtomStringImpl *v162;
  uint64_t v163;
  BOOL v164;
  WTF::StringImpl *v165;
  char v166;
  WTF *v167;
  int v168;
  uint64_t v169;
  _DWORD *v170;
  unint64_t v171;
  unsigned int v172;
  _QWORD *v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  WTF::AtomStringImpl *v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t j;
  unsigned int *v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  const char *v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  WTF::StringImpl *v206;
  uint64_t *v207;
  WTF::AtomStringImpl *v208;
  uint64_t v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  int v212;
  int v213;
  int v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  unint64_t v225;
  _DWORD *v226;
  unsigned int v227;
  _QWORD *v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  char v236;
  uint64_t *v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unsigned int *v242;
  unsigned int v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  int v255;
  int v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  WTF::AtomStringImpl *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  WTF::AtomStringImpl *v279;
  uint64_t v280;
  int v281;
  int v282;
  int v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  unint64_t v289;
  void *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  void *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v306;
  int v307;
  int v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  uint64_t v313;
  int v314;
  int v315;
  int v316;
  int v317;
  uint64_t v318;
  unint64_t v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  int v341;
  int v342;
  int v343;
  WTF::AtomStringImpl *v344;
  uint64_t v345;
  WTF::StringImpl *v346;
  unint64_t *v347;
  const WTF::StringImpl *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int v354;
  int v355;
  int v356;
  int v357;
  unint64_t *v358;
  WTF::StringImpl **v359;
  int v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  uint64_t v366;
  int v367;
  uint64_t v368;
  int v369;
  int v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  uint64_t v376;
  int v377;
  uint64_t v378;
  int v379;
  int v380;
  int v381;
  int v382;
  uint64_t v383;
  int v384;
  uint64_t v385;
  unsigned int v386;
  uint64_t v387;
  unint64_t *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  WTF::AtomStringImpl *PrivateIdentifier;
  unint64_t *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unsigned int v402;
  int v403;
  uint64_t v404;
  void *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  unint64_t v416;
  void *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  WTF *v424;
  void *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  WTF *v432;
  unint64_t v433;
  void *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  const char *v441;
  WTF *v442;
  void *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  WTF *v450;
  WTF *v451;
  uint64_t v452;
  const char *v453;
  _QWORD *v454;
  uint64_t v455;
  void *v456;
  uint64_t v457;
  uint64_t v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  void *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  WTF::AtomStringImpl *v469;
  uint64_t v470;
  unint64_t *v471;
  unint64_t v472;
  void *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  const char *v480;
  const char *v481;
  const char *v482;
  const char *v483;
  _QWORD *v484;
  int v485;
  uint64_t v486;
  unsigned int v487;
  unsigned int v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  unsigned int v493;
  _BYTE *v494;
  WTF ***v495;
  WTF::StringImpl *v497[2];
  WTF *v498;
  int v499;
  const char *v500;
  WTF *v501[10];

  v7 = *(_DWORD *)(a1 + 7408);
  *((_DWORD *)a4 + 4) = *(_DWORD *)(a1 + 7400);
  *((_DWORD *)a4 + 5) = v7 - *(_DWORD *)(a1 + 7404);
  *((_DWORD *)a4 + 2) = v7;
  v8 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  v14 = v9;
  if (*(_DWORD *)(v8 + 12) <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED535CLL);
  }
  v15 = v8;
  v16 = v9;
  *(_DWORD *)(*(_QWORD *)v8 + 720 * v9 + 10) |= 0x8080u;
  if (*(_DWORD *)(v8 + 12) <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED5364);
  }
  *(_DWORD *)(*(_QWORD *)v8 + 720 * v9 + 10) &= ~0x40u;
  if (*(_DWORD *)(v8 + 12) <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED536CLL);
  }
  *(_BYTE *)(*(_QWORD *)v8 + 720 * v9 + 9) |= 1u;
  v17 = *(_DWORD *)(a1 + 7400);
  v18 = *(_DWORD *)(a1 + 7412);
  v19 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v17;
  *(_DWORD *)(a1 + 7448) = v18;
  *(_DWORD *)(a1 + 7452) = v19;
  v20 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v20 + 4) = v17;
  v21 = *(_DWORD *)(a1 + 12);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED5374);
  }
  v495 = a4;
  v22 = (unsigned int *)(a1 + 7368);
  v23 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v21 - 1) + 9) & 1;
  *(_BYTE *)(v20 + 56) = 0;
  v24 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v20, a1 + 7368, 0, v23, v10, v11, v12, v13);
  *(_DWORD *)(a1 + 7368) = v24;
  v30 = *(_DWORD *)(a1 + 12);
  if (!v30)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED537CLL);
  }
  v31 = (char *)(a1 + 7344);
  v32 = v30 - 1;
  v33 = *(_QWORD *)a1;
  v34 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v30 - 1) + 10);
  v494 = (_BYTE *)(a1 + 7344);
  if ((v34 & 0x100000) == 0)
  {
    if (v24 == 12)
      goto LABEL_8;
    if (v24 == 546)
    {
LABEL_276:
      if ((v34 & 0x102000) != 0 || !*v31 || *(_DWORD *)(a1 + 7480) == 1)
        goto LABEL_110;
LABEL_8:
      *a4 = *(WTF ***)(a1 + 7376);
      v35 = *(_DWORD *)(a1 + 7400);
      v36 = *(_DWORD *)(a1 + 7412);
      v37 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v35;
      *(_DWORD *)(a1 + 7448) = v36;
      *(_DWORD *)(a1 + 7452) = v37;
      v38 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v38 + 4) = v35;
      v39 = *(_BYTE *)(v33 + 720 * v32 + 9) & 1;
      *(_BYTE *)(v38 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v38, a1 + 7368, 0, v39, v26, v27, v28, v29);
      if (*(_DWORD *)(v15 + 12) <= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED5384);
      }
      v45 = JSC::Scope::declareLexicalVariable(*(_QWORD *)v15 + 720 * v16, (WTF::AtomStringImpl *)*a4, 1, v40, v41, v42, v43, v44);
      v24 = *v22;
      if ((v45 & 1) != 0)
      {
        if (v24 != 20 && (v24 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v501[0] = **a4;
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[28]>(a1, (uint64_t *)v501);
          }
          goto LABEL_354;
        }
        goto LABEL_353;
      }
      goto LABEL_10;
    }
    if (v24 != 1048592)
      goto LABEL_110;
LABEL_275:
    if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      goto LABEL_353;
    goto LABEL_276;
  }
  if (v24 == 12)
    goto LABEL_8;
  if (v24 == 546)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a class name within static block");
    goto LABEL_354;
  }
  v31 = (char *)(a1 + 7344);
  if (v24 == 1048592)
    goto LABEL_275;
LABEL_110:
  if (a3 == 1)
  {
    if (!v24)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Class statements must have a name");
      goto LABEL_354;
    }
    v166 = *(_BYTE *)(v33 + 720 * v32 + 9);
    if ((v166 & 1) != 0 && v24 == 532)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        v501[0] = (WTF *)JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v501[1] = v167;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[11],char const(&)[16]>(a1, (uint64_t)v501);
      }
      goto LABEL_354;
    }
    if (v24 - 531 <= 1)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        v501[0] = (WTF *)JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v501[1] = v424;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[11]>(a1, (uint64_t)v501);
      }
      goto LABEL_354;
    }
    if ((v24 & 0x200) != 0)
    {
      if (v24 - 544 >= 3)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v501[0] = (WTF *)JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
          v501[1] = v442;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const(&)[11]>(a1, (uint64_t)v501);
        }
        goto LABEL_354;
      }
      if (v24 == 546)
      {
        if ((v34 & 0x102000) == 0 && *v494 && *(_DWORD *)(a1 + 7480) != 1)
          goto LABEL_353;
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_354;
        v501[0] = (WTF *)JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
        v453 = "Cannot use 'await' as a ";
      }
      else
      {
        if (v24 == 544)
        {
          if ((v166 & 1) != 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              v501[0] = (WTF *)"in strict mode";
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const(&)[11],char const(&)[2],char const*>(a1, (const char **)v501);
            }
            goto LABEL_354;
          }
          goto LABEL_353;
        }
        if ((v166 & 1) == 0 && (v34 & 0x200) == 0)
          goto LABEL_353;
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_354;
        v501[0] = (WTF *)JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierYieldReason(a1);
        v453 = "Cannot use 'yield' as a ";
      }
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const(&)[11],char const(&)[2],char const*>(a1, v453, (const char **)v501);
      goto LABEL_354;
    }
LABEL_353:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    goto LABEL_354;
  }
LABEL_10:
  if (v24 == 542)
  {
    v46 = *(_DWORD *)(a1 + 7400);
    v47 = *(_DWORD *)(a1 + 7412);
    v48 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v46;
    *(_DWORD *)(a1 + 7448) = v47;
    *(_DWORD *)(a1 + 7452) = v48;
    v49 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v49 + 4) = v46;
    v50 = *(_DWORD *)(a1 + 12);
    if (!v50)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED538CLL);
    }
    v51 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v50 - 1) + 9) & 1;
    *(_BYTE *)(v49 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v49, a1 + 7368, 0, v51, v26, v27, v28, v29);
    v52 = JSC::Parser<JSC::Lexer<char16_t>>::parseMemberExpression<JSC::SyntaxChecker>(a1, a2);
    v24 = *(_DWORD *)(a1 + 7368);
    if (v52)
    {
      v53 = 2;
      goto LABEL_14;
    }
    if (v24 != 20 && (v24 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the parent class name");
      goto LABEL_354;
    }
    goto LABEL_353;
  }
  v53 = 1;
LABEL_14:
  v493 = v53;
  if (v24)
  {
    if (v24 != 20 && (v24 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected opening '{' at the start of a class body");
      goto LABEL_354;
    }
    goto LABEL_353;
  }
  v54 = *(_DWORD *)(a1 + 7400);
  v55 = *(_DWORD *)(a1 + 7412);
  v56 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v54;
  *(_DWORD *)(a1 + 7448) = v55;
  *(_DWORD *)(a1 + 7452) = v56;
  v57 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v57 + 4) = v54;
  v58 = *(_DWORD *)(a1 + 12);
  if (!v58)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED5394);
  }
  v59 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v58 - 1) + 9) & 1;
  *(_BYTE *)(v57 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v57, a1 + 7368, 0, v59, v26, v27, v28, v29);
  v60 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  if (*(_DWORD *)(v60 + 12) <= v61)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED539CLL);
  }
  *(_DWORD *)(*(_QWORD *)v60 + 720 * v61 + 10) |= 0x8080u;
  if (*(_DWORD *)(v60 + 12) <= v61)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED53A4);
  }
  *(_DWORD *)(*(_QWORD *)v60 + 720 * v61 + 10) &= ~0x40u;
  v487 = v61;
  if (*(_DWORD *)(v60 + 12) <= v61)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED53ACLL);
  }
  v486 = 0;
  v492 = 0;
  v490 = 0;
  v491 = 0;
  v488 = v61;
  v489 = v60;
  v67 = *(_QWORD *)v60 + 720 * v61;
  *(_BYTE *)(v67 + 9) |= 1u;
  *(_DWORD *)(v67 + 10) |= 0x8000000u;
  while (1)
  {
    while (1)
    {
      for (i = *v22; ; *(_DWORD *)(a1 + 7368) = i)
      {
        if (i == 1)
        {
          v113 = *(_DWORD *)(a1 + 7412);
          *((_DWORD *)v495 + 3) = v113 - 1;
          v114 = *(_DWORD *)(a1 + 7400);
          v115 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v114;
          *(_DWORD *)(a1 + 7448) = v113;
          *(_DWORD *)(a1 + 7452) = v115;
          v116 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v116 + 4) = v114;
          v117 = *(_DWORD *)(a1 + 12);
          if (!v117)
          {
            __break(0xC471u);
            JUMPOUT(0x197ED5474);
          }
          v118 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v117 - 1) + 9) & 1;
          *(_BYTE *)(v116 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v116, a1 + 7368, 0, v118, v63, v64, v65, v66);
          if (((v491 | v490 | HIDWORD(v491) | HIDWORD(v490)) & 1) != 0)
          {
            JSC::Symbols::privateBrandPrivateName[0] += 2;
            v500 = (const char *)JSC::Symbols::privateBrandPrivateName;
            if (*(_DWORD *)(v489 + 12) <= v487)
            {
              __break(0xC471u);
              JUMPOUT(0x197ED547CLL);
            }
            JSC::Scope::declareLexicalVariable(*(_QWORD *)v489 + 720 * v488, (WTF::AtomStringImpl *)&v500, 1, v119, v120, v121, v122, v123);
            if (*(_DWORD *)(v489 + 12) <= v487)
            {
              __break(0xC471u);
              JUMPOUT(0x197ED5484);
            }
            JSC::Scope::useVariable(*(_QWORD *)v489 + 720 * v488, (uint64_t)JSC::Symbols::privateBrandPrivateName, 0);
            if (*(_DWORD *)(v489 + 12) <= v487)
            {
              __break(0xC471u);
              JUMPOUT(0x197ED548CLL);
            }
            v265 = *(_QWORD *)v489;
            v497[0] = (WTF::StringImpl *)JSC::Symbols::privateBrandPrivateName;
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v265 + 720 * v488 + 696), (uint64_t *)v497, v260, v261, v262, v263, v264, (uint64_t)v501);
            if (JSC::Symbols::privateBrandPrivateName[0] == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::privateBrandPrivateName, v266, v267, v268, v269, v270, v271, v272);
              WTF::fastFree(v319, v320, v321, v322, v323, v324, v325, v326);
            }
            else
            {
              JSC::Symbols::privateBrandPrivateName[0] -= 2;
            }
            JSC::Symbols::privateClassBrandPrivateName[0] += 2;
            v500 = (const char *)JSC::Symbols::privateClassBrandPrivateName;
            if (*(_DWORD *)(v489 + 12) <= v487)
            {
              __break(0xC471u);
              JUMPOUT(0x197ED5494);
            }
            JSC::Scope::declareLexicalVariable(*(_QWORD *)v489 + 720 * v488, (WTF::AtomStringImpl *)&v500, 1, v268, v269, v270, v271, v272);
            if (*(_DWORD *)(v489 + 12) <= v487)
            {
              __break(0xC471u);
              JUMPOUT(0x197ED549CLL);
            }
            JSC::Scope::useVariable(*(_QWORD *)v489 + 720 * v488, (uint64_t)JSC::Symbols::privateClassBrandPrivateName, 0);
            if (*(_DWORD *)(v489 + 12) <= v487)
            {
              __break(0xC471u);
              JUMPOUT(0x197ED54A4);
            }
            v278 = *(_QWORD *)v489;
            v497[0] = (WTF::StringImpl *)JSC::Symbols::privateClassBrandPrivateName;
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v278 + 720 * v488 + 696), (uint64_t *)v497, v273, v274, v275, v276, v277, (uint64_t)v501);
            if (JSC::Symbols::privateClassBrandPrivateName[0] == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::privateClassBrandPrivateName, v279, v280, v119, v120, v121, v122, v123);
              WTF::fastFree(v327, v328, v329, v330, v331, v332, v333, v334);
            }
            else
            {
              JSC::Symbols::privateClassBrandPrivateName[0] -= 2;
            }
          }
          JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v501, (uint64_t *)a1, 0, v119, v120, v121, v122, v123);
          JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v497, (uint64_t *)a1, 0, v124, v125, v126, v127, v128);
          v136 = v498;
          if (v498)
          {
            v498 = 0;
            v499 = 0;
            WTF::fastFree((unint64_t)v136, v129, v130, v131, v132, v133, v134, v135);
          }
          JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v497, (WTF::AtomStringImpl *)v129, v130, v131, v132, v133, v134, v135);
          v144 = v501[3];
          if (v501[3])
          {
            v501[3] = 0;
            LODWORD(v501[4]) = 0;
            WTF::fastFree((unint64_t)v144, v137, v138, v139, v140, v141, v142, v143);
          }
          JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v501, (WTF::AtomStringImpl *)v137, v138, v139, v140, v141, v142, v143);
          return 13;
        }
        if (i != 17)
          break;
        v380 = *(_DWORD *)(a1 + 7400);
        v381 = *(_DWORD *)(a1 + 7412);
        v382 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v380;
        *(_DWORD *)(a1 + 7448) = v381;
        *(_DWORD *)(a1 + 7452) = v382;
        v383 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v383 + 4) = v380;
        v384 = *(_DWORD *)(a1 + 12);
        if (!v384)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED5334);
        }
        v385 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v384 - 1) + 9) & 1;
        *(_BYTE *)(v383 + 56) = 0;
        i = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v383, a1 + 7368, 0, v385, v63, v64, v65, v66);
      }
      v69 = *(unsigned int *)(a1 + 7408);
      v70 = *(_QWORD *)(a1 + 7216);
      if (i == 532)
      {
        v73 = *(WTF::StringImpl ***)(v70 + 41952);
        if (**(WTF::StringImpl ***)(a1 + 7376) != v73[49])
        {
          v72 = 5;
          i = 532;
          v71 = 1;
          goto LABEL_28;
        }
        *(_OWORD *)v497 = *(_OWORD *)(a1 + 7296);
        v100 = *(_DWORD *)(a1 + 7316);
        v501[2] = *(WTF **)(a1 + 7336);
        *(_OWORD *)v501 = *(_OWORD *)(a1 + 7320);
        v101 = *v31;
        v102 = v31[1];
        v103 = *(unsigned int *)(a1 + 7404);
        v104 = *(_QWORD *)(a1 + 7288);
        v106 = *(_DWORD *)v104;
        v105 = *(_DWORD *)(v104 + 4);
        v107 = *(_BYTE *)(v104 + 56);
        v108 = *(_DWORD *)(a1 + 7400);
        v109 = *(_DWORD *)(a1 + 7412);
        *(_DWORD *)(a1 + 7444) = v108;
        *(_DWORD *)(a1 + 7448) = v109;
        *(_DWORD *)(a1 + 7452) = v103;
        *(_DWORD *)(v104 + 4) = v108;
        v110 = *(_DWORD *)(a1 + 12);
        if (!v110)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED546CLL);
        }
        v111 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v110 - 1) + 9) & 1;
        *(_BYTE *)(v104 + 56) = 0;
        i = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v104, a1 + 7368, 0, v111, v63, v64, v65, v66);
        *(_DWORD *)(a1 + 7368) = i;
        if (i > 0x15 || ((1 << i) & 0x220004) == 0)
        {
          v69 = *(unsigned int *)(a1 + 7408);
          v72 = i ? 5 : 20;
          v71 = 2;
          v31 = (char *)(a1 + 7344);
        }
        else
        {
          JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), (WTF::AtomStringImpl *)v69, v103, v62, v63, v64, v65, v66);
          v339 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)v339 = v106;
          *(_BYTE *)(v339 + 56) = v107;
          v340 = *(_DWORD *)(a1 + 7400);
          v341 = *(_DWORD *)(a1 + 7412);
          v342 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v340;
          *(_DWORD *)(a1 + 7448) = v341;
          *(_DWORD *)(a1 + 7452) = v342;
          *(_DWORD *)(v339 + 4) = v340;
          v343 = *(_DWORD *)(a1 + 12);
          if (!v343)
          {
            __break(0xC471u);
            JUMPOUT(0x197ED53BCLL);
          }
          i = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v339, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v343 - 1) + 9) & 1, v335, v336, v337, v338);
          *(_DWORD *)(a1 + 7368) = i;
          *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v105;
          *(_OWORD *)(a1 + 7296) = *(_OWORD *)v497;
          *(_DWORD *)(a1 + 7312) = 0;
          *(_DWORD *)(a1 + 7316) = v100;
          *(_OWORD *)(a1 + 7320) = *(_OWORD *)v501;
          *(WTF **)(a1 + 7336) = v501[2];
          v31 = (char *)(a1 + 7344);
          *v494 = v101;
          *(_BYTE *)(a1 + 7345) = v102;
          v346 = *(WTF::StringImpl **)(a1 + 7360);
          *(_QWORD *)(a1 + 7360) = 0;
          if (v346)
          {
            if (*(_DWORD *)v346 == 2)
            {
              WTF::StringImpl::~StringImpl(v346, v344, v345, v62, v63, v64, v65, v66);
              WTF::fastFree(v416, v417, v418, v419, v420, v421, v422, v423);
              i = *v22;
            }
            else
            {
              *(_DWORD *)v346 -= 2;
            }
            v71 = 1;
            v72 = 5;
          }
          else
          {
            v71 = 1;
            v72 = 5;
          }
        }
        v70 = *(_QWORD *)(a1 + 7216);
      }
      else
      {
        v71 = 1;
        v72 = 5;
      }
      v73 = *(WTF::StringImpl ***)(v70 + 41952);
      if (i == 191488)
      {
        v74 = *(_DWORD *)(a1 + 7400);
        v75 = *(_DWORD *)(a1 + 7412);
        v76 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v74;
        *(_DWORD *)(a1 + 7448) = v75;
        *(_DWORD *)(a1 + 7452) = v76;
        v77 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v77 + 4) = v74;
        v78 = *(_DWORD *)(a1 + 12);
        if (!v78)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED5354);
        }
        v79 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v78 - 1) + 9) & 1;
        *(_BYTE *)(v77 + 56) = 0;
        i = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v77, a1 + 7368, 0, v79, v63, v64, v65, v66);
        *(_DWORD *)(a1 + 7368) = i;
        v72 = 18;
      }
      while (1)
      {
LABEL_28:
        if (i != 12)
        {
          switch(i)
          {
            case 0u:
              if (v72 != 20)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse static block without 'static'");
                goto LABEL_384;
              }
              v89 = 0;
              v98 = 0;
              v99 = 0;
              v90 = 1025;
              v72 = 20;
              goto LABEL_154;
            case 1u:
            case 2u:
            case 3u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 0xCu:
              goto LABEL_219;
            case 4u:
              v363 = *(_DWORD *)(a1 + 7400);
              v364 = *(_DWORD *)(a1 + 7412);
              v365 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v363;
              *(_DWORD *)(a1 + 7448) = v364;
              *(_DWORD *)(a1 + 7452) = v365;
              v366 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v366 + 4) = v363;
              v367 = *(_DWORD *)(a1 + 12);
              if (!v367)
              {
                __break(0xC471u);
                JUMPOUT(0x197ED53E4);
              }
              v368 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v367 - 1) + 9) & 1;
              *(_BYTE *)(v366 + 56) = 0;
              v369 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v366, a1 + 7368, 0, v368, v63, v64, v65, v66);
              *(_DWORD *)(a1 + 7368) = v369;
              v370 = *(_DWORD *)(a1 + 12);
              if (!v370)
              {
                __break(0xC471u);
                JUMPOUT(0x197ED53ECLL);
              }
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v370 - 1) + 12) & 0x10) != 0
                && v369 == 12
                && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 880))
              {
                if (*(_QWORD *)(a1 + 7360))
                  goto LABEL_384;
                v441 = "Cannot use 'arguments' as an identifier in static block";
LABEL_362:
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, v441);
                goto LABEL_384;
              }
              v371 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1);
              v372 = *(_DWORD *)(a1 + 7368);
              if (v371)
              {
                if (v372 == 5)
                {
                  v99 = v371;
                  v373 = *(_DWORD *)(a1 + 7400);
                  v374 = *(_DWORD *)(a1 + 7412);
                  v375 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v373;
                  *(_DWORD *)(a1 + 7448) = v374;
                  *(_DWORD *)(a1 + 7452) = v375;
                  v376 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v376 + 4) = v373;
                  v377 = *(_DWORD *)(a1 + 12);
                  if (!v377)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197ED53DCLL);
                  }
                  v378 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v377 - 1) + 9) & 1;
                  *(_BYTE *)(v376 + 56) = 0;
                  v379 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v376, a1 + 7368, 0, v378, v63, v64, v65, v66);
                  v89 = 0;
                  v98 = 0;
                  *(_DWORD *)(a1 + 7368) = v379;
                  v90 = 9;
LABEL_154:
                  NumericIdentifier = v73;
                  goto LABEL_41;
                }
                if (v372 != 20 && (v372 & 0x100000) == 0)
                {
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[23]>(a1);
                  goto LABEL_384;
                }
LABEL_383:
                JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
                goto LABEL_384;
              }
              if (v372 == 20 || (v372 & 0x100000) != 0)
                goto LABEL_383;
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_384;
              v202 = "Cannot parse computed property name";
              v203 = a1;
              v204 = 1;
              goto LABEL_327;
            case 9u:
            case 0xAu:
              v347 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
              NumericIdentifier = (WTF::StringImpl **)JSC::IdentifierArena::makeNumericIdentifier((JSC::IdentifierArena *)v347, *(uint64_t ***)(a1 + 7216), *(double *)(a1 + 7376), v348, v349, v350, v351, v352, v353);
              v354 = *(_DWORD *)(a1 + 7400);
              v355 = *(_DWORD *)(a1 + 7412);
              v356 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v354;
              *(_DWORD *)(a1 + 7448) = v355;
              *(_DWORD *)(a1 + 7452) = v356;
              v284 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v284 + 4) = v354;
              v357 = *(_DWORD *)(a1 + 12);
              if (!v357)
              {
                __break(0xC471u);
                JUMPOUT(0x197ED53D4);
              }
              goto LABEL_269;
            case 0xBu:
              v358 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
              JSC::IdentifierArena::makeBigIntDecimalIdentifier((JSC::IdentifierArena *)v358, *(JSC::VM **)(a1 + 7216), *(const JSC::Identifier **)(a1 + 7376), v31[40]);
              if (v359)
              {
                NumericIdentifier = v359;
                v360 = *(_DWORD *)(a1 + 7400);
                v361 = *(_DWORD *)(a1 + 7412);
                v362 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v360;
                *(_DWORD *)(a1 + 7448) = v361;
                *(_DWORD *)(a1 + 7452) = v362;
                v284 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v284 + 4) = v360;
                v357 = *(_DWORD *)(a1 + 12);
                if (!v357)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197ED496CLL);
                }
LABEL_269:
                v286 = *(_QWORD *)a1 + 720 * (v357 - 1);
LABEL_222:
                v287 = *(_BYTE *)(v286 + 9) & 1;
                *(_BYTE *)(v284 + 56) = 0;
                v288 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v284, a1 + 7368, 0, v287, v63, v64, v65, v66);
                v89 = 0;
                v98 = 0;
                v99 = 0;
                *(_DWORD *)(a1 + 7368) = v288;
                goto LABEL_223;
              }
              if (*v22 == 20 || (*v22 & 0x100000) != 0)
                goto LABEL_383;
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_384;
              v202 = "Cannot parse big int property name";
              v203 = a1;
              v204 = 1;
              goto LABEL_327;
            case 0xDu:
              NumericIdentifier = *(WTF::StringImpl ***)(a1 + 7376);
              v146 = *(_DWORD *)(a1 + 7400);
              v147 = *(_DWORD *)(a1 + 7412);
              v148 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v146;
              *(_DWORD *)(a1 + 7448) = v147;
              *(_DWORD *)(a1 + 7452) = v148;
              v149 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v149 + 4) = v146;
              v150 = *(_DWORD *)(a1 + 12);
              if (!v150)
              {
                __break(0xC471u);
                JUMPOUT(0x197ED53CCLL);
              }
              v151 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v150 - 1) + 9) & 1;
              *(_BYTE *)(v149 + 56) = 0;
              v152 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v149, a1 + 7368, 0, v151, v63, v64, v65, v66);
              *(_DWORD *)(a1 + 7368) = v152;
              v159 = *(_DWORD *)(v489 + 12);
              if (v152 != 2)
              {
                if (v159 <= v487)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197ED53B4);
                }
                v205 = *(_QWORD *)v489;
                v206 = *NumericIdentifier;
                if (*NumericIdentifier)
                  *(_DWORD *)v206 += 2;
                v207 = (uint64_t *)(v205 + 720 * v488 + 144);
                v497[0] = v206;
                JSC::VariableEnvironment::getOrAddPrivateName((uint64_t)v207, v206, v153, v154, v155, v156, v157, v158);
                LOWORD(v500) = 1027;
                WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry&>(v207, v497, &v500, (uint64_t)v501);
                v210 = v497[0];
                v497[0] = 0;
                if (v210)
                {
                  if (*(_DWORD *)v210 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v210, v208, v209, v62, v63, v64, v65, v66);
                    WTF::fastFree(v297, v298, v299, v300, v301, v302, v303, v304);
                  }
                  else
                  {
                    *(_DWORD *)v210 -= 2;
                  }
                }
                if (LOBYTE(v501[2]))
                {
                  v89 = 0;
                  v98 = 0;
                  v99 = 0;
                  v90 = 65;
                  goto LABEL_41;
                }
                if (!*(_QWORD *)(a1 + 7360))
                {
                  v202 = "Cannot declare private field twice";
                  v203 = a1;
                  v204 = 0;
                  goto LABEL_327;
                }
                goto LABEL_384;
              }
              if (v159 <= v487)
              {
                __break(0xC471u);
                JUMPOUT(0x197ED53C4);
              }
              v160 = *(_QWORD *)v489 + 720 * v488 + 144;
              if ((_DWORD)v71 == 2)
              {
                if (JSC::VariableEnvironment::declareStaticPrivateMethod(v160, *NumericIdentifier))
                {
LABEL_106:
                  if (*NumericIdentifier != v73[350])
                  {
                    v89 = 0;
                    v98 = 0;
                    v99 = 0;
                    LODWORD(v491) = ((_DWORD)v71 != 2) | v491;
                    HIDWORD(v491) |= (_DWORD)v71 == 2;
                    v90 = 129;
                    goto LABEL_41;
                  }
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a private method named '#constructor'");
                  goto LABEL_384;
                }
              }
              else
              {
                v161 = *NumericIdentifier;
                if (*NumericIdentifier)
                  *(_DWORD *)v161 += 2;
                v501[0] = v161;
                v164 = JSC::VariableEnvironment::declarePrivateMethod(v160, v501, 0);
                v165 = v501[0];
                v501[0] = 0;
                if (v165)
                {
                  if (*(_DWORD *)v165 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v165, v162, v163, v62, v63, v64, v65, v66);
                    WTF::fastFree(v289, v290, v291, v292, v293, v294, v295, v296);
                  }
                  else
                  {
                    *(_DWORD *)v165 -= 2;
                  }
                }
                if (v164)
                  goto LABEL_106;
              }
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_384;
              v202 = "Cannot declare private method twice";
              v203 = a1;
              v204 = 0;
              goto LABEL_327;
            case 0xEu:
              goto LABEL_220;
            default:
              if (i == 1048592)
                break;
              if (i == 546)
              {
                NumericIdentifier = *(WTF::StringImpl ***)(a1 + 7376);
LABEL_30:
                v81 = v31[40];
                v82 = *(_DWORD *)(a1 + 7400);
                v83 = *(_DWORD *)(a1 + 7412);
                v84 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v82;
                *(_DWORD *)(a1 + 7448) = v83;
                *(_DWORD *)(a1 + 7452) = v84;
                v85 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v85 + 4) = v82;
                v86 = *(_DWORD *)(a1 + 12);
                if (!v86)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197ED534CLL);
                }
                v87 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v86 - 1) + 9) & 1;
                *(_BYTE *)(v85 + 56) = 0;
                v88 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v85, a1 + 7368, 0, v87, v63, v64, v65, v66);
                v89 = 0;
                *(_DWORD *)(a1 + 7368) = v88;
                v90 = 1;
                if (v72 != 5 || v81)
                {
                  v98 = 0;
                  v99 = 0;
                }
                else
                {
                  if ((v88 & 0x200) != 0 || ((v88 - 9) >= 6 ? (v91 = v88 == 4) : (v91 = 1), v91))
                  {
                    v99 = 0;
                    v98 = *NumericIdentifier == v73[172];
                    v89 = *NumericIdentifier == v73[287];
                  }
                  else
                  {
                    v89 = 0;
                    v98 = 0;
                    v99 = 0;
                  }
                  v72 = 5;
                }
                goto LABEL_41;
              }
LABEL_219:
              if ((i & 0x200) == 0)
                goto LABEL_383;
LABEL_220:
              NumericIdentifier = *(WTF::StringImpl ***)(a1 + 7376);
              v281 = *(_DWORD *)(a1 + 7400);
              v282 = *(_DWORD *)(a1 + 7412);
              v283 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v281;
              *(_DWORD *)(a1 + 7448) = v282;
              *(_DWORD *)(a1 + 7452) = v283;
              v284 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v284 + 4) = v281;
              v285 = *(_DWORD *)(a1 + 12);
              if (!v285)
              {
                __break(0xC471u);
                JUMPOUT(0x197ED53F4);
              }
              v286 = *(_QWORD *)a1 + 720 * (v285 - 1);
              goto LABEL_222;
          }
        }
        NumericIdentifier = *(WTF::StringImpl ***)(a1 + 7376);
        if (*NumericIdentifier != *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896))
          goto LABEL_30;
        if (v31[40] || ((1 << v72) & 0x40400) != 0)
          goto LABEL_30;
        v306 = *(_DWORD *)(a1 + 7400);
        v307 = *(_DWORD *)(a1 + 7412);
        v308 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v306;
        *(_DWORD *)(a1 + 7448) = v307;
        *(_DWORD *)(a1 + 7452) = v308;
        v309 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v309 + 4) = v306;
        v310 = *(_DWORD *)(a1 + 12);
        if (!v310)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED5344);
        }
        v311 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v310 - 1) + 9) & 1;
        *(_BYTE *)(v309 + 56) = 0;
        i = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v309, a1 + 7368, 0, v311, v63, v64, v65, v66);
        *(_DWORD *)(a1 + 7368) = i;
        if (i <= 0x15 && ((1 << i) & 0x260004) != 0)
          break;
        v313 = *(_QWORD *)(a1 + 7288);
        if (*(_BYTE *)(v313 + 56))
          break;
        v72 = 10;
        v31 = (char *)(a1 + 7344);
        if (i == 191488)
        {
          v314 = *(_DWORD *)(a1 + 7400);
          v315 = *(_DWORD *)(a1 + 7412);
          v316 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v314;
          *(_DWORD *)(a1 + 7448) = v315;
          *(_DWORD *)(a1 + 7452) = v316;
          *(_DWORD *)(v313 + 4) = v314;
          v317 = *(_DWORD *)(a1 + 12);
          if (!v317)
          {
            __break(0xC471u);
            JUMPOUT(0x197ED533CLL);
          }
          v318 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v317 - 1) + 9) & 1;
          *(_BYTE *)(v313 + 56) = 0;
          i = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v313, a1 + 7368, 0, v318, v63, v64, v65, v66);
          *(_DWORD *)(a1 + 7368) = i;
          v72 = 17;
          v31 = (char *)(a1 + 7344);
        }
      }
      v89 = 0;
      v98 = 0;
      v99 = 0;
      NumericIdentifier = (WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896);
LABEL_223:
      v90 = 1;
LABEL_41:
      v92 = *v22;
      if (!v98 && !v89)
        break;
      if (v92 == 13)
      {
        v386 = *(_DWORD *)(v489 + 12);
        if (v89)
        {
          if (v386 <= v487)
          {
            __break(0xC471u);
            JUMPOUT(0x197ED545CLL);
          }
          v387 = 0;
        }
        else
        {
          if (v386 <= v487)
          {
            __break(0xC471u);
            JUMPOUT(0x197ED5464);
          }
          v387 = 1;
        }
        v402 = JSC::Scope::declarePrivateAccessor(*(_QWORD *)v489 + 720 * v488, **(WTF::StringImpl ***)(a1 + 7376), v71, v387, v63, v64, v65, v66);
        if ((v402 & 2) != 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Declared private setter with an already used name");
          goto LABEL_384;
        }
        if ((_DWORD)v71 == 2)
        {
          if (v402 >= 4)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              if (v89)
                v482 = "setter";
              else
                v482 = "getter";
              if (v89)
                v483 = "getter";
              else
                v483 = "setter";
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],char const(&)[7],char const(&)[35],char const(&)[7],char const(&)[16]>(a1, v482, v483);
            }
            goto LABEL_384;
          }
          HIDWORD(v490) = 1;
        }
        else
        {
          if (v402 >= 4)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              if (v89)
                v480 = "setter";
              else
                v480 = "getter";
              if (v89)
                v481 = "getter";
              else
                v481 = "setter";
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[37],char const(&)[7],char const(&)[31],char const(&)[7],char const(&)[16]>(a1, v480, v481);
            }
            goto LABEL_384;
          }
          LODWORD(v490) = 1;
        }
        if (v89)
          v403 = 256;
        else
          v403 = 512;
        v97 = v90 | v403;
      }
      else
      {
        if (v98)
          v96 = 2;
        else
          v96 = 4;
        v97 = v90 & 0x4C8 | v96;
      }
      v31 = (char *)(a1 + 7344);
      if (!JSC::Parser<JSC::Lexer<char16_t>>::parseGetterSetter<JSC::SyntaxChecker>(a1, a2, v97, v69, v71, v64, v65, v66))
      {
        if (*v22 != 20 && (*v22 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse this method");
          goto LABEL_384;
        }
        goto LABEL_383;
      }
    }
    if (v92 == 2)
      break;
    v31 = (char *)(a1 + 7344);
    if (v72 == 5)
    {
      if (!NumericIdentifier)
        goto LABEL_171;
      v211 = *NumericIdentifier;
      if (*NumericIdentifier == v73[135])
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot declare class field named 'constructor'");
        goto LABEL_384;
      }
      if (v211 == v73[350])
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_384;
        v441 = "Cannot declare private class field named '#constructor'";
        goto LABEL_362;
      }
      if ((_DWORD)v71 == 2)
      {
        if (v211 == v73[270])
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_384;
          v202 = "Cannot declare a static field named 'prototype'";
          v203 = a1;
          v204 = 0;
LABEL_327:
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v203, v204, v202);
          goto LABEL_384;
        }
        if (v99)
          goto LABEL_317;
      }
      else
      {
LABEL_171:
        if (v99)
        {
          if ((_DWORD)v71 == 1)
          {
            v388 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
            PrivateIdentifier = (WTF::AtomStringImpl *)JSC::IdentifierArena::makePrivateIdentifier((uint64_t)v388, *(_QWORD *)(a1 + 7216), (WTF::StringImpl *)"instanceComputedName", (WTF::StringImpl *)0x15, v486);
            LODWORD(v486) = v486 + 1;
          }
          else
          {
LABEL_317:
            v395 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
            PrivateIdentifier = (WTF::AtomStringImpl *)JSC::IdentifierArena::makePrivateIdentifier((uint64_t)v395, *(_QWORD *)(a1 + 7216), (WTF::StringImpl *)"staticComputedName", (WTF::StringImpl *)0x13, SHIDWORD(v486));
            ++HIDWORD(v486);
          }
          if (*(_DWORD *)(v489 + 12) <= v487)
          {
            __break(0xC471u);
            JUMPOUT(0x197ED542CLL);
          }
          JSC::Scope::declareLexicalVariable(*(_QWORD *)v489 + 720 * v488, PrivateIdentifier, 1, v389, v390, v391, v392, v393);
          if (*(_DWORD *)(v489 + 12) <= v487)
          {
            __break(0xC471u);
            JUMPOUT(0x197ED5434);
          }
          JSC::Scope::useVariable(*(_QWORD *)v489 + 720 * v488, *(_QWORD *)PrivateIdentifier, 0);
          if (*(_DWORD *)(v489 + 12) <= v487)
          {
            __break(0xC471u);
            JUMPOUT(0x197ED543CLL);
          }
          v401 = *(_QWORD *)v489;
          v497[0] = *(WTF::StringImpl **)PrivateIdentifier;
          WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v401 + 720 * v488 + 696), (uint64_t *)v497, v396, v397, v398, v399, v400, (uint64_t)v501);
          v92 = *v22;
          v31 = (char *)(a1 + 7344);
        }
      }
      if (v92 == 21)
      {
        v212 = *(_DWORD *)(a1 + 7400);
        v213 = *(_DWORD *)(a1 + 7412);
        v214 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v212;
        *(_DWORD *)(a1 + 7448) = v213;
        *(_DWORD *)(a1 + 7452) = v214;
        v215 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v215 + 4) = v212;
        v216 = *(_DWORD *)(a1 + 12);
        if (!v216)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED544CLL);
        }
        v217 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v216 - 1) + 9) & 1;
        *(_BYTE *)(v215 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v215, a1 + 7368, 0, v217, v63, v64, v65, v66);
        v223 = *(_DWORD *)(a1 + 12);
        if (!v223)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED5454);
        }
        v224 = *(_QWORD *)a1 + 720 * (v223 - 1);
        v227 = *(_DWORD *)(v224 + 180);
        v226 = (_DWORD *)(v224 + 180);
        v225 = v227;
        v228 = v226 - 3;
        v501[0] = (WTF *)0x800000000;
        *(_QWORD *)&v229 = -1;
        *((_QWORD *)&v229 + 1) = -1;
        *(_OWORD *)&v501[1] = v229;
        *(_OWORD *)&v501[3] = v229;
        *(_OWORD *)&v501[5] = v229;
        *(_OWORD *)&v501[7] = v229;
        v230 = *v226;
        v231 = v489;
        if ((_DWORD)v230 == *(v226 - 1))
        {
          v404 = WTF::Vector<WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v226 - 3), (void *)(v230 + 1), (unint64_t)v501, v218, v219, v220, v221, v222);
          v412 = *v228 + 72 * *v226;
          *(_OWORD *)v412 = *(_OWORD *)v404;
          v414 = *(_OWORD *)(v404 + 32);
          v413 = *(_OWORD *)(v404 + 48);
          v415 = *(_OWORD *)(v404 + 16);
          *(_QWORD *)(v412 + 64) = *(_QWORD *)(v404 + 64);
          *(_OWORD *)(v412 + 32) = v414;
          *(_OWORD *)(v412 + 48) = v413;
          *(_OWORD *)(v412 + 16) = v415;
          *(_QWORD *)v404 = 0x800000000;
          *(_QWORD *)&v413 = -1;
          *((_QWORD *)&v413 + 1) = -1;
          *(_OWORD *)(v404 + 56) = v413;
          *(_OWORD *)(v404 + 40) = v413;
          *(_OWORD *)(v404 + 24) = v413;
          *(_OWORD *)(v404 + 8) = v413;
          v231 = v489;
          ++*v226;
          if (HIDWORD(v501[0]) != 8)
          {
            WTF::fastFree((unint64_t)v501[1], v405, v406, v407, v408, v409, v410, v411);
            v231 = v489;
          }
        }
        else
        {
          v232 = *v228 + 72 * v230;
          *(_OWORD *)v232 = *(_OWORD *)v501;
          v233 = *(_OWORD *)&v501[2];
          v234 = *(_OWORD *)&v501[4];
          v235 = *(_OWORD *)&v501[6];
          *(WTF **)(v232 + 64) = v501[8];
          *(_OWORD *)(v232 + 32) = v234;
          *(_OWORD *)(v232 + 48) = v235;
          *(_OWORD *)(v232 + 16) = v233;
          ++*v226;
        }
        v236 = v31[1];
        v31[1] = 1;
        if (*(_DWORD *)(v231 + 12) <= v487)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED541CLL);
        }
        *(_DWORD *)(*(_QWORD *)v231 + 720 * v488 + 20) = 0;
        LODWORD(v501[0]) = 0;
        v501[1] = *(WTF **)(a1 + 7496);
        v501[2] = (WTF *)a1;
        *(_QWORD *)(a1 + 7496) = v501;
        v237 = (uint64_t *)v231;
        v238 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, v501);
        *((WTF **)v501[2] + 937) = v501[1];
        if (*((_DWORD *)v237 + 3) <= v487)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED5424);
        }
        v239 = *v237;
        *(_DWORD *)(v239 + 720 * v488 + 20) = 1;
        if (!v238)
        {
          if (*v22 == 20 || (*v22 & 0x100000) != 0)
          {
            JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
          }
          else if (!*(_QWORD *)(a1 + 7360))
          {
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse initializer for class field");
          }
          v31[1] = v236;
          goto LABEL_384;
        }
        v240 = v239 + 720 * v488;
        v243 = *(_DWORD *)(v240 + 180);
        v242 = (unsigned int *)(v240 + 180);
        v241 = v243;
        if (v243 > v225)
        {
          v244 = (_QWORD *)(v239 + 720 * v488 + 168);
          do
          {
            v245 = *v244 + 72 * v225;
            v246 = *(unsigned int *)(v245 + 4);
            v247 = (_QWORD *)(v245 + 8);
            if ((_DWORD)v246 != 8)
              v247 = (_QWORD *)*v247;
            v248 = 0;
            while ((_DWORD)v246 != v248)
            {
              LODWORD(v249) = v248;
              v250 = v247[v248++];
              if (v250 != -1)
              {
                v249 = v249;
                goto LABEL_188;
              }
            }
            v249 = v246;
LABEL_188:
            if ((_DWORD)v246 != (_DWORD)v249)
            {
              v484 = v244;
              v251 = v249 | (v246 << 32);
              LODWORD(v252) = v249;
              do
              {
                LODWORD(v253) = v252;
                v497[0] = 0;
                v497[0] = (WTF::StringImpl *)v247[v251];
                WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v239 + 720 * v488 + 696), (uint64_t *)v497, v62, v63, v64, v65, v66, (uint64_t)v501);
                if (HIDWORD(v251) <= (v253 + 1))
                  v252 = (v253 + 1);
                else
                  v252 = HIDWORD(v251);
                while ((_DWORD)v252 - 1 != (_DWORD)v253)
                {
                  v253 = (v253 + 1);
                  if (v247[v253] != -1)
                  {
                    LODWORD(v252) = v253;
                    goto LABEL_198;
                  }
                }
                v253 = v252;
LABEL_198:
                v251 = v253 | v251 & 0xFFFFFFFF00000000;
              }
              while ((_DWORD)v246 != (_DWORD)v252);
              v241 = *v242;
              v31 = (char *)(a1 + 7344);
              v244 = v484;
            }
            ++v225;
          }
          while (v225 < v241);
        }
        v31[1] = v236;
        v92 = *v22;
      }
      if (v92 == 17)
      {
        v254 = *(_DWORD *)(a1 + 7400);
        v255 = *(_DWORD *)(a1 + 7412);
        v256 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v254;
        *(_DWORD *)(a1 + 7448) = v255;
        *(_DWORD *)(a1 + 7452) = v256;
        v257 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v257 + 4) = v254;
        v258 = *(_DWORD *)(a1 + 12);
        if (!v258)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED5444);
        }
        v259 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v258 - 1) + 9) & 1;
        *(_BYTE *)(v257 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v257, a1 + 7368, 0, v259, v63, v64, v65, v66);
      }
      else if (v92 != 1 && v92 != 20 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
      {
        if ((v92 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' following a class field");
          goto LABEL_384;
        }
        goto LABEL_383;
      }
    }
    else if (v72 == 20)
    {
      if (v92)
        goto LABEL_155;
      v168 = *(_DWORD *)(a1 + 12);
      if (!v168)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED5414);
      }
      v169 = *(_QWORD *)a1 + 720 * (v168 - 1);
      v172 = *(_DWORD *)(v169 + 180);
      v170 = (_DWORD *)(v169 + 180);
      v171 = v172;
      v173 = v170 - 3;
      v501[0] = (WTF *)0x800000000;
      *(_QWORD *)&v174 = -1;
      *((_QWORD *)&v174 + 1) = -1;
      *(_OWORD *)&v501[1] = v174;
      *(_OWORD *)&v501[3] = v174;
      *(_OWORD *)&v501[5] = v174;
      *(_OWORD *)&v501[7] = v174;
      v175 = *v170;
      if ((_DWORD)v175 == *(v170 - 1))
      {
        v455 = WTF::Vector<WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v170 - 3), (void *)(v175 + 1), (unint64_t)v501, v62, v63, v64, v65, v66);
        v458 = *v173 + 72 * *v170;
        *(_OWORD *)v458 = *(_OWORD *)v455;
        v460 = *(_OWORD *)(v455 + 32);
        v459 = *(_OWORD *)(v455 + 48);
        v461 = *(_OWORD *)(v455 + 16);
        *(_QWORD *)(v458 + 64) = *(_QWORD *)(v455 + 64);
        *(_OWORD *)(v458 + 32) = v460;
        *(_OWORD *)(v458 + 48) = v459;
        *(_OWORD *)(v458 + 16) = v461;
        *(_QWORD *)v455 = 0x800000000;
        *(_QWORD *)&v459 = -1;
        *((_QWORD *)&v459 + 1) = -1;
        *(_OWORD *)(v455 + 56) = v459;
        *(_OWORD *)(v455 + 40) = v459;
        *(_OWORD *)(v455 + 24) = v459;
        *(_OWORD *)(v455 + 8) = v459;
        ++*v170;
        if (HIDWORD(v501[0]) != 8)
          WTF::fastFree((unint64_t)v501[1], v456, v457, v62, v63, v64, v65, v66);
      }
      else
      {
        v176 = *v173 + 72 * v175;
        *(_OWORD *)v176 = *(_OWORD *)v501;
        v177 = *(_OWORD *)&v501[2];
        v178 = *(_OWORD *)&v501[4];
        v179 = *(_OWORD *)&v501[6];
        *(WTF **)(v176 + 64) = v501[8];
        *(_OWORD *)(v176 + 32) = v178;
        *(_OWORD *)(v176 + 48) = v179;
        *(_OWORD *)(v176 + 16) = v177;
        ++*v170;
      }
      v485 = *(_DWORD *)(a1 + 7456);
      *(_DWORD *)(a1 + 7456) = 0;
      if (!JSC::Parser<JSC::Lexer<char16_t>>::parseBlockStatement<JSC::SyntaxChecker>(a1, a2, 2, v62, v63, v64, v65, v66))
      {
        if (*v22 == 20 || (*v22 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse class static block");
        }
        *(_DWORD *)(a1 + 7456) = v485;
        goto LABEL_384;
      }
      v182 = JSC::Symbols::staticInitializerBlockPrivateName[0];
      JSC::Symbols::staticInitializerBlockPrivateName[0] += 2;
      if (v182)
      {
        JSC::Symbols::staticInitializerBlockPrivateName[0] = v182;
      }
      else
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::staticInitializerBlockPrivateName, v180, v181, v62, v63, v64, v65, v66);
        WTF::fastFree(v433, v434, v435, v436, v437, v438, v439, v440);
      }
      v183 = *(_QWORD *)(a1 + 7248);
      if (!v183)
      {
        v183 = WTF::fastMalloc((WTF *)0x818);
        *(_QWORD *)(v183 + 8) = 0;
        *(_QWORD *)(v183 + 16) = 0;
        *(_QWORD *)v183 = 0;
        WTF::SegmentedVector<JSC::Identifier,64ul>::clear((unint64_t *)v183, v462, v463, v464, v465, v466, v467, v468);
        bzero((void *)(v183 + 24), 0x800uLL);
        v471 = *(unint64_t **)(a1 + 7248);
        *(_QWORD *)(a1 + 7248) = v183;
        if (v471)
        {
          WTF::SegmentedVector<JSC::Identifier,64ul>::~SegmentedVector(v471, v469, v470, v62, v63, v64, v65, v66);
          WTF::fastFree(v472, v473, v474, v475, v476, v477, v478, v479);
          v183 = *(_QWORD *)(a1 + 7248);
        }
      }
      JSC::Symbols::staticInitializerBlockPrivateName[0] += 2;
      v184 = *(_QWORD *)v183;
      v185 = *(_QWORD *)v183 + 1;
      *(_QWORD *)v183 = v185;
      v186 = v184 >> 6;
      v187 = *(unsigned int *)(v183 + 20);
      if (v184 >> 6 >= v187)
      {
        v451 = (WTF *)WTF::fastMalloc((WTF *)0x200);
        v501[0] = v451;
        v452 = *(unsigned int *)(v183 + 20);
        if ((_DWORD)v452 == *(_DWORD *)(v183 + 16))
        {
          v454 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v183 + 8, v452 + 1, (unint64_t)v501);
          v452 = *(unsigned int *)(v183 + 20);
          *(_QWORD *)(*(_QWORD *)(v183 + 8) + 8 * v452) = *v454;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v183 + 8) + 8 * v452) = v451;
        }
        v187 = (v452 + 1);
        *(_DWORD *)(v183 + 20) = v187;
        v185 = *(_QWORD *)v183;
        v184 = *(_QWORD *)v183 - 1;
        v186 = v184 >> 6;
      }
      if (v186 >= v187)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED53FCLL);
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183 + 8) + 8 * v186) + 8 * (v184 & 0x3F)) = JSC::Symbols::staticInitializerBlockPrivateName;
      if (v187 <= (unint64_t)(v185 - 1) >> 6)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED5404);
      }
      if (*(_DWORD *)(v489 + 12) <= v487)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED540CLL);
      }
      v188 = *(_QWORD *)v489;
      v189 = *(_QWORD *)v489 + 720 * v488;
      v192 = *(_DWORD *)(v189 + 180);
      v191 = (unsigned int *)(v189 + 180);
      for (j = v192; v171 < j; ++v171)
      {
        v193 = *(_QWORD *)(v188 + 720 * v488 + 168) + 72 * v171;
        v194 = *(unsigned int *)(v193 + 4);
        v195 = (_QWORD *)(v193 + 8);
        if ((_DWORD)v194 != 8)
          v195 = (_QWORD *)*v195;
        v196 = 0;
        while ((_DWORD)v194 != v196)
        {
          LODWORD(v197) = v196;
          v198 = v195[v196++];
          if (v198 != -1)
          {
            v197 = v197;
            goto LABEL_137;
          }
        }
        v197 = v194;
LABEL_137:
        if ((_DWORD)v194 != (_DWORD)v197)
        {
          v199 = v197 | (v194 << 32);
          LODWORD(v200) = v197;
          do
          {
            LODWORD(v201) = v200;
            v497[0] = 0;
            v497[0] = (WTF::StringImpl *)v195[v199];
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v188 + 720 * v488 + 696), (uint64_t *)v497, v62, v63, v64, v65, v66, (uint64_t)v501);
            if (HIDWORD(v199) <= (v201 + 1))
              v200 = (v201 + 1);
            else
              v200 = HIDWORD(v199);
            while ((_DWORD)v200 - 1 != (_DWORD)v201)
            {
              v201 = (v201 + 1);
              if (v195[v201] != -1)
              {
                LODWORD(v200) = v201;
                goto LABEL_147;
              }
            }
            v201 = v200;
LABEL_147:
            v199 = v201 | v199 & 0xFFFFFFFF00000000;
          }
          while ((_DWORD)v194 != (_DWORD)v200);
          j = *v191;
        }
      }
      *(_DWORD *)(a1 + 7456) = v485;
      v31 = (char *)(a1 + 7344);
    }
    else
    {
LABEL_45:
      memset(v501, 0, 40);
      if ((_DWORD)v71 == 1)
      {
        v93 = *NumericIdentifier == v73[135];
        if (v72 != 5 && *NumericIdentifier == v73[135])
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v497[0] = (WTF::StringImpl *)JSC::stringArticleForFunctionMode(v72);
            v500 = JSC::stringForFunctionMode();
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],char const*,char const*,char const(&)[21]>(a1, (const char **)v497, &v500);
          }
          goto LABEL_384;
        }
        if (*NumericIdentifier == v73[135])
          v94 = v493;
        else
          v94 = 0;
        if (*NumericIdentifier == v73[135])
          NumericIdentifier = *v495;
      }
      else
      {
        v94 = 0;
        v93 = 0;
      }
      v501[0] = (WTF *)NumericIdentifier;
      v95 = v31[130];
      v31[130] = v72;
      if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, a2, 2, 0, v94, 0, v69, v501, 2) & 1) == 0)
      {
        if (*v22 == 20 || (*v22 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse this method");
        }
        goto LABEL_254;
      }
      if (v93)
      {
        if (v492)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot declare multiple constructors in a single class");
          goto LABEL_254;
        }
        v31[130] = v95;
        v492 = 12;
      }
      else
      {
        if ((_DWORD)v71 == 2 && v501[0] && *(WTF::StringImpl **)v501[0] == v73[270])
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a static method named 'prototype'");
LABEL_254:
          v31[130] = v95;
          goto LABEL_384;
        }
        v31[130] = v95;
      }
    }
  }
  v31 = (char *)(a1 + 7344);
  if (v72 != 20)
    goto LABEL_45;
LABEL_155:
  if (v92 == 20 || (v92 & 0x100000) != 0)
    goto LABEL_383;
  if (!*(_QWORD *)(a1 + 7360))
  {
    v202 = "Expected block statement for class static block";
    v203 = a1;
    v204 = 1;
    goto LABEL_327;
  }
LABEL_384:
  JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v501, (uint64_t *)a1, 0, v62, v63, v64, v65, v66);
  v450 = v501[3];
  if (v501[3])
  {
    v501[3] = 0;
    LODWORD(v501[4]) = 0;
    WTF::fastFree((unint64_t)v450, v443, v444, v445, v446, v447, v448, v449);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v501, (WTF::AtomStringImpl *)v443, v444, v445, v446, v447, v448, v449);
LABEL_354:
  JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v501, (uint64_t *)a1, 0, v25, v26, v27, v28, v29);
  v432 = v501[3];
  if (v501[3])
  {
    v501[3] = 0;
    LODWORD(v501[4]) = 0;
    WTF::fastFree((unint64_t)v432, v425, v426, v427, v428, v429, v430, v431);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v501, (WTF::AtomStringImpl *)v425, v426, v427, v428, v429, v430, v431);
  return 0;
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[22]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Failed to parse class");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[28]>(uint64_t a1, uint64_t *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v40);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v40[5]((WTF::StringPrintStream *)&v40);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v5, "%s", "'");
    v12 = *a2;
    if (*a2)
    {
      v13 = *(char **)(v12 + 8);
      v14 = *(unsigned int *)(v12 + 4);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v13, v14, (uint64_t)&v37, v11);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v13, v14, 0, v6, v7, v8, v9, v10, (uint64_t)&v37);
      WTF::printExpectedCStringHelper(v5, "StringImpl*", &v37);
      if (v38 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    }
    else
    {
      WTF::PrintStream::printf(v5, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf(v5, "%s", "' is not a valid class name");
    WTF::PrintStream::printf(v5, "%s", ".");
    v40[5]((WTF::StringPrintStream *)&v40);
    WTF::String::fromUTF8WithLatin1Fallback(v41, v42, &v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v37, v15, v16, v17, v18, v19, v20);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v21, v22, v23, v24, v25, v26, v27);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[23]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "]");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "computed property name");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseGetterSetter<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v12;
  _DWORD *v13;
  int v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned __int8 v26;
  const char *v28;
  unint64_t *v29;
  uint64_t *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  const char *v49;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  _OWORD v58[2];
  uint64_t v59;

  v12 = (unsigned __int8 *)(a1 + 7384);
  v13 = (_DWORD *)(a1 + 7368);
  v14 = *(_DWORD *)(a1 + 7368);
  if ((v14 - 12) < 3)
    goto LABEL_2;
  if (v14 > 545)
  {
    if (v14 != 1048592)
      goto LABEL_28;
    v53 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
    v54 = **(_QWORD **)(a1 + 7376);
    if (v54 != v53[41])
      goto LABEL_124;
  }
  else
  {
    if (v14 == 545)
      goto LABEL_125;
    if (v14 != 544)
      goto LABEL_29;
  }
  v55 = *(_DWORD *)(a1 + 12);
  if (!v55)
    goto LABEL_138;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v55 - 1) + 9) & 1) == 0)
    goto LABEL_2;
  if (v14 != 1048592)
  {
LABEL_28:
    if (v14 != 546)
      goto LABEL_29;
LABEL_2:
    v15 = *(uint64_t **)(a1 + 7376);
    if ((_DWORD)a5 == 1)
    {
      v16 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v17 = *v15;
      if (*v15 == v16[135])
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a getter or setter named 'constructor'");
        return 0;
      }
    }
    else if ((_DWORD)a5 == 2)
    {
      v16 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v17 = *v15;
      if (*v15 == v16[270])
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a static method named 'prototype'");
        return 0;
      }
    }
    else
    {
      v16 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v17 = *v15;
    }
    if (v17 == v16[350])
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a private accessor named '#constructor'");
      return 0;
    }
    if (v14 == 13 && !(_DWORD)a5)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(a1, "Cannot declare a private setter or getter outside a class");
      return 0;
    }
    v18 = *(_DWORD *)(a1 + 7400);
    v19 = *(_DWORD *)(a1 + 7412);
    v20 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v18;
    *(_DWORD *)(a1 + 7448) = v19;
    *(_DWORD *)(a1 + 7452) = v20;
    v21 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v21 + 4) = v18;
    v22 = *(_DWORD *)(a1 + 12);
    if (!v22)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED619CLL);
    }
    goto LABEL_7;
  }
  v53 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
  v54 = **(_QWORD **)(a1 + 7376);
LABEL_124:
  if (v54 != v53[62])
    goto LABEL_129;
LABEL_125:
  v56 = *(_DWORD *)(a1 + 12);
  if (!v56)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED61BCLL);
  }
  v57 = v56 - 1;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v57 + 9) & 1) == 0 && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v57 + 11) & 2) == 0)
    goto LABEL_2;
  if (v14 == 1048592)
  {
    v53 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
    v54 = **(_QWORD **)(a1 + 7376);
LABEL_129:
    if (v54 != v53[16])
      goto LABEL_81;
    goto LABEL_2;
  }
LABEL_29:
  if ((v14 & 0x200) != 0)
    goto LABEL_2;
  if ((v14 - 9) < 2)
  {
    v34 = *(_DWORD *)(a1 + 7400);
    v35 = *(_DWORD *)(a1 + 7412);
    v36 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v34;
    *(_DWORD *)(a1 + 7448) = v35;
    *(_DWORD *)(a1 + 7452) = v36;
    v21 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v21 + 4) = v34;
    v22 = *(_DWORD *)(a1 + 12);
    if (!v22)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED61A4);
    }
    v15 = 0;
LABEL_7:
    v23 = 1;
    goto LABEL_8;
  }
  if (v14 != 4)
  {
    if (v14 != 11)
      goto LABEL_81;
    v29 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
    JSC::IdentifierArena::makeBigIntDecimalIdentifier((JSC::IdentifierArena *)v29, *(JSC::VM **)(a1 + 7216), *(const JSC::Identifier **)(a1 + 7376), *v12);
    if (!v30)
    {
      if (*v13 != 20 && (*v13 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse big int property name");
        return 0;
      }
      goto LABEL_81;
    }
    v15 = v30;
    v31 = *(_DWORD *)(a1 + 7400);
    v32 = *(_DWORD *)(a1 + 7412);
    v33 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v31;
    *(_DWORD *)(a1 + 7448) = v32;
    *(_DWORD *)(a1 + 7452) = v33;
    v21 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v21 + 4) = v31;
    v22 = *(_DWORD *)(a1 + 12);
    if (v22)
      goto LABEL_7;
LABEL_138:
    __break(0xC471u);
    JUMPOUT(0x197ED5CD8);
  }
  v37 = *(_DWORD *)(a1 + 7400);
  v38 = *(_DWORD *)(a1 + 7412);
  v39 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v37;
  *(_DWORD *)(a1 + 7448) = v38;
  *(_DWORD *)(a1 + 7452) = v39;
  v40 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v40 + 4) = v37;
  v41 = *(_DWORD *)(a1 + 12);
  if (!v41)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED61ACLL);
  }
  v42 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v41 - 1) + 9) & 1;
  *(_BYTE *)(v40 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v40, (uint64_t)v13, 0, v42, a5, a6, a7, a8);
  v43 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1);
  v44 = *(_DWORD *)(a1 + 7368);
  if (!v43)
  {
    if (v44 != 20 && (v44 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse computed property name");
      return 0;
    }
    goto LABEL_81;
  }
  if (v44 != 5)
  {
    if (v44 != 20 && (v44 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[23]>(a1);
      return 0;
    }
    goto LABEL_81;
  }
  v45 = *(_DWORD *)(a1 + 7400);
  v46 = *(_DWORD *)(a1 + 7412);
  v47 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v45;
  *(_DWORD *)(a1 + 7448) = v46;
  *(_DWORD *)(a1 + 7452) = v47;
  v21 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v21 + 4) = v45;
  v22 = *(_DWORD *)(a1 + 12);
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED61B4);
  }
  v15 = 0;
  v23 = 0;
LABEL_8:
  v24 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v22 - 1) + 9) & 1;
  *(_BYTE *)(v21 + 56) = 0;
  v25 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v21, (uint64_t)v13, 0, v24, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v25;
  v59 = 0;
  memset(v58, 0, sizeof(v58));
  if ((a3 & 2) != 0)
  {
    if (v25 == 2)
    {
      v26 = v12[90];
      v12[90] = 3;
      if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, a2, 2, 0, 0, 0, a4, v58, 2) & 1) != 0)
      {
LABEL_11:
        v12[90] = v26;
        goto LABEL_12;
      }
      if (*v13 != 20 && (*v13 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v28 = "Cannot parse getter definition";
          goto LABEL_62;
        }
        goto LABEL_97;
      }
      goto LABEL_96;
    }
    if (v25 == 20 || (v25 & 0x100000) != 0)
      goto LABEL_81;
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    v49 = "Expected a parameter list for getter definition";
LABEL_100:
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, v49);
    return 0;
  }
  if ((a3 & 4) != 0)
  {
    if (v25 == 2)
    {
      v26 = v12[90];
      v12[90] = 4;
      if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, a2, 2, 0, 0, 0, a4, v58, 2) & 1) != 0)goto LABEL_11;
      if (*v13 != 20 && (*v13 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v28 = "Cannot parse setter definition";
LABEL_62:
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, v28);
        }
LABEL_97:
        a3 = 0;
        v12[90] = v26;
        return a3;
      }
LABEL_96:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      goto LABEL_97;
    }
    if (v25 == 20 || (v25 & 0x100000) != 0)
      goto LABEL_81;
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    v49 = "Expected a parameter list for setter definition";
    goto LABEL_100;
  }
  if ((a3 & 0x100) != 0)
  {
    if (v25 == 2)
    {
      v26 = v12[90];
      v12[90] = 4;
      if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, a2, 2, 0, 0, 0, a4, v58, 2) & 1) != 0)goto LABEL_11;
      if (*v13 != 20 && (*v13 & 0x100000) == 0)
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_97;
        v28 = "Cannot parse private setter definition";
        goto LABEL_62;
      }
      goto LABEL_96;
    }
    if (v25 != 20 && (v25 & 0x100000) == 0)
    {
      if (*(_QWORD *)(a1 + 7360))
        return 0;
      v49 = "Expected a parameter list for private setter definition";
      goto LABEL_100;
    }
    goto LABEL_81;
  }
  if ((a3 & 0x200) != 0)
  {
    if (v25 == 2)
    {
      v26 = v12[90];
      v12[90] = 3;
      if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, a2, 2, 0, 0, 0, a4, v58, 2) & 1) != 0)goto LABEL_11;
      if (*v13 != 20 && (*v13 & 0x100000) == 0)
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_97;
        v28 = "Cannot parse private getter definition";
        goto LABEL_62;
      }
      goto LABEL_96;
    }
    if (v25 != 20 && (v25 & 0x100000) == 0)
    {
      if (*(_QWORD *)(a1 + 7360))
        return 0;
      v49 = "Expected a parameter list for private getter definition";
      goto LABEL_100;
    }
LABEL_81:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return 0;
  }
LABEL_12:
  if (!v15)
  {
    if (v23)
      return a3;
    else
      return a3 | 8;
  }
  return a3;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseBlockStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  uint64_t *v82;
  int v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  _BYTE v87[24];
  WTF *v88;
  uint64_t v89;

  if (*(int *)(a1 + 7456) <= 0 && a3 != 2)
  {
    v82 = 0;
    v83 = 0;
    goto LABEL_13;
  }
  v12 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  if (*(_DWORD *)(v12 + 12) <= v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED6600);
  }
  *(_DWORD *)(*(_QWORD *)v12 + 720 * v13 + 10) |= 0x8080u;
  if (a3)
  {
    if (a3 == 1)
    {
      if (*(_DWORD *)(v12 + 12) <= v13)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED6628);
      }
      *(_DWORD *)(*(_QWORD *)v12 + 720 * v13 + 10) |= 0x80000u;
      if (*(_DWORD *)(v12 + 12) > v13)
        goto LABEL_9;
    }
    else
    {
      if (a3 != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED6580);
      }
      if (*(_DWORD *)(v12 + 12) <= v13)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED6638);
      }
      *(_DWORD *)(*(_QWORD *)v12 + 720 * v13 + 10) = *(_DWORD *)(*(_QWORD *)v12 + 720 * v13 + 10) & 0xFE8F007F | 0x1708180;
      if (*(_DWORD *)(v12 + 12) > v13)
      {
        *(_DWORD *)(*(_QWORD *)v12 + 720 * v13 + 20) = 0;
        goto LABEL_10;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x197ED6400);
  }
  if (*(_DWORD *)(v12 + 12) <= v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED6620);
  }
LABEL_9:
  *(_DWORD *)(*(_QWORD *)v12 + 720 * v13 + 10) &= ~0x40u;
LABEL_10:
  if (*(_DWORD *)(v12 + 12) <= v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED6608);
  }
  if ((*(_BYTE *)(*(_QWORD *)v12 + 720 * v13 + 11) & 0x80) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED6500);
  }
  v83 = 1;
  v82 = (uint64_t *)a1;
LABEL_13:
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v14 = *(_DWORD *)(a1 + 7400);
  v15 = *(_DWORD *)(a1 + 7412);
  v16 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v14;
  *(_DWORD *)(a1 + 7448) = v15;
  *(_DWORD *)(a1 + 7452) = v16;
  v17 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v17 + 4) = v14;
  v18 = *(_DWORD *)(a1 + 12);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED6610);
  }
  v19 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v18 - 1) + 9) & 1;
  *(_BYTE *)(v17 + 56) = 0;
  v20 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v17, a1 + 7368, 0, v19, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v20;
  if (v20 == 1)
  {
    v63 = *(_DWORD *)(a1 + 7400);
    v64 = *(_DWORD *)(a1 + 7412);
    v65 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v63;
    *(_DWORD *)(a1 + 7448) = v64;
    *(_DWORD *)(a1 + 7452) = v65;
    v66 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v66 + 4) = v63;
    v67 = *(_DWORD *)(a1 + 12);
    if (!v67)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED6630);
    }
    v68 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v67 - 1) + 9) & 1;
    *(_BYTE *)(v66 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v66, a1 + 7368, 0, v68, v21, v22, v23, v24);
    if (v83)
    {
      if (!v82)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED647CLL);
      }
      goto LABEL_20;
    }
    goto LABEL_38;
  }
  v25 = JSC::Parser<JSC::Lexer<char16_t>>::parseSourceElements<JSC::SyntaxChecker>(a1, a2, 1);
  v33 = *(_DWORD *)(a1 + 7368);
  if (v25)
  {
    if (v33 == 1)
    {
      v34 = *(_DWORD *)(a1 + 7400);
      v35 = *(_DWORD *)(a1 + 7412);
      v36 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v34;
      *(_DWORD *)(a1 + 7448) = v35;
      *(_DWORD *)(a1 + 7452) = v36;
      v37 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v37 + 4) = v34;
      v38 = *(_DWORD *)(a1 + 12);
      if (!v38)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED6618);
      }
      v39 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v38 - 1) + 9) & 1;
      *(_BYTE *)(v37 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v37, a1 + 7368, 0, v39, v29, v30, v31, v32);
      if (v83)
      {
        if (!v82)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED6520);
        }
LABEL_20:
        JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v87, (uint64_t *)a1, 0, v28, v29, v30, v31, v32);
        JSC::VariableEnvironment::operator=((uint64_t)&v84, (uint64_t)v87, v40, v41, v42, v43, v44, v45);
        v46 = v88;
        v88 = 0;
        v89 = 0;
        JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v87, v47, v48, v49, v50, v51, v52, v53);
        if (v46)
          WTF::fastFree((unint64_t)v46, v54, v55, v56, v57, v58, v59, v60);
        JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v84, (WTF::AtomStringImpl *)v54, v55, v56, v57, v58, v59, v60);
        return 43;
      }
LABEL_38:
      v61 = 43;
      goto LABEL_39;
    }
    if (v33 != 20 && (v33 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a closing '}' at the end of a block statement");
      goto LABEL_53;
    }
  }
  else if (v33 != 20 && (v33 & 0x100000) == 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of the block statement");
    goto LABEL_53;
  }
  JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_53:
  v61 = 0;
LABEL_39:
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v84, v26, v27, v28, v29, v30, v31, v32);
  if (v82)
  {
    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v87, v82, 0, v69, v70, v71, v72, v73);
    v81 = v88;
    if (v88)
    {
      v88 = 0;
      LODWORD(v89) = 0;
      WTF::fastFree((unint64_t)v81, v74, v75, v76, v77, v78, v79, v80);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v87, (WTF::AtomStringImpl *)v74, v75, v76, v77, v78, v79, v80);
  }
  return v61;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionDeclarationStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, char a3)
{
  int v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  int v28;
  int v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  _BYTE v38[24];
  WTF *v39;
  int v40;

  v3 = *(_DWORD *)(a1 + 12);
  if (!v3)
    goto LABEL_28;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v3 - 1) + 9) & 1) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[89]>(a1);
    return 0;
  }
  if ((a3 & 1) == 0)
  {
    v28 = *(_DWORD *)(a1 + 7368);
    if (v28 == 20 || (v28 & 0x100000) != 0)
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[96]>(a1);
    }
    return 0;
  }
  v6 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  if (*(_DWORD *)(v6 + 12) <= v7)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED67F0);
  }
  *(_DWORD *)(*(_QWORD *)v6 + 720 * v7 + 10) |= 0x8080u;
  if (*(_DWORD *)(v6 + 12) <= v7)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x197ED67E8);
  }
  *(_DWORD *)(*(_QWORD *)v6 + 720 * v7 + 10) &= ~0x40u;
  v13 = JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionDeclaration<JSC::SyntaxChecker>(a1, a2, 1, v8, v9, v10, v11, v12);
  if (*(_QWORD *)(a1 + 7360))
  {
LABEL_20:
    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v38, (uint64_t *)a1, 0, v14, v15, v16, v17, v18);
    v37 = v39;
    if (v39)
    {
      v39 = 0;
      v40 = 0;
      WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v38, (WTF::AtomStringImpl *)v30, v31, v32, v33, v34, v35, v36);
    return 0;
  }
  if (!v13)
  {
    v29 = *(_DWORD *)(a1 + 7368);
    if (v29 == 20 || (v29 & 0x100000) != 0)
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    else
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected valid function statement after 'function' keyword");
    goto LABEL_20;
  }
  JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v38, (uint64_t *)a1, 0, v14, v15, v16, v17, v18);
  v26 = v39;
  if (v39)
  {
    v39 = 0;
    v40 = 0;
    WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v38, (WTF::AtomStringImpl *)v19, v20, v21, v22, v23, v24, v25);
  return 43;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseIfStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v49;
  unsigned int v50;
  char v51;
  unsigned int *v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  _OWORD *v91;
  int v92;
  uint64_t v93;
  int *v94;
  WTF *v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  int *v99;
  WTF *v100;
  int v101;
  int v103;
  WTF *v104;
  WTF *v105;
  WTF *v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  _DWORD *v110;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  __int128 v116;
  WTF *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  WTF *v121;
  uint64_t v122;
  WTF *v123;
  uint64_t v124;
  uint64_t v125;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    goto LABEL_140;
  }
  v15 = (int *)(a1 + 7368);
  v16 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v17 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v16, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v17;
  if (v17 != 2)
  {
    if (v17 != 20 && (v17 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[5],char const(&)[15]>(a1);
      return 0;
    }
    goto LABEL_46;
  }
  v22 = *(_DWORD *)(a1 + 7400);
  v23 = *(_DWORD *)(a1 + 7412);
  v24 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v22;
  *(_DWORD *)(a1 + 7448) = v23;
  *(_DWORD *)(a1 + 7452) = v24;
  v25 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v25 + 4) = v22;
  v26 = *(_DWORD *)(a1 + 12);
  if (!v26)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED70C4);
  }
  v27 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 9) & 1;
  *(_BYTE *)(v25 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v25, a1 + 7368, 0, v27, v18, v19, v20, v21);
  v28 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
  v33 = *(_DWORD *)(a1 + 7368);
  if (!v28)
  {
    if (v33 != 20 && (v33 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected an expression as the condition for an if statement");
      return 0;
    }
    goto LABEL_46;
  }
  if (v33 != 3)
  {
    if (v33 != 20 && (v33 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[15]>(a1, ")", "'if' condition");
      return 0;
    }
    goto LABEL_46;
  }
  v34 = *(_DWORD *)(a1 + 7400);
  v35 = *(_DWORD *)(a1 + 7412);
  v36 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v34;
  *(_DWORD *)(a1 + 7448) = v35;
  *(_DWORD *)(a1 + 7452) = v36;
  v37 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v37 + 4) = v34;
  v38 = *(_DWORD *)(a1 + 12);
  if (!v38)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED70CCLL);
  }
  v39 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v38 - 1) + 9) & 1;
  *(_BYTE *)(v37 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v37, a1 + 7368, 0, v39, v29, v30, v31, v32);
  v125 = 0;
  v40 = (_BYTE *)(a1 + 7505);
  *(_BYTE *)(a1 + 7505) = 1;
  v41 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::SyntaxChecker>(a1, a2, &v125);
  v46 = *(_DWORD *)(a1 + 7368);
  if (!v41)
  {
    if (v46 != 20 && (v46 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of an if block");
      return 0;
    }
LABEL_46:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return 0;
  }
  if (v46 != 538)
    return 43;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v123 = 0;
  v124 = 0;
  v52 = (unsigned int *)(a1 + 7400);
  v121 = 0;
  v122 = 0;
  v119 = 0;
  v120 = 0;
  v117 = 0;
  v118 = 0;
  while (1)
  {
    v116 = *(_OWORD *)v52;
    v53 = *(_DWORD *)(a1 + 7400);
    v54 = *(_DWORD *)(a1 + 7412);
    v55 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v53;
    *(_DWORD *)(a1 + 7448) = v54;
    *(_DWORD *)(a1 + 7452) = v55;
    v56 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v56 + 4) = v53;
    v57 = *(_DWORD *)(a1 + 12);
    if (!v57)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED70D4);
    }
    v58 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v57 - 1) + 9) & 1;
    *(_BYTE *)(v56 + 56) = 0;
    v59 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v56, a1 + 7368, 0, v58, v42, v43, v44, v45);
    *(_DWORD *)(a1 + 7368) = v59;
    if (v59 != 525)
    {
      v115 = 0;
      *v40 = 1;
      LODWORD(v112) = 0;
      v64 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::SyntaxChecker>(a1, a2, &v115);
      LODWORD(v112) = v64;
      if (v64)
      {
        if (HIDWORD(v118) == (_DWORD)v118)
        {
          v68 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v117, HIDWORD(v118) + 1, (unint64_t)&v112);
          *((_DWORD *)v117 + HIDWORD(v118)) = *v68;
        }
        else
        {
          *((_DWORD *)v117 + HIDWORD(v118)) = v64;
        }
        ++HIDWORD(v118);
        v69 = 54;
        v51 = 1;
        goto LABEL_18;
      }
      if (*v15 != 20 && (*v15 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v69 = 1;
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of an else block");
          goto LABEL_18;
        }
        goto LABEL_108;
      }
LABEL_107:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_108:
      v69 = 1;
      goto LABEL_18;
    }
    v70 = *(unsigned int *)(a1 + 7400);
    v71 = *(_DWORD *)(a1 + 7412);
    v72 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v70;
    *(_DWORD *)(a1 + 7448) = v71;
    *(_DWORD *)(a1 + 7452) = v72;
    v73 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v73 + 4) = v70;
    v74 = *(_DWORD *)(a1 + 12);
    if (!v74)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED70DCLL);
    }
    v75 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v74 - 1) + 9) & 1;
    *(_BYTE *)(v73 + 56) = 0;
    v76 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v73, a1 + 7368, 0, v75, v60, v61, v62, v63);
    *(_DWORD *)(a1 + 7368) = v76;
    if (v76 != 2)
      break;
    v77 = *(_DWORD *)(a1 + 7400);
    v78 = *(_DWORD *)(a1 + 7412);
    v79 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v77;
    *(_DWORD *)(a1 + 7448) = v78;
    *(_DWORD *)(a1 + 7452) = v79;
    v80 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v80 + 4) = v77;
    v81 = *(_DWORD *)(a1 + 12);
    if (!v81)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED70E4);
    }
    v82 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v81 - 1) + 9) & 1;
    *(_BYTE *)(v80 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v80, a1 + 7368, 0, v82, v42, v43, v44, v45);
    v114 = 0;
    v114 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
    if (!v114)
    {
      if (*v15 != 20 && (*v15 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v69 = 1;
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected an expression as the condition for an if statement");
          goto LABEL_18;
        }
        goto LABEL_108;
      }
      goto LABEL_107;
    }
    v83 = *v15;
    if (*v15 == 3)
    {
      v84 = v49;
      v85 = *v52;
      v86 = *(_DWORD *)(a1 + 7412);
      v87 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v85;
      *(_DWORD *)(a1 + 7448) = v86;
      *(_DWORD *)(a1 + 7452) = v87;
      v88 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v88 + 4) = v85;
      v89 = *(_DWORD *)(a1 + 12);
      if (!v89)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED70ECLL);
      }
      v90 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v89 - 1) + 9) & 1;
      *(_BYTE *)(v88 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v88, a1 + 7368, 0, v90, v42, v43, v44, v45);
      v115 = 0;
      *v40 = 1;
      v113 = 0;
      v113 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::SyntaxChecker>(a1, a2, &v115);
      if (!v113)
      {
        if (*v15 == 20 || (*v15 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          v69 = 1;
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of an if block");
LABEL_123:
          v49 = v84;
          goto LABEL_18;
        }
        v69 = 1;
        goto LABEL_123;
      }
      if (v50 == (_DWORD)v120)
      {
        v91 = (_OWORD *)WTF::Vector<JSC::JSTokenLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v119, v50 + 1, (unint64_t)&v116);
        v92 = HIDWORD(v120);
        v84 = v119;
        *(_OWORD *)(v119 + 16 * HIDWORD(v120)) = *v91;
      }
      else
      {
        *(_OWORD *)(v84 + 16 * v50) = v116;
        v92 = HIDWORD(v120);
      }
      v50 = v92 + 1;
      HIDWORD(v120) = v92 + 1;
      v93 = HIDWORD(v124);
      if (HIDWORD(v124) == (_DWORD)v124)
      {
        v94 = (int *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v123, HIDWORD(v124) + 1, (unint64_t)&v114);
        v93 = HIDWORD(v124);
        v95 = v123;
        v96 = *v94;
      }
      else
      {
        v95 = v123;
        v96 = v114;
      }
      *((_DWORD *)v95 + v93) = v96;
      ++HIDWORD(v124);
      v112 = v70 | (v85 << 32);
      if (HIDWORD(v122) == (_DWORD)v122)
      {
        v97 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v121, HIDWORD(v122) + 1, (unint64_t)&v112);
        *((_QWORD *)v121 + HIDWORD(v122)) = *v97;
      }
      else
      {
        *((_QWORD *)v121 + HIDWORD(v122)) = v70 | (v85 << 32);
      }
      v49 = v84;
      ++HIDWORD(v122);
      v98 = HIDWORD(v118);
      if (HIDWORD(v118) == (_DWORD)v118)
      {
        v99 = (int *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v117, HIDWORD(v118) + 1, (unint64_t)&v113);
        v69 = 0;
        v98 = HIDWORD(v118);
        v100 = v117;
        v101 = *v99;
      }
      else
      {
        v69 = 0;
        v100 = v117;
        v101 = v113;
      }
      *((_DWORD *)v100 + v98) = v101;
      ++HIDWORD(v118);
    }
    else
    {
      if (v83 == 20 || (v83 & 0x100000) != 0)
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      }
      else if (!*(_QWORD *)(a1 + 7360))
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[15]>(a1, ")", "'if' condition");
      }
      v69 = 1;
    }
LABEL_18:
    if (v69)
    {
      if (v69 != 54)
        goto LABEL_96;
LABEL_55:
      v103 = HIDWORD(v124);
      if ((v51 & 1) != 0)
        goto LABEL_56;
      if (!HIDWORD(v124))
      {
        __break(0xC471u);
        JUMPOUT(0x197ED711CLL);
      }
      --HIDWORD(v124);
      v65 = HIDWORD(v118);
      if (!HIDWORD(v118))
      {
        __break(0xC471u);
        JUMPOUT(0x197ED7124);
      }
      v109 = --HIDWORD(v118);
      if (!HIDWORD(v122))
      {
        __break(0xC471u);
        JUMPOUT(0x197ED712CLL);
      }
      --HIDWORD(v122);
      if (v50)
      {
        HIDWORD(v120) = --v50;
        LODWORD(v116) = 43;
        if (v109 == (_DWORD)v118)
        {
          v110 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v117, v65, (unint64_t)&v116);
          *((_DWORD *)v117 + HIDWORD(v118)) = *v110;
        }
        else
        {
          *((_DWORD *)v117 + v109) = 43;
        }
        ++HIDWORD(v118);
        v103 = HIDWORD(v124);
LABEL_56:
        if (v103)
        {
          do
          {
            HIDWORD(v124) = v103 - 1;
            v107 = HIDWORD(v118);
            if (!HIDWORD(v118))
            {
              __break(0xC471u);
              JUMPOUT(0x197ED70FCLL);
            }
            --HIDWORD(v118);
            if (v107 == 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197ED7104);
            }
            v108 = v107 - 2;
            HIDWORD(v118) = v108;
            if (!HIDWORD(v122))
            {
              __break(0xC471u);
              JUMPOUT(0x197ED710CLL);
            }
            --HIDWORD(v122);
            if (!v50)
            {
              __break(0xC471u);
              JUMPOUT(0x197ED7114);
            }
            LODWORD(v116) = 43;
            if (v108 == (_DWORD)v118)
            {
              WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>((uint64_t)&v117, (unint64_t)&v116);
            }
            else
            {
              *((_DWORD *)v117 + v108) = 43;
              ++HIDWORD(v118);
            }
            v103 = HIDWORD(v124);
            --v50;
          }
          while (HIDWORD(v124));
          HIDWORD(v120) = v50;
        }
        if (!HIDWORD(v118))
        {
          __break(0xC471u);
          JUMPOUT(0x197ED70F4);
        }
        v47 = 43;
        goto LABEL_59;
      }
      __break(0xC471u);
LABEL_140:
      JUMPOUT(0x197ED70BCLL);
    }
    if (*v15 != 538)
      goto LABEL_55;
  }
  if (v76 != 20 && (v76 & 0x100000) == 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[5],char const(&)[15]>(a1);
  }
  else
  {
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
  }
LABEL_96:
  v47 = 0;
LABEL_59:
  v104 = v117;
  if (v117)
  {
    v117 = 0;
    LODWORD(v118) = 0;
    WTF::fastFree((unint64_t)v104, (void *)v65, v66, v67, v42, v43, v44, v45);
  }
  if (v49)
  {
    v119 = 0;
    LODWORD(v120) = 0;
    WTF::fastFree(v49, (void *)v65, v66, v67, v42, v43, v44, v45);
  }
  v105 = v121;
  if (v121)
  {
    v121 = 0;
    LODWORD(v122) = 0;
    WTF::fastFree((unint64_t)v105, (void *)v65, v66, v67, v42, v43, v44, v45);
  }
  v106 = v123;
  if (v123)
  {
    v123 = 0;
    LODWORD(v124) = 0;
    WTF::fastFree((unint64_t)v106, (void *)v65, v66, v67, v42, v43, v44, v45);
  }
  return v47;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseDoWhileStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v69;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    goto LABEL_49;
  }
  v15 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v15, a5, a6, a7, a8);
  v69 = 0;
  v16 = *(_DWORD *)(a1 + 12);
  if (!v16)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED749CLL);
  }
  v17 = *(_QWORD *)a1 + 720 * (v16 - 1);
  ++*(_DWORD *)(v17 + 24);
  v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::SyntaxChecker>(a1, a2, &v69);
  v23 = *(_DWORD *)(a1 + 12);
  if (!v23)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED74A4);
  }
  v24 = v23 - 1;
  v25 = *(_QWORD *)a1;
  --*(_DWORD *)(*(_QWORD *)a1 + 720 * v24 + 24);
  v26 = *(_DWORD *)(a1 + 7368);
  if (!v18)
  {
    if (v26 != 20 && (v26 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a statement following 'do'");
      return 0;
    }
    goto LABEL_25;
  }
  if (v26 != 528)
  {
    if (v26 != 20 && (v26 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[14]>(a1);
      return 0;
    }
    goto LABEL_25;
  }
  v27 = *(_DWORD *)(a1 + 7400);
  v28 = *(_DWORD *)(a1 + 7412);
  v29 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v27;
  *(_DWORD *)(a1 + 7448) = v28;
  *(_DWORD *)(a1 + 7452) = v29;
  v30 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v30 + 4) = v27;
  v31 = *(_BYTE *)(v25 + 720 * v24 + 9) & 1;
  *(_BYTE *)(v30 + 56) = 0;
  v32 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v30, a1 + 7368, 0, v31, v19, v20, v21, v22);
  *(_DWORD *)(a1 + 7368) = v32;
  if (v32 != 2)
  {
    if (v32 != 20 && (v32 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[24]>(a1);
      return 0;
    }
    goto LABEL_25;
  }
  v37 = *(_DWORD *)(a1 + 7400);
  v38 = *(_DWORD *)(a1 + 7412);
  v39 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v37;
  *(_DWORD *)(a1 + 7448) = v38;
  *(_DWORD *)(a1 + 7452) = v39;
  v40 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v40 + 4) = v37;
  v41 = *(_DWORD *)(a1 + 12);
  if (!v41)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED74ACLL);
  }
  v42 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v41 - 1) + 9) & 1;
  *(_BYTE *)(v40 + 56) = 0;
  v43 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v40, a1 + 7368, 0, v42, v33, v34, v35, v36);
  *(_DWORD *)(a1 + 7368) = v43;
  if (v43 == 3)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Must provide an expression as a do-while loop condition");
    return 0;
  }
  v44 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
  v49 = *(_DWORD *)(a1 + 7368);
  if (!v44)
  {
    if (v49 != 20 && (v49 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Unable to parse do-while loop condition");
      return 0;
    }
    goto LABEL_25;
  }
  if (v49 != 3)
  {
    if (v49 != 20 && (v49 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[24]>(a1);
      return 0;
    }
LABEL_25:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return 0;
  }
  v50 = *(_DWORD *)(a1 + 7400);
  v51 = *(_DWORD *)(a1 + 7412);
  v52 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v50;
  *(_DWORD *)(a1 + 7448) = v51;
  *(_DWORD *)(a1 + 7452) = v52;
  v53 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v53 + 4) = v50;
  v54 = *(_DWORD *)(a1 + 12);
  if (!v54)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED74B4);
  }
  v55 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v54 - 1) + 9) & 1;
  *(_BYTE *)(v53 + 56) = 0;
  v56 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v53, a1 + 7368, 0, v55, v45, v46, v47, v48);
  *(_DWORD *)(a1 + 7368) = v56;
  if (v56 != 17)
    return 43;
  v61 = *(_DWORD *)(a1 + 7400);
  v62 = *(_DWORD *)(a1 + 7412);
  v63 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v61;
  *(_DWORD *)(a1 + 7448) = v62;
  *(_DWORD *)(a1 + 7452) = v63;
  v64 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v64 + 4) = v61;
  v65 = *(_DWORD *)(a1 + 12);
  if (!v65)
  {
    __break(0xC471u);
LABEL_49:
    JUMPOUT(0x197ED7494);
  }
  v66 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v65 - 1) + 9) & 1;
  *(_BYTE *)(v64 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v64, a1 + 7368, 0, v66, v57, v58, v59, v60);
  return 43;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseWhileStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v48;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    goto LABEL_40;
  }
  v15 = (_DWORD *)(a1 + 7368);
  v16 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v17 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v16, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v17;
  if (v17 != 2)
  {
    if (v17 != 20 && (v17 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[21]>(a1);
      return 0;
    }
    goto LABEL_17;
  }
  v22 = *(_DWORD *)(a1 + 7400);
  v23 = *(_DWORD *)(a1 + 7412);
  v24 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v22;
  *(_DWORD *)(a1 + 7448) = v23;
  *(_DWORD *)(a1 + 7452) = v24;
  v25 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v25 + 4) = v22;
  v26 = *(_DWORD *)(a1 + 12);
  if (!v26)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED776CLL);
  }
  v27 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 9) & 1;
  *(_BYTE *)(v25 + 56) = 0;
  v28 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v25, a1 + 7368, 0, v27, v18, v19, v20, v21);
  *(_DWORD *)(a1 + 7368) = v28;
  if (v28 == 3)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Must provide an expression as a while loop condition");
    return 0;
  }
  v29 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
  v34 = *(_DWORD *)(a1 + 7368);
  if (!v29)
  {
    if (v34 != 20 && (v34 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Unable to parse while loop condition");
      return 0;
    }
    goto LABEL_17;
  }
  if (v34 != 3)
  {
    if (v34 != 20 && (v34 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[21]>(a1, ")", "while loop condition");
      return 0;
    }
    goto LABEL_17;
  }
  v35 = *(_DWORD *)(a1 + 7400);
  v36 = *(_DWORD *)(a1 + 7412);
  v37 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v35;
  *(_DWORD *)(a1 + 7448) = v36;
  *(_DWORD *)(a1 + 7452) = v37;
  v38 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v38 + 4) = v35;
  v39 = *(_DWORD *)(a1 + 12);
  if (!v39)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED7774);
  }
  v40 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v39 - 1) + 9) & 1;
  *(_BYTE *)(v38 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v38, a1 + 7368, 0, v40, v30, v31, v32, v33);
  v48 = 0;
  v41 = *(_DWORD *)(a1 + 12);
  if (!v41)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED777CLL);
  }
  v42 = *(_QWORD *)a1 + 720 * (v41 - 1);
  ++*(_DWORD *)(v42 + 24);
  v43 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::SyntaxChecker>(a1, a2, &v48);
  v44 = *(_DWORD *)(a1 + 12);
  if (!v44)
  {
    __break(0xC471u);
LABEL_40:
    JUMPOUT(0x197ED7764);
  }
  v45 = *(_QWORD *)a1 + 720 * (v44 - 1);
  --*(_DWORD *)(v45 + 24);
  if (!v43)
  {
    if (*v15 != 20 && (*v15 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of a while loop");
      return 0;
    }
LABEL_17:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return 0;
  }
  return 43;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseForStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  char *v15;
  int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  JSC::VariableEnvironment *v84;
  uint64_t v85;
  uint64_t *v86;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  char v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  BOOL v132;
  const char *v133;
  const char *v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  WTF::AtomStringImpl *v143;
  uint64_t v144;
  int *v145;
  int v146;
  unsigned int v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  const char *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  int v164;
  WTF::AtomStringImpl *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  WTF::StringImpl *v172;
  int v173;
  const char *v174;
  const char *v175;
  unint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  int v192;
  int v193;
  int v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  char v198;
  int v199;
  int v200;
  char v201;
  char v202;
  int v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  int v207[3];
  _QWORD v208[2];
  uint64_t v209;
  _QWORD v210[4];
  uint64_t v211;
  int v212;
  uint64_t *v213;
  char v214;
  BOOL v215;
  BOOL v216;
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  unint64_t v221;
  int v222;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED880CLL);
  }
  v15 = (char *)(a1 + 7344);
  v16 = (int *)(a1 + 7368);
  v17 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v18 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v17, a5, a6, a7, a8);
  v23 = v18;
  *(_DWORD *)(a1 + 7368) = v18;
  v24 = *(_DWORD *)(a1 + 7456);
  *(_DWORD *)(a1 + 7456) = v24 + 1;
  if (v18 == 546)
  {
    v146 = *(_DWORD *)(a1 + 12);
    if (!v146)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED88ACLL);
    }
    v147 = v146 - 1;
    v148 = *(_QWORD *)a1;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v147 + 11) & 0x20) == 0 && ((1 << *(_BYTE *)(a1 + 7474)) & 0x6000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "for-await-of can only be used in an async function or async generator");
      goto LABEL_103;
    }
    v149 = *(_DWORD *)(a1 + 7400);
    v150 = *(_DWORD *)(a1 + 7412);
    v151 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v149;
    *(_DWORD *)(a1 + 7448) = v150;
    *(_DWORD *)(a1 + 7452) = v151;
    v152 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v152 + 4) = v149;
    v153 = *(_BYTE *)(v148 + 720 * v147 + 9) & 1;
    *(_BYTE *)(v152 + 56) = 0;
    v18 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v152, a1 + 7368, 0, v153, v19, v20, v21, v22);
    *(_DWORD *)(a1 + 7368) = v18;
  }
  if (v18 != 2)
  {
    if (v18 != 20 && (v18 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[16]>(a1);
    }
    else
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    }
LABEL_103:
    v85 = 0;
    goto LABEL_41;
  }
  v25 = *(_DWORD *)(a1 + 7400);
  v26 = *(_DWORD *)(a1 + 7412);
  v27 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v25;
  *(_DWORD *)(a1 + 7448) = v26;
  *(_DWORD *)(a1 + 7452) = v27;
  v28 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v28 + 4) = v25;
  v29 = *(_DWORD *)(a1 + 12);
  if (!v29)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED8814);
  }
  v30 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v29 - 1) + 9) & 1;
  *(_BYTE *)(v28 + 56) = 0;
  v31 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v28, a1 + 7368, 0, v30, v19, v20, v21, v22);
  v37 = v31;
  *(_DWORD *)(a1 + 7368) = v31;
  v38 = *(_DWORD *)(a1 + 7300);
  v217 = *(_QWORD *)(a1 + 7416);
  v218 = *(unsigned int *)(a1 + 7424);
  v216 = v31 == 544;
  v215 = v31 == 521;
  v214 = 0;
  v210[3] = a1;
  v211 = 0;
  v212 = -1;
  v213 = 0;
  v210[0] = &v216;
  v210[1] = &v215;
  v210[2] = &v211;
  if ((v31 == 521) != ((v31 == 544) ^ (v31 == 520)))
  {
    if ((v31 == 521) != (v31 == 544))
    {
      v39 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
      if (*(_DWORD *)(v39 + 12) <= v40)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED8834);
      }
      *(_DWORD *)(*(_QWORD *)v39 + 720 * v40 + 10) |= 0x8080u;
      if (*(_DWORD *)(v39 + 12) <= v40)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED883CLL);
      }
      *(_DWORD *)(*(_QWORD *)v39 + 720 * v40 + 10) &= ~0x40u;
      if (*(_DWORD *)(v39 + 12) <= v40)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED8844);
      }
      if ((*(_BYTE *)(*(_QWORD *)v39 + 720 * v40 + 11) & 0x80) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED81E8);
      }
      v211 = v39;
      v212 = v40;
      v213 = (uint64_t *)a1;
    }
    v209 = 0;
    *(_BYTE *)(a1 + 7440) = 0;
    LODWORD(v208[0]) = -1;
    v207[0] = -1;
    if (v37 == 520)
    {
      v41 = 0;
    }
    else if (v216)
    {
      v41 = 1;
    }
    else
    {
      if (!v215)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED8354);
      }
      v41 = 2;
    }
    if (!*(_DWORD *)(a1 + 12))
    {
      __break(0xC471u);
      JUMPOUT(0x197ED881CLL);
    }
    JSC::Parser<JSC::Lexer<char16_t>>::parseVariableDeclarationList<JSC::SyntaxChecker>(a1, a2, (_DWORD *)&v218 + 1, (_DWORD *)&v209 + 1, &v209, (uint64_t)&v217, (uint64_t)v208, (uint64_t)v207, 0, v41, &v214);
    v42 = *(_DWORD *)(a1 + 12);
    if (!v42)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED8824);
    }
    v43 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 7440) = 1;
    if (*(_QWORD *)(a1 + 7360))
      goto LABEL_215;
    v44 = *v16;
    if (*v16 == 17)
      goto LABEL_19;
    if (HIDWORD(v218) != 1)
    {
      if (v44 == 20 || (v44 & 0x100000) != 0)
        goto LABEL_214;
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "can only declare a single variable in an enumeration");
      goto LABEL_215;
    }
    v88 = v42 - 1;
    if (v44 != 131589)
    {
      if (v44 == 12
        && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 2056)
        && !*(_BYTE *)(a1 + 7384))
      {
        v137 = *(_DWORD *)(a1 + 7400);
        v138 = *(_DWORD *)(a1 + 7412);
        v139 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v137;
        *(_DWORD *)(a1 + 7448) = v138;
        *(_DWORD *)(a1 + 7452) = v139;
        v140 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v140 + 4) = v137;
        v141 = *(_BYTE *)(v43 + 720 * v88 + 9) & 1;
        *(_BYTE *)(v140 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v140, a1 + 7368, 0, v141, v33, v34, v35, v36);
        if (!(_DWORD)v209)
        {
          LODWORD(v219) = 0;
          *((_QWORD *)&v219 + 1) = *(_QWORD *)(a1 + 7496);
          v220 = a1;
          *(_QWORD *)(a1 + 7496) = &v219;
          v119 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v219);
          *(_QWORD *)(v220 + 7496) = *((_QWORD *)&v219 + 1);
          goto LABEL_83;
        }
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_215;
        v174 = "Cannot assign to the loop variable inside a for-of loop header";
        goto LABEL_206;
      }
      if (v44 == 20 || (v44 & 0x100000) != 0)
        goto LABEL_214;
LABEL_48:
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected either 'in' or 'of' in enumeration syntax");
      goto LABEL_215;
    }
    if (v23 != 546)
    {
      v114 = *(_DWORD *)(a1 + 7400);
      v115 = *(_DWORD *)(a1 + 7412);
      v116 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v114;
      *(_DWORD *)(a1 + 7448) = v115;
      *(_DWORD *)(a1 + 7452) = v116;
      v117 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v117 + 4) = v114;
      v118 = *(_BYTE *)(v43 + 720 * v88 + 9) & 1;
      *(_BYTE *)(v117 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v117, a1 + 7368, 0, v118, v33, v34, v35, v36);
      if (!(_DWORD)v209)
        goto LABEL_82;
      v173 = *(_DWORD *)(a1 + 12);
      if (!v173)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED88B4);
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v173 - 1) + 9) & 1) == 0
        && !v216
        && !v215
        && HIDWORD(v209) == 31)
      {
LABEL_82:
        v119 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
LABEL_83:
        v120 = *v16;
        if (!v119)
        {
          if (v120 != 20 && (v120 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected expression to enumerate");
            goto LABEL_215;
          }
          goto LABEL_214;
        }
        if (v120 == 3)
        {
          v121 = *(_DWORD *)(a1 + 7400);
          v122 = *(_DWORD *)(a1 + 7412);
          v123 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v121;
          *(_DWORD *)(a1 + 7448) = v122;
          *(_DWORD *)(a1 + 7452) = v123;
          v124 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v124 + 4) = v121;
          v125 = *(_DWORD *)(a1 + 12);
          if (!v125)
          {
            __break(0xC471u);
            JUMPOUT(0x197ED886CLL);
          }
          v126 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v125 - 1) + 9) & 1;
          *(_BYTE *)(v124 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v124, a1 + 7368, 0, v126, v33, v34, v35, v36);
          v206 = 0;
          v127 = *(_DWORD *)(a1 + 12);
          if (!v127)
          {
            __break(0xC471u);
            JUMPOUT(0x197ED8874);
          }
          v128 = *(_QWORD *)a1 + 720 * (v127 - 1);
          ++*(_DWORD *)(v128 + 24);
          v129 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::SyntaxChecker>(a1, a2, &v206);
          v130 = *(_DWORD *)(a1 + 12);
          if (!v130)
          {
            __break(0xC471u);
            JUMPOUT(0x197ED887CLL);
          }
          v131 = *(_QWORD *)a1 + 720 * (v130 - 1);
          --*(_DWORD *)(v131 + 24);
          if (v129)
          {
            if (v216 || v215)
            {
              if (!v213)
              {
                __break(0xC471u);
                JUMPOUT(0x197ED8024);
              }
              goto LABEL_35;
            }
            goto LABEL_92;
          }
          if (*v16 != 20 && (*v16 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              if (v44 == 131589)
                v175 = "in";
              else
                v175 = "of";
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[35],char const(&)[3],char const(&)[11]>(a1, v175);
            }
            goto LABEL_215;
          }
LABEL_214:
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
          goto LABEL_215;
        }
        if (v120 == 20 || (v120 & 0x100000) != 0)
          goto LABEL_214;
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_215;
        v132 = v44 == 131589;
LABEL_108:
        if (v132)
          v133 = "for-in header";
        else
          v133 = "for-of header";
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[14]>(a1, v133);
        goto LABEL_215;
      }
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_215;
      v174 = "Cannot assign to the loop variable inside a for-in loop header";
LABEL_206:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(a1, v174);
      goto LABEL_215;
    }
LABEL_164:
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected 'of' in for-await syntax");
    goto LABEL_215;
  }
  if (v31 == 17)
    goto LABEL_19;
  if (!v31 || v31 == 4)
  {
    v204 = *(_OWORD *)(a1 + 7296);
    v142 = *(_DWORD *)(a1 + 7316);
    v220 = *(_QWORD *)(a1 + 7336);
    v219 = *(_OWORD *)(a1 + 7320);
    v202 = *v15;
    v203 = v142;
    v143 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
    v144 = *(unsigned int *)(a1 + 7404);
    v145 = *(int **)(a1 + 7288);
    v200 = v145[1];
    v201 = *(_BYTE *)(a1 + 7345);
    v198 = *((_BYTE *)v145 + 56);
    v199 = *v145;
    if (JSC::Parser<JSC::Lexer<char16_t>>::tryParseDestructuringPatternExpression<JSC::SyntaxChecker>(a1, a2))
    {
      v90 = *v16;
      if (*v16 == 131589
        || v90 == 12
        && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 2056)
        && !*(_BYTE *)(a1 + 7384))
      {
        v92 = 0;
        v91 = 0;
        v15 = (char *)(a1 + 7344);
LABEL_56:
        if (v38 != *(_DWORD *)(a1 + 7300))
        {
          if (v90 != 20 && (v90 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[71]>(a1);
            goto LABEL_215;
          }
          goto LABEL_214;
        }
        if (v90 == 131589)
        {
          if (v23 == 546)
          {
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_215;
            goto LABEL_164;
          }
          v93 = *(_DWORD *)(a1 + 7400);
          v94 = *(_DWORD *)(a1 + 7412);
          v95 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v93;
          *(_DWORD *)(a1 + 7448) = v94;
          *(_DWORD *)(a1 + 7452) = v95;
          v96 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v96 + 4) = v93;
          v97 = *(_DWORD *)(a1 + 12);
          if (!v97)
          {
            __break(0xC471u);
            JUMPOUT(0x197ED8884);
          }
          v98 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v97 - 1) + 9) & 1;
          *(_BYTE *)(v96 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v96, a1 + 7368, 0, v98, v33, v34, v35, v36);
          v99 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
        }
        else
        {
          if (v90 != 12
            || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 2056)
            || v15[40])
          {
            if (v90 == 20 || (v90 & 0x100000) != 0)
              goto LABEL_214;
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_215;
            goto LABEL_48;
          }
          v192 = *(_DWORD *)(a1 + 7400);
          v193 = *(_DWORD *)(a1 + 7412);
          v194 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v192;
          *(_DWORD *)(a1 + 7448) = v193;
          *(_DWORD *)(a1 + 7452) = v194;
          v195 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v195 + 4) = v192;
          v196 = *(_DWORD *)(a1 + 12);
          if (!v196)
          {
            __break(0xC471u);
            goto LABEL_252;
          }
          v197 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v196 - 1) + 9) & 1;
          *(_BYTE *)(v195 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v195, a1 + 7368, 0, v197, v33, v34, v35, v36);
          v99 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1);
        }
        v100 = *v16;
        if (!v99)
        {
          if (v100 != 20 && (v100 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              if (v90 == 131589)
                v154 = "in";
              else
                v154 = "of";
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[26],char const(&)[3],char const(&)[11]>(a1, v154);
            }
            goto LABEL_215;
          }
          goto LABEL_214;
        }
        if (v100 != 3)
        {
          if (v100 == 20 || (v100 & 0x100000) != 0)
            goto LABEL_214;
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_215;
          v132 = v90 == 131589;
          goto LABEL_108;
        }
        v101 = *(_DWORD *)(a1 + 7400);
        v102 = *(_DWORD *)(a1 + 7412);
        v103 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v101;
        *(_DWORD *)(a1 + 7448) = v102;
        *(_DWORD *)(a1 + 7452) = v103;
        v104 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v104 + 4) = v101;
        v105 = *(_DWORD *)(a1 + 12);
        if (!v105)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED888CLL);
        }
        v106 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v105 - 1) + 9) & 1;
        *(_BYTE *)(v104 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v104, a1 + 7368, 0, v106, v33, v34, v35, v36);
        v208[0] = 0;
        v107 = *(_DWORD *)(a1 + 12);
        if (!v107)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED8894);
        }
        v108 = *(_QWORD *)a1 + 720 * (v107 - 1);
        ++*(_DWORD *)(v108 + 24);
        v109 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::SyntaxChecker>(a1, a2, v208);
        v110 = *(_DWORD *)(a1 + 12);
        if (!v110)
        {
          __break(0xC471u);
          JUMPOUT(0x197ED889CLL);
        }
        v111 = v110 - 1;
        v112 = *(_QWORD *)a1;
        --*(_DWORD *)(*(_QWORD *)a1 + 720 * v111 + 24);
        if (!v109)
        {
          if (*v16 != 20 && (*v16 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              if (v90 == 131589)
                v155 = "in";
              else
                v155 = "of";
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43],char const(&)[3],char const(&)[6]>(a1, v155);
            }
            goto LABEL_215;
          }
          goto LABEL_214;
        }
        if ((v92 & 1) == 0)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::parseForStatement<JSC::SyntaxChecker>(JSC::SyntaxChecker::Statement&)::{lambda(void)#1}::operator()((uint64_t)&v219, (uint64_t)v210, v73, v32, v33, v34, v35, v36);
          v84 = (JSC::VariableEnvironment *)&v219;
          goto LABEL_39;
        }
        if ((v91 > 0x19 || ((1 << v91) & 0x2030004) == 0)
          && (v91 != 18 || (*(_BYTE *)(v112 + 720 * v111 + 9) & 1) != 0))
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v134 = "Left side of assignment is not a reference";
            v135 = a1;
            v136 = 0;
LABEL_116:
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v135, v136, v134);
            goto LABEL_215;
          }
          goto LABEL_215;
        }
        if (!v216 && !v215)
          goto LABEL_92;
        if (v213)
        {
LABEL_35:
          v213 = 0;
          JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v219, (uint64_t *)a1, 0, v32, v33, v34, v35, v36);
          JSC::VariableEnvironment::VariableEnvironment((JSC::VariableEnvironment *)&v204, (const JSC::VariableEnvironment *)&v219);
          v83 = v221;
          if (v221)
          {
            v221 = 0;
            v222 = 0;
            WTF::fastFree(v83, v76, v77, v78, v79, v80, v81, v82);
          }
          JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v219, (WTF::AtomStringImpl *)v76, v77, v78, v79, v80, v81, v82);
          goto LABEL_38;
        }
        __break(0xC471u);
LABEL_252:
        JUMPOUT(0x197ED7EA0);
      }
    }
    JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), v143, v144, v32, v33, v34, v35, v36);
    v160 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v160 = v199;
    *(_BYTE *)(v160 + 56) = v198;
    v161 = *(_DWORD *)(a1 + 7400);
    v162 = *(_DWORD *)(a1 + 7412);
    v163 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v161;
    *(_DWORD *)(a1 + 7448) = v162;
    *(_DWORD *)(a1 + 7452) = v163;
    *(_DWORD *)(v160 + 4) = v161;
    v164 = *(_DWORD *)(a1 + 12);
    if (!v164)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED88A4);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v160, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v164 - 1) + 9) & 1, v156, v157, v158, v159);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v200;
    *(_OWORD *)(a1 + 7296) = v204;
    *(_DWORD *)(a1 + 7312) = 0;
    *(_DWORD *)(a1 + 7316) = v203;
    *(_OWORD *)(a1 + 7320) = v219;
    *(_QWORD *)(a1 + 7336) = v220;
    *(_BYTE *)(a1 + 7344) = v202;
    *(_BYTE *)(a1 + 7345) = v201;
    v172 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (v172)
    {
      if (*(_DWORD *)v172 == 2)
      {
        WTF::StringImpl::~StringImpl(v172, v165, v166, v167, v168, v169, v170, v171);
        WTF::fastFree(v176, v177, v178, v179, v180, v181, v182, v183);
      }
      else
      {
        *(_DWORD *)v172 -= 2;
      }
    }
    v15 = (char *)(a1 + 7344);
  }
  v15[96] = 0;
  v89 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
  v15[96] = 1;
  v90 = *(_DWORD *)(a1 + 7368);
  if (!v89)
  {
    if (v90 != 20 && (v90 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse for loop declarations");
      goto LABEL_215;
    }
    goto LABEL_214;
  }
  if (v90 != 17)
  {
    v91 = v89;
    v92 = 1;
    goto LABEL_56;
  }
LABEL_19:
  if (v23 == 546)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Unexpected a ';' in for-await-of header");
    goto LABEL_215;
  }
  v45 = *(_DWORD *)(a1 + 7400);
  v46 = *(_DWORD *)(a1 + 7412);
  v47 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v45;
  *(_DWORD *)(a1 + 7448) = v46;
  *(_DWORD *)(a1 + 7452) = v47;
  v48 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v48 + 4) = v45;
  v49 = *(_DWORD *)(a1 + 12);
  if (!v49)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED882CLL);
  }
  v50 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v49 - 1) + 9) & 1;
  *(_BYTE *)(v48 + 56) = 0;
  v51 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v48, a1 + 7368, 0, v50, v33, v34, v35, v36);
  *(_DWORD *)(a1 + 7368) = v51;
  if (v214 && v215)
  {
    if (v51 != 20 && (v51 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "const variables in for loops must have initializers");
      goto LABEL_215;
    }
    goto LABEL_214;
  }
  if (v51 == 17)
    goto LABEL_25;
  v52 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
  v53 = *(_DWORD *)(a1 + 7368);
  if (v52)
  {
    if (v53 != 17)
    {
      if (v53 != 20 && (v53 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' after the for loop condition expression");
        goto LABEL_215;
      }
      goto LABEL_214;
    }
LABEL_25:
    v54 = *(_DWORD *)(a1 + 7400);
    v55 = *(_DWORD *)(a1 + 7412);
    v56 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v54;
    *(_DWORD *)(a1 + 7448) = v55;
    *(_DWORD *)(a1 + 7452) = v56;
    v57 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v57 + 4) = v54;
    v58 = *(_DWORD *)(a1 + 12);
    if (!v58)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED884CLL);
    }
    v59 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v58 - 1) + 9) & 1;
    *(_BYTE *)(v57 + 56) = 0;
    v60 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v57, a1 + 7368, 0, v59, v33, v34, v35, v36);
    *(_DWORD *)(a1 + 7368) = v60;
    if (v60 == 3)
    {
LABEL_29:
      v63 = *(_DWORD *)(a1 + 7400);
      v64 = *(_DWORD *)(a1 + 7412);
      v65 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v63;
      *(_DWORD *)(a1 + 7448) = v64;
      *(_DWORD *)(a1 + 7452) = v65;
      v66 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v66 + 4) = v63;
      v67 = *(_DWORD *)(a1 + 12);
      if (!v67)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED8854);
      }
      v68 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v67 - 1) + 9) & 1;
      *(_BYTE *)(v66 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v66, a1 + 7368, 0, v68, v33, v34, v35, v36);
      v208[0] = 0;
      v69 = *(_DWORD *)(a1 + 12);
      if (!v69)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED885CLL);
      }
      v70 = *(_QWORD *)a1 + 720 * (v69 - 1);
      ++*(_DWORD *)(v70 + 24);
      v71 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::SyntaxChecker>(a1, a2, v208);
      v74 = *(_DWORD *)(a1 + 12);
      if (!v74)
      {
        __break(0xC471u);
        JUMPOUT(0x197ED8864);
      }
      v75 = *(_QWORD *)a1 + 720 * (v74 - 1);
      --*(_DWORD *)(v75 + 24);
      if (v71)
      {
        if (v216 || v215)
        {
          if (!v213)
          {
            __break(0xC471u);
            JUMPOUT(0x197ED8208);
          }
          goto LABEL_35;
        }
LABEL_92:
        *(_QWORD *)&v204 = 0;
        BYTE8(v204) = 0;
        v205 = 0;
LABEL_38:
        v84 = (JSC::VariableEnvironment *)&v204;
LABEL_39:
        JSC::VariableEnvironment::~VariableEnvironment(v84, v72, v73, v32, v33, v34, v35, v36);
        v85 = 43;
        goto LABEL_40;
      }
      if (*v16 != 20 && (*v16 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of a for loop");
        goto LABEL_215;
      }
      goto LABEL_214;
    }
    v61 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
    v62 = *(_DWORD *)(a1 + 7368);
    if (v61)
    {
      if (v62 != 3)
      {
        if (v62 != 20 && (v62 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[16]>(a1);
          goto LABEL_215;
        }
        goto LABEL_214;
      }
      goto LABEL_29;
    }
    if (v62 == 20 || (v62 & 0x100000) != 0)
      goto LABEL_214;
    if (!*(_QWORD *)(a1 + 7360))
    {
      v134 = "Cannot parse for loop iteration expression";
      goto LABEL_149;
    }
    goto LABEL_215;
  }
  if (v53 == 20 || (v53 & 0x100000) != 0)
    goto LABEL_214;
  if (!*(_QWORD *)(a1 + 7360))
  {
    v134 = "Cannot parse for loop condition expression";
LABEL_149:
    v135 = a1;
    v136 = 1;
    goto LABEL_116;
  }
LABEL_215:
  v85 = 0;
LABEL_40:
  v86 = v213;
  if (v213)
  {
    v213 = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v219, v86, 0, v32, v33, v34, v35, v36);
    v191 = v221;
    if (v221)
    {
      v221 = 0;
      v222 = 0;
      WTF::fastFree(v191, v184, v185, v186, v187, v188, v189, v190);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v219, (WTF::AtomStringImpl *)v184, v185, v186, v187, v188, v189, v190);
  }
LABEL_41:
  *(_DWORD *)(a1 + 7456) = v24;
  return v85;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseContinueStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  _BOOL4 v34;
  BOOL v35;
  unsigned int v36;
  uint64_t *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  BOOL v67;
  int v68;
  _BOOL4 IsValid;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED8D34);
  }
  v14 = (int *)(a1 + 7368);
  v15 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v16 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v15, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v16;
  v21 = *(_DWORD *)(a1 + 12);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED8D3CLL);
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v21 - 1) + 10);
  if ((v23 & 0x100000) != 0)
  {
    IsValid = JSC::Parser<JSC::Lexer<unsigned char>>::continueIsValid((uint64_t *)a1);
    v21 = *(_DWORD *)(a1 + 12);
    if (!v21)
      goto LABEL_82;
    v22 = *(_QWORD *)a1;
    v70 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v21 - 1) + 24);
    if (v70)
      v71 = 1;
    else
      v71 = IsValid;
    if (v71 != 1)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "'continue' cannot cross static block boundary");
      return 0;
    }
    if (v70)
      v25 = IsValid;
    else
      v25 = 1;
    v24 = *v14;
  }
  else
  {
    v24 = v16;
    v25 = 0;
  }
  if (v24 == 17)
  {
    v26 = *(_DWORD *)(a1 + 7400);
    v27 = *(_DWORD *)(a1 + 7412);
    v28 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v26;
    *(_DWORD *)(a1 + 7448) = v27;
    *(_DWORD *)(a1 + 7452) = v28;
    v29 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v29 + 4) = v26;
    v30 = *(_BYTE *)(v22 + 720 * (v21 - 1) + 9) & 1;
    *(_BYTE *)(v29 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v29, a1 + 7368, 0, v30, v17, v18, v19, v20);
    v21 = *(_DWORD *)(a1 + 12);
    if (v21)
    {
      v22 = *(_QWORD *)a1;
      goto LABEL_8;
    }
LABEL_82:
    __break(0xC471u);
    JUMPOUT(0x197ED8A00);
  }
  v35 = v24 == 1 || v24 == 20;
  if (v35 || *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
  {
LABEL_8:
    v31 = v21 - 1;
    v32 = v21 - 1;
    while (1)
    {
      v33 = *(_DWORD *)(v22 + 720 * v31 + 24);
      v34 = v33 != 0;
      if (!v32 || v33)
        break;
      if ((*(_BYTE *)(v22 + 720 * v31 + 12) & 0x60) != 0)
      {
        v34 = 0;
        break;
      }
      v32 = v31 - 1;
      v31 = (v31 - 1);
      if (v21 <= v32)
        goto LABEL_82;
    }
    if ((v23 & 0x100000) != 0)
      v72 = v25;
    else
      v72 = v34;
    if (v72)
      return 43;
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "'continue' is only valid inside a loop statement");
    return 0;
  }
  if (v24 != 12
    && !JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, v24, *(_QWORD **)(a1 + 7376))
    && !JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376)))
  {
    v68 = *v14;
    if (*v14 != 546)
    {
      if (v68 != 1048592)
      {
        if (v68 != 20 && (v68 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected an identifier as the target for a continue statement");
          return 0;
        }
        goto LABEL_76;
      }
      if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
LABEL_76:
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        return 0;
      }
    }
  }
  v36 = *(_DWORD *)(a1 + 12);
  if (!v36)
  {
LABEL_79:
    __break(0xC471u);
    JUMPOUT(0x197ED8D44);
  }
  v37 = *(uint64_t **)(a1 + 7376);
  v38 = v36 - 1;
  v39 = *(_QWORD *)a1;
  v40 = v36 - 1;
  v41 = v36 - 1;
  while (1)
  {
    v42 = *(_QWORD *)(v39 + 720 * v41 + 40);
    if (v42)
      break;
LABEL_23:
    if (!v40 || (*(_BYTE *)(v39 + 720 * v41 + 12) & 0x40) != 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        v73 = *v37;
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 0, "Cannot use the undeclared label '", &v73);
      }
      return 0;
    }
    v40 = v41 - 1;
    v41 = (v41 - 1);
    if (v36 <= v40)
      goto LABEL_79;
  }
  v43 = *(unsigned int *)(v42 + 12);
  v44 = 16 * v43;
  v45 = v43;
  do
  {
    if ((int)v45 < 1)
      goto LABEL_23;
    if (--v45 >= v43)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED8D4CLL);
    }
    v46 = v44 - 16;
    v47 = *(_QWORD *)v42;
    v48 = *(_QWORD *)(*(_QWORD *)v42 + v44 - 16);
    v49 = *v37;
    v44 -= 16;
  }
  while (v48 != *v37);
  if (!*(_BYTE *)(v47 + v46 + 8))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      v73 = v48;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::UniquedStringImpl *,char const(&)[32]>(a1, &v73);
    }
    return 0;
  }
  v50 = *(_DWORD *)(a1 + 7400);
  v51 = *(_DWORD *)(a1 + 7412);
  v52 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v50;
  *(_DWORD *)(a1 + 7448) = v51;
  *(_DWORD *)(a1 + 7452) = v52;
  v53 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v53 + 4) = v50;
  v54 = *(_BYTE *)(v39 + 720 * v38 + 9) & 1;
  *(_BYTE *)(v53 + 56) = 0;
  v55 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v53, a1 + 7368, 0, v54, v47, v49, v19, v20);
  *(_DWORD *)(a1 + 7368) = v55;
  if (v55 != 17)
  {
    v67 = v55 == 1 || v55 == 20;
    if (v67 || *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
      return 43;
    if ((v55 & 0x100000) != 0)
      goto LABEL_76;
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' following a targeted continue statement");
    return 0;
  }
  v60 = *(_DWORD *)(a1 + 7400);
  v61 = *(_DWORD *)(a1 + 7412);
  v62 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v60;
  *(_DWORD *)(a1 + 7448) = v61;
  *(_DWORD *)(a1 + 7452) = v62;
  v63 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v63 + 4) = v60;
  v64 = *(_DWORD *)(a1 + 12);
  if (!v64)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED8D54);
  }
  v65 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v64 - 1) + 9) & 1;
  *(_BYTE *)(v63 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v63, a1 + 7368, 0, v65, v56, v57, v58, v59);
  return 43;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseBreakStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  char v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  char v32;
  unsigned int v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  char IsValid;
  int v64;
  BOOL v65;
  char v66;
  uint64_t v67;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED91B8);
  }
  v14 = (int *)(a1 + 7368);
  v15 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v15, a5, a6, a7, a8);
  v20 = *(_DWORD *)(a1 + 12);
  if (!v20)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED91C0);
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v20 - 1) + 10);
  if ((v22 & 0x100000) != 0)
  {
    IsValid = JSC::Parser<JSC::Lexer<unsigned char>>::breakIsValid((uint64_t *)a1);
    v20 = *(_DWORD *)(a1 + 12);
    if (!v20)
      goto LABEL_78;
    v23 = IsValid;
    v21 = *(_QWORD *)a1;
    if (!*(_DWORD *)(*(_QWORD *)a1 + 720 * (v20 - 1) + 24))
    {
      v64 = *(_DWORD *)(v21 + 720 * (v20 - 1) + 28);
      v65 = v64 == 0;
      v66 = v64 ? 1 : IsValid;
      v23 = v65 ? 1 : IsValid;
      if ((v66 & 1) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "'break' cannot cross static block boundary");
        return 0;
      }
    }
  }
  else
  {
    v23 = 0;
  }
  v24 = *v14;
  if (*v14 == 17)
  {
    v25 = *(_DWORD *)(a1 + 7400);
    v26 = *(_DWORD *)(a1 + 7412);
    v27 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v25;
    *(_DWORD *)(a1 + 7448) = v26;
    *(_DWORD *)(a1 + 7452) = v27;
    v28 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v28 + 4) = v25;
    v29 = *(_BYTE *)(v21 + 720 * (v20 - 1) + 9) & 1;
    *(_BYTE *)(v28 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v28, a1 + 7368, 0, v29, v16, v17, v18, v19);
    v20 = *(_DWORD *)(a1 + 12);
    if (v20)
    {
      v21 = *(_QWORD *)a1;
      goto LABEL_8;
    }
LABEL_78:
    __break(0xC471u);
    JUMPOUT(0x197ED8EA4);
  }
  if (v24 == 1 || v24 == 20 || *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
  {
LABEL_8:
    v30 = v20 - 1;
    v31 = v20 - 1;
    while (1)
    {
      if (*(_DWORD *)(v21 + 720 * v30 + 24) || *(_DWORD *)(v21 + 720 * v30 + 28))
      {
        v32 = 1;
        goto LABEL_16;
      }
      if (!v31 || (*(_BYTE *)(v21 + 720 * v30 + 12) & 0x60) != 0)
        break;
      v31 = v30 - 1;
      v30 = (v30 - 1);
      if (v20 <= v31)
        goto LABEL_78;
    }
    v32 = 0;
LABEL_16:
    if ((v22 & 0x100000) != 0)
      v32 = v23;
    if ((v32 & 1) != 0)
      return 43;
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "'break' is only valid inside a switch or loop statement");
    return 0;
  }
  if (v24 != 12
    && !JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, v24, *(_QWORD **)(a1 + 7376))
    && !JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376)))
  {
    v62 = *v14;
    if (*v14 != 546)
    {
      if (v62 != 1048592)
      {
        if (v62 != 20 && (v62 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected an identifier as the target for a break statement");
          return 0;
        }
        goto LABEL_72;
      }
      if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
LABEL_72:
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        return 0;
      }
    }
  }
  v34 = *(_DWORD *)(a1 + 12);
  if (!v34)
  {
LABEL_75:
    __break(0xC471u);
    JUMPOUT(0x197ED91C8);
  }
  v35 = *(uint64_t **)(a1 + 7376);
  v36 = v34 - 1;
  v37 = *(_QWORD *)a1;
  v38 = v34 - 1;
  v39 = v34 - 1;
  while (1)
  {
    v40 = *(_QWORD *)(v37 + 720 * v39 + 40);
    if (v40)
      break;
LABEL_27:
    if (!v38 || (*(_BYTE *)(v37 + 720 * v39 + 12) & 0x40) != 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        v67 = *v35;
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 0, "Cannot use the undeclared label '", &v67);
      }
      return 0;
    }
    v38 = v39 - 1;
    v39 = (v39 - 1);
    if (v34 <= v38)
      goto LABEL_75;
  }
  v41 = *(unsigned int *)(v40 + 12);
  v42 = 16 * v41 - 16;
  v43 = v41;
  do
  {
    if ((int)v43 < 1)
      goto LABEL_27;
    if (--v43 >= v41)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED91D0);
    }
    v44 = *(_QWORD *)(*(_QWORD *)v40 + v42);
    v42 -= 16;
  }
  while (v44 != *v35);
  v45 = *(_DWORD *)(a1 + 7400);
  v46 = *(_DWORD *)(a1 + 7412);
  v47 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v45;
  *(_DWORD *)(a1 + 7448) = v46;
  *(_DWORD *)(a1 + 7452) = v47;
  v48 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v48 + 4) = v45;
  v49 = *(_BYTE *)(v37 + 720 * v36 + 9) & 1;
  *(_BYTE *)(v48 + 56) = 0;
  v50 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v48, a1 + 7368, 0, v49, v16, v17, v18, v19);
  *(_DWORD *)(a1 + 7368) = v50;
  if (v50 == 17)
  {
    v55 = *(_DWORD *)(a1 + 7400);
    v56 = *(_DWORD *)(a1 + 7412);
    v57 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v55;
    *(_DWORD *)(a1 + 7448) = v56;
    *(_DWORD *)(a1 + 7452) = v57;
    v58 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v58 + 4) = v55;
    v59 = *(_DWORD *)(a1 + 12);
    if (!v59)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED91D8);
    }
    v60 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v59 - 1) + 9) & 1;
    *(_BYTE *)(v58 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v58, a1 + 7368, 0, v60, v51, v52, v53, v54);
    return 43;
  }
  v61 = v50 == 1 || v50 == 20;
  if (v61 || *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
    return 43;
  if ((v50 & 0x100000) != 0)
    goto LABEL_72;
  if (!*(_QWORD *)(a1 + 7360))
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected a ';' following a targeted break statement");
  return 0;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseReturnStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v10;
  uint64_t v11;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t result;
  int v33;
  int v34;
  int v35;

  ++*(_DWORD *)(a1 + 7308);
  v8 = *(_DWORD *)(a1 + 12);
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED9400);
  }
  v10 = v8 - 1;
  v11 = *(_QWORD *)a1;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * v10 + 10) & 0x100100) != 0x100)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Return statements are only valid inside functions");
    return 0;
  }
  v13 = *(_DWORD *)(a1 + 7400);
  v14 = *(_DWORD *)(a1 + 7412);
  v15 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v13;
  *(_DWORD *)(a1 + 7448) = v14;
  *(_DWORD *)(a1 + 7452) = v15;
  v16 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v16 + 4) = v13;
  v17 = *(_BYTE *)(v11 + 720 * v10 + 9) & 1;
  *(_BYTE *)(v16 + 56) = 0;
  v18 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v16, a1 + 7368, 0, v17, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v18;
  if (v18 == 1 || v18 == 20)
    return 43;
  if (v18 == 17)
  {
    v33 = *(_DWORD *)(a1 + 7400);
    v34 = *(_DWORD *)(a1 + 7412);
    v35 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v33;
    *(_DWORD *)(a1 + 7448) = v34;
    *(_DWORD *)(a1 + 7452) = v35;
    v29 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v29 + 4) = v33;
    v30 = *(_DWORD *)(a1 + 12);
    if (v30)
      goto LABEL_12;
    goto LABEL_32;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
    return 43;
  v24 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
  v25 = *(_DWORD *)(a1 + 7368);
  if (!v24)
  {
    if (v25 != 20 && (v25 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the return expression");
      return 0;
    }
    goto LABEL_30;
  }
  if (v25 == 17)
  {
    v26 = *(_DWORD *)(a1 + 7400);
    v27 = *(_DWORD *)(a1 + 7412);
    v28 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v26;
    *(_DWORD *)(a1 + 7448) = v27;
    *(_DWORD *)(a1 + 7452) = v28;
    v29 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v29 + 4) = v26;
    v30 = *(_DWORD *)(a1 + 12);
    if (v30)
    {
LABEL_12:
      v31 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v30 - 1) + 9) & 1;
      *(_BYTE *)(v29 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v29, a1 + 7368, 0, v31, v19, v20, v21, v22);
      return 43;
    }
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x197ED939CLL);
  }
  result = 43;
  if (v25 != 1 && v25 != 20 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
  {
    if ((v25 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' following a return statement");
      return 0;
    }
LABEL_30:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return 0;
  }
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseWithStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v41;
  const char *v43;
  uint64_t v44;

  v8 = *(_DWORD *)(a1 + 12);
  if (!v8)
    goto LABEL_38;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v8 - 1) + 9) & 1) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "'with' statements are not valid in strict mode");
    return 0;
  }
  *(_DWORD *)(*(_QWORD *)a1 + 720 * (v8 - 1) + 10) |= 8u;
  v10 = *(_DWORD *)(a1 + 7400);
  v11 = *(_DWORD *)(a1 + 7412);
  v12 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v10;
  *(_DWORD *)(a1 + 7448) = v11;
  *(_DWORD *)(a1 + 7452) = v12;
  v13 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v13 + 4) = v10;
  v14 = *(_DWORD *)(a1 + 12);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED9694);
  }
  v16 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v14 - 1) + 9) & 1;
  *(_BYTE *)(v13 + 56) = 0;
  v17 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v13, a1 + 7368, 0, v16, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v17;
  if (v17 == 2)
  {
    v22 = *(_DWORD *)(a1 + 7400);
    v23 = *(_DWORD *)(a1 + 7412);
    v24 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v22;
    *(_DWORD *)(a1 + 7448) = v23;
    *(_DWORD *)(a1 + 7452) = v24;
    v25 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v25 + 4) = v22;
    v26 = *(_DWORD *)(a1 + 12);
    if (!v26)
    {
      __break(0xC471u);
      JUMPOUT(0x197ED969CLL);
    }
    v27 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 9) & 1;
    *(_BYTE *)(v25 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v25, a1 + 7368, 0, v27, v18, v19, v20, v21);
    v28 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
    v33 = *(_DWORD *)(a1 + 7368);
    if (v28)
    {
      if (v33 == 3)
      {
        v34 = *(_DWORD *)(a1 + 7400);
        v35 = *(_DWORD *)(a1 + 7412);
        v36 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v34;
        *(_DWORD *)(a1 + 7448) = v35;
        *(_DWORD *)(a1 + 7452) = v36;
        v37 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v37 + 4) = v34;
        v38 = *(_DWORD *)(a1 + 12);
        if (v38)
        {
          v39 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v38 - 1) + 9) & 1;
          *(_BYTE *)(v37 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v37, a1 + 7368, 0, v39, v29, v30, v31, v32);
          v44 = 0;
          if (JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::SyntaxChecker>(a1, a2, &v44))
            return 43;
          v41 = *(_DWORD *)(a1 + 7368);
          if (v41 != 20 && (v41 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "A 'with' statement must have a body");
            return 0;
          }
          goto LABEL_31;
        }
LABEL_38:
        __break(0xC471u);
        JUMPOUT(0x197ED968CLL);
      }
      if (v33 != 20 && (v33 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v43 = ")";
          goto LABEL_30;
        }
        return 0;
      }
    }
    else if (v33 != 20 && (v33 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse 'with' subject expression");
      return 0;
    }
LABEL_31:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return 0;
  }
  if (v17 == 20 || (v17 & 0x100000) != 0)
    goto LABEL_31;
  if (!*(_QWORD *)(a1 + 7360))
  {
    v43 = "(";
LABEL_30:
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[30]>(a1, v43);
  }
  return 0;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseSwitchStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF *v111;
  _BYTE v112[24];
  WTF *v113;
  int v114;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
    goto LABEL_70;
  v15 = (_DWORD *)(a1 + 7368);
  v16 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v17 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v16, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v17;
  if (v17 != 2)
  {
    if (v17 != 20 && (v17 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[22]>(a1);
      return 0;
    }
LABEL_29:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return 0;
  }
  v22 = *(_DWORD *)(a1 + 7400);
  v23 = *(_DWORD *)(a1 + 7412);
  v24 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v22;
  *(_DWORD *)(a1 + 7448) = v23;
  *(_DWORD *)(a1 + 7452) = v24;
  v25 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v25 + 4) = v22;
  v26 = *(_DWORD *)(a1 + 12);
  if (!v26)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED9BE0);
  }
  v27 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 9) & 1;
  *(_BYTE *)(v25 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v25, a1 + 7368, 0, v27, v18, v19, v20, v21);
  v28 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
  v33 = *(_DWORD *)(a1 + 7368);
  if (!v28)
  {
    if (v33 != 20 && (v33 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse switch subject expression");
      return 0;
    }
    goto LABEL_29;
  }
  if (v33 != 3)
  {
    if (v33 != 20 && (v33 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[22]>(a1);
      return 0;
    }
    goto LABEL_29;
  }
  v34 = *(_DWORD *)(a1 + 7400);
  v35 = *(_DWORD *)(a1 + 7412);
  v36 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v34;
  *(_DWORD *)(a1 + 7448) = v35;
  *(_DWORD *)(a1 + 7452) = v36;
  v37 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v37 + 4) = v34;
  v38 = *(_DWORD *)(a1 + 12);
  if (!v38)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED9BE8);
  }
  v39 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v38 - 1) + 9) & 1;
  *(_BYTE *)(v37 + 56) = 0;
  v40 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v37, a1 + 7368, 0, v39, v29, v30, v31, v32);
  *(_DWORD *)(a1 + 7368) = v40;
  if (v40)
  {
    if (v40 != 20 && (v40 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[19]>(a1);
      return 0;
    }
    goto LABEL_29;
  }
  v45 = *(_DWORD *)(a1 + 7400);
  v46 = *(_DWORD *)(a1 + 7412);
  v47 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v45;
  *(_DWORD *)(a1 + 7448) = v46;
  *(_DWORD *)(a1 + 7452) = v47;
  v48 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v48 + 4) = v45;
  v49 = *(_DWORD *)(a1 + 12);
  if (!v49)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED9BF0);
  }
  v50 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v49 - 1) + 9) & 1;
  *(_BYTE *)(v48 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v48, a1 + 7368, 0, v50, v41, v42, v43, v44);
  v51 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  if (*(_DWORD *)(v51 + 12) <= v52)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED9BF8);
  }
  *(_DWORD *)(*(_QWORD *)v51 + 720 * v52 + 10) |= 0x8080u;
  if (*(_DWORD *)(v51 + 12) <= v52)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED9C00);
  }
  *(_DWORD *)(*(_QWORD *)v51 + 720 * v52 + 10) &= ~0x40u;
  v59 = *(_DWORD *)(a1 + 12);
  if (!v59)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED9C08);
  }
  v60 = *(_QWORD *)a1 + 720 * (v59 - 1);
  ++*(_DWORD *)(v60 + 28);
  JSC::Parser<JSC::Lexer<char16_t>>::parseSwitchClauses<JSC::SyntaxChecker>(a1, a2, v53, v54, v55, v56, v57, v58);
  if (*(_QWORD *)(a1 + 7360))
    goto LABEL_49;
  if (*v15 != 517)
    goto LABEL_19;
  v67 = *(_DWORD *)(a1 + 7400);
  v68 = *(_DWORD *)(a1 + 7412);
  v69 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v67;
  *(_DWORD *)(a1 + 7448) = v68;
  *(_DWORD *)(a1 + 7452) = v69;
  v70 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v70 + 4) = v67;
  v71 = *(_DWORD *)(a1 + 12);
  if (!v71)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED9C18);
  }
  v72 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v71 - 1) + 9) & 1;
  *(_BYTE *)(v70 + 56) = 0;
  v73 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v70, a1 + 7368, 0, v72, v63, v64, v65, v66);
  *(_DWORD *)(a1 + 7368) = v73;
  if (v73 == 18)
  {
    v74 = *(_DWORD *)(a1 + 7400);
    v75 = *(_DWORD *)(a1 + 7412);
    v76 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v74;
    *(_DWORD *)(a1 + 7448) = v75;
    *(_DWORD *)(a1 + 7452) = v76;
    v77 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v77 + 4) = v74;
    v78 = *(_DWORD *)(a1 + 12);
    if (v78)
    {
      v79 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v78 - 1) + 9) & 1;
      *(_BYTE *)(v77 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v77, a1 + 7368, 0, v79, v63, v64, v65, v66);
      if (JSC::Parser<JSC::Lexer<char16_t>>::parseSourceElements<JSC::SyntaxChecker>(a1, a2, 1))
        goto LABEL_18;
      if (*v15 != 20 && (*v15 & 0x100000) == 0)
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_49;
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of a switch default clause");
        goto LABEL_18;
      }
LABEL_60:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      goto LABEL_18;
    }
LABEL_70:
    __break(0xC471u);
    JUMPOUT(0x197ED9BD8);
  }
  if (v73 == 20 || (v73 & 0x100000) != 0)
    goto LABEL_60;
  if (*(_QWORD *)(a1 + 7360))
    goto LABEL_49;
  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ':' after switch default clause");
LABEL_18:
  if (*(_QWORD *)(a1 + 7360))
  {
LABEL_49:
    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v112, (uint64_t *)a1, 0, v62, v63, v64, v65, v66);
    v111 = v113;
    if (v113)
    {
      v113 = 0;
      v114 = 0;
      WTF::fastFree((unint64_t)v111, v104, v105, v106, v107, v108, v109, v110);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v112, (WTF::AtomStringImpl *)v104, v105, v106, v107, v108, v109, v110);
    return 0;
  }
LABEL_19:
  JSC::Parser<JSC::Lexer<char16_t>>::parseSwitchClauses<JSC::SyntaxChecker>(a1, a2, v61, v62, v63, v64, v65, v66);
  if (*(_QWORD *)(a1 + 7360))
    goto LABEL_49;
  v80 = *(_DWORD *)(a1 + 12);
  if (!v80)
  {
    __break(0xC471u);
    JUMPOUT(0x197ED9C10);
  }
  v81 = v80 - 1;
  v82 = *(_QWORD *)a1;
  --*(_DWORD *)(*(_QWORD *)a1 + 720 * v81 + 28);
  v83 = *(_DWORD *)(a1 + 7368);
  if (v83 != 1)
  {
    if (v83 == 20 || (v83 & 0x100000) != 0)
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    else
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[19]>(a1);
    goto LABEL_49;
  }
  v84 = *(_DWORD *)(a1 + 7400);
  v85 = *(_DWORD *)(a1 + 7412);
  v86 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v84;
  *(_DWORD *)(a1 + 7448) = v85;
  *(_DWORD *)(a1 + 7452) = v86;
  v87 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v87 + 4) = v84;
  v88 = *(_BYTE *)(v82 + 720 * v81 + 9) & 1;
  *(_BYTE *)(v87 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v87, a1 + 7368, 0, v88, v63, v64, v65, v66);
  JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v112, (uint64_t *)a1, 0, v89, v90, v91, v92, v93);
  v101 = v113;
  if (v113)
  {
    v113 = 0;
    v114 = 0;
    WTF::fastFree((unint64_t)v101, v94, v95, v96, v97, v98, v99, v100);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v112, (WTF::AtomStringImpl *)v94, v95, v96, v97, v98, v99, v100);
  return 43;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseThrowStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t result;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
    goto LABEL_27;
  v15 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v16 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v15, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v16;
  if (v16 == 1)
    goto LABEL_31;
  if (v16 == 17)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected expression after 'throw'");
    return 0;
  }
  if (v16 == 20 || *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
  {
LABEL_31:
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot have a newline after 'throw'");
    return 0;
  }
  v17 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
  v22 = *(_DWORD *)(a1 + 7368);
  if (!v17)
  {
    if (v22 != 20 && (v22 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse expression for throw statement");
      return 0;
    }
    goto LABEL_26;
  }
  if (v22 == 17)
  {
    v23 = *(_DWORD *)(a1 + 7400);
    v24 = *(_DWORD *)(a1 + 7412);
    v25 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v23;
    *(_DWORD *)(a1 + 7448) = v24;
    *(_DWORD *)(a1 + 7452) = v25;
    v26 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v26 + 4) = v23;
    v27 = *(_DWORD *)(a1 + 12);
    if (v27)
    {
      v28 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v27 - 1) + 9) & 1;
      *(_BYTE *)(v26 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v26, a1 + 7368, 0, v28, v18, v19, v20, v21);
      return 43;
    }
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x197ED9E04);
  }
  result = 43;
  if (v22 != 1 && v22 != 20 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
  {
    if ((v22 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' after a throw statement");
      return 0;
    }
LABEL_26:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return 0;
  }
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseTryStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  WTF::AtomStringImpl *v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF *v92;
  WTF::AtomStringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  WTF::StringImpl *v108;
  int v109;
  WTF::StringImpl *v110;
  int v111;
  int v112;
  uint64_t v113;
  int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  WTF *v160;
  _QWORD *v162;
  uint64_t v163;
  int v164;
  int v165;
  unsigned int v166;
  uint64_t v167;
  char v168;
  uint64_t *v169;
  uint64_t v170[3];
  WTF *v171;
  uint64_t v172;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197EDA7C8);
  }
  v15 = (int *)(a1 + 7368);
  v16 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  v17 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v16, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v17;
  if (v17)
  {
    if (v17 != 20 && (v17 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a block statement as body of a try statement");
      return 0;
    }
    goto LABEL_106;
  }
  v23 = *(_DWORD *)(a1 + 7308);
  if (!JSC::Parser<JSC::Lexer<char16_t>>::parseBlockStatement<JSC::SyntaxChecker>(a1, a2, 0, v18, v19, v20, v21, v22))
  {
    if (*v15 != 20 && (*v15 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of try block");
      return 0;
    }
LABEL_106:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return 0;
  }
  v31 = *(_DWORD *)(a1 + 7308);
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v32 = *(_DWORD *)(a1 + 7368);
  if (v32 != 535)
  {
    v92 = 0;
    v85 = 0;
    goto LABEL_42;
  }
  v33 = *(_DWORD *)(a1 + 7400);
  v34 = *(_DWORD *)(a1 + 7412);
  v35 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v33;
  *(_DWORD *)(a1 + 7448) = v34;
  *(_DWORD *)(a1 + 7452) = v35;
  v36 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v36 + 4) = v33;
  v37 = *(_DWORD *)(a1 + 12);
  if (!v37)
  {
    __break(0xC471u);
    JUMPOUT(0x197EDA7D0);
  }
  v38 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v37 - 1) + 9) & 1;
  *(_BYTE *)(v36 + 56) = 0;
  v39 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v36, a1 + 7368, 0, v38, v27, v28, v29, v30);
  *(_DWORD *)(a1 + 7368) = v39;
  if (v39 != 2)
  {
    if (v39)
    {
      if (v39 != 20 && (v39 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[15]>(a1);
        goto LABEL_89;
      }
    }
    else
    {
      v115 = JSC::Parser<JSC::Lexer<char16_t>>::parseBlockStatement<JSC::SyntaxChecker>(a1, a2, 0, v26, v27, v28, v29, v30);
      v32 = *(_DWORD *)(a1 + 7368);
      if (v115)
      {
        v85 = v115;
        v92 = 0;
        goto LABEL_42;
      }
      if (v32 != 20 && (v32 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Unable to parse 'catch' block");
        goto LABEL_89;
      }
    }
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_89:
    v113 = 0;
    goto LABEL_49;
  }
  v40 = *(_DWORD *)(a1 + 7400);
  v41 = *(_DWORD *)(a1 + 7412);
  v42 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v40;
  *(_DWORD *)(a1 + 7448) = v41;
  *(_DWORD *)(a1 + 7452) = v42;
  v43 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v43 + 4) = v40;
  v44 = *(_DWORD *)(a1 + 12);
  if (!v44)
  {
    __break(0xC471u);
    JUMPOUT(0x197EDA7D8);
  }
  v45 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v44 - 1) + 9) & 1;
  *(_BYTE *)(v43 + 56) = 0;
  v46 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v43, a1 + 7368, 0, v45, v27, v28, v29, v30);
  *(_DWORD *)(a1 + 7368) = v46;
  v47 = *(_DWORD *)(a1 + 12);
  if (!v47)
  {
    __break(0xC471u);
    JUMPOUT(0x197EDA7E0);
  }
  v48 = *(_DWORD *)(a1 + 7456);
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v47 - 1) + 12) & 0x10) != 0 && v46 == 546)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as identifier within static block");
LABEL_135:
    v113 = 0;
    *(_DWORD *)(a1 + 7456) = v48;
    goto LABEL_49;
  }
  *(_DWORD *)(a1 + 7456) = v48 + 1;
  v49 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  v55 = v50;
  if (*(_DWORD *)(v49 + 12) <= v50)
  {
    __break(0xC471u);
    JUMPOUT(0x197EDA7E8);
  }
  v56 = v49;
  v57 = v50;
  *(_DWORD *)(*(_QWORD *)v49 + 720 * v50 + 10) |= 0x8080u;
  if (*(_DWORD *)(v49 + 12) <= v50)
  {
    __break(0xC471u);
    JUMPOUT(0x197EDA7F0);
  }
  *(_DWORD *)(*(_QWORD *)v49 + 720 * v50 + 10) &= ~0x40u;
  v58 = *v15;
  if (*v15 == 12)
  {
LABEL_13:
    if (*(_DWORD *)(v49 + 12) <= v50)
    {
      __break(0xC471u);
      JUMPOUT(0x197EDA7F8);
    }
    *(_DWORD *)(*(_QWORD *)v49 + 720 * v50 + 10) |= 0x40000u;
    v59 = *(WTF::AtomStringImpl **)(a1 + 7376);
    v60 = *(_DWORD *)(a1 + 7400);
    v61 = *(_DWORD *)(a1 + 7412);
    v62 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v60;
    *(_DWORD *)(a1 + 7448) = v61;
    *(_DWORD *)(a1 + 7452) = v62;
    v63 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v63 + 4) = v60;
    v64 = *(_DWORD *)(a1 + 12);
    if (!v64)
    {
      __break(0xC471u);
      JUMPOUT(0x197EDA800);
    }
    v65 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v64 - 1) + 9) & 1;
    *(_BYTE *)(v63 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v63, a1 + 7368, 0, v65, v51, v52, v53, v54);
    if (*(_DWORD *)(v56 + 12) <= v55)
    {
      __break(0xC471u);
      JUMPOUT(0x197EDA808);
    }
    if ((JSC::Scope::declareLexicalVariable(*(_QWORD *)v56 + 720 * v57, v59, 0, v66, v67, v68, v69, v70) & 1) != 0)
    {
      v152 = *(_DWORD *)(a1 + 12);
      if (!v152)
      {
        __break(0xC471u);
        JUMPOUT(0x197EDA830);
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v152 - 1) + 9) & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v170[0] = *(_QWORD *)v59;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[40],WTF::UniquedStringImpl *,char const(&)[17]>(a1, v170);
        }
        goto LABEL_132;
      }
    }
    goto LABEL_17;
  }
  if (v58 > 545)
  {
    if (v58 != 1048592)
      goto LABEL_93;
    v162 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
    v163 = **(_QWORD **)(a1 + 7376);
    if (v163 != v162[41])
      goto LABEL_157;
  }
  else
  {
    if (v58 == 545)
      goto LABEL_158;
    if (v58 != 544)
      goto LABEL_94;
  }
  v164 = *(_DWORD *)(a1 + 12);
  if (!v164)
  {
    __break(0xC471u);
LABEL_182:
    JUMPOUT(0x197EDA218);
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v164 - 1) + 9) & 1) == 0)
    goto LABEL_13;
  if (v58 != 1048592)
  {
LABEL_93:
    if (v58 == 546)
      goto LABEL_13;
    goto LABEL_94;
  }
  v162 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
  v163 = **(_QWORD **)(a1 + 7376);
LABEL_157:
  if (v163 != v162[62])
    goto LABEL_162;
LABEL_158:
  v165 = *(_DWORD *)(a1 + 12);
  if (!v165)
  {
    __break(0xC471u);
    JUMPOUT(0x197EDA838);
  }
  v166 = v165 - 1;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v166 + 9) & 1) == 0
    && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v166 + 11) & 2) == 0)
  {
    goto LABEL_13;
  }
  if (v58 == 1048592)
  {
    v162 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
    v163 = **(_QWORD **)(a1 + 7376);
LABEL_162:
    if (v163 == v162[16])
      goto LABEL_13;
  }
LABEL_94:
  v59 = 0;
  if (!JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 3, 0, 0, 0))
  {
    if (*v15 != 20 && (*v15 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse this destructuring pattern");
      goto LABEL_132;
    }
    goto LABEL_131;
  }
LABEL_17:
  v76 = *v15;
  if (*v15 != 3)
  {
    if (v76 != 20 && (v76 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[15]>(a1);
      goto LABEL_132;
    }
    goto LABEL_131;
  }
  v77 = *(_DWORD *)(a1 + 7400);
  v78 = *(_DWORD *)(a1 + 7412);
  v79 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v77;
  *(_DWORD *)(a1 + 7448) = v78;
  *(_DWORD *)(a1 + 7452) = v79;
  v80 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v80 + 4) = v77;
  v81 = *(_DWORD *)(a1 + 12);
  if (!v81)
  {
    __break(0xC471u);
    JUMPOUT(0x197EDA810);
  }
  v82 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v81 - 1) + 9) & 1;
  *(_BYTE *)(v80 + 56) = 0;
  v83 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v80, a1 + 7368, 0, v82, v72, v73, v74, v75);
  *(_DWORD *)(a1 + 7368) = v83;
  if (v83)
  {
    if (v83 != 20 && (v83 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected exception handler to be a block statement");
      goto LABEL_132;
    }
    goto LABEL_131;
  }
  v84 = JSC::Parser<JSC::Lexer<char16_t>>::parseBlockStatement<JSC::SyntaxChecker>(a1, a2, 1, v71, v72, v73, v74, v75);
  if (!v84)
  {
    if (*v15 != 20 && (*v15 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Unable to parse 'catch' block");
      goto LABEL_132;
    }
LABEL_131:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_132:
    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v170, (uint64_t *)a1, 0, v71, v72, v73, v74, v75);
    v160 = v171;
    if (v171)
    {
      v171 = 0;
      LODWORD(v172) = 0;
      WTF::fastFree((unint64_t)v160, v153, v154, v155, v156, v157, v158, v159);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v170, (WTF::AtomStringImpl *)v153, v154, v155, v156, v157, v158, v159);
    goto LABEL_135;
  }
  v85 = v84;
  JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v170, (uint64_t *)a1, 0, v71, v72, v73, v74, v75);
  JSC::VariableEnvironment::operator=((uint64_t)&v167, (uint64_t)v170, v86, v87, v88, v89, v90, v91);
  v92 = v171;
  v171 = 0;
  v172 = 0;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v170, v93, v94, v95, v96, v97, v98, v99);
  if (!v59)
    goto LABEL_72;
  v100 = v167;
  if (v167)
    v101 = *(_DWORD *)(v167 - 12);
  else
    v101 = 0;
  LODWORD(v102) = (_DWORD)v169;
  if (v169)
  {
    v102 = *v169;
    if (*v169)
      LODWORD(v102) = *(_DWORD *)(v102 - 12);
  }
  if ((_DWORD)v102 + v101 != 1)
    goto LABEL_39;
  v103 = *(WTF::StringImpl **)v59;
  if (!*(_QWORD *)v59)
  {
    if (v167)
      goto LABEL_28;
LABEL_39:
    __break(0xC471u);
    goto LABEL_182;
  }
  v104 = *(_DWORD *)v103;
  *(_DWORD *)v103 += 2;
  v100 = v167;
  if (!v167)
  {
    if (v104)
    {
      *(_DWORD *)v103 = v104;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v103, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    goto LABEL_39;
  }
LABEL_28:
  v105 = *(_DWORD *)(v100 - 8);
  v106 = *((_DWORD *)v103 + 4);
  if ((v106 & 0x20) != 0)
    v106 = *((_DWORD *)v103 + 8);
  v107 = v105 & (v106 >> 8);
  v108 = *(WTF::StringImpl **)(v100 + 16 * v107);
  if (v108 == v103)
  {
    v111 = *(_DWORD *)v103 - 2;
    if (*(_DWORD *)v103 == 2)
    {
      WTF::StringImpl::~StringImpl(v103, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
      goto LABEL_72;
    }
LABEL_71:
    *(_DWORD *)v103 = v111;
    goto LABEL_72;
  }
  v109 = 1;
  do
  {
    v110 = v108;
    if (!v108)
    {
      if (v103)
      {
        if (*(_DWORD *)v103 == 2)
          goto LABEL_90;
        *(_DWORD *)v103 -= 2;
      }
      goto LABEL_39;
    }
    v107 = (v107 + v109) & v105;
    v108 = *(WTF::StringImpl **)(v100 + 16 * v107);
    ++v109;
  }
  while (v108 != v103);
  if (!v103)
    goto LABEL_72;
  v111 = *(_DWORD *)v103 - 2;
  if (*(_DWORD *)v103 != 2)
    goto LABEL_71;
LABEL_90:
  WTF::StringImpl::~StringImpl(v103, v24, v25, v26, v27, v28, v29, v30);
  WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
  if (!v110)
    goto LABEL_39;
LABEL_72:
  *(_DWORD *)(a1 + 7456) = v48;
  v32 = *(_DWORD *)(a1 + 7368);
LABEL_42:
  if (v32 != 536)
  {
    v112 = 0;
    goto LABEL_44;
  }
  v119 = *(_DWORD *)(a1 + 7400);
  v120 = *(_DWORD *)(a1 + 7412);
  v121 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v119;
  *(_DWORD *)(a1 + 7448) = v120;
  *(_DWORD *)(a1 + 7452) = v121;
  v122 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v122 + 4) = v119;
  v123 = *(_DWORD *)(a1 + 12);
  if (!v123)
  {
    __break(0xC471u);
    JUMPOUT(0x197EDA828);
  }
  v124 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v123 - 1) + 9) & 1;
  *(_BYTE *)(v122 + 56) = 0;
  v125 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v122, a1 + 7368, 0, v124, v27, v28, v29, v30);
  *(_DWORD *)(a1 + 7368) = v125;
  if (v125)
  {
    if (v125 == 20 || (v125 & 0x100000) != 0)
      goto LABEL_142;
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected block statement for finally body");
LABEL_143:
    v113 = 0;
  }
  else
  {
    v112 = JSC::Parser<JSC::Lexer<char16_t>>::parseBlockStatement<JSC::SyntaxChecker>(a1, a2, 0, v26, v27, v28, v29, v30);
    if (!v112)
    {
      if (*v15 != 20 && (*v15 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse finally body");
        goto LABEL_143;
      }
LABEL_142:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      goto LABEL_143;
    }
LABEL_44:
    if (!(v112 | v85))
    {
      if (*v15 != 20 && (*v15 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Try statements must have at least a catch or finally block");
        goto LABEL_143;
      }
      goto LABEL_142;
    }
    v113 = 43;
    if (v31 != v23 && !v112)
    {
      v116 = *(_DWORD *)(a1 + 12);
      if (!v116)
      {
        __break(0xC471u);
        JUMPOUT(0x197EDA818);
      }
      v117 = v116 - 1;
      do
      {
        v118 = v117;
        if (!v117)
          break;
        --v117;
      }
      while ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v118 + 12) & 0x40) == 0);
      if (v116 <= v118)
      {
        __break(0xC471u);
        JUMPOUT(0x197EDA820);
      }
      v113 = 43;
    }
  }
  if (v92)
    WTF::fastFree((unint64_t)v92, v24, v25, v26, v27, v28, v29, v30);
LABEL_49:
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v167, v24, v25, v26, v27, v28, v29, v30);
  return v113;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseDebuggerStatement<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  result = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(result + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (v13)
  {
    v14 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
    *(_BYTE *)(result + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)result, a1 + 7368, 0, v14, a5, a6, a7, a8);
    if (JSC::Parser<JSC::Lexer<char16_t>>::autoSemiColon(a1, v15, v16, v17, v18, v19, v20, v21))
    {
      return 43;
    }
    else
    {
      v22 = *(_DWORD *)(a1 + 7368);
      if (v22 != 20 && (v22 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Debugger keyword must be followed by a ';'");
      }
      else
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      }
      return 0;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[96]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Function declarations are only allowed inside block statements or at the top level of a program");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[5],char const(&)[15]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "(");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "start");
    WTF::PrintStream::printf(v3, "%s", " an ");
    WTF::PrintStream::printf(v3, "%s", "'if' condition");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[15]>(uint64_t a1, const char *a2, const char *a3)
{
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  void (**v31)(WTF::StringPrintStream *__hidden);
  WTF *v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v31 = off_1E3572250;
    v32 = (WTF *)v34;
    v33 = xmmword_199122F80;
    v34[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v31);
    v6 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v31[4])(&v31);
    WTF::PrintStream::printf(v6, "%s", ". ");
    v31[5]((WTF::StringPrintStream *)&v31);
    v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v31[4])(&v31);
    WTF::PrintStream::printf(v7, "%s", "Expected '");
    WTF::PrintStream::printf(v7, "%s", a2);
    WTF::PrintStream::printf(v7, "%s", "' to ");
    WTF::PrintStream::printf(v7, "%s", "end");
    WTF::PrintStream::printf(v7, "%s", " an ");
    WTF::PrintStream::printf(v7, "%s", a3);
    WTF::PrintStream::printf(v7, "%s", ".");
    v31[5]((WTF::StringPrintStream *)&v31);
    WTF::String::fromUTF8WithLatin1Fallback(v32, v33, &v30);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v30, v8, v9, v10, v11, v12, v13);
    v21 = v30;
    v30 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    if (v32 != (WTF *)v34)
      WTF::fastFree((unint64_t)v32, v14, v15, v16, v17, v18, v19, v20);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[14]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "while");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "do-while loop");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[24]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "(");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "start");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "do-while loop condition");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[24]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", ")");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "do-while loop condition");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[21]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "(");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "start");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "while loop condition");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[16]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "(");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "start");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "for-loop header");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[14]>(uint64_t a1, const char *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Expected '");
    WTF::PrintStream::printf(v5, "%s", ")");
    WTF::PrintStream::printf(v5, "%s", "' to ");
    WTF::PrintStream::printf(v5, "%s", "end");
    WTF::PrintStream::printf(v5, "%s", " a ");
    WTF::PrintStream::printf(v5, "%s", a2);
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[35],char const(&)[3],char const(&)[11]>(uint64_t a1, const char *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Expected statement as body of for-");
    WTF::PrintStream::printf(v5, "%s", a2);
    WTF::PrintStream::printf(v5, "%s", " statement");
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::parseForStatement<JSC::SyntaxChecker>(JSC::SyntaxChecker::Statement&)::{lambda(void)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  _BYTE v20[24];
  WTF *v21;
  int v22;

  v10 = *(uint64_t **)(a2 + 24);
  if (**(_BYTE **)a2 || **(_BYTE **)(a2 + 8))
  {
    v11 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(v11 + 16))
    {
      *(_QWORD *)(v11 + 16) = 0;
      JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v20, v10, 0, a4, a5, a6, a7, a8);
      JSC::VariableEnvironment::VariableEnvironment((JSC::VariableEnvironment *)a1, (const JSC::VariableEnvironment *)v20);
      v19 = v21;
      if (v21)
      {
        v21 = 0;
        v22 = 0;
        WTF::fastFree((unint64_t)v19, v12, v13, v14, v15, v16, v17, v18);
      }
      JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v20, (WTF::AtomStringImpl *)v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::tryParseDestructuringPatternExpression<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2)
{
  return JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, a2, 5, 0, 0, 0);
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[16]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", ")");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "for-loop header");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[71]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected a reference on the left hand side of an enumeration statement");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[26],char const(&)[3],char const(&)[11]>(uint64_t a1, const char *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Cannot parse subject for-");
    WTF::PrintStream::printf(v5, "%s", a2);
    WTF::PrintStream::printf(v5, "%s", " statement");
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43],char const(&)[3],char const(&)[6]>(uint64_t a1, const char *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Expected a statement as the body of a for-");
    WTF::PrintStream::printf(v5, "%s", a2);
    WTF::PrintStream::printf(v5, "%s", " loop");
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[30]>(uint64_t a1, const char *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Expected '");
    WTF::PrintStream::printf(v5, "%s", a2);
    WTF::PrintStream::printf(v5, "%s", "' to ");
    WTF::PrintStream::printf(v5, "%s", "start");
    WTF::PrintStream::printf(v5, "%s", " a ");
    WTF::PrintStream::printf(v5, "%s", "subject of a 'with' statement");
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[22]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "(");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "start");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "subject of a 'switch'");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[22]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", ")");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "subject of a 'switch'");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[19]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "{");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "start");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "body of a 'switch'");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::parseSwitchClauses<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;

  if (*(_DWORD *)(a1 + 7368) != 516)
    return;
  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197EDCCC4);
  }
  v15 = (_DWORD *)(a1 + 7368);
  v16 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v16, a5, a6, a7, a8);
  v17 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
  v22 = *(_DWORD *)(a1 + 7368);
  if (!v17)
  {
    if (v22 != 20 && (v22 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse switch clause");
      return;
    }
LABEL_20:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return;
  }
  if (v22 != 18)
  {
    if (v22 != 20 && (v22 & 0x100000) == 0)
    {
LABEL_16:
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ':' after switch clause expression");
      return;
    }
    goto LABEL_20;
  }
  v23 = *(_DWORD *)(a1 + 7400);
  v24 = *(_DWORD *)(a1 + 7412);
  v25 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v23;
  *(_DWORD *)(a1 + 7448) = v24;
  *(_DWORD *)(a1 + 7452) = v25;
  v26 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v26 + 4) = v23;
  v27 = *(_DWORD *)(a1 + 12);
  if (!v27)
  {
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x197EDCCB4);
  }
  v28 = v27 - 1;
  for (i = *(_QWORD *)a1; ; i = *(_QWORD *)a1)
  {
    v30 = *(_BYTE *)(i + 720 * v28 + 9) & 1;
    *(_BYTE *)(v26 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v26, a1 + 7368, 0, v30, v18, v19, v20, v21);
    if (!JSC::Parser<JSC::Lexer<char16_t>>::parseSourceElements<JSC::SyntaxChecker>(a1, a2, 1))
      break;
    if (*v15 != 516)
      return;
    v35 = *(_DWORD *)(a1 + 7400);
    v36 = *(_DWORD *)(a1 + 7412);
    v37 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v35;
    *(_DWORD *)(a1 + 7448) = v36;
    *(_DWORD *)(a1 + 7452) = v37;
    v38 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v38 + 4) = v35;
    v39 = *(_DWORD *)(a1 + 12);
    if (!v39)
      goto LABEL_37;
    v40 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v39 - 1) + 9) & 1;
    *(_BYTE *)(v38 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v38, a1 + 7368, 0, v40, v31, v32, v33, v34);
    v41 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::SyntaxChecker>(a1, a2);
    v42 = *(_DWORD *)(a1 + 7368);
    if (!v41)
    {
      if (v42 == 20 || (v42 & 0x100000) != 0)
        goto LABEL_20;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse switch case expression");
      return;
    }
    if (v42 != 18)
    {
      if (v42 == 20 || (v42 & 0x100000) != 0)
        goto LABEL_20;
      goto LABEL_16;
    }
    v43 = *(_DWORD *)(a1 + 7400);
    v44 = *(_DWORD *)(a1 + 7412);
    v45 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v43;
    *(_DWORD *)(a1 + 7448) = v44;
    *(_DWORD *)(a1 + 7452) = v45;
    v26 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v26 + 4) = v43;
    v46 = *(_DWORD *)(a1 + 12);
    if (!v46)
    {
      __break(0xC471u);
      JUMPOUT(0x197EDCCBCLL);
    }
    v28 = v46 - 1;
  }
  if (*v15 == 20 || (*v15 & 0x100000) != 0)
    goto LABEL_20;
  if (!*(_QWORD *)(a1 + 7360))
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of a switch clause");
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[19]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "}");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "body of a 'switch'");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[15]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "(");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "start");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "'catch' target");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[15]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", ")");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " a ");
    WTF::PrintStream::printf(v3, "%s", "'catch' target");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseProperty<JSC::SyntaxChecker>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int *v17;
  int v18;
  _BOOL4 v19;
  char v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  int *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int *v30;
  int v31;
  char v32;
  unsigned __int16 *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  unsigned int v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  int *v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  WTF::StringImpl **v62;
  WTF::StringImpl **v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  int v70;
  int *v71;
  uint64_t v72;
  int *v73;
  int v74;
  unint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl **NumericIdentifier;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int *v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  WTF::StringImpl *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  WTF::StringImpl *v123;
  BOOL v124;
  int v125;
  WTF::StringImpl *v126;
  void *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  int v135;
  unsigned int v137;
  int v138;
  unsigned int *v139;
  int v140;
  _DWORD *v141;
  int v142;
  WTF::AtomStringImpl *v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  int v159;
  WTF::AtomStringImpl *v160;
  uint64_t v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  WTF::AtomStringImpl *v171;
  unint64_t *v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v201;
  uint64_t v202;
  char v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  const char *v209;
  char v210;
  int v211;
  int v212;
  int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  int v220;
  int v221;
  int v222;
  int v223;
  uint64_t v224;
  int v225;
  int v226;
  int v227;
  int v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  int *v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  int v240;
  int v241;
  int v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  int v252;
  int v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  int v257;
  char v258;
  uint64_t v259;
  unint64_t *v260;
  uint64_t v261;
  WTF::StringImpl **v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int *v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char v280;
  int v281;
  int v282;
  int v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  unint64_t v289;
  void *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  int v298;
  int v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  _DWORD *v303;
  char v304;
  unsigned int v305;
  int v306;
  char v307;
  char v308;
  int v309;
  int *v310;
  int *v311;
  unsigned int v312;
  char *v313;
  const char *v314;
  const char *v315;
  __int128 v316;
  int v317;
  __int128 v318;
  uint64_t v319;

  LOBYTE(v317) = 0;
  v10 = a1 + 7368;
  v11 = *(_DWORD *)(a1 + 7368);
  if (v11 == 191488)
  {
    v12 = *(_DWORD *)(a1 + 7420);
    v211 = *(_DWORD *)(a1 + 7400);
    v212 = *(_DWORD *)(a1 + 7412);
    v213 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v211;
    *(_DWORD *)(a1 + 7448) = v212;
    *(_DWORD *)(a1 + 7452) = v213;
    v214 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v214 + 4) = v211;
    v215 = *(_DWORD *)(a1 + 12);
    if (!v215)
    {
      __break(0xC471u);
      JUMPOUT(0x197EDE894);
    }
    v216 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v215 - 1) + 9) & 1;
    *(_BYTE *)(v214 + 56) = 0;
    v217 = v10;
    v218 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v214, v10, 0, v216, a5, a6, a7, a8);
    v10 = v217;
    v14 = v218;
    *(_DWORD *)(a1 + 7368) = v218;
    v13 = 18;
  }
  else
  {
    v12 = 0;
    v13 = 5;
    v14 = *(_DWORD *)(a1 + 7368);
  }
  v15 = a1 + 7344;
  v16 = v317;
  v17 = (int *)(a1 + 7420);
  if (v14 != 12)
  {
    v18 = 0;
    if (v14 <= 36)
    {
      v70 = 1;
      v71 = (int *)(a1 + 7420);
      switch(v14)
      {
        case 4:
LABEL_223:
          v317 = v16;
          if (v11 == 191488)
            v225 = v12;
          else
            v225 = *v71;
          v226 = *(_DWORD *)(a1 + 7400);
          v227 = *(_DWORD *)(a1 + 7412);
          v228 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v226;
          *(_DWORD *)(a1 + 7448) = v227;
          *(_DWORD *)(a1 + 7452) = v228;
          v229 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v229 + 4) = v226;
          v230 = *(_DWORD *)(a1 + 12);
          if (!v230)
          {
            __break(0xC471u);
            JUMPOUT(0x197EDE868);
          }
          v231 = v15;
          v232 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v230 - 1) + 9) & 1;
          *(_BYTE *)(v229 + 56) = 0;
          v233 = (int *)v10;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v229, v10, 0, v232, a5, a6, a7, a8);
          LODWORD(v318) = 0;
          *((_QWORD *)&v318 + 1) = *(_QWORD *)(a1 + 7496);
          v319 = a1;
          *(_QWORD *)(a1 + 7496) = &v318;
          v234 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v318);
          *(_QWORD *)(v319 + 7496) = *((_QWORD *)&v318 + 1);
          v239 = *(_DWORD *)(a1 + 7368);
          if (!v234)
          {
            if (v239 == 20 || (v239 & 0x100000) != 0)
              goto LABEL_277;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse computed property name");
            goto LABEL_280;
          }
          if (v239 != 5)
          {
            if (v239 == 20 || (v239 & 0x100000) != 0)
              goto LABEL_277;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[23]>(a1);
            goto LABEL_280;
          }
          v240 = *(_DWORD *)(a1 + 7400);
          v241 = *(_DWORD *)(a1 + 7412);
          v242 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v240;
          *(_DWORD *)(a1 + 7448) = v241;
          *(_DWORD *)(a1 + 7452) = v242;
          v243 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v243 + 4) = v240;
          v244 = *(_DWORD *)(a1 + 12);
          if (!v244)
          {
            __break(0xC471u);
            JUMPOUT(0x197EDE870);
          }
          v245 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v244 - 1) + 9) & 1;
          *(_BYTE *)(v243 + 56) = 0;
          v246 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v243, (uint64_t)v233, 0, v245, v235, v236, v237, v238);
          *(_DWORD *)(a1 + 7368) = v246;
          if (v246 == 2)
          {
            v258 = *(_BYTE *)(v231 + 130);
            *(_BYTE *)(v231 + 130) = v13;
            JSC::Parser<JSC::Lexer<char16_t>>::parsePropertyMethod<JSC::SyntaxChecker>(a1, a2, *(WTF::StringImpl ***)(*(_QWORD *)(a1 + 7216) + 41952), v225);
            v67 = 0;
            if (*(_QWORD *)(a1 + 7360))
              LOWORD(v68) = 0;
            else
              LOWORD(v68) = 9;
            *(_BYTE *)(v231 + 130) = v258;
            return v67 & 0x10000 | (unsigned __int16)v68;
          }
          if (v13 == 5)
          {
            if (v246 == 18)
            {
              v251 = *(_DWORD *)(a1 + 7400);
              v252 = *(_DWORD *)(a1 + 7412);
              v253 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v251;
              *(_DWORD *)(a1 + 7448) = v252;
              *(_DWORD *)(a1 + 7452) = v253;
              v254 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v254 + 4) = v251;
              v255 = *(_DWORD *)(a1 + 12);
              if (!v255)
              {
                __break(0xC471u);
                JUMPOUT(0x197EDE878);
              }
              v256 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v255 - 1) + 9) & 1;
              *(_BYTE *)(v254 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v254, (uint64_t)v233, 0, v256, v247, v248, v249, v250);
              LODWORD(v318) = 0;
              *((_QWORD *)&v318 + 1) = *(_QWORD *)(a1 + 7496);
              v319 = a1;
              *(_QWORD *)(a1 + 7496) = &v318;
              v257 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v318);
              *(_QWORD *)(v319 + 7496) = *((_QWORD *)&v318 + 1);
              if (v257)
              {
                v67 = 0;
                LOWORD(v68) = 9;
                return v67 & 0x10000 | (unsigned __int16)v68;
              }
              v208 = *v233;
              goto LABEL_192;
            }
            if (v246 != 20 && (v246 & 0x100000) == 0)
              goto LABEL_278;
          }
          else if (v246 != 20 && (v246 & 0x100000) == 0)
          {
            goto LABEL_172;
          }
          goto LABEL_277;
        case 9:
        case 10:
LABEL_59:
          v72 = v15;
          v73 = (int *)v10;
          v317 = v16;
          if (v11 == 191488)
            v74 = v12;
          else
            v74 = *v71;
          v75 = *(unint64_t **)(a1 + 7248);
          if (!v75)
          {
            v75 = (unint64_t *)WTF::fastMalloc((WTF *)0x818);
            v75[1] = 0;
            v75[2] = 0;
            *v75 = 0;
            WTF::SegmentedVector<JSC::Identifier,64ul>::clear(v75, v164, v165, v166, v167, v168, v169, v170);
            bzero(v75 + 3, 0x800uLL);
            v172 = *(unint64_t **)(a1 + 7248);
            *(_QWORD *)(a1 + 7248) = v75;
            if (v172)
            {
              WTF::SegmentedVector<JSC::Identifier,64ul>::~SegmentedVector(v172, v171, v15, a4, a5, a6, a7, a8);
              WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
              v75 = *(unint64_t **)(a1 + 7248);
            }
          }
          NumericIdentifier = (WTF::StringImpl **)JSC::IdentifierArena::makeNumericIdentifier((JSC::IdentifierArena *)v75, *(uint64_t ***)(a1 + 7216), *(double *)(a1 + 7376), (const WTF::StringImpl *)v15, a4, a5, a6, a7, a8);
          v81 = *(_DWORD *)(a1 + 7400);
          v82 = *(_DWORD *)(a1 + 7412);
          v83 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v81;
          *(_DWORD *)(a1 + 7448) = v82;
          *(_DWORD *)(a1 + 7452) = v83;
          v84 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v84 + 4) = v81;
          v85 = *(_DWORD *)(a1 + 12);
          if (!v85)
          {
            __break(0xC471u);
            JUMPOUT(0x197EDE848);
          }
          v86 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v85 - 1) + 9) & 1;
          *(_BYTE *)(v84 + 56) = 0;
          v87 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v84, (uint64_t)v73, 0, v86, v76, v77, v78, v79);
          *(_DWORD *)(a1 + 7368) = v87;
          if (v87 == 2)
          {
            v210 = *(_BYTE *)(v72 + 130);
            *(_BYTE *)(v72 + 130) = v13;
            JSC::Parser<JSC::Lexer<char16_t>>::parsePropertyMethod<JSC::SyntaxChecker>(a1, a2, NumericIdentifier, v74);
            v67 = 0;
            LOWORD(v68) = *(_QWORD *)(a1 + 7360) == 0;
            *(_BYTE *)(v72 + 130) = v210;
            return v67 & 0x10000 | (unsigned __int16)v68;
          }
          if (v13 != 5)
            goto LABEL_282;
          if (v87 != 18)
            goto LABEL_273;
          v92 = *(_DWORD *)(a1 + 7400);
          v93 = *(_DWORD *)(a1 + 7412);
          v94 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v92;
          *(_DWORD *)(a1 + 7448) = v93;
          *(_DWORD *)(a1 + 7452) = v94;
          v95 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v95 + 4) = v92;
          v96 = *(_DWORD *)(a1 + 12);
          if (!v96)
          {
            __break(0xC471u);
            JUMPOUT(0x197EDE850);
          }
          v97 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v96 - 1) + 9) & 1;
          *(_BYTE *)(v95 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v95, (uint64_t)v73, 0, v97, v88, v89, v90, v91);
          LODWORD(v318) = 0;
          *((_QWORD *)&v318 + 1) = *(_QWORD *)(a1 + 7496);
          v319 = a1;
          *(_QWORD *)(a1 + 7496) = &v318;
          v98 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v318);
          *(_QWORD *)(v319 + 7496) = *((_QWORD *)&v318 + 1);
          if (v98)
          {
            v99 = *(_QWORD *)a2;
            goto LABEL_70;
          }
          goto LABEL_191;
        case 11:
LABEL_247:
          v315 = a2;
          v311 = (int *)v10;
          v317 = v16;
          v259 = v15;
          v260 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
          v261 = v259;
          JSC::IdentifierArena::makeBigIntDecimalIdentifier((JSC::IdentifierArena *)v260, *(JSC::VM **)(a1 + 7216), *(const JSC::Identifier **)(a1 + 7376), *(unsigned __int8 *)(v259 + 40));
          if (!v262)
          {
            if (*v311 == 20 || (*v311 & 0x100000) != 0)
              goto LABEL_277;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse big int property name");
            goto LABEL_280;
          }
          NumericIdentifier = v262;
          v267 = &v317;
          if (v70)
            v267 = (int *)(a1 + 7420);
          v268 = *v267;
          if (v11 == 191488)
            v269 = v12;
          else
            v269 = v268;
          v270 = *(_DWORD *)(a1 + 7400);
          v271 = *(_DWORD *)(a1 + 7412);
          v272 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v270;
          *(_DWORD *)(a1 + 7448) = v271;
          *(_DWORD *)(a1 + 7452) = v272;
          v273 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v273 + 4) = v270;
          v274 = *(_DWORD *)(a1 + 12);
          if (!v274)
          {
            __break(0xC471u);
            JUMPOUT(0x197EDE89CLL);
          }
          v275 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v274 - 1) + 9) & 1;
          *(_BYTE *)(v273 + 56) = 0;
          v87 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v273, (uint64_t)v311, 0, v275, v263, v264, v265, v266);
          *(_DWORD *)(a1 + 7368) = v87;
          if (v87 == 2)
          {
            v280 = *(_BYTE *)(v261 + 130);
            *(_BYTE *)(v261 + 130) = v13;
            JSC::Parser<JSC::Lexer<char16_t>>::parsePropertyMethod<JSC::SyntaxChecker>(a1, v315, NumericIdentifier, v269);
            v67 = 0;
            LOWORD(v68) = *(_QWORD *)(a1 + 7360) == 0;
            *(_BYTE *)(v261 + 130) = v280;
            return v67 & 0x10000 | (unsigned __int16)v68;
          }
          if (v13 != 5)
          {
LABEL_282:
            if (v87 != 20 && (v87 & 0x100000) == 0)
              goto LABEL_172;
            goto LABEL_277;
          }
          if (v87 == 18)
          {
            v281 = *(_DWORD *)(a1 + 7400);
            v282 = *(_DWORD *)(a1 + 7412);
            v283 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v281;
            *(_DWORD *)(a1 + 7448) = v282;
            *(_DWORD *)(a1 + 7452) = v283;
            v284 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v284 + 4) = v281;
            v285 = *(_DWORD *)(a1 + 12);
            if (!v285)
            {
              __break(0xC471u);
              JUMPOUT(0x197EDE8ACLL);
            }
            v286 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v285 - 1) + 9) & 1;
            *(_BYTE *)(v284 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v284, (uint64_t)v311, 0, v286, v276, v277, v278, v279);
            if (!JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1))
            {
              v208 = *v311;
              goto LABEL_192;
            }
            v99 = *(_QWORD *)v315;
LABEL_70:
            if (*NumericIdentifier == *(WTF::StringImpl **)(*(_QWORD *)(v99 + 41952) + 16))
              v67 = 0x10000;
            else
              v67 = 0;
            LOWORD(v68) = v67 | 1;
            return v67 & 0x10000 | (unsigned __int16)v68;
          }
LABEL_273:
          if (v87 == 20 || (v87 & 0x100000) != 0)
            goto LABEL_277;
LABEL_278:
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected ':' after property name");
          break;
        case 14:
LABEL_222:
          v314 = a2;
          v20 = 0;
          v19 = 0;
          v317 = v16;
          v14 = 14;
          goto LABEL_8;
        default:
          goto LABEL_87;
      }
      goto LABEL_280;
    }
    if (v14 == 37)
      goto LABEL_296;
    if ((v14 - 545) < 2)
      goto LABEL_6;
    if (v14 != 1048592)
    {
LABEL_87:
      v317 = v16;
      if ((v14 & 0x200) != 0)
      {
        v314 = a2;
        goto LABEL_7;
      }
      if (v14 != 20 && (v14 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected a property name");
        goto LABEL_280;
      }
LABEL_277:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      goto LABEL_280;
    }
  }
  if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896)
    && !*(_BYTE *)(a1 + 7384))
  {
    v310 = (int *)v10;
    v313 = (char *)(a1 + 7344);
    v314 = a2;
    v16 = *v17;
    if (v11 == 191488)
    {
LABEL_220:
      v18 = 1;
LABEL_221:
      v15 = a1 + 7344;
      v10 = (uint64_t)v310;
      goto LABEL_6;
    }
    v316 = *(_OWORD *)(a1 + 7296);
    v142 = *(_DWORD *)(a1 + 7316);
    v318 = *(_OWORD *)(a1 + 7320);
    v319 = *(_QWORD *)(a1 + 7336);
    v308 = *v313;
    v309 = v142;
    v143 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
    v144 = *(unsigned int *)(a1 + 7404);
    v145 = *(_QWORD *)(a1 + 7288);
    v306 = *(_DWORD *)(v145 + 4);
    v307 = *(_BYTE *)(a1 + 7345);
    v304 = *(_BYTE *)(v145 + 56);
    v305 = *(_DWORD *)v145;
    v146 = *(_DWORD *)(a1 + 7400);
    v147 = *(_DWORD *)(a1 + 7412);
    *(_DWORD *)(a1 + 7444) = v146;
    *(_DWORD *)(a1 + 7448) = v147;
    *(_DWORD *)(a1 + 7452) = v144;
    *(_DWORD *)(v145 + 4) = v146;
    v148 = *(_DWORD *)(a1 + 12);
    if (!v148)
    {
      __break(0xC471u);
      JUMPOUT(0x197EDE8A4);
    }
    v149 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v148 - 1) + 9) & 1;
    *(_BYTE *)(v145 + 56) = 0;
    v150 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v145, v10, 0, v149, a5, a6, a7, a8);
    v14 = v150;
    *(_DWORD *)(a1 + 7368) = v150;
    if (v150 <= 0x12 && ((1 << v150) & 0x40046) != 0)
    {
      v317 = v16;
      JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), v143, v144, a4, a5, a6, a7, a8);
      v155 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v155 = v305;
      *(_BYTE *)(v155 + 56) = v304;
      v156 = *(_DWORD *)(a1 + 7400);
      v157 = *(_DWORD *)(a1 + 7412);
      v158 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v156;
      *(_DWORD *)(a1 + 7448) = v157;
      *(_DWORD *)(a1 + 7452) = v158;
      *(_DWORD *)(v155 + 4) = v156;
      v159 = *(_DWORD *)(a1 + 12);
      if (!v159)
      {
        __break(0xC471u);
        JUMPOUT(0x197EDE8B4);
      }
      v14 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v155, (uint64_t)v310, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v159 - 1) + 9) & 1, v151, v152, v153, v154);
      *(_DWORD *)(a1 + 7368) = v14;
      *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v306;
      *(_OWORD *)(a1 + 7296) = v316;
      *(_DWORD *)(a1 + 7312) = 0;
      *(_DWORD *)(a1 + 7316) = v309;
      *(_OWORD *)(a1 + 7320) = v318;
      *(_QWORD *)(a1 + 7336) = v319;
      *v313 = v308;
      *(_BYTE *)(a1 + 7345) = v307;
      v163 = *(WTF::StringImpl **)(a1 + 7360);
      *(_QWORD *)(a1 + 7360) = 0;
      if (v163)
      {
        if (*(_DWORD *)v163 == 2)
        {
          WTF::StringImpl::~StringImpl(v163, v160, v161, v162, a5, a6, a7, a8);
          WTF::fastFree(v289, v290, v291, v292, v293, v294, v295, v296);
          v14 = *v310;
        }
        else
        {
          *(_DWORD *)v163 -= 2;
        }
      }
      v18 = 1;
      v13 = 5;
      v10 = (uint64_t)v310;
      v15 = a1 + 7344;
      goto LABEL_7;
    }
    v219 = *(_QWORD *)(a1 + 7288);
    if (*(_BYTE *)(v219 + 56))
    {
      if (v14 != 20 && (v14 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a property name following keyword 'async'");
        goto LABEL_280;
      }
      goto LABEL_277;
    }
    if (v14 == 191488)
    {
      v220 = *(_DWORD *)(a1 + 7400);
      v221 = *(_DWORD *)(a1 + 7412);
      v222 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v220;
      *(_DWORD *)(a1 + 7448) = v221;
      *(_DWORD *)(a1 + 7452) = v222;
      *(_DWORD *)(v219 + 4) = v220;
      v223 = *(_DWORD *)(a1 + 12);
      if (!v223)
      {
        __break(0xC471u);
        JUMPOUT(0x197EDE8BCLL);
      }
      v224 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v223 - 1) + 9) & 1;
      *(_BYTE *)(v219 + 56) = 0;
      v14 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v219, (uint64_t)v310, 0, v224, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v14;
      v13 = 17;
    }
    else
    {
      v13 = 10;
    }
    v18 = 1;
    if (v14 <= 36)
    {
      v70 = 0;
      v71 = &v317;
      v15 = a1 + 7344;
      v10 = (uint64_t)v310;
      switch(v14)
      {
        case 4:
          goto LABEL_223;
        case 5:
        case 6:
        case 7:
        case 8:
        case 13:
          goto LABEL_87;
        case 9:
        case 10:
          goto LABEL_59;
        case 11:
          goto LABEL_247;
        case 12:
          goto LABEL_219;
        case 14:
          goto LABEL_222;
        default:
          v15 = a1 + 7344;
          v10 = (uint64_t)v310;
          goto LABEL_87;
      }
    }
    v10 = (uint64_t)v310;
    if (v14 != 37)
    {
      if ((v14 - 545) < 2)
        goto LABEL_221;
      v15 = a1 + 7344;
      v10 = (uint64_t)v310;
      if (v14 == 1048592)
      {
LABEL_219:
        if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896)
          && !*(_BYTE *)(a1 + 7384))
        {
          v16 = *v17;
        }
        goto LABEL_220;
      }
      goto LABEL_87;
    }
LABEL_296:
    v297 = *(_DWORD *)(a1 + 7400);
    v298 = *(_DWORD *)(a1 + 7412);
    v299 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v297;
    *(_DWORD *)(a1 + 7448) = v298;
    *(_DWORD *)(a1 + 7452) = v299;
    v300 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v300 + 4) = v297;
    v301 = *(_DWORD *)(a1 + 12);
    if (!v301)
    {
      __break(0xC471u);
      JUMPOUT(0x197EDE858);
    }
    v302 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v301 - 1) + 9) & 1;
    *(_BYTE *)(v300 + 56) = 0;
    v303 = (_DWORD *)v10;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v300, v10, 0, v302, a5, a6, a7, a8);
    if (JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpressionOrPropagateErrorClass<JSC::SyntaxChecker>(a1, (uint64_t)a2))
    {
      v67 = 0;
      LOWORD(v68) = 32;
      return v67 & 0x10000 | (unsigned __int16)v68;
    }
    if (*v303 != 20 && (*v303 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse subject of a spread operation");
      goto LABEL_280;
    }
    goto LABEL_277;
  }
  v18 = 0;
LABEL_6:
  v314 = a2;
  v317 = v16;
LABEL_7:
  v19 = *(_BYTE *)(v15 + 40) == 0;
  v20 = 1;
LABEL_8:
  v21 = *(WTF::StringImpl ***)(a1 + 7376);
  v22 = *(unsigned int *)(a1 + 7408);
  v124 = v18 == 0;
  v23 = &v317;
  if (v124)
    v23 = (int *)(a1 + 7420);
  v24 = *v23;
  if (v11 == 191488)
    v25 = v12;
  else
    v25 = v24;
  v26 = *(_DWORD *)(a1 + 7412);
  if (v13 != 18
    && v19
    && ((v27 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952), *v21 == *(WTF::StringImpl **)(v27 + 1376))
     || *v21 == *(WTF::StringImpl **)(v27 + 2296)))
  {
    v312 = *(_DWORD *)(a1 + 7408);
    v137 = *(_DWORD *)(a1 + 7400);
    v138 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v137;
    *(_DWORD *)(a1 + 7448) = v26;
    *(_DWORD *)(a1 + 7452) = v138;
    v139 = *(unsigned int **)(a1 + 7288);
    v139[1] = v137;
    v140 = *(_DWORD *)(a1 + 12);
    if (!v140)
    {
      __break(0xC471u);
      JUMPOUT(0x197EDE860);
    }
    v100 = v15;
    v101 = (int *)v10;
    v102 = JSC::Lexer<char16_t>::lexExpectIdentifier(v139, v10, 1u, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v140 - 1) + 9) & 1, a5, a6, a7, a8);
  }
  else
  {
    v28 = *(_DWORD *)(a1 + 7400);
    v29 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v28;
    *(_DWORD *)(a1 + 7448) = v26;
    *(_DWORD *)(a1 + 7452) = v29;
    v30 = *(unsigned int **)(a1 + 7288);
    v30[1] = v28;
    v31 = *(_DWORD *)(a1 + 12);
    if (!v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197EDE820);
    }
    v32 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v31 - 1) + 9);
    v33 = (unsigned __int16 *)*((_QWORD *)v30 + 10);
    v34 = *((_QWORD *)v30 + 12);
    if ((unint64_t)v33 < v34 && (*v33 | 0x20u) - 97 <= 0x19)
    {
      v35 = *((_QWORD *)v30 + 11);
      v36 = ((unint64_t)v33 - v35) >> 1;
      v37 = (unint64_t)(*((_QWORD *)v30 + 14) - v35) >> 1;
      v38 = *v30 | ((unint64_t)v36 << 32);
      v39 = v33 + 1;
      do
      {
        v40 = v39;
        if ((unint64_t)v39 >= v34)
        {
          LOWORD(v41) = 0;
LABEL_30:
          *((_WORD *)v30 + 88) = v41;
          *((_QWORD *)v30 + 10) = v40;
          *(_QWORD *)(a1 + 7376) = 0;
          *(_DWORD *)(a1 + 7400) = *v30;
          v43 = *((_QWORD *)v30 + 11);
          *(_DWORD *)(a1 + 7404) = (unint64_t)(*((_QWORD *)v30 + 14) - v43) >> 1;
          *(_DWORD *)(a1 + 7408) = ((unint64_t)v33 - v43) >> 1;
          *(_DWORD *)(a1 + 7412) = (unint64_t)(*((_QWORD *)v30 + 10) - v43) >> 1;
          *(_QWORD *)(a1 + 7416) = v38;
          *(_DWORD *)(a1 + 7424) = v37;
          v44 = *((_QWORD *)v30 + 11);
          v45 = (unint64_t)(*((_QWORD *)v30 + 10) - v44) >> 1;
          v46 = (unint64_t)(*((_QWORD *)v30 + 14) - v44) >> 1;
          *(_QWORD *)(v15 + 84) = *v30 | ((unint64_t)v45 << 32);
          *(_DWORD *)(a1 + 7436) = v46;
          v47 = 12;
          v30[15] = 12;
          *(_DWORD *)(a1 + 7368) = 12;
          goto LABEL_31;
        }
        ++v39;
        v41 = *v40;
      }
      while (v41 - 48 < 0xA || (v41 | 0x20) - 97 < 0x1A);
      if (v41 <= 0x7F && (v41 - 36 > 0x3B || ((1 << (v41 - 36)) & 0x900000000000001) == 0))
        goto LABEL_30;
    }
    v312 = v22;
    v100 = v15;
    *((_BYTE *)v30 + 56) = 0;
    v101 = (int *)v10;
    v102 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator(v30, v10, 5, v32 & 1, a5, a6, a7, a8);
  }
  v47 = v102;
  *v101 = v102;
  if (((1 << v13) & 0x40400) == 0 && v102 == 18)
  {
    v104 = *(_DWORD *)(a1 + 7400);
    v105 = *(_DWORD *)(a1 + 7412);
    v106 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v104;
    *(_DWORD *)(a1 + 7448) = v105;
    *(_DWORD *)(a1 + 7452) = v106;
    v107 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v107 + 4) = v104;
    v108 = *(_DWORD *)(a1 + 12);
    if (!v108)
    {
      __break(0xC471u);
      JUMPOUT(0x197EDE840);
    }
    v109 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v108 - 1) + 9) & 1;
    *(_BYTE *)(v107 + 56) = 0;
    v73 = v101;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v107, (uint64_t)v101, 0, v109, v103, a6, a7, a8);
    LODWORD(v318) = 0;
    *((_QWORD *)&v318 + 1) = *(_QWORD *)(a1 + 7496);
    v319 = a1;
    *(_QWORD *)(a1 + 7496) = &v318;
    v110 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, v314, &v318);
    v111 = *((_QWORD *)&v318 + 1);
    if (v110)
    {
      *(_QWORD *)(v319 + 7496) = *((_QWORD *)&v318 + 1);
      if (v21 && *v21 == *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v314 + 41952) + 16))
        v68 = 65537;
      else
        v68 = 1;
      v67 = v68 & 0x10000;
      return v67 & 0x10000 | (unsigned __int16)v68;
    }
    if (*((_QWORD *)&v318 + 1))
      **((_DWORD **)&v318 + 1) = v318;
    *(_QWORD *)(v319 + 7496) = v111;
LABEL_191:
    v208 = *v73;
LABEL_192:
    if (v208 != 20 && (v208 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse expression for property declaration");
      goto LABEL_280;
    }
    goto LABEL_277;
  }
  v15 = v100;
  v22 = v312;
  if (v102 == 2)
  {
    v204 = *(_BYTE *)(v100 + 130);
    *(_BYTE *)(v100 + 130) = v13;
    JSC::Parser<JSC::Lexer<char16_t>>::parsePropertyMethod<JSC::SyntaxChecker>(a1, v314, v21, v25);
    v67 = 0;
    LOWORD(v68) = *(_QWORD *)(a1 + 7360) == 0;
    *(_BYTE *)(v100 + 130) = v204;
    return v67 & 0x10000 | (unsigned __int16)v68;
  }
LABEL_31:
  if (v13 != 5)
  {
    if (v47 != 20 && (v47 & 0x100000) == 0)
    {
LABEL_172:
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a parenthesis for argument list");
      goto LABEL_280;
    }
    goto LABEL_277;
  }
  if ((v20 & 1) == 0)
  {
    if (v47 != 20 && (v47 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected an identifier as property name");
      goto LABEL_280;
    }
    goto LABEL_277;
  }
  if (v47 != 6 && v47 != 1)
  {
    if (v47 == 21)
    {
      v141 = *(_DWORD **)(a1 + 7496);
      if (v141)
      {
        if (!*v141)
          *v141 = 1;
      }
    }
    if (v19)
    {
      v112 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      if (*v21 == *(WTF::StringImpl **)(v112 + 1376))
      {
        v113 = 2;
LABEL_93:
        LOWORD(v68) = JSC::Parser<JSC::Lexer<char16_t>>::parseGetterSetter<JSC::SyntaxChecker>(a1, (uint64_t)v314, v113, v22, 0, a6, a7, a8);
LABEL_281:
        v67 = 0;
        return v67 & 0x10000 | (unsigned __int16)v68;
      }
      if (*v21 == *(WTF::StringImpl **)(v112 + 2296))
      {
        v113 = 4;
        goto LABEL_93;
      }
    }
    if (v47 != 20 && (v47 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        *(_QWORD *)&v318 = *v21;
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[45],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v318);
      }
      goto LABEL_280;
    }
    goto LABEL_277;
  }
  v48 = *(_DWORD *)(a1 + 12);
  if (!v48)
  {
    __break(0xC471u);
    JUMPOUT(0x197EDE828);
  }
  v49 = v48 - 1;
  v50 = *(_QWORD *)a1;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v49 + 9) & 1) != 0 && v14 == 532)
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      *(_QWORD *)&v318 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), v22, v26);
      *((_QWORD *)&v318 + 1) = v206;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[24],char const(&)[16]>(a1, (uint64_t)&v318);
    }
    goto LABEL_280;
  }
  if ((v14 - 531) <= 1)
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      *(_QWORD *)&v318 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), v22, v26);
      *((_QWORD *)&v318 + 1) = v205;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[24]>(a1, (uint64_t)&v318);
    }
    goto LABEL_280;
  }
  if ((v14 & 0x200) == 0)
    goto LABEL_40;
  if ((v14 - 544) >= 3)
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      *(_QWORD *)&v318 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), v22, v26);
      *((_QWORD *)&v318 + 1) = v207;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const(&)[24]>(a1, (uint64_t)&v318);
    }
    goto LABEL_280;
  }
  if (v14 == 546)
  {
    if (*(_BYTE *)v15 && (*(_DWORD *)(v50 + 720 * v49 + 10) & 0x102000) == 0 && *(_DWORD *)(a1 + 7480) != 1)
      goto LABEL_40;
    if (!*(_QWORD *)(a1 + 7360))
    {
      *(_QWORD *)&v318 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
      v209 = "Cannot use 'await' as a ";
LABEL_203:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const(&)[24],char const(&)[2],char const*>(a1, v209, (const char **)&v318);
    }
LABEL_280:
    LOWORD(v68) = 0;
    goto LABEL_281;
  }
  if (v14 != 544)
  {
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v49 + 9) & 1) == 0 && (*(_BYTE *)(v50 + 720 * v49 + 11) & 2) == 0)
      goto LABEL_40;
    if (!*(_QWORD *)(a1 + 7360))
    {
      *(_QWORD *)&v318 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierYieldReason(a1);
      v209 = "Cannot use 'yield' as a ";
      goto LABEL_203;
    }
    goto LABEL_280;
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v49 + 9) & 1) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      *(_QWORD *)&v318 = "in strict mode";
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const(&)[24],char const(&)[2],char const*>(a1, (const char **)&v318);
    }
    goto LABEL_280;
  }
LABEL_40:
  v51 = *v21;
  v52 = v50 + 720 * v49;
  if (*(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 1248) == v51)
    v53 = 2;
  else
    v53 = *(_DWORD *)(v52 + 10) & 2;
  *(_DWORD *)(v52 + 10) = v53 | *(_DWORD *)(v52 + 10) & 0xFFFFFFFD;
  v54 = *(unsigned int *)(v52 + 180);
  if (!(_DWORD)v54)
  {
    __break(0xC471u);
    JUMPOUT(0x197EDE830);
  }
  v55 = v54 - 1;
  v56 = *(_QWORD *)(v50 + 720 * v49 + 168);
  v57 = (unsigned int *)(v56 + 72 * (v54 - 1));
  v58 = (int *)(v57 + 1);
  v59 = v57[1];
  v60 = *v57;
  if (v59 == 8)
  {
    if (v60)
    {
      v61 = *v57;
      v62 = (WTF::StringImpl **)(v56 + 72 * v55 + 8);
      v63 = v62;
      v64 = v61;
      while (*v63 != v51)
      {
        ++v63;
        if (!--v64)
        {
          if (v60 <= 7)
            goto LABEL_50;
          v114 = (_OWORD *)WTF::fastMalloc((WTF *)0x200);
          v115 = 0;
          *(_QWORD *)&v116 = -1;
          *((_QWORD *)&v116 + 1) = -1;
          *v114 = v116;
          v114[1] = v116;
          v114[2] = v116;
          v114[3] = v116;
          v114[4] = v116;
          v114[5] = v116;
          v114[6] = v116;
          v114[7] = v116;
          v114[8] = v116;
          v114[9] = v116;
          v114[10] = v116;
          v114[11] = v116;
          v114[12] = v116;
          v114[13] = v116;
          v114[14] = v116;
          v114[15] = v116;
          v114[16] = v116;
          v114[17] = v116;
          v114[18] = v116;
          v114[19] = v116;
          v114[20] = v116;
          v114[21] = v116;
          v114[22] = v116;
          v114[23] = v116;
          v114[24] = v116;
          v114[25] = v116;
          v114[26] = v116;
          v114[27] = v116;
          v114[28] = v116;
          v114[29] = v116;
          v114[30] = v116;
          v114[31] = v116;
          *v58 = 64;
          do
          {
            v117 = v62[v115];
            if (v117 != (WTF::StringImpl *)-1)
            {
              v118 = ((unint64_t)v117 + ~((_QWORD)v117 << 32)) ^ (((unint64_t)v117 + ~((_QWORD)v117 << 32)) >> 22);
              v119 = 9 * ((v118 + ~(v118 << 13)) ^ ((v118 + ~(v118 << 13)) >> 8));
              v120 = (v119 ^ (v119 >> 15)) + ~((v119 ^ (v119 >> 15)) << 27);
              v121 = v120 ^ (v120 >> 31);
              v122 = v121 & 0x3F;
              v123 = (WTF::StringImpl *)*((_QWORD *)v114 + v122);
              v124 = v123 == (WTF::StringImpl *)-1 || v123 == v117;
              if (!v124)
              {
                LOBYTE(v122) = v121 & 0x3F;
                v125 = 1;
                do
                {
                  v122 = ((_BYTE)v122 + (_BYTE)v125) & 0x3F;
                  v126 = (WTF::StringImpl *)*((_QWORD *)v114 + v122);
                  ++v125;
                }
                while (v126 != (WTF::StringImpl *)-1 && v126 != v117);
              }
              *((_QWORD *)v114 + v122) = v117;
            }
            ++v115;
          }
          while (v115 != 8);
          v60 = *v57;
          *v62 = (WTF::StringImpl *)v114;
          v59 = 64;
          goto LABEL_109;
        }
      }
      goto LABEL_52;
    }
    v61 = 0;
LABEL_50:
    *(_QWORD *)(v56 + 72 * v55 + 8 * v61 + 8) = v51;
  }
  else
  {
LABEL_109:
    if (3 * v59 <= 4 * v60)
    {
      v181 = v56 + 72 * v55;
      v184 = *(_QWORD *)(v181 + 8);
      v183 = (_QWORD *)(v181 + 8);
      v182 = v184;
      v128 = (void *)WTF::fastMalloc((WTF *)(8 * (2 * v59)));
      memset(v128, 255, 8 * (2 * v59));
      *v58 = 2 * v59;
      if (v59)
      {
        v192 = 0;
        v193 = 2 * v59 - 1;
        do
        {
          v194 = *(_QWORD *)(v182 + 8 * v192);
          if (v194 != -1)
          {
            v195 = (~(v194 << 32) + v194) ^ ((unint64_t)(~(v194 << 32) + v194) >> 22);
            v196 = 9 * ((v195 + ~(v195 << 13)) ^ ((v195 + ~(v195 << 13)) >> 8));
            v197 = (v196 ^ (v196 >> 15)) + ~((v196 ^ (v196 >> 15)) << 27);
            v198 = v193 & ((v197 >> 31) ^ v197);
            v199 = *((_QWORD *)v128 + v198);
            if (v199 != -1 && v199 != v194)
            {
              v201 = 1;
              do
              {
                v198 = ((_DWORD)v198 + v201) & v193;
                v202 = *((_QWORD *)v128 + v198);
                ++v201;
              }
              while (v202 != -1 && v202 != v194);
            }
            *((_QWORD *)v128 + v198) = v194;
          }
          ++v192;
        }
        while (v192 != v59);
      }
      WTF::fastFree(v182, v185, v186, v187, v188, v189, v190, v191);
      v59 = *v58;
      *v183 = v128;
    }
    else
    {
      v128 = *(void **)(v56 + 72 * v55 + 8);
    }
    v129 = ((unint64_t)v51 + ~((_QWORD)v51 << 32)) ^ (((unint64_t)v51 + ~((_QWORD)v51 << 32)) >> 22);
    v130 = 9 * ((v129 + ~(v129 << 13)) ^ ((v129 + ~(v129 << 13)) >> 8));
    v131 = (v130 ^ (v130 >> 15)) + ~((v130 ^ (v130 >> 15)) << 27);
    v132 = (v59 - 1) & ((v131 >> 31) ^ v131);
    v133 = (WTF::StringImpl *)*((_QWORD *)v128 + v132);
    if (v133 != (WTF::StringImpl *)-1 && v133 != v51)
    {
      v135 = 1;
      do
      {
        v132 = ((_DWORD)v132 + v135) & (v59 - 1);
        v133 = (WTF::StringImpl *)*((_QWORD *)v128 + v132);
        ++v135;
      }
      while (v133 != (WTF::StringImpl *)-1 && v133 != v51);
    }
    if (v133 == v51)
      goto LABEL_52;
    *((_QWORD *)v128 + v132) = v51;
    v60 = *v57;
  }
  *v57 = v60 + 1;
LABEL_52:
  v65 = *(_DWORD *)(a1 + 12);
  if (!v65)
  {
    __break(0xC471u);
    JUMPOUT(0x197EDE838);
  }
  v66 = v65 - 1;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v65 - 1) + 11) & 8) != 0)
  {
    v67 = 0;
    *(_BYTE *)(*(_QWORD *)a1 + 720 * v66 + 32) |= 1u;
  }
  else
  {
    v67 = 0;
  }
  LOWORD(v68) = 17;
  return v67 & 0x10000 | (unsigned __int16)v68;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpressionOrPropagateErrorClass<JSC::SyntaxChecker>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _DWORD *v3;
  int v4;
  _DWORD *v5;
  uint64_t v6;

  v4 = 0;
  v5 = *(_DWORD **)(a1 + 7496);
  v6 = a1;
  *(_QWORD *)(a1 + 7496) = &v4;
  result = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v4);
  v3 = v5;
  if (!(_DWORD)result && v5)
    *v5 = v4;
  *(_QWORD *)(v6 + 7496) = v3;
  return result;
}

void JSC::Parser<JSC::Lexer<char16_t>>::parsePropertyMethod<JSC::SyntaxChecker>(uint64_t a1, const char *a2, WTF::StringImpl **a3, int a4)
{
  int v5;
  WTF::StringImpl **v7;
  __int128 v8;
  __int128 v9;

  v8 = 0u;
  v9 = 0u;
  v7 = a3;
  if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, a2, 2, 0, 0, 0, a4, &v7, 2) & 1) == 0)
  {
    v5 = *(_DWORD *)(a1 + 7368);
    if (v5 != 20 && (v5 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse this method");
    }
    else
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    }
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[45],WTF::UniquedStringImpl *,char const(&)[2]>(uint64_t a1, uint64_t *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v40);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v40[5]((WTF::StringPrintStream *)&v40);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v40[4])(&v40);
    WTF::PrintStream::printf(v5, "%s", "Expected a ':' following the property name '");
    v12 = *a2;
    if (*a2)
    {
      v13 = *(char **)(v12 + 8);
      v14 = *(unsigned int *)(v12 + 4);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v13, v14, (uint64_t)&v37, v11);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v13, v14, 0, v6, v7, v8, v9, v10, (uint64_t)&v37);
      WTF::printExpectedCStringHelper(v5, "StringImpl*", &v37);
      if (v38 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
    }
    else
    {
      WTF::PrintStream::printf(v5, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf(v5, "%s", "'");
    WTF::PrintStream::printf(v5, "%s", ".");
    v40[5]((WTF::StringPrintStream *)&v40);
    WTF::String::fromUTF8WithLatin1Fallback(v41, v42, &v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v37, v15, v16, v17, v18, v19, v20);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v21, v22, v23, v24, v25, v26, v27);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unint64_t v10;
  int *v12;
  int v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  _BOOL4 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int32x2_t *v42;
  char v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  const char *v56;
  int v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  _BOOL4 v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int32x2_t *v78;
  __int32 v79;
  unsigned int v80;
  _BOOL4 v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  _DWORD *v108;
  unsigned int v109;
  _QWORD *v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  const char *v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  int32x2_t *v123;
  uint64_t v124;
  __int8 v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int *v136;
  int v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  uint64_t v140;
  unint64_t v141;
  __int16 *v142;
  __int16 v143;
  uint64_t v144;
  int v145;
  int v146;
  int v147;
  int v148;
  __int128 *v149;
  uint64_t **v150;
  int32x2_t *v151;
  WTF::StringImpl *v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  int v161;
  int v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  char v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  char v189;
  int v190;
  int v191;
  int v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  const char *v198;
  int v199;
  int v200;
  int v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  int v205;
  BOOL v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  WTF *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  WTF::AtomStringImpl *v221;
  uint64_t v222;
  WTF::StringImpl *v223;
  uint64_t v224;
  unint64_t v225;
  __int16 *v226;
  __int16 v227;
  unsigned int v228;
  char v229;
  uint64_t v230;
  int v231;
  int v232;
  int v233;
  int v234;
  uint64_t **v235;
  int32x2_t *v236;
  WTF::StringImpl *v237;
  unint64_t v238;
  int32x2_t *v239;
  int v240;
  unsigned int v241;
  uint64_t v242;
  unsigned int v243;
  _DWORD *v244;
  unsigned int v245;
  uint64_t *v246;
  BOOL v247;
  uint64_t v248;
  unint64_t *v249;
  char v250;
  __int8 v251;
  int v252;
  WTF::StringImpl *v253;
  const char *v254;
  int v255;
  int v256;
  int v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char v265;
  char v266;
  WTF::StringImpl *v267;
  WTF::StringImpl *v268;
  uint64_t v269;
  unint64_t v270;
  __int16 *v271;
  __int16 v272;
  uint64_t v273;
  int v274;
  int v275;
  int v276;
  int v277;
  WTF::AtomStringImpl *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t **v285;
  int32x2_t *v286;
  WTF::StringImpl *v287;
  int v288;
  WTF::AtomStringImpl *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  int v297;
  int v298;
  int v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  int v303;
  unint64_t v304;
  void *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  void *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  void *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int v340;
  int v341;
  int v342;
  int v343;
  uint64_t v344;
  WTF::AtomStringImpl *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  WTF::StringImpl *v353;
  uint64_t v354;
  unint64_t v355;
  __int16 *v356;
  __int16 v357;
  __int128 *v358;
  uint64_t v359;
  int v360;
  int v361;
  int v362;
  int v363;
  uint64_t **v364;
  int32x2_t *v365;
  WTF::StringImpl *v366;
  unint64_t v367;
  void *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  void *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  void *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  void *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  void *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t v408;
  void *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  int v416;
  int v417;
  int v418;
  uint64_t v419;
  int v420;
  uint64_t v421;
  int v422;
  unint64_t v423;
  void *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  void *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  WTF::StringImpl *v440;
  uint64_t v441;
  unint64_t v442;
  __int16 *v443;
  __int16 v444;
  uint64_t v445;
  int v446;
  int v447;
  int v448;
  int v449;
  uint64_t v450;
  _OWORD *v451;
  WTF::StringImpl *v452;
  WTF::StringImpl *v453;
  int v454;
  uint64_t v455;
  WTF::StringImpl *v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t v459;
  __int16 *v460;
  __int16 v461;
  uint64_t v462;
  int v463;
  int v464;
  int v465;
  int v466;
  WTF::AtomStringImpl *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  _OWORD *v475;
  WTF::StringImpl *v476;
  WTF::StringImpl *v477;
  uint64_t v478;
  WTF::StringImpl *v479;
  uint64_t v480;
  unint64_t v481;
  uint64_t v482;
  __int16 *v483;
  __int16 v484;
  uint64_t v485;
  int v486;
  int v487;
  int v488;
  int v489;
  uint64_t v490;
  _OWORD *v491;
  WTF::StringImpl *v492;
  WTF::StringImpl *v493;
  WTF::StringImpl *v494;
  uint64_t v495;
  uint64_t v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  int v500;
  uint64_t v501;
  char v502;
  int v503;
  int v504;
  _OWORD *v505;
  __int8 v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unsigned int v510;
  char v511;
  int v512;
  int v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  int v518;
  uint64_t v519;
  unint64_t v520;
  void *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unint64_t v528;
  void *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  unint64_t v536;
  void *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  void *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  unint64_t v552;
  void *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  unint64_t v560;
  void *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  void *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  void *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  unint64_t v584;
  void *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  int v592;
  int v593;
  int v594;
  int v595;
  uint64_t v596;
  int v597;
  WTF::AtomStringImpl *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  WTF::StringImpl *v606;
  uint64_t v607;
  unint64_t v608;
  __int16 *v609;
  __int16 v610;
  uint64_t v611;
  int v612;
  int v613;
  int v614;
  int v615;
  WTF::AtomStringImpl *v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  int32x2_t *v624;
  WTF::StringImpl *v625;
  int v626;
  int v627;
  int v628;
  int v629;
  uint64_t v630;
  unint64_t v631;
  void *v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  unint64_t v639;
  void *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  int v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  int v652;
  int v653;
  int v654;
  uint64_t v655;
  int v656;
  uint64_t v657;
  int v658;
  uint64_t v659;
  unint64_t v660;
  uint64_t v661;
  uint64_t v662;
  __int128 v663;
  int v664;
  int v665;
  int v666;
  uint64_t v667;
  int v668;
  uint64_t v669;
  void *v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  unint64_t v677;
  int v678;
  _QWORD *v679;
  uint64_t v680;
  int v681;
  const char *v682;
  int v683;
  unsigned int v684;
  int v685;
  uint64_t v686;
  uint64_t v687;
  int v688;
  int v689;
  int v690;
  int v691;
  uint64_t v692;
  unsigned int v693;
  unsigned int v694;
  int v695;
  int v696;
  int v697;
  unint64_t v698;
  uint64_t v699;
  int v700;
  int v701;
  int v702;
  int v703;
  int v704;
  int v705;
  _OWORD *v706;
  int *v707;
  uint64_t v708;
  uint64_t v709;
  __int128 *v710;
  WTF::StringImpl *v711;
  int v712;
  uint64_t **v713;
  __int32 v714;
  int32x2_t *v715;
  _OWORD v716[2];
  __int128 v717;
  __int128 v718;
  uint64_t *v719;
  __int128 v720;
  __int128 v721;
  uint64_t v722;
  WTF *v723;
  int v724;
  _QWORD v725[2];
  WTF::AtomStringImpl *v726;
  _QWORD v727[2];
  __int128 v728;
  uint64_t *v729;
  __int128 v730;
  uint64_t v731;
  char v732;
  _BYTE v733[72];

  v707 = (int *)a3;
  v9 = (unsigned __int8 *)(a1 + 7300);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104);
  v715 = (int32x2_t *)(a1 + 7300);
  if ((unint64_t)&v685 < v10)
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v58 = 0;
      v715[6].i8[4] = 1;
      return v58;
    }
    return 0;
  }
  v12 = (int *)(a1 + 7368);
  v712 = *(_DWORD *)(a1 + 7368);
  v13 = v712;
  if (v712 == 545)
  {
    v500 = *(_DWORD *)(a1 + 12);
    if (!v500)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE1B94);
    }
    v501 = *(_QWORD *)a1 + 720 * (v500 - 1);
    v502 = *(_BYTE *)(v501 + 9);
    v503 = *(_DWORD *)(v501 + 10);
    v9 = (unsigned __int8 *)v715;
    v13 = v712;
    if ((v502 & 1) != 0 || (v503 & 0x200) != 0)
    {
      if ((v503 & 0x1200) == 0x200)
      {
        v504 = *(_DWORD *)(a1 + 7316);
        if (v504)
        {
          v505 = (_OWORD *)(a1 + 7296);
          v716[0] = *(_OWORD *)(a1 + 7296);
          v722 = *(_QWORD *)(a1 + 7336);
          v721 = *(_OWORD *)(a1 + 7320);
          v506 = v715[5].i8[4];
          v714 = v715[5].u8[5];
          v507 = *(int *)(a1 + 7408);
          v508 = *(int *)(a1 + 7404);
          v509 = *(_QWORD *)(a1 + 7288);
          v510 = *(_DWORD *)v509;
          LODWORD(v713) = *(_DWORD *)(v509 + 4);
          v511 = *(_BYTE *)(v509 + 56);
          v512 = *(_DWORD *)(a1 + 7400);
          v513 = *(_DWORD *)(a1 + 7412);
          *(_DWORD *)(a1 + 7444) = v512;
          *(_DWORD *)(a1 + 7448) = v513;
          *(_DWORD *)(a1 + 7452) = v508;
          *(_DWORD *)(v509 + 4) = v512;
          *(_BYTE *)(v509 + 56) = 0;
          v518 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v509, a1 + 7368, 0, v502 & 1, a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v518;
          v519 = *(_QWORD *)(a1 + 7288);
          if (!*(_BYTE *)(v519 + 56))
          {
            if (v518 == 191488)
            {
              v592 = *(_DWORD *)(a1 + 7400);
              v593 = *(_DWORD *)(a1 + 7412);
              v594 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v592;
              *(_DWORD *)(a1 + 7448) = v593;
              *(_DWORD *)(a1 + 7452) = v594;
              *(_DWORD *)(v519 + 4) = v592;
              v595 = *(_DWORD *)(a1 + 12);
              if (!v595)
              {
                __break(0xC471u);
                JUMPOUT(0x197EE1B9CLL);
              }
              v596 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v595 - 1) + 9) & 1;
              *(_BYTE *)(v519 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v519, a1 + 7368, 0, v596, v514, v515, v516, v517);
            }
            *(_DWORD *)v733 = 0;
            *(_QWORD *)&v733[8] = *(_QWORD *)(a1 + 7496);
            *(_QWORD *)&v733[16] = a1;
            *(_QWORD *)(a1 + 7496) = v733;
            v597 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, v733);
            *(_QWORD *)(*(_QWORD *)&v733[16] + 7496) = *(_QWORD *)&v733[8];
            if (!v597)
            {
              v605 = *(_QWORD *)(a1 + 7288);
              *(_BYTE *)(v605 + 150) = 0;
              v606 = *(WTF::StringImpl **)(v605 + 152);
              *(_QWORD *)(v605 + 152) = 0;
              if (v606)
              {
                if (*(_DWORD *)v606 == 2)
                {
                  WTF::StringImpl::~StringImpl(v606, v598, v599, v600, v601, v602, v603, v604);
                  WTF::fastFree(v631, v632, v633, v634, v635, v636, v637, v638);
                }
                else
                {
                  *(_DWORD *)v606 -= 2;
                }
              }
              v607 = *(_QWORD *)(v605 + 88);
              v608 = *(_QWORD *)(v605 + 96);
              v609 = (__int16 *)(v607 + 2 * v507);
              *(_QWORD *)(v605 + 80) = v609;
              *(_QWORD *)(v605 + 112) = v607 + 2 * v508;
              *(_DWORD *)(v605 + 20) = 0;
              *(_DWORD *)(v605 + 36) = 0;
              if ((unint64_t)v609 >= v608)
                v610 = 0;
              else
                v610 = *v609;
              *(_WORD *)(v605 + 176) = v610;
              v611 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)v611 = v510;
              *(_BYTE *)(v611 + 56) = v511;
              v612 = *(_DWORD *)(a1 + 7400);
              v613 = *(_DWORD *)(a1 + 7412);
              v614 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v612;
              *(_DWORD *)(a1 + 7448) = v613;
              *(_DWORD *)(a1 + 7452) = v614;
              *(_DWORD *)(v611 + 4) = v612;
              v615 = *(_DWORD *)(a1 + 12);
              if (!v615)
              {
                __break(0xC471u);
                JUMPOUT(0x197EE1BA4);
              }
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v611, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v615 - 1) + 9) & 1, v601, v602, v603, v604);
              v623 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v623 + 4) = (_DWORD)v713;
              *v505 = v716[0];
              *(_DWORD *)(a1 + 7312) = 0;
              *(_DWORD *)(a1 + 7316) = v504;
              *(_OWORD *)(a1 + 7320) = v721;
              *(_QWORD *)(a1 + 7336) = v722;
              v624 = v715;
              v715[5].i8[4] = v506;
              v624[5].i8[5] = v714;
              v625 = *(WTF::StringImpl **)(a1 + 7360);
              *(_QWORD *)(a1 + 7360) = 0;
              if (v625)
              {
                if (*(_DWORD *)v625 == 2)
                {
                  WTF::StringImpl::~StringImpl(v625, v616, v617, v618, v619, v620, v621, v622);
                  WTF::fastFree(v639, v640, v641, v642, v643, v644, v645, v646);
                  v623 = *(_QWORD *)(a1 + 7288);
                }
                else
                {
                  *(_DWORD *)v625 -= 2;
                }
              }
              v626 = *(_DWORD *)(a1 + 7400);
              v627 = *(_DWORD *)(a1 + 7412);
              v628 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v626;
              *(_DWORD *)(a1 + 7448) = v627;
              *(_DWORD *)(a1 + 7452) = v628;
              *(_DWORD *)(v623 + 4) = v626;
              v629 = *(_DWORD *)(a1 + 12);
              if (!v629)
              {
                __break(0xC471u);
                JUMPOUT(0x197EE1BACLL);
              }
              v630 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v629 - 1) + 9) & 1;
              *(_BYTE *)(v623 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v623, a1 + 7368, 0, v630, v619, v620, v621, v622);
            }
          }
          return 54;
        }
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot use yield expression within parameters");
      }
      else if (!*(_QWORD *)(a1 + 7360))
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot use yield expression out of generator");
      }
      return 0;
    }
  }
  v708 = *(int *)(a1 + 7408);
  v14 = a1 + 7296;
  v714 = *(_DWORD *)(a1 + 7300);
  v720 = *(_OWORD *)(a1 + 7296);
  v15 = *(_DWORD *)(a1 + 7316);
  v718 = *(_OWORD *)(a1 + 7320);
  v719 = *(uint64_t **)(a1 + 7336);
  v704 = v9[44];
  v705 = v15;
  v703 = v9[45];
  v699 = *(int *)(a1 + 7404);
  v16 = *(int **)(a1 + 7288);
  v702 = v16[1];
  v17 = *v16;
  v700 = *((unsigned __int8 *)v16 + 56);
  v701 = v17;
  if (v13 == 2)
  {
    v105 = *(_DWORD *)(a1 + 12);
    if (!v105)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE1AECLL);
    }
    v106 = a1 + 7296;
    v107 = *(_QWORD *)a1 + 720 * (v105 - 1);
    v109 = *(_DWORD *)(v107 + 180);
    v108 = (_DWORD *)(v107 + 180);
    v698 = v109;
    v110 = v108 - 3;
    *(_QWORD *)v733 = 0x800000000;
    *(_QWORD *)&v111 = -1;
    *((_QWORD *)&v111 + 1) = -1;
    *(_OWORD *)&v733[8] = v111;
    *(_OWORD *)&v733[24] = v111;
    *(_OWORD *)&v733[40] = v111;
    *(_OWORD *)&v733[56] = v111;
    v112 = *v108;
    if ((_DWORD)v112 == *(v108 - 1))
    {
      v495 = WTF::Vector<WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v108 - 3), (void *)(v112 + 1), (unint64_t)v733, a4, a5, a6, a7, a8);
      v496 = *v110 + 72 * *v108;
      *(_OWORD *)v496 = *(_OWORD *)v495;
      v498 = *(_OWORD *)(v495 + 32);
      v497 = *(_OWORD *)(v495 + 48);
      v499 = *(_OWORD *)(v495 + 16);
      *(_QWORD *)(v496 + 64) = *(_QWORD *)(v495 + 64);
      *(_OWORD *)(v496 + 32) = v498;
      *(_OWORD *)(v496 + 48) = v497;
      *(_OWORD *)(v496 + 16) = v499;
      *(_QWORD *)v495 = 0x800000000;
      *(_QWORD *)&v497 = -1;
      *((_QWORD *)&v497 + 1) = -1;
      *(_OWORD *)(v495 + 56) = v497;
      *(_OWORD *)(v495 + 40) = v497;
      *(_OWORD *)(v495 + 24) = v497;
      *(_OWORD *)(v495 + 8) = v497;
      v9 = (unsigned __int8 *)v715;
      ++*v108;
      if (*(_DWORD *)&v733[4] != 8)
      {
        WTF::fastFree(*(unint64_t *)&v733[8], a2, a3, a4, a5, a6, a7, a8);
        v9 = (unsigned __int8 *)v715;
      }
    }
    else
    {
      v113 = *v110 + 72 * v112;
      *(_OWORD *)v113 = *(_OWORD *)v733;
      v114 = *(_OWORD *)&v733[16];
      v115 = *(_OWORD *)&v733[32];
      v116 = *(_OWORD *)&v733[48];
      *(_QWORD *)(v113 + 64) = *(_QWORD *)&v733[64];
      *(_OWORD *)(v113 + 32) = v115;
      *(_OWORD *)(v113 + 48) = v116;
      *(_OWORD *)(v113 + 16) = v114;
      ++*v108;
    }
    v13 = *v12;
    v14 = v106;
  }
  else
  {
    v698 = 0;
  }
  v18 = 0;
  v709 = 0;
  v710 = (__int128 *)v14;
  v706 = (_OWORD *)(a1 + 7316);
  v713 = (uint64_t **)(v14 + 24);
  LODWORD(v711) = a2[2];
  a2[2] = 0;
  while (1)
  {
    if (v13 != 13)
    {
      v19 = a2[3];
      a2[3] = 0;
      v20 = v9[140];
      v9[140] = 1;
      if (v13 == 546)
      {
        v21 = *(_DWORD *)(a1 + 12);
        if (!v21)
        {
          __break(0xC471u);
          JUMPOUT(0x197EE1918);
        }
        v22 = *(_DWORD *)(a1 + 12);
        while (1)
        {
          v23 = v22;
          if (v22 == 1)
            break;
          --v22;
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v23 - 1) + 12) & 0x40) != 0)
            goto LABEL_12;
        }
        v22 = 0;
LABEL_12:
        if (v21 <= v23 - 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197EE18F8);
        }
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v22 + 11) & 0x40) != 0 || ((1 << v9[174]) & 0x6000) != 0)
        {
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v21 - 1) + 12) & 0x10) != 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' within static block");
            goto LABEL_112;
          }
          v41 = JSC::Parser<JSC::Lexer<char16_t>>::parseAwaitExpression<JSC::SyntaxChecker>(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v42 = v715;
          v715[17].i8[4] = v20;
          a2[3] = v19;
          if (!v41)
          {
LABEL_113:
            if (*v12 != 20 && (*v12 & 0x100000) == 0)
            {
              v52 = v712;
              v55 = (int)v711;
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[24]>(a1);
              goto LABEL_117;
            }
LABEL_616:
            JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
            v52 = v712;
            v55 = (int)v711;
            goto LABEL_117;
          }
          goto LABEL_59;
        }
      }
      v24 = v13;
      if ((v13 & 0x100) != 0)
      {
        while (1)
        {
          v26 = v24;
          ++*(_DWORD *)(a1 + 7300);
          a2[3] = v24;
          v34 = *(_DWORD *)(a1 + 7400);
          v35 = *(_DWORD *)(a1 + 7412);
          v36 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v34;
          *(_DWORD *)(a1 + 7448) = v35;
          *(_DWORD *)(a1 + 7452) = v36;
          v37 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v37 + 4) = v34;
          v38 = *(_DWORD *)(a1 + 12);
          if (!v38)
          {
            __break(0xC471u);
            JUMPOUT(0x197EE1878);
          }
          v39 = v26 & 0xFFFFFFFC;
          v40 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v38 - 1) + 9) & 1;
          *(_BYTE *)(v37 + 56) = 0;
          v24 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v37, a1 + 7368, 0, v40, a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v24;
          ++*(_DWORD *)(a1 + 7304);
          if ((v24 & 0x100) == 0)
            break;
          if (v39 == 256)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              if ((v26 - 256) >= 4)
              {
                __break(0xC471u);
                JUMPOUT(0x197EE1898);
              }
              v254 = off_1E357B318[v26 - 256];
LABEL_330:
              *(_QWORD *)v733 = v254;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[5],char const*,char const(&)[42]>(a1, (const char **)v733);
            }
LABEL_112:
            v715[17].i8[4] = v20;
            a2[3] = v19;
            goto LABEL_113;
          }
        }
        v25 = JSC::Parser<JSC::Lexer<char16_t>>::parseMemberExpression<JSC::SyntaxChecker>(a1, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        if (!v25)
        {
          if (*v12 != 20 && (*v12 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              if (v26 <= 773)
              {
                v198 = "logical-not";
                switch(v26)
                {
                  case 256:
                  case 258:
                    v198 = "prefix-increment";
                    goto LABEL_390;
                  case 257:
                  case 259:
                    v198 = "prefix-decrement";
                    goto LABEL_390;
                  case 260:
                    goto LABEL_390;
                  case 261:
                    v198 = "bitwise-not";
                    goto LABEL_390;
                  default:
                    goto LABEL_646;
                }
              }
              switch(v26)
              {
                case 774:
                  v198 = "typeof";
                  break;
                case 775:
                  v198 = "void";
                  break;
                case 776:
                  v198 = "delete";
                  break;
                default:
LABEL_646:
                  __break(0xC471u);
                  JUMPOUT(0x197EE18C8);
              }
LABEL_390:
              *(_QWORD *)v733 = v198;
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[31],char const*,char const(&)[9]>(a1, (const char **)v733);
            }
            goto LABEL_112;
          }
LABEL_279:
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
          goto LABEL_112;
        }
        if (v39 == 256)
        {
          if ((v25 & 0x80000000) != 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              *(_QWORD *)v733 = JSC::Parser<JSC::Lexer<char16_t>>::metaPropertyName<JSC::SyntaxChecker>(v25);
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[36]>(a1, (const char **)v733);
            }
            goto LABEL_112;
          }
          if (v25 > 0x19 || ((1 << v25) & 0x2030004) == 0)
          {
            v98 = *(_DWORD *)(a1 + 12);
            if (!v98)
            {
              __break(0xC471u);
              JUMPOUT(0x197EE1900);
            }
            if (v25 != 18 || (*(_BYTE *)(*(_QWORD *)a1 + 720 * (v98 - 1) + 9) & 1) != 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                if ((v26 & 0xFFFFFFFD) == 0x100)
                  v117 = "++";
                else
                  v117 = "--";
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[8],char const(&)[3],char const(&)[51]>(a1, v117);
              }
              goto LABEL_112;
            }
            v25 = 18;
          }
          v27 = 1;
LABEL_19:
          v28 = *(_DWORD *)(a1 + 12);
          if (!v28)
          {
            __break(0xC471u);
            JUMPOUT(0x197EE1910);
          }
          LOBYTE(v29) = 0;
          v30 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v28 - 1) + 9);
          if (v25 <= 2 && (v30 & 1) != 0)
          {
            v31 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
            v32 = **(_QWORD **)(a1 + 7320);
            v29 = v32 == *(_QWORD *)(v31 + 1248) || v32 == *(_QWORD *)(v31 + 880);
            if ((v27 & v29) == 1)
            {
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_112;
              *(_QWORD *)v733 = **(_QWORD **)(a1 + 7320);
              goto LABEL_282;
            }
          }
          if (*v12 == 257)
          {
            if ((v25 & 0x80000000) != 0)
            {
LABEL_440:
              if (!*(_QWORD *)(a1 + 7360))
              {
                *(_QWORD *)v733 = JSC::Parser<JSC::Lexer<char16_t>>::metaPropertyName<JSC::SyntaxChecker>(v25);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[38]>(a1, (const char **)v733);
              }
              goto LABEL_112;
            }
            if ((v25 > 0x19 || ((1 << v25) & 0x2030004) == 0) && (v25 != 18 || (v30 & 1) != 0))
            {
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_112;
              v56 = "Postfix -- operator applied to value that is not a reference";
              goto LABEL_111;
            }
            ++*(_DWORD *)(a1 + 7304);
            *(int32x2_t *)(a1 + 7296) = vadd_s32(*(int32x2_t *)(a1 + 7296), (int32x2_t)0x100000001);
            v43 = !v29;
            if ((v30 & 1) == 0)
              v43 = 1;
            if ((v43 & 1) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                *(_QWORD *)v733 = **(_QWORD **)(a1 + 7320);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[36]>(a1, (uint64_t *)v733);
              }
              goto LABEL_112;
            }
            if (v27)
            {
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_112;
              if (v26 <= 773)
              {
                v254 = "logical-not";
                switch(v26)
                {
                  case 256:
                  case 258:
LABEL_450:
                    v254 = "increment";
                    goto LABEL_330;
                  case 257:
                  case 259:
LABEL_502:
                    v254 = "decrement";
                    goto LABEL_330;
                  case 260:
                    goto LABEL_330;
                  case 261:
LABEL_519:
                    v254 = "bitwise-not";
                    goto LABEL_330;
                  default:
                    goto LABEL_506;
                }
              }
              if (v26 != 774)
              {
                if (v26 != 775)
                {
                  if (v26 != 776)
                  {
LABEL_506:
                    __break(0xC471u);
                    JUMPOUT(0x197EE0FA8);
                  }
                  goto LABEL_510;
                }
LABEL_518:
                v254 = "void";
                goto LABEL_330;
              }
LABEL_517:
              v254 = "typeof";
              goto LABEL_330;
            }
          }
          else
          {
            if (*v12 != 256)
              goto LABEL_56;
            if ((v25 & 0x80000000) != 0)
              goto LABEL_440;
            if ((v25 > 0x19 || ((1 << v25) & 0x2030004) == 0) && (v25 != 18 || (v30 & 1) != 0))
            {
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_112;
              v56 = "Postfix ++ operator applied to value that is not a reference";
LABEL_111:
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, v56);
              goto LABEL_112;
            }
            ++*(_DWORD *)(a1 + 7304);
            *(int32x2_t *)(a1 + 7296) = vadd_s32(*(int32x2_t *)(a1 + 7296), (int32x2_t)0x100000001);
            v33 = !v29;
            if ((v30 & 1) == 0)
              v33 = 1;
            if ((v33 & 1) == 0)
            {
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_112;
              *(_QWORD *)v733 = **(_QWORD **)(a1 + 7320);
LABEL_282:
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)v733);
              goto LABEL_112;
            }
            if (v27)
            {
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_112;
              if (v26 <= 773)
              {
                v254 = "logical-not";
                switch(v26)
                {
                  case 256:
                  case 258:
                    goto LABEL_450;
                  case 257:
                  case 259:
                    goto LABEL_502;
                  case 260:
                    goto LABEL_330;
                  case 261:
                    goto LABEL_519;
                  default:
                    goto LABEL_683;
                }
              }
              if (v26 != 774)
              {
                if (v26 != 775)
                {
                  if (v26 != 776)
                  {
LABEL_683:
                    __break(0xC471u);
                    JUMPOUT(0x197EE1AE4);
                  }
LABEL_510:
                  v254 = "delete";
                  goto LABEL_330;
                }
                goto LABEL_518;
              }
              goto LABEL_517;
            }
          }
          v44 = v30 & 1;
          v45 = *(_DWORD *)(a1 + 7400);
          v46 = *(_DWORD *)(a1 + 7412);
          v47 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v45;
          *(_DWORD *)(a1 + 7448) = v46;
          *(_DWORD *)(a1 + 7452) = v47;
          v48 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v48 + 4) = v45;
          *(_BYTE *)(v48 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v48, a1 + 7368, 0, v44, a5, a6, a7, a8);
          v25 = 21;
LABEL_56:
          if ((v13 & 0x100) == 0)
          {
            v41 = v25;
            goto LABEL_58;
          }
          v51 = a2[3];
          if ((v51 - 256) >= 6 && (v51 - 774) >= 3 && (v51 - 174336) > 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197EDF120);
          }
          v41 = 22;
          if (v51 > 773)
          {
            if ((v51 - 174336) < 2)
              goto LABEL_58;
            if (v51 == 774)
            {
              v41 = 28;
              goto LABEL_58;
            }
            if (v51 == 775)
            {
LABEL_58:
              v42 = v715;
              v715[17].i8[4] = v20;
              a2[3] = v19;
LABEL_59:
              v18 = *v12;
              goto LABEL_60;
            }
          }
          else if ((v51 - 256) <= 5)
          {
            if (((1 << v51) & 5) != 0 || ((1 << v51) & 0xA) != 0)
            {
              ++*(_DWORD *)v710;
              v41 = 20;
            }
            goto LABEL_58;
          }
          if (v25 >= 3)
          {
            if (v25 == 25)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                *(_QWORD *)v733 = **(_QWORD **)(a1 + 7336);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],WTF::UniquedStringImpl *>(a1, (uint64_t *)v733);
              }
              goto LABEL_112;
            }
          }
          else
          {
            v54 = *(_DWORD *)(a1 + 12);
            if (!v54)
            {
              __break(0xC471u);
              JUMPOUT(0x197EE1908);
            }
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v54 - 1) + 9) & 1) != 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                *(_QWORD *)v733 = **(_QWORD **)(a1 + 7320);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[37],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)v733);
              }
              goto LABEL_112;
            }
          }
          v41 = 29;
          goto LABEL_58;
        }
      }
      else
      {
        v25 = JSC::Parser<JSC::Lexer<char16_t>>::parseMemberExpression<JSC::SyntaxChecker>(a1, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        if (!v25)
        {
          if (*v12 != 20 && (*v12 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse member expression");
            goto LABEL_112;
          }
          goto LABEL_279;
        }
        v26 = 0;
      }
      v27 = 0;
      goto LABEL_19;
    }
    v647 = *(_DWORD *)(a1 + 12);
    if (!v647)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE18D8);
    }
    JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v647 - 1), **(_QWORD **)(a1 + 7376), 0);
    v715[29].i8[6] = 1;
    v652 = *(_DWORD *)(a1 + 7400);
    v653 = *(_DWORD *)(a1 + 7412);
    v654 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v652;
    *(_DWORD *)(a1 + 7448) = v653;
    *(_DWORD *)(a1 + 7452) = v654;
    v655 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v655 + 4) = v652;
    v656 = *(_DWORD *)(a1 + 12);
    if (!v656)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE18E0);
    }
    v657 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v656 - 1) + 9) & 1;
    *(_BYTE *)(v655 + 56) = 0;
    v658 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v655, a1 + 7368, 0, v657, v648, v649, v650, v651);
    *(_DWORD *)(a1 + 7368) = v658;
    if (v18 >= 131589 || v658 != 131589)
    {
      v52 = v712;
      v55 = (int)v711;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[79]>(a1);
      goto LABEL_117;
    }
    v42 = v715;
    v20 = v715[17].u8[4];
    v41 = 57;
    v18 = 131589;
LABEL_60:
    v49 = a2[2] ? 23 : v41;
    a2[2] = v49;
    v50 = v20 ? 245760 : 15360;
    if ((v50 & v18) == 0)
      break;
    if (v18 <= 52223)
    {
      if (v18 == 34816)
      {
LABEL_199:
        HIDWORD(v709) = 1;
        goto LABEL_200;
      }
      if (v18 == 17408)
        LODWORD(v709) = 1;
    }
    else
    {
      if (v18 == 52224)
        goto LABEL_199;
      if (v18 == 4403200)
      {
        if ((v13 & 0xFFFFFFFC) == 0x100)
        {
          v42 = v715;
        }
        else
        {
          v42 = v715;
          v52 = v712;
          if ((v13 & 0x100) != 0)
          {
            v55 = (int)v711;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[139]>(a1);
            goto LABEL_117;
          }
        }
      }
    }
LABEL_200:
    if ((v709 & 0x100000000) != 0 && (v709 & 1) != 0)
    {
      if (v18 == 20 || (v18 & 0x100000) != 0)
        goto LABEL_616;
      v52 = v712;
      v55 = (int)v711;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[112]>(a1);
LABEL_117:
      a2[2] = v55;
      if (*v12 != 20 && (*v12 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[24]>(a1);
        goto LABEL_121;
      }
      goto LABEL_398;
    }
    *v42 = vadd_s32(*v42, (int32x2_t)0x100000001);
    v99 = *(_DWORD *)(a1 + 7400);
    v100 = *(_DWORD *)(a1 + 7412);
    v101 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v99;
    *(_DWORD *)(a1 + 7448) = v100;
    *(_DWORD *)(a1 + 7452) = v101;
    v102 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v102 + 4) = v99;
    v103 = *(_DWORD *)(a1 + 12);
    if (!v103)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE193CLL);
    }
    v104 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v103 - 1) + 9) & 1;
    *(_BYTE *)(v102 + 56) = 0;
    v13 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v102, a1 + 7368, 2, v104, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v13;
    v9 = (unsigned __int8 *)v715;
  }
  a2[2] = (_DWORD)v711;
  v52 = v712;
  if (v18 != 7)
  {
    v53 = 0;
    goto LABEL_76;
  }
  *v42 = vadd_s32(*v42, (int32x2_t)0x100000001);
  v118 = *(_DWORD *)(a1 + 7400);
  v119 = *(_DWORD *)(a1 + 7412);
  v120 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v118;
  *(_DWORD *)(a1 + 7448) = v119;
  *(_DWORD *)(a1 + 7452) = v120;
  v121 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v121 + 4) = v118;
  v122 = *(_DWORD *)(a1 + 12);
  if (!v122)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE1AF4);
  }
  v123 = v42;
  v124 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v122 - 1) + 9) & 1;
  *(_BYTE *)(v121 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v121, a1 + 7368, 2, v124, a5, a6, a7, a8);
  v125 = v123[17].i8[4];
  v123[17].i8[4] = 1;
  *(_DWORD *)v733 = 0;
  *(_QWORD *)&v733[8] = *(_QWORD *)(a1 + 7496);
  *(_QWORD *)&v733[16] = a1;
  *(_QWORD *)(a1 + 7496) = v733;
  v126 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, v733);
  *(_QWORD *)(*(_QWORD *)&v733[16] + 7496) = *(_QWORD *)&v733[8];
  v123[17].i8[4] = v125;
  v127 = *(_DWORD *)(a1 + 7368);
  if (v126)
  {
    if (v127 == 18)
    {
      v128 = *(_DWORD *)(a1 + 7400);
      v129 = *(_DWORD *)(a1 + 7412);
      v130 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v128;
      *(_DWORD *)(a1 + 7448) = v129;
      *(_DWORD *)(a1 + 7452) = v130;
      v131 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v131 + 4) = v128;
      v132 = *(_DWORD *)(a1 + 12);
      if (!v132)
      {
        __break(0xC471u);
        JUMPOUT(0x197EE1AFCLL);
      }
      v133 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v132 - 1) + 9) & 1;
      *(_BYTE *)(v131 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v131, a1 + 7368, 2, v133, a5, a6, a7, a8);
      *(_DWORD *)v733 = 0;
      *(_QWORD *)&v733[8] = *(_QWORD *)(a1 + 7496);
      *(_QWORD *)&v733[16] = a1;
      *(_QWORD *)(a1 + 7496) = v733;
      v134 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, v733);
      *(_QWORD *)(*(_QWORD *)&v733[16] + 7496) = *(_QWORD *)&v733[8];
      if (v134)
      {
        v53 = 0;
        v49 = 26;
        v42 = v715;
        goto LABEL_76;
      }
      if (*v12 != 20 && (*v12 & 0x100000) == 0)
      {
        v52 = v712;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse right hand side of ternary operator");
        goto LABEL_121;
      }
LABEL_621:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      v52 = v712;
      goto LABEL_121;
    }
    if (v127 != 20 && (v127 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected ':' in ternary operator");
      goto LABEL_121;
    }
LABEL_398:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    goto LABEL_121;
  }
  if (v127 == 20 || (v127 & 0x100000) != 0)
    goto LABEL_621;
  v52 = v712;
  if (!*(_QWORD *)(a1 + 7360))
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse left hand side of ternary operator");
LABEL_121:
  v57 = *(_DWORD *)(a1 + 12);
  if (!v57)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE1A60);
  }
  v42 = v715;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v57 - 1) + 12) & 0x10) != 0)
  {
    if (*v12 == 546)
    {
      v49 = 0;
      if (*(_QWORD *)(a1 + 7360))
        return v49;
    }
    else
    {
      v49 = 0;
    }
    v53 = 1;
    v42 = v715;
    v52 = v712;
LABEL_76:
    if ((v52 & 0x200) == 0)
      goto LABEL_77;
  }
  else
  {
    v49 = 0;
    v53 = 1;
    if ((v52 & 0x200) != 0)
      goto LABEL_124;
LABEL_77:
    if (v52 != 2 && v52 != 1048592 && v52 != 12)
    {
LABEL_126:
      v59 = v52 | 4;
      if (v53)
      {
        if (v59 != 4)
        {
          if (*(_QWORD *)(a1 + 7360))
            return 0;
          if (*v12 != 20 && (*v12 & 0x100000) == 0)
          {
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[24]>(a1);
            return 0;
          }
          goto LABEL_570;
        }
        if (*v707 != 1 && *(_QWORD *)(a1 + 7360))
          return 0;
      }
      else if (v59 != 4 || (_DWORD)v49 != 30 && (_DWORD)v49 != 11 || *v12 != 21)
      {
        if (v714 == v42->i32[0])
        {
          v60 = *(_DWORD *)(a1 + 7368) - 21;
          if (v60 <= 0xF)
          {
            ++*(_DWORD *)(a1 + 7304);
            if ((v49 & 0x80000000) != 0)
            {
LABEL_406:
              if (!*(_QWORD *)(a1 + 7360))
              {
                *(_QWORD *)v733 = JSC::Parser<JSC::Lexer<char16_t>>::metaPropertyName<JSC::SyntaxChecker>(v49);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[57]>(a1, (const char **)v733);
              }
              return 0;
            }
            v63 = (unsigned __int16)v60 == 13 || (unsigned __int16)v60 == 14 || (unsigned __int16)v60 == 15;
            if (v49 > 0x19 || ((1 << v49) & 0x2030004) == 0)
            {
              v97 = *(_DWORD *)(a1 + 12);
              if (!v97)
              {
LABEL_660:
                __break(0xC471u);
                JUMPOUT(0x197EE1944);
              }
              if ((_DWORD)v49 != 18
                || ((v63 | *(unsigned __int8 *)(*(_QWORD *)a1 + 720 * (v97 - 1) + 9)) & 1) != 0)
              {
LABEL_183:
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Left side of assignment is not a reference");
                return 0;
              }
            }
            ++*(_DWORD *)(a1 + 7296);
            v64 = *(_DWORD *)(a1 + 7400);
            v65 = *(_DWORD *)(a1 + 7412);
            v66 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v64;
            *(_DWORD *)(a1 + 7448) = v65;
            *(_DWORD *)(a1 + 7452) = v66;
            v67 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v67 + 4) = v64;
            v68 = *(_DWORD *)(a1 + 12);
            if (!v68)
            {
LABEL_651:
              __break(0xC471u);
              JUMPOUT(0x197EE18F0);
            }
            v69 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v68 - 1) + 9) & 1;
            *(_BYTE *)(v67 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v67, a1 + 7368, 2, v69, a5, a6, a7, a8);
            v70 = *(_DWORD *)(a1 + 12);
            if (!v70)
            {
LABEL_650:
              __break(0xC471u);
              JUMPOUT(0x197EE18E8);
            }
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v70 - 1) + 9) & 1) != 0
              && *v713
              && (v49 - 1) <= 1)
            {
              v71 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
              v72 = **v713;
              if (*(_QWORD *)(v71 + 1248) == v72)
              {
LABEL_573:
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot modify 'eval' in strict mode");
              }
              else
              {
                if (*(_QWORD *)(v71 + 880) != v72)
                {
                  *v713 = 0;
                  goto LABEL_153;
                }
LABEL_571:
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot modify 'arguments' in strict mode");
              }
              return 0;
            }
LABEL_153:
            *(_DWORD *)v733 = 0;
            *(_QWORD *)&v733[8] = *(_QWORD *)(a1 + 7496);
            *(_QWORD *)&v733[16] = a1;
            *(_QWORD *)(a1 + 7496) = v733;
            v73 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, v733);
            *(_QWORD *)(*(_QWORD *)&v733[16] + 7496) = *(_QWORD *)&v733[8];
            if (v73)
            {
              v78 = v715;
              v79 = v715->i32[0];
              if (v714 == v715->i32[0])
              {
                LODWORD(v49) = v73;
                do
                {
                  v80 = *v12 - 21;
                  if (v80 > 0xF)
                    goto LABEL_187;
                  ++*(_DWORD *)(a1 + 7304);
                  if ((v49 & 0x80000000) != 0)
                    goto LABEL_406;
                  v83 = (unsigned __int16)v80 == 13 || (unsigned __int16)v80 == 14 || (unsigned __int16)v80 == 15;
                  if (v49 > 0x19 || ((1 << v49) & 0x2030004) == 0)
                  {
                    v94 = *(_DWORD *)(a1 + 12);
                    if (!v94)
                      goto LABEL_660;
                    if ((_DWORD)v49 != 18
                      || ((v83 | *(unsigned __int8 *)(*(_QWORD *)a1 + 720 * (v94 - 1) + 9)) & 1) != 0)
                    {
                      goto LABEL_183;
                    }
                  }
                  ++*(_DWORD *)(a1 + 7296);
                  v84 = *(_DWORD *)(a1 + 7400);
                  v85 = *(_DWORD *)(a1 + 7412);
                  v86 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v84;
                  *(_DWORD *)(a1 + 7448) = v85;
                  *(_DWORD *)(a1 + 7452) = v86;
                  v87 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v87 + 4) = v84;
                  v88 = *(_DWORD *)(a1 + 12);
                  if (!v88)
                    goto LABEL_651;
                  v89 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v88 - 1) + 9) & 1;
                  *(_BYTE *)(v87 + 56) = 0;
                  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v87, a1 + 7368, 2, v89, v74, v75, v76, v77);
                  v90 = *(_DWORD *)(a1 + 12);
                  if (!v90)
                    goto LABEL_650;
                  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v90 - 1) + 9) & 1) != 0
                    && v49 <= 2
                    && *v713)
                  {
                    v91 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
                    v92 = **v713;
                    if (*(_QWORD *)(v91 + 1248) == v92)
                      goto LABEL_573;
                    if (*(_QWORD *)(v91 + 880) == v92)
                      goto LABEL_571;
                    *v713 = 0;
                  }
                  *(_DWORD *)v733 = 0;
                  *(_QWORD *)&v733[8] = *(_QWORD *)(a1 + 7496);
                  *(_QWORD *)&v733[16] = a1;
                  *(_QWORD *)(a1 + 7496) = v733;
                  v93 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, v733);
                  *(_QWORD *)(*(_QWORD *)&v733[16] + 7496) = *(_QWORD *)&v733[8];
                  if (!v93)
                    goto LABEL_566;
                  LODWORD(v49) = v93;
                  v78 = v715;
                  v79 = v715->i32[0];
                }
                while (v714 == v715->i32[0]);
              }
              v714 = v79;
              if (*v12 < 21 || *v12 > 0x24)
              {
LABEL_187:
                v78->i32[0] = v714 + 1;
                return 27;
              }
LABEL_396:
              if (!*(_QWORD *)(a1 + 7360))
              {
                *(_QWORD *)v733 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
                *(_QWORD *)&v733[8] = v383;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],WTF::StringView,char const(&)[22]>(a1, (uint64_t)v733);
              }
              return 0;
            }
LABEL_566:
            if (*v12 != 20 && (*v12 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the right hand side of an assignment expression");
              return 0;
            }
LABEL_570:
            JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
            return 0;
          }
        }
        else
        {
          v95 = *v12;
          if ((*v12 & 0x80000000) == 0 && v95 >= 21)
          {
            v58 = v49;
            if (v95 > 0x24)
              return v58;
            goto LABEL_396;
          }
        }
        return v49;
      }
      v716[0] = *v710;
      *(_OWORD *)v733 = *v706;
      *(_OWORD *)&v733[14] = *(_OWORD *)((char *)v706 + 14);
      v262 = *(int *)(a1 + 7408);
      v263 = *(int *)(a1 + 7404);
      v264 = *(_QWORD *)(a1 + 7288);
      v714 = *(_DWORD *)(v264 + 4);
      v712 = *(_DWORD *)v264;
      v265 = *(_BYTE *)(v264 + 56);
      v266 = *(_BYTE *)(v264 + 150);
      v267 = *(WTF::StringImpl **)(v264 + 152);
      if (v267)
        *(_DWORD *)v267 += 2;
      v268 = *(WTF::StringImpl **)(a1 + 7360);
      if (v268)
        *(_DWORD *)v268 += 2;
      *(_BYTE *)(v264 + 150) = 0;
      *(_QWORD *)(v264 + 152) = 0;
      if (v267)
      {
        if (*(_DWORD *)v267 == 2)
        {
          WTF::StringImpl::~StringImpl(v267, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v384, v385, v386, v387, v388, v389, v390, v391);
        }
        else
        {
          *(_DWORD *)v267 -= 2;
        }
      }
      v269 = *(_QWORD *)(v264 + 88);
      v270 = *(_QWORD *)(v264 + 96);
      v271 = (__int16 *)(v269 + 2 * v708);
      *(_QWORD *)(v264 + 80) = v271;
      *(_QWORD *)(v264 + 112) = v269 + 2 * v699;
      *(_DWORD *)(v264 + 20) = 0;
      *(_DWORD *)(v264 + 36) = 0;
      if ((unint64_t)v271 >= v270)
        v272 = 0;
      else
        v272 = *v271;
      *(_WORD *)(v264 + 176) = v272;
      v273 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v273 = v701;
      *(_BYTE *)(v273 + 56) = v700;
      v274 = *(_DWORD *)(a1 + 7400);
      v275 = *(_DWORD *)(a1 + 7412);
      v276 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v274;
      *(_DWORD *)(a1 + 7448) = v275;
      *(_DWORD *)(a1 + 7452) = v276;
      *(_DWORD *)(v273 + 4) = v274;
      v277 = *(_DWORD *)(a1 + 12);
      if (!v277)
      {
        __break(0xC471u);
        JUMPOUT(0x197EE1B54);
      }
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v273, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v277 - 1) + 9) & 1, a5, a6, a7, a8);
      *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v702;
      *v710 = v720;
      *(_DWORD *)(a1 + 7312) = 0;
      *(_DWORD *)(a1 + 7316) = v705;
      v285 = v713;
      *(_OWORD *)v713 = v718;
      v285[2] = v719;
      v286 = v715;
      v715[5].i8[4] = v704;
      v286[5].i8[5] = v703;
      v287 = *(WTF::StringImpl **)(a1 + 7360);
      *(_QWORD *)(a1 + 7360) = 0;
      if (v287)
      {
        if (*(_DWORD *)v287 == 2)
        {
          WTF::StringImpl::~StringImpl(v287, v278, v279, v280, v281, v282, v283, v284);
          WTF::fastFree(v392, v393, v394, v395, v396, v397, v398, v399);
        }
        else
        {
          *(_DWORD *)v287 -= 2;
        }
      }
      v288 = JSC::Parser<JSC::Lexer<char16_t>>::tryParseDestructuringPatternExpression<JSC::SyntaxChecker>(a1, (uint64_t)a2);
      if (*v707 == 1)
      {
        if (v288 && *v12 == 21)
        {
LABEL_351:
          v297 = *(_DWORD *)(a1 + 7400);
          v298 = *(_DWORD *)(a1 + 7412);
          v299 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v297;
          *(_DWORD *)(a1 + 7448) = v298;
          *(_DWORD *)(a1 + 7452) = v299;
          v300 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v300 + 4) = v297;
          v301 = *(_DWORD *)(a1 + 12);
          if (!v301)
          {
            __break(0xC471u);
            JUMPOUT(0x197EE1B5CLL);
          }
          v302 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v301 - 1) + 9) & 1;
          *(_BYTE *)(v300 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v300, a1 + 7368, 0, v302, v292, v293, v294, v295);
          LODWORD(v721) = 0;
          *((_QWORD *)&v721 + 1) = *(_QWORD *)(a1 + 7496);
          v722 = a1;
          *(_QWORD *)(a1 + 7496) = &v721;
          v303 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::SyntaxChecker>(a1, a2, &v721);
          *(_QWORD *)(v722 + 7496) = *((_QWORD *)&v721 + 1);
          v58 = 48;
          if (!v303)
          {
            if (*(_QWORD *)(a1 + 7360))
              v58 = 0;
            else
              v58 = 48;
          }
        }
        else
        {
          v439 = *(_QWORD *)(a1 + 7288);
          *(_BYTE *)(v439 + 150) = 0;
          v440 = *(WTF::StringImpl **)(v439 + 152);
          *(_QWORD *)(v439 + 152) = 0;
          if (v440)
          {
            if (*(_DWORD *)v440 == 2)
            {
              WTF::StringImpl::~StringImpl(v440, v289, v290, v291, v292, v293, v294, v295);
              WTF::fastFree(v520, v521, v522, v523, v524, v525, v526, v527);
            }
            else
            {
              *(_DWORD *)v440 -= 2;
            }
          }
          v441 = *(_QWORD *)(v439 + 88);
          v442 = *(_QWORD *)(v439 + 96);
          v443 = (__int16 *)(v441 + 2 * v262);
          *(_QWORD *)(v439 + 80) = v443;
          *(_QWORD *)(v439 + 112) = v441 + 2 * v263;
          *(_DWORD *)(v439 + 20) = 0;
          *(_DWORD *)(v439 + 36) = 0;
          if ((unint64_t)v443 >= v442)
            v444 = 0;
          else
            v444 = *v443;
          *(_WORD *)(v439 + 176) = v444;
          v445 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)v445 = v712;
          *(_BYTE *)(v445 + 56) = v265;
          v446 = *(_DWORD *)(a1 + 7400);
          v447 = *(_DWORD *)(a1 + 7412);
          v448 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v446;
          *(_DWORD *)(a1 + 7448) = v447;
          *(_DWORD *)(a1 + 7452) = v448;
          *(_DWORD *)(v445 + 4) = v446;
          v449 = *(_DWORD *)(a1 + 12);
          if (!v449)
          {
            __break(0xC471u);
            JUMPOUT(0x197EE1B7CLL);
          }
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v445, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v449 - 1) + 9) & 1, v292, v293, v294, v295);
          v450 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v450 + 4) = v714;
          *v710 = v716[0];
          *(_DWORD *)(a1 + 7312) = 0;
          v451 = v706;
          *v706 = *(_OWORD *)v733;
          *(_OWORD *)((char *)v451 + 14) = *(_OWORD *)&v733[14];
          *(_BYTE *)(v450 + 150) = v266;
          if (v267)
            *(_DWORD *)v267 += 2;
          v452 = *(WTF::StringImpl **)(v450 + 152);
          *(_QWORD *)(v450 + 152) = v267;
          if (v452)
          {
            if (*(_DWORD *)v452 == 2)
            {
              WTF::StringImpl::~StringImpl(v452, v289, v290, v291, v292, v293, v294, v295);
              WTF::fastFree(v528, v529, v530, v531, v532, v533, v534, v535);
            }
            else
            {
              *(_DWORD *)v452 -= 2;
            }
          }
          if (v268)
            *(_DWORD *)v268 += 2;
          v453 = *(WTF::StringImpl **)(a1 + 7360);
          *(_QWORD *)(a1 + 7360) = v268;
          if (!v453)
            goto LABEL_580;
          if (*(_DWORD *)v453 == 2)
          {
            WTF::StringImpl::~StringImpl(v453, v289, v290, v291, v292, v293, v294, v295);
            WTF::fastFree(v536, v537, v538, v539, v540, v541, v542, v543);
            goto LABEL_580;
          }
          v58 = 0;
          *(_DWORD *)v453 -= 2;
        }
      }
      else
      {
        v296 = *v12;
        if (v288)
        {
          if (v296 == 21)
            goto LABEL_351;
          if (v296 != 20 && (v296 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected '=' following assignment pattern");
            goto LABEL_580;
          }
LABEL_579:
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
          goto LABEL_580;
        }
        if (v296 == 20 || (v296 & 0x100000) != 0)
          goto LABEL_579;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse assignment pattern");
LABEL_580:
        v58 = 0;
      }
      if (v268)
      {
        if (*(_DWORD *)v268 == 2)
        {
          WTF::StringImpl::~StringImpl(v268, v289, v290, v291, v292, v293, v294, v295);
          WTF::fastFree(v400, v401, v402, v403, v404, v405, v406, v407);
        }
        else
        {
          *(_DWORD *)v268 -= 2;
        }
      }
      if (v267)
      {
        if (*(_DWORD *)v267 == 2)
        {
          WTF::StringImpl::~StringImpl(v267, v289, v290, v291, v292, v293, v294, v295);
          WTF::fastFree(v408, v409, v410, v411, v412, v413, v414, v415);
        }
        else
        {
          *(_DWORD *)v267 -= 2;
        }
      }
      return v58;
    }
  }
LABEL_124:
  v58 = *v12;
  if ((_DWORD)v58 == 20 || (((_DWORD)v58 != 38) & ~v53) != 0)
    goto LABEL_126;
  v717 = *v710;
  v716[0] = *v706;
  *(_OWORD *)((char *)v716 + 14) = *(_OWORD *)((char *)v706 + 14);
  v135 = *(int *)(a1 + 7404);
  v686 = *(int *)(a1 + 7408);
  v687 = v135;
  v136 = *(int **)(a1 + 7288);
  v137 = v136[1];
  v688 = *v136;
  v689 = *((unsigned __int8 *)v136 + 56);
  v690 = v137;
  v691 = *((unsigned __int8 *)v136 + 150);
  v138 = (WTF::StringImpl *)*((_QWORD *)v136 + 19);
  if (v138)
    *(_DWORD *)v138 += 2;
  v139 = *(WTF::StringImpl **)(a1 + 7360);
  if (v139)
    *(_DWORD *)v139 += 2;
  *((_BYTE *)v136 + 150) = 0;
  *((_QWORD *)v136 + 19) = 0;
  if (v138)
  {
    if (*(_DWORD *)v138 == 2)
    {
      WTF::StringImpl::~StringImpl(v138, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v304, v305, v306, v307, v308, v309, v310, v311);
    }
    else
    {
      *(_DWORD *)v138 -= 2;
    }
  }
  v140 = *((_QWORD *)v136 + 11);
  v141 = *((_QWORD *)v136 + 12);
  v142 = (__int16 *)(v140 + 2 * v708);
  *((_QWORD *)v136 + 10) = v142;
  *((_QWORD *)v136 + 14) = v140 + 2 * v699;
  v136[5] = 0;
  v136[9] = 0;
  if ((unint64_t)v142 >= v141)
    v143 = 0;
  else
    v143 = *v142;
  *((_WORD *)v136 + 88) = v143;
  v144 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)v144 = v701;
  *(_BYTE *)(v144 + 56) = v700;
  v145 = *(_DWORD *)(a1 + 7400);
  v146 = *(_DWORD *)(a1 + 7412);
  v147 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v145;
  *(_DWORD *)(a1 + 7448) = v146;
  *(_DWORD *)(a1 + 7452) = v147;
  *(_DWORD *)(v144 + 4) = v145;
  v148 = *(_DWORD *)(a1 + 12);
  if (!v148)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE1B04);
  }
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v144, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v148 - 1) + 9) & 1, a5, a6, a7, a8);
  *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v702;
  v149 = v710;
  *v710 = v720;
  *(_DWORD *)(a1 + 7312) = 0;
  *(_DWORD *)(a1 + 7316) = v705;
  v150 = v713;
  *(_OWORD *)v713 = v718;
  v150[2] = v719;
  v151 = v715;
  v715[5].i8[4] = v704;
  v151[5].i8[5] = v703;
  v152 = *(WTF::StringImpl **)(a1 + 7360);
  *(_QWORD *)(a1 + 7360) = 0;
  if (v152)
  {
    if (*(_DWORD *)v152 == 2)
    {
      WTF::StringImpl::~StringImpl(v152, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v312, v313, v314, v315, v316, v317, v318, v319);
    }
    else
    {
      *(_DWORD *)v152 -= 2;
    }
  }
  v153 = *v707;
  v154 = *v12;
  v711 = v139;
  if (v153 != 2)
  {
    HIDWORD(v709) = 0;
    goto LABEL_238;
  }
  if (v154 == 12)
  {
    if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896)
      && !v715[10].i8[4])
    {
      v664 = *(_DWORD *)(a1 + 7400);
      v665 = *(_DWORD *)(a1 + 7412);
      v666 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v664;
      *(_DWORD *)(a1 + 7448) = v665;
      *(_DWORD *)(a1 + 7452) = v666;
      v667 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v667 + 4) = v664;
      v668 = *(_DWORD *)(a1 + 12);
      if (!v668)
      {
        __break(0xC471u);
        JUMPOUT(0x197EE1BB4);
      }
      v669 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v668 - 1) + 9) & 1;
      *(_BYTE *)(v667 + 56) = 0;
      v154 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v667, a1 + 7368, 0, v669, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v154;
      HIDWORD(v709) = 1;
      goto LABEL_561;
    }
    HIDWORD(v709) = 0;
LABEL_540:
    v149 = v710;
LABEL_369:
    v728 = *v149;
    LODWORD(v709) = *(_DWORD *)(a1 + 7316);
    *(_OWORD *)v733 = *(_OWORD *)v713;
    *(_QWORD *)&v733[16] = v713[2];
    v336 = v715[5].u8[4];
    v696 = v715[5].u8[5];
    v697 = v336;
    v337 = *(int *)(a1 + 7408);
    v338 = *(int *)(a1 + 7404);
    v339 = *(_QWORD *)(a1 + 7288);
    v340 = *(_DWORD *)(v339 + 4);
    v693 = *(_DWORD *)v339;
    v694 = v340;
    LODWORD(v692) = *(unsigned __int8 *)(v339 + 56);
    v341 = *(_DWORD *)(a1 + 7400);
    v342 = *(_DWORD *)(a1 + 7412);
    *(_DWORD *)(a1 + 7444) = v341;
    *(_DWORD *)(a1 + 7448) = v342;
    *(_DWORD *)(a1 + 7452) = v338;
    *(_DWORD *)(v339 + 4) = v341;
    v343 = *(_DWORD *)(a1 + 12);
    if (!v343)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE1B6CLL);
    }
    v344 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v343 - 1) + 9) & 1;
    *(_BYTE *)(v339 + 56) = 0;
    v695 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v339, a1 + 7368, 0, v344, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v695;
    v352 = *(_QWORD *)(a1 + 7288);
    *(_BYTE *)(v352 + 150) = 0;
    v353 = *(WTF::StringImpl **)(v352 + 152);
    *(_QWORD *)(v352 + 152) = 0;
    if (v353)
    {
      if (*(_DWORD *)v353 == 2)
      {
        WTF::StringImpl::~StringImpl(v353, v345, v346, v347, v348, v349, v350, v351);
        WTF::fastFree(v423, v424, v425, v426, v427, v428, v429, v430);
      }
      else
      {
        *(_DWORD *)v353 -= 2;
      }
    }
    v354 = *(_QWORD *)(v352 + 88);
    v355 = *(_QWORD *)(v352 + 96);
    v356 = (__int16 *)(v354 + 2 * v337);
    *(_QWORD *)(v352 + 80) = v356;
    *(_QWORD *)(v352 + 112) = v354 + 2 * v338;
    *(_DWORD *)(v352 + 20) = 0;
    *(_DWORD *)(v352 + 36) = 0;
    if ((unint64_t)v356 >= v355)
      v357 = 0;
    else
      v357 = *v356;
    v358 = v710;
    *(_WORD *)(v352 + 176) = v357;
    v359 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v359 = v693;
    *(_BYTE *)(v359 + 56) = v692;
    v360 = *(_DWORD *)(a1 + 7400);
    v361 = *(_DWORD *)(a1 + 7412);
    v362 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v360;
    *(_DWORD *)(a1 + 7448) = v361;
    *(_DWORD *)(a1 + 7452) = v362;
    *(_DWORD *)(v359 + 4) = v360;
    v363 = *(_DWORD *)(a1 + 12);
    if (!v363)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE1B74);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v359, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v363 - 1) + 9) & 1, v348, v349, v350, v351);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v694;
    *v358 = v728;
    *(_DWORD *)(a1 + 7312) = 0;
    *(_DWORD *)(a1 + 7316) = v709;
    v364 = v713;
    *(_OWORD *)v713 = *(_OWORD *)v733;
    v364[2] = *(uint64_t **)&v733[16];
    v365 = v715;
    v715[5].i8[4] = v697;
    v365[5].i8[5] = v696;
    v366 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    v52 = v712;
    v238 = v698;
    if (v366)
    {
      if (*(_DWORD *)v366 == 2)
      {
        WTF::StringImpl::~StringImpl(v366, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v431, v432, v433, v434, v435, v436, v437, v438);
        v238 = v698;
      }
      else
      {
        *(_DWORD *)v366 -= 2;
      }
    }
    if (v695 != 38)
      goto LABEL_463;
    goto LABEL_299;
  }
  HIDWORD(v709) = 0;
LABEL_561:
  v149 = v710;
LABEL_238:
  if (v154 != 2)
  {
    if (v154 > 544)
    {
      if (v154 == 545)
        goto LABEL_715;
      if (v154 != 1048592)
        goto LABEL_455;
      v679 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v680 = **(_QWORD **)(a1 + 7376);
      if (v680 != v679[41])
        goto LABEL_714;
    }
    else
    {
      if (v154 == 12)
        goto LABEL_369;
      if (v154 != 544)
        goto LABEL_463;
    }
    v681 = *(_DWORD *)(a1 + 12);
    if (!v681)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE1BC4);
    }
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v681 - 1) + 9) & 1) == 0)
    {
LABEL_671:
      if (v154 != 1048592
        || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
        goto LABEL_540;
      }
      goto LABEL_456;
    }
    if (v154 == 1048592)
    {
      v679 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v680 = **(_QWORD **)(a1 + 7376);
LABEL_714:
      if (v680 != v679[62])
      {
LABEL_719:
        if (v680 != v679[16])
          goto LABEL_463;
LABEL_456:
        if (!v715[5].i8[4])
          goto LABEL_774;
        v454 = *(_DWORD *)(a1 + 12);
        if (!v454)
        {
          __break(0xC471u);
          JUMPOUT(0x197EE1BBCLL);
        }
        v149 = v710;
        if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v454 - 1) + 10) & 0x102000) != 0
          || *(_DWORD *)(a1 + 7480) == 1)
        {
LABEL_774:
          if (!*(_QWORD *)(a1 + 7360))
          {
            *(_QWORD *)v733 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[40],char const*>(a1, (const char **)v733);
          }
          goto LABEL_463;
        }
        goto LABEL_369;
      }
LABEL_715:
      v683 = *(_DWORD *)(a1 + 12);
      if (!v683)
      {
        __break(0xC471u);
        JUMPOUT(0x197EE1C6CLL);
      }
      v684 = v683 - 1;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v684 + 9) & 1) == 0
        && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v684 + 11) & 2) == 0)
      {
        goto LABEL_671;
      }
      if (v154 != 1048592)
        goto LABEL_463;
      v679 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v680 = **(_QWORD **)(a1 + 7376);
      goto LABEL_719;
    }
LABEL_455:
    if (v154 != 546)
      goto LABEL_463;
    goto LABEL_456;
  }
  v730 = *v149;
  v155 = *(_DWORD *)(a1 + 7316);
  v728 = *(_OWORD *)v713;
  v729 = v713[2];
  v156 = v715[5].u8[4];
  v157 = v715[5].u8[5];
  v692 = *(int *)(a1 + 7408);
  v158 = *(int *)(a1 + 7404);
  v159 = *(_QWORD *)(a1 + 7288);
  v695 = *(_DWORD *)(v159 + 4);
  v696 = v157;
  v160 = *(_DWORD *)v159;
  v693 = *(unsigned __int8 *)(v159 + 56);
  v694 = v160;
  v161 = *(_DWORD *)(a1 + 7400);
  v162 = *(_DWORD *)(a1 + 7412);
  *(_DWORD *)(a1 + 7444) = v161;
  *(_DWORD *)(a1 + 7448) = v162;
  *(_DWORD *)(a1 + 7452) = v158;
  *(_DWORD *)(v159 + 4) = v161;
  v163 = *(_DWORD *)(a1 + 12);
  if (!v163)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE1B0CLL);
  }
  v164 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v163 - 1) + 9) & 1;
  *(_BYTE *)(v159 + 56) = 0;
  v165 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v159, a1 + 7368, 0, v164, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v165;
  LODWORD(v709) = v155;
  v697 = v156;
  if (v165 == 3)
  {
    v255 = *(_DWORD *)(a1 + 7400);
    v256 = *(_DWORD *)(a1 + 7412);
    v257 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v255;
    *(_DWORD *)(a1 + 7448) = v256;
    *(_DWORD *)(a1 + 7452) = v257;
    v258 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v258 + 4) = v255;
    v259 = *(_DWORD *)(a1 + 12);
    if (!v259)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE1B64);
    }
    v260 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v259 - 1) + 9) & 1;
    *(_BYTE *)(v258 + 56) = 0;
    v261 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v258, a1 + 7368, 0, v260, v166, v167, v168, v169);
    *(_DWORD *)(a1 + 7368) = v261;
    v206 = v261 == 38;
LABEL_290:
    v222 = *(_QWORD *)(a1 + 7288);
    *(_BYTE *)(v222 + 150) = 0;
    v223 = *(WTF::StringImpl **)(v222 + 152);
    *(_QWORD *)(v222 + 152) = 0;
    if (v223)
    {
      if (*(_DWORD *)v223 == 2)
      {
        WTF::StringImpl::~StringImpl(v223, v221, v215, v216, v217, v218, v219, v220);
        WTF::fastFree(v367, v368, v369, v370, v371, v372, v373, v374);
      }
      else
      {
        *(_DWORD *)v223 -= 2;
      }
    }
    v224 = *(_QWORD *)(v222 + 88);
    v225 = *(_QWORD *)(v222 + 96);
    v226 = (__int16 *)(v224 + 2 * v692);
    *(_QWORD *)(v222 + 80) = v226;
    *(_QWORD *)(v222 + 112) = v224 + 2 * v158;
    *(_DWORD *)(v222 + 20) = 0;
    *(_DWORD *)(v222 + 36) = 0;
    if ((unint64_t)v226 >= v225)
      v227 = 0;
    else
      v227 = *v226;
    v52 = v712;
    v229 = v693;
    v228 = v694;
    *(_WORD *)(v222 + 176) = v227;
    v230 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v230 = v228;
    *(_BYTE *)(v230 + 56) = v229;
    v231 = *(_DWORD *)(a1 + 7400);
    v232 = *(_DWORD *)(a1 + 7412);
    v233 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v231;
    *(_DWORD *)(a1 + 7448) = v232;
    *(_DWORD *)(a1 + 7452) = v233;
    *(_DWORD *)(v230 + 4) = v231;
    v234 = *(_DWORD *)(a1 + 12);
    if (!v234)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE1B14);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v230, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v234 - 1) + 9) & 1, v217, v218, v219, v220);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v695;
    *v710 = v730;
    *(_DWORD *)(a1 + 7312) = 0;
    *(_DWORD *)(a1 + 7316) = v709;
    v235 = v713;
    *(_OWORD *)v713 = v728;
    v235[2] = v729;
    v236 = v715;
    v715[5].i8[4] = v697;
    v236[5].i8[5] = v696;
    v237 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (v237)
    {
      v238 = v698;
      if (*(_DWORD *)v237 != 2)
      {
        *(_DWORD *)v237 -= 2;
        if (!v206)
          goto LABEL_463;
        goto LABEL_299;
      }
      WTF::StringImpl::~StringImpl(v237, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v375, v376, v377, v378, v379, v380, v381, v382);
    }
    v238 = v698;
    if (!v206)
      goto LABEL_463;
LABEL_299:
    v239 = v715;
    if (v52 == 2)
    {
      v240 = *(_DWORD *)(a1 + 12);
      if (!v240)
      {
        __break(0xC471u);
        JUMPOUT(0x197EE1B1CLL);
      }
      v241 = v240 - 1;
      v242 = *(_QWORD *)a1 + 720 * v241;
      v245 = *(_DWORD *)(v242 + 180);
      v244 = (_DWORD *)(v242 + 180);
      v243 = v245;
      v246 = (uint64_t *)(v244 - 3);
      v247 = v238 == v245;
      if (v238 > v245)
      {
        if (v238 > *(unsigned int *)(*(_QWORD *)a1 + 720 * v241 + 176))
          WTF::Vector<WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v244 - 3), (void *)v698, a3, a4, a5, a6, a7, a8);
        v659 = *v246;
        v239 = v715;
        LODWORD(v238) = v698;
        if (*v246)
        {
          v660 = *v244;
          if (v698 != v660)
          {
            v661 = v659 + 72 * v698;
            v662 = v659 + 72 * v660;
            *(_QWORD *)&v663 = -1;
            *((_QWORD *)&v663 + 1) = -1;
            do
            {
              *(_QWORD *)v662 = 0x800000000;
              *(_OWORD *)(v662 + 8) = v663;
              *(_OWORD *)(v662 + 24) = v663;
              *(_OWORD *)(v662 + 40) = v663;
              *(_OWORD *)(v662 + 56) = v663;
              v662 += 72;
            }
            while (v662 != v661);
          }
        }
      }
      else if (!v247)
      {
        v248 = 72 * v243 - 72 * v238;
        v249 = (unint64_t *)(*v246 + 72 * v238 + 8);
        do
        {
          if (*((_DWORD *)v249 - 1) != 8)
          {
            WTF::fastFree(*v249, a2, a3, a4, a5, a6, a7, a8);
            LODWORD(v238) = v698;
            v239 = v715;
          }
          v249 += 9;
          v248 -= 72;
        }
        while (v248);
      }
      *v244 = v238;
      v52 = v712;
    }
    memset(&v733[8], 0, 32);
    *(_QWORD *)v733 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
    if (HIDWORD(v709))
      v250 = 11;
    else
      v250 = 6;
    v251 = v239[21].i8[6];
    v239[21].i8[6] = v250;
    if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::SyntaxChecker>(a1, (const char *)a2, 2, 1, 0, 1, v708, (WTF::StringImpl ***)v733, 0) & 1) != 0)
    {
      v58 = 12;
    }
    else
    {
      if (*v12 == 20 || (*v12 & 0x100000) != 0)
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      }
      else if (!*(_QWORD *)(a1 + 7360))
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse arrow function expression");
      }
      v58 = 0;
      v52 = v712;
    }
    v252 = 0;
    v42 = v715;
    v715[21].i8[6] = v251;
LABEL_314:
    v253 = v711;
    goto LABEL_315;
  }
  v727[0] = *(_QWORD *)(a1 + 7216);
  v170 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  v725[0] = v170;
  v725[1] = v171;
  v726 = (WTF::AtomStringImpl *)a1;
  if (*(_DWORD *)(v170 + 12) <= v171)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE1B3CLL);
  }
  *(_DWORD *)(*(_QWORD *)v170 + 720 * v171 + 10) = *(_DWORD *)(*(_QWORD *)v170
                                                                             + 720 * v171
                                                                             + 10) & 0xFE8F007F | 0x1409980;
  v176 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v176)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE1B44);
  }
  if ((_DWORD)v176 != 1)
  {
    v177 = v176 - 1;
    v178 = *(_QWORD *)a1;
    if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v176 - 1) + 10) & 0x400000) != 0)
    {
      v179 = 720 * v176;
      while (1)
      {
        v180 = v179 - 720;
        if (v179 == 720)
          break;
        v181 = *(_BYTE *)(v178 + v179 - 1428);
        v179 -= 720;
        if ((v181 & 0x40) != 0)
        {
          if (*(_BYTE *)(v178 + v180 - 712) != 2)
            *(_BYTE *)(v178 + 720 * v177 + 8) = 0;
          break;
        }
      }
    }
  }
  v182 = 0;
  v732 = 0;
  *(_QWORD *)v733 = 0;
  v183 = *v12;
  while (2)
  {
    if (v183 == 37)
    {
      v416 = *(_DWORD *)(a1 + 7400);
      v417 = *(_DWORD *)(a1 + 7412);
      v418 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v416;
      *(_DWORD *)(a1 + 7448) = v417;
      *(_DWORD *)(a1 + 7452) = v418;
      v419 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v419 + 4) = v416;
      v420 = *(_DWORD *)(a1 + 12);
      if (!v420)
      {
        __break(0xC471u);
        JUMPOUT(0x197EE1B2CLL);
      }
      v421 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v420 - 1) + 9) & 1;
      *(_BYTE *)(v419 + 56) = 0;
      v422 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v419, a1 + 7368, 0, v421, v172, v173, v174, v175);
      *(_DWORD *)(a1 + 7368) = v422;
      if (v422 == 546
        || v422 == 1048592
        && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
        if (!v715[5].i8[4])
          goto LABEL_775;
        v678 = *(_DWORD *)(a1 + 12);
        if (!v678)
        {
          __break(0xC471u);
          JUMPOUT(0x197EE1B24);
        }
        if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v678 - 1) + 10) & 0x102000) != 0
          || *(_DWORD *)(a1 + 7480) == 1)
        {
LABEL_775:
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a parameter name in an async function");
          goto LABEL_602;
        }
      }
      JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, v727, 4, v733, &v732, 0);
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_602;
      if (*v12 == 6)
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Rest parameter should be the last parameter in a function declaration");
        goto LABEL_602;
      }
      v187 = 0;
      LODWORD(v188) = 1;
    }
    else
    {
      if (v183 == 3)
        goto LABEL_284;
      if (!JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, v727, 4, v733, &v732, 0))
      {
        if (*v12 == 20 || (*v12 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
        }
        goto LABEL_602;
      }
      v187 = JSC::Parser<JSC::Lexer<char16_t>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, v727);
      v188 = *(_QWORD *)(a1 + 7360);
      if (v188)
        goto LABEL_602;
      v182 |= v187 != 0;
    }
    if (*(_QWORD *)v733)
    {
      if ((v182 & 1) != 0)
      {
        v731 = **(_QWORD **)v733;
        v682 = "' not allowed in function with default parameter values";
      }
      else
      {
        if (!v732)
        {
          v731 = **(_QWORD **)v733;
          if ((_DWORD)v188)
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[48]>(a1, &v731);
          else
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[35]>(a1, &v731);
          goto LABEL_602;
        }
        v731 = **(_QWORD **)v733;
        v682 = "' not allowed in function with destructuring parameters";
      }
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[56]>(a1, &v731, v682);
      goto LABEL_602;
    }
    if (v187)
      v189 = 1;
    else
      v189 = v188;
    if ((v189 & 1) != 0 || v732)
    {
      v196 = *(_DWORD *)(a1 + 12);
      if (!v196)
      {
        __break(0xC471u);
        JUMPOUT(0x197EE1B34);
      }
      v197 = *(_QWORD *)a1 + 720 * (v196 - 1);
      *(_DWORD *)(v197 + 10) = *(_DWORD *)(v197 + 10) & 0xFB7FFFFF | 0x4000000;
    }
    if (*v12 != 6)
      LOBYTE(v188) = 1;
    if ((v188 & 1) == 0)
    {
      v190 = *(_DWORD *)(a1 + 7400);
      v191 = *(_DWORD *)(a1 + 7412);
      v192 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v190;
      *(_DWORD *)(a1 + 7448) = v191;
      *(_DWORD *)(a1 + 7452) = v192;
      v193 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v193 + 4) = v190;
      v194 = *(_DWORD *)(a1 + 12);
      if (!v194)
      {
        __break(0xC471u);
        JUMPOUT(0x197EE1AB4);
      }
      v195 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v194 - 1) + 9) & 1;
      *(_BYTE *)(v193 + 56) = 0;
      v183 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v193, a1 + 7368, 0, v195, v172, v173, v174, v175);
      *(_DWORD *)(a1 + 7368) = v183;
      continue;
    }
    break;
  }
  if (*v12 != 3)
  {
LABEL_602:
    v206 = 0;
    goto LABEL_286;
  }
LABEL_284:
  v199 = *(_DWORD *)(a1 + 7400);
  v200 = *(_DWORD *)(a1 + 7412);
  v201 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v199;
  *(_DWORD *)(a1 + 7448) = v200;
  *(_DWORD *)(a1 + 7452) = v201;
  v202 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v202 + 4) = v199;
  v203 = *(_DWORD *)(a1 + 12);
  if (!v203)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE1B4CLL);
  }
  v204 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v203 - 1) + 9) & 1;
  *(_BYTE *)(v202 + 56) = 0;
  v205 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v202, a1 + 7368, 0, v204, v172, v173, v174, v175);
  *(_DWORD *)(a1 + 7368) = v205;
  v206 = v205 == 38;
LABEL_286:
  if (!*(_QWORD *)(a1 + 7360))
  {
    v726 = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v721, (uint64_t *)a1, 0, v186, v172, v173, v174, v175);
    v214 = v723;
    if (v723)
    {
      v723 = 0;
      v724 = 0;
      WTF::fastFree((unint64_t)v214, v207, v208, v209, v210, v211, v212, v213);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v721, (WTF::AtomStringImpl *)v207, v208, v209, v210, v211, v212, v213);
    v221 = v726;
    if (v726)
    {
      v726 = 0;
      JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v733, (uint64_t *)v221, 0, v216, v217, v218, v219, v220);
      v677 = *(_QWORD *)&v733[24];
      if (*(_QWORD *)&v733[24])
      {
        *(_QWORD *)&v733[24] = 0;
        *(_DWORD *)&v733[32] = 0;
        WTF::fastFree(v677, v670, v671, v672, v673, v674, v675, v676);
      }
      JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v733, (WTF::AtomStringImpl *)v670, v671, v672, v673, v674, v675, v676);
    }
    goto LABEL_290;
  }
  JSC::Parser<JSC::Lexer<char16_t>>::AutoPopScopeRef::~AutoPopScopeRef((uint64_t)v725, v184, v185, v186, v172, v173, v174, v175);
LABEL_463:
  if ((_DWORD)v58 != 38)
  {
    v478 = *(_QWORD *)(a1 + 7288);
    *(_BYTE *)(v478 + 150) = 0;
    v479 = *(WTF::StringImpl **)(v478 + 152);
    *(_QWORD *)(v478 + 152) = 0;
    if (v479)
    {
      if (*(_DWORD *)v479 == 2)
      {
        WTF::StringImpl::~StringImpl(v479, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v544, v545, v546, v547, v548, v549, v550, v551);
      }
      else
      {
        *(_DWORD *)v479 -= 2;
      }
    }
    v480 = *(_QWORD *)(v478 + 88);
    v481 = *(_QWORD *)(v478 + 96);
    v482 = v687;
    v483 = (__int16 *)(v480 + 2 * v686);
    *(_QWORD *)(v478 + 80) = v483;
    *(_QWORD *)(v478 + 112) = v480 + 2 * v482;
    *(_DWORD *)(v478 + 20) = 0;
    *(_DWORD *)(v478 + 36) = 0;
    if ((unint64_t)v483 >= v481)
      v484 = 0;
    else
      v484 = *v483;
    *(_WORD *)(v478 + 176) = v484;
    v485 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v485 = v688;
    *(_BYTE *)(v485 + 56) = v689;
    v486 = *(_DWORD *)(a1 + 7400);
    v487 = *(_DWORD *)(a1 + 7412);
    v488 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v486;
    *(_DWORD *)(a1 + 7448) = v487;
    *(_DWORD *)(a1 + 7452) = v488;
    *(_DWORD *)(v485 + 4) = v486;
    v489 = *(_DWORD *)(a1 + 12);
    if (!v489)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE1B84);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v485, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v489 - 1) + 9) & 1, a5, a6, a7, a8);
    v490 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v490 + 4) = v690;
    *v710 = v717;
    *(_DWORD *)(a1 + 7312) = 0;
    v491 = v706;
    *v706 = v716[0];
    *(_OWORD *)((char *)v491 + 14) = *(_OWORD *)((char *)v716 + 14);
    *(_BYTE *)(v490 + 150) = v691;
    if (v138)
      *(_DWORD *)v138 += 2;
    v492 = *(WTF::StringImpl **)(v490 + 152);
    *(_QWORD *)(v490 + 152) = v138;
    if (v492)
    {
      if (*(_DWORD *)v492 == 2)
      {
        WTF::StringImpl::~StringImpl(v492, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v552, v553, v554, v555, v556, v557, v558, v559);
      }
      else
      {
        *(_DWORD *)v492 -= 2;
      }
    }
    v493 = v711;
    if (v711)
      *(_DWORD *)v711 += 2;
    v494 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = v493;
    if (v494)
    {
      if (*(_DWORD *)v494 == 2)
      {
        WTF::StringImpl::~StringImpl(v494, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v560, v561, v562, v563, v564, v565, v566, v567);
      }
      else
      {
        *(_DWORD *)v494 -= 2;
      }
    }
    v252 = 1;
    goto LABEL_499;
  }
  if (*(_QWORD *)(a1 + 7360))
  {
    v252 = 0;
    v58 = 0;
LABEL_499:
    v42 = v715;
    v52 = v712;
    goto LABEL_314;
  }
  v455 = *(_QWORD *)(a1 + 7288);
  *(_BYTE *)(v455 + 150) = 0;
  v456 = *(WTF::StringImpl **)(v455 + 152);
  *(_QWORD *)(v455 + 152) = 0;
  if (v456)
  {
    if (*(_DWORD *)v456 == 2)
    {
      WTF::StringImpl::~StringImpl(v456, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v568, v569, v570, v571, v572, v573, v574, v575);
    }
    else
    {
      *(_DWORD *)v456 -= 2;
    }
  }
  v457 = *(_QWORD *)(v455 + 88);
  v458 = *(_QWORD *)(v455 + 96);
  v459 = v687;
  v460 = (__int16 *)(v457 + 2 * v686);
  *(_QWORD *)(v455 + 80) = v460;
  *(_QWORD *)(v455 + 112) = v457 + 2 * v459;
  *(_DWORD *)(v455 + 20) = 0;
  *(_DWORD *)(v455 + 36) = 0;
  if ((unint64_t)v460 >= v458)
    v461 = 0;
  else
    v461 = *v460;
  *(_WORD *)(v455 + 176) = v461;
  v462 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)v462 = v688;
  *(_BYTE *)(v462 + 56) = v689;
  v463 = *(_DWORD *)(a1 + 7400);
  v464 = *(_DWORD *)(a1 + 7412);
  v465 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v463;
  *(_DWORD *)(a1 + 7448) = v464;
  *(_DWORD *)(a1 + 7452) = v465;
  *(_DWORD *)(v462 + 4) = v463;
  v466 = *(_DWORD *)(a1 + 12);
  if (!v466)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE1B8CLL);
  }
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v462, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v466 - 1) + 9) & 1, a5, a6, a7, a8);
  v474 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v474 + 4) = v690;
  *v710 = v717;
  *(_DWORD *)(a1 + 7312) = 0;
  v475 = v706;
  *v706 = v716[0];
  *(_OWORD *)((char *)v475 + 14) = *(_OWORD *)((char *)v716 + 14);
  *(_BYTE *)(v474 + 150) = v691;
  if (v138)
    *(_DWORD *)v138 += 2;
  v476 = *(WTF::StringImpl **)(v474 + 152);
  *(_QWORD *)(v474 + 152) = v138;
  if (v476)
  {
    if (*(_DWORD *)v476 == 2)
    {
      WTF::StringImpl::~StringImpl(v476, v467, v468, v469, v470, v471, v472, v473);
      WTF::fastFree(v576, v577, v578, v579, v580, v581, v582, v583);
    }
    else
    {
      *(_DWORD *)v476 -= 2;
    }
  }
  v253 = v711;
  if (v711)
    *(_DWORD *)v711 += 2;
  v477 = *(WTF::StringImpl **)(a1 + 7360);
  *(_QWORD *)(a1 + 7360) = v253;
  if (v477)
  {
    if (*(_DWORD *)v477 == 2)
    {
      WTF::StringImpl::~StringImpl(v477, v467, v468, v469, v470, v471, v472, v473);
      WTF::fastFree(v584, v585, v586, v587, v588, v589, v590, v591);
    }
    else
    {
      *(_DWORD *)v477 -= 2;
    }
  }
  JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
  v252 = 0;
  v58 = 0;
  v42 = v715;
  v52 = v712;
LABEL_315:
  if (v253)
  {
    if (*(_DWORD *)v253 == 2)
    {
      WTF::StringImpl::~StringImpl(v253, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v320, v321, v322, v323, v324, v325, v326, v327);
      v42 = v715;
    }
    else
    {
      *(_DWORD *)v253 -= 2;
    }
  }
  if (v138)
  {
    if (*(_DWORD *)v138 == 2)
    {
      WTF::StringImpl::~StringImpl(v138, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v328, v329, v330, v331, v332, v333, v334, v335);
      v42 = v715;
    }
    else
    {
      *(_DWORD *)v138 -= 2;
    }
  }
  if (v252)
    goto LABEL_126;
  return v58;
}

const char *JSC::Parser<JSC::Lexer<char16_t>>::metaPropertyName<JSC::SyntaxChecker>(int a1)
{
  const char *result;

  if (a1 == 0x80000000)
    return "new.target";
  if (a1 == -2147483647)
    return "import.meta";
  result = (const char *)4150;
  __break(0xC471u);
  return result;
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[139]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Ambiguous unary expression in the left hand side of the exponentiation expression; parentheses must be used to dis"
      "ambiguate the expression");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[112]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Coalescing and logical operators used together in the same expression; parentheses must be used to disambiguate");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[31],char const*,char const(&)[9]>(uint64_t a1, const char **a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Cannot parse subexpression of ");
    WTF::PrintStream::printf(v5, "%s", *a2);
    WTF::PrintStream::printf(v5, "%s", "operator");
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[14]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", ")");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " an ");
    WTF::PrintStream::printf(v3, "%s", "argument list");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseTemplateString<JSC::SyntaxChecker>(uint64_t a1, char a2, unsigned int a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t result;
  int v20;
  uint64_t v21;

  if ((a2 & 1) == 0)
  {
    v10 = *(_DWORD *)(a1 + 7368);
    if (v10 != 1)
    {
      if (v10 != 20 && (v10 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[67]>(a1);
        return 0;
      }
      goto LABEL_17;
    }
  }
  v11 = JSC::Lexer<char16_t>::scanTemplateString(*(unsigned int **)(a1 + 7288), (WTF::AtomStringImpl *)(a1 + 7368), a3, (uint64_t)a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v11;
  if (v11 != 15)
  {
    if (v11 != 20 && (v11 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected an template element");
      return 0;
    }
LABEL_17:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return 0;
  }
  *a4 = *(_BYTE *)(a1 + 7392);
  v16 = *(_DWORD *)(a1 + 7400);
  v17 = *(_DWORD *)(a1 + 7412);
  v18 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v16;
  *(_DWORD *)(a1 + 7448) = v17;
  *(_DWORD *)(a1 + 7452) = v18;
  result = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(result + 4) = v16;
  v20 = *(_DWORD *)(a1 + 12);
  if (v20)
  {
    v21 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v20 - 1) + 9) & 1;
    *(_BYTE *)(result + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)result, a1 + 7368, 0, v21, v12, v13, v14, v15);
    return 49;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[67]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected a closing '}' following an expression in template literal");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseObjectRestAssignmentElement<JSC::SyntaxChecker>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;

  result = JSC::Parser<JSC::Lexer<char16_t>>::parseMemberExpression<JSC::SyntaxChecker>(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result > 0x30 || ((1 << result) & 0x1000002030004) == 0)
  {
    v15 = *(_DWORD **)(a1 + 7496);
    if (v15 && *v15 == 1)
      *v15 = 0;
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Invalid destructuring assignment target");
    return 0;
  }
  v10 = *(_DWORD *)(a1 + 12);
  if (v10)
  {
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v10 - 1) + 9) & 1) == 0)
      return 31;
    v11 = *(uint64_t **)(a1 + 7320);
    v12 = 31;
    if (!v11 || (result - 1) > 1)
      return v12;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
    v14 = *v11;
    if (*(_QWORD *)(v13 + 1248) != *v11 && *(_QWORD *)(v13 + 880) != v14)
      return 31;
    v16 = *(_DWORD **)(a1 + 7496);
    if (v16 && *v16 == 1)
      *v16 = 0;
    if (!*(_QWORD *)(a1 + 7360))
    {
      v17 = v14;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, &v17);
    }
    return 0;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseObjectRestElement<JSC::SyntaxChecker>(uint64_t a1, unsigned int a2, char ***a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  BOOL isAllowedIdentifierLet;
  int v26;
  BOOL isAllowedIdentifierYield;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  int v35;
  uint64_t v36;
  const char *v37;
  const char *Range;
  uint64_t v39;

  v9 = (_BYTE *)(a1 + 7344);
  if ((unint64_t)&v36 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v17 = 0;
      v9[8] = 1;
      return v17;
    }
    return 0;
  }
  v12 = *(_DWORD *)(a1 + 7368);
  if (v12 == 12)
    goto LABEL_3;
  isAllowedIdentifierLet = JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, v12, *(_QWORD **)(a1 + 7376));
  v26 = *(_DWORD *)(a1 + 7368);
  if (isAllowedIdentifierLet
    || (isAllowedIdentifierYield = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, v26, *(_QWORD **)(a1 + 7376)), v26 = *(_DWORD *)(a1 + 7368), isAllowedIdentifierYield))
  {
    if (v26 == 544)
    {
      if (a2 - 1 > 1)
        goto LABEL_3;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[64]>(a1);
      return 0;
    }
    if (v26 != 546
      && (v26 != 1048592
       || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128)))
    {
      goto LABEL_3;
    }
  }
  else if (v26 != 546
         && (v26 != 1048592
          || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128)))
  {
    v28 = *(_DWORD *)(a1 + 12);
    if (!v28)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE2B5CLL);
    }
    v29 = v28 - 1;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v29 + 9) & 1) != 0 && v26 == 532)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v39 = v30;
        v37 = (const char *)JSC::destructuringKindToVariableKindName(a2);
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[16]>(a1, (uint64_t)&Range, &v37);
      }
      return 0;
    }
    if ((v26 - 531) <= 1)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v39 = v31;
        v37 = (const char *)JSC::destructuringKindToVariableKindName(a2);
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*>(a1, (uint64_t)&Range, &v37);
      }
      return 0;
    }
    if ((v26 & 0x200) != 0)
    {
      if ((v26 - 544) >= 3)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
          v39 = v33;
          v37 = (const char *)JSC::destructuringKindToVariableKindName(a2);
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*>(a1, (uint64_t)&Range, &v37);
        }
        return 0;
      }
      if (v26 == 544)
      {
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v29 + 9) & 1) != 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v32 = (const char *)JSC::destructuringKindToVariableKindName(a2);
            v37 = "in strict mode";
            Range = v32;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[2],char const*>(a1, &Range, &v37);
          }
          return 0;
        }
      }
      else if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v29 + 9) & 1) != 0
             || (*(_BYTE *)(*(_QWORD *)a1 + 720 * v29 + 11) & 2) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          Range = (const char *)JSC::destructuringKindToVariableKindName(a2);
          v37 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierYieldReason(a1);
          v34 = "Cannot use 'yield' as a ";
          goto LABEL_37;
        }
        return 0;
      }
    }
    if (v26 == 20 || (v26 & 0x100000) != 0)
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a binding element");
    }
    return 0;
  }
  if (!*v9)
    goto LABEL_63;
  v35 = *(_DWORD *)(a1 + 12);
  if (!v35)
  {
LABEL_58:
    __break(0xC471u);
    JUMPOUT(0x197EE2B54);
  }
  if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v35 - 1) + 10) & 0x102000) != 0
    || *(_DWORD *)(a1 + 7480) == 1)
  {
LABEL_63:
    if (!*(_QWORD *)(a1 + 7360))
    {
      Range = (const char *)JSC::destructuringKindToVariableKindName(a2);
      v37 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
      v34 = "Cannot use 'await' as a ";
LABEL_37:
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[2],char const*>(a1, v34, &Range, &v37);
      return 0;
    }
    return 0;
  }
LABEL_3:
  v17 = JSC::Parser<JSC::Lexer<char16_t>>::createBindingPattern<JSC::SyntaxChecker>(a1, a2, *(WTF::AtomStringImpl **)(a1 + 7376), a3, a5, a6, a7, a8);
  v18 = *(_DWORD *)(a1 + 7400);
  v19 = *(_DWORD *)(a1 + 7412);
  v20 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v18;
  *(_DWORD *)(a1 + 7448) = v19;
  *(_DWORD *)(a1 + 7452) = v20;
  v21 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v21 + 4) = v18;
  v22 = *(_DWORD *)(a1 + 12);
  if (!v22)
    goto LABEL_58;
  v23 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v22 - 1) + 9) & 1;
  *(_BYTE *)(v21 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v21, a1 + 7368, 0, v23, v13, v14, v15, v16);
  return v17;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseClass<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int i;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  WTF::AtomStringImpl *v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  WTF::AtomStringImpl *NumericIdentifier;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  _BOOL4 v86;
  uint64_t v87;
  int v88;
  BOOL v89;
  unsigned int v90;
  BOOL v91;
  unsigned __int8 v92;
  char v93;
  _QWORD *MethodDefinition;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  _BOOL4 v101;
  int v102;
  uint64_t v103;
  int v104;
  char v105;
  char v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  int v111;
  char v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  int v153;
  int v154;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  int v167;
  JSC::Scope *v168;
  unsigned int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WTF::AtomStringImpl *v176;
  uint64_t v177;
  int v178;
  unint64_t *v179;
  WTF::AtomStringImpl *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  const char *v196;
  uint64_t v197;
  int v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  WTF::StringImpl *v207;
  char v208;
  int v209;
  int v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  JSC::Scope *v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t Property;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  WTF::AtomStringImpl *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  WTF::AtomStringImpl *v249;
  uint64_t v250;
  int v251;
  int v252;
  int v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  int v257;
  int v259;
  int v260;
  int v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  int v272;
  int v273;
  int v274;
  WTF::StringImpl *v275;
  unint64_t v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t *v292;
  const WTF::StringImpl *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  int v300;
  int v301;
  unsigned int v302;
  int v303;
  unsigned int v304;
  uint64_t v305;
  WTF::StringImpl *v306;
  unint64_t *v307;
  WTF::AtomStringImpl *v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  int v318;
  int v319;
  uint64_t v320;
  int v321;
  int v322;
  int v323;
  int v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  int v328;
  int v329;
  int v330;
  int v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  unsigned int v335;
  uint64_t v336;
  unint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unsigned int v350;
  int v351;
  unint64_t v352;
  void *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  WTF::StringImpl *v360;
  void *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  WTF::StringImpl *v369;
  const char *v370;
  const char *v371;
  unint64_t v372;
  void *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  void *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  int v390;
  int v391;
  int v392;
  uint64_t v393;
  const char *v394;
  const char *v395;
  const char *v396;
  const char *v397;
  unsigned int v398;
  uint64_t v399;
  unsigned int v400;
  unsigned int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  char v408;
  __int128 *v409;
  uint64_t v412;
  unsigned int v413;
  char *v414;
  __int128 v415;
  WTF *v416;
  int v417;
  const char *v418;
  WTF::StringImpl *v419[2];
  _QWORD v420[4];
  __int128 v421;
  uint64_t v422;
  int v423;
  uint64_t v424;
  int v425;
  __int128 v426;
  uint64_t v427;
  int v428;

  v5 = a1;
  v427 = *(_QWORD *)(a1 + 7416);
  v428 = *(_DWORD *)(a1 + 7424);
  v409 = (__int128 *)(a1 + 7400);
  v426 = *(_OWORD *)(a1 + 7400);
  v6 = DWORD2(v426);
  *(_DWORD *)(a4 + 16) = v426;
  *(_DWORD *)(a4 + 20) = *(_DWORD *)(a1 + 7408) - *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a4 + 8) = v6;
  v7 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  v13 = v8;
  if (*(_DWORD *)(v7 + 12) <= v8)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE4A24);
  }
  v14 = v7;
  v15 = v8;
  *(_DWORD *)(*(_QWORD *)v7 + 720 * v8 + 10) |= 0x8080u;
  if (*(_DWORD *)(v7 + 12) <= v8)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE4A2CLL);
  }
  *(_DWORD *)(*(_QWORD *)v7 + 720 * v8 + 10) &= ~0x40u;
  if (*(_DWORD *)(v7 + 12) <= v8)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE4A34);
  }
  *(_BYTE *)(*(_QWORD *)v7 + 720 * v8 + 9) |= 1u;
  v16 = *(_DWORD *)(v5 + 7400);
  v17 = *(_DWORD *)(v5 + 7412);
  v18 = *(_DWORD *)(v5 + 7404);
  *(_DWORD *)(v5 + 7444) = v16;
  *(_DWORD *)(v5 + 7448) = v17;
  *(_DWORD *)(v5 + 7452) = v18;
  v19 = *(_QWORD *)(v5 + 7288);
  *(_DWORD *)(v19 + 4) = v16;
  v20 = *(_DWORD *)(v5 + 12);
  if (!v20)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE4A3CLL);
  }
  v21 = (unsigned int *)(v5 + 7368);
  v22 = *(_BYTE *)(*(_QWORD *)v5 + 720 * (v20 - 1) + 9) & 1;
  *(_BYTE *)(v19 + 56) = 0;
  v23 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v19, v5 + 7368, 0, v22, v9, v10, v11, v12);
  *(_DWORD *)(v5 + 7368) = v23;
  v29 = *(_DWORD *)(v5 + 12);
  if (!v29)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE4A44);
  }
  v414 = (char *)(v5 + 7344);
  if ((*(_BYTE *)(*(_QWORD *)v5 + 720 * (v29 - 1) + 12) & 0x10) != 0)
  {
    if (v23 == 12)
      goto LABEL_8;
    if (v23 == 546)
    {
      if (!*(_QWORD *)(v5 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v5, 0, "Cannot use 'await' as a class name within static block");
      goto LABEL_293;
    }
  }
  else if (v23 == 12)
  {
    goto LABEL_8;
  }
  if (!JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierAwait(v5, v23, *(_QWORD **)(v5 + 7376)))
  {
    if (a3 != 1)
      goto LABEL_11;
    v302 = *v21;
    if (!*v21)
    {
      if (!*(_QWORD *)(v5 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v5, 0, "Class statements must have a name");
      goto LABEL_293;
    }
    v303 = *(_DWORD *)(v5 + 12);
    if (!v303)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE4ABCLL);
    }
    v304 = v303 - 1;
    v305 = *(_QWORD *)v5;
    if (v302 == 532 && (*(_BYTE *)(*(_QWORD *)v5 + 720 * v304 + 9) & 1) != 0)
    {
      if (!*(_QWORD *)(v5 + 7360))
      {
        v419[0] = (WTF::StringImpl *)JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(v5 + 7288) + 64), *(_DWORD *)(v5 + 7408), *(_DWORD *)(v5 + 7412));
        v419[1] = v306;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[11],char const(&)[16]>(v5, (uint64_t)v419);
      }
      goto LABEL_293;
    }
    if (v302 - 531 <= 1)
    {
      if (!*(_QWORD *)(v5 + 7360))
      {
        v419[0] = (WTF::StringImpl *)JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(v5 + 7288) + 64), *(_DWORD *)(v5 + 7408), *(_DWORD *)(v5 + 7412));
        v419[1] = v360;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[11]>(v5, (uint64_t)v419);
      }
      goto LABEL_293;
    }
    if ((v302 & 0x200) == 0)
    {
LABEL_292:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(v5);
      goto LABEL_293;
    }
    if (v302 - 544 >= 3)
    {
      if (!*(_QWORD *)(v5 + 7360))
      {
        v419[0] = (WTF::StringImpl *)JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(v5 + 7288) + 64), *(_DWORD *)(v5 + 7408), *(_DWORD *)(v5 + 7412));
        v419[1] = v369;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const(&)[11]>(v5, (uint64_t)v419);
      }
      goto LABEL_293;
    }
    if (v302 == 546)
    {
      if (*v414 && (*(_DWORD *)(v305 + 720 * v304 + 10) & 0x102000) == 0 && *(_DWORD *)(v5 + 7480) != 1)
        goto LABEL_292;
      if (*(_QWORD *)(v5 + 7360))
        goto LABEL_293;
      v419[0] = (WTF::StringImpl *)JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(v5);
      v370 = "Cannot use 'await' as a ";
    }
    else
    {
      if (v302 == 544)
      {
        if ((*(_BYTE *)(*(_QWORD *)v5 + 720 * v304 + 9) & 1) != 0)
        {
          if (!*(_QWORD *)(v5 + 7360))
          {
            v419[0] = (WTF::StringImpl *)"in strict mode";
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const(&)[11],char const(&)[2],char const*>(v5, (const char **)v419);
          }
          goto LABEL_293;
        }
        goto LABEL_292;
      }
      if ((*(_BYTE *)(*(_QWORD *)v5 + 720 * v304 + 9) & 1) == 0 && (*(_BYTE *)(v305 + 720 * v304 + 11) & 2) == 0)
        goto LABEL_292;
      if (*(_QWORD *)(v5 + 7360))
        goto LABEL_293;
      v419[0] = (WTF::StringImpl *)JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierYieldReason(v5);
      v370 = "Cannot use 'yield' as a ";
    }
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const(&)[11],char const(&)[2],char const*>(v5, v370, (const char **)v419);
    goto LABEL_293;
  }
  v29 = *(_DWORD *)(v5 + 12);
LABEL_8:
  *(_QWORD *)a4 = *(_QWORD *)(v5 + 7376);
  v30 = *(_DWORD *)(v5 + 7400);
  v31 = *(_DWORD *)(v5 + 7412);
  v32 = *(_DWORD *)(v5 + 7404);
  *(_DWORD *)(v5 + 7444) = v30;
  *(_DWORD *)(v5 + 7448) = v31;
  *(_DWORD *)(v5 + 7452) = v32;
  v33 = *(_QWORD *)(v5 + 7288);
  *(_DWORD *)(v33 + 4) = v30;
  if (!v29)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE4A4CLL);
  }
  v34 = *(_BYTE *)(*(_QWORD *)v5 + 720 * (v29 - 1) + 9) & 1;
  *(_BYTE *)(v33 + 56) = 0;
  *(_DWORD *)(v5 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v33, v5 + 7368, 0, v34, v25, v26, v27, v28);
  if (*(_DWORD *)(v14 + 12) <= v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE4A54);
  }
  if ((JSC::Scope::declareLexicalVariable(*(_QWORD *)v14 + 720 * v15, *(WTF::AtomStringImpl **)a4, 1, v35, v36, v37, v38, v39) & 1) != 0)
  {
    if (*v21 != 20 && (*v21 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(v5 + 7360))
      {
        v419[0] = **(WTF::StringImpl ***)a4;
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[28]>(v5, (uint64_t *)v419);
      }
      goto LABEL_293;
    }
    goto LABEL_292;
  }
LABEL_11:
  v424 = v427;
  v425 = v428;
  v40 = *v21;
  if (*v21 != 542)
  {
    v48 = 0;
    v46 = a2;
    goto LABEL_14;
  }
  v41 = *(_DWORD *)(v5 + 7400);
  v42 = *(_DWORD *)(v5 + 7412);
  v43 = *(_DWORD *)(v5 + 7404);
  *(_DWORD *)(v5 + 7444) = v41;
  *(_DWORD *)(v5 + 7448) = v42;
  *(_DWORD *)(v5 + 7452) = v43;
  v44 = *(_QWORD *)(v5 + 7288);
  *(_DWORD *)(v44 + 4) = v41;
  v45 = *(_DWORD *)(v5 + 12);
  v46 = a2;
  if (!v45)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE4A5CLL);
  }
  v47 = *(_BYTE *)(*(_QWORD *)v5 + 720 * (v45 - 1) + 9) & 1;
  *(_BYTE *)(v44 + 56) = 0;
  *(_DWORD *)(v5 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v44, v5 + 7368, 0, v47, v25, v26, v27, v28);
  v424 = *(_QWORD *)(v5 + 7416);
  v425 = *(_DWORD *)(v5 + 7424);
  v48 = JSC::Parser<JSC::Lexer<char16_t>>::parseMemberExpression<JSC::ASTBuilder>(v5, a2);
  v40 = *(_DWORD *)(v5 + 7368);
  if (!v48)
  {
    if (v40 != 20 && (v40 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(v5 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v5, 1, "Cannot parse the parent class name");
      goto LABEL_293;
    }
    goto LABEL_292;
  }
LABEL_14:
  if (v48)
    v49 = 2;
  else
    v49 = 1;
  v408 = v49;
  v422 = *(_QWORD *)(v5 + 7444);
  v423 = *(_DWORD *)(v5 + 7452);
  if (v40)
  {
    if (v40 != 20 && (v40 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(v5 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v5, 1, "Expected opening '{' at the start of a class body");
      goto LABEL_293;
    }
    goto LABEL_292;
  }
  v402 = v48;
  v50 = *(_DWORD *)(v5 + 7400);
  v51 = *(_DWORD *)(v5 + 7412);
  v52 = *(_DWORD *)(v5 + 7404);
  *(_DWORD *)(v5 + 7444) = v50;
  *(_DWORD *)(v5 + 7448) = v51;
  *(_DWORD *)(v5 + 7452) = v52;
  v53 = *(_QWORD *)(v5 + 7288);
  *(_DWORD *)(v53 + 4) = v50;
  v54 = *(_DWORD *)(v5 + 12);
  if (!v54)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE4A64);
  }
  v55 = *(_BYTE *)(*(_QWORD *)v5 + 720 * (v54 - 1) + 9) & 1;
  *(_BYTE *)(v53 + 56) = 0;
  *(_DWORD *)(v5 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v53, v5 + 7368, 0, v55, v25, v26, v27, v28);
  v56 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(v5);
  if (*(_DWORD *)(v56 + 12) <= v57)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE4A6CLL);
  }
  v406 = v56;
  *(_DWORD *)(*(_QWORD *)v56 + 720 * v57 + 10) |= 0x8080u;
  if (*(_DWORD *)(v56 + 12) <= v57)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE4A74);
  }
  *(_DWORD *)(*(_QWORD *)v56 + 720 * v57 + 10) &= ~0x40u;
  v401 = v57;
  if (*(_DWORD *)(v56 + 12) <= v57)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE4A7CLL);
  }
  v399 = 0;
  v400 = v57;
  v64 = 0;
  v404 = 0;
  v405 = 0;
  v407 = 0;
  v403 = 0;
  v65 = *(_QWORD *)v56 + 720 * v57;
  *(_BYTE *)(v65 + 9) |= 1u;
  *(_DWORD *)(v65 + 10) |= 0x8000000u;
LABEL_23:
  v412 = v64;
  while (1)
  {
    for (i = *v21; ; *(_DWORD *)(v5 + 7368) = i)
    {
      if (i == 1)
      {
        v118 = *(_DWORD *)(v5 + 7412);
        *(_DWORD *)(a4 + 12) = v118 - 1;
        v119 = *(_DWORD *)(v5 + 7400);
        v120 = *(_DWORD *)(v5 + 7404);
        *(_DWORD *)(v5 + 7444) = v119;
        *(_DWORD *)(v5 + 7448) = v118;
        *(_DWORD *)(v5 + 7452) = v120;
        v121 = *(_QWORD *)(v5 + 7288);
        *(_DWORD *)(v121 + 4) = v119;
        v122 = *(_DWORD *)(v5 + 12);
        if (!v122)
        {
          __break(0xC471u);
          JUMPOUT(0x197EE4A84);
        }
        v123 = *(_BYTE *)(*(_QWORD *)v5 + 720 * (v122 - 1) + 9) & 1;
        *(_BYTE *)(v121 + 56) = 0;
        *(_DWORD *)(v5 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v121, v5 + 7368, 0, v123, v60, v61, v62, v63);
        v130 = v403;
        v129 = BYTE4(v403);
        if (((v404 | v403 | HIDWORD(v404) | HIDWORD(v403)) & 1) != 0)
        {
          JSC::Symbols::privateBrandPrivateName[0] += 2;
          *(_QWORD *)&v421 = JSC::Symbols::privateBrandPrivateName;
          if (*(_DWORD *)(v406 + 12) <= v401)
          {
            __break(0xC471u);
            JUMPOUT(0x197EE4A8CLL);
          }
          JSC::Scope::declareLexicalVariable(*(_QWORD *)v406 + 720 * v400, (WTF::AtomStringImpl *)&v421, 1, v124, v125, v126, v127, v128);
          if (*(_DWORD *)(v406 + 12) <= v401)
          {
            __break(0xC471u);
            JUMPOUT(0x197EE4A94);
          }
          JSC::Scope::useVariable(*(_QWORD *)v406 + 720 * v400, (uint64_t)JSC::Symbols::privateBrandPrivateName, 0);
          if (*(_DWORD *)(v406 + 12) <= v401)
          {
            __break(0xC471u);
            JUMPOUT(0x197EE4A9CLL);
          }
          v235 = *(_QWORD *)v406;
          *(_QWORD *)&v415 = JSC::Symbols::privateBrandPrivateName;
          WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v235 + 720 * v400 + 696), (uint64_t *)&v415, v230, v231, v232, v233, v234, (uint64_t)v419);
          if (JSC::Symbols::privateBrandPrivateName[0] == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::privateBrandPrivateName, v236, v237, v238, v239, v240, v241, v242);
            WTF::fastFree(v276, v277, v278, v279, v280, v281, v282, v283);
          }
          else
          {
            JSC::Symbols::privateBrandPrivateName[0] -= 2;
          }
          JSC::Symbols::privateClassBrandPrivateName[0] += 2;
          *(_QWORD *)&v421 = JSC::Symbols::privateClassBrandPrivateName;
          if (*(_DWORD *)(v406 + 12) <= v401)
          {
            __break(0xC471u);
            JUMPOUT(0x197EE4AA4);
          }
          JSC::Scope::declareLexicalVariable(*(_QWORD *)v406 + 720 * v400, (WTF::AtomStringImpl *)&v421, 1, v238, v239, v240, v241, v242);
          if (*(_DWORD *)(v406 + 12) <= v401)
          {
            __break(0xC471u);
            JUMPOUT(0x197EE4AACLL);
          }
          JSC::Scope::useVariable(*(_QWORD *)v406 + 720 * v400, (uint64_t)JSC::Symbols::privateClassBrandPrivateName, 0);
          if (*(_DWORD *)(v406 + 12) <= v401)
          {
            __break(0xC471u);
            JUMPOUT(0x197EE4AB4);
          }
          v248 = *(_QWORD *)v406;
          *(_QWORD *)&v415 = JSC::Symbols::privateClassBrandPrivateName;
          WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v248 + 720 * v400 + 696), (uint64_t *)&v415, v243, v244, v245, v246, v247, (uint64_t)v419);
          v130 = v403;
          v129 = BYTE4(v403);
          if (JSC::Symbols::privateClassBrandPrivateName[0] == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::privateClassBrandPrivateName, v249, v250, v124, v125, v126, v127, v128);
            WTF::fastFree(v284, v285, v286, v287, v288, v289, v290, v291);
          }
          else
          {
            JSC::Symbols::privateClassBrandPrivateName[0] -= 2;
          }
        }
        if (v405)
          *(_BYTE *)(v405 + 48) = (v130 | v129) & 1;
        JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v419, (uint64_t *)v5, 1, v124, v125, v126, v127, v128);
        JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v415, (uint64_t *)v5, 1, v131, v132, v133, v134, v135);
        v5 = JSC::ASTBuilder::createClassExpr(*(JSC::ParserArena **)(v46 + 8), **(_DWORD ***)(v46 + 16), (uint64_t)&v426, (uint64_t *)a4, (uint64_t *)&v415, (uint64_t *)v419, v407, v402, v405, &v427, &v424, &v422);
        v143 = v416;
        if (v416)
        {
          v416 = 0;
          v417 = 0;
          WTF::fastFree((unint64_t)v143, v136, v137, v138, v139, v140, v141, v142);
        }
        JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v415, (WTF::AtomStringImpl *)v136, v137, v138, v139, v140, v141, v142);
        v151 = v420[1];
        if (v420[1])
        {
          v420[1] = 0;
          LODWORD(v420[2]) = 0;
          WTF::fastFree(v151, v144, v145, v146, v147, v148, v149, v150);
        }
        JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v419, (WTF::AtomStringImpl *)v144, v145, v146, v147, v148, v149, v150);
        return v5;
      }
      if (i != 17)
        break;
      v329 = *(_DWORD *)(v5 + 7400);
      v330 = *(_DWORD *)(v5 + 7412);
      v331 = *(_DWORD *)(v5 + 7404);
      *(_DWORD *)(v5 + 7444) = v329;
      *(_DWORD *)(v5 + 7448) = v330;
      *(_DWORD *)(v5 + 7452) = v331;
      v332 = *(_QWORD *)(v5 + 7288);
      *(_DWORD *)(v332 + 4) = v329;
      v333 = *(_DWORD *)(v5 + 12);
      if (!v333)
      {
        __break(0xC471u);
        JUMPOUT(0x197EE496CLL);
      }
      v334 = *(_BYTE *)(*(_QWORD *)v5 + 720 * (v333 - 1) + 9) & 1;
      *(_BYTE *)(v332 + 56) = 0;
      i = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v332, v5 + 7368, 0, v334, v60, v61, v62, v63);
    }
    v415 = *v409;
    v413 = *(_DWORD *)(v5 + 7408);
    v67 = *(_QWORD *)(v5 + 7216);
    if (i == 532)
    {
      v70 = *(WTF::AtomStringImpl **)(v67 + 41952);
      if (**(_QWORD **)(v5 + 7376) != *((_QWORD *)v70 + 49))
      {
        v69 = 5;
        i = 532;
        v68 = 1;
        goto LABEL_32;
      }
      v421 = *(_OWORD *)(v5 + 7296);
      v104 = *(_DWORD *)(v5 + 7316);
      v420[0] = *(_QWORD *)(v5 + 7336);
      *(_OWORD *)v419 = *(_OWORD *)(v5 + 7320);
      v105 = *v414;
      v106 = *(_BYTE *)(v5 + 7345);
      v107 = *(_DWORD *)(a2 + 1052);
      v108 = *(unsigned int *)(v5 + 7404);
      v109 = *(_QWORD *)(v5 + 7288);
      v110 = *(_DWORD *)v109;
      v111 = *(_DWORD *)(v109 + 4);
      v112 = *(_BYTE *)(v109 + 56);
      v113 = *(_DWORD *)(v5 + 7400);
      v114 = *(_DWORD *)(v5 + 7412);
      *(_DWORD *)(v5 + 7444) = v113;
      *(_DWORD *)(v5 + 7448) = v114;
      *(_DWORD *)(v5 + 7452) = v108;
      *(_DWORD *)(v109 + 4) = v113;
      v115 = *(_DWORD *)(v5 + 12);
      if (!v115)
      {
        __break(0xC471u);
        JUMPOUT(0x197EE4964);
      }
      v116 = *(_BYTE *)(*(_QWORD *)v5 + 720 * (v115 - 1) + 9) & 1;
      *(_BYTE *)(v109 + 56) = 0;
      v117 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v109, v5 + 7368, 0, v116, v60, v61, v62, v63);
      *(_DWORD *)(v5 + 7368) = v117;
      if (v117 <= 0x15 && ((1 << v117) & 0x220004) != 0)
      {
        JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(v5 + 7288), (WTF::AtomStringImpl *)v413, v108, v59, v60, v61, v62, v63);
        v270 = *(_QWORD *)(v5 + 7288);
        *(_DWORD *)v270 = v110;
        *(_BYTE *)(v270 + 56) = v112;
        v271 = *(_DWORD *)(v5 + 7400);
        v272 = *(_DWORD *)(v5 + 7412);
        v273 = *(_DWORD *)(v5 + 7404);
        *(_DWORD *)(v5 + 7444) = v271;
        *(_DWORD *)(v5 + 7448) = v272;
        *(_DWORD *)(v5 + 7452) = v273;
        *(_DWORD *)(v270 + 4) = v271;
        v274 = *(_DWORD *)(v5 + 12);
        if (!v274)
        {
          __break(0xC471u);
          JUMPOUT(0x197EE497CLL);
        }
        *(_DWORD *)(v5 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v270, v5 + 7368, 0, *(_BYTE *)(*(_QWORD *)v5 + 720 * (v274 - 1) + 9) & 1, v266, v267, v268, v269);
        *(_DWORD *)(*(_QWORD *)(v5 + 7288) + 4) = v111;
        *(_OWORD *)(v5 + 7296) = v421;
        *(_DWORD *)(v5 + 7312) = v107;
        *(_DWORD *)(v5 + 7316) = v104;
        *(_OWORD *)(v5 + 7320) = *(_OWORD *)v419;
        *(_QWORD *)(v5 + 7336) = v420[0];
        *v414 = v105;
        *(_BYTE *)(v5 + 7345) = v106;
        *(_DWORD *)(a2 + 1052) = v107;
        v275 = *(WTF::StringImpl **)(v5 + 7360);
        *(_QWORD *)(v5 + 7360) = 0;
        if (v275)
        {
          if (*(_DWORD *)v275 == 2)
          {
            WTF::StringImpl::~StringImpl(v275, v57, v58, v59, v60, v61, v62, v63);
            WTF::fastFree(v352, v353, v354, v355, v356, v357, v358, v359);
          }
          else
          {
            *(_DWORD *)v275 -= 2;
          }
          v68 = 1;
          v69 = 5;
        }
        else
        {
          v68 = 1;
          v69 = 5;
        }
      }
      else
      {
        v413 = *(_DWORD *)(v5 + 7408);
        v69 = v117 ? 5 : 20;
        v68 = 2;
      }
      v67 = *(_QWORD *)(v5 + 7216);
      i = *(_DWORD *)(v5 + 7368);
    }
    else
    {
      v68 = 1;
      v69 = 5;
    }
    v70 = *(WTF::AtomStringImpl **)(v67 + 41952);
    if (i == 191488)
    {
      v71 = *(_DWORD *)(v5 + 7400);
      v72 = *(_DWORD *)(v5 + 7412);
      v73 = *(_DWORD *)(v5 + 7404);
      *(_DWORD *)(v5 + 7444) = v71;
      *(_DWORD *)(v5 + 7448) = v72;
      *(_DWORD *)(v5 + 7452) = v73;
      v74 = *(_QWORD *)(v5 + 7288);
      *(_DWORD *)(v74 + 4) = v71;
      v75 = *(_DWORD *)(v5 + 12);
      if (!v75)
      {
        __break(0xC471u);
        JUMPOUT(0x197EE4954);
      }
      v76 = *(_BYTE *)(*(_QWORD *)v5 + 720 * (v75 - 1) + 9) & 1;
      *(_BYTE *)(v74 + 56) = 0;
      i = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v74, v5 + 7368, 0, v76, v60, v61, v62, v63);
      *(_DWORD *)(v5 + 7368) = i;
      v69 = 18;
    }
    while (1)
    {
LABEL_32:
      if (i != 12)
      {
        switch(i)
        {
          case 0u:
            if (v69 != 20)
            {
              if (!*(_QWORD *)(v5 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v5, 1, "Cannot parse static block without 'static'");
              goto LABEL_135;
            }
            v87 = 0;
            v86 = 0;
            v101 = 0;
            v88 = 1025;
            v69 = 20;
            goto LABEL_129;
          case 1u:
          case 2u:
          case 3u:
          case 5u:
          case 6u:
          case 7u:
          case 8u:
          case 0xCu:
            goto LABEL_172;
          case 4u:
            v312 = *(_DWORD *)(v5 + 7400);
            v313 = *(_DWORD *)(v5 + 7412);
            v314 = *(_DWORD *)(v5 + 7404);
            *(_DWORD *)(v5 + 7444) = v312;
            *(_DWORD *)(v5 + 7448) = v313;
            *(_DWORD *)(v5 + 7452) = v314;
            v315 = *(_QWORD *)(v5 + 7288);
            *(_DWORD *)(v315 + 4) = v312;
            v316 = *(_DWORD *)(v5 + 12);
            if (!v316)
            {
              __break(0xC471u);
              JUMPOUT(0x197EE499CLL);
            }
            v317 = *(_BYTE *)(*(_QWORD *)v5 + 720 * (v316 - 1) + 9) & 1;
            *(_BYTE *)(v315 + 56) = 0;
            v318 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v315, v5 + 7368, 0, v317, v60, v61, v62, v63);
            *(_DWORD *)(v5 + 7368) = v318;
            v319 = *(_DWORD *)(v5 + 12);
            if (!v319)
            {
              __break(0xC471u);
              JUMPOUT(0x197EE49A4);
            }
            if ((*(_BYTE *)(*(_QWORD *)v5 + 720 * (v319 - 1) + 12) & 0x10) == 0
              || v318 != 12
              || **(_QWORD **)(v5 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 7216) + 41952) + 880))
            {
              v320 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(v5);
              v321 = *(_DWORD *)(v5 + 7368);
              if (v320)
              {
                if (v321 == 5)
                {
                  v87 = v320;
                  v322 = *(_DWORD *)(v5 + 7400);
                  v323 = *(_DWORD *)(v5 + 7412);
                  v324 = *(_DWORD *)(v5 + 7404);
                  *(_DWORD *)(v5 + 7444) = v322;
                  *(_DWORD *)(v5 + 7448) = v323;
                  *(_DWORD *)(v5 + 7452) = v324;
                  v325 = *(_QWORD *)(v5 + 7288);
                  *(_DWORD *)(v325 + 4) = v322;
                  v326 = *(_DWORD *)(v5 + 12);
                  if (!v326)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EE4994);
                  }
                  v327 = *(_BYTE *)(*(_QWORD *)v5 + 720 * (v326 - 1) + 9) & 1;
                  *(_BYTE *)(v325 + 56) = 0;
                  v328 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v325, v5 + 7368, 0, v327, v60, v61, v62, v63);
                  v86 = 0;
                  v101 = 0;
                  *(_DWORD *)(v5 + 7368) = v328;
                  v88 = 9;
LABEL_129:
                  NumericIdentifier = v70;
                  goto LABEL_45;
                }
                if (v321 != 20 && (v321 & 0x100000) == 0)
                {
                  if (!*(_QWORD *)(v5 + 7360))
                    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[23]>(v5);
                  goto LABEL_135;
                }
                goto LABEL_316;
              }
              if (v321 == 20 || (v321 & 0x100000) != 0)
                goto LABEL_316;
              if (*(_QWORD *)(v5 + 7360))
                goto LABEL_135;
              v196 = "Cannot parse computed property name";
              v197 = v5;
              v198 = 1;
              goto LABEL_134;
            }
            if (*(_QWORD *)(v5 + 7360))
              goto LABEL_135;
            v371 = "Cannot use 'arguments' as an identifier in static block";
            break;
          case 9u:
          case 0xAu:
            v292 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(v5 + 7232));
            NumericIdentifier = (WTF::AtomStringImpl *)JSC::IdentifierArena::makeNumericIdentifier((JSC::IdentifierArena *)v292, *(uint64_t ***)(v5 + 7216), *(double *)(v5 + 7376), v293, v294, v295, v296, v297, v298);
            v299 = *(_DWORD *)(v5 + 7400);
            v300 = *(_DWORD *)(v5 + 7412);
            v301 = *(_DWORD *)(v5 + 7404);
            *(_DWORD *)(v5 + 7444) = v299;
            *(_DWORD *)(v5 + 7448) = v300;
            *(_DWORD *)(v5 + 7452) = v301;
            v254 = *(_QWORD *)(v5 + 7288);
            *(_DWORD *)(v254 + 4) = v299;
            v255 = *(_DWORD *)(v5 + 12);
            if (!v255)
            {
              __break(0xC471u);
              JUMPOUT(0x197EE3EC0);
            }
            goto LABEL_174;
          case 0xBu:
            v307 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(v5 + 7232));
            JSC::IdentifierArena::makeBigIntDecimalIdentifier((JSC::IdentifierArena *)v307, *(JSC::VM **)(v5 + 7216), *(const JSC::Identifier **)(v5 + 7376), *(unsigned __int8 *)(v5 + 7384));
            if (v308)
            {
              NumericIdentifier = v308;
              v309 = *(_DWORD *)(v5 + 7400);
              v310 = *(_DWORD *)(v5 + 7412);
              v311 = *(_DWORD *)(v5 + 7404);
              *(_DWORD *)(v5 + 7444) = v309;
              *(_DWORD *)(v5 + 7448) = v310;
              *(_DWORD *)(v5 + 7452) = v311;
              v254 = *(_QWORD *)(v5 + 7288);
              *(_DWORD *)(v254 + 4) = v309;
              v255 = *(_DWORD *)(v5 + 12);
              if (!v255)
              {
                __break(0xC471u);
                JUMPOUT(0x197EE4014);
              }
LABEL_174:
              v256 = *(_BYTE *)(*(_QWORD *)v5 + 720 * (v255 - 1) + 9) & 1;
              *(_BYTE *)(v254 + 56) = 0;
              v257 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v254, v5 + 7368, 0, v256, v60, v61, v62, v63);
              v87 = 0;
              v86 = 0;
              v101 = 0;
              *(_DWORD *)(v5 + 7368) = v257;
              goto LABEL_175;
            }
            if (*v21 == 20 || (*v21 & 0x100000) != 0)
              goto LABEL_316;
            if (*(_QWORD *)(v5 + 7360))
              goto LABEL_135;
            v196 = "Cannot parse big int property name";
            v197 = v5;
            v198 = 1;
            goto LABEL_134;
          case 0xDu:
            NumericIdentifier = *(WTF::AtomStringImpl **)(v5 + 7376);
            v153 = *(_DWORD *)(v5 + 7400);
            v154 = *(_DWORD *)(v5 + 7412);
            v155 = *(_DWORD *)(v5 + 7404);
            *(_DWORD *)(v5 + 7444) = v153;
            *(_DWORD *)(v5 + 7448) = v154;
            *(_DWORD *)(v5 + 7452) = v155;
            v156 = *(_QWORD *)(v5 + 7288);
            *(_DWORD *)(v156 + 4) = v153;
            v157 = *(_DWORD *)(v5 + 12);
            if (!v157)
            {
              __break(0xC471u);
              JUMPOUT(0x197EE498CLL);
            }
            v158 = *(_BYTE *)(*(_QWORD *)v5 + 720 * (v157 - 1) + 9) & 1;
            *(_BYTE *)(v156 + 56) = 0;
            v159 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v156, v5 + 7368, 0, v158, v60, v61, v62, v63);
            *(_DWORD *)(v5 + 7368) = v159;
            v166 = *(_DWORD *)(v406 + 12);
            if (v159 != 2)
            {
              if (v166 <= v401)
              {
                __break(0xC471u);
                JUMPOUT(0x197EE4974);
              }
              if (JSC::Scope::declarePrivateField(*(_QWORD *)v406 + 720 * v400, *(WTF::StringImpl **)NumericIdentifier, v160, v161, v162, v163, v164, v165) < 2)
              {
                v87 = 0;
                v86 = 0;
                v101 = 0;
                v88 = 65;
                goto LABEL_45;
              }
              if (!*(_QWORD *)(v5 + 7360))
              {
                v196 = "Cannot declare private field twice";
                v197 = v5;
                v198 = 0;
                goto LABEL_134;
              }
              goto LABEL_135;
            }
            if (v166 <= v401)
            {
              __break(0xC471u);
              JUMPOUT(0x197EE4984);
            }
            if (JSC::Scope::declarePrivateMethod(*(_QWORD *)v406 + 720 * v400, *(WTF::StringImpl **)NumericIdentifier, v68) < 2)
            {
              if (*(_QWORD *)NumericIdentifier != *((_QWORD *)v70 + 350))
              {
                v87 = 0;
                v86 = 0;
                v101 = 0;
                LODWORD(v404) = ((_DWORD)v68 != 2) | v404;
                HIDWORD(v404) |= (_DWORD)v68 == 2;
                v88 = 129;
                goto LABEL_45;
              }
              if (!*(_QWORD *)(v5 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v5, 0, "Cannot declare a private method named '#constructor'");
              goto LABEL_135;
            }
            if (*(_QWORD *)(v5 + 7360))
              goto LABEL_135;
            v196 = "Cannot declare private method twice";
            v197 = v5;
            v198 = 0;
            goto LABEL_134;
          case 0xEu:
            goto LABEL_173;
          default:
            if (i == 1048592)
              goto LABEL_33;
            if (i == 546)
            {
              NumericIdentifier = *(WTF::AtomStringImpl **)(v5 + 7376);
LABEL_34:
              v78 = *(unsigned __int8 *)(v5 + 7384);
              v79 = *(_DWORD *)(v5 + 7400);
              v80 = *(_DWORD *)(v5 + 7412);
              v81 = *(_DWORD *)(v5 + 7404);
              *(_DWORD *)(v5 + 7444) = v79;
              *(_DWORD *)(v5 + 7448) = v80;
              *(_DWORD *)(v5 + 7452) = v81;
              v82 = *(_QWORD *)(v5 + 7288);
              *(_DWORD *)(v82 + 4) = v79;
              v83 = *(_DWORD *)(v5 + 12);
              if (!v83)
              {
                __break(0xC471u);
                JUMPOUT(0x197EE495CLL);
              }
              v84 = *(_BYTE *)(*(_QWORD *)v5 + 720 * (v83 - 1) + 9) & 1;
              *(_BYTE *)(v82 + 56) = 0;
              v85 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v82, v5 + 7368, 0, v84, v60, v61, v62, v63);
              v86 = 0;
              v87 = 0;
              *(_DWORD *)(v5 + 7368) = v85;
              v88 = 1;
              if (v69 != 5 || v78)
              {
                v101 = 0;
              }
              else
              {
                if ((v85 & 0x200) != 0 || ((v85 - 9) >= 6 ? (v89 = v85 == 4) : (v89 = 1), v89))
                {
                  v87 = 0;
                  v86 = *(_QWORD *)NumericIdentifier == *((_QWORD *)v70 + 172);
                  v101 = *(_QWORD *)NumericIdentifier == *((_QWORD *)v70 + 287);
                }
                else
                {
                  v87 = 0;
                  v86 = 0;
                  v101 = 0;
                }
                v69 = 5;
              }
              goto LABEL_45;
            }
LABEL_172:
            if ((i & 0x200) == 0)
              goto LABEL_316;
LABEL_173:
            NumericIdentifier = *(WTF::AtomStringImpl **)(v5 + 7376);
            v251 = *(_DWORD *)(v5 + 7400);
            v252 = *(_DWORD *)(v5 + 7412);
            v253 = *(_DWORD *)(v5 + 7404);
            *(_DWORD *)(v5 + 7444) = v251;
            *(_DWORD *)(v5 + 7448) = v252;
            *(_DWORD *)(v5 + 7452) = v253;
            v254 = *(_QWORD *)(v5 + 7288);
            *(_DWORD *)(v254 + 4) = v251;
            v255 = *(_DWORD *)(v5 + 12);
            if (!v255)
            {
              __break(0xC471u);
              JUMPOUT(0x197EE49ACLL);
            }
            goto LABEL_174;
        }
LABEL_335:
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v5, 0, v371);
        goto LABEL_135;
      }
LABEL_33:
      NumericIdentifier = *(WTF::AtomStringImpl **)(v5 + 7376);
      if (*(_QWORD *)NumericIdentifier != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 7216) + 41952) + 896))
        goto LABEL_34;
      if (*(_BYTE *)(v5 + 7384) || ((1 << v69) & 0x40400) != 0)
        goto LABEL_34;
      v259 = *(_DWORD *)(v5 + 7400);
      v260 = *(_DWORD *)(v5 + 7412);
      v261 = *(_DWORD *)(v5 + 7404);
      *(_DWORD *)(v5 + 7444) = v259;
      *(_DWORD *)(v5 + 7448) = v260;
      *(_DWORD *)(v5 + 7452) = v261;
      v262 = *(_QWORD *)(v5 + 7288);
      *(_DWORD *)(v262 + 4) = v259;
      v263 = *(_DWORD *)(v5 + 12);
      if (!v263)
      {
        __break(0xC471u);
        JUMPOUT(0x197EE49B4);
      }
      v264 = *(_BYTE *)(*(_QWORD *)v5 + 720 * (v263 - 1) + 9) & 1;
      *(_BYTE *)(v262 + 56) = 0;
      i = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v262, v5 + 7368, 0, v264, v60, v61, v62, v63);
      *(_DWORD *)(v5 + 7368) = i;
      if (i <= 0x15 && ((1 << i) & 0x260004) != 0)
        break;
      v388 = *(_QWORD *)(v5 + 7288);
      if (*(_BYTE *)(v388 + 56))
        break;
      v69 = 10;
      if (i == 191488)
      {
        v389 = *(_DWORD *)(v5 + 7400);
        v390 = *(_DWORD *)(v5 + 7412);
        v391 = *(_DWORD *)(v5 + 7404);
        *(_DWORD *)(v5 + 7444) = v389;
        *(_DWORD *)(v5 + 7448) = v390;
        *(_DWORD *)(v5 + 7452) = v391;
        *(_DWORD *)(v388 + 4) = v389;
        v392 = *(_DWORD *)(v5 + 12);
        if (!v392)
        {
          __break(0xC471u);
          JUMPOUT(0x197EE49BCLL);
        }
        v393 = *(_BYTE *)(*(_QWORD *)v5 + 720 * (v392 - 1) + 9) & 1;
        *(_BYTE *)(v388 + 56) = 0;
        i = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v388, v5 + 7368, 0, v393, v60, v61, v62, v63);
        *(_DWORD *)(v5 + 7368) = i;
        v69 = 17;
      }
    }
    v87 = 0;
    v86 = 0;
    v101 = 0;
    NumericIdentifier = (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(v5 + 7216) + 41952) + 896);
LABEL_175:
    v88 = 1;
LABEL_45:
    v90 = *v21;
    if (v86 || v101)
    {
      if (v90 == 13)
      {
        v335 = *(_DWORD *)(v406 + 12);
        v46 = a2;
        if (v101)
        {
          if (v335 <= v401)
          {
            __break(0xC471u);
            JUMPOUT(0x197EE4A14);
          }
          v336 = 0;
        }
        else
        {
          if (v335 <= v401)
          {
            __break(0xC471u);
            JUMPOUT(0x197EE4A1CLL);
          }
          v336 = 1;
        }
        v350 = JSC::Scope::declarePrivateAccessor(*(_QWORD *)v406 + 720 * v400, **(WTF::StringImpl ***)(v5 + 7376), v68, v336, v60, v61, v62, v63);
        if ((v350 & 2) != 0)
        {
          if (!*(_QWORD *)(v5 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v5, 0, "Declared private setter with an already used name");
          goto LABEL_135;
        }
        if ((_DWORD)v68 == 2)
        {
          if (v350 >= 4)
          {
            if (!*(_QWORD *)(v5 + 7360))
            {
              if (v101)
                v394 = "setter";
              else
                v394 = "getter";
              if (v101)
                v395 = "getter";
              else
                v395 = "setter";
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],char const(&)[7],char const(&)[35],char const(&)[7],char const(&)[16]>(v5, v394, v395);
            }
            goto LABEL_135;
          }
          HIDWORD(v403) = 1;
        }
        else
        {
          if (v350 >= 4)
          {
            if (!*(_QWORD *)(v5 + 7360))
            {
              if (v101)
                v396 = "setter";
              else
                v396 = "getter";
              if (v101)
                v397 = "getter";
              else
                v397 = "setter";
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[37],char const(&)[7],char const(&)[31],char const(&)[7],char const(&)[16]>(v5, v396, v397);
            }
            goto LABEL_135;
          }
          LODWORD(v403) = 1;
        }
        if (v101)
          v351 = 256;
        else
          v351 = 512;
        v103 = v351 | v88;
      }
      else
      {
        if (v86)
          v102 = 2;
        else
          v102 = 4;
        v103 = v102 | v88 & 0x4C8u;
        v46 = a2;
      }
      v96 = JSC::Parser<JSC::Lexer<char16_t>>::parseGetterSetter<JSC::ASTBuilder>(v5, (uint64_t **)v46, v103, v413, v68, v61, v62, v63);
      v97 = v412;
      if (v96)
        goto LABEL_63;
      if (*v21 != 20 && (*v21 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(v5 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(v5, "Cannot parse this method");
        goto LABEL_135;
      }
LABEL_316:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(v5);
      goto LABEL_135;
    }
    if (v90 == 2)
      break;
    if (v69 == 5)
    {
      if (!NumericIdentifier)
        goto LABEL_145;
      v207 = *(WTF::StringImpl **)NumericIdentifier;
      if (*(_QWORD *)NumericIdentifier == *((_QWORD *)v70 + 135))
      {
        if (!*(_QWORD *)(v5 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v5, 0, "Cannot declare class field named 'constructor'");
        goto LABEL_135;
      }
      if (v207 != *((WTF::StringImpl **)v70 + 350))
      {
        if ((_DWORD)v68 != 2)
        {
LABEL_145:
          if (!v87)
          {
LABEL_146:
            v208 = 1;
LABEL_147:
            if (v90 == 21)
            {
              v209 = *(_DWORD *)(v5 + 7400);
              v210 = *(_DWORD *)(v5 + 7412);
              v211 = *(_DWORD *)(v5 + 7404);
              *(_DWORD *)(v5 + 7444) = v209;
              *(_DWORD *)(v5 + 7448) = v210;
              *(_DWORD *)(v5 + 7452) = v211;
              v212 = *(_QWORD *)(v5 + 7288);
              *(_DWORD *)(v212 + 4) = v209;
              v213 = *(_DWORD *)(v5 + 12);
              if (!v213)
              {
                __break(0xC471u);
                JUMPOUT(0x197EE4A04);
              }
              v214 = *(_BYTE *)(*(_QWORD *)v5 + 720 * (v213 - 1) + 9) & 1;
              *(_BYTE *)(v212 + 56) = 0;
              *(_DWORD *)(v5 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v212, v5 + 7368, 0, v214, v60, v61, v62, v63);
              v222 = *(_DWORD *)(v5 + 12);
              if (!v222)
              {
                __break(0xC471u);
                JUMPOUT(0x197EE4A0CLL);
              }
              v223 = (JSC::Scope *)(*(_QWORD *)v5 + 720 * (v222 - 1));
              v398 = *((_DWORD *)v223 + 45);
              JSC::Scope::pushUsedVariableSet(v223, v215, v216, v217, v218, v219, v220, v221);
              v224 = *(_BYTE *)(v5 + 7345);
              *(_BYTE *)(v5 + 7345) = 1;
              if (*(_DWORD *)(v406 + 12) <= v401)
              {
                __break(0xC471u);
                JUMPOUT(0x197EE49DCLL);
              }
              *(_DWORD *)(*(_QWORD *)v406 + 720 * v400 + 20) = 0;
              v225 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(v5);
              if (*(_DWORD *)(v406 + 12) <= v401)
              {
                __break(0xC471u);
                JUMPOUT(0x197EE49E4);
              }
              v227 = (_QWORD *)v225;
              v228 = *(_QWORD *)v406;
              *(_DWORD *)(*(_QWORD *)v406 + 720 * v400 + 20) = 1;
              if (!v225)
              {
                if (*v21 == 20 || (*v21 & 0x100000) != 0)
                {
                  JSC::Parser<JSC::Lexer<char16_t>>::logError(v5);
                }
                else if (!*(_QWORD *)(v5 + 7360))
                {
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v5, 1, "Cannot parse initializer for class field");
                }
                *(_BYTE *)(v5 + 7345) = v224;
                goto LABEL_135;
              }
              JSC::Scope::markLastUsedVariablesSetAsCaptured((uint64_t *)(v228 + 720 * v400), v398, v226, v59, v60, v61, v62, v63);
              *(_BYTE *)(v5 + 7345) = v224;
            }
            else
            {
              v227 = 0;
            }
            if (JSC::Parser<JSC::Lexer<char16_t>>::autoSemiColon(v5, (uint64_t)v57, v58, v59, v60, v61, v62, v63))
            {
              v46 = a2;
              if ((v208 & 1) != 0)
                Property = JSC::ASTBuilder::createProperty(a2, (_DWORD **)NumericIdentifier, v227, v88, 1, v227 == 0, v68);
              else
                Property = JSC::ASTBuilder::createProperty(*(_QWORD *)(a2 + 8), (uint64_t)NumericIdentifier, v87, (uint64_t)v227, v88, v68);
              v96 = Property;
              goto LABEL_62;
            }
            if (*v21 != 20 && (*v21 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(v5 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v5, 1, "Expected a ';' following a class field");
              goto LABEL_135;
            }
            goto LABEL_316;
          }
          if ((_DWORD)v68 == 1)
          {
            v337 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(v5 + 7232));
            NumericIdentifier = (WTF::AtomStringImpl *)JSC::IdentifierArena::makePrivateIdentifier((uint64_t)v337, *(_QWORD *)(v5 + 7216), (WTF::StringImpl *)"instanceComputedName", (WTF::StringImpl *)0x15, v399);
            LODWORD(v399) = v399 + 1;
LABEL_262:
            if (*(_DWORD *)(v406 + 12) <= v401)
            {
              __break(0xC471u);
              JUMPOUT(0x197EE49ECLL);
            }
            JSC::Scope::declareLexicalVariable(*(_QWORD *)v406 + 720 * v400, NumericIdentifier, 1, v338, v339, v340, v341, v342);
            if (*(_DWORD *)(v406 + 12) <= v401)
            {
              __break(0xC471u);
              JUMPOUT(0x197EE49F4);
            }
            JSC::Scope::useVariable(*(_QWORD *)v406 + 720 * v400, *(_QWORD *)NumericIdentifier, 0);
            if (*(_DWORD *)(v406 + 12) <= v401)
            {
              __break(0xC471u);
              JUMPOUT(0x197EE49FCLL);
            }
            v349 = *(_QWORD *)v406;
            *(_QWORD *)&v421 = *(_QWORD *)NumericIdentifier;
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v349 + 720 * v400 + 696), (uint64_t *)&v421, v344, v345, v346, v347, v348, (uint64_t)v419);
            v208 = 0;
            v90 = *v21;
            goto LABEL_147;
          }
LABEL_261:
          v343 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(v5 + 7232));
          NumericIdentifier = (WTF::AtomStringImpl *)JSC::IdentifierArena::makePrivateIdentifier((uint64_t)v343, *(_QWORD *)(v5 + 7216), (WTF::StringImpl *)"staticComputedName", (WTF::StringImpl *)0x13, SHIDWORD(v399));
          ++HIDWORD(v399);
          goto LABEL_262;
        }
        if (v207 != *((WTF::StringImpl **)v70 + 270))
        {
          if (!v87)
            goto LABEL_146;
          goto LABEL_261;
        }
        if (*(_QWORD *)(v5 + 7360))
          goto LABEL_135;
        v196 = "Cannot declare a static field named 'prototype'";
        v197 = v5;
        v198 = 0;
LABEL_134:
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v197, v198, v196);
        goto LABEL_135;
      }
      if (*(_QWORD *)(v5 + 7360))
        goto LABEL_135;
      v371 = "Cannot declare private class field named '#constructor'";
      goto LABEL_335;
    }
    if (v69 == 20)
    {
      if (v90)
        goto LABEL_130;
      v167 = *(_DWORD *)(v5 + 12);
      if (!v167)
      {
        __break(0xC471u);
        JUMPOUT(0x197EE49C4);
      }
      v168 = (JSC::Scope *)(*(_QWORD *)v5 + 720 * (v167 - 1));
      v169 = *((_DWORD *)v168 + 45);
      JSC::Scope::pushUsedVariableSet(v168, (uint64_t)v57, v58, v59, v60, v61, v62, v63);
      v170 = *(_DWORD *)(v5 + 7456);
      *(_DWORD *)(v5 + 7456) = 0;
      if (!JSC::Parser<JSC::Lexer<char16_t>>::parseBlockStatement<JSC::ASTBuilder>(v5, a2, 2, v171, v172, v173, v174, v175))
      {
        if (*v21 == 20 || (*v21 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError(v5);
        }
        else if (!*(_QWORD *)(v5 + 7360))
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(v5, "Cannot parse class static block");
        }
        *(_DWORD *)(v5 + 7456) = v170;
        goto LABEL_135;
      }
      v178 = JSC::Symbols::staticInitializerBlockPrivateName[0];
      JSC::Symbols::staticInitializerBlockPrivateName[0] += 2;
      if (v178)
      {
        JSC::Symbols::staticInitializerBlockPrivateName[0] = v178;
      }
      else
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::staticInitializerBlockPrivateName, v176, v177, v59, v60, v61, v62, v63);
        WTF::fastFree(v372, v373, v374, v375, v376, v377, v378, v379);
      }
      v179 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(v5 + 7232));
      JSC::Symbols::staticInitializerBlockPrivateName[0] += 2;
      v419[0] = (WTF::StringImpl *)JSC::Symbols::staticInitializerBlockPrivateName;
      WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>((uint64_t)v179, (uint64_t *)v419);
      v187 = v419[0];
      v419[0] = 0;
      if (v187)
      {
        if (*(_DWORD *)v187 == 2)
        {
          WTF::StringImpl::~StringImpl(v187, v180, v181, v182, v183, v184, v185, v186);
          WTF::fastFree(v380, v381, v382, v383, v384, v385, v386, v387);
        }
        else
        {
          *(_DWORD *)v187 -= 2;
        }
      }
      v188 = *v179 - 1;
      if (v188 >> 6 >= *((unsigned int *)v179 + 5))
      {
        __break(0xC471u);
        JUMPOUT(0x197EE49CCLL);
      }
      v189 = JSC::ASTBuilder::createProperty(*(JSC::ParserArena **)(a2 + 8), *(_QWORD *)(v179[1] + 8 * (v188 >> 6)) + 8 * (v188 & 0x3F), v88, v68);
      if (*(_DWORD *)(v406 + 12) <= v401)
      {
        __break(0xC471u);
        JUMPOUT(0x197EE49D4);
      }
      v96 = v189;
      JSC::Scope::markLastUsedVariablesSetAsCaptured((uint64_t *)(*(_QWORD *)v406 + 720 * v400), v169, v190, v191, v192, v193, v194, v195);
      *(_DWORD *)(v5 + 7456) = v170;
      v46 = a2;
      goto LABEL_62;
    }
LABEL_49:
    *(_OWORD *)v419 = 0u;
    memset(v420, 0, 28);
    if ((_DWORD)v68 == 1)
    {
      v91 = *(_QWORD *)NumericIdentifier == *((_QWORD *)v70 + 135);
      if (v69 != 5 && *(_QWORD *)NumericIdentifier == *((_QWORD *)v70 + 135))
      {
        if (!*(_QWORD *)(v5 + 7360))
        {
          *(_QWORD *)&v421 = JSC::stringArticleForFunctionMode(v69);
          v418 = JSC::stringForFunctionMode();
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],char const*,char const*,char const(&)[21]>(v5, (const char **)&v421, &v418);
        }
        goto LABEL_135;
      }
      v92 = v408;
      if (*(_QWORD *)NumericIdentifier == *((_QWORD *)v70 + 135))
        NumericIdentifier = *(WTF::AtomStringImpl **)a4;
      else
        v92 = 0;
    }
    else
    {
      v92 = 0;
      v91 = 0;
    }
    v419[0] = NumericIdentifier;
    v93 = *(_BYTE *)(v5 + 7474);
    *(_BYTE *)(v5 + 7474) = v69;
    v46 = a2;
    if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(v5, a2, 2, 0, v92, 0, v413, v419, 2, 0) & 1) == 0)
    {
      if (*v21 == 20 || (*v21 & 0x100000) != 0)
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError(v5);
      }
      else if (!*(_QWORD *)(v5 + 7360))
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(v5, "Cannot parse this method");
      }
      goto LABEL_256;
    }
    MethodDefinition = (_QWORD *)JSC::ASTBuilder::createMethodDefinition(a2, (uint64_t)&v415, (uint64_t)v419, v59, v60, v61, v62, v63);
    v58 = (uint64_t)MethodDefinition;
    if (!v91)
    {
      if ((_DWORD)v68 == 2 && v419[0] && *(_QWORD *)v419[0] == *((_QWORD *)v70 + 270))
      {
        if (!*(_QWORD *)(v5 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v5, 0, "Cannot declare a static method named 'prototype'");
LABEL_256:
        *(_BYTE *)(v5 + 7474) = v93;
        goto LABEL_135;
      }
      if (v87)
        v95 = JSC::ASTBuilder::createProperty(*(JSC::ParserArena **)(a2 + 8), v87, (uint64_t)MethodDefinition, v88, 0, v68);
      else
        v95 = JSC::ASTBuilder::createProperty(a2, (_DWORD **)v419[0], MethodDefinition, v88, 0, 0, v68);
      v96 = v95;
      *(_BYTE *)(v5 + 7474) = v93;
LABEL_62:
      v97 = v412;
LABEL_63:
      v98 = *(uint64_t **)(v46 + 8);
      v99 = *v98;
      v100 = v98[1] - *v98;
      if (v97)
      {
        if (v100 <= 0x37)
        {
          JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v46 + 8));
          v97 = v412;
          v99 = *v98;
        }
        *v98 = v99 + 56;
        *(_DWORD *)(v99 + 8) = v415;
        *(int32x2_t *)(v99 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v415 + 4));
        *(_DWORD *)(v99 + 20) = -1;
        *(_BYTE *)(v99 + 24) = 0;
        *(_BYTE *)(v99 + 25) = 126;
        *(_BYTE *)(v99 + 26) = 0;
        *(_QWORD *)v99 = &off_1E357ABE0;
        *(_QWORD *)(v99 + 32) = v96;
        *(_QWORD *)(v99 + 40) = 0;
        *(_BYTE *)(v99 + 48) = 0;
        *(_QWORD *)(v97 + 40) = v99;
        v64 = v99;
      }
      else
      {
        if (v100 <= 0x37)
        {
          JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v46 + 8));
          v99 = *v98;
        }
        *v98 = v99 + 56;
        *(_DWORD *)(v99 + 8) = v415;
        *(int32x2_t *)(v99 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v415 + 4));
        *(_DWORD *)(v99 + 20) = -1;
        *(_BYTE *)(v99 + 24) = 0;
        *(_BYTE *)(v99 + 25) = 126;
        *(_BYTE *)(v99 + 26) = 0;
        *(_QWORD *)v99 = &off_1E357ABE0;
        *(_QWORD *)(v99 + 32) = v96;
        *(_QWORD *)(v99 + 40) = 0;
        *(_BYTE *)(v99 + 48) = 0;
        v64 = v99;
        v405 = v99;
      }
      goto LABEL_23;
    }
    if (v407)
    {
      if (!*(_QWORD *)(v5 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v5, 0, "Cannot declare multiple constructors in a single class");
      goto LABEL_256;
    }
    *(_BYTE *)(v5 + 7474) = v93;
    v407 = (uint64_t)MethodDefinition;
  }
  if (v69 != 20)
    goto LABEL_49;
LABEL_130:
  if (v90 == 20 || (v90 & 0x100000) != 0)
  {
    JSC::Parser<JSC::Lexer<char16_t>>::logError(v5);
    if (v5)
      goto LABEL_135;
  }
  else
  {
    if (!*(_QWORD *)(v5 + 7360))
    {
      v196 = "Expected block statement for class static block";
      v197 = v5;
      v198 = 1;
      goto LABEL_134;
    }
LABEL_135:
    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v419, (uint64_t *)v5, 0, v59, v60, v61, v62, v63);
    v206 = v420[1];
    if (v420[1])
    {
      v420[1] = 0;
      LODWORD(v420[2]) = 0;
      WTF::fastFree(v206, v199, v200, v201, v202, v203, v204, v205);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v419, (WTF::AtomStringImpl *)v199, v200, v201, v202, v203, v204, v205);
LABEL_293:
    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v419, (uint64_t *)v5, 0, v24, v25, v26, v27, v28);
    v368 = v420[1];
    if (v420[1])
    {
      v420[1] = 0;
      LODWORD(v420[2]) = 0;
      WTF::fastFree(v368, v361, v362, v363, v364, v365, v366, v367);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v419, (WTF::AtomStringImpl *)v361, v362, v363, v364, v365, v366, v367);
    return 0;
  }
  return v5;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseGetterSetter<JSC::ASTBuilder>(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v13;
  int *v14;
  int v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t result;
  int v33;
  unint64_t *v34;
  uint64_t *v35;
  int v36;
  int v37;
  int v38;
  const char *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  const char *v56;
  _OWORD v59[3];
  __int128 v60;

  v13 = (unsigned __int8 *)(a1 + 7384);
  v14 = (int *)(a1 + 7368);
  v60 = *(_OWORD *)(a1 + 7400);
  v15 = *(_DWORD *)(a1 + 7368);
  if (v15 == 12
    || JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376))
    || JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376))|| (v33 = *v14, *v14 == 546)|| v33 == 1048592 && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128)|| v15 == 13|| v33 == 14|| (v33 & 0x200) != 0)
  {
    v16 = *(uint64_t **)(a1 + 7376);
    if ((_DWORD)a5 == 1)
    {
      v17 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v18 = *v16;
      if (*v16 == v17[135])
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a getter or setter named 'constructor'");
        return 0;
      }
    }
    else if ((_DWORD)a5 == 2)
    {
      v17 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v18 = *v16;
      if (*v16 == v17[270])
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a static method named 'prototype'");
        return 0;
      }
    }
    else
    {
      v17 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
      v18 = *v16;
    }
    if (v18 == v17[350])
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a private accessor named '#constructor'");
      return 0;
    }
    if (*v14 == 13 && (_DWORD)a5 == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(a1, "Cannot declare a private setter or getter outside a class");
      return 0;
    }
    v20 = *(_DWORD *)(a1 + 7400);
    v21 = *(_DWORD *)(a1 + 7412);
    v22 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v20;
    *(_DWORD *)(a1 + 7448) = v21;
    *(_DWORD *)(a1 + 7452) = v22;
    v23 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v23 + 4) = v20;
    v24 = *(_DWORD *)(a1 + 12);
    if (!v24)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE5238);
    }
    goto LABEL_10;
  }
  if ((v33 - 9) >= 2)
  {
    if (v33 == 4)
    {
      v43 = *(_DWORD *)(a1 + 7400);
      v44 = *(_DWORD *)(a1 + 7412);
      v45 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v43;
      *(_DWORD *)(a1 + 7448) = v44;
      *(_DWORD *)(a1 + 7452) = v45;
      v46 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v46 + 4) = v43;
      v47 = *(_DWORD *)(a1 + 12);
      if (!v47)
      {
        __break(0xC471u);
        JUMPOUT(0x197EE5248);
      }
      v48 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v47 - 1) + 9) & 1;
      *(_BYTE *)(v46 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v46, (uint64_t)v14, 0, v48, a5, a6, a7, a8);
      v49 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
      v50 = *(_DWORD *)(a1 + 7368);
      if (!v49)
      {
        if (v50 != 20 && (v50 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse computed property name");
          return 0;
        }
        goto LABEL_54;
      }
      if (v50 != 5)
      {
        if (v50 != 20 && (v50 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[23]>(a1);
          return 0;
        }
        goto LABEL_54;
      }
      v25 = v49;
      v51 = *(_DWORD *)(a1 + 7400);
      v52 = *(_DWORD *)(a1 + 7412);
      v53 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v51;
      *(_DWORD *)(a1 + 7448) = v52;
      *(_DWORD *)(a1 + 7452) = v53;
      v23 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v23 + 4) = v51;
      v24 = *(_DWORD *)(a1 + 12);
      if (!v24)
      {
LABEL_127:
        __break(0xC471u);
        JUMPOUT(0x197EE4D74);
      }
      v16 = 0;
      goto LABEL_11;
    }
    if (v33 != 11)
      goto LABEL_54;
    v34 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
    JSC::IdentifierArena::makeBigIntDecimalIdentifier((JSC::IdentifierArena *)v34, *(JSC::VM **)(a1 + 7216), *(const JSC::Identifier **)(a1 + 7376), *v13);
    if (!v35)
    {
      if (*v14 != 20 && (*v14 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse big int property name");
        return 0;
      }
      goto LABEL_54;
    }
    v16 = v35;
    v36 = *(_DWORD *)(a1 + 7400);
    v37 = *(_DWORD *)(a1 + 7412);
    v38 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v36;
    *(_DWORD *)(a1 + 7448) = v37;
    *(_DWORD *)(a1 + 7452) = v38;
    v23 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v23 + 4) = v36;
    v24 = *(_DWORD *)(a1 + 12);
    if (!v24)
      goto LABEL_127;
LABEL_10:
    v25 = 0;
LABEL_11:
    v26 = 0.0;
    goto LABEL_12;
  }
  v26 = *(double *)(a1 + 7376);
  v40 = *(_DWORD *)(a1 + 7400);
  v41 = *(_DWORD *)(a1 + 7412);
  v42 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v40;
  *(_DWORD *)(a1 + 7448) = v41;
  *(_DWORD *)(a1 + 7452) = v42;
  v23 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v23 + 4) = v40;
  v24 = *(_DWORD *)(a1 + 12);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE5240);
  }
  v16 = 0;
  v25 = 0;
LABEL_12:
  v27 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v24 - 1) + 9) & 1;
  *(_BYTE *)(v23 + 56) = 0;
  v28 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v23, (uint64_t)v14, 0, v27, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v28;
  memset(v59, 0, 44);
  if ((a3 & 2) != 0)
  {
    if (v28 == 2)
    {
      v31 = v13[90];
      v13[90] = 3;
      if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 2, 0, 0, 0, a4, v59, 2, 0) & 1) != 0)
      {
LABEL_15:
        v13[90] = v31;
        goto LABEL_16;
      }
      if (*v14 != 20 && (*v14 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v39 = "Cannot parse getter definition";
          goto LABEL_60;
        }
        goto LABEL_98;
      }
      goto LABEL_97;
    }
    if (v28 == 20 || (v28 & 0x100000) != 0)
      goto LABEL_54;
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    v56 = "Expected a parameter list for getter definition";
LABEL_90:
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, v56);
    return 0;
  }
  if ((a3 & 4) != 0)
  {
    if (v28 == 2)
    {
      v31 = v13[90];
      v13[90] = 4;
      if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 2, 0, 0, 0, a4, v59, 2, 0) & 1) != 0)goto LABEL_15;
      if (*v14 != 20 && (*v14 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v39 = "Cannot parse setter definition";
LABEL_60:
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, v39);
        }
LABEL_98:
        result = 0;
        v13[90] = v31;
        return result;
      }
LABEL_97:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      goto LABEL_98;
    }
    if (v28 == 20 || (v28 & 0x100000) != 0)
      goto LABEL_54;
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    v56 = "Expected a parameter list for setter definition";
    goto LABEL_90;
  }
  if ((a3 & 0x100) != 0)
  {
    if (v28 == 2)
    {
      v31 = v13[90];
      v13[90] = 4;
      if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 2, 0, 0, 0, a4, v59, 2, 0) & 1) != 0)goto LABEL_15;
      if (*v14 != 20 && (*v14 & 0x100000) == 0)
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_98;
        v39 = "Cannot parse private setter definition";
        goto LABEL_60;
      }
      goto LABEL_97;
    }
    if (v28 != 20 && (v28 & 0x100000) == 0)
    {
      if (*(_QWORD *)(a1 + 7360))
        return 0;
      v56 = "Expected a parameter list for private setter definition";
      goto LABEL_90;
    }
    goto LABEL_54;
  }
  if ((a3 & 0x200) != 0)
  {
    if (v28 == 2)
    {
      v31 = v13[90];
      v13[90] = 3;
      if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 2, 0, 0, 0, a4, v59, 2, 0) & 1) != 0)goto LABEL_15;
      if (*v14 != 20 && (*v14 & 0x100000) == 0)
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_98;
        v39 = "Cannot parse private getter definition";
        goto LABEL_60;
      }
      goto LABEL_97;
    }
    if (v28 != 20 && (v28 & 0x100000) == 0)
    {
      if (*(_QWORD *)(a1 + 7360))
        return 0;
      v56 = "Expected a parameter list for private getter definition";
      goto LABEL_90;
    }
LABEL_54:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return 0;
  }
LABEL_16:
  if (v16)
    return JSC::ASTBuilder::createGetterOrSetterProperty(a2, (uint64_t)&v60, a3, v16, (uint64_t)v59, a5, v29, v30);
  if (v25)
    return JSC::ASTBuilder::createGetterOrSetterProperty(a2, (uint64_t)&v60, (unsigned __int16)a3 | 8u, v25, (uint64_t)v59, a5, v29, v30);
  return JSC::ASTBuilder::createGetterOrSetterProperty((uint64_t)a2, *(uint64_t ***)(a1 + 7216), (const WTF::StringImpl *)(a1 + 7232), (uint64_t)&v60, a3, (uint64_t)v59, a5, v30, v26);
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseBlockStatement<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v11;
  uint64_t *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  _QWORD v122[3];
  WTF *v123;
  uint64_t v124;

  v11 = a3 == 2 || *(_DWORD *)(a1 + 7456) > 0;
  if (!v11)
  {
    v12 = 0;
    goto LABEL_9;
  }
  v59 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  if (*(_DWORD *)(v59 + 12) <= v60)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE58B8);
  }
  *(_DWORD *)(*(_QWORD *)v59 + 720 * v60 + 10) |= 0x8080u;
  if (!a3)
  {
    if (*(_DWORD *)(v59 + 12) <= v60)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE58C8);
    }
LABEL_29:
    *(_DWORD *)(*(_QWORD *)v59 + 720 * v60 + 10) &= ~0x40u;
    goto LABEL_30;
  }
  if (a3 == 1)
  {
    if (*(_DWORD *)(v59 + 12) <= v60)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE58D0);
    }
    *(_DWORD *)(*(_QWORD *)v59 + 720 * v60 + 10) |= 0x80000u;
    if (*(_DWORD *)(v59 + 12) <= v60)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE55ACLL);
    }
    goto LABEL_29;
  }
  if (a3 != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE57CCLL);
  }
  if (*(_DWORD *)(v59 + 12) <= v60)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE58E0);
  }
  *(_DWORD *)(*(_QWORD *)v59 + 720 * v60 + 10) = *(_DWORD *)(*(_QWORD *)v59 + 720 * v60 + 10) & 0xFE8F007F | 0x1708180;
  if (*(_DWORD *)(v59 + 12) <= v60)
  {
LABEL_82:
    __break(0xC471u);
    JUMPOUT(0x197EE5500);
  }
  *(_DWORD *)(*(_QWORD *)v59 + 720 * v60 + 20) = 0;
LABEL_30:
  if (*(_DWORD *)(v59 + 12) <= v60)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE58C0);
  }
  v12 = (uint64_t *)a1;
  if ((*(_BYTE *)(*(_QWORD *)v59 + 720 * v60 + 11) & 0x80) == 0)
    goto LABEL_82;
LABEL_9:
  v13 = *(_DWORD *)(a1 + 7400);
  v14 = *(_DWORD *)(a1 + 7404);
  v15 = *(_DWORD *)(a1 + 7380);
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v16 = *(_DWORD *)(a1 + 7412);
  *(_DWORD *)(a1 + 7444) = v13;
  *(_DWORD *)(a1 + 7448) = v16;
  *(_DWORD *)(a1 + 7452) = v14;
  v17 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v17 + 4) = v13;
  v18 = *(_DWORD *)(a1 + 12);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE58A8);
  }
  v19 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v18 - 1) + 9) & 1;
  *(_BYTE *)(v17 + 56) = 0;
  v20 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v17, a1 + 7368, 0, v19, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v20;
  if (v20 != 1)
  {
    v25 = JSC::Parser<JSC::Lexer<char16_t>>::parseSourceElements<JSC::ASTBuilder>(a1, a2, 1);
    v33 = *(_DWORD *)(a1 + 7368);
    if (v25)
    {
      if (v33 == 1)
      {
        v34 = v25;
        v35 = *(_DWORD *)(a1 + 7380);
        v36 = *(_DWORD *)(a1 + 7400);
        v37 = *(_DWORD *)(a1 + 7412);
        v38 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v36;
        *(_DWORD *)(a1 + 7448) = v37;
        *(_DWORD *)(a1 + 7452) = v38;
        v39 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v39 + 4) = v36;
        v40 = *(_DWORD *)(a1 + 12);
        if (!v40)
        {
          __break(0xC471u);
          JUMPOUT(0x197EE58B0);
        }
        v41 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v40 - 1) + 9) & 1;
        *(_BYTE *)(v39 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v39, a1 + 7368, 0, v41, v29, v30, v31, v32);
        if (v11)
        {
          if (!v12)
          {
            __break(0xC471u);
            JUMPOUT(0x197EE57ACLL);
          }
          JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v122, (uint64_t *)a1, 1, v28, v29, v30, v31, v32);
          JSC::VariableEnvironment::operator=((uint64_t)&v119, (uint64_t)v122, v61, v62, v63, v64, v65, v66);
          v42 = v123;
          v113 = v124;
          v123 = 0;
          v124 = 0;
          JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v122, v67, v68, v69, v70, v71, v72, v73);
          v43 = v113;
          v12 = 0;
        }
        else
        {
          v42 = 0;
          v43 = 0;
        }
        v44 = *(_DWORD *)(a1 + 7444);
        v45 = *(uint64_t **)(a2 + 8);
        v46 = *v45;
        if ((unint64_t)(v45[1] - *v45) <= 0x5F)
        {
          v117 = v43;
          JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v45);
          v43 = v117;
          v46 = *v45;
        }
        *v45 = v46 + 96;
        if (v46)
          v47 = v46 + 40;
        else
          v47 = 0;
        v122[0] = v47;
        v48 = v45 + 5;
        v49 = *((unsigned int *)v45 + 13);
        if ((_DWORD)v49 == *((_DWORD *)v45 + 12))
        {
          v114 = v43;
          v74 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)v122);
          v43 = v114;
          v49 = *((unsigned int *)v45 + 13);
          *(_QWORD *)(v45[5] + 8 * v49) = *v74;
        }
        else
        {
          *(_QWORD *)(*v48 + 8 * v49) = v47;
        }
        *((_DWORD *)v45 + 13) = v49 + 1;
        *(_BYTE *)(v46 + 24) = 0;
        v50 = v119;
        *(_BYTE *)(v46 + 56) = v120;
        v51 = v121;
        v119 = 0;
        v121 = 0;
        *(_QWORD *)(v46 + 64) = v51;
        *(_QWORD *)(v46 + 72) = v42;
        *(_QWORD *)(v46 + 80) = v43;
        *(_QWORD *)v46 = &off_1E358B420;
        *(_QWORD *)(v46 + 32) = 0;
        *(_QWORD *)(v46 + 40) = &unk_1E358B4C0;
        *(_QWORD *)(v46 + 48) = v50;
        *(_QWORD *)(v46 + 88) = v34;
        *(_DWORD *)(v46 + 28) = v44;
        *(_DWORD *)(v46 + 8) = v13;
        *(_DWORD *)(v46 + 12) = v15;
        *(_DWORD *)(v46 + 16) = v14;
        *(_DWORD *)(v46 + 20) = v35;
        goto LABEL_24;
      }
      if (v33 != 20 && (v33 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a closing '}' at the end of a block statement");
        goto LABEL_69;
      }
    }
    else if (v33 != 20 && (v33 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of the block statement");
      goto LABEL_69;
    }
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_69:
    v46 = 0;
    goto LABEL_24;
  }
  v75 = *(_DWORD *)(a1 + 7380);
  v76 = *(_DWORD *)(a1 + 7400);
  v77 = *(_DWORD *)(a1 + 7412);
  v78 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v76;
  *(_DWORD *)(a1 + 7448) = v77;
  *(_DWORD *)(a1 + 7452) = v78;
  v79 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v79 + 4) = v76;
  v80 = *(_DWORD *)(a1 + 12);
  if (!v80)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE58D8);
  }
  v81 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v80 - 1) + 9) & 1;
  *(_BYTE *)(v79 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v79, a1 + 7368, 0, v81, v21, v22, v23, v24);
  if (v11)
  {
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE5890);
    }
    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v122, (uint64_t *)a1, 1, v28, v29, v30, v31, v32);
    JSC::VariableEnvironment::operator=((uint64_t)&v119, (uint64_t)v122, v82, v83, v84, v85, v86, v87);
    v88 = v123;
    v115 = v124;
    v123 = 0;
    v124 = 0;
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v122, v89, v90, v91, v92, v93, v94, v95);
    v96 = v115;
    v12 = 0;
  }
  else
  {
    v88 = 0;
    v96 = 0;
  }
  v97 = *(_DWORD *)(a1 + 7444);
  v98 = *(uint64_t **)(a2 + 8);
  v46 = *v98;
  if ((unint64_t)(v98[1] - *v98) <= 0x5F)
  {
    v118 = v96;
    JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v98);
    v96 = v118;
    v46 = *v98;
  }
  *v98 = v46 + 96;
  if (v46)
    v99 = v46 + 40;
  else
    v99 = 0;
  v122[0] = v99;
  v100 = v98 + 5;
  v101 = *((unsigned int *)v98 + 13);
  if ((_DWORD)v101 == *((_DWORD *)v98 + 12))
  {
    v116 = v96;
    v104 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v100, v101 + 1, (unint64_t)v122);
    v96 = v116;
    v101 = *((unsigned int *)v98 + 13);
    *(_QWORD *)(v98[5] + 8 * v101) = *v104;
  }
  else
  {
    *(_QWORD *)(*v100 + 8 * v101) = v99;
  }
  *((_DWORD *)v98 + 13) = v101 + 1;
  *(_BYTE *)(v46 + 24) = 0;
  v102 = v119;
  *(_BYTE *)(v46 + 56) = v120;
  v103 = v121;
  v119 = 0;
  v121 = 0;
  *(_QWORD *)(v46 + 64) = v103;
  *(_QWORD *)(v46 + 72) = v88;
  *(_QWORD *)(v46 + 80) = v96;
  *(_QWORD *)v46 = &off_1E358B420;
  *(_QWORD *)(v46 + 32) = 0;
  *(_QWORD *)(v46 + 40) = &unk_1E358B4C0;
  *(_QWORD *)(v46 + 48) = v102;
  *(_QWORD *)(v46 + 88) = 0;
  *(_DWORD *)(v46 + 28) = v97;
  *(_DWORD *)(v46 + 8) = v13;
  *(_DWORD *)(v46 + 12) = v15;
  *(_DWORD *)(v46 + 16) = v14;
  *(_DWORD *)(v46 + 20) = v75;
LABEL_24:
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v119, v26, v27, v28, v29, v30, v31, v32);
  if (v12)
  {
    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v122, v12, 0, v52, v53, v54, v55, v56);
    v112 = v123;
    if (v123)
    {
      v123 = 0;
      LODWORD(v124) = 0;
      WTF::fastFree((unint64_t)v112, v105, v106, v107, v108, v109, v110, v111);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v122, (WTF::AtomStringImpl *)v105, v106, v107, v108, v109, v110, v111);
  }
  return v46;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseProperty<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int *v18;
  uint64_t *v19;
  int v20;
  _BOOL4 v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  _DWORD *v61;
  WTF::StringImpl *v62;
  _OWORD *v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  double v69;
  _QWORD *v70;
  _QWORD *v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  unsigned int v80;
  int v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *MethodDefinition;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  _DWORD *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  _DWORD *v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  WTF::AtomStringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  int v130;
  WTF::AtomStringImpl *v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _DWORD *v154;
  _QWORD *v155;
  int v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  const char *v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t v170;
  int v171;
  int v172;
  int v173;
  int v174;
  uint64_t v175;
  int v176;
  unint64_t *v177;
  int *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *NumericIdentifier;
  int v184;
  int v185;
  int v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  int v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  _DWORD *v201;
  _QWORD *v202;
  WTF::AtomStringImpl *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  _DWORD *v212;
  WTF::StringImpl *v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  WTF::AtomStringImpl *v229;
  unint64_t *v230;
  unint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  _DWORD **v242;
  _QWORD *v243;
  unint64_t v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  int32x2_t v253;
  int v254;
  uint64_t v255;
  int v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t *v263;
  int v264;
  uint64_t *v265;
  int v266;
  int v267;
  int v268;
  int v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  int v280;
  int v281;
  int v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  int v291;
  int v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t *v299;
  _DWORD **v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  _DWORD **v305;
  int *v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  int v321;
  int v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  BOOL v327;
  char v329;
  unsigned int v330;
  int v331;
  int v332;
  char v333;
  char v334;
  int v335;
  uint64_t *v336;
  char *v337;
  int32x2_t v338;
  uint64_t v339;
  int *v340;
  int v341;
  _BYTE v342[24];
  __int128 v343;
  int v344;
  _OWORD v345[2];

  LOBYTE(v341) = 0;
  v10 = (int *)(a1 + 7368);
  v11 = *(_DWORD *)(a1 + 7368);
  if (v11 == 191488)
  {
    v12 = *(_DWORD *)(a1 + 7420);
    v158 = *(_DWORD *)(a1 + 7400);
    v159 = *(_DWORD *)(a1 + 7412);
    v160 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v158;
    *(_DWORD *)(a1 + 7448) = v159;
    *(_DWORD *)(a1 + 7452) = v160;
    v161 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v161 + 4) = v158;
    v162 = *(_DWORD *)(a1 + 12);
    if (!v162)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE708CLL);
    }
    v163 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v162 - 1) + 9) & 1;
    *(_BYTE *)(v161 + 56) = 0;
    v14 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v161, (uint64_t)v10, 0, v163, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v14;
    v13 = 18;
  }
  else
  {
    v12 = 0;
    v13 = 5;
    v14 = *(_DWORD *)(a1 + 7368);
  }
  v15 = 0;
  v16 = a1 + 7344;
  v17 = v341;
  v18 = (int *)(a1 + 7420);
  v19 = (uint64_t *)(a1 + 7444);
  v337 = (char *)(a1 + 7344);
  v340 = v10;
  if (v14 <= 36)
  {
    v20 = 1;
    switch(v14)
    {
      case 4:
        goto LABEL_243;
      case 9:
      case 10:
        goto LABEL_175;
      case 11:
        goto LABEL_280;
      case 12:
        goto LABEL_5;
      case 14:
        goto LABEL_208;
      default:
        goto LABEL_57;
    }
  }
  if (v14 == 37)
    goto LABEL_229;
  if ((v14 - 545) < 2)
  {
LABEL_7:
    v339 = a2;
    v341 = v17;
LABEL_8:
    v21 = *(_BYTE *)(v16 + 40) == 0;
    v22 = 1;
    goto LABEL_9;
  }
  if (v14 != 1048592)
  {
LABEL_57:
    v341 = v17;
    if ((v14 & 0x200) == 0)
    {
      if (v14 != 20 && (v14 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected a property name");
        return 0;
      }
      goto LABEL_304;
    }
    v339 = a2;
    goto LABEL_8;
  }
LABEL_5:
  if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896)
    || *(_BYTE *)(a1 + 7384))
  {
    v15 = 0;
    goto LABEL_7;
  }
  v339 = a2;
  v17 = *v18;
  if (v11 == 191488)
  {
LABEL_213:
    v15 = 1;
LABEL_214:
    a2 = v339;
    v19 = (uint64_t *)(a1 + 7444);
    v16 = a1 + 7344;
    goto LABEL_7;
  }
  v345[0] = *(_OWORD *)(a1 + 7296);
  v113 = *(_DWORD *)(a1 + 7316);
  *(_OWORD *)v342 = *(_OWORD *)(a1 + 7320);
  *(_QWORD *)&v342[16] = *(_QWORD *)(a1 + 7336);
  v334 = *v337;
  v335 = v113;
  v332 = *(_DWORD *)(a2 + 1052);
  v333 = *(_BYTE *)(a1 + 7345);
  v114 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
  v115 = *(unsigned int *)(a1 + 7404);
  v116 = *(_QWORD *)(a1 + 7288);
  v330 = *(_DWORD *)v116;
  v331 = *(_DWORD *)(v116 + 4);
  v329 = *(_BYTE *)(v116 + 56);
  v117 = *(_DWORD *)(a1 + 7400);
  v118 = *(_DWORD *)(a1 + 7412);
  *(_DWORD *)(a1 + 7444) = v117;
  *(_DWORD *)(a1 + 7448) = v118;
  *(_DWORD *)(a1 + 7452) = v115;
  *(_DWORD *)(v116 + 4) = v117;
  v119 = *(_DWORD *)(a1 + 12);
  if (!v119)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE70A4);
  }
  v120 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v119 - 1) + 9) & 1;
  *(_BYTE *)(v116 + 56) = 0;
  v121 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v116, (uint64_t)v340, 0, v120, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v121;
  if (v121 == 18 || (v14 = v121, v121 <= 6) && ((1 << v121) & 0x46) != 0)
  {
    v341 = v17;
    JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), v114, v115, a4, a5, a6, a7, a8);
    v126 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v126 = v330;
    *(_BYTE *)(v126 + 56) = v329;
    v127 = *(_DWORD *)(a1 + 7400);
    v128 = *(_DWORD *)(a1 + 7412);
    v129 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v127;
    *(_DWORD *)(a1 + 7448) = v128;
    *(_DWORD *)(a1 + 7452) = v129;
    *(_DWORD *)(v126 + 4) = v127;
    v130 = *(_DWORD *)(a1 + 12);
    if (!v130)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE70ACLL);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v126, (uint64_t)v340, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v130 - 1) + 9) & 1, v122, v123, v124, v125);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v331;
    *(_OWORD *)(a1 + 7296) = v345[0];
    *(_DWORD *)(a1 + 7312) = v332;
    *(_DWORD *)(a1 + 7316) = v335;
    *(_OWORD *)(a1 + 7320) = *(_OWORD *)v342;
    *(_QWORD *)(a1 + 7336) = *(_QWORD *)&v342[16];
    *v337 = v334;
    *(_BYTE *)(a1 + 7345) = v333;
    *(_DWORD *)(v339 + 1052) = v332;
    v134 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (v134)
    {
      if (*(_DWORD *)v134 == 2)
      {
        WTF::StringImpl::~StringImpl(v134, v131, v132, v133, a5, a6, a7, a8);
        WTF::fastFree(v244, v245, v246, v247, v248, v249, v250, v251);
      }
      else
      {
        *(_DWORD *)v134 -= 2;
      }
    }
    v14 = *v340;
    v15 = 1;
    v13 = 5;
    v19 = (uint64_t *)(a1 + 7444);
    v16 = a1 + 7344;
    goto LABEL_8;
  }
  v170 = *(_QWORD *)(a1 + 7288);
  if (*(_BYTE *)(v170 + 56))
  {
    if (v14 != 20 && (v14 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a property name following keyword 'async'");
      return 0;
    }
    goto LABEL_304;
  }
  if (v14 == 191488)
  {
    v171 = *(_DWORD *)(a1 + 7400);
    v172 = *(_DWORD *)(a1 + 7412);
    v173 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v171;
    *(_DWORD *)(a1 + 7448) = v172;
    *(_DWORD *)(a1 + 7452) = v173;
    *(_DWORD *)(v170 + 4) = v171;
    v174 = *(_DWORD *)(a1 + 12);
    if (!v174)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE70B4);
    }
    v175 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v174 - 1) + 9) & 1;
    *(_BYTE *)(v170 + 56) = 0;
    v14 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v170, (uint64_t)v340, 0, v175, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v14;
    v13 = 17;
  }
  else
  {
    v13 = 10;
  }
  if ((v14 - 9) < 2)
  {
    v18 = &v341;
    a2 = v339;
LABEL_175:
    v341 = v17;
    if (v11 == 191488)
      v176 = v12;
    else
      v176 = *v18;
    v177 = *(unint64_t **)(a1 + 7248);
    v178 = v340;
    if (!v177)
    {
      v177 = (unint64_t *)WTF::fastMalloc((WTF *)0x818);
      v177[1] = 0;
      v177[2] = 0;
      *v177 = 0;
      WTF::SegmentedVector<JSC::Identifier,64ul>::clear(v177, v222, v223, v224, v225, v226, v227, v228);
      bzero(v177 + 3, 0x800uLL);
      v230 = *(unint64_t **)(a1 + 7248);
      *(_QWORD *)(a1 + 7248) = v177;
      if (v230)
      {
        WTF::SegmentedVector<JSC::Identifier,64ul>::~SegmentedVector(v230, v229, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v231, v232, v233, v234, v235, v236, v237, v238);
        v177 = *(unint64_t **)(a1 + 7248);
      }
    }
    NumericIdentifier = (_QWORD *)JSC::IdentifierArena::makeNumericIdentifier((JSC::IdentifierArena *)v177, *(uint64_t ***)(a1 + 7216), *(double *)(a1 + 7376), a3, a4, a5, a6, a7, a8);
    v184 = *(_DWORD *)(a1 + 7400);
    v185 = *(_DWORD *)(a1 + 7412);
    v186 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v184;
    *(_DWORD *)(a1 + 7448) = v185;
    *(_DWORD *)(a1 + 7452) = v186;
    v187 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v187 + 4) = v184;
    v188 = *(_DWORD *)(a1 + 12);
    if (!v188)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE6B68);
    }
    v189 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v188 - 1) + 9) & 1;
    *(_BYTE *)(v187 + 56) = 0;
    v190 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v187, (uint64_t)v340, 0, v189, v179, v180, v181, v182);
    *(_DWORD *)(a1 + 7368) = v190;
    if (v190 != 2)
    {
      if (v13 == 5)
      {
        if (v190 == 18)
        {
          v195 = *(_DWORD *)(a1 + 7400);
          v196 = *(_DWORD *)(a1 + 7412);
          v197 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v195;
          *(_DWORD *)(a1 + 7448) = v196;
          *(_DWORD *)(a1 + 7452) = v197;
          v198 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v198 + 4) = v195;
          v199 = *(_DWORD *)(a1 + 12);
          if (!v199)
          {
            __break(0xC471u);
            JUMPOUT(0x197EE6B70);
          }
          v200 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v199 - 1) + 9) & 1;
          *(_BYTE *)(v198 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v198, (uint64_t)v340, 0, v200, v191, v192, v193, v194);
          *(_DWORD *)v342 = 0;
          *(_QWORD *)&v342[8] = *(_QWORD *)(a1 + 7496);
          *(_QWORD *)&v342[16] = a1;
          *(_QWORD *)(a1 + 7496) = v342;
          v201 = (_DWORD *)JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, v342);
          *(_QWORD *)(*(_QWORD *)&v342[16] + 7496) = *(_QWORD *)&v342[8];
          if (v201)
          {
            v202 = v201;
            v201[5] = (*(_QWORD *)(*(_QWORD *)(a1 + 7288) + 80) - *(_QWORD *)(*(_QWORD *)(a1 + 7288) + 88)) >> 1;
            if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v201 + 152))(v201))
            {
              v211 = v202[4];
              v212 = (_DWORD *)*NumericIdentifier;
              if (*NumericIdentifier)
                *v212 += 2;
              v213 = *(WTF::StringImpl **)(v211 + 48);
              *(_QWORD *)(v211 + 48) = v212;
              if (v213)
              {
                if (*(_DWORD *)v213 == 2)
                {
                  WTF::StringImpl::~StringImpl(v213, v203, v204, v205, v206, v207, v208, v209);
                  WTF::fastFree(v214, v215, v216, v217, v218, v219, v220, v221);
                }
                else
                {
                  *(_DWORD *)v213 -= 2;
                }
              }
            }
            else if ((*(unsigned int (**)(_QWORD *))(*v202 + 176))(v202))
            {
              v243 = (_QWORD *)v202[20];
              if (!*v243)
                v243 = NumericIdentifier;
              v202[21] = v243;
            }
            v210 = *(uint64_t **)(a2 + 8);
            result = *v210;
            if ((unint64_t)(v210[1] - *v210) <= 0x1F)
            {
              JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
              result = *v210;
            }
            *v210 = result + 32;
            *(_QWORD *)result = NumericIdentifier;
            *(_QWORD *)(result + 8) = 0;
            *(_QWORD *)(result + 16) = v202;
LABEL_29:
            v59 = *(_WORD *)(result + 24) & 0x8000 | 1;
LABEL_30:
            *(_WORD *)(result + 24) = v59;
            return result;
          }
LABEL_269:
          v156 = *v178;
          goto LABEL_115;
        }
        goto LABEL_300;
      }
      goto LABEL_308;
    }
    v90 = *(_BYTE *)(a1 + 7474);
    *(_BYTE *)(a1 + 7474) = v13;
    v239 = JSC::Parser<JSC::Lexer<char16_t>>::parsePropertyMethod<JSC::ASTBuilder>(a1, a2, (uint64_t)NumericIdentifier, v176);
    if (!*(_QWORD *)(a1 + 7360))
    {
      v240 = (_QWORD *)v239;
      v241 = a2;
      v242 = (_DWORD **)NumericIdentifier;
LABEL_200:
      result = JSC::ASTBuilder::createProperty(v241, v242, v240, 1, 0, 0, 0);
LABEL_70:
      v337[130] = v90;
      return result;
    }
    goto LABEL_290;
  }
  v15 = 1;
  if (v14 <= 13)
  {
    switch(v14)
    {
      case 12:
LABEL_212:
        if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896)
          && !*(_BYTE *)(a1 + 7384))
        {
          v17 = *v18;
        }
        goto LABEL_213;
      case 4:
        v18 = &v341;
        a2 = v339;
LABEL_243:
        v341 = v17;
        if (v11 == 191488)
          v266 = v12;
        else
          v266 = *v18;
        v267 = *(_DWORD *)(a1 + 7400);
        v268 = *(_DWORD *)(a1 + 7412);
        v269 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v267;
        *(_DWORD *)(a1 + 7448) = v268;
        *(_DWORD *)(a1 + 7452) = v269;
        v270 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v270 + 4) = v267;
        v271 = *(_DWORD *)(a1 + 12);
        if (!v271)
        {
          __break(0xC471u);
          JUMPOUT(0x197EE6E20);
        }
        v272 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v271 - 1) + 9) & 1;
        *(_BYTE *)(v270 + 56) = 0;
        v178 = v340;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v270, (uint64_t)v340, 0, v272, a5, a6, a7, a8);
        v273 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
        v278 = *(_DWORD *)(a1 + 7368);
        if (!v273)
        {
          if (v278 != 20 && (v278 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse computed property name");
            return 0;
          }
          goto LABEL_304;
        }
        if (v278 != 5)
        {
          if (v278 != 20 && (v278 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[23]>(a1);
            return 0;
          }
          goto LABEL_304;
        }
        v279 = v273;
        v280 = *(_DWORD *)(a1 + 7400);
        v281 = *(_DWORD *)(a1 + 7412);
        v282 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v280;
        *(_DWORD *)(a1 + 7448) = v281;
        *(_DWORD *)(a1 + 7452) = v282;
        v283 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v283 + 4) = v280;
        v284 = *(_DWORD *)(a1 + 12);
        if (!v284)
        {
          __break(0xC471u);
          JUMPOUT(0x197EE6E28);
        }
        v285 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v284 - 1) + 9) & 1;
        *(_BYTE *)(v283 + 56) = 0;
        v35 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v283, (uint64_t)v340, 0, v285, v274, v275, v276, v277);
        *(_DWORD *)(a1 + 7368) = v35;
        if (v35 != 2)
        {
          if (v13 != 5)
          {
LABEL_265:
            if (v35 == 20 || (v35 & 0x100000) != 0)
              goto LABEL_304;
LABEL_267:
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a parenthesis for argument list");
            return 0;
          }
          if (v35 == 18)
          {
            v290 = *(_DWORD *)(a1 + 7400);
            v291 = *(_DWORD *)(a1 + 7412);
            v292 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v290;
            *(_DWORD *)(a1 + 7448) = v291;
            *(_DWORD *)(a1 + 7452) = v292;
            v293 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v293 + 4) = v290;
            v294 = *(_DWORD *)(a1 + 12);
            if (!v294)
            {
              __break(0xC471u);
              JUMPOUT(0x197EE7070);
            }
            v295 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v294 - 1) + 9) & 1;
            *(_BYTE *)(v293 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v293, (uint64_t)v340, 0, v295, v286, v287, v288, v289);
            v296 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
            if (v296)
            {
              *(_DWORD *)(v296 + 20) = (*(_QWORD *)(*(_QWORD *)(a1 + 7288) + 80)
                                      - *(_QWORD *)(*(_QWORD *)(a1 + 7288) + 88)) >> 1;
              return JSC::ASTBuilder::createProperty(*(JSC::ParserArena **)(a2 + 8), v279, v296, 9, 1, 0);
            }
            goto LABEL_269;
          }
          if (v35 == 20 || (v35 & 0x100000) != 0)
            goto LABEL_304;
LABEL_305:
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected ':' after property name");
          return 0;
        }
        v90 = *(_BYTE *)(a1 + 7474);
        *(_BYTE *)(a1 + 7474) = v13;
        v297 = JSC::Parser<JSC::Lexer<char16_t>>::parsePropertyMethod<JSC::ASTBuilder>(a1, a2, *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952), v266);
        if (!*(_QWORD *)(a1 + 7360))
        {
          result = JSC::ASTBuilder::createProperty(*(JSC::ParserArena **)(a2 + 8), v279, v297, 9, 0, 0);
          goto LABEL_70;
        }
        goto LABEL_290;
      case 11:
        v20 = 0;
        a2 = v339;
        v16 = a1 + 7344;
LABEL_280:
        v341 = v17;
        v298 = v16;
        v299 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(a1 + 7232));
        JSC::IdentifierArena::makeBigIntDecimalIdentifier((JSC::IdentifierArena *)v299, *(JSC::VM **)(a1 + 7216), *(const JSC::Identifier **)(a1 + 7376), *(unsigned __int8 *)(v298 + 40));
        if (!v300)
        {
          if (*v340 != 20 && (*v340 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse big int property name");
            return 0;
          }
          goto LABEL_304;
        }
        v305 = v300;
        v306 = &v341;
        if (v20)
          v306 = (int *)(a1 + 7420);
        v307 = *v306;
        if (v11 == 191488)
          v308 = v12;
        else
          v308 = v307;
        v309 = *(_DWORD *)(a1 + 7400);
        v310 = *(_DWORD *)(a1 + 7412);
        v311 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v309;
        *(_DWORD *)(a1 + 7448) = v310;
        *(_DWORD *)(a1 + 7452) = v311;
        v312 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v312 + 4) = v309;
        v313 = *(_DWORD *)(a1 + 12);
        if (!v313)
        {
          __break(0xC471u);
          JUMPOUT(0x197EE7094);
        }
        v314 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v313 - 1) + 9) & 1;
        *(_BYTE *)(v312 + 56) = 0;
        v190 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v312, (uint64_t)v340, 0, v314, v301, v302, v303, v304);
        *(_DWORD *)(a1 + 7368) = v190;
        if (v190 != 2)
        {
          if (v13 == 5)
          {
            if (v190 == 18)
            {
              v320 = *(_DWORD *)(a1 + 7400);
              v321 = *(_DWORD *)(a1 + 7412);
              v322 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v320;
              *(_DWORD *)(a1 + 7448) = v321;
              *(_DWORD *)(a1 + 7452) = v322;
              v323 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v323 + 4) = v320;
              v324 = *(_DWORD *)(a1 + 12);
              if (!v324)
              {
                __break(0xC471u);
                JUMPOUT(0x197EE709CLL);
              }
              v325 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v324 - 1) + 9) & 1;
              *(_BYTE *)(v323 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v323, (uint64_t)v340, 0, v325, v315, v316, v317, v318);
              v326 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
              if (v326)
              {
                *(_DWORD *)(v326 + 20) = (*(_QWORD *)(*(_QWORD *)(a1 + 7288) + 80)
                                        - *(_QWORD *)(*(_QWORD *)(a1 + 7288) + 88)) >> 1;
                return JSC::ASTBuilder::createProperty(a2, v305, (_QWORD *)v326, 1, 1, 0, 0);
              }
              v156 = *v340;
LABEL_115:
              if (v156 != 20 && (v156 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse expression for property declaration");
                return 0;
              }
              goto LABEL_304;
            }
LABEL_300:
            v327 = v190 != 20 && (v190 & 0x100000) == 0;
            if (!v327)
              goto LABEL_304;
            goto LABEL_305;
          }
LABEL_308:
          if (v190 == 20 || (v190 & 0x100000) != 0)
            goto LABEL_304;
          goto LABEL_267;
        }
        v90 = *(_BYTE *)(a1 + 7474);
        *(_BYTE *)(a1 + 7474) = v13;
        v319 = JSC::Parser<JSC::Lexer<char16_t>>::parsePropertyMethod<JSC::ASTBuilder>(a1, a2, (uint64_t)v305, v308);
        if (!*(_QWORD *)(a1 + 7360))
        {
          v240 = (_QWORD *)v319;
          v241 = a2;
          v242 = v305;
          goto LABEL_200;
        }
LABEL_290:
        result = 0;
        goto LABEL_70;
    }
LABEL_222:
    a2 = v339;
    v19 = (uint64_t *)(a1 + 7444);
    v16 = a1 + 7344;
    goto LABEL_57;
  }
  if (v14 > 36)
  {
    a2 = v339;
    v10 = v340;
    v19 = (uint64_t *)(a1 + 7444);
    v16 = a1 + 7344;
    if (v14 != 37)
    {
      if ((v14 - 545) < 2)
        goto LABEL_214;
      if (v14 == 1048592)
        goto LABEL_212;
      goto LABEL_222;
    }
LABEL_229:
    v252 = *(_DWORD *)(a1 + 7400);
    v253 = *(int32x2_t *)(v16 + 60);
    *(_QWORD *)v342 = *(_QWORD *)(a1 + 7416);
    *(_DWORD *)&v342[8] = *(_DWORD *)(a1 + 7424);
    *(_QWORD *)&v345[0] = *(_QWORD *)(a1 + 7428);
    DWORD2(v345[0]) = *(_DWORD *)(a1 + 7436);
    v254 = *(_DWORD *)(a1 + 7412);
    *(_DWORD *)(a1 + 7444) = v252;
    *(_DWORD *)(a1 + 7448) = v254;
    v338 = v253;
    *(_DWORD *)(a1 + 7452) = v253.i32[0];
    v255 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v255 + 4) = v252;
    v256 = *(_DWORD *)(a1 + 12);
    if (!v256)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE6E18);
    }
    v257 = v19;
    v258 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v256 - 1) + 9) & 1;
    *(_BYTE *)(v255 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v255, (uint64_t)v10, 0, v258, a5, a6, a7, a8);
    v259 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpressionOrPropagateErrorClass<JSC::ASTBuilder>(a1, a2);
    if (v259)
    {
      v260 = v259;
      v261 = *(uint64_t **)(a2 + 8);
      v262 = *v261;
      v263 = v257;
      if ((unint64_t)(v261[1] - *v261) <= 0x47)
      {
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
        v263 = v257;
        v262 = *v261;
      }
      *v261 = v262 + 72;
      *(_DWORD *)(v262 + 8) = v252;
      *(int32x2_t *)(v262 + 12) = vrev64_s32(v338);
      *(_DWORD *)(v262 + 20) = -1;
      *(_BYTE *)(v262 + 24) = 0;
      *(_BYTE *)(v262 + 25) = 126;
      *(_BYTE *)(v262 + 26) = 0;
      *(_QWORD *)v262 = &off_1E35857C8;
      *(_QWORD *)(v262 + 64) = v260;
      *(_QWORD *)(v262 + 28) = *(_QWORD *)&v345[0];
      *(_DWORD *)(v262 + 36) = DWORD2(v345[0]);
      *(_QWORD *)(v262 + 52) = -1;
      *(_DWORD *)(v262 + 60) = -1;
      *(_DWORD *)(v262 + 48) = *(_DWORD *)&v342[8];
      *(_QWORD *)(v262 + 40) = *(_QWORD *)v342;
      v264 = *((_DWORD *)v263 + 2);
      *(_QWORD *)(v262 + 52) = *v263;
      *(_DWORD *)(v262 + 60) = v264;
      v265 = *(uint64_t **)(a2 + 8);
      result = *v265;
      if ((unint64_t)(v265[1] - *v265) <= 0x1F)
      {
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
        result = *v265;
      }
      *v265 = result + 32;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = v262;
      v59 = *(_WORD *)(result + 24) & 0x8000 | 0x20;
      goto LABEL_30;
    }
    if (*v10 != 20 && (*v10 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse subject of a spread operation");
      return 0;
    }
    goto LABEL_304;
  }
  a2 = v339;
  v19 = (uint64_t *)(a1 + 7444);
  v16 = a1 + 7344;
  if (v14 != 14)
    goto LABEL_57;
LABEL_208:
  v339 = a2;
  v22 = 0;
  v21 = 0;
  v341 = v17;
  v14 = 14;
LABEL_9:
  v23 = *(uint64_t **)(a1 + 7376);
  v24 = *(unsigned int *)(a1 + 7408);
  v327 = v15 == 0;
  v25 = &v341;
  if (v327)
    v25 = (int *)(a1 + 7420);
  v26 = *v25;
  if (v11 == 191488)
    v27 = v12;
  else
    v27 = v26;
  v28 = *(_DWORD *)(a1 + 7412);
  v336 = v19;
  if (v13 != 18
    && v21
    && ((v29 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952), *v23 == *(_QWORD *)(v29 + 1376))
     || *v23 == *(_QWORD *)(v29 + 2296)))
  {
    v80 = *(_DWORD *)(a1 + 7400);
    v81 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v80;
    *(_DWORD *)(a1 + 7448) = v28;
    *(_DWORD *)(a1 + 7452) = v81;
    v32 = *(unsigned int **)(a1 + 7288);
    v32[1] = v80;
    v33 = *(_DWORD *)(a1 + 12);
    if (!v33)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE5DBCLL);
    }
  }
  else
  {
    v30 = *(_DWORD *)(a1 + 7400);
    v31 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v30;
    *(_DWORD *)(a1 + 7448) = v28;
    *(_DWORD *)(a1 + 7452) = v31;
    v32 = *(unsigned int **)(a1 + 7288);
    v32[1] = v30;
    v33 = *(_DWORD *)(a1 + 12);
    if (!v33)
    {
      __break(0xC471u);
      JUMPOUT(0x197EE697CLL);
    }
  }
  v34 = v24;
  v35 = JSC::Lexer<char16_t>::lexExpectIdentifier(v32, (uint64_t)v340, 1u, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v33 - 1) + 9) & 1, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v35;
  if (((1 << v13) & 0x40400) != 0 || v35 != 18)
  {
    v63 = (_OWORD *)(a1 + 7400);
    if (v35 != 2)
    {
      if (v13 == 5)
      {
        if ((v22 & 1) != 0)
        {
          if (v35 == 6 || v35 == 1)
          {
            v64 = *(_DWORD *)(a1 + 12);
            if (!v64)
            {
              __break(0xC471u);
              JUMPOUT(0x197EE6E08);
            }
            v65 = v64 - 1;
            v66 = *(_QWORD *)a1;
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v65 + 9) & 1) != 0 && v14 == 532)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                *(_QWORD *)v342 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), v34, v28);
                *(_QWORD *)&v342[8] = v164;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[24],char const(&)[16]>(a1, (uint64_t)v342);
              }
              return 0;
            }
            if ((v14 - 531) <= 1)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                *(_QWORD *)v342 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), v34, v28);
                *(_QWORD *)&v342[8] = v157;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[24]>(a1, (uint64_t)v342);
              }
              return 0;
            }
            if ((v14 & 0x200) == 0)
              goto LABEL_46;
            if ((v14 - 544) >= 3)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                *(_QWORD *)v342 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), v34, v28);
                *(_QWORD *)&v342[8] = v166;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const(&)[24]>(a1, (uint64_t)v342);
              }
              return 0;
            }
            if (v14 == 546)
            {
              if (*v337 && (*(_DWORD *)(v66 + 720 * v65 + 10) & 0x102000) == 0 && *(_DWORD *)(a1 + 7480) != 1)
                goto LABEL_46;
              if (!*(_QWORD *)(a1 + 7360))
              {
                *(_QWORD *)v342 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
                v167 = "Cannot use 'await' as a ";
LABEL_158:
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const(&)[24],char const(&)[2],char const*>(a1, v167, (const char **)v342);
              }
            }
            else
            {
              if (v14 == 544)
              {
                if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v65 + 9) & 1) != 0)
                {
                  if (!*(_QWORD *)(a1 + 7360))
                  {
                    *(_QWORD *)v342 = "in strict mode";
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const(&)[24],char const(&)[2],char const*>(a1, (const char **)v342);
                  }
                  return 0;
                }
LABEL_46:
                *(_QWORD *)&v345[0] = *(_QWORD *)(a1 + 7416);
                DWORD2(v345[0]) = *(_DWORD *)(a1 + 7424);
                *(_OWORD *)v342 = *v63;
                JSC::Scope::useVariable(v66 + 720 * v65, *v23, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 1248) == *v23);
                v67 = *(_DWORD *)(a1 + 12);
                if (!v67)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EE6E10);
                }
                v68 = v67 - 1;
                if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v68 + 11) & 8) != 0)
                  *(_BYTE *)(*(_QWORD *)a1 + 720 * v68 + 32) |= 1u;
                *(int32x2_t *)&v69 = JSC::ASTBuilder::createResolve(v339, (uint64_t)v342, v23, (uint64_t *)v345, v336, 1);
                v71 = v70;
                if ((*(unsigned int (**)(_QWORD *, double))(*v70 + 152))(v70, v69))
                {
                  v105 = v71[4];
                  v106 = (_DWORD *)*v23;
                  if (*v23)
                    *v106 += 2;
                  v107 = *(WTF::StringImpl **)(v105 + 48);
                  *(_QWORD *)(v105 + 48) = v106;
                  if (v107)
                  {
                    if (*(_DWORD *)v107 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v107, v72, v73, v74, v75, v76, v77, v78);
                      WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
                    }
                    else
                    {
                      *(_DWORD *)v107 -= 2;
                    }
                  }
                }
                else if ((*(unsigned int (**)(_QWORD *))(*v71 + 176))(v71))
                {
                  v168 = (uint64_t *)v71[20];
                  if (!*v168)
                    v168 = v23;
                  v71[21] = v168;
                }
                v79 = *(uint64_t **)(v339 + 8);
                result = *v79;
                if ((unint64_t)(v79[1] - *v79) <= 0x1F)
                {
                  JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v339 + 8));
                  result = *v79;
                }
                *v79 = result + 32;
                *(_QWORD *)result = v23;
                *(_QWORD *)(result + 8) = 0;
                *(_QWORD *)(result + 16) = v71;
                v59 = *(_WORD *)(result + 24) & 0x8000 | 0x11;
                goto LABEL_30;
              }
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v65 + 9) & 1) == 0
                && (*(_BYTE *)(v66 + 720 * v65 + 11) & 2) == 0)
              {
                goto LABEL_46;
              }
              if (!*(_QWORD *)(a1 + 7360))
              {
                *(_QWORD *)v342 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierYieldReason(a1);
                v167 = "Cannot use 'yield' as a ";
                goto LABEL_158;
              }
            }
            return 0;
          }
          if (v35 == 21)
          {
            v154 = *(_DWORD **)(a1 + 7496);
            if (v154)
            {
              if (!*v154)
                *v154 = 1;
            }
          }
          if (v21)
          {
            v111 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
            if (*v23 == *(_QWORD *)(v111 + 1376))
            {
              v112 = 2;
              return JSC::Parser<JSC::Lexer<char16_t>>::parseGetterSetter<JSC::ASTBuilder>(a1, (uint64_t **)v339, v112, v34, 0, v37, v38, v39);
            }
            if (*v23 == *(_QWORD *)(v111 + 2296))
            {
              v112 = 4;
              return JSC::Parser<JSC::Lexer<char16_t>>::parseGetterSetter<JSC::ASTBuilder>(a1, (uint64_t **)v339, v112, v34, 0, v37, v38, v39);
            }
          }
          if (v35 != 20 && (v35 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              *(_QWORD *)v342 = *v23;
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[45],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)v342);
            }
            return 0;
          }
        }
        else if (v35 != 20 && (v35 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected an identifier as property name");
          return 0;
        }
LABEL_304:
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        return 0;
      }
      goto LABEL_265;
    }
    v90 = *(_BYTE *)(a1 + 7474);
    *(_BYTE *)(a1 + 7474) = v13;
    v345[0] = *v63;
    v344 = 0;
    v343 = 0u;
    *(_OWORD *)&v342[8] = 0u;
    *(_QWORD *)v342 = v23;
    if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(a1, v339, 2, 0, 0, 0, v27, (uint64_t)v342, 2, 0) & 1) != 0)
    {
      MethodDefinition = (_QWORD *)JSC::ASTBuilder::createMethodDefinition(v339, (uint64_t)v345, (uint64_t)v342, v91, v92, v93, v94, v95);
    }
    else
    {
      if (*v340 == 20 || (*v340 & 0x100000) != 0)
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      }
      else if (!*(_QWORD *)(a1 + 7360))
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse this method");
      }
      MethodDefinition = 0;
    }
    if (!*(_QWORD *)(a1 + 7360))
    {
      if ((*(unsigned int (**)(_QWORD *))(*MethodDefinition + 152))(MethodDefinition))
      {
        v108 = MethodDefinition[4];
        v109 = (_DWORD *)*v23;
        if (*v23)
          *v109 += 2;
        v110 = *(WTF::StringImpl **)(v108 + 48);
        *(_QWORD *)(v108 + 48) = v109;
        if (v110)
        {
          if (*(_DWORD *)v110 == 2)
          {
            WTF::StringImpl::~StringImpl(v110, v97, v98, v99, v100, v101, v102, v103);
            WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
          }
          else
          {
            *(_DWORD *)v110 -= 2;
          }
        }
      }
      else if ((*(unsigned int (**)(_QWORD *))(*MethodDefinition + 176))(MethodDefinition))
      {
        v169 = (uint64_t *)MethodDefinition[20];
        if (!*v169)
          v169 = v23;
        MethodDefinition[21] = v169;
      }
      v104 = *(uint64_t **)(v339 + 8);
      result = *v104;
      if ((unint64_t)(v104[1] - *v104) <= 0x1F)
      {
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v339 + 8));
        result = *v104;
      }
      *v104 = result + 32;
      *(_QWORD *)result = v23;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = MethodDefinition;
      *(_WORD *)(result + 24) = *(_WORD *)(result + 24) & 0x8000 | 0x801;
      goto LABEL_70;
    }
    goto LABEL_290;
  }
  v40 = *(_DWORD *)(a1 + 7400);
  v41 = *(_DWORD *)(a1 + 7412);
  v42 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v40;
  *(_DWORD *)(a1 + 7448) = v41;
  *(_DWORD *)(a1 + 7452) = v42;
  v43 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v43 + 4) = v40;
  v44 = *(_DWORD *)(a1 + 12);
  if (!v44)
  {
    __break(0xC471u);
    JUMPOUT(0x197EE6984);
  }
  v45 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v44 - 1) + 9) & 1;
  *(_BYTE *)(v43 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v43, (uint64_t)v340, 0, v45, v36, v37, v38, v39);
  *(_DWORD *)v342 = 0;
  *(_QWORD *)&v342[8] = *(_QWORD *)(a1 + 7496);
  *(_QWORD *)&v342[16] = a1;
  *(_QWORD *)(a1 + 7496) = v342;
  v46 = (_DWORD *)JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, v339, v342);
  v47 = *(_QWORD *)&v342[8];
  if (!v46)
  {
    if (*(_QWORD *)&v342[8])
      **(_DWORD **)&v342[8] = *(_DWORD *)v342;
    *(_QWORD *)(*(_QWORD *)&v342[16] + 7496) = v47;
    v156 = *v340;
    goto LABEL_115;
  }
  v48 = v46;
  *(_QWORD *)(*(_QWORD *)&v342[16] + 7496) = *(_QWORD *)&v342[8];
  v46[5] = (*(_QWORD *)(*(_QWORD *)(a1 + 7288) + 80) - *(_QWORD *)(*(_QWORD *)(a1 + 7288) + 88)) >> 1;
  if (v23)
  {
    if (*v23 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 16))
    {
      if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v46 + 152))(v46))
      {
        v60 = v48[4];
        v61 = (_DWORD *)*v23;
        if (*v23)
          *v61 += 2;
        v62 = *(WTF::StringImpl **)(v60 + 48);
        *(_QWORD *)(v60 + 48) = v61;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
          {
            WTF::StringImpl::~StringImpl(v62, v49, v50, v51, v52, v53, v54, v55);
            WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
          }
          else
          {
            *(_DWORD *)v62 -= 2;
          }
        }
      }
      else if ((*(unsigned int (**)(_QWORD *))(*v48 + 176))(v48))
      {
        v165 = (uint64_t *)v48[20];
        if (!*v165)
          v165 = v23;
        v48[21] = v165;
      }
    }
    v56 = *(_QWORD *)(v339 + 8);
    result = *(_QWORD *)v56;
    v58 = *(_QWORD *)(v56 + 8);
    if ((unint64_t)(v58 - *(_QWORD *)v56) <= 0x1F)
    {
      if (v58)
      {
        v135 = (_QWORD *)(v56 + 24);
        v136 = v58 - 8000;
        *(_QWORD *)v342 = v58 - 8000;
        v137 = *(unsigned int *)(v56 + 36);
        if ((_DWORD)v137 == *(_DWORD *)(v56 + 32))
        {
          v155 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v135, v137 + 1, (unint64_t)v342);
          v137 = *(unsigned int *)(v56 + 36);
          *(_QWORD *)(*(_QWORD *)(v56 + 24) + 8 * v137) = *v155;
        }
        else
        {
          *(_QWORD *)(*v135 + 8 * v137) = v136;
        }
        *(_DWORD *)(v56 + 36) = v137 + 1;
      }
      result = WTF::fastMalloc((WTF *)0x1F40);
      *(_QWORD *)(v56 + 8) = result + 8000;
    }
    *(_QWORD *)v56 = result + 32;
    *(_QWORD *)result = v23;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = v48;
    goto LABEL_29;
  }
  return JSC::ASTBuilder::createProperty(v339, 0, v46, 1, 1, 0, 0);
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpressionOrPropagateErrorClass<JSC::ASTBuilder>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _DWORD *v3;
  int v4;
  _DWORD *v5;
  uint64_t v6;

  v4 = 0;
  v5 = *(_DWORD **)(a1 + 7496);
  v6 = a1;
  *(_QWORD *)(a1 + 7496) = &v4;
  result = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, &v4);
  v3 = v5;
  if (!result && v5)
    *v5 = v4;
  *(_QWORD *)(v6 + 7496) = v3;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parsePropertyMethod<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int v17;
  __int128 v18;

  v18 = *(_OWORD *)(a1 + 7400);
  v17 = 0;
  v16 = 0u;
  v15 = 0u;
  v14 = a3;
  if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 2, 0, 0, 0, a4, (uint64_t)&v14, 2, 0) & 1) != 0)return JSC::ASTBuilder::createMethodDefinition(a2, (uint64_t)&v18, (uint64_t)&v14, v6, v7, v8, v9, v10);
  v12 = *(_DWORD *)(a1 + 7368);
  if (v12 != 20 && (v12 & 0x100000) == 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse this method");
  }
  else
  {
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
  }
  return 0;
}

double JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int32x2_t *v10;
  int v12;
  __n128 *v13;
  __int128 v14;
  unsigned int *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int *v20;
  int v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  _BOOL4 v37;
  unsigned int v38;
  int32x2_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  BOOL v50;
  uint64_t v51;
  unsigned int v52;
  char v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (**v64)(JSC::BitwiseNotNode *__hidden);
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  double v73;
  double v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  void (**v82)(JSC::VoidNode *__hidden);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  BOOL v91;
  int v92;
  uint64_t *v93;
  int v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  _OWORD *v98;
  __int128 v99;
  unsigned int v100;
  uint64_t v101;
  __int128 v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  __int32 v112;
  int v113;
  char v114;
  _QWORD *v115;
  int v116;
  __int32 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  const char *v144;
  int v145;
  int v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  unsigned int v168;
  _QWORD *AssignNode;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  int v178;
  unsigned int v179;
  uint64_t v180;
  int v181;
  int v182;
  int v183;
  uint64_t v184;
  int v185;
  uint64_t *v186;
  uint64_t v187;
  unsigned int v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  unsigned int v194;
  uint64_t v195;
  __int128 v196;
  unsigned int v197;
  __int128 v198;
  unsigned __int8 v199;
  uint64_t v200;
  BOOL v201;
  unsigned int v202;
  uint64_t v203;
  __int128 v204;
  int v205;
  uint64_t v206;
  _DWORD *v207;
  unsigned int v208;
  _QWORD *v209;
  __int128 v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  int v215;
  uint64_t *v216;
  uint64_t v217;
  int v218;
  char v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  double v225;
  unint64_t v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  __int8 v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  int v240;
  int v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  int v249;
  __int128 *v250;
  int32x4_t v251;
  uint64_t v252;
  char v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  __int16 *v260;
  __int16 v261;
  uint64_t v262;
  int v263;
  int v264;
  int v265;
  int v266;
  WTF::AtomStringImpl *v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  _QWORD *v271;
  WTF::StringImpl *v272;
  int v273;
  int v274;
  int v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  int v281;
  int v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char v300;
  char v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  char v308;
  int v309;
  int v310;
  int v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  int v317;
  int v318;
  int v319;
  uint64_t v320;
  int v321;
  uint64_t v322;
  int v323;
  _BOOL4 v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  WTF::AtomStringImpl *v339;
  int v340;
  uint64_t v341;
  WTF::StringImpl *v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  __int16 *v346;
  __int16 v347;
  unsigned int v348;
  char v349;
  uint64_t v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  _QWORD *v356;
  WTF::StringImpl *v357;
  char v358;
  int v359;
  unsigned int v360;
  uint64_t v361;
  unsigned int v362;
  _DWORD *v363;
  unsigned int v364;
  uint64_t *v365;
  BOOL v366;
  uint64_t v367;
  unint64_t *v368;
  char v369;
  __int8 v370;
  int v371;
  WTF::StringImpl *v372;
  WTF::StringImpl *v373;
  int v374;
  int v375;
  int v376;
  int v377;
  uint64_t v378;
  int v379;
  uint64_t v380;
  int v381;
  int32x4_t v382;
  uint64_t v383;
  char v384;
  char v385;
  WTF::StringImpl *v386;
  WTF::StringImpl *v387;
  WTF::StringImpl *v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  __int16 *v392;
  __int16 v393;
  uint64_t v394;
  int v395;
  int v396;
  int v397;
  int v398;
  WTF::AtomStringImpl *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  int v406;
  _QWORD *v407;
  WTF::StringImpl *v408;
  uint64_t v409;
  WTF::AtomStringImpl *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  int v418;
  int v419;
  int v420;
  int v421;
  uint64_t v422;
  int v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  JSC::ParserArena *v427;
  uint64_t v428;
  WTF::StringImpl *v429;
  unint64_t v430;
  void *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  void *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  void *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  void *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  int v464;
  int v465;
  int v466;
  uint64_t v467;
  WTF::AtomStringImpl *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  int v475;
  uint64_t v476;
  WTF::StringImpl *v477;
  uint64_t v478;
  unint64_t v479;
  __int16 *v480;
  __int16 v481;
  int v482;
  char v483;
  uint64_t v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  _QWORD *v490;
  WTF::StringImpl *v491;
  unint64_t v492;
  void *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  void *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  void *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v516;
  void *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  unint64_t v524;
  void *v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  unint64_t v532;
  void *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  _QWORD *v540;
  uint64_t v541;
  uint64_t v542;
  _QWORD *v543;
  uint64_t v544;
  uint64_t v545;
  int v546;
  int v547;
  int v548;
  uint64_t v549;
  int v550;
  uint64_t v551;
  int v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  int v558;
  int v559;
  int v560;
  int v561;
  uint64_t v562;
  _OWORD *v563;
  __int128 v564;
  __int128 v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  unint64_t v578;
  void *v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  unint64_t v586;
  void *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  _QWORD *v594;
  uint64_t v595;
  uint64_t v596;
  _QWORD *v597;
  uint64_t v598;
  uint64_t v599;
  _QWORD *v600;
  uint64_t v601;
  uint64_t v602;
  _QWORD *v603;
  uint64_t v604;
  uint64_t v605;
  _QWORD *v606;
  uint64_t v607;
  uint64_t v608;
  BOOL isAllowedIdentifierLet;
  int v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  int v616;
  int v617;
  int v618;
  int v619;
  uint64_t v620;
  _OWORD *v621;
  __int128 v622;
  __int128 v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  _QWORD *v636;
  uint64_t v637;
  uint64_t v638;
  __int128 *v639;
  const char *v640;
  _QWORD *v641;
  uint64_t v642;
  uint64_t v643;
  _QWORD *v644;
  _QWORD *v645;
  uint64_t v646;
  uint64_t v647;
  __int128 v648;
  __int128 v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  __int128 v653;
  _QWORD *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  int v662;
  int v663;
  int v664;
  int v665;
  uint64_t v666;
  _OWORD *v667;
  __int128 v668;
  __int128 v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  _QWORD *v682;
  uint64_t v683;
  uint64_t v684;
  _QWORD *v685;
  uint64_t v686;
  uint64_t v687;
  _QWORD *v688;
  _QWORD *v689;
  _QWORD *v690;
  _QWORD *v691;
  _QWORD *v692;
  _QWORD *v693;
  _QWORD *v694;
  _QWORD *v695;
  char v696;
  uint64_t v697;
  char v698;
  uint64_t v699;
  _QWORD *v700;
  _QWORD *v701;
  int v702;
  const char *v703;
  int v704;
  const char *v705;
  int v706;
  int v707;
  unsigned int v708;
  int v709;
  uint64_t *v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  int v715;
  int v716;
  int v717;
  uint64_t v718;
  int v719;
  uint64_t v720;
  int v721;
  _QWORD *v722;
  uint64_t v723;
  int v724;
  int v725;
  int v726;
  uint64_t v727;
  unint64_t v728;
  uint64_t v729;
  uint64_t v730;
  __int128 v731;
  int v732;
  int v733;
  int v734;
  uint64_t v735;
  int v736;
  uint64_t v737;
  void *v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  unint64_t v745;
  uint64_t v746;
  uint64_t v747;
  int v748;
  int v749;
  unsigned int v750;
  int v751;
  const char *v752;
  uint64_t v754;
  int v755;
  _BOOL4 v756;
  _QWORD *v757;
  int v758;
  int v759;
  int v760;
  _OWORD *v761;
  uint64_t v762;
  uint64_t v763;
  int v764;
  int v765;
  int v766;
  int v767;
  int v768;
  int v769;
  _DWORD *v770;
  unint64_t v771;
  int v772;
  int v773;
  int v774;
  __n128 *i;
  int v776;
  _QWORD *v777;
  uint64_t v778;
  uint64_t v779;
  int v780;
  WTF::StringImpl **v781;
  unsigned int v782;
  __int32 v783;
  _BYTE *v784;
  _BYTE *v785;
  _BYTE *v786;
  int v787;
  _QWORD *v788;
  uint64_t v789;
  int32x4_t v790;
  uint64_t v791;
  __int128 v792;
  _BYTE v793[72];
  char v794;
  char v795;
  WTF::StringImpl *v796;
  WTF::StringImpl *v797;
  __int128 v798;
  uint64_t v799;
  __int128 v800;
  __int128 v801;
  uint64_t v802;
  int v803;
  uint64_t v804;
  int v805;
  __n128 v806;
  int v807;
  _BYTE v808[32];
  int v809;
  __int128 v810;
  _BYTE v811[28];
  char v812;
  __int16 v813;
  char v814;
  _BYTE v815[48];
  __int128 v816;
  _OWORD v817[2];
  __int128 v818;
  _BYTE v819[28];
  uint64_t v820;

  v770 = (_DWORD *)a3;
  v820 = *MEMORY[0x1E0C80C00];
  v10 = (int32x2_t *)(a1 + 7300);
  if ((unint64_t)&v754 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v10[6].i8[4] = 1;
    }
    return a9.n128_f64[0];
  }
  v787 = *(_DWORD *)(a1 + 7368);
  v12 = v787;
  if (v787 == 545)
  {
    v707 = *(_DWORD *)(a1 + 12);
    if (!v707)
    {
      __break(0xC471u);
      JUMPOUT(0x197EEB694);
    }
    v708 = v707 - 1;
    v12 = v787;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v708 + 9) & 1) != 0
      || (*(_BYTE *)(*(_QWORD *)a1 + 720 * v708 + 11) & 2) != 0)
    {
      a9.n128_f64[0] = JSC::Parser<JSC::Lexer<char16_t>>::parseYieldExpression<JSC::ASTBuilder>(a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      return a9.n128_f64[0];
    }
  }
  v802 = *(_QWORD *)(a1 + 7416);
  v803 = *(_DWORD *)(a1 + 7424);
  v13 = (__n128 *)(a1 + 7400);
  v14 = *(_OWORD *)(a1 + 7400);
  v15 = (unsigned int *)(a1 + 7296);
  v774 = *(_DWORD *)(a1 + 7296);
  v783 = *(_DWORD *)(a1 + 7300);
  v800 = *(_OWORD *)(a1 + 7296);
  v801 = v14;
  v16 = *(_DWORD *)(a1 + 7316);
  v798 = *(_OWORD *)(a1 + 7320);
  v799 = *(_QWORD *)(a1 + 7336);
  v768 = *(unsigned __int8 *)(a1 + 7344);
  v769 = v16;
  v17 = *(unsigned __int8 *)(a1 + 7345);
  v772 = *((_DWORD *)a2 + 263);
  v18 = *(_DWORD *)(a1 + 7408);
  v19 = *(_DWORD *)(a1 + 7404);
  v20 = *(int **)(a1 + 7288);
  v766 = v20[1];
  v767 = v17;
  v21 = *v20;
  v764 = *((unsigned __int8 *)v20 + 56);
  v765 = v21;
  if (v12 == 2)
  {
    v205 = *(_DWORD *)(a1 + 12);
    if (!v205)
    {
      __break(0xC471u);
      JUMPOUT(0x197EEB584);
    }
    v206 = *(_QWORD *)a1 + 720 * (v205 - 1);
    v208 = *(_DWORD *)(v206 + 180);
    v207 = (_DWORD *)(v206 + 180);
    v771 = v208;
    v209 = v207 - 3;
    *(_QWORD *)v793 = 0x800000000;
    *(_QWORD *)&v210 = -1;
    *((_QWORD *)&v210 + 1) = -1;
    *(_OWORD *)&v793[8] = v210;
    *(_OWORD *)&v793[24] = v210;
    *(_OWORD *)&v793[40] = v210;
    *(_OWORD *)&v793[56] = v210;
    v211 = *v207;
    if ((_DWORD)v211 == *(v207 - 1))
    {
      v646 = WTF::Vector<WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v207 - 3), (void *)(v211 + 1), (unint64_t)v793, a4, (uint64_t)a5, a6, a7, a8);
      v647 = *v209 + 72 * *v207;
      *(_OWORD *)v647 = *(_OWORD *)v646;
      v14 = *(_OWORD *)(v646 + 32);
      v648 = *(_OWORD *)(v646 + 48);
      v649 = *(_OWORD *)(v646 + 16);
      *(_QWORD *)(v647 + 64) = *(_QWORD *)(v646 + 64);
      *(_OWORD *)(v647 + 32) = v14;
      *(_OWORD *)(v647 + 48) = v648;
      *(_OWORD *)(v647 + 16) = v649;
      *(_QWORD *)v646 = 0x800000000;
      *(_QWORD *)&v648 = -1;
      *((_QWORD *)&v648 + 1) = -1;
      *(_OWORD *)(v646 + 56) = v648;
      *(_OWORD *)(v646 + 40) = v648;
      *(_OWORD *)(v646 + 24) = v648;
      *(_OWORD *)(v646 + 8) = v648;
      ++*v207;
      if (*(_DWORD *)&v793[4] != 8)
        WTF::fastFree(*(unint64_t *)&v793[8], a2, a3, a4, (uint64_t)a5, a6, a7, a8);
    }
    else
    {
      v212 = *v209 + 72 * v211;
      *(_OWORD *)v212 = *(_OWORD *)v793;
      v213 = *(_OWORD *)&v793[16];
      v14 = *(_OWORD *)&v793[32];
      v214 = *(_OWORD *)&v793[48];
      *(_QWORD *)(v212 + 64) = *(_QWORD *)&v793[64];
      *(_OWORD *)(v212 + 32) = v14;
      *(_OWORD *)(v212 + 48) = v214;
      *(_OWORD *)(v212 + 16) = v213;
      ++*v207;
    }
    v215 = *(_DWORD *)(a1 + 7404);
    v759 = *(_DWORD *)(a1 + 7408);
    v760 = v215;
  }
  else
  {
    v771 = 0;
    v759 = v18;
    v760 = v19;
  }
  LODWORD(v789) = 0;
  LODWORD(v778) = 0;
  v773 = 0;
  LODWORD(v22) = 0;
  v23 = (int *)(a1 + 7368);
  v24 = a1 + 7416;
  v761 = (_OWORD *)(a1 + 7316);
  v777 = (_QWORD *)(a1 + 7320);
  v762 = v19;
  v763 = v18;
  v758 = *(_DWORD *)(a1 + 7400);
  v807 = 0;
  a9 = *v13;
  v806 = *v13;
  v781 = (WTF::StringImpl **)(a1 + 7360);
  v790.i64[0] = a1 + 7444;
  v757 = a2 + 4;
  v785 = &v815[24];
  v786 = &v815[12];
  v784 = &v793[8];
  v791 = a1 + 7296;
  *(_QWORD *)&v792 = a1 + 7416;
  for (i = (__n128 *)(a1 + 7400); ; v13 = i)
  {
    v804 = *(_QWORD *)v24;
    v805 = *(_DWORD *)(v24 + 8);
    v25 = *v15;
    v776 = *v23;
    v26 = v776;
    if (v776 != 13)
    {
      LODWORD(v788) = v10[17].u8[4];
      v10[17].i8[4] = 1;
      if (v26 != 546)
        goto LABEL_15;
      v27 = *(_DWORD *)(a1 + 12);
      if (!v27)
      {
        __break(0xC471u);
        JUMPOUT(0x197EEB458);
      }
      v28 = *(_DWORD *)(a1 + 12);
      while (1)
      {
        v29 = v28;
        if (v28 == 1)
          break;
        --v28;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v29 - 1) + 12) & 0x40) != 0)
          goto LABEL_12;
      }
      v28 = 0;
LABEL_12:
      if (v27 <= v29 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197EEB3F0);
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v28 + 11) & 0x40) != 0 || ((1 << v10[21].i8[6]) & 0x6000) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v27 - 1) + 12) & 0x10) == 0)
        {
          v35 = (_QWORD *)JSC::Parser<JSC::Lexer<char16_t>>::parseAwaitExpression<JSC::ASTBuilder>(a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
          goto LABEL_117;
        }
        if (!*v781)
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' within static block");
      }
      else
      {
LABEL_15:
        v782 = v25;
        *(__n128 *)v815 = *v13;
        if ((v26 & 0x100) != 0)
        {
          v30 = 1;
          do
          {
            v31 = v26;
            v38 = v26 & 0xFFFFFFFC;
            v32 = (v26 & 0xFFFFFFFC) == 256;
            ++v10->i32[0];
            v39 = v10[15];
            *(_DWORD *)v793 = v26;
            *(_DWORD *)&v793[4] = *(_DWORD *)v792;
            *(int32x2_t *)&v793[8] = v39;
            v40 = *((unsigned int *)a2 + 263);
            if ((_DWORD)v40 == *((_DWORD *)a2 + 262))
            {
              v639 = (__int128 *)WTF::Vector<std::pair<int,JSC::JSTextPosition>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a2 + 130), (void *)(v40 + 1), (unint64_t)v793, a4, (uint64_t)a5, a6, a7, a8);
              v40 = *((unsigned int *)a2 + 263);
              v41 = a2[130];
              v42 = *v639;
            }
            else
            {
              v41 = a2[130];
              v42 = *(_OWORD *)v793;
            }
            *(_OWORD *)(v41 + 16 * v40) = v42;
            ++*((_DWORD *)a2 + 263);
            v43 = *(_DWORD *)(a1 + 7400);
            v44 = *(_DWORD *)(a1 + 7412);
            v45 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v43;
            *(_DWORD *)(a1 + 7448) = v44;
            *(_DWORD *)(a1 + 7452) = v45;
            v46 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v46 + 4) = v43;
            v47 = *(_DWORD *)(a1 + 12);
            if (!v47)
            {
              __break(0xC471u);
              JUMPOUT(0x197EEB2B0);
            }
            v48 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v47 - 1) + 9) & 1;
            *(_BYTE *)(v46 + 56) = 0;
            v26 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v46, a1 + 7368, 0, v48, (uint64_t)a5, a6, a7, a8);
            *(_DWORD *)(a1 + 7368) = v26;
            ++*(_DWORD *)(a1 + 7304);
            if ((v26 & 0x100) == 0)
              goto LABEL_17;
            ++v30;
          }
          while (v38 != 256);
          if (*v781)
            goto LABEL_220;
          v25 = v782;
          if ((v31 - 256) >= 4)
          {
            __break(0xC471u);
            JUMPOUT(0x197EEB2A8);
          }
          *(_QWORD *)v793 = off_1E357B318[v31 - 256];
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[5],char const*,char const(&)[42]>(a1, (const char **)v793);
          goto LABEL_35;
        }
        v30 = 0;
        v31 = 0;
        v32 = 0;
LABEL_17:
        LODWORD(v779) = *(_DWORD *)(a1 + 7416);
        v780 = *(_DWORD *)(a1 + 7420);
        v33 = *(_DWORD *)(a1 + 7424);
        v34 = JSC::Parser<JSC::Lexer<char16_t>>::parseMemberExpression<JSC::ASTBuilder>(a1, (JSC::ASTBuilder *)a2, a3, a4, a5, a6, a7, a8);
        if (v34)
        {
          v35 = (_QWORD *)v34;
          if ((v31 & 0xFFFFFFFC) == 0x100)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 256))(v34))
            {
              if (!*v781)
              {
                *(_QWORD *)v793 = JSC::Parser<JSC::Lexer<char16_t>>::metaPropertyName<JSC::ASTBuilder>((uint64_t)v35);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[36]>(a1, (const char **)v793);
              }
              goto LABEL_220;
            }
            if (((*(uint64_t (**)(_QWORD *))(*v35 + 88))(v35) & 1) == 0)
            {
              v702 = *(_DWORD *)(a1 + 12);
              if (!v702)
              {
                __break(0xC471u);
                JUMPOUT(0x197EEB400);
              }
              v15 = (unsigned int *)v791;
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v702 - 1) + 9) & 1) != 0
                || ((*(uint64_t (**)(_QWORD *))(*v35 + 296))(v35) & 1) == 0)
              {
                if (!*v781)
                {
                  if ((v31 & 0xFFFFFFFD) == 0x100)
                    v703 = "++";
                  else
                    v703 = "--";
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[8],char const(&)[3],char const(&)[51]>(a1, v703);
                }
                goto LABEL_591;
              }
            }
          }
          v36 = *(_DWORD *)(a1 + 12);
          if (!v36)
          {
            __break(0xC471u);
            JUMPOUT(0x197EEB450);
          }
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v36 - 1) + 9) & 1) != 0
            && (*(unsigned int (**)(_QWORD *))(*v35 + 112))(v35))
          {
            v141 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
            v142 = **(_QWORD **)(a1 + 7320);
            v37 = v142 == *(_QWORD *)(v141 + 1248) || v142 == *(_QWORD *)(v141 + 880);
            if (v32 && v37)
            {
              v143 = *(_DWORD *)(a1 + 12);
              if (!v143)
              {
                __break(0xC471u);
                JUMPOUT(0x197EEB3F8);
              }
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v143 - 1) + 9) & 1) != 0)
              {
                if (*v781)
                  goto LABEL_220;
                goto LABEL_219;
              }
              v37 = 1;
            }
          }
          else
          {
            v37 = 0;
          }
          if (*v23 == 257)
          {
            v756 = v37;
            if (!(*(unsigned int (**)(_QWORD *))(*v35 + 256))(v35))
            {
              if (((*(uint64_t (**)(_QWORD *))(*v35 + 88))(v35) & 1) == 0)
              {
                v706 = *(_DWORD *)(a1 + 12);
                if (!v706)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EEB418);
                }
                if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v706 - 1) + 9) & 1) != 0
                  || ((*(uint64_t (**)(_QWORD *))(*v35 + 296))(v35) & 1) == 0)
                {
                  if (!*v781)
                  {
                    v705 = "Postfix -- operator applied to value that is not a reference";
                    goto LABEL_656;
                  }
LABEL_591:
                  v35 = 0;
                  v15 = (unsigned int *)v791;
                  goto LABEL_116;
                }
              }
              v755 = v33;
              *v10 = vadd_s32(*v10, (int32x2_t)0x100000001);
              if ((*(unsigned int (**)(_QWORD *, _QWORD))(*v35 + 336))(v35, *a2))
                *((_DWORD *)a2 + 6) |= 2u;
              v131 = a2[1];
              v120 = *(_QWORD *)v131;
              v132 = *(_QWORD *)(v131 + 8);
              if ((unint64_t)(v132 - *(_QWORD *)v131) <= 0x57)
              {
                if (v132)
                {
                  v685 = (_QWORD *)(v131 + 24);
                  v686 = v132 - 8000;
                  *(_QWORD *)v793 = v132 - 8000;
                  v687 = *(unsigned int *)(v131 + 36);
                  if ((_DWORD)v687 == *(_DWORD *)(v131 + 32))
                  {
                    v701 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v685, v687 + 1, (unint64_t)v793);
                    v687 = *(unsigned int *)(v131 + 36);
                    *(_QWORD *)(*(_QWORD *)(v131 + 24) + 8 * v687) = *v701;
                  }
                  else
                  {
                    *(_QWORD *)(*v685 + 8 * v687) = v686;
                  }
                  *(_DWORD *)(v131 + 36) = v687 + 1;
                }
                v120 = WTF::fastMalloc((WTF *)0x1F40);
                *(_QWORD *)(v131 + 8) = v120 + 8000;
              }
              *(_QWORD *)v131 = v120 + 88;
              *(_DWORD *)(v120 + 8) = *(_DWORD *)v815;
              a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v815[4]);
              *(_QWORD *)(v120 + 12) = a9.n128_u64[0];
              *(_DWORD *)(v120 + 20) = -1;
              *(_BYTE *)(v120 + 24) = 0;
              *(_QWORD *)v120 = off_1E3583CB8;
              *(_BYTE *)(v120 + 25) = 126;
              *(_BYTE *)(v120 + 26) = 0;
              v133 = *(_DWORD *)(v790.i64[0] + 8);
              *(_QWORD *)(v120 + 28) = *(_QWORD *)v790.i64[0];
              v134 = v779;
              *(_DWORD *)(v120 + 36) = v133;
              *(_DWORD *)(v120 + 40) = v134;
              v135 = v755;
              *(_DWORD *)(v120 + 44) = v780;
              *(_DWORD *)(v120 + 48) = v135;
              v136 = *(_QWORD *)(a1 + 7428);
              *(_DWORD *)(v120 + 60) = *(_DWORD *)(a1 + 7436);
              *(_QWORD *)(v120 + 52) = v136;
              *(_QWORD *)(v120 + 64) = 0;
              *(_QWORD *)(v120 + 72) = v35;
              *(_BYTE *)(v120 + 80) = 6;
              *(_QWORD *)v120 = &off_1E3586CE0;
              ++*(_DWORD *)(a1 + 7296);
              v15 = (unsigned int *)v791;
              if (!v756)
                goto LABEL_166;
              v137 = *(_DWORD *)(a1 + 12);
              if (!v137)
              {
                __break(0xC471u);
                JUMPOUT(0x197EEB428);
              }
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v137 - 1) + 9) & 1) == 0)
              {
LABEL_166:
                if (!v32)
                {
                  v138 = *(_DWORD *)(a1 + 7400);
                  v139 = *(_DWORD *)(a1 + 7412);
                  v140 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v138;
                  *(_DWORD *)(a1 + 7448) = v139;
                  *(_DWORD *)(a1 + 7452) = v140;
                  v129 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v129 + 4) = v138;
                  v130 = *(_DWORD *)(a1 + 12);
                  if (!v130)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EE8258);
                  }
                  goto LABEL_47;
                }
                if (*v781)
                  goto LABEL_591;
                if (v31 <= 773)
                {
                  v640 = "logical-not";
                  switch(v31)
                  {
                    case 256:
                    case 258:
LABEL_562:
                      v640 = "increment";
                      goto LABEL_590;
                    case 257:
                    case 259:
LABEL_589:
                      v640 = "decrement";
                      goto LABEL_590;
                    case 260:
                      goto LABEL_590;
                    case 261:
LABEL_607:
                      v640 = "bitwise-not";
                      goto LABEL_590;
                    default:
                      goto LABEL_773;
                  }
                }
                if (v31 != 774)
                {
                  if (v31 != 775)
                  {
                    if (v31 != 776)
                    {
LABEL_773:
                      __break(0xC471u);
                      JUMPOUT(0x197EEB448);
                    }
                    goto LABEL_600;
                  }
LABEL_606:
                  v640 = "void";
                  goto LABEL_590;
                }
LABEL_605:
                v640 = "typeof";
                goto LABEL_590;
              }
              if (!*v781)
              {
                *(_QWORD *)v793 = **(_QWORD **)(a1 + 7320);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[2],WTF::UniquedStringImpl *,char const(&)[36]>(a1, (uint64_t *)v793);
              }
LABEL_220:
              v35 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            if (*v23 != 256)
            {
LABEL_48:
              *(_QWORD *)v793 = *(_QWORD *)v790.i64[0];
              *(_DWORD *)&v793[8] = *(_DWORD *)(v790.i64[0] + 8);
              if (v30)
              {
                v52 = *((_DWORD *)a2 + 263);
                do
                {
                  v54 = a2[130] + 16 * v52;
                  v55 = *(_DWORD *)(v54 - 16);
                  if (v55 > 773)
                  {
                    if (v55 <= 775)
                    {
                      if (v55 == 774)
                      {
                        v67 = (*(uint64_t (**)(_QWORD *))(*v35 + 112))(v35);
                        v68 = a2[1];
                        v60 = *(_QWORD *)v68;
                        v69 = *(_QWORD *)(v68 + 8);
                        v70 = v69 - *(_QWORD *)v68;
                        if (v67)
                        {
                          if (v70 <= 0x27)
                          {
                            if (v69)
                            {
                              v606 = (_QWORD *)(v68 + 24);
                              v607 = v69 - 8000;
                              *(_QWORD *)&v810 = v607;
                              v608 = *(unsigned int *)(v68 + 36);
                              if ((_DWORD)v608 == *(_DWORD *)(v68 + 32))
                              {
                                v692 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v606, v608 + 1, (unint64_t)&v810);
                                v608 = *(unsigned int *)(v68 + 36);
                                *(_QWORD *)(*(_QWORD *)(v68 + 24) + 8 * v608) = *v692;
                              }
                              else
                              {
                                *(_QWORD *)(*v606 + 8 * v608) = v607;
                              }
                              *(_DWORD *)(v68 + 36) = v608 + 1;
                            }
                            v60 = WTF::fastMalloc((WTF *)0x1F40);
                            *(_QWORD *)(v68 + 8) = v60 + 8000;
                            v15 = (unsigned int *)v791;
                          }
                          *(_QWORD *)v68 = v60 + 40;
                          v71 = v35[4];
                          *(_DWORD *)(v60 + 8) = *(_DWORD *)v815;
                          a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v815[4]);
                          *(_QWORD *)(v60 + 12) = a9.n128_u64[0];
                          *(_DWORD *)(v60 + 20) = -1;
                          *(_BYTE *)(v60 + 24) = 0;
                          *(_BYTE *)(v60 + 25) = 4;
                          *(_BYTE *)(v60 + 26) = 0;
                          *(_QWORD *)v60 = &off_1E35875F8;
                          *(_QWORD *)(v60 + 32) = v71;
                          goto LABEL_52;
                        }
                        if (v70 <= 0x27)
                        {
                          if (v69)
                          {
                            v654 = (_QWORD *)(v68 + 24);
                            v655 = v69 - 8000;
                            *(_QWORD *)&v810 = v655;
                            v656 = *(unsigned int *)(v68 + 36);
                            if ((_DWORD)v656 == *(_DWORD *)(v68 + 32))
                            {
                              v695 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v654, v656 + 1, (unint64_t)&v810);
                              v656 = *(unsigned int *)(v68 + 36);
                              *(_QWORD *)(*(_QWORD *)(v68 + 24) + 8 * v656) = *v695;
                            }
                            else
                            {
                              *(_QWORD *)(*v654 + 8 * v656) = v655;
                            }
                            *(_DWORD *)(v68 + 36) = v656 + 1;
                          }
                          v60 = WTF::fastMalloc((WTF *)0x1F40);
                          *(_QWORD *)(v68 + 8) = v60 + 8000;
                          v15 = (unsigned int *)v791;
                        }
                        *(_QWORD *)v68 = v60 + 40;
                        *(_DWORD *)(v60 + 8) = *(_DWORD *)v815;
                        a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v815[4]);
                        *(_QWORD *)(v60 + 12) = a9.n128_u64[0];
                        *(_DWORD *)(v60 + 20) = -1;
                        *(_BYTE *)(v60 + 24) = 0;
                        *(_BYTE *)(v60 + 25) = 4;
                        *(_BYTE *)(v60 + 26) = 0;
                        v82 = &off_1E3587778;
                      }
                      else
                      {
                        ++*((_DWORD *)a2 + 7);
                        v80 = a2[1];
                        v60 = *(_QWORD *)v80;
                        v81 = *(_QWORD *)(v80 + 8);
                        if ((unint64_t)(v81 - *(_QWORD *)v80) <= 0x27)
                        {
                          if (v81)
                          {
                            v597 = (_QWORD *)(v80 + 24);
                            v598 = v81 - 8000;
                            *(_QWORD *)&v810 = v81 - 8000;
                            v599 = *(unsigned int *)(v80 + 36);
                            if ((_DWORD)v599 == *(_DWORD *)(v80 + 32))
                            {
                              v689 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v597, v599 + 1, (unint64_t)&v810);
                              v599 = *(unsigned int *)(v80 + 36);
                              *(_QWORD *)(*(_QWORD *)(v80 + 24) + 8 * v599) = *v689;
                            }
                            else
                            {
                              *(_QWORD *)(*v597 + 8 * v599) = v598;
                            }
                            *(_DWORD *)(v80 + 36) = v599 + 1;
                          }
                          v60 = WTF::fastMalloc((WTF *)0x1F40);
                          *(_QWORD *)(v80 + 8) = v60 + 8000;
                          v15 = (unsigned int *)v791;
                        }
                        *(_QWORD *)v80 = v60 + 40;
                        *(_DWORD *)(v60 + 8) = *(_DWORD *)v815;
                        a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v815[4]);
                        *(_QWORD *)(v60 + 12) = a9.n128_u64[0];
                        *(_DWORD *)(v60 + 20) = -1;
                        *(_BYTE *)(v60 + 24) = 0;
                        *(_BYTE *)(v60 + 25) = 126;
                        *(_BYTE *)(v60 + 26) = 0;
                        v82 = &off_1E3587478;
                      }
                      *(_QWORD *)v60 = v82;
                      *(_QWORD *)(v60 + 32) = v35;
                    }
                    else
                    {
                      switch(v55)
                      {
                        case 776:
                          if ((*(unsigned int (**)(_QWORD *))(*v35 + 112))(v35))
                          {
                            v72 = *(_DWORD *)(a1 + 12);
                            if (!v72)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x197EEB420);
                            }
                            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v72 - 1) + 9) & 1) != 0)
                            {
                              if (!*v781)
                              {
                                *(_QWORD *)&v810 = **(_QWORD **)(a1 + 7320);
                                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[37],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v810);
                              }
                              goto LABEL_220;
                            }
                          }
                          if ((*(unsigned int (**)(_QWORD *))(*v35 + 96))(v35))
                          {
                            if (!*v781)
                            {
                              *(_QWORD *)&v810 = **(_QWORD **)(a1 + 7336);
                              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],WTF::UniquedStringImpl *>(a1, (uint64_t *)&v810);
                            }
                            goto LABEL_220;
                          }
                          v60 = (uint64_t)JSC::ASTBuilder::makeDeleteNode((uint64_t)a2, (uint64_t)v815, (_QWORD **)v35, (uint64_t *)(a2[130] + 16 * *((unsigned int *)a2 + 263) - 12), (uint64_t *)v793, (uint64_t *)v793);
                          break;
                        case 174336:
                          v62 = a2[1];
                          v60 = *(_QWORD *)v62;
                          v63 = *(_QWORD *)(v62 + 8);
                          if ((unint64_t)(v63 - *(_QWORD *)v62) <= 0x2F)
                          {
                            if (v63)
                            {
                              v594 = (_QWORD *)(v62 + 24);
                              v595 = v63 - 8000;
                              *(_QWORD *)&v810 = v63 - 8000;
                              v596 = *(unsigned int *)(v62 + 36);
                              if ((_DWORD)v596 == *(_DWORD *)(v62 + 32))
                              {
                                v688 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v594, v596 + 1, (unint64_t)&v810);
                                v596 = *(unsigned int *)(v62 + 36);
                                *(_QWORD *)(*(_QWORD *)(v62 + 24) + 8 * v596) = *v688;
                              }
                              else
                              {
                                *(_QWORD *)(*v594 + 8 * v596) = v595;
                              }
                              *(_DWORD *)(v62 + 36) = v596 + 1;
                            }
                            v60 = WTF::fastMalloc((WTF *)0x1F40);
                            *(_QWORD *)(v62 + 8) = v60 + 8000;
                            v15 = (unsigned int *)v791;
                          }
                          *(_QWORD *)v62 = v60 + 48;
                          *(_DWORD *)(v60 + 8) = *(_DWORD *)v815;
                          a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v815[4]);
                          *(_QWORD *)(v60 + 12) = a9.n128_u64[0];
                          *(_DWORD *)(v60 + 20) = -1;
                          *(_BYTE *)(v60 + 24) = 0;
                          *(_BYTE *)(v60 + 25) = 2;
                          *(_BYTE *)(v60 + 26) = 0;
                          *(_QWORD *)(v60 + 32) = v35;
                          *(_DWORD *)(v60 + 40) = 192;
                          v64 = &off_1E35878F8;
LABEL_98:
                          *(_QWORD *)v60 = v64;
                          break;
                        case 174337:
                          if ((*(unsigned int (**)(_QWORD *))(*v35 + 24))(v35))
                          {
                            v73 = *((double *)v35 + 4);
                            v74 = -v73;
                            v75 = (*(uint64_t (**)(_QWORD *))(*v35 + 376))(v35);
                            v76 = a2[1];
                            v35 = *(_QWORD **)v76;
                            v77 = *(_QWORD *)(v76 + 8);
                            v78 = v77 - *(_QWORD *)v76;
                            if (v75)
                            {
                              if (v78 <= 0x27)
                              {
                                JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)a2[1]);
                                v35 = *(_QWORD **)v76;
                              }
                              *(_QWORD *)v76 = v35 + 5;
                              if ((*(_QWORD *)&v73 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                                || (double)(int)v74 != v74
                                || (v90 = 3, !(int)v74) && (*(_QWORD *)&v74 & 0x8000000000000000) != 0)
                              {
                                if (*(_QWORD *)&v74 >> 49 == 32766)
                                  v90 = 3;
                                else
                                  v90 = 2;
                              }
                              *((_DWORD *)v35 + 2) = *(_DWORD *)v815;
                              a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v815[4]);
                              *(_QWORD *)((char *)v35 + 12) = a9.n128_u64[0];
                              *((_DWORD *)v35 + 5) = -1;
                              *((_BYTE *)v35 + 24) = 0;
                              *((_BYTE *)v35 + 25) = v90;
                              *((_BYTE *)v35 + 26) = 0;
                              *((double *)v35 + 4) = v74;
                              *v35 = &off_1E3578920;
                            }
                            else
                            {
                              if (v78 <= 0x27)
                              {
                                if (v77)
                                {
                                  v603 = (_QWORD *)(v76 + 24);
                                  v604 = v77 - 8000;
                                  *(_QWORD *)&v810 = v77 - 8000;
                                  v605 = *(unsigned int *)(v76 + 36);
                                  if ((_DWORD)v605 == *(_DWORD *)(v76 + 32))
                                  {
                                    v691 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v603, v605 + 1, (unint64_t)&v810);
                                    v605 = *(unsigned int *)(v76 + 36);
                                    *(_QWORD *)(*(_QWORD *)(v76 + 24) + 8 * v605) = *v691;
                                  }
                                  else
                                  {
                                    *(_QWORD *)(*v603 + 8 * v605) = v604;
                                  }
                                  *(_DWORD *)(v76 + 36) = v605 + 1;
                                  v15 = (unsigned int *)v791;
                                }
                                v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x1F40);
                                *(_QWORD *)(v76 + 8) = v35 + 1000;
                              }
                              *(_QWORD *)v76 = v35 + 5;
                              if ((*(_QWORD *)&v73 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                                || (double)(int)v74 != v74
                                || (v79 = 3, !(int)v74) && (*(_QWORD *)&v74 & 0x8000000000000000) != 0)
                              {
                                if (*(_QWORD *)&v74 >> 49 == 32766)
                                  v79 = 3;
                                else
                                  v79 = 2;
                              }
                              *((_DWORD *)v35 + 2) = *(_DWORD *)v815;
                              a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v815[4]);
                              *(_QWORD *)((char *)v35 + 12) = a9.n128_u64[0];
                              *((_DWORD *)v35 + 5) = -1;
                              *((_BYTE *)v35 + 24) = 0;
                              *((_BYTE *)v35 + 25) = v79;
                              *((_BYTE *)v35 + 26) = 0;
                              *((double *)v35 + 4) = v74;
                              *v35 = &off_1E3578AB0;
                            }
                          }
                          else if ((*(unsigned int (**)(_QWORD *))(*v35 + 40))(v35))
                          {
                            v696 = *((_BYTE *)v35 + 41);
                            v697 = v35[4];
                            v698 = *((_BYTE *)v35 + 40);
                            v699 = a2[1];
                            v35 = *(_QWORD **)v699;
                            if (*(_QWORD *)(v699 + 8) - *(_QWORD *)v699 <= 0x2FuLL)
                            {
                              JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)a2[1]);
                              v35 = *(_QWORD **)v699;
                            }
                            *(_QWORD *)v699 = v35 + 6;
                            *((_DWORD *)v35 + 2) = *(_DWORD *)v815;
                            a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v815[4]);
                            *(_QWORD *)((char *)v35 + 12) = a9.n128_u64[0];
                            *((_DWORD *)v35 + 5) = -1;
                            *((_BYTE *)v35 + 24) = 0;
                            *((_BYTE *)v35 + 25) = 8;
                            *((_BYTE *)v35 + 26) = 0;
                            *v35 = &off_1E3583E38;
                            v35[4] = v697;
                            *((_BYTE *)v35 + 40) = v698;
                            *((_BYTE *)v35 + 41) = v696 ^ 1;
                            v15 = (unsigned int *)v791;
                          }
                          else
                          {
                            v216 = (uint64_t *)a2[1];
                            v217 = *v216;
                            if ((unint64_t)(v216[1] - *v216) <= 0x2F)
                            {
                              JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)a2[1]);
                              v217 = *v216;
                            }
                            *v216 = v217 + 48;
                            v218 = *((_BYTE *)v35 + 25) & 0x7E;
                            if (v218 == 8)
                              v219 = 8;
                            else
                              v219 = 10;
                            if (v218 == 2)
                              v220 = 2;
                            else
                              v220 = v219;
                            *(_DWORD *)(v217 + 8) = *(_DWORD *)v815;
                            a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v815[4]);
                            *(_QWORD *)(v217 + 12) = a9.n128_u64[0];
                            *(_DWORD *)(v217 + 20) = -1;
                            *(_BYTE *)(v217 + 24) = 0;
                            *(_BYTE *)(v217 + 25) = v220;
                            *(_BYTE *)(v217 + 26) = 0;
                            *(_QWORD *)(v217 + 32) = v35;
                            *(_DWORD *)(v217 + 40) = 183;
                            *(_QWORD *)v217 = &off_1E35787A0;
                            v35 = (_QWORD *)v217;
                          }
                          goto LABEL_53;
                        default:
LABEL_748:
                          __break(0xC471u);
                          JUMPOUT(0x197EEB2DCLL);
                      }
                    }
                  }
                  else
                  {
                    v57 = *(unsigned int *)(v54 - 12);
                    v56 = *(_DWORD *)(v54 - 8);
                    v58 = *(_DWORD *)(v54 - 4);
                    switch(v55)
                    {
                      case 256:
                      case 258:
                        if (v35 && (*(unsigned int (**)(_QWORD *, _QWORD))(*v35 + 336))(v35, *a2))
                          *((_DWORD *)a2 + 6) |= 2u;
                        v59 = a2[1];
                        v60 = *(_QWORD *)v59;
                        v61 = *(_QWORD *)(v59 + 8);
                        if ((unint64_t)(v61 - *(_QWORD *)v59) <= 0x57)
                        {
                          if (v61)
                          {
                            v540 = (_QWORD *)(v59 + 24);
                            v541 = v61 - 8000;
                            *(_QWORD *)&v810 = v61 - 8000;
                            v542 = *(unsigned int *)(v59 + 36);
                            if ((_DWORD)v542 == *(_DWORD *)(v59 + 32))
                            {
                              v644 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v540, v542 + 1, (unint64_t)&v810);
                              v542 = *(unsigned int *)(v59 + 36);
                              *(_QWORD *)(*(_QWORD *)(v59 + 24) + 8 * v542) = *v644;
                            }
                            else
                            {
                              *(_QWORD *)(*v540 + 8 * v542) = v541;
                            }
                            *(_DWORD *)(v59 + 36) = v542 + 1;
                          }
                          v60 = WTF::fastMalloc((WTF *)0x1F40);
                          *(_QWORD *)(v59 + 8) = v60 + 8000;
                        }
                        *(_QWORD *)v59 = v60 + 88;
                        *(_DWORD *)(v60 + 8) = *(_DWORD *)v815;
                        *(int32x2_t *)(v60 + 12) = vrev64_s32(*(int32x2_t *)&v815[4]);
                        *(_DWORD *)(v60 + 20) = -1;
                        *(_BYTE *)(v60 + 24) = 0;
                        *(_BYTE *)(v60 + 25) = 126;
                        *(_BYTE *)(v60 + 26) = 0;
                        a9.n128_u64[0] = __PAIR64__(v57, v58);
                        *(_QWORD *)(v60 + 28) = v57 | ((unint64_t)(v56 + 2) << 32);
                        a9.n128_u64[1] = __PAIR64__(v58, v56);
                        *(__n128 *)(v60 + 36) = a9;
                        *(_QWORD *)(v60 + 52) = *(_QWORD *)v793;
                        *(_DWORD *)(v60 + 60) = *(_DWORD *)&v793[8];
                        *(_QWORD *)v60 = &off_1E3586B48;
                        *(_QWORD *)(v60 + 64) = 0;
                        *(_QWORD *)(v60 + 72) = v35;
                        v53 = 5;
                        goto LABEL_51;
                      case 257:
                      case 259:
                        if (v35 && (*(unsigned int (**)(_QWORD *, _QWORD))(*v35 + 336))(v35, *a2))
                          *((_DWORD *)a2 + 6) |= 2u;
                        v65 = a2[1];
                        v60 = *(_QWORD *)v65;
                        v66 = *(_QWORD *)(v65 + 8);
                        if ((unint64_t)(v66 - *(_QWORD *)v65) <= 0x57)
                        {
                          if (v66)
                          {
                            v543 = (_QWORD *)(v65 + 24);
                            v544 = v66 - 8000;
                            *(_QWORD *)&v810 = v66 - 8000;
                            v545 = *(unsigned int *)(v65 + 36);
                            if ((_DWORD)v545 == *(_DWORD *)(v65 + 32))
                            {
                              v645 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v543, v545 + 1, (unint64_t)&v810);
                              v545 = *(unsigned int *)(v65 + 36);
                              *(_QWORD *)(*(_QWORD *)(v65 + 24) + 8 * v545) = *v645;
                            }
                            else
                            {
                              *(_QWORD *)(*v543 + 8 * v545) = v544;
                            }
                            *(_DWORD *)(v65 + 36) = v545 + 1;
                          }
                          v60 = WTF::fastMalloc((WTF *)0x1F40);
                          *(_QWORD *)(v65 + 8) = v60 + 8000;
                        }
                        *(_QWORD *)v65 = v60 + 88;
                        *(_DWORD *)(v60 + 8) = *(_DWORD *)v815;
                        *(int32x2_t *)(v60 + 12) = vrev64_s32(*(int32x2_t *)&v815[4]);
                        *(_DWORD *)(v60 + 20) = -1;
                        *(_BYTE *)(v60 + 24) = 0;
                        *(_BYTE *)(v60 + 25) = 126;
                        *(_BYTE *)(v60 + 26) = 0;
                        a9.n128_u64[0] = __PAIR64__(v57, v58);
                        *(_QWORD *)(v60 + 28) = v57 | ((unint64_t)(v56 + 2) << 32);
                        a9.n128_u64[1] = __PAIR64__(v58, v56);
                        *(__n128 *)(v60 + 36) = a9;
                        *(_QWORD *)(v60 + 52) = *(_QWORD *)v793;
                        *(_DWORD *)(v60 + 60) = *(_DWORD *)&v793[8];
                        *(_QWORD *)v60 = &off_1E3586B48;
                        *(_QWORD *)(v60 + 64) = 0;
                        *(_QWORD *)(v60 + 72) = v35;
                        v53 = 6;
LABEL_51:
                        *(_BYTE *)(v60 + 80) = v53;
                        v15 = (unsigned int *)v791;
                        ++*(_DWORD *)v791;
                        break;
                      case 260:
                        if (!(*(unsigned int (**)(_QWORD *))(*v35 + 24))(v35))
                        {
                          v85 = a2[1];
                          v60 = *(_QWORD *)v85;
                          v86 = *(_QWORD *)(v85 + 8);
                          if ((unint64_t)(v86 - *(_QWORD *)v85) <= 0x2F)
                          {
                            if (v86)
                            {
                              v636 = (_QWORD *)(v85 + 24);
                              v637 = v86 - 8000;
                              *(_QWORD *)&v810 = v86 - 8000;
                              v638 = *(unsigned int *)(v85 + 36);
                              if ((_DWORD)v638 == *(_DWORD *)(v85 + 32))
                              {
                                v693 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v636, v638 + 1, (unint64_t)&v810);
                                v638 = *(unsigned int *)(v85 + 36);
                                *(_QWORD *)(*(_QWORD *)(v85 + 24) + 8 * v638) = *v693;
                              }
                              else
                              {
                                *(_QWORD *)(*v636 + 8 * v638) = v637;
                              }
                              *(_DWORD *)(v85 + 36) = v638 + 1;
                            }
                            v60 = WTF::fastMalloc((WTF *)0x1F40);
                            *(_QWORD *)(v85 + 8) = v60 + 8000;
                            v15 = (unsigned int *)v791;
                          }
                          *(_QWORD *)v85 = v60 + 48;
                          *(_DWORD *)(v60 + 8) = *(_DWORD *)v815;
                          a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v815[4]);
                          *(_QWORD *)(v60 + 12) = a9.n128_u64[0];
                          *(_DWORD *)(v60 + 20) = -1;
                          *(_BYTE *)(v60 + 24) = 0;
                          *(_BYTE *)(v60 + 25) = 32;
                          *(_BYTE *)(v60 + 26) = 0;
                          *(_QWORD *)(v60 + 32) = v35;
                          *(_DWORD *)(v60 + 40) = 184;
                          v64 = &off_1E3587A78;
                          goto LABEL_98;
                        }
                        v87 = *((double *)v35 + 4);
                        ++*((_DWORD *)a2 + 7);
                        v88 = a2[1];
                        v35 = *(_QWORD **)v88;
                        v89 = *(_QWORD *)(v88 + 8);
                        if ((unint64_t)(v89 - *(_QWORD *)v88) <= 0x1F)
                        {
                          if (v89)
                          {
                            v641 = (_QWORD *)(v88 + 24);
                            v642 = v89 - 8000;
                            *(_QWORD *)&v810 = v89 - 8000;
                            v643 = *(unsigned int *)(v88 + 36);
                            if ((_DWORD)v643 == *(_DWORD *)(v88 + 32))
                            {
                              v694 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v641, v643 + 1, (unint64_t)&v810);
                              v643 = *(unsigned int *)(v88 + 36);
                              *(_QWORD *)(*(_QWORD *)(v88 + 24) + 8 * v643) = *v694;
                            }
                            else
                            {
                              *(_QWORD *)(*v641 + 8 * v643) = v642;
                            }
                            *(_DWORD *)(v88 + 36) = v643 + 1;
                          }
                          v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x1F40);
                          *(_QWORD *)(v88 + 8) = v35 + 1000;
                          v15 = (unsigned int *)v791;
                        }
                        *(_QWORD *)v88 = v35 + 4;
                        *((_DWORD *)v35 + 2) = *(_DWORD *)v815;
                        a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v815[4]);
                        *(_QWORD *)((char *)v35 + 12) = a9.n128_u64[0];
                        *((_DWORD *)v35 + 5) = -1;
                        *((_BYTE *)v35 + 24) = 0;
                        *((_BYTE *)v35 + 25) = 32;
                        *((_BYTE *)v35 + 26) = 0;
                        *v35 = &off_1E357B068;
                        *((_BYTE *)v35 + 27) = v87 == 0.0;
                        goto LABEL_53;
                      case 261:
                        if (!(*(unsigned int (**)(_QWORD *))(*v35 + 24))(v35))
                        {
                          v83 = a2[1];
                          v60 = *(_QWORD *)v83;
                          v84 = *(_QWORD *)(v83 + 8);
                          if ((unint64_t)(v84 - *(_QWORD *)v83) <= 0x2F)
                          {
                            if (v84)
                            {
                              v600 = (_QWORD *)(v83 + 24);
                              v601 = v84 - 8000;
                              *(_QWORD *)&v810 = v84 - 8000;
                              v602 = *(unsigned int *)(v83 + 36);
                              if ((_DWORD)v602 == *(_DWORD *)(v83 + 32))
                              {
                                v690 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v600, v602 + 1, (unint64_t)&v810);
                                v602 = *(unsigned int *)(v83 + 36);
                                *(_QWORD *)(*(_QWORD *)(v83 + 24) + 8 * v602) = *v690;
                              }
                              else
                              {
                                *(_QWORD *)(*v600 + 8 * v602) = v601;
                              }
                              *(_DWORD *)(v83 + 36) = v602 + 1;
                            }
                            v60 = WTF::fastMalloc((WTF *)0x1F40);
                            *(_QWORD *)(v83 + 8) = v60 + 8000;
                            v15 = (unsigned int *)v791;
                          }
                          *(_QWORD *)v83 = v60 + 48;
                          *(_DWORD *)(v60 + 8) = *(_DWORD *)v815;
                          a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v815[4]);
                          *(_QWORD *)(v60 + 12) = a9.n128_u64[0];
                          *(_DWORD *)(v60 + 20) = -1;
                          *(_BYTE *)(v60 + 24) = 0;
                          *(_BYTE *)(v60 + 25) = 11;
                          *(_BYTE *)(v60 + 26) = 0;
                          *(_QWORD *)(v60 + 32) = v35;
                          *(_DWORD *)(v60 + 40) = 194;
                          v64 = &off_1E3578C40;
                          goto LABEL_98;
                        }
                        v223 = v35[4];
                        v224 = (v223 >> 52) & 0x7FF;
                        v225 = -1.0;
                        if ((v224 - 1023) <= 0x53)
                        {
                          v226 = v223 >> (51 - (v223 >> 52));
                          if (v224 > 0x433)
                            LODWORD(v226) = v223 << ((v223 >> 52) - 51);
                          if (v224 >= 0x41F)
                            v227 = v226;
                          else
                            v227 = (((1 << ((v223 >> 52) + 1)) - 1) & v226) + (1 << ((v223 >> 52) + 1));
                          if ((v223 & 0x8000000000000000) == 0)
                            v228 = v227;
                          else
                            v228 = -v227;
                          v225 = (double)~v228;
                        }
                        a9.n128_u64[0] = (unint64_t)JSC::ASTBuilder::createIntegerLikeNumber((JSC::ParserArena *)a2[1], (uint64_t)v815, v225);
                        break;
                      default:
                        goto LABEL_748;
                    }
                  }
LABEL_52:
                  v35 = (_QWORD *)v60;
LABEL_53:
                  v52 = *((_DWORD *)a2 + 263) - 1;
                  *((_DWORD *)a2 + 263) = v52;
                  --v30;
                }
                while (v30);
              }
LABEL_116:
              v25 = v782;
              goto LABEL_117;
            }
            v756 = v37;
            if (!(*(unsigned int (**)(_QWORD *))(*v35 + 256))(v35))
            {
              if (((*(uint64_t (**)(_QWORD *))(*v35 + 88))(v35) & 1) == 0)
              {
                v704 = *(_DWORD *)(a1 + 12);
                if (!v704)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EEB408);
                }
                if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v704 - 1) + 9) & 1) != 0
                  || ((*(uint64_t (**)(_QWORD *))(*v35 + 296))(v35) & 1) == 0)
                {
                  if (!*v781)
                  {
                    v705 = "Postfix ++ operator applied to value that is not a reference";
LABEL_656:
                    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, v705);
                    goto LABEL_591;
                  }
                  goto LABEL_591;
                }
              }
              v755 = v33;
              *v10 = vadd_s32(*v10, (int32x2_t)0x100000001);
              if ((*(unsigned int (**)(_QWORD *, _QWORD))(*v35 + 336))(v35, *a2))
                *((_DWORD *)a2 + 6) |= 2u;
              v118 = a2[1];
              v120 = *(_QWORD *)v118;
              v119 = *(_QWORD *)(v118 + 8);
              if ((unint64_t)(v119 - *(_QWORD *)v118) <= 0x57)
              {
                if (v119)
                {
                  v682 = (_QWORD *)(v118 + 24);
                  v683 = v119 - 8000;
                  *(_QWORD *)v793 = v119 - 8000;
                  v684 = *(unsigned int *)(v118 + 36);
                  if ((_DWORD)v684 == *(_DWORD *)(v118 + 32))
                  {
                    v700 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v682, v684 + 1, (unint64_t)v793);
                    v684 = *(unsigned int *)(v118 + 36);
                    *(_QWORD *)(*(_QWORD *)(v118 + 24) + 8 * v684) = *v700;
                  }
                  else
                  {
                    *(_QWORD *)(*v682 + 8 * v684) = v683;
                  }
                  *(_DWORD *)(v118 + 36) = v684 + 1;
                }
                v120 = WTF::fastMalloc((WTF *)0x1F40);
                *(_QWORD *)(v118 + 8) = v120 + 8000;
              }
              *(_QWORD *)v118 = v120 + 88;
              *(_DWORD *)(v120 + 8) = *(_DWORD *)v815;
              a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)&v815[4]);
              *(_QWORD *)(v120 + 12) = a9.n128_u64[0];
              *(_DWORD *)(v120 + 20) = -1;
              *(_BYTE *)(v120 + 24) = 0;
              *(_QWORD *)v120 = off_1E3583CB8;
              *(_BYTE *)(v120 + 25) = 126;
              *(_BYTE *)(v120 + 26) = 0;
              v121 = *(_DWORD *)(v790.i64[0] + 8);
              *(_QWORD *)(v120 + 28) = *(_QWORD *)v790.i64[0];
              v122 = v779;
              *(_DWORD *)(v120 + 36) = v121;
              *(_DWORD *)(v120 + 40) = v122;
              v123 = v755;
              *(_DWORD *)(v120 + 44) = v780;
              *(_DWORD *)(v120 + 48) = v123;
              v124 = *(_QWORD *)(a1 + 7428);
              *(_DWORD *)(v120 + 60) = *(_DWORD *)(a1 + 7436);
              *(_QWORD *)(v120 + 52) = v124;
              *(_QWORD *)(v120 + 64) = 0;
              *(_QWORD *)(v120 + 72) = v35;
              *(_BYTE *)(v120 + 80) = 5;
              *(_QWORD *)v120 = &off_1E3586CE0;
              ++*(_DWORD *)(a1 + 7296);
              v15 = (unsigned int *)v791;
              if (!v756)
                goto LABEL_155;
              v125 = *(_DWORD *)(a1 + 12);
              if (!v125)
              {
                __break(0xC471u);
                JUMPOUT(0x197EEB410);
              }
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v125 - 1) + 9) & 1) == 0)
              {
LABEL_155:
                if (!v32)
                {
                  v126 = *(_DWORD *)(a1 + 7400);
                  v127 = *(_DWORD *)(a1 + 7412);
                  v128 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v126;
                  *(_DWORD *)(a1 + 7448) = v127;
                  *(_DWORD *)(a1 + 7452) = v128;
                  v129 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v129 + 4) = v126;
                  v130 = *(_DWORD *)(a1 + 12);
                  if (!v130)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EE80F0);
                  }
LABEL_47:
                  v51 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v130 - 1) + 9) & 1;
                  *(_BYTE *)(v129 + 56) = 0;
                  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v129, a1 + 7368, 0, v51, (uint64_t)a5, a6, a7, a8);
                  v35 = (_QWORD *)v120;
                  goto LABEL_48;
                }
                if (*v781)
                  goto LABEL_591;
                if (v31 <= 773)
                {
                  v640 = "logical-not";
                  switch(v31)
                  {
                    case 256:
                    case 258:
                      goto LABEL_562;
                    case 257:
                    case 259:
                      goto LABEL_589;
                    case 260:
                      goto LABEL_590;
                    case 261:
                      goto LABEL_607;
                    default:
                      goto LABEL_596;
                  }
                }
                if (v31 != 774)
                {
                  if (v31 != 775)
                  {
                    if (v31 != 776)
                    {
LABEL_596:
                      __break(0xC471u);
                      JUMPOUT(0x197EEA818);
                    }
LABEL_600:
                    v640 = "delete";
LABEL_590:
                    *(_QWORD *)v793 = v640;
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[5],char const*,char const(&)[42]>(a1, (const char **)v793);
                    goto LABEL_591;
                  }
                  goto LABEL_606;
                }
                goto LABEL_605;
              }
              if (*v781)
                goto LABEL_220;
              v142 = **(_QWORD **)(a1 + 7320);
LABEL_219:
              *(_QWORD *)v793 = v142;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)v793);
              goto LABEL_220;
            }
          }
          if (!*v781)
          {
            *(_QWORD *)v793 = JSC::Parser<JSC::Lexer<char16_t>>::metaPropertyName<JSC::ASTBuilder>((uint64_t)v35);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[38]>(a1, (const char **)v793);
          }
          goto LABEL_220;
        }
        v50 = (*v23 & 0x100000) == 0 && *v23 != 20;
        if (v31)
        {
          v25 = v782;
          if (v50)
          {
            if (!*v781)
            {
              if (v31 <= 773)
              {
                v144 = "logical-not";
                switch(v31)
                {
                  case 256:
                  case 258:
                    v144 = "prefix-increment";
                    goto LABEL_260;
                  case 257:
                  case 259:
                    v144 = "prefix-decrement";
                    goto LABEL_260;
                  case 260:
                    goto LABEL_260;
                  case 261:
                    v144 = "bitwise-not";
                    goto LABEL_260;
                  default:
                    goto LABEL_737;
                }
              }
              switch(v31)
              {
                case 774:
                  v144 = "typeof";
                  break;
                case 775:
                  v144 = "void";
                  break;
                case 776:
                  v144 = "delete";
                  break;
                default:
LABEL_737:
                  __break(0xC471u);
                  JUMPOUT(0x197EEB1F8);
              }
LABEL_260:
              *(_QWORD *)v793 = v144;
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[31],char const*,char const(&)[9]>(a1, (const char **)v793);
            }
            goto LABEL_35;
          }
        }
        else
        {
          v25 = v782;
          if (v50)
          {
            if (!*v781)
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse member expression");
            goto LABEL_35;
          }
        }
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      }
LABEL_35:
      v35 = 0;
LABEL_117:
      v10[17].i8[4] = (char)v788;
      goto LABEL_118;
    }
    v709 = *(_DWORD *)(a1 + 12);
    if (!v709)
    {
      __break(0xC471u);
      JUMPOUT(0x197EEB2F8);
    }
    v710 = *(uint64_t **)(a1 + 7376);
    JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v709 - 1), *v710, 0);
    v10[29].i8[6] = 1;
    v715 = *(_DWORD *)(a1 + 7400);
    v716 = *(_DWORD *)(a1 + 7412);
    v717 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v715;
    *(_DWORD *)(a1 + 7448) = v716;
    *(_DWORD *)(a1 + 7452) = v717;
    v718 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v718 + 4) = v715;
    v719 = *(_DWORD *)(a1 + 12);
    if (!v719)
    {
      __break(0xC471u);
      JUMPOUT(0x197EEB300);
    }
    v720 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v719 - 1) + 9) & 1;
    *(_BYTE *)(v718 + 56) = 0;
    v721 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v718, a1 + 7368, 0, v720, v711, v712, v713, v714);
    *(_DWORD *)(a1 + 7368) = v721;
    if ((int)v22 >= 131589 || v721 != 131589)
      break;
    a9.n128_u64[0] = (unint64_t)JSC::ASTBuilder::createPrivateIdentifierNode(a2[1], (uint64_t)&v806, (uint64_t)v710);
    v35 = v722;
    v15 = (unsigned int *)v791;
LABEL_118:
    if (!v35)
    {
      if (*v23 != 20 && (*v23 & 0x100000) == 0)
      {
        v103 = v787;
        if (!*v781)
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[24]>(a1);
        goto LABEL_394;
      }
LABEL_676:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      v103 = v787;
      goto LABEL_394;
    }
    v91 = v25 != *v15;
    v92 = ++v807;
    *(_QWORD *)v815 = v804;
    *(_DWORD *)&v815[8] = v805;
    v93 = (uint64_t *)v790.i64[0];
    v94 = *(_DWORD *)(v790.i64[0] + 8);
    v95 = v786;
    *((_DWORD *)v786 + 2) = v94;
    v96 = *v93;
    *v95 = v96;
    v97 = v785;
    *((_DWORD *)v785 + 2) = v94;
    *v97 = v96;
    *(_QWORD *)v793 = v35;
    v98 = v784;
    *((_DWORD *)v784 + 8) = *(_DWORD *)&v815[32];
    v99 = *(_OWORD *)&v815[16];
    *v98 = *(_OWORD *)v815;
    v98[1] = v99;
    v793[44] = v91;
    v100 = *((_DWORD *)a2 + 11);
    if (v100 == *((_DWORD *)a2 + 10))
    {
      a9.n128_u64[0] = WTF::Vector<std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>>((uint64_t)v757, (unint64_t)v793).n128_u64[0];
    }
    else
    {
      v101 = a2[4] + 48 * v100;
      a9 = *(__n128 *)v793;
      *((_QWORD *)&v14 + 1) = *(_QWORD *)&v793[24];
      v102 = *(_OWORD *)&v793[32];
      *(_OWORD *)(v101 + 16) = *(_OWORD *)&v793[16];
      *(_OWORD *)(v101 + 32) = v102;
      *(__n128 *)v101 = a9;
      ++*((_DWORD *)a2 + 11);
    }
    v103 = v787;
    v22 = *v23;
    if (v10[17].i8[4])
      v104 = 245760;
    else
      v104 = 15360;
    v105 = v104 & v22;
    if ((v104 & v22) == 0)
    {
      v106 = v789;
      if ((_DWORD)v789)
      {
        do
        {
          v179 = *((_DWORD *)a2 + 11);
          v180 = a2[4] + 48 * v179;
          *(_OWORD *)v793 = *(_OWORD *)(v180 - 48);
          *(_OWORD *)&v793[16] = *(_OWORD *)(v180 - 32);
          *(_OWORD *)&v793[32] = *(_OWORD *)(v180 - 16);
          *(_OWORD *)v815 = *(_OWORD *)(v180 - 96);
          *(_OWORD *)&v815[16] = *(_OWORD *)(v180 - 80);
          *(_OWORD *)&v815[32] = *(_OWORD *)(v180 - 64);
          v807 -= 2;
          *((_DWORD *)a2 + 11) = v179 - 2;
          a9.n128_f64[0] = JSC::ASTBuilder::appendBinaryOperation((uint64_t)a2, (uint64_t)&v806, &v807, (uint64_t)v815, (uint64_t)v793);
          --*((_DWORD *)a2 + 239);
          --v106;
        }
        while (v106);
        LODWORD(v22) = *v23;
      }
      v107 = *((_DWORD *)a2 + 11);
      v108 = *(_QWORD *)(a2[4] + 48 * v107 - 48);
      *((_DWORD *)a2 + 11) = v107 - 1;
      if (!v108)
        goto LABEL_395;
      if ((_DWORD)v22 != 7)
      {
        v109 = 0;
        goto LABEL_129;
      }
      *v10 = vadd_s32(*v10, (int32x2_t)0x100000001);
      v229 = *(_DWORD *)(a1 + 7400);
      v230 = *(_DWORD *)(a1 + 7412);
      v231 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v229;
      *(_DWORD *)(a1 + 7448) = v230;
      *(_DWORD *)(a1 + 7452) = v231;
      v232 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v232 + 4) = v229;
      v233 = *(_DWORD *)(a1 + 12);
      if (!v233)
      {
        __break(0xC471u);
        JUMPOUT(0x197EEB59CLL);
      }
      v234 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v233 - 1) + 9) & 1;
      *(_BYTE *)(v232 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v232, a1 + 7368, 0, v234, (uint64_t)a5, a6, a7, a8);
      v235 = v10[17].i8[4];
      v10[17].i8[4] = 1;
      *(_DWORD *)v793 = 0;
      *(_QWORD *)&v793[8] = *(_QWORD *)(a1 + 7496);
      *(_QWORD *)&v793[16] = a1;
      *(_QWORD *)(a1 + 7496) = v793;
      v236 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, v793);
      *(_QWORD *)(*(_QWORD *)&v793[16] + 7496) = *(_QWORD *)&v793[8];
      v10[17].i8[4] = v235;
      if (!v236)
      {
        if (*v23 != 20 && (*v23 & 0x100000) == 0)
        {
          v103 = v787;
          if (!*v781)
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse left hand side of ternary operator");
          goto LABEL_399;
        }
        goto LABEL_712;
      }
      v237 = v236;
      *(_DWORD *)(v236 + 20) = *(_DWORD *)(a1 + 7448);
      v238 = *(_DWORD *)(a1 + 7368);
      if (v238 == 18)
      {
        v239 = *(_DWORD *)(a1 + 7400);
        v240 = *(_DWORD *)(a1 + 7412);
        v241 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v239;
        *(_DWORD *)(a1 + 7448) = v240;
        *(_DWORD *)(a1 + 7452) = v241;
        v242 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v242 + 4) = v239;
        v243 = *(_DWORD *)(a1 + 12);
        if (!v243)
        {
          __break(0xC471u);
          JUMPOUT(0x197EEB5A4);
        }
        v244 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v243 - 1) + 9) & 1;
        *(_BYTE *)(v242 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v242, a1 + 7368, 0, v244, (uint64_t)a5, a6, a7, a8);
        *(_DWORD *)v793 = 0;
        *(_QWORD *)&v793[8] = *(_QWORD *)(a1 + 7496);
        *(_QWORD *)&v793[16] = a1;
        *(_QWORD *)(a1 + 7496) = v793;
        v245 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, v793);
        *(_QWORD *)(*(_QWORD *)&v793[16] + 7496) = *(_QWORD *)&v793[8];
        if (v245)
        {
          v246 = v245;
          *(_DWORD *)(v245 + 20) = *(_DWORD *)(a1 + 7448);
          v247 = (uint64_t *)a2[1];
          v248 = *v247;
          if ((unint64_t)(v247[1] - *v247) <= 0x37)
          {
            JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)a2[1]);
            v248 = *v247;
          }
          v109 = 0;
          *v247 = v248 + 56;
          v249 = v759;
          *(_DWORD *)(v248 + 8) = v758;
          *(_DWORD *)(v248 + 12) = v249;
          *(_DWORD *)(v248 + 16) = v760;
          *(_DWORD *)(v248 + 20) = -1;
          *(_BYTE *)(v248 + 24) = 0;
          *(_BYTE *)(v248 + 25) = 126;
          *(_BYTE *)(v248 + 26) = 0;
          *(_QWORD *)v248 = &off_1E3588678;
          *(_QWORD *)(v248 + 32) = v108;
          *(_QWORD *)(v248 + 40) = v237;
          v108 = v248;
          *(_QWORD *)(v248 + 48) = v246;
LABEL_295:
          v103 = v787;
          goto LABEL_129;
        }
        if (*v23 != 20 && (*v23 & 0x100000) == 0)
        {
          v103 = v787;
          if (!*v781)
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse right hand side of ternary operator");
          goto LABEL_399;
        }
LABEL_712:
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        v103 = v787;
        goto LABEL_399;
      }
      if (v238 != 20 && (v238 & 0x100000) == 0)
      {
        if (!*v781)
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected ':' in ternary operator");
        goto LABEL_399;
      }
LABEL_466:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      goto LABEL_399;
    }
    if ((int)v22 <= 52223)
    {
      if ((_DWORD)v22 == 34816)
      {
LABEL_235:
        LODWORD(v778) = 1;
        goto LABEL_236;
      }
      if ((_DWORD)v22 == 17408)
        v773 = 1;
    }
    else
    {
      if ((_DWORD)v22 == 52224)
        goto LABEL_235;
      if ((_DWORD)v22 == 4403200)
      {
        if ((v776 & 0xFFFFFFFC) == 0x100)
        {
          v15 = (unsigned int *)v791;
        }
        else
        {
          v15 = (unsigned int *)v791;
          v103 = v787;
          if ((v776 & 0x100) != 0)
          {
            if (!*v781)
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[139]>(a1);
            goto LABEL_394;
          }
        }
      }
    }
LABEL_236:
    if ((v778 & 1) != 0 && (v773 & 1) != 0)
    {
      if ((_DWORD)v22 != 20 && (v22 & 0x100000) == 0)
      {
        v103 = v787;
        if (!*v781)
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[112]>(a1);
        goto LABEL_394;
      }
      goto LABEL_676;
    }
    *v10 = vadd_s32(*v10, (int32x2_t)0x100000001);
    v181 = *(_DWORD *)(a1 + 7400);
    v182 = *(_DWORD *)(a1 + 7412);
    v183 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v181;
    *(_DWORD *)(a1 + 7448) = v182;
    *(_DWORD *)(a1 + 7452) = v183;
    v184 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v184 + 4) = v181;
    v185 = *(_DWORD *)(a1 + 12);
    if (!v185)
    {
      __break(0xC471u);
      JUMPOUT(0x197EEB47CLL);
    }
    v186 = a2 + 118;
    v187 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v185 - 1) + 9) & 1;
    *(_BYTE *)(v184 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v184, a1 + 7368, 0, v187, (uint64_t)a5, a6, a7, a8);
    v188 = *((_DWORD *)a2 + 239);
    if (!(_DWORD)v789)
    {
      v189 = 0;
      goto LABEL_241;
    }
    v190 = v92 - v789;
    while (1)
    {
      v191 = v188 - 1;
      v192 = *v186;
      v193 = *(_DWORD *)(*v186 + 8 * v191 + 4);
      if (v193 == (_DWORD)v105)
        break;
      if (v193 <= (int)v105)
        goto LABEL_261;
      LODWORD(a3) = *(_DWORD *)(v192 + 8 * v191);
LABEL_249:
      v194 = *((_DWORD *)a2 + 11);
      v195 = a2[4] + 48 * v194;
      v196 = *(_OWORD *)(v195 - 32);
      v818 = *(_OWORD *)(v195 - 48);
      *(_OWORD *)v819 = v196;
      *(_OWORD *)&v819[12] = *(_OWORD *)(v195 - 20);
      v197 = *(unsigned __int8 *)(v195 - 4);
      v813 = *(_WORD *)(v195 - 3);
      v814 = *(_BYTE *)(v195 - 1);
      *(_OWORD *)((char *)v817 + 12) = *(_OWORD *)(v195 - 68);
      v817[0] = *(_OWORD *)(v195 - 80);
      v816 = *(_OWORD *)(v195 - 96);
      v198 = v816;
      v199 = *(_BYTE *)(v195 - 52);
      LODWORD(v788) = v199;
      *(_WORD *)&v815[45] = *(_WORD *)(v195 - 51);
      v815[47] = *(_BYTE *)(v195 - 49);
      *((_DWORD *)a2 + 11) = v194 - 2;
      *(_OWORD *)v815 = v198;
      *(_OWORD *)&v815[16] = v817[0];
      *(_OWORD *)&v815[28] = *(_OWORD *)((char *)v817 + 12);
      v815[44] = v199;
      *(_OWORD *)&v811[12] = *(_OWORD *)&v819[12];
      v810 = v818;
      *(_OWORD *)v811 = *(_OWORD *)v819;
      v782 = v197;
      v812 = v197;
      JSC::ASTBuilder::makeBinaryNode((uint64_t)a2, (uint64_t)&v806, a3, (double **)v815, (uint64_t)&v810);
      *(_QWORD *)v808 = *((_QWORD *)&v816 + 1);
      *(_QWORD *)&v808[12] = *((_QWORD *)&v818 + 1);
      *(_DWORD *)&v808[8] = v817[0];
      *(_DWORD *)&v808[20] = *(_DWORD *)v819;
      *(_QWORD *)&v808[24] = *(_QWORD *)&v819[16];
      v809 = *(_DWORD *)&v819[24];
      if ((_DWORD)v788)
        v201 = 1;
      else
        v201 = v782 != 0;
      *(_QWORD *)v793 = v200;
      *(_OWORD *)&v793[8] = *(_OWORD *)v808;
      *(_OWORD *)&v793[24] = *(_OWORD *)&v808[16];
      *(_DWORD *)&v793[40] = v809;
      v793[44] = v201;
      v202 = *((_DWORD *)a2 + 11);
      v15 = (unsigned int *)v791;
      if (v202 == *((_DWORD *)a2 + 10))
      {
        a9.n128_u64[0] = WTF::Vector<std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::ExpressionNode *,JSC::ASTBuilder::BinaryOpInfo>>((uint64_t)v757, (unint64_t)v793).n128_u64[0];
      }
      else
      {
        v203 = a2[4] + 48 * v202;
        a9 = *(__n128 *)v793;
        *((_QWORD *)&v14 + 1) = *(_QWORD *)&v793[24];
        v204 = *(_OWORD *)&v793[32];
        *(_OWORD *)(v203 + 16) = *(_OWORD *)&v793[16];
        *(_OWORD *)(v203 + 32) = v204;
        *(__n128 *)v203 = a9;
        ++*((_DWORD *)a2 + 11);
      }
      v188 = *((_DWORD *)a2 + 239) - 1;
      *((_DWORD *)a2 + 239) = v188;
      --v92;
      v189 = v789 - 1;
      LODWORD(v789) = v189;
      if (!v189)
        goto LABEL_262;
    }
    a3 = *(unsigned int *)(v192 + 8 * v191);
    if ((a3 & 0x400000) == 0)
      goto LABEL_249;
LABEL_261:
    v190 = v92;
    v189 = v789;
LABEL_262:
    v807 = v190;
LABEL_241:
    LODWORD(v789) = v189 + 1;
    *(_QWORD *)v793 = v22 | (v105 << 32);
    if (v188 == *((_DWORD *)a2 + 238))
    {
      WTF::Vector<std::pair<int,int>,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<int,int>>((uint64_t)(a2 + 118), (unint64_t)v793);
    }
    else
    {
      *(_QWORD *)(a2[118] + 8 * v188) = v22 | (v105 << 32);
      ++*((_DWORD *)a2 + 239);
    }
    v24 = v792;
  }
  v103 = v787;
  if (!*v781)
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[79]>(a1);
LABEL_394:
  LODWORD(v22) = *v23;
LABEL_395:
  if ((_DWORD)v22 == 20 || (v22 & 0x100000) != 0)
    goto LABEL_466;
  if (!*v781)
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[24]>(a1);
LABEL_399:
  v374 = *(_DWORD *)(a1 + 12);
  if (!v374)
  {
    __break(0xC471u);
    JUMPOUT(0x197EEB634);
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v374 - 1) + 12) & 0x10) != 0)
  {
    if (*v23 == 546)
    {
      v108 = 0;
      if (*v781)
        return a9.n128_f64[0];
    }
    else
    {
      v108 = 0;
    }
    v109 = 1;
    goto LABEL_295;
  }
  v108 = 0;
  v109 = 1;
LABEL_129:
  if ((v103 & 0x200) == 0 && v103 != 2 && v103 != 1048592 && v103 != 12
    || (v110 = *v23, *v23 == 20)
    || ((v110 != 38) & ~v109) != 0)
  {
LABEL_135:
    v111 = v103 | 4;
    if (v109)
    {
      if (v111 != 4)
      {
        if (*v781)
          return a9.n128_f64[0];
        if (*v23 != 20 && (*v23 & 0x100000) == 0)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[24]>(a1);
          return a9.n128_f64[0];
        }
        goto LABEL_690;
      }
      if (*v770 != 1 && *v781)
        return a9.n128_f64[0];
    }
    else if (v111 != 4
           || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 48))(v108) & 1) == 0
           && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v108 + 56))(v108)
           || *v23 != 21)
    {
      v112 = v783;
      if (v783 != v10->i32[0])
      {
        v167 = *v23;
        if (*v23 < 0 || v167 < 21 || v167 > 0x24)
          return a9.n128_f64[0];
        goto LABEL_693;
      }
      v113 = 0;
      v114 = 0;
      v115 = a2 + 66;
      while (2)
      {
        v116 = *v23 - 21;
        v788 = v115;
        v789 = v108;
        v145 = 0;
        v115 = 0;
        v146 = 0;
        v147 = 0;
        switch(v116)
        {
          case 0:
            goto LABEL_191;
          case 1:
            v145 = 0;
            LODWORD(v115) = 0;
            v146 = 0;
            v147 = 1;
            goto LABEL_191;
          case 2:
            v145 = 0;
            LODWORD(v115) = 0;
            v146 = 0;
            v147 = 2;
            goto LABEL_191;
          case 3:
            v145 = 0;
            LODWORD(v115) = 0;
            v146 = 0;
            v147 = 3;
            goto LABEL_191;
          case 4:
            v145 = 0;
            LODWORD(v115) = 0;
            v146 = 0;
            v147 = 4;
            goto LABEL_191;
          case 5:
            v145 = 0;
            LODWORD(v115) = 0;
            v146 = 0;
            v147 = 15;
            goto LABEL_191;
          case 6:
            v145 = 0;
            LODWORD(v115) = 0;
            v146 = 0;
            v147 = 16;
            goto LABEL_191;
          case 7:
            v145 = 0;
            LODWORD(v115) = 0;
            v146 = 0;
            v147 = 17;
            goto LABEL_191;
          case 8:
            v145 = 0;
            LODWORD(v115) = 0;
            v146 = 0;
            v147 = 10;
            goto LABEL_191;
          case 9:
            v145 = 0;
            LODWORD(v115) = 0;
            v146 = 0;
            v147 = 11;
            goto LABEL_191;
          case 10:
            v145 = 0;
            LODWORD(v115) = 0;
            v146 = 0;
            v147 = 7;
            goto LABEL_191;
          case 11:
            v145 = 0;
            LODWORD(v115) = 0;
            v146 = 0;
            v147 = 8;
            goto LABEL_191;
          case 12:
            v145 = 0;
            LODWORD(v115) = 0;
            v146 = 0;
            v147 = 9;
            goto LABEL_191;
          case 13:
            LODWORD(v115) = 0;
            v146 = 0;
            v147 = 12;
            v145 = 1;
            goto LABEL_191;
          case 14:
            v145 = 0;
            v146 = 0;
            v147 = 13;
            LODWORD(v115) = 1;
            goto LABEL_191;
          case 15:
            v145 = 0;
            LODWORD(v115) = 0;
            v147 = 14;
            v146 = 1;
LABEL_191:
            ++*(_DWORD *)(a1 + 7304);
            v148 = v789;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v789 + 256))(v789))
            {
              if (!*v781)
              {
                *(_QWORD *)v793 = JSC::Parser<JSC::Lexer<char16_t>>::metaPropertyName<JSC::ASTBuilder>(v789);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const*,char const(&)[57]>(a1, (const char **)v793);
              }
              return a9.n128_f64[0];
            }
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v148 + 88))(v148) & 1) == 0)
            {
              v726 = *(_DWORD *)(a1 + 12);
              if (!v726)
              {
                __break(0xC471u);
                JUMPOUT(0x197EEB484);
              }
              v148 = v789;
              if (((v145 | v115 | v146 | *(unsigned __int8 *)(*(_QWORD *)a1
                                                                           + 720 * (v726 - 1)
                                                                           + 9)) & 1) != 0
                || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v789 + 296))(v789) & 1) == 0)
              {
                if (!*v781)
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Left side of assignment is not a reference");
                return a9.n128_f64[0];
              }
            }
            v154 = *(_DWORD *)v791;
            *(_QWORD *)v793 = v148;
            *(_QWORD *)&v793[8] = v802;
            *(_DWORD *)&v793[16] = v803;
            *(_QWORD *)&v793[20] = *(_QWORD *)v792;
            *(_DWORD *)&v793[28] = *(_DWORD *)(v792 + 8);
            *(_DWORD *)&v793[32] = v154;
            v793[36] = v147;
            v155 = *((unsigned int *)a2 + 135);
            v115 = v788;
            if ((_DWORD)v155 == *((_DWORD *)a2 + 134))
            {
              v650 = WTF::Vector<JSC::ASTBuilder::AssignmentInfo,10ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v788, (void *)(v155 + 1), (unint64_t)v793, v149, v150, v151, v152, v153);
              v651 = a2[66] + 40 * *((unsigned int *)a2 + 135);
              v652 = *(_QWORD *)(v650 + 32);
              v653 = *(_OWORD *)(v650 + 16);
              *(_OWORD *)v651 = *(_OWORD *)v650;
              *(_OWORD *)(v651 + 16) = v653;
              *(_QWORD *)(v651 + 32) = v652;
            }
            else
            {
              v156 = *v788 + 40 * v155;
              v157 = *(_OWORD *)v793;
              v158 = *(_OWORD *)&v793[16];
              *(_QWORD *)(v156 + 32) = *(_QWORD *)&v793[32];
              *(_OWORD *)v156 = v157;
              *(_OWORD *)(v156 + 16) = v158;
            }
            ++*((_DWORD *)a2 + 135);
            v802 = *(_QWORD *)v792;
            v803 = *(_DWORD *)(v792 + 8);
            ++*(_DWORD *)(a1 + 7296);
            v159 = *(_DWORD *)(a1 + 7400);
            v160 = *(_DWORD *)(a1 + 7412);
            v161 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v159;
            *(_DWORD *)(a1 + 7448) = v160;
            *(_DWORD *)(a1 + 7452) = v161;
            v162 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v162 + 4) = v159;
            v163 = *(_DWORD *)(a1 + 12);
            if (!v163)
            {
              __break(0xC471u);
              JUMPOUT(0x197EEB4A4);
            }
            v164 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v163 - 1) + 9) & 1;
            *(_BYTE *)(v162 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v162, a1 + 7368, 0, v164, v150, v151, v152, v153);
            v165 = *(_DWORD *)(a1 + 12);
            if (!v165)
            {
              __break(0xC471u);
              JUMPOUT(0x197EEB49CLL);
            }
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v165 - 1) + 9) & 1) != 0
              && *v777
              && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v148 + 112))(v148))
            {
              v221 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
              v222 = **(_QWORD **)(a1 + 7320);
              if (*(_QWORD *)(v221 + 1248) == v222)
              {
                v724 = *(_DWORD *)(a1 + 12);
                if (!v724)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EEB48CLL);
                }
                v115 = v788;
                if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v724 - 1) + 9) & 1) != 0)
                {
                  if (!*v781)
                    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot modify 'eval' in strict mode");
                  return a9.n128_f64[0];
                }
              }
              if (*(_QWORD *)(v221 + 880) == v222)
              {
                v725 = *(_DWORD *)(a1 + 12);
                if (!v725)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EEB494);
                }
                v115 = v788;
                if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v725 - 1) + 9) & 1) != 0)
                {
                  if (!*v781)
                    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot modify 'arguments' in strict mode");
                  return a9.n128_f64[0];
                }
              }
              *v777 = 0;
            }
            *(_DWORD *)v793 = 0;
            *(_QWORD *)&v793[8] = *(_QWORD *)(a1 + 7496);
            *(_QWORD *)&v793[16] = a1;
            *(_QWORD *)(a1 + 7496) = v793;
            v166 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, v793);
            *(_QWORD *)(*(_QWORD *)&v793[16] + 7496) = *(_QWORD *)&v793[8];
            if (!v166)
            {
              if (*v23 != 20 && (*v23 & 0x100000) == 0)
              {
                if (!*v781)
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the right hand side of an assignment expression");
                return a9.n128_f64[0];
              }
LABEL_690:
              JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
              return a9.n128_f64[0];
            }
            v108 = v166;
            v117 = v10->i32[0];
            ++v113;
            v114 = 1;
            v112 = v783;
            if (v783 == v10->i32[0])
              continue;
            if (*v23 >= 21 && *v23 <= 0x24)
            {
LABEL_693:
              if (!*v781)
              {
                *(_QWORD *)v793 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
                *(_QWORD *)&v793[8] = v723;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],WTF::StringView,char const(&)[22]>(a1, (uint64_t)v793);
              }
              return a9.n128_f64[0];
            }
LABEL_203:
            v10->i32[0] = v117 + 1;
LABEL_143:
            if (v113)
            {
              v168 = *((_DWORD *)a2 + 135);
              AssignNode = (_QWORD *)v108;
              do
              {
                v170 = *(_DWORD *)v791;
                v171 = v168 - 1;
                v172 = *v115;
                v173 = (uint64_t *)(*v115 + 40 * v171);
                if (*v173 && (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)*v173 + 336))(*v173, *a2))
                  *((_DWORD *)a2 + 6) |= 2u;
                v174 = *v173;
                v175 = v172 + 40 * v171;
                v176 = *(unsigned __int8 *)(v175 + 36);
                v178 = *(_DWORD *)(v175 + 28);
                v177 = *(_DWORD *)(v175 + 32);
                *(_DWORD *)v793 = *(_DWORD *)(v175 + 20);
                *(_DWORD *)&v793[4] = *(_DWORD *)(v175 + 24) + 1;
                *(_DWORD *)&v793[8] = v178;
                AssignNode = (_QWORD *)JSC::ASTBuilder::makeAssignNode((uint64_t)a2, (uint64_t)&v801, v174, v176, AssignNode, v177 != v774, v177 != v170, v175 + 8, (uint64_t)v793, v790.i64[0]);
                v168 = *((_DWORD *)a2 + 135) - 1;
                *((_DWORD *)a2 + 135) = v168;
                --v113;
              }
              while (v113);
            }
            break;
          default:
            v117 = v112;
            if ((v114 & 1) == 0)
              goto LABEL_143;
            goto LABEL_203;
        }
        return a9.n128_f64[0];
      }
    }
    *(_OWORD *)v793 = *(_OWORD *)v791;
    *(_OWORD *)&v793[20] = *v761;
    *(_OWORD *)&v793[34] = *(_OWORD *)((char *)v761 + 14);
    v382.i64[1] = *(_QWORD *)&v793[42];
    *(int32x2_t *)v382.i8 = v10[13];
    v383 = *(_QWORD *)(a1 + 7288);
    *(_QWORD *)&v14 = *(_QWORD *)v383;
    v384 = *(_BYTE *)(v383 + 56);
    v790 = v382;
    v792 = v14;
    v382.i64[1] = v14;
    *(int32x4_t *)&v793[56] = vrev64q_s32(v382);
    v794 = v384;
    v385 = *(_BYTE *)(v383 + 150);
    v795 = v385;
    v386 = *(WTF::StringImpl **)(v383 + 152);
    if (v386)
      *(_DWORD *)v386 += 2;
    v796 = v386;
    v387 = *v781;
    if (*v781)
      *(_DWORD *)v387 += 2;
    v797 = v387;
    *(_DWORD *)&v793[16] = v772;
    *(_BYTE *)(v383 + 150) = 0;
    v388 = *(WTF::StringImpl **)(v383 + 152);
    *(_QWORD *)(v383 + 152) = 0;
    if (v388)
    {
      if (*(_DWORD *)v388 == 2)
      {
        WTF::StringImpl::~StringImpl(v388, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
        WTF::fastFree(v508, v509, v510, v511, v512, v513, v514, v515);
      }
      else
      {
        *(_DWORD *)v388 -= 2;
      }
    }
    v389 = *(_QWORD *)(v383 + 88);
    v390 = *(_QWORD *)(v383 + 96);
    v391 = v762;
    v392 = (__int16 *)(v389 + 2 * v763);
    *(_QWORD *)(v383 + 80) = v392;
    *(_QWORD *)(v383 + 112) = v389 + 2 * v391;
    *(_DWORD *)(v383 + 20) = 0;
    *(_DWORD *)(v383 + 36) = 0;
    if ((unint64_t)v392 >= v390)
      v393 = 0;
    else
      v393 = *v392;
    *(_WORD *)(v383 + 176) = v393;
    v394 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v394 = v765;
    *(_BYTE *)(v394 + 56) = v764;
    v395 = *(_DWORD *)(a1 + 7400);
    v396 = *(_DWORD *)(a1 + 7412);
    v397 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v395;
    *(_DWORD *)(a1 + 7448) = v396;
    *(_DWORD *)(a1 + 7452) = v397;
    *(_DWORD *)(v394 + 4) = v395;
    v398 = *(_DWORD *)(a1 + 12);
    if (!v398)
    {
      __break(0xC471u);
      JUMPOUT(0x197EEB654);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v394, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v398 - 1) + 9) & 1, (uint64_t)a5, a6, a7, a8);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v766;
    *(_OWORD *)v791 = v800;
    v406 = v772;
    *(_DWORD *)(a1 + 7312) = v772;
    *(_DWORD *)(a1 + 7316) = v769;
    v407 = v777;
    *(_OWORD *)v777 = v798;
    v407[2] = v799;
    v10[5].i8[4] = v768;
    v10[5].i8[5] = v767;
    *((_DWORD *)a2 + 263) = v406;
    v408 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (v408)
    {
      if (*(_DWORD *)v408 == 2)
      {
        WTF::StringImpl::~StringImpl(v408, v399, v400, v401, v402, v403, v404, v405);
        WTF::fastFree(v516, v517, v518, v519, v520, v521, v522, v523);
      }
      else
      {
        *(_DWORD *)v408 -= 2;
      }
    }
    v409 = JSC::Parser<JSC::Lexer<char16_t>>::tryParseDestructuringPatternExpression<JSC::ASTBuilder>(a1, (uint64_t)a2);
    v417 = v409;
    if (*v770 == 1)
    {
      if (v409 && *v23 == 21)
      {
LABEL_422:
        v419 = *(_DWORD *)(a1 + 7400);
        v420 = *(_DWORD *)(a1 + 7412);
        v421 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v419;
        *(_DWORD *)(a1 + 7448) = v420;
        *(_DWORD *)(a1 + 7452) = v421;
        v422 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v422 + 4) = v419;
        v423 = *(_DWORD *)(a1 + 12);
        if (!v423)
        {
          __break(0xC471u);
          JUMPOUT(0x197EEB664);
        }
        v424 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v423 - 1) + 9) & 1;
        *(_BYTE *)(v422 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v422, a1 + 7368, 0, v424, v413, v414, v415, v416);
        *(_DWORD *)v815 = 0;
        *(_QWORD *)&v815[8] = *(_QWORD *)(a1 + 7496);
        *(_QWORD *)&v815[16] = a1;
        *(_QWORD *)(a1 + 7496) = v815;
        v425 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, v815);
        *(_QWORD *)(*(_QWORD *)&v815[16] + 7496) = *(_QWORD *)&v815[8];
        if (v425)
        {
          v426 = v425;
          v427 = (JSC::ParserArena *)a2[1];
          v428 = *(_QWORD *)v427;
          if (*((_QWORD *)v427 + 1) - *(_QWORD *)v427 <= 0x2FuLL)
          {
            JSC::ParserArena::allocateFreeablePool(v427);
            v428 = *(_QWORD *)v427;
          }
          *(_QWORD *)v427 = v428 + 48;
          *(_DWORD *)(v428 + 8) = v801;
          a9.n128_u64[0] = (unint64_t)vrev64_s32(*(int32x2_t *)((char *)&v801 + 4));
          *(_QWORD *)(v428 + 12) = a9.n128_u64[0];
          *(_DWORD *)(v428 + 20) = -1;
          *(_BYTE *)(v428 + 24) = 0;
          *(_BYTE *)(v428 + 25) = 126;
          *(_BYTE *)(v428 + 26) = 0;
          *(_QWORD *)v428 = &off_1E358B880;
          *(_QWORD *)(v428 + 32) = v417;
          *(_QWORD *)(v428 + 40) = v426;
        }
        else if (!*v781)
        {
          a9.n128_u64[0] = (unint64_t)JSC::ASTBuilder::createDestructuringAssignment((JSC::ParserArena *)a2[1], (uint64_t)&v801, v417);
        }
      }
      else
      {
        JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), (WTF::AtomStringImpl *)v790.u32[1], v790.u32[0], v412, v413, v414, v415, v416);
        v557 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)v557 = v792;
        *(_BYTE *)(v557 + 56) = v384;
        v558 = *(_DWORD *)(a1 + 7400);
        v559 = *(_DWORD *)(a1 + 7412);
        v560 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v558;
        *(_DWORD *)(a1 + 7448) = v559;
        *(_DWORD *)(a1 + 7452) = v560;
        *(_DWORD *)(v557 + 4) = v558;
        v561 = *(_DWORD *)(a1 + 12);
        if (!v561)
        {
          __break(0xC471u);
          JUMPOUT(0x197EEB67CLL);
        }
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v557, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v561 - 1) + 9) & 1, v553, v554, v555, v556);
        v562 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v562 + 4) = DWORD1(v792);
        v563 = (_OWORD *)v791;
        *(_WORD *)(v791 + 48) = *(_WORD *)&v793[48];
        v564 = *(_OWORD *)&v793[32];
        v565 = *(_OWORD *)v793;
        v563[1] = *(_OWORD *)&v793[16];
        v563[2] = v564;
        *v563 = v565;
        *((_DWORD *)a2 + 263) = *(_DWORD *)(a1 + 7312);
        *(_BYTE *)(v562 + 150) = v385;
        WTF::String::operator=((unint64_t *)(v562 + 152), (WTF::AtomStringImpl *)&v796, v566, v567, v568, v569, v570, v571);
        WTF::String::operator=((unint64_t *)v781, (WTF::AtomStringImpl *)&v797, v572, v573, v574, v575, v576, v577);
        v387 = v797;
      }
    }
    else
    {
      v418 = *v23;
      if (v409)
      {
        if (v418 == 21)
          goto LABEL_422;
        if (v418 != 20 && (v418 & 0x100000) == 0)
        {
          if (!*v781)
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected '=' following assignment pattern");
          goto LABEL_427;
        }
      }
      else if (v418 != 20 && (v418 & 0x100000) == 0)
      {
        if (!*v781)
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse assignment pattern");
        goto LABEL_427;
      }
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    }
LABEL_427:
    v797 = 0;
    if (v387)
    {
      if (*(_DWORD *)v387 == 2)
      {
        WTF::StringImpl::~StringImpl(v387, v410, v411, v412, v413, v414, v415, v416);
        WTF::fastFree(v524, v525, v526, v527, v528, v529, v530, v531);
      }
      else
      {
        *(_DWORD *)v387 -= 2;
      }
    }
    v429 = v796;
    v796 = 0;
    if (v429)
    {
      if (*(_DWORD *)v429 == 2)
      {
        WTF::StringImpl::~StringImpl(v429, v410, v411, v412, v413, v414, v415, v416);
        WTF::fastFree(v532, v533, v534, v535, v536, v537, v538, v539);
      }
      else
      {
        *(_DWORD *)v429 -= 2;
      }
    }
    return a9.n128_f64[0];
  }
  v796 = 0;
  v797 = 0;
  v250 = (__int128 *)v791;
  *(_OWORD *)v793 = *(_OWORD *)v791;
  *(_DWORD *)&v793[16] = *((_DWORD *)a2 + 263);
  *(_OWORD *)&v793[20] = *v761;
  *(_OWORD *)&v793[34] = *(_OWORD *)((char *)v761 + 14);
  *(int32x2_t *)v251.i8 = v10[13];
  v252 = *(_QWORD *)(a1 + 7288);
  v253 = *(_BYTE *)(v252 + 56);
  v251.i64[1] = *(_QWORD *)v252;
  *(int32x4_t *)&v793[56] = vrev64q_s32(v251);
  v794 = v253;
  v795 = *(_BYTE *)(v252 + 150);
  v254 = *(WTF::StringImpl **)(v252 + 152);
  if (v254)
    *(_DWORD *)v254 += 2;
  v796 = v254;
  v255 = *v781;
  if (*v781)
    *(_DWORD *)v255 += 2;
  v797 = v255;
  *(_DWORD *)&v793[16] = v772;
  *(_BYTE *)(v252 + 150) = 0;
  v256 = *(WTF::StringImpl **)(v252 + 152);
  *(_QWORD *)(v252 + 152) = 0;
  if (v256)
  {
    if (*(_DWORD *)v256 == 2)
    {
      WTF::StringImpl::~StringImpl(v256, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      WTF::fastFree(v430, v431, v432, v433, v434, v435, v436, v437);
    }
    else
    {
      *(_DWORD *)v256 -= 2;
    }
  }
  v257 = *(_QWORD *)(v252 + 88);
  v258 = *(_QWORD *)(v252 + 96);
  v259 = v762;
  v260 = (__int16 *)(v257 + 2 * v763);
  *(_QWORD *)(v252 + 80) = v260;
  *(_QWORD *)(v252 + 112) = v257 + 2 * v259;
  *(_DWORD *)(v252 + 20) = 0;
  *(_DWORD *)(v252 + 36) = 0;
  if ((unint64_t)v260 >= v258)
    v261 = 0;
  else
    v261 = *v260;
  *(_WORD *)(v252 + 176) = v261;
  v262 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)v262 = v765;
  *(_BYTE *)(v262 + 56) = v764;
  v263 = *(_DWORD *)(a1 + 7400);
  v264 = *(_DWORD *)(a1 + 7412);
  v265 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v263;
  *(_DWORD *)(a1 + 7448) = v264;
  *(_DWORD *)(a1 + 7452) = v265;
  *(_DWORD *)(v262 + 4) = v263;
  v266 = *(_DWORD *)(a1 + 12);
  if (!v266)
  {
    __break(0xC471u);
    JUMPOUT(0x197EEB5ACLL);
  }
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v262, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v266 - 1) + 9) & 1, (uint64_t)a5, a6, a7, a8);
  *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v766;
  *v250 = v800;
  v270 = v772;
  *(_DWORD *)(a1 + 7312) = v772;
  *(_DWORD *)(a1 + 7316) = v769;
  v271 = v777;
  *(_OWORD *)v777 = v798;
  v271[2] = v799;
  v10[5].i8[4] = v768;
  v10[5].i8[5] = v767;
  *((_DWORD *)a2 + 263) = v270;
  v272 = *(WTF::StringImpl **)(a1 + 7360);
  *(_QWORD *)(a1 + 7360) = 0;
  if (v272)
  {
    if (*(_DWORD *)v272 == 2)
    {
      WTF::StringImpl::~StringImpl(v272, v267, v268, v269, (uint64_t)a5, a6, a7, a8);
      WTF::fastFree(v438, v439, v440, v441, v442, v443, v444, v445);
    }
    else
    {
      *(_DWORD *)v272 -= 2;
    }
  }
  v273 = *v23;
  if (*v770 != 2)
  {
    v274 = 0;
    goto LABEL_316;
  }
  if (v273 == 12)
  {
    if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896)
      && !v10[10].i8[4])
    {
      v732 = *(_DWORD *)(a1 + 7400);
      v733 = *(_DWORD *)(a1 + 7412);
      v734 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v732;
      *(_DWORD *)(a1 + 7448) = v733;
      *(_DWORD *)(a1 + 7452) = v734;
      v735 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v735 + 4) = v732;
      v736 = *(_DWORD *)(a1 + 12);
      if (!v736)
      {
        __break(0xC471u);
        JUMPOUT(0x197EEB69CLL);
      }
      v737 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v736 - 1) + 9) & 1;
      *(_BYTE *)(v735 + 56) = 0;
      v273 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v735, a1 + 7368, 0, v737, (uint64_t)a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v273;
      v274 = 1;
      goto LABEL_645;
    }
    LODWORD(v789) = 0;
    v250 = (__int128 *)v791;
LABEL_439:
    v818 = *v250;
    LODWORD(v785) = *(_DWORD *)(a1 + 7316);
    *(_OWORD *)v815 = *(_OWORD *)v777;
    *(_QWORD *)&v815[16] = v777[2];
    LODWORD(v784) = v10[5].u8[4];
    v782 = v10[5].u8[5];
    v780 = *((_DWORD *)a2 + 263);
    v778 = *(int *)(a1 + 7408);
    v462 = *(int *)(a1 + 7404);
    v463 = *(_QWORD *)(a1 + 7288);
    LODWORD(v779) = *(_DWORD *)(v463 + 4);
    LODWORD(v788) = *(_DWORD *)v463;
    LODWORD(v786) = *(unsigned __int8 *)(v463 + 56);
    v464 = *(_DWORD *)(a1 + 7400);
    v465 = *(_DWORD *)(a1 + 7412);
    *(_DWORD *)(a1 + 7444) = v464;
    *(_DWORD *)(a1 + 7448) = v465;
    *(_DWORD *)(a1 + 7452) = v462;
    *(_DWORD *)(v463 + 4) = v464;
    v466 = *(_DWORD *)(a1 + 12);
    if (!v466)
    {
      __break(0xC471u);
      JUMPOUT(0x197EEB66CLL);
    }
    v467 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v466 - 1) + 9) & 1;
    *(_BYTE *)(v463 + 56) = 0;
    v475 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v463, a1 + 7368, 0, v467, (uint64_t)a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v475;
    v476 = *(_QWORD *)(a1 + 7288);
    *(_BYTE *)(v476 + 150) = 0;
    v477 = *(WTF::StringImpl **)(v476 + 152);
    *(_QWORD *)(v476 + 152) = 0;
    if (v477)
    {
      if (*(_DWORD *)v477 == 2)
      {
        WTF::StringImpl::~StringImpl(v477, v468, v469, v470, v471, v472, v473, v474);
        WTF::fastFree(v578, v579, v580, v581, v582, v583, v584, v585);
      }
      else
      {
        *(_DWORD *)v477 -= 2;
      }
    }
    v478 = *(_QWORD *)(v476 + 88);
    v479 = *(_QWORD *)(v476 + 96);
    v480 = (__int16 *)(v478 + 2 * v778);
    *(_QWORD *)(v476 + 80) = v480;
    *(_QWORD *)(v476 + 112) = v478 + 2 * v462;
    *(_DWORD *)(v476 + 20) = 0;
    *(_DWORD *)(v476 + 36) = 0;
    if ((unint64_t)v480 >= v479)
      v481 = 0;
    else
      v481 = *v480;
    v103 = v787;
    v482 = (int)v788;
    v483 = (char)v786;
    *(_WORD *)(v476 + 176) = v481;
    v484 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v484 = v482;
    *(_BYTE *)(v484 + 56) = v483;
    v485 = *(_DWORD *)(a1 + 7400);
    v486 = *(_DWORD *)(a1 + 7412);
    v487 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v485;
    *(_DWORD *)(a1 + 7448) = v486;
    *(_DWORD *)(a1 + 7452) = v487;
    *(_DWORD *)(v484 + 4) = v485;
    v488 = *(_DWORD *)(a1 + 12);
    if (!v488)
    {
      __break(0xC471u);
      JUMPOUT(0x197EEB674);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v484, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v488 - 1) + 9) & 1, v471, v472, v473, v474);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v779;
    *(_OWORD *)v791 = v818;
    v489 = v780;
    *(_DWORD *)(a1 + 7312) = v780;
    *(_DWORD *)(a1 + 7316) = (_DWORD)v785;
    a9.n128_u64[0] = *(_QWORD *)v815;
    v490 = v777;
    *(_OWORD *)v777 = *(_OWORD *)v815;
    v490[2] = *(_QWORD *)&v815[16];
    v10[5].i8[4] = (char)v784;
    v10[5].i8[5] = v782;
    *((_DWORD *)a2 + 263) = v489;
    v491 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (v491)
    {
      if (*(_DWORD *)v491 == 2)
      {
        WTF::StringImpl::~StringImpl(v491, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
        WTF::fastFree(v586, v587, v588, v589, v590, v591, v592, v593);
      }
      else
      {
        *(_DWORD *)v491 -= 2;
      }
    }
    if (v475 != 38)
      goto LABEL_541;
LABEL_367:
    if (v103 == 2)
    {
      v359 = *(_DWORD *)(a1 + 12);
      if (!v359)
      {
        __break(0xC471u);
        JUMPOUT(0x197EEB5C4);
      }
      v360 = v359 - 1;
      v361 = *(_QWORD *)a1 + 720 * v360;
      v364 = *(_DWORD *)(v361 + 180);
      v363 = (_DWORD *)(v361 + 180);
      v362 = v364;
      v365 = (uint64_t *)(v363 - 3);
      v366 = v771 == v364;
      if (v771 > v364)
      {
        if (v771 > *(unsigned int *)(*(_QWORD *)a1 + 720 * v360 + 176))
          WTF::Vector<WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v363 - 3), (void *)v771, a3, a4, (uint64_t)a5, a6, a7, a8);
        v727 = *v365;
        if (*v365)
        {
          v728 = *v363;
          if (v771 != v728)
          {
            v729 = v727 + 72 * v771;
            v730 = v727 + 72 * v728;
            *(_QWORD *)&v731 = -1;
            *((_QWORD *)&v731 + 1) = -1;
            do
            {
              *(_QWORD *)v730 = 0x800000000;
              *(_OWORD *)(v730 + 8) = v731;
              *(_OWORD *)(v730 + 24) = v731;
              *(_OWORD *)(v730 + 40) = v731;
              *(_OWORD *)(v730 + 56) = v731;
              v730 += 72;
            }
            while (v730 != v729);
          }
        }
      }
      else if (!v366)
      {
        v367 = 72 * v362 - 72 * v771;
        v368 = (unint64_t *)(*v365 + 72 * v771 + 8);
        do
        {
          if (*((_DWORD *)v368 - 1) != 8)
            WTF::fastFree(*v368, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
          v368 += 9;
          v367 -= 72;
        }
        while (v367);
      }
      *v363 = v771;
    }
    memset(&v815[8], 0, 36);
    *(_QWORD *)v815 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
    if ((_DWORD)v789)
      v369 = 11;
    else
      v369 = 6;
    v370 = v10[21].i8[6];
    v10[21].i8[6] = v369;
    if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(a1, (uint64_t)a2, 2, 1, 0, 1, SDWORD2(v801), (uint64_t)v815, 0, 0) & 1) != 0)
    {
      JSC::ASTBuilder::createArrowFunctionExpr((uint64_t)a2, (uint64_t)&v801, (uint64_t)v815, a4, (uint64_t)a5, a6, a7, a8);
    }
    else if (*v23 == 20 || (*v23 & 0x100000) != 0)
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    }
    else if (!*v781)
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse arrow function expression");
    }
    v371 = 0;
    v10[21].i8[6] = v370;
    goto LABEL_382;
  }
  v274 = 0;
LABEL_645:
  v250 = (__int128 *)v791;
  v103 = v787;
LABEL_316:
  LODWORD(v789) = v274;
  if (v273 != 2)
  {
    if (v273 == 12)
      goto LABEL_439;
    isAllowedIdentifierLet = JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, v273, *(_QWORD **)(a1 + 7376));
    v610 = *(_DWORD *)(a1 + 7368);
    if (!isAllowedIdentifierLet)
    {
      if (v610 != 545)
      {
        if (v610 != 1048592)
        {
          if (v610 != 546)
            goto LABEL_541;
LABEL_755:
          if (!v10[5].i8[4])
            goto LABEL_883;
          v748 = *(_DWORD *)(a1 + 12);
          if (!v748)
          {
            __break(0xC471u);
            JUMPOUT(0x197EEB6A4);
          }
          v250 = (__int128 *)v791;
          if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v748 - 1) + 10) & 0x102000) != 0
            || *(_DWORD *)(a1 + 7480) == 1)
          {
LABEL_883:
            if (!*v781)
            {
              *(_QWORD *)v815 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[40],char const*>(a1, (const char **)v815);
            }
            goto LABEL_541;
          }
          goto LABEL_439;
        }
        v746 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        v747 = **(_QWORD **)(a1 + 7376);
        if (v747 != *(_QWORD *)(v746 + 496))
        {
LABEL_754:
          if (v747 != *(_QWORD *)(v746 + 128))
            goto LABEL_541;
          goto LABEL_755;
        }
      }
      v749 = *(_DWORD *)(a1 + 12);
      if (!v749)
      {
        __break(0xC471u);
        JUMPOUT(0x197EEB6ACLL);
      }
      v750 = v749 - 1;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v750 + 9) & 1) != 0
        || (*(_BYTE *)(*(_QWORD *)a1 + 720 * v750 + 11) & 2) != 0)
      {
        if (v610 != 1048592)
          goto LABEL_541;
        v746 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        v747 = **(_QWORD **)(a1 + 7376);
        goto LABEL_754;
      }
    }
    if (v610 != 546
      && (v610 != 1048592
       || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128)))
    {
      v250 = (__int128 *)v791;
      goto LABEL_439;
    }
    goto LABEL_755;
  }
  *(_OWORD *)v808 = *v250;
  v275 = *(_DWORD *)(a1 + 7316);
  v818 = *(_OWORD *)v777;
  *(_QWORD *)v819 = v777[2];
  v276 = v10[5].u8[4];
  LODWORD(v786) = v10[5].u8[5];
  LODWORD(v785) = *((_DWORD *)a2 + 263);
  v277 = *(int *)(a1 + 7408);
  v278 = *(int *)(a1 + 7404);
  v279 = *(_QWORD *)(a1 + 7288);
  LODWORD(v784) = *(_DWORD *)(v279 + 4);
  v782 = *(_DWORD *)v279;
  v780 = *(unsigned __int8 *)(v279 + 56);
  v280 = *(_DWORD *)(a1 + 7400);
  v281 = *(_DWORD *)(a1 + 7412);
  *(_DWORD *)(a1 + 7444) = v280;
  *(_DWORD *)(a1 + 7448) = v281;
  v778 = v278;
  v779 = v277;
  *(_DWORD *)(a1 + 7452) = v278;
  *(_DWORD *)(v279 + 4) = v280;
  v282 = *(_DWORD *)(a1 + 12);
  if (!v282)
  {
    __break(0xC471u);
    JUMPOUT(0x197EEB5B4);
  }
  v283 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v282 - 1) + 9) & 1;
  *(_BYTE *)(v279 + 56) = 0;
  v284 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v279, a1 + 7368, 0, v283, (uint64_t)a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v284;
  LODWORD(v788) = v276;
  if (v284 == 3)
  {
    v375 = *(_DWORD *)(a1 + 7400);
    v376 = *(_DWORD *)(a1 + 7412);
    v377 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v375;
    *(_DWORD *)(a1 + 7448) = v376;
    *(_DWORD *)(a1 + 7452) = v377;
    v378 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v378 + 4) = v375;
    v379 = *(_DWORD *)(a1 + 12);
    if (!v379)
    {
      __break(0xC471u);
      JUMPOUT(0x197EEB65CLL);
    }
    v340 = v275;
    v380 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v379 - 1) + 9) & 1;
    *(_BYTE *)(v378 + 56) = 0;
    v381 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v378, a1 + 7368, 0, v380, v285, v286, v287, v288);
    *(_DWORD *)(a1 + 7368) = v381;
    v776 = v381 == 38;
LABEL_358:
    v341 = *(_QWORD *)(a1 + 7288);
    *(_BYTE *)(v341 + 150) = 0;
    v342 = *(WTF::StringImpl **)(v341 + 152);
    *(_QWORD *)(v341 + 152) = 0;
    if (v342)
    {
      if (*(_DWORD *)v342 == 2)
      {
        WTF::StringImpl::~StringImpl(v342, v339, v333, v334, v335, v336, v337, v338);
        WTF::fastFree(v492, v493, v494, v495, v496, v497, v498, v499);
      }
      else
      {
        *(_DWORD *)v342 -= 2;
      }
    }
    v343 = *(_QWORD *)(v341 + 88);
    v344 = *(_QWORD *)(v341 + 96);
    v345 = v778;
    v346 = (__int16 *)(v343 + 2 * v779);
    *(_QWORD *)(v341 + 80) = v346;
    *(_QWORD *)(v341 + 112) = v343 + 2 * v345;
    *(_DWORD *)(v341 + 20) = 0;
    *(_DWORD *)(v341 + 36) = 0;
    if ((unint64_t)v346 >= v344)
      v347 = 0;
    else
      v347 = *v346;
    v348 = v782;
    v349 = v780;
    *(_WORD *)(v341 + 176) = v347;
    v350 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v350 = v348;
    *(_BYTE *)(v350 + 56) = v349;
    v351 = *(_DWORD *)(a1 + 7400);
    v352 = *(_DWORD *)(a1 + 7412);
    v353 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v351;
    *(_DWORD *)(a1 + 7448) = v352;
    *(_DWORD *)(a1 + 7452) = v353;
    *(_DWORD *)(v350 + 4) = v351;
    v354 = *(_DWORD *)(a1 + 12);
    if (!v354)
    {
      __break(0xC471u);
      JUMPOUT(0x197EEB5BCLL);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v350, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v354 - 1) + 9) & 1, v335, v336, v337, v338);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = (_DWORD)v784;
    *(_OWORD *)v791 = *(_OWORD *)v808;
    v355 = (int)v785;
    *(_DWORD *)(a1 + 7312) = (_DWORD)v785;
    *(_DWORD *)(a1 + 7316) = v340;
    a9.n128_u64[0] = v818;
    v356 = v777;
    *(_OWORD *)v777 = v818;
    v356[2] = *(_QWORD *)v819;
    v10[5].i8[4] = (char)v788;
    v10[5].i8[5] = (char)v786;
    *((_DWORD *)a2 + 263) = v355;
    v357 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (v357)
    {
      v358 = v776;
      if (*(_DWORD *)v357 == 2)
      {
        WTF::StringImpl::~StringImpl(v357, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
        WTF::fastFree(v500, v501, v502, v503, v504, v505, v506, v507);
        if ((v358 & 1) == 0)
          goto LABEL_541;
      }
      else
      {
        *(_DWORD *)v357 -= 2;
        if ((v358 & 1) == 0)
          goto LABEL_541;
      }
    }
    else if ((v776 & 1) == 0)
    {
      goto LABEL_541;
    }
    goto LABEL_367;
  }
  v806.n128_u64[0] = *(_QWORD *)(a1 + 7216);
  v289 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  *(_QWORD *)&v816 = v289;
  *((_QWORD *)&v816 + 1) = v290;
  *(_QWORD *)&v817[0] = a1;
  if (*(_DWORD *)(v289 + 12) <= v290)
  {
    __break(0xC471u);
    JUMPOUT(0x197EEB63CLL);
  }
  *(_DWORD *)(*(_QWORD *)v289 + 720 * v290 + 10) = *(_DWORD *)(*(_QWORD *)v289
                                                                             + 720 * v290
                                                                             + 10) & 0xFE8F007F | 0x1409980;
  v295 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v295)
  {
    __break(0xC471u);
    JUMPOUT(0x197EEB644);
  }
  if ((_DWORD)v295 != 1)
  {
    v296 = v295 - 1;
    v297 = *(_QWORD *)a1;
    if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v295 - 1) + 10) & 0x400000) != 0)
    {
      v298 = 720 * v295;
      while (1)
      {
        v299 = v298 - 720;
        if (v298 == 720)
          break;
        v300 = *(_BYTE *)(v297 + v298 - 1428);
        v298 -= 720;
        if ((v300 & 0x40) != 0)
        {
          if (*(_BYTE *)(v297 + v299 - 712) != 2)
            *(_BYTE *)(v297 + 720 * v296 + 8) = 0;
          break;
        }
      }
    }
  }
  v301 = 0;
  LOBYTE(v807) = 0;
  *(_QWORD *)v815 = 0;
  v302 = *v23;
  while (2)
  {
    if (v302 == 37)
    {
      v546 = *(_DWORD *)(a1 + 7400);
      v547 = *(_DWORD *)(a1 + 7412);
      v548 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v546;
      *(_DWORD *)(a1 + 7448) = v547;
      *(_DWORD *)(a1 + 7452) = v548;
      v549 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v549 + 4) = v546;
      v550 = *(_DWORD *)(a1 + 12);
      if (!v550)
      {
        __break(0xC471u);
        JUMPOUT(0x197EEB5D4);
      }
      v551 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v550 - 1) + 9) & 1;
      *(_BYTE *)(v549 + 56) = 0;
      v552 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v549, a1 + 7368, 0, v551, v291, v292, v293, v294);
      *(_DWORD *)(a1 + 7368) = v552;
      if (v552 == 546
        || v552 == 1048592
        && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
        if (!v10[5].i8[4])
          goto LABEL_884;
        v751 = *(_DWORD *)(a1 + 12);
        if (!v751)
        {
          __break(0xC471u);
          JUMPOUT(0x197EEB5CCLL);
        }
        if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v751 - 1) + 10) & 0x102000) != 0
          || *(_DWORD *)(a1 + 7480) == 1)
        {
LABEL_884:
          if (!*v781)
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a parameter name in an async function");
          goto LABEL_727;
        }
      }
      JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, (WTF::AtomStringImpl *)&v806, 4, (char ***)v815, &v807, 0, v293, v294);
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_727;
      if (*v23 == 6)
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Rest parameter should be the last parameter in a function declaration");
        goto LABEL_727;
      }
      v306 = 0;
      LODWORD(v307) = 1;
    }
    else
    {
      if (v302 == 3)
        goto LABEL_351;
      if (!JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::SyntaxChecker>(a1, (WTF::AtomStringImpl *)&v806, 4, (char ***)v815, &v807, 0, v293, v294))
      {
        if (*v23 == 20 || (*v23 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        }
        else if (!*v781)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
        }
        goto LABEL_727;
      }
      v306 = JSC::Parser<JSC::Lexer<char16_t>>::parseDefaultValueForDestructuringPattern<JSC::SyntaxChecker>(a1, &v806, v304, v305, v291, v292, v293, v294);
      v307 = *(_QWORD *)(a1 + 7360);
      if (v307)
        goto LABEL_727;
      v301 |= v306 != 0;
    }
    if (*(_QWORD *)v815)
    {
      if ((v301 & 1) != 0)
      {
        v804 = **(_QWORD **)v815;
        v752 = "' not allowed in function with default parameter values";
      }
      else
      {
        if (!(_BYTE)v807)
        {
          v804 = **(_QWORD **)v815;
          if ((_DWORD)v307)
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[48]>(a1, &v804);
          else
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[35]>(a1, &v804);
          goto LABEL_727;
        }
        v804 = **(_QWORD **)v815;
        v752 = "' not allowed in function with destructuring parameters";
      }
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[56]>(a1, &v804, v752);
      goto LABEL_727;
    }
    if (v306)
      v308 = 1;
    else
      v308 = v307;
    if ((v308 & 1) != 0 || (_BYTE)v807)
    {
      v315 = *(_DWORD *)(a1 + 12);
      if (!v315)
      {
        __break(0xC471u);
        JUMPOUT(0x197EEB5DCLL);
      }
      v316 = *(_QWORD *)a1 + 720 * (v315 - 1);
      *(_DWORD *)(v316 + 10) = *(_DWORD *)(v316 + 10) & 0xFB7FFFFF | 0x4000000;
    }
    if (*v23 != 6)
      LOBYTE(v307) = 1;
    if ((v307 & 1) == 0)
    {
      v309 = *(_DWORD *)(a1 + 7400);
      v310 = *(_DWORD *)(a1 + 7412);
      v311 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v309;
      *(_DWORD *)(a1 + 7448) = v310;
      *(_DWORD *)(a1 + 7452) = v311;
      v312 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v312 + 4) = v309;
      v313 = *(_DWORD *)(a1 + 12);
      if (!v313)
      {
        __break(0xC471u);
        JUMPOUT(0x197EEB57CLL);
      }
      v314 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v313 - 1) + 9) & 1;
      *(_BYTE *)(v312 + 56) = 0;
      v302 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v312, a1 + 7368, 0, v314, v291, v292, v293, v294);
      *(_DWORD *)(a1 + 7368) = v302;
      continue;
    }
    break;
  }
  if (*v23 != 3)
  {
LABEL_727:
    v324 = 0;
    v103 = v787;
    goto LABEL_353;
  }
LABEL_351:
  v317 = *(_DWORD *)(a1 + 7400);
  v318 = *(_DWORD *)(a1 + 7412);
  v319 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v317;
  *(_DWORD *)(a1 + 7448) = v318;
  *(_DWORD *)(a1 + 7452) = v319;
  v320 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v320 + 4) = v317;
  v321 = *(_DWORD *)(a1 + 12);
  v103 = v787;
  if (!v321)
  {
    __break(0xC471u);
    JUMPOUT(0x197EEB64CLL);
  }
  v322 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v321 - 1) + 9) & 1;
  *(_BYTE *)(v320 + 56) = 0;
  v323 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v320, a1 + 7368, 0, v322, v291, v292, v293, v294);
  *(_DWORD *)(a1 + 7368) = v323;
  v324 = v323 == 38;
LABEL_353:
  if (!*v781)
  {
    *(_QWORD *)&v817[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v810, (uint64_t *)a1, 0, v305, v291, v292, v293, v294);
    v332 = *(_QWORD *)&v811[8];
    if (*(_QWORD *)&v811[8])
    {
      *(_QWORD *)&v811[8] = 0;
      *(_DWORD *)&v811[16] = 0;
      WTF::fastFree(v332, v325, v326, v327, v328, v329, v330, v331);
    }
    v776 = v324;
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v810, (WTF::AtomStringImpl *)v325, v326, v327, v328, v329, v330, v331);
    v339 = *(WTF::AtomStringImpl **)&v817[0];
    if (*(_QWORD *)&v817[0])
    {
      *(_QWORD *)&v817[0] = 0;
      JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v815, (uint64_t *)v339, 0, v334, v335, v336, v337, v338);
      v745 = *(_QWORD *)&v815[24];
      if (*(_QWORD *)&v815[24])
      {
        *(_QWORD *)&v815[24] = 0;
        *(_DWORD *)&v815[32] = 0;
        WTF::fastFree(v745, v738, v739, v740, v741, v742, v743, v744);
      }
      JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v815, (WTF::AtomStringImpl *)v738, v739, v740, v741, v742, v743, v744);
      v103 = v787;
    }
    v340 = v275;
    goto LABEL_358;
  }
  JSC::Parser<JSC::Lexer<char16_t>>::AutoPopScopeRef::~AutoPopScopeRef((uint64_t)&v816, v303, v304, v305, v291, v292, v293, v294);
LABEL_541:
  if (v110 == 38)
  {
    if (!*v781)
    {
      JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), (WTF::AtomStringImpl *)*(unsigned int *)&v793[56], *(unsigned int *)&v793[60], a4, (uint64_t)a5, a6, a7, a8);
      v615 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v615 = *(_DWORD *)&v793[68];
      *(_BYTE *)(v615 + 56) = v794;
      v616 = *(_DWORD *)(a1 + 7400);
      v617 = *(_DWORD *)(a1 + 7412);
      v618 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v616;
      *(_DWORD *)(a1 + 7448) = v617;
      *(_DWORD *)(a1 + 7452) = v618;
      *(_DWORD *)(v615 + 4) = v616;
      v619 = *(_DWORD *)(a1 + 12);
      if (!v619)
      {
        __break(0xC471u);
        JUMPOUT(0x197EEB68CLL);
      }
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v615, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v619 - 1) + 9) & 1, v611, v612, v613, v614);
      v620 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v620 + 4) = *(_DWORD *)&v793[64];
      v621 = (_OWORD *)v791;
      *(_WORD *)(v791 + 48) = *(_WORD *)&v793[48];
      v622 = *(_OWORD *)&v793[32];
      v623 = *(_OWORD *)v793;
      v621[1] = *(_OWORD *)&v793[16];
      v621[2] = v622;
      *v621 = v623;
      *((_DWORD *)a2 + 263) = *(_DWORD *)(a1 + 7312);
      *(_BYTE *)(v620 + 150) = v795;
      WTF::String::operator=((unint64_t *)(v620 + 152), (WTF::AtomStringImpl *)&v796, v624, v625, v626, v627, v628, v629);
      WTF::String::operator=((unint64_t *)v781, (WTF::AtomStringImpl *)&v797, v630, v631, v632, v633, v634, v635);
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    }
    v371 = 0;
  }
  else
  {
    JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), (WTF::AtomStringImpl *)*(unsigned int *)&v793[56], *(unsigned int *)&v793[60], a4, (uint64_t)a5, a6, a7, a8);
    v661 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v661 = *(_DWORD *)&v793[68];
    *(_BYTE *)(v661 + 56) = v794;
    v662 = *(_DWORD *)(a1 + 7400);
    v663 = *(_DWORD *)(a1 + 7412);
    v664 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v662;
    *(_DWORD *)(a1 + 7448) = v663;
    *(_DWORD *)(a1 + 7452) = v664;
    *(_DWORD *)(v661 + 4) = v662;
    v665 = *(_DWORD *)(a1 + 12);
    if (!v665)
    {
      __break(0xC471u);
      JUMPOUT(0x197EEB684);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v661, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v665 - 1) + 9) & 1, v657, v658, v659, v660);
    v666 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v666 + 4) = *(_DWORD *)&v793[64];
    v667 = (_OWORD *)v791;
    *(_WORD *)(v791 + 48) = *(_WORD *)&v793[48];
    v668 = *(_OWORD *)&v793[32];
    v669 = *(_OWORD *)v793;
    v667[1] = *(_OWORD *)&v793[16];
    v667[2] = v668;
    *v667 = v669;
    *((_DWORD *)a2 + 263) = *(_DWORD *)(a1 + 7312);
    *(_BYTE *)(v666 + 150) = v795;
    WTF::String::operator=((unint64_t *)(v666 + 152), (WTF::AtomStringImpl *)&v796, v670, v671, v672, v673, v674, v675);
    WTF::String::operator=((unint64_t *)v781, (WTF::AtomStringImpl *)&v797, v676, v677, v678, v679, v680, v681);
    v371 = 1;
  }
LABEL_382:
  v372 = v797;
  v797 = 0;
  v103 = v787;
  if (v372)
  {
    if (*(_DWORD *)v372 == 2)
    {
      WTF::StringImpl::~StringImpl(v372, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      WTF::fastFree(v446, v447, v448, v449, v450, v451, v452, v453);
    }
    else
    {
      *(_DWORD *)v372 -= 2;
    }
  }
  v373 = v796;
  v796 = 0;
  if (v373)
  {
    if (*(_DWORD *)v373 == 2)
    {
      WTF::StringImpl::~StringImpl(v373, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      WTF::fastFree(v454, v455, v456, v457, v458, v459, v460, v461);
    }
    else
    {
      *(_DWORD *)v373 -= 2;
    }
  }
  if (v371)
    goto LABEL_135;
  return a9.n128_f64[0];
}

double JSC::Parser<JSC::Lexer<char16_t>>::parseYieldExpression<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  char v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __int16 *v54;
  __int16 v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  char *v61;
  _OWORD *v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  int v98;
  int v99;
  char v100;
  char v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  int v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v8 = *(_DWORD *)(a1 + 12);
  if (!v8)
  {
    __break(0xC471u);
    goto LABEL_48;
  }
  v10 = v8 - 1;
  v11 = *(_QWORD *)a1;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * v10 + 10) & 0x1200) == 0x200)
  {
    if (*(_DWORD *)(a1 + 7316))
    {
      v99 = *(_DWORD *)(a1 + 7316);
      v111 = *(_OWORD *)(a1 + 7400);
      v109 = *(_QWORD *)(a1 + 7416);
      v110 = *(_DWORD *)(a1 + 7424);
      v108 = *(_OWORD *)(a1 + 7296);
      v106 = *(_OWORD *)(a1 + 7320);
      v107 = *(_QWORD *)(a1 + 7336);
      v100 = *(_BYTE *)(a1 + 7345);
      v101 = *(_BYTE *)(a1 + 7344);
      v103 = *(_DWORD *)(a2 + 1052);
      v102 = *(int *)(a1 + 7408);
      v12 = *(int *)(a1 + 7404);
      v13 = *(_QWORD *)(a1 + 7288);
      v15 = *(_DWORD *)v13;
      v16 = *(_DWORD *)(v13 + 4);
      v17 = *(_BYTE *)(v13 + 56);
      v18 = *(_DWORD *)(a1 + 7400);
      v19 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v18;
      *(_DWORD *)(a1 + 7448) = v19;
      *(_DWORD *)(a1 + 7452) = v12;
      *(_DWORD *)(v13 + 4) = v18;
      v20 = *(_BYTE *)(v11 + 720 * v10 + 9) & 1;
      *(_BYTE *)(v13 + 56) = 0;
      v25 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v13, a1 + 7368, 0, v20, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v25;
      v26 = *(_QWORD *)(a1 + 7288);
      if (*(_BYTE *)(v26 + 56))
      {
LABEL_5:
        v27 = *(_QWORD *)(a2 + 8);
        v28 = *(_QWORD *)v27;
        v29 = *(_QWORD *)(v27 + 8);
        if ((unint64_t)(v29 - *(_QWORD *)v27) <= 0x4F)
        {
          if (v29)
          {
            v93 = (_QWORD *)(v27 + 24);
            v94 = v29 - 8000;
            v112 = v29 - 8000;
            v95 = *(unsigned int *)(v27 + 36);
            if ((_DWORD)v95 == *(_DWORD *)(v27 + 32))
            {
              v96 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v95 + 1, (unint64_t)&v112);
              v95 = *(unsigned int *)(v27 + 36);
              *(_QWORD *)(*(_QWORD *)(v27 + 24) + 8 * v95) = *v96;
            }
            else
            {
              *(_QWORD *)(*v93 + 8 * v95) = v94;
            }
            *(_DWORD *)(v27 + 36) = v95 + 1;
          }
          v28 = WTF::fastMalloc((WTF *)0x1F40);
          *(_QWORD *)(v27 + 8) = v28 + 8000;
        }
        *(_QWORD *)v27 = v28 + 80;
        *(_DWORD *)(v28 + 8) = v111;
        *(int32x2_t *)(v28 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v111 + 4));
        *(_DWORD *)(v28 + 20) = -1;
        *(_BYTE *)(v28 + 24) = 0;
        *(_BYTE *)(v28 + 25) = 126;
        *(_BYTE *)(v28 + 26) = 0;
        *(_QWORD *)&v30 = -1;
        *((_QWORD *)&v30 + 1) = -1;
        *(_OWORD *)(v28 + 28) = v30;
        *(_OWORD *)(v28 + 44) = v30;
        *(_DWORD *)(v28 + 60) = -1;
        *(_QWORD *)v28 = &off_1E358AD80;
        *(_QWORD *)(v28 + 64) = 0;
        *(_BYTE *)(v28 + 72) = 0;
        return *(double *)&v30;
      }
      v98 = v16;
      if (v25 == 191488)
      {
        v34 = *(_DWORD *)(a1 + 7400);
        v35 = *(_DWORD *)(a1 + 7412);
        v36 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v34;
        *(_DWORD *)(a1 + 7448) = v35;
        *(_DWORD *)(a1 + 7452) = v36;
        *(_DWORD *)(v26 + 4) = v34;
        v37 = *(_DWORD *)(a1 + 12);
        if (!v37)
        {
          __break(0xC471u);
          JUMPOUT(0x197EEBC6CLL);
        }
        v38 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v37 - 1) + 9) & 1;
        *(_BYTE *)(v26 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v26, a1 + 7368, 0, v38, v21, v22, v23, v24);
      }
      v104 = *(_QWORD *)(a1 + 7416);
      v105 = *(_DWORD *)(a1 + 7424);
      LODWORD(v112) = 0;
      v113 = *(_QWORD *)(a1 + 7496);
      v114 = a1;
      *(_QWORD *)(a1 + 7496) = &v112;
      v39 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, &v112);
      *(_QWORD *)(v114 + 7496) = v113;
      if (v39)
      {
        *(_QWORD *)&v30 = JSC::ASTBuilder::createYield((JSC::ParserArena *)*(_QWORD *)(a2 + 8), (uint64_t)&v111, v39, v25 == 191488, &v109, &v104, (uint64_t *)(a1 + 7444)).n128_u64[0];
        return *(double *)&v30;
      }
      v47 = *(_QWORD *)(a1 + 7288);
      *(_BYTE *)(v47 + 150) = 0;
      v48 = *(WTF::StringImpl **)(v47 + 152);
      *(_QWORD *)(v47 + 152) = 0;
      v50 = v12;
      v49 = (_OWORD *)(a1 + 7296);
      v51 = v102;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
        {
          WTF::StringImpl::~StringImpl(v48, v40, v41, v42, v43, v44, v45, v46);
          WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
          v50 = v12;
          v49 = (_OWORD *)(a1 + 7296);
          v51 = v102;
        }
        else
        {
          *(_DWORD *)v48 -= 2;
        }
      }
      v52 = *(_QWORD *)(v47 + 88);
      v53 = *(_QWORD *)(v47 + 96);
      v54 = (__int16 *)(v52 + 2 * v51);
      *(_QWORD *)(v47 + 80) = v54;
      *(_QWORD *)(v47 + 112) = v52 + 2 * v50;
      *(_DWORD *)(v47 + 20) = 0;
      *(_DWORD *)(v47 + 36) = 0;
      if ((unint64_t)v54 >= v53)
        v55 = 0;
      else
        v55 = *v54;
      *(_WORD *)(v47 + 176) = v55;
      v56 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v56 = v15;
      *(_BYTE *)(v56 + 56) = v17;
      v57 = *(_DWORD *)(a1 + 7400);
      v58 = *(_DWORD *)(a1 + 7412);
      v59 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v57;
      *(_DWORD *)(a1 + 7448) = v58;
      *(_DWORD *)(a1 + 7452) = v59;
      *(_DWORD *)(v56 + 4) = v57;
      v60 = *(_DWORD *)(a1 + 12);
      if (!v60)
      {
        __break(0xC471u);
        JUMPOUT(0x197EEBC74);
      }
      v61 = (char *)v49 + 24;
      v62 = v49;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v56, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v60 - 1) + 9) & 1, v43, v44, v45, v46);
      v70 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v70 + 4) = v98;
      *v62 = v108;
      *(_DWORD *)(a1 + 7312) = v103;
      *(_DWORD *)(a1 + 7316) = v99;
      *(_OWORD *)v61 = v106;
      *((_QWORD *)v61 + 2) = v107;
      *(_BYTE *)(a1 + 7344) = v101;
      *(_BYTE *)(a1 + 7345) = v100;
      *(_DWORD *)(a2 + 1052) = v103;
      v71 = *(WTF::StringImpl **)(a1 + 7360);
      *(_QWORD *)(a1 + 7360) = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2)
        {
          WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
          WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
          v70 = *(_QWORD *)(a1 + 7288);
        }
        else
        {
          *(_DWORD *)v71 -= 2;
        }
      }
      v72 = *(_DWORD *)(a1 + 7400);
      v73 = *(_DWORD *)(a1 + 7412);
      v74 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v72;
      *(_DWORD *)(a1 + 7448) = v73;
      *(_DWORD *)(a1 + 7452) = v74;
      *(_DWORD *)(v70 + 4) = v72;
      v75 = *(_DWORD *)(a1 + 12);
      if (v75)
      {
        v76 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v75 - 1) + 9) & 1;
        *(_BYTE *)(v70 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v70, a1 + 7368, 0, v76, v66, v67, v68, v69);
        goto LABEL_5;
      }
      __break(0xC471u);
LABEL_48:
      JUMPOUT(0x197EEBC64);
    }
    v33 = *(_DWORD *)(a1 + 7368);
    if (v33 != 20 && (v33 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot use yield expression within parameters");
      return *(double *)&v30;
    }
LABEL_11:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return *(double *)&v30;
  }
  v31 = *(_DWORD *)(a1 + 7368);
  if (v31 == 20 || (v31 & 0x100000) != 0)
    goto LABEL_11;
  if (!*(_QWORD *)(a1 + 7360))
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot use yield expression out of generator");
  return *(double *)&v30;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::tryParseDestructuringPatternExpression<JSC::ASTBuilder>(uint64_t a1, uint64_t a2)
{
  return JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, 5, 1, 0, 0, 2, 0);
}

const char *JSC::Parser<JSC::Lexer<char16_t>>::metaPropertyName<JSC::ASTBuilder>(uint64_t a1)
{
  const char *result;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1) & 1) != 0)
    return "new.target";
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1) & 1) != 0)
    return "import.meta";
  result = (const char *)4150;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseTemplateString<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  __int128 v27;

  if ((a3 & 1) == 0)
  {
    v11 = *(_DWORD *)(a1 + 7368);
    if (v11 != 1)
    {
      if (v11 != 20 && (v11 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[67]>(a1);
        return 0;
      }
      goto LABEL_19;
    }
  }
  v12 = JSC::Lexer<char16_t>::scanTemplateString(*(unsigned int **)(a1 + 7288), (WTF::AtomStringImpl *)(a1 + 7368), a4, a4, (uint64_t)a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v12;
  if (v12 != 15)
  {
    if (v12 != 20 && (v12 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected an template element");
      return 0;
    }
LABEL_19:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return 0;
  }
  v27 = *(_OWORD *)(a1 + 7376);
  *a5 = *(_BYTE *)(a1 + 7392);
  v17 = *(_DWORD *)(a1 + 7400);
  v18 = *(_DWORD *)(a1 + 7404);
  v19 = *(_DWORD *)(a1 + 7408);
  v20 = *(_DWORD *)(a1 + 7412);
  *(_DWORD *)(a1 + 7444) = v17;
  *(_DWORD *)(a1 + 7448) = v20;
  *(_DWORD *)(a1 + 7452) = v18;
  result = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(result + 4) = v17;
  v22 = *(_DWORD *)(a1 + 12);
  if (v22)
  {
    v23 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v22 - 1) + 9) & 1;
    *(_BYTE *)(result + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)result, a1 + 7368, 0, v23, v13, v14, v15, v16);
    v24 = *(uint64_t **)(a2 + 8);
    result = *v24;
    if ((unint64_t)(v24[1] - *v24) <= 0x2F)
    {
      JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
      result = *v24;
    }
    *v24 = result + 48;
    *(_DWORD *)(result + 8) = v17;
    *(_DWORD *)(result + 12) = v19;
    *(_DWORD *)(result + 16) = v18;
    *(_DWORD *)(result + 20) = -1;
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 25) = 126;
    *(_BYTE *)(result + 26) = 0;
    *(_QWORD *)result = &off_1E3584148;
    *(_OWORD *)(result + 32) = v27;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseObjectRestAssignmentElement<JSC::ASTBuilder>(uint64_t a1, JSC::ASTBuilder *a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v21 = *(_QWORD *)(a1 + 7416);
  v22 = *(_DWORD *)(a1 + 7424);
  v10 = JSC::Parser<JSC::Lexer<char16_t>>::parseMemberExpression<JSC::ASTBuilder>(a1, a2, a3, a4, a5, a6, a7, a8);
  v20 = v10;
  if (v10 && (v11 = v10, ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10) & 1) != 0))
  {
    v12 = *(_DWORD *)(a1 + 12);
    if (!v12)
      goto LABEL_23;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v12 - 1) + 9) & 1) == 0)
      return JSC::ASTBuilder::createAssignmentElement((uint64_t)a2, &v20, &v21, (uint64_t *)(a1 + 7444));
    if (!*(_QWORD *)(a1 + 7320))
      return JSC::ASTBuilder::createAssignmentElement((uint64_t)a2, &v20, &v21, (uint64_t *)(a1 + 7444));
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 112))(v11))
      return JSC::ASTBuilder::createAssignmentElement((uint64_t)a2, &v20, &v21, (uint64_t *)(a1 + 7444));
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
    v14 = **(_QWORD **)(a1 + 7320);
    if (*(_QWORD *)(v13 + 1248) != v14 && *(_QWORD *)(v13 + 880) != v14)
      return JSC::ASTBuilder::createAssignmentElement((uint64_t)a2, &v20, &v21, (uint64_t *)(a1 + 7444));
    v17 = *(_DWORD *)(a1 + 12);
    if (!v17)
    {
LABEL_23:
      __break(0xC471u);
      JUMPOUT(0x197EEC024);
    }
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v17 - 1) + 9) & 1) == 0)
      return JSC::ASTBuilder::createAssignmentElement((uint64_t)a2, &v20, &v21, (uint64_t *)(a1 + 7444));
    v18 = *(_DWORD **)(a1 + 7496);
    if (v18 && *v18 == 1)
      *v18 = 0;
    if (!*(_QWORD *)(a1 + 7360))
    {
      v19 = v14;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16],WTF::UniquedStringImpl *,char const(&)[17]>(a1, &v19);
    }
  }
  else
  {
    v16 = *(_DWORD **)(a1 + 7496);
    if (v16 && *v16 == 1)
      *v16 = 0;
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Invalid destructuring assignment target");
  }
  return 0;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseObjectRestElement<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char ***a5, uint64_t a6)
{
  uint64_t v7;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  BOOL isAllowedIdentifierLet;
  BOOL isAllowedIdentifierYield;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  const char *Range;
  uint64_t v38;

  v7 = a1 + 7344;
  if ((unint64_t)&v35 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v18 = 0;
      *(_BYTE *)(v7 + 8) = 1;
      return v18;
    }
    return 0;
  }
  v13 = *(_DWORD *)(a1 + 7368);
  if (v13 != 12)
  {
    isAllowedIdentifierLet = JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, v13, *(_QWORD **)(a1 + 7376));
    v13 = *(_DWORD *)(a1 + 7368);
    if (isAllowedIdentifierLet
      || (isAllowedIdentifierYield = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, v13, *(_QWORD **)(a1 + 7376)), v13 = *(_DWORD *)(a1 + 7368), isAllowedIdentifierYield))
    {
      if ((a3 - 1) <= 1 && v13 == 544)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[64]>(a1);
        return 0;
      }
    }
    else if (v13 != 546)
    {
      if (v13 != 1048592
        || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
        v28 = *(_DWORD *)(a1 + 12);
        if (!v28)
          goto LABEL_49;
        v29 = v28 - 1;
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v29 + 9) & 1) != 0 && v13 == 532)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v38 = v30;
            v36 = (const char *)JSC::destructuringKindToVariableKindName(a3);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[16]>(a1, (uint64_t)&Range, &v36);
          }
          return 0;
        }
        if ((v13 - 531) <= 1)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v38 = v31;
            v36 = (const char *)JSC::destructuringKindToVariableKindName(a3);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*>(a1, (uint64_t)&Range, &v36);
          }
          return 0;
        }
        if ((v13 & 0x200) != 0)
        {
          if ((v13 - 544) >= 3)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
              v38 = v33;
              v36 = (const char *)JSC::destructuringKindToVariableKindName(a3);
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*>(a1, (uint64_t)&Range, &v36);
            }
            return 0;
          }
          if (v13 == 544)
          {
            if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v29 + 9) & 1) != 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                v32 = (const char *)JSC::destructuringKindToVariableKindName(a3);
                v36 = "in strict mode";
                Range = v32;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[2],char const*>(a1, &Range, &v36);
              }
              return 0;
            }
          }
          else if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v29 + 9) & 1) != 0
                 || (*(_BYTE *)(*(_QWORD *)a1 + 720 * v29 + 11) & 2) != 0)
          {
            if (*(_QWORD *)(a1 + 7360))
              return 0;
            Range = (const char *)JSC::destructuringKindToVariableKindName(a3);
            v36 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierYieldReason(a1);
            v34 = "Cannot use 'yield' as a ";
            goto LABEL_35;
          }
        }
        if (v13 == 20 || (v13 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a binding element");
        }
        return 0;
      }
      v13 = 1048592;
    }
  }
  if (JSC::Parser<JSC::Lexer<char16_t>>::isDisallowedIdentifierAwait(a1, v13, *(_QWORD **)(a1 + 7376)))
  {
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    Range = (const char *)JSC::destructuringKindToVariableKindName(a3);
    v36 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
    v34 = "Cannot use 'await' as a ";
LABEL_35:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[2],char const*>(a1, v34, &Range, &v36);
    return 0;
  }
  v18 = JSC::Parser<JSC::Lexer<char16_t>>::createBindingPattern<JSC::ASTBuilder>(a1, a2, a3, a4, *(WTF::AtomStringImpl **)(a1 + 7376), a1 + 7368, a6, a5);
  v19 = *(_DWORD *)(a1 + 7400);
  v20 = *(_DWORD *)(a1 + 7412);
  v21 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v19;
  *(_DWORD *)(a1 + 7448) = v20;
  *(_DWORD *)(a1 + 7452) = v21;
  v22 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v22 + 4) = v19;
  v23 = *(_DWORD *)(a1 + 12);
  if (!v23)
  {
LABEL_49:
    __break(0xC471u);
    JUMPOUT(0x197EEC43CLL);
  }
  v24 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v23 - 1) + 9) & 1;
  *(_BYTE *)(v22 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v22, a1 + 7368, 0, v24, v14, v15, v16, v17);
  return v18;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseStatementListItem<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  BOOL matched;
  int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  const char *v28;
  int v29;
  _BYTE *v30;
  unsigned __int8 v31;
  int v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  char v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  _OWORD *v62;
  int v63;
  _OWORD *v64;
  unsigned int v65;
  int v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  char v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  _BYTE *v98;
  WTF::StringImpl *v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  int v117;
  WTF::AtomStringImpl *v118;
  uint64_t v119;
  char v120;
  _BYTE *v121;
  WTF::StringImpl *v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  int v143;
  _BYTE *v144;
  int v145;
  _DWORD *v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  __int128 v150;

  v9 = (unsigned __int8 *)(a1 + 7344);
  v10 = *(_DWORD *)(a1 + 7456);
  *(_DWORD *)(a1 + 7456) = v10 + 1;
  if ((unint64_t)&v141 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v13 = 0;
      v9[8] = 1;
      goto LABEL_6;
    }
    goto LABEL_51;
  }
  v11 = (_DWORD *)(a1 + 7368);
  v12 = *(_DWORD *)(a1 + 7368);
  if (v12 > 522)
  {
    if (v12 <= 543)
    {
      if (v12 == 523)
      {
        v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionDeclaration<JSC::ASTBuilder>(a1, a2, 0, 1, 0, 0, a7, a8);
      }
      else
      {
        if (v12 != 541)
          goto LABEL_5;
        v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseClassDeclaration<JSC::ASTBuilder>(a1, a2, 1, 0);
      }
      v13 = v15;
      goto LABEL_26;
    }
    if (v12 == 544)
    {
      v26 = *(_DWORD *)(a1 + 12);
      if (!v26)
      {
        __break(0xC471u);
        JUMPOUT(0x197EECB58);
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 9) & 1) == 0)
      {
        v145 = v10;
        v62 = (_OWORD *)(a1 + 7296);
        v150 = *(_OWORD *)(a1 + 7296);
        v63 = *(_DWORD *)(a1 + 7316);
        v64 = (_OWORD *)(a1 + 7320);
        v149 = *(_QWORD *)(a1 + 7336);
        v148 = *(_OWORD *)(a1 + 7320);
        v65 = *v9;
        HIDWORD(v141) = v63;
        v142 = v65;
        v144 = (_BYTE *)(a1 + 7344);
        v143 = *(unsigned __int8 *)(a1 + 7345);
        v146 = (_DWORD *)(a1 + 7368);
        v147 = a2;
        v66 = *(_DWORD *)(a2 + 1052);
        v67 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
        v68 = *(unsigned int *)(a1 + 7404);
        v69 = *(_QWORD *)(a1 + 7288);
        v71 = *(_DWORD *)v69;
        v70 = *(_DWORD *)(v69 + 4);
        v72 = *(_BYTE *)(v69 + 56);
        v73 = *(_DWORD *)(a1 + 7400);
        v74 = *(_DWORD *)(a1 + 7412);
        *(_DWORD *)(a1 + 7444) = v73;
        *(_DWORD *)(a1 + 7448) = v74;
        *(_DWORD *)(a1 + 7452) = v68;
        *(_DWORD *)(v69 + 4) = v73;
        *(_BYTE *)(v69 + 56) = 0;
        v75 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v69, a1 + 7368, 0, 0, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v75;
        if (v75 == 12
          || (v108 = v75) == 0
          || (v75 - 544) < 3
          || v75 == 1048592
          && ((v139 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952), v140 = **(_QWORD **)(a1 + 7376), v140 == v139[41])
           || v140 == v139[62]
           || v140 == v139[16]))
        {
          JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), v67, v68, v76, v77, v78, v79, v80);
          v85 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)v85 = v71;
          *(_BYTE *)(v85 + 56) = v72;
          v86 = *(_DWORD *)(a1 + 7400);
          v87 = *(_DWORD *)(a1 + 7412);
          v88 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v86;
          *(_DWORD *)(a1 + 7448) = v87;
          *(_DWORD *)(a1 + 7452) = v88;
          *(_DWORD *)(v85 + 4) = v86;
          v89 = *(_DWORD *)(a1 + 12);
          if (!v89)
          {
            __break(0xC471u);
            JUMPOUT(0x197EECB9CLL);
          }
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v85, (uint64_t)v146, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v89 - 1) + 9) & 1, v81, v82, v83, v84);
          *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v70;
          *v62 = v150;
          *(_DWORD *)(a1 + 7312) = v66;
          v97 = v142;
          *(_DWORD *)(a1 + 7316) = HIDWORD(v141);
          *v64 = v148;
          *(_QWORD *)(a1 + 7336) = v149;
          v98 = v144;
          *v144 = v97;
          v98[1] = v143;
          *(_DWORD *)(v147 + 1052) = v66;
          v99 = *(WTF::StringImpl **)(a1 + 7360);
          *(_QWORD *)(a1 + 7360) = 0;
          if (v99)
          {
            if (*(_DWORD *)v99 == 2)
            {
              WTF::StringImpl::~StringImpl(v99, v90, v91, v92, v93, v94, v95, v96);
              WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
            }
            else
            {
              *(_DWORD *)v99 -= 2;
            }
          }
          a2 = v147;
          v10 = v145;
        }
        else
        {
          JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), v67, v68, v76, v77, v78, v79, v80);
          v113 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)v113 = v71;
          *(_BYTE *)(v113 + 56) = v72;
          v114 = *(_DWORD *)(a1 + 7400);
          v115 = *(_DWORD *)(a1 + 7412);
          v116 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v114;
          *(_DWORD *)(a1 + 7448) = v115;
          *(_DWORD *)(a1 + 7452) = v116;
          *(_DWORD *)(v113 + 4) = v114;
          v117 = *(_DWORD *)(a1 + 12);
          if (!v117)
          {
            __break(0xC471u);
            JUMPOUT(0x197EECBA4);
          }
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v113, (uint64_t)v146, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v117 - 1) + 9) & 1, v109, v110, v111, v112);
          *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v70;
          *v62 = v150;
          *(_DWORD *)(a1 + 7312) = v66;
          v120 = v142;
          *(_DWORD *)(a1 + 7316) = HIDWORD(v141);
          *v64 = v148;
          *(_QWORD *)(a1 + 7336) = v149;
          v121 = v144;
          *v144 = v120;
          v121[1] = v143;
          *(_DWORD *)(v147 + 1052) = v66;
          v122 = *(WTF::StringImpl **)(a1 + 7360);
          *(_QWORD *)(a1 + 7360) = 0;
          if (v122)
          {
            if (*(_DWORD *)v122 == 2)
            {
              WTF::StringImpl::~StringImpl(v122, v118, v119, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
            }
            else
            {
              *(_DWORD *)v122 -= 2;
            }
          }
          a2 = v147;
          v10 = v145;
          if (v108 != 4)
            goto LABEL_18;
        }
      }
      v20 = JSC::Parser<JSC::Lexer<char16_t>>::parseVariableDeclaration<JSC::ASTBuilder>(a1, a2, 1u, 1u);
      goto LABEL_19;
    }
    if ((v12 - 545) < 2)
      goto LABEL_16;
    if (v12 != 1048592)
      goto LABEL_5;
    v16 = a2;
    v17 = (_DWORD *)(a1 + 7368);
    matched = JSC::Parser<JSC::Lexer<unsigned char>>::matchAllowedEscapedContextualKeyword(a1);
    v11 = v17;
    a2 = v16;
    if (!matched)
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      goto LABEL_51;
    }
  }
  else if (v12 != 12)
  {
    if (v12 != 521)
    {
LABEL_5:
      --*(_DWORD *)(a1 + 7456);
      v13 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::ASTBuilder>(a1, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_6;
    }
    v25 = JSC::Parser<JSC::Lexer<char16_t>>::parseVariableDeclaration<JSC::ASTBuilder>(a1, a2, 2u, 1u);
    v13 = v25;
    if (!v25)
      goto LABEL_6;
    *(_DWORD *)(v25 + 20) = *(_DWORD *)(a1 + 7448);
LABEL_21:
    *(_BYTE *)(v13 + 24) = 1;
    v22 = *(_QWORD *)(v13 + 8);
    v23 = *(_DWORD *)(v13 + 16);
    *(_QWORD *)&v148 = v22;
    DWORD2(v148) = v23;
    v24 = *(_QWORD *)(a1 + 7520);
    if (v24 && (v22 & 0x80000000) == 0)
      JSC::DebuggerPausePositions::appendPause(v24, (uint64_t)&v148);
    goto LABEL_6;
  }
  if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896) || v9[40])
    goto LABEL_16;
  v145 = v10;
  v146 = v11;
  v147 = a2;
  v150 = *(_OWORD *)(a1 + 7296);
  v29 = *(_DWORD *)(a1 + 7316);
  v149 = *(_QWORD *)(a1 + 7336);
  v148 = *(_OWORD *)(a1 + 7320);
  v143 = *v9;
  LODWORD(v144) = v29;
  v30 = v9;
  v31 = v9[1];
  v32 = *(_DWORD *)(a2 + 1052);
  v33 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
  v34 = *(unsigned int *)(a1 + 7404);
  v35 = *(_QWORD *)(a1 + 7288);
  v37 = *(_DWORD *)v35;
  v36 = *(_DWORD *)(v35 + 4);
  v38 = *(_BYTE *)(v35 + 56);
  v142 = *(_DWORD *)(a1 + 7420);
  v39 = *(_DWORD *)(a1 + 7400);
  v40 = *(_DWORD *)(a1 + 7412);
  *(_DWORD *)(a1 + 7444) = v39;
  *(_DWORD *)(a1 + 7448) = v40;
  *(_DWORD *)(a1 + 7452) = v34;
  *(_DWORD *)(v35 + 4) = v39;
  v41 = *(_DWORD *)(a1 + 12);
  if (!v41)
  {
    __break(0xC471u);
    JUMPOUT(0x197EECBACLL);
  }
  v42 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v41 - 1) + 9) & 1;
  *(_BYTE *)(v35 + 56) = 0;
  v48 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v35, (uint64_t)v146, 0, v42, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v48;
  v49 = *(_QWORD *)(a1 + 7288);
  if (v48 != 523 || *(_BYTE *)(v49 + 56))
  {
    JSC::Lexer<char16_t>::setOffset(v49, v33, v34, v43, v44, v45, v46, v47);
    v54 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v54 = v37;
    *(_BYTE *)(v54 + 56) = v38;
    v55 = *(_DWORD *)(a1 + 7400);
    v56 = *(_DWORD *)(a1 + 7412);
    v57 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v55;
    *(_DWORD *)(a1 + 7448) = v56;
    *(_DWORD *)(a1 + 7452) = v57;
    *(_DWORD *)(v54 + 4) = v55;
    v58 = *(_DWORD *)(a1 + 12);
    if (!v58)
      goto LABEL_81;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v54, (uint64_t)v146, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v58 - 1) + 9) & 1, v50, v51, v52, v53);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v36;
    *(_OWORD *)(a1 + 7296) = v150;
    *(_DWORD *)(a1 + 7312) = v32;
    *(_DWORD *)(a1 + 7316) = (_DWORD)v144;
    *(_OWORD *)(a1 + 7320) = v148;
    *(_QWORD *)(a1 + 7336) = v149;
    *v30 = v143;
    v30[1] = v31;
    *(_DWORD *)(v147 + 1052) = v32;
    v61 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
      {
        WTF::StringImpl::~StringImpl(v61, v59, v60, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
      }
      else
      {
        *(_DWORD *)v61 -= 2;
      }
    }
    v11 = v146;
    a2 = v147;
    v10 = v145;
LABEL_16:
    v19 = *(_DWORD *)(a1 + 12);
    if (v19)
    {
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v19 - 1) + 12) & 0x10) == 0)
      {
LABEL_18:
        v20 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpressionOrLabelStatement<JSC::ASTBuilder>(a1, a2, 1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_19:
        v13 = v20;
        if (!v20)
          goto LABEL_6;
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 96))(v20);
        *(_DWORD *)(v13 + 20) = *(_DWORD *)(a1 + 7448);
        if ((v21 & 1) != 0)
          goto LABEL_6;
        goto LABEL_21;
      }
      v27 = *v11;
      if (v27 == 546)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v28 = "Cannot use 'await' within static block";
          goto LABEL_50;
        }
      }
      else
      {
        if (v27 != 545)
          goto LABEL_18;
        if (!*(_QWORD *)(a1 + 7360))
        {
          v28 = "Cannot use 'yield' within static block";
LABEL_50:
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, v28);
        }
      }
LABEL_51:
      v13 = 0;
      goto LABEL_6;
    }
LABEL_81:
    __break(0xC471u);
    JUMPOUT(0x197EECB28);
  }
  v13 = JSC::Parser<JSC::Lexer<char16_t>>::parseAsyncFunctionDeclaration<JSC::ASTBuilder>(a1, v147, v142, 1, 0, 0, v46, v47);
  v10 = v145;
LABEL_26:
  if (v13)
    *(_DWORD *)(v13 + 20) = *(_DWORD *)(a1 + 7448);
LABEL_6:
  *(_DWORD *)(a1 + 7456) = v10;
  return v13;
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[65]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected a well-formed-unicode string for the module export name");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseModuleName<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  int v16;
  uint64_t v18;
  uint64_t *v19;

  v9 = *(_DWORD *)(a1 + 7368);
  if (v9 == 14)
  {
    v10 = *(_DWORD *)(a1 + 7400);
    v11 = *(_DWORD *)(a1 + 7404);
    v12 = *(_DWORD *)(a1 + 7408);
    v13 = *(_QWORD *)(a1 + 7376);
    v14 = *(_DWORD *)(a1 + 7412);
    *(_DWORD *)(a1 + 7444) = v10;
    *(_DWORD *)(a1 + 7448) = v14;
    *(_DWORD *)(a1 + 7452) = v11;
    result = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(result + 4) = v10;
    v16 = *(_DWORD *)(a1 + 12);
    if (v16)
    {
      v18 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v16 - 1) + 9) & 1;
      *(_BYTE *)(result + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)result, a1 + 7368, 0, v18, a5, a6, a7, a8);
      v19 = *(uint64_t **)(a2 + 8);
      result = *v19;
      if ((unint64_t)(v19[1] - *v19) <= 0x27)
      {
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
        result = *v19;
      }
      *v19 = result + 40;
      *(_DWORD *)(result + 8) = v10;
      *(_DWORD *)(result + 12) = v12;
      *(_DWORD *)(result + 16) = v11;
      *(_DWORD *)(result + 20) = -1;
      *(_BYTE *)(result + 24) = 0;
      *(_QWORD *)result = &off_1E357B1F0;
      *(_QWORD *)(result + 32) = v13;
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    if (v9 != 20 && (v9 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Imported modules names must be string literals");
    }
    else
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    }
    return 0;
  }
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseImportAttributes<JSC::ASTBuilder>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int *v19;
  unsigned int v20;
  uint64_t i;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  __int128 v70;
  char v71;
  uint64_t v72;

  v72 = 0;
  v11 = *a2;
  v10 = a2[1];
  if ((unint64_t)(v10 - *a2) <= 0x47)
  {
    if (v10)
    {
      v65 = a2 + 3;
      v66 = v10 - 8000;
      *(_QWORD *)&v70 = v10 - 8000;
      v67 = *((unsigned int *)a2 + 9);
      if ((_DWORD)v67 == *((_DWORD *)a2 + 8))
      {
        v68 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v67 + 1, (unint64_t)&v70);
        v67 = *((unsigned int *)a2 + 9);
        *(_QWORD *)(a2[3] + 8 * v67) = *v68;
      }
      else
      {
        *(_QWORD *)(*v65 + 8 * v67) = v66;
      }
      *((_DWORD *)a2 + 9) = v67 + 1;
    }
    v11 = WTF::fastMalloc((WTF *)0x1F40);
    a2[1] = v11 + 8000;
  }
  *a2 = v11 + 72;
  *(_QWORD *)&v70 = v11;
  v12 = *((unsigned int *)a2 + 13);
  if ((_DWORD)v12 == *((_DWORD *)a2 + 12))
  {
    WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserArenaDeletable *&>((uint64_t)(a2 + 5), (unint64_t)&v70);
  }
  else
  {
    *(_QWORD *)(a2[5] + 8 * v12) = v11;
    *((_DWORD *)a2 + 13) = v12 + 1;
  }
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_QWORD *)v11 = &off_1E357B210;
  *(_QWORD *)(v11 + 8) = v11 + 24;
  *(_QWORD *)(v11 + 16) = 3;
  v13 = *(_DWORD *)(a1 + 7368);
  if (v13)
  {
    if (v13 == 20 || (v13 & 0x100000) != 0)
    {
LABEL_52:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected opening '{' at the start of import attribute");
    }
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 7400);
    v15 = *(_DWORD *)(a1 + 7412);
    v16 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v14;
    *(_DWORD *)(a1 + 7448) = v15;
    *(_DWORD *)(a1 + 7452) = v16;
    v17 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v17 + 4) = v14;
    v18 = *(_DWORD *)(a1 + 12);
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x197EED35CLL);
    }
    v19 = (int *)(a1 + 7368);
    v20 = v18 - 1;
    for (i = *(_QWORD *)a1; ; i = *(_QWORD *)a1)
    {
      v22 = *(_BYTE *)(i + 720 * v20 + 9) & 1;
      *(_BYTE *)(v17 + 56) = 0;
      v23 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v17, a1 + 7368, 0, v22, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v23;
      if (v23 == 1)
        goto LABEL_31;
      if ((v23 & 0x200) == 0 && (v23 | 2) != 0xE)
      {
        if (v23 == 20 || (v23 & 0x100000) != 0)
          goto LABEL_52;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected an attribute key");
        goto LABEL_53;
      }
      v24 = *(uint64_t **)(a1 + 7376);
      v69 = *v24;
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(&v72, &v69, a4, a5, a6, a7, a8, (uint64_t)&v70);
      if (!v71)
      {
        if (*v19 == 20 || (*v19 & 0x100000) != 0)
          goto LABEL_52;
        if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v70 = *v24;
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 1, "A duplicate key for import attributes '", (uint64_t *)&v70);
        }
        goto LABEL_53;
      }
      v25 = *(_DWORD *)(a1 + 7400);
      v26 = *(_DWORD *)(a1 + 7412);
      v27 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v25;
      *(_DWORD *)(a1 + 7448) = v26;
      *(_DWORD *)(a1 + 7452) = v27;
      v28 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v28 + 4) = v25;
      v29 = *(_DWORD *)(a1 + 12);
      if (!v29)
        goto LABEL_74;
      v30 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v29 - 1) + 9) & 1;
      *(_BYTE *)(v28 + 56) = 0;
      v31 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v28, a1 + 7368, 0, v30, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v31;
      if (v31 != 18)
      {
        if (v31 == 20 || (v31 & 0x100000) != 0)
          goto LABEL_52;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected ':' after attribute key");
        goto LABEL_53;
      }
      v32 = *(_DWORD *)(a1 + 7400);
      v33 = *(_DWORD *)(a1 + 7412);
      v34 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v32;
      *(_DWORD *)(a1 + 7448) = v33;
      *(_DWORD *)(a1 + 7452) = v34;
      v35 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v35 + 4) = v32;
      v36 = *(_DWORD *)(a1 + 12);
      if (!v36)
      {
        __break(0xC471u);
        JUMPOUT(0x197EED344);
      }
      v37 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v36 - 1) + 9) & 1;
      *(_BYTE *)(v35 + 56) = 0;
      v38 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v35, a1 + 7368, 0, v37, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v38;
      if (v38 != 14)
      {
        if (v38 == 20 || (v38 & 0x100000) != 0)
          goto LABEL_52;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected an attribute value");
        goto LABEL_53;
      }
      v39 = *(_QWORD *)(a1 + 7376);
      v40 = *(_DWORD *)(a1 + 7400);
      v41 = *(_DWORD *)(a1 + 7412);
      v42 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v40;
      *(_DWORD *)(a1 + 7448) = v41;
      *(_DWORD *)(a1 + 7452) = v42;
      v43 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v43 + 4) = v40;
      v44 = *(_DWORD *)(a1 + 12);
      if (!v44)
      {
        __break(0xC471u);
        JUMPOUT(0x197EED34CLL);
      }
      v45 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v44 - 1) + 9) & 1;
      *(_BYTE *)(v43 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v43, a1 + 7368, 0, v45, a5, a6, a7, a8);
      *(_QWORD *)&v70 = v24;
      *((_QWORD *)&v70 + 1) = v39;
      v46 = *(unsigned int *)(v11 + 20);
      if ((_DWORD)v46 == *(_DWORD *)(v11 + 16))
      {
        v47 = (__int128 *)WTF::Vector<std::tuple<JSC::Identifier const*,JSC::Identifier const*>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11 + 8, (void *)(v46 + 1), (unint64_t)&v70, a4, a5, a6, a7, a8);
        v46 = *(unsigned int *)(v11 + 20);
        v48 = *(_QWORD *)(v11 + 8);
        v49 = *v47;
      }
      else
      {
        v48 = *(_QWORD *)(v11 + 8);
        v49 = v70;
      }
      *(_OWORD *)(v48 + 16 * v46) = v49;
      ++*(_DWORD *)(v11 + 20);
      v50 = *v19;
      if (*v19 != 6)
        break;
      v51 = *(_DWORD *)(a1 + 7400);
      v52 = *(_DWORD *)(a1 + 7412);
      v53 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v51;
      *(_DWORD *)(a1 + 7448) = v52;
      *(_DWORD *)(a1 + 7452) = v53;
      v17 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v17 + 4) = v51;
      v54 = *(_DWORD *)(a1 + 12);
      if (!v54)
      {
        __break(0xC471u);
        JUMPOUT(0x197EED354);
      }
      v20 = v54 - 1;
    }
    if (v50 == 1)
    {
LABEL_31:
      v56 = *(_DWORD *)(a1 + 7400);
      v57 = *(_DWORD *)(a1 + 7412);
      v58 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v56;
      *(_DWORD *)(a1 + 7448) = v57;
      *(_DWORD *)(a1 + 7452) = v58;
      v59 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v59 + 4) = v56;
      v60 = *(_DWORD *)(a1 + 12);
      if (!v60)
      {
LABEL_74:
        __break(0xC471u);
        JUMPOUT(0x197EED33CLL);
      }
      v61 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v60 - 1) + 9) & 1;
      *(_BYTE *)(v59 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v59, a1 + 7368, 0, v61, a5, a6, a7, a8);
      goto LABEL_54;
    }
    if (v50 == 20 || (v50 & 0x100000) != 0)
      goto LABEL_52;
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[17]>(a1);
  }
LABEL_53:
  v11 = 0;
LABEL_54:
  if (v72)
    WTF::fastFree(v72 - 16, a2, a3, a4, a5, a6, a7, a8);
  return v11;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionDeclaration<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v17;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _BYTE *v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t FuncDeclStatement;
  uint64_t *v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _DWORD *v50;
  uint64_t v51;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68[8];
  uint64_t *v69;
  unsigned int v70;
  _OWORD v71[3];
  __int128 v72;
  uint64_t v73[3];
  unsigned __int8 v74;
  unint64_t v75;

  v9 = (_DWORD *)(a1 + 7368);
  v72 = *(_OWORD *)(a1 + 7400);
  v10 = *(unsigned int *)(a1 + 7408);
  v11 = *(_DWORD *)(a1 + 7400);
  v12 = *(_DWORD *)(a1 + 7412);
  v13 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v11;
  *(_DWORD *)(a1 + 7448) = v12;
  *(_DWORD *)(a1 + 7452) = v13;
  v14 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v14 + 4) = v11;
  v15 = *(_DWORD *)(a1 + 12);
  if (!v15)
  {
    __break(0xC471u);
    goto LABEL_50;
  }
  v17 = a5;
  v21 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v15 - 1) + 9) & 1;
  *(_BYTE *)(v14 + 56) = 0;
  v22 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v14, (uint64_t)v9, 0, v21, a5, a6, a7, a8);
  v27 = 0;
  *(_DWORD *)(a1 + 7368) = v22;
  if (v22 != 191488)
  {
LABEL_3:
    v28 = (_BYTE *)(a1 + 7474);
    v29 = *(_BYTE *)(a1 + 7474);
    *(_BYTE *)(a1 + 7474) = v27;
    memset(v71, 0, 44);
    if (v17 == 1)
    {
      *(_QWORD *)&v71[0] = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 104;
      v30 = JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 0, 1, 0, 1, v10, v71, 1, a6);
    }
    else
    {
      v30 = JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 1, 1, 0, 1, v10, v71, 1, a6);
    }
    if ((v30 & 1) == 0)
    {
      if (*v9 == 20 || (*v9 & 0x100000) != 0)
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      }
      else if (!*(_QWORD *)(a1 + 7360))
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse this function");
      }
      goto LABEL_37;
    }
    JSC::Parser<JSC::Lexer<char16_t>>::declareFunction((uint64_t)v68, (uint64_t *)a1, *(WTF::StringImpl ***)&v71[0], v31, v32, v33, v34, v35);
    if ((v68[0] & 1) != 0)
    {
      v67 = *(_DWORD *)(a1 + 12);
      if (!v67)
      {
        __break(0xC471u);
        JUMPOUT(0x197EED794);
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v67 - 1) + 9) & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v73[0] = **(_QWORD **)&v71[0];
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(a1, "Cannot declare a function named '", v73);
        }
        goto LABEL_37;
      }
    }
    if ((v68[0] & 2) != 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        v73[0] = **(_QWORD **)&v71[0];
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[77],WTF::UniquedStringImpl *,char const(&)[2]>(a1, v73);
      }
    }
    else
    {
      if (a4)
      {
LABEL_9:
        FuncDeclStatement = JSC::ASTBuilder::createFuncDeclStatement(a2, (uint64_t)&v72, (uint64_t)v71, v37, v38, v39, v40, v41);
        v43 = v69;
        v44 = v70;
        if (*((_DWORD *)v69 + 3) <= v70)
        {
          __break(0xC471u);
          JUMPOUT(0x197EED77CLL);
        }
        v45 = FuncDeclStatement;
        v46 = *((_QWORD *)&v71[0] + 1);
        v47 = *v69;
        v73[0] = *((_QWORD *)&v71[0] + 1);
        v48 = v47 + 720 * v70;
        v49 = (_QWORD *)(v48 + 704);
        v50 = (_DWORD *)(v48 + 716);
        v51 = *(unsigned int *)(v48 + 716);
        if ((_DWORD)v51 == *(_DWORD *)(v48 + 712))
        {
          v53 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v51 + 1, (unint64_t)v73);
          v51 = *v50;
          *(_QWORD *)(*v49 + 8 * v51) = *v53;
        }
        else
        {
          *(_QWORD *)(*v49 + 8 * v51) = *((_QWORD *)&v71[0] + 1);
        }
        *v50 = v51 + 1;
        if (*(_DWORD *)(a1 + 7456) == 1)
          goto LABEL_13;
        v54 = *(_DWORD *)(a1 + 12);
        if (!v54)
        {
          __break(0xC471u);
          JUMPOUT(0x197EED784);
        }
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v54 - 1) + 9) & 1) != 0 || *v28)
          goto LABEL_13;
        if (*((_DWORD *)v43 + 3) > v44)
        {
          v55 = *v43;
          v75 = v46;
          v74 = 0;
          WTF::HashMap<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::HashTableTraits>::inlineSet<JSC::FunctionMetadataNode * const&,JSC::Scope::NeedsDuplicateDeclarationCheck>((uint64_t)v73, (uint64_t *)(v55 + 720 * v44 + 688), &v75, &v74);
LABEL_13:
          *v28 = v29;
          return v45;
        }
        __break(0xC471u);
LABEL_50:
        JUMPOUT(0x197EED774);
      }
      if (JSC::Parser<JSC::Lexer<unsigned char>>::exportName(*(_QWORD *)(a1 + 7512), **(WTF::StringImpl ***)&v71[0], v36, v37, v38, v39, v40, v41))
      {
        JSC::ModuleScopeData::exportBinding(*(_QWORD *)(a1 + 7512), **(WTF::StringImpl ***)&v71[0], *(_QWORD **)&v71[0], v62, v63, v64, v65, v66);
        goto LABEL_9;
      }
      if (!*(_QWORD *)(a1 + 7360))
      {
        v73[0] = **(_QWORD **)&v71[0];
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 0, "Cannot export a duplicate function name: '", v73);
      }
    }
LABEL_37:
    v45 = 0;
    goto LABEL_13;
  }
  if (a3 != 1)
  {
    v56 = *(_DWORD *)(a1 + 7400);
    v57 = *(_DWORD *)(a1 + 7412);
    v58 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v56;
    *(_DWORD *)(a1 + 7448) = v57;
    *(_DWORD *)(a1 + 7452) = v58;
    v59 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v59 + 4) = v56;
    v60 = *(_DWORD *)(a1 + 12);
    if (!v60)
    {
      __break(0xC471u);
      JUMPOUT(0x197EED78CLL);
    }
    v61 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v60 - 1) + 9) & 1;
    *(_BYTE *)(v59 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v59, (uint64_t)v9, 0, v61, v23, v24, v25, v26);
    v27 = 2;
    goto LABEL_3;
  }
  if (!*(_QWORD *)(a1 + 7360))
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot use generator function declaration in single-statement context");
  return 0;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseClassDeclaration<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _DWORD **v23;
  uint64_t v24;
  uint64_t v25;
  JSC::ParserArena *v26;
  uint64_t result;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  WTF::AtomStringImpl *v36[3];
  uint64_t v37;
  int v38;
  __int128 v39;
  unint64_t v40;
  int v41;

  v39 = *(_OWORD *)(a1 + 7400);
  v37 = *(_QWORD *)(a1 + 7416);
  v38 = *(_DWORD *)(a1 + 7424);
  v7 = *(_DWORD *)(a1 + 7400);
  memset(v36, 0, sizeof(v36));
  if (a4 == 1)
  {
    v8 = 0;
    v36[0] = (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 104);
  }
  else
  {
    v8 = 1;
  }
  v9 = JSC::Parser<JSC::Lexer<char16_t>>::parseClass<JSC::ASTBuilder>(a1, a2, v8, (uint64_t)v36);
  if (!v9)
  {
    v28 = *(_DWORD *)(a1 + 7368);
    if (v28 == 20 || (v28 & 0x100000) != 0)
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[22]>(a1);
    }
    return 0;
  }
  v14 = (_QWORD *)v9;
  v15 = (WTF::StringImpl **)v36[0];
  if (JSC::Parser<JSC::Lexer<char16_t>>::declareVariable(a1, v36[0], 1, 2, v10, v11, v12, v13) >= 2)
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      v40 = (unint64_t)*v15;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[32],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v40);
    }
    return 0;
  }
  if (!a3)
  {
    if (JSC::Parser<JSC::Lexer<unsigned char>>::exportName(*(_QWORD *)(a1 + 7512), *v15, v16, v17, v18, v19, v20, v21))
    {
      JSC::ModuleScopeData::exportBinding(*(_QWORD *)(a1 + 7512), *v15, v15, v29, v30, v31, v32, v33);
      goto LABEL_6;
    }
    if (!*(_QWORD *)(a1 + 7360))
    {
      v40 = (unint64_t)*v15;
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 0, "Cannot export a duplicate class name: '", (uint64_t *)&v40);
    }
    return 0;
  }
LABEL_6:
  v35 = *(_DWORD *)(a1 + 7452);
  v34 = *(_QWORD *)(a1 + 7444);
  v22 = *(_DWORD *)(a1 + 7400);
  v23 = (_DWORD **)v14[20];
  v40 = v37 | ((unint64_t)(HIDWORD(v37) + 1) << 32);
  v41 = v38;
  JSC::ASTBuilder::createAssignResolve(a2, (uint64_t)&v39, v23, v14, &v37, (uint64_t *)&v40, &v34, 0);
  v25 = v24;
  v26 = *(JSC::ParserArena **)(a2 + 8);
  result = *(_QWORD *)v26;
  if (*((_QWORD *)v26 + 1) - *(_QWORD *)v26 <= 0x2FuLL)
  {
    JSC::ParserArena::allocateFreeablePool(v26);
    result = *(_QWORD *)v26;
  }
  *(_QWORD *)v26 = result + 48;
  *(_DWORD *)(result + 20) = -1;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)result = &off_1E358B120;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = v25;
  *(_DWORD *)(result + 28) = v22;
  *(_DWORD *)(result + 8) = v7;
  *(int32x2_t *)(result + 12) = vrev64_s32(*(int32x2_t *)((char *)&v39 + 4));
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseAsyncFunctionDeclaration<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v16;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char v32;
  _BYTE *v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t FuncDeclStatement;
  uint64_t v48;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[8];
  uint64_t v58;
  unsigned int v59;
  _OWORD v60[3];
  __int128 v61;

  v9 = (_DWORD *)(a1 + 7368);
  v61 = *(_OWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7400);
  v11 = *(_DWORD *)(a1 + 7412);
  v12 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v10;
  *(_DWORD *)(a1 + 7448) = v11;
  *(_DWORD *)(a1 + 7452) = v12;
  v13 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v13 + 4) = v10;
  v14 = *(_DWORD *)(a1 + 12);
  if (!v14)
  {
    __break(0xC471u);
    goto LABEL_41;
  }
  v16 = a5;
  v20 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v14 - 1) + 9) & 1;
  *(_BYTE *)(v13 + 56) = 0;
  v21 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v13, (uint64_t)v9, 0, v20, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v21;
  memset(v60, 0, 44);
  if (v21 == 191488)
  {
    v26 = *(_DWORD *)(a1 + 7400);
    v27 = *(_DWORD *)(a1 + 7412);
    v28 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v26;
    *(_DWORD *)(a1 + 7448) = v27;
    *(_DWORD *)(a1 + 7452) = v28;
    v29 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v29 + 4) = v26;
    v30 = *(_DWORD *)(a1 + 12);
    if (!v30)
    {
      __break(0xC471u);
      JUMPOUT(0x197EEDD20);
    }
    v31 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v30 - 1) + 9) & 1;
    *(_BYTE *)(v29 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v29, (uint64_t)v9, 0, v31, v22, v23, v24, v25);
    v32 = 16;
  }
  else
  {
    v32 = 9;
  }
  v33 = (_BYTE *)(a1 + 7474);
  v34 = *(_BYTE *)(a1 + 7474);
  *(_BYTE *)(a1 + 7474) = v32;
  if (v16 == 1)
  {
    *(_QWORD *)&v60[0] = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 104;
    v35 = JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 0, 1, 0, 1, a3, v60, 1, a6);
  }
  else
  {
    v35 = JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 1, 1, 0, 1, a3, v60, 1, a6);
  }
  if ((v35 & 1) == 0)
  {
    if (*v9 != 20 && (*v9 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse this async function");
      goto LABEL_26;
    }
LABEL_25:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    goto LABEL_26;
  }
  if (!*(_QWORD *)&v60[0])
  {
    if (*v9 != 20 && (*v9 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Async function statements must have a name");
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  JSC::Parser<JSC::Lexer<char16_t>>::declareFunction((uint64_t)v57, (uint64_t *)a1, *(WTF::StringImpl ***)&v60[0], v36, v37, v38, v39, v40);
  if ((v57[0] & 1) == 0)
    goto LABEL_10;
  v50 = *(_DWORD *)(a1 + 12);
  if (!v50)
  {
    __break(0xC471u);
LABEL_41:
    JUMPOUT(0x197EEDD10);
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v50 - 1) + 9) & 1) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      v56 = **(_QWORD **)&v60[0];
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(a1, "Cannot declare an async function named '", &v56);
    }
    goto LABEL_26;
  }
LABEL_10:
  if ((v57[0] & 2) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      v56 = **(_QWORD **)&v60[0];
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[84],WTF::UniquedStringImpl *,char const(&)[2]>(a1, &v56);
    }
    goto LABEL_26;
  }
  if (!a4)
  {
    if (JSC::Parser<JSC::Lexer<unsigned char>>::exportName(*(_QWORD *)(a1 + 7512), **(WTF::StringImpl ***)&v60[0], v41, v42, v43, v44, v45, v46))
    {
      JSC::ModuleScopeData::exportBinding(*(_QWORD *)(a1 + 7512), **(WTF::StringImpl ***)&v60[0], *(_QWORD **)&v60[0], v51, v52, v53, v54, v55);
      goto LABEL_12;
    }
    if (!*(_QWORD *)(a1 + 7360))
    {
      v56 = **(_QWORD **)&v60[0];
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 0, "Cannot export a duplicate function name: '", &v56);
    }
LABEL_26:
    v48 = 0;
    goto LABEL_14;
  }
LABEL_12:
  FuncDeclStatement = JSC::ASTBuilder::createFuncDeclStatement(a2, (uint64_t)&v61, (uint64_t)v60, v42, v43, v44, v45, v46);
  if (*(_DWORD *)(v58 + 12) <= v59)
  {
    __break(0xC471u);
    JUMPOUT(0x197EEDD18);
  }
  v48 = FuncDeclStatement;
  JSC::Scope::appendFunction(*(_QWORD *)v58 + 720 * v59, *((uint64_t *)&v60[0] + 1));
LABEL_14:
  *v33 = v34;
  return v48;
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[83]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected a variable name or a module export name string for the export declaration");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[12]>(uint64_t a1, const char *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  WTF *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v29 = off_1E3572250;
    v30 = (WTF *)v32;
    v31 = xmmword_199122F80;
    v32[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v29);
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v4, "%s", ". ");
    v29[5]((WTF::StringPrintStream *)&v29);
    v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v5, "%s", "Expected '");
    WTF::PrintStream::printf(v5, "%s", "}");
    WTF::PrintStream::printf(v5, "%s", "' to ");
    WTF::PrintStream::printf(v5, "%s", "end");
    WTF::PrintStream::printf(v5, "%s", " an ");
    WTF::PrintStream::printf(v5, "%s", a2);
    WTF::PrintStream::printf(v5, "%s", ".");
    v29[5]((WTF::StringPrintStream *)&v29);
    WTF::String::fromUTF8WithLatin1Fallback(v30, v31, &v28);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v28, v6, v7, v8, v9, v10, v11);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v30 != (WTF *)v32)
      WTF::fastFree((unint64_t)v30, v12, v13, v14, v15, v16, v17, v18);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseVariableDeclaration<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  BOOL v23;
  char v24;
  _BYTE v25[12];
  uint64_t v26;
  uint64_t v27;
  int v28;

  v6 = *(_DWORD *)(a1 + 7400);
  v7 = *(_DWORD *)(a1 + 7404);
  v8 = *(_DWORD *)(a1 + 7408);
  v28 = 0;
  v9 = JSC::Parser<JSC::Lexer<char16_t>>::parseVariableDeclarationList<JSC::ASTBuilder>(a1, a2, &v28, &v27, &v26, (uint64_t)v25, (uint64_t)v25, (uint64_t)v25, 1, a3, a4, &v24);
  if (*(_QWORD *)(a1 + 7360))
    return 0;
  v14 = v9;
  v15 = *(_DWORD *)(a1 + 7368);
  if (v15 != 17)
  {
    v23 = v15 == 1 || v15 == 20;
    if (v23 || *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
      goto LABEL_5;
    if ((v15 & 0x100000) != 0)
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    else
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected ';' after variable declaration");
    return 0;
  }
  v16 = *(_DWORD *)(a1 + 7400);
  v17 = *(_DWORD *)(a1 + 7412);
  v18 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v16;
  *(_DWORD *)(a1 + 7448) = v17;
  *(_DWORD *)(a1 + 7452) = v18;
  result = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(result + 4) = v16;
  v20 = *(_DWORD *)(a1 + 12);
  if (!v20)
  {
    __break(0xC471u);
    return result;
  }
  v21 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v20 - 1) + 9) & 1;
  *(_BYTE *)(result + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)result, a1 + 7368, 0, v21, v10, v11, v12, v13);
LABEL_5:
  v22 = *(uint64_t **)(a2 + 8);
  result = *v22;
  if ((unint64_t)(v22[1] - *v22) <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    result = *v22;
  }
  *v22 = result + 48;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)result = &off_1E3589A58;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = v14;
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 8) = v6;
  *(_DWORD *)(result + 12) = v8;
  *(_DWORD *)(result + 16) = v7;
  *(_DWORD *)(result + 20) = -1;
  return result;
}

void JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[17]>(uint64_t a1)
{
  WTF::PrintStream *v2;
  WTF::PrintStream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(a1, (uint64_t)&v27);
    v2 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v2, "%s", ". ");
    v27[5]((WTF::StringPrintStream *)&v27);
    v3 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v27[4])(&v27);
    WTF::PrintStream::printf(v3, "%s", "Expected '");
    WTF::PrintStream::printf(v3, "%s", "}");
    WTF::PrintStream::printf(v3, "%s", "' to ");
    WTF::PrintStream::printf(v3, "%s", "end");
    WTF::PrintStream::printf(v3, "%s", " an ");
    WTF::PrintStream::printf(v3, "%s", "import attribute");
    WTF::PrintStream::printf(v3, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseVariableDeclarationList<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, unsigned int a11, _BYTE *a12)
{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  const char *v36;
  int v37;
  int v38;
  int v39;
  WTF::AtomStringImpl *v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  char *v66;
  int v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v75;
  void (**v76)(JSC::EmptyVarExpression *__hidden);
  int v77;
  char v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  JSC::ParserArena *v92;
  uint64_t v93;
  uint64_t *v94;
  char *v95;
  int v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  int v115;
  unsigned int v116;
  uint64_t *v117;
  _BYTE *v118;
  unsigned int v119;
  uint64_t v121;
  int32x2_t v123;
  _OWORD *v128;
  uint64_t v129;
  unint64_t v130;
  int v131;
  const char *v132;
  int v133;
  _OWORD v134[3];
  char *v135;
  uint64_t v136;
  uint64_t v137;

  v13 = a2;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v118 = (_BYTE *)(a1 + 7344);
  memset(&v134[1], 255, 24);
  v18 = a10 == 2;
  v128 = (_OWORD *)(a1 + 7400);
  v19 = (int *)(a1 + 7368);
  v121 = a1 + 7444;
  v20 = a1 + 7416;
  v123 = 0;
  while (2)
  {
    v129 = v17;
    v119 = v15;
    while (1)
    {
      v21 = v16;
      *a4 = 0;
      v134[0] = *v128;
      v22 = *(_DWORD *)(a1 + 7400);
      v23 = *(_DWORD *)(a1 + 7412);
      v24 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v22;
      *(_DWORD *)(a1 + 7448) = v23;
      *(_DWORD *)(a1 + 7452) = v24;
      v25 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v25 + 4) = v22;
      v26 = *(_DWORD *)(a1 + 12);
      if (!v26)
      {
        __break(0xC471u);
        JUMPOUT(0x197EEF04CLL);
      }
      v27 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 9) & 1;
      *(_BYTE *)(v25 + 56) = 0;
      v28 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v25, (uint64_t)v19, 0, v27, (uint64_t)a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v28;
      if (v17)
        v134[0] = *v128;
      ++*a3;
      if (v28 == 12)
        break;
      if (v28 == 13)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot use a private name to declare a variable");
        return 0;
      }
      if (JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, v28, *(_QWORD **)(a1 + 7376)))
        break;
      v77 = *v19;
      if (*v19 != 545)
      {
        if (v77 != 1048592)
        {
          if (v77 == 546)
            break;
          goto LABEL_50;
        }
        v111 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        v112 = **(_QWORD **)(a1 + 7376);
        if (v112 != *(_QWORD *)(v111 + 496))
        {
          v113 = v15;
          v114 = a4;
          goto LABEL_120;
        }
      }
      v115 = *(_DWORD *)(a1 + 12);
      if (!v115)
      {
        __break(0xC471u);
        JUMPOUT(0x197EEF064);
      }
      v113 = v15;
      v114 = a4;
      v116 = v115 - 1;
      v18 = a10 == 2;
      v13 = a2;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v116 + 9) & 1) == 0
        && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v116 + 11) & 2) == 0
        || v77 == 546)
      {
        break;
      }
      if (v77 == 1048592)
      {
        v111 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        v112 = **(_QWORD **)(a1 + 7376);
LABEL_120:
        a4 = v114;
        v18 = a10 == 2;
        v13 = a2;
        v15 = v113;
        if (v112 == *(_QWORD *)(v111 + 128))
          break;
      }
LABEL_50:
      v78 = v118[96];
      v118[96] = 1;
      v79 = JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, v13, a10, a11, 0, 0, v18, 0);
      v118[96] = v78;
      v80 = *(_DWORD *)(a1 + 7368);
      if (!v79)
      {
        if (v80 != 20 && (v80 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse this destructuring pattern");
          return 0;
        }
        goto LABEL_138;
      }
      v16 = v21;
      if (a9 == 1 && v80 != 21)
      {
        if (v80 != 20 && (v80 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected an initializer in destructuring variable declaration");
          return 0;
        }
LABEL_138:
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        return 0;
      }
      *a4 = v79;
      v17 = v129;
      if (v80 == 21)
      {
        v81 = v79;
        v82 = *(_DWORD *)(a1 + 7400);
        v83 = *(_DWORD *)(a1 + 7412);
        v84 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v82;
        *(_DWORD *)(a1 + 7448) = v83;
        *(_DWORD *)(a1 + 7452) = v84;
        v85 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v85 + 4) = v82;
        v86 = *(_DWORD *)(a1 + 12);
        if (!v86)
        {
          __break(0xC471u);
          JUMPOUT(0x197EEF05CLL);
        }
        v87 = a4;
        v88 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v86 - 1) + 9) & 1;
        *(_BYTE *)(v85 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v85, (uint64_t)v19, 0, v88, (uint64_t)a5, a6, a7, a8);
        LODWORD(v135) = 0;
        v136 = *(_QWORD *)(a1 + 7496);
        v137 = a1;
        *(_QWORD *)(a1 + 7496) = &v135;
        v89 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, v13, &v135);
        *(_QWORD *)(v137 + 7496) = v136;
        if (*(_QWORD *)(a1 + 7360))
          return 0;
        v90 = v13;
        v91 = v89;
        v92 = *(JSC::ParserArena **)(v90 + 8);
        v17 = *(_QWORD *)v92;
        v16 = v21;
        v93 = v81;
        if (*((_QWORD *)v92 + 1) - *(_QWORD *)v92 <= 0x2FuLL)
        {
          JSC::ParserArena::allocateFreeablePool(v92);
          v93 = v81;
          v16 = v21;
          v17 = *(_QWORD *)v92;
        }
        v40 = 0;
        *(_QWORD *)v92 = v17 + 48;
        *(_DWORD *)(v17 + 8) = v134[0];
        *(int32x2_t *)(v17 + 12) = vrev64_s32(*(int32x2_t *)((char *)v134 + 4));
        *(_DWORD *)(v17 + 20) = -1;
        *(_BYTE *)(v17 + 24) = 0;
        *(_BYTE *)(v17 + 25) = 126;
        *(_BYTE *)(v17 + 26) = 0;
        *(_QWORD *)v17 = &off_1E358B880;
        *(_QWORD *)(v17 + 32) = v93;
        *(_QWORD *)(v17 + 40) = v91;
        *a5 = v91;
        a4 = v87;
        goto LABEL_30;
      }
      if (v80 != 6)
        return v17;
    }
    v33 = *(_DWORD *)(a1 + 12);
    if (!v33)
    {
      __break(0xC471u);
      JUMPOUT(0x197EEF054);
    }
    v34 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v33 - 1) + 10);
    if ((v34 & 0x100000) != 0
      && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 880))
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'arguments' as an identifier in static block");
      return 0;
    }
    v35 = *v19;
    if (*v19 == 544)
      goto LABEL_105;
    if (v35 == 1048592)
    {
      v107 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      v108 = **(_QWORD **)(a1 + 7376);
      if (v108 != *(_QWORD *)(v107 + 328))
      {
        v109 = a4;
LABEL_109:
        a4 = v109;
        if (v108 != *(_QWORD *)(v107 + 128))
          goto LABEL_12;
LABEL_110:
        v110 = (v34 & 0x102000) != 0 || *v118 == 0;
        if (v110 || *(_DWORD *)(a1 + 7480) == 1)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            if (a10 >= 3)
            {
              __break(0xC471u);
              JUMPOUT(0x197EEF08CLL);
            }
            v135 = off_1E357B338[a10];
            v132 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[2],char const*>(a1, "Cannot use 'await' as a ", (const char **)&v135, &v132);
          }
          return 0;
        }
        goto LABEL_12;
      }
LABEL_105:
      if (a10 - 1 <= 1)
      {
        if ((v35 & 0x100000) != 0)
          goto LABEL_138;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[64]>(a1);
        return 0;
      }
      v109 = a4;
      if (v35 == 546)
        goto LABEL_110;
      if (v35 != 1048592)
        goto LABEL_12;
      v107 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      v108 = **(_QWORD **)(a1 + 7376);
      goto LABEL_109;
    }
    if (v35 == 546)
      goto LABEL_110;
LABEL_12:
    v132 = *(const char **)v20;
    v36 = v132;
    v133 = *(_DWORD *)(v20 + 8);
    v37 = *(_DWORD *)(a1 + 7400);
    v38 = *(_DWORD *)(a1 + 7404);
    v39 = *(_DWORD *)(a1 + 7408);
    *(_DWORD *)(a6 + 8) = v133;
    *(_QWORD *)a6 = v36;
    v40 = *(WTF::AtomStringImpl **)(a1 + 7376);
    *(_QWORD *)&v134[2] = *(_QWORD *)(v20 + 16);
    v134[1] = *(_OWORD *)v20;
    LODWORD(v36) = *(_DWORD *)(a1 + 7400);
    v41 = *(_DWORD *)(a1 + 7412);
    v42 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = (_DWORD)v36;
    *(_DWORD *)(a1 + 7448) = v41;
    *(_DWORD *)(a1 + 7452) = v42;
    v43 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v43 + 4) = (_DWORD)v36;
    v44 = *(_DWORD *)(a1 + 12);
    if (!v44)
    {
      __break(0xC471u);
      JUMPOUT(0x197EEF044);
    }
    v45 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v44 - 1) + 9) & 1;
    *(_BYTE *)(v43 + 56) = 0;
    v46 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v43, (uint64_t)v19, 0, v45, v29, v30, v31, v32);
    *(_DWORD *)(a1 + 7368) = v46;
    v51 = JSC::Parser<JSC::Lexer<char16_t>>::declareVariable(a1, v40, a10, 2, v47, v48, v49, v50);
    if (v51)
    {
      if ((v51 & 1) != 0)
      {
        v106 = *(_DWORD *)(a1 + 12);
        if (!v106)
        {
          __break(0xC471u);
          JUMPOUT(0x197EEF06CLL);
        }
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v106 - 1) + 9) & 1) != 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v135 = *(char **)v40;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],WTF::UniquedStringImpl *,char const(&)[16]>(a1, (uint64_t *)&v135);
          }
          return 0;
        }
      }
      if (v51 >= 2)
      {
        if (a10 == 2)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v135 = *(char **)v40;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v135);
          }
        }
        else if (a10 == 1)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            v135 = *(char **)v40;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[39],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v135);
          }
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          v135 = *(char **)v40;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[73],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v135);
        }
        return 0;
      }
    }
    if (!a11)
    {
      if (!JSC::Parser<JSC::Lexer<unsigned char>>::exportName(*(_QWORD *)(a1 + 7512), *(WTF::StringImpl **)v40, v52, v53, (uint64_t)a5, a6, a7, a8))
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v135 = *(char **)v40;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v135);
        }
        return 0;
      }
      JSC::ModuleScopeData::exportBinding(*(_QWORD *)(a1 + 7512), *(WTF::StringImpl **)v40, v40, v101, v102, v103, v104, v105);
    }
    if (v46 != 21)
    {
      v117 = a4;
      if (!a9 && a10 == 2)
      {
        *a12 = 1;
        v16 = v21;
      }
      else
      {
        v16 = v21;
        if (a9 && a10 == 2)
        {
          if (*v19 == 20 || (*v19 & 0x100000) != 0)
            goto LABEL_138;
          if (!*(_QWORD *)(a1 + 7360))
          {
            v135 = *(char **)v40;
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[26],WTF::UniquedStringImpl *,char const(&)[2],char const(&)[26]>(a1, (uint64_t *)&v135);
          }
          return 0;
        }
        if (!a10)
        {
          v75 = *(uint64_t **)(a2 + 8);
          v17 = *v75;
          if ((unint64_t)(v75[1] - *v75) <= 0x27)
          {
            JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
            v16 = v21;
            v17 = *v75;
          }
          *v75 = v17 + 40;
          *(_DWORD *)(v17 + 8) = v37;
          *(_DWORD *)(v17 + 12) = v39;
          *(_DWORD *)(v17 + 16) = v38;
          *(_DWORD *)(v17 + 20) = -1;
          *(_BYTE *)(v17 + 24) = 0;
          *(_BYTE *)(v17 + 25) = 126;
          *(_BYTE *)(v17 + 26) = 0;
          v76 = &off_1E3589E40;
LABEL_44:
          *(_QWORD *)v17 = v76;
          *(_QWORD *)(v17 + 32) = v40;
          a4 = v117;
          v18 = a10 == 2;
LABEL_30:
          v13 = a2;
          goto LABEL_20;
        }
      }
      v100 = *(uint64_t **)(a2 + 8);
      v17 = *v100;
      if ((unint64_t)(v100[1] - *v100) <= 0x27)
      {
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
        v16 = v21;
        v17 = *v100;
      }
      *v100 = v17 + 40;
      *(_DWORD *)(v17 + 8) = v37;
      *(_DWORD *)(v17 + 12) = v39;
      *(_DWORD *)(v17 + 16) = v38;
      *(_DWORD *)(v17 + 20) = -1;
      *(_BYTE *)(v17 + 24) = 0;
      *(_BYTE *)(v17 + 25) = 126;
      *(_BYTE *)(v17 + 26) = 0;
      v76 = &off_1E3589FC0;
      goto LABEL_44;
    }
    v54 = *(_DWORD *)(a1 + 7424);
    v130 = *(unsigned int *)(a1 + 7416) | ((unint64_t)(*(_DWORD *)(a1 + 7420) + 1) << 32);
    v131 = v54;
    v55 = *(_DWORD *)(v20 + 8);
    *(_QWORD *)a7 = *(_QWORD *)v20;
    *(_DWORD *)(a7 + 8) = v55;
    v56 = *(_DWORD *)(a1 + 7400);
    v57 = *(_DWORD *)(a1 + 7412);
    v58 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v56;
    *(_DWORD *)(a1 + 7448) = v57;
    *(_DWORD *)(a1 + 7452) = v58;
    v59 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v59 + 4) = v56;
    v60 = *(_DWORD *)(a1 + 12);
    if (!v60)
    {
      __break(0xC471u);
      JUMPOUT(0x197EEF03CLL);
    }
    v61 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v60 - 1) + 9) & 1;
    *(_BYTE *)(v59 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v59, (uint64_t)v19, 0, v61, (uint64_t)a5, a6, a7, a8);
    v18 = a10 == 2;
    v13 = a2;
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    LODWORD(v135) = 0;
    v136 = *(_QWORD *)(a1 + 7496);
    v137 = a1;
    *(_QWORD *)(a1 + 7496) = &v135;
    v62 = (_QWORD *)JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, &v135);
    *(_QWORD *)(v137 + 7496) = v136;
    v63 = *(_QWORD *)v121;
    *(_DWORD *)(a8 + 8) = *(_DWORD *)(v121 + 8);
    *(_QWORD *)a8 = v63;
    *a5 = (uint64_t)v62;
    if (!v62)
    {
      if (*v19 == 20 || (*v19 & 0x100000) != 0)
        goto LABEL_138;
      if (!*(_QWORD *)(a1 + 7360))
      {
        v135 = *(char **)v40;
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[57],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v135);
      }
      return 0;
    }
    JSC::ASTBuilder::createAssignResolve(a2, (uint64_t)v134, (_DWORD **)v40, v62, (uint64_t *)&v132, (uint64_t *)&v130, (uint64_t *)v121, v18);
    v17 = v64;
    v16 = v21;
    if (!v64)
      goto LABEL_29;
LABEL_20:
    if (!v129)
    {
      v15 = LODWORD(v134[0]);
      v123 = vrev64_s32(*(int32x2_t *)((char *)v134 + 4));
      goto LABEL_22;
    }
    if (!v16)
    {
      v94 = a4;
      *(_BYTE *)(v129 + 24) = 1;
      v95 = *(char **)(v129 + 8);
      v96 = *(_DWORD *)(v129 + 16);
      v135 = v95;
      LODWORD(v136) = v96;
      v97 = *(_QWORD *)(a1 + 7520);
      if (v97 && (v95 & 0x80000000) == 0)
        JSC::DebuggerPausePositions::appendPause(v97, (uint64_t)&v135);
      v98 = *(uint64_t **)(v13 + 8);
      v99 = *v98;
      if ((unint64_t)(v98[1] - *v98) <= 0x2F)
      {
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v13 + 8));
        v99 = *v98;
      }
      *v98 = v99 + 48;
      *(_DWORD *)(v99 + 8) = v119;
      *(int32x2_t *)(v99 + 12) = v123;
      *(_DWORD *)(v99 + 20) = -1;
      *(_BYTE *)(v99 + 24) = 0;
      *(_BYTE *)(v99 + 25) = 126;
      *(_BYTE *)(v99 + 26) = 0;
      *(_QWORD *)v99 = &off_1E35896F8;
      *(_QWORD *)(v99 + 32) = v129;
      *(_QWORD *)(v99 + 40) = 0;
      v129 = v99;
      v21 = v99;
      a4 = v94;
    }
    v65 = a4;
    *(_BYTE *)(v17 + 24) = 1;
    v66 = *(char **)(v17 + 8);
    v67 = *(_DWORD *)(v17 + 16);
    v135 = v66;
    LODWORD(v136) = v67;
    v68 = *(_QWORD *)(a1 + 7520);
    if (v68 && (v66 & 0x80000000) == 0)
      JSC::DebuggerPausePositions::appendPause(v68, (uint64_t)&v135);
    v69 = *(uint64_t **)(v13 + 8);
    v70 = *v69;
    if ((unint64_t)(v69[1] - *v69) <= 0x2F)
    {
      JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v13 + 8));
      v70 = *v69;
    }
    *v69 = v70 + 48;
    *(_DWORD *)(v70 + 8) = v134[0];
    *(int32x2_t *)(v70 + 12) = vrev64_s32(*(int32x2_t *)((char *)v134 + 4));
    *(_DWORD *)(v70 + 20) = -1;
    *(_BYTE *)(v70 + 24) = 0;
    *(_BYTE *)(v70 + 25) = 126;
    *(_BYTE *)(v70 + 26) = 0;
    *(_QWORD *)v70 = &off_1E35896F8;
    *(_QWORD *)(v70 + 32) = v17;
    *(_QWORD *)(v70 + 40) = 0;
    *(_QWORD *)(v21 + 40) = v70;
    v16 = v70;
    a4 = v65;
LABEL_29:
    v15 = v119;
    v17 = v129;
LABEL_22:
    if (*v19 == 6)
      continue;
    break;
  }
  if (v40)
  {
    v71 = *(uint64_t **)(v13 + 8);
    v72 = *v71;
    if ((unint64_t)(v71[1] - *v71) <= 0x2F)
    {
      JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v13 + 8));
      v72 = *v71;
    }
    *v71 = v72 + 48;
    v73 = *(_QWORD *)&v134[1];
    *(_QWORD *)v72 = &off_1E358B760;
    *(_QWORD *)(v72 + 8) = v73;
    *(_DWORD *)(v72 + 16) = DWORD2(v134[1]);
    *(_QWORD *)(v72 + 20) = *(_QWORD *)((char *)&v134[1] + 12);
    *(_DWORD *)(v72 + 28) = DWORD1(v134[2]);
    *(_QWORD *)(v72 + 32) = v40;
    *(_BYTE *)(v72 + 40) = v18;
    *a4 = v72;
  }
  return v17;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseImportClauseItem<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  int v13;
  int v14;
  WTF::AtomStringImpl *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BOOL4 v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  WTF::AtomStringImpl *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t result;
  BOOL isAllowedIdentifierLet;
  BOOL isAllowedIdentifierYield;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int16 *v59;
  uint64_t v60;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  BOOL v73;
  BOOL v74;
  WTF::PrintStream *v75;

  v11 = *(_DWORD *)(a1 + 7400);
  v12 = *(_DWORD *)(a1 + 7404);
  v13 = *(_DWORD *)(a1 + 7408);
  switch(a3)
  {
    case 1:
      v14 = *(_DWORD *)(a1 + 7368);
      v15 = *(WTF::AtomStringImpl **)(a1 + 7376);
      if (v14 == 14)
      {
        v57 = *(_QWORD *)v15;
        if (*(_QWORD *)v15)
        {
          v58 = *(unsigned int *)(v57 + 16);
          v59 = *(unsigned __int16 **)(v57 + 8);
          LODWORD(v57) = *(_DWORD *)(v57 + 4);
          v60 = (v58 >> 2) & 1;
        }
        else
        {
          v59 = 0;
          v60 = 1;
        }
        if (WTF::hasUnpairedSurrogate(v59, v57 | (unint64_t)(v60 << 32)))
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[65]>(a1);
          return 0;
        }
      }
      v16 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v11;
      *(_DWORD *)(a1 + 7448) = v16;
      *(_DWORD *)(a1 + 7452) = v12;
      v17 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v17 + 4) = v11;
      v18 = *(_DWORD *)(a1 + 12);
      if (v18)
      {
        v19 = a1 + 7368;
        v20 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v18 - 1) + 9) & 1;
        *(_BYTE *)(v17 + 56) = 0;
        v21 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v17, a1 + 7368, 0, v20, a5, a6, a7, a8);
        v22 = 0;
        *(_DWORD *)(a1 + 7368) = v21;
        if (v21 == 12)
          v22 = **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 888)
             && *(_BYTE *)(a1 + 7384) == 0;
        if (v14 == 14 && !v22)
        {
          if (v21 != 20 && (v21 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected 'as' after the module export name string");
            return 0;
          }
        }
        else
        {
          if (!v22)
          {
            v30 = v15;
LABEL_16:
            if (v14 == 546)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as an imported binding name");
              return 0;
            }
            if ((v14 & 0x200) != 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use keyword as imported binding name");
              return 0;
            }
            goto LABEL_18;
          }
          v23 = *(_DWORD *)(a1 + 7400);
          v24 = *(_DWORD *)(a1 + 7412);
          v25 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v23;
          *(_DWORD *)(a1 + 7448) = v24;
          *(_DWORD *)(a1 + 7452) = v25;
          v26 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v26 + 4) = v23;
          v27 = *(_DWORD *)(a1 + 12);
          if (!v27)
          {
            __break(0xC471u);
            JUMPOUT(0x197EEF6F4);
          }
          v28 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v27 - 1) + 9) & 1;
          *(_BYTE *)(v26 + 56) = 0;
          v29 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v26, a1 + 7368, 0, v28, a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v29;
          if (v29 == 12)
          {
            v14 = 12;
            goto LABEL_13;
          }
          isAllowedIdentifierLet = JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, v29, *(_QWORD **)(a1 + 7376));
          v14 = *(_DWORD *)(a1 + 7368);
          if (isAllowedIdentifierLet
            || (isAllowedIdentifierYield = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376)), v14 = *(_DWORD *)(a1 + 7368), isAllowedIdentifierYield)|| v14 == 546)
          {
LABEL_13:
            v30 = *(WTF::AtomStringImpl **)(a1 + 7376);
            v31 = *(_DWORD *)(a1 + 7400);
            v32 = *(_DWORD *)(a1 + 7412);
            v33 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v31;
            *(_DWORD *)(a1 + 7448) = v32;
            *(_DWORD *)(a1 + 7452) = v33;
            v34 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v34 + 4) = v31;
            v35 = *(_DWORD *)(a1 + 12);
            if (!v35)
            {
              __break(0xC471u);
              JUMPOUT(0x197EEF6FCLL);
            }
            goto LABEL_14;
          }
          if (v14 != 1048592)
          {
LABEL_26:
            if (v14 != 20 && (v14 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected a variable name for the import declaration");
              return 0;
            }
            goto LABEL_40;
          }
          if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
          {
            v14 = 1048592;
            goto LABEL_13;
          }
        }
LABEL_40:
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        return 0;
      }
      goto LABEL_94;
    case 2:
      v14 = *(_DWORD *)(a1 + 7368);
      v30 = *(WTF::AtomStringImpl **)(a1 + 7376);
      v54 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      v55 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v11;
      *(_DWORD *)(a1 + 7448) = v55;
      *(_DWORD *)(a1 + 7452) = v12;
      v34 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v34 + 4) = v11;
      v56 = *(_DWORD *)(a1 + 12);
      if (!v56)
      {
        __break(0xC471u);
        JUMPOUT(0x197EEF70CLL);
      }
      v37 = a1 + 7368;
      v15 = (WTF::AtomStringImpl *)(v54 + 192);
      v36 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v56 - 1) + 9) & 1;
      *(_BYTE *)(v34 + 56) = 0;
      goto LABEL_15;
    case 0:
      v43 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      v44 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v11;
      *(_DWORD *)(a1 + 7448) = v44;
      *(_DWORD *)(a1 + 7452) = v12;
      v45 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v45 + 4) = v11;
      v46 = *(_DWORD *)(a1 + 12);
      if (!v46)
      {
        __break(0xC471u);
        JUMPOUT(0x197EEF704);
      }
      v19 = a1 + 7368;
      v47 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v46 - 1) + 9) & 1;
      *(_BYTE *)(v45 + 56) = 0;
      v48 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v45, a1 + 7368, 0, v47, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v48;
      if (v48 != 12
        || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 888)
        || *(_BYTE *)(a1 + 7384))
      {
        if (v48 != 20 && (v48 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected 'as' before imported binding name");
          return 0;
        }
        goto LABEL_40;
      }
      v63 = *(_DWORD *)(a1 + 7400);
      v64 = *(_DWORD *)(a1 + 7412);
      v65 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v63;
      *(_DWORD *)(a1 + 7448) = v64;
      *(_DWORD *)(a1 + 7452) = v65;
      v66 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v66 + 4) = v63;
      v67 = *(_DWORD *)(a1 + 12);
      if (!v67)
      {
        __break(0xC471u);
        JUMPOUT(0x197EEF71CLL);
      }
      v68 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v67 - 1) + 9) & 1;
      *(_BYTE *)(v66 + 56) = 0;
      v69 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v66, a1 + 7368, 0, v68, v49, v50, v51, v52);
      *(_DWORD *)(a1 + 7368) = v69;
      if (v69 == 12)
      {
        v14 = 12;
      }
      else
      {
        v73 = JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, v69, *(_QWORD **)(a1 + 7376));
        v14 = *(_DWORD *)(a1 + 7368);
        if (!v73)
        {
          v74 = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376));
          v14 = *(_DWORD *)(a1 + 7368);
          if (!v74 && v14 != 546)
          {
            if (v14 != 1048592)
              goto LABEL_26;
            if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
              goto LABEL_40;
            v14 = 1048592;
          }
        }
      }
      v30 = *(WTF::AtomStringImpl **)(a1 + 7376);
      v70 = *(_DWORD *)(a1 + 7400);
      v71 = *(_DWORD *)(a1 + 7412);
      v72 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v70;
      *(_DWORD *)(a1 + 7448) = v71;
      *(_DWORD *)(a1 + 7452) = v72;
      v34 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v34 + 4) = v70;
      v35 = *(_DWORD *)(a1 + 12);
      if (v35)
      {
        v15 = (WTF::AtomStringImpl *)(v43 + 32);
LABEL_14:
        v36 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v35 - 1) + 9) & 1;
        *(_BYTE *)(v34 + 56) = 0;
        v37 = v19;
LABEL_15:
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v34, v37, 0, v36, a5, a6, a7, a8);
        goto LABEL_16;
      }
LABEL_94:
      __break(0xC471u);
      JUMPOUT(0x197EEF6ECLL);
  }
  v15 = 0;
  v30 = 0;
LABEL_18:
  v38 = JSC::Parser<JSC::Lexer<char16_t>>::declareVariable(a1, v30, 2, a3 == 0, a5, a6, a7, a8);
  if (v38)
  {
    if ((v38 & 1) != 0)
    {
      v62 = *(_DWORD *)(a1 + 12);
      if (!v62)
      {
        __break(0xC471u);
        JUMPOUT(0x197EEF714);
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v62 - 1) + 9) & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v75 = *(WTF::PrintStream **)v30;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[42],WTF::UniquedStringImpl *,char const(&)[16]>(a1, (uint64_t *)&v75);
        }
        return 0;
      }
    }
    if (v38 >= 2)
    {
      if (!*(_QWORD *)(a1 + 7360))
      {
        v75 = *(WTF::PrintStream **)v30;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[49],WTF::UniquedStringImpl *,char const(&)[2]>(a1, &v75);
      }
      return 0;
    }
  }
  v39 = *(uint64_t **)(a2 + 8);
  result = *v39;
  if ((unint64_t)(v39[1] - *v39) <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    result = *v39;
  }
  *v39 = result + 48;
  *(_DWORD *)(result + 8) = v11;
  *(_DWORD *)(result + 12) = v13;
  *(_DWORD *)(result + 16) = v12;
  *(_DWORD *)(result + 20) = -1;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)result = &off_1E357B290;
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v30;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseExpressionOrLabelStatement<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int *v11;
  uint64_t v12;
  _WORD *i;
  BOOL v14;
  unint64_t v15;
  unsigned int v16;
  void *v18;
  uint64_t v19;
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  int v41;
  unsigned int v42;
  WTF *v43;
  WTF *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 v60;
  const char *v62;
  int v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  WTF *v71;
  uint64_t v72;

  v8 = a3;
  v71 = 0;
  v72 = 0;
  v11 = (int *)(a1 + 7368);
  do
  {
LABEL_2:
    v12 = *(_QWORD *)(a1 + 7288);
    for (i = *(_WORD **)(v12 + 80); ; ++i)
    {
      v15 = *(_QWORD *)(v12 + 96);
      if ((unint64_t)i >= v15)
        break;
      v16 = (unsigned __int16)*i;
      if (v16 <= 0xFF)
      {
        v14 = *i > 0x20u || ((1 << v16) & 0x100001A00) == 0;
        if (!v14 || *i == 160)
          continue;
      }
      else
      {
        if (u_charType((unsigned __int16)*i) == 12 || v16 == 65279)
          continue;
        v16 = (unsigned __int16)*i;
      }
      if (v16 != 10 && v16 != 13 && (v16 & 0xFFFE) != 0x2028)
      {
        v15 = *(_QWORD *)(v12 + 96);
        break;
      }
    }
    if ((unint64_t)i >= v15 || *i != 58)
    {
      v19 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpressionStatement<JSC::ASTBuilder>(a1, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_18;
    }
    v18 = (void *)*(unsigned int *)(a1 + 7368);
    if ((_DWORD)v18 == 544
      || (_DWORD)v18 == 1048592
      && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 328))
    {
      v63 = *(_DWORD *)(a1 + 12);
      if (!v63)
      {
        __break(0xC471u);
        JUMPOUT(0x197EEFD50);
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v63 - 1) + 9) & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v64 = "in strict mode";
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[29],char const*>(a1, (const char **)&v64);
        }
        goto LABEL_52;
      }
    }
    if (JSC::Parser<JSC::Lexer<char16_t>>::isDisallowedIdentifierAwait(a1, (int)v18, *(_QWORD **)(a1 + 7376)))
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_52;
      *(_QWORD *)&v64 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
      v62 = "Cannot use 'await' as a label ";
LABEL_98:
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[31],char const*>(a1, 0, v62, (const char **)&v64);
      goto LABEL_52;
    }
    if (JSC::Parser<JSC::Lexer<char16_t>>::isDisallowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376)))
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_52;
      *(_QWORD *)&v64 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierYieldReason(a1);
      v62 = "Cannot use 'yield' as a label ";
      goto LABEL_98;
    }
    v21 = *(_QWORD **)(a1 + 7376);
    v68 = *(_QWORD *)(a1 + 7416);
    v69 = *(_DWORD *)(a1 + 7424);
    v66 = *(_QWORD *)(a1 + 7428);
    v67 = *(_DWORD *)(a1 + 7436);
    v70 = *(_OWORD *)(a1 + 7400);
    v22 = *(_DWORD *)(a1 + 7400);
    v23 = *(_DWORD *)(a1 + 7412);
    v24 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v22;
    *(_DWORD *)(a1 + 7448) = v23;
    *(_DWORD *)(a1 + 7452) = v24;
    v25 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v25 + 4) = v22;
    v26 = *(_DWORD *)(a1 + 12);
    if (!v26)
    {
      __break(0xC471u);
      JUMPOUT(0x197EEFD40);
    }
    v27 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 9) & 1;
    *(_BYTE *)(v25 + 56) = 0;
    v28 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v25, (uint64_t)v11, 0, v27, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v28;
    if (v28 != 18)
    {
      if (v28 == 20 || (v28 & 0x100000) != 0)
        goto LABEL_51;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Labels must be followed by a ':'");
LABEL_52:
      v19 = 0;
      goto LABEL_18;
    }
    v29 = *(_DWORD *)(a1 + 7400);
    v30 = *(_DWORD *)(a1 + 7412);
    v31 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v29;
    *(_DWORD *)(a1 + 7448) = v30;
    *(_DWORD *)(a1 + 7452) = v31;
    v32 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v32 + 4) = v29;
    v33 = *(_DWORD *)(a1 + 12);
    if (!v33)
    {
      __break(0xC471u);
      JUMPOUT(0x197EEFD48);
    }
    v34 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v33 - 1) + 9) & 1;
    *(_BYTE *)(v32 + 56) = 0;
    v35 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v32, (uint64_t)v11, 0, v34, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v35;
    v36 = HIDWORD(v72);
    if (HIDWORD(v72))
    {
      v57 = v71;
      v58 = HIDWORD(v72);
      while (*v21 != **(_QWORD **)v57)
      {
        v57 = (WTF *)((char *)v57 + 32);
        if (!--v58)
          goto LABEL_33;
      }
      if (v35 == 20 || (v35 & 0x100000) != 0)
        goto LABEL_51;
      if (!*(_QWORD *)(a1 + 7360))
      {
        *(_QWORD *)&v64 = *v21;
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[35],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v64);
      }
      goto LABEL_52;
    }
LABEL_33:
    if (JSC::Parser<JSC::Lexer<char16_t>>::getLabel((uint64_t *)a1, v21))
    {
      if (*v11 != 20 && (*v11 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v64 = *v21;
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 1, "Cannot find scope for the label '", (uint64_t *)&v64);
        }
        goto LABEL_52;
      }
      goto LABEL_51;
    }
    *(_QWORD *)&v64 = v21;
    *((_QWORD *)&v64 + 1) = v68;
    LODWORD(v65) = v69;
    *(_QWORD *)((char *)&v65 + 4) = v66;
    HIDWORD(v65) = v67;
    if ((_DWORD)v36 == (_DWORD)v72)
    {
      WTF::Vector<JSC::LabelInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::LabelInfo>((uint64_t)&v71, (unint64_t)&v64);
    }
    else
    {
      v59 = (_OWORD *)((char *)v71 + 32 * v36);
      v60 = v65;
      *v59 = v64;
      v59[1] = v60;
      HIDWORD(v72) = v36 + 1;
    }
  }
  while (*v11 == 12
       || JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, *v11, *(_QWORD **)(a1 + 7376))
       || JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376)));
  v37 = 0;
  v38 = *v11;
  if (*v11 > 526)
  {
    if ((v38 - 527) < 2)
      goto LABEL_41;
    if (v38 != 546)
    {
      if (v38 != 1048592)
        goto LABEL_42;
      if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
      {
        v37 = 0;
        goto LABEL_42;
      }
    }
    goto LABEL_2;
  }
  if (v38 == 518)
LABEL_41:
    v37 = 1;
LABEL_42:
  *(_QWORD *)&v64 = 0;
  v39 = HIDWORD(v72);
  if (HIDWORD(v72))
  {
    v41 = *(_DWORD *)(a1 + 12);
    if (!v41)
    {
LABEL_108:
      __break(0xC471u);
      JUMPOUT(0x197EEFAD0);
    }
    v42 = v41 - 1;
    v43 = v71;
    v44 = v71;
    v45 = HIDWORD(v72);
    while (1)
    {
      v46 = *(_QWORD **)v44;
      v44 = (WTF *)((char *)v44 + 32);
      JSC::Scope::pushLabel(*(_QWORD *)a1 + 720 * (v41 - 1), v46, v37);
      if (!--v45)
        break;
      v41 = *(_DWORD *)(a1 + 12);
      if (!v41)
        goto LABEL_108;
    }
    *(_BYTE *)(a1 + 7505) = v8;
    v51 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v64, 0, v47, v48, v49, v50);
    if (*(_DWORD *)(a1 + 12) <= v42)
    {
      __break(0xC471u);
      JUMPOUT(0x197EEFD58);
    }
    v19 = v51;
    v52 = *(_QWORD *)(*(_QWORD *)a1 + 720 * v42 + 40);
    v53 = *(_DWORD *)(v52 + 12) - 1;
    v54 = v39;
    do
    {
      if (v53 == -1)
        goto LABEL_108;
      *(_DWORD *)(v52 + 12) = v53--;
      --v54;
    }
    while (v54);
    if (v51)
    {
      v55 = 32 * v39;
      do
      {
        JSC::ASTBuilder::createLabelStatement(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v70, *(_QWORD *)((char *)v43 + v55 - 32), v19, (uint64_t *)((char *)v43 + v55 - 24), (uint64_t *)((char *)v43 + v55 - 12));
        v19 = v56;
        v55 -= 32;
      }
      while (v55);
      goto LABEL_18;
    }
LABEL_83:
    if (*v11 != 20 && (*v11 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[23]>(a1);
      goto LABEL_52;
    }
LABEL_51:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    goto LABEL_52;
  }
  *(_BYTE *)(a1 + 7505) = v8;
  v19 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v64, 0, a5, a6, a7, a8);
  if (!v19)
    goto LABEL_83;
LABEL_18:
  if (v71)
    WTF::fastFree((unint64_t)v71, v18, a3, a4, a5, a6, a7, a8);
  return v19;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v10;
  uint64_t SwitchStatement;
  int v14;
  int v15;
  int v16;
  int *v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t *v101;
  int v102;
  __int128 *v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  int *v131;
  unsigned int v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  _BOOL4 v142;
  int v143;
  int *v144;
  uint64_t v145;
  int v146;
  unint64_t v147;
  int v148;
  int v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  unint64_t v159;
  int v160;
  int v161;
  int v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  unint64_t v172;
  int v173;
  int v174;
  int v175;
  int v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  WTF::AtomStringImpl *v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  WTF *v192;
  uint64_t v193;
  WTF **v194;
  uint64_t *v195;
  uint64_t v196;
  int v197;
  int v198;
  int v199;
  int v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _DWORD *v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  int v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  int v223;
  int v224;
  int v225;
  int v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  unint64_t v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  int v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  int v242;
  int v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  const char *v248;
  uint64_t v250;
  unsigned int v251;
  int v252;
  uint64_t v253;
  _QWORD *v254;
  int v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  uint64_t v264;
  int v265;
  char v266;
  int v267;
  int v268;
  int v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int v274;
  _DWORD *v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  int v294;
  int v295;
  int v296;
  int v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  uint64_t *v301;
  char v302;
  uint64_t v303;
  uint64_t *v304;
  void (**v305)(JSC::ContinueNode *__hidden);
  int v306;
  int v307;
  uint64_t v308;
  int v309;
  int v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  unint64_t v317;
  int v318;
  unsigned int v319;
  int v320;
  int v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  int *v327;
  int v328;
  int *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  WTF *v338;
  uint64_t v339;
  uint64_t v340;
  void *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  int v349;
  int v350;
  int v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  uint64_t *v355;
  _DWORD *v356;
  int v357;
  int v358;
  int v359;
  int v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  int v370;
  int v371;
  uint64_t v372;
  int v373;
  uint64_t v374;
  int v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  int v383;
  unint64_t v384;
  int v385;
  int v386;
  int v387;
  int v388;
  uint64_t v389;
  int v390;
  uint64_t v391;
  int v392;
  uint64_t v393;
  uint64_t v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t *v398;
  _QWORD *v399;
  uint64_t v400;
  uint64_t v401;
  int v402;
  unint64_t v403;
  int v404;
  uint64_t v406;
  uint64_t *v407;
  int v408;
  WTF *v409;
  WTF *v410;
  WTF *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unsigned int v416;
  WTF *v417;
  unsigned int v418;
  char *v419;
  int v420;
  int v421;
  int *v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  uint64_t v429;
  int v430;
  WTF *v431;
  uint64_t v432;
  unsigned int v433;
  char *v434;
  unsigned int v435;
  int v436;
  int32x2_t v437;
  uint64_t *v438;
  uint64_t v439;
  int v440;
  int v441;
  int v442;
  uint64_t v443;
  int v444;
  uint64_t v445;
  int v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  int v451;
  int v452;
  int v453;
  uint64_t v454;
  int v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  int v464;
  unint64_t v465;
  int v466;
  int v467;
  int v468;
  int v469;
  uint64_t v470;
  int v471;
  uint64_t v472;
  int v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  int v478;
  int v479;
  int v480;
  uint64_t v481;
  int v482;
  uint64_t v483;
  uint64_t v484;
  unsigned int v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  int v500;
  int v501;
  int v502;
  int v503;
  uint64_t v504;
  int v505;
  uint64_t v506;
  int v507;
  int v508;
  int v509;
  int v510;
  uint64_t v511;
  int v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t *v516;
  uint64_t v517;
  int v518;
  int v519;
  int v520;
  uint64_t v521;
  int v522;
  uint64_t v523;
  int v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  _QWORD *v531;
  void *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  int v539;
  int v540;
  int v541;
  int v542;
  int v543;
  int v544;
  uint64_t v545;
  int v546;
  uint64_t v547;
  int v548;
  int v549;
  int v550;
  int v551;
  uint64_t v552;
  int v553;
  uint64_t v554;
  int v555;
  int v556;
  int v557;
  uint64_t v558;
  unsigned int v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unsigned int v564;
  uint64_t v565;
  unsigned int v566;
  WTF::AtomStringImpl *v567;
  uint64_t *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  int v572;
  int v573;
  uint64_t v574;
  int v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  int *v587;
  int v588;
  int v589;
  int v590;
  int v591;
  uint64_t v592;
  int v593;
  uint64_t v594;
  int v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  unint64_t v604;
  WTF::AtomStringImpl *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  uint64_t v613;
  WTF::StringImpl *v614;
  int v615;
  char v616;
  char v617;
  int v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  WTF *v623;
  __int128 *v624;
  _QWORD *v625;
  WTF **v626;
  int v627;
  uint64_t v628;
  _QWORD *v629;
  int v630;
  uint64_t v631;
  int v632;
  uint64_t v633;
  int v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  unsigned int v639;
  uint64_t v640;
  int v641;
  int v642;
  int v643;
  int v644;
  int v645;
  int v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  unsigned int v650;
  int v651;
  _BOOL4 v652;
  int v653;
  int v654;
  int v655;
  int v656;
  uint64_t v657;
  int v658;
  uint64_t v659;
  uint64_t *v660;
  WTF **v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  int v666;
  int v667;
  int v668;
  uint64_t v669;
  int v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t *v681;
  uint64_t v682;
  _BOOL4 v683;
  uint64_t *v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  void *v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  unint64_t v697;
  _QWORD *v698;
  int v699;
  unsigned int v700;
  uint64_t v701;
  int v702;
  uint64_t v703;
  int v704;
  int v705;
  int v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  unsigned int v715;
  unsigned int v716;
  unsigned int v717;
  uint64_t v718;
  uint64_t Label;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  int v724;
  int v725;
  int v726;
  uint64_t v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  int *v737;
  _QWORD *v738;
  const char *v739;
  uint64_t v740;
  int *v741;
  int v742;
  int v743;
  int v744;
  uint64_t v745;
  int v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  int v751;
  unint64_t v752;
  int v753;
  int v754;
  int v755;
  int v756;
  uint64_t v757;
  int v758;
  uint64_t v759;
  uint64_t v760;
  int v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  int v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t *v768;
  uint64_t *v769;
  uint64_t *v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v775;
  unint64_t v776;
  void *v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  int v785;
  void *v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  unint64_t v793;
  uint64_t v794;
  void *v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  unint64_t v802;
  uint64_t v803;
  const char *v804;
  int v805;
  int v806;
  int v807;
  uint64_t v808;
  int v809;
  uint64_t v810;
  int v811;
  int v812;
  int v813;
  int v814;
  int v815;
  WTF::AtomStringImpl *v816;
  uint64_t v817;
  int v818;
  uint64_t v819;
  int v820;
  int v821;
  int v822;
  uint64_t v823;
  uint64_t v824;
  char IsValid;
  int v826;
  BOOL v827;
  char v828;
  int v829;
  unsigned int v830;
  uint64_t v831;
  int v832;
  int v833;
  int v834;
  uint64_t v835;
  uint64_t v836;
  const char *v838;
  uint64_t v839;
  int v840;
  const char *v841;
  int v842;
  void *v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  unint64_t v850;
  const char *v851;
  uint64_t v852;
  int v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  int v859;
  int v860;
  int v861;
  int v862;
  WTF::AtomStringImpl *v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  unsigned int v870;
  WTF::StringImpl *v871;
  JSC::ParserArena *v872;
  int v873;
  const char *v874;
  const char *v875;
  JSC::ParserArena *v876;
  _BOOL4 v877;
  int v878;
  int v879;
  int *v880;
  int *v881;
  int *v882;
  unint64_t v883;
  void *v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  JSC::ParserArena *v891;
  int v892;
  uint64_t *v893;
  void *v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  unint64_t v901;
  int v902;
  int v903;
  int v904;
  uint64_t v905;
  int v906;
  uint64_t v907;
  int v908;
  uint64_t *v909;
  uint64_t *v910;
  uint64_t *v911;
  uint64_t v912;
  uint64_t v913;
  _DWORD *v914;
  unsigned int v915;
  WTF *v916;
  unsigned int v917;
  uint64_t v918;
  int v919;
  WTF *v920;
  WTF *v921;
  uint64_t v922;
  unsigned int *v923;
  _QWORD *v924;
  uint64_t v925;
  WTF *v926[2];
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  int v930;
  uint64_t v931;
  int v932;
  uint64_t v933;
  int v934;
  uint64_t v935;
  int v936;
  uint64_t v937;
  uint64_t v938;
  WTF *v939[2];
  __int128 *v940;
  uint64_t v941;
  __int128 v942;
  uint64_t *v943;
  char v944;
  BOOL v945;
  BOOL v946;
  uint64_t v947;
  int v948;
  __int128 v949;
  int v950;
  __int128 v951;
  __int128 v952;
  uint64_t v953;
  unint64_t v954;
  uint64_t v955;

  v9 = (unsigned __int8 *)(a1 + 7344);
  v10 = *(_DWORD *)(a1 + 7456);
  *(_DWORD *)(a1 + 7456) = v10 + 1;
  if ((unint64_t)&v909 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      SwitchStatement = 0;
      v9[8] = 1;
      goto LABEL_33;
    }
    goto LABEL_149;
  }
  SwitchStatement = 0;
  v14 = 0;
  v15 = *(unsigned __int8 *)(a1 + 7505);
  *(_BYTE *)(a1 + 7505) = 0;
  v16 = *(_DWORD *)(a1 + 7368);
  if (v16 <= 11)
  {
    if (v16 == 1)
      goto LABEL_33;
    if (!v16)
    {
      SwitchStatement = JSC::Parser<JSC::Lexer<char16_t>>::parseBlockStatement<JSC::ASTBuilder>(a1, a2, 0, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_33;
    }
LABEL_96:
    SwitchStatement = JSC::Parser<JSC::Lexer<char16_t>>::parseExpressionStatement<JSC::ASTBuilder>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*a3 && v14 != *(_DWORD *)(a1 + 7304))
      *a3 = 0;
LABEL_97:
    v18 = 1;
    goto LABEL_5;
  }
  v17 = (int *)(a1 + 7368);
  switch(v16)
  {
    case 515:
      v952 = *(_OWORD *)(a1 + 7400);
      v939[0] = *(WTF **)(a1 + 7416);
      v252 = *(_DWORD *)(a1 + 7400);
      v254 = (_QWORD *)(a1 + 7428);
      v253 = *(_QWORD *)(a1 + 7428);
      LODWORD(v939[1]) = *(_DWORD *)(a1 + 7424);
      *(_QWORD *)&v942 = v253;
      DWORD2(v942) = *(_DWORD *)(a1 + 7436);
      v255 = *(_DWORD *)(a1 + 7412);
      LODWORD(v253) = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v252;
      *(_DWORD *)(a1 + 7448) = v255;
      *(_DWORD *)(a1 + 7452) = v253;
      v256 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v256 + 4) = v252;
      v257 = *(_DWORD *)(a1 + 12);
      if (!v257)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4568);
      }
      v258 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v257 - 1) + 9) & 1;
      *(_BYTE *)(v256 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v256, a1 + 7368, 0, v258, a5, a6, a7, a8);
      v263 = *(_DWORD *)(a1 + 12);
      if (!v263)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4570);
      }
      v264 = *(_QWORD *)a1;
      v265 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v263 - 1) + 10);
      if ((v265 & 0x100000) != 0)
      {
        IsValid = JSC::Parser<JSC::Lexer<unsigned char>>::breakIsValid((uint64_t *)a1);
        v263 = *(_DWORD *)(a1 + 12);
        if (!v263)
        {
          __break(0xC471u);
          JUMPOUT(0x197EF4748);
        }
        v266 = IsValid;
        v264 = *(_QWORD *)a1;
        if (!*(_DWORD *)(*(_QWORD *)a1 + 720 * (v263 - 1) + 24))
        {
          v826 = *(_DWORD *)(v264 + 720 * (v263 - 1) + 28);
          v827 = v826 == 0;
          v828 = v826 ? 1 : IsValid;
          v266 = v827 ? 1 : IsValid;
          if ((v828 & 1) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "'break' cannot cross static block boundary");
            goto LABEL_942;
          }
        }
      }
      else
      {
        v266 = 0;
      }
      v267 = *v17;
      if (*v17 == 17)
      {
        v268 = *(_DWORD *)(a1 + 7400);
        v269 = *(_DWORD *)(a1 + 7412);
        v270 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v268;
        *(_DWORD *)(a1 + 7448) = v269;
        *(_DWORD *)(a1 + 7452) = v270;
        v271 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v271 + 4) = v268;
        v272 = *(_BYTE *)(v264 + 720 * (v263 - 1) + 9) & 1;
        *(_BYTE *)(v271 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v271, a1 + 7368, 0, v272, v259, v260, v261, v262);
        v263 = *(_DWORD *)(a1 + 12);
        if (!v263)
        {
LABEL_174:
          __break(0xC471u);
          JUMPOUT(0x197EF0E88);
        }
        v264 = *(_QWORD *)a1;
        goto LABEL_168;
      }
      if (v267 == 1 || v267 == 20 || *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
      {
LABEL_168:
        v273 = v263 - 1;
        v274 = v263 - 1;
        while (!*(_DWORD *)(v264 + 720 * v273 + 24) && !*(_DWORD *)(v264 + 720 * v273 + 28))
        {
          if (!v274 || (*(_BYTE *)(v264 + 720 * v273 + 12) & 0x60) != 0)
          {
            v302 = 0;
            goto LABEL_188;
          }
          v274 = v273 - 1;
          v273 = (v273 - 1);
          if (v263 <= v274)
            goto LABEL_174;
        }
        v302 = 1;
LABEL_188:
        if ((v265 & 0x100000) != 0)
          v302 = v266;
        if ((v302 & 1) != 0)
        {
          v303 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
          v304 = *(uint64_t **)(a2 + 8);
          SwitchStatement = *v304;
          if ((unint64_t)(v304[1] - *v304) <= 0x57)
          {
            JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v304);
            SwitchStatement = *v304;
          }
          *v304 = SwitchStatement + 88;
          *(_BYTE *)(SwitchStatement + 24) = 0;
          v305 = &off_1E358A480;
          goto LABEL_194;
        }
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "'break' is only valid inside a switch or loop statement");
        goto LABEL_942;
      }
      if (v267 != 12
        && !JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, v267, *(_QWORD **)(a1 + 7376))
        && !JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376)))
      {
        v812 = *v17;
        if (*v17 != 546)
        {
          if (v812 != 1048592)
          {
            if (v812 == 20 || (v812 & 0x100000) != 0)
              goto LABEL_941;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected an identifier as the target for a break statement");
            goto LABEL_942;
          }
          if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
            goto LABEL_941;
        }
      }
      v661 = *(WTF ***)(a1 + 7376);
      if (!JSC::Parser<JSC::Lexer<char16_t>>::getLabel((uint64_t *)a1, v661))
        goto LABEL_887;
      *(_QWORD *)&v942 = *v254;
      DWORD2(v942) = *(_DWORD *)(a1 + 7436);
      v666 = *(_DWORD *)(a1 + 7400);
      v667 = *(_DWORD *)(a1 + 7412);
      v668 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v666;
      *(_DWORD *)(a1 + 7448) = v667;
      *(_DWORD *)(a1 + 7452) = v668;
      v669 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v669 + 4) = v666;
      v670 = *(_DWORD *)(a1 + 12);
      if (!v670)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4728);
      }
      v671 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v670 - 1) + 9) & 1;
      *(_BYTE *)(v669 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v669, a1 + 7368, 0, v671, v662, v663, v664, v665);
      if (JSC::Parser<JSC::Lexer<char16_t>>::autoSemiColon(a1, v672, v673, v674, v675, v676, v677, v678))
      {
        JSC::ASTBuilder::createBreakStatement(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v952, (uint64_t)v661, (uint64_t)v939, (uint64_t *)&v942);
        goto LABEL_408;
      }
      if (*v17 != 20 && (*v17 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected a ';' following a targeted break statement");
        goto LABEL_942;
      }
LABEL_941:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      goto LABEL_942;
    case 516:
    case 517:
      goto LABEL_33;
    case 518:
      v103 = (__int128 *)(a1 + 7400);
      v951 = *(_OWORD *)(a1 + 7400);
      v104 = *(_DWORD *)(a1 + 7400);
      v105 = *(_DWORD *)(a1 + 7412);
      v106 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v104;
      *(_DWORD *)(a1 + 7448) = v105;
      *(_DWORD *)(a1 + 7452) = v106;
      v107 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v107 + 4) = v104;
      v108 = *(_DWORD *)(a1 + 12);
      if (!v108)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF44C4);
      }
      v109 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v108 - 1) + 9) & 1;
      *(_BYTE *)(v107 + 56) = 0;
      v110 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v107, a1 + 7368, 0, v109, a5, a6, a7, a8);
      v115 = v110;
      *(_DWORD *)(a1 + 7368) = v110;
      v116 = *(_DWORD *)(a1 + 7456);
      *(_DWORD *)(a1 + 7456) = v116 + 1;
      if (v110 != 546)
        goto LABEL_49;
      v829 = *(_DWORD *)(a1 + 12);
      if (!v829)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4750);
      }
      v830 = v829 - 1;
      v831 = *(_QWORD *)a1;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v830 + 11) & 0x20) == 0 && ((1 << v9[130]) & 0x6000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "for-await-of can only be used in an async function or async generator");
        goto LABEL_416;
      }
      v832 = *(_DWORD *)(a1 + 7400);
      v833 = *(_DWORD *)(a1 + 7412);
      v834 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v832;
      *(_DWORD *)(a1 + 7448) = v833;
      *(_DWORD *)(a1 + 7452) = v834;
      v835 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v835 + 4) = v832;
      v836 = *(_BYTE *)(v831 + 720 * v830 + 9) & 1;
      *(_BYTE *)(v835 + 56) = 0;
      v110 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v835, a1 + 7368, 0, v836, v111, v112, v113, v114);
      *(_DWORD *)(a1 + 7368) = v110;
LABEL_49:
      if (v110 != 2)
      {
        if (v110 != 20 && (v110 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[16]>(a1);
        }
        else
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        }
LABEL_416:
        SwitchStatement = 0;
        goto LABEL_94;
      }
      LODWORD(v923) = v104;
      v117 = *(_DWORD *)(a1 + 7400);
      v118 = *(_DWORD *)(a1 + 7412);
      v119 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v117;
      *(_DWORD *)(a1 + 7448) = v118;
      *(_DWORD *)(a1 + 7452) = v119;
      v120 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v120 + 4) = v117;
      v121 = *(_DWORD *)(a1 + 12);
      if (!v121)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF44CCLL);
      }
      v921 = (WTF *)(a1 + 7444);
      v122 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v121 - 1) + 9) & 1;
      *(_BYTE *)(v120 + 56) = 0;
      v925 = a1 + 7368;
      v123 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v120, a1 + 7368, 0, v122, v111, v112, v113, v114);
      v129 = v123;
      *(_DWORD *)(a1 + 7368) = v123;
      v130 = *(_DWORD *)(a1 + 7300);
      v950 = 0;
      v949 = *v103;
      v922 = a1 + 7416;
      v947 = *(_QWORD *)(a1 + 7416);
      v948 = *(_DWORD *)(a1 + 7424);
      v946 = v123 == 544;
      v945 = v123 == 521;
      v944 = 0;
      *(_QWORD *)&v942 = 0;
      DWORD2(v942) = -1;
      v943 = 0;
      v939[0] = (WTF *)&v946;
      v939[1] = (WTF *)&v945;
      v940 = &v942;
      v941 = a1;
      LODWORD(v924) = v116;
      if ((v123 == 521) != ((v123 == 544) ^ (v123 == 520)))
      {
        v131 = (int *)v925;
        if ((v123 == 521) != (v123 == 544))
        {
          v250 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
          if (*(_DWORD *)(v250 + 12) <= v251)
          {
            __break(0xC471u);
            JUMPOUT(0x197EF4550);
          }
          *(_DWORD *)(*(_QWORD *)v250 + 720 * v251 + 10) |= 0x8080u;
          if (*(_DWORD *)(v250 + 12) <= v251)
          {
            __break(0xC471u);
            JUMPOUT(0x197EF4558);
          }
          *(_DWORD *)(*(_QWORD *)v250 + 720 * v251 + 10) &= ~0x40u;
          if (*(_DWORD *)(v250 + 12) <= v251)
          {
            __break(0xC471u);
            JUMPOUT(0x197EF4560);
          }
          if ((*(_BYTE *)(*(_QWORD *)v250 + 720 * v251 + 11) & 0x80) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x197EF34ACLL);
          }
          *(_QWORD *)&v942 = v250;
          DWORD2(v942) = v251;
          v943 = (uint64_t *)a1;
        }
        v132 = 0;
        v937 = 0;
        v938 = 0;
        v9[96] = 0;
        v935 = -1;
        v936 = -1;
        v933 = -1;
        v934 = -1;
        if (v129 != 520)
        {
          if (v946)
          {
            v132 = 1;
          }
          else
          {
            if (!v945)
            {
              __break(0xC471u);
              JUMPOUT(0x197EF37F4);
            }
            v132 = 2;
          }
        }
        v133 = *(_DWORD *)(a1 + 12);
        if (!v133)
        {
          __break(0xC471u);
          JUMPOUT(0x197EF44D4);
        }
        v134 = *(_QWORD *)(*(_QWORD *)a1 + 720 * (v133 - 1) + 696);
        if (v134)
          v135 = *(_DWORD *)(v134 - 12);
        else
          v135 = 0;
        v136 = JSC::Parser<JSC::Lexer<char16_t>>::parseVariableDeclarationList<JSC::ASTBuilder>(a1, a2, &v950, &v938, &v937, (uint64_t)&v947, (uint64_t)&v935, (uint64_t)&v933, 0, v132, 1u, &v944);
        v137 = *(_DWORD *)(a1 + 12);
        if (!v137)
        {
          __break(0xC471u);
          JUMPOUT(0x197EF44DCLL);
        }
        v138 = v136;
        v139 = v137 - 1;
        v140 = *(_QWORD *)a1;
        v141 = *(_QWORD *)(*(_QWORD *)a1 + 720 * v139 + 696);
        if (v141)
          LODWORD(v141) = *(_DWORD *)(v141 - 12);
        v142 = v141 > v135;
        v9[96] = 1;
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_846;
        v143 = *v131;
        if (v143 == 17)
        {
LABEL_62:
          v144 = (int *)v925;
          if (v115 != 546)
          {
            LODWORD(v922) = v142;
            if (v138)
            {
              *(_BYTE *)(v138 + 24) = 1;
              v145 = *(_QWORD *)(v138 + 8);
              v146 = *(_DWORD *)(v138 + 16);
              *(_QWORD *)&v952 = v145;
              DWORD2(v952) = v146;
              v147 = *(_QWORD *)(a1 + 7520);
              if (v147)
              {
                if ((v145 & 0x80000000) == 0)
                  JSC::DebuggerPausePositions::appendPause(v147, (uint64_t)&v952);
              }
            }
LABEL_65:
            v148 = *(_DWORD *)(a1 + 7400);
            v149 = *(_DWORD *)(a1 + 7412);
            v150 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v148;
            *(_DWORD *)(a1 + 7448) = v149;
            *(_DWORD *)(a1 + 7452) = v150;
            v151 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v151 + 4) = v148;
            v152 = *(_DWORD *)(a1 + 12);
            if (!v152)
            {
              __break(0xC471u);
              JUMPOUT(0x197EF44F4);
            }
            v153 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v152 - 1) + 9) & 1;
            *(_BYTE *)(v151 + 56) = 0;
            v154 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v151, (uint64_t)v144, 0, v153, v125, v126, v127, v128);
            *(_DWORD *)(a1 + 7368) = v154;
            if (v944 && v945)
            {
              if (v154 != 20 && (v154 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "const variables in for loops must have initializers");
                goto LABEL_846;
              }
              goto LABEL_845;
            }
            if (v154 == 17)
            {
              v156 = 0;
            }
            else
            {
              v155 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
              if (!v155)
              {
                if (*v144 == 20 || (*v144 & 0x100000) != 0)
                  goto LABEL_845;
                if (!*(_QWORD *)(a1 + 7360))
                {
                  v838 = "Cannot parse for loop condition expression";
LABEL_707:
                  v839 = a1;
                  v840 = 1;
LABEL_708:
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(v839, v840, v838);
                }
LABEL_846:
                SwitchStatement = 0;
                goto LABEL_92;
              }
              v156 = v155;
              *(_BYTE *)(v155 + 24) = 1;
              v157 = *(_QWORD *)(v155 + 8);
              v158 = *(_DWORD *)(v155 + 16);
              *(_QWORD *)&v952 = v157;
              DWORD2(v952) = v158;
              v159 = *(_QWORD *)(a1 + 7520);
              if (v159 && (v157 & 0x80000000) == 0)
                JSC::DebuggerPausePositions::appendPause(v159, (uint64_t)&v952);
              v160 = *v144;
              if (*v144 != 17)
              {
                if (v160 == 20 || (v160 & 0x100000) != 0)
                  goto LABEL_845;
                v116 = (int)v924;
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' after the for loop condition expression");
                goto LABEL_389;
              }
            }
            v161 = *(_DWORD *)(a1 + 7400);
            v162 = *(_DWORD *)(a1 + 7412);
            v163 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v161;
            *(_DWORD *)(a1 + 7448) = v162;
            *(_DWORD *)(a1 + 7452) = v163;
            v164 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v164 + 4) = v161;
            v165 = *(_DWORD *)(a1 + 12);
            if (!v165)
            {
              __break(0xC471u);
              JUMPOUT(0x197EF44FCLL);
            }
            v166 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v165 - 1) + 9) & 1;
            *(_BYTE *)(v164 + 56) = 0;
            v167 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v164, (uint64_t)v144, 0, v166, v125, v126, v127, v128);
            *(_DWORD *)(a1 + 7368) = v167;
            if (v167 == 3)
            {
              v169 = 0;
LABEL_76:
              v174 = *(_DWORD *)(a1 + 7400);
              v175 = *(_DWORD *)(a1 + 7412);
              v176 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v174;
              *(_DWORD *)(a1 + 7448) = v175;
              *(_DWORD *)(a1 + 7452) = v176;
              v177 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v177 + 4) = v174;
              v178 = *(_DWORD *)(a1 + 12);
              if (!v178)
              {
                __break(0xC471u);
                JUMPOUT(0x197EF4504);
              }
              v179 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v178 - 1) + 9) & 1;
              *(_BYTE *)(v177 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v177, v925, 0, v179, v125, v126, v127, v128);
              v935 = 0;
              v180 = *(_DWORD *)(a1 + 12);
              if (!v180)
              {
                __break(0xC471u);
                JUMPOUT(0x197EF450CLL);
              }
              v181 = *(_QWORD *)a1 + 720 * (v180 - 1);
              ++*(_DWORD *)(v181 + 24);
              v182 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v935, 0);
              v185 = *(_DWORD *)(a1 + 12);
              if (!v185)
              {
                __break(0xC471u);
                JUMPOUT(0x197EF4514);
              }
              v186 = v182;
              v187 = *(_QWORD *)a1 + 720 * (v185 - 1);
              --*(_DWORD *)(v187 + 24);
              if (v182)
              {
                if (v946 || v945)
                {
                  if (!v943)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EF3D00);
                  }
                  v943 = 0;
                  JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v952, (uint64_t *)a1, 1, v124, v125, v126, v127, v128);
                  JSC::VariableEnvironment::VariableEnvironment((JSC::VariableEnvironment *)v926, (const JSC::VariableEnvironment *)&v952);
                  v348 = v954;
                  if (v954)
                  {
                    v954 = 0;
                    LODWORD(v955) = 0;
                    WTF::fastFree(v348, v341, v342, v343, v344, v345, v346, v347);
                  }
                  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v952, (WTF::AtomStringImpl *)v341, v342, v343, v344, v345, v346, v347);
                }
                else
                {
                  v926[0] = 0;
                  LOBYTE(v926[1]) = 0;
                  v927 = 0;
                }
                v188 = *(_QWORD *)(a2 + 8);
                SwitchStatement = *(_QWORD *)v188;
                if (*(_QWORD *)(v188 + 8) - *(_QWORD *)v188 <= 0x7FuLL)
                {
                  JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v188);
                  SwitchStatement = *(_QWORD *)v188;
                }
                *(_QWORD *)v188 = SwitchStatement + 128;
                if (SwitchStatement)
                  v189 = SwitchStatement + 40;
                else
                  v189 = 0;
                *(_QWORD *)&v952 = v189;
                v190 = (_QWORD *)(v188 + 40);
                v191 = *(unsigned int *)(v188 + 52);
                if ((_DWORD)v191 == *(_DWORD *)(v188 + 48))
                {
                  v399 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v190, v191 + 1, (unint64_t)&v952);
                  v191 = *(unsigned int *)(v188 + 52);
                  *(_QWORD *)(*(_QWORD *)(v188 + 40) + 8 * v191) = *v399;
                }
                else
                {
                  *(_QWORD *)(*v190 + 8 * v191) = v189;
                }
                *(_DWORD *)(v188 + 52) = v191 + 1;
                *(_DWORD *)(SwitchStatement + 20) = -1;
                *(_BYTE *)(SwitchStatement + 24) = 0;
                v192 = v926[0];
                *(_BYTE *)(SwitchStatement + 56) = v926[1];
                v193 = v927;
                v926[0] = 0;
                v927 = 0;
                *(_QWORD *)(SwitchStatement + 64) = v193;
                *(_QWORD *)(SwitchStatement + 72) = 0;
                *(_QWORD *)SwitchStatement = &off_1E358A320;
                *(_QWORD *)(SwitchStatement + 32) = 0;
                *(_QWORD *)(SwitchStatement + 40) = &unk_1E358A3C0;
                *(_QWORD *)(SwitchStatement + 48) = v192;
                *(_QWORD *)(SwitchStatement + 80) = 0;
                *(_QWORD *)(SwitchStatement + 88) = v138;
                *(_QWORD *)(SwitchStatement + 96) = v156;
                *(_QWORD *)(SwitchStatement + 104) = v169;
                *(_QWORD *)(SwitchStatement + 112) = v186;
                *(_BYTE *)(SwitchStatement + 120) = v922;
                *(_DWORD *)(SwitchStatement + 28) = v174;
                *(_DWORD *)(SwitchStatement + 8) = (_DWORD)v923;
                *(int32x2_t *)(SwitchStatement + 12) = vrev64_s32(*(int32x2_t *)((char *)&v951 + 4));
                goto LABEL_90;
              }
              if (*(_DWORD *)v925 != 20 && (*(_DWORD *)v925 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of a for loop");
                goto LABEL_846;
              }
LABEL_845:
              JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
              goto LABEL_846;
            }
            v168 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
            if (v168)
            {
              v169 = v168;
              *(_BYTE *)(v168 + 24) = 1;
              v170 = *(_QWORD *)(v168 + 8);
              v171 = *(_DWORD *)(v168 + 16);
              *(_QWORD *)&v952 = v170;
              DWORD2(v952) = v171;
              v172 = *(_QWORD *)(a1 + 7520);
              if (v172 && (v170 & 0x80000000) == 0)
                JSC::DebuggerPausePositions::appendPause(v172, (uint64_t)&v952);
              v173 = *(_DWORD *)v925;
              if (*(_DWORD *)v925 == 3)
                goto LABEL_76;
              if (v173 == 20 || (v173 & 0x100000) != 0)
                goto LABEL_845;
              v116 = (int)v924;
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[16]>(a1);
LABEL_389:
              SwitchStatement = 0;
              goto LABEL_93;
            }
            if (*(_DWORD *)v925 == 20 || (*(_DWORD *)v925 & 0x100000) != 0)
              goto LABEL_845;
            if (!*(_QWORD *)(a1 + 7360))
            {
              v838 = "Cannot parse for loop iteration expression";
              goto LABEL_707;
            }
            goto LABEL_846;
          }
          goto LABEL_689;
        }
        if (v950 != 1)
        {
          if (v143 == 20 || (v143 & 0x100000) != 0)
            goto LABEL_845;
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "can only declare a single variable in an enumeration");
          goto LABEL_846;
        }
        v931 = *(_QWORD *)v922;
        v932 = *(_DWORD *)(v922 + 8);
        if (v143 == 131589)
        {
          if (v115 != 546)
          {
            v309 = *(_DWORD *)(a1 + 7400);
            v310 = *(_DWORD *)(a1 + 7412);
            v311 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v309;
            *(_DWORD *)(a1 + 7448) = v310;
            *(_DWORD *)(a1 + 7452) = v311;
            v312 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v312 + 4) = v309;
            v313 = *(_BYTE *)(v140 + 720 * v139 + 9) & 1;
            *(_BYTE *)(v312 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v312, v925, 0, v313, v125, v126, v127, v128);
            v922 = v937;
            if (v937)
            {
              v873 = *(_DWORD *)(a1 + 12);
              if (!v873)
              {
                __break(0xC471u);
                JUMPOUT(0x197EF4760);
              }
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v873 - 1) + 9) & 1) != 0
                || v946
                || v945
                || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v938 + 40))(v938) & 1) == 0)
              {
                if (*(_QWORD *)(a1 + 7360))
                  goto LABEL_846;
                v874 = "Cannot assign to the loop variable inside a for-in loop header";
LABEL_837:
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(a1, v874);
                goto LABEL_846;
              }
            }
            v314 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
LABEL_200:
            if (!v314)
            {
              if (*(_DWORD *)v925 != 20 && (*(_DWORD *)v925 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected expression to enumerate");
                goto LABEL_846;
              }
              goto LABEL_845;
            }
            *(_BYTE *)(v314 + 24) = 1;
            v315 = *(_QWORD *)(v314 + 8);
            v316 = *(_DWORD *)(v314 + 16);
            *(_QWORD *)&v952 = v315;
            DWORD2(v952) = v316;
            v317 = *(_QWORD *)(a1 + 7520);
            if (v317 && (v315 & 0x80000000) == 0)
              JSC::DebuggerPausePositions::appendPause(v317, (uint64_t)&v952);
            v929 = *(_QWORD *)v921;
            v930 = *((_DWORD *)v921 + 2);
            v318 = *(_DWORD *)v925;
            if (*(_DWORD *)v925 != 3)
            {
              if (v318 == 20 || (v318 & 0x100000) != 0)
                goto LABEL_845;
              v116 = (int)v924;
              if (!*(_QWORD *)(a1 + 7360))
              {
                if (v143 == 131589)
                  v739 = "for-in header";
                else
                  v739 = "for-of header";
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[14]>(a1, v739);
              }
              goto LABEL_389;
            }
            v319 = *(_DWORD *)v103;
            v320 = *(_DWORD *)(a1 + 7412);
            v321 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v319;
            *(_DWORD *)(a1 + 7448) = v320;
            *(_DWORD *)(a1 + 7452) = v321;
            v322 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v322 + 4) = v319;
            v323 = *(_DWORD *)(a1 + 12);
            if (!v323)
            {
              __break(0xC471u);
              JUMPOUT(0x197EF45E0);
            }
            v324 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v323 - 1) + 9) & 1;
            *(_BYTE *)(v322 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v322, v925, 0, v324, v125, v126, v127, v128);
            v928 = 0;
            v325 = *(_DWORD *)(a1 + 12);
            if (!v325)
            {
              __break(0xC471u);
              JUMPOUT(0x197EF45E8);
            }
            v326 = *(_QWORD *)a1 + 720 * (v325 - 1);
            ++*(_DWORD *)(v326 + 24);
            v327 = (int *)JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v928, 0);
            v328 = *(_DWORD *)(a1 + 12);
            if (!v328)
            {
              __break(0xC471u);
              JUMPOUT(0x197EF45F0);
            }
            v329 = v327;
            v330 = *(_QWORD *)a1 + 720 * (v328 - 1);
            --*(_DWORD *)(v330 + 24);
            if (!v327)
            {
              if (*(_DWORD *)v925 != 20 && (*(_DWORD *)v925 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                {
                  if (v143 == 131589)
                    v875 = "in";
                  else
                    v875 = "of";
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[35],char const(&)[3],char const(&)[11]>(a1, v875);
                }
                goto LABEL_846;
              }
              goto LABEL_845;
            }
            if (v946 || v945)
            {
              v925 = (uint64_t)v327;
              if (!v943)
              {
                __break(0xC471u);
                JUMPOUT(0x197EF41C8);
              }
              v943 = 0;
              JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v952, (uint64_t *)a1, 1, v124, v125, v126, v127, v128);
              JSC::VariableEnvironment::VariableEnvironment((JSC::VariableEnvironment *)v926, (const JSC::VariableEnvironment *)&v952);
              v697 = v954;
              if (v954)
              {
                v954 = 0;
                LODWORD(v955) = 0;
                WTF::fastFree(v697, v690, v691, v692, v693, v694, v695, v696);
              }
              JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v952, (WTF::AtomStringImpl *)v690, v691, v692, v693, v694, v695, v696);
              v329 = (int *)v925;
            }
            else
            {
              v926[0] = 0;
              LOBYTE(v926[1]) = 0;
              v927 = 0;
            }
            if (v143 == 131589)
            {
              if (v129 != 520 || !v922)
              {
                v331 = v938;
                v332 = *(uint64_t **)(a2 + 8);
                v333 = *v332;
                if ((unint64_t)(v332[1] - *v332) <= 0x2F)
                {
                  v880 = v329;
                  JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
                  v329 = v880;
                  v333 = *v332;
                }
                *v332 = v333 + 48;
                *(_DWORD *)(v333 + 8) = v949;
                *(int32x2_t *)(v333 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v949 + 4));
                *(_DWORD *)(v333 + 20) = -1;
                *(_BYTE *)(v333 + 24) = 0;
                *(_BYTE *)(v333 + 25) = 126;
                *(_BYTE *)(v333 + 26) = 0;
                *(_QWORD *)v333 = &off_1E358B880;
                *(_QWORD *)(v333 + 32) = v331;
                *(_QWORD *)(v333 + 40) = 0;
                v334 = *(_QWORD *)(a2 + 8);
                SwitchStatement = *(_QWORD *)v334;
                if (*(_QWORD *)(v334 + 8) - *(_QWORD *)v334 <= 0x97uLL)
                {
                  v881 = v329;
                  JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v334);
                  v329 = v881;
                  SwitchStatement = *(_QWORD *)v334;
                }
                *(_QWORD *)v334 = SwitchStatement + 152;
                if (SwitchStatement)
                  v335 = SwitchStatement + 80;
                else
                  v335 = 0;
                *(_QWORD *)&v952 = v335;
                v336 = (_QWORD *)(v334 + 40);
                v337 = *(unsigned int *)(v334 + 52);
                if ((_DWORD)v337 == *(_DWORD *)(v334 + 48))
                {
                  v737 = v329;
                  v738 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v336, v337 + 1, (unint64_t)&v952);
                  v329 = v737;
                  v337 = *(unsigned int *)(v334 + 52);
                  *(_QWORD *)(*(_QWORD *)(v334 + 40) + 8 * v337) = *v738;
                }
                else
                {
                  *(_QWORD *)(*v336 + 8 * v337) = v335;
                }
                *(_DWORD *)(v334 + 52) = v337 + 1;
                *(_DWORD *)(SwitchStatement + 20) = -1;
                *(_BYTE *)(SwitchStatement + 24) = 0;
                v338 = v926[0];
                *(_BYTE *)(SwitchStatement + 96) = v926[1];
                v339 = v927;
                v926[0] = 0;
                v927 = 0;
                *(_QWORD *)(SwitchStatement + 104) = v339;
                *(_QWORD *)(SwitchStatement + 112) = 0;
                *(_QWORD *)(SwitchStatement + 120) = 0;
                *(_QWORD *)(SwitchStatement + 128) = v333;
                *(_QWORD *)(SwitchStatement + 136) = v314;
                *(_QWORD *)(SwitchStatement + 144) = v329;
                *(_QWORD *)SwitchStatement = &off_1E358B4E0;
                *(_QWORD *)(SwitchStatement + 80) = &unk_1E358B580;
                *(_QWORD *)(SwitchStatement + 88) = v338;
                *(_DWORD *)(SwitchStatement + 28) = v319;
                *(_DWORD *)(SwitchStatement + 8) = (_DWORD)v923;
                *(int32x2_t *)(SwitchStatement + 12) = vrev64_s32(*(int32x2_t *)((char *)&v951 + 4));
                v340 = v931;
                *(_QWORD *)(SwitchStatement + 32) = 0;
                *(_QWORD *)(SwitchStatement + 40) = v340;
                *(_DWORD *)(SwitchStatement + 48) = v932;
                *(_QWORD *)(SwitchStatement + 52) = v947;
                *(_DWORD *)(SwitchStatement + 60) = v948;
                *(_QWORD *)(SwitchStatement + 64) = v929;
                *(_DWORD *)(SwitchStatement + 72) = v930;
                goto LABEL_90;
              }
              v768 = *(uint64_t **)(a2 + 8);
              v910 = (uint64_t *)v926;
              v909 = (uint64_t *)__PAIR64__(v319, v923);
              v769 = &v931;
              v770 = &v929;
              v771 = v138;
              v772 = v314;
              v773 = (uint64_t)v329;
              goto LABEL_501;
            }
            v680 = v938;
            v681 = *(uint64_t **)(a2 + 8);
            v682 = *v681;
            if ((unint64_t)(v681[1] - *v681) <= 0x2F)
            {
              v882 = v329;
              JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
              v329 = v882;
              v682 = *v681;
            }
            v683 = v115 == 546;
            *v681 = v682 + 48;
            *(_DWORD *)(v682 + 8) = v949;
            *(int32x2_t *)(v682 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v949 + 4));
            *(_DWORD *)(v682 + 20) = -1;
            *(_BYTE *)(v682 + 24) = 0;
            *(_BYTE *)(v682 + 25) = 126;
            *(_BYTE *)(v682 + 26) = 0;
            *(_QWORD *)v682 = &off_1E358B880;
            *(_QWORD *)(v682 + 32) = v680;
            *(_QWORD *)(v682 + 40) = 0;
            v911 = (uint64_t *)v926;
            v910 = (uint64_t *)__PAIR64__(v319, v923);
            v909 = &v929;
            v684 = &v931;
            v685 = a2;
            v686 = v314;
            v687 = (uint64_t)v329;
            goto LABEL_412;
          }
LABEL_732:
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected 'of' in for-await syntax");
          goto LABEL_846;
        }
        if (v143 == 12
          && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 2056)
          && !v9[40])
        {
          v820 = *(_DWORD *)(a1 + 7400);
          v821 = *(_DWORD *)(a1 + 7412);
          v822 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v820;
          *(_DWORD *)(a1 + 7448) = v821;
          *(_DWORD *)(a1 + 7452) = v822;
          v823 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v823 + 4) = v820;
          v824 = *(_BYTE *)(v140 + 720 * v139 + 9) & 1;
          *(_BYTE *)(v823 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v823, v925, 0, v824, v125, v126, v127, v128);
          if (v937)
          {
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_846;
            v874 = "Cannot assign to the loop variable inside a for-of loop header";
            goto LABEL_837;
          }
          LODWORD(v952) = 0;
          *((_QWORD *)&v952 + 1) = *(_QWORD *)(a1 + 7496);
          v953 = a1;
          *(_QWORD *)(a1 + 7496) = &v952;
          v314 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, &v952);
          v922 = 0;
          *(_QWORD *)(v953 + 7496) = *((_QWORD *)&v952 + 1);
          goto LABEL_200;
        }
        if (v143 == 20 || (v143 & 0x100000) != 0)
          goto LABEL_845;
LABEL_251:
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected either 'in' or 'of' in enumeration syntax");
        goto LABEL_846;
      }
      if (v123 == 17)
      {
        v144 = (int *)v925;
        if (v115 != 546)
        {
          LODWORD(v922) = 0;
          v138 = 0;
          goto LABEL_65;
        }
LABEL_689:
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Unexpected a ';' in for-await-of header");
        goto LABEL_846;
      }
      if (!v123 || v123 == 4)
      {
        *(_OWORD *)v926 = *(_OWORD *)(a1 + 7296);
        v814 = *(_DWORD *)(a1 + 7316);
        v953 = *(_QWORD *)(a1 + 7336);
        v952 = *(_OWORD *)(a1 + 7320);
        v919 = *v9;
        LODWORD(v920) = v814;
        v815 = v9[1];
        v917 = *(_DWORD *)(a2 + 1052);
        LODWORD(v918) = v815;
        v816 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
        LODWORD(v913) = *(_DWORD *)(a1 + 7404);
        v817 = *(_QWORD *)(a1 + 7288);
        v818 = *(_DWORD *)(v817 + 4);
        v915 = *(_DWORD *)v817;
        LODWORD(v916) = v818;
        LODWORD(v914) = *(unsigned __int8 *)(v817 + 56);
        v819 = JSC::Parser<JSC::Lexer<char16_t>>::tryParseDestructuringPatternExpression<JSC::ASTBuilder>(a1, a2);
        if (v819)
        {
          v404 = *(_DWORD *)v925;
          if (*(_DWORD *)v925 == 131589
            || v404 == 12
            && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 2056)
            && !v9[40])
          {
            v138 = 0;
            v740 = v819;
            goto LABEL_483;
          }
        }
        JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), v816, v913, v124, v125, v126, v127, v128);
        v858 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)v858 = v915;
        *(_BYTE *)(v858 + 56) = (_BYTE)v914;
        v859 = *(_DWORD *)(a1 + 7400);
        v860 = *(_DWORD *)(a1 + 7412);
        v861 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v859;
        *(_DWORD *)(a1 + 7448) = v860;
        *(_DWORD *)(a1 + 7452) = v861;
        *(_DWORD *)(v858 + 4) = v859;
        v862 = *(_DWORD *)(a1 + 12);
        if (!v862)
        {
          __break(0xC471u);
          JUMPOUT(0x197EF4740);
        }
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v858, v925, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v862 - 1) + 9) & 1, v854, v855, v856, v857);
        *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = (_DWORD)v916;
        *(_OWORD *)(a1 + 7296) = *(_OWORD *)v926;
        v870 = v917;
        *(_DWORD *)(a1 + 7312) = v917;
        *(_DWORD *)(a1 + 7316) = (_DWORD)v920;
        *(_OWORD *)(a1 + 7320) = v952;
        *(_QWORD *)(a1 + 7336) = v953;
        *v9 = v919;
        v9[1] = v918;
        *(_DWORD *)(a2 + 1052) = v870;
        v871 = *(WTF::StringImpl **)(a1 + 7360);
        *(_QWORD *)(a1 + 7360) = 0;
        if (v871)
        {
          if (*(_DWORD *)v871 == 2)
          {
            WTF::StringImpl::~StringImpl(v871, v863, v864, v865, v866, v867, v868, v869);
            WTF::fastFree(v883, v884, v885, v886, v887, v888, v889, v890);
          }
          else
          {
            *(_DWORD *)v871 -= 2;
          }
        }
      }
      v9[96] = 0;
      v400 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
      v9[96] = 1;
      if (!v400)
      {
        if (*(_DWORD *)v925 != 20 && (*(_DWORD *)v925 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse for loop declarations");
          goto LABEL_846;
        }
        goto LABEL_845;
      }
      v138 = v400;
      *(_BYTE *)(v400 + 24) = 1;
      v401 = *(_QWORD *)(v400 + 8);
      v402 = *(_DWORD *)(v400 + 16);
      *(_QWORD *)&v952 = v401;
      DWORD2(v952) = v402;
      v403 = *(_QWORD *)(a1 + 7520);
      if (v403 && (v401 & 0x80000000) == 0)
        JSC::DebuggerPausePositions::appendPause(v403, (uint64_t)&v952);
      v404 = *(_DWORD *)v925;
      if (*(_DWORD *)v925 == 17)
      {
        v142 = 0;
        goto LABEL_62;
      }
      v740 = 0;
LABEL_483:
      if (v130 != *(_DWORD *)(a1 + 7300))
      {
        if (v404 != 20 && (v404 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[71]>(a1);
          goto LABEL_846;
        }
        goto LABEL_845;
      }
      v935 = *(_QWORD *)v922;
      v936 = *(_DWORD *)(v922 + 8);
      v741 = (int *)v925;
      if (v404 == 131589)
      {
        if (v115 == 546)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_846;
          goto LABEL_732;
        }
        v742 = *(_DWORD *)(a1 + 7400);
        v743 = *(_DWORD *)(a1 + 7412);
        v744 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v742;
        *(_DWORD *)(a1 + 7448) = v743;
        *(_DWORD *)(a1 + 7452) = v744;
        v745 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v745 + 4) = v742;
        v746 = *(_DWORD *)(a1 + 12);
        if (!v746)
        {
          __break(0xC471u);
          JUMPOUT(0x197EF4708);
        }
        v747 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v746 - 1) + 9) & 1;
        *(_BYTE *)(v745 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v745, (uint64_t)v741, 0, v747, v125, v126, v127, v128);
        v748 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
      }
      else
      {
        if (v404 != 12
          || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 2056)
          || v9[40])
        {
          if (v404 == 20 || (v404 & 0x100000) != 0)
            goto LABEL_845;
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_846;
          goto LABEL_251;
        }
        v902 = *(_DWORD *)(a1 + 7400);
        v903 = *(_DWORD *)(a1 + 7412);
        v904 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v902;
        *(_DWORD *)(a1 + 7448) = v903;
        *(_DWORD *)(a1 + 7452) = v904;
        v905 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v905 + 4) = v902;
        v906 = *(_DWORD *)(a1 + 12);
        if (!v906)
        {
          __break(0xC471u);
          JUMPOUT(0x197EF4778);
        }
        v907 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v906 - 1) + 9) & 1;
        *(_BYTE *)(v905 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v905, v925, 0, v907, v125, v126, v127, v128);
        v748 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
      }
      v749 = v748;
      if (!v748)
      {
        if (*(_DWORD *)v925 != 20 && (*(_DWORD *)v925 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            if (v404 == 131589)
              v841 = "in";
            else
              v841 = "of";
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[26],char const(&)[3],char const(&)[11]>(a1, v841);
          }
          goto LABEL_846;
        }
        goto LABEL_845;
      }
      *(_BYTE *)(v748 + 24) = 1;
      v750 = *(_QWORD *)(v748 + 8);
      v751 = *(_DWORD *)(v748 + 16);
      *(_QWORD *)&v952 = v750;
      DWORD2(v952) = v751;
      v752 = *(_QWORD *)(a1 + 7520);
      if (v752 && (v750 & 0x80000000) == 0)
        JSC::DebuggerPausePositions::appendPause(v752, (uint64_t)&v952);
      v933 = *(_QWORD *)v921;
      v934 = *((_DWORD *)v921 + 2);
      v753 = *(_DWORD *)v925;
      if (*(_DWORD *)v925 != 3)
      {
        if (v753 != 20 && (v753 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            if (v404 == 131589)
              v804 = "for-in header";
            else
              v804 = "for-of header";
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[14]>(a1, v804);
          }
          goto LABEL_846;
        }
        goto LABEL_845;
      }
      v754 = *(_DWORD *)v103;
      v755 = *(_DWORD *)(a1 + 7412);
      v756 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v754;
      *(_DWORD *)(a1 + 7448) = v755;
      *(_DWORD *)(a1 + 7452) = v756;
      v757 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v757 + 4) = v754;
      v758 = *(_DWORD *)(a1 + 12);
      if (!v758)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4710);
      }
      v759 = v740;
      v760 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v758 - 1) + 9) & 1;
      *(_BYTE *)(v757 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v757, v925, 0, v760, v125, v126, v127, v128);
      v931 = 0;
      v761 = *(_DWORD *)(a1 + 12);
      if (!v761)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4718);
      }
      v762 = *(_QWORD *)a1 + 720 * (v761 - 1);
      ++*(_DWORD *)(v762 + 24);
      v763 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v931, 0);
      v765 = *(_DWORD *)(a1 + 12);
      if (!v765)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4720);
      }
      v766 = v763;
      v767 = *(_QWORD *)a1 + 720 * (v765 - 1);
      --*(_DWORD *)(v767 + 24);
      if (!v763)
      {
        if (*(_DWORD *)v925 != 20 && (*(_DWORD *)v925 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            if (v404 == 131589)
              v851 = "in";
            else
              v851 = "of";
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43],char const(&)[3],char const(&)[6]>(a1, v851);
          }
          goto LABEL_846;
        }
        goto LABEL_845;
      }
      if (v759)
      {
        JSC::Parser<JSC::Lexer<char16_t>>::parseForStatement<JSC::ASTBuilder>(JSC::ASTBuilder::Statement&)::{lambda(void)#1}::operator()((uint64_t)&v952, (uint64_t)v939, v764, v124, v125, v126, v127, v128);
        if (v404 == 131589)
          v852 = JSC::ASTBuilder::createForInLoop(a2, (uint64_t)&v951, v759, v749, v766, (uint64_t)&v949, &v947, &v935, &v933, (int)v923, v754, (uint64_t *)&v952);
        else
          v852 = JSC::ASTBuilder::createForOfLoop(a2, v115 == 546, (uint64_t)&v951, v759, v749, v766, (uint64_t)&v949, &v947, &v935, &v933, (int)v923, v754, (uint64_t *)&v952);
        SwitchStatement = v852;
        v194 = (WTF **)&v952;
        goto LABEL_91;
      }
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 88))(v138) & 1) == 0)
      {
        v908 = *(_DWORD *)(a1 + 12);
        if (!v908)
        {
          __break(0xC471u);
          JUMPOUT(0x197EF4770);
        }
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v908 - 1) + 9) & 1) != 0
          || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 296))(v138) & 1) == 0)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_846;
          v838 = "Left side of assignment is not a reference";
          v839 = a1;
          v840 = 0;
          goto LABEL_708;
        }
      }
      if (v946 || v945)
      {
        if (!v943)
        {
          __break(0xC471u);
          JUMPOUT(0x197EF433CLL);
        }
        v943 = 0;
        JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v952, (uint64_t *)a1, 1, v124, v125, v126, v127, v128);
        JSC::VariableEnvironment::VariableEnvironment((JSC::VariableEnvironment *)v926, (const JSC::VariableEnvironment *)&v952);
        v793 = v954;
        if (v954)
        {
          v954 = 0;
          LODWORD(v955) = 0;
          WTF::fastFree(v793, v786, v787, v788, v789, v790, v791, v792);
        }
        JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v952, (WTF::AtomStringImpl *)v786, v787, v788, v789, v790, v791, v792);
      }
      else
      {
        v926[0] = 0;
        LOBYTE(v926[1]) = 0;
        v927 = 0;
      }
      if (v404 == 131589)
      {
        v768 = *(uint64_t **)(a2 + 8);
        v910 = (uint64_t *)v926;
        v909 = (uint64_t *)__PAIR64__(v754, v923);
        v769 = &v935;
        v770 = &v933;
        v771 = v138;
        v772 = v749;
        v773 = v766;
LABEL_501:
        v688 = JSC::ASTBuilder::createForInLoop(v768, (uint64_t)&v951, v771, v772, v773, &v947, v769, v770, (int)v909, SHIDWORD(v909), v910);
        goto LABEL_413;
      }
      v683 = v115 == 546;
      v911 = (uint64_t *)v926;
      v910 = (uint64_t *)__PAIR64__(v754, v923);
      v909 = &v933;
      v684 = &v935;
      v685 = a2;
      v682 = v138;
      v686 = v749;
      v687 = v766;
LABEL_412:
      v688 = JSC::ASTBuilder::createForOfLoop(v685, v683, (uint64_t)&v951, v682, v686, v687, &v947, v684, v909, (int)v910, SHIDWORD(v910), v911);
LABEL_413:
      SwitchStatement = v688;
LABEL_90:
      v194 = v926;
LABEL_91:
      JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v194, v183, v184, v124, v125, v126, v127, v128);
LABEL_92:
      v116 = (int)v924;
LABEL_93:
      v195 = v943;
      if (v943)
      {
        v943 = 0;
        JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v952, v195, 0, v124, v125, v126, v127, v128);
        v901 = v954;
        if (v954)
        {
          v954 = 0;
          LODWORD(v955) = 0;
          WTF::fastFree(v901, v894, v895, v896, v897, v898, v899, v900);
        }
        JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v952, (WTF::AtomStringImpl *)v894, v895, v896, v897, v898, v899, v900);
      }
LABEL_94:
      v18 = 0;
      *(_DWORD *)(a1 + 7456) = v116;
LABEL_5:
      if (SwitchStatement)
      {
        *(_DWORD *)(SwitchStatement + 20) = *(_DWORD *)(a1 + 7448);
        if (v18)
        {
LABEL_32:
          *(_BYTE *)(SwitchStatement + 24) = 1;
          v57 = *(_QWORD *)(SwitchStatement + 8);
          v58 = *(_DWORD *)(SwitchStatement + 16);
          *(_QWORD *)&v952 = v57;
          DWORD2(v952) = v58;
          v59 = *(_QWORD *)(a1 + 7520);
          if (v59 && (v57 & 0x80000000) == 0)
            JSC::DebuggerPausePositions::appendPause(v59, (uint64_t)&v952);
        }
      }
LABEL_33:
      *(_DWORD *)(a1 + 7456) = v10;
      return SwitchStatement;
    case 519:
    case 521:
    case 526:
    case 531:
    case 532:
    case 535:
    case 536:
    case 538:
    case 539:
    case 540:
    case 541:
    case 542:
    case 543:
      goto LABEL_96;
    case 520:
      v18 = 1;
      SwitchStatement = JSC::Parser<JSC::Lexer<char16_t>>::parseVariableDeclaration<JSC::ASTBuilder>(a1, a2, 0, 1u);
      goto LABEL_5;
    case 522:
      v952 = *(_OWORD *)(a1 + 7400);
      v939[0] = *(WTF **)(a1 + 7416);
      v627 = *(_DWORD *)(a1 + 7400);
      v629 = (_QWORD *)(a1 + 7428);
      v628 = *(_QWORD *)(a1 + 7428);
      LODWORD(v939[1]) = *(_DWORD *)(a1 + 7424);
      *(_QWORD *)&v942 = v628;
      DWORD2(v942) = *(_DWORD *)(a1 + 7436);
      v630 = *(_DWORD *)(a1 + 7412);
      LODWORD(v628) = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v627;
      *(_DWORD *)(a1 + 7448) = v630;
      *(_DWORD *)(a1 + 7452) = v628;
      v631 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v631 + 4) = v627;
      v632 = *(_DWORD *)(a1 + 12);
      if (!v632)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4650);
      }
      v633 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v632 - 1) + 9) & 1;
      *(_BYTE *)(v631 + 56) = 0;
      v634 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v631, a1 + 7368, 0, v633, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v634;
      v639 = *(_DWORD *)(a1 + 12);
      if (!v639)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4658);
      }
      v640 = *(_QWORD *)a1;
      v641 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v639 - 1) + 10);
      if ((v641 & 0x100000) != 0)
      {
        v877 = JSC::Parser<JSC::Lexer<unsigned char>>::continueIsValid((uint64_t *)a1);
        v639 = *(_DWORD *)(a1 + 12);
        if (!v639)
        {
          __break(0xC471u);
          JUMPOUT(0x197EF4768);
        }
        v640 = *(_QWORD *)a1;
        v878 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v639 - 1) + 24);
        if (v878)
          v879 = 1;
        else
          v879 = v877;
        if (v879 != 1)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "'continue' cannot cross static block boundary");
          goto LABEL_942;
        }
        if (v878)
          v643 = v877;
        else
          v643 = 1;
        v642 = *v17;
      }
      else
      {
        v642 = v634;
        v643 = 0;
      }
      if (v642 == 17)
      {
        v644 = *(_DWORD *)(a1 + 7400);
        v645 = *(_DWORD *)(a1 + 7412);
        v646 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v644;
        *(_DWORD *)(a1 + 7448) = v645;
        *(_DWORD *)(a1 + 7452) = v646;
        v647 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v647 + 4) = v644;
        v648 = *(_BYTE *)(v640 + 720 * (v639 - 1) + 9) & 1;
        *(_BYTE *)(v647 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v647, a1 + 7368, 0, v648, v635, v636, v637, v638);
        v639 = *(_DWORD *)(a1 + 12);
        if (!v639)
        {
LABEL_384:
          __break(0xC471u);
          JUMPOUT(0x197EF240CLL);
        }
        v640 = *(_QWORD *)a1;
        goto LABEL_379;
      }
      if (v642 == 1 || v642 == 20 || *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
      {
LABEL_379:
        v649 = v639 - 1;
        v650 = v639 - 1;
        while (1)
        {
          v651 = *(_DWORD *)(v640 + 720 * v649 + 24);
          v652 = v651 != 0;
          if (!v650 || v651)
            goto LABEL_874;
          if ((*(_BYTE *)(v640 + 720 * v649 + 12) & 0x60) != 0)
            break;
          v650 = v649 - 1;
          v649 = (v649 - 1);
          if (v639 <= v650)
            goto LABEL_384;
        }
        v652 = 0;
LABEL_874:
        if ((v641 & 0x100000) != 0)
          v892 = v643;
        else
          v892 = v652;
        if (!v892)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "'continue' is only valid inside a loop statement");
          goto LABEL_942;
        }
        v303 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        v893 = *(uint64_t **)(a2 + 8);
        SwitchStatement = *v893;
        if ((unint64_t)(v893[1] - *v893) <= 0x57)
        {
          JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v893);
          SwitchStatement = *v893;
        }
        *v893 = SwitchStatement + 88;
        *(_BYTE *)(SwitchStatement + 24) = 0;
        v305 = &off_1E358A3E0;
LABEL_194:
        *(_QWORD *)SwitchStatement = v305;
        *(_QWORD *)(SwitchStatement + 80) = v303;
        *(WTF **)(SwitchStatement + 52) = v939[0];
        v306 = DWORD2(v942);
        v307 = v942;
        *(_DWORD *)(SwitchStatement + 48) = DWORD2(v942);
        *(_DWORD *)(SwitchStatement + 72) = v306;
        v308 = v942;
        *(_QWORD *)(SwitchStatement + 32) = 0;
        *(_QWORD *)(SwitchStatement + 40) = v308;
        *(_QWORD *)(SwitchStatement + 64) = v308;
        LODWORD(v308) = v939[1];
        *(_DWORD *)(SwitchStatement + 60) = v939[1];
        *(_DWORD *)(SwitchStatement + 28) = v307;
        *(WTF **)(SwitchStatement + 8) = v939[0];
        *(_DWORD *)(SwitchStatement + 16) = v308;
        *(_DWORD *)(SwitchStatement + 20) = -1;
        goto LABEL_97;
      }
      if (v642 != 12
        && !JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, v642, *(_QWORD **)(a1 + 7376))
        && !JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376)))
      {
        v813 = *v17;
        if (*v17 != 546)
        {
          if (v813 != 1048592)
          {
            if (v813 == 20 || (v813 & 0x100000) != 0)
              goto LABEL_941;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected an identifier as the target for a continue statement");
            goto LABEL_942;
          }
          if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
            goto LABEL_941;
        }
      }
      v661 = *(WTF ***)(a1 + 7376);
      Label = JSC::Parser<JSC::Lexer<char16_t>>::getLabel((uint64_t *)a1, v661);
      if (!Label)
      {
LABEL_887:
        if (!*(_QWORD *)(a1 + 7360))
        {
          v926[0] = *v661;
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],WTF::UniquedStringImpl *,char const(&)[2]>(a1, 0, "Cannot use the undeclared label '", (uint64_t *)v926);
        }
        goto LABEL_942;
      }
      if (!*(_BYTE *)(Label + 8))
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v926[0] = *v661;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::UniquedStringImpl *,char const(&)[32]>(a1, (uint64_t *)v926);
        }
        goto LABEL_942;
      }
      *(_QWORD *)&v942 = *v629;
      DWORD2(v942) = *(_DWORD *)(a1 + 7436);
      v724 = *(_DWORD *)(a1 + 7400);
      v725 = *(_DWORD *)(a1 + 7412);
      v726 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v724;
      *(_DWORD *)(a1 + 7448) = v725;
      *(_DWORD *)(a1 + 7452) = v726;
      v727 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v727 + 4) = v724;
      v728 = *(_DWORD *)(a1 + 12);
      if (!v728)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4738);
      }
      v729 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v728 - 1) + 9) & 1;
      *(_BYTE *)(v727 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v727, a1 + 7368, 0, v729, v720, v721, v722, v723);
      if (JSC::Parser<JSC::Lexer<char16_t>>::autoSemiColon(a1, v730, v731, v732, v733, v734, v735, v736))
      {
        JSC::ASTBuilder::createContinueStatement(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v952, (uint64_t)v661, (uint64_t)v939, (uint64_t *)&v942);
LABEL_408:
        SwitchStatement = v679;
        goto LABEL_97;
      }
      if (*v17 == 20 || (*v17 & 0x100000) != 0)
        goto LABEL_941;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' following a targeted continue statement");
LABEL_942:
      SwitchStatement = 0;
      goto LABEL_97;
    case 523:
      v775 = JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionDeclarationStatement<JSC::ASTBuilder>(a1, a2, v15 != 0);
      goto LABEL_520;
    case 524:
      ++*(_DWORD *)(a1 + 7308);
      v21 = *(_DWORD *)(a1 + 12);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4460);
      }
      v22 = v21 - 1;
      v23 = *(_QWORD *)a1;
      if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * v22 + 10) & 0x100100) != 0x100)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Return statements are only valid inside functions");
        goto LABEL_149;
      }
      v24 = (_DWORD *)(a1 + 7368);
      v25 = *(_DWORD *)(a1 + 7400);
      v26 = *(_DWORD *)(a1 + 7404);
      v27 = *(_DWORD *)(a1 + 7416);
      v28 = *(_DWORD *)(a1 + 7420);
      v29 = *(_DWORD *)(a1 + 7424);
      v30 = *(_DWORD *)(a1 + 7428);
      v31 = *(_QWORD *)(a1 + 7432);
      v32 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v25;
      *(_DWORD *)(a1 + 7448) = v32;
      *(_DWORD *)(a1 + 7452) = v26;
      v33 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v33 + 4) = v25;
      v34 = *(_BYTE *)(v23 + 720 * v22 + 9) & 1;
      *(_BYTE *)(v33 + 56) = 0;
      v35 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v33, a1 + 7368, 0, v34, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v35;
      if (v35 == 1 || v35 == 20)
        goto LABEL_230;
      if (v35 == 17)
      {
        v30 = *(_DWORD *)(a1 + 7428);
        v31 = *(_QWORD *)(a1 + 7432);
        v349 = *(_DWORD *)(a1 + 7400);
        v350 = *(_DWORD *)(a1 + 7412);
        v351 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v349;
        *(_DWORD *)(a1 + 7448) = v350;
        *(_DWORD *)(a1 + 7452) = v351;
        v352 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v352 + 4) = v349;
        v353 = *(_DWORD *)(a1 + 12);
        if (!v353)
        {
          __break(0xC471u);
          JUMPOUT(0x197EF45B8);
        }
        v354 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v353 - 1) + 9) & 1;
        *(_BYTE *)(v352 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v352, a1 + 7368, 0, v354, v36, v37, v38, v39);
      }
      else if (!*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
      {
        v41 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
        if (v41)
        {
          v46 = v41;
          v47 = *(_DWORD *)(a1 + 7368);
          if (v47 == 17)
          {
            v48 = *(_DWORD *)(a1 + 7428);
            v49 = *(_QWORD *)(a1 + 7432);
            v50 = *(_DWORD *)(a1 + 7400);
            v51 = *(_DWORD *)(a1 + 7412);
            v52 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v50;
            *(_DWORD *)(a1 + 7448) = v51;
            *(_DWORD *)(a1 + 7452) = v52;
            v53 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v53 + 4) = v50;
            v54 = *(_DWORD *)(a1 + 12);
            if (!v54)
            {
              __break(0xC471u);
              JUMPOUT(0x197EF44B4);
            }
            v55 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v54 - 1) + 9) & 1;
            *(_BYTE *)(v53 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v53, a1 + 7368, 0, v55, v42, v43, v44, v45);
            goto LABEL_27;
          }
          v48 = *(_DWORD *)(a1 + 7444);
          v49 = *(_QWORD *)(a1 + 7448);
          if (v47 == 1 || v47 == 20 || *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
          {
LABEL_27:
            v56 = *(uint64_t **)(a2 + 8);
            SwitchStatement = *v56;
            if ((unint64_t)(v56[1] - *v56) <= 0x57)
            {
              JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v56);
              SwitchStatement = *v56;
            }
            *v56 = SwitchStatement + 88;
            *(_BYTE *)(SwitchStatement + 24) = 0;
            *(_QWORD *)(SwitchStatement + 32) = 0;
            *(_QWORD *)SwitchStatement = &off_1E358A520;
            *(_QWORD *)(SwitchStatement + 80) = v46;
            *(_DWORD *)(SwitchStatement + 40) = v48;
            *(_QWORD *)(SwitchStatement + 44) = v49;
            *(_DWORD *)(SwitchStatement + 52) = v27;
            *(_DWORD *)(SwitchStatement + 56) = v28;
            *(_DWORD *)(SwitchStatement + 60) = v29;
            *(_DWORD *)(SwitchStatement + 64) = v48;
            *(_QWORD *)(SwitchStatement + 68) = v49;
            *(_DWORD *)(SwitchStatement + 28) = v48;
LABEL_30:
            *(_DWORD *)(SwitchStatement + 8) = v27;
            *(_DWORD *)(SwitchStatement + 12) = v28;
            *(_DWORD *)(SwitchStatement + 16) = v29;
            *(_DWORD *)(SwitchStatement + 20) = -1;
            goto LABEL_31;
          }
          if ((v47 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              v248 = "Expected a ';' following a return statement";
LABEL_744:
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, v248);
            }
LABEL_149:
            SwitchStatement = 0;
            goto LABEL_33;
          }
        }
        else if (*v24 != 20 && (*v24 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the return expression");
          goto LABEL_149;
        }
LABEL_148:
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        goto LABEL_149;
      }
LABEL_230:
      v355 = *(uint64_t **)(a2 + 8);
      SwitchStatement = *v355;
      if ((unint64_t)(v355[1] - *v355) <= 0x57)
      {
        JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v355);
        SwitchStatement = *v355;
      }
      *v355 = SwitchStatement + 88;
      *(_BYTE *)(SwitchStatement + 24) = 0;
      *(_QWORD *)(SwitchStatement + 32) = 0;
      *(_QWORD *)SwitchStatement = &off_1E358A520;
      *(_QWORD *)(SwitchStatement + 80) = 0;
      *(_DWORD *)(SwitchStatement + 40) = v30;
      *(_QWORD *)(SwitchStatement + 44) = v31;
      *(_DWORD *)(SwitchStatement + 52) = v27;
      *(_DWORD *)(SwitchStatement + 56) = v28;
      *(_DWORD *)(SwitchStatement + 60) = v29;
      *(_DWORD *)(SwitchStatement + 64) = v30;
      *(_QWORD *)(SwitchStatement + 68) = v31;
      *(_DWORD *)(SwitchStatement + 28) = v30;
      goto LABEL_30;
    case 525:
      v61 = *(_DWORD *)(a1 + 7400);
      v62 = *(_DWORD *)(a1 + 7404);
      v63 = *(_DWORD *)(a1 + 7408);
      v64 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v61;
      *(_DWORD *)(a1 + 7448) = v64;
      *(_DWORD *)(a1 + 7452) = v62;
      v65 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v65 + 4) = v61;
      v66 = *(_DWORD *)(a1 + 12);
      if (!v66)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4478);
      }
      v67 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v66 - 1) + 9) & 1;
      *(_BYTE *)(v65 + 56) = 0;
      v68 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v65, a1 + 7368, 0, v67, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v68;
      if (v68 != 2)
      {
        if (v68 == 20 || (v68 & 0x100000) != 0)
          goto LABEL_148;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[5],char const(&)[15]>(a1);
        goto LABEL_149;
      }
      v73 = *(_DWORD *)(a1 + 7400);
      v74 = *(_DWORD *)(a1 + 7412);
      v75 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v73;
      *(_DWORD *)(a1 + 7448) = v74;
      *(_DWORD *)(a1 + 7452) = v75;
      v76 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v76 + 4) = v73;
      v77 = *(_DWORD *)(a1 + 12);
      if (!v77)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4480);
      }
      v78 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v77 - 1) + 9) & 1;
      *(_BYTE *)(v76 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v76, a1 + 7368, 0, v78, v69, v70, v71, v72);
      v79 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
      if (!v79)
      {
        if (*v17 == 20 || (*v17 & 0x100000) != 0)
          goto LABEL_148;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected an expression as the condition for an if statement");
        goto LABEL_149;
      }
      v84 = v79;
      *(_BYTE *)(v79 + 24) = 1;
      v85 = *(_QWORD *)(v79 + 8);
      v86 = *(_DWORD *)(v79 + 16);
      *(_QWORD *)&v952 = v85;
      DWORD2(v952) = v86;
      v87 = *(_QWORD *)(a1 + 7520);
      if (v87 && (v85 & 0x80000000) == 0)
        JSC::DebuggerPausePositions::appendPause(v87, (uint64_t)&v952);
      v88 = *v17;
      if (*v17 != 3)
      {
        if (v88 == 20 || (v88 & 0x100000) != 0)
          goto LABEL_148;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[15]>(a1, ")", "'if' condition");
        goto LABEL_149;
      }
      LODWORD(v924) = v63;
      v89 = *(_DWORD *)(a1 + 7400);
      v90 = *(_DWORD *)(a1 + 7412);
      v91 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v89;
      *(_DWORD *)(a1 + 7448) = v90;
      *(_DWORD *)(a1 + 7452) = v91;
      v92 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v92 + 4) = v89;
      v93 = *(_DWORD *)(a1 + 12);
      if (!v93)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4488);
      }
      v94 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v93 - 1) + 9) & 1;
      *(_BYTE *)(v92 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v92, a1 + 7368, 0, v94, v80, v81, v82, v83);
      v947 = 0;
      v9[161] = 1;
      v95 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v947, 0);
      v100 = *(_DWORD *)(a1 + 7368);
      if (v95)
      {
        if (v100 != 538)
        {
          v101 = *(uint64_t **)(a2 + 8);
          SwitchStatement = *v101;
          if ((unint64_t)(v101[1] - *v101) <= 0x3F)
          {
            v803 = v95;
            JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v101);
            v95 = v803;
            SwitchStatement = *v101;
          }
          *v101 = SwitchStatement + 64;
          *(_BYTE *)(SwitchStatement + 24) = 0;
          *(_QWORD *)SwitchStatement = &off_1E358A140;
          *(_QWORD *)(SwitchStatement + 32) = 0;
          *(_QWORD *)(SwitchStatement + 40) = v84;
          *(_QWORD *)(SwitchStatement + 48) = v95;
          *(_QWORD *)(SwitchStatement + 56) = 0;
          *(_DWORD *)(SwitchStatement + 28) = v89;
          v102 = (int)v924;
          *(_DWORD *)(SwitchStatement + 8) = v61;
          *(_DWORD *)(SwitchStatement + 12) = v102;
          *(_DWORD *)(SwitchStatement + 16) = v62;
          *(_DWORD *)(SwitchStatement + 20) = -1;
          goto LABEL_46;
        }
        v922 = v95;
        v923 = (unsigned int *)(a1 + 7400);
        v921 = 0;
        v196 = 0;
        v197 = 0;
        v952 = 0uLL;
        v939[0] = 0;
        v939[1] = 0;
        v942 = 0uLL;
        v926[0] = 0;
        v926[1] = 0;
        v919 = v62;
        v925 = a1 + 7368;
        while (1)
        {
          LODWORD(v920) = v197;
          v951 = *(_OWORD *)v923;
          v198 = *(_DWORD *)(a1 + 7400);
          v199 = *(_DWORD *)(a1 + 7412);
          v200 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v198;
          *(_DWORD *)(a1 + 7448) = v199;
          *(_DWORD *)(a1 + 7452) = v200;
          v201 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v201 + 4) = v198;
          v202 = *(_DWORD *)(a1 + 12);
          if (!v202)
          {
            __break(0xC471u);
            JUMPOUT(0x197EF44BCLL);
          }
          v203 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v202 - 1) + 9) & 1;
          *(_BYTE *)(v201 + 56) = 0;
          v204 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v201, (uint64_t)v17, 0, v203, v96, v97, v98, v99);
          *(_DWORD *)(a1 + 7368) = v204;
          if (v204 != 525)
          {
            *(_QWORD *)&v949 = 0;
            v9[161] = 1;
            v935 = 0;
            v209 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v949, 0);
            v935 = v209;
            if (v209)
            {
              if (HIDWORD(v926[1]) == LODWORD(v926[1]))
              {
                v213 = (_QWORD *)WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v926, HIDWORD(v926[1]) + 1, (unint64_t)&v935);
                v214 = HIDWORD(v926[1]) + 1;
                *((_QWORD *)v926[0] + HIDWORD(v926[1])) = *v213;
              }
              else
              {
                v214 = HIDWORD(v926[1]) + 1;
                *((_QWORD *)v926[0] + HIDWORD(v926[1])) = v209;
              }
              HIDWORD(v926[1]) = v214;
              v215 = 54;
              v197 = 1;
              goto LABEL_105;
            }
            if (*v17 == 20 || (*v17 & 0x100000) != 0)
            {
              JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
            }
            else if (!*(_QWORD *)(a1 + 7360))
            {
              v215 = 1;
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of an else block");
LABEL_804:
              v197 = (int)v920;
LABEL_105:
              v216 = v922;
              goto LABEL_106;
            }
            v215 = 1;
            goto LABEL_804;
          }
          v217 = *(unsigned int *)(a1 + 7400);
          v218 = *(_DWORD *)(a1 + 7412);
          v219 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v217;
          *(_DWORD *)(a1 + 7448) = v218;
          *(_DWORD *)(a1 + 7452) = v219;
          v220 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v220 + 4) = v217;
          v221 = *(_DWORD *)(a1 + 12);
          if (!v221)
          {
            __break(0xC471u);
            JUMPOUT(0x197EF44E4);
          }
          v222 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v221 - 1) + 9) & 1;
          *(_BYTE *)(v220 + 56) = 0;
          v223 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v220, v925, 0, v222, v205, v206, v207, v208);
          *(_DWORD *)(a1 + 7368) = v223;
          if (v223 != 2)
          {
            if (v223 != 20 && (v223 & 0x100000) == 0)
            {
              v409 = v921;
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[5],char const(&)[15]>(a1);
            }
            else
            {
              JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
              v409 = v921;
            }
            SwitchStatement = 0;
            goto LABEL_273;
          }
          v224 = *(_DWORD *)(a1 + 7400);
          v225 = *(_DWORD *)(a1 + 7412);
          v226 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v224;
          *(_DWORD *)(a1 + 7448) = v225;
          *(_DWORD *)(a1 + 7452) = v226;
          v227 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v227 + 4) = v224;
          v228 = *(_DWORD *)(a1 + 12);
          if (!v228)
          {
            __break(0xC471u);
            JUMPOUT(0x197EF44ECLL);
          }
          v229 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v228 - 1) + 9) & 1;
          *(_BYTE *)(v227 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v227, v925, 0, v229, v96, v97, v98, v99);
          v935 = 0;
          v230 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
          v935 = v230;
          if (!v230)
          {
            if (*(_DWORD *)v925 == 20 || (*(_DWORD *)v925 & 0x100000) != 0)
            {
              JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
            }
            else if (!*(_QWORD *)(a1 + 7360))
            {
              v215 = 1;
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected an expression as the condition for an if statement");
LABEL_813:
              v216 = v922;
              goto LABEL_126;
            }
            v215 = 1;
            goto LABEL_813;
          }
          *(_BYTE *)(v230 + 24) = 1;
          v231 = *(_QWORD *)(v230 + 8);
          v232 = *(_DWORD *)(v230 + 16);
          *(_QWORD *)&v949 = v231;
          DWORD2(v949) = v232;
          v233 = *(_QWORD *)(a1 + 7520);
          if (v233 && (v231 & 0x80000000) == 0)
            JSC::DebuggerPausePositions::appendPause(v233, (uint64_t)&v949);
          v234 = *(_DWORD *)v925;
          if (*(_DWORD *)v925 != 3)
          {
            if (v234 == 20 || (v234 & 0x100000) != 0)
            {
              JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
            }
            else if (!*(_QWORD *)(a1 + 7360))
            {
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[15]>(a1, ")", "'if' condition");
            }
            v215 = 1;
            goto LABEL_125;
          }
          v235 = v196;
          v236 = *v923;
          v237 = *(_DWORD *)(a1 + 7412);
          v238 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v236;
          *(_DWORD *)(a1 + 7448) = v237;
          *(_DWORD *)(a1 + 7452) = v238;
          v239 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v239 + 4) = v236;
          v240 = *(_DWORD *)(a1 + 12);
          if (!v240)
          {
            __break(0xC471u);
            JUMPOUT(0x197EF451CLL);
          }
          v241 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v240 - 1) + 9) & 1;
          *(_BYTE *)(v239 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v239, v925, 0, v241, v96, v97, v98, v99);
          *(_QWORD *)&v949 = 0;
          v9[161] = 1;
          v933 = 0;
          v933 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v949, 0);
          if (v933)
          {
            v242 = HIDWORD(v942);
            if (HIDWORD(v942) == DWORD2(v942))
            {
              WTF::Vector<JSC::JSTokenLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSTokenLocation&>((uint64_t)&v942, (unint64_t)&v951);
            }
            else
            {
              *(_OWORD *)(v942 + 16 * HIDWORD(v942)) = v951;
              HIDWORD(v942) = v242 + 1;
            }
            v243 = v235;
            if ((_DWORD)v235 == DWORD2(v952))
            {
              v244 = (uint64_t *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v952, v235 + 1, (unint64_t)&v935);
              v243 = HIDWORD(v952);
              v245 = *v244;
              v921 = (WTF *)v952;
              *(_QWORD *)(v952 + 8 * HIDWORD(v952)) = v245;
            }
            else
            {
              *((_QWORD *)v921 + v235) = v935;
            }
            v246 = (v243 + 1);
            HIDWORD(v952) = v243 + 1;
            v931 = v217 | (v236 << 32);
            if (HIDWORD(v939[1]) == LODWORD(v939[1]))
            {
              WTF::Vector<std::pair<int,int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<int,int>>((uint64_t)v939, (unint64_t)&v931);
            }
            else
            {
              *((_QWORD *)v939[0] + HIDWORD(v939[1])) = v217 | (v236 << 32);
              ++HIDWORD(v939[1]);
            }
            v247 = HIDWORD(v926[1]);
            v196 = v246;
            if (HIDWORD(v926[1]) == LODWORD(v926[1]))
            {
              WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::StatementNode *&>((uint64_t)v926, (unint64_t)&v933);
              v215 = 0;
            }
            else
            {
              v215 = 0;
              *((_QWORD *)v926[0] + HIDWORD(v926[1])) = v933;
              HIDWORD(v926[1]) = v247 + 1;
            }
            goto LABEL_125;
          }
          if (*(_DWORD *)v925 == 20 || (*(_DWORD *)v925 & 0x100000) != 0)
            break;
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_816;
          v215 = 1;
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of an if block");
LABEL_817:
          v196 = v235;
LABEL_125:
          v216 = v922;
LABEL_126:
          v197 = (int)v920;
LABEL_106:
          if (v215)
          {
            if (v215 == 54)
            {
LABEL_266:
              if ((v197 & 1) == 0)
              {
                if (!(_DWORD)v196)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EF4620);
                }
                v429 = *((_QWORD *)v921 + v196 - 1);
                v925 = (v196 - 1);
                HIDWORD(v952) = v196 - 1;
                v430 = HIDWORD(v926[1]);
                if (!HIDWORD(v926[1]))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EF4628);
                }
                v431 = v926[0];
                v432 = *((_QWORD *)v926[0] + HIDWORD(v926[1]) - 1);
                v433 = --HIDWORD(v926[1]);
                if (!HIDWORD(v939[1]))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EF4630);
                }
                v434 = (char *)v939[0] + 8 * HIDWORD(v939[1]);
                v435 = *((_DWORD *)v434 - 2);
                v436 = *((_DWORD *)v434 - 1);
                --HIDWORD(v939[1]);
                if (!HIDWORD(v942))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EF4638);
                }
                v437 = *(int32x2_t *)(v942 + 16 * HIDWORD(v942) - 12);
                --HIDWORD(v942);
                v438 = *(uint64_t **)(a2 + 8);
                v439 = *v438;
                if ((unint64_t)(v438[1] - *v438) <= 0x3F)
                {
                  v876 = *(JSC::ParserArena **)(a2 + 8);
                  v923 = (unsigned int *)v437;
                  v920 = v926[0];
                  v918 = v429;
                  v917 = v435;
                  LODWORD(v916) = v436;
                  JSC::ParserArena::allocateFreeablePool(v876);
                  v436 = (int)v916;
                  v435 = v917;
                  v429 = v918;
                  v431 = v920;
                  v216 = v922;
                  v437 = (int32x2_t)v923;
                  v439 = *v438;
                }
                *v438 = v439 + 64;
                *(_DWORD *)(v439 + 20) = -1;
                *(_BYTE *)(v439 + 24) = 0;
                *(_QWORD *)v439 = &off_1E358A140;
                *(_QWORD *)(v439 + 32) = 0;
                *(_QWORD *)(v439 + 40) = v429;
                *(_QWORD *)(v439 + 48) = v432;
                *(_QWORD *)(v439 + 56) = 0;
                *(_DWORD *)(v439 + 28) = v436;
                *(_DWORD *)(v439 + 8) = v435;
                *(int32x2_t *)(v439 + 12) = vrev64_s32(v437);
                *(_QWORD *)&v951 = v439;
                *(_DWORD *)(v439 + 20) = *(_DWORD *)(v432 + 20);
                if (v433 == LODWORD(v926[1]))
                {
                  WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::StatementNode *&>((uint64_t)v926, (unint64_t)&v951);
                  v216 = v922;
                }
                else
                {
                  *((_QWORD *)v431 + v433) = v439;
                  HIDWORD(v926[1]) = v430;
                }
                LODWORD(v196) = v925;
              }
              if ((_DWORD)v196)
              {
                v412 = (HIDWORD(v942) - v196);
                v413 = v196 - 1;
                v414 = 16 * HIDWORD(v942);
                v415 = v942 - 12;
                do
                {
                  if (!HIDWORD(v926[1]))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EF45C0);
                  }
                  v416 = HIDWORD(v926[1]) - 1;
                  if (HIDWORD(v926[1]) == 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EF45C8);
                  }
                  v211 = *((_QWORD *)v921 + v413);
                  v417 = v926[0];
                  v210 = (_DWORD *)*((_QWORD *)v926[0] + HIDWORD(v926[1]) - 1);
                  v212 = *((_QWORD *)v926[0] + v416 - 1);
                  v418 = HIDWORD(v926[1]) - 2;
                  HIDWORD(v926[1]) -= 2;
                  if (!HIDWORD(v939[1]))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EF45D0);
                  }
                  v419 = (char *)v939[0] + 8 * HIDWORD(v939[1]);
                  v420 = *((_DWORD *)v419 - 2);
                  v421 = *((_DWORD *)v419 - 1);
                  --HIDWORD(v939[1]);
                  if (!v414)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EF45D8);
                  }
                  v422 = *(int **)(v415 + v414);
                  *(_QWORD *)&v951 = 0;
                  v423 = *(uint64_t **)(a2 + 8);
                  v424 = *v423;
                  if ((unint64_t)(v423[1] - *v423) <= 0x3F)
                  {
                    v872 = *(JSC::ParserArena **)(a2 + 8);
                    v925 = (uint64_t)v422;
                    LODWORD(v923) = v412;
                    v920 = (WTF *)v413;
                    v918 = v415;
                    v917 = v416;
                    v916 = v926[0];
                    v915 = v418;
                    v913 = v211;
                    v914 = v210;
                    v912 = v212;
                    JSC::ParserArena::allocateFreeablePool(v872);
                    v212 = v912;
                    v211 = v913;
                    v210 = v914;
                    v418 = v915;
                    v417 = v916;
                    v416 = v917;
                    v415 = v918;
                    v413 = (uint64_t)v920;
                    v412 = v923;
                    v216 = v922;
                    v422 = (int *)v925;
                    v424 = *v423;
                  }
                  *v423 = v424 + 64;
                  *(_DWORD *)(v424 + 20) = -1;
                  *(_BYTE *)(v424 + 24) = 0;
                  *(_QWORD *)v424 = &off_1E358A140;
                  *(_QWORD *)(v424 + 32) = 0;
                  *(_QWORD *)(v424 + 40) = v211;
                  *(_QWORD *)(v424 + 48) = v212;
                  *(_QWORD *)(v424 + 56) = v210;
                  *(_DWORD *)(v424 + 28) = v421;
                  *(_DWORD *)(v424 + 8) = v420;
                  *(int32x2_t *)(v424 + 12) = vrev64_s32((int32x2_t)v422);
                  *(_QWORD *)&v951 = v424;
                  *(_DWORD *)(v424 + 20) = v210[5];
                  if (v418 == LODWORD(v926[1]))
                  {
                    v425 = v412;
                    v426 = v413;
                    v427 = v415;
                    WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::StatementNode *&>((uint64_t)v926, (unint64_t)&v951);
                    v415 = v427;
                    v413 = v426;
                    v412 = v425;
                    v216 = v922;
                  }
                  else
                  {
                    *((_QWORD *)v417 + v418) = v424;
                    HIDWORD(v926[1]) = v416;
                  }
                  v428 = v413--;
                  v414 -= 16;
                }
                while (v428);
                HIDWORD(v952) = 0;
                HIDWORD(v942) = v412;
              }
              if (!HIDWORD(v926[1]))
              {
                __break(0xC471u);
                JUMPOUT(0x197EF4524);
              }
              v406 = *((_QWORD *)v926[0] + HIDWORD(v926[1]) - 1);
              v407 = *(uint64_t **)(a2 + 8);
              SwitchStatement = *v407;
              if ((unint64_t)(v407[1] - *v407) <= 0x3F)
              {
                JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v407);
                v216 = v922;
                SwitchStatement = *v407;
              }
              *v407 = SwitchStatement + 64;
              *(_BYTE *)(SwitchStatement + 24) = 0;
              *(_QWORD *)SwitchStatement = &off_1E358A140;
              *(_QWORD *)(SwitchStatement + 32) = 0;
              *(_QWORD *)(SwitchStatement + 40) = v84;
              *(_QWORD *)(SwitchStatement + 48) = v216;
              *(_QWORD *)(SwitchStatement + 56) = v406;
              *(_DWORD *)(SwitchStatement + 28) = v89;
              v408 = (int)v924;
              *(_DWORD *)(SwitchStatement + 8) = v61;
              *(_DWORD *)(SwitchStatement + 12) = v408;
              *(_DWORD *)(SwitchStatement + 16) = v919;
              *(_DWORD *)(SwitchStatement + 20) = -1;
            }
            else
            {
              SwitchStatement = 0;
            }
            v409 = v921;
LABEL_273:
            v410 = v926[0];
            if (v926[0])
            {
              v926[0] = 0;
              WTF::fastFree((unint64_t)v410, v210, v211, v212, v96, v97, v98, v99);
            }
            if ((_QWORD)v942)
              WTF::fastFree(v942, v210, v211, v212, v96, v97, v98, v99);
            v411 = v939[0];
            if (v939[0])
            {
              v939[0] = 0;
              LODWORD(v939[1]) = 0;
              WTF::fastFree((unint64_t)v411, v210, v211, v212, v96, v97, v98, v99);
            }
            if (v409)
            {
              *(_QWORD *)&v952 = 0;
              DWORD2(v952) = 0;
              WTF::fastFree((unint64_t)v409, v210, v211, v212, v96, v97, v98, v99);
            }
            goto LABEL_46;
          }
          v17 = (int *)v925;
          if (*(_DWORD *)v925 != 538)
            goto LABEL_266;
        }
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_816:
        v215 = 1;
        goto LABEL_817;
      }
      if (v100 == 20 || (v100 & 0x100000) != 0)
        goto LABEL_532;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of an if block");
      goto LABEL_533;
    case 527:
      JSC::Parser<JSC::Lexer<char16_t>>::parseDoWhileStatement<JSC::ASTBuilder>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_520;
    case 528:
      v356 = (_DWORD *)(a1 + 7368);
      v357 = *(_DWORD *)(a1 + 7400);
      v358 = *(_DWORD *)(a1 + 7404);
      v359 = *(_DWORD *)(a1 + 7408);
      v360 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v357;
      *(_DWORD *)(a1 + 7448) = v360;
      *(_DWORD *)(a1 + 7452) = v358;
      v361 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v361 + 4) = v357;
      v362 = *(_DWORD *)(a1 + 12);
      if (!v362)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF45F8);
      }
      v363 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v362 - 1) + 9) & 1;
      *(_BYTE *)(v361 + 56) = 0;
      v364 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v361, a1 + 7368, 0, v363, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v364;
      if (v364 != 2)
      {
        if (v364 == 20 || (v364 & 0x100000) != 0)
          goto LABEL_148;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[21]>(a1);
        goto LABEL_149;
      }
      v369 = *(_DWORD *)(a1 + 7400);
      v370 = *(_DWORD *)(a1 + 7412);
      v371 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v369;
      *(_DWORD *)(a1 + 7448) = v370;
      *(_DWORD *)(a1 + 7452) = v371;
      v372 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v372 + 4) = v369;
      v373 = *(_DWORD *)(a1 + 12);
      if (!v373)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4600);
      }
      v374 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v373 - 1) + 9) & 1;
      *(_BYTE *)(v372 + 56) = 0;
      v375 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v372, a1 + 7368, 0, v374, v365, v366, v367, v368);
      *(_DWORD *)(a1 + 7368) = v375;
      if (v375 == 3)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Must provide an expression as a while loop condition");
        goto LABEL_149;
      }
      v376 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
      if (!v376)
      {
        if (*v356 == 20 || (*v356 & 0x100000) != 0)
          goto LABEL_148;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Unable to parse while loop condition");
        goto LABEL_149;
      }
      v381 = v376;
      *(_BYTE *)(v376 + 24) = 1;
      v382 = *(_QWORD *)(v376 + 8);
      v383 = *(_DWORD *)(v376 + 16);
      *(_QWORD *)&v952 = v382;
      DWORD2(v952) = v383;
      v384 = *(_QWORD *)(a1 + 7520);
      if (v384 && (v382 & 0x80000000) == 0)
        JSC::DebuggerPausePositions::appendPause(v384, (uint64_t)&v952);
      v385 = *(_DWORD *)(a1 + 7368);
      if (v385 != 3)
      {
        if (v385 == 20 || (v385 & 0x100000) != 0)
          goto LABEL_148;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[21]>(a1, ")", "while loop condition");
        goto LABEL_149;
      }
      v386 = *(_DWORD *)(a1 + 7400);
      v387 = *(_DWORD *)(a1 + 7412);
      v388 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v386;
      *(_DWORD *)(a1 + 7448) = v387;
      *(_DWORD *)(a1 + 7452) = v388;
      v389 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v389 + 4) = v386;
      v390 = *(_DWORD *)(a1 + 12);
      if (!v390)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4608);
      }
      LODWORD(v924) = v358;
      v391 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v390 - 1) + 9) & 1;
      *(_BYTE *)(v389 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v389, a1 + 7368, 0, v391, v377, v378, v379, v380);
      *(_QWORD *)&v952 = 0;
      v392 = *(_DWORD *)(a1 + 12);
      if (!v392)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4610);
      }
      v393 = *(_QWORD *)a1 + 720 * (v392 - 1);
      ++*(_DWORD *)(v393 + 24);
      v394 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v952, 0);
      v395 = *(_DWORD *)(a1 + 12);
      if (!v395)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4618);
      }
      v396 = v394;
      v397 = *(_QWORD *)a1 + 720 * (v395 - 1);
      --*(_DWORD *)(v397 + 24);
      if (v394)
      {
        v398 = *(uint64_t **)(a2 + 8);
        SwitchStatement = *v398;
        if ((unint64_t)(v398[1] - *v398) <= 0x37)
        {
          JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v398);
          SwitchStatement = *v398;
        }
        *v398 = SwitchStatement + 56;
        *(_BYTE *)(SwitchStatement + 24) = 0;
        *(_QWORD *)SwitchStatement = &off_1E358A280;
        *(_QWORD *)(SwitchStatement + 32) = 0;
        *(_QWORD *)(SwitchStatement + 40) = v381;
        *(_QWORD *)(SwitchStatement + 48) = v396;
        *(_DWORD *)(SwitchStatement + 28) = v386;
        *(_DWORD *)(SwitchStatement + 8) = v357;
        *(_DWORD *)(SwitchStatement + 12) = v359;
        *(_DWORD *)(SwitchStatement + 16) = (_DWORD)v924;
        *(_DWORD *)(SwitchStatement + 20) = -1;
        goto LABEL_46;
      }
      if (*v356 == 20 || (*v356 & 0x100000) != 0)
        goto LABEL_532;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a statement as the body of a while loop");
      goto LABEL_533;
    case 529:
      *(_OWORD *)v939 = *(_OWORD *)(a1 + 7400);
      v440 = *(_DWORD *)(a1 + 7400);
      v441 = *(_DWORD *)(a1 + 7412);
      v442 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v440;
      *(_DWORD *)(a1 + 7448) = v441;
      *(_DWORD *)(a1 + 7452) = v442;
      v443 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v443 + 4) = v440;
      v444 = *(_DWORD *)(a1 + 12);
      if (!v444)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4640);
      }
      v445 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v444 - 1) + 9) & 1;
      *(_BYTE *)(v443 + 56) = 0;
      v446 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v443, a1 + 7368, 0, v445, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v446;
      if (v446 == 2)
      {
        v451 = *(_DWORD *)(a1 + 7400);
        v452 = *(_DWORD *)(a1 + 7412);
        v453 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v451;
        *(_DWORD *)(a1 + 7448) = v452;
        *(_DWORD *)(a1 + 7452) = v453;
        v454 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v454 + 4) = v451;
        v455 = *(_DWORD *)(a1 + 12);
        if (!v455)
        {
          __break(0xC471u);
          JUMPOUT(0x197EF4660);
        }
        v456 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v455 - 1) + 9) & 1;
        *(_BYTE *)(v454 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v454, a1 + 7368, 0, v456, v447, v448, v449, v450);
        v457 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
        if (v457)
        {
          v462 = v457;
          *(_BYTE *)(v457 + 24) = 1;
          v463 = *(_QWORD *)(v457 + 8);
          v464 = *(_DWORD *)(v457 + 16);
          *(_QWORD *)&v952 = v463;
          DWORD2(v952) = v464;
          v465 = *(_QWORD *)(a1 + 7520);
          if (v465 && (v463 & 0x80000000) == 0)
            JSC::DebuggerPausePositions::appendPause(v465, (uint64_t)&v952);
          v466 = *v17;
          if (*v17 == 3)
          {
            v467 = *(_DWORD *)(a1 + 7400);
            v468 = *(_DWORD *)(a1 + 7412);
            v469 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v467;
            *(_DWORD *)(a1 + 7448) = v468;
            *(_DWORD *)(a1 + 7452) = v469;
            v470 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v470 + 4) = v467;
            v471 = *(_DWORD *)(a1 + 12);
            if (!v471)
            {
              __break(0xC471u);
              JUMPOUT(0x197EF4678);
            }
            v472 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v471 - 1) + 9) & 1;
            *(_BYTE *)(v470 + 56) = 0;
            v473 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v470, a1 + 7368, 0, v472, v458, v459, v460, v461);
            *(_DWORD *)(a1 + 7368) = v473;
            if (!v473)
            {
              v478 = *(_DWORD *)(a1 + 7400);
              v479 = *(_DWORD *)(a1 + 7412);
              v480 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v478;
              *(_DWORD *)(a1 + 7448) = v479;
              *(_DWORD *)(a1 + 7452) = v480;
              v481 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v481 + 4) = v478;
              v482 = *(_DWORD *)(a1 + 12);
              if (!v482)
              {
                __break(0xC471u);
                JUMPOUT(0x197EF46A0);
              }
              v483 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v482 - 1) + 9) & 1;
              *(_BYTE *)(v481 + 56) = 0;
              *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v481, a1 + 7368, 0, v483, v474, v475, v476, v477);
              v484 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
              if (*(_DWORD *)(v484 + 12) <= v485)
              {
                __break(0xC471u);
                JUMPOUT(0x197EF46A8);
              }
              *(_DWORD *)(*(_QWORD *)v484 + 720 * v485 + 10) |= 0x8080u;
              if (*(_DWORD *)(v484 + 12) <= v485)
              {
                __break(0xC471u);
                JUMPOUT(0x197EF46B0);
              }
              *(_DWORD *)(*(_QWORD *)v484 + 720 * v485 + 10) &= ~0x40u;
              v492 = *(_DWORD *)(a1 + 12);
              if (!v492)
              {
                __break(0xC471u);
                JUMPOUT(0x197EF46B8);
              }
              v493 = *(_QWORD *)a1 + 720 * (v492 - 1);
              ++*(_DWORD *)(v493 + 28);
              v924 = JSC::Parser<JSC::Lexer<char16_t>>::parseSwitchClauses<JSC::ASTBuilder>(a1, a2, v486, v487, v488, v489, v490, v491);
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_572;
              if (*v17 != 517)
              {
                v517 = 0;
                goto LABEL_444;
              }
              v500 = *(_DWORD *)(a1 + 7408);
              v501 = *(_DWORD *)(a1 + 7400);
              v502 = *(_DWORD *)(a1 + 7412);
              v503 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v501;
              *(_DWORD *)(a1 + 7448) = v502;
              *(_DWORD *)(a1 + 7452) = v503;
              v504 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v504 + 4) = v501;
              v505 = *(_DWORD *)(a1 + 12);
              if (!v505)
              {
                __break(0xC471u);
                JUMPOUT(0x197EF46E8);
              }
              v506 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v505 - 1) + 9) & 1;
              *(_BYTE *)(v504 + 56) = 0;
              v507 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v504, a1 + 7368, 0, v506, v496, v497, v498, v499);
              *(_DWORD *)(a1 + 7368) = v507;
              if (v507 == 18)
              {
                v508 = *(_DWORD *)(a1 + 7400);
                v509 = *(_DWORD *)(a1 + 7412);
                v510 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v508;
                *(_DWORD *)(a1 + 7448) = v509;
                *(_DWORD *)(a1 + 7452) = v510;
                v511 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v511 + 4) = v508;
                v512 = *(_DWORD *)(a1 + 12);
                if (!v512)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EF46F0);
                }
                v513 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v512 - 1) + 9) & 1;
                *(_BYTE *)(v511 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v511, a1 + 7368, 0, v513, v496, v497, v498, v499);
                v514 = JSC::Parser<JSC::Lexer<char16_t>>::parseSourceElements<JSC::ASTBuilder>(a1, a2, 1);
                if (v514)
                {
                  v515 = v514;
                  v516 = *(uint64_t **)(a2 + 8);
                  v517 = *v516;
                  if ((unint64_t)(v516[1] - *v516) <= 0x17)
                  {
                    v891 = *(JSC::ParserArena **)(a2 + 8);
                    JSC::ParserArena::allocateFreeablePool(v891);
                    v516 = (uint64_t *)v891;
                    v517 = *(_QWORD *)v891;
                  }
                  *v516 = v517 + 24;
                  *(_QWORD *)v517 = 0;
                  *(_QWORD *)(v517 + 8) = v515;
                  *(_DWORD *)(v517 + 16) = v500;
LABEL_325:
                  v17 = (int *)(a1 + 7368);
                  if (*(_QWORD *)(a1 + 7360))
                    goto LABEL_572;
LABEL_444:
                  v698 = JSC::Parser<JSC::Lexer<char16_t>>::parseSwitchClauses<JSC::ASTBuilder>(a1, a2, v494, v495, v496, v497, v498, v499);
                  if (!*(_QWORD *)(a1 + 7360))
                  {
                    v699 = *(_DWORD *)(a1 + 12);
                    if (!v699)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197EF46C0);
                    }
                    v700 = v699 - 1;
                    v701 = *(_QWORD *)a1;
                    --*(_DWORD *)(*(_QWORD *)a1 + 720 * v700 + 28);
                    v702 = *(_DWORD *)(a1 + 7368);
                    if (v702 != 1)
                    {
                      if (v702 == 20 || (v702 & 0x100000) != 0)
                        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
                      else
                        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[19]>(a1);
                      goto LABEL_572;
                    }
                    v703 = (uint64_t)v698;
                    v704 = *(_DWORD *)(a1 + 7400);
                    v705 = *(_DWORD *)(a1 + 7412);
                    v706 = *(_DWORD *)(a1 + 7404);
                    *(_DWORD *)(a1 + 7444) = v704;
                    *(_DWORD *)(a1 + 7448) = v705;
                    *(_DWORD *)(a1 + 7452) = v706;
                    v707 = *(_QWORD *)(a1 + 7288);
                    *(_DWORD *)(v707 + 4) = v704;
                    v708 = *(_BYTE *)(v701 + 720 * v700 + 9) & 1;
                    *(_BYTE *)(v707 + 56) = 0;
                    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v707, (uint64_t)v17, 0, v708, v496, v497, v498, v499);
                    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v952, (uint64_t *)a1, 1, v709, v710, v711, v712, v713);
                    SwitchStatement = JSC::ASTBuilder::createSwitchStatement(a2, (uint64_t)v939, v462, (uint64_t)v924, v517, v703, v440, v467, (uint64_t *)&v952, (uint64_t *)&v954);
                    v714 = v954;
                    if (v954)
                    {
                      v954 = 0;
                      LODWORD(v955) = 0;
                      WTF::fastFree(v714, v532, v533, v534, v535, v536, v537, v538);
                    }
                    v626 = (WTF **)&v952;
                    goto LABEL_371;
                  }
LABEL_572:
                  JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v952, (uint64_t *)a1, 0, v495, v496, v497, v498, v499);
                  v802 = v954;
                  if (v954)
                  {
                    v954 = 0;
                    LODWORD(v955) = 0;
                    WTF::fastFree(v802, v795, v796, v797, v798, v799, v800, v801);
                  }
                  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v952, (WTF::AtomStringImpl *)v795, v796, v797, v798, v799, v800, v801);
                  goto LABEL_533;
                }
                v853 = *(_DWORD *)(a1 + 7368);
                if (v853 != 20 && (v853 & 0x100000) == 0)
                {
                  if (*(_QWORD *)(a1 + 7360))
                    goto LABEL_572;
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of a switch default clause");
                  goto LABEL_810;
                }
              }
              else if (v507 != 20 && (v507 & 0x100000) == 0)
              {
                if (*(_QWORD *)(a1 + 7360))
                  goto LABEL_572;
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ':' after switch default clause");
                goto LABEL_810;
              }
              JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_810:
              v517 = 0;
              goto LABEL_325;
            }
            if (v473 == 20 || (v473 & 0x100000) != 0)
              goto LABEL_532;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[19]>(a1);
          }
          else
          {
            if (v466 == 20 || (v466 & 0x100000) != 0)
              goto LABEL_532;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[22]>(a1);
          }
        }
        else
        {
          if (*v17 == 20 || (*v17 & 0x100000) != 0)
            goto LABEL_532;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse switch subject expression");
        }
      }
      else
      {
        if (v446 == 20 || (v446 & 0x100000) != 0)
          goto LABEL_532;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[22]>(a1);
      }
      goto LABEL_533;
    case 530:
      JSC::Parser<JSC::Lexer<char16_t>>::parseWithStatement<JSC::ASTBuilder>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_520:
      SwitchStatement = v775;
      goto LABEL_46;
    case 533:
      v275 = (_DWORD *)(a1 + 7368);
      v276 = *(_DWORD *)(a1 + 7400);
      v277 = *(_DWORD *)(a1 + 7404);
      v278 = *(_DWORD *)(a1 + 7416);
      v279 = *(_DWORD *)(a1 + 7420);
      v280 = *(_DWORD *)(a1 + 7424);
      v281 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v276;
      *(_DWORD *)(a1 + 7448) = v281;
      *(_DWORD *)(a1 + 7452) = v277;
      v282 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v282 + 4) = v276;
      v283 = *(_DWORD *)(a1 + 12);
      if (!v283)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4578);
      }
      v284 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v283 - 1) + 9) & 1;
      *(_BYTE *)(v282 + 56) = 0;
      v285 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v282, a1 + 7368, 0, v284, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v285;
      if (v285 == 1)
        goto LABEL_441;
      if (v285 == 17)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected expression after 'throw'");
        goto LABEL_149;
      }
      if (v285 == 20 || *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
      {
LABEL_441:
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot have a newline after 'throw'");
        goto LABEL_149;
      }
      v286 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
      if (v286)
      {
        v291 = v286;
        v292 = *(_DWORD *)(a1 + 7444);
        v293 = *(_QWORD *)(a1 + 7448);
        v294 = *(_DWORD *)(a1 + 7368);
        if (v294 == 17)
        {
          v295 = *(_DWORD *)(a1 + 7400);
          v296 = *(_DWORD *)(a1 + 7412);
          v297 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v295;
          *(_DWORD *)(a1 + 7448) = v296;
          *(_DWORD *)(a1 + 7452) = v297;
          v298 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v298 + 4) = v295;
          v299 = *(_DWORD *)(a1 + 12);
          if (!v299)
          {
            __break(0xC471u);
            JUMPOUT(0x197EF45B0);
          }
          v300 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v299 - 1) + 9) & 1;
          *(_BYTE *)(v298 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v298, a1 + 7368, 0, v300, v287, v288, v289, v290);
        }
        else if (v294 != 1 && v294 != 20 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
        {
          if ((v294 & 0x100000) != 0)
            goto LABEL_148;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' after a throw statement");
          goto LABEL_149;
        }
        v301 = *(uint64_t **)(a2 + 8);
        SwitchStatement = *v301;
        if ((unint64_t)(v301[1] - *v301) <= 0x57)
        {
          JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v301);
          SwitchStatement = *v301;
        }
        *v301 = SwitchStatement + 88;
        *(_BYTE *)(SwitchStatement + 24) = 0;
        *(_QWORD *)(SwitchStatement + 32) = 0;
        *(_QWORD *)SwitchStatement = &off_1E358A700;
        *(_QWORD *)(SwitchStatement + 80) = v291;
        *(_DWORD *)(SwitchStatement + 28) = v292;
        *(_DWORD *)(SwitchStatement + 8) = v278;
        *(_DWORD *)(SwitchStatement + 12) = v279;
        *(_DWORD *)(SwitchStatement + 16) = v280;
        *(_DWORD *)(SwitchStatement + 20) = -1;
        *(_DWORD *)(SwitchStatement + 40) = v292;
        *(_QWORD *)(SwitchStatement + 44) = v293;
        *(_DWORD *)(SwitchStatement + 52) = v278;
        *(_DWORD *)(SwitchStatement + 56) = v279;
        *(_DWORD *)(SwitchStatement + 60) = v280;
        *(_DWORD *)(SwitchStatement + 64) = v292;
        *(_QWORD *)(SwitchStatement + 68) = v293;
LABEL_31:
        *(_DWORD *)(SwitchStatement + 20) = *(_DWORD *)(a1 + 7448);
        goto LABEL_32;
      }
      if (*v275 == 20 || (*v275 & 0x100000) != 0)
        goto LABEL_148;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_149;
      v248 = "Cannot parse expression for throw statement";
      goto LABEL_744;
    case 534:
      v942 = *(_OWORD *)(a1 + 7400);
      v518 = *(_DWORD *)(a1 + 7400);
      v519 = *(_DWORD *)(a1 + 7412);
      v520 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v518;
      *(_DWORD *)(a1 + 7448) = v519;
      *(_DWORD *)(a1 + 7452) = v520;
      v521 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v521 + 4) = v518;
      v522 = *(_DWORD *)(a1 + 12);
      if (!v522)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4648);
      }
      v523 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v522 - 1) + 9) & 1;
      *(_BYTE *)(v521 + 56) = 0;
      v524 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v521, a1 + 7368, 0, v523, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v524;
      if (v524)
      {
        if (v524 != 20 && (v524 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a block statement as body of a try statement");
          goto LABEL_533;
        }
      }
      else
      {
        v530 = *(_DWORD *)(a1 + 7308);
        v531 = (_QWORD *)JSC::Parser<JSC::Lexer<char16_t>>::parseBlockStatement<JSC::ASTBuilder>(a1, a2, 0, v525, v526, v527, v528, v529);
        if (v531)
        {
          v539 = *(_DWORD *)(a1 + 7308);
          v540 = *(_DWORD *)(a1 + 7444);
          v939[0] = 0;
          LOBYTE(v939[1]) = 0;
          v940 = 0;
          v541 = *(_DWORD *)(a1 + 7368);
          v924 = v531;
          v925 = a1 + 7368;
          LODWORD(v923) = v540;
          if (v541 == 535)
          {
            v542 = *(_DWORD *)(a1 + 7400);
            v543 = *(_DWORD *)(a1 + 7412);
            v544 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v542;
            *(_DWORD *)(a1 + 7448) = v543;
            *(_DWORD *)(a1 + 7452) = v544;
            v545 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v545 + 4) = v542;
            v546 = *(_DWORD *)(a1 + 12);
            if (!v546)
            {
              __break(0xC471u);
              JUMPOUT(0x197EF4668);
            }
            v547 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v546 - 1) + 9) & 1;
            *(_BYTE *)(v545 + 56) = 0;
            v548 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v545, a1 + 7368, 0, v547, v535, v536, v537, v538);
            *(_DWORD *)(a1 + 7368) = v548;
            LODWORD(v922) = v518;
            v919 = v530;
            LODWORD(v918) = v539;
            if (v548 == 2)
            {
              v549 = *(_DWORD *)(a1 + 7400);
              v550 = *(_DWORD *)(a1 + 7412);
              v551 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v549;
              *(_DWORD *)(a1 + 7448) = v550;
              *(_DWORD *)(a1 + 7452) = v551;
              v552 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v552 + 4) = v549;
              v553 = *(_DWORD *)(a1 + 12);
              if (!v553)
              {
                __break(0xC471u);
                JUMPOUT(0x197EF4680);
              }
              v554 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v553 - 1) + 9) & 1;
              *(_BYTE *)(v552 + 56) = 0;
              v555 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v552, a1 + 7368, 0, v554, v535, v536, v537, v538);
              *(_DWORD *)(a1 + 7368) = v555;
              v556 = *(_DWORD *)(a1 + 12);
              if (!v556)
              {
                __break(0xC471u);
                JUMPOUT(0x197EF4688);
              }
              v557 = *(_DWORD *)(a1 + 7456);
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v556 - 1) + 12) & 0x10) != 0 && v555 == 546)
              {
                v785 = *(_DWORD *)(a1 + 7456);
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as identifier within static block");
LABEL_777:
                SwitchStatement = 0;
                *(_DWORD *)(a1 + 7456) = v785;
                goto LABEL_370;
              }
              LODWORD(v921) = *(_DWORD *)(a1 + 7456);
              *(_DWORD *)(a1 + 7456) = v557 + 1;
              v558 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
              v564 = v559;
              if (*(_DWORD *)(v558 + 12) <= v559)
              {
                __break(0xC471u);
                JUMPOUT(0x197EF4690);
              }
              v565 = v558;
              v566 = v559;
              *(_DWORD *)(*(_QWORD *)v558 + 720 * v559 + 10) |= 0x8080u;
              if (*(_DWORD *)(v558 + 12) <= v559)
              {
                __break(0xC471u);
                JUMPOUT(0x197EF4698);
              }
              *(_DWORD *)(*(_QWORD *)v558 + 720 * v559 + 10) &= ~0x40u;
              if (*(_DWORD *)v925 == 12
                || JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, *(_DWORD *)v925, *(_QWORD **)(a1 + 7376))|| JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376))|| *(_DWORD *)v925 == 546|| *(_DWORD *)v925 == 1048592&& **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
              {
                if (*(_DWORD *)(v565 + 12) <= v564)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EF46D0);
                }
                *(_DWORD *)(*(_QWORD *)v565 + 720 * v566 + 10) |= 0x40000u;
                v567 = *(WTF::AtomStringImpl **)(a1 + 7376);
                v568 = *(uint64_t **)(a2 + 8);
                v569 = *v568;
                if ((unint64_t)(v568[1] - *v568) <= 0x2F)
                {
                  JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
                  v569 = *v568;
                }
                *v568 = v569 + 48;
                *(_QWORD *)v569 = &off_1E358B760;
                v570 = *(_QWORD *)(a1 + 7416);
                *(_DWORD *)(v569 + 16) = *(_DWORD *)(a1 + 7424);
                *(_QWORD *)(v569 + 8) = v570;
                v571 = *(_QWORD *)(a1 + 7428);
                *(_DWORD *)(v569 + 28) = *(_DWORD *)(a1 + 7436);
                *(_QWORD *)(v569 + 20) = v571;
                *(_QWORD *)(v569 + 32) = v567;
                v920 = (WTF *)v569;
                *(_BYTE *)(v569 + 40) = 0;
                LODWORD(v571) = *(_DWORD *)(a1 + 7400);
                v572 = *(_DWORD *)(a1 + 7412);
                v573 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v571;
                *(_DWORD *)(a1 + 7448) = v572;
                *(_DWORD *)(a1 + 7452) = v573;
                v574 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v574 + 4) = v571;
                v575 = *(_DWORD *)(a1 + 12);
                if (!v575)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EF46C8);
                }
                v576 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v575 - 1) + 9) & 1;
                *(_BYTE *)(v574 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v574, v925, 0, v576, v560, v561, v562, v563);
                if (*(_DWORD *)(v565 + 12) <= v564)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EF46D8);
                }
                if ((JSC::Scope::declareLexicalVariable(*(_QWORD *)v565 + 720 * v566, v567, 0, v577, v578, v579, v580, v581) & 1) != 0)
                {
                  v842 = *(_DWORD *)(a1 + 12);
                  if (!v842)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EF4758);
                  }
                  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v842 - 1) + 9) & 1) != 0)
                  {
                    v785 = (int)v921;
                    if (!*(_QWORD *)(a1 + 7360))
                    {
                      *(_QWORD *)&v952 = *(_QWORD *)v567;
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[40],WTF::UniquedStringImpl *,char const(&)[17]>(a1, (uint64_t *)&v952);
                    }
                    goto LABEL_774;
                  }
                }
              }
              else
              {
                v920 = (WTF *)JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, 3, 1, 0, 0, 0, 0);
                if (!v920)
                {
                  if (*(_DWORD *)v925 != 20 && (*(_DWORD *)v925 & 0x100000) == 0)
                  {
                    v785 = (int)v921;
                    if (!*(_QWORD *)(a1 + 7360))
                      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse this destructuring pattern");
                    goto LABEL_774;
                  }
                  goto LABEL_773;
                }
                v567 = 0;
              }
              v587 = (int *)v925;
              v588 = *(_DWORD *)v925;
              if (*(_DWORD *)v925 == 3)
              {
                v589 = *(_DWORD *)(a1 + 7400);
                v590 = *(_DWORD *)(a1 + 7412);
                v591 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v589;
                *(_DWORD *)(a1 + 7448) = v590;
                *(_DWORD *)(a1 + 7452) = v591;
                v592 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v592 + 4) = v589;
                v593 = *(_DWORD *)(a1 + 12);
                if (!v593)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EF46E0);
                }
                v594 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v593 - 1) + 9) & 1;
                *(_BYTE *)(v592 + 56) = 0;
                v595 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v592, (uint64_t)v587, 0, v594, v583, v584, v585, v586);
                *(_DWORD *)(a1 + 7368) = v595;
                if (v595)
                {
                  if (v595 != 20 && (v595 & 0x100000) == 0)
                  {
                    v785 = (int)v921;
                    if (!*(_QWORD *)(a1 + 7360))
                      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected exception handler to be a block statement");
                    goto LABEL_774;
                  }
                }
                else
                {
                  v596 = JSC::Parser<JSC::Lexer<char16_t>>::parseBlockStatement<JSC::ASTBuilder>(a1, a2, 1, v582, v583, v584, v585, v586);
                  if (v596)
                  {
                    v597 = v596;
                    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v952, (uint64_t *)a1, 1, v582, v583, v584, v585, v586);
                    JSC::VariableEnvironment::operator=((uint64_t)v939, (uint64_t)&v952, v598, v599, v600, v601, v602, v603);
                    v604 = v954;
                    v954 = 0;
                    v955 = 0;
                    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v952, v605, v606, v607, v608, v609, v610, v611);
                    if (v567)
                    {
                      if (v939[0])
                        v612 = *((_DWORD *)v939[0] - 3);
                      else
                        v612 = 0;
                      LODWORD(v613) = (_DWORD)v940;
                      if (v940)
                      {
                        v613 = *(_QWORD *)v940;
                        if (*(_QWORD *)v940)
                          LODWORD(v613) = *(_DWORD *)(v613 - 12);
                      }
                      if ((_DWORD)v613 + v612 == 1)
                      {
                        v614 = *(WTF::StringImpl **)v567;
                        if (*(_QWORD *)v567)
                        {
                          v615 = *(_DWORD *)v614;
                          *(_DWORD *)v614 += 2;
                          v616 = WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::contains((uint64_t)v939[0], (uint64_t)v614);
                          v617 = v616;
                          if (v615)
                          {
                            *(_DWORD *)v614 = v615;
                            if ((v616 & 1) != 0)
                              goto LABEL_357;
                          }
                          else
                          {
                            WTF::StringImpl::~StringImpl(v614, (WTF::AtomStringImpl *)v532, v533, v534, v535, v536, v537, v538);
                            WTF::fastFree(v776, v777, v778, v779, v780, v781, v782, v783);
                            if ((v617 & 1) != 0)
                              goto LABEL_357;
                          }
                        }
                        else if ((WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::contains((uint64_t)v939[0], 0) & 1) != 0)
                        {
                          goto LABEL_357;
                        }
                      }
                      __break(0xC471u);
                      JUMPOUT(0x197EF2DC0);
                    }
LABEL_357:
                    *(_DWORD *)(a1 + 7456) = (_DWORD)v921;
                    v618 = *(_DWORD *)(a1 + 7368);
                    goto LABEL_358;
                  }
                  if (*(_DWORD *)v925 != 20 && (*(_DWORD *)v925 & 0x100000) == 0)
                  {
                    v785 = (int)v921;
                    if (!*(_QWORD *)(a1 + 7360))
                      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Unable to parse 'catch' block");
                    goto LABEL_774;
                  }
                }
              }
              else if (v588 != 20 && (v588 & 0x100000) == 0)
              {
                v785 = (int)v921;
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[15]>(a1);
                goto LABEL_774;
              }
LABEL_773:
              JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
              v785 = (int)v921;
LABEL_774:
              JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v952, (uint64_t *)a1, 0, v582, v583, v584, v585, v586);
              v850 = v954;
              if (v954)
              {
                v954 = 0;
                LODWORD(v955) = 0;
                WTF::fastFree(v850, v843, v844, v845, v846, v847, v848, v849);
              }
              JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v952, (WTF::AtomStringImpl *)v843, v844, v845, v846, v847, v848, v849);
              goto LABEL_777;
            }
            if (v548)
            {
              if (v548 != 20 && (v548 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[15]>(a1);
                goto LABEL_684;
              }
            }
            else
            {
              v794 = JSC::Parser<JSC::Lexer<char16_t>>::parseBlockStatement<JSC::ASTBuilder>(a1, a2, 0, v534, v535, v536, v537, v538);
              v618 = *(_DWORD *)(a1 + 7368);
              if (v794)
              {
                v597 = v794;
                v604 = 0;
                v920 = 0;
LABEL_358:
                v518 = v922;
                if (v618 != 536)
                {
                  if ((_DWORD)v918 == v919)
                    goto LABEL_360;
                  v715 = *(_DWORD *)(a1 + 12);
                  if (!v715)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EF46F8);
                  }
                  v716 = *(_DWORD *)(a1 + 12);
                  while (1)
                  {
                    v717 = v716;
                    if (v716 == 1)
                      break;
                    --v716;
                    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v717 - 1) + 12) & 0x40) != 0)
                      goto LABEL_462;
                  }
                  v716 = 0;
LABEL_462:
                  if (v715 <= v717 - 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EF4700);
                  }
                  if (*(_BYTE *)(*(_QWORD *)a1 + 720 * v716 + 15) != 2)
                  {
LABEL_360:
                    v619 = 0;
LABEL_361:
                    v620 = *(_QWORD *)(a2 + 8);
                    SwitchStatement = *(_QWORD *)v620;
                    if (*(_QWORD *)(v620 + 8) - *(_QWORD *)v620 <= 0x77uLL)
                    {
                      JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v620);
                      SwitchStatement = *(_QWORD *)v620;
                    }
                    *(_QWORD *)v620 = SwitchStatement + 120;
                    v621 = SwitchStatement + 40;
                    if (!SwitchStatement)
                      v621 = 0;
                    *(_QWORD *)&v952 = v621;
                    v622 = *(unsigned int *)(v620 + 52);
                    if ((_DWORD)v622 == *(_DWORD *)(v620 + 48))
                    {
                      WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserArenaDeletable *&>(v620 + 40, (unint64_t)&v952);
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)(v620 + 40) + 8 * v622) = v621;
                      *(_DWORD *)(v620 + 52) = v622 + 1;
                    }
                    *(_DWORD *)(SwitchStatement + 20) = -1;
                    *(_BYTE *)(SwitchStatement + 24) = 0;
                    v623 = v939[0];
                    *(_BYTE *)(SwitchStatement + 56) = v939[1];
                    v624 = v940;
                    v939[0] = 0;
                    v940 = 0;
                    *(_QWORD *)(SwitchStatement + 64) = v624;
                    *(_QWORD *)(SwitchStatement + 72) = 0;
                    *(_QWORD *)SwitchStatement = &off_1E358A7A0;
                    *(_QWORD *)(SwitchStatement + 32) = 0;
                    *(_QWORD *)(SwitchStatement + 40) = &unk_1E358A840;
                    *(_QWORD *)(SwitchStatement + 48) = v623;
                    v625 = v924;
                    *(_QWORD *)(SwitchStatement + 80) = 0;
                    *(_QWORD *)(SwitchStatement + 88) = v625;
                    *(_QWORD *)(SwitchStatement + 96) = v920;
                    *(_QWORD *)(SwitchStatement + 104) = v597;
                    *(_QWORD *)(SwitchStatement + 112) = v619;
                    *(_DWORD *)(SwitchStatement + 28) = (_DWORD)v923;
                    *(_DWORD *)(SwitchStatement + 8) = v518;
                    *(int32x2_t *)(SwitchStatement + 12) = vrev64_s32(*(int32x2_t *)((char *)&v942 + 4));
                    goto LABEL_368;
                  }
                  JSC::ASTBuilder::createEmptyStatement(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v942);
LABEL_594:
                  v619 = v718;
                  goto LABEL_361;
                }
LABEL_591:
                v805 = *(_DWORD *)(a1 + 7400);
                v806 = *(_DWORD *)(a1 + 7412);
                v807 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v805;
                *(_DWORD *)(a1 + 7448) = v806;
                *(_DWORD *)(a1 + 7452) = v807;
                v808 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v808 + 4) = v805;
                v809 = *(_DWORD *)(a1 + 12);
                if (!v809)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EF4730);
                }
                v810 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v809 - 1) + 9) & 1;
                *(_BYTE *)(v808 + 56) = 0;
                v811 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v808, v925, 0, v810, v535, v536, v537, v538);
                *(_DWORD *)(a1 + 7368) = v811;
                if (v811)
                {
                  if (v811 != 20 && (v811 & 0x100000) == 0)
                  {
                    if (!*(_QWORD *)(a1 + 7360))
                      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected block statement for finally body");
                    goto LABEL_783;
                  }
                }
                else
                {
                  v718 = JSC::Parser<JSC::Lexer<char16_t>>::parseBlockStatement<JSC::ASTBuilder>(a1, a2, 0, v534, v535, v536, v537, v538);
                  if (v718)
                    goto LABEL_594;
                  if (*(_DWORD *)v925 != 20 && (*(_DWORD *)v925 & 0x100000) == 0)
                  {
                    if (!*(_QWORD *)(a1 + 7360))
                      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse finally body");
                    goto LABEL_783;
                  }
                }
                JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_783:
                SwitchStatement = 0;
LABEL_368:
                if (v604)
                  WTF::fastFree(v604, v532, v533, v534, v535, v536, v537, v538);
                goto LABEL_370;
              }
              if (v618 != 20 && (v618 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Unable to parse 'catch' block");
                goto LABEL_684;
              }
            }
          }
          else
          {
            if (v541 == 536)
            {
              v597 = 0;
              v920 = 0;
              v604 = 0;
              goto LABEL_591;
            }
            if (v541 != 20 && (v541 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Try statements must have at least a catch or finally block");
              goto LABEL_684;
            }
          }
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_684:
          SwitchStatement = 0;
LABEL_370:
          v626 = v939;
LABEL_371:
          JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v626, (WTF::AtomStringImpl *)v532, v533, v534, v535, v536, v537, v538);
LABEL_46:
          v18 = 0;
          goto LABEL_5;
        }
        if (*v17 != 20 && (*v17 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of try block");
          goto LABEL_533;
        }
      }
LABEL_532:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_533:
      SwitchStatement = 0;
      goto LABEL_46;
    case 537:
      JSC::Parser<JSC::Lexer<char16_t>>::parseDebuggerStatement<JSC::ASTBuilder>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_408;
    case 544:
    case 545:
    case 546:
LABEL_12:
      v19 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpressionOrLabelStatement<JSC::ASTBuilder>(a1, a2, 0);
      SwitchStatement = v19;
      if (!v19)
        goto LABEL_33;
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 96))(v19);
      *(_DWORD *)(SwitchStatement + 20) = *(_DWORD *)(a1 + 7448);
      if ((v20 & 1) != 0)
        goto LABEL_33;
      goto LABEL_32;
    default:
      switch(v16)
      {
        case 12:
          goto LABEL_12;
        case 13:
        case 15:
        case 16:
        case 18:
        case 19:
          goto LABEL_96;
        case 14:
          *a3 = *(_QWORD *)(a1 + 7376);
          if (a4)
            *a4 = *(_DWORD *)(a1 + 7412) - *(_DWORD *)(a1 + 7408);
          v14 = *(_DWORD *)(a1 + 7304);
          goto LABEL_96;
        case 17:
          v653 = *(_DWORD *)(a1 + 7400);
          v654 = *(_DWORD *)(a1 + 7404);
          v655 = *(_DWORD *)(a1 + 7408);
          v656 = *(_DWORD *)(a1 + 7412);
          *(_DWORD *)(a1 + 7444) = v653;
          *(_DWORD *)(a1 + 7448) = v656;
          *(_DWORD *)(a1 + 7452) = v654;
          v657 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v657 + 4) = v653;
          v658 = *(_DWORD *)(a1 + 12);
          if (!v658)
          {
            __break(0xC471u);
            JUMPOUT(0x197EF4670);
          }
          v659 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v658 - 1) + 9) & 1;
          *(_BYTE *)(v657 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v657, a1 + 7368, 0, v659, a5, a6, a7, a8);
          v660 = *(uint64_t **)(a2 + 8);
          SwitchStatement = *v660;
          if ((unint64_t)(v660[1] - *v660) <= 0x27)
          {
            JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v660);
            SwitchStatement = *v660;
          }
          *v660 = SwitchStatement + 40;
          *(_DWORD *)(SwitchStatement + 8) = v653;
          *(_DWORD *)(SwitchStatement + 12) = v655;
          *(_DWORD *)(SwitchStatement + 16) = v654;
          *(_BYTE *)(SwitchStatement + 24) = 0;
          *(_DWORD *)(SwitchStatement + 28) = -1;
          *(_QWORD *)(SwitchStatement + 32) = 0;
          *(_QWORD *)SwitchStatement = &off_1E3589878;
          goto LABEL_31;
        case 20:
          goto LABEL_33;
        default:
          if (v16 != 1048592)
            goto LABEL_96;
          if (JSC::Parser<JSC::Lexer<unsigned char>>::matchAllowedEscapedContextualKeyword(a1))
            goto LABEL_12;
          goto LABEL_148;
      }
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseExpressionStatement<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t result;
  uint64_t v31;
  int v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  char v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  char v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  int v95;
  _BYTE *v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;

  v10 = (char *)(a1 + 7344);
  v11 = a1 + 7368;
  v12 = *(_DWORD *)(a1 + 7368);
  switch(v12)
  {
    case 12:
      if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896)
        || *(_BYTE *)(a1 + 7384))
      {
        break;
      }
      v31 = a1 + 7296;
      v99 = *(_OWORD *)(a1 + 7296);
      v98 = *(_QWORD *)(a1 + 7336);
      v97 = *(_OWORD *)(a1 + 7320);
      v94 = *v10;
      v95 = *(_DWORD *)(a1 + 7316);
      v96 = (_BYTE *)(a1 + 7344);
      v93 = *(_BYTE *)(a1 + 7345);
      v32 = *(_DWORD *)(a2 + 1052);
      v33 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
      v34 = *(unsigned int *)(a1 + 7404);
      v35 = *(_QWORD *)(a1 + 7288);
      v37 = *(_DWORD *)v35;
      v36 = *(_DWORD *)(v35 + 4);
      v38 = *(_BYTE *)(v35 + 56);
      v39 = *(_DWORD *)(a1 + 7400);
      v40 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v39;
      *(_DWORD *)(a1 + 7448) = v40;
      *(_DWORD *)(a1 + 7452) = v34;
      *(_DWORD *)(v35 + 4) = v39;
      v41 = *(_DWORD *)(a1 + 12);
      if (!v41)
      {
LABEL_43:
        __break(0xC471u);
        JUMPOUT(0x197EF4AD4);
      }
      v42 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v41 - 1) + 9) & 1;
      *(_BYTE *)(v35 + 56) = 0;
      v48 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v35, v11, 0, v42, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v48;
      v49 = *(_QWORD *)(a1 + 7288);
      if (v48 == 523 && !*(_BYTE *)(v49 + 56))
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot use async function declaration in single-statement context");
        return 0;
      }
      JSC::Lexer<char16_t>::setOffset(v49, v33, v34, v43, v44, v45, v46, v47);
      v54 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v54 = v37;
      *(_BYTE *)(v54 + 56) = v38;
      v55 = *(_DWORD *)(a1 + 7400);
      v56 = *(_DWORD *)(a1 + 7412);
      v57 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v55;
      *(_DWORD *)(a1 + 7448) = v56;
      *(_DWORD *)(a1 + 7452) = v57;
      *(_DWORD *)(v54 + 4) = v55;
      v58 = *(_DWORD *)(a1 + 12);
      if (!v58)
        goto LABEL_43;
      goto LABEL_34;
    case 544:
      v31 = a1 + 7296;
      v99 = *(_OWORD *)(a1 + 7296);
      v98 = *(_QWORD *)(a1 + 7336);
      v97 = *(_OWORD *)(a1 + 7320);
      v94 = *v10;
      v95 = *(_DWORD *)(a1 + 7316);
      v96 = (_BYTE *)(a1 + 7344);
      v93 = *(_BYTE *)(a1 + 7345);
      v32 = *(_DWORD *)(a2 + 1052);
      v59 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
      v60 = *(unsigned int *)(a1 + 7404);
      v61 = *(_QWORD *)(a1 + 7288);
      v62 = *(_DWORD *)v61;
      v36 = *(_DWORD *)(v61 + 4);
      v63 = *(_BYTE *)(v61 + 56);
      v64 = *(_DWORD *)(a1 + 7400);
      v65 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v64;
      *(_DWORD *)(a1 + 7448) = v65;
      *(_DWORD *)(a1 + 7452) = v60;
      *(_DWORD *)(v61 + 4) = v64;
      v66 = *(_DWORD *)(a1 + 12);
      if (!v66)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4CC8);
      }
      v67 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v66 - 1) + 9) & 1;
      *(_BYTE *)(v61 + 56) = 0;
      v68 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v61, v11, 0, v67, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v68;
      if (v68 == 4)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot use lexical declaration in single-statement context");
        return 0;
      }
      JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), v59, v60, v69, v70, v71, v72, v73);
      v54 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v54 = v62;
      *(_BYTE *)(v54 + 56) = v63;
      v74 = *(_DWORD *)(a1 + 7400);
      v75 = *(_DWORD *)(a1 + 7412);
      v76 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v74;
      *(_DWORD *)(a1 + 7448) = v75;
      *(_DWORD *)(a1 + 7452) = v76;
      *(_DWORD *)(v54 + 4) = v74;
      v58 = *(_DWORD *)(a1 + 12);
      if (!v58)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF4CD0);
      }
LABEL_34:
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v54, v11, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v58 - 1) + 9) & 1, v50, v51, v52, v53);
      *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v36;
      *(_OWORD *)v31 = v99;
      *(_DWORD *)(a1 + 7312) = v32;
      *(_DWORD *)(a1 + 7316) = v95;
      *(_OWORD *)(v31 + 24) = v97;
      *(_QWORD *)(v31 + 40) = v98;
      *v96 = v94;
      v96[1] = v93;
      *(_DWORD *)(a2 + 1052) = v32;
      v84 = *(WTF::StringImpl **)(a1 + 7360);
      *(_QWORD *)(a1 + 7360) = 0;
      if (v84)
      {
        if (*(_DWORD *)v84 == 2)
        {
          WTF::StringImpl::~StringImpl(v84, v77, v78, v79, v80, v81, v82, v83);
          WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
        }
        else
        {
          *(_DWORD *)v84 -= 2;
        }
      }
      break;
    case 541:
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "'class' declaration is not directly within a block statement");
      return 0;
  }
  v13 = *(_QWORD *)(a1 + 7416);
  v14 = *(_DWORD *)(a1 + 7424);
  v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
  v20 = *(_DWORD *)(a1 + 7368);
  if (!v15)
  {
    if (v20 != 20 && (v20 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse expression statement");
      return 0;
    }
LABEL_13:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return 0;
  }
  v21 = v15;
  if (v20 == 17)
  {
    v22 = *(_DWORD *)(a1 + 7400);
    v23 = *(_DWORD *)(a1 + 7412);
    v24 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v22;
    *(_DWORD *)(a1 + 7448) = v23;
    *(_DWORD *)(a1 + 7452) = v24;
    v25 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v25 + 4) = v22;
    v26 = *(_DWORD *)(a1 + 12);
    if (!v26)
    {
      __break(0xC471u);
      JUMPOUT(0x197EF4CC0);
    }
    v27 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 9) & 1;
    *(_BYTE *)(v25 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v25, v11, 0, v27, v16, v17, v18, v19);
    goto LABEL_7;
  }
  if (v20 != 1 && v20 != 20 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
    goto LABEL_13;
LABEL_7:
  v28 = *(_DWORD *)(a1 + 7444);
  v29 = *(uint64_t **)(a2 + 8);
  result = *v29;
  if ((unint64_t)(v29[1] - *v29) <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    result = *v29;
  }
  *v29 = result + 48;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)result = &off_1E35899B8;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = v21;
  *(_DWORD *)(result + 28) = v28;
  *(_QWORD *)(result + 8) = v13;
  *(_DWORD *)(result + 16) = v14;
  *(_DWORD *)(result + 20) = -1;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionDeclarationStatement<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, char a3)
{
  int v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  int v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  __int128 v55;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  WTF *v67[2];
  uint64_t v68;
  uint64_t v69;

  v3 = *(_DWORD *)(a1 + 12);
  if (!v3)
    goto LABEL_52;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v3 - 1) + 9) & 1) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[89]>(a1);
    return 0;
  }
  if ((a3 & 1) == 0)
  {
    v29 = *(_DWORD *)(a1 + 7368);
    if (v29 == 20 || (v29 & 0x100000) != 0)
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[96]>(a1);
    }
    return 0;
  }
  v6 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  if (*(_DWORD *)(v6 + 12) <= v7)
  {
    __break(0xC471u);
    JUMPOUT(0x197EF50A8);
  }
  *(_DWORD *)(*(_QWORD *)v6 + 720 * v7 + 10) |= 0x8080u;
  if (*(_DWORD *)(v6 + 12) <= v7)
  {
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x197EF50A0);
  }
  *(_DWORD *)(*(_QWORD *)v6 + 720 * v7 + 10) &= ~0x40u;
  v10 = *(_DWORD *)(a1 + 7400);
  v11 = *(_DWORD *)(a1 + 7404);
  v12 = *(_DWORD *)(a1 + 7408);
  v13 = JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionDeclaration<JSC::ASTBuilder>(a1, a2, 1, 1, 0, 0, v8, v9);
  if (*(_QWORD *)(a1 + 7360))
  {
LABEL_21:
    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v65, (uint64_t *)a1, 0, v14, v15, v16, v17, v18);
    v38 = v67[1];
    if (v67[1])
    {
      v67[1] = 0;
      LODWORD(v68) = 0;
      WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v65, (WTF::AtomStringImpl *)v31, v32, v33, v34, v35, v36, v37);
    return 0;
  }
  v19 = v13;
  if (!v13)
  {
    v30 = *(_DWORD *)(a1 + 7368);
    if (v30 == 20 || (v30 & 0x100000) != 0)
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    else
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected valid function statement after 'function' keyword");
    goto LABEL_21;
  }
  v20 = *(_QWORD *)(a2 + 8);
  v22 = *(_QWORD **)v20;
  v21 = *(_QWORD *)(v20 + 8);
  if ((unint64_t)(v21 - *(_QWORD *)v20) <= 0xF)
  {
    if (v21)
    {
      v57 = (_QWORD *)(v20 + 24);
      v58 = v21 - 8000;
      v65 = v21 - 8000;
      v59 = *(unsigned int *)(v20 + 36);
      if ((_DWORD)v59 == *(_DWORD *)(v20 + 32))
      {
        v63 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v57, v59 + 1, (unint64_t)&v65);
        v59 = *(unsigned int *)(v20 + 36);
        *(_QWORD *)(*(_QWORD *)(v20 + 24) + 8 * v59) = *v63;
      }
      else
      {
        *(_QWORD *)(*v57 + 8 * v59) = v58;
      }
      *(_DWORD *)(v20 + 36) = v59 + 1;
    }
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x1F40);
    *(_QWORD *)(v20 + 8) = v22 + 1000;
  }
  *(_QWORD *)v20 = v22 + 2;
  *v22 = 0;
  v22[1] = 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19) & 1) == 0)
  {
    if (*v22)
    {
      v28 = v22 + 1;
      *(_QWORD *)(v22[1] + 32) = v19;
    }
    else
    {
      *v22 = v19;
      v28 = v22 + 1;
    }
    *v28 = v19;
  }
  JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)&v65, (uint64_t *)a1, 1, v23, v24, v25, v26, v27);
  v47 = *(_DWORD *)(a1 + 7444);
  v48 = *(_QWORD *)(a2 + 8);
  v39 = *(_QWORD *)v48;
  v49 = *(_QWORD *)(v48 + 8);
  if ((unint64_t)(v49 - *(_QWORD *)v48) <= 0x5F)
  {
    if (v49)
    {
      v60 = (_QWORD *)(v48 + 24);
      v61 = v49 - 8000;
      v69 = v49 - 8000;
      v62 = *(unsigned int *)(v48 + 36);
      if ((_DWORD)v62 == *(_DWORD *)(v48 + 32))
      {
        v64 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v62 + 1, (unint64_t)&v69);
        v62 = *(unsigned int *)(v48 + 36);
        *(_QWORD *)(*(_QWORD *)(v48 + 24) + 8 * v62) = *v64;
      }
      else
      {
        *(_QWORD *)(*v60 + 8 * v62) = v61;
      }
      *(_DWORD *)(v48 + 36) = v62 + 1;
    }
    v39 = WTF::fastMalloc((WTF *)0x1F40);
    *(_QWORD *)(v48 + 8) = v39 + 8000;
  }
  *(_QWORD *)v48 = v39 + 96;
  if (v39)
    v50 = v39 + 40;
  else
    v50 = 0;
  v69 = v50;
  v51 = (_QWORD *)(v48 + 40);
  v52 = *(unsigned int *)(v48 + 52);
  if ((_DWORD)v52 == *(_DWORD *)(v48 + 48))
  {
    v53 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v51, v52 + 1, (unint64_t)&v69);
    v52 = *(unsigned int *)(v48 + 52);
    *(_QWORD *)(*(_QWORD *)(v48 + 40) + 8 * v52) = *v53;
  }
  else
  {
    *(_QWORD *)(*v51 + 8 * v52) = v50;
  }
  *(_DWORD *)(v48 + 52) = v52 + 1;
  *(_DWORD *)(v39 + 20) = -1;
  *(_BYTE *)(v39 + 24) = 0;
  v54 = v65;
  *(_BYTE *)(v39 + 56) = v66;
  *(_QWORD *)(v39 + 32) = 0;
  v55 = *(_OWORD *)v67;
  v67[0] = 0;
  v67[1] = 0;
  v65 = 0;
  *(_OWORD *)(v39 + 64) = v55;
  *(_QWORD *)&v55 = v68;
  v68 = 0;
  *(_QWORD *)(v39 + 80) = v55;
  *(_QWORD *)v39 = &off_1E358B420;
  *(_QWORD *)(v39 + 40) = &unk_1E358B4C0;
  *(_QWORD *)(v39 + 48) = v54;
  *(_QWORD *)(v39 + 88) = v22;
  *(_DWORD *)(v39 + 28) = v47;
  *(_DWORD *)(v39 + 8) = v10;
  *(_DWORD *)(v39 + 12) = v12;
  *(_DWORD *)(v39 + 16) = v11;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v65, v40, v41, v42, v43, v44, v45, v46);
  return v39;
}

void JSC::Parser<JSC::Lexer<char16_t>>::parseDoWhileStatement<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v74;
  int v75;
  __int128 v76;
  uint64_t v77;

  v9 = *(_DWORD *)(a1 + 7400);
  v10 = *(_DWORD *)(a1 + 7412);
  v11 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v9;
  *(_DWORD *)(a1 + 7448) = v10;
  *(_DWORD *)(a1 + 7452) = v11;
  v12 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v12 + 4) = v9;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    goto LABEL_51;
  }
  v15 = (int *)(a1 + 7368);
  v16 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 9) & 1;
  *(_BYTE *)(v12 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v12, a1 + 7368, 0, v16, a5, a6, a7, a8);
  v77 = 0;
  v17 = *(_DWORD *)(a1 + 12);
  if (!v17)
  {
    __break(0xC471u);
    JUMPOUT(0x197EF5494);
  }
  v18 = *(_QWORD *)a1 + 720 * (v17 - 1);
  ++*(_DWORD *)(v18 + 24);
  v19 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v77, 0);
  v24 = *(_DWORD *)(a1 + 12);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x197EF549CLL);
  }
  v25 = v19;
  v26 = v24 - 1;
  v27 = *(_QWORD *)a1;
  --*(_DWORD *)(*(_QWORD *)a1 + 720 * v26 + 24);
  if (v19)
  {
    v28 = *(_DWORD *)(a1 + 7400);
    v76 = *(_OWORD *)(a1 + 7400);
    v29 = *v15;
    if (*v15 == 528)
    {
      v30 = *(_DWORD *)(a1 + 7412);
      v31 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v28;
      *(_DWORD *)(a1 + 7448) = v30;
      *(_DWORD *)(a1 + 7452) = v31;
      v32 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v32 + 4) = v28;
      v33 = *(_BYTE *)(v27 + 720 * v26 + 9) & 1;
      *(_BYTE *)(v32 + 56) = 0;
      v34 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v32, a1 + 7368, 0, v33, v20, v21, v22, v23);
      *(_DWORD *)(a1 + 7368) = v34;
      if (v34 == 2)
      {
        v39 = *(_DWORD *)(a1 + 7400);
        v40 = *(_DWORD *)(a1 + 7412);
        v41 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v39;
        *(_DWORD *)(a1 + 7448) = v40;
        *(_DWORD *)(a1 + 7452) = v41;
        v42 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v42 + 4) = v39;
        v43 = *(_DWORD *)(a1 + 12);
        if (!v43)
        {
          __break(0xC471u);
          JUMPOUT(0x197EF54A4);
        }
        v44 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v43 - 1) + 9) & 1;
        *(_BYTE *)(v42 + 56) = 0;
        v45 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v42, a1 + 7368, 0, v44, v35, v36, v37, v38);
        *(_DWORD *)(a1 + 7368) = v45;
        if (v45 == 3)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Must provide an expression as a do-while loop condition");
        }
        else
        {
          v46 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
          if (v46)
          {
            v51 = v46;
            *(_BYTE *)(v46 + 24) = 1;
            v52 = *(_QWORD *)(v46 + 8);
            v53 = *(_DWORD *)(v46 + 16);
            v74 = v52;
            v75 = v53;
            v54 = *(_QWORD *)(a1 + 7520);
            if (v54 && (v52 & 0x80000000) == 0)
              JSC::DebuggerPausePositions::appendPause(v54, (uint64_t)&v74);
            v55 = *v15;
            if (*v15 == 3)
            {
              v56 = *(_DWORD *)(a1 + 7400);
              v57 = *(_DWORD *)(a1 + 7412);
              v58 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v56;
              *(_DWORD *)(a1 + 7448) = v57;
              *(_DWORD *)(a1 + 7452) = v58;
              v59 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v59 + 4) = v56;
              v60 = *(_DWORD *)(a1 + 12);
              if (!v60)
              {
                __break(0xC471u);
                JUMPOUT(0x197EF54ACLL);
              }
              v61 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v60 - 1) + 9) & 1;
              *(_BYTE *)(v59 + 56) = 0;
              v62 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v59, a1 + 7368, 0, v61, v47, v48, v49, v50);
              *(_DWORD *)(a1 + 7368) = v62;
              if (v62 != 17)
                goto LABEL_16;
              v67 = *(_DWORD *)(a1 + 7400);
              v68 = *(_DWORD *)(a1 + 7412);
              v69 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v67;
              *(_DWORD *)(a1 + 7448) = v68;
              *(_DWORD *)(a1 + 7452) = v69;
              v70 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v70 + 4) = v67;
              v71 = *(_DWORD *)(a1 + 12);
              if (v71)
              {
                v72 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v71 - 1) + 9) & 1;
                *(_BYTE *)(v70 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v70, a1 + 7368, 0, v72, v63, v64, v65, v66);
LABEL_16:
                JSC::ASTBuilder::createDoWhileStatement(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v76, v25, v51, v9, v28);
                return;
              }
              __break(0xC471u);
LABEL_51:
              JUMPOUT(0x197EF548CLL);
            }
            if (v55 != 20 && (v55 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[24]>(a1);
              return;
            }
LABEL_25:
            JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
            return;
          }
          if (*v15 == 20 || (*v15 & 0x100000) != 0)
            goto LABEL_25;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Unable to parse do-while loop condition");
        }
      }
      else
      {
        if (v34 == 20 || (v34 & 0x100000) != 0)
          goto LABEL_25;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[24]>(a1);
      }
    }
    else
    {
      if (v29 == 20 || (v29 & 0x100000) != 0)
        goto LABEL_25;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[4],char const(&)[14]>(a1);
    }
  }
  else
  {
    if (*v15 == 20 || (*v15 & 0x100000) != 0)
      goto LABEL_25;
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a statement following 'do'");
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::parseWithStatement<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  int v9;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  const char *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;

  v8 = (int *)(a1 + 7400);
  v56 = *(_OWORD *)(a1 + 7400);
  v9 = *(_DWORD *)(a1 + 12);
  if (!v9)
  {
    __break(0xC471u);
    goto LABEL_45;
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v9 - 1) + 9) & 1) != 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "'with' statements are not valid in strict mode");
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)a1 + 720 * (v9 - 1) + 10) |= 8u;
    v11 = *(_DWORD *)(a1 + 7400);
    v12 = *(_DWORD *)(a1 + 7412);
    v13 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v11;
    *(_DWORD *)(a1 + 7448) = v12;
    *(_DWORD *)(a1 + 7452) = v13;
    v14 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v14 + 4) = v11;
    v15 = *(_DWORD *)(a1 + 12);
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x197EF5824);
    }
    v17 = (int *)(a1 + 7368);
    v18 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v15 - 1) + 9) & 1;
    *(_BYTE *)(v14 + 56) = 0;
    v19 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v14, a1 + 7368, 0, v18, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v19;
    if (v19 != 2)
    {
      if (v19 == 20 || (v19 & 0x100000) != 0)
        goto LABEL_32;
      if (*(_QWORD *)(a1 + 7360))
        return;
      v48 = "(";
      goto LABEL_31;
    }
    v24 = *(_DWORD *)(a1 + 7400);
    v25 = *(_DWORD *)(a1 + 7412);
    v26 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v24;
    *(_DWORD *)(a1 + 7448) = v25;
    *(_DWORD *)(a1 + 7452) = v26;
    v27 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v27 + 4) = v24;
    v28 = *(_DWORD *)(a1 + 12);
    if (!v28)
    {
      __break(0xC471u);
      JUMPOUT(0x197EF582CLL);
    }
    v29 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v28 - 1) + 9) & 1;
    *(_BYTE *)(v27 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v27, a1 + 7368, 0, v29, v20, v21, v22, v23);
    v30 = *(_DWORD *)(a1 + 7408);
    v31 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
    if (v31)
    {
      v36 = v31;
      v37 = a1 + 7444;
      *(_BYTE *)(v31 + 24) = 1;
      v38 = *(_QWORD *)(a1 + 7520);
      if (v38)
      {
        v49 = *(_QWORD *)(v31 + 8);
        if ((v49 & 0x80000000) == 0)
        {
          v50 = *(_DWORD *)(v31 + 16);
          LODWORD(v57) = 2;
          *(_QWORD *)((char *)&v57 + 4) = v49;
          HIDWORD(v57) = v50;
          v51 = *(unsigned int *)(v38 + 12);
          if ((_DWORD)v51 == *(_DWORD *)(v38 + 8))
          {
            v52 = (__int128 *)WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38, v51 + 1, (unint64_t)&v57);
            v37 = a1 + 7444;
            v51 = *(unsigned int *)(v38 + 12);
            v53 = *(_QWORD *)v38;
            v54 = *v52;
          }
          else
          {
            v53 = *(_QWORD *)v38;
            v54 = v57;
          }
          *(_OWORD *)(v53 + 16 * v51) = v54;
          ++*(_DWORD *)(v38 + 12);
        }
      }
      *(_QWORD *)&v57 = *(_QWORD *)v37;
      DWORD2(v57) = *(_DWORD *)(v37 + 8);
      v39 = *v17;
      if (*v17 == 3)
      {
        v40 = *v8;
        v41 = *(_DWORD *)(a1 + 7412);
        v42 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = *v8;
        *(_DWORD *)(a1 + 7448) = v41;
        *(_DWORD *)(a1 + 7452) = v42;
        v43 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v43 + 4) = v40;
        v44 = *(_DWORD *)(a1 + 12);
        if (v44)
        {
          v45 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v44 - 1) + 9) & 1;
          *(_BYTE *)(v43 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v43, a1 + 7368, 0, v45, v32, v33, v34, v35);
          v55 = 0;
          v46 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v55, 0);
          if (v46)
          {
            JSC::ASTBuilder::createWithStatement(a2, (uint64_t)&v56, v36, v46, v30, (uint64_t)&v57, v11, v40);
            return;
          }
          if (*v17 != 20 && (*v17 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "A 'with' statement must have a body");
            return;
          }
LABEL_32:
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
          return;
        }
        __break(0xC471u);
LABEL_45:
        JUMPOUT(0x197EF581CLL);
      }
      if (v39 == 20 || (v39 & 0x100000) != 0)
        goto LABEL_32;
      if (*(_QWORD *)(a1 + 7360))
        return;
      v48 = ")";
LABEL_31:
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[6],char const(&)[4],char const(&)[30]>(a1, v48);
      return;
    }
    if (*v17 == 20 || (*v17 & 0x100000) != 0)
      goto LABEL_32;
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse 'with' subject expression");
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::parseDebuggerStatement<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;

  v9 = (_DWORD *)(a1 + 7368);
  v11 = (int *)(a1 + 7400);
  v27 = *(_OWORD *)(a1 + 7400);
  v10 = v27;
  v12 = *(_DWORD *)(a1 + 7412);
  v13 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v27;
  *(_DWORD *)(a1 + 7448) = v12;
  *(_DWORD *)(a1 + 7452) = v13;
  v14 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v14 + 4) = v10;
  v15 = *(_DWORD *)(a1 + 12);
  if (v15)
  {
    v17 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v15 - 1) + 9) & 1;
    *(_BYTE *)(v14 + 56) = 0;
    v18 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v14, (uint64_t)v9, 0, v17, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v18;
    v26 = v10;
    if (v18 == 17)
      v26 = *v11;
    if (JSC::Parser<JSC::Lexer<char16_t>>::autoSemiColon(a1, v19, v20, v21, v22, v23, v24, v25))
    {
      JSC::ASTBuilder::createDebugger(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v27, v26, v10);
    }
    else if (*v9 == 20 || (*v9 & 0x100000) != 0)
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Debugger keyword must be followed by a ';'");
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::parseForStatement<JSC::ASTBuilder>(JSC::ASTBuilder::Statement&)::{lambda(void)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  _BYTE v20[24];
  WTF *v21;
  int v22;

  v10 = *(uint64_t **)(a2 + 24);
  if (**(_BYTE **)a2 || **(_BYTE **)(a2 + 8))
  {
    v11 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(v11 + 16))
    {
      *(_QWORD *)(v11 + 16) = 0;
      JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v20, v10, 1, a4, a5, a6, a7, a8);
      JSC::VariableEnvironment::VariableEnvironment((JSC::VariableEnvironment *)a1, (const JSC::VariableEnvironment *)v20);
      v19 = v21;
      if (v21)
      {
        v21 = 0;
        v22 = 0;
        WTF::fastFree((unint64_t)v19, v12, v13, v14, v15, v16, v17, v18);
      }
      JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v20, (WTF::AtomStringImpl *)v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

_QWORD *JSC::Parser<JSC::Lexer<char16_t>>::parseSwitchClauses<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  JSC::ParserArena *v40;
  _QWORD *result;
  _QWORD *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  JSC::ParserArena *v67;
  _QWORD *v68;
  _QWORD *v69;

  if (*(_DWORD *)(a1 + 7368) != 516)
    return 0;
  v9 = *(_DWORD *)(a1 + 7408);
  v10 = *(_DWORD *)(a1 + 7400);
  v11 = *(_DWORD *)(a1 + 7412);
  v12 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v10;
  *(_DWORD *)(a1 + 7448) = v11;
  *(_DWORD *)(a1 + 7452) = v12;
  v13 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v13 + 4) = v10;
  v14 = *(_DWORD *)(a1 + 12);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197EF5E0CLL);
  }
  v16 = (_DWORD *)(a1 + 7368);
  v17 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v14 - 1) + 9) & 1;
  *(_BYTE *)(v13 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v13, a1 + 7368, 0, v17, a5, a6, a7, a8);
  v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
  v23 = *(_DWORD *)(a1 + 7368);
  if (!v18)
  {
    if (v23 != 20 && (v23 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse switch clause");
      return 0;
    }
LABEL_41:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return 0;
  }
  if (v23 != 18)
  {
LABEL_24:
    if (v23 != 20 && (v23 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ':' after switch clause expression");
      return 0;
    }
    goto LABEL_41;
  }
  v24 = v18;
  v25 = *(_DWORD *)(a1 + 7400);
  v26 = *(_DWORD *)(a1 + 7412);
  v27 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v25;
  *(_DWORD *)(a1 + 7448) = v26;
  *(_DWORD *)(a1 + 7452) = v27;
  v28 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v28 + 4) = v25;
  v29 = *(_DWORD *)(a1 + 12);
  if (!v29)
  {
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x197EF5DFCLL);
  }
  v30 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v29 - 1) + 9) & 1;
  *(_BYTE *)(v28 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v28, a1 + 7368, 0, v30, v19, v20, v21, v22);
  v31 = JSC::Parser<JSC::Lexer<char16_t>>::parseSourceElements<JSC::ASTBuilder>(a1, a2, 1);
  if (!v31)
  {
LABEL_28:
    if (*v16 != 20 && (*v16 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of a switch clause");
      return 0;
    }
    goto LABEL_41;
  }
  v36 = v31;
  v37 = *(uint64_t **)(a2 + 8);
  v39 = *v37;
  v38 = v37[1];
  if ((unint64_t)(v38 - *v37) <= 0x17)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v39 = *v37;
    v40 = *(JSC::ParserArena **)(a2 + 8);
    v38 = *((_QWORD *)v40 + 1);
  }
  else
  {
    v40 = *(JSC::ParserArena **)(a2 + 8);
  }
  *v37 = v39 + 24;
  *(_QWORD *)v39 = v24;
  *(_QWORD *)(v39 + 8) = v36;
  *(_DWORD *)(v39 + 16) = v9;
  result = *(_QWORD **)v40;
  if ((unint64_t)(v38 - *(_QWORD *)v40) <= 0xF)
  {
    JSC::ParserArena::allocateFreeablePool(v40);
    result = *(_QWORD **)v40;
  }
  *(_QWORD *)v40 = result + 2;
  *result = v39;
  result[1] = 0;
  if (*v16 == 516)
  {
    v69 = result;
    v42 = result;
    while (1)
    {
      v43 = *(_DWORD *)(a1 + 7408);
      v44 = *(_DWORD *)(a1 + 7400);
      v45 = *(_DWORD *)(a1 + 7412);
      v46 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v44;
      *(_DWORD *)(a1 + 7448) = v45;
      *(_DWORD *)(a1 + 7452) = v46;
      v47 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v47 + 4) = v44;
      v48 = *(_DWORD *)(a1 + 12);
      if (!v48)
        goto LABEL_48;
      v49 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v48 - 1) + 9) & 1;
      *(_BYTE *)(v47 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v47, a1 + 7368, 0, v49, v32, v33, v34, v35);
      v50 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
      v23 = *(_DWORD *)(a1 + 7368);
      if (!v50)
        break;
      if (v23 != 18)
        goto LABEL_24;
      v55 = v50;
      v56 = *(_DWORD *)(a1 + 7400);
      v57 = *(_DWORD *)(a1 + 7412);
      v58 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v56;
      *(_DWORD *)(a1 + 7448) = v57;
      *(_DWORD *)(a1 + 7452) = v58;
      v59 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v59 + 4) = v56;
      v60 = *(_DWORD *)(a1 + 12);
      if (!v60)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF5E04);
      }
      v61 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v60 - 1) + 9) & 1;
      *(_BYTE *)(v59 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v59, a1 + 7368, 0, v61, v51, v52, v53, v54);
      v62 = JSC::Parser<JSC::Lexer<char16_t>>::parseSourceElements<JSC::ASTBuilder>(a1, a2, 1);
      if (!v62)
        goto LABEL_28;
      v63 = v62;
      v64 = *(uint64_t **)(a2 + 8);
      v66 = *v64;
      v65 = v64[1];
      if ((unint64_t)(v65 - *v64) <= 0x17)
      {
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
        v66 = *v64;
        v67 = *(JSC::ParserArena **)(a2 + 8);
        v65 = *((_QWORD *)v67 + 1);
      }
      else
      {
        v67 = *(JSC::ParserArena **)(a2 + 8);
      }
      *v64 = v66 + 24;
      *(_QWORD *)v66 = v55;
      *(_QWORD *)(v66 + 8) = v63;
      *(_DWORD *)(v66 + 16) = v43;
      v68 = *(_QWORD **)v67;
      if ((unint64_t)(v65 - *(_QWORD *)v67) <= 0xF)
      {
        JSC::ParserArena::allocateFreeablePool(v67);
        v68 = *(_QWORD **)v67;
      }
      *(_QWORD *)v67 = v68 + 2;
      *v68 = v66;
      v68[1] = 0;
      v42[1] = v68;
      v42 = v68;
      if (*v16 != 516)
        return v69;
    }
    if (v23 != 20 && (v23 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse switch case expression");
      return 0;
    }
    goto LABEL_41;
  }
  return result;
}

uint64_t (**JSC::JSAPIGlobalObject::globalObjectMethodTable(JSC::JSAPIGlobalObject *this))(JSC::JSGlobalObject *__hidden this, const JSC::JSGlobalObject *)
{
  return JSC::JSAPIGlobalObject::globalObjectMethodTable(void)::table;
}

uint64_t JSC::JSGlobalObject::supportsRichSourceInfo()
{
  return 1;
}

uint64_t JSC::JSGlobalObject::shouldInterruptScript()
{
  return 1;
}

uint64_t JSC::JSGlobalObject::javaScriptRuntimeFlags()
{
  return 0;
}

uint64_t JSC::JSGlobalObject::shouldInterruptScriptBeforeTimeout()
{
  return 0;
}

unint64_t JSC::JSAPIGlobalObject::moduleLoaderImportModule(unint64_t a1, JSC::VM *a2, unint64_t a3, uint64_t a4, JSC::VM *a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v12;
  unint64_t *v13;
  int **v14;
  unsigned int *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  const WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  unsigned __int16 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  unsigned int v111;
  int v112;
  uint64_t *v113;
  int v114;
  unint64_t v115;
  int v116;
  int v117;
  int v118;
  unint64_t v119;
  int v120;
  int v121;
  int v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  unsigned int v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF *v143;
  uint64_t v144;
  uint64_t v145;
  WTF::StringImpl *v146;

  v12 = *(_QWORD *)(a1 + 56);
  v13 = (unint64_t *)(v12 + 38992);
  v14 = (int **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
    v14 = JSC::JSRopeString::resolveRope(a3, (JSC::JSGlobalObject *)a1, a3, a4, a9, (uint64_t)a5, a6, a7, a8);
  v15 = (unsigned int *)(v12 + 80);
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_4;
  v106 = *(_DWORD *)(v12 + 80);
  if ((v106 & 0x27) != 0 && (v106 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_4:
    v16 = *(WTF::StringImpl **)(*(_QWORD *)(v12 + 41952) + 2560);
    if (v16)
      *(_DWORD *)v16 += 2;
    v17 = (WTF *)WTF::fastMalloc((WTF *)8);
    v144 = 1;
    v143 = v17;
    if (v16)
      *(_DWORD *)v16 += 2;
    *(_QWORD *)v17 = v16;
    HIDWORD(v144) = 1;
    JSC::retrieveImportAttributesFromDynamicImportOptions(a1, a4, (uint64_t)&v143, v18, v19, v20, v21, v22, &v145);
    if (HIDWORD(v144))
    {
      v71 = v143;
      v72 = 8 * HIDWORD(v144);
      do
      {
        v73 = *(WTF::StringImpl **)v71;
        *(_QWORD *)v71 = 0;
        if (v73)
        {
          if (*(_DWORD *)v73 == 2)
          {
            WTF::StringImpl::~StringImpl(v73, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
            WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
          }
          else
          {
            *(_DWORD *)v73 -= 2;
          }
        }
        v71 = (WTF *)((char *)v71 + 8);
        v72 -= 8;
      }
      while (v72);
    }
    v30 = v143;
    if (v143)
    {
      v143 = 0;
      LODWORD(v144) = 0;
      WTF::fastFree((unint64_t)v30, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
    }
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::~StringImpl(v16, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
        WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
      }
      else
      {
        *(_DWORD *)v16 -= 2;
      }
    }
    if (*v15)
    {
      v112 = *(_DWORD *)(v12 + 80);
      if ((v112 & 0x27) != 0 && (v112 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)v24, v25, v26, v27, v28, v29);
      v113 = (uint64_t *)(v12 + 16);
      if (*(_QWORD *)(v12 + 16))
      {
        v114 = *(_DWORD *)(a1 + 1184);
        if (v114)
          v115 = 16 * (v114 & 0xFFFFFFFE);
        else
          v115 = 0;
        SlowCase = *v13;
        if (*v13 >= *(_QWORD *)(v12 + 39000))
        {
          SlowCase = *(_QWORD *)(v12 + 39008);
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM((JSC *)v12, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
            SlowCase = JSC::LocalAllocator::allocateSlowCase(v12 + 38968, v12 + 192, 32, 0, 0, v134, v135, v136);
LABEL_78:
            *(_DWORD *)SlowCase = 0;
            v116 = *(_DWORD *)(v115 + 8);
            *(_DWORD *)SlowCase = v115 >> 4;
            *(_DWORD *)(SlowCase + 4) = v116;
            *(_QWORD *)(SlowCase + 8) = 0;
            *(_QWORD *)(SlowCase + 16) = 0;
            *(_QWORD *)(SlowCase + 24) = 0;
            if (!*(_BYTE *)(v12 + 755))
              goto LABEL_98;
LABEL_97:
            __dmb(0xAu);
LABEL_98:
            *(_OWORD *)(SlowCase + 16) = xmmword_19914EFB0;
            v125 = *v113;
            if (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 24) != *v113)
            {
              *v113 = 0;
              do
                v126 = __ldaxr(v15);
              while (__stlxr(v126 & 0xFFFFFFEF, v15));
              JSC::JSPromise::reject(SlowCase, (uint64_t *)a1, *(_QWORD *)(v125 + 8), v25, v26, v27, v28, v29);
            }
LABEL_31:
            v49 = v145;
            if (v145)
            {
              v50 = *(unsigned int *)(v145 - 4);
              if ((_DWORD)v50)
              {
                v51 = v145;
                do
                {
                  v52 = *(WTF::StringImpl **)v51;
                  if (*(_QWORD *)v51 != -1)
                  {
                    v53 = *(WTF::StringImpl **)(v51 + 8);
                    *(_QWORD *)(v51 + 8) = 0;
                    if (v53)
                    {
                      if (*(_DWORD *)v53 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v53, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
                        WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
                        v52 = *(WTF::StringImpl **)v51;
                      }
                      else
                      {
                        *(_DWORD *)v53 -= 2;
                      }
                    }
                    *(_QWORD *)v51 = 0;
                    if (v52)
                    {
                      if (*(_DWORD *)v52 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v52, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
                        WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
                      }
                      else
                      {
                        *(_DWORD *)v52 -= 2;
                      }
                    }
                  }
                  v51 += 16;
                  --v50;
                }
                while (v50);
              }
              WTF::fastFree(v49 - 16, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
            }
            return SlowCase;
          }
          v128 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v12 + 39016);
          *(_QWORD *)(v12 + 39000) = SlowCase + HIDWORD(v128);
          *(_QWORD *)(v12 + 39008) = SlowCase + (int)v128;
        }
        *v13 = SlowCase + 32;
        goto LABEL_78;
      }
    }
    v31 = JSC::retrieveTypeImportAttribute(a1, &v145);
    if (*v15)
    {
      v117 = *(_DWORD *)(v12 + 80);
      if ((v117 & 0x27) != 0 && (v117 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)v24, v25, v26, v27, v28, v29);
      v113 = (uint64_t *)(v12 + 16);
      if (*(_QWORD *)(v12 + 16))
      {
        v118 = *(_DWORD *)(a1 + 1184);
        if (v118)
          v119 = 16 * (v118 & 0xFFFFFFFE);
        else
          v119 = 0;
        SlowCase = *v13;
        if (*v13 >= *(_QWORD *)(v12 + 39000))
        {
          SlowCase = *(_QWORD *)(v12 + 39008);
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM((JSC *)v12, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
            SlowCase = JSC::LocalAllocator::allocateSlowCase(v12 + 38968, v12 + 192, 32, 0, 0, v137, v138, v139);
LABEL_87:
            *(_DWORD *)SlowCase = 0;
            v120 = *(_DWORD *)(v119 + 8);
            *(_DWORD *)SlowCase = v119 >> 4;
            *(_DWORD *)(SlowCase + 4) = v120;
            *(_QWORD *)(SlowCase + 8) = 0;
            *(_QWORD *)(SlowCase + 16) = 0;
            *(_QWORD *)(SlowCase + 24) = 0;
            if (!*(_BYTE *)(v12 + 755))
              goto LABEL_98;
            goto LABEL_97;
          }
          v129 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v12 + 39016);
          *(_QWORD *)(v12 + 39000) = SlowCase + HIDWORD(v129);
          *(_QWORD *)(v12 + 39008) = SlowCase + (int)v129;
        }
        *v13 = SlowCase + 32;
        goto LABEL_87;
      }
    }
    if (v31 >= 0x100u)
    {
      v33 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)(v33 + 8) = 1;
      *(_QWORD *)v33 = off_1E357B618;
      *(_BYTE *)(v33 + 12) = v31;
      v143 = (WTF *)v33;
      v32 = JSC::JSScriptFetchParameters::create(v12, *(JSC::VM **)(v12 + 41680), (uint64_t *)&v143, v34, v35, v36, v37, v38);
      v39 = v143;
      v143 = 0;
      if (v39)
      {
        if (*((_DWORD *)v39 + 2) == 1)
          (*(void (**)(WTF *))(*(_QWORD *)v39 + 8))(v39);
        else
          --*((_DWORD *)v39 + 2);
      }
    }
    else
    {
      v32 = 10;
    }
    v40 = (WTF *)*v14;
    if (v40)
    {
      if ((*((_BYTE *)v40 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v40 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v12 + 41912), (unint64_t)v40, v24, v25, v26, v27, v28, v29, &v143);
        v40 = v143;
      }
    }
    v41 = *(_DWORD *)v40;
    *(_DWORD *)v40 += 2;
    if (v41)
    {
      *(_DWORD *)v40 = v41;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v40, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
    }
    v146 = v40;
    v42 = JSC::jsString((JSC *)v12, a5, v24, v25, v26, v27, v28, v29);
    SlowCase = JSC::importModule((uint64_t *)a1, (JSC::VM *)&v146, v42, v32, 0xAuLL, v43, v44, v45, v46);
    v48 = v146;
    v146 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::~StringImpl(v48, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
        WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
      }
      else
      {
        *(_DWORD *)v48 -= 2;
      }
    }
    if (!*v15)
      goto LABEL_31;
    v121 = *(_DWORD *)(v12 + 80);
    if ((v121 & 0x27) != 0 && (v121 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)v24, v25, v26, v27, v28, v29);
    v113 = (uint64_t *)(v12 + 16);
    if (!*(_QWORD *)(v12 + 16))
      goto LABEL_31;
    v122 = *(_DWORD *)(a1 + 1184);
    if (v122)
      v123 = 16 * (v122 & 0xFFFFFFFE);
    else
      v123 = 0;
    SlowCase = *v13;
    if (*v13 >= *(_QWORD *)(v12 + 39000))
    {
      SlowCase = *(_QWORD *)(v12 + 39008);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v12, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v12 + 38968, v12 + 192, 32, 0, 0, v140, v141, v142);
LABEL_96:
        *(_DWORD *)SlowCase = 0;
        v124 = *(_DWORD *)(v123 + 8);
        *(_DWORD *)SlowCase = v123 >> 4;
        *(_DWORD *)(SlowCase + 4) = v124;
        *(_QWORD *)(SlowCase + 8) = 0;
        *(_QWORD *)(SlowCase + 16) = 0;
        *(_QWORD *)(SlowCase + 24) = 0;
        if (!*(_BYTE *)(v12 + 755))
          goto LABEL_98;
        goto LABEL_97;
      }
      v130 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v12 + 39016);
      *(_QWORD *)(v12 + 39000) = SlowCase + HIDWORD(v130);
      *(_QWORD *)(v12 + 39008) = SlowCase + (int)v130;
    }
    *v13 = SlowCase + 32;
    goto LABEL_96;
  }
  v107 = *(_DWORD *)(a1 + 1184);
  if (v107)
    v108 = 16 * (v107 & 0xFFFFFFFE);
  else
    v108 = 0;
  SlowCase = *v13;
  if (*v13 >= *(_QWORD *)(v12 + 39000))
  {
    SlowCase = *(_QWORD *)(v12 + 39008);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v12, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v12 + 38968, v12 + 192, 32, 0, 0, v131, v132, v133);
      goto LABEL_65;
    }
    v127 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v12 + 39016);
    *(_QWORD *)(v12 + 39000) = SlowCase + HIDWORD(v127);
    *(_QWORD *)(v12 + 39008) = SlowCase + (int)v127;
  }
  *v13 = SlowCase + 32;
LABEL_65:
  *(_DWORD *)SlowCase = 0;
  v109 = *(_DWORD *)(v108 + 8);
  *(_DWORD *)SlowCase = v108 >> 4;
  *(_DWORD *)(SlowCase + 4) = v109;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_QWORD *)(SlowCase + 24) = 0;
  if (*(_BYTE *)(v12 + 755))
    __dmb(0xAu);
  *(_OWORD *)(SlowCase + 16) = xmmword_19914EFB0;
  v110 = *(_QWORD *)(v12 + 16);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 24) != v110)
  {
    *(_QWORD *)(v12 + 16) = 0;
    do
      v111 = __ldaxr(v15);
    while (__stlxr(v111 & 0xFFFFFFEF, v15));
    JSC::JSPromise::reject(SlowCase, (uint64_t *)a1, *(_QWORD *)(v110 + 8), a4, (uint64_t)a5, a6, a7, a8);
  }
  return SlowCase;
}

void sub_197EF6610(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, uint64_t a18, WTF::StringImpl *a19)
{
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (a15)
  {
    if (*((_DWORD *)a15 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)a15 + 8))(a15);
    else
      --*((_DWORD *)a15 + 2);
  }
  if (a18)
  {
    v20 = *(unsigned int *)(a18 - 4);
    if ((_DWORD)v20)
    {
      v21 = a18;
      do
      {
        v22 = *(WTF::StringImpl **)v21;
        if (*(_QWORD *)v21 != -1)
        {
          v23 = *(WTF::StringImpl **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
            {
              WTF::StringImpl::~StringImpl(v23, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
              v22 = *(WTF::StringImpl **)v21;
            }
            else
            {
              *(_DWORD *)v23 -= 2;
            }
          }
          *(_QWORD *)v21 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
            {
              WTF::StringImpl::~StringImpl(v22, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
            }
            else
            {
              *(_DWORD *)v22 -= 2;
            }
          }
        }
        v21 += 16;
        --v20;
      }
      while (v20);
    }
    WTF::fastFree(a18 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  _Unwind_Resume(exception_object);
}

void JSC::JSAPIGlobalObject::moduleLoaderResolve(unint64_t a1@<X0>, WTF::AtomStringImpl *a2@<X1>, unint64_t a3@<X2>, StringView a4@<X4:X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, WTF::StringImpl **a8@<X8>, int8x16_t a9@<Q0>)
{
  unint64_t m_characters;
  uint64_t v12;
  int *v13;
  WTF::StringImpl *v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unsigned int v26;
  int8x16_t *v27;
  int v28;
  char v29;
  char v30;
  unsigned __int8 *v31;
  int v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  JSC::Heap **v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  JSC::Exception *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  int v211;
  uint64_t (*v212)(_OWORD *);
  _QWORD *v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  WTF::StringImpl *v222;
  _BYTE v223[32];
  int v224;
  WTF::StringImpl *v225[5];
  WTF::StringImpl *v226;
  unint64_t v227;
  WTF::StringImpl *v228[5];
  WTF::StringImpl *v229;
  __int128 v230;
  __int128 v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  _OWORD v235[3];
  StringView v236;
  StringView v237;

  m_characters = (unint64_t)a4.m_characters;
  v227 = a3;
  v12 = *(_QWORD *)(a1 + 56);
  if ((a3 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a3 + 5) == 2)
  {
    v13 = *(int **)(a3 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *JSC::JSRopeString::resolveRope(a3, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4.m_characters, a9, *(uint64_t *)&a4.m_length, a5, a6, a7);
      if (!v13)
        goto LABEL_6;
    }
    else if (!v13)
    {
LABEL_6:
      v226 = (WTF::StringImpl *)v13;
      goto LABEL_7;
    }
    *v13 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v227, (JSC::JSGlobalObject *)a1, (const WTF::String *)a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7, (int **)&v226);
LABEL_7:
  if (*(_DWORD *)(v12 + 80))
  {
    v210 = *(_DWORD *)(v12 + 80);
    if ((v210 & 0x27) != 0)
      goto LABEL_156;
    goto LABEL_139;
  }
  while (1)
  {
    memset(v225, 0, sizeof(v225));
    if ((m_characters & 0xFFFE000000000002) == 0 && *(_BYTE *)(m_characters + 5) == 2)
      break;
LABEL_26:
    v21 = v226;
    if (v226)
      *(_DWORD *)v226 += 2;
    v229 = v21;
    WTF::URL::URL((uint64_t)v235, (WTF::AtomStringImpl *)&v229, 0, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
    v22 = v229;
    v229 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, a2, a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
        WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
    m_characters = (unint64_t)&v229;
    v23 = DWORD2(v235[0]);
    if ((BYTE8(v235[0]) & 1) != 0)
    {
LABEL_85:
      v96 = *(WTF::StringImpl **)&v235[0];
      *(_QWORD *)&v235[0] = 0;
      v222 = v96;
      *(_DWORD *)v223 = v23;
      *(_OWORD *)&v223[4] = *(_OWORD *)((char *)v235 + 12);
      *(_QWORD *)&v223[20] = *(_QWORD *)((char *)&v235[1] + 12);
      DWORD2(v235[0]) = v23 & 0xFFFFFFFE;
      *(_DWORD *)&v223[28] = DWORD1(v235[2]);
      v224 = 0;
      goto LABEL_101;
    }
    v24 = v226;
    if (!v226)
    {
LABEL_137:
      v24 = 0;
      goto LABEL_92;
    }
    v25 = *((unsigned int *)v226 + 1);
    v26 = *((_DWORD *)v226 + 4);
    if ((_DWORD)v25)
    {
      v27 = (int8x16_t *)*((_QWORD *)v226 + 1);
      if ((v26 & 4) != 0)
        v28 = v27->u8[0];
      else
        v28 = v27->u16[0];
      if (v28 == 47)
        goto LABEL_43;
    }
    else
    {
      v27 = (int8x16_t *)*((_QWORD *)v226 + 1);
    }
    v236.m_characters = (void *)(v25 | ((unint64_t)((v26 >> 2) & 1) << 32));
    *(_QWORD *)&v236.m_length = "./";
    a4.m_characters = (void *)0x100000002;
    v29 = WTF::startsWith(v27, v236, a4);
    v24 = v226;
    if ((v29 & 1) == 0)
    {
      if (!v226)
        goto LABEL_137;
      LODWORD(v237.m_characters) = *((_DWORD *)v226 + 1);
      HIDWORD(v237.m_characters) = (*((_DWORD *)v226 + 4) >> 2) & 1;
      *(_QWORD *)&v237.m_length = "../";
      a4.m_characters = (void *)0x100000003;
      v30 = WTF::startsWith(*((int8x16_t **)v226 + 1), v237, a4);
      v24 = v226;
      if ((v30 & 1) == 0)
      {
        if (v226)
          *(_DWORD *)v226 += 2;
LABEL_92:
        v233 = v24;
        v97 = v225[0];
        if (v225[0])
          *(_DWORD *)v225[0] += 2;
        v232 = v97;
        v229 = (WTF::StringImpl *)"Module specifier: ";
        *(_QWORD *)&v230 = 19;
        v228[0] = (WTF::StringImpl *)" does not start with \"/\", \"./\", or \"../\". Referenced from: ";
        v228[1] = (WTF::StringImpl *)60;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)&v229, (uint64_t *)&v233, (uint64_t)v228, (uint64_t *)&v232, &v234);
        if (!v234)
        {
          __break(0xC471u);
          JUMPOUT(0x197EF70F4);
        }
        v222 = v234;
        v224 = 1;
        v234 = 0;
        v98 = v232;
        v232 = 0;
        if (v98)
        {
          if (*(_DWORD *)v98 == 2)
          {
            WTF::StringImpl::~StringImpl(v98, a2, a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
            WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
          }
          else
          {
            *(_DWORD *)v98 -= 2;
          }
        }
        v95 = v233;
        v233 = 0;
        if (v95)
          goto LABEL_99;
        goto LABEL_101;
      }
    }
    if (v24)
    {
LABEL_43:
      if (*((_DWORD *)v24 + 1))
      {
        v31 = (unsigned __int8 *)*((_QWORD *)v24 + 1);
        v32 = (*((_BYTE *)v24 + 16) & 4) != 0 ? *v31 : *(unsigned __int16 *)v31;
        if (v32 == 47)
        {
          v73 = (WTF::StringImpl *)WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v73 = 0x700000002;
          *((_QWORD *)v73 + 1) = "file://";
          *((_DWORD *)v73 + 4) = 4;
          v234 = v73;
          WTF::URL::URL((uint64_t)v228, (WTF::AtomStringImpl *)&v234, 0, v74, v75, v76, v77, v78);
          WTF::URL::URL((uint64_t)&v229, (uint64_t)v228, &v226, 0, v79, v80, v81, v82);
          v83 = v229;
          v229 = 0;
          v84 = *(WTF::StringImpl **)&v235[0];
          *(_QWORD *)&v235[0] = v83;
          if (v84)
          {
            if (*(_DWORD *)v84 == 2)
            {
              WTF::StringImpl::~StringImpl(v84, a2, a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
              WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
              v85 = v229;
            }
            else
            {
              v85 = 0;
              *(_DWORD *)v84 -= 2;
            }
          }
          else
          {
            v85 = 0;
          }
          *(_OWORD *)((char *)v235 + 8) = v230;
          LODWORD(v230) = v230 & 0xFFFFFFFE;
          *(_OWORD *)((char *)&v235[1] + 8) = v231;
          v229 = 0;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2)
            {
              WTF::StringImpl::~StringImpl(v85, a2, a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
              WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
            }
            else
            {
              *(_DWORD *)v85 -= 2;
            }
          }
          v86 = v228[0];
          v228[0] = 0;
          if (v86)
          {
            if (*(_DWORD *)v86 == 2)
            {
              WTF::StringImpl::~StringImpl(v86, a2, a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
              WTF::fastFree(v170, v171, v172, v173, v174, v175, v176, v177);
            }
            else
            {
              *(_DWORD *)v86 -= 2;
            }
          }
          v87 = v234;
          v234 = 0;
          if (v87)
          {
            if (*(_DWORD *)v87 == 2)
            {
              WTF::StringImpl::~StringImpl(v87, a2, a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
              WTF::fastFree(v178, v179, v180, v181, v182, v183, v184, v185);
            }
            else
            {
              *(_DWORD *)v87 -= 2;
            }
          }
          v23 = DWORD2(v235[0]);
          if ((BYTE8(v235[0]) & 1) != 0)
            goto LABEL_85;
        }
      }
    }
    v88 = v225[0];
    if (!v225[0])
    {
      v90 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v90 = 0x2D00000002;
      *(_QWORD *)(v90 + 8) = "Could not determine the base URL for loading.";
      *(_DWORD *)(v90 + 16) = 4;
      v222 = (WTF::StringImpl *)v90;
      v224 = 1;
      goto LABEL_101;
    }
    if (((uint64_t)v225[1] & 1) != 0)
    {
      WTF::URL::URL((uint64_t)&v229, (uint64_t)v225, &v226, 0, *(uint64_t *)&a4.m_length, a5, a6, a7);
      v91 = v229;
      v229 = 0;
      v92 = *(WTF::StringImpl **)&v235[0];
      *(_QWORD *)&v235[0] = v91;
      if (v92)
      {
        if (*(_DWORD *)v92 == 2)
        {
          WTF::StringImpl::~StringImpl(v92, a2, a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
          WTF::fastFree(v186, v187, v188, v189, v190, v191, v192, v193);
          v93 = v229;
        }
        else
        {
          v93 = 0;
          *(_DWORD *)v92 -= 2;
        }
      }
      else
      {
        v93 = 0;
      }
      *(_OWORD *)((char *)v235 + 8) = v230;
      LODWORD(v230) = v230 & 0xFFFFFFFE;
      *(_OWORD *)((char *)&v235[1] + 8) = v231;
      v229 = 0;
      if (v93)
      {
        if (*(_DWORD *)v93 == 2)
        {
          WTF::StringImpl::~StringImpl(v93, a2, a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
          WTF::fastFree(v194, v195, v196, v197, v198, v199, v200, v201);
        }
        else
        {
          *(_DWORD *)v93 -= 2;
        }
      }
      v23 = DWORD2(v235[0]);
      if ((BYTE8(v235[0]) & 1) != 0)
        goto LABEL_85;
      v94 = *(WTF::StringImpl **)&v235[0];
      if (*(_QWORD *)&v235[0])
        **(_DWORD **)&v235[0] += 2;
      v234 = v94;
      v229 = (WTF::StringImpl *)"Could not form valid URL from identifier and base. Tried:";
      *(_QWORD *)&v230 = 58;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v229, (uint64_t *)&v234, (int **)v228);
      v89 = v228[0];
      if (!v228[0])
      {
LABEL_161:
        __break(0xC471u);
        JUMPOUT(0x197EF6BA0);
      }
    }
    else
    {
      *(_DWORD *)v225[0] += 2;
      v234 = v88;
      v229 = (WTF::StringImpl *)"Referrering script's url is not valid: ";
      *(_QWORD *)&v230 = 40;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v229, (uint64_t *)&v234, (int **)v228);
      v89 = v228[0];
      if (!v228[0])
        goto LABEL_161;
    }
    v222 = v89;
    v224 = 1;
    v228[0] = 0;
    v95 = v234;
    v234 = 0;
    if (v95)
    {
LABEL_99:
      if (*(_DWORD *)v95 == 2)
      {
        WTF::StringImpl::~StringImpl(v95, a2, a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
        WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
      }
      else
      {
        *(_DWORD *)v95 -= 2;
      }
    }
LABEL_101:
    v99 = *(WTF::StringImpl **)&v235[0];
    *(_QWORD *)&v235[0] = 0;
    if (v99)
    {
      if (*(_DWORD *)v99 == 2)
      {
        WTF::StringImpl::~StringImpl(v99, a2, a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
        WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
      }
      else
      {
        *(_DWORD *)v99 -= 2;
      }
    }
    if (v224 == 1)
    {
      v101 = *(JSC::Heap ***)(a1 + 56);
      v102 = *(_QWORD *)(a1 + 1504);
      if ((v102 & 1) != 0)
      {
        v212 = *(uint64_t (**)(_OWORD *))(v102 & 0xFFFFFFFFFFFFFFFCLL);
        if ((a1 & 8) != 0)
          v213 = (_QWORD *)(a1 - 16);
        else
          v213 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
        *(_QWORD *)&v235[0] = *v213;
        *((_QWORD *)&v235[0] + 1) = a1;
        *(_QWORD *)&v235[1] = a1 + 1504;
        v102 = v212(v235);
      }
      v103 = JSC::ErrorInstance::create(v101, v102, &v222, 0, 0, 0, 0, 1);
      v110 = (JSC::Exception *)v103;
      if ((v103 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v103 & 0xFFFFFFFE) + 0x4C)))
      {
        v110 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v103, 0, v104, v105, v106, v107, v108);
      }
      JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a1, v110, v109, v104, v105, v106, v107, v108);
      v100 = 0;
      *a8 = 0;
      goto LABEL_117;
    }
    if (!v224)
    {
      v100 = v222;
      if (v222)
      {
        if ((*((_BYTE *)v222 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v222 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v12 + 41912), (unint64_t)v222, (const WTF::StringImpl *)a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7, v235);
          v100 = *(WTF::StringImpl **)&v235[0];
        }
      }
      v119 = *(_DWORD *)v100;
      *(_DWORD *)v100 += 2;
      if (v119)
      {
        *(_DWORD *)v100 = v119;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v100, a2, a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
        WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
      }
LABEL_117:
      *a8 = v100;
      if (v224 != -1)
        ((void (*)(_OWORD *, WTF::StringImpl **))off_1E357B540[v224])(v235, &v222);
      goto LABEL_119;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
LABEL_156:
    if ((v210 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
LABEL_139:
    if (*(_QWORD *)(v12 + 16))
    {
      *a8 = 0;
      goto LABEL_122;
    }
  }
  v14 = *(WTF::StringImpl **)(m_characters + 8);
  if ((v14 & 1) != 0)
  {
    v14 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(m_characters, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4.m_characters, (int8x16_t)0, *(uint64_t *)&a4.m_length, a5, a6, a7);
    if (!v14)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v14)
LABEL_12:
    *(_DWORD *)v14 += 2;
LABEL_13:
  v229 = v14;
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_14;
  v211 = *(_DWORD *)(v12 + 80);
  if ((v211 & 0x27) != 0 && (v211 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_14:
    memset(v235, 0, 40);
    WTF::URL::URL((uint64_t)&v222, (uint64_t)v235, &v229, 0, *(uint64_t *)&a4.m_length, a5, a6, a7);
    v17 = v222;
    v222 = 0;
    v18 = v225[0];
    v225[0] = v17;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v15, v16, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
        WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
        v19 = v222;
      }
      else
      {
        v19 = 0;
        *(_DWORD *)v18 -= 2;
      }
    }
    else
    {
      v19 = 0;
    }
    *(_OWORD *)&v225[1] = *(_OWORD *)v223;
    *(_DWORD *)v223 &= ~1u;
    *(_OWORD *)&v225[3] = *(_OWORD *)&v223[16];
    v222 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v15, v16, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    v20 = *(WTF::StringImpl **)&v235[0];
    *(_QWORD *)&v235[0] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::~StringImpl(v20, v15, v16, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
        WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
        if (!v14)
          goto LABEL_26;
        goto LABEL_24;
      }
      *(_DWORD *)v20 -= 2;
    }
    if (!v14)
      goto LABEL_26;
LABEL_24:
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v15, v16, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
    goto LABEL_26;
  }
  *a8 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, a2, a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
      WTF::fastFree(v214, v215, v216, v217, v218, v219, v220, v221);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
LABEL_119:
  v120 = v225[0];
  v225[0] = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
    {
      WTF::StringImpl::~StringImpl(v120, a2, a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
      WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
    }
    else
    {
      *(_DWORD *)v120 -= 2;
    }
  }
LABEL_122:
  v121 = v226;
  v226 = 0;
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
    {
      WTF::StringImpl::~StringImpl(v121, a2, a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
    }
    else
    {
      *(_DWORD *)v121 -= 2;
    }
  }
}

void sub_197EF7100(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v31 = *(WTF::StringImpl **)(v29 - 120);
  *(_QWORD *)(v29 - 120) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  v32 = *(WTF::StringImpl **)(v29 - 112);
  *(_QWORD *)(v29 - 112) = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
    {
      WTF::StringImpl::~StringImpl(a17, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
    }
    else
    {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 2)
    {
      WTF::StringImpl::~StringImpl(a22, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      *(_DWORD *)a22 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t JSC::JSAPIGlobalObject::moduleLoaderFetch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  JSC::VM *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t SlowCase;
  int v17;
  JSContext *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  JSContext *v99;
  unint64_t *v100;
  unint64_t v101;
  WTF::AtomStringImpl *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  WTF::StringImpl *v152;
  uint64_t v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  _QWORD *v159;
  uint64_t v160;
  WTF::StringImpl **v161;
  WTF::StringImpl **v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  _DWORD *v167;
  WTF::StringImpl *v168;
  _QWORD *v169;
  uint64_t v170;
  WTF::StringImpl **v171;
  WTF::StringImpl **v172;
  WTF::StringImpl *v173;
  unint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  int v193;
  uint64_t v194;
  unsigned int *v195;
  unsigned int v196;
  uint64_t v197;
  JSC::Heap **v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  WTF::StringImpl *v206;
  unint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  unint64_t v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  _QWORD *v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  WTF::StringImpl *v246;
  unint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t (*v266)(WTF::StringImpl **);
  WTF::StringImpl **v267;
  uint64_t v268;
  JSContext *v269;
  uint64_t v270;
  WTF::StringImpl *v271;
  WTF::StringImpl *v272[3];

  v5 = *(_QWORD *)(a1 + 56);
  v6 = (unint64_t *)(v5 + 38992);
  v269 = +[JSContext contextWithJSGlobalContextRef:](JSContext, "contextWithJSGlobalContextRef:", a1);
  v270 = a1;
  v14 = *(_DWORD *)(a1 + 1184);
  if (v14)
    v15 = 16 * (v14 & 0xFFFFFFFE);
  else
    v15 = 0;
  SlowCase = *v6;
  if (*v6 < *(_QWORD *)(v5 + 39000))
    goto LABEL_5;
  SlowCase = *(_QWORD *)(v5 + 39008);
  if ((SlowCase & 1) == 0)
  {
    v192 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v5 + 39016);
    *(_QWORD *)(v5 + 39000) = SlowCase + HIDWORD(v192);
    *(_QWORD *)(v5 + 39008) = SlowCase + (int)v192;
LABEL_5:
    *v6 = SlowCase + 32;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM((JSC *)v5, v7, (uint64_t)v8, v9, v10, v11, v12, v13);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v5 + 38968, v5 + 192, 32, 0, 0, v263, v264, v265);
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v17 = *(_DWORD *)(v15 + 8);
  *(_DWORD *)SlowCase = v15 >> 4;
  *(_DWORD *)(SlowCase + 4) = v17;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_QWORD *)(SlowCase + 24) = 0;
  v18 = v269;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  *(_OWORD *)(SlowCase + 16) = xmmword_19914EFB0;
  v19 = *(_QWORD *)(v270 + 56);
  if ((a3 & 0xFFFE000000000002) != 0)
  {
    v149 = a3;
  }
  else
  {
    if (*(_BYTE *)(a3 + 5) == 2)
    {
      v20 = *(WTF::StringImpl **)(a3 + 8);
      if ((v20 & 1) == 0)
      {
        if ((*((_BYTE *)v20 + 16) & 0x10) == 0)
        {
          v164 = *(WTF::StringImpl **)(v19 + 64768);
          if (v164 != v20)
          {
            *(_DWORD *)v20 += 2;
            *(_QWORD *)(v19 + 64768) = v20;
            if (v164)
            {
              if (*(_DWORD *)v164 == 2)
              {
                WTF::StringImpl::~StringImpl(v164, v7, (uint64_t)v8, v9, v10, v11, v12, v13);
                WTF::fastFree(v233, v234, v235, v236, v237, v238, v239, v240);
              }
              else
              {
                *(_DWORD *)v164 -= 2;
              }
            }
            v165 = *(WTF::StringImpl **)(a3 + 8);
            if (v165)
            {
              if ((*((_BYTE *)v165 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v165 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v165, v8, v9, v10, v11, v12, v13, (WTF *)v272);
                v165 = v272[0];
              }
            }
            v166 = *(WTF::StringImpl **)(v19 + 64776);
            *(_QWORD *)(v19 + 64776) = v165;
            if (v166)
            {
              if (*(_DWORD *)v166 == 2)
              {
                WTF::StringImpl::~StringImpl(v166, v7, (uint64_t)v8, v9, v10, v11, v12, v13);
                WTF::fastFree(v225, v226, v227, v228, v229, v230, v231, v232);
              }
              else
              {
                *(_DWORD *)v166 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(a3 + 8) + 16) & 0x10) == 0)
          {
            v167 = *(_DWORD **)(v19 + 64776);
            *v167 += 2;
            __dmb(0xAu);
            v168 = *(WTF::StringImpl **)(a3 + 8);
            *(_QWORD *)(a3 + 8) = v167;
            v272[0] = v168;
            v169 = (_QWORD *)(v19 + 808);
            v170 = *(unsigned int *)(v19 + 820);
            if ((_DWORD)v170 == *(_DWORD *)(v19 + 816))
            {
              v172 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v169, v170 + 1, (unint64_t)v272);
              v170 = *(unsigned int *)(v19 + 820);
              v171 = (WTF::StringImpl **)(*(_QWORD *)(v19 + 808) + 8 * v170);
              v168 = *v172;
            }
            else
            {
              v171 = (WTF::StringImpl **)(*v169 + 8 * v170);
              v172 = v272;
            }
            *v172 = 0;
            *v171 = v168;
            *(_DWORD *)(v19 + 820) = v170 + 1;
            v173 = v272[0];
            v272[0] = 0;
            if (v173)
            {
              if (*(_DWORD *)v173 == 2)
              {
                WTF::StringImpl::~StringImpl(v173, v7, (uint64_t)v8, v9, v10, v11, v12, v13);
                WTF::fastFree(v184, v185, v186, v187, v188, v189, v190, v191);
              }
              else
              {
                *(_DWORD *)v173 -= 2;
              }
            }
          }
          v20 = *(WTF::StringImpl **)(v19 + 64776);
        }
LABEL_12:
        v21 = *(_DWORD *)v20 + 2;
LABEL_13:
        *(_DWORD *)v20 = v21;
        goto LABEL_14;
      }
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)a3, (JSC::JSGlobalObject *)v270);
      if (!*(_DWORD *)(v19 + 80))
        goto LABEL_75;
      v241 = *(_DWORD *)(v19 + 80);
      if ((v241 & 0x27) != 0 && (v241 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v19 + 64), 7u, (uint64_t)v8, v9, v10, v11, v12, v13);
      v183 = *(_QWORD *)(v19 + 16);
LABEL_146:
      v18 = v269;
      if (v183)
      {
        v20 = 0;
        v152 = v272[0];
        v272[0] = 0;
        if (!v152)
          goto LABEL_14;
LABEL_77:
        if (*(_DWORD *)v152 != 2)
        {
          *(_DWORD *)v152 -= 2;
          goto LABEL_14;
        }
        goto LABEL_109;
      }
LABEL_75:
      v20 = v272[0];
      if (!v272[0])
        goto LABEL_14;
      *(_DWORD *)v272[0] += 2;
      v272[0] = 0;
      v152 = v20;
      goto LABEL_77;
    }
    v149 = JSC::JSCell::toPrimitive(a3, (JSC::VM **)v270, (JSC::Structure *)2, v9, v10, v11, v12, v13);
  }
  v271 = (WTF::StringImpl *)v149;
  if (!*(_DWORD *)(v19 + 80))
    goto LABEL_69;
  v223 = *(_DWORD *)(v19 + 80);
  if ((v223 & 0x27) != 0 && (v223 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v19 + 64), 7u, (uint64_t)v8, v9, v10, v11, v12, v13);
  v18 = v269;
  if (!*(_QWORD *)(v19 + 16))
  {
LABEL_69:
    if ((v149 & 0xFFFE000000000002) == 0)
    {
      v150 = *(unsigned __int8 *)(v149 + 5);
      if (v150 == 2)
        goto LABEL_80;
      if (v150 == 4)
      {
        v20 = *(WTF::StringImpl **)(v149 + 8);
        v151 = *(_DWORD *)v20;
        *(_DWORD *)v20 += 4;
        v21 = v151 + 2;
        if (v21)
          goto LABEL_13;
        v152 = v20;
LABEL_109:
        WTF::StringImpl::~StringImpl(v152, v7, (uint64_t)v8, v9, v10, v11, v12, v13);
        WTF::fastFree(v174, v175, v176, v177, v178, v179, v180, v181);
        goto LABEL_14;
      }
    }
    v149 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v271, v270, (JSC::Structure *)1, v9, v10, v11, v12, v13);
LABEL_80:
    if (*(_DWORD *)(v19 + 80))
    {
      v224 = *(_DWORD *)(v19 + 80);
      if ((v224 & 0x27) != 0 && (v224 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v19 + 64), 7u, (uint64_t)v8, v9, v10, v11, v12, v13);
      v18 = v269;
      if (*(_QWORD *)(v19 + 16))
      {
        v20 = 0;
        goto LABEL_14;
      }
    }
    v20 = *(WTF::StringImpl **)(v149 + 8);
    v153 = *(_QWORD *)(v270 + 56);
    if ((v20 & 1) == 0)
    {
      if ((*((_BYTE *)v20 + 16) & 0x10) == 0)
      {
        v154 = *(WTF::StringImpl **)(v153 + 64768);
        if (v154 != v20)
        {
          *(_DWORD *)v20 += 2;
          *(_QWORD *)(v153 + 64768) = v20;
          if (v154)
          {
            if (*(_DWORD *)v154 == 2)
            {
              WTF::StringImpl::~StringImpl(v154, v7, (uint64_t)v8, v9, v10, v11, v12, v13);
              WTF::fastFree(v255, v256, v257, v258, v259, v260, v261, v262);
            }
            else
            {
              *(_DWORD *)v154 -= 2;
            }
            v18 = v269;
          }
          v155 = *(WTF::StringImpl **)(v149 + 8);
          if (v155)
          {
            if ((*((_BYTE *)v155 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v155 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v155, v8, v9, v10, v11, v12, v13, (WTF *)v272);
              v155 = v272[0];
            }
          }
          v156 = *(WTF::StringImpl **)(v153 + 64776);
          *(_QWORD *)(v153 + 64776) = v155;
          if (v156)
          {
            if (*(_DWORD *)v156 == 2)
            {
              WTF::StringImpl::~StringImpl(v156, v7, (uint64_t)v8, v9, v10, v11, v12, v13);
              WTF::fastFree(v247, v248, v249, v250, v251, v252, v253, v254);
            }
            else
            {
              *(_DWORD *)v156 -= 2;
            }
            v18 = v269;
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v149 + 8) + 16) & 0x10) == 0)
        {
          v157 = *(WTF::StringImpl **)(v153 + 64776);
          *(_DWORD *)v157 += 2;
          v272[0] = v157;
          __dmb(0xAu);
          v158 = *(WTF::StringImpl **)(v149 + 8);
          *(WTF::StringImpl **)(v149 + 8) = v272[0];
          v272[0] = v158;
          v159 = (_QWORD *)(v153 + 808);
          v160 = *(unsigned int *)(v153 + 820);
          if ((_DWORD)v160 == *(_DWORD *)(v153 + 816))
          {
            v162 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v159, v160 + 1, (unint64_t)v272);
            v160 = *(unsigned int *)(v153 + 820);
            v161 = (WTF::StringImpl **)(*(_QWORD *)(v153 + 808) + 8 * v160);
            v158 = *v162;
            v18 = v269;
          }
          else
          {
            v161 = (WTF::StringImpl **)(*v159 + 8 * v160);
            v162 = v272;
          }
          *v162 = 0;
          *v161 = v158;
          *(_DWORD *)(v153 + 820) = v160 + 1;
          v163 = v272[0];
          v272[0] = 0;
          if (v163)
          {
            if (*(_DWORD *)v163 == 2)
            {
              WTF::StringImpl::~StringImpl(v163, v7, (uint64_t)v8, v9, v10, v11, v12, v13);
              WTF::fastFree(v207, v208, v209, v210, v211, v212, v213, v214);
            }
            else
            {
              *(_DWORD *)v163 -= 2;
            }
          }
        }
        v20 = *(WTF::StringImpl **)(v153 + 64776);
      }
      goto LABEL_12;
    }
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v149, (JSC::JSGlobalObject *)v270);
    if (!*(_DWORD *)(v153 + 80))
      goto LABEL_75;
    v182 = *(_DWORD *)(v153 + 80);
    if ((v182 & 0x27) != 0 && (v182 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v153 + 64), 7u, (uint64_t)v8, v9, v10, v11, v12, v13);
    v183 = *(_QWORD *)(v153 + 16);
    goto LABEL_146;
  }
  v20 = *(WTF::StringImpl **)(*(_QWORD *)(v19 + 41952) + 8);
  if (v20)
    *(_DWORD *)v20 += 2;
  v18 = v269;
  if (!*(_DWORD *)(v5 + 80))
    goto LABEL_180;
LABEL_14:
  v193 = *(_DWORD *)(v5 + 80);
  if ((v193 & 0x27) != 0 && (v193 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v5 + 64), 7u, (uint64_t)v8, v9, v10, v11, v12, v13);
  v194 = *(_QWORD *)(v5 + 16);
  if (v194)
  {
    if (*(_QWORD *)(*(_QWORD *)(v270 + 56) + 24) != v194)
    {
      v195 = (unsigned int *)(v5 + 80);
      *(_QWORD *)(v5 + 16) = 0;
      do
        v196 = __ldaxr(v195);
      while (__stlxr(v196 & 0xFFFFFFEF, v195));
      JSC::JSPromise::reject(SlowCase, (uint64_t *)v270, *(_QWORD *)(v194 + 8), v9, v10, v11, v12, v13);
    }
  }
  else
  {
LABEL_180:
    if (-[JSContext moduleLoaderDelegate](v18, "moduleLoaderDelegate"))
    {
      v29 = *(_QWORD *)(v5 + 712);
      if (!v29)
      {
        JSC::HandleSet::grow((JSC::HandleSet *)(v5 + 672), v22, v23, v24, v25, v26, v27, v28);
        v29 = *(_QWORD *)(v5 + 712);
      }
      v268 = a3;
      *(_QWORD *)(v5 + 712) = *(_QWORD *)v29;
      *(_QWORD *)(v29 + 16) = 0;
      v30 = (uint64_t *)(v29 + 16);
      *(_QWORD *)v29 = 0;
      *(_QWORD *)(v29 + 8) = 0;
      v31 = *(unint64_t **)((v29 & 0xFFFFFFFFFFFFF000) + 0x10);
      v32 = v31[3];
      v31 += 3;
      *(_QWORD *)v29 = v32;
      *(_QWORD *)(v29 + 8) = v31;
      *v31 = v29;
      *(_QWORD *)(v32 + 8) = v29;
      *(_QWORD *)(v29 + 16) = SlowCase;
      v33 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v33 = 0x700000002;
      *(_QWORD *)(v33 + 8) = "resolve";
      *(_DWORD *)(v33 + 16) = 4;
      v272[0] = (WTF::StringImpl *)v33;
      v41 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF000) + 0x10);
      v42 = *(_QWORD *)(v41 + 40);
      if (!v42)
      {
        JSC::HandleSet::grow(*(JSC::HandleSet **)((v29 & 0xFFFFFFFFFFFFF000) + 0x10), v34, v35, v36, v37, v38, v39, v40);
        v42 = *(_QWORD *)(v41 + 40);
      }
      *(_QWORD *)(v41 + 40) = *(_QWORD *)v42;
      *(_QWORD *)(v42 + 16) = 0;
      v43 = (uint64_t *)(v42 + 16);
      *(_QWORD *)v42 = 0;
      *(_QWORD *)(v42 + 8) = 0;
      v44 = *v30;
      if (*v30)
      {
        v45 = *(unint64_t **)((v42 & 0xFFFFFFFFFFFFF000) + 0x10);
        v46 = v45[3];
        v45 += 3;
        *(_QWORD *)v42 = v46;
        *(_QWORD *)(v42 + 8) = v45;
        *v45 = v42;
        *(_QWORD *)(v46 + 8) = v42;
      }
      *v43 = v44;
      if (v20)
        *(_DWORD *)v20 += 2;
      v54 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v54 = &off_1E357B5C8;
      *((_QWORD *)v54 + 1) = 0;
      v55 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF000) + 0x10);
      v56 = *(_QWORD *)(v55 + 40);
      if (!v56)
      {
        JSC::HandleSet::grow(*(JSC::HandleSet **)((v42 & 0xFFFFFFFFFFFFF000) + 0x10), v47, v48, v49, v50, v51, v52, v53);
        v56 = *(_QWORD *)(v55 + 40);
      }
      *(_QWORD *)(v55 + 40) = *(_QWORD *)v56;
      *(_QWORD *)(v56 + 16) = 0;
      v57 = (_QWORD *)(v56 + 16);
      *(_QWORD *)v56 = 0;
      *(_QWORD *)(v56 + 8) = 0;
      *((_QWORD *)v54 + 1) = v56 + 16;
      v58 = *v43;
      if ((*v43 != 0) != (*(_QWORD *)(v56 + 16) != 0))
      {
        if (v58)
        {
          v59 = *(unint64_t **)((v56 & 0xFFFFFFFFFFFFF000) + 0x10);
          v60 = v59[3];
          v59 += 3;
          *(_QWORD *)v56 = v60;
          *(_QWORD *)(v56 + 8) = v59;
          *v59 = v56;
          *(_QWORD *)(v60 + 8) = v56;
        }
        else
        {
          v243 = *(_QWORD *)v56;
          v242 = *(_QWORD **)(v56 + 8);
          *v242 = *(_QWORD *)v56;
          *(_QWORD *)(v243 + 8) = v242;
          *(_QWORD *)v56 = 0;
          *(_QWORD *)(v56 + 8) = 0;
          v57 = (_QWORD *)*((_QWORD *)v54 + 1);
        }
      }
      *v57 = v58;
      *((_QWORD *)v54 + 2) = v20;
      v271 = v54;
      v68 = JSC::JSNativeStdFunction::create(v5, v270, 1, v272, (uint64_t *)&v271, 0, (unint64_t)JSC::callHostFunctionAsConstructor, v53);
      if (v271)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v271 + 8))(v271);
      v69 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF000) + 0x10);
      v70 = *(_QWORD **)(v42 + 8);
      if (v70)
      {
        v71 = *(_QWORD *)v42;
        *v70 = *(_QWORD *)v42;
        *(_QWORD *)(v71 + 8) = v70;
        *(_QWORD *)v42 = 0;
        *(_QWORD *)(v42 + 8) = 0;
      }
      *(_QWORD *)v42 = *(_QWORD *)(v69 + 40);
      *(_QWORD *)(v69 + 40) = v42;
      v72 = v272[0];
      v272[0] = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
        {
          WTF::StringImpl::~StringImpl(v72, v61, v62, v63, v64, v65, v66, v67);
          WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
        }
        else
        {
          *(_DWORD *)v72 -= 2;
        }
      }
      v73 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v73 = 0x600000002;
      *(_QWORD *)(v73 + 8) = "reject";
      *(_DWORD *)(v73 + 16) = 4;
      v272[0] = (WTF::StringImpl *)v73;
      v81 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF000) + 0x10);
      v82 = *(_QWORD *)(v81 + 40);
      if (!v82)
      {
        JSC::HandleSet::grow(*(JSC::HandleSet **)((v29 & 0xFFFFFFFFFFFFF000) + 0x10), v74, v75, v76, v77, v78, v79, v80);
        v82 = *(_QWORD *)(v81 + 40);
      }
      *(_QWORD *)(v81 + 40) = *(_QWORD *)v82;
      *(_QWORD *)(v82 + 16) = 0;
      v83 = (uint64_t *)(v82 + 16);
      *(_QWORD *)v82 = 0;
      *(_QWORD *)(v82 + 8) = 0;
      v84 = *v30;
      if (*v30)
      {
        v85 = *(unint64_t **)((v82 & 0xFFFFFFFFFFFFF000) + 0x10);
        v86 = v85[3];
        v85 += 3;
        *(_QWORD *)v82 = v86;
        *(_QWORD *)(v82 + 8) = v85;
        *v85 = v82;
        *(_QWORD *)(v86 + 8) = v82;
      }
      *v83 = v84;
      v87 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v87 = off_1E357B5F0;
      *((_QWORD *)v87 + 1) = 0;
      v95 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFF000) + 0x10);
      v96 = *(_QWORD *)(v95 + 40);
      if (!v96)
      {
        v246 = v87;
        JSC::HandleSet::grow(*(JSC::HandleSet **)((v82 & 0xFFFFFFFFFFFFF000) + 0x10), v88, v89, v90, v91, v92, v93, v94);
        v87 = v246;
        v96 = *(_QWORD *)(v95 + 40);
      }
      *(_QWORD *)(v95 + 40) = *(_QWORD *)v96;
      *(_QWORD *)(v96 + 16) = 0;
      v97 = (_QWORD *)(v96 + 16);
      *(_QWORD *)v96 = 0;
      *(_QWORD *)(v96 + 8) = 0;
      *((_QWORD *)v87 + 1) = v96 + 16;
      v98 = *v83;
      if ((*v83 != 0) == (*(_QWORD *)(v96 + 16) != 0))
      {
        v99 = v269;
      }
      else
      {
        v99 = v269;
        if (v98)
        {
          v100 = *(unint64_t **)((v96 & 0xFFFFFFFFFFFFF000) + 0x10);
          v101 = v100[3];
          v100 += 3;
          *(_QWORD *)v96 = v101;
          *(_QWORD *)(v96 + 8) = v100;
          *v100 = v96;
          *(_QWORD *)(v101 + 8) = v96;
        }
        else
        {
          v245 = *(_QWORD *)v96;
          v244 = *(_QWORD **)(v96 + 8);
          *v244 = *(_QWORD *)v96;
          *(_QWORD *)(v245 + 8) = v244;
          *(_QWORD *)v96 = 0;
          *(_QWORD *)(v96 + 8) = 0;
          v97 = (_QWORD *)*((_QWORD *)v87 + 1);
        }
      }
      *v97 = v98;
      *((_QWORD *)v87 + 2) = v270;
      v271 = v87;
      v109 = JSC::JSNativeStdFunction::create(v5, v270, 1, v272, (uint64_t *)&v271, 0, (unint64_t)JSC::callHostFunctionAsConstructor, v94);
      if (v271)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v271 + 8))(v271);
      v110 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFF000) + 0x10);
      v111 = *(_QWORD **)(v82 + 8);
      if (v111)
      {
        v112 = *(_QWORD *)v82;
        *v111 = *(_QWORD *)v82;
        *(_QWORD *)(v112 + 8) = v111;
        *(_QWORD *)v82 = 0;
        *(_QWORD *)(v82 + 8) = 0;
      }
      *(_QWORD *)v82 = *(_QWORD *)(v110 + 40);
      *(_QWORD *)(v110 + 40) = v82;
      v113 = v272[0];
      v272[0] = 0;
      if (v113)
      {
        if (*(_DWORD *)v113 == 2)
        {
          WTF::StringImpl::~StringImpl(v113, v102, v103, v104, v105, v106, v107, v108);
          WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
        }
        else
        {
          *(_DWORD *)v113 -= 2;
        }
      }
      objc_msgSend(-[JSContext moduleLoaderDelegate](v99, "moduleLoaderDelegate"), "context:fetchModuleForIdentifier:withResolveHandler:andRejectHandler:", v99, +[JSValue valueWithJSValueRef:inContext:](JSValue, "valueWithJSValueRef:inContext:", v268, v99), +[JSValue valueWithJSValueRef:inContext:](JSValue, "valueWithJSValueRef:inContext:", v68, v99), +[JSValue valueWithJSValueRef:inContext:](JSValue, "valueWithJSValueRef:inContext:", v109, v99));
      if (-[JSContext exception](v99, "exception"))
      {
        v114 = -[JSValue JSValueRef](-[JSContext exception](v99, "exception"), "JSValueRef");
        if (v114)
          v120 = v114;
        else
          v120 = 2;
        JSC::JSPromise::reject(SlowCase, (uint64_t *)v270, v120, v115, v116, v117, v118, v119);
        -[JSContext setException:](v99, "setException:", 0);
      }
      v121 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF000) + 0x10);
      v122 = *(_QWORD **)(v29 + 8);
      if (v122)
      {
        v123 = *(_QWORD *)v29;
        *v122 = *(_QWORD *)v29;
        *(_QWORD *)(v123 + 8) = v122;
        *(_QWORD *)v29 = 0;
        *(_QWORD *)(v29 + 8) = 0;
      }
      *(_QWORD *)v29 = *(_QWORD *)(v121 + 40);
      *(_QWORD *)(v121 + 40) = v29;
    }
    else
    {
      v197 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v197 = 0x1A00000002;
      *(_QWORD *)(v197 + 8) = "No module loader provided.";
      *(_DWORD *)(v197 + 16) = 4;
      v271 = (WTF::StringImpl *)v197;
      v198 = *(JSC::Heap ***)(v270 + 56);
      v199 = *(_QWORD *)(v270 + 1504);
      if ((v199 & 1) != 0)
      {
        v266 = *(uint64_t (**)(WTF::StringImpl **))(v199 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v270 & 8) != 0)
          v267 = (WTF::StringImpl **)(v270 - 16);
        else
          v267 = (WTF::StringImpl **)(v270 & 0xFFFFFFFFFFFFC000 | 8);
        v272[0] = *v267;
        v272[1] = (WTF::StringImpl *)v270;
        v272[2] = (WTF::StringImpl *)(v270 + 1504);
        v199 = v266(v272);
      }
      v200 = JSC::ErrorInstance::create(v198, v199, &v271, 0, 0, 0, 0, 1);
      JSC::JSPromise::reject(SlowCase, (uint64_t *)v270, v200, v201, v202, v203, v204, v205);
      v206 = v271;
      v271 = 0;
      if (v206)
      {
        if (*(_DWORD *)v206 == 2)
        {
          WTF::StringImpl::~StringImpl(v206, v7, (uint64_t)v8, v9, v10, v11, v12, v13);
          WTF::fastFree(v215, v216, v217, v218, v219, v220, v221, v222);
        }
        else
        {
          *(_DWORD *)v206 -= 2;
        }
      }
    }
  }
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v7, (uint64_t)v8, v9, v10, v11, v12, v13);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  return SlowCase;
}

void sub_197EF7E90(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16)
{
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
    {
      WTF::StringImpl::~StringImpl(a16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      *(_DWORD *)a16 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

int *JSC::JSAPIGlobalObject::moduleLoaderCreateImportMetaProperties(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  WTF::StringImpl *v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  _QWORD v41[2];
  int v42;
  int v43;
  uint64_t v44;

  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(a1 + 932);
  if (v10)
    v11 = (JSC::VM *)(16 * (v10 & 0xFFFFFFFE));
  else
    v11 = 0;
  v18 = (int *)JSC::constructEmptyObject(*(JSC **)(a1 + 56), v11, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v9 + 80))
  {
    v39 = *(_DWORD *)(v9 + 80);
    if ((v39 & 0x27) != 0 && (v39 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"filename", 8uLL, v13, v14, v15, v16, v17, v41);
  v19 = (WTF::StringImpl *)v41[0];
  v41[0] = 0;
  v41[1] = v18;
  v42 = -1;
  v20.n128_u64[0] = 0x100000001000000;
  v43 = 0x1000000;
  v44 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v18, v9, (unint64_t)v19, (uint64_t)a3, 0, (uint64_t)v41, v21, v22, v20);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  if (*(_DWORD *)(v9 + 80))
  {
    v40 = *(_DWORD *)(v9 + 80);
    if ((v40 & 0x27) != 0 && (v40 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v24, v25, v26, v27, v28, v29);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  return v18;
}

void sub_197EF8108(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t JSC::JSAPIGlobalObject::moduleLoaderEvaluate(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  id v13;
  WTF::AtomStringImpl *v14;
  const WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  WTF::StringImpl *v22;
  void *v23;
  const __CFString *v24;
  uint64_t v25;
  char v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  char **v35;
  BOOL v36;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  WTF::StringImpl *v49;
  unint64_t v50;
  id v51;

  v50 = a3;
  v12 = *((_QWORD *)a1 + 7);
  v13 = -[JSContext moduleLoaderDelegate](+[JSContext contextWithJSGlobalContextRef:](JSContext, "contextWithJSGlobalContextRef:", a1), "moduleLoaderDelegate");
  if ((objc_opt_respondsToSelector() & 1) == 0 && (objc_opt_respondsToSelector() & 1) == 0)
  {
    v25 = 0;
    goto LABEL_20;
  }
  if ((a3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a3 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v50, a1, v15, v16, v17, v18, v19, v20, (int **)&v49);
    goto LABEL_9;
  }
  v22 = *(WTF::StringImpl **)(a3 + 8);
  if ((v22 & 1) != 0)
  {
    v22 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(a3, a1, (uint64_t)v15, v16, v21, v17, v18, v19, v20);
    if (!v22)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (v22)
LABEL_7:
    *(_DWORD *)v22 += 2;
LABEL_8:
  v48 = a3;
  v49 = v22;
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_10;
LABEL_9:
  v47 = *(_DWORD *)(v12 + 80);
  if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)v15, v16, v17, v18, v19, v20);
  if (*(_QWORD *)(v12 + 16))
  {
    v26 = 0;
    v25 = 0;
  }
  else
  {
LABEL_10:
    v23 = (void *)MEMORY[0x1E0C99E98];
    if (v49)
    {
      WTF::StringImpl::createCFString(v49, (CFStringRef *)&v51);
      v24 = (const __CFString *)v51;
    }
    else
    {
      v24 = &stru_1E35BF3F0;
    }
    v25 = objc_msgSend(v23, "URLWithString:", v24, v48);
    v26 = 1;
  }
  v27 = v49;
  v49 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
      if ((v26 & 1) == 0)
        return 0;
      goto LABEL_20;
    }
    *(_DWORD *)v27 -= 2;
  }
  if ((v26 & 1) == 0)
    return 0;
LABEL_20:
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v13, "willEvaluateModule:", v25);
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v33 = *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C);
  v34 = *(_DWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C) != 0;
  v35 = (char **)(16 * v33);
  if ((_DWORD)v33)
    v36 = v35 == &JSC::AbstractModuleRecord::s_info;
  else
    v36 = 1;
  if (!v36)
  {
    do
    {
      v35 = (char **)v35[2];
      v34 = v35 != 0;
    }
    while (v35 != &JSC::AbstractModuleRecord::s_info && v35 != 0);
  }
  if (v34)
    v28 = JSC::AbstractModuleRecord::evaluate(a4, a1, a6, a7, v29, v30, v31, v32);
  else
LABEL_33:
    v28 = 10;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v13, "didEvaluateModule:", v25);
  return v28;
}

void sub_197EF83A8(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, WTF::StringImpl *a10)
{
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::~StringImpl(a10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t JSC::JSAPIGlobalObject::reportUncaughtExceptionAtEventLoop(JSC::JSAPIGlobalObject *this, JSC::JSGlobalObject *a2, JSC::Exception *a3)
{
  return -[JSContext notifyException:](+[JSContext contextWithJSGlobalContextRef:](JSContext, "contextWithJSGlobalContextRef:", this), "notifyException:", *((_QWORD *)a2 + 1));
}

uint64_t JSC::JSGlobalObject::scriptExecutionStatus()
{
  return 0;
}

unint64_t JSC::JSGlobalObject::deriveShadowRealmGlobalObject(JSC::JSGlobalObject *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t SlowCase;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v9 = *((_QWORD *)this + 7);
  v21 = 67381299;
  SlowCase = *(_QWORD *)(v9 + 40136);
  if (SlowCase < *(_QWORD *)(v9 + 40144))
    goto LABEL_2;
  SlowCase = *(_QWORD *)(v9 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v17 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v9 + 40160);
    *(_QWORD *)(v9 + 40144) = SlowCase + HIDWORD(v17);
    *(_QWORD *)(v9 + 40152) = SlowCase + (int)v17;
LABEL_2:
    *(_QWORD *)(v9 + 40136) = SlowCase + 128;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM((JSC *)v9, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v9 + 40112, v9 + 192, 128, 0, 0, v18, v19, v20);
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v9, 0, 2, (uint64_t)&v21, (unint64_t)&JSC::JSGlobalObject::s_info, 0, 0);
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x4000000u;
  return JSC::JSGlobalObject::createWithCustomMethodTable(v9, (JSC::VM *)SlowCase, *((uint64_t (***)(JSC::JSGlobalObject *__hidden, const JSC::JSGlobalObject *))this + 410), v11, v12, v13, v14, v15);
}

void JSC::JSGlobalObject::codeForEval(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t JSC::JSGlobalObject::canCompileStrings()
{
  return 1;
}

unint64_t JSC::constructEmptyObject(JSC *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t result;
  unint64_t v16;
  JSC::VM *v17;
  uint64_t SlowCase;
  JSC::VM *v19;
  JSC::VM *v20;
  uint64_t Slow;
  JSC::VM *v22;

  v8 = (unint64_t)a2;
  v10 = (JSC::VM *)(8 * *((unsigned __int8 *)a2 + 14));
  v11 = *(_QWORD *)((char *)this + ((((unint64_t)v10 + 31) >> 1) & 0x7F8) + 15024);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 + 60);
    v13 = *(_QWORD *)(v11 + 24);
    if (v13 >= *(_QWORD *)(v11 + 32))
    {
      v13 = *(_QWORD *)(v11 + 40);
      if ((v13 & 1) != 0)
      {
        v22 = v10;
        v17 = (JSC::VM *)v8;
        JSC::sanitizeStackForVM(this, v10, (uint64_t)a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v11, (char *)this + 192, v12, 0, 0);
        v8 = (unint64_t)v17;
        v10 = v22;
        v13 = SlowCase;
        goto LABEL_4;
      }
      v16 = *(_QWORD *)(v13 + 8) ^ *(_QWORD *)(v11 + 48);
      *(_QWORD *)(v11 + 32) = v13 + HIDWORD(v16);
      *(_QWORD *)(v11 + 40) = v13 + (int)v16;
    }
    *(_QWORD *)(v11 + 24) = v13 + v12;
  }
  else
  {
    v19 = v10;
    v20 = (JSC::VM *)v8;
    Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)this + 14936, this, ((_WORD)v10 + 31) & 0xFF0, 0, a5, a6, a7, a8);
    v8 = (unint64_t)v20;
    v10 = v19;
    v13 = Slow;
    if (!Slow)
    {
      result = 110;
      __break(0xC471u);
      return result;
    }
  }
LABEL_4:
  *(_DWORD *)v13 = 0;
  v14 = *(_DWORD *)(v8 + 8);
  *(_DWORD *)v13 = v8 >> 4;
  *(_DWORD *)(v13 + 4) = v14;
  *(_QWORD *)(v13 + 8) = 0;
  bzero((void *)(v13 + 16), (size_t)v10);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return v13;
}

void JSAPIWrapperObjectHandleOwner::finalize(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef cf;

  if (a2)
    v3 = *a2;
  else
    v3 = 0;
  v4 = *(const void **)(v3 + 16);
  if (v4)
  {
    if ((v3 & 8) != 0)
      v5 = (uint64_t *)(v3 - 16);
    else
      v5 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFC000 | 8);
    v6 = *v5;
    cf = v4;
    v7 = *(unsigned int *)(v6 + 908);
    if ((_DWORD)v7 == *(_DWORD *)(v6 + 904))
    {
      WTF::Vector<WTF::RetainPtr<void const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RetainPtr<objc_object *>>(v6 + 896, (uint64_t *)&cf);
      v8 = cf;
      cf = 0;
      if (v8)
        CFRelease(v8);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 896) + 8 * v7) = v4;
      *(_DWORD *)(v6 + 908) = v7 + 1;
    }
    a2[1] = 3;
  }
}

void sub_197EF8744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t JSAPIWrapperObjectHandleOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  unsigned __int8 *v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;

  if (a2)
    v5 = *a2;
  else
    v5 = 0;
  if (!*(_QWORD *)(v5 + 16))
    return 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 40))(a4, *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28));
  if (!(_DWORD)result)
    return result;
  v7 = *(void **)(v5 + 16);
  v8 = *(_QWORD *)(a4 + 120);
  v9 = *(_QWORD *)(v8 + 48);
  if (v8 + 56 != v9)
  {
    v10 = *(_DWORD *)(v9 + 4);
    v11 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = v14;
    while (1)
    {
      v16 = *(void **)(v9 + 8 * v15 + 16);
      if (!v16)
        return 0;
      if (v7 == v16)
        goto LABEL_18;
      v15 = (v15 + 1) & v10;
      if (v15 == v14)
      {
        __break(0xC471u);
        JUMPOUT(0x197EF8840);
      }
    }
  }
  v17 = (unsigned __int8 *)(v8 + 80);
  if (__ldaxr((unsigned __int8 *)(v8 + 80)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_15;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 80);
LABEL_15:
  v19 = WTF::ConcurrentPtrHashSet::containsImpl((WTF::ConcurrentPtrHashSet *)v8, v7);
  v26 = v19;
  v27 = __ldxr(v17);
  if (v27 != 1)
  {
    __clrex();
LABEL_22:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v17, 0, v20, v21, v22, v23, v24, v25);
    if (v26)
      goto LABEL_18;
    return 0;
  }
  if (__stlxr(0, v17))
    goto LABEL_22;
  if (!v19)
    return 0;
LABEL_18:
  if (*(_BYTE *)(a4 + 131))
    (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v7);
  return 1;
}

void JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::visitChildren(JSC::JSObject *a1, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  char v15;
  _QWORD v16[2];
  _QWORD *v17;
  char v18;

  v13[0] = a2;
  v13[1] = a1;
  v15 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v14 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    v16[0] = a2;
    v16[1] = a1;
    v18 = 0;
    v17 = v13;
    *((_QWORD *)a2 + 11) = v16;
    JSC::JSObject::visitChildren(a1, a2, a3);
    v11 = (void *)*((_QWORD *)a1 + 2);
    if (v11)
      scanExternalObjectGraph((JSC::VM *)(*((_QWORD *)a2 + 10) - 192), a2, v11, 0);
    *(_QWORD *)(v16[0] + 88) = v17;
    v12 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 16);
    if (v12)
      JSC::JSCallbackObjectData::JSPrivatePropertyMap::visitChildren<JSC::AbstractSlotVisitor>(v12, (uint64_t)a2, (uint64_t)v11, v6, v7, v8, v9, v10);
    *(_QWORD *)(v13[0] + 88) = v14;
  }
}

void sub_197EF89BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(_QWORD *)(a9 + 88) = a11;
  _Unwind_Resume(a1);
}

void JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::visitChildren(JSC::JSObject *a1, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  JSC::JSObject::visitChildren(a1, a2, a3, a4, a5, a6, a7, a8);
  v15 = (void *)*((_QWORD *)a1 + 2);
  if (v15)
    scanExternalObjectGraph((JSC::VM *)(*((_QWORD *)a2 + 10) - 192), a2, v15, 0);
  v16 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 16);
  if (v16)
    JSC::JSCallbackObjectData::JSPrivatePropertyMap::visitChildren<JSC::SlotVisitor>(v16, (uint64_t)a2, (uint64_t)v15, v10, v11, v12, v13, v14);
}

void JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::destroy(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t i;
  void (*v13)(uint64_t);
  JSC::JSCallbackObjectData *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
  if ((a1 & 8) != 0)
    v9 = (_QWORD *)(a1 - 16);
  v10 = (_QWORD *)(*v9 + 41896);
  v11 = *(_QWORD *)(a1 + 32);
  *v10 = a1;
  v10[1] = v11;
  for (i = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8); i; i = *(_QWORD *)(i + 8))
  {
    v13 = *(void (**)(uint64_t))(i + 32);
    if (v13)
      v13(a1);
  }
  *v10 = 0;
  v10[1] = 0;
  v14 = *(JSC::JSCallbackObjectData **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v14)
  {
    JSC::JSCallbackObjectData::~JSCallbackObjectData(v14, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
  }
}

void sub_197EF8ACC(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::JSCallbackObjectData *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v10 = *(JSC::JSCallbackObjectData **)(v8 + 24);
  *(_QWORD *)(v8 + 24) = 0;
  if (v10)
  {
    JSC::JSCallbackObjectData::~JSCallbackObjectData(v10, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::getCallData@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)a2 = 0;
  v2 = *(_QWORD *)(result + 24);
  while (1)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      break;
    if (*(_QWORD *)(v2 + 80))
    {
      *(_BYTE *)a2 = 1;
      *(_QWORD *)(a2 + 8) = JSC::callJSAPIWrapperObjectCallbackObject;
      *(_BYTE *)(a2 + 16) = 0;
      return result;
    }
  }
  return result;
}

uint64_t JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::getConstructData@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)a2 = 0;
  v2 = *(_QWORD *)(result + 24);
  while (1)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      break;
    if (*(_QWORD *)(v2 + 88))
    {
      *(_BYTE *)a2 = 1;
      *(_QWORD *)(a2 + 8) = JSC::constructJSAPIWrapperObjectCallbackObject;
      *(_BYTE *)(a2 + 16) = 0;
      return result;
    }
  }
  return result;
}

uint64_t JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::put(uint64_t a1, JSC::VM **a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  const JSC::PropertyTable *v9;
  unint64_t v10;
  uint64_t v13;
  OpaqueJSClass *v14;
  unint64_t v15;
  uint64_t (*v16)(JSC::VM **, uint64_t, unint64_t, const JSC::PropertyTable *, JSC::Exception **);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  unsigned int *v23;
  JSC::Exception *v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int i;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t (*v36)(JSC::VM **, uint64_t, _QWORD, const JSC::PropertyTable *, JSC::Exception **);
  double v37;
  uint64_t v38;
  unsigned int *v39;
  JSC::Exception *v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int j;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  JSC::VM *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  int v69;
  unsigned int v70;
  int v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int OwnPropertySlotByIndex;
  int v79;
  _BYTE *v80;
  uint64_t v81;
  unsigned __int16 *v83;
  uint64_t v84;
  unsigned int v85;
  BOOL v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 *v102;
  uint64_t v103;
  unsigned int v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  JSC::VM *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  char v117;
  JSC::VM *v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  JSC::Exception *v122[2];
  int v123;
  int v124;
  uint64_t v125;

  v9 = (const JSC::PropertyTable *)a4;
  v10 = a3;
  v109 = a2[7];
  v13 = *(_QWORD *)(a5 + 8);
  if (v13 != a1 && ((v13 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v13 + 5) != 32 || *(_QWORD *)(v13 + 16) != a1))
    return JSC::JSObject::put((unsigned __int8 *)a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
  v108 = a5;
  if (!a3 || (v14 = *(OpaqueJSClass **)(*(_QWORD *)(a1 + 24) + 8)) == 0)
  {
    v15 = 0;
LABEL_64:
    v20 = JSC::JSObject::put((unsigned __int8 *)a1, (unint64_t)a2, v10, v9, v108, a6, a7, a8, a9);
    goto LABEL_65;
  }
  v15 = 0;
  while (1)
  {
    v16 = (uint64_t (*)(JSC::VM **, uint64_t, unint64_t, const JSC::PropertyTable *, JSC::Exception **))*((_QWORD *)v14 + 7);
    if (v16)
    {
      if (!v15)
      {
        *(_DWORD *)v10 += 2;
        v17 = WTF::fastMalloc((WTF *)0x18);
        v15 = v17;
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = v10;
        if ((*(_BYTE *)(v10 + 16) & 4) != 0)
          v18 = 0;
        else
          v18 = *(_QWORD *)(v10 + 8);
        *(_QWORD *)(v17 + 16) = v18;
      }
      v122[0] = 0;
      JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v110, a2[7], a3, a4, a5, a6, a7, a8);
      v20 = v16(a2, a1, v15, v9, v122);
      if (v111)
      {
        JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v111 + 112), (uint64_t)&v110, v110, a4, a5, a6, a7, a8);
        v23 = (unsigned int *)v111;
        v111 = 0;
        if (v23)
          WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v23, (uint64_t)v19, v22, a4, a5, a6, a7, a8);
      }
      a3 = (unint64_t)v122[0];
      if (v122[0])
      {
        if (((unint64_t)v122[0] & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)v122[0] & 0xFFFFFFFE) + 0x4C)))
        {
          a3 = JSC::Exception::create((uint64_t)v109, v122[0], 0, a4, a5, a6, a7, a8);
        }
        JSC::VM::throwException(v109, (JSC::JSGlobalObject *)a2, (JSC::Exception *)a3, v21, a4, a5, a6, a7, a8);
        v24 = v122[0];
      }
      else
      {
        v24 = 0;
      }
      v25 = v24 ? 1 : v20;
      if ((v25 & 1) != 0)
        goto LABEL_66;
    }
    OpaqueJSClass::contextData(v14, (JSC::JSGlobalObject *)a2, a3, a4, a5, a6, a7, a8);
    v27 = *(uint64_t **)(v26 + 8);
    if (v27)
    {
      v28 = *v27;
      if (*v27)
      {
        v29 = *(_DWORD *)(v28 - 8);
        v30 = *(_DWORD *)(v10 + 16);
        v31 = v30 < 0x100 ? WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v10) : v30 >> 8;
        for (i = 0; ; v31 = i + v33)
        {
          v33 = v31 & v29;
          v34 = *(WTF **)(v28 + 16 * v33);
          if (!v34)
            goto LABEL_48;
          if (v34 != (WTF *)-1 && WTF::equal(v34, (const WTF::StringImpl *)v10, (const WTF::StringImpl *)a3))
            break;
          ++i;
        }
        v35 = *(_QWORD *)(v28 + 16 * v33 + 8);
        if (v35)
          break;
      }
    }
LABEL_48:
    OpaqueJSClass::contextData(v14, (JSC::JSGlobalObject *)a2, a3, a4, a5, a6, a7, a8);
    v43 = *(uint64_t **)(v42 + 16);
    if (v43)
    {
      v44 = *v43;
      if (*v43)
      {
        v45 = *(_DWORD *)(v44 - 8);
        v46 = *(_DWORD *)(v10 + 16);
        if (v46 < 0x100)
          v47 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v10);
        else
          v47 = v46 >> 8;
        for (j = 0; ; v47 = j + v49)
        {
          v49 = v47 & v45;
          v50 = *(WTF **)(v44 + 16 * v49);
          if (!v50)
            goto LABEL_58;
          if (v50 != (WTF *)-1 && WTF::equal(v50, (const WTF::StringImpl *)v10, (const WTF::StringImpl *)a3))
            break;
          ++j;
        }
        v51 = *(_QWORD *)(v44 + 16 * v49 + 8);
        if (!v51)
          goto LABEL_58;
        a9.n128_u64[0] = 0xFFFFFFFF00000000;
        v112 = 0xFFFFFFFF00000000;
        v114 = 0;
        v115 = 0;
        v113 = a1;
        v116 = 196608;
        v117 = 0;
        v120 = 0;
        v121 = 0;
        v118 = v109;
        ++*((_DWORD *)v109 + 1);
        v119 = 1;
        v55 = a2[7];
        if (!(v10 >> 4))
          goto LABEL_104;
        v56 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
        if (((v10 >> 4) & ~*(_DWORD *)(v56 + 0x20)) != 0)
          goto LABEL_104;
        v57 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
        if (!v57)
        {
          v58 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
          if (!v58 || *(_BYTE *)(v58 + 5) != 1 && *(_DWORD *)(v58 + 80) < 2u)
            goto LABEL_104;
          JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), a2[7], 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          if (!v57)
            goto LABEL_104;
        }
        if (!*(_DWORD *)(v57 + 24))
          goto LABEL_104;
        v59 = *(_QWORD *)(v57 + 16);
        v60 = v59 & 0xFFFFFFFFFFFFFFFELL;
        v61 = *(unsigned int *)(v57 + 8);
        v62 = *(_DWORD *)(v10 + 16);
        if ((v59 & 1) != 0)
        {
          if ((v62 & 0x20) != 0)
            v62 = *(_DWORD *)(v10 + 32);
          v63 = *(_DWORD *)(v57 + 12);
          v64 = (v62 >> 8) & *(_QWORD *)&v63;
          v65 = *(unsigned __int8 *)(v60 + v64);
          if (*(_BYTE *)(v60 + v64))
          {
            v66 = v60 + v61;
            v67 = 1;
            while (1)
            {
              v68 = *(_QWORD *)(v66 + 8 * (v65 - 1));
              if (v10 == (v68 & 0xFFFFFFFFFFFFLL))
                break;
              v64 = ((_DWORD)v64 + v67) & v63;
              v65 = *(unsigned __int8 *)(v60 + v64);
              ++v67;
              if (!*(_BYTE *)(v60 + v64))
                goto LABEL_104;
            }
            a6 = (v68 >> 16) & 0xFF00000000 | HIBYTE(v68);
            goto LABEL_94;
          }
          goto LABEL_104;
        }
        if ((v62 & 0x20) != 0)
          v62 = *(_DWORD *)(v10 + 32);
        v69 = *(_DWORD *)(v57 + 12);
        v70 = v69 & (v62 >> 8);
        v71 = *(_DWORD *)(v60 + 4 * v70);
        if (v71)
        {
          v72 = v60 + 4 * v61;
          v73 = 1;
          while (1)
          {
            v74 = (v71 - 1);
            if (*(_QWORD *)(v72 + 16 * v74) == v10)
              break;
            v70 = (v70 + v73) & v69;
            v71 = *(_DWORD *)(v60 + 4 * v70);
            ++v73;
            if (!v71)
              goto LABEL_104;
          }
          a6 = *(unsigned int *)(v72 + 16 * v74 + 8) | ((unint64_t)*(unsigned __int8 *)(v72 + 16 * v74 + 12) << 32);
LABEL_94:
          if ((_DWORD)a6 != -1)
          {
            a5 = HIDWORD(a6);
            if ((int)a6 <= 63)
            {
              v75 = a1 + 16;
              v76 = a6 << 32;
            }
            else
            {
              v75 = *(_QWORD *)(a1 + 8) - 8;
              v76 = 0x3F00000000 - (a6 << 32);
            }
            a4 = *(_QWORD *)(v75 + (v76 >> 29));
            if ((a4 & 0xFFFE000000000002) != 0)
            {
LABEL_101:
              v110 = a4;
              v114 = a1;
              v112 = __PAIR64__(a6, HIDWORD(a6));
              OwnPropertySlotByIndex = 1;
              LOWORD(v116) = 257;
              goto LABEL_157;
            }
            v77 = *(unsigned __int8 *)(a4 + 5);
            if (v77 != 5)
            {
              if (v77 != 6)
                goto LABEL_101;
              v87 = *(_DWORD *)(v56 + 16) & 3;
              v88 = *(_QWORD *)(a4 + 16);
              if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
              {
                v90 = *(_QWORD *)(a4 + 24);
                v89 = *(_QWORD *)(a4 + 32);
                v110 = *(_QWORD *)(a4 + 8);
                v111 = v88;
                LODWORD(v112) = HIDWORD(a6);
                v114 = a1;
                BYTE1(v116) = 3;
                OwnPropertySlotByIndex = 1;
                if (v87 != 2)
                  LOBYTE(v116) = 1;
                HIBYTE(v116) = 1;
                v120 = v90;
                v121 = v89;
              }
              else
              {
                v110 = *(_QWORD *)(a4 + 8);
                v111 = v88;
                LODWORD(v112) = HIDWORD(a6);
                v114 = a1;
                OwnPropertySlotByIndex = 1;
                BYTE1(v116) = 3;
                if (v87 != 2)
                  LOBYTE(v116) = 1;
              }
              if (!*((_DWORD *)v109 + 20))
                goto LABEL_158;
LABEL_157:
              v106 = *((_DWORD *)v109 + 20);
              if ((v106 & 0x27) != 0 && (v106 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VM *)((char *)v109 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (*((_QWORD *)v109 + 2))
              {
LABEL_167:
                v20 = 0;
              }
              else
              {
LABEL_158:
                if (v119)
                {
                  v105 = *((_DWORD *)v118 + 1);
                  if (!v105)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197EF9470);
                  }
                  *((_DWORD *)v118 + 1) = v105 - 1;
                  v118 = 0;
                  v119 = 0;
                }
                if (OwnPropertySlotByIndex)
                {
                  v20 = JSC::JSObject::put((unsigned __int8 *)a1, (unint64_t)a2, v10, v9, v108, a6, a7, a8, a9);
                }
                else
                {
                  if ((*(_BYTE *)(v51 + 8) & 2) != 0)
                    goto LABEL_167;
                  v122[0] = 0;
                  v122[1] = (JSC::Exception *)a1;
                  v123 = -1;
                  a9.n128_u64[0] = 0x100000001000000;
                  v124 = 0x1000000;
                  v125 = 0;
                  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a1, (uint64_t)v109, v10, (uint64_t)v9, 0, (uint64_t)v122, a7, a8, a9);
                  v20 = v19 == 0;
                }
              }
              if (v119)
              {
                v107 = *((_DWORD *)v118 + 1);
                if (!v107)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197EF9490);
                }
                *((_DWORD *)v118 + 1) = v107 - 1;
              }
              goto LABEL_65;
            }
            JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v55, (uint64_t)&v110, a4, SHIDWORD(a6), a6);
LABEL_122:
            OwnPropertySlotByIndex = 1;
            goto LABEL_157;
          }
        }
LABEL_104:
        if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
          && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v55, v10, (uint64_t)&v110) & 1) != 0)
        {
          goto LABEL_122;
        }
        v79 = *(_DWORD *)(v10 + 16);
        if ((v79 & 0x20) == 0)
        {
          v80 = *(_BYTE **)(v10 + 8);
          v81 = *(unsigned int *)(v10 + 4);
          if ((v79 & 4) != 0)
          {
            if ((_DWORD)v81)
            {
              a3 = *v80 - 48;
              if (a3 <= 9 && (v81 < 2 || *v80 != 48))
              {
                v102 = v80 + 1;
                v103 = v81 - 1;
                while (v103)
                {
                  if (a3 > 0x19999999)
                    goto LABEL_109;
                  v104 = *v102 - 48;
                  if (v104 > 9)
                    goto LABEL_109;
                  OwnPropertySlotByIndex = 0;
                  v86 = __CFADD__(v104, 10 * a3);
                  a3 = v104 + 10 * (_DWORD)a3;
                  ++v102;
                  --v103;
                  if (v86)
                    goto LABEL_157;
                }
                goto LABEL_155;
              }
            }
          }
          else if ((_DWORD)v81)
          {
            a3 = *(unsigned __int16 *)v80 - 48;
            if (a3 <= 9 && (*(_WORD *)v80 != 48 || v81 <= 1))
            {
              v83 = (unsigned __int16 *)(v80 + 2);
              v84 = v81 - 1;
              while (v84)
              {
                if (a3 > 0x19999999)
                  goto LABEL_109;
                v85 = *v83 - 48;
                if (v85 > 9)
                  goto LABEL_109;
                OwnPropertySlotByIndex = 0;
                v86 = __CFADD__(v85, 10 * a3);
                a3 = v85 + 10 * (_DWORD)a3;
                ++v83;
                --v84;
                if (v86)
                  goto LABEL_157;
              }
LABEL_155:
              if ((_DWORD)a3 != -1)
              {
                OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex(a1, (uint64_t)a2, (const WTF::StringImpl *)a3, (uint64_t)&v110, a5, a6, a7, a8);
                goto LABEL_157;
              }
            }
          }
        }
LABEL_109:
        OwnPropertySlotByIndex = 0;
        goto LABEL_157;
      }
    }
LABEL_58:
    v14 = (OpaqueJSClass *)*((_QWORD *)v14 + 1);
    if (!v14)
      goto LABEL_64;
  }
  if ((*(_BYTE *)(v35 + 16) & 2) == 0)
  {
    v36 = *(uint64_t (**)(JSC::VM **, uint64_t, _QWORD, const JSC::PropertyTable *, JSC::Exception **))(v35 + 8);
    if (v36)
    {
      v122[0] = 0;
      JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v110, a2[7], a3, a4, a5, a6, a7, a8);
      v20 = v36(a2, a1, *(_QWORD *)(v35 + 24), v9, v122);
      if (v111)
      {
        JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v111 + 112), (uint64_t)&v110, v110, a4, a5, a6, a7, a8);
        v39 = (unsigned int *)v111;
        v111 = 0;
        if (v39)
          WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v39, (uint64_t)v19, v38, a4, a5, a6, a7, a8);
      }
      a3 = (unint64_t)v122[0];
      if (v122[0])
      {
        if (((unint64_t)v122[0] & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)v122[0] & 0xFFFFFFFE) + 0x4C)))
        {
          a3 = JSC::Exception::create((uint64_t)v109, v122[0], 0, a4, a5, a6, a7, a8);
        }
        JSC::VM::throwException(v109, (JSC::JSGlobalObject *)a2, (JSC::Exception *)a3, v37, a4, a5, a6, a7, a8);
        v40 = v122[0];
      }
      else
      {
        v40 = 0;
      }
      v41 = v40 ? 1 : v20;
      if ((v41 & 1) != 0)
        goto LABEL_65;
    }
    goto LABEL_48;
  }
  v20 = 0;
LABEL_65:
  if (v15)
  {
    do
    {
LABEL_66:
      v52 = __ldaxr((unsigned int *)v15);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, (unsigned int *)v15));
    if (!v53)
    {
      atomic_store(1u, (unsigned int *)v15);
      v91 = atomic_load((unint64_t *)(v15 + 16));
      if (v91)
      {
        v92 = *(_QWORD *)(v15 + 8);
        if (!v92 || (*(_BYTE *)(v92 + 16) & 4) != 0 || *(_QWORD *)(v92 + 8) != v91)
          WTF::fastFree(v91, v19, a3, a4, a5, a6, a7, a8);
      }
      v93 = *(WTF::StringImpl **)(v15 + 8);
      *(_QWORD *)(v15 + 8) = 0;
      if (v93)
      {
        if (*(_DWORD *)v93 == 2)
        {
          WTF::StringImpl::~StringImpl(v93, (WTF::AtomStringImpl *)v19, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
        }
        else
        {
          *(_DWORD *)v93 -= 2;
        }
      }
      WTF::fastFree(v15, v19, a3, a4, a5, a6, a7, a8);
    }
  }
  return v20;
}

void sub_197EF94AC(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  unint64_t v20;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (a20)
  {
    v22 = *(_DWORD *)(a19 + 4);
    if (!v22)
    {
      __break(0xC471u);
      JUMPOUT(0x197EF94ECLL);
    }
    *(_DWORD *)(a19 + 4) = v22 - 1;
  }
  if (v20)
  {
    do
    {
      v23 = __ldaxr((unsigned int *)v20);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)v20));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)v20);
      v25 = atomic_load((unint64_t *)(v20 + 16));
      if (v25)
      {
        v26 = *(_QWORD *)(v20 + 8);
        if (!v26 || (*(_BYTE *)(v26 + 16) & 4) != 0 || *(_QWORD *)(v26 + 8) != v25)
          WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
      }
      v27 = *(WTF::StringImpl **)(v20 + 8);
      *(_QWORD *)(v20 + 8) = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
        {
          WTF::StringImpl::~StringImpl(v27, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
        }
        else
        {
          *(_DWORD *)v27 -= 2;
        }
      }
      WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::putByIndex(unint64_t a1, JSC::VM **a2, const WTF::StringImpl *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Exception *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  OpaqueJSClass *v18;
  unint64_t v19;
  uint64_t (*v20)(JSC::VM **, unint64_t, unint64_t, unint64_t, JSC::Exception **);
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  unsigned int *v28;
  JSC::Exception *v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int i;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t (*v42)(JSC::VM **, unint64_t, _QWORD, unint64_t, JSC::Exception **);
  double v43;
  uint64_t v44;
  unsigned int *v45;
  JSC::Exception *v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int j;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unsigned int v60;
  unsigned int v61;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t **v84;
  uint64_t v85;
  uint64_t v86;
  JSC::Exception *v87;
  WTF::StringImpl *v88;

  v82 = a3;
  v83 = a5;
  v84 = (uint64_t **)a2[7];
  JSC::Identifier::from(v84, (unint64_t)a3, a3, a4, a5, a6, a7, a8, (int **)&v88);
  v18 = *(OpaqueJSClass **)(*(_QWORD *)(a1 + 24) + 8);
  if (v18)
  {
    v19 = 0;
    while (1)
    {
      v20 = (uint64_t (*)(JSC::VM **, unint64_t, unint64_t, unint64_t, JSC::Exception **))*((_QWORD *)v18 + 7);
      if (v20)
      {
        if (!v19)
        {
          v21 = v88;
          if (v88)
          {
            *(_DWORD *)v88 += 2;
            v22 = WTF::fastMalloc((WTF *)0x18);
            v19 = v22;
            *(_DWORD *)v22 = 1;
            *(_QWORD *)(v22 + 8) = v21;
            if ((*((_BYTE *)v21 + 16) & 4) != 0)
              v23 = 0;
            else
              v23 = *((_QWORD *)v21 + 1);
            *(_QWORD *)(v22 + 16) = v23;
          }
          else
          {
            v19 = 0;
          }
        }
        v87 = 0;
        JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v85, a2[7], (uint64_t)v11, v12, v13, v14, v15, v16);
        v25 = v20(a2, a1, v19, a4, &v87);
        if (v86)
        {
          JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v86 + 112), (uint64_t)&v85, v85, v12, v13, v14, v15, v16);
          v28 = (unsigned int *)v86;
          v86 = 0;
          if (v28)
            WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v28, (uint64_t)v24, v27, v12, v13, v14, v15, v16);
        }
        v11 = v87;
        if (v87)
        {
          if (((unint64_t)v87 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v87 & 0xFFFFFFFE) + 0x4C)))
          {
            v11 = (JSC::Exception *)JSC::Exception::create((uint64_t)v84, v87, 0, v12, v13, v14, v15, v16);
          }
          JSC::VM::throwException((JSC::VM *)v84, (JSC::JSGlobalObject *)a2, v11, v26, v12, v13, v14, v15, v16);
          v29 = v87;
        }
        else
        {
          v29 = 0;
        }
        v30 = v29 ? 1 : v25;
        if ((v30 & 1) != 0)
          break;
      }
      OpaqueJSClass::contextData(v18, (JSC::JSGlobalObject *)a2, (uint64_t)v11, v12, v13, v14, v15, v16);
      v32 = *(uint64_t **)(v31 + 8);
      if (v32)
      {
        v33 = *v32;
        if (*v32)
        {
          v34 = v88;
          v35 = *(_DWORD *)(v33 - 8);
          v36 = *((_DWORD *)v88 + 4);
          if (v36 < 0x100)
            v37 = WTF::StringImpl::hashSlowCase(v88);
          else
            v37 = v36 >> 8;
          for (i = 0; ; v37 = i + v39)
          {
            v39 = v37 & v35;
            v40 = *(WTF **)(v33 + 16 * v39);
            if (!v40)
              break;
            if (v40 != (WTF *)-1 && WTF::equal(v40, v34, v11))
            {
              v41 = *(_QWORD *)(v33 + 16 * v39 + 8);
              if (!v41)
                break;
              if ((*(_BYTE *)(v41 + 16) & 2) != 0)
              {
LABEL_75:
                v25 = 0;
                goto LABEL_65;
              }
              v42 = *(uint64_t (**)(JSC::VM **, unint64_t, _QWORD, unint64_t, JSC::Exception **))(v41 + 8);
              if (v42)
              {
                v87 = 0;
                JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v85, a2[7], (uint64_t)v11, v12, v13, v14, v15, v16);
                v25 = v42(a2, a1, *(_QWORD *)(v41 + 24), a4, &v87);
                if (v86)
                {
                  JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v86 + 112), (uint64_t)&v85, v85, v12, v13, v14, v15, v16);
                  v45 = (unsigned int *)v86;
                  v86 = 0;
                  if (v45)
                    WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v45, (uint64_t)v24, v44, v12, v13, v14, v15, v16);
                }
                v11 = v87;
                if (v87)
                {
                  if (((unint64_t)v87 & 0xFFFE000000000002) != 0
                    || &JSC::Exception::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v87 & 0xFFFFFFFE) + 0x4C)))
                  {
                    v11 = (JSC::Exception *)JSC::Exception::create((uint64_t)v84, v87, 0, v12, v13, v14, v15, v16);
                  }
                  JSC::VM::throwException((JSC::VM *)v84, (JSC::JSGlobalObject *)a2, v11, v43, v12, v13, v14, v15, v16);
                  v46 = v87;
                }
                else
                {
                  v46 = 0;
                }
                v47 = v46 ? 1 : v25;
                if ((v47 & 1) != 0)
                  goto LABEL_65;
              }
              break;
            }
            ++i;
          }
        }
      }
      OpaqueJSClass::contextData(v18, (JSC::JSGlobalObject *)a2, (uint64_t)v11, v12, v13, v14, v15, v16);
      v49 = *(uint64_t **)(v48 + 16);
      if (v49)
      {
        v50 = *v49;
        if (*v49)
        {
          v51 = v88;
          v52 = *(_DWORD *)(v50 - 8);
          v53 = *((_DWORD *)v88 + 4);
          if (v53 < 0x100)
            v54 = WTF::StringImpl::hashSlowCase(v88);
          else
            v54 = v53 >> 8;
          for (j = 0; ; v54 = j + v56)
          {
            v56 = v54 & v52;
            v57 = *(WTF **)(v50 + 16 * v56);
            if (!v57)
              break;
            if (v57 != (WTF *)-1 && WTF::equal(v57, v51, v11))
            {
              v58 = *(_QWORD *)(v50 + 16 * v56 + 8);
              if (!v58)
                break;
              if ((*(_BYTE *)(v58 + 8) & 2) == 0)
                goto LABEL_64;
              goto LABEL_75;
            }
            ++j;
          }
        }
      }
      v18 = (OpaqueJSClass *)*((_QWORD *)v18 + 1);
      if (!v18)
        goto LABEL_64;
    }
  }
  else
  {
    v19 = 0;
LABEL_64:
    v25 = JSC::JSObject::putByIndex(a1, a2, (const WTF::StringImpl *)v82, a4, v83, v14, v15, v16, v17);
  }
LABEL_65:
  v59 = v88;
  v88 = 0;
  if (!v59)
  {
LABEL_68:
    if (!v19)
      return v25;
    goto LABEL_69;
  }
  if (*(_DWORD *)v59 != 2)
  {
    *(_DWORD *)v59 -= 2;
    goto LABEL_68;
  }
  WTF::StringImpl::~StringImpl(v59, v24, (uint64_t)v11, v12, v13, v14, v15, v16);
  WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
  if (!v19)
    return v25;
  do
  {
LABEL_69:
    v60 = __ldaxr((unsigned int *)v19);
    v61 = v60 - 1;
  }
  while (__stlxr(v61, (unsigned int *)v19));
  if (!v61)
  {
    atomic_store(1u, (unsigned int *)v19);
    v71 = atomic_load((unint64_t *)(v19 + 16));
    if (v71)
    {
      v72 = *(_QWORD *)(v19 + 8);
      if (!v72 || (*(_BYTE *)(v72 + 16) & 4) != 0 || *(_QWORD *)(v72 + 8) != v71)
        WTF::fastFree(v71, v24, (uint64_t)v11, v12, v13, v14, v15, v16);
    }
    v73 = *(WTF::StringImpl **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
      {
        WTF::StringImpl::~StringImpl(v73, v24, (uint64_t)v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
      }
      else
      {
        *(_DWORD *)v73 -= 2;
      }
    }
    WTF::fastFree(v19, v24, (uint64_t)v11, v12, v13, v14, v15, v16);
  }
  return v25;
}

void sub_197EF9A48(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  unint64_t v16;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
    {
      WTF::StringImpl::~StringImpl(a16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      if (!v16)
        goto LABEL_7;
      goto LABEL_5;
    }
    *(_DWORD *)a16 -= 2;
  }
  if (!v16)
    goto LABEL_7;
  do
  {
LABEL_5:
    v18 = __ldaxr((unsigned int *)v16);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, (unsigned int *)v16));
  if (!v19)
  {
    atomic_store(1u, (unsigned int *)v16);
    v28 = atomic_load((unint64_t *)(v16 + 16));
    if (v28)
    {
      v29 = *(_QWORD *)(v16 + 8);
      if (!v29 || (*(_BYTE *)(v29 + 16) & 4) != 0 || *(_QWORD *)(v29 + 8) != v28)
        WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
    }
    v30 = *(WTF::StringImpl **)(v16 + 8);
    *(_QWORD *)(v16 + 8) = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
      {
        WTF::StringImpl::~StringImpl(v30, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
      }
      else
      {
        *(_DWORD *)v30 -= 2;
      }
    }
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

BOOL JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::deleteProperty(uint64_t a1, JSC::VM **a2, JSC::Exception *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  OpaqueJSClass *v12;
  unint64_t v13;
  JSC::VM *v14;
  uint64_t (*v15)(JSC::VM **, uint64_t, unint64_t, JSC::Exception **);
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  double v20;
  uint64_t v21;
  unsigned int *v22;
  JSC::Exception *v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int i;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int j;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  int v45;
  _BYTE *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  BOOL v52;
  unsigned __int16 *v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  _BOOL8 v57;
  _BYTE *v58;
  JSC::JSGlobalObject *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  unsigned __int8 *v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82[2];
  uint64_t v83;
  uint64_t v84;
  JSC::Exception *v85;

  v9 = (uint64_t)a3;
  if (!a3)
  {
    v13 = 0;
    goto LABEL_78;
  }
  *(_QWORD *)v82 = a4;
  v12 = *(OpaqueJSClass **)(*(_QWORD *)(a1 + 24) + 8);
  if (v12)
  {
    v13 = 0;
    v14 = a2[7];
    while (1)
    {
      v15 = (uint64_t (*)(JSC::VM **, uint64_t, unint64_t, JSC::Exception **))*((_QWORD *)v12 + 8);
      if (v15)
      {
        if (!v13)
        {
          *(_DWORD *)v9 += 2;
          v16 = WTF::fastMalloc((WTF *)0x18);
          v13 = v16;
          *(_DWORD *)v16 = 1;
          *(_QWORD *)(v16 + 8) = v9;
          if ((*(_BYTE *)(v9 + 16) & 4) != 0)
            v17 = 0;
          else
            v17 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v16 + 16) = v17;
        }
        v85 = 0;
        JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v83, a2[7], (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v19 = v15(a2, a1, v13, &v85);
        if (v84)
        {
          JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v84 + 112), (uint64_t)&v83, v83, (uint64_t)a4, a5, a6, a7, a8);
          v22 = (unsigned int *)v84;
          v84 = 0;
          if (v22)
            WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v22, (uint64_t)v18, v21, (uint64_t)a4, a5, a6, a7, a8);
        }
        a3 = v85;
        if (v85)
        {
          if (((unint64_t)v85 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v85 & 0xFFFFFFFE) + 0x4C)))
          {
            a3 = (JSC::Exception *)JSC::Exception::create((uint64_t)v14, v85, 0, (uint64_t)a4, a5, a6, a7, a8);
          }
          JSC::VM::throwException(v14, (JSC::JSGlobalObject *)a2, a3, v20, (uint64_t)a4, a5, a6, a7, a8);
          v23 = v85;
        }
        else
        {
          v23 = 0;
        }
        v24 = v23 ? 1 : v19;
        if ((v24 & 1) != 0)
          break;
      }
      OpaqueJSClass::contextData(v12, (JSC::JSGlobalObject *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v26 = *(uint64_t **)(v25 + 8);
      if (v26)
      {
        v27 = *v26;
        if (*v26)
        {
          v28 = *(_DWORD *)(v27 - 8);
          v29 = *(_DWORD *)(v9 + 16);
          if (v29 < 0x100)
            v30 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v9);
          else
            v30 = v29 >> 8;
          for (i = 0; ; v30 = i + v32)
          {
            v32 = v30 & v28;
            v33 = *(WTF **)(v27 + 16 * v32);
            if (!v33)
              break;
            if (v33 != (WTF *)-1 && WTF::equal(v33, (const WTF::StringImpl *)v9, a3))
            {
              v34 = *(_QWORD *)(v27 + 16 * v32 + 8);
              if (!v34)
                break;
              v58 = (_BYTE *)(v34 + 16);
LABEL_68:
              v57 = (*v58 & 8) == 0;
              goto LABEL_80;
            }
            ++i;
          }
        }
      }
      OpaqueJSClass::contextData(v12, (JSC::JSGlobalObject *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v36 = *(uint64_t **)(v35 + 16);
      if (v36)
      {
        v37 = *v36;
        if (*v36)
        {
          v38 = *(_DWORD *)(v37 - 8);
          v39 = *(_DWORD *)(v9 + 16);
          if (v39 < 0x100)
            v40 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v9);
          else
            v40 = v39 >> 8;
          for (j = 0; ; v40 = j + v42)
          {
            v42 = v40 & v38;
            v43 = *(WTF **)(v37 + 16 * v42);
            if (!v43)
              break;
            if (v43 != (WTF *)-1 && WTF::equal(v43, (const WTF::StringImpl *)v9, a3))
            {
              v44 = *(_QWORD *)(v37 + 16 * v42 + 8);
              if (!v44)
                break;
              v58 = (_BYTE *)(v44 + 8);
              goto LABEL_68;
            }
            ++j;
          }
        }
      }
      v12 = (OpaqueJSClass *)*((_QWORD *)v12 + 1);
      if (!v12)
        goto LABEL_49;
    }
    v57 = 1;
    goto LABEL_81;
  }
  v13 = 0;
LABEL_49:
  v45 = *(_DWORD *)(v9 + 16);
  if ((v45 & 0x20) != 0)
  {
    a4 = *(const JSC::PropertyTable **)v82;
    goto LABEL_78;
  }
  v46 = *(_BYTE **)(v9 + 8);
  v47 = *(unsigned int *)(v9 + 4);
  a4 = *(const JSC::PropertyTable **)v82;
  if ((v45 & 4) != 0)
  {
    if (!(_DWORD)v47 || (v75 = *v46 - 48, v75 > 9) || v47 >= 2 && *v46 == 48)
    {
LABEL_97:
      v76 = 0;
      v77 = 0;
      v78 = 0;
    }
    else
    {
      v79 = v46 + 1;
      v80 = v47 - 1;
      while (v80)
      {
        if (v75 > 0x19999999)
          goto LABEL_97;
        v81 = *v79 - 48;
        if (v81 > 9)
          goto LABEL_97;
        v76 = 0;
        v77 = 0;
        v78 = 0;
        v56 = __CFADD__(v81, 10 * v75);
        v75 = v81 + 10 * v75;
        ++v79;
        --v80;
        if (v56)
          goto LABEL_98;
      }
      v76 = 0x100000000;
      if (v75 == -1)
      {
        v76 = 0;
        v77 = 0;
      }
      else
      {
        v77 = v75;
      }
      if (v75 == -1)
        v78 = 0;
      else
        v78 = v75 & 0xFFFFFF00;
    }
LABEL_98:
    v59 = (JSC::JSGlobalObject *)(v78 | v77);
    a4 = *(const JSC::PropertyTable **)v82;
    if ((v76 & 0x100000000) != 0)
      goto LABEL_76;
LABEL_78:
    v60 = JSC::JSObject::deleteProperty((unsigned int *)a1, (JSC::JSGlobalObject *)a2, v9, a4, a5, a6, a7, a8);
    goto LABEL_79;
  }
  if (!(_DWORD)v47
    || (v48 = *(unsigned __int16 *)v46 - 48, v48 > 9)
    || (*(_WORD *)v46 == 48 ? (v52 = v47 > 1) : (v52 = 0), v52))
  {
LABEL_53:
    v49 = 0;
    v50 = 0;
    v51 = 0;
  }
  else
  {
    v53 = (unsigned __int16 *)(v46 + 2);
    v54 = v47 - 1;
    while (v54)
    {
      if (v48 > 0x19999999)
        goto LABEL_53;
      v55 = *v53 - 48;
      if (v55 > 9)
        goto LABEL_53;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v56 = __CFADD__(v55, 10 * v48);
      v48 = v55 + 10 * v48;
      ++v53;
      --v54;
      if (v56)
        goto LABEL_75;
    }
    v49 = 0x100000000;
    if (v48 == -1)
    {
      v49 = 0;
      v50 = 0;
    }
    else
    {
      v50 = v48;
    }
    if (v48 == -1)
      v51 = 0;
    else
      v51 = v48 & 0xFFFFFF00;
  }
LABEL_75:
  v59 = (JSC::JSGlobalObject *)(v51 | v50);
  if ((v49 & 0x100000000) == 0)
    goto LABEL_78;
LABEL_76:
  v60 = JSC::JSObject::deletePropertyByIndex((JSC::JSObject *)a1, (JSC::JSCell *)a2, v59, (uint64_t)a4, a5, a6, a7, a8, a9);
LABEL_79:
  v57 = v60;
LABEL_80:
  if (v13)
  {
    do
    {
LABEL_81:
      v61 = __ldaxr((unsigned int *)v13);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, (unsigned int *)v13));
    if (!v62)
    {
      atomic_store(1u, (unsigned int *)v13);
      v64 = atomic_load((unint64_t *)(v13 + 16));
      if (v64)
      {
        v65 = *(_QWORD *)(v13 + 8);
        if (!v65 || (*(_BYTE *)(v65 + 16) & 4) != 0 || *(_QWORD *)(v65 + 8) != v64)
          WTF::fastFree(v64, v18, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      v66 = *(WTF::StringImpl **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
        {
          WTF::StringImpl::~StringImpl(v66, (WTF::AtomStringImpl *)v18, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
        }
        else
        {
          *(_DWORD *)v66 -= 2;
        }
      }
      WTF::fastFree(v13, v18, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    }
  }
  return v57;
}

void sub_197EFA008(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12)
{
  unint64_t v12;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (v12)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v12);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v12));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v12);
      v16 = atomic_load((unint64_t *)(v12 + 16));
      if (v16)
      {
        v17 = *(_QWORD *)(v12 + 8);
        if (!v17 || (*(_BYTE *)(v17 + 16) & 4) != 0 || *(_QWORD *)(v17 + 8) != v16)
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
      }
      v18 = *(WTF::StringImpl **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::~StringImpl(v18, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
        }
        else
        {
          *(_DWORD *)v18 -= 2;
        }
      }
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::deletePropertyByIndex(unint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Symbol *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  JSC::Identifier::from(*(uint64_t ***)(a2 + 56), (unint64_t)a3, a3, a4, a5, a6, a7, a8, (int **)&v33);
  v22 = JSC::JSCell::deleteProperty(a1, a2, (uint64_t)v33, v10, v11, v12, v13, v14);
  v23 = v33;
  v33 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  return v22;
}

void sub_197EFA154(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, WTF::StringImpl *a10)
{
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::~StringImpl(a10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::getOwnPropertySlot(uint64_t a1, JSC::VM **a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v12;
  OpaqueJSClass *v13;
  unint64_t v14;
  unsigned int (*v15)(JSC::VM **, uint64_t, unint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(JSC::VM **, uint64_t, unint64_t, JSC::Exception **);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int i;
  int v34;
  WTF *v35;
  OpaqueJSClass *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int j;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  uint64_t (*v47)(JSC::VM **, uint64_t, _QWORD, JSC::Exception **);
  uint64_t v48;
  double v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int k;
  int v60;
  WTF *v61;
  JSC::VM *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  int v77;
  unsigned int v78;
  int v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  char OwnPropertySlotByIndex;
  unsigned int *v87;
  _BOOL8 v88;
  int v89;
  _BYTE *v90;
  uint64_t v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int *v103;
  WTF::StringImpl *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned __int16 *v108;
  uint64_t v109;
  unsigned int v110;
  BOOL v111;
  char OwnStaticPropertySlot;
  char v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  JSC::VM *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  int v139;
  uint64_t v140;
  char v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int8 *v150;
  uint64_t v151;
  unsigned int v152;
  JSC::VM *v153;
  JSC::VMTraps *v154;
  uint64_t v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  uint64_t v158;
  JSC::Exception *v159;

  v8 = a4;
  v9 = a3;
  v12 = (uint64_t)a2[7];
  v156 = v12;
  if (!a3)
  {
    v14 = 0;
    if ((*(_BYTE *)(a1 + 6) & 0x20) == 0)
      goto LABEL_130;
    v130 = a2[7];
LABEL_160:
    OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v130, v9, v8);
    OwnPropertySlotByIndex = OwnStaticPropertySlot;
    if (v9)
      v113 = OwnStaticPropertySlot;
    else
      v113 = 1;
    if ((v113 & 1) != 0)
      goto LABEL_131;
LABEL_126:
    v89 = *(_DWORD *)(v9 + 16);
    if ((v89 & 0x20) == 0)
    {
      v90 = *(_BYTE **)(v9 + 8);
      v91 = *(unsigned int *)(v9 + 4);
      if ((v89 & 4) != 0)
      {
        if (!(_DWORD)v91
          || (a3 = *v90 - 48, a3 > 9)
          || v91 >= 2 && *v90 == 48)
        {
LABEL_207:
          OwnPropertySlotByIndex = 0;
          goto LABEL_194;
        }
        v150 = v90 + 1;
        v151 = v91 - 1;
        while (v151)
        {
          if (a3 <= 0x19999999)
          {
            v152 = *v150 - 48;
            if (v152 <= 9)
            {
              v111 = __CFADD__(v152, 10 * a3);
              a3 = v152 + 10 * (_DWORD)a3;
              ++v150;
              --v151;
              if (!v111)
                continue;
            }
          }
          goto LABEL_207;
        }
        v12 = v156;
        if ((_DWORD)a3 != -1)
        {
LABEL_159:
          OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex(a1, (uint64_t)a2, (const WTF::StringImpl *)a3, v8, a5, a6, a7, a8);
          goto LABEL_131;
        }
      }
      else if ((_DWORD)v91)
      {
        a3 = *(unsigned __int16 *)v90 - 48;
        if (a3 <= 9 && (*(_WORD *)v90 != 48 || v91 <= 1))
        {
          v108 = (unsigned __int16 *)(v90 + 2);
          v109 = v91 - 1;
          while (v109)
          {
            if (a3 <= 0x19999999)
            {
              v110 = *v108 - 48;
              if (v110 <= 9)
              {
                v111 = __CFADD__(v110, 10 * a3);
                a3 = v110 + 10 * (_DWORD)a3;
                ++v108;
                --v109;
                if (!v111)
                  continue;
              }
            }
            goto LABEL_130;
          }
          if ((_DWORD)a3 != -1)
            goto LABEL_159;
        }
      }
    }
LABEL_130:
    OwnPropertySlotByIndex = 0;
    goto LABEL_131;
  }
  v13 = *(OpaqueJSClass **)(*(_QWORD *)(a1 + 24) + 8);
  if (!v13)
  {
    v14 = 0;
    v130 = a2[7];
LABEL_86:
    if ((v9 >> 4))
    {
      v64 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
      if (((v9 >> 4) & ~*(_DWORD *)(v64 + 0x20)) == 0)
      {
        v65 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
        if (v65
          || (v66 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40)) != 0
          && (*(_BYTE *)(v66 + 5) == 1 || *(_DWORD *)(v66 + 80) >= 2u)
          && (JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v130, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v65))
        {
          if (*(_DWORD *)(v65 + 24))
          {
            v67 = *(_QWORD *)(v65 + 16);
            v68 = v67 & 0xFFFFFFFFFFFFFFFELL;
            v69 = *(unsigned int *)(v65 + 8);
            v70 = *(_DWORD *)(v9 + 16);
            if ((v67 & 1) != 0)
            {
              if ((v70 & 0x20) != 0)
                v70 = *(_DWORD *)(v9 + 32);
              v71 = *(_DWORD *)(v65 + 12);
              v72 = (v70 >> 8) & *(_QWORD *)&v71;
              v73 = *(unsigned __int8 *)(v68 + v72);
              if (!*(_BYTE *)(v68 + v72))
                goto LABEL_125;
              v74 = v68 + v69;
              v75 = 1;
              while (1)
              {
                v76 = *(_QWORD *)(v74 + 8 * (v73 - 1));
                if (v9 == (v76 & 0xFFFFFFFFFFFFLL))
                  break;
                v72 = ((_DWORD)v72 + v75) & v71;
                v73 = *(unsigned __int8 *)(v68 + v72);
                ++v75;
                if (!*(_BYTE *)(v68 + v72))
                  goto LABEL_125;
              }
              a6 = (v76 >> 16) & 0xFF00000000 | HIBYTE(v76);
            }
            else
            {
              if ((v70 & 0x20) != 0)
                v70 = *(_DWORD *)(v9 + 32);
              v77 = *(_DWORD *)(v65 + 12);
              v78 = v77 & (v70 >> 8);
              v79 = *(_DWORD *)(v68 + 4 * v78);
              if (!v79)
                goto LABEL_125;
              v80 = v68 + 4 * v69;
              v81 = 1;
              while (1)
              {
                v82 = (v79 - 1);
                if (*(_QWORD *)(v80 + 16 * v82) == v9)
                  break;
                v78 = (v78 + v81) & v77;
                v79 = *(_DWORD *)(v68 + 4 * v78);
                ++v81;
                if (!v79)
                  goto LABEL_125;
              }
              a6 = *(unsigned int *)(v80 + 16 * v82 + 8) | ((unint64_t)*(unsigned __int8 *)(v80 + 16 * v82 + 12) << 32);
            }
            if ((_DWORD)a6 != -1)
            {
              a5 = HIDWORD(a6);
              if ((int)a6 <= 63)
              {
                v83 = a1 + 16;
                v84 = a6 << 32;
              }
              else
              {
                v83 = *(_QWORD *)(a1 + 8) - 8;
                v84 = 0x3F00000000 - (a6 << 32);
              }
              a4 = *(_QWORD *)(v83 + (v84 >> 29));
              if ((a4 & 0xFFFE000000000002) != 0)
                goto LABEL_117;
              v85 = *(unsigned __int8 *)(a4 + 5);
              if (v85 == 5)
              {
                JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v130, v8, a4, SHIDWORD(a6), a6);
                OwnPropertySlotByIndex = 1;
                goto LABEL_131;
              }
              if (v85 != 6)
              {
LABEL_117:
                *(_QWORD *)v8 = a4;
                *(_QWORD *)(v8 + 32) = a1;
                *(_DWORD *)(v8 + 16) = HIDWORD(a6);
                *(_DWORD *)(v8 + 20) = a6;
                OwnPropertySlotByIndex = 1;
                *(_WORD *)(v8 + 48) = 257;
                goto LABEL_131;
              }
              v131 = *(_DWORD *)(v64 + 16) & 3;
              v133 = *(_QWORD *)(a4 + 8);
              v132 = *(_QWORD *)(a4 + 16);
              if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
              {
                v135 = *(_QWORD *)(a4 + 24);
                v134 = *(_QWORD *)(a4 + 32);
                *(_QWORD *)v8 = v133;
                *(_QWORD *)(v8 + 8) = v132;
                *(_DWORD *)(v8 + 16) = HIDWORD(a6);
                *(_QWORD *)(v8 + 32) = a1;
                *(_BYTE *)(v8 + 49) = 3;
                OwnPropertySlotByIndex = 1;
                if (v131 != 2)
                  *(_BYTE *)(v8 + 48) = 1;
                *(_BYTE *)(v8 + 51) = 1;
                *(_QWORD *)(v8 + 72) = v135;
                *(_QWORD *)(v8 + 80) = v134;
LABEL_131:
                if (*(_DWORD *)(v12 + 80))
                {
                  v139 = *(_DWORD *)(v12 + 80);
                  if ((v139 & 0x27) != 0 && (v139 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  v140 = *(_QWORD *)(v12 + 16);
                  v88 = v140 == 0;
                  if (v140)
                    v141 = 1;
                  else
                    v141 = OwnPropertySlotByIndex;
                  if ((v141 & 1) != 0)
                  {
LABEL_146:
                    if (v14)
                      goto LABEL_147;
                    return v88;
                  }
                }
                else if ((OwnPropertySlotByIndex & 1) != 0)
                {
LABEL_145:
                  v88 = 1;
                  goto LABEL_146;
                }
                if (*(_QWORD *)(*(_QWORD *)(v12 + 41952) + 2776) != v9)
                {
LABEL_134:
                  v88 = 0;
                  goto LABEL_146;
                }
                WTF::String::isolatedCopy((_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 112), (uint64_t *)&v157);
                v99 = v157;
                if (!v157 || !*((_DWORD *)v157 + 1))
                {
                  v100 = *(_QWORD *)(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) + 8);
                  if (v100)
                  {
                    v101 = v100 - 1;
                    if (v100 == 1)
                    {
                      v103 = &WTF::StringImpl::s_emptyAtomString;
                      WTF::StringImpl::s_emptyAtomString += 2;
                    }
                    else
                    {
                      v102 = *(_QWORD *)(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C));
                      v103 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
                      *v103 = 2;
                      v103[1] = v101;
                      *((_QWORD *)v103 + 1) = v102;
                      v103[4] = 4;
                      v99 = v157;
                    }
                  }
                  else
                  {
                    v103 = 0;
                  }
                  v157 = (WTF::StringImpl *)v103;
                  if (v99)
                  {
                    if (*(_DWORD *)v99 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v99, v92, v93, v94, v95, v96, v97, v98);
                      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
                    }
                    else
                    {
                      *(_DWORD *)v99 -= 2;
                    }
                  }
                }
                *(_QWORD *)v8 = JSC::jsString(v12, (JSC::VM *)&v157, v93, v94, v95, v96, v97, v98);
                *(_DWORD *)(v8 + 16) = 4;
                *(_QWORD *)(v8 + 32) = a1;
                *(_BYTE *)(v8 + 49) = 1;
                v104 = v157;
                v157 = 0;
                if (v104)
                {
                  if (*(_DWORD *)v104 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v104, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
                  }
                  else
                  {
                    *(_DWORD *)v104 -= 2;
                  }
                }
                goto LABEL_145;
              }
              *(_QWORD *)v8 = v133;
              *(_QWORD *)(v8 + 8) = v132;
              *(_DWORD *)(v8 + 16) = HIDWORD(a6);
              *(_QWORD *)(v8 + 32) = a1;
              OwnPropertySlotByIndex = 1;
              *(_BYTE *)(v8 + 49) = 3;
              if (v131 != 2)
                *(_BYTE *)(v8 + 48) = 1;
LABEL_194:
              v12 = v156;
              goto LABEL_131;
            }
          }
        }
      }
    }
LABEL_125:
    if ((*(_BYTE *)(a1 + 6) & 0x20) == 0)
      goto LABEL_126;
    goto LABEL_160;
  }
  v14 = 0;
  v154 = (JSC::VMTraps *)(v12 + 64);
  while (1)
  {
    v15 = (unsigned int (*)(JSC::VM **, uint64_t, unint64_t))*((_QWORD *)v13 + 5);
    if (v15)
      break;
    v18 = (uint64_t (*)(JSC::VM **, uint64_t, unint64_t, JSC::Exception **))*((_QWORD *)v13 + 6);
    if (v18)
    {
      if (!v14)
      {
        *(_DWORD *)v9 += 2;
        v19 = WTF::fastMalloc((WTF *)0x18);
        v14 = v19;
        *(_DWORD *)v19 = 1;
        *(_QWORD *)(v19 + 8) = v9;
        if ((*(_BYTE *)(v9 + 16) & 4) != 0)
          v20 = 0;
        else
          v20 = *(_QWORD *)(v9 + 8);
        *(_QWORD *)(v19 + 16) = v20;
      }
      v159 = 0;
      JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v157, a2[7], a3, a4, a5, a6, a7, a8);
      v23 = v18(a2, a1, v14, &v159);
      if (v158)
      {
        JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v158 + 112), (uint64_t)&v157, v157, a4, a5, a6, a7, a8);
        v26 = (unsigned int *)v158;
        v158 = 0;
        if (v26)
          WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v26, (uint64_t)a2, v25, a4, a5, a6, a7, a8);
      }
      a3 = (uint64_t)v159;
      if (v159)
      {
        if (((unint64_t)v159 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v159 & 0xFFFFFFFE) + 0x4C)))
        {
          a3 = JSC::Exception::create(v12, v159, 0, a4, a5, a6, a7, a8);
        }
        JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, (JSC::Exception *)a3, v24, a4, a5, a6, a7, a8);
        v23 = 10;
LABEL_172:
        *(_QWORD *)v8 = v23;
        *(_DWORD *)(v8 + 16) = 6;
        *(_QWORD *)(v8 + 32) = a1;
        v88 = 1;
        *(_BYTE *)(v8 + 49) = 1;
        goto LABEL_147;
      }
      if (v23)
        goto LABEL_172;
    }
LABEL_25:
    OpaqueJSClass::contextData(v13, (JSC::JSGlobalObject *)a2, a3, a4, a5, a6, a7, a8);
    v28 = *(uint64_t **)(v27 + 8);
    if (v28)
    {
      v29 = *v28;
      if (*v28)
      {
        v30 = *(_DWORD *)(v29 - 8);
        v31 = *(_DWORD *)(v9 + 16);
        if (v31 < 0x100)
          v32 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v9);
        else
          v32 = v31 >> 8;
        for (i = 0; ; v32 = i + v34)
        {
          v34 = v32 & v30;
          v35 = *(WTF **)(v29 + 16 * (v32 & v30));
          if (!v35)
            break;
          if (v35 != (WTF *)-1 && WTF::equal(v35, (const WTF::StringImpl *)v9, (const WTF::StringImpl *)a3))
          {
            v155 = v8;
            v36 = *(OpaqueJSClass **)(*(_QWORD *)(a1 + 24) + 8);
            if (v36)
            {
              v153 = a2[7];
              do
              {
                OpaqueJSClass::contextData(v36, (JSC::JSGlobalObject *)a2, a3, a4, a5, a6, a7, a8);
                v38 = *(uint64_t **)(v37 + 8);
                if (v38)
                {
                  v39 = *v38;
                  if (*v38)
                  {
                    v40 = *(_DWORD *)(v39 - 8);
                    v41 = *(_DWORD *)(v9 + 16);
                    if (v41 < 0x100)
                      v42 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v9);
                    else
                      v42 = v41 >> 8;
                    for (j = 0; ; v42 = j + v44)
                    {
                      v44 = v42 & v40;
                      v45 = *(WTF **)(v39 + 16 * v44);
                      if (!v45)
                        break;
                      if (v45 != (WTF *)-1
                        && WTF::equal(v45, (const WTF::StringImpl *)v9, (const WTF::StringImpl *)a3))
                      {
                        v46 = *(_QWORD *)(v39 + 16 * v44 + 8);
                        if (!v46)
                          break;
                        v47 = *(uint64_t (**)(JSC::VM **, uint64_t, _QWORD, JSC::Exception **))v46;
                        if (!*(_QWORD *)v46)
                          break;
                        v159 = 0;
                        JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v157, a2[7], a3, a4, a5, a6, a7, a8);
                        v48 = v47(a2, a1, *(_QWORD *)(v46 + 24), &v159);
                        if (v158)
                        {
                          JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v158 + 112), (uint64_t)&v157, v157, a4, a5, a6, a7, a8);
                          v51 = (unsigned int *)v158;
                          v158 = 0;
                          if (v51)
                            WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v51, (uint64_t)a2, v50, a4, a5, a6, a7, a8);
                        }
                        a3 = (uint64_t)v159;
                        v52 = v156;
                        if (v159)
                        {
                          if (((unint64_t)v159 & 0xFFFE000000000002) != 0
                            || &JSC::Exception::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)v159 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
                          {
                            v62 = v153;
                            a3 = JSC::Exception::create((uint64_t)v153, v159, 0, a4, a5, a6, a7, a8);
                            v8 = v155;
                          }
                          else
                          {
                            v8 = v155;
                            v62 = v153;
                          }
                          JSC::VM::throwException(v62, (JSC::JSGlobalObject *)a2, (JSC::Exception *)a3, v49, a4, a5, a6, a7, a8);
                          v48 = 10;
                        }
                        else
                        {
                          if (!v48)
                            break;
                          v8 = v155;
                        }
                        goto LABEL_56;
                      }
                      ++j;
                    }
                  }
                }
                v36 = (OpaqueJSClass *)*((_QWORD *)v36 + 1);
              }
              while (v36);
            }
            v48 = 0;
            v8 = v155;
            v52 = v156;
LABEL_56:
            if (*(_DWORD *)(v52 + 80))
            {
              v63 = *(_DWORD *)(v52 + 80);
              if ((v63 & 0x27) != 0 && (v63 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v154, 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v52 + 16))
                goto LABEL_134;
            }
            if (!v48)
              break;
            *(_QWORD *)v8 = v48;
            *(_DWORD *)(v8 + 16) = 6;
            *(_QWORD *)(v8 + 32) = a1;
            v88 = 1;
            *(_BYTE *)(v8 + 49) = 1;
            goto LABEL_146;
          }
          ++i;
        }
      }
    }
    OpaqueJSClass::contextData(v13, (JSC::JSGlobalObject *)a2, a3, a4, a5, a6, a7, a8);
    v54 = *(uint64_t **)(v53 + 16);
    if (v54)
    {
      v55 = *v54;
      if (*v54)
      {
        v56 = *(_DWORD *)(v55 - 8);
        v57 = *(_DWORD *)(v9 + 16);
        if (v57 < 0x100)
          v58 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v9);
        else
          v58 = v57 >> 8;
        for (k = 0; ; v58 = k + v60)
        {
          v60 = v58 & v56;
          v61 = *(WTF **)(v55 + 16 * (v58 & v56));
          if (!v61)
            break;
          if (v61 != (WTF *)-1 && WTF::equal(v61, (const WTF::StringImpl *)v9, (const WTF::StringImpl *)a3))
          {
            *(_QWORD *)v8 = JSC::staticFunctionGetterJSAPIWrapperObjectCallbackObject;
            *(_QWORD *)(v8 + 8) = 0;
            *(_DWORD *)(v8 + 16) = 6;
            *(_QWORD *)(v8 + 32) = a1;
            *(_BYTE *)(v8 + 49) = 3;
            goto LABEL_145;
          }
          ++k;
        }
      }
    }
    v13 = (OpaqueJSClass *)*((_QWORD *)v13 + 1);
    v12 = v156;
    if (!v13)
    {
      v130 = a2[7];
      goto LABEL_86;
    }
  }
  if (!v14)
  {
    *(_DWORD *)v9 += 2;
    v16 = WTF::fastMalloc((WTF *)0x18);
    v14 = v16;
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = v9;
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
      v17 = 0;
    else
      v17 = *(_QWORD *)(v9 + 8);
    *(_QWORD *)(v16 + 16) = v17;
  }
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v157, a2[7], a3, a4, a5, a6, a7, a8);
  if (!v15(a2, a1, v14))
  {
    if (v158)
    {
      JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v158 + 112), (uint64_t)&v157, v157, a4, a5, a6, a7, a8);
      v22 = (unsigned int *)v158;
      v158 = 0;
      if (v22)
        WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v22, v21, a3, a4, a5, a6, a7, a8);
    }
    goto LABEL_25;
  }
  *(_QWORD *)v8 = JSC::callbackGetterJSAPIWrapperObjectCallbackObject;
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = 6;
  *(_QWORD *)(v8 + 32) = a1;
  *(_BYTE *)(v8 + 49) = 3;
  if (v158)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v158 + 112), (uint64_t)&v157, v157, a4, a5, a6, a7, a8);
    v87 = (unsigned int *)v158;
    v158 = 0;
    if (v87)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v87, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  v88 = 1;
  do
  {
LABEL_147:
    v105 = __ldaxr((unsigned int *)v14);
    v106 = v105 - 1;
  }
  while (__stlxr(v106, (unsigned int *)v14));
  if (!v106)
  {
    atomic_store(1u, (unsigned int *)v14);
    v136 = atomic_load((unint64_t *)(v14 + 16));
    if (v136)
    {
      v137 = *(_QWORD *)(v14 + 8);
      if (!v137 || (*(_BYTE *)(v137 + 16) & 4) != 0 || *(_QWORD *)(v137 + 8) != v136)
        WTF::fastFree(v136, a2, a3, a4, a5, a6, a7, a8);
    }
    v138 = *(WTF::StringImpl **)(v14 + 8);
    *(_QWORD *)(v14 + 8) = 0;
    if (v138)
    {
      if (*(_DWORD *)v138 == 2)
      {
        WTF::StringImpl::~StringImpl(v138, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
      }
      else
      {
        *(_DWORD *)v138 -= 2;
      }
    }
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  return v88;
}

void sub_197EFACB4(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14)
{
  unint64_t v14;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (v14)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v14);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v14));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v14);
      v18 = atomic_load((unint64_t *)(v14 + 16));
      if (v18)
      {
        v19 = *(_QWORD *)(v14 + 8);
        if (!v19 || (*(_BYTE *)(v19 + 16) & 4) != 0 || *(_QWORD *)(v19 + 8) != v18)
          WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
      }
      v20 = *(WTF::StringImpl **)(v14 + 8);
      *(_QWORD *)(v14 + 8) = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
      }
      WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::getOwnPropertySlotByIndex(_DWORD *a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v11)(_DWORD *, uint64_t, WTF::StringImpl *, uint64_t);
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;

  v11 = *(uint64_t (**)(_DWORD *, uint64_t, WTF::StringImpl *, uint64_t))(16
                                                                                * *(unsigned int *)(16 * (*a1 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0x68);
  JSC::Identifier::from(*(uint64_t ***)(a2 + 56), (unint64_t)a3, a3, a4, a5, a6, a7, a8, (int **)&v30);
  v19 = v11(a1, a2, v30, a4);
  v20 = v30;
  v30 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  return v19;
}

void sub_197EFAE90(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, WTF::StringImpl *a10)
{
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::~StringImpl(a10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::getOwnSpecialPropertyNames(uint64_t a1, JSC::JSGlobalObject *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OpaqueJSClass *v8;
  int v9;
  uint64_t *v10;
  void (*v11)(JSC::JSGlobalObject *, uint64_t, const WTF::StringImpl *);
  JSC::VM *v12;
  uint64_t v13;
  unsigned int *v14;
  WTF::AtomStringImpl *v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  const WTF::StringImpl *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t i;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;
  const WTF::StringImpl *v77;
  int v78;
  uint64_t v79;
  int v80;
  _QWORD *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  WTF::StringImpl *v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  _QWORD *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  WTF::AtomStringImpl *v139;
  uint64_t v140;
  _QWORD **v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  WTF::StringImpl *v147;
  int v148;
  unint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unsigned int v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD *v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  int v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  int v174;
  unsigned int v175;
  unint64_t v176;
  uint64_t j;
  uint64_t v178;
  uint64_t v179;
  int v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unsigned int v184;
  int v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unsigned int v195;
  uint64_t v196;
  const WTF::StringImpl *v197;
  int v198;
  uint64_t v199;
  int v200;
  _QWORD *v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  int v207;
  WTF::StringImpl *v208;
  int v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  WTF::StringImpl *v213;
  _QWORD *v214;
  unint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  OpaqueJSClass *v262;
  WTF::StringImpl *v264;
  _QWORD *v265;
  unint64_t StatusReg;
  uint64_t **v267;
  int v268;
  _QWORD *v269;
  WTF::StringImpl *v270;
  unint64_t v271;
  _QWORD *v272;
  const WTF::StringImpl *v273;
  uint64_t *v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  WTF::StringImpl *v278;

  v8 = *(OpaqueJSClass **)(*(_QWORD *)(a1 + 24) + 8);
  if (v8)
  {
    v9 = a4;
    v267 = (uint64_t **)(*((_QWORD *)a2 + 7) + 41912);
    v10 = (uint64_t *)((char *)a3 + 8);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v268 = a4;
    v273 = a3;
    while (1)
    {
      v11 = (void (*)(JSC::JSGlobalObject *, uint64_t, const WTF::StringImpl *))*((_QWORD *)v8 + 9);
      if (v11)
      {
        v12 = a2 ? (JSC::VM *)*((_QWORD *)a2 + 7) : 0;
        JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v276, v12, (uint64_t)a3, a4, a5, a6, a7, a8);
        v11(a2, a1, v273);
        if (v277)
        {
          JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v277 + 112), (uint64_t)&v276, v276, a4, a5, a6, a7, a8);
          v14 = (unsigned int *)v277;
          v277 = 0;
          if (v14)
            WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v14, v13, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
      }
      v262 = v8;
      OpaqueJSClass::contextData(v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v23 = *(_QWORD ***)(v22 + 8);
      v24 = v273;
      if (!v23)
        goto LABEL_142;
      v25 = *v23;
      if (!*v23)
        break;
      v26 = *((unsigned int *)v25 - 1);
      v27 = &v25[2 * v26];
      if (!*((_DWORD *)v25 - 3))
      {
        v260 = &v25[2 * v26];
        goto LABEL_290;
      }
      if ((_DWORD)v26)
      {
        v28 = 16 * v26;
        do
        {
          if ((unint64_t)(*v25 + 1) > 1)
            goto LABEL_17;
          v25 += 2;
          v28 -= 16;
        }
        while (v28);
        v25 = v27;
      }
LABEL_17:
      v29 = v27;
LABEL_18:
      if (v27 != v25)
      {
        v269 = v27;
        do
        {
          v30 = v25[1];
          if (!*(_QWORD *)v30)
            goto LABEL_115;
          v31 = (WTF::StringImpl *)*v25;
          if (v9)
          {
            if ((*(_BYTE *)(v30 + 16) & 4) != 0)
              goto LABEL_115;
          }
          if (v31)
          {
            v32 = *(_DWORD *)v31;
            *(_DWORD *)v31 += 2;
            if ((*((_BYTE *)v31 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v31 = v32 + 4;
              v33 = (unint64_t)v31;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(*v267, (unint64_t)v31, v16, v17, v18, v19, v20, v21, &v276);
              v33 = v276;
            }
          }
          else
          {
            v33 = 0;
          }
          v34 = *(_DWORD *)v33;
          *(_DWORD *)v33 += 2;
          if (v34)
          {
            *(_DWORD *)v33 = v34;
          }
          else
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
            WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
          }
          if ((*(_BYTE *)(v33 + 16) & 0x20) != 0)
          {
            if ((*((_BYTE *)v24 + 24) & 1) == 0 || *((_BYTE *)v24 + 25) && (*(_BYTE *)(v33 + 36) & 4) != 0)
              goto LABEL_110;
          }
          else if ((*((_BYTE *)v24 + 24) & 2) == 0)
          {
            goto LABEL_110;
          }
          v35 = *(_QWORD *)v24;
          v36 = *(unsigned int *)(*(_QWORD *)v24 + 20);
          v271 = v33;
          if (v36 > 0x13)
          {
            v37 = *v10;
            if (*v10 && *(_DWORD *)(v37 - 12))
              goto LABEL_75;
            v264 = v31;
            v38 = *(uint64_t **)(v35 + 8);
            v274 = &v38[v36];
            while (1)
            {
              v39 = *v38;
              v40 = *v10;
              if (*v10)
                goto LABEL_36;
              v70 = WTF::fastZeroedMalloc(0x50uLL, (unint64_t)v15, (uint64_t)v16, v17, v18, v19, v20, v21);
              *v10 = v70 + 16;
              *(_DWORD *)(v70 + 12) = 8;
              *(_DWORD *)(*v10 - 8) = 7;
              *(_DWORD *)(*v10 - 16) = 0;
              *(_DWORD *)(*v10 - 12) = 0;
              v40 = *v10;
              v27 = v269;
              v33 = v271;
              if (*v10)
LABEL_36:
                v41 = *(_DWORD *)(v40 - 8);
              else
                v41 = 0;
              v42 = (~(v39 << 32) + v39) ^ ((unint64_t)(~(v39 << 32) + v39) >> 22);
              v43 = 9 * ((v42 + ~(v42 << 13)) ^ ((v42 + ~(v42 << 13)) >> 8));
              v44 = (v43 ^ (v43 >> 15)) + ~((v43 ^ (v43 >> 15)) << 27);
              v45 = v41 & ((v44 >> 31) ^ v44);
              v46 = (_QWORD *)(v40 + 8 * v45);
              v47 = *v46;
              if (*v46)
              {
                v48 = 0;
                v49 = 1;
                do
                {
                  if (v47 == v39)
                    goto LABEL_53;
                  if (v47 == -1)
                    v48 = v46;
                  v45 = (v45 + v49) & v41;
                  v46 = (_QWORD *)(v40 + 8 * v45);
                  v47 = *v46;
                  ++v49;
                }
                while (*v46);
                if (v48)
                {
                  *v48 = 0;
                  --*(_DWORD *)(*v10 - 16);
                  v46 = v48;
                }
              }
              *v46 = v39;
              v50 = *v10;
              if (*v10)
                v51 = *(_DWORD *)(v50 - 12) + 1;
              else
                v51 = 1;
              *(_DWORD *)(v50 - 12) = v51;
              v52 = *v10;
              if (*v10)
                v53 = *(_DWORD *)(v52 - 12);
              else
                v53 = 0;
              v54 = (*(_DWORD *)(v52 - 16) + v53);
              v55 = *(unsigned int *)(v52 - 4);
              if (v55 > 0x400)
              {
                if (v55 <= 2 * v54)
                  goto LABEL_73;
              }
              else if (3 * v55 <= 4 * v54)
              {
                if ((_DWORD)v55)
                {
LABEL_73:
                  v56 = *(_DWORD *)(v52 - 12);
                  v57 = (_DWORD)v55 << (6 * v56 >= (2 * v55));
                }
                else
                {
                  v56 = *(_DWORD *)(v52 - 12);
                  v57 = 8;
                }
                v58 = WTF::fastZeroedMalloc(8 * v57 + 16, (unint64_t)v15, (uint64_t)v16, v17, v18, v19, v20, v21);
                *v10 = v58 + 16;
                *(_DWORD *)(v58 + 12) = v57;
                *(_DWORD *)(*v10 - 8) = v57 - 1;
                *(_DWORD *)(*v10 - 16) = 0;
                *(_DWORD *)(*v10 - 12) = v56;
                v27 = v269;
                v33 = v271;
                if (!(_DWORD)v55)
                  goto LABEL_69;
                for (i = 0; i != v55; ++i)
                {
                  v60 = *(_QWORD *)(v52 + 8 * i);
                  if ((unint64_t)(v60 + 1) >= 2)
                  {
                    v61 = *v10;
                    if (*v10)
                      v62 = *(_DWORD *)(v61 - 8);
                    else
                      v62 = 0;
                    v63 = (~(v60 << 32) + v60) ^ ((unint64_t)(~(v60 << 32) + v60) >> 22);
                    v64 = 9 * ((v63 + ~(v63 << 13)) ^ ((v63 + ~(v63 << 13)) >> 8));
                    v65 = (v64 ^ (v64 >> 15)) + ~((v64 ^ (v64 >> 15)) << 27);
                    v66 = v62 & ((v65 >> 31) ^ v65);
                    v67 = 1;
                    do
                    {
                      v68 = v66;
                      v69 = *(_QWORD *)(v61 + 8 * v66);
                      v66 = (v66 + v67++) & v62;
                    }
                    while (v69);
                    *(_QWORD *)(v61 + 8 * v68) = v60;
                  }
                }
                if (v52)
LABEL_69:
                  WTF::fastFree(v52 - 16, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
              }
LABEL_53:
              if (++v38 == v274)
              {
                v37 = *v10;
                v9 = v268;
                v24 = v273;
                v31 = v264;
                if (!*v10)
                {
                  WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v10, 8uLL, 0, v17, v18, v19, v20, v21);
                  v37 = *v10;
                  if (!*v10)
                  {
                    v71 = 0;
LABEL_76:
                    v72 = (~(v33 << 32) + v33) ^ ((~(v33 << 32) + v33) >> 22);
                    v73 = 9 * ((v72 + ~(v72 << 13)) ^ ((v72 + ~(v72 << 13)) >> 8));
                    v74 = (v73 ^ (v73 >> 15)) + ~((v73 ^ (v73 >> 15)) << 27);
                    v75 = v71 & ((v74 >> 31) ^ v74);
                    v16 = (const WTF::StringImpl *)(v37 + 8 * v75);
                    v76 = *(_QWORD *)v16;
                    if (*(_QWORD *)v16)
                    {
                      v77 = 0;
                      v78 = 1;
                      do
                      {
                        if (v76 == v33)
                          goto LABEL_91;
                        if (v76 == -1)
                          v77 = v16;
                        v75 = (v75 + v78) & v71;
                        v16 = (const WTF::StringImpl *)(v37 + 8 * v75);
                        v76 = *(_QWORD *)v16;
                        ++v78;
                      }
                      while (*(_QWORD *)v16);
                      if (v77)
                      {
                        *(_QWORD *)v77 = 0;
                        --*(_DWORD *)(*v10 - 16);
                        v16 = v77;
                      }
                    }
                    *(_QWORD *)v16 = v33;
                    v79 = *v10;
                    if (*v10)
                      v80 = *(_DWORD *)(v79 - 12) + 1;
                    else
                      v80 = 1;
                    *(_DWORD *)(v79 - 12) = v80;
                    v82 = *v10;
                    if (*v10)
                      v83 = *(_DWORD *)(v82 - 12);
                    else
                      v83 = 0;
                    v84 = (*(_DWORD *)(v82 - 16) + v83);
                    v85 = *(unsigned int *)(v82 - 4);
                    if (v85 > 0x400)
                    {
                      if (v85 > 2 * v84)
                        goto LABEL_99;
                    }
                    else
                    {
                      if (3 * v85 > 4 * v84)
                        goto LABEL_99;
                      if (!(_DWORD)v85)
                      {
                        v135 = 8;
                        goto LABEL_134;
                      }
                    }
                    v135 = ((_DWORD)v85 << (6 * *(_DWORD *)(v82 - 12) >= (2 * v85)));
LABEL_134:
                    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v10, v135, (uint64_t)v16, v17, v18, v19, v20, v21);
                    goto LABEL_99;
                  }
                }
LABEL_75:
                v71 = *(_DWORD *)(v37 - 8);
                goto LABEL_76;
              }
            }
          }
          if ((_DWORD)v36)
          {
            v81 = *(_QWORD **)(v35 + 8);
            while (*v81 != v33)
            {
              ++v81;
              if (!--v36)
                goto LABEL_99;
            }
LABEL_91:
            if (!v33)
              goto LABEL_112;
          }
          else
          {
LABEL_99:
            v86 = *(_QWORD *)v24;
            v87 = *(_DWORD *)(v33 + 16);
            if ((v87 & 0x20) != 0)
            {
              *(_DWORD *)v33 += 2;
              v88 = (WTF::StringImpl *)v33;
            }
            else
            {
              if ((v87 & 0x10) != 0)
              {
                *(_DWORD *)v33 += 2;
                v88 = (WTF::StringImpl *)v33;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*((_QWORD *)v273 + 2) + 41912), v33, v16, v17, v18, v19, v20, v21, &v276);
                v88 = (WTF::StringImpl *)v276;
              }
              v89 = *(_DWORD *)v88;
              *(_DWORD *)v88 += 2;
              if (v89)
              {
                *(_DWORD *)v88 = v89;
              }
              else
              {
                WTF::StringImpl::~StringImpl(v88, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
                WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
              }
            }
            v90 = (uint64_t *)(v86 + 8);
            v278 = v88;
            v91 = *(unsigned int *)(v86 + 20);
            if ((_DWORD)v91 == *(_DWORD *)(v86 + 16))
            {
              v136 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v90, v91 + 1, (unint64_t)&v278);
              v91 = *(unsigned int *)(v86 + 20);
              v137 = *(_QWORD *)(v86 + 8);
              v138 = *v136;
              *v136 = 0;
              *(_QWORD *)(v137 + 8 * v91) = v138;
            }
            else
            {
              v92 = *v90;
              v278 = 0;
              *(_QWORD *)(v92 + 8 * v91) = v88;
            }
            *(_DWORD *)(v86 + 20) = v91 + 1;
            v93 = v278;
            v278 = 0;
            v24 = v273;
            if (v93)
            {
              if (*(_DWORD *)v93 == 2)
              {
                WTF::StringImpl::~StringImpl(v93, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
                WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
              }
              else
              {
                *(_DWORD *)v93 -= 2;
              }
            }
          }
LABEL_110:
          if (*(_DWORD *)v33 != 2)
          {
            *(_DWORD *)v33 -= 2;
LABEL_112:
            if (v31)
              goto LABEL_113;
            goto LABEL_115;
          }
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
          WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
          if (v31)
          {
LABEL_113:
            if (*(_DWORD *)v31 == 2)
            {
              WTF::StringImpl::~StringImpl(v31, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
            }
            else
            {
              *(_DWORD *)v31 -= 2;
            }
          }
LABEL_115:
          v94 = v25 + 2;
          v25 = v29;
          if (v94 != v29)
          {
            v25 = v94;
            do
            {
              if ((unint64_t)(*v25 + 1) > 1)
                goto LABEL_120;
              v25 += 2;
            }
            while (v25 != v29);
            v25 = v29;
          }
LABEL_120:
          ;
        }
        while (v25 != v27);
      }
LABEL_142:
      OpaqueJSClass::contextData(v262, a2, (uint64_t)v16, v17, v18, v19, v20, v21);
      v141 = *(_QWORD ***)(v140 + 16);
      if (!v141)
        goto LABEL_285;
      v142 = *v141;
      if (*v141)
      {
        v143 = *((unsigned int *)v142 - 1);
        v144 = &v142[2 * v143];
        if (*((_DWORD *)v142 - 3))
        {
          if ((_DWORD)v143)
          {
            v145 = 16 * v143;
            do
            {
              if ((unint64_t)(*v142 + 1) > 1)
                goto LABEL_150;
              v142 += 2;
              v145 -= 16;
            }
            while (v145);
            v142 = v144;
          }
LABEL_150:
          v146 = v144;
          goto LABEL_151;
        }
        v259 = &v142[2 * v143];
      }
      else
      {
        v144 = 0;
        v259 = 0;
        v143 = 0;
      }
      v146 = &v142[2 * v143];
      v142 = v259;
LABEL_151:
      if (v144 == v142)
        goto LABEL_285;
      v265 = v144;
      v272 = v146;
      do
      {
        v147 = (WTF::StringImpl *)*v142;
        if (v9 && (*(_BYTE *)(v142[1] + 8) & 4) != 0)
          goto LABEL_258;
        if (v147)
        {
          v148 = *(_DWORD *)v147;
          *(_DWORD *)v147 += 2;
          if ((*((_BYTE *)v147 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v147 = v148 + 4;
            v149 = (unint64_t)v147;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(*v267, (unint64_t)v147, a3, a4, a5, a6, a7, a8, &v276);
            v149 = v276;
          }
        }
        else
        {
          v149 = 0;
        }
        v150 = *(_DWORD *)v149;
        *(_DWORD *)v149 += 2;
        if (v150)
        {
          *(_DWORD *)v149 = v150;
        }
        else
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v149, v139, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v215, v216, v217, v218, v219, v220, v221, v222);
        }
        if ((*(_BYTE *)(v149 + 16) & 0x20) != 0)
        {
          if ((*((_BYTE *)v24 + 24) & 1) == 0 || *((_BYTE *)v24 + 25) && (*(_BYTE *)(v149 + 36) & 4) != 0)
            goto LABEL_253;
        }
        else if ((*((_BYTE *)v24 + 24) & 2) == 0)
        {
          goto LABEL_253;
        }
        v151 = *(_QWORD *)v24;
        v152 = *(unsigned int *)(*(_QWORD *)v24 + 20);
        v275 = v149;
        if (v152 <= 0x13)
        {
          if ((_DWORD)v152)
          {
            v201 = *(_QWORD **)(v151 + 8);
            do
            {
              if (*v201 == v149)
                goto LABEL_234;
              ++v201;
              --v152;
            }
            while (v152);
          }
          goto LABEL_242;
        }
        v153 = *v10;
        if (*v10 && *(_DWORD *)(v153 - 12))
        {
LABEL_218:
          v191 = *(_DWORD *)(v153 - 8);
          goto LABEL_219;
        }
        v270 = v147;
        v154 = *(uint64_t **)(v151 + 8);
        v155 = &v154[v152];
        do
        {
          v156 = *v154;
          v157 = *v10;
          if (*v10)
            goto LABEL_168;
          v190 = WTF::fastZeroedMalloc(0x50uLL, (unint64_t)v139, (uint64_t)a3, a4, a5, a6, a7, a8);
          *v10 = v190 + 16;
          *(_DWORD *)(v190 + 12) = 8;
          *(_DWORD *)(*v10 - 8) = 7;
          *(_DWORD *)(*v10 - 16) = 0;
          *(_DWORD *)(*v10 - 12) = 0;
          v157 = *v10;
          v149 = v275;
          if (*v10)
LABEL_168:
            v158 = *(_DWORD *)(v157 - 8);
          else
            v158 = 0;
          v159 = (~(v156 << 32) + v156) ^ ((unint64_t)(~(v156 << 32) + v156) >> 22);
          v160 = 9 * ((v159 + ~(v159 << 13)) ^ ((v159 + ~(v159 << 13)) >> 8));
          v161 = (v160 ^ (v160 >> 15)) + ~((v160 ^ (v160 >> 15)) << 27);
          v162 = v158 & ((v161 >> 31) ^ v161);
          v163 = (_QWORD *)(v157 + 8 * v162);
          v164 = *v163;
          if (*v163)
          {
            v165 = 0;
            v166 = 1;
            while (v164 != v156)
            {
              if (v164 == -1)
                v165 = v163;
              v162 = (v162 + v166) & v158;
              v163 = (_QWORD *)(v157 + 8 * v162);
              v164 = *v163;
              ++v166;
              if (!*v163)
              {
                if (v165)
                {
                  *v165 = 0;
                  --*(_DWORD *)(*v10 - 16);
                  v163 = v165;
                }
                goto LABEL_177;
              }
            }
            goto LABEL_185;
          }
LABEL_177:
          *v163 = v156;
          v167 = *v10;
          if (*v10)
            v168 = *(_DWORD *)(v167 - 12) + 1;
          else
            v168 = 1;
          *(_DWORD *)(v167 - 12) = v168;
          v169 = *v10;
          if (*v10)
            v170 = *(_DWORD *)(v169 - 12);
          else
            v170 = 0;
          v171 = v169 - 16;
          v172 = (*(_DWORD *)(v169 - 16) + v170);
          v173 = *(unsigned int *)(v169 - 4);
          if (v173 > 0x400)
          {
            if (v173 > 2 * v172)
              goto LABEL_185;
LABEL_209:
            v174 = *(_DWORD *)(v169 - 12);
            v175 = (_DWORD)v173 << (6 * v174 >= (2 * v173));
            goto LABEL_189;
          }
          if (3 * v173 > 4 * v172)
            goto LABEL_185;
          if ((_DWORD)v173)
            goto LABEL_209;
          v174 = *(_DWORD *)(v169 - 12);
          v175 = 8;
LABEL_189:
          v176 = WTF::fastZeroedMalloc(8 * v175 + 16, (unint64_t)v139, (uint64_t)a3, a4, a5, a6, a7, a8);
          *v10 = v176 + 16;
          *(_DWORD *)(v176 + 12) = v175;
          *(_DWORD *)(*v10 - 8) = v175 - 1;
          *(_DWORD *)(*v10 - 16) = 0;
          *(_DWORD *)(*v10 - 12) = v174;
          v149 = v275;
          if (!(_DWORD)v173)
            goto LABEL_201;
          for (j = 0; j != v173; ++j)
          {
            v178 = *(_QWORD *)(v169 + 8 * j);
            if ((unint64_t)(v178 + 1) >= 2)
            {
              v179 = *v10;
              if (*v10)
                v180 = *(_DWORD *)(v179 - 8);
              else
                v180 = 0;
              v181 = (~(v178 << 32) + v178) ^ ((unint64_t)(~(v178 << 32) + v178) >> 22);
              v182 = 9 * ((v181 + ~(v181 << 13)) ^ ((v181 + ~(v181 << 13)) >> 8));
              v183 = (v182 ^ (v182 >> 15)) + ~((v182 ^ (v182 >> 15)) << 27);
              v184 = v180 & ((v183 >> 31) ^ v183);
              v185 = 1;
              do
              {
                v186 = v184;
                v187 = *(_QWORD *)(v179 + 8 * v184);
                v184 = (v184 + v185++) & v180;
              }
              while (v187);
              *(_QWORD *)(v179 + 8 * v186) = v178;
            }
          }
          if (v169)
          {
LABEL_201:
            v188 = *(_QWORD *)(StatusReg + 752);
            if (v188)
            {
              if (v171 >> 43
                || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                     + (((unint64_t)(v169 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v169 - 16) >> 24)) & 1) == 0)
              {
                if (v171 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v171 >> 24)
                {
                  a4 = 0;
LABEL_213:
                  bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v188, v169 - 16, 1, a4, a5, a6, a7, a8);
                  goto LABEL_185;
                }
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + (((((unint64_t)(v169 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((((v169 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 != 1)
                  goto LABEL_213;
              }
              v189 = *(unsigned int *)(v188 + 8000);
              if (v189 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v188, v169 - 16, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v188 + 8 * v189) = v171 | 0x5000000000000;
                *(_DWORD *)(v188 + 8000) = v189 + 1;
              }
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v169 - 16, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
LABEL_185:
          ++v154;
        }
        while (v154 != v155);
        v153 = *v10;
        v9 = v268;
        v24 = v273;
        v144 = v265;
        v147 = v270;
        if (*v10)
          goto LABEL_218;
        WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v10, 8uLL, 0, a4, a5, a6, a7, a8);
        v153 = *v10;
        if (*v10)
          goto LABEL_218;
        v191 = 0;
LABEL_219:
        v192 = (~(v149 << 32) + v149) ^ ((~(v149 << 32) + v149) >> 22);
        v193 = 9 * ((v192 + ~(v192 << 13)) ^ ((v192 + ~(v192 << 13)) >> 8));
        v194 = (v193 ^ (v193 >> 15)) + ~((v193 ^ (v193 >> 15)) << 27);
        v195 = v191 & ((v194 >> 31) ^ v194);
        a3 = (const WTF::StringImpl *)(v153 + 8 * v195);
        v196 = *(_QWORD *)a3;
        if (!*(_QWORD *)a3)
        {
LABEL_227:
          *(_QWORD *)a3 = v149;
          v199 = *v10;
          if (*v10)
            v200 = *(_DWORD *)(v199 - 12) + 1;
          else
            v200 = 1;
          *(_DWORD *)(v199 - 12) = v200;
          v202 = *v10;
          if (*v10)
            v203 = *(_DWORD *)(v202 - 12);
          else
            v203 = 0;
          v204 = (*(_DWORD *)(v202 - 16) + v203);
          v205 = *(unsigned int *)(v202 - 4);
          if (v205 > 0x400)
          {
            if (v205 > 2 * v204)
              goto LABEL_242;
          }
          else
          {
            if (3 * v205 > 4 * v204)
            {
LABEL_242:
              v206 = *(_QWORD *)v24;
              v207 = *(_DWORD *)(v149 + 16);
              if ((v207 & 0x20) != 0)
              {
                *(_DWORD *)v149 += 2;
                v208 = (WTF::StringImpl *)v149;
              }
              else
              {
                if ((v207 & 0x10) != 0)
                {
                  *(_DWORD *)v149 += 2;
                  v208 = (WTF::StringImpl *)v149;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*((_QWORD *)v273 + 2) + 41912), v149, a3, a4, a5, a6, a7, a8, &v276);
                  v208 = (WTF::StringImpl *)v276;
                }
                v209 = *(_DWORD *)v208;
                *(_DWORD *)v208 += 2;
                if (v209)
                {
                  *(_DWORD *)v208 = v209;
                }
                else
                {
                  WTF::StringImpl::~StringImpl(v208, v139, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v247, v248, v249, v250, v251, v252, v253, v254);
                }
              }
              v210 = (uint64_t *)(v206 + 8);
              v278 = v208;
              v211 = *(unsigned int *)(v206 + 20);
              if ((_DWORD)v211 == *(_DWORD *)(v206 + 16))
              {
                v256 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v210, v211 + 1, (unint64_t)&v278);
                v211 = *(unsigned int *)(v206 + 20);
                v257 = *(_QWORD *)(v206 + 8);
                v258 = *v256;
                *v256 = 0;
                *(_QWORD *)(v257 + 8 * v211) = v258;
              }
              else
              {
                v212 = *v210;
                v278 = 0;
                *(_QWORD *)(v212 + 8 * v211) = v208;
              }
              *(_DWORD *)(v206 + 20) = v211 + 1;
              v213 = v278;
              v278 = 0;
              v24 = v273;
              if (v213)
              {
                if (*(_DWORD *)v213 == 2)
                {
                  WTF::StringImpl::~StringImpl(v213, v139, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v239, v240, v241, v242, v243, v244, v245, v246);
                }
                else
                {
                  *(_DWORD *)v213 -= 2;
                }
              }
              goto LABEL_253;
            }
            if (!(_DWORD)v205)
            {
              v255 = 8;
              goto LABEL_277;
            }
          }
          v255 = ((_DWORD)v205 << (6 * *(_DWORD *)(v202 - 12) >= (2 * v205)));
LABEL_277:
          WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v10, v255, (uint64_t)a3, a4, a5, a6, a7, a8);
          goto LABEL_242;
        }
        v197 = 0;
        v198 = 1;
        while (v196 != v149)
        {
          if (v196 == -1)
            v197 = a3;
          v195 = (v195 + v198) & v191;
          a3 = (const WTF::StringImpl *)(v153 + 8 * v195);
          v196 = *(_QWORD *)a3;
          ++v198;
          if (!*(_QWORD *)a3)
          {
            if (v197)
            {
              *(_QWORD *)v197 = 0;
              --*(_DWORD *)(*v10 - 16);
              a3 = v197;
            }
            goto LABEL_227;
          }
        }
LABEL_234:
        if (!v149)
        {
LABEL_255:
          if (v147)
            goto LABEL_256;
          goto LABEL_258;
        }
LABEL_253:
        if (*(_DWORD *)v149 != 2)
        {
          *(_DWORD *)v149 -= 2;
          goto LABEL_255;
        }
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v149, v139, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v231, v232, v233, v234, v235, v236, v237, v238);
        if (v147)
        {
LABEL_256:
          if (*(_DWORD *)v147 == 2)
          {
            WTF::StringImpl::~StringImpl(v147, v139, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v223, v224, v225, v226, v227, v228, v229, v230);
          }
          else
          {
            *(_DWORD *)v147 -= 2;
          }
        }
LABEL_258:
        v214 = v142 + 2;
        v142 = v272;
        if (v214 != v272)
        {
          v142 = v214;
          while ((unint64_t)(*v142 + 1) <= 1)
          {
            v142 += 2;
            if (v142 == v272)
            {
              v142 = v272;
              break;
            }
          }
        }
      }
      while (v142 != v144);
LABEL_285:
      v8 = (OpaqueJSClass *)*((_QWORD *)v262 + 1);
      if (!v8)
        return;
    }
    v27 = 0;
    v260 = 0;
    v26 = 0;
LABEL_290:
    v29 = &v25[2 * v26];
    v25 = v260;
    goto LABEL_18;
  }
}

void sub_197EFBE18(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,int a21,uint64_t a22)
{
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v25 = *(WTF::StringImpl **)(v23 - 88);
  *(_QWORD *)(v23 - 88) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  if (*(_DWORD *)a18 == 2)
  {
    WTF::StringImpl::~StringImpl(a18, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    if (!v22)
      goto LABEL_12;
  }
  else
  {
    *(_DWORD *)a18 -= 2;
    if (!v22)
      goto LABEL_12;
  }
  if (*(_DWORD *)v22 == 2)
  {
    WTF::StringImpl::~StringImpl(v22, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
  }
  else
  {
    *(_DWORD *)v22 -= 2;
  }
LABEL_12:
  _Unwind_Resume(exception_object);
}

uint64_t JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::customHasInstance(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM *v12;
  uint64_t (*v13)(JSC::JSGlobalObject *, uint64_t, uint64_t, JSC::Exception **);
  uint64_t v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  JSC::Exception *v25;
  uint64_t v27;
  uint64_t v28;
  JSC::Exception *v29;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (!v8)
    return 0;
  v12 = (JSC::VM *)*((_QWORD *)a2 + 7);
  while (1)
  {
    v13 = *(uint64_t (**)(JSC::JSGlobalObject *, uint64_t, uint64_t, JSC::Exception **))(v8 + 96);
    if (v13)
      break;
    v8 = *(_QWORD *)(v8 + 8);
    if (!v8)
      return 0;
  }
  v29 = 0;
  if (a2)
    v15 = v12;
  else
    v15 = 0;
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v27, v15, a3, a4, a5, a6, a7, a8);
  v14 = v13(a2, a1, a3, &v29);
  if (v28)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v28 + 112), (uint64_t)&v27, v27, v16, v17, v18, v19, v20);
    v24 = (unsigned int *)v28;
    v28 = 0;
    if (v24)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v24, v22, v23, v16, v17, v18, v19, v20);
  }
  v25 = v29;
  if (v29)
  {
    if (((unint64_t)v29 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C)))
    {
      v25 = (JSC::Exception *)JSC::Exception::create((uint64_t)v12, v29, 0, v16, v17, v18, v19, v20);
    }
    JSC::VM::throwException(v12, a2, v25, v21, v16, v17, v18, v19, v20);
  }
  return v14;
}

void sub_197EFC0AC(_Unwind_Exception *exception_object, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;

  if (a10)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(a10 + 112), (uint64_t)&a9, a9, a4, a5, a6, a7, a8);
    v18 = (unsigned int *)a10;
    a10 = 0;
    if (v18)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v18, v11, v12, v13, v14, v15, v16, v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t JSC::callJSAPIWrapperObjectCallbackObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t (*v14)(JSC *, uint64_t, unint64_t, unint64_t, WTF *, JSC::Exception **);
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  JSC::VM *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  JSC::Exception *v31;
  WTF *v32;
  WTF *v34;
  JSC::JSGlobalObject *v35;
  unint64_t v36;
  JSC::JSGlobalObject *v37;
  uint64_t v38;
  uint64_t v39;
  JSC::Exception *v40;
  WTF *v41;
  uint64_t v42;
  _BYTE v43[128];

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 5);
  v41 = (WTF *)v11;
  if ((v11 & 0xFFFE000000000002) != 0 || (v12 = *(unsigned __int8 *)(v11 + 5), v12 < 0x17))
  {
    if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
      goto LABEL_28;
    v35 = a2;
    if (v11 >> 49)
    {
      v36 = JSC::constructNumber((uint64_t)this, (JSC::VM *)v11, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    else if ((v11 & 0xFFFFFFFFFFFFFFFELL) == 6)
    {
      v36 = JSC::constructBooleanFromImmediateBoolean((uint64_t)this, v11, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    else if ((v11 & 0xFFFE000000000002) != 0)
    {
      v36 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v41, this, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    else
    {
      if (*(unsigned __int8 *)(v11 + 5) > 0x16u)
      {
LABEL_39:
        a2 = v35;
        goto LABEL_4;
      }
      v36 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v11, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v11 = v36;
    goto LABEL_39;
  }
  if (v12 - 51 <= 5)
LABEL_28:
    v11 = *((_QWORD *)this + 8);
LABEL_4:
  v13 = *(_QWORD *)(v10 + 24);
  do
  {
    v13 = *(_QWORD *)(v13 + 8);
    if (!v13)
      goto LABEL_45;
    v14 = *(uint64_t (**)(JSC *, uint64_t, unint64_t, unint64_t, WTF *, JSC::Exception **))(v13 + 80);
  }
  while (!v14);
  v15 = *((int *)a2 + 8) - 1;
  v41 = (WTF *)v43;
  v42 = 16;
  if (v15 >= 0x11)
  {
    v37 = a2;
    if (v15 >> 29)
    {
LABEL_45:
      __break(0xC471u);
      JUMPOUT(0x197EFC308);
    }
    v34 = (WTF *)WTF::fastMalloc((WTF *)(8 * v15));
    LODWORD(v42) = v15;
    v41 = v34;
    v16 = HIDWORD(v42);
    a2 = v37;
  }
  else
  {
    if (!v15)
      goto LABEL_13;
    v16 = 0;
  }
  v17 = 0x600000000;
  v18 = v15;
  do
  {
    *((_QWORD *)v41 + v16++) = *(_QWORD *)((char *)a2 + (v17 >> 29));
    v17 += 0x100000000;
    --v18;
  }
  while (v18);
  HIDWORD(v42) = v16;
LABEL_13:
  v19 = 0;
  v40 = 0;
  if (this)
    v19 = (JSC::VM *)*((_QWORD *)this + 7);
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v38, v19, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v20 = v14(this, v10, v11, v15, v41, &v40);
  if (v20)
    v28 = v20;
  else
    v28 = 2;
  if (v39)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v39 + 112), (uint64_t)&v38, v38, v22, v23, v24, v25, v26);
    v30 = (unsigned int *)v39;
    v39 = 0;
    if (v30)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v30, (uint64_t)v21, v29, v22, v23, v24, v25, v26);
  }
  v31 = v40;
  if (v40)
  {
    if (((unint64_t)v40 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x4C)))
    {
      v31 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, v40, 0, v22, v23, v24, v25, v26);
    }
    JSC::VM::throwException(v9, this, v31, v27, v22, v23, v24, v25, v26);
    v28 = 10;
  }
  v32 = v41;
  if (v43 != (_BYTE *)v41 && v41)
  {
    v41 = 0;
    LODWORD(v42) = 0;
    WTF::fastFree((unint64_t)v32, v21, (uint64_t)v31, v22, v23, v24, v25, v26);
  }
  return v28;
}

void sub_197EFC390(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16)
{
  WTF *v16;

  if (v16 != a15)
  {
    if (a15)
      WTF::fastFree((unint64_t)a15, a2, a3, a4, a5, a6, a7, a8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t JSC::constructJSAPIWrapperObjectCallbackObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  JSC::VM *v11;
  uint64_t (*v12)(JSC *, uint64_t, unint64_t, WTF *, JSC::Exception **);
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  JSC::VM *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  unsigned int *v27;
  JSC::Exception *v28;
  WTF *v29;
  JSC::JSGlobalObject *v31;
  uint64_t v32;
  uint64_t v33;
  JSC::Exception *v34;
  WTF *v35;
  uint64_t v36;
  _BYTE v37[128];

  v8 = *((_QWORD *)a2 + 3);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8);
  if (!v9)
  {
LABEL_5:
    __break(0xC471u);
    goto LABEL_29;
  }
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  while (1)
  {
    v12 = *(uint64_t (**)(JSC *, uint64_t, unint64_t, WTF *, JSC::Exception **))(v9 + 88);
    if (v12)
      break;
    v9 = *(_QWORD *)(v9 + 8);
    if (!v9)
      goto LABEL_5;
  }
  v13 = *((int *)a2 + 8) - 1;
  v35 = (WTF *)v37;
  v36 = 16;
  if (v13 >= 0x11)
  {
    v31 = a2;
    if (!(v13 >> 29))
    {
      LODWORD(v36) = v13;
      v35 = (WTF *)WTF::fastMalloc((WTF *)(8 * v13));
      v14 = HIDWORD(v36);
      a2 = v31;
      goto LABEL_9;
    }
    __break(0xC471u);
LABEL_29:
    JUMPOUT(0x197EFC44CLL);
  }
  if (!v13)
    goto LABEL_12;
  v14 = 0;
LABEL_9:
  v15 = 0x600000000;
  v16 = v13;
  do
  {
    *((_QWORD *)v35 + v14++) = *(_QWORD *)((char *)a2 + (v15 >> 29));
    v15 += 0x100000000;
    --v16;
  }
  while (v16);
  HIDWORD(v36) = v14;
LABEL_12:
  v17 = 0;
  v34 = 0;
  if (this)
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v32, v17, (uint64_t)a3, a4, a5, a6, a7, a8);
  v24 = v12(this, v8, v13, v35, &v34);
  if (v33)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v33 + 112), (uint64_t)&v32, v32, v19, v20, v21, v22, v23);
    v27 = (unsigned int *)v33;
    v33 = 0;
    if (v27)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v27, (uint64_t)v18, v26, v19, v20, v21, v22, v23);
  }
  v28 = v34;
  if (v34)
  {
    if (((unint64_t)v34 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C)))
    {
      v28 = (JSC::Exception *)JSC::Exception::create((uint64_t)v11, v34, 0, v19, v20, v21, v22, v23);
    }
    JSC::VM::throwException(v11, this, v28, v25, v19, v20, v21, v22, v23);
    v24 = 10;
  }
  v29 = v35;
  if (v37 != (_BYTE *)v35 && v35)
  {
    v35 = 0;
    LODWORD(v36) = 0;
    WTF::fastFree((unint64_t)v29, v18, (uint64_t)v28, v19, v20, v21, v22, v23);
  }
  return v24;
}

void sub_197EFC5E0(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16)
{
  WTF *v16;

  if (v16 != a15)
  {
    if (a15)
      WTF::fastFree((unint64_t)a15, a2, a3, a4, a5, a6, a7, a8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t JSC::callbackGetterJSAPIWrapperObjectCallbackObject(uint64_t a1, uint64_t a2, JSC::Exception *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v11;
  JSC::Exception *v12;
  unint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, unint64_t, WTF::StringImpl **);
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unint64_t v23;
  JSC::Heap **v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  JSC::Exception *v32;
  WTF::StringImpl *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t (*v48)(uint64_t *);
  uint64_t *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v9 = *(JSC::VM **)(a1 + 56);
  if (a3)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
    if (v11)
    {
      v12 = a3;
      v13 = 0;
      while (1)
      {
        v14 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, WTF::StringImpl **))(v11 + 48);
        if (v14)
        {
          if (!v13)
          {
            *(_DWORD *)v12 += 2;
            v15 = WTF::fastMalloc((WTF *)0x18);
            v13 = v15;
            *(_DWORD *)v15 = 1;
            *(_QWORD *)(v15 + 8) = v12;
            if ((*((_BYTE *)v12 + 16) & 4) != 0)
              v16 = 0;
            else
              v16 = *((_QWORD *)v12 + 1);
            *(_QWORD *)(v15 + 16) = v16;
          }
          v58 = 0;
          JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v59, *(JSC::VM **)(a1 + 56), (uint64_t)a3, a4, a5, a6, a7, a8);
          v18 = v14(a1, a2, v13, &v58);
          if (v60)
          {
            JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v60 + 112), (uint64_t)&v59, v59, a4, a5, a6, a7, a8);
            v21 = (unsigned int *)v60;
            v60 = 0;
            if (v21)
              WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v21, (uint64_t)v17, v20, a4, a5, a6, a7, a8);
          }
          a3 = v58;
          if (v58)
          {
            if (((unint64_t)v58 & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0x4C)))
            {
              a3 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, v58, 0, a4, a5, a6, a7, a8);
            }
            JSC::VM::throwException(v9, (JSC::JSGlobalObject *)a1, a3, v19, a4, a5, a6, a7, a8);
            v18 = 10;
            do
            {
LABEL_25:
              v34 = __ldaxr((unsigned int *)v13);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, (unsigned int *)v13));
            if (!v35)
            {
              atomic_store(1u, (unsigned int *)v13);
              v45 = atomic_load((unint64_t *)(v13 + 16));
              if (v45)
              {
                v46 = *(_QWORD *)(v13 + 8);
                if (!v46 || (*(_BYTE *)(v46 + 16) & 4) != 0 || *(_QWORD *)(v46 + 8) != v45)
                  WTF::fastFree(v45, v17, (uint64_t)a3, a4, a5, a6, a7, a8);
              }
              v47 = *(WTF::StringImpl **)(v13 + 8);
              *(_QWORD *)(v13 + 8) = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                {
                  WTF::StringImpl::~StringImpl(v47, (WTF::AtomStringImpl *)v17, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
                }
                else
                {
                  *(_DWORD *)v47 -= 2;
                }
              }
              WTF::fastFree(v13, v17, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
            return v18;
          }
          if (v18)
            goto LABEL_25;
        }
        v11 = *(_QWORD *)(v11 + 8);
        if (!v11)
          goto LABEL_18;
      }
    }
  }
  v13 = 0;
LABEL_18:
  v22 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v22 = 0x4500000002;
  *(_QWORD *)(v22 + 8) = "hasProperty callback returned true for a property that doesn't exist.";
  *(_DWORD *)(v22 + 16) = 4;
  v58 = (WTF::StringImpl *)v22;
  v23 = *(_QWORD *)(a1 + 144);
  v24 = *(JSC::Heap ***)(a1 + 56);
  if ((v23 & 1) != 0)
  {
    v48 = *(uint64_t (**)(uint64_t *))(v23 & 0xFFFFFFFFFFFFFFFCLL);
    v49 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v49 = (uint64_t *)(a1 - 16);
    v59 = *v49;
    v60 = a1;
    v61 = a1 + 144;
    v23 = v48(&v59);
  }
  v25 = JSC::ErrorInstance::create(v24, v23, &v58, 0, 0, 0, 3, 1);
  v32 = (JSC::Exception *)v25;
  if ((v25 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x4C)))
  {
    v32 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, (JSC::VM *)v25, 0, v26, v27, v28, v29, v30);
  }
  v18 = (uint64_t)JSC::VM::throwException(v9, (JSC::JSGlobalObject *)a1, v32, v31, v26, v27, v28, v29, v30);
  v33 = v58;
  v58 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, (WTF::AtomStringImpl *)v17, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
      if (v13)
        goto LABEL_25;
      return v18;
    }
    *(_DWORD *)v33 -= 2;
  }
  if (v13)
    goto LABEL_25;
  return v18;
}

void sub_197EFC94C(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a11)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(a11 + 112), (uint64_t)&a10, a10, a4, a5, a6, a7, a8);
    v13 = (unsigned int *)a11;
    a11 = 0;
    if (v13)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  do
  {
    v14 = __ldaxr((unsigned int *)v11);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, (unsigned int *)v11));
  if (!v15)
  {
    atomic_store(1u, (unsigned int *)v11);
    v16 = atomic_load((unint64_t *)(v11 + 16));
    if (v16)
    {
      v17 = *(_QWORD *)(v11 + 8);
      if (!v17 || (*(_BYTE *)(v17 + 16) & 4) != 0 || *(_QWORD *)(v17 + 8) != v16)
        WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
    }
    v18 = *(WTF::StringImpl **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t JSC::staticFunctionGetterJSAPIWrapperObjectCallbackObject(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, const WTF::String *a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int OwnPropertySlotByIndex;
  int v35;
  _BYTE *v36;
  uint64_t v37;
  unsigned __int16 *v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int8x16_t **v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  OpaqueJSClass *i;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int j;
  uint64_t v59;
  WTF *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  JSC::Heap **v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  JSC::Exception *v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  BOOL v106;
  int v108;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t (*v119)(WTF::StringImpl **);
  WTF::StringImpl **v120;
  WTF::StringImpl *v121;
  uint64_t (*v122)(unint64_t);
  uint64_t v123;
  unint64_t v124;
  _DWORD *v125;
  _DWORD *v126;
  uint64_t v127;
  int v128;
  char v129;
  uint64_t v130;
  char v131;
  int8x16_t **v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 56);
  v124 = 0xFFFFFFFF00000000;
  v126 = 0;
  v127 = 0;
  v125 = (_DWORD *)a2;
  v128 = 196608;
  v129 = 0;
  v132 = 0;
  v133 = 0;
  v130 = v11;
  ++*(_DWORD *)(v11 + 4);
  v131 = 1;
  if (!(a3 >> 4))
    goto LABEL_35;
  v12 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v12 + 0x20)) != 0)
    goto LABEL_35;
  v13 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x58);
  if (!v13)
  {
    v14 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x40);
    if (!v14 || *(_BYTE *)(v14 + 5) != 1 && *(_DWORD *)(v14 + 80) < 2u)
      goto LABEL_35;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)), (JSC::VM *)v11, 1, (const JSC::PropertyTable *)a4, (uint64_t)a5, a6, a7, a8);
    if (!v13)
      goto LABEL_35;
  }
  if (!*(_DWORD *)(v13 + 24))
    goto LABEL_35;
  v15 = *(_QWORD *)(v13 + 16);
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  v17 = *(unsigned int *)(v13 + 8);
  v18 = *(_DWORD *)(v8 + 16);
  if ((v15 & 1) != 0)
  {
    if ((v18 & 0x20) != 0)
      v18 = *(_DWORD *)(v8 + 32);
    v19 = *(_DWORD *)(v13 + 12);
    v20 = (v18 >> 8) & *(_QWORD *)&v19;
    v21 = *(unsigned __int8 *)(v16 + v20);
    if (*(_BYTE *)(v16 + v20))
    {
      v22 = v16 + v17;
      v23 = 1;
      while (1)
      {
        v24 = *(_QWORD *)(v22 + 8 * (v21 - 1));
        if (v8 == (v24 & 0xFFFFFFFFFFFFLL))
          break;
        v20 = ((_DWORD)v20 + v23) & v19;
        v21 = *(unsigned __int8 *)(v16 + v20);
        ++v23;
        if (!*(_BYTE *)(v16 + v20))
          goto LABEL_35;
      }
      a6 = (v24 >> 16) & 0xFF00000000 | HIBYTE(v24);
      goto LABEL_25;
    }
LABEL_35:
    if ((*(_BYTE *)(a2 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a2, (JSC::VM *)v11, v8, (uint64_t)&v122) & 1) != 0)
    {
      goto LABEL_51;
    }
    if (v8)
    {
      v35 = *(_DWORD *)(v8 + 16);
      if ((v35 & 0x20) == 0)
      {
        v36 = *(_BYTE **)(v8 + 8);
        v37 = *(unsigned int *)(v8 + 4);
        if ((v35 & 4) != 0)
        {
          if ((_DWORD)v37)
          {
            a3 = *v36 - 48;
            if (a3 <= 9 && (v37 < 2 || *v36 != 48))
            {
              v46 = v36 + 1;
              v47 = v37 - 1;
              while (v47)
              {
                if (a3 > 0x19999999)
                  goto LABEL_41;
                v48 = *v46 - 48;
                if (v48 > 9)
                  goto LABEL_41;
                OwnPropertySlotByIndex = 0;
                v41 = __CFADD__(v48, 10 * a3);
                a3 = v48 + 10 * (_DWORD)a3;
                ++v46;
                --v47;
                if (v41)
                  goto LABEL_73;
              }
LABEL_71:
              if ((_DWORD)a3 != -1)
              {
                OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex(a2, a1, (const WTF::StringImpl *)a3, (uint64_t)&v122, (uint64_t)a5, a6, a7, a8);
                goto LABEL_73;
              }
            }
          }
        }
        else if ((_DWORD)v37)
        {
          a3 = *(unsigned __int16 *)v36 - 48;
          if (a3 <= 9 && (*(_WORD *)v36 != 48 || v37 <= 1))
          {
            v38 = (unsigned __int16 *)(v36 + 2);
            v39 = v37 - 1;
            while (v39)
            {
              if (a3 > 0x19999999)
                goto LABEL_41;
              v40 = *v38 - 48;
              if (v40 > 9)
                goto LABEL_41;
              OwnPropertySlotByIndex = 0;
              v41 = __CFADD__(v40, 10 * a3);
              a3 = v40 + 10 * (_DWORD)a3;
              ++v38;
              --v39;
              if (v41)
                goto LABEL_73;
            }
            goto LABEL_71;
          }
        }
      }
    }
LABEL_41:
    OwnPropertySlotByIndex = 0;
    goto LABEL_73;
  }
  if ((v18 & 0x20) != 0)
    v18 = *(_DWORD *)(v8 + 32);
  v25 = *(_DWORD *)(v13 + 12);
  v26 = v25 & (v18 >> 8);
  v27 = *(_DWORD *)(v16 + 4 * v26);
  if (!v27)
    goto LABEL_35;
  v28 = v16 + 4 * v17;
  v29 = 1;
  while (1)
  {
    v30 = (v27 - 1);
    if (*(_QWORD *)(v28 + 16 * v30) == v8)
      break;
    v26 = (v26 + v29) & v25;
    v27 = *(_DWORD *)(v16 + 4 * v26);
    ++v29;
    if (!v27)
      goto LABEL_35;
  }
  a6 = *(unsigned int *)(v28 + 16 * v30 + 8) | ((unint64_t)*(unsigned __int8 *)(v28 + 16 * v30 + 12) << 32);
LABEL_25:
  if ((_DWORD)a6 == -1)
    goto LABEL_35;
  a5 = (const WTF::String *)HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v31 = a2 + 16;
    v32 = a6 << 32;
  }
  else
  {
    v31 = *(_QWORD *)(a2 + 8) - 8;
    v32 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v31 + (v32 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v33 = *(unsigned __int8 *)(a4 + 5);
  if (v33 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a2, v11, (uint64_t)&v122, a4, SHIDWORD(a6), a6);
LABEL_51:
    OwnPropertySlotByIndex = 1;
    goto LABEL_73;
  }
  if (v33 != 6)
  {
LABEL_32:
    v122 = (uint64_t (*)(unint64_t))a4;
    v126 = (_DWORD *)a2;
    v124 = __PAIR64__(a6, HIDWORD(a6));
    OwnPropertySlotByIndex = 1;
    LOWORD(v128) = 257;
    goto LABEL_73;
  }
  v42 = *(_DWORD *)(v12 + 16) & 3;
  v43 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v45 = *(int8x16_t ***)(a4 + 24);
    v44 = *(_QWORD *)(a4 + 32);
    v122 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v123 = v43;
    LODWORD(v124) = HIDWORD(a6);
    v126 = (_DWORD *)a2;
    BYTE1(v128) = 3;
    OwnPropertySlotByIndex = 1;
    if (v42 != 2)
      LOBYTE(v128) = 1;
    HIBYTE(v128) = 1;
    v132 = v45;
    v133 = v44;
  }
  else
  {
    v122 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v123 = v43;
    LODWORD(v124) = HIDWORD(a6);
    v126 = (_DWORD *)a2;
    OwnPropertySlotByIndex = 1;
    BYTE1(v128) = 3;
    if (v42 != 2)
      LOBYTE(v128) = 1;
  }
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_74;
LABEL_73:
  v118 = *(_DWORD *)(v11 + 80);
  if ((v118 & 0x27) != 0 && (v118 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
  if (*(_QWORD *)(v11 + 16))
  {
    v50 = 0;
  }
  else
  {
LABEL_74:
    if (v131)
    {
      v49 = *(_DWORD *)(v130 + 4);
      if (!v49)
      {
        __break(0xC471u);
        JUMPOUT(0x197EFD170);
      }
      *(_DWORD *)(v130 + 4) = v49 - 1;
      v130 = 0;
      v131 = 0;
    }
    if (OwnPropertySlotByIndex)
    {
      if (BYTE1(v128) == 1)
      {
        v50 = (uint64_t)v122;
      }
      else
      {
        if (BYTE1(v128) == 2)
        {
          v81 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v122, (JSC::JSGlobalObject *)a1, a3, a4, (uint64_t)a5, a6, a7, a8);
        }
        else
        {
          v101 = (unint64_t)v126;
          v102 = *(_QWORD *)(16 * (*v126 & 0xFFFFFFFE) + 0x28);
          if ((v124 & 0x20) != 0)
            v101 = (unint64_t)v125;
          if (HIBYTE(v128) != 1)
            goto LABEL_123;
          if ((v101 & 0xFFFE000000000002) != 0)
            goto LABEL_141;
          v103 = *(unsigned int *)(16 * (*(_DWORD *)v101 & 0xFFFFFFFE) + 0x4C);
          v104 = *(_DWORD *)(16 * (*(_DWORD *)v101 & 0xFFFFFFFE) + 0x4C) != 0;
          v105 = 16 * v103;
          if ((_DWORD)v103)
            v106 = v132 == (int8x16_t **)v105;
          else
            v106 = 1;
          if (!v106)
          {
            do
            {
              v105 = *(_QWORD *)(v105 + 16);
              v104 = v105 != 0;
            }
            while ((int8x16_t **)v105 != v132 && v105 != 0);
          }
          if (!v104)
          {
LABEL_141:
            v134 = *(WTF::StringImpl **)(a1 + 56);
            v81 = JSC::throwDOMAttributeGetterTypeError(v102, &v134, v132, (WTF::StringImpl *)v8);
          }
          else
          {
LABEL_123:
            v81 = v122(v102);
          }
        }
        v50 = v81;
      }
    }
    else
    {
      if (v8)
      {
        for (i = *(OpaqueJSClass **)(*(_QWORD *)(a2 + 24) + 8); i; i = (OpaqueJSClass *)*((_QWORD *)i + 1))
        {
          OpaqueJSClass::contextData(i, (JSC::JSGlobalObject *)a1, a3, a4, (uint64_t)a5, a6, a7, a8);
          v53 = *(uint64_t **)(v52 + 16);
          if (v53)
          {
            v54 = *v53;
            if (*v53)
            {
              v55 = *(_DWORD *)(v54 - 8);
              v56 = *(_DWORD *)(v8 + 16);
              if (v56 < 0x100)
                v57 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v8);
              else
                v57 = v56 >> 8;
              for (j = 0; ; v57 = j + v59)
              {
                v59 = v57 & v55;
                v60 = *(WTF **)(v54 + 16 * v59);
                if (!v60)
                  break;
                if (v60 != (WTF *)-1 && WTF::equal(v60, (const WTF::StringImpl *)v8, (const WTF::StringImpl *)a3))
                {
                  v61 = *(_QWORD *)(v54 + 16 * v59 + 8);
                  if (!v61)
                    break;
                  a3 = *(_QWORD *)v61;
                  if (!*(_QWORD *)v61)
                    break;
                  v90 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
                  *(_DWORD *)v8 += 2;
                  v134 = (WTF::StringImpl *)v8;
                  v50 = JSC::JSCallbackFunction::create((JSC::JSCallbackFunction *)v11, v90, (JSC::JSGlobalObject *)a3, (JSC::VM *)&v134, a5, a6, a7, a8);
                  v99 = v134;
                  v134 = 0;
                  if (v99)
                  {
                    if (*(_DWORD *)v99 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v99, v91, v92, v93, v94, v95, v96, v97);
                      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
                    }
                    else
                    {
                      *(_DWORD *)v99 -= 2;
                    }
                  }
                  v100 = *(unsigned int *)(v61 + 8);
                  v134 = 0;
                  v135 = a2;
                  v136 = 0x1000000FFFFFFFFLL;
                  v98.n128_u64[0] = 0x100000001000000;
                  v137 = 0;
                  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, v11, v8, v50, v100, (uint64_t)&v134, v96, v97, v98);
                  goto LABEL_125;
                }
                ++j;
              }
            }
          }
        }
      }
      v62 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v62 = 0x4300000002;
      *(_QWORD *)(v62 + 8) = "Static function property defined with NULL callAsFunction callback.";
      *(_DWORD *)(v62 + 16) = 4;
      v121 = (WTF::StringImpl *)v62;
      v63 = *(_QWORD *)(a1 + 144);
      v64 = *(JSC::Heap ***)(a1 + 56);
      if ((v63 & 1) != 0)
      {
        v119 = *(uint64_t (**)(WTF::StringImpl **))(v63 & 0xFFFFFFFFFFFFFFFCLL);
        v120 = (WTF::StringImpl **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
        if ((a1 & 8) != 0)
          v120 = (WTF::StringImpl **)(a1 - 16);
        v134 = *v120;
        v135 = a1;
        v136 = a1 + 144;
        v63 = v119(&v134);
      }
      v65 = JSC::ErrorInstance::create(v64, v63, &v121, 0, 0, 0, 3, 1);
      v72 = (JSC::Exception *)v65;
      if ((v65 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE) + 0x4C)))
      {
        v72 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v65, 0, v66, v67, v68, v69, v70);
      }
      v50 = (uint64_t)JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v72, v71, v66, v67, v68, v69, v70);
      v80 = v121;
      v121 = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
        {
          WTF::StringImpl::~StringImpl(v80, v73, v74, v75, v76, v77, v78, v79);
          WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
        }
        else
        {
          *(_DWORD *)v80 -= 2;
        }
      }
    }
  }
LABEL_125:
  if (v131)
  {
    v108 = *(_DWORD *)(v130 + 4);
    if (!v108)
    {
      __break(0xC471u);
      JUMPOUT(0x197EFD190);
    }
    *(_DWORD *)(v130 + 4) = v108 - 1;
  }
  return v50;
}

void sub_197EFD1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  int v18;

  if (!a18)
LABEL_4:
    _Unwind_Resume(a1);
  v18 = *(_DWORD *)(a17 + 4);
  if (v18)
  {
    *(_DWORD *)(a17 + 4) = v18 - 1;
    goto LABEL_4;
  }
  __break(0xC471u);
}

uint64_t JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::createStructure(JSC::VM *a1, JSC::VM *a2, uint64_t this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = (unint64_t *)((char *)a1 + 40136);
  v19 = 353176599;
  if ((this & 0xFFFE000000000002) == 0 && this && *(unsigned __int8 *)(this + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(this, a1, a9, this, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM(a1, a2, this, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)a1 + 40112, (uint64_t)a1 + 192, 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, this, (uint64_t)&v19, (unint64_t)&JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::JSAPIWrapperObject::JSAPIWrapperObject(uint64_t result, uint64_t a2, unint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void JSC::JSAPIWrapperObject::finishCreation(unint64_t this, JSC::VM *a2)
{
  unint64_t v3;
  _QWORD *v4;
  unint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  if ((_MergedGlobals_25 & 1) == 0)
  {
    qword_1ECF58530 = (uint64_t)&off_1E357B4A0;
    _MergedGlobals_25 = 1;
  }
  if ((this & 8) != 0)
    v3 = (this - 112) | 1;
  else
    v3 = this & 0xFFFFFFFFFFFFC000;
  if ((v3 & 1) != 0)
    v4 = (_QWORD *)(v3 + 47);
  else
    v4 = (_QWORD *)(*(_QWORD *)v3 + 32);
  v5 = (unint64_t *)v4[2];
  if (!v5)
  {
    while (1)
    {
      v6 = (_QWORD *)v4[3];
      if (!v6)
        break;
      v4[3] = v6[2];
      v5 = (unint64_t *)v6[4];
      v6[3] = 257;
      v6[4] = 0;
      if (v5)
        goto LABEL_11;
    }
    v7 = v4[6];
    if (!v4[1])
    {
      v8 = *(_QWORD **)(v7 + 488);
      *v4 = v7 + 480;
      v4[1] = v8;
      *v8 = v4;
      *(_QWORD *)(v7 + 488) = v4;
    }
    *(_QWORD *)(v7 + 1072) += 1024;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
    JSC::WeakBlock::WeakBlock((uint64_t)v9, v3);
    JSC::Heap::didAllocate((JSC::Heap *)(v4[6] + 192), 0x400uLL, v10, v11, v12, v13, v14, v15);
    v16 = v4 + 4;
    v17 = v4[5];
    if (v17)
      v16 = (_QWORD *)(v17 + 16);
    *v16 = v9;
    v4[5] = v9;
    v9[1] = v17;
    v9[2] = 0;
    v5 = (unint64_t *)v9[4];
    v9[3] = 257;
    v9[4] = 0;
  }
LABEL_11:
  v4[2] = *v5;
  *v5 = this;
  v5[1] = (unint64_t)&qword_1ECF58530;
  v5[2] = 0;
}

void JSC::JSAPIWrapperObject::visitChildren(JSC::JSAPIWrapperObject *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  void *v6;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    v6 = (void *)*((_QWORD *)this + 2);
    if (v6)
      scanExternalObjectGraph((JSC::VM *)(*((_QWORD *)a2 + 10) - 192), a2, v6, 0);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
}

void sub_197EFD590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(_QWORD *)(a9 + 88) = a11;
  _Unwind_Resume(a1);
}

void JSC::JSAPIWrapperObject::visitChildren(JSC::JSAPIWrapperObject *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v10 = (void *)*((_QWORD *)this + 2);
  if (v10)
    scanExternalObjectGraph((JSC::VM *)(*((_QWORD *)a2 + 10) - 192), a2, v10, 0);
}

uint64_t JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::subspaceForImpl(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;

  if (a2 == 1)
    return *(_QWORD *)(a1 + 40288);
  if (!a2)
  {
    v2 = *(_QWORD *)(a1 + 40288);
    if (!v2)
      return JSC::GCClient::Heap::apiWrapperObjectSpaceSlow((JSC::Heap **)(a1 + 37552));
    return v2;
  }
  result = 150;
  __break(0xC471u);
  return result;
}

void sub_197EFD6EC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197EFD9E4(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  if (a11)
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(a11, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(exception_object);
}

void sub_197EFDE1C(_Unwind_Exception *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14, WTF::StringImpl *a15, WTF::StringImpl *a16)
{
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v17 = a15;
  a15 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&a14, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void sub_197EFE0A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, WTF::StringImpl *a10)
{
  JSC::JSLockHolder::~JSLockHolder((unsigned int **)&a9, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void sub_197EFE4A4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197EFE594(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  do
  {
    v10 = __ldaxr((unsigned int *)v8);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, (unsigned int *)v8));
  if (!v11)
  {
    atomic_store(1u, (unsigned int *)v8);
    v12 = atomic_load((unint64_t *)(v8 + 16));
    if (v12)
    {
      v13 = *(_QWORD *)(v8 + 8);
      if (!v13 || (*(_BYTE *)(v13 + 16) & 4) != 0 || *(_QWORD *)(v13 + 8) != v12)
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
    v14 = *(WTF::StringImpl **)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::~StringImpl(v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
      }
      else
      {
        *(_DWORD *)v14 -= 2;
      }
    }
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
  }
  _Unwind_Resume(exception_object);
}

void sub_197EFED94(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  JSC::JSLockHolder::~JSLockHolder((unsigned int **)va, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void sub_197EFEE0C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  JSC::JSLockHolder::~JSLockHolder((unsigned int **)va, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void sub_197EFEF08(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197EFF1D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (v1)
    *(_QWORD *)(v1 + 8) = 3;
  _Unwind_Resume(a1);
}

void sub_197EFF358(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197EFF61C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  va_list va;

  va_start(va, a9);
  JSC::JSLockHolder::~JSLockHolder((unsigned int **)va, a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(v9 + 6))
    goto LABEL_14;
  v18 = *(_QWORD *)(v9 + 8);
  v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v19)
    v19 = WTF::Thread::initializeCurrentTLS(0);
  if (v18 != v19)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x197EFF6CCLL);
  }
  if (*(_QWORD *)(v9 + 16) != 1)
  {
    --*(_QWORD *)(v9 + 16);
    goto LABEL_7;
  }
  JSC::JSLock::willReleaseLock((JSC::JSLock *)v9, v11, v12, v13, v14, v15, v16, v17);
  v26 = *(_QWORD *)(v9 + 16) - 1;
  *(_QWORD *)(v9 + 16) = v26;
  if (!v26)
  {
    *(_BYTE *)(v9 + 6) = 0;
    v27 = (unsigned __int8 *)(v9 + 4);
    v28 = __ldxr((unsigned __int8 *)(v9 + 4));
    if (v28 == 1)
    {
      if (!__stlxr(0, v27))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v27, 0, v20, v21, v22, v23, v24, v25);
  }
LABEL_7:
  _Unwind_Resume(a1);
}

uint64_t JSManagedValueHandleOwner::isReachableFromOpaqueRoots(int a1, int a2, void *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  unsigned __int8 *v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;

  if (a5)
  {
    *a5 = "JSManagedValue is opaque root";
    a5[1] = 30;
  }
  v7 = *(_QWORD *)(a4 + 120);
  v8 = *(_QWORD *)(v7 + 48);
  if (v7 + 56 != v8)
  {
    v9 = *(_DWORD *)(v8 + 4);
    v10 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(void **)(v8 + 8 * v14 + 16);
      if (!v15)
        return 0;
      if (v15 == a3)
        goto LABEL_16;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x197EFF900);
      }
    }
  }
  v16 = (unsigned __int8 *)(v7 + 80);
  if (__ldaxr((unsigned __int8 *)(v7 + 80)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_13;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v7 + 80);
LABEL_13:
  v18 = WTF::ConcurrentPtrHashSet::containsImpl((WTF::ConcurrentPtrHashSet *)v7, a3);
  v25 = v18;
  v26 = __ldxr(v16);
  if (v26 != 1)
  {
    __clrex();
LABEL_20:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, v19, v20, v21, v22, v23, v24);
    if (v25)
      goto LABEL_16;
    return 0;
  }
  if (__stlxr(0, v16))
    goto LABEL_20;
  if (!v18)
    return 0;
LABEL_16:
  if (*(_BYTE *)(a4 + 131))
    (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, a3);
  return 1;
}

uint64_t JSManagedValueHandleOwner::finalize(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "disconnectValue");
}

void sub_197EFFAE4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t validateBytecodeCachePath(NSURL *a1, NSError **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  const __CFString *v9;
  CFStringRef v10;
  uint64_t v11;
  void *v12;
  const __CFString *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  float v28;
  void *v29;
  const __CFString *v30;
  uint64_t v31;
  int v32;
  CFStringRef v33;
  void *v34;
  const __CFString *v35;
  const __CFString *v36;
  void *v37;
  const __CFString *v38;
  void *v39;
  const __CFString *v40;
  const __CFString *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72[5];
  const __CFString *v73;
  CFStringRef v74[2];

  v74[1] = *(CFStringRef *)MEMORY[0x1E0C80C00];
  if (!a1)
    return 1;
  WTF::URL::URL((WTF::URL *)v72, (CFURLRef)-[NSURL absoluteURL](a1, "absoluteURL"));
  if ((WTF::URL::protocolIs((uint64_t *)v72, "file", 0x100000004) & 1) == 0)
  {
    v12 = (void *)MEMORY[0x1E0CB3940];
    WTF::URL::createCFURL((WTF::URL *)v72, v3, v4, v5, v6, v7, (CFURLRef *)v74, v8);
    if (a2)
    {
      v73 = CFSTR("message");
      v74[0] = v13;
      *a2 = (NSError *)objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("JSScriptErrorDomain"), 1, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v74, &v73, 1));
    }
    v11 = 0;
    goto LABEL_50;
  }
  WTF::URL::createCFURL((WTF::URL *)v72, v3, v4, v5, v6, v7, (CFURLRef *)v74, v8);
  if (v74[0])
  {
    v9 = CFURLCopyFileSystemPath((CFURLRef)v74[0], kCFURLPOSIXPathStyle);
    WTF::String::String(&v71, v9);
    if (v9)
      CFRelease(v9);
    v10 = v74[0];
    v74[0] = 0;
    if (v10)
      CFRelease(v10);
  }
  else
  {
    v71 = 0;
  }
  v21 = WTF::FileSystemImpl::fileTypePotentiallyFollowingSymLinks((uint64_t *)&v71, 0);
  if ((v21 & 0xFF00000000) == 0 || !(_DWORD)v21)
  {
    WTF::FileSystemImpl::parentPath((WTF::FileSystemImpl *)&v71, v22, v23, v24, v25, v26, (WTF::FileSystemImpl *)&v70, v27, v28);
    if (v70)
    {
      v31 = WTF::FileSystemImpl::fileTypePotentiallyFollowingSymLinks((uint64_t *)&v70, 0);
      if ((v31 & 0xFF00000000) != 0 && v31 == 1)
      {
        WTF::FileSystemImpl::fileSystemRepresentation(&v70, (uint64_t *)v74);
        v32 = rootless_check_datavault_flag();
        v33 = v74[0];
        v74[0] = 0;
        if (v33)
        {
          if (LODWORD(v33->isa) == 1)
          {
            WTF::fastFree((unint64_t)v33, v14, v15, v16, v17, v18, v19, v20);
            if (v32)
            {
LABEL_24:
              v34 = (void *)MEMORY[0x1E0CB3940];
              if (v70)
              {
                WTF::StringImpl::createCFString(v70, v74);
                v35 = (id)v74[0];
              }
              else
              {
                v35 = &stru_1E35BF3F0;
              }
              if (!a2)
                goto LABEL_43;
              goto LABEL_42;
            }
LABEL_58:
            v11 = 1;
LABEL_44:
            v42 = v70;
            v70 = 0;
            if (v42)
            {
              if (*(_DWORD *)v42 == 2)
              {
                WTF::StringImpl::~StringImpl(v42, (WTF::AtomStringImpl *)v14, v15, v16, v17, v18, v19, v20);
                WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
              }
              else
              {
                *(_DWORD *)v42 -= 2;
              }
            }
            goto LABEL_47;
          }
          --LODWORD(v33->isa);
        }
        if (v32)
          goto LABEL_24;
        goto LABEL_58;
      }
      v39 = (void *)MEMORY[0x1E0CB3940];
      if (v70)
      {
        WTF::StringImpl::createCFString(v70, v74);
        v40 = (id)v74[0];
      }
      else
      {
        v40 = &stru_1E35BF3F0;
      }
      if (!a2)
        goto LABEL_43;
    }
    else
    {
      v37 = (void *)MEMORY[0x1E0CB3940];
      if (v71)
      {
        WTF::StringImpl::createCFString(v71, v74);
        v38 = (id)v74[0];
      }
      else
      {
        v38 = &stru_1E35BF3F0;
      }
      if (!a2)
        goto LABEL_43;
    }
LABEL_42:
    v73 = CFSTR("message");
    v74[0] = v41;
    *a2 = (NSError *)objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("JSScriptErrorDomain"), 1, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v74, &v73, 1));
LABEL_43:
    v11 = 0;
    goto LABEL_44;
  }
  v29 = (void *)MEMORY[0x1E0CB3940];
  if (v71)
  {
    WTF::StringImpl::createCFString(v71, v74);
    v30 = (id)v74[0];
  }
  else
  {
    v30 = &stru_1E35BF3F0;
  }
  if (a2)
  {
    v73 = CFSTR("message");
    v74[0] = v36;
    *a2 = (NSError *)objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("JSScriptErrorDomain"), 1, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v74, &v73, 1));
  }
  v11 = 0;
LABEL_47:
  v43 = v71;
  v71 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, (WTF::AtomStringImpl *)v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
LABEL_50:
  v44 = v72[0];
  v72[0] = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, (WTF::AtomStringImpl *)v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
  return v11;
}

void sub_197EFFFC0(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13)
{
  uint64_t v13;
  _DWORD *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v15 = *(_DWORD **)(v13 - 32);
  *(_QWORD *)(v13 - 32) = 0;
  if (v15)
  {
    if (*v15 == 1)
      WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v15;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::~StringImpl(a11, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::~StringImpl(a12, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::~StringImpl(a13, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_197F00524(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, size_t a19)
{
  const void *v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (v19)
    CFRelease(v19);
  if (a18)
    munmap(a18, a19);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::~StringImpl(a11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::~StringImpl(a13, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_197F00A74(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  int v20;
  WTF *v21;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  WTF::RefCounted<JSC::CachedBytecode>::deref(v21, a2, a3, a4, a5, a6, a7, a8);
  flock(v20, 8);
  close(v20);
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
    {
      WTF::StringImpl::~StringImpl(a20, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)a20 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_197F00BDC(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl *a9)
{
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::~StringImpl(a9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void JSC::CachedBytecode::create(JSC::CachedBytecode *this)
{
  uint64_t v2;
  int v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v2 = WTF::fastMalloc((WTF *)0x40);
  v31 = 0;
  v32 = 0;
  v3 = 1;
  v33 = 1;
  WTF::fastFree(0, v4, v5, v6, v7, v8, v9, v10);
  *(_DWORD *)v2 = 1;
  *(_QWORD *)(v2 + 8) = std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::CachePayload::size(void)::$_0,JSC::CachePayload::size(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::FileSystemImpl::MappedFileData,std::pair<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,unsigned long>> const&>((uint64_t)&v34, (uint64_t)&v31);
  *(_QWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
  v34 = v2 + 16;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS8_9MallocPtrIhNS8_10FastMallocEEEmEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSA_SF_EEEOSU_EEEDcSM_DpT0_(&v34, (unint64_t *)(v2 + 16), (unint64_t *)&v31, v11, v12, v13, v14, v15);
  if (v33 == -1)
    goto LABEL_6;
  if (v33 != 1)
  {
    ((void (*)(uint64_t *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v33])(&v34, &v31);
LABEL_6:
    v31 = 0;
    v32 = 0;
    v33 = 1;
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)this = v2;
    goto LABEL_7;
  }
  v23 = v31;
  v31 = 0;
  WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  WTF::fastFree(0, v24, v25, v26, v27, v28, v29, v30);
  v32 = 0;
  v3 = v33;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)this = v2;
  if (v3 != -1)
LABEL_7:
    ((void (*)(uint64_t *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v34, &v31);
}

void sub_197F010B4(_Unwind_Exception *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  _QWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  uint64_t v17;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  *v14 = 0;
  if (v16[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
  else
    --v16[2];
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
    {
      WTF::StringImpl::~StringImpl(a14, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)a14 -= 2;
    }
  }
  v19 = *(WTF::StringImpl **)(v17 - 64);
  *(_QWORD *)(v17 - 64) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder((unsigned int **)(v17 - 56), a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void sub_197F01234(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  JSC::JSLockHolder::~JSLockHolder((unsigned int **)va, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void sub_197F01924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,_DWORD *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43)
{
  int v43;
  int v44;
  _DWORD *v46;

  v46 = a24;
  a24 = 0;
  if (v46)
  {
    if (v46[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
    else
      --v46[2];
  }
  if (a43 != -1)
    ((void (*)(_DWORD **, char *))off_1E357B550[a43])(&a24, &a32);
  close(v44);
  close(v43);
  _Unwind_Resume(a1);
}

uint64_t JSScriptSourceProvider::hash(id *this)
{
  return objc_msgSend(this[15], "hash");
}

uint64_t JSScriptSourceProvider::source(id *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)objc_msgSend(this[15], "source");
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

void *JSScriptSourceProvider::cachedBytecode@<X0>(JSScriptSourceProvider *this@<X0>, _QWORD *a2@<X8>)
{
  void *result;

  result = (void *)*((_QWORD *)this + 15);
  if (result)
    return (void *)objc_msgSend(result, "cachedBytecode");
  *a2 = 0;
  return result;
}

void objectToValue(objc_object *a1, __CFString *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  unsigned int v12;
  char *v13;
  const OpaqueJSValue *v14;
  void *v15;
  int v16;
  JSObjectRef v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::Exception *v43;
  uint64_t k;
  const __CFString *v45;
  uint64_t v46;
  OpaqueJSString *v47;
  JSValue *m_slot;
  const OpaqueJSValue *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  WTF *v75;
  void *v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t j;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  OpaqueJSContext *m_context;
  objc_object *v87;
  WTF *v88[2];
  WTF *v89[2];
  uint64_t v90;
  unsigned int *v91;
  JSContext v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v4 = -[objc_object JSGlobalContextRef](a1, "JSGlobalContextRef");
  memset(&v92, 0, 24);
  objectToValueWithoutCopy(&v92, a1, a2);
  if (LODWORD(v92.m_context))
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v91, (JSC::JSGlobalObject *)v4, v5, v6, v7, v8, v9, v10, v11);
    *(_OWORD *)v88 = 0u;
    *(_OWORD *)v89 = 0u;
    v90 = 0;
    v85 = *(_OWORD *)&v92.super.isa;
    m_context = v92.m_context;
    v87 = a1;
    ObjcContainerConvertor::add((uint64_t)&v87, &v85);
    v12 = HIDWORD(v89[0]);
    do
    {
      if (!v12)
      {
        __break(0xC471u);
        return;
      }
      v13 = (char *)v88[1] + 24 * v12;
      v15 = (void *)*((_QWORD *)v13 - 3);
      v14 = (const OpaqueJSValue *)*((_QWORD *)v13 - 2);
      v16 = *((_DWORD *)v13 - 2);
      HIDWORD(v89[0]) = v12 - 1;
      v17 = JSValueToObject((JSContextRef)v4, v14, 0);
      if (v16 == 1)
      {
        v25 = objc_msgSend(v15, "count");
        if (v25)
        {
          if (v4)
          {
            for (i = 0; i != v25; ++i)
            {
              v27 = ObjcContainerConvertor::convert((ObjcContainerConvertor *)&v87, (__CFString *)objc_msgSend(v15, "objectAtIndex:", i));
              v28 = *(unsigned int **)(v4 + 56);
              JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v92.m_exception, (JSC::VM *)v28, v29, v30, v31, v32, v33, v34, v35);
              if (v27)
                v36 = (uint64_t)v27;
              else
                v36 = 2;
              (*(void (**)(JSObjectRef, uint64_t, uint64_t, uint64_t, _QWORD))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0x50))(v17, v4, i, v36, 0);
              v43 = (JSC::Exception *)*((_QWORD *)v28 + 2);
              if (v43)
              {
                *((_QWORD *)v28 + 2) = 0;
                v78 = v28 + 20;
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 & 0xFFFFFFEF, v78));
                Inspector::JSGlobalObjectInspectorController::reportAPIException(*(Inspector::JSGlobalObjectInspectorController **)(v4 + 2024), (JSC::JSGlobalObject *)v4, v43, v38, v39, v40, v41, v42);
              }
              JSC::JSLockHolder::~JSLockHolder((unsigned int **)&v92.m_exception, v37, (uint64_t)v43, v38, v39, v40, v41, v42);
            }
          }
          else
          {
            for (j = 0; j != v25; ++j)
              ObjcContainerConvertor::convert((ObjcContainerConvertor *)&v87, (__CFString *)objc_msgSend(v15, "objectAtIndex:", j));
          }
        }
      }
      else
      {
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v76 = (void *)objc_msgSend(v15, "keyEnumerator", 0);
        v59 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v81, &v92.m_moduleLoaderDelegate, 16);
        if (v59)
        {
          v77 = *(_QWORD *)v82;
          do
          {
            for (k = 0; k != v59; ++k)
            {
              if (*(_QWORD *)v82 != v77)
                objc_enumerationMutation(v76);
              v45 = *(const __CFString **)(*((_QWORD *)&v81 + 1) + 8 * k);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                WTF::String::String((WTF::StringImpl **)&v92.m_exception, v45);
                if (v92.m_exception.m_slot)
                {
                  v46 = WTF::fastMalloc((WTF *)0x18);
                  v47 = (OpaqueJSString *)v46;
                  *(_DWORD *)v46 = 1;
                  m_slot = v92.m_exception.m_slot;
                  *(_QWORD *)(v46 + 8) = v92.m_exception.m_slot;
                  if (m_slot)
                  {
                    if (((uint64_t)m_slot->_context & 4) != 0)
                      m_slot = 0;
                    else
                      m_slot = (JSValue *)m_slot->m_value;
                  }
                  *(_QWORD *)(v46 + 16) = m_slot;
                }
                else
                {
                  v47 = 0;
                }
                v49 = (const OpaqueJSValue *)ObjcContainerConvertor::convert((ObjcContainerConvertor *)&v87, (__CFString *)objc_msgSend(v15, "objectForKey:", v45));
                JSObjectSetProperty((JSContextRef)v4, v17, v47, v49, 0, 0);
                if (v47)
                {
                  do
                  {
                    v57 = __ldaxr((unsigned int *)v47);
                    v58 = v57 - 1;
                  }
                  while (__stlxr(v58, (unsigned int *)v47));
                  if (!v58)
                  {
                    atomic_store(1u, (unsigned int *)v47);
                    OpaqueJSString::~OpaqueJSString(v47, v50, v51, v52, v53, v54, v55, v56);
                    WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
                  }
                }
              }
            }
            v59 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v81, &v92.m_moduleLoaderDelegate, 16);
          }
          while (v59);
        }
      }
      v12 = HIDWORD(v89[0]);
    }
    while (HIDWORD(v89[0]));
    v68 = v89[1];
    if (HIDWORD(v90))
    {
      v69 = 8 * HIDWORD(v90);
      do
      {
        v70 = *(_QWORD *)v68;
        if (*(_QWORD *)v68)
        {
          v71 = (uint64_t *)(v70 - 16);
          v72 = *(_QWORD *)(((v70 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v73 = *(uint64_t **)(v70 - 8);
          if (v73)
          {
            v74 = *v71;
            *v73 = *v71;
            *(_QWORD *)(v74 + 8) = v73;
            *v71 = 0;
            v71[1] = 0;
          }
          *v71 = *(_QWORD *)(v72 + 40);
          *(_QWORD *)(v72 + 40) = v71;
          *(_QWORD *)v68 = 0;
        }
        v68 = (WTF *)((char *)v68 + 8);
        v69 -= 8;
      }
      while (v69);
      v68 = v89[1];
    }
    if (v68)
    {
      v89[1] = 0;
      LODWORD(v90) = 0;
      WTF::fastFree((unint64_t)v68, v18, v19, v20, v21, v22, v23, v24);
    }
    v75 = v88[1];
    if (v88[1])
    {
      v88[1] = 0;
      LODWORD(v89[0]) = 0;
      WTF::fastFree((unint64_t)v75, v18, v19, v20, v21, v22, v23, v24);
    }
    if (v88[0])
      WTF::fastFree((unint64_t)v88[0] - 16, v18, v19, v20, v21, v22, v23, v24);
    JSC::JSLockHolder::~JSLockHolder(&v91, v18, v19, v20, v21, v22, v23, v24);
  }
}

void sub_197F01FD4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned int *a26)
{
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  ObjcContainerConvertor::~ObjcContainerConvertor((ObjcContainerConvertor *)&a20, a2, a3, a4, a5, a6, a7, a8);
  JSC::JSLockHolder::~JSLockHolder(&a26, v27, v28, v29, v30, v31, v32, v33);
  _Unwind_Resume(a1);
}

void sub_197F024EC(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, WTF *a10, WTF *a11)
{
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (a10)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)a10);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)a10));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)a10);
      v16 = atomic_load((unint64_t *)a10 + 2);
      if (v16)
      {
        v17 = *((_QWORD *)a10 + 1);
        if (!v17 || (*(_BYTE *)(v17 + 16) & 4) != 0 || *(_QWORD *)(v17 + 8) != v16)
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
      }
      v18 = (WTF::StringImpl *)*((_QWORD *)a10 + 1);
      *((_QWORD *)a10 + 1) = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::~StringImpl(v18, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
        }
        else
        {
          *(_DWORD *)v18 -= 2;
        }
      }
      WTF::fastFree((unint64_t)a10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (a11)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)a11);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)a11));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)a11);
      v19 = atomic_load((unint64_t *)a11 + 2);
      if (v19)
      {
        v20 = *((_QWORD *)a11 + 1);
        if (!v20 || (*(_BYTE *)(v20 + 16) & 4) != 0 || *(_QWORD *)(v20 + 8) != v19)
          WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
      }
      v21 = (WTF::StringImpl *)*((_QWORD *)a11 + 1);
      *((_QWORD *)a11 + 1) = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
        {
          WTF::StringImpl::~StringImpl(v21, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
        }
        else
        {
          *(_DWORD *)v21 -= 2;
        }
      }
      WTF::fastFree((unint64_t)a11, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_197F02754(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, WTF *a10)
{
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)a10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)a10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)a10);
      v13 = atomic_load((unint64_t *)a10 + 2);
      if (v13)
      {
        v14 = *((_QWORD *)a10 + 1);
        if (!v14 || (*(_BYTE *)(v14 + 16) & 4) != 0 || *(_QWORD *)(v14 + 8) != v13)
          WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v15 = (WTF::StringImpl *)*((_QWORD *)a10 + 1);
      *((_QWORD *)a10 + 1) = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::~StringImpl(v15, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
        }
        else
        {
          *(_DWORD *)v15 -= 2;
        }
      }
      WTF::fastFree((unint64_t)a10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_197F02994(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, WTF *a10)
{
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)a10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)a10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)a10);
      v13 = atomic_load((unint64_t *)a10 + 2);
      if (v13)
      {
        v14 = *((_QWORD *)a10 + 1);
        if (!v14 || (*(_BYTE *)(v14 + 16) & 4) != 0 || *(_QWORD *)(v14 + 8) != v13)
          WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v15 = (WTF::StringImpl *)*((_QWORD *)a10 + 1);
      *((_QWORD *)a10 + 1) = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::~StringImpl(v15, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
        }
        else
        {
          *(_DWORD *)v15 -= 2;
        }
      }
      WTF::fastFree((unint64_t)a10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_197F03034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf)
{
  _Unwind_Resume(exception_object);
}

uint64_t valueToObject(void *a1, unint64_t a2)
{
  const OpaqueJSContext *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v21 = 0uLL;
  v22 = 0;
  v4 = (const OpaqueJSContext *)objc_msgSend(a1, "JSGlobalContextRef");
  valueToObjectWithoutCopy((OpaqueJSContext *)&v21, v4, a2, v5, v6, v7, v8, v9, v10);
  if (!(_DWORD)v22)
    return *((_QWORD *)&v21 + 1);
  v11 = objc_msgSend(a1, "JSGlobalContextRef");
  v19 = v21;
  v20 = v22;
  return containerValueToObject(v11, &v19, v12, v13, v14, v15, v16, v17, *(double *)&v21);
}

uint64_t valueToNumber(OpaqueJSContext *a1, const OpaqueJSValue *a2, JSValueRef *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  int v24;
  uint64_t v25;
  int *v26;
  int v27;
  OpaqueJSContext *v28;
  unsigned int *v29;

  v4 = (uint64_t)a2;
  v6 = tryUnwrapObjcObject(a1, a2);
  if (v6)
  {
    v14 = v6;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      return v14;
  }
  if (a1 && (v4 & 0xFFFFFFFFFFFFFFFELL) == 6)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v29, a1, v7, v8, v9, v10, v11, v12, v13);
    if (!v4)
      v4 = 2;
    if ((v4 & 0xFFFE000000000002) != 0)
    {
      JSC::JSLockHolder::~JSLockHolder(&v29, v15, v16, v17, v18, v19, v20, v21);
      if (v4 != 7)
        return MEMORY[0x1E0C9AAA0];
    }
    else
    {
      v24 = *(unsigned __int8 *)(v4 + 5);
      if (v24 == 2)
      {
        v25 = *(_QWORD *)(v4 + 8);
        if ((v25 & 1) != 0)
          v26 = (int *)(v4 + 16);
        else
          v26 = (int *)(v25 + 4);
        v27 = *v26;
      }
      else
      {
        if (v24 != 3)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v28 = *(OpaqueJSContext **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
            JSC::JSLockHolder::~JSLockHolder(&v29, v15, v16, v17, v18, v19, v20, v21);
            if (v28 == a1)
              return MEMORY[0x1E0C9AAA0];
          }
          else
          {
            JSC::JSLockHolder::~JSLockHolder(&v29, v15, v16, v17, v18, v19, v20, v21);
          }
          return MEMORY[0x1E0C9AAB0];
        }
        v27 = *(_DWORD *)(v4 + 8);
      }
      JSC::JSLockHolder::~JSLockHolder(&v29, v15, v16, v17, v18, v19, v20, v21);
      if (!v27)
        return MEMORY[0x1E0C9AAA0];
    }
    return MEMORY[0x1E0C9AAB0];
  }
  v22 = JSValueToNumber(a1, (JSValueRef)v4, a3);
  if (*a3)
    v22 = NAN;
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v22);
}

CFTypeRef valueToString(OpaqueJSContext *a1, const OpaqueJSValue *a2, JSValueRef *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  OpaqueJSString *v14;
  CFStringRef v15;
  CFTypeRef v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = tryUnwrapObjcObject(a1, a2);
  if (!v6 || (v16 = (CFTypeRef)v6, objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    v14 = JSValueToStringCopy(a1, a2, a3);
    if (*a3)
    {
      v16 = 0;
    }
    else
    {
      v15 = JSStringCopyCFString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v14);
      v16 = (id)CFMakeCollectable(v15);
    }
    if (v14)
    {
      do
      {
        v17 = __ldaxr((unsigned int *)v14);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unsigned int *)v14));
      if (!v18)
      {
        atomic_store(1u, (unsigned int *)v14);
        OpaqueJSString::~OpaqueJSString(v14, v7, v8, v9, v10, v11, v12, v13);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
    }
  }
  return v16;
}

void sub_197F038E8(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;

  if (v8)
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(exception_object);
}

uint64_t valueToDate(OpaqueJSContext *a1, const OpaqueJSValue *a2, JSValueRef *a3)
{
  uint64_t v6;
  uint64_t v7;
  double v8;

  v6 = tryUnwrapObjcObject(a1, a2);
  if (v6)
  {
    v7 = v6;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      return v7;
  }
  v8 = JSValueToNumber(a1, a2, a3);
  if (*a3)
    return 0;
  return objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", v8 / 1000.0);
}

uint64_t valueToArray(OpaqueJSContext *a1, const OpaqueJSValue *a2, JSC::VM **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const WTF::String *v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::VM *v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  unsigned int *v50;
  __int128 v51;
  int v52;

  v6 = tryUnwrapObjcObject(a1, a2);
  if (!v6 || (v21 = v6, objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    if (a1 && a2 && ((unint64_t)a2 & 0xFFFE000000000002) == 0)
    {
      if (*((unsigned __int8 *)a2 + 5) > 0x16u)
      {
        *(_QWORD *)&v51 = a2;
        *((_QWORD *)&v51 + 1) = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v52 = 1;
        return containerValueToObject((uint64_t)a1, &v51, v14, v15, v16, v17, v18, v19, v20);
      }
      JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v50, a1, v7, v8, v9, v10, v11, v12, v13);
    }
    else
    {
      JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v50, a1, v7, v8, v9, v10, v11, v12, v13);
      if (!a1)
        goto LABEL_12;
    }
    if (((unint64_t)a2 | 2) == 2 || a2 == (const OpaqueJSValue *)10)
    {
LABEL_10:
      JSC::JSLockHolder::~JSLockHolder(&v50, v23, v24, v25, v26, v27, v28, v29);
      return 0;
    }
LABEL_12:
    v30 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v30 = 0x2300000002;
    *(_QWORD *)(v30 + 8) = "Cannot convert primitive to NSArray";
    *(_DWORD *)(v30 + 16) = 4;
    v49 = (WTF::StringImpl *)v30;
    v39 = (JSC::VM *)JSC::createTypeError((unint64_t)a1, &v49, v31);
    v40 = v49;
    v49 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::~StringImpl(v40, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
      }
      else
      {
        *(_DWORD *)v40 -= 2;
      }
    }
    *a3 = v39;
    reportExceptionToInspector((uint64_t)a1, v39, v33, v34, v35, v36, v37, v38);
    goto LABEL_10;
  }
  return v21;
}

void sub_197F03C20(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  JSC::JSLockHolder::~JSLockHolder((unsigned int **)va, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

uint64_t valueToDictionary(OpaqueJSContext *a1, const OpaqueJSValue *a2, JSC::VM **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  const WTF::String *v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::VM *v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  unsigned int *v50;
  __int128 v51;
  int v52;

  v6 = tryUnwrapObjcObject(a1, a2);
  if (!v6 || (v21 = v6, objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    if (a1 && a2 && ((unint64_t)a2 & 0xFFFE000000000002) == 0)
    {
      if (*((unsigned __int8 *)a2 + 5) > 0x16u)
      {
        *(_QWORD *)&v51 = a2;
        *((_QWORD *)&v51 + 1) = objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v52 = 2;
        return containerValueToObject((uint64_t)a1, &v51, v14, v15, v16, v17, v18, v19, v20);
      }
      JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v50, a1, v7, v8, v9, v10, v11, v12, v13);
    }
    else
    {
      JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v50, a1, v7, v8, v9, v10, v11, v12, v13);
      if (!a1)
        goto LABEL_14;
    }
    if (((unint64_t)a2 | 2) == 2 || a2 == (const OpaqueJSValue *)10)
    {
LABEL_9:
      JSC::JSLockHolder::~JSLockHolder(&v50, v22, v23, v24, v25, v26, v27, v28);
      return 0;
    }
LABEL_14:
    v30 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v30 = 0x2800000002;
    *(_QWORD *)(v30 + 8) = "Cannot convert primitive to NSDictionary";
    *(_DWORD *)(v30 + 16) = 4;
    v49 = (WTF::StringImpl *)v30;
    v39 = (JSC::VM *)JSC::createTypeError((unint64_t)a1, &v49, v31);
    v40 = v49;
    v49 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::~StringImpl(v40, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
      }
      else
      {
        *(_DWORD *)v40 -= 2;
      }
    }
    *a3 = v39;
    reportExceptionToInspector((uint64_t)a1, v39, v33, v34, v35, v36, v37, v38);
    goto LABEL_9;
  }
  return v21;
}

void sub_197F03DFC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  JSC::JSLockHolder::~JSLockHolder((unsigned int **)va, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void sub_197F03F9C(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;

  if (v8)
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(exception_object);
}

void sub_197F0419C(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (v8)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v8);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v8));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v8);
      v12 = atomic_load((unint64_t *)(v8 + 16));
      if (v12)
      {
        v13 = *(_QWORD *)(v8 + 8);
        if (!v13 || (*(_BYTE *)(v13 + 16) & 4) != 0 || *(_QWORD *)(v13 + 8) != v12)
          WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      v14 = *(WTF::StringImpl **)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::~StringImpl(v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
        }
        else
        {
          *(_DWORD *)v14 -= 2;
        }
      }
      WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_197F043F4(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (v8)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v8);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v8));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v8);
      v12 = atomic_load((unint64_t *)(v8 + 16));
      if (v12)
      {
        v13 = *(_QWORD *)(v8 + 8);
        if (!v13 || (*(_BYTE *)(v13 + 16) & 4) != 0 || *(_QWORD *)(v13 + 8) != v12)
          WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      v14 = *(WTF::StringImpl **)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::~StringImpl(v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
        }
        else
        {
          *(_DWORD *)v14 -= 2;
        }
      }
      WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_197F04648(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (v8)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v8);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v8));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v8);
      v12 = atomic_load((unint64_t *)(v8 + 16));
      if (v12)
      {
        v13 = *(_QWORD *)(v8 + 8);
        if (!v13 || (*(_BYTE *)(v13 + 16) & 4) != 0 || *(_QWORD *)(v13 + 8) != v12)
          WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      v14 = *(WTF::StringImpl **)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::~StringImpl(v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
        }
        else
        {
          *(_DWORD *)v14 -= 2;
        }
      }
      WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_197F04F30(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21)
{
  uint64_t v21;

  if (a11)
  {
    *a11 = a10;
    *(_QWORD *)(a10 + 8) = a11;
  }
  if (a21)
    WTF::fastFree((unint64_t)a21, a2, a3, a4, a5, a6, a7, a8);
  JSC::JSLockHolder::~JSLockHolder((unsigned int **)(v21 - 72), a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void sub_197F0510C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21)
{
  uint64_t v21;

  if (a11)
  {
    *a11 = a10;
    *(_QWORD *)(a10 + 8) = a11;
  }
  if (a21)
    WTF::fastFree((unint64_t)a21, a2, a3, a4, a5, a6, a7, a8);
  JSC::JSLockHolder::~JSLockHolder((unsigned int **)(v21 - 72), a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void sub_197F053A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23)
{
  uint64_t v23;

  if (a13)
  {
    *a13 = a12;
    *(_QWORD *)(a12 + 8) = a13;
  }
  if (a23)
    WTF::fastFree((unint64_t)a23, a2, a3, a4, a5, a6, a7, a8);
  JSC::JSLockHolder::~JSLockHolder((unsigned int **)(v23 - 72), a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void JSContainerConvertor::add(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  int v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  _QWORD *v66;

  v10 = (uint64_t *)(a1 + 32);
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v12 = *a2;
  v13 = *(_QWORD *)(v11 + 712);
  if (!v13)
  {
    v62 = *(_QWORD *)(*(_QWORD *)a1 + 56);
    v64 = *a2;
    JSC::HandleSet::grow((JSC::HandleSet *)(v11 + 672), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v11 = v62;
    v12 = v64;
    v13 = *(_QWORD *)(v62 + 712);
  }
  *(_QWORD *)(v11 + 712) = *(_QWORD *)v13;
  *(_QWORD *)(v13 + 16) = 0;
  v14 = (uint64_t *)(v13 + 16);
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  v66 = (_QWORD *)(v13 + 16);
  v15 = v13 & 0xFFFFFFFFFFFFF000;
  if (v12 && (v12 & 0xFFFE000000000002) == 0)
  {
    v16 = *(unint64_t **)((v13 & 0xFFFFFFFFFFFFF000) + 0x10);
    v17 = v16[3];
    v16 += 3;
    *(_QWORD *)v13 = v17;
    *(_QWORD *)(v13 + 8) = v16;
    *v16 = v13;
    *(_QWORD *)(v17 + 8) = v13;
  }
  *v14 = v12;
  v18 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v18 == *(_DWORD *)(a1 + 40))
  {
    WTF::Vector<JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>>((uint64_t)v10, (unint64_t)&v66);
    if (!v66)
      goto LABEL_24;
    v13 = (unint64_t)(v66 - 2);
    v15 = (unint64_t)(v66 - 2) & 0xFFFFFFFFFFFFF000;
  }
  else
  {
    v19 = *v10;
    *(_QWORD *)(*v10 + 8 * v18) = 0;
    v20 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF000) + 0x10);
    v21 = *(_QWORD *)(v20 + 40);
    if (!v21)
    {
      v61 = v18;
      v63 = (_QWORD *)v13;
      v59 = v13 & 0xFFFFFFFFFFFFF000;
      v60 = v19;
      v65 = (uint64_t *)(v13 + 16);
      JSC::HandleSet::grow(*(JSC::HandleSet **)((v13 & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v19 = v60;
      v18 = v61;
      v13 = (unint64_t)v63;
      v14 = v65;
      v15 = v59;
      v21 = *(_QWORD *)(v20 + 40);
    }
    *(_QWORD *)(v20 + 40) = *(_QWORD *)v21;
    *(_QWORD *)(v21 + 16) = 0;
    v22 = (_QWORD *)(v21 + 16);
    *(_QWORD *)v21 = 0;
    *(_QWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v19 + 8 * v18) = v21 + 16;
    v23 = *v14;
    v25 = (v23 & 0xFFFE000000000002) == 0 && v23 != 0;
    v26 = (*v22 & 0xFFFE000000000002) == 0;
    if (!*v22)
      v26 = 0;
    if (v26 != v25)
    {
      if ((v25 & 1) != 0)
      {
        v27 = *(unint64_t **)((v21 & 0xFFFFFFFFFFFFF000) + 0x10);
        v28 = v27[3];
        v27 += 3;
        *(_QWORD *)v21 = v28;
        *(_QWORD *)(v21 + 8) = v27;
        *v27 = v21;
        *(_QWORD *)(v28 + 8) = v21;
      }
      else
      {
        v58 = *(_QWORD *)v21;
        v57 = *(_QWORD **)(v21 + 8);
        *v57 = *(_QWORD *)v21;
        *(_QWORD *)(v58 + 8) = v57;
        *(_QWORD *)v21 = 0;
        *(_QWORD *)(v21 + 8) = 0;
        v22 = *(_QWORD **)(v19 + 8 * v18);
      }
    }
    *v22 = v23;
    ++*(_DWORD *)(a1 + 44);
  }
  v29 = *(_QWORD *)(v15 + 16);
  v30 = *(_QWORD **)(v13 + 8);
  if (v30)
  {
    v31 = *(_QWORD *)v13;
    *v30 = *(_QWORD *)v13;
    *(_QWORD *)(v31 + 8) = v30;
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
  }
  *(_QWORD *)v13 = *(_QWORD *)(v29 + 40);
  *(_QWORD *)(v29 + 40) = v13;
LABEL_24:
  v33 = (uint64_t *)(a1 + 8);
  v32 = *(_QWORD *)(a1 + 8);
  if (v32
    || (WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::rehash((uint64_t *)(a1 + 8), 8uLL, 0, a4, a5, a6, a7, a8), (v32 = *v33) != 0))
  {
    v34 = *(_DWORD *)(v32 - 8);
  }
  else
  {
    v34 = 0;
  }
  v35 = *a2;
  v36 = ~(*a2 << 32) + *a2;
  v37 = 9
      * (((v36 ^ (v36 >> 22)) + ~((v36 ^ (v36 >> 22)) << 13)) ^ (((v36 ^ (v36 >> 22)) + ~((v36 ^ (v36 >> 22)) << 13)) >> 8));
  v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
  v39 = v34 & ((v38 >> 31) ^ v38);
  v40 = (_QWORD *)(v32 + 16 * v39);
  v41 = *v40;
  if (*v40)
  {
    v48 = 0;
    v49 = 1;
    while (v41 != v35)
    {
      if (v41 == -1)
        v48 = v40;
      v39 = (v39 + v49) & v34;
      v40 = (_QWORD *)(v32 + 16 * v39);
      v41 = *v40;
      ++v49;
      if (!*v40)
      {
        if (v48)
        {
          *v48 = 0;
          v48[1] = 0;
          --*(_DWORD *)(*v33 - 16);
          v35 = *a2;
          v40 = v48;
        }
        goto LABEL_27;
      }
    }
  }
  else
  {
LABEL_27:
    *v40 = v35;
    v40[1] = a2[1];
    v42 = *v33;
    if (*v33)
      v43 = *(_DWORD *)(v42 - 12) + 1;
    else
      v43 = 1;
    *(_DWORD *)(v42 - 12) = v43;
    v44 = *v33;
    if (*v33)
      v45 = *(_DWORD *)(v44 - 12);
    else
      v45 = 0;
    v46 = (*(_DWORD *)(v44 - 16) + v45);
    v47 = *(unsigned int *)(v44 - 4);
    if (v47 <= 0x400)
    {
      if (3 * v47 > 4 * v46)
        goto LABEL_33;
      if (!(_DWORD)v47)
      {
        v56 = 8;
LABEL_51:
        WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::rehash((uint64_t *)(a1 + 8), v56, (uint64_t)v40, a4, a5, a6, a7, a8);
        goto LABEL_33;
      }
LABEL_54:
      v56 = ((_DWORD)v47 << (6 * *(_DWORD *)(v44 - 12) >= (2 * v47)));
      goto LABEL_51;
    }
    if (v47 <= 2 * v46)
      goto LABEL_54;
  }
LABEL_33:
  if (*((_DWORD *)a2 + 4))
  {
    v50 = (_QWORD *)(a1 + 16);
    v51 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v51 == *(_DWORD *)(a1 + 24))
    {
      v52 = WTF::Vector<JSContainerConvertor::Task,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v50, v51 + 1, (unint64_t)a2);
      v53 = *(_QWORD *)(a1 + 16) + 24 * *(unsigned int *)(a1 + 28);
      v54 = *(_OWORD *)v52;
      v55 = *(_QWORD *)(v52 + 16);
    }
    else
    {
      v53 = *v50 + 24 * v51;
      v54 = *(_OWORD *)a2;
      v55 = a2[2];
    }
    *(_QWORD *)(v53 + 16) = v55;
    *(_OWORD *)v53 = v54;
    ++*(_DWORD *)(a1 + 28);
  }
}

void sub_197F05C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  if (a14)
  {
    v14 = (uint64_t *)(a14 - 16);
    v15 = *(_QWORD *)(((a14 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v16 = *(uint64_t **)(a14 - 8);
    if (v16)
    {
      v17 = *v14;
      *v16 = *v14;
      *(_QWORD *)(v17 + 8) = v16;
      *v14 = 0;
      *(_QWORD *)(a14 - 8) = 0;
    }
    *v14 = *(_QWORD *)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v14;
  }
  _Unwind_Resume(a1);
}

void valueToObjectWithoutCopy(OpaqueJSContext *a1, JSContextRef ctx, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  const OpaqueJSValue *v9;
  const OpaqueJSContext *v10;
  BOOL v13;
  int v14;
  OpaqueJSString *v15;
  CFStringRef v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  JSObjectRef v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  int v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  int *v73;
  int v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const OpaqueJSContext *v83;
  unsigned int *v84;

  v9 = (const OpaqueJSValue *)a3;
  v10 = ctx;
  v13 = (a3 & 0xFFFE000000000002) != 0 || a3 == 0 || ctx == 0;
  v14 = !v13;
  if (v13 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    if (!ctx || (a3 & 0xFFFFFFFFFFFFFFFELL) != 6)
    {
      if (ctx && a3 >> 49)
      {
        v34 = JSValueToNumber(ctx, (JSValueRef)a3, 0);
        v35 = (*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF7FFFFFFFFFFFFLL
           || (*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000;
        if (v35
          || (v36 = (int)v34, v34 != (double)(int)v36)
          || !(_DWORD)v36 && (*(_QWORD *)&v34 & 0x8000000000000000) != 0)
        {
          v9 = (const OpaqueJSValue *)(*(_QWORD *)&v34 + 0x2000000000000);
        }
        else
        {
          v9 = (const OpaqueJSValue *)(v36 | 0xFFFE000000000000);
        }
        v37 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", JSValueToNumber(v10, v9, 0));
      }
      else
      {
        if (v14)
        {
          if (*(_BYTE *)(a3 + 5) == 2)
          {
            v15 = JSValueToStringCopy(ctx, (JSValueRef)a3, 0);
            v16 = JSStringCopyCFString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v15);
            v10 = (id)CFMakeCollectable(v16);
            if (v15)
            {
              do
              {
                v24 = __ldaxr((unsigned int *)v15);
                v25 = v24 - 1;
              }
              while (__stlxr(v25, (unsigned int *)v15));
              if (!v25)
              {
                atomic_store(1u, (unsigned int *)v15);
                OpaqueJSString::~OpaqueJSString(v15, v17, v18, v19, v20, v21, v22, v23);
                WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
              }
            }
            goto LABEL_22;
          }
        }
        else if (!ctx)
        {
          goto LABEL_22;
        }
        if ((a3 | 2) != 2)
        {
          v10 = 0;
          goto LABEL_22;
        }
        v37 = objc_msgSend(MEMORY[0x1E0C99E38], "null");
      }
      v10 = (const OpaqueJSContext *)v37;
LABEL_22:
      *(_QWORD *)a1 = v9;
      *((_QWORD *)a1 + 1) = v10;
LABEL_23:
      *((_DWORD *)a1 + 4) = 0;
      return;
    }
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v84, ctx, a3, a4, a5, a6, a7, a8, a9);
    if (v9)
      v33 = (uint64_t)v9;
    else
      v33 = 2;
    if ((v33 & 0xFFFE000000000002) != 0)
    {
      JSC::JSLockHolder::~JSLockHolder(&v84, v26, v27, v28, v29, v30, v31, v32);
      if (v33 == 7)
      {
LABEL_29:
        v10 = (const OpaqueJSContext *)MEMORY[0x1E0C9AAB0];
        goto LABEL_22;
      }
      goto LABEL_60;
    }
    v71 = *(unsigned __int8 *)(v33 + 5);
    if (v71 == 2)
    {
      v72 = *(_QWORD *)(v33 + 8);
      if ((v72 & 1) != 0)
        v73 = (int *)(v33 + 16);
      else
        v73 = (int *)(v72 + 4);
      v74 = *v73;
    }
    else
    {
      if (v71 != 3)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          JSC::JSLockHolder::~JSLockHolder(&v84, v26, v27, v28, v29, v30, v31, v32);
          goto LABEL_29;
        }
        v83 = *(const OpaqueJSContext **)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x28);
        JSC::JSLockHolder::~JSLockHolder(&v84, v26, v27, v28, v29, v30, v31, v32);
        if (v83 != v10)
          goto LABEL_29;
LABEL_60:
        v10 = (const OpaqueJSContext *)MEMORY[0x1E0C9AAA0];
        goto LABEL_22;
      }
      v74 = *(_DWORD *)(v33 + 8);
    }
    JSC::JSLockHolder::~JSLockHolder(&v84, v26, v27, v28, v29, v30, v31, v32);
    if (v74)
      goto LABEL_29;
    goto LABEL_60;
  }
  v38 = JSValueToObject(ctx, (JSValueRef)a3, 0);
  v39 = tryUnwrapObjcObject(v10, v38);
  if (v39)
  {
    *(_QWORD *)a1 = v38;
LABEL_63:
    *((_QWORD *)a1 + 1) = v39;
    goto LABEL_23;
  }
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v84, v10, v40, v41, v42, v43, v44, v45, v46);
  v47 = *(unsigned int *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x4C);
  JSC::JSLockHolder::~JSLockHolder(&v84, v48, v49, v50, v51, v52, v53, v54);
  if (&JSC::DateInstance::s_info == (char **)(16 * v47))
  {
    *(_QWORD *)a1 = v38;
    v39 = objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", JSValueToNumber(v10, v38, 0) / 1000.0);
    goto LABEL_63;
  }
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v84, v10, v55, v56, v57, v58, v59, v60, v61);
  v62 = *((_BYTE *)v38 + 5) & 0xFE;
  JSC::JSLockHolder::~JSLockHolder(&v84, v63, v64, v65, v66, v67, v68, v69);
  *(_QWORD *)a1 = v38;
  if (v62 == 36)
  {
    *((_QWORD *)a1 + 1) = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v70 = 1;
  }
  else
  {
    *((_QWORD *)a1 + 1) = objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v70 = 2;
  }
  *((_DWORD *)a1 + 4) = v70;
}

void sub_197F06014(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;

  if (v8)
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(exception_object);
}

uint64_t containerValueToObject(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFAllocator *v17;
  unsigned int v18;
  char *v19;
  const OpaqueJSValue *v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  OpaqueJSValue *v29;
  double v30;
  JSPropertyNameArrayRef v31;
  uint64_t v32;
  uint64_t v33;
  OpaqueJSString *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  CFStringRef v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  uint64_t v74;
  const OpaqueJSValue *Property;
  double v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  JSC::Exception *v92;
  unint64_t v93;
  unsigned int v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  WTF *v116;
  unsigned int *v118;
  unsigned int v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 *v128;
  unsigned int *v129;
  __int128 v130;
  uint64_t v131;
  JSContextRef ctx;
  WTF *v133[2];
  WTF *v134[2];
  uint64_t v135;
  unsigned int *v136;
  __int128 v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v136, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
  *(_OWORD *)v133 = 0u;
  *(_OWORD *)v134 = 0u;
  v135 = 0;
  v130 = *a2;
  v128 = a2;
  v131 = *((_QWORD *)a2 + 2);
  ctx = (JSContextRef)a1;
  JSContainerConvertor::add((uint64_t)&ctx, &v130, v11, v12, v13, v14, v15, v16);
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v18 = HIDWORD(v134[0]);
  do
  {
    if (!v18)
      goto LABEL_83;
    v19 = (char *)v133[1] + 24 * v18;
    v20 = (const OpaqueJSValue *)*((_QWORD *)v19 - 3);
    v21 = (void *)*((_QWORD *)v19 - 2);
    v22 = *((_DWORD *)v19 - 2);
    HIDWORD(v134[0]) = v18 - 1;
    v29 = JSValueToObject((JSContextRef)a1, v20, 0);
    if (v22 == 1)
    {
      v71 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v71 = 0x600000002;
      *(_QWORD *)(v71 + 8) = "length";
      *(_DWORD *)(v71 + 16) = 4;
      v72 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
      v73 = v72;
      *v72 = 1;
      *((_QWORD *)v72 + 1) = v71;
      if ((*(_BYTE *)(v71 + 16) & 4) != 0)
        v74 = 0;
      else
        v74 = *(_QWORD *)(v71 + 8);
      *((_QWORD *)v72 + 2) = v74;
      Property = JSObjectGetProperty((JSContextRef)a1, v29, (JSStringRef)v72, 0);
      v76 = JSValueToNumber((JSContextRef)a1, Property, 0);
      v77 = (*(_QWORD *)&v76 >> 52) & 0x7FFLL;
      if ((v77 - 1023) <= 0x53)
      {
        v80 = *(_QWORD *)&v76 >> (51 - (*(_QWORD *)&v76 >> 52));
        if (v77 > 0x433)
          LODWORD(v80) = *(_QWORD *)&v76 << ((*(_QWORD *)&v76 >> 52) - 51);
        v81 = v77 >= 0x41F
            ? v80
            : (((1 << ((*(_QWORD *)&v76 >> 52) + 1)) - 1) & v80) + (1 << ((*(_QWORD *)&v76 >> 52) + 1));
        v82 = v76 >= 0.0 ? v81 : -v81;
        if (v82)
        {
          v83 = 0;
          do
          {
            if (a1)
            {
              v84 = *(unsigned int **)(a1 + 56);
              JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v139, (JSC::VM *)v84, v65, v66, v67, v68, v69, v70, v76);
              v85 = JSC::JSObject::get(v29, (JSC::JSGlobalObject *)a1, v83);
              v92 = (JSC::Exception *)*((_QWORD *)v84 + 2);
              if (v92)
              {
                *((_QWORD *)v84 + 2) = 0;
                v118 = v84 + 20;
                do
                  v119 = __ldaxr(v118);
                while (__stlxr(v119 & 0xFFFFFFEF, v118));
                Inspector::JSGlobalObjectInspectorController::reportAPIException(*(Inspector::JSGlobalObjectInspectorController **)(a1 + 2024), (JSC::JSGlobalObject *)a1, v92, v87, v88, v89, v90, v91);
                v93 = 0;
              }
              else
              {
                v93 = v85;
              }
              JSC::JSLockHolder::~JSLockHolder((unsigned int **)&v139, v86, (uint64_t)v92, v87, v88, v89, v90, v91);
            }
            else
            {
              v93 = 0;
            }
            if (!v133[0])
              goto LABEL_56;
            v94 = *((_DWORD *)v133[0] - 2);
            v95 = (~(v93 << 32) + v93) ^ ((~(v93 << 32) + v93) >> 22);
            v96 = 9 * ((v95 + ~(v95 << 13)) ^ ((v95 + ~(v95 << 13)) >> 8));
            v97 = (v96 ^ (v96 >> 15)) + ~((v96 ^ (v96 >> 15)) << 27);
            v98 = v94 & ((v97 >> 31) ^ v97);
            v99 = *((_QWORD *)v133[0] + 2 * v98);
            if (v99 != v93)
            {
              v100 = 1;
              while (v99)
              {
                v98 = ((_DWORD)v98 + v100) & v94;
                v99 = *((_QWORD *)v133[0] + 2 * v98);
                ++v100;
                if (v99 == v93)
                  goto LABEL_55;
              }
              v98 = *((unsigned int *)v133[0] - 1);
            }
LABEL_55:
            if (v98 != *((_DWORD *)v133[0] - 1))
            {
              v107 = *((_QWORD *)v133[0] + 2 * v98 + 1);
            }
            else
            {
LABEL_56:
              v139 = 0uLL;
              v140 = 0;
              valueToObjectWithoutCopy((OpaqueJSContext *)&v139, ctx, v93, v66, v67, v68, v69, v70, v76);
              if ((_QWORD)v139)
              {
                v137 = v139;
                v138 = v140;
                JSContainerConvertor::add((uint64_t)&ctx, &v137, v101, v102, v103, v104, v105, v106);
              }
              v107 = *((_QWORD *)&v139 + 1);
            }
            if (!v107)
              objc_msgSend(MEMORY[0x1E0C99E38], "null");
            objc_msgSend(v21, "addObject:", v128);
            v83 = (v83 + 1);
          }
          while ((_DWORD)v83 != v82);
        }
      }
      do
      {
        v78 = __ldaxr(v73);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v73));
      if (!v79)
      {
        atomic_store(1u, v73);
        OpaqueJSString::~OpaqueJSString((OpaqueJSString *)v73, v64, v65, v66, v67, v68, v69, v70);
        WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
      }
    }
    else
    {
      JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v129, (JSC::JSGlobalObject *)a1, v23, v24, v25, v26, v27, v28, v30);
      v31 = JSObjectCopyPropertyNames((JSContextRef)a1, v29);
      v32 = *((unsigned int *)v31 + 7);
      if ((_DWORD)v32)
      {
        v33 = 0;
        while (v33 < (unint64_t)*((unsigned int *)v31 + 7))
        {
          v34 = *(OpaqueJSString **)(*((_QWORD *)v31 + 2) + 8 * v33);
          v35 = (unint64_t)JSObjectGetProperty((JSContextRef)a1, v29, v34, 0);
          if (!v133[0])
            goto LABEL_15;
          v42 = *((_DWORD *)v133[0] - 2);
          v43 = (~(v35 << 32) + v35) ^ ((~(v35 << 32) + v35) >> 22);
          v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
          v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
          v46 = v42 & ((v45 >> 31) ^ v45);
          v47 = *((_QWORD *)v133[0] + 2 * v46);
          if (v47 != v35)
          {
            v48 = 1;
            while (v47)
            {
              v46 = ((_DWORD)v46 + v48) & v42;
              v47 = *((_QWORD *)v133[0] + 2 * v46);
              ++v48;
              if (v47 == v35)
                goto LABEL_14;
            }
            v46 = *((unsigned int *)v133[0] - 1);
          }
LABEL_14:
          if (v46 != *((_DWORD *)v133[0] - 1))
          {
            v55 = *((_QWORD *)v133[0] + 2 * v46 + 1);
          }
          else
          {
LABEL_15:
            v139 = 0uLL;
            v140 = 0;
            valueToObjectWithoutCopy((OpaqueJSContext *)&v139, ctx, v35, v36, v37, v38, v39, v40, v41);
            if ((_QWORD)v139)
            {
              v137 = v139;
              v138 = v140;
              JSContainerConvertor::add((uint64_t)&ctx, &v137, v49, v50, v51, v52, v53, v54);
            }
            v55 = *((_QWORD *)&v139 + 1);
          }
          if (v55)
          {
            v56 = JSStringCopyCFString(v17, v34);
            objc_msgSend(v21, "setObject:forKeyedSubscript:", v55, v56);
            if (v56)
              CFRelease(v56);
          }
          if (++v33 == v32)
            goto LABEL_24;
        }
LABEL_83:
        __break(0xC471u);
        JUMPOUT(0x197F065A8);
      }
LABEL_24:
      JSPropertyNameArrayRelease(v31);
      JSC::JSLockHolder::~JSLockHolder(&v129, v57, v58, v59, v60, v61, v62, v63);
    }
    v18 = HIDWORD(v134[0]);
  }
  while (HIDWORD(v134[0]));
  v108 = *((_QWORD *)v128 + 1);
  v109 = v134[1];
  if (HIDWORD(v135))
  {
    v110 = 8 * HIDWORD(v135);
    do
    {
      v111 = *(_QWORD *)v109;
      if (*(_QWORD *)v109)
      {
        v112 = (uint64_t *)(v111 - 16);
        v113 = *(_QWORD *)(((v111 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v114 = *(uint64_t **)(v111 - 8);
        if (v114)
        {
          v115 = *v112;
          *v114 = *v112;
          *(_QWORD *)(v115 + 8) = v114;
          *v112 = 0;
          v112[1] = 0;
        }
        *v112 = *(_QWORD *)(v113 + 40);
        *(_QWORD *)(v113 + 40) = v112;
        *(_QWORD *)v109 = 0;
      }
      v109 = (WTF *)((char *)v109 + 8);
      v110 -= 8;
    }
    while (v110);
    v109 = v134[1];
  }
  if (v109)
  {
    v134[1] = 0;
    LODWORD(v135) = 0;
    WTF::fastFree((unint64_t)v109, v64, v65, v66, v67, v68, v69, v70);
  }
  v116 = v133[1];
  if (v133[1])
  {
    v133[1] = 0;
    LODWORD(v134[0]) = 0;
    WTF::fastFree((unint64_t)v116, v64, v65, v66, v67, v68, v69, v70);
  }
  if (v133[0])
    WTF::fastFree((unint64_t)v133[0] - 16, v64, v65, v66, v67, v68, v69, v70);
  JSC::JSLockHolder::~JSLockHolder(&v136, v64, v65, v66, v67, v68, v69, v70);
  return v108;
}

void sub_197F065B4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  unsigned int *v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  va_list va;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v29 = va_arg(va1, _QWORD);
  v31 = va_arg(va1, _QWORD);
  v32 = va_arg(va1, _QWORD);
  v33 = va_arg(va1, _QWORD);
  v34 = va_arg(va1, _QWORD);
  v35 = va_arg(va1, _QWORD);
  WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v13, a2, a3, a4, a5, a6, a7, a8);
  ObjcContainerConvertor::~ObjcContainerConvertor((ObjcContainerConvertor *)va, v15, v16, v17, v18, v19, v20, v21);
  JSC::JSLockHolder::~JSLockHolder((unsigned int **)va1, v22, v23, v24, v25, v26, v27, v28);
  _Unwind_Resume(a1);
}

void reportExceptionToInspector(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Exception *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = (JSC::Exception *)JSC::Exception::create(*(_QWORD *)(a1 + 56), a2, 0, a4, a5, a6, a7, a8);
  Inspector::JSGlobalObjectInspectorController::reportAPIException(*(Inspector::JSGlobalObjectInspectorController **)(a1 + 2024), (JSC::JSGlobalObject *)a1, v9, v10, v11, v12, v13, v14);
}

void *ObjcContainerConvertor::convert(ObjcContainerConvertor *this, __CFString *a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  objc_object *v9;
  int v10;
  __int128 v12;
  OpaqueJSContext *m_context;
  JSContext var28;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(objc_object **)(v3 + 16 * v8);
    if (v9 != (objc_object *)a2)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(objc_object **)(v3 + 16 * v8);
        ++v10;
        if (v9 == (objc_object *)a2)
          goto LABEL_8;
      }
      v8 = *(unsigned int *)(v3 - 4);
    }
LABEL_8:
    if (v8 != *(_DWORD *)(v3 - 4))
      return *(void **)(v3 + 16 * v8 + 8);
  }
  memset(&var28, 0, 24);
  objectToValueWithoutCopy(&var28, *(objc_object **)this, a2);
  v12 = *(_OWORD *)&var28.super.isa;
  m_context = var28.m_context;
  ObjcContainerConvertor::add((uint64_t)this, &v12);
  return var28.m_virtualMachine.m_ptr;
}

void objectToValueWithoutCopy(JSContext *a1, objc_object *a2, __CFString *a3)
{
  uint64_t v6;
  const OpaqueJSContext *v7;
  objc_class *Class;
  Protocol *Protocol;
  uint64_t v10;
  OpaqueJSString *v11;
  JSValueRef v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t info;
  char isKindOfClass;
  int v33;
  BOOL v34;
  double v35;
  double v36;
  BOOL v37;
  uint64_t v38;
  const OpaqueJSValue *v39;
  JSObjectRef Date;
  double v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  objc_class *v45;
  JSValueRef arguments;

  v6 = -[objc_object JSGlobalContextRef](a2, "JSGlobalContextRef");
  v7 = (const OpaqueJSContext *)v6;
  if (!a3)
  {
    info = 10;
    if (!v6)
      info = 0;
    a1->super.isa = 0;
    goto LABEL_27;
  }
  Class = object_getClass(a3);
  {
    Protocol = (Protocol *)getJSExportProtocol(void)::protocol;
  }
  else
  {
    v45 = Class;
    Protocol = objc_getProtocol("JSExport");
    Class = v45;
    getJSExportProtocol(void)::protocol = (uint64_t)Protocol;
  }
  if (class_conformsToProtocol(Class, Protocol))
    goto LABEL_60;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    a1->super.isa = (Class)a3;
    a1->m_virtualMachine.m_ptr = JSObjectMakeArray(v7, 0, 0, 0);
    v30 = 1;
LABEL_18:
    LODWORD(a1->m_context) = v30;
    return;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    a1->super.isa = (Class)a3;
    a1->m_virtualMachine.m_ptr = JSObjectMake(v7, 0, 0);
    v30 = 2;
    goto LABEL_18;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    info = 2 * (v7 != 0);
LABEL_26:
    a1->super.isa = (Class)a3;
    goto LABEL_27;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    info = a3->info;
    goto LABEL_26;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
      a1->super.isa = (Class)a3;
      if ((isKindOfClass & 1) != 0)
      {
        v33 = -[__CFString BOOLValue](a3, "BOOLValue");
        info = 6;
        if (v33)
          info = 7;
        v34 = v7 == 0;
        goto LABEL_34;
      }
      -[__CFString doubleValue](a3, "doubleValue");
      if (v7)
      {
        v42 = (*(_QWORD *)&v41 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF7FFFFFFFFFFFFLL
           || (*(_QWORD *)&v41 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000;
        if (v42
          || (v43 = (int)v41, v41 != (double)(int)v43)
          || !(_DWORD)v43 && (*(_QWORD *)&v41 & 0x8000000000000000) != 0)
        {
          info = *(_QWORD *)&v41 + 0x2000000000000;
        }
        else
        {
          info = v43 | 0xFFFE000000000000;
        }
      }
      else
      {
        info = 0;
      }
LABEL_27:
      a1->m_virtualMachine.m_ptr = (void *)info;
LABEL_28:
      LODWORD(a1->m_context) = 0;
      return;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[__CFString timeIntervalSince1970](a3, "timeIntervalSince1970");
      if (v7)
      {
        v36 = v35 * 1000.0;
        v37 = (*(_QWORD *)&v36 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF7FFFFFFFFFFFFLL
           || (*(_QWORD *)&v36 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000;
        if (v37
          || (v38 = (int)v36, v36 != (double)(int)v38)
          || !(_DWORD)v38 && (*(_QWORD *)&v36 & 0x8000000000000000) != 0)
        {
          v39 = (const OpaqueJSValue *)(*(_QWORD *)&v36 + 0x2000000000000);
        }
        else
        {
          v39 = (const OpaqueJSValue *)(v38 | 0xFFFE000000000000);
        }
      }
      else
      {
        v39 = 0;
      }
      arguments = v39;
      Date = JSObjectMakeDate(v7, 1uLL, &arguments, 0);
      a1->super.isa = (Class)a3;
      a1->m_virtualMachine.m_ptr = Date;
      goto LABEL_28;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v44 = -[__CFString value](a3, "value");
      a1->super.isa = (Class)a3;
      if (!v44)
      {
        v34 = v7 == 0;
        info = 10;
LABEL_34:
        if (v34)
          info = 0;
        goto LABEL_27;
      }
      goto LABEL_61;
    }
LABEL_60:
    a1->super.isa = (Class)a3;
    v44 = -[objc_object wrapperForObjCObject:](a2, "wrapperForObjCObject:", a3, v45);
LABEL_61:
    info = *(_QWORD *)(v44 + 8);
    goto LABEL_27;
  }
  WTF::String::String(&arguments, a3);
  if (arguments)
  {
    v10 = WTF::fastMalloc((WTF *)0x18);
    v11 = (OpaqueJSString *)v10;
    *(_DWORD *)v10 = 1;
    v12 = arguments;
    *(_QWORD *)(v10 + 8) = arguments;
    if (v12)
    {
      if ((*((_BYTE *)v12 + 16) & 4) != 0)
        v12 = 0;
      else
        v12 = (JSValueRef)*((_QWORD *)v12 + 1);
    }
    *(_QWORD *)(v10 + 16) = v12;
  }
  else
  {
    v11 = 0;
  }
  a1->super.isa = (Class)a3;
  a1->m_virtualMachine.m_ptr = JSValueMakeString(v7, v11);
  LODWORD(a1->m_context) = 0;
  if (v11)
  {
    do
    {
      v20 = __ldaxr((unsigned int *)v11);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v11));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)v11);
      OpaqueJSString::~OpaqueJSString(v11, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
  }
}

void ObjcContainerConvertor::add(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  _QWORD *v55;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  _QWORD *v66;

  v4 = (uint64_t *)(a1 + 32);
  v12 = *(_QWORD *)(objc_msgSend(*(id *)a1, "JSGlobalContextRef") + 56);
  v13 = a2[1];
  v14 = *(_QWORD *)(v12 + 712);
  if (!v14)
  {
    v62 = v12;
    v64 = a2[1];
    JSC::HandleSet::grow((JSC::HandleSet *)(v12 + 672), v5, v6, v7, v8, v9, v10, v11);
    v12 = v62;
    v13 = v64;
    v14 = *(_QWORD *)(v62 + 712);
  }
  *(_QWORD *)(v12 + 712) = *(_QWORD *)v14;
  *(_QWORD *)(v14 + 16) = 0;
  v15 = (uint64_t *)(v14 + 16);
  *(_QWORD *)v14 = 0;
  *(_QWORD *)(v14 + 8) = 0;
  v66 = (_QWORD *)(v14 + 16);
  v16 = v14 & 0xFFFFFFFFFFFFF000;
  if (v13 && (v13 & 0xFFFE000000000002) == 0)
  {
    v17 = *(unint64_t **)((v14 & 0xFFFFFFFFFFFFF000) + 0x10);
    v18 = v17[3];
    v17 += 3;
    *(_QWORD *)v14 = v18;
    *(_QWORD *)(v14 + 8) = v17;
    *v17 = v14;
    *(_QWORD *)(v18 + 8) = v14;
  }
  *v15 = v13;
  v19 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v19 == *(_DWORD *)(a1 + 40))
  {
    WTF::Vector<JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>>((uint64_t)v4, (unint64_t)&v66);
    if (!v66)
      goto LABEL_24;
    v14 = (unint64_t)(v66 - 2);
    v16 = (unint64_t)(v66 - 2) & 0xFFFFFFFFFFFFF000;
  }
  else
  {
    v20 = *v4;
    *(_QWORD *)(*v4 + 8 * v19) = 0;
    v21 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF000) + 0x10);
    v22 = *(_QWORD *)(v21 + 40);
    if (!v22)
    {
      v61 = v19;
      v63 = (_QWORD *)v14;
      v59 = v14 & 0xFFFFFFFFFFFFF000;
      v60 = v20;
      v65 = (uint64_t *)(v14 + 16);
      JSC::HandleSet::grow(*(JSC::HandleSet **)((v14 & 0xFFFFFFFFFFFFF000) + 0x10), v5, v6, v7, v8, v9, v10, v11);
      v20 = v60;
      v19 = v61;
      v14 = (unint64_t)v63;
      v15 = v65;
      v16 = v59;
      v22 = *(_QWORD *)(v21 + 40);
    }
    *(_QWORD *)(v21 + 40) = *(_QWORD *)v22;
    *(_QWORD *)(v22 + 16) = 0;
    v23 = (_QWORD *)(v22 + 16);
    *(_QWORD *)v22 = 0;
    *(_QWORD *)(v22 + 8) = 0;
    *(_QWORD *)(v20 + 8 * v19) = v22 + 16;
    v24 = *v15;
    v26 = (v24 & 0xFFFE000000000002) == 0 && v24 != 0;
    v27 = (*v23 & 0xFFFE000000000002) == 0;
    if (!*v23)
      v27 = 0;
    if (v27 != v26)
    {
      if ((v26 & 1) != 0)
      {
        v28 = *(unint64_t **)((v22 & 0xFFFFFFFFFFFFF000) + 0x10);
        v29 = v28[3];
        v28 += 3;
        *(_QWORD *)v22 = v29;
        *(_QWORD *)(v22 + 8) = v28;
        *v28 = v22;
        *(_QWORD *)(v29 + 8) = v22;
      }
      else
      {
        v58 = *(_QWORD *)v22;
        v57 = *(_QWORD **)(v22 + 8);
        *v57 = *(_QWORD *)v22;
        *(_QWORD *)(v58 + 8) = v57;
        *(_QWORD *)v22 = 0;
        *(_QWORD *)(v22 + 8) = 0;
        v23 = *(_QWORD **)(v20 + 8 * v19);
      }
    }
    *v23 = v24;
    ++*(_DWORD *)(a1 + 44);
  }
  v30 = *(_QWORD *)(v16 + 16);
  v31 = *(_QWORD **)(v14 + 8);
  if (v31)
  {
    v32 = *(_QWORD *)v14;
    *v31 = *(_QWORD *)v14;
    *(_QWORD *)(v32 + 8) = v31;
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
  }
  *(_QWORD *)v14 = *(_QWORD *)(v30 + 40);
  *(_QWORD *)(v30 + 40) = v14;
LABEL_24:
  v34 = (uint64_t *)(a1 + 8);
  v33 = *(_QWORD *)(a1 + 8);
  if (v33
    || (WTF::HashTable<objc_object *,WTF::KeyValuePair<objc_object *,OpaqueJSValue const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_object *,OpaqueJSValue const*>>,WTF::DefaultHash<objc_object *>,WTF::HashMap<objc_object *,OpaqueJSValue const*,WTF::DefaultHash<objc_object *>,WTF::HashTraits<objc_object *>,WTF::HashTraits<OpaqueJSValue const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_object *>>::expand((uint64_t *)(a1 + 8), 0, v6, v7, v8, v9, v10, v11), (v33 = *v34) != 0))
  {
    v35 = *(_DWORD *)(v33 - 8);
  }
  else
  {
    v35 = 0;
  }
  v36 = *a2;
  v37 = ~(*a2 << 32) + *a2;
  v38 = 9
      * (((v37 ^ (v37 >> 22)) + ~((v37 ^ (v37 >> 22)) << 13)) ^ (((v37 ^ (v37 >> 22)) + ~((v37 ^ (v37 >> 22)) << 13)) >> 8));
  v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
  v40 = v35 & ((v39 >> 31) ^ v39);
  v41 = (_QWORD *)(v33 + 16 * v40);
  v42 = *v41;
  if (*v41)
  {
    v55 = 0;
    v56 = 1;
    while (v42 != v36)
    {
      if (v42 == -1)
        v55 = v41;
      v40 = (v40 + v56) & v35;
      v41 = (_QWORD *)(v33 + 16 * v40);
      v42 = *v41;
      ++v56;
      if (!*v41)
      {
        if (v55)
        {
          *v55 = 0;
          v55[1] = 0;
          --*(_DWORD *)(*v34 - 16);
          v36 = *a2;
          v41 = v55;
        }
        goto LABEL_28;
      }
    }
  }
  else
  {
LABEL_28:
    *v41 = v36;
    v41[1] = a2[1];
    v43 = *v34;
    if (*v34)
      v44 = *(_DWORD *)(v43 - 12) + 1;
    else
      v44 = 1;
    *(_DWORD *)(v43 - 12) = v44;
    v45 = *v34;
    if (*v34)
      v46 = *(_DWORD *)(v45 - 12);
    else
      v46 = 0;
    v47 = (*(_DWORD *)(v45 - 16) + v46);
    v48 = *(unsigned int *)(v45 - 4);
    if (v48 > 0x400)
    {
      if (v48 > 2 * v47)
        goto LABEL_34;
    }
    else if (3 * v48 > 4 * v47)
    {
      goto LABEL_34;
    }
    WTF::HashTable<objc_object *,WTF::KeyValuePair<objc_object *,OpaqueJSValue const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_object *,OpaqueJSValue const*>>,WTF::DefaultHash<objc_object *>,WTF::HashMap<objc_object *,OpaqueJSValue const*,WTF::DefaultHash<objc_object *>,WTF::HashTraits<objc_object *>,WTF::HashTraits<OpaqueJSValue const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_object *>>::expand((uint64_t *)(a1 + 8), (unint64_t)v41, v6, v7, v8, v9, v10, v11);
  }
LABEL_34:
  if (*((_DWORD *)a2 + 4))
  {
    v49 = (_QWORD *)(a1 + 16);
    v50 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v50 == *(_DWORD *)(a1 + 24))
    {
      v51 = WTF::Vector<JSC::ArrayPatternNode::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v50 + 1, (unint64_t)a2);
      v52 = *(_QWORD *)(a1 + 16) + 24 * *(unsigned int *)(a1 + 28);
      v53 = *(_OWORD *)v51;
      v54 = *(_QWORD *)(v51 + 16);
    }
    else
    {
      v52 = *v49 + 24 * v50;
      v53 = *(_OWORD *)a2;
      v54 = a2[2];
    }
    *(_QWORD *)(v52 + 16) = v54;
    *(_OWORD *)v52 = v53;
    ++*(_DWORD *)(a1 + 28);
  }
}

void sub_197F06ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  if (a14)
  {
    v14 = (uint64_t *)(a14 - 16);
    v15 = *(_QWORD *)(((a14 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v16 = *(uint64_t **)(a14 - 8);
    if (v16)
    {
      v17 = *v14;
      *v16 = *v14;
      *(_QWORD *)(v17 + 8) = v16;
      *v14 = 0;
      *(_QWORD *)(a14 - 8) = 0;
    }
    *v14 = *(_QWORD *)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v14;
  }
  _Unwind_Resume(a1);
}

void ObjcContainerConvertor::~ObjcContainerConvertor(ObjcContainerConvertor *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v9 = *((unsigned int *)this + 11);
  v10 = (uint64_t *)*((_QWORD *)this + 4);
  if ((_DWORD)v9)
  {
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      if (*v10)
      {
        v13 = (uint64_t *)(v12 - 16);
        v14 = *(_QWORD *)(((v12 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v15 = *(uint64_t **)(v12 - 8);
        if (v15)
        {
          v16 = *v13;
          *v15 = *v13;
          *(_QWORD *)(v16 + 8) = v15;
          *v13 = 0;
          v13[1] = 0;
        }
        *v13 = *(_QWORD *)(v14 + 40);
        *(_QWORD *)(v14 + 40) = v13;
        *v10 = 0;
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
    v10 = (uint64_t *)*((_QWORD *)this + 4);
  }
  if (v10)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = *((_QWORD *)this + 2);
  if (v17)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
  }
  v18 = *((_QWORD *)this + 1);
  if (v18)
    WTF::fastFree(v18 - 16, a2, a3, a4, a5, a6, a7, a8);
}

WTF **handerForStructTag(const char *__s, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  size_t v11;
  size_t v12;
  int *v13;
  _BYTE *v14;
  void *v15;
  objc_class *Class;
  uint64_t v17;
  Method *v18;
  Method *v19;
  unint64_t v20;
  objc_class *v21;
  Method *v22;
  Method *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int i;
  int v39;
  WTF **v40;
  WTF *v41;
  WTF **v42;
  unsigned int v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  WTF::StringImpl **v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl **v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  int v77;
  WTF **v78;
  WTF *v79;
  uint64_t v80;
  int v81;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl **v91;
  unsigned int v92[6];
  WTF::StringImpl **v93;
  unsigned int outCount[2];
  uint64_t v95;
  void (*v96)(unsigned int *, Method);
  void *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  _QWORD v101[2];
  void (*v102)(uint64_t, Method);
  void *v103;
  uint64_t v104;
  uint64_t *v105;

  if (__ldaxr((unsigned __int8 *)&unk_1ECF5852A))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&unk_1ECF5852A))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&unk_1ECF5852A);
LABEL_5:
  if (byte_1ECF5852B == 1)
  {
    v10 = (uint64_t *)qword_1ECF58540;
    if (!__s)
      goto LABEL_105;
    goto LABEL_7;
  }
  v10 = (uint64_t *)WTF::fastMalloc((WTF *)8);
  *v10 = 0;
  v15 = (void *)objc_opt_class();
  Class = object_getClass(v15);
  v17 = MEMORY[0x1E0C809B0];
  v101[0] = MEMORY[0x1E0C809B0];
  v101[1] = 3221225472;
  v102 = ___ZL22createStructHandlerMapv_block_invoke;
  v103 = &__block_descriptor_48_e22_v16__0__objc_method__8l;
  v104 = 21;
  v105 = v10;
  outCount[0] = 0;
  v18 = class_copyMethodList(Class, outCount);
  v19 = v18;
  if (outCount[0])
  {
    v20 = 0;
    do
      v102((uint64_t)v101, v19[v20++]);
    while (v20 < outCount[0]);
  }
  else if (!v18)
  {
    goto LABEL_19;
  }
  free(v19);
LABEL_19:
  v21 = (objc_class *)objc_opt_class();
  *(_QWORD *)outCount = v17;
  v95 = 3221225472;
  v96 = (void (*)(unsigned int *, Method))___ZL22createStructHandlerMapv_block_invoke_2;
  v97 = &__block_descriptor_56_e22_v16__0__objc_method__8l;
  v98 = 3;
  v99 = v10;
  v100 = 21;
  v92[0] = 0;
  v22 = class_copyMethodList(v21, v92);
  v23 = v22;
  if (v92[0])
  {
    v24 = 0;
    do
      v96(outCount, v23[v24++]);
    while (v24 < v92[0]);
  }
  else if (!v22)
  {
    goto LABEL_25;
  }
  free(v23);
LABEL_25:
  v93 = 0;
  v25 = *v10;
  if (*v10)
  {
    v26 = *(unsigned int *)(v25 - 4);
    v27 = v25 + 24 * v26;
    if (*(_DWORD *)(v25 - 12))
    {
      v28 = *v10;
      if ((_DWORD)v26)
      {
        v29 = 24 * v26;
        v28 = *v10;
        while ((unint64_t)(*(_QWORD *)v28 + 1) <= 1)
        {
          v28 += 24;
          v29 -= 24;
          if (!v29)
          {
            v28 = v27;
            goto LABEL_35;
          }
        }
      }
      goto LABEL_35;
    }
    v28 = v25 + 24 * v26;
  }
  else
  {
    v28 = 0;
    LODWORD(v26) = 0;
  }
  v27 = v25 + 24 * v26;
LABEL_35:
  if (v25)
    goto LABEL_45;
  while (v28 != v25)
  {
    if (!*(_QWORD *)(v28 + 16))
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v93, (WTF::StringImpl **)v28, a3, a4, a5, a6, a7, a8, (uint64_t)v92);
    v30 = v28 + 24;
    v28 = v27;
    if (v30 != v27)
    {
      v28 = v30;
      while ((unint64_t)(*(_QWORD *)v28 + 1) <= 1)
      {
        v28 += 24;
        if (v28 == v27)
        {
          v28 = v27;
          break;
        }
      }
    }
    v25 = *v10;
    if (*v10)
LABEL_45:
      v25 += 24 * *(unsigned int *)(v25 - 4);
  }
  v31 = (uint64_t)v93;
  if (!v93)
  {
    v32 = 0;
    v33 = 0;
LABEL_49:
    v91 = &v93[v33];
    goto LABEL_50;
  }
  v33 = *((unsigned int *)v93 - 1);
  v91 = &v93[v33];
  if (!*((_DWORD *)v93 - 3))
  {
    v32 = &v93[v33];
    goto LABEL_49;
  }
  v32 = v93;
  if (!(_DWORD)v33)
    goto LABEL_50;
  v71 = 8 * v33;
  v32 = v93;
  do
  {
    if ((unint64_t)*v32 + 1 > 1)
      goto LABEL_50;
    ++v32;
    v71 -= 8;
  }
  while (v71);
  v32 = v91;
LABEL_50:
  while (!v31)
  {
    if (!v32)
      goto LABEL_104;
LABEL_52:
    v34 = *v10;
    if (*v10)
    {
      v35 = *(_DWORD *)(v34 - 8);
      v36 = *((_DWORD *)*v32 + 4);
      if (v36 < 0x100)
        v37 = WTF::StringImpl::hashSlowCase(*v32);
      else
        v37 = v36 >> 8;
      for (i = 0; ; v37 = i + v39)
      {
        v39 = v37 & v35;
        v40 = (WTF **)(v34 + 24 * (v37 & v35));
        v41 = *v40;
        if (*v40 != (WTF *)-1)
        {
          if (!v41)
          {
            v42 = (WTF **)*v10;
            if (!*v10)
              goto LABEL_80;
            v43 = *((_DWORD *)v42 - 1);
            v40 = &v42[3 * v43];
            goto LABEL_64;
          }
          if (WTF::equal(v41, *v32, a3))
            break;
        }
        ++i;
      }
      v42 = (WTF **)*v10;
      if (!*v10)
        goto LABEL_65;
      v43 = *((_DWORD *)v42 - 1);
LABEL_64:
      v42 += 3 * v43;
      if (v42 == v40)
        goto LABEL_80;
LABEL_65:
      if (v42 != v40)
      {
        v44 = *v40;
        *v40 = (WTF *)-1;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
          {
            WTF::StringImpl::~StringImpl(v44, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
          }
          else
          {
            *(_DWORD *)v44 -= 2;
          }
        }
        ++*(_DWORD *)(*v10 - 16);
        v45 = *v10;
        if (*v10)
          v46 = *(_DWORD *)(v45 - 12) - 1;
        else
          v46 = -1;
        *(_DWORD *)(v45 - 12) = v46;
        v47 = *v10;
        if (*v10)
        {
          v48 = 6 * *(_DWORD *)(v47 - 12);
          v49 = *(_DWORD *)(v47 - 4);
          if (v48 < v49 && v49 >= 9)
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v10, v49 >> 1);
        }
      }
    }
LABEL_80:
    v51 = v32 + 1;
    v32 = v91;
    if (v51 != v91)
    {
      v32 = v51;
      while ((unint64_t)*v32 + 1 <= 1)
      {
        if (++v32 == v91)
        {
          v32 = v91;
          break;
        }
      }
    }
    v31 = (uint64_t)v93;
  }
  v60 = *(unsigned int *)(v31 - 4);
  if (v32 != (WTF::StringImpl **)(v31 + 8 * v60))
    goto LABEL_52;
  if ((_DWORD)v60)
  {
    v61 = (WTF::StringImpl **)v31;
    do
    {
      v62 = *v61;
      if (*v61 != (WTF::StringImpl *)-1)
      {
        *v61 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
          {
            WTF::StringImpl::~StringImpl(v62, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
          }
          else
          {
            *(_DWORD *)v62 -= 2;
          }
        }
      }
      ++v61;
      --v60;
    }
    while (v60);
  }
  WTF::fastFree(v31 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_104:
  qword_1ECF58540 = (uint64_t)v10;
  byte_1ECF5852B = 1;
  if (!__s)
  {
LABEL_105:
    v13 = 0;
    goto LABEL_106;
  }
LABEL_7:
  v11 = strlen(__s);
  if (v11)
  {
    v12 = v11;
    if (v11 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x197F07738);
    }
    v13 = (int *)WTF::fastCompactMalloc((WTF *)(v11 + 20));
    v14 = v13 + 5;
    *v13 = 2;
    v13[1] = v12;
    *((_QWORD *)v13 + 1) = v13 + 5;
    v13[4] = 4;
    if (v12 == 1)
      *v14 = *__s;
    else
      memcpy(v14, __s, v12);
  }
  else
  {
    v13 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
LABEL_106:
  v72 = *v10;
  if (!*v10)
    goto LABEL_116;
  v73 = *(_DWORD *)(v72 - 8);
  v74 = v13[4];
  if (v74 < 0x100)
    v75 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v13);
  else
    v75 = v74 >> 8;
  v76 = 0;
  while (2)
  {
    v77 = v75 & v73;
    v78 = (WTF **)(v72 + 24 * (v75 & v73));
    v79 = *v78;
    if (*v78 == (WTF *)-1)
    {
LABEL_113:
      v75 = ++v76 + v77;
      continue;
    }
    break;
  }
  if (v79)
  {
    if (WTF::equal(v79, (const WTF::StringImpl *)v13, a3))
      goto LABEL_117;
    goto LABEL_113;
  }
  if (*v10)
  {
    v78 = (WTF **)(*v10 + 24 * *(unsigned int *)(*v10 - 4));
    goto LABEL_117;
  }
LABEL_116:
  v78 = 0;
LABEL_117:
  if (v13)
  {
    if (*v13 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v13, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *v13 -= 2;
    }
  }
  if (*(_QWORD *)qword_1ECF58540)
    v80 = *(_QWORD *)qword_1ECF58540 + 24 * *(unsigned int *)(*(_QWORD *)qword_1ECF58540 - 4);
  else
    v80 = 0;
  v81 = __ldxr((unsigned __int8 *)&unk_1ECF5852A);
  if (v81 != 1)
  {
    __clrex();
    goto LABEL_127;
  }
  if (__stlxr(0, (unsigned __int8 *)&unk_1ECF5852A))
LABEL_127:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&unk_1ECF5852A, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  if ((WTF **)v80 == v78)
    return 0;
  else
    return v78 + 1;
}

void sub_197F07744(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl **a14)
{
  unsigned __int8 *v14;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  if (a14)
  {
    v16 = *((unsigned int *)a14 - 1);
    if ((_DWORD)v16)
    {
      v17 = a14;
      do
      {
        v18 = *v17;
        if (*v17 != (WTF::StringImpl *)-1)
        {
          *v17 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
            {
              WTF::StringImpl::~StringImpl(v18, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
            }
            else
            {
              *(_DWORD *)v18 -= 2;
            }
          }
        }
        ++v17;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree((unint64_t)(a14 - 2), a2, a3, a4, a5, a6, a7, a8);
  }
  v27 = __ldxr(v14);
  if (v27 == 1)
  {
    if (!__stlxr(0, v14))
LABEL_17:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&unk_1ECF5852A, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_17;
}

void *typeToValueInvocationFor(uint64_t a1)
{
  const char *v1;
  const char *v2;
  objc_class *v3;
  objc_method *ClassMethod;
  void *v5;

  v1 = +[JSValue selectorForStructToValue:](JSValue, "selectorForStructToValue:", a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = (objc_class *)objc_opt_class();
  ClassMethod = class_getClassMethod(v3, v2);
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DB8], "invocationWithMethodSignature:", objc_msgSend(MEMORY[0x1E0C99DD8], "signatureWithObjCTypes:", method_getTypeEncoding(ClassMethod)));
  objc_msgSend(v5, "setSelector:", v2);
  return v5;
}

void *valueToTypeInvocationFor(uint64_t a1)
{
  const char *v1;
  const char *v2;
  objc_class *v3;
  objc_method *InstanceMethod;
  void *v5;

  v1 = +[JSValue selectorForValueToStruct:](JSValue, "selectorForValueToStruct:", a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = (objc_class *)objc_opt_class();
  InstanceMethod = class_getInstanceMethod(v3, v2);
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DB8], "invocationWithMethodSignature:", objc_msgSend(MEMORY[0x1E0C99DD8], "signatureWithObjCTypes:", method_getTypeEncoding(InstanceMethod)));
  objc_msgSend(v5, "setSelector:", v2);
  return v5;
}

void sub_197F079FC(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(byte_1ECF5852C, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void sub_197F07ADC(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(byte_1ECF5852C, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void sub_197F07F5C(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void sub_197F0812C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10)
{
  unsigned __int8 *v10;
  const void *v11;
  int v13;

  if (v11)
    CFRelease(v11);
  v13 = __ldxr(v10);
  if (v13 == 1)
  {
    if (!__stlxr(0, v10))
    {
LABEL_8:
      JSC::JSLockHolder::~JSLockHolder(&a10, a2, a3, a4, a5, a6, a7, a8);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_8;
}

objc_object *getInternalObjcObject(objc_object *a1)
{
  void *v2;
  uint64_t v3;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v2 = (void *)-[objc_object value](a1, "value");
    if (v2)
    {
      v3 = tryUnwrapObjcObject((OpaqueJSContext *)objc_msgSend((id)objc_msgSend(v2, "context"), "JSGlobalContextRef"), (const OpaqueJSValue *)objc_msgSend(v2, "JSValueRef"));
      if (v3)
        return (objc_object *)v3;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      return (objc_object *)tryUnwrapObjcObject((OpaqueJSContext *)objc_msgSend((id)-[objc_object context](a1, "context"), "JSGlobalContextRef"), (const OpaqueJSValue *)-[objc_object JSValueRef](a1, "JSValueRef"));
  }
  return a1;
}

void sub_197F083C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  unsigned __int8 *v9;
  int v11;
  va_list va;

  va_start(va, a9);
  v11 = __ldxr(v9);
  if (v11 == 1)
  {
    if (!__stlxr(0, v9))
    {
LABEL_6:
      JSC::JSLockHolder::~JSLockHolder((unsigned int **)va, a2, a3, a4, a5, a6, a7, a8);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void scanExternalObjectGraph(JSC::VM *a1, JSC::AbstractSlotVisitor *a2, void *a3, int a4)
{
  void *v7;
  id v8;
  void *v9;
  void *v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  WTF *v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t j;
  uint64_t v43;
  int v44;
  _QWORD *v45;
  int v46;
  WTF *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v49 = a3;
  v7 = (void *)MEMORY[0x19AEBB88C]();
  v8 = +[JSVMWrapperCache wrapperForJSContextGroupRef:](JSVMWrapperCache, "wrapperForJSContextGroupRef:", a1);
  if (v8)
  {
    v9 = v8;
    v10 = (void *)objc_msgSend(v8, "externalObjectGraph");
    v11 = (unsigned __int8 *)objc_msgSend(v9, "externalDataMutex");
    v47 = 0;
    v48 = 0;
    v12 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v47, 1uLL, (unint64_t)&v49);
    v20 = HIDWORD(v48);
    *((_QWORD *)v47 + HIDWORD(v48)) = *v12;
    v21 = __CFADD__(v20, 1);
    v22 = v20 + 1;
    HIDWORD(v48) = v22;
    if (!v21)
    {
      while (1)
      {
        v24 = *((_QWORD *)v47 + --v22);
        HIDWORD(v48) = v22;
        if (v24)
          v25 = *((_BYTE *)a2 + 130) == 0;
        else
          v25 = 0;
        if (!v25)
          goto LABEL_52;
        v26 = *((_QWORD *)a2 + 15);
        v13 = *(_DWORD **)(v26 + 48);
        v14 = v13[1];
        v27 = (~(v24 << 32) + v24) ^ ((~(v24 << 32) + v24) >> 22);
        v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
        v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
        v15 = v14 & ((v29 >> 31) ^ v29);
        v16 = v15;
        while (1)
        {
          v30 = *(_QWORD *)&v13[2 * v16 + 4];
          if (!v30)
            break;
          if (v24 == v30)
            goto LABEL_51;
          v16 = ((_DWORD)v16 + 1) & v14;
          if ((_DWORD)v16 == (_DWORD)v15)
          {
            __break(0xC471u);
            JUMPOUT(0x197F08A14);
          }
        }
        if (!WTF::ConcurrentPtrHashSet::addSlow(v26, v13, v14, v15, v16, v24, v18, v19))
          goto LABEL_51;
        if (*((_BYTE *)a2 + 131))
          (*(void (**)(JSC::AbstractSlotVisitor *, unint64_t))(*(_QWORD *)a2 + 144))(a2, v24);
        ++*((_QWORD *)a2 + 9);
        if (a4)
        {
          v31 = (void *)objc_msgSend(v10, "objectForKey:", v24);
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
          if (v32)
          {
            v33 = *(_QWORD *)v52;
            do
            {
              for (i = 0; i != v32; ++i)
              {
                if (*(_QWORD *)v52 != v33)
                  objc_enumerationMutation(v31);
                v35 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * i);
                v50 = v35;
                v36 = HIDWORD(v48);
                if (HIDWORD(v48) == (_DWORD)v48)
                {
                  v37 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v47, HIDWORD(v48) + 1, (unint64_t)&v50);
                  v36 = HIDWORD(v48);
                  *((_QWORD *)v47 + HIDWORD(v48)) = *v37;
                }
                else
                {
                  *((_QWORD *)v47 + HIDWORD(v48)) = v35;
                }
                HIDWORD(v48) = v36 + 1;
              }
              v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
            }
            while (v32);
          }
          goto LABEL_51;
        }
        if (__ldaxr(v11))
          break;
        if (__stxr(1u, v11))
          goto LABEL_35;
LABEL_36:
        v39 = (void *)objc_msgSend(v10, "objectForKey:", v24);
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
        if (v40)
        {
          v41 = *(_QWORD *)v52;
          do
          {
            for (j = 0; j != v40; ++j)
            {
              if (*(_QWORD *)v52 != v41)
                objc_enumerationMutation(v39);
              v43 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * j);
              v50 = v43;
              v44 = HIDWORD(v48);
              if (HIDWORD(v48) == (_DWORD)v48)
              {
                v45 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v47, HIDWORD(v48) + 1, (unint64_t)&v50);
                v44 = HIDWORD(v48);
                *((_QWORD *)v47 + HIDWORD(v48)) = *v45;
              }
              else
              {
                *((_QWORD *)v47 + HIDWORD(v48)) = v43;
              }
              HIDWORD(v48) = v44 + 1;
            }
            v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
          }
          while (v40);
        }
        v46 = __ldxr(v11);
        if (v46 == 1)
        {
          if (!__stlxr(0, v11))
            goto LABEL_51;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, v14, v15, v16, v17, v18, v19);
LABEL_51:
        v22 = HIDWORD(v48);
LABEL_52:
        if (!v22)
          goto LABEL_4;
      }
      __clrex();
LABEL_35:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
      goto LABEL_36;
    }
LABEL_4:
    v23 = v47;
    if (v47)
    {
      v47 = 0;
      LODWORD(v48) = 0;
      WTF::fastFree((unint64_t)v23, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  objc_autoreleasePoolPop(v7);
}

void sub_197F08A1C(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF *a9, int a10)
{
  if (a9)
    WTF::fastFree((unint64_t)a9, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(exception_object);
}

void scanExternalRememberedSet(JSC::VM *a1, JSC::AbstractSlotVisitor *a2)
{
  void *v4;
  id v5;
  void *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t i;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  uint64_t v24;
  unsigned __int8 *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x19AEBB88C]();
  v5 = +[JSVMWrapperCache wrapperForJSContextGroupRef:](JSVMWrapperCache, "wrapperForJSContextGroupRef:", a1);
  if (!v5)
    goto LABEL_2;
  v6 = v5;
  v7 = (unsigned __int8 *)objc_msgSend(v5, "externalDataMutex");
  v8 = v7;
  if (__ldaxr(v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_6;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v7);
LABEL_6:
  v25 = v8;
  v26 = (void *)objc_msgSend(v6, "externalObjectGraph");
  v10 = (void *)objc_msgSend(v6, "externalRememberedSet");
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
  if (v11)
  {
    v24 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v32 != v24)
          objc_enumerationMutation(v10);
        v20 = (void *)objc_msgSend(v26, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * i));
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
        if (v21)
        {
          v22 = *(_QWORD *)v28;
          do
          {
            for (j = 0; j != v21; ++j)
            {
              if (*(_QWORD *)v28 != v22)
                objc_enumerationMutation(v20);
              scanExternalObjectGraph(a1, a2, *(void **)(*((_QWORD *)&v27 + 1) + 8 * j), 1);
            }
            v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
          }
          while (v21);
        }
      }
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
    }
    while (v11);
  }
  objc_msgSend(v10, "removeAllObjects");
  v18 = __ldxr(v25);
  if (v18 == 1)
  {
    if (!__stlxr(0, v25))
      goto LABEL_2;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v25, 0, v12, v13, v14, v15, v16, v17);
LABEL_2:
  objc_autoreleasePoolPop(v4);
}

void sub_197F08CC0(_Unwind_Exception *exception_object, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 *a11)
{
  int v12;

  v12 = __ldxr(a11);
  if (v12 == 1)
  {
    if (!__stlxr(0, a11))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(a11, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void JSAPIWrapperObjectHandleOwner::~JSAPIWrapperObjectHandleOwner(JSAPIWrapperObjectHandleOwner *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSManagedValueHandleOwner::~JSManagedValueHandleOwner(JSManagedValueHandleOwner *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSScriptSourceProvider::~JSScriptSourceProvider(JSScriptSourceProvider *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;

  v9 = (const void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v9)
    CFRelease(v9);
  JSC::SourceProvider::~SourceProvider(this, a2, a3, a4, a5, a6, a7, a8);
}

{
  const void *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = (const void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v9)
    CFRelease(v9);
  JSC::SourceProvider::~SourceProvider(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  int8x16_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int8x16_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  char v20;
  int v21;
  unsigned int v22;
  int v23;
  int *v24;

  v8 = *(int8x16_t **)result;
  v9 = *(_QWORD *)(result + 8);
  if (v9)
  {
    v10 = v9 - 1;
    if ((unint64_t)(v9 - 1) >> 31)
      goto LABEL_28;
  }
  else
  {
    v10 = 0;
  }
  v11 = *a2;
  v12 = *(int8x16_t **)a3;
  v13 = *(_QWORD *)(a3 + 8);
  if (!v13)
  {
    v14 = 0;
    goto LABEL_5;
  }
  v14 = v13 - 1;
  if ((unint64_t)(v13 - 1) >> 31)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x197F08EBCLL);
  }
LABEL_5:
  v15 = *a4;
  if (v11)
  {
    v16 = *(_DWORD *)(v11 + 4);
    if (v15)
      goto LABEL_7;
  }
  else
  {
    v16 = 0;
    if (v15)
    {
LABEL_7:
      v17 = *(_DWORD *)(v15 + 4);
      if (v17 < 0)
        goto LABEL_20;
      goto LABEL_8;
    }
  }
  v17 = 0;
LABEL_8:
  v18 = __OFADD__(v14, v17);
  v19 = v14 + v17;
  v20 = v18;
  if ((v16 & 0x80000000) == 0 && (v20 & 1) == 0)
  {
    v18 = __OFADD__(v16, v19);
    v21 = v16 + v19;
    if (!v18)
    {
      result = v10 + v21;
      if (!__OFADD__(v10, v21))
      {
        if (v11)
        {
          v22 = *(_DWORD *)(v11 + 16);
          v23 = (v22 >> 2) & 1;
          if (!v15 || (v22 & 4) == 0)
            goto LABEL_19;
        }
        else if (!v15)
        {
          v23 = 1;
          goto LABEL_19;
        }
        v23 = (*(unsigned __int8 *)(v15 + 16) >> 2) & 1;
LABEL_19:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v23, v8, v10, v11, v12, v14, v15, &v24);
        *a5 = v24;
        return result;
      }
    }
  }
LABEL_20:
  *a5 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, int **a9@<X8>)
{
  int v15;
  int *v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  _DWORD *v30;
  int8x16x2_t v31;
  int8x16x2_t v32;
  int8x16x2_t v33;

  v15 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v30);
        v17 = v30;
        if (v30)
        {
          v18 = v30 + 5;
          *v30 = 2;
          v17[1] = v15;
          *((_QWORD *)v17 + 1) = v17 + 5;
          v17[4] = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v18, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_16;
      }
LABEL_18:
      v17 = 0;
      goto LABEL_16;
    }
LABEL_17:
    v17 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_16;
  }
  if (!(_DWORD)result)
    goto LABEL_17;
  if (result > 0x7FFFFFEF)
    goto LABEL_18;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v30);
  v17 = v30;
  if (v30)
  {
    v19 = (char *)(v30 + 5);
    *v30 = 2;
    v17[1] = v15;
    *((_QWORD *)v17 + 1) = v17 + 5;
    v17[4] = 0;
    v20 = (char *)v17 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v21 = &v19[2 * (a4 & 0xFFFFFFC0)];
      v22 = 0uLL;
      do
      {
        v31.val[0] = *a3;
        v23 = a3[1];
        v32.val[0] = a3[2];
        v24 = a3[3];
        a3 += 4;
        v25 = v24;
        v32.val[1] = 0uLL;
        v33.val[0] = v23;
        v31.val[1] = 0uLL;
        v26 = v19;
        vst2q_s8(v26, v31);
        v26 += 32;
        v33.val[1] = 0uLL;
        vst2q_s8(v26, v33);
        v27 = v19 + 64;
        vst2q_s8(v27, v32);
        v28 = v19 + 96;
        vst2q_s8(v28, *(int8x16x2_t *)(&v22 - 1));
        v19 += 128;
      }
      while (v19 != v21);
      v19 = v21;
    }
    while (v19 != v20)
    {
      v29 = a3->u8[0];
      a3 = (int8x16_t *)((char *)a3 + 1);
      *(_WORD *)v19 = v29;
      v19 += 2;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v20, a5, a6, a7, a8);
  }
LABEL_16:
  *a9 = v17;
  return result;
}

void sub_197F0908C(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3URLENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3URLENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

unint64_t JSC::JSScriptFetchParameters::create(uint64_t a1, JSC::VM *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *ParametersSpaceSlow;
  unint64_t result;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  ParametersSpaceSlow = *(JSC::Heap **)(a1 + 40720);
  if (!ParametersSpaceSlow)
    ParametersSpaceSlow = JSC::GCClient::Heap::scriptFetchParametersSpaceSlow((JSC::Heap **)(a1 + 37552));
  result = *((_QWORD *)ParametersSpaceSlow + 3);
  if (result < *((_QWORD *)ParametersSpaceSlow + 4))
    goto LABEL_4;
  result = *((_QWORD *)ParametersSpaceSlow + 5);
  if ((result & 1) == 0)
  {
    v15 = *(_QWORD *)(result + 8) ^ *((_QWORD *)ParametersSpaceSlow + 6);
    *((_QWORD *)ParametersSpaceSlow + 4) = result + HIDWORD(v15);
    *((_QWORD *)ParametersSpaceSlow + 5) = result + (int)v15;
LABEL_4:
    *((_QWORD *)ParametersSpaceSlow + 3) = result + 16;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)ParametersSpaceSlow, a1 + 192, 16, 0, 0, v16, v17, v18);
LABEL_5:
  *(_DWORD *)result = 0;
  v13 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v13;
  v14 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 8) = v14;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

void *JSC::ScriptFetchParameters::integrity(JSC::ScriptFetchParameters *this)
{
  return &WTF::nullStringData;
}

uint64_t JSC::ScriptFetchParameters::isTopLevelModule(JSC::ScriptFetchParameters *this)
{
  return 0;
}

void JSC::DeferredStructureTransitionWatchpointFire::~DeferredStructureTransitionWatchpointFire(JSC::DeferredStructureTransitionWatchpointFire *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t **v10;
  uint64_t *i;
  uint64_t *v12;
  uint64_t v13;

  if (*((_BYTE *)this + 4) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow((uint64_t *)this, a9, a2, a3, a4, a5, a6, a7, a8);
  v10 = (uint64_t **)((char *)this + 8);
  for (i = (uint64_t *)*((_QWORD *)this + 1); i != (uint64_t *)v10; i = *v10)
  {
    v13 = *i;
    v12 = (uint64_t *)i[1];
    *v12 = *i;
    *(_QWORD *)(v13 + 8) = v12;
    *i = 0;
    i[1] = 0;
  }
}

void JSC::GCSafeConcurrentJSLocker::~GCSafeConcurrentJSLocker(JSC::GCSafeConcurrentJSLocker *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned __int8 *v14;
  int v15;

  if (!*((_BYTE *)this + 24))
    goto LABEL_7;
  *((_BYTE *)this + 16) = 0;
  v9 = (unsigned __int8 *)*((_QWORD *)this + 1);
  v10 = __ldxr(v9);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_6;
  }
  if (__stlxr(0, v9))
LABEL_6:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
LABEL_7:
  v11 = *((_QWORD *)this + 4);
  v12 = *(_DWORD *)(v11 + 916) - 1;
  *(_DWORD *)(v11 + 916) = v12;
  if (*(unsigned __int8 *)(v11 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v13 = v12 == 0;
  else
    v13 = 0;
  if (v13)
  {
    *(_BYTE *)(v11 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v11 + 192, 0);
  }
  if (*((_BYTE *)this + 24) && *((_BYTE *)this + 16))
  {
    v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
    v15 = __ldxr(v14);
    if (v15 == 1)
    {
      if (!__stlxr(0, v14))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v14, 0, a3, a4, a5, a6, a7, a8);
  }
}

unint64_t JSC::JSSourceCode::create(uint64_t a1, JSC::VM *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v11;
  unint64_t result;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v11 = *(JSC::Heap **)(a1 + 40776);
  if (!v11)
    v11 = JSC::GCClient::Heap::sourceCodeSpaceSlow((JSC::Heap **)(a1 + 37552));
  result = *((_QWORD *)v11 + 3);
  if (result < *((_QWORD *)v11 + 4))
    goto LABEL_4;
  result = *((_QWORD *)v11 + 5);
  if ((result & 1) == 0)
  {
    v15 = *(_QWORD *)(result + 8) ^ *((_QWORD *)v11 + 6);
    *((_QWORD *)v11 + 4) = result + HIDWORD(v15);
    *((_QWORD *)v11 + 5) = result + (int)v15;
LABEL_4:
    *((_QWORD *)v11 + 3) = result + 32;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v11, a1 + 192, 32, 0, 0, v16, v17, v18);
LABEL_5:
  *(_DWORD *)result = 0;
  v13 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v13;
  v14 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 8) = v14;
  *(_QWORD *)(result + 16) = a3[1];
  *(_QWORD *)(result + 24) = a3[2];
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC11ParserErrorENS8_18BytecodeCacheError13StandardErrorENSA_10WriteErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void ___ZL22createStructHandlerMapv_block_invoke(uint64_t a1, Method m)
{
  const char *Name;
  const char *v5;
  size_t v6;
  BOOL v8;
  char *v9;
  int v10;
  char *v11;
  const WTF::StringImpl *v12;
  char *v13;
  uint64_t *v14;
  size_t v15;
  size_t v16;
  int *v17;
  char *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int **v23;
  int i;
  unsigned int v25;
  WTF **v26;
  WTF *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char dst[2];

  Name = method_getName(m);
  v5 = sel_getName(Name);
  v6 = strlen(v5);
  if (v6 < *(_QWORD *)(a1 + 32))
    return;
  if (*(_QWORD *)v5 != 0x74695765756C6176 || v5[8] != 104)
    return;
  v8 = *(_QWORD *)&v5[v6 - 11] == 0x65746E6F436E693ALL && *(_QWORD *)&v5[v6 - 8] == 0x3A747865746E6F43;
  if (!v8 || method_getNumberOfArguments(m) != 4)
    return;
  v9 = method_copyArgumentType(m, 3u);
  v10 = strcmp(v9, "@");
  if (v9)
    free(v9);
  if (v10)
    return;
  method_getReturnType(m, dst, 3uLL);
  if (*(unsigned __int16 *)dst != 64)
    return;
  v11 = method_copyArgumentType(m, 2u);
  v13 = v11;
  v14 = *(uint64_t **)(a1 + 40);
  if (v11 && (v15 = strlen(v11)) != 0)
  {
    v16 = v15;
    if (v15 >> 31)
    {
      __break(0xC471u);
      return;
    }
    v17 = (int *)WTF::fastCompactMalloc((WTF *)(v15 + 20));
    v18 = (char *)(v17 + 5);
    *v17 = 2;
    v17[1] = v16;
    *((_QWORD *)v17 + 1) = v17 + 5;
    v17[4] = 4;
    if (v16 == 1)
      *v18 = *v13;
    else
      memcpy(v18, v13, v16);
  }
  else
  {
    v17 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v19 = *v14;
  if (*v14
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v14, 8u), (v19 = *v14) != 0))
  {
    v20 = *(_DWORD *)(v19 - 8);
  }
  else
  {
    v20 = 0;
  }
  v21 = v17[4];
  if (v21 < 0x100)
    v22 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v17);
  else
    v22 = v21 >> 8;
  v23 = 0;
  for (i = 1; ; ++i)
  {
    v25 = v22 & v20;
    v26 = (WTF **)(v19 + 24 * (v22 & v20));
    v27 = *v26;
    if (*v26 != (WTF *)-1)
      break;
    v23 = (int **)(v19 + 24 * v25);
LABEL_35:
    v22 = i + v25;
  }
  if (!v27)
  {
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      v23[2] = 0;
      --*(_DWORD *)(*v14 - 16);
      *v23 = v17;
    }
    else
    {
      *v26 = (WTF *)v17;
      v23 = (int **)(v19 + 24 * v25);
    }
    v23[1] = (int *)Name;
    v23[2] = 0;
    v34 = *v14;
    if (*v14)
      v35 = *(_DWORD *)(v34 - 12) + 1;
    else
      v35 = 1;
    *(_DWORD *)(v34 - 12) = v35;
    v36 = *v14;
    if (*v14)
      v37 = *(_DWORD *)(v36 - 12);
    else
      v37 = 0;
    v38 = (*(_DWORD *)(v36 - 16) + v37);
    v39 = *(unsigned int *)(v36 - 4);
    if (v39 > 0x400)
    {
      if (v39 > 2 * v38)
        goto LABEL_56;
    }
    else
    {
      if (3 * v39 > 4 * v38)
        goto LABEL_56;
      if (!(_DWORD)v39)
      {
        v40 = 8;
        goto LABEL_54;
      }
    }
    v40 = (_DWORD)v39 << (6 * *(_DWORD *)(v36 - 12) >= (2 * v39));
LABEL_54:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v14, v40);
    goto LABEL_56;
  }
  if (!WTF::equal(v27, (const WTF::StringImpl *)v17, v12))
    goto LABEL_35;
  if (*v17 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v17, v28, (uint64_t)v12, v29, v30, v31, v32, v33);
    WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
  }
  else
  {
    *v17 -= 2;
  }
LABEL_56:
  if (v13)
    free(v13);
}

void sub_197F09830(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void ___ZL22createStructHandlerMapv_block_invoke_2(_QWORD *a1, Method m)
{
  const char *Name;
  const char *v5;
  size_t v6;
  size_t v7;
  char *v8;
  WTF::AtomStringImpl *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  size_t v18;
  int *v19;
  char *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int i;
  int v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  char *v41;
  uint64_t *v42;

  Name = method_getName(m);
  v5 = sel_getName(Name);
  v6 = strlen(v5);
  if (v6 < a1[4])
    return;
  if (*(_WORD *)v5 != 28532)
    return;
  v7 = v6;
  if (method_getNumberOfArguments(m) != 2)
    return;
  v8 = method_copyReturnType(m);
  v16 = v8;
  v42 = (uint64_t *)a1[5];
  v40 = Name;
  if (v8)
  {
    v17 = strlen(v8);
    if (v17)
    {
      v18 = v17;
      if (v17 >> 31)
      {
        __break(0xC471u);
        return;
      }
      v19 = (int *)WTF::fastCompactMalloc((WTF *)(v17 + 20));
      v20 = (char *)(v19 + 5);
      *v19 = 2;
      v19[1] = v18;
      *((_QWORD *)v19 + 1) = v19 + 5;
      v19[4] = 4;
      if (v18 == 1)
        *v20 = *v16;
      else
        memcpy(v20, v16, v18);
    }
    else
    {
      v19 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
  }
  else
  {
    v19 = 0;
  }
  v21 = *v42;
  if (!*v42)
  {
LABEL_22:
    v27 = 0;
    goto LABEL_24;
  }
  v22 = *(_DWORD *)(v21 - 8);
  v23 = v19[4];
  v41 = v16;
  if (v23 < 0x100)
    v24 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v19);
  else
    v24 = v23 >> 8;
  for (i = 0; ; v24 = i + v26)
  {
    v26 = v24 & v22;
    v27 = v21 + 24 * (v24 & v22);
    v28 = *(WTF **)v27;
    if (*(_QWORD *)v27 == -1)
      goto LABEL_19;
    if (!v28)
      break;
    if (WTF::equal(v28, (const WTF::StringImpl *)v19, v10))
    {
      v16 = v41;
      goto LABEL_24;
    }
LABEL_19:
    ++i;
  }
  v16 = v41;
  if (!*v42)
    goto LABEL_22;
  v27 = *v42 + 24 * *(unsigned int *)(*v42 - 4);
LABEL_24:
  if (v19)
  {
    if (*v19 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *v19 -= 2;
    }
  }
  v29 = *(_QWORD *)a1[5];
  if (v29)
    v29 += 24 * *(unsigned int *)(v29 - 4);
  if (v29 != v27)
  {
    v30 = sel_getName(*(SEL *)(v27 + 8));
    v31 = strlen(v30) - a1[6];
    if (v31 == v7 - a1[4] && !memcmp(v30 + 9, v5 + 2, v31 - 1))
      *(_QWORD *)(v27 + 16) = v40;
  }
  if (v16)
    free(v16);
}

void sub_197F09AEC(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  WTF::StringImpl *v11;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  else
  {
    *(_DWORD *)v11 -= 2;
  }
  if (a11)
    free(a11);
  _Unwind_Resume(exception_object);
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v15 = v7;
  v16 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v16;
  *(_DWORD *)(v15 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v17 = 0;
    v18 = v5;
    do
    {
      v19 = (WTF::StringImpl **)(v4 + 24 * v17);
      v20 = *v19;
      if (*v19 != (WTF::StringImpl *)-1)
      {
        if (v20)
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = *((_DWORD *)v20 + 4);
          if (v23 < 0x100)
            v24 = WTF::StringImpl::hashSlowCase(v20);
          else
            v24 = v23 >> 8;
          v25 = 0;
          do
          {
            v26 = v24 & v22;
            v27 = (WTF::StringImpl **)(v21 + 24 * (v24 & v22));
            v24 = ++v25 + (v24 & v22);
          }
          while (*v27);
          *v27 = 0;
          v28 = *v19;
          *v19 = 0;
          *v27 = v28;
          *(_OWORD *)(v21 + 24 * v26 + 8) = *(_OWORD *)(v4 + 24 * v17 + 8);
          v29 = *v19;
          *v19 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
            {
              WTF::StringImpl::~StringImpl(v29, v8, v9, v10, v11, v12, v13, v14);
              WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
            }
            else
            {
              *(_DWORD *)v29 -= 2;
            }
          }
        }
        else
        {
          *v19 = 0;
        }
      }
      ++v17;
    }
    while (v17 != v18);
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

void WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl **v16;
  int i;
  unsigned int v18;
  WTF::StringImpl **v19;
  WTF *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  v12 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *a1) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = *((_DWORD *)*a2 + 4);
  if (v14 < 0x100)
    v15 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v15 = v14 >> 8;
  v16 = 0;
  for (i = 1; ; ++i)
  {
    v18 = v15 & v13;
    v19 = (WTF::StringImpl **)(v12 + 8 * (v15 & v13));
    v20 = *v19;
    if (!*v19)
    {
      if (v16)
      {
        *v16 = 0;
        --*(_DWORD *)(*a1 - 16);
        v19 = v16;
      }
      v21 = *a2;
      if (*a2)
        *(_DWORD *)v21 += 2;
      *v19 = v21;
      v22 = *a1;
      if (*a1)
        v23 = *(_DWORD *)(v22 - 12) + 1;
      else
        v23 = 1;
      *(_DWORD *)(v22 - 12) = v23;
      v24 = *a1;
      if (*a1)
        v25 = *(_DWORD *)(v24 - 12);
      else
        v25 = 0;
      v26 = (*(_DWORD *)(v24 - 16) + v25);
      v27 = *(unsigned int *)(v24 - 4);
      if (v27 > 0x400)
      {
        if (v27 > 2 * v26)
          goto LABEL_21;
      }
      else if (3 * v27 > 4 * v26)
      {
LABEL_21:
        v28 = v24 + 8 * v27;
        v29 = 1;
        goto LABEL_22;
      }
      v19 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, (uint64_t)v19, (uint64_t)a3, a4, a5, a6, a7, a8);
      v24 = *a1;
      if (*a1)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
      goto LABEL_21;
    }
    if (v20 != (WTF *)-1)
      break;
    v16 = (WTF::StringImpl **)(v12 + 8 * v18);
LABEL_10:
    v15 = i + v18;
  }
  if (!WTF::equal(v20, *a2, a3))
    goto LABEL_10;
  v30 = *a1;
  if (*a1)
    v31 = *(unsigned int *)(v30 - 4);
  else
    v31 = 0;
  v29 = 0;
  v28 = v30 + 8 * v31;
LABEL_22:
  *(_QWORD *)a9 = v19;
  *(_QWORD *)(a9 + 8) = v28;
  *(_BYTE *)(a9 + 16) = v29;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  int v11;

  v9 = *a1;
  if (*a1 && (v11 = *(_DWORD *)(v9 - 4)) != 0)
    v10 = (v11 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v11)));
  else
    v10 = 8;
  return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, v10, a2, a4, a5, a6, a7, a8);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl **result;
  uint64_t v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v24 = 0;
    v22 = 0;
    do
    {
      v25 = (WTF::StringImpl **)(v11 + 8 * v24);
      v26 = *v25;
      if (*v25)
      {
        if (v26 != (WTF::StringImpl *)-1)
        {
          v27 = *a1;
          if (*a1)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v29 = *((_DWORD *)v26 + 4);
          if (v29 < 0x100)
            v30 = WTF::StringImpl::hashSlowCase(v26);
          else
            v30 = v29 >> 8;
          v31 = 0;
          do
          {
            v32 = v30 & v28;
            v30 = ++v31 + v32;
          }
          while (*(_QWORD *)(v27 + 8 * v32));
          v33 = (WTF::StringImpl **)(v27 + 8 * v32);
          *v33 = 0;
          v34 = *v25;
          *v25 = 0;
          *v33 = v34;
          v35 = *v25;
          *v25 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
            {
              WTF::StringImpl::~StringImpl(v35, v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
            }
            else
            {
              *(_DWORD *)v35 -= 2;
            }
          }
          if (v25 == (WTF::StringImpl **)a3)
            v22 = v33;
        }
      }
      else
      {
        *v25 = 0;
      }
      ++v24;
    }
    while (v24 != v12);
    goto LABEL_23;
  }
  v22 = 0;
  result = 0;
  if (v11)
  {
LABEL_23:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

uint64_t initWrapperCache(void)
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3748]), "initWithKeyOptions:valueOptions:capacity:", 258, 5, 0);
  qword_1ECF58548 = result;
  return result;
}

void WTF::RefCounted<JSC::CachedBytecode>::deref(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  if (*(_DWORD *)this == 1)
  {
    v9 = *((unsigned int *)this + 15);
    v10 = *((_QWORD *)this + 6);
    if ((_DWORD)v9)
    {
      v11 = 56 * v9;
      v12 = (_DWORD *)(v10 + 48);
      do
      {
        v13 = *v12;
        if ((_DWORD)v13 != -1)
          ((void (*)(char *, _DWORD *))off_1E357B5A8[v13])(&v16, v12 - 10);
        *v12 = -1;
        v12 += 14;
        v11 -= 56;
      }
      while (v11);
      v10 = *((_QWORD *)this + 6);
    }
    if (v10)
    {
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 14) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    v14 = *((_QWORD *)this + 5);
    if (v14)
      WTF::fastFree(v14 - 16, a2, a3, a4, a5, a6, a7, a8);
    v15 = *((unsigned int *)this + 8);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v15])(&v17, (char *)this + 16);
    *((_DWORD *)this + 8) = -1;
    WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    --*(_DWORD *)this;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC11CacheUpdate12GlobalUpdateENS9_14FunctionUpdateEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC11CacheUpdate12GlobalUpdateENS9_14FunctionUpdateEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v5, a2 + 16);
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

void WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(unsigned int *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  do
  {
    v8 = __ldaxr(a1);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, a1));
  if (!v9)
  {
    atomic_store(1u, a1);
    OpaqueJSString::~OpaqueJSString((OpaqueJSString *)a1, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
}

_QWORD *WTF::Detail::CallableWrapper<JSC::JSAPIGlobalObject::moduleLoaderFetch(JSC::JSGlobalObject *,JSC::JSModuleLoader *,JSC::JSValue,JSC::JSValue,JSC::JSValue)::$_0,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::~CallableWrapper(_QWORD *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *a1 = &off_1E357B5C8;
  v9 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = a1[1];
  if (v10)
  {
    v11 = (uint64_t *)(v10 - 16);
    v12 = *(_QWORD *)(((v10 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v13 = *(uint64_t **)(v10 - 8);
    if (v13)
    {
      v14 = *v11;
      *v13 = *v11;
      *(_QWORD *)(v14 + 8) = v13;
      *v11 = 0;
      v11[1] = 0;
    }
    *v11 = *(_QWORD *)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;
    a1[1] = 0;
  }
  return a1;
}

void WTF::Detail::CallableWrapper<JSC::JSAPIGlobalObject::moduleLoaderFetch(JSC::JSGlobalObject *,JSC::JSModuleLoader *,JSC::JSValue,JSC::JSValue,JSC::JSValue)::$_0,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::~CallableWrapper(WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)this = &off_1E357B5C8;
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *((_QWORD *)this + 1);
  if (v10)
  {
    v11 = (uint64_t *)(v10 - 16);
    v12 = *(_QWORD *)(((v10 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v13 = *(uint64_t **)(v10 - 8);
    if (v13)
    {
      v14 = *v11;
      *v13 = *v11;
      *(_QWORD *)(v14 + 8) = v13;
      *v11 = 0;
      v11[1] = 0;
    }
    *v11 = *(_QWORD *)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Detail::CallableWrapper<JSC::JSAPIGlobalObject::moduleLoaderFetch(JSC::JSGlobalObject *,JSC::JSModuleLoader *,JSC::JSValue,JSC::JSValue,JSC::JSValue)::$_0,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::call(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  JSContext *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const WTF::String *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  int v65;
  int v66;
  BOOL v67;
  int v68;
  char v69;
  int v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  _WORD *v81;
  int8x16_t *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  unsigned __int128 *v96;
  int8x16_t *v97;
  char *v98;
  char *v99;
  __int128 v100;
  char *v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  char *v105;
  char *v106;
  char *v107;
  __int16 v108;
  uint64_t v109;
  _WORD *v110;
  uint64_t v111;
  unsigned __int128 *v112;
  unsigned __int128 *v113;
  __int128 v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  char *v118;
  char *v119;
  char *v120;
  __int16 v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned __int128 *v155;
  unsigned __int128 *v156;
  unsigned __int128 v157;
  unsigned __int128 *v158;
  unsigned __int128 *v159;
  unsigned __int128 v160;
  char v161;
  char v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  int8x16x2_t v165;
  int8x16x2_t v166;
  int8x16x2_t v167;
  int8x16x2_t v168;
  int8x16x2_t v169;
  int8x16x2_t v170;
  int8x16x2_t v171;
  int8x16x2_t v172;
  int8x16x2_t v173;
  int8x16x2_t v174;

  v6 = a2[7];
  v7 = +[JSContext contextWithJSGlobalContextRef:](JSContext, "contextWithJSGlobalContextRef:", a2);
  if (*(_DWORD *)(a3 + 32) == 1)
    v8 = 10;
  else
    v8 = *(_QWORD *)(a3 + 48);
  v9 = (void *)valueToObject(v7, v8);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = objc_msgSend(v9, "jsSourceCode");
    if (objc_msgSend(v9, "type") == 1)
    {
      WTF::String::String(&v163, (CFStringRef)objc_msgSend((id)objc_msgSend(v9, "sourceURL"), "absoluteString"));
      v18 = v163;
      if (v163)
      {
        if ((*((_BYTE *)v163 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v163 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v6 + 41912), (unint64_t)v163, (const WTF::StringImpl *)v12, v13, v14, v15, v16, v17, &v164);
          v18 = v164;
        }
      }
      v19 = *(_DWORD *)v18;
      *(_DWORD *)v18 += 2;
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
        v19 = *(_DWORD *)v18;
      }
      v20 = *(WTF::StringImpl **)(a1 + 16);
      v21 = v19 - 2;
      if (v21)
      {
        *(_DWORD *)v18 = v21;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      if (v18 == v20)
      {
        v22 = *(unint64_t **)(a1 + 8);
        if (v22)
          v23 = *v22;
        else
          v23 = 0;
        JSC::JSPromise::resolve(v23, a2, v10, v13, v14, v15, v16, v17);
        goto LABEL_18;
      }
      v63 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      v64 = *(_QWORD *)(a1 + 16);
      if (v64)
        *(_DWORD *)v64 += 2;
      if (v63)
      {
        v65 = *((_DWORD *)v63 + 1);
        if (v64)
          goto LABEL_36;
      }
      else
      {
        v65 = 0;
        if (v64)
        {
LABEL_36:
          v66 = *(_DWORD *)(v64 + 4);
          if (v66 < 0)
            goto LABEL_120;
LABEL_37:
          v67 = __OFADD__(v66, 10);
          v68 = v66 + 10;
          v69 = v67;
          if (v65 < 0)
            goto LABEL_120;
          if ((v69 & 1) != 0)
            goto LABEL_120;
          v67 = __OFADD__(v65, v68);
          v70 = v65 + v68;
          if (v67)
            goto LABEL_120;
          v71 = v70 + 74;
          if (__OFADD__(v70, 74))
            goto LABEL_120;
          if (v63)
          {
            v72 = *((_DWORD *)v63 + 4);
            if (!v64 || (v72 & 4) == 0)
            {
              v73 = v71;
              v74 = v71 == 0;
              if ((v72 & 4) != 0)
                goto LABEL_59;
              v75 = 1;
              goto LABEL_51;
            }
          }
          else if (!v64)
          {
            if (v70 != -74)
            {
              v84 = 0;
              v85 = 0;
              v73 = v71;
              if ((v71 & 0x80000000) != 0)
                goto LABEL_120;
LABEL_61:
              WTF::tryFastCompactMalloc((WTF *)(v73 + 20), &v164);
              v76 = v164;
              if (v164)
              {
                *(_OWORD *)((char *)v164 + 36) = *(_OWORD *)"t was provided for two different identifiers, previously: ";
                qmemcpy((char *)v76 + 52, "or two different identifiers, previously: ", 42);
                *(_DWORD *)v76 = 2;
                *((_DWORD *)v76 + 1) = v71;
                *((_QWORD *)v76 + 1) = (char *)v76 + 20;
                *((_DWORD *)v76 + 4) = 4;
                *(_OWORD *)((char *)v76 + 20) = *(_OWORD *)"The same JSScript was provided for two different identifiers, previously: ";
                v86 = (char *)v76 + 94;
                if (v84)
                {
                  v87 = (_BYTE *)*((_QWORD *)v63 + 1);
                  v12 = *((unsigned int *)v63 + 1);
                  if ((*((_BYTE *)v63 + 16) & 4) != 0)
                  {
                    if ((_DWORD)v12 == 1)
                    {
                      *v86 = *v87;
                    }
                    else if ((_DWORD)v12)
                    {
                      memcpy((char *)v76 + 94, v87, v12);
                    }
                  }
                  else
                  {
                    if (v12 < 0x10)
                    {
                      v155 = (unsigned __int128 *)((char *)v76 + 94);
                    }
                    else
                    {
                      v155 = (unsigned __int128 *)&v86[v12 & 0xFFFFFFF0];
                      v156 = (unsigned __int128 *)((char *)v76 + 94);
                      do
                      {
                        v157 = (unsigned __int128)vld2q_s8(v87);
                        v87 += 32;
                        *v156++ = v157;
                      }
                      while (v156 != v155);
                    }
                    while (v155 != (unsigned __int128 *)&v86[v12])
                    {
                      v162 = *v87;
                      v87 += 2;
                      *(_BYTE *)v155 = v162;
                      v155 = (unsigned __int128 *)((char *)v155 + 1);
                    }
                  }
                  v94 = *((unsigned int *)v63 + 1);
                }
                else
                {
                  v94 = 0;
                }
                v95 = &v86[v94];
                *(_QWORD *)v95 = *(_QWORD *)" and now: ";
                *((_WORD *)v95 + 4) = 8250;
                if (!v85)
                  goto LABEL_99;
                v96 = (unsigned __int128 *)(v95 + 10);
                v97 = *(int8x16_t **)(v64 + 8);
                v12 = *(unsigned int *)(v64 + 4);
                if ((*(_BYTE *)(v64 + 16) & 4) == 0)
                {
                  v158 = (unsigned __int128 *)((char *)v96 + v12);
                  if (v12 >= 0x10)
                  {
                    v159 = (unsigned __int128 *)((char *)v96 + (v12 & 0xFFFFFFF0));
                    do
                    {
                      v160 = (unsigned __int128)vld2q_s8(v97->i8);
                      v97 += 2;
                      *v96++ = v160;
                    }
                    while (v96 != v159);
                    v96 = v159;
                  }
                  while (v96 != v158)
                  {
                    v161 = v97->i8[0];
                    v97 = (int8x16_t *)((char *)v97 + 2);
                    *(_BYTE *)v96 = v161;
                    v96 = (unsigned __int128 *)((char *)v96 + 1);
                  }
                  goto LABEL_99;
                }
                if ((_DWORD)v12 == 1)
                {
                  *(_BYTE *)v96 = v97->i8[0];
                  goto LABEL_99;
                }
                if (!(_DWORD)v12)
                {
LABEL_99:
                  v164 = v76;
                  v122 = *(unint64_t **)(a1 + 8);
                  if (v122)
                    v123 = *v122;
                  else
                    v123 = 0;
                  v124 = JSC::createTypeError((unint64_t)a2, &v164, (const WTF::String *)v12);
                  JSC::JSPromise::reject(v123, a2, v124, v125, v126, v127, v128, v129);
                  v130 = v164;
                  v164 = 0;
                  if (v130)
                  {
                    if (*(_DWORD *)v130 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v130, v24, v25, v26, v27, v28, v29, v30);
                      WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
                      if (!v64)
                        goto LABEL_108;
                      goto LABEL_106;
                    }
                    *(_DWORD *)v130 -= 2;
                  }
                  if (!v64)
                    goto LABEL_108;
LABEL_106:
                  if (*(_DWORD *)v64 == 2)
                  {
                    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v64, v24, v25, v26, v27, v28, v29, v30);
                    WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
                  }
                  else
                  {
                    *(_DWORD *)v64 -= 2;
                  }
LABEL_108:
                  if (v63)
                  {
                    if (*(_DWORD *)v63 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v63, v24, v25, v26, v27, v28, v29, v30);
                      WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
                    }
                    else
                    {
                      *(_DWORD *)v63 -= 2;
                    }
                  }
LABEL_18:
                  v31 = v163;
                  v163 = 0;
                  if (!v31)
                    return 10;
                  goto LABEL_19;
                }
LABEL_92:
                memcpy(v96, v97, v12);
                goto LABEL_99;
              }
              goto LABEL_120;
            }
LABEL_123:
            v76 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
            goto LABEL_99;
          }
          v73 = v71;
          v74 = v71 == 0;
          v75 = (uint64_t)v63;
          if ((*(_BYTE *)(v64 + 16) & 4) != 0)
          {
LABEL_59:
            v84 = v63;
            v85 = v64;
            if (!v74)
            {
              if ((v71 & 0x80000000) != 0)
                goto LABEL_120;
              goto LABEL_61;
            }
            goto LABEL_123;
          }
LABEL_51:
          if (!v74)
          {
            if (v71 <= 0x7FFFFFEF)
            {
              WTF::tryFastCompactMalloc((WTF *)(2 * v73 + 20), &v164);
              v76 = v164;
              if (v164)
              {
                v77 = (char *)v164 + 20;
                *(_DWORD *)v164 = 2;
                *((_DWORD *)v76 + 1) = v71;
                *((_QWORD *)v76 + 1) = (char *)v76 + 20;
                *((_DWORD *)v76 + 4) = 0;
                v165.val[0] = *(int8x16_t *)"The same JSScript was provided for two different identifiers, previously: ";
                v166.val[0] = *(int8x16_t *)"or two different identifiers, previously: ";
                v169.val[1] = 0uLL;
                v169.val[0] = *(int8x16_t *)" identifiers, previously: ";
                v166.val[1] = 0u;
                v172.val[0] = *(int8x16_t *)"t was provided for two different identifiers, previously: ";
                v165.val[1] = 0u;
                vst2q_s8(v77, v165);
                v172.val[1] = 0u;
                v78 = (char *)v76 + 52;
                vst2q_s8(v78, v172);
                v79 = (char *)v76 + 84;
                vst2q_s8(v79, v166);
                v80 = (char *)v76 + 116;
                vst2q_s8(v80, v169);
                v81 = (_WORD *)((char *)v76 + 168);
                *(_OWORD *)((char *)v76 + 148) = xmmword_19914EFC0;
                *((_DWORD *)v76 + 41) = 2097210;
                if (v75)
                {
                  v82 = (int8x16_t *)*((_QWORD *)v63 + 1);
                  v83 = *((unsigned int *)v63 + 1);
                  if ((*((_BYTE *)v63 + 16) & 4) != 0)
                  {
                    v98 = (char *)&v81[v83];
                    if (v83 >= 0x40)
                    {
                      v99 = (char *)&v81[v83 & 0xFFFFFFC0];
                      v100 = 0uLL;
                      v101 = (char *)v76 + 168;
                      do
                      {
                        v167.val[0] = *v82;
                        v102 = v82[1];
                        v170.val[0] = v82[2];
                        v103 = v82[3];
                        v82 += 4;
                        v104 = v103;
                        v170.val[1] = 0uLL;
                        v173.val[0] = v102;
                        v167.val[1] = 0uLL;
                        v105 = v101;
                        vst2q_s8(v105, v167);
                        v105 += 32;
                        v173.val[1] = 0uLL;
                        vst2q_s8(v105, v173);
                        v106 = v101 + 64;
                        vst2q_s8(v106, v170);
                        v107 = v101 + 96;
                        vst2q_s8(v107, *(int8x16x2_t *)(&v100 - 1));
                        v101 += 128;
                      }
                      while (v101 != v99);
                    }
                    else
                    {
                      v99 = (char *)v76 + 168;
                    }
                    while (v99 != v98)
                    {
                      v108 = v82->u8[0];
                      v82 = (int8x16_t *)((char *)v82 + 1);
                      *(_WORD *)v99 = v108;
                      v99 += 2;
                    }
                  }
                  else if ((_DWORD)v83 == 1)
                  {
                    *v81 = v82->i16[0];
                  }
                  else if ((_DWORD)v83)
                  {
                    memcpy((char *)v76 + 168, v82, 2 * v83);
                  }
                  v109 = *((unsigned int *)v63 + 1);
                }
                else
                {
                  v109 = 0;
                }
                v110 = &v81[v109];
                *(_OWORD *)v110 = xmmword_19914EFD0;
                *((_DWORD *)v110 + 4) = 2097210;
                if (!v64)
                  goto LABEL_99;
                v96 = (unsigned __int128 *)(v110 + 10);
                v97 = *(int8x16_t **)(v64 + 8);
                v111 = *(unsigned int *)(v64 + 4);
                if ((*(_BYTE *)(v64 + 16) & 4) != 0)
                {
                  v112 = (unsigned __int128 *)((char *)v96 + 2 * v111);
                  if (v111 >= 0x40)
                  {
                    v113 = (unsigned __int128 *)((char *)v96 + 2 * (v111 & 0xFFFFFFC0));
                    v114 = 0uLL;
                    do
                    {
                      v168.val[0] = *v97;
                      v115 = v97[1];
                      v171.val[0] = v97[2];
                      v116 = v97[3];
                      v97 += 4;
                      v117 = v116;
                      v171.val[1] = 0uLL;
                      v174.val[0] = v115;
                      v168.val[1] = 0uLL;
                      v118 = (char *)v96;
                      vst2q_s8(v118, v168);
                      v118 += 32;
                      v174.val[1] = 0uLL;
                      vst2q_s8(v118, v174);
                      v119 = (char *)(v96 + 4);
                      vst2q_s8(v119, v171);
                      v120 = (char *)(v96 + 6);
                      vst2q_s8(v120, *(int8x16x2_t *)(&v114 - 1));
                      v96 += 8;
                    }
                    while (v96 != v113);
                    v96 = v113;
                  }
                  while (v96 != v112)
                  {
                    v121 = v97->u8[0];
                    v97 = (int8x16_t *)((char *)v97 + 1);
                    *(_WORD *)v96 = v121;
                    v96 = (unsigned __int128 *)((char *)v96 + 2);
                  }
                  goto LABEL_99;
                }
                if ((_DWORD)v111 == 1)
                {
                  *(_WORD *)v96 = v97->i16[0];
                  goto LABEL_99;
                }
                if (!(_DWORD)v111)
                  goto LABEL_99;
                v12 = 2 * v111;
                goto LABEL_92;
              }
            }
LABEL_120:
            v164 = 0;
            __break(0xC471u);
            JUMPOUT(0x197F0AA70);
          }
          goto LABEL_123;
        }
      }
      v66 = 0;
      goto LABEL_37;
    }
    v61 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v61 = 0x5100000002;
    *(_QWORD *)(v61 + 8) = "The JSScript that was provided did not have expected type of kJSScriptTypeModule.";
    *(_DWORD *)(v61 + 16) = 4;
    v164 = (WTF::StringImpl *)v61;
    v62 = *(unint64_t **)(a1 + 8);
    if (v62)
      v60 = *v62;
    else
      v60 = 0;
  }
  else
  {
    v57 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v57 = 0x3700000002;
    *(_QWORD *)(v57 + 8) = "First argument of resolution callback is not a JSScript";
    *(_DWORD *)(v57 + 16) = 4;
    v164 = (WTF::StringImpl *)v57;
    v59 = *(unint64_t **)(a1 + 8);
    if (v59)
      v60 = *v59;
    else
      v60 = 0;
  }
  v88 = JSC::createTypeError((unint64_t)a2, &v164, v58);
  JSC::JSPromise::reject(v60, a2, v88, v89, v90, v91, v92, v93);
  v31 = v164;
  v164 = 0;
  if (!v31)
    return 10;
LABEL_19:
  if (*(_DWORD *)v31 == 2)
  {
    WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
    WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
  }
  else
  {
    *(_DWORD *)v31 -= 2;
  }
  return 10;
}

void sub_197F0AB34(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::~StringImpl(a10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      if (!v10)
        goto LABEL_14;
      goto LABEL_9;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (!v10)
    goto LABEL_14;
LABEL_9:
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
LABEL_14:
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::~StringImpl(a9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<JSC::JSAPIGlobalObject::moduleLoaderFetch(JSC::JSGlobalObject *,JSC::JSModuleLoader *,JSC::JSValue,JSC::JSValue,JSC::JSValue)::$_1,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::~CallableWrapper(_QWORD *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *result = off_1E357B5F0;
  v1 = result[1];
  if (v1)
  {
    v2 = (uint64_t *)(v1 - 16);
    v3 = *(_QWORD *)(((v1 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v4 = *(uint64_t **)(v1 - 8);
    if (v4)
    {
      v5 = *v2;
      *v4 = *v2;
      *(_QWORD *)(v5 + 8) = v4;
      *v2 = 0;
      v2[1] = 0;
    }
    *v2 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;
    result[1] = 0;
  }
  return result;
}

void WTF::Detail::CallableWrapper<JSC::JSAPIGlobalObject::moduleLoaderFetch(JSC::JSGlobalObject *,JSC::JSModuleLoader *,JSC::JSValue,JSC::JSValue,JSC::JSValue)::$_1,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::~CallableWrapper(unint64_t this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E357B5F0;
  v8 = *(_QWORD *)(this + 8);
  if (v8)
  {
    v9 = (uint64_t *)(v8 - 16);
    v10 = *(_QWORD *)(((v8 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v11 = *(uint64_t **)(v8 - 8);
    if (v11)
    {
      v12 = *v9;
      *v11 = *v9;
      *(_QWORD *)(v12 + 8) = v11;
      *v9 = 0;
      v9[1] = 0;
    }
    *v9 = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;
    *(_QWORD *)(this + 8) = 0;
  }
  WTF::fastFree(this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Detail::CallableWrapper<JSC::JSAPIGlobalObject::moduleLoaderFetch(JSC::JSGlobalObject *,JSC::JSModuleLoader *,JSC::JSValue,JSC::JSValue,JSC::JSValue)::$_1,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;

  v9 = *(unint64_t **)(a1 + 8);
  if (v9)
    v10 = *v9;
  else
    v10 = 0;
  if (*(_DWORD *)(a3 + 32) == 1)
    v11 = 10;
  else
    v11 = *(_QWORD *)(a3 + 48);
  JSC::JSPromise::reject(v10, *(uint64_t **)(a1 + 16), v11, a4, a5, a6, a7, a8);
  return 10;
}

uint64_t WTF::Vector<WTF::RetainPtr<void const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RetainPtr<objc_object *>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  const void **v19;
  const void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *(_QWORD *)result;
  if (v8 <= v4)
  {
LABEL_17:
    v22 = *(unsigned int *)(v3 + 12);
    v23 = *a2;
    *a2 = 0;
    *(_QWORD *)(v9 + 8 * v22) = v23;
    *(_DWORD *)(v3 + 12) = v22 + 1;
    return 1;
  }
  if (!(v8 >> 29))
  {
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v17;
    if ((_DWORD)v5)
    {
      v18 = 8 * v5;
      v19 = (const void **)v9;
      do
      {
        v20 = *v19;
        *v19 = 0;
        *v17 = v20;
        v21 = *v19;
        *v19 = 0;
        if (v21)
          CFRelease(v21);
        ++v17;
        ++v19;
        v18 -= 8;
      }
      while (v18);
      v17 = *(_QWORD **)v3;
    }
    if (v9)
    {
      if (v17 == (_QWORD *)v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
      v9 = *(_QWORD *)v3;
    }
    else
    {
      v9 = (unint64_t)v17;
    }
    goto LABEL_17;
  }
  __break(0xC471u);
  return result;
}

void JSC::JSCallbackObjectData::JSPrivatePropertyMap::visitChildren<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD *v20;
  int v21;

  v10 = (unsigned __int8 *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)(a1 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 8);
LABEL_5:
  v12 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v13 = *((unsigned int *)v12 - 1);
    v14 = &v12[2 * v13];
    if (*((_DWORD *)v12 - 3))
    {
      v15 = v12;
      if ((_DWORD)v13)
      {
        v16 = 16 * v13;
        v15 = v12;
        while ((unint64_t)(*v15 + 1) <= 1)
        {
          v15 += 2;
          v16 -= 16;
          if (!v16)
          {
            v15 = v14;
            break;
          }
        }
      }
      if (v12)
        goto LABEL_13;
      goto LABEL_17;
    }
    v15 = &v12[2 * v13];
  }
  else
  {
    v15 = 0;
    v13 = 0;
  }
  v14 = &v12[2 * v13];
  if (v12)
  {
LABEL_13:
    v17 = &v12[2 * *((unsigned int *)v12 - 1)];
    goto LABEL_18;
  }
LABEL_17:
  v17 = 0;
LABEL_18:
  while (v15 != v17)
  {
    v18 = v15[1];
    if (v18)
      v19 = (v18 & 0xFFFE000000000002) == 0;
    else
      v19 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v20 = v15 + 2;
    v15 = v14;
    if (v20 != v14)
    {
      v15 = v20;
      while ((unint64_t)(*v15 + 1) <= 1)
      {
        v15 += 2;
        if (v15 == v14)
        {
          v15 = v14;
          break;
        }
      }
    }
  }
  v21 = __ldxr(v10);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, v10))
LABEL_35:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

void sub_197F0AF5C(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void JSC::JSCallbackObjectData::JSPrivatePropertyMap::visitChildren<JSC::SlotVisitor>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  int v20;
  _QWORD *v21;
  int v22;

  v10 = (unsigned __int8 *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)(a1 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 8);
LABEL_5:
  v12 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v13 = *((unsigned int *)v12 - 1);
    v14 = &v12[2 * v13];
    if (*((_DWORD *)v12 - 3))
    {
      v15 = *(_QWORD **)a1;
      if ((_DWORD)v13)
      {
        v16 = 16 * v13;
        v15 = *(_QWORD **)a1;
        while ((unint64_t)(*v15 + 1) <= 1)
        {
          v15 += 2;
          v16 -= 16;
          if (!v16)
          {
            v15 = v14;
            break;
          }
        }
      }
      if (v12)
        goto LABEL_13;
      goto LABEL_17;
    }
    v15 = &v12[2 * v13];
  }
  else
  {
    v15 = 0;
    v13 = 0;
  }
  v14 = &v12[2 * v13];
  if (v12)
  {
LABEL_13:
    v17 = &v12[2 * *((unsigned int *)v12 - 1)];
    goto LABEL_18;
  }
LABEL_17:
  v17 = 0;
LABEL_18:
  while (v15 != v17)
  {
    v18 = v15[1];
    if (v18)
      v19 = (v18 & 0xFFFE000000000002) == 0;
    else
      v19 = 0;
    if (!v19)
      goto LABEL_29;
    if ((v18 & 8) != 0)
    {
      if ((*(_BYTE *)(v18 - 79) & 1) == 0)
        goto LABEL_37;
    }
    else
    {
      v20 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != v20)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), v20, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) == 0)
      {
LABEL_37:
        JSC::SlotVisitor::appendSlow(a2, v18, 0, a4, a5, a6, a7, a8);
        goto LABEL_29;
      }
    }
    if (*(_QWORD *)(a2 + 168))
      goto LABEL_37;
LABEL_29:
    v21 = v15 + 2;
    v15 = v14;
    if (v21 != v14)
    {
      v15 = v21;
      while ((unint64_t)(*v15 + 1) <= 1)
      {
        v15 += 2;
        if (v15 == v14)
        {
          v15 = v14;
          break;
        }
      }
    }
  }
  v22 = __ldxr(v10);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, v10))
LABEL_42:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

void sub_197F0B180(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;

  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
  goto LABEL_6;
}

void JSC::JSCallbackObjectData::~JSCallbackObjectData(JSC::JSCallbackObjectData *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl ***v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  OpaqueJSClass *v25;

  v9 = (unsigned int *)*((_QWORD *)this + 1);
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    v25 = (OpaqueJSClass *)v9;
    WTF::ThreadSafeRefCounted<OpaqueJSClass,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v25, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = (WTF::StringImpl ***)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = *((unsigned int *)v13 - 1);
      if ((_DWORD)v14)
      {
        v15 = *v12;
        do
        {
          v16 = *v15;
          if (*v15 != (WTF::StringImpl *)-1)
          {
            *v15 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
              {
                WTF::StringImpl::~StringImpl(v16, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
              }
              else
              {
                *(_DWORD *)v16 -= 2;
              }
            }
          }
          v15 += 2;
          --v14;
        }
        while (v14);
      }
      WTF::fastFree((unint64_t)(v13 - 2), a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 0x15)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 20;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(const void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 0x15)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 20;
    goto LABEL_11;
  }
  if (!(v5 >> 29))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(v6 + 16) != v7 && v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::tryMakeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, int **a3@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  _BYTE *v9;
  int *v10;
  _BYTE *v11;
  _DWORD *v12;

  v5 = (_BYTE *)*result;
  v4 = result[1];
  if (v4)
  {
    v6 = v4 - 1;
    if ((unint64_t)(v4 - 1) >> 31)
    {
LABEL_21:
      __break(0xC471u);
      JUMPOUT(0x197F0B56CLL);
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 >> 31)
    goto LABEL_21;
  v8 = (v6 + v7);
  if (__OFADD__((_DWORD)v6, (_DWORD)v7))
    goto LABEL_17;
  if (!(_DWORD)v8)
  {
    v10 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_16;
  }
  if ((v8 & 0x80000000) != 0)
  {
LABEL_17:
    v10 = 0;
  }
  else
  {
    v9 = *(_BYTE **)a2;
    result = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)(v8 + 20), &v12);
    v10 = v12;
    if (v12)
    {
      v11 = v12 + 5;
      *v12 = 2;
      v10[1] = v8;
      *((_QWORD *)v10 + 1) = v10 + 5;
      v10[4] = 4;
      if ((_DWORD)v6 == 1)
      {
        *v11 = *v5;
      }
      else if ((_DWORD)v6)
      {
        memcpy(v10 + 5, v5, v6);
      }
      result = &v11[v6];
      if ((_DWORD)v7 == 1)
      {
        *(_BYTE *)result = *v9;
      }
      else if ((_DWORD)v7)
      {
        result = memcpy(result, v9, v7);
      }
    }
  }
LABEL_16:
  *a3 = v10;
  return result;
}

uint64_t WTF::Vector<JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>>(uint64_t a1, unint64_t a2)
{
  uint64_t **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::HandleSet *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  JSC::HandleSet *v27;
  uint64_t v28;
  uint64_t **v29;

  v3 = (uint64_t **)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(_QWORD *)a1;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = 0;
  if (*v3)
  {
    v13 = *(JSC::HandleSet **)(((unint64_t)(*v3 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v14 = *((_QWORD *)v13 + 5);
    if (!v14)
    {
      v28 = v12;
      v29 = v3;
      v26 = v11;
      v27 = *(JSC::HandleSet **)(((unint64_t)(*v3 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      JSC::HandleSet::grow(v13, v4, v5, v6, v7, v8, v9, v10);
      v13 = v27;
      v12 = v28;
      v11 = v26;
      v3 = v29;
      v14 = *((_QWORD *)v27 + 5);
    }
    v15 = 0;
    *((_QWORD *)v13 + 5) = *(_QWORD *)v14;
    *(_QWORD *)(v14 + 16) = 0;
    v16 = (uint64_t *)(v14 + 16);
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v12 + 8 * v11) = v14 + 16;
    if (*v3)
      v15 = **v3;
    v17 = *v16;
    v19 = (v15 & 0xFFFE000000000002) == 0 && v15 != 0;
    v20 = (v17 & 0xFFFE000000000002) == 0;
    if (!v17)
      v20 = 0;
    if (v20 != v19)
    {
      if ((v19 & 1) != 0)
      {
        v21 = *(unint64_t **)((v14 & 0xFFFFFFFFFFFFF000) + 0x10);
        v22 = v21[3];
        v21 += 3;
        *(_QWORD *)v14 = v22;
        *(_QWORD *)(v14 + 8) = v21;
        *v21 = v14;
        *(_QWORD *)(v22 + 8) = v14;
      }
      else
      {
        v25 = *(_QWORD *)v14;
        v24 = *(_QWORD **)(v14 + 8);
        *v24 = *(_QWORD *)v14;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)v14 = 0;
        *(_QWORD *)(v14 + 8) = 0;
        v16 = *(uint64_t **)(v12 + 8 * v11);
      }
    }
    *v16 = v15;
    LODWORD(v11) = *(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)(a1 + 12) = v11 + 1;
  return 1;
}

uint64_t WTF::Vector<JSContainerConvertor::Task,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSContainerConvertor::Task,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0xAAAAAAB)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 24 * v8;
    v11 = (void *)WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 24 * v9);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSContainerConvertor::Task,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  const void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(const void **)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 24 * v4;
      v9 = (void *)WTF::fastMalloc((WTF *)(24 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v9;
      memcpy(v9, v6, 24 * v7);
      if (v6)
      {
        if (*(const void **)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void WTF::HashTable<objc_object *,WTF::KeyValuePair<objc_object *,OpaqueJSValue const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_object *,OpaqueJSValue const*>>,WTF::DefaultHash<objc_object *>,WTF::HashMap<objc_object *,OpaqueJSValue const*,WTF::DefaultHash<objc_object *>,WTF::HashTraits<objc_object *>,WTF::HashTraits<OpaqueJSValue const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_object *>>::expand(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 *v22;

  v9 = *a1;
  if (!*a1)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_3;
  }
  v10 = *(_DWORD *)(v9 - 4);
  v11 = *(_DWORD *)(v9 - 12);
  if (!v10)
  {
LABEL_3:
    v12 = 8;
    goto LABEL_4;
  }
  v12 = v10 << (6 * v11 >= 2 * v10);
LABEL_4:
  v13 = WTF::fastZeroedMalloc(16 * v12 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v12;
  *(_DWORD *)(*a1 - 8) = v12 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if (v10)
  {
    v21 = v10;
    v22 = (__n128 *)v9;
    do
    {
      if (v22->n128_u64[0] + 1 >= 2)
        WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::reinsert(*a1, v22);
      ++v22;
      --v21;
    }
    while (v21);
    goto LABEL_13;
  }
  if (v9)
LABEL_13:
    WTF::fastFree(v9 - 16, v14, v15, v16, v17, v18, v19, v20);
}

#error "197F0B9B0: too big function (funcsize=0)"

void JSC::dumpWasm(uint64_t a1, int a2, unsigned __int8 *a3, int8x8_t a4)
{
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  int v162;
  int v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  int v169;
  int v170;
  unsigned int v171;
  int v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  unsigned int v181;
  int v182;
  unsigned int v183;
  int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  int v188;
  uint64_t v189;
  int v190;
  unsigned int v191;
  int v192;
  int v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  WTF::PrintStream *v198;
  const char *v199;
  int v200;
  int v201;
  int v202;
  int v203;
  unsigned int v204;
  int v205;
  int v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  WTF::PrintStream *v211;
  uint64_t v212;
  WTF::PrintStream *v213;
  WTF::PrintStream *v214;
  const char *v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  WTF *v223;
  uint64_t v224;
  WTF::PrintStream *v225;
  uint64_t v226;
  WTF::PrintStream *v227;
  uint64_t v228;
  WTF::PrintStream *v229;
  uint64_t v230;
  WTF::PrintStream *v231;
  uint64_t v232;
  WTF::PrintStream *v233;
  uint64_t v234;
  WTF::PrintStream *v235;
  uint64_t v236;
  WTF::PrintStream *v237;
  uint64_t v238;
  WTF::PrintStream *v239;
  uint64_t v240;
  WTF::PrintStream *v241;
  uint64_t v242;
  WTF::PrintStream *v243;
  uint64_t v244;
  WTF::PrintStream *v245;
  uint64_t v246;
  WTF::PrintStream *v247;
  uint64_t v248;
  WTF::PrintStream *v249;
  unsigned int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  unsigned int v255;
  int v256;
  int v257;
  unsigned int v258;
  int v259;
  int8x16_t v260;
  unsigned int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  unsigned int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  unsigned int v276;
  int v277;
  int v278;
  unsigned int v279;
  int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  int v284;
  unsigned int v285;
  int v286;
  unsigned int v287;
  int v288;
  unsigned int v289;
  int v290;
  unsigned int v291;
  int v292;
  unsigned int v293;
  int v294;
  unsigned int v295;
  int v296;
  unsigned int v297;
  int v298;
  unsigned int v299;
  int v300;
  unsigned int v301;
  int v302;
  unsigned int v303;
  int v304;
  unsigned int v305;
  int v306;
  unsigned int v307;
  int v308;
  unsigned int v309;
  int v310;
  unsigned int v311;
  int v312;
  unsigned int v313;
  int v314;
  unsigned int v315;
  int v316;
  unsigned int v317;
  int v318;
  unsigned int v319;
  int v320;
  unsigned int v321;
  int v322;
  unsigned int v323;
  int v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  int v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int v336;
  int v337;
  int v338;
  unsigned int v339;
  uint64_t v340;
  int v341;
  int v342;
  uint64_t v343;
  int v344;
  int v345;
  int v346;
  unsigned int v347;
  int v348;
  unsigned int v349;
  int v350;
  int v351;
  unsigned int v352;
  unsigned int v353;
  unsigned int v354;
  int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  int v359;
  unsigned int v360;
  int v361;
  unsigned int v362;
  unsigned int v363;
  int v364;
  unsigned int v365;
  int v366;
  int v367;
  int v368;
  unsigned int v369;
  int v370;
  int v371;
  unsigned int v372;
  int v373;
  unsigned int v374;
  int v375;
  int v376;
  int v377;
  int v378;
  BOOL v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  const char *v384;
  int v385;
  int v386;
  int v387;
  BOOL v388;
  int v389;
  uint64_t v390;
  int v391;
  int v392;
  int v393;
  BOOL v394;
  int v395;
  uint64_t v396;
  int v397;
  int v398;
  int v399;
  BOOL v400;
  int v401;
  uint64_t v402;
  int v403;
  int v404;
  BOOL v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  const char *v409;
  int v410;
  int v411;
  BOOL v412;
  int v413;
  uint64_t v414;
  int v415;
  int v416;
  int v417;
  BOOL v418;
  int v419;
  uint64_t v420;
  int v421;
  int v422;
  int v423;
  BOOL v424;
  int v425;
  uint64_t v426;
  int v427;
  int v428;
  int v429;
  BOOL v430;
  int v431;
  uint64_t v432;
  int v433;
  int v434;
  BOOL v435;
  int v436;
  uint64_t v437;
  int v438;
  int v439;
  BOOL v440;
  int v441;
  uint64_t v442;
  int v443;
  int v444;
  BOOL v445;
  int v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  WTF::PrintStream *v450;
  uint64_t v451;
  WTF::PrintStream *v452;
  WTF::PrintStream *v453;
  const char *v454;
  void *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  WTF *v462;
  uint64_t v463;
  WTF::PrintStream *v464;
  uint64_t v465;
  WTF::PrintStream *v466;
  const char *v467;
  int v468;
  int v469;
  int v470;
  BOOL v471;
  int v472;
  uint64_t v473;
  int v474;
  int v475;
  int v476;
  BOOL v477;
  int v478;
  uint64_t v479;
  int v480;
  int v481;
  int v482;
  BOOL v483;
  int v484;
  uint64_t v485;
  int v486;
  int v487;
  int v488;
  BOOL v489;
  int v490;
  uint64_t v491;
  int v492;
  int v493;
  int v494;
  BOOL v495;
  int v496;
  uint64_t v497;
  int v498;
  int v499;
  int v500;
  BOOL v501;
  int v502;
  uint64_t v503;
  int v504;
  int v505;
  int v506;
  BOOL v507;
  int v508;
  uint64_t v509;
  int v510;
  int v511;
  int v512;
  BOOL v513;
  int v514;
  uint64_t v515;
  int v516;
  int v517;
  int v518;
  BOOL v519;
  int v520;
  uint64_t v521;
  int v522;
  int v523;
  int v524;
  BOOL v525;
  int v526;
  uint64_t v527;
  int v528;
  int v529;
  int v530;
  BOOL v531;
  int v532;
  uint64_t v533;
  int v534;
  int v535;
  int v536;
  BOOL v537;
  int v538;
  uint64_t v539;
  int v540;
  int v541;
  int v542;
  BOOL v543;
  int v544;
  uint64_t v545;
  int v546;
  int v547;
  int v548;
  BOOL v549;
  int v550;
  uint64_t v551;
  int v552;
  int v553;
  int v554;
  BOOL v555;
  int v556;
  uint64_t v557;
  int v558;
  int v559;
  int v560;
  BOOL v561;
  int v562;
  uint64_t v563;
  int v564;
  int v565;
  int v566;
  BOOL v567;
  int v568;
  uint64_t v569;
  int v570;
  int v571;
  int v572;
  BOOL v573;
  int v574;
  uint64_t v575;
  int v576;
  int v577;
  int v578;
  BOOL v579;
  int v580;
  uint64_t v581;
  int v582;
  int v583;
  int v584;
  BOOL v585;
  int v586;
  uint64_t v587;
  int v588;
  int v589;
  BOOL v590;
  int v591;
  uint64_t v592;
  int v593;
  int v594;
  BOOL v595;
  int v596;
  uint64_t v597;
  int v598;
  int v599;
  int v600;
  BOOL v601;
  int v602;
  uint64_t v603;
  int v604;
  int v605;
  int v606;
  BOOL v607;
  int v608;
  uint64_t v609;
  int v610;
  int v611;
  int v612;
  BOOL v613;
  int v614;
  uint64_t v615;
  int v616;
  int v617;
  int v618;
  BOOL v619;
  int v620;
  uint64_t v621;
  int v622;
  int v623;
  int v624;
  BOOL v625;
  int v626;
  uint64_t v627;
  int v628;
  int v629;
  int v630;
  BOOL v631;
  int v632;
  uint64_t v633;
  int v634;
  int v635;
  int v636;
  BOOL v637;
  int v638;
  uint64_t v639;
  int v640;
  int v641;
  int v642;
  BOOL v643;
  int v644;
  uint64_t v645;
  int v646;
  int v647;
  int v648;
  BOOL v649;
  int v650;
  uint64_t v651;
  int v652;
  int v653;
  int v654;
  BOOL v655;
  int v656;
  uint64_t v657;
  int v658;
  int v659;
  int v660;
  BOOL v661;
  int v662;
  uint64_t v663;
  int v664;
  int v665;
  int v666;
  BOOL v667;
  int v668;
  uint64_t v669;
  int v670;
  int v671;
  int v672;
  BOOL v673;
  int v674;
  uint64_t v675;
  int v676;
  int v677;
  int v678;
  BOOL v679;
  int v680;
  uint64_t v681;
  int v682;
  int v683;
  int v684;
  BOOL v685;
  int v686;
  uint64_t v687;
  int v688;
  int v689;
  int v690;
  BOOL v691;
  int v692;
  uint64_t v693;
  int v694;
  int v695;
  int v696;
  BOOL v697;
  int v698;
  uint64_t v699;
  int v700;
  int v701;
  int v702;
  BOOL v703;
  int v704;
  uint64_t v705;
  int v706;
  int v707;
  int v708;
  BOOL v709;
  int v710;
  uint64_t v711;
  int v712;
  int v713;
  int v714;
  BOOL v715;
  int v716;
  uint64_t v717;
  int v718;
  int v719;
  int v720;
  BOOL v721;
  int v722;
  uint64_t v723;
  int v724;
  int v725;
  int v726;
  BOOL v727;
  int v728;
  uint64_t v729;
  int v730;
  int v731;
  BOOL v732;
  int v733;
  uint64_t v734;
  int v735;
  int v736;
  BOOL v737;
  int v738;
  uint64_t v739;
  int v740;
  int v741;
  BOOL v742;
  int v743;
  uint64_t v744;
  int v745;
  int v746;
  int v747;
  BOOL v748;
  int v749;
  uint64_t v750;
  int v751;
  int v752;
  int v753;
  BOOL v754;
  int v755;
  uint64_t v756;
  int v757;
  int v758;
  int v759;
  BOOL v760;
  int v761;
  uint64_t v762;
  int v763;
  int v764;
  int v765;
  BOOL v766;
  int v767;
  uint64_t v768;
  int v769;
  int v770;
  int v771;
  BOOL v772;
  int v773;
  uint64_t v774;
  int v775;
  int v776;
  int v777;
  BOOL v778;
  int v779;
  uint64_t v780;
  int v781;
  int v782;
  BOOL v783;
  int v784;
  uint64_t v785;
  int v786;
  int v787;
  BOOL v788;
  int v789;
  uint64_t v790;
  int v791;
  int v792;
  int v793;
  BOOL v794;
  int v795;
  uint64_t v796;
  int v797;
  int v798;
  BOOL v799;
  int v800;
  uint64_t v801;
  int v802;
  int v803;
  BOOL v804;
  int v805;
  uint64_t v806;
  int v807;
  int v808;
  BOOL v809;
  int v810;
  uint64_t v811;
  int v812;
  int v813;
  BOOL v814;
  int v815;
  uint64_t v816;
  int v817;
  int v818;
  int v819;
  BOOL v820;
  int v821;
  uint64_t v822;
  int v823;
  int v824;
  int v825;
  BOOL v826;
  int v827;
  uint64_t v828;
  int v829;
  int v830;
  int v831;
  BOOL v832;
  int v833;
  uint64_t v834;
  int v835;
  int v836;
  int v837;
  BOOL v838;
  int v839;
  uint64_t v840;
  int v841;
  int v842;
  int v843;
  BOOL v844;
  int v845;
  uint64_t v846;
  int v847;
  int v848;
  int v849;
  BOOL v850;
  int v851;
  uint64_t v852;
  int v853;
  int v854;
  int v855;
  BOOL v856;
  int v857;
  uint64_t v858;
  int v859;
  int v860;
  int v861;
  BOOL v862;
  int v863;
  uint64_t v864;
  int v865;
  int v866;
  int v867;
  BOOL v868;
  int v869;
  uint64_t v870;
  int v871;
  int v872;
  int v873;
  BOOL v874;
  int v875;
  uint64_t v876;
  int v877;
  int v878;
  int v879;
  BOOL v880;
  int v881;
  uint64_t v882;
  int v883;
  int v884;
  int v885;
  BOOL v886;
  int v887;
  uint64_t v888;
  int v889;
  int v890;
  BOOL v891;
  int v892;
  uint64_t v893;
  int v894;
  int v895;
  BOOL v896;
  int v897;
  uint64_t v898;
  int v899;
  int v900;
  int v901;
  BOOL v902;
  int v903;
  uint64_t v904;
  int v905;
  int v906;
  BOOL v907;
  int v908;
  uint64_t v909;
  int v910;
  int v911;
  BOOL v912;
  int v913;
  uint64_t v914;
  int v915;
  int v916;
  BOOL v917;
  int v918;
  uint64_t v919;
  int v920;
  int v921;
  BOOL v922;
  int v923;
  uint64_t v924;
  int v925;
  int v926;
  BOOL v927;
  int v928;
  uint64_t v929;
  int v930;
  int v931;
  int v932;
  BOOL v933;
  int v934;
  uint64_t v935;
  int v936;
  int v937;
  int v938;
  BOOL v939;
  int v940;
  uint64_t v941;
  int v942;
  int v943;
  int v944;
  BOOL v945;
  int v946;
  uint64_t v947;
  int v948;
  int v949;
  int v950;
  BOOL v951;
  int v952;
  uint64_t v953;
  int v954;
  int v955;
  int v956;
  BOOL v957;
  int v958;
  uint64_t v959;
  int v960;
  int v961;
  int v962;
  BOOL v963;
  int v964;
  uint64_t v965;
  int v966;
  int v967;
  BOOL v968;
  int v969;
  uint64_t v970;
  int v971;
  int v972;
  BOOL v973;
  int v974;
  uint64_t v975;
  int v976;
  int v977;
  BOOL v978;
  int v979;
  uint64_t v980;
  int v981;
  int v982;
  BOOL v983;
  int v984;
  uint64_t v985;
  int v986;
  int v987;
  BOOL v988;
  int v989;
  uint64_t v990;
  int v991;
  int v992;
  BOOL v993;
  int v994;
  uint64_t v995;
  int v996;
  int v997;
  BOOL v998;
  int v999;
  uint64_t v1000;
  int v1001;
  int v1002;
  BOOL v1003;
  int v1004;
  uint64_t v1005;
  int v1006;
  int v1007;
  BOOL v1008;
  int v1009;
  uint64_t v1010;
  int v1011;
  int v1012;
  BOOL v1013;
  int v1014;
  uint64_t v1015;
  int v1016;
  int v1017;
  BOOL v1018;
  int v1019;
  uint64_t v1020;
  int v1021;
  int v1022;
  BOOL v1023;
  int v1024;
  uint64_t v1025;
  int v1026;
  int v1027;
  BOOL v1028;
  int v1029;
  uint64_t v1030;
  int v1031;
  int v1032;
  BOOL v1033;
  int v1034;
  uint64_t v1035;
  int v1036;
  int v1037;
  BOOL v1038;
  int v1039;
  uint64_t v1040;
  int v1041;
  int v1042;
  BOOL v1043;
  int v1044;
  uint64_t v1045;
  int v1046;
  int v1047;
  BOOL v1048;
  int v1049;
  uint64_t v1050;
  int v1051;
  int v1052;
  BOOL v1053;
  int v1054;
  uint64_t v1055;
  int v1056;
  int v1057;
  BOOL v1058;
  int v1059;
  uint64_t v1060;
  int v1061;
  int v1062;
  BOOL v1063;
  int v1064;
  uint64_t v1065;
  int v1066;
  int v1067;
  BOOL v1068;
  int v1069;
  uint64_t v1070;
  int v1071;
  int v1072;
  BOOL v1073;
  int v1074;
  uint64_t v1075;
  int v1076;
  int v1077;
  BOOL v1078;
  int v1079;
  uint64_t v1080;
  int v1081;
  int v1082;
  BOOL v1083;
  int v1084;
  uint64_t v1085;
  int v1086;
  int v1087;
  BOOL v1088;
  int v1089;
  uint64_t v1090;
  int v1091;
  int v1092;
  BOOL v1093;
  int v1094;
  uint64_t v1095;
  int v1096;
  int v1097;
  BOOL v1098;
  int v1099;
  uint64_t v1100;
  int v1101;
  int v1102;
  BOOL v1103;
  int v1104;
  uint64_t v1105;
  int v1106;
  int v1107;
  BOOL v1108;
  int v1109;
  uint64_t v1110;
  int v1111;
  int v1112;
  BOOL v1113;
  int v1114;
  uint64_t v1115;
  int v1116;
  int v1117;
  BOOL v1118;
  int v1119;
  uint64_t v1120;
  int v1121;
  int v1122;
  BOOL v1123;
  int v1124;
  uint64_t v1125;
  int v1126;
  int v1127;
  BOOL v1128;
  int v1129;
  uint64_t v1130;
  int v1131;
  int v1132;
  BOOL v1133;
  int v1134;
  uint64_t v1135;
  int v1136;
  int v1137;
  BOOL v1138;
  int v1139;
  uint64_t v1140;
  int v1141;
  int v1142;
  BOOL v1143;
  int v1144;
  uint64_t v1145;
  int v1146;
  int v1147;
  BOOL v1148;
  int v1149;
  uint64_t v1150;
  int v1151;
  int v1152;
  BOOL v1153;
  int v1154;
  uint64_t v1155;
  uint64_t v1156;
  WTF::PrintStream *v1157;
  uint64_t v1158;
  WTF::PrintStream *v1159;
  WTF::PrintStream *v1160;
  const char *v1161;
  void *v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  WTF *v1169;
  uint64_t v1170;
  WTF::PrintStream *v1171;
  int v1172;
  int v1173;
  BOOL v1174;
  int v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  WTF::PrintStream *v1179;
  uint64_t v1180;
  WTF::PrintStream *v1181;
  WTF::PrintStream *v1182;
  const char *v1183;
  void *v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  WTF *v1191;
  uint64_t v1192;
  WTF::PrintStream *v1193;
  int v1194;
  int v1195;
  uint64_t v1196;
  uint64_t v1197;
  const char *v1198;
  int v1199;
  int v1200;
  uint64_t v1201;
  uint64_t v1202;
  WTF::PrintStream *v1203;
  uint64_t v1204;
  WTF::PrintStream *v1205;
  WTF::PrintStream *v1206;
  const char *v1207;
  void *v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  WTF *v1215;
  uint64_t v1216;
  WTF::PrintStream *v1217;
  uint64_t v1218;
  WTF::PrintStream *v1219;
  uint64_t v1220;
  WTF::PrintStream *v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  WTF::PrintStream *v1225;
  uint64_t v1226;
  WTF::PrintStream *v1227;
  int v1228;
  int v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  WTF::PrintStream *v1233;
  uint64_t v1234;
  WTF::PrintStream *v1235;
  WTF::PrintStream *v1236;
  const char *v1237;
  void *v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  WTF *v1245;
  uint64_t v1246;
  WTF::PrintStream *v1247;
  uint64_t v1248;
  WTF::PrintStream *v1249;
  const char *v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  WTF::PrintStream *v1254;
  uint64_t v1255;
  WTF::PrintStream *v1256;
  uint64_t v1257;
  WTF::PrintStream *v1258;
  uint64_t v1259;
  WTF::PrintStream *v1260;
  uint64_t v1261;
  WTF::PrintStream *v1262;
  uint64_t v1263;
  WTF::PrintStream *v1264;
  uint64_t v1265;
  WTF::PrintStream *v1266;
  uint64_t v1267;
  WTF::PrintStream *v1268;
  uint64_t v1269;
  WTF::PrintStream *v1270;
  const char *v1271;
  int v1272;
  int v1273;
  BOOL v1274;
  int v1275;
  uint64_t v1276;
  uint64_t v1277;
  const char *v1278;
  int v1279;
  int v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  WTF::PrintStream *v1284;
  uint64_t v1285;
  WTF::PrintStream *v1286;
  WTF::PrintStream *v1287;
  const char *v1288;
  void *v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  WTF *v1296;
  uint64_t v1297;
  WTF::PrintStream *v1298;
  int v1299;
  int v1300;
  BOOL v1301;
  int v1302;
  uint64_t v1303;
  uint64_t v1304;
  WTF::PrintStream *v1305;
  uint64_t v1306;
  WTF::PrintStream *v1307;
  WTF::PrintStream *v1308;
  const char *v1309;
  void *v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  WTF *v1317;
  uint64_t v1318;
  WTF::PrintStream *v1319;
  int v1320;
  int v1321;
  uint64_t v1322;
  uint64_t v1323;
  const char *v1324;
  int v1325;
  BOOL v1326;
  uint64_t v1327;
  uint64_t v1328;
  const char *v1329;
  int v1330;
  BOOL v1331;
  uint64_t v1332;
  int v1333;
  int v1334;
  uint64_t v1335;
  uint64_t v1336;
  WTF::PrintStream *v1337;
  uint64_t v1338;
  WTF::PrintStream *v1339;
  WTF::PrintStream *v1340;
  const char *v1341;
  void *v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  WTF *v1349;
  uint64_t v1350;
  WTF::PrintStream *v1351;
  int v1352;
  BOOL v1353;
  uint64_t v1354;
  int v1355;
  BOOL v1356;
  uint64_t v1357;
  uint64_t v1358;
  WTF::PrintStream *v1359;
  uint64_t v1360;
  WTF::PrintStream *v1361;
  uint64_t v1362;
  WTF::PrintStream *v1363;
  uint64_t v1364;
  WTF::PrintStream *v1365;
  uint64_t v1366;
  WTF::PrintStream *v1367;
  const char *v1368;
  int v1369;
  int v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  WTF::PrintStream *v1375;
  uint64_t v1376;
  WTF::PrintStream *v1377;
  WTF::PrintStream *v1378;
  const char *v1379;
  void *v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  WTF *v1387;
  uint64_t v1388;
  WTF::PrintStream *v1389;
  uint64_t v1390;
  WTF::PrintStream *v1391;
  const char *v1392;
  int v1393;
  int v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  WTF::PrintStream *v1398;
  uint64_t v1399;
  WTF::PrintStream *v1400;
  WTF::PrintStream *v1401;
  const char *v1402;
  void *v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  WTF *v1410;
  uint64_t v1411;
  WTF::PrintStream *v1412;
  int v1413;
  int v1414;
  int v1415;
  int v1416;
  int v1417;
  int v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  WTF::PrintStream *v1422;
  uint64_t v1423;
  WTF::PrintStream *v1424;
  WTF::PrintStream *v1425;
  const char *v1426;
  void *v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  WTF *v1434;
  uint64_t v1435;
  WTF::PrintStream *v1436;
  uint64_t v1437;
  WTF::PrintStream *v1438;
  uint64_t v1439;
  WTF::PrintStream *v1440;
  WTF::PrintStream *v1441;
  const char *v1442;
  void *v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  WTF *v1450;
  uint64_t v1451;
  WTF::PrintStream *v1452;
  uint64_t v1453;
  WTF::PrintStream *v1454;
  uint64_t v1455;
  WTF::PrintStream *v1456;
  WTF::PrintStream *v1457;
  const char *v1458;
  void *v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  WTF *v1466;
  uint64_t v1467;
  WTF::PrintStream *v1468;
  uint64_t v1469;
  WTF::PrintStream *v1470;
  uint64_t v1471;
  WTF::PrintStream *v1472;
  uint64_t v1473;
  WTF::PrintStream *v1474;
  WTF::PrintStream *v1475;
  uint64_t v1476;
  WTF::PrintStream *v1477;
  const char *v1478;
  int v1479;
  int v1480;
  int v1481;
  int v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  WTF::PrintStream *v1487;
  const char *v1488;
  int v1489;
  int v1490;
  int v1491;
  int v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  WTF::PrintStream *v1496;
  WTF::PrintStream *v1497;
  const char *v1498;
  void *v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  WTF *v1506;
  uint64_t v1507;
  WTF::PrintStream *v1508;
  uint64_t v1509;
  WTF::PrintStream *v1510;
  uint64_t v1511;
  WTF::PrintStream *v1512;
  WTF::PrintStream *v1513;
  const char *v1514;
  void *v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  WTF *v1522;
  uint64_t v1523;
  WTF::PrintStream *v1524;
  uint64_t v1525;
  WTF::PrintStream *v1526;
  WTF::PrintStream *v1527;
  const char *v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  WTF::PrintStream *v1532;
  uint64_t v1533;
  WTF::PrintStream *v1534;
  uint64_t v1535;
  WTF::PrintStream *v1536;
  uint64_t v1537;
  WTF::PrintStream *v1538;
  uint64_t v1539;
  WTF::PrintStream *v1540;
  uint64_t v1541;
  WTF::PrintStream *v1542;
  uint64_t v1543;
  WTF::PrintStream *v1544;
  uint64_t v1545;
  WTF::PrintStream *v1546;
  uint64_t v1547;
  WTF::PrintStream *v1548;
  uint64_t v1549;
  WTF::PrintStream *v1550;
  uint64_t v1551;
  WTF::PrintStream *v1552;
  uint64_t v1553;
  WTF::PrintStream *v1554;
  int v1555;
  int v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  WTF::PrintStream *v1560;
  uint64_t v1561;
  WTF::PrintStream *v1562;
  WTF::PrintStream *v1563;
  const char *v1564;
  void *v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  WTF *v1572;
  uint64_t v1573;
  WTF::PrintStream *v1574;
  uint64_t v1575;
  WTF::PrintStream *v1576;
  uint64_t v1577;
  WTF::PrintStream *v1578;
  uint64_t v1579;
  WTF::PrintStream *v1580;
  uint64_t v1581;
  WTF::PrintStream *v1582;
  uint64_t v1583;
  WTF::PrintStream *v1584;
  uint64_t v1585;
  WTF::PrintStream *v1586;
  uint64_t v1587;
  WTF::PrintStream *v1588;
  uint64_t v1589;
  WTF::PrintStream *v1590;
  uint64_t v1591;
  WTF::PrintStream *v1592;
  uint64_t v1593;
  WTF::PrintStream *v1594;
  uint64_t v1595;
  WTF::PrintStream *v1596;
  uint64_t v1597;
  WTF::PrintStream *v1598;
  uint64_t v1599;
  WTF::PrintStream *v1600;
  uint64_t v1601;
  WTF::PrintStream *v1602;
  uint64_t v1603;
  WTF::PrintStream *v1604;
  uint64_t v1605;
  WTF::PrintStream *v1606;
  uint64_t v1607;
  WTF::PrintStream *v1608;
  uint64_t v1609;
  WTF::PrintStream *v1610;
  uint64_t v1611;
  WTF::PrintStream *v1612;
  int v1613;
  int v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  WTF::PrintStream *v1618;
  uint64_t v1619;
  WTF::PrintStream *v1620;
  WTF::PrintStream *v1621;
  const char *v1622;
  void *v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  WTF *v1630;
  uint64_t v1631;
  WTF::PrintStream *v1632;
  uint64_t v1633;
  WTF::PrintStream *v1634;
  uint64_t v1635;
  WTF::PrintStream *v1636;
  uint64_t v1637;
  WTF::PrintStream *v1638;
  uint64_t v1639;
  WTF::PrintStream *v1640;
  uint64_t v1641;
  WTF::PrintStream *v1642;
  uint64_t v1643;
  WTF::PrintStream *v1644;
  uint64_t v1645;
  WTF::PrintStream *v1646;
  uint64_t v1647;
  WTF::PrintStream *v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  WTF::PrintStream *v1652;
  uint64_t v1653;
  WTF::PrintStream *v1654;
  uint64_t v1655;
  WTF::PrintStream *v1656;
  uint64_t v1657;
  WTF::PrintStream *v1658;
  uint64_t v1659;
  WTF::PrintStream *v1660;
  uint64_t v1661;
  WTF::PrintStream *v1662;
  uint64_t v1663;
  WTF::PrintStream *v1664;
  uint64_t v1665;
  WTF::PrintStream *v1666;
  uint64_t v1667;
  WTF::PrintStream *v1668;
  int v1669;
  int v1670;
  BOOL v1671;
  int v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  WTF::PrintStream *v1676;
  uint64_t v1677;
  WTF::PrintStream *v1678;
  WTF::PrintStream *v1679;
  const char *v1680;
  void *v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  WTF *v1688;
  uint64_t v1689;
  WTF::PrintStream *v1690;
  int16x4_t v1691;
  int32x4_t v1692;
  int32x4_t v1693;
  int8x16_t v1694;
  int8x16_t v1695;
  int16x4_t v1696;
  int32x4_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  WTF::PrintStream *v1702;
  uint64_t v1703;
  WTF::PrintStream *v1704;
  WTF::PrintStream *v1705;
  const char *v1706;
  void *v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  WTF *v1714;
  uint64_t v1715;
  WTF::PrintStream *v1716;
  uint64_t v1717;
  WTF::PrintStream *v1718;
  uint64_t v1719;
  WTF::PrintStream *v1720;
  WTF::PrintStream *v1721;
  const char *v1722;
  void *v1723;
  uint64_t v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  WTF *v1730;
  unsigned __int32 v1731;
  uint64_t v1732;
  uint64_t v1733;
  WTF::PrintStream *v1734;
  uint64_t v1735;
  WTF::PrintStream *v1736;
  uint64_t v1737;
  WTF::PrintStream *v1738;
  WTF::PrintStream *v1739;
  const char *v1740;
  void *v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  WTF *v1748;
  uint64_t v1749;
  WTF::PrintStream *v1750;
  int v1751;
  int v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  const char *v1756;
  int v1757;
  int v1758;
  uint64_t v1759;
  int v1760;
  int v1761;
  uint64_t v1762;
  int v1763;
  int v1764;
  uint64_t v1765;
  int v1766;
  int v1767;
  uint64_t v1768;
  int v1769;
  int v1770;
  uint64_t v1771;
  int v1772;
  int v1773;
  uint64_t v1774;
  int v1775;
  int v1776;
  uint64_t v1777;
  int v1778;
  int v1779;
  uint64_t v1780;
  uint64_t v1781;
  WTF::PrintStream *v1782;
  uint64_t v1783;
  WTF::PrintStream *v1784;
  WTF::PrintStream *v1785;
  const char *v1786;
  void *v1787;
  uint64_t v1788;
  uint64_t v1789;
  uint64_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  WTF *v1794;
  uint64_t v1795;
  WTF::PrintStream *v1796;
  uint64_t v1797;
  WTF::PrintStream *v1798;
  const char *v1799;
  int v1800;
  int v1801;
  uint64_t v1802;
  uint64_t v1803;
  const char *v1804;
  int v1805;
  int v1806;
  uint64_t v1807;
  int v1808;
  int v1809;
  uint64_t v1810;
  int v1811;
  int v1812;
  uint64_t v1813;
  uint64_t v1814;
  WTF::PrintStream *v1815;
  uint64_t v1816;
  WTF::PrintStream *v1817;
  WTF::PrintStream *v1818;
  const char *v1819;
  void *v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  WTF *v1827;
  uint64_t v1828;
  WTF::PrintStream *v1829;
  uint64_t v1830;
  WTF::PrintStream *v1831;
  WTF::PrintStream *v1832;
  const char *v1833;
  void *v1834;
  uint64_t v1835;
  uint64_t v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  WTF *v1841;
  uint64_t v1842;
  WTF::PrintStream *v1843;
  int v1844;
  int v1845;
  BOOL v1846;
  int v1847;
  uint64_t v1848;
  uint64_t v1849;
  uint64_t v1850;
  const char *v1851;
  int v1852;
  int v1853;
  BOOL v1854;
  int v1855;
  uint64_t v1856;
  int v1857;
  int v1858;
  BOOL v1859;
  int v1860;
  uint64_t v1861;
  int v1862;
  int v1863;
  BOOL v1864;
  int v1865;
  uint64_t v1866;
  int v1867;
  int v1868;
  BOOL v1869;
  int v1870;
  uint64_t v1871;
  int v1872;
  int v1873;
  BOOL v1874;
  int v1875;
  uint64_t v1876;
  int v1877;
  int v1878;
  BOOL v1879;
  int v1880;
  uint64_t v1881;
  int v1882;
  int v1883;
  BOOL v1884;
  int v1885;
  uint64_t v1886;
  int v1887;
  int v1888;
  BOOL v1889;
  int v1890;
  uint64_t v1891;
  int v1892;
  int v1893;
  BOOL v1894;
  int v1895;
  uint64_t v1896;
  int v1897;
  int v1898;
  BOOL v1899;
  int v1900;
  uint64_t v1901;
  int v1902;
  int v1903;
  BOOL v1904;
  int v1905;
  uint64_t v1906;
  int v1907;
  int v1908;
  BOOL v1909;
  int v1910;
  uint64_t v1911;
  int v1912;
  int v1913;
  BOOL v1914;
  int v1915;
  uint64_t v1916;
  int v1917;
  int v1918;
  BOOL v1919;
  int v1920;
  uint64_t v1921;
  int v1922;
  int v1923;
  BOOL v1924;
  int v1925;
  uint64_t v1926;
  int v1927;
  int v1928;
  BOOL v1929;
  int v1930;
  uint64_t v1931;
  int v1932;
  int v1933;
  BOOL v1934;
  int v1935;
  uint64_t v1936;
  int v1937;
  int v1938;
  BOOL v1939;
  int v1940;
  uint64_t v1941;
  int v1942;
  int v1943;
  BOOL v1944;
  int v1945;
  uint64_t v1946;
  int v1947;
  int v1948;
  BOOL v1949;
  int v1950;
  uint64_t v1951;
  int v1952;
  int v1953;
  BOOL v1954;
  int v1955;
  uint64_t v1956;
  int v1957;
  int v1958;
  BOOL v1959;
  int v1960;
  uint64_t v1961;
  int v1962;
  int v1963;
  BOOL v1964;
  int v1965;
  uint64_t v1966;
  uint64_t v1967;
  WTF::PrintStream *v1968;
  uint64_t v1969;
  WTF::PrintStream *v1970;
  WTF::PrintStream *v1971;
  const char *v1972;
  void *v1973;
  uint64_t v1974;
  uint64_t v1975;
  uint64_t v1976;
  uint64_t v1977;
  uint64_t v1978;
  uint64_t v1979;
  WTF *v1980;
  uint64_t v1981;
  WTF::PrintStream *v1982;
  uint64_t v1983;
  WTF::PrintStream *v1984;
  uint64_t v1985;
  WTF::PrintStream *v1986;
  WTF::PrintStream *v1987;
  const char *v1988;
  void *v1989;
  uint64_t v1990;
  uint64_t v1991;
  uint64_t v1992;
  uint64_t v1993;
  uint64_t v1994;
  uint64_t v1995;
  WTF *v1996;
  uint64_t v1997;
  WTF::PrintStream *v1998;
  uint64_t v1999;
  WTF::PrintStream *v2000;
  uint64_t v2001;
  WTF::PrintStream *v2002;
  uint64_t v2003;
  WTF::PrintStream *v2004;
  uint64_t v2005;
  WTF::PrintStream *v2006;
  uint64_t v2007;
  WTF::PrintStream *v2008;
  const char *v2009;
  uint64_t v2010;
  WTF::PrintStream *v2011;
  int v2012;
  int v2013;
  int v2014;
  int v2015;
  int v2016;
  BOOL v2017;
  int v2018;
  int v2019;
  int v2020;
  uint64_t v2021;
  uint64_t v2022;
  const char *v2023;
  int v2024;
  int v2025;
  int v2026;
  int v2027;
  int v2028;
  BOOL v2029;
  int v2030;
  int v2031;
  int v2032;
  uint64_t v2033;
  int v2034;
  int v2035;
  int v2036;
  int v2037;
  int v2038;
  BOOL v2039;
  int v2040;
  int v2041;
  int v2042;
  uint64_t v2043;
  int v2044;
  int v2045;
  int v2046;
  int v2047;
  int v2048;
  BOOL v2049;
  int v2050;
  int v2051;
  int v2052;
  uint64_t v2053;
  uint64_t v2054;
  WTF::PrintStream *v2055;
  uint64_t v2056;
  WTF::PrintStream *v2057;
  WTF::PrintStream *v2058;
  const char *v2059;
  void *v2060;
  uint64_t v2061;
  uint64_t v2062;
  uint64_t v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  WTF *v2067;
  uint64_t v2068;
  WTF::PrintStream *v2069;
  uint64_t v2070;
  WTF::PrintStream *v2071;
  uint64_t v2072;
  WTF::PrintStream *v2073;
  WTF::PrintStream *v2074;
  const char *v2075;
  void *v2076;
  uint64_t v2077;
  uint64_t v2078;
  uint64_t v2079;
  uint64_t v2080;
  uint64_t v2081;
  uint64_t v2082;
  WTF *v2083;
  uint64_t v2084;
  WTF::PrintStream *v2085;
  uint64_t v2086;
  WTF::PrintStream *v2087;
  uint64_t v2088;
  WTF::PrintStream *v2089;
  uint64_t v2090;
  WTF::PrintStream *v2091;
  uint64_t v2092;
  WTF::PrintStream *v2093;
  uint64_t v2094;
  WTF::PrintStream *v2095;
  uint64_t v2096;
  WTF::PrintStream *v2097;
  WTF::PrintStream *v2098;
  const char *v2099;
  void *v2100;
  uint64_t v2101;
  uint64_t v2102;
  uint64_t v2103;
  uint64_t v2104;
  uint64_t v2105;
  uint64_t v2106;
  WTF *v2107;
  uint64_t v2108;
  WTF::PrintStream *v2109;
  int v2110;
  int v2111;
  int v2112;
  int v2113;
  int v2114;
  BOOL v2115;
  int v2116;
  int v2117;
  int v2118;
  uint64_t v2119;
  uint64_t v2120;
  const char *v2121;
  int v2122;
  int v2123;
  int v2124;
  int v2125;
  int v2126;
  BOOL v2127;
  int v2128;
  int v2129;
  int v2130;
  uint64_t v2131;
  uint64_t v2132;
  WTF::PrintStream *v2133;
  uint64_t v2134;
  WTF::PrintStream *v2135;
  WTF::PrintStream *v2136;
  const char *v2137;
  void *v2138;
  uint64_t v2139;
  uint64_t v2140;
  uint64_t v2141;
  uint64_t v2142;
  uint64_t v2143;
  uint64_t v2144;
  WTF *v2145;
  uint64_t v2146;
  WTF::PrintStream *v2147;
  uint64_t v2148;
  WTF::PrintStream *v2149;
  uint64_t v2150;
  WTF::PrintStream *v2151;
  WTF::PrintStream *v2152;
  const char *v2153;
  void *v2154;
  uint64_t v2155;
  uint64_t v2156;
  uint64_t v2157;
  uint64_t v2158;
  uint64_t v2159;
  uint64_t v2160;
  WTF *v2161;
  uint64_t v2162;
  WTF::PrintStream *v2163;
  uint64_t v2164;
  WTF::PrintStream *v2165;
  uint64_t v2166;
  WTF::PrintStream *v2167;
  uint64_t v2168;
  WTF::PrintStream *v2169;
  uint64_t v2170;
  WTF::PrintStream *v2171;
  uint64_t v2172;
  WTF::PrintStream *v2173;
  uint64_t v2174;
  WTF::PrintStream *v2175;
  WTF::PrintStream *v2176;
  const char *v2177;
  void *v2178;
  uint64_t v2179;
  uint64_t v2180;
  uint64_t v2181;
  uint64_t v2182;
  uint64_t v2183;
  uint64_t v2184;
  WTF *v2185;
  uint64_t v2186;
  WTF::PrintStream *v2187;
  int v2188;
  int v2189;
  BOOL v2190;
  int v2191;
  uint64_t v2192;
  uint64_t v2193;
  uint64_t v2194;
  uint64_t v2195;
  WTF::PrintStream *v2196;
  uint64_t v2197;
  WTF::PrintStream *v2198;
  WTF::PrintStream *v2199;
  const char *v2200;
  void *v2201;
  uint64_t v2202;
  uint64_t v2203;
  uint64_t v2204;
  uint64_t v2205;
  uint64_t v2206;
  uint64_t v2207;
  WTF *v2208;
  uint64_t v2209;
  WTF::PrintStream *v2210;
  uint64_t v2211;
  WTF::PrintStream *v2212;
  uint64_t v2213;
  WTF::PrintStream *v2214;
  WTF::PrintStream *v2215;
  const char *v2216;
  void *v2217;
  uint64_t v2218;
  uint64_t v2219;
  uint64_t v2220;
  uint64_t v2221;
  uint64_t v2222;
  uint64_t v2223;
  WTF *v2224;
  uint64_t v2225;
  WTF::PrintStream *v2226;
  uint64_t v2227;
  WTF::PrintStream *v2228;
  uint64_t v2229;
  WTF::PrintStream *v2230;
  uint64_t v2231;
  WTF::PrintStream *v2232;
  uint64_t v2233;
  WTF::PrintStream *v2234;
  int v2235;
  BOOL v2236;
  uint64_t v2237;
  uint64_t v2238;
  uint64_t v2239;
  WTF::PrintStream *v2240;
  uint64_t v2241;
  WTF::PrintStream *v2242;
  uint64_t v2243;
  WTF::PrintStream *v2244;
  uint64_t v2245;
  WTF::PrintStream *v2246;
  WTF::PrintStream *v2247;
  int v2248;
  int v2249;
  BOOL v2250;
  uint64_t v2251;
  uint64_t v2252;
  const char *v2253;
  uint64_t v2254;
  uint64_t v2255;
  uint64_t v2256;
  uint64_t v2257;
  WTF::PrintStream *v2258;
  uint64_t v2259;
  WTF::PrintStream *v2260;
  uint64_t v2261;
  WTF::PrintStream *v2262;
  uint64_t v2263;
  WTF::PrintStream *v2264;
  uint64_t v2265;
  WTF::PrintStream *v2266;
  uint64_t v2267;
  WTF::PrintStream *v2268;
  WTF::PrintStream *v2269;
  const char *v2270;
  void *v2271;
  uint64_t v2272;
  uint64_t v2273;
  uint64_t v2274;
  uint64_t v2275;
  uint64_t v2276;
  uint64_t v2277;
  WTF *v2278;
  uint64_t v2279;
  WTF::PrintStream *v2280;
  uint64_t v2281;
  WTF::PrintStream *v2282;
  uint64_t v2283;
  WTF::PrintStream *v2284;
  uint64_t v2285;
  WTF::PrintStream *v2286;
  uint64_t v2287;
  WTF::PrintStream *v2288;
  int v2289;
  int v2290;
  BOOL v2291;
  uint64_t v2292;
  uint64_t v2293;
  WTF::PrintStream *v2294;
  uint64_t v2295;
  WTF::PrintStream *v2296;
  int v2297;
  int v2298;
  BOOL v2299;
  int v2300;
  uint64_t v2301;
  uint64_t v2302;
  uint64_t v2303;
  WTF::PrintStream *v2304;
  uint64_t v2305;
  WTF::PrintStream *v2306;
  WTF::PrintStream *v2307;
  const char *v2308;
  void *v2309;
  uint64_t v2310;
  uint64_t v2311;
  uint64_t v2312;
  uint64_t v2313;
  uint64_t v2314;
  uint64_t v2315;
  WTF *v2316;
  WTF::PrintStream *v2317;
  int v2318;
  int v2319;
  int v2320;
  uint64_t v2321;
  uint64_t v2322;
  uint64_t v2323;
  uint64_t v2324;
  WTF::PrintStream *v2325;
  uint64_t v2326;
  WTF::PrintStream *v2327;
  WTF::PrintStream *v2328;
  const char *v2329;
  void *v2330;
  uint64_t v2331;
  uint64_t v2332;
  uint64_t v2333;
  uint64_t v2334;
  uint64_t v2335;
  uint64_t v2336;
  WTF *v2337;
  uint64_t v2338;
  WTF::PrintStream *v2339;
  uint64_t v2340;
  WTF::PrintStream *v2341;
  uint64_t v2342;
  WTF::PrintStream *v2343;
  WTF::PrintStream *v2344;
  const char *v2345;
  void *v2346;
  uint64_t v2347;
  uint64_t v2348;
  uint64_t v2349;
  uint64_t v2350;
  uint64_t v2351;
  uint64_t v2352;
  WTF *v2353;
  uint64_t v2354;
  WTF::PrintStream *v2355;
  uint64_t v2356;
  WTF::PrintStream *v2357;
  uint64_t v2358;
  WTF::PrintStream *v2359;
  uint64_t v2360;
  uint64_t v2361;
  const char *v2362;
  WTF::PrintStream *v2363;
  int v2364;
  int v2365;
  int v2366;
  int v2367;
  int v2368;
  int v2369;
  uint64_t v2370;
  uint64_t v2371;
  uint64_t v2372;
  WTF::PrintStream *v2373;
  uint64_t v2374;
  WTF::PrintStream *v2375;
  WTF::PrintStream *v2376;
  const char *v2377;
  void *v2378;
  uint64_t v2379;
  uint64_t v2380;
  uint64_t v2381;
  uint64_t v2382;
  uint64_t v2383;
  uint64_t v2384;
  WTF *v2385;
  uint64_t v2386;
  WTF::PrintStream *v2387;
  uint64_t v2388;
  WTF::PrintStream *v2389;
  uint64_t v2390;
  WTF::PrintStream *v2391;
  WTF::PrintStream *v2392;
  const char *v2393;
  void *v2394;
  uint64_t v2395;
  uint64_t v2396;
  uint64_t v2397;
  uint64_t v2398;
  uint64_t v2399;
  uint64_t v2400;
  WTF *v2401;
  uint64_t v2402;
  WTF::PrintStream *v2403;
  uint64_t v2404;
  WTF::PrintStream *v2405;
  uint64_t v2406;
  WTF::PrintStream *v2407;
  WTF::PrintStream *v2408;
  const char *v2409;
  void *v2410;
  uint64_t v2411;
  uint64_t v2412;
  uint64_t v2413;
  uint64_t v2414;
  uint64_t v2415;
  uint64_t v2416;
  WTF *v2417;
  uint64_t v2418;
  WTF::PrintStream *v2419;
  uint64_t v2420;
  WTF::PrintStream *v2421;
  uint64_t v2422;
  WTF::PrintStream *v2423;
  uint64_t v2424;
  WTF::PrintStream *v2425;
  uint64_t v2426;
  WTF::PrintStream *v2427;
  uint64_t v2428;
  WTF::PrintStream *v2429;
  uint64_t v2430;
  WTF::PrintStream *v2431;
  int v2432;
  int v2433;
  int v2434;
  int v2435;
  int v2436;
  int v2437;
  uint64_t v2438;
  uint64_t v2439;
  uint64_t v2440;
  WTF::PrintStream *v2441;
  uint64_t v2442;
  WTF::PrintStream *v2443;
  WTF::PrintStream *v2444;
  const char *v2445;
  void *v2446;
  uint64_t v2447;
  uint64_t v2448;
  uint64_t v2449;
  uint64_t v2450;
  uint64_t v2451;
  uint64_t v2452;
  WTF *v2453;
  uint64_t v2454;
  WTF::PrintStream *v2455;
  uint64_t v2456;
  WTF::PrintStream *v2457;
  uint64_t v2458;
  WTF::PrintStream *v2459;
  WTF::PrintStream *v2460;
  const char *v2461;
  void *v2462;
  uint64_t v2463;
  uint64_t v2464;
  uint64_t v2465;
  uint64_t v2466;
  uint64_t v2467;
  uint64_t v2468;
  WTF *v2469;
  uint64_t v2470;
  WTF::PrintStream *v2471;
  uint64_t v2472;
  WTF::PrintStream *v2473;
  uint64_t v2474;
  WTF::PrintStream *v2475;
  WTF::PrintStream *v2476;
  const char *v2477;
  void *v2478;
  uint64_t v2479;
  uint64_t v2480;
  uint64_t v2481;
  uint64_t v2482;
  uint64_t v2483;
  uint64_t v2484;
  WTF *v2485;
  uint64_t v2486;
  WTF::PrintStream *v2487;
  uint64_t v2488;
  WTF::PrintStream *v2489;
  uint64_t v2490;
  WTF::PrintStream *v2491;
  uint64_t v2492;
  WTF::PrintStream *v2493;
  uint64_t v2494;
  WTF::PrintStream *v2495;
  uint64_t v2496;
  WTF::PrintStream *v2497;
  int v2498;
  int v2499;
  int v2500;
  int v2501;
  uint64_t v2502;
  uint64_t v2503;
  uint64_t v2504;
  uint64_t v2505;
  WTF::PrintStream *v2506;
  uint64_t v2507;
  WTF::PrintStream *v2508;
  WTF::PrintStream *v2509;
  const char *v2510;
  void *v2511;
  uint64_t v2512;
  uint64_t v2513;
  uint64_t v2514;
  uint64_t v2515;
  uint64_t v2516;
  uint64_t v2517;
  WTF *v2518;
  uint64_t v2519;
  WTF::PrintStream *v2520;
  uint64_t v2521;
  WTF::PrintStream *v2522;
  uint64_t v2523;
  WTF::PrintStream *v2524;
  WTF::PrintStream *v2525;
  const char *v2526;
  void *v2527;
  uint64_t v2528;
  uint64_t v2529;
  uint64_t v2530;
  uint64_t v2531;
  uint64_t v2532;
  uint64_t v2533;
  WTF *v2534;
  uint64_t v2535;
  WTF::PrintStream *v2536;
  uint64_t v2537;
  WTF::PrintStream *v2538;
  uint64_t v2539;
  WTF::PrintStream *v2540;
  WTF::PrintStream *v2541;
  const char *v2542;
  void *v2543;
  uint64_t v2544;
  uint64_t v2545;
  uint64_t v2546;
  uint64_t v2547;
  uint64_t v2548;
  uint64_t v2549;
  WTF *v2550;
  int v2551;
  int v2552;
  BOOL v2553;
  int v2554;
  uint64_t v2555;
  uint64_t v2556;
  uint64_t v2557;
  WTF::PrintStream *v2558;
  uint64_t v2559;
  WTF::PrintStream *v2560;
  WTF::PrintStream *v2561;
  const char *v2562;
  void *v2563;
  uint64_t v2564;
  uint64_t v2565;
  uint64_t v2566;
  uint64_t v2567;
  uint64_t v2568;
  uint64_t v2569;
  WTF *v2570;
  uint64_t v2571;
  WTF::PrintStream *v2572;
  int16x4_t v2573;
  int32x4_t v2574;
  int32x4_t v2575;
  int16x4_t v2576;
  int32x4_t v2577;
  int32x4_t v2578;
  uint64_t v2579;
  uint64_t v2580;
  uint64_t v2581;
  WTF::PrintStream *v2582;
  uint64_t v2583;
  WTF::PrintStream *v2584;
  WTF::PrintStream *v2585;
  const char *v2586;
  void *v2587;
  uint64_t v2588;
  uint64_t v2589;
  uint64_t v2590;
  uint64_t v2591;
  uint64_t v2592;
  uint64_t v2593;
  WTF *v2594;
  uint64_t v2595;
  WTF::PrintStream *v2596;
  uint64_t v2597;
  WTF::PrintStream *v2598;
  uint64_t v2599;
  WTF::PrintStream *v2600;
  WTF::PrintStream *v2601;
  const char *v2602;
  void *v2603;
  uint64_t v2604;
  uint64_t v2605;
  uint64_t v2606;
  uint64_t v2607;
  uint64_t v2608;
  uint64_t v2609;
  WTF *v2610;
  uint64_t v2611;
  WTF::PrintStream *v2612;
  uint64_t v2613;
  WTF::PrintStream *v2614;
  uint64_t v2615;
  WTF::PrintStream *v2616;
  WTF::PrintStream *v2617;
  const char *v2618;
  void *v2619;
  uint64_t v2620;
  uint64_t v2621;
  uint64_t v2622;
  uint64_t v2623;
  uint64_t v2624;
  uint64_t v2625;
  WTF *v2626;
  uint64_t v2627;
  WTF::PrintStream *v2628;
  uint64_t v2629;
  WTF::PrintStream *v2630;
  uint64_t v2631;
  WTF::PrintStream *v2632;
  WTF::PrintStream *v2633;
  const char *v2634;
  uint64_t v2635;
  WTF::PrintStream *v2636;
  uint64_t v2637;
  WTF::PrintStream *v2638;
  int v2639;
  int v2640;
  BOOL v2641;
  int v2642;
  uint64_t v2643;
  uint64_t v2644;
  uint64_t v2645;
  WTF::PrintStream *v2646;
  uint64_t v2647;
  WTF::PrintStream *v2648;
  WTF::PrintStream *v2649;
  const char *v2650;
  void *v2651;
  uint64_t v2652;
  uint64_t v2653;
  uint64_t v2654;
  uint64_t v2655;
  uint64_t v2656;
  uint64_t v2657;
  WTF *v2658;
  uint64_t v2659;
  WTF::PrintStream *v2660;
  uint64_t v2661;
  WTF::PrintStream *v2662;
  uint64_t v2663;
  WTF::PrintStream *v2664;
  uint64_t v2665;
  WTF::PrintStream *v2666;
  uint64_t v2667;
  WTF::PrintStream *v2668;
  uint64_t v2669;
  WTF::PrintStream *v2670;
  uint64_t v2671;
  WTF::PrintStream *v2672;
  uint64_t v2673;
  uint64_t v2674;
  uint64_t v2675;
  const char *v2676;
  WTF::PrintStream *v2677;
  uint64_t v2678;
  WTF::PrintStream *v2679;
  uint64_t v2680;
  WTF::PrintStream *v2681;
  WTF::PrintStream *v2682;
  int v2683;
  int v2684;
  uint64_t v2685;
  uint64_t v2686;
  uint64_t v2687;
  uint64_t v2688;
  WTF::PrintStream *v2689;
  uint64_t v2690;
  WTF::PrintStream *v2691;
  WTF::PrintStream *v2692;
  const char *v2693;
  void *v2694;
  uint64_t v2695;
  uint64_t v2696;
  uint64_t v2697;
  uint64_t v2698;
  uint64_t v2699;
  uint64_t v2700;
  WTF *v2701;
  uint64_t v2702;
  WTF::PrintStream *v2703;
  uint64_t v2704;
  WTF::PrintStream *v2705;
  uint64_t v2706;
  WTF::PrintStream *v2707;
  WTF::PrintStream *v2708;
  const char *v2709;
  void *v2710;
  uint64_t v2711;
  uint64_t v2712;
  uint64_t v2713;
  uint64_t v2714;
  uint64_t v2715;
  uint64_t v2716;
  WTF *v2717;
  uint64_t v2718;
  WTF::PrintStream *v2719;
  uint64_t v2720;
  WTF::PrintStream *v2721;
  uint64_t v2722;
  WTF::PrintStream *v2723;
  uint64_t v2724;
  WTF::PrintStream *v2725;
  uint64_t v2726;
  WTF::PrintStream *v2727;
  uint64_t v2728;
  WTF::PrintStream *v2729;
  uint64_t v2730;
  WTF::PrintStream *v2731;
  int v2732;
  int v2733;
  int v2734;
  BOOL v2735;
  int v2736;
  uint64_t v2737;
  uint64_t v2738;
  uint64_t v2739;
  WTF::PrintStream *v2740;
  uint64_t v2741;
  WTF::PrintStream *v2742;
  WTF::PrintStream *v2743;
  const char *v2744;
  void *v2745;
  uint64_t v2746;
  uint64_t v2747;
  uint64_t v2748;
  uint64_t v2749;
  uint64_t v2750;
  uint64_t v2751;
  WTF *v2752;
  uint64_t v2753;
  WTF::PrintStream *v2754;
  uint64_t v2755;
  WTF::PrintStream *v2756;
  uint64_t v2757;
  WTF::PrintStream *v2758;
  uint64_t v2759;
  WTF::PrintStream *v2760;
  uint64_t v2761;
  WTF::PrintStream *v2762;
  uint64_t v2763;
  WTF::PrintStream *v2764;
  uint64_t v2765;
  WTF::PrintStream *v2766;
  WTF::PrintStream *v2767;
  void *v2768;
  uint64_t v2769;
  uint64_t v2770;
  uint64_t v2771;
  uint64_t v2772;
  uint64_t v2773;
  uint64_t v2774;
  int v2775;
  int v2776;
  int v2777;
  BOOL v2778;
  int v2779;
  uint64_t v2780;
  uint64_t v2781;
  WTF::PrintStream *v2782;
  uint64_t v2783;
  WTF::PrintStream *v2784;
  WTF::PrintStream *v2785;
  const char *v2786;
  void *v2787;
  uint64_t v2788;
  uint64_t v2789;
  uint64_t v2790;
  uint64_t v2791;
  uint64_t v2792;
  uint64_t v2793;
  WTF *v2794;
  uint64_t v2795;
  WTF::PrintStream *v2796;
  uint64_t v2797;
  WTF::PrintStream *v2798;
  uint64_t v2799;
  WTF::PrintStream *v2800;
  WTF::PrintStream *v2801;
  const char *v2802;
  void *v2803;
  uint64_t v2804;
  uint64_t v2805;
  uint64_t v2806;
  uint64_t v2807;
  uint64_t v2808;
  uint64_t v2809;
  WTF *v2810;
  uint64_t v2811;
  WTF::PrintStream *v2812;
  WTF::PrintStream *v2813;
  WTF::PrintStream *v2814;
  WTF *v2815;
  int v2816;
  int8x16_t v2817;
  int8x16_t v2818;
  WTF *v2819;
  uint64_t v2820;
  int v2821;

  v5 = *a3;
  v6 = v5;
  if ((v5 + 115) <= 1u)
    v6 = a3[1];
  switch(v6)
  {
    case 0:
      if (v5 == 141)
      {
        v443 = *((__int16 *)a3 + 1);
        if (v443 <= 63)
          v7 = *((__int16 *)a3 + 1);
        else
          v7 = v443 + 1073741760;
        v8 = *((__int16 *)a3 + 2);
        v444 = v8 + 1073741760;
        v445 = v8 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v7 = *(_DWORD *)(a3 + 2);
          v8 = *(_DWORD *)(a3 + 6);
LABEL_1000:
          v343 = v8;
          v447 = 1;
          if (v5 != 141)
            v447 = 2;
          if (v5 == 142)
            v448 = 0;
          else
            v448 = v447;
          *(_DWORD *)(a1 + 16) = a2;
          WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aExternConvertA[v448]);
          v449 = *(_QWORD *)(a1 + 8);
          v450 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v449 + 32))(v449);
          WTF::PrintStream::printf(v450, "%s", "dst");
          (*(void (**)(uint64_t))(*(_QWORD *)v449 + 40))(v449);
          v451 = *(_QWORD *)(a1 + 8);
          v452 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v451 + 32))(v451);
          WTF::PrintStream::printf(v452, "%s", ":");
          (*(void (**)(uint64_t))(*(_QWORD *)v451 + 40))(v451);
          v453 = *(WTF::PrintStream **)(a1 + 8);
          (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v7);
          if (v2819)
            v454 = (char *)v2819 + 16;
          else
            v454 = 0;
          WTF::PrintStream::printf(v453, "%s", v454);
          v462 = v2819;
          v2819 = 0;
          if (v462)
          {
            if (*(_DWORD *)v462 == 1)
              WTF::fastFree((unint64_t)v462, v455, v456, v457, v458, v459, v460, v461);
            else
              --*(_DWORD *)v462;
          }
          v463 = *(_QWORD *)(a1 + 8);
          v464 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v463 + 32))(v463);
          WTF::PrintStream::printf(v464, "%s", ", ");
          (*(void (**)(uint64_t))(*(_QWORD *)v463 + 40))(v463);
          v465 = *(_QWORD *)(a1 + 8);
          v466 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 32))(v465);
          v467 = "reference";
          goto LABEL_5249;
        }
        v446 = (char)a3[1];
        if (v446 <= 15)
          v7 = (char)a3[1];
        else
          v7 = v446 + 1073741808;
        v8 = (char)a3[2];
        v444 = v8 + 1073741808;
        v445 = v8 <= 15;
      }
      if (!v445)
        v8 = v444;
      goto LABEL_1000;
    case 1:
      if (v5 == 141)
      {
        v468 = *((__int16 *)a3 + 1);
        if (v468 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v468 + 1073741760;
        v23 = *((__int16 *)a3 + 2);
        if (v23 > 63)
          v23 += 1073741760;
        v469 = *((__int16 *)a3 + 3);
        v470 = v469 + 1073741760;
        v471 = v469 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v23 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1027;
        }
        v472 = (char)a3[1];
        if (v472 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v472 + 1073741808;
        v23 = (char)a3[2];
        if (v23 > 15)
          v23 += 1073741808;
        v469 = (char)a3[3];
        v470 = v469 + 1073741808;
        v471 = v469 <= 15;
      }
      if (v471)
        v11 = v469;
      else
        v11 = v470;
LABEL_1027:
      v381 = v23;
      v473 = 1;
      if (v5 != 141)
        v473 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v473;
      v384 = "**i32_sub";
      goto LABEL_5236;
    case 2:
      if (v5 == 141)
      {
        v474 = *((__int16 *)a3 + 1);
        if (v474 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v474 + 1073741760;
        v24 = *((__int16 *)a3 + 2);
        if (v24 > 63)
          v24 += 1073741760;
        v475 = *((__int16 *)a3 + 3);
        v476 = v475 + 1073741760;
        v477 = v475 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v24 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1048;
        }
        v478 = (char)a3[1];
        if (v478 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v478 + 1073741808;
        v24 = (char)a3[2];
        if (v24 > 15)
          v24 += 1073741808;
        v475 = (char)a3[3];
        v476 = v475 + 1073741808;
        v477 = v475 <= 15;
      }
      if (v477)
        v11 = v475;
      else
        v11 = v476;
LABEL_1048:
      v381 = v24;
      v479 = 1;
      if (v5 != 141)
        v479 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v479;
      v384 = "**i32_mul";
      goto LABEL_5236;
    case 3:
      if (v5 == 141)
      {
        v376 = *((__int16 *)a3 + 1);
        if (v376 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v376 + 1073741760;
        v10 = *((__int16 *)a3 + 2);
        if (v10 > 63)
          v10 += 1073741760;
        v377 = *((__int16 *)a3 + 3);
        v378 = v377 + 1073741760;
        v379 = v377 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v10 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_794;
        }
        v380 = (char)a3[1];
        if (v380 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v380 + 1073741808;
        v10 = (char)a3[2];
        if (v10 > 15)
          v10 += 1073741808;
        v377 = (char)a3[3];
        v378 = v377 + 1073741808;
        v379 = v377 <= 15;
      }
      if (v379)
        v11 = v377;
      else
        v11 = v378;
LABEL_794:
      v381 = v10;
      v382 = 1;
      if (v5 != 141)
        v382 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v382;
      v384 = "**i32_div_s";
      goto LABEL_5236;
    case 4:
      if (v5 == 141)
      {
        v480 = *((__int16 *)a3 + 1);
        if (v480 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v480 + 1073741760;
        v25 = *((__int16 *)a3 + 2);
        if (v25 > 63)
          v25 += 1073741760;
        v481 = *((__int16 *)a3 + 3);
        v482 = v481 + 1073741760;
        v483 = v481 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v25 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1069;
        }
        v484 = (char)a3[1];
        if (v484 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v484 + 1073741808;
        v25 = (char)a3[2];
        if (v25 > 15)
          v25 += 1073741808;
        v481 = (char)a3[3];
        v482 = v481 + 1073741808;
        v483 = v481 <= 15;
      }
      if (v483)
        v11 = v481;
      else
        v11 = v482;
LABEL_1069:
      v381 = v25;
      v485 = 1;
      if (v5 != 141)
        v485 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v485;
      v384 = "**i32_div_u";
      goto LABEL_5236;
    case 5:
      if (v5 == 141)
      {
        v486 = *((__int16 *)a3 + 1);
        if (v486 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v486 + 1073741760;
        v26 = *((__int16 *)a3 + 2);
        if (v26 > 63)
          v26 += 1073741760;
        v487 = *((__int16 *)a3 + 3);
        v488 = v487 + 1073741760;
        v489 = v487 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v26 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1090;
        }
        v490 = (char)a3[1];
        if (v490 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v490 + 1073741808;
        v26 = (char)a3[2];
        if (v26 > 15)
          v26 += 1073741808;
        v487 = (char)a3[3];
        v488 = v487 + 1073741808;
        v489 = v487 <= 15;
      }
      if (v489)
        v11 = v487;
      else
        v11 = v488;
LABEL_1090:
      v381 = v26;
      v491 = 1;
      if (v5 != 141)
        v491 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v491;
      v384 = "**i32_rem_s";
      goto LABEL_5236;
    case 6:
      if (v5 == 141)
      {
        v492 = *((__int16 *)a3 + 1);
        if (v492 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v492 + 1073741760;
        v27 = *((__int16 *)a3 + 2);
        if (v27 > 63)
          v27 += 1073741760;
        v493 = *((__int16 *)a3 + 3);
        v494 = v493 + 1073741760;
        v495 = v493 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v27 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1111;
        }
        v496 = (char)a3[1];
        if (v496 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v496 + 1073741808;
        v27 = (char)a3[2];
        if (v27 > 15)
          v27 += 1073741808;
        v493 = (char)a3[3];
        v494 = v493 + 1073741808;
        v495 = v493 <= 15;
      }
      if (v495)
        v11 = v493;
      else
        v11 = v494;
LABEL_1111:
      v381 = v27;
      v497 = 1;
      if (v5 != 141)
        v497 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v497;
      v384 = "**i32_rem_u";
      goto LABEL_5236;
    case 7:
      if (v5 == 141)
      {
        v498 = *((__int16 *)a3 + 1);
        if (v498 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v498 + 1073741760;
        v28 = *((__int16 *)a3 + 2);
        if (v28 > 63)
          v28 += 1073741760;
        v499 = *((__int16 *)a3 + 3);
        v500 = v499 + 1073741760;
        v501 = v499 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v28 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1132;
        }
        v502 = (char)a3[1];
        if (v502 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v502 + 1073741808;
        v28 = (char)a3[2];
        if (v28 > 15)
          v28 += 1073741808;
        v499 = (char)a3[3];
        v500 = v499 + 1073741808;
        v501 = v499 <= 15;
      }
      if (v501)
        v11 = v499;
      else
        v11 = v500;
LABEL_1132:
      v381 = v28;
      v503 = 1;
      if (v5 != 141)
        v503 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v503;
      v384 = "**i32_and";
      goto LABEL_5236;
    case 8:
      if (v5 == 141)
      {
        v504 = *((__int16 *)a3 + 1);
        if (v504 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v504 + 1073741760;
        v29 = *((__int16 *)a3 + 2);
        if (v29 > 63)
          v29 += 1073741760;
        v505 = *((__int16 *)a3 + 3);
        v506 = v505 + 1073741760;
        v507 = v505 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v29 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1153;
        }
        v508 = (char)a3[1];
        if (v508 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v508 + 1073741808;
        v29 = (char)a3[2];
        if (v29 > 15)
          v29 += 1073741808;
        v505 = (char)a3[3];
        v506 = v505 + 1073741808;
        v507 = v505 <= 15;
      }
      if (v507)
        v11 = v505;
      else
        v11 = v506;
LABEL_1153:
      v381 = v29;
      v509 = 1;
      if (v5 != 141)
        v509 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v509;
      v384 = "**i32_or";
      goto LABEL_5236;
    case 9:
      if (v5 == 141)
      {
        v510 = *((__int16 *)a3 + 1);
        if (v510 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v510 + 1073741760;
        v30 = *((__int16 *)a3 + 2);
        if (v30 > 63)
          v30 += 1073741760;
        v511 = *((__int16 *)a3 + 3);
        v512 = v511 + 1073741760;
        v513 = v511 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v30 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1174;
        }
        v514 = (char)a3[1];
        if (v514 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v514 + 1073741808;
        v30 = (char)a3[2];
        if (v30 > 15)
          v30 += 1073741808;
        v511 = (char)a3[3];
        v512 = v511 + 1073741808;
        v513 = v511 <= 15;
      }
      if (v513)
        v11 = v511;
      else
        v11 = v512;
LABEL_1174:
      v381 = v30;
      v515 = 1;
      if (v5 != 141)
        v515 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v515;
      v384 = "**i32_xor";
      goto LABEL_5236;
    case 10:
      if (v5 == 141)
      {
        v516 = *((__int16 *)a3 + 1);
        if (v516 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v516 + 1073741760;
        v31 = *((__int16 *)a3 + 2);
        if (v31 > 63)
          v31 += 1073741760;
        v517 = *((__int16 *)a3 + 3);
        v518 = v517 + 1073741760;
        v519 = v517 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v31 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1195;
        }
        v520 = (char)a3[1];
        if (v520 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v520 + 1073741808;
        v31 = (char)a3[2];
        if (v31 > 15)
          v31 += 1073741808;
        v517 = (char)a3[3];
        v518 = v517 + 1073741808;
        v519 = v517 <= 15;
      }
      if (v519)
        v11 = v517;
      else
        v11 = v518;
LABEL_1195:
      v381 = v31;
      v521 = 1;
      if (v5 != 141)
        v521 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v521;
      v384 = "**i32_shl";
      goto LABEL_5236;
    case 11:
      if (v5 == 141)
      {
        v522 = *((__int16 *)a3 + 1);
        if (v522 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v522 + 1073741760;
        v32 = *((__int16 *)a3 + 2);
        if (v32 > 63)
          v32 += 1073741760;
        v523 = *((__int16 *)a3 + 3);
        v524 = v523 + 1073741760;
        v525 = v523 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v32 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1216;
        }
        v526 = (char)a3[1];
        if (v526 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v526 + 1073741808;
        v32 = (char)a3[2];
        if (v32 > 15)
          v32 += 1073741808;
        v523 = (char)a3[3];
        v524 = v523 + 1073741808;
        v525 = v523 <= 15;
      }
      if (v525)
        v11 = v523;
      else
        v11 = v524;
LABEL_1216:
      v381 = v32;
      v527 = 1;
      if (v5 != 141)
        v527 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v527;
      v384 = "**i32_shr_u";
      goto LABEL_5236;
    case 12:
      if (v5 == 141)
      {
        v528 = *((__int16 *)a3 + 1);
        if (v528 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v528 + 1073741760;
        v33 = *((__int16 *)a3 + 2);
        if (v33 > 63)
          v33 += 1073741760;
        v529 = *((__int16 *)a3 + 3);
        v530 = v529 + 1073741760;
        v531 = v529 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v33 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1237;
        }
        v532 = (char)a3[1];
        if (v532 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v532 + 1073741808;
        v33 = (char)a3[2];
        if (v33 > 15)
          v33 += 1073741808;
        v529 = (char)a3[3];
        v530 = v529 + 1073741808;
        v531 = v529 <= 15;
      }
      if (v531)
        v11 = v529;
      else
        v11 = v530;
LABEL_1237:
      v381 = v33;
      v533 = 1;
      if (v5 != 141)
        v533 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v533;
      v384 = "**i32_shr_s";
      goto LABEL_5236;
    case 13:
      if (v5 == 141)
      {
        v385 = *((__int16 *)a3 + 1);
        if (v385 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v385 + 1073741760;
        v12 = *((__int16 *)a3 + 2);
        if (v12 > 63)
          v12 += 1073741760;
        v386 = *((__int16 *)a3 + 3);
        v387 = v386 + 1073741760;
        v388 = v386 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v12 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_815;
        }
        v389 = (char)a3[1];
        if (v389 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v389 + 1073741808;
        v12 = (char)a3[2];
        if (v12 > 15)
          v12 += 1073741808;
        v386 = (char)a3[3];
        v387 = v386 + 1073741808;
        v388 = v386 <= 15;
      }
      if (v388)
        v11 = v386;
      else
        v11 = v387;
LABEL_815:
      v381 = v12;
      v390 = 1;
      if (v5 != 141)
        v390 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v390;
      v384 = "**i32_rotr";
      goto LABEL_5236;
    case 14:
      if (v5 == 141)
      {
        v391 = *((__int16 *)a3 + 1);
        if (v391 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v391 + 1073741760;
        v13 = *((__int16 *)a3 + 2);
        if (v13 > 63)
          v13 += 1073741760;
        v392 = *((__int16 *)a3 + 3);
        v393 = v392 + 1073741760;
        v394 = v392 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v13 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_836;
        }
        v395 = (char)a3[1];
        if (v395 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v395 + 1073741808;
        v13 = (char)a3[2];
        if (v13 > 15)
          v13 += 1073741808;
        v392 = (char)a3[3];
        v393 = v392 + 1073741808;
        v394 = v392 <= 15;
      }
      if (v394)
        v11 = v392;
      else
        v11 = v393;
LABEL_836:
      v381 = v13;
      v396 = 1;
      if (v5 != 141)
        v396 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v396;
      v384 = "**i32_rotl";
      goto LABEL_5236;
    case 15:
      if (v5 == 141)
      {
        v534 = *((__int16 *)a3 + 1);
        if (v534 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v534 + 1073741760;
        v34 = *((__int16 *)a3 + 2);
        if (v34 > 63)
          v34 += 1073741760;
        v535 = *((__int16 *)a3 + 3);
        v536 = v535 + 1073741760;
        v537 = v535 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v34 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1258;
        }
        v538 = (char)a3[1];
        if (v538 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v538 + 1073741808;
        v34 = (char)a3[2];
        if (v34 > 15)
          v34 += 1073741808;
        v535 = (char)a3[3];
        v536 = v535 + 1073741808;
        v537 = v535 <= 15;
      }
      if (v537)
        v11 = v535;
      else
        v11 = v536;
LABEL_1258:
      v381 = v34;
      v539 = 1;
      if (v5 != 141)
        v539 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v539;
      v384 = "**i32_eq";
      goto LABEL_5236;
    case 16:
      if (v5 == 141)
      {
        v397 = *((__int16 *)a3 + 1);
        if (v397 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v397 + 1073741760;
        v14 = *((__int16 *)a3 + 2);
        if (v14 > 63)
          v14 += 1073741760;
        v398 = *((__int16 *)a3 + 3);
        v399 = v398 + 1073741760;
        v400 = v398 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v14 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_857;
        }
        v401 = (char)a3[1];
        if (v401 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v401 + 1073741808;
        v14 = (char)a3[2];
        if (v14 > 15)
          v14 += 1073741808;
        v398 = (char)a3[3];
        v399 = v398 + 1073741808;
        v400 = v398 <= 15;
      }
      if (v400)
        v11 = v398;
      else
        v11 = v399;
LABEL_857:
      v381 = v14;
      v402 = 1;
      if (v5 != 141)
        v402 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v402;
      v384 = "**i32_ne";
      goto LABEL_5236;
    case 17:
      if (v5 == 141)
      {
        v540 = *((__int16 *)a3 + 1);
        if (v540 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v540 + 1073741760;
        v35 = *((__int16 *)a3 + 2);
        if (v35 > 63)
          v35 += 1073741760;
        v541 = *((__int16 *)a3 + 3);
        v542 = v541 + 1073741760;
        v543 = v541 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v35 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1279;
        }
        v544 = (char)a3[1];
        if (v544 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v544 + 1073741808;
        v35 = (char)a3[2];
        if (v35 > 15)
          v35 += 1073741808;
        v541 = (char)a3[3];
        v542 = v541 + 1073741808;
        v543 = v541 <= 15;
      }
      if (v543)
        v11 = v541;
      else
        v11 = v542;
LABEL_1279:
      v381 = v35;
      v545 = 1;
      if (v5 != 141)
        v545 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v545;
      v384 = "**i32_lt_s";
      goto LABEL_5236;
    case 18:
      if (v5 == 141)
      {
        v546 = *((__int16 *)a3 + 1);
        if (v546 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v546 + 1073741760;
        v36 = *((__int16 *)a3 + 2);
        if (v36 > 63)
          v36 += 1073741760;
        v547 = *((__int16 *)a3 + 3);
        v548 = v547 + 1073741760;
        v549 = v547 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v36 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1300;
        }
        v550 = (char)a3[1];
        if (v550 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v550 + 1073741808;
        v36 = (char)a3[2];
        if (v36 > 15)
          v36 += 1073741808;
        v547 = (char)a3[3];
        v548 = v547 + 1073741808;
        v549 = v547 <= 15;
      }
      if (v549)
        v11 = v547;
      else
        v11 = v548;
LABEL_1300:
      v381 = v36;
      v551 = 1;
      if (v5 != 141)
        v551 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v551;
      v384 = "**i32_le_s";
      goto LABEL_5236;
    case 19:
      if (v5 == 141)
      {
        v552 = *((__int16 *)a3 + 1);
        if (v552 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v552 + 1073741760;
        v37 = *((__int16 *)a3 + 2);
        if (v37 > 63)
          v37 += 1073741760;
        v553 = *((__int16 *)a3 + 3);
        v554 = v553 + 1073741760;
        v555 = v553 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v37 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1321;
        }
        v556 = (char)a3[1];
        if (v556 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v556 + 1073741808;
        v37 = (char)a3[2];
        if (v37 > 15)
          v37 += 1073741808;
        v553 = (char)a3[3];
        v554 = v553 + 1073741808;
        v555 = v553 <= 15;
      }
      if (v555)
        v11 = v553;
      else
        v11 = v554;
LABEL_1321:
      v381 = v37;
      v557 = 1;
      if (v5 != 141)
        v557 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v557;
      v384 = "**i32_lt_u";
      goto LABEL_5236;
    case 20:
      if (v5 == 141)
      {
        v558 = *((__int16 *)a3 + 1);
        if (v558 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v558 + 1073741760;
        v38 = *((__int16 *)a3 + 2);
        if (v38 > 63)
          v38 += 1073741760;
        v559 = *((__int16 *)a3 + 3);
        v560 = v559 + 1073741760;
        v561 = v559 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v38 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1342;
        }
        v562 = (char)a3[1];
        if (v562 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v562 + 1073741808;
        v38 = (char)a3[2];
        if (v38 > 15)
          v38 += 1073741808;
        v559 = (char)a3[3];
        v560 = v559 + 1073741808;
        v561 = v559 <= 15;
      }
      if (v561)
        v11 = v559;
      else
        v11 = v560;
LABEL_1342:
      v381 = v38;
      v563 = 1;
      if (v5 != 141)
        v563 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v563;
      v384 = "**i32_le_u";
      goto LABEL_5236;
    case 21:
      if (v5 == 141)
      {
        v564 = *((__int16 *)a3 + 1);
        if (v564 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v564 + 1073741760;
        v39 = *((__int16 *)a3 + 2);
        if (v39 > 63)
          v39 += 1073741760;
        v565 = *((__int16 *)a3 + 3);
        v566 = v565 + 1073741760;
        v567 = v565 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v39 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1363;
        }
        v568 = (char)a3[1];
        if (v568 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v568 + 1073741808;
        v39 = (char)a3[2];
        if (v39 > 15)
          v39 += 1073741808;
        v565 = (char)a3[3];
        v566 = v565 + 1073741808;
        v567 = v565 <= 15;
      }
      if (v567)
        v11 = v565;
      else
        v11 = v566;
LABEL_1363:
      v381 = v39;
      v569 = 1;
      if (v5 != 141)
        v569 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v569;
      v384 = "**i32_gt_s";
      goto LABEL_5236;
    case 22:
      if (v5 == 141)
      {
        v570 = *((__int16 *)a3 + 1);
        if (v570 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v570 + 1073741760;
        v40 = *((__int16 *)a3 + 2);
        if (v40 > 63)
          v40 += 1073741760;
        v571 = *((__int16 *)a3 + 3);
        v572 = v571 + 1073741760;
        v573 = v571 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v40 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1384;
        }
        v574 = (char)a3[1];
        if (v574 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v574 + 1073741808;
        v40 = (char)a3[2];
        if (v40 > 15)
          v40 += 1073741808;
        v571 = (char)a3[3];
        v572 = v571 + 1073741808;
        v573 = v571 <= 15;
      }
      if (v573)
        v11 = v571;
      else
        v11 = v572;
LABEL_1384:
      v381 = v40;
      v575 = 1;
      if (v5 != 141)
        v575 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v575;
      v384 = "**i32_ge_s";
      goto LABEL_5236;
    case 23:
      if (v5 == 141)
      {
        v576 = *((__int16 *)a3 + 1);
        if (v576 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v576 + 1073741760;
        v41 = *((__int16 *)a3 + 2);
        if (v41 > 63)
          v41 += 1073741760;
        v577 = *((__int16 *)a3 + 3);
        v578 = v577 + 1073741760;
        v579 = v577 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v41 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1405;
        }
        v580 = (char)a3[1];
        if (v580 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v580 + 1073741808;
        v41 = (char)a3[2];
        if (v41 > 15)
          v41 += 1073741808;
        v577 = (char)a3[3];
        v578 = v577 + 1073741808;
        v579 = v577 <= 15;
      }
      if (v579)
        v11 = v577;
      else
        v11 = v578;
LABEL_1405:
      v381 = v41;
      v581 = 1;
      if (v5 != 141)
        v581 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v581;
      v384 = "**i32_gt_u";
      goto LABEL_5236;
    case 24:
      if (v5 == 141)
      {
        v582 = *((__int16 *)a3 + 1);
        if (v582 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v582 + 1073741760;
        v42 = *((__int16 *)a3 + 2);
        if (v42 > 63)
          v42 += 1073741760;
        v583 = *((__int16 *)a3 + 3);
        v584 = v583 + 1073741760;
        v585 = v583 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v42 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1426;
        }
        v586 = (char)a3[1];
        if (v586 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v586 + 1073741808;
        v42 = (char)a3[2];
        if (v42 > 15)
          v42 += 1073741808;
        v583 = (char)a3[3];
        v584 = v583 + 1073741808;
        v585 = v583 <= 15;
      }
      if (v585)
        v11 = v583;
      else
        v11 = v584;
LABEL_1426:
      v381 = v42;
      v587 = 1;
      if (v5 != 141)
        v587 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v587;
      v384 = "**i32_ge_u";
      goto LABEL_5236;
    case 25:
      if (v5 == 141)
      {
        v588 = *((__int16 *)a3 + 1);
        if (v588 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v588 + 1073741760;
        v43 = *((__int16 *)a3 + 2);
        v589 = v43 + 1073741760;
        v590 = v43 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v43 = *(_DWORD *)(a3 + 6);
          goto LABEL_1442;
        }
        v591 = (char)a3[1];
        if (v591 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v591 + 1073741808;
        v43 = (char)a3[2];
        v589 = v43 + 1073741808;
        v590 = v43 <= 15;
      }
      if (!v590)
        v43 = v589;
LABEL_1442:
      v343 = v43;
      v592 = 1;
      if (v5 != 141)
        v592 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v592;
      v409 = "**i32_clz";
      goto LABEL_3336;
    case 26:
      if (v5 == 141)
      {
        v403 = *((__int16 *)a3 + 1);
        if (v403 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v403 + 1073741760;
        v16 = *((__int16 *)a3 + 2);
        v404 = v16 + 1073741760;
        v405 = v16 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v16 = *(_DWORD *)(a3 + 6);
          goto LABEL_873;
        }
        v406 = (char)a3[1];
        if (v406 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v406 + 1073741808;
        v16 = (char)a3[2];
        v404 = v16 + 1073741808;
        v405 = v16 <= 15;
      }
      if (!v405)
        v16 = v404;
LABEL_873:
      v343 = v16;
      v407 = 1;
      if (v5 != 141)
        v407 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v407;
      v409 = "**i32_ctz";
      goto LABEL_3336;
    case 27:
      if (v5 == 141)
      {
        v410 = *((__int16 *)a3 + 1);
        if (v410 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v410 + 1073741760;
        v17 = *((__int16 *)a3 + 2);
        v411 = v17 + 1073741760;
        v412 = v17 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v17 = *(_DWORD *)(a3 + 6);
          goto LABEL_889;
        }
        v413 = (char)a3[1];
        if (v413 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v413 + 1073741808;
        v17 = (char)a3[2];
        v411 = v17 + 1073741808;
        v412 = v17 <= 15;
      }
      if (!v412)
        v17 = v411;
LABEL_889:
      v343 = v17;
      v414 = 1;
      if (v5 != 141)
        v414 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v414;
      v409 = "**i32_popcnt";
      goto LABEL_3336;
    case 28:
      if (v5 == 141)
      {
        v593 = *((__int16 *)a3 + 1);
        if (v593 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v593 + 1073741760;
        v44 = *((__int16 *)a3 + 2);
        v594 = v44 + 1073741760;
        v595 = v44 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v44 = *(_DWORD *)(a3 + 6);
          goto LABEL_1458;
        }
        v596 = (char)a3[1];
        if (v596 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v596 + 1073741808;
        v44 = (char)a3[2];
        v594 = v44 + 1073741808;
        v595 = v44 <= 15;
      }
      if (!v595)
        v44 = v594;
LABEL_1458:
      v343 = v44;
      v597 = 1;
      if (v5 != 141)
        v597 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v597;
      v409 = "**i32_eqz";
      goto LABEL_3336;
    case 29:
      if (v5 == 141)
      {
        v415 = *((__int16 *)a3 + 1);
        if (v415 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v415 + 1073741760;
        v18 = *((__int16 *)a3 + 2);
        if (v18 > 63)
          v18 += 1073741760;
        v416 = *((__int16 *)a3 + 3);
        v417 = v416 + 1073741760;
        v418 = v416 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v18 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_910;
        }
        v419 = (char)a3[1];
        if (v419 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v419 + 1073741808;
        v18 = (char)a3[2];
        if (v18 > 15)
          v18 += 1073741808;
        v416 = (char)a3[3];
        v417 = v416 + 1073741808;
        v418 = v416 <= 15;
      }
      if (v418)
        v11 = v416;
      else
        v11 = v417;
LABEL_910:
      v381 = v18;
      v420 = 1;
      if (v5 != 141)
        v420 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v420;
      v384 = "**i64_add";
      goto LABEL_5236;
    case 30:
      if (v5 == 141)
      {
        v598 = *((__int16 *)a3 + 1);
        if (v598 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v598 + 1073741760;
        v45 = *((__int16 *)a3 + 2);
        if (v45 > 63)
          v45 += 1073741760;
        v599 = *((__int16 *)a3 + 3);
        v600 = v599 + 1073741760;
        v601 = v599 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v45 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1479;
        }
        v602 = (char)a3[1];
        if (v602 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v602 + 1073741808;
        v45 = (char)a3[2];
        if (v45 > 15)
          v45 += 1073741808;
        v599 = (char)a3[3];
        v600 = v599 + 1073741808;
        v601 = v599 <= 15;
      }
      if (v601)
        v11 = v599;
      else
        v11 = v600;
LABEL_1479:
      v381 = v45;
      v603 = 1;
      if (v5 != 141)
        v603 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v603;
      v384 = "**i64_sub";
      goto LABEL_5236;
    case 31:
      if (v5 == 141)
      {
        v604 = *((__int16 *)a3 + 1);
        if (v604 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v604 + 1073741760;
        v46 = *((__int16 *)a3 + 2);
        if (v46 > 63)
          v46 += 1073741760;
        v605 = *((__int16 *)a3 + 3);
        v606 = v605 + 1073741760;
        v607 = v605 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v46 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1500;
        }
        v608 = (char)a3[1];
        if (v608 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v608 + 1073741808;
        v46 = (char)a3[2];
        if (v46 > 15)
          v46 += 1073741808;
        v605 = (char)a3[3];
        v606 = v605 + 1073741808;
        v607 = v605 <= 15;
      }
      if (v607)
        v11 = v605;
      else
        v11 = v606;
LABEL_1500:
      v381 = v46;
      v609 = 1;
      if (v5 != 141)
        v609 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v609;
      v384 = "**i64_mul";
      goto LABEL_5236;
    case 32:
      if (v5 == 141)
      {
        v610 = *((__int16 *)a3 + 1);
        if (v610 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v610 + 1073741760;
        v47 = *((__int16 *)a3 + 2);
        if (v47 > 63)
          v47 += 1073741760;
        v611 = *((__int16 *)a3 + 3);
        v612 = v611 + 1073741760;
        v613 = v611 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v47 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1521;
        }
        v614 = (char)a3[1];
        if (v614 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v614 + 1073741808;
        v47 = (char)a3[2];
        if (v47 > 15)
          v47 += 1073741808;
        v611 = (char)a3[3];
        v612 = v611 + 1073741808;
        v613 = v611 <= 15;
      }
      if (v613)
        v11 = v611;
      else
        v11 = v612;
LABEL_1521:
      v381 = v47;
      v615 = 1;
      if (v5 != 141)
        v615 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v615;
      v384 = "**i64_div_s";
      goto LABEL_5236;
    case 33:
      if (v5 == 141)
      {
        v421 = *((__int16 *)a3 + 1);
        if (v421 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v421 + 1073741760;
        v19 = *((__int16 *)a3 + 2);
        if (v19 > 63)
          v19 += 1073741760;
        v422 = *((__int16 *)a3 + 3);
        v423 = v422 + 1073741760;
        v424 = v422 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v19 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_931;
        }
        v425 = (char)a3[1];
        if (v425 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v425 + 1073741808;
        v19 = (char)a3[2];
        if (v19 > 15)
          v19 += 1073741808;
        v422 = (char)a3[3];
        v423 = v422 + 1073741808;
        v424 = v422 <= 15;
      }
      if (v424)
        v11 = v422;
      else
        v11 = v423;
LABEL_931:
      v381 = v19;
      v426 = 1;
      if (v5 != 141)
        v426 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v426;
      v384 = "**i64_div_u";
      goto LABEL_5236;
    case 34:
      if (v5 == 141)
      {
        v616 = *((__int16 *)a3 + 1);
        if (v616 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v616 + 1073741760;
        v48 = *((__int16 *)a3 + 2);
        if (v48 > 63)
          v48 += 1073741760;
        v617 = *((__int16 *)a3 + 3);
        v618 = v617 + 1073741760;
        v619 = v617 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v48 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1542;
        }
        v620 = (char)a3[1];
        if (v620 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v620 + 1073741808;
        v48 = (char)a3[2];
        if (v48 > 15)
          v48 += 1073741808;
        v617 = (char)a3[3];
        v618 = v617 + 1073741808;
        v619 = v617 <= 15;
      }
      if (v619)
        v11 = v617;
      else
        v11 = v618;
LABEL_1542:
      v381 = v48;
      v621 = 1;
      if (v5 != 141)
        v621 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v621;
      v384 = "**i64_rem_s";
      goto LABEL_5236;
    case 35:
      if (v5 == 141)
      {
        v622 = *((__int16 *)a3 + 1);
        if (v622 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v622 + 1073741760;
        v49 = *((__int16 *)a3 + 2);
        if (v49 > 63)
          v49 += 1073741760;
        v623 = *((__int16 *)a3 + 3);
        v624 = v623 + 1073741760;
        v625 = v623 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v49 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1563;
        }
        v626 = (char)a3[1];
        if (v626 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v626 + 1073741808;
        v49 = (char)a3[2];
        if (v49 > 15)
          v49 += 1073741808;
        v623 = (char)a3[3];
        v624 = v623 + 1073741808;
        v625 = v623 <= 15;
      }
      if (v625)
        v11 = v623;
      else
        v11 = v624;
LABEL_1563:
      v381 = v49;
      v627 = 1;
      if (v5 != 141)
        v627 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v627;
      v384 = "**i64_rem_u";
      goto LABEL_5236;
    case 36:
      if (v5 == 141)
      {
        v628 = *((__int16 *)a3 + 1);
        if (v628 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v628 + 1073741760;
        v50 = *((__int16 *)a3 + 2);
        if (v50 > 63)
          v50 += 1073741760;
        v629 = *((__int16 *)a3 + 3);
        v630 = v629 + 1073741760;
        v631 = v629 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v50 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1584;
        }
        v632 = (char)a3[1];
        if (v632 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v632 + 1073741808;
        v50 = (char)a3[2];
        if (v50 > 15)
          v50 += 1073741808;
        v629 = (char)a3[3];
        v630 = v629 + 1073741808;
        v631 = v629 <= 15;
      }
      if (v631)
        v11 = v629;
      else
        v11 = v630;
LABEL_1584:
      v381 = v50;
      v633 = 1;
      if (v5 != 141)
        v633 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v633;
      v384 = "**i64_and";
      goto LABEL_5236;
    case 37:
      if (v5 == 141)
      {
        v634 = *((__int16 *)a3 + 1);
        if (v634 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v634 + 1073741760;
        v51 = *((__int16 *)a3 + 2);
        if (v51 > 63)
          v51 += 1073741760;
        v635 = *((__int16 *)a3 + 3);
        v636 = v635 + 1073741760;
        v637 = v635 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v51 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1605;
        }
        v638 = (char)a3[1];
        if (v638 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v638 + 1073741808;
        v51 = (char)a3[2];
        if (v51 > 15)
          v51 += 1073741808;
        v635 = (char)a3[3];
        v636 = v635 + 1073741808;
        v637 = v635 <= 15;
      }
      if (v637)
        v11 = v635;
      else
        v11 = v636;
LABEL_1605:
      v381 = v51;
      v639 = 1;
      if (v5 != 141)
        v639 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v639;
      v384 = "**i64_or";
      goto LABEL_5236;
    case 38:
      if (v5 == 141)
      {
        v640 = *((__int16 *)a3 + 1);
        if (v640 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v640 + 1073741760;
        v52 = *((__int16 *)a3 + 2);
        if (v52 > 63)
          v52 += 1073741760;
        v641 = *((__int16 *)a3 + 3);
        v642 = v641 + 1073741760;
        v643 = v641 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v52 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1626;
        }
        v644 = (char)a3[1];
        if (v644 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v644 + 1073741808;
        v52 = (char)a3[2];
        if (v52 > 15)
          v52 += 1073741808;
        v641 = (char)a3[3];
        v642 = v641 + 1073741808;
        v643 = v641 <= 15;
      }
      if (v643)
        v11 = v641;
      else
        v11 = v642;
LABEL_1626:
      v381 = v52;
      v645 = 1;
      if (v5 != 141)
        v645 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v645;
      v384 = "**i64_xor";
      goto LABEL_5236;
    case 39:
      if (v5 == 141)
      {
        v646 = *((__int16 *)a3 + 1);
        if (v646 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v646 + 1073741760;
        v53 = *((__int16 *)a3 + 2);
        if (v53 > 63)
          v53 += 1073741760;
        v647 = *((__int16 *)a3 + 3);
        v648 = v647 + 1073741760;
        v649 = v647 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v53 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1647;
        }
        v650 = (char)a3[1];
        if (v650 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v650 + 1073741808;
        v53 = (char)a3[2];
        if (v53 > 15)
          v53 += 1073741808;
        v647 = (char)a3[3];
        v648 = v647 + 1073741808;
        v649 = v647 <= 15;
      }
      if (v649)
        v11 = v647;
      else
        v11 = v648;
LABEL_1647:
      v381 = v53;
      v651 = 1;
      if (v5 != 141)
        v651 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v651;
      v384 = "**i64_shl";
      goto LABEL_5236;
    case 40:
      if (v5 == 141)
      {
        v652 = *((__int16 *)a3 + 1);
        if (v652 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v652 + 1073741760;
        v54 = *((__int16 *)a3 + 2);
        if (v54 > 63)
          v54 += 1073741760;
        v653 = *((__int16 *)a3 + 3);
        v654 = v653 + 1073741760;
        v655 = v653 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v54 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1668;
        }
        v656 = (char)a3[1];
        if (v656 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v656 + 1073741808;
        v54 = (char)a3[2];
        if (v54 > 15)
          v54 += 1073741808;
        v653 = (char)a3[3];
        v654 = v653 + 1073741808;
        v655 = v653 <= 15;
      }
      if (v655)
        v11 = v653;
      else
        v11 = v654;
LABEL_1668:
      v381 = v54;
      v657 = 1;
      if (v5 != 141)
        v657 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v657;
      v384 = "**i64_shr_u";
      goto LABEL_5236;
    case 41:
      if (v5 == 141)
      {
        v658 = *((__int16 *)a3 + 1);
        if (v658 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v658 + 1073741760;
        v55 = *((__int16 *)a3 + 2);
        if (v55 > 63)
          v55 += 1073741760;
        v659 = *((__int16 *)a3 + 3);
        v660 = v659 + 1073741760;
        v661 = v659 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v55 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1689;
        }
        v662 = (char)a3[1];
        if (v662 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v662 + 1073741808;
        v55 = (char)a3[2];
        if (v55 > 15)
          v55 += 1073741808;
        v659 = (char)a3[3];
        v660 = v659 + 1073741808;
        v661 = v659 <= 15;
      }
      if (v661)
        v11 = v659;
      else
        v11 = v660;
LABEL_1689:
      v381 = v55;
      v663 = 1;
      if (v5 != 141)
        v663 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v663;
      v384 = "**i64_shr_s";
      goto LABEL_5236;
    case 42:
      if (v5 == 141)
      {
        v664 = *((__int16 *)a3 + 1);
        if (v664 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v664 + 1073741760;
        v56 = *((__int16 *)a3 + 2);
        if (v56 > 63)
          v56 += 1073741760;
        v665 = *((__int16 *)a3 + 3);
        v666 = v665 + 1073741760;
        v667 = v665 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v56 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1710;
        }
        v668 = (char)a3[1];
        if (v668 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v668 + 1073741808;
        v56 = (char)a3[2];
        if (v56 > 15)
          v56 += 1073741808;
        v665 = (char)a3[3];
        v666 = v665 + 1073741808;
        v667 = v665 <= 15;
      }
      if (v667)
        v11 = v665;
      else
        v11 = v666;
LABEL_1710:
      v381 = v56;
      v669 = 1;
      if (v5 != 141)
        v669 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v669;
      v384 = "**i64_rotr";
      goto LABEL_5236;
    case 43:
      if (v5 == 141)
      {
        v670 = *((__int16 *)a3 + 1);
        if (v670 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v670 + 1073741760;
        v57 = *((__int16 *)a3 + 2);
        if (v57 > 63)
          v57 += 1073741760;
        v671 = *((__int16 *)a3 + 3);
        v672 = v671 + 1073741760;
        v673 = v671 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v57 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1731;
        }
        v674 = (char)a3[1];
        if (v674 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v674 + 1073741808;
        v57 = (char)a3[2];
        if (v57 > 15)
          v57 += 1073741808;
        v671 = (char)a3[3];
        v672 = v671 + 1073741808;
        v673 = v671 <= 15;
      }
      if (v673)
        v11 = v671;
      else
        v11 = v672;
LABEL_1731:
      v381 = v57;
      v675 = 1;
      if (v5 != 141)
        v675 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v675;
      v384 = "**i64_rotl";
      goto LABEL_5236;
    case 44:
      if (v5 == 141)
      {
        v676 = *((__int16 *)a3 + 1);
        if (v676 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v676 + 1073741760;
        v58 = *((__int16 *)a3 + 2);
        if (v58 > 63)
          v58 += 1073741760;
        v677 = *((__int16 *)a3 + 3);
        v678 = v677 + 1073741760;
        v679 = v677 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v58 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1752;
        }
        v680 = (char)a3[1];
        if (v680 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v680 + 1073741808;
        v58 = (char)a3[2];
        if (v58 > 15)
          v58 += 1073741808;
        v677 = (char)a3[3];
        v678 = v677 + 1073741808;
        v679 = v677 <= 15;
      }
      if (v679)
        v11 = v677;
      else
        v11 = v678;
LABEL_1752:
      v381 = v58;
      v681 = 1;
      if (v5 != 141)
        v681 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v681;
      v384 = "**i64_eq";
      goto LABEL_5236;
    case 45:
      if (v5 == 141)
      {
        v682 = *((__int16 *)a3 + 1);
        if (v682 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v682 + 1073741760;
        v59 = *((__int16 *)a3 + 2);
        if (v59 > 63)
          v59 += 1073741760;
        v683 = *((__int16 *)a3 + 3);
        v684 = v683 + 1073741760;
        v685 = v683 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v59 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1773;
        }
        v686 = (char)a3[1];
        if (v686 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v686 + 1073741808;
        v59 = (char)a3[2];
        if (v59 > 15)
          v59 += 1073741808;
        v683 = (char)a3[3];
        v684 = v683 + 1073741808;
        v685 = v683 <= 15;
      }
      if (v685)
        v11 = v683;
      else
        v11 = v684;
LABEL_1773:
      v381 = v59;
      v687 = 1;
      if (v5 != 141)
        v687 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v687;
      v384 = "**i64_ne";
      goto LABEL_5236;
    case 46:
      if (v5 == 141)
      {
        v688 = *((__int16 *)a3 + 1);
        if (v688 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v688 + 1073741760;
        v60 = *((__int16 *)a3 + 2);
        if (v60 > 63)
          v60 += 1073741760;
        v689 = *((__int16 *)a3 + 3);
        v690 = v689 + 1073741760;
        v691 = v689 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v60 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1794;
        }
        v692 = (char)a3[1];
        if (v692 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v692 + 1073741808;
        v60 = (char)a3[2];
        if (v60 > 15)
          v60 += 1073741808;
        v689 = (char)a3[3];
        v690 = v689 + 1073741808;
        v691 = v689 <= 15;
      }
      if (v691)
        v11 = v689;
      else
        v11 = v690;
LABEL_1794:
      v381 = v60;
      v693 = 1;
      if (v5 != 141)
        v693 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v693;
      v384 = "**i64_lt_s";
      goto LABEL_5236;
    case 47:
      if (v5 == 141)
      {
        v427 = *((__int16 *)a3 + 1);
        if (v427 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v427 + 1073741760;
        v20 = *((__int16 *)a3 + 2);
        if (v20 > 63)
          v20 += 1073741760;
        v428 = *((__int16 *)a3 + 3);
        v429 = v428 + 1073741760;
        v430 = v428 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v20 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_952;
        }
        v431 = (char)a3[1];
        if (v431 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v431 + 1073741808;
        v20 = (char)a3[2];
        if (v20 > 15)
          v20 += 1073741808;
        v428 = (char)a3[3];
        v429 = v428 + 1073741808;
        v430 = v428 <= 15;
      }
      if (v430)
        v11 = v428;
      else
        v11 = v429;
LABEL_952:
      v381 = v20;
      v432 = 1;
      if (v5 != 141)
        v432 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v432;
      v384 = "**i64_le_s";
      goto LABEL_5236;
    case 48:
      if (v5 == 141)
      {
        v694 = *((__int16 *)a3 + 1);
        if (v694 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v694 + 1073741760;
        v61 = *((__int16 *)a3 + 2);
        if (v61 > 63)
          v61 += 1073741760;
        v695 = *((__int16 *)a3 + 3);
        v696 = v695 + 1073741760;
        v697 = v695 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v61 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1815;
        }
        v698 = (char)a3[1];
        if (v698 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v698 + 1073741808;
        v61 = (char)a3[2];
        if (v61 > 15)
          v61 += 1073741808;
        v695 = (char)a3[3];
        v696 = v695 + 1073741808;
        v697 = v695 <= 15;
      }
      if (v697)
        v11 = v695;
      else
        v11 = v696;
LABEL_1815:
      v381 = v61;
      v699 = 1;
      if (v5 != 141)
        v699 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v699;
      v384 = "**i64_lt_u";
      goto LABEL_5236;
    case 49:
      if (v5 == 141)
      {
        v700 = *((__int16 *)a3 + 1);
        if (v700 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v700 + 1073741760;
        v62 = *((__int16 *)a3 + 2);
        if (v62 > 63)
          v62 += 1073741760;
        v701 = *((__int16 *)a3 + 3);
        v702 = v701 + 1073741760;
        v703 = v701 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v62 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1836;
        }
        v704 = (char)a3[1];
        if (v704 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v704 + 1073741808;
        v62 = (char)a3[2];
        if (v62 > 15)
          v62 += 1073741808;
        v701 = (char)a3[3];
        v702 = v701 + 1073741808;
        v703 = v701 <= 15;
      }
      if (v703)
        v11 = v701;
      else
        v11 = v702;
LABEL_1836:
      v381 = v62;
      v705 = 1;
      if (v5 != 141)
        v705 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v705;
      v384 = "**i64_le_u";
      goto LABEL_5236;
    case 50:
      if (v5 == 141)
      {
        v706 = *((__int16 *)a3 + 1);
        if (v706 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v706 + 1073741760;
        v63 = *((__int16 *)a3 + 2);
        if (v63 > 63)
          v63 += 1073741760;
        v707 = *((__int16 *)a3 + 3);
        v708 = v707 + 1073741760;
        v709 = v707 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v63 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1857;
        }
        v710 = (char)a3[1];
        if (v710 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v710 + 1073741808;
        v63 = (char)a3[2];
        if (v63 > 15)
          v63 += 1073741808;
        v707 = (char)a3[3];
        v708 = v707 + 1073741808;
        v709 = v707 <= 15;
      }
      if (v709)
        v11 = v707;
      else
        v11 = v708;
LABEL_1857:
      v381 = v63;
      v711 = 1;
      if (v5 != 141)
        v711 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v711;
      v384 = "**i64_gt_s";
      goto LABEL_5236;
    case 51:
      if (v5 == 141)
      {
        v712 = *((__int16 *)a3 + 1);
        if (v712 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v712 + 1073741760;
        v64 = *((__int16 *)a3 + 2);
        if (v64 > 63)
          v64 += 1073741760;
        v713 = *((__int16 *)a3 + 3);
        v714 = v713 + 1073741760;
        v715 = v713 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v64 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1878;
        }
        v716 = (char)a3[1];
        if (v716 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v716 + 1073741808;
        v64 = (char)a3[2];
        if (v64 > 15)
          v64 += 1073741808;
        v713 = (char)a3[3];
        v714 = v713 + 1073741808;
        v715 = v713 <= 15;
      }
      if (v715)
        v11 = v713;
      else
        v11 = v714;
LABEL_1878:
      v381 = v64;
      v717 = 1;
      if (v5 != 141)
        v717 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v717;
      v384 = "**i64_ge_s";
      goto LABEL_5236;
    case 52:
      if (v5 == 141)
      {
        v718 = *((__int16 *)a3 + 1);
        if (v718 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v718 + 1073741760;
        v65 = *((__int16 *)a3 + 2);
        if (v65 > 63)
          v65 += 1073741760;
        v719 = *((__int16 *)a3 + 3);
        v720 = v719 + 1073741760;
        v721 = v719 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v65 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1899;
        }
        v722 = (char)a3[1];
        if (v722 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v722 + 1073741808;
        v65 = (char)a3[2];
        if (v65 > 15)
          v65 += 1073741808;
        v719 = (char)a3[3];
        v720 = v719 + 1073741808;
        v721 = v719 <= 15;
      }
      if (v721)
        v11 = v719;
      else
        v11 = v720;
LABEL_1899:
      v381 = v65;
      v723 = 1;
      if (v5 != 141)
        v723 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v723;
      v384 = "**i64_gt_u";
      goto LABEL_5236;
    case 53:
      if (v5 == 141)
      {
        v724 = *((__int16 *)a3 + 1);
        if (v724 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v724 + 1073741760;
        v66 = *((__int16 *)a3 + 2);
        if (v66 > 63)
          v66 += 1073741760;
        v725 = *((__int16 *)a3 + 3);
        v726 = v725 + 1073741760;
        v727 = v725 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v66 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1920;
        }
        v728 = (char)a3[1];
        if (v728 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v728 + 1073741808;
        v66 = (char)a3[2];
        if (v66 > 15)
          v66 += 1073741808;
        v725 = (char)a3[3];
        v726 = v725 + 1073741808;
        v727 = v725 <= 15;
      }
      if (v727)
        v11 = v725;
      else
        v11 = v726;
LABEL_1920:
      v381 = v66;
      v729 = 1;
      if (v5 != 141)
        v729 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v729;
      v384 = "**i64_ge_u";
      goto LABEL_5236;
    case 54:
      if (v5 == 141)
      {
        v730 = *((__int16 *)a3 + 1);
        if (v730 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v730 + 1073741760;
        v67 = *((__int16 *)a3 + 2);
        v731 = v67 + 1073741760;
        v732 = v67 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v67 = *(_DWORD *)(a3 + 6);
          goto LABEL_1936;
        }
        v733 = (char)a3[1];
        if (v733 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v733 + 1073741808;
        v67 = (char)a3[2];
        v731 = v67 + 1073741808;
        v732 = v67 <= 15;
      }
      if (!v732)
        v67 = v731;
LABEL_1936:
      v343 = v67;
      v734 = 1;
      if (v5 != 141)
        v734 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v734;
      v409 = "**i64_clz";
      goto LABEL_3336;
    case 55:
      if (v5 == 141)
      {
        v735 = *((__int16 *)a3 + 1);
        if (v735 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v735 + 1073741760;
        v68 = *((__int16 *)a3 + 2);
        v736 = v68 + 1073741760;
        v737 = v68 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v68 = *(_DWORD *)(a3 + 6);
          goto LABEL_1952;
        }
        v738 = (char)a3[1];
        if (v738 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v738 + 1073741808;
        v68 = (char)a3[2];
        v736 = v68 + 1073741808;
        v737 = v68 <= 15;
      }
      if (!v737)
        v68 = v736;
LABEL_1952:
      v343 = v68;
      v739 = 1;
      if (v5 != 141)
        v739 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v739;
      v409 = "**i64_ctz";
      goto LABEL_3336;
    case 56:
      if (v5 == 141)
      {
        v433 = *((__int16 *)a3 + 1);
        if (v433 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v433 + 1073741760;
        v21 = *((__int16 *)a3 + 2);
        v434 = v21 + 1073741760;
        v435 = v21 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v21 = *(_DWORD *)(a3 + 6);
          goto LABEL_968;
        }
        v436 = (char)a3[1];
        if (v436 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v436 + 1073741808;
        v21 = (char)a3[2];
        v434 = v21 + 1073741808;
        v435 = v21 <= 15;
      }
      if (!v435)
        v21 = v434;
LABEL_968:
      v343 = v21;
      v437 = 1;
      if (v5 != 141)
        v437 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v437;
      v409 = "**i64_popcnt";
      goto LABEL_3336;
    case 57:
      if (v5 == 141)
      {
        v740 = *((__int16 *)a3 + 1);
        if (v740 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v740 + 1073741760;
        v69 = *((__int16 *)a3 + 2);
        v741 = v69 + 1073741760;
        v742 = v69 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v69 = *(_DWORD *)(a3 + 6);
          goto LABEL_1968;
        }
        v743 = (char)a3[1];
        if (v743 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v743 + 1073741808;
        v69 = (char)a3[2];
        v741 = v69 + 1073741808;
        v742 = v69 <= 15;
      }
      if (!v742)
        v69 = v741;
LABEL_1968:
      v343 = v69;
      v744 = 1;
      if (v5 != 141)
        v744 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v744;
      v409 = "**i64_eqz";
      goto LABEL_3336;
    case 58:
      if (v5 == 141)
      {
        v745 = *((__int16 *)a3 + 1);
        if (v745 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v745 + 1073741760;
        v70 = *((__int16 *)a3 + 2);
        if (v70 > 63)
          v70 += 1073741760;
        v746 = *((__int16 *)a3 + 3);
        v747 = v746 + 1073741760;
        v748 = v746 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v70 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_1989;
        }
        v749 = (char)a3[1];
        if (v749 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v749 + 1073741808;
        v70 = (char)a3[2];
        if (v70 > 15)
          v70 += 1073741808;
        v746 = (char)a3[3];
        v747 = v746 + 1073741808;
        v748 = v746 <= 15;
      }
      if (v748)
        v11 = v746;
      else
        v11 = v747;
LABEL_1989:
      v381 = v70;
      v750 = 1;
      if (v5 != 141)
        v750 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v750;
      v384 = "**f32_add";
      goto LABEL_5236;
    case 59:
      if (v5 == 141)
      {
        v751 = *((__int16 *)a3 + 1);
        if (v751 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v751 + 1073741760;
        v71 = *((__int16 *)a3 + 2);
        if (v71 > 63)
          v71 += 1073741760;
        v752 = *((__int16 *)a3 + 3);
        v753 = v752 + 1073741760;
        v754 = v752 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v71 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2010;
        }
        v755 = (char)a3[1];
        if (v755 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v755 + 1073741808;
        v71 = (char)a3[2];
        if (v71 > 15)
          v71 += 1073741808;
        v752 = (char)a3[3];
        v753 = v752 + 1073741808;
        v754 = v752 <= 15;
      }
      if (v754)
        v11 = v752;
      else
        v11 = v753;
LABEL_2010:
      v381 = v71;
      v756 = 1;
      if (v5 != 141)
        v756 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v756;
      v384 = "**f32_sub";
      goto LABEL_5236;
    case 60:
      if (v5 == 141)
      {
        v757 = *((__int16 *)a3 + 1);
        if (v757 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v757 + 1073741760;
        v72 = *((__int16 *)a3 + 2);
        if (v72 > 63)
          v72 += 1073741760;
        v758 = *((__int16 *)a3 + 3);
        v759 = v758 + 1073741760;
        v760 = v758 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v72 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2031;
        }
        v761 = (char)a3[1];
        if (v761 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v761 + 1073741808;
        v72 = (char)a3[2];
        if (v72 > 15)
          v72 += 1073741808;
        v758 = (char)a3[3];
        v759 = v758 + 1073741808;
        v760 = v758 <= 15;
      }
      if (v760)
        v11 = v758;
      else
        v11 = v759;
LABEL_2031:
      v381 = v72;
      v762 = 1;
      if (v5 != 141)
        v762 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v762;
      v384 = "**f32_mul";
      goto LABEL_5236;
    case 61:
      if (v5 == 141)
      {
        v763 = *((__int16 *)a3 + 1);
        if (v763 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v763 + 1073741760;
        v73 = *((__int16 *)a3 + 2);
        if (v73 > 63)
          v73 += 1073741760;
        v764 = *((__int16 *)a3 + 3);
        v765 = v764 + 1073741760;
        v766 = v764 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v73 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2052;
        }
        v767 = (char)a3[1];
        if (v767 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v767 + 1073741808;
        v73 = (char)a3[2];
        if (v73 > 15)
          v73 += 1073741808;
        v764 = (char)a3[3];
        v765 = v764 + 1073741808;
        v766 = v764 <= 15;
      }
      if (v766)
        v11 = v764;
      else
        v11 = v765;
LABEL_2052:
      v381 = v73;
      v768 = 1;
      if (v5 != 141)
        v768 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v768;
      v384 = "**f32_div";
      goto LABEL_5236;
    case 62:
      if (v5 == 141)
      {
        v769 = *((__int16 *)a3 + 1);
        if (v769 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v769 + 1073741760;
        v74 = *((__int16 *)a3 + 2);
        if (v74 > 63)
          v74 += 1073741760;
        v770 = *((__int16 *)a3 + 3);
        v771 = v770 + 1073741760;
        v772 = v770 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v74 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2073;
        }
        v773 = (char)a3[1];
        if (v773 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v773 + 1073741808;
        v74 = (char)a3[2];
        if (v74 > 15)
          v74 += 1073741808;
        v770 = (char)a3[3];
        v771 = v770 + 1073741808;
        v772 = v770 <= 15;
      }
      if (v772)
        v11 = v770;
      else
        v11 = v771;
LABEL_2073:
      v381 = v74;
      v774 = 1;
      if (v5 != 141)
        v774 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v774;
      v384 = "**f32_min";
      goto LABEL_5236;
    case 63:
      if (v5 == 141)
      {
        v775 = *((__int16 *)a3 + 1);
        if (v775 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v775 + 1073741760;
        v75 = *((__int16 *)a3 + 2);
        if (v75 > 63)
          v75 += 1073741760;
        v776 = *((__int16 *)a3 + 3);
        v777 = v776 + 1073741760;
        v778 = v776 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v75 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2094;
        }
        v779 = (char)a3[1];
        if (v779 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v779 + 1073741808;
        v75 = (char)a3[2];
        if (v75 > 15)
          v75 += 1073741808;
        v776 = (char)a3[3];
        v777 = v776 + 1073741808;
        v778 = v776 <= 15;
      }
      if (v778)
        v11 = v776;
      else
        v11 = v777;
LABEL_2094:
      v381 = v75;
      v780 = 1;
      if (v5 != 141)
        v780 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v780;
      v384 = "**f32_max";
      goto LABEL_5236;
    case 64:
      if (v5 == 141)
      {
        v781 = *((__int16 *)a3 + 1);
        if (v781 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v781 + 1073741760;
        v76 = *((__int16 *)a3 + 2);
        v782 = v76 + 1073741760;
        v783 = v76 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v76 = *(_DWORD *)(a3 + 6);
          goto LABEL_2110;
        }
        v784 = (char)a3[1];
        if (v784 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v784 + 1073741808;
        v76 = (char)a3[2];
        v782 = v76 + 1073741808;
        v783 = v76 <= 15;
      }
      if (!v783)
        v76 = v782;
LABEL_2110:
      v343 = v76;
      v785 = 1;
      if (v5 != 141)
        v785 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v785;
      v409 = "**f32_abs";
      goto LABEL_3336;
    case 65:
      if (v5 == 141)
      {
        v786 = *((__int16 *)a3 + 1);
        if (v786 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v786 + 1073741760;
        v77 = *((__int16 *)a3 + 2);
        v787 = v77 + 1073741760;
        v788 = v77 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v77 = *(_DWORD *)(a3 + 6);
          goto LABEL_2126;
        }
        v789 = (char)a3[1];
        if (v789 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v789 + 1073741808;
        v77 = (char)a3[2];
        v787 = v77 + 1073741808;
        v788 = v77 <= 15;
      }
      if (!v788)
        v77 = v787;
LABEL_2126:
      v343 = v77;
      v790 = 1;
      if (v5 != 141)
        v790 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v790;
      v409 = "**f32_neg";
      goto LABEL_3336;
    case 66:
      if (v5 == 141)
      {
        v791 = *((__int16 *)a3 + 1);
        if (v791 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v791 + 1073741760;
        v78 = *((__int16 *)a3 + 2);
        if (v78 > 63)
          v78 += 1073741760;
        v792 = *((__int16 *)a3 + 3);
        v793 = v792 + 1073741760;
        v794 = v792 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v78 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2147;
        }
        v795 = (char)a3[1];
        if (v795 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v795 + 1073741808;
        v78 = (char)a3[2];
        if (v78 > 15)
          v78 += 1073741808;
        v792 = (char)a3[3];
        v793 = v792 + 1073741808;
        v794 = v792 <= 15;
      }
      if (v794)
        v11 = v792;
      else
        v11 = v793;
LABEL_2147:
      v381 = v78;
      v796 = 1;
      if (v5 != 141)
        v796 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v796;
      v384 = "**f32_copysign";
      goto LABEL_5236;
    case 67:
      if (v5 == 141)
      {
        v797 = *((__int16 *)a3 + 1);
        if (v797 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v797 + 1073741760;
        v79 = *((__int16 *)a3 + 2);
        v798 = v79 + 1073741760;
        v799 = v79 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v79 = *(_DWORD *)(a3 + 6);
          goto LABEL_2163;
        }
        v800 = (char)a3[1];
        if (v800 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v800 + 1073741808;
        v79 = (char)a3[2];
        v798 = v79 + 1073741808;
        v799 = v79 <= 15;
      }
      if (!v799)
        v79 = v798;
LABEL_2163:
      v343 = v79;
      v801 = 1;
      if (v5 != 141)
        v801 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v801;
      v409 = "**f32_ceil";
      goto LABEL_3336;
    case 68:
      if (v5 == 141)
      {
        v802 = *((__int16 *)a3 + 1);
        if (v802 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v802 + 1073741760;
        v80 = *((__int16 *)a3 + 2);
        v803 = v80 + 1073741760;
        v804 = v80 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v80 = *(_DWORD *)(a3 + 6);
          goto LABEL_2179;
        }
        v805 = (char)a3[1];
        if (v805 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v805 + 1073741808;
        v80 = (char)a3[2];
        v803 = v80 + 1073741808;
        v804 = v80 <= 15;
      }
      if (!v804)
        v80 = v803;
LABEL_2179:
      v343 = v80;
      v806 = 1;
      if (v5 != 141)
        v806 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v806;
      v409 = "**f32_floor";
      goto LABEL_3336;
    case 69:
      if (v5 == 141)
      {
        v807 = *((__int16 *)a3 + 1);
        if (v807 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v807 + 1073741760;
        v81 = *((__int16 *)a3 + 2);
        v808 = v81 + 1073741760;
        v809 = v81 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v81 = *(_DWORD *)(a3 + 6);
          goto LABEL_2195;
        }
        v810 = (char)a3[1];
        if (v810 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v810 + 1073741808;
        v81 = (char)a3[2];
        v808 = v81 + 1073741808;
        v809 = v81 <= 15;
      }
      if (!v809)
        v81 = v808;
LABEL_2195:
      v343 = v81;
      v811 = 1;
      if (v5 != 141)
        v811 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v811;
      v409 = "**f32_trunc";
      goto LABEL_3336;
    case 70:
      if (v5 == 141)
      {
        v438 = *((__int16 *)a3 + 1);
        if (v438 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v438 + 1073741760;
        v22 = *((__int16 *)a3 + 2);
        v439 = v22 + 1073741760;
        v440 = v22 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v22 = *(_DWORD *)(a3 + 6);
          goto LABEL_984;
        }
        v441 = (char)a3[1];
        if (v441 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v441 + 1073741808;
        v22 = (char)a3[2];
        v439 = v22 + 1073741808;
        v440 = v22 <= 15;
      }
      if (!v440)
        v22 = v439;
LABEL_984:
      v343 = v22;
      v442 = 1;
      if (v5 != 141)
        v442 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v442;
      v409 = "**f32_nearest";
      goto LABEL_3336;
    case 71:
      if (v5 == 141)
      {
        v812 = *((__int16 *)a3 + 1);
        if (v812 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v812 + 1073741760;
        v82 = *((__int16 *)a3 + 2);
        v813 = v82 + 1073741760;
        v814 = v82 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v82 = *(_DWORD *)(a3 + 6);
          goto LABEL_2211;
        }
        v815 = (char)a3[1];
        if (v815 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v815 + 1073741808;
        v82 = (char)a3[2];
        v813 = v82 + 1073741808;
        v814 = v82 <= 15;
      }
      if (!v814)
        v82 = v813;
LABEL_2211:
      v343 = v82;
      v816 = 1;
      if (v5 != 141)
        v816 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v816;
      v409 = "**f32_sqrt";
      goto LABEL_3336;
    case 72:
      if (v5 == 141)
      {
        v817 = *((__int16 *)a3 + 1);
        if (v817 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v817 + 1073741760;
        v83 = *((__int16 *)a3 + 2);
        if (v83 > 63)
          v83 += 1073741760;
        v818 = *((__int16 *)a3 + 3);
        v819 = v818 + 1073741760;
        v820 = v818 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v83 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2232;
        }
        v821 = (char)a3[1];
        if (v821 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v821 + 1073741808;
        v83 = (char)a3[2];
        if (v83 > 15)
          v83 += 1073741808;
        v818 = (char)a3[3];
        v819 = v818 + 1073741808;
        v820 = v818 <= 15;
      }
      if (v820)
        v11 = v818;
      else
        v11 = v819;
LABEL_2232:
      v381 = v83;
      v822 = 1;
      if (v5 != 141)
        v822 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v822;
      v384 = "**f32_eq";
      goto LABEL_5236;
    case 73:
      if (v5 == 141)
      {
        v823 = *((__int16 *)a3 + 1);
        if (v823 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v823 + 1073741760;
        v84 = *((__int16 *)a3 + 2);
        if (v84 > 63)
          v84 += 1073741760;
        v824 = *((__int16 *)a3 + 3);
        v825 = v824 + 1073741760;
        v826 = v824 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v84 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2253;
        }
        v827 = (char)a3[1];
        if (v827 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v827 + 1073741808;
        v84 = (char)a3[2];
        if (v84 > 15)
          v84 += 1073741808;
        v824 = (char)a3[3];
        v825 = v824 + 1073741808;
        v826 = v824 <= 15;
      }
      if (v826)
        v11 = v824;
      else
        v11 = v825;
LABEL_2253:
      v381 = v84;
      v828 = 1;
      if (v5 != 141)
        v828 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v828;
      v384 = "**f32_ne";
      goto LABEL_5236;
    case 74:
      if (v5 == 141)
      {
        v829 = *((__int16 *)a3 + 1);
        if (v829 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v829 + 1073741760;
        v85 = *((__int16 *)a3 + 2);
        if (v85 > 63)
          v85 += 1073741760;
        v830 = *((__int16 *)a3 + 3);
        v831 = v830 + 1073741760;
        v832 = v830 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v85 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2274;
        }
        v833 = (char)a3[1];
        if (v833 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v833 + 1073741808;
        v85 = (char)a3[2];
        if (v85 > 15)
          v85 += 1073741808;
        v830 = (char)a3[3];
        v831 = v830 + 1073741808;
        v832 = v830 <= 15;
      }
      if (v832)
        v11 = v830;
      else
        v11 = v831;
LABEL_2274:
      v381 = v85;
      v834 = 1;
      if (v5 != 141)
        v834 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v834;
      v384 = "**f32_lt";
      goto LABEL_5236;
    case 75:
      if (v5 == 141)
      {
        v835 = *((__int16 *)a3 + 1);
        if (v835 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v835 + 1073741760;
        v86 = *((__int16 *)a3 + 2);
        if (v86 > 63)
          v86 += 1073741760;
        v836 = *((__int16 *)a3 + 3);
        v837 = v836 + 1073741760;
        v838 = v836 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v86 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2295;
        }
        v839 = (char)a3[1];
        if (v839 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v839 + 1073741808;
        v86 = (char)a3[2];
        if (v86 > 15)
          v86 += 1073741808;
        v836 = (char)a3[3];
        v837 = v836 + 1073741808;
        v838 = v836 <= 15;
      }
      if (v838)
        v11 = v836;
      else
        v11 = v837;
LABEL_2295:
      v381 = v86;
      v840 = 1;
      if (v5 != 141)
        v840 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v840;
      v384 = "**f32_le";
      goto LABEL_5236;
    case 76:
      if (v5 == 141)
      {
        v841 = *((__int16 *)a3 + 1);
        if (v841 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v841 + 1073741760;
        v87 = *((__int16 *)a3 + 2);
        if (v87 > 63)
          v87 += 1073741760;
        v842 = *((__int16 *)a3 + 3);
        v843 = v842 + 1073741760;
        v844 = v842 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v87 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2316;
        }
        v845 = (char)a3[1];
        if (v845 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v845 + 1073741808;
        v87 = (char)a3[2];
        if (v87 > 15)
          v87 += 1073741808;
        v842 = (char)a3[3];
        v843 = v842 + 1073741808;
        v844 = v842 <= 15;
      }
      if (v844)
        v11 = v842;
      else
        v11 = v843;
LABEL_2316:
      v381 = v87;
      v846 = 1;
      if (v5 != 141)
        v846 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v846;
      v384 = "**f32_gt";
      goto LABEL_5236;
    case 77:
      if (v5 == 141)
      {
        v847 = *((__int16 *)a3 + 1);
        if (v847 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v847 + 1073741760;
        v88 = *((__int16 *)a3 + 2);
        if (v88 > 63)
          v88 += 1073741760;
        v848 = *((__int16 *)a3 + 3);
        v849 = v848 + 1073741760;
        v850 = v848 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v88 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2337;
        }
        v851 = (char)a3[1];
        if (v851 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v851 + 1073741808;
        v88 = (char)a3[2];
        if (v88 > 15)
          v88 += 1073741808;
        v848 = (char)a3[3];
        v849 = v848 + 1073741808;
        v850 = v848 <= 15;
      }
      if (v850)
        v11 = v848;
      else
        v11 = v849;
LABEL_2337:
      v381 = v88;
      v852 = 1;
      if (v5 != 141)
        v852 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v852;
      v384 = "**f32_ge";
      goto LABEL_5236;
    case 78:
      if (v5 == 141)
      {
        v853 = *((__int16 *)a3 + 1);
        if (v853 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v853 + 1073741760;
        v89 = *((__int16 *)a3 + 2);
        if (v89 > 63)
          v89 += 1073741760;
        v854 = *((__int16 *)a3 + 3);
        v855 = v854 + 1073741760;
        v856 = v854 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v89 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2358;
        }
        v857 = (char)a3[1];
        if (v857 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v857 + 1073741808;
        v89 = (char)a3[2];
        if (v89 > 15)
          v89 += 1073741808;
        v854 = (char)a3[3];
        v855 = v854 + 1073741808;
        v856 = v854 <= 15;
      }
      if (v856)
        v11 = v854;
      else
        v11 = v855;
LABEL_2358:
      v381 = v89;
      v858 = 1;
      if (v5 != 141)
        v858 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v858;
      v384 = "**f64_add";
      goto LABEL_5236;
    case 79:
      if (v5 == 141)
      {
        v859 = *((__int16 *)a3 + 1);
        if (v859 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v859 + 1073741760;
        v90 = *((__int16 *)a3 + 2);
        if (v90 > 63)
          v90 += 1073741760;
        v860 = *((__int16 *)a3 + 3);
        v861 = v860 + 1073741760;
        v862 = v860 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v90 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2379;
        }
        v863 = (char)a3[1];
        if (v863 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v863 + 1073741808;
        v90 = (char)a3[2];
        if (v90 > 15)
          v90 += 1073741808;
        v860 = (char)a3[3];
        v861 = v860 + 1073741808;
        v862 = v860 <= 15;
      }
      if (v862)
        v11 = v860;
      else
        v11 = v861;
LABEL_2379:
      v381 = v90;
      v864 = 1;
      if (v5 != 141)
        v864 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v864;
      v384 = "**f64_sub";
      goto LABEL_5236;
    case 80:
      if (v5 == 141)
      {
        v865 = *((__int16 *)a3 + 1);
        if (v865 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v865 + 1073741760;
        v91 = *((__int16 *)a3 + 2);
        if (v91 > 63)
          v91 += 1073741760;
        v866 = *((__int16 *)a3 + 3);
        v867 = v866 + 1073741760;
        v868 = v866 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v91 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2400;
        }
        v869 = (char)a3[1];
        if (v869 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v869 + 1073741808;
        v91 = (char)a3[2];
        if (v91 > 15)
          v91 += 1073741808;
        v866 = (char)a3[3];
        v867 = v866 + 1073741808;
        v868 = v866 <= 15;
      }
      if (v868)
        v11 = v866;
      else
        v11 = v867;
LABEL_2400:
      v381 = v91;
      v870 = 1;
      if (v5 != 141)
        v870 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v870;
      v384 = "**f64_mul";
      goto LABEL_5236;
    case 81:
      if (v5 == 141)
      {
        v871 = *((__int16 *)a3 + 1);
        if (v871 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v871 + 1073741760;
        v92 = *((__int16 *)a3 + 2);
        if (v92 > 63)
          v92 += 1073741760;
        v872 = *((__int16 *)a3 + 3);
        v873 = v872 + 1073741760;
        v874 = v872 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v92 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2421;
        }
        v875 = (char)a3[1];
        if (v875 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v875 + 1073741808;
        v92 = (char)a3[2];
        if (v92 > 15)
          v92 += 1073741808;
        v872 = (char)a3[3];
        v873 = v872 + 1073741808;
        v874 = v872 <= 15;
      }
      if (v874)
        v11 = v872;
      else
        v11 = v873;
LABEL_2421:
      v381 = v92;
      v876 = 1;
      if (v5 != 141)
        v876 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v876;
      v384 = "**f64_div";
      goto LABEL_5236;
    case 82:
      if (v5 == 141)
      {
        v877 = *((__int16 *)a3 + 1);
        if (v877 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v877 + 1073741760;
        v93 = *((__int16 *)a3 + 2);
        if (v93 > 63)
          v93 += 1073741760;
        v878 = *((__int16 *)a3 + 3);
        v879 = v878 + 1073741760;
        v880 = v878 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v93 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2442;
        }
        v881 = (char)a3[1];
        if (v881 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v881 + 1073741808;
        v93 = (char)a3[2];
        if (v93 > 15)
          v93 += 1073741808;
        v878 = (char)a3[3];
        v879 = v878 + 1073741808;
        v880 = v878 <= 15;
      }
      if (v880)
        v11 = v878;
      else
        v11 = v879;
LABEL_2442:
      v381 = v93;
      v882 = 1;
      if (v5 != 141)
        v882 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v882;
      v384 = "**f64_min";
      goto LABEL_5236;
    case 83:
      if (v5 == 141)
      {
        v883 = *((__int16 *)a3 + 1);
        if (v883 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v883 + 1073741760;
        v94 = *((__int16 *)a3 + 2);
        if (v94 > 63)
          v94 += 1073741760;
        v884 = *((__int16 *)a3 + 3);
        v885 = v884 + 1073741760;
        v886 = v884 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v94 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2463;
        }
        v887 = (char)a3[1];
        if (v887 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v887 + 1073741808;
        v94 = (char)a3[2];
        if (v94 > 15)
          v94 += 1073741808;
        v884 = (char)a3[3];
        v885 = v884 + 1073741808;
        v886 = v884 <= 15;
      }
      if (v886)
        v11 = v884;
      else
        v11 = v885;
LABEL_2463:
      v381 = v94;
      v888 = 1;
      if (v5 != 141)
        v888 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v888;
      v384 = "**f64_max";
      goto LABEL_5236;
    case 84:
      if (v5 == 141)
      {
        v889 = *((__int16 *)a3 + 1);
        if (v889 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v889 + 1073741760;
        v95 = *((__int16 *)a3 + 2);
        v890 = v95 + 1073741760;
        v891 = v95 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v95 = *(_DWORD *)(a3 + 6);
          goto LABEL_2479;
        }
        v892 = (char)a3[1];
        if (v892 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v892 + 1073741808;
        v95 = (char)a3[2];
        v890 = v95 + 1073741808;
        v891 = v95 <= 15;
      }
      if (!v891)
        v95 = v890;
LABEL_2479:
      v343 = v95;
      v893 = 1;
      if (v5 != 141)
        v893 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v893;
      v409 = "**f64_abs";
      goto LABEL_3336;
    case 85:
      if (v5 == 141)
      {
        v894 = *((__int16 *)a3 + 1);
        if (v894 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v894 + 1073741760;
        v96 = *((__int16 *)a3 + 2);
        v895 = v96 + 1073741760;
        v896 = v96 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v96 = *(_DWORD *)(a3 + 6);
          goto LABEL_2495;
        }
        v897 = (char)a3[1];
        if (v897 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v897 + 1073741808;
        v96 = (char)a3[2];
        v895 = v96 + 1073741808;
        v896 = v96 <= 15;
      }
      if (!v896)
        v96 = v895;
LABEL_2495:
      v343 = v96;
      v898 = 1;
      if (v5 != 141)
        v898 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v898;
      v409 = "**f64_neg";
      goto LABEL_3336;
    case 86:
      if (v5 == 141)
      {
        v899 = *((__int16 *)a3 + 1);
        if (v899 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v899 + 1073741760;
        v97 = *((__int16 *)a3 + 2);
        if (v97 > 63)
          v97 += 1073741760;
        v900 = *((__int16 *)a3 + 3);
        v901 = v900 + 1073741760;
        v902 = v900 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v97 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2516;
        }
        v903 = (char)a3[1];
        if (v903 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v903 + 1073741808;
        v97 = (char)a3[2];
        if (v97 > 15)
          v97 += 1073741808;
        v900 = (char)a3[3];
        v901 = v900 + 1073741808;
        v902 = v900 <= 15;
      }
      if (v902)
        v11 = v900;
      else
        v11 = v901;
LABEL_2516:
      v381 = v97;
      v904 = 1;
      if (v5 != 141)
        v904 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v904;
      v384 = "**f64_copysign";
      goto LABEL_5236;
    case 87:
      if (v5 == 141)
      {
        v905 = *((__int16 *)a3 + 1);
        if (v905 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v905 + 1073741760;
        v98 = *((__int16 *)a3 + 2);
        v906 = v98 + 1073741760;
        v907 = v98 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v98 = *(_DWORD *)(a3 + 6);
          goto LABEL_2532;
        }
        v908 = (char)a3[1];
        if (v908 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v908 + 1073741808;
        v98 = (char)a3[2];
        v906 = v98 + 1073741808;
        v907 = v98 <= 15;
      }
      if (!v907)
        v98 = v906;
LABEL_2532:
      v343 = v98;
      v909 = 1;
      if (v5 != 141)
        v909 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v909;
      v409 = "**f64_ceil";
      goto LABEL_3336;
    case 88:
      if (v5 == 141)
      {
        v910 = *((__int16 *)a3 + 1);
        if (v910 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v910 + 1073741760;
        v99 = *((__int16 *)a3 + 2);
        v911 = v99 + 1073741760;
        v912 = v99 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v99 = *(_DWORD *)(a3 + 6);
          goto LABEL_2548;
        }
        v913 = (char)a3[1];
        if (v913 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v913 + 1073741808;
        v99 = (char)a3[2];
        v911 = v99 + 1073741808;
        v912 = v99 <= 15;
      }
      if (!v912)
        v99 = v911;
LABEL_2548:
      v343 = v99;
      v914 = 1;
      if (v5 != 141)
        v914 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v914;
      v409 = "**f64_floor";
      goto LABEL_3336;
    case 89:
      if (v5 == 141)
      {
        v915 = *((__int16 *)a3 + 1);
        if (v915 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v915 + 1073741760;
        v100 = *((__int16 *)a3 + 2);
        v916 = v100 + 1073741760;
        v917 = v100 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v100 = *(_DWORD *)(a3 + 6);
          goto LABEL_2564;
        }
        v918 = (char)a3[1];
        if (v918 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v918 + 1073741808;
        v100 = (char)a3[2];
        v916 = v100 + 1073741808;
        v917 = v100 <= 15;
      }
      if (!v917)
        v100 = v916;
LABEL_2564:
      v343 = v100;
      v919 = 1;
      if (v5 != 141)
        v919 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v919;
      v409 = "**f64_trunc";
      goto LABEL_3336;
    case 90:
      if (v5 == 141)
      {
        v920 = *((__int16 *)a3 + 1);
        if (v920 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v920 + 1073741760;
        v101 = *((__int16 *)a3 + 2);
        v921 = v101 + 1073741760;
        v922 = v101 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v101 = *(_DWORD *)(a3 + 6);
          goto LABEL_2580;
        }
        v923 = (char)a3[1];
        if (v923 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v923 + 1073741808;
        v101 = (char)a3[2];
        v921 = v101 + 1073741808;
        v922 = v101 <= 15;
      }
      if (!v922)
        v101 = v921;
LABEL_2580:
      v343 = v101;
      v924 = 1;
      if (v5 != 141)
        v924 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v924;
      v409 = "**f64_nearest";
      goto LABEL_3336;
    case 91:
      if (v5 == 141)
      {
        v925 = *((__int16 *)a3 + 1);
        if (v925 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v925 + 1073741760;
        v102 = *((__int16 *)a3 + 2);
        v926 = v102 + 1073741760;
        v927 = v102 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v102 = *(_DWORD *)(a3 + 6);
          goto LABEL_2596;
        }
        v928 = (char)a3[1];
        if (v928 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v928 + 1073741808;
        v102 = (char)a3[2];
        v926 = v102 + 1073741808;
        v927 = v102 <= 15;
      }
      if (!v927)
        v102 = v926;
LABEL_2596:
      v343 = v102;
      v929 = 1;
      if (v5 != 141)
        v929 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v929;
      v409 = "**f64_sqrt";
      goto LABEL_3336;
    case 92:
      if (v5 == 141)
      {
        v930 = *((__int16 *)a3 + 1);
        if (v930 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v930 + 1073741760;
        v103 = *((__int16 *)a3 + 2);
        if (v103 > 63)
          v103 += 1073741760;
        v931 = *((__int16 *)a3 + 3);
        v932 = v931 + 1073741760;
        v933 = v931 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v103 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2617;
        }
        v934 = (char)a3[1];
        if (v934 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v934 + 1073741808;
        v103 = (char)a3[2];
        if (v103 > 15)
          v103 += 1073741808;
        v931 = (char)a3[3];
        v932 = v931 + 1073741808;
        v933 = v931 <= 15;
      }
      if (v933)
        v11 = v931;
      else
        v11 = v932;
LABEL_2617:
      v381 = v103;
      v935 = 1;
      if (v5 != 141)
        v935 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v935;
      v384 = "**f64_eq";
      goto LABEL_5236;
    case 93:
      if (v5 == 141)
      {
        v936 = *((__int16 *)a3 + 1);
        if (v936 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v936 + 1073741760;
        v104 = *((__int16 *)a3 + 2);
        if (v104 > 63)
          v104 += 1073741760;
        v937 = *((__int16 *)a3 + 3);
        v938 = v937 + 1073741760;
        v939 = v937 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v104 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2638;
        }
        v940 = (char)a3[1];
        if (v940 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v940 + 1073741808;
        v104 = (char)a3[2];
        if (v104 > 15)
          v104 += 1073741808;
        v937 = (char)a3[3];
        v938 = v937 + 1073741808;
        v939 = v937 <= 15;
      }
      if (v939)
        v11 = v937;
      else
        v11 = v938;
LABEL_2638:
      v381 = v104;
      v941 = 1;
      if (v5 != 141)
        v941 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v941;
      v384 = "**f64_ne";
      goto LABEL_5236;
    case 94:
      if (v5 == 141)
      {
        v942 = *((__int16 *)a3 + 1);
        if (v942 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v942 + 1073741760;
        v105 = *((__int16 *)a3 + 2);
        if (v105 > 63)
          v105 += 1073741760;
        v943 = *((__int16 *)a3 + 3);
        v944 = v943 + 1073741760;
        v945 = v943 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v105 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2659;
        }
        v946 = (char)a3[1];
        if (v946 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v946 + 1073741808;
        v105 = (char)a3[2];
        if (v105 > 15)
          v105 += 1073741808;
        v943 = (char)a3[3];
        v944 = v943 + 1073741808;
        v945 = v943 <= 15;
      }
      if (v945)
        v11 = v943;
      else
        v11 = v944;
LABEL_2659:
      v381 = v105;
      v947 = 1;
      if (v5 != 141)
        v947 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v947;
      v384 = "**f64_lt";
      goto LABEL_5236;
    case 95:
      if (v5 == 141)
      {
        v948 = *((__int16 *)a3 + 1);
        if (v948 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v948 + 1073741760;
        v106 = *((__int16 *)a3 + 2);
        if (v106 > 63)
          v106 += 1073741760;
        v949 = *((__int16 *)a3 + 3);
        v950 = v949 + 1073741760;
        v951 = v949 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v106 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2680;
        }
        v952 = (char)a3[1];
        if (v952 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v952 + 1073741808;
        v106 = (char)a3[2];
        if (v106 > 15)
          v106 += 1073741808;
        v949 = (char)a3[3];
        v950 = v949 + 1073741808;
        v951 = v949 <= 15;
      }
      if (v951)
        v11 = v949;
      else
        v11 = v950;
LABEL_2680:
      v381 = v106;
      v953 = 1;
      if (v5 != 141)
        v953 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v953;
      v384 = "**f64_le";
      goto LABEL_5236;
    case 96:
      if (v5 == 141)
      {
        v954 = *((__int16 *)a3 + 1);
        if (v954 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v954 + 1073741760;
        v107 = *((__int16 *)a3 + 2);
        if (v107 > 63)
          v107 += 1073741760;
        v955 = *((__int16 *)a3 + 3);
        v956 = v955 + 1073741760;
        v957 = v955 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v107 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2701;
        }
        v958 = (char)a3[1];
        if (v958 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v958 + 1073741808;
        v107 = (char)a3[2];
        if (v107 > 15)
          v107 += 1073741808;
        v955 = (char)a3[3];
        v956 = v955 + 1073741808;
        v957 = v955 <= 15;
      }
      if (v957)
        v11 = v955;
      else
        v11 = v956;
LABEL_2701:
      v381 = v107;
      v959 = 1;
      if (v5 != 141)
        v959 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v959;
      v384 = "**f64_gt";
      goto LABEL_5236;
    case 97:
      if (v5 == 141)
      {
        v960 = *((__int16 *)a3 + 1);
        if (v960 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v960 + 1073741760;
        v108 = *((__int16 *)a3 + 2);
        if (v108 > 63)
          v108 += 1073741760;
        v961 = *((__int16 *)a3 + 3);
        v962 = v961 + 1073741760;
        v963 = v961 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v108 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_2722;
        }
        v964 = (char)a3[1];
        if (v964 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v964 + 1073741808;
        v108 = (char)a3[2];
        if (v108 > 15)
          v108 += 1073741808;
        v961 = (char)a3[3];
        v962 = v961 + 1073741808;
        v963 = v961 <= 15;
      }
      if (v963)
        v11 = v961;
      else
        v11 = v962;
LABEL_2722:
      v381 = v108;
      v965 = 1;
      if (v5 != 141)
        v965 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v965;
      v384 = "**f64_ge";
      goto LABEL_5236;
    case 98:
      if (v5 == 141)
      {
        v966 = *((__int16 *)a3 + 1);
        if (v966 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v966 + 1073741760;
        v109 = *((__int16 *)a3 + 2);
        v967 = v109 + 1073741760;
        v968 = v109 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v109 = *(_DWORD *)(a3 + 6);
          goto LABEL_2738;
        }
        v969 = (char)a3[1];
        if (v969 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v969 + 1073741808;
        v109 = (char)a3[2];
        v967 = v109 + 1073741808;
        v968 = v109 <= 15;
      }
      if (!v968)
        v109 = v967;
LABEL_2738:
      v343 = v109;
      v970 = 1;
      if (v5 != 141)
        v970 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v970;
      v409 = "**i32_trunc_s_f32";
      goto LABEL_3336;
    case 99:
      if (v5 == 141)
      {
        v971 = *((__int16 *)a3 + 1);
        if (v971 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v971 + 1073741760;
        v110 = *((__int16 *)a3 + 2);
        v972 = v110 + 1073741760;
        v973 = v110 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v110 = *(_DWORD *)(a3 + 6);
          goto LABEL_2754;
        }
        v974 = (char)a3[1];
        if (v974 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v974 + 1073741808;
        v110 = (char)a3[2];
        v972 = v110 + 1073741808;
        v973 = v110 <= 15;
      }
      if (!v973)
        v110 = v972;
LABEL_2754:
      v343 = v110;
      v975 = 1;
      if (v5 != 141)
        v975 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v975;
      v409 = "**i32_trunc_s_f64";
      goto LABEL_3336;
    case 100:
      if (v5 == 141)
      {
        v976 = *((__int16 *)a3 + 1);
        if (v976 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v976 + 1073741760;
        v111 = *((__int16 *)a3 + 2);
        v977 = v111 + 1073741760;
        v978 = v111 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v111 = *(_DWORD *)(a3 + 6);
          goto LABEL_2770;
        }
        v979 = (char)a3[1];
        if (v979 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v979 + 1073741808;
        v111 = (char)a3[2];
        v977 = v111 + 1073741808;
        v978 = v111 <= 15;
      }
      if (!v978)
        v111 = v977;
LABEL_2770:
      v343 = v111;
      v980 = 1;
      if (v5 != 141)
        v980 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v980;
      v409 = "**i32_trunc_u_f32";
      goto LABEL_3336;
    case 101:
      if (v5 == 141)
      {
        v981 = *((__int16 *)a3 + 1);
        if (v981 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v981 + 1073741760;
        v112 = *((__int16 *)a3 + 2);
        v982 = v112 + 1073741760;
        v983 = v112 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v112 = *(_DWORD *)(a3 + 6);
          goto LABEL_2786;
        }
        v984 = (char)a3[1];
        if (v984 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v984 + 1073741808;
        v112 = (char)a3[2];
        v982 = v112 + 1073741808;
        v983 = v112 <= 15;
      }
      if (!v983)
        v112 = v982;
LABEL_2786:
      v343 = v112;
      v985 = 1;
      if (v5 != 141)
        v985 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v985;
      v409 = "**i32_trunc_u_f64";
      goto LABEL_3336;
    case 102:
      if (v5 == 141)
      {
        v986 = *((__int16 *)a3 + 1);
        if (v986 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v986 + 1073741760;
        v113 = *((__int16 *)a3 + 2);
        v987 = v113 + 1073741760;
        v988 = v113 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v113 = *(_DWORD *)(a3 + 6);
          goto LABEL_2802;
        }
        v989 = (char)a3[1];
        if (v989 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v989 + 1073741808;
        v113 = (char)a3[2];
        v987 = v113 + 1073741808;
        v988 = v113 <= 15;
      }
      if (!v988)
        v113 = v987;
LABEL_2802:
      v343 = v113;
      v990 = 1;
      if (v5 != 141)
        v990 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v990;
      v409 = "**i32_wrap_i64";
      goto LABEL_3336;
    case 103:
      if (v5 == 141)
      {
        v991 = *((__int16 *)a3 + 1);
        if (v991 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v991 + 1073741760;
        v114 = *((__int16 *)a3 + 2);
        v992 = v114 + 1073741760;
        v993 = v114 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v114 = *(_DWORD *)(a3 + 6);
          goto LABEL_2818;
        }
        v994 = (char)a3[1];
        if (v994 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v994 + 1073741808;
        v114 = (char)a3[2];
        v992 = v114 + 1073741808;
        v993 = v114 <= 15;
      }
      if (!v993)
        v114 = v992;
LABEL_2818:
      v343 = v114;
      v995 = 1;
      if (v5 != 141)
        v995 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v995;
      v409 = "**i64_trunc_s_f32";
      goto LABEL_3336;
    case 104:
      if (v5 == 141)
      {
        v996 = *((__int16 *)a3 + 1);
        if (v996 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v996 + 1073741760;
        v115 = *((__int16 *)a3 + 2);
        v997 = v115 + 1073741760;
        v998 = v115 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v115 = *(_DWORD *)(a3 + 6);
          goto LABEL_2834;
        }
        v999 = (char)a3[1];
        if (v999 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v999 + 1073741808;
        v115 = (char)a3[2];
        v997 = v115 + 1073741808;
        v998 = v115 <= 15;
      }
      if (!v998)
        v115 = v997;
LABEL_2834:
      v343 = v115;
      v1000 = 1;
      if (v5 != 141)
        v1000 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1000;
      v409 = "**i64_trunc_s_f64";
      goto LABEL_3336;
    case 105:
      if (v5 == 141)
      {
        v1001 = *((__int16 *)a3 + 1);
        if (v1001 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1001 + 1073741760;
        v116 = *((__int16 *)a3 + 2);
        v1002 = v116 + 1073741760;
        v1003 = v116 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v116 = *(_DWORD *)(a3 + 6);
          goto LABEL_2850;
        }
        v1004 = (char)a3[1];
        if (v1004 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1004 + 1073741808;
        v116 = (char)a3[2];
        v1002 = v116 + 1073741808;
        v1003 = v116 <= 15;
      }
      if (!v1003)
        v116 = v1002;
LABEL_2850:
      v343 = v116;
      v1005 = 1;
      if (v5 != 141)
        v1005 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1005;
      v409 = "**i64_trunc_u_f32";
      goto LABEL_3336;
    case 106:
      if (v5 == 141)
      {
        v1006 = *((__int16 *)a3 + 1);
        if (v1006 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1006 + 1073741760;
        v117 = *((__int16 *)a3 + 2);
        v1007 = v117 + 1073741760;
        v1008 = v117 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v117 = *(_DWORD *)(a3 + 6);
          goto LABEL_2866;
        }
        v1009 = (char)a3[1];
        if (v1009 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1009 + 1073741808;
        v117 = (char)a3[2];
        v1007 = v117 + 1073741808;
        v1008 = v117 <= 15;
      }
      if (!v1008)
        v117 = v1007;
LABEL_2866:
      v343 = v117;
      v1010 = 1;
      if (v5 != 141)
        v1010 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1010;
      v409 = "**i64_trunc_u_f64";
      goto LABEL_3336;
    case 107:
      if (v5 == 141)
      {
        v1011 = *((__int16 *)a3 + 1);
        if (v1011 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1011 + 1073741760;
        v118 = *((__int16 *)a3 + 2);
        v1012 = v118 + 1073741760;
        v1013 = v118 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v118 = *(_DWORD *)(a3 + 6);
          goto LABEL_2882;
        }
        v1014 = (char)a3[1];
        if (v1014 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1014 + 1073741808;
        v118 = (char)a3[2];
        v1012 = v118 + 1073741808;
        v1013 = v118 <= 15;
      }
      if (!v1013)
        v118 = v1012;
LABEL_2882:
      v343 = v118;
      v1015 = 1;
      if (v5 != 141)
        v1015 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1015;
      v409 = "**i64_extend_s_i32";
      goto LABEL_3336;
    case 108:
      if (v5 == 141)
      {
        v1016 = *((__int16 *)a3 + 1);
        if (v1016 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1016 + 1073741760;
        v119 = *((__int16 *)a3 + 2);
        v1017 = v119 + 1073741760;
        v1018 = v119 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v119 = *(_DWORD *)(a3 + 6);
          goto LABEL_2898;
        }
        v1019 = (char)a3[1];
        if (v1019 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1019 + 1073741808;
        v119 = (char)a3[2];
        v1017 = v119 + 1073741808;
        v1018 = v119 <= 15;
      }
      if (!v1018)
        v119 = v1017;
LABEL_2898:
      v343 = v119;
      v1020 = 1;
      if (v5 != 141)
        v1020 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1020;
      v409 = "**i64_extend_u_i32";
      goto LABEL_3336;
    case 109:
      if (v5 == 141)
      {
        v1021 = *((__int16 *)a3 + 1);
        if (v1021 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1021 + 1073741760;
        v120 = *((__int16 *)a3 + 2);
        v1022 = v120 + 1073741760;
        v1023 = v120 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v120 = *(_DWORD *)(a3 + 6);
          goto LABEL_2914;
        }
        v1024 = (char)a3[1];
        if (v1024 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1024 + 1073741808;
        v120 = (char)a3[2];
        v1022 = v120 + 1073741808;
        v1023 = v120 <= 15;
      }
      if (!v1023)
        v120 = v1022;
LABEL_2914:
      v343 = v120;
      v1025 = 1;
      if (v5 != 141)
        v1025 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1025;
      v409 = "**f32_convert_s_i32";
      goto LABEL_3336;
    case 110:
      if (v5 == 141)
      {
        v1026 = *((__int16 *)a3 + 1);
        if (v1026 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1026 + 1073741760;
        v121 = *((__int16 *)a3 + 2);
        v1027 = v121 + 1073741760;
        v1028 = v121 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v121 = *(_DWORD *)(a3 + 6);
          goto LABEL_2930;
        }
        v1029 = (char)a3[1];
        if (v1029 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1029 + 1073741808;
        v121 = (char)a3[2];
        v1027 = v121 + 1073741808;
        v1028 = v121 <= 15;
      }
      if (!v1028)
        v121 = v1027;
LABEL_2930:
      v343 = v121;
      v1030 = 1;
      if (v5 != 141)
        v1030 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1030;
      v409 = "**f32_convert_u_i32";
      goto LABEL_3336;
    case 111:
      if (v5 == 141)
      {
        v1031 = *((__int16 *)a3 + 1);
        if (v1031 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1031 + 1073741760;
        v122 = *((__int16 *)a3 + 2);
        v1032 = v122 + 1073741760;
        v1033 = v122 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v122 = *(_DWORD *)(a3 + 6);
          goto LABEL_2946;
        }
        v1034 = (char)a3[1];
        if (v1034 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1034 + 1073741808;
        v122 = (char)a3[2];
        v1032 = v122 + 1073741808;
        v1033 = v122 <= 15;
      }
      if (!v1033)
        v122 = v1032;
LABEL_2946:
      v343 = v122;
      v1035 = 1;
      if (v5 != 141)
        v1035 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1035;
      v409 = "**f32_convert_s_i64";
      goto LABEL_3336;
    case 112:
      if (v5 == 141)
      {
        v1036 = *((__int16 *)a3 + 1);
        if (v1036 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1036 + 1073741760;
        v123 = *((__int16 *)a3 + 2);
        v1037 = v123 + 1073741760;
        v1038 = v123 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v123 = *(_DWORD *)(a3 + 6);
          goto LABEL_2962;
        }
        v1039 = (char)a3[1];
        if (v1039 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1039 + 1073741808;
        v123 = (char)a3[2];
        v1037 = v123 + 1073741808;
        v1038 = v123 <= 15;
      }
      if (!v1038)
        v123 = v1037;
LABEL_2962:
      v343 = v123;
      v1040 = 1;
      if (v5 != 141)
        v1040 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1040;
      v409 = "**f32_convert_u_i64";
      goto LABEL_3336;
    case 113:
      if (v5 == 141)
      {
        v1041 = *((__int16 *)a3 + 1);
        if (v1041 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1041 + 1073741760;
        v124 = *((__int16 *)a3 + 2);
        v1042 = v124 + 1073741760;
        v1043 = v124 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v124 = *(_DWORD *)(a3 + 6);
          goto LABEL_2978;
        }
        v1044 = (char)a3[1];
        if (v1044 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1044 + 1073741808;
        v124 = (char)a3[2];
        v1042 = v124 + 1073741808;
        v1043 = v124 <= 15;
      }
      if (!v1043)
        v124 = v1042;
LABEL_2978:
      v343 = v124;
      v1045 = 1;
      if (v5 != 141)
        v1045 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1045;
      v409 = "**f32_demote_f64";
      goto LABEL_3336;
    case 114:
      if (v5 == 141)
      {
        v1046 = *((__int16 *)a3 + 1);
        if (v1046 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1046 + 1073741760;
        v125 = *((__int16 *)a3 + 2);
        v1047 = v125 + 1073741760;
        v1048 = v125 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v125 = *(_DWORD *)(a3 + 6);
          goto LABEL_2994;
        }
        v1049 = (char)a3[1];
        if (v1049 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1049 + 1073741808;
        v125 = (char)a3[2];
        v1047 = v125 + 1073741808;
        v1048 = v125 <= 15;
      }
      if (!v1048)
        v125 = v1047;
LABEL_2994:
      v343 = v125;
      v1050 = 1;
      if (v5 != 141)
        v1050 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1050;
      v409 = "**f32_reinterpret_i32";
      goto LABEL_3336;
    case 115:
      if (v5 == 141)
      {
        v1051 = *((__int16 *)a3 + 1);
        if (v1051 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1051 + 1073741760;
        v126 = *((__int16 *)a3 + 2);
        v1052 = v126 + 1073741760;
        v1053 = v126 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v126 = *(_DWORD *)(a3 + 6);
          goto LABEL_3010;
        }
        v1054 = (char)a3[1];
        if (v1054 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1054 + 1073741808;
        v126 = (char)a3[2];
        v1052 = v126 + 1073741808;
        v1053 = v126 <= 15;
      }
      if (!v1053)
        v126 = v1052;
LABEL_3010:
      v343 = v126;
      v1055 = 1;
      if (v5 != 141)
        v1055 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1055;
      v409 = "**f64_convert_s_i32";
      goto LABEL_3336;
    case 116:
      if (v5 == 141)
      {
        v1056 = *((__int16 *)a3 + 1);
        if (v1056 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1056 + 1073741760;
        v127 = *((__int16 *)a3 + 2);
        v1057 = v127 + 1073741760;
        v1058 = v127 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v127 = *(_DWORD *)(a3 + 6);
          goto LABEL_3026;
        }
        v1059 = (char)a3[1];
        if (v1059 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1059 + 1073741808;
        v127 = (char)a3[2];
        v1057 = v127 + 1073741808;
        v1058 = v127 <= 15;
      }
      if (!v1058)
        v127 = v1057;
LABEL_3026:
      v343 = v127;
      v1060 = 1;
      if (v5 != 141)
        v1060 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1060;
      v409 = "**f64_convert_u_i32";
      goto LABEL_3336;
    case 117:
      if (v5 == 141)
      {
        v1061 = *((__int16 *)a3 + 1);
        if (v1061 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1061 + 1073741760;
        v128 = *((__int16 *)a3 + 2);
        v1062 = v128 + 1073741760;
        v1063 = v128 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v128 = *(_DWORD *)(a3 + 6);
          goto LABEL_3042;
        }
        v1064 = (char)a3[1];
        if (v1064 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1064 + 1073741808;
        v128 = (char)a3[2];
        v1062 = v128 + 1073741808;
        v1063 = v128 <= 15;
      }
      if (!v1063)
        v128 = v1062;
LABEL_3042:
      v343 = v128;
      v1065 = 1;
      if (v5 != 141)
        v1065 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1065;
      v409 = "**f64_convert_s_i64";
      goto LABEL_3336;
    case 118:
      if (v5 == 141)
      {
        v1066 = *((__int16 *)a3 + 1);
        if (v1066 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1066 + 1073741760;
        v129 = *((__int16 *)a3 + 2);
        v1067 = v129 + 1073741760;
        v1068 = v129 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v129 = *(_DWORD *)(a3 + 6);
          goto LABEL_3058;
        }
        v1069 = (char)a3[1];
        if (v1069 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1069 + 1073741808;
        v129 = (char)a3[2];
        v1067 = v129 + 1073741808;
        v1068 = v129 <= 15;
      }
      if (!v1068)
        v129 = v1067;
LABEL_3058:
      v343 = v129;
      v1070 = 1;
      if (v5 != 141)
        v1070 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1070;
      v409 = "**f64_convert_u_i64";
      goto LABEL_3336;
    case 119:
      if (v5 == 141)
      {
        v1071 = *((__int16 *)a3 + 1);
        if (v1071 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1071 + 1073741760;
        v130 = *((__int16 *)a3 + 2);
        v1072 = v130 + 1073741760;
        v1073 = v130 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v130 = *(_DWORD *)(a3 + 6);
          goto LABEL_3074;
        }
        v1074 = (char)a3[1];
        if (v1074 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1074 + 1073741808;
        v130 = (char)a3[2];
        v1072 = v130 + 1073741808;
        v1073 = v130 <= 15;
      }
      if (!v1073)
        v130 = v1072;
LABEL_3074:
      v343 = v130;
      v1075 = 1;
      if (v5 != 141)
        v1075 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1075;
      v409 = "**f64_promote_f32";
      goto LABEL_3336;
    case 120:
      if (v5 == 141)
      {
        v1076 = *((__int16 *)a3 + 1);
        if (v1076 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1076 + 1073741760;
        v131 = *((__int16 *)a3 + 2);
        v1077 = v131 + 1073741760;
        v1078 = v131 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v131 = *(_DWORD *)(a3 + 6);
          goto LABEL_3090;
        }
        v1079 = (char)a3[1];
        if (v1079 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1079 + 1073741808;
        v131 = (char)a3[2];
        v1077 = v131 + 1073741808;
        v1078 = v131 <= 15;
      }
      if (!v1078)
        v131 = v1077;
LABEL_3090:
      v343 = v131;
      v1080 = 1;
      if (v5 != 141)
        v1080 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1080;
      v409 = "**f64_reinterpret_i64";
      goto LABEL_3336;
    case 121:
      if (v5 == 141)
      {
        v1081 = *((__int16 *)a3 + 1);
        if (v1081 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1081 + 1073741760;
        v132 = *((__int16 *)a3 + 2);
        v1082 = v132 + 1073741760;
        v1083 = v132 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v132 = *(_DWORD *)(a3 + 6);
          goto LABEL_3106;
        }
        v1084 = (char)a3[1];
        if (v1084 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1084 + 1073741808;
        v132 = (char)a3[2];
        v1082 = v132 + 1073741808;
        v1083 = v132 <= 15;
      }
      if (!v1083)
        v132 = v1082;
LABEL_3106:
      v343 = v132;
      v1085 = 1;
      if (v5 != 141)
        v1085 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1085;
      v409 = "**i32_reinterpret_f32";
      goto LABEL_3336;
    case 122:
      if (v5 == 141)
      {
        v1086 = *((__int16 *)a3 + 1);
        if (v1086 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1086 + 1073741760;
        v133 = *((__int16 *)a3 + 2);
        v1087 = v133 + 1073741760;
        v1088 = v133 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v133 = *(_DWORD *)(a3 + 6);
          goto LABEL_3122;
        }
        v1089 = (char)a3[1];
        if (v1089 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1089 + 1073741808;
        v133 = (char)a3[2];
        v1087 = v133 + 1073741808;
        v1088 = v133 <= 15;
      }
      if (!v1088)
        v133 = v1087;
LABEL_3122:
      v343 = v133;
      v1090 = 1;
      if (v5 != 141)
        v1090 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1090;
      v409 = "**i64_reinterpret_f64";
      goto LABEL_3336;
    case 123:
      if (v5 == 141)
      {
        v1091 = *((__int16 *)a3 + 1);
        if (v1091 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1091 + 1073741760;
        v134 = *((__int16 *)a3 + 2);
        v1092 = v134 + 1073741760;
        v1093 = v134 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v134 = *(_DWORD *)(a3 + 6);
          goto LABEL_3138;
        }
        v1094 = (char)a3[1];
        if (v1094 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1094 + 1073741808;
        v134 = (char)a3[2];
        v1092 = v134 + 1073741808;
        v1093 = v134 <= 15;
      }
      if (!v1093)
        v134 = v1092;
LABEL_3138:
      v343 = v134;
      v1095 = 1;
      if (v5 != 141)
        v1095 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1095;
      v409 = "**i32_extend8_s";
      goto LABEL_3336;
    case 124:
      if (v5 == 141)
      {
        v1096 = *((__int16 *)a3 + 1);
        if (v1096 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1096 + 1073741760;
        v135 = *((__int16 *)a3 + 2);
        v1097 = v135 + 1073741760;
        v1098 = v135 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v135 = *(_DWORD *)(a3 + 6);
          goto LABEL_3154;
        }
        v1099 = (char)a3[1];
        if (v1099 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1099 + 1073741808;
        v135 = (char)a3[2];
        v1097 = v135 + 1073741808;
        v1098 = v135 <= 15;
      }
      if (!v1098)
        v135 = v1097;
LABEL_3154:
      v343 = v135;
      v1100 = 1;
      if (v5 != 141)
        v1100 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1100;
      v409 = "**i32_extend16_s";
      goto LABEL_3336;
    case 125:
      if (v5 == 141)
      {
        v1101 = *((__int16 *)a3 + 1);
        if (v1101 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1101 + 1073741760;
        v136 = *((__int16 *)a3 + 2);
        v1102 = v136 + 1073741760;
        v1103 = v136 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v136 = *(_DWORD *)(a3 + 6);
          goto LABEL_3170;
        }
        v1104 = (char)a3[1];
        if (v1104 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1104 + 1073741808;
        v136 = (char)a3[2];
        v1102 = v136 + 1073741808;
        v1103 = v136 <= 15;
      }
      if (!v1103)
        v136 = v1102;
LABEL_3170:
      v343 = v136;
      v1105 = 1;
      if (v5 != 141)
        v1105 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1105;
      v409 = "**i64_extend8_s";
      goto LABEL_3336;
    case 126:
      if (v5 == 141)
      {
        v1106 = *((__int16 *)a3 + 1);
        if (v1106 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1106 + 1073741760;
        v137 = *((__int16 *)a3 + 2);
        v1107 = v137 + 1073741760;
        v1108 = v137 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v137 = *(_DWORD *)(a3 + 6);
          goto LABEL_3186;
        }
        v1109 = (char)a3[1];
        if (v1109 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1109 + 1073741808;
        v137 = (char)a3[2];
        v1107 = v137 + 1073741808;
        v1108 = v137 <= 15;
      }
      if (!v1108)
        v137 = v1107;
LABEL_3186:
      v343 = v137;
      v1110 = 1;
      if (v5 != 141)
        v1110 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1110;
      v409 = "**i64_extend16_s";
      goto LABEL_3336;
    case 127:
      if (v5 == 141)
      {
        v1111 = *((__int16 *)a3 + 1);
        if (v1111 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1111 + 1073741760;
        v138 = *((__int16 *)a3 + 2);
        v1112 = v138 + 1073741760;
        v1113 = v138 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v138 = *(_DWORD *)(a3 + 6);
          goto LABEL_3202;
        }
        v1114 = (char)a3[1];
        if (v1114 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1114 + 1073741808;
        v138 = (char)a3[2];
        v1112 = v138 + 1073741808;
        v1113 = v138 <= 15;
      }
      if (!v1113)
        v138 = v1112;
LABEL_3202:
      v343 = v138;
      v1115 = 1;
      if (v5 != 141)
        v1115 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1115;
      v409 = "**i64_extend32_s";
      goto LABEL_3336;
    case 128:
      if (v5 == 141)
      {
        v1116 = *((__int16 *)a3 + 1);
        if (v1116 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1116 + 1073741760;
        v139 = *((__int16 *)a3 + 2);
        v1117 = v139 + 1073741760;
        v1118 = v139 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v139 = *(_DWORD *)(a3 + 6);
          goto LABEL_3218;
        }
        v1119 = (char)a3[1];
        if (v1119 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1119 + 1073741808;
        v139 = (char)a3[2];
        v1117 = v139 + 1073741808;
        v1118 = v139 <= 15;
      }
      if (!v1118)
        v139 = v1117;
LABEL_3218:
      v343 = v139;
      v1120 = 1;
      if (v5 != 141)
        v1120 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1120;
      v409 = "**i32_trunc_sat_f32_s";
      goto LABEL_3336;
    case 129:
      if (v5 == 141)
      {
        v1121 = *((__int16 *)a3 + 1);
        if (v1121 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1121 + 1073741760;
        v140 = *((__int16 *)a3 + 2);
        v1122 = v140 + 1073741760;
        v1123 = v140 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v140 = *(_DWORD *)(a3 + 6);
          goto LABEL_3234;
        }
        v1124 = (char)a3[1];
        if (v1124 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1124 + 1073741808;
        v140 = (char)a3[2];
        v1122 = v140 + 1073741808;
        v1123 = v140 <= 15;
      }
      if (!v1123)
        v140 = v1122;
LABEL_3234:
      v343 = v140;
      v1125 = 1;
      if (v5 != 141)
        v1125 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1125;
      v409 = "**i32_trunc_sat_f32_u";
      goto LABEL_3336;
    case 130:
      if (v5 == 141)
      {
        v1126 = *((__int16 *)a3 + 1);
        if (v1126 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1126 + 1073741760;
        v141 = *((__int16 *)a3 + 2);
        v1127 = v141 + 1073741760;
        v1128 = v141 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v141 = *(_DWORD *)(a3 + 6);
          goto LABEL_3250;
        }
        v1129 = (char)a3[1];
        if (v1129 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1129 + 1073741808;
        v141 = (char)a3[2];
        v1127 = v141 + 1073741808;
        v1128 = v141 <= 15;
      }
      if (!v1128)
        v141 = v1127;
LABEL_3250:
      v343 = v141;
      v1130 = 1;
      if (v5 != 141)
        v1130 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1130;
      v409 = "**i32_trunc_sat_f64_s";
      goto LABEL_3336;
    case 131:
      if (v5 == 141)
      {
        v1131 = *((__int16 *)a3 + 1);
        if (v1131 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1131 + 1073741760;
        v142 = *((__int16 *)a3 + 2);
        v1132 = v142 + 1073741760;
        v1133 = v142 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v142 = *(_DWORD *)(a3 + 6);
          goto LABEL_3266;
        }
        v1134 = (char)a3[1];
        if (v1134 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1134 + 1073741808;
        v142 = (char)a3[2];
        v1132 = v142 + 1073741808;
        v1133 = v142 <= 15;
      }
      if (!v1133)
        v142 = v1132;
LABEL_3266:
      v343 = v142;
      v1135 = 1;
      if (v5 != 141)
        v1135 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1135;
      v409 = "**i32_trunc_sat_f64_u";
      goto LABEL_3336;
    case 132:
      if (v5 == 141)
      {
        v1136 = *((__int16 *)a3 + 1);
        if (v1136 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1136 + 1073741760;
        v143 = *((__int16 *)a3 + 2);
        v1137 = v143 + 1073741760;
        v1138 = v143 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v143 = *(_DWORD *)(a3 + 6);
          goto LABEL_3282;
        }
        v1139 = (char)a3[1];
        if (v1139 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1139 + 1073741808;
        v143 = (char)a3[2];
        v1137 = v143 + 1073741808;
        v1138 = v143 <= 15;
      }
      if (!v1138)
        v143 = v1137;
LABEL_3282:
      v343 = v143;
      v1140 = 1;
      if (v5 != 141)
        v1140 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1140;
      v409 = "**i64_trunc_sat_f32_s";
      goto LABEL_3336;
    case 133:
      if (v5 == 141)
      {
        v1141 = *((__int16 *)a3 + 1);
        if (v1141 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1141 + 1073741760;
        v144 = *((__int16 *)a3 + 2);
        v1142 = v144 + 1073741760;
        v1143 = v144 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v144 = *(_DWORD *)(a3 + 6);
          goto LABEL_3298;
        }
        v1144 = (char)a3[1];
        if (v1144 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1144 + 1073741808;
        v144 = (char)a3[2];
        v1142 = v144 + 1073741808;
        v1143 = v144 <= 15;
      }
      if (!v1143)
        v144 = v1142;
LABEL_3298:
      v343 = v144;
      v1145 = 1;
      if (v5 != 141)
        v1145 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1145;
      v409 = "**i64_trunc_sat_f32_u";
      goto LABEL_3336;
    case 134:
      if (v5 == 141)
      {
        v1146 = *((__int16 *)a3 + 1);
        if (v1146 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1146 + 1073741760;
        v145 = *((__int16 *)a3 + 2);
        v1147 = v145 + 1073741760;
        v1148 = v145 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v145 = *(_DWORD *)(a3 + 6);
          goto LABEL_3314;
        }
        v1149 = (char)a3[1];
        if (v1149 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1149 + 1073741808;
        v145 = (char)a3[2];
        v1147 = v145 + 1073741808;
        v1148 = v145 <= 15;
      }
      if (!v1148)
        v145 = v1147;
LABEL_3314:
      v343 = v145;
      v1150 = 1;
      if (v5 != 141)
        v1150 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1150;
      v409 = "**i64_trunc_sat_f64_s";
      goto LABEL_3336;
    case 135:
      if (v5 == 141)
      {
        v1151 = *((__int16 *)a3 + 1);
        if (v1151 <= 63)
          v15 = *((__int16 *)a3 + 1);
        else
          v15 = v1151 + 1073741760;
        v146 = *((__int16 *)a3 + 2);
        v1152 = v146 + 1073741760;
        v1153 = v146 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v15 = *(_DWORD *)(a3 + 2);
          v146 = *(_DWORD *)(a3 + 6);
          goto LABEL_3330;
        }
        v1154 = (char)a3[1];
        if (v1154 <= 15)
          v15 = (char)a3[1];
        else
          v15 = v1154 + 1073741808;
        v146 = (char)a3[2];
        v1152 = v146 + 1073741808;
        v1153 = v146 <= 15;
      }
      if (!v1153)
        v146 = v1152;
LABEL_3330:
      v343 = v146;
      v1155 = 1;
      if (v5 != 141)
        v1155 = 2;
      if (v5 == 142)
        v408 = 0;
      else
        v408 = v1155;
      v409 = "**i64_trunc_sat_f64_u";
LABEL_3336:
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &v409[v408]);
      v1156 = *(_QWORD *)(a1 + 8);
      v1157 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1156 + 32))(v1156);
      WTF::PrintStream::printf(v1157, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v1156 + 40))(v1156);
      v1158 = *(_QWORD *)(a1 + 8);
      v1159 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1158 + 32))(v1158);
      WTF::PrintStream::printf(v1159, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1158 + 40))(v1158);
      v1160 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v15);
      if (v2819)
        v1161 = (char *)v2819 + 16;
      else
        v1161 = 0;
      WTF::PrintStream::printf(v1160, "%s", v1161);
      v1169 = v2819;
      v2819 = 0;
      if (v1169)
      {
        if (*(_DWORD *)v1169 == 1)
          WTF::fastFree((unint64_t)v1169, v1162, v1163, v1164, v1165, v1166, v1167, v1168);
        else
          --*(_DWORD *)v1169;
      }
      v1170 = *(_QWORD *)(a1 + 8);
      v1171 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1170 + 32))(v1170);
      WTF::PrintStream::printf(v1171, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1170 + 40))(v1170);
      v465 = *(_QWORD *)(a1 + 8);
      v466 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 32))(v465);
      v467 = "operand";
      goto LABEL_5249;
    case 136:
      v147 = 1;
      if (v5 != 141)
        v147 = 2;
      if (v5 == 142)
        v148 = 0;
      else
        v148 = v147;
      v149 = "**throw_from_slow_path_trampoline";
      goto LABEL_733;
    case 137:
      v150 = 1;
      if (v5 != 141)
        v150 = 2;
      if (v5 == 142)
        v148 = 0;
      else
        v148 = v150;
      v149 = "**throw_from_fault_handler_trampoline_reg_instance";
      goto LABEL_733;
    case 138:
      v151 = 1;
      if (v5 != 141)
        v151 = 2;
      if (v5 == 142)
        v148 = 0;
      else
        v148 = v151;
      v149 = "**call_return_location";
      goto LABEL_733;
    case 139:
      v152 = 1;
      if (v5 != 141)
        v152 = 2;
      if (v5 == 142)
        v148 = 0;
      else
        v148 = v152;
      v149 = "**call_indirect_return_location";
      goto LABEL_733;
    case 140:
      v153 = 1;
      if (v5 != 141)
        v153 = 2;
      if (v5 == 142)
        v148 = 0;
      else
        v148 = v153;
      v149 = "**call_ref_return_location";
      goto LABEL_733;
    case 141:
      v154 = 1;
      if (v5 != 141)
        v154 = 2;
      if (v5 == 142)
        v148 = 0;
      else
        v148 = v154;
      v149 = "**wide16";
      goto LABEL_733;
    case 142:
      v155 = 1;
      if (v5 != 141)
        v155 = 2;
      if (v5 == 142)
        v148 = 0;
      else
        v148 = v155;
      v149 = "**wide32";
      goto LABEL_733;
    case 143:
      v156 = 1;
      if (v5 != 141)
        v156 = 2;
      if (v5 == 142)
        v148 = 0;
      else
        v148 = v156;
      v149 = "**enter";
      goto LABEL_733;
    case 144:
      v157 = 1;
      if (v5 != 141)
        v157 = 2;
      if (v5 == 142)
        v148 = 0;
      else
        v148 = v157;
      v149 = "**nop";
      goto LABEL_733;
    case 145:
      v158 = 1;
      if (v5 != 141)
        v158 = 2;
      if (v5 == 142)
        v148 = 0;
      else
        v148 = v158;
      v149 = "**loop_hint";
      goto LABEL_733;
    case 146:
      if (v5 == 141)
      {
        v1172 = *((__int16 *)a3 + 1);
        if (v1172 <= 63)
          v159 = *((__int16 *)a3 + 1);
        else
          v159 = v1172 + 1073741760;
        v160 = *((__int16 *)a3 + 2);
        v1173 = v160 + 1073741760;
        v1174 = v160 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v159 = *(_DWORD *)(a3 + 2);
          v160 = *(_DWORD *)(a3 + 6);
          goto LABEL_3354;
        }
        v1175 = (char)a3[1];
        if (v1175 <= 15)
          v159 = (char)a3[1];
        else
          v159 = v1175 + 1073741808;
        v160 = (char)a3[2];
        v1173 = v160 + 1073741808;
        v1174 = v160 <= 15;
      }
      if (!v1174)
        v160 = v1173;
LABEL_3354:
      v343 = v160;
      v1176 = 1;
      if (v5 != 141)
        v1176 = 2;
      if (v5 == 142)
        v1177 = 0;
      else
        v1177 = v1176;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aMov[v1177]);
      v1178 = *(_QWORD *)(a1 + 8);
      v1179 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1178 + 32))(v1178);
      WTF::PrintStream::printf(v1179, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v1178 + 40))(v1178);
      v1180 = *(_QWORD *)(a1 + 8);
      v1181 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1180 + 32))(v1180);
      WTF::PrintStream::printf(v1181, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1180 + 40))(v1180);
      v1182 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v159);
      if (v2819)
        v1183 = (char *)v2819 + 16;
      else
        v1183 = 0;
      WTF::PrintStream::printf(v1182, "%s", v1183);
      v1191 = v2819;
      v2819 = 0;
      if (v1191)
      {
        if (*(_DWORD *)v1191 == 1)
          WTF::fastFree((unint64_t)v1191, v1184, v1185, v1186, v1187, v1188, v1189, v1190);
        else
          --*(_DWORD *)v1191;
      }
      v1192 = *(_QWORD *)(a1 + 8);
      v1193 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1192 + 32))(v1192);
      WTF::PrintStream::printf(v1193, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1192 + 40))(v1192);
      v465 = *(_QWORD *)(a1 + 8);
      v466 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 32))(v465);
      v467 = "src";
      goto LABEL_5249;
    case 147:
      if (v5 == 141)
      {
        v1194 = *((__int16 *)a3 + 1);
        if (v1194 <= 63)
          v161 = *((__int16 *)a3 + 1);
        else
          v161 = v1194 + 1073741760;
        v162 = *((__int16 *)a3 + 2);
      }
      else if (v5 == 142)
      {
        v161 = *(_DWORD *)(a3 + 2);
        v162 = *(_DWORD *)(a3 + 6);
      }
      else
      {
        v1195 = (char)a3[1];
        if (v1195 <= 15)
          v161 = (char)a3[1];
        else
          v161 = v1195 + 1073741808;
        v162 = (char)a3[2];
      }
      v1196 = 1;
      if (v5 != 141)
        v1196 = 2;
      if (v5 == 142)
        v1197 = 0;
      else
        v1197 = v1196;
      v1198 = "**jtrue";
      goto LABEL_3394;
    case 148:
      if (v5 == 141)
      {
        v1199 = *((__int16 *)a3 + 1);
        if (v1199 <= 63)
          v161 = *((__int16 *)a3 + 1);
        else
          v161 = v1199 + 1073741760;
        v162 = *((__int16 *)a3 + 2);
      }
      else if (v5 == 142)
      {
        v161 = *(_DWORD *)(a3 + 2);
        v162 = *(_DWORD *)(a3 + 6);
      }
      else
      {
        v1200 = (char)a3[1];
        if (v1200 <= 15)
          v161 = (char)a3[1];
        else
          v161 = v1200 + 1073741808;
        v162 = (char)a3[2];
      }
      v1201 = 1;
      if (v5 != 141)
        v1201 = 2;
      if (v5 == 142)
        v1197 = 0;
      else
        v1197 = v1201;
      v1198 = "**jfalse";
LABEL_3394:
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &v1198[v1197]);
      v1202 = *(_QWORD *)(a1 + 8);
      v1203 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1202 + 32))(v1202);
      WTF::PrintStream::printf(v1203, "%s", "condition");
      (*(void (**)(uint64_t))(*(_QWORD *)v1202 + 40))(v1202);
      v1204 = *(_QWORD *)(a1 + 8);
      v1205 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1204 + 32))(v1204);
      WTF::PrintStream::printf(v1205, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1204 + 40))(v1204);
      v1206 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v161);
      if (v2819)
        v1207 = (char *)v2819 + 16;
      else
        v1207 = 0;
      WTF::PrintStream::printf(v1206, "%s", v1207);
      v1215 = v2819;
      v2819 = 0;
      if (v1215)
      {
        if (*(_DWORD *)v1215 == 1)
          WTF::fastFree((unint64_t)v1215, v1208, v1209, v1210, v1211, v1212, v1213, v1214);
        else
          --*(_DWORD *)v1215;
      }
      v1216 = *(_QWORD *)(a1 + 8);
      v1217 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1216 + 32))(v1216);
      WTF::PrintStream::printf(v1217, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1216 + 40))(v1216);
      v1218 = *(_QWORD *)(a1 + 8);
      v1219 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1218 + 32))(v1218);
      WTF::PrintStream::printf(v1219, "%s", "targetLabel");
      (*(void (**)(uint64_t))(*(_QWORD *)v1218 + 40))(v1218);
      v1220 = *(_QWORD *)(a1 + 8);
      v1221 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1220 + 32))(v1220);
      WTF::PrintStream::printf(v1221, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1220 + 40))(v1220);
      LOBYTE(v2819) = 0;
      HIDWORD(v2819) = 0;
      v2820 = 0;
      v2821 = v162;
      goto LABEL_3409;
    case 149:
      if (v5 == 141)
      {
        v163 = *((__int16 *)a3 + 1);
      }
      else if (v5 == 142)
      {
        v163 = *(_DWORD *)(a3 + 2);
      }
      else
      {
        v163 = (char)a3[1];
      }
      v1222 = 1;
      if (v5 != 141)
        v1222 = 2;
      if (v5 == 142)
        v1223 = 0;
      else
        v1223 = v1222;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aJmp[v1223]);
      v1224 = *(_QWORD *)(a1 + 8);
      v1225 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1224 + 32))(v1224);
      WTF::PrintStream::printf(v1225, "%s", "targetLabel");
      (*(void (**)(uint64_t))(*(_QWORD *)v1224 + 40))(v1224);
      v1226 = *(_QWORD *)(a1 + 8);
      v1227 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1226 + 32))(v1226);
      WTF::PrintStream::printf(v1227, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1226 + 40))(v1226);
      LOBYTE(v2819) = 0;
      HIDWORD(v2819) = 0;
      v2820 = 0;
      v2821 = v163;
LABEL_3409:
      JSC::BytecodeDumperBase<JSC::InstructionStream<JSC::BaseInstruction<JSC::WasmOpcodeTraits>>>::dumpValue<JSC::Wasm::GeneratorTraits>(a1, (unsigned __int8 *)&v2819);
      return;
    case 150:
      v164 = 1;
      if (v5 != 141)
        v164 = 2;
      if (v5 == 142)
        v148 = 0;
      else
        v148 = v164;
      v149 = "**ret";
      goto LABEL_733;
    case 151:
      if (v5 == 141)
      {
        v1228 = *((__int16 *)a3 + 1);
        if (v1228 <= 63)
          v165 = *((__int16 *)a3 + 1);
        else
          v165 = v1228 + 1073741760;
      }
      else if (v5 == 142)
      {
        v165 = *(_DWORD *)(a3 + 2);
      }
      else
      {
        v1229 = (char)a3[1];
        if (v1229 <= 15)
          v165 = (char)a3[1];
        else
          v165 = v1229 + 1073741808;
      }
      v1230 = 1;
      if (v5 != 141)
        v1230 = 2;
      if (v5 == 142)
        v1231 = 0;
      else
        v1231 = v1230;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aSwitch[v1231]);
      v1232 = *(_QWORD *)(a1 + 8);
      v1233 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1232 + 32))(v1232);
      WTF::PrintStream::printf(v1233, "%s", "scrutinee");
      (*(void (**)(uint64_t))(*(_QWORD *)v1232 + 40))(v1232);
      v1234 = *(_QWORD *)(a1 + 8);
      v1235 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1234 + 32))(v1234);
      WTF::PrintStream::printf(v1235, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1234 + 40))(v1234);
      v1236 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v165);
      if (v2819)
        v1237 = (char *)v2819 + 16;
      else
        v1237 = 0;
      WTF::PrintStream::printf(v1236, "%s", v1237);
      v1245 = v2819;
      v2819 = 0;
      if (!v1245)
        goto LABEL_3427;
      if (*(_DWORD *)v1245 == 1)
        goto LABEL_5270;
      --*(_DWORD *)v1245;
      goto LABEL_3427;
    case 152:
      v166 = 1;
      if (v5 != 141)
        v166 = 2;
      if (v5 == 142)
        v148 = 0;
      else
        v148 = v166;
      v149 = "**unreachable";
      goto LABEL_733;
    case 153:
      v167 = 1;
      if (v5 != 141)
        v167 = 2;
      if (v5 == 142)
        v148 = 0;
      else
        v148 = v167;
      v149 = "**ret_void";
      goto LABEL_733;
    case 154:
      if (v5 == 141)
      {
        v168 = *((unsigned __int16 *)a3 + 1);
        v169 = *((unsigned __int16 *)a3 + 2);
        v170 = *((unsigned __int16 *)a3 + 3);
      }
      else if (v5 == 142)
      {
        v168 = *(_DWORD *)(a3 + 2);
        v169 = *(_DWORD *)(a3 + 6);
        v170 = *(_DWORD *)(a3 + 10);
      }
      else
      {
        v168 = a3[1];
        v169 = a3[2];
        v170 = a3[3];
      }
      v1251 = 1;
      if (v5 != 141)
        v1251 = 2;
      if (v5 == 142)
        v1252 = 0;
      else
        v1252 = v1251;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aDropKeep[v1252]);
      v1253 = *(_QWORD *)(a1 + 8);
      v1254 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1253 + 32))(v1253);
      WTF::PrintStream::printf(v1254, "%s", "startOffset");
      (*(void (**)(uint64_t))(*(_QWORD *)v1253 + 40))(v1253);
      v1255 = *(_QWORD *)(a1 + 8);
      v1256 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1255 + 32))(v1255);
      WTF::PrintStream::printf(v1256, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1255 + 40))(v1255);
      v1257 = *(_QWORD *)(a1 + 8);
      v1258 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1257 + 32))(v1257);
      WTF::PrintStream::printf(v1258, "%u", v168);
      (*(void (**)(uint64_t))(*(_QWORD *)v1257 + 40))(v1257);
      v1259 = *(_QWORD *)(a1 + 8);
      v1260 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1259 + 32))(v1259);
      WTF::PrintStream::printf(v1260, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1259 + 40))(v1259);
      v1261 = *(_QWORD *)(a1 + 8);
      v1262 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1261 + 32))(v1261);
      WTF::PrintStream::printf(v1262, "%s", "dropCount");
      (*(void (**)(uint64_t))(*(_QWORD *)v1261 + 40))(v1261);
      v1263 = *(_QWORD *)(a1 + 8);
      v1264 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1263 + 32))(v1263);
      WTF::PrintStream::printf(v1264, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1263 + 40))(v1263);
      v1265 = *(_QWORD *)(a1 + 8);
      v1266 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1265 + 32))(v1265);
      WTF::PrintStream::printf(v1266, "%u", v169);
      (*(void (**)(uint64_t))(*(_QWORD *)v1265 + 40))(v1265);
      v1267 = *(_QWORD *)(a1 + 8);
      v1268 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1267 + 32))(v1267);
      WTF::PrintStream::printf(v1268, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1267 + 40))(v1267);
      v1269 = *(_QWORD *)(a1 + 8);
      v1270 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1269 + 32))(v1269);
      v1271 = "keepCount";
      goto LABEL_3778;
    case 155:
      if (v5 == 141)
      {
        v1272 = *((__int16 *)a3 + 1);
        if (v1272 <= 63)
          v171 = *((__int16 *)a3 + 1);
        else
          v171 = v1272 + 1073741760;
        v172 = *((__int16 *)a3 + 2);
        v1273 = v172 + 1073741760;
        v1274 = v172 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v171 = *(_DWORD *)(a3 + 2);
          v172 = *(_DWORD *)(a3 + 6);
          goto LABEL_3446;
        }
        v1275 = (char)a3[1];
        if (v1275 <= 15)
          v171 = (char)a3[1];
        else
          v171 = v1275 + 1073741808;
        v172 = (char)a3[2];
        v1273 = v172 + 1073741808;
        v1274 = v172 <= 15;
      }
      if (!v1274)
        v172 = v1273;
LABEL_3446:
      v343 = v172;
      v1276 = 1;
      if (v5 != 141)
        v1276 = 2;
      if (v5 == 142)
        v1277 = 0;
      else
        v1277 = v1276;
      v1278 = "**ref_is_null";
      goto LABEL_3486;
    case 156:
      if (v5 == 141)
      {
        v1279 = *((__int16 *)a3 + 1);
        if (v1279 <= 63)
          v173 = *((__int16 *)a3 + 1);
        else
          v173 = v1279 + 1073741760;
      }
      else if (v5 == 142)
      {
        v173 = *(_DWORD *)(a3 + 2);
      }
      else
      {
        v1280 = (char)a3[1];
        if (v1280 <= 15)
          v173 = (char)a3[1];
        else
          v173 = v1280 + 1073741808;
      }
      v1281 = 1;
      if (v5 != 141)
        v1281 = 2;
      if (v5 == 142)
        v1282 = 0;
      else
        v1282 = v1281;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aRefFunc[v1282]);
      v1283 = *(_QWORD *)(a1 + 8);
      v1284 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1283 + 32))(v1283);
      WTF::PrintStream::printf(v1284, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v1283 + 40))(v1283);
      v1285 = *(_QWORD *)(a1 + 8);
      v1286 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1285 + 32))(v1285);
      WTF::PrintStream::printf(v1286, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1285 + 40))(v1285);
      v1287 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v173);
      if (v2819)
        v1288 = (char *)v2819 + 16;
      else
        v1288 = 0;
      WTF::PrintStream::printf(v1287, "%s", v1288);
      v1296 = v2819;
      v2819 = 0;
      if (v1296)
      {
        if (*(_DWORD *)v1296 == 1)
          WTF::fastFree((unint64_t)v1296, v1289, v1290, v1291, v1292, v1293, v1294, v1295);
        else
          --*(_DWORD *)v1296;
      }
      v1297 = *(_QWORD *)(a1 + 8);
      v1298 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1297 + 32))(v1297);
      WTF::PrintStream::printf(v1298, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1297 + 40))(v1297);
      v1248 = *(_QWORD *)(a1 + 8);
      v1249 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1248 + 32))(v1248);
      v1250 = "functionIndex";
      goto LABEL_5134;
    case 157:
      if (v5 == 141)
      {
        v1299 = *((__int16 *)a3 + 1);
        if (v1299 <= 63)
          v171 = *((__int16 *)a3 + 1);
        else
          v171 = v1299 + 1073741760;
        v174 = *((__int16 *)a3 + 2);
        v1300 = v174 + 1073741760;
        v1301 = v174 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v171 = *(_DWORD *)(a3 + 2);
          v174 = *(_DWORD *)(a3 + 6);
          goto LABEL_3480;
        }
        v1302 = (char)a3[1];
        if (v1302 <= 15)
          v171 = (char)a3[1];
        else
          v171 = v1302 + 1073741808;
        v174 = (char)a3[2];
        v1300 = v174 + 1073741808;
        v1301 = v174 <= 15;
      }
      if (!v1301)
        v174 = v1300;
LABEL_3480:
      v343 = v174;
      v1303 = 1;
      if (v5 != 141)
        v1303 = 2;
      if (v5 == 142)
        v1277 = 0;
      else
        v1277 = v1303;
      v1278 = "**ref_as_non_null";
LABEL_3486:
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &v1278[v1277]);
      v1304 = *(_QWORD *)(a1 + 8);
      v1305 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1304 + 32))(v1304);
      WTF::PrintStream::printf(v1305, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v1304 + 40))(v1304);
      v1306 = *(_QWORD *)(a1 + 8);
      v1307 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1306 + 32))(v1306);
      WTF::PrintStream::printf(v1307, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1306 + 40))(v1306);
      v1308 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v171);
      if (v2819)
        v1309 = (char *)v2819 + 16;
      else
        v1309 = 0;
      WTF::PrintStream::printf(v1308, "%s", v1309);
      v1317 = v2819;
      v2819 = 0;
      if (v1317)
      {
        if (*(_DWORD *)v1317 == 1)
          WTF::fastFree((unint64_t)v1317, v1310, v1311, v1312, v1313, v1314, v1315, v1316);
        else
          --*(_DWORD *)v1317;
      }
      v1318 = *(_QWORD *)(a1 + 8);
      v1319 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1318 + 32))(v1318);
      WTF::PrintStream::printf(v1319, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1318 + 40))(v1318);
      v465 = *(_QWORD *)(a1 + 8);
      v466 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 32))(v465);
      v467 = "ref";
      goto LABEL_5249;
    case 158:
      if (v5 == 141)
      {
        v1320 = *((__int16 *)a3 + 1);
        if (v1320 <= 63)
          v175 = *((__int16 *)a3 + 1);
        else
          v175 = v1320 + 1073741760;
      }
      else if (v5 == 142)
      {
        v175 = *(_DWORD *)(a3 + 2);
      }
      else
      {
        v1321 = (char)a3[1];
        if (v1321 <= 15)
          v175 = (char)a3[1];
        else
          v175 = v1321 + 1073741808;
      }
      v1322 = 1;
      if (v5 != 141)
        v1322 = 2;
      if (v5 == 142)
        v1323 = 0;
      else
        v1323 = v1322;
      v1324 = "**get_global";
      goto LABEL_3537;
    case 159:
      if (v5 == 141)
      {
        v176 = *((unsigned __int16 *)a3 + 1);
        v177 = *((__int16 *)a3 + 2);
        v1325 = v177 + 1073741760;
        v1326 = v177 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v176 = *(_DWORD *)(a3 + 2);
          v177 = *(_DWORD *)(a3 + 6);
          goto LABEL_3509;
        }
        v176 = a3[1];
        v177 = (char)a3[2];
        v1325 = v177 + 1073741808;
        v1326 = v177 <= 15;
      }
      if (!v1326)
        v177 = v1325;
LABEL_3509:
      v343 = v177;
      v1327 = 1;
      if (v5 != 141)
        v1327 = 2;
      if (v5 == 142)
        v1328 = 0;
      else
        v1328 = v1327;
      v1329 = "**set_global";
      goto LABEL_3564;
    case 160:
      if (v5 == 141)
      {
        v176 = *((unsigned __int16 *)a3 + 1);
        v178 = *((__int16 *)a3 + 2);
        v1330 = v178 + 1073741760;
        v1331 = v178 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v176 = *(_DWORD *)(a3 + 2);
          v178 = *(_DWORD *)(a3 + 6);
          goto LABEL_3519;
        }
        v176 = a3[1];
        v178 = (char)a3[2];
        v1330 = v178 + 1073741808;
        v1331 = v178 <= 15;
      }
      if (!v1331)
        v178 = v1330;
LABEL_3519:
      v343 = v178;
      v1332 = 1;
      if (v5 != 141)
        v1332 = 2;
      if (v5 == 142)
        v1328 = 0;
      else
        v1328 = v1332;
      v1329 = "**set_global_ref";
      goto LABEL_3564;
    case 161:
      if (v5 == 141)
      {
        v1333 = *((__int16 *)a3 + 1);
        if (v1333 <= 63)
          v175 = *((__int16 *)a3 + 1);
        else
          v175 = v1333 + 1073741760;
      }
      else if (v5 == 142)
      {
        v175 = *(_DWORD *)(a3 + 2);
      }
      else
      {
        v1334 = (char)a3[1];
        if (v1334 <= 15)
          v175 = (char)a3[1];
        else
          v175 = v1334 + 1073741808;
      }
      v1335 = 1;
      if (v5 != 141)
        v1335 = 2;
      if (v5 == 142)
        v1323 = 0;
      else
        v1323 = v1335;
      v1324 = "**get_global_portable_binding";
LABEL_3537:
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &v1324[v1323]);
      v1336 = *(_QWORD *)(a1 + 8);
      v1337 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1336 + 32))(v1336);
      WTF::PrintStream::printf(v1337, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v1336 + 40))(v1336);
      v1338 = *(_QWORD *)(a1 + 8);
      v1339 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1338 + 32))(v1338);
      WTF::PrintStream::printf(v1339, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1338 + 40))(v1338);
      v1340 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v175);
      if (v2819)
        v1341 = (char *)v2819 + 16;
      else
        v1341 = 0;
      WTF::PrintStream::printf(v1340, "%s", v1341);
      v1349 = v2819;
      v2819 = 0;
      if (v1349)
      {
        if (*(_DWORD *)v1349 == 1)
          WTF::fastFree((unint64_t)v1349, v1342, v1343, v1344, v1345, v1346, v1347, v1348);
        else
          --*(_DWORD *)v1349;
      }
      v1350 = *(_QWORD *)(a1 + 8);
      v1351 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1350 + 32))(v1350);
      WTF::PrintStream::printf(v1351, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1350 + 40))(v1350);
      v1248 = *(_QWORD *)(a1 + 8);
      v1249 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1248 + 32))(v1248);
      v1250 = "globalIndex";
      goto LABEL_5134;
    case 162:
      if (v5 == 141)
      {
        v176 = *((unsigned __int16 *)a3 + 1);
        v179 = *((__int16 *)a3 + 2);
        v1352 = v179 + 1073741760;
        v1353 = v179 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v176 = *(_DWORD *)(a3 + 2);
          v179 = *(_DWORD *)(a3 + 6);
          goto LABEL_3548;
        }
        v176 = a3[1];
        v179 = (char)a3[2];
        v1352 = v179 + 1073741808;
        v1353 = v179 <= 15;
      }
      if (!v1353)
        v179 = v1352;
LABEL_3548:
      v343 = v179;
      v1354 = 1;
      if (v5 != 141)
        v1354 = 2;
      if (v5 == 142)
        v1328 = 0;
      else
        v1328 = v1354;
      v1329 = "**set_global_portable_binding";
      goto LABEL_3564;
    case 163:
      if (v5 == 141)
      {
        v176 = *((unsigned __int16 *)a3 + 1);
        v180 = *((__int16 *)a3 + 2);
        v1355 = v180 + 1073741760;
        v1356 = v180 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v176 = *(_DWORD *)(a3 + 2);
          v180 = *(_DWORD *)(a3 + 6);
          goto LABEL_3558;
        }
        v176 = a3[1];
        v180 = (char)a3[2];
        v1355 = v180 + 1073741808;
        v1356 = v180 <= 15;
      }
      if (!v1356)
        v180 = v1355;
LABEL_3558:
      v343 = v180;
      v1357 = 1;
      if (v5 != 141)
        v1357 = 2;
      if (v5 == 142)
        v1328 = 0;
      else
        v1328 = v1357;
      v1329 = "**set_global_ref_portable_binding";
LABEL_3564:
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &v1329[v1328]);
      v1358 = *(_QWORD *)(a1 + 8);
      v1359 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1358 + 32))(v1358);
      WTF::PrintStream::printf(v1359, "%s", "globalIndex");
      (*(void (**)(uint64_t))(*(_QWORD *)v1358 + 40))(v1358);
      v1360 = *(_QWORD *)(a1 + 8);
      v1361 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1360 + 32))(v1360);
      WTF::PrintStream::printf(v1361, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1360 + 40))(v1360);
      v1362 = *(_QWORD *)(a1 + 8);
      v1363 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1362 + 32))(v1362);
      WTF::PrintStream::printf(v1363, "%u", v176);
      (*(void (**)(uint64_t))(*(_QWORD *)v1362 + 40))(v1362);
      v1364 = *(_QWORD *)(a1 + 8);
      v1365 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1364 + 32))(v1364);
      WTF::PrintStream::printf(v1365, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1364 + 40))(v1364);
      v1366 = *(_QWORD *)(a1 + 8);
      v1367 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1366 + 32))(v1366);
      v1368 = "value";
      goto LABEL_4852;
    case 164:
      if (v5 == 141)
      {
        v1369 = *((__int16 *)a3 + 1);
        if (v1369 <= 63)
          v181 = *((__int16 *)a3 + 1);
        else
          v181 = v1369 + 1073741760;
        v182 = *((__int16 *)a3 + 2);
        if (v182 > 63)
          v182 += 1073741760;
      }
      else if (v5 == 142)
      {
        v181 = *(_DWORD *)(a3 + 2);
        v182 = *(_DWORD *)(a3 + 6);
      }
      else
      {
        v1370 = (char)a3[1];
        if (v1370 <= 15)
          v181 = (char)a3[1];
        else
          v181 = v1370 + 1073741808;
        v182 = (char)a3[2];
        if (v182 > 15)
          v182 += 1073741808;
      }
      v1371 = v182;
      v1372 = 1;
      if (v5 != 141)
        v1372 = 2;
      if (v5 == 142)
        v1373 = 0;
      else
        v1373 = v1372;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aTableGet[v1373]);
      v1374 = *(_QWORD *)(a1 + 8);
      v1375 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1374 + 32))(v1374);
      WTF::PrintStream::printf(v1375, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v1374 + 40))(v1374);
      v1376 = *(_QWORD *)(a1 + 8);
      v1377 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1376 + 32))(v1376);
      WTF::PrintStream::printf(v1377, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1376 + 40))(v1376);
      v1378 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v181);
      if (v2819)
        v1379 = (char *)v2819 + 16;
      else
        v1379 = 0;
      WTF::PrintStream::printf(v1378, "%s", v1379);
      v1387 = v2819;
      v2819 = 0;
      if (v1387)
      {
        if (*(_DWORD *)v1387 == 1)
          WTF::fastFree((unint64_t)v1387, v1380, v1381, v1382, v1383, v1384, v1385, v1386);
        else
          --*(_DWORD *)v1387;
      }
      v1388 = *(_QWORD *)(a1 + 8);
      v1389 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1388 + 32))(v1388);
      WTF::PrintStream::printf(v1389, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1388 + 40))(v1388);
      v1390 = *(_QWORD *)(a1 + 8);
      v1391 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1390 + 32))(v1390);
      v1392 = "index";
      goto LABEL_3713;
    case 165:
      if (v5 == 141)
      {
        v1393 = *((__int16 *)a3 + 1);
        if (v1393 <= 63)
          v183 = *((__int16 *)a3 + 1);
        else
          v183 = v1393 + 1073741760;
        v184 = *((__int16 *)a3 + 2);
        if (v184 > 63)
          v184 += 1073741760;
      }
      else if (v5 == 142)
      {
        v183 = *(_DWORD *)(a3 + 2);
        v184 = *(_DWORD *)(a3 + 6);
      }
      else
      {
        v1394 = (char)a3[1];
        if (v1394 <= 15)
          v183 = (char)a3[1];
        else
          v183 = v1394 + 1073741808;
        v184 = (char)a3[2];
        if (v184 > 15)
          v184 += 1073741808;
      }
      v1371 = v184;
      v1395 = 1;
      if (v5 != 141)
        v1395 = 2;
      if (v5 == 142)
        v1396 = 0;
      else
        v1396 = v1395;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aTableSet[v1396]);
      v1397 = *(_QWORD *)(a1 + 8);
      v1398 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1397 + 32))(v1397);
      WTF::PrintStream::printf(v1398, "%s", "index");
      (*(void (**)(uint64_t))(*(_QWORD *)v1397 + 40))(v1397);
      v1399 = *(_QWORD *)(a1 + 8);
      v1400 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1399 + 32))(v1399);
      WTF::PrintStream::printf(v1400, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1399 + 40))(v1399);
      v1401 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v183);
      if (v2819)
        v1402 = (char *)v2819 + 16;
      else
        v1402 = 0;
      WTF::PrintStream::printf(v1401, "%s", v1402);
      v1410 = v2819;
      v2819 = 0;
      if (v1410)
      {
        if (*(_DWORD *)v1410 == 1)
          WTF::fastFree((unint64_t)v1410, v1403, v1404, v1405, v1406, v1407, v1408, v1409);
        else
          --*(_DWORD *)v1410;
      }
      v1411 = *(_QWORD *)(a1 + 8);
      v1412 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1411 + 32))(v1411);
      WTF::PrintStream::printf(v1412, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1411 + 40))(v1411);
      v1390 = *(_QWORD *)(a1 + 8);
      v1391 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1390 + 32))(v1390);
      v1392 = "value";
      goto LABEL_3713;
    case 166:
      if (v5 == 141)
      {
        v1413 = *((__int16 *)a3 + 1);
        if (v1413 <= 63)
          v185 = *((__int16 *)a3 + 1);
        else
          v185 = v1413 + 1073741760;
        v1414 = *((__int16 *)a3 + 2);
        if (v1414 <= 63)
          v186 = *((__int16 *)a3 + 2);
        else
          v186 = v1414 + 1073741760;
        v1415 = *((__int16 *)a3 + 3);
        if (v1415 <= 63)
          v187 = *((__int16 *)a3 + 3);
        else
          v187 = v1415 + 1073741760;
        v188 = *((unsigned __int16 *)a3 + 4);
      }
      else if (v5 == 142)
      {
        v185 = *(_DWORD *)(a3 + 2);
        v186 = *(_DWORD *)(a3 + 6);
        v187 = *(_DWORD *)(a3 + 10);
        v188 = *(_DWORD *)(a3 + 14);
      }
      else
      {
        v1416 = (char)a3[1];
        if (v1416 <= 15)
          v185 = (char)a3[1];
        else
          v185 = v1416 + 1073741808;
        v1417 = (char)a3[2];
        if (v1417 <= 15)
          v186 = (char)a3[2];
        else
          v186 = v1417 + 1073741808;
        v1418 = (char)a3[3];
        if (v1418 <= 15)
          v187 = (char)a3[3];
        else
          v187 = v1418 + 1073741808;
        v188 = a3[4];
      }
      v1419 = 1;
      if (v5 != 141)
        v1419 = 2;
      if (v5 == 142)
        v1420 = 0;
      else
        v1420 = v1419;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aTableInit[v1420]);
      v1421 = *(_QWORD *)(a1 + 8);
      v1422 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1421 + 32))(v1421);
      WTF::PrintStream::printf(v1422, "%s", "dstOffset");
      (*(void (**)(uint64_t))(*(_QWORD *)v1421 + 40))(v1421);
      v1423 = *(_QWORD *)(a1 + 8);
      v1424 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1423 + 32))(v1423);
      WTF::PrintStream::printf(v1424, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1423 + 40))(v1423);
      v1425 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v185);
      if (v2819)
        v1426 = (char *)v2819 + 16;
      else
        v1426 = 0;
      WTF::PrintStream::printf(v1425, "%s", v1426);
      v1434 = v2819;
      v2819 = 0;
      if (v1434)
      {
        if (*(_DWORD *)v1434 == 1)
          WTF::fastFree((unint64_t)v1434, v1427, v1428, v1429, v1430, v1431, v1432, v1433);
        else
          --*(_DWORD *)v1434;
      }
      v1435 = *(_QWORD *)(a1 + 8);
      v1436 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1435 + 32))(v1435);
      WTF::PrintStream::printf(v1436, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1435 + 40))(v1435);
      v1437 = *(_QWORD *)(a1 + 8);
      v1438 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1437 + 32))(v1437);
      WTF::PrintStream::printf(v1438, "%s", "srcOffset");
      (*(void (**)(uint64_t))(*(_QWORD *)v1437 + 40))(v1437);
      v1439 = *(_QWORD *)(a1 + 8);
      v1440 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1439 + 32))(v1439);
      WTF::PrintStream::printf(v1440, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1439 + 40))(v1439);
      v1441 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v186);
      if (v2819)
        v1442 = (char *)v2819 + 16;
      else
        v1442 = 0;
      WTF::PrintStream::printf(v1441, "%s", v1442);
      v1450 = v2819;
      v2819 = 0;
      if (v1450)
      {
        if (*(_DWORD *)v1450 == 1)
          WTF::fastFree((unint64_t)v1450, v1443, v1444, v1445, v1446, v1447, v1448, v1449);
        else
          --*(_DWORD *)v1450;
      }
      v1451 = *(_QWORD *)(a1 + 8);
      v1452 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1451 + 32))(v1451);
      WTF::PrintStream::printf(v1452, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1451 + 40))(v1451);
      v1453 = *(_QWORD *)(a1 + 8);
      v1454 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1453 + 32))(v1453);
      WTF::PrintStream::printf(v1454, "%s", "length");
      (*(void (**)(uint64_t))(*(_QWORD *)v1453 + 40))(v1453);
      v1455 = *(_QWORD *)(a1 + 8);
      v1456 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1455 + 32))(v1455);
      WTF::PrintStream::printf(v1456, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1455 + 40))(v1455);
      v1457 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v187);
      if (v2819)
        v1458 = (char *)v2819 + 16;
      else
        v1458 = 0;
      WTF::PrintStream::printf(v1457, "%s", v1458);
      v1466 = v2819;
      v2819 = 0;
      if (v1466)
      {
        if (*(_DWORD *)v1466 == 1)
          WTF::fastFree((unint64_t)v1466, v1459, v1460, v1461, v1462, v1463, v1464, v1465);
        else
          --*(_DWORD *)v1466;
      }
      v1467 = *(_QWORD *)(a1 + 8);
      v1468 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1467 + 32))(v1467);
      WTF::PrintStream::printf(v1468, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1467 + 40))(v1467);
      v1469 = *(_QWORD *)(a1 + 8);
      v1470 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1469 + 32))(v1469);
      WTF::PrintStream::printf(v1470, "%s", "elementIndex");
      (*(void (**)(uint64_t))(*(_QWORD *)v1469 + 40))(v1469);
      v1471 = *(_QWORD *)(a1 + 8);
      v1472 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1471 + 32))(v1471);
      WTF::PrintStream::printf(v1472, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1471 + 40))(v1471);
      v1473 = *(_QWORD *)(a1 + 8);
      v1474 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1473 + 32))(v1473);
      WTF::PrintStream::printf(v1474, "%u", v188);
      (*(void (**)(uint64_t))(*(_QWORD *)v1473 + 40))(v1473);
      v248 = *(_QWORD *)(a1 + 8);
      v1475 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v248 + 32))(v248);
      WTF::PrintStream::printf(v1475, "%s", ", ");
      goto LABEL_3655;
    case 167:
      if (v5 == 141)
      {
        v1479 = *((__int16 *)a3 + 1);
        if (v1479 <= 63)
          LODWORD(v189) = *((__int16 *)a3 + 1);
        else
          LODWORD(v189) = v1479 + 1073741760;
        v190 = *((__int16 *)a3 + 2);
        if (v190 > 63)
          v190 += 1073741760;
        v1480 = *((__int16 *)a3 + 3);
        if (v1480 <= 63)
          v191 = *((__int16 *)a3 + 3);
        else
          v191 = v1480 + 1073741760;
      }
      else if (v5 == 142)
      {
        LODWORD(v189) = *(_DWORD *)(a3 + 2);
        v190 = *(_DWORD *)(a3 + 6);
        v191 = *(_DWORD *)(a3 + 10);
      }
      else
      {
        v1481 = (char)a3[1];
        if (v1481 <= 15)
          LODWORD(v189) = (char)a3[1];
        else
          LODWORD(v189) = v1481 + 1073741808;
        v190 = (char)a3[2];
        if (v190 > 15)
          v190 += 1073741808;
        v1482 = (char)a3[3];
        if (v1482 <= 15)
          v191 = (char)a3[3];
        else
          v191 = v1482 + 1073741808;
      }
      v1483 = v190;
      v1484 = 1;
      if (v5 != 141)
        v1484 = 2;
      if (v5 == 142)
        v1485 = 0;
      else
        v1485 = v1484;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aTableGrow[v1485]);
      v189 = v189;
      v1486 = *(_QWORD *)(a1 + 8);
      v1487 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1486 + 32))(v1486);
      v1488 = "dst";
      goto LABEL_3700;
    case 168:
      if (v5 == 141)
      {
        v1489 = *((__int16 *)a3 + 1);
        if (v1489 <= 63)
          LODWORD(v189) = *((__int16 *)a3 + 1);
        else
          LODWORD(v189) = v1489 + 1073741760;
        v192 = *((__int16 *)a3 + 2);
        if (v192 > 63)
          v192 += 1073741760;
        v1490 = *((__int16 *)a3 + 3);
        if (v1490 <= 63)
          v191 = *((__int16 *)a3 + 3);
        else
          v191 = v1490 + 1073741760;
      }
      else if (v5 == 142)
      {
        LODWORD(v189) = *(_DWORD *)(a3 + 2);
        v192 = *(_DWORD *)(a3 + 6);
        v191 = *(_DWORD *)(a3 + 10);
      }
      else
      {
        v1491 = (char)a3[1];
        if (v1491 <= 15)
          LODWORD(v189) = (char)a3[1];
        else
          LODWORD(v189) = v1491 + 1073741808;
        v192 = (char)a3[2];
        if (v192 > 15)
          v192 += 1073741808;
        v1492 = (char)a3[3];
        if (v1492 <= 15)
          v191 = (char)a3[3];
        else
          v191 = v1492 + 1073741808;
      }
      v1483 = v192;
      v1493 = 1;
      if (v5 != 141)
        v1493 = 2;
      if (v5 == 142)
        v1494 = 0;
      else
        v1494 = v1493;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aTableFill[v1494]);
      v189 = v189;
      v1486 = *(_QWORD *)(a1 + 8);
      v1487 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1486 + 32))(v1486);
      v1488 = "offset";
LABEL_3700:
      WTF::PrintStream::printf(v1487, "%s", v1488);
      (*(void (**)(uint64_t))(*(_QWORD *)v1486 + 40))(v1486);
      v1495 = *(_QWORD *)(a1 + 8);
      v1496 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1495 + 32))(v1495);
      WTF::PrintStream::printf(v1496, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1495 + 40))(v1495);
      v1497 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(&v2819, a1, v189);
      if (v2819)
        v1498 = (char *)v2819 + 16;
      else
        v1498 = 0;
      WTF::PrintStream::printf(v1497, "%s", v1498);
      v1506 = v2819;
      v2819 = 0;
      if (v1506)
      {
        if (*(_DWORD *)v1506 == 1)
          WTF::fastFree((unint64_t)v1506, v1499, v1500, v1501, v1502, v1503, v1504, v1505);
        else
          --*(_DWORD *)v1506;
      }
      v1507 = *(_QWORD *)(a1 + 8);
      v1508 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1507 + 32))(v1507);
      WTF::PrintStream::printf(v1508, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1507 + 40))(v1507);
      v1509 = *(_QWORD *)(a1 + 8);
      v1510 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1509 + 32))(v1509);
      WTF::PrintStream::printf(v1510, "%s", "fill");
      (*(void (**)(uint64_t))(*(_QWORD *)v1509 + 40))(v1509);
      v1511 = *(_QWORD *)(a1 + 8);
      v1512 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1511 + 32))(v1511);
      WTF::PrintStream::printf(v1512, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1511 + 40))(v1511);
      v1513 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(&v2819, a1, v1483);
      if (v2819)
        v1514 = (char *)v2819 + 16;
      else
        v1514 = 0;
      WTF::PrintStream::printf(v1513, "%s", v1514);
      v1522 = v2819;
      v2819 = 0;
      if (v1522)
      {
        if (*(_DWORD *)v1522 == 1)
          WTF::fastFree((unint64_t)v1522, v1515, v1516, v1517, v1518, v1519, v1520, v1521);
        else
          --*(_DWORD *)v1522;
      }
      v1371 = v191;
      v1523 = *(_QWORD *)(a1 + 8);
      v1524 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1523 + 32))(v1523);
      WTF::PrintStream::printf(v1524, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1523 + 40))(v1523);
      v1390 = *(_QWORD *)(a1 + 8);
      v1391 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1390 + 32))(v1390);
      v1392 = "size";
LABEL_3713:
      WTF::PrintStream::printf(v1391, "%s", v1392);
      (*(void (**)(uint64_t))(*(_QWORD *)v1390 + 40))(v1390);
      v1525 = *(_QWORD *)(a1 + 8);
      v1526 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1525 + 32))(v1525);
      WTF::PrintStream::printf(v1526, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1525 + 40))(v1525);
      v1527 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(&v2819, a1, v1371);
      if (v2819)
        v1528 = (char *)v2819 + 16;
      else
        v1528 = 0;
      WTF::PrintStream::printf(v1527, "%s", v1528);
      v1245 = v2819;
      v2819 = 0;
      if (v1245)
      {
        if (*(_DWORD *)v1245 == 1)
LABEL_5270:
          WTF::fastFree((unint64_t)v1245, v1238, v1239, v1240, v1241, v1242, v1243, v1244);
        else
          --*(_DWORD *)v1245;
      }
LABEL_3427:
      v1246 = *(_QWORD *)(a1 + 8);
      v1247 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1246 + 32))(v1246);
      WTF::PrintStream::printf(v1247, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1246 + 40))(v1246);
      v1248 = *(_QWORD *)(a1 + 8);
      v1249 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1248 + 32))(v1248);
      v1250 = "tableIndex";
      goto LABEL_5134;
    case 169:
      if (v5 == 141)
      {
        v193 = *((unsigned __int16 *)a3 + 1);
        v194 = *((unsigned __int16 *)a3 + 2);
        v170 = *((unsigned __int16 *)a3 + 3);
      }
      else if (v5 == 142)
      {
        v193 = *(_DWORD *)(a3 + 2);
        v194 = *(_DWORD *)(a3 + 6);
        v170 = *(_DWORD *)(a3 + 10);
      }
      else
      {
        v193 = a3[1];
        v194 = a3[2];
        v170 = a3[3];
      }
      v195 = 1;
      if (v5 != 141)
        v195 = 2;
      if (v5 == 142)
        v196 = 0;
      else
        v196 = v195;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aCall[v196]);
      v197 = *(_QWORD *)(a1 + 8);
      v198 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v197 + 32))(v197);
      v199 = "functionIndex";
      goto LABEL_3777;
    case 170:
      if (v5 == 141)
      {
        v200 = *((unsigned __int16 *)a3 + 1);
        v201 = *((unsigned __int16 *)a3 + 2);
        v202 = *((unsigned __int16 *)a3 + 3);
        v170 = *((unsigned __int16 *)a3 + 4);
      }
      else if (v5 == 142)
      {
        v200 = *(_DWORD *)(a3 + 2);
        v201 = *(_DWORD *)(a3 + 6);
        v202 = *(_DWORD *)(a3 + 10);
        v170 = *(_DWORD *)(a3 + 14);
      }
      else
      {
        v200 = a3[1];
        v201 = a3[2];
        v202 = a3[3];
        v170 = a3[4];
      }
      v1529 = 1;
      if (v5 != 141)
        v1529 = 2;
      if (v5 == 142)
        v1530 = 0;
      else
        v1530 = v1529;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aTailCall[v1530]);
      v1531 = *(_QWORD *)(a1 + 8);
      v1532 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1531 + 32))(v1531);
      WTF::PrintStream::printf(v1532, "%s", "functionIndex");
      (*(void (**)(uint64_t))(*(_QWORD *)v1531 + 40))(v1531);
      v1533 = *(_QWORD *)(a1 + 8);
      v1534 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1533 + 32))(v1533);
      WTF::PrintStream::printf(v1534, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1533 + 40))(v1533);
      v1535 = *(_QWORD *)(a1 + 8);
      v1536 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1535 + 32))(v1535);
      WTF::PrintStream::printf(v1536, "%u", v200);
      (*(void (**)(uint64_t))(*(_QWORD *)v1535 + 40))(v1535);
      v1537 = *(_QWORD *)(a1 + 8);
      v1538 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1537 + 32))(v1537);
      WTF::PrintStream::printf(v1538, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1537 + 40))(v1537);
      v1539 = *(_QWORD *)(a1 + 8);
      v1540 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1539 + 32))(v1539);
      WTF::PrintStream::printf(v1540, "%s", "stackOffset");
      (*(void (**)(uint64_t))(*(_QWORD *)v1539 + 40))(v1539);
      v1541 = *(_QWORD *)(a1 + 8);
      v1542 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1541 + 32))(v1541);
      WTF::PrintStream::printf(v1542, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1541 + 40))(v1541);
      v1543 = *(_QWORD *)(a1 + 8);
      v1544 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1543 + 32))(v1543);
      WTF::PrintStream::printf(v1544, "%u", v201);
      (*(void (**)(uint64_t))(*(_QWORD *)v1543 + 40))(v1543);
      v1545 = *(_QWORD *)(a1 + 8);
      v1546 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1545 + 32))(v1545);
      WTF::PrintStream::printf(v1546, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1545 + 40))(v1545);
      v1547 = *(_QWORD *)(a1 + 8);
      v1548 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1547 + 32))(v1547);
      WTF::PrintStream::printf(v1548, "%s", "numberOfCalleeStackArgs");
      (*(void (**)(uint64_t))(*(_QWORD *)v1547 + 40))(v1547);
      v1549 = *(_QWORD *)(a1 + 8);
      v1550 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1549 + 32))(v1549);
      WTF::PrintStream::printf(v1550, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1549 + 40))(v1549);
      v1551 = *(_QWORD *)(a1 + 8);
      v1552 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1551 + 32))(v1551);
      WTF::PrintStream::printf(v1552, "%u", v202);
      (*(void (**)(uint64_t))(*(_QWORD *)v1551 + 40))(v1551);
      v1553 = *(_QWORD *)(a1 + 8);
      v1554 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1553 + 32))(v1553);
      WTF::PrintStream::printf(v1554, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1553 + 40))(v1553);
      v1269 = *(_QWORD *)(a1 + 8);
      v1270 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1269 + 32))(v1269);
      v1271 = "numberOfCallerStackArgs";
      goto LABEL_3778;
    case 171:
      if (v5 == 142)
      {
        v204 = *(_DWORD *)(a3 + 2);
        v205 = *(_DWORD *)(a3 + 6);
        v206 = *(_DWORD *)(a3 + 10);
        v207 = *(_DWORD *)(a3 + 14);
      }
      else if (v5 == 141)
      {
        v2816 = *((__int16 *)a3 + 1);
        if (v2816 <= 63)
          v204 = *((__int16 *)a3 + 1);
        else
          v204 = v2816 + 1073741760;
        v205 = *((unsigned __int16 *)a3 + 2);
        v206 = *((unsigned __int16 *)a3 + 3);
        v207 = *((unsigned __int16 *)a3 + 4);
      }
      else
      {
        v203 = (char)a3[1];
        if (v203 <= 15)
          v204 = (char)a3[1];
        else
          v204 = v203 + 1073741808;
        v205 = a3[2];
        v206 = a3[3];
        v207 = a3[4];
      }
      v208 = 1;
      if (v5 != 141)
        v208 = 2;
      if (v5 == 142)
        v209 = 0;
      else
        v209 = v208;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aCallIndirect[v209]);
      v210 = *(_QWORD *)(a1 + 8);
      v211 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v210 + 32))(v210);
      WTF::PrintStream::printf(v211, "%s", "functionIndex");
      (*(void (**)(uint64_t))(*(_QWORD *)v210 + 40))(v210);
      v212 = *(_QWORD *)(a1 + 8);
      v213 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v212 + 32))(v212);
      WTF::PrintStream::printf(v213, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v212 + 40))(v212);
      v214 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v204);
      if (v2819)
        v215 = (char *)v2819 + 16;
      else
        v215 = 0;
      WTF::PrintStream::printf(v214, "%s", v215);
      v223 = v2819;
      v2819 = 0;
      if (v223)
      {
        if (*(_DWORD *)v223 == 1)
          WTF::fastFree((unint64_t)v223, v216, v217, v218, v219, v220, v221, v222);
        else
          --*(_DWORD *)v223;
      }
      v224 = *(_QWORD *)(a1 + 8);
      v225 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v224 + 32))(v224);
      WTF::PrintStream::printf(v225, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v224 + 40))(v224);
      v226 = *(_QWORD *)(a1 + 8);
      v227 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v226 + 32))(v226);
      WTF::PrintStream::printf(v227, "%s", "typeIndex");
      (*(void (**)(uint64_t))(*(_QWORD *)v226 + 40))(v226);
      v228 = *(_QWORD *)(a1 + 8);
      v229 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v228 + 32))(v228);
      WTF::PrintStream::printf(v229, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v228 + 40))(v228);
      v230 = *(_QWORD *)(a1 + 8);
      v231 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v230 + 32))(v230);
      WTF::PrintStream::printf(v231, "%u", v205);
      (*(void (**)(uint64_t))(*(_QWORD *)v230 + 40))(v230);
      v232 = *(_QWORD *)(a1 + 8);
      v233 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v232 + 32))(v232);
      WTF::PrintStream::printf(v233, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v232 + 40))(v232);
      v234 = *(_QWORD *)(a1 + 8);
      v235 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v234 + 32))(v234);
      WTF::PrintStream::printf(v235, "%s", "stackOffset");
      (*(void (**)(uint64_t))(*(_QWORD *)v234 + 40))(v234);
      v236 = *(_QWORD *)(a1 + 8);
      v237 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v236 + 32))(v236);
      WTF::PrintStream::printf(v237, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v236 + 40))(v236);
      v238 = *(_QWORD *)(a1 + 8);
      v239 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v238 + 32))(v238);
      WTF::PrintStream::printf(v239, "%u", v206);
      (*(void (**)(uint64_t))(*(_QWORD *)v238 + 40))(v238);
      v240 = *(_QWORD *)(a1 + 8);
      v241 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v240 + 32))(v240);
      WTF::PrintStream::printf(v241, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v240 + 40))(v240);
      v242 = *(_QWORD *)(a1 + 8);
      v243 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v242 + 32))(v242);
      WTF::PrintStream::printf(v243, "%s", "numberOfStackArgs");
      (*(void (**)(uint64_t))(*(_QWORD *)v242 + 40))(v242);
      v244 = *(_QWORD *)(a1 + 8);
      v245 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v244 + 32))(v244);
      WTF::PrintStream::printf(v245, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v244 + 40))(v244);
      v246 = *(_QWORD *)(a1 + 8);
      v247 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v246 + 32))(v246);
      WTF::PrintStream::printf(v247, "%u", v207);
      (*(void (**)(uint64_t))(*(_QWORD *)v246 + 40))(v246);
      v248 = *(_QWORD *)(a1 + 8);
      v249 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v248 + 32))(v248);
      WTF::PrintStream::printf(v249, "%s", ", ");
LABEL_3655:
      (*(void (**)(uint64_t))(*(_QWORD *)v248 + 40))(v248);
      v1476 = *(_QWORD *)(a1 + 8);
      v1477 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1476 + 32))(v1476);
      v1478 = "tableIndex";
      goto LABEL_5039;
    case 172:
      if (v5 == 141)
      {
        v1555 = *((__int16 *)a3 + 1);
        if (v1555 <= 63)
          v250 = *((__int16 *)a3 + 1);
        else
          v250 = v1555 + 1073741760;
        v251 = *((unsigned __int16 *)a3 + 2);
        v252 = *((unsigned __int16 *)a3 + 3);
        v253 = *((unsigned __int16 *)a3 + 4);
        v254 = *((unsigned __int16 *)a3 + 5);
      }
      else if (v5 == 142)
      {
        v250 = *(_DWORD *)(a3 + 2);
        v251 = *(_DWORD *)(a3 + 6);
        v252 = *(_DWORD *)(a3 + 10);
        v253 = *(_DWORD *)(a3 + 14);
        v254 = *(_DWORD *)(a3 + 18);
      }
      else
      {
        v1556 = (char)a3[1];
        if (v1556 <= 15)
          v250 = (char)a3[1];
        else
          v250 = v1556 + 1073741808;
        v251 = a3[2];
        v252 = a3[3];
        v253 = a3[4];
        v254 = a3[5];
      }
      v1557 = 1;
      if (v5 != 141)
        v1557 = 2;
      if (v5 == 142)
        v1558 = 0;
      else
        v1558 = v1557;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aTailCallIndire[v1558]);
      v1559 = *(_QWORD *)(a1 + 8);
      v1560 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1559 + 32))(v1559);
      WTF::PrintStream::printf(v1560, "%s", "functionIndex");
      (*(void (**)(uint64_t))(*(_QWORD *)v1559 + 40))(v1559);
      v1561 = *(_QWORD *)(a1 + 8);
      v1562 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1561 + 32))(v1561);
      WTF::PrintStream::printf(v1562, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1561 + 40))(v1561);
      v1563 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v250);
      if (v2819)
        v1564 = (char *)v2819 + 16;
      else
        v1564 = 0;
      WTF::PrintStream::printf(v1563, "%s", v1564);
      v1572 = v2819;
      v2819 = 0;
      if (v1572)
      {
        if (*(_DWORD *)v1572 == 1)
          WTF::fastFree((unint64_t)v1572, v1565, v1566, v1567, v1568, v1569, v1570, v1571);
        else
          --*(_DWORD *)v1572;
      }
      v1573 = *(_QWORD *)(a1 + 8);
      v1574 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1573 + 32))(v1573);
      WTF::PrintStream::printf(v1574, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1573 + 40))(v1573);
      v1575 = *(_QWORD *)(a1 + 8);
      v1576 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1575 + 32))(v1575);
      WTF::PrintStream::printf(v1576, "%s", "signatureIndex");
      (*(void (**)(uint64_t))(*(_QWORD *)v1575 + 40))(v1575);
      v1577 = *(_QWORD *)(a1 + 8);
      v1578 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1577 + 32))(v1577);
      WTF::PrintStream::printf(v1578, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1577 + 40))(v1577);
      v1579 = *(_QWORD *)(a1 + 8);
      v1580 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1579 + 32))(v1579);
      WTF::PrintStream::printf(v1580, "%u", v251);
      (*(void (**)(uint64_t))(*(_QWORD *)v1579 + 40))(v1579);
      v1581 = *(_QWORD *)(a1 + 8);
      v1582 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1581 + 32))(v1581);
      WTF::PrintStream::printf(v1582, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1581 + 40))(v1581);
      v1583 = *(_QWORD *)(a1 + 8);
      v1584 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1583 + 32))(v1583);
      WTF::PrintStream::printf(v1584, "%s", "stackOffset");
      (*(void (**)(uint64_t))(*(_QWORD *)v1583 + 40))(v1583);
      v1585 = *(_QWORD *)(a1 + 8);
      v1586 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1585 + 32))(v1585);
      WTF::PrintStream::printf(v1586, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1585 + 40))(v1585);
      v1587 = *(_QWORD *)(a1 + 8);
      v1588 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1587 + 32))(v1587);
      WTF::PrintStream::printf(v1588, "%u", v252);
      (*(void (**)(uint64_t))(*(_QWORD *)v1587 + 40))(v1587);
      v1589 = *(_QWORD *)(a1 + 8);
      v1590 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1589 + 32))(v1589);
      WTF::PrintStream::printf(v1590, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1589 + 40))(v1589);
      v1591 = *(_QWORD *)(a1 + 8);
      v1592 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1591 + 32))(v1591);
      WTF::PrintStream::printf(v1592, "%s", "numberOfCalleeStackArgs");
      (*(void (**)(uint64_t))(*(_QWORD *)v1591 + 40))(v1591);
      v1593 = *(_QWORD *)(a1 + 8);
      v1594 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1593 + 32))(v1593);
      WTF::PrintStream::printf(v1594, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1593 + 40))(v1593);
      v1595 = *(_QWORD *)(a1 + 8);
      v1596 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1595 + 32))(v1595);
      WTF::PrintStream::printf(v1596, "%u", v253);
      (*(void (**)(uint64_t))(*(_QWORD *)v1595 + 40))(v1595);
      v1597 = *(_QWORD *)(a1 + 8);
      v1598 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1597 + 32))(v1597);
      WTF::PrintStream::printf(v1598, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1597 + 40))(v1597);
      v1599 = *(_QWORD *)(a1 + 8);
      v1600 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1599 + 32))(v1599);
      WTF::PrintStream::printf(v1600, "%s", "numberOfCallerStackArgs");
      (*(void (**)(uint64_t))(*(_QWORD *)v1599 + 40))(v1599);
      v1601 = *(_QWORD *)(a1 + 8);
      v1602 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1601 + 32))(v1601);
      WTF::PrintStream::printf(v1602, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1601 + 40))(v1601);
      v1603 = *(_QWORD *)(a1 + 8);
      v1604 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1603 + 32))(v1603);
      WTF::PrintStream::printf(v1604, "%u", v254);
      (*(void (**)(uint64_t))(*(_QWORD *)v1603 + 40))(v1603);
      v1605 = *(_QWORD *)(a1 + 8);
      v1606 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1605 + 32))(v1605);
      WTF::PrintStream::printf(v1606, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1605 + 40))(v1605);
      v1607 = *(_QWORD *)(a1 + 8);
      v1608 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1607 + 32))(v1607);
      WTF::PrintStream::printf(v1608, "%s", "tableIndex");
      (*(void (**)(uint64_t))(*(_QWORD *)v1607 + 40))(v1607);
      v1609 = *(_QWORD *)(a1 + 8);
      v1610 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1609 + 32))(v1609);
      WTF::PrintStream::printf(v1610, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1609 + 40))(v1609);
      v1611 = *(_QWORD *)(a1 + 8);
      v1612 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1611 + 32))(v1611);
      goto LABEL_5135;
    case 173:
      if (v5 == 141)
      {
        v1613 = *((__int16 *)a3 + 1);
        if (v1613 <= 63)
          v255 = *((__int16 *)a3 + 1);
        else
          v255 = v1613 + 1073741760;
        v256 = *((unsigned __int16 *)a3 + 2);
        v257 = *((unsigned __int16 *)a3 + 3);
      }
      else if (v5 == 142)
      {
        v255 = *(_DWORD *)(a3 + 2);
        v256 = *(_DWORD *)(a3 + 6);
        v257 = *(_DWORD *)(a3 + 10);
      }
      else
      {
        v1614 = (char)a3[1];
        if (v1614 <= 15)
          v255 = (char)a3[1];
        else
          v255 = v1614 + 1073741808;
        v256 = a3[2];
        v257 = a3[3];
      }
      v1615 = 1;
      if (v5 != 141)
        v1615 = 2;
      if (v5 == 142)
        v1616 = 0;
      else
        v1616 = v1615;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aCallRef[v1616]);
      v1617 = *(_QWORD *)(a1 + 8);
      v1618 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1617 + 32))(v1617);
      WTF::PrintStream::printf(v1618, "%s", "functionReference");
      (*(void (**)(uint64_t))(*(_QWORD *)v1617 + 40))(v1617);
      v1619 = *(_QWORD *)(a1 + 8);
      v1620 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1619 + 32))(v1619);
      WTF::PrintStream::printf(v1620, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1619 + 40))(v1619);
      v1621 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v255);
      if (v2819)
        v1622 = (char *)v2819 + 16;
      else
        v1622 = 0;
      WTF::PrintStream::printf(v1621, "%s", v1622);
      v1630 = v2819;
      v2819 = 0;
      if (v1630)
      {
        if (*(_DWORD *)v1630 == 1)
          WTF::fastFree((unint64_t)v1630, v1623, v1624, v1625, v1626, v1627, v1628, v1629);
        else
          --*(_DWORD *)v1630;
      }
      v1631 = *(_QWORD *)(a1 + 8);
      v1632 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1631 + 32))(v1631);
      WTF::PrintStream::printf(v1632, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1631 + 40))(v1631);
      v1633 = *(_QWORD *)(a1 + 8);
      v1634 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1633 + 32))(v1633);
      WTF::PrintStream::printf(v1634, "%s", "typeIndex");
      (*(void (**)(uint64_t))(*(_QWORD *)v1633 + 40))(v1633);
      v1635 = *(_QWORD *)(a1 + 8);
      v1636 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1635 + 32))(v1635);
      WTF::PrintStream::printf(v1636, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1635 + 40))(v1635);
      v1637 = *(_QWORD *)(a1 + 8);
      v1638 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1637 + 32))(v1637);
      WTF::PrintStream::printf(v1638, "%u", v256);
      (*(void (**)(uint64_t))(*(_QWORD *)v1637 + 40))(v1637);
      v1639 = *(_QWORD *)(a1 + 8);
      v1640 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1639 + 32))(v1639);
      WTF::PrintStream::printf(v1640, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1639 + 40))(v1639);
      v1641 = *(_QWORD *)(a1 + 8);
      v1642 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1641 + 32))(v1641);
      WTF::PrintStream::printf(v1642, "%s", "stackOffset");
      (*(void (**)(uint64_t))(*(_QWORD *)v1641 + 40))(v1641);
      v1643 = *(_QWORD *)(a1 + 8);
      v1644 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1643 + 32))(v1643);
      WTF::PrintStream::printf(v1644, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1643 + 40))(v1643);
      v1645 = *(_QWORD *)(a1 + 8);
      v1646 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1645 + 32))(v1645);
      WTF::PrintStream::printf(v1646, "%u", v257);
      (*(void (**)(uint64_t))(*(_QWORD *)v1645 + 40))(v1645);
      v1647 = *(_QWORD *)(a1 + 8);
      v1648 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1647 + 32))(v1647);
      WTF::PrintStream::printf(v1648, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1647 + 40))(v1647);
      v1476 = *(_QWORD *)(a1 + 8);
      v1477 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1476 + 32))(v1476);
      v1478 = "numberOfStackArgs";
      goto LABEL_5039;
    case 174:
      if (v5 == 141)
      {
        v193 = *((unsigned __int16 *)a3 + 1);
        v194 = *((unsigned __int16 *)a3 + 2);
        v170 = *((unsigned __int16 *)a3 + 3);
      }
      else if (v5 == 142)
      {
        v193 = *(_DWORD *)(a3 + 2);
        v194 = *(_DWORD *)(a3 + 6);
        v170 = *(_DWORD *)(a3 + 10);
      }
      else
      {
        v193 = a3[1];
        v194 = a3[2];
        v170 = a3[3];
      }
      v1649 = 1;
      if (v5 != 141)
        v1649 = 2;
      if (v5 == 142)
        v1650 = 0;
      else
        v1650 = v1649;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aCallBuiltin[v1650]);
      v197 = *(_QWORD *)(a1 + 8);
      v198 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v197 + 32))(v197);
      v199 = "builtinIndex";
LABEL_3777:
      WTF::PrintStream::printf(v198, "%s", v199);
      (*(void (**)(uint64_t))(*(_QWORD *)v197 + 40))(v197);
      v1651 = *(_QWORD *)(a1 + 8);
      v1652 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1651 + 32))(v1651);
      WTF::PrintStream::printf(v1652, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1651 + 40))(v1651);
      v1653 = *(_QWORD *)(a1 + 8);
      v1654 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1653 + 32))(v1653);
      WTF::PrintStream::printf(v1654, "%u", v193);
      (*(void (**)(uint64_t))(*(_QWORD *)v1653 + 40))(v1653);
      v1655 = *(_QWORD *)(a1 + 8);
      v1656 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1655 + 32))(v1655);
      WTF::PrintStream::printf(v1656, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1655 + 40))(v1655);
      v1657 = *(_QWORD *)(a1 + 8);
      v1658 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1657 + 32))(v1657);
      WTF::PrintStream::printf(v1658, "%s", "stackOffset");
      (*(void (**)(uint64_t))(*(_QWORD *)v1657 + 40))(v1657);
      v1659 = *(_QWORD *)(a1 + 8);
      v1660 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1659 + 32))(v1659);
      WTF::PrintStream::printf(v1660, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1659 + 40))(v1659);
      v1661 = *(_QWORD *)(a1 + 8);
      v1662 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1661 + 32))(v1661);
      WTF::PrintStream::printf(v1662, "%u", v194);
      (*(void (**)(uint64_t))(*(_QWORD *)v1661 + 40))(v1661);
      v1663 = *(_QWORD *)(a1 + 8);
      v1664 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1663 + 32))(v1663);
      WTF::PrintStream::printf(v1664, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1663 + 40))(v1663);
      v1269 = *(_QWORD *)(a1 + 8);
      v1270 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1269 + 32))(v1269);
      v1271 = "numberOfStackArgs";
LABEL_3778:
      WTF::PrintStream::printf(v1270, "%s", v1271);
      (*(void (**)(uint64_t))(*(_QWORD *)v1269 + 40))(v1269);
      v1665 = *(_QWORD *)(a1 + 8);
      v1666 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1665 + 32))(v1665);
      WTF::PrintStream::printf(v1666, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1665 + 40))(v1665);
      v1667 = *(_QWORD *)(a1 + 8);
      v1668 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1667 + 32))(v1667);
      WTF::PrintStream::printf(v1668, "%u", v170);
      (*(void (**)(uint64_t))(*(_QWORD *)v1667 + 40))(v1667);
      return;
    case 175:
      if (v5 == 141)
      {
        v1669 = *((__int16 *)a3 + 1);
        if (v1669 <= 63)
          v258 = *((__int16 *)a3 + 1);
        else
          v258 = v1669 + 1073741760;
        v259 = *((__int16 *)a3 + 2);
        v1670 = v259 + 1073741760;
        v1671 = v259 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v258 = *(_DWORD *)(a3 + 2);
          v259 = *(_DWORD *)(a3 + 6);
          goto LABEL_3789;
        }
        v1672 = (char)a3[1];
        if (v1672 <= 15)
          v258 = (char)a3[1];
        else
          v258 = v1672 + 1073741808;
        v259 = (char)a3[2];
        v1670 = v259 + 1073741808;
        v1671 = v259 <= 15;
      }
      if (!v1671)
        v259 = v1670;
LABEL_3789:
      v343 = v259;
      v1673 = 1;
      if (v5 != 141)
        v1673 = 2;
      if (v5 == 142)
        v1674 = 0;
      else
        v1674 = v1673;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aGrowMemory[v1674]);
      v1675 = *(_QWORD *)(a1 + 8);
      v1676 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1675 + 32))(v1675);
      WTF::PrintStream::printf(v1676, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v1675 + 40))(v1675);
      v1677 = *(_QWORD *)(a1 + 8);
      v1678 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1677 + 32))(v1677);
      WTF::PrintStream::printf(v1678, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1677 + 40))(v1677);
      v1679 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v258);
      if (v2819)
        v1680 = (char *)v2819 + 16;
      else
        v1680 = 0;
      WTF::PrintStream::printf(v1679, "%s", v1680);
      v1688 = v2819;
      v2819 = 0;
      if (v1688)
      {
        if (*(_DWORD *)v1688 == 1)
          WTF::fastFree((unint64_t)v1688, v1681, v1682, v1683, v1684, v1685, v1686, v1687);
        else
          --*(_DWORD *)v1688;
      }
      v1689 = *(_QWORD *)(a1 + 8);
      v1690 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1689 + 32))(v1689);
      WTF::PrintStream::printf(v1690, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1689 + 40))(v1689);
      v465 = *(_QWORD *)(a1 + 8);
      v466 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 32))(v465);
      v467 = "delta";
      goto LABEL_5249;
    case 176:
      if (v5 == 141)
      {
        v1691 = *(int16x4_t *)(a3 + 2);
        v1692 = vmovl_s16(v1691);
        v1693.i64[0] = 0x3F0000003FLL;
        v1693.i64[1] = 0x3F0000003FLL;
        v1694 = (int8x16_t)vcgtq_s32(v1692, v1693);
        v1695 = (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFC0u), v1691);
      }
      else
      {
        if (v5 == 142)
        {
          v260 = *(int8x16_t *)(a3 + 2);
          goto LABEL_3804;
        }
        a4.i32[0] = *(_DWORD *)(a3 + 1);
        v1696 = (int16x4_t)vmovl_s8(a4).u64[0];
        v1692 = vmovl_s16(v1696);
        v1697.i64[0] = 0xF0000000FLL;
        v1697.i64[1] = 0xF0000000FLL;
        v1694 = (int8x16_t)vcgtq_s32(v1692, v1697);
        v1695 = (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v1696);
      }
      v260 = vbslq_s8(v1694, v1695, (int8x16_t)v1692);
LABEL_3804:
      v2818 = v260;
      v1698 = v260.u32[1];
      v343 = v260.u32[3];
      v1699 = 1;
      if (v5 != 141)
        v1699 = 2;
      if (v5 == 142)
        v1700 = 0;
      else
        v1700 = v1699;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aSelect[v1700]);
      v1701 = *(_QWORD *)(a1 + 8);
      v1702 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1701 + 32))(v1701);
      WTF::PrintStream::printf(v1702, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v1701 + 40))(v1701);
      v1703 = *(_QWORD *)(a1 + 8);
      v1704 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1703 + 32))(v1703);
      WTF::PrintStream::printf(v1704, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1703 + 40))(v1703);
      v1705 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v2818.u32[0]);
      if (v2819)
        v1706 = (char *)v2819 + 16;
      else
        v1706 = 0;
      WTF::PrintStream::printf(v1705, "%s", v1706);
      v1714 = v2819;
      v2819 = 0;
      if (v1714)
      {
        if (*(_DWORD *)v1714 == 1)
          WTF::fastFree((unint64_t)v1714, v1707, v1708, v1709, v1710, v1711, v1712, v1713);
        else
          --*(_DWORD *)v1714;
      }
      v1715 = *(_QWORD *)(a1 + 8);
      v1716 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1715 + 32))(v1715);
      WTF::PrintStream::printf(v1716, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1715 + 40))(v1715);
      v1717 = *(_QWORD *)(a1 + 8);
      v1718 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1717 + 32))(v1717);
      WTF::PrintStream::printf(v1718, "%s", "condition");
      (*(void (**)(uint64_t))(*(_QWORD *)v1717 + 40))(v1717);
      v1719 = *(_QWORD *)(a1 + 8);
      v1720 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1719 + 32))(v1719);
      WTF::PrintStream::printf(v1720, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1719 + 40))(v1719);
      v1721 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(&v2819, a1, v1698);
      if (v2819)
        v1722 = (char *)v2819 + 16;
      else
        v1722 = 0;
      WTF::PrintStream::printf(v1721, "%s", v1722);
      v1730 = v2819;
      v2819 = 0;
      v1731 = v2818.u32[2];
      if (v1730)
      {
        if (*(_DWORD *)v1730 == 1)
        {
          WTF::fastFree((unint64_t)v1730, v1723, v1724, v1725, v1726, v1727, v1728, v1729);
          v1731 = v2818.u32[2];
        }
        else
        {
          --*(_DWORD *)v1730;
        }
      }
      v1732 = v1731;
      v1733 = *(_QWORD *)(a1 + 8);
      v1734 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1733 + 32))(v1733);
      WTF::PrintStream::printf(v1734, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1733 + 40))(v1733);
      v1735 = *(_QWORD *)(a1 + 8);
      v1736 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1735 + 32))(v1735);
      WTF::PrintStream::printf(v1736, "%s", "nonZero");
      (*(void (**)(uint64_t))(*(_QWORD *)v1735 + 40))(v1735);
      v1737 = *(_QWORD *)(a1 + 8);
      v1738 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1737 + 32))(v1737);
      WTF::PrintStream::printf(v1738, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1737 + 40))(v1737);
      v1739 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(&v2819, a1, v1732);
      if (v2819)
        v1740 = (char *)v2819 + 16;
      else
        v1740 = 0;
      WTF::PrintStream::printf(v1739, "%s", v1740);
      v1748 = v2819;
      v2819 = 0;
      if (v1748)
      {
        if (*(_DWORD *)v1748 == 1)
          WTF::fastFree((unint64_t)v1748, v1741, v1742, v1743, v1744, v1745, v1746, v1747);
        else
          --*(_DWORD *)v1748;
      }
      v1749 = *(_QWORD *)(a1 + 8);
      v1750 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1749 + 32))(v1749);
      WTF::PrintStream::printf(v1750, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1749 + 40))(v1749);
      v465 = *(_QWORD *)(a1 + 8);
      v466 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 32))(v465);
      v467 = "zero";
      goto LABEL_5249;
    case 177:
      if (v5 == 141)
      {
        v1751 = *((__int16 *)a3 + 1);
        if (v1751 <= 63)
          v261 = *((__int16 *)a3 + 1);
        else
          v261 = v1751 + 1073741760;
        v262 = *((__int16 *)a3 + 2);
        if (v262 > 63)
          v262 += 1073741760;
      }
      else if (v5 == 142)
      {
        v261 = *(_DWORD *)(a3 + 2);
        v262 = *(_DWORD *)(a3 + 6);
      }
      else
      {
        v1752 = (char)a3[1];
        if (v1752 <= 15)
          v261 = (char)a3[1];
        else
          v261 = v1752 + 1073741808;
        v262 = (char)a3[2];
        if (v262 > 15)
          v262 += 1073741808;
      }
      v1753 = v262;
      v1754 = 1;
      if (v5 != 141)
        v1754 = 2;
      if (v5 == 142)
        v1755 = 0;
      else
        v1755 = v1754;
      v1756 = "**load8_u";
      goto LABEL_3981;
    case 178:
      if (v5 == 141)
      {
        v1757 = *((__int16 *)a3 + 1);
        if (v1757 <= 63)
          v261 = *((__int16 *)a3 + 1);
        else
          v261 = v1757 + 1073741760;
        v263 = *((__int16 *)a3 + 2);
        if (v263 > 63)
          v263 += 1073741760;
      }
      else if (v5 == 142)
      {
        v261 = *(_DWORD *)(a3 + 2);
        v263 = *(_DWORD *)(a3 + 6);
      }
      else
      {
        v1758 = (char)a3[1];
        if (v1758 <= 15)
          v261 = (char)a3[1];
        else
          v261 = v1758 + 1073741808;
        v263 = (char)a3[2];
        if (v263 > 15)
          v263 += 1073741808;
      }
      v1753 = v263;
      v1759 = 1;
      if (v5 != 141)
        v1759 = 2;
      if (v5 == 142)
        v1755 = 0;
      else
        v1755 = v1759;
      v1756 = "**load16_u";
      goto LABEL_3981;
    case 179:
      if (v5 == 141)
      {
        v1760 = *((__int16 *)a3 + 1);
        if (v1760 <= 63)
          v261 = *((__int16 *)a3 + 1);
        else
          v261 = v1760 + 1073741760;
        v264 = *((__int16 *)a3 + 2);
        if (v264 > 63)
          v264 += 1073741760;
      }
      else if (v5 == 142)
      {
        v261 = *(_DWORD *)(a3 + 2);
        v264 = *(_DWORD *)(a3 + 6);
      }
      else
      {
        v1761 = (char)a3[1];
        if (v1761 <= 15)
          v261 = (char)a3[1];
        else
          v261 = v1761 + 1073741808;
        v264 = (char)a3[2];
        if (v264 > 15)
          v264 += 1073741808;
      }
      v1753 = v264;
      v1762 = 1;
      if (v5 != 141)
        v1762 = 2;
      if (v5 == 142)
        v1755 = 0;
      else
        v1755 = v1762;
      v1756 = "**load32_u";
      goto LABEL_3981;
    case 180:
      if (v5 == 141)
      {
        v1763 = *((__int16 *)a3 + 1);
        if (v1763 <= 63)
          v261 = *((__int16 *)a3 + 1);
        else
          v261 = v1763 + 1073741760;
        v265 = *((__int16 *)a3 + 2);
        if (v265 > 63)
          v265 += 1073741760;
      }
      else if (v5 == 142)
      {
        v261 = *(_DWORD *)(a3 + 2);
        v265 = *(_DWORD *)(a3 + 6);
      }
      else
      {
        v1764 = (char)a3[1];
        if (v1764 <= 15)
          v261 = (char)a3[1];
        else
          v261 = v1764 + 1073741808;
        v265 = (char)a3[2];
        if (v265 > 15)
          v265 += 1073741808;
      }
      v1753 = v265;
      v1765 = 1;
      if (v5 != 141)
        v1765 = 2;
      if (v5 == 142)
        v1755 = 0;
      else
        v1755 = v1765;
      v1756 = "**load64_u";
      goto LABEL_3981;
    case 181:
      if (v5 == 141)
      {
        v1766 = *((__int16 *)a3 + 1);
        if (v1766 <= 63)
          v261 = *((__int16 *)a3 + 1);
        else
          v261 = v1766 + 1073741760;
        v266 = *((__int16 *)a3 + 2);
        if (v266 > 63)
          v266 += 1073741760;
      }
      else if (v5 == 142)
      {
        v261 = *(_DWORD *)(a3 + 2);
        v266 = *(_DWORD *)(a3 + 6);
      }
      else
      {
        v1767 = (char)a3[1];
        if (v1767 <= 15)
          v261 = (char)a3[1];
        else
          v261 = v1767 + 1073741808;
        v266 = (char)a3[2];
        if (v266 > 15)
          v266 += 1073741808;
      }
      v1753 = v266;
      v1768 = 1;
      if (v5 != 141)
        v1768 = 2;
      if (v5 == 142)
        v1755 = 0;
      else
        v1755 = v1768;
      v1756 = "**i32_load8_s";
      goto LABEL_3981;
    case 182:
      if (v5 == 141)
      {
        v1769 = *((__int16 *)a3 + 1);
        if (v1769 <= 63)
          v261 = *((__int16 *)a3 + 1);
        else
          v261 = v1769 + 1073741760;
        v267 = *((__int16 *)a3 + 2);
        if (v267 > 63)
          v267 += 1073741760;
      }
      else if (v5 == 142)
      {
        v261 = *(_DWORD *)(a3 + 2);
        v267 = *(_DWORD *)(a3 + 6);
      }
      else
      {
        v1770 = (char)a3[1];
        if (v1770 <= 15)
          v261 = (char)a3[1];
        else
          v261 = v1770 + 1073741808;
        v267 = (char)a3[2];
        if (v267 > 15)
          v267 += 1073741808;
      }
      v1753 = v267;
      v1771 = 1;
      if (v5 != 141)
        v1771 = 2;
      if (v5 == 142)
        v1755 = 0;
      else
        v1755 = v1771;
      v1756 = "**i64_load8_s";
      goto LABEL_3981;
    case 183:
      if (v5 == 141)
      {
        v1772 = *((__int16 *)a3 + 1);
        if (v1772 <= 63)
          v261 = *((__int16 *)a3 + 1);
        else
          v261 = v1772 + 1073741760;
        v268 = *((__int16 *)a3 + 2);
        if (v268 > 63)
          v268 += 1073741760;
      }
      else if (v5 == 142)
      {
        v261 = *(_DWORD *)(a3 + 2);
        v268 = *(_DWORD *)(a3 + 6);
      }
      else
      {
        v1773 = (char)a3[1];
        if (v1773 <= 15)
          v261 = (char)a3[1];
        else
          v261 = v1773 + 1073741808;
        v268 = (char)a3[2];
        if (v268 > 15)
          v268 += 1073741808;
      }
      v1753 = v268;
      v1774 = 1;
      if (v5 != 141)
        v1774 = 2;
      if (v5 == 142)
        v1755 = 0;
      else
        v1755 = v1774;
      v1756 = "**i32_load16_s";
      goto LABEL_3981;
    case 184:
      if (v5 == 141)
      {
        v1775 = *((__int16 *)a3 + 1);
        if (v1775 <= 63)
          v261 = *((__int16 *)a3 + 1);
        else
          v261 = v1775 + 1073741760;
        v269 = *((__int16 *)a3 + 2);
        if (v269 > 63)
          v269 += 1073741760;
      }
      else if (v5 == 142)
      {
        v261 = *(_DWORD *)(a3 + 2);
        v269 = *(_DWORD *)(a3 + 6);
      }
      else
      {
        v1776 = (char)a3[1];
        if (v1776 <= 15)
          v261 = (char)a3[1];
        else
          v261 = v1776 + 1073741808;
        v269 = (char)a3[2];
        if (v269 > 15)
          v269 += 1073741808;
      }
      v1753 = v269;
      v1777 = 1;
      if (v5 != 141)
        v1777 = 2;
      if (v5 == 142)
        v1755 = 0;
      else
        v1755 = v1777;
      v1756 = "**i64_load16_s";
      goto LABEL_3981;
    case 185:
      if (v5 == 141)
      {
        v1778 = *((__int16 *)a3 + 1);
        if (v1778 <= 63)
          v261 = *((__int16 *)a3 + 1);
        else
          v261 = v1778 + 1073741760;
        v270 = *((__int16 *)a3 + 2);
        if (v270 > 63)
          v270 += 1073741760;
      }
      else if (v5 == 142)
      {
        v261 = *(_DWORD *)(a3 + 2);
        v270 = *(_DWORD *)(a3 + 6);
      }
      else
      {
        v1779 = (char)a3[1];
        if (v1779 <= 15)
          v261 = (char)a3[1];
        else
          v261 = v1779 + 1073741808;
        v270 = (char)a3[2];
        if (v270 > 15)
          v270 += 1073741808;
      }
      v1753 = v270;
      v1780 = 1;
      if (v5 != 141)
        v1780 = 2;
      if (v5 == 142)
        v1755 = 0;
      else
        v1755 = v1780;
      v1756 = "**i64_load32_s";
LABEL_3981:
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &v1756[v1755]);
      v1781 = *(_QWORD *)(a1 + 8);
      v1782 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1781 + 32))(v1781);
      WTF::PrintStream::printf(v1782, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v1781 + 40))(v1781);
      v1783 = *(_QWORD *)(a1 + 8);
      v1784 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1783 + 32))(v1783);
      WTF::PrintStream::printf(v1784, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1783 + 40))(v1783);
      v1785 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v261);
      if (v2819)
        v1786 = (char *)v2819 + 16;
      else
        v1786 = 0;
      WTF::PrintStream::printf(v1785, "%s", v1786);
      v1794 = v2819;
      v2819 = 0;
      if (v1794)
      {
        if (*(_DWORD *)v1794 == 1)
          WTF::fastFree((unint64_t)v1794, v1787, v1788, v1789, v1790, v1791, v1792, v1793);
        else
          --*(_DWORD *)v1794;
      }
      v1795 = *(_QWORD *)(a1 + 8);
      v1796 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1795 + 32))(v1795);
      WTF::PrintStream::printf(v1796, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1795 + 40))(v1795);
      v1797 = *(_QWORD *)(a1 + 8);
      v1798 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1797 + 32))(v1797);
      v1799 = "pointer";
      goto LABEL_4064;
    case 186:
      if (v5 == 141)
      {
        v1800 = *((__int16 *)a3 + 1);
        if (v1800 <= 63)
          v271 = *((__int16 *)a3 + 1);
        else
          v271 = v1800 + 1073741760;
        v272 = *((__int16 *)a3 + 2);
        if (v272 > 63)
          v272 += 1073741760;
      }
      else if (v5 == 142)
      {
        v271 = *(_DWORD *)(a3 + 2);
        v272 = *(_DWORD *)(a3 + 6);
      }
      else
      {
        v1801 = (char)a3[1];
        if (v1801 <= 15)
          v271 = (char)a3[1];
        else
          v271 = v1801 + 1073741808;
        v272 = (char)a3[2];
        if (v272 > 15)
          v272 += 1073741808;
      }
      v1753 = v272;
      v1802 = 1;
      if (v5 != 141)
        v1802 = 2;
      if (v5 == 142)
        v1803 = 0;
      else
        v1803 = v1802;
      v1804 = "**store8";
      goto LABEL_4057;
    case 187:
      if (v5 == 141)
      {
        v1805 = *((__int16 *)a3 + 1);
        if (v1805 <= 63)
          v271 = *((__int16 *)a3 + 1);
        else
          v271 = v1805 + 1073741760;
        v273 = *((__int16 *)a3 + 2);
        if (v273 > 63)
          v273 += 1073741760;
      }
      else if (v5 == 142)
      {
        v271 = *(_DWORD *)(a3 + 2);
        v273 = *(_DWORD *)(a3 + 6);
      }
      else
      {
        v1806 = (char)a3[1];
        if (v1806 <= 15)
          v271 = (char)a3[1];
        else
          v271 = v1806 + 1073741808;
        v273 = (char)a3[2];
        if (v273 > 15)
          v273 += 1073741808;
      }
      v1753 = v273;
      v1807 = 1;
      if (v5 != 141)
        v1807 = 2;
      if (v5 == 142)
        v1803 = 0;
      else
        v1803 = v1807;
      v1804 = "**store16";
      goto LABEL_4057;
    case 188:
      if (v5 == 141)
      {
        v1808 = *((__int16 *)a3 + 1);
        if (v1808 <= 63)
          v271 = *((__int16 *)a3 + 1);
        else
          v271 = v1808 + 1073741760;
        v274 = *((__int16 *)a3 + 2);
        if (v274 > 63)
          v274 += 1073741760;
      }
      else if (v5 == 142)
      {
        v271 = *(_DWORD *)(a3 + 2);
        v274 = *(_DWORD *)(a3 + 6);
      }
      else
      {
        v1809 = (char)a3[1];
        if (v1809 <= 15)
          v271 = (char)a3[1];
        else
          v271 = v1809 + 1073741808;
        v274 = (char)a3[2];
        if (v274 > 15)
          v274 += 1073741808;
      }
      v1753 = v274;
      v1810 = 1;
      if (v5 != 141)
        v1810 = 2;
      if (v5 == 142)
        v1803 = 0;
      else
        v1803 = v1810;
      v1804 = "**store32";
      goto LABEL_4057;
    case 189:
      if (v5 == 141)
      {
        v1811 = *((__int16 *)a3 + 1);
        if (v1811 <= 63)
          v271 = *((__int16 *)a3 + 1);
        else
          v271 = v1811 + 1073741760;
        v275 = *((__int16 *)a3 + 2);
        if (v275 > 63)
          v275 += 1073741760;
      }
      else if (v5 == 142)
      {
        v271 = *(_DWORD *)(a3 + 2);
        v275 = *(_DWORD *)(a3 + 6);
      }
      else
      {
        v1812 = (char)a3[1];
        if (v1812 <= 15)
          v271 = (char)a3[1];
        else
          v271 = v1812 + 1073741808;
        v275 = (char)a3[2];
        if (v275 > 15)
          v275 += 1073741808;
      }
      v1753 = v275;
      v1813 = 1;
      if (v5 != 141)
        v1813 = 2;
      if (v5 == 142)
        v1803 = 0;
      else
        v1803 = v1813;
      v1804 = "**store64";
LABEL_4057:
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &v1804[v1803]);
      v1814 = *(_QWORD *)(a1 + 8);
      v1815 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1814 + 32))(v1814);
      WTF::PrintStream::printf(v1815, "%s", "pointer");
      (*(void (**)(uint64_t))(*(_QWORD *)v1814 + 40))(v1814);
      v1816 = *(_QWORD *)(a1 + 8);
      v1817 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1816 + 32))(v1816);
      WTF::PrintStream::printf(v1817, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1816 + 40))(v1816);
      v1818 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v271);
      if (v2819)
        v1819 = (char *)v2819 + 16;
      else
        v1819 = 0;
      WTF::PrintStream::printf(v1818, "%s", v1819);
      v1827 = v2819;
      v2819 = 0;
      if (v1827)
      {
        if (*(_DWORD *)v1827 == 1)
          WTF::fastFree((unint64_t)v1827, v1820, v1821, v1822, v1823, v1824, v1825, v1826);
        else
          --*(_DWORD *)v1827;
      }
      v1828 = *(_QWORD *)(a1 + 8);
      v1829 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1828 + 32))(v1828);
      WTF::PrintStream::printf(v1829, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1828 + 40))(v1828);
      v1797 = *(_QWORD *)(a1 + 8);
      v1798 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1797 + 32))(v1797);
      v1799 = "value";
LABEL_4064:
      WTF::PrintStream::printf(v1798, "%s", v1799);
      (*(void (**)(uint64_t))(*(_QWORD *)v1797 + 40))(v1797);
      v1830 = *(_QWORD *)(a1 + 8);
      v1831 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1830 + 32))(v1830);
      WTF::PrintStream::printf(v1831, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1830 + 40))(v1830);
      v1832 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(&v2819, a1, v1753);
      if (v2819)
        v1833 = (char *)v2819 + 16;
      else
        v1833 = 0;
      WTF::PrintStream::printf(v1832, "%s", v1833);
      v1841 = v2819;
      v2819 = 0;
      if (v1841)
      {
        if (*(_DWORD *)v1841 == 1)
          WTF::fastFree((unint64_t)v1841, v1834, v1835, v1836, v1837, v1838, v1839, v1840);
        else
          --*(_DWORD *)v1841;
      }
      v1842 = *(_QWORD *)(a1 + 8);
      v1843 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1842 + 32))(v1842);
      WTF::PrintStream::printf(v1843, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1842 + 40))(v1842);
      v1248 = *(_QWORD *)(a1 + 8);
      v1249 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1248 + 32))(v1248);
      v1250 = "offset";
      goto LABEL_5134;
    case 190:
      if (v5 == 141)
      {
        v1844 = *((__int16 *)a3 + 1);
        if (v1844 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1844 + 1073741760;
        v277 = *((__int16 *)a3 + 2);
        if (v277 > 63)
          v277 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1845 = *((__int16 *)a3 + 4);
        v279 = v1845 + 1073741760;
        v1846 = v1845 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v277 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v279 = *(_DWORD *)(a3 + 14);
          goto LABEL_4088;
        }
        v1847 = (char)a3[1];
        if (v1847 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1847 + 1073741808;
        v277 = (char)a3[2];
        if (v277 > 15)
          v277 += 1073741808;
        v278 = a3[3];
        v1845 = (char)a3[4];
        v279 = v1845 + 1073741808;
        v1846 = v1845 <= 15;
      }
      if (v1846)
        v279 = v1845;
LABEL_4088:
      v1848 = v277;
      v343 = v279;
      v1849 = 1;
      if (v5 != 141)
        v1849 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1849;
      v1851 = "**i64_atomic_rmw_add";
      goto LABEL_4577;
    case 191:
      if (v5 == 141)
      {
        v1852 = *((__int16 *)a3 + 1);
        if (v1852 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1852 + 1073741760;
        v280 = *((__int16 *)a3 + 2);
        if (v280 > 63)
          v280 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1853 = *((__int16 *)a3 + 4);
        v281 = v1853 + 1073741760;
        v1854 = v1853 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v280 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v281 = *(_DWORD *)(a3 + 14);
          goto LABEL_4109;
        }
        v1855 = (char)a3[1];
        if (v1855 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1855 + 1073741808;
        v280 = (char)a3[2];
        if (v280 > 15)
          v280 += 1073741808;
        v278 = a3[3];
        v1853 = (char)a3[4];
        v281 = v1853 + 1073741808;
        v1854 = v1853 <= 15;
      }
      if (v1854)
        v281 = v1853;
LABEL_4109:
      v1848 = v280;
      v343 = v281;
      v1856 = 1;
      if (v5 != 141)
        v1856 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1856;
      v1851 = "**i64_atomic_rmw8_add_u";
      goto LABEL_4577;
    case 192:
      if (v5 == 141)
      {
        v1857 = *((__int16 *)a3 + 1);
        if (v1857 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1857 + 1073741760;
        v282 = *((__int16 *)a3 + 2);
        if (v282 > 63)
          v282 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1858 = *((__int16 *)a3 + 4);
        v283 = v1858 + 1073741760;
        v1859 = v1858 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v282 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v283 = *(_DWORD *)(a3 + 14);
          goto LABEL_4130;
        }
        v1860 = (char)a3[1];
        if (v1860 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1860 + 1073741808;
        v282 = (char)a3[2];
        if (v282 > 15)
          v282 += 1073741808;
        v278 = a3[3];
        v1858 = (char)a3[4];
        v283 = v1858 + 1073741808;
        v1859 = v1858 <= 15;
      }
      if (v1859)
        v283 = v1858;
LABEL_4130:
      v1848 = v282;
      v343 = v283;
      v1861 = 1;
      if (v5 != 141)
        v1861 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1861;
      v1851 = "**i64_atomic_rmw16_add_u";
      goto LABEL_4577;
    case 193:
      if (v5 == 141)
      {
        v1862 = *((__int16 *)a3 + 1);
        if (v1862 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1862 + 1073741760;
        v284 = *((__int16 *)a3 + 2);
        if (v284 > 63)
          v284 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1863 = *((__int16 *)a3 + 4);
        v285 = v1863 + 1073741760;
        v1864 = v1863 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v284 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v285 = *(_DWORD *)(a3 + 14);
          goto LABEL_4151;
        }
        v1865 = (char)a3[1];
        if (v1865 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1865 + 1073741808;
        v284 = (char)a3[2];
        if (v284 > 15)
          v284 += 1073741808;
        v278 = a3[3];
        v1863 = (char)a3[4];
        v285 = v1863 + 1073741808;
        v1864 = v1863 <= 15;
      }
      if (v1864)
        v285 = v1863;
LABEL_4151:
      v1848 = v284;
      v343 = v285;
      v1866 = 1;
      if (v5 != 141)
        v1866 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1866;
      v1851 = "**i64_atomic_rmw32_add_u";
      goto LABEL_4577;
    case 194:
      if (v5 == 141)
      {
        v1867 = *((__int16 *)a3 + 1);
        if (v1867 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1867 + 1073741760;
        v286 = *((__int16 *)a3 + 2);
        if (v286 > 63)
          v286 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1868 = *((__int16 *)a3 + 4);
        v287 = v1868 + 1073741760;
        v1869 = v1868 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v286 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v287 = *(_DWORD *)(a3 + 14);
          goto LABEL_4172;
        }
        v1870 = (char)a3[1];
        if (v1870 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1870 + 1073741808;
        v286 = (char)a3[2];
        if (v286 > 15)
          v286 += 1073741808;
        v278 = a3[3];
        v1868 = (char)a3[4];
        v287 = v1868 + 1073741808;
        v1869 = v1868 <= 15;
      }
      if (v1869)
        v287 = v1868;
LABEL_4172:
      v1848 = v286;
      v343 = v287;
      v1871 = 1;
      if (v5 != 141)
        v1871 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1871;
      v1851 = "**i64_atomic_rmw_sub";
      goto LABEL_4577;
    case 195:
      if (v5 == 141)
      {
        v1872 = *((__int16 *)a3 + 1);
        if (v1872 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1872 + 1073741760;
        v288 = *((__int16 *)a3 + 2);
        if (v288 > 63)
          v288 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1873 = *((__int16 *)a3 + 4);
        v289 = v1873 + 1073741760;
        v1874 = v1873 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v288 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v289 = *(_DWORD *)(a3 + 14);
          goto LABEL_4193;
        }
        v1875 = (char)a3[1];
        if (v1875 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1875 + 1073741808;
        v288 = (char)a3[2];
        if (v288 > 15)
          v288 += 1073741808;
        v278 = a3[3];
        v1873 = (char)a3[4];
        v289 = v1873 + 1073741808;
        v1874 = v1873 <= 15;
      }
      if (v1874)
        v289 = v1873;
LABEL_4193:
      v1848 = v288;
      v343 = v289;
      v1876 = 1;
      if (v5 != 141)
        v1876 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1876;
      v1851 = "**i64_atomic_rmw8_sub_u";
      goto LABEL_4577;
    case 196:
      if (v5 == 141)
      {
        v1877 = *((__int16 *)a3 + 1);
        if (v1877 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1877 + 1073741760;
        v290 = *((__int16 *)a3 + 2);
        if (v290 > 63)
          v290 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1878 = *((__int16 *)a3 + 4);
        v291 = v1878 + 1073741760;
        v1879 = v1878 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v290 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v291 = *(_DWORD *)(a3 + 14);
          goto LABEL_4214;
        }
        v1880 = (char)a3[1];
        if (v1880 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1880 + 1073741808;
        v290 = (char)a3[2];
        if (v290 > 15)
          v290 += 1073741808;
        v278 = a3[3];
        v1878 = (char)a3[4];
        v291 = v1878 + 1073741808;
        v1879 = v1878 <= 15;
      }
      if (v1879)
        v291 = v1878;
LABEL_4214:
      v1848 = v290;
      v343 = v291;
      v1881 = 1;
      if (v5 != 141)
        v1881 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1881;
      v1851 = "**i64_atomic_rmw16_sub_u";
      goto LABEL_4577;
    case 197:
      if (v5 == 141)
      {
        v1882 = *((__int16 *)a3 + 1);
        if (v1882 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1882 + 1073741760;
        v292 = *((__int16 *)a3 + 2);
        if (v292 > 63)
          v292 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1883 = *((__int16 *)a3 + 4);
        v293 = v1883 + 1073741760;
        v1884 = v1883 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v292 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v293 = *(_DWORD *)(a3 + 14);
          goto LABEL_4235;
        }
        v1885 = (char)a3[1];
        if (v1885 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1885 + 1073741808;
        v292 = (char)a3[2];
        if (v292 > 15)
          v292 += 1073741808;
        v278 = a3[3];
        v1883 = (char)a3[4];
        v293 = v1883 + 1073741808;
        v1884 = v1883 <= 15;
      }
      if (v1884)
        v293 = v1883;
LABEL_4235:
      v1848 = v292;
      v343 = v293;
      v1886 = 1;
      if (v5 != 141)
        v1886 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1886;
      v1851 = "**i64_atomic_rmw32_sub_u";
      goto LABEL_4577;
    case 198:
      if (v5 == 141)
      {
        v1887 = *((__int16 *)a3 + 1);
        if (v1887 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1887 + 1073741760;
        v294 = *((__int16 *)a3 + 2);
        if (v294 > 63)
          v294 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1888 = *((__int16 *)a3 + 4);
        v295 = v1888 + 1073741760;
        v1889 = v1888 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v294 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v295 = *(_DWORD *)(a3 + 14);
          goto LABEL_4256;
        }
        v1890 = (char)a3[1];
        if (v1890 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1890 + 1073741808;
        v294 = (char)a3[2];
        if (v294 > 15)
          v294 += 1073741808;
        v278 = a3[3];
        v1888 = (char)a3[4];
        v295 = v1888 + 1073741808;
        v1889 = v1888 <= 15;
      }
      if (v1889)
        v295 = v1888;
LABEL_4256:
      v1848 = v294;
      v343 = v295;
      v1891 = 1;
      if (v5 != 141)
        v1891 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1891;
      v1851 = "**i64_atomic_rmw_and";
      goto LABEL_4577;
    case 199:
      if (v5 == 141)
      {
        v1892 = *((__int16 *)a3 + 1);
        if (v1892 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1892 + 1073741760;
        v296 = *((__int16 *)a3 + 2);
        if (v296 > 63)
          v296 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1893 = *((__int16 *)a3 + 4);
        v297 = v1893 + 1073741760;
        v1894 = v1893 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v296 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v297 = *(_DWORD *)(a3 + 14);
          goto LABEL_4277;
        }
        v1895 = (char)a3[1];
        if (v1895 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1895 + 1073741808;
        v296 = (char)a3[2];
        if (v296 > 15)
          v296 += 1073741808;
        v278 = a3[3];
        v1893 = (char)a3[4];
        v297 = v1893 + 1073741808;
        v1894 = v1893 <= 15;
      }
      if (v1894)
        v297 = v1893;
LABEL_4277:
      v1848 = v296;
      v343 = v297;
      v1896 = 1;
      if (v5 != 141)
        v1896 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1896;
      v1851 = "**i64_atomic_rmw8_and_u";
      goto LABEL_4577;
    case 200:
      if (v5 == 141)
      {
        v1897 = *((__int16 *)a3 + 1);
        if (v1897 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1897 + 1073741760;
        v298 = *((__int16 *)a3 + 2);
        if (v298 > 63)
          v298 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1898 = *((__int16 *)a3 + 4);
        v299 = v1898 + 1073741760;
        v1899 = v1898 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v298 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v299 = *(_DWORD *)(a3 + 14);
          goto LABEL_4298;
        }
        v1900 = (char)a3[1];
        if (v1900 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1900 + 1073741808;
        v298 = (char)a3[2];
        if (v298 > 15)
          v298 += 1073741808;
        v278 = a3[3];
        v1898 = (char)a3[4];
        v299 = v1898 + 1073741808;
        v1899 = v1898 <= 15;
      }
      if (v1899)
        v299 = v1898;
LABEL_4298:
      v1848 = v298;
      v343 = v299;
      v1901 = 1;
      if (v5 != 141)
        v1901 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1901;
      v1851 = "**i64_atomic_rmw16_and_u";
      goto LABEL_4577;
    case 201:
      if (v5 == 141)
      {
        v1902 = *((__int16 *)a3 + 1);
        if (v1902 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1902 + 1073741760;
        v300 = *((__int16 *)a3 + 2);
        if (v300 > 63)
          v300 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1903 = *((__int16 *)a3 + 4);
        v301 = v1903 + 1073741760;
        v1904 = v1903 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v300 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v301 = *(_DWORD *)(a3 + 14);
          goto LABEL_4319;
        }
        v1905 = (char)a3[1];
        if (v1905 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1905 + 1073741808;
        v300 = (char)a3[2];
        if (v300 > 15)
          v300 += 1073741808;
        v278 = a3[3];
        v1903 = (char)a3[4];
        v301 = v1903 + 1073741808;
        v1904 = v1903 <= 15;
      }
      if (v1904)
        v301 = v1903;
LABEL_4319:
      v1848 = v300;
      v343 = v301;
      v1906 = 1;
      if (v5 != 141)
        v1906 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1906;
      v1851 = "**i64_atomic_rmw32_and_u";
      goto LABEL_4577;
    case 202:
      if (v5 == 141)
      {
        v1907 = *((__int16 *)a3 + 1);
        if (v1907 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1907 + 1073741760;
        v302 = *((__int16 *)a3 + 2);
        if (v302 > 63)
          v302 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1908 = *((__int16 *)a3 + 4);
        v303 = v1908 + 1073741760;
        v1909 = v1908 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v302 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v303 = *(_DWORD *)(a3 + 14);
          goto LABEL_4340;
        }
        v1910 = (char)a3[1];
        if (v1910 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1910 + 1073741808;
        v302 = (char)a3[2];
        if (v302 > 15)
          v302 += 1073741808;
        v278 = a3[3];
        v1908 = (char)a3[4];
        v303 = v1908 + 1073741808;
        v1909 = v1908 <= 15;
      }
      if (v1909)
        v303 = v1908;
LABEL_4340:
      v1848 = v302;
      v343 = v303;
      v1911 = 1;
      if (v5 != 141)
        v1911 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1911;
      v1851 = "**i64_atomic_rmw_or";
      goto LABEL_4577;
    case 203:
      if (v5 == 141)
      {
        v1912 = *((__int16 *)a3 + 1);
        if (v1912 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1912 + 1073741760;
        v304 = *((__int16 *)a3 + 2);
        if (v304 > 63)
          v304 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1913 = *((__int16 *)a3 + 4);
        v305 = v1913 + 1073741760;
        v1914 = v1913 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v304 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v305 = *(_DWORD *)(a3 + 14);
          goto LABEL_4361;
        }
        v1915 = (char)a3[1];
        if (v1915 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1915 + 1073741808;
        v304 = (char)a3[2];
        if (v304 > 15)
          v304 += 1073741808;
        v278 = a3[3];
        v1913 = (char)a3[4];
        v305 = v1913 + 1073741808;
        v1914 = v1913 <= 15;
      }
      if (v1914)
        v305 = v1913;
LABEL_4361:
      v1848 = v304;
      v343 = v305;
      v1916 = 1;
      if (v5 != 141)
        v1916 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1916;
      v1851 = "**i64_atomic_rmw8_or_u";
      goto LABEL_4577;
    case 204:
      if (v5 == 141)
      {
        v1917 = *((__int16 *)a3 + 1);
        if (v1917 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1917 + 1073741760;
        v306 = *((__int16 *)a3 + 2);
        if (v306 > 63)
          v306 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1918 = *((__int16 *)a3 + 4);
        v307 = v1918 + 1073741760;
        v1919 = v1918 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v306 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v307 = *(_DWORD *)(a3 + 14);
          goto LABEL_4382;
        }
        v1920 = (char)a3[1];
        if (v1920 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1920 + 1073741808;
        v306 = (char)a3[2];
        if (v306 > 15)
          v306 += 1073741808;
        v278 = a3[3];
        v1918 = (char)a3[4];
        v307 = v1918 + 1073741808;
        v1919 = v1918 <= 15;
      }
      if (v1919)
        v307 = v1918;
LABEL_4382:
      v1848 = v306;
      v343 = v307;
      v1921 = 1;
      if (v5 != 141)
        v1921 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1921;
      v1851 = "**i64_atomic_rmw16_or_u";
      goto LABEL_4577;
    case 205:
      if (v5 == 141)
      {
        v1922 = *((__int16 *)a3 + 1);
        if (v1922 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1922 + 1073741760;
        v308 = *((__int16 *)a3 + 2);
        if (v308 > 63)
          v308 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1923 = *((__int16 *)a3 + 4);
        v309 = v1923 + 1073741760;
        v1924 = v1923 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v308 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v309 = *(_DWORD *)(a3 + 14);
          goto LABEL_4403;
        }
        v1925 = (char)a3[1];
        if (v1925 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1925 + 1073741808;
        v308 = (char)a3[2];
        if (v308 > 15)
          v308 += 1073741808;
        v278 = a3[3];
        v1923 = (char)a3[4];
        v309 = v1923 + 1073741808;
        v1924 = v1923 <= 15;
      }
      if (v1924)
        v309 = v1923;
LABEL_4403:
      v1848 = v308;
      v343 = v309;
      v1926 = 1;
      if (v5 != 141)
        v1926 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1926;
      v1851 = "**i64_atomic_rmw32_or_u";
      goto LABEL_4577;
    case 206:
      if (v5 == 141)
      {
        v1927 = *((__int16 *)a3 + 1);
        if (v1927 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1927 + 1073741760;
        v310 = *((__int16 *)a3 + 2);
        if (v310 > 63)
          v310 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1928 = *((__int16 *)a3 + 4);
        v311 = v1928 + 1073741760;
        v1929 = v1928 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v310 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v311 = *(_DWORD *)(a3 + 14);
          goto LABEL_4424;
        }
        v1930 = (char)a3[1];
        if (v1930 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1930 + 1073741808;
        v310 = (char)a3[2];
        if (v310 > 15)
          v310 += 1073741808;
        v278 = a3[3];
        v1928 = (char)a3[4];
        v311 = v1928 + 1073741808;
        v1929 = v1928 <= 15;
      }
      if (v1929)
        v311 = v1928;
LABEL_4424:
      v1848 = v310;
      v343 = v311;
      v1931 = 1;
      if (v5 != 141)
        v1931 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1931;
      v1851 = "**i64_atomic_rmw_xor";
      goto LABEL_4577;
    case 207:
      if (v5 == 141)
      {
        v1932 = *((__int16 *)a3 + 1);
        if (v1932 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1932 + 1073741760;
        v312 = *((__int16 *)a3 + 2);
        if (v312 > 63)
          v312 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1933 = *((__int16 *)a3 + 4);
        v313 = v1933 + 1073741760;
        v1934 = v1933 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v312 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v313 = *(_DWORD *)(a3 + 14);
          goto LABEL_4445;
        }
        v1935 = (char)a3[1];
        if (v1935 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1935 + 1073741808;
        v312 = (char)a3[2];
        if (v312 > 15)
          v312 += 1073741808;
        v278 = a3[3];
        v1933 = (char)a3[4];
        v313 = v1933 + 1073741808;
        v1934 = v1933 <= 15;
      }
      if (v1934)
        v313 = v1933;
LABEL_4445:
      v1848 = v312;
      v343 = v313;
      v1936 = 1;
      if (v5 != 141)
        v1936 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1936;
      v1851 = "**i64_atomic_rmw8_xor_u";
      goto LABEL_4577;
    case 208:
      if (v5 == 141)
      {
        v1937 = *((__int16 *)a3 + 1);
        if (v1937 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1937 + 1073741760;
        v314 = *((__int16 *)a3 + 2);
        if (v314 > 63)
          v314 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1938 = *((__int16 *)a3 + 4);
        v315 = v1938 + 1073741760;
        v1939 = v1938 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v314 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v315 = *(_DWORD *)(a3 + 14);
          goto LABEL_4466;
        }
        v1940 = (char)a3[1];
        if (v1940 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1940 + 1073741808;
        v314 = (char)a3[2];
        if (v314 > 15)
          v314 += 1073741808;
        v278 = a3[3];
        v1938 = (char)a3[4];
        v315 = v1938 + 1073741808;
        v1939 = v1938 <= 15;
      }
      if (v1939)
        v315 = v1938;
LABEL_4466:
      v1848 = v314;
      v343 = v315;
      v1941 = 1;
      if (v5 != 141)
        v1941 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1941;
      v1851 = "**i64_atomic_rmw16_xor_u";
      goto LABEL_4577;
    case 209:
      if (v5 == 141)
      {
        v1942 = *((__int16 *)a3 + 1);
        if (v1942 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1942 + 1073741760;
        v316 = *((__int16 *)a3 + 2);
        if (v316 > 63)
          v316 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1943 = *((__int16 *)a3 + 4);
        v317 = v1943 + 1073741760;
        v1944 = v1943 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v316 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v317 = *(_DWORD *)(a3 + 14);
          goto LABEL_4487;
        }
        v1945 = (char)a3[1];
        if (v1945 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1945 + 1073741808;
        v316 = (char)a3[2];
        if (v316 > 15)
          v316 += 1073741808;
        v278 = a3[3];
        v1943 = (char)a3[4];
        v317 = v1943 + 1073741808;
        v1944 = v1943 <= 15;
      }
      if (v1944)
        v317 = v1943;
LABEL_4487:
      v1848 = v316;
      v343 = v317;
      v1946 = 1;
      if (v5 != 141)
        v1946 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1946;
      v1851 = "**i64_atomic_rmw32_xor_u";
      goto LABEL_4577;
    case 210:
      if (v5 == 141)
      {
        v1947 = *((__int16 *)a3 + 1);
        if (v1947 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1947 + 1073741760;
        v318 = *((__int16 *)a3 + 2);
        if (v318 > 63)
          v318 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1948 = *((__int16 *)a3 + 4);
        v319 = v1948 + 1073741760;
        v1949 = v1948 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v318 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v319 = *(_DWORD *)(a3 + 14);
          goto LABEL_4508;
        }
        v1950 = (char)a3[1];
        if (v1950 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1950 + 1073741808;
        v318 = (char)a3[2];
        if (v318 > 15)
          v318 += 1073741808;
        v278 = a3[3];
        v1948 = (char)a3[4];
        v319 = v1948 + 1073741808;
        v1949 = v1948 <= 15;
      }
      if (v1949)
        v319 = v1948;
LABEL_4508:
      v1848 = v318;
      v343 = v319;
      v1951 = 1;
      if (v5 != 141)
        v1951 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1951;
      v1851 = "**i64_atomic_rmw_xchg";
      goto LABEL_4577;
    case 211:
      if (v5 == 141)
      {
        v1952 = *((__int16 *)a3 + 1);
        if (v1952 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1952 + 1073741760;
        v320 = *((__int16 *)a3 + 2);
        if (v320 > 63)
          v320 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1953 = *((__int16 *)a3 + 4);
        v321 = v1953 + 1073741760;
        v1954 = v1953 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v320 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v321 = *(_DWORD *)(a3 + 14);
          goto LABEL_4529;
        }
        v1955 = (char)a3[1];
        if (v1955 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1955 + 1073741808;
        v320 = (char)a3[2];
        if (v320 > 15)
          v320 += 1073741808;
        v278 = a3[3];
        v1953 = (char)a3[4];
        v321 = v1953 + 1073741808;
        v1954 = v1953 <= 15;
      }
      if (v1954)
        v321 = v1953;
LABEL_4529:
      v1848 = v320;
      v343 = v321;
      v1956 = 1;
      if (v5 != 141)
        v1956 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1956;
      v1851 = "**i64_atomic_rmw8_xchg_u";
      goto LABEL_4577;
    case 212:
      if (v5 == 141)
      {
        v1957 = *((__int16 *)a3 + 1);
        if (v1957 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1957 + 1073741760;
        v322 = *((__int16 *)a3 + 2);
        if (v322 > 63)
          v322 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1958 = *((__int16 *)a3 + 4);
        v323 = v1958 + 1073741760;
        v1959 = v1958 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v322 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v323 = *(_DWORD *)(a3 + 14);
          goto LABEL_4550;
        }
        v1960 = (char)a3[1];
        if (v1960 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1960 + 1073741808;
        v322 = (char)a3[2];
        if (v322 > 15)
          v322 += 1073741808;
        v278 = a3[3];
        v1958 = (char)a3[4];
        v323 = v1958 + 1073741808;
        v1959 = v1958 <= 15;
      }
      if (v1959)
        v323 = v1958;
LABEL_4550:
      v1848 = v322;
      v343 = v323;
      v1961 = 1;
      if (v5 != 141)
        v1961 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1961;
      v1851 = "**i64_atomic_rmw16_xchg_u";
      goto LABEL_4577;
    case 213:
      if (v5 == 141)
      {
        v1962 = *((__int16 *)a3 + 1);
        if (v1962 <= 63)
          v276 = *((__int16 *)a3 + 1);
        else
          v276 = v1962 + 1073741760;
        v324 = *((__int16 *)a3 + 2);
        if (v324 > 63)
          v324 += 1073741760;
        v278 = *((unsigned __int16 *)a3 + 3);
        v1963 = *((__int16 *)a3 + 4);
        v325 = v1963 + 1073741760;
        v1964 = v1963 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v276 = *(_DWORD *)(a3 + 2);
          v324 = *(_DWORD *)(a3 + 6);
          v278 = *(_DWORD *)(a3 + 10);
          v325 = *(_DWORD *)(a3 + 14);
          goto LABEL_4571;
        }
        v1965 = (char)a3[1];
        if (v1965 <= 15)
          v276 = (char)a3[1];
        else
          v276 = v1965 + 1073741808;
        v324 = (char)a3[2];
        if (v324 > 15)
          v324 += 1073741808;
        v278 = a3[3];
        v1963 = (char)a3[4];
        v325 = v1963 + 1073741808;
        v1964 = v1963 <= 15;
      }
      if (v1964)
        v325 = v1963;
LABEL_4571:
      v1848 = v324;
      v343 = v325;
      v1966 = 1;
      if (v5 != 141)
        v1966 = 2;
      if (v5 == 142)
        v1850 = 0;
      else
        v1850 = v1966;
      v1851 = "**i64_atomic_rmw32_xchg_u";
LABEL_4577:
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &v1851[v1850]);
      v1967 = *(_QWORD *)(a1 + 8);
      v1968 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1967 + 32))(v1967);
      WTF::PrintStream::printf(v1968, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v1967 + 40))(v1967);
      v1969 = *(_QWORD *)(a1 + 8);
      v1970 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1969 + 32))(v1969);
      WTF::PrintStream::printf(v1970, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1969 + 40))(v1969);
      v1971 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v276);
      if (v2819)
        v1972 = (char *)v2819 + 16;
      else
        v1972 = 0;
      WTF::PrintStream::printf(v1971, "%s", v1972);
      v1980 = v2819;
      v2819 = 0;
      if (v1980)
      {
        if (*(_DWORD *)v1980 == 1)
          WTF::fastFree((unint64_t)v1980, v1973, v1974, v1975, v1976, v1977, v1978, v1979);
        else
          --*(_DWORD *)v1980;
      }
      v1981 = *(_QWORD *)(a1 + 8);
      v1982 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1981 + 32))(v1981);
      WTF::PrintStream::printf(v1982, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1981 + 40))(v1981);
      v1983 = *(_QWORD *)(a1 + 8);
      v1984 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1983 + 32))(v1983);
      WTF::PrintStream::printf(v1984, "%s", "pointer");
      (*(void (**)(uint64_t))(*(_QWORD *)v1983 + 40))(v1983);
      v1985 = *(_QWORD *)(a1 + 8);
      v1986 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1985 + 32))(v1985);
      WTF::PrintStream::printf(v1986, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v1985 + 40))(v1985);
      v1987 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(&v2819, a1, v1848);
      if (v2819)
        v1988 = (char *)v2819 + 16;
      else
        v1988 = 0;
      WTF::PrintStream::printf(v1987, "%s", v1988);
      v1996 = v2819;
      v2819 = 0;
      if (v1996)
      {
        if (*(_DWORD *)v1996 == 1)
          WTF::fastFree((unint64_t)v1996, v1989, v1990, v1991, v1992, v1993, v1994, v1995);
        else
          --*(_DWORD *)v1996;
      }
      v1997 = *(_QWORD *)(a1 + 8);
      v1998 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1997 + 32))(v1997);
      WTF::PrintStream::printf(v1998, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v1997 + 40))(v1997);
      v1999 = *(_QWORD *)(a1 + 8);
      v2000 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1999 + 32))(v1999);
      WTF::PrintStream::printf(v2000, "%s", "offset");
      (*(void (**)(uint64_t))(*(_QWORD *)v1999 + 40))(v1999);
      v2001 = *(_QWORD *)(a1 + 8);
      v2002 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2001 + 32))(v2001);
      WTF::PrintStream::printf(v2002, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2001 + 40))(v2001);
      v2003 = *(_QWORD *)(a1 + 8);
      v2004 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2003 + 32))(v2003);
      WTF::PrintStream::printf(v2004, "%u", v278);
      (*(void (**)(uint64_t))(*(_QWORD *)v2003 + 40))(v2003);
      v2005 = *(_QWORD *)(a1 + 8);
      v2006 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2005 + 32))(v2005);
      WTF::PrintStream::printf(v2006, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2005 + 40))(v2005);
      v2007 = *(_QWORD *)(a1 + 8);
      v2008 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2007 + 32))(v2007);
      v2009 = "value";
      goto LABEL_4590;
    case 214:
      if (v5 == 141)
      {
        v2012 = *((__int16 *)a3 + 1);
        if (v2012 <= 63)
          v326 = *((__int16 *)a3 + 1);
        else
          v326 = v2012 + 1073741760;
        v2013 = *((__int16 *)a3 + 2);
        if (v2013 <= 63)
          v327 = *((__int16 *)a3 + 2);
        else
          v327 = v2013 + 1073741760;
        v328 = *((unsigned __int16 *)a3 + 3);
        v2014 = *((__int16 *)a3 + 4);
        if (v2014 <= 63)
          v329 = *((__int16 *)a3 + 4);
        else
          v329 = v2014 + 1073741760;
        v2015 = *((__int16 *)a3 + 5);
        v2016 = v2015 + 1073741760;
        v2017 = v2015 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v326 = *(_DWORD *)(a3 + 2);
          v327 = *(_DWORD *)(a3 + 6);
          v328 = *(_DWORD *)(a3 + 10);
          v329 = *(_DWORD *)(a3 + 14);
          v330 = *(_DWORD *)(a3 + 18);
          goto LABEL_4617;
        }
        v2018 = (char)a3[1];
        if (v2018 <= 15)
          v326 = (char)a3[1];
        else
          v326 = v2018 + 1073741808;
        v2019 = (char)a3[2];
        if (v2019 <= 15)
          v327 = (char)a3[2];
        else
          v327 = v2019 + 1073741808;
        v328 = a3[3];
        v2020 = (char)a3[4];
        if (v2020 <= 15)
          v329 = (char)a3[4];
        else
          v329 = v2020 + 1073741808;
        v2015 = (char)a3[5];
        v2016 = v2015 + 1073741808;
        v2017 = v2015 <= 15;
      }
      if (v2017)
        v330 = v2015;
      else
        v330 = v2016;
LABEL_4617:
      v2021 = 1;
      if (v5 != 141)
        v2021 = 2;
      if (v5 == 142)
        v2022 = 0;
      else
        v2022 = v2021;
      v2023 = "**i64_atomic_rmw_cmpxchg";
      goto LABEL_4710;
    case 215:
      if (v5 == 141)
      {
        v2024 = *((__int16 *)a3 + 1);
        if (v2024 <= 63)
          v326 = *((__int16 *)a3 + 1);
        else
          v326 = v2024 + 1073741760;
        v2025 = *((__int16 *)a3 + 2);
        if (v2025 <= 63)
          v327 = *((__int16 *)a3 + 2);
        else
          v327 = v2025 + 1073741760;
        v328 = *((unsigned __int16 *)a3 + 3);
        v2026 = *((__int16 *)a3 + 4);
        if (v2026 <= 63)
          v329 = *((__int16 *)a3 + 4);
        else
          v329 = v2026 + 1073741760;
        v2027 = *((__int16 *)a3 + 5);
        v2028 = v2027 + 1073741760;
        v2029 = v2027 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v326 = *(_DWORD *)(a3 + 2);
          v327 = *(_DWORD *)(a3 + 6);
          v328 = *(_DWORD *)(a3 + 10);
          v329 = *(_DWORD *)(a3 + 14);
          v330 = *(_DWORD *)(a3 + 18);
          goto LABEL_4646;
        }
        v2030 = (char)a3[1];
        if (v2030 <= 15)
          v326 = (char)a3[1];
        else
          v326 = v2030 + 1073741808;
        v2031 = (char)a3[2];
        if (v2031 <= 15)
          v327 = (char)a3[2];
        else
          v327 = v2031 + 1073741808;
        v328 = a3[3];
        v2032 = (char)a3[4];
        if (v2032 <= 15)
          v329 = (char)a3[4];
        else
          v329 = v2032 + 1073741808;
        v2027 = (char)a3[5];
        v2028 = v2027 + 1073741808;
        v2029 = v2027 <= 15;
      }
      if (v2029)
        v330 = v2027;
      else
        v330 = v2028;
LABEL_4646:
      v2033 = 1;
      if (v5 != 141)
        v2033 = 2;
      if (v5 == 142)
        v2022 = 0;
      else
        v2022 = v2033;
      v2023 = "**i64_atomic_rmw8_cmpxchg_u";
      goto LABEL_4710;
    case 216:
      if (v5 == 141)
      {
        v2034 = *((__int16 *)a3 + 1);
        if (v2034 <= 63)
          v326 = *((__int16 *)a3 + 1);
        else
          v326 = v2034 + 1073741760;
        v2035 = *((__int16 *)a3 + 2);
        if (v2035 <= 63)
          v327 = *((__int16 *)a3 + 2);
        else
          v327 = v2035 + 1073741760;
        v328 = *((unsigned __int16 *)a3 + 3);
        v2036 = *((__int16 *)a3 + 4);
        if (v2036 <= 63)
          v329 = *((__int16 *)a3 + 4);
        else
          v329 = v2036 + 1073741760;
        v2037 = *((__int16 *)a3 + 5);
        v2038 = v2037 + 1073741760;
        v2039 = v2037 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v326 = *(_DWORD *)(a3 + 2);
          v327 = *(_DWORD *)(a3 + 6);
          v328 = *(_DWORD *)(a3 + 10);
          v329 = *(_DWORD *)(a3 + 14);
          v330 = *(_DWORD *)(a3 + 18);
          goto LABEL_4675;
        }
        v2040 = (char)a3[1];
        if (v2040 <= 15)
          v326 = (char)a3[1];
        else
          v326 = v2040 + 1073741808;
        v2041 = (char)a3[2];
        if (v2041 <= 15)
          v327 = (char)a3[2];
        else
          v327 = v2041 + 1073741808;
        v328 = a3[3];
        v2042 = (char)a3[4];
        if (v2042 <= 15)
          v329 = (char)a3[4];
        else
          v329 = v2042 + 1073741808;
        v2037 = (char)a3[5];
        v2038 = v2037 + 1073741808;
        v2039 = v2037 <= 15;
      }
      if (v2039)
        v330 = v2037;
      else
        v330 = v2038;
LABEL_4675:
      v2043 = 1;
      if (v5 != 141)
        v2043 = 2;
      if (v5 == 142)
        v2022 = 0;
      else
        v2022 = v2043;
      v2023 = "**i64_atomic_rmw16_cmpxchg_u";
      goto LABEL_4710;
    case 217:
      if (v5 == 141)
      {
        v2044 = *((__int16 *)a3 + 1);
        if (v2044 <= 63)
          v326 = *((__int16 *)a3 + 1);
        else
          v326 = v2044 + 1073741760;
        v2045 = *((__int16 *)a3 + 2);
        if (v2045 <= 63)
          v327 = *((__int16 *)a3 + 2);
        else
          v327 = v2045 + 1073741760;
        v328 = *((unsigned __int16 *)a3 + 3);
        v2046 = *((__int16 *)a3 + 4);
        if (v2046 <= 63)
          v329 = *((__int16 *)a3 + 4);
        else
          v329 = v2046 + 1073741760;
        v2047 = *((__int16 *)a3 + 5);
        v2048 = v2047 + 1073741760;
        v2049 = v2047 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v326 = *(_DWORD *)(a3 + 2);
          v327 = *(_DWORD *)(a3 + 6);
          v328 = *(_DWORD *)(a3 + 10);
          v329 = *(_DWORD *)(a3 + 14);
          v330 = *(_DWORD *)(a3 + 18);
          goto LABEL_4704;
        }
        v2050 = (char)a3[1];
        if (v2050 <= 15)
          v326 = (char)a3[1];
        else
          v326 = v2050 + 1073741808;
        v2051 = (char)a3[2];
        if (v2051 <= 15)
          v327 = (char)a3[2];
        else
          v327 = v2051 + 1073741808;
        v328 = a3[3];
        v2052 = (char)a3[4];
        if (v2052 <= 15)
          v329 = (char)a3[4];
        else
          v329 = v2052 + 1073741808;
        v2047 = (char)a3[5];
        v2048 = v2047 + 1073741808;
        v2049 = v2047 <= 15;
      }
      if (v2049)
        v330 = v2047;
      else
        v330 = v2048;
LABEL_4704:
      v2053 = 1;
      if (v5 != 141)
        v2053 = 2;
      if (v5 == 142)
        v2022 = 0;
      else
        v2022 = v2053;
      v2023 = "**i64_atomic_rmw32_cmpxchg_u";
LABEL_4710:
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &v2023[v2022]);
      v2054 = *(_QWORD *)(a1 + 8);
      v2055 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2054 + 32))(v2054);
      WTF::PrintStream::printf(v2055, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v2054 + 40))(v2054);
      v2056 = *(_QWORD *)(a1 + 8);
      v2057 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2056 + 32))(v2056);
      WTF::PrintStream::printf(v2057, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2056 + 40))(v2056);
      v2058 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v326);
      if (v2819)
        v2059 = (char *)v2819 + 16;
      else
        v2059 = 0;
      WTF::PrintStream::printf(v2058, "%s", v2059);
      v2067 = v2819;
      v2819 = 0;
      if (v2067)
      {
        if (*(_DWORD *)v2067 == 1)
          WTF::fastFree((unint64_t)v2067, v2060, v2061, v2062, v2063, v2064, v2065, v2066);
        else
          --*(_DWORD *)v2067;
      }
      v2068 = *(_QWORD *)(a1 + 8);
      v2069 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2068 + 32))(v2068);
      WTF::PrintStream::printf(v2069, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2068 + 40))(v2068);
      v2070 = *(_QWORD *)(a1 + 8);
      v2071 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2070 + 32))(v2070);
      WTF::PrintStream::printf(v2071, "%s", "pointer");
      (*(void (**)(uint64_t))(*(_QWORD *)v2070 + 40))(v2070);
      v2072 = *(_QWORD *)(a1 + 8);
      v2073 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2072 + 32))(v2072);
      WTF::PrintStream::printf(v2073, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2072 + 40))(v2072);
      v2074 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v327);
      if (v2819)
        v2075 = (char *)v2819 + 16;
      else
        v2075 = 0;
      WTF::PrintStream::printf(v2074, "%s", v2075);
      v2083 = v2819;
      v2819 = 0;
      if (v2083)
      {
        if (*(_DWORD *)v2083 == 1)
          WTF::fastFree((unint64_t)v2083, v2076, v2077, v2078, v2079, v2080, v2081, v2082);
        else
          --*(_DWORD *)v2083;
      }
      v2084 = *(_QWORD *)(a1 + 8);
      v2085 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2084 + 32))(v2084);
      WTF::PrintStream::printf(v2085, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2084 + 40))(v2084);
      v2086 = *(_QWORD *)(a1 + 8);
      v2087 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2086 + 32))(v2086);
      WTF::PrintStream::printf(v2087, "%s", "offset");
      (*(void (**)(uint64_t))(*(_QWORD *)v2086 + 40))(v2086);
      v2088 = *(_QWORD *)(a1 + 8);
      v2089 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2088 + 32))(v2088);
      WTF::PrintStream::printf(v2089, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2088 + 40))(v2088);
      v2090 = *(_QWORD *)(a1 + 8);
      v2091 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2090 + 32))(v2090);
      WTF::PrintStream::printf(v2091, "%u", v328);
      (*(void (**)(uint64_t))(*(_QWORD *)v2090 + 40))(v2090);
      v2092 = *(_QWORD *)(a1 + 8);
      v2093 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2092 + 32))(v2092);
      WTF::PrintStream::printf(v2093, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2092 + 40))(v2092);
      v2094 = *(_QWORD *)(a1 + 8);
      v2095 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2094 + 32))(v2094);
      WTF::PrintStream::printf(v2095, "%s", "expected");
      (*(void (**)(uint64_t))(*(_QWORD *)v2094 + 40))(v2094);
      v2096 = *(_QWORD *)(a1 + 8);
      v2097 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2096 + 32))(v2096);
      WTF::PrintStream::printf(v2097, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2096 + 40))(v2096);
      v2098 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v329);
      if (v2819)
        v2099 = (char *)v2819 + 16;
      else
        v2099 = 0;
      WTF::PrintStream::printf(v2098, "%s", v2099);
      v2107 = v2819;
      v2819 = 0;
      if (v2107)
      {
        if (*(_DWORD *)v2107 == 1)
          WTF::fastFree((unint64_t)v2107, v2100, v2101, v2102, v2103, v2104, v2105, v2106);
        else
          --*(_DWORD *)v2107;
      }
      v343 = v330;
      v2108 = *(_QWORD *)(a1 + 8);
      v2109 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2108 + 32))(v2108);
      WTF::PrintStream::printf(v2109, "%s", ", ");
      goto LABEL_4916;
    case 218:
      if (v5 == 141)
      {
        v2110 = *((__int16 *)a3 + 1);
        if (v2110 <= 63)
          v331 = *((__int16 *)a3 + 1);
        else
          v331 = v2110 + 1073741760;
        v2111 = *((__int16 *)a3 + 2);
        if (v2111 <= 63)
          v332 = *((__int16 *)a3 + 2);
        else
          v332 = v2111 + 1073741760;
        v333 = *((unsigned __int16 *)a3 + 3);
        v2112 = *((__int16 *)a3 + 4);
        if (v2112 <= 63)
          v334 = *((__int16 *)a3 + 4);
        else
          v334 = v2112 + 1073741760;
        v2113 = *((__int16 *)a3 + 5);
        v2114 = v2113 + 1073741760;
        v2115 = v2113 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v331 = *(_DWORD *)(a3 + 2);
          v332 = *(_DWORD *)(a3 + 6);
          v333 = *(_DWORD *)(a3 + 10);
          v334 = *(_DWORD *)(a3 + 14);
          v335 = *(_DWORD *)(a3 + 18);
          goto LABEL_4755;
        }
        v2116 = (char)a3[1];
        if (v2116 <= 15)
          v331 = (char)a3[1];
        else
          v331 = v2116 + 1073741808;
        v2117 = (char)a3[2];
        if (v2117 <= 15)
          v332 = (char)a3[2];
        else
          v332 = v2117 + 1073741808;
        v333 = a3[3];
        v2118 = (char)a3[4];
        if (v2118 <= 15)
          v334 = (char)a3[4];
        else
          v334 = v2118 + 1073741808;
        v2113 = (char)a3[5];
        v2114 = v2113 + 1073741808;
        v2115 = v2113 <= 15;
      }
      if (v2115)
        v335 = v2113;
      else
        v335 = v2114;
LABEL_4755:
      v2119 = 1;
      if (v5 != 141)
        v2119 = 2;
      if (v5 == 142)
        v2120 = 0;
      else
        v2120 = v2119;
      v2121 = "**memory_atomic_wait32";
      goto LABEL_4790;
    case 219:
      if (v5 == 141)
      {
        v2122 = *((__int16 *)a3 + 1);
        if (v2122 <= 63)
          v331 = *((__int16 *)a3 + 1);
        else
          v331 = v2122 + 1073741760;
        v2123 = *((__int16 *)a3 + 2);
        if (v2123 <= 63)
          v332 = *((__int16 *)a3 + 2);
        else
          v332 = v2123 + 1073741760;
        v333 = *((unsigned __int16 *)a3 + 3);
        v2124 = *((__int16 *)a3 + 4);
        if (v2124 <= 63)
          v334 = *((__int16 *)a3 + 4);
        else
          v334 = v2124 + 1073741760;
        v2125 = *((__int16 *)a3 + 5);
        v2126 = v2125 + 1073741760;
        v2127 = v2125 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v331 = *(_DWORD *)(a3 + 2);
          v332 = *(_DWORD *)(a3 + 6);
          v333 = *(_DWORD *)(a3 + 10);
          v334 = *(_DWORD *)(a3 + 14);
          v335 = *(_DWORD *)(a3 + 18);
          goto LABEL_4784;
        }
        v2128 = (char)a3[1];
        if (v2128 <= 15)
          v331 = (char)a3[1];
        else
          v331 = v2128 + 1073741808;
        v2129 = (char)a3[2];
        if (v2129 <= 15)
          v332 = (char)a3[2];
        else
          v332 = v2129 + 1073741808;
        v333 = a3[3];
        v2130 = (char)a3[4];
        if (v2130 <= 15)
          v334 = (char)a3[4];
        else
          v334 = v2130 + 1073741808;
        v2125 = (char)a3[5];
        v2126 = v2125 + 1073741808;
        v2127 = v2125 <= 15;
      }
      if (v2127)
        v335 = v2125;
      else
        v335 = v2126;
LABEL_4784:
      v2131 = 1;
      if (v5 != 141)
        v2131 = 2;
      if (v5 == 142)
        v2120 = 0;
      else
        v2120 = v2131;
      v2121 = "**memory_atomic_wait64";
LABEL_4790:
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &v2121[v2120]);
      v2132 = *(_QWORD *)(a1 + 8);
      v2133 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2132 + 32))(v2132);
      WTF::PrintStream::printf(v2133, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v2132 + 40))(v2132);
      v2134 = *(_QWORD *)(a1 + 8);
      v2135 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2134 + 32))(v2134);
      WTF::PrintStream::printf(v2135, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2134 + 40))(v2134);
      v2136 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v331);
      if (v2819)
        v2137 = (char *)v2819 + 16;
      else
        v2137 = 0;
      WTF::PrintStream::printf(v2136, "%s", v2137);
      v2145 = v2819;
      v2819 = 0;
      if (v2145)
      {
        if (*(_DWORD *)v2145 == 1)
          WTF::fastFree((unint64_t)v2145, v2138, v2139, v2140, v2141, v2142, v2143, v2144);
        else
          --*(_DWORD *)v2145;
      }
      v2146 = *(_QWORD *)(a1 + 8);
      v2147 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2146 + 32))(v2146);
      WTF::PrintStream::printf(v2147, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2146 + 40))(v2146);
      v2148 = *(_QWORD *)(a1 + 8);
      v2149 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2148 + 32))(v2148);
      WTF::PrintStream::printf(v2149, "%s", "pointer");
      (*(void (**)(uint64_t))(*(_QWORD *)v2148 + 40))(v2148);
      v2150 = *(_QWORD *)(a1 + 8);
      v2151 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2150 + 32))(v2150);
      WTF::PrintStream::printf(v2151, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2150 + 40))(v2150);
      v2152 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v332);
      if (v2819)
        v2153 = (char *)v2819 + 16;
      else
        v2153 = 0;
      WTF::PrintStream::printf(v2152, "%s", v2153);
      v2161 = v2819;
      v2819 = 0;
      if (v2161)
      {
        if (*(_DWORD *)v2161 == 1)
          WTF::fastFree((unint64_t)v2161, v2154, v2155, v2156, v2157, v2158, v2159, v2160);
        else
          --*(_DWORD *)v2161;
      }
      v2162 = *(_QWORD *)(a1 + 8);
      v2163 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2162 + 32))(v2162);
      WTF::PrintStream::printf(v2163, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2162 + 40))(v2162);
      v2164 = *(_QWORD *)(a1 + 8);
      v2165 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2164 + 32))(v2164);
      WTF::PrintStream::printf(v2165, "%s", "offset");
      (*(void (**)(uint64_t))(*(_QWORD *)v2164 + 40))(v2164);
      v2166 = *(_QWORD *)(a1 + 8);
      v2167 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2166 + 32))(v2166);
      WTF::PrintStream::printf(v2167, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2166 + 40))(v2166);
      v2168 = *(_QWORD *)(a1 + 8);
      v2169 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2168 + 32))(v2168);
      WTF::PrintStream::printf(v2169, "%u", v333);
      (*(void (**)(uint64_t))(*(_QWORD *)v2168 + 40))(v2168);
      v2170 = *(_QWORD *)(a1 + 8);
      v2171 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2170 + 32))(v2170);
      WTF::PrintStream::printf(v2171, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2170 + 40))(v2170);
      v2172 = *(_QWORD *)(a1 + 8);
      v2173 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2172 + 32))(v2172);
      WTF::PrintStream::printf(v2173, "%s", "value");
      (*(void (**)(uint64_t))(*(_QWORD *)v2172 + 40))(v2172);
      v2174 = *(_QWORD *)(a1 + 8);
      v2175 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2174 + 32))(v2174);
      WTF::PrintStream::printf(v2175, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2174 + 40))(v2174);
      v2176 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v334);
      if (v2819)
        v2177 = (char *)v2819 + 16;
      else
        v2177 = 0;
      WTF::PrintStream::printf(v2176, "%s", v2177);
      v2185 = v2819;
      v2819 = 0;
      if (v2185)
      {
        if (*(_DWORD *)v2185 == 1)
          WTF::fastFree((unint64_t)v2185, v2178, v2179, v2180, v2181, v2182, v2183, v2184);
        else
          --*(_DWORD *)v2185;
      }
      v343 = v335;
      v2186 = *(_QWORD *)(a1 + 8);
      v2187 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2186 + 32))(v2186);
      WTF::PrintStream::printf(v2187, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2186 + 40))(v2186);
      v465 = *(_QWORD *)(a1 + 8);
      v466 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 32))(v465);
      v467 = "timeout";
      goto LABEL_5249;
    case 220:
      if (v5 == 141)
      {
        v2188 = *((__int16 *)a3 + 1);
        if (v2188 <= 63)
          v336 = *((__int16 *)a3 + 1);
        else
          v336 = v2188 + 1073741760;
        v337 = *((__int16 *)a3 + 2);
        if (v337 > 63)
          v337 += 1073741760;
        v338 = *((unsigned __int16 *)a3 + 3);
        v2189 = *((__int16 *)a3 + 4);
        v339 = v2189 + 1073741760;
        v2190 = v2189 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v336 = *(_DWORD *)(a3 + 2);
          v337 = *(_DWORD *)(a3 + 6);
          v338 = *(_DWORD *)(a3 + 10);
          v339 = *(_DWORD *)(a3 + 14);
          goto LABEL_4824;
        }
        v2191 = (char)a3[1];
        if (v2191 <= 15)
          v336 = (char)a3[1];
        else
          v336 = v2191 + 1073741808;
        v337 = (char)a3[2];
        if (v337 > 15)
          v337 += 1073741808;
        v338 = a3[3];
        v2189 = (char)a3[4];
        v339 = v2189 + 1073741808;
        v2190 = v2189 <= 15;
      }
      if (v2190)
        v339 = v2189;
LABEL_4824:
      v2192 = v337;
      v343 = v339;
      v2193 = 1;
      if (v5 != 141)
        v2193 = 2;
      if (v5 == 142)
        v2194 = 0;
      else
        v2194 = v2193;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aMemoryAtomicNo[v2194]);
      v2195 = *(_QWORD *)(a1 + 8);
      v2196 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2195 + 32))(v2195);
      WTF::PrintStream::printf(v2196, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v2195 + 40))(v2195);
      v2197 = *(_QWORD *)(a1 + 8);
      v2198 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2197 + 32))(v2197);
      WTF::PrintStream::printf(v2198, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2197 + 40))(v2197);
      v2199 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v336);
      if (v2819)
        v2200 = (char *)v2819 + 16;
      else
        v2200 = 0;
      WTF::PrintStream::printf(v2199, "%s", v2200);
      v2208 = v2819;
      v2819 = 0;
      if (v2208)
      {
        if (*(_DWORD *)v2208 == 1)
          WTF::fastFree((unint64_t)v2208, v2201, v2202, v2203, v2204, v2205, v2206, v2207);
        else
          --*(_DWORD *)v2208;
      }
      v2209 = *(_QWORD *)(a1 + 8);
      v2210 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2209 + 32))(v2209);
      WTF::PrintStream::printf(v2210, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2209 + 40))(v2209);
      v2211 = *(_QWORD *)(a1 + 8);
      v2212 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2211 + 32))(v2211);
      WTF::PrintStream::printf(v2212, "%s", "pointer");
      (*(void (**)(uint64_t))(*(_QWORD *)v2211 + 40))(v2211);
      v2213 = *(_QWORD *)(a1 + 8);
      v2214 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2213 + 32))(v2213);
      WTF::PrintStream::printf(v2214, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2213 + 40))(v2213);
      v2215 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(&v2819, a1, v2192);
      if (v2819)
        v2216 = (char *)v2819 + 16;
      else
        v2216 = 0;
      WTF::PrintStream::printf(v2215, "%s", v2216);
      v2224 = v2819;
      v2819 = 0;
      if (v2224)
      {
        if (*(_DWORD *)v2224 == 1)
          WTF::fastFree((unint64_t)v2224, v2217, v2218, v2219, v2220, v2221, v2222, v2223);
        else
          --*(_DWORD *)v2224;
      }
      v2225 = *(_QWORD *)(a1 + 8);
      v2226 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2225 + 32))(v2225);
      WTF::PrintStream::printf(v2226, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2225 + 40))(v2225);
      v2227 = *(_QWORD *)(a1 + 8);
      v2228 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2227 + 32))(v2227);
      WTF::PrintStream::printf(v2228, "%s", "offset");
      (*(void (**)(uint64_t))(*(_QWORD *)v2227 + 40))(v2227);
      v2229 = *(_QWORD *)(a1 + 8);
      v2230 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2229 + 32))(v2229);
      WTF::PrintStream::printf(v2230, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2229 + 40))(v2229);
      v2231 = *(_QWORD *)(a1 + 8);
      v2232 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2231 + 32))(v2231);
      WTF::PrintStream::printf(v2232, "%u", v338);
      (*(void (**)(uint64_t))(*(_QWORD *)v2231 + 40))(v2231);
      v2233 = *(_QWORD *)(a1 + 8);
      v2234 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2233 + 32))(v2233);
      WTF::PrintStream::printf(v2234, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2233 + 40))(v2233);
      v2007 = *(_QWORD *)(a1 + 8);
      v2008 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2007 + 32))(v2007);
      v2009 = "count";
LABEL_4590:
      WTF::PrintStream::printf(v2008, "%s", v2009);
      (*(void (**)(uint64_t))(*(_QWORD *)v2007 + 40))(v2007);
      v2010 = *(_QWORD *)(a1 + 8);
      v2011 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2010 + 32))(v2010);
      WTF::PrintStream::printf(v2011, "%s", ":");
      goto LABEL_4591;
    case 221:
      v340 = 1;
      if (v5 != 141)
        v340 = 2;
      if (v5 == 142)
        v148 = 0;
      else
        v148 = v340;
      v149 = "**atomic_fence";
LABEL_733:
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &v149[v148]);
      return;
    case 222:
      if (v5 == 141)
      {
        v341 = *((unsigned __int16 *)a3 + 1);
        v342 = *((__int16 *)a3 + 2);
        v2235 = v342 + 1073741760;
        v2236 = v342 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v341 = *(_DWORD *)(a3 + 2);
          v342 = *(_DWORD *)(a3 + 6);
          goto LABEL_4846;
        }
        v341 = a3[1];
        v342 = (char)a3[2];
        v2235 = v342 + 1073741808;
        v2236 = v342 <= 15;
      }
      if (!v2236)
        v342 = v2235;
LABEL_4846:
      v343 = v342;
      v2237 = 1;
      if (v5 != 141)
        v2237 = 2;
      if (v5 == 142)
        v2238 = 0;
      else
        v2238 = v2237;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aThrow[v2238]);
      v2239 = *(_QWORD *)(a1 + 8);
      v2240 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2239 + 32))(v2239);
      WTF::PrintStream::printf(v2240, "%s", "exceptionIndex");
      (*(void (**)(uint64_t))(*(_QWORD *)v2239 + 40))(v2239);
      v2241 = *(_QWORD *)(a1 + 8);
      v2242 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2241 + 32))(v2241);
      WTF::PrintStream::printf(v2242, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2241 + 40))(v2241);
      v2243 = *(_QWORD *)(a1 + 8);
      v2244 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2243 + 32))(v2243);
      WTF::PrintStream::printf(v2244, "%u", v341);
      (*(void (**)(uint64_t))(*(_QWORD *)v2243 + 40))(v2243);
      v2245 = *(_QWORD *)(a1 + 8);
      v2246 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2245 + 32))(v2245);
      WTF::PrintStream::printf(v2246, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2245 + 40))(v2245);
      v1366 = *(_QWORD *)(a1 + 8);
      v1367 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1366 + 32))(v1366);
      v1368 = "firstValue";
LABEL_4852:
      WTF::PrintStream::printf(v1367, "%s", v1368);
      (*(void (**)(uint64_t))(*(_QWORD *)v1366 + 40))(v1366);
      v2010 = *(_QWORD *)(a1 + 8);
      v2247 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2010 + 32))(v2010);
      WTF::PrintStream::printf(v2247, "%s", ":");
      goto LABEL_4591;
    case 223:
      if (v5 == 141)
      {
        v2248 = *((__int16 *)a3 + 1);
        v2249 = v2248 + 1073741760;
        v2250 = v2248 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          LODWORD(v343) = *(_DWORD *)(a3 + 2);
          goto LABEL_4858;
        }
        v2248 = (char)a3[1];
        v2249 = v2248 + 1073741808;
        v2250 = v2248 <= 15;
      }
      if (v2250)
        LODWORD(v343) = v2248;
      else
        LODWORD(v343) = v2249;
LABEL_4858:
      v2251 = 1;
      if (v5 != 141)
        v2251 = 2;
      if (v5 == 142)
        v2252 = 0;
      else
        v2252 = v2251;
      v2253 = "**rethrow";
      goto LABEL_4893;
    case 224:
      if (v5 == 141)
      {
        v344 = *((unsigned __int16 *)a3 + 1);
        v345 = *((__int16 *)a3 + 2);
        if (v345 > 63)
          v345 += 1073741760;
        v346 = *((unsigned __int16 *)a3 + 3);
      }
      else if (v5 == 142)
      {
        v344 = *(_DWORD *)(a3 + 2);
        v345 = *(_DWORD *)(a3 + 6);
        v346 = *(_DWORD *)(a3 + 10);
      }
      else
      {
        v344 = a3[1];
        v345 = (char)a3[2];
        if (v345 > 15)
          v345 += 1073741808;
        v346 = a3[3];
      }
      v2254 = v345;
      v2255 = 1;
      if (v5 != 141)
        v2255 = 2;
      if (v5 == 142)
        v2256 = 0;
      else
        v2256 = v2255;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aCatch[v2256]);
      v2257 = *(_QWORD *)(a1 + 8);
      v2258 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2257 + 32))(v2257);
      WTF::PrintStream::printf(v2258, "%s", "exceptionIndex");
      (*(void (**)(uint64_t))(*(_QWORD *)v2257 + 40))(v2257);
      v2259 = *(_QWORD *)(a1 + 8);
      v2260 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2259 + 32))(v2259);
      WTF::PrintStream::printf(v2260, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2259 + 40))(v2259);
      v2261 = *(_QWORD *)(a1 + 8);
      v2262 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2261 + 32))(v2261);
      WTF::PrintStream::printf(v2262, "%u", v344);
      (*(void (**)(uint64_t))(*(_QWORD *)v2261 + 40))(v2261);
      v2263 = *(_QWORD *)(a1 + 8);
      v2264 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2263 + 32))(v2263);
      WTF::PrintStream::printf(v2264, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2263 + 40))(v2263);
      v2265 = *(_QWORD *)(a1 + 8);
      v2266 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2265 + 32))(v2265);
      WTF::PrintStream::printf(v2266, "%s", "exception");
      (*(void (**)(uint64_t))(*(_QWORD *)v2265 + 40))(v2265);
      v2267 = *(_QWORD *)(a1 + 8);
      v2268 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2267 + 32))(v2267);
      WTF::PrintStream::printf(v2268, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2267 + 40))(v2267);
      v2269 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(&v2819, a1, v2254);
      if (v2819)
        v2270 = (char *)v2819 + 16;
      else
        v2270 = 0;
      WTF::PrintStream::printf(v2269, "%s", v2270);
      v2278 = v2819;
      v2819 = 0;
      if (v2278)
      {
        if (*(_DWORD *)v2278 == 1)
          WTF::fastFree((unint64_t)v2278, v2271, v2272, v2273, v2274, v2275, v2276, v2277);
        else
          --*(_DWORD *)v2278;
      }
      v2279 = *(_QWORD *)(a1 + 8);
      v2280 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2279 + 32))(v2279);
      WTF::PrintStream::printf(v2280, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2279 + 40))(v2279);
      v2281 = *(_QWORD *)(a1 + 8);
      v2282 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2281 + 32))(v2281);
      WTF::PrintStream::printf(v2282, "%s", "argumentCount");
      (*(void (**)(uint64_t))(*(_QWORD *)v2281 + 40))(v2281);
      v2283 = *(_QWORD *)(a1 + 8);
      v2284 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2283 + 32))(v2283);
      WTF::PrintStream::printf(v2284, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2283 + 40))(v2283);
      v2285 = *(_QWORD *)(a1 + 8);
      v2286 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2285 + 32))(v2285);
      WTF::PrintStream::printf(v2286, "%u", v346);
      (*(void (**)(uint64_t))(*(_QWORD *)v2285 + 40))(v2285);
      v2287 = *(_QWORD *)(a1 + 8);
      v2288 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2287 + 32))(v2287);
      WTF::PrintStream::printf(v2288, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2287 + 40))(v2287);
      v1476 = *(_QWORD *)(a1 + 8);
      v1477 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1476 + 32))(v1476);
      v1478 = "startOffset";
      goto LABEL_5039;
    case 225:
      if (v5 == 141)
      {
        v2289 = *((__int16 *)a3 + 1);
        v2290 = v2289 + 1073741760;
        v2291 = v2289 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          LODWORD(v343) = *(_DWORD *)(a3 + 2);
          goto LABEL_4887;
        }
        v2289 = (char)a3[1];
        v2290 = v2289 + 1073741808;
        v2291 = v2289 <= 15;
      }
      if (v2291)
        LODWORD(v343) = v2289;
      else
        LODWORD(v343) = v2290;
LABEL_4887:
      v2292 = 1;
      if (v5 != 141)
        v2292 = 2;
      if (v5 == 142)
        v2252 = 0;
      else
        v2252 = v2292;
      v2253 = "**catch_all";
LABEL_4893:
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &v2253[v2252]);
      v343 = v343;
      v2293 = *(_QWORD *)(a1 + 8);
      v2294 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2293 + 32))(v2293);
      WTF::PrintStream::printf(v2294, "%s", "exception");
      (*(void (**)(uint64_t))(*(_QWORD *)v2293 + 40))(v2293);
      v2295 = *(_QWORD *)(a1 + 8);
      v2296 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2295 + 32))(v2295);
      WTF::PrintStream::printf(v2296, "%s", ":");
      goto LABEL_5250;
    case 226:
      if (v5 == 141)
      {
        v2297 = *((__int16 *)a3 + 1);
        if (v2297 <= 63)
          v347 = *((__int16 *)a3 + 1);
        else
          v347 = v2297 + 1073741760;
        v348 = *((__int16 *)a3 + 2);
        v2298 = v348 + 1073741760;
        v2299 = v348 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v347 = *(_DWORD *)(a3 + 2);
          v348 = *(_DWORD *)(a3 + 6);
          goto LABEL_4904;
        }
        v2300 = (char)a3[1];
        if (v2300 <= 15)
          v347 = (char)a3[1];
        else
          v347 = v2300 + 1073741808;
        v348 = (char)a3[2];
        v2298 = v348 + 1073741808;
        v2299 = v348 <= 15;
      }
      if (!v2299)
        v348 = v2298;
LABEL_4904:
      v343 = v348;
      v2301 = 1;
      if (v5 != 141)
        v2301 = 2;
      if (v5 == 142)
        v2302 = 0;
      else
        v2302 = v2301;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aRefI31[v2302]);
      v2303 = *(_QWORD *)(a1 + 8);
      v2304 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2303 + 32))(v2303);
      WTF::PrintStream::printf(v2304, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v2303 + 40))(v2303);
      v2305 = *(_QWORD *)(a1 + 8);
      v2306 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2305 + 32))(v2305);
      WTF::PrintStream::printf(v2306, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2305 + 40))(v2305);
      v2307 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v347);
      if (v2819)
        v2308 = (char *)v2819 + 16;
      else
        v2308 = 0;
      WTF::PrintStream::printf(v2307, "%s", v2308);
      v2316 = v2819;
      v2819 = 0;
      if (v2316)
      {
        if (*(_DWORD *)v2316 == 1)
          WTF::fastFree((unint64_t)v2316, v2309, v2310, v2311, v2312, v2313, v2314, v2315);
        else
          --*(_DWORD *)v2316;
      }
      v2108 = *(_QWORD *)(a1 + 8);
      v2317 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2108 + 32))(v2108);
      WTF::PrintStream::printf(v2317, "%s", ", ");
LABEL_4916:
      (*(void (**)(uint64_t))(*(_QWORD *)v2108 + 40))(v2108);
      v465 = *(_QWORD *)(a1 + 8);
      v466 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 32))(v465);
      v467 = "value";
      goto LABEL_5249;
    case 227:
      if (v5 == 141)
      {
        v2318 = *((__int16 *)a3 + 1);
        if (v2318 <= 63)
          v349 = *((__int16 *)a3 + 1);
        else
          v349 = v2318 + 1073741760;
        v350 = *((__int16 *)a3 + 2);
        if (v350 > 63)
          v350 += 1073741760;
        v351 = a3[6];
        goto LABEL_4923;
      }
      if (v5 == 142)
      {
        v349 = *(_DWORD *)(a3 + 2);
        v350 = *(_DWORD *)(a3 + 6);
        v351 = a3[10];
LABEL_4923:
        v2319 = v351 != 0;
        goto LABEL_4930;
      }
      v2320 = (char)a3[1];
      if (v2320 <= 15)
        v349 = (char)a3[1];
      else
        v349 = v2320 + 1073741808;
      v350 = (char)a3[2];
      if (v350 > 15)
        v350 += 1073741808;
      v2319 = a3[3] & 1;
LABEL_4930:
      v2321 = v350;
      v2322 = 1;
      if (v5 != 141)
        v2322 = 2;
      if (v5 == 142)
        v2323 = 0;
      else
        v2323 = v2322;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aI31Get[v2323]);
      v2324 = *(_QWORD *)(a1 + 8);
      v2325 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2324 + 32))(v2324);
      WTF::PrintStream::printf(v2325, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v2324 + 40))(v2324);
      v2326 = *(_QWORD *)(a1 + 8);
      v2327 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2326 + 32))(v2326);
      WTF::PrintStream::printf(v2327, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2326 + 40))(v2326);
      v2328 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v349);
      if (v2819)
        v2329 = (char *)v2819 + 16;
      else
        v2329 = 0;
      WTF::PrintStream::printf(v2328, "%s", v2329);
      v2337 = v2819;
      v2819 = 0;
      if (v2337)
      {
        if (*(_DWORD *)v2337 == 1)
          WTF::fastFree((unint64_t)v2337, v2330, v2331, v2332, v2333, v2334, v2335, v2336);
        else
          --*(_DWORD *)v2337;
      }
      v2338 = *(_QWORD *)(a1 + 8);
      v2339 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2338 + 32))(v2338);
      WTF::PrintStream::printf(v2339, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2338 + 40))(v2338);
      v2340 = *(_QWORD *)(a1 + 8);
      v2341 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2340 + 32))(v2340);
      WTF::PrintStream::printf(v2341, "%s", "ref");
      (*(void (**)(uint64_t))(*(_QWORD *)v2340 + 40))(v2340);
      v2342 = *(_QWORD *)(a1 + 8);
      v2343 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2342 + 32))(v2342);
      WTF::PrintStream::printf(v2343, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2342 + 40))(v2342);
      v2344 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(&v2819, a1, v2321);
      if (v2819)
        v2345 = (char *)v2819 + 16;
      else
        v2345 = 0;
      WTF::PrintStream::printf(v2344, "%s", v2345);
      v2353 = v2819;
      v2819 = 0;
      if (v2353)
      {
        if (*(_DWORD *)v2353 == 1)
          WTF::fastFree((unint64_t)v2353, v2346, v2347, v2348, v2349, v2350, v2351, v2352);
        else
          --*(_DWORD *)v2353;
      }
      v2354 = *(_QWORD *)(a1 + 8);
      v2355 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2354 + 32))(v2354);
      WTF::PrintStream::printf(v2355, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2354 + 40))(v2354);
      v2356 = *(_QWORD *)(a1 + 8);
      v2357 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2356 + 32))(v2356);
      WTF::PrintStream::printf(v2357, "%s", "isSigned");
      (*(void (**)(uint64_t))(*(_QWORD *)v2356 + 40))(v2356);
      v2358 = *(_QWORD *)(a1 + 8);
      v2359 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2358 + 32))(v2358);
      WTF::PrintStream::printf(v2359, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2358 + 40))(v2358);
      v1611 = *(_QWORD *)(a1 + 8);
      v2360 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1611 + 32))(v1611);
      v2361 = v2360;
      if (v2319)
        v2362 = "true";
      else
        v2362 = "false";
      v2363 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2360 + 32))(v2360);
      WTF::PrintStream::printf(v2363, "%s", v2362);
      (*(void (**)(uint64_t))(*(_QWORD *)v2361 + 40))(v2361);
LABEL_5136:
      (*(void (**)(uint64_t))(*(_QWORD *)v1611 + 40))(v1611);
      return;
    case 228:
      if (v5 == 141)
      {
        v2364 = *((__int16 *)a3 + 1);
        if (v2364 <= 63)
          v352 = *((__int16 *)a3 + 1);
        else
          v352 = v2364 + 1073741760;
        v2365 = *((__int16 *)a3 + 2);
        if (v2365 <= 63)
          v353 = *((__int16 *)a3 + 2);
        else
          v353 = v2365 + 1073741760;
        v2366 = *((__int16 *)a3 + 3);
        if (v2366 <= 63)
          v354 = *((__int16 *)a3 + 3);
        else
          v354 = v2366 + 1073741760;
        v355 = *((unsigned __int16 *)a3 + 4);
      }
      else if (v5 == 142)
      {
        v352 = *(_DWORD *)(a3 + 2);
        v353 = *(_DWORD *)(a3 + 6);
        v354 = *(_DWORD *)(a3 + 10);
        v355 = *(_DWORD *)(a3 + 14);
      }
      else
      {
        v2367 = (char)a3[1];
        if (v2367 <= 15)
          v352 = (char)a3[1];
        else
          v352 = v2367 + 1073741808;
        v2368 = (char)a3[2];
        if (v2368 <= 15)
          v353 = (char)a3[2];
        else
          v353 = v2368 + 1073741808;
        v2369 = (char)a3[3];
        if (v2369 <= 15)
          v354 = (char)a3[3];
        else
          v354 = v2369 + 1073741808;
        v355 = a3[4];
      }
      v2370 = 1;
      if (v5 != 141)
        v2370 = 2;
      if (v5 == 142)
        v2371 = 0;
      else
        v2371 = v2370;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aArrayNew[v2371]);
      v2372 = *(_QWORD *)(a1 + 8);
      v2373 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2372 + 32))(v2372);
      WTF::PrintStream::printf(v2373, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v2372 + 40))(v2372);
      v2374 = *(_QWORD *)(a1 + 8);
      v2375 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2374 + 32))(v2374);
      WTF::PrintStream::printf(v2375, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2374 + 40))(v2374);
      v2376 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v352);
      if (v2819)
        v2377 = (char *)v2819 + 16;
      else
        v2377 = 0;
      WTF::PrintStream::printf(v2376, "%s", v2377);
      v2385 = v2819;
      v2819 = 0;
      if (v2385)
      {
        if (*(_DWORD *)v2385 == 1)
          WTF::fastFree((unint64_t)v2385, v2378, v2379, v2380, v2381, v2382, v2383, v2384);
        else
          --*(_DWORD *)v2385;
      }
      v2386 = *(_QWORD *)(a1 + 8);
      v2387 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2386 + 32))(v2386);
      WTF::PrintStream::printf(v2387, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2386 + 40))(v2386);
      v2388 = *(_QWORD *)(a1 + 8);
      v2389 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2388 + 32))(v2388);
      WTF::PrintStream::printf(v2389, "%s", "size");
      (*(void (**)(uint64_t))(*(_QWORD *)v2388 + 40))(v2388);
      v2390 = *(_QWORD *)(a1 + 8);
      v2391 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2390 + 32))(v2390);
      WTF::PrintStream::printf(v2391, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2390 + 40))(v2390);
      v2392 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v353);
      if (v2819)
        v2393 = (char *)v2819 + 16;
      else
        v2393 = 0;
      WTF::PrintStream::printf(v2392, "%s", v2393);
      v2401 = v2819;
      v2819 = 0;
      if (v2401)
      {
        if (*(_DWORD *)v2401 == 1)
          WTF::fastFree((unint64_t)v2401, v2394, v2395, v2396, v2397, v2398, v2399, v2400);
        else
          --*(_DWORD *)v2401;
      }
      v2402 = *(_QWORD *)(a1 + 8);
      v2403 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2402 + 32))(v2402);
      WTF::PrintStream::printf(v2403, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2402 + 40))(v2402);
      v2404 = *(_QWORD *)(a1 + 8);
      v2405 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2404 + 32))(v2404);
      WTF::PrintStream::printf(v2405, "%s", "value");
      (*(void (**)(uint64_t))(*(_QWORD *)v2404 + 40))(v2404);
      v2406 = *(_QWORD *)(a1 + 8);
      v2407 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2406 + 32))(v2406);
      WTF::PrintStream::printf(v2407, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2406 + 40))(v2406);
      v2408 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v354);
      if (v2819)
        v2409 = (char *)v2819 + 16;
      else
        v2409 = 0;
      WTF::PrintStream::printf(v2408, "%s", v2409);
      v2417 = v2819;
      v2819 = 0;
      if (v2417)
      {
        if (*(_DWORD *)v2417 == 1)
          WTF::fastFree((unint64_t)v2417, v2410, v2411, v2412, v2413, v2414, v2415, v2416);
        else
          --*(_DWORD *)v2417;
      }
      v2418 = *(_QWORD *)(a1 + 8);
      v2419 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2418 + 32))(v2418);
      WTF::PrintStream::printf(v2419, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2418 + 40))(v2418);
      v2420 = *(_QWORD *)(a1 + 8);
      v2421 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2420 + 32))(v2420);
      WTF::PrintStream::printf(v2421, "%s", "typeIndex");
      (*(void (**)(uint64_t))(*(_QWORD *)v2420 + 40))(v2420);
      v2422 = *(_QWORD *)(a1 + 8);
      v2423 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2422 + 32))(v2422);
      WTF::PrintStream::printf(v2423, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2422 + 40))(v2422);
      v2424 = *(_QWORD *)(a1 + 8);
      v2425 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2424 + 32))(v2424);
      WTF::PrintStream::printf(v2425, "%u", v355);
      (*(void (**)(uint64_t))(*(_QWORD *)v2424 + 40))(v2424);
      v2426 = *(_QWORD *)(a1 + 8);
      v2427 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2426 + 32))(v2426);
      WTF::PrintStream::printf(v2427, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2426 + 40))(v2426);
      v2428 = *(_QWORD *)(a1 + 8);
      v2429 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2428 + 32))(v2428);
      WTF::PrintStream::printf(v2429, "%s", "arrayNewKind");
      (*(void (**)(uint64_t))(*(_QWORD *)v2428 + 40))(v2428);
      v2430 = *(_QWORD *)(a1 + 8);
      v2431 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2430 + 32))(v2430);
      WTF::PrintStream::printf(v2431, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2430 + 40))(v2430);
      v1611 = *(_QWORD *)(a1 + 8);
      v1612 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1611 + 32))(v1611);
      goto LABEL_5135;
    case 229:
      if (v5 == 141)
      {
        v2432 = *((__int16 *)a3 + 1);
        if (v2432 <= 63)
          v356 = *((__int16 *)a3 + 1);
        else
          v356 = v2432 + 1073741760;
        v2433 = *((__int16 *)a3 + 2);
        if (v2433 <= 63)
          v357 = *((__int16 *)a3 + 2);
        else
          v357 = v2433 + 1073741760;
        v2434 = *((__int16 *)a3 + 3);
        if (v2434 <= 63)
          v358 = *((__int16 *)a3 + 3);
        else
          v358 = v2434 + 1073741760;
        v359 = *((unsigned __int16 *)a3 + 4);
      }
      else if (v5 == 142)
      {
        v356 = *(_DWORD *)(a3 + 2);
        v357 = *(_DWORD *)(a3 + 6);
        v358 = *(_DWORD *)(a3 + 10);
        v359 = *(_DWORD *)(a3 + 14);
      }
      else
      {
        v2435 = (char)a3[1];
        if (v2435 <= 15)
          v356 = (char)a3[1];
        else
          v356 = v2435 + 1073741808;
        v2436 = (char)a3[2];
        if (v2436 <= 15)
          v357 = (char)a3[2];
        else
          v357 = v2436 + 1073741808;
        v2437 = (char)a3[3];
        if (v2437 <= 15)
          v358 = (char)a3[3];
        else
          v358 = v2437 + 1073741808;
        v359 = a3[4];
      }
      v2438 = 1;
      if (v5 != 141)
        v2438 = 2;
      if (v5 == 142)
        v2439 = 0;
      else
        v2439 = v2438;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aArrayGet[v2439]);
      v2440 = *(_QWORD *)(a1 + 8);
      v2441 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2440 + 32))(v2440);
      WTF::PrintStream::printf(v2441, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v2440 + 40))(v2440);
      v2442 = *(_QWORD *)(a1 + 8);
      v2443 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2442 + 32))(v2442);
      WTF::PrintStream::printf(v2443, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2442 + 40))(v2442);
      v2444 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v356);
      if (v2819)
        v2445 = (char *)v2819 + 16;
      else
        v2445 = 0;
      WTF::PrintStream::printf(v2444, "%s", v2445);
      v2453 = v2819;
      v2819 = 0;
      if (v2453)
      {
        if (*(_DWORD *)v2453 == 1)
          WTF::fastFree((unint64_t)v2453, v2446, v2447, v2448, v2449, v2450, v2451, v2452);
        else
          --*(_DWORD *)v2453;
      }
      v2454 = *(_QWORD *)(a1 + 8);
      v2455 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2454 + 32))(v2454);
      WTF::PrintStream::printf(v2455, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2454 + 40))(v2454);
      v2456 = *(_QWORD *)(a1 + 8);
      v2457 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2456 + 32))(v2456);
      WTF::PrintStream::printf(v2457, "%s", "arrayref");
      (*(void (**)(uint64_t))(*(_QWORD *)v2456 + 40))(v2456);
      v2458 = *(_QWORD *)(a1 + 8);
      v2459 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2458 + 32))(v2458);
      WTF::PrintStream::printf(v2459, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2458 + 40))(v2458);
      v2460 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v357);
      if (v2819)
        v2461 = (char *)v2819 + 16;
      else
        v2461 = 0;
      WTF::PrintStream::printf(v2460, "%s", v2461);
      v2469 = v2819;
      v2819 = 0;
      if (v2469)
      {
        if (*(_DWORD *)v2469 == 1)
          WTF::fastFree((unint64_t)v2469, v2462, v2463, v2464, v2465, v2466, v2467, v2468);
        else
          --*(_DWORD *)v2469;
      }
      v2470 = *(_QWORD *)(a1 + 8);
      v2471 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2470 + 32))(v2470);
      WTF::PrintStream::printf(v2471, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2470 + 40))(v2470);
      v2472 = *(_QWORD *)(a1 + 8);
      v2473 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2472 + 32))(v2472);
      WTF::PrintStream::printf(v2473, "%s", "index");
      (*(void (**)(uint64_t))(*(_QWORD *)v2472 + 40))(v2472);
      v2474 = *(_QWORD *)(a1 + 8);
      v2475 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2474 + 32))(v2474);
      WTF::PrintStream::printf(v2475, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2474 + 40))(v2474);
      v2476 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v358);
      if (v2819)
        v2477 = (char *)v2819 + 16;
      else
        v2477 = 0;
      WTF::PrintStream::printf(v2476, "%s", v2477);
      v2485 = v2819;
      v2819 = 0;
      if (v2485)
      {
        if (*(_DWORD *)v2485 == 1)
          WTF::fastFree((unint64_t)v2485, v2478, v2479, v2480, v2481, v2482, v2483, v2484);
        else
          --*(_DWORD *)v2485;
      }
      v2486 = *(_QWORD *)(a1 + 8);
      v2487 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2486 + 32))(v2486);
      WTF::PrintStream::printf(v2487, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2486 + 40))(v2486);
      v2488 = *(_QWORD *)(a1 + 8);
      v2489 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2488 + 32))(v2488);
      WTF::PrintStream::printf(v2489, "%s", "typeIndex");
      (*(void (**)(uint64_t))(*(_QWORD *)v2488 + 40))(v2488);
      v2490 = *(_QWORD *)(a1 + 8);
      v2491 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2490 + 32))(v2490);
      WTF::PrintStream::printf(v2491, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2490 + 40))(v2490);
      v2492 = *(_QWORD *)(a1 + 8);
      v2493 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2492 + 32))(v2492);
      WTF::PrintStream::printf(v2493, "%u", v359);
      (*(void (**)(uint64_t))(*(_QWORD *)v2492 + 40))(v2492);
      v2494 = *(_QWORD *)(a1 + 8);
      v2495 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2494 + 32))(v2494);
      WTF::PrintStream::printf(v2495, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2494 + 40))(v2494);
      v1476 = *(_QWORD *)(a1 + 8);
      v1477 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1476 + 32))(v1476);
      v1478 = "arrayGetKind";
LABEL_5039:
      WTF::PrintStream::printf(v1477, "%s", v1478);
      (*(void (**)(uint64_t))(*(_QWORD *)v1476 + 40))(v1476);
      v2496 = *(_QWORD *)(a1 + 8);
      v2497 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2496 + 32))(v2496);
      WTF::PrintStream::printf(v2497, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2496 + 40))(v2496);
      v1611 = *(_QWORD *)(a1 + 8);
      v1612 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1611 + 32))(v1611);
      goto LABEL_5135;
    case 230:
      if (v5 == 141)
      {
        v2498 = *((__int16 *)a3 + 1);
        if (v2498 <= 63)
          v360 = *((__int16 *)a3 + 1);
        else
          v360 = v2498 + 1073741760;
        v361 = *((__int16 *)a3 + 2);
        if (v361 > 63)
          v361 += 1073741760;
        v2499 = *((__int16 *)a3 + 3);
        if (v2499 <= 63)
          v362 = *((__int16 *)a3 + 3);
        else
          v362 = v2499 + 1073741760;
      }
      else if (v5 == 142)
      {
        v360 = *(_DWORD *)(a3 + 2);
        v361 = *(_DWORD *)(a3 + 6);
        v362 = *(_DWORD *)(a3 + 10);
      }
      else
      {
        v2500 = (char)a3[1];
        if (v2500 <= 15)
          v360 = (char)a3[1];
        else
          v360 = v2500 + 1073741808;
        v361 = (char)a3[2];
        if (v361 > 15)
          v361 += 1073741808;
        v2501 = (char)a3[3];
        if (v2501 <= 15)
          v362 = (char)a3[3];
        else
          v362 = v2501 + 1073741808;
      }
      v2502 = v361;
      v2503 = 1;
      if (v5 != 141)
        v2503 = 2;
      if (v5 == 142)
        v2504 = 0;
      else
        v2504 = v2503;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aArraySet[v2504]);
      v2505 = *(_QWORD *)(a1 + 8);
      v2506 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2505 + 32))(v2505);
      WTF::PrintStream::printf(v2506, "%s", "arrayref");
      (*(void (**)(uint64_t))(*(_QWORD *)v2505 + 40))(v2505);
      v2507 = *(_QWORD *)(a1 + 8);
      v2508 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2507 + 32))(v2507);
      WTF::PrintStream::printf(v2508, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2507 + 40))(v2507);
      v2509 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v360);
      if (v2819)
        v2510 = (char *)v2819 + 16;
      else
        v2510 = 0;
      WTF::PrintStream::printf(v2509, "%s", v2510);
      v2518 = v2819;
      v2819 = 0;
      if (v2518)
      {
        if (*(_DWORD *)v2518 == 1)
          WTF::fastFree((unint64_t)v2518, v2511, v2512, v2513, v2514, v2515, v2516, v2517);
        else
          --*(_DWORD *)v2518;
      }
      v2519 = *(_QWORD *)(a1 + 8);
      v2520 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2519 + 32))(v2519);
      WTF::PrintStream::printf(v2520, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2519 + 40))(v2519);
      v2521 = *(_QWORD *)(a1 + 8);
      v2522 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2521 + 32))(v2521);
      WTF::PrintStream::printf(v2522, "%s", "index");
      (*(void (**)(uint64_t))(*(_QWORD *)v2521 + 40))(v2521);
      v2523 = *(_QWORD *)(a1 + 8);
      v2524 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2523 + 32))(v2523);
      WTF::PrintStream::printf(v2524, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2523 + 40))(v2523);
      v2525 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(&v2819, a1, v2502);
      if (v2819)
        v2526 = (char *)v2819 + 16;
      else
        v2526 = 0;
      WTF::PrintStream::printf(v2525, "%s", v2526);
      v2534 = v2819;
      v2819 = 0;
      if (v2534)
      {
        if (*(_DWORD *)v2534 == 1)
          WTF::fastFree((unint64_t)v2534, v2527, v2528, v2529, v2530, v2531, v2532, v2533);
        else
          --*(_DWORD *)v2534;
      }
      v2535 = *(_QWORD *)(a1 + 8);
      v2536 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2535 + 32))(v2535);
      WTF::PrintStream::printf(v2536, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2535 + 40))(v2535);
      v2537 = *(_QWORD *)(a1 + 8);
      v2538 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2537 + 32))(v2537);
      WTF::PrintStream::printf(v2538, "%s", "value");
      (*(void (**)(uint64_t))(*(_QWORD *)v2537 + 40))(v2537);
      v2539 = *(_QWORD *)(a1 + 8);
      v2540 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2539 + 32))(v2539);
      WTF::PrintStream::printf(v2540, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2539 + 40))(v2539);
      v2541 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v362);
      if (v2819)
        v2542 = (char *)v2819 + 16;
      else
        v2542 = 0;
      WTF::PrintStream::printf(v2541, "%s", v2542);
      v2550 = v2819;
      v2819 = 0;
      if (!v2550)
        goto LABEL_5133;
      if (*(_DWORD *)v2550 == 1)
        goto LABEL_5302;
      --*(_DWORD *)v2550;
      goto LABEL_5133;
    case 231:
      if (v5 == 141)
      {
        v2551 = *((__int16 *)a3 + 1);
        if (v2551 <= 63)
          v363 = *((__int16 *)a3 + 1);
        else
          v363 = v2551 + 1073741760;
        v364 = *((__int16 *)a3 + 2);
        v2552 = v364 + 1073741760;
        v2553 = v364 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v363 = *(_DWORD *)(a3 + 2);
          v364 = *(_DWORD *)(a3 + 6);
          goto LABEL_5090;
        }
        v2554 = (char)a3[1];
        if (v2554 <= 15)
          v363 = (char)a3[1];
        else
          v363 = v2554 + 1073741808;
        v364 = (char)a3[2];
        v2552 = v364 + 1073741808;
        v2553 = v364 <= 15;
      }
      if (!v2553)
        v364 = v2552;
LABEL_5090:
      v343 = v364;
      v2555 = 1;
      if (v5 != 141)
        v2555 = 2;
      if (v5 == 142)
        v2556 = 0;
      else
        v2556 = v2555;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aArrayLen[v2556]);
      v2557 = *(_QWORD *)(a1 + 8);
      v2558 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2557 + 32))(v2557);
      WTF::PrintStream::printf(v2558, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v2557 + 40))(v2557);
      v2559 = *(_QWORD *)(a1 + 8);
      v2560 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2559 + 32))(v2559);
      WTF::PrintStream::printf(v2560, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2559 + 40))(v2559);
      v2561 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v363);
      if (v2819)
        v2562 = (char *)v2819 + 16;
      else
        v2562 = 0;
      WTF::PrintStream::printf(v2561, "%s", v2562);
      v2570 = v2819;
      v2819 = 0;
      if (v2570)
      {
        if (*(_DWORD *)v2570 == 1)
          WTF::fastFree((unint64_t)v2570, v2563, v2564, v2565, v2566, v2567, v2568, v2569);
        else
          --*(_DWORD *)v2570;
      }
      v2571 = *(_QWORD *)(a1 + 8);
      v2572 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2571 + 32))(v2571);
      WTF::PrintStream::printf(v2572, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2571 + 40))(v2571);
      v465 = *(_QWORD *)(a1 + 8);
      v466 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 32))(v465);
      v467 = "arrayref";
      goto LABEL_5249;
    case 232:
      if (v5 == 141)
      {
        v2573 = *(int16x4_t *)(a3 + 2);
        v2574 = vmovl_s16(v2573);
        v2575.i64[0] = 0x3F0000003FLL;
        v2575.i64[1] = 0x3F0000003FLL;
        v2817 = vbslq_s8((int8x16_t)vcgtq_s32(v2574, v2575), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFC0u), v2573), (int8x16_t)v2574);
      }
      else if (v5 == 142)
      {
        v2817 = *(int8x16_t *)(a3 + 2);
      }
      else
      {
        a4.i32[0] = *(_DWORD *)(a3 + 1);
        v2576 = (int16x4_t)vmovl_s8(a4).u64[0];
        v2577 = vmovl_s16(v2576);
        v2578.i64[0] = 0xF0000000FLL;
        v2578.i64[1] = 0xF0000000FLL;
        v2817 = vbslq_s8((int8x16_t)vcgtq_s32(v2577, v2578), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v2576), (int8x16_t)v2577);
      }
      v2579 = 1;
      if (v5 != 141)
        v2579 = 2;
      if (v5 == 142)
        v2580 = 0;
      else
        v2580 = v2579;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aArrayFill[v2580]);
      v2581 = *(_QWORD *)(a1 + 8);
      v2582 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2581 + 32))(v2581);
      WTF::PrintStream::printf(v2582, "%s", "arrayref");
      (*(void (**)(uint64_t))(*(_QWORD *)v2581 + 40))(v2581);
      v2583 = *(_QWORD *)(a1 + 8);
      v2584 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2583 + 32))(v2583);
      WTF::PrintStream::printf(v2584, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2583 + 40))(v2583);
      v2585 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v2817.u32[0]);
      if (v2819)
        v2586 = (char *)v2819 + 16;
      else
        v2586 = 0;
      WTF::PrintStream::printf(v2585, "%s", v2586);
      v2594 = v2819;
      v2819 = 0;
      if (v2594)
      {
        if (*(_DWORD *)v2594 == 1)
          WTF::fastFree((unint64_t)v2594, v2587, v2588, v2589, v2590, v2591, v2592, v2593);
        else
          --*(_DWORD *)v2594;
      }
      v2595 = *(_QWORD *)(a1 + 8);
      v2596 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2595 + 32))(v2595);
      WTF::PrintStream::printf(v2596, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2595 + 40))(v2595);
      v2597 = *(_QWORD *)(a1 + 8);
      v2598 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2597 + 32))(v2597);
      WTF::PrintStream::printf(v2598, "%s", "offset");
      (*(void (**)(uint64_t))(*(_QWORD *)v2597 + 40))(v2597);
      v2599 = *(_QWORD *)(a1 + 8);
      v2600 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2599 + 32))(v2599);
      WTF::PrintStream::printf(v2600, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2599 + 40))(v2599);
      v2601 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v2817.u32[1]);
      if (v2819)
        v2602 = (char *)v2819 + 16;
      else
        v2602 = 0;
      WTF::PrintStream::printf(v2601, "%s", v2602);
      v2610 = v2819;
      v2819 = 0;
      if (v2610)
      {
        if (*(_DWORD *)v2610 == 1)
          WTF::fastFree((unint64_t)v2610, v2603, v2604, v2605, v2606, v2607, v2608, v2609);
        else
          --*(_DWORD *)v2610;
      }
      v2611 = *(_QWORD *)(a1 + 8);
      v2612 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2611 + 32))(v2611);
      WTF::PrintStream::printf(v2612, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2611 + 40))(v2611);
      v2613 = *(_QWORD *)(a1 + 8);
      v2614 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2613 + 32))(v2613);
      WTF::PrintStream::printf(v2614, "%s", "value");
      (*(void (**)(uint64_t))(*(_QWORD *)v2613 + 40))(v2613);
      v2615 = *(_QWORD *)(a1 + 8);
      v2616 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2615 + 32))(v2615);
      WTF::PrintStream::printf(v2616, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2615 + 40))(v2615);
      v2617 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v2817.u32[2]);
      if (v2819)
        v2618 = (char *)v2819 + 16;
      else
        v2618 = 0;
      WTF::PrintStream::printf(v2617, "%s", v2618);
      v2626 = v2819;
      v2819 = 0;
      if (v2626)
      {
        if (*(_DWORD *)v2626 == 1)
          WTF::fastFree((unint64_t)v2626, v2619, v2620, v2621, v2622, v2623, v2624, v2625);
        else
          --*(_DWORD *)v2626;
      }
      v2627 = *(_QWORD *)(a1 + 8);
      v2628 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2627 + 32))(v2627);
      WTF::PrintStream::printf(v2628, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2627 + 40))(v2627);
      v2629 = *(_QWORD *)(a1 + 8);
      v2630 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2629 + 32))(v2629);
      WTF::PrintStream::printf(v2630, "%s", "size");
      (*(void (**)(uint64_t))(*(_QWORD *)v2629 + 40))(v2629);
      v2631 = *(_QWORD *)(a1 + 8);
      v2632 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2631 + 32))(v2631);
      WTF::PrintStream::printf(v2632, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2631 + 40))(v2631);
      v2633 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v2817.u32[3]);
      if (v2819)
        v2634 = (char *)v2819 + 16;
      else
        v2634 = 0;
      WTF::PrintStream::printf(v2633, "%s", v2634);
      v2550 = v2819;
      v2819 = 0;
      if (!v2550)
        goto LABEL_5133;
      if (*(_DWORD *)v2550 == 1)
LABEL_5302:
        WTF::fastFree((unint64_t)v2550, v2543, v2544, v2545, v2546, v2547, v2548, v2549);
      else
        --*(_DWORD *)v2550;
LABEL_5133:
      v2635 = *(_QWORD *)(a1 + 8);
      v2636 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2635 + 32))(v2635);
      WTF::PrintStream::printf(v2636, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2635 + 40))(v2635);
      v1248 = *(_QWORD *)(a1 + 8);
      v1249 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1248 + 32))(v1248);
      v1250 = "typeIndex";
LABEL_5134:
      WTF::PrintStream::printf(v1249, "%s", v1250);
      (*(void (**)(uint64_t))(*(_QWORD *)v1248 + 40))(v1248);
      v2637 = *(_QWORD *)(a1 + 8);
      v2638 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2637 + 32))(v2637);
      WTF::PrintStream::printf(v2638, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2637 + 40))(v2637);
      v1611 = *(_QWORD *)(a1 + 8);
      v1612 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1611 + 32))(v1611);
LABEL_5135:
      WTF::PrintStream::printf(v1612, "%u");
      goto LABEL_5136;
    case 233:
      if (v5 == 141)
      {
        v2639 = *((__int16 *)a3 + 1);
        if (v2639 <= 63)
          v365 = *((__int16 *)a3 + 1);
        else
          v365 = v2639 + 1073741760;
        v366 = *((unsigned __int16 *)a3 + 2);
        v367 = a3[6] != 0;
        v368 = *((__int16 *)a3 + 4);
        v2640 = v368 + 1073741760;
        v2641 = v368 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v365 = *(_DWORD *)(a3 + 2);
          v366 = *(_DWORD *)(a3 + 6);
          v367 = a3[10] != 0;
          v368 = *(_DWORD *)(a3 + 14);
          goto LABEL_5147;
        }
        v2642 = (char)a3[1];
        if (v2642 <= 15)
          v365 = (char)a3[1];
        else
          v365 = v2642 + 1073741808;
        v366 = a3[2];
        v367 = a3[3] & 1;
        v368 = (char)a3[4];
        v2640 = v368 + 1073741808;
        v2641 = v368 <= 15;
      }
      if (!v2641)
        v368 = v2640;
LABEL_5147:
      v343 = v368;
      v2643 = 1;
      if (v5 != 141)
        v2643 = 2;
      if (v5 == 142)
        v2644 = 0;
      else
        v2644 = v2643;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aStructNew[v2644]);
      v2645 = *(_QWORD *)(a1 + 8);
      v2646 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2645 + 32))(v2645);
      WTF::PrintStream::printf(v2646, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v2645 + 40))(v2645);
      v2647 = *(_QWORD *)(a1 + 8);
      v2648 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2647 + 32))(v2647);
      WTF::PrintStream::printf(v2648, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2647 + 40))(v2647);
      v2649 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v365);
      if (v2819)
        v2650 = (char *)v2819 + 16;
      else
        v2650 = 0;
      WTF::PrintStream::printf(v2649, "%s", v2650);
      v2658 = v2819;
      v2819 = 0;
      if (v2658)
      {
        if (*(_DWORD *)v2658 == 1)
          WTF::fastFree((unint64_t)v2658, v2651, v2652, v2653, v2654, v2655, v2656, v2657);
        else
          --*(_DWORD *)v2658;
      }
      v2659 = *(_QWORD *)(a1 + 8);
      v2660 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2659 + 32))(v2659);
      WTF::PrintStream::printf(v2660, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2659 + 40))(v2659);
      v2661 = *(_QWORD *)(a1 + 8);
      v2662 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2661 + 32))(v2661);
      WTF::PrintStream::printf(v2662, "%s", "typeIndex");
      (*(void (**)(uint64_t))(*(_QWORD *)v2661 + 40))(v2661);
      v2663 = *(_QWORD *)(a1 + 8);
      v2664 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2663 + 32))(v2663);
      WTF::PrintStream::printf(v2664, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2663 + 40))(v2663);
      v2665 = *(_QWORD *)(a1 + 8);
      v2666 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2665 + 32))(v2665);
      WTF::PrintStream::printf(v2666, "%u", v366);
      (*(void (**)(uint64_t))(*(_QWORD *)v2665 + 40))(v2665);
      v2667 = *(_QWORD *)(a1 + 8);
      v2668 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2667 + 32))(v2667);
      WTF::PrintStream::printf(v2668, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2667 + 40))(v2667);
      v2669 = *(_QWORD *)(a1 + 8);
      v2670 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2669 + 32))(v2669);
      WTF::PrintStream::printf(v2670, "%s", "useDefault");
      (*(void (**)(uint64_t))(*(_QWORD *)v2669 + 40))(v2669);
      v2671 = *(_QWORD *)(a1 + 8);
      v2672 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2671 + 32))(v2671);
      WTF::PrintStream::printf(v2672, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2671 + 40))(v2671);
      v2673 = *(_QWORD *)(a1 + 8);
      v2674 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2673 + 32))(v2673);
      v2675 = v2674;
      if (v367)
        v2676 = "true";
      else
        v2676 = "false";
      v2677 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2674 + 32))(v2674);
      WTF::PrintStream::printf(v2677, "%s", v2676);
      (*(void (**)(uint64_t))(*(_QWORD *)v2675 + 40))(v2675);
      (*(void (**)(uint64_t))(*(_QWORD *)v2673 + 40))(v2673);
      v2678 = *(_QWORD *)(a1 + 8);
      v2679 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2678 + 32))(v2678);
      WTF::PrintStream::printf(v2679, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2678 + 40))(v2678);
      v2680 = *(_QWORD *)(a1 + 8);
      v2681 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2680 + 32))(v2680);
      WTF::PrintStream::printf(v2681, "%s", "firstValue");
      (*(void (**)(uint64_t))(*(_QWORD *)v2680 + 40))(v2680);
      v2010 = *(_QWORD *)(a1 + 8);
      v2682 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2010 + 32))(v2010);
      WTF::PrintStream::printf(v2682, "%s", ":");
LABEL_4591:
      (*(void (**)(uint64_t))(*(_QWORD *)v2010 + 40))(v2010);
      goto LABEL_5251;
    case 234:
      if (v5 == 141)
      {
        v2683 = *((__int16 *)a3 + 1);
        if (v2683 <= 63)
          v369 = *((__int16 *)a3 + 1);
        else
          v369 = v2683 + 1073741760;
        v370 = *((__int16 *)a3 + 2);
        if (v370 > 63)
          v370 += 1073741760;
        v371 = *((unsigned __int16 *)a3 + 3);
      }
      else if (v5 == 142)
      {
        v369 = *(_DWORD *)(a3 + 2);
        v370 = *(_DWORD *)(a3 + 6);
        v371 = *(_DWORD *)(a3 + 10);
      }
      else
      {
        v2684 = (char)a3[1];
        if (v2684 <= 15)
          v369 = (char)a3[1];
        else
          v369 = v2684 + 1073741808;
        v370 = (char)a3[2];
        if (v370 > 15)
          v370 += 1073741808;
        v371 = a3[3];
      }
      v2685 = v370;
      v2686 = 1;
      if (v5 != 141)
        v2686 = 2;
      if (v5 == 142)
        v2687 = 0;
      else
        v2687 = v2686;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aStructGet[v2687]);
      v2688 = *(_QWORD *)(a1 + 8);
      v2689 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2688 + 32))(v2688);
      WTF::PrintStream::printf(v2689, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v2688 + 40))(v2688);
      v2690 = *(_QWORD *)(a1 + 8);
      v2691 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2690 + 32))(v2690);
      WTF::PrintStream::printf(v2691, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2690 + 40))(v2690);
      v2692 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v369);
      if (v2819)
        v2693 = (char *)v2819 + 16;
      else
        v2693 = 0;
      WTF::PrintStream::printf(v2692, "%s", v2693);
      v2701 = v2819;
      v2819 = 0;
      if (v2701)
      {
        if (*(_DWORD *)v2701 == 1)
          WTF::fastFree((unint64_t)v2701, v2694, v2695, v2696, v2697, v2698, v2699, v2700);
        else
          --*(_DWORD *)v2701;
      }
      v2702 = *(_QWORD *)(a1 + 8);
      v2703 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2702 + 32))(v2702);
      WTF::PrintStream::printf(v2703, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2702 + 40))(v2702);
      v2704 = *(_QWORD *)(a1 + 8);
      v2705 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2704 + 32))(v2704);
      WTF::PrintStream::printf(v2705, "%s", "structReference");
      (*(void (**)(uint64_t))(*(_QWORD *)v2704 + 40))(v2704);
      v2706 = *(_QWORD *)(a1 + 8);
      v2707 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2706 + 32))(v2706);
      WTF::PrintStream::printf(v2707, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2706 + 40))(v2706);
      v2708 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(&v2819, a1, v2685);
      if (v2819)
        v2709 = (char *)v2819 + 16;
      else
        v2709 = 0;
      WTF::PrintStream::printf(v2708, "%s", v2709);
      v2717 = v2819;
      v2819 = 0;
      if (v2717)
      {
        if (*(_DWORD *)v2717 == 1)
          WTF::fastFree((unint64_t)v2717, v2710, v2711, v2712, v2713, v2714, v2715, v2716);
        else
          --*(_DWORD *)v2717;
      }
      v2718 = *(_QWORD *)(a1 + 8);
      v2719 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2718 + 32))(v2718);
      WTF::PrintStream::printf(v2719, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2718 + 40))(v2718);
      v2720 = *(_QWORD *)(a1 + 8);
      v2721 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2720 + 32))(v2720);
      WTF::PrintStream::printf(v2721, "%s", "fieldIndex");
      (*(void (**)(uint64_t))(*(_QWORD *)v2720 + 40))(v2720);
      v2722 = *(_QWORD *)(a1 + 8);
      v2723 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2722 + 32))(v2722);
      WTF::PrintStream::printf(v2723, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2722 + 40))(v2722);
      v2724 = *(_QWORD *)(a1 + 8);
      v2725 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2724 + 32))(v2724);
      WTF::PrintStream::printf(v2725, "%u", v371);
      (*(void (**)(uint64_t))(*(_QWORD *)v2724 + 40))(v2724);
      v2726 = *(_QWORD *)(a1 + 8);
      v2727 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2726 + 32))(v2726);
      WTF::PrintStream::printf(v2727, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2726 + 40))(v2726);
      v2728 = *(_QWORD *)(a1 + 8);
      v2729 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2728 + 32))(v2728);
      WTF::PrintStream::printf(v2729, "%s", "structGetKind");
      (*(void (**)(uint64_t))(*(_QWORD *)v2728 + 40))(v2728);
      v2730 = *(_QWORD *)(a1 + 8);
      v2731 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2730 + 32))(v2730);
      WTF::PrintStream::printf(v2731, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2730 + 40))(v2730);
      v1611 = *(_QWORD *)(a1 + 8);
      v1612 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1611 + 32))(v1611);
      goto LABEL_5135;
    case 235:
      if (v5 == 141)
      {
        v2732 = *((__int16 *)a3 + 1);
        if (v2732 <= 63)
          v372 = *((__int16 *)a3 + 1);
        else
          v372 = v2732 + 1073741760;
        v373 = *((unsigned __int16 *)a3 + 2);
        v2733 = *((__int16 *)a3 + 3);
        v2734 = v2733 + 1073741760;
        v2735 = v2733 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v372 = *(_DWORD *)(a3 + 2);
          v373 = *(_DWORD *)(a3 + 6);
          v374 = *(_DWORD *)(a3 + 10);
          goto LABEL_5203;
        }
        v2736 = (char)a3[1];
        if (v2736 <= 15)
          v372 = (char)a3[1];
        else
          v372 = v2736 + 1073741808;
        v373 = a3[2];
        v2733 = (char)a3[3];
        v2734 = v2733 + 1073741808;
        v2735 = v2733 <= 15;
      }
      if (v2735)
        v374 = v2733;
      else
        v374 = v2734;
LABEL_5203:
      v2737 = 1;
      if (v5 != 141)
        v2737 = 2;
      if (v5 == 142)
        v2738 = 0;
      else
        v2738 = v2737;
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &aStructSet[v2738]);
      v2739 = *(_QWORD *)(a1 + 8);
      v2740 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2739 + 32))(v2739);
      WTF::PrintStream::printf(v2740, "%s", "structReference");
      (*(void (**)(uint64_t))(*(_QWORD *)v2739 + 40))(v2739);
      v2741 = *(_QWORD *)(a1 + 8);
      v2742 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2741 + 32))(v2741);
      WTF::PrintStream::printf(v2742, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2741 + 40))(v2741);
      v2743 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v372);
      if (v2819)
        v2744 = (char *)v2819 + 16;
      else
        v2744 = 0;
      WTF::PrintStream::printf(v2743, "%s", v2744);
      v2752 = v2819;
      v2819 = 0;
      if (v2752)
      {
        if (*(_DWORD *)v2752 == 1)
          WTF::fastFree((unint64_t)v2752, v2745, v2746, v2747, v2748, v2749, v2750, v2751);
        else
          --*(_DWORD *)v2752;
      }
      v2753 = *(_QWORD *)(a1 + 8);
      v2754 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2753 + 32))(v2753);
      WTF::PrintStream::printf(v2754, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2753 + 40))(v2753);
      v2755 = *(_QWORD *)(a1 + 8);
      v2756 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2755 + 32))(v2755);
      WTF::PrintStream::printf(v2756, "%s", "fieldIndex");
      (*(void (**)(uint64_t))(*(_QWORD *)v2755 + 40))(v2755);
      v2757 = *(_QWORD *)(a1 + 8);
      v2758 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2757 + 32))(v2757);
      WTF::PrintStream::printf(v2758, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2757 + 40))(v2757);
      v2759 = *(_QWORD *)(a1 + 8);
      v2760 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2759 + 32))(v2759);
      WTF::PrintStream::printf(v2760, "%u", v373);
      (*(void (**)(uint64_t))(*(_QWORD *)v2759 + 40))(v2759);
      v2761 = *(_QWORD *)(a1 + 8);
      v2762 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2761 + 32))(v2761);
      WTF::PrintStream::printf(v2762, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2761 + 40))(v2761);
      v2763 = *(_QWORD *)(a1 + 8);
      v2764 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2763 + 32))(v2763);
      WTF::PrintStream::printf(v2764, "%s", "value");
      (*(void (**)(uint64_t))(*(_QWORD *)v2763 + 40))(v2763);
      v2765 = *(_QWORD *)(a1 + 8);
      v2766 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2765 + 32))(v2765);
      WTF::PrintStream::printf(v2766, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2765 + 40))(v2765);
      v2767 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v374);
      WTF::PrintStream::printf(v2767, "%s");
      goto LABEL_5252;
    case 236:
      if (v5 == 141)
      {
        v2775 = *((__int16 *)a3 + 1);
        if (v2775 <= 63)
          v9 = *((__int16 *)a3 + 1);
        else
          v9 = v2775 + 1073741760;
        v375 = *((__int16 *)a3 + 2);
        if (v375 > 63)
          v375 += 1073741760;
        v2776 = *((__int16 *)a3 + 3);
        v2777 = v2776 + 1073741760;
        v2778 = v2776 <= 63;
      }
      else
      {
        if (v5 == 142)
        {
          v9 = *(_DWORD *)(a3 + 2);
          v375 = *(_DWORD *)(a3 + 6);
          v11 = *(_DWORD *)(a3 + 10);
          goto LABEL_5230;
        }
        v2779 = (char)a3[1];
        if (v2779 <= 15)
          v9 = (char)a3[1];
        else
          v9 = v2779 + 1073741808;
        v375 = (char)a3[2];
        if (v375 > 15)
          v375 += 1073741808;
        v2776 = (char)a3[3];
        v2777 = v2776 + 1073741808;
        v2778 = v2776 <= 15;
      }
      if (v2778)
        v11 = v2776;
      else
        v11 = v2777;
LABEL_5230:
      v381 = v375;
      v2780 = 1;
      if (v5 != 141)
        v2780 = 2;
      if (v5 == 142)
        v383 = 0;
      else
        v383 = v2780;
      v384 = "**i32_add";
LABEL_5236:
      *(_DWORD *)(a1 + 16) = a2;
      WTF::PrintStream::printf(*(WTF::PrintStream **)(a1 + 8), "[%4u] %-18s ", a2, &v384[v383]);
      v2781 = *(_QWORD *)(a1 + 8);
      v2782 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2781 + 32))(v2781);
      WTF::PrintStream::printf(v2782, "%s", "dst");
      (*(void (**)(uint64_t))(*(_QWORD *)v2781 + 40))(v2781);
      v2783 = *(_QWORD *)(a1 + 8);
      v2784 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2783 + 32))(v2783);
      WTF::PrintStream::printf(v2784, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2783 + 40))(v2783);
      v2785 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v2819, a1, v9);
      if (v2819)
        v2786 = (char *)v2819 + 16;
      else
        v2786 = 0;
      WTF::PrintStream::printf(v2785, "%s", v2786);
      v2794 = v2819;
      v2819 = 0;
      if (v2794)
      {
        if (*(_DWORD *)v2794 == 1)
          WTF::fastFree((unint64_t)v2794, v2787, v2788, v2789, v2790, v2791, v2792, v2793);
        else
          --*(_DWORD *)v2794;
      }
      v2795 = *(_QWORD *)(a1 + 8);
      v2796 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2795 + 32))(v2795);
      WTF::PrintStream::printf(v2796, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2795 + 40))(v2795);
      v2797 = *(_QWORD *)(a1 + 8);
      v2798 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2797 + 32))(v2797);
      WTF::PrintStream::printf(v2798, "%s", "lhs");
      (*(void (**)(uint64_t))(*(_QWORD *)v2797 + 40))(v2797);
      v2799 = *(_QWORD *)(a1 + 8);
      v2800 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2799 + 32))(v2799);
      WTF::PrintStream::printf(v2800, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)v2799 + 40))(v2799);
      v2801 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(&v2819, a1, v381);
      if (v2819)
        v2802 = (char *)v2819 + 16;
      else
        v2802 = 0;
      WTF::PrintStream::printf(v2801, "%s", v2802);
      v2810 = v2819;
      v2819 = 0;
      if (v2810)
      {
        if (*(_DWORD *)v2810 == 1)
          WTF::fastFree((unint64_t)v2810, v2803, v2804, v2805, v2806, v2807, v2808, v2809);
        else
          --*(_DWORD *)v2810;
      }
      v343 = v11;
      v2811 = *(_QWORD *)(a1 + 8);
      v2812 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2811 + 32))(v2811);
      WTF::PrintStream::printf(v2812, "%s", ", ");
      (*(void (**)(uint64_t))(*(_QWORD *)v2811 + 40))(v2811);
      v465 = *(_QWORD *)(a1 + 8);
      v466 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 32))(v465);
      v467 = "rhs";
LABEL_5249:
      WTF::PrintStream::printf(v466, "%s", v467);
      (*(void (**)(uint64_t))(*(_QWORD *)v465 + 40))(v465);
      v2295 = *(_QWORD *)(a1 + 8);
      v2813 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2295 + 32))(v2295);
      WTF::PrintStream::printf(v2813, "%s", ":");
LABEL_5250:
      (*(void (**)(uint64_t))(*(_QWORD *)v2295 + 40))(v2295);
LABEL_5251:
      v2814 = *(WTF::PrintStream **)(a1 + 8);
      (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(&v2819, a1, v343);
      WTF::PrintStream::printf(v2814, "%s");
LABEL_5252:
      v2815 = v2819;
      v2819 = 0;
      if (v2815)
      {
        if (*(_DWORD *)v2815 == 1)
          WTF::fastFree((unint64_t)v2815, v2768, v2769, v2770, v2771, v2772, v2773, v2774);
        else
          --*(_DWORD *)v2815;
      }
      return;
    default:
      return;
  }
}

