uint64_t operationDebuggerWillCallNativeExecutable(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(16 * (**(_DWORD **)(result + 24) & 0xFFFFFFFE) + 0x28);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 2016);
    if (v2)
    {
      v5 = result;
      v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v3 = off_1E358BE60;
      v3[1] = &v5;
      v4 = v3;
      JSC::Debugger::dispatchFunctionToObservers(v2, &v4);
      return (*(uint64_t (**)(_QWORD *))(*v3 + 8))(v3);
    }
  }
  return result;
}

void operationProcessShadowChickenLog(JSC::VM *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ShadowChicken *v9;
  JSC::CallFrame *vars0;

  *((_QWORD *)a1 + 5) = vars0;
  v9 = (JSC::ShadowChicken *)*((_QWORD *)a1 + 11673);
  if ((v9 & 1) != 0 || !v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1987CD44CLL);
  }
  JSC::ShadowChicken::update(v9, a1, vars0, a4, a5, a6, a7, a8);
}

uint64_t JSC::JITPlan::cancel(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_DWORD *)(this + 12) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1987CD4ACLL);
  }
  v1 = *(_QWORD *)(this + 48);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 64);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 33))
      {
        __break(0xC471u);
        JUMPOUT(0x1987CD4CCLL);
      }
    }
  }
  *(_DWORD *)(this + 12) = 3;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  return this;
}

uint64_t JSC::JITPlan::notifyReady(uint64_t this)
{
  *(_DWORD *)(this + 12) = 2;
  return this;
}

uint64_t JSC::JITPlan::key(JSC::JITPlan *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  int v4;

  v1 = *((_QWORD *)this + 5);
  if (*((_DWORD *)this + 4) == 1)
    return *(_QWORD *)(v1 + 56);
  if (*(_QWORD *)(v1 + 192))
    result = *(_QWORD *)(v1 + 192);
  else
    result = *((_QWORD *)this + 5);
  v3 = *(_QWORD *)(result + 120);
  if (v3)
  {
    v4 = *(unsigned __int8 *)(v3 + 12);
    if ((v4 & 0xFE) != 2 && v4 != 0)
    {
      result = 1878;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t JSC::JITPlan::isKnownToBeLiveAfterGC(JSC::JITPlan *this)
{
  unint64_t v1;

  if (*((_DWORD *)this + 3) != 3)
  {
    v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 64);
    if ((v1 & 8) != 0)
      return *(_BYTE *)(v1 - 79) & 1;
    if (*(_DWORD *)(v1 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*((_QWORD *)this + 4) + 432))
      return (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFC000) + 8 * ((v1 >> 10) & 0xF) + 0x28) >> (v1 >> 4)) & 1;
  }
  return 0;
}

uint64_t JSC::JITPlan::isKnownToBeLiveDuringGC(JSC::JITPlan *this, JSC::AbstractSlotVisitor *a2)
{
  if (*((_DWORD *)this + 3) == 3)
    return 0;
  else
    return (*(uint64_t (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)(*((_QWORD *)this + 5) + 64));
}

uint64_t JSC::JITPlan::iterateCodeBlocksForGC(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  if ((_DWORD)v5)
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 16))(*a3, a1[5]);
  return v5;
}

uint64_t JSC::JITPlan::checkLivenessAndVisitChildren(JSC::JITPlan *this, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(JSC::JITPlan *))(*(_QWORD *)this + 64))(this);
  if ((_DWORD)v4)
    (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 5));
  return v4;
}

BOOL JSC::JITPlan::computeCompileTimes(JSC::JITPlan *this)
{
  uint64_t v1;

  if (BYTE6(qword_1ECF4C332)
    || HIBYTE(qword_1ECF4C332) && *((_DWORD *)this + 4) == 1
    || unk_1ECF4C33A && (*((_DWORD *)this + 4) & 0xFFFFFFFE) == 2
    || unk_1ECF4C33B && (*((_DWORD *)this + 4) & 0xFFFFFFFE) == 4
    || unk_1ECF4C33C)
  {
    return 1;
  }
  v1 = *((_QWORD *)this + 4);
  return v1 && *(_QWORD *)(v1 + 93016) != 0;
}

BOOL JSC::JITPlan::reportCompileTimes(JSC::JITPlan *this)
{
  if (BYTE6(qword_1ECF4C332)
    || HIBYTE(qword_1ECF4C332) && *((_DWORD *)this + 4) == 1
    || unk_1ECF4C33A && (*((_DWORD *)this + 4) & 0xFFFFFFFE) == 2)
  {
    return 1;
  }
  if (unk_1ECF4C33B)
    return (*((_DWORD *)this + 4) & 0xFFFFFFFE) == 4;
  return 0;
}

void JSC::JITPlan::compileInThread(JSC::JITPlan *this, JSC::JITWorklistThread *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  _DWORD *v6;
  int v7;
  unint64_t StatusReg;
  uint64_t v9;
  char v10;
  _DWORD *v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  _DWORD *v15;
  uint64_t is_enabled;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  double v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t *v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  const char *v51;
  int v52;
  int v53;
  os_signpost_id_t v54;
  os_signpost_id_t v55;
  NSObject *oslog;
  NSObject *osloga;
  double v58;
  const char *v59;
  uint64_t v60;
  double v61;
  _BYTE v62[14];
  __int16 v63;
  JSC::JITPlan *v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  const char *v68;
  __int128 buf;
  _BYTE v70[18];
  __int16 v71;
  const char *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = a2;
  v60 = 0;
  v61 = 0.0;
  if (BYTE6(qword_1ECF4C332)
    || HIBYTE(qword_1ECF4C332) && *((_DWORD *)this + 4) == 1
    || unk_1ECF4C33A && (*((_DWORD *)this + 4) & 0xFFFFFFFE) == 2
    || unk_1ECF4C33B && (*((_DWORD *)this + 4) & 0xFFFFFFFE) == 4
    || unk_1ECF4C33C
    || (v4 = *((_QWORD *)this + 4), v5 = 0.0, v4) && *(_QWORD *)(v4 + 93016))
  {
    v5 = WTF::MonotonicTime::now(this);
    v61 = v5;
    if (JSC::JITPlan::reportCompileTimes(this))
    {
      WTF::toCString<JSC::CodeBlock>(*((_QWORD *)this + 5), (uint64_t *)&buf);
      v6 = (_DWORD *)buf;
      v60 = buf;
    }
    else
    {
      v6 = 0;
    }
    v7 = 1;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = *(_QWORD *)(StatusReg + 736);
  if (!v9)
    v9 = WTF::Thread::initializeCurrentTLS(0);
  v10 = *(_BYTE *)(v9 + 5);
  *(_BYTE *)(v9 + 5) = v10 | 8;
  v11 = (_DWORD *)((char *)this + 16);
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v12 = (*v11 & 0xFFFFFFFE) == 4) : (v12 = 0),
        !v12 ? (v13 = BYTE2(qword_1ECF4C32A) == 0) : (v13 = 0),
        v13 ? (v14 = byte_1ECF4C67A == 0) : (v14 = 0),
        !v14))
  {
    v26 = *((_QWORD *)this + 5);
    LODWORD(buf) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 56) + 80) + 12);
    WTF::dataLog<char [21],JSC::CodeBlock,char [7],JSC::JITCompilationMode,char [23],unsigned int,char [2]>(v26, (int *)this + 4, &buf);
  }
  if (HIBYTE(dword_1ECF4C723))
  {
    *(_QWORD *)&buf = off_1E3572250;
    *((_QWORD *)&buf + 1) = &v70[16];
    *(_OWORD *)v70 = xmmword_199122F80;
    v70[16] = 0;
    v27 = *((_QWORD *)this + 5);
    *(_DWORD *)v62 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 56) + 80) + 12);
    WTF::PrintStream::print<JSC::JITCompilationMode,char [2],JSC::CodeBlock,char [22],unsigned int>((uint64_t)&buf, (int *)this + 4, v27, v62);
    WTF::StringPrintStream::toCString(&buf, (uint64_t *)v62);
    v15 = *(_DWORD **)v62;
    if (kdebug_is_enabled())
    {
      v53 = WTFSignpostIndirectLoggingEnabled;
      osloga = WTFSignpostLogHandle();
      if (v53)
      {
        if (os_log_type_enabled(osloga, OS_LOG_TYPE_DEFAULT))
        {
          v48 = WTFCurrentContinuousTime(0.0);
          *(_DWORD *)&v62[4] = 1;
          *(_WORD *)&v62[8] = 1024;
          v49 = "(nullptr)";
          *(_DWORD *)&v62[10] = 4;
          *(_DWORD *)v62 = 67110146;
          if (v15)
            v49 = (const char *)(v15 + 4);
          v63 = 2048;
          v64 = this;
          v65 = 2048;
          v66 = v48;
          v67 = 2082;
          v68 = v49;
          _os_log_impl(&dword_197AA9000, osloga, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu %{public}s", v62, 0x2Cu);
        }
      }
      else
      {
        v54 = os_signpost_id_make_with_pointer(osloga, this);
        if (v54 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(osloga))
        {
          v50 = (const char *)(v15 + 4);
          if (!v15)
            v50 = "(nullptr)";
          *(_DWORD *)v62 = 136446210;
          *(_QWORD *)&v62[4] = v50;
          _os_signpost_emit_with_name_impl(&dword_197AA9000, osloga, OS_SIGNPOST_INTERVAL_BEGIN, v54, "JSCJITCompiler", "%{public}s", v62, 0xCu);
        }
      }
    }
    if (*((_BYTE **)&buf + 1) != &v70[16])
      WTF::fastFree(*((unint64_t *)&buf + 1), v28, v29, v30, v31, v32, v33, v34);
  }
  else
  {
    v15 = 0;
  }
  is_enabled = (*(uint64_t (**)(JSC::JITPlan *))(*(_QWORD *)this + 88))(this);
  if (((_DWORD)is_enabled == 4) != (*((_DWORD *)this + 3) == 3))
  {
    __break(0xC471u);
    JUMPOUT(0x1987CDA20);
  }
  v24 = is_enabled;
  if (HIBYTE(dword_1ECF4C723))
  {
    is_enabled = kdebug_is_enabled();
    if ((_DWORD)is_enabled)
    {
      v52 = WTFSignpostIndirectLoggingEnabled;
      oslog = WTFSignpostLogHandle();
      if (v52)
      {
        is_enabled = os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)is_enabled)
        {
          v35 = WTFCurrentContinuousTime(0.0);
          WORD4(buf) = 1024;
          v36 = "(nullptr)";
          *(_DWORD *)((char *)&buf + 10) = 4;
          *(_QWORD *)&buf = 0x204000502;
          if (v15)
            v36 = (const char *)(v15 + 4);
          HIWORD(buf) = 2048;
          *(_QWORD *)v70 = this;
          *(_WORD *)&v70[8] = 2048;
          *(_QWORD *)&v70[10] = v35;
          v71 = 2082;
          v72 = v36;
          _os_log_impl(&dword_197AA9000, oslog, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu %{public}s", (uint8_t *)&buf, 0x2Cu);
        }
      }
      else
      {
        is_enabled = os_signpost_id_make_with_pointer(oslog, this);
        v55 = is_enabled;
        if ((unint64_t)(is_enabled - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          is_enabled = os_signpost_enabled(oslog);
          if ((_DWORD)is_enabled)
          {
            v51 = (const char *)(v15 + 4);
            if (!v15)
              v51 = "(nullptr)";
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v51;
            _os_signpost_emit_with_name_impl(&dword_197AA9000, oslog, OS_SIGNPOST_INTERVAL_END, v55, "JSCJITCompiler", "%{public}s", (uint8_t *)&buf, 0xCu);
          }
        }
      }
    }
  }
  if (v7)
  {
    v37 = WTF::MonotonicTime::now((WTF::MonotonicTime *)is_enabled);
    *(double *)v62 = v37;
    if (unk_1ECF4C33C)
    {
      if ((*v11 & 0xFFFFFFFE) == 4)
      {
        *(double *)&JSC::totalFTLCompileTime = v37 - v5 + *(double *)&JSC::totalFTLCompileTime;
        v46 = *((double *)this + 3);
        *(double *)&JSC::totalFTLDFGCompileTime = v46 - v5 + *(double *)&JSC::totalFTLDFGCompileTime;
        v47 = &JSC::totalFTLB3CompileTime;
        v5 = v46;
      }
      else if (*v11 == 1)
      {
        v47 = &JSC::totalBaselineCompileTime;
      }
      else
      {
        v47 = &JSC::totalDFGCompileTime;
      }
      *(double *)v47 = v37 - v5 + *(double *)v47;
    }
    switch(v24)
    {
      case 0:
        v38 = "N/A (fail)";
        break;
      case 1:
        v38 = "Baseline";
        break;
      case 2:
        v38 = "DFG";
        break;
      case 3:
        v38 = "FTL";
        break;
      case 4:
        v38 = "Canceled";
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1987CDFBCLL);
    }
    v59 = v38;
    v39 = *((_QWORD *)this + 5);
    if (v39)
    {
      switch(v24)
      {
        case 0:
          v40 = *(_QWORD *)(v39 + 72);
          *(_QWORD *)&buf = v62;
          *((_QWORD *)&buf + 1) = &v61;
          *(_QWORD *)v70 = &v59;
          JSC::VM::logEvent<JSC::JITPlan::compileInThread(JSC::JITWorklistThread *)::$_3>(*(JSC::Profiler::Database **)(v40 + 93016), v39, (uint64_t)&buf);
          break;
        case 1:
          v41 = *(_QWORD *)(v39 + 72);
          *(_QWORD *)&buf = v62;
          *((_QWORD *)&buf + 1) = &v61;
          *(_QWORD *)v70 = &v59;
          JSC::VM::logEvent<JSC::JITPlan::compileInThread(JSC::JITWorklistThread *)::$_2>(*(JSC::Profiler::Database **)(v41 + 93016), v39, (uint64_t)&buf);
          break;
        case 2:
          v42 = *(_QWORD *)(v39 + 72);
          *(_QWORD *)&buf = v62;
          *((_QWORD *)&buf + 1) = &v61;
          *(_QWORD *)v70 = &v59;
          JSC::VM::logEvent<JSC::JITPlan::compileInThread(JSC::JITWorklistThread *)::$_1>(*(JSC::Profiler::Database **)(v42 + 93016), v39, (uint64_t)&buf);
          break;
        case 3:
          v43 = *(_QWORD *)(v39 + 72);
          *(_QWORD *)&buf = v62;
          *((_QWORD *)&buf + 1) = &v61;
          *(_QWORD *)v70 = this;
          *(_QWORD *)&v70[8] = &v59;
          JSC::VM::logEvent<JSC::JITPlan::compileInThread(JSC::JITWorklistThread *)::$_0>(*(JSC::Profiler::Database **)(v43 + 93016), v39, (uint64_t)&buf);
          break;
        case 4:
          v44 = *(_QWORD *)(v39 + 72);
          *(_QWORD *)&buf = v62;
          *((_QWORD *)&buf + 1) = &v61;
          *(_QWORD *)v70 = &v59;
          JSC::VM::logEvent<JSC::JITPlan::compileInThread(JSC::JITWorklistThread *)::$_4>(*(JSC::Profiler::Database **)(v44 + 93016), v39, (uint64_t)&buf);
          break;
        default:
          break;
      }
    }
    if (JSC::JITPlan::reportCompileTimes(this))
    {
      *(_QWORD *)&buf = (*(uint64_t (**)(JSC::JITPlan *))(*(_QWORD *)this + 16))(this);
      v58 = (*(double *)v62 - v61) * 1000.0;
      WTF::dataLog<char [11],WTF::CString,char [8],JSC::JITCompilationMode,char [7],char const*,char [7],unsigned long,char [11],double,char [4]>(&v60, (int *)this + 4, &v59, &buf, &v58);
      if (v24 == 3)
      {
        v45 = *((double *)this + 3);
        *(double *)&buf = (v45 - v61) * 1000.0;
        v58 = (*(double *)v62 - v45) * 1000.0;
        WTF::dataLog<char [8],double,char [7],double,char [2]>((double *)&buf, &v58);
      }
      WTF::dataLog<char [16]>(".\n");
    }
  }
  if (v15)
  {
    if (*v15 == 1)
      WTF::fastFree((unint64_t)v15, v17, v18, v19, v20, v21, v22, v23);
    else
      --*v15;
  }
  v25 = *(_QWORD *)(StatusReg + 736);
  if (!v25)
    v25 = WTF::Thread::initializeCurrentTLS(0);
  *(_BYTE *)(v25 + 5) = *(_BYTE *)(v25 + 5) & 0xF7 | v10 & 8;
  if (v6)
  {
    if (*v6 == 1)
      WTF::fastFree((unint64_t)v6, v17, v18, v19, v20, v21, v22, v23);
    else
      --*v6;
  }
  *((_QWORD *)this + 6) = v3;
}

uint64_t WTF::dataLog<char [21],JSC::CodeBlock,char [7],JSC::JITCompilationMode,char [23],unsigned int,char [2]>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  const char *v10;
  WTF::PrintStream *v11;
  uint64_t result;
  char v13;
  char **v14;
  char *v15;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "DFG(Plan) compiling ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v8, "%s", " with ");
  v9 = *a2;
  if (v9 >= 6)
  {
    result = 57;
    __break(0xC471u);
  }
  else
  {
    v10 = off_1E3596190[v9];
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v11, "%s", v10);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    WTF::PrintStream::printf(v8, "%s", ", instructions size = ");
    WTF::PrintStream::printf(v8, "%u", *a3);
    WTF::PrintStream::printf(v8, "%s", "\n");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  return result;
}

uint64_t WTF::PrintStream::print<JSC::JITCompilationMode,char [2],JSC::CodeBlock,char [22],unsigned int>(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  const char *v11;
  WTF::PrintStream *v12;
  uint64_t result;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v9 = *a2;
  if (v9 >= 6)
  {
    result = 57;
    __break(0xC471u);
  }
  else
  {
    v10 = (WTF::PrintStream *)v8;
    v11 = off_1E3596190[v9];
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v12, "%s", v11);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
    WTF::PrintStream::printf(v10, "%s", " ");
    JSC::CodeBlock::dumpAssumingJITType(a3);
    WTF::PrintStream::printf(v10, "%s", " instructions size = ");
    WTF::PrintStream::printf(v10, "%u", *a4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  return result;
}

void JSC::VM::logEvent<JSC::JITPlan::compileInThread(JSC::JITWorklistThread *)::$_0>(JSC::Profiler::Database *a1, uint64_t a2, uint64_t a3)
{
  double v5;
  double v6;
  double v7;
  const char **v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  const void *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  void (**v33)(WTF::StringPrintStream *__hidden);
  _BYTE *v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v5 = **(double **)(a3 + 8);
  v6 = **(double **)a3;
  v7 = (v6 - v5) * 1000.0;
  v8 = *(const char ***)(a3 + 24);
  v9 = *(double *)(*(_QWORD *)(a3 + 16) + 24);
  v10 = (v9 - v5) * 1000.0;
  v11 = (v6 - v9) * 1000.0;
  v33 = off_1E3572250;
  v34 = v36;
  v35 = xmmword_199122F80;
  v36[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v33, "%s", "took ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v33, "%lf", v7);
  WTF::PrintStream::printf((WTF::PrintStream *)&v33, "%s", " ms (DFG: ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v33, "%lf", v10);
  WTF::PrintStream::printf((WTF::PrintStream *)&v33, "%s", ", B3: ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v33, "%lf", v11);
  WTF::PrintStream::printf((WTF::PrintStream *)&v33, "%s", ") with ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v33, "%s", *v8);
  v33[5]((WTF::StringPrintStream *)&v33);
  v20 = v34;
  v19 = v35;
  v32 = 0;
  if (v34)
  {
    if ((unint64_t)v35 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x1987CE500);
    }
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)(v35 + 17));
    *(_DWORD *)v21 = 1;
    v21[1] = v19;
    v32 = (WTF *)v21;
    v22 = v21 + 2;
    memcpy(v21 + 2, v20, v19);
    *((_BYTE *)v22 + v19) = 0;
    v23 = (unint64_t)v34;
    if (v34 == v36)
      goto LABEL_9;
  }
  else
  {
    v23 = 0;
  }
  WTF::fastFree(v23, v12, v13, v14, v15, v16, v17, v18);
LABEL_9:
  JSC::Profiler::Database::logEvent(a1, a2, "ftlCompile", &v32, v15, v16, v17, v18);
  v31 = v32;
  v32 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 1)
      WTF::fastFree((unint64_t)v31, v24, v25, v26, v27, v28, v29, v30);
    else
      --*(_DWORD *)v31;
  }
}

void JSC::VM::logEvent<JSC::JITPlan::compileInThread(JSC::JITWorklistThread *)::$_1>(JSC::Profiler::Database *a1, uint64_t a2, uint64_t a3)
{
  double v5;
  const char **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  const void *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;
  void (**v28)(WTF::StringPrintStream *__hidden);
  _BYTE *v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v5 = (**(double **)a3 - **(double **)(a3 + 8)) * 1000.0;
  v6 = *(const char ***)(a3 + 16);
  v28 = off_1E3572250;
  v29 = v31;
  v30 = xmmword_199122F80;
  v31[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", "took ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%lf", v5);
  WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", " ms with ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", *v6);
  v28[5]((WTF::StringPrintStream *)&v28);
  v15 = v29;
  v14 = v30;
  v27 = 0;
  if (v29)
  {
    if ((unint64_t)v30 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x1987CE6DCLL);
    }
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(v30 + 17));
    *(_DWORD *)v16 = 1;
    v16[1] = v14;
    v27 = (WTF *)v16;
    v17 = v16 + 2;
    memcpy(v16 + 2, v15, v14);
    *((_BYTE *)v17 + v14) = 0;
    v18 = (unint64_t)v29;
    if (v29 == v31)
      goto LABEL_9;
  }
  else
  {
    v18 = 0;
  }
  WTF::fastFree(v18, v7, v8, v9, v10, v11, v12, v13);
LABEL_9:
  JSC::Profiler::Database::logEvent(a1, a2, "dfgCompile", &v27, v10, v11, v12, v13);
  v26 = v27;
  v27 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v26;
  }
}

void JSC::VM::logEvent<JSC::JITPlan::compileInThread(JSC::JITWorklistThread *)::$_2>(JSC::Profiler::Database *a1, uint64_t a2, uint64_t a3)
{
  double v5;
  const char **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  const void *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;
  void (**v28)(WTF::StringPrintStream *__hidden);
  _BYTE *v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v5 = (**(double **)a3 - **(double **)(a3 + 8)) * 1000.0;
  v6 = *(const char ***)(a3 + 16);
  v28 = off_1E3572250;
  v29 = v31;
  v30 = xmmword_199122F80;
  v31[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", "took ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%lf", v5);
  WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", " ms with ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", *v6);
  v28[5]((WTF::StringPrintStream *)&v28);
  v15 = v29;
  v14 = v30;
  v27 = 0;
  if (v29)
  {
    if ((unint64_t)v30 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x1987CE8B8);
    }
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(v30 + 17));
    *(_DWORD *)v16 = 1;
    v16[1] = v14;
    v27 = (WTF *)v16;
    v17 = v16 + 2;
    memcpy(v16 + 2, v15, v14);
    *((_BYTE *)v17 + v14) = 0;
    v18 = (unint64_t)v29;
    if (v29 == v31)
      goto LABEL_9;
  }
  else
  {
    v18 = 0;
  }
  WTF::fastFree(v18, v7, v8, v9, v10, v11, v12, v13);
LABEL_9:
  JSC::Profiler::Database::logEvent(a1, a2, "baselineCompile", &v27, v10, v11, v12, v13);
  v26 = v27;
  v27 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v26;
  }
}

void JSC::VM::logEvent<JSC::JITPlan::compileInThread(JSC::JITWorklistThread *)::$_3>(JSC::Profiler::Database *a1, uint64_t a2, uint64_t a3)
{
  double v5;
  const char **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  const void *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;
  void (**v28)(WTF::StringPrintStream *__hidden);
  _BYTE *v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v5 = (**(double **)a3 - **(double **)(a3 + 8)) * 1000.0;
  v6 = *(const char ***)(a3 + 16);
  v28 = off_1E3572250;
  v29 = v31;
  v30 = xmmword_199122F80;
  v31[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", "took ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%lf", v5);
  WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", " ms with ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", *v6);
  v28[5]((WTF::StringPrintStream *)&v28);
  v15 = v29;
  v14 = v30;
  v27 = 0;
  if (v29)
  {
    if ((unint64_t)v30 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x1987CEA94);
    }
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(v30 + 17));
    *(_DWORD *)v16 = 1;
    v16[1] = v14;
    v27 = (WTF *)v16;
    v17 = v16 + 2;
    memcpy(v16 + 2, v15, v14);
    *((_BYTE *)v17 + v14) = 0;
    v18 = (unint64_t)v29;
    if (v29 == v31)
      goto LABEL_9;
  }
  else
  {
    v18 = 0;
  }
  WTF::fastFree(v18, v7, v8, v9, v10, v11, v12, v13);
LABEL_9:
  JSC::Profiler::Database::logEvent(a1, a2, "failed compilation", &v27, v10, v11, v12, v13);
  v26 = v27;
  v27 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v26;
  }
}

void JSC::VM::logEvent<JSC::JITPlan::compileInThread(JSC::JITWorklistThread *)::$_4>(JSC::Profiler::Database *a1, uint64_t a2, uint64_t a3)
{
  double v5;
  const char **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  const void *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;
  void (**v28)(WTF::StringPrintStream *__hidden);
  _BYTE *v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v5 = (**(double **)a3 - **(double **)(a3 + 8)) * 1000.0;
  v6 = *(const char ***)(a3 + 16);
  v28 = off_1E3572250;
  v29 = v31;
  v30 = xmmword_199122F80;
  v31[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", "took ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%lf", v5);
  WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", " ms with ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", *v6);
  v28[5]((WTF::StringPrintStream *)&v28);
  v15 = v29;
  v14 = v30;
  v27 = 0;
  if (v29)
  {
    if ((unint64_t)v30 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x1987CEC70);
    }
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(v30 + 17));
    *(_DWORD *)v16 = 1;
    v16[1] = v14;
    v27 = (WTF *)v16;
    v17 = v16 + 2;
    memcpy(v16 + 2, v15, v14);
    *((_BYTE *)v17 + v14) = 0;
    v18 = (unint64_t)v29;
    if (v29 == v31)
      goto LABEL_9;
  }
  else
  {
    v18 = 0;
  }
  WTF::fastFree(v18, v7, v8, v9, v10, v11, v12, v13);
LABEL_9:
  JSC::Profiler::Database::logEvent(a1, a2, "cancelled compilation", &v27, v10, v11, v12, v13);
  v26 = v27;
  v27 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v26;
  }
}

uint64_t WTF::dataLog<char [11],WTF::CString,char [8],JSC::JITCompilationMode,char [7],char const*,char [7],unsigned long,char [11],double,char [4]>(_QWORD *a1, int *a2, const char **a3, _QWORD *a4, double *a5)
{
  unint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  WTF::PrintStream *v16;
  uint64_t result;
  char v18;
  char **v19;
  char *v20;

  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v20 = &v18;
    v19 = &v20;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v11 = WTF::s_file;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v12, "%s", "Optimized ");
  if (*a1)
    v13 = (const char *)(*a1 + 16);
  else
    v13 = 0;
  WTF::PrintStream::printf(v12, "%s", v13);
  WTF::PrintStream::printf(v12, "%s", " using ");
  v14 = *a2;
  if (v14 >= 6)
  {
    result = 57;
    __break(0xC471u);
  }
  else
  {
    v15 = off_1E3596190[v14];
    v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
    WTF::PrintStream::printf(v16, "%s", v15);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
    WTF::PrintStream::printf(v12, "%s", " with ");
    WTF::PrintStream::printf(v12, "%s", *a3);
    WTF::PrintStream::printf(v12, "%s", " into ");
    WTF::PrintStream::printf(v12, "%lu", *a4);
    WTF::PrintStream::printf(v12, "%s", " bytes in ");
    WTF::PrintStream::printf(v12, "%lf", *a5);
    WTF::PrintStream::printf(v12, "%s", " ms");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  }
  return result;
}

uint64_t WTF::dataLog<char [8],double,char [7],double,char [2]>(double *a1, double *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", " (DFG: ");
  WTF::PrintStream::printf(v6, "%lf", *a1);
  WTF::PrintStream::printf(v6, "%s", ", B3: ");
  WTF::PrintStream::printf(v6, "%lf", *a2);
  WTF::PrintStream::printf(v6, "%s", ")");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,1ul,0>(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10 == -1)
    goto LABEL_7;
  if ((_DWORD)v10 != 1)
  {
    ((void (*)(char *, uint64_t))off_1E3595FF8[v10])(&v15, a1);
LABEL_7:
    *(_DWORD *)(a1 + 16) = -1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v13;
    LODWORD(v13) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(a1 + 8) = v13;
    LODWORD(v13) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(a1 + 12) = v13;
    *(_DWORD *)(a1 + 16) = 1;
    return a1;
  }
  v11 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v12;
  LODWORD(v12) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 8) = v12;
  LODWORD(v12) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v12;
  return a1;
}

uint64_t std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,2ul,0>(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10 == -1)
    goto LABEL_7;
  if ((_DWORD)v10 != 2)
  {
    ((void (*)(char *, uint64_t))off_1E3595FF8[v10])(&v15, a1);
LABEL_7:
    *(_DWORD *)(a1 + 16) = -1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v13;
    LODWORD(v13) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(a1 + 8) = v13;
    LODWORD(v13) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(a1 + 12) = v13;
    *(_DWORD *)(a1 + 16) = 2;
    return a1;
  }
  v11 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v12;
  LODWORD(v12) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 8) = v12;
  LODWORD(v12) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v12;
  return a1;
}

uint64_t WTF::switchOn<std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(std::monostate)#1},JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1},JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = *a4;
  v9 = *((_QWORD *)a4 + 2);
  v7[0] = a2;
  v7[1] = a3;
  v4 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v4 == -1)
  {
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(std::monostate)#1},JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(v6);
  }
  else
  {
    v10 = v7;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_1E3596010[v4])(&v10, a1);
  }
}

_DWORD ***std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(std::monostate)#1},JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(_DWORD ***result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD **v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;

  v9 = *result;
  v10 = *(_DWORD **)a2;
  v11 = *(unsigned int *)(a2 + 12);
  v12 = **result;
  if ((_DWORD)v11)
  {
    v13 = 4 * v11;
    v14 = *(_DWORD **)a2;
    while (*v14 != *v12)
    {
      ++v14;
      v13 -= 4;
      if (!v13)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    if ((_DWORD)v11 == *(_DWORD *)(a2 + 8))
    {
      result = (_DWORD ***)WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v11 + 1), (unint64_t)v12, a4, a5, a6, a7, a8);
      v12 = result;
      v11 = *(unsigned int *)(a2 + 12);
      v10 = *(_DWORD **)a2;
    }
    v10[v11] = *v12;
    ++*(_DWORD *)(a2 + 12);
    *(_BYTE *)v9[1] = 1;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(std::monostate)#1},JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)a2;
  v5 = *(unsigned int *)(a2 + 12);
  v6 = *(uint64_t **)(*(_QWORD *)result + 24);
  if ((_DWORD)v5)
  {
    v7 = (_QWORD *)(v4 + 8);
    v8 = 16 * v5;
    while (1)
    {
      if (*((_DWORD *)v7 - 2) == **(_DWORD **)(*(_QWORD *)result + 16))
      {
        v9 = *v7;
        if (*v7)
        {
          if ((v9 & 1) != 0)
            v9 &= ~1uLL;
          else
            v9 = *(_QWORD *)(v9 + 8);
        }
        v10 = *v6;
        if (*v6)
        {
          if ((v10 & 1) != 0)
            v10 &= ~1uLL;
          else
            v10 = *(_QWORD *)(v10 + 8);
        }
        if (v9 == v10)
          break;
      }
      v7 += 2;
      v8 -= 16;
      if (!v8)
        goto LABEL_15;
    }
  }
  else
  {
LABEL_15:
    LODWORD(v11) = **(_DWORD **)(*(_QWORD *)result + 16);
    *((_QWORD *)&v11 + 1) = *v6;
    if ((_DWORD)v5 == *(_DWORD *)(a2 + 8))
    {
      result = WTF::Vector<JSC::JSTokenLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v5 + 1, (unint64_t)&v11);
      *(_OWORD *)(*(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 12)) = *(_OWORD *)result;
    }
    else
    {
      *(_OWORD *)(v4 + 16 * v5) = v11;
    }
    ++*(_DWORD *)(a2 + 12);
    **(_BYTE **)(v3 + 32) = 1;
  }
  return result;
}

uint64_t JSC::JSObject::getOwnPropertySlotInline(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t result;
  int v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  _WORD *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  const WTF::StringImpl *v43;
  unsigned __int16 *v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned int v57;

  if ((*(_BYTE *)(a1 + 6) & 8) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(16
                                                                                  * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0x68))(a1, a2, a3, a4);
  v12 = *(_QWORD *)(a2 + 56);
  if (!(a3 >> 4))
    goto LABEL_37;
  v13 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v13 + 0x20)) != 0)
    goto LABEL_37;
  v14 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v14)
  {
    v25 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v25 || *(_BYTE *)(v25 + 5) != 1 && *(_DWORD *)(v25 + 80) < 2u)
      goto LABEL_37;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v14)
      goto LABEL_37;
  }
  if (!*(_DWORD *)(v14 + 24))
    goto LABEL_37;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  v17 = *(unsigned int *)(v14 + 8);
  v18 = *(_DWORD *)(a3 + 16);
  if ((v15 & 1) != 0)
  {
    if ((v18 & 0x20) != 0)
      v18 = *(_DWORD *)(a3 + 32);
    v19 = *(_DWORD *)(v14 + 12);
    v20 = (v18 >> 8) & *(_QWORD *)&v19;
    v21 = *(unsigned __int8 *)(v16 + v20);
    if (*(_BYTE *)(v16 + v20))
    {
      v22 = v16 + v17;
      v23 = 1;
      while (1)
      {
        v24 = *(_QWORD *)(v22 + 8 * (v21 - 1));
        if (a3 == (v24 & 0xFFFFFFFFFFFFLL))
          break;
        v20 = ((_DWORD)v20 + v23) & v19;
        v21 = *(unsigned __int8 *)(v16 + v20);
        ++v23;
        if (!*(_BYTE *)(v16 + v20))
          goto LABEL_37;
      }
      a6 = (v24 >> 16) & 0xFF00000000 | HIBYTE(v24);
      goto LABEL_19;
    }
LABEL_37:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot(a1, v12, a3, a4) & 1) != 0)
      return 1;
    if (!a3)
      return 0;
    v37 = *(_DWORD *)(a3 + 16);
    if ((v37 & 0x20) != 0)
      return 0;
    v38 = *(_WORD **)(a3 + 8);
    v39 = *(unsigned int *)(a3 + 4);
    if ((v37 & 4) == 0)
    {
      if ((_DWORD)v39)
      {
        v40 = (unsigned __int16)*v38 - 48;
        if (v40 <= 9 && (*v38 != 48 || v39 <= 1))
        {
          v44 = v38 + 1;
          v45 = v39 - 1;
          while (v45)
          {
            if (v40 > 0x19999999)
              goto LABEL_43;
            v46 = *v44 - 48;
            if (v46 > 9)
              goto LABEL_43;
            v41 = 0;
            LODWORD(v39) = 0;
            v42 = 0;
            v47 = __CFADD__(v46, 10 * v40);
            v40 = v46 + 10 * v40;
            ++v44;
            --v45;
            if (v47)
              goto LABEL_45;
          }
          v41 = 0x100000000;
          if (v40 == -1)
          {
            v41 = 0;
            LODWORD(v39) = 0;
          }
          else
          {
            LODWORD(v39) = v40;
          }
          if (v40 == -1)
            v42 = 0;
          else
            v42 = v40 & 0xFFFFFF00;
          goto LABEL_45;
        }
LABEL_43:
        v41 = 0;
        LODWORD(v39) = 0;
      }
      else
      {
        v41 = 0;
      }
      v42 = 0;
LABEL_45:
      v43 = (const WTF::StringImpl *)(v42 | v39);
      goto LABEL_46;
    }
    if ((_DWORD)v39)
    {
      v53 = *(unsigned __int8 *)v38 - 48;
      if (v53 <= 9 && (v39 < 2 || *(_BYTE *)v38 != 48))
      {
        v55 = v39 - 1;
        v56 = (unsigned __int8 *)v38 + 1;
        while (v55)
        {
          if (v53 > 0x19999999)
            goto LABEL_78;
          v57 = *v56 - 48;
          if (v57 > 9)
            goto LABEL_78;
          LODWORD(v39) = 0;
          v54 = 0;
          v41 = 0;
          v47 = __CFADD__(v57, 10 * v53);
          v53 = v57 + 10 * v53;
          --v55;
          ++v56;
          if (v47)
            goto LABEL_80;
        }
        if (v53 == -1)
          LODWORD(v39) = 0;
        else
          LODWORD(v39) = v53 & 0xFFFFFF00;
        if (v53 == -1)
          v54 = 0;
        else
          v54 = v53;
        if (v53 == -1)
          v41 = 0;
        else
          v41 = 0x100000000;
        goto LABEL_80;
      }
LABEL_78:
      LODWORD(v39) = 0;
    }
    v54 = 0;
    v41 = 0;
LABEL_80:
    v43 = (const WTF::StringImpl *)(v54 | v39);
LABEL_46:
    if ((v41 & 0x100000000) != 0)
      return JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, v43, a4, a5, a6, a7, a8);
    return 0;
  }
  if ((v18 & 0x20) != 0)
    v18 = *(_DWORD *)(a3 + 32);
  v31 = *(_DWORD *)(v14 + 12);
  v32 = v31 & (v18 >> 8);
  v33 = *(_DWORD *)(v16 + 4 * v32);
  if (!v33)
    goto LABEL_37;
  v34 = v16 + 4 * v17;
  v35 = 1;
  while (1)
  {
    v36 = (v33 - 1);
    if (*(_QWORD *)(v34 + 16 * v36) == a3)
      break;
    v32 = (v32 + v35) & v31;
    v33 = *(_DWORD *)(v16 + 4 * v32);
    ++v35;
    if (!v33)
      goto LABEL_37;
  }
  a6 = *(unsigned int *)(v34 + 16 * v36 + 8) | ((unint64_t)*(unsigned __int8 *)(v34 + 16 * v36 + 12) << 32);
LABEL_19:
  if ((_DWORD)a6 == -1)
    goto LABEL_37;
  if ((int)a6 <= 63)
  {
    v26 = a1 + 16;
    v27 = a6 << 32;
  }
  else
  {
    v26 = *(_QWORD *)(a1 + 8) - 8;
    v27 = 0x3F00000000 - (a6 << 32);
  }
  v28 = *(_QWORD *)(v26 + (v27 >> 29));
  if ((v28 & 0xFFFE000000000002) != 0)
    goto LABEL_25;
  v29 = *(unsigned __int8 *)(v28 + 5);
  if (v29 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, v12, a4, v28, SHIDWORD(a6), a6);
    return 1;
  }
  if (v29 != 6)
  {
LABEL_25:
    *(_QWORD *)a4 = v28;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_DWORD *)(a4 + 20) = a6;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v48 = *(_DWORD *)(v13 + 16) & 3;
  v50 = *(_QWORD *)(v28 + 8);
  v49 = *(_QWORD *)(v28 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C)))
  {
    v52 = *(_QWORD *)(v28 + 24);
    v51 = *(_QWORD *)(v28 + 32);
    *(_QWORD *)a4 = v50;
    *(_QWORD *)(a4 + 8) = v49;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v48 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v52;
    *(_QWORD *)(a4 + 80) = v51;
  }
  else
  {
    *(_QWORD *)a4 = v50;
    *(_QWORD *)(a4 + 8) = v49;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v48 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

void JSC::MegamorphicCache::initAsHit(uint64_t a1, WTF::AtomStringImpl *a2, WTF::StringImpl *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int16 v16;
  _QWORD *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;

  v9 = (int)a2;
  v11 = a2 ^ (a2 >> 11);
  v12 = *((_DWORD *)this + 4);
  if (v12 < 0x100)
  {
    v28 = a6;
    v29 = a4;
    v30 = a5;
    LOWORD(v13) = WTF::StringImpl::hashSlowCase(this);
    a5 = v30;
    a4 = v29;
    a6 = v28;
  }
  else
  {
    v13 = v12 >> 8;
  }
  v14 = ((_WORD)v13 + (_WORD)v11) & 0x7FF;
  v15 = a1 + 24 * (((_WORD)v13 + (_WORD)v11) & 0x7FF);
  v17 = (_QWORD *)(v15 + 12);
  v16 = *(_WORD *)(v15 + 12);
  LODWORD(v18) = *(unsigned __int16 *)(a1 + 133120);
  v19 = *(WTF::StringImpl **)v15;
  if (v16 == (_DWORD)v18)
  {
    v22 = a1 + 24 * v14;
    v23 = *(_DWORD *)(v22 + 8);
    v18 = (_DWORD *)(v22 + 8);
    v24 = ((_WORD)v23 + (_WORD)v19 + (unsigned __int16)((v23 + (_DWORD)v19) >> 9)) & 0x1FF;
    v25 = 24 * (((_WORD)v23 + (_WORD)v19 + (unsigned __int16)((v23 + (_DWORD)v19) >> 9)) & 0x1FF);
    *(_QWORD *)v15 = 0;
    v26 = *(WTF::StringImpl **)(a1 + 49152 + v25);
    *(_QWORD *)(a1 + 49152 + v25) = v19;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        v53 = a6;
        v52 = a4;
        v51 = a5;
        v50 = v24;
        WTF::StringImpl::~StringImpl(v26, a2, (uint64_t)this, a4, a5, a6, a7, a8);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
        v24 = v50;
        a5 = v51;
        a4 = v52;
        a6 = v53;
        v16 = *(_WORD *)(a1 + 133120);
        v19 = *(WTF::StringImpl **)v15;
      }
      else
      {
        v19 = 0;
        *(_DWORD *)v26 -= 2;
      }
    }
    else
    {
      v19 = 0;
    }
    v27 = a1 + 49152 + 24 * v24;
    *(_DWORD *)(v27 + 8) = *v18;
    *(_QWORD *)(v27 + 12) = *v17;
    *(_DWORD *)(v27 + 20) = *(_DWORD *)(v15 + 20);
    LOWORD(v18) = v16;
  }
  *(_DWORD *)this += 2;
  *(_QWORD *)v15 = this;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      v31 = a6;
      v32 = a4;
      v33 = a5;
      WTF::StringImpl::~StringImpl(v19, a2, (uint64_t)this, a4, a5, a6, a7, a8);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
      LOWORD(a5) = v33;
      a4 = v32;
      LODWORD(a6) = v31;
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  v20 = a1 + 24 * v14;
  *(_DWORD *)(v20 + 8) = v9;
  *(_WORD *)v17 = (_WORD)v18;
  *(_WORD *)(v20 + 14) = a5;
  if ((_DWORD)a6)
    v21 = 1;
  else
    v21 = a4;
  *(_QWORD *)(v20 + 16) = v21;
}

void JSC::MegamorphicCache::initAsMiss(uint64_t a1, WTF::AtomStringImpl *a2, WTF::StringImpl *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int16 v16;
  _QWORD *v17;
  int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;

  v9 = (int)a2;
  v11 = a2 ^ (a2 >> 11);
  v12 = *((_DWORD *)this + 4);
  if (v12 < 0x100)
    LOWORD(v13) = WTF::StringImpl::hashSlowCase(this);
  else
    v13 = v12 >> 8;
  v14 = ((_WORD)v13 + (_WORD)v11) & 0x7FF;
  v15 = a1 + 24 * (((_WORD)v13 + (_WORD)v11) & 0x7FF);
  v17 = (_QWORD *)(v15 + 12);
  v16 = *(_WORD *)(v15 + 12);
  v18 = *(unsigned __int16 *)(a1 + 133120);
  v19 = *(WTF::StringImpl **)v15;
  if (v16 == v18)
  {
    v21 = a1 + 24 * v14;
    v23 = *(_DWORD *)(v21 + 8);
    v22 = (_DWORD *)(v21 + 8);
    v24 = ((_WORD)v23 + (_WORD)v19 + (unsigned __int16)((v23 + (_DWORD)v19) >> 9)) & 0x1FF;
    v25 = 24 * (((_WORD)v23 + (_WORD)v19 + (unsigned __int16)((v23 + (_DWORD)v19) >> 9)) & 0x1FF);
    *(_QWORD *)v15 = 0;
    v26 = *(WTF::StringImpl **)(a1 + 49152 + v25);
    *(_QWORD *)(a1 + 49152 + v25) = v19;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        v44 = v24;
        WTF::StringImpl::~StringImpl(v26, a2, (uint64_t)this, a4, a5, a6, a7, a8);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
        v24 = v44;
        v16 = *(_WORD *)(a1 + 133120);
        v19 = *(WTF::StringImpl **)v15;
      }
      else
      {
        v19 = 0;
        *(_DWORD *)v26 -= 2;
      }
    }
    else
    {
      v19 = 0;
    }
    v27 = a1 + 49152 + 24 * v24;
    *(_DWORD *)(v27 + 8) = *v22;
    *(_QWORD *)(v27 + 12) = *v17;
    *(_DWORD *)(v27 + 20) = *(_DWORD *)(v15 + 20);
    LOWORD(v18) = v16;
  }
  *(_DWORD *)this += 2;
  *(_QWORD *)v15 = this;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, a2, (uint64_t)this, a4, a5, a6, a7, a8);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  v20 = a1 + 24 * v14;
  *(_DWORD *)(v20 + 8) = v9;
  *(_WORD *)v17 = v18;
  *(_WORD *)(v20 + 14) = 0;
  *(_QWORD *)(v20 + 16) = 0;
}

void JSC::MegamorphicCache::initAsHasHit(uint64_t a1, WTF::AtomStringImpl *a2, WTF::StringImpl *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  unsigned __int16 *v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v9 = (int)a2;
  v11 = a2 ^ (a2 >> 9);
  v12 = *((_DWORD *)this + 4);
  if (v12 < 0x100)
    LOWORD(v13) = WTF::StringImpl::hashSlowCase(this);
  else
    v13 = v12 >> 8;
  v14 = ((_WORD)v13 + (_WORD)v11) & 0x1FF;
  v15 = a1 + 122880;
  v16 = a1 + 122880 + 16 * v14;
  v17 = *(_WORD *)(v16 + 12);
  v18 = (unsigned __int16 *)(a1 + 133120);
  LODWORD(v19) = *(unsigned __int16 *)(a1 + 133120);
  v20 = *(WTF::StringImpl **)v16;
  if (v17 == (_DWORD)v19)
  {
    v30 = v15 + 16 * v14;
    v31 = *(_DWORD *)(v30 + 8);
    v19 = (_QWORD *)(v30 + 8);
    v32 = ((_BYTE)v31 + (_BYTE)v20 + ((v31 + (_DWORD)v20) >> 7)) & 0x7F;
    v33 = a1 + 0x20000;
    *(_QWORD *)v16 = 0;
    v34 = *(WTF::StringImpl **)(a1 + 0x20000 + 16 * v32);
    *(_QWORD *)(v33 + 16 * v32) = v20;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        v43 = v32;
        WTF::StringImpl::~StringImpl(v34, a2, (uint64_t)this, a4, a5, a6, a7, a8);
        WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
        v32 = v43;
        v17 = *v18;
        v20 = *(WTF::StringImpl **)v16;
      }
      else
      {
        v20 = 0;
        *(_DWORD *)v34 -= 2;
      }
    }
    else
    {
      v20 = 0;
    }
    *(_QWORD *)(v33 + 16 * v32 + 8) = *v19;
    LOWORD(v19) = v17;
  }
  *(_DWORD *)this += 2;
  *(_QWORD *)v16 = this;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, a2, (uint64_t)this, a4, a5, a6, a7, a8);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  v21 = v15 + 16 * v14;
  *(_DWORD *)(v21 + 8) = v9;
  *(_WORD *)(v16 + 12) = (_WORD)v19;
  *(_WORD *)(v21 + 14) = 1;
}

void JSC::MegamorphicCache::initAsHasMiss(uint64_t a1, WTF::AtomStringImpl *a2, WTF::StringImpl *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  unsigned __int16 *v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v9 = (int)a2;
  v11 = a2 ^ (a2 >> 9);
  v12 = *((_DWORD *)this + 4);
  if (v12 < 0x100)
    LOWORD(v13) = WTF::StringImpl::hashSlowCase(this);
  else
    v13 = v12 >> 8;
  v14 = ((_WORD)v13 + (_WORD)v11) & 0x1FF;
  v15 = a1 + 122880;
  v16 = a1 + 122880 + 16 * v14;
  v17 = *(_WORD *)(v16 + 12);
  v18 = (unsigned __int16 *)(a1 + 133120);
  LODWORD(v19) = *(unsigned __int16 *)(a1 + 133120);
  v20 = *(WTF::StringImpl **)v16;
  if (v17 == (_DWORD)v19)
  {
    v22 = v15 + 16 * v14;
    v23 = *(_DWORD *)(v22 + 8);
    v19 = (_QWORD *)(v22 + 8);
    v24 = ((_BYTE)v23 + (_BYTE)v20 + ((v23 + (_DWORD)v20) >> 7)) & 0x7F;
    v25 = a1 + 0x20000;
    *(_QWORD *)v16 = 0;
    v26 = *(WTF::StringImpl **)(a1 + 0x20000 + 16 * v24);
    *(_QWORD *)(v25 + 16 * v24) = v20;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        v43 = v24;
        WTF::StringImpl::~StringImpl(v26, a2, (uint64_t)this, a4, a5, a6, a7, a8);
        WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
        v24 = v43;
        v17 = *v18;
        v20 = *(WTF::StringImpl **)v16;
      }
      else
      {
        v20 = 0;
        *(_DWORD *)v26 -= 2;
      }
    }
    else
    {
      v20 = 0;
    }
    *(_QWORD *)(v25 + 16 * v24 + 8) = *v19;
    LOWORD(v19) = v17;
  }
  *(_DWORD *)this += 2;
  *(_QWORD *)v16 = this;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, a2, (uint64_t)this, a4, a5, a6, a7, a8);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  v21 = v15 + 16 * v14;
  *(_DWORD *)(v21 + 8) = v9;
  *(_WORD *)(v16 + 12) = (_WORD)v19;
  *(_WORD *)(v21 + 14) = 0;
}

int32x2_t JSC::MegamorphicCache::initAsReplace(uint64_t a1, WTF::AtomStringImpl *a2, WTF::StringImpl *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;
  unsigned int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  _DWORD *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  int32x2_t result;
  int32x2_t *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  __int16 v49;

  v8 = a4;
  v10 = a2;
  v12 = a2 ^ (a2 >> 11);
  v13 = *((_DWORD *)this + 4);
  if (v13 < 0x100)
    LOWORD(v14) = WTF::StringImpl::hashSlowCase(this);
  else
    v14 = v13 >> 8;
  v15 = ((_WORD)v14 + (_WORD)v12) & 0x7FF;
  v16 = a1 + 61440;
  v17 = a1 + 61440 + 24 * (((_WORD)v14 + (_WORD)v12) & 0x7FF);
  v19 = (_DWORD *)(v17 + 16);
  v18 = *(_WORD *)(v17 + 16);
  v20 = (unsigned __int16 *)(a1 + 133120);
  LODWORD(v21) = *(unsigned __int16 *)(a1 + 133120);
  v22 = *(WTF::StringImpl **)v17;
  if (v18 == (_DWORD)v21)
  {
    v49 = v8;
    v25 = v16 + 24 * v15;
    v27 = *(_DWORD *)(v25 + 8);
    v26 = (_QWORD *)(v25 + 8);
    v28 = ((_WORD)v27 + (_WORD)v22 + (unsigned __int16)((v27 + (_DWORD)v22) >> 9)) & 0x1FF;
    v21 = a1 + 110592;
    v29 = 24 * (((_WORD)v27 + (_WORD)v22 + (unsigned __int16)((v27 + (_DWORD)v22) >> 9)) & 0x1FF);
    *(_QWORD *)v17 = 0;
    v30 = *(WTF::StringImpl **)(a1 + 110592 + v29);
    *(_QWORD *)(v21 + v29) = v22;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
      {
        v48 = v28;
        WTF::StringImpl::~StringImpl(v30, a2, (uint64_t)this, a4, a5, a6, a7, a8);
        WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
        v28 = v48;
        v18 = *v20;
        v22 = *(WTF::StringImpl **)v17;
      }
      else
      {
        v22 = 0;
        *(_DWORD *)v30 -= 2;
      }
    }
    else
    {
      v22 = 0;
    }
    v31 = v21 + 24 * v28;
    *(_QWORD *)(v31 + 8) = *v26;
    *(_DWORD *)(v31 + 16) = *v19;
    *(_BYTE *)(v31 + 20) = *(_BYTE *)(v17 + 20);
    LOWORD(v21) = v18;
    v8 = v49;
  }
  *(_DWORD *)this += 2;
  *(_QWORD *)v17 = this;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, a2, (uint64_t)this, a4, a5, a6, a7, a8);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  result = vdup_n_s32(v10);
  v24 = (int32x2_t *)(v16 + 24 * v15);
  v24[1] = result;
  *(_WORD *)v19 = v21;
  v24[2].i16[1] = v8;
  v24[2].i8[4] = 0;
  return result;
}

void JSC::MegamorphicCache::initAsTransition(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, WTF::StringImpl *this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  _DWORD *v17;
  unsigned __int16 *v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  char v33;
  __int16 v34;
  int v35;
  int v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;

  v10 = a2 ^ (a2 >> 11);
  v11 = *((_DWORD *)this + 4);
  if (v11 < 0x100)
  {
    v29 = a6;
    v30 = a5;
    v31 = a3;
    v32 = a2;
    LOWORD(v12) = WTF::StringImpl::hashSlowCase(this);
    a2 = v32;
    a3 = v31;
    a5 = v30;
    a6 = v29;
  }
  else
  {
    v12 = v11 >> 8;
  }
  v13 = ((_WORD)v12 + (_WORD)v10) & 0x7FF;
  v14 = a1 + 61440;
  v15 = a1 + 61440 + 24 * (((_WORD)v12 + (_WORD)v10) & 0x7FF);
  v17 = (_DWORD *)(v15 + 16);
  v16 = *(_WORD *)(v15 + 16);
  v18 = (unsigned __int16 *)(a1 + 133120);
  LODWORD(v19) = *(unsigned __int16 *)(a1 + 133120);
  v20 = *(WTF::StringImpl **)v15;
  if (v16 == (_DWORD)v19)
  {
    v21 = v14 + 24 * v13;
    v22 = *(_DWORD *)(v21 + 8);
    v19 = (_QWORD *)(v21 + 8);
    v23 = (v22 + (_DWORD)v20 + ((v22 + (_DWORD)v20) >> 9)) & 0x1FF;
    v24 = a1 + 110592;
    v25 = 24 * v23;
    *(_QWORD *)v15 = 0;
    v26 = *(WTF::StringImpl **)(a1 + 110592 + v25);
    *(_QWORD *)(v24 + v25) = v20;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        v55 = a5;
        v56 = a6;
        v53 = a2;
        v54 = a3;
        WTF::StringImpl::~StringImpl(v26, a2, a3, (uint64_t)this, a5, a6, a7, a8);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
        a2 = v53;
        a3 = v54;
        a5 = v55;
        a6 = v56;
        v16 = *v18;
        v20 = *(WTF::StringImpl **)v15;
      }
      else
      {
        v20 = 0;
        *(_DWORD *)v26 -= 2;
      }
    }
    else
    {
      v20 = 0;
    }
    v27 = v24 + 24 * v23;
    *(_QWORD *)(v27 + 8) = *v19;
    *(_DWORD *)(v27 + 16) = *v17;
    *(_BYTE *)(v27 + 20) = *(_BYTE *)(v15 + 20);
    LOWORD(v19) = v16;
  }
  *(_DWORD *)this += 2;
  *(_QWORD *)v15 = this;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      v33 = a6;
      v34 = a5;
      v35 = a3;
      v36 = (int)a2;
      WTF::StringImpl::~StringImpl(v20, a2, a3, (uint64_t)this, a5, a6, a7, a8);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
      LODWORD(a2) = v36;
      LODWORD(a3) = v35;
      LOWORD(a5) = v34;
      LOBYTE(a6) = v33;
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  v28 = v14 + 24 * v13;
  *(_DWORD *)(v28 + 8) = (_DWORD)a2;
  *(_DWORD *)(v28 + 12) = a3;
  *(_WORD *)v17 = (_WORD)v19;
  *(_WORD *)(v28 + 18) = a5;
  *(_BYTE *)(v28 + 20) = a6;
}

uint64_t JSC::handleHostCall(_QWORD *a1, JSC::JSCell *a2, uint64_t a3, unint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  JSC::JSCell *Caller;
  uint64_t v24;
  JSC::JSGlobalObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  uint64_t v54;
  uint64_t (*v55)(_QWORD, uint64_t);
  uint64_t v56;
  char v57;
  _QWORD *v58;

  *(_QWORD *)(a3 + 16) = 0;
  v13 = a5[17] >> 4;
  v14 = v13 > 8;
  v15 = (1 << v13) & 0x118;
  if (!v14 && v15 != 0)
  {
    if ((a4 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v54) = 0;
LABEL_9:
      v17 = JSC::CallLinkInfo::globalObjectForSlowPath((JSC::CallLinkInfo *)a5, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(v17 + 96);
      return JSC::throwNotAConstructorErrorFromCallIC(v17, a2, (WTF::StringImpl *)a4, (JSC::CallLinkInfo *)a5);
    }
    if (*(_BYTE *)(a4 + 5) == 26)
      JSC::JSFunction::getConstructData(&v54, (uint64_t *)a4, a2);
    else
      (*(void (**)(uint64_t *__return_ptr, unint64_t))(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                        + 0x4C)
                                                                      + 0x40))(&v54, a4);
    if (v54 != 1)
      goto LABEL_9;
    a1[5] = a3;
    *(_QWORD *)(a3 + 24) = a4;
    a1[11308] = v55(*(_QWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x28), a3);
    if (!a1[2])
    {
      JSC::LLInt::getHostCallReturnValueEntrypoint(v53);
      v19 = v53[0];
      JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v53, v46, v47, v48, v49, v50, v51, v52);
      return v19;
    }
    return 0;
  }
  if ((a4 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v54) = 0;
  }
  else
  {
    if (*(_BYTE *)(a4 + 5) == 26)
    {
      v21 = *(_QWORD *)(a4 + 24);
      if ((v21 & 1) != 0)
        v21 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v21 + 5) != 8)
      {
        LOBYTE(v54) = 2;
        v22 = *(_QWORD *)(a4 + 16);
        v55 = (uint64_t (*)(_QWORD, uint64_t))v21;
        v56 = v22;
        goto LABEL_18;
      }
      LOBYTE(v54) = 1;
      v55 = *(uint64_t (**)(_QWORD, uint64_t))(v21 + 40);
      LOBYTE(v56) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C));
LABEL_22:
      a1[5] = a3;
      *(_QWORD *)(a3 + 24) = a4;
      a1[11308] = v55(*(_QWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x28), a3);
      if (!a1[2])
      {
        if (!BYTE1(dword_1ECF4C240))
          return qword_1ECF532A0;
        v33 = atomic_load(&JSC::LLInt::getHostCallReturnValueThunk(void)::onceKey);
        if (v33 != -1)
        {
          v53[0] = &v57;
          v58 = v53;
          std::__call_once(&JSC::LLInt::getHostCallReturnValueThunk(void)::onceKey, &v58, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::getHostCallReturnValueThunk(void)::$_0 &&>>);
        }
        v19 = JSC::LLInt::getHostCallReturnValueThunk(void)::codeRef;
        v34 = (unsigned int *)JSC::LLInt::getHostCallReturnValueThunk(void)::codeRef;
        if (JSC::LLInt::getHostCallReturnValueThunk(void)::codeRef)
        {
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 + 1, v34));
          do
          {
            v36 = __ldaxr(v34);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v34));
          if (!v37)
          {
            atomic_store(1u, v34);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v34, v26, v27, v28, v29, v30, v31, v32);
            WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
          }
        }
        return v19;
      }
      return 0;
    }
    (*(void (**)(uint64_t *__return_ptr, unint64_t))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x38))(&v54, a4);
    if (v54 == 1)
      goto LABEL_22;
  }
LABEL_18:
  Caller = JSC::CallLinkInfo::retrieveCaller((JSC::CallLinkInfo *)a5, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  if (Caller)
  {
    v24 = (uint64_t)Caller + 8;
LABEL_20:
    v25 = *(JSC::JSGlobalObject **)v24;
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(*(_QWORD *)v24 + 96);
    return JSC::throwNotAFunctionErrorFromCallIC(v25, a2, a4, (JSC::CallLinkInfo *)a5);
  }
  if (a2 && *((_BYTE *)a2 + 5) == 73)
  {
    v24 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 40;
    goto LABEL_20;
  }
  result = 298;
  __break(0xC471u);
  return result;
}

uint64_t JSC::throwNotAConstructorErrorFromCallIC(unint64_t a1, JSC::JSCell *a2, WTF::StringImpl *a3, JSC::CallLinkInfo *a4)
{
  JSC::VM *v8;
  uint64_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::JSCell *Caller;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::AtomStringImpl *v45;
  WTF::StringImpl *v46;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  uint64_t (*v88)(WTF::StringImpl **);
  WTF::StringImpl **v89;
  WTF::StringImpl *v90;
  JSC::VM *v91;
  WTF::StringImpl *v92[3];

  v8 = *(JSC::VM **)(a1 + 56);
  v91 = v8;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  v10.i64[0] = 0x1400000002;
  *(_QWORD *)v9 = 0x1400000002;
  *(_QWORD *)(v9 + 8) = "is not a constructor";
  *(_DWORD *)(v9 + 16) = 4;
  v92[0] = (WTF::StringImpl *)v9;
  JSC::constructErrorMessage((JSC::JSGlobalObject *)a1, (unint64_t)a3, (uint64_t *)v92, v11, v12, v13, v14, v15, (int **)&v90, v10);
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v9, v16, v17, v18, v19, v20, v21, v22);
    WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
  }
  else
  {
    *(_DWORD *)v9 -= 2;
  }
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8, (uint64_t)v16, v17, v18, v19, v20, v21, v22))
    goto LABEL_13;
  if (!v90)
  {
    JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v91);
    goto LABEL_13;
  }
  Caller = JSC::CallLinkInfo::retrieveCaller(a4, a2, v17, v18, v19, v20, v21, v22);
  if (!Caller)
    goto LABEL_11;
  v26 = (uint64_t)Caller;
  v27 = v24;
  v92[0] = a3;
  if (a3 == (WTF::StringImpl *)10)
  {
    v28 = 2;
    goto LABEL_8;
  }
  if (a3 == (WTF::StringImpl *)2)
  {
    v28 = 4;
    goto LABEL_8;
  }
  if (!a3)
  {
LABEL_42:
    v28 = 0;
    goto LABEL_8;
  }
  if (JSC::JSValue::isAnyInt((JSC::JSValue *)v92))
  {
    v28 = 16;
    goto LABEL_8;
  }
  if ((unint64_t)v92[0] >> 49)
  {
    v28 = 32;
    goto LABEL_8;
  }
  if (((unint64_t)v92[0] & 0xFFFE000000000002) != 0)
  {
    if (((unint64_t)v92[0] & 0xFFFFFFFFFFFFFFFELL) != 6)
      goto LABEL_36;
LABEL_38:
    v28 = 8;
    goto LABEL_8;
  }
  v86 = *((unsigned __int8 *)v92[0] + 5);
  if (v86 == 2)
  {
    v28 = 64;
    goto LABEL_8;
  }
  if (((unint64_t)v92[0] & 0xFFFFFFFFFFFFFFFELL) == 6)
    goto LABEL_38;
  if (v86 > 0x16)
  {
    v28 = 128;
    goto LABEL_8;
  }
LABEL_36:
  if (JSC::JSValue::isCallable((JSC::JSValue *)v92))
  {
    v28 = 1;
    goto LABEL_8;
  }
  if (((unint64_t)v92[0] & 0xFFFE000000000002) != 0)
    goto LABEL_42;
  v87 = *((unsigned __int8 *)v92[0] + 5);
  if (v87 == 4)
    v28 = 256;
  else
    v28 = (v87 == 3) << 9;
LABEL_8:
  JSC::appendSourceToErrorMessage(v26, v27, (_DWORD **)&v90, v28, (uint64_t (*)(_DWORD **, unint64_t, uint64_t, uint64_t, uint64_t))JSC::defaultSourceAppender, v92);
  v35 = v92[0];
  v92[0] = 0;
  v36 = v90;
  v90 = v35;
  if (v36)
  {
    v37 = *(_DWORD *)v36 - 2;
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v29, v30, v31, v32, v33, v34, v25);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      v36 = v92[0];
      v92[0] = 0;
      if (!v36)
        goto LABEL_11;
      v37 = *(_DWORD *)v36 - 2;
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::~StringImpl(v36, v72, v73, v74, v75, v76, v77, v25);
        WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
        goto LABEL_11;
      }
    }
    *(_DWORD *)v36 = v37;
  }
LABEL_11:
  v38 = *(_QWORD *)(a1 + 176);
  if ((v38 & 1) != 0)
  {
    v88 = *(uint64_t (**)(WTF::StringImpl **))(v38 & 0xFFFFFFFFFFFFFFFCLL);
    v89 = (WTF::StringImpl **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v89 = (WTF::StringImpl **)(a1 - 16);
    v92[0] = *v89;
    v92[1] = (WTF::StringImpl *)a1;
    v92[2] = (WTF::StringImpl *)(a1 + 176);
    v38 = v88(v92);
  }
  v39 = JSC::ErrorInstance::create((JSC::Heap **)v8, v38, (JSC::VM *)&v90, 0, 5, (uint64_t)a2, a4, v25);
  JSC::VM::throwException(v8, (JSC::JSGlobalObject *)a1, v39, v40, v41, v42, v43, v44);
LABEL_13:
  v46 = v90;
  v90 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v45, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  return 0;
}

uint64_t JSC::throwNotAFunctionErrorFromCallIC(JSC::JSGlobalObject *a1, JSC::JSCell *a2, unint64_t a3, JSC::CallLinkInfo *a4)
{
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::JSCell *Caller;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  WTF::StringImpl *v47;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  uint64_t v90;

  v8 = *((_QWORD *)a1 + 7);
  v90 = v8;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  v10.i64[0] = 0x1100000002;
  *(_QWORD *)v9 = 0x1100000002;
  *(_QWORD *)(v9 + 8) = "is not a function";
  *(_DWORD *)(v9 + 16) = 4;
  v88 = (WTF::StringImpl *)v9;
  JSC::constructErrorMessage(a1, a3, (uint64_t *)&v88, v11, v12, v13, v14, v15, (int **)&v89, v10);
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v9, v16, v17, v18, v19, v20, v21, v22);
    WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
  }
  else
  {
    *(_DWORD *)v9 -= 2;
  }
  if (!*(_DWORD *)(v8 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8, (uint64_t)v16, v17, v18, v19, v20, v21, v22))
  {
    if (!v89)
    {
      JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v90);
      goto LABEL_10;
    }
    Caller = JSC::CallLinkInfo::retrieveCaller(a4, a2, v17, v18, v19, v20, v21, v22);
    if (Caller)
    {
      v25 = (uint64_t)Caller;
      v26 = v24;
      v27 = JSC::runtimeTypeForValue(a3);
      JSC::appendSourceToErrorMessage(v25, v26, (_DWORD **)&v89, v27, (uint64_t (*)(_DWORD **, unint64_t, uint64_t, uint64_t, uint64_t))JSC::notAFunctionSourceAppender, &v88);
      v36 = v88;
      v35 = v89;
      v88 = 0;
      v89 = v36;
      if (v35)
      {
        v37 = *(_DWORD *)v35 - 2;
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::~StringImpl(v35, v28, v29, v30, v31, v32, v33, v34);
          WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
          v35 = v88;
          v88 = 0;
          if (!v35)
            goto LABEL_9;
          v37 = *(_DWORD *)v35 - 2;
          if (*(_DWORD *)v35 == 2)
          {
            WTF::StringImpl::~StringImpl(v35, v73, v74, v75, v76, v77, v78, v79);
            WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
            goto LABEL_9;
          }
        }
        *(_DWORD *)v35 = v37;
      }
    }
LABEL_9:
    v38 = JSC::JSGlobalObject::errorStructure((unint64_t)a1, 5);
    v40 = JSC::ErrorInstance::create((JSC::Heap **)v8, v38, (JSC::VM *)&v89, 0, 5, (uint64_t)a2, a4, v39);
    JSC::VM::throwException((JSC::VM *)v8, a1, v40, v41, v42, v43, v44, v45);
  }
LABEL_10:
  v47 = v89;
  v89 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v46, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  return 0;
}

unint64_t JSC::ErrorInstance::create(JSC::Heap **a1, unint64_t a2, JSC::VM *a3, uint64_t a4, uint64_t a5, uint64_t a6, JSC::CallLinkInfo *a7, uint64_t a8)
{
  JSC::Heap **v8;
  JSC::Heap *v9;
  unint64_t v10;
  int v11;
  unint64_t v13;
  JSC::CallLinkInfo *v14;
  uint64_t v15;
  uint64_t v16;
  JSC::VM *v17;
  JSC::Heap **v18;
  uint64_t v19;
  JSC::VM *v20;
  JSC::Heap **v21;
  JSC::Heap *v22;
  uint64_t v23;
  uint64_t v24;
  JSC::VM *v25;
  JSC::Heap **v26;
  char v27;
  JSC::VM *v28;
  uint64_t SlowCase;
  JSC::CallLinkInfo *v30;

  v8 = a1;
  v9 = a1[5056];
  if (!v9)
  {
    v14 = a7;
    v15 = a6;
    v16 = a4;
    v17 = a3;
    v18 = v8;
    v19 = a5;
    v20 = (JSC::VM *)a2;
    v9 = JSC::GCClient::Heap::errorInstanceSpaceSlow(v8 + 4694);
    a2 = (unint64_t)v20;
    a5 = v19;
    v8 = v18;
    a3 = v17;
    a4 = v16;
    a6 = v15;
    a7 = v14;
  }
  v10 = *((_QWORD *)v9 + 3);
  if (v10 >= *((_QWORD *)v9 + 4))
  {
    v10 = *((_QWORD *)v9 + 5);
    if ((v10 & 1) != 0)
    {
      v21 = v8 + 24;
      v22 = v9;
      v30 = a7;
      v23 = a6;
      v24 = a4;
      v25 = a3;
      v26 = v8;
      v27 = a5;
      v28 = (JSC::VM *)a2;
      JSC::sanitizeStackForVM((JSC *)v8, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v22, v21, 64, 0, 0);
      a2 = (unint64_t)v28;
      LOBYTE(a5) = v27;
      v8 = v26;
      a3 = v25;
      a4 = v24;
      a6 = v23;
      a7 = v30;
      v10 = SlowCase;
      goto LABEL_5;
    }
    v13 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)v9 + 6);
    *((_QWORD *)v9 + 4) = v10 + HIDWORD(v13);
    *((_QWORD *)v9 + 5) = v10 + (int)v13;
  }
  *((_QWORD *)v9 + 3) = v10 + 64;
LABEL_5:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v10 = a2 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_WORD *)(v10 + 56) = 0;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_BYTE *)(v10 + 58) = a5;
  *(_BYTE *)(v10 + 59) = *(_BYTE *)(v10 + 59) & 0xE0 | 0x10;
  JSC::ErrorInstance::finishCreation(v10, (uint64_t)v8, a3, a4, a6, a7, (uint64_t)a7, a8, (__n128)0);
  return v10;
}

uint64_t JSC::JSGlobalObject::errorStructure(unint64_t a1, int a2)
{
  uint64_t result;
  char *v4;
  uint64_t (*v5)(_QWORD *);
  _QWORD *v6;
  JSC::LazyClassStructure *v7;
  _QWORD v8[3];

  if (a2 == 5)
  {
    v4 = (char *)(a1 + 176);
    result = *(_QWORD *)(a1 + 176);
    if ((result & 1) != 0)
    {
LABEL_6:
      v5 = *(uint64_t (**)(_QWORD *))(result & 0xFFFFFFFFFFFFFFFCLL);
      v6 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v6 = (_QWORD *)(a1 - 16);
      v8[0] = *v6;
      v8[1] = a1;
      v8[2] = v4;
      return v5(v8);
    }
  }
  else
  {
    result = 0;
    switch(a2)
    {
      case 0:
        return JSC::JSGlobalObject::errorStructure(a1);
      case 1:
        v7 = (JSC::LazyClassStructure *)(a1 + 112);
        goto LABEL_10;
      case 2:
        v7 = (JSC::LazyClassStructure *)(a1 + 128);
        goto LABEL_10;
      case 3:
        v4 = (char *)(a1 + 144);
        result = *(_QWORD *)(a1 + 144);
        if ((result & 1) != 0)
          goto LABEL_6;
        return result;
      case 4:
        v7 = (JSC::LazyClassStructure *)(a1 + 160);
        goto LABEL_10;
      case 6:
        v7 = (JSC::LazyClassStructure *)(a1 + 192);
        goto LABEL_10;
      case 7:
        v7 = (JSC::LazyClassStructure *)(a1 + 208);
LABEL_10:
        result = JSC::LazyClassStructure::get(v7, a1);
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t JSC::JSGlobalObject::errorStructure(unint64_t this)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(this + 1504);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v4 = (_QWORD *)(this - 16);
    v5[0] = *v4;
    v5[1] = this;
    v5[2] = this + 1504;
    return v3(v5);
  }
  return v1;
}

uint64_t JSC::LazyClassStructure::get(JSC::LazyClassStructure *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t (*v4)(_QWORD *);
  uint64_t *v5;
  uint64_t v6;
  _QWORD v7[3];

  v2 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) != 0)
  {
    v4 = *(uint64_t (**)(_QWORD *))(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (a2)
    {
      v5 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v5 = (uint64_t *)(a2 - 16);
      v6 = *v5;
    }
    else
    {
      v6 = -192;
    }
    v7[0] = v6;
    v7[1] = a2;
    v7[2] = this;
    return v4(v7);
  }
  return v2;
}

unint64_t JSC::GetterSetter::create(JSC::GetterSetter *this, JSC::VM *a2, JSC::JSGlobalObject *a3, JSC::JSObject *a4, JSC::JSObject *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t SlowCase;
  char *v22;
  JSC::JSGlobalObject *v23;

  v11 = (_QWORD *)((char *)this + 38376);
  v12 = (char *)this + 192;
  v13 = *((_QWORD *)this + 4797);
  if (v13 < *((_QWORD *)this + 4798))
    goto LABEL_2;
  v13 = *((_QWORD *)this + 4799);
  if ((v13 & 1) == 0)
  {
    v20 = *(_QWORD *)(v13 + 8) ^ *((_QWORD *)this + 4800);
    *((_QWORD *)this + 4798) = v13 + HIDWORD(v20);
    *((_QWORD *)this + 4799) = v13 + (int)v20;
LABEL_2:
    *v11 = v13 + 32;
    goto LABEL_3;
  }
  v22 = (char *)this + 38376;
  v23 = a3;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)this + 38352, v12, 32, 0, 0);
  v11 = v22;
  a3 = v23;
  v13 = SlowCase;
LABEL_3:
  *(_DWORD *)v13 = 0;
  v14 = v11[394];
  v15 = *(_DWORD *)(v14 + 8);
  *(_DWORD *)v13 = v14 >> 4;
  *(_DWORD *)(v13 + 4) = v15;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  v16 = (_QWORD *)(v13 + 8);
  __dmb(0xAu);
  if (a3)
  {
    *v16 = a3;
  }
  else
  {
    v19 = *((_QWORD *)a2 + 59);
    *v16 = v19;
    if (!v19)
      goto LABEL_7;
  }
  if (*((_DWORD *)this + 190) >= *(unsigned __int8 *)(v13 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v12, v13);
LABEL_7:
  if (a4)
  {
    *(_QWORD *)(v13 + 16) = a4;
  }
  else
  {
    v17 = *((_QWORD *)a2 + 60);
    *(_QWORD *)(v13 + 16) = v17;
    if (!v17)
      goto LABEL_9;
  }
  if (*((_DWORD *)this + 190) >= *(unsigned __int8 *)(v13 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v12, v13);
LABEL_9:
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return v13;
}

BOOL JSC::CommonSlowPaths::canAccessArgumentIndexQuickly(JSC::CommonSlowPaths *this, JSC::JSObject *a2)
{
  int v2;
  uint64_t v4;

  v2 = *((unsigned __int8 *)this + 5);
  if (v2 == 33)
  {
    if (*((_DWORD *)this + 8) > a2)
    {
      v4 = *((_QWORD *)this + 5);
      if (!v4
        || qword_1ECF4C038
        && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
        && !((v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        return 1;
      }
    }
    return 0;
  }
  return v2 == 34 && JSC::ScopedArguments::isMappedArgument(this, a2);
}

BOOL JSC::ScopedArguments::isMappedArgument(JSC::ScopedArguments *this, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v8;

  if (*((_DWORD *)this + 7) <= a2)
    return 0;
  v2 = *((_QWORD *)this + 5);
  v3 = *(_DWORD *)(v2 + 8);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v4)
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v5) == 0;
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v8 = (v8 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v6 = *(_DWORD *)(v8 + 4 * a2) == -1;
  }
  return !v6;
}

void WTF::AtomStringImpl::lookUp(WTF::AtomStringImpl *this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, WTF::AtomStringImpl **a8@<X8>)
{
  if (this)
  {
    if ((*((_BYTE *)this + 16) & 0x10) != 0)
    {
      *(_DWORD *)this += 2;
      *a8 = this;
    }
    else
    {
      WTF::AtomStringImpl::lookUpSlowCase(this, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  else
  {
    *a8 = 0;
  }
}

void JSC::SymbolTable::get(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t *a9@<X8>)
{
  unsigned __int8 *v12;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD **v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v12 = (unsigned __int8 *)(a1 + 20);
  if (__ldaxr((unsigned __int8 *)(a1 + 20)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 20);
    goto LABEL_4;
  }
  if (__stxr(1u, v12))
    goto LABEL_3;
LABEL_4:
  v14 = *(_QWORD *)(a1 + 8);
  if (!v14)
  {
LABEL_18:
    v22 = 1;
    goto LABEL_12;
  }
  v15 = *(_DWORD *)(v14 - 8);
  v16 = *(_DWORD *)(a2 + 16);
  if ((v16 & 0x20) != 0)
    v16 = *(_DWORD *)(a2 + 32);
  v17 = v15 & (v16 >> 8);
  v18 = *(_QWORD *)(v14 + 16 * v17);
  if (v18 != a2)
  {
    v19 = 1;
    while (v18)
    {
      v17 = ((_DWORD)v17 + v19) & v15;
      v18 = *(_QWORD *)(v14 + 16 * v17);
      ++v19;
      if (v18 == a2)
        goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_11:
  v20 = v14 + 16 * v17;
  v23 = *(_QWORD *)(v20 + 8);
  v21 = (_QWORD **)(v20 + 8);
  v22 = v23;
  *a9 = 1;
  if ((v23 & 1) != 0)
  {
LABEL_12:
    *a9 = v22;
    goto LABEL_13;
  }
  JSC::SymbolTableEntry::copySlow(a9, v21);
LABEL_13:
  v24 = __ldxr(v12);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v12))
LABEL_17:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, a3, a4, a5, a6, a7, a8);
}

unint64_t WTF::Vector<JSC::JITInstanceOfGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 56 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v7 = a3 - v5;
    WTF::Vector<JSC::JITInstanceOfGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v7;
  }
  else
  {
    WTF::Vector<JSC::JITInstanceOfGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::JITInstanceOfGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(_DWORD *)(a1 + 12);
      v8 = 56 * v4;
      v9 = WTF::fastMalloc((WTF *)(56 * v4));
      *(_DWORD *)(a1 + 8) = v8 / 0x38;
      *(_QWORD *)a1 = v9;
      if (v7)
      {
        v17 = v6;
        do
        {
          v18 = *(_OWORD *)v17;
          *(_BYTE *)(v9 + 16) = *(_BYTE *)(v17 + 16);
          *(_OWORD *)v9 = v18;
          *(_DWORD *)(v9 + 20) = *(_DWORD *)(v17 + 20);
          *(_DWORD *)(v9 + 24) = *(_DWORD *)(v17 + 24);
          *(_DWORD *)(v9 + 28) = *(_DWORD *)(v17 + 28);
          *(_QWORD *)(v9 + 32) = *(_QWORD *)(v17 + 32);
          *(_DWORD *)(v9 + 40) = *(_DWORD *)(v17 + 40);
          *(_QWORD *)(v9 + 44) = *(_QWORD *)(v17 + 44);
          v17 += 56;
          v9 += 56;
        }
        while (v17 != v6 + 56 * v7);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void JSC::JIT::compileOpStrictEq<JSC::OpStricteq>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::{lambda(JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSString *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t *v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  int *v35;
  int *v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  _DWORD *v50;
  uint64_t *v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int8x8_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int8x8_t v66;
  _QWORD *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  int *v91;
  int *v92;
  int v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF *v114;
  WTF *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  WTF *v133;
  uint64_t v134;
  _BYTE v135[24];
  WTF *v136;
  uint64_t v137;
  _BYTE v138[24];
  int v139;
  uint64_t v140;
  int v141;

  v12 = *(_QWORD *)a1;
  v136 = (WTF *)v138;
  v137 = 2;
  v133 = (WTF *)v135;
  v134 = 2;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, 6, 2, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branch64(v12, 0, a2, a3, v13, v14, v15, v16, (uint64_t)&v131);
  v22 = v131;
  if (v131 != -1)
  {
    v23 = HIDWORD(v134);
    if (HIDWORD(v134) == (_DWORD)v134)
    {
      v24 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v133, (void *)(HIDWORD(v134) + 1), (unint64_t)&v131, v17, v18, v19, v20, v21);
      v26 = *v24;
      v25 = (uint64_t *)(v24 + 1);
      v22 = v26;
      v23 = HIDWORD(v134);
    }
    else
    {
      v25 = &v132;
    }
    v27 = (char *)v133 + 12 * v23;
    *(_DWORD *)v27 = v22;
    *(_QWORD *)(v27 + 4) = *v25;
    ++HIDWORD(v134);
  }
  JSC::MacroAssemblerARM64::branchTest64(v12, 1, a2, 28, v18, v19, v20, v21, (uint64_t)&v129);
  v33 = v129;
  if (v129 != -1)
  {
    v34 = HIDWORD(v137);
    if (HIDWORD(v137) == (_DWORD)v137)
    {
      v35 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v136, (void *)(HIDWORD(v137) + 1), (unint64_t)&v129, v28, v29, v30, v31, v32);
      v37 = *v35;
      v36 = v35 + 1;
      v33 = v37;
      v34 = HIDWORD(v137);
    }
    else
    {
      v36 = &v130;
    }
    v38 = (char *)v136 + 12 * v34;
    *(_DWORD *)v38 = v33;
    *(_QWORD *)(v38 + 4) = *(_QWORD *)v36;
    ++HIDWORD(v137);
  }
  if (!*(_BYTE *)(v12 + 212))
  {
    __break(0xC471u);
    goto LABEL_55;
  }
  *(_DWORD *)(*(_QWORD *)(v12 + 296) + 208) &= ~*(_DWORD *)(v12 + 320);
  JSC::MacroAssemblerARM64::load8(v12, a2 | 0x500000000, *(char *)(v12 + 304), v28, v29, v30, v31, v32);
  JSC::MacroAssemblerARM64::branch32(v12, 1, 17, 2, v39, v40, v41, v42, (uint64_t)&v127);
  v48 = v127;
  if (v127 != -1)
  {
    v49 = HIDWORD(v137);
    if (HIDWORD(v137) == (_DWORD)v137)
    {
      v50 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v136, (void *)(HIDWORD(v137) + 1), (unint64_t)&v127, v43, v44, v45, v46, v47);
      v52 = *v50;
      v51 = (uint64_t *)(v50 + 1);
      v48 = v52;
      v49 = HIDWORD(v137);
    }
    else
    {
      v51 = &v128;
    }
    v53 = (char *)v136 + 12 * v49;
    *(_DWORD *)v53 = v48;
    *(_QWORD *)(v53 + 4) = *v51;
    ++HIDWORD(v137);
  }
  JSC::MacroAssemblerARM64::load64(v12, a2 | 0x800000000, 5, v43, v44, v45, v46, v47);
  JSC::MacroAssemblerARM64::branchTest64(v12, 1, 5, 1, v54, v55, v56, v57, (uint64_t)&v125, v58);
  v67 = (_QWORD *)(v12 + 648);
  v68 = v126;
  v69 = *(_DWORD *)(v12 + 640);
  v140 = v126;
  v139 = v125;
  v141 = v69;
  v70 = *(unsigned int *)(v12 + 660);
  if ((_DWORD)v70 == *(_DWORD *)(v12 + 656))
  {
    v117 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 648, v70 + 1, (unint64_t)&v139);
    v118 = *(_QWORD *)(v12 + 648) + 16 * *(unsigned int *)(v12 + 660);
    *(_DWORD *)v118 = *(_DWORD *)v117;
    *(_QWORD *)(v118 + 4) = *(_QWORD *)(v117 + 4);
    *(_DWORD *)(v118 + 12) = *(_DWORD *)(v117 + 12);
  }
  else
  {
    v71 = *v67 + 16 * v70;
    *(_DWORD *)v71 = v125;
    *(_QWORD *)(v71 + 4) = v68;
    *(_DWORD *)(v71 + 12) = v69;
  }
  ++*(_DWORD *)(v12 + 660);
  if (!*(_BYTE *)(v12 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987D173CLL);
  }
  *(_DWORD *)(*(_QWORD *)(v12 + 296) + 208) &= ~*(_DWORD *)(v12 + 320);
  v72 = *(_BYTE *)(v12 + 304) & 0x1F | 0xB84100A0;
  v73 = *(_DWORD *)(v12 + 200);
  if (v73 + 4 > *(_DWORD *)(v12 + 192))
  {
    v66 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), v59, v60, v61, v62, v63, v64, v65).n128_u64[0];
    v73 = *(_DWORD *)(v12 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v12 + 56) + v73) = v72;
  *(_DWORD *)(v12 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x10, v12, 0, 17, v62, v63, v64, v65, (uint64_t)&v123, v66);
  v78 = v124;
  v79 = *(_DWORD *)(v12 + 640);
  v140 = v124;
  v139 = v123;
  v141 = v79;
  v80 = *(unsigned int *)(v12 + 660);
  if ((_DWORD)v80 == *(_DWORD *)(v12 + 656))
  {
    v119 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 648, v80 + 1, (unint64_t)&v139);
    v120 = *(_QWORD *)(v12 + 648) + 16 * *(unsigned int *)(v12 + 660);
    *(_DWORD *)v120 = *(_DWORD *)v119;
    *(_QWORD *)(v120 + 4) = *(_QWORD *)(v119 + 4);
    *(_DWORD *)(v120 + 12) = *(_DWORD *)(v119 + 12);
  }
  else
  {
    v81 = *v67 + 16 * v80;
    *(_DWORD *)v81 = v123;
    *(_QWORD *)(v81 + 4) = v78;
    *(_DWORD *)(v81 + 12) = v79;
  }
  ++*(_DWORD *)(v12 + 660);
  if ((*(_QWORD *)(a4 + 8) & 1) != 0)
    v82 = 0;
  else
    v82 = *(_QWORD *)(a4 + 8);
  JSC::MacroAssemblerARM64::branch64(v12, 1, 5, v82, v74, v75, v76, v77, (uint64_t)&v121);
  v89 = v121;
  if (v121 != -1)
  {
    v90 = HIDWORD(v137);
    if (HIDWORD(v137) == (_DWORD)v137)
    {
      v91 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v136, (void *)(HIDWORD(v137) + 1), (unint64_t)&v121, v84, v85, v86, v87, v88);
      v93 = *v91;
      v92 = v91 + 1;
      v89 = v93;
      v90 = HIDWORD(v137);
    }
    else
    {
      v92 = &v122;
    }
    v94 = (char *)v136 + 12 * v90;
    *(_DWORD *)v94 = v89;
    *(_QWORD *)(v94 + 4) = *(_QWORD *)v92;
    ++HIDWORD(v137);
  }
  if (HIDWORD(v134))
  {
    v95 = 0;
    v96 = 0;
    v97 = 12 * HIDWORD(v134);
    do
    {
      if (v96 >= HIDWORD(v134))
      {
        __break(0xC471u);
        JUMPOUT(0x1987D1754);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v133 + v95), v12, v83, v84, v85, v86, v87, v88);
      ++v96;
      v95 += 12;
    }
    while (v97 != v95);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, 7, 2, v84, v85, v86, v87, v88);
  if (HIDWORD(v137))
  {
    v104 = 0;
    v105 = 0;
    v106 = 12 * HIDWORD(v137);
    while (v105 < HIDWORD(v137))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v136 + v104), v12, v98, v99, v100, v101, v102, v103);
      ++v105;
      v104 += 12;
      if (v106 == v104)
        goto LABEL_40;
    }
    __break(0xC471u);
LABEL_55:
    JUMPOUT(0x1987D171CLL);
  }
LABEL_40:
  JSC::MacroAssemblerARM64::store64(v12, 2, ((unint64_t)**(unsigned int **)(a1 + 8) << 35) | 0x1D, v99, v100, v101, v102, v103);
  v114 = v133;
  if (v135 != (_BYTE *)v133 && v133 != 0)
  {
    v133 = 0;
    LODWORD(v134) = 0;
    WTF::fastFree((unint64_t)v114, v107, v108, v109, v110, v111, v112, v113);
  }
  v116 = v136;
  if (v138 != (_BYTE *)v136)
  {
    if (v136)
    {
      v136 = 0;
      LODWORD(v137) = 0;
      WTF::fastFree((unint64_t)v116, v107, v108, v109, v110, v111, v112, v113);
    }
  }
}

void JSC::MacroAssemblerARM64::compare64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  JSC::AssemblerBuffer *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  _QWORD *v36;
  unsigned int *v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;

  v8 = a5;
  v9 = a3;
  v10 = a2;
  if (this)
  {
    if ((unint64_t)this > 0xFFF)
    {
      v16 = -this;
      if ((unint64_t)-this <= 0xFFF)
      {
        v12 = 0;
        v14 = v16 & 0xFFFFFF00;
        v15 = 0x100000000;
        v13 = 1;
      }
      else if ((this & 0xFFF) != 0)
      {
        v12 = 0;
        v13 = 0;
        v15 = 0;
        LOBYTE(v16) = 0;
        v14 = 0;
      }
      else
      {
        v19 = (unint64_t)this >> 24;
        v20 = -(this >> 12);
        v21 = v20 > 0xFFF;
        v22 = v20 & 0xFFFFFF00;
        v23 = 0xC00000000;
        v24 = 1;
        if (v21)
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
        }
        else
        {
          v25 = 0x100000000;
        }
        if (v21)
          LOBYTE(v26) = 0;
        else
          v26 = -(this >> 12);
        if (v21)
          v27 = 0;
        else
          v27 = v22;
        v15 = 0x100000000;
        v28 = v19 == 0;
        if (v19)
          v12 = v23;
        else
          v12 = 0xC00000000;
        if (v28)
          v13 = 0;
        else
          v13 = v24;
        if (v28)
        {
          v16 = this >> 12;
        }
        else
        {
          v15 = v25;
          LOBYTE(v16) = v26;
        }
        if (v28)
          v14 = (this >> 12) & 0xFFFFFF00;
        else
          v14 = v27;
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = this & 0xFFFFFF00;
      v15 = 0x100000000;
      LOBYTE(v16) = this;
    }
    v17 = v16 | v12 | v14;
    v18 = v15 | v13;
    goto LABEL_36;
  }
  v17 = 0;
  v18 = 0x100000000;
  if ((int)a2 <= 0)
  {
    if (!(_DWORD)a2)
      goto LABEL_55;
    goto LABEL_36;
  }
  if ((_DWORD)a2 == 1)
  {
    v10 = 4096;
    goto LABEL_55;
  }
  if ((_DWORD)a2 == 10)
  {
    v10 = 20480;
    goto LABEL_55;
  }
  if ((_DWORD)a2 != 11)
  {
LABEL_36:
    if ((v18 & 0xFF00000000) != 0)
    {
      v29 = (JSC::AssemblerBuffer *)(a1 + 56);
      v30 = *(_DWORD *)(a1 + 200);
      if ((_BYTE)v18)
        v31 = -1325400033;
      else
        v31 = -251658209;
      if ((v17 & 0xFFFFFFFF00000000) == 0xC00000000)
        v31 |= 0x400000u;
      v33 = v31 | ((v17 & 0xFFF) << 10) | (32 * a3);
      if (v30 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v29, a2, a3, this, a5, a6, a7, a8);
        v30 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v30) = v33;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1987D1A5CLL);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, this, *(char *)(a1 + 272), this, a5, a6, a7, a8);
      if (v9 == 31)
      {
        v41 = *(_DWORD *)(a1 + 200);
        if (v41 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, this, a5, a6, a7, a8);
          v41 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v41) = -349150209;
      }
      else
      {
        v32 = *(_DWORD *)(a1 + 200);
        if (v32 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, this, a5, a6, a7, a8);
          v32 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v32) = (32 * (v9 & 0x1F)) | 0xEB10001F;
      }
    }
    v34 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v34;
    v35 = v8 & 0x1F | ((v10 & 0xF) << 12);
    v36 = (_QWORD *)(a1 + 56);
    v37 = (unsigned int *)(a1 + 200);
    if (v34 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, this, a5, a6, a7, a8);
      v34 = *v37;
    }
    goto LABEL_52;
  }
  v10 = 0x4000;
LABEL_55:
  v38 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a3 & 0x1F) << 16) | 0xEA00001F;
  v37 = (unsigned int *)(a1 + 200);
  v39 = *(_DWORD *)(a1 + 200);
  v36 = (_QWORD *)(a1 + 56);
  if (v39 + 4 > *(_DWORD *)(a1 + 192))
  {
    v42 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a3 & 0x1F) << 16) | 0xEA00001F;
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, 0, a5, a6, a7, a8);
    v38 = v42;
    v39 = *v37;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = v38;
  v40 = *(_DWORD *)(a1 + 200);
  v34 = v40 + 4;
  *(_DWORD *)(a1 + 200) = v40 + 4;
  if ((v40 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, this, a5, a6, a7, a8);
    v34 = *v37;
  }
  v35 = v10 | v8 & 0x1F;
LABEL_52:
  *(_DWORD *)(*v36 + v34) = v35 ^ 0x1A9F17E0;
  *v37 += 4;
}

void JSC::JIT::compileOpStrictEq<JSC::OpNstricteq>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::{lambda(JSC::ARM64Registers::RegisterID,JSC::JSValue)#1}::operator()(uint64_t a1, JSC::ARM64LogicalImmediate *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v9 = *(_DWORD **)a1;
  JSC::MacroAssemblerARM64::compare64(*(_QWORD *)a1, 1, 0, (uint64_t)this, 2, a6, a7, a8);
  v17 = v9[50];
  if (v17 + 4 > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), v10, v11, v12, v13, v14, v15, v16);
    v17 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v17) = 285218882;
  v9[50] += 4;
  JSC::MacroAssemblerARM64::store64((uint64_t)v9, 2, ((unint64_t)**(unsigned int **)(a1 + 8) << 35) | 0x1D, v12, v13, v14, v15, v16);
}

void JSC::JIT::compileOpStrictEq<JSC::OpNstricteq>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::{lambda(JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSString *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t *v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  int *v35;
  int *v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  _DWORD *v50;
  uint64_t *v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int8x8_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int8x8_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  int *v90;
  int *v91;
  int v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF *v113;
  WTF *v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  WTF *v128;
  uint64_t v129;
  _BYTE v130[24];
  WTF *v131;
  uint64_t v132;
  _BYTE v133[24];
  int v134;
  uint64_t v135;
  int v136;

  v12 = *(_QWORD *)a1;
  v131 = (WTF *)v133;
  v132 = 2;
  v128 = (WTF *)v130;
  v129 = 2;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, 7, 2, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branch64(v12, 0, a2, a3, v13, v14, v15, v16, (uint64_t)&v126);
  v22 = v126;
  if (v126 != -1)
  {
    v23 = HIDWORD(v129);
    if (HIDWORD(v129) == (_DWORD)v129)
    {
      v24 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v128, (void *)(HIDWORD(v129) + 1), (unint64_t)&v126, v17, v18, v19, v20, v21);
      v26 = *v24;
      v25 = (uint64_t *)(v24 + 1);
      v22 = v26;
      v23 = HIDWORD(v129);
    }
    else
    {
      v25 = &v127;
    }
    v27 = (char *)v128 + 12 * v23;
    *(_DWORD *)v27 = v22;
    *(_QWORD *)(v27 + 4) = *v25;
    ++HIDWORD(v129);
  }
  JSC::MacroAssemblerARM64::branchTest64(v12, 1, a2, 28, v18, v19, v20, v21, (uint64_t)&v124);
  v33 = v124;
  if (v124 != -1)
  {
    v34 = HIDWORD(v132);
    if (HIDWORD(v132) == (_DWORD)v132)
    {
      v35 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v131, (void *)(HIDWORD(v132) + 1), (unint64_t)&v124, v28, v29, v30, v31, v32);
      v37 = *v35;
      v36 = v35 + 1;
      v33 = v37;
      v34 = HIDWORD(v132);
    }
    else
    {
      v36 = &v125;
    }
    v38 = (char *)v131 + 12 * v34;
    *(_DWORD *)v38 = v33;
    *(_QWORD *)(v38 + 4) = *(_QWORD *)v36;
    ++HIDWORD(v132);
  }
  if (!*(_BYTE *)(v12 + 212))
  {
    __break(0xC471u);
    goto LABEL_55;
  }
  *(_DWORD *)(*(_QWORD *)(v12 + 296) + 208) &= ~*(_DWORD *)(v12 + 320);
  JSC::MacroAssemblerARM64::load8(v12, a2 | 0x500000000, *(char *)(v12 + 304), v28, v29, v30, v31, v32);
  JSC::MacroAssemblerARM64::branch32(v12, 1, 17, 2, v39, v40, v41, v42, (uint64_t)&v122);
  v48 = v122;
  if (v122 != -1)
  {
    v49 = HIDWORD(v132);
    if (HIDWORD(v132) == (_DWORD)v132)
    {
      v50 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v131, (void *)(HIDWORD(v132) + 1), (unint64_t)&v122, v43, v44, v45, v46, v47);
      v52 = *v50;
      v51 = (uint64_t *)(v50 + 1);
      v48 = v52;
      v49 = HIDWORD(v132);
    }
    else
    {
      v51 = &v123;
    }
    v53 = (char *)v131 + 12 * v49;
    *(_DWORD *)v53 = v48;
    *(_QWORD *)(v53 + 4) = *v51;
    ++HIDWORD(v132);
  }
  JSC::MacroAssemblerARM64::load64(v12, a2 | 0x800000000, 5, v43, v44, v45, v46, v47);
  JSC::MacroAssemblerARM64::branchTest64(v12, 1, 5, 1, v54, v55, v56, v57, (uint64_t)&v120, v58);
  v67 = v121;
  v68 = *(_DWORD *)(v12 + 640);
  v135 = v121;
  v134 = v120;
  v136 = v68;
  v69 = *(unsigned int *)(v12 + 660);
  if ((_DWORD)v69 == *(_DWORD *)(v12 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v12 + 648, (unint64_t)&v134);
  }
  else
  {
    v70 = *(_QWORD *)(v12 + 648) + 16 * v69;
    *(_DWORD *)v70 = v120;
    *(_QWORD *)(v70 + 4) = v67;
    *(_DWORD *)(v70 + 12) = v68;
    ++*(_DWORD *)(v12 + 660);
  }
  if (!*(_BYTE *)(v12 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987D207CLL);
  }
  *(_DWORD *)(*(_QWORD *)(v12 + 296) + 208) &= ~*(_DWORD *)(v12 + 320);
  v71 = *(_BYTE *)(v12 + 304) & 0x1F | 0xB84100A0;
  v72 = *(_DWORD *)(v12 + 200);
  if (v72 + 4 > *(_DWORD *)(v12 + 192))
  {
    v66 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), v59, v60, v61, v62, v63, v64, v65).n128_u64[0];
    v72 = *(_DWORD *)(v12 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v12 + 56) + v72) = v71;
  *(_DWORD *)(v12 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x10, v12, 0, 17, v62, v63, v64, v65, (uint64_t)&v118, v66);
  v77 = v119;
  v78 = *(_DWORD *)(v12 + 640);
  v135 = v119;
  v134 = v118;
  v136 = v78;
  v79 = *(unsigned int *)(v12 + 660);
  if ((_DWORD)v79 == *(_DWORD *)(v12 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v12 + 648, (unint64_t)&v134);
  }
  else
  {
    v80 = *(_QWORD *)(v12 + 648) + 16 * v79;
    *(_DWORD *)v80 = v118;
    *(_QWORD *)(v80 + 4) = v77;
    *(_DWORD *)(v80 + 12) = v78;
    ++*(_DWORD *)(v12 + 660);
  }
  if ((*(_QWORD *)(a4 + 8) & 1) != 0)
    v81 = 0;
  else
    v81 = *(_QWORD *)(a4 + 8);
  JSC::MacroAssemblerARM64::branch64(v12, 1, 5, v81, v73, v74, v75, v76, (uint64_t)&v116);
  v88 = v116;
  if (v116 != -1)
  {
    v89 = HIDWORD(v132);
    if (HIDWORD(v132) == (_DWORD)v132)
    {
      v90 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v131, (void *)(HIDWORD(v132) + 1), (unint64_t)&v116, v83, v84, v85, v86, v87);
      v92 = *v90;
      v91 = v90 + 1;
      v88 = v92;
      v89 = HIDWORD(v132);
    }
    else
    {
      v91 = &v117;
    }
    v93 = (char *)v131 + 12 * v89;
    *(_DWORD *)v93 = v88;
    *(_QWORD *)(v93 + 4) = *(_QWORD *)v91;
    ++HIDWORD(v132);
  }
  if (HIDWORD(v129))
  {
    v94 = 0;
    v95 = 0;
    v96 = 12 * HIDWORD(v129);
    do
    {
      if (v95 >= HIDWORD(v129))
      {
        __break(0xC471u);
        JUMPOUT(0x1987D2094);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v128 + v94), v12, v82, v83, v84, v85, v86, v87);
      ++v95;
      v94 += 12;
    }
    while (v96 != v94);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, 6, 2, v83, v84, v85, v86, v87);
  if (HIDWORD(v132))
  {
    v103 = 0;
    v104 = 0;
    v105 = 12 * HIDWORD(v132);
    while (v104 < HIDWORD(v132))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v131 + v103), v12, v97, v98, v99, v100, v101, v102);
      ++v104;
      v103 += 12;
      if (v105 == v103)
        goto LABEL_40;
    }
    __break(0xC471u);
LABEL_55:
    JUMPOUT(0x1987D205CLL);
  }
LABEL_40:
  JSC::MacroAssemblerARM64::store64(v12, 2, ((unint64_t)**(unsigned int **)(a1 + 8) << 35) | 0x1D, v98, v99, v100, v101, v102);
  v113 = v128;
  if (v130 != (_BYTE *)v128 && v128 != 0)
  {
    v128 = 0;
    LODWORD(v129) = 0;
    WTF::fastFree((unint64_t)v113, v106, v107, v108, v109, v110, v111, v112);
  }
  v115 = v131;
  if (v133 != (_BYTE *)v131)
  {
    if (v131)
    {
      v131 = 0;
      LODWORD(v132) = 0;
      WTF::fastFree((unint64_t)v115, v106, v107, v108, v109, v110, v111, v112);
    }
  }
}

void JSC::JIT::compileOpStrictEqJump<JSC::OpJstricteq>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::{lambda(JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSString *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int *v29;
  int *v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  _DWORD *v44;
  uint64_t *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int8x8_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int8x8_t v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  WTF *v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  WTF *v113;
  uint64_t v114;
  _BYTE v115[24];
  int v116;
  uint64_t v117;
  int v118;

  v11 = *(_QWORD *)a1;
  v113 = (WTF *)v115;
  v114 = 2;
  JSC::MacroAssemblerARM64::branch64(v11, 0, a2, a3, a5, a6, a7, a8, (uint64_t)&v111);
  v16 = (_QWORD *)(v11 + 624);
  v17 = **(_DWORD **)(a1 + 8) + (*(_DWORD *)(v11 + 640) >> 2);
  v116 = v111;
  v117 = v112;
  v118 = v17;
  v18 = *(unsigned int *)(v11 + 636);
  if ((_DWORD)v18 == *(_DWORD *)(v11 + 632))
  {
    v93 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11 + 624, v18 + 1, (unint64_t)&v116);
    v94 = *(_QWORD *)(v11 + 624) + 16 * *(unsigned int *)(v11 + 636);
    *(_DWORD *)v94 = *(_DWORD *)v93;
    *(_QWORD *)(v94 + 4) = *(_QWORD *)(v93 + 4);
    v21 = (int *)(v94 + 12);
    v19 = (int *)(v93 + 12);
  }
  else
  {
    v19 = &v118;
    v20 = *v16 + 16 * v18;
    *(_DWORD *)v20 = v111;
    *(_QWORD *)(v20 + 4) = v117;
    v21 = (int *)(v20 + 12);
  }
  *v21 = *v19;
  ++*(_DWORD *)(v11 + 636);
  JSC::MacroAssemblerARM64::branchTest64(v11, 1, a2, 28, v12, v13, v14, v15, (uint64_t)&v109);
  v27 = v109;
  if (v109 != -1)
  {
    v28 = HIDWORD(v114);
    if (HIDWORD(v114) == (_DWORD)v114)
    {
      v29 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v113, (void *)(HIDWORD(v114) + 1), (unint64_t)&v109, v22, v23, v24, v25, v26);
      v31 = *v29;
      v30 = v29 + 1;
      v27 = v31;
      v28 = HIDWORD(v114);
    }
    else
    {
      v30 = &v110;
    }
    v32 = (char *)v113 + 12 * v28;
    *(_DWORD *)v32 = v27;
    *(_QWORD *)(v32 + 4) = *(_QWORD *)v30;
    ++HIDWORD(v114);
  }
  if (!*(_BYTE *)(v11 + 212))
  {
    __break(0xC471u);
    goto LABEL_43;
  }
  *(_DWORD *)(*(_QWORD *)(v11 + 296) + 208) &= ~*(_DWORD *)(v11 + 320);
  JSC::MacroAssemblerARM64::load8(v11, a2 | 0x500000000, *(char *)(v11 + 304), v22, v23, v24, v25, v26);
  JSC::MacroAssemblerARM64::branch32(v11, 1, 17, 2, v33, v34, v35, v36, (uint64_t)&v107);
  v42 = v107;
  if (v107 != -1)
  {
    v43 = HIDWORD(v114);
    if (HIDWORD(v114) == (_DWORD)v114)
    {
      v44 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v113, (void *)(HIDWORD(v114) + 1), (unint64_t)&v107, v37, v38, v39, v40, v41);
      v46 = *v44;
      v45 = (uint64_t *)(v44 + 1);
      v42 = v46;
      v43 = HIDWORD(v114);
    }
    else
    {
      v45 = &v108;
    }
    v47 = (char *)v113 + 12 * v43;
    *(_DWORD *)v47 = v42;
    *(_QWORD *)(v47 + 4) = *v45;
    ++HIDWORD(v114);
  }
  JSC::MacroAssemblerARM64::load64(v11, a2 | 0x800000000, 2, v37, v38, v39, v40, v41);
  JSC::MacroAssemblerARM64::branchTest64(v11, 1, 2, 1, v48, v49, v50, v51, (uint64_t)&v105, v52);
  v61 = (_QWORD *)(v11 + 648);
  v62 = v106;
  v63 = *(_DWORD *)(v11 + 640);
  v116 = v105;
  v117 = v106;
  v118 = v63;
  v64 = *(unsigned int *)(v11 + 660);
  if ((_DWORD)v64 == *(_DWORD *)(v11 + 656))
  {
    v97 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11 + 648, v64 + 1, (unint64_t)&v116);
    v98 = *(_QWORD *)(v11 + 648) + 16 * *(unsigned int *)(v11 + 660);
    *(_DWORD *)v98 = *(_DWORD *)v97;
    *(_QWORD *)(v98 + 4) = *(_QWORD *)(v97 + 4);
    *(_DWORD *)(v98 + 12) = *(_DWORD *)(v97 + 12);
  }
  else
  {
    v65 = *v61 + 16 * v64;
    *(_DWORD *)v65 = v105;
    *(_QWORD *)(v65 + 4) = v62;
    *(_DWORD *)(v65 + 12) = v63;
  }
  ++*(_DWORD *)(v11 + 660);
  if (!*(_BYTE *)(v11 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987D25C0);
  }
  *(_DWORD *)(*(_QWORD *)(v11 + 296) + 208) &= ~*(_DWORD *)(v11 + 320);
  v66 = *(_BYTE *)(v11 + 304) & 0x1F | 0xB8410040;
  v67 = *(_DWORD *)(v11 + 200);
  if (v67 + 4 > *(_DWORD *)(v11 + 192))
  {
    v60 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 56), v53, v54, v55, v56, v57, v58, v59).n128_u64[0];
    v67 = *(_DWORD *)(v11 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v11 + 56) + v67) = v66;
  *(_DWORD *)(v11 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x10, v11, 0, 17, v56, v57, v58, v59, (uint64_t)&v103, v60);
  v72 = v104;
  v73 = *(_DWORD *)(v11 + 640);
  v116 = v103;
  v117 = v104;
  v118 = v73;
  v74 = *(unsigned int *)(v11 + 660);
  if ((_DWORD)v74 == *(_DWORD *)(v11 + 656))
  {
    v99 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11 + 648, v74 + 1, (unint64_t)&v116);
    v100 = *(_QWORD *)(v11 + 648) + 16 * *(unsigned int *)(v11 + 660);
    *(_DWORD *)v100 = *(_DWORD *)v99;
    *(_QWORD *)(v100 + 4) = *(_QWORD *)(v99 + 4);
    *(_DWORD *)(v100 + 12) = *(_DWORD *)(v99 + 12);
  }
  else
  {
    v75 = *v61 + 16 * v74;
    *(_DWORD *)v75 = v103;
    *(_QWORD *)(v75 + 4) = v72;
    *(_DWORD *)(v75 + 12) = v73;
  }
  ++*(_DWORD *)(v11 + 660);
  if ((*(_QWORD *)(a4 + 8) & 1) != 0)
    v76 = 0;
  else
    v76 = *(_QWORD *)(a4 + 8);
  JSC::MacroAssemblerARM64::branch64(v11, 0, 2, v76, v68, v69, v70, v71, (uint64_t)&v101);
  v84 = v102;
  v85 = **(_DWORD **)(a1 + 8) + (*(_DWORD *)(v11 + 640) >> 2);
  v116 = v101;
  v117 = v102;
  v118 = v85;
  v86 = *(unsigned int *)(v11 + 636);
  if ((_DWORD)v86 == *(_DWORD *)(v11 + 632))
  {
    v95 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11 + 624, v86 + 1, (unint64_t)&v116);
    v96 = *(_QWORD *)(v11 + 624) + 16 * *(unsigned int *)(v11 + 636);
    *(_DWORD *)v96 = *(_DWORD *)v95;
    *(_QWORD *)(v96 + 4) = *(_QWORD *)(v95 + 4);
    *(_DWORD *)(v96 + 12) = *(_DWORD *)(v95 + 12);
  }
  else
  {
    v87 = *v16 + 16 * v86;
    *(_DWORD *)v87 = v101;
    *(_QWORD *)(v87 + 4) = v84;
    *(_DWORD *)(v87 + 12) = v85;
  }
  ++*(_DWORD *)(v11 + 636);
  if (HIDWORD(v114))
  {
    v88 = 0;
    v89 = 0;
    v90 = 12 * HIDWORD(v114);
    while (v89 < HIDWORD(v114))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v113 + v88), v11, v78, v79, v80, v81, v82, v83);
      ++v89;
      v88 += 12;
      if (v90 == v88)
        goto LABEL_30;
    }
    __break(0xC471u);
LABEL_43:
    JUMPOUT(0x1987D25A0);
  }
LABEL_30:
  v91 = v113;
  if (v115 != (_BYTE *)v113 && v113 != 0)
  {
    v113 = 0;
    LODWORD(v114) = 0;
    WTF::fastFree((unint64_t)v91, v77, v78, v79, v80, v81, v82, v83);
  }
}

void JSC::JIT::compileOpStrictEqJump<JSC::OpJnstricteq>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::{lambda(JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSString *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t *v20;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int8x8_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int8x8_t v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  WTF *v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  WTF *v113;
  uint64_t v114;
  _BYTE v115[24];
  int v116;
  uint64_t v117;
  int v118;

  v11 = *(_QWORD *)a1;
  v113 = (WTF *)v115;
  v114 = 2;
  JSC::MacroAssemblerARM64::branch64(v11, 0, a2, a3, a5, a6, a7, a8, (uint64_t)&v111);
  v17 = v111;
  if (v111 != -1)
  {
    v18 = HIDWORD(v114);
    if (HIDWORD(v114) == (_DWORD)v114)
    {
      v19 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v113, (void *)(HIDWORD(v114) + 1), (unint64_t)&v111, v12, v13, v14, v15, v16);
      v21 = *v19;
      v20 = (uint64_t *)(v19 + 1);
      v17 = v21;
      v18 = HIDWORD(v114);
    }
    else
    {
      v20 = &v112;
    }
    v22 = (char *)v113 + 12 * v18;
    *(_DWORD *)v22 = v17;
    *(_QWORD *)(v22 + 4) = *v20;
    ++HIDWORD(v114);
  }
  JSC::MacroAssemblerARM64::branchTest64(v11, 1, a2, 28, v13, v14, v15, v16, (uint64_t)&v109);
  v28 = (_QWORD *)(v11 + 624);
  v29 = v110;
  v30 = **(_DWORD **)(a1 + 8) + (*(_DWORD *)(v11 + 640) >> 2);
  v116 = v109;
  v117 = v110;
  v118 = v30;
  v31 = *(unsigned int *)(v11 + 636);
  if ((_DWORD)v31 == *(_DWORD *)(v11 + 632))
  {
    v91 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11 + 624, v31 + 1, (unint64_t)&v116);
    v92 = *(_QWORD *)(v11 + 624) + 16 * *(unsigned int *)(v11 + 636);
    *(_DWORD *)v92 = *(_DWORD *)v91;
    *(_QWORD *)(v92 + 4) = *(_QWORD *)(v91 + 4);
    *(_DWORD *)(v92 + 12) = *(_DWORD *)(v91 + 12);
  }
  else
  {
    v32 = *v28 + 16 * v31;
    *(_DWORD *)v32 = v109;
    *(_QWORD *)(v32 + 4) = v29;
    *(_DWORD *)(v32 + 12) = v30;
  }
  ++*(_DWORD *)(v11 + 636);
  if (!*(_BYTE *)(v11 + 212))
  {
    __break(0xC471u);
    goto LABEL_41;
  }
  *(_DWORD *)(*(_QWORD *)(v11 + 296) + 208) &= ~*(_DWORD *)(v11 + 320);
  JSC::MacroAssemblerARM64::load8(v11, a2 | 0x500000000, *(char *)(v11 + 304), v23, v24, v25, v26, v27);
  JSC::MacroAssemblerARM64::branch32(v11, 1, 17, 2, v33, v34, v35, v36, (uint64_t)&v107);
  v42 = v108;
  v43 = **(_DWORD **)(a1 + 8) + (*(_DWORD *)(v11 + 640) >> 2);
  v116 = v107;
  v117 = v108;
  v118 = v43;
  v44 = *(unsigned int *)(v11 + 636);
  if ((_DWORD)v44 == *(_DWORD *)(v11 + 632))
  {
    v93 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11 + 624, v44 + 1, (unint64_t)&v116);
    v94 = *(_QWORD *)(v11 + 624) + 16 * *(unsigned int *)(v11 + 636);
    *(_DWORD *)v94 = *(_DWORD *)v93;
    *(_QWORD *)(v94 + 4) = *(_QWORD *)(v93 + 4);
    *(_DWORD *)(v94 + 12) = *(_DWORD *)(v93 + 12);
  }
  else
  {
    v45 = *v28 + 16 * v44;
    *(_DWORD *)v45 = v107;
    *(_QWORD *)(v45 + 4) = v42;
    *(_DWORD *)(v45 + 12) = v43;
  }
  ++*(_DWORD *)(v11 + 636);
  JSC::MacroAssemblerARM64::load64(v11, a2 | 0x800000000, 2, v37, v38, v39, v40, v41);
  JSC::MacroAssemblerARM64::branchTest64(v11, 1, 2, 1, v46, v47, v48, v49, (uint64_t)&v105, v50);
  v59 = (_QWORD *)(v11 + 648);
  v60 = v106;
  v61 = *(_DWORD *)(v11 + 640);
  v116 = v105;
  v117 = v106;
  v118 = v61;
  v62 = *(unsigned int *)(v11 + 660);
  if ((_DWORD)v62 == *(_DWORD *)(v11 + 656))
  {
    v97 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11 + 648, v62 + 1, (unint64_t)&v116);
    v98 = *(_QWORD *)(v11 + 648) + 16 * *(unsigned int *)(v11 + 660);
    *(_DWORD *)v98 = *(_DWORD *)v97;
    *(_QWORD *)(v98 + 4) = *(_QWORD *)(v97 + 4);
    *(_DWORD *)(v98 + 12) = *(_DWORD *)(v97 + 12);
  }
  else
  {
    v63 = *v59 + 16 * v62;
    *(_DWORD *)v63 = v105;
    *(_QWORD *)(v63 + 4) = v60;
    *(_DWORD *)(v63 + 12) = v61;
  }
  ++*(_DWORD *)(v11 + 660);
  if (!*(_BYTE *)(v11 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987D2B14);
  }
  *(_DWORD *)(*(_QWORD *)(v11 + 296) + 208) &= ~*(_DWORD *)(v11 + 320);
  v64 = *(_BYTE *)(v11 + 304) & 0x1F | 0xB8410040;
  v65 = *(_DWORD *)(v11 + 200);
  if (v65 + 4 > *(_DWORD *)(v11 + 192))
  {
    v58 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 56), v51, v52, v53, v54, v55, v56, v57).n128_u64[0];
    v65 = *(_DWORD *)(v11 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v11 + 56) + v65) = v64;
  *(_DWORD *)(v11 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x10, v11, 0, 17, v54, v55, v56, v57, (uint64_t)&v103, v58);
  v70 = v104;
  v71 = *(_DWORD *)(v11 + 640);
  v116 = v103;
  v117 = v104;
  v118 = v71;
  v72 = *(unsigned int *)(v11 + 660);
  if ((_DWORD)v72 == *(_DWORD *)(v11 + 656))
  {
    v99 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11 + 648, v72 + 1, (unint64_t)&v116);
    v100 = *(_QWORD *)(v11 + 648) + 16 * *(unsigned int *)(v11 + 660);
    *(_DWORD *)v100 = *(_DWORD *)v99;
    *(_QWORD *)(v100 + 4) = *(_QWORD *)(v99 + 4);
    *(_DWORD *)(v100 + 12) = *(_DWORD *)(v99 + 12);
  }
  else
  {
    v73 = *v59 + 16 * v72;
    *(_DWORD *)v73 = v103;
    *(_QWORD *)(v73 + 4) = v70;
    *(_DWORD *)(v73 + 12) = v71;
  }
  ++*(_DWORD *)(v11 + 660);
  if ((*(_QWORD *)(a4 + 8) & 1) != 0)
    v74 = 0;
  else
    v74 = *(_QWORD *)(a4 + 8);
  JSC::MacroAssemblerARM64::branch64(v11, 1, 2, v74, v66, v67, v68, v69, (uint64_t)&v101);
  v82 = v102;
  v83 = **(_DWORD **)(a1 + 8) + (*(_DWORD *)(v11 + 640) >> 2);
  v116 = v101;
  v117 = v102;
  v118 = v83;
  v84 = *(unsigned int *)(v11 + 636);
  if ((_DWORD)v84 == *(_DWORD *)(v11 + 632))
  {
    v95 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11 + 624, v84 + 1, (unint64_t)&v116);
    v96 = *(_QWORD *)(v11 + 624) + 16 * *(unsigned int *)(v11 + 636);
    *(_DWORD *)v96 = *(_DWORD *)v95;
    *(_QWORD *)(v96 + 4) = *(_QWORD *)(v95 + 4);
    *(_DWORD *)(v96 + 12) = *(_DWORD *)(v95 + 12);
  }
  else
  {
    v85 = *v28 + 16 * v84;
    *(_DWORD *)v85 = v101;
    *(_QWORD *)(v85 + 4) = v82;
    *(_DWORD *)(v85 + 12) = v83;
  }
  ++*(_DWORD *)(v11 + 636);
  if (HIDWORD(v114))
  {
    v86 = 0;
    v87 = 0;
    v88 = 12 * HIDWORD(v114);
    while (v87 < HIDWORD(v114))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v113 + v86), v11, v76, v77, v78, v79, v80, v81);
      ++v87;
      v86 += 12;
      if (v88 == v86)
        goto LABEL_27;
    }
    __break(0xC471u);
LABEL_41:
    JUMPOUT(0x1987D2AF4);
  }
LABEL_27:
  v89 = v113;
  if (v115 != (_BYTE *)v113 && v113 != 0)
  {
    v113 = 0;
    LODWORD(v114) = 0;
    WTF::fastFree((unint64_t)v89, v75, v76, v77, v78, v79, v80, v81);
  }
}

__n128 WTF::Vector<JSC::SwitchRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SwitchRecord>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<JSC::SwitchRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

unint64_t WTF::Vector<JSC::SwitchRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * *(unsigned int *)(a1 + 12) > a3)
  {
    WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v3 - v5;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8);
    v7 = v6 + (v6 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 <= a2)
      v9 = a2;
    else
      v9 = v8;
    if (v9 > v6)
    {
      if (v9 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1987D2C68);
      }
      v10 = *(unsigned int *)(a1 + 12);
      v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
      *(_DWORD *)(a1 + 8) = v9;
      *(_QWORD *)a1 = v11;
      if ((_DWORD)v10)
      {
        v20 = 16 * v10;
        v21 = (__int128 *)v5;
        do
        {
          v22 = *v21++;
          *v11++ = v22;
          v20 -= 16;
        }
        while (v20);
      }
      if (v5)
      {
        if (*(_QWORD *)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
      }
    }
  }
  return v3;
}

void JSC::JIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::ARM64LogicalImmediate *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53[3];

  v12 = -1207811152;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)this, 0, a4, (uint64_t)this, a6, a7, a8);
  v20 = *(unsigned int *)(a2 + 640);
  if (v20 >= 4)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      return;
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)(v20 >> 2), a2 + 264, v15, v16, v17, v18, v19);
  }
  else
  {
    v12 = -1207811137;
  }
  v21 = *(_DWORD *)(a2 + 200);
  if (v21 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v13, v14, v15, v16, v17, v18, v19);
    v21 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v21) = v12;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::JIT::appendCall(a2, a3, v14, v15, v16, v17, v18, v19, a1);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, 1, 0xFFFFFFFFLL, v22, v23, v24, v25, (uint64_t)v53, v26);
  v32 = *(_QWORD *)(*(_QWORD *)(a2 + 352) + 90440);
  v33 = *(_QWORD *)(v32 + 8);
  v34 = *(unsigned int **)(v32 + 16);
  if (v34)
  {
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v53, v33, a2, v27, v28, v29, v30, v31);
    do
    {
      v43 = __ldaxr(v34);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v34));
    if (!v44)
    {
      atomic_store(1u, v34);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v34, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v53, v33, a2, v27, v28, v29, v30, v31);
  }
  JSC::MacroAssemblerARM64::store64(a2, 0, (a4 << 35) | 0x1D, v38, v39, v40, v41, v42);
}

uint64_t WTF::dataLog<char [26],JSC::CodeBlock,char [49],char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Choosing not to optimize ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", " yet, because the threshold hasn't been reached.");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [26],JSC::CodeBlock,char [47],char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Choosing not to optimize ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", " yet, because m_shouldAlwaysBeInlined == true.");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [17],JSC::CodeBlock *,char [5],JSC::CodeBlock *,char [2],char [2]>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Considering OSR ");
  v7 = *a1;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  if (v7)
    JSC::CodeBlock::dumpAssumingJITType(v7);
  else
    WTF::PrintStream::printf(v8, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", " -> ");
  v9 = *a2;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  if (v9)
    JSC::CodeBlock::dumpAssumingJITType(v9);
  else
    WTF::PrintStream::printf(v10, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", ".");
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [30],JSC::CodeBlock *,char [2],JSC::CodeBlock *,char [13],char [2]>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Triggering reoptimization of ");
  v7 = *a1;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  if (v7)
    JSC::CodeBlock::dumpAssumingJITType(v7);
  else
    WTF::PrintStream::printf(v8, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", "(");
  v9 = *a2;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  if (v9)
    JSC::CodeBlock::dumpAssumingJITType(v9);
  else
    WTF::PrintStream::printf(v10, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", ") (in loop).");
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [27],JSC::CodeBlock,char [36],char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Delaying optimization for ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", " because of insufficient profiling.");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [16],JSC::CodeBlock *,char [5],JSC::CodeBlock *,char [2]>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Performing OSR ");
  v7 = *a1;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  if (v7)
    JSC::CodeBlock::dumpAssumingJITType(v7);
  else
    WTF::PrintStream::printf(v8, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", " -> ");
  v9 = *a2;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  if (v9)
    JSC::CodeBlock::dumpAssumingJITType(v9);
  else
    WTF::PrintStream::printf(v10, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [12],JSC::CodeBlock *,char [5],JSC::CodeBlock *,char [42],unsigned int,char [2]>(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  char v14;
  char **v15;
  char *v16;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "Optimizing ");
  v9 = *a1;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  if (v9)
    JSC::CodeBlock::dumpAssumingJITType(v9);
  else
    WTF::PrintStream::printf(v10, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", " -> ");
  v11 = *a2;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  if (v11)
    JSC::CodeBlock::dumpAssumingJITType(v11);
  else
    WTF::PrintStream::printf(v12, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", " succeeded, OSR failed, after a delay of ");
  WTF::PrintStream::printf(v8, "%u", *a3);
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [30],JSC::CodeBlock *,char [5],JSC::CodeBlock *,char [19],char [2]>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Triggering reoptimization of ");
  v7 = *a1;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  if (v7)
    JSC::CodeBlock::dumpAssumingJITType(v7);
  else
    WTF::PrintStream::printf(v8, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", " -> ");
  v9 = *a2;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  if (v9)
    JSC::CodeBlock::dumpAssumingJITType(v9);
  else
    WTF::PrintStream::printf(v10, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", " (after OSR fail).");
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void JSC::CommonSlowPaths::tryCacheGetFromScopeGlobal(uint64_t a1, unint64_t a2, JSC::VM *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  __int16 v21;
  unsigned __int8 *v22;
  int v24;
  unsigned __int8 *v25;
  int v27;
  int v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t *v43;

  v13 = *(_DWORD *)(a4 + 28);
  v14 = *(_QWORD *)(a2 + 136);
  v15 = *(unsigned __int16 *)(v14 + 52);
  if (!*(_WORD *)(v14 + 52))
    v15 = *(_DWORD *)(v14 + 200);
  v16 = (v14 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (int *)(v16 + 24 * v13);
  v18 = *v17 & 0x3FFLL;
  if ((*v17 & 0x3FF) == 0)
    goto LABEL_4;
  if ((v18 - 10) < 2)
  {
    if (*(_BYTE *)(a5 + 5) != 51)
      goto LABEL_4;
    if ((_DWORD)v18 == 10)
    {
      LODWORD(v18) = 0;
    }
    else
    {
      if ((_DWORD)v18 != 11)
      {
        __break(0xC471u);
        goto LABEL_71;
      }
      LODWORD(v18) = 6;
    }
    v25 = (unsigned __int8 *)(a2 + 16);
    if (__ldaxr((unsigned __int8 *)(a2 + 16)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v25))
    {
LABEL_35:
      *v17 = *v17 & 0x7FFFFC00 | v18;
      v27 = __ldxr(v25);
      if (v27 == 1)
      {
        if (!__stlxr(0, v25))
        {
LABEL_5:
          if ((_DWORD)v18)
            v19 = (_DWORD)v18 == 6;
          else
            v19 = 1;
          if (!v19)
            return;
          if (*(_BYTE *)(a6 + 49) != 1)
            return;
          if (*(_BYTE *)(a6 + 48) != 1)
            return;
          if (a5 != a1)
            return;
          if (*(_QWORD *)(a6 + 32) != a5)
            return;
          v20 = 16 * (*(_DWORD *)a5 & 0xFFFFFFFE);
          if ((*(_DWORD *)(v20 + 16) & 3) == 2)
            return;
          v21 = *(_WORD *)(v20 + 12);
          if ((v21 & 8) != 0 || (v21 & 0x10) != 0 && (v21 & 0x20) == 0)
            return;
          v22 = (unsigned __int8 *)(a2 + 16);
          if (__ldaxr((unsigned __int8 *)(a2 + 16)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v22))
          {
LABEL_24:
            *(_QWORD *)(v16 + 24 * v13 + 8) = v20;
            if (*((_DWORD *)a3 + 190) >= *(unsigned __int8 *)(a2 + 7))
              JSC::Heap::writeBarrierSlowPath((uint64_t)a3 + 192, a2);
            *(_QWORD *)(v16 + 24 * v13 + 16) = *(int *)(a6 + 20);
            v24 = __ldxr(v22);
            if (v24 == 1)
            {
              if (!__stlxr(0, v22))
                goto LABEL_40;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a2 + 16), 0, (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8);
LABEL_40:
            JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)v20, a3, (JSC::Structure *)*(unsigned int *)(a6 + 20), a4, a5, a6, (uint64_t)a7, a8);
            return;
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 16);
          goto LABEL_24;
        }
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a2 + 16), 0, (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8);
      goto LABEL_5;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 16);
    goto LABEL_35;
  }
  if ((_DWORD)v18 != 6)
    return;
LABEL_4:
  if (*(_BYTE *)(a5 + 5) != 52)
    goto LABEL_5;
  if (v18 >= 0xC)
  {
    __break(0xC471u);
    JUMPOUT(0x1987D3DC4);
  }
  v28 = dword_199156FE0[v18];
  JSC::SymbolTable::get(*(_QWORD *)(a5 + 24), *a7, (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, (unint64_t *)&v43);
  v36 = (unsigned __int8 *)(a2 + 16);
  if (__ldaxr((unsigned __int8 *)(a2 + 16)))
  {
    __clrex();
LABEL_52:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 16);
    goto LABEL_53;
  }
  if (__stxr(1u, v36))
    goto LABEL_52;
LABEL_53:
  *v17 = *v17 & 0x7FFFFC00 | v28;
  v38 = v43;
  if ((v43 & 1) != 0)
  {
    v39 = 0;
    v38 = (unint64_t *)&v43;
  }
  else
  {
    v39 = v43[1];
  }
  *(_QWORD *)(v16 + 24 * v13 + 8) = v39;
  v40 = *v38;
  v41 = (v40 >> 10) & 0xFFFFFFF;
  if (v41 >= *(unsigned int *)(a5 + 52))
  {
    __break(0xC471u);
LABEL_71:
    JUMPOUT(0x1987D3D88);
  }
  *(_QWORD *)(v16 + 24 * v13 + 16) = *(_QWORD *)(*(_QWORD *)(a5 + 40) + 8 * v41) + 8 * ((v40 >> 6) & 0xF);
  v42 = __ldxr(v36);
  if (v42 != 1)
  {
    __clrex();
    goto LABEL_62;
  }
  if (__stlxr(0, v36))
LABEL_62:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a2 + 16), 0, v30, v31, v32, v33, v34, v35);
  if ((v43 & 1) == 0)
    JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v43, v29, v30, v31, v32, v33, v34, v35);
}

uint64_t JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26432>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  int i;
  unsigned int v12;
  char v13;
  JSC::AssemblerBuffer *v15;
  unsigned int v16[2];
  char v17;
  __int16 v18;
  char v19;

  v10 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      v15 = v10;
      JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
      v10 = v15;
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v12 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v13 = 69;
  else
    v13 = 65;
  v16[0] = i;
  v16[1] = 0;
  v17 = v13;
  v18 = 15;
  v19 = -1;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26432>(v16, a2, a1, a4, a5, a6, a7, a8);
}

uint64_t JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::generateOutOfLine(JSC::CodeBlock *,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>)::{lambda(void)#1}::operator()(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  pthread_key_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  pthread_key_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  unsigned int v28;
  void **p_start;
  uint64_t v30;
  size_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int **v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  BOOL v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int **v81;
  JSC::ExecutableMemoryHandle *v82;
  unsigned int **v83;
  JSC::ExecutableMemoryHandle *v84;
  char v85;
  unsigned int ***v86;
  unsigned int *v87;
  size_t len;
  uint64_t v89;
  WTF *v90;
  _BYTE v91[128];
  unsigned int v92;
  int v93;
  char v94;
  unsigned int v95;
  void *start;
  __int128 v97;
  __int128 v98;
  _BYTE v99[32];
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  WTF *v103;
  _BYTE v104[128];
  unsigned int v105;
  unsigned int v106;
  int v107;
  char v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _BYTE *v112;
  char v113;
  uint64_t v114;
  int v115;
  _BYTE *v116;
  char v117;
  uint64_t v118;
  int v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v1 = a1[1];
  v2 = **a1;
  v99[0] = 0;
  v99[24] = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0x8000000080000000;
  v103 = (WTF *)v104;
  v105 = 128;
  v3 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v3 != -1)
  {
    v87 = (unsigned int *)&v86;
    v83 = &v87;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v83, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v4 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v12 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v12)
  {
    v12 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v12, v4);
  }
  v13 = *(WTF **)v12;
  if (*(_QWORD *)v12 != v12 + 8)
  {
    v14 = *(_DWORD *)(v12 + 136);
    if (v105 < v14)
    {
      if (v103 && v103 != (WTF *)v104)
      {
        WTF::fastFree((unint64_t)v103, v5, v6, v7, v8, v9, v10, v11);
        v13 = *(WTF **)v12;
        v14 = *(_DWORD *)(v12 + 136);
      }
      v103 = v13;
      v105 = v14;
      *(_QWORD *)v12 = v12 + 8;
      *(_DWORD *)(v12 + 136) = 128;
    }
  }
  v15 = 0;
  v108 = 1;
  v106 = 0;
  v107 = 0;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v113 = 16;
  v115 = 0x10000;
  v112 = v99;
  v114 = 0;
  v116 = v99;
  v117 = 17;
  v118 = 0;
  v119 = 0x20000;
  v120 = 0;
  v121 = v2;
  if (v2)
    v15 = JSC::CodeBlock::baselineAlternative(v2);
  v122 = v15;
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)49594>((uint64_t)v99, v1[1], v6, v7, v8, v9, v10, v11);
  v16 = (void *)v1[3];
  if (v1[4] - (uint64_t)v16 < (unint64_t)v106)
  {
    __break(0xC471u);
    JUMPOUT(0x1987D4344);
  }
  v87 = 0;
  len = v106;
  v89 = 0;
  v90 = (WTF *)v91;
  v92 = 128;
  v17 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v17 != -1)
  {
    v83 = (unsigned int **)&v85;
    v86 = &v83;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v86, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v18 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v26 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v26)
  {
    v26 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v26, v18);
  }
  v27 = *(WTF **)v26;
  if (*(_QWORD *)v26 != v26 + 8)
  {
    v28 = *(_DWORD *)(v26 + 136);
    if (v92 < v28)
    {
      if (v90 && v90 != (WTF *)v91)
      {
        WTF::fastFree((unint64_t)v90, v19, v20, v21, v22, v23, v24, v25);
        v27 = *(WTF **)v26;
        v28 = *(_DWORD *)(v26 + 136);
      }
      v90 = v27;
      v92 = v28;
      *(_QWORD *)v26 = v26 + 8;
      *(_DWORD *)(v26 + 136) = 128;
    }
  }
  v94 = 1;
  v95 = 6;
  start = v16;
  v97 = 0u;
  v98 = 0u;
  v93 = 1;
  JSC::LinkBuffer::linkCode((uint64_t)&v87, (uint64_t)v99, 1, v21, v22, v23, v24, v25);
  if (!BYTE1(v93))
  {
    __break(0xC471u);
    JUMPOUT(0x1987D4364);
  }
  if (byte_1ECF4C288)
  {
    v62 = 1;
LABEL_53:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)0>(&v81, (uint64_t)&v87, v62);
    v45 = (unsigned int *)v82;
    v82 = 0;
    if (!v45)
      goto LABEL_42;
    do
    {
      v63 = __ldaxr(v45);
      v47 = --v63 == 0;
    }
    while (__stlxr(v63, v45));
    goto LABEL_40;
  }
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v62 = HIBYTE(word_1ECF4C286) != 0;
    goto LABEL_53;
  }
  if (HIDWORD(v97))
  {
    v56 = (uint64_t *)v97;
    v57 = 8 * HIDWORD(v97);
    do
    {
      v58 = *v56++;
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v58 + 16))(v58, &v87);
      v57 -= 8;
    }
    while (v57);
  }
  p_start = &start;
  if (HIDWORD(v98))
  {
    v59 = (uint64_t *)v98;
    v60 = 8 * HIDWORD(v98);
    do
    {
      v61 = *v59++;
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v61 + 16))(v61, &v87);
      v60 -= 8;
    }
    while (v60);
  }
  v30 = v95;
  v31 = len;
  *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v95 / 2] += len;
  ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v30);
  sys_icache_invalidate(start, v31);
  v39 = v87;
  if (v87)
  {
    do
      v80 = __ldaxr(v39);
    while (__stlxr(v80 + 1, v39));
    p_start = (void **)(v39 + 2);
  }
  v40 = (unsigned int **)*p_start;
  v83 = v40;
  v84 = (JSC::ExecutableMemoryHandle *)v39;
  if (byte_1ECF4C2A2)
    JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v87, (uint64_t)&v83, 0, 0);
  v81 = v40;
  v82 = 0;
  if (v39)
  {
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 + 1, v39));
    v82 = (JSC::ExecutableMemoryHandle *)v39;
    v42 = (unsigned int *)v84;
    v84 = 0;
    if (v42)
    {
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        atomic_store(1u, v42);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v42, (uint64_t)v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
      }
    }
    v45 = (unsigned int *)v82;
    v82 = 0;
    do
    {
      v46 = __ldaxr(v45);
      v47 = --v46 == 0;
    }
    while (__stlxr(v46, v45));
LABEL_40:
    if (v47)
    {
      atomic_store(1u, v45);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v45, (uint64_t)v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
  }
LABEL_42:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v87, v32, v33, v34, v35, v36, v37, v38);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v99, v48, v49, v50, v51, v52, v53, v54);
}

uint64_t JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)49594>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  int i;
  unsigned int v12;
  char v13;
  JSC::AssemblerBuffer *v15;
  unsigned int v16[2];
  char v17;
  __int16 v18;
  char v19;

  v10 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      v15 = v10;
      JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
      v10 = v15;
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v12 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v13 = 69;
  else
    v13 = 65;
  v16[0] = i;
  v16[1] = 0;
  v17 = v13;
  v18 = 15;
  v19 = -1;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)49594>(v16, a2, a1, a4, a5, a6, a7, a8);
}

void JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)0>(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  JSC::ExecutableMemoryHandle *v36;

  JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(a2, a3, 0, 0, "JITMathIC: linking constant jump to out of line stub", &v35, (uint64_t)v35);
  v11 = (unsigned int *)v36;
  *a1 = v35;
  a1[1] = 0;
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = (unsigned int *)a1[1];
    a1[1] = v11;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v13, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
    }
    v16 = (unsigned int *)v36;
    v36 = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v16, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
    }
  }
}

uint64_t JSC::JITMathIC<JSC::JITMulGenerator,JSC::BinaryArithProfile>::generateOutOfLine(JSC::CodeBlock *,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>)::{lambda(void)#1}::operator()(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  pthread_key_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  pthread_key_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  unsigned int v28;
  void **p_start;
  uint64_t v30;
  size_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int **v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  BOOL v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int **v81;
  JSC::ExecutableMemoryHandle *v82;
  unsigned int **v83;
  JSC::ExecutableMemoryHandle *v84;
  char v85;
  unsigned int ***v86;
  unsigned int *v87;
  size_t len;
  uint64_t v89;
  WTF *v90;
  _BYTE v91[128];
  unsigned int v92;
  int v93;
  char v94;
  unsigned int v95;
  void *start;
  __int128 v97;
  __int128 v98;
  _BYTE v99[32];
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  WTF *v103;
  _BYTE v104[128];
  unsigned int v105;
  unsigned int v106;
  int v107;
  char v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _BYTE *v112;
  char v113;
  uint64_t v114;
  int v115;
  _BYTE *v116;
  char v117;
  uint64_t v118;
  int v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v1 = a1[1];
  v2 = **a1;
  v99[0] = 0;
  v99[24] = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0x8000000080000000;
  v103 = (WTF *)v104;
  v105 = 128;
  v3 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v3 != -1)
  {
    v87 = (unsigned int *)&v86;
    v83 = &v87;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v83, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v4 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v12 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v12)
  {
    v12 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v12, v4);
  }
  v13 = *(WTF **)v12;
  if (*(_QWORD *)v12 != v12 + 8)
  {
    v14 = *(_DWORD *)(v12 + 136);
    if (v105 < v14)
    {
      if (v103 && v103 != (WTF *)v104)
      {
        WTF::fastFree((unint64_t)v103, v5, v6, v7, v8, v9, v10, v11);
        v13 = *(WTF **)v12;
        v14 = *(_DWORD *)(v12 + 136);
      }
      v103 = v13;
      v105 = v14;
      *(_QWORD *)v12 = v12 + 8;
      *(_DWORD *)(v12 + 136) = 128;
    }
  }
  v15 = 0;
  v108 = 1;
  v106 = 0;
  v107 = 0;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v113 = 16;
  v115 = 0x10000;
  v112 = v99;
  v114 = 0;
  v116 = v99;
  v117 = 17;
  v118 = 0;
  v119 = 0x20000;
  v120 = 0;
  v121 = v2;
  if (v2)
    v15 = JSC::CodeBlock::baselineAlternative(v2);
  v122 = v15;
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)49594>((uint64_t)v99, v1[1], v6, v7, v8, v9, v10, v11);
  v16 = (void *)v1[3];
  if (v1[4] - (uint64_t)v16 < (unint64_t)v106)
  {
    __break(0xC471u);
    JUMPOUT(0x1987D4A60);
  }
  v87 = 0;
  len = v106;
  v89 = 0;
  v90 = (WTF *)v91;
  v92 = 128;
  v17 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v17 != -1)
  {
    v83 = (unsigned int **)&v85;
    v86 = &v83;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v86, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v18 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v26 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v26)
  {
    v26 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v26, v18);
  }
  v27 = *(WTF **)v26;
  if (*(_QWORD *)v26 != v26 + 8)
  {
    v28 = *(_DWORD *)(v26 + 136);
    if (v92 < v28)
    {
      if (v90 && v90 != (WTF *)v91)
      {
        WTF::fastFree((unint64_t)v90, v19, v20, v21, v22, v23, v24, v25);
        v27 = *(WTF **)v26;
        v28 = *(_DWORD *)(v26 + 136);
      }
      v90 = v27;
      v92 = v28;
      *(_QWORD *)v26 = v26 + 8;
      *(_DWORD *)(v26 + 136) = 128;
    }
  }
  v94 = 1;
  v95 = 6;
  start = v16;
  v97 = 0u;
  v98 = 0u;
  v93 = 1;
  JSC::LinkBuffer::linkCode((uint64_t)&v87, (uint64_t)v99, 1, v21, v22, v23, v24, v25);
  if (!BYTE1(v93))
  {
    __break(0xC471u);
    JUMPOUT(0x1987D4A80);
  }
  if (byte_1ECF4C288)
  {
    v62 = 1;
LABEL_53:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)0>(&v81, (uint64_t)&v87, v62);
    v45 = (unsigned int *)v82;
    v82 = 0;
    if (!v45)
      goto LABEL_42;
    do
    {
      v63 = __ldaxr(v45);
      v47 = --v63 == 0;
    }
    while (__stlxr(v63, v45));
    goto LABEL_40;
  }
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v62 = HIBYTE(word_1ECF4C286) != 0;
    goto LABEL_53;
  }
  if (HIDWORD(v97))
  {
    v56 = (uint64_t *)v97;
    v57 = 8 * HIDWORD(v97);
    do
    {
      v58 = *v56++;
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v58 + 16))(v58, &v87);
      v57 -= 8;
    }
    while (v57);
  }
  p_start = &start;
  if (HIDWORD(v98))
  {
    v59 = (uint64_t *)v98;
    v60 = 8 * HIDWORD(v98);
    do
    {
      v61 = *v59++;
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v61 + 16))(v61, &v87);
      v60 -= 8;
    }
    while (v60);
  }
  v30 = v95;
  v31 = len;
  *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v95 / 2] += len;
  ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v30);
  sys_icache_invalidate(start, v31);
  v39 = v87;
  if (v87)
  {
    do
      v80 = __ldaxr(v39);
    while (__stlxr(v80 + 1, v39));
    p_start = (void **)(v39 + 2);
  }
  v40 = (unsigned int **)*p_start;
  v83 = v40;
  v84 = (JSC::ExecutableMemoryHandle *)v39;
  if (byte_1ECF4C2A2)
    JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v87, (uint64_t)&v83, 0, 0);
  v81 = v40;
  v82 = 0;
  if (v39)
  {
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 + 1, v39));
    v82 = (JSC::ExecutableMemoryHandle *)v39;
    v42 = (unsigned int *)v84;
    v84 = 0;
    if (v42)
    {
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        atomic_store(1u, v42);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v42, (uint64_t)v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
      }
    }
    v45 = (unsigned int *)v82;
    v82 = 0;
    do
    {
      v46 = __ldaxr(v45);
      v47 = --v46 == 0;
    }
    while (__stlxr(v46, v45));
LABEL_40:
    if (v47)
    {
      atomic_store(1u, v45);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v45, (uint64_t)v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
  }
LABEL_42:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v87, v32, v33, v34, v35, v36, v37, v38);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v99, v48, v49, v50, v51, v52, v53, v54);
}

uint64_t JSC::JITMathIC<JSC::JITNegGenerator,JSC::UnaryArithProfile>::generateOutOfLine(JSC::CodeBlock *,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>)::{lambda(void)#1}::operator()(JSC::CodeBlock *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  _QWORD v34[2];
  _BYTE v35[224];
  _BYTE v36[200];
  unsigned int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v36, a1);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)49594>((uint64_t)v36, a2[1], v3, v4, v5, v6, v7, v8);
  v9 = a2[3];
  if (a2[4] - v9 < (unint64_t)v37)
  {
    __break(0xC471u);
    JUMPOUT(0x1987D4C34);
  }
  JSC::LinkBuffer::LinkBuffer<(WTF::PtrTag)49594>((uint64_t)v35, (uint64_t)v36, v9, v37);
  if (!v35[169])
  {
    __break(0xC471u);
    JUMPOUT(0x1987D4C54);
  }
  if (byte_1ECF4C288)
  {
    v33 = 1;
    goto LABEL_14;
  }
  if (HIBYTE(word_1ECF4C286))
    v10 = 0;
  else
    v10 = byte_1ECF4C289 == 0;
  if (!v10)
  {
    v33 = HIBYTE(word_1ECF4C286) != 0;
LABEL_14:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)0>(v34, (uint64_t)v35, v33);
    goto LABEL_10;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)0>((uint64_t)v35, 0, 0, v34);
LABEL_10:
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v34, v11, v12, v13, v14, v15, v16, v17);
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v35, v18, v19, v20, v21, v22, v23, v24);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v36, v25, v26, v27, v28, v29, v30, v31);
}

uint64_t JSC::JITMathIC<JSC::JITSubGenerator,JSC::BinaryArithProfile>::generateOutOfLine(JSC::CodeBlock *,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>)::{lambda(void)#1}::operator()(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  pthread_key_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  pthread_key_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  unsigned int v28;
  void **p_start;
  uint64_t v30;
  size_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int **v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  BOOL v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int **v81;
  JSC::ExecutableMemoryHandle *v82;
  unsigned int **v83;
  JSC::ExecutableMemoryHandle *v84;
  char v85;
  unsigned int ***v86;
  unsigned int *v87;
  size_t len;
  uint64_t v89;
  WTF *v90;
  _BYTE v91[128];
  unsigned int v92;
  int v93;
  char v94;
  unsigned int v95;
  void *start;
  __int128 v97;
  __int128 v98;
  _BYTE v99[32];
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  WTF *v103;
  _BYTE v104[128];
  unsigned int v105;
  unsigned int v106;
  int v107;
  char v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _BYTE *v112;
  char v113;
  uint64_t v114;
  int v115;
  _BYTE *v116;
  char v117;
  uint64_t v118;
  int v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v1 = a1[1];
  v2 = **a1;
  v99[0] = 0;
  v99[24] = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0x8000000080000000;
  v103 = (WTF *)v104;
  v105 = 128;
  v3 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v3 != -1)
  {
    v87 = (unsigned int *)&v86;
    v83 = &v87;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v83, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v4 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v12 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v12)
  {
    v12 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v12, v4);
  }
  v13 = *(WTF **)v12;
  if (*(_QWORD *)v12 != v12 + 8)
  {
    v14 = *(_DWORD *)(v12 + 136);
    if (v105 < v14)
    {
      if (v103 && v103 != (WTF *)v104)
      {
        WTF::fastFree((unint64_t)v103, v5, v6, v7, v8, v9, v10, v11);
        v13 = *(WTF **)v12;
        v14 = *(_DWORD *)(v12 + 136);
      }
      v103 = v13;
      v105 = v14;
      *(_QWORD *)v12 = v12 + 8;
      *(_DWORD *)(v12 + 136) = 128;
    }
  }
  v15 = 0;
  v108 = 1;
  v106 = 0;
  v107 = 0;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v113 = 16;
  v115 = 0x10000;
  v112 = v99;
  v114 = 0;
  v116 = v99;
  v117 = 17;
  v118 = 0;
  v119 = 0x20000;
  v120 = 0;
  v121 = v2;
  if (v2)
    v15 = JSC::CodeBlock::baselineAlternative(v2);
  v122 = v15;
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)49594>((uint64_t)v99, v1[1], v6, v7, v8, v9, v10, v11);
  v16 = (void *)v1[3];
  if (v1[4] - (uint64_t)v16 < (unint64_t)v106)
  {
    __break(0xC471u);
    JUMPOUT(0x1987D50E0);
  }
  v87 = 0;
  len = v106;
  v89 = 0;
  v90 = (WTF *)v91;
  v92 = 128;
  v17 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v17 != -1)
  {
    v83 = (unsigned int **)&v85;
    v86 = &v83;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v86, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v18 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v26 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v26)
  {
    v26 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v26, v18);
  }
  v27 = *(WTF **)v26;
  if (*(_QWORD *)v26 != v26 + 8)
  {
    v28 = *(_DWORD *)(v26 + 136);
    if (v92 < v28)
    {
      if (v90 && v90 != (WTF *)v91)
      {
        WTF::fastFree((unint64_t)v90, v19, v20, v21, v22, v23, v24, v25);
        v27 = *(WTF **)v26;
        v28 = *(_DWORD *)(v26 + 136);
      }
      v90 = v27;
      v92 = v28;
      *(_QWORD *)v26 = v26 + 8;
      *(_DWORD *)(v26 + 136) = 128;
    }
  }
  v94 = 1;
  v95 = 6;
  start = v16;
  v97 = 0u;
  v98 = 0u;
  v93 = 1;
  JSC::LinkBuffer::linkCode((uint64_t)&v87, (uint64_t)v99, 1, v21, v22, v23, v24, v25);
  if (!BYTE1(v93))
  {
    __break(0xC471u);
    JUMPOUT(0x1987D5100);
  }
  if (byte_1ECF4C288)
  {
    v62 = 1;
LABEL_53:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)0>(&v81, (uint64_t)&v87, v62);
    v45 = (unsigned int *)v82;
    v82 = 0;
    if (!v45)
      goto LABEL_42;
    do
    {
      v63 = __ldaxr(v45);
      v47 = --v63 == 0;
    }
    while (__stlxr(v63, v45));
    goto LABEL_40;
  }
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v62 = HIBYTE(word_1ECF4C286) != 0;
    goto LABEL_53;
  }
  if (HIDWORD(v97))
  {
    v56 = (uint64_t *)v97;
    v57 = 8 * HIDWORD(v97);
    do
    {
      v58 = *v56++;
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v58 + 16))(v58, &v87);
      v57 -= 8;
    }
    while (v57);
  }
  p_start = &start;
  if (HIDWORD(v98))
  {
    v59 = (uint64_t *)v98;
    v60 = 8 * HIDWORD(v98);
    do
    {
      v61 = *v59++;
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v61 + 16))(v61, &v87);
      v60 -= 8;
    }
    while (v60);
  }
  v30 = v95;
  v31 = len;
  *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v95 / 2] += len;
  ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v30);
  sys_icache_invalidate(start, v31);
  v39 = v87;
  if (v87)
  {
    do
      v80 = __ldaxr(v39);
    while (__stlxr(v80 + 1, v39));
    p_start = (void **)(v39 + 2);
  }
  v40 = (unsigned int **)*p_start;
  v83 = v40;
  v84 = (JSC::ExecutableMemoryHandle *)v39;
  if (byte_1ECF4C2A2)
    JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v87, (uint64_t)&v83, 0, 0);
  v81 = v40;
  v82 = 0;
  if (v39)
  {
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 + 1, v39));
    v82 = (JSC::ExecutableMemoryHandle *)v39;
    v42 = (unsigned int *)v84;
    v84 = 0;
    if (v42)
    {
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        atomic_store(1u, v42);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v42, (uint64_t)v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
      }
    }
    v45 = (unsigned int *)v82;
    v82 = 0;
    do
    {
      v46 = __ldaxr(v45);
      v47 = --v46 == 0;
    }
    while (__stlxr(v46, v45));
LABEL_40:
    if (v47)
    {
      atomic_store(1u, v45);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v45, (uint64_t)v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
  }
LABEL_42:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v87, v32, v33, v34, v35, v36, v37, v38);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v99, v48, v49, v50, v51, v52, v53, v54);
}

uint64_t *JSC::JIT::emit_op_put_by_val<JSC::OpPutByVal>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  _DWORD *v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  _QWORD *v90;
  __int128 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  _DWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _DWORD *v113;
  int v114;
  _DWORD *v115;
  uint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  int v119;
  _DWORD *v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  int v127;
  _DWORD *v128;
  _DWORD *v129;
  unint64_t v130;
  BOOL v131;
  char **v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _DWORD *v139;
  unint64_t v140;
  BOOL v141;
  char **v142;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  unint64_t v150;
  BOOL v151;
  char **v152;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _DWORD *v161;
  _DWORD *v162;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  char v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  __int16 v171;
  int v172;
  int v173;
  _OWORD v174[2];

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    v121 = *((__int16 *)a2 + 2);
    if (v121 <= 63)
      v13 = v121;
    else
      v13 = (v121 + 1073741760);
    v122 = *((__int16 *)a2 + 3);
    if (v122 <= 63)
      v15 = v122;
    else
      v15 = (v122 + 1073741760);
    v16 = a2[8];
    v17 = *((unsigned __int16 *)a2 + 5);
    if (v10 <= 63)
      goto LABEL_10;
LABEL_73:
    v123 = v10 + v11;
    goto LABEL_74;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    v12 = (char)a2[2];
    if (v12 <= 15)
      v13 = v12;
    else
      v13 = (v12 + 1073741808);
    v14 = (char)a2[3];
    if (v14 <= 15)
      v15 = v14;
    else
      v15 = (v14 + 1073741808);
    v16 = a2[4];
    v17 = a2[5];
    if (v10 <= 15)
    {
LABEL_10:
      v18 = v10;
LABEL_11:
      v19 = (v18 << 35) | 0x1D;
LABEL_12:
      JSC::MacroAssemblerARM64::load64(a1, v19, 0, a4, a5, a6, a7, a8);
      goto LABEL_13;
    }
    goto LABEL_73;
  }
  v123 = *(_DWORD *)(a2 + 2);
  v13 = *(unsigned int *)(a2 + 6);
  v15 = *(unsigned int *)(a2 + 10);
  v16 = a2[14];
  v17 = *(_DWORD *)(a2 + 18);
LABEL_74:
  v18 = v123;
  if (v123 < 0x40000000)
    goto LABEL_11;
  v124 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v125 = (v123 - 0x40000000);
  v126 = *(_DWORD **)(v124 + 120);
  if (!v126 || *v126 <= v125)
    goto LABEL_81;
  v127 = *((unsigned __int8 *)v126 + v125 + 4);
  if ((v127 - 1) >= 2)
  {
    if (v127)
    {
      if (v127 != 3)
        goto LABEL_146;
      goto LABEL_92;
    }
LABEL_81:
    v129 = *(_DWORD **)(v124 + 112);
    if (*v129 <= v125)
    {
      __break(0xC471u);
      JUMPOUT(0x1987D5C18);
    }
    v130 = *(_QWORD *)&v129[2 * v125 + 2];
    if (v130)
      v131 = (v130 & 0xFFFE000000000002) == 0;
    else
      v131 = 0;
    if (!v131)
      goto LABEL_78;
    v132 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v130 & 0xFFFFFFFE) + 0x4C));
    if (v132 != &JSC::SymbolTable::s_info && v132 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_78;
LABEL_92:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v134, v135, v136, v137, v138);
    v19 = v18 << 35;
    goto LABEL_12;
  }
LABEL_78:
  v128 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v128 <= v125)
  {
    __break(0xC471u);
    JUMPOUT(0x1987D5BB8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v128[2 * v125 + 2], 0, a4, a5, a6, a7, a8);
LABEL_13:
  if ((int)v13 < 0x40000000)
  {
    v25 = (v13 << 35) | 0x1D;
LABEL_15:
    JSC::MacroAssemblerARM64::load64(a1, v25, 1, v20, v21, v22, v23, v24);
    goto LABEL_16;
  }
  v111 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v112 = (v13 - 0x40000000);
  v113 = *(_DWORD **)(v111 + 120);
  if (!v113 || *v113 <= v112)
    goto LABEL_94;
  v114 = *((unsigned __int8 *)v113 + v112 + 4);
  if ((v114 - 1) >= 2)
  {
    if (v114)
    {
      if (v114 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987D5A64);
      }
      goto LABEL_105;
    }
LABEL_94:
    v139 = *(_DWORD **)(v111 + 112);
    if (*v139 <= v112)
    {
      __break(0xC471u);
      JUMPOUT(0x1987D5C38);
    }
    v140 = *(_QWORD *)&v139[2 * v112 + 2];
    if (v140)
      v141 = (v140 & 0xFFFE000000000002) == 0;
    else
      v141 = 0;
    if (!v141)
      goto LABEL_59;
    v142 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v140 & 0xFFFFFFFE) + 0x4C));
    if (v142 != &JSC::SymbolTable::s_info && v142 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_59;
LABEL_105:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v20, v21, v22, v23, v24);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v144, v145, v146, v147, v148);
    v25 = (v13 << 35) | 1;
    goto LABEL_15;
  }
LABEL_59:
  v115 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v115 <= v112)
  {
    __break(0xC471u);
    JUMPOUT(0x1987D5BD8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v115[2 * v112 + 2], 1, v20, v21, v22, v23, v24);
LABEL_16:
  if ((int)v15 < 0x40000000)
  {
    v31 = (v15 << 35) | 0x1D;
LABEL_18:
    JSC::MacroAssemblerARM64::load64(a1, v31, 2, v26, v27, v28, v29, v30);
    goto LABEL_19;
  }
  v116 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v117 = (v15 - 0x40000000);
  v118 = *(_DWORD **)(v116 + 120);
  if (!v118 || *v118 <= v117)
    goto LABEL_107;
  v119 = *((unsigned __int8 *)v118 + v117 + 4);
  if ((v119 - 1) >= 2)
  {
    if (v119)
    {
      if (v119 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987D5A8CLL);
      }
      goto LABEL_118;
    }
LABEL_107:
    v149 = *(_DWORD **)(v116 + 112);
    if (*v149 <= v117)
    {
      __break(0xC471u);
      JUMPOUT(0x1987D5C58);
    }
    v150 = *(_QWORD *)&v149[2 * v117 + 2];
    if (v150)
      v151 = (v150 & 0xFFFE000000000002) == 0;
    else
      v151 = 0;
    if (!v151)
      goto LABEL_64;
    v152 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v150 & 0xFFFFFFFE) + 0x4C));
    if (v152 != &JSC::SymbolTable::s_info && v152 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_64;
LABEL_118:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, v26, v27, v28, v29, v30);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v154, v155, v156, v157, v158);
    v31 = (v15 << 35) | 2;
    goto LABEL_18;
  }
LABEL_64:
  v120 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v120 <= v117)
  {
    __break(0xC471u);
    JUMPOUT(0x1987D5BF8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v120[2 * v117 + 2], 2, v26, v27, v28, v29, v30);
LABEL_19:
  v32 = *(_DWORD *)(a1 + 888);
  v33 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v32 + 136), 3, v34, v35, v36, v37);
  v42 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v42)
    v43 = *(unsigned __int16 *)(v42 + 70);
  else
    v43 = *(_DWORD *)(v42 + 236);
  JSC::MacroAssemblerARM64::add64(a1, ((v43 + 3) & 0xFFFFFFFC) + 12 * v17, 25, 4, v38, v39, v40, v41);
  if ((int)v18 >= 0x40000000)
  {
    v159 = *(_QWORD *)(a1 + 808);
    v160 = (v18 - 0x40000000);
    v161 = *(_DWORD **)(v159 + 120);
    if (v161 && *v161 > v160 && *((_BYTE *)v161 + v160 + 4) == 3)
      goto LABEL_25;
    v162 = *(_DWORD **)(v159 + 112);
    if (*v162 > v160)
    {
      if ((*(_QWORD *)&v162[2 * v160 + 2] & 0xFFFE000000000002) == 0)
        goto LABEL_25;
      goto LABEL_22;
    }
LABEL_146:
    __break(0xC471u);
    JUMPOUT(0x1987D5A3CLL);
  }
LABEL_22:
  JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v46, v47, v48, v49, v50, (uint64_t)v174);
  v51 = (_QWORD *)(a1 + 648);
  v52 = *(_DWORD *)(a1 + 640);
  LODWORD(v165) = v174[0];
  *(_QWORD *)((char *)&v165 + 4) = *(_QWORD *)((char *)v174 + 4);
  HIDWORD(v165) = v52;
  v53 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v53 == *(_DWORD *)(a1 + 656))
  {
    v107 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v51, v53 + 1, (unint64_t)&v165);
    v108 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v108 = *(_DWORD *)v107;
    *(_QWORD *)(v108 + 4) = *(_QWORD *)(v107 + 4);
    v56 = (_DWORD *)(v108 + 12);
    v54 = (_DWORD *)(v107 + 12);
  }
  else
  {
    v54 = (_DWORD *)&v165 + 3;
    v55 = *v51 + 16 * v53;
    *(_DWORD *)v55 = v174[0];
    *(_QWORD *)(v55 + 4) = *(_QWORD *)((char *)&v165 + 4);
    v56 = (_DWORD *)(v55 + 12);
  }
  *v56 = *v54;
  ++*(_DWORD *)(a1 + 660);
LABEL_25:
  if (*(_BYTE *)(a1 + 793))
  {
    v57 = *(_DWORD *)(a1 + 200);
    if (v57 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v44, v45, v46, v47, v48, v49, v50);
      v57 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v57) = -1203765243;
    v58 = *(_DWORD *)(a1 + 200);
    v59 = v58 + 4;
    *(_DWORD *)(a1 + 200) = v58 + 4;
    if ((v58 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v44, v45, v46, v47, v48, v49, v50);
      v59 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v59) = -1207959419;
    *(_DWORD *)(a1 + 200) += 4;
  }
  v60 = 0;
  v61 = *(unsigned int *)(a1 + 640);
  v62 = 2;
  if ((_DWORD)v61 != -1 && (_DWORD)v61 != 0x3FFFFFFF)
  {
    if (v61 >> 28)
    {
      v60 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v60 = 0;
      *(_DWORD *)(v60 + 8) = v61;
      LODWORD(v61) = *(_DWORD *)(a1 + 640);
      v62 = 1;
    }
    else
    {
      v62 = 0;
      v60 = v61 << 36;
    }
  }
  v164 = v60 | v62;
  v174[0] = xmmword_199156F50;
  LOWORD(v163) = 772;
  if (v16)
    v63 = 11;
  else
    v63 = 10;
  JSC::JITPutByValGenerator::JITPutByValGenerator((uint64_t)&v165, 0, v33, 1, 0, &v164, v61 >> 2, v63, (uint64_t)v174, 0, 0, 1, 0, 2, v163);
  if ((v164 & 1) != 0 && (v164 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v164 & 0xFFFFFFFF8, v64, v65, v66, v67, v68, v69, v70);
  if ((int)v13 >= 0x40000000)
  {
    v103 = *(_QWORD *)(a1 + 808);
    v104 = (v13 - 0x40000000);
    v105 = *(_DWORD **)(v103 + 120);
    if (!v105 || *v105 <= v104 || *((_BYTE *)v105 + v104 + 4) != 3)
    {
      v106 = *(_DWORD **)(v103 + 112);
      if (*v106 <= v104)
      {
        __break(0xC471u);
        JUMPOUT(0x1987D5B3CLL);
      }
      if (*(_QWORD *)&v106[2 * v104 + 2] >= 0xFFFE000000000000)
        *(_BYTE *)(v33 + 1) |= 1u;
    }
  }
  JSC::JITInlineCacheGenerator::generateBaselineDataICFastPath((uint64_t)&v165, (JSC::MacroAssemblerARM64 *)a1, 3, v66, v67, v68, v69, v70);
  JSC::JIT::resetSP((JSC::JIT *)a1, v71, v72, v73, v74, v75, v76, v77);
  v82 = (_QWORD *)(a1 + 648);
  v83 = *(_DWORD *)(a1 + 640);
  LODWORD(v174[0]) = -1;
  *(_QWORD *)((char *)v174 + 4) = 0xFF000F4100000000;
  HIDWORD(v174[0]) = v83;
  v84 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v84 == *(_DWORD *)(a1 + 656))
  {
    v109 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v82, v84 + 1, (unint64_t)v174);
    v110 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v110 = *(_DWORD *)v109;
    *(_QWORD *)(v110 + 4) = *(_QWORD *)(v109 + 4);
    *(_DWORD *)(v110 + 12) = *(_DWORD *)(v109 + 12);
  }
  else
  {
    v85 = *v82 + 16 * v84;
    *(_DWORD *)v85 = -1;
    *(_QWORD *)(v85 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v85 + 12) = v83;
  }
  ++*(_DWORD *)(a1 + 660);
  v86 = (_QWORD *)(a1 + 496);
  v87 = *(unsigned int *)(a1 + 508);
  if ((_DWORD)v87 == *(_DWORD *)(a1 + 504))
  {
    v91 = (__int128 *)WTF::Vector<JSC::JITPutByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v86, v87 + 1, (unint64_t)&v165);
    v101 = *(_QWORD *)(a1 + 496) + 56 * *(unsigned int *)(a1 + 508);
    v102 = *v91;
    *(_BYTE *)(v101 + 16) = *((_BYTE *)v91 + 16);
    *(_OWORD *)v101 = v102;
    *(_DWORD *)(v101 + 20) = *((_DWORD *)v91 + 5);
    *(_DWORD *)(v101 + 24) = *((_DWORD *)v91 + 6);
    *(_DWORD *)(v101 + 28) = *((_DWORD *)v91 + 7);
    *(_QWORD *)(v101 + 32) = *((_QWORD *)v91 + 4);
    *(_WORD *)(v101 + 40) = *((_WORD *)v91 + 20);
    *(_DWORD *)(v101 + 44) = *((_DWORD *)v91 + 11);
    v90 = (_QWORD *)(v101 + 48);
  }
  else
  {
    v88 = *v86 + 56 * v87;
    v89 = v165;
    *(_BYTE *)(v88 + 16) = v166;
    *(_OWORD *)v88 = v89;
    *(_DWORD *)(v88 + 20) = v167;
    *(_DWORD *)(v88 + 24) = v168;
    *(_DWORD *)(v88 + 28) = v169;
    *(_QWORD *)(v88 + 32) = v170;
    *(_WORD *)(v88 + 40) = v171;
    *(_DWORD *)(v88 + 44) = v172;
    v90 = (_QWORD *)(v88 + 48);
    v91 = &v165;
  }
  *v90 = *((_QWORD *)v91 + 6);
  ++*(_DWORD *)(a1 + 508);
  JSC::JIT::emitWriteBarrier(a1, v18, 0x3FFFFFFFLL, 1, v78, v79, v80, v81);
  v99 = *(_DWORD *)(a1 + 200);
  v173 = v99;
  if (v99 < *(_DWORD *)(a1 + 52))
  {
    do
    {
      if ((v99 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v92, v93, v94, v95, v96, v97, v98);
        v99 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v99) = -721215457;
      v99 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v99;
    }
    while (v99 < *(_DWORD *)(a1 + 52));
    v173 = v99;
  }
  *(_DWORD *)(a1 + 208) = 0;
  return WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>((uint64_t *)(a1 + 408), (int *)(a1 + 640), &v173, (uint64_t)v174);
}

void JSC::JIT::emitArrayProfilingSiteWithCellAndProfile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a1 + 793))
  {
    JSC::MacroAssemblerARM64::load32(a1, 0, 5, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::store32(a1, 5, 4, v9, v10, v11, v12, v13);
  }
}

void JSC::JIT::emit_op_get_by_val(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  _QWORD *v75;
  __int128 *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  _DWORD *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  int v103;
  _DWORD *v104;
  _DWORD *v105;
  unint64_t v106;
  BOOL v107;
  char **v108;
  unsigned int v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  int v119;
  _DWORD *v120;
  _DWORD *v121;
  unint64_t v122;
  BOOL v123;
  char **v124;
  unsigned int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  _DWORD *v131;
  _DWORD *v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  char v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  __int16 v141;
  int v142;
  int v143;
  uint64_t v144;
  _OWORD v145[2];

  v9 = *a2;
  if (v9 == 128)
  {
    v113 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v113 <= 63)
      v12 = v113;
    else
      v12 = (v113 + 1073741760);
    v13 = *((__int16 *)a2 + 2);
    v114 = *((__int16 *)a2 + 3);
    if (v114 <= 63)
      v15 = v114;
    else
      v15 = (v114 + 1073741760);
    v16 = *((unsigned __int16 *)a2 + 4);
    v17 = *((unsigned __int16 *)a2 + 5);
    if (v13 <= 63)
      goto LABEL_10;
LABEL_85:
    v115 = v13 + v11;
    goto LABEL_86;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 <= 15)
      v12 = v10;
    else
      v12 = (v10 + 1073741808);
    v13 = (char)a2[2];
    v14 = (char)a2[3];
    if (v14 <= 15)
      v15 = v14;
    else
      v15 = (v14 + 1073741808);
    v16 = a2[4];
    v17 = a2[5];
    if (v13 <= 15)
    {
LABEL_10:
      v18 = v13;
LABEL_11:
      v19 = (v18 << 35) | 0x1D;
LABEL_12:
      JSC::MacroAssemblerARM64::load64(a1, v19, 0, a4, a5, a6, a7, a8);
      goto LABEL_13;
    }
    goto LABEL_85;
  }
  v12 = *(unsigned int *)(a2 + 2);
  v115 = *(_DWORD *)(a2 + 6);
  v15 = *(unsigned int *)(a2 + 10);
  v16 = *(_DWORD *)(a2 + 14);
  v17 = *(_DWORD *)(a2 + 18);
LABEL_86:
  v18 = v115;
  if (v115 < 0x40000000)
    goto LABEL_11;
  v116 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v117 = (v115 - 0x40000000);
  v118 = *(_DWORD **)(v116 + 120);
  if (!v118 || *v118 <= v117)
    goto LABEL_93;
  v119 = *((unsigned __int8 *)v118 + v117 + 4);
  if ((v119 - 1) >= 2)
  {
    if (v119)
    {
      if (v119 != 3)
      {
        __break(0xC471u);
        goto LABEL_133;
      }
      goto LABEL_104;
    }
LABEL_93:
    v121 = *(_DWORD **)(v116 + 112);
    if (*v121 <= v117)
    {
      __break(0xC471u);
      JUMPOUT(0x1987D66BCLL);
    }
    v122 = *(_QWORD *)&v121[2 * v117 + 2];
    if (v122)
      v123 = (v122 & 0xFFFE000000000002) == 0;
    else
      v123 = 0;
    if (!v123)
      goto LABEL_90;
    v124 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v122 & 0xFFFFFFFE) + 0x4C));
    if (v124 != &JSC::SymbolTable::s_info && v124 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_90;
LABEL_104:
    v126 = *(_DWORD *)(a1 + 200);
    if (v126 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v126 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v126) = -129956960;
    v127 = *(_DWORD *)(a1 + 200);
    v128 = v127 + 4;
    *(_DWORD *)(a1 + 200) = v127 + 4;
    if ((v127 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v128 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v128) = -129368064;
    *(_DWORD *)(a1 + 200) += 4;
    v19 = v18 << 35;
    goto LABEL_12;
  }
LABEL_90:
  v120 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v120 <= v117)
  {
    __break(0xC471u);
    JUMPOUT(0x1987D667CLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v120[2 * v117 + 2], 0, a4, a5, a6, a7, a8);
LABEL_13:
  if ((int)v15 < 0x40000000)
  {
    v27 = (v15 << 35) | 0x1D;
LABEL_15:
    JSC::MacroAssemblerARM64::load64(a1, v27, 1, v22, v23, v24, v25, v26);
    goto LABEL_16;
  }
  v100 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v101 = (v15 - 0x40000000);
  v102 = *(_DWORD **)(v100 + 120);
  if (!v102 || *v102 <= v101)
    goto LABEL_62;
  v103 = *((unsigned __int8 *)v102 + v101 + 4);
  if ((v103 - 1) >= 2)
  {
    if (v103)
    {
      if (v103 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987D6550);
      }
      goto LABEL_73;
    }
LABEL_62:
    v105 = *(_DWORD **)(v100 + 112);
    if (*v105 <= v101)
    {
      __break(0xC471u);
      JUMPOUT(0x1987D66DCLL);
    }
    v106 = *(_QWORD *)&v105[2 * v101 + 2];
    if (v106)
      v107 = (v106 & 0xFFFE000000000002) == 0;
    else
      v107 = 0;
    if (!v107)
      goto LABEL_58;
    v108 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v106 & 0xFFFFFFFE) + 0x4C));
    if (v108 != &JSC::SymbolTable::s_info && v108 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_58;
LABEL_73:
    v110 = *(_DWORD *)(a1 + 200);
    if (v110 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
      v110 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v110) = -129956959;
    v111 = *(_DWORD *)(a1 + 200);
    v112 = v111 + 4;
    *(_DWORD *)(a1 + 200) = v111 + 4;
    if ((v111 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
      v112 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v112) = -129368031;
    *(_DWORD *)(a1 + 200) += 4;
    v27 = (v15 << 35) | 1;
    goto LABEL_15;
  }
LABEL_58:
  v104 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v104 <= v101)
  {
    __break(0xC471u);
    JUMPOUT(0x1987D669CLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v104[2 * v101 + 2], 1, v22, v23, v24, v25, v26);
LABEL_16:
  v28 = *(_DWORD *)(a1 + 888);
  v29 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v28 + 136), 2, v30, v31, v32, v33);
  v38 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v38)
    v39 = *(unsigned __int16 *)(v38 + 64);
  else
    v39 = *(_DWORD *)(v38 + 224);
  JSC::MacroAssemblerARM64::add64(a1, ((v39 + 7) & 0xFFFFFFF8) + 24 * v17, 25, 3, v34, v35, v36, v37);
  v40 = 0;
  v41 = *(unsigned int *)(a1 + 640);
  v42 = 2;
  if ((_DWORD)v41 != -1 && (_DWORD)v41 != 0x3FFFFFFF)
  {
    if (v41 >> 28)
    {
      v40 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v40 = 0;
      *(_DWORD *)(v40 + 8) = v41;
      LODWORD(v41) = *(_DWORD *)(a1 + 640);
      v42 = 1;
    }
    else
    {
      v42 = 0;
      v40 = v41 << 36;
    }
  }
  v134 = v40 | v42;
  v145[0] = xmmword_199156F50;
  LOWORD(v133) = 515;
  JSC::JITGetByValGenerator::JITGetByValGenerator((uint64_t)&v135, 0, v29, 1, 0, &v134, v41 >> 2, 4, (uint64_t)v145, 0, 0, 1, 0, 0, v133);
  if ((v134 & 1) != 0 && (v134 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v134 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  if ((int)v15 >= 0x40000000)
  {
    v90 = *(_QWORD *)(a1 + 808);
    v91 = (v15 - 0x40000000);
    v92 = *(_DWORD **)(v90 + 120);
    if (!v92 || *v92 <= v91 || *((_BYTE *)v92 + v91 + 4) != 3)
    {
      v93 = *(_DWORD **)(v90 + 112);
      if (*v93 <= v91)
      {
        __break(0xC471u);
        JUMPOUT(0x1987D6600);
      }
      if (*(_QWORD *)&v93[2 * v91 + 2] >= 0xFFFE000000000000)
        *(_BYTE *)(v29 + 1) |= 1u;
    }
  }
  v50 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  v51 = *(unsigned __int16 *)(v50 + 64);
  if (!*(_WORD *)(v50 + 64))
    v51 = *(_DWORD *)(v50 + 224);
  if (*(unsigned __int8 *)(((v50 + v51 + 7) & 0xFFFFFFFFFFFFFFF8) + 24 * v17 + 23) > (unint64_t)qword_1ECF4C75C)
    *(_BYTE *)(v29 + 1) |= 0x10u;
  if ((int)v18 >= 0x40000000)
  {
    v129 = *(_QWORD *)(a1 + 808);
    v130 = (v18 - 0x40000000);
    v131 = *(_DWORD **)(v129 + 120);
    if (v131 && *v131 > v130 && *((_BYTE *)v131 + v130 + 4) == 3)
      goto LABEL_32;
    v132 = *(_DWORD **)(v129 + 112);
    if (*v132 > v130)
    {
      if ((*(_QWORD *)&v132[2 * v130 + 2] & 0xFFFE000000000002) == 0)
        goto LABEL_32;
      goto LABEL_29;
    }
    __break(0xC471u);
LABEL_133:
    JUMPOUT(0x1987D6528);
  }
LABEL_29:
  JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v45, v46, v47, v48, v49, (uint64_t)&v143);
  v52 = (_QWORD *)(a1 + 648);
  v53 = v144;
  v54 = *(_DWORD *)(a1 + 640);
  LODWORD(v145[0]) = v143;
  *(_QWORD *)((char *)v145 + 4) = v144;
  HIDWORD(v145[0]) = v54;
  v55 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v55 == *(_DWORD *)(a1 + 656))
  {
    v98 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, v55 + 1, (unint64_t)v145);
    v99 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v99 = *(_DWORD *)v98;
    *(_QWORD *)(v99 + 4) = *(_QWORD *)(v98 + 4);
    *(_DWORD *)(v99 + 12) = *(_DWORD *)(v98 + 12);
  }
  else
  {
    v56 = *v52 + 16 * v55;
    *(_DWORD *)v56 = v143;
    *(_QWORD *)(v56 + 4) = v53;
    *(_DWORD *)(v56 + 12) = v54;
  }
  ++*(_DWORD *)(a1 + 660);
LABEL_32:
  if (*(_BYTE *)(a1 + 793))
  {
    v57 = *(_DWORD *)(a1 + 200);
    if (v57 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)v43, v44, v45, v46, v47, v48, v49);
      v57 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v57) = -1203765244;
    v58 = *(_DWORD *)(a1 + 200);
    v59 = v58 + 4;
    *(_DWORD *)(a1 + 200) = v58 + 4;
    if ((v58 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)v43, v44, v45, v46, v47, v48, v49);
      v59 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v59) = -1207959452;
    *(_DWORD *)(a1 + 200) += 4;
  }
  JSC::JITInlineCacheGenerator::generateBaselineDataICFastPath((uint64_t)&v135, (JSC::MacroAssemblerARM64 *)a1, 2, v45, v46, v47, v48, v49);
  v67 = (_QWORD *)(a1 + 648);
  v68 = *(_DWORD *)(a1 + 640);
  LODWORD(v145[0]) = -1;
  *(_QWORD *)((char *)v145 + 4) = 0xFF000F4100000000;
  HIDWORD(v145[0]) = v68;
  v69 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v69 == *(_DWORD *)(a1 + 656))
  {
    v96 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v67, v69 + 1, (unint64_t)v145);
    v97 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v97 = *(_DWORD *)v96;
    *(_QWORD *)(v97 + 4) = *(_QWORD *)(v96 + 4);
    *(_DWORD *)(v97 + 12) = *(_DWORD *)(v96 + 12);
  }
  else
  {
    v70 = *v67 + 16 * v69;
    *(_DWORD *)v70 = -1;
    *(_QWORD *)(v70 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v70 + 12) = v68;
  }
  ++*(_DWORD *)(a1 + 660);
  v71 = (_QWORD *)(a1 + 432);
  v72 = *(unsigned int *)(a1 + 444);
  if ((_DWORD)v72 == *(_DWORD *)(a1 + 440))
  {
    v76 = (__int128 *)WTF::Vector<JSC::JITGetByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v71, v72 + 1, (unint64_t)&v135);
    v94 = *(_QWORD *)(a1 + 432) + 56 * *(unsigned int *)(a1 + 444);
    v95 = *v76;
    *(_BYTE *)(v94 + 16) = *((_BYTE *)v76 + 16);
    *(_OWORD *)v94 = v95;
    *(_DWORD *)(v94 + 20) = *((_DWORD *)v76 + 5);
    *(_DWORD *)(v94 + 24) = *((_DWORD *)v76 + 6);
    *(_DWORD *)(v94 + 28) = *((_DWORD *)v76 + 7);
    *(_QWORD *)(v94 + 32) = *((_QWORD *)v76 + 4);
    *(_WORD *)(v94 + 40) = *((_WORD *)v76 + 20);
    *(_DWORD *)(v94 + 44) = *((_DWORD *)v76 + 11);
    v75 = (_QWORD *)(v94 + 48);
  }
  else
  {
    v73 = *v71 + 56 * v72;
    v74 = v135;
    *(_BYTE *)(v73 + 16) = v136;
    *(_OWORD *)v73 = v74;
    *(_DWORD *)(v73 + 20) = v137;
    *(_DWORD *)(v73 + 24) = v138;
    *(_DWORD *)(v73 + 28) = v139;
    *(_QWORD *)(v73 + 32) = v140;
    *(_WORD *)(v73 + 40) = v141;
    *(_DWORD *)(v73 + 44) = v142;
    v75 = (_QWORD *)(v73 + 48);
    v76 = &v135;
  }
  *v75 = *((_QWORD *)v76 + 6);
  ++*(_DWORD *)(a1 + 444);
  JSC::JIT::resetSP((JSC::JIT *)a1, v60, v61, v62, v63, v64, v65, v66);
  v84 = *(_DWORD *)(a1 + 200);
  v143 = v84;
  if (v84 < *(_DWORD *)(a1 + 52))
  {
    do
    {
      if ((v84 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v77, v78, v79, v80, v81, v82, v83);
        v84 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v84) = -721215457;
      v84 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v84;
    }
    while (v84 < *(_DWORD *)(a1 + 52));
    v143 = v84;
  }
  *(_DWORD *)(a1 + 208) = 0;
  WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>((uint64_t *)(a1 + 408), (int *)(a1 + 640), &v143, (uint64_t)v145);
  if (*(_BYTE *)(a1 + 793))
    JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)~v16 << 36) | 0x19, v85, v86, v87, v88, v89);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v12 << 35) | 0x1D, v85, v86, v87, v88, v89);
}

void JSC::JIT::emitSlow_op_get_by_val(uint64_t a1, unsigned __int8 *a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int32x2_t v9;
  int v10;
  int v11;
  int v12;
  int32x2_t v13;
  int v14;
  int v15;
  __int128 v16;
  int v17;

  v8 = *a2;
  if (v8 == 128)
  {
    v13.i32[0] = *((__int16 *)a2 + 1);
    v13.i32[1] = *((__int16 *)a2 + 2);
    *(int8x8_t *)&v16 = vbsl_s8((int8x8_t)vcgt_s32(v13, (int32x2_t)0x3F0000003FLL), (int8x8_t)vadd_s32(v13, vdup_n_s32(0x3FFFFFC0u)), (int8x8_t)v13);
    v14 = *((__int16 *)a2 + 3);
    v15 = v14 + 1073741760;
    if (v14 <= 63)
      v15 = *((__int16 *)a2 + 3);
    *((_QWORD *)&v16 + 1) = __PAIR64__(*((unsigned __int16 *)a2 + 4), v15);
    v12 = *((unsigned __int16 *)a2 + 5);
  }
  else if (v8 == 130)
  {
    v16 = *(_OWORD *)(a2 + 2);
    v12 = *(_DWORD *)(a2 + 18);
  }
  else
  {
    v9.i32[0] = (char)a2[1];
    v9.i32[1] = (char)a2[2];
    *(int8x8_t *)&v16 = vbsl_s8((int8x8_t)vcgt_s32(v9, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32(v9, vdup_n_s32(0x3FFFFFF0u)), (int8x8_t)v9);
    v10 = (char)a2[3];
    v11 = v10 + 1073741808;
    if (v10 <= 15)
      v11 = (char)a2[3];
    *((_QWORD *)&v16 + 1) = __PAIR64__(a2[4], v11);
    v12 = a2[5];
  }
  v17 = v12;
  JSC::JIT::generateGetByValSlowCase<JSC::OpGetByVal>(a1, (uint64_t)&v16, a3, a4, a5, a6, a7, a8);
}

void JSC::JIT::generateGetByValSlowCase<JSC::OpGetByVal>(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::ExecutableMemoryHandle *v49;
  __int128 v50;
  uint64_t v51;

  v8 = *(_DWORD *)(a1 + 684);
  *(_DWORD *)(a1 + 684) = v8 + 1;
  if (*(_DWORD *)(a1 + 444) <= v8)
    goto LABEL_18;
  v10 = *(_QWORD *)(a1 + 432) + 56 * v8;
  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v11, v12, v13, v14, v15, v16, v17);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(v10 + 28) = i;
  v19 = *(char *)(v10 + 16);
  if (v19 >= 0x1F)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1987D6A78);
  }
  JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))off_1E3596240[v19], v13, v14, v15, v16, v17, &v48);
  v27 = v48;
  *(_DWORD *)(a1 + 208) = 0;
  v28 = *(_DWORD *)(a1 + 200);
  if (v28 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
    v28 = *(_DWORD *)(a1 + 200);
  }
  v29 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = -1811939328;
  v30 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v30;
  LOBYTE(v51) = -1;
  BYTE3(v51) = 15;
  *(_WORD *)((char *)&v51 + 1) = 65;
  *(_QWORD *)&v50 = v30 - 4;
  *((_QWORD *)&v50 + 1) = v27;
  WORD2(v51) = 384;
  v31 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v31 == *(_DWORD *)(a1 + 40))
  {
    v38 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v31 + 1, (unint64_t)&v50, v22, v23, v24, v25, v26);
    v32 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v32 = 0;
    *(_QWORD *)(v32 + 8) = 0;
    *(_BYTE *)(v32 + 16) = -1;
    v39 = (((*(unsigned __int8 *)(v32 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v32 + 17) = 65;
    *(_BYTE *)(v32 + 19) = BYTE2(v39);
    *(_WORD *)(v32 + 20) &= 0xFC00u;
    v33 = *(_OWORD *)v38;
    v34 = *(_QWORD *)(v38 + 16);
  }
  else
  {
    v32 = *v29 + 24 * v31;
    v33 = v50;
    v34 = v51;
  }
  *(_QWORD *)(v32 + 16) = v34;
  *(_OWORD *)v32 = v33;
  ++*(_DWORD *)(a1 + 44);
  v35 = (unsigned int *)v49;
  v49 = 0;
  if (v35)
  {
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v35, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
  }
}

void JSC::JIT::emit_op_get_private_name(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  _DWORD *v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  char v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  __int16 v106;
  int v107;
  uint64_t v108;
  int v109;
  _OWORD v110[2];

  v9 = *a2;
  if (v9 == 130)
  {
    v12 = *(unsigned int *)(a2 + 2);
    v80 = *(_DWORD *)(a2 + 6);
    v15 = *(unsigned int *)(a2 + 10);
    v16 = *(_DWORD *)(a2 + 14);
  }
  else
  {
    if (v9 == 128)
    {
      v81 = *((__int16 *)a2 + 1);
      v11 = 1073741760;
      if (v81 <= 63)
        v12 = v81;
      else
        v12 = (v81 + 1073741760);
      v13 = *((__int16 *)a2 + 2);
      v82 = *((__int16 *)a2 + 3);
      if (v82 <= 63)
        v15 = v82;
      else
        v15 = (v82 + 1073741760);
      v16 = *((unsigned __int16 *)a2 + 4);
      if (v13 <= 63)
        goto LABEL_10;
    }
    else
    {
      v10 = (char)a2[1];
      v11 = 1073741808;
      if (v10 <= 15)
        v12 = v10;
      else
        v12 = (v10 + 1073741808);
      v13 = (char)a2[2];
      v14 = (char)a2[3];
      if (v14 <= 15)
        v15 = v14;
      else
        v15 = (v14 + 1073741808);
      v16 = a2[4];
      if (v13 <= 15)
      {
LABEL_10:
        v17 = v13;
LABEL_11:
        v18 = (v17 << 35) | 0x1D;
LABEL_12:
        JSC::MacroAssemblerARM64::load64(a1, v18, 0, a4, a5, a6, a7, a8);
        goto LABEL_13;
      }
    }
    v80 = v13 + v11;
  }
  v17 = v80;
  if (v80 < 0x40000000)
    goto LABEL_11;
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v80))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v83, v84, v85, v86, v87);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v89, v90, v91, v92, v93);
    v18 = v17 << 35;
    goto LABEL_12;
  }
  v88 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v88 <= (v17 - 0x40000000))
    goto LABEL_68;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v88[2 * (v17 - 0x40000000) + 2], 0, v83, v84, v85, v86, v87);
LABEL_13:
  if ((int)v15 < 0x40000000)
  {
    v24 = (v15 << 35) | 0x1D;
LABEL_15:
    JSC::MacroAssemblerARM64::load64(a1, v24, 1, v19, v20, v21, v22, v23);
    goto LABEL_16;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v15))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v69, v70, v71, v72, v73);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v75, v76, v77, v78, v79);
    v24 = (v15 << 35) | 1;
    goto LABEL_15;
  }
  v74 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v74 <= (v15 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987D7010);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v74[2 * (v15 - 0x40000000) + 2], 1, v69, v70, v71, v72, v73);
LABEL_16:
  v25 = *(_DWORD *)(a1 + 888);
  v26 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v25 + 136), 2, v27, v28, v29, v30);
  if ((int)v17 < 0x40000000)
  {
LABEL_17:
    JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v31, v32, v33, v34, v35, (uint64_t)v110);
    v36 = *(_QWORD *)((char *)v110 + 4);
    v37 = *(_DWORD *)(a1 + 640);
    LODWORD(v100) = v110[0];
    *(_QWORD *)((char *)&v100 + 4) = *(_QWORD *)((char *)v110 + 4);
    HIDWORD(v100) = v37;
    v38 = *(unsigned int *)(a1 + 660);
    if ((_DWORD)v38 == *(_DWORD *)(a1 + 656))
    {
      WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v100);
    }
    else
    {
      v39 = *(_QWORD *)(a1 + 648) + 16 * v38;
      *(_DWORD *)v39 = v110[0];
      *(_QWORD *)(v39 + 4) = v36;
      *(_DWORD *)(v39 + 12) = v37;
      ++*(_DWORD *)(a1 + 660);
    }
    goto LABEL_19;
  }
  v94 = *(_QWORD *)(a1 + 808);
  v95 = (v17 - 0x40000000);
  v96 = *(_DWORD **)(v94 + 120);
  if (!v96 || *v96 <= v95 || *((_BYTE *)v96 + v95 + 4) != 3)
  {
    v97 = *(_DWORD **)(v94 + 112);
    if (*v97 > v95)
    {
      if ((*(_QWORD *)&v97[2 * v95 + 2] & 0xFFFE000000000002) == 0)
        goto LABEL_19;
      goto LABEL_17;
    }
LABEL_68:
    __break(0xC471u);
    JUMPOUT(0x1987D6FF0);
  }
LABEL_19:
  v40 = 0;
  v41 = *(unsigned int *)(a1 + 640);
  v42 = 2;
  if ((_DWORD)v41 != -1 && (_DWORD)v41 != 0x3FFFFFFF)
  {
    if (v41 >> 28)
    {
      v40 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v40 = 0;
      *(_DWORD *)(v40 + 8) = v41;
      LODWORD(v41) = *(_DWORD *)(a1 + 640);
      v42 = 1;
    }
    else
    {
      v42 = 0;
      v40 = v41 << 36;
    }
  }
  v99 = v40 | v42;
  v110[0] = xmmword_199156F50;
  LOWORD(v98) = 767;
  JSC::JITGetByValGenerator::JITGetByValGenerator((uint64_t)&v100, 0, v26, 1, 0, &v99, v41 >> 2, 27, (uint64_t)v110, 0, 0, 1, 0, 0, v98);
  if ((v99 & 1) != 0 && (v99 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v99 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  JSC::JITInlineCacheGenerator::generateBaselineDataICFastPath((uint64_t)&v100, (JSC::MacroAssemblerARM64 *)a1, 2, v45, v46, v47, v48, v49);
  v57 = *(_DWORD *)(a1 + 640);
  LODWORD(v110[0]) = -1;
  *(_QWORD *)((char *)v110 + 4) = 0xFF000F4100000000;
  HIDWORD(v110[0]) = v57;
  v58 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v58 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)v110);
  }
  else
  {
    v59 = *(_QWORD *)(a1 + 648) + 16 * v58;
    *(_DWORD *)v59 = -1;
    *(_QWORD *)(v59 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v59 + 12) = v57;
    ++*(_DWORD *)(a1 + 660);
  }
  v60 = *(_DWORD *)(a1 + 444);
  if (v60 == *(_DWORD *)(a1 + 440))
  {
    WTF::Vector<JSC::JITGetByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITGetByValGenerator&>(a1 + 432, (unint64_t)&v100);
  }
  else
  {
    v61 = *(_QWORD *)(a1 + 432) + 56 * v60;
    v62 = v100;
    *(_BYTE *)(v61 + 16) = v101;
    *(_OWORD *)v61 = v62;
    *(_DWORD *)(v61 + 20) = v102;
    *(_DWORD *)(v61 + 24) = v103;
    *(_DWORD *)(v61 + 28) = v104;
    *(_QWORD *)(v61 + 32) = v105;
    *(_WORD *)(v61 + 40) = v106;
    *(_DWORD *)(v61 + 44) = v107;
    *(_QWORD *)(v61 + 48) = v108;
    ++*(_DWORD *)(a1 + 444);
  }
  v63 = *(_DWORD *)(a1 + 200);
  v109 = v63;
  if (v63 < *(_DWORD *)(a1 + 52))
  {
    do
    {
      if ((v63 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v50, v51, v52, v53, v54, v55, v56);
        v63 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v63) = -721215457;
      v63 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v63;
    }
    while (v63 < *(_DWORD *)(a1 + 52));
    v109 = v63;
  }
  *(_DWORD *)(a1 + 208) = 0;
  WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>((uint64_t *)(a1 + 408), (int *)(a1 + 640), &v109, (uint64_t)v110);
  if (*(_BYTE *)(a1 + 793))
    JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)~v16 << 36) | 0x19, v64, v65, v66, v67, v68);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v12 << 35) | 0x1D, v64, v65, v66, v67, v68);
}

uint64_t JSC::MacroAssembler::nearCallThunk<(WTF::PtrTag)0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;

  *(_DWORD *)(a1 + 208) = 0;
  v10 = *(_DWORD *)(a1 + 200);
  if (v10 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v10 = *(_DWORD *)(a1 + 200);
  }
  result = a1 + 32;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v10) = -1811939328;
  v12 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v12;
  LOBYTE(v19) = -1;
  BYTE3(v19) = 15;
  *(_WORD *)((char *)&v19 + 1) = 65;
  *(_QWORD *)&v18 = v12 - 4;
  *((_QWORD *)&v18 + 1) = a2;
  WORD2(v19) = 384;
  v13 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v13 == *(_DWORD *)(a1 + 40))
  {
    result = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v13 + 1, (unint64_t)&v18, a4, a5, a6, a7, a8);
    v14 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = -1;
    v17 = (((*(unsigned __int8 *)(v14 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v14 + 17) = 65;
    *(_BYTE *)(v14 + 19) = BYTE2(v17);
    *(_WORD *)(v14 + 20) &= 0xFC00u;
    v15 = *(_OWORD *)result;
    v16 = *(_QWORD *)(result + 16);
  }
  else
  {
    v14 = *(_QWORD *)result + 24 * v13;
    v15 = v18;
    v16 = v19;
  }
  *(_QWORD *)(v14 + 16) = v16;
  *(_OWORD *)v14 = v15;
  ++*(_DWORD *)(a1 + 44);
  return result;
}

unsigned int *JSC::JIT::emit_op_set_private_brand(uint64_t a1, JSC::OpNewAsyncGeneratorFuncExp *this)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  char v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  __int128 v88;

  v3 = JSC::OpNewAsyncGeneratorFuncExp::decode(this, (const unsigned __int8 *)this);
  v9 = v3;
  if ((int)v3 < 0x40000000)
  {
    v10 = (v3 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v10, 0, v4, v5, v6, v7, v8);
    goto LABEL_4;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v3))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v52, v53, v54, v55, v56);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v64, v65, v66, v67, v68);
    v10 = v9 << 35;
    goto LABEL_3;
  }
  v57 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v57 <= (v9 - 0x40000000))
    goto LABEL_37;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v57[2 * (v9 - 0x40000000) + 2], 0, v52, v53, v54, v55, v56);
LABEL_4:
  v16 = HIDWORD(v9);
  if (SHIDWORD(v9) < 0x40000000)
  {
    v17 = (v16 << 35) | 0x1D;
LABEL_6:
    JSC::MacroAssemblerARM64::load64(a1, v17, 1, v11, v12, v13, v14, v15);
    goto LABEL_7;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), SHIDWORD(v9)))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v58, v59, v60, v61, v62);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v69, v70, v71, v72, v73);
    v17 = (v16 << 35) | 1;
    goto LABEL_6;
  }
  v63 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v63 <= (HIDWORD(v9) - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987D757CLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v63[2 * (HIDWORD(v9) - 0x40000000) + 2], 1, v58, v59, v60, v61, v62);
LABEL_7:
  v18 = *(_DWORD *)(a1 + 888);
  v19 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v18 + 136), 2, v20, v21, v22, v23);
  if ((int)v9 < 0x40000000)
  {
LABEL_8:
    JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v24, v25, v26, v27, v28, (uint64_t)&v88);
    v29 = *(_QWORD *)((char *)&v88 + 4);
    v30 = *(_DWORD *)(a1 + 640);
    LODWORD(v80) = v88;
    *(_QWORD *)((char *)&v80 + 4) = *(_QWORD *)((char *)&v88 + 4);
    HIDWORD(v80) = v30;
    v31 = *(unsigned int *)(a1 + 660);
    if ((_DWORD)v31 == *(_DWORD *)(a1 + 656))
    {
      WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v80);
    }
    else
    {
      v32 = *(_QWORD *)(a1 + 648) + 16 * v31;
      *(_DWORD *)v32 = v88;
      *(_QWORD *)(v32 + 4) = v29;
      *(_DWORD *)(v32 + 12) = v30;
      ++*(_DWORD *)(a1 + 660);
    }
    goto LABEL_10;
  }
  v74 = *(_QWORD *)(a1 + 808);
  v75 = (v9 - 0x40000000);
  v76 = *(_DWORD **)(v74 + 120);
  if (!v76 || *v76 <= v75 || *((_BYTE *)v76 + v75 + 4) != 3)
  {
    v77 = *(_DWORD **)(v74 + 112);
    if (*v77 > v75)
    {
      if ((*(_QWORD *)&v77[2 * v75 + 2] & 0xFFFE000000000002) == 0)
        goto LABEL_10;
      goto LABEL_8;
    }
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x1987D755CLL);
  }
LABEL_10:
  JSC::CodeOrigin::CodeOrigin(&v79, *(unsigned int *)(a1 + 640), 0);
  v33 = (unint64_t)*(unsigned int *)(a1 + 640) >> 2;
  v88 = xmmword_199156F50;
  LOBYTE(v78) = 2;
  JSC::JITPrivateBrandAccessGenerator::JITPrivateBrandAccessGenerator((uint64_t)&v80, 0, v19, 1, 3, &v79, v33, 30, (uint64_t)&v88, 0, 0, 1, v78);
  if ((v79 & 1) != 0 && (v79 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v79 & 0xFFFFFFFF8, v34, v35, v36, v37, v38, v39, v40);
  JSC::JITPrivateBrandAccessGenerator::generateBaselineDataICFastPath((JSC::JITPrivateBrandAccessGenerator *)&v80, (JSC::JIT *)a1, v35, v36, v37, v38, v39, v40);
  v45 = *(_DWORD *)(a1 + 640);
  LODWORD(v88) = -1;
  *(_QWORD *)((char *)&v88 + 4) = 0xFF000F4100000000;
  HIDWORD(v88) = v45;
  v46 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v46 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v88);
  }
  else
  {
    v47 = *(_QWORD *)(a1 + 648) + 16 * v46;
    *(_DWORD *)v47 = -1;
    *(_QWORD *)(v47 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v47 + 12) = v45;
    ++*(_DWORD *)(a1 + 660);
  }
  v48 = *(_DWORD *)(a1 + 604);
  if (v48 == *(_DWORD *)(a1 + 600))
  {
    WTF::Vector<JSC::JITPrivateBrandAccessGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITPrivateBrandAccessGenerator&>(a1 + 592, (unint64_t)&v80);
  }
  else
  {
    v50 = *(_QWORD *)(a1 + 592) + 56 * v48;
    v51 = v80;
    *(_BYTE *)(v50 + 16) = v81;
    *(_OWORD *)v50 = v51;
    *(_DWORD *)(v50 + 20) = v82;
    *(_DWORD *)(v50 + 24) = v83;
    *(_DWORD *)(v50 + 28) = v84;
    *(_QWORD *)(v50 + 32) = v85;
    *(_DWORD *)(v50 + 40) = v86;
    *(_QWORD *)(v50 + 44) = v87;
    ++*(_DWORD *)(a1 + 604);
  }
  return JSC::JIT::emitWriteBarrier(a1, v9, 0x3FFFFFFFLL, 1, v41, v42, v43, v44);
}

uint64_t JSC::JIT::emitSlow_op_set_private_brand(uint64_t result, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];
  int v37;

  v8 = *(_DWORD *)(result + 724);
  *(_DWORD *)(result + 724) = v8 + 1;
  if (*(_DWORD *)(result + 604) <= v8)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = result;
    v10 = *(_QWORD *)(result + 592) + 56 * v8;
    JSC::JIT::linkAllSlowCases(result, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)v9, v11, v12, v13, v14, v15, v16, v17, &v37);
    *(_DWORD *)(v10 + 28) = v37;
    JSC::InlineCacheCompiler::generateSlowPathCode(*(_QWORD *)(v9 + 352), *(char *)(v10 + 16), v18, v19, v20, v21, v22, v36);
    JSC::MacroAssembler::nearCallThunk<(WTF::PtrTag)0>(v9, v36[0], v23, v24, v25, v26, v27, v28);
    return JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  }
  return result;
}

double JSC::JIT::emit_op_check_private_brand(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  double result;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  char v77;
  int v78;
  int v79;
  int v80;
  double v81;
  int v82;
  uint64_t v83;
  __int128 v84;

  v3 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpCreatePromise>(a2);
  v9 = v3;
  if ((int)v3 < 0x40000000)
  {
    v10 = (v3 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v10, 0, v4, v5, v6, v7, v8);
    goto LABEL_4;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v3))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v48, v49, v50, v51, v52);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v60, v61, v62, v63, v64);
    v10 = v9 << 35;
    goto LABEL_3;
  }
  v53 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v53 <= (v9 - 0x40000000))
    goto LABEL_36;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v53[2 * (v9 - 0x40000000) + 2], 0, v48, v49, v50, v51, v52);
LABEL_4:
  v16 = HIDWORD(v9);
  if (SHIDWORD(v9) < 0x40000000)
  {
    v17 = (v16 << 35) | 0x1D;
LABEL_6:
    JSC::MacroAssemblerARM64::load64(a1, v17, 1, v11, v12, v13, v14, v15);
    goto LABEL_7;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), SHIDWORD(v9)))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v54, v55, v56, v57, v58);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v65, v66, v67, v68, v69);
    v17 = (v16 << 35) | 1;
    goto LABEL_6;
  }
  v59 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v59 <= (HIDWORD(v9) - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987D7A24);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v59[2 * (HIDWORD(v9) - 0x40000000) + 2], 1, v54, v55, v56, v57, v58);
LABEL_7:
  v18 = *(_DWORD *)(a1 + 888);
  v19 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v18 + 136), 2, v20, v21, v22, v23);
  if ((int)v9 < 0x40000000)
  {
LABEL_8:
    JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v24, v25, v26, v27, v28, (uint64_t)&v84);
    v29 = *(_QWORD *)((char *)&v84 + 4);
    v30 = *(_DWORD *)(a1 + 640);
    LODWORD(v76) = v84;
    *(_QWORD *)((char *)&v76 + 4) = *(_QWORD *)((char *)&v84 + 4);
    HIDWORD(v76) = v30;
    v31 = *(unsigned int *)(a1 + 660);
    if ((_DWORD)v31 == *(_DWORD *)(a1 + 656))
    {
      WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v76);
    }
    else
    {
      v32 = *(_QWORD *)(a1 + 648) + 16 * v31;
      *(_DWORD *)v32 = v84;
      *(_QWORD *)(v32 + 4) = v29;
      *(_DWORD *)(v32 + 12) = v30;
      ++*(_DWORD *)(a1 + 660);
    }
    goto LABEL_10;
  }
  v70 = *(_QWORD *)(a1 + 808);
  v71 = (v9 - 0x40000000);
  v72 = *(_DWORD **)(v70 + 120);
  if (!v72 || *v72 <= v71 || *((_BYTE *)v72 + v71 + 4) != 3)
  {
    v73 = *(_DWORD **)(v70 + 112);
    if (*v73 > v71)
    {
      if ((*(_QWORD *)&v73[2 * v71 + 2] & 0xFFFE000000000002) == 0)
        goto LABEL_10;
      goto LABEL_8;
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x1987D7A04);
  }
LABEL_10:
  JSC::CodeOrigin::CodeOrigin(&v75, *(unsigned int *)(a1 + 640), 0);
  v33 = (unint64_t)*(unsigned int *)(a1 + 640) >> 2;
  v84 = xmmword_199156F50;
  LOBYTE(v74) = 2;
  JSC::JITPrivateBrandAccessGenerator::JITPrivateBrandAccessGenerator((uint64_t)&v76, 0, v19, 1, 3, &v75, v33, 29, (uint64_t)&v84, 0, 0, 1, v74);
  if ((v75 & 1) != 0 && (v75 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v75 & 0xFFFFFFFF8, v34, v35, v36, v37, v38, v39, v40);
  JSC::JITPrivateBrandAccessGenerator::generateBaselineDataICFastPath((JSC::JITPrivateBrandAccessGenerator *)&v76, (JSC::JIT *)a1, v35, v36, v37, v38, v39, v40);
  v41 = *(_DWORD *)(a1 + 640);
  LODWORD(v84) = -1;
  *(_QWORD *)((char *)&v84 + 4) = 0xFF000F4100000000;
  HIDWORD(v84) = v41;
  v42 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v42 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v84);
  }
  else
  {
    v43 = *(_QWORD *)(a1 + 648) + 16 * v42;
    *(_DWORD *)v43 = -1;
    *(_QWORD *)(v43 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v43 + 12) = v41;
    ++*(_DWORD *)(a1 + 660);
  }
  v44 = *(_DWORD *)(a1 + 604);
  if (v44 == *(_DWORD *)(a1 + 600))
    return WTF::Vector<JSC::JITPrivateBrandAccessGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITPrivateBrandAccessGenerator&>(a1 + 592, (unint64_t)&v76);
  v46 = *(_QWORD *)(a1 + 592) + 56 * v44;
  v47 = v76;
  *(_BYTE *)(v46 + 16) = v77;
  *(_OWORD *)v46 = v47;
  *(_DWORD *)(v46 + 20) = v78;
  *(_DWORD *)(v46 + 24) = v79;
  *(_DWORD *)(v46 + 28) = v80;
  result = v81;
  *(double *)(v46 + 32) = v81;
  *(_DWORD *)(v46 + 40) = v82;
  *(_QWORD *)(v46 + 44) = v83;
  ++*(_DWORD *)(a1 + 604);
  return result;
}

uint64_t *JSC::JIT::emit_op_put_by_val<JSC::OpPutByValDirect>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  _QWORD *v86;
  __int128 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  _DWORD *v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _DWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _DWORD *v141;
  _DWORD *v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  char v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  __int16 v151;
  int v152;
  int v153;
  _OWORD v154[2];

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    v12 = *((__int16 *)a2 + 2);
    if (v12 <= 63)
      v13 = v12;
    else
      v13 = (v12 + 1073741760);
    v14 = *((__int16 *)a2 + 3);
    if (v14 <= 63)
      v15 = v14;
    else
      v15 = (v14 + 1073741760);
    v16 = a2[8];
    v17 = *((unsigned __int16 *)a2 + 5);
    if (v10 <= 63)
    {
LABEL_9:
      v18 = v10;
LABEL_10:
      v19 = (v18 << 35) | 0x1D;
LABEL_11:
      JSC::MacroAssemblerARM64::load64(a1, v19, 0, a4, a5, a6, a7, a8);
      goto LABEL_12;
    }
    goto LABEL_59;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    v103 = (char)a2[2];
    if (v103 <= 15)
      v13 = v103;
    else
      v13 = (v103 + 1073741808);
    v104 = (char)a2[3];
    if (v104 <= 15)
      v15 = v104;
    else
      v15 = (v104 + 1073741808);
    v16 = a2[4];
    v17 = a2[5];
    if (v10 <= 15)
      goto LABEL_9;
LABEL_59:
    v105 = v10 + v11;
    goto LABEL_60;
  }
  v105 = *(_DWORD *)(a2 + 2);
  v13 = *(unsigned int *)(a2 + 6);
  v15 = *(unsigned int *)(a2 + 10);
  v16 = a2[14];
  v17 = *(_DWORD *)(a2 + 18);
LABEL_60:
  v18 = v105;
  if (v105 < 0x40000000)
    goto LABEL_10;
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v105))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v106, v107, v108, v109, v110);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v124, v125, v126, v127, v128);
    v19 = v18 << 35;
    goto LABEL_11;
  }
  v111 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v111 <= (v18 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987D81F0);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v111[2 * (v18 - 0x40000000) + 2], 0, v106, v107, v108, v109, v110);
LABEL_12:
  if ((int)v13 < 0x40000000)
  {
    v25 = (v13 << 35) | 0x1D;
LABEL_14:
    JSC::MacroAssemblerARM64::load64(a1, v25, 1, v20, v21, v22, v23, v24);
    goto LABEL_15;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v13))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v112, v113, v114, v115, v116);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v129, v130, v131, v132, v133);
    v25 = (v13 << 35) | 1;
    goto LABEL_14;
  }
  v117 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v117 <= (v13 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987D8210);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v117[2 * (v13 - 0x40000000) + 2], 1, v112, v113, v114, v115, v116);
LABEL_15:
  if ((int)v15 >= 0x40000000)
  {
    if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v15))
    {
      v123 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
      if (*v123 <= (v15 - 0x40000000))
      {
        __break(0xC471u);
        JUMPOUT(0x1987D8230);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v123[2 * (v15 - 0x40000000) + 2], 2, v118, v119, v120, v121, v122);
      goto LABEL_18;
    }
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, v118, v119, v120, v121, v122);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v134, v135, v136, v137, v138);
    v31 = (v15 << 35) | 2;
  }
  else
  {
    v31 = (v15 << 35) | 0x1D;
  }
  JSC::MacroAssemblerARM64::load64(a1, v31, 2, v26, v27, v28, v29, v30);
LABEL_18:
  v32 = *(_DWORD *)(a1 + 888);
  v33 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v32 + 136), 3, v34, v35, v36, v37);
  v42 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v42)
    v43 = *(unsigned __int16 *)(v42 + 72);
  else
    v43 = *(_DWORD *)(v42 + 240);
  JSC::MacroAssemblerARM64::add64(a1, ((v43 + 3) & 0xFFFFFFFC) + 12 * v17, 25, 4, v38, v39, v40, v41);
  if ((int)v18 < 0x40000000)
    goto LABEL_21;
  v139 = *(_QWORD *)(a1 + 808);
  v140 = (v18 - 0x40000000);
  v141 = *(_DWORD **)(v139 + 120);
  if (!v141 || *v141 <= v140 || *((_BYTE *)v141 + v140 + 4) != 3)
  {
    v142 = *(_DWORD **)(v139 + 112);
    if (*v142 <= v140)
    {
      __break(0xC471u);
      goto LABEL_95;
    }
    if ((*(_QWORD *)&v142[2 * v140 + 2] & 0xFFFE000000000002) != 0)
    {
LABEL_21:
      JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v46, v47, v48, v49, v50, (uint64_t)v154);
      v51 = *(_DWORD *)(a1 + 640);
      LODWORD(v145) = v154[0];
      *(_QWORD *)((char *)&v145 + 4) = *(_QWORD *)((char *)v154 + 4);
      HIDWORD(v145) = v51;
      v52 = *(unsigned int *)(a1 + 660);
      if ((_DWORD)v52 == *(_DWORD *)(a1 + 656))
      {
        WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v145);
      }
      else
      {
        v53 = *(_QWORD *)(a1 + 648) + 16 * v52;
        *(_DWORD *)v53 = v154[0];
        *(_QWORD *)(v53 + 4) = *(_QWORD *)((char *)&v145 + 4);
        *(_DWORD *)(v53 + 12) = HIDWORD(v145);
        ++*(_DWORD *)(a1 + 660);
      }
    }
  }
  if (*(_BYTE *)(a1 + 793))
  {
    v54 = *(_DWORD *)(a1 + 200);
    if (v54 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v44, v45, v46, v47, v48, v49, v50);
      v54 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v54) = -1203765243;
    v55 = *(_DWORD *)(a1 + 200);
    v56 = v55 + 4;
    *(_DWORD *)(a1 + 200) = v55 + 4;
    if ((v55 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v44, v45, v46, v47, v48, v49, v50);
      v56 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v56) = -1207959419;
    *(_DWORD *)(a1 + 200) += 4;
  }
  v57 = 0;
  v58 = *(unsigned int *)(a1 + 640);
  v59 = 2;
  if ((_DWORD)v58 != -1 && (_DWORD)v58 != 0x3FFFFFFF)
  {
    if (v58 >> 28)
    {
      v57 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v57 = 0;
      *(_DWORD *)(v57 + 8) = v58;
      LODWORD(v58) = *(_DWORD *)(a1 + 640);
      v59 = 1;
    }
    else
    {
      v59 = 0;
      v57 = v58 << 36;
    }
  }
  v144 = v57 | v59;
  v154[0] = xmmword_199156F50;
  LOWORD(v143) = 772;
  if (v16)
    v60 = 13;
  else
    v60 = 12;
  JSC::JITPutByValGenerator::JITPutByValGenerator((uint64_t)&v145, 0, v33, 1, 0, &v144, v58 >> 2, v60, (uint64_t)v154, 0, 0, 1, 0, 2, v143);
  if ((v144 & 1) != 0 && (v144 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v144 & 0xFFFFFFFF8, v61, v62, v63, v64, v65, v66, v67);
  if ((int)v13 >= 0x40000000)
  {
    v99 = *(_QWORD *)(a1 + 808);
    v100 = (v13 - 0x40000000);
    v101 = *(_DWORD **)(v99 + 120);
    if (!v101 || *v101 <= v100 || *((_BYTE *)v101 + v100 + 4) != 3)
    {
      v102 = *(_DWORD **)(v99 + 112);
      if (*v102 > v100)
      {
        if (*(_QWORD *)&v102[2 * v100 + 2] >= 0xFFFE000000000000)
          *(_BYTE *)(v33 + 1) |= 1u;
        goto LABEL_38;
      }
      __break(0xC471u);
LABEL_95:
      JUMPOUT(0x1987D8174);
    }
  }
LABEL_38:
  JSC::JITInlineCacheGenerator::generateBaselineDataICFastPath((uint64_t)&v145, (JSC::MacroAssemblerARM64 *)a1, 3, v63, v64, v65, v66, v67);
  JSC::JIT::resetSP((JSC::JIT *)a1, v68, v69, v70, v71, v72, v73, v74);
  v79 = *(_DWORD *)(a1 + 640);
  LODWORD(v154[0]) = -1;
  *(_QWORD *)((char *)v154 + 4) = 0xFF000F4100000000;
  HIDWORD(v154[0]) = v79;
  v80 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v80 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)v154);
  }
  else
  {
    v81 = *(_QWORD *)(a1 + 648) + 16 * v80;
    *(_DWORD *)v81 = -1;
    *(_QWORD *)(v81 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v81 + 12) = v79;
    ++*(_DWORD *)(a1 + 660);
  }
  v82 = (_QWORD *)(a1 + 496);
  v83 = *(unsigned int *)(a1 + 508);
  if ((_DWORD)v83 == *(_DWORD *)(a1 + 504))
  {
    v87 = (__int128 *)WTF::Vector<JSC::JITPutByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v82, v83 + 1, (unint64_t)&v145);
    v97 = *(_QWORD *)(a1 + 496) + 56 * *(unsigned int *)(a1 + 508);
    v98 = *v87;
    *(_BYTE *)(v97 + 16) = *((_BYTE *)v87 + 16);
    *(_OWORD *)v97 = v98;
    *(_DWORD *)(v97 + 20) = *((_DWORD *)v87 + 5);
    *(_DWORD *)(v97 + 24) = *((_DWORD *)v87 + 6);
    *(_DWORD *)(v97 + 28) = *((_DWORD *)v87 + 7);
    *(_QWORD *)(v97 + 32) = *((_QWORD *)v87 + 4);
    *(_WORD *)(v97 + 40) = *((_WORD *)v87 + 20);
    *(_DWORD *)(v97 + 44) = *((_DWORD *)v87 + 11);
    v86 = (_QWORD *)(v97 + 48);
  }
  else
  {
    v84 = *v82 + 56 * v83;
    v85 = v145;
    *(_BYTE *)(v84 + 16) = v146;
    *(_OWORD *)v84 = v85;
    *(_DWORD *)(v84 + 20) = v147;
    *(_DWORD *)(v84 + 24) = v148;
    *(_DWORD *)(v84 + 28) = v149;
    *(_QWORD *)(v84 + 32) = v150;
    *(_WORD *)(v84 + 40) = v151;
    *(_DWORD *)(v84 + 44) = v152;
    v86 = (_QWORD *)(v84 + 48);
    v87 = &v145;
  }
  *v86 = *((_QWORD *)v87 + 6);
  ++*(_DWORD *)(a1 + 508);
  JSC::JIT::emitWriteBarrier(a1, v18, 0x3FFFFFFFLL, 1, v75, v76, v77, v78);
  v95 = *(_DWORD *)(a1 + 200);
  v153 = v95;
  if (v95 < *(_DWORD *)(a1 + 52))
  {
    do
    {
      if ((v95 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v88, v89, v90, v91, v92, v93, v94);
        v95 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v95) = -721215457;
      v95 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v95;
    }
    while (v95 < *(_DWORD *)(a1 + 52));
    v153 = v95;
  }
  *(_DWORD *)(a1 + 208) = 0;
  return WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>((uint64_t *)(a1 + 408), (int *)(a1 + 640), &v153, (uint64_t)v154);
}

void JSC::JIT::emitSlow_op_put_by_val(uint64_t a1, unsigned __int8 *a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int32x2_t v9;
  int v10;
  int v11;
  int v12;
  int32x2_t v13;
  int v14;
  int v15;
  int8x8_t v16;
  int v17;
  unsigned __int8 v18;
  int v19;

  v8 = *a2;
  if (v8 == 128)
  {
    v13.i32[0] = *((__int16 *)a2 + 1);
    v13.i32[1] = *((__int16 *)a2 + 2);
    v16 = vbsl_s8((int8x8_t)vcgt_s32(v13, (int32x2_t)0x3F0000003FLL), (int8x8_t)vadd_s32(v13, vdup_n_s32(0x3FFFFFC0u)), (int8x8_t)v13);
    v14 = *((__int16 *)a2 + 3);
    v15 = v14 + 1073741760;
    if (v14 <= 63)
      v15 = *((__int16 *)a2 + 3);
    v17 = v15;
    v18 = a2[8];
    v12 = *((unsigned __int16 *)a2 + 5);
  }
  else if (v8 == 130)
  {
    v16 = *(int8x8_t *)(a2 + 2);
    v17 = *(_DWORD *)(a2 + 10);
    v18 = *(_DWORD *)(a2 + 14);
    v12 = *(_DWORD *)(a2 + 18);
  }
  else
  {
    v9.i32[0] = (char)a2[1];
    v9.i32[1] = (char)a2[2];
    v16 = vbsl_s8((int8x8_t)vcgt_s32(v9, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32(v9, vdup_n_s32(0x3FFFFFF0u)), (int8x8_t)v9);
    v10 = (char)a2[3];
    v11 = v10 + 1073741808;
    if (v10 <= 15)
      v11 = (char)a2[3];
    v17 = v11;
    v18 = a2[4];
    v12 = a2[5];
  }
  v19 = v12;
  JSC::JIT::generatePutByValSlowCase<JSC::OpPutByVal>(a1, (uint64_t)&v16, a3, a4, a5, a6, a7, a8);
}

void JSC::JIT::generatePutByValSlowCase<JSC::OpPutByVal>(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::ExecutableMemoryHandle *v49;
  __int128 v50;
  uint64_t v51;

  v8 = *(_DWORD *)(a1 + 700);
  *(_DWORD *)(a1 + 700) = v8 + 1;
  if (*(_DWORD *)(a1 + 508) <= v8)
    goto LABEL_18;
  v10 = *(_QWORD *)(a1 + 496) + 56 * v8;
  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v11, v12, v13, v14, v15, v16, v17);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(v10 + 28) = i;
  v19 = *(char *)(v10 + 16);
  if (v19 >= 0x1F)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1987D85A4);
  }
  JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))off_1E3596240[v19], v13, v14, v15, v16, v17, &v48);
  v27 = v48;
  *(_DWORD *)(a1 + 208) = 0;
  v28 = *(_DWORD *)(a1 + 200);
  if (v28 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
    v28 = *(_DWORD *)(a1 + 200);
  }
  v29 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = -1811939328;
  v30 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v30;
  LOBYTE(v51) = -1;
  BYTE3(v51) = 15;
  *(_WORD *)((char *)&v51 + 1) = 65;
  *(_QWORD *)&v50 = v30 - 4;
  *((_QWORD *)&v50 + 1) = v27;
  WORD2(v51) = 384;
  v31 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v31 == *(_DWORD *)(a1 + 40))
  {
    v38 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v31 + 1, (unint64_t)&v50, v22, v23, v24, v25, v26);
    v32 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v32 = 0;
    *(_QWORD *)(v32 + 8) = 0;
    *(_BYTE *)(v32 + 16) = -1;
    v39 = (((*(unsigned __int8 *)(v32 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v32 + 17) = 65;
    *(_BYTE *)(v32 + 19) = BYTE2(v39);
    *(_WORD *)(v32 + 20) &= 0xFC00u;
    v33 = *(_OWORD *)v38;
    v34 = *(_QWORD *)(v38 + 16);
  }
  else
  {
    v32 = *v29 + 24 * v31;
    v33 = v50;
    v34 = v51;
  }
  *(_QWORD *)(v32 + 16) = v34;
  *(_OWORD *)v32 = v33;
  ++*(_DWORD *)(a1 + 44);
  v35 = (unsigned int *)v49;
  v49 = 0;
  if (v35)
  {
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v35, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
  }
}

void JSC::JIT::emitSlow_op_put_by_val_direct(uint64_t a1, unsigned __int8 *a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int32x2_t v9;
  int v10;
  int v11;
  int v12;
  int32x2_t v13;
  int v14;
  int v15;
  int8x8_t v16;
  int v17;
  unsigned __int8 v18;
  int v19;

  v8 = *a2;
  if (v8 == 128)
  {
    v9.i32[0] = *((__int16 *)a2 + 1);
    v9.i32[1] = *((__int16 *)a2 + 2);
    v16 = vbsl_s8((int8x8_t)vcgt_s32(v9, (int32x2_t)0x3F0000003FLL), (int8x8_t)vadd_s32(v9, vdup_n_s32(0x3FFFFFC0u)), (int8x8_t)v9);
    v10 = *((__int16 *)a2 + 3);
    v11 = v10 + 1073741760;
    if (v10 <= 63)
      v11 = *((__int16 *)a2 + 3);
    v17 = v11;
    v18 = a2[8];
    v12 = *((unsigned __int16 *)a2 + 5);
  }
  else if (v8 == 130)
  {
    v16 = *(int8x8_t *)(a2 + 2);
    v17 = *(_DWORD *)(a2 + 10);
    v18 = *(_DWORD *)(a2 + 14);
    v12 = *(_DWORD *)(a2 + 18);
  }
  else
  {
    v13.i32[0] = (char)a2[1];
    v13.i32[1] = (char)a2[2];
    v16 = vbsl_s8((int8x8_t)vcgt_s32(v13, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32(v13, vdup_n_s32(0x3FFFFFF0u)), (int8x8_t)v13);
    v14 = (char)a2[3];
    v15 = v14 + 1073741808;
    if (v14 <= 15)
      v15 = (char)a2[3];
    v17 = v15;
    v18 = a2[4];
    v12 = a2[5];
  }
  v19 = v12;
  JSC::JIT::generatePutByValSlowCase<JSC::OpPutByVal>(a1, (uint64_t)&v16, a3, a4, a5, a6, a7, a8);
}

unsigned int *JSC::JIT::emit_op_put_private_name(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  _DWORD *v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  char v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  __int16 v104;
  int v105;
  uint64_t v106;
  int v107[3];
  char v108;
  __int128 v109;

  JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpPutPrivateName>((uint64_t)v107, a2);
  v8 = v107[0];
  v9 = v107[1];
  v10 = v107[2];
  if (v107[0] < 0x40000000)
  {
    v11 = ((unint64_t)v107[0] << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v11, 0, v3, v4, v5, v6, v7);
    goto LABEL_4;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v107[0]))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v59, v60, v61, v62, v63);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v77, v78, v79, v80, v81);
    v11 = v8 << 35;
    goto LABEL_3;
  }
  v64 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v64 <= (v8 - 0x40000000))
    goto LABEL_48;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v64[2 * (v8 - 0x40000000) + 2], 0, v59, v60, v61, v62, v63);
LABEL_4:
  if ((int)v9 < 0x40000000)
  {
    v17 = (v9 << 35) | 0x1D;
LABEL_6:
    JSC::MacroAssemblerARM64::load64(a1, v17, 1, v12, v13, v14, v15, v16);
    goto LABEL_7;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v9))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v65, v66, v67, v68, v69);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v82, v83, v84, v85, v86);
    v17 = (v9 << 35) | 1;
    goto LABEL_6;
  }
  v70 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v70 <= (v9 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987D8B80);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v70[2 * (v9 - 0x40000000) + 2], 1, v65, v66, v67, v68, v69);
LABEL_7:
  if ((int)v10 < 0x40000000)
  {
    v23 = (v10 << 35) | 0x1D;
LABEL_9:
    JSC::MacroAssemblerARM64::load64(a1, v23, 2, v18, v19, v20, v21, v22);
    goto LABEL_10;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v10))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, v71, v72, v73, v74, v75);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v87, v88, v89, v90, v91);
    v23 = (v10 << 35) | 2;
    goto LABEL_9;
  }
  v76 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v76 <= (v10 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987D8BA0);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v76[2 * (v10 - 0x40000000) + 2], 2, v71, v72, v73, v74, v75);
LABEL_10:
  v24 = *(_DWORD *)(a1 + 888);
  v25 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v24 + 136), 3, v26, v27, v28, v29);
  if ((int)v8 < 0x40000000)
    goto LABEL_11;
  v92 = *(_QWORD *)(a1 + 808);
  v93 = (v8 - 0x40000000);
  v94 = *(_DWORD **)(v92 + 120);
  if (v94 && *v94 > v93 && *((_BYTE *)v94 + v93 + 4) == 3)
    goto LABEL_13;
  v95 = *(_DWORD **)(v92 + 112);
  if (*v95 <= v93)
  {
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x1987D8B60);
  }
  if ((*(_QWORD *)&v95[2 * v93 + 2] & 0xFFFE000000000002) != 0)
  {
LABEL_11:
    JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v30, v31, v32, v33, v34, (uint64_t)&v109);
    v35 = *(_QWORD *)((char *)&v109 + 4);
    v36 = *(_DWORD *)(a1 + 640);
    LODWORD(v98) = v109;
    *(_QWORD *)((char *)&v98 + 4) = *(_QWORD *)((char *)&v109 + 4);
    HIDWORD(v98) = v36;
    v37 = *(unsigned int *)(a1 + 660);
    if ((_DWORD)v37 == *(_DWORD *)(a1 + 656))
    {
      WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v98);
    }
    else
    {
      v38 = *(_QWORD *)(a1 + 648) + 16 * v37;
      *(_DWORD *)v38 = v109;
      *(_QWORD *)(v38 + 4) = v35;
      *(_DWORD *)(v38 + 12) = v36;
      ++*(_DWORD *)(a1 + 660);
    }
  }
LABEL_13:
  JSC::CodeOrigin::CodeOrigin(&v97, *(unsigned int *)(a1 + 640), 0);
  v39 = (unint64_t)*(unsigned int *)(a1 + 640) >> 2;
  v109 = xmmword_199156F50;
  LOWORD(v96) = 1023;
  if (v108 == 2)
    v40 = 14;
  else
    v40 = 16;
  JSC::JITPutByValGenerator::JITPutByValGenerator((uint64_t)&v98, 0, v25, 1, 0, &v97, v39, v40, (uint64_t)&v109, 0, 0, 1, 0, 2, v96);
  if ((v97 & 1) != 0 && (v97 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v97 & 0xFFFFFFFF8, v41, v42, v43, v44, v45, v46, v47);
  JSC::JITInlineCacheGenerator::generateBaselineDataICFastPath((uint64_t)&v98, (JSC::MacroAssemblerARM64 *)a1, 3, v43, v44, v45, v46, v47);
  v52 = *(_DWORD *)(a1 + 640);
  LODWORD(v109) = -1;
  *(_QWORD *)((char *)&v109 + 4) = 0xFF000F4100000000;
  HIDWORD(v109) = v52;
  v53 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v53 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v109);
  }
  else
  {
    v54 = *(_QWORD *)(a1 + 648) + 16 * v53;
    *(_DWORD *)v54 = -1;
    *(_QWORD *)(v54 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v54 + 12) = v52;
    ++*(_DWORD *)(a1 + 660);
  }
  v55 = *(_DWORD *)(a1 + 508);
  if (v55 == *(_DWORD *)(a1 + 504))
  {
    WTF::Vector<JSC::JITPutByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITPutByValGenerator&>(a1 + 496, (unint64_t)&v98);
  }
  else
  {
    v56 = *(_QWORD *)(a1 + 496) + 56 * v55;
    v57 = v98;
    *(_BYTE *)(v56 + 16) = v99;
    *(_OWORD *)v56 = v57;
    *(_DWORD *)(v56 + 20) = v100;
    *(_DWORD *)(v56 + 24) = v101;
    *(_DWORD *)(v56 + 28) = v102;
    *(_QWORD *)(v56 + 32) = v103;
    *(_WORD *)(v56 + 40) = v104;
    *(_DWORD *)(v56 + 44) = v105;
    *(_QWORD *)(v56 + 48) = v106;
    ++*(_DWORD *)(a1 + 508);
  }
  return JSC::JIT::emitWriteBarrier(a1, v8, 0x3FFFFFFFLL, 1, v48, v49, v50, v51);
}

uint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpPutPrivateName>(uint64_t result, unsigned __int8 *a2)
{
  int v2;
  int32x2_t v3;
  int v4;
  int v5;
  int v6;

  v2 = *a2;
  if (v2 == 130)
  {
    *(_QWORD *)result = *(_QWORD *)(a2 + 2);
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 10);
    *(_BYTE *)(result + 12) = *(_DWORD *)(a2 + 14);
    v6 = *(_DWORD *)(a2 + 18);
LABEL_6:
    *(_DWORD *)(result + 16) = v6;
    return result;
  }
  if (v2 != 128)
  {
    v3.i32[0] = (char)a2[1];
    v3.i32[1] = (char)a2[2];
    *(int8x8_t *)result = vbsl_s8((int8x8_t)vcgt_s32(v3, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32(v3, vdup_n_s32(0x3FFFFFF0u)), (int8x8_t)v3);
    v4 = (char)a2[3];
    v5 = v4 + 1073741808;
    if (v4 <= 15)
      v5 = (char)a2[3];
    *(_DWORD *)(result + 8) = v5;
    *(_BYTE *)(result + 12) = a2[4];
    v6 = a2[5];
    goto LABEL_6;
  }
  return JSC::OpPutPrivateName::OpPutPrivateName(result, (const unsigned __int16 *)a2 + 1);
}

uint64_t JSC::JIT::emitSlow_op_put_private_name(uint64_t result, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];
  int v37;

  v8 = *(_DWORD *)(result + 700);
  *(_DWORD *)(result + 700) = v8 + 1;
  if (*(_DWORD *)(result + 508) <= v8)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = result;
    v10 = *(_QWORD *)(result + 496) + 56 * v8;
    JSC::JIT::linkAllSlowCases(result, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)v9, v11, v12, v13, v14, v15, v16, v17, &v37);
    *(_DWORD *)(v10 + 28) = v37;
    JSC::InlineCacheCompiler::generateSlowPathCode(*(_QWORD *)(v9 + 352), *(char *)(v10 + 16), v18, v19, v20, v21, v22, v36);
    JSC::MacroAssembler::nearCallThunk<(WTF::PtrTag)0>(v9, v36[0], v23, v24, v25, v26, v27, v28);
    return JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  }
  return result;
}

void JSC::JIT::emit_op_put_getter_by_id(uint64_t a1, JSC::OpPutSetterById *this)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  JSC::ARM64LogicalImmediate *v10;
  JSC::ARM64LogicalImmediate *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;

  v3 = JSC::OpPutSetterById::decode(this, (const unsigned __int8 *)this);
  v9 = v3;
  v11 = v10;
  if ((int)v3 < 0x40000000)
  {
    v12 = (v3 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v12, 0, v4, v5, v6, v7, v8);
    goto LABEL_4;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v3))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v29, v30, v31, v32, v33);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v41, v42, v43, v44, v45);
    v12 = v9 << 35;
    goto LABEL_3;
  }
  v34 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v34 <= (v9 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987D8EDCLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v34[2 * (v9 - 0x40000000) + 2], 0, v29, v30, v31, v32, v33);
LABEL_4:
  v18 = (unint64_t)v11 >> 32;
  if (SHIDWORD(v11) < 0x40000000)
  {
    v19 = (v18 << 35) | 0x1D;
LABEL_6:
    JSC::MacroAssemblerARM64::load64(a1, v19, 1, v13, v14, v15, v16, v17);
    goto LABEL_7;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), SHIDWORD(v11)))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v35, v36, v37, v38, v39);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v46, v47, v48, v49, v50);
    v19 = (v18 << 35) | 1;
    goto LABEL_6;
  }
  v40 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v40 <= (HIDWORD(v11) - 0x40000000))
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x1987D8EBCLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v40[2 * (HIDWORD(v11) - 0x40000000) + 2], 1, v35, v36, v37, v38, v39);
LABEL_7:
  JSC::MacroAssemblerARM64::load64(a1, 0x80000001ALL, 2, v20, v21, v22, v23, v24);
  v28 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 104);
  if (*v28 <= HIDWORD(v9))
    goto LABEL_19;
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,WTF::UniquedStringImpl *,int,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,int,JSC::ARM64Registers::RegisterID>(&v51, (unsigned __int8 *)a1, (uint64_t)operationPutGetterById, *(_QWORD *)&v28[2 * HIDWORD(v9) + 2], v11, v25, v26, v27);
}

void JSC::JIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,WTF::UniquedStringImpl *,int,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,int,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, JSC::ARM64LogicalImmediate *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::AssemblerBuffer *v13;
  unsigned int v14;
  JSC::ARM64LogicalImmediate *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint8x8_t v22;
  __int32 v23;
  uint8x8_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  JSC::AssemblerBuffer *v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  _BYTE *v43;
  int v44;
  unsigned __int8 *v45;
  char *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  int v49;
  unsigned __int8 *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int8x8_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  char *v91;
  char *v92;
  JSC::ARM64LogicalImmediate *v93;
  void *__dst;
  uint64_t v95;
  int v96;
  __int16 v97;

  v9 = a4;
  v10 = a3;
  v11 = (uint64_t)a2;
  __dst = &v96;
  v96 = 16777218;
  v97 = 1025;
  v95 = 0x300000003;
  v13 = (JSC::AssemblerBuffer *)(a2 + 56);
  v14 = 3;
  v15 = (JSC::ARM64LogicalImmediate *)this;
  do
  {
    v16 = 0;
    v17 = 0;
    v18 = __dst;
    v19 = v14;
    do
    {
      if ((*((_BYTE *)__dst + v16 + 1) & 0x40) != 0)
      {
LABEL_67:
        __break(1u);
LABEL_68:
        JSC::AssemblerBuffer::outOfLineGrow(v13, (uint64_t)a2, a3, a4, (uint64_t)this, a6, a7, a8);
        v58 = *(_DWORD *)(v11 + 200);
        goto LABEL_60;
      }
      v17 |= 1 << *((_BYTE *)__dst + v16 + 1);
      v16 += 2;
    }
    while (2 * v14 != v16);
    v20 = 0;
    do
    {
      v21 = *((_BYTE *)__dst + v20) & 0x7F;
      if (v21 >= 0x40)
        goto LABEL_67;
      v17 &= ~(1 << v21);
      v20 += 2;
    }
    while (2 * v14 != v20);
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
    v22.i16[0] = vaddlv_u8(v22);
    v23 = v22.i32[0];
    v24 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v17));
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.i32[0] + v23)
    {
      v8 = 0;
      if (v14 <= 1)
        v25 = 1;
      else
        v25 = v14;
      v26 = 2 * v25;
      while (1)
      {
        v27 = v8[(_QWORD)__dst + 1];
        if ((v27 & 0x7Fu) >= 0x40)
          goto LABEL_67;
        if (((v17 >> (v27 & 0x7F)) & 1) != 0)
          break;
        v8 += 2;
        if ((unsigned __int8 *)v26 == v8)
          goto LABEL_51;
      }
      v28 = v8[(_QWORD)__dst];
      if (v28 != v27)
      {
        v29 = (char)v28;
        if ((char)v28 == 63)
        {
          v30 = *(_DWORD *)(v11 + 200);
          v31 = *(_DWORD *)(v11 + 192);
          if (v27 == 31)
            goto LABEL_45;
          v33 = v27 & 0x1F | 0xD2800000;
        }
        else
        {
          v30 = *(_DWORD *)(v11 + 200);
          v31 = *(_DWORD *)(v11 + 192);
          v32 = (char)v27 == 31 || v29 == 31;
          if (!v32)
          {
            v33 = v27 & 0xFFE0FFFF | ((v29 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_46;
          }
LABEL_45:
          v33 = (char)v27 | (32 * v29) | 0x91000000;
        }
LABEL_46:
        if (v30 + 4 > v31)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v13, (uint64_t)a2, a3, a4, (uint64_t)this, a6, a7, a8);
          v30 = *(_DWORD *)(v11 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v11 + 56) + v30) = v33;
        *(_DWORD *)(v11 + 200) += 4;
        v18 = __dst;
        v19 = HIDWORD(v95);
      }
      memmove(&v8[(_QWORD)v18], &v8[(_QWORD)v18 + 2], 2 * v19 - (_QWORD)v8 - 2);
      v14 = HIDWORD(v95) - 1;
      goto LABEL_50;
    }
    v93 = v15;
    v34 = v9;
    v35 = a1;
    v36 = v10;
    v37 = v13;
    v38 = *(_BYTE *)__dst;
    v39 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v11, *(char *)__dst, v39, a4, (uint64_t)this, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v95) - 2);
    v40 = (HIDWORD(v95) - 1);
    v32 = HIDWORD(v95) == 1;
    HIDWORD(v95) = v40;
    v8 = (unsigned __int8 *)__dst;
    v41 = (unsigned __int8 *)__dst + 2 * v40;
    if (v32)
    {
      v48 = 0;
      v49 = 0;
      v44 = 0;
      a2 = v41;
    }
    else
    {
      v42 = 2 * v40;
      v43 = __dst;
      while (*v43 != v39)
      {
        v43 += 2;
        v42 -= 2;
        if (!v42)
          goto LABEL_30;
      }
      *v43 = v38;
LABEL_30:
      v44 = 0;
      v45 = v8;
      a2 = v41;
      v46 = (char *)v41;
      do
      {
        if (*v8 == v8[1])
        {
          v47 = v8;
          if (v46 != (char *)__dst + 2 * HIDWORD(v95))
          {
            v92 = (char *)v41;
            if (v8 == a2)
            {
              v47 = (unsigned __int8 *)v46;
            }
            else
            {
              v90 = v45 - a2;
              v91 = v46;
              memmove(v46, a2, v45 - a2);
              v47 = (unsigned __int8 *)&v91[v90];
            }
            v41 = (unsigned __int8 *)v92;
          }
          a2 = v8 + 2;
          ++v44;
          v46 = (char *)v47;
        }
        v8 += 2;
        v45 += 2;
      }
      while (v8 < v41);
      v8 = (unsigned __int8 *)__dst;
      v48 = HIDWORD(v95);
      v49 = HIDWORD(v95);
      v41 = (unsigned __int8 *)v46;
    }
    v50 = &v8[2 * v48];
    v13 = v37;
    if (a2 != v50)
    {
      memmove(v41, a2, v50 - a2);
      v49 = HIDWORD(v95);
    }
    v14 = v49 - v44;
    v10 = v36;
    a1 = v35;
    v9 = v34;
    v15 = v93;
LABEL_50:
    HIDWORD(v95) = v14;
LABEL_51:
    ;
  }
  while (v14);
  v51 = __dst;
  if (&v96 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v95) = 0;
    WTF::fastFree((unint64_t)v51, a2, a3, a4, (uint64_t)this, a6, a7, a8);
  }
  LODWORD(v8) = -1207811152;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v11, v15, 3, a4, (uint64_t)this, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v11, v9, 2, v52, v53, v54, v55, v56);
  v57 = *(unsigned int *)(v11 + 640);
  if (v57 >= 4)
  {
    if (!*(_BYTE *)(v11 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1987D93E8);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v11, (JSC::ARM64LogicalImmediate *)(v57 >> 2), v11 + 264, a4, (uint64_t)this, a6, a7, a8);
  }
  else
  {
    LODWORD(v8) = -1207811137;
  }
  v58 = *(_DWORD *)(v11 + 200);
  if (v58 + 4 > *(_DWORD *)(v11 + 192))
    goto LABEL_68;
LABEL_60:
  *(_DWORD *)(*(_QWORD *)(v11 + 56) + v58) = (_DWORD)v8;
  *(_DWORD *)(v11 + 200) += 4;
  JSC::JIT::appendCall(v11, v10, a3, a4, (uint64_t)this, a6, a7, a8, a1);
  JSC::MacroAssemblerARM64::branchTest64(v11, 1, 0, 0xFFFFFFFFLL, v59, v60, v61, v62, (uint64_t)&__dst, v63);
  v69 = *(_QWORD *)(*(_QWORD *)(v11 + 352) + 90440);
  v70 = *(_QWORD *)(v69 + 8);
  v71 = *(unsigned int **)(v69 + 16);
  if (v71)
  {
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 + 1, v71));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v70, v11, v64, v65, v66, v67, v68);
    do
    {
      v80 = __ldaxr(v71);
      v81 = v80 - 1;
    }
    while (__stlxr(v81, v71));
    if (!v81)
    {
      atomic_store(1u, v71);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v71, v73, v74, v75, v76, v77, v78, v79);
      WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v70, v11, v64, v65, v66, v67, v68);
  }
}

void JSC::JIT::emit_op_put_setter_by_id(uint64_t a1, JSC::OpPutSetterById *this)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  _DWORD *v36;
  unint64_t v37;
  BOOL v38;
  char **v39;
  JSC::AssemblerBuffer *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  _DWORD *v49;
  unint64_t v50;
  BOOL v51;
  char **v52;
  JSC::AssemblerBuffer *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  _DWORD *v58;
  _DWORD *v59;
  unint64_t v60;
  int v61;

  v3 = JSC::OpPutSetterById::decode(this, (const unsigned __int8 *)this);
  v11 = v3;
  v12 = v4;
  if ((int)v3 < 0x40000000)
  {
    v13 = (v3 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v13, 0, v6, v7, v8, v9, v10);
    goto LABEL_4;
  }
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v33 = (v3 - 0x40000000);
  v34 = *(_DWORD **)(v32 + 120);
  if (!v34 || *v34 <= v33)
    goto LABEL_15;
  v35 = *((unsigned __int8 *)v34 + v33 + 4);
  if ((v35 - 1) >= 2)
  {
    if (v35)
    {
      if (v35 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987D9768);
      }
      goto LABEL_26;
    }
LABEL_15:
    v36 = *(_DWORD **)(v32 + 112);
    if (*v36 <= v33)
    {
      __break(0xC471u);
      JUMPOUT(0x1987D9820);
    }
    v37 = *(_QWORD *)&v36[2 * v33 + 2];
    if (v37)
      v38 = (v37 & 0xFFFE000000000002) == 0;
    else
      v38 = 0;
    if (!v38)
      goto LABEL_51;
    v39 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x4C));
    if (v39 != &JSC::SymbolTable::s_info && v39 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_51;
LABEL_26:
    v41 = (JSC::AssemblerBuffer *)(a1 + 56);
    v42 = *(_DWORD *)(a1 + 200);
    if (v42 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v41, v4, v5, v6, v7, v8, v9, v10);
      v41 = (JSC::AssemblerBuffer *)(a1 + 56);
      v42 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v42) = -129956960;
    v43 = *(_DWORD *)(a1 + 200);
    v44 = v43 + 4;
    *(_DWORD *)(a1 + 200) = v43 + 4;
    if ((v43 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v41, v4, v5, v6, v7, v8, v9, v10);
      v44 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v44) = -129368064;
    *(_DWORD *)(a1 + 200) += 4;
    v13 = v11 << 35;
    goto LABEL_3;
  }
LABEL_51:
  v58 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v58 <= v33)
  {
    __break(0xC471u);
    JUMPOUT(0x1987D97E0);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v58[2 * v33 + 2], 0, v6, v7, v8, v9, v10);
LABEL_4:
  v21 = HIDWORD(v12);
  if (SHIDWORD(v12) < 0x40000000)
  {
    v22 = 29;
LABEL_6:
    JSC::MacroAssemblerARM64::load64(a1, v22 | (v21 << 35), 1, v16, v17, v18, v19, v20);
    goto LABEL_7;
  }
  v45 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v46 = (HIDWORD(v12) - 0x40000000);
  v47 = *(_DWORD **)(v45 + 120);
  if (!v47 || *v47 <= v46)
    goto LABEL_35;
  v48 = *((unsigned __int8 *)v47 + v46 + 4);
  if ((v48 - 1) >= 2)
  {
    if (v48)
    {
      if (v48 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987D9790);
      }
      goto LABEL_46;
    }
LABEL_35:
    v49 = *(_DWORD **)(v45 + 112);
    if (*v49 <= v46)
    {
      __break(0xC471u);
      JUMPOUT(0x1987D9840);
    }
    v50 = *(_QWORD *)&v49[2 * v46 + 2];
    if (v50)
      v51 = (v50 & 0xFFFE000000000002) == 0;
    else
      v51 = 0;
    if (!v51)
      goto LABEL_53;
    v52 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C));
    if (v52 != &JSC::SymbolTable::s_info && v52 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_53;
LABEL_46:
    v54 = (JSC::AssemblerBuffer *)(a1 + 56);
    v55 = *(_DWORD *)(a1 + 200);
    if (v55 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v54, v14, v15, v16, v17, v18, v19, v20);
      v54 = (JSC::AssemblerBuffer *)(a1 + 56);
      v21 = HIDWORD(v12);
      v55 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v55) = -129956959;
    v56 = *(_DWORD *)(a1 + 200);
    v57 = v56 + 4;
    *(_DWORD *)(a1 + 200) = v56 + 4;
    if ((v56 + 8) > *(_DWORD *)(a1 + 192))
    {
      v60 = v21;
      JSC::AssemblerBuffer::outOfLineGrow(v54, v14, v15, v16, v17, v18, v19, v20);
      v21 = v60;
      v57 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v57) = -129368031;
    *(_DWORD *)(a1 + 200) += 4;
    v22 = 1;
    goto LABEL_6;
  }
LABEL_53:
  v59 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v59 <= v46)
  {
    __break(0xC471u);
    JUMPOUT(0x1987D9800);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v59[2 * v46 + 2], 1, v16, v17, v18, v19, v20);
LABEL_7:
  v30 = *(_DWORD *)(a1 + 200);
  if (v30 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v23, v24, v25, v26, v27, v28, v29);
    v30 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v30) = -129989822;
  *(_DWORD *)(a1 + 200) += 4;
  v31 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 104);
  if (*v31 <= HIDWORD(v11))
  {
    __break(0xC471u);
    JUMPOUT(0x1987D97C0);
  }
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,WTF::UniquedStringImpl *,int,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,int,JSC::ARM64Registers::RegisterID>(&v61, (unsigned __int8 *)a1, (uint64_t)operationPutSetterById, *(_QWORD *)&v31[2 * HIDWORD(v11) + 2], (JSC::ARM64LogicalImmediate *)v12, v27, v28, v29);
}

void JSC::JIT::emit_op_put_getter_setter_by_id(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::AssemblerBuffer *v38;
  unsigned int v39;
  unsigned int *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint8x8_t v49;
  __int32 v50;
  uint8x8_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  unsigned int v60;
  char *v61;
  int v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  char *v67;
  char *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int8x8_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  unint64_t v149;
  char *v150;
  JSC::AssemblerBuffer *v151;
  int v152;
  void *__dst;
  uint64_t v154;
  uint64_t v155;

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    v12 = *((unsigned __int16 *)a2 + 2);
    v13 = *((unsigned __int16 *)a2 + 3);
    v100 = *((__int16 *)a2 + 4);
    if (v100 <= 63)
      v15 = v100;
    else
      v15 = (v100 + 1073741760);
    v101 = *((__int16 *)a2 + 5);
    if (v101 <= 63)
      v17 = v101;
    else
      v17 = (v101 + 1073741760);
    if ((int)v10 <= 63)
      goto LABEL_10;
LABEL_80:
    v10 = (v10 + v11);
    goto LABEL_81;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    v12 = a2[2];
    v13 = a2[3];
    v14 = (char)a2[4];
    if (v14 <= 15)
      v15 = v14;
    else
      v15 = (v14 + 1073741808);
    v16 = (char)a2[5];
    if (v16 <= 15)
      v17 = v16;
    else
      v17 = (v16 + 1073741808);
    if ((int)v10 < 16)
      goto LABEL_10;
    goto LABEL_80;
  }
  v10 = *(unsigned int *)(a2 + 2);
  v12 = *(_DWORD *)(a2 + 6);
  v13 = *(_DWORD *)(a2 + 10);
  v15 = *(unsigned int *)(a2 + 14);
  v17 = *(unsigned int *)(a2 + 18);
LABEL_81:
  if ((int)v10 < 0x40000000)
  {
LABEL_10:
    v18 = (v10 << 35) | 0x1D;
LABEL_11:
    JSC::MacroAssemblerARM64::load64(a1, v18, 0, a4, a5, a6, a7, a8);
    goto LABEL_12;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v10))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v102, v103, v104, v105, v106);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v125, v126, v127, v128, v129);
    v18 = v10 << 35;
    goto LABEL_11;
  }
  v107 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v107 <= (v10 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987DA050);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v107[2 * (v10 - 0x40000000) + 2], 0, v102, v103, v104, v105, v106);
LABEL_12:
  if ((int)v15 < 0x40000000)
  {
    v24 = (v15 << 35) | 0x1D;
LABEL_14:
    JSC::MacroAssemblerARM64::load64(a1, v24, 1, v19, v20, v21, v22, v23);
    goto LABEL_15;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v15))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v113, v114, v115, v116, v117);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v130, v131, v132, v133, v134);
    v24 = (v15 << 35) | 1;
    goto LABEL_14;
  }
  v118 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v118 <= (v15 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987DA070);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v118[2 * (v15 - 0x40000000) + 2], 1, v113, v114, v115, v116, v117);
LABEL_15:
  if ((int)v17 >= 0x40000000)
  {
    if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v17))
    {
      v124 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
      if (*v124 <= (v17 - 0x40000000))
      {
        __break(0xC471u);
LABEL_119:
        JUMPOUT(0x1987D9FBCLL);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v124[2 * (v17 - 0x40000000) + 2], 2, v119, v120, v121, v122, v123);
      goto LABEL_18;
    }
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, v119, v120, v121, v122, v123);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v135, v136, v137, v138, v139);
    v30 = (v17 << 35) | 2;
  }
  else
  {
    v30 = (v17 << 35) | 0x1D;
  }
  JSC::MacroAssemblerARM64::load64(a1, v30, 2, v25, v26, v27, v28, v29);
LABEL_18:
  v38 = (JSC::AssemblerBuffer *)(a1 + 56);
  v39 = *(_DWORD *)(a1 + 200);
  if (v39 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)v31, (uint64_t)v32, v33, v34, v35, v36, v37);
    v39 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = -129989821;
  *(_DWORD *)(a1 + 200) += 4;
  v40 = *(unsigned int **)(*(_QWORD *)(a1 + 808) + 104);
  if (*v40 <= v12)
  {
    v31 = "/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/wtf/TrailingArray.h";
    v32 = "reference WTF::TrailingArray<WTF::EmbeddedFixedVector<JSC::Identifier>, JSC::Identifier>::at [De"
          "rived = WTF::EmbeddedFixedVector<JSC::Identifier>, T = JSC::Identifier]";
    v33 = 171;
    __break(0xC471u);
LABEL_104:
    __break(1u);
LABEL_105:
    JSC::AssemblerBuffer::outOfLineGrow(v38, (uint64_t)v31, (uint64_t)v32, v33, v34, v35, v36, v37);
    v76 = *(_DWORD *)(a1 + 200);
    goto LABEL_66;
  }
  v41 = *(_QWORD *)&v40[2 * v12 + 2];
  __dst = &v155;
  v154 = 0x400000004;
  v155 = 0x502040101000003;
  v42 = 4;
  do
  {
    v43 = 0;
    v44 = 0;
    v45 = (char *)__dst;
    v46 = v42;
    do
    {
      if ((*((_BYTE *)__dst + v43 + 1) & 0x40) != 0)
        goto LABEL_104;
      v44 |= 1 << *((_BYTE *)__dst + v43 + 1);
      v43 += 2;
    }
    while (2 * v42 != v43);
    v47 = 0;
    do
    {
      v48 = *((_BYTE *)__dst + v47) & 0x7F;
      if (v48 >= 0x40)
        goto LABEL_104;
      v44 &= ~(1 << v48);
      v47 += 2;
    }
    while (2 * v42 != v47);
    v49 = (uint8x8_t)vcnt_s8((int8x8_t)v44);
    v49.i16[0] = vaddlv_u8(v49);
    v50 = v49.i32[0];
    v51 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v44));
    v51.i16[0] = vaddlv_u8(v51);
    if (v51.i32[0] + v50)
    {
      v17 = 0;
      if (v42 <= 1uLL)
        v52 = 1;
      else
        v52 = v42;
      v53 = 2 * v52;
      while (1)
      {
        v54 = *((unsigned __int8 *)__dst + v17 + 1);
        if ((v54 & 0x7Fu) >= 0x40)
          goto LABEL_104;
        if (((v44 >> (v54 & 0x7F)) & 1) != 0)
          break;
        v17 += 2;
        if (v53 == v17)
          goto LABEL_49;
      }
      v55 = *((unsigned __int8 *)__dst + v17);
      if (v55 == v54)
        goto LABEL_47;
      v56 = (char)v55;
      if ((char)v55 == 63)
      {
        v57 = *(_DWORD *)(a1 + 200);
        v58 = *(_DWORD *)(a1 + 192);
        if ((char)v54 != 31)
        {
          v60 = v54 & 0x1F | 0xD2800000;
          goto LABEL_44;
        }
      }
      else
      {
        v57 = *(_DWORD *)(a1 + 200);
        v58 = *(_DWORD *)(a1 + 192);
        v59 = v54 == 31 || v56 == 31;
        if (!v59)
        {
          v60 = v54 & 0xFFE0FFFF | ((v56 & 0x1F) << 16) | 0xAA0003E0;
LABEL_44:
          if (v57 + 4 > v58)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v38, (uint64_t)v31, (uint64_t)v32, v33, v34, v35, v36, v37);
            v57 = *(_DWORD *)(a1 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + v57) = v60;
          *(_DWORD *)(a1 + 200) += 4;
          v45 = (char *)__dst;
          v46 = HIDWORD(v154);
LABEL_47:
          memmove(&v45[v17], &v45[v17 + 2], 2 * v46 - v17 - 2);
          v42 = HIDWORD(v154) - 1;
          goto LABEL_48;
        }
      }
      v60 = (char)v54 | (32 * v56) | 0x91000000;
      goto LABEL_44;
    }
    v151 = v38;
    v108 = *(_BYTE *)__dst;
    v109 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a1, *(char *)__dst, v109, v33, v34, v35, v36, v37);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v154) - 2);
    v110 = (HIDWORD(v154) - 1);
    v59 = HIDWORD(v154) == 1;
    HIDWORD(v154) = v110;
    v17 = (unint64_t)__dst;
    v67 = (char *)__dst + 2 * v110;
    if (v59)
    {
      v65 = 0;
      v66 = 0;
      v62 = 0;
      v31 = v67;
    }
    else
    {
      v111 = 2 * v110;
      v112 = __dst;
      while (*v112 != v109)
      {
        v112 += 2;
        v111 -= 2;
        if (!v111)
          goto LABEL_89;
      }
      *v112 = v108;
LABEL_89:
      v62 = 0;
      v64 = v17;
      v31 = v67;
      v63 = v67;
      do
      {
        if (*(unsigned __int8 *)v17 == *(unsigned __int8 *)(v17 + 1))
        {
          v61 = (char *)v17;
          if (v63 != (char *)__dst + 2 * HIDWORD(v154))
          {
            v150 = v67;
            if ((char *)v17 == v31)
            {
              v61 = v63;
            }
            else
            {
              v148 = v63;
              v149 = v64 - (_QWORD)v31;
              memmove(v63, v31, v64 - (_QWORD)v31);
              v61 = &v148[v149];
            }
            v67 = v150;
          }
          v31 = (char *)(v17 + 2);
          ++v62;
          v63 = v61;
        }
        v17 += 2;
        v64 += 2;
      }
      while (v17 < (unint64_t)v67);
      v17 = (unint64_t)__dst;
      v65 = HIDWORD(v154);
      v66 = HIDWORD(v154);
      v67 = v63;
    }
    v68 = (char *)(v17 + 2 * v65);
    if (v31 != v68)
    {
      memmove(v67, v31, v68 - v31);
      v66 = HIDWORD(v154);
    }
    v42 = v66 - v62;
    v38 = v151;
LABEL_48:
    HIDWORD(v154) = v42;
LABEL_49:
    ;
  }
  while (v42);
  v69 = __dst;
  if (&v155 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v154) = 0;
    WTF::fastFree((unint64_t)v69, v31, (uint64_t)v32, v33, v34, v35, v36, v37);
  }
  LODWORD(v17) = -1207811152;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)v13, 3, v33, v34, v35, v36, v37);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v41, 2, v70, v71, v72, v73, v74);
  v75 = *(unsigned int *)(a1 + 640);
  if (v75 < 4)
  {
    LODWORD(v17) = -1207811137;
    goto LABEL_65;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_119;
  }
  JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v75 >> 2), a1 + 264, v33, v34, v35, v36, v37);
LABEL_65:
  v76 = *(_DWORD *)(a1 + 200);
  if (v76 + 4 > *(_DWORD *)(a1 + 192))
    goto LABEL_105;
LABEL_66:
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v76) = v17;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::appendCall(a1, (uint64_t)operationPutGetterSetter, (uint64_t)v32, v33, v34, v35, v36, v37, &v152);
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 0, 0xFFFFFFFFLL, v77, v78, v79, v80, (uint64_t)&__dst, v81);
  v87 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440);
  v88 = *(_QWORD *)(v87 + 8);
  v89 = *(unsigned int **)(v87 + 16);
  if (v89)
  {
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 + 1, v89));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v88, a1, v82, v83, v84, v85, v86);
    do
    {
      v98 = __ldaxr(v89);
      v99 = v98 - 1;
    }
    while (__stlxr(v99, v89));
    if (!v99)
    {
      atomic_store(1u, v89);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v89, v91, v92, v93, v94, v95, v96, v97);
      WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v88, a1, v82, v83, v84, v85, v86);
  }
}

void JSC::JIT::emit_op_put_getter_by_val(uint64_t a1, JSC::OpPutGetterByVal *this)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  _DWORD *v44;
  unint64_t v45;
  BOOL v46;
  char **v47;
  JSC::AssemblerBuffer *v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  _DWORD *v57;
  unint64_t v58;
  BOOL v59;
  char **v60;
  unsigned int v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  int v68;
  _DWORD *v69;
  unint64_t v70;
  BOOL v71;
  char **v72;
  unsigned int v74;
  int v75;
  unsigned int v76;
  _DWORD *v77;
  _DWORD *v78;
  _DWORD *v79;
  unint64_t v80;
  unint64_t v81;
  int v82;

  v3 = JSC::OpPutGetterByVal::decode(this, (const unsigned __int8 *)this);
  v11 = v3;
  v12 = v4;
  if ((int)v3 < 0x40000000)
  {
    v13 = 29;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v13 | (v11 << 35), 1, v6, v7, v8, v9, v10);
    goto LABEL_4;
  }
  v40 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v41 = (v3 - 0x40000000);
  v42 = *(_DWORD **)(v40 + 120);
  if (!v42 || *v42 <= v41)
    goto LABEL_17;
  v43 = *((unsigned __int8 *)v42 + v41 + 4);
  if ((v43 - 1) >= 2)
  {
    if (v43)
    {
      if (v43 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987DA538);
      }
      goto LABEL_28;
    }
LABEL_17:
    v44 = *(_DWORD **)(v40 + 112);
    if (*v44 <= v41)
    {
      __break(0xC471u);
      JUMPOUT(0x1987DA618);
    }
    v45 = *(_QWORD *)&v44[2 * v41 + 2];
    if (v45)
      v46 = (v45 & 0xFFFE000000000002) == 0;
    else
      v46 = 0;
    if (!v46)
      goto LABEL_73;
    v47 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x4C));
    if (v47 != &JSC::SymbolTable::s_info && v47 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_73;
LABEL_28:
    v49 = (JSC::AssemblerBuffer *)(a1 + 56);
    v50 = *(_DWORD *)(a1 + 200);
    if (v50 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v49, v4, v5, v6, v7, v8, v9, v10);
      v49 = (JSC::AssemblerBuffer *)(a1 + 56);
      v50 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v50) = -129956959;
    v51 = *(_DWORD *)(a1 + 200);
    v52 = v51 + 4;
    *(_DWORD *)(a1 + 200) = v51 + 4;
    if ((v51 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v49, v4, v5, v6, v7, v8, v9, v10);
      v52 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v52) = -129368031;
    *(_DWORD *)(a1 + 200) += 4;
    v13 = 1;
    goto LABEL_3;
  }
LABEL_73:
  v77 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v77 <= v41)
  {
    __break(0xC471u);
    JUMPOUT(0x1987DA5B8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v77[2 * v41 + 2], 1, v6, v7, v8, v9, v10);
LABEL_4:
  v21 = HIDWORD(v11);
  if (SHIDWORD(v11) < 0x40000000)
  {
    v22 = 29;
LABEL_6:
    JSC::MacroAssemblerARM64::load64(a1, v22 | (v21 << 35), 2, v16, v17, v18, v19, v20);
    goto LABEL_7;
  }
  v53 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v54 = (HIDWORD(v11) - 0x40000000);
  v55 = *(_DWORD **)(v53 + 120);
  if (!v55 || *v55 <= v54)
    goto LABEL_37;
  v56 = *((unsigned __int8 *)v55 + v54 + 4);
  if ((v56 - 1) >= 2)
  {
    if (v56)
    {
      if (v56 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987DA560);
      }
      goto LABEL_48;
    }
LABEL_37:
    v57 = *(_DWORD **)(v53 + 112);
    if (*v57 <= v54)
    {
      __break(0xC471u);
      JUMPOUT(0x1987DA638);
    }
    v58 = *(_QWORD *)&v57[2 * v54 + 2];
    if (v58)
      v59 = (v58 & 0xFFFE000000000002) == 0;
    else
      v59 = 0;
    if (!v59)
      goto LABEL_75;
    v60 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0x4C));
    if (v60 != &JSC::SymbolTable::s_info && v60 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_75;
LABEL_48:
    v62 = *(_DWORD *)(a1 + 200);
    if (v62 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v14, v15, v16, v17, v18, v19, v20);
      v21 = HIDWORD(v11);
      v62 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v62) = -129956958;
    v63 = *(_DWORD *)(a1 + 200);
    v64 = v63 + 4;
    *(_DWORD *)(a1 + 200) = v63 + 4;
    if ((v63 + 8) > *(_DWORD *)(a1 + 192))
    {
      v80 = v21;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v14, v15, v16, v17, v18, v19, v20);
      v21 = v80;
      v64 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v64) = -129367998;
    *(_DWORD *)(a1 + 200) += 4;
    v22 = 2;
    goto LABEL_6;
  }
LABEL_75:
  v78 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v78 <= v54)
  {
    __break(0xC471u);
    JUMPOUT(0x1987DA5D8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v78[2 * v54 + 2], 2, v16, v17, v18, v19, v20);
LABEL_7:
  v30 = HIDWORD(v12);
  if (SHIDWORD(v12) < 0x40000000)
  {
    v31 = 29;
LABEL_9:
    JSC::MacroAssemblerARM64::load64(a1, v31 | (v30 << 35), 4, v25, v26, v27, v28, v29);
    goto LABEL_10;
  }
  v65 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v66 = (HIDWORD(v12) - 0x40000000);
  v67 = *(_DWORD **)(v65 + 120);
  if (!v67 || *v67 <= v66)
    goto LABEL_57;
  v68 = *((unsigned __int8 *)v67 + v66 + 4);
  if ((v68 - 1) >= 2)
  {
    if (v68)
    {
      if (v68 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987DA588);
      }
      goto LABEL_68;
    }
LABEL_57:
    v69 = *(_DWORD **)(v65 + 112);
    if (*v69 <= v66)
    {
      __break(0xC471u);
      JUMPOUT(0x1987DA658);
    }
    v70 = *(_QWORD *)&v69[2 * v66 + 2];
    if (v70)
      v71 = (v70 & 0xFFFE000000000002) == 0;
    else
      v71 = 0;
    if (!v71)
      goto LABEL_77;
    v72 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v70 & 0xFFFFFFFE) + 0x4C));
    if (v72 != &JSC::SymbolTable::s_info && v72 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_77;
LABEL_68:
    v74 = *(_DWORD *)(a1 + 200);
    if (v74 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v23, v24, v25, v26, v27, v28, v29);
      v30 = HIDWORD(v12);
      v74 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v74) = -129956956;
    v75 = *(_DWORD *)(a1 + 200);
    v76 = v75 + 4;
    *(_DWORD *)(a1 + 200) = v75 + 4;
    if ((v75 + 8) > *(_DWORD *)(a1 + 192))
    {
      v81 = v30;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v23, v24, v25, v26, v27, v28, v29);
      v30 = v81;
      v76 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v76) = -129367932;
    *(_DWORD *)(a1 + 200) += 4;
    v31 = 4;
    goto LABEL_9;
  }
LABEL_77:
  v79 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v79 <= v66)
  {
    __break(0xC471u);
    JUMPOUT(0x1987DA5F8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v79[2 * v66 + 2], 4, v25, v26, v27, v28, v29);
LABEL_10:
  v39 = *(_DWORD *)(a1 + 200);
  if (v39 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v32, v33, v34, v35, v36, v37, v38);
    v39 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = -129989824;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long,int,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,int,JSC::ARM64Registers::RegisterID>(&v82, a1, (uint64_t)operationPutGetterByVal, (JSC::ARM64LogicalImmediate *)v12, v35, v36, v37, v38);
}

void JSC::JIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long,int,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,int,JSC::ARM64Registers::RegisterID>(int *a1, uint64_t a2, uint64_t a3, JSC::ARM64LogicalImmediate *this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52[3];

  v11 = -1207811152;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)this, 3, (uint64_t)this, a5, a6, a7, a8);
  v19 = *(unsigned int *)(a2 + 640);
  if (v19 >= 4)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      return;
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)(v19 >> 2), a2 + 264, v14, v15, v16, v17, v18);
  }
  else
  {
    v11 = -1207811137;
  }
  v20 = *(_DWORD *)(a2 + 200);
  if (v20 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v12, v13, v14, v15, v16, v17, v18);
    v20 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v20) = v11;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::JIT::appendCall(a2, a3, v13, v14, v15, v16, v17, v18, a1);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, 0, 0xFFFFFFFFLL, v21, v22, v23, v24, (uint64_t)v52, v25);
  v31 = *(_QWORD *)(*(_QWORD *)(a2 + 352) + 90440);
  v32 = *(_QWORD *)(v31 + 8);
  v33 = *(unsigned int **)(v31 + 16);
  if (v33)
  {
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v52, v32, a2, v26, v27, v28, v29, v30);
    do
    {
      v42 = __ldaxr(v33);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v33));
    if (!v43)
    {
      atomic_store(1u, v33);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v33, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v52, v32, a2, v26, v27, v28, v29, v30);
  }
}

void JSC::JIT::emit_op_put_setter_by_val(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  JSC::ARM64LogicalImmediate *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  unint64_t v24;
  BOOL v25;
  char **v26;
  JSC::AssemblerBuffer *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  int v62;
  _DWORD *v63;
  unint64_t v64;
  BOOL v65;
  char **v66;
  JSC::AssemblerBuffer *v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  int v75;
  _DWORD *v76;
  unint64_t v77;
  BOOL v78;
  char **v79;
  JSC::AssemblerBuffer *v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  _DWORD *v85;
  _DWORD *v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v14 = 1073741760;
    v15 = *((__int16 *)a2 + 2);
    if (v15 <= 63)
      v11 = v15;
    else
      v11 = (v15 + 1073741760);
    v12 = (JSC::ARM64LogicalImmediate *)*((unsigned __int16 *)a2 + 3);
    v16 = *((__int16 *)a2 + 4);
    if (v16 <= 63)
      v13 = v16;
    else
      v13 = (v16 + 1073741760);
    if ((int)v10 <= 63)
      goto LABEL_40;
  }
  else
  {
    if (v9 == 130)
    {
      v10 = *(unsigned int *)(a2 + 2);
      v11 = *(unsigned int *)(a2 + 6);
      v12 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(a2 + 10);
      v13 = *(unsigned int *)(a2 + 14);
      goto LABEL_12;
    }
    v10 = (char)a2[1];
    v14 = 1073741808;
    v33 = (char)a2[2];
    if (v33 <= 15)
      v11 = v33;
    else
      v11 = (v33 + 1073741808);
    v12 = (JSC::ARM64LogicalImmediate *)a2[3];
    v34 = (char)a2[4];
    if (v34 <= 15)
      v13 = v34;
    else
      v13 = (v34 + 1073741808);
    if ((int)v10 <= 15)
    {
LABEL_40:
      v17 = v11;
      v18 = v13;
      goto LABEL_41;
    }
  }
  v10 = (v10 + v14);
LABEL_12:
  v17 = v11;
  v18 = v13;
  if ((int)v10 < 0x40000000)
  {
LABEL_41:
    v32 = 29;
LABEL_42:
    JSC::MacroAssemblerARM64::load64(a1, v32 | (v10 << 35), 1, a4, a5, a6, a7, a8);
    goto LABEL_43;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v20 = (v10 - 0x40000000);
  v21 = *(_DWORD **)(v19 + 120);
  if (!v21 || *v21 <= v20)
    goto LABEL_17;
  v22 = *((unsigned __int8 *)v21 + v20 + 4);
  if ((v22 - 1) >= 2)
  {
    if (v22)
    {
      if (v22 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987DAD94);
      }
LABEL_28:
      v28 = (JSC::AssemblerBuffer *)(a1 + 56);
      v29 = *(_DWORD *)(a1 + 200);
      if (v29 + 4 > *(_DWORD *)(a1 + 192))
      {
        v88 = v10;
        JSC::AssemblerBuffer::outOfLineGrow(v28, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v28 = (JSC::AssemblerBuffer *)(a1 + 56);
        v10 = v88;
        v29 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = -129956959;
      v30 = *(_DWORD *)(a1 + 200);
      v31 = v30 + 4;
      *(_DWORD *)(a1 + 200) = v30 + 4;
      if ((v30 + 8) > *(_DWORD *)(a1 + 192))
      {
        v89 = v10;
        JSC::AssemblerBuffer::outOfLineGrow(v28, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v10 = v89;
        v31 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v31) = -129368031;
      *(_DWORD *)(a1 + 200) += 4;
      v32 = 1;
      goto LABEL_42;
    }
LABEL_17:
    v23 = *(_DWORD **)(v19 + 112);
    if (*v23 <= v20)
    {
      __break(0xC471u);
      JUMPOUT(0x1987DAE74);
    }
    v24 = *(_QWORD *)&v23[2 * v20 + 2];
    if (v24)
      v25 = (v24 & 0xFFFE000000000002) == 0;
    else
      v25 = 0;
    if (!v25)
      goto LABEL_92;
    v26 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x4C));
    if (v26 != &JSC::SymbolTable::s_info && v26 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_92;
    goto LABEL_28;
  }
LABEL_92:
  v85 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v85 <= v20)
  {
    __break(0xC471u);
    JUMPOUT(0x1987DAE14);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v85[2 * v20 + 2], 1, a4, a5, a6, a7, a8);
LABEL_43:
  if ((int)v11 < 0x40000000)
  {
    v42 = (v17 << 35) | 0x1D;
LABEL_45:
    JSC::MacroAssemblerARM64::load64(a1, v42, 2, v37, v38, v39, v40, v41);
    goto LABEL_46;
  }
  v59 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v60 = (v17 - 0x40000000);
  v61 = *(_DWORD **)(v59 + 120);
  if (!v61 || *v61 <= v60)
    goto LABEL_56;
  v62 = *((unsigned __int8 *)v61 + v60 + 4);
  if ((v62 - 1) >= 2)
  {
    if (v62)
    {
      if (v62 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987DADBCLL);
      }
      goto LABEL_67;
    }
LABEL_56:
    v63 = *(_DWORD **)(v59 + 112);
    if (*v63 <= v60)
    {
      __break(0xC471u);
      JUMPOUT(0x1987DAE94);
    }
    v64 = *(_QWORD *)&v63[2 * v60 + 2];
    if (v64)
      v65 = (v64 & 0xFFFE000000000002) == 0;
    else
      v65 = 0;
    if (!v65)
      goto LABEL_94;
    v66 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v64 & 0xFFFFFFFE) + 0x4C));
    if (v66 != &JSC::SymbolTable::s_info && v66 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_94;
LABEL_67:
    v68 = (JSC::AssemblerBuffer *)(a1 + 56);
    v69 = *(_DWORD *)(a1 + 200);
    if (v69 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v68, v35, v36, v37, v38, v39, v40, v41);
      v68 = (JSC::AssemblerBuffer *)(a1 + 56);
      v69 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v69) = -129956958;
    v70 = *(_DWORD *)(a1 + 200);
    v71 = v70 + 4;
    *(_DWORD *)(a1 + 200) = v70 + 4;
    if ((v70 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v68, v35, v36, v37, v38, v39, v40, v41);
      v71 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v71) = -129367998;
    *(_DWORD *)(a1 + 200) += 4;
    v42 = (v11 << 35) | 2;
    goto LABEL_45;
  }
LABEL_94:
  v86 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v86 <= (v11 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987DAE34);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v86[2 * (v11 - 0x40000000) + 2], 2, v37, v38, v39, v40, v41);
LABEL_46:
  if ((int)v13 < 0x40000000)
  {
    v50 = (v18 << 35) | 0x1D;
LABEL_48:
    JSC::MacroAssemblerARM64::load64(a1, v50, 4, v45, v46, v47, v48, v49);
    goto LABEL_49;
  }
  v72 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v73 = (v18 - 0x40000000);
  v74 = *(_DWORD **)(v72 + 120);
  if (!v74 || *v74 <= v73)
    goto LABEL_76;
  v75 = *((unsigned __int8 *)v74 + v73 + 4);
  if ((v75 - 1) >= 2)
  {
    if (v75)
    {
      if (v75 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987DADE4);
      }
      goto LABEL_87;
    }
LABEL_76:
    v76 = *(_DWORD **)(v72 + 112);
    if (*v76 <= v73)
    {
      __break(0xC471u);
      JUMPOUT(0x1987DAEB4);
    }
    v77 = *(_QWORD *)&v76[2 * v73 + 2];
    if (v77)
      v78 = (v77 & 0xFFFE000000000002) == 0;
    else
      v78 = 0;
    if (!v78)
      goto LABEL_96;
    v79 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v77 & 0xFFFFFFFE) + 0x4C));
    if (v79 != &JSC::SymbolTable::s_info && v79 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_96;
LABEL_87:
    v81 = (JSC::AssemblerBuffer *)(a1 + 56);
    v82 = *(_DWORD *)(a1 + 200);
    if (v82 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v81, v43, v44, v45, v46, v47, v48, v49);
      v81 = (JSC::AssemblerBuffer *)(a1 + 56);
      v82 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v82) = -129956956;
    v83 = *(_DWORD *)(a1 + 200);
    v84 = v83 + 4;
    *(_DWORD *)(a1 + 200) = v83 + 4;
    if ((v83 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v81, v43, v44, v45, v46, v47, v48, v49);
      v84 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v84) = -129367932;
    *(_DWORD *)(a1 + 200) += 4;
    v50 = (v13 << 35) | 4;
    goto LABEL_48;
  }
LABEL_96:
  v87 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v87 <= (v13 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987DAE54);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v87[2 * (v13 - 0x40000000) + 2], 4, v45, v46, v47, v48, v49);
LABEL_49:
  v58 = *(_DWORD *)(a1 + 200);
  if (v58 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v51, v52, v53, v54, v55, v56, v57);
    v58 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v58) = -129989824;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long,int,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,int,JSC::ARM64Registers::RegisterID>(&v90, a1, (uint64_t)operationPutSetterByVal, v12, v54, v55, v56, v57);
}

unsigned int *JSC::JIT::emit_op_del_by_id(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  char v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  _OWORD v99[2];

  v9 = *a2;
  if (v9 == 128)
  {
    v78 = *((__int16 *)a2 + 1);
    if (v78 <= 63)
      v11 = v78;
    else
      v11 = (v78 + 1073741760);
    v12 = *((__int16 *)a2 + 2);
    if (v12 > 63)
      v12 += 1073741760;
    v13 = *((unsigned __int16 *)a2 + 3);
    v14 = a2[8];
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v12 = *(_DWORD *)(a2 + 6);
    v13 = *(_DWORD *)(a2 + 10);
    v14 = a2[14];
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
    if (v12 > 15)
      v12 += 1073741808;
    v13 = a2[3];
    v14 = a2[4];
  }
  v15 = *(unsigned int **)(*(_QWORD *)(a1 + 808) + 104);
  if (*v15 <= v13)
    goto LABEL_61;
  v16 = v12;
  if (v12 < 0x40000000)
  {
    v17 = ((unint64_t)v12 << 35) | 0x1D;
LABEL_12:
    JSC::MacroAssemblerARM64::load64(a1, v17, 0, a4, a5, a6, a7, a8);
    goto LABEL_13;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v12))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v72, v73, v74, v75, v76);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v79, v80, v81, v82, v83);
    v17 = v16 << 35;
    goto LABEL_12;
  }
  v77 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v77 <= (v16 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987DB454);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v77[2 * (v16 - 0x40000000) + 2], 0, v72, v73, v74, v75, v76);
LABEL_13:
  v18 = *(_DWORD *)(a1 + 888);
  v19 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v18 + 136), 1, v20, v21, v22, v23);
  if ((int)v16 < 0x40000000)
  {
LABEL_14:
    JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v24, v25, v26, v27, v28, (uint64_t)v99);
    v29 = *(_QWORD *)((char *)v99 + 4);
    v30 = *(_DWORD *)(a1 + 640);
    LODWORD(v90) = v99[0];
    *(_QWORD *)((char *)&v90 + 4) = *(_QWORD *)((char *)v99 + 4);
    HIDWORD(v90) = v30;
    v31 = *(unsigned int *)(a1 + 660);
    if ((_DWORD)v31 == *(_DWORD *)(a1 + 656))
    {
      WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v90);
    }
    else
    {
      v32 = *(_QWORD *)(a1 + 648) + 16 * v31;
      *(_DWORD *)v32 = v99[0];
      *(_QWORD *)(v32 + 4) = v29;
      *(_DWORD *)(v32 + 12) = v30;
      ++*(_DWORD *)(a1 + 660);
    }
    goto LABEL_16;
  }
  v84 = *(_QWORD *)(a1 + 808);
  v85 = (v16 - 0x40000000);
  v86 = *(_DWORD **)(v84 + 120);
  if (!v86 || *v86 <= v85 || *((_BYTE *)v86 + v85 + 4) != 3)
  {
    v87 = *(_DWORD **)(v84 + 112);
    if (*v87 > v85)
    {
      if ((*(_QWORD *)&v87[2 * v85 + 2] & 0xFFFE000000000002) == 0)
        goto LABEL_16;
      goto LABEL_14;
    }
LABEL_61:
    __break(0xC471u);
    JUMPOUT(0x1987DB348);
  }
LABEL_16:
  v33 = 0;
  v34 = v15 + 2;
  v35 = *(unsigned int *)(a1 + 640);
  v36 = 2;
  if ((_DWORD)v35 != -1 && (_DWORD)v35 != 0x3FFFFFFF)
  {
    if (v35 >> 28)
    {
      v33 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v33 = 0;
      *(_DWORD *)(v33 + 8) = v35;
      LODWORD(v35) = *(_DWORD *)(a1 + 640);
      v36 = 1;
    }
    else
    {
      v36 = 0;
      v33 = v35 << 36;
    }
  }
  v89 = v33 | v36;
  v99[0] = xmmword_199156F50;
  LOBYTE(v88) = 1;
  if (v14)
    v37 = 24;
  else
    v37 = 23;
  JSC::JITDelByIdGenerator::JITDelByIdGenerator((uint64_t)&v90, 0, v19, 1, 0, &v89, v35 >> 2, v37, (uint64_t)v99, *(_QWORD *)&v34[2 * v13] | 1, 0, 0, v88);
  if ((v89 & 1) != 0 && (v89 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v89 & 0xFFFFFFFF8, v38, v39, v40, v41, v42, v43, v44);
  JSC::JITInlineCacheGenerator::generateBaselineDataICFastPath((uint64_t)&v90, (JSC::MacroAssemblerARM64 *)a1, 1, v40, v41, v42, v43, v44);
  v52 = *(_DWORD *)(a1 + 640);
  LODWORD(v99[0]) = -1;
  *(_QWORD *)((char *)v99 + 4) = 0xFF000F4100000000;
  HIDWORD(v99[0]) = v52;
  v53 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v53 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)v99);
  }
  else
  {
    v54 = *(_QWORD *)(a1 + 648) + 16 * v53;
    *(_DWORD *)v54 = -1;
    *(_QWORD *)(v54 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v54 + 12) = v52;
    ++*(_DWORD *)(a1 + 660);
  }
  v55 = *(_DWORD *)(a1 + 556);
  if (v55 == *(_DWORD *)(a1 + 552))
  {
    WTF::Vector<JSC::JITPrivateBrandAccessGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITPrivateBrandAccessGenerator&>(a1 + 544, (unint64_t)&v90);
  }
  else
  {
    v70 = *(_QWORD *)(a1 + 544) + 56 * v55;
    v71 = v90;
    *(_BYTE *)(v70 + 16) = v91;
    *(_OWORD *)v70 = v71;
    *(_DWORD *)(v70 + 20) = v92;
    *(_DWORD *)(v70 + 24) = v93;
    *(_DWORD *)(v70 + 28) = v94;
    *(_QWORD *)(v70 + 32) = v95;
    *(_DWORD *)(v70 + 40) = v96;
    *(_QWORD *)(v70 + 44) = v97;
    ++*(_DWORD *)(a1 + 556);
  }
  v56 = *(_DWORD *)(a1 + 200);
  v98 = v56;
  if (v56 < *(_DWORD *)(a1 + 52))
  {
    do
    {
      if ((v56 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v45, v46, v47, v48, v49, v50, v51);
        v56 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v56) = -721215457;
      v56 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v56;
    }
    while (v56 < *(_DWORD *)(a1 + 52));
    v98 = v56;
  }
  *(_DWORD *)(a1 + 208) = 0;
  WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>((uint64_t *)(a1 + 408), (int *)(a1 + 640), &v98, (uint64_t)v99);
  v64 = *(_DWORD *)(a1 + 200);
  if (v64 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v57, v58, v59, v60, v61, v62, v63);
    v64 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v64) = 285218816;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 0, (v11 << 35) | 0x1D, v59, v60, v61, v62, v63);
  return JSC::JIT::emitWriteBarrier(a1, v16, 0x3FFFFFFFLL, 1, v65, v66, v67, v68);
}

void JSC::JIT::emitSlow_op_del_by_id(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::ExecutableMemoryHandle *v49;
  __int128 v50;
  uint64_t v51;

  v8 = *(_DWORD *)(a1 + 716);
  *(_DWORD *)(a1 + 716) = v8 + 1;
  if (*(_DWORD *)(a1 + 556) <= v8)
    goto LABEL_18;
  v10 = *(_QWORD *)(a1 + 544) + 56 * v8;
  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v11, v12, v13, v14, v15, v16, v17);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(v10 + 28) = i;
  v19 = *(char *)(v10 + 16);
  if (v19 >= 0x1F)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1987DB6BCLL);
  }
  JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))off_1E3596240[v19], v13, v14, v15, v16, v17, &v48);
  v27 = v48;
  *(_DWORD *)(a1 + 208) = 0;
  v28 = *(_DWORD *)(a1 + 200);
  if (v28 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
    v28 = *(_DWORD *)(a1 + 200);
  }
  v29 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = -1811939328;
  v30 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v30;
  LOBYTE(v51) = -1;
  BYTE3(v51) = 15;
  *(_WORD *)((char *)&v51 + 1) = 65;
  *(_QWORD *)&v50 = v30 - 4;
  *((_QWORD *)&v50 + 1) = v27;
  WORD2(v51) = 384;
  v31 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v31 == *(_DWORD *)(a1 + 40))
  {
    v38 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v31 + 1, (unint64_t)&v50, v22, v23, v24, v25, v26);
    v32 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v32 = 0;
    *(_QWORD *)(v32 + 8) = 0;
    *(_BYTE *)(v32 + 16) = -1;
    v39 = (((*(unsigned __int8 *)(v32 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v32 + 17) = 65;
    *(_BYTE *)(v32 + 19) = BYTE2(v39);
    *(_WORD *)(v32 + 20) &= 0xFC00u;
    v33 = *(_OWORD *)v38;
    v34 = *(_QWORD *)(v38 + 16);
  }
  else
  {
    v32 = *v29 + 24 * v31;
    v33 = v50;
    v34 = v51;
  }
  *(_QWORD *)(v32 + 16) = v34;
  *(_OWORD *)v32 = v33;
  ++*(_DWORD *)(a1 + 44);
  v35 = (unsigned int *)v49;
  v49 = 0;
  if (v35)
  {
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v35, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
  }
}

unsigned int *JSC::JIT::emit_op_del_by_val(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  _QWORD *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  _DWORD *v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD *v122;
  _DWORD *v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  char v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  int v132;
  int v133;
  _OWORD v134[2];

  v9 = *a2;
  if (v9 == 130)
  {
    v12 = *(unsigned int *)(a2 + 2);
    v13 = *(unsigned int *)(a2 + 6);
    v15 = *(_DWORD *)(a2 + 10);
    v16 = a2[14];
  }
  else
  {
    if (v9 == 128)
    {
      v98 = *((__int16 *)a2 + 1);
      v11 = 1073741760;
      if (v98 <= 63)
        v12 = v98;
      else
        v12 = (v98 + 1073741760);
      LODWORD(v13) = *((__int16 *)a2 + 2);
      v99 = *((__int16 *)a2 + 3);
      if (v99 <= 63)
        v15 = *((__int16 *)a2 + 3);
      else
        v15 = v99 + 1073741760;
      v16 = a2[8];
      if ((int)v13 <= 63)
        goto LABEL_10;
    }
    else
    {
      v10 = (char)a2[1];
      v11 = 1073741808;
      if (v10 <= 15)
        v12 = v10;
      else
        v12 = (v10 + 1073741808);
      LODWORD(v13) = (char)a2[2];
      v14 = (char)a2[3];
      if (v14 <= 15)
        v15 = (char)a2[3];
      else
        v15 = v14 + 1073741808;
      v16 = a2[4];
      if ((int)v13 <= 15)
      {
LABEL_10:
        v17 = v13;
LABEL_11:
        JSC::MacroAssemblerARM64::load64(a1, (v17 << 35) | 0x1D, 0, a4, a5, a6, a7, a8);
        v23 = 0;
        goto LABEL_12;
      }
    }
    v13 = (v13 + v11);
  }
  v17 = v13;
  if ((int)v13 < 0x40000000)
    goto LABEL_11;
  if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v13))
  {
    v105 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
    if (*v105 <= (v13 - 0x40000000))
    {
      __break(0xC471u);
      goto LABEL_84;
    }
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v105[2 * (v13 - 0x40000000) + 2], 0, v100, v101, v102, v103, v104);
  }
  else
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v100, v101, v102, v103, v104);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v106, v107, v108, v109, v110);
    JSC::MacroAssemblerARM64::load64(a1, v13 << 35, 0, v111, v112, v113, v114, v115);
  }
  v23 = 1;
LABEL_12:
  v24 = v15;
  if (v15 < 0x40000000)
  {
    v25 = ((unint64_t)v15 << 35) | 0x1D;
LABEL_14:
    JSC::MacroAssemblerARM64::load64(a1, v25, 1, v18, v19, v20, v21, v22);
    goto LABEL_15;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v15))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v87, v88, v89, v90, v91);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v93, v94, v95, v96, v97);
    v25 = ((unint64_t)v15 << 35) | 1;
    goto LABEL_14;
  }
  v92 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v92 <= (v15 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987DBDE0);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v92[2 * (v15 - 0x40000000) + 2], 1, v87, v88, v89, v90, v91);
LABEL_15:
  v26 = *(_DWORD *)(a1 + 888);
  v27 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v26 + 136), 2, v28, v29, v30, v31);
  if (!v23)
    goto LABEL_16;
  v116 = *(_QWORD *)(a1 + 808);
  v117 = (v13 - 0x40000000);
  v118 = *(_DWORD **)(v116 + 120);
  if (!v118 || *v118 <= v117 || *((_BYTE *)v118 + v117 + 4) != 3)
  {
    v119 = *(_DWORD **)(v116 + 112);
    if (*v119 <= v117)
    {
      __break(0xC471u);
      JUMPOUT(0x1987DBE10);
    }
    if ((*(_QWORD *)&v119[2 * v117 + 2] & 0xFFFE000000000002) != 0)
    {
LABEL_16:
      JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v32, v33, v34, v35, v36, (uint64_t)v134);
      v37 = *(_DWORD *)(a1 + 640);
      LODWORD(v126) = v134[0];
      *(_QWORD *)((char *)&v126 + 4) = *(_QWORD *)((char *)v134 + 4);
      HIDWORD(v126) = v37;
      v38 = *(unsigned int *)(a1 + 660);
      if ((_DWORD)v38 == *(_DWORD *)(a1 + 656))
      {
        WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v126);
      }
      else
      {
        v39 = *(_QWORD *)(a1 + 648) + 16 * v38;
        *(_DWORD *)v39 = v134[0];
        *(_QWORD *)(v39 + 4) = *(_QWORD *)((char *)&v126 + 4);
        *(_DWORD *)(v39 + 12) = HIDWORD(v126);
        ++*(_DWORD *)(a1 + 660);
      }
    }
  }
  if (v24 < 0x40000000)
  {
LABEL_19:
    JSC::AssemblyHelpers::branchIfNotCell(a1, 1, 1, v32, v33, v34, v35, v36, (uint64_t)v134);
    v40 = *(_QWORD *)((char *)v134 + 4);
    v41 = *(_DWORD *)(a1 + 640);
    LODWORD(v126) = v134[0];
    *(_QWORD *)((char *)&v126 + 4) = *(_QWORD *)((char *)v134 + 4);
    HIDWORD(v126) = v41;
    v42 = *(unsigned int *)(a1 + 660);
    if ((_DWORD)v42 == *(_DWORD *)(a1 + 656))
    {
      WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v126);
    }
    else
    {
      v43 = *(_QWORD *)(a1 + 648) + 16 * v42;
      *(_DWORD *)v43 = v134[0];
      *(_QWORD *)(v43 + 4) = v40;
      *(_DWORD *)(v43 + 12) = v41;
      ++*(_DWORD *)(a1 + 660);
    }
    goto LABEL_21;
  }
  v120 = *(_QWORD *)(a1 + 808);
  v121 = (v24 - 0x40000000);
  v122 = *(_DWORD **)(v120 + 120);
  if (!v122 || *v122 <= v121 || *((_BYTE *)v122 + v121 + 4) != 3)
  {
    v123 = *(_DWORD **)(v120 + 112);
    if (*v123 > v121)
    {
      if ((*(_QWORD *)&v123[2 * v121 + 2] & 0xFFFE000000000002) == 0)
        goto LABEL_21;
      goto LABEL_19;
    }
    __break(0xC471u);
LABEL_84:
    JUMPOUT(0x1987DBDC0);
  }
LABEL_21:
  v44 = 0;
  v45 = *(unsigned int *)(a1 + 640);
  if ((_DWORD)v45 == -1 || (_DWORD)v45 == 0x3FFFFFFF)
  {
    v46 = 2;
  }
  else if (v45 >> 28)
  {
    v44 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v44 = 0;
    *(_DWORD *)(v44 + 8) = v45;
    LODWORD(v45) = *(_DWORD *)(a1 + 640);
    v46 = 1;
  }
  else
  {
    v46 = 0;
    v44 = v45 << 36;
  }
  v125 = v44 | v46;
  v134[0] = xmmword_199156F50;
  LOBYTE(v124) = 2;
  if (v16)
    v47 = 26;
  else
    v47 = 25;
  JSC::JITDelByValGenerator::JITDelByValGenerator((uint64_t)&v126, 0, v27, 1, 0, &v125, v45 >> 2, v47, (uint64_t)v134, 0, 0, 1, 0, 0, v124);
  if ((v125 & 1) != 0 && (v125 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v125 & 0xFFFFFFFF8, v48, v49, v50, v51, v52, v53, v54);
  JSC::JITInlineCacheGenerator::generateBaselineDataICFastPath((uint64_t)&v126, (JSC::MacroAssemblerARM64 *)a1, 2, v50, v51, v52, v53, v54);
  v62 = *(_DWORD *)(a1 + 640);
  LODWORD(v134[0]) = -1;
  *(_QWORD *)((char *)v134 + 4) = 0xFF000F4100000000;
  HIDWORD(v134[0]) = v62;
  v63 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v63 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)v134);
  }
  else
  {
    v64 = *(_QWORD *)(a1 + 648) + 16 * v63;
    *(_DWORD *)v64 = -1;
    *(_QWORD *)(v64 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v64 + 12) = v62;
    ++*(_DWORD *)(a1 + 660);
  }
  v65 = (_QWORD *)(a1 + 560);
  v66 = *(unsigned int *)(a1 + 572);
  if ((_DWORD)v66 == *(_DWORD *)(a1 + 568))
  {
    v67 = (__int128 *)WTF::Vector<JSC::JITInstanceOfGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)&v126);
    v68 = *(_QWORD *)(a1 + 560) + 56 * *(unsigned int *)(a1 + 572);
    v69 = *v67;
    *(_BYTE *)(v68 + 16) = *((_BYTE *)v67 + 16);
    *(_OWORD *)v68 = v69;
    *(_DWORD *)(v68 + 20) = *((_DWORD *)v67 + 5);
    *(_DWORD *)(v68 + 24) = *((_DWORD *)v67 + 6);
    *(_DWORD *)(v68 + 28) = *((_DWORD *)v67 + 7);
    *(_QWORD *)(v68 + 32) = *((_QWORD *)v67 + 4);
    *(_DWORD *)(v68 + 40) = *((_DWORD *)v67 + 10);
    v70 = (_QWORD *)(v68 + 44);
  }
  else
  {
    v85 = *v65 + 56 * v66;
    v86 = v126;
    *(_BYTE *)(v85 + 16) = v127;
    *(_OWORD *)v85 = v86;
    *(_DWORD *)(v85 + 20) = v128;
    *(_DWORD *)(v85 + 24) = v129;
    *(_DWORD *)(v85 + 28) = v130;
    *(_QWORD *)(v85 + 32) = v131;
    *(_DWORD *)(v85 + 40) = v132;
    v70 = (_QWORD *)(v85 + 44);
    v67 = &v126;
  }
  *v70 = *(_QWORD *)((char *)v67 + 44);
  ++*(_DWORD *)(a1 + 572);
  v71 = *(_DWORD *)(a1 + 200);
  v133 = v71;
  if (v71 < *(_DWORD *)(a1 + 52))
  {
    do
    {
      if ((v71 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v55, v56, v57, v58, v59, v60, v61);
        v71 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v71) = -721215457;
      v71 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v71;
    }
    while (v71 < *(_DWORD *)(a1 + 52));
    v133 = v71;
  }
  *(_DWORD *)(a1 + 208) = 0;
  WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>((uint64_t *)(a1 + 408), (int *)(a1 + 640), &v133, (uint64_t)v134);
  v79 = *(_DWORD *)(a1 + 200);
  if (v79 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v72, v73, v74, v75, v76, v77, v78);
    v79 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v79) = 285218816;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 0, (v12 << 35) | 0x1D, v74, v75, v76, v77, v78);
  return JSC::JIT::emitWriteBarrier(a1, v17, 0x3FFFFFFFLL, 1, v80, v81, v82, v83);
}

void JSC::JIT::emitSlow_op_del_by_val(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::ExecutableMemoryHandle *v49;
  __int128 v50;
  uint64_t v51;

  v8 = *(_DWORD *)(a1 + 712);
  *(_DWORD *)(a1 + 712) = v8 + 1;
  if (*(_DWORD *)(a1 + 572) <= v8)
    goto LABEL_18;
  v10 = *(_QWORD *)(a1 + 560) + 56 * v8;
  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v11, v12, v13, v14, v15, v16, v17);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(v10 + 28) = i;
  v19 = *(char *)(v10 + 16);
  if (v19 >= 0x1F)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1987DC068);
  }
  JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))off_1E3596240[v19], v13, v14, v15, v16, v17, &v48);
  v27 = v48;
  *(_DWORD *)(a1 + 208) = 0;
  v28 = *(_DWORD *)(a1 + 200);
  if (v28 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
    v28 = *(_DWORD *)(a1 + 200);
  }
  v29 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = -1811939328;
  v30 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v30;
  LOBYTE(v51) = -1;
  BYTE3(v51) = 15;
  *(_WORD *)((char *)&v51 + 1) = 65;
  *(_QWORD *)&v50 = v30 - 4;
  *((_QWORD *)&v50 + 1) = v27;
  WORD2(v51) = 384;
  v31 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v31 == *(_DWORD *)(a1 + 40))
  {
    v38 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v31 + 1, (unint64_t)&v50, v22, v23, v24, v25, v26);
    v32 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v32 = 0;
    *(_QWORD *)(v32 + 8) = 0;
    *(_BYTE *)(v32 + 16) = -1;
    v39 = (((*(unsigned __int8 *)(v32 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v32 + 17) = 65;
    *(_BYTE *)(v32 + 19) = BYTE2(v39);
    *(_WORD *)(v32 + 20) &= 0xFC00u;
    v33 = *(_OWORD *)v38;
    v34 = *(_QWORD *)(v38 + 16);
  }
  else
  {
    v32 = *v29 + 24 * v31;
    v33 = v50;
    v34 = v51;
  }
  *(_QWORD *)(v32 + 16) = v34;
  *(_OWORD *)v32 = v33;
  ++*(_DWORD *)(a1 + 44);
  v35 = (unsigned int *)v49;
  v49 = 0;
  if (v35)
  {
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v35, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
  }
}

void JSC::JIT::emit_op_try_get_by_id(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  _DWORD *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  char v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  __int16 v88;
  int v89;
  uint64_t v90;
  char v91;
  int v92;
  _OWORD v93[2];

  v9 = *a2;
  if (v9 == 128)
  {
    v78 = *((__int16 *)a2 + 1);
    if (v78 <= 63)
      v11 = v78;
    else
      v11 = (v78 + 1073741760);
    v79 = *((__int16 *)a2 + 2);
    if (v79 <= 63)
      v13 = v79;
    else
      v13 = (v79 + 1073741760);
    v14 = *((unsigned __int16 *)a2 + 3);
    v15 = *((unsigned __int16 *)a2 + 4);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v13 = *(unsigned int *)(a2 + 6);
    v14 = *(_DWORD *)(a2 + 10);
    v15 = *(_DWORD *)(a2 + 14);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
    if (v12 <= 15)
      v13 = v12;
    else
      v13 = (v12 + 1073741808);
    v14 = a2[3];
    v15 = a2[4];
  }
  v16 = *(unsigned int **)(*(_QWORD *)(a1 + 808) + 104);
  if (*v16 <= v14)
    goto LABEL_60;
  if ((int)v13 < 0x40000000)
  {
    v17 = ((unint64_t)v13 << 35) | 0x1D;
LABEL_13:
    JSC::MacroAssemblerARM64::load64(a1, v17, 0, a4, a5, a6, a7, a8);
    goto LABEL_14;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v13))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v63, v64, v65, v66, v67);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v69, v70, v71, v72, v73);
    v17 = v13 << 35;
    goto LABEL_13;
  }
  v68 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v68 <= (v13 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987DC530);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v68[2 * (v13 - 0x40000000) + 2], 0, v63, v64, v65, v66, v67);
LABEL_14:
  v18 = *(_DWORD *)(a1 + 888);
  v19 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v18 + 136), 1, v20, v21, v22, v23);
  if ((int)v13 < 0x40000000)
  {
LABEL_15:
    JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v24, v25, v26, v27, v28, (uint64_t)v93);
    v29 = *(_QWORD *)((char *)v93 + 4);
    v30 = *(_DWORD *)(a1 + 640);
    LODWORD(v82) = v93[0];
    *(_QWORD *)((char *)&v82 + 4) = *(_QWORD *)((char *)v93 + 4);
    HIDWORD(v82) = v30;
    v31 = *(unsigned int *)(a1 + 660);
    if ((_DWORD)v31 == *(_DWORD *)(a1 + 656))
    {
      WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v82);
    }
    else
    {
      v32 = *(_QWORD *)(a1 + 648) + 16 * v31;
      *(_DWORD *)v32 = v93[0];
      *(_QWORD *)(v32 + 4) = v29;
      *(_DWORD *)(v32 + 12) = v30;
      ++*(_DWORD *)(a1 + 660);
    }
    goto LABEL_17;
  }
  v74 = *(_QWORD *)(a1 + 808);
  v75 = (v13 - 0x40000000);
  v76 = *(_DWORD **)(v74 + 120);
  if (!v76 || *v76 <= v75 || *((_BYTE *)v76 + v75 + 4) != 3)
  {
    v77 = *(_DWORD **)(v74 + 112);
    if (*v77 > v75)
    {
      if ((*(_QWORD *)&v77[2 * v75 + 2] & 0xFFFE000000000002) == 0)
        goto LABEL_17;
      goto LABEL_15;
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1987DC444);
  }
LABEL_17:
  v33 = 0;
  v34 = v16 + 2;
  v35 = *(unsigned int *)(a1 + 640);
  v36 = 2;
  if ((_DWORD)v35 != -1 && (_DWORD)v35 != 0x3FFFFFFF)
  {
    if (v35 >> 28)
    {
      v33 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v33 = 0;
      *(_DWORD *)(v33 + 8) = v35;
      LODWORD(v35) = *(_DWORD *)(a1 + 640);
      v36 = 1;
    }
    else
    {
      v36 = 0;
      v33 = v35 << 36;
    }
  }
  v81 = v33 | v36;
  v93[0] = xmmword_199156F50;
  LOWORD(v80) = 769;
  JSC::JITGetByIdGenerator::JITGetByIdGenerator((uint64_t)&v82, 0, v19, 1, 0, &v81, v35 >> 2, (uint64_t)v93, *(_QWORD *)&v34[2 * v14] | 1, 0, 0, v80);
  if ((v81 & 1) != 0 && (v81 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v81 & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
  JSC::JITGetByIdGenerator::generateBaselineDataICFastPath((JSC::JITGetByIdGenerator *)&v82, (JSC::JIT *)a1, v38, v39, v40, v41, v42, v43);
  v51 = *(_DWORD *)(a1 + 640);
  LODWORD(v93[0]) = -1;
  *(_QWORD *)((char *)v93 + 4) = 0xFF000F4100000000;
  HIDWORD(v93[0]) = v51;
  v52 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v52 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)v93);
  }
  else
  {
    v53 = *(_QWORD *)(a1 + 648) + 16 * v52;
    *(_DWORD *)v53 = -1;
    *(_QWORD *)(v53 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v53 + 12) = v51;
    ++*(_DWORD *)(a1 + 660);
  }
  v54 = *(unsigned int *)(a1 + 428);
  if ((_DWORD)v54 == *(_DWORD *)(a1 + 424))
  {
    WTF::Vector<JSC::JITGetByIdGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITGetByIdGenerator&>(a1 + 416, (unint64_t)&v82);
  }
  else
  {
    v55 = *(_QWORD *)(a1 + 416) + (v54 << 6);
    v56 = v82;
    *(_BYTE *)(v55 + 16) = v83;
    *(_OWORD *)v55 = v56;
    *(_DWORD *)(v55 + 20) = v84;
    *(_DWORD *)(v55 + 24) = v85;
    *(_DWORD *)(v55 + 28) = v86;
    *(_QWORD *)(v55 + 32) = v87;
    *(_WORD *)(v55 + 40) = v88;
    *(_DWORD *)(v55 + 44) = v89;
    *(_QWORD *)(v55 + 48) = v90;
    *(_BYTE *)(v55 + 56) = v91;
    ++*(_DWORD *)(a1 + 428);
  }
  v57 = *(_DWORD *)(a1 + 200);
  v92 = v57;
  if (v57 < *(_DWORD *)(a1 + 52))
  {
    do
    {
      if ((v57 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v44, v45, v46, v47, v48, v49, v50);
        v57 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v57) = -721215457;
      v57 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v57;
    }
    while (v57 < *(_DWORD *)(a1 + 52));
    v92 = v57;
  }
  *(_DWORD *)(a1 + 208) = 0;
  WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>((uint64_t *)(a1 + 408), (int *)(a1 + 640), &v92, (uint64_t)v93);
  if (*(_BYTE *)(a1 + 793))
    JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)~v15 << 36) | 0x19, v58, v59, v60, v61, v62);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v11 << 35) | 0x1D, v58, v59, v60, v61, v62);
}

void JSC::JIT::emitSlow_op_try_get_by_id(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::ExecutableMemoryHandle *v49;
  __int128 v50;
  uint64_t v51;

  v8 = *(unsigned int *)(a1 + 680);
  *(_DWORD *)(a1 + 680) = v8 + 1;
  if (*(_DWORD *)(a1 + 428) <= v8)
    goto LABEL_18;
  v10 = *(_QWORD *)(a1 + 416) + (v8 << 6);
  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v11, v12, v13, v14, v15, v16, v17);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(v10 + 28) = i;
  v19 = *(char *)(v10 + 16);
  if (v19 >= 0x1F)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1987DC7D8);
  }
  JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))off_1E3596240[v19], v13, v14, v15, v16, v17, &v48);
  v27 = v48;
  *(_DWORD *)(a1 + 208) = 0;
  v28 = *(_DWORD *)(a1 + 200);
  if (v28 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
    v28 = *(_DWORD *)(a1 + 200);
  }
  v29 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = -1811939328;
  v30 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v30;
  LOBYTE(v51) = -1;
  BYTE3(v51) = 15;
  *(_WORD *)((char *)&v51 + 1) = 65;
  *(_QWORD *)&v50 = v30 - 4;
  *((_QWORD *)&v50 + 1) = v27;
  WORD2(v51) = 384;
  v31 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v31 == *(_DWORD *)(a1 + 40))
  {
    v38 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v31 + 1, (unint64_t)&v50, v22, v23, v24, v25, v26);
    v32 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v32 = 0;
    *(_QWORD *)(v32 + 8) = 0;
    *(_BYTE *)(v32 + 16) = -1;
    v39 = (((*(unsigned __int8 *)(v32 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v32 + 17) = 65;
    *(_BYTE *)(v32 + 19) = BYTE2(v39);
    *(_WORD *)(v32 + 20) &= 0xFC00u;
    v33 = *(_OWORD *)v38;
    v34 = *(_QWORD *)(v38 + 16);
  }
  else
  {
    v32 = *v29 + 24 * v31;
    v33 = v50;
    v34 = v51;
  }
  *(_QWORD *)(v32 + 16) = v34;
  *(_OWORD *)v32 = v33;
  ++*(_DWORD *)(a1 + 44);
  v35 = (unsigned int *)v49;
  v49 = 0;
  if (v35)
  {
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v35, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
  }
}

void JSC::JIT::emit_op_get_by_id_direct(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  char v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  __int16 v77;
  int v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  __int128 v85;

  JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpGetByIdDirect>(a2, (uint64_t)&v81);
  v8 = v83;
  v9 = *(unsigned int **)(*(_QWORD *)(a1 + 808) + 104);
  if (*v9 <= v83)
    goto LABEL_33;
  v11 = v81;
  v10 = v82;
  if ((int)v82 < 0x40000000)
  {
    v12 = ((unint64_t)v82 << 35) | 0x1D;
LABEL_4:
    JSC::MacroAssemblerARM64::load64(a1, v12, 0, v3, v4, v5, v6, v7);
    goto LABEL_5;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v82))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v54, v55, v56, v57, v58);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v60, v61, v62, v63, v64);
    v12 = v10 << 35;
    goto LABEL_4;
  }
  v59 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v59 <= (v10 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987DCBC8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v59[2 * (v10 - 0x40000000) + 2], 0, v54, v55, v56, v57, v58);
LABEL_5:
  v13 = *(_DWORD *)(a1 + 888);
  v14 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v13 + 136), 1, v15, v16, v17, v18);
  if ((int)v10 < 0x40000000)
  {
LABEL_6:
    JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v19, v20, v21, v22, v23, (uint64_t)&v85);
    v24 = *(_QWORD *)((char *)&v85 + 4);
    v25 = *(_DWORD *)(a1 + 640);
    LODWORD(v71) = v85;
    *(_QWORD *)((char *)&v71 + 4) = *(_QWORD *)((char *)&v85 + 4);
    HIDWORD(v71) = v25;
    v26 = *(unsigned int *)(a1 + 660);
    if ((_DWORD)v26 == *(_DWORD *)(a1 + 656))
    {
      WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v71);
    }
    else
    {
      v27 = *(_QWORD *)(a1 + 648) + 16 * v26;
      *(_DWORD *)v27 = v85;
      *(_QWORD *)(v27 + 4) = v24;
      *(_DWORD *)(v27 + 12) = v25;
      ++*(_DWORD *)(a1 + 660);
    }
    goto LABEL_8;
  }
  v65 = *(_QWORD *)(a1 + 808);
  v66 = (v10 - 0x40000000);
  v67 = *(_DWORD **)(v65 + 120);
  if (!v67 || *v67 <= v66 || *((_BYTE *)v67 + v66 + 4) != 3)
  {
    v68 = *(_DWORD **)(v65 + 112);
    if (*v68 > v66)
    {
      if ((*(_QWORD *)&v68[2 * v66 + 2] & 0xFFFE000000000002) == 0)
        goto LABEL_8;
      goto LABEL_6;
    }
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x1987DCB3CLL);
  }
LABEL_8:
  JSC::CodeOrigin::CodeOrigin(&v70, *(unsigned int *)(a1 + 640), 0);
  v28 = (unint64_t)*(unsigned int *)(a1 + 640) >> 2;
  v85 = xmmword_199156F50;
  LOWORD(v69) = 513;
  JSC::JITGetByIdGenerator::JITGetByIdGenerator((uint64_t)&v71, 0, v14, 1, 0, &v70, v28, (uint64_t)&v85, *(_QWORD *)&v9[2 * v8 + 2] | 1, 0, 0, v69);
  if ((v70 & 1) != 0 && (v70 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v70 & 0xFFFFFFFF8, v29, v30, v31, v32, v33, v34, v35);
  JSC::JITGetByIdGenerator::generateBaselineDataICFastPath((JSC::JITGetByIdGenerator *)&v71, (JSC::JIT *)a1, v30, v31, v32, v33, v34, v35);
  v43 = *(_DWORD *)(a1 + 640);
  LODWORD(v85) = -1;
  *(_QWORD *)((char *)&v85 + 4) = 0xFF000F4100000000;
  HIDWORD(v85) = v43;
  v44 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v44 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v85);
  }
  else
  {
    v45 = *(_QWORD *)(a1 + 648) + 16 * v44;
    *(_DWORD *)v45 = -1;
    *(_QWORD *)(v45 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v45 + 12) = v43;
    ++*(_DWORD *)(a1 + 660);
  }
  v46 = *(unsigned int *)(a1 + 428);
  if ((_DWORD)v46 == *(_DWORD *)(a1 + 424))
  {
    WTF::Vector<JSC::JITGetByIdGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITGetByIdGenerator&>(a1 + 416, (unint64_t)&v71);
  }
  else
  {
    v47 = *(_QWORD *)(a1 + 416) + (v46 << 6);
    v48 = v71;
    *(_BYTE *)(v47 + 16) = v72;
    *(_OWORD *)v47 = v48;
    *(_DWORD *)(v47 + 20) = v73;
    *(_DWORD *)(v47 + 24) = v74;
    *(_DWORD *)(v47 + 28) = v75;
    *(_QWORD *)(v47 + 32) = v76;
    *(_WORD *)(v47 + 40) = v77;
    *(_DWORD *)(v47 + 44) = v78;
    *(_QWORD *)(v47 + 48) = v79;
    *(_BYTE *)(v47 + 56) = v80;
    ++*(_DWORD *)(a1 + 428);
  }
  JSC::JIT::setFastPathResumePoint((JSC::JIT *)a1, v36, v37, v38, v39, v40, v41, v42);
  if (*(_BYTE *)(a1 + 793))
    JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)~v84 << 36) | 0x19, v49, v50, v51, v52, v53);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v11 << 35) | 0x1D, v49, v50, v51, v52, v53);
}

uint64_t JSC::JIT::emitSlow_op_get_by_id_direct(uint64_t result, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];
  int v37;

  v8 = *(unsigned int *)(result + 680);
  *(_DWORD *)(result + 680) = v8 + 1;
  if (*(_DWORD *)(result + 428) <= v8)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = result;
    v10 = *(_QWORD *)(result + 416) + (v8 << 6);
    JSC::JIT::linkAllSlowCases(result, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)v9, v11, v12, v13, v14, v15, v16, v17, &v37);
    *(_DWORD *)(v10 + 28) = v37;
    JSC::InlineCacheCompiler::generateSlowPathCode(*(_QWORD *)(v9 + 352), *(char *)(v10 + 16), v18, v19, v20, v21, v22, v36);
    JSC::MacroAssembler::nearCallThunk<(WTF::PtrTag)0>(v9, v36[0], v23, v24, v25, v26, v27, v28);
    return JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  }
  return result;
}

void JSC::JIT::emit_op_get_by_id(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  _BYTE *v68;
  __int128 *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  int v85;
  _DWORD *v86;
  int v87;
  int v88;
  _DWORD *v89;
  unint64_t v90;
  BOOL v91;
  char **v92;
  unsigned int v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  _DWORD *v99;
  _DWORD *v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  char v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  __int16 v109;
  int v110;
  uint64_t v111;
  int v112;
  _OWORD v113[2];

  v9 = *a2;
  if (v9 == 128)
  {
    v87 = *((__int16 *)a2 + 1);
    if (v87 <= 63)
      v11 = v87;
    else
      v11 = (v87 + 1073741760);
    v88 = *((__int16 *)a2 + 2);
    if (v88 <= 63)
      v13 = v88;
    else
      v13 = (v88 + 1073741760);
    v14 = *((unsigned __int16 *)a2 + 3);
    v15 = *((unsigned __int16 *)a2 + 4);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v13 = *(unsigned int *)(a2 + 6);
    v14 = *(_DWORD *)(a2 + 10);
    v15 = *(_DWORD *)(a2 + 14);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
    if (v12 <= 15)
      v13 = v12;
    else
      v13 = (v12 + 1073741808);
    v14 = a2[3];
    v15 = a2[4];
  }
  v16 = *(_QWORD *)(a1 + 808);
  v17 = *(unsigned int **)(v16 + 104);
  if (*v17 <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1987DD204);
  }
  if ((int)v13 < 0x40000000)
  {
    v18 = (v13 << 35) | 0x1D;
LABEL_13:
    JSC::MacroAssemblerARM64::load64(a1, v18, 0, a4, a5, a6, a7, a8);
    goto LABEL_14;
  }
  v82 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v83 = (v13 - 0x40000000);
  v84 = *(_DWORD **)(v82 + 120);
  if (!v84 || *v84 <= v83)
    goto LABEL_47;
  v85 = *((unsigned __int8 *)v84 + v83 + 4);
  if ((v85 - 1) >= 2)
  {
    if (v85)
    {
      if (v85 != 3)
        goto LABEL_82;
      goto LABEL_58;
    }
LABEL_47:
    v89 = *(_DWORD **)(v82 + 112);
    if (*v89 <= v83)
    {
      __break(0xC471u);
      JUMPOUT(0x1987DD310);
    }
    v90 = *(_QWORD *)&v89[2 * v83 + 2];
    if (v90)
      v91 = (v90 & 0xFFFE000000000002) == 0;
    else
      v91 = 0;
    if (!v91)
      goto LABEL_37;
    v92 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v90 & 0xFFFFFFFE) + 0x4C));
    if (v92 != &JSC::SymbolTable::s_info && v92 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_37;
LABEL_58:
    v94 = *(_DWORD *)(a1 + 200);
    if (v94 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v94 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v94) = -129956960;
    v95 = *(_DWORD *)(a1 + 200);
    v96 = v95 + 4;
    *(_DWORD *)(a1 + 200) = v95 + 4;
    if ((v95 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v96 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v96) = -129368064;
    *(_DWORD *)(a1 + 200) += 4;
    v18 = v13 << 35;
    goto LABEL_13;
  }
LABEL_37:
  v86 = *(_DWORD **)(v16 + 112);
  if (*v86 <= v83)
  {
    __break(0xC471u);
    JUMPOUT(0x1987DD2F0);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v86[2 * v83 + 2], 0, a4, a5, a6, a7, a8);
LABEL_14:
  v19 = *(_DWORD *)(a1 + 888);
  v20 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v19 + 136), 1, v21, v22, v23, v24);
  if ((int)v13 >= 0x40000000)
  {
    v97 = *(_QWORD *)(a1 + 808);
    v98 = (v13 - 0x40000000);
    v99 = *(_DWORD **)(v97 + 120);
    if (v99 && *v99 > v98 && *((_BYTE *)v99 + v98 + 4) == 3)
      goto LABEL_18;
    v100 = *(_DWORD **)(v97 + 112);
    if (*v100 > v98)
    {
      if ((*(_QWORD *)&v100[2 * v98 + 2] & 0xFFFE000000000002) == 0)
        goto LABEL_18;
      goto LABEL_15;
    }
LABEL_82:
    __break(0xC471u);
    JUMPOUT(0x1987DD1E4);
  }
LABEL_15:
  JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v25, v26, v27, v28, v29, (uint64_t)v113);
  v30 = (_QWORD *)(a1 + 648);
  v31 = *(_QWORD *)((char *)v113 + 4);
  v32 = *(_DWORD *)(a1 + 640);
  LODWORD(v103) = v113[0];
  *(_QWORD *)((char *)&v103 + 4) = *(_QWORD *)((char *)v113 + 4);
  HIDWORD(v103) = v32;
  v33 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v33 == *(_DWORD *)(a1 + 656))
  {
    v80 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v33 + 1, (unint64_t)&v103);
    v81 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v81 = *(_DWORD *)v80;
    *(_QWORD *)(v81 + 4) = *(_QWORD *)(v80 + 4);
    *(_DWORD *)(v81 + 12) = *(_DWORD *)(v80 + 12);
  }
  else
  {
    v34 = *v30 + 16 * v33;
    *(_DWORD *)v34 = v113[0];
    *(_QWORD *)(v34 + 4) = v31;
    *(_DWORD *)(v34 + 12) = v32;
  }
  ++*(_DWORD *)(a1 + 660);
LABEL_18:
  v35 = 0;
  v36 = v17 + 2;
  v37 = *(unsigned int *)(a1 + 640);
  v38 = 2;
  if ((_DWORD)v37 != -1 && (_DWORD)v37 != 0x3FFFFFFF)
  {
    if (v37 >> 28)
    {
      v35 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v35 = 0;
      *(_DWORD *)(v35 + 8) = v37;
      LODWORD(v37) = *(_DWORD *)(a1 + 640);
      v38 = 1;
    }
    else
    {
      v38 = 0;
      v35 = v37 << 36;
    }
  }
  v102 = v35 | v38;
  v113[0] = xmmword_199156F50;
  LOWORD(v101) = 1;
  JSC::JITGetByIdGenerator::JITGetByIdGenerator((uint64_t)&v103, 0, v20, 1, 0, &v102, v37 >> 2, (uint64_t)v113, *(_QWORD *)&v36[2 * v14] | 1, 0, 0, v101);
  if ((v102 & 1) != 0 && (v102 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v102 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
  JSC::JITGetByIdGenerator::generateBaselineDataICFastPath((JSC::JITGetByIdGenerator *)&v103, (JSC::JIT *)a1, v40, v41, v42, v43, v44, v45);
  JSC::JIT::resetSP((JSC::JIT *)a1, v46, v47, v48, v49, v50, v51, v52);
  v60 = (_QWORD *)(a1 + 648);
  v61 = *(_DWORD *)(a1 + 640);
  LODWORD(v113[0]) = -1;
  *(_QWORD *)((char *)v113 + 4) = 0xFF000F4100000000;
  HIDWORD(v113[0]) = v61;
  v62 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v62 == *(_DWORD *)(a1 + 656))
  {
    v78 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v62 + 1, (unint64_t)v113);
    v79 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v79 = *(_DWORD *)v78;
    *(_QWORD *)(v79 + 4) = *(_QWORD *)(v78 + 4);
    *(_DWORD *)(v79 + 12) = *(_DWORD *)(v78 + 12);
  }
  else
  {
    v63 = *v60 + 16 * v62;
    *(_DWORD *)v63 = -1;
    *(_QWORD *)(v63 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v63 + 12) = v61;
  }
  ++*(_DWORD *)(a1 + 660);
  v64 = (_QWORD *)(a1 + 416);
  v65 = *(unsigned int *)(a1 + 428);
  if ((_DWORD)v65 == *(_DWORD *)(a1 + 424))
  {
    v69 = (__int128 *)WTF::Vector<JSC::JITGetByIdGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v64, v65 + 1, (unint64_t)&v103);
    v76 = *(_QWORD *)(a1 + 416) + ((unint64_t)*(unsigned int *)(a1 + 428) << 6);
    v77 = *v69;
    *(_BYTE *)(v76 + 16) = *((_BYTE *)v69 + 16);
    *(_OWORD *)v76 = v77;
    *(_DWORD *)(v76 + 20) = *((_DWORD *)v69 + 5);
    *(_DWORD *)(v76 + 24) = *((_DWORD *)v69 + 6);
    *(_DWORD *)(v76 + 28) = *((_DWORD *)v69 + 7);
    *(_QWORD *)(v76 + 32) = *((_QWORD *)v69 + 4);
    *(_WORD *)(v76 + 40) = *((_WORD *)v69 + 20);
    *(_DWORD *)(v76 + 44) = *((_DWORD *)v69 + 11);
    *(_QWORD *)(v76 + 48) = *((_QWORD *)v69 + 6);
    v68 = (_BYTE *)(v76 + 56);
  }
  else
  {
    v66 = *v64 + (v65 << 6);
    v67 = v103;
    *(_BYTE *)(v66 + 16) = v104;
    *(_OWORD *)v66 = v67;
    *(_DWORD *)(v66 + 20) = v105;
    *(_DWORD *)(v66 + 24) = v106;
    *(_DWORD *)(v66 + 28) = v107;
    *(_QWORD *)(v66 + 32) = v108;
    *(_WORD *)(v66 + 40) = v109;
    *(_DWORD *)(v66 + 44) = v110;
    *(_QWORD *)(v66 + 48) = v111;
    v68 = (_BYTE *)(v66 + 56);
    v69 = &v103;
  }
  *v68 = *((_BYTE *)v69 + 56);
  ++*(_DWORD *)(a1 + 428);
  v70 = *(_DWORD *)(a1 + 200);
  v112 = v70;
  if (v70 < *(_DWORD *)(a1 + 52))
  {
    do
    {
      if ((v70 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v53, v54, v55, v56, v57, v58, v59);
        v70 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v70) = -721215457;
      v70 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v70;
    }
    while (v70 < *(_DWORD *)(a1 + 52));
    v112 = v70;
  }
  *(_DWORD *)(a1 + 208) = 0;
  WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>((uint64_t *)(a1 + 408), (int *)(a1 + 640), &v112, (uint64_t)v113);
  if (*(_BYTE *)(a1 + 793))
    JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)~v15 << 36) | 0x19, v71, v72, v73, v74, v75);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v11 << 35) | 0x1D, v71, v72, v73, v74, v75);
}

void JSC::JIT::emit_op_get_length(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  _BYTE *v72;
  __int128 *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  int v90;
  _DWORD *v91;
  _DWORD *v92;
  unint64_t v93;
  BOOL v94;
  char **v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  _DWORD *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  char v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  __int16 v119;
  int v120;
  uint64_t v121;
  int v122;
  _OWORD v123[2];

  v9 = *a2;
  if (v9 == 128)
  {
    v86 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v86 <= 63)
      v12 = v86;
    else
      v12 = (v86 + 1073741760);
    v13 = *((__int16 *)a2 + 2);
    v14 = *((unsigned __int16 *)a2 + 3);
    v15 = *((unsigned __int16 *)a2 + 4);
    if ((int)v13 <= 63)
      goto LABEL_7;
  }
  else
  {
    if (v9 == 130)
    {
      v12 = *(unsigned int *)(a2 + 2);
      v13 = *(unsigned int *)(a2 + 6);
      v14 = *(_DWORD *)(a2 + 10);
      v15 = *(_DWORD *)(a2 + 14);
      goto LABEL_40;
    }
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 <= 15)
      v12 = v10;
    else
      v12 = (v10 + 1073741808);
    v13 = (char)a2[2];
    v14 = a2[3];
    v15 = a2[4];
    if ((int)v13 <= 15)
    {
LABEL_7:
      v16 = v15;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 41952);
LABEL_8:
      JSC::MacroAssemblerARM64::load64(a1, (v13 << 35) | 0x1D, 0, a4, a5, a6, a7, a8);
      v18 = 0;
      goto LABEL_9;
    }
  }
  v13 = (v13 + v11);
LABEL_40:
  v16 = v15;
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 41952);
  if ((int)v13 < 0x40000000)
    goto LABEL_8;
  v87 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v88 = (v13 - 0x40000000);
  v89 = *(_DWORD **)(v87 + 120);
  if (!v89 || *v89 <= v88)
    goto LABEL_48;
  v90 = *((unsigned __int8 *)v89 + v88 + 4);
  if ((v90 - 1) < 2)
  {
LABEL_44:
    v91 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
    if (*v91 <= v88)
    {
      __break(0xC471u);
      JUMPOUT(0x1987DDA2CLL);
    }
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v91[2 * v88 + 2], 0, a4, a5, a6, a7, a8);
    goto LABEL_46;
  }
  if (v90)
  {
    if (v90 != 3)
      goto LABEL_79;
  }
  else
  {
LABEL_48:
    v92 = *(_DWORD **)(v87 + 112);
    if (*v92 <= v88)
    {
      __break(0xC471u);
      JUMPOUT(0x1987DDA4CLL);
    }
    v93 = *(_QWORD *)&v92[2 * v88 + 2];
    if (v93)
      v94 = (v93 & 0xFFFE000000000002) == 0;
    else
      v94 = 0;
    if (!v94)
      goto LABEL_44;
    v95 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v93 & 0xFFFFFFFE) + 0x4C));
    if (v95 != &JSC::SymbolTable::s_info && v95 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_44;
  }
  JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v97, v98, v99, v100, v101);
  JSC::MacroAssemblerARM64::load64(a1, v13 << 35, 0, v102, v103, v104, v105, v106);
LABEL_46:
  v18 = 1;
LABEL_9:
  v19 = *(_DWORD *)(a1 + 888);
  v20 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v19 + 136), 1, v21, v22, v23, v24);
  if (v18)
  {
    v107 = *(_QWORD *)(a1 + 808);
    v108 = (v13 - 0x40000000);
    v109 = *(_DWORD **)(v107 + 120);
    if (v109 && *v109 > v108 && *((_BYTE *)v109 + v108 + 4) == 3)
      goto LABEL_13;
    v110 = *(_DWORD **)(v107 + 112);
    if (*v110 > v108)
    {
      if ((*(_QWORD *)&v110[2 * v108 + 2] & 0xFFFE000000000002) == 0)
        goto LABEL_13;
      goto LABEL_10;
    }
LABEL_79:
    __break(0xC471u);
    JUMPOUT(0x1987DD930);
  }
LABEL_10:
  JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v27, v28, v29, v30, v31, (uint64_t)v123);
  v32 = (_QWORD *)(a1 + 648);
  v33 = *(_QWORD *)((char *)v123 + 4);
  v34 = *(_DWORD *)(a1 + 640);
  LODWORD(v113) = v123[0];
  *(_QWORD *)((char *)&v113 + 4) = *(_QWORD *)((char *)v123 + 4);
  HIDWORD(v113) = v34;
  v35 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v35 == *(_DWORD *)(a1 + 656))
  {
    v84 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v32, v35 + 1, (unint64_t)&v113);
    v85 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v85 = *(_DWORD *)v84;
    *(_QWORD *)(v85 + 4) = *(_QWORD *)(v84 + 4);
    *(_DWORD *)(v85 + 12) = *(_DWORD *)(v84 + 12);
  }
  else
  {
    v36 = *v32 + 16 * v35;
    *(_DWORD *)v36 = v123[0];
    *(_QWORD *)(v36 + 4) = v33;
    *(_DWORD *)(v36 + 12) = v34;
  }
  ++*(_DWORD *)(a1 + 660);
LABEL_13:
  if (*(_BYTE *)(a1 + 793))
  {
    v37 = *(_DWORD *)(a1 + 200);
    if (v37 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v25, v26, v27, v28, v29, v30, v31);
      v37 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v37) = -1203765246;
    *(_DWORD *)(a1 + 200) += 4;
    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
    if (*(_WORD *)v38)
      v39 = *(unsigned __int16 *)(v38 + 38);
    else
      v39 = *(_DWORD *)(v38 + 172);
    JSC::MacroAssemblerARM64::store32(a1, 2, ((v16 << 37) | 0x1000000019) + ((unint64_t)((v39 + 7) & 0xFFFFFFF8) << 32), v27, v28, v29, v30, v31);
  }
  v40 = 0;
  v41 = *(unsigned int *)(a1 + 640);
  v42 = 2;
  if ((_DWORD)v41 != -1 && (_DWORD)v41 != 0x3FFFFFFF)
  {
    if (v41 >> 28)
    {
      v40 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v40 = 0;
      *(_DWORD *)(v40 + 8) = v41;
      LODWORD(v41) = *(_DWORD *)(a1 + 640);
      v42 = 1;
    }
    else
    {
      v42 = 0;
      v40 = v41 << 36;
    }
  }
  v112 = v40 | v42;
  v123[0] = xmmword_199156F50;
  LOWORD(v111) = 1;
  JSC::JITGetByIdGenerator::JITGetByIdGenerator((uint64_t)&v113, 0, v20, 1, 0, &v112, v41 >> 2, (uint64_t)v123, *(_QWORD *)(v17 + 1768) | 1, 0, 0, v111);
  if ((v112 & 1) != 0 && (v112 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v112 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  JSC::JITGetByIdGenerator::generateBaselineDataICFastPath((JSC::JITGetByIdGenerator *)&v113, (JSC::JIT *)a1, v44, v45, v46, v47, v48, v49);
  JSC::JIT::resetSP((JSC::JIT *)a1, v50, v51, v52, v53, v54, v55, v56);
  v64 = (_QWORD *)(a1 + 648);
  v65 = *(_DWORD *)(a1 + 640);
  LODWORD(v123[0]) = -1;
  *(_QWORD *)((char *)v123 + 4) = 0xFF000F4100000000;
  HIDWORD(v123[0]) = v65;
  v66 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v66 == *(_DWORD *)(a1 + 656))
  {
    v82 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v64, v66 + 1, (unint64_t)v123);
    v83 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v83 = *(_DWORD *)v82;
    *(_QWORD *)(v83 + 4) = *(_QWORD *)(v82 + 4);
    *(_DWORD *)(v83 + 12) = *(_DWORD *)(v82 + 12);
  }
  else
  {
    v67 = *v64 + 16 * v66;
    *(_DWORD *)v67 = -1;
    *(_QWORD *)(v67 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v67 + 12) = v65;
  }
  ++*(_DWORD *)(a1 + 660);
  v68 = (_QWORD *)(a1 + 416);
  v69 = *(unsigned int *)(a1 + 428);
  if ((_DWORD)v69 == *(_DWORD *)(a1 + 424))
  {
    v73 = (__int128 *)WTF::Vector<JSC::JITGetByIdGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v68, v69 + 1, (unint64_t)&v113);
    v80 = *(_QWORD *)(a1 + 416) + ((unint64_t)*(unsigned int *)(a1 + 428) << 6);
    v81 = *v73;
    *(_BYTE *)(v80 + 16) = *((_BYTE *)v73 + 16);
    *(_OWORD *)v80 = v81;
    *(_DWORD *)(v80 + 20) = *((_DWORD *)v73 + 5);
    *(_DWORD *)(v80 + 24) = *((_DWORD *)v73 + 6);
    *(_DWORD *)(v80 + 28) = *((_DWORD *)v73 + 7);
    *(_QWORD *)(v80 + 32) = *((_QWORD *)v73 + 4);
    *(_WORD *)(v80 + 40) = *((_WORD *)v73 + 20);
    *(_DWORD *)(v80 + 44) = *((_DWORD *)v73 + 11);
    *(_QWORD *)(v80 + 48) = *((_QWORD *)v73 + 6);
    v72 = (_BYTE *)(v80 + 56);
  }
  else
  {
    v70 = *v68 + (v69 << 6);
    v71 = v113;
    *(_BYTE *)(v70 + 16) = v114;
    *(_OWORD *)v70 = v71;
    *(_DWORD *)(v70 + 20) = v115;
    *(_DWORD *)(v70 + 24) = v116;
    *(_DWORD *)(v70 + 28) = v117;
    *(_QWORD *)(v70 + 32) = v118;
    *(_WORD *)(v70 + 40) = v119;
    *(_DWORD *)(v70 + 44) = v120;
    *(_QWORD *)(v70 + 48) = v121;
    v72 = (_BYTE *)(v70 + 56);
    v73 = &v113;
  }
  *v72 = *((_BYTE *)v73 + 56);
  ++*(_DWORD *)(a1 + 428);
  v74 = *(_DWORD *)(a1 + 200);
  v122 = v74;
  if (v74 < *(_DWORD *)(a1 + 52))
  {
    do
    {
      if ((v74 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v57, v58, v59, v60, v61, v62, v63);
        v74 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v74) = -721215457;
      v74 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v74;
    }
    while (v74 < *(_DWORD *)(a1 + 52));
    v122 = v74;
  }
  *(_DWORD *)(a1 + 208) = 0;
  WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>((uint64_t *)(a1 + 408), (int *)(a1 + 640), &v122, (uint64_t)v123);
  if (*(_BYTE *)(a1 + 793))
    JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)~v14 << 36) | 0x19, v75, v76, v77, v78, v79);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v12 << 35) | 0x1D, v75, v76, v77, v78, v79);
}

void JSC::JIT::emit_op_get_by_id_with_this(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  __int128 *v73;
  uint64_t v74;
  __int128 v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  _DWORD *v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  _DWORD *v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  char v119;
  int v120;
  _OWORD v121[2];

  v9 = *a2;
  if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v13 = *(unsigned int *)(a2 + 6);
    v15 = *(unsigned int *)(a2 + 10);
    v16 = *(_DWORD *)(a2 + 14);
    v17 = *(_DWORD *)(a2 + 18);
  }
  else if (v9 == 128)
  {
    v105 = *((__int16 *)a2 + 1);
    if (v105 <= 63)
      v11 = v105;
    else
      v11 = (v105 + 1073741760);
    v106 = *((__int16 *)a2 + 2);
    if (v106 <= 63)
      v13 = v106;
    else
      v13 = (v106 + 1073741760);
    v107 = *((__int16 *)a2 + 3);
    if (v107 <= 63)
      v15 = v107;
    else
      v15 = (v107 + 1073741760);
    v16 = *((unsigned __int16 *)a2 + 4);
    v17 = *((unsigned __int16 *)a2 + 5);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
    if (v12 <= 15)
      v13 = v12;
    else
      v13 = (v12 + 1073741808);
    v14 = (char)a2[3];
    if (v14 <= 15)
      v15 = v14;
    else
      v15 = (v14 + 1073741808);
    v16 = a2[4];
    v17 = a2[5];
  }
  v18 = *(unsigned int **)(*(_QWORD *)(a1 + 808) + 104);
  if (*v18 <= v16)
  {
    __break(0xC471u);
    goto LABEL_87;
  }
  if ((int)v13 < 0x40000000)
  {
    v19 = ((unint64_t)v13 << 35) | 0x1D;
LABEL_16:
    JSC::MacroAssemblerARM64::load64(a1, v19, 0, a4, a5, a6, a7, a8);
    goto LABEL_17;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v13))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v82, v83, v84, v85, v86);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v95, v96, v97, v98, v99);
    v19 = v13 << 35;
    goto LABEL_16;
  }
  v87 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v87 <= (v13 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987DE158);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v87[2 * (v13 - 0x40000000) + 2], 0, v82, v83, v84, v85, v86);
LABEL_17:
  if ((int)v15 < 0x40000000)
  {
    v25 = ((unint64_t)v15 << 35) | 0x1D;
LABEL_19:
    JSC::MacroAssemblerARM64::load64(a1, v25, 1, v20, v21, v22, v23, v24);
    goto LABEL_20;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v15))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v88, v89, v90, v91, v92);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v100, v101, v102, v103, v104);
    v25 = (v15 << 35) | 1;
    goto LABEL_19;
  }
  v93 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v93 <= (v15 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987DE178);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v93[2 * (v15 - 0x40000000) + 2], 1, v88, v89, v90, v91, v92);
LABEL_20:
  v26 = *(_DWORD *)(a1 + 888);
  v27 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v26 + 136), 2, v28, v29, v30, v31);
  if ((int)v13 < 0x40000000)
    goto LABEL_21;
  v108 = *(_QWORD *)(a1 + 808);
  v109 = (v13 - 0x40000000);
  v110 = *(_DWORD **)(v108 + 120);
  if (!v110 || *v110 <= v109 || *((_BYTE *)v110 + v109 + 4) != 3)
  {
    v111 = *(_DWORD **)(v108 + 112);
    if (*v111 <= v109)
    {
      __break(0xC471u);
      JUMPOUT(0x1987DE1A8);
    }
    if ((*(_QWORD *)&v111[2 * v109 + 2] & 0xFFFE000000000002) != 0)
    {
LABEL_21:
      JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v32, v33, v34, v35, v36, (uint64_t)v121);
      v37 = *(_DWORD *)(a1 + 640);
      LODWORD(v118) = v121[0];
      *(_QWORD *)((char *)&v118 + 4) = *(_QWORD *)((char *)v121 + 4);
      HIDWORD(v118) = v37;
      v38 = *(unsigned int *)(a1 + 660);
      if ((_DWORD)v38 == *(_DWORD *)(a1 + 656))
      {
        WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v118);
      }
      else
      {
        v39 = *(_QWORD *)(a1 + 648) + 16 * v38;
        *(_DWORD *)v39 = v121[0];
        *(_QWORD *)(v39 + 4) = *(_QWORD *)((char *)&v118 + 4);
        *(_DWORD *)(v39 + 12) = HIDWORD(v118);
        ++*(_DWORD *)(a1 + 660);
      }
    }
  }
  if ((int)v15 < 0x40000000)
  {
LABEL_24:
    JSC::AssemblyHelpers::branchIfNotCell(a1, 1, 1, v32, v33, v34, v35, v36, (uint64_t)v121);
    v40 = *(_QWORD *)((char *)v121 + 4);
    v41 = *(_DWORD *)(a1 + 640);
    LODWORD(v118) = v121[0];
    *(_QWORD *)((char *)&v118 + 4) = *(_QWORD *)((char *)v121 + 4);
    HIDWORD(v118) = v41;
    v42 = *(unsigned int *)(a1 + 660);
    if ((_DWORD)v42 == *(_DWORD *)(a1 + 656))
    {
      WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v118);
    }
    else
    {
      v43 = *(_QWORD *)(a1 + 648) + 16 * v42;
      *(_DWORD *)v43 = v121[0];
      *(_QWORD *)(v43 + 4) = v40;
      *(_DWORD *)(v43 + 12) = v41;
      ++*(_DWORD *)(a1 + 660);
    }
    goto LABEL_26;
  }
  v112 = *(_QWORD *)(a1 + 808);
  v113 = (v15 - 0x40000000);
  v114 = *(_DWORD **)(v112 + 120);
  if (!v114 || *v114 <= v113 || *((_BYTE *)v114 + v113 + 4) != 3)
  {
    v115 = *(_DWORD **)(v112 + 112);
    if (*v115 > v113)
    {
      if ((*(_QWORD *)&v115[2 * v113 + 2] & 0xFFFE000000000002) == 0)
        goto LABEL_26;
      goto LABEL_24;
    }
    __break(0xC471u);
LABEL_87:
    JUMPOUT(0x1987DDFB8);
  }
LABEL_26:
  v44 = 0;
  v45 = *(unsigned int *)(a1 + 640);
  if ((_DWORD)v45 == -1 || (_DWORD)v45 == 0x3FFFFFFF)
  {
    v46 = 2;
  }
  else if (v45 >> 28)
  {
    v44 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v44 = 0;
    *(_DWORD *)(v44 + 8) = v45;
    LODWORD(v45) = *(_DWORD *)(a1 + 640);
    v46 = 1;
  }
  else
  {
    v46 = 0;
    v44 = v45 << 36;
  }
  v117 = v44 | v46;
  v121[0] = xmmword_199156F50;
  LOBYTE(v116) = 2;
  JSC::JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator((uint64_t)&v118, 0, v27, 1, 0, &v117, v45 >> 2, (uint64_t)v121, *(_QWORD *)&v18[2 * v16 + 2] | 1, 0, 0, 1, v116);
  if ((v117 & 1) != 0 && (v117 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v117 & 0xFFFFFFFF8, v47, v48, v49, v50, v51, v52, v53);
  JSC::JITGetByIdWithThisGenerator::generateBaselineDataICFastPath((JSC::JITGetByIdWithThisGenerator *)&v118, (JSC::JIT *)a1, v48, v49, v50, v51, v52, v53);
  JSC::JIT::resetSP((JSC::JIT *)a1, v54, v55, v56, v57, v58, v59, v60);
  v68 = *(_DWORD *)(a1 + 640);
  LODWORD(v121[0]) = -1;
  *(_QWORD *)((char *)v121 + 4) = 0xFF000F4100000000;
  HIDWORD(v121[0]) = v68;
  v69 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v69 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)v121);
  }
  else
  {
    v70 = *(_QWORD *)(a1 + 648) + 16 * v69;
    *(_DWORD *)v70 = -1;
    *(_QWORD *)(v70 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v70 + 12) = v68;
    ++*(_DWORD *)(a1 + 660);
  }
  v71 = (_QWORD *)(a1 + 448);
  v72 = *(unsigned int *)(a1 + 460);
  if ((_DWORD)v72 == *(_DWORD *)(a1 + 456))
  {
    v73 = (__int128 *)WTF::Vector<JSC::JITGetByIdWithThisGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v71, v72 + 1, (unint64_t)&v118);
    v74 = *(_QWORD *)(a1 + 448) + 56 * *(unsigned int *)(a1 + 460);
    v75 = *v73;
    *(_BYTE *)(v74 + 16) = *((_BYTE *)v73 + 16);
    *(_OWORD *)v74 = v75;
  }
  else
  {
    v74 = *v71 + 56 * v72;
    v94 = v118;
    *(_BYTE *)(v74 + 16) = v119;
    *(_OWORD *)v74 = v94;
    v73 = &v118;
  }
  *(_DWORD *)(v74 + 20) = *((_DWORD *)v73 + 5);
  *(_DWORD *)(v74 + 24) = *((_DWORD *)v73 + 6);
  *(_DWORD *)(v74 + 28) = *((_DWORD *)v73 + 7);
  *(_QWORD *)(v74 + 32) = *((_QWORD *)v73 + 4);
  *(_WORD *)(v74 + 40) = *((_WORD *)v73 + 20);
  *(_DWORD *)(v74 + 44) = *((_DWORD *)v73 + 11);
  *(_QWORD *)(v74 + 48) = *((_QWORD *)v73 + 6);
  ++*(_DWORD *)(a1 + 460);
  v76 = *(_DWORD *)(a1 + 200);
  v120 = v76;
  if (v76 < *(_DWORD *)(a1 + 52))
  {
    do
    {
      if ((v76 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v61, v62, v63, v64, v65, v66, v67);
        v76 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v76) = -721215457;
      v76 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v76;
    }
    while (v76 < *(_DWORD *)(a1 + 52));
    v120 = v76;
  }
  *(_DWORD *)(a1 + 208) = 0;
  WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>((uint64_t *)(a1 + 408), (int *)(a1 + 640), &v120, (uint64_t)v121);
  if (*(_BYTE *)(a1 + 793))
    JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)~v17 << 36) | 0x19, v77, v78, v79, v80, v81);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v11 << 35) | 0x1D, v77, v78, v79, v80, v81);
}

void JSC::JIT::emitSlow_op_get_by_id_with_this(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::ExecutableMemoryHandle *v49;
  __int128 v50;
  uint64_t v51;

  v8 = *(_DWORD *)(a1 + 688);
  *(_DWORD *)(a1 + 688) = v8 + 1;
  if (*(_DWORD *)(a1 + 460) <= v8)
    goto LABEL_18;
  v10 = *(_QWORD *)(a1 + 448) + 56 * v8;
  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v11, v12, v13, v14, v15, v16, v17);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(v10 + 28) = i;
  v19 = *(char *)(v10 + 16);
  if (v19 >= 0x1F)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1987DE400);
  }
  JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))off_1E3596240[v19], v13, v14, v15, v16, v17, &v48);
  v27 = v48;
  *(_DWORD *)(a1 + 208) = 0;
  v28 = *(_DWORD *)(a1 + 200);
  if (v28 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
    v28 = *(_DWORD *)(a1 + 200);
  }
  v29 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = -1811939328;
  v30 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v30;
  LOBYTE(v51) = -1;
  BYTE3(v51) = 15;
  *(_WORD *)((char *)&v51 + 1) = 65;
  *(_QWORD *)&v50 = v30 - 4;
  *((_QWORD *)&v50 + 1) = v27;
  WORD2(v51) = 384;
  v31 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v31 == *(_DWORD *)(a1 + 40))
  {
    v38 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v31 + 1, (unint64_t)&v50, v22, v23, v24, v25, v26);
    v32 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v32 = 0;
    *(_QWORD *)(v32 + 8) = 0;
    *(_BYTE *)(v32 + 16) = -1;
    v39 = (((*(unsigned __int8 *)(v32 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v32 + 17) = 65;
    *(_BYTE *)(v32 + 19) = BYTE2(v39);
    *(_WORD *)(v32 + 20) &= 0xFC00u;
    v33 = *(_OWORD *)v38;
    v34 = *(_QWORD *)(v38 + 16);
  }
  else
  {
    v32 = *v29 + 24 * v31;
    v33 = v50;
    v34 = v51;
  }
  *(_QWORD *)(v32 + 16) = v34;
  *(_OWORD *)v32 = v33;
  ++*(_DWORD *)(a1 + 44);
  v35 = (unsigned int *)v49;
  v49 = 0;
  if (v35)
  {
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v35, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
  }
}

unsigned int *JSC::JIT::emit_op_put_by_id(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 *v76;
  int v78;
  int v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  int v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  int v93;
  _DWORD *v94;
  _DWORD *v95;
  unint64_t v96;
  BOOL v97;
  char **v98;
  unsigned int v100;
  int v101;
  unsigned int v102;
  _DWORD *v103;
  unint64_t v104;
  BOOL v105;
  char **v106;
  unsigned int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  _DWORD *v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  char v118;
  __int128 v119;

  v9 = *a2;
  if (v9 == 128)
  {
    v78 = *((__int16 *)a2 + 1);
    if (v78 <= 63)
      v11 = v78;
    else
      v11 = (v78 + 1073741760);
    v12 = *((unsigned __int16 *)a2 + 2);
    v79 = *((__int16 *)a2 + 3);
    if (v79 <= 63)
      v14 = v79;
    else
      v14 = (v79 + 1073741760);
    v15 = a2[8];
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v12 = *(_DWORD *)(a2 + 6);
    v14 = *(unsigned int *)(a2 + 10);
    v15 = a2[14];
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = a2[2];
    v13 = (char)a2[3];
    if (v13 <= 15)
      v14 = v13;
    else
      v14 = (v13 + 1073741808);
    v15 = a2[4];
  }
  v16 = *(_QWORD *)(a1 + 808);
  v17 = *(unsigned int **)(v16 + 104);
  if (*v17 <= v12)
  {
    __break(0xC471u);
    JUMPOUT(0x1987DEAD0);
  }
  v18 = v11;
  if ((int)v11 < 0x40000000)
  {
    v19 = ((unint64_t)v11 << 35) | 0x1D;
LABEL_13:
    JSC::MacroAssemblerARM64::load64(a1, v19, 1, a4, a5, a6, a7, a8);
    goto LABEL_14;
  }
  v85 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v86 = (v11 - 0x40000000);
  v87 = *(_DWORD **)(v85 + 120);
  if (!v87 || *v87 <= v86)
    goto LABEL_61;
  v88 = *((unsigned __int8 *)v87 + v86 + 4);
  if ((v88 - 1) >= 2)
  {
    if (v88)
    {
      if (v88 != 3)
        goto LABEL_112;
      goto LABEL_72;
    }
LABEL_61:
    v95 = *(_DWORD **)(v85 + 112);
    if (*v95 <= v86)
    {
      __break(0xC471u);
      JUMPOUT(0x1987DEBB8);
    }
    v96 = *(_QWORD *)&v95[2 * v86 + 2];
    if (v96)
      v97 = (v96 & 0xFFFE000000000002) == 0;
    else
      v97 = 0;
    if (!v97)
      goto LABEL_53;
    v98 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE) + 0x4C));
    if (v98 != &JSC::SymbolTable::s_info && v98 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_53;
LABEL_72:
    v100 = *(_DWORD *)(a1 + 200);
    if (v100 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v100 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v100) = -129956959;
    v101 = *(_DWORD *)(a1 + 200);
    v102 = v101 + 4;
    *(_DWORD *)(a1 + 200) = v101 + 4;
    if ((v101 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v102 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v102) = -129368031;
    *(_DWORD *)(a1 + 200) += 4;
    v19 = (v11 << 35) | 1;
    goto LABEL_13;
  }
LABEL_53:
  v89 = *(_DWORD **)(v16 + 112);
  if (*v89 <= v86)
  {
    __break(0xC471u);
    JUMPOUT(0x1987DEB78);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v89[2 * v86 + 2], 1, a4, a5, a6, a7, a8);
LABEL_14:
  if ((int)v14 < 0x40000000)
  {
    v27 = (v14 << 35) | 0x1D;
LABEL_16:
    JSC::MacroAssemblerARM64::load64(a1, v27, 0, v22, v23, v24, v25, v26);
    goto LABEL_17;
  }
  v90 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v91 = (v14 - 0x40000000);
  v92 = *(_DWORD **)(v90 + 120);
  if (!v92 || *v92 <= v91)
    goto LABEL_78;
  v93 = *((unsigned __int8 *)v92 + v91 + 4);
  if ((v93 - 1) >= 2)
  {
    if (v93)
    {
      if (v93 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987DEAB0);
      }
      goto LABEL_89;
    }
LABEL_78:
    v103 = *(_DWORD **)(v90 + 112);
    if (*v103 <= v91)
    {
      __break(0xC471u);
      JUMPOUT(0x1987DEBD8);
    }
    v104 = *(_QWORD *)&v103[2 * v91 + 2];
    if (v104)
      v105 = (v104 & 0xFFFE000000000002) == 0;
    else
      v105 = 0;
    if (!v105)
      goto LABEL_58;
    v106 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v104 & 0xFFFFFFFE) + 0x4C));
    if (v106 != &JSC::SymbolTable::s_info && v106 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_58;
LABEL_89:
    v108 = *(_DWORD *)(a1 + 200);
    if (v108 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
      v108 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v108) = -129956960;
    v109 = *(_DWORD *)(a1 + 200);
    v110 = v109 + 4;
    *(_DWORD *)(a1 + 200) = v109 + 4;
    if ((v109 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
      v110 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v110) = -129368064;
    *(_DWORD *)(a1 + 200) += 4;
    v27 = v14 << 35;
    goto LABEL_16;
  }
LABEL_58:
  v94 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v94 <= v91)
  {
    __break(0xC471u);
    JUMPOUT(0x1987DEB98);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v94[2 * v91 + 2], 0, v22, v23, v24, v25, v26);
LABEL_17:
  v28 = *(_DWORD *)(a1 + 888);
  v29 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v28 + 136), 2, v30, v31, v32, v33);
  if ((int)v11 >= 0x40000000)
  {
    v111 = *(_QWORD *)(a1 + 808);
    v112 = (v11 - 0x40000000);
    v113 = *(_DWORD **)(v111 + 120);
    if (v113 && *v113 > v112 && *((_BYTE *)v113 + v112 + 4) == 3)
      goto LABEL_21;
    v114 = *(_DWORD **)(v111 + 112);
    if (*v114 > v112)
    {
      if ((*(_QWORD *)&v114[2 * v112 + 2] & 0xFFFE000000000002) == 0)
        goto LABEL_21;
      goto LABEL_18;
    }
LABEL_112:
    __break(0xC471u);
    JUMPOUT(0x1987DEA88);
  }
LABEL_18:
  JSC::AssemblyHelpers::branchIfNotCell(a1, 1, 1, v34, v35, v36, v37, v38, (uint64_t)&v119);
  v39 = (_QWORD *)(a1 + 648);
  v40 = *(_QWORD *)((char *)&v119 + 4);
  v41 = *(_DWORD *)(a1 + 640);
  LODWORD(v117) = v119;
  *(_QWORD *)((char *)&v117 + 4) = *(_QWORD *)((char *)&v119 + 4);
  HIDWORD(v117) = v41;
  v42 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v42 == *(_DWORD *)(a1 + 656))
  {
    v83 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v42 + 1, (unint64_t)&v117);
    v84 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v84 = *(_DWORD *)v83;
    *(_QWORD *)(v84 + 4) = *(_QWORD *)(v83 + 4);
    *(_DWORD *)(v84 + 12) = *(_DWORD *)(v83 + 12);
  }
  else
  {
    v43 = *v39 + 16 * v42;
    *(_DWORD *)v43 = v119;
    *(_QWORD *)(v43 + 4) = v40;
    *(_DWORD *)(v43 + 12) = v41;
  }
  ++*(_DWORD *)(a1 + 660);
LABEL_21:
  v44 = 0;
  v45 = v17 + 2;
  v46 = *(unsigned int *)(a1 + 640);
  v47 = 2;
  if ((_DWORD)v46 != -1 && (_DWORD)v46 != 0x3FFFFFFF)
  {
    if (v46 >> 28)
    {
      v44 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v44 = 0;
      *(_DWORD *)(v44 + 8) = v46;
      LODWORD(v46) = *(_DWORD *)(a1 + 640);
      v47 = 1;
    }
    else
    {
      v47 = 0;
      v44 = v46 << 36;
    }
  }
  v116 = v44 | v47;
  v119 = xmmword_199156F50;
  if ((v15 & 2) != 0)
    v48 = 8;
  else
    v48 = 9;
  if ((v15 & 2) != 0)
    v49 = 6;
  else
    v49 = 7;
  if ((v15 & 1) == 0)
    v48 = v49;
  BYTE2(v115) = v48;
  LOWORD(v115) = 770;
  JSC::JITPutByIdGenerator::JITPutByIdGenerator((uint64_t)&v117, 0, v29, 1, 0, &v116, v46 >> 2, (uint64_t)&v119, *(_QWORD *)&v45[2 * v12] | 1, 1, 0, v115);
  if ((v116 & 1) != 0 && (v116 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v116 & 0xFFFFFFFF8, v50, v51, v52, v53, v54, v55, v56);
  JSC::JITPutByIdGenerator::generateBaselineDataICFastPath((JSC::JITPutByIdGenerator *)&v117, (JSC::JIT *)a1, v51, v52, v53, v54, v55, v56);
  JSC::JIT::resetSP((JSC::JIT *)a1, v57, v58, v59, v60, v61, v62, v63);
  v68 = (_QWORD *)(a1 + 648);
  v69 = *(_DWORD *)(a1 + 640);
  LODWORD(v119) = -1;
  *(_QWORD *)((char *)&v119 + 4) = 0xFF000F4100000000;
  HIDWORD(v119) = v69;
  v70 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v70 == *(_DWORD *)(a1 + 656))
  {
    v81 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v68, v70 + 1, (unint64_t)&v119);
    v82 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v82 = *(_DWORD *)v81;
    *(_QWORD *)(v82 + 4) = *(_QWORD *)(v81 + 4);
    *(_DWORD *)(v82 + 12) = *(_DWORD *)(v81 + 12);
  }
  else
  {
    v71 = *v68 + 16 * v70;
    *(_DWORD *)v71 = -1;
    *(_QWORD *)(v71 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v71 + 12) = v69;
  }
  ++*(_DWORD *)(a1 + 660);
  v72 = (_QWORD *)(a1 + 480);
  v73 = *(unsigned int *)(a1 + 492);
  if ((_DWORD)v73 == *(_DWORD *)(a1 + 488))
  {
    v76 = (__int128 *)WTF::Vector<JSC::JITPutByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v72, v73 + 1, (unint64_t)&v117);
    v74 = *(_QWORD *)(a1 + 480) + 56 * *(unsigned int *)(a1 + 492);
    v80 = *v76;
    *(_BYTE *)(v74 + 16) = *((_BYTE *)v76 + 16);
    *(_OWORD *)v74 = v80;
  }
  else
  {
    v74 = *v72 + 56 * v73;
    v75 = v117;
    *(_BYTE *)(v74 + 16) = v118;
    *(_OWORD *)v74 = v75;
    v76 = &v117;
  }
  *(_DWORD *)(v74 + 20) = *((_DWORD *)v76 + 5);
  *(_DWORD *)(v74 + 24) = *((_DWORD *)v76 + 6);
  *(_DWORD *)(v74 + 28) = *((_DWORD *)v76 + 7);
  *(_QWORD *)(v74 + 32) = *((_QWORD *)v76 + 4);
  *(_WORD *)(v74 + 40) = *((_WORD *)v76 + 20);
  *(_DWORD *)(v74 + 44) = *((_DWORD *)v76 + 11);
  *(_QWORD *)(v74 + 48) = *((_QWORD *)v76 + 6);
  ++*(_DWORD *)(a1 + 492);
  return JSC::JIT::emitWriteBarrier(a1, v18, 0x3FFFFFFFLL, 1, v64, v65, v66, v67);
}

void JSC::JIT::emitSlow_op_put_by_id(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::ExecutableMemoryHandle *v49;
  __int128 v50;
  uint64_t v51;

  v8 = *(_DWORD *)(a1 + 696);
  *(_DWORD *)(a1 + 696) = v8 + 1;
  if (*(_DWORD *)(a1 + 492) <= v8)
    goto LABEL_18;
  v10 = *(_QWORD *)(a1 + 480) + 56 * v8;
  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v11, v12, v13, v14, v15, v16, v17);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(v10 + 28) = i;
  v19 = *(char *)(v10 + 16);
  if (v19 >= 0x1F)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1987DEE70);
  }
  JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))off_1E3596240[v19], v13, v14, v15, v16, v17, &v48);
  v27 = v48;
  *(_DWORD *)(a1 + 208) = 0;
  v28 = *(_DWORD *)(a1 + 200);
  if (v28 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
    v28 = *(_DWORD *)(a1 + 200);
  }
  v29 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = -1811939328;
  v30 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v30;
  LOBYTE(v51) = -1;
  BYTE3(v51) = 15;
  *(_WORD *)((char *)&v51 + 1) = 65;
  *(_QWORD *)&v50 = v30 - 4;
  *((_QWORD *)&v50 + 1) = v27;
  WORD2(v51) = 384;
  v31 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v31 == *(_DWORD *)(a1 + 40))
  {
    v38 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v31 + 1, (unint64_t)&v50, v22, v23, v24, v25, v26);
    v32 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v32 = 0;
    *(_QWORD *)(v32 + 8) = 0;
    *(_BYTE *)(v32 + 16) = -1;
    v39 = (((*(unsigned __int8 *)(v32 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v32 + 17) = 65;
    *(_BYTE *)(v32 + 19) = BYTE2(v39);
    *(_WORD *)(v32 + 20) &= 0xFC00u;
    v33 = *(_OWORD *)v38;
    v34 = *(_QWORD *)(v38 + 16);
  }
  else
  {
    v32 = *v29 + 24 * v31;
    v33 = v50;
    v34 = v51;
  }
  *(_QWORD *)(v32 + 16) = v34;
  *(_OWORD *)v32 = v33;
  ++*(_DWORD *)(a1 + 44);
  v35 = (unsigned int *)v49;
  v49 = 0;
  if (v35)
  {
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v35, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
  }
}

void JSC::JIT::emit_op_in_by_id(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  char v91;
  int v92;
  _OWORD v93[2];

  v9 = *a2;
  if (v9 == 128)
  {
    v78 = *((__int16 *)a2 + 1);
    if (v78 <= 63)
      v11 = v78;
    else
      v11 = (v78 + 1073741760);
    v12 = *((__int16 *)a2 + 2);
    if (v12 > 63)
      v12 += 1073741760;
    v13 = *((unsigned __int16 *)a2 + 3);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v12 = *(_DWORD *)(a2 + 6);
    v13 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
    if (v12 > 15)
      v12 += 1073741808;
    v13 = a2[3];
  }
  v14 = *(unsigned int **)(*(_QWORD *)(a1 + 808) + 104);
  if (*v14 <= v13)
    goto LABEL_56;
  v15 = v12;
  if (v12 < 0x40000000)
  {
    v16 = ((unint64_t)v12 << 35) | 0x1D;
LABEL_12:
    JSC::MacroAssemblerARM64::load64(a1, v16, 0, a4, a5, a6, a7, a8);
    goto LABEL_13;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v12))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v72, v73, v74, v75, v76);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v79, v80, v81, v82, v83);
    v16 = v15 << 35;
    goto LABEL_12;
  }
  v77 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v77 <= (v15 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987DF370);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v77[2 * (v15 - 0x40000000) + 2], 0, v72, v73, v74, v75, v76);
LABEL_13:
  v17 = *(_DWORD *)(a1 + 888);
  v18 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v17 + 136), 1, v19, v20, v21, v22);
  if ((int)v15 < 0x40000000)
  {
LABEL_14:
    JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v23, v24, v25, v26, v27, (uint64_t)v93);
    v28 = *(_QWORD *)((char *)v93 + 4);
    v29 = *(_DWORD *)(a1 + 640);
    LODWORD(v90) = v93[0];
    *(_QWORD *)((char *)&v90 + 4) = *(_QWORD *)((char *)v93 + 4);
    HIDWORD(v90) = v29;
    v30 = *(unsigned int *)(a1 + 660);
    if ((_DWORD)v30 == *(_DWORD *)(a1 + 656))
    {
      WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v90);
    }
    else
    {
      v31 = *(_QWORD *)(a1 + 648) + 16 * v30;
      *(_DWORD *)v31 = v93[0];
      *(_QWORD *)(v31 + 4) = v28;
      *(_DWORD *)(v31 + 12) = v29;
      ++*(_DWORD *)(a1 + 660);
    }
    goto LABEL_16;
  }
  v84 = *(_QWORD *)(a1 + 808);
  v85 = (v15 - 0x40000000);
  v86 = *(_DWORD **)(v84 + 120);
  if (!v86 || *v86 <= v85 || *((_BYTE *)v86 + v85 + 4) != 3)
  {
    v87 = *(_DWORD **)(v84 + 112);
    if (*v87 > v85)
    {
      if ((*(_QWORD *)&v87[2 * v85 + 2] & 0xFFFE000000000002) == 0)
        goto LABEL_16;
      goto LABEL_14;
    }
LABEL_56:
    __break(0xC471u);
    JUMPOUT(0x1987DF284);
  }
LABEL_16:
  v32 = 0;
  v33 = v14 + 2;
  v34 = *(unsigned int *)(a1 + 640);
  v35 = 2;
  if ((_DWORD)v34 != -1 && (_DWORD)v34 != 0x3FFFFFFF)
  {
    if (v34 >> 28)
    {
      v32 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v32 = 0;
      *(_DWORD *)(v32 + 8) = v34;
      LODWORD(v34) = *(_DWORD *)(a1 + 640);
      v35 = 1;
    }
    else
    {
      v35 = 0;
      v32 = v34 << 36;
    }
  }
  v89 = v32 | v35;
  v93[0] = xmmword_199156F50;
  LOBYTE(v88) = 1;
  JSC::JITInByIdGenerator::JITInByIdGenerator((uint64_t)&v90, 0, v18, 1, 0, &v89, v34 >> 2, (uint64_t)v93, *(_QWORD *)&v33[2 * v13] | 1, 0, 0, v88);
  if ((v89 & 1) != 0 && (v89 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v89 & 0xFFFFFFFF8, v36, v37, v38, v39, v40, v41, v42);
  JSC::JITInByIdGenerator::generateBaselineDataICFastPath((JSC::JITInByIdGenerator *)&v90, (JSC::JIT *)a1, v37, v38, v39, v40, v41, v42);
  v50 = *(_DWORD *)(a1 + 640);
  LODWORD(v93[0]) = -1;
  *(_QWORD *)((char *)v93 + 4) = 0xFF000F4100000000;
  HIDWORD(v93[0]) = v50;
  v51 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v51 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)v93);
  }
  else
  {
    v52 = *(_QWORD *)(a1 + 648) + 16 * v51;
    *(_DWORD *)v52 = -1;
    *(_QWORD *)(v52 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v52 + 12) = v50;
    ++*(_DWORD *)(a1 + 660);
  }
  v53 = (_QWORD *)(a1 + 512);
  v54 = *(unsigned int *)(a1 + 524);
  if ((_DWORD)v54 == *(_DWORD *)(a1 + 520))
  {
    v55 = (__int128 *)WTF::Vector<JSC::JITInByIdGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v53, v54 + 1, (unint64_t)&v90);
    v56 = *(_QWORD *)(a1 + 512) + 56 * *(unsigned int *)(a1 + 524);
    v57 = *v55;
    *(_BYTE *)(v56 + 16) = *((_BYTE *)v55 + 16);
    *(_OWORD *)v56 = v57;
  }
  else
  {
    v56 = *v53 + 56 * v54;
    v71 = v90;
    *(_BYTE *)(v56 + 16) = v91;
    *(_OWORD *)v56 = v71;
    v55 = &v90;
  }
  *(_DWORD *)(v56 + 20) = *((_DWORD *)v55 + 5);
  *(_DWORD *)(v56 + 24) = *((_DWORD *)v55 + 6);
  *(_DWORD *)(v56 + 28) = *((_DWORD *)v55 + 7);
  *(_QWORD *)(v56 + 32) = *((_QWORD *)v55 + 4);
  *(_WORD *)(v56 + 40) = *((_WORD *)v55 + 20);
  *(_DWORD *)(v56 + 44) = *((_DWORD *)v55 + 11);
  *(_QWORD *)(v56 + 48) = *((_QWORD *)v55 + 6);
  ++*(_DWORD *)(a1 + 524);
  JSC::JIT::resetSP((JSC::JIT *)a1, v43, v44, v45, v46, v47, v48, v49);
  v65 = *(_DWORD *)(a1 + 200);
  v92 = v65;
  if (v65 < *(_DWORD *)(a1 + 52))
  {
    do
    {
      if ((v65 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v58, v59, v60, v61, v62, v63, v64);
        v65 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v65) = -721215457;
      v65 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v65;
    }
    while (v65 < *(_DWORD *)(a1 + 52));
    v92 = v65;
  }
  *(_DWORD *)(a1 + 208) = 0;
  WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>((uint64_t *)(a1 + 408), (int *)(a1 + 640), &v92, (uint64_t)v93);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v11 << 35) | 0x1D, v66, v67, v68, v69, v70);
}

void JSC::JIT::emitSlow_op_in_by_id(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::ExecutableMemoryHandle *v49;
  __int128 v50;
  uint64_t v51;

  v8 = *(_DWORD *)(a1 + 704);
  *(_DWORD *)(a1 + 704) = v8 + 1;
  if (*(_DWORD *)(a1 + 524) <= v8)
    goto LABEL_18;
  v10 = *(_QWORD *)(a1 + 512) + 56 * v8;
  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v11, v12, v13, v14, v15, v16, v17);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(v10 + 28) = i;
  v19 = *(char *)(v10 + 16);
  if (v19 >= 0x1F)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1987DF5E8);
  }
  JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))off_1E3596240[v19], v13, v14, v15, v16, v17, &v48);
  v27 = v48;
  *(_DWORD *)(a1 + 208) = 0;
  v28 = *(_DWORD *)(a1 + 200);
  if (v28 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
    v28 = *(_DWORD *)(a1 + 200);
  }
  v29 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = -1811939328;
  v30 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v30;
  LOBYTE(v51) = -1;
  BYTE3(v51) = 15;
  *(_WORD *)((char *)&v51 + 1) = 65;
  *(_QWORD *)&v50 = v30 - 4;
  *((_QWORD *)&v50 + 1) = v27;
  WORD2(v51) = 384;
  v31 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v31 == *(_DWORD *)(a1 + 40))
  {
    v38 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v31 + 1, (unint64_t)&v50, v22, v23, v24, v25, v26);
    v32 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v32 = 0;
    *(_QWORD *)(v32 + 8) = 0;
    *(_BYTE *)(v32 + 16) = -1;
    v39 = (((*(unsigned __int8 *)(v32 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v32 + 17) = 65;
    *(_BYTE *)(v32 + 19) = BYTE2(v39);
    *(_WORD *)(v32 + 20) &= 0xFC00u;
    v33 = *(_OWORD *)v38;
    v34 = *(_QWORD *)(v38 + 16);
  }
  else
  {
    v32 = *v29 + 24 * v31;
    v33 = v50;
    v34 = v51;
  }
  *(_QWORD *)(v32 + 16) = v34;
  *(_OWORD *)v32 = v33;
  ++*(_DWORD *)(a1 + 44);
  v35 = (unsigned int *)v49;
  v49 = 0;
  if (v35)
  {
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v35, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
  }
}

void JSC::JIT::emit_op_in_by_val(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  __int128 *v73;
  uint64_t v74;
  __int128 v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  _DWORD *v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  char v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  int v133;
  int v134;
  _OWORD v135[2];

  v9 = *a2;
  if (v9 == 130)
  {
    v12 = *(unsigned int *)(a2 + 2);
    v13 = *(unsigned int *)(a2 + 6);
    v15 = *(unsigned int *)(a2 + 10);
    v16 = *(_DWORD *)(a2 + 14);
  }
  else
  {
    if (v9 == 128)
    {
      v107 = *((__int16 *)a2 + 1);
      v11 = 1073741760;
      if (v107 <= 63)
        v12 = v107;
      else
        v12 = (v107 + 1073741760);
      LODWORD(v13) = *((__int16 *)a2 + 2);
      v108 = *((__int16 *)a2 + 3);
      if (v108 <= 63)
        v15 = v108;
      else
        v15 = (v108 + 1073741760);
      v16 = *((unsigned __int16 *)a2 + 4);
      if ((int)v13 <= 63)
        goto LABEL_10;
    }
    else
    {
      v10 = (char)a2[1];
      v11 = 1073741808;
      if (v10 <= 15)
        v12 = v10;
      else
        v12 = (v10 + 1073741808);
      LODWORD(v13) = (char)a2[2];
      v14 = (char)a2[3];
      if (v14 <= 15)
        v15 = v14;
      else
        v15 = (v14 + 1073741808);
      v16 = a2[4];
      if ((int)v13 <= 15)
      {
LABEL_10:
        v17 = v13;
LABEL_11:
        JSC::MacroAssemblerARM64::load64(a1, (v17 << 35) | 0x1D, 0, a4, a5, a6, a7, a8);
        v23 = 0;
        goto LABEL_12;
      }
    }
    v13 = (v13 + v11);
  }
  v17 = v13;
  if ((int)v13 < 0x40000000)
    goto LABEL_11;
  if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v13))
  {
    v114 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
    if (*v114 <= (v13 - 0x40000000))
    {
      __break(0xC471u);
      JUMPOUT(0x1987DFC8CLL);
    }
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v114[2 * (v13 - 0x40000000) + 2], 0, v109, v110, v111, v112, v113);
  }
  else
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v109, v110, v111, v112, v113);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v115, v116, v117, v118, v119);
    JSC::MacroAssemblerARM64::load64(a1, v13 << 35, 0, v120, v121, v122, v123, v124);
  }
  v23 = 1;
LABEL_12:
  if ((int)v15 < 0x40000000)
  {
    v24 = (v15 << 35) | 0x1D;
LABEL_14:
    JSC::MacroAssemblerARM64::load64(a1, v24, 1, v18, v19, v20, v21, v22);
    goto LABEL_15;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v15))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v92, v93, v94, v95, v96);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v98, v99, v100, v101, v102);
    v24 = (v15 << 35) | 1;
    goto LABEL_14;
  }
  v97 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v97 <= (v15 - 0x40000000))
    goto LABEL_75;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v97[2 * (v15 - 0x40000000) + 2], 1, v92, v93, v94, v95, v96);
LABEL_15:
  v25 = *(_DWORD *)(a1 + 888);
  v26 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v25 + 136), 2, v27, v28, v29, v30);
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v35)
    v36 = *(unsigned __int16 *)(v35 + 74);
  else
    v36 = *(_DWORD *)(v35 + 244);
  JSC::MacroAssemblerARM64::add64(a1, ((v36 + 3) & 0xFFFFFFFC) + 12 * v16, 25, 3, v31, v32, v33, v34);
  if (!v23)
  {
LABEL_18:
    JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v39, v40, v41, v42, v43, (uint64_t)v135);
    v44 = *(_QWORD *)((char *)v135 + 4);
    v45 = *(_DWORD *)(a1 + 640);
    LODWORD(v127) = v135[0];
    *(_QWORD *)((char *)&v127 + 4) = *(_QWORD *)((char *)v135 + 4);
    HIDWORD(v127) = v45;
    v46 = *(unsigned int *)(a1 + 660);
    if ((_DWORD)v46 == *(_DWORD *)(a1 + 656))
    {
      WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v127);
    }
    else
    {
      v47 = *(_QWORD *)(a1 + 648) + 16 * v46;
      *(_DWORD *)v47 = v135[0];
      *(_QWORD *)(v47 + 4) = v44;
      *(_DWORD *)(v47 + 12) = v45;
      ++*(_DWORD *)(a1 + 660);
    }
    goto LABEL_20;
  }
  v103 = *(_QWORD *)(a1 + 808);
  v104 = (v13 - 0x40000000);
  v105 = *(_DWORD **)(v103 + 120);
  if (!v105 || *v105 <= v104 || *((_BYTE *)v105 + v104 + 4) != 3)
  {
    v106 = *(_DWORD **)(v103 + 112);
    if (*v106 > v104)
    {
      if ((*(_QWORD *)&v106[2 * v104 + 2] & 0xFFFE000000000002) == 0)
        goto LABEL_20;
      goto LABEL_18;
    }
LABEL_75:
    __break(0xC471u);
    JUMPOUT(0x1987DFB94);
  }
LABEL_20:
  if (*(_BYTE *)(a1 + 793))
  {
    v48 = *(_DWORD *)(a1 + 200);
    if (v48 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v37, v38, v39, v40, v41, v42, v43);
      v48 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v48) = -1203765244;
    v49 = *(_DWORD *)(a1 + 200);
    v50 = v49 + 4;
    *(_DWORD *)(a1 + 200) = v49 + 4;
    if ((v49 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v37, v38, v39, v40, v41, v42, v43);
      v50 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v50) = -1207959452;
    *(_DWORD *)(a1 + 200) += 4;
  }
  v51 = 0;
  v52 = *(unsigned int *)(a1 + 640);
  v53 = 2;
  if ((_DWORD)v52 != -1 && (_DWORD)v52 != 0x3FFFFFFF)
  {
    if (v52 >> 28)
    {
      v51 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v51 = 0;
      *(_DWORD *)(v51 + 8) = v52;
      LODWORD(v52) = *(_DWORD *)(a1 + 640);
      v53 = 1;
    }
    else
    {
      v53 = 0;
      v51 = v52 << 36;
    }
  }
  v126 = v51 | v53;
  v135[0] = xmmword_199156F50;
  LOWORD(v125) = 515;
  JSC::JITInByValGenerator::JITInByValGenerator((uint64_t)&v127, 0, v26, 1, 0, &v126, v52 >> 2, 19, (uint64_t)v135, 0, 0, 1, 0, 0, v125);
  if ((v126 & 1) != 0 && (v126 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v126 & 0xFFFFFFFF8, v54, v55, v56, v57, v58, v59, v60);
  JSC::JITInlineCacheGenerator::generateBaselineDataICFastPath((uint64_t)&v127, (JSC::MacroAssemblerARM64 *)a1, 2, v56, v57, v58, v59, v60);
  v68 = *(_DWORD *)(a1 + 640);
  LODWORD(v135[0]) = -1;
  *(_QWORD *)((char *)v135 + 4) = 0xFF000F4100000000;
  HIDWORD(v135[0]) = v68;
  v69 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v69 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)v135);
  }
  else
  {
    v70 = *(_QWORD *)(a1 + 648) + 16 * v69;
    *(_DWORD *)v70 = -1;
    *(_QWORD *)(v70 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v70 + 12) = v68;
    ++*(_DWORD *)(a1 + 660);
  }
  v71 = (_QWORD *)(a1 + 528);
  v72 = *(unsigned int *)(a1 + 540);
  if ((_DWORD)v72 == *(_DWORD *)(a1 + 536))
  {
    v73 = (__int128 *)WTF::Vector<JSC::JITInByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v71, v72 + 1, (unint64_t)&v127);
    v74 = *(_QWORD *)(a1 + 528) + 56 * *(unsigned int *)(a1 + 540);
    v75 = *v73;
    *(_BYTE *)(v74 + 16) = *((_BYTE *)v73 + 16);
    *(_OWORD *)v74 = v75;
    *(_DWORD *)(v74 + 20) = *((_DWORD *)v73 + 5);
    *(_DWORD *)(v74 + 24) = *((_DWORD *)v73 + 6);
    *(_DWORD *)(v74 + 28) = *((_DWORD *)v73 + 7);
    *(_QWORD *)(v74 + 32) = *((_QWORD *)v73 + 4);
    *(_DWORD *)(v74 + 40) = *((_DWORD *)v73 + 10);
    v76 = (_QWORD *)(v74 + 44);
  }
  else
  {
    v90 = *v71 + 56 * v72;
    v91 = v127;
    *(_BYTE *)(v90 + 16) = v128;
    *(_OWORD *)v90 = v91;
    *(_DWORD *)(v90 + 20) = v129;
    *(_DWORD *)(v90 + 24) = v130;
    *(_DWORD *)(v90 + 28) = v131;
    *(_QWORD *)(v90 + 32) = v132;
    *(_DWORD *)(v90 + 40) = v133;
    v76 = (_QWORD *)(v90 + 44);
    v73 = &v127;
  }
  *v76 = *(_QWORD *)((char *)v73 + 44);
  ++*(_DWORD *)(a1 + 540);
  JSC::JIT::resetSP((JSC::JIT *)a1, v61, v62, v63, v64, v65, v66, v67);
  v84 = *(_DWORD *)(a1 + 200);
  v134 = v84;
  if (v84 < *(_DWORD *)(a1 + 52))
  {
    do
    {
      if ((v84 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v77, v78, v79, v80, v81, v82, v83);
        v84 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v84) = -721215457;
      v84 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v84;
    }
    while (v84 < *(_DWORD *)(a1 + 52));
    v134 = v84;
  }
  *(_DWORD *)(a1 + 208) = 0;
  WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>((uint64_t *)(a1 + 408), (int *)(a1 + 640), &v134, (uint64_t)v135);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v12 << 35) | 0x1D, v85, v86, v87, v88, v89);
}

void JSC::JIT::emitSlow_op_in_by_val(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::ExecutableMemoryHandle *v49;
  __int128 v50;
  uint64_t v51;

  v8 = *(_DWORD *)(a1 + 708);
  *(_DWORD *)(a1 + 708) = v8 + 1;
  if (*(_DWORD *)(a1 + 540) <= v8)
    goto LABEL_18;
  v10 = *(_QWORD *)(a1 + 528) + 56 * v8;
  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v11, v12, v13, v14, v15, v16, v17);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(v10 + 28) = i;
  v19 = *(char *)(v10 + 16);
  if (v19 >= 0x1F)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1987DFEF4);
  }
  JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))off_1E3596240[v19], v13, v14, v15, v16, v17, &v48);
  v27 = v48;
  *(_DWORD *)(a1 + 208) = 0;
  v28 = *(_DWORD *)(a1 + 200);
  if (v28 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
    v28 = *(_DWORD *)(a1 + 200);
  }
  v29 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = -1811939328;
  v30 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v30;
  LOBYTE(v51) = -1;
  BYTE3(v51) = 15;
  *(_WORD *)((char *)&v51 + 1) = 65;
  *(_QWORD *)&v50 = v30 - 4;
  *((_QWORD *)&v50 + 1) = v27;
  WORD2(v51) = 384;
  v31 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v31 == *(_DWORD *)(a1 + 40))
  {
    v38 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v31 + 1, (unint64_t)&v50, v22, v23, v24, v25, v26);
    v32 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v32 = 0;
    *(_QWORD *)(v32 + 8) = 0;
    *(_BYTE *)(v32 + 16) = -1;
    v39 = (((*(unsigned __int8 *)(v32 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v32 + 17) = 65;
    *(_BYTE *)(v32 + 19) = BYTE2(v39);
    *(_WORD *)(v32 + 20) &= 0xFC00u;
    v33 = *(_OWORD *)v38;
    v34 = *(_QWORD *)(v38 + 16);
  }
  else
  {
    v32 = *v29 + 24 * v31;
    v33 = v50;
    v34 = v51;
  }
  *(_QWORD *)(v32 + 16) = v34;
  *(_OWORD *)v32 = v33;
  ++*(_DWORD *)(a1 + 44);
  v35 = (unsigned int *)v49;
  v49 = 0;
  if (v35)
  {
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v35, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
  }
}

void JSC::JIT::emitHasPrivate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  int v82;
  _DWORD *v83;
  unint64_t v84;
  BOOL v85;
  char **v86;
  JSC::AssemblerBuffer *v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  int v95;
  _DWORD *v96;
  unint64_t v97;
  BOOL v98;
  char **v99;
  JSC::AssemblerBuffer *v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  _DWORD *v105;
  _DWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  _DWORD *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  char v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  _OWORD v122[2];

  v8 = a5;
  if ((int)a3 < 0x40000000)
  {
    v13 = (a3 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v13, 0, a4, a5, a6, a7, a8);
    goto LABEL_4;
  }
  v79 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v80 = (a3 - 0x40000000);
  v81 = *(_DWORD **)(v79 + 120);
  if (!v81 || *v81 <= v80)
    goto LABEL_29;
  v82 = *((unsigned __int8 *)v81 + v80 + 4);
  if ((v82 - 1) >= 2)
  {
    if (v82)
    {
      if (v82 != 3)
        goto LABEL_90;
      goto LABEL_40;
    }
LABEL_29:
    v83 = *(_DWORD **)(v79 + 112);
    if (*v83 <= v80)
    {
      __break(0xC471u);
      JUMPOUT(0x1987E0628);
    }
    v84 = *(_QWORD *)&v83[2 * v80 + 2];
    if (v84)
      v85 = (v84 & 0xFFFE000000000002) == 0;
    else
      v85 = 0;
    if (!v85)
      goto LABEL_65;
    v86 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0x4C));
    if (v86 != &JSC::SymbolTable::s_info && v86 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_65;
LABEL_40:
    v88 = (JSC::AssemblerBuffer *)(a1 + 56);
    v89 = *(_DWORD *)(a1 + 200);
    if (v89 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v88, a2, a3, a4, a5, a6, a7, a8);
      v88 = (JSC::AssemblerBuffer *)(a1 + 56);
      v89 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v89) = -129956960;
    v90 = *(_DWORD *)(a1 + 200);
    v91 = v90 + 4;
    *(_DWORD *)(a1 + 200) = v90 + 4;
    if ((v90 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v88, a2, a3, a4, a5, a6, a7, a8);
      v91 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v91) = -129368064;
    *(_DWORD *)(a1 + 200) += 4;
    v13 = a3 << 35;
    goto LABEL_3;
  }
LABEL_65:
  v105 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v105 <= v80)
  {
    __break(0xC471u);
    JUMPOUT(0x1987E05E8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v105[2 * v80 + 2], 0, a4, a5, a6, a7, a8);
LABEL_4:
  if ((int)a4 < 0x40000000)
  {
    v21 = 29;
LABEL_6:
    JSC::MacroAssemblerARM64::load64(a1, v21 | (a4 << 35), 1, v16, v17, v18, v19, v20);
    goto LABEL_7;
  }
  v92 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v93 = (a4 - 0x40000000);
  v94 = *(_DWORD **)(v92 + 120);
  if (!v94 || *v94 <= v93)
    goto LABEL_49;
  v95 = *((unsigned __int8 *)v94 + v93 + 4);
  if ((v95 - 1) >= 2)
  {
    if (v95)
    {
      if (v95 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987E04E8);
      }
      goto LABEL_60;
    }
LABEL_49:
    v96 = *(_DWORD **)(v92 + 112);
    if (*v96 <= v93)
    {
      __break(0xC471u);
      JUMPOUT(0x1987E0648);
    }
    v97 = *(_QWORD *)&v96[2 * v93 + 2];
    if (v97)
      v98 = (v97 & 0xFFFE000000000002) == 0;
    else
      v98 = 0;
    if (!v98)
      goto LABEL_67;
    v99 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v97 & 0xFFFFFFFE) + 0x4C));
    if (v99 != &JSC::SymbolTable::s_info && v99 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_67;
LABEL_60:
    v101 = (JSC::AssemblerBuffer *)(a1 + 56);
    v102 = *(_DWORD *)(a1 + 200);
    if (v102 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v101, v14, v15, v16, v17, v18, v19, v20);
      v101 = (JSC::AssemblerBuffer *)(a1 + 56);
      v102 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v102) = -129956959;
    v103 = *(_DWORD *)(a1 + 200);
    v104 = v103 + 4;
    *(_DWORD *)(a1 + 200) = v103 + 4;
    if ((v103 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v101, v14, v15, v16, v17, v18, v19, v20);
      v104 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v104) = -129368031;
    *(_DWORD *)(a1 + 200) += 4;
    v21 = 1;
    goto LABEL_6;
  }
LABEL_67:
  v106 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v106 <= v93)
  {
    __break(0xC471u);
    JUMPOUT(0x1987E0608);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v106[2 * v93 + 2], 1, v16, v17, v18, v19, v20);
LABEL_7:
  v22 = *(_DWORD *)(a1 + 888);
  v23 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v22 + 136), 2, v24, v25, v26, v27);
  if ((int)a3 >= 0x40000000)
  {
    v107 = *(_QWORD *)(a1 + 808);
    v108 = (a3 - 0x40000000);
    v109 = *(_DWORD **)(v107 + 120);
    if (v109 && *v109 > v108 && *((_BYTE *)v109 + v108 + 4) == 3)
      goto LABEL_11;
    v110 = *(_DWORD **)(v107 + 112);
    if (*v110 > v108)
    {
      if ((*(_QWORD *)&v110[2 * v108 + 2] & 0xFFFE000000000002) == 0)
        goto LABEL_11;
      goto LABEL_8;
    }
LABEL_90:
    __break(0xC471u);
    JUMPOUT(0x1987E04C0);
  }
LABEL_8:
  JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v28, v29, v30, v31, v32, (uint64_t)v122);
  v33 = (_QWORD *)(a1 + 648);
  v34 = *(_QWORD *)((char *)v122 + 4);
  v35 = *(_DWORD *)(a1 + 640);
  LODWORD(v113) = v122[0];
  *(_QWORD *)((char *)&v113 + 4) = *(_QWORD *)((char *)v122 + 4);
  HIDWORD(v113) = v35;
  v36 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v36 == *(_DWORD *)(a1 + 656))
  {
    v77 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v36 + 1, (unint64_t)&v113);
    v78 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v78 = *(_DWORD *)v77;
    *(_QWORD *)(v78 + 4) = *(_QWORD *)(v77 + 4);
    *(_DWORD *)(v78 + 12) = *(_DWORD *)(v77 + 12);
  }
  else
  {
    v37 = *v33 + 16 * v36;
    *(_DWORD *)v37 = v122[0];
    *(_QWORD *)(v37 + 4) = v34;
    *(_DWORD *)(v37 + 12) = v35;
  }
  ++*(_DWORD *)(a1 + 660);
LABEL_11:
  v38 = 0;
  v39 = *(unsigned int *)(a1 + 640);
  v40 = 2;
  if ((_DWORD)v39 != -1 && (_DWORD)v39 != 0x3FFFFFFF)
  {
    if (v39 >> 28)
    {
      v38 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v38 = 0;
      *(_DWORD *)(v38 + 8) = v39;
      LODWORD(v39) = *(_DWORD *)(a1 + 640);
      v40 = 1;
    }
    else
    {
      v40 = 0;
      v38 = v39 << 36;
    }
  }
  v112 = v38 | v40;
  v122[0] = xmmword_199156F50;
  LOWORD(v111) = 767;
  JSC::JITInByValGenerator::JITInByValGenerator((uint64_t)&v113, 0, v23, 1, 0, &v112, v39 >> 2, v8, (uint64_t)v122, 0, 0, 1, 0, 0, v111);
  if ((v112 & 1) != 0 && (v112 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v112 & 0xFFFFFFFF8, v41, v42, v43, v44, v45, v46, v47);
  JSC::JITInlineCacheGenerator::generateBaselineDataICFastPath((uint64_t)&v113, (JSC::MacroAssemblerARM64 *)a1, 2, v43, v44, v45, v46, v47);
  v55 = (_QWORD *)(a1 + 648);
  v56 = *(_DWORD *)(a1 + 640);
  LODWORD(v122[0]) = -1;
  *(_QWORD *)((char *)v122 + 4) = 0xFF000F4100000000;
  HIDWORD(v122[0]) = v56;
  v57 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v57 == *(_DWORD *)(a1 + 656))
  {
    v75 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v55, v57 + 1, (unint64_t)v122);
    v76 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v76 = *(_DWORD *)v75;
    *(_QWORD *)(v76 + 4) = *(_QWORD *)(v75 + 4);
    *(_DWORD *)(v76 + 12) = *(_DWORD *)(v75 + 12);
  }
  else
  {
    v58 = *v55 + 16 * v57;
    *(_DWORD *)v58 = -1;
    *(_QWORD *)(v58 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v58 + 12) = v56;
  }
  ++*(_DWORD *)(a1 + 660);
  v59 = *(_DWORD *)(a1 + 540);
  if (v59 == *(_DWORD *)(a1 + 536))
  {
    WTF::Vector<JSC::JITInByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITInByValGenerator&>(a1 + 528, (unint64_t)&v113);
  }
  else
  {
    v73 = *(_QWORD *)(a1 + 528) + 56 * v59;
    v74 = v113;
    *(_BYTE *)(v73 + 16) = v114;
    *(_OWORD *)v73 = v74;
    *(_DWORD *)(v73 + 20) = v115;
    *(_DWORD *)(v73 + 24) = v116;
    *(_DWORD *)(v73 + 28) = v117;
    *(_QWORD *)(v73 + 32) = v118;
    *(_DWORD *)(v73 + 40) = v119;
    *(_QWORD *)(v73 + 44) = v120;
    ++*(_DWORD *)(a1 + 540);
  }
  JSC::JIT::resetSP((JSC::JIT *)a1, v48, v49, v50, v51, v52, v53, v54);
  v67 = *(_DWORD *)(a1 + 200);
  v121 = v67;
  if (v67 < *(_DWORD *)(a1 + 52))
  {
    do
    {
      if ((v67 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v60, v61, v62, v63, v64, v65, v66);
        v67 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v67) = -721215457;
      v67 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v67;
    }
    while (v67 < *(_DWORD *)(a1 + 52));
    v121 = v67;
  }
  *(_DWORD *)(a1 + 208) = 0;
  WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>((uint64_t *)(a1 + 408), (int *)(a1 + 640), &v121, (uint64_t)v122);
  JSC::MacroAssemblerARM64::store64(a1, 0, (a2 << 35) | 0x1D, v68, v69, v70, v71, v72);
}

void JSC::JIT::emitHasPrivateSlow(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::ExecutableMemoryHandle *v49;
  __int128 v50;
  uint64_t v51;

  v8 = *(_DWORD *)(a1 + 708);
  *(_DWORD *)(a1 + 708) = v8 + 1;
  if (*(_DWORD *)(a1 + 540) <= v8)
    goto LABEL_18;
  v10 = *(_QWORD *)(a1 + 528) + 56 * v8;
  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v11, v12, v13, v14, v15, v16, v17);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(v10 + 28) = i;
  v19 = *(char *)(v10 + 16);
  if (v19 >= 0x1F)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1987E08F0);
  }
  JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))off_1E3596240[v19], v13, v14, v15, v16, v17, &v48);
  v27 = v48;
  *(_DWORD *)(a1 + 208) = 0;
  v28 = *(_DWORD *)(a1 + 200);
  if (v28 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
    v28 = *(_DWORD *)(a1 + 200);
  }
  v29 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = -1811939328;
  v30 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v30;
  LOBYTE(v51) = -1;
  BYTE3(v51) = 15;
  *(_WORD *)((char *)&v51 + 1) = 65;
  *(_QWORD *)&v50 = v30 - 4;
  *((_QWORD *)&v50 + 1) = v27;
  WORD2(v51) = 384;
  v31 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v31 == *(_DWORD *)(a1 + 40))
  {
    v38 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v31 + 1, (unint64_t)&v50, v22, v23, v24, v25, v26);
    v32 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v32 = 0;
    *(_QWORD *)(v32 + 8) = 0;
    *(_BYTE *)(v32 + 16) = -1;
    v39 = (((*(unsigned __int8 *)(v32 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v32 + 17) = 65;
    *(_BYTE *)(v32 + 19) = BYTE2(v39);
    *(_WORD *)(v32 + 20) &= 0xFC00u;
    v33 = *(_OWORD *)v38;
    v34 = *(_QWORD *)(v38 + 16);
  }
  else
  {
    v32 = *v29 + 24 * v31;
    v33 = v50;
    v34 = v51;
  }
  *(_QWORD *)(v32 + 16) = v34;
  *(_OWORD *)v32 = v33;
  ++*(_DWORD *)(a1 + 44);
  v35 = (unsigned int *)v49;
  v49 = 0;
  if (v35)
  {
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v35, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
  }
}

void JSC::JIT::emit_op_has_private_name(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  BOOL v13;

  v8 = *a2;
  if (v8 == 128)
  {
    v9 = *((__int16 *)a2 + 1);
    if (v9 > 63)
      v9 += 1073741760;
    v10 = *((__int16 *)a2 + 2);
    if (v10 > 63)
      v10 += 1073741760;
    v12 = *((__int16 *)a2 + 3);
    v11 = v12 + 1073741760;
    v13 = v12 <= 63;
  }
  else
  {
    if (v8 == 130)
    {
      v9 = *(_DWORD *)(a2 + 2);
      v10 = *(_DWORD *)(a2 + 6);
      v11 = *(_DWORD *)(a2 + 10);
      goto LABEL_17;
    }
    v9 = (char)a2[1];
    if (v9 > 15)
      v9 += 1073741808;
    v10 = (char)a2[2];
    if (v10 > 15)
      v10 += 1073741808;
    v12 = (char)a2[3];
    v11 = v12 + 1073741808;
    v13 = v12 <= 15;
  }
  if (v13)
    v11 = v12;
LABEL_17:
  JSC::JIT::emitHasPrivate(a1, v9, v10, v11, 20, a6, a7, a8);
}

void JSC::JIT::emit_op_has_private_brand(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  BOOL v13;

  v8 = *a2;
  if (v8 == 128)
  {
    v9 = *((__int16 *)a2 + 1);
    if (v9 > 63)
      v9 += 1073741760;
    v10 = *((__int16 *)a2 + 2);
    if (v10 > 63)
      v10 += 1073741760;
    v12 = *((__int16 *)a2 + 3);
    v11 = v12 + 1073741760;
    v13 = v12 <= 63;
  }
  else
  {
    if (v8 == 130)
    {
      v9 = *(_DWORD *)(a2 + 2);
      v10 = *(_DWORD *)(a2 + 6);
      v11 = *(_DWORD *)(a2 + 10);
      goto LABEL_17;
    }
    v9 = (char)a2[1];
    if (v9 > 15)
      v9 += 1073741808;
    v10 = (char)a2[2];
    if (v10 > 15)
      v10 += 1073741808;
    v12 = (char)a2[3];
    v11 = v12 + 1073741808;
    v13 = v12 <= 15;
  }
  if (v13)
    v11 = v12;
LABEL_17:
  JSC::JIT::emitHasPrivate(a1, v9, v10, v11, 21, a6, a7, a8);
}

void JSC::JIT::emit_op_resolve_scope(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int i;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t *__return_ptr, uint64_t);
  unsigned int v84;
  unsigned int v85;
  _QWORD *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  _QWORD *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _DWORD *v134;
  int v135;
  _DWORD *v136;
  unint64_t v137;
  BOOL v138;
  char **v139;
  unsigned int v141;
  int v142;
  unsigned int v143;
  _DWORD *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  int v150;
  _DWORD *v151;
  unint64_t v152;
  BOOL v153;
  char **v154;
  BOOL v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  _DWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  int v182;
  int v183;
  __int128 v184;
  uint64_t v185;

  v9 = *a2;
  if (v9 == 128)
  {
    v79 = *((__int16 *)a2 + 1);
    if (v79 <= 63)
      v11 = v79;
    else
      v11 = (v79 + 1073741760);
    v80 = *((__int16 *)a2 + 2);
    if (v80 <= 63)
      v13 = v80;
    else
      v13 = (v80 + 1073741760);
    v14 = *((unsigned __int16 *)a2 + 6);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v13 = *(unsigned int *)(a2 + 6);
    v14 = *(_DWORD *)(a2 + 22);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
    if (v12 <= 15)
      v13 = v12;
    else
      v13 = (v12 + 1073741808);
    v14 = a2[6];
  }
  v15 = *(_QWORD *)(a1 + 800);
  v16 = *(_QWORD *)(v15 + 136);
  v17 = *(unsigned __int16 *)(v16 + 50);
  v18 = v17;
  if (!*(_WORD *)(v16 + 50))
    v18 = *(_DWORD *)(v16 + 196);
  v19 = *(_DWORD *)(((v16 + v18 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 * v14);
  if (v19 != 3)
  {
    if (v19 == 5)
    {
      if (!*(_WORD *)v16)
        v17 = *(_DWORD *)(v16 + 196);
      JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)((((v17 + 7) & 0xFFFFFFF8) + 16 * v14 + 8) >> 3) << 35) | 0x19, 0, a4, a5, a6, a7, a8);
      goto LABEL_104;
    }
    if (!*(_WORD *)v16)
      v17 = *(_DWORD *)(v16 + 196);
    v33 = *(unsigned int *)(a1 + 640);
    JSC::MacroAssemblerARM64::add64(a1, ((v17 + 7) & 0xFFFFFFF8) + 16 * v14, 25, 2, a5, a6, a7, a8);
    switch(v19)
    {
      case 0:
        if (!*(_BYTE *)(a1 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x1987E17F0);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
        v41 = *(_BYTE *)(a1 + 304) & 0x1F | 0xB8400040;
        v42 = *(_DWORD *)(a1 + 200);
        if (v42 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v34, v35, v36, v37, v38, v39, v40);
          v42 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v42) = v41;
        *(_DWORD *)(a1 + 200) += 4;
        JSC::MacroAssemblerARM64::branchTest32(a1, 1, 17, 17, v37, v38, v39, v40, (uint64_t)&v180);
        v43 = (_QWORD *)(a1 + 648);
        v44 = v181;
        v45 = *(_DWORD *)(a1 + 640);
        LODWORD(v184) = v180;
        *(_QWORD *)((char *)&v184 + 4) = v181;
        HIDWORD(v184) = v45;
        v46 = *(unsigned int *)(a1 + 660);
        if ((_DWORD)v46 == *(_DWORD *)(a1 + 656))
        {
          v162 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v46 + 1, (unint64_t)&v184);
          v163 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
          *(_DWORD *)v163 = *(_DWORD *)v162;
          *(_QWORD *)(v163 + 4) = *(_QWORD *)(v162 + 4);
          *(_DWORD *)(v163 + 12) = *(_DWORD *)(v162 + 12);
        }
        else
        {
          v47 = *v43 + 16 * v46;
          *(_DWORD *)v47 = v180;
          *(_QWORD *)(v47 + 4) = v44;
          *(_DWORD *)(v47 + 12) = v45;
        }
        ++*(_DWORD *)(a1 + 660);
        v48 = *(_DWORD *)(a1 + 200);
        if (v48 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
          v48 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v48) = -129989824;
        v49 = *(_DWORD *)(a1 + 200);
        v50 = v49 + 4;
        *(_DWORD *)(a1 + 200) = v49 + 4;
        if ((v49 + 8) > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
          v50 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v50) = -1203748795;
        v51 = *(_DWORD *)(a1 + 200);
        v52 = v51 + 4;
        *(_DWORD *)(a1 + 200) = v51 + 4;
        if (!*(_BYTE *)(a1 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x1987E1880);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
        v53 = *(_BYTE *)(a1 + 304) & 0x1F | 0xB94C6800;
        if ((v51 + 8) > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
          v52 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v52) = v53;
        v54 = *(_DWORD *)(a1 + 200);
        v55 = v54 + 4;
        *(_DWORD *)(a1 + 200) = v54 + 4;
        if ((v54 + 8) > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
          v55 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v55) = 1795490367;
        v56 = *(_DWORD *)(a1 + 200) + 4;
        *(_DWORD *)(a1 + 200) = v56;
        if (*(_BYTE *)(a1 + 328))
        {
          while ((signed int)v56 < *(_DWORD *)(a1 + 52))
          {
            if (v56 + 4 > *(_DWORD *)(a1 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
              v56 = *(_DWORD *)(a1 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 56) + v56) = -721215457;
            v56 = *(_DWORD *)(a1 + 200) + 4;
            *(_DWORD *)(a1 + 200) = v56;
          }
          *(_DWORD *)(a1 + 208) = 0;
        }
        if (v56 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
          v56 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v56) = 1409286145;
        v57 = *(_DWORD *)(a1 + 200);
        v58 = v57 + 4;
        *(_DWORD *)(a1 + 200) = v57 + 4;
        v59 = v57 + 8;
        v60 = v57 + 4;
        if (v59 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
          v60 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v60) = -721215457;
        *(_DWORD *)(a1 + 200) += 4;
        v61 = 0xFF00018600000000;
        if (!*(_BYTE *)(a1 + 328))
          v61 = 0xFF00018200000000;
        v62 = *(_DWORD *)(a1 + 640);
        LODWORD(v184) = v58;
        *(_QWORD *)((char *)&v184 + 4) = v61;
        HIDWORD(v184) = v62;
        v63 = *(unsigned int *)(a1 + 660);
        if ((_DWORD)v63 == *(_DWORD *)(a1 + 656))
        {
          v166 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v63 + 1, (unint64_t)&v184);
          v167 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
          *(_DWORD *)v167 = *(_DWORD *)v166;
          *(_QWORD *)(v167 + 4) = *(_QWORD *)(v166 + 4);
          *(_DWORD *)(v167 + 12) = *(_DWORD *)(v166 + 12);
        }
        else
        {
          v64 = *v43 + 16 * v63;
          *(_DWORD *)v64 = v58;
          *(_QWORD *)(v64 + 4) = v61;
          *(_DWORD *)(v64 + 12) = v62;
        }
        ++*(_DWORD *)(a1 + 660);
        goto LABEL_104;
      case 1:
        if (!*(_BYTE *)(a1 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x1987E1810);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
        v84 = *(_BYTE *)(a1 + 304) & 0x1F | 0xB8400040;
        v85 = *(_DWORD *)(a1 + 200);
        if (v85 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v34, v35, v36, v37, v38, v39, v40);
          v85 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v85) = v84;
        *(_DWORD *)(a1 + 200) += 4;
        JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 1, v37, v38, v39, v40, (uint64_t)&v178);
        v86 = (_QWORD *)(a1 + 648);
        v87 = v179;
        v88 = *(_DWORD *)(a1 + 640);
        LODWORD(v184) = v178;
        *(_QWORD *)((char *)&v184 + 4) = v179;
        HIDWORD(v184) = v88;
        v89 = *(unsigned int *)(a1 + 660);
        if ((_DWORD)v89 == *(_DWORD *)(a1 + 656))
        {
          v160 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v86, v89 + 1, (unint64_t)&v184);
          v161 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
          *(_DWORD *)v161 = *(_DWORD *)v160;
          *(_QWORD *)(v161 + 4) = *(_QWORD *)(v160 + 4);
          *(_DWORD *)(v161 + 12) = *(_DWORD *)(v160 + 12);
        }
        else
        {
          v90 = *v86 + 16 * v89;
          *(_DWORD *)v90 = v178;
          *(_QWORD *)(v90 + 4) = v87;
          *(_DWORD *)(v90 + 12) = v88;
        }
        ++*(_DWORD *)(a1 + 660);
        v91 = *(_DWORD *)(a1 + 200);
        if (v91 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
          v91 = *(_DWORD *)(a1 + 200);
        }
        v92 = *(_QWORD *)(a1 + 56);
        v93 = -129989824;
        goto LABEL_90;
      case 2:
        if (!*(_BYTE *)(a1 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x1987E1830);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
        v94 = *(_BYTE *)(a1 + 304) & 0x1F | 0xB8400040;
        v95 = *(_DWORD *)(a1 + 200);
        if (v95 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v34, v35, v36, v37, v38, v39, v40);
          v95 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v95) = v94;
        *(_DWORD *)(a1 + 200) += 4;
        JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 2, v37, v38, v39, v40, (uint64_t)&v176);
        v96 = (_QWORD *)(a1 + 648);
        v97 = v177;
        v98 = *(_DWORD *)(a1 + 640);
        LODWORD(v184) = v176;
        *(_QWORD *)((char *)&v184 + 4) = v177;
        HIDWORD(v184) = v98;
        v99 = *(unsigned int *)(a1 + 660);
        if ((_DWORD)v99 == *(_DWORD *)(a1 + 656))
        {
          v164 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v96, v99 + 1, (unint64_t)&v184);
          v165 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
          *(_DWORD *)v165 = *(_DWORD *)v164;
          *(_QWORD *)(v165 + 4) = *(_QWORD *)(v164 + 4);
          *(_DWORD *)(v165 + 12) = *(_DWORD *)(v164 + 12);
        }
        else
        {
          v100 = *v96 + 16 * v99;
          *(_DWORD *)v100 = v176;
          *(_QWORD *)(v100 + 4) = v97;
          *(_DWORD *)(v100 + 12) = v98;
        }
        ++*(_DWORD *)(a1 + 660);
        v101 = *(_DWORD *)(a1 + 200);
        if (v101 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
          v101 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v101) = -129989824;
        v102 = *(_DWORD *)(a1 + 200);
        v91 = v102 + 4;
        *(_DWORD *)(a1 + 200) = v102 + 4;
        if ((v102 + 8) > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
          v91 = *(_DWORD *)(a1 + 200);
        }
        v92 = *(_QWORD *)(a1 + 56);
        v93 = -129728512;
LABEL_90:
        *(_DWORD *)(v92 + v91) = v93;
        *(_DWORD *)(a1 + 200) += 4;
        goto LABEL_104;
      case 6:
        v81 = *(_QWORD *)(a1 + 352);
        v82 = *(_QWORD *)(v81 + 90440);
        v83 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)6>;
        goto LABEL_93;
      case 7:
        v81 = *(_QWORD *)(a1 + 352);
        v82 = *(_QWORD *)(v81 + 90440);
        v83 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>;
        goto LABEL_93;
      case 8:
        v81 = *(_QWORD *)(a1 + 352);
        v82 = *(_QWORD *)(v81 + 90440);
        v83 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)8>;
        goto LABEL_93;
      case 9:
        v81 = *(_QWORD *)(a1 + 352);
        v82 = *(_QWORD *)(v81 + 90440);
        v83 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)9>;
        goto LABEL_93;
      default:
        v81 = *(_QWORD *)(a1 + 352);
        v82 = *(_QWORD *)(v81 + 90440);
        v83 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)1>;
LABEL_93:
        JSC::JITThunks::ctiStub(v82, v81, v83, v36, v37, v38, v39, v40, &v184);
        v110 = v184;
        if ((int)v13 < 0x40000000)
        {
          v111 = (v13 << 35) | 0x1D;
LABEL_95:
          JSC::MacroAssemblerARM64::load64(a1, v111, 0, v105, v106, v107, v108, v109);
          goto LABEL_96;
        }
        v147 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
        v148 = (v13 - 0x40000000);
        v149 = *(_DWORD **)(v147 + 120);
        if (!v149 || *v149 <= v148)
          goto LABEL_134;
        v150 = *((unsigned __int8 *)v149 + v148 + 4);
        if ((v150 - 1) < 2)
          goto LABEL_150;
        if (v150)
        {
          if (v150 != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1987E174CLL);
          }
        }
        else
        {
LABEL_134:
          v151 = *(_DWORD **)(v147 + 112);
          if (*v151 <= v148)
          {
            __break(0xC471u);
            JUMPOUT(0x1987E1990);
          }
          v152 = *(_QWORD *)&v151[2 * v148 + 2];
          if (v152)
            v153 = (v152 & 0xFFFE000000000002) == 0;
          else
            v153 = 0;
          if (!v153
            || ((v154 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v152 & 0xFFFFFFFE) + 0x4C)),
                 v154 != &JSC::SymbolTable::s_info)
              ? (v155 = v154 == &JSC::JSTemplateObjectDescriptor::s_info)
              : (v155 = 1),
                !v155))
          {
LABEL_150:
            v159 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
            if (*v159 <= v148)
            {
              __break(0xC471u);
              JUMPOUT(0x1987E1950);
            }
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v159[2 * v148 + 2], 0, v105, v106, v107, v108, v109);
LABEL_96:
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v33 >> 2), 3, v112, v113, v114, v115, v116);
            *(_DWORD *)(a1 + 208) = 0;
            v117 = *(_DWORD *)(a1 + 200);
            if (v117 + 4 > *(_DWORD *)(a1 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
              v117 = *(_DWORD *)(a1 + 200);
            }
            v118 = (_QWORD *)(a1 + 32);
            *(_DWORD *)(*(_QWORD *)(a1 + 56) + v117) = -1811939328;
            v119 = (*(_DWORD *)(a1 + 200) + 4);
            *(_DWORD *)(a1 + 200) = v119;
            LOBYTE(v185) = -1;
            BYTE3(v185) = 15;
            *(_WORD *)((char *)&v185 + 1) = 65;
            *(_QWORD *)&v184 = v119 - 4;
            *((_QWORD *)&v184 + 1) = v110;
            WORD2(v185) = 384;
            v120 = *(unsigned int *)(a1 + 44);
            if ((_DWORD)v120 == *(_DWORD *)(a1 + 40))
            {
              v145 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v118, v120 + 1, (unint64_t)&v184, v22, v23, v24, v25, v26);
              v121 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
              *(_QWORD *)v121 = 0;
              *(_QWORD *)(v121 + 8) = 0;
              *(_BYTE *)(v121 + 16) = -1;
              v146 = (((*(unsigned __int8 *)(v121 + 19) >> 4) & 0xF) << 20) | 0xF0041;
              *(_WORD *)(v121 + 17) = 65;
              *(_BYTE *)(v121 + 19) = BYTE2(v146);
              *(_WORD *)(v121 + 20) &= 0xFC00u;
              v122 = *(_OWORD *)v145;
              v123 = *(_QWORD *)(v145 + 16);
            }
            else
            {
              v121 = *v118 + 24 * v120;
              v122 = v184;
              v123 = v185;
            }
            *(_QWORD *)(v121 + 16) = v123;
            *(_OWORD *)v121 = v122;
            ++*(_DWORD *)(a1 + 44);
            if (*((_QWORD *)&v110 + 1))
            {
              do
              {
                v124 = __ldaxr(*((unsigned int **)&v110 + 1));
                v125 = v124 - 1;
              }
              while (__stlxr(v125, *((unsigned int **)&v110 + 1)));
              if (!v125)
              {
                atomic_store(1u, *((unsigned int **)&v110 + 1));
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle(*((JSC::ExecutableMemoryHandle **)&v110 + 1), v20, v21, v22, v23, v24, v25, v26);
                WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
              }
            }
            goto LABEL_104;
          }
        }
        v156 = *(_DWORD *)(a1 + 200);
        if (v156 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v103, v104, v105, v106, v107, v108, v109);
          v156 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v156) = -129956960;
        v157 = *(_DWORD *)(a1 + 200);
        v158 = v157 + 4;
        *(_DWORD *)(a1 + 200) = v157 + 4;
        if ((v157 + 8) > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v103, v104, v105, v106, v107, v108, v109);
          v158 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v158) = -129368064;
        *(_DWORD *)(a1 + 200) += 4;
        v111 = v13 << 35;
        goto LABEL_95;
    }
  }
  if ((int)v13 >= 0x40000000)
  {
    v132 = *(_QWORD *)(v15 + 56);
    v133 = (v13 - 0x40000000);
    v134 = *(_DWORD **)(v132 + 120);
    if (!v134 || *v134 <= v133)
      goto LABEL_110;
    v135 = *((unsigned __int8 *)v134 + v133 + 4);
    if ((v135 - 1) < 2)
    {
LABEL_126:
      v144 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
      if (*v144 <= v133)
      {
        __break(0xC471u);
        JUMPOUT(0x1987E1930);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v144[2 * v133 + 2], 0, a4, a5, a6, a7, a8);
      goto LABEL_20;
    }
    if (v135)
    {
      if (v135 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987E1724);
      }
    }
    else
    {
LABEL_110:
      v136 = *(_DWORD **)(v132 + 112);
      if (*v136 <= v133)
      {
        __break(0xC471u);
        JUMPOUT(0x1987E1970);
      }
      v137 = *(_QWORD *)&v136[2 * v133 + 2];
      if (v137)
        v138 = (v137 & 0xFFFE000000000002) == 0;
      else
        v138 = 0;
      if (!v138)
        goto LABEL_126;
      v139 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v137 & 0xFFFFFFFE) + 0x4C));
      if (v139 != &JSC::SymbolTable::s_info && v139 != &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_126;
    }
    v141 = *(_DWORD *)(a1 + 200);
    if (v141 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v141 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v141) = -129956960;
    v142 = *(_DWORD *)(a1 + 200);
    v143 = v142 + 4;
    *(_DWORD *)(a1 + 200) = v142 + 4;
    if ((v142 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v143 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v143) = -129368064;
    *(_DWORD *)(a1 + 200) += 4;
    v27 = v13 << 35;
    goto LABEL_19;
  }
  v27 = (v13 << 35) | 0x1D;
LABEL_19:
  JSC::MacroAssemblerARM64::load64(a1, v27, 0, a4, a5, a6, a7, a8);
LABEL_20:
  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  v29 = *(unsigned __int16 *)(v28 + 50);
  v30 = v29;
  if (!*(_WORD *)(v28 + 50))
    v30 = *(_DWORD *)(v28 + 196);
  v31 = *(_DWORD *)(((v28 + v30 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 * v14 + 4);
  if (v31 > 7)
  {
    if (!*(_WORD *)v28)
      v29 = *(_DWORD *)(v28 + 196);
    JSC::MacroAssemblerARM64::load32(a1, ((unint64_t)(((((v29 + 7) & 0xFFFFFFF8) + 16 * v14) | 4) >> 2) << 34) | 0x19, 5, v22, v23, v24, v25, v26);
    for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v65, v66, v67, v68, v69, v70, v71);
        i = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
      i = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
    v73 = i;
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v65, v66, v67, v68, v69, v70, v71);
      v73 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v73) = -129957888;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::branchSub32(a1, 1, 5, 1, 5, v69, v70, v71, (uint64_t)&v184);
    v182 = i;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v184, (unsigned int *)&v182, a1, v74, v75, v76, v77, v78);
  }
  else if (v31)
  {
    v32 = *(_DWORD *)(a1 + 200);
    do
    {
      if (v32 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
        v32 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v32) = -129957888;
      v32 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v32;
      --v31;
    }
    while (v31);
  }
LABEL_104:
  v126 = *(_DWORD *)(a1 + 200);
  v183 = v126;
  if (v126 < *(_DWORD *)(a1 + 52))
  {
    do
    {
      if ((v126 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
        v126 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v126) = -721215457;
      v126 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v126;
    }
    while (v126 < *(_DWORD *)(a1 + 52));
    v183 = v126;
  }
  *(_DWORD *)(a1 + 208) = 0;
  WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>((uint64_t *)(a1 + 408), (int *)(a1 + 640), &v183, (uint64_t)&v184);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v11 << 35) | 0x1D, v127, v128, v129, v130, v131);
}

uint64_t JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)9>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  int v31;
  unsigned int v32;
  _DWORD *v33;
  _QWORD *v34;
  int v35;
  char *v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unint64_t v79;
  pthread_key_t *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  unsigned int v90;
  char v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF *v106;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF *v116;
  uint64_t v117;
  _BYTE v118[24];
  char *v119;
  char v120;
  __int16 v121;
  char v122;
  char v123;
  char **v124;
  char **v125;
  JSC::ExecutableMemoryHandle *v126;
  uint64_t v127;
  WTF *v128;
  _BYTE v129[128];
  unsigned int v130;
  char v131;
  int v132;
  int v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  _BYTE v137[32];
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  WTF *v141;
  _BYTE v142[128];
  unsigned int v143;
  unsigned int i;
  int v145;
  char v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  _BYTE *v150;
  char v151;
  uint64_t v152;
  int v153;
  _BYTE *v154;
  char v155;
  uint64_t v156;
  int v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  v137[0] = 0;
  v137[24] = 0;
  v138 = 0;
  v139 = 0;
  v140 = 0x8000000080000000;
  v141 = (WTF *)v142;
  v143 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v125 = &v119;
    v116 = (WTF *)&v125;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v116, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(WTF **)v13;
  v15 = v143;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v143 < v16)
    {
      if (v141 && v141 != (WTF *)v142)
      {
        WTF::fastFree((unint64_t)v141, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(WTF **)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v141 = v14;
      v143 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v143;
    }
  }
  v17 = 0;
  v146 = 1;
  i = 0;
  v145 = 0;
  v147 = 0u;
  v148 = 0u;
  v149 = 0u;
  v151 = 16;
  v153 = 0x10000;
  v150 = v137;
  v152 = 0;
  v154 = v137;
  v155 = 17;
  v156 = 0;
  v157 = 0x20000;
  v158 = 0;
  v160 = 0;
  v159 = 0;
  v116 = (WTF *)v118;
  v117 = 2;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v141, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = i;
  }
  *(_DWORD *)((char *)v141 + v17) = -129989819;
  v18 = i;
  v19 = i + 4;
  i += 4;
  if (v18 + 8 > v143)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v141, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v19 = i;
  }
  *(_DWORD *)((char *)v141 + v19) = -112982875;
  v20 = i;
  v21 = i + 4;
  i += 4;
  if (!v146)
  {
    __break(0xC471u);
    JUMPOUT(0x1987E20E8);
  }
  *((_DWORD *)v154 + 52) &= ~v157;
  v22 = v155 & 0x1F | 0x384040A0;
  if (v20 + 8 > v143)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v141, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v21 = i;
  }
  *(_DWORD *)((char *)v141 + v21) = v22;
  i += 4;
  JSC::MacroAssemblerARM64::branch32((uint64_t)v137, 0, 17, 2, v9, v10, v11, v12, (uint64_t)&v125);
  v31 = (int)v125;
  if ((_DWORD)v125 != -1)
  {
    v32 = HIDWORD(v117);
    if (HIDWORD(v117) == (_DWORD)v117)
    {
      v33 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v116, (void *)(HIDWORD(v117) + 1), (unint64_t)&v125, v25, v26, v27, v28, v29);
      v35 = *v33;
      v34 = v33 + 1;
      v31 = v35;
      v32 = HIDWORD(v117);
    }
    else
    {
      v34 = (char ***)((char *)&v125 + 4);
    }
    v36 = (char *)v116 + 12 * v32;
    *(_DWORD *)v36 = v31;
    *(_QWORD *)(v36 + 4) = *v34;
    ++HIDWORD(v117);
  }
  v37 = i;
  if (i + 4 > v143)
  {
    v30 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v141, v23, v24, v25, v26, v27, v28, v29).n128_u64[0];
    v37 = i;
  }
  *(_DWORD *)((char *)v141 + v37) = -1203748795;
  v38 = i + 4;
  for (i = v38; v38 < SHIDWORD(v140); i = v38)
  {
    if (v38 + 4 > v143)
    {
      v30 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v141, v23, v24, v25, v26, v27, v28, v29).n128_u64[0];
      v38 = i;
    }
    *(_DWORD *)((char *)v141 + v38) = -721215457;
    v38 = i + 4;
  }
  v145 = 0;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)v137, 0, 5, v26, v27, v28, v29, (uint64_t)&v125, v30);
  v46 = i;
  if (i + 4 > v143)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v141, v39, v40, v41, v42, v43, v44, v45);
    v46 = i;
  }
  *(_DWORD *)((char *)v141 + v46) = -129957888;
  v47 = i;
  v48 = i + 4;
  i += 4;
  if (v47 + 8 > v143)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v141, v39, v40, v41, v42, v43, v44, v45);
    v48 = i;
  }
  *(_DWORD *)((char *)v141 + v48) = 1358955685;
  v49 = i + 4;
  for (i = v49; (int)v49 < SHIDWORD(v140); i = v49)
  {
    if (v49 + 4 > v143)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v141, v39, v40, v41, v42, v43, v44, v45);
      v49 = i;
    }
    *(_DWORD *)((char *)v141 + v49) = -721215457;
    v49 = i + 4;
  }
  v50 = v49;
  if (v49 + 4 > v143)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v141, v39, v40, v41, v42, v43, v44, v45);
    v50 = i;
  }
  *(_DWORD *)((char *)v141 + v50) = 335544320;
  i += 4;
  if (v158)
    v51 = 69;
  else
    v51 = 65;
  v119 = (char *)v49;
  v120 = v51;
  v121 = 15;
  v122 = -1;
  LODWORD(v124) = v38;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v119, (unsigned int *)&v124, (uint64_t)v137, v41, v42, v43, v44, v45);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v125, (uint64_t)v137, v52, v53, v54, v55, v56, v57);
  v65 = i;
  if (i + 4 > v143)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v141, v58, v59, v60, v61, v62, v63, v64);
    v65 = i;
  }
  *(_DWORD *)((char *)v141 + v65) = -698416192;
  i += 4;
  JSC::JITThunks::ctiStub(*(_QWORD *)(a1 + 90440), a1, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::slow_op_resolve_scopeGenerator, v60, v61, v62, v63, v64, &v125);
  if (HIDWORD(v117))
  {
    v73 = (uint64_t)v125;
    v74 = (unsigned int *)v116;
    v75 = 12 * HIDWORD(v117);
    do
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v74, v73, (uint64_t)v137, v68, v69, v70, v71, v72);
      v74 += 3;
      v75 -= 12;
    }
    while (v75);
  }
  v76 = (unsigned int *)v126;
  v126 = 0;
  if (v76)
  {
    do
    {
      v77 = __ldaxr(v76);
      v78 = v77 - 1;
    }
    while (__stlxr(v78, v76));
    if (!v78)
    {
      atomic_store(1u, v76);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v76, v66, v67, v68, v69, v70, v71, v72);
      WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    }
  }
  v125 = 0;
  v126 = 0;
  v127 = -1;
  v128 = (WTF *)v129;
  v130 = 128;
  v79 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v79 != -1)
  {
    v119 = &v123;
    v124 = &v119;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v124, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v80 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v88 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v88)
  {
    v88 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v88, v80);
  }
  v89 = *(WTF **)v88;
  if (*(_QWORD *)v88 != v88 + 8)
  {
    v90 = *(_DWORD *)(v88 + 136);
    if (v130 < v90)
    {
      if (v128 && v128 != (WTF *)v129)
      {
        WTF::fastFree((unint64_t)v128, v81, v82, v83, v84, v85, v86, v87);
        v89 = *(WTF **)v88;
        v90 = *(_DWORD *)(v88 + 136);
      }
      v128 = v89;
      v130 = v90;
      *(_QWORD *)v88 = v88 + 8;
      *(_DWORD *)(v88 + 136) = 128;
    }
  }
  v91 = 1;
  v131 = 1;
  v132 = 0;
  v133 = 13;
  v134 = 0u;
  v135 = 0u;
  v136 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v125, (uint64_t)v137, 1, v83, v84, v85, v86, v87);
  BYTE2(v132) = 1;
  if (byte_1ECF4C288)
    goto LABEL_63;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v91 = HIBYTE(word_1ECF4C286) != 0;
LABEL_63:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v125, v91, "resolve_scope", 14, "Baseline: resolve_scope", a2);
    goto LABEL_58;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v125, "resolve_scope", 14, a2);
LABEL_58:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v125, v92, v93, v94, v95, v96, v97, v98);
  v106 = v116;
  if (v118 != (_BYTE *)v116 && v116)
  {
    v116 = 0;
    LODWORD(v117) = 0;
    WTF::fastFree((unint64_t)v106, v99, v100, v101, v102, v103, v104, v105);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v137, v99, v100, v101, v102, v103, v104, v105);
}

void JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int i;
  int v56;
  char v57;
  int *v58;
  int *v59;
  int v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  pthread_key_t *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  char v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  char v119;
  __int16 v120;
  char v121;
  uint64_t v122[3];
  _QWORD v123[4];
  _QWORD v124[2];
  _QWORD v125[2];
  WTF *v126;
  uint64_t v127;
  _BYTE v128[31];
  char v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE v135[128];
  unsigned int v136;
  char v137;
  int v138;
  int v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  _BYTE v143[32];
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _BYTE *v147;
  _BYTE v148[128];
  unsigned int v149;
  int v150;
  int v151;
  char v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _BYTE *v156;
  char v157;
  uint64_t v158;
  int v159;
  _BYTE *v160;
  char v161;
  uint64_t v162;
  int v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  v143[0] = 0;
  v143[24] = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0x8000000080000000;
  v147 = v148;
  v149 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v131 = v123;
    v126 = (WTF *)&v131;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v126, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v149;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v149 < v16)
    {
      if (v147 && v147 != v148)
      {
        WTF::fastFree((unint64_t)v147, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v147 = (_BYTE *)v14;
      v149 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v149;
    }
  }
  v17 = 0;
  v152 = 1;
  v150 = 0;
  v151 = 0;
  v153 = 0u;
  v154 = 0u;
  v155 = 0u;
  v156 = v143;
  v157 = 16;
  v158 = 0;
  v159 = 0x10000;
  v160 = v143;
  v161 = 17;
  v162 = 0;
  v163 = 0x20000;
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v125[1] = &v126;
  v126 = (WTF *)v128;
  v127 = 2;
  v124[1] = v143;
  v125[0] = v143;
  v124[0] = v125;
  v123[0] = v143;
  v123[1] = v125;
  v123[2] = &v126;
  v123[3] = v124;
  v131 = &v133;
  v132 = 2;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v150;
  }
  *(_DWORD *)&v147[v17] = -1203765183;
  v150 += 4;
  v122[0] = (uint64_t)v143;
  v122[1] = (uint64_t)v123;
  v122[2] = (uint64_t)&v131;
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 7u, v7, v8, v9, v10, v11, v12);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 1u, v18, v19, v20, v21, v22, v23);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 0, v24, v25, v26, v27, v28, v29);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 2u, v30, v31, v32, v33, v34, v35);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 6u, v36, v37, v38, v39, v40, v41);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 8u, v42, v43, v44, v45, v46, v47);
  for (i = v150; i < SHIDWORD(v146); v150 = i)
  {
    if (i + 4 > v149)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
      i = v150;
    }
    *(_DWORD *)&v147[i] = -721215457;
    i = v150 + 4;
  }
  v56 = i;
  if (i + 4 > v149)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
    v56 = v150;
  }
  *(_DWORD *)&v147[v56] = 335544320;
  v150 += 4;
  if (v164)
    v57 = 69;
  else
    v57 = 65;
  v117 = i;
  v118 = 0;
  v119 = v57;
  v120 = 15;
  v121 = -1;
  if (i != -1)
  {
    if (HIDWORD(v127) == (_DWORD)v127)
    {
      v58 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, (void *)(HIDWORD(v127) + 1), (unint64_t)&v117, v50, v51, v52, v53, v54);
      v60 = *v58;
      v59 = v58 + 1;
      v61 = (char *)v126 + 12 * HIDWORD(v127);
      *(_DWORD *)v61 = v60;
    }
    else
    {
      v59 = &v118;
      v61 = (char *)v126 + 12 * HIDWORD(v127);
      *(_DWORD *)v61 = i;
    }
    *(_QWORD *)(v61 + 4) = *(_QWORD *)v59;
    ++HIDWORD(v127);
  }
  if (!HIDWORD(v132))
  {
LABEL_28:
    v65 = (unint64_t)v131;
    if (&v133 != v131 && v131 != 0)
    {
      v131 = 0;
      LODWORD(v132) = 0;
      WTF::fastFree(v65, v48, v49, v50, v51, v52, v53, v54);
    }
    v67 = v150;
    if (v150 + 4 > v149)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
      v67 = v150;
    }
    *(_DWORD *)&v147[v67] = -698416192;
    v150 += 4;
    JSC::JITThunks::ctiStub(*(_QWORD *)(a1 + 90440), a1, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::slow_op_resolve_scopeGenerator, v50, v51, v52, v53, v54, &v131);
    if (HIDWORD(v127))
    {
      v75 = (uint64_t)v131;
      v76 = (unsigned int *)v126;
      v77 = 12 * HIDWORD(v127);
      do
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v76, v75, (uint64_t)v143, v70, v71, v72, v73, v74);
        v76 += 3;
        v77 -= 12;
      }
      while (v77);
    }
    v78 = (unsigned int *)v132;
    v132 = 0;
    if (v78)
    {
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        atomic_store(1u, v78);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v78, v68, v69, v70, v71, v72, v73, v74);
        WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
      }
    }
    v131 = 0;
    v132 = 0;
    v133 = -1;
    v134 = v135;
    v136 = 128;
    v81 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v81 != -1)
    {
      v122[0] = (uint64_t)&v129;
      v130 = v122;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v130, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v82 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v90 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v90)
    {
      v90 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v90, v82);
    }
    v91 = *(_QWORD *)v90;
    if (*(_QWORD *)v90 != v90 + 8)
    {
      v92 = *(_DWORD *)(v90 + 136);
      if (v136 < v92)
      {
        if (v134 && v134 != v135)
        {
          WTF::fastFree((unint64_t)v134, v83, v84, v85, v86, v87, v88, v89);
          v91 = *(_QWORD *)v90;
          v92 = *(_DWORD *)(v90 + 136);
        }
        v134 = (_BYTE *)v91;
        v136 = v92;
        *(_QWORD *)v90 = v90 + 8;
        *(_DWORD *)(v90 + 136) = 128;
      }
    }
    v93 = 1;
    v137 = 1;
    v138 = 0;
    v139 = 13;
    v140 = 0u;
    v141 = 0u;
    v142 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)&v131, (uint64_t)v143, 1, v85, v86, v87, v88, v89);
    BYTE2(v138) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v131, "resolve_scope", 14, a2);
LABEL_55:
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v131, v94, v95, v96, v97, v98, v99, v100);
        v108 = v126;
        if (v128 != (_BYTE *)v126)
        {
          if (v126)
          {
            v126 = 0;
            LODWORD(v127) = 0;
            WTF::fastFree((unint64_t)v108, v101, v102, v103, v104, v105, v106, v107);
          }
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v143, v101, v102, v103, v104, v105, v106, v107);
        return;
      }
      v93 = HIBYTE(word_1ECF4C286) != 0;
    }
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v131, v93, "resolve_scope", 14, "Baseline: resolve_scope", a2);
    goto LABEL_55;
  }
  v62 = 0;
  v63 = 0;
  v64 = 12 * HIDWORD(v132);
  while (v63 < HIDWORD(v132))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v131 + v62), (uint64_t)v143, v49, v50, v51, v52, v53, v54);
    ++v63;
    v62 += 12;
    if (v64 == v62)
      goto LABEL_28;
  }
  __break(0xC471u);
}

void JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)6>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int i;
  int v56;
  char v57;
  int *v58;
  int *v59;
  int v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  pthread_key_t *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  char v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  char v119;
  __int16 v120;
  char v121;
  uint64_t v122[3];
  _QWORD v123[4];
  _QWORD v124[2];
  _QWORD v125[2];
  WTF *v126;
  uint64_t v127;
  _BYTE v128[31];
  char v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE v135[128];
  unsigned int v136;
  char v137;
  int v138;
  int v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  _BYTE v143[32];
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _BYTE *v147;
  _BYTE v148[128];
  unsigned int v149;
  int v150;
  int v151;
  char v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _BYTE *v156;
  char v157;
  uint64_t v158;
  int v159;
  _BYTE *v160;
  char v161;
  uint64_t v162;
  int v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  v143[0] = 0;
  v143[24] = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0x8000000080000000;
  v147 = v148;
  v149 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v131 = v123;
    v126 = (WTF *)&v131;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v126, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v149;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v149 < v16)
    {
      if (v147 && v147 != v148)
      {
        WTF::fastFree((unint64_t)v147, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v147 = (_BYTE *)v14;
      v149 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v149;
    }
  }
  v17 = 0;
  v152 = 1;
  v150 = 0;
  v151 = 0;
  v153 = 0u;
  v154 = 0u;
  v155 = 0u;
  v156 = v143;
  v157 = 16;
  v158 = 0;
  v159 = 0x10000;
  v160 = v143;
  v161 = 17;
  v162 = 0;
  v163 = 0x20000;
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v125[1] = &v126;
  v126 = (WTF *)v128;
  v127 = 2;
  v124[1] = v143;
  v125[0] = v143;
  v124[0] = v125;
  v123[0] = v143;
  v123[1] = v125;
  v123[2] = &v126;
  v123[3] = v124;
  v131 = &v133;
  v132 = 2;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v150;
  }
  *(_DWORD *)&v147[v17] = -1203765183;
  v150 += 4;
  v122[0] = (uint64_t)v143;
  v122[1] = (uint64_t)v123;
  v122[2] = (uint64_t)&v131;
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)6>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 6u, v7, v8, v9, v10, v11, v12);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)6>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 1u, v18, v19, v20, v21, v22, v23);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)6>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 0, v24, v25, v26, v27, v28, v29);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)6>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 2u, v30, v31, v32, v33, v34, v35);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)6>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 7u, v36, v37, v38, v39, v40, v41);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)6>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 8u, v42, v43, v44, v45, v46, v47);
  for (i = v150; i < SHIDWORD(v146); v150 = i)
  {
    if (i + 4 > v149)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
      i = v150;
    }
    *(_DWORD *)&v147[i] = -721215457;
    i = v150 + 4;
  }
  v56 = i;
  if (i + 4 > v149)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
    v56 = v150;
  }
  *(_DWORD *)&v147[v56] = 335544320;
  v150 += 4;
  if (v164)
    v57 = 69;
  else
    v57 = 65;
  v117 = i;
  v118 = 0;
  v119 = v57;
  v120 = 15;
  v121 = -1;
  if (i != -1)
  {
    if (HIDWORD(v127) == (_DWORD)v127)
    {
      v58 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, (void *)(HIDWORD(v127) + 1), (unint64_t)&v117, v50, v51, v52, v53, v54);
      v60 = *v58;
      v59 = v58 + 1;
      v61 = (char *)v126 + 12 * HIDWORD(v127);
      *(_DWORD *)v61 = v60;
    }
    else
    {
      v59 = &v118;
      v61 = (char *)v126 + 12 * HIDWORD(v127);
      *(_DWORD *)v61 = i;
    }
    *(_QWORD *)(v61 + 4) = *(_QWORD *)v59;
    ++HIDWORD(v127);
  }
  if (!HIDWORD(v132))
  {
LABEL_28:
    v65 = (unint64_t)v131;
    if (&v133 != v131 && v131 != 0)
    {
      v131 = 0;
      LODWORD(v132) = 0;
      WTF::fastFree(v65, v48, v49, v50, v51, v52, v53, v54);
    }
    v67 = v150;
    if (v150 + 4 > v149)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
      v67 = v150;
    }
    *(_DWORD *)&v147[v67] = -698416192;
    v150 += 4;
    JSC::JITThunks::ctiStub(*(_QWORD *)(a1 + 90440), a1, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::slow_op_resolve_scopeGenerator, v50, v51, v52, v53, v54, &v131);
    if (HIDWORD(v127))
    {
      v75 = (uint64_t)v131;
      v76 = (unsigned int *)v126;
      v77 = 12 * HIDWORD(v127);
      do
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v76, v75, (uint64_t)v143, v70, v71, v72, v73, v74);
        v76 += 3;
        v77 -= 12;
      }
      while (v77);
    }
    v78 = (unsigned int *)v132;
    v132 = 0;
    if (v78)
    {
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        atomic_store(1u, v78);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v78, v68, v69, v70, v71, v72, v73, v74);
        WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
      }
    }
    v131 = 0;
    v132 = 0;
    v133 = -1;
    v134 = v135;
    v136 = 128;
    v81 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v81 != -1)
    {
      v122[0] = (uint64_t)&v129;
      v130 = v122;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v130, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v82 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v90 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v90)
    {
      v90 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v90, v82);
    }
    v91 = *(_QWORD *)v90;
    if (*(_QWORD *)v90 != v90 + 8)
    {
      v92 = *(_DWORD *)(v90 + 136);
      if (v136 < v92)
      {
        if (v134 && v134 != v135)
        {
          WTF::fastFree((unint64_t)v134, v83, v84, v85, v86, v87, v88, v89);
          v91 = *(_QWORD *)v90;
          v92 = *(_DWORD *)(v90 + 136);
        }
        v134 = (_BYTE *)v91;
        v136 = v92;
        *(_QWORD *)v90 = v90 + 8;
        *(_DWORD *)(v90 + 136) = 128;
      }
    }
    v93 = 1;
    v137 = 1;
    v138 = 0;
    v139 = 13;
    v140 = 0u;
    v141 = 0u;
    v142 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)&v131, (uint64_t)v143, 1, v85, v86, v87, v88, v89);
    BYTE2(v138) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v131, "resolve_scope", 14, a2);
LABEL_55:
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v131, v94, v95, v96, v97, v98, v99, v100);
        v108 = v126;
        if (v128 != (_BYTE *)v126)
        {
          if (v126)
          {
            v126 = 0;
            LODWORD(v127) = 0;
            WTF::fastFree((unint64_t)v108, v101, v102, v103, v104, v105, v106, v107);
          }
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v143, v101, v102, v103, v104, v105, v106, v107);
        return;
      }
      v93 = HIBYTE(word_1ECF4C286) != 0;
    }
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v131, v93, "resolve_scope", 14, "Baseline: resolve_scope", a2);
    goto LABEL_55;
  }
  v62 = 0;
  v63 = 0;
  v64 = 12 * HIDWORD(v132);
  while (v63 < HIDWORD(v132))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v131 + v62), (uint64_t)v143, v49, v50, v51, v52, v53, v54);
    ++v63;
    v62 += 12;
    if (v64 == v62)
      goto LABEL_28;
  }
  __break(0xC471u);
}

void JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)8>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int i;
  int v56;
  char v57;
  int *v58;
  int *v59;
  int v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  pthread_key_t *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  char v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  char v119;
  __int16 v120;
  char v121;
  uint64_t v122[3];
  _QWORD v123[4];
  _QWORD v124[2];
  _QWORD v125[2];
  WTF *v126;
  uint64_t v127;
  _BYTE v128[31];
  char v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE v135[128];
  unsigned int v136;
  char v137;
  int v138;
  int v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  _BYTE v143[32];
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _BYTE *v147;
  _BYTE v148[128];
  unsigned int v149;
  int v150;
  int v151;
  char v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _BYTE *v156;
  char v157;
  uint64_t v158;
  int v159;
  _BYTE *v160;
  char v161;
  uint64_t v162;
  int v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  v143[0] = 0;
  v143[24] = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0x8000000080000000;
  v147 = v148;
  v149 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v131 = v123;
    v126 = (WTF *)&v131;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v126, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v149;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v149 < v16)
    {
      if (v147 && v147 != v148)
      {
        WTF::fastFree((unint64_t)v147, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v147 = (_BYTE *)v14;
      v149 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v149;
    }
  }
  v17 = 0;
  v152 = 1;
  v150 = 0;
  v151 = 0;
  v153 = 0u;
  v154 = 0u;
  v155 = 0u;
  v156 = v143;
  v157 = 16;
  v158 = 0;
  v159 = 0x10000;
  v160 = v143;
  v161 = 17;
  v162 = 0;
  v163 = 0x20000;
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v125[1] = &v126;
  v126 = (WTF *)v128;
  v127 = 2;
  v124[1] = v143;
  v125[0] = v143;
  v124[0] = v125;
  v123[0] = v143;
  v123[1] = v125;
  v123[2] = &v126;
  v123[3] = v124;
  v131 = &v133;
  v132 = 2;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v150;
  }
  *(_DWORD *)&v147[v17] = -1203765183;
  v150 += 4;
  v122[0] = (uint64_t)v143;
  v122[1] = (uint64_t)v123;
  v122[2] = (uint64_t)&v131;
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)8>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 8u, v7, v8, v9, v10, v11, v12);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)8>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 1u, v18, v19, v20, v21, v22, v23);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)8>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 0, v24, v25, v26, v27, v28, v29);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)8>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 2u, v30, v31, v32, v33, v34, v35);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)8>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 7u, v36, v37, v38, v39, v40, v41);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)8>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 6u, v42, v43, v44, v45, v46, v47);
  for (i = v150; i < SHIDWORD(v146); v150 = i)
  {
    if (i + 4 > v149)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
      i = v150;
    }
    *(_DWORD *)&v147[i] = -721215457;
    i = v150 + 4;
  }
  v56 = i;
  if (i + 4 > v149)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
    v56 = v150;
  }
  *(_DWORD *)&v147[v56] = 335544320;
  v150 += 4;
  if (v164)
    v57 = 69;
  else
    v57 = 65;
  v117 = i;
  v118 = 0;
  v119 = v57;
  v120 = 15;
  v121 = -1;
  if (i != -1)
  {
    if (HIDWORD(v127) == (_DWORD)v127)
    {
      v58 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, (void *)(HIDWORD(v127) + 1), (unint64_t)&v117, v50, v51, v52, v53, v54);
      v60 = *v58;
      v59 = v58 + 1;
      v61 = (char *)v126 + 12 * HIDWORD(v127);
      *(_DWORD *)v61 = v60;
    }
    else
    {
      v59 = &v118;
      v61 = (char *)v126 + 12 * HIDWORD(v127);
      *(_DWORD *)v61 = i;
    }
    *(_QWORD *)(v61 + 4) = *(_QWORD *)v59;
    ++HIDWORD(v127);
  }
  if (!HIDWORD(v132))
  {
LABEL_28:
    v65 = (unint64_t)v131;
    if (&v133 != v131 && v131 != 0)
    {
      v131 = 0;
      LODWORD(v132) = 0;
      WTF::fastFree(v65, v48, v49, v50, v51, v52, v53, v54);
    }
    v67 = v150;
    if (v150 + 4 > v149)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
      v67 = v150;
    }
    *(_DWORD *)&v147[v67] = -698416192;
    v150 += 4;
    JSC::JITThunks::ctiStub(*(_QWORD *)(a1 + 90440), a1, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::slow_op_resolve_scopeGenerator, v50, v51, v52, v53, v54, &v131);
    if (HIDWORD(v127))
    {
      v75 = (uint64_t)v131;
      v76 = (unsigned int *)v126;
      v77 = 12 * HIDWORD(v127);
      do
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v76, v75, (uint64_t)v143, v70, v71, v72, v73, v74);
        v76 += 3;
        v77 -= 12;
      }
      while (v77);
    }
    v78 = (unsigned int *)v132;
    v132 = 0;
    if (v78)
    {
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        atomic_store(1u, v78);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v78, v68, v69, v70, v71, v72, v73, v74);
        WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
      }
    }
    v131 = 0;
    v132 = 0;
    v133 = -1;
    v134 = v135;
    v136 = 128;
    v81 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v81 != -1)
    {
      v122[0] = (uint64_t)&v129;
      v130 = v122;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v130, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v82 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v90 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v90)
    {
      v90 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v90, v82);
    }
    v91 = *(_QWORD *)v90;
    if (*(_QWORD *)v90 != v90 + 8)
    {
      v92 = *(_DWORD *)(v90 + 136);
      if (v136 < v92)
      {
        if (v134 && v134 != v135)
        {
          WTF::fastFree((unint64_t)v134, v83, v84, v85, v86, v87, v88, v89);
          v91 = *(_QWORD *)v90;
          v92 = *(_DWORD *)(v90 + 136);
        }
        v134 = (_BYTE *)v91;
        v136 = v92;
        *(_QWORD *)v90 = v90 + 8;
        *(_DWORD *)(v90 + 136) = 128;
      }
    }
    v93 = 1;
    v137 = 1;
    v138 = 0;
    v139 = 13;
    v140 = 0u;
    v141 = 0u;
    v142 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)&v131, (uint64_t)v143, 1, v85, v86, v87, v88, v89);
    BYTE2(v138) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v131, "resolve_scope", 14, a2);
LABEL_55:
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v131, v94, v95, v96, v97, v98, v99, v100);
        v108 = v126;
        if (v128 != (_BYTE *)v126)
        {
          if (v126)
          {
            v126 = 0;
            LODWORD(v127) = 0;
            WTF::fastFree((unint64_t)v108, v101, v102, v103, v104, v105, v106, v107);
          }
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v143, v101, v102, v103, v104, v105, v106, v107);
        return;
      }
      v93 = HIBYTE(word_1ECF4C286) != 0;
    }
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v131, v93, "resolve_scope", 14, "Baseline: resolve_scope", a2);
    goto LABEL_55;
  }
  v62 = 0;
  v63 = 0;
  v64 = 12 * HIDWORD(v132);
  while (v63 < HIDWORD(v132))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v131 + v62), (uint64_t)v143, v49, v50, v51, v52, v53, v54);
    ++v63;
    v62 += 12;
    if (v64 == v62)
      goto LABEL_28;
  }
  __break(0xC471u);
}

void JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)1>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int i;
  int v56;
  char v57;
  int *v58;
  int *v59;
  int v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  pthread_key_t *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  char v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  char v119;
  __int16 v120;
  char v121;
  uint64_t v122[3];
  _QWORD v123[4];
  _QWORD v124[2];
  _QWORD v125[2];
  WTF *v126;
  uint64_t v127;
  _BYTE v128[31];
  char v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE v135[128];
  unsigned int v136;
  char v137;
  int v138;
  int v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  _BYTE v143[32];
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _BYTE *v147;
  _BYTE v148[128];
  unsigned int v149;
  int v150;
  int v151;
  char v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _BYTE *v156;
  char v157;
  uint64_t v158;
  int v159;
  _BYTE *v160;
  char v161;
  uint64_t v162;
  int v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  v143[0] = 0;
  v143[24] = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0x8000000080000000;
  v147 = v148;
  v149 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v131 = v123;
    v126 = (WTF *)&v131;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v126, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v149;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v149 < v16)
    {
      if (v147 && v147 != v148)
      {
        WTF::fastFree((unint64_t)v147, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v147 = (_BYTE *)v14;
      v149 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v149;
    }
  }
  v17 = 0;
  v152 = 1;
  v150 = 0;
  v151 = 0;
  v153 = 0u;
  v154 = 0u;
  v155 = 0u;
  v156 = v143;
  v157 = 16;
  v158 = 0;
  v159 = 0x10000;
  v160 = v143;
  v161 = 17;
  v162 = 0;
  v163 = 0x20000;
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v125[1] = &v126;
  v126 = (WTF *)v128;
  v127 = 2;
  v124[1] = v143;
  v125[0] = v143;
  v124[0] = v125;
  v123[0] = v143;
  v123[1] = v125;
  v123[2] = &v126;
  v123[3] = v124;
  v131 = &v133;
  v132 = 2;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v150;
  }
  *(_DWORD *)&v147[v17] = -1203765183;
  v150 += 4;
  v122[0] = (uint64_t)v143;
  v122[1] = (uint64_t)v123;
  v122[2] = (uint64_t)&v131;
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)1>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 1u, v7, v8, v9, v10, v11, v12);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)1>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 0, v18, v19, v20, v21, v22, v23);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)1>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 2u, v24, v25, v26, v27, v28, v29);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)1>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 7u, v30, v31, v32, v33, v34, v35);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)1>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 6u, v36, v37, v38, v39, v40, v41);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)1>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 8u, v42, v43, v44, v45, v46, v47);
  for (i = v150; i < SHIDWORD(v146); v150 = i)
  {
    if (i + 4 > v149)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
      i = v150;
    }
    *(_DWORD *)&v147[i] = -721215457;
    i = v150 + 4;
  }
  v56 = i;
  if (i + 4 > v149)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
    v56 = v150;
  }
  *(_DWORD *)&v147[v56] = 335544320;
  v150 += 4;
  if (v164)
    v57 = 69;
  else
    v57 = 65;
  v117 = i;
  v118 = 0;
  v119 = v57;
  v120 = 15;
  v121 = -1;
  if (i != -1)
  {
    if (HIDWORD(v127) == (_DWORD)v127)
    {
      v58 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, (void *)(HIDWORD(v127) + 1), (unint64_t)&v117, v50, v51, v52, v53, v54);
      v60 = *v58;
      v59 = v58 + 1;
      v61 = (char *)v126 + 12 * HIDWORD(v127);
      *(_DWORD *)v61 = v60;
    }
    else
    {
      v59 = &v118;
      v61 = (char *)v126 + 12 * HIDWORD(v127);
      *(_DWORD *)v61 = i;
    }
    *(_QWORD *)(v61 + 4) = *(_QWORD *)v59;
    ++HIDWORD(v127);
  }
  if (!HIDWORD(v132))
  {
LABEL_28:
    v65 = (unint64_t)v131;
    if (&v133 != v131 && v131 != 0)
    {
      v131 = 0;
      LODWORD(v132) = 0;
      WTF::fastFree(v65, v48, v49, v50, v51, v52, v53, v54);
    }
    v67 = v150;
    if (v150 + 4 > v149)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
      v67 = v150;
    }
    *(_DWORD *)&v147[v67] = -698416192;
    v150 += 4;
    JSC::JITThunks::ctiStub(*(_QWORD *)(a1 + 90440), a1, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::slow_op_resolve_scopeGenerator, v50, v51, v52, v53, v54, &v131);
    if (HIDWORD(v127))
    {
      v75 = (uint64_t)v131;
      v76 = (unsigned int *)v126;
      v77 = 12 * HIDWORD(v127);
      do
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v76, v75, (uint64_t)v143, v70, v71, v72, v73, v74);
        v76 += 3;
        v77 -= 12;
      }
      while (v77);
    }
    v78 = (unsigned int *)v132;
    v132 = 0;
    if (v78)
    {
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        atomic_store(1u, v78);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v78, v68, v69, v70, v71, v72, v73, v74);
        WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
      }
    }
    v131 = 0;
    v132 = 0;
    v133 = -1;
    v134 = v135;
    v136 = 128;
    v81 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v81 != -1)
    {
      v122[0] = (uint64_t)&v129;
      v130 = v122;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v130, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v82 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v90 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v90)
    {
      v90 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v90, v82);
    }
    v91 = *(_QWORD *)v90;
    if (*(_QWORD *)v90 != v90 + 8)
    {
      v92 = *(_DWORD *)(v90 + 136);
      if (v136 < v92)
      {
        if (v134 && v134 != v135)
        {
          WTF::fastFree((unint64_t)v134, v83, v84, v85, v86, v87, v88, v89);
          v91 = *(_QWORD *)v90;
          v92 = *(_DWORD *)(v90 + 136);
        }
        v134 = (_BYTE *)v91;
        v136 = v92;
        *(_QWORD *)v90 = v90 + 8;
        *(_DWORD *)(v90 + 136) = 128;
      }
    }
    v93 = 1;
    v137 = 1;
    v138 = 0;
    v139 = 13;
    v140 = 0u;
    v141 = 0u;
    v142 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)&v131, (uint64_t)v143, 1, v85, v86, v87, v88, v89);
    BYTE2(v138) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v131, "resolve_scope", 14, a2);
LABEL_55:
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v131, v94, v95, v96, v97, v98, v99, v100);
        v108 = v126;
        if (v128 != (_BYTE *)v126)
        {
          if (v126)
          {
            v126 = 0;
            LODWORD(v127) = 0;
            WTF::fastFree((unint64_t)v108, v101, v102, v103, v104, v105, v106, v107);
          }
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v143, v101, v102, v103, v104, v105, v106, v107);
        return;
      }
      v93 = HIBYTE(word_1ECF4C286) != 0;
    }
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v131, v93, "resolve_scope", 14, "Baseline: resolve_scope", a2);
    goto LABEL_55;
  }
  v62 = 0;
  v63 = 0;
  v64 = 12 * HIDWORD(v132);
  while (v63 < HIDWORD(v132))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v131 + v62), (uint64_t)v143, v49, v50, v51, v52, v53, v54);
    ++v63;
    v62 += 12;
    if (v64 == v62)
      goto LABEL_28;
  }
  __break(0xC471u);
}

void JSC::JIT::emitSlow_op_resolve_scope(uint64_t a1, unsigned __int8 *a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t *__return_ptr, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  int v60;
  _DWORD *v61;
  unint64_t v62;
  BOOL v63;
  char **v64;
  JSC::AssemblerBuffer *v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  _DWORD *v70;
  int v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;

  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  v15 = *a2;
  if (v15 == 128)
  {
    v71 = *((__int16 *)a2 + 2);
    if (v71 <= 63)
      v17 = v71;
    else
      v17 = (v71 + 1073741760);
    v18 = *((unsigned __int16 *)a2 + 6);
  }
  else if (v15 == 130)
  {
    v17 = *(unsigned int *)(a2 + 6);
    v18 = *(_DWORD *)(a2 + 22);
  }
  else
  {
    v16 = (char)a2[2];
    if (v16 <= 15)
      v17 = v16;
    else
      v17 = (v16 + 1073741808);
    v18 = a2[6];
  }
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  v20 = *(unsigned __int16 *)(v19 + 50);
  if (!*(_WORD *)(v19 + 50))
    v20 = *(_DWORD *)(v19 + 196);
  v21 = *(unsigned int *)(a1 + 640);
  switch(*(_DWORD *)(((v19 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 * v18))
  {
    case 0:
      v22 = *(_QWORD *)(a1 + 352);
      v23 = *(_QWORD *)(v22 + 90440);
      v24 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)0>;
      break;
    case 2:
      v22 = *(_QWORD *)(a1 + 352);
      v23 = *(_QWORD *)(v22 + 90440);
      v24 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)2>;
      break;
    case 6:
      v22 = *(_QWORD *)(a1 + 352);
      v23 = *(_QWORD *)(v22 + 90440);
      v24 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)6>;
      break;
    case 7:
      v22 = *(_QWORD *)(a1 + 352);
      v23 = *(_QWORD *)(v22 + 90440);
      v24 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>;
      break;
    case 8:
      v22 = *(_QWORD *)(a1 + 352);
      v23 = *(_QWORD *)(v22 + 90440);
      v24 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)8>;
      break;
    case 9:
      v22 = *(_QWORD *)(a1 + 352);
      v23 = *(_QWORD *)(v22 + 90440);
      v24 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)9>;
      break;
    default:
      v22 = *(_QWORD *)(a1 + 352);
      v23 = *(_QWORD *)(v22 + 90440);
      v24 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)1>;
      break;
  }
  JSC::JITThunks::ctiStub(v23, v22, v24, v10, v11, v12, v13, v14, &v80);
  v32 = v80;
  if ((int)v17 < 0x40000000)
  {
    v33 = (v17 << 35) | 0x1D;
LABEL_19:
    JSC::MacroAssemblerARM64::load64(a1, v33, 0, v27, v28, v29, v30, v31);
    goto LABEL_20;
  }
  v57 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v58 = (v17 - 0x40000000);
  v59 = *(_DWORD **)(v57 + 120);
  if (!v59 || *v59 <= v58)
    goto LABEL_34;
  v60 = *((unsigned __int8 *)v59 + v58 + 4);
  if ((v60 - 1) >= 2)
  {
    if (v60)
    {
      if (v60 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987E4060);
      }
      goto LABEL_45;
    }
LABEL_34:
    v61 = *(_DWORD **)(v57 + 112);
    if (*v61 <= v58)
    {
      __break(0xC471u);
      JUMPOUT(0x1987E40C8);
    }
    v62 = *(_QWORD *)&v61[2 * v58 + 2];
    if (v62)
      v63 = (v62 & 0xFFFE000000000002) == 0;
    else
      v63 = 0;
    if (!v63)
      goto LABEL_50;
    v64 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v62 & 0xFFFFFFFE) + 0x4C));
    if (v64 != &JSC::SymbolTable::s_info && v64 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_50;
LABEL_45:
    v66 = (JSC::AssemblerBuffer *)(a1 + 56);
    v67 = *(_DWORD *)(a1 + 200);
    if (v67 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v66, v25, v26, v27, v28, v29, v30, v31);
      v66 = (JSC::AssemblerBuffer *)(a1 + 56);
      v67 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v67) = -129956960;
    v68 = *(_DWORD *)(a1 + 200);
    v69 = v68 + 4;
    *(_DWORD *)(a1 + 200) = v68 + 4;
    if ((v68 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v66, v25, v26, v27, v28, v29, v30, v31);
      v69 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v69) = -129368064;
    *(_DWORD *)(a1 + 200) += 4;
    v33 = v17 << 35;
    goto LABEL_19;
  }
LABEL_50:
  v70 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v70 <= v58)
  {
    __break(0xC471u);
    JUMPOUT(0x1987E40A8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v70[2 * v58 + 2], 0, v27, v28, v29, v30, v31);
LABEL_20:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v21 >> 2), 3, v34, v35, v36, v37, v38);
  *(_DWORD *)(a1 + 208) = 0;
  v46 = *(_DWORD *)(a1 + 200);
  if (v46 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v39, v40, v41, v42, v43, v44, v45);
    v46 = *(_DWORD *)(a1 + 200);
  }
  v47 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v46) = -1811939328;
  v48 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v48;
  LOBYTE(v81) = -1;
  BYTE3(v81) = 15;
  *(_WORD *)((char *)&v81 + 1) = 65;
  *(_QWORD *)&v80 = v48 - 4;
  *((_QWORD *)&v80 + 1) = v32;
  WORD2(v81) = 384;
  v49 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v49 == *(_DWORD *)(a1 + 40))
  {
    v55 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, v49 + 1, (unint64_t)&v80, v41, v42, v43, v44, v45);
    v50 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v50 = 0;
    *(_QWORD *)(v50 + 8) = 0;
    *(_BYTE *)(v50 + 16) = -1;
    v56 = (((*(unsigned __int8 *)(v50 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v50 + 17) = 65;
    *(_BYTE *)(v50 + 19) = BYTE2(v56);
    *(_WORD *)(v50 + 20) &= 0xFC00u;
    v51 = *(_OWORD *)v55;
    v52 = *(_QWORD *)(v55 + 16);
  }
  else
  {
    v50 = *v47 + 24 * v49;
    v51 = v80;
    v52 = v81;
  }
  *(_QWORD *)(v50 + 16) = v52;
  *(_OWORD *)v50 = v51;
  ++*(_DWORD *)(a1 + 44);
  if (*((_QWORD *)&v32 + 1))
  {
    do
    {
      v53 = __ldaxr(*((unsigned int **)&v32 + 1));
      v54 = v53 - 1;
    }
    while (__stlxr(v54, *((unsigned int **)&v32 + 1)));
    if (!v54)
    {
      atomic_store(1u, *((unsigned int **)&v32 + 1));
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle(*((JSC::ExecutableMemoryHandle **)&v32 + 1), v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
    }
  }
}

void JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int i;
  int v56;
  char v57;
  int *v58;
  int *v59;
  int v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  pthread_key_t *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  char v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  char v119;
  __int16 v120;
  char v121;
  uint64_t v122[3];
  _QWORD v123[4];
  _QWORD v124[2];
  _QWORD v125[2];
  WTF *v126;
  uint64_t v127;
  _BYTE v128[31];
  char v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE v135[128];
  unsigned int v136;
  char v137;
  int v138;
  int v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  _BYTE v143[32];
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _BYTE *v147;
  _BYTE v148[128];
  unsigned int v149;
  int v150;
  int v151;
  char v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _BYTE *v156;
  char v157;
  uint64_t v158;
  int v159;
  _BYTE *v160;
  char v161;
  uint64_t v162;
  int v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  v143[0] = 0;
  v143[24] = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0x8000000080000000;
  v147 = v148;
  v149 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v131 = v123;
    v126 = (WTF *)&v131;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v126, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v149;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v149 < v16)
    {
      if (v147 && v147 != v148)
      {
        WTF::fastFree((unint64_t)v147, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v147 = (_BYTE *)v14;
      v149 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v149;
    }
  }
  v17 = 0;
  v152 = 1;
  v150 = 0;
  v151 = 0;
  v153 = 0u;
  v154 = 0u;
  v155 = 0u;
  v156 = v143;
  v157 = 16;
  v158 = 0;
  v159 = 0x10000;
  v160 = v143;
  v161 = 17;
  v162 = 0;
  v163 = 0x20000;
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v125[1] = &v126;
  v126 = (WTF *)v128;
  v127 = 2;
  v124[1] = v143;
  v125[0] = v143;
  v124[0] = v125;
  v123[0] = v143;
  v123[1] = v125;
  v123[2] = &v126;
  v123[3] = v124;
  v131 = &v133;
  v132 = 2;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v150;
  }
  *(_DWORD *)&v147[v17] = -1203765183;
  v150 += 4;
  v122[0] = (uint64_t)v143;
  v122[1] = (uint64_t)v123;
  v122[2] = (uint64_t)&v131;
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 0, v7, v8, v9, v10, v11, v12);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 1u, v18, v19, v20, v21, v22, v23);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 2u, v24, v25, v26, v27, v28, v29);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 7u, v30, v31, v32, v33, v34, v35);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 6u, v36, v37, v38, v39, v40, v41);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 8u, v42, v43, v44, v45, v46, v47);
  for (i = v150; i < SHIDWORD(v146); v150 = i)
  {
    if (i + 4 > v149)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
      i = v150;
    }
    *(_DWORD *)&v147[i] = -721215457;
    i = v150 + 4;
  }
  v56 = i;
  if (i + 4 > v149)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
    v56 = v150;
  }
  *(_DWORD *)&v147[v56] = 335544320;
  v150 += 4;
  if (v164)
    v57 = 69;
  else
    v57 = 65;
  v117 = i;
  v118 = 0;
  v119 = v57;
  v120 = 15;
  v121 = -1;
  if (i != -1)
  {
    if (HIDWORD(v127) == (_DWORD)v127)
    {
      v58 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, (void *)(HIDWORD(v127) + 1), (unint64_t)&v117, v50, v51, v52, v53, v54);
      v60 = *v58;
      v59 = v58 + 1;
      v61 = (char *)v126 + 12 * HIDWORD(v127);
      *(_DWORD *)v61 = v60;
    }
    else
    {
      v59 = &v118;
      v61 = (char *)v126 + 12 * HIDWORD(v127);
      *(_DWORD *)v61 = i;
    }
    *(_QWORD *)(v61 + 4) = *(_QWORD *)v59;
    ++HIDWORD(v127);
  }
  if (!HIDWORD(v132))
  {
LABEL_28:
    v65 = (unint64_t)v131;
    if (&v133 != v131 && v131 != 0)
    {
      v131 = 0;
      LODWORD(v132) = 0;
      WTF::fastFree(v65, v48, v49, v50, v51, v52, v53, v54);
    }
    v67 = v150;
    if (v150 + 4 > v149)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
      v67 = v150;
    }
    *(_DWORD *)&v147[v67] = -698416192;
    v150 += 4;
    JSC::JITThunks::ctiStub(*(_QWORD *)(a1 + 90440), a1, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::slow_op_resolve_scopeGenerator, v50, v51, v52, v53, v54, &v131);
    if (HIDWORD(v127))
    {
      v75 = (uint64_t)v131;
      v76 = (unsigned int *)v126;
      v77 = 12 * HIDWORD(v127);
      do
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v76, v75, (uint64_t)v143, v70, v71, v72, v73, v74);
        v76 += 3;
        v77 -= 12;
      }
      while (v77);
    }
    v78 = (unsigned int *)v132;
    v132 = 0;
    if (v78)
    {
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        atomic_store(1u, v78);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v78, v68, v69, v70, v71, v72, v73, v74);
        WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
      }
    }
    v131 = 0;
    v132 = 0;
    v133 = -1;
    v134 = v135;
    v136 = 128;
    v81 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v81 != -1)
    {
      v122[0] = (uint64_t)&v129;
      v130 = v122;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v130, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v82 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v90 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v90)
    {
      v90 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v90, v82);
    }
    v91 = *(_QWORD *)v90;
    if (*(_QWORD *)v90 != v90 + 8)
    {
      v92 = *(_DWORD *)(v90 + 136);
      if (v136 < v92)
      {
        if (v134 && v134 != v135)
        {
          WTF::fastFree((unint64_t)v134, v83, v84, v85, v86, v87, v88, v89);
          v91 = *(_QWORD *)v90;
          v92 = *(_DWORD *)(v90 + 136);
        }
        v134 = (_BYTE *)v91;
        v136 = v92;
        *(_QWORD *)v90 = v90 + 8;
        *(_DWORD *)(v90 + 136) = 128;
      }
    }
    v93 = 1;
    v137 = 1;
    v138 = 0;
    v139 = 13;
    v140 = 0u;
    v141 = 0u;
    v142 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)&v131, (uint64_t)v143, 1, v85, v86, v87, v88, v89);
    BYTE2(v138) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v131, "resolve_scope", 14, a2);
LABEL_55:
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v131, v94, v95, v96, v97, v98, v99, v100);
        v108 = v126;
        if (v128 != (_BYTE *)v126)
        {
          if (v126)
          {
            v126 = 0;
            LODWORD(v127) = 0;
            WTF::fastFree((unint64_t)v108, v101, v102, v103, v104, v105, v106, v107);
          }
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v143, v101, v102, v103, v104, v105, v106, v107);
        return;
      }
      v93 = HIBYTE(word_1ECF4C286) != 0;
    }
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v131, v93, "resolve_scope", 14, "Baseline: resolve_scope", a2);
    goto LABEL_55;
  }
  v62 = 0;
  v63 = 0;
  v64 = 12 * HIDWORD(v132);
  while (v63 < HIDWORD(v132))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v131 + v62), (uint64_t)v143, v49, v50, v51, v52, v53, v54);
    ++v63;
    v62 += 12;
    if (v64 == v62)
      goto LABEL_28;
  }
  __break(0xC471u);
}

void JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)2>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int i;
  int v56;
  char v57;
  int *v58;
  int *v59;
  int v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  pthread_key_t *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  char v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  char v119;
  __int16 v120;
  char v121;
  uint64_t v122[3];
  _QWORD v123[4];
  _QWORD v124[2];
  _QWORD v125[2];
  WTF *v126;
  uint64_t v127;
  _BYTE v128[31];
  char v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE v135[128];
  unsigned int v136;
  char v137;
  int v138;
  int v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  _BYTE v143[32];
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _BYTE *v147;
  _BYTE v148[128];
  unsigned int v149;
  int v150;
  int v151;
  char v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _BYTE *v156;
  char v157;
  uint64_t v158;
  int v159;
  _BYTE *v160;
  char v161;
  uint64_t v162;
  int v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  v143[0] = 0;
  v143[24] = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0x8000000080000000;
  v147 = v148;
  v149 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v131 = v123;
    v126 = (WTF *)&v131;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v126, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v149;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v149 < v16)
    {
      if (v147 && v147 != v148)
      {
        WTF::fastFree((unint64_t)v147, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v147 = (_BYTE *)v14;
      v149 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v149;
    }
  }
  v17 = 0;
  v152 = 1;
  v150 = 0;
  v151 = 0;
  v153 = 0u;
  v154 = 0u;
  v155 = 0u;
  v156 = v143;
  v157 = 16;
  v158 = 0;
  v159 = 0x10000;
  v160 = v143;
  v161 = 17;
  v162 = 0;
  v163 = 0x20000;
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v125[1] = &v126;
  v126 = (WTF *)v128;
  v127 = 2;
  v124[1] = v143;
  v125[0] = v143;
  v124[0] = v125;
  v123[0] = v143;
  v123[1] = v125;
  v123[2] = &v126;
  v123[3] = v124;
  v131 = &v133;
  v132 = 2;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v150;
  }
  *(_DWORD *)&v147[v17] = -1203765183;
  v150 += 4;
  v122[0] = (uint64_t)v143;
  v122[1] = (uint64_t)v123;
  v122[2] = (uint64_t)&v131;
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)2>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 2u, v7, v8, v9, v10, v11, v12);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)2>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 1u, v18, v19, v20, v21, v22, v23);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)2>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 0, v24, v25, v26, v27, v28, v29);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)2>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 7u, v30, v31, v32, v33, v34, v35);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)2>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 6u, v36, v37, v38, v39, v40, v41);
  JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)2>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v122, 8u, v42, v43, v44, v45, v46, v47);
  for (i = v150; i < SHIDWORD(v146); v150 = i)
  {
    if (i + 4 > v149)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
      i = v150;
    }
    *(_DWORD *)&v147[i] = -721215457;
    i = v150 + 4;
  }
  v56 = i;
  if (i + 4 > v149)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
    v56 = v150;
  }
  *(_DWORD *)&v147[v56] = 335544320;
  v150 += 4;
  if (v164)
    v57 = 69;
  else
    v57 = 65;
  v117 = i;
  v118 = 0;
  v119 = v57;
  v120 = 15;
  v121 = -1;
  if (i != -1)
  {
    if (HIDWORD(v127) == (_DWORD)v127)
    {
      v58 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, (void *)(HIDWORD(v127) + 1), (unint64_t)&v117, v50, v51, v52, v53, v54);
      v60 = *v58;
      v59 = v58 + 1;
      v61 = (char *)v126 + 12 * HIDWORD(v127);
      *(_DWORD *)v61 = v60;
    }
    else
    {
      v59 = &v118;
      v61 = (char *)v126 + 12 * HIDWORD(v127);
      *(_DWORD *)v61 = i;
    }
    *(_QWORD *)(v61 + 4) = *(_QWORD *)v59;
    ++HIDWORD(v127);
  }
  if (!HIDWORD(v132))
  {
LABEL_28:
    v65 = (unint64_t)v131;
    if (&v133 != v131 && v131 != 0)
    {
      v131 = 0;
      LODWORD(v132) = 0;
      WTF::fastFree(v65, v48, v49, v50, v51, v52, v53, v54);
    }
    v67 = v150;
    if (v150 + 4 > v149)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
      v67 = v150;
    }
    *(_DWORD *)&v147[v67] = -698416192;
    v150 += 4;
    JSC::JITThunks::ctiStub(*(_QWORD *)(a1 + 90440), a1, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::slow_op_resolve_scopeGenerator, v50, v51, v52, v53, v54, &v131);
    if (HIDWORD(v127))
    {
      v75 = (uint64_t)v131;
      v76 = (unsigned int *)v126;
      v77 = 12 * HIDWORD(v127);
      do
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v76, v75, (uint64_t)v143, v70, v71, v72, v73, v74);
        v76 += 3;
        v77 -= 12;
      }
      while (v77);
    }
    v78 = (unsigned int *)v132;
    v132 = 0;
    if (v78)
    {
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        atomic_store(1u, v78);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v78, v68, v69, v70, v71, v72, v73, v74);
        WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
      }
    }
    v131 = 0;
    v132 = 0;
    v133 = -1;
    v134 = v135;
    v136 = 128;
    v81 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v81 != -1)
    {
      v122[0] = (uint64_t)&v129;
      v130 = v122;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v130, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v82 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v90 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v90)
    {
      v90 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v90, v82);
    }
    v91 = *(_QWORD *)v90;
    if (*(_QWORD *)v90 != v90 + 8)
    {
      v92 = *(_DWORD *)(v90 + 136);
      if (v136 < v92)
      {
        if (v134 && v134 != v135)
        {
          WTF::fastFree((unint64_t)v134, v83, v84, v85, v86, v87, v88, v89);
          v91 = *(_QWORD *)v90;
          v92 = *(_DWORD *)(v90 + 136);
        }
        v134 = (_BYTE *)v91;
        v136 = v92;
        *(_QWORD *)v90 = v90 + 8;
        *(_DWORD *)(v90 + 136) = 128;
      }
    }
    v93 = 1;
    v137 = 1;
    v138 = 0;
    v139 = 13;
    v140 = 0u;
    v141 = 0u;
    v142 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)&v131, (uint64_t)v143, 1, v85, v86, v87, v88, v89);
    BYTE2(v138) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v131, "resolve_scope", 14, a2);
LABEL_55:
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v131, v94, v95, v96, v97, v98, v99, v100);
        v108 = v126;
        if (v128 != (_BYTE *)v126)
        {
          if (v126)
          {
            v126 = 0;
            LODWORD(v127) = 0;
            WTF::fastFree((unint64_t)v108, v101, v102, v103, v104, v105, v106, v107);
          }
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v143, v101, v102, v103, v104, v105, v106, v107);
        return;
      }
      v93 = HIBYTE(word_1ECF4C286) != 0;
    }
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v131, v93, "resolve_scope", 14, "Baseline: resolve_scope", a2);
    goto LABEL_55;
  }
  v62 = 0;
  v63 = 0;
  v64 = 12 * HIDWORD(v132);
  while (v63 < HIDWORD(v132))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v131 + v62), (uint64_t)v143, v49, v50, v51, v52, v53, v54);
    ++v63;
    v62 += 12;
    if (v64 == v62)
      goto LABEL_28;
  }
  __break(0xC471u);
}

uint64_t JSC::JIT::slow_op_resolve_scopeGenerator@<X0>(JSC::JIT *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  pthread_key_t *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  unsigned int v64;
  char v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char **v90;
  char *v91;
  _QWORD v92[3];
  WTF *v93;
  _BYTE v94[128];
  unsigned int v95;
  char v96;
  int v97;
  int v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  _DWORD v102[6];
  char v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  _BYTE v108[128];
  unsigned int v109;
  int v110;
  int v111;
  char v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _DWORD *v116;
  char v117;
  uint64_t v118;
  int v119;
  _DWORD *v120;
  char v121;
  uint64_t v122;
  int v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  LOBYTE(v102[0]) = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0x8000000080000000;
  v107 = v108;
  v109 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v91 = (char *)v92;
    v92[0] = &v90;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v91, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v109;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v109 < v17)
    {
      if (v107 && v107 != v108)
      {
        WTF::fastFree((unint64_t)v107, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v107 = (_BYTE *)v15;
      v109 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v109;
    }
  }
  v18 = 0;
  v112 = 1;
  v117 = 16;
  v119 = 0x10000;
  v121 = 17;
  v123 = 0x20000;
  v110 = 0;
  v111 = 0;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v116 = v102;
  v118 = 0;
  v120 = v102;
  v122 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v107, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v110;
  }
  *(_DWORD *)&v107[v18] = -1447068675;
  v19 = v110;
  v20 = v110 + 4;
  v110 += 4;
  if (v19 + 8 > v109)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v107, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v20 = v110;
  }
  *(_DWORD *)&v107[v20] = -1207811165;
  v21 = v110;
  v22 = v110 + 4;
  v110 += 4;
  if (v21 + 8 > v109)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v107, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v22 = v110;
  }
  *(_DWORD *)&v107[v22] = -129956958;
  v23 = v110;
  v24 = v110 + 4;
  v110 += 4;
  if (v23 + 8 > v109)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v107, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v24 = v110;
  }
  *(_DWORD *)&v107[v24] = -129990592;
  v25 = v110;
  v26 = v110 + 4;
  v110 += 4;
  if (v25 + 8 > v109)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v107, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v26 = v110;
  }
  *(_DWORD *)&v107[v26] = -129695679;
  v27 = v110;
  v28 = v110 + 4;
  v110 += 4;
  if (v27 + 8 > v109)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v107, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v28 = v110;
  }
  *(_DWORD *)&v107[v28] = -1962737631;
  v110 += 4;
  if (!v112)
  {
    __break(0xC471u);
    JUMPOUT(0x1987E53A8);
  }
  v116[52] &= ~v119;
  v29 = v117;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v102, (uint64_t)operationResolveScopeForBaseline, v117, v9, v10, v11, v12, v13);
  v111 = 0;
  v37 = v110;
  if (v110 + 4 > v109)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v107, v30, v31, v32, v33, v34, v35, v36);
    v37 = v110;
  }
  *(_DWORD *)&v107[v37] = (32 * (v29 & 0x1F)) | 0xD63F0000;
  v38 = v110;
  v39 = v110 + 4;
  v110 += 4;
  if (v38 + 8 > v109)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v107, v30, v31, v32, v33, v34, v35, v36);
    v39 = v110;
  }
  *(_DWORD *)&v107[v39] = -1463714819;
  v110 += 4;
  v40 = *((_QWORD *)this + 11305);
  v41 = *(_QWORD *)(v40 + 40);
  v42 = *(unsigned int **)(v40 + 48);
  if (v42)
  {
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
    JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)v102, v41, v31, v32, v33, v34, v35, v36);
    do
    {
      v51 = __ldaxr(v42);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v42));
    if (!v52)
    {
      atomic_store(1u, v42);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v42, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
    }
  }
  else
  {
    JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)v102, v41, v31, v32, v33, v34, v35, v36);
  }
  v92[0] = 0;
  v92[1] = 0;
  v92[2] = -1;
  v93 = (WTF *)v94;
  v95 = 128;
  v53 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v53 != -1)
  {
    v91 = &v89;
    v90 = &v91;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v90, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v54 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v62 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v62)
  {
    v62 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v62, v54);
  }
  v63 = *(WTF **)v62;
  if (*(_QWORD *)v62 != v62 + 8)
  {
    v64 = *(_DWORD *)(v62 + 136);
    if (v95 < v64)
    {
      if (v93 && v93 != (WTF *)v94)
      {
        WTF::fastFree((unint64_t)v93, v55, v56, v57, v58, v59, v60, v61);
        v63 = *(WTF **)v62;
        v64 = *(_DWORD *)(v62 + 136);
      }
      v93 = v63;
      v95 = v64;
      *(_QWORD *)v62 = v62 + 8;
      *(_DWORD *)(v62 + 136) = 128;
    }
  }
  v65 = 1;
  v96 = 1;
  v97 = 0;
  v98 = 13;
  v99 = 0u;
  v100 = 0u;
  v101 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v92, (uint64_t)v102, 1, v57, v58, v59, v60, v61);
  BYTE2(v97) = 1;
  if (byte_1ECF4C288)
    goto LABEL_49;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v65 = HIBYTE(word_1ECF4C286) != 0;
LABEL_49:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v92, v65, "slow_op_resolve_scope", 22, "Baseline: slow_op_resolve_scope", a2);
    goto LABEL_47;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v92, "slow_op_resolve_scope", 22, a2);
LABEL_47:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v92, v66, v67, v68, v69, v70, v71, v72);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v102, v73, v74, v75, v76, v77, v78, v79);
}

void JSC::JIT::emit_op_get_from_scope(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x8_t v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  _DWORD *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  JSC::ExecutableMemoryHandle *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int8x8_t v119;
  _QWORD *v120;
  JSC::ExecutableMemoryHandle *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  JSC::ExecutableMemoryHandle *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  JSC::ExecutableMemoryHandle *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  JSC::ExecutableMemoryHandle *v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(uint64_t *__return_ptr, uint64_t);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _DWORD *v188;
  int v189;
  _DWORD *v190;
  unint64_t v191;
  BOOL v192;
  char **v193;
  unsigned int v195;
  int v196;
  unsigned int v197;
  _DWORD *v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  _DWORD *v203;
  int v204;
  _DWORD *v205;
  unint64_t v206;
  BOOL v207;
  char **v208;
  unsigned int v210;
  int v211;
  unsigned int v212;
  _DWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _DWORD *v228;
  int v229;
  _DWORD *v230;
  _DWORD *v231;
  unint64_t v232;
  char **v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  unint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  JSC::ExecutableMemoryHandle *v254;
  int v255;
  JSC::ExecutableMemoryHandle *v256;
  int v257;
  JSC::ExecutableMemoryHandle *v258;
  int v259;
  JSC::ExecutableMemoryHandle *v260;
  int v261;
  JSC::ExecutableMemoryHandle *v262;
  int v263;
  JSC::ExecutableMemoryHandle *v264[2];
  uint64_t v265;

  v9 = *a2;
  if (v9 == 128)
  {
    v110 = *((__int16 *)a2 + 1);
    if (v110 <= 63)
      v11 = v110;
    else
      v11 = (v110 + 1073741760);
    v111 = *((__int16 *)a2 + 2);
    if (v111 <= 63)
      v13 = v111;
    else
      v13 = (v111 + 1073741760);
    v14 = *((unsigned __int16 *)a2 + 7);
    v15 = *((unsigned __int16 *)a2 + 8);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v13 = *(unsigned int *)(a2 + 6);
    v14 = *(_DWORD *)(a2 + 26);
    v15 = *(_DWORD *)(a2 + 30);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
    if (v12 <= 15)
      v13 = v12;
    else
      v13 = (v12 + 1073741808);
    v14 = a2[7];
    v15 = a2[8];
  }
  v16 = *(_QWORD *)(a1 + 800);
  v17 = *(_QWORD *)(v16 + 136);
  v18 = *(unsigned __int16 *)(v17 + 52);
  v19 = v18;
  if (!*(_WORD *)(v17 + 52))
    v19 = *(_DWORD *)(v17 + 200);
  v20 = *(_DWORD *)(((v17 + v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 24 * v15) & 0x3FF;
  if (v20 == 3)
  {
    if ((int)v13 < 0x40000000)
    {
      v21 = 29;
LABEL_15:
      JSC::MacroAssemblerARM64::load64(a1, v21 | (v13 << 35), 2, a4, a5, a6, a7, a8);
      goto LABEL_16;
    }
    v186 = *(_QWORD *)(v16 + 56);
    v187 = (v13 - 0x40000000);
    v188 = *(_DWORD **)(v186 + 120);
    if (!v188 || *v188 <= v187)
      goto LABEL_110;
    v189 = *((unsigned __int8 *)v188 + v187 + 4);
    if ((v189 - 1) < 2)
    {
LABEL_126:
      v198 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
      if (*v198 <= v187)
      {
        __break(0xC471u);
        JUMPOUT(0x1987E648CLL);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v198[2 * v187 + 2], 2, a4, a5, a6, a7, a8);
LABEL_16:
      v27 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
      if (*(_WORD *)v27)
        v28 = *(unsigned __int16 *)(v27 + 52);
      else
        v28 = *(_DWORD *)(v27 + 200);
      JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)((((v28 + 7) & 0xFFFFFFF8) + 24 * v15 + 16) >> 3) << 35) | 0x19, 5, v22, v23, v24, v25, v26);
      v33 = a1;
      v34 = 32;
LABEL_19:
      JSC::MacroAssemblerARM64::load64(v33, 0x300000502uLL, v34 & 0xFFFF0000FFFFFFFFLL | 0x200000000, 0, v29, v30, v31, v32);
      goto LABEL_101;
    }
    if (v189)
    {
      if (v189 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987E62ECLL);
      }
    }
    else
    {
LABEL_110:
      v190 = *(_DWORD **)(v186 + 112);
      if (*v190 <= v187)
      {
        __break(0xC471u);
        JUMPOUT(0x1987E64CCLL);
      }
      v191 = *(_QWORD *)&v190[2 * v187 + 2];
      if (v191)
        v192 = (v191 & 0xFFFE000000000002) == 0;
      else
        v192 = 0;
      if (!v192)
        goto LABEL_126;
      v193 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v191 & 0xFFFFFFFE) + 0x4C));
      if (v193 != &JSC::SymbolTable::s_info && v193 != &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_126;
    }
    v195 = *(_DWORD *)(a1 + 200);
    if (v195 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v195 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v195) = -129956958;
    v196 = *(_DWORD *)(a1 + 200);
    v197 = v196 + 4;
    *(_DWORD *)(a1 + 200) = v196 + 4;
    if ((v196 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v197 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v197) = -129367998;
    *(_DWORD *)(a1 + 200) += 4;
    v21 = 2;
    goto LABEL_15;
  }
  if (!*(_WORD *)v17)
    v18 = *(_DWORD *)(v17 + 200);
  v42 = *(unsigned int *)(a1 + 640);
  JSC::MacroAssemblerARM64::add64(a1, ((v18 + 7) & 0xFFFFFFF8) + 24 * v15, 25, 4, a5, a6, a7, a8);
  v50 = *(_DWORD *)(a1 + 200);
  if (v50 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v43, v44, v45, v46, v47, v48, v49);
    v50 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v50) = -1203765115;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::and32(a1, (JSC::ARM64LogicalImmediate *)0x3FF, 5, 5);
  v56 = 0;
  switch(v20)
  {
    case 0:
      JSC::MacroAssemblerARM64::branchTest32(a1, 1, 5, 5, v52, v53, v54, v55, (uint64_t)&v261);
      v65 = (_QWORD *)(a1 + 648);
      v66 = *(_DWORD *)(a1 + 640);
      LODWORD(v264[0]) = v261;
      *(JSC::ExecutableMemoryHandle **)((char *)v264 + 4) = v262;
      HIDWORD(v264[1]) = v66;
      v67 = *(unsigned int *)(a1 + 660);
      if ((_DWORD)v67 == *(_DWORD *)(a1 + 656))
      {
        v218 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v67 + 1, (unint64_t)v264);
        v219 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
        *(_DWORD *)v219 = *(_DWORD *)v218;
        *(_QWORD *)(v219 + 4) = *(_QWORD *)(v218 + 4);
        v70 = (_DWORD *)(v219 + 12);
        v68 = (_DWORD *)(v218 + 12);
      }
      else
      {
        v68 = (_DWORD *)&v264[1] + 1;
        v69 = *v65 + 16 * v67;
        *(_DWORD *)v69 = v261;
        *(JSC::ExecutableMemoryHandle **)(v69 + 4) = *(JSC::ExecutableMemoryHandle **)((char *)v264 + 4);
        v70 = (_DWORD *)(v69 + 12);
      }
      *v70 = *v68;
      ++*(_DWORD *)(a1 + 660);
      v71 = *(_DWORD *)(a1 + 200);
      if (v71 + 4 > *(_DWORD *)(a1 + 192))
      {
        v64 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v57, v58, v59, v60, v61, v62, v63).n128_u64[0];
        v71 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v71) = -129990523;
      *(_DWORD *)(a1 + 200) += 4;
      JSC::MacroAssemblerARM64::branchTest64(a1, 0, 5, 0xFFFFFFFFLL, v60, v61, v62, v63, (uint64_t)&v259, v64);
      v76 = *(_DWORD *)(a1 + 640);
      LODWORD(v264[0]) = v259;
      *(JSC::ExecutableMemoryHandle **)((char *)v264 + 4) = v260;
      HIDWORD(v264[1]) = v76;
      v77 = *(unsigned int *)(a1 + 660);
      if ((_DWORD)v77 == *(_DWORD *)(a1 + 656))
      {
        v220 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v77 + 1, (unint64_t)v264);
        v221 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
        *(_DWORD *)v221 = *(_DWORD *)v220;
        *(_QWORD *)(v221 + 4) = *(_QWORD *)(v220 + 4);
        v80 = (_DWORD *)(v221 + 12);
        v78 = (_DWORD *)(v220 + 12);
      }
      else
      {
        v78 = (_DWORD *)&v264[1] + 1;
        v79 = *v65 + 16 * v77;
        *(_DWORD *)v79 = v259;
        *(JSC::ExecutableMemoryHandle **)(v79 + 4) = *(JSC::ExecutableMemoryHandle **)((char *)v264 + 4);
        v80 = (_DWORD *)(v79 + 12);
      }
      *v80 = *v78;
      ++*(_DWORD *)(a1 + 660);
      JSC::MacroAssemblerARM64::urshift64((_DWORD *)a1, 5, 4, 5, v72, v73, v74, v75);
      if ((int)v13 < 0x40000000)
      {
        v88 = 29;
LABEL_33:
        JSC::MacroAssemblerARM64::load64(a1, v88 | (v13 << 35), 2, v83, v84, v85, v86, v87);
LABEL_34:
        if (!*(_BYTE *)(a1 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x1987E63FCLL);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
        v92 = *(_BYTE *)(a1 + 304) & 0x1F | 0xB8400040;
        v93 = *(_DWORD *)(a1 + 200);
        if (v93 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v89, v90, v91, v29, v30, v31, v32);
          v93 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v93) = v92;
        v94 = *(_DWORD *)(a1 + 200);
        v95 = v94 + 4;
        *(_DWORD *)(a1 + 200) = v94 + 4;
        if ((v94 + 8) > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v89, v90, v91, v29, v30, v31, v32);
          v95 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v95) = 1795490367;
        v96 = *(_DWORD *)(a1 + 200) + 4;
        *(_DWORD *)(a1 + 200) = v96;
        if (*(_BYTE *)(a1 + 328))
        {
          while ((signed int)v96 < *(_DWORD *)(a1 + 52))
          {
            if (v96 + 4 > *(_DWORD *)(a1 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v89, v90, v91, v29, v30, v31, v32);
              v96 = *(_DWORD *)(a1 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 56) + v96) = -721215457;
            v96 = *(_DWORD *)(a1 + 200) + 4;
            *(_DWORD *)(a1 + 200) = v96;
          }
          *(_DWORD *)(a1 + 208) = 0;
        }
        if (v96 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v89, v90, v91, v29, v30, v31, v32);
          v96 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v96) = 1409286145;
        v97 = *(_DWORD *)(a1 + 200);
        v98 = v97 + 4;
        *(_DWORD *)(a1 + 200) = v97 + 4;
        v99 = v97 + 8;
        v100 = v97 + 4;
        if (v99 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v89, v90, v91, v29, v30, v31, v32);
          v100 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v100) = -721215457;
        *(_DWORD *)(a1 + 200) += 4;
        v101 = (JSC::ExecutableMemoryHandle *)0xFF00018600000000;
        if (!*(_BYTE *)(a1 + 328))
          v101 = (JSC::ExecutableMemoryHandle *)0xFF00018200000000;
        v102 = *(_DWORD *)(a1 + 640);
        LODWORD(v264[0]) = v98;
        *(JSC::ExecutableMemoryHandle **)((char *)v264 + 4) = v101;
        HIDWORD(v264[1]) = v102;
        v103 = *(unsigned int *)(a1 + 660);
        if ((_DWORD)v103 == *(_DWORD *)(a1 + 656))
        {
          v224 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v103 + 1, (unint64_t)v264);
          v225 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
          *(_DWORD *)v225 = *(_DWORD *)v224;
          *(_QWORD *)(v225 + 4) = *(_QWORD *)(v224 + 4);
          *(_DWORD *)(v225 + 12) = *(_DWORD *)(v224 + 12);
        }
        else
        {
          v104 = *v65 + 16 * v103;
          *(_DWORD *)v104 = v98;
          *(_QWORD *)(v104 + 4) = v101;
          *(_DWORD *)(v104 + 12) = v102;
        }
        ++*(_DWORD *)(a1 + 660);
        v105 = *(_DWORD *)(a1 + 200);
        if (v105 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v89, v90, v91, v29, v30, v31, v32);
          v105 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v105) = -129957755;
        v106 = *(_DWORD *)(a1 + 200);
        v107 = v106 + 4;
        *(_DWORD *)(a1 + 200) = v106 + 4;
        if ((v106 + 8) > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v89, v90, v91, v29, v30, v31, v32);
          v107 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v107) = -129990590;
        v108 = *(_DWORD *)(a1 + 200);
        v109 = v108 + 4;
        *(_DWORD *)(a1 + 200) = v108 + 4;
        if ((v108 + 8) > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v89, v90, v91, v29, v30, v31, v32);
          v109 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v109) = -888863771;
        *(_DWORD *)(a1 + 200) += 4;
        v33 = a1;
        v34 = 496;
        goto LABEL_19;
      }
      v226 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
      v227 = (v13 - 0x40000000);
      v228 = *(_DWORD **)(v226 + 120);
      if (!v228 || *v228 <= v227)
        goto LABEL_164;
      v229 = *((unsigned __int8 *)v228 + v227 + 4);
      if ((v229 - 1) < 2)
        goto LABEL_161;
      if (v229)
      {
        if (v229 != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x1987E638CLL);
        }
      }
      else
      {
LABEL_164:
        v231 = *(_DWORD **)(v226 + 112);
        if (*v231 <= v227)
        {
          __break(0xC471u);
          JUMPOUT(0x1987E654CLL);
        }
        v232 = *(_QWORD *)&v231[2 * v227 + 2];
        if (!v232
          || (v232 & 0xFFFE000000000002) != 0
          || (v233 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v232 & 0xFFFFFFFE) + 0x4C)),
              v233 != &JSC::SymbolTable::s_info)
          && v233 != &JSC::JSTemplateObjectDescriptor::s_info)
        {
LABEL_161:
          v230 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
          if (*v230 <= v227)
          {
            __break(0xC471u);
            JUMPOUT(0x1987E650CLL);
          }
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v230[2 * v227 + 2], 2, v83, v84, v85, v86, v87);
          goto LABEL_34;
        }
      }
      v234 = *(_DWORD *)(a1 + 200);
      if (v234 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v81, v82, v83, v84, v85, v86, v87);
        v234 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v234) = -129956958;
      v235 = *(_DWORD *)(a1 + 200);
      v236 = v235 + 4;
      *(_DWORD *)(a1 + 200) = v235 + 4;
      if ((v235 + 8) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v81, v82, v83, v84, v85, v86, v87);
        v236 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v236) = -129367998;
      *(_DWORD *)(a1 + 200) += 4;
      v88 = 2;
      goto LABEL_33;
    case 1:
      JSC::MacroAssemblerARM64::branch32(a1, 1, 5, 1, v52, v53, v54, v55, (uint64_t)&v257);
      v154 = (_QWORD *)(a1 + 648);
      v155 = v258;
      v156 = *(_DWORD *)(a1 + 640);
      LODWORD(v264[0]) = v257;
      *(JSC::ExecutableMemoryHandle **)((char *)v264 + 4) = v258;
      HIDWORD(v264[1]) = v156;
      v157 = *(unsigned int *)(a1 + 660);
      if ((_DWORD)v157 == *(_DWORD *)(a1 + 656))
      {
        v222 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v154, v157 + 1, (unint64_t)v264);
        v223 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
        *(_DWORD *)v223 = *(_DWORD *)v222;
        *(_QWORD *)(v223 + 4) = *(_QWORD *)(v222 + 4);
        *(_DWORD *)(v223 + 12) = *(_DWORD *)(v222 + 12);
      }
      else
      {
        v158 = *v154 + 16 * v157;
        *(_DWORD *)v158 = v257;
        *(_QWORD *)(v158 + 4) = v155;
        *(_DWORD *)(v158 + 12) = v156;
      }
      ++*(_DWORD *)(a1 + 660);
      v159 = *(_DWORD *)(a1 + 200);
      if (v159 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v35, v36, v37, v38, v39, v40, v41);
        v159 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v159) = -129957755;
      v160 = *(_DWORD *)(a1 + 200);
      v161 = v160 + 4;
      *(_DWORD *)(a1 + 200) = v160 + 4;
      if ((v160 + 8) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v35, v36, v37, v38, v39, v40, v41);
        v161 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v161) = -130023264;
      *(_DWORD *)(a1 + 200) += 4;
      goto LABEL_101;
    case 2:
      JSC::MacroAssemblerARM64::branch32(a1, 1, 5, 2, v52, v53, v54, v55, (uint64_t)&v255);
      v120 = (_QWORD *)(a1 + 648);
      v121 = v256;
      v122 = *(_DWORD *)(a1 + 640);
      LODWORD(v264[0]) = v255;
      *(JSC::ExecutableMemoryHandle **)((char *)v264 + 4) = v256;
      HIDWORD(v264[1]) = v122;
      v123 = *(unsigned int *)(a1 + 660);
      if ((_DWORD)v123 == *(_DWORD *)(a1 + 656))
      {
        v214 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v123 + 1, (unint64_t)v264);
        v215 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
        *(_DWORD *)v215 = *(_DWORD *)v214;
        *(_QWORD *)(v215 + 4) = *(_QWORD *)(v214 + 4);
        *(_DWORD *)(v215 + 12) = *(_DWORD *)(v214 + 12);
      }
      else
      {
        v124 = *v120 + 16 * v123;
        *(_DWORD *)v124 = v255;
        *(_QWORD *)(v124 + 4) = v121;
        *(_DWORD *)(v124 + 12) = v122;
      }
      ++*(_DWORD *)(a1 + 660);
      v125 = *(_DWORD *)(a1 + 200);
      if (v125 + 4 > *(_DWORD *)(a1 + 192))
      {
        v119 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v112, v113, v114, v115, v116, v117, v118).n128_u64[0];
        v125 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v125) = -129957755;
      v126 = *(_DWORD *)(a1 + 200);
      v127 = v126 + 4;
      *(_DWORD *)(a1 + 200) = v126 + 4;
      if ((v126 + 8) > *(_DWORD *)(a1 + 192))
      {
        v119 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v112, v113, v114, v115, v116, v117, v118).n128_u64[0];
        v127 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v127) = -130023264;
      *(_DWORD *)(a1 + 200) += 4;
      JSC::MacroAssemblerARM64::branchTest64(a1, 0, 0, 0xFFFFFFFFLL, v115, v116, v117, v118, (uint64_t)&v253, v119);
      v128 = v254;
      v129 = *(_DWORD *)(a1 + 640);
      LODWORD(v264[0]) = v253;
      *(JSC::ExecutableMemoryHandle **)((char *)v264 + 4) = v254;
      HIDWORD(v264[1]) = v129;
      v130 = *(unsigned int *)(a1 + 660);
      if ((_DWORD)v130 == *(_DWORD *)(a1 + 656))
      {
        v216 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v130 + 1, (unint64_t)v264);
        v217 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
        *(_DWORD *)v217 = *(_DWORD *)v216;
        *(_QWORD *)(v217 + 4) = *(_QWORD *)(v216 + 4);
        *(_DWORD *)(v217 + 12) = *(_DWORD *)(v216 + 12);
      }
      else
      {
        v131 = *v120 + 16 * v130;
        *(_DWORD *)v131 = v253;
        *(_QWORD *)(v131 + 4) = v128;
        *(_DWORD *)(v131 + 12) = v129;
      }
      ++*(_DWORD *)(a1 + 660);
      goto LABEL_101;
    case 7:
      v162 = *(_QWORD *)(a1 + 352);
      v163 = *(_QWORD *)(v162 + 90440);
      v164 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)7>;
      goto LABEL_89;
    case 8:
      v162 = *(_QWORD *)(a1 + 352);
      v163 = *(_QWORD *)(v162 + 90440);
      v164 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)8>;
LABEL_89:
      JSC::JITThunks::ctiStub(v163, v162, v164, v51, v52, v53, v54, v55, v264);
      v140 = v264[0];
      v139 = (unsigned int *)v264[1];
      goto LABEL_90;
    case 9:
      JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)9>, v51, v52, v53, v54, v55, v264);
      v56 = (unsigned int *)v264[1];
      goto LABEL_72;
    default:
LABEL_72:
      JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)1>, v51, v52, v53, v54, v55, v264);
      v140 = v264[0];
      v139 = (unsigned int *)v264[1];
      v264[1] = 0;
      if (v56)
      {
        do
        {
          v141 = __ldaxr(v56);
          v142 = v141 - 1;
        }
        while (__stlxr(v142, v56));
        if (!v142)
        {
          atomic_store(1u, v56);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v56, v132, v133, v134, v135, v136, v137, v138);
          WTF::fastFree(v245, v246, v247, v248, v249, v250, v251, v252);
        }
        v143 = (unsigned int *)v264[1];
        v264[1] = 0;
        if (v143)
        {
          do
          {
            v144 = __ldaxr(v143);
            v145 = v144 - 1;
          }
          while (__stlxr(v145, v143));
          if (!v145)
          {
            atomic_store(1u, v143);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v143, v132, v133, v134, v135, v136, v137, v138);
            WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
          }
        }
      }
LABEL_90:
      if ((int)v13 < 0x40000000)
      {
        v165 = 29;
LABEL_92:
        JSC::MacroAssemblerARM64::load64(a1, v165 | (v13 << 35), 2, v134, v135, v136, v137, v138);
        goto LABEL_93;
      }
      v201 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
      v202 = (v13 - 0x40000000);
      v203 = *(_DWORD **)(v201 + 120);
      if (!v203 || *v203 <= v202)
        goto LABEL_133;
      v204 = *((unsigned __int8 *)v203 + v202 + 4);
      if ((v204 - 1) < 2)
        goto LABEL_149;
      if (v204)
      {
        if (v204 != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x1987E6324);
        }
        goto LABEL_144;
      }
LABEL_133:
      v205 = *(_DWORD **)(v201 + 112);
      if (*v205 <= v202)
      {
        __break(0xC471u);
        JUMPOUT(0x1987E64ECLL);
      }
      v206 = *(_QWORD *)&v205[2 * v202 + 2];
      if (v206)
        v207 = (v206 & 0xFFFE000000000002) == 0;
      else
        v207 = 0;
      if (v207)
      {
        v208 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v206 & 0xFFFFFFFE) + 0x4C));
        if (v208 == &JSC::SymbolTable::s_info || v208 == &JSC::JSTemplateObjectDescriptor::s_info)
        {
LABEL_144:
          v210 = *(_DWORD *)(a1 + 200);
          if (v210 + 4 > *(_DWORD *)(a1 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v132, v133, v134, v135, v136, v137, v138);
            v210 = *(_DWORD *)(a1 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + v210) = -129956958;
          v211 = *(_DWORD *)(a1 + 200);
          v212 = v211 + 4;
          *(_DWORD *)(a1 + 200) = v211 + 4;
          if ((v211 + 8) > *(_DWORD *)(a1 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v132, v133, v134, v135, v136, v137, v138);
            v212 = *(_DWORD *)(a1 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + v212) = -129367998;
          *(_DWORD *)(a1 + 200) += 4;
          v165 = 2;
          goto LABEL_92;
        }
      }
LABEL_149:
      v213 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
      if (*v213 <= v202)
      {
        __break(0xC471u);
        JUMPOUT(0x1987E64ACLL);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v213[2 * v202 + 2], 2, v134, v135, v136, v137, v138);
LABEL_93:
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v42 >> 2), 3, v166, v167, v168, v169, v170);
      *(_DWORD *)(a1 + 208) = 0;
      v171 = *(_DWORD *)(a1 + 200);
      if (v171 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v35, v36, v37, v38, v39, v40, v41);
        v171 = *(_DWORD *)(a1 + 200);
      }
      v172 = (_QWORD *)(a1 + 32);
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v171) = -1811939328;
      v173 = (*(_DWORD *)(a1 + 200) + 4);
      *(_DWORD *)(a1 + 200) = v173;
      LOBYTE(v265) = -1;
      BYTE3(v265) = 15;
      *(_WORD *)((char *)&v265 + 1) = 65;
      v264[0] = (JSC::ExecutableMemoryHandle *)(v173 - 4);
      v264[1] = v140;
      WORD2(v265) = 384;
      v174 = *(unsigned int *)(a1 + 44);
      if ((_DWORD)v174 == *(_DWORD *)(a1 + 40))
      {
        v199 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v172, v174 + 1, (unint64_t)v264, v37, v38, v39, v40, v41);
        v175 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
        *(_QWORD *)v175 = 0;
        *(_QWORD *)(v175 + 8) = 0;
        *(_BYTE *)(v175 + 16) = -1;
        v200 = (((*(unsigned __int8 *)(v175 + 19) >> 4) & 0xF) << 20) | 0xF0041;
        *(_WORD *)(v175 + 17) = 65;
        *(_BYTE *)(v175 + 19) = BYTE2(v200);
        *(_WORD *)(v175 + 20) &= 0xFC00u;
        v176 = *(_OWORD *)v199;
        v177 = *(_QWORD *)(v199 + 16);
      }
      else
      {
        v175 = *v172 + 24 * v174;
        v176 = *(_OWORD *)v264;
        v177 = v265;
      }
      *(_QWORD *)(v175 + 16) = v177;
      *(_OWORD *)v175 = v176;
      ++*(_DWORD *)(a1 + 44);
      if (v139)
      {
        do
        {
          v178 = __ldaxr(v139);
          v179 = v178 - 1;
        }
        while (__stlxr(v179, v139));
        if (!v179)
        {
          atomic_store(1u, v139);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v139, v35, v36, v37, v38, v39, v40, v41);
          WTF::fastFree(v237, v238, v239, v240, v241, v242, v243, v244);
        }
      }
LABEL_101:
      v180 = *(_DWORD *)(a1 + 200);
      v263 = v180;
      if (v180 < *(_DWORD *)(a1 + 52))
      {
        do
        {
          if ((v180 + 4) > *(_DWORD *)(a1 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v35, v36, v37, v38, v39, v40, v41);
            v180 = *(_DWORD *)(a1 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + v180) = -721215457;
          v180 = *(_DWORD *)(a1 + 200) + 4;
          *(_DWORD *)(a1 + 200) = v180;
        }
        while (v180 < *(_DWORD *)(a1 + 52));
        v263 = v180;
      }
      *(_DWORD *)(a1 + 208) = 0;
      WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>((uint64_t *)(a1 + 408), (int *)(a1 + 640), &v263, (uint64_t)v264);
      if (*(_BYTE *)(a1 + 793))
        JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)~v14 << 36) | 0x19, v181, v182, v183, v184, v185);
      JSC::MacroAssemblerARM64::store64(a1, 0, (v11 << 35) | 0x1D, v181, v182, v183, v184, v185);
      return;
  }
}

uint64_t JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)9>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  _DWORD *v32;
  _QWORD *v33;
  int v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  pthread_key_t *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  unsigned int v69;
  char v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF *v95;
  uint64_t v96;
  _BYTE v97[31];
  char v98;
  char **v99;
  char *v100;
  char **v101;
  JSC::ExecutableMemoryHandle *v102;
  uint64_t v103;
  WTF *v104;
  _BYTE v105[128];
  unsigned int v106;
  char v107;
  int v108;
  int v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  _BYTE v113[32];
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  WTF *v117;
  _BYTE v118[128];
  unsigned int v119;
  unsigned int v120;
  int v121;
  char v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  _BYTE *v126;
  char v127;
  uint64_t v128;
  int v129;
  _BYTE *v130;
  char v131;
  uint64_t v132;
  int v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v113[0] = 0;
  v113[24] = 0;
  v114 = 0;
  v115 = 0;
  v116 = 0x8000000080000000;
  v117 = (WTF *)v118;
  v119 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v101 = &v100;
    v95 = (WTF *)&v101;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v95, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(WTF **)v13;
  v15 = v119;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v119 < v16)
    {
      if (v117 && v117 != (WTF *)v118)
      {
        WTF::fastFree((unint64_t)v117, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(WTF **)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v117 = v14;
      v119 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v119;
    }
  }
  v17 = 0;
  v122 = 1;
  v120 = 0;
  v121 = 0;
  v123 = 0u;
  v124 = 0u;
  v125 = 0u;
  v127 = 16;
  v129 = 0x10000;
  v126 = v113;
  v128 = 0;
  v130 = v113;
  v131 = 17;
  v132 = 0;
  v133 = 0x20000;
  v134 = 0;
  v136 = 0;
  v135 = 0;
  v95 = (WTF *)v97;
  v96 = 2;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v117, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v120;
  }
  *(_DWORD *)((char *)v117 + v17) = -129989819;
  v18 = v120;
  v19 = v120 + 4;
  v120 += 4;
  if (v18 + 8 > v119)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v117, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v19 = v120;
  }
  *(_DWORD *)((char *)v117 + v19) = -112982875;
  v20 = v120;
  v21 = v120 + 4;
  v120 += 4;
  if (!v122)
  {
    __break(0xC471u);
    JUMPOUT(0x1987E6BB8);
  }
  *((_DWORD *)v130 + 52) &= ~v133;
  v22 = v131 & 0x1F | 0x384040A0;
  if (v20 + 8 > v119)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v117, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v21 = v120;
  }
  *(_DWORD *)((char *)v117 + v21) = v22;
  v120 += 4;
  JSC::MacroAssemblerARM64::branch32((uint64_t)v113, 0, 17, 2, v9, v10, v11, v12, (uint64_t)&v101);
  v30 = (int)v101;
  if ((_DWORD)v101 != -1)
  {
    v31 = HIDWORD(v96);
    if (HIDWORD(v96) == (_DWORD)v96)
    {
      v32 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v95, (void *)(HIDWORD(v96) + 1), (unint64_t)&v101, v25, v26, v27, v28, v29);
      v34 = *v32;
      v33 = v32 + 1;
      v30 = v34;
      v31 = HIDWORD(v96);
    }
    else
    {
      v33 = (char ***)((char *)&v101 + 4);
    }
    v35 = (char *)v95 + 12 * v31;
    *(_DWORD *)v35 = v30;
    *(_QWORD *)(v35 + 4) = *v33;
    ++HIDWORD(v96);
  }
  v36 = v120;
  if (v120 + 4 > v119)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v117, v23, v24, v25, v26, v27, v28, v29);
    v36 = v120;
  }
  *(_DWORD *)((char *)v117 + v36) = -129957755;
  v120 += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)v113, 0x300000502uLL, 0x200000020uLL, 0, v26, v27, v28, v29);
  v44 = v120;
  if (v120 + 4 > v119)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v117, v37, v38, v39, v40, v41, v42, v43);
    v44 = v120;
  }
  *(_DWORD *)((char *)v117 + v44) = -698416192;
  v120 += 4;
  JSC::JITThunks::ctiStub(*(_QWORD *)(a1 + 90440), a1, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::slow_op_get_from_scopeGenerator, v39, v40, v41, v42, v43, &v101);
  if (HIDWORD(v96))
  {
    v52 = (uint64_t)v101;
    v53 = (unsigned int *)v95;
    v54 = 12 * HIDWORD(v96);
    do
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v53, v52, (uint64_t)v113, v47, v48, v49, v50, v51);
      v53 += 3;
      v54 -= 12;
    }
    while (v54);
  }
  v55 = (unsigned int *)v102;
  v102 = 0;
  if (v55)
  {
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v55);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v55, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
  }
  v101 = 0;
  v102 = 0;
  v103 = -1;
  v104 = (WTF *)v105;
  v106 = 128;
  v58 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v58 != -1)
  {
    v100 = &v98;
    v99 = &v100;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v99, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v59 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v67 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v67)
  {
    v67 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v67, v59);
  }
  v68 = *(WTF **)v67;
  if (*(_QWORD *)v67 != v67 + 8)
  {
    v69 = *(_DWORD *)(v67 + 136);
    if (v106 < v69)
    {
      if (v104 && v104 != (WTF *)v105)
      {
        WTF::fastFree((unint64_t)v104, v60, v61, v62, v63, v64, v65, v66);
        v68 = *(WTF **)v67;
        v69 = *(_DWORD *)(v67 + 136);
      }
      v104 = v68;
      v106 = v69;
      *(_QWORD *)v67 = v67 + 8;
      *(_DWORD *)(v67 + 136) = 128;
    }
  }
  v70 = 1;
  v107 = 1;
  v108 = 0;
  v109 = 13;
  v110 = 0u;
  v111 = 0u;
  v112 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v101, (uint64_t)v113, 1, v62, v63, v64, v65, v66);
  BYTE2(v108) = 1;
  if (byte_1ECF4C288)
    goto LABEL_52;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v70 = HIBYTE(word_1ECF4C286) != 0;
LABEL_52:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v101, v70, "get_from_scope", 15, "Baseline: get_from_scope", a2);
    goto LABEL_47;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v101, "get_from_scope", 15, a2);
LABEL_47:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v101, v71, v72, v73, v74, v75, v76, v77);
  v85 = v95;
  if (v97 != (_BYTE *)v95 && v95)
  {
    v95 = 0;
    LODWORD(v96) = 0;
    WTF::fastFree((unint64_t)v85, v78, v79, v80, v81, v82, v83, v84);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v113, v78, v79, v80, v81, v82, v83, v84);
}

void JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int i;
  int v62;
  char v63;
  int *v64;
  int *v65;
  int v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unint64_t v87;
  pthread_key_t *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unsigned int v98;
  char v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  char v125;
  __int16 v126;
  char v127;
  uint64_t v128[3];
  _QWORD v129[3];
  _QWORD v130[2];
  WTF *v131;
  uint64_t v132;
  _BYTE v133[31];
  char v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  _BYTE v140[128];
  unsigned int v141;
  char v142;
  int v143;
  int v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  _BYTE v148[32];
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _BYTE *v152;
  _BYTE v153[128];
  unsigned int v154;
  int v155;
  int v156;
  char v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  _BYTE *v161;
  char v162;
  uint64_t v163;
  int v164;
  _BYTE *v165;
  char v166;
  uint64_t v167;
  int v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v148[0] = 0;
  v148[24] = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0x8000000080000000;
  v152 = v153;
  v154 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v136 = v129;
    v131 = (WTF *)&v136;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v131, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v154;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v154 < v16)
    {
      if (v152 && v152 != v153)
      {
        WTF::fastFree((unint64_t)v152, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v152 = (_BYTE *)v14;
      v154 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v154;
    }
  }
  v17 = 0;
  v157 = 1;
  v155 = 0;
  v156 = 0;
  v158 = 0u;
  v159 = 0u;
  v160 = 0u;
  v161 = v148;
  v162 = 16;
  v163 = 0;
  v164 = 0x10000;
  v165 = v148;
  v166 = 17;
  v167 = 0;
  v168 = 0x20000;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v130[1] = &v131;
  v131 = (WTF *)v133;
  v132 = 2;
  v129[0] = v148;
  v129[1] = &v131;
  v129[2] = v130;
  v130[0] = v148;
  v136 = &v138;
  v137 = 2;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v155;
  }
  *(_DWORD *)&v152[v17] = -1203765115;
  v155 += 4;
  JSC::MacroAssemblerARM64::and32((uint64_t)v148, (JSC::ARM64LogicalImmediate *)0x3FF, 5, 5);
  v128[0] = (uint64_t)v148;
  v128[1] = (uint64_t)v129;
  v128[2] = (uint64_t)&v136;
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 0, v18, v19, v20, v21, v22, v23);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 1u, v24, v25, v26, v27, v28, v29);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 2u, v30, v31, v32, v33, v34, v35);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 7u, v36, v37, v38, v39, v40, v41);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 6u, v42, v43, v44, v45, v46, v47);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 8u, v48, v49, v50, v51, v52, v53);
  for (i = v155; i < SHIDWORD(v151); v155 = i)
  {
    if (i + 4 > v154)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v54, v55, v56, v57, v58, v59, v60);
      i = v155;
    }
    *(_DWORD *)&v152[i] = -721215457;
    i = v155 + 4;
  }
  v62 = i;
  if (i + 4 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v54, v55, v56, v57, v58, v59, v60);
    v62 = v155;
  }
  *(_DWORD *)&v152[v62] = 335544320;
  v155 += 4;
  if (v169)
    v63 = 69;
  else
    v63 = 65;
  v123 = i;
  v124 = 0;
  v125 = v63;
  v126 = 15;
  v127 = -1;
  if (i != -1)
  {
    if (HIDWORD(v132) == (_DWORD)v132)
    {
      v64 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v131, (void *)(HIDWORD(v132) + 1), (unint64_t)&v123, v56, v57, v58, v59, v60);
      v66 = *v64;
      v65 = v64 + 1;
      v67 = (char *)v131 + 12 * HIDWORD(v132);
      *(_DWORD *)v67 = v66;
    }
    else
    {
      v65 = &v124;
      v67 = (char *)v131 + 12 * HIDWORD(v132);
      *(_DWORD *)v67 = i;
    }
    *(_QWORD *)(v67 + 4) = *(_QWORD *)v65;
    ++HIDWORD(v132);
  }
  if (!HIDWORD(v137))
  {
LABEL_28:
    v71 = (unint64_t)v136;
    if (&v138 != v136 && v136 != 0)
    {
      v136 = 0;
      LODWORD(v137) = 0;
      WTF::fastFree(v71, v54, v55, v56, v57, v58, v59, v60);
    }
    v73 = v155;
    if (v155 + 4 > v154)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v54, v55, v56, v57, v58, v59, v60);
      v73 = v155;
    }
    *(_DWORD *)&v152[v73] = -698416192;
    v155 += 4;
    JSC::JITThunks::ctiStub(*(_QWORD *)(a1 + 90440), a1, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::slow_op_get_from_scopeGenerator, v56, v57, v58, v59, v60, &v136);
    if (HIDWORD(v132))
    {
      v81 = (uint64_t)v136;
      v82 = (unsigned int *)v131;
      v83 = 12 * HIDWORD(v132);
      do
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v82, v81, (uint64_t)v148, v76, v77, v78, v79, v80);
        v82 += 3;
        v83 -= 12;
      }
      while (v83);
    }
    v84 = (unsigned int *)v137;
    v137 = 0;
    if (v84)
    {
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        atomic_store(1u, v84);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v84, v74, v75, v76, v77, v78, v79, v80);
        WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
      }
    }
    v136 = 0;
    v137 = 0;
    v138 = -1;
    v139 = v140;
    v141 = 128;
    v87 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v87 != -1)
    {
      v128[0] = (uint64_t)&v134;
      v135 = v128;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v135, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v88 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v96 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v96)
    {
      v96 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v96, v88);
    }
    v97 = *(_QWORD *)v96;
    if (*(_QWORD *)v96 != v96 + 8)
    {
      v98 = *(_DWORD *)(v96 + 136);
      if (v141 < v98)
      {
        if (v139 && v139 != v140)
        {
          WTF::fastFree((unint64_t)v139, v89, v90, v91, v92, v93, v94, v95);
          v97 = *(_QWORD *)v96;
          v98 = *(_DWORD *)(v96 + 136);
        }
        v139 = (_BYTE *)v97;
        v141 = v98;
        *(_QWORD *)v96 = v96 + 8;
        *(_DWORD *)(v96 + 136) = 128;
      }
    }
    v99 = 1;
    v142 = 1;
    v143 = 0;
    v144 = 13;
    v145 = 0u;
    v146 = 0u;
    v147 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)&v136, (uint64_t)v148, 1, v91, v92, v93, v94, v95);
    BYTE2(v143) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v136, "get_from_scope", 15, a2);
LABEL_55:
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v136, v100, v101, v102, v103, v104, v105, v106);
        v114 = v131;
        if (v133 != (_BYTE *)v131)
        {
          if (v131)
          {
            v131 = 0;
            LODWORD(v132) = 0;
            WTF::fastFree((unint64_t)v114, v107, v108, v109, v110, v111, v112, v113);
          }
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v148, v107, v108, v109, v110, v111, v112, v113);
        return;
      }
      v99 = HIBYTE(word_1ECF4C286) != 0;
    }
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v136, v99, "get_from_scope", 15, "Baseline: get_from_scope", a2);
    goto LABEL_55;
  }
  v68 = 0;
  v69 = 0;
  v70 = 12 * HIDWORD(v137);
  while (v69 < HIDWORD(v137))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v136 + v68), (uint64_t)v148, v55, v56, v57, v58, v59, v60);
    ++v69;
    v68 += 12;
    if (v70 == v68)
      goto LABEL_28;
  }
  __break(0xC471u);
}

void JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)1>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int i;
  int v62;
  char v63;
  int *v64;
  int *v65;
  int v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unint64_t v87;
  pthread_key_t *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unsigned int v98;
  char v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  char v125;
  __int16 v126;
  char v127;
  uint64_t v128[3];
  _QWORD v129[3];
  _QWORD v130[2];
  WTF *v131;
  uint64_t v132;
  _BYTE v133[31];
  char v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  _BYTE v140[128];
  unsigned int v141;
  char v142;
  int v143;
  int v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  _BYTE v148[32];
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _BYTE *v152;
  _BYTE v153[128];
  unsigned int v154;
  int v155;
  int v156;
  char v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  _BYTE *v161;
  char v162;
  uint64_t v163;
  int v164;
  _BYTE *v165;
  char v166;
  uint64_t v167;
  int v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v148[0] = 0;
  v148[24] = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0x8000000080000000;
  v152 = v153;
  v154 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v136 = v129;
    v131 = (WTF *)&v136;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v131, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v154;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v154 < v16)
    {
      if (v152 && v152 != v153)
      {
        WTF::fastFree((unint64_t)v152, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v152 = (_BYTE *)v14;
      v154 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v154;
    }
  }
  v17 = 0;
  v157 = 1;
  v155 = 0;
  v156 = 0;
  v158 = 0u;
  v159 = 0u;
  v160 = 0u;
  v161 = v148;
  v162 = 16;
  v163 = 0;
  v164 = 0x10000;
  v165 = v148;
  v166 = 17;
  v167 = 0;
  v168 = 0x20000;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v130[1] = &v131;
  v131 = (WTF *)v133;
  v132 = 2;
  v129[0] = v148;
  v129[1] = &v131;
  v129[2] = v130;
  v130[0] = v148;
  v136 = &v138;
  v137 = 2;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v155;
  }
  *(_DWORD *)&v152[v17] = -1203765115;
  v155 += 4;
  JSC::MacroAssemblerARM64::and32((uint64_t)v148, (JSC::ARM64LogicalImmediate *)0x3FF, 5, 5);
  v128[0] = (uint64_t)v148;
  v128[1] = (uint64_t)v129;
  v128[2] = (uint64_t)&v136;
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)1>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 1u, v18, v19, v20, v21, v22, v23);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)1>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 0, v24, v25, v26, v27, v28, v29);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)1>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 2u, v30, v31, v32, v33, v34, v35);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)1>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 7u, v36, v37, v38, v39, v40, v41);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)1>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 6u, v42, v43, v44, v45, v46, v47);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)1>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 8u, v48, v49, v50, v51, v52, v53);
  for (i = v155; i < SHIDWORD(v151); v155 = i)
  {
    if (i + 4 > v154)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v54, v55, v56, v57, v58, v59, v60);
      i = v155;
    }
    *(_DWORD *)&v152[i] = -721215457;
    i = v155 + 4;
  }
  v62 = i;
  if (i + 4 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v54, v55, v56, v57, v58, v59, v60);
    v62 = v155;
  }
  *(_DWORD *)&v152[v62] = 335544320;
  v155 += 4;
  if (v169)
    v63 = 69;
  else
    v63 = 65;
  v123 = i;
  v124 = 0;
  v125 = v63;
  v126 = 15;
  v127 = -1;
  if (i != -1)
  {
    if (HIDWORD(v132) == (_DWORD)v132)
    {
      v64 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v131, (void *)(HIDWORD(v132) + 1), (unint64_t)&v123, v56, v57, v58, v59, v60);
      v66 = *v64;
      v65 = v64 + 1;
      v67 = (char *)v131 + 12 * HIDWORD(v132);
      *(_DWORD *)v67 = v66;
    }
    else
    {
      v65 = &v124;
      v67 = (char *)v131 + 12 * HIDWORD(v132);
      *(_DWORD *)v67 = i;
    }
    *(_QWORD *)(v67 + 4) = *(_QWORD *)v65;
    ++HIDWORD(v132);
  }
  if (!HIDWORD(v137))
  {
LABEL_28:
    v71 = (unint64_t)v136;
    if (&v138 != v136 && v136 != 0)
    {
      v136 = 0;
      LODWORD(v137) = 0;
      WTF::fastFree(v71, v54, v55, v56, v57, v58, v59, v60);
    }
    v73 = v155;
    if (v155 + 4 > v154)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v54, v55, v56, v57, v58, v59, v60);
      v73 = v155;
    }
    *(_DWORD *)&v152[v73] = -698416192;
    v155 += 4;
    JSC::JITThunks::ctiStub(*(_QWORD *)(a1 + 90440), a1, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::slow_op_get_from_scopeGenerator, v56, v57, v58, v59, v60, &v136);
    if (HIDWORD(v132))
    {
      v81 = (uint64_t)v136;
      v82 = (unsigned int *)v131;
      v83 = 12 * HIDWORD(v132);
      do
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v82, v81, (uint64_t)v148, v76, v77, v78, v79, v80);
        v82 += 3;
        v83 -= 12;
      }
      while (v83);
    }
    v84 = (unsigned int *)v137;
    v137 = 0;
    if (v84)
    {
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        atomic_store(1u, v84);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v84, v74, v75, v76, v77, v78, v79, v80);
        WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
      }
    }
    v136 = 0;
    v137 = 0;
    v138 = -1;
    v139 = v140;
    v141 = 128;
    v87 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v87 != -1)
    {
      v128[0] = (uint64_t)&v134;
      v135 = v128;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v135, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v88 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v96 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v96)
    {
      v96 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v96, v88);
    }
    v97 = *(_QWORD *)v96;
    if (*(_QWORD *)v96 != v96 + 8)
    {
      v98 = *(_DWORD *)(v96 + 136);
      if (v141 < v98)
      {
        if (v139 && v139 != v140)
        {
          WTF::fastFree((unint64_t)v139, v89, v90, v91, v92, v93, v94, v95);
          v97 = *(_QWORD *)v96;
          v98 = *(_DWORD *)(v96 + 136);
        }
        v139 = (_BYTE *)v97;
        v141 = v98;
        *(_QWORD *)v96 = v96 + 8;
        *(_DWORD *)(v96 + 136) = 128;
      }
    }
    v99 = 1;
    v142 = 1;
    v143 = 0;
    v144 = 13;
    v145 = 0u;
    v146 = 0u;
    v147 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)&v136, (uint64_t)v148, 1, v91, v92, v93, v94, v95);
    BYTE2(v143) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v136, "get_from_scope", 15, a2);
LABEL_55:
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v136, v100, v101, v102, v103, v104, v105, v106);
        v114 = v131;
        if (v133 != (_BYTE *)v131)
        {
          if (v131)
          {
            v131 = 0;
            LODWORD(v132) = 0;
            WTF::fastFree((unint64_t)v114, v107, v108, v109, v110, v111, v112, v113);
          }
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v148, v107, v108, v109, v110, v111, v112, v113);
        return;
      }
      v99 = HIBYTE(word_1ECF4C286) != 0;
    }
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v136, v99, "get_from_scope", 15, "Baseline: get_from_scope", a2);
    goto LABEL_55;
  }
  v68 = 0;
  v69 = 0;
  v70 = 12 * HIDWORD(v137);
  while (v69 < HIDWORD(v137))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v136 + v68), (uint64_t)v148, v55, v56, v57, v58, v59, v60);
    ++v69;
    v68 += 12;
    if (v70 == v68)
      goto LABEL_28;
  }
  __break(0xC471u);
}

void JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)2>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int i;
  int v62;
  char v63;
  int *v64;
  int *v65;
  int v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unint64_t v87;
  pthread_key_t *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unsigned int v98;
  char v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  char v125;
  __int16 v126;
  char v127;
  uint64_t v128[3];
  _QWORD v129[3];
  _QWORD v130[2];
  WTF *v131;
  uint64_t v132;
  _BYTE v133[31];
  char v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  _BYTE v140[128];
  unsigned int v141;
  char v142;
  int v143;
  int v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  _BYTE v148[32];
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _BYTE *v152;
  _BYTE v153[128];
  unsigned int v154;
  int v155;
  int v156;
  char v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  _BYTE *v161;
  char v162;
  uint64_t v163;
  int v164;
  _BYTE *v165;
  char v166;
  uint64_t v167;
  int v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v148[0] = 0;
  v148[24] = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0x8000000080000000;
  v152 = v153;
  v154 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v136 = v129;
    v131 = (WTF *)&v136;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v131, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v154;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v154 < v16)
    {
      if (v152 && v152 != v153)
      {
        WTF::fastFree((unint64_t)v152, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v152 = (_BYTE *)v14;
      v154 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v154;
    }
  }
  v17 = 0;
  v157 = 1;
  v155 = 0;
  v156 = 0;
  v158 = 0u;
  v159 = 0u;
  v160 = 0u;
  v161 = v148;
  v162 = 16;
  v163 = 0;
  v164 = 0x10000;
  v165 = v148;
  v166 = 17;
  v167 = 0;
  v168 = 0x20000;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v130[1] = &v131;
  v131 = (WTF *)v133;
  v132 = 2;
  v129[0] = v148;
  v129[1] = &v131;
  v129[2] = v130;
  v130[0] = v148;
  v136 = &v138;
  v137 = 2;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v155;
  }
  *(_DWORD *)&v152[v17] = -1203765115;
  v155 += 4;
  JSC::MacroAssemblerARM64::and32((uint64_t)v148, (JSC::ARM64LogicalImmediate *)0x3FF, 5, 5);
  v128[0] = (uint64_t)v148;
  v128[1] = (uint64_t)v129;
  v128[2] = (uint64_t)&v136;
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)2>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 2u, v18, v19, v20, v21, v22, v23);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)2>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 1u, v24, v25, v26, v27, v28, v29);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)2>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 0, v30, v31, v32, v33, v34, v35);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)2>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 7u, v36, v37, v38, v39, v40, v41);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)2>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 6u, v42, v43, v44, v45, v46, v47);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)2>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 8u, v48, v49, v50, v51, v52, v53);
  for (i = v155; i < SHIDWORD(v151); v155 = i)
  {
    if (i + 4 > v154)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v54, v55, v56, v57, v58, v59, v60);
      i = v155;
    }
    *(_DWORD *)&v152[i] = -721215457;
    i = v155 + 4;
  }
  v62 = i;
  if (i + 4 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v54, v55, v56, v57, v58, v59, v60);
    v62 = v155;
  }
  *(_DWORD *)&v152[v62] = 335544320;
  v155 += 4;
  if (v169)
    v63 = 69;
  else
    v63 = 65;
  v123 = i;
  v124 = 0;
  v125 = v63;
  v126 = 15;
  v127 = -1;
  if (i != -1)
  {
    if (HIDWORD(v132) == (_DWORD)v132)
    {
      v64 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v131, (void *)(HIDWORD(v132) + 1), (unint64_t)&v123, v56, v57, v58, v59, v60);
      v66 = *v64;
      v65 = v64 + 1;
      v67 = (char *)v131 + 12 * HIDWORD(v132);
      *(_DWORD *)v67 = v66;
    }
    else
    {
      v65 = &v124;
      v67 = (char *)v131 + 12 * HIDWORD(v132);
      *(_DWORD *)v67 = i;
    }
    *(_QWORD *)(v67 + 4) = *(_QWORD *)v65;
    ++HIDWORD(v132);
  }
  if (!HIDWORD(v137))
  {
LABEL_28:
    v71 = (unint64_t)v136;
    if (&v138 != v136 && v136 != 0)
    {
      v136 = 0;
      LODWORD(v137) = 0;
      WTF::fastFree(v71, v54, v55, v56, v57, v58, v59, v60);
    }
    v73 = v155;
    if (v155 + 4 > v154)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v54, v55, v56, v57, v58, v59, v60);
      v73 = v155;
    }
    *(_DWORD *)&v152[v73] = -698416192;
    v155 += 4;
    JSC::JITThunks::ctiStub(*(_QWORD *)(a1 + 90440), a1, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::slow_op_get_from_scopeGenerator, v56, v57, v58, v59, v60, &v136);
    if (HIDWORD(v132))
    {
      v81 = (uint64_t)v136;
      v82 = (unsigned int *)v131;
      v83 = 12 * HIDWORD(v132);
      do
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v82, v81, (uint64_t)v148, v76, v77, v78, v79, v80);
        v82 += 3;
        v83 -= 12;
      }
      while (v83);
    }
    v84 = (unsigned int *)v137;
    v137 = 0;
    if (v84)
    {
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        atomic_store(1u, v84);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v84, v74, v75, v76, v77, v78, v79, v80);
        WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
      }
    }
    v136 = 0;
    v137 = 0;
    v138 = -1;
    v139 = v140;
    v141 = 128;
    v87 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v87 != -1)
    {
      v128[0] = (uint64_t)&v134;
      v135 = v128;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v135, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v88 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v96 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v96)
    {
      v96 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v96, v88);
    }
    v97 = *(_QWORD *)v96;
    if (*(_QWORD *)v96 != v96 + 8)
    {
      v98 = *(_DWORD *)(v96 + 136);
      if (v141 < v98)
      {
        if (v139 && v139 != v140)
        {
          WTF::fastFree((unint64_t)v139, v89, v90, v91, v92, v93, v94, v95);
          v97 = *(_QWORD *)v96;
          v98 = *(_DWORD *)(v96 + 136);
        }
        v139 = (_BYTE *)v97;
        v141 = v98;
        *(_QWORD *)v96 = v96 + 8;
        *(_DWORD *)(v96 + 136) = 128;
      }
    }
    v99 = 1;
    v142 = 1;
    v143 = 0;
    v144 = 13;
    v145 = 0u;
    v146 = 0u;
    v147 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)&v136, (uint64_t)v148, 1, v91, v92, v93, v94, v95);
    BYTE2(v143) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v136, "get_from_scope", 15, a2);
LABEL_55:
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v136, v100, v101, v102, v103, v104, v105, v106);
        v114 = v131;
        if (v133 != (_BYTE *)v131)
        {
          if (v131)
          {
            v131 = 0;
            LODWORD(v132) = 0;
            WTF::fastFree((unint64_t)v114, v107, v108, v109, v110, v111, v112, v113);
          }
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v148, v107, v108, v109, v110, v111, v112, v113);
        return;
      }
      v99 = HIBYTE(word_1ECF4C286) != 0;
    }
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v136, v99, "get_from_scope", 15, "Baseline: get_from_scope", a2);
    goto LABEL_55;
  }
  v68 = 0;
  v69 = 0;
  v70 = 12 * HIDWORD(v137);
  while (v69 < HIDWORD(v137))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v136 + v68), (uint64_t)v148, v55, v56, v57, v58, v59, v60);
    ++v69;
    v68 += 12;
    if (v70 == v68)
      goto LABEL_28;
  }
  __break(0xC471u);
}

void JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)7>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int i;
  int v62;
  char v63;
  int *v64;
  int *v65;
  int v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unint64_t v87;
  pthread_key_t *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unsigned int v98;
  char v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  char v125;
  __int16 v126;
  char v127;
  uint64_t v128[3];
  _QWORD v129[3];
  _QWORD v130[2];
  WTF *v131;
  uint64_t v132;
  _BYTE v133[31];
  char v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  _BYTE v140[128];
  unsigned int v141;
  char v142;
  int v143;
  int v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  _BYTE v148[32];
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _BYTE *v152;
  _BYTE v153[128];
  unsigned int v154;
  int v155;
  int v156;
  char v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  _BYTE *v161;
  char v162;
  uint64_t v163;
  int v164;
  _BYTE *v165;
  char v166;
  uint64_t v167;
  int v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v148[0] = 0;
  v148[24] = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0x8000000080000000;
  v152 = v153;
  v154 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v136 = v129;
    v131 = (WTF *)&v136;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v131, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v154;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v154 < v16)
    {
      if (v152 && v152 != v153)
      {
        WTF::fastFree((unint64_t)v152, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v152 = (_BYTE *)v14;
      v154 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v154;
    }
  }
  v17 = 0;
  v157 = 1;
  v155 = 0;
  v156 = 0;
  v158 = 0u;
  v159 = 0u;
  v160 = 0u;
  v161 = v148;
  v162 = 16;
  v163 = 0;
  v164 = 0x10000;
  v165 = v148;
  v166 = 17;
  v167 = 0;
  v168 = 0x20000;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v130[1] = &v131;
  v131 = (WTF *)v133;
  v132 = 2;
  v129[0] = v148;
  v129[1] = &v131;
  v129[2] = v130;
  v130[0] = v148;
  v136 = &v138;
  v137 = 2;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v155;
  }
  *(_DWORD *)&v152[v17] = -1203765115;
  v155 += 4;
  JSC::MacroAssemblerARM64::and32((uint64_t)v148, (JSC::ARM64LogicalImmediate *)0x3FF, 5, 5);
  v128[0] = (uint64_t)v148;
  v128[1] = (uint64_t)v129;
  v128[2] = (uint64_t)&v136;
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 7u, v18, v19, v20, v21, v22, v23);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 1u, v24, v25, v26, v27, v28, v29);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 0, v30, v31, v32, v33, v34, v35);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 2u, v36, v37, v38, v39, v40, v41);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 6u, v42, v43, v44, v45, v46, v47);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 8u, v48, v49, v50, v51, v52, v53);
  for (i = v155; i < SHIDWORD(v151); v155 = i)
  {
    if (i + 4 > v154)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v54, v55, v56, v57, v58, v59, v60);
      i = v155;
    }
    *(_DWORD *)&v152[i] = -721215457;
    i = v155 + 4;
  }
  v62 = i;
  if (i + 4 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v54, v55, v56, v57, v58, v59, v60);
    v62 = v155;
  }
  *(_DWORD *)&v152[v62] = 335544320;
  v155 += 4;
  if (v169)
    v63 = 69;
  else
    v63 = 65;
  v123 = i;
  v124 = 0;
  v125 = v63;
  v126 = 15;
  v127 = -1;
  if (i != -1)
  {
    if (HIDWORD(v132) == (_DWORD)v132)
    {
      v64 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v131, (void *)(HIDWORD(v132) + 1), (unint64_t)&v123, v56, v57, v58, v59, v60);
      v66 = *v64;
      v65 = v64 + 1;
      v67 = (char *)v131 + 12 * HIDWORD(v132);
      *(_DWORD *)v67 = v66;
    }
    else
    {
      v65 = &v124;
      v67 = (char *)v131 + 12 * HIDWORD(v132);
      *(_DWORD *)v67 = i;
    }
    *(_QWORD *)(v67 + 4) = *(_QWORD *)v65;
    ++HIDWORD(v132);
  }
  if (!HIDWORD(v137))
  {
LABEL_28:
    v71 = (unint64_t)v136;
    if (&v138 != v136 && v136 != 0)
    {
      v136 = 0;
      LODWORD(v137) = 0;
      WTF::fastFree(v71, v54, v55, v56, v57, v58, v59, v60);
    }
    v73 = v155;
    if (v155 + 4 > v154)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v54, v55, v56, v57, v58, v59, v60);
      v73 = v155;
    }
    *(_DWORD *)&v152[v73] = -698416192;
    v155 += 4;
    JSC::JITThunks::ctiStub(*(_QWORD *)(a1 + 90440), a1, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::slow_op_get_from_scopeGenerator, v56, v57, v58, v59, v60, &v136);
    if (HIDWORD(v132))
    {
      v81 = (uint64_t)v136;
      v82 = (unsigned int *)v131;
      v83 = 12 * HIDWORD(v132);
      do
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v82, v81, (uint64_t)v148, v76, v77, v78, v79, v80);
        v82 += 3;
        v83 -= 12;
      }
      while (v83);
    }
    v84 = (unsigned int *)v137;
    v137 = 0;
    if (v84)
    {
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        atomic_store(1u, v84);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v84, v74, v75, v76, v77, v78, v79, v80);
        WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
      }
    }
    v136 = 0;
    v137 = 0;
    v138 = -1;
    v139 = v140;
    v141 = 128;
    v87 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v87 != -1)
    {
      v128[0] = (uint64_t)&v134;
      v135 = v128;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v135, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v88 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v96 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v96)
    {
      v96 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v96, v88);
    }
    v97 = *(_QWORD *)v96;
    if (*(_QWORD *)v96 != v96 + 8)
    {
      v98 = *(_DWORD *)(v96 + 136);
      if (v141 < v98)
      {
        if (v139 && v139 != v140)
        {
          WTF::fastFree((unint64_t)v139, v89, v90, v91, v92, v93, v94, v95);
          v97 = *(_QWORD *)v96;
          v98 = *(_DWORD *)(v96 + 136);
        }
        v139 = (_BYTE *)v97;
        v141 = v98;
        *(_QWORD *)v96 = v96 + 8;
        *(_DWORD *)(v96 + 136) = 128;
      }
    }
    v99 = 1;
    v142 = 1;
    v143 = 0;
    v144 = 13;
    v145 = 0u;
    v146 = 0u;
    v147 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)&v136, (uint64_t)v148, 1, v91, v92, v93, v94, v95);
    BYTE2(v143) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v136, "get_from_scope", 15, a2);
LABEL_55:
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v136, v100, v101, v102, v103, v104, v105, v106);
        v114 = v131;
        if (v133 != (_BYTE *)v131)
        {
          if (v131)
          {
            v131 = 0;
            LODWORD(v132) = 0;
            WTF::fastFree((unint64_t)v114, v107, v108, v109, v110, v111, v112, v113);
          }
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v148, v107, v108, v109, v110, v111, v112, v113);
        return;
      }
      v99 = HIBYTE(word_1ECF4C286) != 0;
    }
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v136, v99, "get_from_scope", 15, "Baseline: get_from_scope", a2);
    goto LABEL_55;
  }
  v68 = 0;
  v69 = 0;
  v70 = 12 * HIDWORD(v137);
  while (v69 < HIDWORD(v137))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v136 + v68), (uint64_t)v148, v55, v56, v57, v58, v59, v60);
    ++v69;
    v68 += 12;
    if (v70 == v68)
      goto LABEL_28;
  }
  __break(0xC471u);
}

void JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)8>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int i;
  int v62;
  char v63;
  int *v64;
  int *v65;
  int v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unint64_t v87;
  pthread_key_t *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unsigned int v98;
  char v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  char v125;
  __int16 v126;
  char v127;
  uint64_t v128[3];
  _QWORD v129[3];
  _QWORD v130[2];
  WTF *v131;
  uint64_t v132;
  _BYTE v133[31];
  char v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  _BYTE v140[128];
  unsigned int v141;
  char v142;
  int v143;
  int v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  _BYTE v148[32];
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _BYTE *v152;
  _BYTE v153[128];
  unsigned int v154;
  int v155;
  int v156;
  char v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  _BYTE *v161;
  char v162;
  uint64_t v163;
  int v164;
  _BYTE *v165;
  char v166;
  uint64_t v167;
  int v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v148[0] = 0;
  v148[24] = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0x8000000080000000;
  v152 = v153;
  v154 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v136 = v129;
    v131 = (WTF *)&v136;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v131, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  v15 = v154;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v16 = *(_DWORD *)(v13 + 136);
    if (v154 < v16)
    {
      if (v152 && v152 != v153)
      {
        WTF::fastFree((unint64_t)v152, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v16 = *(_DWORD *)(v13 + 136);
      }
      v152 = (_BYTE *)v14;
      v154 = v16;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
      v15 = v154;
    }
  }
  v17 = 0;
  v157 = 1;
  v155 = 0;
  v156 = 0;
  v158 = 0u;
  v159 = 0u;
  v160 = 0u;
  v161 = v148;
  v162 = 16;
  v163 = 0;
  v164 = 0x10000;
  v165 = v148;
  v166 = 17;
  v167 = 0;
  v168 = 0x20000;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v130[1] = &v131;
  v131 = (WTF *)v133;
  v132 = 2;
  v129[0] = v148;
  v129[1] = &v131;
  v129[2] = v130;
  v130[0] = v148;
  v136 = &v138;
  v137 = 2;
  if (v15 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v17 = v155;
  }
  *(_DWORD *)&v152[v17] = -1203765115;
  v155 += 4;
  JSC::MacroAssemblerARM64::and32((uint64_t)v148, (JSC::ARM64LogicalImmediate *)0x3FF, 5, 5);
  v128[0] = (uint64_t)v148;
  v128[1] = (uint64_t)v129;
  v128[2] = (uint64_t)&v136;
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)8>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 8u, v18, v19, v20, v21, v22, v23);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)8>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 1u, v24, v25, v26, v27, v28, v29);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)8>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 0, v30, v31, v32, v33, v34, v35);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)8>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 2u, v36, v37, v38, v39, v40, v41);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)8>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 7u, v42, v43, v44, v45, v46, v47);
  JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)8>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(v128, 6u, v48, v49, v50, v51, v52, v53);
  for (i = v155; i < SHIDWORD(v151); v155 = i)
  {
    if (i + 4 > v154)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v54, v55, v56, v57, v58, v59, v60);
      i = v155;
    }
    *(_DWORD *)&v152[i] = -721215457;
    i = v155 + 4;
  }
  v62 = i;
  if (i + 4 > v154)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v54, v55, v56, v57, v58, v59, v60);
    v62 = v155;
  }
  *(_DWORD *)&v152[v62] = 335544320;
  v155 += 4;
  if (v169)
    v63 = 69;
  else
    v63 = 65;
  v123 = i;
  v124 = 0;
  v125 = v63;
  v126 = 15;
  v127 = -1;
  if (i != -1)
  {
    if (HIDWORD(v132) == (_DWORD)v132)
    {
      v64 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v131, (void *)(HIDWORD(v132) + 1), (unint64_t)&v123, v56, v57, v58, v59, v60);
      v66 = *v64;
      v65 = v64 + 1;
      v67 = (char *)v131 + 12 * HIDWORD(v132);
      *(_DWORD *)v67 = v66;
    }
    else
    {
      v65 = &v124;
      v67 = (char *)v131 + 12 * HIDWORD(v132);
      *(_DWORD *)v67 = i;
    }
    *(_QWORD *)(v67 + 4) = *(_QWORD *)v65;
    ++HIDWORD(v132);
  }
  if (!HIDWORD(v137))
  {
LABEL_28:
    v71 = (unint64_t)v136;
    if (&v138 != v136 && v136 != 0)
    {
      v136 = 0;
      LODWORD(v137) = 0;
      WTF::fastFree(v71, v54, v55, v56, v57, v58, v59, v60);
    }
    v73 = v155;
    if (v155 + 4 > v154)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v152, (uint64_t)v54, v55, v56, v57, v58, v59, v60);
      v73 = v155;
    }
    *(_DWORD *)&v152[v73] = -698416192;
    v155 += 4;
    JSC::JITThunks::ctiStub(*(_QWORD *)(a1 + 90440), a1, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::slow_op_get_from_scopeGenerator, v56, v57, v58, v59, v60, &v136);
    if (HIDWORD(v132))
    {
      v81 = (uint64_t)v136;
      v82 = (unsigned int *)v131;
      v83 = 12 * HIDWORD(v132);
      do
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v82, v81, (uint64_t)v148, v76, v77, v78, v79, v80);
        v82 += 3;
        v83 -= 12;
      }
      while (v83);
    }
    v84 = (unsigned int *)v137;
    v137 = 0;
    if (v84)
    {
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        atomic_store(1u, v84);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v84, v74, v75, v76, v77, v78, v79, v80);
        WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
      }
    }
    v136 = 0;
    v137 = 0;
    v138 = -1;
    v139 = v140;
    v141 = 128;
    v87 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v87 != -1)
    {
      v128[0] = (uint64_t)&v134;
      v135 = v128;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v135, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v88 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v96 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v96)
    {
      v96 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v96, v88);
    }
    v97 = *(_QWORD *)v96;
    if (*(_QWORD *)v96 != v96 + 8)
    {
      v98 = *(_DWORD *)(v96 + 136);
      if (v141 < v98)
      {
        if (v139 && v139 != v140)
        {
          WTF::fastFree((unint64_t)v139, v89, v90, v91, v92, v93, v94, v95);
          v97 = *(_QWORD *)v96;
          v98 = *(_DWORD *)(v96 + 136);
        }
        v139 = (_BYTE *)v97;
        v141 = v98;
        *(_QWORD *)v96 = v96 + 8;
        *(_DWORD *)(v96 + 136) = 128;
      }
    }
    v99 = 1;
    v142 = 1;
    v143 = 0;
    v144 = 13;
    v145 = 0u;
    v146 = 0u;
    v147 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)&v136, (uint64_t)v148, 1, v91, v92, v93, v94, v95);
    BYTE2(v143) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v136, "get_from_scope", 15, a2);
LABEL_55:
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v136, v100, v101, v102, v103, v104, v105, v106);
        v114 = v131;
        if (v133 != (_BYTE *)v131)
        {
          if (v131)
          {
            v131 = 0;
            LODWORD(v132) = 0;
            WTF::fastFree((unint64_t)v114, v107, v108, v109, v110, v111, v112, v113);
          }
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v148, v107, v108, v109, v110, v111, v112, v113);
        return;
      }
      v99 = HIBYTE(word_1ECF4C286) != 0;
    }
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v136, v99, "get_from_scope", 15, "Baseline: get_from_scope", a2);
    goto LABEL_55;
  }
  v68 = 0;
  v69 = 0;
  v70 = 12 * HIDWORD(v137);
  while (v69 < HIDWORD(v137))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v136 + v68), (uint64_t)v148, v55, v56, v57, v58, v59, v60);
    ++v69;
    v68 += 12;
    if (v70 == v68)
      goto LABEL_28;
  }
  __break(0xC471u);
}

void JSC::JIT::emitSlow_op_get_from_scope(uint64_t a1, unsigned __int8 *a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t *__return_ptr, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  int v68;
  _DWORD *v69;
  unint64_t v70;
  BOOL v71;
  char **v72;
  JSC::AssemblerBuffer *v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  _DWORD *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;

  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  v15 = *a2;
  if (v15 == 128)
  {
    v64 = *((__int16 *)a2 + 2);
    if (v64 <= 63)
      v17 = v64;
    else
      v17 = (v64 + 1073741760);
    v18 = *((unsigned __int16 *)a2 + 8);
  }
  else if (v15 == 130)
  {
    v17 = *(unsigned int *)(a2 + 6);
    v18 = *(_DWORD *)(a2 + 30);
  }
  else
  {
    v16 = (char)a2[2];
    if (v16 <= 15)
      v17 = v16;
    else
      v17 = (v16 + 1073741808);
    v18 = a2[8];
  }
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  v20 = *(unsigned __int16 *)(v19 + 52);
  if (!*(_WORD *)(v19 + 52))
    v20 = *(_DWORD *)(v19 + 200);
  v21 = *(unsigned int *)(a1 + 640);
  switch(*(_DWORD *)(((v19 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 24 * v18) & 0x3FF)
  {
    case 0:
      v22 = *(_QWORD *)(a1 + 352);
      v23 = *(_QWORD *)(v22 + 90440);
      v24 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>;
      break;
    case 2:
      v22 = *(_QWORD *)(a1 + 352);
      v23 = *(_QWORD *)(v22 + 90440);
      v24 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)2>;
      break;
    case 7:
      v22 = *(_QWORD *)(a1 + 352);
      v23 = *(_QWORD *)(v22 + 90440);
      v24 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)7>;
      break;
    case 8:
      v22 = *(_QWORD *)(a1 + 352);
      v23 = *(_QWORD *)(v22 + 90440);
      v24 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)8>;
      break;
    case 9:
      v22 = *(_QWORD *)(a1 + 352);
      v23 = *(_QWORD *)(v22 + 90440);
      v24 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)9>;
      break;
    default:
      v22 = *(_QWORD *)(a1 + 352);
      v23 = *(_QWORD *)(v22 + 90440);
      v24 = (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)1>;
      break;
  }
  JSC::JITThunks::ctiStub(v23, v22, v24, v10, v11, v12, v13, v14, &v87);
  v32 = v87;
  v33 = *(_QWORD *)(a1 + 800);
  v34 = *(_QWORD *)(v33 + 136);
  if (*(_WORD *)v34)
    v35 = *(unsigned __int16 *)(v34 + 52);
  else
    v35 = *(_DWORD *)(v34 + 200);
  if ((int)v17 < 0x40000000)
  {
    v36 = 29;
LABEL_20:
    JSC::MacroAssemblerARM64::load64(a1, v36 | (v17 << 35), 2, v27, v28, v29, v30, v31);
    goto LABEL_21;
  }
  v65 = *(_QWORD *)(v33 + 56);
  v66 = (v17 - 0x40000000);
  v67 = *(_DWORD **)(v65 + 120);
  if (!v67 || *v67 <= v66)
    goto LABEL_40;
  v68 = *((unsigned __int8 *)v67 + v66 + 4);
  if ((v68 - 1) >= 2)
  {
    if (v68)
    {
      if (v68 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987E9150);
      }
      goto LABEL_51;
    }
LABEL_40:
    v69 = *(_DWORD **)(v65 + 112);
    if (*v69 <= v66)
    {
      __break(0xC471u);
      JUMPOUT(0x1987E91B8);
    }
    v70 = *(_QWORD *)&v69[2 * v66 + 2];
    if (v70)
      v71 = (v70 & 0xFFFE000000000002) == 0;
    else
      v71 = 0;
    if (!v71)
      goto LABEL_56;
    v72 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v70 & 0xFFFFFFFE) + 0x4C));
    if (v72 != &JSC::SymbolTable::s_info && v72 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_56;
LABEL_51:
    v74 = (JSC::AssemblerBuffer *)(a1 + 56);
    v75 = *(_DWORD *)(a1 + 200);
    if (v75 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v74, v25, v26, v27, v28, v29, v30, v31);
      v74 = (JSC::AssemblerBuffer *)(a1 + 56);
      v75 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v75) = -129956958;
    v76 = *(_DWORD *)(a1 + 200);
    v77 = v76 + 4;
    *(_DWORD *)(a1 + 200) = v76 + 4;
    if ((v76 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v74, v25, v26, v27, v28, v29, v30, v31);
      v77 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v77) = -129367998;
    *(_DWORD *)(a1 + 200) += 4;
    v36 = 2;
    goto LABEL_20;
  }
LABEL_56:
  v78 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v78 <= v66)
  {
    __break(0xC471u);
    JUMPOUT(0x1987E9198);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v78[2 * v66 + 2], 2, v27, v28, v29, v30, v31);
LABEL_21:
  JSC::MacroAssemblerARM64::add64(a1, ((v35 + 7) & 0xFFFFFFF8) + 24 * v18, 25, 4, v37, v38, v39, v40);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v21 >> 2), 3, v41, v42, v43, v44, v45);
  *(_DWORD *)(a1 + 208) = 0;
  v53 = *(_DWORD *)(a1 + 200);
  if (v53 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v46, v47, v48, v49, v50, v51, v52);
    v53 = *(_DWORD *)(a1 + 200);
  }
  v54 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v53) = -1811939328;
  v55 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v55;
  LOBYTE(v88) = -1;
  BYTE3(v88) = 15;
  *(_WORD *)((char *)&v88 + 1) = 65;
  *(_QWORD *)&v87 = v55 - 4;
  *((_QWORD *)&v87 + 1) = v32;
  WORD2(v88) = 384;
  v56 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v56 == *(_DWORD *)(a1 + 40))
  {
    v62 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v54, v56 + 1, (unint64_t)&v87, v48, v49, v50, v51, v52);
    v57 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v57 = 0;
    *(_QWORD *)(v57 + 8) = 0;
    *(_BYTE *)(v57 + 16) = -1;
    v63 = (((*(unsigned __int8 *)(v57 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v57 + 17) = 65;
    *(_BYTE *)(v57 + 19) = BYTE2(v63);
    *(_WORD *)(v57 + 20) &= 0xFC00u;
    v58 = *(_OWORD *)v62;
    v59 = *(_QWORD *)(v62 + 16);
  }
  else
  {
    v57 = *v54 + 24 * v56;
    v58 = v87;
    v59 = v88;
  }
  *(_QWORD *)(v57 + 16) = v59;
  *(_OWORD *)v57 = v58;
  ++*(_DWORD *)(a1 + 44);
  if (*((_QWORD *)&v32 + 1))
  {
    do
    {
      v60 = __ldaxr(*((unsigned int **)&v32 + 1));
      v61 = v60 - 1;
    }
    while (__stlxr(v61, *((unsigned int **)&v32 + 1)));
    if (!v61)
    {
      atomic_store(1u, *((unsigned int **)&v32 + 1));
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle(*((JSC::ExecutableMemoryHandle **)&v32 + 1), v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
    }
  }
}

uint64_t JSC::JIT::slow_op_get_from_scopeGenerator@<X0>(JSC::JIT *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int8x8_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  pthread_key_t *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF *v91;
  unsigned int v92;
  char v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117[3];
  char v118;
  char **v119;
  char *v120;
  char **v121;
  JSC::ExecutableMemoryHandle *v122;
  uint64_t v123;
  WTF *v124;
  _BYTE v125[128];
  unsigned int v126;
  char v127;
  int v128;
  int v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  _DWORD v133[6];
  char v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  WTF *v138;
  _BYTE v139[128];
  unsigned int v140;
  unsigned int v141;
  int v142;
  char v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _DWORD *v147;
  char v148;
  uint64_t v149;
  int v150;
  _DWORD *v151;
  char v152;
  uint64_t v153;
  int v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  LOBYTE(v133[0]) = 0;
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v137 = 0x8000000080000000;
  v138 = (WTF *)v139;
  v140 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v121 = &v120;
    *(_QWORD *)v117 = &v121;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, v117, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(WTF **)v14;
  v16 = v140;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v140 < v17)
    {
      if (v138 && v138 != (WTF *)v139)
      {
        WTF::fastFree((unint64_t)v138, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(WTF **)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v138 = v15;
      v140 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v140;
    }
  }
  v18 = 0;
  v143 = 1;
  v141 = 0;
  v142 = 0;
  v144 = 0u;
  v145 = 0u;
  v146 = 0u;
  v148 = 16;
  v150 = 0x10000;
  v147 = v133;
  v149 = 0;
  v151 = v133;
  v152 = 17;
  v153 = 0;
  v154 = 0x20000;
  v155 = 0;
  v157 = 0;
  v156 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v138, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v141;
  }
  *(_DWORD *)((char *)v138 + v18) = -1447068675;
  v19 = v141;
  v20 = v141 + 4;
  v141 += 4;
  if (v19 + 8 > v140)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v138, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v20 = v141;
  }
  *(_DWORD *)((char *)v138 + v20) = -1207811165;
  v21 = v141;
  v22 = v141 + 4;
  v141 += 4;
  if (v21 + 8 > v140)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v138, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v22 = v141;
  }
  *(_DWORD *)((char *)v138 + v22) = -129956959;
  v23 = v141;
  v24 = v141 + 4;
  v141 += 4;
  if (v23 + 8 > v140)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v138, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v24 = v141;
  }
  *(_DWORD *)((char *)v138 + v24) = -129990624;
  v25 = v141;
  v26 = v141 + 4;
  v141 += 4;
  if (v25 + 8 > v140)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v138, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v26 = v141;
  }
  *(_DWORD *)((char *)v138 + v26) = -129695711;
  v27 = v141;
  v28 = v141 + 4;
  v141 += 4;
  if (v27 + 8 > v140)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v138, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v28 = v141;
  }
  *(_DWORD *)((char *)v138 + v28) = -1962737631;
  v29 = v141;
  v30 = v141 + 4;
  v141 += 4;
  if (v29 + 8 > v140)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v138, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v30 = v141;
  }
  *(_DWORD *)((char *)v138 + v30) = -788511745;
  v31 = v141;
  v32 = v141 + 4;
  v141 += 4;
  if (v31 + 8 > v140)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v138, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v32 = v141;
  }
  *(_DWORD *)((char *)v138 + v32) = -134216732;
  v141 += 4;
  if (!v143)
  {
    __break(0xC471u);
    JUMPOUT(0x1987E98E4);
  }
  v147[52] &= ~v150;
  v33 = v148;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v133, (uint64_t)operationGetFromScope, v148, v9, v10, v11, v12, v13);
  v142 = 0;
  v42 = v141;
  if (v141 + 4 > v140)
  {
    v41 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v138, v34, v35, v36, v37, v38, v39, v40).n128_u64[0];
    v42 = v141;
  }
  *(_DWORD *)((char *)v138 + v42) = (32 * (v33 & 0x1F)) | 0xD63F0000;
  v141 += 4;
  JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)v133, (uint64_t)this, 0, 0, 0xFFFFFFFFLL, v38, v39, v40, (uint64_t)v117, v41);
  v50 = v141;
  if (v141 + 4 > v140)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v138, v43, v44, v45, v46, v47, v48, v49);
    v50 = v141;
  }
  *(_DWORD *)((char *)v138 + v50) = -130022428;
  v51 = v141;
  v52 = v141 + 4;
  v141 += 4;
  if (v51 + 8 > v140)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v138, v43, v44, v45, v46, v47, v48, v49);
    v52 = v141;
  }
  *(_DWORD *)((char *)v138 + v52) = -1862253569;
  v53 = v141;
  v54 = v141 + 4;
  v141 += 4;
  if (v53 + 8 > v140)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v138, v43, v44, v45, v46, v47, v48, v49);
    v54 = v141;
  }
  *(_DWORD *)((char *)v138 + v54) = -1463714819;
  v55 = v141;
  v56 = v141 + 4;
  v141 += 4;
  if (v55 + 8 > v140)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v138, v43, v44, v45, v46, v47, v48, v49);
    v56 = v141;
  }
  *(_DWORD *)((char *)v138 + v56) = -698416192;
  v141 += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v117, (uint64_t)v133, v44, v45, v46, v47, v48, v49);
  v64 = v141;
  if (v141 + 4 > v140)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v138, v57, v58, v59, v60, v61, v62, v63);
    v64 = v141;
  }
  *(_DWORD *)((char *)v138 + v64) = -1862253569;
  v141 += 4;
  JSC::JITThunks::ctiStub(*((_QWORD *)this + 11305), (uint64_t)this, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::popThunkStackPreservesAndHandleExceptionGenerator, v59, v60, v61, v62, v63, &v121);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)v133, (uint64_t)v121, v65, v66, v67, v68, v69, v70);
  v78 = (unsigned int *)v122;
  v122 = 0;
  if (v78)
  {
    do
    {
      v79 = __ldaxr(v78);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v78));
    if (!v80)
    {
      atomic_store(1u, v78);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v78, v71, v72, v73, v74, v75, v76, v77);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  v121 = 0;
  v122 = 0;
  v123 = -1;
  v124 = (WTF *)v125;
  v126 = 128;
  v81 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v81 != -1)
  {
    v120 = &v118;
    v119 = &v120;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v119, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v82 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v90 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v90)
  {
    v90 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v90, v82);
  }
  v91 = *(WTF **)v90;
  if (*(_QWORD *)v90 != v90 + 8)
  {
    v92 = *(_DWORD *)(v90 + 136);
    if (v126 < v92)
    {
      if (v124 && v124 != (WTF *)v125)
      {
        WTF::fastFree((unint64_t)v124, v83, v84, v85, v86, v87, v88, v89);
        v91 = *(WTF **)v90;
        v92 = *(_DWORD *)(v90 + 136);
      }
      v124 = v91;
      v126 = v92;
      *(_QWORD *)v90 = v90 + 8;
      *(_DWORD *)(v90 + 136) = 128;
    }
  }
  v93 = 1;
  v127 = 1;
  v128 = 0;
  v129 = 13;
  v130 = 0u;
  v131 = 0u;
  v132 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v121, (uint64_t)v133, 1, v85, v86, v87, v88, v89);
  BYTE2(v128) = 1;
  if (byte_1ECF4C288)
    goto LABEL_59;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v93 = HIBYTE(word_1ECF4C286) != 0;
LABEL_59:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v121, v93, "slow_op_get_from_scope", 23, "Baseline: slow_op_get_from_scope", a2);
    goto LABEL_57;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v121, "slow_op_get_from_scope", 23, a2);
LABEL_57:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v121, v94, v95, v96, v97, v98, v99, v100);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v133, v101, v102, v103, v104, v105, v106, v107);
}

void JSC::JIT::emit_op_put_to_scope(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int i;
  unsigned int v65;
  _QWORD *v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79[3];
  WTF *v80;
  uint64_t v81;
  _BYTE v82[24];
  _QWORD v83[4];
  int v84;
  int v85;
  __int128 v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  unint64_t v90;
  int v91;

  v9 = *a2;
  if (v9 == 128)
  {
    v60 = *((__int16 *)a2 + 1);
    v11 = v60 + 1073741760;
    if (v60 <= 63)
      v11 = *((__int16 *)a2 + 1);
    *(_QWORD *)&v86 = __PAIR64__(*((unsigned __int16 *)a2 + 2), v11);
    v61 = *((__int16 *)a2 + 3);
    v13 = v61 + 1073741760;
    if (v61 <= 63)
      v13 = *((__int16 *)a2 + 3);
    v62 = *((unsigned __int16 *)a2 + 4);
    DWORD2(v86) = v13;
    HIDWORD(v86) = ((v62 >> 3) | (v62 << 20)) & 0x10000F | (((v62 >> 1) & 3) << 10) & 0xBFFFFFFF | (((v62 >> 7) & 1) << 30);
    v63 = *((unsigned __int16 *)a2 + 6);
    LODWORD(v87) = *((unsigned __int16 *)a2 + 5);
    HIDWORD(v87) = v63;
    v16 = *((unsigned __int16 *)a2 + 7);
    goto LABEL_8;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = v10 + 1073741808;
    if (v10 <= 15)
      v11 = (char)a2[1];
    *(_QWORD *)&v86 = __PAIR64__(a2[2], v11);
    v12 = (char)a2[3];
    v13 = v12 + 1073741808;
    if (v12 <= 15)
      v13 = (char)a2[3];
    v14 = a2[4];
    DWORD2(v86) = v13;
    HIDWORD(v86) = ((v14 >> 3) | (v14 << 20) | (v14 << 9)) & 0x100C0F | ((((v14 & 0x80) >> 7) & 1) << 30);
    v15 = a2[6];
    LODWORD(v87) = a2[5];
    HIDWORD(v87) = v15;
    v16 = a2[7];
LABEL_8:
    v88 = v16;
    goto LABEL_9;
  }
  v86 = *(_OWORD *)(a2 + 2);
  v87 = *(_QWORD *)(a2 + 18);
  v16 = *(_DWORD *)(a2 + 26);
  v88 = v16;
  v13 = DWORD2(v86);
  v11 = v86;
LABEL_9:
  v85 = v11;
  v84 = v13;
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  v18 = *(unsigned __int16 *)(v17 + 54);
  v19 = v18;
  if (!*(_WORD *)(v17 + 54))
    v19 = *(_DWORD *)(v17 + 204);
  v20 = *(_DWORD *)(((v17 + v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 24 * v16);
  v21 = v20 & 0x3FF;
  v83[0] = a1;
  v83[1] = &v86;
  v83[2] = &v85;
  v83[3] = &v84;
  switch(v21)
  {
    case 4:
      v22 = 4;
LABEL_13:
      JSC::JIT::emit_op_put_to_scope(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::$_0::operator()((uint64_t)v83, v22, a3, a4, a5, a6, a7, a8);
      return;
    case 3:
      v22 = 3;
      goto LABEL_13;
    case 9:
      v22 = 9;
      goto LABEL_13;
  }
  v80 = (WTF *)v82;
  v81 = 2;
  if (!*(_WORD *)v17)
    v18 = *(_DWORD *)(v17 + 204);
  JSC::MacroAssemblerARM64::load32(a1, ((unint64_t)((((v18 + 7) & 0xFFFFFFF8) + 24 * v16) >> 3) << 35) | 0x19, 0, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::and32(a1, (JSC::ARM64LogicalImmediate *)0x3FF, 0, 0);
  v79[0] = a1;
  v79[1] = (uint64_t)v83;
  v79[2] = (uint64_t)&v80;
  if ((v20 & 0x3FE) == 0xA)
  {
    JSC::JIT::emit_op_put_to_scope(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::$_1::operator()(v79, 1, v23, v24, v25, v26, v27, v28);
  }
  else
  {
    JSC::JIT::emit_op_put_to_scope(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::$_1::operator()(v79, v20 & 0x3FF, v23, v24, v25, v26, v27, v28);
    if (v21 != 1)
    {
      JSC::JIT::emit_op_put_to_scope(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::$_1::operator()(v79, 1, v29, v30, v31, v32, v33, v34);
      if ((v20 & 0x3FF) != 0)
      {
        JSC::JIT::emit_op_put_to_scope(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::$_1::operator()(v79, 0, v35, v36, v37, v38, v39, v40);
        if (v21 != 2)
          goto LABEL_23;
      }
      else
      {
        JSC::JIT::emit_op_put_to_scope(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::$_1::operator()(v79, 2, v35, v36, v37, v38, v39, v40);
      }
      JSC::JIT::emit_op_put_to_scope(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::$_1::operator()(v79, 7, v41, v42, v43, v44, v45, v46);
      goto LABEL_35;
    }
  }
  JSC::JIT::emit_op_put_to_scope(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::$_1::operator()(v79, 0, v29, v30, v31, v32, v33, v34);
LABEL_23:
  JSC::JIT::emit_op_put_to_scope(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::$_1::operator()(v79, 2, v41, v42, v43, v44, v45, v46);
  if (v21 == 7)
  {
LABEL_35:
    JSC::JIT::emit_op_put_to_scope(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::$_1::operator()(v79, 6, v47, v48, v49, v50, v51, v52);
LABEL_36:
    JSC::JIT::emit_op_put_to_scope(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::$_1::operator()(v79, 8, v53, v54, v55, v56, v57, v58);
    goto LABEL_37;
  }
  JSC::JIT::emit_op_put_to_scope(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::$_1::operator()(v79, 7, v47, v48, v49, v50, v51, v52);
  if (v21 == 6)
    goto LABEL_36;
  JSC::JIT::emit_op_put_to_scope(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::$_1::operator()(v79, 6, v53, v54, v55, v56, v57, v58);
  if (v21 != 8)
    goto LABEL_36;
LABEL_37:
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)v59, v53, v54, v55, v56, v57, v58);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v65 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    v78 = i;
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)v59, v53, v54, v55, v56, v57, v58);
    i = v78;
    v65 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v65) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  v66 = (_QWORD *)(a1 + 648);
  v67 = 0xFF000F4500000000;
  if (!*(_BYTE *)(a1 + 328))
    v67 = 0xFF000F4100000000;
  v68 = *(_DWORD *)(a1 + 640);
  v89 = i;
  v90 = v67;
  v91 = v68;
  v69 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v69 == *(_DWORD *)(a1 + 656))
  {
    v76 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, v69 + 1, (unint64_t)&v89);
    v77 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v77 = *(_DWORD *)v76;
    *(_QWORD *)(v77 + 4) = *(_QWORD *)(v76 + 4);
    *(_DWORD *)(v77 + 12) = *(_DWORD *)(v76 + 12);
  }
  else
  {
    v70 = *v66 + 16 * v69;
    *(_DWORD *)v70 = i;
    *(_QWORD *)(v70 + 4) = v67;
    *(_DWORD *)(v70 + 12) = v68;
  }
  ++*(_DWORD *)(a1 + 660);
  if (HIDWORD(v81))
  {
    v71 = 0;
    v72 = 0;
    v73 = 12 * HIDWORD(v81);
    while (v72 < HIDWORD(v81))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v80 + v71), a1, v53, v54, v55, v56, v57, v58);
      ++v72;
      v71 += 12;
      if (v73 == v71)
        goto LABEL_48;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_48:
    v74 = v80;
    if (v82 != (_BYTE *)v80 && v80 != 0)
    {
      v80 = 0;
      LODWORD(v81) = 0;
      WTF::fastFree((unint64_t)v74, v59, v53, v54, v55, v56, v57, v58);
    }
  }
}

void JSC::JIT::emit_op_put_to_scope(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x8_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int8x8_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int8x8_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int8x8_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  int v129;
  uint64_t v130;
  _DWORD *v131;
  uint64_t v132;
  _DWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  unsigned int v183;
  _QWORD *v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _DWORD *v191;
  int v192;
  _DWORD *v193;
  uint64_t v194;
  uint64_t v195;
  _DWORD *v196;
  int v197;
  _DWORD *v198;
  uint64_t v199;
  uint64_t v200;
  _DWORD *v201;
  int v202;
  _DWORD *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _DWORD *v210;
  int v211;
  _DWORD *v212;
  uint64_t v213;
  uint64_t v214;
  _DWORD *v215;
  int v216;
  _DWORD *v217;
  _DWORD *v218;
  unint64_t v219;
  BOOL v220;
  char **v221;
  BOOL v222;
  unsigned int v223;
  int v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  _DWORD *v228;
  unint64_t v229;
  BOOL v230;
  char **v231;
  BOOL v232;
  unsigned int v233;
  int v234;
  unsigned int v235;
  _DWORD *v236;
  unint64_t v237;
  BOOL v238;
  char **v239;
  unsigned int v241;
  int v242;
  unsigned int v243;
  _DWORD *v244;
  unint64_t v245;
  BOOL v246;
  char **v247;
  unsigned int v249;
  int v250;
  unsigned int v251;
  _DWORD *v252;
  unint64_t v253;
  char **v254;
  unsigned int v256;
  int v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  int v272;
  uint64_t v273;
  __int128 v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  unsigned int v278[3];

  v8 = a2;
  v11 = 0;
  v12 = 0;
  v13 = *(_QWORD *)a1;
  switch(v8)
  {
    case 0:
    case 6:
      v108 = *(_QWORD *)(*(_QWORD *)(v13 + 800) + 136);
      if (*(_WORD *)v108)
        v109 = *(unsigned __int16 *)(v108 + 54);
      else
        v109 = *(_DWORD *)(v108 + 204);
      JSC::MacroAssemblerARM64::load64(*(_QWORD *)a1, ((unint64_t)((((v109 + 7) & 0xFFFFFFF8) + 24 * *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8) >> 3) << 35) | 0x19, 3, a4, a5, a6, a7, a8);
      v117 = **(unsigned int **)(a1 + 16);
      if ((int)v117 < 0x40000000)
      {
        v118 = 29;
LABEL_30:
        JSC::MacroAssemblerARM64::load64(v13, v118 | (v117 << 35), 2, v112, v113, v114, v115, v116);
        goto LABEL_31;
      }
      v208 = *(_QWORD *)(*(_QWORD *)(v13 + 800) + 56);
      v209 = (v117 - 0x40000000);
      v210 = *(_DWORD **)(v208 + 120);
      if (!v210 || *v210 <= v209)
        goto LABEL_152;
      v211 = *((unsigned __int8 *)v210 + v209 + 4);
      if ((v211 - 1) < 2)
        goto LABEL_90;
      if (v211)
      {
        if (v211 != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x1987EAD44);
        }
        goto LABEL_163;
      }
LABEL_152:
      v244 = *(_DWORD **)(v208 + 112);
      if (*v244 <= v209)
      {
        __break(0xC471u);
        JUMPOUT(0x1987EAF7CLL);
      }
      v245 = *(_QWORD *)&v244[2 * v209 + 2];
      if (v245)
        v246 = (v245 & 0xFFFE000000000002) == 0;
      else
        v246 = 0;
      if (v246)
      {
        v247 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v245 & 0xFFFFFFFE) + 0x4C));
        if (v247 == &JSC::SymbolTable::s_info || v247 == &JSC::JSTemplateObjectDescriptor::s_info)
        {
LABEL_163:
          v249 = *(_DWORD *)(v13 + 200);
          if (v249 + 4 > *(_DWORD *)(v13 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v110, v111, v112, v113, v114, v115, v116);
            v249 = *(_DWORD *)(v13 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v13 + 56) + v249) = -129956958;
          v250 = *(_DWORD *)(v13 + 200);
          v251 = v250 + 4;
          *(_DWORD *)(v13 + 200) = v250 + 4;
          if ((v250 + 8) > *(_DWORD *)(v13 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v110, v111, v112, v113, v114, v115, v116);
            v251 = *(_DWORD *)(v13 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v13 + 56) + v251) = -129367998;
          *(_DWORD *)(v13 + 200) += 4;
          v118 = 2;
          goto LABEL_30;
        }
      }
LABEL_90:
      v212 = *(_DWORD **)(*(_QWORD *)(v13 + 808) + 112);
      if (*v212 <= v209)
      {
        __break(0xC471u);
        JUMPOUT(0x1987EAEDCLL);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, *(_QWORD *)&v212[2 * v209 + 2], 2, v112, v113, v114, v115, v116);
LABEL_31:
      JSC::MacroAssemblerARM64::branchTest64(v13, 0, 3, 0xFFFFFFFFLL, v119, v120, v121, v122, (uint64_t)&v276, v123);
      v128 = (_QWORD *)(v13 + 648);
      v129 = *(_DWORD *)(v13 + 640);
      LODWORD(v274) = v276;
      *(_QWORD *)((char *)&v274 + 4) = v277;
      HIDWORD(v274) = v129;
      v130 = *(unsigned int *)(v13 + 660);
      if ((_DWORD)v130 == *(_DWORD *)(v13 + 656))
      {
        v204 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13 + 648, v130 + 1, (unint64_t)&v274);
        v205 = *(_QWORD *)(v13 + 648) + 16 * *(unsigned int *)(v13 + 660);
        *(_DWORD *)v205 = *(_DWORD *)v204;
        *(_QWORD *)(v205 + 4) = *(_QWORD *)(v204 + 4);
        v133 = (_DWORD *)(v205 + 12);
        v131 = (_DWORD *)(v204 + 12);
      }
      else
      {
        v131 = (_DWORD *)&v274 + 3;
        v132 = *v128 + 16 * v130;
        *(_DWORD *)v132 = v276;
        *(_QWORD *)(v132 + 4) = *(_QWORD *)((char *)&v274 + 4);
        v133 = (_DWORD *)(v132 + 12);
      }
      *v133 = *v131;
      ++*(_DWORD *)(v13 + 660);
      JSC::MacroAssemblerARM64::urshift64((_DWORD *)v13, 3, 4, 3, v124, v125, v126, v127);
      if (!*(_BYTE *)(v13 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1987EAD8CLL);
      }
      *(_DWORD *)(*(_QWORD *)(v13 + 296) + 208) &= ~*(_DWORD *)(v13 + 320);
      v141 = *(_BYTE *)(v13 + 304) & 0x1F | 0xB8400040;
      v142 = *(_DWORD *)(v13 + 200);
      if (v142 + 4 > *(_DWORD *)(v13 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v134, v135, v136, v137, v138, v139, v140);
        v142 = *(_DWORD *)(v13 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v13 + 56) + v142) = v141;
      v143 = *(_DWORD *)(v13 + 200);
      v144 = v143 + 4;
      *(_DWORD *)(v13 + 200) = v143 + 4;
      if ((v143 + 8) > *(_DWORD *)(v13 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v134, v135, v136, v137, v138, v139, v140);
        v144 = *(_DWORD *)(v13 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v13 + 56) + v144) = 1795359295;
      v145 = *(_DWORD *)(v13 + 200) + 4;
      *(_DWORD *)(v13 + 200) = v145;
      if (*(_BYTE *)(v13 + 328))
      {
        while ((signed int)v145 < *(_DWORD *)(v13 + 52))
        {
          if (v145 + 4 > *(_DWORD *)(v13 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v134, v135, v136, v137, v138, v139, v140);
            v145 = *(_DWORD *)(v13 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v13 + 56) + v145) = -721215457;
          v145 = *(_DWORD *)(v13 + 200) + 4;
          *(_DWORD *)(v13 + 200) = v145;
        }
        *(_DWORD *)(v13 + 208) = 0;
      }
      if (v145 + 4 > *(_DWORD *)(v13 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v134, v135, v136, v137, v138, v139, v140);
        v145 = *(_DWORD *)(v13 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v13 + 56) + v145) = 1409286145;
      v146 = *(_DWORD *)(v13 + 200);
      v147 = v146 + 4;
      *(_DWORD *)(v13 + 200) = v146 + 4;
      v148 = v146 + 8;
      v149 = v146 + 4;
      if (v148 > *(_DWORD *)(v13 + 192))
      {
        v271 = v147;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v134, v135, v136, v137, v138, v139, v140);
        v147 = v271;
        v149 = *(_DWORD *)(v13 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v13 + 56) + v149) = -721215457;
      *(_DWORD *)(v13 + 200) += 4;
      v150 = 0xFF00018600000000;
      if (!*(_BYTE *)(v13 + 328))
        v150 = 0xFF00018200000000;
      v151 = *(_DWORD *)(v13 + 640);
      LODWORD(v274) = v147;
      *(_QWORD *)((char *)&v274 + 4) = v150;
      HIDWORD(v274) = v151;
      v152 = *(unsigned int *)(v13 + 660);
      if ((_DWORD)v152 == *(_DWORD *)(v13 + 656))
      {
        v206 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13 + 648, v152 + 1, (unint64_t)&v274);
        v207 = *(_QWORD *)(v13 + 648) + 16 * *(unsigned int *)(v13 + 660);
        *(_DWORD *)v207 = *(_DWORD *)v206;
        *(_QWORD *)(v207 + 4) = *(_QWORD *)(v206 + 4);
        *(_DWORD *)(v207 + 12) = *(_DWORD *)(v206 + 12);
      }
      else
      {
        v153 = *v128 + 16 * v152;
        *(_DWORD *)v153 = v147;
        *(_QWORD *)(v153 + 4) = v150;
        *(_DWORD *)(v153 + 12) = v151;
      }
      ++*(_DWORD *)(v13 + 660);
      v154 = **(unsigned int **)(a1 + 24);
      if ((int)v154 >= 0x40000000)
      {
        v213 = *(_QWORD *)(*(_QWORD *)(v13 + 800) + 56);
        v214 = (v154 - 0x40000000);
        v215 = *(_DWORD **)(v213 + 120);
        if (!v215 || *v215 <= v214)
          goto LABEL_169;
        v216 = *((unsigned __int8 *)v215 + v214 + 4);
        if ((v216 - 1) < 2)
        {
LABEL_95:
          v217 = *(_DWORD **)(*(_QWORD *)(v13 + 808) + 112);
          if (*v217 <= v214)
          {
            __break(0xC471u);
            JUMPOUT(0x1987EAEFCLL);
          }
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, *(_QWORD *)&v217[2 * v214 + 2], 0, v136, v137, v138, v139, v140);
          goto LABEL_50;
        }
        if (v216)
        {
          if (v216 != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1987EAD6CLL);
          }
        }
        else
        {
LABEL_169:
          v252 = *(_DWORD **)(v213 + 112);
          if (*v252 <= v214)
          {
            __break(0xC471u);
            JUMPOUT(0x1987EAF9CLL);
          }
          v253 = *(_QWORD *)&v252[2 * v214 + 2];
          if (!v253 || (v253 & 0xFFFE000000000002) != 0)
            goto LABEL_95;
          v254 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v253 & 0xFFFFFFFE) + 0x4C));
          if (v254 != &JSC::SymbolTable::s_info && v254 != &JSC::JSTemplateObjectDescriptor::s_info)
            goto LABEL_95;
        }
        v256 = *(_DWORD *)(v13 + 200);
        if (v256 + 4 > *(_DWORD *)(v13 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v134, v135, v136, v137, v138, v139, v140);
          v256 = *(_DWORD *)(v13 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v13 + 56) + v256) = -129956960;
        v257 = *(_DWORD *)(v13 + 200);
        v258 = v257 + 4;
        *(_DWORD *)(v13 + 200) = v257 + 4;
        if ((v257 + 8) > *(_DWORD *)(v13 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v134, v135, v136, v137, v138, v139, v140);
          v258 = *(_DWORD *)(v13 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v13 + 56) + v258) = -129368064;
        *(_DWORD *)(v13 + 200) += 4;
        v155 = v154 << 35;
        goto LABEL_49;
      }
      v155 = (v154 << 35) | 0x1D;
LABEL_49:
      JSC::MacroAssemblerARM64::load64(v13, v155, 0, v136, v137, v138, v139, v140);
LABEL_50:
      *(_QWORD *)&v274 = WTF::ScopedLambdaFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump ()(void),JSC::JIT::emit_op_put_to_scope(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::$_0::operator() const(JSC::ResolveType)::{lambda(void)#1}>::implFunction;
      *((_QWORD *)&v274 + 1) = &v274;
      v275 = v13;
      if (HIBYTE(word_1ECF4C428))
      {
        v163 = *(_DWORD *)(v13 + 200);
        if (v163 + 4 > *(_DWORD *)(v13 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v156, v157, v158, v159, v160, v161, v162);
          v163 = *(_DWORD *)(v13 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v13 + 56) + v163) = -129989820;
        *(_DWORD *)(v13 + 200) += 4;
        JSC::MacroAssemblerARM64::branch64(v13, 0, 2, 4, v159, v160, v161, v162, (uint64_t)v278);
        v171 = *(_DWORD *)(v13 + 200);
        if (v171 + 4 > *(_DWORD *)(v13 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v164, v165, v166, v167, v168, v169, v170);
          v171 = *(_DWORD *)(v13 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v13 + 56) + v171) = -734491104;
        *(_DWORD *)(v13 + 200) += 4;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v278, v13, v165, v166, v167, v168, v169, v170);
      }
      v172 = *(_DWORD *)(v13 + 200);
      if (v172 + 4 > *(_DWORD *)(v13 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v156, v157, v158, v159, v160, v161, v162);
        v172 = *(_DWORD *)(v13 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v13 + 56) + v172) = -129990588;
      *(_DWORD *)(v13 + 200) += 4;
      v173 = *(_QWORD *)(*(_QWORD *)(v13 + 800) + 136);
      if (*(_WORD *)v173)
        v174 = *(unsigned __int16 *)(v173 + 54);
      else
        v174 = *(_DWORD *)(v173 + 204);
      JSC::MacroAssemblerARM64::load64(v13, ((unint64_t)((((v174 + 7) & 0xFFFFFFF8) + 24 * *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24) + 16) >> 3) << 35) | 0x19, 3, v158, v159, v160, v161, v162);
      v182 = *(_DWORD *)(v13 + 200);
      if (v182 + 4 > *(_DWORD *)(v13 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v175, v176, v177, v178, v179, v180, v181);
        v182 = *(_DWORD *)(v13 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v13 + 56) + v182) = -888994845;
      *(_DWORD *)(v13 + 200) += 4;
      JSC::MacroAssemblerARM64::store64(v13, 0, 0x300000304uLL, 0x2000001F0uLL, v178, v179, v180, v181);
LABEL_25:
      JSC::JIT::emitWriteBarrier(v13, **(unsigned int **)(a1 + 16), **(unsigned int **)(a1 + 24), 2, v103, v104, v105, v106);
      return;
    case 1:
    case 2:
      goto LABEL_14;
    case 3:
    case 4:
      goto LABEL_2;
    case 5:
    case 12:
      JSC::ARM64Assembler::label((_DWORD *)(v13 + 32), 0, a3, a4, a5, a6, a7, a8, (int *)&v274);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v13 + 56), 335544320, v259, v260, v261, v262, v263, v264);
      v265 = 0xFF000F4500000000;
      if (!*(_BYTE *)(v13 + 328))
        v265 = 0xFF000F4100000000;
      v266 = *(_DWORD *)(v13 + 640);
      *(_QWORD *)((char *)&v274 + 4) = v265;
      HIDWORD(v274) = v266;
      v267 = *(unsigned int *)(v13 + 660);
      if ((_DWORD)v267 == *(_DWORD *)(v13 + 656))
      {
        WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v13 + 648, (unint64_t)&v274);
      }
      else
      {
        v268 = *(_QWORD *)(v13 + 648) + 16 * v267;
        *(_DWORD *)v268 = v274;
        *(_QWORD *)(v268 + 4) = v265;
        *(_DWORD *)(v268 + 12) = v266;
        ++*(_DWORD *)(v13 + 660);
      }
      return;
    case 7:
    case 8:
      v11 = 1;
LABEL_14:
      JSC::JIT::emitVarInjectionCheck(*(_QWORD *)a1, v11, 2, a4, a5, a6, a7, a8);
      JSC::JIT::emitVarReadOnlyCheck(v13, a2, 2, v61, v62, v63, v64, v65);
      v71 = *(_QWORD *)(*(_QWORD *)(v13 + 800) + 136);
      if (*(_WORD *)v71)
        v72 = *(unsigned __int16 *)(v71 + 54);
      else
        v72 = *(_DWORD *)(v71 + 204);
      JSC::MacroAssemblerARM64::load64(v13, ((unint64_t)((((v72 + 7) & 0xFFFFFFF8) + 24 * *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24) + 16) >> 3) << 35) | 0x19, 2, v66, v67, v68, v69, v70);
      v81 = *(_QWORD *)(a1 + 8);
      if ((*(_DWORD *)(v81 + 12) & 0xFF800) != 0 && ((_DWORD)a2 == 8 || (_DWORD)a2 == 2))
      {
        v183 = *(_DWORD *)(v13 + 200);
        if (v183 + 4 > *(_DWORD *)(v13 + 192))
        {
          v80 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v73, v74, v75, v76, v77, v78, v79).n128_u64[0];
          v183 = *(_DWORD *)(v13 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v13 + 56) + v183) = -130023360;
        *(_DWORD *)(v13 + 200) += 4;
        JSC::MacroAssemblerARM64::branchTest64(v13, 0, 0, 0xFFFFFFFFLL, v76, v77, v78, v79, (uint64_t)&v272, v80);
        v184 = (_QWORD *)(v13 + 648);
        v185 = v273;
        v186 = *(_DWORD *)(v13 + 640);
        LODWORD(v274) = v272;
        *(_QWORD *)((char *)&v274 + 4) = v273;
        HIDWORD(v274) = v186;
        v187 = *(unsigned int *)(v13 + 660);
        if ((_DWORD)v187 == *(_DWORD *)(v13 + 656))
        {
          v226 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v184, v187 + 1, (unint64_t)&v274);
          v227 = *(_QWORD *)(v13 + 648) + 16 * *(unsigned int *)(v13 + 660);
          *(_DWORD *)v227 = *(_DWORD *)v226;
          *(_QWORD *)(v227 + 4) = *(_QWORD *)(v226 + 4);
          *(_DWORD *)(v227 + 12) = *(_DWORD *)(v226 + 12);
        }
        else
        {
          v188 = *v184 + 16 * v187;
          *(_DWORD *)v188 = v272;
          *(_QWORD *)(v188 + 4) = v185;
          *(_DWORD *)(v188 + 12) = v186;
        }
        ++*(_DWORD *)(v13 + 660);
        v81 = *(_QWORD *)(a1 + 8);
      }
      v82 = *(_QWORD *)(*(_QWORD *)(v13 + 800) + 136);
      if (*(_WORD *)v82)
        v83 = *(unsigned __int16 *)(v82 + 54);
      else
        v83 = *(_DWORD *)(v82 + 204);
      JSC::MacroAssemblerARM64::load64(v13, ((unint64_t)((((v83 + 7) & 0xFFFFFFF8) + 24 * *(_DWORD *)(v81 + 24) + 8) >> 3) << 35) | 0x19, 3, v75, v76, v77, v78, v79);
      JSC::JIT::emitNotifyWriteWatchpoint(v13, 3, v90, v84, v85, v86, v87, v88, v89);
      v98 = **(unsigned int **)(a1 + 24);
      if ((int)v98 < 0x40000000)
      {
        v99 = (v98 << 35) | 0x1D;
LABEL_21:
        JSC::MacroAssemblerARM64::load64(v13, v99, 0, v93, v94, v95, v96, v97);
        goto LABEL_22;
      }
      v189 = *(_QWORD *)(*(_QWORD *)(v13 + 800) + 56);
      v190 = (v98 - 0x40000000);
      v191 = *(_DWORD **)(v189 + 120);
      if (!v191 || *v191 <= v190)
        goto LABEL_98;
      v192 = *((unsigned __int8 *)v191 + v190 + 4);
      if ((v192 - 1) < 2)
        goto LABEL_73;
      if (v192)
      {
        if (v192 != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x1987EAC40);
        }
      }
      else
      {
LABEL_98:
        v218 = *(_DWORD **)(v189 + 112);
        if (*v218 <= v190)
        {
          __break(0xC471u);
          JUMPOUT(0x1987EAF1CLL);
        }
        v219 = *(_QWORD *)&v218[2 * v190 + 2];
        if (v219)
          v220 = (v219 & 0xFFFE000000000002) == 0;
        else
          v220 = 0;
        if (!v220
          || ((v221 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v219 & 0xFFFFFFFE) + 0x4C)),
               v221 != &JSC::SymbolTable::s_info)
            ? (v222 = v221 == &JSC::JSTemplateObjectDescriptor::s_info)
            : (v222 = 1),
              !v222))
        {
LABEL_73:
          v193 = *(_DWORD **)(*(_QWORD *)(v13 + 808) + 112);
          if (*v193 <= v190)
          {
            __break(0xC471u);
            JUMPOUT(0x1987EAE64);
          }
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, *(_QWORD *)&v193[2 * v190 + 2], 0, v93, v94, v95, v96, v97);
LABEL_22:
          v107 = *(_DWORD *)(v13 + 200);
          if (v107 + 4 > *(_DWORD *)(v13 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v100, v101, v102, v103, v104, v105, v106);
            v107 = *(_DWORD *)(v13 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v13 + 56) + v107) = -134217664;
          *(_DWORD *)(v13 + 200) += 4;
          goto LABEL_25;
        }
      }
      v223 = *(_DWORD *)(v13 + 200);
      if (v223 + 4 > *(_DWORD *)(v13 + 192))
      {
        v269 = **(unsigned int **)(a1 + 24);
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v91, v92, v93, v94, v95, v96, v97);
        v98 = v269;
        v223 = *(_DWORD *)(v13 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v13 + 56) + v223) = -129956960;
      v224 = *(_DWORD *)(v13 + 200);
      v225 = v224 + 4;
      *(_DWORD *)(v13 + 200) = v224 + 4;
      if ((v224 + 8) > *(_DWORD *)(v13 + 192))
      {
        v270 = v98;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v91, v92, v93, v94, v95, v96, v97);
        v98 = v270;
        v225 = *(_DWORD *)(v13 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v13 + 56) + v225) = -129368064;
      *(_DWORD *)(v13 + 200) += 4;
      v99 = v98 << 35;
      goto LABEL_21;
    case 9:
      v12 = 1;
LABEL_2:
      JSC::JIT::emitVarInjectionCheck(*(_QWORD *)a1, v12, 3, a4, a5, a6, a7, a8);
      v19 = *(_QWORD *)(*(_QWORD *)(v13 + 800) + 136);
      if (*(_WORD *)v19)
        v20 = *(unsigned __int16 *)(v19 + 54);
      else
        v20 = *(_DWORD *)(v19 + 204);
      JSC::MacroAssemblerARM64::load64(v13, ((unint64_t)((((v20 + 7) & 0xFFFFFFF8) + 24 * *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8) >> 3) << 35) | 0x19, 3, v14, v15, v16, v17, v18);
      v26 = *(_QWORD *)(*(_QWORD *)(v13 + 800) + 136);
      if (*(_WORD *)v26)
        v27 = *(unsigned __int16 *)(v26 + 54);
      else
        v27 = *(_DWORD *)(v26 + 204);
      JSC::MacroAssemblerARM64::load64(v13, ((unint64_t)((((v27 + 7) & 0xFFFFFFF8) + 24 * *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24) + 16) >> 3) << 35) | 0x19, 2, v21, v22, v23, v24, v25);
      JSC::JIT::emitNotifyWriteWatchpoint(v13, 3, v34, v28, v29, v30, v31, v32, v33);
      v42 = **(unsigned int **)(a1 + 24);
      if ((int)v42 < 0x40000000)
      {
        v43 = (v42 << 35) | 0x1D;
LABEL_8:
        JSC::MacroAssemblerARM64::load64(v13, v43, 0, v37, v38, v39, v40, v41);
        goto LABEL_9;
      }
      v194 = *(_QWORD *)(*(_QWORD *)(v13 + 800) + 56);
      v195 = (v42 - 0x40000000);
      v196 = *(_DWORD **)(v194 + 120);
      if (!v196 || *v196 <= v195)
        goto LABEL_118;
      v197 = *((unsigned __int8 *)v196 + v195 + 4);
      if ((v197 - 1) < 2)
        goto LABEL_78;
      if (v197)
      {
        if (v197 != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x1987EACF4);
        }
      }
      else
      {
LABEL_118:
        v228 = *(_DWORD **)(v194 + 112);
        if (*v228 <= v195)
        {
          __break(0xC471u);
          JUMPOUT(0x1987EAF3CLL);
        }
        v229 = *(_QWORD *)&v228[2 * v195 + 2];
        if (v229)
          v230 = (v229 & 0xFFFE000000000002) == 0;
        else
          v230 = 0;
        if (!v230
          || ((v231 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v229 & 0xFFFFFFFE) + 0x4C)),
               v231 != &JSC::SymbolTable::s_info)
            ? (v232 = v231 == &JSC::JSTemplateObjectDescriptor::s_info)
            : (v232 = 1),
              !v232))
        {
LABEL_78:
          v198 = *(_DWORD **)(*(_QWORD *)(v13 + 808) + 112);
          if (*v198 <= v195)
          {
            __break(0xC471u);
            JUMPOUT(0x1987EAE9CLL);
          }
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, *(_QWORD *)&v198[2 * v195 + 2], 0, v37, v38, v39, v40, v41);
LABEL_9:
          v51 = **(unsigned int **)(a1 + 16);
          if ((int)v51 < 0x40000000)
          {
            v52 = 29;
LABEL_11:
            JSC::MacroAssemblerARM64::load64(v13, v52 | (v51 << 35), 3, v46, v47, v48, v49, v50);
LABEL_12:
            JSC::MacroAssemblerARM64::store64(v13, 0, 0x300000203uLL, 0x200000020uLL, v53, v54, v55, v56);
            JSC::JIT::emitWriteBarrier(v13, **(unsigned int **)(a1 + 16), **(unsigned int **)(a1 + 24), 2, v57, v58, v59, v60);
            return;
          }
          v199 = *(_QWORD *)(*(_QWORD *)(v13 + 800) + 56);
          v200 = (v51 - 0x40000000);
          v201 = *(_DWORD **)(v199 + 120);
          if (!v201 || *v201 <= v200)
            goto LABEL_135;
          v202 = *((unsigned __int8 *)v201 + v200 + 4);
          if ((v202 - 1) < 2)
          {
LABEL_83:
            v203 = *(_DWORD **)(*(_QWORD *)(v13 + 808) + 112);
            if (*v203 <= v200)
            {
              __break(0xC471u);
              JUMPOUT(0x1987EAEBCLL);
            }
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, *(_QWORD *)&v203[2 * v200 + 2], 3, v46, v47, v48, v49, v50);
            goto LABEL_12;
          }
          if (v202)
          {
            if (v202 != 3)
            {
              __break(0xC471u);
              JUMPOUT(0x1987EAD1CLL);
            }
          }
          else
          {
LABEL_135:
            v236 = *(_DWORD **)(v199 + 112);
            if (*v236 <= v200)
            {
              __break(0xC471u);
              JUMPOUT(0x1987EAF5CLL);
            }
            v237 = *(_QWORD *)&v236[2 * v200 + 2];
            if (v237)
              v238 = (v237 & 0xFFFE000000000002) == 0;
            else
              v238 = 0;
            if (!v238)
              goto LABEL_83;
            v239 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v237 & 0xFFFFFFFE) + 0x4C));
            if (v239 != &JSC::SymbolTable::s_info && v239 != &JSC::JSTemplateObjectDescriptor::s_info)
              goto LABEL_83;
          }
          v241 = *(_DWORD *)(v13 + 200);
          if (v241 + 4 > *(_DWORD *)(v13 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v44, v45, v46, v47, v48, v49, v50);
            v241 = *(_DWORD *)(v13 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v13 + 56) + v241) = -129956957;
          v242 = *(_DWORD *)(v13 + 200);
          v243 = v242 + 4;
          *(_DWORD *)(v13 + 200) = v242 + 4;
          if ((v242 + 8) > *(_DWORD *)(v13 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v44, v45, v46, v47, v48, v49, v50);
            v243 = *(_DWORD *)(v13 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v13 + 56) + v243) = -129367965;
          *(_DWORD *)(v13 + 200) += 4;
          v52 = 3;
          goto LABEL_11;
        }
      }
      v233 = *(_DWORD *)(v13 + 200);
      if (v233 + 4 > *(_DWORD *)(v13 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v35, v36, v37, v38, v39, v40, v41);
        v233 = *(_DWORD *)(v13 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v13 + 56) + v233) = -129956960;
      v234 = *(_DWORD *)(v13 + 200);
      v235 = v234 + 4;
      *(_DWORD *)(v13 + 200) = v234 + 4;
      if ((v234 + 8) > *(_DWORD *)(v13 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), v35, v36, v37, v38, v39, v40, v41);
        v235 = *(_DWORD *)(v13 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v13 + 56) + v235) = -129368064;
      *(_DWORD *)(v13 + 200) += 4;
      v43 = v42 << 35;
      goto LABEL_8;
    case 10:
    case 11:
      __break(0xC471u);
      JUMPOUT(0x1987EAE44);
    default:
      return;
  }
}

unsigned int *JSC::JIT::emit_op_put_to_scope(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::$_1::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::AssemblerBuffer *v25;
  int i;
  unsigned int v27;
  char v28;
  uint64_t v29;
  int *v30;
  int *v31;
  int v32;
  uint64_t v33;
  JSC::AssemblerBuffer *v35;
  int v36;
  int v37;
  char v38;
  __int16 v39;
  char v40;
  unsigned int v41[3];

  v10 = *a1;
  JSC::MacroAssemblerARM64::branch32(*a1, 1, 0, a2, a5, a6, a7, a8, (uint64_t)v41);
  JSC::JIT::emit_op_put_to_scope(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::$_0::operator()(a1[1], a2, v11, v12, v13, v14, v15, v16);
  v24 = a1[2];
  v25 = (JSC::AssemblerBuffer *)(v10 + 56);
  for (i = *(_DWORD *)(v10 + 200); i < *(_DWORD *)(v10 + 52); *(_DWORD *)(v10 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(v10 + 192))
    {
      v35 = v25;
      JSC::AssemblerBuffer::outOfLineGrow(v25, v17, v18, v19, v20, v21, v22, v23);
      v25 = v35;
      i = *(_DWORD *)(v10 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v10 + 56) + i) = -721215457;
    i = *(_DWORD *)(v10 + 200) + 4;
  }
  v27 = i;
  if ((i + 4) > *(_DWORD *)(v10 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v25, v17, v18, v19, v20, v21, v22, v23);
    v27 = *(_DWORD *)(v10 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v10 + 56) + v27) = 335544320;
  *(_DWORD *)(v10 + 200) += 4;
  if (*(_BYTE *)(v10 + 328))
    v28 = 69;
  else
    v28 = 65;
  v36 = i;
  v37 = 0;
  v38 = v28;
  v39 = 15;
  v40 = -1;
  if (i != -1)
  {
    v29 = *(unsigned int *)(v24 + 12);
    if ((_DWORD)v29 == *(_DWORD *)(v24 + 8))
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24, (void *)(v29 + 1), (unint64_t)&v36, v19, v20, v21, v22, v23);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = *(_QWORD *)v24 + 12 * *(unsigned int *)(v24 + 12);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v37;
      v33 = *(_QWORD *)v24 + 12 * v29;
      *(_DWORD *)v33 = i;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++*(_DWORD *)(v24 + 12);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v41, v10, v18, v19, v20, v21, v22, v23);
}

void JSC::JIT::emitSlow_op_put_to_scope(uint64_t a1, unsigned __int8 *a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  JSC::ExecutableMemoryHandle *v55;
  __int128 v56;
  uint64_t v57;

  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  v17 = *a2;
  if (v17 == 128)
  {
    v18 = *((unsigned __int16 *)a2 + 7);
  }
  else if (v17 == 130)
  {
    v18 = *(_DWORD *)(a2 + 26);
  }
  else
  {
    v18 = a2[7];
  }
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  v20 = *(unsigned __int16 *)(v19 + 54);
  if (!*(_WORD *)(v19 + 54))
    v20 = *(_DWORD *)(v19 + 204);
  if ((*(_DWORD *)(((v19 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 24 * v18) & 0x3FF) == 5)
  {
    *(_QWORD *)&v56 = a1;
    *((_QWORD *)&v56 + 1) = slow_path_throw_strict_mode_readonly_property_write_error;
    JSC::JITSlowPathCall::call((JSC::JITSlowPathCall *)&v56, v10, v11, v12, v13, v14, v15, v16);
  }
  else
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)((unint64_t)*(unsigned int *)(a1 + 640) >> 2), 2, v12, v13, v14, v15, v16);
    JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::slow_op_put_to_scopeGenerator, v21, v22, v23, v24, v25, &v54);
    v33 = v54;
    *(_DWORD *)(a1 + 208) = 0;
    v34 = *(_DWORD *)(a1 + 200);
    if (v34 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v26, v27, v28, v29, v30, v31, v32);
      v34 = *(_DWORD *)(a1 + 200);
    }
    v35 = (_QWORD *)(a1 + 32);
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v34) = -1811939328;
    v36 = (*(_DWORD *)(a1 + 200) + 4);
    *(_DWORD *)(a1 + 200) = v36;
    LOBYTE(v57) = -1;
    BYTE3(v57) = 15;
    *(_WORD *)((char *)&v57 + 1) = 65;
    *(_QWORD *)&v56 = v36 - 4;
    *((_QWORD *)&v56 + 1) = v33;
    WORD2(v57) = 384;
    v37 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v37 == *(_DWORD *)(a1 + 40))
    {
      v44 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v37 + 1, (unint64_t)&v56, v28, v29, v30, v31, v32);
      v38 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
      *(_QWORD *)v38 = 0;
      *(_QWORD *)(v38 + 8) = 0;
      *(_BYTE *)(v38 + 16) = -1;
      v45 = (((*(unsigned __int8 *)(v38 + 19) >> 4) & 0xF) << 20) | 0xF0041;
      *(_WORD *)(v38 + 17) = 65;
      *(_BYTE *)(v38 + 19) = BYTE2(v45);
      *(_WORD *)(v38 + 20) &= 0xFC00u;
      v39 = *(_OWORD *)v44;
      v40 = *(_QWORD *)(v44 + 16);
    }
    else
    {
      v38 = *v35 + 24 * v37;
      v39 = v56;
      v40 = v57;
    }
    *(_QWORD *)(v38 + 16) = v40;
    *(_OWORD *)v38 = v39;
    ++*(_DWORD *)(a1 + 44);
    v41 = (unsigned int *)v55;
    v55 = 0;
    if (v41)
    {
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        atomic_store(1u, v41);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v41, v26, v27, v28, v29, v30, v31, v32);
        WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
      }
    }
  }
}

uint64_t JSC::JIT::slow_op_put_to_scopeGenerator@<X0>(JSC::JIT *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  pthread_key_t *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  unsigned int v64;
  char v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char **v90;
  char *v91;
  _QWORD v92[3];
  WTF *v93;
  _BYTE v94[128];
  unsigned int v95;
  char v96;
  int v97;
  int v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  _DWORD v102[6];
  char v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  _BYTE v108[128];
  unsigned int v109;
  int v110;
  int v111;
  char v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _DWORD *v116;
  char v117;
  uint64_t v118;
  int v119;
  _DWORD *v120;
  char v121;
  uint64_t v122;
  int v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  LOBYTE(v102[0]) = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0x8000000080000000;
  v107 = v108;
  v109 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v91 = (char *)v92;
    v92[0] = &v90;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v91, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v109;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v109 < v17)
    {
      if (v107 && v107 != v108)
      {
        WTF::fastFree((unint64_t)v107, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v107 = (_BYTE *)v15;
      v109 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v109;
    }
  }
  v18 = 0;
  v112 = 1;
  v117 = 16;
  v119 = 0x10000;
  v121 = 17;
  v123 = 0x20000;
  v110 = 0;
  v111 = 0;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v116 = v102;
  v118 = 0;
  v120 = v102;
  v122 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v107, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v110;
  }
  *(_DWORD *)&v107[v18] = -1447068675;
  v19 = v110;
  v20 = v110 + 4;
  v110 += 4;
  if (v19 + 8 > v109)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v107, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v20 = v110;
  }
  *(_DWORD *)&v107[v20] = -1207811166;
  v21 = v110;
  v22 = v110 + 4;
  v110 += 4;
  if (v21 + 8 > v109)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v107, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v22 = v110;
  }
  *(_DWORD *)&v107[v22] = -129956957;
  v23 = v110;
  v24 = v110 + 4;
  v110 += 4;
  if (v23 + 8 > v109)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v107, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v24 = v110;
  }
  *(_DWORD *)&v107[v24] = -129990560;
  v25 = v110;
  v26 = v110 + 4;
  v110 += 4;
  if (v25 + 8 > v109)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v107, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v26 = v110;
  }
  *(_DWORD *)&v107[v26] = -129695647;
  v27 = v110;
  v28 = v110 + 4;
  v110 += 4;
  if (v27 + 8 > v109)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v107, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v28 = v110;
  }
  *(_DWORD *)&v107[v28] = -1962803167;
  v110 += 4;
  if (!v112)
  {
    __break(0xC471u);
    JUMPOUT(0x1987EBA10);
  }
  v116[52] &= ~v119;
  v29 = v117;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v102, (uint64_t)operationPutToScope, v117, v9, v10, v11, v12, v13);
  v111 = 0;
  v37 = v110;
  if (v110 + 4 > v109)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v107, v30, v31, v32, v33, v34, v35, v36);
    v37 = v110;
  }
  *(_DWORD *)&v107[v37] = (32 * (v29 & 0x1F)) | 0xD63F0000;
  v38 = v110;
  v39 = v110 + 4;
  v110 += 4;
  if (v38 + 8 > v109)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v107, v30, v31, v32, v33, v34, v35, v36);
    v39 = v110;
  }
  *(_DWORD *)&v107[v39] = -1463714819;
  v110 += 4;
  v40 = *((_QWORD *)this + 11305);
  v41 = *(_QWORD *)(v40 + 40);
  v42 = *(unsigned int **)(v40 + 48);
  if (v42)
  {
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
    JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)v102, v41, v31, v32, v33, v34, v35, v36);
    do
    {
      v51 = __ldaxr(v42);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v42));
    if (!v52)
    {
      atomic_store(1u, v42);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v42, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
    }
  }
  else
  {
    JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)v102, v41, v31, v32, v33, v34, v35, v36);
  }
  v92[0] = 0;
  v92[1] = 0;
  v92[2] = -1;
  v93 = (WTF *)v94;
  v95 = 128;
  v53 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v53 != -1)
  {
    v91 = &v89;
    v90 = &v91;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v90, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v54 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v62 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v62)
  {
    v62 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v62, v54);
  }
  v63 = *(WTF **)v62;
  if (*(_QWORD *)v62 != v62 + 8)
  {
    v64 = *(_DWORD *)(v62 + 136);
    if (v95 < v64)
    {
      if (v93 && v93 != (WTF *)v94)
      {
        WTF::fastFree((unint64_t)v93, v55, v56, v57, v58, v59, v60, v61);
        v63 = *(WTF **)v62;
        v64 = *(_DWORD *)(v62 + 136);
      }
      v93 = v63;
      v95 = v64;
      *(_QWORD *)v62 = v62 + 8;
      *(_DWORD *)(v62 + 136) = 128;
    }
  }
  v65 = 1;
  v96 = 1;
  v97 = 0;
  v98 = 13;
  v99 = 0u;
  v100 = 0u;
  v101 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v92, (uint64_t)v102, 1, v57, v58, v59, v60, v61);
  BYTE2(v97) = 1;
  if (byte_1ECF4C288)
    goto LABEL_49;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v65 = HIBYTE(word_1ECF4C286) != 0;
LABEL_49:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v92, v65, "slow_op_put_to_scope", 21, "Baseline: slow_op_put_to_scope", a2);
    goto LABEL_47;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v92, "slow_op_put_to_scope", 21, a2);
LABEL_47:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v92, v66, v67, v68, v69, v70, v71, v72);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v102, v73, v74, v75, v76, v77, v78, v79);
}

void JSC::JIT::emit_op_get_from_arguments(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v9 = *a2;
  if (v9 == 130)
  {
    v12 = *(unsigned int *)(a2 + 2);
    v13 = *(unsigned int *)(a2 + 6);
    v14 = *(_DWORD *)(a2 + 10);
    v15 = *(_DWORD *)(a2 + 14);
  }
  else
  {
    if (v9 == 128)
    {
      v27 = *((__int16 *)a2 + 1);
      v11 = 1073741760;
      if (v27 <= 63)
        v12 = v27;
      else
        v12 = (v27 + 1073741760);
      v13 = *((__int16 *)a2 + 2);
      v14 = *((unsigned __int16 *)a2 + 3);
      v15 = *((unsigned __int16 *)a2 + 4);
      if ((int)v13 <= 63)
        goto LABEL_7;
    }
    else
    {
      v10 = (char)a2[1];
      v11 = 1073741808;
      if (v10 <= 15)
        v12 = v10;
      else
        v12 = (v10 + 1073741808);
      v13 = (char)a2[2];
      v14 = a2[3];
      v15 = a2[4];
      if ((int)v13 < 16)
        goto LABEL_7;
    }
    v13 = (v13 + v11);
  }
  if ((int)v13 < 0x40000000)
  {
LABEL_7:
    v16 = (v13 << 35) | 0x1D;
LABEL_8:
    JSC::MacroAssemblerARM64::load64(a1, v16, 0, a4, a5, a6, a7, a8);
    goto LABEL_9;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v13))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v28, v29, v30, v31, v32);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v34, v35, v36, v37, v38);
    v16 = v13 << 35;
    goto LABEL_8;
  }
  v33 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v33 <= (v13 - 0x40000000))
  {
    __break(0xC471u);
    return;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v33[2 * (v13 - 0x40000000) + 2], 0, v28, v29, v30, v31, v32);
LABEL_9:
  JSC::MacroAssemblerARM64::load64(a1, (unint64_t)(8 * v14 + 48) << 32, 0, v17, v18, v19, v20, v21);
  if (*(_BYTE *)(a1 + 793))
    JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)~v15 << 36) | 0x19, v22, v23, v24, v25, v26);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v12 << 35) | 0x1D, v22, v23, v24, v25, v26);
}

unsigned int *JSC::JIT::emit_op_put_to_arguments(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v3 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpPutToArguments>(a2);
  v9 = v3;
  v11 = v10;
  if ((int)v3 < 0x40000000)
  {
    v12 = (v3 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v12, 2, v4, v5, v6, v7, v8);
    goto LABEL_4;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v3))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, v29, v30, v31, v32, v33);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v41, v42, v43, v44, v45);
    v12 = (v9 << 35) | 2;
    goto LABEL_3;
  }
  v34 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v34 <= (v9 - 0x40000000))
    goto LABEL_15;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v34[2 * (v9 - 0x40000000) + 2], 2, v29, v30, v31, v32, v33);
LABEL_4:
  if ((int)v11 >= 0x40000000)
  {
    v23 = v11;
    if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v11))
    {
      JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v35, v36, v37, v38, v39);
      JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v46, v47, v48, v49, v50);
      JSC::MacroAssemblerARM64::load64(a1, v11 << 35, 0, v51, v52, v53, v54, v55);
      goto LABEL_6;
    }
    v40 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
    if (*v40 > (v11 - 0x40000000))
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v40[2 * (v11 - 0x40000000) + 2], 0, v35, v36, v37, v38, v39);
      goto LABEL_6;
    }
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x1987EBDB8);
  }
  JSC::MacroAssemblerARM64::load64(a1, (v11 << 35) | 0x1D, 0, v13, v14, v15, v16, v17);
  v23 = v11;
LABEL_6:
  JSC::MacroAssemblerARM64::store64(a1, 0, (HIDWORD(v9) << 35) + 0x3000000002, v18, v19, v20, v21, v22);
  return JSC::JIT::emitWriteBarrier(a1, v9, v23, 2, v24, v25, v26, v27);
}

unsigned int *JSC::JIT::emitWriteBarrier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  int v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  int v72;
  _DWORD *v73;
  _DWORD *v74;
  unint64_t v75;
  BOOL v76;
  char **v77;
  JSC::AssemblerBuffer *v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  _DWORD *v83;
  unint64_t v84;
  BOOL v85;
  char **v86;
  JSC::AssemblerBuffer *v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  uint64_t v96;
  _BYTE v97[12];
  _BYTE v98[12];

  v8 = a4;
  *(_QWORD *)v98 = 0xFFFFFFFFLL;
  *(_DWORD *)&v98[8] = -16773311;
  v11 = a4 & 0xFFFFFFFE;
  if ((a4 & 0xFFFFFFFE) == 2)
  {
    if ((int)a3 < 0x40000000)
    {
      v59 = (a3 << 35) | 0x1D;
LABEL_33:
      JSC::MacroAssemblerARM64::load64(a1, v59, 0, a4, a5, a6, a7, a8);
LABEL_34:
      JSC::MacroAssemblerARM64::branchTest64(a1, 1, 0, 28, v60, v61, v62, v63, (uint64_t)v97);
      *(_DWORD *)v98 = *(_DWORD *)v97;
      *(_QWORD *)&v98[4] = *(_QWORD *)&v97[4];
      goto LABEL_2;
    }
    v69 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
    v70 = (a3 - 0x40000000);
    v71 = *(_DWORD **)(v69 + 120);
    if (!v71 || *v71 <= v70)
      goto LABEL_63;
    v72 = *((unsigned __int8 *)v71 + v70 + 4);
    if ((v72 - 1) < 2)
    {
LABEL_43:
      v73 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
      if (*v73 <= v70)
      {
        __break(0xC471u);
        JUMPOUT(0x1987EC440);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v73[2 * v70 + 2], 0, a4, a5, a6, a7, a8);
      goto LABEL_34;
    }
    if (v72)
    {
      if (v72 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987EC3E0);
      }
    }
    else
    {
LABEL_63:
      v83 = *(_DWORD **)(v69 + 112);
      if (*v83 <= v70)
      {
        __break(0xC471u);
        JUMPOUT(0x1987EC480);
      }
      v84 = *(_QWORD *)&v83[2 * v70 + 2];
      if (v84)
        v85 = (v84 & 0xFFFE000000000002) == 0;
      else
        v85 = 0;
      if (!v85)
        goto LABEL_43;
      v86 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0x4C));
      if (v86 != &JSC::SymbolTable::s_info && v86 != &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_43;
    }
    v88 = (JSC::AssemblerBuffer *)(a1 + 56);
    v89 = *(_DWORD *)(a1 + 200);
    if (v89 + 4 > *(_DWORD *)(a1 + 192))
    {
      v92 = a3;
      JSC::AssemblerBuffer::outOfLineGrow(v88, a2, a3, a4, a5, a6, a7, a8);
      v88 = (JSC::AssemblerBuffer *)(a1 + 56);
      a3 = v92;
      v89 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v89) = -129956960;
    v90 = *(_DWORD *)(a1 + 200);
    v91 = v90 + 4;
    *(_DWORD *)(a1 + 200) = v90 + 4;
    if ((v90 + 8) > *(_DWORD *)(a1 + 192))
    {
      v93 = a3;
      JSC::AssemblerBuffer::outOfLineGrow(v88, a2, a3, a4, a5, a6, a7, a8);
      a3 = v93;
      v91 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v91) = -129368064;
    *(_DWORD *)(a1 + 200) += 4;
    v59 = a3 << 35;
    goto LABEL_33;
  }
LABEL_2:
  if ((int)a2 < 0x40000000)
  {
    v12 = 29;
LABEL_4:
    JSC::MacroAssemblerARM64::load64(a1, v12 | (a2 << 35), 1, a4, a5, a6, a7, a8);
    goto LABEL_5;
  }
  v64 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v65 = (a2 - 0x40000000);
  v66 = *(_DWORD **)(v64 + 120);
  if (!v66 || *v66 <= v65)
    goto LABEL_46;
  v67 = *((unsigned __int8 *)v66 + v65 + 4);
  if ((v67 - 1) >= 2)
  {
    if (v67)
    {
      if (v67 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987EC348);
      }
      goto LABEL_57;
    }
LABEL_46:
    v74 = *(_DWORD **)(v64 + 112);
    if (*v74 <= v65)
    {
      __break(0xC471u);
      JUMPOUT(0x1987EC460);
    }
    v75 = *(_QWORD *)&v74[2 * v65 + 2];
    if (v75)
      v76 = (v75 & 0xFFFE000000000002) == 0;
    else
      v76 = 0;
    if (!v76)
      goto LABEL_38;
    v77 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v75 & 0xFFFFFFFE) + 0x4C));
    if (v77 != &JSC::SymbolTable::s_info && v77 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_38;
LABEL_57:
    v79 = (JSC::AssemblerBuffer *)(a1 + 56);
    v80 = *(_DWORD *)(a1 + 200);
    if (v80 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v79, a2, a3, a4, a5, a6, a7, a8);
      v79 = (JSC::AssemblerBuffer *)(a1 + 56);
      v80 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v80) = -129956959;
    v81 = *(_DWORD *)(a1 + 200);
    v82 = v81 + 4;
    *(_DWORD *)(a1 + 200) = v81 + 4;
    if ((v81 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v79, a2, a3, a4, a5, a6, a7, a8);
      v82 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v82) = -129368031;
    *(_DWORD *)(a1 + 200) += 4;
    v12 = 1;
    goto LABEL_4;
  }
LABEL_38:
  v68 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v68 <= v65)
  {
    __break(0xC471u);
    JUMPOUT(0x1987EC420);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v68[2 * v65 + 2], 1, a4, a5, a6, a7, a8);
LABEL_5:
  *(_QWORD *)v97 = 0xFFFFFFFFLL;
  *(_DWORD *)&v97[8] = -16773311;
  if ((v8 & 0xFFFFFFFD) == 1)
  {
    JSC::AssemblyHelpers::branchIfNotCell(a1, 1, 1, v15, v16, v17, v18, v19, (uint64_t)&v95);
    *(_DWORD *)v97 = v95;
    *(_QWORD *)&v97[4] = v96;
  }
  v20 = *(_QWORD *)(a1 + 352);
  v21 = *(_DWORD *)(a1 + 200);
  if (v21 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v13, v14, v15, v16, v17, v18, v19);
    v21 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = 943747106;
  *(_DWORD *)(a1 + 200) += 4;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987EC378);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load32(a1, v20 + 760, *(char *)(a1 + 272), v15, v16, v17, v18, v19);
  v29 = *(_DWORD *)(a1 + 200);
  if (v29 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v22, v23, v24, v25, v26, v27, v28);
    v29 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = 1795293727;
  v30 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v30;
  if (*(_BYTE *)(a1 + 328))
  {
    while ((signed int)v30 < *(_DWORD *)(a1 + 52))
    {
      if (v30 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v22, v23, v24, v25, v26, v27, v28);
        v30 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v30) = -721215457;
      v30 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v30;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  if (v30 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v22, v23, v24, v25, v26, v27, v28);
    v30 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v30) = 1409286147;
  v31 = *(_DWORD *)(a1 + 200);
  v32 = v31 + 4;
  *(_DWORD *)(a1 + 200) = v31 + 4;
  v33 = v31 + 8;
  v34 = v31 + 4;
  if (v33 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v22, v23, v24, v25, v26, v27, v28);
    v34 = *(_DWORD *)(a1 + 200);
  }
  v35 = -1207811152;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v34) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v36 = -122;
  else
    v36 = -126;
  v95 = v32;
  LODWORD(v96) = 0;
  BYTE4(v96) = v36;
  *(_WORD *)((char *)&v96 + 5) = 3;
  HIBYTE(v96) = -1;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)(a1 + 352), 0, v24, v25, v26, v27, v28);
  v44 = *(unsigned int *)(a1 + 640);
  if (v44 >= 4)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1987EC400);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v44 >> 2), a1 + 264, v39, v40, v41, v42, v43);
  }
  else
  {
    v35 = -1207811137;
  }
  v45 = *(_DWORD *)(a1 + 200);
  if (v45 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v37, v38, v39, v40, v41, v42, v43);
    v45 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v45) = v35;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::appendCall(a1, (uint64_t)operationWriteBarrierSlowPath, v38, v39, v40, v41, v42, v43, &v94);
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v95, a1, v46, v47, v48, v49, v50, v51);
  if ((v8 & 0xFFFFFFFD) == 1)
    result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v97, a1, v53, v54, v55, v56, v57, v58);
  if (v11 == 2)
    return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v98, a1, v53, v54, v55, v56, v57, v58);
  return result;
}

void JSC::JIT::emit_op_get_internal_field(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v9 = *a2;
  if (v9 == 130)
  {
    v12 = *(unsigned int *)(a2 + 2);
    v13 = *(unsigned int *)(a2 + 6);
    v14 = *(_DWORD *)(a2 + 10);
    v15 = *(_DWORD *)(a2 + 14);
  }
  else
  {
    if (v9 == 128)
    {
      v27 = *((__int16 *)a2 + 1);
      v11 = 1073741760;
      if (v27 <= 63)
        v12 = v27;
      else
        v12 = (v27 + 1073741760);
      v13 = *((__int16 *)a2 + 2);
      v14 = *((unsigned __int16 *)a2 + 3);
      v15 = *((unsigned __int16 *)a2 + 4);
      if ((int)v13 <= 63)
        goto LABEL_7;
    }
    else
    {
      v10 = (char)a2[1];
      v11 = 1073741808;
      if (v10 <= 15)
        v12 = v10;
      else
        v12 = (v10 + 1073741808);
      v13 = (char)a2[2];
      v14 = a2[3];
      v15 = a2[4];
      if ((int)v13 < 16)
        goto LABEL_7;
    }
    v13 = (v13 + v11);
  }
  if ((int)v13 < 0x40000000)
  {
LABEL_7:
    v16 = (v13 << 35) | 0x1D;
LABEL_8:
    JSC::MacroAssemblerARM64::load64(a1, v16, 0, a4, a5, a6, a7, a8);
    goto LABEL_9;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v13))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v28, v29, v30, v31, v32);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v34, v35, v36, v37, v38);
    v16 = v13 << 35;
    goto LABEL_8;
  }
  v33 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v33 <= (v13 - 0x40000000))
  {
    __break(0xC471u);
    return;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v33[2 * (v13 - 0x40000000) + 2], 0, v28, v29, v30, v31, v32);
LABEL_9:
  JSC::MacroAssemblerARM64::load64(a1, (unint64_t)(8 * v14 + 16) << 32, 0, v17, v18, v19, v20, v21);
  if (*(_BYTE *)(a1 + 793))
    JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)~v15 << 36) | 0x19, v22, v23, v24, v25, v26);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v12 << 35) | 0x1D, v22, v23, v24, v25, v26);
}

unsigned int *JSC::JIT::emit_op_put_internal_field(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v9 = *a2;
  if (v9 == 130)
  {
    v44 = *(_DWORD *)(a2 + 2);
    v12 = *(_DWORD *)(a2 + 6);
    v13 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    if (v9 == 128)
    {
      v10 = *((__int16 *)a2 + 1);
      v11 = 1073741760;
      v12 = *((unsigned __int16 *)a2 + 2);
      v13 = *((__int16 *)a2 + 3);
      if (v13 > 63)
        v13 += 1073741760;
      if (v10 <= 63)
        goto LABEL_6;
    }
    else
    {
      v10 = (char)a2[1];
      v11 = 1073741808;
      v12 = a2[2];
      v13 = (char)a2[3];
      if (v13 > 15)
        v13 += 1073741808;
      if (v10 <= 15)
      {
LABEL_6:
        v14 = v10;
        v15 = v13;
LABEL_7:
        v16 = (v14 << 35) | 0x1D;
LABEL_8:
        JSC::MacroAssemblerARM64::load64(a1, v16, 2, a4, a5, a6, a7, a8);
        goto LABEL_9;
      }
    }
    v44 = v10 + v11;
  }
  v14 = v44;
  v15 = v13;
  if (v44 < 0x40000000)
    goto LABEL_7;
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v44))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, v45, v46, v47, v48, v49);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v51, v52, v53, v54, v55);
    v16 = (v14 << 35) | 2;
    goto LABEL_8;
  }
  v50 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v50 <= (v14 - 0x40000000))
    goto LABEL_27;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v50[2 * (v14 - 0x40000000) + 2], 2, v45, v46, v47, v48, v49);
LABEL_9:
  if ((int)v15 >= 0x40000000)
  {
    if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v15))
    {
      JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v33, v34, v35, v36, v37);
      JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v39, v40, v41, v42, v43);
      v22 = v15 << 35;
      goto LABEL_11;
    }
    v38 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
    if (*v38 > (v15 - 0x40000000))
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v38[2 * (v15 - 0x40000000) + 2], 0, v33, v34, v35, v36, v37);
      goto LABEL_12;
    }
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x1987EC8E0);
  }
  v22 = (v15 << 35) | 0x1D;
LABEL_11:
  JSC::MacroAssemblerARM64::load64(a1, v22, 0, v17, v18, v19, v20, v21);
LABEL_12:
  JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)((8 * v12 + 16) >> 3) << 35) | 2, v23, v24, v25, v26, v27);
  return JSC::JIT::emitWriteBarrier(a1, v14, v15, 2, v28, v29, v30, v31);
}

void JSC::JIT::emit_op_get_by_val_with_this(uint64_t a1, unsigned __int8 *a2, int8x8_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  _DWORD *v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  char v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  __int16 v130;
  int v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  __int128 v141;

  JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpGetByValWithThis>((int *)&v133, a2, a3);
  v10 = v133;
  v9 = v134;
  v12 = v135;
  v11 = v136;
  if ((int)v134 < 0x40000000)
  {
    v13 = ((unint64_t)v134 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v13, 0, v4, v5, v6, v7, v8);
    goto LABEL_4;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v134))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v83, v84, v85, v86, v87);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v103, v104, v105, v106, v107);
    v13 = v9 << 35;
    goto LABEL_3;
  }
  v88 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v88 <= (v9 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987ECEA8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v88[2 * (v9 - 0x40000000) + 2], 0, v83, v84, v85, v86, v87);
LABEL_4:
  if ((int)v11 < 0x40000000)
  {
    v19 = (v11 << 35) | 0x1D;
LABEL_6:
    JSC::MacroAssemblerARM64::load64(a1, v19, 1, v14, v15, v16, v17, v18);
    goto LABEL_7;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v11))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v89, v90, v91, v92, v93);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v108, v109, v110, v111, v112);
    v19 = (v11 << 35) | 1;
    goto LABEL_6;
  }
  v94 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v94 <= (v11 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987ECEC8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v94[2 * (v11 - 0x40000000) + 2], 1, v89, v90, v91, v92, v93);
LABEL_7:
  if ((int)v12 < 0x40000000)
  {
    v25 = (v12 << 35) | 0x1D;
LABEL_9:
    JSC::MacroAssemblerARM64::load64(a1, v25, 2, v20, v21, v22, v23, v24);
    goto LABEL_10;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v12))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, v95, v96, v97, v98, v99);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v113, v114, v115, v116, v117);
    v25 = (v12 << 35) | 2;
    goto LABEL_9;
  }
  v100 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v100 <= (v12 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987ECEE8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v100[2 * (v12 - 0x40000000) + 2], 2, v95, v96, v97, v98, v99);
LABEL_10:
  v26 = *(_DWORD *)(a1 + 888);
  v27 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v26 + 136), 3, v28, v29, v30, v31);
  v36 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v36)
    v37 = *(unsigned __int16 *)(v36 + 62);
  else
    v37 = *(_DWORD *)(v36 + 220);
  JSC::MacroAssemblerARM64::add64(a1, ((v37 + 7) & 0xFFFFFFF8) + 24 * v138, 25, 4, v32, v33, v34, v35);
  JSC::CodeOrigin::CodeOrigin(&v123, *(unsigned int *)(a1 + 640), 0);
  v38 = (unint64_t)*(unsigned int *)(a1 + 640) >> 2;
  v141 = xmmword_199156F50;
  LOWORD(v122) = 772;
  JSC::JITGetByValWithThisGenerator::JITGetByValWithThisGenerator((uint64_t)&v124, 0, v27, 1, 3, &v123, v38, 5, (uint64_t)&v141, 0, 0, 1, 0, 2, 0, 0, v122);
  if ((v123 & 1) != 0 && (v123 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v123 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
  if ((int)v11 >= 0x40000000)
  {
    v79 = *(_QWORD *)(a1 + 808);
    v80 = (v11 - 0x40000000);
    v81 = *(_DWORD **)(v79 + 120);
    if (!v81 || *v81 <= v80 || *((_BYTE *)v81 + v80 + 4) != 3)
    {
      v82 = *(_DWORD **)(v79 + 112);
      if (*v82 <= v80)
        goto LABEL_58;
      if (*(_QWORD *)&v82[2 * v80 + 2] >= 0xFFFE000000000000)
        *(_BYTE *)(v27 + 1) |= 1u;
    }
  }
  if ((int)v9 < 0x40000000)
    goto LABEL_15;
  v118 = *(_QWORD *)(a1 + 808);
  v119 = (v9 - 0x40000000);
  v120 = *(_DWORD **)(v118 + 120);
  if (v120 && *v120 > v119 && *((_BYTE *)v120 + v119 + 4) == 3)
    goto LABEL_17;
  v121 = *(_DWORD **)(v118 + 112);
  if (*v121 <= v119)
  {
LABEL_58:
    __break(0xC471u);
    JUMPOUT(0x1987ECE2CLL);
  }
  if ((*(_QWORD *)&v121[2 * v119 + 2] & 0xFFFE000000000002) != 0)
  {
LABEL_15:
    JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v41, v42, v43, v44, v45, (uint64_t)&v139);
    v46 = v140;
    v47 = *(_DWORD *)(a1 + 640);
    LODWORD(v141) = v139;
    *(_QWORD *)((char *)&v141 + 4) = v140;
    HIDWORD(v141) = v47;
    v48 = *(unsigned int *)(a1 + 660);
    if ((_DWORD)v48 == *(_DWORD *)(a1 + 656))
    {
      WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v141);
    }
    else
    {
      v49 = *(_QWORD *)(a1 + 648) + 16 * v48;
      *(_DWORD *)v49 = v139;
      *(_QWORD *)(v49 + 4) = v46;
      *(_DWORD *)(v49 + 12) = v47;
      ++*(_DWORD *)(a1 + 660);
    }
  }
LABEL_17:
  JSC::JIT::emitArrayProfilingSiteWithCellAndProfile(a1, (uint64_t)v39, v40, v41, v42, v43, v44, v45);
  JSC::JITGetByValWithThisGenerator::generateBaselineDataICFastPath((JSC::JITGetByValWithThisGenerator *)&v124, (JSC::JIT *)a1, v50, v51, v52, v53, v54, v55);
  v63 = *(_DWORD *)(a1 + 640);
  LODWORD(v141) = -1;
  *(_QWORD *)((char *)&v141 + 4) = 0xFF000F4100000000;
  HIDWORD(v141) = v63;
  v64 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v64 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v141);
  }
  else
  {
    v65 = *(_QWORD *)(a1 + 648) + 16 * v64;
    *(_DWORD *)v65 = -1;
    *(_QWORD *)(v65 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v65 + 12) = v63;
    ++*(_DWORD *)(a1 + 660);
  }
  v66 = *(_DWORD *)(a1 + 476);
  if (v66 == *(_DWORD *)(a1 + 472))
  {
    WTF::Vector<JSC::JITGetByValWithThisGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITGetByValWithThisGenerator&>(a1 + 464, (unint64_t)&v124);
  }
  else
  {
    v101 = *(_QWORD *)(a1 + 464) + 56 * v66;
    v102 = v124;
    *(_BYTE *)(v101 + 16) = v125;
    *(_OWORD *)v101 = v102;
    *(_DWORD *)(v101 + 20) = v126;
    *(_DWORD *)(v101 + 24) = v127;
    *(_DWORD *)(v101 + 28) = v128;
    *(_QWORD *)(v101 + 32) = v129;
    *(_WORD *)(v101 + 40) = v130;
    *(_DWORD *)(v101 + 44) = v131;
    *(_QWORD *)(v101 + 48) = v132;
    ++*(_DWORD *)(a1 + 476);
  }
  JSC::JIT::resetSP((JSC::JIT *)a1, v56, v57, v58, v59, v60, v61, v62);
  JSC::JIT::setFastPathResumePoint((JSC::JIT *)a1, v67, v68, v69, v70, v71, v72, v73);
  if (*(_BYTE *)(a1 + 793))
    JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)~v137 << 36) | 0x19, v74, v75, v76, v77, v78);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v10 << 35) | 0x1D, v74, v75, v76, v77, v78);
}

int *JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpGetByValWithThis>(int *result, unsigned __int8 *a2, int8x8_t a3)
{
  int v3;
  int16x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int v7;

  v3 = *a2;
  if (v3 == 130)
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 2);
    *((_QWORD *)result + 2) = *(_QWORD *)(a2 + 18);
  }
  else if (v3 == 128)
  {
    return JSC::OpGetByValWithThis::OpGetByValWithThis(result, (const unsigned __int16 *)a2 + 1);
  }
  else
  {
    a3.i32[0] = *(_DWORD *)(a2 + 1);
    v4 = (int16x4_t)vmovl_s8(a3).u64[0];
    v5 = vmovl_s16(v4);
    v6.i64[0] = 0xF0000000FLL;
    v6.i64[1] = 0xF0000000FLL;
    *(int8x16_t *)result = vbslq_s8((int8x16_t)vcgtq_s32(v5, v6), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v4), (int8x16_t)v5);
    v7 = a2[6];
    result[4] = a2[5];
    result[5] = v7;
  }
  return result;
}

uint64_t JSC::JIT::emitSlow_op_get_by_val_with_this(uint64_t result, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];
  int v37;

  v8 = *(_DWORD *)(result + 692);
  *(_DWORD *)(result + 692) = v8 + 1;
  if (*(_DWORD *)(result + 476) <= v8)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = result;
    v10 = *(_QWORD *)(result + 464) + 56 * v8;
    JSC::JIT::linkAllSlowCases(result, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)v9, v11, v12, v13, v14, v15, v16, v17, &v37);
    *(_DWORD *)(v10 + 28) = v37;
    JSC::InlineCacheCompiler::generateSlowPathCode(*(_QWORD *)(v9 + 352), *(char *)(v10 + 16), v18, v19, v20, v21, v22, v36);
    JSC::MacroAssembler::nearCallThunk<(WTF::PtrTag)0>(v9, v36[0], v23, v24, v25, v26, v27, v28);
    return JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  }
  return result;
}

void JSC::JIT::emit_op_get_property_enumerator(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  _DWORD *v30;
  uint64_t *v31;
  int v32;
  char *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x8_t v46;
  int v47;
  unsigned int v48;
  int *v49;
  int *v50;
  int v51;
  char *v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  _DWORD *v67;
  uint64_t *v68;
  int v69;
  char *v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int8x8_t v80;
  int v81;
  unsigned int v82;
  int *v83;
  int *v84;
  int v85;
  char *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int8x8_t v93;
  int v94;
  unsigned int v95;
  _DWORD *v96;
  uint64_t *v97;
  int v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unsigned int v106;
  int *v107;
  int *v108;
  int v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int i;
  unsigned int v119;
  char v120;
  int *v121;
  int *v122;
  int v123;
  _BYTE *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  WTF *v138;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  _QWORD v153[2];
  int v154;
  int v155;
  char v156;
  __int16 v157;
  char v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  int v163;
  int v164;
  int v165;
  uint64_t v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  WTF *v171;
  uint64_t v172;
  _BYTE v173[24];
  _BYTE *v174;
  uint64_t v175;
  _BYTE v176[24];

  v9 = *a2;
  if (v9 == 128)
  {
    v152 = *((__int16 *)a2 + 1);
    if (v152 <= 63)
      v11 = *((__int16 *)a2 + 1);
    else
      v11 = v152 + 1073741760;
    v12 = *((__int16 *)a2 + 2);
    v13 = v12 + 1073741760;
    v14 = v12 <= 63;
  }
  else
  {
    if (v9 == 130)
    {
      v11 = *(_DWORD *)(a2 + 2);
      v12 = *(_DWORD *)(a2 + 6);
      goto LABEL_9;
    }
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = (char)a2[1];
    else
      v11 = v10 + 1073741808;
    v12 = (char)a2[2];
    v13 = v12 + 1073741808;
    v14 = v12 <= 15;
  }
  if (!v14)
    v12 = v13;
LABEL_9:
  v15 = v12;
  v174 = v176;
  v175 = 2;
  v171 = (WTF *)v173;
  v172 = 2;
  if (v12 < 0x40000000)
  {
    v16 = ((unint64_t)v12 << 35) | 0x1D;
LABEL_11:
    JSC::MacroAssemblerARM64::load64(a1, v16, 0, a4, a5, a6, a7, a8);
    goto LABEL_12;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v12))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v141, v142, v143, v144, v145);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v147, v148, v149, v150, v151);
    v16 = v15 << 35;
    goto LABEL_11;
  }
  v146 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v146 <= (v15 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987ED7FCLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v146[2 * (v15 - 0x40000000) + 2], 0, v141, v142, v143, v144, v145);
LABEL_12:
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 0, 28, v17, v18, v19, v20, (uint64_t)&v169);
  v28 = v169;
  if (v169 != -1)
  {
    v29 = HIDWORD(v172);
    if (HIDWORD(v172) == (_DWORD)v172)
    {
      v30 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v171, (void *)(HIDWORD(v172) + 1), (unint64_t)&v169, v23, v24, v25, v26, v27);
      v32 = *v30;
      v31 = (uint64_t *)(v30 + 1);
      v28 = v32;
      v29 = HIDWORD(v172);
    }
    else
    {
      v31 = &v170;
    }
    v33 = (char *)v171 + 12 * v29;
    *(_DWORD *)v33 = v28;
    *(_QWORD *)(v33 + 4) = *v31;
    ++HIDWORD(v172);
  }
  v34 = *(_DWORD *)(a1 + 200);
  if (v34 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v21, v22, v23, v24, v25, v26, v27);
    v34 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v34) = 943734785;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::and32(a1, (JSC::ARM64LogicalImmediate *)0xF, 1, 1);
  JSC::MacroAssemblerARM64::branch32(a1, 8, 1, 3, v35, v36, v37, v38, (uint64_t)&v167);
  v47 = v167;
  if (v167 != -1)
  {
    v48 = HIDWORD(v172);
    if (HIDWORD(v172) == (_DWORD)v172)
    {
      v49 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v171, (void *)(HIDWORD(v172) + 1), (unint64_t)&v167, v41, v42, v43, v44, v45);
      v51 = *v49;
      v50 = v49 + 1;
      v47 = v51;
      v48 = HIDWORD(v172);
    }
    else
    {
      v50 = &v168;
    }
    v52 = (char *)v171 + 12 * v48;
    *(_DWORD *)v52 = v47;
    *(_QWORD *)(v52 + 4) = *(_QWORD *)v50;
    ++HIDWORD(v172);
  }
  v53 = *(_DWORD *)(a1 + 200);
  if (v53 + 4 > *(_DWORD *)(a1 + 192))
  {
    v46 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v39, v40, v41, v42, v43, v44, v45).n128_u64[0];
    v53 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v53) = -1203765247;
  v54 = *(_DWORD *)(a1 + 200);
  v55 = v54 + 4;
  *(_DWORD *)(a1 + 200) = v54 + 4;
  if ((v54 + 8) > *(_DWORD *)(a1 + 192))
  {
    v46 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v39, v40, v41, v42, v43, v44, v45).n128_u64[0];
    v55 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v55) = -746787807;
  v56 = *(_DWORD *)(a1 + 200);
  v57 = v56 + 4;
  *(_DWORD *)(a1 + 200) = v56 + 4;
  if ((v56 + 8) > *(_DWORD *)(a1 + 192))
  {
    v46 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v39, v40, v41, v42, v43, v44, v45).n128_u64[0];
    v57 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v57) = -129761247;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, 1, 0xFFFFFFFFLL, v42, v43, v44, v45, (uint64_t)&v165, v46);
  v65 = v165;
  if (v165 != -1)
  {
    v66 = HIDWORD(v172);
    if (HIDWORD(v172) == (_DWORD)v172)
    {
      v67 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v171, (void *)(HIDWORD(v172) + 1), (unint64_t)&v165, v60, v61, v62, v63, v64);
      v69 = *v67;
      v68 = (uint64_t *)(v67 + 1);
      v65 = v69;
      v66 = HIDWORD(v172);
    }
    else
    {
      v68 = &v166;
    }
    v70 = (char *)v171 + 12 * v66;
    *(_DWORD *)v70 = v65;
    *(_QWORD *)(v70 + 4) = *v68;
    ++HIDWORD(v172);
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_100;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v71 = *(_BYTE *)(a1 + 304) & 0x1F | 0x38405020;
  v72 = *(_DWORD *)(a1 + 200);
  if (v72 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v58, v59, v60, v61, v62, v63, v64);
    v72 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v72) = v71;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a1, 0, 17, 1, v61, v62, v63, v64, (uint64_t)&v163);
  v81 = v163;
  if (v163 != -1)
  {
    v82 = HIDWORD(v172);
    if (HIDWORD(v172) == (_DWORD)v172)
    {
      v83 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v171, (void *)(HIDWORD(v172) + 1), (unint64_t)&v163, v75, v76, v77, v78, v79);
      v85 = *v83;
      v84 = v83 + 1;
      v81 = v85;
      v82 = HIDWORD(v172);
    }
    else
    {
      v84 = &v164;
    }
    v86 = (char *)v171 + 12 * v82;
    *(_DWORD *)v86 = v81;
    *(_QWORD *)(v86 + 4) = *(_QWORD *)v84;
    ++HIDWORD(v172);
  }
  v87 = *(_DWORD *)(a1 + 200);
  if (v87 + 4 > *(_DWORD *)(a1 + 192))
  {
    v80 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v73, v74, v75, v76, v77, v78, v79).n128_u64[0];
    v87 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v87) = -129990623;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, 1, 0xFFFFFFFFLL, v76, v77, v78, v79, (uint64_t)&v161, v80);
  v94 = v161;
  if (v161 != -1)
  {
    v95 = HIDWORD(v172);
    if (HIDWORD(v172) == (_DWORD)v172)
    {
      v96 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v171, (void *)(HIDWORD(v172) + 1), (unint64_t)&v161, v88, v89, v90, v91, v92);
      v98 = *v96;
      v97 = (uint64_t *)(v96 + 1);
      v94 = v98;
      v95 = HIDWORD(v172);
    }
    else
    {
      v97 = &v162;
    }
    v99 = (char *)v171 + 12 * v95;
    *(_DWORD *)v99 = v94;
    *(_QWORD *)(v99 + 4) = *v97;
    ++HIDWORD(v172);
  }
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 1, 1, v89, v90, v91, v92, (uint64_t)&v159, v93);
  v105 = v159;
  if (v159 != -1)
  {
    v106 = HIDWORD(v172);
    if (HIDWORD(v172) == (_DWORD)v172)
    {
      v107 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v171, (void *)(HIDWORD(v172) + 1), (unint64_t)&v159, v100, v101, v102, v103, v104);
      v109 = *v107;
      v108 = v107 + 1;
      v105 = v109;
      v106 = HIDWORD(v172);
    }
    else
    {
      v108 = &v160;
    }
    v110 = (char *)v171 + 12 * v106;
    *(_DWORD *)v110 = v105;
    *(_QWORD *)(v110 + 4) = *(_QWORD *)v108;
    ++HIDWORD(v172);
  }
  JSC::MacroAssemblerARM64::store64(a1, 1, ((unint64_t)v11 << 35) | 0x1D, v100, v101, v102, v103, v104);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v111, v112, v113, v114, v115, v116, v117);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v119 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v111, v112, v113, v114, v115, v116, v117);
    v119 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v119) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v120 = 69;
  else
    v120 = 65;
  v154 = i;
  v155 = 0;
  v156 = v120;
  v157 = 15;
  v158 = -1;
  if (i != -1)
  {
    if (HIDWORD(v175) == (_DWORD)v175)
    {
      v121 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v174, (void *)(HIDWORD(v175) + 1), (unint64_t)&v154, v113, v114, v115, v116, v117);
      v123 = *v121;
      v122 = v121 + 1;
      v124 = &v174[12 * HIDWORD(v175)];
      *(_DWORD *)v124 = v123;
    }
    else
    {
      v122 = &v155;
      v124 = &v174[12 * HIDWORD(v175)];
      *(_DWORD *)v124 = i;
    }
    *(_QWORD *)(v124 + 4) = *(_QWORD *)v122;
    ++HIDWORD(v175);
  }
  if (HIDWORD(v172))
  {
    v125 = 0;
    v126 = 0;
    v127 = 12 * HIDWORD(v172);
    do
    {
      if (v126 >= HIDWORD(v172))
      {
        __break(0xC471u);
        JUMPOUT(0x1987ED844);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v171 + v125), a1, v112, v113, v114, v115, v116, v117);
      ++v126;
      v125 += 12;
    }
    while (v127 != v125);
  }
  v153[0] = a1;
  v153[1] = slow_path_get_property_enumerator;
  JSC::JITSlowPathCall::call((JSC::JITSlowPathCall *)v153, v111, v112, v113, v114, v115, v116, v117);
  if (HIDWORD(v175))
  {
    v135 = 0;
    v136 = 0;
    v137 = 12 * HIDWORD(v175);
    while (v136 < HIDWORD(v175))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v174[v135], a1, v129, v130, v131, v132, v133, v134);
      ++v136;
      v135 += 12;
      if (v137 == v135)
        goto LABEL_74;
    }
    __break(0xC471u);
LABEL_100:
    JUMPOUT(0x1987ED770);
  }
LABEL_74:
  v138 = v171;
  if (v173 != (_BYTE *)v171 && v171 != 0)
  {
    v171 = 0;
    LODWORD(v172) = 0;
    WTF::fastFree((unint64_t)v138, v128, v129, v130, v131, v132, v133, v134);
  }
  v140 = (unint64_t)v174;
  if (v176 != v174)
  {
    if (v174)
    {
      v174 = 0;
      LODWORD(v175) = 0;
      WTF::fastFree(v140, v128, v129, v130, v131, v132, v133, v134);
    }
  }
}

void JSC::JIT::emit_op_enumerator_next(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  int v10;
  int16x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  _DWORD *v43;
  uint64_t *v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  char v80;
  int *v81;
  int *v82;
  int v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int8x8_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  int v137;
  unsigned int v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int i;
  unsigned int v157;
  char v158;
  int *v159;
  int *v160;
  int v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int j;
  unsigned int v171;
  char v172;
  int *v173;
  int *v174;
  int v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  WTF *v190;
  WTF *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _DWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _DWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _DWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _DWORD *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  JSC::AssemblerBuffer *v237;
  _QWORD v238[2];
  int v239;
  int v240;
  char v241;
  __int16 v242;
  char v243;
  int v244;
  int v245;
  char v246;
  __int16 v247;
  char v248;
  unsigned int v249[2];
  char v250;
  __int16 v251;
  char v252;
  int v253;
  int v254;
  char v255;
  __int16 v256;
  char v257;
  int v258;
  uint64_t v259;
  WTF *v260;
  uint64_t v261;
  _BYTE v262[24];
  WTF *v263;
  uint64_t v264;
  _BYTE v265[24];
  int8x16_t v266;
  unsigned int v267;
  unsigned int v268;

  v10 = *a2;
  if (v10 == 128)
  {
    JSC::OpEnumeratorNext::OpEnumeratorNext(v266.i32, (const unsigned __int16 *)a2 + 1);
    v19 = v266.u32[2];
    v20 = v266.u32[3];
    v21 = v266.u32[0];
    v18 = v266.u32[1];
    v16 = v267;
    v17 = v268;
  }
  else if (v10 == 130)
  {
    v21 = *(unsigned int *)(a2 + 2);
    v18 = *(unsigned int *)(a2 + 6);
    v266.i32[0] = *(_DWORD *)(a2 + 2);
    v266.i32[1] = v18;
    v19 = *(unsigned int *)(a2 + 10);
    v20 = *(unsigned int *)(a2 + 14);
    v266.i32[2] = *(_DWORD *)(a2 + 10);
    v266.i32[3] = v20;
    v16 = *(unsigned int *)(a2 + 18);
    v17 = *(_DWORD *)(a2 + 22);
    v267 = *(_DWORD *)(a2 + 18);
    v268 = v17;
  }
  else
  {
    a9.i32[0] = *(_DWORD *)(a2 + 1);
    v11 = (int16x4_t)vmovl_s8(a9).u64[0];
    v12 = vmovl_s16(v11);
    v13.i64[0] = 0xF0000000FLL;
    v13.i64[1] = 0xF0000000FLL;
    v14 = vbslq_s8((int8x16_t)vcgtq_s32(v12, v13), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v11), (int8x16_t)v12);
    v266 = v14;
    v15 = (char)a2[5];
    if (v15 <= 15)
      v16 = v15;
    else
      v16 = (v15 + 1073741808);
    v17 = a2[6];
    v18 = v14.u32[1];
    v267 = v16;
    v268 = v17;
    v19 = v14.u32[2];
    v20 = v14.u32[3];
    v21 = v14.u32[0];
  }
  v263 = (WTF *)v265;
  v264 = 2;
  v260 = (WTF *)v262;
  v261 = 2;
  v22 = *(_QWORD *)(a1 + 800);
  v23 = *(_QWORD *)(v22 + 136);
  v24 = *(unsigned __int16 *)(v23 + 76);
  if (!*(_WORD *)(v23 + 76))
    v24 = *(_DWORD *)(v23 + 248);
  if (*(_BYTE *)(((v23 + v24 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16 * v17 + 12) == 2)
  {
    if ((int)v16 >= 0x40000000)
    {
      if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(v22, v16))
      {
        v198 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
        if (*v198 <= (v16 - 0x40000000))
        {
          __break(0xC471u);
          JUMPOUT(0x1987EE5B4);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v198[2 * (v16 - 0x40000000) + 2], 3, v193, v194, v195, v196, v197);
LABEL_13:
        if (!*(_BYTE *)(a1 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x1987EE3D4);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
        v34 = (*(_BYTE *)(a1 + 304) & 0x1F | 0xB8418060) + 49152;
        v237 = (JSC::AssemblerBuffer *)(a1 + 56);
        v35 = *(_DWORD *)(a1 + 200);
        if (v35 + 4 > *(_DWORD *)(a1 + 192))
        {
          v33 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v237, v26, v27, v28, v29, v30, v31, v32).n128_u64[0];
          v35 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v35) = v34;
        *(_DWORD *)(a1 + 200) += 4;
        JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)5, a1, 1, 17, v29, v30, v31, v32, (uint64_t)&v258, v33);
        v41 = v258;
        if (v258 != -1)
        {
          v42 = HIDWORD(v261);
          if (HIDWORD(v261) == (_DWORD)v261)
          {
            v43 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v260, (void *)(HIDWORD(v261) + 1), (unint64_t)&v258, v36, v37, v38, v39, v40);
            v45 = *v43;
            v44 = (uint64_t *)(v43 + 1);
            v41 = v45;
            v42 = HIDWORD(v261);
          }
          else
          {
            v44 = &v259;
          }
          v46 = (char *)v260 + 12 * v42;
          *(_DWORD *)v46 = v41;
          *(_QWORD *)(v46 + 4) = *v44;
          ++HIDWORD(v261);
        }
        if ((int)v20 >= 0x40000000)
        {
          if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v20))
          {
            v204 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
            if (*v204 <= (v20 - 0x40000000))
            {
              __break(0xC471u);
              JUMPOUT(0x1987EE5D4);
            }
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v204[2 * (v20 - 0x40000000) + 2], 2, v199, v200, v201, v202, v203);
LABEL_24:
            v53 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
            if (*(_WORD *)v53)
              v54 = *(unsigned __int16 *)(v53 + 76);
            else
              v54 = *(_DWORD *)(v53 + 248);
            JSC::MacroAssemblerARM64::load8(a1, ((unint64_t)((((v54 + 3) & 0xFFFFFFFC) + 16 * v268 + 12) >> 2) << 34) | 0x19, 4, v48, v49, v50, v51, v52);
            JSC::MacroAssemblerARM64::or32(a1, (JSC::ARM64LogicalImmediate *)2, 4, 4);
            v60 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
            if (*(_WORD *)v60)
              v61 = *(unsigned __int16 *)(v60 + 76);
            else
              v61 = *(_DWORD *)(v60 + 248);
            JSC::MacroAssemblerARM64::store8(a1, 4, ((unint64_t)((((v61 + 3) & 0xFFFFFFFC) + 16 * v268 + 12) >> 2) << 34) | 0x19, v55, v56, v57, v58, v59);
            v69 = *(_DWORD *)(a1 + 200);
            if (v69 + 4 > *(_DWORD *)(a1 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v237, v62, v63, v64, v65, v66, v67, v68);
              v69 = *(_DWORD *)(a1 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 56) + v69) = -1203699615;
            v70 = *(_DWORD *)(a1 + 200);
            v71 = v70 + 4;
            *(_DWORD *)(a1 + 200) = v70 + 4;
            if (!*(_BYTE *)(a1 + 212))
            {
              __break(0xC471u);
              JUMPOUT(0x1987EE414);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
            v72 = *(_BYTE *)(a1 + 304) & 0x1F | 0xB8400040;
            if ((v70 + 8) > *(_DWORD *)(a1 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v237, v62, v63, v64, v65, v66, v67, v68);
              v71 = *(_DWORD *)(a1 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 56) + v71) = v72;
            v73 = *(_DWORD *)(a1 + 200);
            v74 = v73 + 4;
            *(_DWORD *)(a1 + 200) = v73 + 4;
            if ((v73 + 8) > *(_DWORD *)(a1 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v237, v62, v63, v64, v65, v66, v67, v68);
              v74 = *(_DWORD *)(a1 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 56) + v74) = 1796276287;
            v75 = *(_DWORD *)(a1 + 200) + 4;
            *(_DWORD *)(a1 + 200) = v75;
            if (*(_BYTE *)(a1 + 328))
            {
              while ((signed int)v75 < *(_DWORD *)(a1 + 52))
              {
                if (v75 + 4 > *(_DWORD *)(a1 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v237, v62, v63, v64, v65, v66, v67, v68);
                  v75 = *(_DWORD *)(a1 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v75) = -721215457;
                v75 = *(_DWORD *)(a1 + 200) + 4;
                *(_DWORD *)(a1 + 200) = v75;
              }
              *(_DWORD *)(a1 + 208) = 0;
            }
            if (v75 + 4 > *(_DWORD *)(a1 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v237, v62, v63, v64, v65, v66, v67, v68);
              v75 = *(_DWORD *)(a1 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 56) + v75) = 1409286145;
            v76 = *(_DWORD *)(a1 + 200);
            v77 = v76 + 4;
            *(_DWORD *)(a1 + 200) = v76 + 4;
            v78 = v76 + 8;
            v79 = v76 + 4;
            if (v78 > *(_DWORD *)(a1 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v237, v62, v63, v64, v65, v66, v67, v68);
              v79 = *(_DWORD *)(a1 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 56) + v79) = -721215457;
            *(_DWORD *)(a1 + 200) += 4;
            if (*(_BYTE *)(a1 + 328))
              v80 = -122;
            else
              v80 = -126;
            v253 = v77;
            v254 = 0;
            v255 = v80;
            v256 = 1;
            v257 = -1;
            if (v77 != -1)
            {
              if (HIDWORD(v261) == (_DWORD)v261)
              {
                v81 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v260, (void *)(HIDWORD(v261) + 1), (unint64_t)&v253, v64, v65, v66, v67, v68);
                v83 = *v81;
                v82 = v81 + 1;
                v84 = (char *)v260 + 12 * HIDWORD(v261);
                *(_DWORD *)v84 = v83;
              }
              else
              {
                v82 = &v254;
                v84 = (char *)v260 + 12 * HIDWORD(v261);
                *(_DWORD *)v84 = v77;
              }
              *(_QWORD *)(v84 + 4) = *(_QWORD *)v82;
              ++HIDWORD(v261);
            }
            if ((int)v18 >= 0x40000000)
            {
              if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v18))
              {
                v210 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
                if (*v210 <= (v18 - 0x40000000))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1987EE5F4);
                }
                JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v210[2 * (v18 - 0x40000000) + 2], 0, v205, v206, v207, v208, v209);
LABEL_51:
                if ((int)v19 >= 0x40000000)
                {
                  if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v19))
                  {
                    v216 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
                    if (*v216 <= (v19 - 0x40000000))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1987EE614);
                    }
                    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v216[2 * (v19 - 0x40000000) + 2], 1, v211, v212, v213, v214, v215);
                    goto LABEL_54;
                  }
                  JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v211, v212, v213, v214, v215);
                  JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v232, v233, v234, v235, v236);
                  v91 = (v19 << 35) | 1;
                }
                else
                {
                  v91 = ((unint64_t)v19 << 35) | 0x1D;
                }
                JSC::MacroAssemblerARM64::load64(a1, v91, 1, v86, v87, v88, v89, v90);
LABEL_54:
                JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 0, 0, v92, v93, v94, v95, (uint64_t)v238, v96);
                v104 = *(_DWORD *)(a1 + 200);
                if (v104 + 4 > *(_DWORD *)(a1 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v237, v97, v98, v99, v100, v101, v102, v103);
                  v104 = *(_DWORD *)(a1 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v104) = -1862269919;
                *(_DWORD *)(a1 + 200) += 4;
                JSC::MacroAssemblerARM64::store64(a1, 1, ((unint64_t)v19 << 35) | 0x1D, v99, v100, v101, v102, v103);
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v238, a1, v105, v106, v107, v108, v109, v110);
                if (!*(_BYTE *)(a1 + 212))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1987EE484);
                }
                JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, 0xFFFE000000000002, a1 + 264, v111, v112, v113, v114, v115);
                JSC::MacroAssemblerARM64::store64(a1, 16, ((unint64_t)v18 << 35) | 0x1D, v116, v117, v118, v119, v120);
                if (!*(_BYTE *)(a1 + 212))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1987EE4A4);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
                v128 = *(_BYTE *)(a1 + 304) & 0x1F | 0xB8418060;
                v129 = *(_DWORD *)(a1 + 200);
                if (v129 + 4 > *(_DWORD *)(a1 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v237, v121, v122, v123, v124, v125, v126, v127);
                  v129 = *(_DWORD *)(a1 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v129) = v128;
                v130 = *(_DWORD *)(a1 + 200);
                v131 = v130 + 4;
                *(_DWORD *)(a1 + 200) = v130 + 4;
                if ((v130 + 8) > *(_DWORD *)(a1 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v237, v121, v122, v123, v124, v125, v126, v127);
                  v131 = *(_DWORD *)(a1 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v131) = 1796276287;
                v132 = *(_DWORD *)(a1 + 200) + 4;
                *(_DWORD *)(a1 + 200) = v132;
                if (*(_BYTE *)(a1 + 328))
                {
                  while ((signed int)v132 < *(_DWORD *)(a1 + 52))
                  {
                    if (v132 + 4 > *(_DWORD *)(a1 + 192))
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v237, v121, v122, v123, v124, v125, v126, v127);
                      v132 = *(_DWORD *)(a1 + 200);
                    }
                    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v132) = -721215457;
                    v132 = *(_DWORD *)(a1 + 200) + 4;
                    *(_DWORD *)(a1 + 200) = v132;
                  }
                  *(_DWORD *)(a1 + 208) = 0;
                }
                if (v132 + 4 > *(_DWORD *)(a1 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v237, v121, v122, v123, v124, v125, v126, v127);
                  v132 = *(_DWORD *)(a1 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v132) = 1409286146;
                v133 = *(_DWORD *)(a1 + 200);
                v134 = v133 + 4;
                *(_DWORD *)(a1 + 200) = v133 + 4;
                v135 = v133 + 8;
                v136 = v133 + 4;
                if (v135 > *(_DWORD *)(a1 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v237, v121, v122, v123, v124, v125, v126, v127);
                  v136 = *(_DWORD *)(a1 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v136) = -721215457;
                v137 = *(_DWORD *)(a1 + 200);
                v138 = v137 + 4;
                *(_DWORD *)(a1 + 200) = v137 + 4;
                if (*(_BYTE *)(a1 + 328))
                  v139 = -122;
                else
                  v139 = -126;
                v249[0] = v134;
                v249[1] = 0;
                v250 = v139;
                v251 = 2;
                v252 = -1;
                if ((v137 + 8) > *(_DWORD *)(a1 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v237, v121, v122, v123, v124, v125, v126, v127);
                  v138 = *(_DWORD *)(a1 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v138) = -129990557;
                *(_DWORD *)(a1 + 200) += 4;
                JSC::MacroAssemblerARM64::and32(a1, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, 1, 1);
                JSC::MacroAssemblerARM64::load64(a1, 0x300000103uLL, 0x200000000uLL, 3, v140, v141, v142, v143);
                JSC::MacroAssemblerARM64::store64(a1, 3, (v21 << 35) | 0x1D, v144, v145, v146, v147, v148);
                for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
                {
                  if ((i + 4) > *(_DWORD *)(a1 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow(v237, v149, v150, v151, v152, v153, v154, v155);
                    i = *(_DWORD *)(a1 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
                  i = *(_DWORD *)(a1 + 200) + 4;
                }
                v157 = i;
                if ((i + 4) > *(_DWORD *)(a1 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v237, v149, v150, v151, v152, v153, v154, v155);
                  v157 = *(_DWORD *)(a1 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v157) = 335544320;
                *(_DWORD *)(a1 + 200) += 4;
                if (*(_BYTE *)(a1 + 328))
                  v158 = 69;
                else
                  v158 = 65;
                v244 = i;
                v245 = 0;
                v246 = v158;
                v247 = 15;
                v248 = -1;
                if (i != -1)
                {
                  if (HIDWORD(v264) == (_DWORD)v264)
                  {
                    v159 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v263, (void *)(HIDWORD(v264) + 1), (unint64_t)&v244, v151, v152, v153, v154, v155);
                    v161 = *v159;
                    v160 = v159 + 1;
                    v162 = (char *)v263 + 12 * HIDWORD(v264);
                    *(_DWORD *)v162 = v161;
                  }
                  else
                  {
                    v160 = &v245;
                    v162 = (char *)v263 + 12 * HIDWORD(v264);
                    *(_DWORD *)v162 = i;
                  }
                  *(_QWORD *)(v162 + 4) = *(_QWORD *)v160;
                  ++HIDWORD(v264);
                }
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v249, a1, v150, v151, v152, v153, v154, v155);
                v168 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 42208);
                if (v168)
                {
                  if (!*(_BYTE *)(a1 + 212))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1987EE594);
                  }
                  JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, v168, a1 + 264, v163, v164, v165, v166, v167);
                  v169 = 16;
                }
                else
                {
                  v169 = 63;
                }
                JSC::MacroAssemblerARM64::store64(a1, v169, (v21 << 35) | 0x1D, v163, v164, v165, v166, v167);
                for (j = *(_DWORD *)(a1 + 200); j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
                {
                  if ((j + 4) > *(_DWORD *)(a1 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow(v237, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                    j = *(_DWORD *)(a1 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
                  j = *(_DWORD *)(a1 + 200) + 4;
                }
                v171 = j;
                if ((j + 4) > *(_DWORD *)(a1 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v237, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                  v171 = *(_DWORD *)(a1 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v171) = 335544320;
                *(_DWORD *)(a1 + 200) += 4;
                if (*(_BYTE *)(a1 + 328))
                  v172 = 69;
                else
                  v172 = 65;
                v239 = j;
                v240 = 0;
                v241 = v172;
                v242 = 15;
                v243 = -1;
                if (j != -1)
                {
                  if (HIDWORD(v264) == (_DWORD)v264)
                  {
                    v173 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v263, (void *)(HIDWORD(v264) + 1), (unint64_t)&v239, a4, a5, a6, a7, a8);
                    v175 = *v173;
                    v174 = v173 + 1;
                    v176 = (char *)v263 + 12 * HIDWORD(v264);
                    *(_DWORD *)v176 = v175;
                  }
                  else
                  {
                    v174 = &v240;
                    v176 = (char *)v263 + 12 * HIDWORD(v264);
                    *(_DWORD *)v176 = j;
                  }
                  *(_QWORD *)(v176 + 4) = *(_QWORD *)v174;
                  ++HIDWORD(v264);
                }
                if (HIDWORD(v261))
                {
                  v177 = 0;
                  v178 = 0;
                  v179 = 12 * HIDWORD(v261);
                  do
                  {
                    if (v178 >= HIDWORD(v261))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1987EE688);
                    }
                    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v260 + v177), a1, a3, a4, a5, a6, a7, a8);
                    ++v178;
                    v177 += 12;
                  }
                  while (v179 != v177);
                }
                goto LABEL_104;
              }
              JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v205, v206, v207, v208, v209);
              JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v227, v228, v229, v230, v231);
              v85 = v18 << 35;
            }
            else
            {
              v85 = ((unint64_t)v18 << 35) | 0x1D;
            }
            JSC::MacroAssemblerARM64::load64(a1, v85, 0, v64, v65, v66, v67, v68);
            goto LABEL_51;
          }
          JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, v199, v200, v201, v202, v203);
          JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v222, v223, v224, v225, v226);
          v47 = (v20 << 35) | 2;
        }
        else
        {
          v47 = (v20 << 35) | 0x1D;
        }
        JSC::MacroAssemblerARM64::load64(a1, v47, 2, v36, v37, v38, v39, v40);
        goto LABEL_24;
      }
      JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 3, v193, v194, v195, v196, v197);
      JSC::MacroAssemblerARM64::load64(a1, 0xA000000003, 3, v217, v218, v219, v220, v221);
      v25 = (v16 << 35) | 3;
    }
    else
    {
      v25 = ((unint64_t)v16 << 35) | 0x1D;
    }
    JSC::MacroAssemblerARM64::load64(a1, v25, 3, a4, a5, a6, a7, a8);
    goto LABEL_13;
  }
LABEL_104:
  v238[0] = a1;
  v238[1] = slow_path_enumerator_next;
  JSC::JITSlowPathCall::call((JSC::JITSlowPathCall *)v238, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (HIDWORD(v264))
  {
    v187 = 0;
    v188 = 0;
    v189 = 12 * HIDWORD(v264);
    do
    {
      if (v188 >= HIDWORD(v264))
      {
        __break(0xC471u);
        JUMPOUT(0x1987EE680);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v263 + v187), a1, v181, v182, v183, v184, v185, v186);
      ++v188;
      v187 += 12;
    }
    while (v189 != v187);
  }
  v190 = v260;
  if (v262 != (_BYTE *)v260 && v260 != 0)
  {
    v260 = 0;
    LODWORD(v261) = 0;
    WTF::fastFree((unint64_t)v190, v180, v181, v182, v183, v184, v185, v186);
  }
  v192 = v263;
  if (v265 != (_BYTE *)v263)
  {
    if (v263)
    {
      v263 = 0;
      LODWORD(v264) = 0;
      WTF::fastFree((unint64_t)v192, v180, v181, v182, v183, v184, v185, v186);
    }
  }
}

void JSC::JIT::emit_op_enumerator_in_by_val(uint64_t a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9[7];

  JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpEnumeratorInByVal>(a2, (uint64_t)v9);
  JSC::JIT::emit_enumerator_has_propertyImpl<JSC::OpEnumeratorInByVal,JSC::UGPRPair (*)(JSC::CallFrame *,JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)>(a1, v9, v3, v4, v5, v6, v7, v8);
}

void JSC::JIT::emit_enumerator_has_propertyImpl<JSC::OpEnumeratorInByVal,JSC::UGPRPair (*)(JSC::CallFrame *,JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x8_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _DWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _DWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD v166[2];
  unsigned int v167[2];
  char v168;
  __int16 v169;
  char v170;
  _DWORD v171[3];
  _DWORD v172[3];
  _DWORD v173[3];
  WTF *v174;
  uint64_t v175;
  _BYTE v176[24];

  v11 = *a2;
  v10 = a2[1];
  v12 = a2[5];
  v13 = a2[2];
  v174 = (WTF *)v176;
  v175 = 2;
  if ((int)v13 < 0x40000000)
  {
    v14 = (v13 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v14, 0, a4, a5, a6, a7, a8);
    goto LABEL_4;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v13))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v133, v134, v135, v136, v137);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v151, v152, v153, v154, v155);
    v14 = v13 << 35;
    goto LABEL_3;
  }
  v138 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v138 <= (v13 - 0x40000000))
  {
    __break(0xC471u);
    goto LABEL_38;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v138[2 * (v13 - 0x40000000) + 2], 0, v133, v134, v135, v136, v137);
LABEL_4:
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v20)
    v21 = *(unsigned __int16 *)(v20 + 78);
  else
    v21 = *(_DWORD *)(v20 + 252);
  JSC::MacroAssemblerARM64::load8(a1, ((unint64_t)((((v21 + 3) & 0xFFFFFFFC) + 16 * a2[6] + 12) >> 2) << 34) | 0x19, 1, v15, v16, v17, v18, v19);
  JSC::MacroAssemblerARM64::or32((_DWORD *)a1, 0, 1, v22, v23, v24, v25, v26);
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v32)
    v33 = *(unsigned __int16 *)(v32 + 78);
  else
    v33 = *(_DWORD *)(v32 + 252);
  JSC::MacroAssemblerARM64::store8(a1, 1, ((unint64_t)((((v33 + 3) & 0xFFFFFFFC) + 16 * a2[6] + 12) >> 2) << 34) | 0x19, v27, v28, v29, v30, v31);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)2, a1, 0, 0, v34, v35, v36, v37, (uint64_t)v173, v38);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v174, v173, v39, v40, v41, v42, v43, v44);
  if ((int)v10 < 0x40000000)
  {
    v50 = (v10 << 35) | 0x1D;
LABEL_10:
    JSC::MacroAssemblerARM64::load64(a1, v50, 0, v45, v46, v47, v48, v49);
    goto LABEL_11;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v10))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v139, v140, v141, v142, v143);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v156, v157, v158, v159, v160);
    v50 = v10 << 35;
    goto LABEL_10;
  }
  v144 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v144 <= (v10 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987EEBA0);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v144[2 * (v10 - 0x40000000) + 2], 0, v139, v140, v141, v142, v143);
LABEL_11:
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 0, 28, v51, v52, v53, v54, (uint64_t)v172);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v174, v172, v55, v56, v57, v58, v59, v60);
  if ((int)v12 < 0x40000000)
  {
    v66 = (v12 << 35) | 0x1D;
LABEL_13:
    JSC::MacroAssemblerARM64::load64(a1, v66, 1, v61, v62, v63, v64, v65);
    goto LABEL_14;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v12))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v145, v146, v147, v148, v149);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v161, v162, v163, v164, v165);
    v66 = (v12 << 35) | 1;
    goto LABEL_13;
  }
  v150 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v150 <= (v12 - 0x40000000))
  {
    __break(0xC471u);
LABEL_38:
    JUMPOUT(0x1987EEB80);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v150[2 * (v12 - 0x40000000) + 2], 1, v145, v146, v147, v148, v149);
LABEL_14:
  JSC::MacroAssemblerARM64::load32(a1, 0, 0, v67, v68, v69, v70, v71);
  JSC::MacroAssemblerARM64::branch32(a1, 1, 0, 0x1000000001, v72, v73, v74, v75, (uint64_t)v171);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v174, v171, v76, v77, v78, v79, v80, v81);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 7, 0, v82, v83, v84, v85, v86);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v11 << 35) | 0x1D, v87, v88, v89, v90, v91);
  JSC::ARM64Assembler::label((_DWORD *)(a1 + 32), v92, v93, v94, v95, v96, v97, v98, (int *)v166);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 335544320, v99, v100, v101, v102, v103, v104);
  if (*(_BYTE *)(a1 + 328))
    v111 = 69;
  else
    v111 = 65;
  v167[0] = v166[0];
  v167[1] = 0;
  v168 = v111;
  v169 = 15;
  v170 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v174, a1, v105, v106, v107, v108, v109, v110);
  v166[0] = a1;
  v166[1] = slow_path_enumerator_in_by_val;
  JSC::JITSlowPathCall::call((JSC::JITSlowPathCall *)v166, v112, v113, v114, v115, v116, v117, v118);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v167, a1, v119, v120, v121, v122, v123, v124);
  v132 = v174;
  if (v176 != (_BYTE *)v174)
  {
    if (v174)
    {
      v174 = 0;
      LODWORD(v175) = 0;
      WTF::fastFree((unint64_t)v132, v125, v126, v127, v128, v129, v130, v131);
    }
  }
}

void JSC::JIT::emit_enumerator_has_propertyImpl<JSC::OpEnumeratorHasOwnProperty,JSC::UGPRPair (*)(JSC::CallFrame *,JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x8_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  _DWORD *v45;
  uint64_t *v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  int *v61;
  int *v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  char v84;
  int *v85;
  int *v86;
  int v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int i;
  unsigned int v102;
  char v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _DWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _DWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD v154[2];
  unsigned int v155[2];
  char v156;
  __int16 v157;
  char v158;
  int v159;
  int v160;
  char v161;
  __int16 v162;
  char v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  WTF *v168;
  uint64_t v169;
  _BYTE v170[24];

  v12 = *a2;
  v11 = a2[1];
  v13 = a2[5];
  v14 = a2[2];
  v168 = (WTF *)v170;
  v169 = 2;
  if ((int)v14 < 0x40000000)
  {
    v15 = (v14 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v15, 0, a4, a5, a6, a7, a8);
    goto LABEL_4;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v14))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v121, v122, v123, v124, v125);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v139, v140, v141, v142, v143);
    v15 = v14 << 35;
    goto LABEL_3;
  }
  v126 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v126 <= (v14 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987EF314);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v126[2 * (v14 - 0x40000000) + 2], 0, v121, v122, v123, v124, v125);
LABEL_4:
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v21)
    v22 = *(unsigned __int16 *)(v21 + 80);
  else
    v22 = *(_DWORD *)(v21 + 256);
  JSC::MacroAssemblerARM64::load8(a1, ((unint64_t)((((v22 + 3) & 0xFFFFFFFC) + 16 * a2[6] + 12) >> 2) << 34) | 0x19, 1, v16, v17, v18, v19, v20);
  v30 = *(_DWORD *)(a1 + 200);
  if (v30 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v23, v24, v25, v26, v27, v28, v29);
    v30 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v30) = 704643105;
  *(_DWORD *)(a1 + 200) += 4;
  v31 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v31)
    v32 = *(unsigned __int16 *)(v31 + 80);
  else
    v32 = *(_DWORD *)(v31 + 256);
  JSC::MacroAssemblerARM64::store8(a1, 1, ((unint64_t)((((v32 + 3) & 0xFFFFFFFC) + 16 * a2[6] + 12) >> 2) << 34) | 0x19, v25, v26, v27, v28, v29);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)2, a1, 0, 0, v33, v34, v35, v36, (uint64_t)&v166, v37);
  v43 = v166;
  if (v166 != -1)
  {
    v44 = HIDWORD(v169);
    if (HIDWORD(v169) == (_DWORD)v169)
    {
      v45 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v168, (void *)(HIDWORD(v169) + 1), (unint64_t)&v166, v38, v39, v40, v41, v42);
      v47 = *v45;
      v46 = (uint64_t *)(v45 + 1);
      v43 = v47;
      v44 = HIDWORD(v169);
    }
    else
    {
      v46 = &v167;
    }
    v48 = (char *)v168 + 12 * v44;
    *(_DWORD *)v48 = v43;
    *(_QWORD *)(v48 + 4) = *v46;
    ++HIDWORD(v169);
  }
  if ((int)v11 < 0x40000000)
  {
    v49 = (v11 << 35) | 0x1D;
LABEL_17:
    JSC::MacroAssemblerARM64::load64(a1, v49, 0, v38, v39, v40, v41, v42);
    goto LABEL_18;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v11))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v127, v128, v129, v130, v131);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v144, v145, v146, v147, v148);
    v49 = v11 << 35;
    goto LABEL_17;
  }
  v132 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v132 <= (v11 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987EF334);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v132[2 * (v11 - 0x40000000) + 2], 0, v127, v128, v129, v130, v131);
LABEL_18:
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 0, 28, v50, v51, v52, v53, (uint64_t)&v164);
  v59 = v164;
  if (v164 != -1)
  {
    v60 = HIDWORD(v169);
    if (HIDWORD(v169) == (_DWORD)v169)
    {
      v61 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v168, (void *)(HIDWORD(v169) + 1), (unint64_t)&v164, v54, v55, v56, v57, v58);
      v63 = *v61;
      v62 = v61 + 1;
      v59 = v63;
      v60 = HIDWORD(v169);
    }
    else
    {
      v62 = &v165;
    }
    v64 = (char *)v168 + 12 * v60;
    *(_DWORD *)v64 = v59;
    *(_QWORD *)(v64 + 4) = *(_QWORD *)v62;
    ++HIDWORD(v169);
  }
  if ((int)v13 < 0x40000000)
  {
    v65 = (v13 << 35) | 0x1D;
LABEL_25:
    JSC::MacroAssemblerARM64::load64(a1, v65, 1, v54, v55, v56, v57, v58);
    goto LABEL_26;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v13))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v133, v134, v135, v136, v137);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v149, v150, v151, v152, v153);
    v65 = (v13 << 35) | 1;
    goto LABEL_25;
  }
  v138 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v138 <= (v13 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987EF354);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v138[2 * (v13 - 0x40000000) + 2], 1, v133, v134, v135, v136, v137);
LABEL_26:
  v73 = *(_DWORD *)(a1 + 200);
  if (v73 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v66, v67, v68, v69, v70, v71, v72);
    v73 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v73) = -1203765248;
  v74 = *(_DWORD *)(a1 + 200);
  v75 = v74 + 4;
  *(_DWORD *)(a1 + 200) = v74 + 4;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987EF27CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v76 = *(_BYTE *)(a1 + 304) & 0x1F | 0xB8410020;
  if ((v74 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v66, v67, v68, v69, v70, v71, v72);
    v75 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v75) = v76;
  v77 = *(_DWORD *)(a1 + 200);
  v78 = v77 + 4;
  *(_DWORD *)(a1 + 200) = v77 + 4;
  if ((v77 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v66, v67, v68, v69, v70, v71, v72);
    v78 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v78) = 1796276255;
  v79 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v79;
  if (*(_BYTE *)(a1 + 328))
  {
    while ((signed int)v79 < *(_DWORD *)(a1 + 52))
    {
      if (v79 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v66, v67, v68, v69, v70, v71, v72);
        v79 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v79) = -721215457;
      v79 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v79;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  if (v79 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v66, v67, v68, v69, v70, v71, v72);
    v79 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v79) = 1409286145;
  v80 = *(_DWORD *)(a1 + 200);
  v81 = v80 + 4;
  *(_DWORD *)(a1 + 200) = v80 + 4;
  v82 = v80 + 8;
  v83 = v80 + 4;
  if (v82 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v66, v67, v68, v69, v70, v71, v72);
    v83 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v83) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v84 = -122;
  else
    v84 = -126;
  v159 = v81;
  v160 = 0;
  v161 = v84;
  v162 = 1;
  v163 = -1;
  if (v81 != -1)
  {
    if (HIDWORD(v169) == (_DWORD)v169)
    {
      v85 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v168, (void *)(HIDWORD(v169) + 1), (unint64_t)&v159, v68, v69, v70, v71, v72);
      v87 = *v85;
      v86 = v85 + 1;
      v88 = (char *)v168 + 12 * HIDWORD(v169);
      *(_DWORD *)v88 = v87;
    }
    else
    {
      v86 = &v160;
      v88 = (char *)v168 + 12 * HIDWORD(v169);
      *(_DWORD *)v88 = v81;
    }
    *(_QWORD *)(v88 + 4) = *(_QWORD *)v86;
    ++HIDWORD(v169);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 7, 0, v68, v69, v70, v71, v72);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v12 << 35) | 0x1D, v89, v90, v91, v92, v93);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v94, v95, v96, v97, v98, v99, v100);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v102 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v94, v95, v96, v97, v98, v99, v100);
    v102 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v102) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v103 = 69;
  else
    v103 = 65;
  v155[0] = i;
  v155[1] = 0;
  v156 = v103;
  v157 = 15;
  v158 = -1;
  if (HIDWORD(v169))
  {
    v104 = 0;
    v105 = 0;
    v106 = 12 * HIDWORD(v169);
    do
    {
      if (v105 >= HIDWORD(v169))
      {
        __break(0xC471u);
        JUMPOUT(0x1987EF36CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v168 + v104), a1, v95, v96, v97, v98, v99, v100);
      ++v105;
      v104 += 12;
    }
    while (v106 != v104);
  }
  v154[0] = a1;
  v154[1] = a3;
  JSC::JITSlowPathCall::call((JSC::JITSlowPathCall *)v154, v94, v95, v96, v97, v98, v99, v100);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v155, a1, v107, v108, v109, v110, v111, v112);
  v120 = v168;
  if (v170 != (_BYTE *)v168)
  {
    if (v168)
    {
      v168 = 0;
      LODWORD(v169) = 0;
      WTF::fastFree((unint64_t)v120, v113, v114, v115, v116, v117, v118, v119);
    }
  }
}

void JSC::JIT::emit_op_enumerator_get_by_val(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int8x8_t v67;
  _QWORD *v68;
  int v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int i;
  unsigned int v128;
  char v129;
  int *v130;
  int *v131;
  int v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int j;
  unsigned int v159;
  char v160;
  int *v161;
  int *v162;
  int v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  unint64_t v174;
  int v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int8x8_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _DWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int v208;
  int v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  _QWORD *v242;
  __int128 *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  WTF *v260;
  uint64_t v261;
  __int128 v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _DWORD *v269;
  int v270;
  _DWORD *v271;
  uint64_t v272;
  uint64_t v273;
  _DWORD *v274;
  int v275;
  _DWORD *v276;
  uint64_t v277;
  uint64_t v278;
  _DWORD *v279;
  int v280;
  _DWORD *v281;
  uint64_t v282;
  uint64_t v283;
  _DWORD *v284;
  int v285;
  _DWORD *v286;
  uint64_t v287;
  uint64_t v288;
  _DWORD *v289;
  int v290;
  _DWORD *v291;
  uint64_t v292;
  uint64_t v293;
  _DWORD *v294;
  int v295;
  _DWORD *v296;
  _DWORD *v297;
  unint64_t v298;
  BOOL v299;
  char **v300;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _DWORD *v307;
  unint64_t v308;
  BOOL v309;
  char **v310;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  _DWORD *v317;
  unint64_t v318;
  BOOL v319;
  char **v320;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _DWORD *v327;
  unint64_t v328;
  char **v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _DWORD *v335;
  unint64_t v336;
  BOOL v337;
  char **v338;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  _DWORD *v345;
  unint64_t v346;
  char **v347;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  JSC::AssemblerBuffer *v360;
  uint64_t v361;
  __int128 v362;
  char v363;
  int v364;
  int v365;
  int v366;
  uint64_t v367;
  __int16 v368;
  int v369;
  unsigned int v370[3];
  int v371;
  int v372;
  char v373;
  __int16 v374;
  char v375;
  int v376;
  int v377;
  char v378;
  __int16 v379;
  char v380;
  unsigned int v381[2];
  char v382;
  __int16 v383;
  char v384;
  unsigned int v385[2];
  char v386;
  __int16 v387;
  char v388;
  unsigned int v389[3];
  int v390;
  uint64_t v391;
  WTF *v392;
  uint64_t v393;
  _BYTE v394[24];
  __int128 v395;
  __int128 v396;
  int v397;
  _OWORD v398[3];

  v9 = *a2;
  if (v9 == 130)
  {
    v10 = *(_OWORD *)(a2 + 18);
    v395 = *(_OWORD *)(a2 + 2);
    v396 = v10;
  }
  else if (v9 == 128)
  {
    JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal((int *)&v395, (const unsigned __int16 *)a2 + 1);
  }
  else
  {
    JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal((int *)&v395, a2 + 1);
  }
  v12 = v395;
  v11 = DWORD1(v395);
  v14 = DWORD2(v395);
  v13 = HIDWORD(v395);
  v16 = v396;
  v15 = DWORD1(v396);
  v392 = (WTF *)v394;
  v393 = 2;
  if (SDWORD1(v395) < 0x40000000)
  {
    v17 = ((unint64_t)DWORD1(v395) << 35) | 0x1D;
LABEL_5:
    JSC::MacroAssemblerARM64::load64(a1, v17, 0, a4, a5, a6, a7, a8);
    goto LABEL_6;
  }
  v267 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v268 = (DWORD1(v395) - 0x40000000);
  v269 = *(_DWORD **)(v267 + 120);
  if (!v269 || *v269 <= v268)
    goto LABEL_160;
  v270 = *((unsigned __int8 *)v269 + v268 + 4);
  if ((v270 - 1) >= 2)
  {
    if (v270)
    {
      if (v270 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987F0650);
      }
      goto LABEL_171;
    }
LABEL_160:
    v297 = *(_DWORD **)(v267 + 112);
    if (*v297 <= v268)
    {
      __break(0xC471u);
      JUMPOUT(0x1987F0A74);
    }
    v298 = *(_QWORD *)&v297[2 * v268 + 2];
    if (v298)
      v299 = (v298 & 0xFFFE000000000002) == 0;
    else
      v299 = 0;
    if (!v299)
      goto LABEL_132;
    v300 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v298 & 0xFFFFFFFE) + 0x4C));
    if (v300 != &JSC::SymbolTable::s_info && v300 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_132;
LABEL_171:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v302, v303, v304, v305, v306);
    v17 = v11 << 35;
    goto LABEL_5;
  }
LABEL_132:
  v271 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v271 <= v268)
  {
    __break(0xC471u);
    JUMPOUT(0x1987F09B4);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v271[2 * v268 + 2], 0, a4, a5, a6, a7, a8);
LABEL_6:
  if ((int)v14 < 0x40000000)
  {
    v23 = (v14 << 35) | 0x1D;
LABEL_8:
    JSC::MacroAssemblerARM64::load64(a1, v23, 6, v18, v19, v20, v21, v22);
    goto LABEL_9;
  }
  v272 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v273 = (v14 - 0x40000000);
  v274 = *(_DWORD **)(v272 + 120);
  if (!v274 || *v274 <= v273)
    goto LABEL_173;
  v275 = *((unsigned __int8 *)v274 + v273 + 4);
  if ((v275 - 1) >= 2)
  {
    if (v275)
    {
      if (v275 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987F0678);
      }
      goto LABEL_184;
    }
LABEL_173:
    v307 = *(_DWORD **)(v272 + 112);
    if (*v307 <= v273)
    {
      __break(0xC471u);
      JUMPOUT(0x1987F0A94);
    }
    v308 = *(_QWORD *)&v307[2 * v273 + 2];
    if (v308)
      v309 = (v308 & 0xFFFE000000000002) == 0;
    else
      v309 = 0;
    if (!v309)
      goto LABEL_137;
    v310 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v308 & 0xFFFFFFFE) + 0x4C));
    if (v310 != &JSC::SymbolTable::s_info && v310 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_137;
LABEL_184:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 6, v18, v19, v20, v21, v22);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000006, 6, v312, v313, v314, v315, v316);
    v23 = (v14 << 35) | 6;
    goto LABEL_8;
  }
LABEL_137:
  v276 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v276 <= v273)
  {
    __break(0xC471u);
    JUMPOUT(0x1987F09D4);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v276[2 * v273 + 2], 6, v18, v19, v20, v21, v22);
LABEL_9:
  if ((int)v13 < 0x40000000)
  {
    v29 = (v13 << 35) | 0x1D;
LABEL_11:
    JSC::MacroAssemblerARM64::load64(a1, v29, 1, v24, v25, v26, v27, v28);
    goto LABEL_12;
  }
  v277 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v278 = (v13 - 0x40000000);
  v279 = *(_DWORD **)(v277 + 120);
  if (!v279 || *v279 <= v278)
    goto LABEL_186;
  v280 = *((unsigned __int8 *)v279 + v278 + 4);
  if ((v280 - 1) >= 2)
  {
    if (v280)
    {
      if (v280 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987F06A0);
      }
      goto LABEL_197;
    }
LABEL_186:
    v317 = *(_DWORD **)(v277 + 112);
    if (*v317 <= v278)
    {
      __break(0xC471u);
      JUMPOUT(0x1987F0AB4);
    }
    v318 = *(_QWORD *)&v317[2 * v278 + 2];
    if (v318)
      v319 = (v318 & 0xFFFE000000000002) == 0;
    else
      v319 = 0;
    if (!v319)
      goto LABEL_142;
    v320 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v318 & 0xFFFFFFFE) + 0x4C));
    if (v320 != &JSC::SymbolTable::s_info && v320 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_142;
LABEL_197:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v24, v25, v26, v27, v28);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v322, v323, v324, v325, v326);
    v29 = (v13 << 35) | 1;
    goto LABEL_11;
  }
LABEL_142:
  v281 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v281 <= v278)
  {
    __break(0xC471u);
    JUMPOUT(0x1987F09F4);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v281[2 * v278 + 2], 1, v24, v25, v26, v27, v28);
LABEL_12:
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v35)
    v36 = *(unsigned __int16 *)(v35 + 86);
  else
    v36 = *(_DWORD *)(v35 + 268);
  JSC::MacroAssemblerARM64::load8(a1, ((unint64_t)((((v36 + 3) & 0xFFFFFFFC) + 16 * HIDWORD(v396) + 12) >> 2) << 34) | 0x19, 5, v30, v31, v32, v33, v34);
  v360 = (JSC::AssemblerBuffer *)(a1 + 56);
  v44 = *(_DWORD *)(a1 + 200);
  if (v44 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v37, v38, v39, v40, v41, v42, v43);
    v44 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v44) = 705036453;
  *(_DWORD *)(a1 + 200) += 4;
  v45 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v45)
    v46 = *(unsigned __int16 *)(v45 + 86);
  else
    v46 = *(_DWORD *)(v45 + 268);
  JSC::MacroAssemblerARM64::store8(a1, 5, ((unint64_t)((((v46 + 3) & 0xFFFFFFFC) + 16 * HIDWORD(v396) + 12) >> 2) << 34) | 0x19, v39, v40, v41, v42, v43);
  v47 = *(_DWORD *)(a1 + 888);
  v48 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v47 + 136), 2, v49, v50, v51, v52);
  v57 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v57)
    v58 = *(unsigned __int16 *)(v57 + 86);
  else
    v58 = *(_DWORD *)(v57 + 268);
  JSC::MacroAssemblerARM64::add64(a1, ((v58 + 3) & 0xFFFFFFFC) + 16 * HIDWORD(v396), 25, 3, v53, v54, v55, v56);
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 0, 28, v59, v60, v61, v62, (uint64_t)&v390);
  v68 = (_QWORD *)(a1 + 648);
  v69 = *(_DWORD *)(a1 + 640);
  LODWORD(v362) = v390;
  *(_QWORD *)((char *)&v362 + 4) = v391;
  HIDWORD(v362) = v69;
  v70 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v70 == *(_DWORD *)(a1 + 656))
  {
    v263 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v70 + 1, (unint64_t)&v362);
    v264 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v264 = *(_DWORD *)v263;
    *(_QWORD *)(v264 + 4) = *(_QWORD *)(v263 + 4);
    v73 = (_DWORD *)(v264 + 12);
    v71 = (_DWORD *)(v263 + 12);
  }
  else
  {
    v71 = (_DWORD *)&v362 + 3;
    v72 = *v68 + 16 * v70;
    *(_DWORD *)v72 = v390;
    *(_QWORD *)(v72 + 4) = *(_QWORD *)((char *)&v362 + 4);
    v73 = (_DWORD *)(v72 + 12);
  }
  *v73 = *v71;
  ++*(_DWORD *)(a1 + 660);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)5, a1, 1, 6, v63, v64, v65, v66, (uint64_t)v389, v67);
  if ((int)v15 < 0x40000000)
  {
    v79 = (v15 << 35) | 0x1D;
LABEL_24:
    JSC::MacroAssemblerARM64::load64(a1, v79, 4, v74, v75, v76, v77, v78);
    goto LABEL_25;
  }
  v282 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v283 = (v15 - 0x40000000);
  v284 = *(_DWORD **)(v282 + 120);
  if (!v284 || *v284 <= v283)
    goto LABEL_199;
  v285 = *((unsigned __int8 *)v284 + v283 + 4);
  if ((v285 - 1) >= 2)
  {
    if (v285)
    {
      if (v285 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987F06C8);
      }
      goto LABEL_204;
    }
LABEL_199:
    v327 = *(_DWORD **)(v282 + 112);
    if (*v327 <= v283)
    {
      __break(0xC471u);
      JUMPOUT(0x1987F0AD4);
    }
    v328 = *(_QWORD *)&v327[2 * v283 + 2];
    if (!v328)
      goto LABEL_147;
    if ((v328 & 0xFFFE000000000002) != 0)
      goto LABEL_147;
    v329 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v328 & 0xFFFFFFFE) + 0x4C));
    if (v329 != &JSC::SymbolTable::s_info && v329 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_147;
LABEL_204:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 4, v74, v75, v76, v77, v78);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000004, 4, v330, v331, v332, v333, v334);
    v79 = (v15 << 35) | 4;
    goto LABEL_24;
  }
LABEL_147:
  v286 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v286 <= v283)
  {
    __break(0xC471u);
    JUMPOUT(0x1987F0A14);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v286[2 * v283 + 2], 4, v74, v75, v76, v77, v78);
LABEL_25:
  v87 = *(_DWORD *)(a1 + 200);
  if (v87 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v80, v81, v82, v83, v84, v85, v86);
    v87 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v87) = -1203765243;
  v88 = *(_DWORD *)(a1 + 200);
  v89 = v88 + 4;
  *(_DWORD *)(a1 + 200) = v88 + 4;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987F0758);
  }
  v90 = v12;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v91 = (*(_BYTE *)(a1 + 304) & 0x1F | 0xB8420080) - 0x10000;
  if ((v88 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v80, v81, v82, v83, v84, v85, v86);
    v89 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v89) = v91;
  v92 = *(_DWORD *)(a1 + 200);
  v93 = v92 + 4;
  *(_DWORD *)(a1 + 200) = v92 + 4;
  if ((v92 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v80, v81, v82, v83, v84, v85, v86);
    v93 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v93) = 1796276415;
  v94 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v94;
  if (*(_BYTE *)(a1 + 328))
  {
    while ((signed int)v94 < *(_DWORD *)(a1 + 52))
    {
      if (v94 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v360, v80, v81, v82, v83, v84, v85, v86);
        v94 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v94) = -721215457;
      v94 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v94;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  if (v94 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v80, v81, v82, v83, v84, v85, v86);
    v94 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v94) = 1409286145;
  v95 = *(_DWORD *)(a1 + 200);
  v96 = v95 + 4;
  *(_DWORD *)(a1 + 200) = v95 + 4;
  v97 = v95 + 8;
  v98 = v95 + 4;
  if (v97 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v80, v81, v82, v83, v84, v85, v86);
    v98 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v98) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v99 = -122;
  else
    v99 = -126;
  v385[0] = v96;
  v385[1] = 0;
  v386 = v99;
  v387 = 1;
  v388 = -1;
  if ((int)v16 < 0x40000000)
  {
    v100 = (v16 << 35) | 0x1D;
LABEL_42:
    JSC::MacroAssemblerARM64::load64(a1, v100, 5, v82, v83, v84, v85, v86);
    goto LABEL_43;
  }
  v287 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v288 = (v16 - 0x40000000);
  v289 = *(_DWORD **)(v287 + 120);
  if (!v289 || *v289 <= v288)
    goto LABEL_206;
  v290 = *((unsigned __int8 *)v289 + v288 + 4);
  if ((v290 - 1) >= 2)
  {
    if (v290)
    {
      if (v290 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987F06F0);
      }
      goto LABEL_217;
    }
LABEL_206:
    v335 = *(_DWORD **)(v287 + 112);
    if (*v335 <= v288)
    {
      __break(0xC471u);
      JUMPOUT(0x1987F0AF4);
    }
    v336 = *(_QWORD *)&v335[2 * v288 + 2];
    if (v336)
      v337 = (v336 & 0xFFFE000000000002) == 0;
    else
      v337 = 0;
    if (!v337)
      goto LABEL_152;
    v338 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v336 & 0xFFFFFFFE) + 0x4C));
    if (v338 != &JSC::SymbolTable::s_info && v338 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_152;
LABEL_217:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 5, v82, v83, v84, v85, v86);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000005, 5, v340, v341, v342, v343, v344);
    v100 = (v16 << 35) | 5;
    goto LABEL_42;
  }
LABEL_152:
  v291 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v291 <= v288)
  {
    __break(0xC471u);
    JUMPOUT(0x1987F0A34);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v291[2 * v288 + 2], 5, v82, v83, v84, v85, v86);
LABEL_43:
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987F07B8);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v108 = *(_BYTE *)(a1 + 304) & 0x1F | 0xB8420080;
  v109 = *(_DWORD *)(a1 + 200);
  if (v109 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v101, v102, v103, v104, v105, v106, v107);
    v109 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v109) = v108;
  v110 = *(_DWORD *)(a1 + 200);
  v111 = v110 + 4;
  *(_DWORD *)(a1 + 200) = v110 + 4;
  if ((v110 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v101, v102, v103, v104, v105, v106, v107);
    v111 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v111) = 1796276415;
  v112 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v112;
  if (*(_BYTE *)(a1 + 328))
  {
    while ((signed int)v112 < *(_DWORD *)(a1 + 52))
    {
      if (v112 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v360, v101, v102, v103, v104, v105, v106, v107);
        v112 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v112) = -721215457;
      v112 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v112;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  if (v112 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v101, v102, v103, v104, v105, v106, v107);
    v112 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v112) = 1409286146;
  v113 = *(_DWORD *)(a1 + 200);
  v114 = v113 + 4;
  *(_DWORD *)(a1 + 200) = v113 + 4;
  v115 = v113 + 8;
  v116 = v113 + 4;
  if (v115 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v101, v102, v103, v104, v105, v106, v107);
    v116 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v116) = -721215457;
  v117 = *(_DWORD *)(a1 + 200);
  v118 = v117 + 4;
  *(_DWORD *)(a1 + 200) = v117 + 4;
  if (*(_BYTE *)(a1 + 328))
    v119 = -122;
  else
    v119 = -126;
  v381[0] = v114;
  v381[1] = 0;
  v382 = v119;
  v383 = 2;
  v384 = -1;
  if ((v117 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v101, v102, v103, v104, v105, v106, v107);
    v118 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v118) = -1824490331;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::load64(a1, 0x300000500uLL, 0x200000010uLL, 0, v104, v105, v106, v107);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v360, v120, v121, v122, v123, v124, v125, v126);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v128 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v120, v121, v122, v123, v124, v125, v126);
    v128 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v128) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v129 = 69;
  else
    v129 = 65;
  v376 = i;
  v377 = 0;
  v378 = v129;
  v379 = 15;
  v380 = -1;
  if (i != -1)
  {
    if (HIDWORD(v393) == (_DWORD)v393)
    {
      v130 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v392, (void *)(HIDWORD(v393) + 1), (unint64_t)&v376, v122, v123, v124, v125, v126);
      v132 = *v130;
      v131 = v130 + 1;
      v133 = (char *)v392 + 12 * HIDWORD(v393);
      *(_DWORD *)v133 = v132;
    }
    else
    {
      v131 = &v377;
      v133 = (char *)v392 + 12 * HIDWORD(v393);
      *(_DWORD *)v133 = i;
    }
    *(_QWORD *)(v133 + 4) = *(_QWORD *)v131;
    ++HIDWORD(v393);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v381, a1, v121, v122, v123, v124, v125, v126);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987F0868);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v141 = *(_BYTE *)(a1 + 272) & 0x1F | 0xB8420080;
  v142 = *(_DWORD *)(a1 + 200);
  if (v142 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v134, v135, v136, v137, v138, v139, v140);
    v142 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v142) = v141;
  v143 = *(_DWORD *)(a1 + 200);
  v144 = v143 + 4;
  *(_DWORD *)(a1 + 200) = v143 + 4;
  if ((v143 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v134, v135, v136, v137, v138, v139, v140);
    v144 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v144) = 1259339941;
  v145 = *(_DWORD *)(a1 + 200);
  v146 = v145 + 4;
  *(_DWORD *)(a1 + 200) = v145 + 4;
  if ((v145 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v134, v135, v136, v137, v138, v139, v140);
    v146 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v146) = 1258619877;
  v147 = *(_DWORD *)(a1 + 200);
  v148 = v147 + 4;
  *(_DWORD *)(a1 + 200) = v147 + 4;
  if ((v147 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v134, v135, v136, v137, v138, v139, v140);
    v148 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v148) = -1824490331;
  v149 = *(_DWORD *)(a1 + 200);
  v150 = v149 + 4;
  *(_DWORD *)(a1 + 200) = v149 + 4;
  if ((v149 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v134, v135, v136, v137, v138, v139, v140);
    v150 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v150) = -129990652;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::load64(a1, 0x300000504uLL, 0x2FFFFFFF0uLL, 0, v137, v138, v139, v140);
  for (j = *(_DWORD *)(a1 + 200); j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v360, v151, v152, v153, v154, v155, v156, v157);
      j = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
    j = *(_DWORD *)(a1 + 200) + 4;
  }
  v159 = j;
  if ((j + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v151, v152, v153, v154, v155, v156, v157);
    v159 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v159) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v160 = 69;
  else
    v160 = 65;
  v371 = j;
  v372 = 0;
  v373 = v160;
  v374 = 15;
  v375 = -1;
  if (j != -1)
  {
    if (HIDWORD(v393) == (_DWORD)v393)
    {
      v161 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v392, (void *)(HIDWORD(v393) + 1), (unint64_t)&v371, v153, v154, v155, v156, v157);
      v163 = *v161;
      v162 = v161 + 1;
      v164 = (char *)v392 + 12 * HIDWORD(v393);
      *(_DWORD *)v164 = v163;
    }
    else
    {
      v162 = &v372;
      v164 = (char *)v392 + 12 * HIDWORD(v393);
      *(_DWORD *)v164 = j;
    }
    *(_QWORD *)(v164 + 4) = *(_QWORD *)v162;
    ++HIDWORD(v393);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v385, a1, v152, v153, v154, v155, v156, v157);
  v172 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v172)
    v173 = *(unsigned __int16 *)(v172 + 86);
  else
    v173 = *(_DWORD *)(v172 + 268);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987F0918);
  }
  v174 = ((unint64_t)((((v173 + 3) & 0xFFFFFFFC) + 16 * HIDWORD(v396) + 12) >> 2) << 34) | 0x19;
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v175 = *(char *)(a1 + 272) | 0x321D03E0;
  v176 = *(_DWORD *)(a1 + 200);
  if (v176 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v165, v166, v167, v168, v169, v170, v171);
    v176 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v176) = v175;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store8(a1, 16, v174, v167, v168, v169, v170, v171);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v389, a1, v177, v178, v179, v180, v181, v182);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, a1, 0, 6, v183, v184, v185, v186, (uint64_t)v370, v187);
  if ((int)v16 < 0x40000000)
  {
    JSC::MacroAssemblerARM64::load64(a1, (v16 << 35) | 0x1D, 1, v188, v189, v190, v191, v192);
    v199 = v90;
    goto LABEL_100;
  }
  v292 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v293 = (v16 - 0x40000000);
  v294 = *(_DWORD **)(v292 + 120);
  v199 = v90;
  if (!v294 || *v294 <= v293)
    goto LABEL_219;
  v295 = *((unsigned __int8 *)v294 + v293 + 4);
  if ((v295 - 1) >= 2)
  {
    if (v295)
    {
      if (v295 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987F0718);
      }
      goto LABEL_227;
    }
LABEL_219:
    v345 = *(_DWORD **)(v292 + 112);
    if (*v345 <= v293)
    {
      __break(0xC471u);
      JUMPOUT(0x1987F0B14);
    }
    v346 = *(_QWORD *)&v345[2 * v293 + 2];
    if (!v346 || (v346 & 0xFFFE000000000002) != 0)
      goto LABEL_157;
    v347 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v346 & 0xFFFFFFFE) + 0x4C));
    if (v347 != &JSC::SymbolTable::s_info && v347 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_157;
LABEL_227:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v188, v189, v190, v191, v192);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v349, v350, v351, v352, v353);
    JSC::MacroAssemblerARM64::load64(a1, (v16 << 35) | 1, 1, v354, v355, v356, v357, v358);
    goto LABEL_100;
  }
LABEL_157:
  v296 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v296 <= v293)
  {
    __break(0xC471u);
    JUMPOUT(0x1987F0A54);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v296[2 * v293 + 2], 1, v188, v189, v190, v191, v192);
LABEL_100:
  v200 = (_DWORD *)(a1 + 640);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v370, a1, v193, v194, v195, v196, v197, v198);
  if (*(_BYTE *)(a1 + 793))
  {
    v208 = *(_DWORD *)(a1 + 200);
    if (v208 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v360, v201, v202, v203, v204, v205, v206, v207);
      v208 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v208) = -1203765244;
    v209 = *(_DWORD *)(a1 + 200);
    v210 = v209 + 4;
    *(_DWORD *)(a1 + 200) = v209 + 4;
    if ((v209 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v360, v201, v202, v203, v204, v205, v206, v207);
      v210 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v210) = -1207959452;
    *(_DWORD *)(a1 + 200) += 4;
  }
  v211 = 0;
  v212 = *v200;
  v213 = 2;
  if ((_DWORD)v212 != -1 && (_DWORD)v212 != 0x3FFFFFFF)
  {
    if (v212 >> 28)
    {
      v211 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v211 = 0;
      *(_DWORD *)(v211 + 8) = v212;
      LODWORD(v212) = *v200;
      v213 = 1;
    }
    else
    {
      v213 = 0;
      v211 = v212 << 36;
    }
  }
  v361 = v211 | v213;
  v398[0] = xmmword_199156F50;
  LOWORD(v359) = 515;
  JSC::JITGetByValGenerator::JITGetByValGenerator((uint64_t)&v362, 0, v48, 1, 0, &v361, v212 >> 2, 4, (uint64_t)v398, 0, 0, 1, 0, 0, v359);
  if ((v361 & 1) != 0 && (v361 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v361 & 0xFFFFFFFF8, v214, v215, v216, v217, v218, v219, v220);
  JSC::JITInlineCacheGenerator::generateBaselineDataICFastPath((uint64_t)&v362, (JSC::MacroAssemblerARM64 *)a1, 2, v216, v217, v218, v219, v220);
  JSC::JIT::resetSP((JSC::JIT *)a1, v221, v222, v223, v224, v225, v226, v227);
  v235 = *(_DWORD *)(a1 + 640);
  *(_QWORD *)((char *)v398 + 4) = 0xFF000F4100000000;
  LODWORD(v398[0]) = -1;
  HIDWORD(v398[0]) = v235;
  v236 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v236 == *(_DWORD *)(a1 + 656))
  {
    v265 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v236 + 1, (unint64_t)v398);
    v266 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v266 = *(_DWORD *)v265;
    *(_QWORD *)(v266 + 4) = *(_QWORD *)(v265 + 4);
    *(_DWORD *)(v266 + 12) = *(_DWORD *)(v265 + 12);
  }
  else
  {
    v237 = *v68 + 16 * v236;
    *(_DWORD *)v237 = -1;
    *(_QWORD *)(v237 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v237 + 12) = v235;
  }
  ++*(_DWORD *)(a1 + 660);
  v238 = (_QWORD *)(a1 + 432);
  v239 = *(unsigned int *)(a1 + 444);
  if ((_DWORD)v239 == *(_DWORD *)(a1 + 440))
  {
    v243 = (__int128 *)WTF::Vector<JSC::JITGetByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v238, v239 + 1, (unint64_t)&v362);
    v261 = *(_QWORD *)(a1 + 432) + 56 * *(unsigned int *)(a1 + 444);
    v262 = *v243;
    *(_BYTE *)(v261 + 16) = *((_BYTE *)v243 + 16);
    *(_OWORD *)v261 = v262;
    *(_DWORD *)(v261 + 20) = *((_DWORD *)v243 + 5);
    *(_DWORD *)(v261 + 24) = *((_DWORD *)v243 + 6);
    *(_DWORD *)(v261 + 28) = *((_DWORD *)v243 + 7);
    *(_QWORD *)(v261 + 32) = *((_QWORD *)v243 + 4);
    *(_WORD *)(v261 + 40) = *((_WORD *)v243 + 20);
    *(_DWORD *)(v261 + 44) = *((_DWORD *)v243 + 11);
    v242 = (_QWORD *)(v261 + 48);
  }
  else
  {
    v240 = *v238 + 56 * v239;
    v241 = v362;
    *(_BYTE *)(v240 + 16) = v363;
    *(_OWORD *)v240 = v241;
    *(_DWORD *)(v240 + 20) = v364;
    *(_DWORD *)(v240 + 24) = v365;
    *(_DWORD *)(v240 + 28) = v366;
    *(_QWORD *)(v240 + 32) = v367;
    *(_WORD *)(v240 + 40) = v368;
    *(_DWORD *)(v240 + 44) = v369;
    v242 = (_QWORD *)(v240 + 48);
    v243 = &v362;
  }
  *v242 = *((_QWORD *)v243 + 6);
  ++*(_DWORD *)(a1 + 444);
  if (HIDWORD(v393))
  {
    v244 = 0;
    v245 = 0;
    v246 = 12 * HIDWORD(v393);
    do
    {
      if (v245 >= HIDWORD(v393))
      {
        __break(0xC471u);
        JUMPOUT(0x1987F0B64);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v392 + v244), a1, v229, v230, v231, v232, v233, v234);
      ++v245;
      v244 += 12;
    }
    while (v246 != v244);
  }
  v247 = *(_DWORD *)(a1 + 200);
  v397 = v247;
  if (v247 < *(_DWORD *)(a1 + 52))
  {
    do
    {
      if ((v247 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v360, v228, v229, v230, v231, v232, v233, v234);
        v247 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v247) = -721215457;
      v247 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v247;
    }
    while (v247 < *(_DWORD *)(a1 + 52));
    v397 = v247;
  }
  *(_DWORD *)(a1 + 208) = 0;
  WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>((uint64_t *)(a1 + 408), (int *)(a1 + 640), &v397, (uint64_t)v398);
  if (*(_BYTE *)(a1 + 793))
    JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)~DWORD2(v396) << 36) | 0x19, v248, v249, v250, v251, v252);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v199 << 35) | 0x1D, v248, v249, v250, v251, v252);
  v260 = v392;
  if (v394 != (_BYTE *)v392)
  {
    if (v392)
    {
      v392 = 0;
      LODWORD(v393) = 0;
      WTF::fastFree((unint64_t)v260, v253, v254, v255, v256, v257, v258, v259);
    }
  }
}

void JSC::JIT::emit_op_enumerator_put_by_val(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int8x8_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  char v101;
  int *v102;
  int *v103;
  int v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int8x8_t v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  int *v123;
  int *v124;
  int v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  int v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int i;
  unsigned int v155;
  char v156;
  int *v157;
  int *v158;
  int v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  unsigned int v171;
  int v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int j;
  unsigned int v186;
  char v187;
  int *v188;
  int *v189;
  int v190;
  _BYTE *v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  unint64_t v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int8x8_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  int v231;
  unsigned int v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  _QWORD *v265;
  __int128 *v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  void *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  WTF *v277;
  unint64_t v279;
  uint64_t v280;
  __int128 v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _DWORD *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _DWORD *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  _DWORD *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  _DWORD *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _DWORD *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  _DWORD *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  _DWORD *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  JSC::AssemblerBuffer *v360;
  uint64_t v361;
  __int128 v362;
  char v363;
  int v364;
  int v365;
  int v366;
  uint64_t v367;
  __int16 v368;
  int v369;
  unsigned int v370[3];
  int v371;
  int v372;
  char v373;
  __int16 v374;
  char v375;
  int v376;
  int v377;
  char v378;
  __int16 v379;
  char v380;
  unsigned int v381[2];
  char v382;
  __int16 v383;
  char v384;
  int v385;
  int v386;
  int v387;
  int v388;
  char v389;
  __int16 v390;
  char v391;
  WTF *v392;
  uint64_t v393;
  _BYTE v394[24];
  unsigned int v395[3];
  int v396;
  uint64_t v397;
  _BYTE *v398;
  uint64_t v399;
  _BYTE v400[24];
  __int128 v401;
  uint64_t v402;
  unsigned __int8 v403;
  int v404;
  _OWORD v405[2];

  v9 = *a2;
  if (v9 == 130)
  {
    v401 = *(_OWORD *)(a2 + 2);
    v402 = *(_QWORD *)(a2 + 18);
    v403 = *(_DWORD *)(a2 + 26);
    v404 = *(_DWORD *)(a2 + 30);
  }
  else if (v9 == 128)
  {
    JSC::OpEnumeratorPutByVal::OpEnumeratorPutByVal((uint64_t)&v401, (const unsigned __int16 *)a2 + 1);
  }
  else
  {
    JSC::OpEnumeratorPutByVal::OpEnumeratorPutByVal((uint64_t)&v401, a2 + 1);
  }
  v10 = v401;
  v11 = DWORD1(v401);
  v13 = DWORD2(v401);
  v12 = HIDWORD(v401);
  v15 = v402;
  v14 = HIDWORD(v402);
  v398 = v400;
  v399 = 2;
  if ((int)v401 < 0x40000000)
  {
    v16 = ((unint64_t)v401 << 35) | 0x1D;
LABEL_5:
    JSC::MacroAssemblerARM64::load64(a1, v16, 0, a4, a5, a6, a7, a8);
    goto LABEL_6;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v401))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v282, v283, v284, v285, v286);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v324, v325, v326, v327, v328);
    v16 = v10 << 35;
    goto LABEL_5;
  }
  v287 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v287 <= (v10 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987F2060);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v287[2 * (v10 - 0x40000000) + 2], 0, v282, v283, v284, v285, v286);
LABEL_6:
  if ((int)v14 < 0x40000000)
  {
    v22 = (v14 << 35) | 0x1D;
LABEL_8:
    JSC::MacroAssemblerARM64::load64(a1, v22, 2, v17, v18, v19, v20, v21);
    goto LABEL_9;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v14))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, v288, v289, v290, v291, v292);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v329, v330, v331, v332, v333);
    v22 = (v14 << 35) | 2;
    goto LABEL_8;
  }
  v293 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v293 <= (v14 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987F2080);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v293[2 * (v14 - 0x40000000) + 2], 2, v288, v289, v290, v291, v292);
LABEL_9:
  if ((int)v13 < 0x40000000)
  {
    v28 = (v13 << 35) | 0x1D;
LABEL_11:
    JSC::MacroAssemblerARM64::load64(a1, v28, 1, v23, v24, v25, v26, v27);
    goto LABEL_12;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v13))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v294, v295, v296, v297, v298);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v334, v335, v336, v337, v338);
    v28 = (v13 << 35) | 1;
    goto LABEL_11;
  }
  v299 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v299 <= (v13 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987F20A0);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v299[2 * (v13 - 0x40000000) + 2], 1, v294, v295, v296, v297, v298);
LABEL_12:
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v33)
    v34 = *(unsigned __int16 *)(v33 + 82);
  else
    v34 = *(_DWORD *)(v33 + 260);
  JSC::MacroAssemblerARM64::add64(a1, ((v34 + 3) & 0xFFFFFFFC) + 16 * v404, 25, 4, v29, v30, v31, v32);
  if ((int)v11 < 0x40000000)
  {
    v40 = (v11 << 35) | 0x1D;
LABEL_16:
    JSC::MacroAssemblerARM64::load64(a1, v40, 6, v35, v36, v37, v38, v39);
    goto LABEL_17;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v11))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 6, v300, v301, v302, v303, v304);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000006, 6, v339, v340, v341, v342, v343);
    v40 = (v11 << 35) | 6;
    goto LABEL_16;
  }
  v305 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v305 <= (v11 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987F20C0);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v305[2 * (v11 - 0x40000000) + 2], 6, v300, v301, v302, v303, v304);
LABEL_17:
  v46 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v46)
    v47 = *(unsigned __int16 *)(v46 + 82);
  else
    v47 = *(_DWORD *)(v46 + 260);
  JSC::MacroAssemblerARM64::load8(a1, ((unint64_t)((((v47 + 3) & 0xFFFFFFFC) + 16 * v404 + 12) >> 2) << 34) | 0x19, 5, v41, v42, v43, v44, v45);
  v360 = (JSC::AssemblerBuffer *)(a1 + 56);
  v55 = *(_DWORD *)(a1 + 200);
  if (v55 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v48, v49, v50, v51, v52, v53, v54);
    v55 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v55) = 705036453;
  *(_DWORD *)(a1 + 200) += 4;
  v56 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v56)
    v57 = *(unsigned __int16 *)(v56 + 82);
  else
    v57 = *(_DWORD *)(v56 + 260);
  JSC::MacroAssemblerARM64::store8(a1, 5, ((unint64_t)((((v57 + 3) & 0xFFFFFFFC) + 16 * v404 + 12) >> 2) << 34) | 0x19, v50, v51, v52, v53, v54);
  v58 = *(_DWORD *)(a1 + 888);
  v59 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v58 + 136), 3, v60, v61, v62, v63);
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 0, 28, v64, v65, v66, v67, (uint64_t)&v396);
  v73 = *(_DWORD *)(a1 + 640);
  LODWORD(v362) = v396;
  *(_QWORD *)((char *)&v362 + 4) = v397;
  HIDWORD(v362) = v73;
  v74 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v74 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v362);
  }
  else
  {
    v75 = *(_QWORD *)(a1 + 648) + 16 * v74;
    *(_DWORD *)v75 = v396;
    *(_QWORD *)(v75 + 4) = *(_QWORD *)((char *)&v362 + 4);
    *(_DWORD *)(v75 + 12) = HIDWORD(v362);
    ++*(_DWORD *)(a1 + 660);
  }
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)5, a1, 1, 6, v68, v69, v70, v71, (uint64_t)v395, v72);
  v392 = (WTF *)v394;
  v393 = 2;
  if ((int)v15 < 0x40000000)
  {
    v81 = (v15 << 35) | 0x1D;
LABEL_27:
    JSC::MacroAssemblerARM64::load64(a1, v81, 5, v76, v77, v78, v79, v80);
    goto LABEL_28;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v15))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 5, v306, v307, v308, v309, v310);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000005, 5, v344, v345, v346, v347, v348);
    v81 = (v15 << 35) | 5;
    goto LABEL_27;
  }
  v311 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v311 <= (v15 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987F20E0);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v311[2 * (v15 - 0x40000000) + 2], 5, v306, v307, v308, v309, v310);
LABEL_28:
  v89 = *(_DWORD *)(a1 + 200);
  if (v89 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v82, v83, v84, v85, v86, v87, v88);
    v89 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v89) = -1203765242;
  v90 = *(_DWORD *)(a1 + 200);
  v91 = v90 + 4;
  *(_DWORD *)(a1 + 200) = v90 + 4;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987F1DD4);
  }
  v92 = v59;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v93 = (*(_BYTE *)(a1 + 304) & 0x1F | 0xB84200A0) - 0x10000;
  if ((v90 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v82, v83, v84, v85, v86, v87, v88);
    v91 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v91) = v93;
  v94 = *(_DWORD *)(a1 + 200);
  v95 = v94 + 4;
  *(_DWORD *)(a1 + 200) = v94 + 4;
  if ((v94 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v82, v83, v84, v85, v86, v87, v88);
    v95 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v95) = 1796276447;
  v96 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v96;
  if (*(_BYTE *)(a1 + 328))
  {
    while ((signed int)v96 < *(_DWORD *)(a1 + 52))
    {
      if (v96 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v360, v82, v83, v84, v85, v86, v87, v88);
        v96 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v96) = -721215457;
      v96 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v96;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  if (v96 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v82, v83, v84, v85, v86, v87, v88);
    v96 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v96) = 1409286145;
  v97 = *(_DWORD *)(a1 + 200);
  v98 = v97 + 4;
  *(_DWORD *)(a1 + 200) = v97 + 4;
  v99 = v97 + 8;
  v100 = v97 + 4;
  if (v99 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v82, v83, v84, v85, v86, v87, v88);
    v100 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v100) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v101 = -122;
  else
    v101 = -126;
  v387 = v98;
  v388 = 0;
  v389 = v101;
  v390 = 1;
  v391 = -1;
  if (v98 != -1)
  {
    if (HIDWORD(v393) == (_DWORD)v393)
    {
      v102 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v392, (void *)(HIDWORD(v393) + 1), (unint64_t)&v387, v84, v85, v86, v87, v88);
      v104 = *v102;
      v103 = v102 + 1;
      v105 = (char *)v392 + 12 * HIDWORD(v393);
      *(_DWORD *)v105 = v104;
    }
    else
    {
      v103 = &v388;
      v105 = (char *)v392 + 12 * HIDWORD(v393);
      *(_DWORD *)v105 = v98;
    }
    *(_QWORD *)(v105 + 4) = *(_QWORD *)v103;
    ++HIDWORD(v393);
  }
  JSC::MacroAssemblerARM64::lshift64((_DWORD *)a1, 6, 4, 6, v85, v86, v87, v88);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987F1E34);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v114 = *(_BYTE *)(a1 + 304) & 0x1F | 0xB84100C0;
  v115 = *(_DWORD *)(a1 + 200);
  if (v115 + 4 > *(_DWORD *)(a1 + 192))
  {
    v113 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v360, v106, v107, v108, v109, v110, v111, v112).n128_u64[0];
    v115 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v115) = v114;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x40000, a1, 1, 17, v109, v110, v111, v112, (uint64_t)&v385, v113);
  v121 = v385;
  if (v385 != -1)
  {
    v122 = HIDWORD(v393);
    if (HIDWORD(v393) == (_DWORD)v393)
    {
      v123 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v392, (void *)(HIDWORD(v393) + 1), (unint64_t)&v385, v116, v117, v118, v119, v120);
      v125 = *v123;
      v124 = v123 + 1;
      v121 = v125;
      v122 = HIDWORD(v393);
    }
    else
    {
      v124 = &v386;
    }
    v126 = (char *)v392 + 12 * v122;
    *(_DWORD *)v126 = v121;
    *(_QWORD *)(v126 + 4) = *(_QWORD *)v124;
    ++HIDWORD(v393);
  }
  if ((int)v12 < 0x40000000)
  {
    v127 = (v12 << 35) | 0x1D;
LABEL_58:
    JSC::MacroAssemblerARM64::load64(a1, v127, 6, v116, v117, v118, v119, v120);
    goto LABEL_59;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v12))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 6, v312, v313, v314, v315, v316);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000006, 6, v349, v350, v351, v352, v353);
    v127 = (v12 << 35) | 6;
    goto LABEL_58;
  }
  v317 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v317 <= (v12 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987F2100);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v317[2 * (v12 - 0x40000000) + 2], 6, v312, v313, v314, v315, v316);
LABEL_59:
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987F1E64);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v135 = *(_BYTE *)(a1 + 304) & 0x1F | 0xB84200A0;
  v136 = *(_DWORD *)(a1 + 200);
  if (v136 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v128, v129, v130, v131, v132, v133, v134);
    v136 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v136) = v135;
  v137 = *(_DWORD *)(a1 + 200);
  v138 = v137 + 4;
  *(_DWORD *)(a1 + 200) = v137 + 4;
  if ((v137 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v128, v129, v130, v131, v132, v133, v134);
    v138 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v138) = 1796276447;
  v139 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v139;
  if (*(_BYTE *)(a1 + 328))
  {
    while ((signed int)v139 < *(_DWORD *)(a1 + 52))
    {
      if (v139 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v360, v128, v129, v130, v131, v132, v133, v134);
        v139 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v139) = -721215457;
      v139 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v139;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  if (v139 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v128, v129, v130, v131, v132, v133, v134);
    v139 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v139) = 1409286146;
  v140 = *(_DWORD *)(a1 + 200);
  v141 = v140 + 4;
  *(_DWORD *)(a1 + 200) = v140 + 4;
  v142 = v140 + 8;
  v143 = v140 + 4;
  if (v142 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v128, v129, v130, v131, v132, v133, v134);
    v143 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v143) = -721215457;
  v144 = *(_DWORD *)(a1 + 200);
  v145 = v144 + 4;
  *(_DWORD *)(a1 + 200) = v144 + 4;
  if (*(_BYTE *)(a1 + 328))
    v146 = -122;
  else
    v146 = -126;
  v381[0] = v141;
  v381[1] = 0;
  v382 = v146;
  v383 = 2;
  v384 = -1;
  if ((v144 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v128, v129, v130, v131, v132, v133, v134);
    v145 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v145) = -1824490298;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 2, 0x300000600uLL, 0x200000010uLL, v131, v132, v133, v134);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v360, v147, v148, v149, v150, v151, v152, v153);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v155 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v147, v148, v149, v150, v151, v152, v153);
    v155 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v155) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v156 = 69;
  else
    v156 = 65;
  v376 = i;
  v377 = 0;
  v378 = v156;
  v379 = 15;
  v380 = -1;
  if (i != -1)
  {
    if (HIDWORD(v399) == (_DWORD)v399)
    {
      v157 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v398, (void *)(HIDWORD(v399) + 1), (unint64_t)&v376, v149, v150, v151, v152, v153);
      v159 = *v157;
      v158 = v157 + 1;
      v160 = &v398[12 * HIDWORD(v399)];
      *(_DWORD *)v160 = v159;
    }
    else
    {
      v158 = &v377;
      v160 = &v398[12 * HIDWORD(v399)];
      *(_DWORD *)v160 = i;
    }
    *(_QWORD *)(v160 + 4) = *(_QWORD *)v158;
    ++HIDWORD(v399);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v381, a1, v148, v149, v150, v151, v152, v153);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987F1F14);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v168 = *(_BYTE *)(a1 + 272) & 0x1F | 0xB84200A0;
  v169 = *(_DWORD *)(a1 + 200);
  if (v169 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v161, v162, v163, v164, v165, v166, v167);
    v169 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v169) = v168;
  v170 = *(_DWORD *)(a1 + 200);
  v171 = v170 + 4;
  *(_DWORD *)(a1 + 200) = v170 + 4;
  if ((v170 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v161, v162, v163, v164, v165, v166, v167);
    v171 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v171) = 1259339974;
  v172 = *(_DWORD *)(a1 + 200);
  v173 = v172 + 4;
  *(_DWORD *)(a1 + 200) = v172 + 4;
  if ((v172 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v161, v162, v163, v164, v165, v166, v167);
    v173 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v173) = 1258685414;
  v174 = *(_DWORD *)(a1 + 200);
  v175 = v174 + 4;
  *(_DWORD *)(a1 + 200) = v174 + 4;
  if ((v174 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v161, v162, v163, v164, v165, v166, v167);
    v175 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v175) = -1824490298;
  v176 = *(_DWORD *)(a1 + 200);
  v177 = v176 + 4;
  *(_DWORD *)(a1 + 200) = v176 + 4;
  if ((v176 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v161, v162, v163, v164, v165, v166, v167);
    v177 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v177) = -129990651;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 2, 0x300000605uLL, 0x2FFFFFFF0uLL, v164, v165, v166, v167);
  for (j = *(_DWORD *)(a1 + 200); j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v360, v178, v179, v180, v181, v182, v183, v184);
      j = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
    j = *(_DWORD *)(a1 + 200) + 4;
  }
  v186 = j;
  if ((j + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v178, v179, v180, v181, v182, v183, v184);
    v186 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v186) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v187 = 69;
  else
    v187 = 65;
  v371 = j;
  v372 = 0;
  v373 = v187;
  v374 = 15;
  v375 = -1;
  if (j != -1)
  {
    if (HIDWORD(v399) == (_DWORD)v399)
    {
      v188 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v398, (void *)(HIDWORD(v399) + 1), (unint64_t)&v371, v180, v181, v182, v183, v184);
      v190 = *v188;
      v189 = v188 + 1;
      v191 = &v398[12 * HIDWORD(v399)];
      *(_DWORD *)v191 = v190;
    }
    else
    {
      v189 = &v372;
      v191 = &v398[12 * HIDWORD(v399)];
      *(_DWORD *)v191 = j;
    }
    *(_QWORD *)(v191 + 4) = *(_QWORD *)v189;
    ++HIDWORD(v399);
  }
  if (HIDWORD(v393))
  {
    v192 = 0;
    v193 = 0;
    v194 = 12 * HIDWORD(v393);
    do
    {
      if (v193 >= HIDWORD(v393))
      {
        __break(0xC471u);
        JUMPOUT(0x1987F2170);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v392 + v192), a1, v179, v180, v181, v182, v183, v184);
      ++v193;
      v192 += 12;
    }
    while (v194 != v192);
  }
  v195 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v195)
    v196 = *(unsigned __int16 *)(v195 + 82);
  else
    v196 = *(_DWORD *)(v195 + 260);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987F1FC4);
  }
  v197 = ((unint64_t)((((v196 + 3) & 0xFFFFFFFC) + 16 * v404 + 12) >> 2) << 34) | 0x19;
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v198 = *(char *)(a1 + 272) | 0x321D03E0;
  v199 = *(_DWORD *)(a1 + 200);
  if (v199 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v360, v178, v179, v180, v181, v182, v183, v184);
    v199 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v199) = v198;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store8(a1, 16, v197, v180, v181, v182, v183, v184);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v395, a1, v200, v201, v202, v203, v204, v205);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, a1, 0, 6, v206, v207, v208, v209, (uint64_t)v370, v210);
  if ((int)v12 < 0x40000000)
  {
    v216 = (v12 << 35) | 0x1D;
LABEL_120:
    JSC::MacroAssemblerARM64::load64(a1, v216, 1, v211, v212, v213, v214, v215);
    goto LABEL_121;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v12))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v318, v319, v320, v321, v322);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v354, v355, v356, v357, v358);
    v216 = (v12 << 35) | 1;
    goto LABEL_120;
  }
  v323 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v323 <= (v12 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987F2120);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v323[2 * (v12 - 0x40000000) + 2], 1, v318, v319, v320, v321, v322);
LABEL_121:
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v370, a1, v217, v218, v219, v220, v221, v222);
  if (*(_BYTE *)(a1 + 793))
  {
    v230 = *(_DWORD *)(a1 + 200);
    if (v230 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v360, v223, v224, v225, v226, v227, v228, v229);
      v230 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v230) = -1203765243;
    v231 = *(_DWORD *)(a1 + 200);
    v232 = v231 + 4;
    *(_DWORD *)(a1 + 200) = v231 + 4;
    if ((v231 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v360, v223, v224, v225, v226, v227, v228, v229);
      v232 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v232) = -1207959419;
    *(_DWORD *)(a1 + 200) += 4;
  }
  v233 = 0;
  v234 = v403;
  v235 = *(unsigned int *)(a1 + 640);
  v236 = 2;
  if ((_DWORD)v235 != -1 && (_DWORD)v235 != 0x3FFFFFFF)
  {
    if (v235 >> 28)
    {
      v233 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v233 = 0;
      *(_DWORD *)(v233 + 8) = v235;
      LODWORD(v235) = *(_DWORD *)(a1 + 640);
      v236 = 1;
    }
    else
    {
      v236 = 0;
      v233 = v235 << 36;
    }
  }
  v361 = v233 | v236;
  v405[0] = xmmword_199156F50;
  LOWORD(v359) = 772;
  if (v234)
    v237 = 11;
  else
    v237 = 10;
  JSC::JITPutByValGenerator::JITPutByValGenerator((uint64_t)&v362, 0, v92, 1, 0, &v361, v235 >> 2, v237, (uint64_t)v405, 0, 0, 1, 0, 2, v359);
  if ((v361 & 1) != 0 && (v361 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v361 & 0xFFFFFFFF8, v238, v239, v240, v241, v242, v243, v244);
  JSC::JITInlineCacheGenerator::generateBaselineDataICFastPath((uint64_t)&v362, (JSC::MacroAssemblerARM64 *)a1, 3, v240, v241, v242, v243, v244);
  JSC::JIT::resetSP((JSC::JIT *)a1, v245, v246, v247, v248, v249, v250, v251);
  v258 = *(_DWORD *)(a1 + 640);
  *(_QWORD *)((char *)v405 + 4) = 0xFF000F4100000000;
  LODWORD(v405[0]) = -1;
  HIDWORD(v405[0]) = v258;
  v259 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v259 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)v405);
  }
  else
  {
    v260 = *(_QWORD *)(a1 + 648) + 16 * v259;
    *(_DWORD *)v260 = -1;
    *(_QWORD *)(v260 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v260 + 12) = v258;
    ++*(_DWORD *)(a1 + 660);
  }
  v261 = (_QWORD *)(a1 + 496);
  v262 = *(unsigned int *)(a1 + 508);
  if ((_DWORD)v262 == *(_DWORD *)(a1 + 504))
  {
    v266 = (__int128 *)WTF::Vector<JSC::JITPutByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v261, v262 + 1, (unint64_t)&v362);
    v280 = *(_QWORD *)(a1 + 496) + 56 * *(unsigned int *)(a1 + 508);
    v281 = *v266;
    *(_BYTE *)(v280 + 16) = *((_BYTE *)v266 + 16);
    *(_OWORD *)v280 = v281;
    *(_DWORD *)(v280 + 20) = *((_DWORD *)v266 + 5);
    *(_DWORD *)(v280 + 24) = *((_DWORD *)v266 + 6);
    *(_DWORD *)(v280 + 28) = *((_DWORD *)v266 + 7);
    *(_QWORD *)(v280 + 32) = *((_QWORD *)v266 + 4);
    *(_WORD *)(v280 + 40) = *((_WORD *)v266 + 20);
    *(_DWORD *)(v280 + 44) = *((_DWORD *)v266 + 11);
    v265 = (_QWORD *)(v280 + 48);
  }
  else
  {
    v263 = *v261 + 56 * v262;
    v264 = v362;
    *(_BYTE *)(v263 + 16) = v363;
    *(_OWORD *)v263 = v264;
    *(_DWORD *)(v263 + 20) = v364;
    *(_DWORD *)(v263 + 24) = v365;
    *(_DWORD *)(v263 + 28) = v366;
    *(_QWORD *)(v263 + 32) = v367;
    *(_WORD *)(v263 + 40) = v368;
    *(_DWORD *)(v263 + 44) = v369;
    v265 = (_QWORD *)(v263 + 48);
    v266 = &v362;
  }
  *v265 = *((_QWORD *)v266 + 6);
  ++*(_DWORD *)(a1 + 508);
  if (HIDWORD(v399))
  {
    v267 = 0;
    v268 = 0;
    v269 = 12 * HIDWORD(v399);
    do
    {
      if (v268 >= HIDWORD(v399))
      {
        __break(0xC471u);
        JUMPOUT(0x1987F2178);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v398[v267], a1, v252, v253, v254, v255, v256, v257);
      ++v268;
      v267 += 12;
    }
    while (v269 != v267);
  }
  JSC::JIT::emitWriteBarrier(a1, v10, 0x3FFFFFFFLL, 1, v254, v255, v256, v257);
  v277 = v392;
  if (v394 != (_BYTE *)v392 && v392 != 0)
  {
    v392 = 0;
    LODWORD(v393) = 0;
    WTF::fastFree((unint64_t)v277, v270, v271, v272, v273, v274, v275, v276);
  }
  v279 = (unint64_t)v398;
  if (v400 != v398)
  {
    if (v398)
    {
      v398 = 0;
      LODWORD(v399) = 0;
      WTF::fastFree(v279, v270, v271, v272, v273, v274, v275, v276);
    }
  }
}

uint64_t JSC::JIT::emitVarInjectionCheck(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;

  if ((_DWORD)a2)
  {
    v9 = result;
    v10 = a3 & 0x1F | 0xF8408340;
    v11 = *(_DWORD *)(result + 200);
    if (v11 + 4 > *(_DWORD *)(result + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(result + 56), a2, a3, a4, a5, a6, a7, a8);
      v11 = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v11) = v10;
    *(_DWORD *)(v9 + 200) += 4;
    JSC::MacroAssemblerARM64::load64(v9, a3 | 0x80800000000, a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v9 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(v9 + 296) + 208) &= ~*(_DWORD *)(v9 + 320);
      JSC::MacroAssemblerARM64::load8(v9, a3 | 0x400000000, *(char *)(v9 + 304), v12, v13, v14, v15, v16);
      JSC::MacroAssemblerARM64::branch32(v9, 0, 17, 2, v17, v18, v19, v20, (uint64_t)&v26);
      result = v9 + 648;
      v21 = v27;
      v22 = *(_DWORD *)(v9 + 640);
      v28 = v26;
      v29 = v27;
      v30 = v22;
      v23 = *(unsigned int *)(v9 + 660);
      if ((_DWORD)v23 == *(_DWORD *)(v9 + 656))
      {
        result = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v23 + 1, (unint64_t)&v28);
        v25 = *(_QWORD *)(v9 + 648) + 16 * *(unsigned int *)(v9 + 660);
        *(_DWORD *)v25 = *(_DWORD *)result;
        *(_QWORD *)(v25 + 4) = *(_QWORD *)(result + 4);
        *(_DWORD *)(v25 + 12) = *(_DWORD *)(result + 12);
      }
      else
      {
        v24 = *(_QWORD *)result + 16 * v23;
        *(_DWORD *)v24 = v26;
        *(_QWORD *)(v24 + 4) = v21;
        *(_DWORD *)(v24 + 12) = v22;
      }
      ++*(_DWORD *)(v9 + 660);
    }
    else
    {
      result = 6195;
      __break(0xC471u);
    }
  }
  return result;
}

void JSC::JITRightShiftGenerator::generateFastPath(JSC::JITRightShiftGenerator *this, JSC::CCallHelpers *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  char v28;
  int v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  int *v33;
  int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int *v48;
  int *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  char v68;
  char v69;
  int v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int *v87;
  int *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int *v104;
  int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int *v109;
  char v110;
  unsigned int v111;
  int v112;
  int v113;
  unsigned int v114;
  char v115;
  int v116;
  unsigned int v117;
  char v118;
  uint64_t v119;
  int *v120;
  int *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  _DWORD *v135;
  uint64_t *v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  char v151;
  char v152;
  int v153;
  int v154;
  char v155;
  char v156;
  char v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _DWORD v170[3];
  int v171;
  uint64_t v172;
  int v173;
  int v174;
  char v175;
  __int16 v176;
  char v177;
  int v178;
  uint64_t v179;
  int v180;
  int v181;
  _DWORD v182[3];
  int v183;
  int v184;
  int v185;
  int v186;
  char v187;
  __int16 v188;
  char v189;
  _BYTE v190[12];

  *((_BYTE *)this + 24) = 1;
  if (*((_BYTE *)this + 11) == 1)
  {
    JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, *((char *)this + 21), 27, a5, a6, a7, a8, (uint64_t)v190);
    v17 = *((unsigned __int8 *)this + 21);
    v18 = *((char *)this + 20);
    if (v17 == *((unsigned __int8 *)this + 20))
      goto LABEL_10;
    if ((char)v17 == 63)
    {
      if (*((_BYTE *)this + 20) != 31)
      {
        v19 = v18 & 0x1F | 0xD2800000;
        goto LABEL_7;
      }
    }
    else if ((char)v17 != 31 && v18 != 31)
    {
      v19 = *((unsigned __int8 *)this + 20) | ((v17 & 0x1F) << 16) | 0xAA0003E0;
LABEL_7:
      v21 = (unsigned int *)((char *)a2 + 200);
      v20 = *((_DWORD *)a2 + 50);
      if (v20 + 4 > *((_DWORD *)a2 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v10, v11, v12, v13, v14, v15, v16);
        v20 = *v21;
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v20) = v19;
      *v21 += 4;
LABEL_10:
      v22 = *((_DWORD *)this + 3) & 0x1F;
      if (v22)
      {
        v23 = *((unsigned __int8 *)this + 20);
        v24 = *((_DWORD *)a2 + 50);
        if (*((_DWORD *)this + 28))
          v25 = 1392540672;
        else
          v25 = 318798848;
        if (v24 + 4 > *((_DWORD *)a2 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v10, v11, v12, v13, v14, v15, v16);
          v24 = *((_DWORD *)a2 + 50);
        }
        *(_DWORD *)(*((_QWORD *)a2 + 7) + v24) = (v22 << 16) | (32 * v23) | v23 & 0x1F | v25;
        v26 = *((_DWORD *)a2 + 50);
        v27 = v26 + 4;
        *((_DWORD *)a2 + 50) = v26 + 4;
        v28 = *((_BYTE *)this + 20);
        if ((v26 + 8) > *((_DWORD *)a2 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v10, v11, v12, v13, v14, v15, v16);
          v27 = *((_DWORD *)a2 + 50);
        }
        *(_DWORD *)(*((_QWORD *)a2 + 7) + v27) = v28 & 0x1F | (32 * (v28 & 0x1F)) | 0xAA1B0000;
        v29 = *((_DWORD *)a2 + 50) + 4;
        *((_DWORD *)a2 + 50) = v29;
      }
      else
      {
        v29 = *((_DWORD *)a2 + 50);
      }
      for (; v29 < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = v29)
      {
        if ((v29 + 4) > *((_DWORD *)a2 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v10, v11, v12, v13, v14, v15, v16);
          v29 = *((_DWORD *)a2 + 50);
        }
        *(_DWORD *)(*((_QWORD *)a2 + 7) + v29) = -721215457;
        v29 = *((_DWORD *)a2 + 50) + 4;
      }
      v30 = v29;
      if ((v29 + 4) > *((_DWORD *)a2 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v10, v11, v12, v13, v14, v15, v16);
        v30 = *((_DWORD *)a2 + 50);
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v30) = 335544320;
      *((_DWORD *)a2 + 50) += 4;
      if (*((_BYTE *)a2 + 328))
        v31 = 69;
      else
        v31 = 65;
      v185 = v29;
      v186 = 0;
      v187 = v31;
      v188 = 15;
      v189 = -1;
      if (v29 != -1)
      {
        v32 = *((unsigned int *)this + 11);
        if ((_DWORD)v32 == *((_DWORD *)this + 10))
        {
          v33 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 32, (void *)(v32 + 1), (unint64_t)&v185, v12, v13, v14, v15, v16);
          v35 = *v33;
          v34 = v33 + 1;
          v36 = *((_QWORD *)this + 4) + 12 * *((unsigned int *)this + 11);
          *(_DWORD *)v36 = v35;
        }
        else
        {
          v34 = &v186;
          v36 = *((_QWORD *)this + 4) + 12 * v32;
          *(_DWORD *)v36 = v29;
        }
        *(_QWORD *)(v36 + 4) = *(_QWORD *)v34;
        ++*((_DWORD *)this + 11);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v190, (uint64_t)a2, v11, v12, v13, v14, v15, v16);
      JSC::MacroAssemblerARM64::branchTest64((uint64_t)a2, 0, *((char *)this + 21), 27, v37, v38, v39, v40, (uint64_t)&v183);
      v46 = v183;
      if (v183 != -1)
      {
        v47 = *((unsigned int *)this + 21);
        if ((_DWORD)v47 == *((_DWORD *)this + 20))
        {
          v48 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, (void *)(v47 + 1), (unint64_t)&v183, v41, v42, v43, v44, v45);
          v50 = *v48;
          v49 = v48 + 1;
          v46 = v50;
          LODWORD(v47) = *((_DWORD *)this + 21);
        }
        else
        {
          v49 = &v184;
        }
        v51 = *((_QWORD *)this + 9) + 12 * v47;
        *(_DWORD *)v51 = v46;
        *(_QWORD *)(v51 + 4) = *(_QWORD *)v49;
        ++*((_DWORD *)this + 21);
      }
      JSC::AssemblyHelpers::unboxDoubleWithoutAssertions(a2, *((char *)this + 21), *((char *)this + 23), *((char *)this + 116), 1, v43, v44, v45);
      if (JSC::MacroAssemblerARM64::s_jscvtCheckState)
      {
        v59 = *((char *)this + 116);
        v60 = *((char *)this + 23);
        if (JSC::MacroAssemblerARM64::s_jscvtCheckState == 2)
        {
          v61 = *((_DWORD *)a2 + 50);
          if (v61 + 4 > *((_DWORD *)a2 + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v52, v53, v54, v55, v56, v57, v58);
            v61 = *((_DWORD *)a2 + 50);
          }
          *(_DWORD *)(*((_QWORD *)a2 + 7) + v61) = v60 | (32 * v59) | 0x1E7E0000;
          *((_DWORD *)a2 + 50) += 4;
          goto LABEL_40;
        }
        v71 = *((_BYTE *)this + 116);
        v72 = *((_BYTE *)this + 23);
      }
      else
      {
        if (!JSC::MacroAssemblerARM64::s_lseCheckState)
          JSC::MacroAssemblerARM64::s_lseCheckState = 1;
        JSC::MacroAssemblerARM64::s_jscvtCheckState = 1;
        v71 = *((_BYTE *)this + 116);
        v72 = *((_BYTE *)this + 23);
      }
      JSC::MacroAssemblerARM64::branchTruncateDoubleToInt32((uint64_t)a2, v71, v72, 0, v55, v56, v57, v58, (uint64_t)v182);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)this + 18, v182, v73, v74, v75, v76, v77, v78);
LABEL_40:
      if (v22)
      {
        v62 = *((unsigned __int8 *)this + 23);
        v63 = *((_DWORD *)a2 + 50);
        v64 = v63 + 4;
        v65 = *((_DWORD *)a2 + 48);
        if (*((_DWORD *)this + 28))
        {
          if (v64 > v65)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v52, v53, v54, v55, v56, v57, v58);
            v63 = *((_DWORD *)a2 + 50);
          }
          v66 = (v22 << 16) | (32 * v62) | v62 & 0x1F | 0x53007C00;
        }
        else
        {
          if (v64 > v65)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v52, v53, v54, v55, v56, v57, v58);
            v63 = *((_DWORD *)a2 + 50);
          }
          v66 = (v22 << 16) | (32 * v62) | v62 & 0x1F | 0x13007C00;
        }
        *(_DWORD *)(*((_QWORD *)a2 + 7) + v63) = v66;
        v67 = *((_DWORD *)a2 + 50) + 4;
        *((_DWORD *)a2 + 50) = v67;
      }
      else
      {
        v67 = *((_DWORD *)a2 + 50);
      }
      v68 = *((_BYTE *)this + 23);
      v69 = *((_BYTE *)this + 20);
      if (v67 + 4 > *((_DWORD *)a2 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v52, v53, v54, v55, v56, v57, v58);
        v67 = *((_DWORD *)a2 + 50);
      }
      v70 = v69 & 0x1F | ((v68 & 0x1F) << 16);
LABEL_49:
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v67) = v70 | 0xAA000360;
      *((_DWORD *)a2 + 50) += 4;
      return;
    }
    v19 = v18 | (32 * (char)v17) | 0x91000000;
    goto LABEL_7;
  }
  v79 = (uint64_t *)((char *)this + 72);
  JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, *((char *)this + 22), 27, a5, a6, a7, a8, (uint64_t)&v180);
  v85 = v180;
  if (v180 != -1)
  {
    v86 = *((unsigned int *)this + 21);
    if ((_DWORD)v86 == *((_DWORD *)this + 20))
    {
      v87 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, (void *)(v86 + 1), (unint64_t)&v180, v80, v81, v82, v83, v84);
      v89 = *v87;
      v88 = v87 + 1;
      v85 = v89;
      LODWORD(v86) = *((_DWORD *)this + 21);
      v90 = *((_QWORD *)this + 9);
    }
    else
    {
      v88 = &v181;
      v90 = *v79;
    }
    v91 = v90 + 12 * v86;
    *(_DWORD *)v91 = v85;
    *(_QWORD *)(v91 + 4) = *(_QWORD *)v88;
    ++*((_DWORD *)this + 21);
  }
  v92 = *((unsigned __int8 *)this + 22);
  v93 = v92;
  if (v92 == *((unsigned __int8 *)this + 20))
    v93 = *((unsigned __int8 *)this + 23);
  *(_QWORD *)v190 = 0xFFFFFFFFLL;
  *(_DWORD *)&v190[8] = -16773311;
  if (*((_BYTE *)this + 1) == 1)
  {
    JSC::MacroAssemblerARM64::move(a2, (char)v92, (char)v93, v80, v81, v82, v83, v84);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)*(unsigned int *)((char *)this + 2), *((char *)this + 20), v165, v166, v167, v168, v169);
    goto LABEL_81;
  }
  JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, *((char *)this + 21), 27, v81, v82, v83, v84, (uint64_t)&v178);
  *(_DWORD *)v190 = v178;
  *(_QWORD *)&v190[4] = v179;
  v101 = *((unsigned __int8 *)this + 22);
  if (v101 != v93)
  {
    if ((char)v101 == 63)
    {
      if (v93 != 31)
      {
        v102 = v93 & 0x1F | 0xD2800000;
        goto LABEL_70;
      }
    }
    else if (v93 != 31 && (char)v101 != 31)
    {
      v102 = v93 & 0xFFE0FFFF | ((v101 & 0x1F) << 16) | 0xAA0003E0;
LABEL_70:
      v104 = (unsigned int *)((char *)a2 + 200);
      v103 = *((_DWORD *)a2 + 50);
      if (v103 + 4 > *((_DWORD *)a2 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v94, v95, v96, v97, v98, v99, v100);
        v103 = *v104;
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v103) = v102;
      *v104 += 4;
      goto LABEL_73;
    }
    v102 = (char)v93 | (32 * (char)v101) | 0x91000000;
    goto LABEL_70;
  }
LABEL_73:
  v105 = *((unsigned __int8 *)this + 21);
  v106 = *((char *)this + 20);
  if (v105 == *((unsigned __int8 *)this + 20))
    goto LABEL_81;
  if ((char)v105 == 63)
  {
    if (*((_BYTE *)this + 20) != 31)
    {
      v107 = v106 & 0x1F | 0xD2800000;
      goto LABEL_78;
    }
LABEL_138:
    v107 = v106 | (32 * (char)v105) | 0x91000000;
    goto LABEL_78;
  }
  if ((char)v105 == 31 || v106 == 31)
    goto LABEL_138;
  v107 = *((unsigned __int8 *)this + 20) | ((v105 & 0x1F) << 16) | 0xAA0003E0;
LABEL_78:
  v109 = (unsigned int *)((char *)a2 + 200);
  v108 = *((_DWORD *)a2 + 50);
  if (v108 + 4 > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v94, v95, v96, v97, v98, v99, v100);
    v108 = *v109;
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v108) = v107;
  *v109 += 4;
LABEL_81:
  v110 = *((_BYTE *)this + 20);
  v111 = *((_DWORD *)a2 + 50);
  if (*((_DWORD *)this + 28))
    v112 = 448799744;
  else
    v112 = 448800768;
  if (v111 + 4 > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v94, v95, v96, v97, v98, v99, v100);
    v111 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v111) = ((v93 & 0x1F) << 16) | (32 * (v110 & 0x1F)) | v112 | v110 & 0x1F;
  v113 = *((_DWORD *)a2 + 50);
  v114 = v113 + 4;
  *((_DWORD *)a2 + 50) = v113 + 4;
  v115 = *((_BYTE *)this + 20);
  if ((v113 + 8) > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v94, v95, v96, v97, v98, v99, v100);
    v114 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v114) = v115 & 0x1F | (32 * (v115 & 0x1F)) | 0xAA1B0000;
  v116 = *((_DWORD *)a2 + 50) + 4;
  *((_DWORD *)a2 + 50) = v116;
  if (*((_BYTE *)this + 1) != 1)
  {
    for (; v116 < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = v116)
    {
      if ((v116 + 4) > *((_DWORD *)a2 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v94, v95, v96, v97, v98, v99, v100);
        v116 = *((_DWORD *)a2 + 50);
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v116) = -721215457;
      v116 = *((_DWORD *)a2 + 50) + 4;
    }
    v117 = v116;
    if ((v116 + 4) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v94, v95, v96, v97, v98, v99, v100);
      v117 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v117) = 335544320;
    *((_DWORD *)a2 + 50) += 4;
    if (*((_BYTE *)a2 + 328))
      v118 = 69;
    else
      v118 = 65;
    v173 = v116;
    v174 = 0;
    v175 = v118;
    v176 = 15;
    v177 = -1;
    if (v116 != -1)
    {
      v119 = *((unsigned int *)this + 11);
      if ((_DWORD)v119 == *((_DWORD *)this + 10))
      {
        v120 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 32, (void *)(v119 + 1), (unint64_t)&v173, v96, v97, v98, v99, v100);
        v122 = *v120;
        v121 = v120 + 1;
        v123 = *((_QWORD *)this + 4) + 12 * *((unsigned int *)this + 11);
        *(_DWORD *)v123 = v122;
      }
      else
      {
        v121 = &v174;
        v123 = *((_QWORD *)this + 4) + 12 * v119;
        *(_DWORD *)v123 = v116;
      }
      *(_QWORD *)(v123 + 4) = *(_QWORD *)v121;
      ++*((_DWORD *)this + 11);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v190, (uint64_t)a2, v95, v96, v97, v98, v99, v100);
    JSC::MacroAssemblerARM64::branchTest64((uint64_t)a2, 0, *((char *)this + 21), 27, v124, v125, v126, v127, (uint64_t)&v171);
    v133 = v171;
    if (v171 != -1)
    {
      v134 = *((unsigned int *)this + 21);
      if ((_DWORD)v134 == *((_DWORD *)this + 20))
      {
        v135 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, (void *)(v134 + 1), (unint64_t)&v171, v128, v129, v130, v131, v132);
        v137 = *v135;
        v136 = (uint64_t *)(v135 + 1);
        v133 = v137;
        LODWORD(v134) = *((_DWORD *)this + 21);
        v138 = *((_QWORD *)this + 9);
      }
      else
      {
        v136 = &v172;
        v138 = *v79;
      }
      v139 = v138 + 12 * v134;
      *(_DWORD *)v139 = v133;
      *(_QWORD *)(v139 + 4) = *v136;
      ++*((_DWORD *)this + 21);
    }
    JSC::AssemblyHelpers::unboxDoubleWithoutAssertions(a2, *((char *)this + 21), *((char *)this + 23), *((char *)this + 116), 1, v130, v131, v132);
    if (JSC::MacroAssemblerARM64::s_jscvtCheckState)
    {
      v147 = *((char *)this + 116);
      v148 = *((char *)this + 23);
      if (JSC::MacroAssemblerARM64::s_jscvtCheckState == 2)
      {
        v149 = *((_DWORD *)a2 + 50);
        if (v149 + 4 > *((_DWORD *)a2 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v140, v141, v142, v143, v144, v145, v146);
          v149 = *((_DWORD *)a2 + 50);
        }
        *(_DWORD *)(*((_QWORD *)a2 + 7) + v149) = v148 | (32 * v147) | 0x1E7E0000;
        v150 = *((_DWORD *)a2 + 50) + 4;
        *((_DWORD *)a2 + 50) = v150;
        goto LABEL_110;
      }
      v157 = *((_BYTE *)this + 116);
      v158 = *((_BYTE *)this + 23);
    }
    else
    {
      if (!JSC::MacroAssemblerARM64::s_lseCheckState)
        JSC::MacroAssemblerARM64::s_lseCheckState = 1;
      JSC::MacroAssemblerARM64::s_jscvtCheckState = 1;
      v157 = *((_BYTE *)this + 116);
      v158 = *((_BYTE *)this + 23);
    }
    JSC::MacroAssemblerARM64::branchTruncateDoubleToInt32((uint64_t)a2, v157, v158, 0, v143, v144, v145, v146, (uint64_t)v170);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)this + 18, v170, v159, v160, v161, v162, v163, v164);
    v150 = *((_DWORD *)a2 + 50);
LABEL_110:
    v151 = *((_BYTE *)this + 22);
    v152 = *((_BYTE *)this + 23);
    if (*((_DWORD *)this + 28))
      v153 = 448799744;
    else
      v153 = 448800768;
    if (v150 + 4 > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v140, v141, v142, v143, v144, v145, v146);
      v150 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v150) = ((v151 & 0x1F) << 16) | (32 * (v152 & 0x1F)) | v153 | v152 & 0x1F;
    v154 = *((_DWORD *)a2 + 50);
    v67 = v154 + 4;
    *((_DWORD *)a2 + 50) = v154 + 4;
    v155 = *((_BYTE *)this + 23);
    v156 = *((_BYTE *)this + 20);
    if ((v154 + 8) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v140, v141, v142, v143, v144, v145, v146);
      v67 = *((_DWORD *)a2 + 50);
    }
    v70 = v156 & 0x1F | ((v155 & 0x1F) << 16);
    goto LABEL_49;
  }
}

uint64_t JSC::Safepoint::cancel(uint64_t this)
{
  _BYTE *v1;

  if (!*(_BYTE *)(this + 32))
    goto LABEL_7;
  v1 = *(_BYTE **)(this + 40);
  if (*v1)
  {
    __break(0xC471u);
    JUMPOUT(0x1987F2F90);
  }
  if (*(_DWORD *)(*(_QWORD *)(this + 8) + 12) != 3)
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x1987F2F70);
  }
  *v1 = 1;
  *(_QWORD *)this = 0;
  return this;
}

void JSC::JITSizeStatistics::markEnd(JSC::JITSizeStatistics *this, Marker *a2, JSC::CCallHelpers *a3, JSC::JITPlan *a4)
{
  int v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  const void *v24;
  void *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v7 = *((_DWORD *)a3 + 50);
  v8 = *(WTF::StringImpl **)&a2->id;
  if (*(_QWORD *)&a2->id)
    *(_DWORD *)v8 += 2;
  v9 = *(_DWORD *)&a2->markerName[2];
  v10 = WTF::fastMalloc((WTF *)0x38);
  v18 = v10;
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)v10 = &off_1E3596200;
  *(_QWORD *)(v10 + 16) = this;
  *(_DWORD *)(v10 + 24) = v7;
  if (v8)
    *(_DWORD *)v8 += 2;
  *(_QWORD *)(v10 + 32) = v8;
  *(_DWORD *)(v10 + 40) = v9;
  *(_QWORD *)(v10 + 48) = a4;
  v19 = *((unsigned int *)a3 + 61);
  if ((_DWORD)v19 == *((_DWORD *)a3 + 60))
  {
    v21 = v19 + (v19 >> 2);
    if (v21 >= 0x10)
      v22 = v21 + 1;
    else
      v22 = 16;
    if (v22 <= v19 + 1)
      v23 = v19 + 1;
    else
      v23 = v22;
    if (v23 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v24 = (const void *)*((_QWORD *)a3 + 29);
    v25 = (void *)WTF::fastMalloc((WTF *)(8 * v23));
    *((_DWORD *)a3 + 60) = v23;
    *((_QWORD *)a3 + 29) = v25;
    memcpy(v25, v24, 8 * v19);
    if (v24)
    {
      if (*((const void **)a3 + 29) == v24)
      {
        *((_QWORD *)a3 + 29) = 0;
        *((_DWORD *)a3 + 60) = 0;
      }
      WTF::fastFree((unint64_t)v24, v11, v12, v13, v14, v15, v16, v17);
    }
    v19 = *((unsigned int *)a3 + 61);
    v20 = (uint64_t *)(*((_QWORD *)a3 + 29) + 8 * v19);
  }
  else
  {
    v20 = (uint64_t *)(*((_QWORD *)a3 + 29) + 8 * v19);
  }
  *v20 = v18;
  *((_DWORD *)a3 + 61) = v19 + 1;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, (WTF::AtomStringImpl *)v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void JSC::JITSizeStatistics::dump(JSC::JITSizeStatistics *this, WTF::PrintStream *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  unint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  char *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  __n128 v45;
  WTF::PrintStream *v46;
  WTF::PrintStream *v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  WTF *v59;
  const WTF::String *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  float v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  WTF::StringImpl *v80;
  __n128 v81;
  __n128 v82;
  WTF *v83;
  uint64_t v84;

  v83 = 0;
  v84 = 0;
  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v11 = *(unsigned int *)(v10 - 4);
    v12 = v10 + 24 * v11;
    if (*(_DWORD *)(v10 - 12))
    {
      v13 = *(_QWORD *)this;
      if ((_DWORD)v11)
      {
        v14 = 24 * v11;
        v13 = *(_QWORD *)this;
        while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
        {
          v13 += 24;
          v14 -= 24;
          if (!v14)
          {
            v13 = v12;
            break;
          }
        }
      }
      if (v10)
        goto LABEL_9;
LABEL_13:
      v15 = 0;
      goto LABEL_14;
    }
    v13 = v10 + 24 * v11;
  }
  else
  {
    v13 = 0;
    LODWORD(v11) = 0;
  }
  v12 = v10 + 24 * v11;
  if (!v10)
    goto LABEL_13;
LABEL_9:
  v15 = v10 + 24 * *(unsigned int *)(v10 - 4);
LABEL_14:
  if (v15 == v13)
  {
    v43 = 0;
    v16 = 0;
    goto LABEL_41;
  }
  v16 = 0;
  LODWORD(v17) = 0;
  do
  {
    v18 = *(WTF::StringImpl **)v13;
    if (*(_QWORD *)v13)
    {
      v19 = *(_DWORD *)v18;
      *(_DWORD *)v18 += 2;
      v82 = *(__n128 *)(v13 + 8);
      *(_DWORD *)v18 = v19 + 4;
    }
    else
    {
      v82 = *(__n128 *)(v13 + 8);
    }
    v80 = v18;
    v81 = v82;
    if ((_DWORD)v17 == (_DWORD)v84)
    {
      v20 = WTF::Vector<std::pair<WTF::String,JSC::JITSizeStatistics::Entry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v83, v17 + 1, (unint64_t)&v80);
      v21 = HIDWORD(v84);
      v16 = v83;
      v22 = (char *)v83 + 24 * HIDWORD(v84);
      v23 = *(_QWORD *)v20;
      *(_QWORD *)v20 = 0;
      *(_QWORD *)v22 = v23;
      a9 = *(__n128 *)(v20 + 8);
      *(__n128 *)(v22 + 8) = a9;
    }
    else
    {
      v24 = (char *)v16 + 24 * v17;
      v80 = 0;
      *(_QWORD *)v24 = v18;
      a9 = v81;
      *(__n128 *)(v24 + 8) = v81;
      v21 = HIDWORD(v84);
    }
    v17 = (v21 + 1);
    HIDWORD(v84) = v21 + 1;
    v25 = v80;
    v80 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::~StringImpl(v25, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        if (!v18)
          goto LABEL_27;
        goto LABEL_25;
      }
      *(_DWORD *)v25 -= 2;
    }
    if (!v18)
      goto LABEL_27;
LABEL_25:
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
LABEL_27:
    v26 = v13 + 24;
    v13 = v12;
    if (v26 != v12)
    {
      v13 = v26;
      while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
      {
        v13 += 24;
        if (v13 == v12)
        {
          v13 = v12;
          break;
        }
      }
    }
  }
  while (v13 != v15);
  v43 = (WTF *)((char *)v16 + 24 * v17);
  if (!(_DWORD)v17)
  {
LABEL_41:
    v44 = 0;
    goto LABEL_42;
  }
  v44 = 126 - 2 * __clz(v17);
LABEL_42:
  v45 = std::__introsort<std::_ClassicAlgPolicy,JSC::JITSizeStatistics::dump(WTF::PrintStream &)::$_0 &,std::pair<WTF::String,JSC::JITSizeStatistics::Entry> *,false>((uint64_t)v16, v43, v44, 1, a5, a6, a7, a8, a9);
  v46 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, __n128))(*(_QWORD *)a2 + 32))(a2, v45);
  WTF::PrintStream::printf(v46, "%s", "JIT size statistics:");
  WTF::PrintStream::printf(v46, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v47, "%s", "==============================================");
  WTF::PrintStream::printf(v47, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v55 = v83;
  if (HIDWORD(v84))
  {
    v56 = 24 * HIDWORD(v84);
    v79 = v83;
    do
    {
      v58 = *((_QWORD *)v55 + 1);
      v57 = *((_QWORD *)v55 + 2);
      v59 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::printInternal(v59, v55, v60, v61, v62, v63, v64, v65, v66, v67);
      WTF::PrintStream::printf(v59, "%s", " totalBytes: ");
      WTF::PrintStream::printf(v59, "%lu", v57);
      WTF::PrintStream::printf(v59, "%s", " count: ");
      WTF::PrintStream::printf(v59, "%lu", v58);
      WTF::PrintStream::printf(v59, "%s", " avg: ");
      WTF::PrintStream::printf(v59, "%lf", (double)v57 / (double)v58);
      WTF::PrintStream::printf(v59, "%s", "\n");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v55 = (WTF *)((char *)v55 + 24);
      v56 -= 24;
    }
    while (v56);
    v55 = v79;
    if (HIDWORD(v84))
    {
      v68 = 24 * HIDWORD(v84);
      v69 = (WTF::StringImpl **)v79;
      do
      {
        v70 = *v69;
        *v69 = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
          {
            WTF::StringImpl::~StringImpl(v70, v48, v49, v50, v51, v52, v53, v54);
            WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
          }
          else
          {
            *(_DWORD *)v70 -= 2;
          }
        }
        v69 += 3;
        v68 -= 24;
      }
      while (v68);
    }
  }
  if (v55)
    WTF::fastFree((unint64_t)v55, v48, v49, v50, v51, v52, v53, v54);
}

void JSC::JITStubRoutine::observeZeroRefCount(JSC::JITStubRoutine *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  char v9;

  switch(*((_BYTE *)this + 24))
  {
    case 0:
      if (*((_DWORD *)this + 4))
      {
        __break(0xC471u);
        JUMPOUT(0x1987F35F0);
      }
      goto LABEL_4;
    case 1:
      v9 = *((_BYTE *)this + 40);
      if ((v9 & 0xA) == 8)
      {
        if (*((_DWORD *)this + 4))
        {
          __break(0xC471u);
          JUMPOUT(0x1987F3610);
        }
        *((_BYTE *)this + 40) = v9 | 2;
      }
      else
      {
LABEL_4:
        JSC::JITStubRoutine::operator delete(this, a2, a3, a4, a5, a6, a7, a8);
      }
      break;
    case 2:
      JSC::GCAwareJITStubRoutine::observeZeroRefCountImpl(this, a2, a3, a4, a5, a6, a7, a8);
      break;
    case 3:
    case 4:
      JSC::PolymorphicAccessJITStubRoutine::observeZeroRefCountImpl(this, a2, a3, a4, a5, a6, a7, a8, a9);
      break;
    case 5:
      JSC::GCAwareJITStubRoutineWithExceptionHandler::observeZeroRefCountImpl(this, a2, a3, a4, a5, a6, a7, a8, a9);
      break;
    default:
      return;
  }
}

void JSC::JITStubRoutine::operator delete(JSC::GCAwareJITStubRoutineWithExceptionHandler *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  JSC::GCAwareJITStubRoutineWithExceptionHandler *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  switch(*((_BYTE *)this + 24))
  {
    case 0:
      v9 = (unsigned int *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = 0;
      if (!v9)
        goto LABEL_9;
      do
      {
        v10 = __ldaxr(v9);
        v11 = --v10 == 0;
      }
      while (__stlxr(v10, v9));
      goto LABEL_7;
    case 1:
      v9 = (unsigned int *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = 0;
      if (v9)
      {
        do
        {
          v12 = __ldaxr(v9);
          v11 = --v12 == 0;
        }
        while (__stlxr(v12, v9));
LABEL_7:
        if (v11)
        {
          atomic_store(1u, v9);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v9, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
        }
      }
LABEL_9:
      v13 = this;
      goto LABEL_10;
    case 2:
      v14 = *((unsigned int *)this + 11);
      if ((_DWORD)v14)
      {
        v15 = -24 * v14;
        do
        {
          v16 = (uint64_t *)((char *)this + v15);
          v17 = *(uint64_t **)((char *)this + v15 + 8);
          if (v17)
          {
            v18 = *v16;
            *v17 = *v16;
            *(_QWORD *)(v18 + 8) = v17;
            *v16 = 0;
            v16[1] = 0;
          }
          v15 += 24;
        }
        while (v15);
      }
      v19 = (unsigned int *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = 0;
      if (v19)
      {
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v19);
          v38 = v14;
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v19, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
          v14 = v38;
        }
      }
      v13 = (JSC::GCAwareJITStubRoutineWithExceptionHandler *)((char *)this - 24 * v14);
      goto LABEL_10;
    case 3:
      JSC::PolymorphicAccessJITStubRoutine::~PolymorphicAccessJITStubRoutine(this, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 4:
      JSC::JITStubRoutine::destroy<JSC::MarkingGCAwareJITStubRoutine>(this, a2, a3, a4, a5, a6, a7, a8);
      return;
    case 5:
      JSC::GCAwareJITStubRoutineWithExceptionHandler::~GCAwareJITStubRoutineWithExceptionHandler(this);
LABEL_10:
      WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
      break;
    default:
      return;
  }
}

uint64_t JSC::JITSubGenerator::generateInline(_BYTE *a1, _DWORD *a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int *v43;
  int *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t result;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int *v73;
  int *v74;
  int v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int *v97;
  int *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  int v117;
  int v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;

  if (!a4)
  {
LABEL_4:
    v14 = (uint64_t *)(a3 + 24);
    JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, (char)a1[21], 27, a5, a6, a7, a8, (uint64_t)&v126);
    v20 = v126;
    if (v126 != -1)
    {
      v21 = *(unsigned int *)(a3 + 36);
      if ((_DWORD)v21 == *(_DWORD *)(a3 + 32))
      {
        v22 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v21 + 1), (unint64_t)&v126, v15, v16, v17, v18, v19);
        v24 = *v22;
        v23 = (uint64_t *)(v22 + 1);
        v20 = v24;
        LODWORD(v21) = *(_DWORD *)(a3 + 36);
        v25 = *(_QWORD *)(a3 + 24);
      }
      else
      {
        v23 = &v127;
        v25 = *v14;
      }
      v33 = v25 + 12 * v21;
      *(_DWORD *)v33 = v20;
      *(_QWORD *)(v33 + 4) = *v23;
      ++*(_DWORD *)(a3 + 36);
    }
    JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, (char)a1[22], 27, v16, v17, v18, v19, (uint64_t)&v124);
    v41 = v124;
    if (v124 != -1)
    {
      v42 = *(unsigned int *)(a3 + 36);
      if ((_DWORD)v42 == *(_DWORD *)(a3 + 32))
      {
        v43 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v42 + 1), (unint64_t)&v124, v36, v37, v38, v39, v40);
        v45 = *v43;
        v44 = v43 + 1;
        v41 = v45;
        LODWORD(v42) = *(_DWORD *)(a3 + 36);
        v46 = *(_QWORD *)(a3 + 24);
      }
      else
      {
        v44 = &v125;
        v46 = *v14;
      }
      v47 = v46 + 12 * v42;
      *(_DWORD *)v47 = v41;
      *(_QWORD *)(v47 + 4) = *(_QWORD *)v44;
      ++*(_DWORD *)(a3 + 36);
    }
    v48 = a1[21];
    v49 = (char)a1[25];
    if (v48 == a1[25])
      goto LABEL_28;
    if (v48 == 63)
    {
      if (a1[25] != 31)
      {
        v50 = v49 & 0x1F | 0xD2800000;
        goto LABEL_25;
      }
    }
    else if (v48 != 31 && v49 != 31)
    {
      v50 = a1[25] | ((v48 & 0x1F) << 16) | 0xAA0003E0;
LABEL_25:
      v51 = a2 + 50;
      v48 = a2[50];
      if (v48 + 4 > a2[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), v34, v35, v36, v37, v38, v39, v40);
        v48 = *v51;
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v48) = v50;
      *v51 += 4;
      LOBYTE(v48) = a1[25];
LABEL_28:
      JSC::MacroAssemblerARM64::branchSub32((uint64_t)a2, 6, (char)v48, (char)a1[22], (char)v48, v38, v39, v40, (uint64_t)&v122);
      v59 = v122;
      if (v122 != -1)
      {
        v60 = *(unsigned int *)(a3 + 36);
        if ((_DWORD)v60 == *(_DWORD *)(a3 + 32))
        {
          v61 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v60 + 1), (unint64_t)&v122, v54, v55, v56, v57, v58);
          v63 = *v61;
          v62 = (uint64_t *)(v61 + 1);
          v59 = v63;
          LODWORD(v60) = *(_DWORD *)(a3 + 36);
          v64 = *(_QWORD *)(a3 + 24);
        }
        else
        {
          v62 = &v123;
          v64 = *v14;
        }
        v65 = v64 + 12 * v60;
        *(_DWORD *)v65 = v59;
        *(_QWORD *)(v65 + 4) = *v62;
        ++*(_DWORD *)(a3 + 36);
      }
      v66 = a1[25];
      v67 = a1[20];
      v68 = a2[50];
      if (v68 + 4 > a2[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), v52, v53, v54, v55, v56, v57, v58);
        v68 = a2[50];
      }
      result = 0;
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v68) = v67 & 0x1F | ((v66 & 0x1F) << 16) | 0xAA000360;
LABEL_36:
      a2[50] += 4;
      return result;
    }
    v50 = v49 | (32 * (char)a1[21]) | 0x91000000;
    goto LABEL_25;
  }
  v11 = *a4;
  v12 = (v11 >> 10) & 7;
  v13 = (v11 >> 7) & 7;
  if (v12 == 1)
  {
    if (v13 == 1)
      goto LABEL_4;
    return 1;
  }
  if (v12 == 2)
  {
    if (v13 != 2)
      return 1;
    if ((*a1 & 0x7E) != 2)
    {
      JSC::MacroAssemblerARM64::branchTest64((uint64_t)a2, 0, (char)a1[21], 27, a5, a6, a7, a8, (uint64_t)&v134);
      v27 = v134;
      if (v134 != -1)
      {
        v28 = *(unsigned int *)(a3 + 36);
        if ((_DWORD)v28 == *(_DWORD *)(a3 + 32))
        {
          v29 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v28 + 1), (unint64_t)&v134, v26, a5, a6, a7, a8);
          v31 = *v29;
          v30 = (uint64_t *)(v29 + 1);
          v27 = v31;
          v32 = *(_QWORD *)(a3 + 24) + 12 * *(unsigned int *)(a3 + 36);
        }
        else
        {
          v30 = &v135;
          v32 = *(_QWORD *)(a3 + 24) + 12 * v28;
        }
        *(_DWORD *)v32 = v27;
        *(_QWORD *)(v32 + 4) = *v30;
        ++*(_DWORD *)(a3 + 36);
      }
    }
    if ((a1[10] & 0x7E) != 2)
    {
      JSC::MacroAssemblerARM64::branchTest64((uint64_t)a2, 0, (char)a1[22], 27, a5, a6, a7, a8, (uint64_t)&v132);
      v71 = v132;
      if (v132 != -1)
      {
        v72 = *(unsigned int *)(a3 + 36);
        if ((_DWORD)v72 == *(_DWORD *)(a3 + 32))
        {
          v73 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v72 + 1), (unint64_t)&v132, v70, a5, a6, a7, a8);
          v75 = *v73;
          v74 = v73 + 1;
          v71 = v75;
          v76 = *(_QWORD *)(a3 + 24) + 12 * *(unsigned int *)(a3 + 36);
        }
        else
        {
          v74 = &v133;
          v76 = *(_QWORD *)(a3 + 24) + 12 * v72;
        }
        *(_DWORD *)v76 = v71;
        *(_QWORD *)(v76 + 4) = *(_QWORD *)v74;
        ++*(_DWORD *)(a3 + 36);
      }
    }
    v77 = (uint64_t *)(a3 + 24);
    JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 2, (char)a1[21], 27, a5, a6, a7, a8, (uint64_t)&v130);
    v83 = v130;
    if (v130 != -1)
    {
      v84 = *(unsigned int *)(a3 + 36);
      if ((_DWORD)v84 == *(_DWORD *)(a3 + 32))
      {
        v85 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v84 + 1), (unint64_t)&v130, v78, v79, v80, v81, v82);
        v87 = *v85;
        v86 = (uint64_t *)(v85 + 1);
        v83 = v87;
        LODWORD(v84) = *(_DWORD *)(a3 + 36);
        v88 = *(_QWORD *)(a3 + 24);
      }
      else
      {
        v86 = &v131;
        v88 = *v77;
      }
      v89 = v88 + 12 * v84;
      *(_DWORD *)v89 = v83;
      *(_QWORD *)(v89 + 4) = *v86;
      ++*(_DWORD *)(a3 + 36);
    }
    JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 2, (char)a1[22], 27, v79, v80, v81, v82, (uint64_t)&v128);
    v95 = v128;
    if (v128 != -1)
    {
      v96 = *(unsigned int *)(a3 + 36);
      if ((_DWORD)v96 == *(_DWORD *)(a3 + 32))
      {
        v97 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v96 + 1), (unint64_t)&v128, v90, v91, v92, v93, v94);
        v99 = *v97;
        v98 = v97 + 1;
        v95 = v99;
        LODWORD(v96) = *(_DWORD *)(a3 + 36);
        v100 = *(_QWORD *)(a3 + 24);
      }
      else
      {
        v98 = &v129;
        v100 = *v77;
      }
      v101 = v100 + 12 * v96;
      *(_DWORD *)v101 = v95;
      *(_QWORD *)(v101 + 4) = *(_QWORD *)v98;
      ++*(_DWORD *)(a3 + 36);
    }
    JSC::AssemblyHelpers::unboxDoubleWithoutAssertions(a2, (char)a1[21], (char)a1[25], (char)a1[23], 1, v92, v93, v94);
    JSC::AssemblyHelpers::unboxDoubleWithoutAssertions(a2, (char)a1[22], (char)a1[25], (char)a1[24], 1, v102, v103, v104);
    v112 = (char)a1[24];
    v113 = (char)a1[23];
    v114 = a2[50];
    if (v114 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), v105, v106, v107, v108, v109, v110, v111);
      v114 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v114) = (v112 << 16) | (32 * v113) | v113 | 0x1E603800;
    v115 = a2[50];
    v116 = v115 + 4;
    a2[50] = v115 + 4;
    v117 = (char)a1[23];
    v118 = a1[20];
    if ((v115 + 8) > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), v105, v106, v107, v108, v109, v110, v111);
      v116 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v116) = v118 & 0x1F | (32 * v117) | 0x9E660000;
    v119 = a2[50];
    v120 = v119 + 4;
    a2[50] = v119 + 4;
    if (v118 == 31)
    {
      if ((v119 + 8) > a2[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), v105, v106, v107, v108, v109, v110, v111);
        v120 = a2[50];
      }
      result = 0;
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v120) = -885300225;
      goto LABEL_36;
    }
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 14), v118 & 0x1F | (32 * (v118 & 0x1F)) | 0xCB1B0000, v106, v107, v108, v109, v110, v111);
    return 0;
  }
  else
  {
    if (v13 == 4)
      v121 = 2;
    else
      v121 = 1;
    if (v12 == 4)
      return v121;
    else
      return 1;
  }
}

uint64_t JSC::JITSubGenerator::generateFastPath(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  int *v49;
  int *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int *v68;
  int *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  _DWORD *v98;
  uint64_t *v99;
  int v100;
  uint64_t v101;
  char v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  int v131;
  uint64_t v132;
  unsigned int v133[2];
  char v134;
  __int16 v135;
  char v136;
  unsigned int v137[3];
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  int v142;
  int v143;
  char v144;
  __int16 v145;
  char v146;
  int v147;
  uint64_t v148;
  unsigned int v149[3];
  unsigned int v150[3];

  v8 = a6;
  JSC::MacroAssemblerARM64::branch64(a2, 3, (char)a1[21], 27, (uint64_t)a5, a6, a7, a8, (uint64_t)v150);
  JSC::MacroAssemblerARM64::branch64(a2, 3, (char)a1[22], 27, v14, v15, v16, v17, (uint64_t)v149);
  v25 = a1[21];
  v26 = (char)a1[25];
  if (v25 == a1[25])
    goto LABEL_12;
  if (v25 == 63)
  {
    if (a1[25] != 31)
    {
      v27 = v26 & 0x1F | 0xD2800000;
      goto LABEL_9;
    }
LABEL_8:
    v27 = v26 | (32 * (char)a1[21]) | 0x91000000;
    goto LABEL_9;
  }
  if (v25 == 31 || v26 == 31)
    goto LABEL_8;
  v27 = a1[25] | ((v25 & 0x1F) << 16) | 0xAA0003E0;
LABEL_9:
  v28 = (unsigned int *)(a2 + 200);
  v25 = *(_DWORD *)(a2 + 200);
  if (v25 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v18, v19, v20, v21, v22, v23, v24);
    v25 = *v28;
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v25) = v27;
  *v28 += 4;
  LOBYTE(v25) = a1[25];
LABEL_12:
  JSC::MacroAssemblerARM64::branchSub32(a2, 6, (char)v25, (char)a1[22], (char)v25, v22, v23, v24, (uint64_t)&v147);
  v36 = v147;
  if (v147 != -1)
  {
    v37 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v37 == *(_DWORD *)(a4 + 8))
    {
      v38 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v37 + 1), (unint64_t)&v147, v31, v32, v33, v34, v35);
      v40 = *v38;
      v39 = (uint64_t *)(v38 + 1);
      v36 = v40;
      LODWORD(v37) = *(_DWORD *)(a4 + 12);
    }
    else
    {
      v39 = &v148;
    }
    v41 = *(_QWORD *)a4 + 12 * v37;
    *(_DWORD *)v41 = v36;
    *(_QWORD *)(v41 + 4) = *v39;
    ++*(_DWORD *)(a4 + 12);
  }
  v42 = a1[25];
  v43 = a1[20];
  v44 = *(_DWORD *)(a2 + 200);
  if (v44 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v44 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v44) = v43 & 0x1F | ((v42 & 0x1F) << 16) | 0xAA000360;
  v45 = *(_DWORD *)(a2 + 200) + 4;
  for (*(_DWORD *)(a2 + 200) = v45; v45 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v45)
  {
    if ((v45 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
      v45 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v45) = -721215457;
    v45 = *(_DWORD *)(a2 + 200) + 4;
  }
  v46 = v45;
  if ((v45 + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v46 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v46) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v47 = 69;
  else
    v47 = 65;
  v142 = v45;
  v143 = 0;
  v144 = v47;
  v145 = 15;
  v146 = -1;
  if (v45 != -1)
  {
    v48 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v48 == *(_DWORD *)(a3 + 8))
    {
      v49 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v48 + 1), (unint64_t)&v142, v31, v32, v33, v34, v35);
      v51 = *v49;
      v50 = v49 + 1;
      v52 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v52 = v51;
    }
    else
    {
      v50 = &v143;
      v52 = *(_QWORD *)a3 + 12 * v48;
      *(_DWORD *)v52 = v45;
    }
    *(_QWORD *)(v52 + 4) = *(_QWORD *)v50;
    ++*(_DWORD *)(a3 + 12);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v150, a2, v30, v31, v32, v33, v34, v35);
  if ((*a1 & 0x7E) != 2)
  {
    JSC::MacroAssemblerARM64::branchTest64(a2, 0, (char)a1[21], 27, v53, v54, v55, v56, (uint64_t)&v140);
    v58 = v140;
    if (v140 != -1)
    {
      v59 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v59 == *(_DWORD *)(a4 + 8))
      {
        v60 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v59 + 1), (unint64_t)&v140, v57, v53, v54, v55, v56);
        v62 = *v60;
        v61 = (uint64_t *)(v60 + 1);
        v58 = v62;
        LODWORD(v59) = *(_DWORD *)(a4 + 12);
      }
      else
      {
        v61 = &v141;
      }
      v63 = *(_QWORD *)a4 + 12 * v59;
      *(_DWORD *)v63 = v58;
      *(_QWORD *)(v63 + 4) = *v61;
      ++*(_DWORD *)(a4 + 12);
    }
  }
  if ((a1[10] & 0x7E) != 2)
  {
    JSC::MacroAssemblerARM64::branchTest64(a2, 0, (char)a1[22], 27, v53, v54, v55, v56, (uint64_t)&v138);
    v66 = v138;
    if (v138 != -1)
    {
      v67 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v67 == *(_DWORD *)(a4 + 8))
      {
        v68 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v67 + 1), (unint64_t)&v138, v64, v65, v54, v55, v56);
        v70 = *v68;
        v69 = v68 + 1;
        v66 = v70;
        LODWORD(v67) = *(_DWORD *)(a4 + 12);
      }
      else
      {
        v69 = &v139;
      }
      v71 = *(_QWORD *)a4 + 12 * v67;
      *(_DWORD *)v71 = v66;
      *(_QWORD *)(v71 + 4) = *(_QWORD *)v69;
      ++*(_DWORD *)(a4 + 12);
    }
  }
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions((_DWORD *)a2, (char)a1[21], (char)a1[25], (char)a1[23], 1, v54, v55, v56);
  JSC::MacroAssemblerARM64::branch64(a2, 3, (char)a1[22], 27, v72, v73, v74, v75, (uint64_t)v137);
  v83 = a1[22];
  v84 = (char)a1[24];
  v85 = *(_DWORD *)(a2 + 200);
  if (v85 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v76, v77, v78, v79, v80, v81, v82);
    v85 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v85) = v84 | (32 * (v83 & 0x1F)) | 0x1E620000;
  v86 = *(_DWORD *)(a2 + 200) + 4;
  for (*(_DWORD *)(a2 + 200) = v86; v86 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v86)
  {
    if ((v86 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v76, v77, v78, v79, v80, v81, v82);
      v86 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v86) = -721215457;
    v86 = *(_DWORD *)(a2 + 200) + 4;
  }
  v87 = v86;
  if ((v86 + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v76, v77, v78, v79, v80, v81, v82);
    v87 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v87) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v88 = 69;
  else
    v88 = 65;
  v133[0] = v86;
  v133[1] = 0;
  v134 = v88;
  v135 = 15;
  v136 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v149, a2, v77, v78, v79, v80, v81, v82);
  if ((a1[10] & 0x7E) != 2)
  {
    JSC::MacroAssemblerARM64::branchTest64(a2, 0, (char)a1[22], 27, v92, v93, v94, v95, (uint64_t)&v131);
    v96 = v131;
    if (v131 != -1)
    {
      v97 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v97 == *(_DWORD *)(a4 + 8))
      {
        v98 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v97 + 1), (unint64_t)&v131, v91, v92, v93, v94, v95);
        v100 = *v98;
        v99 = (uint64_t *)(v98 + 1);
        v96 = v100;
        LODWORD(v97) = *(_DWORD *)(a4 + 12);
      }
      else
      {
        v99 = &v132;
      }
      v101 = *(_QWORD *)a4 + 12 * v97;
      *(_DWORD *)v101 = v96;
      *(_QWORD *)(v101 + 4) = *v99;
      ++*(_DWORD *)(a4 + 12);
    }
  }
  v102 = a1[21];
  v103 = (char)a1[23];
  v104 = *(_DWORD *)(a2 + 200);
  if (v104 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v89, v90, v91, v92, v93, v94, v95);
    v104 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v104) = v103 | (32 * (v102 & 0x1F)) | 0x1E620000;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v137, a2, v90, v91, v92, v93, v94, v95);
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions((_DWORD *)a2, (char)a1[22], (char)a1[25], (char)a1[24], 1, v105, v106, v107);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v133, a2, v108, v109, v110, v111, v112, v113);
  v121 = (char)a1[24];
  v122 = (char)a1[23];
  v123 = *(_DWORD *)(a2 + 200);
  if (v123 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v114, v115, v116, v117, v118, v119, v120);
    v123 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v123) = (v121 << 16) | (32 * v122) | v122 | 0x1E603800;
  v124 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v124;
  if (a5 && v8)
  {
    JSC::ArithProfile<unsigned short>::emitSetDouble(a5, a2, (char)a1[25], v116, v117, v118, v119, v120);
    v124 = *(_DWORD *)(a2 + 200);
  }
  v125 = (char)a1[23];
  v126 = a1[20];
  if (v124 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v114, v115, v116, v117, v118, v119, v120);
    v124 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v124) = v126 & 0x1F | (32 * v125) | 0x9E660000;
  v127 = *(_DWORD *)(a2 + 200);
  v128 = v127 + 4;
  *(_DWORD *)(a2 + 200) = v127 + 4;
  if (v126 == 31)
    v129 = -885300225;
  else
    v129 = v126 & 0x1F | (32 * (v126 & 0x1F)) | 0xCB1B0000;
  if ((v127 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v114, v115, v116, v117, v118, v119, v120);
    v128 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v128) = v129;
  *(_DWORD *)(a2 + 200) += 4;
  return 1;
}

void JSC::JITThunks::~JITThunks(JSC::JITThunks *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::JITThunks *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v9 = *((_QWORD *)this + 176);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      v11 = *((_QWORD *)this + 176);
      do
      {
        if ((unint64_t)(*(_QWORD *)v11 + 1) >= 2)
        {
          *(_QWORD *)(*(_QWORD *)v11 + 8) = 3;
          *(_QWORD *)v11 = 0;
        }
        v11 += 8;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = (JSC::JITThunks *)((char *)this + 1400);
  v13 = *((_QWORD *)this + 175);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v14)
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)(v13 + 16 * i) != -1)
        {
          v16 = v13 + 16 * i;
          v17 = *(_DWORD *)(v16 + 8);
          v16 += 8;
          v18 = (unsigned int *)(v17 | ((unint64_t)*(unsigned __int8 *)(v16 + 4) << 32));
          *(_DWORD *)v16 = 0;
          *(_BYTE *)(v16 + 4) = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              atomic_store(1u, v18);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v18, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
            }
          }
        }
      }
    }
    WTF::fastFree(v13 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  do
  {
    v21 = (unsigned int *)*((_QWORD *)v12 - 1);
    *((_QWORD *)v12 - 1) = 0;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v21, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
    }
    v12 = (JSC::JITThunks *)((char *)v12 - 16);
  }
  while (v12 != (JSC::JITThunks *)((char *)this + 8));
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::JITThunks::~JITThunks(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

void JSC::JITThunks::initialize(JSC::JITThunks *this, JSC::VM *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC::ExecutableMemoryHandle *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::ExecutableMemoryHandle *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::ExecutableMemoryHandle *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  JSC::ExecutableMemoryHandle *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  JSC::ExecutableMemoryHandle *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  JSC::ExecutableMemoryHandle *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  JSC::ExecutableMemoryHandle *v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  JSC::ExecutableMemoryHandle *v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  JSC::ExecutableMemoryHandle *v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  JSC::ExecutableMemoryHandle *v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  JSC::ExecutableMemoryHandle *v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  JSC::ExecutableMemoryHandle *v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  JSC::ExecutableMemoryHandle *v179;
  unsigned int *v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int *v183;
  unsigned int v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  JSC::ExecutableMemoryHandle *v193;
  unsigned int *v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int *v197;
  unsigned int v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  JSC::ExecutableMemoryHandle *v207;
  unsigned int *v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int *v211;
  unsigned int v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  JSC::ExecutableMemoryHandle *v221;
  unsigned int *v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int *v225;
  unsigned int v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  JSC::ExecutableMemoryHandle *v235;
  unsigned int *v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int *v239;
  unsigned int v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  JSC::ExecutableMemoryHandle *v249;
  unsigned int *v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int *v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  JSC::ExecutableMemoryHandle *v263;
  unsigned int *v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int *v267;
  unsigned int v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  JSC::ExecutableMemoryHandle *v277;
  unsigned int *v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int *v281;
  unsigned int v282;
  unsigned int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  JSC::ExecutableMemoryHandle *v291;
  unsigned int *v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int *v295;
  unsigned int v296;
  unsigned int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  JSC::ExecutableMemoryHandle *v305;
  unsigned int *v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int *v309;
  unsigned int v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  JSC::ExecutableMemoryHandle *v319;
  unsigned int *v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int *v323;
  unsigned int v324;
  unsigned int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  JSC::ExecutableMemoryHandle *v333;
  unsigned int *v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int *v337;
  unsigned int v338;
  unsigned int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  JSC::ExecutableMemoryHandle *v347;
  unsigned int *v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int *v351;
  unsigned int v352;
  unsigned int v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  JSC::ExecutableMemoryHandle *v361;
  unsigned int *v362;
  unsigned int v363;
  unsigned int v364;
  unsigned int *v365;
  unsigned int v366;
  unsigned int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  JSC::ExecutableMemoryHandle *v375;
  unsigned int *v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int *v379;
  unsigned int v380;
  unsigned int v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  JSC::ExecutableMemoryHandle *v389;
  unsigned int *v390;
  unsigned int v391;
  unsigned int v392;
  unsigned int *v393;
  unsigned int v394;
  unsigned int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  JSC::ExecutableMemoryHandle *v403;
  unsigned int *v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int *v407;
  unsigned int v408;
  unsigned int v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  JSC::ExecutableMemoryHandle *v417;
  unsigned int *v418;
  unsigned int v419;
  unsigned int v420;
  unsigned int *v421;
  unsigned int v422;
  unsigned int v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  JSC::ExecutableMemoryHandle *v431;
  unsigned int *v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int *v435;
  unsigned int v436;
  unsigned int v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  JSC::ExecutableMemoryHandle *v445;
  unsigned int *v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int *v449;
  unsigned int v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  JSC::ExecutableMemoryHandle *v459;
  unsigned int *v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int *v463;
  unsigned int v464;
  unsigned int v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  JSC::ExecutableMemoryHandle *v473;
  unsigned int *v474;
  unsigned int v475;
  unsigned int v476;
  unsigned int *v477;
  unsigned int v478;
  unsigned int v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  JSC::ExecutableMemoryHandle *v487;
  unsigned int *v488;
  unsigned int v489;
  unsigned int v490;
  unsigned int *v491;
  unsigned int v492;
  unsigned int v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  JSC::ExecutableMemoryHandle *v501;
  unsigned int *v502;
  unsigned int v503;
  unsigned int v504;
  unsigned int *v505;
  unsigned int v506;
  unsigned int v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  JSC::ExecutableMemoryHandle *v515;
  unsigned int *v516;
  unsigned int v517;
  unsigned int v518;
  unsigned int *v519;
  unsigned int v520;
  unsigned int v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  JSC::ExecutableMemoryHandle *v529;
  unsigned int *v530;
  unsigned int v531;
  unsigned int v532;
  unsigned int *v533;
  unsigned int v534;
  unsigned int v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  JSC::ExecutableMemoryHandle *v543;
  unsigned int *v544;
  unsigned int v545;
  unsigned int v546;
  unsigned int *v547;
  unsigned int v548;
  unsigned int v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  JSC::ExecutableMemoryHandle *v557;
  unsigned int *v558;
  unsigned int v559;
  unsigned int v560;
  unsigned int *v561;
  unsigned int v562;
  unsigned int v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  JSC::ExecutableMemoryHandle *v571;
  unsigned int *v572;
  unsigned int v573;
  unsigned int v574;
  unsigned int *v575;
  unsigned int v576;
  unsigned int v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  JSC::ExecutableMemoryHandle *v585;
  unsigned int *v586;
  unsigned int v587;
  unsigned int v588;
  unsigned int *v589;
  unsigned int v590;
  unsigned int v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  JSC::ExecutableMemoryHandle *v599;
  unsigned int *v600;
  unsigned int v601;
  unsigned int v602;
  unsigned int *v603;
  unsigned int v604;
  unsigned int v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  JSC::ExecutableMemoryHandle *v613;
  unsigned int *v614;
  unsigned int v615;
  unsigned int v616;
  unsigned int *v617;
  unsigned int v618;
  unsigned int v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  JSC::ExecutableMemoryHandle *v627;
  unsigned int *v628;
  unsigned int v629;
  unsigned int v630;
  unsigned int *v631;
  unsigned int v632;
  unsigned int v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  JSC::ExecutableMemoryHandle *v641;
  unsigned int *v642;
  unsigned int v643;
  unsigned int v644;
  unsigned int *v645;
  unsigned int v646;
  unsigned int v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  JSC::ExecutableMemoryHandle *v655;
  unsigned int *v656;
  unsigned int v657;
  unsigned int v658;
  unsigned int *v659;
  unsigned int v660;
  unsigned int v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  JSC::ExecutableMemoryHandle *v669;
  unsigned int *v670;
  unsigned int v671;
  unsigned int v672;
  unsigned int *v673;
  unsigned int v674;
  unsigned int v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  JSC::ExecutableMemoryHandle *v683;
  unsigned int *v684;
  unsigned int v685;
  unsigned int v686;
  unsigned int *v687;
  unsigned int v688;
  unsigned int v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  JSC::ExecutableMemoryHandle *v697;
  unsigned int *v698;
  unsigned int v699;
  unsigned int v700;
  unsigned int *v701;
  unsigned int v702;
  unsigned int v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  JSC::ExecutableMemoryHandle *v711;
  unsigned int *v712;
  unsigned int v713;
  unsigned int v714;
  unsigned int *v715;
  unsigned int v716;
  unsigned int v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  JSC::ExecutableMemoryHandle *v725;
  unsigned int *v726;
  unsigned int v727;
  unsigned int v728;
  unsigned int *v729;
  unsigned int v730;
  unsigned int v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  JSC::ExecutableMemoryHandle *v739;
  unsigned int *v740;
  unsigned int v741;
  unsigned int v742;
  unsigned int *v743;
  unsigned int v744;
  unsigned int v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  JSC::ExecutableMemoryHandle *v753;
  unsigned int *v754;
  unsigned int v755;
  unsigned int v756;
  unsigned int *v757;
  unsigned int v758;
  unsigned int v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  JSC::ExecutableMemoryHandle *v767;
  unsigned int *v768;
  unsigned int v769;
  unsigned int v770;
  unsigned int *v771;
  unsigned int v772;
  unsigned int v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  JSC::ExecutableMemoryHandle *v781;
  unsigned int *v782;
  unsigned int v783;
  unsigned int v784;
  unsigned int *v785;
  unsigned int v786;
  unsigned int v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  JSC::ExecutableMemoryHandle *v795;
  unsigned int *v796;
  unsigned int v797;
  unsigned int v798;
  unsigned int *v799;
  unsigned int v800;
  unsigned int v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  JSC::ExecutableMemoryHandle *v809;
  unsigned int *v810;
  unsigned int v811;
  unsigned int v812;
  unsigned int *v813;
  unsigned int v814;
  unsigned int v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  JSC::ExecutableMemoryHandle *v823;
  unsigned int *v824;
  unsigned int v825;
  unsigned int v826;
  unsigned int *v827;
  unsigned int v828;
  unsigned int v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  JSC::ExecutableMemoryHandle *v837;
  unsigned int *v838;
  unsigned int v839;
  unsigned int v840;
  unsigned int *v841;
  unsigned int v842;
  unsigned int v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  JSC::ExecutableMemoryHandle *v851;
  unsigned int *v852;
  unsigned int v853;
  unsigned int v854;
  unsigned int *v855;
  unsigned int v856;
  unsigned int v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  JSC::ExecutableMemoryHandle *v865;
  unsigned int *v866;
  unsigned int v867;
  unsigned int v868;
  unsigned int *v869;
  unsigned int v870;
  unsigned int v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  JSC::ExecutableMemoryHandle *v879;
  unsigned int *v880;
  unsigned int v881;
  unsigned int v882;
  unsigned int *v883;
  unsigned int v884;
  unsigned int v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  JSC::ExecutableMemoryHandle *v893;
  unsigned int *v894;
  unsigned int v895;
  unsigned int v896;
  unsigned int *v897;
  unsigned int v898;
  unsigned int v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  JSC::ExecutableMemoryHandle *v907;
  unsigned int *v908;
  unsigned int v909;
  unsigned int v910;
  unsigned int *v911;
  unsigned int v912;
  unsigned int v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  JSC::ExecutableMemoryHandle *v921;
  unsigned int *v922;
  unsigned int v923;
  unsigned int v924;
  unsigned int *v925;
  unsigned int v926;
  unsigned int v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  JSC::ExecutableMemoryHandle *v935;
  unsigned int *v936;
  unsigned int v937;
  unsigned int v938;
  unsigned int *v939;
  unsigned int v940;
  unsigned int v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  JSC::ExecutableMemoryHandle *v949;
  unsigned int *v950;
  unsigned int v951;
  unsigned int v952;
  unsigned int *v953;
  unsigned int v954;
  unsigned int v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  JSC::ExecutableMemoryHandle *v963;
  unsigned int *v964;
  unsigned int v965;
  unsigned int v966;
  unsigned int *v967;
  unsigned int v968;
  unsigned int v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  JSC::ExecutableMemoryHandle *v977;
  unsigned int *v978;
  unsigned int v979;
  unsigned int v980;
  unsigned int *v981;
  unsigned int v982;
  unsigned int v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  JSC::ExecutableMemoryHandle *v991;
  unsigned int *v992;
  unsigned int v993;
  unsigned int v994;
  unsigned int *v995;
  unsigned int v996;
  unsigned int v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  JSC::ExecutableMemoryHandle *v1005;
  unsigned int *v1006;
  unsigned int v1007;
  unsigned int v1008;
  unsigned int *v1009;
  unsigned int v1010;
  unsigned int v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  JSC::ExecutableMemoryHandle *v1019;
  unsigned int *v1020;
  unsigned int v1021;
  unsigned int v1022;
  unsigned int *v1023;
  unsigned int v1024;
  unsigned int v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  JSC::ExecutableMemoryHandle *v1033;
  unsigned int *v1034;
  unsigned int v1035;
  unsigned int v1036;
  unsigned int *v1037;
  unsigned int v1038;
  unsigned int v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  JSC::ExecutableMemoryHandle *v1047;
  unsigned int *v1048;
  unsigned int v1049;
  unsigned int v1050;
  unsigned int *v1051;
  unsigned int v1052;
  unsigned int v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  JSC::ExecutableMemoryHandle *v1061;
  unsigned int *v1062;
  unsigned int v1063;
  unsigned int v1064;
  unsigned int *v1065;
  unsigned int v1066;
  unsigned int v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  JSC::ExecutableMemoryHandle *v1075;
  unsigned int *v1076;
  unsigned int v1077;
  unsigned int v1078;
  unsigned int *v1079;
  unsigned int v1080;
  unsigned int v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  JSC::ExecutableMemoryHandle *v1089;
  unsigned int *v1090;
  unsigned int v1091;
  unsigned int v1092;
  unsigned int *v1093;
  unsigned int v1094;
  unsigned int v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  JSC::ExecutableMemoryHandle *v1103;
  unsigned int *v1104;
  unsigned int v1105;
  unsigned int v1106;
  unsigned int *v1107;
  unsigned int v1108;
  unsigned int v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  JSC::ExecutableMemoryHandle *v1117;
  unsigned int *v1118;
  unsigned int v1119;
  unsigned int v1120;
  unsigned int *v1121;
  unsigned int v1122;
  unsigned int v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  JSC::ExecutableMemoryHandle *v1131;
  unsigned int *v1132;
  unsigned int v1133;
  unsigned int v1134;
  unsigned int *v1135;
  unsigned int v1136;
  unsigned int v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  JSC::ExecutableMemoryHandle *v1145;
  unsigned int *v1146;
  unsigned int v1147;
  unsigned int v1148;
  unsigned int *v1149;
  unsigned int v1150;
  unsigned int v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  JSC::ExecutableMemoryHandle *v1159;
  unsigned int *v1160;
  unsigned int v1161;
  unsigned int v1162;
  unsigned int *v1163;
  unsigned int v1164;
  unsigned int v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  JSC::ExecutableMemoryHandle *v1173;
  unsigned int *v1174;
  unsigned int v1175;
  unsigned int v1176;
  unsigned int *v1177;
  unsigned int v1178;
  unsigned int v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  JSC::ExecutableMemoryHandle *v1187;
  unsigned int *v1188;
  unsigned int v1189;
  unsigned int v1190;
  unsigned int *v1191;
  unsigned int v1192;
  unsigned int v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  JSC::ExecutableMemoryHandle *v1201;
  unsigned int *v1202;
  unsigned int v1203;
  unsigned int v1204;
  unsigned int *v1205;
  unsigned int v1206;
  unsigned int v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  JSC::ExecutableMemoryHandle *v1215;
  unsigned int *v1216;
  unsigned int v1217;
  unsigned int v1218;
  unsigned int *v1219;
  unsigned int v1220;
  unsigned int v1221;
  unint64_t v1222;
  void *v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  unint64_t v1230;
  void *v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  unint64_t v1238;
  void *v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  unint64_t v1246;
  void *v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  unint64_t v1254;
  void *v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  unint64_t v1262;
  void *v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  unint64_t v1270;
  void *v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  unint64_t v1278;
  void *v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  unint64_t v1286;
  void *v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  unint64_t v1294;
  void *v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  unint64_t v1302;
  void *v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  unint64_t v1310;
  void *v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  unint64_t v1318;
  void *v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  unint64_t v1326;
  void *v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  unint64_t v1334;
  void *v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  unint64_t v1342;
  void *v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  unint64_t v1350;
  void *v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  unint64_t v1358;
  void *v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  unint64_t v1366;
  void *v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  unint64_t v1374;
  void *v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  unint64_t v1382;
  void *v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  unint64_t v1390;
  void *v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  unint64_t v1398;
  void *v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  unint64_t v1406;
  void *v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  unint64_t v1414;
  void *v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  unint64_t v1422;
  void *v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  unint64_t v1430;
  void *v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  unint64_t v1438;
  void *v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  unint64_t v1446;
  void *v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  unint64_t v1454;
  void *v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  unint64_t v1462;
  void *v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  unint64_t v1470;
  void *v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  unint64_t v1478;
  void *v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  unint64_t v1486;
  void *v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  unint64_t v1494;
  void *v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  unint64_t v1502;
  void *v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  unint64_t v1510;
  void *v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  unint64_t v1518;
  void *v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  unint64_t v1526;
  void *v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  unint64_t v1534;
  void *v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  unint64_t v1542;
  void *v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  unint64_t v1550;
  void *v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  unint64_t v1558;
  void *v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  unint64_t v1566;
  void *v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  unint64_t v1574;
  void *v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  unint64_t v1582;
  void *v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  unint64_t v1590;
  void *v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  unint64_t v1598;
  void *v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  unint64_t v1606;
  void *v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  unint64_t v1614;
  void *v1615;
  uint64_t v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  unint64_t v1622;
  void *v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  unint64_t v1630;
  void *v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  unint64_t v1638;
  void *v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  unint64_t v1646;
  void *v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  unint64_t v1654;
  void *v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  unint64_t v1662;
  void *v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  unint64_t v1670;
  void *v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  unint64_t v1678;
  void *v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  unint64_t v1686;
  void *v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  unint64_t v1694;
  void *v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  unint64_t v1702;
  void *v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  unint64_t v1710;
  void *v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  unint64_t v1718;
  void *v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  unint64_t v1726;
  void *v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  unint64_t v1734;
  void *v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  uint64_t v1740;
  uint64_t v1741;
  unint64_t v1742;
  void *v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  unint64_t v1750;
  void *v1751;
  uint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  unint64_t v1758;
  void *v1759;
  uint64_t v1760;
  uint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  unint64_t v1766;
  void *v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  unint64_t v1774;
  void *v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  unint64_t v1782;
  void *v1783;
  uint64_t v1784;
  uint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  unint64_t v1790;
  void *v1791;
  uint64_t v1792;
  uint64_t v1793;
  uint64_t v1794;
  uint64_t v1795;
  uint64_t v1796;
  uint64_t v1797;
  unint64_t v1798;
  void *v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  uint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  unint64_t v1806;
  void *v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t v1810;
  uint64_t v1811;
  uint64_t v1812;
  uint64_t v1813;
  unint64_t v1814;
  void *v1815;
  uint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  uint64_t v1819;
  uint64_t v1820;
  uint64_t v1821;
  unint64_t v1822;
  void *v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  unint64_t v1830;
  void *v1831;
  uint64_t v1832;
  uint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  uint64_t v1836;
  uint64_t v1837;
  unint64_t v1838;
  void *v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  unint64_t v1846;
  void *v1847;
  uint64_t v1848;
  uint64_t v1849;
  uint64_t v1850;
  uint64_t v1851;
  uint64_t v1852;
  uint64_t v1853;
  unint64_t v1854;
  void *v1855;
  uint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  unint64_t v1862;
  void *v1863;
  uint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  unint64_t v1870;
  void *v1871;
  uint64_t v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  unint64_t v1878;
  void *v1879;
  uint64_t v1880;
  uint64_t v1881;
  uint64_t v1882;
  uint64_t v1883;
  uint64_t v1884;
  uint64_t v1885;
  unint64_t v1886;
  void *v1887;
  uint64_t v1888;
  uint64_t v1889;
  uint64_t v1890;
  uint64_t v1891;
  uint64_t v1892;
  uint64_t v1893;
  unint64_t v1894;
  void *v1895;
  uint64_t v1896;
  uint64_t v1897;
  uint64_t v1898;
  uint64_t v1899;
  uint64_t v1900;
  uint64_t v1901;
  unint64_t v1902;
  void *v1903;
  uint64_t v1904;
  uint64_t v1905;
  uint64_t v1906;
  uint64_t v1907;
  uint64_t v1908;
  uint64_t v1909;
  unint64_t v1910;
  void *v1911;
  uint64_t v1912;
  uint64_t v1913;
  uint64_t v1914;
  uint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  unint64_t v1918;
  void *v1919;
  uint64_t v1920;
  uint64_t v1921;
  uint64_t v1922;
  uint64_t v1923;
  uint64_t v1924;
  uint64_t v1925;
  unint64_t v1926;
  void *v1927;
  uint64_t v1928;
  uint64_t v1929;
  uint64_t v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  unint64_t v1934;
  void *v1935;
  uint64_t v1936;
  uint64_t v1937;
  uint64_t v1938;
  uint64_t v1939;
  uint64_t v1940;
  uint64_t v1941;
  unint64_t v1942;
  void *v1943;
  uint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  uint64_t v1947;
  uint64_t v1948;
  uint64_t v1949;
  unint64_t v1950;
  void *v1951;
  uint64_t v1952;
  uint64_t v1953;
  uint64_t v1954;
  uint64_t v1955;
  uint64_t v1956;
  uint64_t v1957;
  unint64_t v1958;
  void *v1959;
  uint64_t v1960;
  uint64_t v1961;
  uint64_t v1962;
  uint64_t v1963;
  uint64_t v1964;
  uint64_t v1965;
  unint64_t v1966;
  void *v1967;
  uint64_t v1968;
  uint64_t v1969;
  uint64_t v1970;
  uint64_t v1971;
  uint64_t v1972;
  uint64_t v1973;
  unint64_t v1974;
  void *v1975;
  uint64_t v1976;
  uint64_t v1977;
  uint64_t v1978;
  uint64_t v1979;
  uint64_t v1980;
  uint64_t v1981;
  unint64_t v1982;
  void *v1983;
  uint64_t v1984;
  uint64_t v1985;
  uint64_t v1986;
  uint64_t v1987;
  uint64_t v1988;
  uint64_t v1989;
  unint64_t v1990;
  void *v1991;
  uint64_t v1992;
  uint64_t v1993;
  uint64_t v1994;
  uint64_t v1995;
  uint64_t v1996;
  uint64_t v1997;
  unint64_t v1998;
  void *v1999;
  uint64_t v2000;
  uint64_t v2001;
  uint64_t v2002;
  uint64_t v2003;
  uint64_t v2004;
  uint64_t v2005;
  unint64_t v2006;
  void *v2007;
  uint64_t v2008;
  uint64_t v2009;
  uint64_t v2010;
  uint64_t v2011;
  uint64_t v2012;
  uint64_t v2013;
  unint64_t v2014;
  void *v2015;
  uint64_t v2016;
  uint64_t v2017;
  uint64_t v2018;
  uint64_t v2019;
  uint64_t v2020;
  uint64_t v2021;
  unint64_t v2022;
  void *v2023;
  uint64_t v2024;
  uint64_t v2025;
  uint64_t v2026;
  uint64_t v2027;
  uint64_t v2028;
  uint64_t v2029;
  unint64_t v2030;
  void *v2031;
  uint64_t v2032;
  uint64_t v2033;
  uint64_t v2034;
  uint64_t v2035;
  uint64_t v2036;
  uint64_t v2037;
  unint64_t v2038;
  void *v2039;
  uint64_t v2040;
  uint64_t v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t v2044;
  uint64_t v2045;
  unint64_t v2046;
  void *v2047;
  uint64_t v2048;
  uint64_t v2049;
  uint64_t v2050;
  uint64_t v2051;
  uint64_t v2052;
  uint64_t v2053;
  unint64_t v2054;
  void *v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  uint64_t v2059;
  uint64_t v2060;
  uint64_t v2061;
  unint64_t v2062;
  void *v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  uint64_t v2067;
  uint64_t v2068;
  uint64_t v2069;
  unint64_t v2070;
  void *v2071;
  uint64_t v2072;
  uint64_t v2073;
  uint64_t v2074;
  uint64_t v2075;
  uint64_t v2076;
  uint64_t v2077;
  unint64_t v2078;
  void *v2079;
  uint64_t v2080;
  uint64_t v2081;
  uint64_t v2082;
  uint64_t v2083;
  uint64_t v2084;
  uint64_t v2085;
  unint64_t v2086;
  void *v2087;
  uint64_t v2088;
  uint64_t v2089;
  uint64_t v2090;
  uint64_t v2091;
  uint64_t v2092;
  uint64_t v2093;
  unint64_t v2094;
  void *v2095;
  uint64_t v2096;
  uint64_t v2097;
  uint64_t v2098;
  uint64_t v2099;
  uint64_t v2100;
  uint64_t v2101;
  unint64_t v2102;
  void *v2103;
  uint64_t v2104;
  uint64_t v2105;
  uint64_t v2106;
  uint64_t v2107;
  uint64_t v2108;
  uint64_t v2109;
  unint64_t v2110;
  void *v2111;
  uint64_t v2112;
  uint64_t v2113;
  uint64_t v2114;
  uint64_t v2115;
  uint64_t v2116;
  uint64_t v2117;
  unint64_t v2118;
  void *v2119;
  uint64_t v2120;
  uint64_t v2121;
  uint64_t v2122;
  uint64_t v2123;
  uint64_t v2124;
  uint64_t v2125;
  unint64_t v2126;
  void *v2127;
  uint64_t v2128;
  uint64_t v2129;
  uint64_t v2130;
  uint64_t v2131;
  uint64_t v2132;
  uint64_t v2133;
  unint64_t v2134;
  void *v2135;
  uint64_t v2136;
  uint64_t v2137;
  uint64_t v2138;
  uint64_t v2139;
  uint64_t v2140;
  uint64_t v2141;
  unint64_t v2142;
  void *v2143;
  uint64_t v2144;
  uint64_t v2145;
  uint64_t v2146;
  uint64_t v2147;
  uint64_t v2148;
  uint64_t v2149;
  unint64_t v2150;
  void *v2151;
  uint64_t v2152;
  uint64_t v2153;
  uint64_t v2154;
  uint64_t v2155;
  uint64_t v2156;
  uint64_t v2157;
  unint64_t v2158;
  void *v2159;
  uint64_t v2160;
  uint64_t v2161;
  uint64_t v2162;
  uint64_t v2163;
  uint64_t v2164;
  uint64_t v2165;
  unint64_t v2166;
  void *v2167;
  uint64_t v2168;
  uint64_t v2169;
  uint64_t v2170;
  uint64_t v2171;
  uint64_t v2172;
  uint64_t v2173;
  unint64_t v2174;
  void *v2175;
  uint64_t v2176;
  uint64_t v2177;
  uint64_t v2178;
  uint64_t v2179;
  uint64_t v2180;
  uint64_t v2181;
  unint64_t v2182;
  void *v2183;
  uint64_t v2184;
  uint64_t v2185;
  uint64_t v2186;
  uint64_t v2187;
  uint64_t v2188;
  uint64_t v2189;
  unint64_t v2190;
  void *v2191;
  uint64_t v2192;
  uint64_t v2193;
  uint64_t v2194;
  uint64_t v2195;
  uint64_t v2196;
  uint64_t v2197;
  unint64_t v2198;
  void *v2199;
  uint64_t v2200;
  uint64_t v2201;
  uint64_t v2202;
  uint64_t v2203;
  uint64_t v2204;
  uint64_t v2205;
  unint64_t v2206;
  void *v2207;
  uint64_t v2208;
  uint64_t v2209;
  uint64_t v2210;
  uint64_t v2211;
  uint64_t v2212;
  uint64_t v2213;
  unint64_t v2214;
  void *v2215;
  uint64_t v2216;
  uint64_t v2217;
  uint64_t v2218;
  uint64_t v2219;
  uint64_t v2220;
  uint64_t v2221;
  unint64_t v2222;
  void *v2223;
  uint64_t v2224;
  uint64_t v2225;
  uint64_t v2226;
  uint64_t v2227;
  uint64_t v2228;
  uint64_t v2229;
  unint64_t v2230;
  void *v2231;
  uint64_t v2232;
  uint64_t v2233;
  uint64_t v2234;
  uint64_t v2235;
  uint64_t v2236;
  uint64_t v2237;
  unint64_t v2238;
  void *v2239;
  uint64_t v2240;
  uint64_t v2241;
  uint64_t v2242;
  uint64_t v2243;
  uint64_t v2244;
  uint64_t v2245;
  unint64_t v2246;
  void *v2247;
  uint64_t v2248;
  uint64_t v2249;
  uint64_t v2250;
  uint64_t v2251;
  uint64_t v2252;
  uint64_t v2253;
  unint64_t v2254;
  void *v2255;
  uint64_t v2256;
  uint64_t v2257;
  uint64_t v2258;
  uint64_t v2259;
  uint64_t v2260;
  uint64_t v2261;
  unint64_t v2262;
  void *v2263;
  uint64_t v2264;
  uint64_t v2265;
  uint64_t v2266;
  uint64_t v2267;
  uint64_t v2268;
  uint64_t v2269;
  unint64_t v2270;
  void *v2271;
  uint64_t v2272;
  uint64_t v2273;
  uint64_t v2274;
  uint64_t v2275;
  uint64_t v2276;
  uint64_t v2277;
  unint64_t v2278;
  void *v2279;
  uint64_t v2280;
  uint64_t v2281;
  uint64_t v2282;
  uint64_t v2283;
  uint64_t v2284;
  uint64_t v2285;
  unint64_t v2286;
  void *v2287;
  uint64_t v2288;
  uint64_t v2289;
  uint64_t v2290;
  uint64_t v2291;
  uint64_t v2292;
  uint64_t v2293;
  unint64_t v2294;
  void *v2295;
  uint64_t v2296;
  uint64_t v2297;
  uint64_t v2298;
  uint64_t v2299;
  uint64_t v2300;
  uint64_t v2301;
  unint64_t v2302;
  void *v2303;
  uint64_t v2304;
  uint64_t v2305;
  uint64_t v2306;
  uint64_t v2307;
  uint64_t v2308;
  uint64_t v2309;
  unint64_t v2310;
  void *v2311;
  uint64_t v2312;
  uint64_t v2313;
  uint64_t v2314;
  uint64_t v2315;
  uint64_t v2316;
  uint64_t v2317;
  unint64_t v2318;
  void *v2319;
  uint64_t v2320;
  uint64_t v2321;
  uint64_t v2322;
  uint64_t v2323;
  uint64_t v2324;
  uint64_t v2325;
  unint64_t v2326;
  void *v2327;
  uint64_t v2328;
  uint64_t v2329;
  uint64_t v2330;
  uint64_t v2331;
  uint64_t v2332;
  uint64_t v2333;
  unint64_t v2334;
  void *v2335;
  uint64_t v2336;
  uint64_t v2337;
  uint64_t v2338;
  uint64_t v2339;
  uint64_t v2340;
  uint64_t v2341;
  unint64_t v2342;
  void *v2343;
  uint64_t v2344;
  uint64_t v2345;
  uint64_t v2346;
  uint64_t v2347;
  uint64_t v2348;
  uint64_t v2349;
  unint64_t v2350;
  void *v2351;
  uint64_t v2352;
  uint64_t v2353;
  uint64_t v2354;
  uint64_t v2355;
  uint64_t v2356;
  uint64_t v2357;
  unint64_t v2358;
  void *v2359;
  uint64_t v2360;
  uint64_t v2361;
  uint64_t v2362;
  uint64_t v2363;
  uint64_t v2364;
  uint64_t v2365;
  unint64_t v2366;
  void *v2367;
  uint64_t v2368;
  uint64_t v2369;
  uint64_t v2370;
  uint64_t v2371;
  uint64_t v2372;
  uint64_t v2373;
  unint64_t v2374;
  void *v2375;
  uint64_t v2376;
  uint64_t v2377;
  uint64_t v2378;
  uint64_t v2379;
  uint64_t v2380;
  uint64_t v2381;
  unint64_t v2382;
  void *v2383;
  uint64_t v2384;
  uint64_t v2385;
  uint64_t v2386;
  uint64_t v2387;
  uint64_t v2388;
  uint64_t v2389;
  unint64_t v2390;
  void *v2391;
  uint64_t v2392;
  uint64_t v2393;
  uint64_t v2394;
  uint64_t v2395;
  uint64_t v2396;
  uint64_t v2397;
  unint64_t v2398;
  void *v2399;
  uint64_t v2400;
  uint64_t v2401;
  uint64_t v2402;
  uint64_t v2403;
  uint64_t v2404;
  uint64_t v2405;
  unint64_t v2406;
  void *v2407;
  uint64_t v2408;
  uint64_t v2409;
  uint64_t v2410;
  uint64_t v2411;
  uint64_t v2412;
  uint64_t v2413;
  unint64_t v2414;
  void *v2415;
  uint64_t v2416;
  uint64_t v2417;
  uint64_t v2418;
  uint64_t v2419;
  uint64_t v2420;
  uint64_t v2421;
  unint64_t v2422;
  void *v2423;
  uint64_t v2424;
  uint64_t v2425;
  uint64_t v2426;
  uint64_t v2427;
  uint64_t v2428;
  uint64_t v2429;
  unint64_t v2430;
  void *v2431;
  uint64_t v2432;
  uint64_t v2433;
  uint64_t v2434;
  uint64_t v2435;
  uint64_t v2436;
  uint64_t v2437;
  unint64_t v2438;
  void *v2439;
  uint64_t v2440;
  uint64_t v2441;
  uint64_t v2442;
  uint64_t v2443;
  uint64_t v2444;
  uint64_t v2445;
  unint64_t v2446;
  void *v2447;
  uint64_t v2448;
  uint64_t v2449;
  uint64_t v2450;
  uint64_t v2451;
  uint64_t v2452;
  uint64_t v2453;
  unint64_t v2454;
  void *v2455;
  uint64_t v2456;
  uint64_t v2457;
  uint64_t v2458;
  uint64_t v2459;
  uint64_t v2460;
  uint64_t v2461;
  unint64_t v2462;
  void *v2463;
  uint64_t v2464;
  uint64_t v2465;
  uint64_t v2466;
  uint64_t v2467;
  uint64_t v2468;
  uint64_t v2469;
  unint64_t v2470;
  void *v2471;
  uint64_t v2472;
  uint64_t v2473;
  uint64_t v2474;
  uint64_t v2475;
  uint64_t v2476;
  uint64_t v2477;
  unint64_t v2478;
  void *v2479;
  uint64_t v2480;
  uint64_t v2481;
  uint64_t v2482;
  uint64_t v2483;
  uint64_t v2484;
  uint64_t v2485;
  unint64_t v2486;
  void *v2487;
  uint64_t v2488;
  uint64_t v2489;
  uint64_t v2490;
  uint64_t v2491;
  uint64_t v2492;
  uint64_t v2493;
  unint64_t v2494;
  void *v2495;
  uint64_t v2496;
  uint64_t v2497;
  uint64_t v2498;
  uint64_t v2499;
  uint64_t v2500;
  uint64_t v2501;
  unint64_t v2502;
  void *v2503;
  uint64_t v2504;
  uint64_t v2505;
  uint64_t v2506;
  uint64_t v2507;
  uint64_t v2508;
  uint64_t v2509;
  unint64_t v2510;
  void *v2511;
  uint64_t v2512;
  uint64_t v2513;
  uint64_t v2514;
  uint64_t v2515;
  uint64_t v2516;
  uint64_t v2517;
  unint64_t v2518;
  void *v2519;
  uint64_t v2520;
  uint64_t v2521;
  uint64_t v2522;
  uint64_t v2523;
  uint64_t v2524;
  uint64_t v2525;
  unint64_t v2526;
  void *v2527;
  uint64_t v2528;
  uint64_t v2529;
  uint64_t v2530;
  uint64_t v2531;
  uint64_t v2532;
  uint64_t v2533;
  unint64_t v2534;
  void *v2535;
  uint64_t v2536;
  uint64_t v2537;
  uint64_t v2538;
  uint64_t v2539;
  uint64_t v2540;
  uint64_t v2541;
  unint64_t v2542;
  void *v2543;
  uint64_t v2544;
  uint64_t v2545;
  uint64_t v2546;
  uint64_t v2547;
  uint64_t v2548;
  uint64_t v2549;
  unint64_t v2550;
  void *v2551;
  uint64_t v2552;
  uint64_t v2553;
  uint64_t v2554;
  uint64_t v2555;
  uint64_t v2556;
  uint64_t v2557;
  unint64_t v2558;
  void *v2559;
  uint64_t v2560;
  uint64_t v2561;
  uint64_t v2562;
  uint64_t v2563;
  uint64_t v2564;
  uint64_t v2565;
  unint64_t v2566;
  void *v2567;
  uint64_t v2568;
  uint64_t v2569;
  uint64_t v2570;
  uint64_t v2571;
  uint64_t v2572;
  uint64_t v2573;
  unint64_t v2574;
  void *v2575;
  uint64_t v2576;
  uint64_t v2577;
  uint64_t v2578;
  uint64_t v2579;
  uint64_t v2580;
  uint64_t v2581;
  unint64_t v2582;
  void *v2583;
  uint64_t v2584;
  uint64_t v2585;
  uint64_t v2586;
  uint64_t v2587;
  uint64_t v2588;
  uint64_t v2589;
  unint64_t v2590;
  void *v2591;
  uint64_t v2592;
  uint64_t v2593;
  uint64_t v2594;
  uint64_t v2595;
  uint64_t v2596;
  uint64_t v2597;
  unint64_t v2598;
  void *v2599;
  uint64_t v2600;
  uint64_t v2601;
  uint64_t v2602;
  uint64_t v2603;
  uint64_t v2604;
  uint64_t v2605;
  unint64_t v2606;
  void *v2607;
  uint64_t v2608;
  uint64_t v2609;
  uint64_t v2610;
  uint64_t v2611;
  uint64_t v2612;
  uint64_t v2613;
  std::once_flag::_State_type v2614;
  JSC::ExecutableMemoryHandle *v2615;

  JSC::handleExceptionGenerator(a2, &v2614);
  v11 = v2615;
  v2615 = 0;
  v12 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = v2614;
  *((_QWORD *)this + 2) = v11;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v12, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v1222, v1223, v1224, v1225, v1226, v1227, v1228, v1229);
    }
    v15 = (unsigned int *)v2615;
    v2615 = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v15, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v1230, v1231, v1232, v1233, v1234, v1235, v1236, v1237);
      }
    }
  }
  JSC::handleExceptionWithCallFrameRollbackGenerator(a2, &v2614);
  v25 = v2615;
  v2615 = 0;
  v26 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 3) = v2614;
  *((_QWORD *)this + 4) = v25;
  if (v26)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v26, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v1238, v1239, v1240, v1241, v1242, v1243, v1244, v1245);
    }
    v29 = (unsigned int *)v2615;
    v2615 = 0;
    if (v29)
    {
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        atomic_store(1u, v29);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v29, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253);
      }
    }
  }
  JSC::checkExceptionGenerator(a2, &v2614);
  v39 = v2615;
  v2615 = 0;
  v40 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 5) = v2614;
  *((_QWORD *)this + 6) = v39;
  if (v40)
  {
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      atomic_store(1u, v40);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v40, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v1254, v1255, v1256, v1257, v1258, v1259, v1260, v1261);
    }
    v43 = (unsigned int *)v2615;
    v2615 = 0;
    if (v43)
    {
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        atomic_store(1u, v43);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v43, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v1262, v1263, v1264, v1265, v1266, v1267, v1268, v1269);
      }
    }
  }
  JSC::nativeForGenerator(&v2614, (uint64_t)a2, 0, 0, 0, 0);
  v53 = v2615;
  v2615 = 0;
  v54 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 7) = v2614;
  *((_QWORD *)this + 8) = v53;
  if (v54)
  {
    do
    {
      v55 = __ldaxr(v54);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v54));
    if (!v56)
    {
      atomic_store(1u, v54);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v54, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277);
    }
    v57 = (unsigned int *)v2615;
    v2615 = 0;
    if (v57)
    {
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (!v59)
      {
        atomic_store(1u, v57);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v57, v46, v47, v48, v49, v50, v51, v52);
        WTF::fastFree(v1278, v1279, v1280, v1281, v1282, v1283, v1284, v1285);
      }
    }
  }
  JSC::nativeForGenerator(&v2614, (uint64_t)a2, 0, 1, 0, 0);
  v67 = v2615;
  v2615 = 0;
  v68 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 9) = v2614;
  *((_QWORD *)this + 10) = v67;
  if (v68)
  {
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
    {
      atomic_store(1u, v68);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v68, v60, v61, v62, v63, v64, v65, v66);
      WTF::fastFree(v1286, v1287, v1288, v1289, v1290, v1291, v1292, v1293);
    }
    v71 = (unsigned int *)v2615;
    v2615 = 0;
    if (v71)
    {
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (!v73)
      {
        atomic_store(1u, v71);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v71, v60, v61, v62, v63, v64, v65, v66);
        WTF::fastFree(v1294, v1295, v1296, v1297, v1298, v1299, v1300, v1301);
      }
    }
  }
  JSC::nativeForGenerator(&v2614, (uint64_t)a2, 0, 0, 1, 0);
  v81 = v2615;
  v2615 = 0;
  v82 = (unsigned int *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 11) = v2614;
  *((_QWORD *)this + 12) = v81;
  if (v82)
  {
    do
    {
      v83 = __ldaxr(v82);
      v84 = v83 - 1;
    }
    while (__stlxr(v84, v82));
    if (!v84)
    {
      atomic_store(1u, v82);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v82, v74, v75, v76, v77, v78, v79, v80);
      WTF::fastFree(v1302, v1303, v1304, v1305, v1306, v1307, v1308, v1309);
    }
    v85 = (unsigned int *)v2615;
    v2615 = 0;
    if (v85)
    {
      do
      {
        v86 = __ldaxr(v85);
        v87 = v86 - 1;
      }
      while (__stlxr(v87, v85));
      if (!v87)
      {
        atomic_store(1u, v85);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v85, v74, v75, v76, v77, v78, v79, v80);
        WTF::fastFree(v1310, v1311, v1312, v1313, v1314, v1315, v1316, v1317);
      }
    }
  }
  JSC::nativeForGenerator(&v2614, (uint64_t)a2, 0, 0, 2, 0);
  v95 = v2615;
  v2615 = 0;
  v96 = (unsigned int *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 13) = v2614;
  *((_QWORD *)this + 14) = v95;
  if (v96)
  {
    do
    {
      v97 = __ldaxr(v96);
      v98 = v97 - 1;
    }
    while (__stlxr(v98, v96));
    if (!v98)
    {
      atomic_store(1u, v96);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v96, v88, v89, v90, v91, v92, v93, v94);
      WTF::fastFree(v1318, v1319, v1320, v1321, v1322, v1323, v1324, v1325);
    }
    v99 = (unsigned int *)v2615;
    v2615 = 0;
    if (v99)
    {
      do
      {
        v100 = __ldaxr(v99);
        v101 = v100 - 1;
      }
      while (__stlxr(v101, v99));
      if (!v101)
      {
        atomic_store(1u, v99);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v99, v88, v89, v90, v91, v92, v93, v94);
        WTF::fastFree(v1326, v1327, v1328, v1329, v1330, v1331, v1332, v1333);
      }
    }
  }
  JSC::nativeForGenerator(&v2614, (uint64_t)a2, 1, 0, 0, 0);
  v109 = v2615;
  v2615 = 0;
  v110 = (unsigned int *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 15) = v2614;
  *((_QWORD *)this + 16) = v109;
  if (v110)
  {
    do
    {
      v111 = __ldaxr(v110);
      v112 = v111 - 1;
    }
    while (__stlxr(v112, v110));
    if (!v112)
    {
      atomic_store(1u, v110);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v110, v102, v103, v104, v105, v106, v107, v108);
      WTF::fastFree(v1334, v1335, v1336, v1337, v1338, v1339, v1340, v1341);
    }
    v113 = (unsigned int *)v2615;
    v2615 = 0;
    if (v113)
    {
      do
      {
        v114 = __ldaxr(v113);
        v115 = v114 - 1;
      }
      while (__stlxr(v115, v113));
      if (!v115)
      {
        atomic_store(1u, v113);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v113, v102, v103, v104, v105, v106, v107, v108);
        WTF::fastFree(v1342, v1343, v1344, v1345, v1346, v1347, v1348, v1349);
      }
    }
  }
  JSC::nativeForGenerator(&v2614, (uint64_t)a2, 1, 1, 0, 0);
  v123 = v2615;
  v2615 = 0;
  v124 = (unsigned int *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 17) = v2614;
  *((_QWORD *)this + 18) = v123;
  if (v124)
  {
    do
    {
      v125 = __ldaxr(v124);
      v126 = v125 - 1;
    }
    while (__stlxr(v126, v124));
    if (!v126)
    {
      atomic_store(1u, v124);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v124, v116, v117, v118, v119, v120, v121, v122);
      WTF::fastFree(v1350, v1351, v1352, v1353, v1354, v1355, v1356, v1357);
    }
    v127 = (unsigned int *)v2615;
    v2615 = 0;
    if (v127)
    {
      do
      {
        v128 = __ldaxr(v127);
        v129 = v128 - 1;
      }
      while (__stlxr(v129, v127));
      if (!v129)
      {
        atomic_store(1u, v127);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v127, v116, v117, v118, v119, v120, v121, v122);
        WTF::fastFree(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365);
      }
    }
  }
  JSC::throwExceptionFromCallGenerator(a2, &v2614);
  v137 = v2615;
  v2615 = 0;
  v138 = (unsigned int *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 19) = v2614;
  *((_QWORD *)this + 20) = v137;
  if (v138)
  {
    do
    {
      v139 = __ldaxr(v138);
      v140 = v139 - 1;
    }
    while (__stlxr(v140, v138));
    if (!v140)
    {
      atomic_store(1u, v138);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v138, v130, v131, v132, v133, v134, v135, v136);
      WTF::fastFree(v1366, v1367, v1368, v1369, v1370, v1371, v1372, v1373);
    }
    v141 = (unsigned int *)v2615;
    v2615 = 0;
    if (v141)
    {
      do
      {
        v142 = __ldaxr(v141);
        v143 = v142 - 1;
      }
      while (__stlxr(v143, v141));
      if (!v143)
      {
        atomic_store(1u, v141);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v141, v130, v131, v132, v133, v134, v135, v136);
        WTF::fastFree(v1374, v1375, v1376, v1377, v1378, v1379, v1380, v1381);
      }
    }
  }
  JSC::throwExceptionFromCallSlowPathGenerator(a2, &v2614);
  v151 = v2615;
  v2615 = 0;
  v152 = (unsigned int *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 21) = v2614;
  *((_QWORD *)this + 22) = v151;
  if (v152)
  {
    do
    {
      v153 = __ldaxr(v152);
      v154 = v153 - 1;
    }
    while (__stlxr(v154, v152));
    if (!v154)
    {
      atomic_store(1u, v152);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v152, v144, v145, v146, v147, v148, v149, v150);
      WTF::fastFree(v1382, v1383, v1384, v1385, v1386, v1387, v1388, v1389);
    }
    v155 = (unsigned int *)v2615;
    v2615 = 0;
    if (v155)
    {
      do
      {
        v156 = __ldaxr(v155);
        v157 = v156 - 1;
      }
      while (__stlxr(v157, v155));
      if (!v157)
      {
        atomic_store(1u, v155);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v155, v144, v145, v146, v147, v148, v149, v150);
        WTF::fastFree(v1390, v1391, v1392, v1393, v1394, v1395, v1396, v1397);
      }
    }
  }
  JSC::virtualThunkFor(&v2614, (uint64_t)a2, 0, 0);
  v165 = v2615;
  v2615 = 0;
  v166 = (unsigned int *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 23) = v2614;
  *((_QWORD *)this + 24) = v165;
  if (v166)
  {
    do
    {
      v167 = __ldaxr(v166);
      v168 = v167 - 1;
    }
    while (__stlxr(v168, v166));
    if (!v168)
    {
      atomic_store(1u, v166);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v166, v158, v159, v160, v161, v162, v163, v164);
      WTF::fastFree(v1398, v1399, v1400, v1401, v1402, v1403, v1404, v1405);
    }
    v169 = (unsigned int *)v2615;
    v2615 = 0;
    if (v169)
    {
      do
      {
        v170 = __ldaxr(v169);
        v171 = v170 - 1;
      }
      while (__stlxr(v171, v169));
      if (!v171)
      {
        atomic_store(1u, v169);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v169, v158, v159, v160, v161, v162, v163, v164);
        WTF::fastFree(v1406, v1407, v1408, v1409, v1410, v1411, v1412, v1413);
      }
    }
  }
  JSC::virtualThunkFor(&v2614, (uint64_t)a2, 1, 0);
  v179 = v2615;
  v2615 = 0;
  v180 = (unsigned int *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 25) = v2614;
  *((_QWORD *)this + 26) = v179;
  if (v180)
  {
    do
    {
      v181 = __ldaxr(v180);
      v182 = v181 - 1;
    }
    while (__stlxr(v182, v180));
    if (!v182)
    {
      atomic_store(1u, v180);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v180, v172, v173, v174, v175, v176, v177, v178);
      WTF::fastFree(v1414, v1415, v1416, v1417, v1418, v1419, v1420, v1421);
    }
    v183 = (unsigned int *)v2615;
    v2615 = 0;
    if (v183)
    {
      do
      {
        v184 = __ldaxr(v183);
        v185 = v184 - 1;
      }
      while (__stlxr(v185, v183));
      if (!v185)
      {
        atomic_store(1u, v183);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v183, v172, v173, v174, v175, v176, v177, v178);
        WTF::fastFree(v1422, v1423, v1424, v1425, v1426, v1427, v1428, v1429);
      }
    }
  }
  JSC::virtualThunkFor(&v2614, (uint64_t)a2, 2, 1);
  v193 = v2615;
  v2615 = 0;
  v194 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 27) = v2614;
  *((_QWORD *)this + 28) = v193;
  if (v194)
  {
    do
    {
      v195 = __ldaxr(v194);
      v196 = v195 - 1;
    }
    while (__stlxr(v196, v194));
    if (!v196)
    {
      atomic_store(1u, v194);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v194, v186, v187, v188, v189, v190, v191, v192);
      WTF::fastFree(v1430, v1431, v1432, v1433, v1434, v1435, v1436, v1437);
    }
    v197 = (unsigned int *)v2615;
    v2615 = 0;
    if (v197)
    {
      do
      {
        v198 = __ldaxr(v197);
        v199 = v198 - 1;
      }
      while (__stlxr(v199, v197));
      if (!v199)
      {
        atomic_store(1u, v197);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v197, v186, v187, v188, v189, v190, v191, v192);
        WTF::fastFree(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445);
      }
    }
  }
  JSC::polymorphicThunkFor(&v2614, 0, 0);
  v207 = v2615;
  v2615 = 0;
  v208 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 29) = v2614;
  *((_QWORD *)this + 30) = v207;
  if (v208)
  {
    do
    {
      v209 = __ldaxr(v208);
      v210 = v209 - 1;
    }
    while (__stlxr(v210, v208));
    if (!v210)
    {
      atomic_store(1u, v208);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v208, v200, v201, v202, v203, v204, v205, v206);
      WTF::fastFree(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453);
    }
    v211 = (unsigned int *)v2615;
    v2615 = 0;
    if (v211)
    {
      do
      {
        v212 = __ldaxr(v211);
        v213 = v212 - 1;
      }
      while (__stlxr(v213, v211));
      if (!v213)
      {
        atomic_store(1u, v211);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v211, v200, v201, v202, v203, v204, v205, v206);
        WTF::fastFree(v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461);
      }
    }
  }
  JSC::polymorphicThunkFor(&v2614, 1, 0);
  v221 = v2615;
  v2615 = 0;
  v222 = (unsigned int *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 31) = v2614;
  *((_QWORD *)this + 32) = v221;
  if (v222)
  {
    do
    {
      v223 = __ldaxr(v222);
      v224 = v223 - 1;
    }
    while (__stlxr(v224, v222));
    if (!v224)
    {
      atomic_store(1u, v222);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v222, v214, v215, v216, v217, v218, v219, v220);
      WTF::fastFree(v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469);
    }
    v225 = (unsigned int *)v2615;
    v2615 = 0;
    if (v225)
    {
      do
      {
        v226 = __ldaxr(v225);
        v227 = v226 - 1;
      }
      while (__stlxr(v227, v225));
      if (!v227)
      {
        atomic_store(1u, v225);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v225, v214, v215, v216, v217, v218, v219, v220);
        WTF::fastFree(v1470, v1471, v1472, v1473, v1474, v1475, v1476, v1477);
      }
    }
  }
  JSC::polymorphicThunkFor(&v2614, 0, 1);
  v235 = v2615;
  v2615 = 0;
  v236 = (unsigned int *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 33) = v2614;
  *((_QWORD *)this + 34) = v235;
  if (v236)
  {
    do
    {
      v237 = __ldaxr(v236);
      v238 = v237 - 1;
    }
    while (__stlxr(v238, v236));
    if (!v238)
    {
      atomic_store(1u, v236);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v236, v228, v229, v230, v231, v232, v233, v234);
      WTF::fastFree(v1478, v1479, v1480, v1481, v1482, v1483, v1484, v1485);
    }
    v239 = (unsigned int *)v2615;
    v2615 = 0;
    if (v239)
    {
      do
      {
        v240 = __ldaxr(v239);
        v241 = v240 - 1;
      }
      while (__stlxr(v241, v239));
      if (!v241)
      {
        atomic_store(1u, v239);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v239, v228, v229, v230, v231, v232, v233, v234);
        WTF::fastFree(v1486, v1487, v1488, v1489, v1490, v1491, v1492, v1493);
      }
    }
  }
  JSC::polymorphicThunkFor(&v2614, 1, 1);
  v249 = v2615;
  v2615 = 0;
  v250 = (unsigned int *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 35) = v2614;
  *((_QWORD *)this + 36) = v249;
  if (v250)
  {
    do
    {
      v251 = __ldaxr(v250);
      v252 = v251 - 1;
    }
    while (__stlxr(v252, v250));
    if (!v252)
    {
      atomic_store(1u, v250);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v250, v242, v243, v244, v245, v246, v247, v248);
      WTF::fastFree(v1494, v1495, v1496, v1497, v1498, v1499, v1500, v1501);
    }
    v253 = (unsigned int *)v2615;
    v2615 = 0;
    if (v253)
    {
      do
      {
        v254 = __ldaxr(v253);
        v255 = v254 - 1;
      }
      while (__stlxr(v255, v253));
      if (!v255)
      {
        atomic_store(1u, v253);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v253, v242, v243, v244, v245, v246, v247, v248);
        WTF::fastFree(v1502, v1503, v1504, v1505, v1506, v1507, v1508, v1509);
      }
    }
  }
  JSC::returnFromBaselineGenerator(&v2614);
  v263 = v2615;
  v2615 = 0;
  v264 = (unsigned int *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 37) = v2614;
  *((_QWORD *)this + 38) = v263;
  if (v264)
  {
    do
    {
      v265 = __ldaxr(v264);
      v266 = v265 - 1;
    }
    while (__stlxr(v266, v264));
    if (!v266)
    {
      atomic_store(1u, v264);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v264, v256, v257, v258, v259, v260, v261, v262);
      WTF::fastFree(v1510, v1511, v1512, v1513, v1514, v1515, v1516, v1517);
    }
    v267 = (unsigned int *)v2615;
    v2615 = 0;
    if (v267)
    {
      do
      {
        v268 = __ldaxr(v267);
        v269 = v268 - 1;
      }
      while (__stlxr(v269, v267));
      if (!v269)
      {
        atomic_store(1u, v267);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v267, v256, v257, v258, v259, v260, v261, v262);
        WTF::fastFree(v1518, v1519, v1520, v1521, v1522, v1523, v1524, v1525);
      }
    }
  }
  JSC::arityFixupGenerator(a2, &v2614);
  v277 = v2615;
  v2615 = 0;
  v278 = (unsigned int *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 39) = v2614;
  *((_QWORD *)this + 40) = v277;
  if (v278)
  {
    do
    {
      v279 = __ldaxr(v278);
      v280 = v279 - 1;
    }
    while (__stlxr(v280, v278));
    if (!v280)
    {
      atomic_store(1u, v278);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v278, v270, v271, v272, v273, v274, v275, v276);
      WTF::fastFree(v1526, v1527, v1528, v1529, v1530, v1531, v1532, v1533);
    }
    v281 = (unsigned int *)v2615;
    v2615 = 0;
    if (v281)
    {
      do
      {
        v282 = __ldaxr(v281);
        v283 = v282 - 1;
      }
      while (__stlxr(v283, v281));
      if (!v283)
      {
        atomic_store(1u, v281);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v281, v270, v271, v272, v273, v274, v275, v276);
        WTF::fastFree(v1534, v1535, v1536, v1537, v1538, v1539, v1540, v1541);
      }
    }
  }
  JSC::getByIdLoadOwnPropertyHandler(&v2614);
  v291 = v2615;
  v2615 = 0;
  v292 = (unsigned int *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 41) = v2614;
  *((_QWORD *)this + 42) = v291;
  if (v292)
  {
    do
    {
      v293 = __ldaxr(v292);
      v294 = v293 - 1;
    }
    while (__stlxr(v294, v292));
    if (!v294)
    {
      atomic_store(1u, v292);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v292, v284, v285, v286, v287, v288, v289, v290);
      WTF::fastFree(v1542, v1543, v1544, v1545, v1546, v1547, v1548, v1549);
    }
    v295 = (unsigned int *)v2615;
    v2615 = 0;
    if (v295)
    {
      do
      {
        v296 = __ldaxr(v295);
        v297 = v296 - 1;
      }
      while (__stlxr(v297, v295));
      if (!v297)
      {
        atomic_store(1u, v295);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v295, v284, v285, v286, v287, v288, v289, v290);
        WTF::fastFree(v1550, v1551, v1552, v1553, v1554, v1555, v1556, v1557);
      }
    }
  }
  JSC::getByIdLoadPrototypePropertyHandler(&v2614);
  v305 = v2615;
  v2615 = 0;
  v306 = (unsigned int *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 43) = v2614;
  *((_QWORD *)this + 44) = v305;
  if (v306)
  {
    do
    {
      v307 = __ldaxr(v306);
      v308 = v307 - 1;
    }
    while (__stlxr(v308, v306));
    if (!v308)
    {
      atomic_store(1u, v306);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v306, v298, v299, v300, v301, v302, v303, v304);
      WTF::fastFree(v1558, v1559, v1560, v1561, v1562, v1563, v1564, v1565);
    }
    v309 = (unsigned int *)v2615;
    v2615 = 0;
    if (v309)
    {
      do
      {
        v310 = __ldaxr(v309);
        v311 = v310 - 1;
      }
      while (__stlxr(v311, v309));
      if (!v311)
      {
        atomic_store(1u, v309);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v309, v298, v299, v300, v301, v302, v303, v304);
        WTF::fastFree(v1566, v1567, v1568, v1569, v1570, v1571, v1572, v1573);
      }
    }
  }
  JSC::getByIdMissHandler(&v2614);
  v319 = v2615;
  v2615 = 0;
  v320 = (unsigned int *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 45) = v2614;
  *((_QWORD *)this + 46) = v319;
  if (v320)
  {
    do
    {
      v321 = __ldaxr(v320);
      v322 = v321 - 1;
    }
    while (__stlxr(v322, v320));
    if (!v322)
    {
      atomic_store(1u, v320);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v320, v312, v313, v314, v315, v316, v317, v318);
      WTF::fastFree(v1574, v1575, v1576, v1577, v1578, v1579, v1580, v1581);
    }
    v323 = (unsigned int *)v2615;
    v2615 = 0;
    if (v323)
    {
      do
      {
        v324 = __ldaxr(v323);
        v325 = v324 - 1;
      }
      while (__stlxr(v325, v323));
      if (!v325)
      {
        atomic_store(1u, v323);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v323, v312, v313, v314, v315, v316, v317, v318);
        WTF::fastFree(v1582, v1583, v1584, v1585, v1586, v1587, v1588, v1589);
      }
    }
  }
  JSC::getByIdCustomAccessorHandler(a2, &v2614);
  v333 = v2615;
  v2615 = 0;
  v334 = (unsigned int *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 47) = v2614;
  *((_QWORD *)this + 48) = v333;
  if (v334)
  {
    do
    {
      v335 = __ldaxr(v334);
      v336 = v335 - 1;
    }
    while (__stlxr(v336, v334));
    if (!v336)
    {
      atomic_store(1u, v334);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v334, v326, v327, v328, v329, v330, v331, v332);
      WTF::fastFree(v1590, v1591, v1592, v1593, v1594, v1595, v1596, v1597);
    }
    v337 = (unsigned int *)v2615;
    v2615 = 0;
    if (v337)
    {
      do
      {
        v338 = __ldaxr(v337);
        v339 = v338 - 1;
      }
      while (__stlxr(v339, v337));
      if (!v339)
      {
        atomic_store(1u, v337);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v337, v326, v327, v328, v329, v330, v331, v332);
        WTF::fastFree(v1598, v1599, v1600, v1601, v1602, v1603, v1604, v1605);
      }
    }
  }
  JSC::getByIdCustomValueHandler(a2, &v2614);
  v347 = v2615;
  v2615 = 0;
  v348 = (unsigned int *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 49) = v2614;
  *((_QWORD *)this + 50) = v347;
  if (v348)
  {
    do
    {
      v349 = __ldaxr(v348);
      v350 = v349 - 1;
    }
    while (__stlxr(v350, v348));
    if (!v350)
    {
      atomic_store(1u, v348);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v348, v340, v341, v342, v343, v344, v345, v346);
      WTF::fastFree(v1606, v1607, v1608, v1609, v1610, v1611, v1612, v1613);
    }
    v351 = (unsigned int *)v2615;
    v2615 = 0;
    if (v351)
    {
      do
      {
        v352 = __ldaxr(v351);
        v353 = v352 - 1;
      }
      while (__stlxr(v353, v351));
      if (!v353)
      {
        atomic_store(1u, v351);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v351, v340, v341, v342, v343, v344, v345, v346);
        WTF::fastFree(v1614, v1615, v1616, v1617, v1618, v1619, v1620, v1621);
      }
    }
  }
  JSC::getByIdGetterHandler(&v2614);
  v361 = v2615;
  v2615 = 0;
  v362 = (unsigned int *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 51) = v2614;
  *((_QWORD *)this + 52) = v361;
  if (v362)
  {
    do
    {
      v363 = __ldaxr(v362);
      v364 = v363 - 1;
    }
    while (__stlxr(v364, v362));
    if (!v364)
    {
      atomic_store(1u, v362);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v362, v354, v355, v356, v357, v358, v359, v360);
      WTF::fastFree(v1622, v1623, v1624, v1625, v1626, v1627, v1628, v1629);
    }
    v365 = (unsigned int *)v2615;
    v2615 = 0;
    if (v365)
    {
      do
      {
        v366 = __ldaxr(v365);
        v367 = v366 - 1;
      }
      while (__stlxr(v367, v365));
      if (!v367)
      {
        atomic_store(1u, v365);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v365, v354, v355, v356, v357, v358, v359, v360);
        WTF::fastFree(v1630, v1631, v1632, v1633, v1634, v1635, v1636, v1637);
      }
    }
  }
  JSC::getByIdProxyObjectLoadHandler(&v2614);
  v375 = v2615;
  v2615 = 0;
  v376 = (unsigned int *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 53) = v2614;
  *((_QWORD *)this + 54) = v375;
  if (v376)
  {
    do
    {
      v377 = __ldaxr(v376);
      v378 = v377 - 1;
    }
    while (__stlxr(v378, v376));
    if (!v378)
    {
      atomic_store(1u, v376);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v376, v368, v369, v370, v371, v372, v373, v374);
      WTF::fastFree(v1638, v1639, v1640, v1641, v1642, v1643, v1644, v1645);
    }
    v379 = (unsigned int *)v2615;
    v2615 = 0;
    if (v379)
    {
      do
      {
        v380 = __ldaxr(v379);
        v381 = v380 - 1;
      }
      while (__stlxr(v381, v379));
      if (!v381)
      {
        atomic_store(1u, v379);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v379, v368, v369, v370, v371, v372, v373, v374);
        WTF::fastFree(v1646, v1647, v1648, v1649, v1650, v1651, v1652, v1653);
      }
    }
  }
  JSC::getByIdModuleNamespaceLoadHandler(&v2614);
  v389 = v2615;
  v2615 = 0;
  v390 = (unsigned int *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 55) = v2614;
  *((_QWORD *)this + 56) = v389;
  if (v390)
  {
    do
    {
      v391 = __ldaxr(v390);
      v392 = v391 - 1;
    }
    while (__stlxr(v392, v390));
    if (!v392)
    {
      atomic_store(1u, v390);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v390, v382, v383, v384, v385, v386, v387, v388);
      WTF::fastFree(v1654, v1655, v1656, v1657, v1658, v1659, v1660, v1661);
    }
    v393 = (unsigned int *)v2615;
    v2615 = 0;
    if (v393)
    {
      do
      {
        v394 = __ldaxr(v393);
        v395 = v394 - 1;
      }
      while (__stlxr(v395, v393));
      if (!v395)
      {
        atomic_store(1u, v393);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v393, v382, v383, v384, v385, v386, v387, v388);
        WTF::fastFree(v1662, v1663, v1664, v1665, v1666, v1667, v1668, v1669);
      }
    }
  }
  JSC::putByIdReplaceHandler(&v2614);
  v403 = v2615;
  v2615 = 0;
  v404 = (unsigned int *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 57) = v2614;
  *((_QWORD *)this + 58) = v403;
  if (v404)
  {
    do
    {
      v405 = __ldaxr(v404);
      v406 = v405 - 1;
    }
    while (__stlxr(v406, v404));
    if (!v406)
    {
      atomic_store(1u, v404);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v404, v396, v397, v398, v399, v400, v401, v402);
      WTF::fastFree(v1670, v1671, v1672, v1673, v1674, v1675, v1676, v1677);
    }
    v407 = (unsigned int *)v2615;
    v2615 = 0;
    if (v407)
    {
      do
      {
        v408 = __ldaxr(v407);
        v409 = v408 - 1;
      }
      while (__stlxr(v409, v407));
      if (!v409)
      {
        atomic_store(1u, v407);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v407, v396, v397, v398, v399, v400, v401, v402);
        WTF::fastFree(v1678, v1679, v1680, v1681, v1682, v1683, v1684, v1685);
      }
    }
  }
  JSC::putByIdTransitionNonAllocatingHandler(a2, &v2614);
  v417 = v2615;
  v2615 = 0;
  v418 = (unsigned int *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 59) = v2614;
  *((_QWORD *)this + 60) = v417;
  if (v418)
  {
    do
    {
      v419 = __ldaxr(v418);
      v420 = v419 - 1;
    }
    while (__stlxr(v420, v418));
    if (!v420)
    {
      atomic_store(1u, v418);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v418, v410, v411, v412, v413, v414, v415, v416);
      WTF::fastFree(v1686, v1687, v1688, v1689, v1690, v1691, v1692, v1693);
    }
    v421 = (unsigned int *)v2615;
    v2615 = 0;
    if (v421)
    {
      do
      {
        v422 = __ldaxr(v421);
        v423 = v422 - 1;
      }
      while (__stlxr(v423, v421));
      if (!v423)
      {
        atomic_store(1u, v421);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v421, v410, v411, v412, v413, v414, v415, v416);
        WTF::fastFree(v1694, v1695, v1696, v1697, v1698, v1699, v1700, v1701);
      }
    }
  }
  JSC::putByIdTransitionNewlyAllocatingHandler(a2, &v2614);
  v431 = v2615;
  v2615 = 0;
  v432 = (unsigned int *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 61) = v2614;
  *((_QWORD *)this + 62) = v431;
  if (v432)
  {
    do
    {
      v433 = __ldaxr(v432);
      v434 = v433 - 1;
    }
    while (__stlxr(v434, v432));
    if (!v434)
    {
      atomic_store(1u, v432);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v432, v424, v425, v426, v427, v428, v429, v430);
      WTF::fastFree(v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709);
    }
    v435 = (unsigned int *)v2615;
    v2615 = 0;
    if (v435)
    {
      do
      {
        v436 = __ldaxr(v435);
        v437 = v436 - 1;
      }
      while (__stlxr(v437, v435));
      if (!v437)
      {
        atomic_store(1u, v435);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v435, v424, v425, v426, v427, v428, v429, v430);
        WTF::fastFree(v1710, v1711, v1712, v1713, v1714, v1715, v1716, v1717);
      }
    }
  }
  JSC::putByIdTransitionReallocatingHandler(a2, &v2614);
  v445 = v2615;
  v2615 = 0;
  v446 = (unsigned int *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 63) = v2614;
  *((_QWORD *)this + 64) = v445;
  if (v446)
  {
    do
    {
      v447 = __ldaxr(v446);
      v448 = v447 - 1;
    }
    while (__stlxr(v448, v446));
    if (!v448)
    {
      atomic_store(1u, v446);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v446, v438, v439, v440, v441, v442, v443, v444);
      WTF::fastFree(v1718, v1719, v1720, v1721, v1722, v1723, v1724, v1725);
    }
    v449 = (unsigned int *)v2615;
    v2615 = 0;
    if (v449)
    {
      do
      {
        v450 = __ldaxr(v449);
        v451 = v450 - 1;
      }
      while (__stlxr(v451, v449));
      if (!v451)
      {
        atomic_store(1u, v449);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v449, v438, v439, v440, v441, v442, v443, v444);
        WTF::fastFree(v1726, v1727, v1728, v1729, v1730, v1731, v1732, v1733);
      }
    }
  }
  JSC::putByIdTransitionReallocatingOutOfLineHandler(a2, &v2614);
  v459 = v2615;
  *((_QWORD *)this + 65) = v2614;
  v2615 = 0;
  v460 = (unsigned int *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = v459;
  if (v460)
  {
    do
    {
      v461 = __ldaxr(v460);
      v462 = v461 - 1;
    }
    while (__stlxr(v462, v460));
    if (!v462)
    {
      atomic_store(1u, v460);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v460, v452, v453, v454, v455, v456, v457, v458);
      WTF::fastFree(v1734, v1735, v1736, v1737, v1738, v1739, v1740, v1741);
    }
    v463 = (unsigned int *)v2615;
    v2615 = 0;
    if (v463)
    {
      do
      {
        v464 = __ldaxr(v463);
        v465 = v464 - 1;
      }
      while (__stlxr(v465, v463));
      if (!v465)
      {
        atomic_store(1u, v463);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v463, v452, v453, v454, v455, v456, v457, v458);
        WTF::fastFree(v1742, v1743, v1744, v1745, v1746, v1747, v1748, v1749);
      }
    }
  }
  JSC::putByIdCustomAccessorHandler(a2, &v2614);
  v473 = v2615;
  *((_QWORD *)this + 67) = v2614;
  v2615 = 0;
  v474 = (unsigned int *)*((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = v473;
  if (v474)
  {
    do
    {
      v475 = __ldaxr(v474);
      v476 = v475 - 1;
    }
    while (__stlxr(v476, v474));
    if (!v476)
    {
      atomic_store(1u, v474);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v474, v466, v467, v468, v469, v470, v471, v472);
      WTF::fastFree(v1750, v1751, v1752, v1753, v1754, v1755, v1756, v1757);
    }
    v477 = (unsigned int *)v2615;
    v2615 = 0;
    if (v477)
    {
      do
      {
        v478 = __ldaxr(v477);
        v479 = v478 - 1;
      }
      while (__stlxr(v479, v477));
      if (!v479)
      {
        atomic_store(1u, v477);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v477, v466, v467, v468, v469, v470, v471, v472);
        WTF::fastFree(v1758, v1759, v1760, v1761, v1762, v1763, v1764, v1765);
      }
    }
  }
  JSC::putByIdCustomValueHandler(a2, &v2614);
  v487 = v2615;
  *((_QWORD *)this + 69) = v2614;
  v2615 = 0;
  v488 = (unsigned int *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = v487;
  if (v488)
  {
    do
    {
      v489 = __ldaxr(v488);
      v490 = v489 - 1;
    }
    while (__stlxr(v490, v488));
    if (!v490)
    {
      atomic_store(1u, v488);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v488, v480, v481, v482, v483, v484, v485, v486);
      WTF::fastFree(v1766, v1767, v1768, v1769, v1770, v1771, v1772, v1773);
    }
    v491 = (unsigned int *)v2615;
    v2615 = 0;
    if (v491)
    {
      do
      {
        v492 = __ldaxr(v491);
        v493 = v492 - 1;
      }
      while (__stlxr(v493, v491));
      if (!v493)
      {
        atomic_store(1u, v491);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v491, v480, v481, v482, v483, v484, v485, v486);
        WTF::fastFree(v1774, v1775, v1776, v1777, v1778, v1779, v1780, v1781);
      }
    }
  }
  JSC::putByIdStrictSetterHandler(&v2614);
  v501 = v2615;
  *((_QWORD *)this + 71) = v2614;
  v2615 = 0;
  v502 = (unsigned int *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = v501;
  if (v502)
  {
    do
    {
      v503 = __ldaxr(v502);
      v504 = v503 - 1;
    }
    while (__stlxr(v504, v502));
    if (!v504)
    {
      atomic_store(1u, v502);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v502, v494, v495, v496, v497, v498, v499, v500);
      WTF::fastFree(v1782, v1783, v1784, v1785, v1786, v1787, v1788, v1789);
    }
    v505 = (unsigned int *)v2615;
    v2615 = 0;
    if (v505)
    {
      do
      {
        v506 = __ldaxr(v505);
        v507 = v506 - 1;
      }
      while (__stlxr(v507, v505));
      if (!v507)
      {
        atomic_store(1u, v505);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v505, v494, v495, v496, v497, v498, v499, v500);
        WTF::fastFree(v1790, v1791, v1792, v1793, v1794, v1795, v1796, v1797);
      }
    }
  }
  JSC::putByIdSloppySetterHandler(&v2614);
  v515 = v2615;
  *((_QWORD *)this + 73) = v2614;
  v2615 = 0;
  v516 = (unsigned int *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = v515;
  if (v516)
  {
    do
    {
      v517 = __ldaxr(v516);
      v518 = v517 - 1;
    }
    while (__stlxr(v518, v516));
    if (!v518)
    {
      atomic_store(1u, v516);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v516, v508, v509, v510, v511, v512, v513, v514);
      WTF::fastFree(v1798, v1799, v1800, v1801, v1802, v1803, v1804, v1805);
    }
    v519 = (unsigned int *)v2615;
    v2615 = 0;
    if (v519)
    {
      do
      {
        v520 = __ldaxr(v519);
        v521 = v520 - 1;
      }
      while (__stlxr(v521, v519));
      if (!v521)
      {
        atomic_store(1u, v519);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v519, v508, v509, v510, v511, v512, v513, v514);
        WTF::fastFree(v1806, v1807, v1808, v1809, v1810, v1811, v1812, v1813);
      }
    }
  }
  JSC::inByIdHitHandler(&v2614);
  v529 = v2615;
  *((_QWORD *)this + 75) = v2614;
  v2615 = 0;
  v530 = (unsigned int *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = v529;
  if (v530)
  {
    do
    {
      v531 = __ldaxr(v530);
      v532 = v531 - 1;
    }
    while (__stlxr(v532, v530));
    if (!v532)
    {
      atomic_store(1u, v530);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v530, v522, v523, v524, v525, v526, v527, v528);
      WTF::fastFree(v1814, v1815, v1816, v1817, v1818, v1819, v1820, v1821);
    }
    v533 = (unsigned int *)v2615;
    v2615 = 0;
    if (v533)
    {
      do
      {
        v534 = __ldaxr(v533);
        v535 = v534 - 1;
      }
      while (__stlxr(v535, v533));
      if (!v535)
      {
        atomic_store(1u, v533);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v533, v522, v523, v524, v525, v526, v527, v528);
        WTF::fastFree(v1822, v1823, v1824, v1825, v1826, v1827, v1828, v1829);
      }
    }
  }
  JSC::inByIdMissHandler(&v2614);
  v543 = v2615;
  *((_QWORD *)this + 77) = v2614;
  v2615 = 0;
  v544 = (unsigned int *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = v543;
  if (v544)
  {
    do
    {
      v545 = __ldaxr(v544);
      v546 = v545 - 1;
    }
    while (__stlxr(v546, v544));
    if (!v546)
    {
      atomic_store(1u, v544);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v544, v536, v537, v538, v539, v540, v541, v542);
      WTF::fastFree(v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837);
    }
    v547 = (unsigned int *)v2615;
    v2615 = 0;
    if (v547)
    {
      do
      {
        v548 = __ldaxr(v547);
        v549 = v548 - 1;
      }
      while (__stlxr(v549, v547));
      if (!v549)
      {
        atomic_store(1u, v547);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v547, v536, v537, v538, v539, v540, v541, v542);
        WTF::fastFree(v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1845);
      }
    }
  }
  JSC::deleteByIdDeleteHandler(&v2614);
  v557 = v2615;
  *((_QWORD *)this + 79) = v2614;
  v2615 = 0;
  v558 = (unsigned int *)*((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = v557;
  if (v558)
  {
    do
    {
      v559 = __ldaxr(v558);
      v560 = v559 - 1;
    }
    while (__stlxr(v560, v558));
    if (!v560)
    {
      atomic_store(1u, v558);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v558, v550, v551, v552, v553, v554, v555, v556);
      WTF::fastFree(v1846, v1847, v1848, v1849, v1850, v1851, v1852, v1853);
    }
    v561 = (unsigned int *)v2615;
    v2615 = 0;
    if (v561)
    {
      do
      {
        v562 = __ldaxr(v561);
        v563 = v562 - 1;
      }
      while (__stlxr(v563, v561));
      if (!v563)
      {
        atomic_store(1u, v561);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v561, v550, v551, v552, v553, v554, v555, v556);
        WTF::fastFree(v1854, v1855, v1856, v1857, v1858, v1859, v1860, v1861);
      }
    }
  }
  JSC::deleteByIdDeleteNonConfigurableHandler(&v2614);
  v571 = v2615;
  *((_QWORD *)this + 81) = v2614;
  v2615 = 0;
  v572 = (unsigned int *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = v571;
  if (v572)
  {
    do
    {
      v573 = __ldaxr(v572);
      v574 = v573 - 1;
    }
    while (__stlxr(v574, v572));
    if (!v574)
    {
      atomic_store(1u, v572);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v572, v564, v565, v566, v567, v568, v569, v570);
      WTF::fastFree(v1862, v1863, v1864, v1865, v1866, v1867, v1868, v1869);
    }
    v575 = (unsigned int *)v2615;
    v2615 = 0;
    if (v575)
    {
      do
      {
        v576 = __ldaxr(v575);
        v577 = v576 - 1;
      }
      while (__stlxr(v577, v575));
      if (!v577)
      {
        atomic_store(1u, v575);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v575, v564, v565, v566, v567, v568, v569, v570);
        WTF::fastFree(v1870, v1871, v1872, v1873, v1874, v1875, v1876, v1877);
      }
    }
  }
  JSC::deleteByIdDeleteMissHandler(&v2614);
  v585 = v2615;
  *((_QWORD *)this + 83) = v2614;
  v2615 = 0;
  v586 = (unsigned int *)*((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = v585;
  if (v586)
  {
    do
    {
      v587 = __ldaxr(v586);
      v588 = v587 - 1;
    }
    while (__stlxr(v588, v586));
    if (!v588)
    {
      atomic_store(1u, v586);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v586, v578, v579, v580, v581, v582, v583, v584);
      WTF::fastFree(v1878, v1879, v1880, v1881, v1882, v1883, v1884, v1885);
    }
    v589 = (unsigned int *)v2615;
    v2615 = 0;
    if (v589)
    {
      do
      {
        v590 = __ldaxr(v589);
        v591 = v590 - 1;
      }
      while (__stlxr(v591, v589));
      if (!v591)
      {
        atomic_store(1u, v589);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v589, v578, v579, v580, v581, v582, v583, v584);
        WTF::fastFree(v1886, v1887, v1888, v1889, v1890, v1891, v1892, v1893);
      }
    }
  }
  JSC::instanceOfHitHandler(&v2614);
  v599 = v2615;
  *((_QWORD *)this + 85) = v2614;
  v2615 = 0;
  v600 = (unsigned int *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = v599;
  if (v600)
  {
    do
    {
      v601 = __ldaxr(v600);
      v602 = v601 - 1;
    }
    while (__stlxr(v602, v600));
    if (!v602)
    {
      atomic_store(1u, v600);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v600, v592, v593, v594, v595, v596, v597, v598);
      WTF::fastFree(v1894, v1895, v1896, v1897, v1898, v1899, v1900, v1901);
    }
    v603 = (unsigned int *)v2615;
    v2615 = 0;
    if (v603)
    {
      do
      {
        v604 = __ldaxr(v603);
        v605 = v604 - 1;
      }
      while (__stlxr(v605, v603));
      if (!v605)
      {
        atomic_store(1u, v603);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v603, v592, v593, v594, v595, v596, v597, v598);
        WTF::fastFree(v1902, v1903, v1904, v1905, v1906, v1907, v1908, v1909);
      }
    }
  }
  JSC::instanceOfMissHandler(&v2614);
  v613 = v2615;
  *((_QWORD *)this + 87) = v2614;
  v2615 = 0;
  v614 = (unsigned int *)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = v613;
  if (v614)
  {
    do
    {
      v615 = __ldaxr(v614);
      v616 = v615 - 1;
    }
    while (__stlxr(v616, v614));
    if (!v616)
    {
      atomic_store(1u, v614);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v614, v606, v607, v608, v609, v610, v611, v612);
      WTF::fastFree(v1910, v1911, v1912, v1913, v1914, v1915, v1916, v1917);
    }
    v617 = (unsigned int *)v2615;
    v2615 = 0;
    if (v617)
    {
      do
      {
        v618 = __ldaxr(v617);
        v619 = v618 - 1;
      }
      while (__stlxr(v619, v617));
      if (!v619)
      {
        atomic_store(1u, v617);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v617, v606, v607, v608, v609, v610, v611, v612);
        WTF::fastFree(v1918, v1919, v1920, v1921, v1922, v1923, v1924, v1925);
      }
    }
  }
  JSC::getByValWithStringLoadOwnPropertyHandler(&v2614);
  v627 = v2615;
  *((_QWORD *)this + 89) = v2614;
  v2615 = 0;
  v628 = (unsigned int *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = v627;
  if (v628)
  {
    do
    {
      v629 = __ldaxr(v628);
      v630 = v629 - 1;
    }
    while (__stlxr(v630, v628));
    if (!v630)
    {
      atomic_store(1u, v628);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v628, v620, v621, v622, v623, v624, v625, v626);
      WTF::fastFree(v1926, v1927, v1928, v1929, v1930, v1931, v1932, v1933);
    }
    v631 = (unsigned int *)v2615;
    v2615 = 0;
    if (v631)
    {
      do
      {
        v632 = __ldaxr(v631);
        v633 = v632 - 1;
      }
      while (__stlxr(v633, v631));
      if (!v633)
      {
        atomic_store(1u, v631);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v631, v620, v621, v622, v623, v624, v625, v626);
        WTF::fastFree(v1934, v1935, v1936, v1937, v1938, v1939, v1940, v1941);
      }
    }
  }
  JSC::getByValWithStringLoadPrototypePropertyHandler(&v2614);
  v641 = v2615;
  *((_QWORD *)this + 91) = v2614;
  v2615 = 0;
  v642 = (unsigned int *)*((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = v641;
  if (v642)
  {
    do
    {
      v643 = __ldaxr(v642);
      v644 = v643 - 1;
    }
    while (__stlxr(v644, v642));
    if (!v644)
    {
      atomic_store(1u, v642);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v642, v634, v635, v636, v637, v638, v639, v640);
      WTF::fastFree(v1942, v1943, v1944, v1945, v1946, v1947, v1948, v1949);
    }
    v645 = (unsigned int *)v2615;
    v2615 = 0;
    if (v645)
    {
      do
      {
        v646 = __ldaxr(v645);
        v647 = v646 - 1;
      }
      while (__stlxr(v647, v645));
      if (!v647)
      {
        atomic_store(1u, v645);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v645, v634, v635, v636, v637, v638, v639, v640);
        WTF::fastFree(v1950, v1951, v1952, v1953, v1954, v1955, v1956, v1957);
      }
    }
  }
  JSC::getByValWithStringMissHandler(&v2614);
  v655 = v2615;
  *((_QWORD *)this + 93) = v2614;
  v2615 = 0;
  v656 = (unsigned int *)*((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = v655;
  if (v656)
  {
    do
    {
      v657 = __ldaxr(v656);
      v658 = v657 - 1;
    }
    while (__stlxr(v658, v656));
    if (!v658)
    {
      atomic_store(1u, v656);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v656, v648, v649, v650, v651, v652, v653, v654);
      WTF::fastFree(v1958, v1959, v1960, v1961, v1962, v1963, v1964, v1965);
    }
    v659 = (unsigned int *)v2615;
    v2615 = 0;
    if (v659)
    {
      do
      {
        v660 = __ldaxr(v659);
        v661 = v660 - 1;
      }
      while (__stlxr(v661, v659));
      if (!v661)
      {
        atomic_store(1u, v659);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v659, v648, v649, v650, v651, v652, v653, v654);
        WTF::fastFree(v1966, v1967, v1968, v1969, v1970, v1971, v1972, v1973);
      }
    }
  }
  JSC::getByValWithStringCustomAccessorHandler(a2, &v2614);
  v669 = v2615;
  *((_QWORD *)this + 95) = v2614;
  v2615 = 0;
  v670 = (unsigned int *)*((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = v669;
  if (v670)
  {
    do
    {
      v671 = __ldaxr(v670);
      v672 = v671 - 1;
    }
    while (__stlxr(v672, v670));
    if (!v672)
    {
      atomic_store(1u, v670);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v670, v662, v663, v664, v665, v666, v667, v668);
      WTF::fastFree(v1974, v1975, v1976, v1977, v1978, v1979, v1980, v1981);
    }
    v673 = (unsigned int *)v2615;
    v2615 = 0;
    if (v673)
    {
      do
      {
        v674 = __ldaxr(v673);
        v675 = v674 - 1;
      }
      while (__stlxr(v675, v673));
      if (!v675)
      {
        atomic_store(1u, v673);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v673, v662, v663, v664, v665, v666, v667, v668);
        WTF::fastFree(v1982, v1983, v1984, v1985, v1986, v1987, v1988, v1989);
      }
    }
  }
  JSC::getByValWithStringCustomValueHandler(a2, &v2614);
  v683 = v2615;
  *((_QWORD *)this + 97) = v2614;
  v2615 = 0;
  v684 = (unsigned int *)*((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = v683;
  if (v684)
  {
    do
    {
      v685 = __ldaxr(v684);
      v686 = v685 - 1;
    }
    while (__stlxr(v686, v684));
    if (!v686)
    {
      atomic_store(1u, v684);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v684, v676, v677, v678, v679, v680, v681, v682);
      WTF::fastFree(v1990, v1991, v1992, v1993, v1994, v1995, v1996, v1997);
    }
    v687 = (unsigned int *)v2615;
    v2615 = 0;
    if (v687)
    {
      do
      {
        v688 = __ldaxr(v687);
        v689 = v688 - 1;
      }
      while (__stlxr(v689, v687));
      if (!v689)
      {
        atomic_store(1u, v687);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v687, v676, v677, v678, v679, v680, v681, v682);
        WTF::fastFree(v1998, v1999, v2000, v2001, v2002, v2003, v2004, v2005);
      }
    }
  }
  JSC::getByValWithStringGetterHandler(&v2614);
  v697 = v2615;
  *((_QWORD *)this + 99) = v2614;
  v2615 = 0;
  v698 = (unsigned int *)*((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = v697;
  if (v698)
  {
    do
    {
      v699 = __ldaxr(v698);
      v700 = v699 - 1;
    }
    while (__stlxr(v700, v698));
    if (!v700)
    {
      atomic_store(1u, v698);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v698, v690, v691, v692, v693, v694, v695, v696);
      WTF::fastFree(v2006, v2007, v2008, v2009, v2010, v2011, v2012, v2013);
    }
    v701 = (unsigned int *)v2615;
    v2615 = 0;
    if (v701)
    {
      do
      {
        v702 = __ldaxr(v701);
        v703 = v702 - 1;
      }
      while (__stlxr(v703, v701));
      if (!v703)
      {
        atomic_store(1u, v701);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v701, v690, v691, v692, v693, v694, v695, v696);
        WTF::fastFree(v2014, v2015, v2016, v2017, v2018, v2019, v2020, v2021);
      }
    }
  }
  JSC::getByValWithSymbolLoadOwnPropertyHandler(&v2614);
  v711 = v2615;
  *((_QWORD *)this + 101) = v2614;
  v2615 = 0;
  v712 = (unsigned int *)*((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = v711;
  if (v712)
  {
    do
    {
      v713 = __ldaxr(v712);
      v714 = v713 - 1;
    }
    while (__stlxr(v714, v712));
    if (!v714)
    {
      atomic_store(1u, v712);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v712, v704, v705, v706, v707, v708, v709, v710);
      WTF::fastFree(v2022, v2023, v2024, v2025, v2026, v2027, v2028, v2029);
    }
    v715 = (unsigned int *)v2615;
    v2615 = 0;
    if (v715)
    {
      do
      {
        v716 = __ldaxr(v715);
        v717 = v716 - 1;
      }
      while (__stlxr(v717, v715));
      if (!v717)
      {
        atomic_store(1u, v715);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v715, v704, v705, v706, v707, v708, v709, v710);
        WTF::fastFree(v2030, v2031, v2032, v2033, v2034, v2035, v2036, v2037);
      }
    }
  }
  JSC::getByValWithSymbolLoadPrototypePropertyHandler(&v2614);
  v725 = v2615;
  *((_QWORD *)this + 103) = v2614;
  v2615 = 0;
  v726 = (unsigned int *)*((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = v725;
  if (v726)
  {
    do
    {
      v727 = __ldaxr(v726);
      v728 = v727 - 1;
    }
    while (__stlxr(v728, v726));
    if (!v728)
    {
      atomic_store(1u, v726);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v726, v718, v719, v720, v721, v722, v723, v724);
      WTF::fastFree(v2038, v2039, v2040, v2041, v2042, v2043, v2044, v2045);
    }
    v729 = (unsigned int *)v2615;
    v2615 = 0;
    if (v729)
    {
      do
      {
        v730 = __ldaxr(v729);
        v731 = v730 - 1;
      }
      while (__stlxr(v731, v729));
      if (!v731)
      {
        atomic_store(1u, v729);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v729, v718, v719, v720, v721, v722, v723, v724);
        WTF::fastFree(v2046, v2047, v2048, v2049, v2050, v2051, v2052, v2053);
      }
    }
  }
  JSC::getByValWithSymbolMissHandler(&v2614);
  v739 = v2615;
  *((_QWORD *)this + 105) = v2614;
  v2615 = 0;
  v740 = (unsigned int *)*((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = v739;
  if (v740)
  {
    do
    {
      v741 = __ldaxr(v740);
      v742 = v741 - 1;
    }
    while (__stlxr(v742, v740));
    if (!v742)
    {
      atomic_store(1u, v740);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v740, v732, v733, v734, v735, v736, v737, v738);
      WTF::fastFree(v2054, v2055, v2056, v2057, v2058, v2059, v2060, v2061);
    }
    v743 = (unsigned int *)v2615;
    v2615 = 0;
    if (v743)
    {
      do
      {
        v744 = __ldaxr(v743);
        v745 = v744 - 1;
      }
      while (__stlxr(v745, v743));
      if (!v745)
      {
        atomic_store(1u, v743);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v743, v732, v733, v734, v735, v736, v737, v738);
        WTF::fastFree(v2062, v2063, v2064, v2065, v2066, v2067, v2068, v2069);
      }
    }
  }
  JSC::getByValWithSymbolCustomAccessorHandler(a2, &v2614);
  v753 = v2615;
  *((_QWORD *)this + 107) = v2614;
  v2615 = 0;
  v754 = (unsigned int *)*((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = v753;
  if (v754)
  {
    do
    {
      v755 = __ldaxr(v754);
      v756 = v755 - 1;
    }
    while (__stlxr(v756, v754));
    if (!v756)
    {
      atomic_store(1u, v754);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v754, v746, v747, v748, v749, v750, v751, v752);
      WTF::fastFree(v2070, v2071, v2072, v2073, v2074, v2075, v2076, v2077);
    }
    v757 = (unsigned int *)v2615;
    v2615 = 0;
    if (v757)
    {
      do
      {
        v758 = __ldaxr(v757);
        v759 = v758 - 1;
      }
      while (__stlxr(v759, v757));
      if (!v759)
      {
        atomic_store(1u, v757);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v757, v746, v747, v748, v749, v750, v751, v752);
        WTF::fastFree(v2078, v2079, v2080, v2081, v2082, v2083, v2084, v2085);
      }
    }
  }
  JSC::getByValWithSymbolCustomValueHandler(a2, &v2614);
  v767 = v2615;
  *((_QWORD *)this + 109) = v2614;
  v2615 = 0;
  v768 = (unsigned int *)*((_QWORD *)this + 110);
  *((_QWORD *)this + 110) = v767;
  if (v768)
  {
    do
    {
      v769 = __ldaxr(v768);
      v770 = v769 - 1;
    }
    while (__stlxr(v770, v768));
    if (!v770)
    {
      atomic_store(1u, v768);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v768, v760, v761, v762, v763, v764, v765, v766);
      WTF::fastFree(v2086, v2087, v2088, v2089, v2090, v2091, v2092, v2093);
    }
    v771 = (unsigned int *)v2615;
    v2615 = 0;
    if (v771)
    {
      do
      {
        v772 = __ldaxr(v771);
        v773 = v772 - 1;
      }
      while (__stlxr(v773, v771));
      if (!v773)
      {
        atomic_store(1u, v771);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v771, v760, v761, v762, v763, v764, v765, v766);
        WTF::fastFree(v2094, v2095, v2096, v2097, v2098, v2099, v2100, v2101);
      }
    }
  }
  JSC::getByValWithSymbolGetterHandler(&v2614);
  v781 = v2615;
  *((_QWORD *)this + 111) = v2614;
  v2615 = 0;
  v782 = (unsigned int *)*((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = v781;
  if (v782)
  {
    do
    {
      v783 = __ldaxr(v782);
      v784 = v783 - 1;
    }
    while (__stlxr(v784, v782));
    if (!v784)
    {
      atomic_store(1u, v782);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v782, v774, v775, v776, v777, v778, v779, v780);
      WTF::fastFree(v2102, v2103, v2104, v2105, v2106, v2107, v2108, v2109);
    }
    v785 = (unsigned int *)v2615;
    v2615 = 0;
    if (v785)
    {
      do
      {
        v786 = __ldaxr(v785);
        v787 = v786 - 1;
      }
      while (__stlxr(v787, v785));
      if (!v787)
      {
        atomic_store(1u, v785);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v785, v774, v775, v776, v777, v778, v779, v780);
        WTF::fastFree(v2110, v2111, v2112, v2113, v2114, v2115, v2116, v2117);
      }
    }
  }
  JSC::putByValWithStringReplaceHandler(&v2614);
  v795 = v2615;
  *((_QWORD *)this + 113) = v2614;
  v2615 = 0;
  v796 = (unsigned int *)*((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = v795;
  if (v796)
  {
    do
    {
      v797 = __ldaxr(v796);
      v798 = v797 - 1;
    }
    while (__stlxr(v798, v796));
    if (!v798)
    {
      atomic_store(1u, v796);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v796, v788, v789, v790, v791, v792, v793, v794);
      WTF::fastFree(v2118, v2119, v2120, v2121, v2122, v2123, v2124, v2125);
    }
    v799 = (unsigned int *)v2615;
    v2615 = 0;
    if (v799)
    {
      do
      {
        v800 = __ldaxr(v799);
        v801 = v800 - 1;
      }
      while (__stlxr(v801, v799));
      if (!v801)
      {
        atomic_store(1u, v799);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v799, v788, v789, v790, v791, v792, v793, v794);
        WTF::fastFree(v2126, v2127, v2128, v2129, v2130, v2131, v2132, v2133);
      }
    }
  }
  JSC::putByValWithStringTransitionNonAllocatingHandler(a2, &v2614);
  v809 = v2615;
  *((_QWORD *)this + 115) = v2614;
  v2615 = 0;
  v810 = (unsigned int *)*((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = v809;
  if (v810)
  {
    do
    {
      v811 = __ldaxr(v810);
      v812 = v811 - 1;
    }
    while (__stlxr(v812, v810));
    if (!v812)
    {
      atomic_store(1u, v810);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v810, v802, v803, v804, v805, v806, v807, v808);
      WTF::fastFree(v2134, v2135, v2136, v2137, v2138, v2139, v2140, v2141);
    }
    v813 = (unsigned int *)v2615;
    v2615 = 0;
    if (v813)
    {
      do
      {
        v814 = __ldaxr(v813);
        v815 = v814 - 1;
      }
      while (__stlxr(v815, v813));
      if (!v815)
      {
        atomic_store(1u, v813);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v813, v802, v803, v804, v805, v806, v807, v808);
        WTF::fastFree(v2142, v2143, v2144, v2145, v2146, v2147, v2148, v2149);
      }
    }
  }
  JSC::putByValWithStringTransitionNewlyAllocatingHandler(a2, &v2614);
  v823 = v2615;
  *((_QWORD *)this + 117) = v2614;
  v2615 = 0;
  v824 = (unsigned int *)*((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = v823;
  if (v824)
  {
    do
    {
      v825 = __ldaxr(v824);
      v826 = v825 - 1;
    }
    while (__stlxr(v826, v824));
    if (!v826)
    {
      atomic_store(1u, v824);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v824, v816, v817, v818, v819, v820, v821, v822);
      WTF::fastFree(v2150, v2151, v2152, v2153, v2154, v2155, v2156, v2157);
    }
    v827 = (unsigned int *)v2615;
    v2615 = 0;
    if (v827)
    {
      do
      {
        v828 = __ldaxr(v827);
        v829 = v828 - 1;
      }
      while (__stlxr(v829, v827));
      if (!v829)
      {
        atomic_store(1u, v827);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v827, v816, v817, v818, v819, v820, v821, v822);
        WTF::fastFree(v2158, v2159, v2160, v2161, v2162, v2163, v2164, v2165);
      }
    }
  }
  JSC::putByValWithStringTransitionReallocatingHandler(a2, &v2614);
  v837 = v2615;
  *((_QWORD *)this + 119) = v2614;
  v2615 = 0;
  v838 = (unsigned int *)*((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = v837;
  if (v838)
  {
    do
    {
      v839 = __ldaxr(v838);
      v840 = v839 - 1;
    }
    while (__stlxr(v840, v838));
    if (!v840)
    {
      atomic_store(1u, v838);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v838, v830, v831, v832, v833, v834, v835, v836);
      WTF::fastFree(v2166, v2167, v2168, v2169, v2170, v2171, v2172, v2173);
    }
    v841 = (unsigned int *)v2615;
    v2615 = 0;
    if (v841)
    {
      do
      {
        v842 = __ldaxr(v841);
        v843 = v842 - 1;
      }
      while (__stlxr(v843, v841));
      if (!v843)
      {
        atomic_store(1u, v841);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v841, v830, v831, v832, v833, v834, v835, v836);
        WTF::fastFree(v2174, v2175, v2176, v2177, v2178, v2179, v2180, v2181);
      }
    }
  }
  JSC::putByValWithStringTransitionReallocatingOutOfLineHandler(a2, &v2614);
  v851 = v2615;
  *((_QWORD *)this + 121) = v2614;
  v2615 = 0;
  v852 = (unsigned int *)*((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = v851;
  if (v852)
  {
    do
    {
      v853 = __ldaxr(v852);
      v854 = v853 - 1;
    }
    while (__stlxr(v854, v852));
    if (!v854)
    {
      atomic_store(1u, v852);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v852, v844, v845, v846, v847, v848, v849, v850);
      WTF::fastFree(v2182, v2183, v2184, v2185, v2186, v2187, v2188, v2189);
    }
    v855 = (unsigned int *)v2615;
    v2615 = 0;
    if (v855)
    {
      do
      {
        v856 = __ldaxr(v855);
        v857 = v856 - 1;
      }
      while (__stlxr(v857, v855));
      if (!v857)
      {
        atomic_store(1u, v855);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v855, v844, v845, v846, v847, v848, v849, v850);
        WTF::fastFree(v2190, v2191, v2192, v2193, v2194, v2195, v2196, v2197);
      }
    }
  }
  JSC::putByValWithStringCustomAccessorHandler(a2, &v2614);
  v865 = v2615;
  *((_QWORD *)this + 123) = v2614;
  v2615 = 0;
  v866 = (unsigned int *)*((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = v865;
  if (v866)
  {
    do
    {
      v867 = __ldaxr(v866);
      v868 = v867 - 1;
    }
    while (__stlxr(v868, v866));
    if (!v868)
    {
      atomic_store(1u, v866);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v866, v858, v859, v860, v861, v862, v863, v864);
      WTF::fastFree(v2198, v2199, v2200, v2201, v2202, v2203, v2204, v2205);
    }
    v869 = (unsigned int *)v2615;
    v2615 = 0;
    if (v869)
    {
      do
      {
        v870 = __ldaxr(v869);
        v871 = v870 - 1;
      }
      while (__stlxr(v871, v869));
      if (!v871)
      {
        atomic_store(1u, v869);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v869, v858, v859, v860, v861, v862, v863, v864);
        WTF::fastFree(v2206, v2207, v2208, v2209, v2210, v2211, v2212, v2213);
      }
    }
  }
  JSC::putByValWithStringCustomValueHandler(a2, &v2614);
  v879 = v2615;
  *((_QWORD *)this + 125) = v2614;
  v2615 = 0;
  v880 = (unsigned int *)*((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = v879;
  if (v880)
  {
    do
    {
      v881 = __ldaxr(v880);
      v882 = v881 - 1;
    }
    while (__stlxr(v882, v880));
    if (!v882)
    {
      atomic_store(1u, v880);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v880, v872, v873, v874, v875, v876, v877, v878);
      WTF::fastFree(v2214, v2215, v2216, v2217, v2218, v2219, v2220, v2221);
    }
    v883 = (unsigned int *)v2615;
    v2615 = 0;
    if (v883)
    {
      do
      {
        v884 = __ldaxr(v883);
        v885 = v884 - 1;
      }
      while (__stlxr(v885, v883));
      if (!v885)
      {
        atomic_store(1u, v883);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v883, v872, v873, v874, v875, v876, v877, v878);
        WTF::fastFree(v2222, v2223, v2224, v2225, v2226, v2227, v2228, v2229);
      }
    }
  }
  JSC::putByValWithStringStrictSetterHandler(&v2614);
  v893 = v2615;
  *((_QWORD *)this + 127) = v2614;
  v2615 = 0;
  v894 = (unsigned int *)*((_QWORD *)this + 128);
  *((_QWORD *)this + 128) = v893;
  if (v894)
  {
    do
    {
      v895 = __ldaxr(v894);
      v896 = v895 - 1;
    }
    while (__stlxr(v896, v894));
    if (!v896)
    {
      atomic_store(1u, v894);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v894, v886, v887, v888, v889, v890, v891, v892);
      WTF::fastFree(v2230, v2231, v2232, v2233, v2234, v2235, v2236, v2237);
    }
    v897 = (unsigned int *)v2615;
    v2615 = 0;
    if (v897)
    {
      do
      {
        v898 = __ldaxr(v897);
        v899 = v898 - 1;
      }
      while (__stlxr(v899, v897));
      if (!v899)
      {
        atomic_store(1u, v897);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v897, v886, v887, v888, v889, v890, v891, v892);
        WTF::fastFree(v2238, v2239, v2240, v2241, v2242, v2243, v2244, v2245);
      }
    }
  }
  JSC::putByValWithStringSloppySetterHandler(&v2614);
  v907 = v2615;
  *((_QWORD *)this + 129) = v2614;
  v2615 = 0;
  v908 = (unsigned int *)*((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = v907;
  if (v908)
  {
    do
    {
      v909 = __ldaxr(v908);
      v910 = v909 - 1;
    }
    while (__stlxr(v910, v908));
    if (!v910)
    {
      atomic_store(1u, v908);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v908, v900, v901, v902, v903, v904, v905, v906);
      WTF::fastFree(v2246, v2247, v2248, v2249, v2250, v2251, v2252, v2253);
    }
    v911 = (unsigned int *)v2615;
    v2615 = 0;
    if (v911)
    {
      do
      {
        v912 = __ldaxr(v911);
        v913 = v912 - 1;
      }
      while (__stlxr(v913, v911));
      if (!v913)
      {
        atomic_store(1u, v911);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v911, v900, v901, v902, v903, v904, v905, v906);
        WTF::fastFree(v2254, v2255, v2256, v2257, v2258, v2259, v2260, v2261);
      }
    }
  }
  JSC::putByValWithSymbolReplaceHandler(&v2614);
  v921 = v2615;
  *((_QWORD *)this + 131) = v2614;
  v2615 = 0;
  v922 = (unsigned int *)*((_QWORD *)this + 132);
  *((_QWORD *)this + 132) = v921;
  if (v922)
  {
    do
    {
      v923 = __ldaxr(v922);
      v924 = v923 - 1;
    }
    while (__stlxr(v924, v922));
    if (!v924)
    {
      atomic_store(1u, v922);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v922, v914, v915, v916, v917, v918, v919, v920);
      WTF::fastFree(v2262, v2263, v2264, v2265, v2266, v2267, v2268, v2269);
    }
    v925 = (unsigned int *)v2615;
    v2615 = 0;
    if (v925)
    {
      do
      {
        v926 = __ldaxr(v925);
        v927 = v926 - 1;
      }
      while (__stlxr(v927, v925));
      if (!v927)
      {
        atomic_store(1u, v925);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v925, v914, v915, v916, v917, v918, v919, v920);
        WTF::fastFree(v2270, v2271, v2272, v2273, v2274, v2275, v2276, v2277);
      }
    }
  }
  JSC::putByValWithSymbolTransitionNonAllocatingHandler(a2, &v2614);
  v935 = v2615;
  *((_QWORD *)this + 133) = v2614;
  v2615 = 0;
  v936 = (unsigned int *)*((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = v935;
  if (v936)
  {
    do
    {
      v937 = __ldaxr(v936);
      v938 = v937 - 1;
    }
    while (__stlxr(v938, v936));
    if (!v938)
    {
      atomic_store(1u, v936);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v936, v928, v929, v930, v931, v932, v933, v934);
      WTF::fastFree(v2278, v2279, v2280, v2281, v2282, v2283, v2284, v2285);
    }
    v939 = (unsigned int *)v2615;
    v2615 = 0;
    if (v939)
    {
      do
      {
        v940 = __ldaxr(v939);
        v941 = v940 - 1;
      }
      while (__stlxr(v941, v939));
      if (!v941)
      {
        atomic_store(1u, v939);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v939, v928, v929, v930, v931, v932, v933, v934);
        WTF::fastFree(v2286, v2287, v2288, v2289, v2290, v2291, v2292, v2293);
      }
    }
  }
  JSC::putByValWithSymbolTransitionNewlyAllocatingHandler(a2, &v2614);
  v949 = v2615;
  *((_QWORD *)this + 135) = v2614;
  v2615 = 0;
  v950 = (unsigned int *)*((_QWORD *)this + 136);
  *((_QWORD *)this + 136) = v949;
  if (v950)
  {
    do
    {
      v951 = __ldaxr(v950);
      v952 = v951 - 1;
    }
    while (__stlxr(v952, v950));
    if (!v952)
    {
      atomic_store(1u, v950);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v950, v942, v943, v944, v945, v946, v947, v948);
      WTF::fastFree(v2294, v2295, v2296, v2297, v2298, v2299, v2300, v2301);
    }
    v953 = (unsigned int *)v2615;
    v2615 = 0;
    if (v953)
    {
      do
      {
        v954 = __ldaxr(v953);
        v955 = v954 - 1;
      }
      while (__stlxr(v955, v953));
      if (!v955)
      {
        atomic_store(1u, v953);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v953, v942, v943, v944, v945, v946, v947, v948);
        WTF::fastFree(v2302, v2303, v2304, v2305, v2306, v2307, v2308, v2309);
      }
    }
  }
  JSC::putByValWithSymbolTransitionReallocatingHandler(a2, &v2614);
  v963 = v2615;
  *((_QWORD *)this + 137) = v2614;
  v2615 = 0;
  v964 = (unsigned int *)*((_QWORD *)this + 138);
  *((_QWORD *)this + 138) = v963;
  if (v964)
  {
    do
    {
      v965 = __ldaxr(v964);
      v966 = v965 - 1;
    }
    while (__stlxr(v966, v964));
    if (!v966)
    {
      atomic_store(1u, v964);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v964, v956, v957, v958, v959, v960, v961, v962);
      WTF::fastFree(v2310, v2311, v2312, v2313, v2314, v2315, v2316, v2317);
    }
    v967 = (unsigned int *)v2615;
    v2615 = 0;
    if (v967)
    {
      do
      {
        v968 = __ldaxr(v967);
        v969 = v968 - 1;
      }
      while (__stlxr(v969, v967));
      if (!v969)
      {
        atomic_store(1u, v967);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v967, v956, v957, v958, v959, v960, v961, v962);
        WTF::fastFree(v2318, v2319, v2320, v2321, v2322, v2323, v2324, v2325);
      }
    }
  }
  JSC::putByValWithSymbolTransitionReallocatingOutOfLineHandler(a2, &v2614);
  v977 = v2615;
  *((_QWORD *)this + 139) = v2614;
  v2615 = 0;
  v978 = (unsigned int *)*((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = v977;
  if (v978)
  {
    do
    {
      v979 = __ldaxr(v978);
      v980 = v979 - 1;
    }
    while (__stlxr(v980, v978));
    if (!v980)
    {
      atomic_store(1u, v978);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v978, v970, v971, v972, v973, v974, v975, v976);
      WTF::fastFree(v2326, v2327, v2328, v2329, v2330, v2331, v2332, v2333);
    }
    v981 = (unsigned int *)v2615;
    v2615 = 0;
    if (v981)
    {
      do
      {
        v982 = __ldaxr(v981);
        v983 = v982 - 1;
      }
      while (__stlxr(v983, v981));
      if (!v983)
      {
        atomic_store(1u, v981);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v981, v970, v971, v972, v973, v974, v975, v976);
        WTF::fastFree(v2334, v2335, v2336, v2337, v2338, v2339, v2340, v2341);
      }
    }
  }
  JSC::putByValWithSymbolCustomAccessorHandler(a2, &v2614);
  v991 = v2615;
  *((_QWORD *)this + 141) = v2614;
  v2615 = 0;
  v992 = (unsigned int *)*((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = v991;
  if (v992)
  {
    do
    {
      v993 = __ldaxr(v992);
      v994 = v993 - 1;
    }
    while (__stlxr(v994, v992));
    if (!v994)
    {
      atomic_store(1u, v992);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v992, v984, v985, v986, v987, v988, v989, v990);
      WTF::fastFree(v2342, v2343, v2344, v2345, v2346, v2347, v2348, v2349);
    }
    v995 = (unsigned int *)v2615;
    v2615 = 0;
    if (v995)
    {
      do
      {
        v996 = __ldaxr(v995);
        v997 = v996 - 1;
      }
      while (__stlxr(v997, v995));
      if (!v997)
      {
        atomic_store(1u, v995);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v995, v984, v985, v986, v987, v988, v989, v990);
        WTF::fastFree(v2350, v2351, v2352, v2353, v2354, v2355, v2356, v2357);
      }
    }
  }
  JSC::putByValWithSymbolCustomValueHandler(a2, &v2614);
  v1005 = v2615;
  *((_QWORD *)this + 143) = v2614;
  v2615 = 0;
  v1006 = (unsigned int *)*((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = v1005;
  if (v1006)
  {
    do
    {
      v1007 = __ldaxr(v1006);
      v1008 = v1007 - 1;
    }
    while (__stlxr(v1008, v1006));
    if (!v1008)
    {
      atomic_store(1u, v1006);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1006, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v2358, v2359, v2360, v2361, v2362, v2363, v2364, v2365);
    }
    v1009 = (unsigned int *)v2615;
    v2615 = 0;
    if (v1009)
    {
      do
      {
        v1010 = __ldaxr(v1009);
        v1011 = v1010 - 1;
      }
      while (__stlxr(v1011, v1009));
      if (!v1011)
      {
        atomic_store(1u, v1009);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1009, v998, v999, v1000, v1001, v1002, v1003, v1004);
        WTF::fastFree(v2366, v2367, v2368, v2369, v2370, v2371, v2372, v2373);
      }
    }
  }
  JSC::putByValWithSymbolStrictSetterHandler(&v2614);
  v1019 = v2615;
  *((_QWORD *)this + 145) = v2614;
  v2615 = 0;
  v1020 = (unsigned int *)*((_QWORD *)this + 146);
  *((_QWORD *)this + 146) = v1019;
  if (v1020)
  {
    do
    {
      v1021 = __ldaxr(v1020);
      v1022 = v1021 - 1;
    }
    while (__stlxr(v1022, v1020));
    if (!v1022)
    {
      atomic_store(1u, v1020);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1020, v1012, v1013, v1014, v1015, v1016, v1017, v1018);
      WTF::fastFree(v2374, v2375, v2376, v2377, v2378, v2379, v2380, v2381);
    }
    v1023 = (unsigned int *)v2615;
    v2615 = 0;
    if (v1023)
    {
      do
      {
        v1024 = __ldaxr(v1023);
        v1025 = v1024 - 1;
      }
      while (__stlxr(v1025, v1023));
      if (!v1025)
      {
        atomic_store(1u, v1023);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1023, v1012, v1013, v1014, v1015, v1016, v1017, v1018);
        WTF::fastFree(v2382, v2383, v2384, v2385, v2386, v2387, v2388, v2389);
      }
    }
  }
  JSC::putByValWithSymbolSloppySetterHandler(&v2614);
  v1033 = v2615;
  *((_QWORD *)this + 147) = v2614;
  v2615 = 0;
  v1034 = (unsigned int *)*((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = v1033;
  if (v1034)
  {
    do
    {
      v1035 = __ldaxr(v1034);
      v1036 = v1035 - 1;
    }
    while (__stlxr(v1036, v1034));
    if (!v1036)
    {
      atomic_store(1u, v1034);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1034, v1026, v1027, v1028, v1029, v1030, v1031, v1032);
      WTF::fastFree(v2390, v2391, v2392, v2393, v2394, v2395, v2396, v2397);
    }
    v1037 = (unsigned int *)v2615;
    v2615 = 0;
    if (v1037)
    {
      do
      {
        v1038 = __ldaxr(v1037);
        v1039 = v1038 - 1;
      }
      while (__stlxr(v1039, v1037));
      if (!v1039)
      {
        atomic_store(1u, v1037);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1037, v1026, v1027, v1028, v1029, v1030, v1031, v1032);
        WTF::fastFree(v2398, v2399, v2400, v2401, v2402, v2403, v2404, v2405);
      }
    }
  }
  JSC::inByValWithStringHitHandler(&v2614);
  v1047 = v2615;
  *((_QWORD *)this + 149) = v2614;
  v2615 = 0;
  v1048 = (unsigned int *)*((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = v1047;
  if (v1048)
  {
    do
    {
      v1049 = __ldaxr(v1048);
      v1050 = v1049 - 1;
    }
    while (__stlxr(v1050, v1048));
    if (!v1050)
    {
      atomic_store(1u, v1048);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1048, v1040, v1041, v1042, v1043, v1044, v1045, v1046);
      WTF::fastFree(v2406, v2407, v2408, v2409, v2410, v2411, v2412, v2413);
    }
    v1051 = (unsigned int *)v2615;
    v2615 = 0;
    if (v1051)
    {
      do
      {
        v1052 = __ldaxr(v1051);
        v1053 = v1052 - 1;
      }
      while (__stlxr(v1053, v1051));
      if (!v1053)
      {
        atomic_store(1u, v1051);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1051, v1040, v1041, v1042, v1043, v1044, v1045, v1046);
        WTF::fastFree(v2414, v2415, v2416, v2417, v2418, v2419, v2420, v2421);
      }
    }
  }
  JSC::inByValWithStringMissHandler(&v2614);
  v1061 = v2615;
  *((_QWORD *)this + 151) = v2614;
  v2615 = 0;
  v1062 = (unsigned int *)*((_QWORD *)this + 152);
  *((_QWORD *)this + 152) = v1061;
  if (v1062)
  {
    do
    {
      v1063 = __ldaxr(v1062);
      v1064 = v1063 - 1;
    }
    while (__stlxr(v1064, v1062));
    if (!v1064)
    {
      atomic_store(1u, v1062);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1062, v1054, v1055, v1056, v1057, v1058, v1059, v1060);
      WTF::fastFree(v2422, v2423, v2424, v2425, v2426, v2427, v2428, v2429);
    }
    v1065 = (unsigned int *)v2615;
    v2615 = 0;
    if (v1065)
    {
      do
      {
        v1066 = __ldaxr(v1065);
        v1067 = v1066 - 1;
      }
      while (__stlxr(v1067, v1065));
      if (!v1067)
      {
        atomic_store(1u, v1065);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1065, v1054, v1055, v1056, v1057, v1058, v1059, v1060);
        WTF::fastFree(v2430, v2431, v2432, v2433, v2434, v2435, v2436, v2437);
      }
    }
  }
  JSC::inByValWithSymbolHitHandler(&v2614);
  v1075 = v2615;
  *((_QWORD *)this + 153) = v2614;
  v2615 = 0;
  v1076 = (unsigned int *)*((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = v1075;
  if (v1076)
  {
    do
    {
      v1077 = __ldaxr(v1076);
      v1078 = v1077 - 1;
    }
    while (__stlxr(v1078, v1076));
    if (!v1078)
    {
      atomic_store(1u, v1076);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1076, v1068, v1069, v1070, v1071, v1072, v1073, v1074);
      WTF::fastFree(v2438, v2439, v2440, v2441, v2442, v2443, v2444, v2445);
    }
    v1079 = (unsigned int *)v2615;
    v2615 = 0;
    if (v1079)
    {
      do
      {
        v1080 = __ldaxr(v1079);
        v1081 = v1080 - 1;
      }
      while (__stlxr(v1081, v1079));
      if (!v1081)
      {
        atomic_store(1u, v1079);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1079, v1068, v1069, v1070, v1071, v1072, v1073, v1074);
        WTF::fastFree(v2446, v2447, v2448, v2449, v2450, v2451, v2452, v2453);
      }
    }
  }
  JSC::inByValWithSymbolMissHandler(&v2614);
  v1089 = v2615;
  *((_QWORD *)this + 155) = v2614;
  v2615 = 0;
  v1090 = (unsigned int *)*((_QWORD *)this + 156);
  *((_QWORD *)this + 156) = v1089;
  if (v1090)
  {
    do
    {
      v1091 = __ldaxr(v1090);
      v1092 = v1091 - 1;
    }
    while (__stlxr(v1092, v1090));
    if (!v1092)
    {
      atomic_store(1u, v1090);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1090, v1082, v1083, v1084, v1085, v1086, v1087, v1088);
      WTF::fastFree(v2454, v2455, v2456, v2457, v2458, v2459, v2460, v2461);
    }
    v1093 = (unsigned int *)v2615;
    v2615 = 0;
    if (v1093)
    {
      do
      {
        v1094 = __ldaxr(v1093);
        v1095 = v1094 - 1;
      }
      while (__stlxr(v1095, v1093));
      if (!v1095)
      {
        atomic_store(1u, v1093);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1093, v1082, v1083, v1084, v1085, v1086, v1087, v1088);
        WTF::fastFree(v2462, v2463, v2464, v2465, v2466, v2467, v2468, v2469);
      }
    }
  }
  JSC::deleteByValWithStringDeleteHandler(&v2614);
  v1103 = v2615;
  *((_QWORD *)this + 157) = v2614;
  v2615 = 0;
  v1104 = (unsigned int *)*((_QWORD *)this + 158);
  *((_QWORD *)this + 158) = v1103;
  if (v1104)
  {
    do
    {
      v1105 = __ldaxr(v1104);
      v1106 = v1105 - 1;
    }
    while (__stlxr(v1106, v1104));
    if (!v1106)
    {
      atomic_store(1u, v1104);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1104, v1096, v1097, v1098, v1099, v1100, v1101, v1102);
      WTF::fastFree(v2470, v2471, v2472, v2473, v2474, v2475, v2476, v2477);
    }
    v1107 = (unsigned int *)v2615;
    v2615 = 0;
    if (v1107)
    {
      do
      {
        v1108 = __ldaxr(v1107);
        v1109 = v1108 - 1;
      }
      while (__stlxr(v1109, v1107));
      if (!v1109)
      {
        atomic_store(1u, v1107);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1107, v1096, v1097, v1098, v1099, v1100, v1101, v1102);
        WTF::fastFree(v2478, v2479, v2480, v2481, v2482, v2483, v2484, v2485);
      }
    }
  }
  JSC::deleteByValWithStringDeleteNonConfigurableHandler(&v2614);
  v1117 = v2615;
  *((_QWORD *)this + 159) = v2614;
  v2615 = 0;
  v1118 = (unsigned int *)*((_QWORD *)this + 160);
  *((_QWORD *)this + 160) = v1117;
  if (v1118)
  {
    do
    {
      v1119 = __ldaxr(v1118);
      v1120 = v1119 - 1;
    }
    while (__stlxr(v1120, v1118));
    if (!v1120)
    {
      atomic_store(1u, v1118);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1118, v1110, v1111, v1112, v1113, v1114, v1115, v1116);
      WTF::fastFree(v2486, v2487, v2488, v2489, v2490, v2491, v2492, v2493);
    }
    v1121 = (unsigned int *)v2615;
    v2615 = 0;
    if (v1121)
    {
      do
      {
        v1122 = __ldaxr(v1121);
        v1123 = v1122 - 1;
      }
      while (__stlxr(v1123, v1121));
      if (!v1123)
      {
        atomic_store(1u, v1121);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1121, v1110, v1111, v1112, v1113, v1114, v1115, v1116);
        WTF::fastFree(v2494, v2495, v2496, v2497, v2498, v2499, v2500, v2501);
      }
    }
  }
  JSC::deleteByValWithStringDeleteMissHandler(&v2614);
  v1131 = v2615;
  *((_QWORD *)this + 161) = v2614;
  v2615 = 0;
  v1132 = (unsigned int *)*((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = v1131;
  if (v1132)
  {
    do
    {
      v1133 = __ldaxr(v1132);
      v1134 = v1133 - 1;
    }
    while (__stlxr(v1134, v1132));
    if (!v1134)
    {
      atomic_store(1u, v1132);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1132, v1124, v1125, v1126, v1127, v1128, v1129, v1130);
      WTF::fastFree(v2502, v2503, v2504, v2505, v2506, v2507, v2508, v2509);
    }
    v1135 = (unsigned int *)v2615;
    v2615 = 0;
    if (v1135)
    {
      do
      {
        v1136 = __ldaxr(v1135);
        v1137 = v1136 - 1;
      }
      while (__stlxr(v1137, v1135));
      if (!v1137)
      {
        atomic_store(1u, v1135);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1135, v1124, v1125, v1126, v1127, v1128, v1129, v1130);
        WTF::fastFree(v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517);
      }
    }
  }
  JSC::deleteByValWithSymbolDeleteHandler(&v2614);
  v1145 = v2615;
  *((_QWORD *)this + 163) = v2614;
  v2615 = 0;
  v1146 = (unsigned int *)*((_QWORD *)this + 164);
  *((_QWORD *)this + 164) = v1145;
  if (v1146)
  {
    do
    {
      v1147 = __ldaxr(v1146);
      v1148 = v1147 - 1;
    }
    while (__stlxr(v1148, v1146));
    if (!v1148)
    {
      atomic_store(1u, v1146);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1146, v1138, v1139, v1140, v1141, v1142, v1143, v1144);
      WTF::fastFree(v2518, v2519, v2520, v2521, v2522, v2523, v2524, v2525);
    }
    v1149 = (unsigned int *)v2615;
    v2615 = 0;
    if (v1149)
    {
      do
      {
        v1150 = __ldaxr(v1149);
        v1151 = v1150 - 1;
      }
      while (__stlxr(v1151, v1149));
      if (!v1151)
      {
        atomic_store(1u, v1149);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1149, v1138, v1139, v1140, v1141, v1142, v1143, v1144);
        WTF::fastFree(v2526, v2527, v2528, v2529, v2530, v2531, v2532, v2533);
      }
    }
  }
  JSC::deleteByValWithSymbolDeleteNonConfigurableHandler(&v2614);
  v1159 = v2615;
  *((_QWORD *)this + 165) = v2614;
  v2615 = 0;
  v1160 = (unsigned int *)*((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = v1159;
  if (v1160)
  {
    do
    {
      v1161 = __ldaxr(v1160);
      v1162 = v1161 - 1;
    }
    while (__stlxr(v1162, v1160));
    if (!v1162)
    {
      atomic_store(1u, v1160);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1160, v1152, v1153, v1154, v1155, v1156, v1157, v1158);
      WTF::fastFree(v2534, v2535, v2536, v2537, v2538, v2539, v2540, v2541);
    }
    v1163 = (unsigned int *)v2615;
    v2615 = 0;
    if (v1163)
    {
      do
      {
        v1164 = __ldaxr(v1163);
        v1165 = v1164 - 1;
      }
      while (__stlxr(v1165, v1163));
      if (!v1165)
      {
        atomic_store(1u, v1163);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1163, v1152, v1153, v1154, v1155, v1156, v1157, v1158);
        WTF::fastFree(v2542, v2543, v2544, v2545, v2546, v2547, v2548, v2549);
      }
    }
  }
  JSC::deleteByValWithSymbolDeleteMissHandler(&v2614);
  v1173 = v2615;
  *((_QWORD *)this + 167) = v2614;
  v2615 = 0;
  v1174 = (unsigned int *)*((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = v1173;
  if (v1174)
  {
    do
    {
      v1175 = __ldaxr(v1174);
      v1176 = v1175 - 1;
    }
    while (__stlxr(v1176, v1174));
    if (!v1176)
    {
      atomic_store(1u, v1174);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1174, v1166, v1167, v1168, v1169, v1170, v1171, v1172);
      WTF::fastFree(v2550, v2551, v2552, v2553, v2554, v2555, v2556, v2557);
    }
    v1177 = (unsigned int *)v2615;
    v2615 = 0;
    if (v1177)
    {
      do
      {
        v1178 = __ldaxr(v1177);
        v1179 = v1178 - 1;
      }
      while (__stlxr(v1179, v1177));
      if (!v1179)
      {
        atomic_store(1u, v1177);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1177, v1166, v1167, v1168, v1169, v1170, v1171, v1172);
        WTF::fastFree(v2558, v2559, v2560, v2561, v2562, v2563, v2564, v2565);
      }
    }
  }
  JSC::checkPrivateBrandHandler(&v2614);
  v1187 = v2615;
  *((_QWORD *)this + 169) = v2614;
  v2615 = 0;
  v1188 = (unsigned int *)*((_QWORD *)this + 170);
  *((_QWORD *)this + 170) = v1187;
  if (v1188)
  {
    do
    {
      v1189 = __ldaxr(v1188);
      v1190 = v1189 - 1;
    }
    while (__stlxr(v1190, v1188));
    if (!v1190)
    {
      atomic_store(1u, v1188);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1188, v1180, v1181, v1182, v1183, v1184, v1185, v1186);
      WTF::fastFree(v2566, v2567, v2568, v2569, v2570, v2571, v2572, v2573);
    }
    v1191 = (unsigned int *)v2615;
    v2615 = 0;
    if (v1191)
    {
      do
      {
        v1192 = __ldaxr(v1191);
        v1193 = v1192 - 1;
      }
      while (__stlxr(v1193, v1191));
      if (!v1193)
      {
        atomic_store(1u, v1191);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1191, v1180, v1181, v1182, v1183, v1184, v1185, v1186);
        WTF::fastFree(v2574, v2575, v2576, v2577, v2578, v2579, v2580, v2581);
      }
    }
  }
  JSC::setPrivateBrandHandler(&v2614);
  v1201 = v2615;
  *((_QWORD *)this + 171) = v2614;
  v2615 = 0;
  v1202 = (unsigned int *)*((_QWORD *)this + 172);
  *((_QWORD *)this + 172) = v1201;
  if (v1202)
  {
    do
    {
      v1203 = __ldaxr(v1202);
      v1204 = v1203 - 1;
    }
    while (__stlxr(v1204, v1202));
    if (!v1204)
    {
      atomic_store(1u, v1202);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1202, v1194, v1195, v1196, v1197, v1198, v1199, v1200);
      WTF::fastFree(v2582, v2583, v2584, v2585, v2586, v2587, v2588, v2589);
    }
    v1205 = (unsigned int *)v2615;
    v2615 = 0;
    if (v1205)
    {
      do
      {
        v1206 = __ldaxr(v1205);
        v1207 = v1206 - 1;
      }
      while (__stlxr(v1207, v1205));
      if (!v1207)
      {
        atomic_store(1u, v1205);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1205, v1194, v1195, v1196, v1197, v1198, v1199, v1200);
        WTF::fastFree(v2590, v2591, v2592, v2593, v2594, v2595, v2596, v2597);
      }
    }
  }
  JSC::Yarr::areCanonicallyEquivalentThunkGenerator(&v2614);
  v1215 = v2615;
  *((_QWORD *)this + 173) = v2614;
  v2615 = 0;
  v1216 = (unsigned int *)*((_QWORD *)this + 174);
  *((_QWORD *)this + 174) = v1215;
  if (v1216)
  {
    do
    {
      v1217 = __ldaxr(v1216);
      v1218 = v1217 - 1;
    }
    while (__stlxr(v1218, v1216));
    if (!v1218)
    {
      atomic_store(1u, v1216);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1216, v1208, v1209, v1210, v1211, v1212, v1213, v1214);
      WTF::fastFree(v2598, v2599, v2600, v2601, v2602, v2603, v2604, v2605);
    }
    v1219 = (unsigned int *)v2615;
    v2615 = 0;
    if (v1219)
    {
      do
      {
        v1220 = __ldaxr(v1219);
        v1221 = v1220 - 1;
      }
      while (__stlxr(v1221, v1219));
      if (!v1221)
      {
        atomic_store(1u, v1219);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1219, v1208, v1209, v1210, v1211, v1212, v1213, v1214);
        WTF::fastFree(v2606, v2607, v2608, v2609, v2610, v2611, v2612, v2613);
      }
    }
  }
}

void JSC::JITThunks::ctiStub(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  unint64_t StatusReg;
  uint64_t v14;
  unsigned __int8 *v15;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t *__return_ptr, uint64_t);
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  int v59;
  unsigned __int8 *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned __int8 v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  JSC::ExecutableMemoryHandle *v76;
  void (*v77)(uint64_t *__return_ptr, uint64_t);

  v77 = a3;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v14 = *(_QWORD *)(StatusReg + 736);
  if (!v14)
    v14 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)a1);
  if (v14 == *(_QWORD *)(a1 + 1416))
  {
    v17 = *(_DWORD *)(a1 + 1424) + 1;
    goto LABEL_9;
  }
  v15 = (unsigned __int8 *)(a1 + 1428);
  if (__ldaxr((unsigned __int8 *)(a1 + 1428)))
  {
    __clrex();
LABEL_7:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v15);
    goto LABEL_8;
  }
  if (__stxr(1u, v15))
    goto LABEL_7;
LABEL_8:
  *(_QWORD *)(a1 + 1416) = v14;
  v17 = 1;
LABEL_9:
  *(_DWORD *)(a1 + 1424) = v17;
  v18 = *(_QWORD *)(a1 + 1400);
  if (!v18)
    goto LABEL_17;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)v77 + ~((_QWORD)v77 << 32)) ^ (((unint64_t)v77 + ~((_QWORD)v77 << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(void (**)(uint64_t *__return_ptr, uint64_t))(v18 + 16 * v23);
  if (v24 != v77)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(void (**)(uint64_t *__return_ptr, uint64_t))(v18 + 16 * v23);
      ++v25;
      if (v24 == v77)
        goto LABEL_16;
    }
    v23 = *(unsigned int *)(v18 - 4);
  }
LABEL_16:
  if (v23 != *(_DWORD *)(v18 - 4))
  {
    v53 = v18 + 16 * v23;
    v55 = *(unsigned __int8 *)(v53 + 13);
    v54 = (_BYTE *)(v53 + 13);
    if (v55)
    {
      v56 = *(_QWORD *)(StatusReg + 736);
      if (!v56)
        v56 = WTF::Thread::initializeCurrentTLS(0);
      if ((*(_BYTE *)(v56 + 5) & 8) == 0)
      {
        __isb(0xFu);
        *v54 = 0;
      }
    }
    v57 = *(unsigned int *)(v54 - 5) | ((unint64_t)*(v54 - 1) << 32);
    do
      v58 = __ldaxr((unsigned int *)v57);
    while (__stlxr(v58 + 1, (unsigned int *)v57));
    *a9 = *(_QWORD *)(v57 + 8);
    a9[1] = v57;
  }
  else
  {
LABEL_17:
    a3(&v75, a2);
    v30 = *(_QWORD *)(StatusReg + 736);
    if (!v30)
      v30 = WTF::Thread::initializeCurrentTLS(0);
    v31 = (*(unsigned __int8 *)(v30 + 5) >> 3) & 1;
    v32 = (unsigned int *)v76;
    if (v76)
    {
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
    }
    v70 = v32;
    v71 = BYTE4(v32);
    v72 = v31;
    WTF::HashMap<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &),JSC::JITThunks::Entry,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &)>,WTF::HashTraits<JSC::JITThunks::Entry>,WTF::HashTableTraits>::add<JSC::JITThunks::Entry>((uint64_t)&v73, (uint64_t *)(a1 + 1400), (uint64_t *)&v77, (uint64_t)&v70, v26, v27, v28, v29);
    v35 = (unsigned int *)(v70 | ((unint64_t)v71 << 32));
    v70 = 0;
    v71 = 0;
    if (v35)
    {
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        atomic_store(1u, v35);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v35, v34, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      }
    }
    if (!v74)
    {
      __break(0xC471u);
      return;
    }
    v38 = v73;
    if (*(_BYTE *)(v73 + 13))
    {
      v39 = *(_QWORD *)(StatusReg + 736);
      if (!v39)
        v39 = WTF::Thread::initializeCurrentTLS(0);
      if ((*(_BYTE *)(v39 + 5) & 8) == 0)
      {
        __isb(0xFu);
        *(_BYTE *)(v38 + 13) = 0;
      }
    }
    v40 = *(unsigned int *)(v38 + 8) | ((unint64_t)*(unsigned __int8 *)(v38 + 12) << 32);
    do
      v41 = __ldaxr((unsigned int *)v40);
    while (__stlxr(v41 + 1, (unsigned int *)v40));
    *a9 = *(_QWORD *)(v40 + 8);
    a9[1] = v40;
    v42 = (unsigned int *)v76;
    v76 = 0;
    if (v42)
    {
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        atomic_store(1u, v42);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v42, v34, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
      }
    }
  }
  v59 = *(_DWORD *)(a1 + 1424) - 1;
  *(_DWORD *)(a1 + 1424) = v59;
  if (!v59)
  {
    *(_QWORD *)(a1 + 1416) = 0;
    v60 = (unsigned __int8 *)(a1 + 1428);
    v61 = __ldxr((unsigned __int8 *)(a1 + 1428));
    if (v61 == 1)
    {
      if (!__stlxr(0, v60))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v60, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::JITThunks::ctiNativeTailCall(JSC::JITThunks *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = *((_QWORD *)this + 11);
  v8 = (unsigned int *)*((_QWORD *)this + 12);
  if (v8)
  {
    do
      v10 = __ldaxr(v8);
    while (__stlxr(v10 + 1, v8));
    do
    {
      v11 = __ldaxr(v8);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v8));
    if (!v12)
    {
      atomic_store(1u, v8);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v8, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  return v9;
}

void JSC::JITThunks::ctiSlowPathFunctionStub(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  unint64_t StatusReg;
  uint64_t v14;
  unsigned __int8 *v15;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned __int8 *v46;
  int v47;
  uint64_t v48;
  _BYTE *v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned __int8 v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  JSC::ExecutableMemoryHandle *v76;
  uint64_t v77;

  v77 = a3;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v14 = *(_QWORD *)(StatusReg + 736);
  if (!v14)
    v14 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)a1);
  if (v14 == *(_QWORD *)(a1 + 1416))
  {
    v17 = *(_DWORD *)(a1 + 1424) + 1;
    goto LABEL_8;
  }
  v15 = (unsigned __int8 *)(a1 + 1428);
  if (__ldaxr((unsigned __int8 *)(a1 + 1428)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v15))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v15);
LABEL_7:
  *(_QWORD *)(a1 + 1416) = v14;
  v17 = 1;
LABEL_8:
  *(_DWORD *)(a1 + 1424) = v17;
  v18 = *(_QWORD *)(a1 + 1400);
  if (!v18)
    goto LABEL_18;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = (~(v77 << 32) + v77) ^ ((unint64_t)(~(v77 << 32) + v77) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(_QWORD *)(v18 + 16 * v23);
  if (v24 != v77)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(_QWORD *)(v18 + 16 * v23);
      ++v25;
      if (v24 == v77)
        goto LABEL_17;
    }
    v23 = *(unsigned int *)(v18 - 4);
  }
LABEL_17:
  if (v23 != *(_DWORD *)(v18 - 4))
  {
    v48 = v18 + 16 * v23;
    v50 = *(unsigned __int8 *)(v48 + 13);
    v49 = (_BYTE *)(v48 + 13);
    if (v50)
    {
      v51 = *(_QWORD *)(StatusReg + 736);
      if (!v51)
        v51 = WTF::Thread::initializeCurrentTLS(0);
      if ((*(_BYTE *)(v51 + 5) & 8) == 0)
      {
        __isb(0xFu);
        *v49 = 0;
      }
    }
    v52 = *(unsigned int *)(v49 - 5) | ((unint64_t)*(v49 - 1) << 32);
    do
      v53 = __ldaxr((unsigned int *)v52);
    while (__stlxr(v53 + 1, (unsigned int *)v52));
    *a9 = *(_QWORD *)(v52 + 8);
    a9[1] = v52;
  }
  else
  {
LABEL_18:
    JSC::JITSlowPathCall::generateThunk(a2, a3, &v75);
    v30 = *(_QWORD *)(StatusReg + 736);
    if (!v30)
      v30 = WTF::Thread::initializeCurrentTLS(0);
    v31 = (*(unsigned __int8 *)(v30 + 5) >> 3) & 1;
    v32 = (unsigned int *)v76;
    if (v76)
    {
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
    }
    v70 = v32;
    v71 = BYTE4(v32);
    v72 = v31;
    WTF::HashMap<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &),JSC::JITThunks::Entry,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &)>,WTF::HashTraits<JSC::JITThunks::Entry>,WTF::HashTableTraits>::add<JSC::JITThunks::Entry>((uint64_t)&v73, (uint64_t *)(a1 + 1400), &v77, (uint64_t)&v70, v26, v27, v28, v29);
    v35 = (unsigned int *)(v70 | ((unint64_t)v71 << 32));
    v70 = 0;
    v71 = 0;
    if (v35)
    {
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        atomic_store(1u, v35);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v35, v34, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      }
    }
    if (!v74)
    {
      __break(0xC471u);
      JUMPOUT(0x1987F790CLL);
    }
    v38 = v73;
    if (*(_BYTE *)(v73 + 13))
    {
      v39 = *(_QWORD *)(StatusReg + 736);
      if (!v39)
        v39 = WTF::Thread::initializeCurrentTLS(0);
      if ((*(_BYTE *)(v39 + 5) & 8) == 0)
      {
        __isb(0xFu);
        *(_BYTE *)(v38 + 13) = 0;
      }
    }
    v40 = *(unsigned int *)(v38 + 8) | ((unint64_t)*(unsigned __int8 *)(v38 + 12) << 32);
    do
      v41 = __ldaxr((unsigned int *)v40);
    while (__stlxr(v41 + 1, (unsigned int *)v40));
    *a9 = *(_QWORD *)(v40 + 8);
    a9[1] = v40;
    v42 = (unsigned int *)v76;
    v76 = 0;
    if (v42)
    {
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        atomic_store(1u, v42);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v42, v34, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      }
    }
  }
  v45 = *(_DWORD *)(a1 + 1424) - 1;
  *(_DWORD *)(a1 + 1424) = v45;
  if (!v45)
  {
    *(_QWORD *)(a1 + 1416) = 0;
    v46 = (unsigned __int8 *)(a1 + 1428);
    v47 = __ldxr((unsigned __int8 *)(a1 + 1428));
    if (v47 == 1)
    {
      if (!__stlxr(0, v46))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v46, 0, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::JITThunks::finalize(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  char v33;
  WTF::StringImpl *v34;

  v3 = *a2;
  v4 = *(_BYTE *)(*a2 + 56) & 3;
  v32 = *(_OWORD *)(*a2 + 40);
  v33 = v4;
  v5 = *(WTF::StringImpl **)(v3 + 64);
  if (v5)
    *(_DWORD *)v5 += 2;
  v34 = v5;
  v6 = (uint64_t *)(a1 + 1408);
  v7 = WTF::HashTable<JSC::Weak<JSC::NativeExecutable>,JSC::Weak<JSC::NativeExecutable>,WTF::IdentityExtractor,JSC::JITThunks::WeakNativeExecutableHash,WTF::HashTraits<JSC::Weak<JSC::NativeExecutable>>,WTF::HashTraits<JSC::Weak<JSC::NativeExecutable>>>::find<WTF::HashSetTranslatorAdapter<JSC::JITThunks::HostKeySearcher>,std::tuple<WTF::FunctionPtr<(WTF::PtrTag)12563,long long ()(JSC::JSGlobalObject *,JSC::CallFrame *),(WTF::FunctionAttributes)2>,WTF::FunctionPtr<(WTF::PtrTag)12563,long long ()(JSC::JSGlobalObject *,JSC::CallFrame *),(WTF::FunctionAttributes)2>,JSC::ImplementationVisibility,WTF::String>>((uint64_t *)(a1 + 1408), (uint64_t)&v32);
  v15 = *(_QWORD *)(a1 + 1408);
  if (v15)
  {
    v16 = v15 + 8 * *(unsigned int *)(v15 - 4);
    if (v16 == v7)
      goto LABEL_16;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v16 = 0;
  }
  if (v16 != v7)
  {
    if (*(_QWORD *)v7)
      *(_QWORD *)(*(_QWORD *)v7 + 8) = 3;
    *(_QWORD *)v7 = -1;
    ++*(_DWORD *)(*v6 - 16);
    v17 = *v6;
    if (*v6)
      v18 = *(_DWORD *)(v17 - 12) - 1;
    else
      v18 = -1;
    *(_DWORD *)(v17 - 12) = v18;
    v19 = *v6;
    if (*v6)
    {
      v20 = 6 * *(_DWORD *)(v19 - 12);
      v21 = *(_DWORD *)(v19 - 4);
      if (v20 < v21 && v21 >= 9)
        WTF::HashTable<JSC::Weak<JSC::NativeExecutable>,JSC::Weak<JSC::NativeExecutable>,WTF::IdentityExtractor,JSC::JITThunks::WeakNativeExecutableHash,WTF::HashTraits<JSC::Weak<JSC::NativeExecutable>>,WTF::HashTraits<JSC::Weak<JSC::NativeExecutable>>>::rehash((uint64_t *)(a1 + 1408), v21 >> 1, 0, v10, v11, v12, v13, v14);
    }
  }
LABEL_16:
  v23 = v34;
  v34 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v8, v9, v10, v11, v12, v13, v14);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
}

void WTF::ScopedLambdaFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump ()(void),JSC::JIT::emit_op_put_to_scope(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::$_0::operator() const(JSC::ResolveType)::{lambda(void)#1}>::implFunction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  _DWORD *v10;
  unsigned int v11;

  v10 = *(_DWORD **)(a1 + 16);
  v11 = v10[50];
  if (v11 + 4 > v10[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = v10[50];
  }
  *(_DWORD *)(*((_QWORD *)v10 + 7) + v11) = -129989820;
  v10[50] += 4;
  JSC::MacroAssemblerARM64::branch64((uint64_t)v10, 0, 2, 4, a5, a6, a7, a8, a9);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,JSC::JITSizeStatistics::dump(WTF::PrintStream &)::$_0 &,std::pair<WTF::String,JSC::JITSizeStatistics::Entry> *,false>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 result)
{
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  __n128 *v19;
  uint64_t v20;
  __n128 *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __n128 v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 *v39;
  __int128 v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __int128 *v56;
  __int128 v57;
  _OWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  __int128 *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  WTF::AtomStringImpl *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  WTF::StringImpl **v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  WTF::StringImpl **v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  WTF::AtomStringImpl *v163;
  BOOL v165;
  uint64_t v166;
  _QWORD *v167;
  WTF::AtomStringImpl *v168;
  unint64_t v169;
  WTF::StringImpl *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t i;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int64_t v194;
  int64_t v195;
  int64_t v196;
  uint64_t v197;
  WTF::StringImpl **v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  WTF::StringImpl *v203;
  WTF::StringImpl **v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  WTF::StringImpl *v218;
  unint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int64_t v227;
  uint64_t v228;
  WTF::AtomStringImpl *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  unint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  __n128 *v247;
  uint64_t v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  uint64_t v251;
  unint64_t v252;
  WTF::StringImpl **v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  WTF::StringImpl **v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  unint64_t v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  WTF::StringImpl *v267;
  WTF::StringImpl *v268;
  unint64_t v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  void *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _QWORD *v306;
  unint64_t v307;
  WTF::StringImpl *v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  _QWORD *v313;
  unint64_t v314;
  unint64_t v315;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  void *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  __int128 *v332;
  __int128 *v333;
  __n128 *v334;
  WTF::StringImpl *v335;
  char v336;
  WTF::StringImpl *v337;
  WTF::StringImpl *v338;
  uint64_t v339;
  __n128 v340;
  __n128 v341;
  __n128 v342;
  __n128 v343;
  __n128 v344;
  __n128 v345;
  __int128 v346;
  __n128 v347;
  __n128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __n128 v356;
  __int128 v357;
  __n128 v358;
  __n128 v359;
  __n128 v360;
  __n128 v361;
  __n128 v362;
  __n128 v363;

  v336 = a4;
  v9 = a3;
  v10 = a2;
LABEL_2:
  v333 = (__int128 *)((char *)v10 - 40);
  v334 = (__n128 *)((char *)v10 - 16);
  v332 = (__int128 *)((char *)v10 - 64);
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)v10 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*((_QWORD *)v10 - 1) > *(_QWORD *)(a1 + 16))
        {
          v152 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *((_QWORD *)v10 - 3);
          *((_QWORD *)v10 - 3) = v152;
          v359 = *(__n128 *)(a1 + 8);
          *(_OWORD *)(a1 + 8) = *((_OWORD *)v10 - 1);
          goto LABEL_129;
        }
        return result;
      case 3:
        v153 = *(_QWORD *)(a1 + 40);
        v154 = *((_QWORD *)v10 - 1);
        if (v153 > *(_QWORD *)(a1 + 16))
        {
          v15 = a1 + 8;
          v86 = *(_QWORD *)a1;
          if (v154 <= v153)
            goto LABEL_252;
          *(_QWORD *)a1 = *((_QWORD *)v10 - 3);
          *((_QWORD *)v10 - 3) = v86;
          v359 = *(__n128 *)v15;
          *(_OWORD *)v15 = *((_OWORD *)v10 - 1);
LABEL_129:
          result = v359;
          goto LABEL_130;
        }
        if (v154 > v153)
        {
          v302 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *((_QWORD *)v10 - 3);
          *((_QWORD *)v10 - 3) = v302;
          result = *(__n128 *)(a1 + 32);
          *(_OWORD *)(a1 + 32) = *((_OWORD *)v10 - 1);
          *((__n128 *)v10 - 1) = result;
          if (*(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 16))
          {
            v303 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 24) = v303;
            v362 = *(__n128 *)(a1 + 8);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 32);
            result = v362;
            *(__n128 *)(a1 + 32) = v362;
          }
        }
        return result;
      case 4:
        result.n128_u64[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JITSizeStatistics::dump(WTF::PrintStream &)::$_0 &,std::pair<WTF::String,JSC::JITSizeStatistics::Entry> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), (uint64_t *)v10 - 3).n128_u64[0];
        return result;
      case 5:
        result.n128_u64[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JITSizeStatistics::dump(WTF::PrintStream &)::$_0 &,std::pair<WTF::String,JSC::JITSizeStatistics::Entry> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 72)).n128_u64[0];
        if (*((_QWORD *)v10 - 1) > *(_QWORD *)(a1 + 88))
        {
          v155 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 72) = *((_QWORD *)v10 - 3);
          *((_QWORD *)v10 - 3) = v155;
          result = *(__n128 *)(a1 + 80);
          *(_OWORD *)(a1 + 80) = *((_OWORD *)v10 - 1);
          *((__n128 *)v10 - 1) = result;
          if (*(_QWORD *)(a1 + 88) > *(_QWORD *)(a1 + 64))
          {
            result = *(__n128 *)(a1 + 56);
            *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 80);
            v157 = *(_QWORD *)(a1 + 64);
            v156 = *(_QWORD *)(a1 + 72);
            v159 = *(_QWORD *)(a1 + 40);
            v158 = *(_QWORD *)(a1 + 48);
            *(_QWORD *)(a1 + 48) = v156;
            *(_QWORD *)(a1 + 72) = v158;
            *(__n128 *)(a1 + 80) = result;
            if (v157 > v159)
            {
              v161 = *(_QWORD *)(a1 + 16);
              v160 = *(_QWORD *)(a1 + 24);
              *(_QWORD *)(a1 + 24) = v156;
              *(_QWORD *)(a1 + 48) = v160;
              result = *(__n128 *)(a1 + 32);
              *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 56);
              *(__n128 *)(a1 + 56) = result;
              if (*(_QWORD *)(a1 + 40) > v161)
              {
                v162 = *(_QWORD *)a1;
                *(_QWORD *)a1 = v156;
                *(_QWORD *)(a1 + 24) = v162;
                v360 = *(__n128 *)(a1 + 8);
                *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 32);
                result = v360;
                *(__n128 *)(a1 + 32) = v360;
              }
            }
          }
        }
        return result;
      default:
        if (v13 > 575)
        {
          if (!v9)
          {
            if ((WTF::AtomStringImpl *)a1 != v10)
            {
              v194 = (unint64_t)(v14 - 2) >> 1;
              v195 = v194;
              do
              {
                v196 = v195;
                if (v194 >= v195)
                {
                  v197 = (2 * v195) | 1;
                  v198 = (WTF::StringImpl **)(a1 + 24 * v197);
                  if (2 * v196 + 2 < v14)
                  {
                    v199 = (unint64_t)v198[2];
                    v200 = (unint64_t)v198[5];
                    v198 += 3 * (v199 > v200);
                    if (v199 > v200)
                      v197 = 2 * v196 + 2;
                  }
                  v201 = a1 + 24 * v196;
                  v202 = *(_QWORD *)(v201 + 16);
                  if ((unint64_t)v198[2] <= v202)
                  {
                    v203 = *(WTF::StringImpl **)v201;
                    *(_QWORD *)v201 = 0;
                    v335 = v203;
                    v337 = *(WTF::StringImpl **)(a1 + 24 * v196 + 8);
                    do
                    {
                      v204 = v198;
                      v205 = *v198;
                      *v204 = 0;
                      v206 = *(WTF::StringImpl **)v201;
                      *(_QWORD *)v201 = v205;
                      if (v206)
                      {
                        if (*(_DWORD *)v206 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v206, a2, a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
                        }
                        else
                        {
                          *(_DWORD *)v206 -= 2;
                        }
                      }
                      *(_OWORD *)(v201 + 8) = *(_OWORD *)(v204 + 1);
                      if (v194 < v197)
                        break;
                      v207 = (2 * v197) | 1;
                      v198 = (WTF::StringImpl **)(a1 + 24 * v207);
                      if (2 * v197 + 2 < v14)
                      {
                        v208 = (unint64_t)v198[2];
                        v209 = (unint64_t)v198[5];
                        v198 += 3 * (v208 > v209);
                        if (v208 > v209)
                          v207 = 2 * v197 + 2;
                      }
                      v201 = (uint64_t)v204;
                      v197 = v207;
                    }
                    while ((unint64_t)v198[2] <= v202);
                    v218 = *v204;
                    *v204 = v335;
                    if (v218)
                    {
                      if (*(_DWORD *)v218 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v218, a2, a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v219, v220, v221, v222, v223, v224, v225, v226);
                      }
                      else
                      {
                        *(_DWORD *)v218 -= 2;
                      }
                    }
                    v204[1] = v337;
                    v204[2] = (WTF::StringImpl *)v202;
                  }
                }
                v195 = v196 - 1;
              }
              while (v196);
              v227 = v13 / 0x18uLL;
              do
              {
                v228 = 0;
                v229 = v10;
                v230 = *(_QWORD *)a1;
                *(_QWORD *)a1 = 0;
                v361 = *(__n128 *)(a1 + 8);
                v231 = a1;
                do
                {
                  v232 = v231;
                  v231 += 24 * v228 + 24;
                  v233 = 2 * v228;
                  v228 = (2 * v228) | 1;
                  v234 = v233 + 2;
                  if (v233 + 2 < v227)
                  {
                    v235 = *(_QWORD *)(v231 + 16);
                    v236 = *(_QWORD *)(v231 + 40);
                    v231 += 24 * (v235 > v236);
                    if (v235 > v236)
                      v228 = v234;
                  }
                  v237 = *(WTF::StringImpl **)v231;
                  *(_QWORD *)v231 = 0;
                  v238 = *(WTF::StringImpl **)v232;
                  *(_QWORD *)v232 = v237;
                  if (v238)
                  {
                    if (*(_DWORD *)v238 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v238, a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v239, v240, v241, v242, v243, v244, v245, v246);
                    }
                    else
                    {
                      *(_DWORD *)v238 -= 2;
                    }
                  }
                  *(_OWORD *)(v232 + 8) = *(_OWORD *)(v231 + 8);
                }
                while (v228 <= (uint64_t)((unint64_t)(v227 - 2) >> 1));
                v247 = (__n128 *)(v231 + 8);
                v10 = (WTF::AtomStringImpl *)((char *)v10 - 24);
                if ((WTF::AtomStringImpl *)v231 == (WTF::AtomStringImpl *)((char *)v229 - 24))
                {
                  v267 = *(WTF::StringImpl **)v231;
                  *(_QWORD *)v231 = v230;
                  if (v267)
                  {
                    if (*(_DWORD *)v267 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v267, a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v286, v287, v288, v289, v290, v291, v292, v293);
                    }
                    else
                    {
                      *(_DWORD *)v267 -= 2;
                    }
                  }
                  result = v361;
                  *v247 = v361;
                }
                else
                {
                  v248 = *(_QWORD *)v10;
                  *(_QWORD *)v10 = 0;
                  v249 = *(WTF::StringImpl **)v231;
                  *(_QWORD *)v231 = v248;
                  if (v249)
                  {
                    if (*(_DWORD *)v249 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v249, a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v270, v271, v272, v273, v274, v275, v276, v277);
                    }
                    else
                    {
                      *(_DWORD *)v249 -= 2;
                    }
                  }
                  *v247 = *((__n128 *)v229 - 1);
                  v250 = (WTF::StringImpl *)*((_QWORD *)v229 - 3);
                  *((_QWORD *)v229 - 3) = v230;
                  if (v250)
                  {
                    if (*(_DWORD *)v250 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v250, a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v278, v279, v280, v281, v282, v283, v284, v285);
                    }
                    else
                    {
                      *(_DWORD *)v250 -= 2;
                    }
                  }
                  result = v361;
                  *((__n128 *)v229 - 1) = v361;
                  v251 = v231 + 24 - a1;
                  if (v251 >= 25)
                  {
                    v252 = (v251 / 0x18uLL - 2) >> 1;
                    v253 = (WTF::StringImpl **)(a1 + 24 * v252);
                    v254 = *(WTF::StringImpl **)(v231 + 16);
                    if (v253[2] > v254)
                    {
                      v255 = *(WTF::StringImpl **)v231;
                      v338 = *(WTF::StringImpl **)(v231 + 8);
                      *(_QWORD *)v231 = 0;
                      do
                      {
                        v256 = v253;
                        v257 = *v253;
                        *v256 = 0;
                        v258 = *(WTF::StringImpl **)v231;
                        *(_QWORD *)v231 = v257;
                        if (v258)
                        {
                          if (*(_DWORD *)v258 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v258, a2, a3, a4, a5, a6, a7, a8);
                            WTF::fastFree(v259, v260, v261, v262, v263, v264, v265, v266);
                          }
                          else
                          {
                            *(_DWORD *)v258 -= 2;
                          }
                        }
                        result = *(__n128 *)(v256 + 1);
                        *(__n128 *)(v231 + 8) = result;
                        if (!v252)
                          break;
                        v252 = (v252 - 1) >> 1;
                        v253 = (WTF::StringImpl **)(a1 + 24 * v252);
                        v231 = (uint64_t)v256;
                      }
                      while (v253[2] > v254);
                      v268 = *v256;
                      *v256 = v255;
                      if (v268)
                      {
                        if (*(_DWORD *)v268 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v268, a2, a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v294, v295, v296, v297, v298, v299, v300, v301);
                        }
                        else
                        {
                          *(_DWORD *)v268 -= 2;
                        }
                      }
                      v256[1] = v338;
                      v256[2] = v254;
                    }
                  }
                }
              }
              while (v227-- > 2);
            }
            return result;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (uint64_t *)(a1 + 24 * ((unint64_t)v14 >> 1));
          v17 = *((_QWORD *)v10 - 1);
          if ((unint64_t)v13 >= 0xC01)
          {
            v18 = v16[2];
            if (v18 <= *(_QWORD *)(a1 + 16))
            {
              if (v17 > v18)
              {
                v24 = *v16;
                *v16 = *((_QWORD *)v10 - 3);
                *((_QWORD *)v10 - 3) = v24;
                v25 = a1 + 24 * v15;
                v342 = *(__n128 *)(v25 + 8);
                *(__n128 *)(v25 + 8) = *v334;
                *v334 = v342;
                if ((unint64_t)v16[2] > *(_QWORD *)(a1 + 16))
                {
                  v26 = *(_QWORD *)a1;
                  *(_QWORD *)a1 = *v16;
                  *v16 = v26;
                  v340 = *(__n128 *)(a1 + 8);
                  v27 = *(_OWORD *)(v25 + 8);
                  v21 = (__n128 *)(v25 + 8);
                  *(_OWORD *)(a1 + 8) = v27;
                  goto LABEL_16;
                }
              }
            }
            else
            {
              v19 = (__n128 *)(a1 + 8);
              v20 = *(_QWORD *)a1;
              if (v17 > v18)
              {
                *(_QWORD *)a1 = *((_QWORD *)v10 - 3);
                *((_QWORD *)v10 - 3) = v20;
                v340 = *v19;
                v21 = (__n128 *)((char *)v10 - 16);
                *v19 = *v334;
LABEL_16:
                *v21 = v340;
                goto LABEL_22;
              }
              *(_QWORD *)a1 = *v16;
              *v16 = v20;
              v31 = a1 + 24 * v15;
              v345 = *v19;
              *v19 = *(__n128 *)(v31 + 8);
              *(__n128 *)(v31 + 8) = v345;
              if (*((_QWORD *)v10 - 1) > (unint64_t)v16[2])
              {
                v32 = *v16;
                *v16 = *((_QWORD *)v10 - 3);
                *((_QWORD *)v10 - 3) = v32;
                v33 = *(__n128 *)(v31 + 8);
                *(__n128 *)(v31 + 8) = *v334;
                *v334 = v33;
              }
            }
LABEL_22:
            v34 = v15 - 1;
            v35 = (uint64_t *)(a1 + 24 * (v15 - 1));
            v36 = v35[2];
            v37 = *((_QWORD *)v10 - 4);
            if (v36 <= *(_QWORD *)(a1 + 40))
            {
              if (v37 > v36)
              {
                v42 = *v35;
                *v35 = *((_QWORD *)v10 - 6);
                *((_QWORD *)v10 - 6) = v42;
                v43 = a1 + 24 * v34;
                v346 = *(_OWORD *)(v43 + 8);
                *(_OWORD *)(v43 + 8) = *v333;
                *v333 = v346;
                if ((unint64_t)v35[2] > *(_QWORD *)(a1 + 40))
                {
                  v44 = *(_QWORD *)(a1 + 24);
                  *(_QWORD *)(a1 + 24) = *v35;
                  *v35 = v44;
                  v45 = *(_OWORD *)(a1 + 32);
                  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v43 + 8);
                  *(_OWORD *)(v43 + 8) = v45;
                }
              }
            }
            else
            {
              v38 = *(_QWORD *)(a1 + 24);
              v39 = (__int128 *)(a1 + 32);
              if (v37 <= v36)
              {
                *(_QWORD *)(a1 + 24) = *v35;
                *v35 = v38;
                v47 = a1 + 24 * v34;
                v48 = *v39;
                *v39 = *(_OWORD *)(v47 + 8);
                *(_OWORD *)(v47 + 8) = v48;
                if (*((_QWORD *)v10 - 4) <= (unint64_t)v35[2])
                  goto LABEL_33;
                v49 = (__int128 *)(v47 + 8);
                v50 = *v35;
                *v35 = *((_QWORD *)v10 - 6);
                *((_QWORD *)v10 - 6) = v50;
                v349 = *v49;
                v41 = (_OWORD *)((char *)v10 - 40);
                *v49 = *v333;
                v40 = v349;
              }
              else
              {
                *(_QWORD *)(a1 + 24) = *((_QWORD *)v10 - 6);
                *((_QWORD *)v10 - 6) = v38;
                v40 = *v39;
                v41 = (_OWORD *)((char *)v10 - 40);
                *v39 = *v333;
              }
              *v41 = v40;
            }
LABEL_33:
            v51 = v15 + 1;
            v52 = (uint64_t *)(a1 + 24 * (v15 + 1));
            v53 = v52[2];
            v54 = *((_QWORD *)v10 - 7);
            if (v53 <= *(_QWORD *)(a1 + 64))
            {
              if (v54 > v53)
              {
                v59 = *v52;
                *v52 = *((_QWORD *)v10 - 9);
                *((_QWORD *)v10 - 9) = v59;
                v60 = a1 + 24 * v51;
                v350 = *(_OWORD *)(v60 + 8);
                *(_OWORD *)(v60 + 8) = *v332;
                *v332 = v350;
                if ((unint64_t)v52[2] > *(_QWORD *)(a1 + 64))
                {
                  v61 = *(_QWORD *)(a1 + 48);
                  *(_QWORD *)(a1 + 48) = *v52;
                  *v52 = v61;
                  v62 = *(_OWORD *)(a1 + 56);
                  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v60 + 8);
                  *(_OWORD *)(v60 + 8) = v62;
                }
              }
              goto LABEL_42;
            }
            v55 = *(_QWORD *)(a1 + 48);
            v56 = (__int128 *)(a1 + 56);
            if (v54 <= v53)
            {
              *(_QWORD *)(a1 + 48) = *v52;
              *v52 = v55;
              v63 = a1 + 24 * v51;
              v64 = *v56;
              *v56 = *(_OWORD *)(v63 + 8);
              *(_OWORD *)(v63 + 8) = v64;
              if (*((_QWORD *)v10 - 7) <= (unint64_t)v52[2])
              {
LABEL_42:
                v67 = v16[2];
                v68 = v52[2];
                if (v67 <= v35[2])
                {
                  if (v68 > v67)
                  {
                    v72 = *v16;
                    *v16 = *v52;
                    *v52 = v72;
                    v73 = a1 + 24 * v15;
                    v74 = a1 + 24 * v51;
                    v353 = *(_OWORD *)(v73 + 8);
                    *(_OWORD *)(v73 + 8) = *(_OWORD *)(v74 + 8);
                    *(_OWORD *)(v74 + 8) = v353;
                    if (v16[2] > (unint64_t)v35[2])
                    {
                      v75 = (_OWORD *)(v73 + 8);
                      v76 = *v35;
                      *v35 = *v16;
                      *v16 = v76;
                      v77 = a1 + 24 * v34;
                      v354 = *(_OWORD *)(v77 + 8);
                      *(_OWORD *)(v77 + 8) = *v75;
                      *v75 = v354;
                    }
                  }
                }
                else
                {
                  v69 = *v35;
                  v70 = (__int128 *)(a1 + 24 * v34 + 8);
                  if (v68 <= v67)
                  {
                    *v35 = *v16;
                    *v16 = v69;
                    v78 = a1 + 24 * v15;
                    v355 = *v70;
                    *v70 = *(_OWORD *)(v78 + 8);
                    *(_OWORD *)(v78 + 8) = v355;
                    if (v52[2] > (unint64_t)v16[2])
                    {
                      v79 = *v16;
                      *v16 = *v52;
                      *v52 = v79;
                      v80 = a1 + 24 * v51;
                      v81 = *(_OWORD *)(v78 + 8);
                      *(_OWORD *)(v78 + 8) = *(_OWORD *)(v80 + 8);
                      *(_OWORD *)(v80 + 8) = v81;
                    }
                  }
                  else
                  {
                    *v35 = *v52;
                    *v52 = v69;
                    v71 = a1 + 24 * v51;
                    v352 = *v70;
                    *v70 = *(_OWORD *)(v71 + 8);
                    *(_OWORD *)(v71 + 8) = v352;
                  }
                }
                v82 = *(_QWORD *)a1;
                *(_QWORD *)a1 = *v16;
                *v16 = v82;
                v83 = a1 + 24 * v15;
                v356 = *(__n128 *)(a1 + 8);
                *(_OWORD *)(a1 + 8) = *(_OWORD *)(v83 + 8);
                result = v356;
                *(__n128 *)(v83 + 8) = v356;
                goto LABEL_51;
              }
              v65 = (__int128 *)(v63 + 8);
              v66 = *v52;
              *v52 = *((_QWORD *)v10 - 9);
              *((_QWORD *)v10 - 9) = v66;
              v351 = *v65;
              v58 = (_OWORD *)((char *)v10 - 64);
              *v65 = *v332;
              v57 = v351;
            }
            else
            {
              *(_QWORD *)(a1 + 48) = *((_QWORD *)v10 - 9);
              *((_QWORD *)v10 - 9) = v55;
              v57 = *v56;
              v58 = (_OWORD *)((char *)v10 - 64);
              *v56 = *v332;
            }
            *v58 = v57;
            goto LABEL_42;
          }
          v22 = *(_QWORD *)(a1 + 16);
          if (v22 <= v16[2])
          {
            if (v17 > v22)
            {
              v28 = *(_QWORD *)a1;
              *(_QWORD *)a1 = *((_QWORD *)v10 - 3);
              *((_QWORD *)v10 - 3) = v28;
              v343 = *(__n128 *)(a1 + 8);
              *(__n128 *)(a1 + 8) = *v334;
              result = v343;
              *v334 = v343;
              if (*(_QWORD *)(a1 + 16) > (unint64_t)v16[2])
              {
                v29 = *v16;
                *v16 = *(_QWORD *)a1;
                *(_QWORD *)a1 = v29;
                v30 = a1 + 24 * v15;
                v344 = *(__n128 *)(v30 + 8);
                *(_OWORD *)(v30 + 8) = *(_OWORD *)(a1 + 8);
                result = v344;
                *(__n128 *)(a1 + 8) = v344;
              }
            }
          }
          else
          {
            v23 = *v16;
            v15 = a1 + 24 * v15 + 8;
            if (v17 <= v22)
            {
              *v16 = *(_QWORD *)a1;
              *(_QWORD *)a1 = v23;
              v347 = *(__n128 *)v15;
              *(_OWORD *)v15 = *(_OWORD *)(a1 + 8);
              result = v347;
              *(__n128 *)(a1 + 8) = v347;
              v15 = *(_QWORD *)(a1 + 16);
              if (*((_QWORD *)v10 - 1) > v15)
              {
                v46 = *(_QWORD *)a1;
                *(_QWORD *)a1 = *((_QWORD *)v10 - 3);
                *((_QWORD *)v10 - 3) = v46;
                v348 = *(__n128 *)(a1 + 8);
                v15 = (unint64_t)v10 - 16;
                *(__n128 *)(a1 + 8) = *v334;
                result = v348;
                *v334 = v348;
              }
            }
            else
            {
              *v16 = *((_QWORD *)v10 - 3);
              *((_QWORD *)v10 - 3) = v23;
              v341 = *(__n128 *)v15;
              *(__n128 *)v15 = *v334;
              result = v341;
              *v334 = v341;
            }
          }
LABEL_51:
          --v9;
          if ((v336 & 1) == 0)
          {
            v85 = *(_QWORD *)(a1 + 16);
            if (*(_QWORD *)(a1 - 8) > v85)
            {
              v84 = v9;
              goto LABEL_55;
            }
            v124 = *(_QWORD *)a1;
            *(_QWORD *)a1 = 0;
            v125 = *(_QWORD *)(a1 + 8);
            if (v85 <= *((_QWORD *)v10 - 1))
            {
              v126 = a1 + 24;
              do
              {
                v12 = v126;
                if (v126 >= (unint64_t)v10)
                  break;
                v127 = *(_QWORD *)(v126 + 16);
                v126 += 24;
              }
              while (v85 <= v127);
            }
            else
            {
              v86 = a1 + 24;
              do
              {
                if ((WTF::AtomStringImpl *)v86 == v10)
                  goto LABEL_251;
                v15 = *(_QWORD *)(v86 + 16);
                v86 += 24;
              }
              while (v85 <= v15);
              v12 = v86 - 24;
            }
            v86 = (unint64_t)v10;
            if (v12 < (unint64_t)v10)
            {
              v15 = (unint64_t)v10;
              while (v15 != a1)
              {
                v86 = v15 - 24;
                v128 = *(_QWORD *)(v15 - 8);
                v15 -= 24;
                if (v85 <= v128)
                  goto LABEL_102;
              }
              goto LABEL_251;
            }
LABEL_102:
            if (v12 < v86)
            {
              do
              {
                v129 = *(_QWORD *)v12;
                *(_QWORD *)v12 = *(_QWORD *)v86;
                *(_QWORD *)v86 = v129;
                v358 = *(__n128 *)(v12 + 8);
                *(_OWORD *)(v12 + 8) = *(_OWORD *)(v86 + 8);
                result = v358;
                *(__n128 *)(v86 + 8) = v358;
                v15 = v12 + 24;
                do
                {
                  if ((WTF::AtomStringImpl *)v15 == v10)
                    goto LABEL_251;
                  v130 = *(_QWORD *)(v15 + 16);
                  v15 += 24;
                }
                while (v85 <= v130);
                v12 = v15 - 24;
                do
                {
                  if (v86 == a1)
                    goto LABEL_251;
                  v15 = v86 - 24;
                  v131 = *(_QWORD *)(v86 - 8);
                  v86 -= 24;
                }
                while (v85 > v131);
                v86 = v15;
              }
              while (v12 < v15);
            }
            v132 = (WTF::StringImpl **)(v12 - 24);
            if (v12 - 24 != a1)
            {
              v133 = *v132;
              *v132 = 0;
              v134 = *(WTF::StringImpl **)a1;
              *(_QWORD *)a1 = v133;
              if (v134)
              {
                if (*(_DWORD *)v134 == 2)
                {
                  WTF::StringImpl::~StringImpl(v134, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
                }
                else
                {
                  *(_DWORD *)v134 -= 2;
                }
              }
              result = *(__n128 *)(v12 - 16);
              *(__n128 *)(a1 + 8) = result;
            }
            v135 = *v132;
            *v132 = (WTF::StringImpl *)v124;
            if (v135)
            {
              if (*(_DWORD *)v135 == 2)
              {
                WTF::StringImpl::~StringImpl(v135, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
              }
              else
              {
                *(_DWORD *)v135 -= 2;
              }
            }
            v336 = 0;
            *(_QWORD *)(v12 - 16) = v125;
            *(_QWORD *)(v12 - 8) = v85;
            continue;
          }
          v84 = v9;
          v85 = *(_QWORD *)(a1 + 16);
LABEL_55:
          v86 = 0;
          v87 = *(_QWORD *)a1;
          *(_QWORD *)a1 = 0;
          v88 = *(_QWORD *)(a1 + 8);
          do
          {
            v15 = a1 + v86;
            if ((WTF::AtomStringImpl *)(a1 + v86 + 24) == v10)
              goto LABEL_251;
            v86 += 24;
          }
          while (*(_QWORD *)(v15 + 40) > v85);
          v89 = a1 + v86;
          v15 = (unint64_t)v10;
          if (v86 != 24)
          {
            while (v15 != a1)
            {
              v90 = v15 - 24;
              v86 = *(_QWORD *)(v15 - 8);
              v15 -= 24;
              if (v86 > v85)
                goto LABEL_67;
            }
            goto LABEL_251;
          }
          v91 = v10;
          while (v89 < (unint64_t)v91)
          {
            v90 = (unint64_t)v91 - 24;
            v92 = *((_QWORD *)v91 - 1);
            v91 = (WTF::AtomStringImpl *)((char *)v91 - 24);
            if (v92 > v85)
              goto LABEL_67;
          }
          v90 = (unint64_t)v91;
LABEL_67:
          v12 = v89;
          if (v89 < v90)
          {
            v86 = v90;
            do
            {
              v93 = *(_QWORD *)v12;
              *(_QWORD *)v12 = *(_QWORD *)v86;
              *(_QWORD *)v86 = v93;
              v357 = *(_OWORD *)(v12 + 8);
              *(_OWORD *)(v12 + 8) = *(_OWORD *)(v86 + 8);
              *(_OWORD *)(v86 + 8) = v357;
              v15 = v12 + 24;
              do
              {
                if ((WTF::AtomStringImpl *)v15 == v10)
                  goto LABEL_251;
                v94 = *(_QWORD *)(v15 + 16);
                v15 += 24;
              }
              while (v94 > v85);
              v12 = v15 - 24;
              do
              {
                if (v86 == a1)
                  goto LABEL_251;
                v15 = v86 - 24;
                v95 = *(_QWORD *)(v86 - 8);
                v86 -= 24;
              }
              while (v95 <= v85);
              v86 = v15;
            }
            while (v12 < v15);
          }
          v96 = (WTF::StringImpl **)(v12 - 24);
          if (v12 - 24 != a1)
          {
            v97 = *v96;
            *v96 = 0;
            v98 = *(WTF::StringImpl **)a1;
            *(_QWORD *)a1 = v97;
            if (v98)
            {
              if (*(_DWORD *)v98 == 2)
              {
                v331 = v88;
                WTF::StringImpl::~StringImpl(v98, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
                v88 = v331;
              }
              else
              {
                *(_DWORD *)v98 -= 2;
              }
            }
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v12 - 16);
          }
          v99 = *v96;
          *v96 = (WTF::StringImpl *)v87;
          v9 = v84;
          if (v99)
          {
            if (*(_DWORD *)v99 == 2)
            {
              v107 = v88;
              WTF::StringImpl::~StringImpl(v99, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
              v88 = v107;
            }
            else
            {
              *(_DWORD *)v99 -= 2;
            }
          }
          *(_QWORD *)(v12 - 16) = v88;
          *(_QWORD *)(v12 - 8) = v85;
          if (v89 < v90)
            goto LABEL_87;
          v100 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JITSizeStatistics::dump(WTF::PrintStream &)::$_0 &,std::pair<WTF::String,JSC::JITSizeStatistics::Entry> *>(a1, (WTF::AtomStringImpl *)(v12 - 24), a3, a4, a5, a6, a7, a8);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JITSizeStatistics::dump(WTF::PrintStream &)::$_0 &,std::pair<WTF::String,JSC::JITSizeStatistics::Entry> *>(v12, v10, v101, v102, v103, v104, v105, v106))
          {
            if (v100)
              continue;
LABEL_87:
            std::__introsort<std::_ClassicAlgPolicy,JSC::JITSizeStatistics::dump(WTF::PrintStream &)::$_0 &,std::pair<WTF::String,JSC::JITSizeStatistics::Entry> *,false>(a1, v12 - 24, v9, v336 & 1);
            v336 = 0;
            continue;
          }
          v10 = (WTF::AtomStringImpl *)(v12 - 24);
          if (v100)
            return result;
          goto LABEL_2;
        }
        v163 = (WTF::AtomStringImpl *)(a1 + 24);
        v165 = (WTF::AtomStringImpl *)a1 == v10 || v163 == v10;
        if ((v336 & 1) != 0)
        {
          if (!v165)
          {
            v166 = 0;
            v167 = (_QWORD *)a1;
            do
            {
              v168 = v163;
              v169 = v167[5];
              if (v169 > v167[2])
              {
                v170 = 0;
                v171 = *(_QWORD *)v163;
                *(_QWORD *)v163 = 0;
                v172 = v167[4];
                for (i = v166; ; i -= 24)
                {
                  v174 = a1 + i;
                  v175 = *(_QWORD *)(a1 + i);
                  *(_QWORD *)v174 = 0;
                  *(_QWORD *)(v174 + 24) = v175;
                  if (v170)
                  {
                    if (*(_DWORD *)v170 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v170, a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v177, v178, v179, v180, v181, v182, v183, v184);
                    }
                    else
                    {
                      *(_DWORD *)v170 -= 2;
                    }
                  }
                  result = *(__n128 *)(v174 + 8);
                  *(__n128 *)(v174 + 32) = result;
                  if (!i)
                    break;
                  v176 = a1 + i;
                  if (v169 <= *(_QWORD *)(a1 + i - 8))
                    goto LABEL_156;
                  v170 = *(WTF::StringImpl **)v174;
                }
                v176 = a1;
LABEL_156:
                v185 = *(WTF::StringImpl **)v176;
                *(_QWORD *)v176 = v171;
                if (v185)
                {
                  if (*(_DWORD *)v185 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v185, a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v186, v187, v188, v189, v190, v191, v192, v193);
                  }
                  else
                  {
                    *(_DWORD *)v185 -= 2;
                  }
                }
                *(_QWORD *)(a1 + i + 8) = v172;
                *(_QWORD *)(v176 + 16) = v169;
              }
              v163 = (WTF::AtomStringImpl *)((char *)v168 + 24);
              v166 += 24;
              v167 = v168;
            }
            while ((WTF::AtomStringImpl *)((char *)v168 + 24) != v10);
          }
        }
        else if (!v165)
        {
          v304 = -2;
          v305 = 1;
          v306 = (_QWORD *)a1;
          while (1)
          {
            v307 = v306[5];
            v15 = v306[2];
            if (v307 > v15)
              break;
LABEL_248:
            v306 += 3;
            ++v305;
            v163 = (WTF::AtomStringImpl *)(a1 + 24 * v305);
            --v304;
            if (v163 == v10)
              return result;
          }
          v308 = 0;
          v309 = *(_QWORD *)v163;
          *(_QWORD *)v163 = 0;
          v339 = v306[4];
          v310 = v304;
          v311 = v306;
          while (1)
          {
            v86 = *v311;
            *v311 = 0;
            v311[3] = v86;
            if (v308)
            {
              v86 = (*(_DWORD *)v308 - 2);
              if (*(_DWORD *)v308 == 2)
              {
                WTF::StringImpl::~StringImpl(v308, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v315, v316, v317, v318, v319, v320, v321, v322);
              }
              else
              {
                *(_DWORD *)v308 = v86;
              }
            }
            result = *(__n128 *)(v311 + 1);
            *((__n128 *)v311 + 2) = result;
            if (__CFADD__(v310++, 1))
              break;
            v313 = v311 - 3;
            v314 = *(v311 - 1);
            v308 = (WTF::StringImpl *)*v311;
            v311 -= 3;
            if (v307 <= v314)
            {
              v313[3] = v309;
              if (v308)
              {
                if (*(_DWORD *)v308 == 2)
                {
                  WTF::StringImpl::~StringImpl(v308, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v323, v324, v325, v326, v327, v328, v329, v330);
                }
                else
                {
                  *(_DWORD *)v308 -= 2;
                }
              }
              v313[4] = v339;
              v313[5] = v307;
              goto LABEL_248;
            }
          }
LABEL_251:
          __break(1u);
LABEL_252:
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v86;
          v363 = *(__n128 *)v15;
          *(_OWORD *)v15 = *(_OWORD *)(a1 + 32);
          result = v363;
          *(__n128 *)(a1 + 32) = v363;
          if (*((_QWORD *)v10 - 1) > *(_QWORD *)(a1 + 40))
          {
            *(_QWORD *)(a1 + 24) = *((_QWORD *)v10 - 3);
            *((_QWORD *)v10 - 3) = v86;
            result = *(__n128 *)(a1 + 32);
            *(_OWORD *)(a1 + 32) = *((_OWORD *)v10 - 1);
LABEL_130:
            *((__n128 *)v10 - 1) = result;
          }
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JITSizeStatistics::dump(WTF::PrintStream &)::$_0 &,std::pair<WTF::String,JSC::JITSizeStatistics::Entry> *>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  _BOOL8 result;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  int v50;
  WTF::AtomStringImpl *v51;
  unint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v10)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*((_QWORD *)a2 - 1) > *(_QWORD *)(a1 + 16))
      {
        v12 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *((_QWORD *)a2 - 3);
        *((_QWORD *)a2 - 3) = v12;
        v13 = *(_OWORD *)(a1 + 8);
        *(_OWORD *)(a1 + 8) = *((_OWORD *)a2 - 1);
        goto LABEL_25;
      }
      return result;
    case 3uLL:
      v14 = *(_QWORD *)(a1 + 40);
      v15 = *((_QWORD *)a2 - 1);
      if (v14 <= *(_QWORD *)(a1 + 16))
      {
        if (v15 > v14)
        {
          v36 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 - 3);
          *((_QWORD *)a2 - 3) = v36;
          v37 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 - 1);
          *((_OWORD *)a2 - 1) = v37;
          if (*(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 16))
          {
            v38 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 24) = v38;
            v39 = *(_OWORD *)(a1 + 8);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 32);
            *(_OWORD *)(a1 + 32) = v39;
          }
        }
      }
      else
      {
        v17 = (__int128 *)(a1 + 8);
        v16 = *(_QWORD *)a1;
        if (v15 <= v14)
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v16;
          v46 = *v17;
          *v17 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)(a1 + 32) = v46;
          if (*((_QWORD *)a2 - 1) <= *(_QWORD *)(a1 + 40))
            return result;
          v17 = (__int128 *)(a1 + 32);
          *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 - 3);
        }
        else
        {
          *(_QWORD *)a1 = *((_QWORD *)a2 - 3);
        }
        *((_QWORD *)a2 - 3) = v16;
        v13 = *v17;
        *v17 = *((_OWORD *)a2 - 1);
LABEL_25:
        *((_OWORD *)a2 - 1) = v13;
      }
      return result;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JITSizeStatistics::dump(WTF::PrintStream &)::$_0 &,std::pair<WTF::String,JSC::JITSizeStatistics::Entry> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), (uint64_t *)a2 - 3);
      return 1;
    case 5uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JITSizeStatistics::dump(WTF::PrintStream &)::$_0 &,std::pair<WTF::String,JSC::JITSizeStatistics::Entry> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 72));
      if (*((_QWORD *)a2 - 1) > *(_QWORD *)(a1 + 88))
      {
        v24 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 - 3);
        *((_QWORD *)a2 - 3) = v24;
        v25 = *(_OWORD *)(a1 + 80);
        *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v25;
        if (*(_QWORD *)(a1 + 88) > *(_QWORD *)(a1 + 64))
        {
          v26 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 80);
          v28 = *(_QWORD *)(a1 + 64);
          v27 = *(_QWORD *)(a1 + 72);
          v30 = *(_QWORD *)(a1 + 40);
          v29 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v27;
          *(_QWORD *)(a1 + 72) = v29;
          *(_OWORD *)(a1 + 80) = v26;
          if (v28 > v30)
          {
            v32 = *(_QWORD *)(a1 + 16);
            v31 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 24) = v27;
            *(_QWORD *)(a1 + 48) = v31;
            v33 = *(_OWORD *)(a1 + 32);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 56);
            *(_OWORD *)(a1 + 56) = v33;
            if (*(_QWORD *)(a1 + 40) > v32)
            {
              v34 = *(_QWORD *)a1;
              *(_QWORD *)a1 = v27;
              *(_QWORD *)(a1 + 24) = v34;
              v35 = *(_OWORD *)(a1 + 8);
              *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 32);
              *(_OWORD *)(a1 + 32) = v35;
            }
          }
        }
      }
      return 1;
    default:
      v18 = *(_QWORD *)(a1 + 40);
      v19 = *(_QWORD *)(a1 + 16);
      v20 = *(_QWORD *)(a1 + 64);
      if (v18 <= v19)
      {
        if (v20 > v18)
        {
          v40 = *(_QWORD *)(a1 + 24);
          v41 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 56);
          v43 = *(_QWORD *)(a1 + 40);
          v42 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 24) = v42;
          *(_QWORD *)(a1 + 48) = v40;
          *(_OWORD *)(a1 + 56) = v41;
          if (v43 > v19)
          {
            v44 = *(_QWORD *)a1;
            *(_QWORD *)a1 = v42;
            *(_QWORD *)(a1 + 24) = v44;
            v45 = *(_OWORD *)(a1 + 8);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 32);
            *(_OWORD *)(a1 + 32) = v45;
          }
        }
      }
      else
      {
        v22 = (__int128 *)(a1 + 8);
        v21 = *(_QWORD *)a1;
        if (v20 <= v18)
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v21;
          v47 = *v22;
          *v22 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)(a1 + 32) = v47;
          if (v20 <= *(_QWORD *)(a1 + 40))
            goto LABEL_29;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v21;
          v23 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 56);
        }
        else
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v21;
          v23 = *v22;
          *v22 = *(_OWORD *)(a1 + 56);
        }
        *(_OWORD *)(a1 + 56) = v23;
      }
LABEL_29:
      v48 = (WTF::AtomStringImpl *)(a1 + 72);
      if ((WTF::AtomStringImpl *)(a1 + 72) == a2)
        return 1;
      v49 = 0;
      v50 = 0;
      v51 = (WTF::AtomStringImpl *)(a1 + 48);
      break;
  }
  while (1)
  {
    v52 = *((_QWORD *)v48 + 2);
    if (v52 > *((_QWORD *)v51 + 2))
    {
      v53 = 0;
      v55 = *(_QWORD *)v48;
      v54 = *((_QWORD *)v48 + 1);
      v56 = v49;
      *(_QWORD *)v48 = 0;
      while (1)
      {
        v57 = a1 + v56;
        v58 = *(_QWORD *)(a1 + v56 + 48);
        *(_QWORD *)(v57 + 48) = 0;
        *(_QWORD *)(v57 + 72) = v58;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
          {
            WTF::StringImpl::~StringImpl(v53, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
          }
          else
          {
            *(_DWORD *)v53 -= 2;
          }
        }
        *(_OWORD *)(v57 + 80) = *(_OWORD *)(v57 + 56);
        if (v56 == -48)
        {
          v67 = a1;
          goto LABEL_42;
        }
        if (v52 <= *(_QWORD *)(a1 + v56 + 40))
          break;
        v53 = *(WTF::StringImpl **)(v57 + 48);
        v56 -= 24;
      }
      v67 = a1 + v56 + 48;
LABEL_42:
      v68 = *(WTF::StringImpl **)v67;
      *(_QWORD *)v67 = v55;
      if (v68)
      {
        if (*(_DWORD *)v68 == 2)
        {
          WTF::StringImpl::~StringImpl(v68, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
        }
        else
        {
          *(_DWORD *)v68 -= 2;
        }
      }
      *(_QWORD *)(a1 + v56 + 56) = v54;
      *(_QWORD *)(v67 + 16) = v52;
      if (++v50 == 8)
        return (WTF::AtomStringImpl *)((char *)v48 + 24) == a2;
    }
    v51 = v48;
    v49 += 24;
    v48 = (WTF::AtomStringImpl *)((char *)v48 + 24);
    if (v48 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JITSizeStatistics::dump(WTF::PrintStream &)::$_0 &,std::pair<WTF::String,JSC::JITSizeStatistics::Entry> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a2[2];
  v5 = a3[2];
  if (v4 <= a1[2])
  {
    if (v5 > v4)
    {
      v8 = *a2;
      *a2 = *a3;
      *a3 = v8;
      result = *(__n128 *)(a2 + 1);
      *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
      *(__n128 *)(a3 + 1) = result;
      if (a2[2] > (unint64_t)a1[2])
      {
        v10 = *a1;
        *a1 = *a2;
        *a2 = v10;
        result = *(__n128 *)(a1 + 1);
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
        *(__n128 *)(a2 + 1) = result;
      }
    }
  }
  else
  {
    v6 = (__n128 *)(a1 + 1);
    v7 = *a1;
    if (v5 > v4)
    {
      *a1 = *a3;
      *a3 = v7;
LABEL_9:
      result = *v6;
      *v6 = *(__n128 *)(a3 + 1);
      *(__n128 *)(a3 + 1) = result;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v7;
    result = *v6;
    *v6 = *(__n128 *)(a2 + 1);
    *(__n128 *)(a2 + 1) = result;
    if (a3[2] > (unint64_t)a2[2])
    {
      v6 = (__n128 *)(a2 + 1);
      v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (a4[2] > (unint64_t)a3[2])
  {
    v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    result = *(__n128 *)(a3 + 1);
    *(_OWORD *)(a3 + 1) = *(_OWORD *)(a4 + 1);
    *(__n128 *)(a4 + 1) = result;
    if (a3[2] > (unint64_t)a2[2])
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      result = *(__n128 *)(a2 + 1);
      *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
      *(__n128 *)(a3 + 1) = result;
      if (a2[2] > (unint64_t)a1[2])
      {
        v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
        result = *(__n128 *)(a1 + 1);
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
        *(__n128 *)(a2 + 1) = result;
      }
    }
  }
  return result;
}

double WTF::Vector<JSC::JITGetByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITGetByValGenerator&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  double result;

  v3 = WTF::Vector<JSC::JITGetByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 12);
  v5 = *(_OWORD *)v3;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(v3 + 16);
  *(_OWORD *)v4 = v5;
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(v3 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(v3 + 28);
  result = *(double *)(v3 + 32);
  *(double *)(v4 + 32) = result;
  *(_WORD *)(v4 + 40) = *(_WORD *)(v3 + 40);
  *(_DWORD *)(v4 + 44) = *(_DWORD *)(v3 + 44);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(v3 + 48);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::JITGetByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 56 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v7 = a3 - v5;
    WTF::Vector<JSC::JITGetByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v7;
  }
  else
  {
    WTF::Vector<JSC::JITGetByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::JITGetByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(_DWORD *)(a1 + 12);
      v8 = 56 * v4;
      v9 = WTF::fastMalloc((WTF *)(56 * v4));
      *(_DWORD *)(a1 + 8) = v8 / 0x38;
      *(_QWORD *)a1 = v9;
      if (v7)
      {
        v17 = v6;
        do
        {
          v18 = *(_OWORD *)v17;
          *(_BYTE *)(v9 + 16) = *(_BYTE *)(v17 + 16);
          *(_OWORD *)v9 = v18;
          *(_DWORD *)(v9 + 20) = *(_DWORD *)(v17 + 20);
          *(_DWORD *)(v9 + 24) = *(_DWORD *)(v17 + 24);
          *(_DWORD *)(v9 + 28) = *(_DWORD *)(v17 + 28);
          *(_QWORD *)(v9 + 32) = *(_QWORD *)(v17 + 32);
          *(_WORD *)(v9 + 40) = *(_WORD *)(v17 + 40);
          *(_DWORD *)(v9 + 44) = *(_DWORD *)(v17 + 44);
          *(_QWORD *)(v9 + 48) = *(_QWORD *)(v17 + 48);
          v17 += 56;
          v9 += 56;
        }
        while (v17 != v6 + 56 * v7);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

double WTF::Vector<JSC::JITPrivateBrandAccessGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITPrivateBrandAccessGenerator&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  double result;

  v3 = WTF::Vector<JSC::JITPrivateBrandAccessGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 12);
  v5 = *(_OWORD *)v3;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(v3 + 16);
  *(_OWORD *)v4 = v5;
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(v3 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(v3 + 28);
  result = *(double *)(v3 + 32);
  *(double *)(v4 + 32) = result;
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(v3 + 40);
  *(_QWORD *)(v4 + 44) = *(_QWORD *)(v3 + 44);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::JITPrivateBrandAccessGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 56 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::JITPrivateBrandAccessGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::JITPrivateBrandAccessGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::JITPrivateBrandAccessGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  __int128 *v3;
  __int128 *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x4924925)
    {
      __break(0xC471u);
      JUMPOUT(0x1987F96ECLL);
    }
    v3 = *(__int128 **)a1;
    v4 = (__int128 *)(*(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 12));
    v5 = 56 * a2;
    v6 = WTF::fastMalloc((WTF *)(56 * a2));
    *(_DWORD *)(a1 + 8) = v5 / 0x38;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,JSC::JITPrivateBrandAccessGenerator>::move(v3, v4, v6);
    if (v3)
    {
      if (*(__int128 **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v7, v8, v9, v10, v11, v12, v13);
    }
  }
}

__int128 *WTF::VectorMover<false,JSC::JITPrivateBrandAccessGenerator>::move(__int128 *result, __int128 *a2, uint64_t a3)
{
  __int128 v3;

  while (result != a2)
  {
    v3 = *result;
    *(_BYTE *)(a3 + 16) = *((_BYTE *)result + 16);
    *(_OWORD *)a3 = v3;
    *(_DWORD *)(a3 + 20) = *((_DWORD *)result + 5);
    *(_DWORD *)(a3 + 24) = *((_DWORD *)result + 6);
    *(_DWORD *)(a3 + 28) = *((_DWORD *)result + 7);
    *(_QWORD *)(a3 + 32) = *((_QWORD *)result + 4);
    *(_DWORD *)(a3 + 40) = *((_DWORD *)result + 10);
    *(_QWORD *)(a3 + 44) = *(_QWORD *)((char *)result + 44);
    result = (__int128 *)((char *)result + 56);
    a3 += 56;
  }
  return result;
}

double WTF::Vector<JSC::JITPutByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITPutByValGenerator&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  double result;

  v3 = WTF::Vector<JSC::JITPutByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 12);
  v5 = *(_OWORD *)v3;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(v3 + 16);
  *(_OWORD *)v4 = v5;
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(v3 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(v3 + 28);
  result = *(double *)(v3 + 32);
  *(double *)(v4 + 32) = result;
  *(_WORD *)(v4 + 40) = *(_WORD *)(v3 + 40);
  *(_DWORD *)(v4 + 44) = *(_DWORD *)(v3 + 44);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(v3 + 48);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::JITPutByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 56 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v6 = a3 - v4;
    WTF::Vector<JSC::JITGetByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  else
  {
    WTF::Vector<JSC::JITGetByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t JSC::OpPutPrivateName::OpPutPrivateName(uint64_t this, const unsigned __int16 *a2)
{
  int v2;
  int v3;
  int v4;

  v2 = *(__int16 *)a2;
  if (v2 > 63)
    v2 += 1073741760;
  *(_DWORD *)this = v2;
  v3 = *((__int16 *)a2 + 1);
  if (v3 > 63)
    v3 += 1073741760;
  *(_DWORD *)(this + 4) = v3;
  v4 = *((__int16 *)a2 + 2);
  if (v4 > 63)
    v4 += 1073741760;
  *(_DWORD *)(this + 8) = v4;
  *(_BYTE *)(this + 12) = *((_BYTE *)a2 + 6);
  *(_DWORD *)(this + 16) = a2[4];
  return this;
}

double WTF::Vector<JSC::JITGetByIdGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITGetByIdGenerator&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  double result;

  v3 = WTF::Vector<JSC::JITGetByIdGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6);
  v5 = *(_OWORD *)v3;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(v3 + 16);
  *(_OWORD *)v4 = v5;
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(v3 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(v3 + 28);
  result = *(double *)(v3 + 32);
  *(double *)(v4 + 32) = result;
  *(_WORD *)(v4 + 40) = *(_WORD *)(v3 + 40);
  *(_DWORD *)(v4 + 44) = *(_DWORD *)(v3 + 44);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(v3 + 48);
  *(_BYTE *)(v4 + 56) = *(_BYTE *)(v3 + 56);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::JITGetByIdWithThisGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 56 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::JITGetByIdWithThisGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x4924925)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 56 * v8;
    v11 = WTF::fastMalloc((WTF *)(56 * v8));
    *(_DWORD *)(v4 + 8) = v10 / 0x38;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v19 = 56 * v9;
      v20 = (__int128 *)v5;
      do
      {
        JSC::JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator(v11, v20);
        v11 = v21 + 56;
        v20 = (__int128 *)((char *)v20 + 56);
        v19 -= 56;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::JITGetByIdWithThisGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 56 * v4;
      v9 = WTF::fastMalloc((WTF *)(56 * v4));
      *(_DWORD *)(a1 + 8) = v8 / 0x38;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v7)
      {
        v17 = 56 * v7;
        v18 = (__int128 *)v6;
        do
        {
          JSC::JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator(v9, v18);
          v9 = v19 + 56;
          v18 = (__int128 *)((char *)v18 + 56);
          v17 -= 56;
        }
        while (v17);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

double JSC::JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  double result;

  v2 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v2;
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 + 7);
  result = *((double *)a2 + 4);
  *(double *)(a1 + 32) = result;
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 11);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  return result;
}

uint64_t WTF::Vector<JSC::JITInByIdGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 56 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::JITInByIdGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x4924925)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 56 * v8;
    v11 = WTF::fastMalloc((WTF *)(56 * v8));
    *(_DWORD *)(v4 + 8) = v10 / 0x38;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v19 = 56 * v9;
      v20 = (__int128 *)v5;
      do
      {
        JSC::JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator(v11, v20);
        v11 = v21 + 56;
        v20 = (__int128 *)((char *)v20 + 56);
        v19 -= 56;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::JITInByIdGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 56 * v4;
      v9 = WTF::fastMalloc((WTF *)(56 * v4));
      *(_DWORD *)(a1 + 8) = v8 / 0x38;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v7)
      {
        v17 = 56 * v7;
        v18 = (__int128 *)v6;
        do
        {
          JSC::JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator(v9, v18);
          v9 = v19 + 56;
          v18 = (__int128 *)((char *)v18 + 56);
          v17 -= 56;
        }
        while (v17);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

double WTF::Vector<JSC::JITInByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITInByValGenerator&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  double result;

  v3 = WTF::Vector<JSC::JITInByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 12);
  v5 = *(_OWORD *)v3;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(v3 + 16);
  *(_OWORD *)v4 = v5;
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(v3 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(v3 + 28);
  result = *(double *)(v3 + 32);
  *(double *)(v4 + 32) = result;
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(v3 + 40);
  *(_QWORD *)(v4 + 44) = *(_QWORD *)(v3 + 44);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::JITInByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 56 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v7 = a3 - v5;
    WTF::Vector<JSC::JITInByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v7;
  }
  else
  {
    WTF::Vector<JSC::JITInByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::JITInByValGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(_DWORD *)(a1 + 12);
      v8 = 56 * v4;
      v9 = WTF::fastMalloc((WTF *)(56 * v4));
      *(_DWORD *)(a1 + 8) = v8 / 0x38;
      *(_QWORD *)a1 = v9;
      if (v7)
      {
        v17 = v6;
        do
        {
          v18 = *(_OWORD *)v17;
          *(_BYTE *)(v9 + 16) = *(_BYTE *)(v17 + 16);
          *(_OWORD *)v9 = v18;
          *(_DWORD *)(v9 + 20) = *(_DWORD *)(v17 + 20);
          *(_DWORD *)(v9 + 24) = *(_DWORD *)(v17 + 24);
          *(_DWORD *)(v9 + 28) = *(_DWORD *)(v17 + 28);
          *(_QWORD *)(v9 + 32) = *(_QWORD *)(v17 + 32);
          *(_DWORD *)(v9 + 40) = *(_DWORD *)(v17 + 40);
          *(_QWORD *)(v9 + 44) = *(_QWORD *)(v17 + 44);
          v17 += 56;
          v9 += 56;
        }
        while (v17 != v6 + 56 * v7);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

unsigned int *JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  int *v39;
  int *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int8x8_t v50;
  _DWORD *v51;
  unsigned int v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  unsigned int v64;
  _DWORD *v65;
  unsigned int v66;
  uint64_t v67;
  int i;
  unsigned int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  JSC::AssemblerBuffer *v80;
  int v81;
  unsigned int v82;
  char v83;
  uint64_t v84;
  int *v85;
  int *v86;
  int v87;
  uint64_t v88;
  int v90;
  int v91;
  int v92;
  int v93;
  char v94;
  __int16 v95;
  char v96;
  unsigned int v97[3];
  int v98;
  int v99;
  char v100;
  __int16 v101;
  char v102;
  int v103;
  unsigned int v104[2];
  char v105;
  __int16 v106;
  char v107;
  unsigned int v108[3];

  JSC::MacroAssemblerARM64::branch32(*a1, 1, 1, a2, a5, a6, a7, a8, (uint64_t)v97);
  v17 = a1[1];
  switch(a2)
  {
    case 0u:
    case 6u:
      v22 = *(_QWORD *)v17;
      v23 = *(_DWORD *)(*(_QWORD *)v17 + 200);
      if (v23 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v22 + 56), v10, v11, v12, v13, v14, v15, v16);
        v23 = *(_DWORD *)(v22 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v22 + 56) + v23) = -129989824;
      *(_DWORD *)(v22 + 200) += 4;
      if (a2 >= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FA7D8);
      }
      JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(*(uint64_t **)(v17 + 8), (a2 & 0x7F) == 6, 0, v12, v13, v14, v15, v16);
      v24 = *(_QWORD *)v17;
      v25 = *(_DWORD *)(*(_QWORD *)v17 + 200);
      if (v25 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v24 + 56), v10, v11, v12, v13, v14, v15, v16);
        v25 = *(_DWORD *)(v24 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v24 + 56) + v25) = -1203748795;
      *(_DWORD *)(v24 + 200) += 4;
      v26 = *(_QWORD *)v17;
      if (!*(_BYTE *)(*(_QWORD *)v17 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1987FA5E8);
      }
      v27 = *(_QWORD *)(v17 + 16);
      *(_DWORD *)(*(_QWORD *)(v26 + 296) + 208) &= ~*(_DWORD *)(v26 + 320);
      v28 = *(_BYTE *)(v26 + 304) & 0x1F | 0xB94C6800;
      v29 = *(_DWORD *)(v26 + 200);
      if (v29 + 4 > *(_DWORD *)(v26 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v29 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v29) = v28;
      v30 = *(_DWORD *)(v26 + 200);
      v31 = v30 + 4;
      *(_DWORD *)(v26 + 200) = v30 + 4;
      if ((v30 + 8) > *(_DWORD *)(v26 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v31 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v31) = 1795490367;
      v32 = *(_DWORD *)(v26 + 200) + 4;
      *(_DWORD *)(v26 + 200) = v32;
      if (*(_BYTE *)(v26 + 328))
      {
        while ((signed int)v32 < *(_DWORD *)(v26 + 52))
        {
          if (v32 + 4 > *(_DWORD *)(v26 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
            v32 = *(_DWORD *)(v26 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v26 + 56) + v32) = -721215457;
          v32 = *(_DWORD *)(v26 + 200) + 4;
          *(_DWORD *)(v26 + 200) = v32;
        }
        *(_DWORD *)(v26 + 208) = 0;
      }
      if (v32 + 4 > *(_DWORD *)(v26 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v32 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v32) = 1409286145;
      v33 = *(_DWORD *)(v26 + 200);
      v34 = v33 + 4;
      *(_DWORD *)(v26 + 200) = v33 + 4;
      v35 = v33 + 8;
      v36 = v33 + 4;
      if (v35 > *(_DWORD *)(v26 + 192))
      {
        v91 = v34;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v34 = v91;
        v36 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v36) = -721215457;
      *(_DWORD *)(v26 + 200) += 4;
      if (*(_BYTE *)(v26 + 328))
        v37 = -122;
      else
        v37 = -126;
      v98 = v34;
      v99 = 0;
      v100 = v37;
      v101 = 1;
      v102 = -1;
      if (v34 != -1)
      {
        v38 = *(unsigned int *)(v27 + 12);
        if ((_DWORD)v38 == *(_DWORD *)(v27 + 8))
        {
          v39 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27, (void *)(v38 + 1), (unint64_t)&v98, v12, v13, v14, v15, v16);
          v41 = *v39;
          v40 = v39 + 1;
          v34 = v41;
          LODWORD(v38) = *(_DWORD *)(v27 + 12);
        }
        else
        {
          v40 = &v99;
        }
        v77 = *(_QWORD *)v27 + 12 * v38;
        *(_DWORD *)v77 = v34;
        *(_QWORD *)(v77 + 4) = *(_QWORD *)v40;
        ++*(_DWORD *)(v27 + 12);
      }
      break;
    case 1u:
    case 2u:
    case 7u:
    case 8u:
      v18 = *(_QWORD *)v17;
      v19 = *(_DWORD *)(*(_QWORD *)v17 + 200);
      if (v19 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v18 + 56), v10, v11, v12, v13, v14, v15, v16);
        v19 = *(_DWORD *)(v18 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v18 + 56) + v19) = -129989824;
      *(_DWORD *)(v18 + 200) += 4;
      if (a2 - 1 >= 8)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FA76CLL);
      }
      JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(*(uint64_t **)(v17 + 8), (0xE0u >> (a2 - 1)) & 1, 0, v12, v13, v14, v15, v16);
      if (a2 == 8 || a2 == 2)
      {
        v20 = *(_QWORD *)v17;
        v21 = *(_DWORD *)(*(_QWORD *)v17 + 200);
        if (v21 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 + 56), v10, v11, v12, v13, v14, v15, v16);
          v21 = *(_DWORD *)(v20 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v20 + 56) + v21) = -129728512;
        *(_DWORD *)(v20 + 200) += 4;
      }
      break;
    case 3u:
    case 9u:
      if (a2 - 3 >= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FA7F8);
      }
      v42 = *(_QWORD *)(v17 + 24);
      JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(*(uint64_t **)v42, (0x78u >> (a2 - 3)) & 1, 0xFFFFFFFFLL, v12, v13, v14, v15, v16);
      v51 = *(_DWORD **)(v42 + 8);
      v52 = v51[50];
      if (v52 + 4 > v51[48])
      {
        v50 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v51 + 14), v43, v44, v45, v46, v47, v48, v49).n128_u64[0];
        v52 = v51[50];
      }
      *(_DWORD *)(*((_QWORD *)v51 + 7) + v52) = -1203748795;
      v51[50] += 4;
      v53 = *(_DWORD **)(v42 + 8);
      v54 = v53[50];
      if (v54 < v53[13])
      {
        do
        {
          if ((v54 + 4) > v53[48])
          {
            v50 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 + 14), v43, v44, v45, v46, v47, v48, v49).n128_u64[0];
            v54 = v53[50];
          }
          *(_DWORD *)(*((_QWORD *)v53 + 7) + v54) = -721215457;
          v54 = v53[50] + 4;
          v53[50] = v54;
        }
        while (v54 < v53[13]);
        v55 = *(_QWORD *)(v42 + 8);
      }
      else
      {
        v55 = *(_QWORD *)(v42 + 8);
      }
      v53[52] = 0;
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v55, 0, 5, v46, v47, v48, v49, (uint64_t)v108, v50);
      v63 = *(_DWORD **)(v42 + 8);
      v64 = v63[50];
      if (v64 + 4 > v63[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v63 + 14), v56, v57, v58, v59, v60, v61, v62);
        v64 = v63[50];
      }
      *(_DWORD *)(*((_QWORD *)v63 + 7) + v64) = -129957888;
      v63[50] += 4;
      v65 = *(_DWORD **)(v42 + 8);
      v66 = v65[50];
      if (v66 + 4 > v65[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v65 + 14), v56, v57, v58, v59, v60, v61, v62);
        v66 = v65[50];
      }
      *(_DWORD *)(*((_QWORD *)v65 + 7) + v66) = 1358955685;
      v65[50] += 4;
      v67 = *(_QWORD *)(v42 + 8);
      for (i = *(_DWORD *)(v67 + 200); i < *(_DWORD *)(v67 + 52); *(_DWORD *)(v67 + 200) = i)
      {
        if ((i + 4) > *(_DWORD *)(v67 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v67 + 56), v56, v57, v58, v59, v60, v61, v62);
          i = *(_DWORD *)(v67 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v67 + 56) + i) = -721215457;
        i = *(_DWORD *)(v67 + 200) + 4;
      }
      v69 = i;
      if ((i + 4) > *(_DWORD *)(v67 + 192))
      {
        v90 = i;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v67 + 56), v56, v57, v58, v59, v60, v61, v62);
        i = v90;
        v69 = *(_DWORD *)(v67 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v67 + 56) + v69) = 335544320;
      *(_DWORD *)(v67 + 200) += 4;
      if (*(_BYTE *)(v67 + 328))
        v70 = 69;
      else
        v70 = 65;
      v104[0] = i;
      v104[1] = 0;
      v105 = v70;
      v106 = 15;
      v107 = -1;
      v103 = v54;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v104, (unsigned int *)&v103, *(_QWORD *)(v42 + 8), v58, v59, v60, v61, v62);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v108, *(_QWORD *)(v42 + 8), v71, v72, v73, v74, v75, v76);
      break;
    case 4u:
    case 5u:
    case 0xAu:
    case 0xBu:
      __break(0xC471u);
      JUMPOUT(0x1987FA74CLL);
    default:
      break;
  }
  v78 = a1[2];
  v79 = *a1;
  v80 = (JSC::AssemblerBuffer *)(*a1 + 56);
  v81 = *(_DWORD *)(*a1 + 200);
  if (v81 < *(_DWORD *)(*a1 + 52))
  {
    do
    {
      if ((v81 + 4) > *(_DWORD *)(v79 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v80, v10, v11, v12, v13, v14, v15, v16);
        v81 = *(_DWORD *)(v79 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v79 + 56) + v81) = -721215457;
      v81 = *(_DWORD *)(v79 + 200) + 4;
      *(_DWORD *)(v79 + 200) = v81;
    }
    while (v81 < *(_DWORD *)(v79 + 52));
  }
  v82 = v81;
  if ((v81 + 4) > *(_DWORD *)(v79 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v80, v10, v11, v12, v13, v14, v15, v16);
    v82 = *(_DWORD *)(v79 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v79 + 56) + v82) = 335544320;
  *(_DWORD *)(v79 + 200) += 4;
  if (*(_BYTE *)(v79 + 328))
    v83 = 69;
  else
    v83 = 65;
  v92 = v81;
  v93 = 0;
  v94 = v83;
  v95 = 15;
  v96 = -1;
  if (v81 != -1)
  {
    v84 = *(unsigned int *)(v78 + 12);
    if ((_DWORD)v84 == *(_DWORD *)(v78 + 8))
    {
      v85 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v78, (void *)(v84 + 1), (unint64_t)&v92, v12, v13, v14, v15, v16);
      v87 = *v85;
      v86 = v85 + 1;
      v88 = *(_QWORD *)v78 + 12 * *(unsigned int *)(v78 + 12);
      *(_DWORD *)v88 = v87;
    }
    else
    {
      v86 = &v93;
      v88 = *(_QWORD *)v78 + 12 * v84;
      *(_DWORD *)v88 = v81;
    }
    *(_QWORD *)(v88 + 4) = *(_QWORD *)v86;
    ++*(_DWORD *)(v78 + 12);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v97, *a1, v11, v12, v13, v14, v15, v16);
}

void JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  if ((_DWORD)a2)
  {
    if ((_DWORD)a3 == -1)
    {
      v10 = *a1;
      v11 = *(_DWORD *)(*a1 + 200);
      if (v11 + 4 > *(_DWORD *)(*a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 + 56), a2, a3, a4, a5, a6, a7, a8);
        v11 = *(_DWORD *)(v10 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v10 + 56) + v11) = -129989819;
      *(_DWORD *)(v10 + 200) += 4;
      v9 = 0x80800000005;
    }
    else
    {
      v9 = 0x80800000000;
    }
    JSC::MacroAssemblerARM64::load64(*a1, v9, 5, a4, a5, a6, a7, a8);
    v19 = *a1;
    if (!*(_BYTE *)(*a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1987FA9A4);
    }
    v20 = a1[1];
    *(_DWORD *)(*(_QWORD *)(v19 + 296) + 208) &= ~*(_DWORD *)(v19 + 320);
    v21 = *(_BYTE *)(v19 + 304) & 0x1F | 0x384040A0;
    v22 = *(_DWORD *)(v19 + 200);
    if (v22 + 4 > *(_DWORD *)(v19 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v19 + 56), v12, v13, v14, v15, v16, v17, v18);
      v22 = *(_DWORD *)(v19 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v19 + 56) + v22) = v21;
    *(_DWORD *)(v19 + 200) += 4;
    JSC::MacroAssemblerARM64::branch32(v19, 0, 17, 2, v15, v16, v17, v18, (uint64_t)&v34);
    v28 = v34;
    if (v34 != -1)
    {
      v29 = *(unsigned int *)(v20 + 12);
      if ((_DWORD)v29 == *(_DWORD *)(v20 + 8))
      {
        v30 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v20, (void *)(v29 + 1), (unint64_t)&v34, v23, v24, v25, v26, v27);
        v32 = *v30;
        v31 = (uint64_t *)(v30 + 1);
        v28 = v32;
        LODWORD(v29) = *(_DWORD *)(v20 + 12);
      }
      else
      {
        v31 = &v35;
      }
      v33 = *(_QWORD *)v20 + 12 * v29;
      *(_DWORD *)v33 = v28;
      *(_QWORD *)(v33 + 4) = *v31;
      ++*(_DWORD *)(v20 + 12);
    }
  }
}

unsigned int *JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)6>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  int *v39;
  int *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int8x8_t v50;
  _DWORD *v51;
  unsigned int v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  unsigned int v64;
  _DWORD *v65;
  unsigned int v66;
  uint64_t v67;
  int i;
  unsigned int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  JSC::AssemblerBuffer *v80;
  int v81;
  unsigned int v82;
  char v83;
  uint64_t v84;
  int *v85;
  int *v86;
  int v87;
  uint64_t v88;
  int v90;
  int v91;
  int v92;
  int v93;
  char v94;
  __int16 v95;
  char v96;
  unsigned int v97[3];
  int v98;
  int v99;
  char v100;
  __int16 v101;
  char v102;
  int v103;
  unsigned int v104[2];
  char v105;
  __int16 v106;
  char v107;
  unsigned int v108[3];

  JSC::MacroAssemblerARM64::branch32(*a1, 1, 1, a2, a5, a6, a7, a8, (uint64_t)v97);
  v17 = a1[1];
  switch(a2)
  {
    case 0u:
    case 6u:
      v22 = *(_QWORD *)v17;
      v23 = *(_DWORD *)(*(_QWORD *)v17 + 200);
      if (v23 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v22 + 56), v10, v11, v12, v13, v14, v15, v16);
        v23 = *(_DWORD *)(v22 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v22 + 56) + v23) = -129989824;
      *(_DWORD *)(v22 + 200) += 4;
      if (a2 >= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FB200);
      }
      JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(*(uint64_t **)(v17 + 8), (a2 & 0x7F) == 6, 0, v12, v13, v14, v15, v16);
      v24 = *(_QWORD *)v17;
      v25 = *(_DWORD *)(*(_QWORD *)v17 + 200);
      if (v25 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v24 + 56), v10, v11, v12, v13, v14, v15, v16);
        v25 = *(_DWORD *)(v24 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v24 + 56) + v25) = -1203748795;
      *(_DWORD *)(v24 + 200) += 4;
      v26 = *(_QWORD *)v17;
      if (!*(_BYTE *)(*(_QWORD *)v17 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1987FB010);
      }
      v27 = *(_QWORD *)(v17 + 16);
      *(_DWORD *)(*(_QWORD *)(v26 + 296) + 208) &= ~*(_DWORD *)(v26 + 320);
      v28 = *(_BYTE *)(v26 + 304) & 0x1F | 0xB94C6800;
      v29 = *(_DWORD *)(v26 + 200);
      if (v29 + 4 > *(_DWORD *)(v26 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v29 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v29) = v28;
      v30 = *(_DWORD *)(v26 + 200);
      v31 = v30 + 4;
      *(_DWORD *)(v26 + 200) = v30 + 4;
      if ((v30 + 8) > *(_DWORD *)(v26 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v31 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v31) = 1795490367;
      v32 = *(_DWORD *)(v26 + 200) + 4;
      *(_DWORD *)(v26 + 200) = v32;
      if (*(_BYTE *)(v26 + 328))
      {
        while ((signed int)v32 < *(_DWORD *)(v26 + 52))
        {
          if (v32 + 4 > *(_DWORD *)(v26 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
            v32 = *(_DWORD *)(v26 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v26 + 56) + v32) = -721215457;
          v32 = *(_DWORD *)(v26 + 200) + 4;
          *(_DWORD *)(v26 + 200) = v32;
        }
        *(_DWORD *)(v26 + 208) = 0;
      }
      if (v32 + 4 > *(_DWORD *)(v26 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v32 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v32) = 1409286145;
      v33 = *(_DWORD *)(v26 + 200);
      v34 = v33 + 4;
      *(_DWORD *)(v26 + 200) = v33 + 4;
      v35 = v33 + 8;
      v36 = v33 + 4;
      if (v35 > *(_DWORD *)(v26 + 192))
      {
        v91 = v34;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v34 = v91;
        v36 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v36) = -721215457;
      *(_DWORD *)(v26 + 200) += 4;
      if (*(_BYTE *)(v26 + 328))
        v37 = -122;
      else
        v37 = -126;
      v98 = v34;
      v99 = 0;
      v100 = v37;
      v101 = 1;
      v102 = -1;
      if (v34 != -1)
      {
        v38 = *(unsigned int *)(v27 + 12);
        if ((_DWORD)v38 == *(_DWORD *)(v27 + 8))
        {
          v39 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27, (void *)(v38 + 1), (unint64_t)&v98, v12, v13, v14, v15, v16);
          v41 = *v39;
          v40 = v39 + 1;
          v34 = v41;
          LODWORD(v38) = *(_DWORD *)(v27 + 12);
        }
        else
        {
          v40 = &v99;
        }
        v77 = *(_QWORD *)v27 + 12 * v38;
        *(_DWORD *)v77 = v34;
        *(_QWORD *)(v77 + 4) = *(_QWORD *)v40;
        ++*(_DWORD *)(v27 + 12);
      }
      break;
    case 1u:
    case 2u:
    case 7u:
    case 8u:
      v18 = *(_QWORD *)v17;
      v19 = *(_DWORD *)(*(_QWORD *)v17 + 200);
      if (v19 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v18 + 56), v10, v11, v12, v13, v14, v15, v16);
        v19 = *(_DWORD *)(v18 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v18 + 56) + v19) = -129989824;
      *(_DWORD *)(v18 + 200) += 4;
      if (a2 - 1 >= 8)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FB194);
      }
      JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(*(uint64_t **)(v17 + 8), (0xE0u >> (a2 - 1)) & 1, 0, v12, v13, v14, v15, v16);
      if (a2 == 8 || a2 == 2)
      {
        v20 = *(_QWORD *)v17;
        v21 = *(_DWORD *)(*(_QWORD *)v17 + 200);
        if (v21 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 + 56), v10, v11, v12, v13, v14, v15, v16);
          v21 = *(_DWORD *)(v20 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v20 + 56) + v21) = -129728512;
        *(_DWORD *)(v20 + 200) += 4;
      }
      break;
    case 3u:
    case 9u:
      if (a2 - 3 >= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FB220);
      }
      v42 = *(_QWORD *)(v17 + 24);
      JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(*(uint64_t **)v42, (0x78u >> (a2 - 3)) & 1, 0xFFFFFFFFLL, v12, v13, v14, v15, v16);
      v51 = *(_DWORD **)(v42 + 8);
      v52 = v51[50];
      if (v52 + 4 > v51[48])
      {
        v50 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v51 + 14), v43, v44, v45, v46, v47, v48, v49).n128_u64[0];
        v52 = v51[50];
      }
      *(_DWORD *)(*((_QWORD *)v51 + 7) + v52) = -1203748795;
      v51[50] += 4;
      v53 = *(_DWORD **)(v42 + 8);
      v54 = v53[50];
      if (v54 < v53[13])
      {
        do
        {
          if ((v54 + 4) > v53[48])
          {
            v50 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 + 14), v43, v44, v45, v46, v47, v48, v49).n128_u64[0];
            v54 = v53[50];
          }
          *(_DWORD *)(*((_QWORD *)v53 + 7) + v54) = -721215457;
          v54 = v53[50] + 4;
          v53[50] = v54;
        }
        while (v54 < v53[13]);
        v55 = *(_QWORD *)(v42 + 8);
      }
      else
      {
        v55 = *(_QWORD *)(v42 + 8);
      }
      v53[52] = 0;
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v55, 0, 5, v46, v47, v48, v49, (uint64_t)v108, v50);
      v63 = *(_DWORD **)(v42 + 8);
      v64 = v63[50];
      if (v64 + 4 > v63[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v63 + 14), v56, v57, v58, v59, v60, v61, v62);
        v64 = v63[50];
      }
      *(_DWORD *)(*((_QWORD *)v63 + 7) + v64) = -129957888;
      v63[50] += 4;
      v65 = *(_DWORD **)(v42 + 8);
      v66 = v65[50];
      if (v66 + 4 > v65[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v65 + 14), v56, v57, v58, v59, v60, v61, v62);
        v66 = v65[50];
      }
      *(_DWORD *)(*((_QWORD *)v65 + 7) + v66) = 1358955685;
      v65[50] += 4;
      v67 = *(_QWORD *)(v42 + 8);
      for (i = *(_DWORD *)(v67 + 200); i < *(_DWORD *)(v67 + 52); *(_DWORD *)(v67 + 200) = i)
      {
        if ((i + 4) > *(_DWORD *)(v67 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v67 + 56), v56, v57, v58, v59, v60, v61, v62);
          i = *(_DWORD *)(v67 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v67 + 56) + i) = -721215457;
        i = *(_DWORD *)(v67 + 200) + 4;
      }
      v69 = i;
      if ((i + 4) > *(_DWORD *)(v67 + 192))
      {
        v90 = i;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v67 + 56), v56, v57, v58, v59, v60, v61, v62);
        i = v90;
        v69 = *(_DWORD *)(v67 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v67 + 56) + v69) = 335544320;
      *(_DWORD *)(v67 + 200) += 4;
      if (*(_BYTE *)(v67 + 328))
        v70 = 69;
      else
        v70 = 65;
      v104[0] = i;
      v104[1] = 0;
      v105 = v70;
      v106 = 15;
      v107 = -1;
      v103 = v54;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v104, (unsigned int *)&v103, *(_QWORD *)(v42 + 8), v58, v59, v60, v61, v62);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v108, *(_QWORD *)(v42 + 8), v71, v72, v73, v74, v75, v76);
      break;
    case 4u:
    case 5u:
    case 0xAu:
    case 0xBu:
      __break(0xC471u);
      JUMPOUT(0x1987FB174);
    default:
      break;
  }
  v78 = a1[2];
  v79 = *a1;
  v80 = (JSC::AssemblerBuffer *)(*a1 + 56);
  v81 = *(_DWORD *)(*a1 + 200);
  if (v81 < *(_DWORD *)(*a1 + 52))
  {
    do
    {
      if ((v81 + 4) > *(_DWORD *)(v79 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v80, v10, v11, v12, v13, v14, v15, v16);
        v81 = *(_DWORD *)(v79 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v79 + 56) + v81) = -721215457;
      v81 = *(_DWORD *)(v79 + 200) + 4;
      *(_DWORD *)(v79 + 200) = v81;
    }
    while (v81 < *(_DWORD *)(v79 + 52));
  }
  v82 = v81;
  if ((v81 + 4) > *(_DWORD *)(v79 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v80, v10, v11, v12, v13, v14, v15, v16);
    v82 = *(_DWORD *)(v79 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v79 + 56) + v82) = 335544320;
  *(_DWORD *)(v79 + 200) += 4;
  if (*(_BYTE *)(v79 + 328))
    v83 = 69;
  else
    v83 = 65;
  v92 = v81;
  v93 = 0;
  v94 = v83;
  v95 = 15;
  v96 = -1;
  if (v81 != -1)
  {
    v84 = *(unsigned int *)(v78 + 12);
    if ((_DWORD)v84 == *(_DWORD *)(v78 + 8))
    {
      v85 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v78, (void *)(v84 + 1), (unint64_t)&v92, v12, v13, v14, v15, v16);
      v87 = *v85;
      v86 = v85 + 1;
      v88 = *(_QWORD *)v78 + 12 * *(unsigned int *)(v78 + 12);
      *(_DWORD *)v88 = v87;
    }
    else
    {
      v86 = &v93;
      v88 = *(_QWORD *)v78 + 12 * v84;
      *(_DWORD *)v88 = v81;
    }
    *(_QWORD *)(v88 + 4) = *(_QWORD *)v86;
    ++*(_DWORD *)(v78 + 12);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v97, *a1, v11, v12, v13, v14, v15, v16);
}

unsigned int *JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)8>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  int *v39;
  int *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int8x8_t v50;
  _DWORD *v51;
  unsigned int v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  unsigned int v64;
  _DWORD *v65;
  unsigned int v66;
  uint64_t v67;
  int i;
  unsigned int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  JSC::AssemblerBuffer *v80;
  int v81;
  unsigned int v82;
  char v83;
  uint64_t v84;
  int *v85;
  int *v86;
  int v87;
  uint64_t v88;
  int v90;
  int v91;
  int v92;
  int v93;
  char v94;
  __int16 v95;
  char v96;
  unsigned int v97[3];
  int v98;
  int v99;
  char v100;
  __int16 v101;
  char v102;
  int v103;
  unsigned int v104[2];
  char v105;
  __int16 v106;
  char v107;
  unsigned int v108[3];

  JSC::MacroAssemblerARM64::branch32(*a1, 1, 1, a2, a5, a6, a7, a8, (uint64_t)v97);
  v17 = a1[1];
  switch(a2)
  {
    case 0u:
    case 6u:
      v22 = *(_QWORD *)v17;
      v23 = *(_DWORD *)(*(_QWORD *)v17 + 200);
      if (v23 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v22 + 56), v10, v11, v12, v13, v14, v15, v16);
        v23 = *(_DWORD *)(v22 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v22 + 56) + v23) = -129989824;
      *(_DWORD *)(v22 + 200) += 4;
      if (a2 >= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FBA8CLL);
      }
      JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(*(uint64_t **)(v17 + 8), (a2 & 0x7F) == 6, 0, v12, v13, v14, v15, v16);
      v24 = *(_QWORD *)v17;
      v25 = *(_DWORD *)(*(_QWORD *)v17 + 200);
      if (v25 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v24 + 56), v10, v11, v12, v13, v14, v15, v16);
        v25 = *(_DWORD *)(v24 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v24 + 56) + v25) = -1203748795;
      *(_DWORD *)(v24 + 200) += 4;
      v26 = *(_QWORD *)v17;
      if (!*(_BYTE *)(*(_QWORD *)v17 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1987FB89CLL);
      }
      v27 = *(_QWORD *)(v17 + 16);
      *(_DWORD *)(*(_QWORD *)(v26 + 296) + 208) &= ~*(_DWORD *)(v26 + 320);
      v28 = *(_BYTE *)(v26 + 304) & 0x1F | 0xB94C6800;
      v29 = *(_DWORD *)(v26 + 200);
      if (v29 + 4 > *(_DWORD *)(v26 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v29 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v29) = v28;
      v30 = *(_DWORD *)(v26 + 200);
      v31 = v30 + 4;
      *(_DWORD *)(v26 + 200) = v30 + 4;
      if ((v30 + 8) > *(_DWORD *)(v26 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v31 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v31) = 1795490367;
      v32 = *(_DWORD *)(v26 + 200) + 4;
      *(_DWORD *)(v26 + 200) = v32;
      if (*(_BYTE *)(v26 + 328))
      {
        while ((signed int)v32 < *(_DWORD *)(v26 + 52))
        {
          if (v32 + 4 > *(_DWORD *)(v26 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
            v32 = *(_DWORD *)(v26 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v26 + 56) + v32) = -721215457;
          v32 = *(_DWORD *)(v26 + 200) + 4;
          *(_DWORD *)(v26 + 200) = v32;
        }
        *(_DWORD *)(v26 + 208) = 0;
      }
      if (v32 + 4 > *(_DWORD *)(v26 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v32 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v32) = 1409286145;
      v33 = *(_DWORD *)(v26 + 200);
      v34 = v33 + 4;
      *(_DWORD *)(v26 + 200) = v33 + 4;
      v35 = v33 + 8;
      v36 = v33 + 4;
      if (v35 > *(_DWORD *)(v26 + 192))
      {
        v91 = v34;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v34 = v91;
        v36 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v36) = -721215457;
      *(_DWORD *)(v26 + 200) += 4;
      if (*(_BYTE *)(v26 + 328))
        v37 = -122;
      else
        v37 = -126;
      v98 = v34;
      v99 = 0;
      v100 = v37;
      v101 = 1;
      v102 = -1;
      if (v34 != -1)
      {
        v38 = *(unsigned int *)(v27 + 12);
        if ((_DWORD)v38 == *(_DWORD *)(v27 + 8))
        {
          v39 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27, (void *)(v38 + 1), (unint64_t)&v98, v12, v13, v14, v15, v16);
          v41 = *v39;
          v40 = v39 + 1;
          v34 = v41;
          LODWORD(v38) = *(_DWORD *)(v27 + 12);
        }
        else
        {
          v40 = &v99;
        }
        v77 = *(_QWORD *)v27 + 12 * v38;
        *(_DWORD *)v77 = v34;
        *(_QWORD *)(v77 + 4) = *(_QWORD *)v40;
        ++*(_DWORD *)(v27 + 12);
      }
      break;
    case 1u:
    case 2u:
    case 7u:
    case 8u:
      v18 = *(_QWORD *)v17;
      v19 = *(_DWORD *)(*(_QWORD *)v17 + 200);
      if (v19 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v18 + 56), v10, v11, v12, v13, v14, v15, v16);
        v19 = *(_DWORD *)(v18 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v18 + 56) + v19) = -129989824;
      *(_DWORD *)(v18 + 200) += 4;
      if (a2 - 1 >= 8)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FBA20);
      }
      JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(*(uint64_t **)(v17 + 8), (0xE0u >> (a2 - 1)) & 1, 0, v12, v13, v14, v15, v16);
      if (a2 == 8 || a2 == 2)
      {
        v20 = *(_QWORD *)v17;
        v21 = *(_DWORD *)(*(_QWORD *)v17 + 200);
        if (v21 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 + 56), v10, v11, v12, v13, v14, v15, v16);
          v21 = *(_DWORD *)(v20 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v20 + 56) + v21) = -129728512;
        *(_DWORD *)(v20 + 200) += 4;
      }
      break;
    case 3u:
    case 9u:
      if (a2 - 3 >= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FBAACLL);
      }
      v42 = *(_QWORD *)(v17 + 24);
      JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(*(uint64_t **)v42, (0x78u >> (a2 - 3)) & 1, 0xFFFFFFFFLL, v12, v13, v14, v15, v16);
      v51 = *(_DWORD **)(v42 + 8);
      v52 = v51[50];
      if (v52 + 4 > v51[48])
      {
        v50 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v51 + 14), v43, v44, v45, v46, v47, v48, v49).n128_u64[0];
        v52 = v51[50];
      }
      *(_DWORD *)(*((_QWORD *)v51 + 7) + v52) = -1203748795;
      v51[50] += 4;
      v53 = *(_DWORD **)(v42 + 8);
      v54 = v53[50];
      if (v54 < v53[13])
      {
        do
        {
          if ((v54 + 4) > v53[48])
          {
            v50 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 + 14), v43, v44, v45, v46, v47, v48, v49).n128_u64[0];
            v54 = v53[50];
          }
          *(_DWORD *)(*((_QWORD *)v53 + 7) + v54) = -721215457;
          v54 = v53[50] + 4;
          v53[50] = v54;
        }
        while (v54 < v53[13]);
        v55 = *(_QWORD *)(v42 + 8);
      }
      else
      {
        v55 = *(_QWORD *)(v42 + 8);
      }
      v53[52] = 0;
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v55, 0, 5, v46, v47, v48, v49, (uint64_t)v108, v50);
      v63 = *(_DWORD **)(v42 + 8);
      v64 = v63[50];
      if (v64 + 4 > v63[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v63 + 14), v56, v57, v58, v59, v60, v61, v62);
        v64 = v63[50];
      }
      *(_DWORD *)(*((_QWORD *)v63 + 7) + v64) = -129957888;
      v63[50] += 4;
      v65 = *(_DWORD **)(v42 + 8);
      v66 = v65[50];
      if (v66 + 4 > v65[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v65 + 14), v56, v57, v58, v59, v60, v61, v62);
        v66 = v65[50];
      }
      *(_DWORD *)(*((_QWORD *)v65 + 7) + v66) = 1358955685;
      v65[50] += 4;
      v67 = *(_QWORD *)(v42 + 8);
      for (i = *(_DWORD *)(v67 + 200); i < *(_DWORD *)(v67 + 52); *(_DWORD *)(v67 + 200) = i)
      {
        if ((i + 4) > *(_DWORD *)(v67 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v67 + 56), v56, v57, v58, v59, v60, v61, v62);
          i = *(_DWORD *)(v67 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v67 + 56) + i) = -721215457;
        i = *(_DWORD *)(v67 + 200) + 4;
      }
      v69 = i;
      if ((i + 4) > *(_DWORD *)(v67 + 192))
      {
        v90 = i;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v67 + 56), v56, v57, v58, v59, v60, v61, v62);
        i = v90;
        v69 = *(_DWORD *)(v67 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v67 + 56) + v69) = 335544320;
      *(_DWORD *)(v67 + 200) += 4;
      if (*(_BYTE *)(v67 + 328))
        v70 = 69;
      else
        v70 = 65;
      v104[0] = i;
      v104[1] = 0;
      v105 = v70;
      v106 = 15;
      v107 = -1;
      v103 = v54;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v104, (unsigned int *)&v103, *(_QWORD *)(v42 + 8), v58, v59, v60, v61, v62);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v108, *(_QWORD *)(v42 + 8), v71, v72, v73, v74, v75, v76);
      break;
    case 4u:
    case 5u:
    case 0xAu:
    case 0xBu:
      __break(0xC471u);
      JUMPOUT(0x1987FBA00);
    default:
      break;
  }
  v78 = a1[2];
  v79 = *a1;
  v80 = (JSC::AssemblerBuffer *)(*a1 + 56);
  v81 = *(_DWORD *)(*a1 + 200);
  if (v81 < *(_DWORD *)(*a1 + 52))
  {
    do
    {
      if ((v81 + 4) > *(_DWORD *)(v79 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v80, v10, v11, v12, v13, v14, v15, v16);
        v81 = *(_DWORD *)(v79 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v79 + 56) + v81) = -721215457;
      v81 = *(_DWORD *)(v79 + 200) + 4;
      *(_DWORD *)(v79 + 200) = v81;
    }
    while (v81 < *(_DWORD *)(v79 + 52));
  }
  v82 = v81;
  if ((v81 + 4) > *(_DWORD *)(v79 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v80, v10, v11, v12, v13, v14, v15, v16);
    v82 = *(_DWORD *)(v79 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v79 + 56) + v82) = 335544320;
  *(_DWORD *)(v79 + 200) += 4;
  if (*(_BYTE *)(v79 + 328))
    v83 = 69;
  else
    v83 = 65;
  v92 = v81;
  v93 = 0;
  v94 = v83;
  v95 = 15;
  v96 = -1;
  if (v81 != -1)
  {
    v84 = *(unsigned int *)(v78 + 12);
    if ((_DWORD)v84 == *(_DWORD *)(v78 + 8))
    {
      v85 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v78, (void *)(v84 + 1), (unint64_t)&v92, v12, v13, v14, v15, v16);
      v87 = *v85;
      v86 = v85 + 1;
      v88 = *(_QWORD *)v78 + 12 * *(unsigned int *)(v78 + 12);
      *(_DWORD *)v88 = v87;
    }
    else
    {
      v86 = &v93;
      v88 = *(_QWORD *)v78 + 12 * v84;
      *(_DWORD *)v88 = v81;
    }
    *(_QWORD *)(v88 + 4) = *(_QWORD *)v86;
    ++*(_DWORD *)(v78 + 12);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v97, *a1, v11, v12, v13, v14, v15, v16);
}

unsigned int *JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)1>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  int *v39;
  int *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int8x8_t v50;
  _DWORD *v51;
  unsigned int v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  unsigned int v64;
  _DWORD *v65;
  unsigned int v66;
  uint64_t v67;
  int i;
  unsigned int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  JSC::AssemblerBuffer *v80;
  int v81;
  unsigned int v82;
  char v83;
  uint64_t v84;
  int *v85;
  int *v86;
  int v87;
  uint64_t v88;
  int v90;
  int v91;
  int v92;
  int v93;
  char v94;
  __int16 v95;
  char v96;
  unsigned int v97[3];
  int v98;
  int v99;
  char v100;
  __int16 v101;
  char v102;
  int v103;
  unsigned int v104[2];
  char v105;
  __int16 v106;
  char v107;
  unsigned int v108[3];

  JSC::MacroAssemblerARM64::branch32(*a1, 1, 1, a2, a5, a6, a7, a8, (uint64_t)v97);
  v17 = a1[1];
  switch(a2)
  {
    case 0u:
    case 6u:
      v22 = *(_QWORD *)v17;
      v23 = *(_DWORD *)(*(_QWORD *)v17 + 200);
      if (v23 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v22 + 56), v10, v11, v12, v13, v14, v15, v16);
        v23 = *(_DWORD *)(v22 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v22 + 56) + v23) = -129989824;
      *(_DWORD *)(v22 + 200) += 4;
      if (a2 >= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FC318);
      }
      JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(*(uint64_t **)(v17 + 8), (a2 & 0x7F) == 6, 0, v12, v13, v14, v15, v16);
      v24 = *(_QWORD *)v17;
      v25 = *(_DWORD *)(*(_QWORD *)v17 + 200);
      if (v25 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v24 + 56), v10, v11, v12, v13, v14, v15, v16);
        v25 = *(_DWORD *)(v24 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v24 + 56) + v25) = -1203748795;
      *(_DWORD *)(v24 + 200) += 4;
      v26 = *(_QWORD *)v17;
      if (!*(_BYTE *)(*(_QWORD *)v17 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1987FC128);
      }
      v27 = *(_QWORD *)(v17 + 16);
      *(_DWORD *)(*(_QWORD *)(v26 + 296) + 208) &= ~*(_DWORD *)(v26 + 320);
      v28 = *(_BYTE *)(v26 + 304) & 0x1F | 0xB94C6800;
      v29 = *(_DWORD *)(v26 + 200);
      if (v29 + 4 > *(_DWORD *)(v26 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v29 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v29) = v28;
      v30 = *(_DWORD *)(v26 + 200);
      v31 = v30 + 4;
      *(_DWORD *)(v26 + 200) = v30 + 4;
      if ((v30 + 8) > *(_DWORD *)(v26 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v31 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v31) = 1795490367;
      v32 = *(_DWORD *)(v26 + 200) + 4;
      *(_DWORD *)(v26 + 200) = v32;
      if (*(_BYTE *)(v26 + 328))
      {
        while ((signed int)v32 < *(_DWORD *)(v26 + 52))
        {
          if (v32 + 4 > *(_DWORD *)(v26 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
            v32 = *(_DWORD *)(v26 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v26 + 56) + v32) = -721215457;
          v32 = *(_DWORD *)(v26 + 200) + 4;
          *(_DWORD *)(v26 + 200) = v32;
        }
        *(_DWORD *)(v26 + 208) = 0;
      }
      if (v32 + 4 > *(_DWORD *)(v26 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v32 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v32) = 1409286145;
      v33 = *(_DWORD *)(v26 + 200);
      v34 = v33 + 4;
      *(_DWORD *)(v26 + 200) = v33 + 4;
      v35 = v33 + 8;
      v36 = v33 + 4;
      if (v35 > *(_DWORD *)(v26 + 192))
      {
        v91 = v34;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v34 = v91;
        v36 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v36) = -721215457;
      *(_DWORD *)(v26 + 200) += 4;
      if (*(_BYTE *)(v26 + 328))
        v37 = -122;
      else
        v37 = -126;
      v98 = v34;
      v99 = 0;
      v100 = v37;
      v101 = 1;
      v102 = -1;
      if (v34 != -1)
      {
        v38 = *(unsigned int *)(v27 + 12);
        if ((_DWORD)v38 == *(_DWORD *)(v27 + 8))
        {
          v39 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27, (void *)(v38 + 1), (unint64_t)&v98, v12, v13, v14, v15, v16);
          v41 = *v39;
          v40 = v39 + 1;
          v34 = v41;
          LODWORD(v38) = *(_DWORD *)(v27 + 12);
        }
        else
        {
          v40 = &v99;
        }
        v77 = *(_QWORD *)v27 + 12 * v38;
        *(_DWORD *)v77 = v34;
        *(_QWORD *)(v77 + 4) = *(_QWORD *)v40;
        ++*(_DWORD *)(v27 + 12);
      }
      break;
    case 1u:
    case 2u:
    case 7u:
    case 8u:
      v18 = *(_QWORD *)v17;
      v19 = *(_DWORD *)(*(_QWORD *)v17 + 200);
      if (v19 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v18 + 56), v10, v11, v12, v13, v14, v15, v16);
        v19 = *(_DWORD *)(v18 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v18 + 56) + v19) = -129989824;
      *(_DWORD *)(v18 + 200) += 4;
      if (a2 - 1 >= 8)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FC2ACLL);
      }
      JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(*(uint64_t **)(v17 + 8), (0xE0u >> (a2 - 1)) & 1, 0, v12, v13, v14, v15, v16);
      if (a2 == 8 || a2 == 2)
      {
        v20 = *(_QWORD *)v17;
        v21 = *(_DWORD *)(*(_QWORD *)v17 + 200);
        if (v21 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 + 56), v10, v11, v12, v13, v14, v15, v16);
          v21 = *(_DWORD *)(v20 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v20 + 56) + v21) = -129728512;
        *(_DWORD *)(v20 + 200) += 4;
      }
      break;
    case 3u:
    case 9u:
      if (a2 - 3 >= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FC338);
      }
      v42 = *(_QWORD *)(v17 + 24);
      JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(*(uint64_t **)v42, (0x78u >> (a2 - 3)) & 1, 0xFFFFFFFFLL, v12, v13, v14, v15, v16);
      v51 = *(_DWORD **)(v42 + 8);
      v52 = v51[50];
      if (v52 + 4 > v51[48])
      {
        v50 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v51 + 14), v43, v44, v45, v46, v47, v48, v49).n128_u64[0];
        v52 = v51[50];
      }
      *(_DWORD *)(*((_QWORD *)v51 + 7) + v52) = -1203748795;
      v51[50] += 4;
      v53 = *(_DWORD **)(v42 + 8);
      v54 = v53[50];
      if (v54 < v53[13])
      {
        do
        {
          if ((v54 + 4) > v53[48])
          {
            v50 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 + 14), v43, v44, v45, v46, v47, v48, v49).n128_u64[0];
            v54 = v53[50];
          }
          *(_DWORD *)(*((_QWORD *)v53 + 7) + v54) = -721215457;
          v54 = v53[50] + 4;
          v53[50] = v54;
        }
        while (v54 < v53[13]);
        v55 = *(_QWORD *)(v42 + 8);
      }
      else
      {
        v55 = *(_QWORD *)(v42 + 8);
      }
      v53[52] = 0;
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v55, 0, 5, v46, v47, v48, v49, (uint64_t)v108, v50);
      v63 = *(_DWORD **)(v42 + 8);
      v64 = v63[50];
      if (v64 + 4 > v63[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v63 + 14), v56, v57, v58, v59, v60, v61, v62);
        v64 = v63[50];
      }
      *(_DWORD *)(*((_QWORD *)v63 + 7) + v64) = -129957888;
      v63[50] += 4;
      v65 = *(_DWORD **)(v42 + 8);
      v66 = v65[50];
      if (v66 + 4 > v65[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v65 + 14), v56, v57, v58, v59, v60, v61, v62);
        v66 = v65[50];
      }
      *(_DWORD *)(*((_QWORD *)v65 + 7) + v66) = 1358955685;
      v65[50] += 4;
      v67 = *(_QWORD *)(v42 + 8);
      for (i = *(_DWORD *)(v67 + 200); i < *(_DWORD *)(v67 + 52); *(_DWORD *)(v67 + 200) = i)
      {
        if ((i + 4) > *(_DWORD *)(v67 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v67 + 56), v56, v57, v58, v59, v60, v61, v62);
          i = *(_DWORD *)(v67 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v67 + 56) + i) = -721215457;
        i = *(_DWORD *)(v67 + 200) + 4;
      }
      v69 = i;
      if ((i + 4) > *(_DWORD *)(v67 + 192))
      {
        v90 = i;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v67 + 56), v56, v57, v58, v59, v60, v61, v62);
        i = v90;
        v69 = *(_DWORD *)(v67 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v67 + 56) + v69) = 335544320;
      *(_DWORD *)(v67 + 200) += 4;
      if (*(_BYTE *)(v67 + 328))
        v70 = 69;
      else
        v70 = 65;
      v104[0] = i;
      v104[1] = 0;
      v105 = v70;
      v106 = 15;
      v107 = -1;
      v103 = v54;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v104, (unsigned int *)&v103, *(_QWORD *)(v42 + 8), v58, v59, v60, v61, v62);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v108, *(_QWORD *)(v42 + 8), v71, v72, v73, v74, v75, v76);
      break;
    case 4u:
    case 5u:
    case 0xAu:
    case 0xBu:
      __break(0xC471u);
      JUMPOUT(0x1987FC28CLL);
    default:
      break;
  }
  v78 = a1[2];
  v79 = *a1;
  v80 = (JSC::AssemblerBuffer *)(*a1 + 56);
  v81 = *(_DWORD *)(*a1 + 200);
  if (v81 < *(_DWORD *)(*a1 + 52))
  {
    do
    {
      if ((v81 + 4) > *(_DWORD *)(v79 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v80, v10, v11, v12, v13, v14, v15, v16);
        v81 = *(_DWORD *)(v79 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v79 + 56) + v81) = -721215457;
      v81 = *(_DWORD *)(v79 + 200) + 4;
      *(_DWORD *)(v79 + 200) = v81;
    }
    while (v81 < *(_DWORD *)(v79 + 52));
  }
  v82 = v81;
  if ((v81 + 4) > *(_DWORD *)(v79 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v80, v10, v11, v12, v13, v14, v15, v16);
    v82 = *(_DWORD *)(v79 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v79 + 56) + v82) = 335544320;
  *(_DWORD *)(v79 + 200) += 4;
  if (*(_BYTE *)(v79 + 328))
    v83 = 69;
  else
    v83 = 65;
  v92 = v81;
  v93 = 0;
  v94 = v83;
  v95 = 15;
  v96 = -1;
  if (v81 != -1)
  {
    v84 = *(unsigned int *)(v78 + 12);
    if ((_DWORD)v84 == *(_DWORD *)(v78 + 8))
    {
      v85 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v78, (void *)(v84 + 1), (unint64_t)&v92, v12, v13, v14, v15, v16);
      v87 = *v85;
      v86 = v85 + 1;
      v88 = *(_QWORD *)v78 + 12 * *(unsigned int *)(v78 + 12);
      *(_DWORD *)v88 = v87;
    }
    else
    {
      v86 = &v93;
      v88 = *(_QWORD *)v78 + 12 * v84;
      *(_DWORD *)v88 = v81;
    }
    *(_QWORD *)(v88 + 4) = *(_QWORD *)v86;
    ++*(_DWORD *)(v78 + 12);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v97, *a1, v11, v12, v13, v14, v15, v16);
}

unsigned int *JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  int *v39;
  int *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int8x8_t v50;
  _DWORD *v51;
  unsigned int v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  unsigned int v64;
  _DWORD *v65;
  unsigned int v66;
  uint64_t v67;
  int i;
  unsigned int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  JSC::AssemblerBuffer *v80;
  int v81;
  unsigned int v82;
  char v83;
  uint64_t v84;
  int *v85;
  int *v86;
  int v87;
  uint64_t v88;
  int v90;
  int v91;
  int v92;
  int v93;
  char v94;
  __int16 v95;
  char v96;
  unsigned int v97[3];
  int v98;
  int v99;
  char v100;
  __int16 v101;
  char v102;
  int v103;
  unsigned int v104[2];
  char v105;
  __int16 v106;
  char v107;
  unsigned int v108[3];

  JSC::MacroAssemblerARM64::branch32(*a1, 1, 1, a2, a5, a6, a7, a8, (uint64_t)v97);
  v17 = a1[1];
  switch(a2)
  {
    case 0u:
    case 6u:
      v22 = *(_QWORD *)v17;
      v23 = *(_DWORD *)(*(_QWORD *)v17 + 200);
      if (v23 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v22 + 56), v10, v11, v12, v13, v14, v15, v16);
        v23 = *(_DWORD *)(v22 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v22 + 56) + v23) = -129989824;
      *(_DWORD *)(v22 + 200) += 4;
      if (a2 >= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FCBA4);
      }
      JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(*(uint64_t **)(v17 + 8), (a2 & 0x7F) == 6, 0, v12, v13, v14, v15, v16);
      v24 = *(_QWORD *)v17;
      v25 = *(_DWORD *)(*(_QWORD *)v17 + 200);
      if (v25 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v24 + 56), v10, v11, v12, v13, v14, v15, v16);
        v25 = *(_DWORD *)(v24 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v24 + 56) + v25) = -1203748795;
      *(_DWORD *)(v24 + 200) += 4;
      v26 = *(_QWORD *)v17;
      if (!*(_BYTE *)(*(_QWORD *)v17 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1987FC9B4);
      }
      v27 = *(_QWORD *)(v17 + 16);
      *(_DWORD *)(*(_QWORD *)(v26 + 296) + 208) &= ~*(_DWORD *)(v26 + 320);
      v28 = *(_BYTE *)(v26 + 304) & 0x1F | 0xB94C6800;
      v29 = *(_DWORD *)(v26 + 200);
      if (v29 + 4 > *(_DWORD *)(v26 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v29 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v29) = v28;
      v30 = *(_DWORD *)(v26 + 200);
      v31 = v30 + 4;
      *(_DWORD *)(v26 + 200) = v30 + 4;
      if ((v30 + 8) > *(_DWORD *)(v26 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v31 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v31) = 1795490367;
      v32 = *(_DWORD *)(v26 + 200) + 4;
      *(_DWORD *)(v26 + 200) = v32;
      if (*(_BYTE *)(v26 + 328))
      {
        while ((signed int)v32 < *(_DWORD *)(v26 + 52))
        {
          if (v32 + 4 > *(_DWORD *)(v26 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
            v32 = *(_DWORD *)(v26 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v26 + 56) + v32) = -721215457;
          v32 = *(_DWORD *)(v26 + 200) + 4;
          *(_DWORD *)(v26 + 200) = v32;
        }
        *(_DWORD *)(v26 + 208) = 0;
      }
      if (v32 + 4 > *(_DWORD *)(v26 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v32 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v32) = 1409286145;
      v33 = *(_DWORD *)(v26 + 200);
      v34 = v33 + 4;
      *(_DWORD *)(v26 + 200) = v33 + 4;
      v35 = v33 + 8;
      v36 = v33 + 4;
      if (v35 > *(_DWORD *)(v26 + 192))
      {
        v91 = v34;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v34 = v91;
        v36 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v36) = -721215457;
      *(_DWORD *)(v26 + 200) += 4;
      if (*(_BYTE *)(v26 + 328))
        v37 = -122;
      else
        v37 = -126;
      v98 = v34;
      v99 = 0;
      v100 = v37;
      v101 = 1;
      v102 = -1;
      if (v34 != -1)
      {
        v38 = *(unsigned int *)(v27 + 12);
        if ((_DWORD)v38 == *(_DWORD *)(v27 + 8))
        {
          v39 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27, (void *)(v38 + 1), (unint64_t)&v98, v12, v13, v14, v15, v16);
          v41 = *v39;
          v40 = v39 + 1;
          v34 = v41;
          LODWORD(v38) = *(_DWORD *)(v27 + 12);
        }
        else
        {
          v40 = &v99;
        }
        v77 = *(_QWORD *)v27 + 12 * v38;
        *(_DWORD *)v77 = v34;
        *(_QWORD *)(v77 + 4) = *(_QWORD *)v40;
        ++*(_DWORD *)(v27 + 12);
      }
      break;
    case 1u:
    case 2u:
    case 7u:
    case 8u:
      v18 = *(_QWORD *)v17;
      v19 = *(_DWORD *)(*(_QWORD *)v17 + 200);
      if (v19 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v18 + 56), v10, v11, v12, v13, v14, v15, v16);
        v19 = *(_DWORD *)(v18 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v18 + 56) + v19) = -129989824;
      *(_DWORD *)(v18 + 200) += 4;
      if (a2 - 1 >= 8)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FCB38);
      }
      JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(*(uint64_t **)(v17 + 8), (0xE0u >> (a2 - 1)) & 1, 0, v12, v13, v14, v15, v16);
      if (a2 == 8 || a2 == 2)
      {
        v20 = *(_QWORD *)v17;
        v21 = *(_DWORD *)(*(_QWORD *)v17 + 200);
        if (v21 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 + 56), v10, v11, v12, v13, v14, v15, v16);
          v21 = *(_DWORD *)(v20 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v20 + 56) + v21) = -129728512;
        *(_DWORD *)(v20 + 200) += 4;
      }
      break;
    case 3u:
    case 9u:
      if (a2 - 3 >= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FCBC4);
      }
      v42 = *(_QWORD *)(v17 + 24);
      JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(*(uint64_t **)v42, (0x78u >> (a2 - 3)) & 1, 0xFFFFFFFFLL, v12, v13, v14, v15, v16);
      v51 = *(_DWORD **)(v42 + 8);
      v52 = v51[50];
      if (v52 + 4 > v51[48])
      {
        v50 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v51 + 14), v43, v44, v45, v46, v47, v48, v49).n128_u64[0];
        v52 = v51[50];
      }
      *(_DWORD *)(*((_QWORD *)v51 + 7) + v52) = -1203748795;
      v51[50] += 4;
      v53 = *(_DWORD **)(v42 + 8);
      v54 = v53[50];
      if (v54 < v53[13])
      {
        do
        {
          if ((v54 + 4) > v53[48])
          {
            v50 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 + 14), v43, v44, v45, v46, v47, v48, v49).n128_u64[0];
            v54 = v53[50];
          }
          *(_DWORD *)(*((_QWORD *)v53 + 7) + v54) = -721215457;
          v54 = v53[50] + 4;
          v53[50] = v54;
        }
        while (v54 < v53[13]);
        v55 = *(_QWORD *)(v42 + 8);
      }
      else
      {
        v55 = *(_QWORD *)(v42 + 8);
      }
      v53[52] = 0;
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v55, 0, 5, v46, v47, v48, v49, (uint64_t)v108, v50);
      v63 = *(_DWORD **)(v42 + 8);
      v64 = v63[50];
      if (v64 + 4 > v63[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v63 + 14), v56, v57, v58, v59, v60, v61, v62);
        v64 = v63[50];
      }
      *(_DWORD *)(*((_QWORD *)v63 + 7) + v64) = -129957888;
      v63[50] += 4;
      v65 = *(_DWORD **)(v42 + 8);
      v66 = v65[50];
      if (v66 + 4 > v65[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v65 + 14), v56, v57, v58, v59, v60, v61, v62);
        v66 = v65[50];
      }
      *(_DWORD *)(*((_QWORD *)v65 + 7) + v66) = 1358955685;
      v65[50] += 4;
      v67 = *(_QWORD *)(v42 + 8);
      for (i = *(_DWORD *)(v67 + 200); i < *(_DWORD *)(v67 + 52); *(_DWORD *)(v67 + 200) = i)
      {
        if ((i + 4) > *(_DWORD *)(v67 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v67 + 56), v56, v57, v58, v59, v60, v61, v62);
          i = *(_DWORD *)(v67 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v67 + 56) + i) = -721215457;
        i = *(_DWORD *)(v67 + 200) + 4;
      }
      v69 = i;
      if ((i + 4) > *(_DWORD *)(v67 + 192))
      {
        v90 = i;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v67 + 56), v56, v57, v58, v59, v60, v61, v62);
        i = v90;
        v69 = *(_DWORD *)(v67 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v67 + 56) + v69) = 335544320;
      *(_DWORD *)(v67 + 200) += 4;
      if (*(_BYTE *)(v67 + 328))
        v70 = 69;
      else
        v70 = 65;
      v104[0] = i;
      v104[1] = 0;
      v105 = v70;
      v106 = 15;
      v107 = -1;
      v103 = v54;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v104, (unsigned int *)&v103, *(_QWORD *)(v42 + 8), v58, v59, v60, v61, v62);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v108, *(_QWORD *)(v42 + 8), v71, v72, v73, v74, v75, v76);
      break;
    case 4u:
    case 5u:
    case 0xAu:
    case 0xBu:
      __break(0xC471u);
      JUMPOUT(0x1987FCB18);
    default:
      break;
  }
  v78 = a1[2];
  v79 = *a1;
  v80 = (JSC::AssemblerBuffer *)(*a1 + 56);
  v81 = *(_DWORD *)(*a1 + 200);
  if (v81 < *(_DWORD *)(*a1 + 52))
  {
    do
    {
      if ((v81 + 4) > *(_DWORD *)(v79 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v80, v10, v11, v12, v13, v14, v15, v16);
        v81 = *(_DWORD *)(v79 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v79 + 56) + v81) = -721215457;
      v81 = *(_DWORD *)(v79 + 200) + 4;
      *(_DWORD *)(v79 + 200) = v81;
    }
    while (v81 < *(_DWORD *)(v79 + 52));
  }
  v82 = v81;
  if ((v81 + 4) > *(_DWORD *)(v79 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v80, v10, v11, v12, v13, v14, v15, v16);
    v82 = *(_DWORD *)(v79 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v79 + 56) + v82) = 335544320;
  *(_DWORD *)(v79 + 200) += 4;
  if (*(_BYTE *)(v79 + 328))
    v83 = 69;
  else
    v83 = 65;
  v92 = v81;
  v93 = 0;
  v94 = v83;
  v95 = 15;
  v96 = -1;
  if (v81 != -1)
  {
    v84 = *(unsigned int *)(v78 + 12);
    if ((_DWORD)v84 == *(_DWORD *)(v78 + 8))
    {
      v85 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v78, (void *)(v84 + 1), (unint64_t)&v92, v12, v13, v14, v15, v16);
      v87 = *v85;
      v86 = v85 + 1;
      v88 = *(_QWORD *)v78 + 12 * *(unsigned int *)(v78 + 12);
      *(_DWORD *)v88 = v87;
    }
    else
    {
      v86 = &v93;
      v88 = *(_QWORD *)v78 + 12 * v84;
      *(_DWORD *)v88 = v81;
    }
    *(_QWORD *)(v88 + 4) = *(_QWORD *)v86;
    ++*(_DWORD *)(v78 + 12);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v97, *a1, v11, v12, v13, v14, v15, v16);
}

unsigned int *JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)2>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  int *v39;
  int *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int8x8_t v50;
  _DWORD *v51;
  unsigned int v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  unsigned int v64;
  _DWORD *v65;
  unsigned int v66;
  uint64_t v67;
  int i;
  unsigned int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  JSC::AssemblerBuffer *v80;
  int v81;
  unsigned int v82;
  char v83;
  uint64_t v84;
  int *v85;
  int *v86;
  int v87;
  uint64_t v88;
  int v90;
  int v91;
  int v92;
  int v93;
  char v94;
  __int16 v95;
  char v96;
  unsigned int v97[3];
  int v98;
  int v99;
  char v100;
  __int16 v101;
  char v102;
  int v103;
  unsigned int v104[2];
  char v105;
  __int16 v106;
  char v107;
  unsigned int v108[3];

  JSC::MacroAssemblerARM64::branch32(*a1, 1, 1, a2, a5, a6, a7, a8, (uint64_t)v97);
  v17 = a1[1];
  switch(a2)
  {
    case 0u:
    case 6u:
      v22 = *(_QWORD *)v17;
      v23 = *(_DWORD *)(*(_QWORD *)v17 + 200);
      if (v23 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v22 + 56), v10, v11, v12, v13, v14, v15, v16);
        v23 = *(_DWORD *)(v22 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v22 + 56) + v23) = -129989824;
      *(_DWORD *)(v22 + 200) += 4;
      if (a2 >= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FD430);
      }
      JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(*(uint64_t **)(v17 + 8), (a2 & 0x7F) == 6, 0, v12, v13, v14, v15, v16);
      v24 = *(_QWORD *)v17;
      v25 = *(_DWORD *)(*(_QWORD *)v17 + 200);
      if (v25 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v24 + 56), v10, v11, v12, v13, v14, v15, v16);
        v25 = *(_DWORD *)(v24 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v24 + 56) + v25) = -1203748795;
      *(_DWORD *)(v24 + 200) += 4;
      v26 = *(_QWORD *)v17;
      if (!*(_BYTE *)(*(_QWORD *)v17 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1987FD240);
      }
      v27 = *(_QWORD *)(v17 + 16);
      *(_DWORD *)(*(_QWORD *)(v26 + 296) + 208) &= ~*(_DWORD *)(v26 + 320);
      v28 = *(_BYTE *)(v26 + 304) & 0x1F | 0xB94C6800;
      v29 = *(_DWORD *)(v26 + 200);
      if (v29 + 4 > *(_DWORD *)(v26 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v29 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v29) = v28;
      v30 = *(_DWORD *)(v26 + 200);
      v31 = v30 + 4;
      *(_DWORD *)(v26 + 200) = v30 + 4;
      if ((v30 + 8) > *(_DWORD *)(v26 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v31 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v31) = 1795490367;
      v32 = *(_DWORD *)(v26 + 200) + 4;
      *(_DWORD *)(v26 + 200) = v32;
      if (*(_BYTE *)(v26 + 328))
      {
        while ((signed int)v32 < *(_DWORD *)(v26 + 52))
        {
          if (v32 + 4 > *(_DWORD *)(v26 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
            v32 = *(_DWORD *)(v26 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v26 + 56) + v32) = -721215457;
          v32 = *(_DWORD *)(v26 + 200) + 4;
          *(_DWORD *)(v26 + 200) = v32;
        }
        *(_DWORD *)(v26 + 208) = 0;
      }
      if (v32 + 4 > *(_DWORD *)(v26 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v32 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v32) = 1409286145;
      v33 = *(_DWORD *)(v26 + 200);
      v34 = v33 + 4;
      *(_DWORD *)(v26 + 200) = v33 + 4;
      v35 = v33 + 8;
      v36 = v33 + 4;
      if (v35 > *(_DWORD *)(v26 + 192))
      {
        v91 = v34;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v26 + 56), v10, v11, v12, v13, v14, v15, v16);
        v34 = v91;
        v36 = *(_DWORD *)(v26 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v26 + 56) + v36) = -721215457;
      *(_DWORD *)(v26 + 200) += 4;
      if (*(_BYTE *)(v26 + 328))
        v37 = -122;
      else
        v37 = -126;
      v98 = v34;
      v99 = 0;
      v100 = v37;
      v101 = 1;
      v102 = -1;
      if (v34 != -1)
      {
        v38 = *(unsigned int *)(v27 + 12);
        if ((_DWORD)v38 == *(_DWORD *)(v27 + 8))
        {
          v39 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27, (void *)(v38 + 1), (unint64_t)&v98, v12, v13, v14, v15, v16);
          v41 = *v39;
          v40 = v39 + 1;
          v34 = v41;
          LODWORD(v38) = *(_DWORD *)(v27 + 12);
        }
        else
        {
          v40 = &v99;
        }
        v77 = *(_QWORD *)v27 + 12 * v38;
        *(_DWORD *)v77 = v34;
        *(_QWORD *)(v77 + 4) = *(_QWORD *)v40;
        ++*(_DWORD *)(v27 + 12);
      }
      break;
    case 1u:
    case 2u:
    case 7u:
    case 8u:
      v18 = *(_QWORD *)v17;
      v19 = *(_DWORD *)(*(_QWORD *)v17 + 200);
      if (v19 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v18 + 56), v10, v11, v12, v13, v14, v15, v16);
        v19 = *(_DWORD *)(v18 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v18 + 56) + v19) = -129989824;
      *(_DWORD *)(v18 + 200) += 4;
      if (a2 - 1 >= 8)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FD3C4);
      }
      JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(*(uint64_t **)(v17 + 8), (0xE0u >> (a2 - 1)) & 1, 0, v12, v13, v14, v15, v16);
      if (a2 == 8 || a2 == 2)
      {
        v20 = *(_QWORD *)v17;
        v21 = *(_DWORD *)(*(_QWORD *)v17 + 200);
        if (v21 + 4 > *(_DWORD *)(*(_QWORD *)v17 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 + 56), v10, v11, v12, v13, v14, v15, v16);
          v21 = *(_DWORD *)(v20 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v20 + 56) + v21) = -129728512;
        *(_DWORD *)(v20 + 200) += 4;
      }
      break;
    case 3u:
    case 9u:
      if (a2 - 3 >= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FD450);
      }
      v42 = *(_QWORD *)(v17 + 24);
      JSC::JIT::generateOpResolveScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(BOOL,JSC::ARM64Registers::RegisterID)#1}::operator()(*(uint64_t **)v42, (0x78u >> (a2 - 3)) & 1, 0xFFFFFFFFLL, v12, v13, v14, v15, v16);
      v51 = *(_DWORD **)(v42 + 8);
      v52 = v51[50];
      if (v52 + 4 > v51[48])
      {
        v50 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v51 + 14), v43, v44, v45, v46, v47, v48, v49).n128_u64[0];
        v52 = v51[50];
      }
      *(_DWORD *)(*((_QWORD *)v51 + 7) + v52) = -1203748795;
      v51[50] += 4;
      v53 = *(_DWORD **)(v42 + 8);
      v54 = v53[50];
      if (v54 < v53[13])
      {
        do
        {
          if ((v54 + 4) > v53[48])
          {
            v50 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 + 14), v43, v44, v45, v46, v47, v48, v49).n128_u64[0];
            v54 = v53[50];
          }
          *(_DWORD *)(*((_QWORD *)v53 + 7) + v54) = -721215457;
          v54 = v53[50] + 4;
          v53[50] = v54;
        }
        while (v54 < v53[13]);
        v55 = *(_QWORD *)(v42 + 8);
      }
      else
      {
        v55 = *(_QWORD *)(v42 + 8);
      }
      v53[52] = 0;
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v55, 0, 5, v46, v47, v48, v49, (uint64_t)v108, v50);
      v63 = *(_DWORD **)(v42 + 8);
      v64 = v63[50];
      if (v64 + 4 > v63[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v63 + 14), v56, v57, v58, v59, v60, v61, v62);
        v64 = v63[50];
      }
      *(_DWORD *)(*((_QWORD *)v63 + 7) + v64) = -129957888;
      v63[50] += 4;
      v65 = *(_DWORD **)(v42 + 8);
      v66 = v65[50];
      if (v66 + 4 > v65[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v65 + 14), v56, v57, v58, v59, v60, v61, v62);
        v66 = v65[50];
      }
      *(_DWORD *)(*((_QWORD *)v65 + 7) + v66) = 1358955685;
      v65[50] += 4;
      v67 = *(_QWORD *)(v42 + 8);
      for (i = *(_DWORD *)(v67 + 200); i < *(_DWORD *)(v67 + 52); *(_DWORD *)(v67 + 200) = i)
      {
        if ((i + 4) > *(_DWORD *)(v67 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v67 + 56), v56, v57, v58, v59, v60, v61, v62);
          i = *(_DWORD *)(v67 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v67 + 56) + i) = -721215457;
        i = *(_DWORD *)(v67 + 200) + 4;
      }
      v69 = i;
      if ((i + 4) > *(_DWORD *)(v67 + 192))
      {
        v90 = i;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v67 + 56), v56, v57, v58, v59, v60, v61, v62);
        i = v90;
        v69 = *(_DWORD *)(v67 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v67 + 56) + v69) = 335544320;
      *(_DWORD *)(v67 + 200) += 4;
      if (*(_BYTE *)(v67 + 328))
        v70 = 69;
      else
        v70 = 65;
      v104[0] = i;
      v104[1] = 0;
      v105 = v70;
      v106 = 15;
      v107 = -1;
      v103 = v54;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v104, (unsigned int *)&v103, *(_QWORD *)(v42 + 8), v58, v59, v60, v61, v62);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v108, *(_QWORD *)(v42 + 8), v71, v72, v73, v74, v75, v76);
      break;
    case 4u:
    case 5u:
    case 0xAu:
    case 0xBu:
      __break(0xC471u);
      JUMPOUT(0x1987FD3A4);
    default:
      break;
  }
  v78 = a1[2];
  v79 = *a1;
  v80 = (JSC::AssemblerBuffer *)(*a1 + 56);
  v81 = *(_DWORD *)(*a1 + 200);
  if (v81 < *(_DWORD *)(*a1 + 52))
  {
    do
    {
      if ((v81 + 4) > *(_DWORD *)(v79 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v80, v10, v11, v12, v13, v14, v15, v16);
        v81 = *(_DWORD *)(v79 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v79 + 56) + v81) = -721215457;
      v81 = *(_DWORD *)(v79 + 200) + 4;
      *(_DWORD *)(v79 + 200) = v81;
    }
    while (v81 < *(_DWORD *)(v79 + 52));
  }
  v82 = v81;
  if ((v81 + 4) > *(_DWORD *)(v79 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v80, v10, v11, v12, v13, v14, v15, v16);
    v82 = *(_DWORD *)(v79 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v79 + 56) + v82) = 335544320;
  *(_DWORD *)(v79 + 200) += 4;
  if (*(_BYTE *)(v79 + 328))
    v83 = 69;
  else
    v83 = 65;
  v92 = v81;
  v93 = 0;
  v94 = v83;
  v95 = 15;
  v96 = -1;
  if (v81 != -1)
  {
    v84 = *(unsigned int *)(v78 + 12);
    if ((_DWORD)v84 == *(_DWORD *)(v78 + 8))
    {
      v85 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v78, (void *)(v84 + 1), (unint64_t)&v92, v12, v13, v14, v15, v16);
      v87 = *v85;
      v86 = v85 + 1;
      v88 = *(_QWORD *)v78 + 12 * *(unsigned int *)(v78 + 12);
      *(_DWORD *)v88 = v87;
    }
    else
    {
      v86 = &v93;
      v88 = *(_QWORD *)v78 + 12 * v84;
      *(_DWORD *)v88 = v81;
    }
    *(_QWORD *)(v88 + 4) = *(_QWORD *)v86;
    ++*(_DWORD *)(v78 + 12);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v97, *a1, v11, v12, v13, v14, v15, v16);
}

unsigned int *JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t *v18;
  int8x8_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int *v40;
  int *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  char v70;
  uint64_t v71;
  int *v72;
  int *v73;
  int v74;
  uint64_t v75;
  _DWORD *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  JSC::AssemblerBuffer *v93;
  int v94;
  unsigned int v95;
  char v96;
  uint64_t v97;
  int *v98;
  int *v99;
  int v100;
  uint64_t v101;
  int v103;
  int v104;
  int v105;
  char v106;
  __int16 v107;
  char v108;
  unsigned int v109[3];
  int v110;
  uint64_t v111;
  _QWORD v112[2];
  _DWORD *v113;
  int v114;
  int v115;
  char v116;
  __int16 v117;
  char v118;
  int v119;
  int v120;
  unsigned int v121[3];

  JSC::MacroAssemblerARM64::branch32(*a1, 1, 5, a2, a5, a6, a7, a8, (uint64_t)v109);
  v18 = (uint64_t *)a1[1];
  switch(a2)
  {
    case 0u:
    case 6u:
      v30 = *v18;
      v31 = *(_DWORD *)(*v18 + 200);
      if (v31 + 4 > *(_DWORD *)(*v18 + 192))
      {
        v17 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v30 + 56), v10, v11, v12, v13, v14, v15, v16).n128_u64[0];
        v31 = *(_DWORD *)(v30 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v30 + 56) + v31) = -129990523;
      *(_DWORD *)(v30 + 200) += 4;
      v32 = v18[1];
      JSC::MacroAssemblerARM64::branchTest64(*v18, 0, 5, 0xFFFFFFFFLL, v13, v14, v15, v16, (uint64_t)&v119, v17);
      v38 = v119;
      if (v119 != -1)
      {
        v39 = *(unsigned int *)(v32 + 12);
        if ((_DWORD)v39 == *(_DWORD *)(v32 + 8))
        {
          v40 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32, (void *)(v39 + 1), (unint64_t)&v119, v33, v34, v35, v36, v37);
          v42 = *v40;
          v41 = v40 + 1;
          v38 = v42;
          LODWORD(v39) = *(_DWORD *)(v32 + 12);
        }
        else
        {
          v41 = &v120;
        }
        v55 = *(_QWORD *)v32 + 12 * v39;
        *(_DWORD *)v55 = v38;
        *(_QWORD *)(v55 + 4) = *(_QWORD *)v41;
        ++*(_DWORD *)(v32 + 12);
      }
      JSC::MacroAssemblerARM64::urshift64((_DWORD *)*v18, 5, 4, 5, v34, v35, v36, v37);
      v59 = *v18;
      if (!*(_BYTE *)(*v18 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1987FDBACLL);
      }
      v60 = v18[1];
      *(_DWORD *)(*(_QWORD *)(v59 + 296) + 208) &= ~*(_DWORD *)(v59 + 320);
      v61 = *(_BYTE *)(v59 + 304) & 0x1F | 0xB8400040;
      v62 = *(_DWORD *)(v59 + 200);
      if (v62 + 4 > *(_DWORD *)(v59 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v62 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v62) = v61;
      v63 = *(_DWORD *)(v59 + 200);
      v64 = v63 + 4;
      *(_DWORD *)(v59 + 200) = v63 + 4;
      if ((v63 + 8) > *(_DWORD *)(v59 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v64 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v64) = 1795490367;
      v65 = *(_DWORD *)(v59 + 200) + 4;
      *(_DWORD *)(v59 + 200) = v65;
      if (*(_BYTE *)(v59 + 328))
      {
        while ((signed int)v65 < *(_DWORD *)(v59 + 52))
        {
          if (v65 + 4 > *(_DWORD *)(v59 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
            v65 = *(_DWORD *)(v59 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v59 + 56) + v65) = -721215457;
          v65 = *(_DWORD *)(v59 + 200) + 4;
          *(_DWORD *)(v59 + 200) = v65;
        }
        *(_DWORD *)(v59 + 208) = 0;
      }
      if (v65 + 4 > *(_DWORD *)(v59 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v65 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v65) = 1409286145;
      v66 = *(_DWORD *)(v59 + 200);
      v67 = v66 + 4;
      *(_DWORD *)(v59 + 200) = v66 + 4;
      v68 = v66 + 8;
      v69 = v66 + 4;
      if (v68 > *(_DWORD *)(v59 + 192))
      {
        v103 = v67;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v67 = v103;
        v69 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v69) = -721215457;
      *(_DWORD *)(v59 + 200) += 4;
      if (*(_BYTE *)(v59 + 328))
        v70 = -122;
      else
        v70 = -126;
      v114 = v67;
      v115 = 0;
      v116 = v70;
      v117 = 1;
      v118 = -1;
      if (v67 != -1)
      {
        v71 = *(unsigned int *)(v60 + 12);
        if ((_DWORD)v71 == *(_DWORD *)(v60 + 8))
        {
          v72 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v60, (void *)(v71 + 1), (unint64_t)&v114, v58, v46, v47, v48, v49);
          v74 = *v72;
          v73 = v72 + 1;
          v67 = v74;
          LODWORD(v71) = *(_DWORD *)(v60 + 12);
        }
        else
        {
          v73 = &v115;
        }
        v75 = *(_QWORD *)v60 + 12 * v71;
        *(_DWORD *)v75 = v67;
        *(_QWORD *)(v75 + 4) = *(_QWORD *)v73;
        ++*(_DWORD *)(v60 + 12);
      }
      v76 = (_DWORD *)*v18;
      v112[0] = WTF::ScopedLambdaFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump ()(void),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(JSC::ResolveType)#1}::operator() const(JSC::ResolveType)::{lambda(void)#1}>::implFunction;
      v112[1] = v112;
      v113 = v76;
      if (HIBYTE(word_1ECF4C428))
      {
        v77 = v76[50];
        if (v77 + 4 > v76[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v56, v57, v58, v46, v47, v48, v49);
          v77 = v76[50];
        }
        *(_DWORD *)(*((_QWORD *)v76 + 7) + v77) = -129989819;
        v76[50] += 4;
        JSC::MacroAssemblerARM64::branch64((uint64_t)v113, 0, 2, 5, v46, v47, v48, v49, (uint64_t)v121);
        v85 = v76[50];
        if (v85 + 4 > v76[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v78, v79, v80, v81, v82, v83, v84);
          v85 = v76[50];
        }
        *(_DWORD *)(*((_QWORD *)v76 + 7) + v85) = -734491104;
        v76[50] += 4;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v121, (uint64_t)v76, v79, v80, v81, v82, v83, v84);
        v76 = (_DWORD *)*v18;
      }
      v86 = v76[50];
      if (v86 + 4 > v76[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v56, v57, v58, v46, v47, v48, v49);
        v86 = v76[50];
      }
      *(_DWORD *)(*((_QWORD *)v76 + 7) + v86) = -129957755;
      v76[50] += 4;
      v87 = *v18;
      v88 = *(_DWORD *)(*v18 + 200);
      if (v88 + 4 > *(_DWORD *)(*v18 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v87 + 56), v56, v57, v58, v46, v47, v48, v49);
        v88 = *(_DWORD *)(v87 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v87 + 56) + v88) = -129990590;
      *(_DWORD *)(v87 + 200) += 4;
      v89 = *v18;
      v90 = *(_DWORD *)(*v18 + 200);
      if (v90 + 4 > *(_DWORD *)(*v18 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v89 + 56), v56, v57, v58, v46, v47, v48, v49);
        v90 = *(_DWORD *)(v89 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v89 + 56) + v90) = -888863771;
      *(_DWORD *)(v89 + 200) += 4;
      v52 = *v18;
      v53 = 496;
      goto LABEL_56;
    case 1u:
    case 2u:
    case 7u:
    case 8u:
      if (a2 - 1 >= 8)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FDC94);
      }
      JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(BOOL)#1}::operator()((uint64_t *)v18[2], (0xE0u >> (a2 - 1)) & 1, v11, v12, v13, v14, v15, v16);
      v20 = *v18;
      v21 = *(_DWORD *)(*v18 + 200);
      if (v21 + 4 > *(_DWORD *)(*v18 + 192))
      {
        v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 + 56), v10, v11, v12, v13, v14, v15, v16).n128_u64[0];
        v21 = *(_DWORD *)(v20 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v20 + 56) + v21) = -129957755;
      *(_DWORD *)(v20 + 200) += 4;
      v22 = *v18;
      v23 = *(_DWORD *)(*v18 + 200);
      if (v23 + 4 > *(_DWORD *)(*v18 + 192))
      {
        v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v22 + 56), v10, v11, v12, v13, v14, v15, v16).n128_u64[0];
        v23 = *(_DWORD *)(v22 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v22 + 56) + v23) = -130023264;
      *(_DWORD *)(v22 + 200) += 4;
      if (a2 == 8 || a2 == 2)
      {
        v24 = v18[1];
        JSC::MacroAssemblerARM64::branchTest64(*v18, 0, 0, 0xFFFFFFFFLL, v13, v14, v15, v16, (uint64_t)&v110, v19);
        v25 = v110;
        if (v110 != -1)
        {
          v26 = *(unsigned int *)(v24 + 12);
          if ((_DWORD)v26 == *(_DWORD *)(v24 + 8))
          {
            v27 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24, (void *)(v26 + 1), (unint64_t)&v110, v12, v13, v14, v15, v16);
            v29 = *v27;
            v28 = (uint64_t *)(v27 + 1);
            v25 = v29;
            LODWORD(v26) = *(_DWORD *)(v24 + 12);
          }
          else
          {
            v28 = &v111;
          }
          v54 = *(_QWORD *)v24 + 12 * v26;
          *(_DWORD *)v54 = v25;
          *(_QWORD *)(v54 + 4) = *v28;
          ++*(_DWORD *)(v24 + 12);
        }
      }
      break;
    case 3u:
    case 9u:
      if (a2 - 3 >= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FDD00);
      }
      JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(BOOL)#1}::operator()((uint64_t *)v18[2], (0x78u >> (a2 - 3)) & 1, v11, v12, v13, v14, v15, v16);
      v50 = *v18;
      v51 = *(_DWORD *)(*v18 + 200);
      if (v51 + 4 > *(_DWORD *)(*v18 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v50 + 56), v43, v44, v45, v46, v47, v48, v49);
        v51 = *(_DWORD *)(v50 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v50 + 56) + v51) = -129957755;
      *(_DWORD *)(v50 + 200) += 4;
      v52 = *v18;
      v53 = 32;
LABEL_56:
      JSC::MacroAssemblerARM64::load64(v52, 0x300000502uLL, v53 & 0xFFFF0000FFFFFFFFLL | 0x200000000, 0, v46, v47, v48, v49);
      break;
    case 4u:
    case 5u:
    case 0xAu:
    case 0xBu:
      __break(0xC471u);
      JUMPOUT(0x1987FDC74);
    default:
      break;
  }
  v91 = a1[2];
  v92 = *a1;
  v93 = (JSC::AssemblerBuffer *)(*a1 + 56);
  v94 = *(_DWORD *)(*a1 + 200);
  if (v94 < *(_DWORD *)(*a1 + 52))
  {
    do
    {
      if ((v94 + 4) > *(_DWORD *)(v92 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v93, v10, v11, v12, v13, v14, v15, v16);
        v94 = *(_DWORD *)(v92 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v92 + 56) + v94) = -721215457;
      v94 = *(_DWORD *)(v92 + 200) + 4;
      *(_DWORD *)(v92 + 200) = v94;
    }
    while (v94 < *(_DWORD *)(v92 + 52));
  }
  v95 = v94;
  if ((v94 + 4) > *(_DWORD *)(v92 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v93, v10, v11, v12, v13, v14, v15, v16);
    v95 = *(_DWORD *)(v92 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v92 + 56) + v95) = 335544320;
  *(_DWORD *)(v92 + 200) += 4;
  if (*(_BYTE *)(v92 + 328))
    v96 = 69;
  else
    v96 = 65;
  v104 = v94;
  v105 = 0;
  v106 = v96;
  v107 = 15;
  v108 = -1;
  if (v94 != -1)
  {
    v97 = *(unsigned int *)(v91 + 12);
    if ((_DWORD)v97 == *(_DWORD *)(v91 + 8))
    {
      v98 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v91, (void *)(v97 + 1), (unint64_t)&v104, v12, v13, v14, v15, v16);
      v100 = *v98;
      v99 = v98 + 1;
      v101 = *(_QWORD *)v91 + 12 * *(unsigned int *)(v91 + 12);
      *(_DWORD *)v101 = v100;
    }
    else
    {
      v99 = &v105;
      v101 = *(_QWORD *)v91 + 12 * v97;
      *(_DWORD *)v101 = v94;
    }
    *(_QWORD *)(v101 + 4) = *(_QWORD *)v99;
    ++*(_DWORD *)(v91 + 12);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v109, *a1, v11, v12, v13, v14, v15, v16);
}

void JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(BOOL)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  if ((_DWORD)a2)
  {
    v9 = *a1;
    v10 = *(_DWORD *)(*a1 + 200);
    if (v10 + 4 > *(_DWORD *)(*a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), a2, a3, a4, a5, a6, a7, a8);
      v10 = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v10) = -129989819;
    *(_DWORD *)(v9 + 200) += 4;
    v11 = *a1;
    v12 = *(_DWORD *)(*a1 + 200);
    if (v12 + 4 > *(_DWORD *)(*a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *(_DWORD *)(v11 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v11 + 56) + v12) = -112982875;
    *(_DWORD *)(v11 + 200) += 4;
    v13 = *a1;
    if (!*(_BYTE *)(*a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1987FDEDCLL);
    }
    v14 = a1[1];
    *(_DWORD *)(*(_QWORD *)(v13 + 296) + 208) &= ~*(_DWORD *)(v13 + 320);
    v15 = *(_BYTE *)(v13 + 304) & 0x1F | 0x384040A0;
    v16 = *(_DWORD *)(v13 + 200);
    if (v16 + 4 > *(_DWORD *)(v13 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), a2, a3, a4, a5, a6, a7, a8);
      v16 = *(_DWORD *)(v13 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v13 + 56) + v16) = v15;
    *(_DWORD *)(v13 + 200) += 4;
    JSC::MacroAssemblerARM64::branch32(v13, 0, 17, 2, a5, a6, a7, a8, (uint64_t)&v28);
    v22 = v28;
    if (v28 != -1)
    {
      v23 = *(unsigned int *)(v14 + 12);
      if ((_DWORD)v23 == *(_DWORD *)(v14 + 8))
      {
        v24 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, (void *)(v23 + 1), (unint64_t)&v28, v17, v18, v19, v20, v21);
        v26 = *v24;
        v25 = (uint64_t *)(v24 + 1);
        v22 = v26;
        LODWORD(v23) = *(_DWORD *)(v14 + 12);
      }
      else
      {
        v25 = &v29;
      }
      v27 = *(_QWORD *)v14 + 12 * v23;
      *(_DWORD *)v27 = v22;
      *(_QWORD *)(v27 + 4) = *v25;
      ++*(_DWORD *)(v14 + 12);
    }
  }
}

void WTF::ScopedLambdaFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump ()(void),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(JSC::ResolveType)#1}::operator() const(JSC::ResolveType)::{lambda(void)#1}>::implFunction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  _DWORD *v11;
  unsigned int v12;

  v11 = *(_DWORD **)(a1 + 16);
  v12 = v11[50];
  if (v12 + 4 > v11[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = v11[50];
  }
  *(_DWORD *)(*((_QWORD *)v11 + 7) + v12) = -129989819;
  v11[50] += 4;
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 16), 0, 2, 5, a5, a6, a7, a8, a9);
}

unsigned int *JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)1>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t *v18;
  int8x8_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int *v40;
  int *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  char v70;
  uint64_t v71;
  int *v72;
  int *v73;
  int v74;
  uint64_t v75;
  _DWORD *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  JSC::AssemblerBuffer *v93;
  int v94;
  unsigned int v95;
  char v96;
  uint64_t v97;
  int *v98;
  int *v99;
  int v100;
  uint64_t v101;
  int v103;
  int v104;
  int v105;
  char v106;
  __int16 v107;
  char v108;
  unsigned int v109[3];
  int v110;
  uint64_t v111;
  _QWORD v112[2];
  _DWORD *v113;
  int v114;
  int v115;
  char v116;
  __int16 v117;
  char v118;
  int v119;
  int v120;
  unsigned int v121[3];

  JSC::MacroAssemblerARM64::branch32(*a1, 1, 5, a2, a5, a6, a7, a8, (uint64_t)v109);
  v18 = (uint64_t *)a1[1];
  switch(a2)
  {
    case 0u:
    case 6u:
      v30 = *v18;
      v31 = *(_DWORD *)(*v18 + 200);
      if (v31 + 4 > *(_DWORD *)(*v18 + 192))
      {
        v17 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v30 + 56), v10, v11, v12, v13, v14, v15, v16).n128_u64[0];
        v31 = *(_DWORD *)(v30 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v30 + 56) + v31) = -129990523;
      *(_DWORD *)(v30 + 200) += 4;
      v32 = v18[1];
      JSC::MacroAssemblerARM64::branchTest64(*v18, 0, 5, 0xFFFFFFFFLL, v13, v14, v15, v16, (uint64_t)&v119, v17);
      v38 = v119;
      if (v119 != -1)
      {
        v39 = *(unsigned int *)(v32 + 12);
        if ((_DWORD)v39 == *(_DWORD *)(v32 + 8))
        {
          v40 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32, (void *)(v39 + 1), (unint64_t)&v119, v33, v34, v35, v36, v37);
          v42 = *v40;
          v41 = v40 + 1;
          v38 = v42;
          LODWORD(v39) = *(_DWORD *)(v32 + 12);
        }
        else
        {
          v41 = &v120;
        }
        v55 = *(_QWORD *)v32 + 12 * v39;
        *(_DWORD *)v55 = v38;
        *(_QWORD *)(v55 + 4) = *(_QWORD *)v41;
        ++*(_DWORD *)(v32 + 12);
      }
      JSC::MacroAssemblerARM64::urshift64((_DWORD *)*v18, 5, 4, 5, v34, v35, v36, v37);
      v59 = *v18;
      if (!*(_BYTE *)(*v18 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1987FE698);
      }
      v60 = v18[1];
      *(_DWORD *)(*(_QWORD *)(v59 + 296) + 208) &= ~*(_DWORD *)(v59 + 320);
      v61 = *(_BYTE *)(v59 + 304) & 0x1F | 0xB8400040;
      v62 = *(_DWORD *)(v59 + 200);
      if (v62 + 4 > *(_DWORD *)(v59 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v62 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v62) = v61;
      v63 = *(_DWORD *)(v59 + 200);
      v64 = v63 + 4;
      *(_DWORD *)(v59 + 200) = v63 + 4;
      if ((v63 + 8) > *(_DWORD *)(v59 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v64 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v64) = 1795490367;
      v65 = *(_DWORD *)(v59 + 200) + 4;
      *(_DWORD *)(v59 + 200) = v65;
      if (*(_BYTE *)(v59 + 328))
      {
        while ((signed int)v65 < *(_DWORD *)(v59 + 52))
        {
          if (v65 + 4 > *(_DWORD *)(v59 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
            v65 = *(_DWORD *)(v59 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v59 + 56) + v65) = -721215457;
          v65 = *(_DWORD *)(v59 + 200) + 4;
          *(_DWORD *)(v59 + 200) = v65;
        }
        *(_DWORD *)(v59 + 208) = 0;
      }
      if (v65 + 4 > *(_DWORD *)(v59 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v65 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v65) = 1409286145;
      v66 = *(_DWORD *)(v59 + 200);
      v67 = v66 + 4;
      *(_DWORD *)(v59 + 200) = v66 + 4;
      v68 = v66 + 8;
      v69 = v66 + 4;
      if (v68 > *(_DWORD *)(v59 + 192))
      {
        v103 = v67;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v67 = v103;
        v69 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v69) = -721215457;
      *(_DWORD *)(v59 + 200) += 4;
      if (*(_BYTE *)(v59 + 328))
        v70 = -122;
      else
        v70 = -126;
      v114 = v67;
      v115 = 0;
      v116 = v70;
      v117 = 1;
      v118 = -1;
      if (v67 != -1)
      {
        v71 = *(unsigned int *)(v60 + 12);
        if ((_DWORD)v71 == *(_DWORD *)(v60 + 8))
        {
          v72 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v60, (void *)(v71 + 1), (unint64_t)&v114, v58, v46, v47, v48, v49);
          v74 = *v72;
          v73 = v72 + 1;
          v67 = v74;
          LODWORD(v71) = *(_DWORD *)(v60 + 12);
        }
        else
        {
          v73 = &v115;
        }
        v75 = *(_QWORD *)v60 + 12 * v71;
        *(_DWORD *)v75 = v67;
        *(_QWORD *)(v75 + 4) = *(_QWORD *)v73;
        ++*(_DWORD *)(v60 + 12);
      }
      v76 = (_DWORD *)*v18;
      v112[0] = WTF::ScopedLambdaFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump ()(void),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)1>(JSC::VM &)::{lambda(JSC::ResolveType)#1}::operator() const(JSC::ResolveType)::{lambda(void)#1}>::implFunction;
      v112[1] = v112;
      v113 = v76;
      if (HIBYTE(word_1ECF4C428))
      {
        v77 = v76[50];
        if (v77 + 4 > v76[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v56, v57, v58, v46, v47, v48, v49);
          v77 = v76[50];
        }
        *(_DWORD *)(*((_QWORD *)v76 + 7) + v77) = -129989819;
        v76[50] += 4;
        JSC::MacroAssemblerARM64::branch64((uint64_t)v113, 0, 2, 5, v46, v47, v48, v49, (uint64_t)v121);
        v85 = v76[50];
        if (v85 + 4 > v76[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v78, v79, v80, v81, v82, v83, v84);
          v85 = v76[50];
        }
        *(_DWORD *)(*((_QWORD *)v76 + 7) + v85) = -734491104;
        v76[50] += 4;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v121, (uint64_t)v76, v79, v80, v81, v82, v83, v84);
        v76 = (_DWORD *)*v18;
      }
      v86 = v76[50];
      if (v86 + 4 > v76[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v56, v57, v58, v46, v47, v48, v49);
        v86 = v76[50];
      }
      *(_DWORD *)(*((_QWORD *)v76 + 7) + v86) = -129957755;
      v76[50] += 4;
      v87 = *v18;
      v88 = *(_DWORD *)(*v18 + 200);
      if (v88 + 4 > *(_DWORD *)(*v18 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v87 + 56), v56, v57, v58, v46, v47, v48, v49);
        v88 = *(_DWORD *)(v87 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v87 + 56) + v88) = -129990590;
      *(_DWORD *)(v87 + 200) += 4;
      v89 = *v18;
      v90 = *(_DWORD *)(*v18 + 200);
      if (v90 + 4 > *(_DWORD *)(*v18 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v89 + 56), v56, v57, v58, v46, v47, v48, v49);
        v90 = *(_DWORD *)(v89 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v89 + 56) + v90) = -888863771;
      *(_DWORD *)(v89 + 200) += 4;
      v52 = *v18;
      v53 = 496;
      goto LABEL_56;
    case 1u:
    case 2u:
    case 7u:
    case 8u:
      if (a2 - 1 >= 8)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FE780);
      }
      JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(BOOL)#1}::operator()((uint64_t *)v18[2], (0xE0u >> (a2 - 1)) & 1, v11, v12, v13, v14, v15, v16);
      v20 = *v18;
      v21 = *(_DWORD *)(*v18 + 200);
      if (v21 + 4 > *(_DWORD *)(*v18 + 192))
      {
        v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 + 56), v10, v11, v12, v13, v14, v15, v16).n128_u64[0];
        v21 = *(_DWORD *)(v20 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v20 + 56) + v21) = -129957755;
      *(_DWORD *)(v20 + 200) += 4;
      v22 = *v18;
      v23 = *(_DWORD *)(*v18 + 200);
      if (v23 + 4 > *(_DWORD *)(*v18 + 192))
      {
        v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v22 + 56), v10, v11, v12, v13, v14, v15, v16).n128_u64[0];
        v23 = *(_DWORD *)(v22 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v22 + 56) + v23) = -130023264;
      *(_DWORD *)(v22 + 200) += 4;
      if (a2 == 8 || a2 == 2)
      {
        v24 = v18[1];
        JSC::MacroAssemblerARM64::branchTest64(*v18, 0, 0, 0xFFFFFFFFLL, v13, v14, v15, v16, (uint64_t)&v110, v19);
        v25 = v110;
        if (v110 != -1)
        {
          v26 = *(unsigned int *)(v24 + 12);
          if ((_DWORD)v26 == *(_DWORD *)(v24 + 8))
          {
            v27 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24, (void *)(v26 + 1), (unint64_t)&v110, v12, v13, v14, v15, v16);
            v29 = *v27;
            v28 = (uint64_t *)(v27 + 1);
            v25 = v29;
            LODWORD(v26) = *(_DWORD *)(v24 + 12);
          }
          else
          {
            v28 = &v111;
          }
          v54 = *(_QWORD *)v24 + 12 * v26;
          *(_DWORD *)v54 = v25;
          *(_QWORD *)(v54 + 4) = *v28;
          ++*(_DWORD *)(v24 + 12);
        }
      }
      break;
    case 3u:
    case 9u:
      if (a2 - 3 >= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FE7ECLL);
      }
      JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(BOOL)#1}::operator()((uint64_t *)v18[2], (0x78u >> (a2 - 3)) & 1, v11, v12, v13, v14, v15, v16);
      v50 = *v18;
      v51 = *(_DWORD *)(*v18 + 200);
      if (v51 + 4 > *(_DWORD *)(*v18 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v50 + 56), v43, v44, v45, v46, v47, v48, v49);
        v51 = *(_DWORD *)(v50 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v50 + 56) + v51) = -129957755;
      *(_DWORD *)(v50 + 200) += 4;
      v52 = *v18;
      v53 = 32;
LABEL_56:
      JSC::MacroAssemblerARM64::load64(v52, 0x300000502uLL, v53 & 0xFFFF0000FFFFFFFFLL | 0x200000000, 0, v46, v47, v48, v49);
      break;
    case 4u:
    case 5u:
    case 0xAu:
    case 0xBu:
      __break(0xC471u);
      JUMPOUT(0x1987FE760);
    default:
      break;
  }
  v91 = a1[2];
  v92 = *a1;
  v93 = (JSC::AssemblerBuffer *)(*a1 + 56);
  v94 = *(_DWORD *)(*a1 + 200);
  if (v94 < *(_DWORD *)(*a1 + 52))
  {
    do
    {
      if ((v94 + 4) > *(_DWORD *)(v92 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v93, v10, v11, v12, v13, v14, v15, v16);
        v94 = *(_DWORD *)(v92 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v92 + 56) + v94) = -721215457;
      v94 = *(_DWORD *)(v92 + 200) + 4;
      *(_DWORD *)(v92 + 200) = v94;
    }
    while (v94 < *(_DWORD *)(v92 + 52));
  }
  v95 = v94;
  if ((v94 + 4) > *(_DWORD *)(v92 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v93, v10, v11, v12, v13, v14, v15, v16);
    v95 = *(_DWORD *)(v92 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v92 + 56) + v95) = 335544320;
  *(_DWORD *)(v92 + 200) += 4;
  if (*(_BYTE *)(v92 + 328))
    v96 = 69;
  else
    v96 = 65;
  v104 = v94;
  v105 = 0;
  v106 = v96;
  v107 = 15;
  v108 = -1;
  if (v94 != -1)
  {
    v97 = *(unsigned int *)(v91 + 12);
    if ((_DWORD)v97 == *(_DWORD *)(v91 + 8))
    {
      v98 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v91, (void *)(v97 + 1), (unint64_t)&v104, v12, v13, v14, v15, v16);
      v100 = *v98;
      v99 = v98 + 1;
      v101 = *(_QWORD *)v91 + 12 * *(unsigned int *)(v91 + 12);
      *(_DWORD *)v101 = v100;
    }
    else
    {
      v99 = &v105;
      v101 = *(_QWORD *)v91 + 12 * v97;
      *(_DWORD *)v101 = v94;
    }
    *(_QWORD *)(v101 + 4) = *(_QWORD *)v99;
    ++*(_DWORD *)(v91 + 12);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v109, *a1, v11, v12, v13, v14, v15, v16);
}

void WTF::ScopedLambdaFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump ()(void),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)1>(JSC::VM &)::{lambda(JSC::ResolveType)#1}::operator() const(JSC::ResolveType)::{lambda(void)#1}>::implFunction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  _DWORD *v11;
  unsigned int v12;

  v11 = *(_DWORD **)(a1 + 16);
  v12 = v11[50];
  if (v12 + 4 > v11[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = v11[50];
  }
  *(_DWORD *)(*((_QWORD *)v11 + 7) + v12) = -129989819;
  v11[50] += 4;
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 16), 0, 2, 5, a5, a6, a7, a8, a9);
}

unsigned int *JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)2>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t *v18;
  int8x8_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int *v40;
  int *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  char v70;
  uint64_t v71;
  int *v72;
  int *v73;
  int v74;
  uint64_t v75;
  _DWORD *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  JSC::AssemblerBuffer *v93;
  int v94;
  unsigned int v95;
  char v96;
  uint64_t v97;
  int *v98;
  int *v99;
  int v100;
  uint64_t v101;
  int v103;
  int v104;
  int v105;
  char v106;
  __int16 v107;
  char v108;
  unsigned int v109[3];
  int v110;
  uint64_t v111;
  _QWORD v112[2];
  _DWORD *v113;
  int v114;
  int v115;
  char v116;
  __int16 v117;
  char v118;
  int v119;
  int v120;
  unsigned int v121[3];

  JSC::MacroAssemblerARM64::branch32(*a1, 1, 5, a2, a5, a6, a7, a8, (uint64_t)v109);
  v18 = (uint64_t *)a1[1];
  switch(a2)
  {
    case 0u:
    case 6u:
      v30 = *v18;
      v31 = *(_DWORD *)(*v18 + 200);
      if (v31 + 4 > *(_DWORD *)(*v18 + 192))
      {
        v17 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v30 + 56), v10, v11, v12, v13, v14, v15, v16).n128_u64[0];
        v31 = *(_DWORD *)(v30 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v30 + 56) + v31) = -129990523;
      *(_DWORD *)(v30 + 200) += 4;
      v32 = v18[1];
      JSC::MacroAssemblerARM64::branchTest64(*v18, 0, 5, 0xFFFFFFFFLL, v13, v14, v15, v16, (uint64_t)&v119, v17);
      v38 = v119;
      if (v119 != -1)
      {
        v39 = *(unsigned int *)(v32 + 12);
        if ((_DWORD)v39 == *(_DWORD *)(v32 + 8))
        {
          v40 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32, (void *)(v39 + 1), (unint64_t)&v119, v33, v34, v35, v36, v37);
          v42 = *v40;
          v41 = v40 + 1;
          v38 = v42;
          LODWORD(v39) = *(_DWORD *)(v32 + 12);
        }
        else
        {
          v41 = &v120;
        }
        v55 = *(_QWORD *)v32 + 12 * v39;
        *(_DWORD *)v55 = v38;
        *(_QWORD *)(v55 + 4) = *(_QWORD *)v41;
        ++*(_DWORD *)(v32 + 12);
      }
      JSC::MacroAssemblerARM64::urshift64((_DWORD *)*v18, 5, 4, 5, v34, v35, v36, v37);
      v59 = *v18;
      if (!*(_BYTE *)(*v18 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1987FEFC8);
      }
      v60 = v18[1];
      *(_DWORD *)(*(_QWORD *)(v59 + 296) + 208) &= ~*(_DWORD *)(v59 + 320);
      v61 = *(_BYTE *)(v59 + 304) & 0x1F | 0xB8400040;
      v62 = *(_DWORD *)(v59 + 200);
      if (v62 + 4 > *(_DWORD *)(v59 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v62 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v62) = v61;
      v63 = *(_DWORD *)(v59 + 200);
      v64 = v63 + 4;
      *(_DWORD *)(v59 + 200) = v63 + 4;
      if ((v63 + 8) > *(_DWORD *)(v59 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v64 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v64) = 1795490367;
      v65 = *(_DWORD *)(v59 + 200) + 4;
      *(_DWORD *)(v59 + 200) = v65;
      if (*(_BYTE *)(v59 + 328))
      {
        while ((signed int)v65 < *(_DWORD *)(v59 + 52))
        {
          if (v65 + 4 > *(_DWORD *)(v59 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
            v65 = *(_DWORD *)(v59 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v59 + 56) + v65) = -721215457;
          v65 = *(_DWORD *)(v59 + 200) + 4;
          *(_DWORD *)(v59 + 200) = v65;
        }
        *(_DWORD *)(v59 + 208) = 0;
      }
      if (v65 + 4 > *(_DWORD *)(v59 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v65 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v65) = 1409286145;
      v66 = *(_DWORD *)(v59 + 200);
      v67 = v66 + 4;
      *(_DWORD *)(v59 + 200) = v66 + 4;
      v68 = v66 + 8;
      v69 = v66 + 4;
      if (v68 > *(_DWORD *)(v59 + 192))
      {
        v103 = v67;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v67 = v103;
        v69 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v69) = -721215457;
      *(_DWORD *)(v59 + 200) += 4;
      if (*(_BYTE *)(v59 + 328))
        v70 = -122;
      else
        v70 = -126;
      v114 = v67;
      v115 = 0;
      v116 = v70;
      v117 = 1;
      v118 = -1;
      if (v67 != -1)
      {
        v71 = *(unsigned int *)(v60 + 12);
        if ((_DWORD)v71 == *(_DWORD *)(v60 + 8))
        {
          v72 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v60, (void *)(v71 + 1), (unint64_t)&v114, v58, v46, v47, v48, v49);
          v74 = *v72;
          v73 = v72 + 1;
          v67 = v74;
          LODWORD(v71) = *(_DWORD *)(v60 + 12);
        }
        else
        {
          v73 = &v115;
        }
        v75 = *(_QWORD *)v60 + 12 * v71;
        *(_DWORD *)v75 = v67;
        *(_QWORD *)(v75 + 4) = *(_QWORD *)v73;
        ++*(_DWORD *)(v60 + 12);
      }
      v76 = (_DWORD *)*v18;
      v112[0] = WTF::ScopedLambdaFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump ()(void),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)2>(JSC::VM &)::{lambda(JSC::ResolveType)#1}::operator() const(JSC::ResolveType)::{lambda(void)#1}>::implFunction;
      v112[1] = v112;
      v113 = v76;
      if (HIBYTE(word_1ECF4C428))
      {
        v77 = v76[50];
        if (v77 + 4 > v76[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v56, v57, v58, v46, v47, v48, v49);
          v77 = v76[50];
        }
        *(_DWORD *)(*((_QWORD *)v76 + 7) + v77) = -129989819;
        v76[50] += 4;
        JSC::MacroAssemblerARM64::branch64((uint64_t)v113, 0, 2, 5, v46, v47, v48, v49, (uint64_t)v121);
        v85 = v76[50];
        if (v85 + 4 > v76[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v78, v79, v80, v81, v82, v83, v84);
          v85 = v76[50];
        }
        *(_DWORD *)(*((_QWORD *)v76 + 7) + v85) = -734491104;
        v76[50] += 4;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v121, (uint64_t)v76, v79, v80, v81, v82, v83, v84);
        v76 = (_DWORD *)*v18;
      }
      v86 = v76[50];
      if (v86 + 4 > v76[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v56, v57, v58, v46, v47, v48, v49);
        v86 = v76[50];
      }
      *(_DWORD *)(*((_QWORD *)v76 + 7) + v86) = -129957755;
      v76[50] += 4;
      v87 = *v18;
      v88 = *(_DWORD *)(*v18 + 200);
      if (v88 + 4 > *(_DWORD *)(*v18 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v87 + 56), v56, v57, v58, v46, v47, v48, v49);
        v88 = *(_DWORD *)(v87 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v87 + 56) + v88) = -129990590;
      *(_DWORD *)(v87 + 200) += 4;
      v89 = *v18;
      v90 = *(_DWORD *)(*v18 + 200);
      if (v90 + 4 > *(_DWORD *)(*v18 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v89 + 56), v56, v57, v58, v46, v47, v48, v49);
        v90 = *(_DWORD *)(v89 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v89 + 56) + v90) = -888863771;
      *(_DWORD *)(v89 + 200) += 4;
      v52 = *v18;
      v53 = 496;
      goto LABEL_56;
    case 1u:
    case 2u:
    case 7u:
    case 8u:
      if (a2 - 1 >= 8)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FF0B0);
      }
      JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(BOOL)#1}::operator()((uint64_t *)v18[2], (0xE0u >> (a2 - 1)) & 1, v11, v12, v13, v14, v15, v16);
      v20 = *v18;
      v21 = *(_DWORD *)(*v18 + 200);
      if (v21 + 4 > *(_DWORD *)(*v18 + 192))
      {
        v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 + 56), v10, v11, v12, v13, v14, v15, v16).n128_u64[0];
        v21 = *(_DWORD *)(v20 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v20 + 56) + v21) = -129957755;
      *(_DWORD *)(v20 + 200) += 4;
      v22 = *v18;
      v23 = *(_DWORD *)(*v18 + 200);
      if (v23 + 4 > *(_DWORD *)(*v18 + 192))
      {
        v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v22 + 56), v10, v11, v12, v13, v14, v15, v16).n128_u64[0];
        v23 = *(_DWORD *)(v22 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v22 + 56) + v23) = -130023264;
      *(_DWORD *)(v22 + 200) += 4;
      if (a2 == 8 || a2 == 2)
      {
        v24 = v18[1];
        JSC::MacroAssemblerARM64::branchTest64(*v18, 0, 0, 0xFFFFFFFFLL, v13, v14, v15, v16, (uint64_t)&v110, v19);
        v25 = v110;
        if (v110 != -1)
        {
          v26 = *(unsigned int *)(v24 + 12);
          if ((_DWORD)v26 == *(_DWORD *)(v24 + 8))
          {
            v27 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24, (void *)(v26 + 1), (unint64_t)&v110, v12, v13, v14, v15, v16);
            v29 = *v27;
            v28 = (uint64_t *)(v27 + 1);
            v25 = v29;
            LODWORD(v26) = *(_DWORD *)(v24 + 12);
          }
          else
          {
            v28 = &v111;
          }
          v54 = *(_QWORD *)v24 + 12 * v26;
          *(_DWORD *)v54 = v25;
          *(_QWORD *)(v54 + 4) = *v28;
          ++*(_DWORD *)(v24 + 12);
        }
      }
      break;
    case 3u:
    case 9u:
      if (a2 - 3 >= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FF11CLL);
      }
      JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(BOOL)#1}::operator()((uint64_t *)v18[2], (0x78u >> (a2 - 3)) & 1, v11, v12, v13, v14, v15, v16);
      v50 = *v18;
      v51 = *(_DWORD *)(*v18 + 200);
      if (v51 + 4 > *(_DWORD *)(*v18 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v50 + 56), v43, v44, v45, v46, v47, v48, v49);
        v51 = *(_DWORD *)(v50 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v50 + 56) + v51) = -129957755;
      *(_DWORD *)(v50 + 200) += 4;
      v52 = *v18;
      v53 = 32;
LABEL_56:
      JSC::MacroAssemblerARM64::load64(v52, 0x300000502uLL, v53 & 0xFFFF0000FFFFFFFFLL | 0x200000000, 0, v46, v47, v48, v49);
      break;
    case 4u:
    case 5u:
    case 0xAu:
    case 0xBu:
      __break(0xC471u);
      JUMPOUT(0x1987FF090);
    default:
      break;
  }
  v91 = a1[2];
  v92 = *a1;
  v93 = (JSC::AssemblerBuffer *)(*a1 + 56);
  v94 = *(_DWORD *)(*a1 + 200);
  if (v94 < *(_DWORD *)(*a1 + 52))
  {
    do
    {
      if ((v94 + 4) > *(_DWORD *)(v92 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v93, v10, v11, v12, v13, v14, v15, v16);
        v94 = *(_DWORD *)(v92 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v92 + 56) + v94) = -721215457;
      v94 = *(_DWORD *)(v92 + 200) + 4;
      *(_DWORD *)(v92 + 200) = v94;
    }
    while (v94 < *(_DWORD *)(v92 + 52));
  }
  v95 = v94;
  if ((v94 + 4) > *(_DWORD *)(v92 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v93, v10, v11, v12, v13, v14, v15, v16);
    v95 = *(_DWORD *)(v92 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v92 + 56) + v95) = 335544320;
  *(_DWORD *)(v92 + 200) += 4;
  if (*(_BYTE *)(v92 + 328))
    v96 = 69;
  else
    v96 = 65;
  v104 = v94;
  v105 = 0;
  v106 = v96;
  v107 = 15;
  v108 = -1;
  if (v94 != -1)
  {
    v97 = *(unsigned int *)(v91 + 12);
    if ((_DWORD)v97 == *(_DWORD *)(v91 + 8))
    {
      v98 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v91, (void *)(v97 + 1), (unint64_t)&v104, v12, v13, v14, v15, v16);
      v100 = *v98;
      v99 = v98 + 1;
      v101 = *(_QWORD *)v91 + 12 * *(unsigned int *)(v91 + 12);
      *(_DWORD *)v101 = v100;
    }
    else
    {
      v99 = &v105;
      v101 = *(_QWORD *)v91 + 12 * v97;
      *(_DWORD *)v101 = v94;
    }
    *(_QWORD *)(v101 + 4) = *(_QWORD *)v99;
    ++*(_DWORD *)(v91 + 12);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v109, *a1, v11, v12, v13, v14, v15, v16);
}

void WTF::ScopedLambdaFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump ()(void),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)2>(JSC::VM &)::{lambda(JSC::ResolveType)#1}::operator() const(JSC::ResolveType)::{lambda(void)#1}>::implFunction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  _DWORD *v11;
  unsigned int v12;

  v11 = *(_DWORD **)(a1 + 16);
  v12 = v11[50];
  if (v12 + 4 > v11[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = v11[50];
  }
  *(_DWORD *)(*((_QWORD *)v11 + 7) + v12) = -129989819;
  v11[50] += 4;
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 16), 0, 2, 5, a5, a6, a7, a8, a9);
}

unsigned int *JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t *v18;
  int8x8_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int *v40;
  int *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  char v70;
  uint64_t v71;
  int *v72;
  int *v73;
  int v74;
  uint64_t v75;
  _DWORD *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  JSC::AssemblerBuffer *v93;
  int v94;
  unsigned int v95;
  char v96;
  uint64_t v97;
  int *v98;
  int *v99;
  int v100;
  uint64_t v101;
  int v103;
  int v104;
  int v105;
  char v106;
  __int16 v107;
  char v108;
  unsigned int v109[3];
  int v110;
  uint64_t v111;
  _QWORD v112[2];
  _DWORD *v113;
  int v114;
  int v115;
  char v116;
  __int16 v117;
  char v118;
  int v119;
  int v120;
  unsigned int v121[3];

  JSC::MacroAssemblerARM64::branch32(*a1, 1, 5, a2, a5, a6, a7, a8, (uint64_t)v109);
  v18 = (uint64_t *)a1[1];
  switch(a2)
  {
    case 0u:
    case 6u:
      v30 = *v18;
      v31 = *(_DWORD *)(*v18 + 200);
      if (v31 + 4 > *(_DWORD *)(*v18 + 192))
      {
        v17 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v30 + 56), v10, v11, v12, v13, v14, v15, v16).n128_u64[0];
        v31 = *(_DWORD *)(v30 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v30 + 56) + v31) = -129990523;
      *(_DWORD *)(v30 + 200) += 4;
      v32 = v18[1];
      JSC::MacroAssemblerARM64::branchTest64(*v18, 0, 5, 0xFFFFFFFFLL, v13, v14, v15, v16, (uint64_t)&v119, v17);
      v38 = v119;
      if (v119 != -1)
      {
        v39 = *(unsigned int *)(v32 + 12);
        if ((_DWORD)v39 == *(_DWORD *)(v32 + 8))
        {
          v40 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32, (void *)(v39 + 1), (unint64_t)&v119, v33, v34, v35, v36, v37);
          v42 = *v40;
          v41 = v40 + 1;
          v38 = v42;
          LODWORD(v39) = *(_DWORD *)(v32 + 12);
        }
        else
        {
          v41 = &v120;
        }
        v55 = *(_QWORD *)v32 + 12 * v39;
        *(_DWORD *)v55 = v38;
        *(_QWORD *)(v55 + 4) = *(_QWORD *)v41;
        ++*(_DWORD *)(v32 + 12);
      }
      JSC::MacroAssemblerARM64::urshift64((_DWORD *)*v18, 5, 4, 5, v34, v35, v36, v37);
      v59 = *v18;
      if (!*(_BYTE *)(*v18 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1987FF8F8);
      }
      v60 = v18[1];
      *(_DWORD *)(*(_QWORD *)(v59 + 296) + 208) &= ~*(_DWORD *)(v59 + 320);
      v61 = *(_BYTE *)(v59 + 304) & 0x1F | 0xB8400040;
      v62 = *(_DWORD *)(v59 + 200);
      if (v62 + 4 > *(_DWORD *)(v59 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v62 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v62) = v61;
      v63 = *(_DWORD *)(v59 + 200);
      v64 = v63 + 4;
      *(_DWORD *)(v59 + 200) = v63 + 4;
      if ((v63 + 8) > *(_DWORD *)(v59 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v64 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v64) = 1795490367;
      v65 = *(_DWORD *)(v59 + 200) + 4;
      *(_DWORD *)(v59 + 200) = v65;
      if (*(_BYTE *)(v59 + 328))
      {
        while ((signed int)v65 < *(_DWORD *)(v59 + 52))
        {
          if (v65 + 4 > *(_DWORD *)(v59 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
            v65 = *(_DWORD *)(v59 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v59 + 56) + v65) = -721215457;
          v65 = *(_DWORD *)(v59 + 200) + 4;
          *(_DWORD *)(v59 + 200) = v65;
        }
        *(_DWORD *)(v59 + 208) = 0;
      }
      if (v65 + 4 > *(_DWORD *)(v59 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v65 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v65) = 1409286145;
      v66 = *(_DWORD *)(v59 + 200);
      v67 = v66 + 4;
      *(_DWORD *)(v59 + 200) = v66 + 4;
      v68 = v66 + 8;
      v69 = v66 + 4;
      if (v68 > *(_DWORD *)(v59 + 192))
      {
        v103 = v67;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v67 = v103;
        v69 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v69) = -721215457;
      *(_DWORD *)(v59 + 200) += 4;
      if (*(_BYTE *)(v59 + 328))
        v70 = -122;
      else
        v70 = -126;
      v114 = v67;
      v115 = 0;
      v116 = v70;
      v117 = 1;
      v118 = -1;
      if (v67 != -1)
      {
        v71 = *(unsigned int *)(v60 + 12);
        if ((_DWORD)v71 == *(_DWORD *)(v60 + 8))
        {
          v72 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v60, (void *)(v71 + 1), (unint64_t)&v114, v58, v46, v47, v48, v49);
          v74 = *v72;
          v73 = v72 + 1;
          v67 = v74;
          LODWORD(v71) = *(_DWORD *)(v60 + 12);
        }
        else
        {
          v73 = &v115;
        }
        v75 = *(_QWORD *)v60 + 12 * v71;
        *(_DWORD *)v75 = v67;
        *(_QWORD *)(v75 + 4) = *(_QWORD *)v73;
        ++*(_DWORD *)(v60 + 12);
      }
      v76 = (_DWORD *)*v18;
      v112[0] = WTF::ScopedLambdaFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump ()(void),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(JSC::ResolveType)#1}::operator() const(JSC::ResolveType)::{lambda(void)#1}>::implFunction;
      v112[1] = v112;
      v113 = v76;
      if (HIBYTE(word_1ECF4C428))
      {
        v77 = v76[50];
        if (v77 + 4 > v76[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v56, v57, v58, v46, v47, v48, v49);
          v77 = v76[50];
        }
        *(_DWORD *)(*((_QWORD *)v76 + 7) + v77) = -129989819;
        v76[50] += 4;
        JSC::MacroAssemblerARM64::branch64((uint64_t)v113, 0, 2, 5, v46, v47, v48, v49, (uint64_t)v121);
        v85 = v76[50];
        if (v85 + 4 > v76[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v78, v79, v80, v81, v82, v83, v84);
          v85 = v76[50];
        }
        *(_DWORD *)(*((_QWORD *)v76 + 7) + v85) = -734491104;
        v76[50] += 4;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v121, (uint64_t)v76, v79, v80, v81, v82, v83, v84);
        v76 = (_DWORD *)*v18;
      }
      v86 = v76[50];
      if (v86 + 4 > v76[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v56, v57, v58, v46, v47, v48, v49);
        v86 = v76[50];
      }
      *(_DWORD *)(*((_QWORD *)v76 + 7) + v86) = -129957755;
      v76[50] += 4;
      v87 = *v18;
      v88 = *(_DWORD *)(*v18 + 200);
      if (v88 + 4 > *(_DWORD *)(*v18 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v87 + 56), v56, v57, v58, v46, v47, v48, v49);
        v88 = *(_DWORD *)(v87 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v87 + 56) + v88) = -129990590;
      *(_DWORD *)(v87 + 200) += 4;
      v89 = *v18;
      v90 = *(_DWORD *)(*v18 + 200);
      if (v90 + 4 > *(_DWORD *)(*v18 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v89 + 56), v56, v57, v58, v46, v47, v48, v49);
        v90 = *(_DWORD *)(v89 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v89 + 56) + v90) = -888863771;
      *(_DWORD *)(v89 + 200) += 4;
      v52 = *v18;
      v53 = 496;
      goto LABEL_56;
    case 1u:
    case 2u:
    case 7u:
    case 8u:
      if (a2 - 1 >= 8)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FF9E0);
      }
      JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(BOOL)#1}::operator()((uint64_t *)v18[2], (0xE0u >> (a2 - 1)) & 1, v11, v12, v13, v14, v15, v16);
      v20 = *v18;
      v21 = *(_DWORD *)(*v18 + 200);
      if (v21 + 4 > *(_DWORD *)(*v18 + 192))
      {
        v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 + 56), v10, v11, v12, v13, v14, v15, v16).n128_u64[0];
        v21 = *(_DWORD *)(v20 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v20 + 56) + v21) = -129957755;
      *(_DWORD *)(v20 + 200) += 4;
      v22 = *v18;
      v23 = *(_DWORD *)(*v18 + 200);
      if (v23 + 4 > *(_DWORD *)(*v18 + 192))
      {
        v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v22 + 56), v10, v11, v12, v13, v14, v15, v16).n128_u64[0];
        v23 = *(_DWORD *)(v22 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v22 + 56) + v23) = -130023264;
      *(_DWORD *)(v22 + 200) += 4;
      if (a2 == 8 || a2 == 2)
      {
        v24 = v18[1];
        JSC::MacroAssemblerARM64::branchTest64(*v18, 0, 0, 0xFFFFFFFFLL, v13, v14, v15, v16, (uint64_t)&v110, v19);
        v25 = v110;
        if (v110 != -1)
        {
          v26 = *(unsigned int *)(v24 + 12);
          if ((_DWORD)v26 == *(_DWORD *)(v24 + 8))
          {
            v27 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24, (void *)(v26 + 1), (unint64_t)&v110, v12, v13, v14, v15, v16);
            v29 = *v27;
            v28 = (uint64_t *)(v27 + 1);
            v25 = v29;
            LODWORD(v26) = *(_DWORD *)(v24 + 12);
          }
          else
          {
            v28 = &v111;
          }
          v54 = *(_QWORD *)v24 + 12 * v26;
          *(_DWORD *)v54 = v25;
          *(_QWORD *)(v54 + 4) = *v28;
          ++*(_DWORD *)(v24 + 12);
        }
      }
      break;
    case 3u:
    case 9u:
      if (a2 - 3 >= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1987FFA4CLL);
      }
      JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(BOOL)#1}::operator()((uint64_t *)v18[2], (0x78u >> (a2 - 3)) & 1, v11, v12, v13, v14, v15, v16);
      v50 = *v18;
      v51 = *(_DWORD *)(*v18 + 200);
      if (v51 + 4 > *(_DWORD *)(*v18 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v50 + 56), v43, v44, v45, v46, v47, v48, v49);
        v51 = *(_DWORD *)(v50 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v50 + 56) + v51) = -129957755;
      *(_DWORD *)(v50 + 200) += 4;
      v52 = *v18;
      v53 = 32;
LABEL_56:
      JSC::MacroAssemblerARM64::load64(v52, 0x300000502uLL, v53 & 0xFFFF0000FFFFFFFFLL | 0x200000000, 0, v46, v47, v48, v49);
      break;
    case 4u:
    case 5u:
    case 0xAu:
    case 0xBu:
      __break(0xC471u);
      JUMPOUT(0x1987FF9C0);
    default:
      break;
  }
  v91 = a1[2];
  v92 = *a1;
  v93 = (JSC::AssemblerBuffer *)(*a1 + 56);
  v94 = *(_DWORD *)(*a1 + 200);
  if (v94 < *(_DWORD *)(*a1 + 52))
  {
    do
    {
      if ((v94 + 4) > *(_DWORD *)(v92 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v93, v10, v11, v12, v13, v14, v15, v16);
        v94 = *(_DWORD *)(v92 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v92 + 56) + v94) = -721215457;
      v94 = *(_DWORD *)(v92 + 200) + 4;
      *(_DWORD *)(v92 + 200) = v94;
    }
    while (v94 < *(_DWORD *)(v92 + 52));
  }
  v95 = v94;
  if ((v94 + 4) > *(_DWORD *)(v92 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v93, v10, v11, v12, v13, v14, v15, v16);
    v95 = *(_DWORD *)(v92 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v92 + 56) + v95) = 335544320;
  *(_DWORD *)(v92 + 200) += 4;
  if (*(_BYTE *)(v92 + 328))
    v96 = 69;
  else
    v96 = 65;
  v104 = v94;
  v105 = 0;
  v106 = v96;
  v107 = 15;
  v108 = -1;
  if (v94 != -1)
  {
    v97 = *(unsigned int *)(v91 + 12);
    if ((_DWORD)v97 == *(_DWORD *)(v91 + 8))
    {
      v98 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v91, (void *)(v97 + 1), (unint64_t)&v104, v12, v13, v14, v15, v16);
      v100 = *v98;
      v99 = v98 + 1;
      v101 = *(_QWORD *)v91 + 12 * *(unsigned int *)(v91 + 12);
      *(_DWORD *)v101 = v100;
    }
    else
    {
      v99 = &v105;
      v101 = *(_QWORD *)v91 + 12 * v97;
      *(_DWORD *)v101 = v94;
    }
    *(_QWORD *)(v101 + 4) = *(_QWORD *)v99;
    ++*(_DWORD *)(v91 + 12);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v109, *a1, v11, v12, v13, v14, v15, v16);
}

void WTF::ScopedLambdaFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump ()(void),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)7>(JSC::VM &)::{lambda(JSC::ResolveType)#1}::operator() const(JSC::ResolveType)::{lambda(void)#1}>::implFunction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  _DWORD *v11;
  unsigned int v12;

  v11 = *(_DWORD **)(a1 + 16);
  v12 = v11[50];
  if (v12 + 4 > v11[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = v11[50];
  }
  *(_DWORD *)(*((_QWORD *)v11 + 7) + v12) = -129989819;
  v11[50] += 4;
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 16), 0, 2, 5, a5, a6, a7, a8, a9);
}

unsigned int *JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)8>(JSC::VM &)::{lambda(JSC::ResolveType)#2}::operator()(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t *v18;
  int8x8_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int *v40;
  int *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  char v70;
  uint64_t v71;
  int *v72;
  int *v73;
  int v74;
  uint64_t v75;
  _DWORD *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  JSC::AssemblerBuffer *v93;
  int v94;
  unsigned int v95;
  char v96;
  uint64_t v97;
  int *v98;
  int *v99;
  int v100;
  uint64_t v101;
  int v103;
  int v104;
  int v105;
  char v106;
  __int16 v107;
  char v108;
  unsigned int v109[3];
  int v110;
  uint64_t v111;
  _QWORD v112[2];
  _DWORD *v113;
  int v114;
  int v115;
  char v116;
  __int16 v117;
  char v118;
  int v119;
  int v120;
  unsigned int v121[3];

  JSC::MacroAssemblerARM64::branch32(*a1, 1, 5, a2, a5, a6, a7, a8, (uint64_t)v109);
  v18 = (uint64_t *)a1[1];
  switch(a2)
  {
    case 0u:
    case 6u:
      v30 = *v18;
      v31 = *(_DWORD *)(*v18 + 200);
      if (v31 + 4 > *(_DWORD *)(*v18 + 192))
      {
        v17 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v30 + 56), v10, v11, v12, v13, v14, v15, v16).n128_u64[0];
        v31 = *(_DWORD *)(v30 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v30 + 56) + v31) = -129990523;
      *(_DWORD *)(v30 + 200) += 4;
      v32 = v18[1];
      JSC::MacroAssemblerARM64::branchTest64(*v18, 0, 5, 0xFFFFFFFFLL, v13, v14, v15, v16, (uint64_t)&v119, v17);
      v38 = v119;
      if (v119 != -1)
      {
        v39 = *(unsigned int *)(v32 + 12);
        if ((_DWORD)v39 == *(_DWORD *)(v32 + 8))
        {
          v40 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32, (void *)(v39 + 1), (unint64_t)&v119, v33, v34, v35, v36, v37);
          v42 = *v40;
          v41 = v40 + 1;
          v38 = v42;
          LODWORD(v39) = *(_DWORD *)(v32 + 12);
        }
        else
        {
          v41 = &v120;
        }
        v55 = *(_QWORD *)v32 + 12 * v39;
        *(_DWORD *)v55 = v38;
        *(_QWORD *)(v55 + 4) = *(_QWORD *)v41;
        ++*(_DWORD *)(v32 + 12);
      }
      JSC::MacroAssemblerARM64::urshift64((_DWORD *)*v18, 5, 4, 5, v34, v35, v36, v37);
      v59 = *v18;
      if (!*(_BYTE *)(*v18 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198800228);
      }
      v60 = v18[1];
      *(_DWORD *)(*(_QWORD *)(v59 + 296) + 208) &= ~*(_DWORD *)(v59 + 320);
      v61 = *(_BYTE *)(v59 + 304) & 0x1F | 0xB8400040;
      v62 = *(_DWORD *)(v59 + 200);
      if (v62 + 4 > *(_DWORD *)(v59 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v62 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v62) = v61;
      v63 = *(_DWORD *)(v59 + 200);
      v64 = v63 + 4;
      *(_DWORD *)(v59 + 200) = v63 + 4;
      if ((v63 + 8) > *(_DWORD *)(v59 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v64 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v64) = 1795490367;
      v65 = *(_DWORD *)(v59 + 200) + 4;
      *(_DWORD *)(v59 + 200) = v65;
      if (*(_BYTE *)(v59 + 328))
      {
        while ((signed int)v65 < *(_DWORD *)(v59 + 52))
        {
          if (v65 + 4 > *(_DWORD *)(v59 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
            v65 = *(_DWORD *)(v59 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v59 + 56) + v65) = -721215457;
          v65 = *(_DWORD *)(v59 + 200) + 4;
          *(_DWORD *)(v59 + 200) = v65;
        }
        *(_DWORD *)(v59 + 208) = 0;
      }
      if (v65 + 4 > *(_DWORD *)(v59 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v65 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v65) = 1409286145;
      v66 = *(_DWORD *)(v59 + 200);
      v67 = v66 + 4;
      *(_DWORD *)(v59 + 200) = v66 + 4;
      v68 = v66 + 8;
      v69 = v66 + 4;
      if (v68 > *(_DWORD *)(v59 + 192))
      {
        v103 = v67;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 56), v56, v57, v58, v46, v47, v48, v49);
        v67 = v103;
        v69 = *(_DWORD *)(v59 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v59 + 56) + v69) = -721215457;
      *(_DWORD *)(v59 + 200) += 4;
      if (*(_BYTE *)(v59 + 328))
        v70 = -122;
      else
        v70 = -126;
      v114 = v67;
      v115 = 0;
      v116 = v70;
      v117 = 1;
      v118 = -1;
      if (v67 != -1)
      {
        v71 = *(unsigned int *)(v60 + 12);
        if ((_DWORD)v71 == *(_DWORD *)(v60 + 8))
        {
          v72 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v60, (void *)(v71 + 1), (unint64_t)&v114, v58, v46, v47, v48, v49);
          v74 = *v72;
          v73 = v72 + 1;
          v67 = v74;
          LODWORD(v71) = *(_DWORD *)(v60 + 12);
        }
        else
        {
          v73 = &v115;
        }
        v75 = *(_QWORD *)v60 + 12 * v71;
        *(_DWORD *)v75 = v67;
        *(_QWORD *)(v75 + 4) = *(_QWORD *)v73;
        ++*(_DWORD *)(v60 + 12);
      }
      v76 = (_DWORD *)*v18;
      v112[0] = WTF::ScopedLambdaFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump ()(void),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)8>(JSC::VM &)::{lambda(JSC::ResolveType)#1}::operator() const(JSC::ResolveType)::{lambda(void)#1}>::implFunction;
      v112[1] = v112;
      v113 = v76;
      if (HIBYTE(word_1ECF4C428))
      {
        v77 = v76[50];
        if (v77 + 4 > v76[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v56, v57, v58, v46, v47, v48, v49);
          v77 = v76[50];
        }
        *(_DWORD *)(*((_QWORD *)v76 + 7) + v77) = -129989819;
        v76[50] += 4;
        JSC::MacroAssemblerARM64::branch64((uint64_t)v113, 0, 2, 5, v46, v47, v48, v49, (uint64_t)v121);
        v85 = v76[50];
        if (v85 + 4 > v76[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v78, v79, v80, v81, v82, v83, v84);
          v85 = v76[50];
        }
        *(_DWORD *)(*((_QWORD *)v76 + 7) + v85) = -734491104;
        v76[50] += 4;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v121, (uint64_t)v76, v79, v80, v81, v82, v83, v84);
        v76 = (_DWORD *)*v18;
      }
      v86 = v76[50];
      if (v86 + 4 > v76[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v56, v57, v58, v46, v47, v48, v49);
        v86 = v76[50];
      }
      *(_DWORD *)(*((_QWORD *)v76 + 7) + v86) = -129957755;
      v76[50] += 4;
      v87 = *v18;
      v88 = *(_DWORD *)(*v18 + 200);
      if (v88 + 4 > *(_DWORD *)(*v18 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v87 + 56), v56, v57, v58, v46, v47, v48, v49);
        v88 = *(_DWORD *)(v87 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v87 + 56) + v88) = -129990590;
      *(_DWORD *)(v87 + 200) += 4;
      v89 = *v18;
      v90 = *(_DWORD *)(*v18 + 200);
      if (v90 + 4 > *(_DWORD *)(*v18 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v89 + 56), v56, v57, v58, v46, v47, v48, v49);
        v90 = *(_DWORD *)(v89 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v89 + 56) + v90) = -888863771;
      *(_DWORD *)(v89 + 200) += 4;
      v52 = *v18;
      v53 = 496;
      goto LABEL_56;
    case 1u:
    case 2u:
    case 7u:
    case 8u:
      if (a2 - 1 >= 8)
      {
        __break(0xC471u);
        JUMPOUT(0x198800310);
      }
      JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(BOOL)#1}::operator()((uint64_t *)v18[2], (0xE0u >> (a2 - 1)) & 1, v11, v12, v13, v14, v15, v16);
      v20 = *v18;
      v21 = *(_DWORD *)(*v18 + 200);
      if (v21 + 4 > *(_DWORD *)(*v18 + 192))
      {
        v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 + 56), v10, v11, v12, v13, v14, v15, v16).n128_u64[0];
        v21 = *(_DWORD *)(v20 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v20 + 56) + v21) = -129957755;
      *(_DWORD *)(v20 + 200) += 4;
      v22 = *v18;
      v23 = *(_DWORD *)(*v18 + 200);
      if (v23 + 4 > *(_DWORD *)(*v18 + 192))
      {
        v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v22 + 56), v10, v11, v12, v13, v14, v15, v16).n128_u64[0];
        v23 = *(_DWORD *)(v22 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v22 + 56) + v23) = -130023264;
      *(_DWORD *)(v22 + 200) += 4;
      if (a2 == 8 || a2 == 2)
      {
        v24 = v18[1];
        JSC::MacroAssemblerARM64::branchTest64(*v18, 0, 0, 0xFFFFFFFFLL, v13, v14, v15, v16, (uint64_t)&v110, v19);
        v25 = v110;
        if (v110 != -1)
        {
          v26 = *(unsigned int *)(v24 + 12);
          if ((_DWORD)v26 == *(_DWORD *)(v24 + 8))
          {
            v27 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24, (void *)(v26 + 1), (unint64_t)&v110, v12, v13, v14, v15, v16);
            v29 = *v27;
            v28 = (uint64_t *)(v27 + 1);
            v25 = v29;
            LODWORD(v26) = *(_DWORD *)(v24 + 12);
          }
          else
          {
            v28 = &v111;
          }
          v54 = *(_QWORD *)v24 + 12 * v26;
          *(_DWORD *)v54 = v25;
          *(_QWORD *)(v54 + 4) = *v28;
          ++*(_DWORD *)(v24 + 12);
        }
      }
      break;
    case 3u:
    case 9u:
      if (a2 - 3 >= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x19880037CLL);
      }
      JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)0>(JSC::VM &)::{lambda(BOOL)#1}::operator()((uint64_t *)v18[2], (0x78u >> (a2 - 3)) & 1, v11, v12, v13, v14, v15, v16);
      v50 = *v18;
      v51 = *(_DWORD *)(*v18 + 200);
      if (v51 + 4 > *(_DWORD *)(*v18 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v50 + 56), v43, v44, v45, v46, v47, v48, v49);
        v51 = *(_DWORD *)(v50 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v50 + 56) + v51) = -129957755;
      *(_DWORD *)(v50 + 200) += 4;
      v52 = *v18;
      v53 = 32;
LABEL_56:
      JSC::MacroAssemblerARM64::load64(v52, 0x300000502uLL, v53 & 0xFFFF0000FFFFFFFFLL | 0x200000000, 0, v46, v47, v48, v49);
      break;
    case 4u:
    case 5u:
    case 0xAu:
    case 0xBu:
      __break(0xC471u);
      JUMPOUT(0x1988002F0);
    default:
      break;
  }
  v91 = a1[2];
  v92 = *a1;
  v93 = (JSC::AssemblerBuffer *)(*a1 + 56);
  v94 = *(_DWORD *)(*a1 + 200);
  if (v94 < *(_DWORD *)(*a1 + 52))
  {
    do
    {
      if ((v94 + 4) > *(_DWORD *)(v92 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v93, v10, v11, v12, v13, v14, v15, v16);
        v94 = *(_DWORD *)(v92 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v92 + 56) + v94) = -721215457;
      v94 = *(_DWORD *)(v92 + 200) + 4;
      *(_DWORD *)(v92 + 200) = v94;
    }
    while (v94 < *(_DWORD *)(v92 + 52));
  }
  v95 = v94;
  if ((v94 + 4) > *(_DWORD *)(v92 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v93, v10, v11, v12, v13, v14, v15, v16);
    v95 = *(_DWORD *)(v92 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v92 + 56) + v95) = 335544320;
  *(_DWORD *)(v92 + 200) += 4;
  if (*(_BYTE *)(v92 + 328))
    v96 = 69;
  else
    v96 = 65;
  v104 = v94;
  v105 = 0;
  v106 = v96;
  v107 = 15;
  v108 = -1;
  if (v94 != -1)
  {
    v97 = *(unsigned int *)(v91 + 12);
    if ((_DWORD)v97 == *(_DWORD *)(v91 + 8))
    {
      v98 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v91, (void *)(v97 + 1), (unint64_t)&v104, v12, v13, v14, v15, v16);
      v100 = *v98;
      v99 = v98 + 1;
      v101 = *(_QWORD *)v91 + 12 * *(unsigned int *)(v91 + 12);
      *(_DWORD *)v101 = v100;
    }
    else
    {
      v99 = &v105;
      v101 = *(_QWORD *)v91 + 12 * v97;
      *(_DWORD *)v101 = v94;
    }
    *(_QWORD *)(v101 + 4) = *(_QWORD *)v99;
    ++*(_DWORD *)(v91 + 12);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v109, *a1, v11, v12, v13, v14, v15, v16);
}

void WTF::ScopedLambdaFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump ()(void),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> JSC::JIT::generateOpGetFromScopeThunk<(JSC::ResolveType)8>(JSC::VM &)::{lambda(JSC::ResolveType)#1}::operator() const(JSC::ResolveType)::{lambda(void)#1}>::implFunction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  _DWORD *v11;
  unsigned int v12;

  v11 = *(_DWORD **)(a1 + 16);
  v12 = v11[50];
  if (v12 + 4 > v11[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = v11[50];
  }
  *(_DWORD *)(*((_QWORD *)v11 + 7) + v12) = -129989819;
  v11[50] += 4;
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 16), 0, 2, 5, a5, a6, a7, a8, a9);
}

void WTF::Vector<JSC::JITGetByValWithThisGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITGetByValWithThisGenerator&>(uint64_t a1, unint64_t a2)
{
  __int128 *v3;

  v3 = (__int128 *)WTF::Vector<JSC::JITGetByValWithThisGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  JSC::JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator(*(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
}

unint64_t WTF::Vector<JSC::JITGetByValWithThisGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 56 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::JITGetByValWithThisGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::JITGetByValWithThisGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::JITGetByValWithThisGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(unsigned int *)(a1 + 12);
      v5 = 56 * a2;
      v6 = WTF::fastMalloc((WTF *)(56 * a2));
      *(_DWORD *)(a1 + 8) = v5 / 0x38;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v4)
      {
        v14 = 56 * v4;
        v15 = (__int128 *)v3;
        do
        {
          JSC::JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator(v6, v15);
          v6 = v16 + 56;
          v15 = (__int128 *)((char *)v15 + 56);
          v14 -= 56;
        }
        while (v14);
      }
      if (v3)
      {
        if (*(_QWORD *)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

unint64_t WTF::Vector<JSC::Scannable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t StatusReg;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *casual;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if (v5 + 8 * v6 > a3)
    {
      v38 = *(unsigned int *)(a1 + 8);
      v39 = v38 + (v38 >> 2);
      if (v39 >= 0x10)
        v40 = v39 + 1;
      else
        v40 = 16;
      if (v40 <= a2)
        v41 = a2;
      else
        v41 = v40;
      if (v41 <= v38)
      {
        v50 = *(_QWORD *)a1;
      }
      else
      {
        if (v41 >> 29)
          goto LABEL_61;
        v42 = (void *)WTF::fastMalloc((WTF *)(8 * v41));
        *(_DWORD *)(a1 + 8) = v41;
        *(_QWORD *)a1 = v42;
        memcpy(v42, (const void *)v5, 8 * v6);
        v50 = *(_QWORD *)a1;
        if (v5)
        {
          if (v50 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v43, v44, v45, v46, v47, v48, v49);
          v50 = *(_QWORD *)a1;
        }
      }
      return v50 + 8 * ((uint64_t)(v3 - v5) >> 3);
    }
  }
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= a2)
    v10 = a2;
  else
    v10 = v9;
  if (v10 > v7)
  {
    if (!(v10 >> 29))
    {
      v11 = *(unsigned int *)(a1 + 12);
      v12 = 8 * v10;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v14 = *(_QWORD *)(StatusReg + 752);
      if (v14)
      {
        v15 = (unint64_t)(v12 + 15) >> 4;
        if (v10 <= 0x34)
        {
          v16 = 23 * v15 + 7;
        }
        else
        {
          if (v10 > 0x4E2)
            goto LABEL_15;
          v16 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v15 + 626);
          if (*(_DWORD *)(v14 + 8052) <= v16)
            goto LABEL_15;
        }
        v18 = v14 + 8 * v16;
        v19 = v18 + 8064;
        *(_BYTE *)(v18 + 8064) = 1;
        v20 = *(unsigned int *)(v18 + 8080);
        if ((_DWORD)v20)
        {
          *(_DWORD *)(v19 + 16) = v20 - *(_DWORD *)(v19 + 20);
          casual = (void *)(*(_QWORD *)(v19 + 8) - v20);
        }
        else
        {
          v29 = *(_QWORD *)(v19 + 40);
          v30 = *(_QWORD *)(v19 + 24);
          if (!v29)
          {
            if (*(_BYTE *)(v19 + 5) == 6)
            {
              v32 = *(unsigned int *)(v19 + 32);
              v33 = *(_DWORD *)(v19 + 36);
              if (v32 < v33)
              {
                *(_QWORD *)(v19 + 8 * v32 + 56) = 0;
                v34 = (unint64_t *)(8 * v16 + 8 * v32 + v14 + 8128);
                v35 = v33 - 1 - v32;
                while (v35)
                {
                  v30 += 1024;
                  v37 = *v34++;
                  v36 = v37;
                  LODWORD(v32) = v32 + 1;
                  --v35;
                  if (v37)
                  {
                    v29 = __rbit64(v36);
                    *(_DWORD *)(v19 + 32) = v32;
                    *(_QWORD *)(v19 + 24) = v30;
                    goto LABEL_30;
                  }
                }
                *(_DWORD *)(v19 + 32) = v33;
              }
            }
            *(_BYTE *)v19 = 0;
            goto LABEL_15;
          }
LABEL_30:
          v31 = __clz(v29);
          *(_QWORD *)(v19 + 40) = v29 & ~(0x8000000000000000 >> v31);
          casual = (void *)(v30 + 16 * v31);
        }
        *(_BYTE *)v19 = 0;
LABEL_20:
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = casual;
        memcpy(casual, (const void *)v5, 8 * v11);
        if (!v5)
          return v3;
        if (*(_QWORD *)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        v26 = *(_QWORD *)(StatusReg + 752);
        if (!v26)
        {
          pas_try_deallocate_slow_no_cache(v5, (uint64_t)&bmalloc_heap_config, 1);
          return v3;
        }
        if (!(v5 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v5 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v5)) & 1) != 0)
        {
          goto LABEL_26;
        }
        if (v5 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v5 >> 24)
        {
          v21 = 0;
        }
        else
        {
          v21 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v5 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v5) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v21 == 1)
          {
LABEL_26:
            v27 = *(unsigned int *)(v26 + 8000);
            if (v27 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v26, v5, (os_unfair_lock_s *)5, v21, v22, v23, v24, v25);
            }
            else
            {
              *(_QWORD *)(v26 + 8 * v27) = v5 | 0x5000000000000;
              *(_DWORD *)(v26 + 8000) = v27 + 1;
            }
            return v3;
          }
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v26, v5, 1, v21, v22, v23, v24, v25);
        return v3;
      }
LABEL_15:
      casual = (void *)bmalloc_allocate_casual(v12, 1);
      goto LABEL_20;
    }
LABEL_61:
    __break(0xC471u);
    JUMPOUT(0x19880091CLL);
  }
  return v3;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::JITSizeStatistics::markEnd(JSC::JITSizeStatistics::Marker,JSC::CCallHelpers &,JSC::JITPlan &)::$_0>::~SharedTaskFunctor(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::JITSizeStatistics::markEnd(JSC::JITSizeStatistics::Marker,JSC::CCallHelpers &,JSC::JITPlan &)::$_0>::~SharedTaskFunctor(WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::JITSizeStatistics::markEnd(JSC::JITSizeStatistics::Marker,JSC::CCallHelpers &,JSC::JITPlan &)::$_0>::run(uint64_t a1, _QWORD *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  const void *v30;
  void *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = *(_DWORD *)(a1 + 24);
  if (v2 < 4)
    v3 = 0;
  else
    v3 = *(_DWORD *)((v2 & 0xFFFFFFFC) + a2[3] - 4);
  v4 = (v2 - v3);
  v5 = a2[23];
  v6 = v4 + v5;
  if (v5 > v6)
    goto LABEL_38;
  v7 = v5 + a2[1];
  if (v7 < v6)
    goto LABEL_38;
  v8 = *(_DWORD *)(a1 + 40);
  if (v8 < 4)
    v9 = 0;
  else
    v9 = *(_DWORD *)((v8 & 0xFFFFFFFC) + a2[3] - 4);
  v10 = (v8 - v9) + v5;
  if (v5 > v10 || v7 < v10)
  {
    __break(0xC471u);
    JUMPOUT(0x198800BACLL);
  }
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(WTF::StringImpl **)(a1 + 32);
  if (v14)
    *(_DWORD *)v14 += 2;
  v15 = v6 - v10;
  v16 = WTF::fastMalloc((WTF *)0x30);
  v24 = v16;
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)v16 = &off_1E3596228;
  *(_QWORD *)(v16 + 16) = v12;
  if (v14)
    *(_DWORD *)v14 += 2;
  *(_QWORD *)(v16 + 24) = v14;
  *(_DWORD *)(v16 + 32) = v8;
  *(_QWORD *)(v16 + 40) = v15;
  v25 = *(unsigned int *)(v13 + 68);
  if ((_DWORD)v25 != *(_DWORD *)(v13 + 64))
  {
    v26 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 8 * v25);
    goto LABEL_27;
  }
  v27 = v25 + (v25 >> 2);
  v28 = v27 >= 0x10 ? v27 + 1 : 16;
  v29 = v28 <= v25 + 1 ? v25 + 1 : v28;
  if (v29 >> 29)
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x198800B8CLL);
  }
  v30 = *(const void **)(v13 + 56);
  v31 = (void *)WTF::fastMalloc((WTF *)(8 * v29));
  *(_DWORD *)(v13 + 64) = v29;
  *(_QWORD *)(v13 + 56) = v31;
  memcpy(v31, v30, 8 * v25);
  if (v30)
  {
    if (*(const void **)(v13 + 56) == v30)
    {
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
    }
    WTF::fastFree((unint64_t)v30, v17, v18, v19, v20, v21, v22, v23);
  }
  v25 = *(unsigned int *)(v13 + 68);
  v26 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 8 * v25);
LABEL_27:
  *v26 = v24;
  *(_DWORD *)(v13 + 68) = v25 + 1;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, (WTF::AtomStringImpl *)v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(void),JSC::JITSizeStatistics::markEnd(JSC::JITSizeStatistics::Marker,JSC::CCallHelpers &,JSC::JITPlan &)::$_0::operator() const(JSC::LinkBuffer &)::{lambda(void)#1}>::~SharedTaskFunctor(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(void),JSC::JITSizeStatistics::markEnd(JSC::JITSizeStatistics::Marker,JSC::CCallHelpers &,JSC::JITPlan &)::$_0::operator() const(JSC::LinkBuffer &)::{lambda(void)#1}>::~SharedTaskFunctor(WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(void),JSC::JITSizeStatistics::markEnd(JSC::JITSizeStatistics::Marker,JSC::CCallHelpers &,JSC::JITPlan &)::$_0::operator() const(JSC::LinkBuffer &)::{lambda(void)#1}>::run(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl **v10;
  int i;
  unsigned int v12;
  WTF::StringImpl **v13;
  WTF *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  WTF::StringImpl *v23;

  v4 = *(uint64_t **)(a1 + 16);
  v5 = *v4;
  if (*v4
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,JSC::JITSizeStatistics::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,JSC::JITSizeStatistics::Entry>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,JSC::JITSizeStatistics::Entry,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<JSC::JITSizeStatistics::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v4, 8u, 0), (v5 = *v4) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *(WTF::StringImpl **)(a1 + 24);
  v8 = *((_DWORD *)v7 + 4);
  if (v8 < 0x100)
    v9 = WTF::StringImpl::hashSlowCase(v7);
  else
    v9 = v8 >> 8;
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v6;
    v13 = (WTF::StringImpl **)(v5 + 24 * (v9 & v6));
    v14 = *v13;
    if (*v13 == (WTF::StringImpl *)-1)
    {
      v10 = (WTF::StringImpl **)(v5 + 24 * v12);
      goto LABEL_12;
    }
    if (!v14)
      break;
    if (WTF::equal(v14, *(const WTF::StringImpl **)(a1 + 24), a3))
      goto LABEL_31;
LABEL_12:
    v9 = i + v12;
  }
  if (v10)
  {
    *v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
    --*(_DWORD *)(*v4 - 16);
    v13 = v10;
  }
  v15 = *(WTF::StringImpl **)(a1 + 24);
  if (v15)
    *(_DWORD *)v15 += 2;
  *v13 = v15;
  *(_OWORD *)(v13 + 1) = 0uLL;
  v16 = *v4;
  if (*v4)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 <= 2 * v20)
    {
LABEL_26:
      v22 = (_DWORD)v21 << (6 * *(_DWORD *)(v18 - 12) >= (2 * v21));
      goto LABEL_30;
    }
  }
  else if (3 * v21 <= 4 * v20)
  {
    if ((_DWORD)v21)
      goto LABEL_26;
    v22 = 8;
LABEL_30:
    v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,JSC::JITSizeStatistics::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,JSC::JITSizeStatistics::Entry>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,JSC::JITSizeStatistics::Entry,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<JSC::JITSizeStatistics::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v4, v22, v13);
  }
LABEL_31:
  v23 = v13[2];
  v13[1] = (WTF::StringImpl *)((char *)v13[1] + 1);
  v13[2] = (WTF::StringImpl *)((char *)v23 + *(_QWORD *)(a1 + 40));
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,JSC::JITSizeStatistics::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,JSC::JITSizeStatistics::Entry>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,JSC::JITSizeStatistics::Entry,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<JSC::JITSizeStatistics::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl **result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v16 = v8;
  v17 = v8 + 16;
  if (a2)
    bzero((void *)(v8 + 16), 24 * a2);
  *a1 = v17;
  *(_DWORD *)(v16 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v18 = 0;
    v19 = 0;
    v20 = v6;
    v21 = a3;
    do
    {
      v22 = (WTF::StringImpl **)(v5 + 24 * v18);
      v23 = *v22;
      if (*v22 != (WTF::StringImpl *)-1)
      {
        if (v23)
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = *((_DWORD *)v23 + 4);
          if (v26 < 0x100)
          {
            v27 = WTF::StringImpl::hashSlowCase(v23);
            v21 = a3;
          }
          else
          {
            v27 = v26 >> 8;
          }
          v28 = 0;
          do
          {
            v29 = v27 & v25;
            v30 = (WTF::StringImpl **)(v24 + 24 * (v27 & v25));
            v27 = ++v28 + (v27 & v25);
          }
          while (*v30);
          *v30 = 0;
          v31 = *v22;
          *v22 = 0;
          *v30 = v31;
          *(_OWORD *)(v24 + 24 * v29 + 8) = *(_OWORD *)(v5 + 24 * v18 + 8);
          v32 = *v22;
          *v22 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
            {
              WTF::StringImpl::~StringImpl(v32, v9, v10, v11, v12, v13, v14, v15);
              WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
              v21 = a3;
            }
            else
            {
              *(_DWORD *)v32 -= 2;
            }
          }
          if (v22 == v21)
            v19 = v30;
        }
        else
        {
          *v22 = 0;
        }
      }
      ++v18;
    }
    while (v18 != v20);
  }
  else
  {
    v19 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree(v5 - 16, v9, v10, v11, v12, v13, v14, v15);
  return v19;
}

unint64_t WTF::Vector<std::pair<WTF::String,JSC::JITSizeStatistics::Entry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::String,JSC::JITSizeStatistics::Entry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::String,JSC::JITSizeStatistics::Entry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<std::pair<WTF::String,JSC::JITSizeStatistics::Entry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(_DWORD *)(a1 + 12);
      v5 = 24 * a2;
      v6 = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v6;
      if (v4)
      {
        v14 = v6;
        v15 = v3 + 24 * v4;
        v16 = v3;
        do
        {
          v17 = *(WTF::StringImpl **)v16;
          *(_QWORD *)v16 = 0;
          *(_QWORD *)v14 = v17;
          *(_OWORD *)(v14 + 8) = *(_OWORD *)(v16 + 8);
          v18 = *(WTF::StringImpl **)v16;
          *(_QWORD *)v16 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
            {
              WTF::StringImpl::~StringImpl(v18, v7, v8, v9, v10, v11, v12, v13);
              WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
            }
            else
            {
              *(_DWORD *)v18 -= 2;
            }
          }
          v16 += 24;
          v14 += 24;
        }
        while (v16 != v15);
      }
      if (v3)
      {
        if (*(_QWORD *)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

void JSC::JITStubRoutine::destroy<JSC::MarkingGCAwareJITStubRoutine>(JSC::PolymorphicAccessJITStubRoutine *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t *v13;
  JSC::JITStubRoutine *v14;
  uint64_t v15;
  JSC::JITStubRoutine *v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (this)
  {
    v9 = (unsigned int *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v9)
    {
      v11 = (uint64_t **)(v9 + 2);
      v10 = *v9;
      if ((_DWORD)v10)
      {
        v12 = &v11[v10];
        do
        {
          v13 = *v11;
          *v11 = 0;
          if (v13)
          {
            v14 = (JSC::JITStubRoutine *)v13[7];
            if (v14)
            {
              v31 = *((unsigned int *)v14 + 11);
              if ((_DWORD)v31)
              {
                v20 = -24 * v31;
                do
                {
                  *((_BYTE *)v14 + v20 + 19) = 1;
                  v20 += 24;
                }
                while (v20);
              }
              v13[7] = 0;
              v21 = *((_DWORD *)v14 + 4) - 1;
              *((_DWORD *)v14 + 4) = v21;
              if (!v21)
                JSC::JITStubRoutine::observeZeroRefCount(v14);
            }
            v15 = v13[9];
            if ((v15 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v15 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
            v16 = (JSC::JITStubRoutine *)v13[7];
            v13[7] = 0;
            if (v16)
            {
              v17 = *((_DWORD *)v16 + 4) - 1;
              *((_DWORD *)v16 + 4) = v17;
              if (!v17)
                JSC::JITStubRoutine::observeZeroRefCount(v16);
            }
            v18 = (uint64_t *)v13[1];
            if (v18)
            {
              v19 = *v13;
              *v18 = *v13;
              *(_QWORD *)(v19 + 8) = v18;
              *v13 = 0;
              v13[1] = 0;
            }
            WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
          }
          ++v11;
        }
        while (v11 != v12);
      }
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
    v22 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v22)
      WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
    JSC::PolymorphicAccessJITStubRoutine::~PolymorphicAccessJITStubRoutine(this, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
  }
  else
  {
    __break(1u);
  }
}

void WTF::HashMap<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &),JSC::JITThunks::Entry,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &)>,WTF::HashTraits<JSC::JITThunks::Entry>,WTF::HashTableTraits>::add<JSC::JITThunks::Entry>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  char v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &),WTF::KeyValuePair<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &),JSC::JITThunks::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &),JSC::JITThunks::Entry>>,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &)>,WTF::HashMap<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &),JSC::JITThunks::Entry,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &)>,WTF::HashTraits<JSC::JITThunks::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &)>>::rehash(a2, 8u, 0), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = v12 + 16 * v19;
  v21 = *(_QWORD *)v20;
  if (*(_QWORD *)v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v31 = 0;
        else
          v31 = *(unsigned int *)(v12 - 4);
        v37 = 0;
        v38 = v12 + 16 * v31;
        goto LABEL_36;
      }
      if (v21 == -1)
        v22 = (_QWORD *)v20;
      v19 = (v19 + v23) & v14;
      v20 = v12 + 16 * v19;
      v21 = *(_QWORD *)v20;
      ++v23;
    }
    while (*(_QWORD *)v20);
    if (v22)
    {
      *(_QWORD *)((char *)v22 + 6) = 0;
      *v22 = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = (uint64_t)v22;
    }
  }
  *(_QWORD *)v20 = v15;
  v24 = *(_BYTE *)(a4 + 4);
  v25 = *(_DWORD *)a4;
  *(_DWORD *)a4 = 0;
  *(_BYTE *)(a4 + 4) = 0;
  v26 = (unsigned int *)(*(unsigned int *)(v20 + 8) | ((unint64_t)*(unsigned __int8 *)(v20 + 12) << 32));
  *(_DWORD *)(v20 + 8) = v25;
  *(_BYTE *)(v20 + 12) = v24;
  if (v26)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v26, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
  }
  *(_BYTE *)(v20 + 13) = *(_BYTE *)(a4 + 5);
  v29 = *a2;
  if (*a2)
    v30 = *(_DWORD *)(v29 - 12) + 1;
  else
    v30 = 1;
  *(_DWORD *)(v29 - 12) = v30;
  v32 = *a2;
  if (*a2)
    v33 = *(_DWORD *)(v32 - 12);
  else
    v33 = 0;
  v34 = (*(_DWORD *)(v32 - 16) + v33);
  v35 = *(unsigned int *)(v32 - 4);
  if (v35 > 0x400)
  {
    if (v35 <= 2 * v34)
      goto LABEL_27;
  }
  else if (3 * v35 <= 4 * v34)
  {
    if (!(_DWORD)v35)
    {
      v36 = 8;
LABEL_32:
      v20 = WTF::HashTable<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &),WTF::KeyValuePair<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &),JSC::JITThunks::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &),JSC::JITThunks::Entry>>,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &)>,WTF::HashMap<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &),JSC::JITThunks::Entry,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &)>,WTF::HashTraits<JSC::JITThunks::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &)>>::rehash(a2, v36, (uint64_t *)v20);
      v32 = *a2;
      if (*a2)
        v35 = *(unsigned int *)(v32 - 4);
      else
        v35 = 0;
      goto LABEL_35;
    }
LABEL_27:
    v36 = (_DWORD)v35 << (6 * *(_DWORD *)(v32 - 12) >= (2 * v35));
    goto LABEL_32;
  }
LABEL_35:
  v38 = v32 + 16 * v35;
  v37 = 1;
LABEL_36:
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v38;
  *(_BYTE *)(a1 + 16) = v37;
}

uint64_t WTF::HashTable<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &),WTF::KeyValuePair<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &),JSC::JITThunks::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &),JSC::JITThunks::Entry>>,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &)>,WTF::HashMap<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &),JSC::JITThunks::Entry,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &)>,WTF::HashTraits<JSC::JITThunks::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(JSC::VM &)>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  char v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 16);
    do
    {
      *(_QWORD *)((char *)v18 + 6) = 0;
      *v18 = 0;
      v18 += 2;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (uint64_t *)(v6 + 16 * v19);
      v22 = *v21;
      if (*v21 != -1)
      {
        if (v22)
        {
          v36 = *a1;
          if (*a1)
            v37 = *(_DWORD *)(v36 - 8);
          else
            v37 = 0;
          v38 = (~(v22 << 32) + v22) ^ ((unint64_t)(~(v22 << 32) + v22) >> 22);
          v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
          v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
          v41 = v37 & ((v40 >> 31) ^ v40);
          v42 = 1;
          do
          {
            v43 = v41;
            v44 = *(_QWORD *)(v36 + 16 * v41);
            v41 = (v41 + v42++) & v37;
          }
          while (v44);
          v45 = v36 + 16 * v43;
          v46 = (unsigned int *)(*(unsigned int *)(v45 + 8) | ((unint64_t)*(unsigned __int8 *)(v45 + 12) << 32));
          *(_DWORD *)(v45 + 8) = 0;
          *(_BYTE *)(v45 + 12) = 0;
          if (v46)
          {
            do
            {
              v47 = __ldaxr(v46);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, v46));
            if (!v48)
            {
              atomic_store(1u, v46);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v46, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
            }
          }
          *(_QWORD *)v45 = *v21;
          v49 = (unsigned int *)(v6 + 16 * v19);
          v50 = v49[2];
          v49 += 2;
          v51 = *((_BYTE *)v49 + 4);
          *v49 = 0;
          *((_BYTE *)v49 + 4) = 0;
          *(_BYTE *)(v45 + 12) = v51;
          *(_DWORD *)(v45 + 8) = v50;
          *(_BYTE *)(v45 + 13) = *((_BYTE *)v49 + 5);
          v52 = (unsigned int *)(*v49 | ((unint64_t)*((unsigned __int8 *)v49 + 4) << 32));
          *v49 = 0;
          *((_BYTE *)v49 + 4) = 0;
          if (v52)
          {
            do
            {
              v53 = __ldaxr(v52);
              v54 = v53 - 1;
            }
            while (__stlxr(v54, v52));
            if (!v54)
            {
              atomic_store(1u, v52);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v52, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
            }
          }
          if (v21 == a3)
            v20 = v45;
        }
        else
        {
          v23 = v6 + 16 * v19;
          v24 = *(_DWORD *)(v23 + 8);
          v23 += 8;
          v25 = (unsigned int *)(v24 | ((unint64_t)*(unsigned __int8 *)(v23 + 4) << 32));
          *(_DWORD *)v23 = 0;
          *(_BYTE *)(v23 + 4) = 0;
          if (v25)
          {
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              atomic_store(1u, v25);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v25, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
            }
          }
        }
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

uint64_t WTF::HashTable<JSC::Weak<JSC::NativeExecutable>,JSC::Weak<JSC::NativeExecutable>,WTF::IdentityExtractor,JSC::JITThunks::WeakNativeExecutableHash,WTF::HashTraits<JSC::Weak<JSC::NativeExecutable>>,WTF::HashTraits<JSC::Weak<JSC::NativeExecutable>>>::find<WTF::HashSetTranslatorAdapter<JSC::JITThunks::HostKeySearcher>,std::tuple<WTF::FunctionPtr<(WTF::PtrTag)12563,long long ()(JSC::JSGlobalObject *,JSC::CallFrame *),(WTF::FunctionAttributes)2>,WTF::FunctionPtr<(WTF::PtrTag)12563,long long ()(JSC::JSGlobalObject *,JSC::CallFrame *),(WTF::FunctionAttributes)2>,JSC::ImplementationVisibility,WTF::String>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v5;
  const WTF::StringImpl **v6;
  int v7;
  const WTF::StringImpl *v8;
  int i;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  WTF *v13;
  const WTF::StringImpl *v14;
  BOOL v15;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = (const WTF::StringImpl **)(a2 + 24);
  v7 = JSC::JITThunks::WeakNativeExecutableHash::hash(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), (uint64_t *)(a2 + 24));
  for (i = 0; ; v7 = i + v10)
  {
    v10 = v7 & v5;
    v11 = *(uint64_t **)(v2 + 8 * v10);
    if (v11 == (uint64_t *)-1)
      goto LABEL_14;
    if (!v11)
      break;
    v12 = *v11;
    if (*(_QWORD *)(v12 + 40) == *(_QWORD *)a2
      && *(_QWORD *)(v12 + 48) == *(_QWORD *)(a2 + 8)
      && (*(_BYTE *)(v12 + 56) & 3) == *(_BYTE *)(a2 + 16))
    {
      v13 = *(WTF **)(v12 + 64);
      v14 = *v6;
      if (v13 == *v6)
        return v2 + 8 * v10;
      v15 = !v13 || v14 == 0;
      if (!v15 && WTF::equal(v13, v14, v8))
        return v2 + 8 * v10;
    }
LABEL_14:
    ++i;
  }
  if (*a1)
    return *a1 + 8 * *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

uint64_t JSC::JITThunks::WeakNativeExecutableHash::hash(unint64_t a1, unint64_t a2, int a3, uint64_t *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;

  v4 = (a1 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a1 - 1640531527) << 16) ^ ((unsigned __int16)a1
                                                                                          - 1640531527);
  v5 = (a1 >> 37) & 0x7FFF800 ^ ((v4 + WORD2(a1) + (v4 >> 11)) << 16) ^ (v4 + WORD2(a1) + (v4 >> 11));
  v6 = (a2 >> 5) & 0x7FFF800 ^ ((v5 + (unsigned __int16)a2 + (v5 >> 11)) << 16) ^ (v5
                                                                                               + (unsigned __int16)a2
                                                                                               + (v5 >> 11));
  v7 = (a2 >> 37) & 0x7FFF800 ^ ((v6 + WORD2(a2) + (v6 >> 11)) << 16) ^ (v6 + WORD2(a2) + (v6 >> 11));
  v8 = (v7 + a3 + (v7 >> 11)) ^ ((v7 + a3 + (v7 >> 11)) << 16);
  v9 = v8 + (v8 >> 11);
  v10 = *a4;
  if (*a4)
  {
    v11 = *(unsigned int *)(v10 + 4);
    v12 = v11 & 0xFFFFFFFE;
    if ((v11 & 0xFFFFFFFE) != 0)
    {
      v13 = 0;
      do
      {
        if (v13 < v11)
        {
          v18 = *(_QWORD *)(v10 + 8);
          if ((*(_BYTE *)(v10 + 16) & 4) != 0)
            v19 = *(unsigned __int8 *)(v18 + v13);
          else
            v19 = *(unsigned __int16 *)(v18 + 2 * v13);
          v14 = v19 << 11;
        }
        else
        {
          v14 = 0;
        }
        v15 = v13 + 1;
        if (v13 + 1 < v11)
        {
          v20 = *(_QWORD *)(v10 + 8);
          if ((*(_BYTE *)(v10 + 16) & 4) != 0)
            v16 = *(unsigned __int8 *)(v20 + v13 + 1);
          else
            v16 = *(unsigned __int16 *)(v20 + 2 * v13 + 2);
        }
        else
        {
          v16 = 0;
        }
        v17 = v14 ^ ((v9 + v16) << 16) ^ (v9 + v16);
        v9 = v17 + (v17 >> 11);
        v13 = v15 + 1;
      }
      while (v15 + 1 < v12);
    }
    if ((v11 & 1) != 0)
    {
      if (v11 > v12)
      {
        v26 = *(_QWORD *)(v10 + 8);
        if ((*(_BYTE *)(v10 + 16) & 4) != 0)
          v21 = *(unsigned __int8 *)(v26 + v12);
        else
          v21 = *(unsigned __int16 *)(v26 + 2 * v12);
      }
      else
      {
        v21 = 0;
      }
      v9 = ((v21 + v9) ^ ((v21 + v9) << 16)) + (((v21 + v9) ^ ((v21 + v9) << 16)) >> 11);
    }
  }
  v22 = (v9 ^ (8 * v9)) + ((v9 ^ (8 * v9)) >> 5);
  v23 = (v22 ^ (4 * v22)) + ((v22 ^ (4 * v22)) >> 15);
  v24 = v23 ^ (v23 << 10);
  if (v24)
    return v24;
  else
    return 0x800000;
}

_QWORD *WTF::HashTable<JSC::Weak<JSC::NativeExecutable>,JSC::Weak<JSC::NativeExecutable>,WTF::IdentityExtractor,JSC::JITThunks::WeakNativeExecutableHash,WTF::HashTraits<JSC::Weak<JSC::NativeExecutable>>,WTF::HashTraits<JSC::Weak<JSC::NativeExecutable>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  _QWORD *v42;
  _QWORD *result;
  uint64_t v44;
  int v45;
  uint64_t v46;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (uint64_t *)(v11 + 8 * v22);
      v25 = *v24;
      if ((unint64_t)(*v24 + 1) >= 2)
      {
        v26 = *a1;
        if (*a1)
          v27 = *(_DWORD *)(v26 - 8);
        else
          v27 = 0;
        v29 = *(_QWORD *)(*(_QWORD *)v25 + 40);
        v28 = *(_QWORD *)(*(_QWORD *)v25 + 48);
        v30 = (v29 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v29 - 1640531527) << 16) ^ ((unsigned __int16)v29 - 1640531527);
        v18 = v30 + WORD2(v29);
        LODWORD(v29) = (v29 >> 37) & 0x7FFF800 ^ (((_DWORD)v18 + (v30 >> 11)) << 16) ^ (v18 + (v30 >> 11));
        LODWORD(v29) = (v28 >> 5) & 0x7FFF800 ^ (((_DWORD)v29
                                                              + (unsigned __int16)v28
                                                              + (v29 >> 11)) << 16) ^ (v29 + (unsigned __int16)v28 + (v29 >> 11));
        v17 = v29 + WORD2(v28);
        LODWORD(v29) = (v28 >> 37) & 0x7FFF800 ^ (((_DWORD)v17 + (v29 >> 11)) << 16) ^ (v17 + (v29 >> 11));
        LODWORD(v28) = v29 + (*(_BYTE *)(*(_QWORD *)v25 + 56) & 3);
        LODWORD(v29) = (v28 + (v29 >> 11)) ^ (((_DWORD)v28 + (v29 >> 11)) << 16);
        v31 = v29 + (v29 >> 11);
        v32 = *(_QWORD *)(*(_QWORD *)v25 + 64);
        if (v32)
        {
          v33 = *(unsigned int *)(v32 + 4);
          v34 = v33 & 0xFFFFFFFE;
          if ((v33 & 0xFFFFFFFE) != 0)
          {
            v17 = 0;
            do
            {
              if (v17 < v33)
              {
                v44 = *(_QWORD *)(v32 + 8);
                if ((*(_BYTE *)(v32 + 16) & 4) != 0)
                  v45 = *(unsigned __int8 *)(v44 + v17);
                else
                  v45 = *(unsigned __int16 *)(v44 + 2 * v17);
                v18 = (v45 << 11);
              }
              else
              {
                v18 = 0;
              }
              v19 = v17 + 1;
              if (v17 + 1 < v33)
              {
                v20 = *(_QWORD *)(v32 + 8);
                v21 = *(unsigned __int8 *)(v32 + 16);
                if ((v21 & 4) != 0)
                  v35 = *(unsigned __int8 *)(v20 + v17 + 1);
                else
                  v35 = *(unsigned __int16 *)(v20 + 2 * v17 + 2);
              }
              else
              {
                v35 = 0;
              }
              v36 = v18 ^ ((v31 + v35) << 16) ^ (v31 + v35);
              v31 = v36 + (v36 >> 11);
              v17 = v19 + 1;
            }
            while (v19 + 1 < v34);
          }
          if ((v33 & 1) != 0)
          {
            if (v33 > v34)
            {
              v46 = *(_QWORD *)(v32 + 8);
              if ((*(_BYTE *)(v32 + 16) & 4) != 0)
                v37 = *(unsigned __int8 *)(v46 + v34);
              else
                v37 = *(unsigned __int16 *)(v46 + 2 * v34);
            }
            else
            {
              v37 = 0;
            }
            v31 = ((v37 + v31) ^ ((v37 + v31) << 16)) + (((v37 + v31) ^ ((v37 + v31) << 16)) >> 11);
          }
        }
        v38 = 0;
        v39 = (v31 ^ (8 * v31)) + ((v31 ^ (8 * v31)) >> 5);
        v40 = (v39 ^ (4 * v39)) + ((v39 ^ (4 * v39)) >> 15);
        v41 = v40 ^ (v40 << 10);
        if (!v41)
          v41 = 0x800000;
        do
        {
          v15 = v41 & v27;
          v16 = *(_QWORD *)(v26 + 8 * v15);
          v41 = ++v38 + v15;
        }
        while (v16);
        v42 = (_QWORD *)(v26 + 8 * v15);
        *v24 = 0;
        *v42 = v25;
        if (*v24)
        {
          *(_QWORD *)(*v24 + 8) = 3;
          *v24 = 0;
        }
        if (v24 == (uint64_t *)a3)
          v23 = v42;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, (void *)v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

uint64_t WTF::HashTable<JSC::Weak<JSC::NativeExecutable>,JSC::Weak<JSC::NativeExecutable>,WTF::IdentityExtractor,JSC::JITThunks::WeakNativeExecutableHash,WTF::HashTraits<JSC::Weak<JSC::NativeExecutable>>,WTF::HashTraits<JSC::Weak<JSC::NativeExecutable>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::JITThunks::NativeExecutableTranslator>,JSC::NativeExecutable* const&,JSC::NativeExecutable* const&>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v10;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t **v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  const WTF::StringImpl *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;

  v10 = (uint64_t *)result;
  v12 = *(_QWORD *)result;
  if (*(_QWORD *)result
    || (result = (uint64_t)WTF::HashTable<JSC::Weak<JSC::NativeExecutable>,JSC::Weak<JSC::NativeExecutable>,WTF::IdentityExtractor,JSC::JITThunks::WeakNativeExecutableHash,WTF::HashTraits<JSC::Weak<JSC::NativeExecutable>>,WTF::HashTraits<JSC::Weak<JSC::NativeExecutable>>>::rehash((uint64_t *)result, 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = *(_QWORD *)(*a2 + 40);
  v15 = *(_QWORD *)(*a2 + 48);
  v16 = (v14 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v14 - 1640531527) << 16) ^ ((unsigned __int16)v14
                                                                                             - 1640531527);
  LODWORD(v14) = (v14 >> 37) & 0x7FFF800 ^ ((v16 + WORD2(v14) + (v16 >> 11)) << 16) ^ (v16 + WORD2(v14) + (v16 >> 11));
  LODWORD(v14) = (v15 >> 5) & 0x7FFF800 ^ (((_DWORD)v14 + (unsigned __int16)v15 + (v14 >> 11)) << 16) ^ (v14 + (unsigned __int16)v15 + (v14 >> 11));
  LODWORD(v14) = (v15 >> 37) & 0x7FFF800 ^ (((_DWORD)v14 + WORD2(v15) + (v14 >> 11)) << 16) ^ (v14 + WORD2(v15) + (v14 >> 11));
  LODWORD(v15) = v14 + (*(_BYTE *)(*a2 + 56) & 3);
  LODWORD(v14) = (v15 + (v14 >> 11)) ^ (((_DWORD)v15 + (v14 >> 11)) << 16);
  v17 = v14 + (v14 >> 11);
  v18 = *(_QWORD *)(*a2 + 64);
  if (v18)
  {
    v19 = *(unsigned int *)(v18 + 4);
    v20 = v19 & 0xFFFFFFFE;
    if ((v19 & 0xFFFFFFFE) != 0)
    {
      v21 = 0;
      do
      {
        if (v21 < v19)
        {
          v57 = *(_QWORD *)(v18 + 8);
          if ((*(_BYTE *)(v18 + 16) & 4) != 0)
            v58 = *(unsigned __int8 *)(v57 + v21);
          else
            v58 = *(unsigned __int16 *)(v57 + 2 * v21);
          v22 = v58 << 11;
        }
        else
        {
          v22 = 0;
        }
        v23 = v21 + 1;
        if (v21 + 1 < v19)
        {
          v59 = *(_QWORD *)(v18 + 8);
          if ((*(_BYTE *)(v18 + 16) & 4) != 0)
            v24 = *(unsigned __int8 *)(v59 + v21 + 1);
          else
            v24 = *(unsigned __int16 *)(v59 + 2 * v21 + 2);
        }
        else
        {
          v24 = 0;
        }
        v25 = v22 ^ ((v17 + v24) << 16) ^ (v17 + v24);
        v17 = v25 + (v25 >> 11);
        v21 = v23 + 1;
      }
      while (v23 + 1 < v20);
    }
    if ((v19 & 1) != 0)
    {
      if (v19 > v20)
      {
        v60 = *(_QWORD *)(v18 + 8);
        if ((*(_BYTE *)(v18 + 16) & 4) != 0)
          v26 = *(unsigned __int8 *)(v60 + v20);
        else
          v26 = *(unsigned __int16 *)(v60 + 2 * v20);
      }
      else
      {
        v26 = 0;
      }
      v17 = ((v26 + v17) ^ ((v26 + v17) << 16)) + (((v26 + v17) ^ ((v26 + v17) << 16)) >> 11);
    }
  }
  v27 = 0;
  v28 = 0;
  v29 = (v17 ^ (8 * v17)) + ((v17 ^ (8 * v17)) >> 5);
  v30 = (v29 ^ (4 * v29)) + ((v29 ^ (4 * v29)) >> 15);
  v31 = v30 ^ (v30 << 10);
  if (!v31)
    v31 = 0x800000;
  while (1)
  {
    v32 = v31 & v13;
    v33 = (uint64_t **)(v12 + 8 * (v31 & v13));
    v34 = *v33;
    if (!*v33)
    {
      if (v28)
        v33 = v28;
      v37 = *v33;
      if (*v33 == (uint64_t *)-1)
      {
        v37 = 0;
        *v33 = 0;
        --*(_DWORD *)(*v10 - 16);
      }
      v38 = *a2;
      if ((*a2 & 8) != 0)
      {
        v52 = (uint64_t *)(v38 - 16);
        v53 = (v38 - 112) | 1;
      }
      else
      {
        if (!v38)
        {
          result = 0;
          goto LABEL_29;
        }
        v53 = v38 & 0xFFFFFFFFFFFFC000;
        v52 = (uint64_t *)(v38 & 0xFFFFFFFFFFFFC000 | 8);
      }
      v54 = *v52;
      if ((v53 & 1) != 0)
        v55 = (_QWORD *)(v53 + 47);
      else
        v55 = (_QWORD *)(*(_QWORD *)v53 + 32);
      v56 = *(_QWORD *)(v54 + 90440);
      result = v55[2];
      if (!result)
        result = JSC::WeakSet::findAllocator(v55, v53);
      v55[2] = *(_QWORD *)result;
      *(_QWORD *)result = v38;
      *(_QWORD *)(result + 8) = v56;
      *(_QWORD *)(result + 16) = 0;
      v37 = *v33;
LABEL_29:
      *v33 = (uint64_t *)result;
      if (v37)
        v37[1] = 3;
      v39 = *v10;
      if (*v10)
        v40 = *(_DWORD *)(v39 - 12) + 1;
      else
        v40 = 1;
      *(_DWORD *)(v39 - 12) = v40;
      v41 = *v10;
      if (*v10)
        v42 = *(_DWORD *)(v41 - 12);
      else
        v42 = 0;
      v43 = (*(_DWORD *)(v41 - 16) + v42);
      v44 = *(unsigned int *)(v41 - 4);
      if (v44 > 0x400)
      {
        if (v44 > 2 * v43)
          goto LABEL_37;
      }
      else
      {
        if (3 * v44 > 4 * v43)
        {
LABEL_37:
          v45 = v41 + 8 * v44;
          v46 = 1;
          goto LABEL_38;
        }
        if (!(_DWORD)v44)
        {
          v47 = 8;
LABEL_44:
          result = (uint64_t)WTF::HashTable<JSC::Weak<JSC::NativeExecutable>,JSC::Weak<JSC::NativeExecutable>,WTF::IdentityExtractor,JSC::JITThunks::WeakNativeExecutableHash,WTF::HashTraits<JSC::Weak<JSC::NativeExecutable>>,WTF::HashTraits<JSC::Weak<JSC::NativeExecutable>>>::rehash(v10, v47, (uint64_t)v33, a4, a5, a6, a7, a8);
          v33 = (uint64_t **)result;
          v41 = *v10;
          if (*v10)
            v44 = *(unsigned int *)(v41 - 4);
          else
            v44 = 0;
          goto LABEL_37;
        }
      }
      v47 = ((_DWORD)v44 << (6 * *(_DWORD *)(v41 - 12) >= (2 * v44)));
      goto LABEL_44;
    }
    if (v34 == (uint64_t *)-1)
    {
      v28 = (uint64_t **)(v12 + 8 * v32);
      goto LABEL_21;
    }
    v35 = *a2;
    v36 = *v34;
    if (v36 == *a2)
      break;
    if (*(_QWORD *)(v36 + 40) == *(_QWORD *)(v35 + 40)
      && *(_QWORD *)(v36 + 48) == *(_QWORD *)(v35 + 48)
      && ((*(_BYTE *)(v35 + 56) ^ *(_BYTE *)(v36 + 56)) & 3) == 0)
    {
      result = *(_QWORD *)(v36 + 64);
      v48 = *(const WTF::StringImpl **)(v35 + 64);
      if ((const WTF::StringImpl *)result == v48)
        break;
      if (result && v48 != 0)
      {
        result = WTF::equal((WTF *)result, v48, a3);
        if ((result & 1) != 0)
          break;
      }
    }
LABEL_21:
    v31 = ++v27 + v32;
  }
  v50 = *v10;
  if (*v10)
    v51 = *(unsigned int *)(v50 - 4);
  else
    v51 = 0;
  v46 = 0;
  v45 = v50 + 8 * v51;
LABEL_38:
  *(_QWORD *)a9 = v33;
  *(_QWORD *)(a9 + 8) = v45;
  *(_BYTE *)(a9 + 16) = v46;
  return result;
}

void JSC::JITToDFGDeferredCompilationCallback::~JITToDFGDeferredCompilationCallback(JSC::JITToDFGDeferredCompilationCallback *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  WTF *v9;
  WTF *v10;

  *(_QWORD *)this = off_1E3581048;
  v10 = (WTF *)*((_QWORD *)this + 2);
  v8 = (_QWORD *)((char *)this + 16);
  v9 = v10;
  *v8 = 0;
  if (v10)
    std::default_delete<WTF::Vector<JSC::DeferredSourceDump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v8, v9, a3, a4, a5, a6, a7, a8);
}

{
  _QWORD *v9;
  WTF *v10;
  WTF *v11;

  *(_QWORD *)this = off_1E3581048;
  v11 = (WTF *)*((_QWORD *)this + 2);
  v9 = (_QWORD *)((char *)this + 16);
  v10 = v11;
  *v9 = 0;
  if (v11)
    std::default_delete<WTF::Vector<JSC::DeferredSourceDump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v9, v10, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, v10, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::JITToDFGDeferredCompilationCallback::compilationDidBecomeReadyAsynchronously(JSC::JITToDFGDeferredCompilationCallback *this, JSC::CodeBlock *a2, JSC::CodeBlock *a3)
{
  uint64_t v4;
  uint64_t result;

  if (BYTE1(qword_1ECF4C332))
  {
    result = WTF::dataLog<char [27],JSC::CodeBlock,char [19],char [2]>((uint64_t)a2);
    v4 = *((_QWORD *)a2 + 24);
    if (BYTE1(qword_1ECF4C332))
      result = WTF::dataLog<JSC::CodeBlock,char [30],char [2]>(v4, ": Forcing slow path concurrently.", "\n");
  }
  else
  {
    v4 = *((_QWORD *)a2 + 24);
  }
  *(_DWORD *)(v4 + 200) = 0;
  return result;
}

uint64_t JSC::JITToDFGDeferredCompilationCallback::compilationDidComplete(uint64_t a1, uint64_t a2, double a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  JSC::DeferredSourceDump *v15;
  uint64_t v16;
  int v17;
  int v18;

  v17 = a5;
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<char [27],JSC::CodeBlock,char [10],JSC::CompilationResult,char [2]>(a2, &v17);
  if (a5 == 2)
    JSC::ScriptExecutable::installCode(*(_QWORD *)(a2 + 64), *(JSC::VM **)(a2 + 72), (JSC::CodeBlock *)a2, (*(unsigned __int16 *)(*(_QWORD *)(a2 + 56) + 28) >> 12) & 3, *(_DWORD *)(*(_QWORD *)(a2 + 56) + 20) >> 31, 0, a8, a9, *(uint8x8_t *)&a3);
  result = JSC::CodeBlock::setOptimizationThresholdBasedOnCompilationResult(*(_QWORD *)(a2 + 192), a5, a3);
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v18 = 0;
    v14 = *(unsigned int *)(v13 + 12);
    if ((_DWORD)v14)
    {
      v15 = *(JSC::DeferredSourceDump **)v13;
      v16 = 24 * v14;
      do
      {
        ++v18;
        WTF::dataLog<char [2],unsigned int,char [3]>("[", &v18, "] ");
        JSC::DeferredSourceDump::dump(v15);
        v15 = (JSC::DeferredSourceDump *)((char *)v15 + 24);
        v16 -= 24;
      }
      while (v16);
    }
    result = WTF::dataLog<char [16]>("\n");
  }
  if (a5 == 3)
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

void JSC::JITWorklist::visitWeakReferences<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;

  v10 = *(_QWORD *)(a2 + 80);
  v11 = (unsigned __int8 *)(*(_QWORD *)(a1 + 304) + 4);
  if (__ldaxr(v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
LABEL_5:
  v13 = *(_QWORD *)(a1 + 144);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 - 4);
    v15 = (_QWORD *)(v13 + 24 * v14);
    if (*(_DWORD *)(v13 - 12))
    {
      v16 = *(_QWORD **)(a1 + 144);
      if ((_DWORD)v14)
      {
        v17 = 24 * v14;
        v16 = *(_QWORD **)(a1 + 144);
        while (!*v16)
        {
          v16 += 3;
          v17 -= 24;
          if (!v17)
          {
            v16 = v15;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v16 = (_QWORD *)(v13 + 24 * v14);
  }
  else
  {
    v16 = 0;
    LODWORD(v14) = 0;
  }
  v15 = (_QWORD *)(v13 + 24 * v14);
  if (v13)
  {
LABEL_12:
    v18 = (_QWORD *)(v13 + 24 * *(unsigned int *)(v13 - 4));
    goto LABEL_13;
  }
  v18 = 0;
LABEL_13:
  v19 = v10 - 192;
  while (v16 != v18)
  {
    v20 = (_QWORD *)v16[2];
    if (v20[4] == v19)
      (*(void (**)(_QWORD *, uint64_t))(*v20 + 80))(v20, a2);
    v21 = v16 + 3;
    v16 = v15;
    if (v21 != v15)
    {
      v16 = v21;
      while (!*v16)
      {
        v16 += 3;
        if (v16 == v15)
        {
          v16 = v15;
          break;
        }
      }
    }
  }
  v22 = __ldxr(v11);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, v11))
LABEL_26:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, a3, a4, a5, a6, a7, a8);
  v23 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v23)
  {
    v24 = *(_QWORD *)(a1 + 32);
    v25 = v24 + 8 * v23;
    do
    {
      v26 = *(_QWORD *)(*(_QWORD *)v24 + 64);
      if (v26 && *(_QWORD *)v26 == v19)
      {
        if (!*(_BYTE *)(v26 + 32))
          goto LABEL_45;
        if (!**(_BYTE **)(v26 + 40))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v26 + 8) + 64))(*(_QWORD *)(v26 + 8), a2))
          {
            v27 = *(_DWORD *)(v26 + 28);
            if (v27)
            {
              v28 = v27 - 1;
              v29 = 8 * (v27 - 1);
              while (*(_DWORD *)(v26 + 28) > v28)
              {
                (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v26 + 16) + v29) + 16))(*(_QWORD *)(*(_QWORD *)(v26 + 16) + v29), a2);
                v29 -= 8;
                if (--v28 == -1)
                  goto LABEL_38;
              }
LABEL_45:
              __break(0xC471u);
              JUMPOUT(0x1988024DCLL);
            }
          }
        }
      }
LABEL_38:
      v24 += 8;
    }
    while (v24 != v25);
  }
}

_QWORD *WTF::HashMap<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>,WTF::HashTraits<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>,WTF::HashTableTraits>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[3 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[3 * v1];
  if ((_DWORD)v1)
  {
    v3 = 24 * v1;
    while (!*result)
    {
      result += 3;
      v3 -= 24;
      if (!v3)
        return v2;
    }
  }
  return result;
}

void JSC::JITWorklist::visitWeakReferences<JSC::SlotVisitor>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;

  v10 = *(_QWORD *)(a2 + 80);
  v11 = (unsigned __int8 *)(*(_QWORD *)(a1 + 304) + 4);
  if (__ldaxr(v11))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
    goto LABEL_4;
  }
  if (__stxr(1u, v11))
    goto LABEL_3;
LABEL_4:
  v13 = *(_QWORD *)(a1 + 144);
  if (!v13)
  {
    v16 = 0;
    LODWORD(v14) = 0;
    goto LABEL_46;
  }
  v14 = *(unsigned int *)(v13 - 4);
  v15 = (_QWORD *)(v13 + 24 * v14);
  if (!*(_DWORD *)(v13 - 12))
  {
    v16 = (_QWORD *)(v13 + 24 * v14);
LABEL_46:
    v15 = (_QWORD *)(v13 + 24 * v14);
    goto LABEL_11;
  }
  v16 = *(_QWORD **)(a1 + 144);
  if ((_DWORD)v14)
  {
    v17 = 24 * v14;
    v16 = *(_QWORD **)(a1 + 144);
    while (!*v16)
    {
      v16 += 3;
      v17 -= 24;
      if (!v17)
      {
        v16 = v15;
        break;
      }
    }
  }
LABEL_11:
  if (v13)
    v18 = (_QWORD *)(v13 + 24 * *(unsigned int *)(v13 - 4));
  else
    v18 = 0;
  v19 = v10 - 192;
  while (v16 != v18)
  {
    v20 = (_QWORD *)v16[2];
    if (v20[4] == v19)
      (*(void (**)(_QWORD *, uint64_t))(*v20 + 80))(v20, a2);
    v21 = v16 + 3;
    v16 = v15;
    if (v21 != v15)
    {
      v16 = v21;
      while (!*v16)
      {
        v16 += 3;
        if (v16 == v15)
        {
          v16 = v15;
          break;
        }
      }
    }
  }
  v22 = __ldxr(v11);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, v11))
LABEL_26:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, a3, a4, a5, a6, a7, a8);
  v23 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v23)
  {
    v24 = *(_QWORD *)(a1 + 32);
    v25 = v24 + 8 * v23;
    while (1)
    {
      v26 = *(_QWORD *)(*(_QWORD *)v24 + 64);
      if (v26 && *(_QWORD *)v26 == v19)
      {
        if (!*(_BYTE *)(v26 + 32))
          goto LABEL_49;
        if (!**(_BYTE **)(v26 + 40))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v26 + 8) + 64))(*(_QWORD *)(v26 + 8), a2))
          {
            v27 = *(_DWORD *)(v26 + 28);
            if (v27)
              break;
          }
        }
      }
LABEL_30:
      v24 += 8;
      if (v24 == v25)
        return;
    }
    v28 = v27 - 1;
    v29 = 8 * (v27 - 1);
    while (*(_DWORD *)(v26 + 28) > v28)
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v26 + 16) + v29) + 24))(*(_QWORD *)(*(_QWORD *)(v26 + 16) + v29), a2);
      v29 -= 8;
      if (--v28 == -1)
        goto LABEL_30;
    }
LABEL_49:
    __break(0xC471u);
    JUMPOUT(0x198802784);
  }
}

JSC::JITWorklist *JSC::JITWorklist::JITWorklist(JSC::JITWorklist *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v22;
  char v23;

  *((_OWORD *)this + 2) = 0u;
  v2 = (uint64_t *)((char *)this + 32);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = (char *)this + 168;
  *((_QWORD *)this + 20) = 16;
  *((_BYTE *)this + 296) = 0;
  v3 = WTF::fastMalloc((WTF *)8);
  *(_DWORD *)v3 = 1;
  *(_BYTE *)(v3 + 4) = 0;
  *((_QWORD *)this + 38) = v3;
  WTF::AutomaticThreadCondition::create((_QWORD *)this + 39);
  *((_BYTE *)this + 320) = 0;
  v10 = dword_1ECF4C470;
  *((_QWORD *)this + 2) = qword_1ECF4C468;
  *((_DWORD *)this + 6) = v10;
  v11 = (unsigned __int8 *)(*((_QWORD *)this + 38) + 4);
  v22 = v11;
  v23 = 1;
  if (__ldaxr(v11))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
    goto LABEL_4;
  }
  if (__stxr(1u, v11))
    goto LABEL_3;
LABEL_4:
  if ((_DWORD)qword_1ECF4C468)
  {
    v13 = 0;
    do
    {
      v14 = WTF::fastMalloc((WTF *)0x48);
      JSC::JITWorklistThread::JITWorklistThread(v14, (uint64_t)&v22, (uint64_t)this);
      v15 = *((unsigned int *)this + 11);
      if ((_DWORD)v15 == *((_DWORD *)this + 10))
      {
        WTF::Vector<WTF::Ref<JSC::JITWorklistThread,WTF::RawPtrTraits<JSC::JITWorklistThread>,WTF::DefaultRefDerefTraits<JSC::JITWorklistThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITWorklistThread&>((uint64_t)v2, v14);
      }
      else
      {
        v16 = *v2;
        v17 = (unsigned int *)(v14 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
        *(_QWORD *)(v16 + 8 * v15) = v14;
        ++*((_DWORD *)this + 11);
      }
      ++v13;
    }
    while (v13 < qword_1ECF4C468);
  }
  if (v23)
  {
    v19 = v22;
    v20 = __ldxr(v22);
    if (v20 == 1)
    {
      if (!__stlxr(0, v22))
        return this;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v19, 0, v4, v5, v6, v7, v8, v9);
  }
  return this;
}

unint64_t *WTF::Ref<WTF::AutomaticThreadCondition,WTF::RawPtrTraits<WTF::AutomaticThreadCondition>,WTF::DefaultRefDerefTraits<WTF::AutomaticThreadCondition>>::~Ref(unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;
  WTF *v14;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 8);
      if (v13)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        v14 = (WTF *)v9;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
        v9 = (unint64_t)v14;
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

uint64_t JSC::JITWorklist::ensureGlobalWorklist(JSC::JITWorklist *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
  }
  return JSC::theGlobalJITWorklist;
}

uint64_t JSC::JITWorklist::enqueue(uint64_t a1, JSC::JITPlan **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  JSC::JITPlan *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  BOOL v31;
  _QWORD *v32;
  int v33;
  BOOL v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  JSC::JITPlan *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  int v60;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  _DWORD *v69;
  int v70;
  char *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  JSC::JITPlan *v75;
  int v76;
  _QWORD *v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  _QWORD v84[2];
  unsigned __int8 *v85;
  char v86;

  if (byte_1ECF4C464)
  {
    v10 = (unsigned __int8 *)(*(_QWORD *)(a1 + 304) + 4);
    v85 = v10;
    v86 = 1;
    if (__ldaxr(v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, v10))
    {
LABEL_5:
      if (BYTE5(qword_1ECF4C332))
      {
        v79 = WTF::dataFile((WTF *)v10);
        JSC::JITWorklist::dump((_DWORD *)a1, v79);
        v84[0] = JSC::JITPlan::key(*a2);
        v84[1] = v80;
        WTF::dataLog<char [31],JSC::JITCompilationKey,char [2]>((uint64_t)v84);
      }
      v12 = *a2;
      v13 = *((_DWORD *)*a2 + 4);
      v14 = (_QWORD *)*((_QWORD *)*a2 + 5);
      if (v13 == 1)
      {
        v14 = (_QWORD *)v14[7];
      }
      else
      {
        if (v14[24])
          v14 = (_QWORD *)v14[24];
        v15 = v14[15];
        if (v15)
        {
          v16 = *(unsigned __int8 *)(v15 + 12);
          if ((v16 & 0xFE) != 2 && v16 != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198803000);
          }
        }
      }
      v18 = (uint64_t *)(a1 + 144);
      v19 = (unsigned int *)((char *)v12 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
      v21 = *v18;
      if (*v18)
        goto LABEL_19;
      v75 = v12;
      v76 = v13;
      v77 = v14;
      v78 = (unsigned int *)((char *)v12 + 8);
      WTF::HashTable<JSC::JITCompilationKey,WTF::KeyValuePair<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>>,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashMap<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>,WTF::HashTraits<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JITCompilationKey>>::expand((uint64_t *)(a1 + 144), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v19 = v78;
      v14 = v77;
      v13 = v76;
      v12 = v75;
      v21 = *v18;
      if (*v18)
LABEL_19:
        v22 = *(_DWORD *)(v21 - 8);
      else
        v22 = 0;
      v23 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
      v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
      v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
      v26 = v22 & ((0xD7862706ELL
                  * (unint64_t)(95187966 * v13 + 277951225 * ((v25 >> 31) ^ v25))) >> 4);
      v27 = v21 + 24 * v26;
      v28 = *(_QWORD *)v27;
      v29 = *(_QWORD *)v27 == 0;
      v30 = *(_DWORD *)(v27 + 8);
      if (*(_QWORD *)v27)
        v31 = 0;
      else
        v31 = v30 == 0;
      if (!v31)
      {
        v32 = 0;
        v33 = 1;
        while ((_QWORD *)v28 != v14 || v30 != v13)
        {
          if (v29 && v30 != 0)
            v32 = (_QWORD *)v27;
          v26 = (v26 + v33) & v22;
          v27 = v21 + 24 * v26;
          v28 = *(_QWORD *)v27;
          v29 = *(_QWORD *)v27 == 0;
          v30 = *(_DWORD *)(v27 + 8);
          ++v33;
          if (*(_QWORD *)v27)
            v34 = 0;
          else
            v34 = v30 == 0;
          if (v34)
          {
            if (v32)
            {
              *v32 = 0;
              v32[1] = 0;
              v32[2] = 0;
              --*(_DWORD *)(*v18 - 16);
              v27 = (uint64_t)v32;
            }
            goto LABEL_36;
          }
        }
        if (v12)
        {
          do
          {
            v81 = __ldaxr(v19);
            v82 = v81 - 1;
          }
          while (__stlxr(v82, v19));
          if (!v82)
          {
            atomic_store(1u, (unsigned int *)v12 + 2);
            (*(void (**)(JSC::JITPlan *))(*(_QWORD *)v12 + 8))(v12);
          }
        }
LABEL_47:
        v45 = *((_DWORD *)*a2 + 4);
        if ((v45 - 2) >= 2)
        {
          if (v45 == 1)
          {
            v46 = 0;
          }
          else
          {
            if ((v45 - 4) >= 2)
            {
              if (v45)
              {
                __break(0xC471u);
                JUMPOUT(0x198802FE0);
              }
              goto LABEL_104;
            }
            v46 = 2;
          }
        }
        else
        {
          v46 = 1;
        }
        v47 = a1 + 48;
        v48 = a1 + 48 + 32 * v46;
        v50 = (uint64_t *)(v48 + 8);
        v49 = *(_QWORD *)(v48 + 8);
        if (*(_QWORD *)v48)
        {
          if (v49 + 1 != *(_QWORD *)v48)
            goto LABEL_51;
          LODWORD(v62) = *(_DWORD *)(v47 + 32 * v46 + 24);
        }
        else
        {
          v62 = *(unsigned int *)(v48 + 24);
          if (v49)
          {
            if (v49 != v62 - 1)
              goto LABEL_51;
          }
          else if ((_DWORD)v62)
          {
            goto LABEL_51;
          }
        }
        v83 = v62;
        v64 = ((unint64_t)v62 >> 2) + v62;
        if (v64 <= 0xF)
          v64 = 15;
        if (v64 < 0x1FFFFFFF)
        {
          v65 = v47 + 32 * v46;
          v68 = *(char **)(v65 + 16);
          v67 = v65 + 16;
          v66 = v68;
          v69 = (_DWORD *)(v67 + 8);
          v70 = v64 + 1;
          v71 = (char *)WTF::fastMalloc((WTF *)(8 * (v64 + 1)));
          *(_DWORD *)(v67 + 8) = v70;
          *(_QWORD *)v67 = v71;
          v72 = *v50;
          if (*(_QWORD *)v48 > (unint64_t)*v50)
          {
            memcpy(v71, v66, 8 * v72);
            v74 = *(_QWORD *)v48 - v83 + *v69;
            memcpy((void *)(*(_QWORD *)v67 + 8 * v74), &v66[8 * *(_QWORD *)v48], 8 * v83 - 8 * *(_QWORD *)v48);
            *(_QWORD *)v48 = v74;
            v69 = (_DWORD *)(v67 + 8);
          }
          else
          {
            memcpy(&v71[8 * *(_QWORD *)v48], &v66[8 * *(_QWORD *)v48], 8 * v72 - 8 * *(_QWORD *)v48);
          }
          if (v66)
          {
            if (*(char **)v67 == v66)
            {
              *(_QWORD *)v67 = 0;
              *v69 = 0;
            }
            WTF::fastFree((unint64_t)v66, v73, v28, a4, a5, a6, a7, a8);
          }
LABEL_51:
          v51 = v47 + 32 * v46;
          v52 = *(_QWORD *)(v51 + 16);
          v53 = *v50;
          v54 = *a2;
          *a2 = 0;
          *(_QWORD *)(v52 + 8 * v53) = v54;
          if (v53 == *(unsigned int *)(v51 + 24) - 1)
            v55 = 0;
          else
            v55 = v53 + 1;
          *v50 = v55;
          v56 = *(unsigned int *)(a1 + 44);
          if ((_DWORD)v56)
          {
            v57 = *(_QWORD *)(a1 + 32);
            v58 = 8 * v56;
            while (*(_BYTE *)(*(_QWORD *)v57 + 47))
            {
              v57 += 8;
              v58 -= 8;
              if (!v58)
                goto LABEL_58;
            }
            WTF::AutomaticThreadCondition::notifyOne(*(_QWORD *)(a1 + 312), (uint64_t)&v85, v28, a4, a5, a6, a7, a8);
          }
LABEL_58:
          if (!v86)
            return 3;
          v59 = v85;
          v60 = __ldxr(v85);
          if (v60 == 1)
          {
            if (!__stlxr(0, v85))
              return 3;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v59, 0, v28, a4, a5, a6, a7, a8);
          return 3;
        }
LABEL_104:
        __break(0xC471u);
        JUMPOUT(0x198802FC0);
      }
LABEL_36:
      *(_QWORD *)v27 = v14;
      *(_DWORD *)(v27 + 8) = v13;
      v35 = *(unsigned int **)(v27 + 16);
      *(_QWORD *)(v27 + 16) = v12;
      if (v35)
      {
        v36 = v35 + 2;
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          atomic_store(1u, v35 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
        }
      }
      v39 = *v18;
      if (*v18)
        v40 = *(_DWORD *)(v39 - 12) + 1;
      else
        v40 = 1;
      *(_DWORD *)(v39 - 12) = v40;
      v41 = *v18;
      if (*v18)
        v42 = *(_DWORD *)(v41 - 12);
      else
        v42 = 0;
      v43 = (*(_DWORD *)(v41 - 16) + v42);
      v44 = *(unsigned int *)(v41 - 4);
      if (v44 > 0x400)
      {
        if (v44 > 2 * v43)
          goto LABEL_47;
      }
      else
      {
        if (3 * v44 > 4 * v43)
          goto LABEL_47;
        if (!(_DWORD)v44)
        {
          v63 = 8;
LABEL_78:
          WTF::HashTable<JSC::JITCompilationKey,WTF::KeyValuePair<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>>,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashMap<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>,WTF::HashTraits<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JITCompilationKey>>::rehash((uint64_t *)(a1 + 144), v63, v27, a4, a5, a6, a7, a8);
          goto LABEL_47;
        }
      }
      v63 = ((_DWORD)v44 << (6 * *(_DWORD *)(v41 - 12) >= (2 * v44)));
      goto LABEL_78;
    }
    v10 = (unsigned __int8 *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
    goto LABEL_5;
  }
  JSC::JITPlan::compileInThread(*a2, 0);
  return (*(uint64_t (**)(JSC::JITPlan *))(*(_QWORD *)*a2 + 24))(*a2);
}

uint64_t JSC::JITWorklist::dump(_DWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::PrintStream *v15;

  v4 = *((_QWORD *)a1 + 6);
  v5 = *((_QWORD *)a1 + 7);
  if (v4 > v5)
    v5 += a1[18];
  v6 = *((_QWORD *)a1 + 10);
  v7 = *((_QWORD *)a1 + 11);
  if (v6 > v7)
    v7 += a1[26];
  v9 = *((_QWORD *)a1 + 14);
  v8 = *((_QWORD *)a1 + 15);
  if (v9 > v8)
    v8 += a1[34];
  v10 = *((_QWORD *)a1 + 18);
  if (v10)
    v11 = *(_DWORD *)(v10 - 12);
  else
    v11 = 0;
  v12 = v5 + v7 - (v4 + v6 + v9) + v8;
  v13 = a1[41];
  v14 = a1[11];
  v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v15, "%s", "JITWorklist(");
  WTF::PrintStream::printf(v15, "%p", a1);
  WTF::PrintStream::printf(v15, "%s", ")[Queue Length = ");
  WTF::PrintStream::printf(v15, "%lu", v12);
  WTF::PrintStream::printf(v15, "%s", ", Map Size = ");
  WTF::PrintStream::printf(v15, "%u", v11);
  WTF::PrintStream::printf(v15, "%s", ", Num Ready = ");
  WTF::PrintStream::printf(v15, "%lu", v13);
  WTF::PrintStream::printf(v15, "%s", ", Num Active Threads = ");
  WTF::PrintStream::printf(v15, "%u", *a1);
  WTF::PrintStream::printf(v15, "%s", "/");
  WTF::PrintStream::printf(v15, "%lu", v14);
  WTF::PrintStream::printf(v15, "%s", "]");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t WTF::dataLog<char [31],JSC::JITCompilationKey,char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  WTF::PrintStream *v7;
  char v8;
  const void **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = (const void **)&v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", ": Enqueueing plan to optimize ");
  if (*(_QWORD *)a1 || *(_DWORD *)(a1 + 8))
  {
    v10 = *(char **)a1;
    v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printImpl<char [13],WTF::RawPointer,char [7],JSC::JITCompilationMode,char [2]>(v5, "(Compile of ", (const void **)&v10, " with ", (int *)(a1 + 8), ")");
  }
  else
  {
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v7, "%s", "<empty>");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

unint64_t JSC::JITWorklist::queueLength(JSC::JITWorklist *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;

  v9 = (unsigned __int8 *)(*((_QWORD *)this + 38) + 4);
  if (__ldaxr(v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_5:
  v11 = *((_QWORD *)this + 6);
  v12 = *((_QWORD *)this + 7);
  if (v11 > v12)
    v12 += *((unsigned int *)this + 18);
  v13 = *((_QWORD *)this + 10);
  v14 = *((_QWORD *)this + 11);
  if (v13 > v14)
    v14 += *((unsigned int *)this + 26);
  v16 = *((_QWORD *)this + 14);
  v15 = *((_QWORD *)this + 15);
  if (v16 > v15)
    v15 += *((unsigned int *)this + 34);
  v17 = __ldxr(v9);
  if (v17 == 1)
  {
    if (!__stlxr(0, v9))
      return v12 + v14 - (v11 + v13 + v16) + v15;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
  return v12 + v14 - (v11 + v13 + v16) + v15;
}

void JSC::JITWorklist::suspendAllThreads(JSC::JITWorklist *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned __int8 *v14;
  int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  WTF *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  WTF *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v35;
  WTF *v36;
  uint64_t v37;
  _BYTE v38[64];

  v9 = (unsigned __int8 *)this + 296;
  if (__ldaxr(v9))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
    goto LABEL_4;
  }
  if (__stxr(1u, v9))
    goto LABEL_3;
LABEL_4:
  v36 = (WTF *)v38;
  v37 = 8;
  v11 = *((unsigned int *)this + 11);
  if (!(_DWORD)v11)
    return;
  v12 = (unsigned int **)*((_QWORD *)this + 4);
  v13 = &v12[v11];
  do
  {
    v14 = (unsigned __int8 *)*v12 + 46;
    while (1)
    {
      v15 = *v14;
      if ((v15 & 1) != 0)
        break;
      v24 = __ldaxr(v14);
      if (v24 == v15)
      {
        if (!__stxr(v15 | 1, v14))
          goto LABEL_17;
      }
      else
      {
        __clrex();
      }
    }
    v16 = *v12;
    v17 = *v12 + 2;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v35 = v16;
    v19 = HIDWORD(v37);
    if (HIDWORD(v37) == (_DWORD)v37)
    {
      WTF::Vector<WTF::Ref<JSC::JITWorklistThread,WTF::RawPtrTraits<JSC::JITWorklistThread>,WTF::DefaultRefDerefTraits<JSC::JITWorklistThread>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<JSC::JITWorklistThread,WTF::RawPtrTraits<JSC::JITWorklistThread>,WTF::DefaultRefDerefTraits<JSC::JITWorklistThread>>>((uint64_t)&v36, (unint64_t)&v35);
    }
    else
    {
      v35 = 0;
      *((_QWORD *)v36 + HIDWORD(v37)) = v16;
      HIDWORD(v37) = v19 + 1;
    }
    v20 = v35;
    v35 = 0;
    if (v20)
    {
      v21 = v20 + 2;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v20 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
      }
    }
LABEL_17:
    ++v12;
  }
  while (v12 != v13);
  v25 = v36;
  if (!HIDWORD(v37))
    goto LABEL_41;
  v26 = 8 * HIDWORD(v37);
  do
  {
    v27 = (unsigned __int8 *)(*(_QWORD *)v25 + 46);
    if (__ldaxr(v27))
    {
      __clrex();
LABEL_27:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v27);
      goto LABEL_28;
    }
    if (__stxr(1u, v27))
      goto LABEL_27;
LABEL_28:
    v25 = (WTF *)((char *)v25 + 8);
    v26 -= 8;
  }
  while (v26);
  v25 = v36;
  if (HIDWORD(v37))
  {
    v29 = (WTF *)((char *)v36 + 8 * HIDWORD(v37));
    do
    {
      v30 = *(unsigned int **)v25;
      *(_QWORD *)v25 = 0;
      if (v30)
      {
        v31 = v30 + 2;
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          atomic_store(1u, v30 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
        }
      }
      v25 = (WTF *)((char *)v25 + 8);
    }
    while (v25 != v29);
    v25 = v36;
  }
LABEL_41:
  if (v38 != (_BYTE *)v25 && v25 != 0)
  {
    v36 = 0;
    LODWORD(v37) = 0;
    WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::JITWorklist::completeAllReadyPlansForVM(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  JSC::JITPlan **v36;
  int v38;
  BOOL v39;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v45;
  JSC::JITPlan **v46;
  JSC::JITPlan *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  int v63;
  uint64_t v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  _QWORD *v72;
  int v73;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  int v85;
  _QWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  char *v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  unint64_t v101;
  uint64_t v102;
  size_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  int v114;
  BOOL v115;
  BOOL v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int *v119;
  unsigned int v120;
  BOOL v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  unsigned int *v133;
  _QWORD *v134;
  unsigned int *v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  size_t v147;
  size_t v148;
  uint64_t v149;
  _DWORD *impl_casual_case;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  size_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  unint64_t *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  _DWORD *v179;
  unint64_t StatusReg;
  unsigned __int8 *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  char *v185;
  char *v186;
  _QWORD v187[2];
  WTF *v188;
  uint64_t v189;
  _BYTE v190[72];

  v184 = a4;
  v4 = a2;
  v6 = *(_DWORD *)(a2 + 916);
  v188 = (WTF *)v190;
  v189 = 8;
  *(_DWORD *)(a2 + 916) = v6 + 2;
  v7 = (unsigned __int8 *)(*(_QWORD *)(a1 + 304) + 4);
  v8 = __ldaxr(v7);
  v183 = a3;
  if (v8)
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v7);
  a3 = v183;
LABEL_4:
  v9 = 0xD7862706ELL;
  v10 = 277951225;
  v11 = 95187966;
  v12 = *(char **)(a1 + 152);
  v13 = *(unsigned int *)(a1 + 164);
  v14 = &v12[8 * v13];
  v182 = v4;
  if (!(_DWORD)v13)
  {
    v15 = 0;
    LODWORD(v16) = 0;
    v17 = &v12[8 * v13];
    v20 = *(_QWORD *)(a1 + 152);
    if (v14 != v12)
      goto LABEL_11;
    goto LABEL_12;
  }
  v15 = 0;
  v16 = 0;
  a4 = -1;
  a2 = 2;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v181 = v7;
  v17 = &v12[8 * v13];
  v18 = v17;
  v19 = v184;
  while (2)
  {
    v52 = *(unsigned int **)v12;
    if (*(_QWORD *)v12)
    {
      v53 = v52 + 2;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 + 1, v53));
    }
    v187[0] = v52;
    if (*((_QWORD *)v52 + 4) != v4 || v52[3] != 2)
    {
      v187[0] = 0;
      v55 = v52 + 2;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (v56 != 1)
        goto LABEL_68;
      v161 = v18;
      v162 = v16;
      v163 = v15;
      v164 = 0;
      goto LABEL_220;
    }
    v57 = v52[4];
    v58 = (_QWORD *)*((_QWORD *)v52 + 5);
    v185 = v18;
    v186 = v17;
    if (v57 == 1)
    {
      v58 = (_QWORD *)v58[7];
      if (v19 == 1 && v58 == (_QWORD *)a3)
        v15 = 1;
      else
        v15 = v15;
      v57 = 1;
    }
    else
    {
      if (v58[24])
        v58 = (_QWORD *)v58[24];
      v59 = v58[15];
      if (v59)
      {
        v60 = *(unsigned __int8 *)(v59 + 12);
        if ((v60 & 0xFE) != 2 && v60 != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198804524);
        }
        if (v57 == v19 && v58 == (_QWORD *)a3)
          v15 = 1;
        else
          v15 = v15;
        v63 = *(unsigned __int8 *)(v59 + 12);
        if ((v63 & 0xFE) != 2 && v63 != 0)
        {
LABEL_97:
          __break(0xC471u);
          JUMPOUT(0x198803A30);
        }
      }
      else if (v57 == v19 && v58 == (_QWORD *)a3)
      {
        v15 = 1;
      }
      else
      {
        v15 = v15;
      }
    }
    v65 = *(_QWORD *)(a1 + 144);
    if (!v65)
      goto LABEL_117;
    v66 = *(_DWORD *)(v65 - 8);
    v67 = ((unint64_t)v58 + ~((_QWORD)v58 << 32)) ^ (((unint64_t)v58 + ~((_QWORD)v58 << 32)) >> 22);
    v68 = 9 * ((v67 + ~(v67 << 13)) ^ ((v67 + ~(v67 << 13)) >> 8));
    v69 = (v68 ^ (v68 >> 15)) + ~((v68 ^ (v68 >> 15)) << 27);
    v70 = v66 & ((0xD7862706ELL
                * (unint64_t)(95187966 * v57 + 277951225 * ((v69 >> 31) ^ v69))) >> 4);
    v71 = v65 + 24 * v70;
    v72 = *(_QWORD **)v71;
    v73 = *(_DWORD *)(v71 + 8);
    if (*(_QWORD **)v71 != v58 || v73 != v57)
    {
      v97 = 1;
      while (v72 || v73)
      {
        v70 = (v70 + v97) & v66;
        v71 = v65 + 24 * v70;
        v72 = *(_QWORD **)v71;
        v73 = *(_DWORD *)(v71 + 8);
        ++v97;
        if (*(_QWORD **)v71 == v58 && v73 == v57)
          goto LABEL_104;
      }
      v71 = v65 + 24 * *(unsigned int *)(v65 - 4);
    }
LABEL_104:
    if (v65 + 24 * *(unsigned int *)(v65 - 4) == v71)
      goto LABEL_117;
    *(_QWORD *)v71 = 0;
    *(_DWORD *)(v71 + 8) = 2;
    v75 = *(unsigned int **)(v71 + 16);
    *(_QWORD *)(v71 + 16) = 0;
    if (v75)
    {
      v76 = v75 + 2;
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (!v78)
      {
        atomic_store(1u, v75 + 2);
        v166 = v15;
        (*(void (**)(unsigned int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 8))(v75, 2, a3, -1, 0xD7862706ELL, 277951225, 95187966);
        a2 = 2;
        a4 = -1;
        v15 = v166;
        v11 = 95187966;
        v10 = 277951225;
        v9 = 0xD7862706ELL;
        a3 = v183;
        v19 = v184;
      }
    }
    ++*(_DWORD *)(*(_QWORD *)(a1 + 144) - 16);
    v79 = *(_QWORD *)(a1 + 144);
    v80 = v79 ? *(_DWORD *)(v79 - 12) - 1 : -1;
    *(_DWORD *)(v79 - 12) = v80;
    v81 = *(_QWORD *)(a1 + 144);
    if (!v81)
      goto LABEL_117;
    v82 = *(_DWORD *)(v81 - 12);
    v83 = *(unsigned int *)(v81 - 4);
    if (6 * v82 >= v83 || v83 < 9)
      goto LABEL_117;
    v101 = v83 >> 1;
    v102 = 24 * (v83 >> 1);
    v103 = v102 + 16;
    v104 = *(_QWORD *)(StatusReg + 752);
    if (!v104)
      goto LABEL_205;
    v105 = (unint64_t)(v102 + 31) >> 4;
    if (v83 <= 0x21)
    {
      v146 = 23 * v105 + 7;
      goto LABEL_157;
    }
    if (v83 <= 0x341)
    {
      v146 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v105 + 626);
      if (*(_DWORD *)(v104 + 8052) > v146)
      {
LABEL_157:
        v106 = v104 + 8 * v146;
        v107 = v106 + 8064;
        *(_BYTE *)(v106 + 8064) = 1;
        v108 = *(unsigned int *)(v106 + 8080);
        if ((_DWORD)v108)
        {
          *(_DWORD *)(v107 + 16) = v108 - *(_DWORD *)(v107 + 20);
          v109 = *(_QWORD *)(v107 + 8) - v108;
        }
        else
        {
          v155 = *(_QWORD *)(v107 + 40);
          v156 = *(_QWORD *)(v107 + 24);
          if (!v155)
          {
            if (*(_BYTE *)(v107 + 5) == 6)
            {
              v170 = *(unsigned int *)(v107 + 32);
              v171 = *(_DWORD *)(v107 + 36);
              if (v170 < v171)
              {
                *(_QWORD *)(v107 + 8 * v170 + 56) = 0;
                v172 = (unint64_t *)(v104 + 8128 + 8 * v146 + 8 * v170);
                v173 = v171 - 1 - v170;
                while (v173)
                {
                  v156 += 1024;
                  v175 = *v172++;
                  v174 = v175;
                  LODWORD(v170) = v170 + 1;
                  --v173;
                  if (v175)
                  {
                    v155 = __rbit64(v174);
                    *(_DWORD *)(v107 + 32) = v170;
                    *(_QWORD *)(v107 + 24) = v156;
                    v4 = v182;
                    a3 = v183;
                    v19 = v184;
                    v9 = 0xD7862706ELL;
                    v10 = 277951225;
                    v11 = 95187966;
                    a4 = -1;
                    goto LABEL_215;
                  }
                }
                *(_DWORD *)(v107 + 32) = v171;
              }
            }
            *(_BYTE *)v107 = 0;
            v4 = v182;
            goto LABEL_205;
          }
LABEL_215:
          v157 = __clz(v155);
          *(_QWORD *)(v107 + 40) = v155 & ~(0x8000000000000000 >> v157);
          v109 = v156 + 16 * v157;
        }
        *(_BYTE *)v107 = 0;
        v110 = 1;
        goto LABEL_160;
      }
    }
LABEL_205:
    v147 = v103;
    v148 = v103;
    v149 = v15;
    impl_casual_case = bmalloc_allocate_impl_casual_case(v148, 1, a3, -1, 0xD7862706ELL, 277951225, 95187966, v15);
    a4 = -1;
    v16 = v16;
    v15 = v149;
    v11 = 95187966;
    v10 = 277951225;
    v9 = 0xD7862706ELL;
    a3 = v183;
    v19 = v184;
    v109 = (unint64_t)impl_casual_case;
    v103 = v147;
    v101 = v83 >> 1;
LABEL_160:
    if ((v110 & 1) != 0 && (v110 & 0xFFFFFFFF00000000) != 0x100000000)
    {
      v178 = v101;
      v179 = (_DWORD *)v109;
      if (v83 < 0x155554)
      {
        v159 = v103;
        v160 = v15;
        bzero((void *)v109, v159);
        LODWORD(v101) = v178;
        v109 = (unint64_t)v179;
        a4 = -1;
        v15 = v160;
        v11 = 95187966;
        v10 = 277951225;
        v9 = 0xD7862706ELL;
        a3 = v183;
        v19 = v184;
      }
      else
      {
        v151 = pas_page_malloc_cached_alignment;
        if (!pas_page_malloc_cached_alignment)
        {
          v152 = v15;
          v151 = pas_page_malloc_alignment_slow();
          v109 = (unint64_t)v179;
          v16 = v16;
          LODWORD(v15) = v152;
          pas_page_malloc_cached_alignment = v151;
        }
        v176 = v15;
        if (((v151 - 1) & (v103 | v109)) != 0)
        {
          v153 = v16;
          bzero((void *)v109, v103);
        }
        else
        {
          v153 = v16;
          if (!v151)
          {
            v154 = pas_page_malloc_alignment_slow();
            v109 = (unint64_t)v179;
            pas_page_malloc_cached_alignment = v154;
          }
          mmap((void *)v109, v103, 3, 4114, 889192448, 0);
        }
        a3 = v183;
        v19 = v184;
        v9 = 0xD7862706ELL;
        v10 = 277951225;
        v11 = 95187966;
        v15 = v176;
        v16 = v153;
        a4 = -1;
        LODWORD(v101) = v178;
        v109 = (unint64_t)v179;
      }
    }
    v111 = 0;
    *(_QWORD *)(a1 + 144) = v109 + 16;
    *(_DWORD *)(v109 + 12) = v101;
    *(_DWORD *)(*(_QWORD *)(a1 + 144) - 8) = v101 - 1;
    *(_DWORD *)(*(_QWORD *)(a1 + 144) - 16) = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 144) - 12) = v82;
    do
    {
      v112 = (uint64_t *)(v81 + 24 * v111);
      v113 = *v112;
      v114 = *((_DWORD *)v112 + 2);
      if (*v112)
        v115 = 1;
      else
        v115 = v114 == 0;
      if (!v115)
        goto LABEL_165;
      if (v113)
        v116 = 0;
      else
        v116 = v114 == 0;
      if (v116)
      {
        v117 = v81 + 24 * v111;
        v118 = *(unsigned int **)(v117 + 16);
        *(_QWORD *)(v117 + 16) = 0;
        if (!v118)
          goto LABEL_165;
        v119 = v118 + 2;
        do
        {
          v120 = __ldaxr(v119);
          v121 = --v120 == 0;
        }
        while (__stlxr(v120, v119));
        goto LABEL_163;
      }
      v122 = *(_QWORD *)(a1 + 144);
      if (v122)
        v123 = *(_DWORD *)(v122 - 8);
      else
        v123 = 0;
      v124 = (~(v113 << 32) + v113) ^ ((unint64_t)(~(v113 << 32) + v113) >> 22);
      v125 = 9 * ((v124 + ~(v124 << 13)) ^ ((v124 + ~(v124 << 13)) >> 8));
      v126 = (v125 ^ (v125 >> 15)) + ~((v125 ^ (v125 >> 15)) << 27);
      v127 = v123 & ((0xD7862706ELL
                    * (unint64_t)(95187966 * v114 + 277951225 * ((v126 >> 31) ^ v126))) >> 4);
      v128 = 1;
      do
      {
        v129 = v127;
        v130 = v122 + 24 * v127;
        v127 = (v127 + v128++) & v123;
        if (*(_QWORD *)v130)
          v131 = 0;
        else
          v131 = *(_DWORD *)(v130 + 8) == 0;
      }
      while (!v131);
      v132 = v122 + 24 * v129;
      v135 = *(unsigned int **)(v132 + 16);
      v134 = (_QWORD *)(v132 + 16);
      v133 = v135;
      *v134 = 0;
      if (v135)
      {
        v136 = v133 + 2;
        do
        {
          v137 = __ldaxr(v136);
          v138 = v137 - 1;
        }
        while (__stlxr(v138, v136));
        if (!v138)
        {
          atomic_store(1u, v133 + 2);
          v177 = v15;
          (*(void (**)(unsigned int *))(*(_QWORD *)v133 + 8))(v133);
          a4 = -1;
          v16 = v16;
          v15 = v177;
          v11 = 95187966;
          v10 = 277951225;
          v9 = 0xD7862706ELL;
          a3 = v183;
          v19 = v184;
        }
      }
      *(_OWORD *)v130 = *(_OWORD *)v112;
      v139 = v81 + 24 * v111;
      v140 = *(_QWORD *)(v139 + 16);
      *(_QWORD *)(v139 + 16) = 0;
      *v134 = v140;
      v118 = *(unsigned int **)(v139 + 16);
      *(_QWORD *)(v139 + 16) = 0;
      v4 = v182;
      if (v118)
      {
        v141 = v118 + 2;
        do
        {
          v142 = __ldaxr(v141);
          v121 = --v142 == 0;
        }
        while (__stlxr(v142, v141));
LABEL_163:
        if (v121)
        {
          atomic_store(1u, v118 + 2);
          v167 = v15;
          (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
          a4 = -1;
          v15 = v167;
          v11 = 95187966;
          v10 = 277951225;
          v9 = 0xD7862706ELL;
          a3 = v183;
          v19 = v184;
        }
      }
LABEL_165:
      ++v111;
    }
    while (v111 != v83);
    v143 = v81 - 16;
    v144 = *(_QWORD *)(StatusReg + 752);
    if (v144)
    {
      if (v143 >> 43
        || ((*(unsigned int *)((char *)&bmalloc_megapage_table + (((unint64_t)(v81 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v81 - 16) >> 24)) & 1) == 0)
      {
        if (v143 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v143 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8
                          + (((((unint64_t)(v81 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                          + 24) >> (2 * ((((v81 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
            goto LABEL_200;
        }
        v168 = v15;
        v169 = v16;
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v144, v143, 1, a4, 0xD7862706ELL, 277951225, 95187966, v15);
      }
      else
      {
LABEL_200:
        v145 = *(unsigned int *)(v144 + 8000);
        if (v145 < 0x3E7)
        {
          *(_QWORD *)(v144 + 8 * v145) = v143 | 0x5000000000000;
          *(_DWORD *)(v144 + 8000) = v145 + 1;
          goto LABEL_202;
        }
        v168 = v15;
        v169 = v16;
        pas_thread_local_cache_append_deallocation_slow(v144, v143, (os_unfair_lock_s *)5, a4, 0xD7862706ELL, 277951225, 95187966, v15);
      }
    }
    else
    {
      v168 = v15;
      v169 = v16;
      pas_try_deallocate_slow_no_cache(v81 - 16, (uint64_t)&bmalloc_heap_config, 1);
    }
    v16 = v169;
    v15 = v168;
    v11 = 95187966;
    v10 = 277951225;
    v9 = 0xD7862706ELL;
    a3 = v183;
    v19 = v184;
LABEL_202:
    a4 = -1;
    a2 = 2;
LABEL_117:
    v85 = HIDWORD(v189);
    if (HIDWORD(v189) == (_DWORD)v189)
    {
      v158 = v15;
      v87 = (uint64_t *)WTF::Vector<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v188, HIDWORD(v189) + 1, (unint64_t)v187);
      a2 = 2;
      a4 = -1;
      v15 = v158;
      v11 = 95187966;
      v10 = 277951225;
      v9 = 0xD7862706ELL;
      a3 = v183;
      v19 = v184;
      v85 = HIDWORD(v189);
      v86 = (_QWORD *)((char *)v188 + 8 * HIDWORD(v189));
    }
    else
    {
      v86 = (_QWORD *)((char *)v188 + 8 * HIDWORD(v189));
      v87 = v187;
    }
    v18 = v185;
    v17 = v186;
    v88 = *v87;
    *v87 = 0;
    *v86 = v88;
    HIDWORD(v189) = v85 + 1;
    v52 = (unsigned int *)v187[0];
    v187[0] = 0;
    if (!v52)
      goto LABEL_123;
    v89 = v52 + 2;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (v90 != 1)
    {
LABEL_123:
      v91 = v12;
      if (v18 != (char *)(*(_QWORD *)(a1 + 152) + 8 * *(unsigned int *)(a1 + 164)))
      {
        if (v17 == v12)
        {
          v91 = v18;
        }
        else
        {
          v92 = v15;
          memmove(v18, v17, v12 - v17);
          a2 = 2;
          a4 = -1;
          v15 = v92;
          v11 = 95187966;
          v10 = 277951225;
          v9 = 0xD7862706ELL;
          a3 = v183;
          v19 = v184;
          v91 = &v18[v12 - v17];
        }
      }
      v93 = *(unsigned int **)v12;
      *(_QWORD *)v12 = 0;
      v17 = v12 + 8;
      if (v93)
      {
        v94 = v93 + 2;
        do
        {
          v95 = __ldaxr(v94);
          v96 = v95 - 1;
        }
        while (__stlxr(v96, v94));
        if (!v96)
        {
          atomic_store(1u, v93 + 2);
          v165 = v15;
          (*(void (**)(unsigned int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v93 + 8))(v93, 2, a3, -1, 0xD7862706ELL, 277951225, 95187966);
          a2 = 2;
          a4 = -1;
          v15 = v165;
          v11 = 95187966;
          v10 = 277951225;
          v9 = 0xD7862706ELL;
          a3 = v183;
          v19 = v184;
        }
      }
      v16 = (v16 + 1);
      v18 = v91;
      goto LABEL_68;
    }
    v161 = v185;
    v162 = v16;
    v163 = v15;
    v164 = 1;
LABEL_220:
    atomic_store(1u, v52 + 2);
    (*(void (**)(unsigned int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v52 + 8))(v52, 2, a3, -1, 0xD7862706ELL, 277951225, 95187966);
    a3 = v183;
    v19 = v184;
    v9 = 0xD7862706ELL;
    v10 = 277951225;
    v11 = 95187966;
    v15 = v163;
    v16 = v162;
    a4 = -1;
    a2 = 2;
    v18 = v161;
    if (v164)
      goto LABEL_123;
LABEL_68:
    v12 += 8;
    if (v12 < v14)
      continue;
    break;
  }
  LODWORD(v13) = *(_DWORD *)(a1 + 164);
  v14 = v18;
  v7 = v181;
  v20 = *(_QWORD *)(a1 + 152) + 8 * v13;
  if (v17 != (char *)v20)
  {
LABEL_11:
    v21 = v15;
    memmove(v14, v17, v20 - (_QWORD)v17);
    v15 = v21;
    v11 = 95187966;
    v10 = 277951225;
    v9 = 0xD7862706ELL;
    a3 = v183;
    LODWORD(v13) = *(_DWORD *)(a1 + 164);
  }
LABEL_12:
  *(_DWORD *)(a1 + 164) = v13 - v16;
  if (a3 || v184)
  {
    if ((_BYTE)v15)
    {
      v42 = 2;
    }
    else
    {
      v22 = *(_QWORD *)(a1 + 144);
      if (!v22)
        goto LABEL_66;
      v23 = *(_DWORD *)(v22 - 8);
      v24 = (a3 + ~(a3 << 32)) ^ ((unint64_t)(a3 + ~(a3 << 32)) >> 22);
      v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
      v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
      v27 = v23 & ((0xD7862706ELL
                  * (unint64_t)(95187966 * v184 + 277951225 * ((v26 >> 31) ^ v26))) >> 4);
      v28 = (uint64_t *)(v22 + 24 * v27);
      v29 = *v28;
      v30 = *((_DWORD *)v28 + 2);
      if (*v28 != a3 || v30 != v184)
      {
        v41 = 1;
        v42 = 1;
        while (v29 || v30)
        {
          v27 = (v27 + v41) & v23;
          v43 = (uint64_t *)(v22 + 24 * v27);
          v29 = *v43;
          v30 = *((_DWORD *)v43 + 2);
          ++v41;
          if (v29 == a3 && v30 == v184)
            goto LABEL_21;
        }
        goto LABEL_66;
      }
      v42 = 1;
    }
  }
  else
  {
LABEL_66:
    v42 = 0;
  }
LABEL_21:
  v32 = __ldxr(v7);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_25;
  }
  if (__stlxr(0, v7))
LABEL_25:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v7, 0, a3, a4, 0xD7862706ELL, 277951225, 95187966, v15);
  v33 = v4 + 192;
  v34 = *(_DWORD *)(v4 + 916) - 1;
  *(_DWORD *)(v4 + 916) = v34;
  if (*(unsigned __int8 *)(v4 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v35 = v34 == 0;
  else
    v35 = 0;
  if (v35)
  {
    *(_BYTE *)(v4 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v4 + 192, 0);
  }
  v36 = (JSC::JITPlan **)v188;
  if (HIDWORD(v189))
  {
    v45 = 8 * HIDWORD(v189);
    do
    {
      if (BYTE5(qword_1ECF4C332))
      {
        v187[0] = JSC::JITPlan::key(*v36);
        v187[1] = v51;
        WTF::dataLog<JSC::JITWorklist,char [14],JSC::JITCompilationKey,char [2]>(a1, ": Completing ", (uint64_t)v187, "\n");
      }
      if (*((_DWORD *)*v36 + 3) != 2)
        goto LABEL_97;
      (*(void (**)(JSC::JITPlan *))(*(_QWORD *)*v36 + 24))(*v36);
      ++v36;
      v45 -= 8;
    }
    while (v45);
    v36 = (JSC::JITPlan **)v188;
    if (HIDWORD(v189))
    {
      v46 = (JSC::JITPlan **)((char *)v188 + 8 * HIDWORD(v189));
      do
      {
        v47 = *v36;
        *v36 = 0;
        if (v47)
        {
          v48 = (unsigned int *)((char *)v47 + 8);
          do
          {
            v49 = __ldaxr(v48);
            v50 = v49 - 1;
          }
          while (__stlxr(v50, v48));
          if (!v50)
          {
            atomic_store(1u, (unsigned int *)v47 + 2);
            (*(void (**)(JSC::JITPlan *))(*(_QWORD *)v47 + 8))(v47);
          }
        }
        ++v36;
      }
      while (v36 != v46);
      v36 = (JSC::JITPlan **)v188;
    }
  }
  if (v190 != (_BYTE *)v36 && v36 != 0)
  {
    v188 = 0;
    LODWORD(v189) = 0;
    WTF::fastFree((unint64_t)v36, (void *)a2, a3, a4, v9, v10, v11, v15);
  }
  v38 = *(_DWORD *)(v182 + 916) - 1;
  *(_DWORD *)(v182 + 916) = v38;
  if (*(unsigned __int8 *)(v182 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v39 = v38 == 0;
  else
    v39 = 0;
  if (v39)
  {
    *(_BYTE *)(v182 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v33, 0);
  }
  return v42;
}

void JSC::JITWorklist::waitUntilAllPlansForVMAreReady(JSC::JITWorklist *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JITWorklist *v9;
  JSC::Heap *v10;
  unsigned int *v11;
  int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  int v24;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  v9 = this;
  v10 = (JSC::VM *)((char *)a2 + 192);
  ++*((_DWORD *)a2 + 229);
  v11 = (unsigned int *)((char *)a2 + 1096);
  v12 = *((_DWORD *)a2 + 274);
  if ((v12 & 4) != 0)
  {
    v13 = __ldaxr(v11);
    if (v13 == 4)
    {
      if (!__stlxr(0, v11))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    JSC::Heap::releaseAccessSlow((JSC::VM *)((char *)a2 + 192), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_7:
  v14 = (unsigned __int8 *)(*((_QWORD *)v9 + 38) + 4);
  if (__ldaxr(v14))
  {
    __clrex();
LABEL_9:
    this = (JSC::JITWorklist *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v14);
    goto LABEL_10;
  }
  if (__stxr(1u, v14))
    goto LABEL_9;
LABEL_10:
  if (BYTE5(qword_1ECF4C332))
  {
    v28 = WTF::dataFile(this);
    JSC::JITWorklist::dump(v9, v28);
    WTF::dataLog<char [16]>(": Waiting for all in VM to complete.\n");
  }
  while (1)
  {
    v16 = (_QWORD *)*((_QWORD *)v9 + 18);
    if (!v16)
    {
      v19 = 0;
      LODWORD(v17) = 0;
      goto LABEL_52;
    }
    v17 = *((unsigned int *)v16 - 1);
    v18 = &v16[3 * v17];
    if (!*((_DWORD *)v16 - 3))
    {
      v19 = &v16[3 * v17];
LABEL_52:
      v18 = &v16[3 * v17];
      goto LABEL_19;
    }
    v19 = (_QWORD *)*((_QWORD *)v9 + 18);
    if ((_DWORD)v17)
    {
      v20 = 24 * v17;
      v19 = (_QWORD *)*((_QWORD *)v9 + 18);
      while (!*v19)
      {
        v19 += 3;
        v20 -= 24;
        if (!v20)
        {
          v19 = v18;
          break;
        }
      }
    }
LABEL_19:
    if (v16)
      v16 += 3 * *((unsigned int *)v16 - 1);
    if (v16 == v19)
      break;
    while (1)
    {
      v21 = v19[2];
      if (*(JSC::VM **)(v21 + 32) == a2 && *(_DWORD *)(v21 + 12) != 2)
        break;
      v22 = v19 + 3;
      v19 = v18;
      if (v22 != v18)
      {
        v19 = v22;
        while (!*v19)
        {
          v19 += 3;
          if (v19 == v18)
          {
            v19 = v18;
            break;
          }
        }
      }
      if (v19 == v16)
        goto LABEL_32;
    }
    v23 = (unsigned __int8 *)(*((_QWORD *)v9 + 38) + 4);
    v29 = 0x7FF0000000000000;
    v30 = 0;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)v9 + 320, v23, (WTF::TimeWithDynamicClockType *)&v29);
  }
LABEL_32:
  v24 = __ldxr(v14);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, v14))
LABEL_36:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v14, 0, a3, a4, a5, a6, a7, a8);
  if ((v12 & 4) != 0)
  {
    if (__ldaxr(v11))
    {
      __clrex();
      goto LABEL_40;
    }
    if (__stlxr(4u, v11))
LABEL_40:
      JSC::Heap::acquireAccessSlow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  v26 = *((_DWORD *)a2 + 229) - 1;
  *((_DWORD *)a2 + 229) = v26;
  if (*((unsigned __int8 *)a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v27 = v26 == 0;
  else
    v27 = 0;
  if (v27)
  {
    *((_BYTE *)a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v10, 0);
  }
}

void JSC::JITWorklist::cancelAllPlansForVM(JSC::JITWorklist *this, JSC::VM *a2)
{
  unsigned __int8 *v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  int v20;
  JSC::JITPlan *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  JSC::VM *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned __int8 *v78;
  unsigned __int8 v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  unsigned __int8 *v88;
  char *v90;
  uint64_t v91;
  char *v92;
  int v93;
  char *v94;
  char *v95;
  unsigned int *v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unsigned int v109;
  uint64_t *v110;
  uint64_t v111;
  int v112;
  unsigned int *v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  int v124;
  char *v125;
  JSC::JITPlan **v126;
  JSC::JITPlan **v127;
  JSC::JITPlan *v128;
  unsigned int *v129;
  char *v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int v133;
  char *v134;
  int64_t v135;
  char *v136;
  unsigned int *v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  int v154;
  BOOL v155;
  BOOL v156;
  uint64_t v157;
  unsigned int *v158;
  unsigned int *v159;
  unsigned int v160;
  BOOL v161;
  uint64_t v162;
  int v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unsigned int v167;
  int v168;
  unsigned int v169;
  uint64_t v170;
  BOOL v171;
  uint64_t v172;
  unsigned int *v173;
  _QWORD *v174;
  unsigned int *v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int *v181;
  unsigned int v182;
  char *v183;
  int v184;
  int v185;
  BOOL v186;
  unint64_t v187;
  unsigned int **v189;
  uint64_t v190;
  unsigned int *v191;
  unsigned int *v192;
  unsigned int v193;
  unsigned int v194;
  unsigned __int8 *v195;
  _BYTE *v196;
  JSC::VM *v197;
  char *v198;
  int v199;
  char __src;
  char *__srca;
  char *__srcb;
  unsigned __int8 *__dst;
  char *__dsta;
  uint64_t *v205;
  __int128 v206;
  _BYTE v207[64];
  JSC::JITPlan *v208[2];
  uint64_t v209;

  v4 = (unsigned __int8 *)(*((_QWORD *)this + 38) + 4);
  if (__ldaxr(v4))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v4);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v209 = 0;
  v6 = (_QWORD *)*((_QWORD *)this + 18);
  v205 = (uint64_t *)((char *)this + 144);
  v7 = WTF::HashMap<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>,WTF::HashTraits<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>,WTF::HashTableTraits>::begin(v6);
  v15 = v7;
  v16 = v8;
  if (v6)
    v17 = &v6[3 * *((unsigned int *)v6 - 1)];
  else
    v17 = 0;
  v18 = (char *)this + 144;
  __dst = v4;
  if (v17 == v7)
    goto LABEL_23;
  do
  {
    v19 = v15[2];
    if (*(JSC::VM **)(v19 + 32) == a2)
    {
      v20 = *(_DWORD *)(v19 + 12);
      if (v20 != 1)
      {
        if (v20 == 3)
        {
LABEL_250:
          __break(0xC471u);
          JUMPOUT(0x198805360);
        }
        v208[0] = (JSC::JITPlan *)JSC::JITPlan::key((JSC::JITPlan *)v19);
        v208[1] = v21;
        WTF::HashTable<JSC::JITCompilationKey,JSC::JITCompilationKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>>::add(&v206, &v209, (uint64_t *)v208, v22, v23, v24, v25, v26);
      }
    }
    while (1)
    {
      v15 += 3;
      if (v15 == v16)
        break;
      if (*v15)
        goto LABEL_10;
    }
    v15 = v16;
LABEL_10:
    ;
  }
  while (v15 != v17);
  if (v209 && *(_DWORD *)(v209 - 12))
  {
    v27 = *(unsigned int *)(v209 - 4);
    if ((_DWORD)v27)
    {
      v28 = 16 * v27;
      v29 = v209;
      while (!*(_QWORD *)v29)
      {
        v29 += 16;
        v28 -= 16;
        if (!v28)
          goto LABEL_37;
      }
    }
    else
    {
      v29 = v209;
    }
    v31 = v209 + 16 * v27;
    if (v31 != v29)
    {
      v9 = *(_QWORD *)v29;
LABEL_29:
      WTF::HashMap<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>,WTF::HashTraits<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>,WTF::HashTableTraits>::take(&v206, v205, v9, *(unsigned int *)(v29 + 8), v11, v12, v13, v14);
      v32 = (unsigned int *)v206;
      v33 = (unsigned int *)(v206 + 8);
      (*(void (**)(_QWORD))(*(_QWORD *)v206 + 48))(v206);
      *(_QWORD *)&v206 = 0;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        atomic_store(1u, v32 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
      }
      while (1)
      {
        v29 += 16;
        if (v29 == v31)
          break;
        v9 = *(_QWORD *)v29;
        if (*(_QWORD *)v29)
        {
          v30 = 0;
          if (v29 != v31)
            goto LABEL_29;
          goto LABEL_38;
        }
      }
    }
LABEL_37:
    v30 = 0;
  }
  else
  {
LABEL_23:
    v30 = 1;
  }
LABEL_38:
  __src = v30;
  v197 = a2;
  v36 = (char *)this + 48;
  do
  {
    v37 = *(_QWORD *)v36;
    if (*(_QWORD *)v36 != *((_QWORD *)v36 + 1))
    {
      v41 = 0;
      v40 = 0;
      v39 = 0;
      v38 = 0;
      while (1)
      {
        v43 = *((_QWORD *)v36 + 2);
        v44 = *(unsigned int **)(v43 + 8 * v37);
        *(_QWORD *)(v43 + 8 * v37) = 0;
        v45 = *((_QWORD *)v36 + 2);
        v46 = *(unsigned int **)(v45 + 8 * v37);
        *(_QWORD *)(v45 + 8 * v37) = 0;
        if (v46)
        {
          v47 = v46 + 2;
          do
          {
            v48 = __ldaxr(v47);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v47));
          if (!v49)
          {
            atomic_store(1u, v46 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 8))(v46);
          }
        }
        if (*(_QWORD *)v36 == *((unsigned int *)v36 + 6) - 1)
          v50 = 0;
        else
          v50 = *(_QWORD *)v36 + 1;
        *(_QWORD *)v36 = v50;
        if (v44[3] == 3)
          goto LABEL_62;
        if (v38)
        {
          v51 = v41;
          if (v39 + 1 == v38)
            goto LABEL_72;
        }
        else if (v39)
        {
          if (v39 == v41 - 1)
          {
            v51 = v41;
LABEL_72:
            v57 = v51 + (v51 >> 2);
            if (v57 <= 0xF)
              v57 = 15;
            if (v57 >= 0x1FFFFFFF)
            {
              __break(0xC471u);
              JUMPOUT(0x198805438);
            }
            v41 = v57 + 1;
            v58 = (char *)WTF::fastMalloc((WTF *)(8 * (v57 + 1)));
            v59 = v58;
            if (v38 > v39)
            {
              memcpy(v58, v40, 8 * v39);
              memcpy(&v59[8 * v41 + 8 * (v38 - v51)], &v40[8 * v38], 8 * v51 - 8 * v38);
              v38 = v41 + v38 - v51;
            }
            else
            {
              memcpy(&v58[8 * v38], &v40[8 * v38], 8 * v39 - 8 * v38);
            }
            v41 = v41;
            if (v40)
            {
              if (v59 == v40)
                v60 = 0;
              else
                v60 = v59;
              if (v59 == v40)
                v41 = 0;
              WTF::fastFree((unint64_t)v40, v8, v9, v10, v11, v12, v13, v14);
              v40 = v60;
            }
            else
            {
              v40 = v59;
            }
            v18 = (char *)this + 144;
            goto LABEL_57;
          }
          v38 = 0;
        }
        else
        {
          v51 = 0;
          if (!v41)
            goto LABEL_72;
          v38 = 0;
        }
LABEL_57:
        v52 = v44 + 2;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 + 1, v52));
        *(_QWORD *)&v40[8 * v39] = v44;
        if (v39 == v41 - 1)
          v39 = 0;
        else
          ++v39;
LABEL_62:
        v54 = v44 + 2;
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (!v56)
        {
          atomic_store(1u, v44 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
        }
        v37 = *(_QWORD *)v36;
        if (*(_QWORD *)v36 == *((_QWORD *)v36 + 1))
          goto LABEL_41;
      }
    }
    v38 = 0;
    v39 = 0;
    v40 = 0;
    LODWORD(v41) = 0;
LABEL_41:
    *(_QWORD *)v36 = v38;
    *((_QWORD *)v36 + 1) = v39;
    v42 = *((_QWORD *)v36 + 2);
    *((_QWORD *)v36 + 2) = v40;
    *((_DWORD *)v36 + 6) = v41;
    if (v42)
      WTF::fastFree(v42, v8, v9, v10, v11, v12, v13, v14);
    v36 += 32;
  }
  while (v36 != v18);
  LODWORD(v61) = *((_DWORD *)this + 41);
  v62 = v197;
  if ((_DWORD)v61)
  {
    v63 = 0;
    while (1)
    {
      v64 = *((_QWORD *)this + 19);
      v65 = *(unsigned int **)(v64 + 8 * v63);
      if (v65[3] == 3)
        break;
LABEL_107:
      if (v61 <= ++v63)
        goto LABEL_108;
    }
    v66 = *(_QWORD *)(v64 + 8 * v61 - 8);
    if (v66)
    {
      v67 = (unsigned int *)(v66 + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 + 1, v67));
      v65 = *(unsigned int **)(v64 + 8 * v63);
      *(_QWORD *)(v64 + 8 * v63) = v66;
      if (v65)
        goto LABEL_96;
    }
    else
    {
      *(_QWORD *)(v64 + 8 * v63) = 0;
LABEL_96:
      v69 = v65 + 2;
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (!v71)
      {
        atomic_store(1u, v65 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v65 + 8))(v65);
      }
    }
    v72 = *((unsigned int *)this + 41);
    if (!(_DWORD)v72)
      goto LABEL_250;
    v61 = v72 - 1;
    v73 = *((_QWORD *)this + 19);
    v74 = *(unsigned int **)(v73 + 8 * v61);
    *(_QWORD *)(v73 + 8 * v61) = 0;
    if (v74)
    {
      v75 = v74 + 2;
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (!v77)
      {
        atomic_store(1u, v74 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v74 + 8))(v74);
      }
    }
    --v63;
    *((_DWORD *)this + 41) = v61;
    goto LABEL_107;
  }
LABEL_108:
  if ((__src & 1) == 0)
  {
    v78 = (unsigned __int8 *)this + 320;
    v79 = atomic_load((unsigned __int8 *)this + 320);
    if ((v79 & 1) != 0)
    {
      atomic_store(0, v78);
      WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v78, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  if (v209)
    WTF::fastFree(v209 - 16, v8, v9, v10, v11, v12, v13, v14);
  v80 = __ldxr(__dst);
  if (v80 != 1)
  {
    __clrex();
    goto LABEL_117;
  }
  if (__stlxr(0, __dst))
LABEL_117:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(__dst, 0, v9, v10, v11, v12, v13, v14);
  JSC::JITWorklist::waitUntilAllPlansForVMAreReady(this, v197, v9, v10, v11, v12, v13, v14);
  v87 = v207;
  *(_QWORD *)&v206 = v207;
  *((_QWORD *)&v206 + 1) = 8;
  ++*((_DWORD *)v197 + 229);
  v88 = (unsigned __int8 *)(*((_QWORD *)this + 38) + 4);
  if (__ldaxr(v88))
  {
    __clrex();
    goto LABEL_120;
  }
  if (__stxr(1u, v88))
LABEL_120:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v88);
  v90 = (char *)*((_QWORD *)this + 19);
  v91 = *((unsigned int *)this + 41);
  v92 = &v90[8 * v91];
  v93 = 0;
  if ((_DWORD)v91)
  {
    v94 = &v90[8 * v91];
    v95 = v94;
    v198 = v94;
    while (1)
    {
      v96 = *(unsigned int **)v90;
      if (*(_QWORD *)v90)
      {
        v97 = v96 + 2;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 + 1, v97));
      }
      v208[0] = (JSC::JITPlan *)v96;
      if (*((JSC::VM **)v96 + 4) != v62 || v96[3] != 2)
      {
        v208[0] = 0;
        v99 = v96 + 2;
        do
        {
          v100 = __ldaxr(v99);
          v101 = v100 - 1;
        }
        while (__stlxr(v101, v99));
        if (!v101)
        {
          atomic_store(1u, v96 + 2);
          __srcb = v94;
          (*(void (**)(unsigned int *))(*(_QWORD *)v96 + 8))(v96);
          v94 = __srcb;
        }
        goto LABEL_131;
      }
      __srca = v94;
      __dsta = v95;
      v199 = v93;
      JSC::JITPlan::key((JSC::JITPlan *)v96);
      v102 = JSC::JITPlan::key(v208[0]);
      v104 = *(_QWORD *)v18;
      if (!*(_QWORD *)v18)
        goto LABEL_153;
      v105 = *(_DWORD *)(v104 - 8);
      v106 = (v102 + ~(v102 << 32)) ^ ((unint64_t)(v102 + ~(v102 << 32)) >> 22);
      v107 = 9 * ((v106 + ~(v106 << 13)) ^ ((v106 + ~(v106 << 13)) >> 8));
      v108 = (v107 ^ (v107 >> 15)) + ~((v107 ^ (v107 >> 15)) << 27);
      v109 = v105 & ((0xD7862706ELL
                    * (unint64_t)(95187966 * (_DWORD)v103
                                       + 277951225 * ((v108 >> 31) ^ v108))) >> 4);
      v110 = (uint64_t *)(v104 + 24 * v109);
      v111 = *v110;
      v112 = *((_DWORD *)v110 + 2);
      if (*v110 != v102 || v112 != (_DWORD)v103)
      {
        v141 = 1;
        while (v111 || v112)
        {
          v109 = (v109 + v141) & v105;
          v110 = (uint64_t *)(v104 + 24 * v109);
          v111 = *v110;
          v112 = *((_DWORD *)v110 + 2);
          ++v141;
          if (*v110 == v102 && v112 == (_DWORD)v103)
            goto LABEL_140;
        }
        v110 = (uint64_t *)(v104 + 24 * *(unsigned int *)(v104 - 4));
      }
LABEL_140:
      if ((uint64_t *)(v104 + 24 * *(unsigned int *)(v104 - 4)) != v110)
      {
        *v110 = 0;
        *((_DWORD *)v110 + 2) = 2;
        v114 = (unsigned int *)v110[2];
        v110[2] = 0;
        if (v114)
        {
          v115 = v114 + 2;
          do
          {
            v116 = __ldaxr(v115);
            v117 = v116 - 1;
          }
          while (__stlxr(v117, v115));
          if (!v117)
          {
            atomic_store(1u, v114 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v114 + 8))(v114);
          }
        }
        ++*(_DWORD *)(*(_QWORD *)v18 - 16);
        v118 = *(_QWORD *)v18;
        v119 = *(_QWORD *)v18 ? *(_DWORD *)(v118 - 12) - 1 : -1;
        *(_DWORD *)(v118 - 12) = v119;
        v120 = *(_QWORD *)v18;
        if (*(_QWORD *)v18)
        {
          v121 = *(_DWORD *)(v120 - 12);
          v122 = *(unsigned int *)(v120 - 4);
          if (6 * v121 < v122 && v122 >= 9)
            break;
        }
      }
LABEL_153:
      v124 = HIDWORD(v206);
      v125 = __dsta;
      if (HIDWORD(v206) == DWORD2(v206))
      {
        v127 = (JSC::JITPlan **)WTF::Vector<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v206, HIDWORD(v206) + 1, (unint64_t)v208);
        v125 = __dsta;
        v124 = HIDWORD(v206);
        v126 = (JSC::JITPlan **)(v206 + 8 * HIDWORD(v206));
      }
      else
      {
        v126 = (JSC::JITPlan **)(v206 + 8 * HIDWORD(v206));
        v127 = v208;
      }
      v128 = *v127;
      *v127 = 0;
      *v126 = v128;
      HIDWORD(v206) = v124 + 1;
      v129 = (unsigned int *)v208[0];
      v208[0] = 0;
      v130 = __srca;
      if (v129)
      {
        v131 = v129 + 2;
        do
        {
          v132 = __ldaxr(v131);
          v133 = v132 - 1;
        }
        while (__stlxr(v133, v131));
        if (!v133)
        {
          atomic_store(1u, v129 + 2);
          (*(void (**)(unsigned int *, char *))(*(_QWORD *)v129 + 8))(v129, __srca);
          v130 = __srca;
          v125 = __dsta;
        }
      }
      v134 = v90;
      if (v125 != (char *)(*((_QWORD *)this + 19) + 8 * *((unsigned int *)this + 41)))
      {
        if (v130 == v90)
        {
          v134 = v125;
        }
        else
        {
          v135 = v90 - v130;
          v136 = v125;
          memmove(v125, v130, v90 - v130);
          v134 = &v136[v135];
        }
      }
      v137 = *(unsigned int **)v90;
      *(_QWORD *)v90 = 0;
      v94 = v90 + 8;
      if (v137)
      {
        v138 = v137 + 2;
        do
        {
          v139 = __ldaxr(v138);
          v140 = v139 - 1;
        }
        while (__stlxr(v140, v138));
        if (!v140)
        {
          atomic_store(1u, v137 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v137 + 8))(v137);
          v94 = v90 + 8;
        }
      }
      v93 = v199 + 1;
      v95 = v134;
      v92 = v198;
LABEL_131:
      v90 += 8;
      if (v90 >= v92)
      {
        v90 = (char *)*((_QWORD *)this + 19);
        LODWORD(v91) = *((_DWORD *)this + 41);
        v92 = v95;
        goto LABEL_213;
      }
    }
    v195 = v88;
    v196 = v87;
    v143 = WTF::fastZeroedMalloc(24 * (*(_DWORD *)(v120 - 4) >> 1) + 16, v103, v81, v82, v83, v84, v85, v86);
    v151 = 0;
    *(_QWORD *)v18 = v143 + 16;
    *(_DWORD *)(v143 + 12) = v122 >> 1;
    *(_DWORD *)(*(_QWORD *)v18 - 8) = (v122 >> 1) - 1;
    *(_DWORD *)(*(_QWORD *)v18 - 16) = 0;
    *(_DWORD *)(*(_QWORD *)v18 - 12) = v121;
    while (2)
    {
      v152 = (uint64_t *)(v120 + 24 * v151);
      v153 = *v152;
      v154 = *((_DWORD *)v152 + 2);
      if (*v152)
        v155 = 1;
      else
        v155 = v154 == 0;
      if (!v155)
      {
LABEL_211:
        if (++v151 == v122)
        {
          WTF::fastFree(v120 - 16, v144, v145, v146, v147, v148, v149, v150);
          v87 = v196;
          v62 = v197;
          v18 = (char *)this + 144;
          v88 = v195;
          goto LABEL_153;
        }
        continue;
      }
      break;
    }
    if (v153)
      v156 = 0;
    else
      v156 = v154 == 0;
    if (v156)
    {
      v157 = v120 + 24 * v151;
      v158 = *(unsigned int **)(v157 + 16);
      *(_QWORD *)(v157 + 16) = 0;
      if (!v158)
        goto LABEL_211;
      v159 = v158 + 2;
      do
      {
        v160 = __ldaxr(v159);
        v161 = --v160 == 0;
      }
      while (__stlxr(v160, v159));
    }
    else
    {
      v162 = *v205;
      if (*v205)
        v163 = *(_DWORD *)(v162 - 8);
      else
        v163 = 0;
      v164 = (~(v153 << 32) + v153) ^ ((unint64_t)(~(v153 << 32) + v153) >> 22);
      v165 = 9 * ((v164 + ~(v164 << 13)) ^ ((v164 + ~(v164 << 13)) >> 8));
      v166 = (v165 ^ (v165 >> 15)) + ~((v165 ^ (v165 >> 15)) << 27);
      v167 = v163 & ((0xD7862706ELL
                    * (unint64_t)(95187966 * v154 + 277951225 * ((v166 >> 31) ^ v166))) >> 4);
      v168 = 1;
      do
      {
        v169 = v167;
        v170 = v162 + 24 * v167;
        v167 = (v167 + v168++) & v163;
        if (*(_QWORD *)v170)
          v171 = 0;
        else
          v171 = *(_DWORD *)(v170 + 8) == 0;
      }
      while (!v171);
      v172 = v162 + 24 * v169;
      v175 = *(unsigned int **)(v172 + 16);
      v174 = (_QWORD *)(v172 + 16);
      v173 = v175;
      *v174 = 0;
      if (v175)
      {
        v176 = v173 + 2;
        do
        {
          v177 = __ldaxr(v176);
          v178 = v177 - 1;
        }
        while (__stlxr(v178, v176));
        if (!v178)
        {
          atomic_store(1u, v173 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v173 + 8))(v173);
        }
      }
      *(_OWORD *)v170 = *(_OWORD *)v152;
      v179 = v120 + 24 * v151;
      v180 = *(_QWORD *)(v179 + 16);
      *(_QWORD *)(v179 + 16) = 0;
      *v174 = v180;
      v158 = *(unsigned int **)(v179 + 16);
      *(_QWORD *)(v179 + 16) = 0;
      if (!v158)
        goto LABEL_211;
      v181 = v158 + 2;
      do
      {
        v182 = __ldaxr(v181);
        v161 = --v182 == 0;
      }
      while (__stlxr(v182, v181));
    }
    if (v161)
    {
      atomic_store(1u, v158 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v158 + 8))(v158);
    }
    goto LABEL_211;
  }
  v94 = &v90[8 * v91];
LABEL_213:
  v183 = &v90[8 * v91];
  if (v94 != v183)
  {
    memmove(v92, v94, v183 - v94);
    LODWORD(v91) = *((_DWORD *)this + 41);
  }
  *((_DWORD *)this + 41) = v91 - v93;
  v184 = __ldxr(v88);
  if (v184 != 1)
  {
    __clrex();
    goto LABEL_219;
  }
  if (__stlxr(0, v88))
LABEL_219:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v88, 0, v81, v82, v83, v84, v85, v86);
  v185 = *((_DWORD *)v62 + 229) - 1;
  *((_DWORD *)v62 + 229) = v185;
  if (*((unsigned __int8 *)v62 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v186 = v185 == 0;
  else
    v186 = 0;
  if (v186)
  {
    *((_BYTE *)v62 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v62 + 192, 0);
  }
  if (HIDWORD(v206))
  {
    v189 = (unsigned int **)v206;
    v190 = v206 + 8 * HIDWORD(v206);
    do
    {
      v191 = *v189;
      *v189 = 0;
      if (v191)
      {
        v192 = v191 + 2;
        do
        {
          v193 = __ldaxr(v192);
          v194 = v193 - 1;
        }
        while (__stlxr(v194, v192));
        if (!v194)
        {
          atomic_store(1u, v191 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v191 + 8))(v191);
        }
      }
      ++v189;
    }
    while (v189 != (unsigned int **)v190);
  }
  v187 = v206;
  if (v87 != (_BYTE *)v206 && (_QWORD)v206 != 0)
  {
    *(_QWORD *)&v206 = 0;
    DWORD2(v206) = 0;
    WTF::fastFree(v187, v94, v81, v82, v83, v84, v85, v86);
  }
}

void JSC::JITWorklist::removeDeadPlans(JSC::JITWorklist *this, JSC::VM *a2)
{
  unsigned __int8 *v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  JSC::VM **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned __int8 *v76;
  unsigned __int8 v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  JSC::VM *v84;
  unsigned __int8 *v85;
  __int128 v86;
  uint64_t v87[2];
  uint64_t v88;

  v4 = (unsigned __int8 *)(*((_QWORD *)this + 38) + 4);
  if (__ldaxr(v4))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v4);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v88 = 0;
  v6 = (_QWORD *)*((_QWORD *)this + 18);
  v7 = WTF::HashMap<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>,WTF::HashTraits<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>,WTF::HashTableTraits>::begin(v6);
  v15 = v7;
  v16 = v8;
  if (v6)
    v17 = &v6[3 * *((unsigned int *)v6 - 1)];
  else
    v17 = 0;
  v85 = v4;
  if (v17 == v7)
    goto LABEL_24;
  do
  {
    v18 = (JSC::VM **)v15[2];
    if (v18[4] == a2)
    {
      if ((*((unsigned int (**)(_QWORD))*v18 + 7))(v15[2]))
      {
        (*((void (**)(JSC::VM **))*v18 + 4))(v18);
      }
      else
      {
        if (*((_DWORD *)v18 + 3) == 3)
        {
LABEL_134:
          __break(0xC471u);
          JUMPOUT(0x198805A50);
        }
        v87[0] = JSC::JITPlan::key((JSC::JITPlan *)v18);
        v87[1] = v19;
        WTF::HashTable<JSC::JITCompilationKey,JSC::JITCompilationKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>>::add(&v86, &v88, v87, v20, v21, v22, v23, v24);
      }
    }
    while (1)
    {
      v15 += 3;
      if (v15 == v16)
        break;
      if (*v15)
        goto LABEL_10;
    }
    v15 = v16;
LABEL_10:
    ;
  }
  while (v15 != v17);
  if (v88 && *(_DWORD *)(v88 - 12))
  {
    v25 = *(unsigned int *)(v88 - 4);
    if ((_DWORD)v25)
    {
      v26 = 16 * v25;
      v27 = v88;
      while (!*(_QWORD *)v27)
      {
        v27 += 16;
        v26 -= 16;
        if (!v26)
          goto LABEL_38;
      }
    }
    else
    {
      v27 = v88;
    }
    v29 = v88 + 16 * v25;
    if (v29 != v27)
    {
      v9 = *(_QWORD *)v27;
LABEL_30:
      WTF::HashMap<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>,WTF::HashTraits<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>,WTF::HashTableTraits>::take(&v86, (uint64_t *)this + 18, v9, *(unsigned int *)(v27 + 8), v11, v12, v13, v14);
      v30 = (unsigned int *)v86;
      v31 = (unsigned int *)(v86 + 8);
      (*(void (**)(_QWORD))(*(_QWORD *)v86 + 48))(v86);
      *(_QWORD *)&v86 = 0;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v30 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
      }
      while (1)
      {
        v27 += 16;
        if (v27 == v29)
          break;
        v9 = *(_QWORD *)v27;
        if (*(_QWORD *)v27)
        {
          v28 = 0;
          if (v27 != v29)
            goto LABEL_30;
          goto LABEL_39;
        }
      }
    }
LABEL_38:
    v28 = 0;
  }
  else
  {
LABEL_24:
    v28 = 1;
  }
LABEL_39:
  v83 = v28;
  v84 = a2;
  v34 = (char *)this + 48;
  v35 = (char *)this + 144;
  do
  {
    v36 = *(_QWORD *)v34;
    if (*(_QWORD *)v34 != *((_QWORD *)v34 + 1))
    {
      v40 = 0;
      v39 = 0;
      v38 = 0;
      v37 = 0;
      while (1)
      {
        v42 = *((_QWORD *)v34 + 2);
        v43 = *(unsigned int **)(v42 + 8 * v36);
        *(_QWORD *)(v42 + 8 * v36) = 0;
        v44 = *((_QWORD *)v34 + 2);
        v45 = *(unsigned int **)(v44 + 8 * v36);
        *(_QWORD *)(v44 + 8 * v36) = 0;
        if (v45)
        {
          v46 = v45 + 2;
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            atomic_store(1u, v45 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 8))(v45);
          }
        }
        if (*(_QWORD *)v34 == *((unsigned int *)v34 + 6) - 1)
          v49 = 0;
        else
          v49 = *(_QWORD *)v34 + 1;
        *(_QWORD *)v34 = v49;
        if (v43[3] == 3)
          goto LABEL_63;
        if (v37)
        {
          v50 = v40;
          if (v38 + 1 == v37)
            goto LABEL_73;
        }
        else if (v38)
        {
          if (v38 == v40 - 1)
          {
            v50 = v40;
LABEL_73:
            v56 = v50 + (v50 >> 2);
            if (v56 <= 0xF)
              v56 = 15;
            if (v56 >= 0x1FFFFFFF)
            {
              __break(0xC471u);
              JUMPOUT(0x198805AA0);
            }
            v40 = v56 + 1;
            v57 = (char *)WTF::fastMalloc((WTF *)(8 * (v56 + 1)));
            v58 = v57;
            if (v37 > v38)
            {
              memcpy(v57, v39, 8 * v38);
              memcpy(&v58[8 * v40 + 8 * (v37 - v50)], &v39[8 * v37], 8 * v50 - 8 * v37);
              v37 = v40 + v37 - v50;
              v35 = (char *)this + 144;
            }
            else
            {
              memcpy(&v57[8 * v37], &v39[8 * v37], 8 * v38 - 8 * v37);
            }
            v40 = v40;
            if (v39)
            {
              if (v58 == v39)
                v59 = 0;
              else
                v59 = v58;
              if (v58 == v39)
                v40 = 0;
              WTF::fastFree((unint64_t)v39, v8, v9, v10, v11, v12, v13, v14);
              v39 = v59;
              v35 = (char *)this + 144;
            }
            else
            {
              v39 = v58;
            }
            goto LABEL_58;
          }
          v37 = 0;
        }
        else
        {
          v50 = 0;
          if (!v40)
            goto LABEL_73;
          v37 = 0;
        }
LABEL_58:
        v51 = v43 + 2;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 + 1, v51));
        *(_QWORD *)&v39[8 * v38] = v43;
        if (v38 == v40 - 1)
          v38 = 0;
        else
          ++v38;
LABEL_63:
        v53 = v43 + 2;
        do
        {
          v54 = __ldaxr(v53);
          v55 = v54 - 1;
        }
        while (__stlxr(v55, v53));
        if (!v55)
        {
          atomic_store(1u, v43 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 8))(v43);
        }
        v36 = *(_QWORD *)v34;
        if (*(_QWORD *)v34 == *((_QWORD *)v34 + 1))
          goto LABEL_42;
      }
    }
    v37 = 0;
    v38 = 0;
    v39 = 0;
    LODWORD(v40) = 0;
LABEL_42:
    *(_QWORD *)v34 = v37;
    *((_QWORD *)v34 + 1) = v38;
    v41 = *((_QWORD *)v34 + 2);
    *((_QWORD *)v34 + 2) = v39;
    *((_DWORD *)v34 + 6) = v40;
    if (v41)
      WTF::fastFree(v41, v8, v9, v10, v11, v12, v13, v14);
    v34 += 32;
  }
  while (v34 != v35);
  LODWORD(v60) = *((_DWORD *)this + 41);
  if ((_DWORD)v60)
  {
    v61 = 0;
    while (1)
    {
      v62 = *((_QWORD *)this + 19);
      v63 = *(unsigned int **)(v62 + 8 * v61);
      if (v63[3] == 3)
        break;
LABEL_107:
      if (v60 <= ++v61)
        goto LABEL_108;
    }
    v64 = *(_QWORD *)(v62 + 8 * v60 - 8);
    if (v64)
    {
      v65 = (unsigned int *)(v64 + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 + 1, v65));
      v63 = *(unsigned int **)(v62 + 8 * v61);
      *(_QWORD *)(v62 + 8 * v61) = v64;
      if (v63)
        goto LABEL_96;
    }
    else
    {
      *(_QWORD *)(v62 + 8 * v61) = 0;
LABEL_96:
      v67 = v63 + 2;
      do
      {
        v68 = __ldaxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (!v69)
      {
        atomic_store(1u, v63 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v63 + 8))(v63);
      }
    }
    v70 = *((unsigned int *)this + 41);
    if (!(_DWORD)v70)
      goto LABEL_134;
    v60 = v70 - 1;
    v71 = *((_QWORD *)this + 19);
    v72 = *(unsigned int **)(v71 + 8 * v60);
    *(_QWORD *)(v71 + 8 * v60) = 0;
    if (v72)
    {
      v73 = v72 + 2;
      do
      {
        v74 = __ldaxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (!v75)
      {
        atomic_store(1u, v72 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 8))(v72);
      }
    }
    --v61;
    *((_DWORD *)this + 41) = v60;
    goto LABEL_107;
  }
LABEL_108:
  if ((v83 & 1) == 0)
  {
    v76 = (unsigned __int8 *)this + 320;
    v77 = atomic_load((unsigned __int8 *)this + 320);
    if ((v77 & 1) != 0)
    {
      atomic_store(0, v76);
      WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v76, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  if (v88)
    WTF::fastFree(v88 - 16, v8, v9, v10, v11, v12, v13, v14);
  v78 = __ldxr(v85);
  if (v78 != 1)
  {
    __clrex();
    goto LABEL_117;
  }
  if (__stlxr(0, v85))
LABEL_117:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v85, 0, v9, v10, v11, v12, v13, v14);
  v79 = *((unsigned int *)this + 11);
  if ((_DWORD)v79)
  {
    v80 = *((_QWORD *)this + 4);
    v81 = 8 * v79;
    do
    {
      v82 = *(_QWORD *)(*(_QWORD *)v80 + 64);
      if (v82 && *(JSC::VM **)v82 == v84)
      {
        if (!*(_BYTE *)(v82 + 32))
        {
          __break(0xC471u);
          JUMPOUT(0x198805A90);
        }
        if (!**(_BYTE **)(v82 + 40)
          && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v82 + 8) + 56))(*(_QWORD *)(v82 + 8)) & 1) == 0)
        {
          JSC::Safepoint::cancel(v82);
        }
      }
      v80 += 8;
      v81 -= 8;
    }
    while (v81);
  }
}

uint64_t JSC::JITWorklistThread::JITWorklistThread(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v27;
  WTF *v28;

  v5 = *(unsigned int **)(a3 + 304);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v28 = (WTF *)v5;
  v7 = *(unsigned int **)(a3 + 312);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v27 = v7;
  WTF::AutomaticThread::AutomaticThread(a1, 10.0, a2, (unsigned int **)&v28, (uint64_t *)&v27, 2);
  WTF::Ref<WTF::AutomaticThreadCondition,WTF::RawPtrTraits<WTF::AutomaticThreadCondition>,WTF::DefaultRefDerefTraits<WTF::AutomaticThreadCondition>>::~Ref((unint64_t *)&v27, v9, v10, v11, v12, v13, v14, v15);
  v23 = (unsigned int *)v28;
  v28 = 0;
  if (v23)
  {
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
    }
  }
  *(_QWORD *)a1 = off_1E3596378;
  *(_WORD *)(a1 + 46) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = a3;
  return a1;
}

const char *JSC::JITWorklistThread::name(JSC::JITWorklistThread *this)
{
  return "JIT Worklist Helper Thread";
}

uint64_t JSC::JITWorklistThread::poll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t result;
  _DWORD *v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(v2 + 48);
  if (v3 == *(_QWORD *)(v2 + 56) || *(_DWORD *)(v2 + 4) >= *(_DWORD *)(v2 + 16))
  {
    v3 = *(_QWORD *)(v2 + 80);
    if (v3 == *(_QWORD *)(v2 + 88) || *(_DWORD *)(v2 + 8) >= *(_DWORD *)(v2 + 20))
    {
      v3 = *(_QWORD *)(v2 + 112);
      if (v3 == *(_QWORD *)(v2 + 120))
        return 2;
      v4 = 2;
      if (*(_DWORD *)(v2 + 12) >= *(_DWORD *)(v2 + 24))
        return v4;
    }
    else
    {
      v4 = 1;
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = v2 + 48 + 32 * v4;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(v6 + 8 * v3);
  *(_QWORD *)(v6 + 8 * v3) = 0;
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(unsigned int **)(v8 + 8 * v3);
  *(_QWORD *)(v8 + 8 * v3) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  if (*(_QWORD *)v5 == *(unsigned int *)(v5 + 24) - 1)
    v13 = 0;
  else
    v13 = *(_QWORD *)v5 + 1;
  *(_QWORD *)v5 = v13;
  v14 = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v14 + 2);
      v14 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
    }
    v7 = *(_QWORD *)(a1 + 56);
  }
  if (!v7)
  {
    if (BYTE5(qword_1ECF4C332))
    {
      v20 = *(_DWORD **)(a1 + 48);
      v21 = WTF::dataFile((WTF *)v14);
      JSC::JITWorklist::dump(v20, v21);
      WTF::dataLog<char [16]>(": Thread shutting down\n");
    }
    return 1;
  }
  if (!*(_DWORD *)(v7 + 12))
  {
    v18 = *(_DWORD **)(a1 + 48);
    ++*v18;
    ++v18[v4 + 1];
    return 0;
  }
  result = 95;
  __break(0xC471u);
  return result;
}

uint64_t JSC::JITWorklistThread::work(JSC::JITWorklistThread *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JITPlan **v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v14;
  JSC::JITPlan *v16;
  int v17;
  uint64_t v18;
  _DWORD *v20;
  WTF *v21;
  const void *v22;
  JSC::JITPlan *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  unsigned __int8 *v31;
  JSC::JITPlan *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  _DWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v9 = (JSC::JITPlan **)((char *)this + 56);
  v10 = *(_DWORD *)(*((_QWORD *)this + 7) + 16);
  if ((v10 - 2) >= 2)
  {
    if (v10 == 1)
    {
      v11 = 0;
    }
    else
    {
      if ((v10 - 4) >= 2)
      {
        if (!v10)
        {
          __break(0xC471u);
          JUMPOUT(0x19880618CLL);
        }
LABEL_75:
        __break(0xC471u);
        JUMPOUT(0x198806070);
      }
      v11 = 2;
    }
  }
  else
  {
    v11 = 1;
  }
  if (!**((_DWORD **)this + 6))
    goto LABEL_75;
  v12 = (unsigned __int8 *)this + 46;
  if (__ldaxr((unsigned __int8 *)this + 46))
  {
    __clrex();
LABEL_6:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 46);
    goto LABEL_7;
  }
  if (__stxr(1u, v12))
    goto LABEL_6;
LABEL_7:
  v14 = (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 6) + 304) + 4);
  if (__ldaxr(v14))
  {
    __clrex();
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v14);
    goto LABEL_10;
  }
  if (__stxr(1u, v14))
    goto LABEL_9;
LABEL_10:
  v16 = *v9;
  if (*((_DWORD *)*v9 + 3) == 3)
    goto LABEL_32;
  *((_BYTE *)this + 47) = 1;
  *((_DWORD *)v16 + 3) = 1;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v14, 0, a3, a4, a5, a6, a7, a8);
  if (BYTE5(qword_1ECF4C332))
  {
    v39 = *((_QWORD *)this + 6);
    v46 = JSC::JITPlan::key(*((JSC::JITPlan **)this + 7));
    v47 = v40;
    WTF::dataLog<JSC::JITWorklist,char [13],JSC::JITCompilationKey,char [16],char [2]>(v39, (uint64_t)&v46);
  }
  if (*(_BYTE *)(*((_QWORD *)*v9 + 4) + 1100))
  {
    WTF::dataLog<char [16]>("Heap is stopped but here we are! (1)\n");
    __break(0xC471u);
    JUMPOUT(0x198806108);
  }
  JSC::JITPlan::compileInThread(*v9, this);
  v18 = *((_QWORD *)this + 7);
  if (*(_DWORD *)(v18 + 12) != 3 && *(_BYTE *)(*(_QWORD *)(v18 + 32) + 1100))
  {
    WTF::dataLog<char [16]>("Heap is stopped but here we are! (2)\n");
    __break(0xC471u);
    JUMPOUT(0x198806134);
  }
  v14 = (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 6) + 304) + 4);
  if (__ldaxr(v14))
  {
    __clrex();
LABEL_23:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v14);
    goto LABEL_24;
  }
  if (__stxr(1u, v14))
    goto LABEL_23;
LABEL_24:
  *((_BYTE *)this + 47) = 0;
  v20 = (_DWORD *)*((_QWORD *)this + 7);
  if (v20[3] != 3)
  {
    v21 = (WTF *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v20 + 40))(v20);
    if (BYTE5(qword_1ECF4C332))
    {
      v41 = v11;
      v42 = (_DWORD *)*((_QWORD *)this + 6);
      v43 = WTF::dataFile(v21);
      v44 = v42;
      v11 = v41;
      JSC::JITWorklist::dump(v44, v43);
      v46 = JSC::JITPlan::key(*((JSC::JITPlan **)this + 7));
      v47 = v45;
      WTF::dataLog<char [12],JSC::JITCompilationKey,char [17]>((uint64_t)&v46);
    }
    v23 = *v9;
    if (*(_BYTE *)(*((_QWORD *)*v9 + 4) + 1100))
    {
      __break(0xC471u);
      JUMPOUT(0x1988060ACLL);
    }
    v24 = *((_QWORD *)this + 6);
    v25 = *(unsigned int *)(v24 + 164);
    if ((_DWORD)v25 == *(_DWORD *)(v24 + 160))
    {
      WTF::Vector<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>(v24 + 152, (unint64_t)v9);
      v24 = *((_QWORD *)this + 6);
    }
    else
    {
      v26 = *(_QWORD *)(v24 + 152);
      *v9 = 0;
      *(_QWORD *)(v26 + 8 * v25) = v23;
      *(_DWORD *)(v24 + 164) = v25 + 1;
    }
    v27 = (unsigned __int8 *)(v24 + 320);
    v28 = atomic_load((unsigned __int8 *)(v24 + 320));
    if ((v28 & 1) != 0)
    {
      atomic_store(0, v27);
      WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v27, v22, a3, a4, a5, a6, a7, a8);
    }
  }
LABEL_32:
  v29 = __ldxr(v14);
  if (v29 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, v14))
LABEL_36:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v14, 0, a3, a4, a5, a6, a7, a8);
  v30 = __ldxr(v12);
  if (v30 != 1)
  {
    __clrex();
    goto LABEL_41;
  }
  if (__stlxr(0, v12))
LABEL_41:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 46, 0, a3, a4, a5, a6, a7, a8);
  v31 = (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 6) + 304) + 4);
  if (__ldaxr(v31))
  {
    __clrex();
  }
  else if (!__stxr(1u, v31))
  {
    goto LABEL_45;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v31);
LABEL_45:
  v33 = *v9;
  *v9 = 0;
  if (v33)
  {
    v34 = (unsigned int *)((char *)v33 + 8);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, (unsigned int *)v33 + 2);
      (*(void (**)(JSC::JITPlan *))(*(_QWORD *)v33 + 8))(v33);
    }
  }
  v37 = (_DWORD *)*((_QWORD *)this + 6);
  --*v37;
  --v37[v11 + 1];
  LODWORD(v37) = __ldxr(v31);
  if ((_DWORD)v37 == 1)
  {
    if (!__stlxr(0, v31))
      return 0;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v31, 0, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t WTF::dataLog<char [12],JSC::JITCompilationKey,char [17]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  WTF::PrintStream *v7;
  char v8;
  const void **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = (const void **)&v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", ": Compiled ");
  if (*(_QWORD *)a1 || *(_DWORD *)(a1 + 8))
  {
    v10 = *(char **)a1;
    v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printImpl<char [13],WTF::RawPointer,char [7],JSC::JITCompilationMode,char [2]>(v5, "(Compile of ", (const void **)&v10, " with ", (int *)(a1 + 8), ")");
  }
  else
  {
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v7, "%s", "<empty>");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", " asynchronously\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::JITWorklistThread::threadDidStart(uint64_t this)
{
  if (BYTE5(qword_1ECF4C332))
    return WTF::dataLog<JSC::JITWorklist,char [17],char [2]>(*(_QWORD *)(this + 48));
  return this;
}

unsigned int *JSC::JITWorklistThread::threadIsStopping(uint64_t a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (BYTE5(qword_1ECF4C332))
    WTF::dataLog<JSC::JITWorklist,char [19],char [2]>(*(_QWORD *)(a1 + 48));
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::PCToCodeOriginMapBuilder::PCToCodeOriginMapBuilder(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 8) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 12) = v2;
  *(_BYTE *)(result + 16) = *((_BYTE *)a2 + 16);
  return result;
}

uint64_t JSC::PCToCodeOriginMapBuilder::PCToCodeOriginMapBuilder(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unsigned int *v11;
  uint64_t v13;
  int v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(unsigned __int8 *)(a3 + 93123);
  *(_BYTE *)(a1 + 16) = v5;
  if (v5)
  {
    v6 = a4[3];
    if ((_DWORD)v6)
    {
      v7 = 16 * v6;
      v8 = (unint64_t **)(*(_QWORD *)a4 + 8);
      do
      {
        v9 = *v8;
        v10 = *((_DWORD *)v8 - 2);
        if (*v8)
        {
          if (*(_BYTE *)(a1 + 16))
          {
            LODWORD(v13) = *((_DWORD *)v8 - 2);
            v11 = (unsigned int *)&v13;
LABEL_9:
            JSC::PCToCodeOriginMapBuilder::appendItemSlow(a1, v11, v9);
          }
        }
        else
        {
          v13 = 0;
          if (*(_BYTE *)(a1 + 16))
          {
            v14 = v10;
            v11 = (unsigned int *)&v14;
            v9 = (unint64_t *)&v13;
            goto LABEL_9;
          }
        }
        v8 += 2;
        v7 -= 16;
      }
      while (v7);
    }
  }
  return a1;
}

uint64_t JSC::PCToCodeOriginMapBuilder::PCToCodeOriginMapBuilder(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v19;
  unsigned int v20;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  v9 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v9)
  {
    v10 = 16 * v9;
    v11 = (_QWORD *)(*(_QWORD *)a3 + 8);
    do
    {
      v12 = *v11;
      v13 = *((_DWORD *)v11 - 2);
      if (*v11)
      {
        v14 = (4 * v12);
        if (((v12 >> 26) & 0xF) != 0)
        {
          v16 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v16 = 0;
          *(_DWORD *)(v16 + 8) = v14;
          v15 = 1;
        }
        else
        {
          v15 = 0;
          v16 = v14 << 36;
        }
        v17 = v16 | v15;
        v19 = v16 | v15;
        if (*(_BYTE *)(a1 + 16))
        {
          v20 = v13;
          JSC::PCToCodeOriginMapBuilder::appendItemSlow(a1, &v20, &v19);
        }
        if ((v17 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v19 = 0;
        if (*(_BYTE *)(a1 + 16))
        {
          v20 = v13;
          JSC::PCToCodeOriginMapBuilder::appendItemSlow(a1, &v20, &v19);
        }
      }
      v11 += 2;
      v10 -= 16;
    }
    while (v10);
  }
  return a1;
}

void JSC::PCToCodeOriginMapBuilder::appendItemSlow(uint64_t a1, unsigned int *a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int32x2_t *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _DWORD v37[2];
  unint64_t v38;

  if (!*(_BYTE *)(a1 + 16))
    return;
  v4 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v4)
  {
    v7 = *a3;
    v9 = *a3 & 1;
    goto LABEL_13;
  }
  v5 = *(_QWORD *)a1 + 16 * (v4 - 1);
  if (*(_DWORD *)(v5 + 4) == *a2)
    return;
  *(_DWORD *)(v5 + 4) = *a2;
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *a3;
  if (v6 == *a3)
    return;
  if ((v6 & 2) == 0)
  {
    if ((v6 & 1) == 0)
    {
      v8 = v6 >> 36;
      if ((v7 & 2) == 0)
        goto LABEL_8;
      goto LABEL_34;
    }
    LODWORD(v8) = *(_DWORD *)((v6 & 0xFFFFFFFF8) + 8);
    if ((v7 & 2) != 0)
    {
LABEL_34:
      if ((_DWORD)v8 != -1)
        return;
      goto LABEL_35;
    }
LABEL_8:
    v9 = *a3 & 1;
    if ((v7 & 1) != 0)
      LODWORD(v10) = *(_DWORD *)((v7 & 0xFFFFFFFF8) + 8);
    else
      v10 = v7 >> 36;
    if ((_DWORD)v8 == (_DWORD)v10)
    {
      v11 = 1;
      goto LABEL_36;
    }
LABEL_13:
    v12 = *a2;
    v37[0] = v12;
    v37[1] = v12;
    if (v9)
    {
      v27 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      if ((v7 & 2) != 0
        || ((v28 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v28 != 0x3FFFFFFF)
          ? (v29 = (_DWORD)v28 == -1)
          : (v29 = 1),
            v29))
      {
        v30 = 2;
      }
      else
      {
        v34 = v27;
        v35 = v28;
        v36 = v12;
        if (v28 >> 28)
        {
          v27 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v27 = v34;
          *(_DWORD *)(v27 + 8) = v35;
          LODWORD(v4) = *(_DWORD *)(a1 + 12);
          v30 = 1;
        }
        else
        {
          v30 = v27;
          v27 = v35 << 36;
        }
        v12 = v36;
      }
      v7 = v27 | v30;
    }
    v38 = v7;
    v13 = v4;
    if ((_DWORD)v4 == *(_DWORD *)(a1 + 8))
    {
      v14 = WTF::Vector<JSC::PCToCodeOriginMapBuilder::CodeRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v4 + 1, (unint64_t)v37);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1 + 16 * v22;
      *(_DWORD *)v23 = *(_DWORD *)v14;
      *(_DWORD *)(v23 + 4) = *(_DWORD *)(v14 + 4);
      v24 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v23 + 8) = v24;
      v25 = v38;
      *(_DWORD *)(a1 + 12) = v22 + 1;
      if ((v25 & 1) != 0 && (v25 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v25 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      v26 = (int32x2_t *)(*(_QWORD *)a1 + 16 * v4);
      *v26 = vdup_n_s32(v12);
      v26[1] = (int32x2_t)v7;
      *(_DWORD *)(a1 + 12) = v13 + 1;
    }
    return;
  }
  if ((v7 & 2) == 0)
  {
    LODWORD(v8) = -1;
    goto LABEL_8;
  }
LABEL_35:
  v11 = 0;
LABEL_36:
  v31 = (_QWORD *)(v6 & 0xFFFFFFFF8);
  if ((v6 & 1) != 0)
    v31 = (_QWORD *)*v31;
  v9 = *a3 & 1;
  v32 = (_QWORD *)(v7 & 0xFFFFFFFF8);
  if ((v7 & 1) != 0)
    v32 = (_QWORD *)*v32;
  v29 = v31 == v32;
  v33 = v11 ^ 1;
  if (v29)
    v33 = 1;
  if ((v33 & 1) == 0)
    goto LABEL_13;
}

uint64_t JSC::PCToCodeOriginMap::PCToCodeOriginMap(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t *v26;
  _QWORD *v27;
  int v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64x2_t v46;
  uint64x2_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v59;
  unint64_t v60;
  uint64x2_t v61;
  int64x2_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int64_t v70;
  unint64_t v71;
  uint64x2_t v72;
  int64x2_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint64x2_t v80;
  int64x2_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64x2_t v112;
  uint64x2_t v113;
  uint64x2_t v114;
  uint64x2_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v123;
  int v124;
  uint64_t v125;

  if (!*((_BYTE *)a2 + 16))
  {
    __break(0xC471u);
    JUMPOUT(0x198806F58);
  }
  v8 = (uint64_t)a2;
  v9 = a1;
  v10 = a2[3];
  if (!(_DWORD)v10)
  {
    *(_QWORD *)(a1 + 32) = -1;
    *(_QWORD *)(a1 + 40) = -1;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return v9;
  }
  v11 = *(_QWORD *)a2 + 16 * (v10 - 1);
  v12 = *(_DWORD *)(v11 + 4);
  if (*(_DWORD *)v11 == v12)
  {
    v13 = (_QWORD *)a3;
  }
  else
  {
    v123 = *(_DWORD *)(v11 + 4);
    v124 = *(_DWORD *)(v11 + 4);
    v14 = *(_QWORD *)(v11 + 8);
    if ((v14 & 1) != 0)
    {
      v104 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      if ((v14 & 2) != 0
        || ((v105 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v105 != 0x3FFFFFFF)
          ? (v106 = (_DWORD)v105 == -1)
          : (v106 = 1),
            v106))
      {
        v107 = 2;
      }
      else
      {
        v108 = a3;
        if (v105 >> 28)
        {
          v109 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v109 = v104;
          *(_DWORD *)(v109 + 8) = v105;
          v8 = (uint64_t)a2;
          v10 = a2[3];
          v107 = 1;
          v104 = v109;
          a3 = v108;
        }
        else
        {
          v107 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
          v104 = v105 << 36;
          v8 = (uint64_t)a2;
        }
      }
      v14 = v104 | v107;
    }
    v125 = v14;
    v13 = (_QWORD *)a3;
    if ((_DWORD)v10 == *(_DWORD *)(v8 + 8))
    {
      v15 = WTF::Vector<JSC::PCToCodeOriginMapBuilder::CodeRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v10 + 1, (unint64_t)&v123);
      v8 = (uint64_t)a2;
      v10 = a2[3];
      v16 = *(_QWORD *)a2 + 16 * v10;
      *(_DWORD *)v16 = *(_DWORD *)v15;
      *(_DWORD *)(v16 + 4) = *(_DWORD *)(v15 + 4);
      v17 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v16 + 8) = v17;
    }
    else
    {
      v18 = *(_QWORD *)v8 + 16 * v10;
      *(_DWORD *)v18 = v12;
      *(_DWORD *)(v18 + 4) = v124;
      v125 = 0;
      *(_QWORD *)(v18 + 8) = v14;
    }
    LODWORD(v10) = v10 + 1;
    *(_DWORD *)(v8 + 12) = v10;
    if ((v125 & 1) != 0 && (v125 & 0xFFFFFFFF8) != 0)
    {
      WTF::fastFree(v125 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      LODWORD(v10) = a2[3];
    }
    v10 = v10;
  }
  v120 = 9 * v10;
  v119 = WTF::fastMalloc((WTF *)(9 * v10));
  v118 = 18 * a2[3];
  v19 = WTF::fastMalloc((WTF *)v118);
  v21 = a2[3];
  if (!(_DWORD)v21)
  {
LABEL_116:
    __break(0xC471u);
    JUMPOUT(0x198806DA8);
  }
  v22 = a2;
  v23 = v19;
  v24 = *(_QWORD *)a2;
  v25 = **(_DWORD **)a2;
  v26 = (unint64_t *)a1;
  v27 = v13;
  if (v25 < 4)
    v28 = 0;
  else
    v28 = *(_DWORD *)((v25 & 0xFFFFFFFC) + v13[3] - 4);
  v30 = v119;
  v29 = (void *)v120;
  v31 = v118;
  v32 = (v25 - v28);
  v33 = v13[23];
  v34 = v32 + v33;
  if (v33 > v32 + v33 || (v35 = v33 + v13[1], v35 < v34))
  {
    __break(0xC471u);
    JUMPOUT(0x198806F18);
  }
  *(_QWORD *)(a1 + 32) = v34;
  v36 = *(_DWORD *)(v24 + 16 * v21 - 12);
  if (v36 < 4)
    v37 = 0;
  else
    v37 = *(_DWORD *)((v36 & 0xFFFFFFFC) + v13[3] - 4);
  v38 = (v36 - v37) + v33;
  if (v33 > v38 || v35 < v38)
  {
    __break(0xC471u);
    JUMPOUT(0x198806F38);
  }
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  *(_QWORD *)(a1 + 40) = v38 - 1;
  v46 = (uint64x2_t)xmmword_199157030;
  v47 = (uint64x2_t)xmmword_199157040;
  do
  {
    v48 = *(_QWORD *)v22;
    v49 = *(_DWORD *)(*(_QWORD *)v22 + v40);
    if (v49 < 4)
      v50 = 0;
    else
      v50 = *(_DWORD *)((v49 & 0xFFFFFFFC) + v27[3] - 4);
    v51 = (v49 - v50);
    v52 = v27[23];
    v53 = v51 + v52;
    if (v52 > v51 + v52)
      goto LABEL_116;
    v54 = v52 + v27[1];
    if (v54 < v53)
      goto LABEL_116;
    v55 = *(_DWORD *)(v48 + v40 + 4);
    if (v55 < 4)
      v56 = 0;
    else
      v56 = *(_DWORD *)((v55 & 0xFFFFFFFC) + v27[3] - 4);
    v57 = (v55 - v56) + v52;
    if (v52 > v57 || v54 < v57)
    {
      __break(0xC471u);
      JUMPOUT(0x198806DC8);
    }
    if (v44 >= v53)
    {
      __break(0xC471u);
      JUMPOUT(0x198806DE8);
    }
    v59 = v53 - v44;
    v60 = v43 + 1;
    if (v59 < 0x100)
    {
      v64 = v43++;
      if (v60 > (unint64_t)v29)
      {
        __break(0xC471u);
        JUMPOUT(0x198806EA8);
      }
    }
    else
    {
      if (v60 > (unint64_t)v29)
      {
        __break(0xC471u);
        JUMPOUT(0x198806E88);
      }
      *(_BYTE *)(v30 + v43) = 0;
      if (v43 + 9 > (unint64_t)v29)
      {
        __break(0xC471u);
        JUMPOUT(0x198806EC8);
      }
      *(_BYTE *)(v30 + v60) = v59;
      v61 = (uint64x2_t)vdupq_n_s64(v59);
      v62 = (int64x2_t)vshlq_u64(v61, v46);
      *(int32x2_t *)v61.i8 = vmovn_s64((int64x2_t)vshlq_u64(v61, v47));
      *(int32x2_t *)v62.i8 = vmovn_s64(v62);
      v62.i16[1] = v62.i16[2];
      v62.i16[2] = v61.i16[0];
      v62.i16[3] = v61.i16[2];
      v63 = v43 + v30;
      *(_DWORD *)(v63 + 2) = vmovn_s16((int16x8_t)v62).u32[0];
      *(_BYTE *)(v63 + 6) = BYTE5(v59);
      *(_BYTE *)(v63 + 7) = BYTE6(v59);
      v59 >>= 56;
      v64 = v43 + 8;
      v43 += 9;
    }
    *(_BYTE *)(v30 + v64) = v59;
    v65 = v48 + v40;
    v66 = *(_QWORD *)(v48 + v40 + 8);
    if ((v66 & 2) != 0)
    {
      LODWORD(v67) = -1;
    }
    else if ((v66 & 1) != 0)
    {
      LODWORD(v67) = *(_DWORD *)((v66 & 0xFFFFFFFF8) + 8);
    }
    else
    {
      v67 = v66 >> 36;
    }
    v68 = v67 >> 2;
    if ((v45 & 2) != 0)
    {
      v70 = v68 - 0x3FFFFFFF;
      if ((v45 & 1) == 0)
      {
        LODWORD(v69) = 0x3FFFFFFF;
        goto LABEL_48;
      }
      v86 = v45 & 0xFFFFFFFF8;
      LODWORD(v69) = 0x3FFFFFFF;
      if ((v45 & 0xFFFFFFFF8) != 0)
      {
LABEL_78:
        v87 = v27;
        v116 = v23;
        v112 = v47;
        v114 = v46;
        WTF::fastFree(v86, v29, v30, v23, v31, 0x3FFFFFFFLL, -1073741823, v20);
        v47 = v112;
        v46 = v114;
        v23 = v116;
        v31 = v118;
        v30 = v119;
        v29 = (void *)v120;
        v22 = a2;
        v26 = (unint64_t *)a1;
        v27 = v87;
        v66 = *(_QWORD *)(v65 + 8);
      }
    }
    else
    {
      if ((v45 & 1) == 0)
      {
        v69 = v45 >> 38;
        v70 = v68 - (v45 >> 38);
        goto LABEL_48;
      }
      v86 = v45 & 0xFFFFFFFF8;
      v69 = (unint64_t)*(unsigned int *)((v45 & 0xFFFFFFFF8) + 8) >> 2;
      v70 = v68 - v69;
      if ((v45 & 0xFFFFFFFF8) != 0)
        goto LABEL_78;
    }
LABEL_48:
    if ((v66 & 1) != 0)
    {
      v83 = *(_QWORD *)(v66 & 0xFFFFFFFF8);
      if ((v66 & 2) != 0
        || (v84 = *(unsigned int *)((v66 & 0xFFFFFFFF8) + 8), (_DWORD)v84 == 0x3FFFFFFF)
        || (_DWORD)v84 == -1)
      {
        v85 = 2;
      }
      else if (v84 >> 28)
      {
        v110 = *(_QWORD *)(v66 & 0xFFFFFFFF8);
        v111 = v27;
        v117 = v23;
        v113 = v47;
        v115 = v46;
        v83 = WTF::fastMalloc((WTF *)0x10);
        v47 = v113;
        v46 = v115;
        v23 = v117;
        v31 = v118;
        v30 = v119;
        v29 = (void *)v120;
        v22 = a2;
        v26 = (unint64_t *)a1;
        v27 = v111;
        *(_QWORD *)v83 = v110;
        *(_DWORD *)(v83 + 8) = v84;
        v85 = 1;
      }
      else
      {
        v85 = *(_QWORD *)(v66 & 0xFFFFFFFF8);
        v83 = v84 << 36;
      }
      v45 = v83 | v85;
    }
    else
    {
      v45 = v66;
    }
    if (v70 > 127 || v70 < -128 || (_DWORD)v68 == (_DWORD)v69)
    {
      if (v42 + 1 > v31)
      {
        __break(0xC471u);
        JUMPOUT(0x198806E28);
      }
      *(_BYTE *)(v23 + v42) = 0;
      v71 = v42 + 9;
      if (v42 + 9 > v31)
      {
        __break(0xC471u);
        JUMPOUT(0x198806E48);
      }
      *(_BYTE *)(v23 + v42 + 1) = v70;
      v72 = (uint64x2_t)vdupq_n_s64(v70);
      v73 = (int64x2_t)vshlq_u64(v72, v46);
      *(int32x2_t *)v72.i8 = vmovn_s64((int64x2_t)vshlq_u64(v72, v47));
      *(int32x2_t *)v73.i8 = vmovn_s64(v73);
      v73.i16[1] = v73.i16[2];
      v73.i16[2] = v72.i16[0];
      v73.i16[3] = v72.i16[2];
      v74 = v42 + v23;
      *(_DWORD *)(v74 + 2) = vmovn_s16((int16x8_t)v73).u32[0];
      *(_BYTE *)(v74 + 6) = BYTE5(v70);
      *(_BYTE *)(v74 + 7) = BYTE6(v70);
      v70 = HIBYTE(v70);
      v42 += 8;
    }
    else
    {
      v71 = v42 + 1;
      if (v42 + 1 > v31)
      {
        __break(0xC471u);
        JUMPOUT(0x198806EE8);
      }
    }
    *(_BYTE *)(v23 + v42) = v70;
    v75 = *(_QWORD *)(v65 + 8);
    v76 = (_QWORD *)(v75 & 0xFFFFFFFF8);
    if ((v75 & 1) != 0)
      v76 = (_QWORD *)*v76;
    v42 = v71 + 1;
    if (v71 + 1 > v31)
    {
      __break(0xC471u);
      JUMPOUT(0x198806E08);
    }
    *(_BYTE *)(v23 + v71) = v76 != 0;
    if (v76)
    {
      v77 = *(_QWORD *)(v65 + 8);
      v78 = (_QWORD *)(v77 & 0xFFFFFFFF8);
      if ((v77 & 1) != 0)
        v78 = (_QWORD *)*v78;
      v79 = v71 + 9;
      if (v71 + 9 > v31)
      {
        __break(0xC471u);
        JUMPOUT(0x198806E68);
      }
      *(_BYTE *)(v23 + v42) = (_BYTE)v78;
      v80 = (uint64x2_t)vdupq_n_s64((unint64_t)v78);
      v81 = (int64x2_t)vshlq_u64(v80, v46);
      *(int32x2_t *)v80.i8 = vmovn_s64((int64x2_t)vshlq_u64(v80, v47));
      *(int32x2_t *)v81.i8 = vmovn_s64(v81);
      v81.i16[1] = v81.i16[2];
      v81.i16[2] = v80.i16[0];
      v81.i16[3] = v80.i16[2];
      v82 = v71 + v23;
      *(_DWORD *)(v82 + 2) = vmovn_s16((int16x8_t)v81).u32[0];
      *(_BYTE *)(v82 + 6) = BYTE5(v78);
      *(_BYTE *)(v82 + 7) = BYTE6(v78);
      *(_BYTE *)(v82 + 8) = HIBYTE(v78);
      v42 = v79;
    }
    ++v41;
    v40 += 16;
    v44 = v53;
  }
  while (v41 < v22[3]);
  *v26 = v43;
  v88 = v23;
  *(_QWORD *)(a1 + 16) = WTF::fastRealloc(v30, v43, v30, v23, v31, 0x3FFFFFFFLL, -1073741823, v20);
  *(_QWORD *)(a1 + 8) = v42;
  v95 = WTF::fastRealloc(v88, v42, v89, v90, v91, v92, v93, v94);
  v9 = a1;
  *(_QWORD *)(a1 + 24) = v95;
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
  {
    WTF::fastFree(v45 & 0xFFFFFFFF8, v96, v97, v98, v99, v100, v101, v102);
    return a1;
  }
  return v9;
}

void JSC::PCToCodeOriginMap::findPC(JSC::PCToCodeOriginMap *this@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  _BYTE *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _BYTE *v40;

  v9 = a9;
  if (*((_QWORD *)this + 4) <= (unint64_t)a2 && *((_QWORD *)this + 5) >= (unint64_t)a2)
  {
    v10 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
    {
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x198807264);
    }
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v17 = *((_QWORD *)this + 2);
    v16 = *((_QWORD *)this + 3);
    v18 = *((_QWORD *)this + 1);
    v19 = 1;
    while (1)
    {
      v20 = *(unsigned __int8 *)(v17 + v14);
      if (*(_BYTE *)(v17 + v14))
      {
        v14 = v19;
      }
      else
      {
        if (v14 + 9 > v10)
        {
          __break(0xC471u);
          JUMPOUT(0x1988072E4);
        }
        v20 = *(unsigned __int8 *)(v17 + v19) | ((unint64_t)*(unsigned __int8 *)(v14 + v17 + 2) << 8) | ((unint64_t)*(unsigned __int8 *)(v14 + v17 + 3) << 16) | ((unint64_t)*(unsigned __int8 *)(v14 + v17 + 4) << 24) | ((unint64_t)*(unsigned __int8 *)(v14 + v17 + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(v14 + v17 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(v14 + v17 + 7) << 48) | ((unint64_t)*(unsigned __int8 *)(v14 + v17 + 8) << 56);
        v14 += 9;
      }
      if (v13 >> 28)
      {
        v37 = v10;
        v39 = v9;
        v29 = a2;
        v21 = WTF::fastMalloc((WTF *)0x10);
        v10 = v37;
        v9 = v39;
        a2 = v29;
        *(_QWORD *)v21 = v12;
        *(_DWORD *)(v21 + 8) = v13;
        v22 = 1;
      }
      else
      {
        v21 = v13 << 36;
        v22 = v12;
      }
      v23 = v15 + 1;
      if (v15 + 1 > v18)
      {
        __break(0xC471u);
        JUMPOUT(0x198807284);
      }
      v24 = *(char *)(v16 + v15);
      if (!*(_BYTE *)(v16 + v15))
      {
        if (v15 + 9 > v18)
        {
          __break(0xC471u);
          JUMPOUT(0x198807304);
        }
        v24 = *(unsigned __int8 *)(v16 + v23) | (*(unsigned __int8 *)(v15 + v16 + 2) << 8) | (*(unsigned __int8 *)(v15 + v16 + 3) << 16) | (*(unsigned __int8 *)(v15 + v16 + 4) << 24);
        v23 = v15 + 9;
      }
      v15 = v23 + 1;
      if (v23 + 1 > v18)
      {
        __break(0xC471u);
        JUMPOUT(0x1988072A4);
      }
      if (*(_BYTE *)(v16 + v23))
      {
        v25 = v23 + 9;
        if (v23 + 9 > v18)
        {
          __break(0xC471u);
          JUMPOUT(0x1988072C4);
        }
        v26 = (unsigned __int8 *)(v23 + v16);
        v12 = *(unsigned __int8 *)(v16 + v15) | ((unint64_t)v26[2] << 8) | ((unint64_t)v26[3] << 16) | ((unint64_t)v26[4] << 24) | ((unint64_t)v26[5] << 32) | ((unint64_t)v26[6] << 40) | ((unint64_t)v26[7] << 48) | ((unint64_t)v26[8] << 56);
        v15 = v25;
      }
      else
      {
        v12 = 0;
      }
      v27 = v20 + v11;
      v28 = v21 | v22;
      if (v11)
      {
        if (v11 <= (unint64_t)a2 && v27 - 1 >= (unint64_t)a2)
          break;
      }
      if ((v28 & 1) != 0 && (v28 & 0xFFFFFFFF8) != 0)
      {
        v38 = v10;
        v40 = v9;
        v30 = a2;
        WTF::fastFree(v28 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v10 = v38;
        v9 = v40;
        a2 = v30;
      }
      v13 = (v13 + 4 * v24);
      v19 = v14 + 1;
      v11 = v27;
      if (v14 + 1 > v10)
        goto LABEL_33;
    }
    if ((v28 & 1) != 0)
    {
      v31 = v9;
      v32 = v28 & 0xFFFFFFFF8;
      v33 = *(_QWORD *)(v28 & 0xFFFFFFFF8);
      if ((v28 & 2) != 0
        || (v34 = *(unsigned int *)((v28 & 0xFFFFFFFF8) + 8), (_DWORD)v34 == 0x3FFFFFFF)
        || (_DWORD)v34 == -1)
      {
        v35 = 2;
      }
      else if (v34 >> 28)
      {
        v36 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v36 = v33;
        *(_DWORD *)(v36 + 8) = v34;
        v35 = 1;
        v33 = v36;
      }
      else
      {
        v35 = *(_QWORD *)(v28 & 0xFFFFFFFF8);
        v33 = v34 << 36;
      }
      *(_QWORD *)v31 = v33 | v35;
      v31[8] = 1;
      if (v32)
        WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      *(_QWORD *)v9 = v28;
      v9[8] = 1;
    }
  }
  else
  {
    *a9 = 0;
    a9[8] = 0;
  }
}

void JSC::PolymorphicCallNode::unlinkOrUpgradeImpl(JSC::PolymorphicCallNode *this, JSC::VM *a2, JSC::CodeBlock *a3, JSC::CodeBlock *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  JSC::CallLinkInfoBase *v9;
  unsigned int *v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  JSC::CodeBlock *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  JSC::CallLinkInfoBase *v29;
  JSC::VM *v30;
  JSC::CodeBlock *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;

  v15 = (_QWORD *)*((_QWORD *)this + 1);
  if (v15)
  {
    v16 = *(_QWORD *)this;
    *v15 = *(_QWORD *)this;
    *(_QWORD *)(v16 + 8) = v15;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  if (!*((_BYTE *)this + 19))
  {
    v17 = *((unsigned __int8 *)this + 17);
    if (a4)
    {
      v18 = -(uint64_t)v17;
      v19 = *((unsigned __int8 *)this + 18);
      v20 = (char *)this + 24 * *((unsigned __int8 *)this + 18) + -24 * (int)v17;
      v21 = *((unsigned int *)v20 + 11);
      if (v21 <= v17 || *((_DWORD *)v20 + 12) <= v17)
      {
        __break(1u);
LABEL_21:
        atomic_store(1u, v10 + 2);
        (*(void (**)(unsigned int *, JSC::VM *, JSC::CodeBlock *))(*(_QWORD *)v10 + 32))(v10, a2, a3);
LABEL_15:
        *v13 = a4;
        *(_QWORD *)&v12[32 * v17 + 16] = v11;
        JSC::CodeBlock::linkIncomingCall((uint64_t)a4, 0, v9);
        return;
      }
      v9 = (JSC::CallLinkInfoBase *)&v20[24 * *((unsigned __int8 *)this + 17) + -24 * v21];
      if (!*((_QWORD *)v9 + 1))
      {
        v12 = v20 + 72;
        v22 = (uint64_t)&v20[32 * v17 + 72];
        v23 = *(JSC::CodeBlock **)(v22 + 24);
        v13 = (_QWORD *)(v22 + 24);
        if (v23 == a3)
        {
          v10 = (unsigned int *)*((_QWORD *)a4 + 15);
          if (v10)
          {
            v24 = v10 + 2;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 + 1, v24));
          }
          v26 = v10 + 2;
          v11 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v10 + 40))(v10, v12[32 * v17 + 13]);
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (v28)
            goto LABEL_15;
          goto LABEL_21;
        }
      }
    }
    else
    {
      v19 = *((unsigned __int8 *)this + 18);
      v18 = -(uint64_t)v17;
    }
    *((_BYTE *)this + 19) = 1;
    v29 = (JSC::CallLinkInfoBase *)*((_QWORD *)this + 3 * (int)v18 + 3 * v19 + 7);
    if (HIBYTE(word_1ECF4C286))
    {
      v30 = a2;
      v31 = a3;
      JSC::CallLinkInfo::codeOrigin((uint64_t)v29, (uint64_t *)&v36);
      if ((v36 & 2) != 0)
      {
        LODWORD(v32) = -1;
      }
      else if ((v36 & 1) != 0)
      {
        LODWORD(v32) = *(_DWORD *)((v36 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v32 = v36 >> 36;
      }
      v37 = v32;
      WTF::dataLog<char [31],JSC::BytecodeIndex,char [2]>((JSC::BytecodeIndex *)&v37);
      if ((v36 & 1) != 0 && (v36 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v36 & 0xFFFFFFFF8, v33, v34, v35, a5, a6, a7, a8);
      a3 = v31;
      a2 = v30;
    }
    JSC::CallLinkInfoBase::unlinkOrUpgrade(v29, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

void JSC::PolymorphicCallStubRoutine::PolymorphicCallStubRoutine(uint64_t a1, unsigned int a2, unsigned int a3, _QWORD *a4, uint64_t a5, JSC::JSCell *a6, JSC::CallFrame *this, uint64_t a8, uint64_t a9, char a10, char a11)
{
  JSC::CallFrame *v11;
  char v13;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  unint64_t v32;
  JSC::CallLinkInfoBase *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  __int128 v52;
  unint64_t v53;
  JSC::CallLinkInfoBase *v54;
  uint64_t v55;
  uint64_t v56;
  JSC::Heap *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v11 = this;
  v13 = a2;
  *(_QWORD *)a1 = *a4;
  v15 = (unsigned int *)a4[1];
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  *(_QWORD *)(a1 + 8) = v15;
  *(_QWORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 24) = 2;
  *(_QWORD *)(a1 + 32) = a6;
  *(_BYTE *)(a1 + 40) &= 0xC0u;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  if (a2)
  {
    v17 = a1 - 24 * a2;
    do
    {
      *(_QWORD *)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0;
      *(_DWORD *)(v17 + 16) = 16777217;
      v17 += 24;
    }
    while (v17 != a1);
    a3 = *(_DWORD *)(a1 + 48);
  }
  if (a3)
  {
    v18 = a1 + 72;
    do
    {
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      *(_BYTE *)(v18 + 13) = 1;
      *(_QWORD *)(v18 + 16) = 0;
      *(_QWORD *)(v18 + 24) = 0;
      v18 += 32;
    }
    while (v18 != a1 + 72 + 32 * a3);
  }
  *(_QWORD *)(a1 + 56) = a8;
  if (a11)
    v19 = 2;
  else
    v19 = 0;
  *(_BYTE *)(a1 + 64) = v19 | a10 | *(_BYTE *)(a1 + 64) & 0xFC;
  if (*(_DWORD *)(a9 + 12))
  {
    v57 = (JSC::Heap *)(a5 + 192);
    if (this)
    {
      v20 = 0;
      v21 = 0;
      v22 = a1;
      while (1)
      {
        if (v21 >= *(unsigned int *)(a1 + 48))
          goto LABEL_68;
        v23 = a1 + v20;
        v24 = (uint64_t *)(a1 + v20 + 72);
        v25 = (__int128 *)(*(_QWORD *)a9 + v20);
        v26 = *v25;
        *(_OWORD *)(v23 + 88) = v25[1];
        *(_OWORD *)(v23 + 72) = v26;
        if ((*((_QWORD *)v11 + 3) & 0xFFFE000000000007) != 3)
        {
          v27 = *((_QWORD *)v11 + 2);
          if (v27 && (v28 = *(_QWORD *)(v27 + 120)) != 0)
          {
            v29 = *(_BYTE *)(v28 + 12) & 0xFE;
            if (BYTE1(dword_1ECF4C28A))
              v30 = v29 == 4;
            else
              v30 = 0;
            if (v30 || HIBYTE(word_1ECF4C286) != 0)
            {
LABEL_36:
              JSC::CallFrame::codeOrigin((uint64_t)v11, &v61);
              v62 = v27;
              v35 = v61;
              if ((v61 & 1) != 0)
              {
                v56 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
                if ((v61 & 2) != 0
                  || ((v44 = *(unsigned int *)((v61 & 0xFFFFFFFF8) + 8), (_DWORD)v44 != 0x3FFFFFFF)
                    ? (v45 = (_DWORD)v44 == -1)
                    : (v45 = 1),
                      v45))
                {
                  v46 = 2;
                }
                else if (v44 >> 28)
                {
                  v47 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v47 = v56;
                  *(_DWORD *)(v47 + 8) = v44;
                  v46 = 1;
                  v56 = v47;
                }
                else
                {
                  v46 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
                  v56 = v44 << 36;
                }
                v35 = v56 | v46;
              }
              v63 = v35;
              v36 = *v24;
              v59 = *(_QWORD *)(a1 + v20 + 96);
              v60 = v36;
              WTF::dataLog<char [29],JSC::FullCodeOrigin,char [5],JSC::CallVariant,char [15],WTF::PointerDump<JSC::CodeBlock>,char [2]>((JSC::FullCodeOrigin *)&v62, (JSC::CallVariant *)&v60, &v59);
              if ((v63 & 1) != 0 && (v63 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v63 & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
              if ((v61 & 1) != 0 && (v61 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v61 & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
            }
          }
          else if (HIBYTE(word_1ECF4C286))
          {
            goto LABEL_36;
          }
        }
        v32 = *(unsigned int *)(a1 + 44);
        if (v21 >= v32)
          goto LABEL_68;
        v33 = (JSC::CallLinkInfoBase *)(v22 - 24 * v32);
        *((_BYTE *)v33 + 17) = v21;
        *((_BYTE *)v33 + 18) = v13;
        *((_BYTE *)v33 + 19) = 0;
        v34 = *(_QWORD *)(a1 + v20 + 96);
        if (v34)
          JSC::CodeBlock::linkIncomingCall(v34, a6, v33);
        if (a6 && *v24 && *(_DWORD *)(a5 + 760) >= *((unsigned __int8 *)a6 + 7))
          JSC::Heap::writeBarrierSlowPath((uint64_t)v57, (unint64_t)a6);
        ++v21;
        v22 += 24;
        v20 += 32;
        if (v21 >= *(unsigned int *)(a9 + 12))
          goto LABEL_67;
      }
    }
    v48 = 0;
    v49 = a1;
    while ((unint64_t)v11 < *(unsigned int *)(a1 + 48))
    {
      v50 = a1 + v48;
      v51 = (__int128 *)(*(_QWORD *)a9 + v48);
      v52 = *v51;
      *(_OWORD *)(v50 + 88) = v51[1];
      *(_OWORD *)(v50 + 72) = v52;
      v53 = *(unsigned int *)(a1 + 44);
      if ((unint64_t)v11 >= v53)
        break;
      v54 = (JSC::CallLinkInfoBase *)(v49 - 24 * v53);
      *((_BYTE *)v54 + 17) = (_BYTE)v11;
      *((_BYTE *)v54 + 18) = v13;
      *((_BYTE *)v54 + 19) = 0;
      v55 = *(_QWORD *)(v50 + 96);
      if (v55)
        JSC::CodeBlock::linkIncomingCall(v55, a6, v54);
      if (a6 && *(_QWORD *)(v50 + 72) && *(_DWORD *)(a5 + 760) >= *((unsigned __int8 *)a6 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v57, (unint64_t)a6);
      v11 = (JSC::CallFrame *)((char *)v11 + 1);
      v49 += 24;
      v48 += 32;
      if ((unint64_t)v11 >= *(unsigned int *)(a9 + 12))
        goto LABEL_67;
    }
LABEL_68:
    __break(1u);
  }
  else
  {
LABEL_67:
    __dmb(0xAu);
    *(_BYTE *)(a1 + 40) |= 0x10u;
    JSC::JITStubRoutineSet::add(*(_QWORD *)(a5 + 728), a1);
    *(_BYTE *)(a1 + 40) |= 8u;
  }
}

uint64_t JSC::PolymorphicCallStubRoutine::variants@<X0>(uint64_t this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a7 = a7 + 16;
  *(_QWORD *)(a7 + 8) = 1;
  v8 = *(_DWORD *)(this + 48);
  v9 = (v8 - 1);
  if (v8 != 1)
  {
    v10 = this;
    LODWORD(v11) = 0;
    v12 = 0;
    v13 = (uint64_t *)(this + 72);
    while (v12 < *(unsigned int *)(v10 + 48))
    {
      v14 = *v13;
      v15 = *v13;
      if ((_DWORD)v11 == *(_DWORD *)(a7 + 8))
      {
        this = WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a7, (void *)(v11 + 1), (unint64_t)&v15, a2, a3, a4, a5, a6);
        v11 = *(unsigned int *)(a7 + 12);
        *(_QWORD *)(*(_QWORD *)a7 + 8 * v11) = *(_QWORD *)this;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a7 + 8 * v11) = v14;
      }
      LODWORD(v11) = v11 + 1;
      *(_DWORD *)(a7 + 12) = v11;
      ++v12;
      v13 += 4;
      if (v9 == v12)
        return this;
    }
    __break(1u);
  }
  return this;
}

uint64_t JSC::PolymorphicCallStubRoutine::edges@<X0>(uint64_t this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _DWORD *v13;
  int v14;
  __int128 v15;

  *(_QWORD *)a7 = a7 + 16;
  *(_QWORD *)(a7 + 8) = 1;
  v8 = *(_DWORD *)(this + 48);
  v9 = (v8 - 1);
  if (v8 != 1)
  {
    v10 = this;
    v11 = 0;
    v12 = 0;
    v13 = (_DWORD *)(this + 80);
    while (v12 < *(unsigned int *)(v10 + 48))
    {
      v14 = *v13;
      *(_QWORD *)&v15 = *((_QWORD *)v13 - 1);
      DWORD2(v15) = v14;
      if (v11 == *(_DWORD *)(a7 + 8))
      {
        this = WTF::Vector<JSC::CallEdge,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a7, (void *)(v11 + 1), (unint64_t)&v15, a2, a3, a4, a5, a6);
        *(_OWORD *)(*(_QWORD *)a7 + 16 * *(unsigned int *)(a7 + 12)) = *(_OWORD *)this;
      }
      else
      {
        *(_OWORD *)(*(_QWORD *)a7 + 16 * v11) = v15;
      }
      v11 = *(_DWORD *)(a7 + 12) + 1;
      *(_DWORD *)(a7 + 12) = v11;
      ++v12;
      v13 += 8;
      if (v9 == v12)
        return this;
    }
    __break(1u);
  }
  return this;
}

uint64_t JSC::Reg::dump(JSC::Reg *this, WTF::PrintStream *a2)
{
  unsigned int v3;
  WTF::PrintStream *v4;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  char *v9;
  char *v10;
  WTF::PrintStream *v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  char v17;

  v3 = *(_BYTE *)this & 0x7F;
  if (v3 == 127)
  {
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v4, "%s", "<none>");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  else
  {
    if ((*(_BYTE *)this & 0x60) != 0)
    {
      v6 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v7 = v6;
      v8 = &(&JSC::ARM64Assembler::fprName(JSC::ARM64Registers::FPRegisterID)::nameForRegister)[2 * (char)(v3 - 32)];
    }
    else
    {
      v6 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v7 = v6;
      v8 = &(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v3];
    }
    v9 = *v8;
    v10 = v8[1];
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    WTF::PrintStream::printf(v11, "%s", "%");
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v11 + 32))(v11);
    if (v9)
    {
      v14 = (_DWORD)v10 - 1;
      if (!v10)
        v14 = 0;
      WTF::StringImpl::utf8ForCharacters(v9, v14, (uint64_t)&v15, v13);
    }
    else
    {
      WTF::CString::CString(&v15, &str_25, 0);
      v16 = 0;
    }
    WTF::printExpectedCStringHelper(v12, "StringView", &v15);
    if (v16 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v11 + 40))(v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
}

unsigned int **JSC::RegisterAtOffsetList::RegisterAtOffsetList(unsigned int **a1, unint64_t a2, unint64_t a3, int a4)
{
  unint64_t v6;
  uint8x8_t v8;
  __int32 v9;
  uint8x8_t v10;
  __int32 v11;
  unsigned int *v12;
  uint8x8_t v13;
  __int32 v14;
  uint8x8_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL4 v22;
  BOOL v23;
  __int16 v24;
  uint64_t v25;

  v6 = a2;
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.i32[0];
  v10 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(a2));
  v10.i16[0] = vaddlv_u8(v10);
  v11 = v10.i32[0] + v9;
  if (v10.i32[0] + v9)
  {
    v12 = (unsigned int *)WTF::fastMalloc((WTF *)((8 * v11) + 8));
    *v12 = v11;
    memset_pattern16(v12 + 2, &unk_199157050, (8 * v11));
  }
  else
  {
    v12 = 0;
  }
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v13.i16[0] = vaddlv_u8(v13);
  v14 = v13.i32[0];
  v15 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(a3));
  v15.i16[0] = vaddlv_u8(v15);
  v16 = (8 * (v15.i32[0] + v14 + v11));
  *a1 = v12;
  a1[1] = (unsigned int *)v16;
  if (v6)
  {
    v17 = 0;
    if (a4)
      v18 = 0;
    else
      v18 = -v16;
    do
    {
      if (v17 >= **a1)
      {
        __break(0xC471u);
        JUMPOUT(0x198807E70);
      }
      v19 = (uint64_t)&(*a1)[2 * v17++];
      v20 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
      v21 = __clz(__rbit64(v6));
      v22 = v21 > 0x1F;
      v23 = (v22 & (a3 >> v21)) == 0;
      if ((v22 & (a3 >> v21)) != 0)
        v24 = 128;
      else
        v24 = 0;
      *(_QWORD *)(v19 + 8) = v24 & 0x1FF | (v20 >> 3 << 9) | v21;
      if (v23)
        v25 = 8;
      else
        v25 = 16;
      v18 = v25 + v20;
      v6 &= v6 - 1;
    }
    while (v6);
  }
  return a1;
}

unsigned int *JSC::RegisterAtOffsetList::find(unsigned int **a1, unsigned __int8 a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *v2;
  if (*v2 >= 2)
  {
    v4 = 0;
    v5 = v2 + 2;
    v6 = *v2;
    while (1)
    {
      v7 = v4 + ((v6 - 1) >> 1);
      if (v3 <= v7)
        goto LABEL_18;
      v8 = *(_QWORD *)&v5[2 * v7];
      if (((v8 ^ a2) & 0x7F) == 0)
        return &v5[2 * v4 + 2 * ((v6 - 1) >> 1)];
      v9 = (v6 - 1) >> 1;
      v6 -= v9 + 1;
      if ((a2 & 0x7Fu) >= (v8 & 0x7Fu))
      {
        v10 = v9 + 1;
      }
      else
      {
        v6 = v9;
        v10 = 0;
      }
      v4 += v10;
      if (v6 <= 1)
        goto LABEL_10;
    }
  }
  LODWORD(v4) = 0;
  v6 = *v2;
LABEL_10:
  if (!v6)
    return 0;
  if (v3 <= v4)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x198807F74);
  }
  v11 = &v2[2 * v4];
  v13 = v11[2];
  v12 = v11 + 2;
  if (((v13 ^ a2) & 0x7F) != 0)
    return 0;
  else
    return v12;
}

uint64_t JSC::RegisterAtOffsetList::indexOf(unsigned int **a1, unsigned __int8 a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;

  v2 = *a1;
  if (*a1)
  {
    v3 = *v2;
    if (*v2 >= 2)
    {
      v4 = 0;
      v5 = v2 + 2;
      v6 = *v2;
      while (1)
      {
        v7 = v4 + ((v6 - 1) >> 1);
        if (v3 <= v7)
          goto LABEL_17;
        v8 = *(_QWORD *)&v5[2 * v7];
        if (((v8 ^ a2) & 0x7F) == 0)
          break;
        v9 = (v6 - 1) >> 1;
        v6 -= v9 + 1;
        if ((a2 & 0x7Fu) >= (v8 & 0x7Fu))
        {
          v10 = v9 + 1;
        }
        else
        {
          v6 = v9;
          v10 = 0;
        }
        v4 += v10;
        if (v6 <= 1)
          goto LABEL_10;
      }
      v12 = &v5[2 * v4 + 2 * ((v6 - 1) >> 1)];
      return (unint64_t)((char *)v12 - (char *)v2 - 8) >> 3;
    }
    LODWORD(v4) = 0;
    v6 = *v2;
LABEL_10:
    if (v6)
    {
      if (v3 <= v4)
      {
LABEL_17:
        __break(0xC471u);
        JUMPOUT(0x198808078);
      }
      v11 = &v2[2 * v4];
      v13 = v11[2];
      v12 = v11 + 2;
      if (((v13 ^ a2) & 0x7F) == 0)
        return (unint64_t)((char *)v12 - (char *)v2 - 8) >> 3;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t *JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(JSC::RegisterAtOffsetList *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
  }
  return &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
}

void JSC::JITWorklistThread::~JITWorklistThread(JSC::JITWorklistThread *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v9 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  WTF::AutomaticThread::~AutomaticThread(this, a2, a3, a4, a5, a6, a7, a8);
}

{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  WTF::AutomaticThread::~AutomaticThread(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t WTF::dataLog<char [27],JSC::CodeBlock,char [19],char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Optimizing compilation of ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", " did become ready.");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [27],JSC::CodeBlock,char [10],JSC::CompilationResult,char [2]>(uint64_t a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  uint64_t v7;
  const char *v8;
  WTF::PrintStream *v9;
  uint64_t result;
  char v11;
  char **v12;
  char *v13;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v13 = &v11;
    v12 = &v13;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Optimizing compilation of ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v6, "%s", " result: ");
  v7 = *a2;
  if (v7 >= 4)
  {
    result = 50;
    __break(0xC471u);
  }
  else
  {
    v8 = off_1E35963B8[v7];
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    WTF::PrintStream::printf(v9, "%s", v8);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    WTF::PrintStream::printf(v6, "%s", "\n");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  }
  return result;
}

void WTF::Vector<WTF::Ref<JSC::JITWorklistThread,WTF::RawPtrTraits<JSC::JITWorklistThread>,WTF::DefaultRefDerefTraits<JSC::JITWorklistThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JITWorklistThread&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<JSC::ExpressionInfo::Chapter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  v9 = *(_QWORD *)a1;
  v10 = (unsigned int *)(a2 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *(_QWORD *)(v9 + 8 * v8) = a2;
  ++*(_DWORD *)(a1 + 12);
}

JSC::JITWorklist *JSC::JITWorklist::ensureGlobalWorklist(void)::$_0::operator()()
{
  JSC::JITWorklist *v0;
  JSC::JITWorklist *result;

  v0 = (JSC::JITWorklist *)WTF::fastMalloc((WTF *)0x148);
  result = JSC::JITWorklist::JITWorklist(v0);
  __dmb(0xAu);
  JSC::theGlobalJITWorklist = (uint64_t)result;
  return result;
}

void WTF::HashTable<JSC::JITCompilationKey,WTF::KeyValuePair<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>>,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashMap<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>,WTF::HashTraits<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JITCompilationKey>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unint64_t v10;

  v8 = *a1;
  if (*a1 && (v9 = *(_DWORD *)(v8 - 4)) != 0)
    v10 = (v9 << (6 * *(_DWORD *)(v8 - 12) >= (2 * v9)));
  else
    v10 = 8;
  WTF::HashTable<JSC::JITCompilationKey,WTF::KeyValuePair<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>>,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashMap<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>,WTF::HashTraits<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JITCompilationKey>>::rehash(a1, v10, 0, a4, a5, a6, a7, a8);
}

void WTF::HashTable<JSC::JITCompilationKey,WTF::KeyValuePair<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>>,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashMap<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>,WTF::HashTraits<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JITCompilationKey>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  unsigned int *v43;
  _QWORD *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v21 = 0;
    v14 = 0xD7862706ELL;
    while (1)
    {
      v22 = (uint64_t *)(v10 + 24 * v21);
      v23 = *v22;
      v24 = *((_DWORD *)v22 + 2);
      if (*v22)
        v25 = 1;
      else
        v25 = v24 == 0;
      if (!v25)
        goto LABEL_38;
      if (v23)
        v26 = 0;
      else
        v26 = v24 == 0;
      if (v26)
      {
        v27 = v10 + 24 * v21;
        v28 = *(unsigned int **)(v27 + 16);
        *(_QWORD *)(v27 + 16) = 0;
        if (!v28)
          goto LABEL_38;
        v29 = v28 + 2;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (v31)
          goto LABEL_38;
      }
      else
      {
        v32 = *a1;
        if (*a1)
          v33 = *(_DWORD *)(v32 - 8);
        else
          v33 = 0;
        v34 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
        v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
        v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
        v37 = v33 & ((0xD7862706ELL
                    * (unint64_t)(95187966 * v24 + 277951225 * ((v36 >> 31) ^ v36))) >> 4);
        v38 = 1;
        do
        {
          v39 = v37;
          v40 = v32 + 24 * v37;
          v37 = (v37 + v38++) & v33;
          if (*(_QWORD *)v40)
            v41 = 0;
          else
            v41 = *(_DWORD *)(v40 + 8) == 0;
        }
        while (!v41);
        v42 = v32 + 24 * v39;
        v45 = *(unsigned int **)(v42 + 16);
        v44 = (_QWORD *)(v42 + 16);
        v43 = v45;
        *v44 = 0;
        if (v45)
        {
          v46 = v43 + 2;
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            atomic_store(1u, v43 + 2);
            (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v43 + 8))(v43, 0xD7862706ELL);
            v14 = 0xD7862706ELL;
          }
        }
        *(_OWORD *)v40 = *(_OWORD *)v22;
        v49 = v10 + 24 * v21;
        v50 = *(_QWORD *)(v49 + 16);
        *(_QWORD *)(v49 + 16) = 0;
        *v44 = v50;
        v28 = *(unsigned int **)(v49 + 16);
        *(_QWORD *)(v49 + 16) = 0;
        if (!v28)
          goto LABEL_38;
        v51 = v28 + 2;
        do
        {
          v52 = __ldaxr(v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v51));
        if (v53)
          goto LABEL_38;
      }
      atomic_store(1u, v28 + 2);
      (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v28 + 8))(v28, 0xD7862706ELL);
      v14 = 0xD7862706ELL;
LABEL_38:
      if (++v21 == v11)
        goto LABEL_39;
    }
  }
  if (v10)
LABEL_39:
    WTF::fastFree(v10 - 16, (void *)v14, v15, v16, v17, v18, v19, v20);
}

uint64_t *WTF::Vector<WTF::Ref<JSC::JITWorklistThread,WTF::RawPtrTraits<JSC::JITWorklistThread>,WTF::DefaultRefDerefTraits<JSC::JITWorklistThread>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<JSC::JITWorklistThread,WTF::RawPtrTraits<JSC::JITWorklistThread>,WTF::DefaultRefDerefTraits<JSC::JITWorklistThread>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::dataLog<JSC::JITWorklist,char [14],JSC::JITCompilationKey,char [2]>(uint64_t a1, const char *a2, uint64_t a3, const char *a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  WTF::PrintStream *v20;
  WTF::PrintStream *v22;
  char v23;
  const void **v24;
  char *v25;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v25 = &v23;
    v24 = (const void **)&v25;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v11 = (unsigned __int8 *)(*(_QWORD *)(a1 + 304) + 4);
  if (__ldaxr(v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
LABEL_7:
  JSC::JITWorklist::dump((_DWORD *)a1, (uint64_t)v10);
  v19 = __ldxr(v11);
  if (v19 == 1)
  {
    if (!__stlxr(0, v11))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, v13, v14, v15, v16, v17, v18);
LABEL_12:
  WTF::PrintStream::printf(v10, "%s", a2);
  if (*(_QWORD *)a3 || *(_DWORD *)(a3 + 8))
  {
    v25 = *(char **)a3;
    v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
    WTF::PrintStream::printImpl<char [13],WTF::RawPointer,char [7],JSC::JITCompilationMode,char [2]>(v20, "(Compile of ", (const void **)&v25, " with ", (int *)(a3 + 8), ")");
  }
  else
  {
    v22 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
    WTF::PrintStream::printf(v22, "%s", "<empty>");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
  WTF::PrintStream::printf(v10, "%s", a4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

void WTF::HashMap<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>,WTF::HashTraits<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>,WTF::HashTableTraits>::take(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;

  v8 = *a2;
  if (!*a2)
    goto LABEL_26;
  v9 = *(_DWORD *)(v8 - 8);
  v10 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((0xD7862706ELL
             * (unint64_t)(95187966 * (_DWORD)a4 + 277951225 * ((v12 >> 31) ^ v12))) >> 4);
  v14 = v8 + 24 * v13;
  v15 = *(_QWORD *)v14;
  v16 = *(_DWORD *)(v14 + 8);
  if (*(_QWORD *)v14 != a3 || v16 != (_DWORD)a4)
  {
    v25 = 1;
    while (v15 || v16)
    {
      v13 = (v13 + v25) & v9;
      v14 = v8 + 24 * v13;
      v15 = *(_QWORD *)v14;
      v16 = *(_DWORD *)(v14 + 8);
      ++v25;
      if (*(_QWORD *)v14 == a3 && v16 == (_DWORD)a4)
        goto LABEL_7;
    }
    v14 = v8 + 24 * *(unsigned int *)(v8 - 4);
  }
LABEL_7:
  if (v8 + 24 * *(unsigned int *)(v8 - 4) == v14)
  {
LABEL_26:
    *a1 = 0;
  }
  else
  {
    v18 = *(_QWORD *)(v14 + 16);
    *(_QWORD *)(v14 + 16) = 0;
    *a1 = v18;
    v19 = *a2;
    if (!*a2 || (v19 += 24 * *(unsigned int *)(v19 - 4), v19 != v14))
    {
      if (v19 != v14)
      {
        *(_QWORD *)v14 = 0;
        *(_DWORD *)(v14 + 8) = 2;
        *(_QWORD *)(v14 + 16) = 0;
        ++*(_DWORD *)(*a2 - 16);
        v20 = *a2;
        if (*a2)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *a2;
        if (*a2)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
            WTF::HashTable<JSC::JITCompilationKey,WTF::KeyValuePair<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>>,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashMap<JSC::JITCompilationKey,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>,WTF::HashTraits<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JITCompilationKey>>::rehash(a2, v24 >> 1, 0, a4, a5, a6, a7, a8);
        }
      }
    }
  }
}

_OWORD *WTF::HashTable<JSC::JITCompilationKey,JSC::JITCompilationKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>>::add(_OWORD *result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  int v33;
  BOOL v34;
  unint64_t v35;

  v10 = result;
  v11 = *a2;
  if (!*a2)
  {
    result = WTF::HashTable<JSC::JITCompilationKey,JSC::JITCompilationKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>>::rehash(a2, 8uLL, 0, a4, a5, a6, a7, a8);
    v11 = *a2;
  }
  v12 = *(_DWORD *)(v11 - 8);
  v13 = ~(*a3 << 32) + *a3;
  v14 = (v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13);
  v15 = (9 * (v14 ^ (v14 >> 8))) ^ ((9 * (v14 ^ (v14 >> 8))) >> 15);
  v16 = *((_DWORD *)a3 + 2);
  v17 = v12 & ((0xD7862706ELL
              * (unint64_t)(95187966 * v16
                                 + 277951225
                                 * (((v15 + ~(v15 << 27)) >> 31) ^ ((_DWORD)v15 + ~((_DWORD)v15 << 27))))) >> 4);
  v18 = v11 + 16 * v17;
  v19 = *(_QWORD *)v18;
  v20 = *(_QWORD *)v18 == 0;
  v21 = *(_DWORD *)(v18 + 8);
  if (*(_QWORD *)v18)
    v22 = 0;
  else
    v22 = v21 == 0;
  if (!v22)
  {
    v32 = 0;
    v33 = 1;
    do
    {
      if (v19 == *a3 && v21 == v16)
      {
        v31 = 0;
        v30 = v11 + 16 * *(unsigned int *)(v11 - 4);
        goto LABEL_15;
      }
      if (v20 && v21 != 0)
        v32 = (_QWORD *)v18;
      v17 = (v17 + v33) & v12;
      v18 = v11 + 16 * v17;
      v19 = *(_QWORD *)v18;
      v20 = *(_QWORD *)v18 == 0;
      v21 = *(_DWORD *)(v18 + 8);
      ++v33;
      if (*(_QWORD *)v18)
        v34 = 0;
      else
        v34 = v21 == 0;
    }
    while (!v34);
    if (v32)
    {
      *v32 = 0;
      v32[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v18 = (uint64_t)v32;
    }
  }
  v23 = *a3;
  *(_DWORD *)(v18 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)v18 = v23;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 > 2 * v28)
      goto LABEL_14;
    goto LABEL_30;
  }
  if (3 * v29 <= 4 * v28)
  {
    if (!(_DWORD)v29)
    {
      v35 = 8;
LABEL_33:
      result = WTF::HashTable<JSC::JITCompilationKey,JSC::JITCompilationKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>>::rehash(a2, v35, v18, a4, a5, a6, a7, a8);
      v18 = (uint64_t)result;
      v26 = *a2;
      if (*a2)
        v29 = *(unsigned int *)(v26 - 4);
      else
        v29 = 0;
      goto LABEL_14;
    }
LABEL_30:
    v35 = ((_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29)));
    goto LABEL_33;
  }
LABEL_14:
  v30 = v26 + 16 * v29;
  v31 = 1;
LABEL_15:
  *(_QWORD *)v10 = v18;
  *((_QWORD *)v10 + 1) = v30;
  *((_BYTE *)v10 + 16) = v31;
  return result;
}

_OWORD *WTF::HashTable<JSC::JITCompilationKey,JSC::JITCompilationKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>,WTF::HashTraits<JSC::JITCompilationKey>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  BOOL v34;
  _OWORD *v35;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v24 = 0;
    v22 = 0;
    do
    {
      v25 = v11 + 16 * v24;
      if (*(_QWORD *)v25)
      {
        v26 = *a1;
        if (*a1)
          v27 = *(_DWORD *)(v26 - 8);
        else
          v27 = 0;
        v28 = (~(*(_QWORD *)v25 << 32) + *(_QWORD *)v25) ^ ((~(*(_QWORD *)v25 << 32) + *(_QWORD *)v25) >> 22);
        v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((unint64_t)(v28 + ~(v28 << 13)) >> 8));
        v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
        LODWORD(v15) = v27 & ((0xD7862706ELL
                             * (unint64_t)(95187966 * *(_DWORD *)(v25 + 8)
                                                + 277951225 * ((v30 >> 31) ^ v30))) >> 4);
        v31 = 1;
        do
        {
          v32 = v15;
          v33 = v26 + 16 * v15;
          v16 = *(_QWORD *)v33;
          v17 = *(unsigned int *)(v33 + 8);
          v15 = (void *)((v32 + v31++) & v27);
          if (v16)
            v34 = 0;
          else
            v34 = (_DWORD)v17 == 0;
        }
        while (!v34);
        v35 = (_OWORD *)(v26 + 16 * v32);
        *v35 = *(_OWORD *)v25;
        if (v25 == a3)
          v22 = v35;
      }
      ++v24;
    }
    while (v24 != v12);
  }
  else
  {
    v22 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v22;
}

uint64_t WTF::Vector<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 9)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 8;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v7 = *(const void **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    if (v5 < 9)
    {
      v9 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
    }
    else
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
    }
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(a1 + 16) != v7 && v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

uint64_t WTF::dataLog<JSC::JITWorklist,char [13],JSC::JITCompilationKey,char [16],char [2]>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF::PrintStream *v16;
  WTF::PrintStream *v18;
  char v19;
  const void **v20;
  char *v21;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v21 = &v19;
    v20 = (const void **)&v21;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v7 = (unsigned __int8 *)(*(_QWORD *)(a1 + 304) + 4);
  if (__ldaxr(v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v7);
LABEL_7:
  JSC::JITWorklist::dump((_DWORD *)a1, (uint64_t)v6);
  v15 = __ldxr(v7);
  if (v15 == 1)
  {
    if (!__stlxr(0, v7))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v7, 0, v9, v10, v11, v12, v13, v14);
LABEL_12:
  WTF::PrintStream::printf(v6, "%s", ": Compiling ");
  if (*(_QWORD *)a2 || *(_DWORD *)(a2 + 8))
  {
    v21 = *(char **)a2;
    v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    WTF::PrintStream::printImpl<char [13],WTF::RawPointer,char [7],JSC::JITCompilationMode,char [2]>(v16, "(Compile of ", (const void **)&v21, " with ", (int *)(a2 + 8), ")");
  }
  else
  {
    v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    WTF::PrintStream::printf(v18, "%s", "<empty>");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", " asynchronously");
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t *WTF::Vector<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

unint64_t WTF::Vector<WTF::RefPtr<JSC::JITPlan,WTF::RawPtrTraits<JSC::JITPlan>,WTF::DefaultRefDerefTraits<JSC::JITPlan>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::ExpressionNode *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::ExpressionNode *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

uint64_t WTF::dataLog<JSC::JITWorklist,char [17],char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v15;
  char **v16;
  char *v17;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v5 = (unsigned __int8 *)(*(_QWORD *)(a1 + 304) + 4);
  if (__ldaxr(v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v5);
LABEL_7:
  JSC::JITWorklist::dump((_DWORD *)a1, (uint64_t)v4);
  v13 = __ldxr(v5);
  if (v13 == 1)
  {
    if (!__stlxr(0, v5))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v5, 0, v7, v8, v9, v10, v11, v12);
LABEL_12:
  WTF::PrintStream::printf(v4, "%s", ": Thread started");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<JSC::JITWorklist,char [19],char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v15;
  char **v16;
  char *v17;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v5 = (unsigned __int8 *)(*(_QWORD *)(a1 + 304) + 4);
  if (__ldaxr(v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v5);
LABEL_7:
  JSC::JITWorklist::dump((_DWORD *)a1, (uint64_t)v4);
  v13 = __ldxr(v5);
  if (v13 == 1)
  {
    if (!__stlxr(0, v5))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v5, 0, v7, v8, v9, v10, v11, v12);
LABEL_12:
  WTF::PrintStream::printf(v4, "%s", ": Thread will stop");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

unint64_t WTF::Vector<JSC::PCToCodeOriginMapBuilder::CodeRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<JSC::PCToCodeOriginMapBuilder::CodeRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<JSC::PCToCodeOriginMapBuilder::CodeRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::PCToCodeOriginMapBuilder::CodeRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x19880977CLL);
    }
    v7 = *(_QWORD *)a1;
    v8 = *(unsigned int *)(a1 + 12);
    v9 = WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(a1 + 8) = v5;
    *(_QWORD *)a1 = v9;
    if ((_DWORD)v8)
    {
      v17 = v9;
      v18 = v7 + 16 * v8;
      v19 = v7;
      do
      {
        *(_DWORD *)v17 = *(_DWORD *)v19;
        *(_DWORD *)(v17 + 4) = *(_DWORD *)(v19 + 4);
        v20 = *(_QWORD *)(v19 + 8);
        *(_QWORD *)(v19 + 8) = 0;
        *(_QWORD *)(v17 + 8) = v20;
        v21 = *(_QWORD *)(v19 + 8);
        if ((v21 & 1) != 0 && (v21 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v21 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
        v19 += 16;
        v17 += 16;
      }
      while (v19 != v18);
    }
    if (v7)
    {
      if (*(_QWORD *)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

uint64_t WTF::dataLog<char [31],JSC::BytecodeIndex,char [2]>(JSC::BytecodeIndex *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Unlinking polymorphic call bc#");
  JSC::BytecodeIndex::dump(a1, v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [29],JSC::FullCodeOrigin,char [5],JSC::CallVariant,char [15],WTF::PointerDump<JSC::CodeBlock>,char [2]>(JSC::FullCodeOrigin *a1, JSC::CallVariant *a2, uint64_t *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  char v11;
  char **v12;
  char *v13;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v13 = &v11;
    v12 = &v13;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "Linking polymorphic call in ");
  JSC::FullCodeOrigin::dump(a1, v8);
  WTF::PrintStream::printf(v8, "%s", " to ");
  JSC::CallVariant::dump(a2, v8);
  WTF::PrintStream::printf(v8, "%s", ", codeBlock = ");
  if (*a3)
  {
    JSC::CodeBlock::dumpAssumingJITType(*a3);
  }
  else
  {
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v9, "%s", "(null)");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  }
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::Vector<JSC::CallEdge,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::CallEdge,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 2)
  {
    v16 = (_OWORD *)(result + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 1;
    goto LABEL_12;
  }
  if (!(v14 >> 28))
  {
    v16 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_12:
    if ((_DWORD)v15)
    {
      v17 = 16 * v15;
      v18 = (__int128 *)v10;
      do
      {
        v19 = *v18++;
        *v16++ = v19;
        v17 -= 16;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::CallEdge,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 > v8)
  {
    v13 = *(_QWORD *)a1;
    v14 = *(unsigned int *)(a1 + 12);
    if (v11 < 2)
    {
      v15 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (v11 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v15 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v11));
      *(_DWORD *)(a1 + 8) = v11;
      *(_QWORD *)a1 = v15;
    }
    if ((_DWORD)v14)
    {
      v16 = 16 * v14;
      v17 = (__int128 *)v13;
      do
      {
        v18 = *v17++;
        *v15++ = v18;
        v16 -= 16;
      }
      while (v16);
    }
    if (a1 + 16 != v13 && v13)
    {
      if (*(_QWORD *)a1 == v13)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t WTF::PrintStream::printImpl<WTF::CommaPrinter,JSC::RegisterAtOffset>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  float v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  WTF::PrintStream *v20;
  uint64_t v22;
  int v23;
  char v24;

  if (*(_BYTE *)(a2 + 32))
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v7 = *(char **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    if (v7)
    {
      v11 = v8 - 1;
      if (!v8)
        v11 = 0;
      WTF::StringImpl::utf8ForCharacters(v7, v11, (uint64_t)&v22, v10);
    }
    else
    {
      WTF::CString::CString(&v22, &str_25, 0);
      v23 = 0;
    }
    WTF::printExpectedCStringHelper(v9, "StringView", &v22);
    if (v23 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v24, &v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  else
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v13 = *(char **)(a2 + 16);
    v14 = *(_QWORD *)(a2 + 24);
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (v13)
    {
      v17 = v14 - 1;
      if (!v14)
        v17 = 0;
      WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v22, v16);
    }
    else
    {
      WTF::CString::CString(&v22, &str_25, 0);
      v23 = 0;
    }
    WTF::printExpectedCStringHelper(v15, "StringView", &v22);
    if (v23 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v24, &v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    *(_BYTE *)(a2 + 32) = 1;
  }
  v18 = *a3;
  LOBYTE(v22) = *a3 | 0x80;
  v19 = (v18 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  JSC::Reg::dump((JSC::Reg *)&v22, v20);
  WTF::PrintStream::printf(v20, "%s", " at ");
  WTF::PrintStream::printf(v20, "%ld", v19);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>()
{
  uint64_t v0;
  unsigned int v1;

  v0 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v0 = 4;
  memset_pattern16((void *)(v0 + 8), &unk_199157050, 0x20uLL);
  JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result = v0;
  qword_1ECF50908 = 32;
  v1 = *(_DWORD *)v0;
  if (!*(_DWORD *)v0
    || (*(_QWORD *)(v0 + 8) = -2023, v1 == 1)
    || (*(_QWORD *)(v0 + 16) = -1510, v1 < 3)
    || (*(_QWORD *)(v0 + 24) = -997, v1 == 3))
  {
    __break(0xC471u);
  }
  else
  {
    *(_QWORD *)(v0 + 32) = -484;
  }
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>()
{
  uint64_t v0;
  unsigned int v1;

  v0 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v0 = 3;
  memset_pattern16((void *)(v0 + 8), &unk_199157050, 0x18uLL);
  JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result = v0;
  qword_1EE342E80 = 24;
  v1 = *(_DWORD *)v0;
  if (!*(_DWORD *)v0 || (*(_QWORD *)(v0 + 8) = -1510, v1 == 1) || (*(_QWORD *)(v0 + 16) = -997, v1 < 3))
    __break(0xC471u);
  else
    *(_QWORD *)(v0 + 24) = -484;
}

uint64_t JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(JSC::RegisterSetBuilder *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::calleeSavesFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::calleeSavesFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::$_0 &&>>);
  }
  return JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::result;
}

uint64_t JSC::RegisterSetBuilder::stackRegisters(JSC::RegisterSetBuilder *this)
{
  return 2684354560;
}

uint64_t JSC::RegisterSetBuilder::reservedHardwareRegisters(JSC::RegisterSetBuilder *this)
{
  return 1074003968;
}

uint64_t JSC::RegisterSetBuilder::runtimeTagRegisters(JSC::RegisterSetBuilder *this)
{
  return 402653184;
}

uint64_t JSC::RegisterSetBuilder::specialRegisters(JSC::RegisterSetBuilder *this)
{
  return 4161011712;
}

uint64_t JSC::RegisterSetBuilder::stubUnavailableRegisters(JSC::RegisterSetBuilder *this)
{
  return 0xFF00FFFC0000;
}

uint64_t JSC::RegisterSetBuilder::vmCalleeSaveRegisters(JSC::RegisterSetBuilder *this)
{
  return 0xFF001FF80000;
}

uint64_t JSC::RegisterSetBuilder::macroClobberedGPRs(JSC::RegisterSetBuilder *this)
{
  return 196608;
}

uint64_t JSC::RegisterSetBuilder::macroClobberedFPRs(JSC::RegisterSetBuilder *this)
{
  return 0x8000000000000000;
}

uint64_t JSC::RegisterSetBuilder::calleeSaveRegisters(JSC::RegisterSetBuilder *this)
{
  return 0xFF003FF80000;
}

uint64_t JSC::RegisterSetBuilder::llintBaselineCalleeSaveRegisters(JSC::RegisterSetBuilder *this)
{
  return 503316480;
}

uint64_t JSC::RegisterSetBuilder::dfgCalleeSaveRegisters(JSC::RegisterSetBuilder *this)
{
  return 469762048;
}

uint64_t JSC::RegisterSetBuilder::ftlCalleeSaveRegisters(JSC::RegisterSetBuilder *this)
{
  return 0xFF001FF80000;
}

uint64_t JSC::RegisterSetBuilder::argumentGPRS(JSC::RegisterSetBuilder *this)
{
  return 255;
}

unint64_t JSC::RegisterSetBuilder::registersToSaveForJSCall(uint64_t a1)
{
  return a1 & 0xFFFF00FF0003FFFFLL;
}

unint64_t JSC::RegisterSetBuilder::registersToSaveForCCall(uint64_t a1)
{
  return a1 & 0xFFFF00FF0003FFFFLL;
}

uint64_t JSC::RegisterSetBuilder::allGPRs(JSC::RegisterSetBuilder *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t JSC::RegisterSetBuilder::allFPRs(JSC::RegisterSetBuilder *this)
{
  return 0xFFFFFFFF00000000;
}

uint64_t JSC::RegisterSetBuilder::allRegisters(JSC::RegisterSetBuilder *this)
{
  return -1;
}

uint64_t JSC::RegisterSetBuilder::allScalarRegisters(JSC::RegisterSetBuilder *this)
{
  return -1;
}

uint64_t JSC::RegisterSetBuilder::wasmPinnedRegisters(JSC::RegisterSetBuilder *this)
{
  return 13107200;
}

uint64_t WTF::printInternal(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unsigned int v3;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD v19[9];
  char v20;
  _BYTE v21[8];
  unsigned int v22;
  char v23;
  _BYTE v24[8];
  unsigned int v25;
  char v26;
  _BYTE v27[8];
  unsigned int v28;
  char v29;
  _BYTE v30[8];
  unsigned int v31;
  uint64_t v32;

  v3 = a3;
  v5 = 0;
  v32 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  do
  {
    v30[v5-- + 7] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::uppercaseHexDigits[v6 & 0xF];
    v7 = v6 > 0xF;
    v6 >>= 4;
  }
  while (v7);
  v8 = HIDWORD(a2);
  v9 = HIDWORD(a3);
  if (v5 + 17 < 10)
  {
    LODWORD(v10) = &v31 + v5;
  }
  else
  {
    v10 = v30;
    memset(v30, 48, v5 + 8);
  }
  v11 = 0;
  v31 = &v31 - (_DWORD)v10;
  do
  {
    v27[v11-- + 7] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::uppercaseHexDigits[v8 & 0xF];
    v7 = v8 > 0xF;
    v8 >>= 4;
  }
  while (v7);
  if (v11 + 17 < 10)
  {
    v12 = (char *)&v28 + v11;
  }
  else
  {
    v12 = v27;
    memset(v27, 48, v11 + 8);
  }
  v13 = 0;
  v28 = &v28 - (_DWORD)v12;
  v14 = v3;
  do
  {
    v24[v13-- + 7] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::uppercaseHexDigits[v14 & 0xF];
    v7 = v14 > 0xF;
    v14 >>= 4;
  }
  while (v7);
  if (v13 + 17 < 10)
  {
    v15 = (char *)&v25 + v13;
  }
  else
  {
    v15 = v24;
    memset(v24, 48, v13 + 8);
  }
  v16 = 0;
  v25 = &v25 - (_DWORD)v15;
  do
  {
    v21[v16-- + 7] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::uppercaseHexDigits[v9 & 0xF];
    v7 = v9 > 0xF;
    v9 >>= 4;
  }
  while (v7);
  if (v16 + 17 < 10)
  {
    v17 = (char *)&v22 + v16;
  }
  else
  {
    v17 = v21;
    memset(v21, 48, v16 + 8);
  }
  v22 = &v20 + 16 - (_DWORD)v17;
  v19[0] = "{ ";
  v19[1] = &v29;
  v19[2] = ", ";
  v19[3] = &v26;
  v19[4] = ", ";
  v19[5] = &v23;
  v19[6] = ", ";
  v19[7] = &v20;
  v19[8] = " }";
  return WTF::PrintStream::atomically<void WTF::PrintStream::print<char [3],WTF::HexNumberBuffer,char [3],WTF::HexNumberBuffer,char [3],WTF::HexNumberBuffer,char [3],WTF::HexNumberBuffer,char [3]>(char [3],WTF::HexNumberBuffer,char [3],WTF::HexNumberBuffer,char [3],WTF::HexNumberBuffer,char [3],WTF::HexNumberBuffer,char [3] const&)::{lambda(WTF::PrintStream&)#1}>(a1, (uint64_t)v19);
}

__n128 JSC::ScratchRegisterAllocator::ScratchRegisterAllocator(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[1].n128_u64[0] = 0;
  a1[2].n128_u32[2] = 0;
  return result;
}

uint64_t JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(result + 32);
  if ((v1 & 1) == 0 && (*(_BYTE *)result & 1) == 0)
  {
    v2 = *(_QWORD *)(result + 16);
    if ((v2 & 1) == 0)
    {
      v3 = 0;
LABEL_5:
      *(_QWORD *)(result + 16) = v2 | (1 << v3);
      return v3;
    }
  }
  if ((v1 & 2) == 0 && (*(_BYTE *)result & 2) == 0)
  {
    v2 = *(_QWORD *)(result + 16);
    if ((v2 & 2) == 0)
    {
      v3 = 1;
      goto LABEL_5;
    }
  }
  if ((v1 & 4) == 0 && (*(_BYTE *)result & 4) == 0)
  {
    v2 = *(_QWORD *)(result + 16);
    if ((v2 & 4) == 0)
    {
      v3 = 2;
      goto LABEL_5;
    }
  }
  if ((v1 & 8) == 0 && (*(_BYTE *)result & 8) == 0)
  {
    v2 = *(_QWORD *)(result + 16);
    if ((v2 & 8) == 0)
    {
      v3 = 3;
      goto LABEL_5;
    }
  }
  if ((v1 & 0x10) == 0 && (*(_BYTE *)result & 0x10) == 0)
  {
    v2 = *(_QWORD *)(result + 16);
    if ((v2 & 0x10) == 0)
    {
      v3 = 4;
      goto LABEL_5;
    }
  }
  if ((v1 & 0x20) == 0 && (*(_BYTE *)result & 0x20) == 0)
  {
    v2 = *(_QWORD *)(result + 16);
    if ((v2 & 0x20) == 0)
    {
      v3 = 5;
      goto LABEL_5;
    }
  }
  if ((v1 & 0x40) == 0 && (*(_BYTE *)result & 0x40) == 0)
  {
    v2 = *(_QWORD *)(result + 16);
    if ((v2 & 0x40) == 0)
    {
      v3 = 6;
      goto LABEL_5;
    }
  }
  if ((v1 & 0x80) == 0 && (*(_BYTE *)result & 0x80) == 0)
  {
    v2 = *(_QWORD *)(result + 16);
    if ((v2 & 0x80) == 0)
    {
      v3 = 7;
      goto LABEL_5;
    }
  }
  if ((v1 & 0x100) == 0 && (*(_BYTE *)(result + 1) & 1) == 0)
  {
    v2 = *(_QWORD *)(result + 16);
    if ((v2 & 0x100) == 0)
    {
      v3 = 8;
      goto LABEL_5;
    }
  }
  if ((v1 & 0x200) == 0 && (*(_BYTE *)(result + 1) & 2) == 0)
  {
    v2 = *(_QWORD *)(result + 16);
    if ((v2 & 0x200) == 0)
    {
      v3 = 9;
      goto LABEL_5;
    }
  }
  if ((v1 & 0x400) == 0 && (*(_BYTE *)(result + 1) & 4) == 0)
  {
    v2 = *(_QWORD *)(result + 16);
    if ((v2 & 0x400) == 0)
    {
      v3 = 10;
      goto LABEL_5;
    }
  }
  if ((v1 & 0x800) == 0 && (*(_BYTE *)(result + 1) & 8) == 0)
  {
    v2 = *(_QWORD *)(result + 16);
    if ((v2 & 0x800) == 0)
    {
      v3 = 11;
      goto LABEL_5;
    }
  }
  if ((v1 & 0x1000) == 0 && (*(_BYTE *)(result + 1) & 0x10) == 0)
  {
    v2 = *(_QWORD *)(result + 16);
    if ((v2 & 0x1000) == 0)
    {
      v3 = 12;
      goto LABEL_5;
    }
  }
  if ((v1 & 0x2000) == 0 && (*(_BYTE *)(result + 1) & 0x20) == 0)
  {
    v2 = *(_QWORD *)(result + 16);
    if ((v2 & 0x2000) == 0)
    {
      v3 = 13;
      goto LABEL_5;
    }
  }
  if ((v1 & 0x4000) == 0 && (*(_BYTE *)(result + 1) & 0x40) == 0)
  {
    v2 = *(_QWORD *)(result + 16);
    if ((v2 & 0x4000) == 0)
    {
      v3 = 14;
      goto LABEL_5;
    }
  }
  if ((v1 & 0x8000) == 0 && (*(_BYTE *)(result + 1) & 0x80) == 0)
  {
    v2 = *(_QWORD *)(result + 16);
    if ((v2 & 0x8000) == 0)
    {
      v3 = 15;
      goto LABEL_5;
    }
  }
  if ((v1 & 1) == 0)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((v4 & 1) == 0)
    {
      LOBYTE(v5) = 0;
      v3 = 0;
LABEL_90:
      *(_QWORD *)(result + 16) = v4 | (1 << v5);
      ++*(_DWORD *)(result + 40);
      return v3;
    }
  }
  if ((v1 & 2) == 0)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((v4 & 2) == 0)
    {
      v5 = 1;
      goto LABEL_89;
    }
  }
  if ((v1 & 4) == 0)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((v4 & 4) == 0)
    {
      v5 = 2;
      goto LABEL_89;
    }
  }
  if ((v1 & 8) == 0)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((v4 & 8) == 0)
    {
      v5 = 3;
      goto LABEL_89;
    }
  }
  if ((v1 & 0x10) == 0)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((v4 & 0x10) == 0)
    {
      v5 = 4;
      goto LABEL_89;
    }
  }
  if ((v1 & 0x20) == 0)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((v4 & 0x20) == 0)
    {
      v5 = 5;
      goto LABEL_89;
    }
  }
  if ((v1 & 0x40) == 0)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((v4 & 0x40) == 0)
    {
      v5 = 6;
      goto LABEL_89;
    }
  }
  if ((v1 & 0x80) == 0)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((v4 & 0x80) == 0)
    {
      v5 = 7;
      goto LABEL_89;
    }
  }
  if ((v1 & 0x100) == 0)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((v4 & 0x100) == 0)
    {
      v5 = 8;
      goto LABEL_89;
    }
  }
  if ((v1 & 0x200) == 0)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((v4 & 0x200) == 0)
    {
      v5 = 9;
      goto LABEL_89;
    }
  }
  if ((v1 & 0x400) == 0)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((v4 & 0x400) == 0)
    {
      v5 = 10;
      goto LABEL_89;
    }
  }
  if ((v1 & 0x800) == 0)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((v4 & 0x800) == 0)
    {
      v5 = 11;
      goto LABEL_89;
    }
  }
  if ((v1 & 0x1000) == 0)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((v4 & 0x1000) == 0)
    {
      v5 = 12;
      goto LABEL_89;
    }
  }
  if ((v1 & 0x2000) == 0)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((v4 & 0x2000) == 0)
    {
      v5 = 13;
      goto LABEL_89;
    }
  }
  if ((v1 & 0x4000) == 0)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((v4 & 0x4000) == 0)
    {
      v5 = 14;
      goto LABEL_89;
    }
  }
  if ((v1 & 0x8000) == 0)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((v4 & 0x8000) == 0)
    {
      v5 = 15;
LABEL_89:
      v3 = v5;
      goto LABEL_90;
    }
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::ScratchRegisterAllocator::allocateScratchFPR(JSC::ScratchRegisterAllocator *this)
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = 0;
  while (1)
  {
    v2 = JSC::FPRInfo::toRegister::registerForIndex[v1];
    v3 = v2 + 32;
    v4 = (v2 + 32) & 0x7F;
    if (v4 >= 0x40)
      break;
    v5 = *((_QWORD *)this + 4);
    v6 = 1 << v4;
    if ((v5 & v6) == 0 && (*(_QWORD *)this & v6) == 0)
    {
      v10 = *((_QWORD *)this + 2);
      if ((v10 & v6) == 0)
      {
        *((_QWORD *)this + 2) = v10 | (1 << v3);
        return v2;
      }
    }
    if (++v1 == 23)
    {
      v7 = 0;
      while (1)
      {
        v2 = JSC::FPRInfo::toRegister::registerForIndex[v7];
        v3 = v2 + 32;
        v4 = (v2 + 32) & 0x7F;
        if (v4 >= 0x40)
          goto LABEL_11;
        v8 = 1 << v4;
        if (((1 << v4) & v5) == 0)
        {
          v4 = *((_QWORD *)this + 2);
          if ((v4 & v8) == 0)
            goto LABEL_12;
        }
        if (++v7 == 23)
        {
          __break(0xC471u);
          goto LABEL_11;
        }
      }
    }
  }
LABEL_11:
  __break(1u);
LABEL_12:
  *((_QWORD *)this + 2) = v4 | (1 << v3);
  ++*((_DWORD *)this + 10);
  return v2;
}

uint64_t JSC::ScratchRegisterAllocator::preserveReusedRegistersByPushing(_QWORD *a1, JSC::ScratchRegisterAllocator *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  JSC::ScratchRegisterAllocator *v19;
  char v20;
  char v21;
  char v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  _QWORD *v26;
  JSC::ScratchRegisterAllocator *v27;
  uint64_t v28;
  _QWORD v29[2];

  if (!*((_DWORD *)a1 + 10))
  {
    v10 = 0;
    return v10 | (a3 << 32);
  }
  if ((_BYTE)word_1ECF4C286)
  {
LABEL_55:
    v26 = a1;
    v27 = a2;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)a2, "preserveReusedRegistersByPushing");
    a1 = v26;
    a2 = v27;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  do
  {
    v16 = JSC::FPRInfo::toRegister::registerForIndex[v13] + 32;
    if ((v16 & 0x7Fu) >= 0x40)
    {
      __break(1u);
      goto LABEL_55;
    }
    v17 = 1 << (v16 & 0x7F);
    if ((a1[2] & v17) != 0)
    {
      v28 = v13;
      v19 = a2;
      v20 = v8 & 0x80;
      v21 = v16 & 0x7F;
      v8 = v16 & 0x7F | v8 & 0xFFFFFF80;
      v22 = JSC::FPRInfo::toRegister::registerForIndex[v13] + 32;
      v23 = v16 & 0x60;
      if (v23 == 32)
        v24 = 4;
      else
        v24 = 3;
      v25 = a1;
      if (JSC::RegisterSet::contains(a1, v16 & 0x7Fu | v20, v24))
      {
        v15 |= v17;
        if (v23 == 32 && (v21 & 0x60) == 0x20)
          v14 |= v17;
      }
      else if ((v25[2] & v17) != 0 && (*v25 & v17) != 0)
      {
        v15 |= 1 << v22;
        a2 = v19;
        a1 = v25;
        v13 = v28;
        goto LABEL_8;
      }
      a2 = v19;
      a1 = v25;
      v13 = v28;
    }
LABEL_8:
    ++v13;
  }
  while (v13 != 23);
  v29[1] = v14;
  v18 = a1[2];
  if ((v18 & 1) != 0)
    v15 |= *a1 & 1;
  if ((v18 & 2) != 0)
    v15 |= *a1 & 2;
  if ((v18 & 4) != 0)
    v15 |= *a1 & 4;
  if ((v18 & 8) != 0)
    v15 |= *a1 & 8;
  if ((v18 & 0x10) != 0)
    v15 |= *a1 & 0x10;
  if ((v18 & 0x20) != 0)
    v15 |= *a1 & 0x20;
  if ((v18 & 0x40) != 0)
    v15 |= *a1 & 0x40;
  if ((v18 & 0x80) != 0)
    v15 |= *a1 & 0x80;
  if ((v18 & 0x100) != 0)
    v15 |= *a1 & 0x100;
  if ((v18 & 0x200) != 0)
    v15 |= *a1 & 0x200;
  if ((v18 & 0x400) != 0)
    v15 |= *a1 & 0x400;
  if ((v18 & 0x800) != 0)
    v15 |= *a1 & 0x800;
  if ((v18 & 0x1000) != 0)
    v15 |= *a1 & 0x1000;
  if ((v18 & 0x2000) != 0)
    v15 |= *a1 & 0x2000;
  if ((v18 & 0x4000) != 0)
    v15 |= *a1 & 0x4000;
  if ((v18 & 0x8000) != 0)
    v15 |= *a1 & 0x8000;
  v29[0] = v15;
  v10 = JSC::ScratchRegisterAllocator::preserveRegistersToStackForCall(a2, (JSC::AssemblyHelpers *)v29, 0, a4, a5, a6, a7, a8);
  return v10 | (a3 << 32);
}

uint64_t JSC::RegisterSet::contains(_QWORD *a1, char a2, unsigned int a3)
{
  unint64_t v3;
  unsigned __int8 v4;

  v3 = a2 & 0x7F;
  if ((a2 & 0x60) == 0x20)
    v4 = 4;
  else
    v4 = 3;
  if ((a2 & 0x60) != 0x20 || a3 < v4)
  {
    if (v3 < 0x40)
      return (*a1 >> v3) & 1;
    goto LABEL_11;
  }
  if (v3 >= 0x40)
  {
LABEL_11:
    __break(1u);
    return (a1[1] & v3) != 0;
  }
  v3 = 1 << v3;
  if ((*a1 & v3) == 0)
    return 0;
  return (a1[1] & v3) != 0;
}

uint64_t JSC::ScratchRegisterAllocator::preserveRegistersToStackForCall(JSC::ScratchRegisterAllocator *this, JSC::AssemblyHelpers *a2, const JSC::RegisterSet *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v9;
  __int32 v10;
  uint8x8_t v11;
  __int32 v12;
  uint64_t v13;
  int v14;
  uint8x8_t v16;
  __int32 v17;
  uint8x8_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  BOOL v30;
  uint8x8_t v32;
  uint8x8_t v33;
  unint64_t v34;
  _DWORD *v35;
  unsigned __int8 v36;
  unint64_t v37;
  int v38;

  v38 = (int)a3;
  if ((a3 & 7) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19880AE44);
  }
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)*(_QWORD *)a2);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.i32[0];
  v11 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(*(_QWORD *)a2));
  v11.i16[0] = vaddlv_u8(v11);
  v12 = v11.i32[0];
  if (!(v11.i32[0] + v10))
    return 0;
  v14 = (int)a3;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [39],JSC::RegisterSet,char [32],unsigned int>((uint64_t)this, a2, &v38);
    v32 = (uint8x8_t)vcnt_s8((int8x8_t)*(_QWORD *)a2);
    v32.i16[0] = vaddlv_u8(v32);
    v10 = v32.i32[0];
    v33 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(*(_QWORD *)a2));
    v33.i16[0] = vaddlv_u8(v33);
    v12 = v33.i32[0];
  }
  v16 = (uint8x8_t)vcnt_s8((int8x8_t)*((_QWORD *)a2 + 1));
  v16.i16[0] = vaddlv_u8(v16);
  v17 = v16.i32[0];
  v18 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(*((_QWORD *)a2 + 1)));
  v18.i16[0] = vaddlv_u8(v18);
  v13 = (v14 + 8 * (v10 + v12 + v17 + v18.i32[0]) + 15) & 0xFFFFFFF0;
  JSC::MacroAssemblerARM64::sub64((uint64_t)this, 31, v13, 31, a5, a6, a7, a8);
  v25 = 0;
  v26 = 0;
  v35 = this;
  v36 = 31;
  v37 = 127;
  do
  {
    if (((*(_QWORD *)a2 >> v25) & 1) != 0)
    {
      v34 = ((unint64_t)(v26 + v14) << 6) & 0x3FFFFFFF00 | v25;
      JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>(&v35, (uint64_t *)&v34, v19, v20, v21, v22, v23, v24);
      v26 += 8;
    }
    ++v25;
  }
  while (v25 != 32);
  v27 = v37 & 0x7F;
  if ((_DWORD)v27 != 127)
  {
    JSC::MacroAssemblerARM64::store64((uint64_t)v35, v27, v36 | ((unint64_t)(v37 >> 8) << 34), v20, v21, v22, v23, v24);
    v37 = 127;
  }
  for (i = 0; i != 32; ++i)
  {
    v29 = i + 32;
    v30 = ((i + 32) & 0x60) != 0x20 || (*(_QWORD *)a2 & (0x100000000 << i)) == 0;
    if (v30 || (*((_QWORD *)a2 + 1) & (0x100000000 << i)) == 0)
    {
      if (((*(_QWORD *)a2 >> i) & 0x100000000) != 0)
      {
        v34 = ((unint64_t)(v26 + v14) << 6) & 0x3FFFFFFF00 | v29;
        JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v35, (uint64_t *)&v34, v19, v20, v21, v22, v23, v24);
        v26 += 8;
      }
    }
    else
    {
      v34 = v29 | ((unint64_t)(v26 + v14) << 6) & 0x3FFFFFFF00 | 0x80;
      JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::executeVector<JSC::ARM64Registers::FPRegisterID>((uint64_t)&v35, &v34, v19, v20, v21, v22, v23, v24);
      v26 += 16;
    }
  }
  if ((v37 & 0x7F) != 0x7F)
    JSC::MacroAssemblerARM64::storeDouble((uint64_t)v35, (char)((v37 & 0x7F) - 32), v36 | ((unint64_t)(v37 >> 8) << 34), v20, v21, v22, v23, v24);
  return v13;
}

void JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping(uint64_t a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  const char *v9;
  JSC::ScratchRegisterAllocator *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t i;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  _QWORD v25[2];

  if (*(_DWORD *)a3 == -1)
  {
    a2 = "./jit/ScratchRegisterAllocator.cpp";
    a3 = "void JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping(AssemblyHelpers &, const ScratchRegisterAll"
         "ocator::PreservedState &)";
    __break(0xC471u);
LABEL_5:
    __break(1u);
  }
  else
  {
    v8 = (_QWORD *)a1;
    if (!*(_DWORD *)(a1 + 40))
      return;
  }
  v9 = a3;
  v10 = (JSC::ScratchRegisterAllocator *)a2;
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)a2, "restoreReusedRegistersByPopping");
  v11 = 0;
  v12 = 0;
  v13 = 0;
  for (i = 15; i != -1; --i)
  {
    v15 = i & 0x7F;
    v16 = 1 << i;
    if ((v8[2] & (1 << i)) != 0)
    {
      v23 = v11;
      v17 = v15 | v12 & 0x80;
      v18 = i & 0x60;
      if (v18 == 32)
        v19 = 4;
      else
        v19 = 3;
      v12 = v15 | v12 & 0x80;
      if (JSC::RegisterSet::contains(v8, v17, v19))
      {
        if (v15 >= 0x40)
          goto LABEL_5;
        v13 |= 1 << v15;
        if (v18 == 32)
        {
          v11 = v23;
          if ((i & 0x60) == 0x20)
            v11 = (1 << v15) | v23;
        }
        else
        {
          v11 = v23;
        }
        continue;
      }
      v11 = v23;
    }
    if ((v8[2] & v16) != 0 && (*v8 & v16) != 0)
    {
      if (v15 >= 0x40)
        goto LABEL_5;
      v13 |= v16;
    }
  }
  v25[1] = v11;
  v20 = 0x16u;
  do
  {
    v21 = JSC::FPRInfo::toRegister::registerForIndex[v20] + 32;
    if ((v21 & 0x7Fu) >= 0x40)
      goto LABEL_5;
    v22 = 1 << (v21 & 0x7F);
    if ((v8[2] & v22) != 0 && (*v8 & v22) != 0)
      v13 |= 1 << v21;
    --v20;
  }
  while (v20 != -1);
  v24[1] = 0;
  v25[0] = v13;
  v24[0] = 0;
  JSC::ScratchRegisterAllocator::restoreRegistersFromStackForCall(v10, (JSC::AssemblyHelpers *)v25, (const JSC::RegisterSet *)v24, (const JSC::RegisterSet *)*(unsigned int *)v9, 0, a6, a7, a8);
}

void JSC::ScratchRegisterAllocator::restoreRegistersFromStackForCall(JSC::ScratchRegisterAllocator *this, JSC::AssemblyHelpers *a2, const JSC::RegisterSet *a3, const JSC::RegisterSet *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint8x8_t v10;
  __int32 v11;
  uint8x8_t v12;
  __int32 v13;
  int v14;
  uint64_t v17;
  int v18;
  uint8x8_t v19;
  __int32 v20;
  uint8x8_t v21;
  __int32 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint8x8_t v35;
  uint8x8_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  unsigned __int8 v41;
  unint64_t v42;
  int v43;

  v43 = a5;
  if ((a5 & 7) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19880B3A0);
  }
  v8 = a4;
  v10 = (uint8x8_t)vcnt_s8((int8x8_t)*(_QWORD *)a2);
  v10.i16[0] = vaddlv_u8(v10);
  v11 = v10.i32[0];
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(*(_QWORD *)a2));
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.i32[0];
  if (v12.i32[0] + v11)
  {
    v14 = a5;
    if ((_BYTE)word_1ECF4C286)
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [40],JSC::RegisterSet,char [32],unsigned int>((uint64_t)this, a2, &v43);
      v35 = (uint8x8_t)vcnt_s8((int8x8_t)*(_QWORD *)a2);
      v35.i16[0] = vaddlv_u8(v35);
      v11 = v35.i32[0];
      v36 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(*(_QWORD *)a2));
      v36.i16[0] = vaddlv_u8(v36);
      v13 = v36.i32[0];
    }
    v17 = 0;
    v18 = 0;
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)*((_QWORD *)a2 + 1));
    v19.i16[0] = vaddlv_u8(v19);
    v20 = v19.i32[0];
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(*((_QWORD *)a2 + 1)));
    v21.i16[0] = vaddlv_u8(v21);
    v40 = this;
    v41 = 31;
    v22 = v11 + v13 + v20 + v21.i32[0];
    v23 = 127;
    v24 = 127;
    while ((*(_QWORD *)a2 & (1 << v17)) == 0)
    {
LABEL_7:
      if (++v17 == 32)
      {
        v42 = v23;
        v29 = v24 & 0x7F;
        if ((_DWORD)v29 != 127)
        {
          JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)(v24 >> 8) << 34) | 0x1F, v29, (uint64_t)a4, a5, a6, a7, a8);
          v42 = 127;
        }
        v30 = 0;
        v31 = 0;
        v32 = 8 * v22;
        while (1)
        {
          v33 = 0x100000000 << v30;
          if ((*(_QWORD *)a2 & (0x100000000 << v30)) != 0)
            break;
LABEL_20:
          if (++v30 == 32)
          {
            if ((v42 & 0x7F) != 0x7F)
            {
              JSC::MacroAssemblerARM64::loadDouble((uint64_t)v40, v41 | ((unint64_t)(v42 >> 8) << 34), (char)((v42 & 0x7F) - 32), (uint64_t)a4, a5, a6, a7, a8);
              v42 = 127;
            }
            if (((v14 + v32 + 15) & 0xFFFFFFF0) != v8)
            {
              __break(0xC471u);
              JUMPOUT(0x19880B400);
            }
            JSC::MacroAssemblerARM64::add64((uint64_t)this, v8, 31, 31, a5, a6, a7, a8);
            return;
          }
        }
        v37 = v30 + 32;
        if ((((_DWORD)v30 + 32) & 0x60) == 0x20)
        {
          v34 = v31 & 0x80;
          v38 = v34 | (v30 + 32);
          if (JSC::RegisterSet::contains(a2, v34 | (v30 + 32), 4u))
          {
            if ((*(_QWORD *)a3 & v33) == 0)
            {
              v39 = v37 | ((unint64_t)(v18 + v14) << 6) & 0x3FFFFFFF00 | 0x80;
              JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::executeVector<JSC::ARM64Registers::FPRegisterID>((uint64_t)&v40, &v39, v29, (uint64_t)a4, a5, a6, a7, a8);
            }
            v18 += 16;
          }
          else if ((*(_QWORD *)a2 & v33) != 0)
          {
            goto LABEL_33;
          }
        }
        else
        {
          v38 = v31;
LABEL_33:
          if ((*(_QWORD *)a3 & v33) == 0)
          {
            v39 = ((unint64_t)(v18 + v14) << 6) & 0x3FFFFFFF00 | v37;
            JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v40, (uint64_t *)&v39, v29, (uint64_t)a4, a5, a6, a7, a8);
          }
          v18 += 8;
        }
        v31 = v38;
        goto LABEL_20;
      }
    }
    if ((*(_QWORD *)a3 & (1 << v17)) != 0)
    {
LABEL_10:
      v18 += 8;
      goto LABEL_7;
    }
    v23 = ((unint64_t)(v18 + v14) << 6) & 0x3FFFFFFF00 | v17;
    v25 = v24 & 0x7F;
    if ((_DWORD)v25 == 127)
    {
LABEL_12:
      v24 = ((unint64_t)(v18 + v14) << 6) & 0x3FFFFFFF00 | v17;
      goto LABEL_10;
    }
    v26 = (v18 + v14) & 0xFFFFFFFC;
    v27 = (v24 >> 6) & 0x3FFFFFFFFFFFFFCLL;
    if (v26 == v27 + 8)
    {
      v26 = (v24 >> 6) & 0xFFFFFFFC;
      v28 = v17;
    }
    else
    {
      if (v27 != v26 + 8)
      {
        JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)(v24 >> 8) << 34) | 0x1F, v25, (uint64_t)a4, a5, a6, a7, a8);
        goto LABEL_12;
      }
      v28 = v24 & 0x7F;
      LOBYTE(v25) = v17;
    }
    JSC::MacroAssemblerARM64::loadPair64(this, 31, v26, (char)v25, v28, a6, a7, a8);
    v23 = 127;
    v24 = 127;
    goto LABEL_10;
  }
  if ((_DWORD)a4)
  {
    __break(0xC471u);
    JUMPOUT(0x19880B2C4);
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [39],JSC::RegisterSet,char [32],unsigned int>(uint64_t a1, JSC::RegisterSet *a2, _DWORD *a3)
{
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  void (**v42)(WTF::StringPrintStream *__hidden);
  WTF *v43;
  __int128 v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v42 = off_1E3572250;
    v43 = (WTF *)v45;
    v44 = xmmword_199122F80;
    v45[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v42, "%s", "Preserve registers to stack for call: ");
    JSC::RegisterSet::dump(a2, (WTF::PrintStream *)&v42);
    WTF::PrintStream::printf((WTF::PrintStream *)&v42, "%s", "; Extra bytes at top of stack: ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v42, "%u", *a3);
    v42[5]((WTF::StringPrintStream *)&v42);
    if (v43)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v43, v44, (uint64_t *)&v39);
      v13 = v39;
    }
    else
    {
      v13 = 0;
    }
    v14 = *(_DWORD *)(a1 + 200);
    v40 = v14;
    v39 = 0;
    v41 = v13;
    v15 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 224))
    {
      v16 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v15 + 1, (unint64_t)&v40);
      v17 = *(unsigned int *)(a1 + 228);
      v18 = *(_QWORD *)(a1 + 216) + 16 * v17;
      *(_DWORD *)v18 = *(_DWORD *)v16;
      v19 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v18 + 8) = v19;
      v20 = v41;
      *(_DWORD *)(a1 + 228) = v17 + 1;
      v41 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::~StringImpl(v20, v6, v7, v8, v9, v10, v11, v12);
          WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 216) + 16 * v15;
      *(_DWORD *)v21 = v14;
      *(_QWORD *)(v21 + 8) = v13;
      *(_DWORD *)(a1 + 228) = v15 + 1;
    }
    v22 = v39;
    v39 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
    if (v43 != (WTF *)v45)
      WTF::fastFree((unint64_t)v43, v6, v7, v8, v9, v10, v11, v12);
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [40],JSC::RegisterSet,char [32],unsigned int>(uint64_t a1, JSC::RegisterSet *a2, _DWORD *a3)
{
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  void (**v42)(WTF::StringPrintStream *__hidden);
  WTF *v43;
  __int128 v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v42 = off_1E3572250;
    v43 = (WTF *)v45;
    v44 = xmmword_199122F80;
    v45[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v42, "%s", "Restore registers from stack for call: ");
    JSC::RegisterSet::dump(a2, (WTF::PrintStream *)&v42);
    WTF::PrintStream::printf((WTF::PrintStream *)&v42, "%s", "; Extra bytes at top of stack: ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v42, "%u", *a3);
    v42[5]((WTF::StringPrintStream *)&v42);
    if (v43)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v43, v44, (uint64_t *)&v39);
      v13 = v39;
    }
    else
    {
      v13 = 0;
    }
    v14 = *(_DWORD *)(a1 + 200);
    v40 = v14;
    v39 = 0;
    v41 = v13;
    v15 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 224))
    {
      v16 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v15 + 1, (unint64_t)&v40);
      v17 = *(unsigned int *)(a1 + 228);
      v18 = *(_QWORD *)(a1 + 216) + 16 * v17;
      *(_DWORD *)v18 = *(_DWORD *)v16;
      v19 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v18 + 8) = v19;
      v20 = v41;
      *(_DWORD *)(a1 + 228) = v17 + 1;
      v41 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::~StringImpl(v20, v6, v7, v8, v9, v10, v11, v12);
          WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 216) + 16 * v15;
      *(_DWORD *)v21 = v14;
      *(_QWORD *)(v21 + 8) = v13;
      *(_DWORD *)(a1 + 228) = v15 + 1;
    }
    v22 = v39;
    v39 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
    if (v43 != (WTF *)v45)
      WTF::fastFree((unint64_t)v43, v6, v7, v8, v9, v10, v11, v12);
  }
}

void JSC::emitSetVarargsFrame(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  _QWORD *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;

  v9 = a3;
  v10 = a2;
  if ((_DWORD)a4 == (_DWORD)a5)
    goto LABEL_9;
  if ((_DWORD)a4 == 63)
  {
    if ((_DWORD)a5 != 31)
    {
      v12 = a5 & 0x1F | 0xD2800000;
      goto LABEL_6;
    }
LABEL_31:
    v12 = a5 | (32 * a4) | 0x91000000;
    goto LABEL_6;
  }
  if ((_DWORD)a4 == 31 || (_DWORD)a5 == 31)
    goto LABEL_31;
  v12 = a5 & 0x1F | ((a4 & 0x1F) << 16) | 0xAA0003E0;
LABEL_6:
  v14 = a1 + 50;
  v13 = a1[50];
  v15 = a1 + 14;
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = *v14;
  }
  *(_DWORD *)(*v15 + v13) = v12;
  *v14 += 4;
LABEL_9:
  v16 = a5 | (32 * a5) | 0x91000400;
  v17 = a1[50];
  if (v17 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v17 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v17) = v16;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::and64((uint64_t)a1, -2, a5, a5);
  if (v10 == 31)
  {
    v26 = a5 | ((a5 & 0x1F) << 16);
    v27 = -1960811552;
    goto LABEL_14;
  }
  v25 = (v10 & 0x1F) << 16;
  if ((_DWORD)a5 != 31)
  {
    v26 = v25 | (32 * (a5 & 0x1F));
    v27 = a5 & 0x1F | 0x8B000000;
LABEL_14:
    v28 = v26 | v27;
    goto LABEL_15;
  }
  v28 = v25 | 0x8B2063FF;
LABEL_15:
  v29 = a1[50];
  if (v29 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v18, v19, v20, v21, v22, v23, v24);
    v29 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v29) = v28;
  a1[50] += 4;
  if (v9)
    v30 = 5;
  else
    v30 = 6;
  JSC::MacroAssemblerARM64::add64((uint64_t)a1, v30, a5, a5, v21, v22, v23, v24);
  v38 = a1[50];
  if (v38 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v31, v32, v33, v34, v35, v36, v37);
    v38 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v38) = v16;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::and64((uint64_t)a1, -2, a5, a5);
  if ((_DWORD)a5 == 31)
  {
    v46 = a1[50];
    if (v46 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v39, v40, v41, v42, v43, v44, v45);
      v46 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v46) = -885037057;
    a1[50] += 4;
  }
  else
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 14), a5 & 0x1F | ((a5 & 0x1F) << 16) | 0xCB0003E0, v40, v41, v42, v43, v44, v45);
  }
  JSC::MacroAssemblerARM64::getEffectiveAddress(a1, ((unint64_t)a5 << 8) | 0x30000001DLL, 0x200000000, a5, v42, v43, v44, v45);
}

void JSC::emitSetupVarargsFrameFastCase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v9;
  unint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _DWORD *v21;
  JSC::ARM64LogicalImmediate *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::AssemblerBuffer *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int *v72;
  int *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  _DWORD *v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int i;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  JSC::AssemblerBuffer *v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  int v141;
  int v142;
  int v143;
  uint64_t v144;
  unsigned int v145[2];
  char v146;
  __int16 v147;
  char v148;
  unsigned int v149[3];
  __int128 v150;
  _QWORD v151[4];
  char v152;
  uint64_t v153;

  v9 = a8;
  v153 = *MEMORY[0x1E0C80C00];
  if (!a7)
  {
    v17 = 0;
    LOBYTE(v150) = 9;
    *(_QWORD *)((char *)&v150 + 1) = 4;
    v19 = v150;
    v20 = 6;
LABEL_9:
    v137 = v20;
    goto LABEL_11;
  }
  v16 = *(_QWORD *)(a7 + 24);
  if ((v16 >> 60) - 3 > 2)
  {
    LOBYTE(v150) = 17;
    *(_QWORD *)((char *)&v150 + 1) = v16 & 0x3FFFFF | 0xFFFE000000000000;
    v19 = v150;
    v17 = -1;
  }
  else
  {
    v17 = 0;
    v18 = *(unsigned int *)(a7 + 36);
    LOBYTE(v150) = 9;
    *(_QWORD *)((char *)&v150 + 1) = v18;
    v19 = v150;
  }
  v21 = *(_DWORD **)a7;
  if (*(_QWORD *)a7 && *v21 >= 2u)
  {
    v20 = *(_DWORD *)((char *)v21 + 14);
    goto LABEL_9;
  }
  v137 = 0;
LABEL_11:
  v151[3] = v19;
  v152 = v17;
  *(_QWORD *)&v150 = v151;
  *((_QWORD *)&v150 + 1) = 2;
  v22 = (JSC::ARM64LogicalImmediate *)(v19 >> 8);
  if (v19 == 17)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, v22, a4, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load32(a2, ((_QWORD)v22 << 35) | 0x1DLL, a4, a4, a5, a6, a7, a8);
  if (v9)
  {
    v27 = a1;
    JSC::MacroAssemblerARM64::branch32(a2, 12, a4, v9 + 1, v23, v24, v25, v26, (uint64_t)v149);
    v35 = (JSC::AssemblerBuffer *)(a2 + 56);
    v36 = *(_DWORD *)(a2 + 200);
    if (v36 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v35, v28, v29, v30, v31, v32, v33, v34);
      v35 = (JSC::AssemblerBuffer *)(a2 + 56);
      v36 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = a4 | 0x320003E0;
    v37 = *(_DWORD *)(a2 + 200) + 4;
    for (*(_DWORD *)(a2 + 200) = v37; v37 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v37)
    {
      if ((v37 + 4) > *(_DWORD *)(a2 + 192))
      {
        v136 = v35;
        JSC::AssemblerBuffer::outOfLineGrow(v35, v28, v29, v30, v31, v32, v33, v34);
        v35 = v136;
        v37 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v37) = -721215457;
      v37 = *(_DWORD *)(a2 + 200) + 4;
    }
    v38 = v37;
    if ((v37 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v35, v28, v29, v30, v31, v32, v33, v34);
      v38 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = 335544320;
    *(_DWORD *)(a2 + 200) += 4;
    if (*(_BYTE *)(a2 + 328))
      v39 = 69;
    else
      v39 = 65;
    v145[0] = v37;
    v145[1] = 0;
    v146 = v39;
    v147 = 15;
    v148 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v149, a2, v29, v30, v31, v32, v33, v34);
    JSC::MacroAssemblerARM64::sub32(a2, a4, v9, a4, v40, v41, v42, v43);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v145, a2, v44, v45, v46, v47, v48, v49);
    a1 = v27;
  }
  JSC::MacroAssemblerARM64::branch32(a2, 8, a4, 65537, v23, v24, v25, v26, (uint64_t)&v143);
  v55 = v143;
  if (v143 != -1)
  {
    v56 = *(unsigned int *)(a9 + 12);
    if ((_DWORD)v56 == *(_DWORD *)(a9 + 8))
    {
      v57 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v56 + 1), (unint64_t)&v143, v50, v51, v52, v53, v54);
      v59 = *v57;
      v58 = (uint64_t *)(v57 + 1);
      v55 = v59;
      LODWORD(v56) = *(_DWORD *)(a9 + 12);
    }
    else
    {
      v58 = &v144;
    }
    v60 = *(_QWORD *)a9 + 12 * v56;
    *(_DWORD *)v60 = v55;
    *(_QWORD *)(v60 + 4) = *v58;
    ++*(_DWORD *)(a9 + 12);
  }
  JSC::emitSetVarargsFrame((_DWORD *)a2, a4, 1, a3, a5, v52, v53, v54);
  JSC::MacroAssemblerARM64::branch64(a2, 8, a5, 29, v61, v62, v63, v64, (uint64_t)&v141);
  v70 = v141;
  if (v141 != -1)
  {
    v71 = *(unsigned int *)(a9 + 12);
    if ((_DWORD)v71 == *(_DWORD *)(a9 + 8))
    {
      v72 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v71 + 1), (unint64_t)&v141, v65, v66, v67, v68, v69);
      v74 = *v72;
      v73 = v72 + 1;
      v70 = v74;
      LODWORD(v71) = *(_DWORD *)(a9 + 12);
    }
    else
    {
      v73 = &v142;
    }
    v75 = *(_QWORD *)a9 + 12 * v71;
    *(_DWORD *)v75 = v70;
    *(_QWORD *)(v75 + 4) = *(_QWORD *)v73;
    ++*(_DWORD *)(a9 + 12);
  }
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19880C080);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  JSC::MacroAssemblerARM64::load64(a2, a1 + 8, *(char *)(a2 + 272), v65, v66, v67, v68, v69);
  JSC::MacroAssemblerARM64::branch64(a2, 8, 16, a5, v76, v77, v78, v79, (uint64_t)&v139);
  v87 = v139;
  if (v139 != -1)
  {
    v88 = *(unsigned int *)(a9 + 12);
    if ((_DWORD)v88 == *(_DWORD *)(a9 + 8))
    {
      v89 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v88 + 1), (unint64_t)&v139, v82, v83, v84, v85, v86);
      v91 = *v89;
      v90 = (uint64_t *)(v89 + 1);
      v87 = v91;
      LODWORD(v88) = *(_DWORD *)(a9 + 12);
    }
    else
    {
      v90 = &v140;
    }
    v92 = *(_QWORD *)a9 + 12 * v88;
    *(_DWORD *)v92 = v87;
    *(_QWORD *)(v92 + 4) = *v90;
    ++*(_DWORD *)(a9 + 12);
  }
  v93 = *(_DWORD *)(a2 + 200);
  if (v93 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v80, v81, v82, v83, v84, v85, v86);
    v93 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v93) = (32 * a5) | 0x9100401F;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::store32(a2, a4, a5 | 0x2000000000, v82, v83, v84, v85, v86);
  v101 = *(_DWORD *)(a2 + 200);
  if (v101 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v94, v95, v96, v97, v98, v99, v100);
    v101 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v101) = a4 & 0x1F | (32 * (a4 & 0x1F)) | 0x93407C00;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branchSub64(a2, 0, a4, 1, a4, v98, v99, v100, (uint64_t)v149);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v102, v103, v104, v105, v106, v107, v108);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  JSC::MacroAssemblerARM64::load64(a2, ((unint64_t)a4 << 8) | 0x30000001DLL, (8 * (v9 + v137) - 8) | 0x200000000, a6, v105, v106, v107, v108);
  JSC::MacroAssemblerARM64::store64(a2, a6, a5 | ((unint64_t)a4 << 8) | 0x300000000, 0x200000028uLL, v110, v111, v112, v113);
  JSC::MacroAssemblerARM64::branchSub64(a2, 1, a4, 1, a4, v114, v115, v116, (uint64_t)v145);
  v138 = i;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v145, (unsigned int *)&v138, a2, v117, v118, v119, v120, v121);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v149, a2, v122, v123, v124, v125, v126, v127);
  v135 = v150;
  if (v151 != (_QWORD *)v150)
  {
    if ((_QWORD)v150)
    {
      *(_QWORD *)&v150 = 0;
      DWORD2(v150) = 0;
      WTF::fastFree(v135, v128, v129, v130, v131, v132, v133, v134);
    }
  }
}

void JSC::JITSlowPathCall::call(JSC::JITSlowPathCall *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  JSC::ExecutableMemoryHandle *v46;
  __int128 v47;
  uint64_t v48;

  v9 = *(_QWORD *)this;
  v10 = *(_QWORD *)(v9 + 352);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v9, (JSC::ARM64LogicalImmediate *)((unint64_t)*(unsigned int *)(v9 + 640) >> 2), 3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)this;
  JSC::JITThunks::ctiSlowPathFunctionStub(*(_QWORD *)(v10 + 90440), v10, *((_QWORD *)this + 1), v12, v13, v14, v15, v16, &v45);
  v24 = v45;
  *(_DWORD *)(v11 + 208) = 0;
  v25 = *(_DWORD *)(v11 + 200);
  if (v25 + 4 > *(_DWORD *)(v11 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 56), v17, v18, v19, v20, v21, v22, v23);
    v25 = *(_DWORD *)(v11 + 200);
  }
  v26 = (_QWORD *)(v11 + 32);
  *(_DWORD *)(*(_QWORD *)(v11 + 56) + v25) = -1811939328;
  v27 = (*(_DWORD *)(v11 + 200) + 4);
  *(_DWORD *)(v11 + 200) = v27;
  LOBYTE(v48) = -1;
  BYTE3(v48) = 15;
  *(_WORD *)((char *)&v48 + 1) = 65;
  *(_QWORD *)&v47 = v27 - 4;
  *((_QWORD *)&v47 + 1) = v24;
  WORD2(v48) = 384;
  v28 = *(unsigned int *)(v11 + 44);
  if ((_DWORD)v28 == *(_DWORD *)(v11 + 40))
  {
    v35 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, v28 + 1, (unint64_t)&v47, v19, v20, v21, v22, v23);
    v29 = *(_QWORD *)(v11 + 32) + 24 * *(unsigned int *)(v11 + 44);
    *(_QWORD *)v29 = 0;
    *(_QWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 16) = -1;
    v36 = (((*(unsigned __int8 *)(v29 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v29 + 17) = 65;
    *(_BYTE *)(v29 + 19) = BYTE2(v36);
    *(_WORD *)(v29 + 20) &= 0xFC00u;
    v30 = *(_OWORD *)v35;
    v31 = *(_QWORD *)(v35 + 16);
  }
  else
  {
    v29 = *v26 + 24 * v28;
    v30 = v47;
    v31 = v48;
  }
  *(_QWORD *)(v29 + 16) = v31;
  *(_OWORD *)v29 = v30;
  ++*(_DWORD *)(v11 + 44);
  v32 = (unsigned int *)v46;
  v46 = 0;
  if (v32)
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v32, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
  }
}

uint64_t JSC::JITSlowPathCall::generateThunk@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  pthread_key_t *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  unsigned int v64;
  char v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v90;
  char **v91;
  char *v92;
  _QWORD v93[3];
  WTF *v94;
  _BYTE v95[128];
  unsigned int v96;
  char v97;
  int v98;
  int v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  _DWORD v103[6];
  char v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  _BYTE v109[128];
  unsigned int v110;
  int v111;
  int v112;
  char v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _DWORD *v117;
  char v118;
  uint64_t v119;
  int v120;
  _DWORD *v121;
  char v122;
  uint64_t v123;
  int v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  LOBYTE(v103[0]) = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0x8000000080000000;
  v108 = v109;
  v110 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v92 = (char *)v93;
    v93[0] = &v91;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v110;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v110 < v17)
    {
      if (v108 && v108 != v109)
      {
        WTF::fastFree((unint64_t)v108, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v108 = (_BYTE *)v15;
      v110 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v110;
    }
  }
  v18 = 0;
  v113 = 1;
  v118 = 16;
  v120 = 0x10000;
  v122 = 17;
  v124 = 0x20000;
  v111 = 0;
  v112 = 0;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v117 = v103;
  v119 = 0;
  v121 = v103;
  v123 = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v111;
  }
  *(_DWORD *)&v108[v18] = -1447068675;
  v19 = v111;
  v20 = v111 + 4;
  v111 += 4;
  if (v19 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v20 = v111;
  }
  *(_DWORD *)&v108[v20] = -1207811165;
  v21 = v111;
  v22 = v111 + 4;
  v111 += 4;
  if (v21 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v22 = v111;
  }
  *(_DWORD *)&v108[v22] = -1440939040;
  v23 = v111;
  v24 = v111 + 4;
  v111 += 4;
  if (v23 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v24 = v111;
  }
  *(_DWORD *)&v108[v24] = -129956959;
  v25 = v111;
  v26 = v111 + 4;
  v111 += 4;
  if (v25 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v26 = v111;
  }
  *(_DWORD *)&v108[v26] = -129695711;
  v27 = v111;
  v28 = v111 + 4;
  v111 += 4;
  if (v27 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v28 = v111;
  }
  *(_DWORD *)&v108[v28] = -1962737631;
  v111 += 4;
  if (!v113)
  {
    __break(0xC471u);
    JUMPOUT(0x19880C87CLL);
  }
  v117[52] &= ~v120;
  v29 = v118;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v103, a2, v118, v9, v10, v11, v12, v13);
  v112 = 0;
  v37 = v111;
  if (v111 + 4 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, v30, v31, v32, v33, v34, v35, v36);
    v37 = v111;
  }
  *(_DWORD *)&v108[v37] = (32 * (v29 & 0x1F)) | 0xD63F0000;
  v38 = v111;
  v39 = v111 + 4;
  v111 += 4;
  if (v38 + 8 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, v30, v31, v32, v33, v34, v35, v36);
    v39 = v111;
  }
  *(_DWORD *)&v108[v39] = -1463714819;
  v111 += 4;
  v40 = *(_QWORD *)(a1 + 90440);
  v41 = *(_QWORD *)(v40 + 40);
  v42 = *(unsigned int **)(v40 + 48);
  if (v42)
  {
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
    JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)v103, v41, v31, v32, v33, v34, v35, v36);
    do
    {
      v51 = __ldaxr(v42);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v42));
    if (!v52)
    {
      atomic_store(1u, v42);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v42, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
    }
  }
  else
  {
    JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)v103, v41, v31, v32, v33, v34, v35, v36);
  }
  v93[0] = 0;
  v93[1] = 0;
  v93[2] = -1;
  v94 = (WTF *)v95;
  v96 = 128;
  v53 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v53 != -1)
  {
    v92 = &v90;
    v91 = &v92;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v91, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v54 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v62 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v62)
  {
    v62 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v62, v54);
  }
  v63 = *(WTF **)v62;
  if (*(_QWORD *)v62 != v62 + 8)
  {
    v64 = *(_DWORD *)(v62 + 136);
    if (v96 < v64)
    {
      if (v94 && v94 != (WTF *)v95)
      {
        WTF::fastFree((unint64_t)v94, v55, v56, v57, v58, v59, v60, v61);
        v63 = *(WTF **)v62;
        v64 = *(_DWORD *)(v62 + 136);
      }
      v94 = v63;
      v96 = v64;
      *(_QWORD *)v62 = v62 + 8;
      *(_DWORD *)(v62 + 136) = 128;
    }
  }
  v65 = 1;
  v97 = 1;
  v98 = 0;
  v99 = 13;
  v100 = 0u;
  v101 = 0u;
  v102 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v93, (uint64_t)v103, 1, v57, v58, v59, v60, v61);
  BYTE2(v98) = 1;
  if (byte_1ECF4C288)
    goto LABEL_49;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v65 = HIBYTE(word_1ECF4C286) != 0;
LABEL_49:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v93, v65, "SlowPathCall", 13, "SlowPathCall", a3);
    goto LABEL_47;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v93, "SlowPathCall", 13, a3);
LABEL_47:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v93, v66, v67, v68, v69, v70, v71, v72);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v103, v73, v74, v75, v76, v77, v78, v79);
}

uint64_t JSC::handleExceptionGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int i;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  pthread_key_t *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  unsigned int v57;
  char v58;
  int v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v75;
  char **v76;
  char *v77;
  _QWORD v78[3];
  WTF *v79;
  _BYTE v80[128];
  unsigned int v81;
  char v82;
  int v83;
  int v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  _DWORD v88[6];
  char v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  _BYTE v94[128];
  unsigned int v95;
  unsigned int j;
  int v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _DWORD *v102;
  char v103;
  uint64_t v104;
  int v105;
  _DWORD *v106;
  char v107;
  uint64_t v108;
  int v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  LOBYTE(v88[0]) = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0x8000000080000000;
  v93 = v94;
  v95 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v77 = (char *)v78;
    v78[0] = &v76;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v77, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v16 = *(_DWORD *)(v14 + 136);
    if (v95 < v16)
    {
      if (v93 && v93 != v94)
      {
        WTF::fastFree((unint64_t)v93, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v16 = *(_DWORD *)(v14 + 136);
      }
      v93 = (_BYTE *)v15;
      v95 = v16;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
    }
  }
  j = 0;
  v98 = 1;
  v97 = 0;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = v88;
  v103 = 16;
  v104 = 0;
  v105 = 0x10000;
  v106 = v88;
  v107 = 17;
  v108 = 0;
  v109 = 0x20000;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  JSC::MacroAssemblerARM64::load64((uint64_t)v88, (uint64_t)this + 48, 0, v9, v10, v11, v12, v13);
  JSC::AssemblyHelpers::copyCalleeSavesToEntryFrameCalleeSavesBufferImpl((char *)v88, 0);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v88, (uint64_t)this, 0, v17, v18, v19, v20, v21);
  for (i = j; (int)i < SHIDWORD(v92); j = i)
  {
    if (i + 4 > v95)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, v22, v23, v24, v25, v26, v27, v28);
      i = j;
    }
    *(_DWORD *)&v93[i] = -721215457;
    i = j + 4;
  }
  if (!v98)
  {
    __break(0xC471u);
    JUMPOUT(0x19880CDECLL);
  }
  v102[52] &= ~v105;
  v30 = v103 & 0x1F;
  if (i + 4 > v95)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, v22, v23, v24, v25, v26, v27, v28);
    i = j;
  }
  *(_DWORD *)&v93[i] = v30 | 0xD2800000;
  v31 = j;
  v32 = j + 4;
  j += 4;
  if (v31 + 8 > v95)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, v22, v23, v24, v25, v26, v27, v28);
    v32 = j;
  }
  *(_DWORD *)&v93[v32] = v30 | 0xF2A00000;
  v33 = j;
  v34 = j + 4;
  j += 4;
  if (v33 + 8 > v95)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, v22, v23, v24, v25, v26, v27, v28);
    v34 = j;
  }
  *(_DWORD *)&v93[v34] = v30 | 0xF2C00000;
  v35 = j;
  v36 = j + 4;
  j += 4;
  v97 = 0;
  if (v35 + 8 > v95)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, v22, v23, v24, v25, v26, v27, v28);
    v36 = j;
  }
  *(_DWORD *)&v93[v36] = -700513792;
  v37 = j + 4;
  for (j = v37; v37 < SHIDWORD(v92); j = v37)
  {
    if (v37 + 4 > v95)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, v22, v23, v24, v25, v26, v27, v28);
      v37 = j;
    }
    *(_DWORD *)&v93[v37] = -721215457;
    v37 = j + 4;
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)v88, (uint64_t)this + 90488, 1, v24, v25, v26, v27, v28);
  v45 = j;
  if (j + 4 > v95)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, v38, v39, v40, v41, v42, v43, v44);
    v45 = j;
  }
  *(_DWORD *)&v93[v45] = -702611424;
  j += 4;
  v78[0] = 0;
  v78[1] = 0;
  v78[2] = -1;
  v79 = (WTF *)v80;
  v81 = 128;
  v46 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v46 != -1)
  {
    v77 = &v75;
    v76 = &v77;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v76, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v47 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v55 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v55)
  {
    v55 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v55, v47);
  }
  v56 = *(WTF **)v55;
  if (*(_QWORD *)v55 != v55 + 8)
  {
    v57 = *(_DWORD *)(v55 + 136);
    if (v81 < v57)
    {
      if (v79 && v79 != (WTF *)v80)
      {
        WTF::fastFree((unint64_t)v79, v48, v49, v50, v51, v52, v53, v54);
        v56 = *(WTF **)v55;
        v57 = *(_DWORD *)(v55 + 136);
      }
      v79 = v56;
      v81 = v57;
      *(_QWORD *)v55 = v55 + 8;
      *(_DWORD *)(v55 + 136) = 128;
    }
  }
  v58 = 1;
  v82 = 1;
  v83 = 0;
  v84 = 13;
  v85 = 0u;
  v86 = 0u;
  v87 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v78, (uint64_t)v88, 1, v50, v51, v52, v53, v54);
  if (v37 < 4)
    v59 = 0;
  else
    v59 = *(_DWORD *)((char *)v79 + (v37 & 0xFFFFFFFC) - 4);
  LODWORD(v77) = v37 - v59 - 16;
  JSC::ARM64Assembler::linkPointer(v85, (unsigned int *)&v77, (unint64_t)operationLookupExceptionHandler);
  BYTE2(v83) = 1;
  if (byte_1ECF4C288)
    goto LABEL_42;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v58 = HIBYTE(word_1ECF4C286) != 0;
LABEL_42:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v78, v58, "handleException", 16, "handleException", a2);
    goto LABEL_39;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v78, "handleException", 16, a2);
LABEL_39:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v78, v60, v61, v62, v63, v64, v65, v66);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v88, v67, v68, v69, v70, v71, v72, v73);
}

uint64_t JSC::handleExceptionWithCallFrameRollbackGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int i;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  pthread_key_t *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  unsigned int v57;
  char v58;
  int v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v75;
  char **v76;
  char *v77;
  _QWORD v78[3];
  WTF *v79;
  _BYTE v80[128];
  unsigned int v81;
  char v82;
  int v83;
  int v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  _DWORD v88[6];
  char v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  _BYTE v94[128];
  unsigned int v95;
  unsigned int j;
  int v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _DWORD *v102;
  char v103;
  uint64_t v104;
  int v105;
  _DWORD *v106;
  char v107;
  uint64_t v108;
  int v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  LOBYTE(v88[0]) = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0x8000000080000000;
  v93 = v94;
  v95 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v77 = (char *)v78;
    v78[0] = &v76;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v77, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v16 = *(_DWORD *)(v14 + 136);
    if (v95 < v16)
    {
      if (v93 && v93 != v94)
      {
        WTF::fastFree((unint64_t)v93, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v16 = *(_DWORD *)(v14 + 136);
      }
      v93 = (_BYTE *)v15;
      v95 = v16;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
    }
  }
  j = 0;
  v98 = 1;
  v97 = 0;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = v88;
  v103 = 16;
  v104 = 0;
  v105 = 0x10000;
  v106 = v88;
  v107 = 17;
  v108 = 0;
  v109 = 0x20000;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  JSC::MacroAssemblerARM64::load64((uint64_t)v88, (uint64_t)this + 48, 0, v9, v10, v11, v12, v13);
  JSC::AssemblyHelpers::copyCalleeSavesToEntryFrameCalleeSavesBufferImpl((char *)v88, 0);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v88, (uint64_t)this, 0, v17, v18, v19, v20, v21);
  for (i = j; (int)i < SHIDWORD(v92); j = i)
  {
    if (i + 4 > v95)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, v22, v23, v24, v25, v26, v27, v28);
      i = j;
    }
    *(_DWORD *)&v93[i] = -721215457;
    i = j + 4;
  }
  if (!v98)
  {
    __break(0xC471u);
    JUMPOUT(0x19880D3C4);
  }
  v102[52] &= ~v105;
  v30 = v103 & 0x1F;
  if (i + 4 > v95)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, v22, v23, v24, v25, v26, v27, v28);
    i = j;
  }
  *(_DWORD *)&v93[i] = v30 | 0xD2800000;
  v31 = j;
  v32 = j + 4;
  j += 4;
  if (v31 + 8 > v95)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, v22, v23, v24, v25, v26, v27, v28);
    v32 = j;
  }
  *(_DWORD *)&v93[v32] = v30 | 0xF2A00000;
  v33 = j;
  v34 = j + 4;
  j += 4;
  if (v33 + 8 > v95)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, v22, v23, v24, v25, v26, v27, v28);
    v34 = j;
  }
  *(_DWORD *)&v93[v34] = v30 | 0xF2C00000;
  v35 = j;
  v36 = j + 4;
  j += 4;
  v97 = 0;
  if (v35 + 8 > v95)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, v22, v23, v24, v25, v26, v27, v28);
    v36 = j;
  }
  *(_DWORD *)&v93[v36] = -700513792;
  v37 = j + 4;
  for (j = v37; v37 < SHIDWORD(v92); j = v37)
  {
    if (v37 + 4 > v95)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, v22, v23, v24, v25, v26, v27, v28);
      v37 = j;
    }
    *(_DWORD *)&v93[v37] = -721215457;
    v37 = j + 4;
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)v88, (uint64_t)this + 90488, 1, v24, v25, v26, v27, v28);
  v45 = j;
  if (j + 4 > v95)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, v38, v39, v40, v41, v42, v43, v44);
    v45 = j;
  }
  *(_DWORD *)&v93[v45] = -702611424;
  j += 4;
  v78[0] = 0;
  v78[1] = 0;
  v78[2] = -1;
  v79 = (WTF *)v80;
  v81 = 128;
  v46 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v46 != -1)
  {
    v77 = &v75;
    v76 = &v77;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v76, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v47 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v55 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v55)
  {
    v55 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v55, v47);
  }
  v56 = *(WTF **)v55;
  if (*(_QWORD *)v55 != v55 + 8)
  {
    v57 = *(_DWORD *)(v55 + 136);
    if (v81 < v57)
    {
      if (v79 && v79 != (WTF *)v80)
      {
        WTF::fastFree((unint64_t)v79, v48, v49, v50, v51, v52, v53, v54);
        v56 = *(WTF **)v55;
        v57 = *(_DWORD *)(v55 + 136);
      }
      v79 = v56;
      v81 = v57;
      *(_QWORD *)v55 = v55 + 8;
      *(_DWORD *)(v55 + 136) = 128;
    }
  }
  v58 = 1;
  v82 = 1;
  v83 = 0;
  v84 = 13;
  v85 = 0u;
  v86 = 0u;
  v87 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v78, (uint64_t)v88, 1, v50, v51, v52, v53, v54);
  if (v37 < 4)
    v59 = 0;
  else
    v59 = *(_DWORD *)((char *)v79 + (v37 & 0xFFFFFFFC) - 4);
  LODWORD(v77) = v37 - v59 - 16;
  JSC::ARM64Assembler::linkPointer(v85, (unsigned int *)&v77, (unint64_t)operationLookupExceptionHandlerFromCallerFrame);
  BYTE2(v83) = 1;
  if (byte_1ECF4C288)
    goto LABEL_42;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v58 = HIBYTE(word_1ECF4C286) != 0;
LABEL_42:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v78, v58, "handleExceptionWithCallFrameRollback", 37, "handleExceptionWithCallFrameRollback", a2);
    goto LABEL_39;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v78, "handleExceptionWithCallFrameRollback", 37, a2);
LABEL_39:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v78, v60, v61, v62, v63, v64, v65, v66);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v88, v67, v68, v69, v70, v71, v72, v73);
}

uint64_t JSC::popThunkStackPreservesAndHandleExceptionGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  pthread_key_t *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  unsigned int v43;
  char v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char **v69;
  char *v70;
  _QWORD v71[3];
  WTF *v72;
  _BYTE v73[128];
  unsigned int v74;
  char v75;
  int v76;
  int v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _BYTE v81[32];
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  _BYTE v86[128];
  unsigned int v87;
  unsigned int v88;
  int v89;
  char v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _BYTE *v94;
  char v95;
  uint64_t v96;
  int v97;
  _BYTE *v98;
  char v99;
  uint64_t v100;
  int v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v81[0] = 0;
  v81[24] = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0x8000000080000000;
  v85 = v86;
  v87 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v70 = (char *)v71;
    v71[0] = &v69;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v70, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v87;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v87 < v17)
    {
      if (v85 && v85 != v86)
      {
        WTF::fastFree((unint64_t)v85, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v85 = (_BYTE *)v15;
      v87 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v87;
    }
  }
  v18 = 0;
  v90 = 1;
  v95 = 16;
  v97 = 0x10000;
  v99 = 17;
  v101 = 0x20000;
  v88 = 0;
  v89 = 0;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = v81;
  v96 = 0;
  v98 = v81;
  v100 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v85, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v88;
  }
  *(_DWORD *)&v85[v18] = -1463714819;
  v88 += 4;
  v19 = *((_QWORD *)this + 11305);
  v20 = *(_QWORD *)(v19 + 8);
  v21 = *(unsigned int **)(v19 + 16);
  if (v21)
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)v81, v20, v8, v9, v10, v11, v12, v13);
    do
    {
      v30 = __ldaxr(v21);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v21));
    if (!v31)
    {
      atomic_store(1u, v21);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v21, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
  }
  else
  {
    JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)v81, v20, v8, v9, v10, v11, v12, v13);
  }
  v71[0] = 0;
  v71[1] = 0;
  v71[2] = -1;
  v72 = (WTF *)v73;
  v74 = 128;
  v32 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v32 != -1)
  {
    v70 = &v68;
    v69 = &v70;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v69, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v33 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v41 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v41)
  {
    v41 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v41, v33);
  }
  v42 = *(WTF **)v41;
  if (*(_QWORD *)v41 != v41 + 8)
  {
    v43 = *(_DWORD *)(v41 + 136);
    if (v74 < v43)
    {
      if (v72 && v72 != (WTF *)v73)
      {
        WTF::fastFree((unint64_t)v72, v34, v35, v36, v37, v38, v39, v40);
        v42 = *(WTF **)v41;
        v43 = *(_DWORD *)(v41 + 136);
      }
      v72 = v42;
      v74 = v43;
      *(_QWORD *)v41 = v41 + 8;
      *(_DWORD *)(v41 + 136) = 128;
    }
  }
  v44 = 1;
  v75 = 1;
  v76 = 0;
  v77 = 13;
  v78 = 0u;
  v79 = 0u;
  v80 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v71, (uint64_t)v81, 1, v36, v37, v38, v39, v40);
  BYTE2(v76) = 1;
  if (byte_1ECF4C288)
    goto LABEL_34;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v44 = HIBYTE(word_1ECF4C286) != 0;
LABEL_34:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v71, v44, "popThunkStackPreservesAndHandleException", 41, "popThunkStackPreservesAndHandleException", a2);
    goto LABEL_32;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v71, "popThunkStackPreservesAndHandleException", 41, a2);
LABEL_32:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v71, v45, v46, v47, v48, v49, v50, v51);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v81, v52, v53, v54, v55, v56, v57, v58);
}

uint64_t JSC::checkExceptionGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  int8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  pthread_key_t *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  unsigned int v43;
  char v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75[3];
  char v76;
  char **v77;
  char *v78;
  _QWORD v79[3];
  WTF *v80;
  _BYTE v81[128];
  unsigned int v82;
  char v83;
  int v84;
  int v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  _BYTE v89[32];
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  WTF *v93;
  _BYTE v94[128];
  unsigned int v95;
  unsigned int v96;
  int v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _BYTE *v102;
  char v103;
  uint64_t v104;
  int v105;
  _BYTE *v106;
  char v107;
  uint64_t v108;
  int v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v89[0] = 0;
  v89[24] = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0x8000000080000000;
  v93 = (WTF *)v94;
  v95 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v79[0] = &v78;
    *(_QWORD *)v75 = v79;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, v75, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(WTF **)v14;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v16 = *(_DWORD *)(v14 + 136);
    if (v95 < v16)
    {
      if (v93 && v93 != (WTF *)v94)
      {
        WTF::fastFree((unint64_t)v93, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(WTF **)v14;
        v16 = *(_DWORD *)(v14 + 136);
      }
      v93 = v15;
      v95 = v16;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
    }
  }
  v98 = 1;
  v96 = 0;
  v97 = 0;
  v17 = 0;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = v89;
  v103 = 16;
  v104 = 0;
  v105 = 0x10000;
  v106 = v89;
  v107 = 17;
  v108 = 0;
  v109 = 0x20000;
  v110 = 0;
  v112 = 0;
  v111 = 0;
  if (HIBYTE(word_1ECF4C620))
    JSC::InlineCacheCompiler::emitDataICPrologue((JSC::InlineCacheCompiler *)v89, (JSC::CCallHelpers *)1, v8, v9, v10, v11, v12, v13);
  JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)v89, (uint64_t)this, 0, 0, 0xFFFFFFFFLL, v11, v12, v13, (uint64_t)v75, v17);
  if (HIBYTE(word_1ECF4C620))
    JSC::AssemblyHelpers::emitFunctionEpilogueWithEmptyFrame((JSC::AssemblyHelpers *)v89, v18, v19, v20, v21, v22, v23, v24);
  v25 = v96;
  if (v96 + 4 > v95)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, v18, v19, v20, v21, v22, v23, v24);
    v25 = v96;
  }
  *(_DWORD *)((char *)v93 + v25) = -698416192;
  v96 += 4;
  v26 = *((_QWORD *)this + 11305);
  v28 = *(_QWORD *)(v26 + 8);
  v27 = *(unsigned int **)(v26 + 16);
  if (v27)
  {
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 + 1, v27));
    do
    {
      v30 = __ldaxr(v27);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v27));
    if (!v31)
    {
      atomic_store(1u, v27);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v27, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
  }
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::VM::getCTIStub((uint64_t)this, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::popThunkStackPreservesAndHandleExceptionGenerator, v20, v21, v22, v23, v24, v79);
    v28 = v79[0];
    JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v79, v60, v61, v62, v63, v64, v65, v66);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v75, v28, (uint64_t)v89, v20, v21, v22, v23, v24);
  v79[0] = 0;
  v79[1] = 0;
  v79[2] = -1;
  v80 = (WTF *)v81;
  v82 = 128;
  v32 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v32 != -1)
  {
    v78 = &v76;
    v77 = &v78;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v77, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v33 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v41 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v41)
  {
    v41 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v41, v33);
  }
  v42 = *(WTF **)v41;
  if (*(_QWORD *)v41 != v41 + 8)
  {
    v43 = *(_DWORD *)(v41 + 136);
    if (v82 < v43)
    {
      if (v80 && v80 != (WTF *)v81)
      {
        WTF::fastFree((unint64_t)v80, v34, v35, v36, v37, v38, v39, v40);
        v42 = *(WTF **)v41;
        v43 = *(_DWORD *)(v41 + 136);
      }
      v80 = v42;
      v82 = v43;
      *(_QWORD *)v41 = v41 + 8;
      *(_DWORD *)(v41 + 136) = 128;
    }
  }
  v44 = 1;
  v83 = 1;
  v84 = 0;
  v85 = 13;
  v86 = 0u;
  v87 = 0u;
  v88 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v79, (uint64_t)v89, 1, v36, v37, v38, v39, v40);
  BYTE2(v84) = 1;
  if (byte_1ECF4C288)
    goto LABEL_39;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v44 = HIBYTE(word_1ECF4C286) != 0;
LABEL_39:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v79, v44, "checkException", 15, "CheckException", a2);
    goto LABEL_37;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v79, "checkException", 15, a2);
LABEL_37:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v79, v45, v46, v47, v48, v49, v50, v51);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v89, v52, v53, v54, v55, v56, v57, v58);
}

uint64_t JSC::throwExceptionFromCallGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  pthread_key_t *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  unsigned int v58;
  char v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v75;
  char **v76;
  char *v77;
  _QWORD v78[3];
  WTF *v79;
  _BYTE v80[128];
  unsigned int v81;
  char v82;
  int v83;
  int v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  _DWORD v88[6];
  char v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  _BYTE v94[128];
  unsigned int v95;
  unsigned int v96;
  int v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _DWORD *v102;
  char v103;
  uint64_t v104;
  int v105;
  _DWORD *v106;
  char v107;
  uint64_t v108;
  int v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  LOBYTE(v88[0]) = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0x8000000080000000;
  v93 = v94;
  v95 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v77 = (char *)v78;
    v78[0] = &v76;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v77, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v95;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v95 < v17)
    {
      if (v93 && v93 != v94)
      {
        WTF::fastFree((unint64_t)v93, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v93 = (_BYTE *)v15;
      v95 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v95;
    }
  }
  v18 = 0;
  v98 = 1;
  v103 = 16;
  v105 = 0x10000;
  v107 = 17;
  v109 = 0x20000;
  v96 = 0;
  v97 = 0;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = v88;
  v104 = 0;
  v106 = v88;
  v108 = 0;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v96;
  }
  *(_DWORD *)&v93[v18] = -1447068675;
  v19 = v96;
  v20 = v96 + 4;
  v96 += 4;
  if (v19 + 8 > v95)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v20 = v96;
  }
  *(_DWORD *)&v93[v20] = -1862269955;
  v96 += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)v88, (uint64_t)this + 48, 0, v9, v10, v11, v12, v13);
  JSC::AssemblyHelpers::copyCalleeSavesToEntryFrameCalleeSavesBufferImpl((char *)v88, 0);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v88, (uint64_t)this, 0, v21, v22, v23, v24, v25);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v88, (uint64_t)operationLookupExceptionHandler, 8, v26, v27, v28, v29, v30);
  v97 = 0;
  v38 = v96;
  if (v96 + 4 > v95)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, v31, v32, v33, v34, v35, v36, v37);
    v38 = v96;
  }
  *(_DWORD *)&v93[v38] = -700514048;
  v96 += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)v88, (uint64_t)this + 90488, 1, v33, v34, v35, v36, v37);
  v46 = v96;
  if (v96 + 4 > v95)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v93, v39, v40, v41, v42, v43, v44, v45);
    v46 = v96;
  }
  *(_DWORD *)&v93[v46] = -702611424;
  v96 += 4;
  v78[0] = 0;
  v78[1] = 0;
  v78[2] = -1;
  v79 = (WTF *)v80;
  v81 = 128;
  v47 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v47 != -1)
  {
    v77 = &v75;
    v76 = &v77;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v76, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v48 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v56 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v56)
  {
    v56 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v56, v48);
  }
  v57 = *(WTF **)v56;
  if (*(_QWORD *)v56 != v56 + 8)
  {
    v58 = *(_DWORD *)(v56 + 136);
    if (v81 < v58)
    {
      if (v79 && v79 != (WTF *)v80)
      {
        WTF::fastFree((unint64_t)v79, v49, v50, v51, v52, v53, v54, v55);
        v57 = *(WTF **)v56;
        v58 = *(_DWORD *)(v56 + 136);
      }
      v79 = v57;
      v81 = v58;
      *(_QWORD *)v56 = v56 + 8;
      *(_DWORD *)(v56 + 136) = 128;
    }
  }
  v59 = 1;
  v82 = 1;
  v83 = 0;
  v84 = 8;
  v85 = 0u;
  v86 = 0u;
  v87 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v78, (uint64_t)v88, 1, v51, v52, v53, v54, v55);
  BYTE2(v83) = 1;
  if (byte_1ECF4C288)
    goto LABEL_34;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v59 = HIBYTE(word_1ECF4C286) != 0;
LABEL_34:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v78, v59, "throwExceptionFromCall", 23, "Throw exception from call thunk", a2);
    goto LABEL_32;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v78, "throwExceptionFromCall", 23, a2);
LABEL_32:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v78, v60, v61, v62, v63, v64, v65, v66);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v88, v67, v68, v69, v70, v71, v72, v73);
}

uint64_t JSC::throwExceptionFromCallSlowPathGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  pthread_key_t *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  unsigned int v56;
  char v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v73;
  char **v74;
  char *v75;
  _QWORD v76[3];
  WTF *v77;
  _BYTE v78[128];
  unsigned int v79;
  char v80;
  int v81;
  int v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _DWORD v86[6];
  char v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _BYTE *v91;
  _BYTE v92[128];
  unsigned int v93;
  unsigned int v94;
  int v95;
  char v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _DWORD *v100;
  char v101;
  uint64_t v102;
  int v103;
  _DWORD *v104;
  char v105;
  uint64_t v106;
  int v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  LOBYTE(v86[0]) = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0x8000000080000000;
  v91 = v92;
  v93 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v75 = (char *)v76;
    v76[0] = &v74;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v75, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v93;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v93 < v17)
    {
      if (v91 && v91 != v92)
      {
        WTF::fastFree((unint64_t)v91, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v91 = (_BYTE *)v15;
      v93 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v93;
    }
  }
  v18 = 0;
  v96 = 1;
  v101 = 16;
  v103 = 0x10000;
  v105 = 17;
  v107 = 0x20000;
  v94 = 0;
  v95 = 0;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = v86;
  v102 = 0;
  v104 = v86;
  v106 = 0;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v91, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v94;
  }
  *(_DWORD *)&v91[v18] = -1440873502;
  v94 += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)v86, (uint64_t)this + 48, 0, v9, v10, v11, v12, v13);
  JSC::AssemblyHelpers::copyCalleeSavesToEntryFrameCalleeSavesBufferImpl((char *)v86, 0);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v86, (uint64_t)this, 0, v19, v20, v21, v22, v23);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v86, (uint64_t)operationLookupExceptionHandler, 8, v24, v25, v26, v27, v28);
  v95 = 0;
  v36 = v94;
  if (v94 + 4 > v93)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v91, v29, v30, v31, v32, v33, v34, v35);
    v36 = v94;
  }
  *(_DWORD *)&v91[v36] = -700514048;
  v94 += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)v86, (uint64_t)this + 90488, 1, v31, v32, v33, v34, v35);
  v44 = v94;
  if (v94 + 4 > v93)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v91, v37, v38, v39, v40, v41, v42, v43);
    v44 = v94;
  }
  *(_DWORD *)&v91[v44] = -702611424;
  v94 += 4;
  v76[0] = 0;
  v76[1] = 0;
  v76[2] = -1;
  v77 = (WTF *)v78;
  v79 = 128;
  v45 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v45 != -1)
  {
    v75 = &v73;
    v74 = &v75;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v74, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v46 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v54 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v54)
  {
    v54 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v54, v46);
  }
  v55 = *(WTF **)v54;
  if (*(_QWORD *)v54 != v54 + 8)
  {
    v56 = *(_DWORD *)(v54 + 136);
    if (v79 < v56)
    {
      if (v77 && v77 != (WTF *)v78)
      {
        WTF::fastFree((unint64_t)v77, v47, v48, v49, v50, v51, v52, v53);
        v55 = *(WTF **)v54;
        v56 = *(_DWORD *)(v54 + 136);
      }
      v77 = v55;
      v79 = v56;
      *(_QWORD *)v54 = v54 + 8;
      *(_DWORD *)(v54 + 136) = 128;
    }
  }
  v57 = 1;
  v80 = 1;
  v81 = 0;
  v82 = 8;
  v83 = 0u;
  v84 = 0u;
  v85 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v76, (uint64_t)v86, 1, v49, v50, v51, v52, v53);
  BYTE2(v81) = 1;
  if (byte_1ECF4C288)
    goto LABEL_32;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v57 = HIBYTE(word_1ECF4C286) != 0;
LABEL_32:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v76, v57, "throwExceptionFromCallSlowPath", 31, "Throw exception from call slow path thunk", a2);
    goto LABEL_30;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v76, "throwExceptionFromCallSlowPath", 31, a2);
LABEL_30:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v76, v58, v59, v60, v61, v62, v63, v64);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v86, v65, v66, v67, v68, v69, v70, v71);
}

uint64_t JSC::virtualThunkFor(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  unint64_t v8;
  pthread_key_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  WTF *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  void *v36;
  _DWORD *v37;
  _DWORD *v38;
  _QWORD *v39;
  int v40;
  _DWORD *v41;
  char *v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int8x8_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int8x8_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  _DWORD *v82;
  uint64_t *v83;
  int v84;
  char *v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  unsigned int v128;
  _DWORD *v129;
  uint64_t *v130;
  int v131;
  char *v132;
  _QWORD *v133;
  unsigned int *v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  BOOL v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int j;
  unsigned int v147;
  char v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  uint8x8_t v169;
  __int32 v170;
  uint8x8_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  int v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unint64_t v197;
  pthread_key_t *v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  WTF *v207;
  unsigned int v208;
  char v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  WTF *v224;
  unsigned int v226;
  unsigned int v227;
  char v228;
  char v229;
  uint64_t v230;
  unsigned __int8 *v231;
  char *v232;
  uint64_t v233;
  _BYTE *v234;
  int v235;
  unsigned __int8 *v236;
  char *v237;
  unsigned __int8 *v238;
  uint64_t v239;
  int v240;
  char *v241;
  const char *v242;
  const char *v243;
  unint64_t v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int64_t v252;
  WTF *v253;
  _QWORD *v254;
  int v255;
  int v256;
  uint64_t v257;
  unsigned int v258[3];
  int v259;
  uint64_t v260;
  unsigned int v261[3];
  unsigned int v262[3];
  _DWORD v263[3];
  _DWORD v264[3];
  WTF *p_dst;
  uint64_t v266;
  _BYTE v267[31];
  char v268;
  char **v269;
  char *v270;
  void *__dst;
  uint64_t v272;
  uint64_t v273;
  WTF *v274;
  _BYTE v275[128];
  unsigned int v276;
  char v277;
  int v278;
  int v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  _DWORD v283[6];
  char v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  WTF *v288;
  _BYTE v289[128];
  unsigned int v290;
  unsigned int i;
  int v292;
  char v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  _DWORD *v297;
  char v298;
  uint64_t v299;
  int v300;
  _DWORD *v301;
  char v302;
  uint64_t v303;
  int v304;
  char v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;

  v308 = *MEMORY[0x1E0C80C00];
  LOBYTE(v283[0]) = 0;
  v284 = 0;
  v285 = 0;
  v286 = 0;
  v287 = 0x8000000080000000;
  v288 = (WTF *)v289;
  v290 = 128;
  v8 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v8 != -1)
  {
    __dst = v262;
    p_dst = (WTF *)&__dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v9 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v17 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v17)
  {
    v17 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v17, v9);
  }
  v18 = *(WTF **)v17;
  v19 = v290;
  if (*(_QWORD *)v17 != v17 + 8)
  {
    v20 = *(_DWORD *)(v17 + 136);
    if (v290 < v20)
    {
      if (v288 && v288 != (WTF *)v289)
      {
        WTF::fastFree((unint64_t)v288, v10, v11, v12, v13, v14, v15, v16);
        v18 = *(WTF **)v17;
        v20 = *(_DWORD *)(v17 + 136);
      }
      v288 = v18;
      v290 = v20;
      *(_QWORD *)v17 = v17 + 8;
      *(_DWORD *)(v17 + 136) = 128;
      v19 = v290;
    }
  }
  v21 = 0;
  v293 = 1;
  v294 = 0u;
  v295 = 0u;
  v296 = 0u;
  v298 = 16;
  v300 = 0x10000;
  v297 = v283;
  v299 = 0;
  v301 = v283;
  v302 = 17;
  v303 = 0;
  v304 = 0x20000;
  v305 = 0;
  v307 = 0;
  v306 = 0;
  v22 = (WTF *)v267;
  p_dst = (WTF *)v267;
  v266 = 2;
  i = 0;
  v292 = 0;
  if (v19 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
    v21 = i;
  }
  *(_DWORD *)((char *)v288 + v21) = -1203683248;
  v23 = i;
  v24 = i + 4;
  i += 4;
  if (v23 + 8 > v290)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
    v24 = i;
  }
  *(_DWORD *)((char *)v288 + v24) = 285214224;
  v25 = i;
  v26 = i + 4;
  i += 4;
  if (v25 + 8 > v290)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
    v26 = i;
  }
  *(_DWORD *)((char *)v288 + v26) = -1207877552;
  i += 4;
  if (a3 == 1)
  {
    JSC::MacroAssemblerARM64::branchTest64((JSC::ARM64LogicalImmediate *)0xFFFE000000000002, (uint64_t)v283, 1, 0, v13, v14, v15, v16, (uint64_t)v264);
    v34 = v264[0];
    if (v264[0] == -1)
      goto LABEL_28;
    v35 = HIDWORD(v266);
    if (HIDWORD(v266) == (_DWORD)v266)
    {
      v36 = (void *)(HIDWORD(v266) + 1);
      v37 = v264;
      goto LABEL_21;
    }
    v41 = v264;
LABEL_26:
    v39 = v41 + 1;
    goto LABEL_27;
  }
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v283, 1, 0, 28, v13, v14, v15, v16, (uint64_t)v263);
  v34 = v263[0];
  if (v263[0] == -1)
    goto LABEL_28;
  v35 = HIDWORD(v266);
  if (HIDWORD(v266) != (_DWORD)v266)
  {
    v41 = v263;
    goto LABEL_26;
  }
  v36 = (void *)(HIDWORD(v266) + 1);
  v37 = v263;
LABEL_21:
  v38 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, v36, (unint64_t)v37, v29, v30, v31, v32, v33);
  v40 = *v38;
  v39 = v38 + 1;
  v34 = v40;
  v35 = HIDWORD(v266);
LABEL_27:
  v42 = (char *)p_dst + 12 * v35;
  *(_DWORD *)v42 = v34;
  *(_QWORD *)(v42 + 4) = *v39;
  ++HIDWORD(v266);
LABEL_28:
  if (!v293)
  {
    __break(0xC471u);
    goto LABEL_193;
  }
  v301[52] &= ~v304;
  v43 = v302 & 0x1F | 0x38405000;
  v44 = i;
  if (i + 4 > v290)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, v27, v28, v29, v30, v31, v32, v33);
    v44 = i;
  }
  *(_DWORD *)((char *)v288 + v44) = v43;
  i += 4;
  JSC::MacroAssemblerARM64::branch32((uint64_t)v283, 1, 17, 26, v30, v31, v32, v33, (uint64_t)v262);
  v53 = i;
  if (i + 4 > v290)
  {
    v52 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, v45, v46, v47, v48, v49, v50, v51).n128_u64[0];
    v53 = i;
  }
  *(_DWORD *)((char *)v288 + v53) = -129925120;
  i += 4;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v283, 0, 0, 1, v48, v49, v50, v51, (uint64_t)v261, v52);
  v61 = i;
  if (i + 4 > v290)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, v54, v55, v56, v57, v58, v59, v60);
    v61 = i;
  }
  *(_DWORD *)((char *)v288 + v61) = -129830912;
  i += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v261, (uint64_t)v283, v55, v56, v57, v58, v59, v60);
  if (a4)
  {
    if (a4 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x19880F4F4);
    }
    v67 = 0x2000000000;
  }
  else
  {
    v67 = 0x1800000000;
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)v283, v67, 4, v62, v63, v64, v65, v66);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v283, 0, 4, 0xFFFFFFFFLL, v68, v69, v70, v71, (uint64_t)&v259, v72);
  v80 = v259;
  if (v259 != -1)
  {
    v81 = HIDWORD(v266);
    if (HIDWORD(v266) == (_DWORD)v266)
    {
      v82 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v266) + 1), (unint64_t)&v259, v75, v76, v77, v78, v79);
      v84 = *v82;
      v83 = (uint64_t *)(v82 + 1);
      v80 = v84;
      v81 = HIDWORD(v266);
    }
    else
    {
      v83 = &v260;
    }
    v85 = (char *)p_dst + 12 * v81;
    *(_DWORD *)v85 = v80;
    *(_QWORD *)(v85 + 4) = *v83;
    ++HIDWORD(v266);
  }
  if (!v293)
  {
    __break(0xC471u);
    JUMPOUT(0x19880F358);
  }
  v301[52] &= ~v304;
  v86 = v302 & 0x1F | 0x38405000;
  v87 = i;
  if (i + 4 > v290)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, v73, v74, v75, v76, v77, v78, v79);
    v87 = i;
  }
  *(_DWORD *)((char *)v288 + v87) = v86;
  i += 4;
  JSC::MacroAssemblerARM64::branch32((uint64_t)v283, 1, 17, 12, v76, v77, v78, v79, (uint64_t)v258);
  if (a4)
    v93 = 0x6800000000;
  else
    v93 = 0x6000000000;
  JSC::MacroAssemblerARM64::load64((uint64_t)v283, v93, 5, v88, v89, v90, v91, v92);
  v101 = i;
  if (i + 4 > v290)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, v94, v95, v96, v97, v98, v99, v100);
    v101 = i;
  }
  *(_DWORD *)((char *)v288 + v101) = -134216731;
  v102 = i + 4;
  for (i = v102; v102 < SHIDWORD(v287); i = v102)
  {
    if (v102 + 4 > v290)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, v94, v95, v96, v97, v98, v99, v100);
      v102 = i;
    }
    *(_DWORD *)((char *)v288 + v102) = -721215457;
    v102 = i + 4;
  }
  v292 = 0;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v258, (uint64_t)v283, v95, v96, v97, v98, v99, v100);
  v110 = i;
  if (i + 4 > v290)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, v103, v104, v105, v106, v107, v108, v109);
    v110 = i;
  }
  *(_DWORD *)((char *)v288 + v110) = -702611328;
  i += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v262, (uint64_t)v283, v104, v105, v106, v107, v108, v109);
  if (!v293)
  {
    __break(0xC471u);
    JUMPOUT(0x19880F3E4);
  }
  v301[52] &= ~v304;
  v118 = v302 & 0x1F | 0x38405000;
  v119 = i;
  if (i + 4 > v290)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, v111, v112, v113, v114, v115, v116, v117);
    v119 = i;
  }
  *(_DWORD *)((char *)v288 + v119) = v118;
  i += 4;
  JSC::MacroAssemblerARM64::branch32((uint64_t)v283, 1, 17, 27, v114, v115, v116, v117, (uint64_t)&v256);
  v127 = v256;
  if (v256 != -1)
  {
    v128 = HIDWORD(v266);
    if (HIDWORD(v266) == (_DWORD)v266)
    {
      v129 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v266) + 1), (unint64_t)&v256, v122, v123, v124, v125, v126);
      v131 = *v129;
      v130 = (uint64_t *)(v129 + 1);
      v127 = v131;
      v128 = HIDWORD(v266);
    }
    else
    {
      v130 = &v257;
    }
    v132 = (char *)p_dst + 12 * v128;
    *(_DWORD *)v132 = v127;
    *(_QWORD *)(v132 + 4) = *v130;
    ++HIDWORD(v266);
  }
  if (BYTE1(dword_1ECF4C240))
  {
    v133 = *(_QWORD **)(a2 + 90440);
    if (a4)
    {
      v135 = v133[17];
      v134 = (unsigned int *)v133[18];
      if (v134)
      {
        do
          v136 = __ldaxr(v134);
        while (__stlxr(v136 + 1, v134));
        do
        {
          v137 = __ldaxr(v134);
          v138 = --v137 == 0;
        }
        while (__stlxr(v137, v134));
        goto LABEL_66;
      }
    }
    else
    {
      v135 = v133[15];
      v134 = (unsigned int *)v133[16];
      if (v134)
      {
        do
          v226 = __ldaxr(v134);
        while (__stlxr(v226 + 1, v134));
        do
        {
          v227 = __ldaxr(v134);
          v138 = --v227 == 0;
        }
        while (__stlxr(v227, v134));
LABEL_66:
        if (v138)
        {
          atomic_store(1u, v134);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v134, v120, v121, v122, v123, v124, v125, v126);
          WTF::fastFree(v244, v245, v246, v247, v248, v249, v250, v251);
        }
      }
    }
  }
  else if (a4)
  {
    v135 = qword_1ECF53240;
  }
  else
  {
    v135 = qword_1ECF53238;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v283, v135, 4, v122, v123, v124, v125, v126);
  for (j = i; (int)j < SHIDWORD(v287); i = j)
  {
    if (j + 4 > v290)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, v139, v140, v141, v142, v143, v144, v145);
      j = i;
    }
    *(_DWORD *)((char *)v288 + j) = -721215457;
    j = i + 4;
  }
  v147 = j;
  if (j + 4 > v290)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, v139, v140, v141, v142, v143, v144, v145);
    v147 = i;
  }
  *(_DWORD *)((char *)v288 + v147) = 335544320;
  i += 4;
  if (v305)
    v148 = 69;
  else
    v148 = 65;
  __dst = (void *)j;
  LOBYTE(v272) = v148;
  *(_WORD *)((char *)&v272 + 1) = 15;
  BYTE3(v272) = -1;
  v255 = v102;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&__dst, (unsigned int *)&v255, (uint64_t)v283, v141, v142, v143, v144, v145);
  if (HIDWORD(v266))
  {
    v156 = 0;
    v157 = 0;
    v158 = 12 * HIDWORD(v266);
    while (v157 < HIDWORD(v266))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)p_dst + v156), (uint64_t)v283, v150, v151, v152, v153, v154, v155);
      ++v157;
      v156 += 12;
      if (v158 == v156)
        goto LABEL_78;
    }
    __break(0xC471u);
LABEL_192:
    __break(1u);
LABEL_193:
    JUMPOUT(0x19880F308);
  }
LABEL_78:
  v159 = i;
  if (i + 4 > v290)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, (uint64_t)v149, v150, v151, v152, v153, v154, v155);
    v159 = i;
  }
  *(_DWORD *)((char *)v288 + v159) = -1447068675;
  v160 = i;
  v161 = i + 4;
  i += 4;
  if (v160 + 8 > v290)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, (uint64_t)v149, v150, v151, v152, v153, v154, v155);
    v161 = i;
  }
  *(_DWORD *)((char *)v288 + v161) = -1862269955;
  i += 4;
  __dst = &v273;
  LODWORD(v273) = 16908317;
  v272 = 0x200000002;
  v162 = 2;
  do
  {
    v163 = 0;
    v164 = 0;
    v165 = (char *)__dst;
    v166 = v162;
    do
    {
      if ((*((_BYTE *)__dst + v163 + 1) & 0x40) != 0)
        goto LABEL_192;
      v164 |= 1 << *((_BYTE *)__dst + v163 + 1);
      v163 += 2;
    }
    while (2 * v162 != v163);
    v167 = 0;
    do
    {
      v168 = *((_BYTE *)__dst + v167) & 0x7F;
      if (v168 >= 0x40)
        goto LABEL_192;
      v164 &= ~(1 << v168);
      v167 += 2;
    }
    while (2 * v162 != v167);
    v169 = (uint8x8_t)vcnt_s8((int8x8_t)v164);
    v169.i16[0] = vaddlv_u8(v169);
    v170 = v169.i32[0];
    v171 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v164));
    v171.i16[0] = vaddlv_u8(v171);
    if (v171.i32[0] + v170)
    {
      v172 = 0;
      if (v162 <= 1uLL)
        v173 = 1;
      else
        v173 = v162;
      v174 = 2 * v173;
      while (1)
      {
        v175 = *((unsigned __int8 *)__dst + v172 + 1);
        if ((v175 & 0x7Fu) >= 0x40)
          goto LABEL_192;
        if (((v164 >> (v175 & 0x7F)) & 1) != 0)
          break;
        v172 += 2;
        if (v174 == v172)
          goto LABEL_108;
      }
      v176 = *((unsigned __int8 *)__dst + v172);
      if (v176 == v175)
        goto LABEL_106;
      v177 = (char)v176;
      if ((char)v176 == 63)
      {
        v178 = i;
        v179 = v290;
        if (v175 != 31)
        {
          v181 = v175 & 0x1F | 0xD2800000;
          goto LABEL_103;
        }
      }
      else
      {
        v178 = i;
        v179 = v290;
        if ((char)v175 != 31 && v177 != 31)
        {
          v181 = v175 & 0xFFE0FFFF | ((v177 & 0x1F) << 16) | 0xAA0003E0;
LABEL_103:
          if (v178 + 4 > v179)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, (uint64_t)v149, v150, v151, v152, v153, v154, v155);
            v178 = i;
          }
          *(_DWORD *)((char *)v288 + v178) = v181;
          i += 4;
          v165 = (char *)__dst;
          v166 = HIDWORD(v272);
LABEL_106:
          memmove(&v165[v172], &v165[v172 + 2], 2 * v166 - v172 - 2);
          v162 = HIDWORD(v272) - 1;
          goto LABEL_107;
        }
      }
      v181 = (char)v175 | (32 * v177) | 0x91000000;
      goto LABEL_103;
    }
    v253 = v22;
    v254 = a1;
    v228 = *(_BYTE *)__dst;
    v229 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)v283, *(char *)__dst, v229, v151, v152, v153, v154, v155);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v272) - 2);
    v230 = (HIDWORD(v272) - 1);
    v138 = HIDWORD(v272) == 1;
    HIDWORD(v272) = v230;
    v231 = (unsigned __int8 *)__dst;
    v232 = (char *)__dst + 2 * v230;
    if (v138)
    {
      v239 = 0;
      v240 = 0;
      v235 = 0;
      v149 = (char *)__dst + 2 * v230;
    }
    else
    {
      v233 = 2 * v230;
      v234 = __dst;
      while (*v234 != v229)
      {
        v234 += 2;
        v233 -= 2;
        if (!v233)
          goto LABEL_150;
      }
      *v234 = v228;
LABEL_150:
      v235 = 0;
      v236 = v231;
      v149 = v232;
      v237 = v232;
      do
      {
        if (*v231 == v231[1])
        {
          v238 = v231;
          if (v237 != (char *)__dst + 2 * HIDWORD(v272))
          {
            if (v231 == (unsigned __int8 *)v149)
            {
              v238 = (unsigned __int8 *)v237;
            }
            else
            {
              v252 = v236 - (unsigned __int8 *)v149;
              memmove(v237, v149, v236 - (unsigned __int8 *)v149);
              v238 = (unsigned __int8 *)&v237[v252];
            }
          }
          v149 = (char *)(v231 + 2);
          ++v235;
          v237 = (char *)v238;
        }
        v231 += 2;
        v236 += 2;
      }
      while (v231 < (unsigned __int8 *)v232);
      v231 = (unsigned __int8 *)__dst;
      v239 = HIDWORD(v272);
      v240 = HIDWORD(v272);
      v232 = v237;
    }
    v241 = (char *)&v231[2 * v239];
    if (v149 != v241)
    {
      memmove(v232, v149, v241 - v149);
      v240 = HIDWORD(v272);
    }
    v162 = v240 - v235;
    v22 = v253;
    a1 = v254;
LABEL_107:
    HIDWORD(v272) = v162;
LABEL_108:
    ;
  }
  while (v162);
  v182 = __dst;
  if (&v273 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v272) = 0;
    WTF::fastFree((unint64_t)v182, v149, v150, v151, v152, v153, v154, v155);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v283, (uint64_t)operationVirtualCall, 8, v151, v152, v153, v154, v155);
  v292 = 0;
  v190 = i;
  if (i + 4 > v290)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, v183, v184, v185, v186, v187, v188, v189);
    v190 = i;
  }
  *(_DWORD *)((char *)v288 + v190) = -700514048;
  v191 = i;
  v192 = i + 4;
  i += 4;
  if (v191 + 8 > v290)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, v183, v184, v185, v186, v187, v188, v189);
    v192 = i;
  }
  *(_DWORD *)((char *)v288 + v192) = -1862270017;
  v193 = i;
  v194 = i + 4;
  i += 4;
  if (v193 + 8 > v290)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, v183, v184, v185, v186, v187, v188, v189);
    v194 = i;
  }
  *(_DWORD *)((char *)v288 + v194) = -1463714819;
  v195 = i;
  v196 = i + 4;
  i += 4;
  if (v195 + 8 > v290)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v288, v183, v184, v185, v186, v187, v188, v189);
    v196 = i;
  }
  *(_DWORD *)((char *)v288 + v196) = -702611456;
  i += 4;
  __dst = 0;
  v272 = 0;
  v273 = -1;
  v274 = (WTF *)v275;
  v276 = 128;
  v197 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v197 != -1)
  {
    v270 = &v268;
    v269 = &v270;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v269, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v198 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v206 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v206)
  {
    v206 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v206, v198);
  }
  v207 = *(WTF **)v206;
  if (*(_QWORD *)v206 != v206 + 8)
  {
    v208 = *(_DWORD *)(v206 + 136);
    if (v276 < v208)
    {
      if (v274 && v274 != (WTF *)v275)
      {
        WTF::fastFree((unint64_t)v274, v199, v200, v201, v202, v203, v204, v205);
        v207 = *(WTF **)v206;
        v208 = *(_DWORD *)(v206 + 136);
      }
      v274 = v207;
      v276 = v208;
      *(_QWORD *)v206 = v206 + 8;
      *(_DWORD *)(v206 + 136) = 128;
    }
  }
  v209 = 1;
  v277 = 1;
  v278 = 0;
  v279 = 6;
  v280 = 0u;
  v281 = 0u;
  v282 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v283, 1, v201, v202, v203, v204, v205);
  BYTE2(v278) = 1;
  if (!byte_1ECF4C288)
  {
    if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
    {
      JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, "VirtualCallVirtual %s thunk", 28, a1);
      goto LABEL_135;
    }
    v209 = HIBYTE(word_1ECF4C286) != 0;
  }
  v242 = "construct";
  if (a3 == 1)
    v242 = "tail call";
  if (a3)
    v243 = v242;
  else
    v243 = "call";
  JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, v209, "VirtualCallVirtual %s thunk", 28, v243, a1);
LABEL_135:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v210, v211, v212, v213, v214, v215, v216);
  v224 = p_dst;
  if (v22 != p_dst && p_dst)
  {
    p_dst = 0;
    LODWORD(v266) = 0;
    WTF::fastFree((unint64_t)v224, v217, v218, v219, v220, v221, v222, v223);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v283, v217, v218, v219, v220, v221, v222, v223);
}

uint64_t JSC::polymorphicThunkFor(_QWORD *a1, int a2, int a3)
{
  unint64_t v6;
  pthread_key_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  _DWORD *v27;
  uint64_t *v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x8_t v42;
  int v43;
  unsigned int v44;
  int *v45;
  int *v46;
  int v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int8x8_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  int *v76;
  int *v77;
  int v78;
  char *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint8x8_t v121;
  __int32 v122;
  uint8x8_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  BOOL v132;
  unsigned int v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unint64_t v149;
  pthread_key_t *v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unsigned int v160;
  char v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WTF *v176;
  char v178;
  char v179;
  uint64_t v180;
  unsigned __int8 *v181;
  char *v182;
  uint64_t v183;
  _BYTE *v184;
  int v185;
  unsigned __int8 *v186;
  char *v187;
  unsigned __int8 *v188;
  uint64_t v189;
  int v190;
  char *v191;
  const char *v192;
  int64_t v193;
  int v194;
  _QWORD *v195;
  int v196;
  int v197;
  int v198;
  unsigned int v199[3];
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  WTF *p_dst;
  uint64_t v205;
  _BYTE v206[31];
  char v207;
  char **v208;
  char *v209;
  void *__dst;
  uint64_t v211;
  uint64_t v212;
  _BYTE *v213;
  _BYTE v214[128];
  unsigned int v215;
  char v216;
  int v217;
  int v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  _DWORD v222[6];
  char v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  _BYTE *v227;
  _BYTE v228[128];
  unsigned int v229;
  unsigned int i;
  int v231;
  char v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  _DWORD *v236;
  char v237;
  uint64_t v238;
  int v239;
  _DWORD *v240;
  char v241;
  uint64_t v242;
  int v243;
  char v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;

  v247 = *MEMORY[0x1E0C80C00];
  LOBYTE(v222[0]) = 0;
  v223 = 0;
  v224 = 0;
  v225 = 0;
  v226 = 0x8000000080000000;
  v227 = v228;
  v229 = 128;
  v6 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v6 != -1)
  {
    __dst = v199;
    p_dst = (WTF *)&__dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v7 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v15 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v15)
  {
    v15 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v15, v7);
  }
  v16 = *(_QWORD *)v15;
  if (*(_QWORD *)v15 != v15 + 8)
  {
    v17 = *(_DWORD *)(v15 + 136);
    if (v229 < v17)
    {
      if (v227 && v227 != v228)
      {
        WTF::fastFree((unint64_t)v227, v8, v9, v10, v11, v12, v13, v14);
        v16 = *(_QWORD *)v15;
        v17 = *(_DWORD *)(v15 + 136);
      }
      v227 = (_BYTE *)v16;
      v229 = v17;
      *(_QWORD *)v15 = v15 + 8;
      *(_DWORD *)(v15 + 136) = 128;
    }
  }
  v232 = 1;
  i = 0;
  v231 = 0;
  v233 = 0u;
  v234 = 0u;
  v235 = 0u;
  v236 = v222;
  v237 = 16;
  v238 = 0;
  v239 = 0x10000;
  v240 = v222;
  v241 = 17;
  v242 = 0;
  v243 = 0x20000;
  v244 = 0;
  v245 = 0;
  v246 = 0;
  p_dst = (WTF *)v206;
  v205 = 2;
  if (a2 == 1)
  {
    JSC::MacroAssemblerARM64::branchTest64((JSC::ARM64LogicalImmediate *)0xFFFE000000000002, (uint64_t)v222, 1, 0, v11, v12, v13, v14, (uint64_t)&v202);
    v25 = v202;
    if (v202 != -1)
    {
      v26 = HIDWORD(v205);
      if (HIDWORD(v205) == (_DWORD)v205)
      {
        v27 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v205) + 1), (unint64_t)&v202, v20, v21, v22, v23, v24);
        v29 = *v27;
        v28 = (uint64_t *)(v27 + 1);
        v25 = v29;
        v26 = HIDWORD(v205);
      }
      else
      {
        v28 = &v203;
      }
      v32 = (char *)p_dst + 12 * v26;
      *(_DWORD *)v32 = v25;
      *(_QWORD *)(v32 + 4) = *v28;
      ++HIDWORD(v205);
    }
    if (!v232)
    {
      __break(0xC471u);
      goto LABEL_173;
    }
    v240[52] &= ~v243;
    v33 = v241 & 0x1F | 0x38405000;
    v34 = i;
    if (i + 4 > v229)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, v18, v19, v20, v21, v22, v23, v24);
      v34 = i;
    }
    *(_DWORD *)&v227[v34] = v33;
    i += 4;
    JSC::MacroAssemblerARM64::branch32((uint64_t)v222, 1, 17, 26, v21, v22, v23, v24, (uint64_t)&v200);
    v43 = v200;
    if (v200 != -1)
    {
      v44 = HIDWORD(v205);
      if (HIDWORD(v205) == (_DWORD)v205)
      {
        v45 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v205) + 1), (unint64_t)&v200, v37, v38, v39, v40, v41);
        v47 = *v45;
        v46 = v45 + 1;
        v43 = v47;
        v44 = HIDWORD(v205);
      }
      else
      {
        v46 = &v201;
      }
      v48 = (char *)p_dst + 12 * v44;
      *(_DWORD *)v48 = v43;
      *(_QWORD *)(v48 + 4) = *(_QWORD *)v46;
      ++HIDWORD(v205);
    }
    v49 = i;
    if (i + 4 > v229)
    {
      v42 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, v35, v36, v37, v38, v39, v40, v41).n128_u64[0];
      v49 = i;
    }
    *(_DWORD *)&v227[v49] = -129925116;
    i += 4;
    JSC::MacroAssemblerARM64::branchTest64((uint64_t)v222, 0, 4, 1, v38, v39, v40, v41, (uint64_t)&__dst, v42);
    v57 = i;
    if (i + 4 > v229)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, v50, v51, v52, v53, v54, v55, v56);
      v57 = i;
    }
    *(_DWORD *)&v227[v57] = -129830780;
    i += 4;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&__dst, (uint64_t)v222, v51, v52, v53, v54, v55, v56);
    v31 = 4;
    v30 = i;
  }
  else
  {
    v30 = 0;
    v31 = 0;
  }
  if (v30 + 4 > v229)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
    v30 = i;
  }
  *(_DWORD *)&v227[v30] = -129793979;
  v58 = i;
  v59 = i + 4;
  i += 4;
  if (v58 + 8 > v229)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
    v59 = i;
  }
  *(_DWORD *)&v227[v59] = -1862197083;
  v60 = i + 4;
  for (i = v60; v60 < SHIDWORD(v226); i = v60)
  {
    if (v60 + 4 > v229)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
      v60 = i;
    }
    *(_DWORD *)&v227[v60] = -721215457;
    v60 = i + 4;
  }
  v231 = 0;
  v61 = v60;
  if (v60 + 4 > v229)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
    v61 = i;
  }
  *(_DWORD *)&v227[v61] = -130023263;
  i += 4;
  JSC::MacroAssemblerARM64::branch64((uint64_t)v222, 0, v31, 1, v11, v12, v13, v14, (uint64_t)v199);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v222, 0, 1, 0xFFFFFFFFLL, v62, v63, v64, v65, (uint64_t)&v197, v66);
  v74 = v197;
  if (v197 != -1)
  {
    v75 = HIDWORD(v205);
    if (HIDWORD(v205) == (_DWORD)v205)
    {
      v76 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v205) + 1), (unint64_t)&v197, v69, v70, v71, v72, v73);
      v78 = *v76;
      v77 = v76 + 1;
      v74 = v78;
      v75 = HIDWORD(v205);
    }
    else
    {
      v77 = &v198;
    }
    v79 = (char *)p_dst + 12 * v75;
    *(_DWORD *)v79 = v74;
    *(_QWORD *)(v79 + 4) = *(_QWORD *)v77;
    ++HIDWORD(v205);
  }
  v80 = i;
  if (i + 4 > v229)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, v67, v68, v69, v70, v71, v72, v73);
    v80 = i;
  }
  *(_DWORD *)&v227[v80] = -1862238043;
  v81 = i + 4;
  for (i = v81; (int)v81 < SHIDWORD(v226); i = v81)
  {
    if (v81 + 4 > v229)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, v67, v68, v69, v70, v71, v72, v73);
      v81 = i;
    }
    *(_DWORD *)&v227[v81] = -721215457;
    v81 = i + 4;
  }
  v82 = v81;
  if (v81 + 4 > v229)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, v67, v68, v69, v70, v71, v72, v73);
    v82 = i;
  }
  *(_DWORD *)&v227[v82] = 335544320;
  i += 4;
  if (v244)
    v83 = 69;
  else
    v83 = 65;
  __dst = (void *)v81;
  LOBYTE(v211) = v83;
  *(_WORD *)((char *)&v211 + 1) = 15;
  BYTE3(v211) = -1;
  v196 = v60;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&__dst, (unsigned int *)&v196, (uint64_t)v222, v69, v70, v71, v72, v73);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v199, (uint64_t)v222, v84, v85, v86, v87, v88, v89);
  if (a3)
  {
    v97 = i;
  }
  else
  {
    if (!v232)
    {
      __break(0xC471u);
      JUMPOUT(0x198810404);
    }
    v236[52] &= ~v239;
    v98 = v237 & 0x1F | 0xB84080A0;
    v99 = i;
    if (i + 4 > v229)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, (uint64_t)v90, v91, v92, v93, v94, v95, v96);
      v99 = i;
    }
    *(_DWORD *)&v227[v99] = v98;
    v100 = i;
    v101 = i + 4;
    i += 4;
    if (v100 + 8 > v229)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, (uint64_t)v90, v91, v92, v93, v94, v95, v96);
      v101 = i;
    }
    *(_DWORD *)&v227[v101] = 285214224;
    v102 = i;
    v103 = i + 4;
    i += 4;
    if (v102 + 8 > v229)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, (uint64_t)v90, v91, v92, v93, v94, v95, v96);
      v103 = i;
    }
    *(_DWORD *)&v227[v103] = -1207926608;
    v97 = i + 4;
    i += 4;
  }
  if (v97 + 4 > v229)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, (uint64_t)v90, v91, v92, v93, v94, v95, v96);
    v97 = i;
  }
  *(_DWORD *)&v227[v97] = -1455352668;
  v104 = i;
  v105 = i + 4;
  i += 4;
  if (v104 + 8 > v229)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, (uint64_t)v90, v91, v92, v93, v94, v95, v96);
    v105 = i;
  }
  *(_DWORD *)&v227[v105] = -134216731;
  v106 = i;
  v107 = i + 4;
  i += 4;
  if (v106 + 8 > v229)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, (uint64_t)v90, v91, v92, v93, v94, v95, v96);
    v107 = i;
  }
  *(_DWORD *)&v227[v107] = -702611328;
  v108 = i + 4;
  i += 4;
  if (HIDWORD(v205))
  {
    v109 = 0;
    v110 = 0;
    v111 = 12 * HIDWORD(v205);
    while (v110 < HIDWORD(v205))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)p_dst + v109), (uint64_t)v222, v91, v92, v93, v94, v95, v96);
      ++v110;
      v109 += 12;
      if (v111 == v109)
      {
        v108 = i;
        goto LABEL_72;
      }
    }
    __break(0xC471u);
LABEL_172:
    __break(1u);
LABEL_173:
    JUMPOUT(0x1988103E4);
  }
LABEL_72:
  if (v108 + 4 > v229)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, (uint64_t)v90, v91, v92, v93, v94, v95, v96);
    v108 = i;
  }
  *(_DWORD *)&v227[v108] = -1447068675;
  v112 = i;
  v113 = i + 4;
  i += 4;
  if (v112 + 8 > v229)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, (uint64_t)v90, v91, v92, v93, v94, v95, v96);
    v113 = i;
  }
  *(_DWORD *)&v227[v113] = -1862269955;
  i += 4;
  __dst = &v212;
  LODWORD(v212) = 16908317;
  v211 = 0x200000002;
  v114 = 2;
  do
  {
    v115 = 0;
    v116 = 0;
    v117 = (char *)__dst;
    v118 = v114;
    do
    {
      if ((*((_BYTE *)__dst + v115 + 1) & 0x40) != 0)
        goto LABEL_172;
      v116 |= 1 << *((_BYTE *)__dst + v115 + 1);
      v115 += 2;
    }
    while (2 * v114 != v115);
    v119 = 0;
    do
    {
      v120 = *((_BYTE *)__dst + v119) & 0x7F;
      if (v120 >= 0x40)
        goto LABEL_172;
      v116 &= ~(1 << v120);
      v119 += 2;
    }
    while (2 * v114 != v119);
    v121 = (uint8x8_t)vcnt_s8((int8x8_t)v116);
    v121.i16[0] = vaddlv_u8(v121);
    v122 = v121.i32[0];
    v123 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v116));
    v123.i16[0] = vaddlv_u8(v123);
    if (v123.i32[0] + v122)
    {
      v124 = 0;
      if (v114 <= 1uLL)
        v125 = 1;
      else
        v125 = v114;
      v126 = 2 * v125;
      while (1)
      {
        v127 = *((unsigned __int8 *)__dst + v124 + 1);
        if ((v127 & 0x7Fu) >= 0x40)
          goto LABEL_172;
        if (((v116 >> (v127 & 0x7F)) & 1) != 0)
          break;
        v124 += 2;
        if (v126 == v124)
          goto LABEL_102;
      }
      v128 = *((unsigned __int8 *)__dst + v124);
      if (v128 == v127)
        goto LABEL_100;
      v129 = (char)v128;
      if ((char)v128 == 63)
      {
        v130 = i;
        v131 = v229;
        if (v127 != 31)
        {
          v133 = v127 & 0x1F | 0xD2800000;
          goto LABEL_97;
        }
      }
      else
      {
        v130 = i;
        v131 = v229;
        v132 = (char)v127 == 31 || v129 == 31;
        if (!v132)
        {
          v133 = v127 & 0xFFE0FFFF | ((v129 & 0x1F) << 16) | 0xAA0003E0;
LABEL_97:
          if (v130 + 4 > v131)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, (uint64_t)v90, v91, v92, v93, v94, v95, v96);
            v130 = i;
          }
          *(_DWORD *)&v227[v130] = v133;
          i += 4;
          v117 = (char *)__dst;
          v118 = HIDWORD(v211);
LABEL_100:
          memmove(&v117[v124], &v117[v124 + 2], 2 * v118 - v124 - 2);
          v114 = HIDWORD(v211) - 1;
          goto LABEL_101;
        }
      }
      v133 = (char)v127 | (32 * v129) | 0x91000000;
      goto LABEL_97;
    }
    v194 = a2;
    v178 = *(_BYTE *)__dst;
    v179 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)v222, *(char *)__dst, v179, v92, v93, v94, v95, v96);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v211) - 2);
    v180 = (HIDWORD(v211) - 1);
    v132 = HIDWORD(v211) == 1;
    HIDWORD(v211) = v180;
    v181 = (unsigned __int8 *)__dst;
    v182 = (char *)__dst + 2 * v180;
    v195 = a1;
    if (v132)
    {
      v189 = 0;
      v190 = 0;
      v185 = 0;
      v90 = (char *)__dst + 2 * v180;
    }
    else
    {
      v183 = 2 * v180;
      v184 = __dst;
      while (*v184 != v179)
      {
        v184 += 2;
        v183 -= 2;
        if (!v183)
          goto LABEL_137;
      }
      *v184 = v178;
LABEL_137:
      v185 = 0;
      v186 = v181;
      v90 = v182;
      v187 = v182;
      do
      {
        if (*v181 == v181[1])
        {
          v188 = v181;
          if (v187 != (char *)__dst + 2 * HIDWORD(v211))
          {
            if (v181 == (unsigned __int8 *)v90)
            {
              v188 = (unsigned __int8 *)v187;
            }
            else
            {
              v193 = v186 - (unsigned __int8 *)v90;
              memmove(v187, v90, v186 - (unsigned __int8 *)v90);
              v188 = (unsigned __int8 *)&v187[v193];
            }
          }
          v90 = (char *)(v181 + 2);
          ++v185;
          v187 = (char *)v188;
        }
        v181 += 2;
        v186 += 2;
      }
      while (v181 < (unsigned __int8 *)v182);
      v181 = (unsigned __int8 *)__dst;
      v189 = HIDWORD(v211);
      v190 = HIDWORD(v211);
      v182 = v187;
    }
    v191 = (char *)&v181[2 * v189];
    a1 = v195;
    if (v90 != v191)
    {
      memmove(v182, v90, v191 - v90);
      v190 = HIDWORD(v211);
    }
    v114 = v190 - v185;
    a2 = v194;
LABEL_101:
    HIDWORD(v211) = v114;
LABEL_102:
    ;
  }
  while (v114);
  v134 = __dst;
  if (&v212 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v211) = 0;
    WTF::fastFree((unint64_t)v134, v90, v91, v92, v93, v94, v95, v96);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v222, (uint64_t)operationPolymorphicCall, 8, v92, v93, v94, v95, v96);
  v231 = 0;
  v142 = i;
  if (i + 4 > v229)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, v135, v136, v137, v138, v139, v140, v141);
    v142 = i;
  }
  *(_DWORD *)&v227[v142] = -700514048;
  v143 = i;
  v144 = i + 4;
  i += 4;
  if (v143 + 8 > v229)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, v135, v136, v137, v138, v139, v140, v141);
    v144 = i;
  }
  *(_DWORD *)&v227[v144] = -1862270017;
  v145 = i;
  v146 = i + 4;
  i += 4;
  if (v145 + 8 > v229)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, v135, v136, v137, v138, v139, v140, v141);
    v146 = i;
  }
  *(_DWORD *)&v227[v146] = -1463714819;
  v147 = i;
  v148 = i + 4;
  i += 4;
  if (v147 + 8 > v229)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v227, v135, v136, v137, v138, v139, v140, v141);
    v148 = i;
  }
  *(_DWORD *)&v227[v148] = -702611456;
  i += 4;
  __dst = 0;
  v211 = 0;
  v212 = -1;
  v213 = v214;
  v215 = 128;
  v149 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v149 != -1)
  {
    v209 = &v207;
    v208 = &v209;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v208, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v150 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v158 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v158)
  {
    v158 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v158, v150);
  }
  v159 = *(_QWORD *)v158;
  if (*(_QWORD *)v158 != v158 + 8)
  {
    v160 = *(_DWORD *)(v158 + 136);
    if (v215 < v160)
    {
      if (v213 && v213 != v214)
      {
        WTF::fastFree((unint64_t)v213, v151, v152, v153, v154, v155, v156, v157);
        v159 = *(_QWORD *)v158;
        v160 = *(_DWORD *)(v158 + 136);
      }
      v213 = (_BYTE *)v159;
      v215 = v160;
      *(_QWORD *)v158 = v158 + 8;
      *(_DWORD *)(v158 + 136) = 128;
    }
  }
  v161 = 1;
  v216 = 1;
  v217 = 0;
  v218 = 6;
  v219 = 0u;
  v220 = 0u;
  v221 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v222, 1, v153, v154, v155, v156, v157);
  BYTE2(v217) = 1;
  if (byte_1ECF4C288)
    goto LABEL_149;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v161 = HIBYTE(word_1ECF4C286) != 0;
LABEL_149:
    if (a2 == 1)
      v192 = "closure";
    else
      v192 = "normal";
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)357,char const*>((uint64_t)&__dst, v161, "PolymorphicCall", 16, "Polymorphic %s thunk", (uint64_t)v192, a1);
    goto LABEL_129;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, "PolymorphicCall", 16, a1);
LABEL_129:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v162, v163, v164, v165, v166, v167, v168);
  v176 = p_dst;
  if (v206 != (_BYTE *)p_dst && p_dst)
  {
    p_dst = 0;
    LODWORD(v205) = 0;
    WTF::fastFree((unint64_t)v176, v169, v170, v171, v172, v173, v174, v175);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v222, v169, v170, v171, v172, v173, v174, v175);
}

uint64_t JSC::nativeForGenerator(_QWORD *a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t v9;
  unint64_t v10;
  pthread_key_t *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x8_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x8_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unint64_t v113;
  pthread_key_t *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF *v123;
  unsigned int v124;
  char v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v171[3];
  char v172;
  char v173;
  char **v174;
  char *v175;
  _QWORD v176[3];
  WTF *v177;
  _BYTE v178[128];
  unsigned int v179;
  char v180;
  int v181;
  int v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  _DWORD v186[6];
  char v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  WTF *v191;
  _BYTE v192[128];
  unsigned int v193;
  unsigned int v194;
  int v195;
  char v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  _DWORD *v200;
  char v201;
  uint64_t v202;
  int v203;
  _DWORD *v204;
  char v205;
  uint64_t v206;
  int v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;

  v212 = *MEMORY[0x1E0C80C00];
  v172 = a4;
  if (a4)
    v9 = 48;
  else
    v9 = 40;
  LOBYTE(v186[0]) = 0;
  v187 = 0;
  v188 = 0;
  v189 = 0;
  v190 = 0x8000000080000000;
  v191 = (WTF *)v192;
  v193 = 128;
  v10 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v10 != -1)
  {
    v176[0] = &v175;
    *(_QWORD *)v171 = v176;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, v171, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v11 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v19 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v19)
  {
    v19 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v19, v11);
  }
  v20 = *(WTF **)v19;
  if (*(_QWORD *)v19 != v19 + 8)
  {
    v21 = *(_DWORD *)(v19 + 136);
    if (v193 < v21)
    {
      if (v191 && v191 != (WTF *)v192)
      {
        WTF::fastFree((unint64_t)v191, v12, v13, v14, v15, v16, v17, v18);
        v20 = *(WTF **)v19;
        v21 = *(_DWORD *)(v19 + 136);
      }
      v191 = v20;
      v193 = v21;
      *(_QWORD *)v19 = v19 + 8;
      *(_DWORD *)(v19 + 136) = 128;
    }
  }
  v196 = 1;
  v194 = 0;
  v195 = 0;
  v197 = 0u;
  v198 = 0u;
  v199 = 0u;
  v200 = v186;
  v201 = 16;
  v202 = 0;
  v203 = 0x10000;
  v204 = v186;
  v205 = 17;
  v206 = 0;
  v207 = 0x20000;
  v208 = 0;
  v210 = 0;
  v209 = 0;
  v211 = a2;
  switch(a5)
  {
    case 0:
      if (v193 <= 3)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v191, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
        v22 = v194;
      }
      else
      {
        v22 = 0;
      }
      *(_DWORD *)((char *)v191 + v22) = -1447068675;
      v23 = v194;
      v24 = v194 + 4;
      v194 += 4;
      v25 = -1862269955;
      if (v23 + 8 <= v193)
        goto LABEL_18;
      goto LABEL_88;
    case 1:
      if (v193 >= 4)
      {
        v24 = 0;
        v25 = -1463716869;
        goto LABEL_18;
      }
      v25 = -1463716869;
LABEL_88:
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v191, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
      v24 = v194;
      goto LABEL_18;
    case 2:
      v25 = -1862270017;
      if (v193 > 3)
      {
        v24 = 0;
LABEL_18:
        *(_DWORD *)((char *)v191 + v24) = v25;
        v26 = v194 + 4;
        v194 += 4;
        goto LABEL_19;
      }
      goto LABEL_88;
  }
  v26 = 0;
LABEL_19:
  if (v26 + 4 > v193)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v191, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v26 = v194;
  }
  *(_DWORD *)((char *)v191 + v26) = -134151233;
  v194 += 4;
  JSC::MacroAssemblerARM64::store64((uint64_t)v186, 29, a2 + 40, v14, v15, v16, v17, v18);
  if (a6)
  {
    JSC::MacroAssemblerARM64::move(v186, 29, 0, v29, v30, v31, v32, v33);
    if (!v196)
    {
      __break(0xC471u);
      JUMPOUT(0x198810FA4);
    }
    v200[52] &= ~v203;
    v148 = v201;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v186, (uint64_t)operationDebuggerWillCallNativeExecutable, v201, v143, v144, v145, v146, v147);
    v195 = 0;
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)&v191, (32 * (v148 & 0x1F)) | 0xD63F0000, v149, v150, v151, v152, v153, v154);
  }
  v35 = v194;
  if (v194 + 4 > v193)
  {
    v34 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v191, v27, v28, v29, v30, v31, v32, v33).n128_u64[0];
    v35 = v194;
  }
  *(_DWORD *)((char *)v191 + v35) = -1440939039;
  v36 = v194;
  v37 = v194 + 4;
  v194 += 4;
  if (v36 + 8 > v193)
  {
    v34 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v191, v27, v28, v29, v30, v31, v32, v33).n128_u64[0];
    v37 = v194;
  }
  *(_DWORD *)((char *)v191 + v37) = -129924190;
  v38 = v194;
  v39 = v194 + 4;
  v194 += 4;
  v40 = v38 + 8;
  if (a3)
  {
    if (v40 > v193)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v191, v27, v28, v29, v30, v31, v32, v33);
      v39 = v194;
    }
    *(_DWORD *)((char *)v191 + v39) = -129859520;
    v194 += 4;
    if (!BYTE1(qword_1ECF4C780))
    {
      if (!v196)
      {
        __break(0xC471u);
        JUMPOUT(0x198810E4CLL);
      }
      if (a4)
        v51 = 0x1800000002;
      else
        v51 = 0x1000000002;
      goto LABEL_36;
    }
    if (a4)
      v160 = 0x1800000002;
    else
      v160 = 0x1000000002;
    JSC::MacroAssemblerARM64::load64((uint64_t)v186, v160, 2, v29, v30, v31, v32, v33);
    if (!v196)
    {
LABEL_100:
      __break(0xC471u);
      JUMPOUT(0x198810E1CLL);
    }
LABEL_97:
    v200[52] &= ~v203;
    v161 = v201;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v186, (uint64_t)vmEntryHostFunction, v201, v155, v156, v157, v158, v159);
    v195 = 0;
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)&v191, (32 * (v161 & 0x1F)) | 0xD63F0000, v162, v163, v164, v165, v166, v167);
    goto LABEL_39;
  }
  if (v40 > v193)
  {
    v34 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v191, v27, v28, v29, v30, v31, v32, v33).n128_u64[0];
    v39 = v194;
  }
  *(_DWORD *)((char *)v191 + v39) = -129957824;
  v41 = v194;
  v42 = v194 + 4;
  v194 += 4;
  if (v41 + 8 > v193)
  {
    v34 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v191, v27, v28, v29, v30, v31, v32, v33).n128_u64[0];
    v42 = v194;
  }
  *(_DWORD *)((char *)v191 + v42) = -129925054;
  v194 += 4;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v186, 0, 2, 1, v30, v31, v32, v33, (uint64_t)v176, v34);
  v50 = v194;
  if (v194 + 4 > v193)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v191, v43, v44, v45, v46, v47, v48, v49);
    v50 = v194;
  }
  *(_DWORD *)((char *)v191 + v50) = -129830846;
  v194 += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v176, (uint64_t)v186, v44, v45, v46, v47, v48, v49);
  if (BYTE1(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::load64((uint64_t)v186, (v9 << 32) | 2, 2, v29, v30, v31, v32, v33);
    if (!v196)
    {
      __break(0xC471u);
      JUMPOUT(0x198810F08);
    }
    goto LABEL_97;
  }
  if (!v196)
    goto LABEL_100;
  v51 = (v9 << 32) | 2;
LABEL_36:
  v200[52] &= ~v203;
  JSC::MacroAssemblerARM64::load64((uint64_t)v186, v51, v201, v29, v30, v31, v32, v33);
  v195 = 0;
  v59 = v194;
  if (v194 + 4 > v193)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v191, v52, v53, v54, v55, v56, v57, v58);
    v59 = v194;
  }
  *(_DWORD *)((char *)v191 + v59) = -700513792;
  v194 += 4;
LABEL_39:
  JSC::MacroAssemblerARM64::load64((uint64_t)v186, a2 + 16, 2, v54, v55, v56, v57, v58);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v186, 1, 2, 0xFFFFFFFFLL, v60, v61, v62, v63, (uint64_t)v171, v64);
  v72 = v194;
  if (v194 + 4 > v193)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v191, v65, v66, v67, v68, v69, v70, v71);
    v72 = v194;
  }
  *(_DWORD *)((char *)v191 + v72) = -1862270017;
  v73 = v194;
  v74 = v194 + 4;
  v194 += 4;
  if (v73 + 8 > v193)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v191, v65, v66, v67, v68, v69, v70, v71);
    v74 = v194;
  }
  *(_DWORD *)((char *)v191 + v74) = -1463714819;
  v75 = v194;
  v76 = v194 + 4;
  v194 += 4;
  if (v75 + 8 > v193)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v191, v65, v66, v67, v68, v69, v70, v71);
    v76 = v194;
  }
  *(_DWORD *)((char *)v191 + v76) = -698416192;
  v194 += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v171, (uint64_t)v186, v66, v67, v68, v69, v70, v71);
  JSC::MacroAssemblerARM64::load64((uint64_t)v186, a2 + 48, 0, v77, v78, v79, v80, v81);
  JSC::AssemblyHelpers::copyCalleeSavesToEntryFrameCalleeSavesBufferImpl((char *)v186, 0);
  JSC::MacroAssemblerARM64::store64((uint64_t)v186, 29, a2 + 40, v82, v83, v84, v85, v86);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v186, a2, 0, v87, v88, v89, v90, v91);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v186, (uint64_t)operationVMHandleException, 3, v92, v93, v94, v95, v96);
  v195 = 0;
  v104 = v194;
  if (v194 + 4 > v193)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v191, v97, v98, v99, v100, v101, v102, v103);
    v104 = v194;
  }
  *(_DWORD *)((char *)v191 + v104) = -700514208;
  v194 += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)v186, a2 + 90488, 1, v99, v100, v101, v102, v103);
  v112 = v194;
  if (v194 + 4 > v193)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v191, v105, v106, v107, v108, v109, v110, v111);
    v112 = v194;
  }
  *(_DWORD *)((char *)v191 + v112) = -702611424;
  v194 += 4;
  v176[0] = 0;
  v176[1] = 0;
  v176[2] = -1;
  v177 = (WTF *)v178;
  v179 = 128;
  v113 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v113 != -1)
  {
    v175 = &v173;
    v174 = &v175;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v174, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v114 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v122 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v122)
  {
    v122 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v122, v114);
  }
  v123 = *(WTF **)v122;
  if (*(_QWORD *)v122 != v122 + 8)
  {
    v124 = *(_DWORD *)(v122 + 136);
    if (v179 < v124)
    {
      if (v177 && v177 != (WTF *)v178)
      {
        WTF::fastFree((unint64_t)v177, v115, v116, v117, v118, v119, v120, v121);
        v123 = *(WTF **)v122;
        v124 = *(_DWORD *)(v122 + 136);
      }
      v177 = v123;
      v179 = v124;
      *(_QWORD *)v122 = v122 + 8;
      *(_DWORD *)(v122 + 136) = 128;
    }
  }
  v125 = 1;
  v180 = 1;
  v181 = 0;
  v182 = 8;
  v183 = 0u;
  v184 = 0u;
  v185 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v176, (uint64_t)v186, 1, v117, v118, v119, v120, v121);
  BYTE2(v181) = 1;
  if (!byte_1ECF4C288)
  {
    if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
    {
      JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v176, "CallTrampoline", 15, a1);
      goto LABEL_62;
    }
    v125 = HIBYTE(word_1ECF4C286) != 0;
  }
  if (a3)
    v141 = "internal";
  else
    v141 = "native";
  WTF::toCString<JSC::CodeSpecializationKind>((uint64_t *)&v175, &v172);
  v142 = v175;
  JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129,char const*,char const*,char const*,char const*>(a1, (uint64_t)v176, v125, (uint64_t)v141);
  if (v142)
  {
    if (*(_DWORD *)v142 == 1)
      WTF::fastFree((unint64_t)v142, v126, v127, v128, v129, v130, v131, v132);
    else
      --*(_DWORD *)v142;
  }
LABEL_62:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v176, v126, v127, v128, v129, v130, v131, v132);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v186, v133, v134, v135, v136, v137, v138, v139);
}

uint64_t JSC::nativeCallWithDebuggerHookGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  return JSC::nativeForGenerator(a2, (uint64_t)this, 0, 0, 0, 1);
}

uint64_t JSC::nativeConstructWithDebuggerHookGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  return JSC::nativeForGenerator(a2, (uint64_t)this, 0, 1, 0, 1);
}

uint64_t JSC::arityFixupGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int8x8_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int8x8_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int j;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  unint64_t v110;
  pthread_key_t *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  unsigned int v121;
  char v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v138;
  int v139;
  unsigned int v140[3];
  unsigned int v141[3];
  char v142;
  char **v143;
  char *v144;
  _QWORD v145[3];
  WTF *v146;
  _BYTE v147[128];
  unsigned int v148;
  char v149;
  int v150;
  int v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  _DWORD v155[6];
  char v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  _BYTE *v160;
  _BYTE v161[128];
  unsigned int v162;
  int i;
  int v164;
  char v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  _DWORD *v169;
  char v170;
  uint64_t v171;
  int v172;
  _DWORD *v173;
  char v174;
  uint64_t v175;
  int v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  JSC *v180;
  uint64_t v181;

  v181 = *MEMORY[0x1E0C80C00];
  LOBYTE(v155[0]) = 0;
  v156 = 0;
  v157 = 0;
  v158 = 0;
  v159 = 0x8000000080000000;
  v160 = v161;
  v162 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v145[0] = v140;
    *(_QWORD *)v141 = v145;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, v141, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v162;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v162 < v17)
    {
      if (v160 && v160 != v161)
      {
        WTF::fastFree((unint64_t)v160, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v160 = (_BYTE *)v15;
      v162 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v162;
    }
  }
  v18 = 0;
  v165 = 1;
  v170 = 16;
  v172 = 0x10000;
  v174 = 17;
  v176 = 0x20000;
  i = 0;
  v164 = 0;
  v19 = 0;
  v166 = 0u;
  v167 = 0u;
  v168 = 0u;
  v169 = v155;
  v171 = 0;
  v173 = v155;
  v175 = 0;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  v180 = this;
  if (v16 <= 3)
  {
    v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v160, (uint64_t)v7, v8, v9, v10, v11, v12, v13).n128_u64[0];
    v18 = i;
  }
  *(_DWORD *)&v160[v18] = -1440939037;
  v20 = i;
  v21 = i + 4;
  i += 4;
  if (v20 + 8 > v162)
  {
    v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v160, (uint64_t)v7, v8, v9, v10, v11, v12, v13).n128_u64[0];
    v21 = i;
  }
  *(_DWORD *)&v160[v21] = -1203633246;
  v22 = i;
  v23 = i + 4;
  i += 4;
  if (v22 + 8 > v162)
  {
    v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v160, (uint64_t)v7, v8, v9, v10, v11, v12, v13).n128_u64[0];
    v23 = i;
  }
  *(_DWORD *)&v160[v23] = 285217858;
  i += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, (uint64_t)v155, 0, 0, v10, v11, v12, v13, (uint64_t)v141, v19);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v155, 10, 5, v24, v25, v26, v27, v28);
  JSC::MacroAssemblerARM64::store64((uint64_t)v155, 5, 0x30000021DuLL, 0x200000000uLL, v29, v30, v31, v32);
  v40 = i;
  if (i + 4 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v160, v33, v34, v35, v36, v37, v38, v39);
    v40 = i;
  }
  *(_DWORD *)&v160[v40] = 285213762;
  i += 4;
  JSC::MacroAssemblerARM64::and32((uint64_t)v155, (JSC::ARM64LogicalImmediate *)0xFFFFFFFELL, 0, 0);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)v155, 0, 0, v41, v42, v43, v44, (uint64_t)v140, v45);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v141, (uint64_t)v155, v46, v47, v48, v49, v50, v51);
  v59 = i;
  if (i + 4 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v160, v52, v53, v54, v55, v56, v57, v58);
    v59 = i;
  }
  *(_DWORD *)&v160[v59] = -889191456;
  v60 = i;
  v61 = i + 4;
  i += 4;
  if (v60 + 8 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v160, v52, v53, v54, v55, v56, v57, v58);
    v61 = i;
  }
  *(_DWORD *)&v160[v61] = -746721275;
  v62 = i;
  v63 = i + 4;
  i += 4;
  if (v62 + 8 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v160, v52, v53, v54, v55, v56, v57, v58);
    v63 = i;
  }
  *(_DWORD *)&v160[v63] = -1962605635;
  v64 = i;
  v65 = i + 4;
  i += 4;
  if (v64 + 8 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v160, v52, v53, v54, v55, v56, v57, v58);
    v65 = i;
  }
  *(_DWORD *)&v160[v65] = -1960483841;
  v66 = i;
  v67 = i + 4;
  i += 4;
  if (v66 + 8 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v160, v52, v53, v54, v55, v56, v57, v58);
    v67 = i;
  }
  *(_DWORD *)&v160[v67] = -1962737499;
  v68 = i + 4;
  for (i = v68; v68 < SHIDWORD(v159); i = v68)
  {
    if (v68 + 4 > v162)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v160, v52, v53, v54, v55, v56, v57, v58);
      v68 = i;
    }
    *(_DWORD *)&v160[v68] = -721215457;
    v68 = i + 4;
  }
  v164 = 0;
  v69 = v68;
  if (v68 + 4 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v160, v52, v53, v54, v55, v56, v57, v58);
    v69 = i;
  }
  *(_DWORD *)&v160[v69] = -1463740319;
  v70 = i;
  v71 = i + 4;
  i += 4;
  if (v70 + 8 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v160, v52, v53, v54, v55, v56, v57, v58);
    v71 = i;
  }
  *(_DWORD *)&v160[v71] = -1467934559;
  i += 4;
  JSC::MacroAssemblerARM64::branchSub32((uint64_t)v155, 1, 2, 2, 2, v56, v57, v58, (uint64_t)v145);
  v139 = v68;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v145, (unsigned int *)&v139, (uint64_t)v155, v72, v73, v74, v75, v76);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v155, 10, 1, v77, v78, v79, v80, v81);
  for (j = i; j < SHIDWORD(v159); i = j)
  {
    if (j + 4 > v162)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v160, v82, v83, v84, v85, v86, v87, v88);
      j = i;
    }
    *(_DWORD *)&v160[j] = -721215457;
    j = i + 4;
  }
  v164 = 0;
  v90 = j;
  if (j + 4 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v160, v82, v83, v84, v85, v86, v87, v88);
    v90 = i;
  }
  *(_DWORD *)&v160[v90] = -1467939679;
  i += 4;
  JSC::MacroAssemblerARM64::branchAdd32((uint64_t)v155, 1, 0, 2, 0, v86, v87, v88, (uint64_t)v145);
  v138 = j;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v145, (unsigned int *)&v138, (uint64_t)v155, v91, v92, v93, v94, v95);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v140, (uint64_t)v155, v96, v97, v98, v99, v100, v101);
  v109 = i;
  if (i + 4 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v160, v102, v103, v104, v105, v106, v107, v108);
    v109 = i;
  }
  *(_DWORD *)&v160[v109] = -698416192;
  i += 4;
  v145[0] = 0;
  v145[1] = 0;
  v145[2] = -1;
  v146 = (WTF *)v147;
  v148 = 128;
  v110 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v110 != -1)
  {
    v144 = &v142;
    v143 = &v144;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v143, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v111 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v119 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v119)
  {
    v119 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v119, v111);
  }
  v120 = *(WTF **)v119;
  if (*(_QWORD *)v119 != v119 + 8)
  {
    v121 = *(_DWORD *)(v119 + 136);
    if (v148 < v121)
    {
      if (v146 && v146 != (WTF *)v147)
      {
        WTF::fastFree((unint64_t)v146, v112, v113, v114, v115, v116, v117, v118);
        v120 = *(WTF **)v119;
        v121 = *(_DWORD *)(v119 + 136);
      }
      v146 = v120;
      v148 = v121;
      *(_QWORD *)v119 = v119 + 8;
      *(_DWORD *)(v119 + 136) = 128;
    }
  }
  v122 = 1;
  v149 = 1;
  v150 = 0;
  v151 = 8;
  v152 = 0u;
  v153 = 0u;
  v154 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v145, (uint64_t)v155, 1, v114, v115, v116, v117, v118);
  BYTE2(v150) = 1;
  if (byte_1ECF4C288)
    goto LABEL_54;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v122 = HIBYTE(word_1ECF4C286) != 0;
LABEL_54:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v145, v122, "arityFixup", 11, "fixup arity", a2);
    goto LABEL_52;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v145, "arityFixup", 11, a2);
LABEL_52:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v145, v123, v124, v125, v126, v127, v128, v129);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v155, v130, v131, v132, v133, v134, v135, v136);
}

uint64_t JSC::charCodeAtThunkGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD v49[90];
  WTF *v50;
  int v51;
  uint64_t v52;
  WTF *v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v49, this, 1);
  JSC::stringCharLoad((uint64_t)v49, v5, v6, v7, v8, v9, v10, v11);
  JSC::SpecializedThunkJIT::returnInt32(v49, 0, v12, v13, v14, v15, v16, v17);
  v25 = *((_QWORD *)this + 11305);
  v27 = *(_QWORD *)(v25 + 88);
  v26 = *(unsigned int **)(v25 + 96);
  if (v26)
  {
    do
      v28 = __ldaxr(v26);
    while (__stlxr(v28 + 1, v26));
    do
    {
      v29 = __ldaxr(v26);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v26));
    if (!v30)
    {
      atomic_store(1u, v26);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v26, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
  }
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v49, v27, "charCodeAt", v21, v22, v23, v24);
  v38 = v53;
  if (v53)
  {
    v53 = 0;
    v54 = 0;
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  }
  v39 = v50;
  if (&v52 != (uint64_t *)v50 && v50)
  {
    v50 = 0;
    v51 = 0;
    WTF::fastFree((unint64_t)v39, v31, v32, v33, v34, v35, v36, v37);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v49, v31, v32, v33, v34, v35, v36, v37);
}

void JSC::stringCharLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x8_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  _QWORD *v30;
  _DWORD *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  unint64_t *v51;
  _DWORD *v52;
  int8x8_t v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  _DWORD *v63;
  uint64_t *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int i;
  unsigned int v75;
  char v76;
  int *v77;
  int *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v96;
  int v97;
  int v98;
  char v99;
  __int16 v100;
  char v101;
  int v102;
  uint64_t v103;
  __int128 v104;
  _BYTE v105[24];
  __int128 v106;
  _BYTE v107[24];

  JSC::SpecializedThunkJIT::loadJSStringArgument(a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_DWORD *)(a1 + 200);
  if (v17 + 4 > *(_DWORD *)(a1 + 192))
  {
    v16 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v9, v10, v11, v12, v13, v14, v15).n128_u64[0];
    v17 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = -129990656;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 0, 1, v12, v13, v14, v15, (uint64_t)&v104, v16);
  v25 = (_QWORD *)(a1 + 360);
  LODWORD(v106) = v104;
  v26 = *(_QWORD *)((char *)&v104 + 4);
  *(_QWORD *)((char *)&v106 + 4) = *(_QWORD *)((char *)&v104 + 4);
  if ((_DWORD)v104 != -1)
  {
    v27 = *(unsigned int *)(a1 + 372);
    if ((_DWORD)v27 == *(_DWORD *)(a1 + 368))
    {
      v28 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 360, (void *)(v27 + 1), (unint64_t)&v106, v20, v21, v22, v23, v24);
      v29 = (_DWORD *)(*(_QWORD *)(a1 + 360) + 12 * *(unsigned int *)(a1 + 372));
      *v29 = *(_DWORD *)v28;
      v30 = v29 + 1;
      v26 = *(_QWORD *)(v28 + 4);
    }
    else
    {
      v31 = (_DWORD *)(*v25 + 12 * v27);
      *v31 = v104;
      v30 = v31 + 1;
    }
    *v30 = v26;
    ++*(_DWORD *)(a1 + 372);
  }
  v32 = *(_DWORD *)(a1 + 200);
  if (v32 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v18, v19, v20, v21, v22, v23, v24);
    v32 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v32) = -1203748862;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::SpecializedThunkJIT::loadInt32Argument(a1, 1, v19, v20, v21, v22, v23, v24);
  v40 = *(_DWORD *)(a1 + 200);
  if (v40 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v33, v34, v35, v36, v37, v38, v39);
    v40 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v40) = 1795293247;
  v41 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v41;
  if (*(_BYTE *)(a1 + 328))
  {
    while ((signed int)v41 < *(_DWORD *)(a1 + 52))
    {
      if (v41 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v33, v34, v35, v36, v37, v38, v39);
        v41 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v41) = -721215457;
      v41 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v41;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  if (v41 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v33, v34, v35, v36, v37, v38, v39);
    v41 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v41) = 1409286146;
  v42 = *(_DWORD *)(a1 + 200);
  v43 = v42 + 4;
  *(_DWORD *)(a1 + 200) = v42 + 4;
  v44 = v42 + 8;
  v45 = v42 + 4;
  if (v44 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v33, v34, v35, v36, v37, v38, v39);
    v45 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v45) = -721215457;
  v46 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v46;
  v47 = 0xFF00028600000000;
  if (!*(_BYTE *)(a1 + 328))
    v47 = 0xFF00028200000000;
  LODWORD(v106) = v43;
  *(_QWORD *)((char *)&v106 + 4) = v47;
  if (v43 != -1)
  {
    v48 = *(unsigned int *)(a1 + 372);
    if ((_DWORD)v48 == *(_DWORD *)(a1 + 368))
    {
      v49 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 360, (void *)(v48 + 1), (unint64_t)&v106, v35, v36, v37, v38, v39);
      v50 = (_DWORD *)(*(_QWORD *)(a1 + 360) + 12 * *(unsigned int *)(a1 + 372));
      *v50 = *(_DWORD *)v49;
      v51 = (unint64_t *)(v50 + 1);
      v47 = *(_QWORD *)(v49 + 4);
    }
    else
    {
      v52 = (_DWORD *)(*v25 + 12 * v48);
      *v52 = v43;
      v51 = (unint64_t *)(v52 + 1);
    }
    *v51 = v47;
    ++*(_DWORD *)(a1 + 372);
    v46 = *(_DWORD *)(a1 + 200);
  }
  *(_QWORD *)&v106 = v107;
  v53 = (int8x8_t)2;
  *((_QWORD *)&v106 + 1) = 2;
  *(_QWORD *)&v104 = v105;
  *((_QWORD *)&v104 + 1) = 2;
  if (v46 + 4 > *(_DWORD *)(a1 + 192))
  {
    v53 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v33, v34, v35, v36, v37, v38, v39).n128_u64[0];
    v46 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v46) = -1203699710;
  v54 = *(_DWORD *)(a1 + 200);
  v55 = v54 + 4;
  *(_DWORD *)(a1 + 200) = v54 + 4;
  if ((v54 + 8) > *(_DWORD *)(a1 + 192))
  {
    v53 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v33, v34, v35, v36, v37, v38, v39).n128_u64[0];
    v55 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v55) = -129990656;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)4, a1, 0, 2, v36, v37, v38, v39, (uint64_t)&v102, v53);
  v61 = v102;
  if (v102 != -1)
  {
    v62 = HIDWORD(v106);
    if (HIDWORD(v106) == DWORD2(v106))
    {
      v63 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v106, (void *)(HIDWORD(v106) + 1), (unint64_t)&v102, v56, v57, v58, v59, v60);
      v65 = *v63;
      v64 = (uint64_t *)(v63 + 1);
      v61 = v65;
      v62 = HIDWORD(v106);
    }
    else
    {
      v64 = &v103;
    }
    v66 = v106 + 12 * v62;
    *(_DWORD *)v66 = v61;
    *(_QWORD *)(v66 + 4) = *v64;
    ++HIDWORD(v106);
  }
  JSC::MacroAssemblerARM64::load8(a1, 0x100uLL, 0x200000000uLL, 0, v57, v58, v59, v60);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v67, v68, v69, v70, v71, v72, v73);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v75 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v67, v68, v69, v70, v71, v72, v73);
    v75 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v75) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v76 = 69;
  else
    v76 = 65;
  v97 = i;
  v98 = 0;
  v99 = v76;
  v100 = 15;
  v101 = -1;
  if (i != -1)
  {
    if (HIDWORD(v104) == DWORD2(v104))
    {
      v77 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v104, (void *)(HIDWORD(v104) + 1), (unint64_t)&v97, v69, v70, v71, v72, v73);
      v79 = *v77;
      v78 = v77 + 1;
      v80 = v104 + 12 * HIDWORD(v104);
      *(_DWORD *)v80 = v79;
    }
    else
    {
      v78 = &v98;
      v80 = v104 + 12 * HIDWORD(v104);
      *(_DWORD *)v80 = i;
    }
    *(_QWORD *)(v80 + 4) = *(_QWORD *)v78;
    ++HIDWORD(v104);
  }
  if (HIDWORD(v106))
  {
    v81 = 0;
    v82 = 0;
    v83 = 12 * HIDWORD(v106);
    do
    {
      if (v82 >= HIDWORD(v106))
      {
        __break(0xC471u);
        JUMPOUT(0x198811EF4);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v106 + v81), a1, v68, v69, v70, v71, v72, v73);
      ++v82;
      v81 += 12;
    }
    while (v83 != v81);
  }
  JSC::MacroAssemblerARM64::load16(a1, 0x100000100uLL, 0x200000000uLL, 0, v70, v71, v72, v73);
  if (HIDWORD(v104))
  {
    v91 = 0;
    v92 = 0;
    v93 = 12 * HIDWORD(v104);
    do
    {
      if (v92 >= HIDWORD(v104))
      {
        __break(0xC471u);
        JUMPOUT(0x198811EFCLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v104 + v91), a1, v85, v86, v87, v88, v89, v90);
      ++v92;
      v91 += 12;
    }
    while (v93 != v91);
  }
  v94 = v104;
  if (v105 != (_BYTE *)v104 && (_QWORD)v104 != 0)
  {
    *(_QWORD *)&v104 = 0;
    DWORD2(v104) = 0;
    WTF::fastFree(v94, v84, v85, v86, v87, v88, v89, v90);
  }
  v96 = v106;
  if (v107 != (_BYTE *)v106)
  {
    if ((_QWORD)v106)
    {
      *(_QWORD *)&v106 = 0;
      DWORD2(v106) = 0;
      WTF::fastFree(v96, v84, v85, v86, v87, v88, v89, v90);
    }
  }
}

void JSC::SpecializedThunkJIT::returnInt32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;

  if ((_DWORD)a2)
  {
    v18 = ((a2 & 0x1F) << 16) | 0xAA0003E0;
    v19 = a1[50];
    if (v19 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v19 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v19) = v18;
    v9 = a1[50] + 4;
    a1[50] = v9;
  }
  else
  {
    v9 = a1[50];
  }
  if (v9 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v9 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v9) = -1441071104;
  v10 = a1[50];
  v11 = v10 + 4;
  a1[50] = v10 + 4;
  if ((v10 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = -1463716869;
  v12 = a1[50];
  v13 = v12 + 4;
  a1[50] = v12 + 4;
  if ((v12 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = -1862270017;
  v14 = a1[50];
  v15 = v14 + 4;
  a1[50] = v14 + 4;
  if ((v14 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v15 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v15) = -1463714819;
  v16 = a1[50];
  v17 = v16 + 4;
  a1[50] = v16 + 4;
  if ((v16 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v17 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v17) = -698416192;
  a1[50] += 4;
}

void JSC::SpecializedThunkJIT::finalize(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int *v13;
  uint64_t v14;
  unint64_t v15;
  pthread_key_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  BOOL v36;
  size_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  char v46;
  char **v47;
  char *v48;
  _QWORD v49[3];
  WTF *v50;
  _BYTE v51[128];
  unsigned int v52;
  char v53;
  int v54;
  int v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v11 = *(unsigned int *)(a2 + 372);
  if ((_DWORD)v11)
  {
    v13 = *(unsigned int **)(a2 + 360);
    v14 = 12 * v11;
    do
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26129>(v13, a3, a2, (uint64_t)a4, a5, a6, a7, a8);
      v13 += 3;
      v14 -= 12;
    }
    while (v14);
  }
  v49[0] = 0;
  v49[1] = 0;
  v49[2] = -1;
  v50 = (WTF *)v51;
  v52 = 128;
  v15 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v15 != -1)
  {
    v48 = &v46;
    v47 = &v48;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v47, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v16 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v24 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v24)
  {
    v24 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v24, v16);
  }
  v25 = *(WTF **)v24;
  if (*(_QWORD *)v24 != v24 + 8)
  {
    v26 = *(_DWORD *)(v24 + 136);
    if (v52 < v26)
    {
      if (v50 && v50 != (WTF *)v51)
      {
        WTF::fastFree((unint64_t)v50, v17, v18, v19, v20, v21, v22, v23);
        v25 = *(WTF **)v24;
        v26 = *(_DWORD *)(v24 + 136);
      }
      v50 = v25;
      v52 = v26;
      *(_QWORD *)v24 = v24 + 8;
      *(_DWORD *)(v24 + 136) = 128;
    }
  }
  v27 = 1;
  v53 = 1;
  v54 = 0;
  v55 = 8;
  v56 = 0u;
  v57 = 0u;
  v58 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v49, a2, 1, v19, v20, v21, v22, v23);
  if (*(_DWORD *)(a2 + 412))
  {
    v28 = 0;
    v29 = 0;
    do
    {
      v30 = *(_QWORD *)(a2 + 400) + v28;
      v31 = *(_DWORD *)v30;
      if (*(int *)v30 < 4)
        v32 = 0;
      else
        v32 = *(_DWORD *)((char *)v50 + (v31 & 0xFFFFFFFC) - 4);
      v33 = *(_DWORD *)(v30 + 4);
      v34 = *(_QWORD *)(v30 + 8);
      v35 = v31 - v32;
      if ((v33 & 2) != 0)
      {
        if ((v33 & 4) != 0)
        {
          LODWORD(v48) = v35;
          JSC::ARM64Assembler::linkJump((JSC::ExecutableAllocator *)v56, (unsigned int *)&v48, v34);
        }
        else
        {
          JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>((JSC::ExecutableAllocator *)(v56 + v35 - 4), v56 + v35 - 4, v34);
        }
      }
      else
      {
        LODWORD(v48) = v35 - 16;
        JSC::ARM64Assembler::linkPointer(v56, (unsigned int *)&v48, v34);
      }
      ++v29;
      v28 += 16;
    }
    while (v29 < *(unsigned int *)(a2 + 412));
  }
  BYTE2(v54) = 1;
  if (byte_1ECF4C288)
    goto LABEL_34;
  if (HIBYTE(word_1ECF4C286))
    v36 = 0;
  else
    v36 = byte_1ECF4C289 == 0;
  if (!v36)
  {
    v27 = HIBYTE(word_1ECF4C286) != 0;
LABEL_34:
    v45 = strlen(a4);
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)357,char const*>((uint64_t)v49, v27, a4, v45 + 1, "Specialized thunk for %s", (uint64_t)a4, a1);
    goto LABEL_33;
  }
  v37 = strlen(a4);
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v49, a4, v37 + 1, a1);
LABEL_33:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v49, v38, v39, v40, v41, v42, v43, v44);
}

void JSC::SpecializedThunkJIT::~SpecializedThunkJIT(JSC::SpecializedThunkJIT *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  JSC::SpecializedThunkJIT *v10;

  v9 = *((_QWORD *)this + 50);
  if (v9)
  {
    *((_QWORD *)this + 50) = 0;
    *((_DWORD *)this + 102) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = (JSC::SpecializedThunkJIT *)*((_QWORD *)this + 45);
  if ((JSC::SpecializedThunkJIT *)((char *)this + 376) != v10 && v10 != 0)
  {
    *((_QWORD *)this + 45) = 0;
    *((_DWORD *)this + 92) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::charAtThunkGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD v56[90];
  WTF *v57;
  int v58;
  uint64_t v59;
  WTF *v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v56, this, 1);
  JSC::stringCharLoad((uint64_t)v56, v5, v6, v7, v8, v9, v10, v11);
  JSC::charToString((uint64_t)v56, (uint64_t)this, v12, v13, v14, v15, v16, v17);
  JSC::SpecializedThunkJIT::returnJSCell(v56, v18, v19, v20, v21, v22, v23, v24);
  v32 = *((_QWORD *)this + 11305);
  v34 = *(_QWORD *)(v32 + 88);
  v33 = *(unsigned int **)(v32 + 96);
  if (v33)
  {
    do
      v35 = __ldaxr(v33);
    while (__stlxr(v35 + 1, v33));
    do
    {
      v36 = __ldaxr(v33);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v33));
    if (!v37)
    {
      atomic_store(1u, v33);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v33, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    }
  }
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v56, v34, "charAt", v28, v29, v30, v31);
  v45 = v60;
  if (v60)
  {
    v60 = 0;
    v61 = 0;
    WTF::fastFree((unint64_t)v45, v38, v39, v40, v41, v42, v43, v44);
  }
  v46 = v57;
  if (&v59 != (uint64_t *)v57 && v57)
  {
    v57 = 0;
    v58 = 0;
    WTF::fastFree((unint64_t)v46, v38, v39, v40, v41, v42, v43, v44);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v56, v38, v39, v40, v41, v42, v43, v44);
}

void JSC::charToString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _QWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  _QWORD *v40;
  _DWORD *v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;

  JSC::MacroAssemblerARM64::branch32(a1, 8, 0, 255, a5, a6, a7, a8, (uint64_t)&v42);
  v15 = (_QWORD *)(a1 + 360);
  v44 = v42;
  v16 = v43;
  v45 = v43;
  if (v42 != -1)
  {
    v17 = *(unsigned int *)(a1 + 372);
    if ((_DWORD)v17 == *(_DWORD *)(a1 + 368))
    {
      v18 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 360, (void *)(v17 + 1), (unint64_t)&v44, v10, v11, v12, v13, v14);
      v19 = (_DWORD *)(*(_QWORD *)(a1 + 360) + 12 * *(unsigned int *)(a1 + 372));
      *v19 = *(_DWORD *)v18;
      v20 = v19 + 1;
      v16 = *(_QWORD *)(v18 + 4);
    }
    else
    {
      v21 = (_DWORD *)(*v15 + 12 * v17);
      *v21 = v42;
      v20 = v21 + 1;
    }
    *v20 = v16;
    ++*(_DWORD *)(a1 + 372);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 + 42216, 1, v10, v11, v12, v13, v14);
  JSC::MacroAssemblerARM64::load64(a1, 0x300000001uLL, 0x200000000uLL, 0, v22, v23, v24, v25);
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, 0, 0xFFFFFFFFLL, v26, v27, v28, v29, (uint64_t)&v42, v30);
  v44 = v42;
  v36 = v43;
  v45 = v43;
  if (v42 != -1)
  {
    v37 = *(unsigned int *)(a1 + 372);
    if ((_DWORD)v37 == *(_DWORD *)(a1 + 368))
    {
      v38 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 360, (void *)(v37 + 1), (unint64_t)&v44, v31, v32, v33, v34, v35);
      v39 = (_DWORD *)(*(_QWORD *)(a1 + 360) + 12 * *(unsigned int *)(a1 + 372));
      *v39 = *(_DWORD *)v38;
      v40 = v39 + 1;
      v36 = *(_QWORD *)(v38 + 4);
    }
    else
    {
      v41 = (_DWORD *)(*v15 + 12 * v37);
      *v41 = v42;
      v40 = v41 + 1;
    }
    *v40 = v36;
    ++*(_DWORD *)(a1 + 372);
  }
}

void JSC::SpecializedThunkJIT::returnJSCell(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v9 = (JSC::AssemblerBuffer *)(a1 + 14);
  v10 = a1[50];
  if (v10 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v10) = -1463716869;
  v11 = a1[50];
  v12 = v11 + 4;
  a1[50] = v11 + 4;
  if ((v11 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v9, a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = -1862270017;
  v13 = a1[50];
  v14 = v13 + 4;
  a1[50] = v13 + 4;
  if ((v13 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v9, a2, a3, a4, a5, a6, a7, a8);
    v14 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v14) = -1463714819;
  v15 = a1[50];
  v16 = v15 + 4;
  a1[50] = v15 + 4;
  if ((v15 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v9, a2, a3, a4, a5, a6, a7, a8);
    v16 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v16) = -698416192;
  a1[50] += 4;
}

uint64_t JSC::fromCharCodeThunkGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD v55[90];
  WTF *v56;
  int v57;
  uint64_t v58;
  WTF *v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v55, this, 1);
  JSC::SpecializedThunkJIT::loadInt32Argument((uint64_t)v55, 0, v5, v6, v7, v8, v9, v10);
  JSC::charToString((uint64_t)v55, (uint64_t)this, v11, v12, v13, v14, v15, v16);
  JSC::SpecializedThunkJIT::returnJSCell(v55, v17, v18, v19, v20, v21, v22, v23);
  v31 = *((_QWORD *)this + 11305);
  v33 = *(_QWORD *)(v31 + 88);
  v32 = *(unsigned int **)(v31 + 96);
  if (v32)
  {
    do
      v34 = __ldaxr(v32);
    while (__stlxr(v34 + 1, v32));
    do
    {
      v35 = __ldaxr(v32);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v32));
    if (!v36)
    {
      atomic_store(1u, v32);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v32, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
  }
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v55, v33, "fromCharCode", v27, v28, v29, v30);
  v44 = v59;
  if (v59)
  {
    v59 = 0;
    v60 = 0;
    WTF::fastFree((unint64_t)v44, v37, v38, v39, v40, v41, v42, v43);
  }
  v45 = v56;
  if (&v58 != (uint64_t *)v56 && v56)
  {
    v56 = 0;
    v57 = 0;
    WTF::fastFree((unint64_t)v45, v37, v38, v39, v40, v41, v42, v43);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v55, v37, v38, v39, v40, v41, v42, v43);
}

void JSC::SpecializedThunkJIT::loadInt32Argument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  _QWORD *v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v10 = a2 & 0x1F | 0xF84303A0;
  v11 = *(_DWORD *)(a1 + 200);
  if (v11 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v11 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v11) = v10;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch64(a1, 3, a2, 27, a5, a6, a7, a8, (uint64_t)&v26);
  JSC::MacroAssemblerARM64::and64(a1, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a2, a2);
  v17 = v27;
  v24 = v26;
  v25 = v27;
  if (v26 != -1)
  {
    v18 = (_QWORD *)(a1 + 360);
    v19 = *(unsigned int *)(a1 + 372);
    if ((_DWORD)v19 == *(_DWORD *)(a1 + 368))
    {
      v20 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, (void *)(v19 + 1), (unint64_t)&v24, v12, v13, v14, v15, v16);
      v21 = (_DWORD *)(*(_QWORD *)(a1 + 360) + 12 * *(unsigned int *)(a1 + 372));
      *v21 = *(_DWORD *)v20;
      v22 = v21 + 1;
      v17 = *(_QWORD *)(v20 + 4);
    }
    else
    {
      v23 = (_DWORD *)(*v18 + 12 * v19);
      *v23 = v26;
      v22 = v23 + 1;
    }
    *v22 = v17;
    ++*(_DWORD *)(a1 + 372);
  }
}

void JSC::globalIsNaNThunkGenerator(JSC::JITThunks **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _DWORD v51[104];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v51, (JSC::VM *)this, 1);
  JSC::MacroAssemblerARM64::load64((uint64_t)v51, 0x300000001DLL, 0, v5, v6, v7, v8, v9);
  JSC::MacroAssemblerARM64::branch64((uint64_t)v51, 3, 0, 27, v10, v11, v12, v13, (uint64_t)&v49);
  JSC::SpecializedThunkJIT::appendFailure((unint64_t)v51, v49, v50, v14, v15, v16, v17, v18);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v51, 6, 0, v19, v20, v21, v22, v23);
  JSC::SpecializedThunkJIT::returnJSCell(v51, v24, v25, v26, v27, v28, v29, v30);
  v37 = JSC::JITThunks::ctiNativeTailCall(this[11305], (JSC::VM *)this, v31, v32, v33, v34, v35, v36);
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v51, v37, "isNaN", v38, v39, v40, v41);
  JSC::SpecializedThunkJIT::~SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v51, v42, v43, v44, v45, v46, v47, v48);
}

unint64_t JSC::SpecializedThunkJIT::appendFailure(unint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;

  v13 = a2;
  v14 = a3;
  if (a2 != -1)
  {
    v8 = result;
    result += 360;
    v9 = *(unsigned int *)(v8 + 372);
    if ((_DWORD)v9 == *(_DWORD *)(v8 + 368))
    {
      result = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v9 + 1), (unint64_t)&v13, a4, a5, a6, a7, a8);
      v10 = (_DWORD *)(*(_QWORD *)(v8 + 360) + 12 * *(unsigned int *)(v8 + 372));
      *v10 = *(_DWORD *)result;
      v11 = v10 + 1;
      a3 = *(_QWORD *)(result + 4);
    }
    else
    {
      v12 = (_DWORD *)(*(_QWORD *)result + 12 * v9);
      *v12 = a2;
      v11 = v12 + 1;
    }
    *v11 = a3;
    ++*(_DWORD *)(v8 + 372);
  }
  return result;
}

void JSC::numberIsNaNThunkGenerator(JSC::JITThunks **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _DWORD v51[104];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v51, (JSC::VM *)this, 1);
  JSC::MacroAssemblerARM64::load64((uint64_t)v51, 0x300000001DLL, 0, v5, v6, v7, v8, v9);
  JSC::MacroAssemblerARM64::branch64((uint64_t)v51, 3, 0, 27, v10, v11, v12, v13, (uint64_t)&v49);
  JSC::SpecializedThunkJIT::appendFailure((unint64_t)v51, v49, v50, v14, v15, v16, v17, v18);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v51, 6, 0, v19, v20, v21, v22, v23);
  JSC::SpecializedThunkJIT::returnJSCell(v51, v24, v25, v26, v27, v28, v29, v30);
  v37 = JSC::JITThunks::ctiNativeTailCall(this[11305], (JSC::VM *)this, v31, v32, v33, v34, v35, v36);
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v51, v37, "Number.isNaN", v38, v39, v40, v41);
  JSC::SpecializedThunkJIT::~SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v51, v42, v43, v44, v45, v46, v47, v48);
}

uint64_t JSC::stringPrototypeCodePointAtThunkGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x8_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  _QWORD *v31;
  _DWORD *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  unint64_t *v51;
  _DWORD *v52;
  int8x8_t v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int i;
  unsigned int v69;
  char v70;
  int *v71;
  int *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  char v94;
  int *v95;
  int *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  _DWORD *v110;
  uint64_t *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  unsigned int v126;
  int *v127;
  int *v128;
  int v129;
  uint64_t v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int *v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  WTF *v167;
  WTF *v168;
  int v170;
  int v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  int v181;
  int v182;
  uint64_t v183;
  int v184;
  int v185;
  char v186;
  __int16 v187;
  char v188;
  unsigned int v189;
  int v190;
  char v191;
  __int16 v192;
  char v193;
  __int128 v194;
  _BYTE v195[28];
  unsigned int v196;
  uint64_t v197;
  _DWORD v198[13];
  int v199;
  _QWORD v200[17];
  unsigned int v201;
  int v202;
  int v203;
  char v204;
  uint64_t v205;
  char v206;
  int v207;
  uint64_t v208;
  char v209;
  int v210;
  char v211;
  WTF *v212;
  int v213;
  unsigned int v214;
  uint64_t v215;
  WTF *v216;
  int v217;
  uint64_t v218;

  v218 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v198, this, 1);
  JSC::SpecializedThunkJIT::loadJSStringArgument((uint64_t)v198, v5, v6, v7, v8, v9, v10, v11);
  v20 = v202;
  if (v202 + 4 > v201)
  {
    v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v200, v12, v13, v14, v15, v16, v17, v18).n128_u64[0];
    v20 = v202;
  }
  *(_DWORD *)(v200[0] + v20) = -129990656;
  v202 += 4;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v198, 1, 0, 1, v15, v16, v17, v18, (uint64_t)&v196, v19);
  LODWORD(v194) = v196;
  v28 = v197;
  *(_QWORD *)((char *)&v194 + 4) = v197;
  if (v196 != -1)
  {
    if (v214 == v213)
    {
      v29 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v212, (void *)(v214 + 1), (unint64_t)&v194, v23, v24, v25, v26, v27);
      v30 = (_DWORD *)((char *)v212 + 12 * v214);
      *v30 = *(_DWORD *)v29;
      v31 = v30 + 1;
      v28 = *(_QWORD *)(v29 + 4);
    }
    else
    {
      v32 = (_DWORD *)((char *)v212 + 12 * v214);
      *v32 = v196;
      v31 = v32 + 1;
    }
    *v31 = v28;
    ++v214;
  }
  v33 = v202;
  if (v202 + 4 > v201)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v200, v21, v22, v23, v24, v25, v26, v27);
    v33 = v202;
  }
  *(_DWORD *)(v200[0] + v33) = -1203748861;
  v202 += 4;
  JSC::SpecializedThunkJIT::loadInt32Argument((uint64_t)v198, 1, v22, v23, v24, v25, v26, v27);
  v41 = v202;
  if (v202 + 4 > v201)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v200, v34, v35, v36, v37, v38, v39, v40);
    v41 = v202;
  }
  *(_DWORD *)(v200[0] + v41) = 1795358783;
  v42 = v202 + 4;
  v202 += 4;
  if (v211)
  {
    v170 = v199;
    while ((int)v42 < v170)
    {
      if (v42 + 4 > v201)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v200, v34, v35, v36, v37, v38, v39, v40);
        v42 = v202;
      }
      *(_DWORD *)(v200[0] + v42) = -721215457;
      v170 = v199;
      v42 = v202 + 4;
      v202 += 4;
    }
    v203 = 0;
  }
  if (v42 + 4 > v201)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v200, v34, v35, v36, v37, v38, v39, v40);
    v42 = v202;
  }
  *(_DWORD *)(v200[0] + v42) = 1409286146;
  v43 = v202;
  v202 += 4;
  v44 = v202;
  v45 = v43 + 8;
  v46 = v202;
  if (v45 > v201)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v200, v34, v35, v36, v37, v38, v39, v40);
    v46 = v202;
  }
  *(_DWORD *)(v200[0] + v46) = -721215457;
  v47 = v202 + 4;
  v202 += 4;
  v48 = 0xFF00028600000000;
  if (!v211)
    v48 = 0xFF00028200000000;
  LODWORD(v194) = v44;
  *(_QWORD *)((char *)&v194 + 4) = v48;
  if (v44 != -1)
  {
    if (v214 == v213)
    {
      v49 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v212, (void *)(v214 + 1), (unint64_t)&v194, v36, v37, v38, v39, v40);
      v50 = (_DWORD *)((char *)v212 + 12 * v214);
      *v50 = *(_DWORD *)v49;
      v51 = (unint64_t *)(v50 + 1);
      v48 = *(_QWORD *)(v49 + 4);
    }
    else
    {
      v52 = (_DWORD *)((char *)v212 + 12 * v214);
      *v52 = v44;
      v51 = (unint64_t *)(v52 + 1);
    }
    *v51 = v48;
    v47 = v202;
    ++v214;
  }
  *(_QWORD *)&v194 = v195;
  v53 = (int8x8_t)2;
  *((_QWORD *)&v194 + 1) = 2;
  if (v47 + 4 > v201)
  {
    v53 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v200, v34, v35, v36, v37, v38, v39, v40).n128_u64[0];
    v47 = v202;
  }
  *(_DWORD *)(v200[0] + v47) = -129990654;
  v54 = v202;
  v55 = v202 + 4;
  v202 += 4;
  if (!v204)
  {
    __break(0xC471u);
    JUMPOUT(0x1988135BCLL);
  }
  *(_DWORD *)(v208 + 208) &= ~v210;
  v56 = v209 & 0x1F | 0xB8410000;
  if (v54 + 8 > v201)
  {
    v53 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v200, v34, v35, v36, v37, v38, v39, v40).n128_u64[0];
    v55 = v202;
  }
  *(_DWORD *)(v200[0] + v55) = v56;
  v202 += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)4, (uint64_t)v198, 0, 17, v37, v38, v39, v40, (uint64_t)&v196, v53);
  JSC::MacroAssemblerARM64::load8((uint64_t)v198, 0x102uLL, 0x200000000uLL, 0, v57, v58, v59, v60);
  for (i = v202; (int)i < v199; v202 = i)
  {
    if (i + 4 > v201)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v200, v61, v62, v63, v64, v65, v66, v67);
      i = v202;
    }
    *(_DWORD *)(v200[0] + i) = -721215457;
    i = v202 + 4;
  }
  v69 = i;
  if (i + 4 > v201)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v200, v61, v62, v63, v64, v65, v66, v67);
    v69 = v202;
  }
  *(_DWORD *)(v200[0] + v69) = 335544320;
  v202 += 4;
  if (v211)
    v70 = 69;
  else
    v70 = 65;
  v189 = i;
  v190 = 0;
  v191 = v70;
  v192 = 15;
  v193 = -1;
  if (i != -1)
  {
    if (HIDWORD(v194) == DWORD2(v194))
    {
      v71 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v194, (void *)(HIDWORD(v194) + 1), (unint64_t)&v189, v63, v64, v65, v66, v67);
      v73 = *v71;
      v72 = v71 + 1;
      v74 = v194 + 12 * HIDWORD(v194);
      *(_DWORD *)v74 = v73;
    }
    else
    {
      v72 = &v190;
      v74 = v194 + 12 * HIDWORD(v194);
      *(_DWORD *)v74 = i;
    }
    *(_QWORD *)(v74 + 4) = *(_QWORD *)v72;
    ++HIDWORD(v194);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v196, (uint64_t)v198, v62, v63, v64, v65, v66, v67);
  JSC::MacroAssemblerARM64::load16((uint64_t)v198, 0x100000102uLL, 0x200000000uLL, 0, v75, v76, v77, v78);
  v86 = v202;
  if (v202 + 4 > v201)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v200, v79, v80, v81, v82, v83, v84, v85);
    v86 = v202;
  }
  *(_DWORD *)(v200[0] + v86) = 285213729;
  v87 = v202;
  v88 = v202 + 4;
  v202 += 4;
  if (v87 + 8 > v201)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v200, v79, v80, v81, v82, v83, v84, v85);
    v88 = v202;
  }
  *(_DWORD *)(v200[0] + v88) = 1795358783;
  v89 = v202 + 4;
  v202 += 4;
  if (v211)
  {
    v171 = v199;
    while ((int)v89 < v171)
    {
      if (v89 + 4 > v201)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v200, v79, v80, v81, v82, v83, v84, v85);
        v89 = v202;
      }
      *(_DWORD *)(v200[0] + v89) = -721215457;
      v171 = v199;
      v89 = v202 + 4;
      v202 += 4;
    }
    v203 = 0;
  }
  if (v89 + 4 > v201)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v200, v79, v80, v81, v82, v83, v84, v85);
    v89 = v202;
  }
  *(_DWORD *)(v200[0] + v89) = 1409286146;
  v90 = v202;
  v202 += 4;
  v91 = v202;
  v92 = v90 + 8;
  v93 = v202;
  if (v92 > v201)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v200, v79, v80, v81, v82, v83, v84, v85);
    v93 = v202;
  }
  *(_DWORD *)(v200[0] + v93) = -721215457;
  v202 += 4;
  if (v211)
    v94 = -122;
  else
    v94 = -126;
  v184 = v91;
  v185 = 0;
  v186 = v94;
  v187 = 2;
  v188 = -1;
  if (v91 != -1)
  {
    if (HIDWORD(v194) == DWORD2(v194))
    {
      v95 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v194, (void *)(HIDWORD(v194) + 1), (unint64_t)&v184, v81, v82, v83, v84, v85);
      v97 = *v95;
      v96 = v95 + 1;
      v98 = v194 + 12 * HIDWORD(v194);
      *(_DWORD *)v98 = v97;
    }
    else
    {
      v96 = &v185;
      v98 = v194 + 12 * HIDWORD(v194);
      *(_DWORD *)v98 = v91;
    }
    *(_QWORD *)(v98 + 4) = *(_QWORD *)v96;
    ++HIDWORD(v194);
  }
  JSC::MacroAssemblerARM64::and32((uint64_t)v198, (JSC::ARM64LogicalImmediate *)0xFFFFFC00, 0, 3);
  JSC::MacroAssemblerARM64::branch32((uint64_t)v198, 1, 3, 55296, v99, v100, v101, v102, (uint64_t)&v182);
  v108 = v182;
  if (v182 != -1)
  {
    v109 = HIDWORD(v194);
    if (HIDWORD(v194) == DWORD2(v194))
    {
      v110 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v194, (void *)(HIDWORD(v194) + 1), (unint64_t)&v182, v103, v104, v105, v106, v107);
      v112 = *v110;
      v111 = (uint64_t *)(v110 + 1);
      v108 = v112;
      v109 = HIDWORD(v194);
    }
    else
    {
      v111 = &v183;
    }
    v113 = v194 + 12 * v109;
    *(_DWORD *)v113 = v108;
    *(_QWORD *)(v113 + 4) = *v111;
    ++HIDWORD(v194);
  }
  JSC::MacroAssemblerARM64::load16((uint64_t)v198, 0x100000102uLL, 0x200000000uLL, 2, v104, v105, v106, v107);
  JSC::MacroAssemblerARM64::and32((uint64_t)v198, (JSC::ARM64LogicalImmediate *)0xFFFFFC00, 2, 3);
  JSC::MacroAssemblerARM64::branch32((uint64_t)v198, 1, 3, 56320, v114, v115, v116, v117, (uint64_t)&v180);
  v125 = v180;
  if (v180 != -1)
  {
    v126 = HIDWORD(v194);
    if (HIDWORD(v194) == DWORD2(v194))
    {
      v127 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v194, (void *)(HIDWORD(v194) + 1), (unint64_t)&v180, v120, v121, v122, v123, v124);
      v129 = *v127;
      v128 = v127 + 1;
      v125 = v129;
      v126 = HIDWORD(v194);
    }
    else
    {
      v128 = &v181;
    }
    v130 = v194 + 12 * v126;
    *(_DWORD *)v130 = v125;
    *(_QWORD *)(v130 + 4) = *(_QWORD *)v128;
    ++HIDWORD(v194);
  }
  v131 = v202;
  if (v202 + 4 > v201)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v200, v118, v119, v120, v121, v122, v123, v124);
    v131 = v202;
  }
  *(_DWORD *)(v200[0] + v131) = 1393972224;
  v132 = v202;
  v133 = v202 + 4;
  v202 += 4;
  if (v132 + 8 > v201)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v200, v118, v119, v120, v121, v122, v123, v124);
    v133 = v202;
  }
  *(_DWORD *)(v200[0] + v133) = -1962803200;
  v202 += 4;
  if (!v204)
  {
    __break(0xC471u);
    JUMPOUT(0x19881365CLL);
  }
  *(_DWORD *)(v205 + 208) &= ~v207;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v198, -56613888, v206, v120, v121, v122, v123, v124);
  v141 = v202;
  if (v202 + 4 > v201)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v200, v134, v135, v136, v137, v138, v139, v140);
    v141 = v202;
  }
  *(_DWORD *)(v200[0] + v141) = -1961885696;
  v202 += 4;
  if (HIDWORD(v194))
  {
    v142 = 0;
    v143 = 0;
    v144 = 12 * HIDWORD(v194);
    do
    {
      if (v143 >= HIDWORD(v194))
      {
        __break(0xC471u);
        JUMPOUT(0x1988136E4);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v194 + v142), (uint64_t)v198, v135, v136, v137, v138, v139, v140);
      ++v143;
      v142 += 12;
    }
    while (v144 != v142);
  }
  JSC::SpecializedThunkJIT::returnInt32(v198, 0, v135, v136, v137, v138, v139, v140);
  v152 = *((_QWORD *)this + 11305);
  v154 = *(_QWORD *)(v152 + 88);
  v153 = *(unsigned int **)(v152 + 96);
  if (v153)
  {
    do
      v155 = __ldaxr(v153);
    while (__stlxr(v155 + 1, v153));
    do
    {
      v156 = __ldaxr(v153);
      v157 = v156 - 1;
    }
    while (__stlxr(v157, v153));
    if (!v157)
    {
      atomic_store(1u, v153);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v153, v145, v146, v147, v148, v149, v150, v151);
      WTF::fastFree(v172, v173, v174, v175, v176, v177, v178, v179);
    }
  }
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v198, v154, "codePointAt", v148, v149, v150, v151);
  v165 = v194;
  if (v195 != (_BYTE *)v194 && (_QWORD)v194 != 0)
  {
    *(_QWORD *)&v194 = 0;
    DWORD2(v194) = 0;
    WTF::fastFree(v165, v158, v159, v160, v161, v162, v163, v164);
  }
  v167 = v216;
  if (v216)
  {
    v216 = 0;
    v217 = 0;
    WTF::fastFree((unint64_t)v167, v158, v159, v160, v161, v162, v163, v164);
  }
  v168 = v212;
  if (&v215 != (uint64_t *)v212 && v212)
  {
    v212 = 0;
    v213 = 0;
    WTF::fastFree((unint64_t)v168, v158, v159, v160, v161, v162, v163, v164);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v198, v158, v159, v160, v161, v162, v163, v164);
}

void JSC::SpecializedThunkJIT::loadJSStringArgument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int *v35;
  int *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;

  v9 = (JSC::AssemblerBuffer *)(a1 + 56);
  v10 = *(_DWORD *)(a1 + 200);
  if (v10 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v10 = *(_DWORD *)(a1 + 200);
  }
  v11 = (uint64_t *)(a1 + 360);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v10) = -129858656;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 0, 28, a5, a6, a7, a8, (uint64_t)&v42);
  v19 = v42;
  if (v42 != -1)
  {
    v20 = *(unsigned int *)(a1 + 372);
    if ((_DWORD)v20 == *(_DWORD *)(a1 + 368))
    {
      v21 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 360, (void *)(v20 + 1), (unint64_t)&v42, v14, v15, v16, v17, v18);
      v23 = *v21;
      v22 = (uint64_t *)(v21 + 1);
      v19 = v23;
      LODWORD(v20) = *(_DWORD *)(a1 + 372);
      v24 = *(_QWORD *)(a1 + 360);
    }
    else
    {
      v22 = &v43;
      v24 = *v11;
    }
    v25 = v24 + 12 * v20;
    *(_DWORD *)v25 = v19;
    *(_QWORD *)(v25 + 4) = *v22;
    ++*(_DWORD *)(a1 + 372);
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198813930);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v26 = *(_BYTE *)(a1 + 304) & 0x1F | 0x38405000;
  v27 = *(_DWORD *)(a1 + 200);
  if (v27 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v9, v12, v13, v14, v15, v16, v17, v18);
    v27 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = v26;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 2, v15, v16, v17, v18, (uint64_t)&v40);
  v33 = v40;
  if (v40 != -1)
  {
    v34 = *(unsigned int *)(a1 + 372);
    if ((_DWORD)v34 == *(_DWORD *)(a1 + 368))
    {
      v35 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 360, (void *)(v34 + 1), (unint64_t)&v40, v28, v29, v30, v31, v32);
      v37 = *v35;
      v36 = v35 + 1;
      v33 = v37;
      LODWORD(v34) = *(_DWORD *)(a1 + 372);
      v38 = *(_QWORD *)(a1 + 360);
    }
    else
    {
      v36 = &v41;
      v38 = *v11;
    }
    v39 = v38 + 12 * v34;
    *(_DWORD *)v39 = v33;
    *(_QWORD *)(v39 + 4) = *(_QWORD *)v36;
    ++*(_DWORD *)(a1 + 372);
  }
}

uint64_t JSC::clz32ThunkGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int i;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  _DWORD *v39;
  unint64_t *v40;
  unsigned int v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int j;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  _DWORD *v59;
  unint64_t *v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  unsigned int v89;
  unint64_t v90;
  _DWORD v91[13];
  signed int v92;
  _QWORD v93[17];
  unsigned int v94;
  unsigned int v95;
  int v96;
  char v97;
  uint64_t *v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v91, this, 1);
  v12 = v95;
  if (v95 + 4 > v94)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v93, v5, v6, v7, v8, v9, v10, v11);
    v12 = v95;
  }
  *(_DWORD *)(v93[0] + v12) = -129825888;
  v95 += 4;
  JSC::MacroAssemblerARM64::branch64((uint64_t)v91, 3, 0, 27, v8, v9, v10, v11, (uint64_t)&v89);
  JSC::MacroAssemblerARM64::and64((uint64_t)v91, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, 0, 0);
  v87 = v89;
  v88 = v90;
  for (i = v95; (int)i < v92; v95 = i)
  {
    if (i + 4 > v94)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v93, v13, v14, v15, v16, v17, v18, v19);
      i = v95;
    }
    *(_DWORD *)(v93[0] + i) = -721215457;
    i = v95 + 4;
  }
  v96 = 0;
  v21 = i;
  if (i + 4 > v94)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v93, v13, v14, v15, v16, v17, v18, v19);
    v21 = v95;
  }
  *(_DWORD *)(v93[0] + v21) = 1522536449;
  v95 += 4;
  JSC::SpecializedThunkJIT::returnInt32(v91, 1, v14, v15, v16, v17, v18, v19);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v87, (uint64_t)v91, v22, v23, v24, v25, v26, v27);
  JSC::JSInterfaceJIT::emitLoadDouble((uint64_t)&v89, (uint64_t)v91, 6, 0, v28, v29, v30, v31);
  v37 = v89;
  if (v89 != -1)
  {
    v38 = v100;
    if (v100 == v99)
    {
      v39 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v98, (void *)(v100 + 1), (unint64_t)&v89, v32, v33, v34, v35, v36);
      v41 = *v39;
      v40 = (unint64_t *)(v39 + 1);
      v37 = v41;
      v38 = v100;
    }
    else
    {
      v40 = &v90;
    }
    v42 = (char *)v98 + 12 * v38;
    *(_DWORD *)v42 = v37;
    *(_QWORD *)(v42 + 4) = *v40;
    ++v100;
  }
  JSC::MacroAssemblerARM64::branchTruncateDoubleToInt32((uint64_t)v91, 0, 0, 1, v33, v34, v35, v36, (uint64_t)&v89);
  v86 = i;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(&v89, &v86, (uint64_t)v91, v43, v44, v45, v46, v47);
  for (j = v95; (int)j < v92; v95 = j)
  {
    if (j + 4 > v94)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v93, v48, v49, v50, v51, v52, v53, v54);
      j = v95;
    }
    *(_DWORD *)(v93[0] + j) = -721215457;
    j = v95 + 4;
  }
  v56 = j;
  if (j + 4 > v94)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v93, v48, v49, v50, v51, v52, v53, v54);
    v56 = v95;
  }
  *(_DWORD *)(v93[0] + v56) = 335544320;
  v95 += 4;
  v57 = 0xFF000F4500000000;
  if (!v97)
    v57 = 0xFF000F4100000000;
  v89 = j;
  v90 = v57;
  if (j != -1)
  {
    if (v100 == v99)
    {
      v58 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v98, (void *)(v100 + 1), (unint64_t)&v89, v50, v51, v52, v53, v54);
      v59 = (_DWORD *)v98 + 3 * v100;
      *v59 = *(_DWORD *)v58;
      v60 = (unint64_t *)(v59 + 1);
      v57 = *(_QWORD *)(v58 + 4);
    }
    else
    {
      v61 = (unsigned int *)v98 + 3 * v100;
      *v61 = j;
      v60 = (unint64_t *)(v61 + 1);
    }
    *v60 = v57;
    ++v100;
  }
  v62 = *((_QWORD *)this + 11305);
  v64 = *(_QWORD *)(v62 + 88);
  v63 = *(unsigned int **)(v62 + 96);
  if (v63)
  {
    do
      v65 = __ldaxr(v63);
    while (__stlxr(v65 + 1, v63));
    do
    {
      v66 = __ldaxr(v63);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v63));
    if (!v67)
    {
      atomic_store(1u, v63);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v63, v48, v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
  }
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v91, v64, "clz32", v51, v52, v53, v54);
  v75 = v102;
  if (v102)
  {
    v102 = 0;
    v103 = 0;
    WTF::fastFree(v75, v68, v69, v70, v71, v72, v73, v74);
  }
  v76 = (unint64_t)v98;
  if (&v101 != v98 && v98)
  {
    v98 = 0;
    v99 = 0;
    WTF::fastFree(v76, v68, v69, v70, v71, v72, v73, v74);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v91, v68, v69, v70, v71, v72, v73, v74);
}

uint64_t JSC::sqrtThunkGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x8_t v16;
  int v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t *v20;
  int v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  _BYTE v57[56];
  _QWORD v58[17];
  unsigned int v59;
  unsigned int v60;
  uint64_t *v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v57, this, 1);
  JSC::JSInterfaceJIT::emitLoadDouble((uint64_t)&v55, (uint64_t)v57, 6, 0, v5, v6, v7, v8);
  v17 = v55;
  if (v55 != -1)
  {
    v18 = v63;
    if (v63 == v62)
    {
      v19 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v61, (void *)(v63 + 1), (unint64_t)&v55, v11, v12, v13, v14, v15);
      v21 = *v19;
      v20 = (uint64_t *)(v19 + 1);
      v17 = v21;
      v18 = v63;
    }
    else
    {
      v20 = &v56;
    }
    v22 = (char *)v61 + 12 * v18;
    *(_DWORD *)v22 = v17;
    *(_QWORD *)(v22 + 4) = *v20;
    ++v63;
  }
  v23 = v60;
  if (v60 + 4 > v59)
  {
    v16 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v58, v9, v10, v11, v12, v13, v14, v15).n128_u64[0];
    v23 = v60;
  }
  *(_DWORD *)(v58[0] + v23) = 509722624;
  v60 += 4;
  JSC::SpecializedThunkJIT::returnDouble((uint64_t)v57, v9, v10, v11, v12, v13, v14, v15, v16);
  v31 = *((_QWORD *)this + 11305);
  v33 = *(_QWORD *)(v31 + 88);
  v32 = *(unsigned int **)(v31 + 96);
  if (v32)
  {
    do
      v34 = __ldaxr(v32);
    while (__stlxr(v34 + 1, v32));
    do
    {
      v35 = __ldaxr(v32);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v32));
    if (!v36)
    {
      atomic_store(1u, v32);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v32, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
  }
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v57, v33, "sqrt", v27, v28, v29, v30);
  v44 = v65;
  if (v65)
  {
    v65 = 0;
    v66 = 0;
    WTF::fastFree(v44, v37, v38, v39, v40, v41, v42, v43);
  }
  v45 = (unint64_t)v61;
  if (&v64 != v61 && v61)
  {
    v61 = 0;
    v62 = 0;
    WTF::fastFree(v45, v37, v38, v39, v40, v41, v42, v43);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v57, v37, v38, v39, v40, v41, v42, v43);
}

void JSC::SpecializedThunkJIT::returnDouble(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  JSC::AssemblerBuffer *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45[2];
  char v46;
  __int16 v47;
  char v48;
  unsigned int v49[3];

  v10 = (JSC::AssemblerBuffer *)(a1 + 56);
  v11 = *(_DWORD *)(a1 + 200);
  if (v11 + 4 > *(_DWORD *)(a1 + 192))
  {
    a9 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8).n128_u64[0];
    v11 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v11) = -1637482496;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, 0, 0xFFFFFFFFLL, a5, a6, a7, a8, (uint64_t)v49, a9);
  v19 = *(_DWORD *)(a1 + 200);
  if (v19 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, v12, v13, v14, v15, v16, v17, v18);
    v19 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v19) = -887422976;
  v20 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v20; v20 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v20)
  {
    if ((v20 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, v12, v13, v14, v15, v16, v17, v18);
      v20 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = -721215457;
    v20 = *(_DWORD *)(a1 + 200) + 4;
  }
  v21 = v20;
  if ((v20 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, v12, v13, v14, v15, v16, v17, v18);
    v21 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v22 = 69;
  else
    v22 = 65;
  v45[0] = v20;
  v45[1] = 0;
  v46 = v22;
  v47 = 15;
  v48 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v49, a1, v13, v14, v15, v16, v17, v18);
  v30 = *(_DWORD *)(a1 + 200);
  if (v30 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, v23, v24, v25, v26, v27, v28, v29);
    v30 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v30) = -1441070112;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v45, a1, v24, v25, v26, v27, v28, v29);
  v38 = *(_DWORD *)(a1 + 200);
  if (v38 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, v31, v32, v33, v34, v35, v36, v37);
    v38 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v38) = -1463716869;
  v39 = *(_DWORD *)(a1 + 200);
  v40 = v39 + 4;
  *(_DWORD *)(a1 + 200) = v39 + 4;
  if ((v39 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, v31, v32, v33, v34, v35, v36, v37);
    v40 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v40) = -1862270017;
  v41 = *(_DWORD *)(a1 + 200);
  v42 = v41 + 4;
  *(_DWORD *)(a1 + 200) = v41 + 4;
  if ((v41 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, v31, v32, v33, v34, v35, v36, v37);
    v42 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v42) = -1463714819;
  v43 = *(_DWORD *)(a1 + 200);
  v44 = v43 + 4;
  *(_DWORD *)(a1 + 200) = v43 + 4;
  if ((v43 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, v31, v32, v33, v34, v35, v36, v37);
    v44 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v44) = -698416192;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::floorThunkGenerator(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  _DWORD *v38;
  _QWORD *v39;
  int v40;
  char *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int8x8_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  WTF *v82;
  WTF *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  _BYTE v93[28];
  unsigned int v94;
  uint64_t v95;
  _DWORD v96[14];
  _QWORD v97[17];
  unsigned int v98;
  unsigned int v99;
  WTF *v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  WTF *v104;
  int v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v96, this, 1);
  v12 = v99;
  if (v99 + 4 > v98)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v97, v5, v6, v7, v8, v9, v10, v11);
    v12 = v99;
  }
  *(_DWORD *)(v97[0] + v12) = -129825888;
  v99 += 4;
  JSC::MacroAssemblerARM64::branch64((uint64_t)v96, 3, 0, 27, v8, v9, v10, v11, (uint64_t)&v92);
  JSC::MacroAssemblerARM64::and64((uint64_t)v96, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, 0, 0);
  v94 = v92;
  v95 = *(_QWORD *)((char *)&v92 + 4);
  JSC::SpecializedThunkJIT::returnInt32(v96, 0, v13, v14, v15, v16, v17, v18);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v94, (uint64_t)v96, v19, v20, v21, v22, v23, v24);
  JSC::JSInterfaceJIT::emitLoadDouble((uint64_t)&v92, (uint64_t)v96, 6, 0, v25, v26, v27, v28);
  v36 = v92;
  if ((_DWORD)v92 != -1)
  {
    v37 = v102;
    if (v102 == v101)
    {
      v38 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v100, (void *)(v102 + 1), (unint64_t)&v92, v31, v32, v33, v34, v35);
      v40 = *v38;
      v39 = v38 + 1;
      v36 = v40;
      v37 = v102;
    }
    else
    {
      v39 = (_QWORD *)((char *)&v92 + 4);
    }
    v41 = (char *)v100 + 12 * v37;
    *(_DWORD *)v41 = v36;
    *(_QWORD *)(v41 + 4) = *v39;
    ++v102;
  }
  *(_QWORD *)&v92 = v93;
  *((_QWORD *)&v92 + 1) = 2;
  v42 = v99;
  if (v99 + 4 > v98)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v97, v29, v30, v31, v32, v33, v34, v35);
    v42 = v99;
  }
  *(_DWORD *)(v97[0] + v42) = 509952000;
  v99 += 4;
  JSC::MacroAssemblerARM64::branchConvertDoubleToInt32((uint64_t)v96, 0, 0, (uint64_t)&v92, 1, 1, v34, v35);
  JSC::SpecializedThunkJIT::returnInt32(v96, 0, v43, v44, v45, v46, v47, v48);
  if (HIDWORD(v92))
  {
    v57 = 0;
    v58 = 0;
    v59 = 12 * HIDWORD(v92);
    while (v58 < HIDWORD(v92))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v92 + v57), (uint64_t)v96, v50, v51, v52, v53, v54, v55);
      ++v58;
      v57 += 12;
      if (v59 == v57)
        goto LABEL_14;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_14:
    JSC::SpecializedThunkJIT::returnDouble((uint64_t)v96, v49, v50, v51, v52, v53, v54, v55, v56);
    v67 = *((_QWORD *)this + 11305);
    v69 = *(_QWORD *)(v67 + 88);
    v68 = *(unsigned int **)(v67 + 96);
    if (v68)
    {
      do
        v70 = __ldaxr(v68);
      while (__stlxr(v70 + 1, v68));
      do
      {
        v71 = __ldaxr(v68);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v68));
      if (!v72)
      {
        atomic_store(1u, v68);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v68, v60, v61, v62, v63, v64, v65, v66);
        WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      }
    }
    JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v96, v69, "floor", v63, v64, v65, v66);
    v80 = v92;
    if (v93 != (_BYTE *)v92 && (_QWORD)v92 != 0)
    {
      *(_QWORD *)&v92 = 0;
      DWORD2(v92) = 0;
      WTF::fastFree(v80, v73, v74, v75, v76, v77, v78, v79);
    }
    v82 = v104;
    if (v104)
    {
      v104 = 0;
      v105 = 0;
      WTF::fastFree((unint64_t)v82, v73, v74, v75, v76, v77, v78, v79);
    }
    v83 = v100;
    if (&v103 != (uint64_t *)v100)
    {
      if (v100)
      {
        v100 = 0;
        v101 = 0;
        WTF::fastFree((unint64_t)v83, v73, v74, v75, v76, v77, v78, v79);
      }
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v96, v73, v74, v75, v76, v77, v78, v79);
  }
}

void JSC::ceilThunkGenerator(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  _DWORD *v38;
  _QWORD *v39;
  int v40;
  char *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int8x8_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  WTF *v82;
  WTF *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  _BYTE v93[28];
  unsigned int v94;
  uint64_t v95;
  _DWORD v96[14];
  _QWORD v97[17];
  unsigned int v98;
  unsigned int v99;
  WTF *v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  WTF *v104;
  int v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v96, this, 1);
  v12 = v99;
  if (v99 + 4 > v98)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v97, v5, v6, v7, v8, v9, v10, v11);
    v12 = v99;
  }
  *(_DWORD *)(v97[0] + v12) = -129825888;
  v99 += 4;
  JSC::MacroAssemblerARM64::branch64((uint64_t)v96, 3, 0, 27, v8, v9, v10, v11, (uint64_t)&v92);
  JSC::MacroAssemblerARM64::and64((uint64_t)v96, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, 0, 0);
  v94 = v92;
  v95 = *(_QWORD *)((char *)&v92 + 4);
  JSC::SpecializedThunkJIT::returnInt32(v96, 0, v13, v14, v15, v16, v17, v18);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v94, (uint64_t)v96, v19, v20, v21, v22, v23, v24);
  JSC::JSInterfaceJIT::emitLoadDouble((uint64_t)&v92, (uint64_t)v96, 6, 0, v25, v26, v27, v28);
  v36 = v92;
  if ((_DWORD)v92 != -1)
  {
    v37 = v102;
    if (v102 == v101)
    {
      v38 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v100, (void *)(v102 + 1), (unint64_t)&v92, v31, v32, v33, v34, v35);
      v40 = *v38;
      v39 = v38 + 1;
      v36 = v40;
      v37 = v102;
    }
    else
    {
      v39 = (_QWORD *)((char *)&v92 + 4);
    }
    v41 = (char *)v100 + 12 * v37;
    *(_DWORD *)v41 = v36;
    *(_QWORD *)(v41 + 4) = *v39;
    ++v102;
  }
  v42 = v99;
  if (v99 + 4 > v98)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v97, v29, v30, v31, v32, v33, v34, v35);
    v42 = v99;
  }
  *(_DWORD *)(v97[0] + v42) = 509919232;
  v99 += 4;
  *(_QWORD *)&v92 = v93;
  *((_QWORD *)&v92 + 1) = 2;
  JSC::MacroAssemblerARM64::branchConvertDoubleToInt32((uint64_t)v96, 0, 0, (uint64_t)&v92, 1, 1, v34, v35);
  JSC::SpecializedThunkJIT::returnInt32(v96, 0, v43, v44, v45, v46, v47, v48);
  if (HIDWORD(v92))
  {
    v57 = 0;
    v58 = 0;
    v59 = 12 * HIDWORD(v92);
    while (v58 < HIDWORD(v92))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v92 + v57), (uint64_t)v96, v50, v51, v52, v53, v54, v55);
      ++v58;
      v57 += 12;
      if (v59 == v57)
        goto LABEL_14;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_14:
    JSC::SpecializedThunkJIT::returnDouble((uint64_t)v96, v49, v50, v51, v52, v53, v54, v55, v56);
    v67 = *((_QWORD *)this + 11305);
    v69 = *(_QWORD *)(v67 + 88);
    v68 = *(unsigned int **)(v67 + 96);
    if (v68)
    {
      do
        v70 = __ldaxr(v68);
      while (__stlxr(v70 + 1, v68));
      do
      {
        v71 = __ldaxr(v68);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v68));
      if (!v72)
      {
        atomic_store(1u, v68);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v68, v60, v61, v62, v63, v64, v65, v66);
        WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      }
    }
    JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v96, v69, "ceil", v63, v64, v65, v66);
    v80 = v92;
    if (v93 != (_BYTE *)v92 && (_QWORD)v92 != 0)
    {
      *(_QWORD *)&v92 = 0;
      DWORD2(v92) = 0;
      WTF::fastFree(v80, v73, v74, v75, v76, v77, v78, v79);
    }
    v82 = v104;
    if (v104)
    {
      v104 = 0;
      v105 = 0;
      WTF::fastFree((unint64_t)v82, v73, v74, v75, v76, v77, v78, v79);
    }
    v83 = v100;
    if (&v103 != (uint64_t *)v100)
    {
      if (v100)
      {
        v100 = 0;
        v101 = 0;
        WTF::fastFree((unint64_t)v83, v73, v74, v75, v76, v77, v78, v79);
      }
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v96, v73, v74, v75, v76, v77, v78, v79);
  }
}

void JSC::truncThunkGenerator(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  _DWORD *v38;
  _QWORD *v39;
  int v40;
  char *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int8x8_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  WTF *v82;
  WTF *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  _BYTE v93[28];
  unsigned int v94;
  uint64_t v95;
  _DWORD v96[14];
  _QWORD v97[17];
  unsigned int v98;
  unsigned int v99;
  WTF *v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  WTF *v104;
  int v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v96, this, 1);
  v12 = v99;
  if (v99 + 4 > v98)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v97, v5, v6, v7, v8, v9, v10, v11);
    v12 = v99;
  }
  *(_DWORD *)(v97[0] + v12) = -129825888;
  v99 += 4;
  JSC::MacroAssemblerARM64::branch64((uint64_t)v96, 3, 0, 27, v8, v9, v10, v11, (uint64_t)&v92);
  JSC::MacroAssemblerARM64::and64((uint64_t)v96, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, 0, 0);
  v94 = v92;
  v95 = *(_QWORD *)((char *)&v92 + 4);
  JSC::SpecializedThunkJIT::returnInt32(v96, 0, v13, v14, v15, v16, v17, v18);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v94, (uint64_t)v96, v19, v20, v21, v22, v23, v24);
  JSC::JSInterfaceJIT::emitLoadDouble((uint64_t)&v92, (uint64_t)v96, 6, 0, v25, v26, v27, v28);
  v36 = v92;
  if ((_DWORD)v92 != -1)
  {
    v37 = v102;
    if (v102 == v101)
    {
      v38 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v100, (void *)(v102 + 1), (unint64_t)&v92, v31, v32, v33, v34, v35);
      v40 = *v38;
      v39 = v38 + 1;
      v36 = v40;
      v37 = v102;
    }
    else
    {
      v39 = (_QWORD *)((char *)&v92 + 4);
    }
    v41 = (char *)v100 + 12 * v37;
    *(_DWORD *)v41 = v36;
    *(_QWORD *)(v41 + 4) = *v39;
    ++v102;
  }
  v42 = v99;
  if (v99 + 4 > v98)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v97, v29, v30, v31, v32, v33, v34, v35);
    v42 = v99;
  }
  *(_DWORD *)(v97[0] + v42) = 509984768;
  v99 += 4;
  *(_QWORD *)&v92 = v93;
  *((_QWORD *)&v92 + 1) = 2;
  JSC::MacroAssemblerARM64::branchConvertDoubleToInt32((uint64_t)v96, 0, 0, (uint64_t)&v92, 1, 1, v34, v35);
  JSC::SpecializedThunkJIT::returnInt32(v96, 0, v43, v44, v45, v46, v47, v48);
  if (HIDWORD(v92))
  {
    v57 = 0;
    v58 = 0;
    v59 = 12 * HIDWORD(v92);
    while (v58 < HIDWORD(v92))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v92 + v57), (uint64_t)v96, v50, v51, v52, v53, v54, v55);
      ++v58;
      v57 += 12;
      if (v59 == v57)
        goto LABEL_14;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_14:
    JSC::SpecializedThunkJIT::returnDouble((uint64_t)v96, v49, v50, v51, v52, v53, v54, v55, v56);
    v67 = *((_QWORD *)this + 11305);
    v69 = *(_QWORD *)(v67 + 88);
    v68 = *(unsigned int **)(v67 + 96);
    if (v68)
    {
      do
        v70 = __ldaxr(v68);
      while (__stlxr(v70 + 1, v68));
      do
      {
        v71 = __ldaxr(v68);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v68));
      if (!v72)
      {
        atomic_store(1u, v68);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v68, v60, v61, v62, v63, v64, v65, v66);
        WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      }
    }
    JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v96, v69, "trunc", v63, v64, v65, v66);
    v80 = v92;
    if (v93 != (_BYTE *)v92 && (_QWORD)v92 != 0)
    {
      *(_QWORD *)&v92 = 0;
      DWORD2(v92) = 0;
      WTF::fastFree(v80, v73, v74, v75, v76, v77, v78, v79);
    }
    v82 = v104;
    if (v104)
    {
      v104 = 0;
      v105 = 0;
      WTF::fastFree((unint64_t)v82, v73, v74, v75, v76, v77, v78, v79);
    }
    v83 = v100;
    if (&v103 != (uint64_t *)v100)
    {
      if (v100)
      {
        v100 = 0;
        v101 = 0;
        WTF::fastFree((unint64_t)v83, v73, v74, v75, v76, v77, v78, v79);
      }
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v96, v73, v74, v75, v76, v77, v78, v79);
  }
}

uint64_t JSC::numberConstructorCallThunkGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  _QWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  _DWORD v60[14];
  _QWORD v61[17];
  unsigned int v62;
  unsigned int v63;
  WTF *v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  WTF *v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v60, this, 1);
  v12 = v63;
  if (v63 + 4 > v62)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v61, v5, v6, v7, v8, v9, v10, v11);
    v12 = v63;
  }
  *(_DWORD *)(v61[0] + v12) = -129825888;
  v63 += 4;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v60, 0, 0, 27, v8, v9, v10, v11, (uint64_t)&v56);
  v58 = v56;
  v20 = v57;
  v59 = v57;
  if (v56 != -1)
  {
    if (v66 == v65)
    {
      v21 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v64, (void *)(v66 + 1), (unint64_t)&v58, v15, v16, v17, v18, v19);
      v22 = (_DWORD *)((char *)v64 + 12 * v66);
      *v22 = *(_DWORD *)v21;
      v23 = v22 + 1;
      v20 = *(_QWORD *)(v21 + 4);
    }
    else
    {
      v24 = (_DWORD *)((char *)v64 + 12 * v66);
      *v24 = v56;
      v23 = v24 + 1;
    }
    *v23 = v20;
    ++v66;
  }
  JSC::SpecializedThunkJIT::returnJSCell(v60, v13, v14, v15, v16, v17, v18, v19);
  v32 = *((_QWORD *)this + 11305);
  v34 = *(_QWORD *)(v32 + 88);
  v33 = *(unsigned int **)(v32 + 96);
  if (v33)
  {
    do
      v35 = __ldaxr(v33);
    while (__stlxr(v35 + 1, v33));
    do
    {
      v36 = __ldaxr(v33);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v33));
    if (!v37)
    {
      atomic_store(1u, v33);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v33, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    }
  }
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v60, v34, "Number", v28, v29, v30, v31);
  v45 = v68;
  if (v68)
  {
    v68 = 0;
    v69 = 0;
    WTF::fastFree((unint64_t)v45, v38, v39, v40, v41, v42, v43, v44);
  }
  v46 = v64;
  if (&v67 != (uint64_t *)v64 && v64)
  {
    v64 = 0;
    v65 = 0;
    WTF::fastFree((unint64_t)v46, v38, v39, v40, v41, v42, v43, v44);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v60, v38, v39, v40, v41, v42, v43, v44);
}

uint64_t JSC::stringConstructorCallThunkGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  _QWORD *v23;
  _DWORD *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  _QWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  WTF *v60;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  _DWORD v74[14];
  _QWORD v75[17];
  unsigned int v76;
  unsigned int v77;
  char v78;
  uint64_t v79;
  char v80;
  int v81;
  WTF *v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  WTF *v86;
  int v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v74, this, 1);
  v12 = v77;
  if (v77 + 4 > v76)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v75, v5, v6, v7, v8, v9, v10, v11);
    v12 = v77;
  }
  *(_DWORD *)(v75[0] + v12) = -129825888;
  v77 += 4;
  JSC::AssemblyHelpers::branchIfNotCell((uint64_t)v74, 0, 1, v7, v8, v9, v10, v11, (uint64_t)&v70);
  v72 = v70;
  v20 = v71;
  v73 = v71;
  if (v70 != -1)
  {
    if (v84 == v83)
    {
      v21 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v82, (void *)(v84 + 1), (unint64_t)&v72, v15, v16, v17, v18, v19);
      v22 = (_DWORD *)((char *)v82 + 12 * v84);
      *v22 = *(_DWORD *)v21;
      v23 = v22 + 1;
      v20 = *(_QWORD *)(v21 + 4);
    }
    else
    {
      v24 = (_DWORD *)((char *)v82 + 12 * v84);
      *v24 = v70;
      v23 = v24 + 1;
    }
    *v23 = v20;
    ++v84;
  }
  if (!v78)
  {
    __break(0xC471u);
    JUMPOUT(0x198815058);
  }
  *(_DWORD *)(v79 + 208) &= ~v81;
  v25 = v80 & 0x1F | 0x38405000;
  v26 = v77;
  if (v77 + 4 > v76)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v75, v13, v14, v15, v16, v17, v18, v19);
    v26 = v77;
  }
  *(_DWORD *)(v75[0] + v26) = v25;
  v77 += 4;
  JSC::MacroAssemblerARM64::branch32((uint64_t)v74, 1, 17, 2, v16, v17, v18, v19, (uint64_t)&v70);
  v72 = v70;
  v34 = v71;
  v73 = v71;
  if (v70 != -1)
  {
    if (v84 == v83)
    {
      v35 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v82, (void *)(v84 + 1), (unint64_t)&v72, v29, v30, v31, v32, v33);
      v36 = (_DWORD *)((char *)v82 + 12 * v84);
      *v36 = *(_DWORD *)v35;
      v37 = v36 + 1;
      v34 = *(_QWORD *)(v35 + 4);
    }
    else
    {
      v38 = (_DWORD *)((char *)v82 + 12 * v84);
      *v38 = v70;
      v37 = v38 + 1;
    }
    *v37 = v34;
    ++v84;
  }
  JSC::SpecializedThunkJIT::returnJSCell(v74, v27, v28, v29, v30, v31, v32, v33);
  v46 = *((_QWORD *)this + 11305);
  v48 = *(_QWORD *)(v46 + 88);
  v47 = *(unsigned int **)(v46 + 96);
  if (v47)
  {
    do
      v49 = __ldaxr(v47);
    while (__stlxr(v49 + 1, v47));
    do
    {
      v50 = __ldaxr(v47);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v47));
    if (!v51)
    {
      atomic_store(1u, v47);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v47, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
  }
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v74, v48, "String", v42, v43, v44, v45);
  v59 = v86;
  if (v86)
  {
    v86 = 0;
    v87 = 0;
    WTF::fastFree((unint64_t)v59, v52, v53, v54, v55, v56, v57, v58);
  }
  v60 = v82;
  if (&v85 != (uint64_t *)v82 && v82)
  {
    v82 = 0;
    v83 = 0;
    WTF::fastFree((unint64_t)v60, v52, v53, v54, v55, v56, v57, v58);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v74, v52, v53, v54, v55, v56, v57, v58);
}

uint64_t JSC::roundThunkGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  _DWORD *v38;
  _QWORD *v39;
  int v40;
  char *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  _DWORD *v54;
  uint64_t *v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int8x8_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int *v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v138;
  unint64_t v139;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149[2];
  char v150;
  __int16 v151;
  char v152;
  unsigned int v153[3];
  int v154;
  uint64_t v155;
  __int128 v156;
  _BYTE v157[24];
  _BYTE v158[12];
  _DWORD v159[13];
  signed int v160;
  _QWORD v161[17];
  unsigned int v162;
  unsigned int i;
  char v164;
  _BYTE v165[64];
  uint64_t *v166;
  int v167;
  unsigned int v168;
  uint64_t v169;
  unint64_t v170;
  int v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v159, this, 1);
  *(_QWORD *)v158 = 0xFFFFFFFFLL;
  *(_DWORD *)&v158[8] = -16773311;
  v12 = i;
  if (i + 4 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v161, v5, v6, v7, v8, v9, v10, v11);
    v12 = i;
  }
  *(_DWORD *)(v161[0] + v12) = -129825888;
  i += 4;
  JSC::MacroAssemblerARM64::branch64((uint64_t)v159, 3, 0, 27, v8, v9, v10, v11, (uint64_t)&v156);
  JSC::MacroAssemblerARM64::and64((uint64_t)v159, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, 0, 0);
  *(_DWORD *)v158 = v156;
  *(_QWORD *)&v158[4] = *(_QWORD *)((char *)&v156 + 4);
  JSC::SpecializedThunkJIT::returnInt32(v159, 0, v13, v14, v15, v16, v17, v18);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v158, (uint64_t)v159, v19, v20, v21, v22, v23, v24);
  JSC::JSInterfaceJIT::emitLoadDouble((uint64_t)&v156, (uint64_t)v159, 6, 0, v25, v26, v27, v28);
  v36 = v156;
  if ((_DWORD)v156 != -1)
  {
    v37 = v168;
    if (v168 == v167)
    {
      v38 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v166, (void *)(v168 + 1), (unint64_t)&v156, v31, v32, v33, v34, v35);
      v40 = *v38;
      v39 = v38 + 1;
      v36 = v40;
      v37 = v168;
    }
    else
    {
      v39 = (_QWORD *)((char *)&v156 + 4);
    }
    v41 = (char *)v166 + 12 * v37;
    *(_DWORD *)v41 = v36;
    *(_QWORD *)(v41 + 4) = *v39;
    ++v168;
  }
  *(_QWORD *)&v156 = v157;
  *((_QWORD *)&v156 + 1) = 2;
  v42 = i;
  if (i + 4 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v161, v29, v30, v31, v32, v33, v34, v35);
    v42 = i;
  }
  *(_DWORD *)(v161[0] + v42) = 1862329345;
  v43 = i;
  v44 = i + 4;
  i += 4;
  if (v43 + 8 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v161, v29, v30, v31, v32, v33, v34, v35);
    v44 = i;
  }
  *(_DWORD *)(v161[0] + v44) = 509681664;
  i += 4;
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare((uint64_t)v159, 0, v30, v31, v32, v33, v34, v35, (uint64_t)&v154);
  v52 = v154;
  if (v154 != -1)
  {
    v53 = HIDWORD(v156);
    if (HIDWORD(v156) == DWORD2(v156))
    {
      v54 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v156, (void *)(HIDWORD(v156) + 1), (unint64_t)&v154, v47, v48, v49, v50, v51);
      v56 = *v54;
      v55 = (uint64_t *)(v54 + 1);
      v52 = v56;
      v53 = HIDWORD(v156);
    }
    else
    {
      v55 = &v155;
    }
    v57 = v156 + 12 * v53;
    *(_DWORD *)v57 = v52;
    *(_QWORD *)(v57 + 4) = *v55;
    ++HIDWORD(v156);
  }
  v58 = i;
  if (i + 4 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v161, v45, v46, v47, v48, v49, v50, v51);
    v58 = i;
  }
  *(_DWORD *)(v161[0] + v58) = 509919233;
  i += 4;
  if (!v164)
  {
    __break(0xC471u);
    goto LABEL_66;
  }
  JSC::MacroAssemblerARM64::moveToCachedReg(v159, (uint64_t)&JSC::roundThunkGenerator(JSC::VM &)::halfConstant, (uint64_t)v165, v47, v48, v49, v50, v51);
  v66 = i;
  if (i + 4 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v161, v59, v60, v61, v62, v63, v64, v65);
    v66 = i;
  }
  *(_DWORD *)(v161[0] + v66) = -58758622;
  v67 = i;
  v68 = i + 4;
  i += 4;
  if (v67 + 8 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v161, v59, v60, v61, v62, v63, v64, v65);
    v68 = i;
  }
  *(_DWORD *)(v161[0] + v68) = 509683778;
  v69 = i;
  v70 = i + 4;
  i += 4;
  if (v69 + 8 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v161, v59, v60, v61, v62, v63, v64, v65);
    v70 = i;
  }
  *(_DWORD *)(v161[0] + v70) = 509616192;
  i += 4;
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare((uint64_t)v159, 12, v60, v61, v62, v63, v64, v65, (uint64_t)v153);
  v78 = i;
  if (i + 4 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v161, v71, v72, v73, v74, v75, v76, v77);
    v78 = i;
  }
  *(_DWORD *)(v161[0] + v78) = 509624352;
  v79 = i + 4;
  for (i = v79; (int)v79 < v160; i = v79)
  {
    if (v79 + 4 > v162)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v161, v71, v72, v73, v74, v75, v76, v77);
      v79 = i;
    }
    *(_DWORD *)(v161[0] + v79) = -721215457;
    v79 = i + 4;
  }
  v80 = v79;
  if (v79 + 4 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v161, v71, v72, v73, v74, v75, v76, v77);
    v80 = i;
  }
  *(_DWORD *)(v161[0] + v80) = 335544320;
  i += 4;
  if (v165[32])
    v81 = 69;
  else
    v81 = 65;
  v149[0] = v79;
  v149[1] = 0;
  v150 = v81;
  v151 = 15;
  v152 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v153, (uint64_t)v159, v72, v73, v74, v75, v76, v77);
  if (!v164)
  {
    __break(0xC471u);
    JUMPOUT(0x198815728);
  }
  JSC::MacroAssemblerARM64::moveToCachedReg(v159, (uint64_t)&JSC::roundThunkGenerator(JSC::VM &)::oneConstant, (uint64_t)v165, v82, v83, v84, v85, v86);
  v94 = i;
  if (i + 4 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v161, v87, v88, v89, v90, v91, v92, v93);
    v94 = i;
  }
  *(_DWORD *)(v161[0] + v94) = -58758622;
  v95 = i;
  v96 = i + 4;
  i += 4;
  if (v95 + 8 > v162)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v161, v87, v88, v89, v90, v91, v92, v93);
    v96 = i;
  }
  *(_DWORD *)(v161[0] + v96) = 509753376;
  i += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v149, (uint64_t)v159, v88, v89, v90, v91, v92, v93);
  JSC::MacroAssemblerARM64::branchConvertDoubleToInt32((uint64_t)v159, 0, 0, (uint64_t)&v156, 1, 1, v97, v98);
  JSC::SpecializedThunkJIT::returnInt32(v159, 0, v99, v100, v101, v102, v103, v104);
  if (HIDWORD(v156))
  {
    v113 = 0;
    v114 = 0;
    v115 = 12 * HIDWORD(v156);
    while (v114 < HIDWORD(v156))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v156 + v113), (uint64_t)v159, v106, v107, v108, v109, v110, v111);
      ++v114;
      v113 += 12;
      if (v115 == v113)
        goto LABEL_43;
    }
    __break(0xC471u);
LABEL_66:
    JUMPOUT(0x19881567CLL);
  }
LABEL_43:
  JSC::SpecializedThunkJIT::returnDouble((uint64_t)v159, v105, v106, v107, v108, v109, v110, v111, v112);
  v123 = *((_QWORD *)this + 11305);
  v125 = *(_QWORD *)(v123 + 88);
  v124 = *(unsigned int **)(v123 + 96);
  if (v124)
  {
    do
      v126 = __ldaxr(v124);
    while (__stlxr(v126 + 1, v124));
    do
    {
      v127 = __ldaxr(v124);
      v128 = v127 - 1;
    }
    while (__stlxr(v128, v124));
    if (!v128)
    {
      atomic_store(1u, v124);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v124, v116, v117, v118, v119, v120, v121, v122);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
  }
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v159, v125, "round", v119, v120, v121, v122);
  v136 = v156;
  if (v157 != (_BYTE *)v156 && (_QWORD)v156 != 0)
  {
    *(_QWORD *)&v156 = 0;
    DWORD2(v156) = 0;
    WTF::fastFree(v136, v129, v130, v131, v132, v133, v134, v135);
  }
  v138 = v170;
  if (v170)
  {
    v170 = 0;
    v171 = 0;
    WTF::fastFree(v138, v129, v130, v131, v132, v133, v134, v135);
  }
  v139 = (unint64_t)v166;
  if (&v169 != v166 && v166)
  {
    v166 = 0;
    v167 = 0;
    WTF::fastFree(v139, v129, v130, v131, v132, v133, v134, v135);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v159, v129, v130, v131, v132, v133, v134, v135);
}

uint64_t JSC::expThunkGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t *v19;
  int v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  _BYTE v65[56];
  _QWORD v66[17];
  unsigned int v67;
  unsigned int v68;
  uint64_t *v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v65, this, 1);
  JSC::JSInterfaceJIT::emitLoadDouble((uint64_t)&v63, (uint64_t)v65, 6, 0, v5, v6, v7, v8);
  v16 = v63;
  if (v63 != -1)
  {
    v17 = v71;
    if (v71 == v70)
    {
      v18 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v69, (void *)(v71 + 1), (unint64_t)&v63, v11, v12, v13, v14, v15);
      v20 = *v18;
      v19 = (uint64_t *)(v18 + 1);
      v16 = v20;
      v17 = v71;
    }
    else
    {
      v19 = &v64;
    }
    v21 = (char *)v69 + 12 * v17;
    *(_DWORD *)v21 = v16;
    *(_QWORD *)(v21 + 4) = *v19;
    ++v71;
  }
  v22 = v68;
  if (v68 + 4 > v67)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v66, v9, v10, v11, v12, v13, v14, v15);
    v22 = v68;
  }
  *(_DWORD *)(v66[0] + v22) = -1440873501;
  v68 += 4;
  JSC::SpecializedThunkJIT::callDoubleToDouble((uint64_t)v65, (uint64_t)expThunk, v10, v11, v12, v13, v14, v15);
  v31 = v68;
  if (v68 + 4 > v67)
  {
    v30 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v66, v23, v24, v25, v26, v27, v28, v29).n128_u64[0];
    v31 = v68;
  }
  *(_DWORD *)(v66[0] + v31) = -1442642946;
  v68 += 4;
  JSC::SpecializedThunkJIT::returnDouble((uint64_t)v65, v23, v24, v25, v26, v27, v28, v29, v30);
  v39 = *((_QWORD *)this + 11305);
  v41 = *(_QWORD *)(v39 + 88);
  v40 = *(unsigned int **)(v39 + 96);
  if (v40)
  {
    do
      v42 = __ldaxr(v40);
    while (__stlxr(v42 + 1, v40));
    do
    {
      v43 = __ldaxr(v40);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v40));
    if (!v44)
    {
      atomic_store(1u, v40);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v40, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
    }
  }
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v65, v41, "exp", v35, v36, v37, v38);
  v52 = v73;
  if (v73)
  {
    v73 = 0;
    v74 = 0;
    WTF::fastFree(v52, v45, v46, v47, v48, v49, v50, v51);
  }
  v53 = (unint64_t)v69;
  if (&v72 != v69 && v69)
  {
    v69 = 0;
    v70 = 0;
    WTF::fastFree(v53, v45, v46, v47, v48, v49, v50, v51);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v65, v45, v46, v47, v48, v49, v50, v51);
}

uint64_t JSC::logThunkGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t *v19;
  int v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  _BYTE v65[56];
  _QWORD v66[17];
  unsigned int v67;
  unsigned int v68;
  uint64_t *v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v65, this, 1);
  JSC::JSInterfaceJIT::emitLoadDouble((uint64_t)&v63, (uint64_t)v65, 6, 0, v5, v6, v7, v8);
  v16 = v63;
  if (v63 != -1)
  {
    v17 = v71;
    if (v71 == v70)
    {
      v18 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v69, (void *)(v71 + 1), (unint64_t)&v63, v11, v12, v13, v14, v15);
      v20 = *v18;
      v19 = (uint64_t *)(v18 + 1);
      v16 = v20;
      v17 = v71;
    }
    else
    {
      v19 = &v64;
    }
    v21 = (char *)v69 + 12 * v17;
    *(_DWORD *)v21 = v16;
    *(_QWORD *)(v21 + 4) = *v19;
    ++v71;
  }
  v22 = v68;
  if (v68 + 4 > v67)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v66, v9, v10, v11, v12, v13, v14, v15);
    v22 = v68;
  }
  *(_DWORD *)(v66[0] + v22) = -1440873501;
  v68 += 4;
  JSC::SpecializedThunkJIT::callDoubleToDouble((uint64_t)v65, (uint64_t)logThunk, v10, v11, v12, v13, v14, v15);
  v31 = v68;
  if (v68 + 4 > v67)
  {
    v30 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v66, v23, v24, v25, v26, v27, v28, v29).n128_u64[0];
    v31 = v68;
  }
  *(_DWORD *)(v66[0] + v31) = -1442642946;
  v68 += 4;
  JSC::SpecializedThunkJIT::returnDouble((uint64_t)v65, v23, v24, v25, v26, v27, v28, v29, v30);
  v39 = *((_QWORD *)this + 11305);
  v41 = *(_QWORD *)(v39 + 88);
  v40 = *(unsigned int **)(v39 + 96);
  if (v40)
  {
    do
      v42 = __ldaxr(v40);
    while (__stlxr(v42 + 1, v40));
    do
    {
      v43 = __ldaxr(v40);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v40));
    if (!v44)
    {
      atomic_store(1u, v40);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v40, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
    }
  }
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v65, v41, "log", v35, v36, v37, v38);
  v52 = v73;
  if (v73)
  {
    v73 = 0;
    v74 = 0;
    WTF::fastFree(v52, v45, v46, v47, v48, v49, v50, v51);
  }
  v53 = (unint64_t)v69;
  if (&v72 != v69 && v69)
  {
    v69 = 0;
    v70 = 0;
    WTF::fastFree(v53, v45, v46, v47, v48, v49, v50, v51);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v65, v45, v46, v47, v48, v49, v50, v51);
}

uint64_t JSC::absThunkGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x8_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  _QWORD *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF *v107;
  WTF *v108;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int v121[2];
  char v122;
  __int16 v123;
  char v124;
  unsigned int v125[3];
  unsigned int v126[3];
  unsigned int v127;
  uint64_t v128;
  _BYTE v129[52];
  signed int v130;
  _QWORD v131[17];
  unsigned int v132;
  unsigned int i;
  int v134;
  char v135;
  WTF *v136;
  int v137;
  unsigned int v138;
  uint64_t v139;
  WTF *v140;
  int v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v129, this, 1);
  v12 = i;
  if (i + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v5, v6, v7, v8, v9, v10, v11);
    v12 = i;
  }
  *(_DWORD *)(v131[0] + v12) = -129825888;
  i += 4;
  JSC::MacroAssemblerARM64::branch64((uint64_t)v129, 3, 0, 27, v8, v9, v10, v11, (uint64_t)v126);
  v21 = i;
  if (i + 4 > v132)
  {
    v20 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v13, v14, v15, v16, v17, v18, v19).n128_u64[0];
    v21 = i;
  }
  *(_DWORD *)(v131[0] + v21) = 320830465;
  v22 = i;
  v23 = i + 4;
  i += 4;
  if (v22 + 8 > v132)
  {
    v20 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v13, v14, v15, v16, v17, v18, v19).n128_u64[0];
    v23 = i;
  }
  *(_DWORD *)(v131[0] + v23) = 184614912;
  v24 = i;
  v25 = i + 4;
  i += 4;
  if (v24 + 8 > v132)
  {
    v20 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v13, v14, v15, v16, v17, v18, v19).n128_u64[0];
    v25 = i;
  }
  *(_DWORD *)(v131[0] + v25) = 1241579520;
  i += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)v129, 4, 0, v16, v17, v18, v19, (uint64_t)v125, v20);
  v33 = i;
  if (i + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v26, v27, v28, v29, v30, v31, v32);
    v33 = i;
  }
  *(_DWORD *)(v131[0] + v33) = -1441071104;
  v34 = i + 4;
  for (i = v34; (int)v34 < v130; i = v34)
  {
    if (v34 + 4 > v132)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v26, v27, v28, v29, v30, v31, v32);
      v34 = i;
    }
    *(_DWORD *)(v131[0] + v34) = -721215457;
    v34 = i + 4;
  }
  v35 = v34;
  if (v34 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v26, v27, v28, v29, v30, v31, v32);
    v35 = i;
  }
  *(_DWORD *)(v131[0] + v35) = 335544320;
  i += 4;
  if (v135)
    v36 = 69;
  else
    v36 = 65;
  v121[0] = v34;
  v121[1] = 0;
  v122 = v36;
  v123 = 15;
  v124 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v126, (uint64_t)v129, v27, v28, v29, v30, v31, v32);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v129, 0, 0, 27, v37, v38, v39, v40, (uint64_t)&v119);
  v127 = v119;
  v48 = v120;
  v128 = v120;
  if (v119 != -1)
  {
    if (v138 == v137)
    {
      v49 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v136, (void *)(v138 + 1), (unint64_t)&v127, v43, v44, v45, v46, v47);
      v50 = (_DWORD *)((char *)v136 + 12 * v138);
      *v50 = *(_DWORD *)v49;
      v51 = v50 + 1;
      v48 = *(_QWORD *)(v49 + 4);
    }
    else
    {
      v52 = (unsigned int *)((char *)v136 + 12 * v138);
      *v52 = v119;
      v51 = v52 + 1;
    }
    *v51 = v48;
    ++v138;
  }
  v53 = i;
  if (i + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v41, v42, v43, v44, v45, v46, v47);
    v53 = i;
  }
  *(_DWORD *)(v131[0] + v53) = -1962933408;
  v54 = i;
  v55 = i + 4;
  i += 4;
  if (v54 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v41, v42, v43, v44, v45, v46, v47);
    v55 = i;
  }
  *(_DWORD *)(v131[0] + v55) = -1637416960;
  v56 = i + 4;
  for (i = v56; (int)v56 < v130; i = v56)
  {
    if (v56 + 4 > v132)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v41, v42, v43, v44, v45, v46, v47);
      v56 = i;
    }
    *(_DWORD *)(v131[0] + v56) = -721215457;
    v56 = i + 4;
  }
  v134 = 0;
  v57 = v56;
  if (v56 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v41, v42, v43, v44, v45, v46, v47);
    v57 = i;
  }
  *(_DWORD *)(v131[0] + v57) = 509657089;
  v58 = i;
  v59 = i + 4;
  i += 4;
  if (v58 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v41, v42, v43, v44, v45, v46, v47);
    v59 = i;
  }
  *(_DWORD *)(v131[0] + v59) = -1637482464;
  v60 = i;
  v61 = i + 4;
  i += 4;
  if (v60 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v41, v42, v43, v44, v45, v46, v47);
    v61 = i;
  }
  *(_DWORD *)(v131[0] + v61) = -887422976;
  i += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v121, (uint64_t)v129, v42, v43, v44, v45, v46, v47);
  v69 = i;
  if (i + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v62, v63, v64, v65, v66, v67, v68);
    v69 = i;
  }
  *(_DWORD *)(v131[0] + v69) = -1463716869;
  v70 = i;
  v71 = i + 4;
  i += 4;
  if (v70 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v62, v63, v64, v65, v66, v67, v68);
    v71 = i;
  }
  *(_DWORD *)(v131[0] + v71) = -1862270017;
  v72 = i;
  v73 = i + 4;
  i += 4;
  if (v72 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v62, v63, v64, v65, v66, v67, v68);
    v73 = i;
  }
  *(_DWORD *)(v131[0] + v73) = -1463714819;
  v74 = i;
  v75 = i + 4;
  i += 4;
  if (v74 + 8 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v62, v63, v64, v65, v66, v67, v68);
    v75 = i;
  }
  *(_DWORD *)(v131[0] + v75) = -698416192;
  i += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v125, (uint64_t)v129, v63, v64, v65, v66, v67, v68);
  v83 = i;
  if (i + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v76, v77, v78, v79, v80, v81, v82);
    v83 = i;
  }
  *(_DWORD *)(v131[0] + v83) = 509739008;
  v84 = i + 4;
  for (i = v84; (int)v84 < v130; i = v84)
  {
    if (v84 + 4 > v132)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v76, v77, v78, v79, v80, v81, v82);
      v84 = i;
    }
    *(_DWORD *)(v131[0] + v84) = -721215457;
    v84 = i + 4;
  }
  v85 = v84;
  if (v84 + 4 > v132)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v131, v76, v77, v78, v79, v80, v81, v82);
    v85 = i;
  }
  *(_DWORD *)(v131[0] + v85) = 335544320;
  i += 4;
  if (v135)
    v86 = 69;
  else
    v86 = 65;
  v127 = v84;
  LODWORD(v128) = 0;
  BYTE4(v128) = v86;
  *(_WORD *)((char *)&v128 + 5) = 15;
  HIBYTE(v128) = -1;
  v118 = v56;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(&v127, &v118, (uint64_t)v129, v78, v79, v80, v81, v82);
  v94 = *((_QWORD *)this + 11305);
  v96 = *(_QWORD *)(v94 + 88);
  v95 = *(unsigned int **)(v94 + 96);
  if (v95)
  {
    do
      v97 = __ldaxr(v95);
    while (__stlxr(v97 + 1, v95));
    do
    {
      v98 = __ldaxr(v95);
      v99 = v98 - 1;
    }
    while (__stlxr(v99, v95));
    if (!v99)
    {
      atomic_store(1u, v95);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v95, v87, v88, v89, v90, v91, v92, v93);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
  }
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v129, v96, "abs", v90, v91, v92, v93);
  v107 = v140;
  if (v140)
  {
    v140 = 0;
    v141 = 0;
    WTF::fastFree((unint64_t)v107, v100, v101, v102, v103, v104, v105, v106);
  }
  v108 = v136;
  if (&v139 != (uint64_t *)v136 && v136)
  {
    v136 = 0;
    v137 = 0;
    WTF::fastFree((unint64_t)v108, v100, v101, v102, v103, v104, v105, v106);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v129, v100, v101, v102, v103, v104, v105, v106);
}

uint64_t JSC::imulThunkGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int i;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int j;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  _DWORD *v48;
  unint64_t *v49;
  unsigned int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int k;
  unsigned int v65;
  unint64_t v66;
  unint64_t v67;
  _DWORD *v68;
  unint64_t *v69;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  _DWORD *v82;
  unint64_t *v83;
  unsigned int v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int m;
  unsigned int v99;
  unint64_t v100;
  unint64_t v101;
  _DWORD *v102;
  unint64_t *v103;
  unsigned int *v104;
  uint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unint64_t v132;
  _BYTE v133[12];
  unsigned int v134;
  unint64_t v135;
  _DWORD v136[13];
  signed int v137;
  _QWORD v138[17];
  unsigned int v139;
  unsigned int v140;
  int v141;
  char v142;
  uint64_t *v143;
  int v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  uint64_t v149;

  v149 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v136, this, 2);
  *(_QWORD *)v133 = 0xFFFFFFFFLL;
  *(_DWORD *)&v133[8] = -16773311;
  v12 = v140;
  if (v140 + 4 > v139)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v138, v5, v6, v7, v8, v9, v10, v11);
    v12 = v140;
  }
  *(_DWORD *)(v138[0] + v12) = -129825888;
  v140 += 4;
  JSC::MacroAssemblerARM64::branch64((uint64_t)v136, 3, 0, 27, v8, v9, v10, v11, (uint64_t)&v134);
  JSC::MacroAssemblerARM64::and64((uint64_t)v136, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, 0, 0);
  *(_DWORD *)v133 = v134;
  *(_QWORD *)&v133[4] = v135;
  for (i = v140; (int)i < v137; v140 = i)
  {
    if (i + 4 > v139)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v138, v13, v14, v15, v16, v17, v18, v19);
      i = v140;
    }
    *(_DWORD *)(v138[0] + i) = -721215457;
    i = v140 + 4;
  }
  v141 = 0;
  v21 = i;
  if (i + 4 > v139)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v138, v13, v14, v15, v16, v17, v18, v19);
    v21 = v140;
  }
  *(_DWORD *)(v138[0] + v21) = -129793119;
  v140 += 4;
  JSC::MacroAssemblerARM64::branch64((uint64_t)v136, 3, 1, 27, v16, v17, v18, v19, (uint64_t)&v134);
  JSC::MacroAssemblerARM64::and64((uint64_t)v136, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, 1, 1);
  v131 = v134;
  v132 = v135;
  for (j = v140; (int)j < v137; v140 = j)
  {
    if (j + 4 > v139)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v138, v22, v23, v24, v25, v26, v27, v28);
      j = v140;
    }
    *(_DWORD *)(v138[0] + j) = -721215457;
    j = v140 + 4;
  }
  v141 = 0;
  v30 = j;
  if (j + 4 > v139)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v138, v22, v23, v24, v25, v26, v27, v28);
    v30 = v140;
  }
  *(_DWORD *)(v138[0] + v30) = 453082112;
  v140 += 4;
  JSC::SpecializedThunkJIT::returnInt32(v136, 0, v23, v24, v25, v26, v27, v28);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v133, (uint64_t)v136, v31, v32, v33, v34, v35, v36);
  JSC::JSInterfaceJIT::emitLoadDouble((uint64_t)&v134, (uint64_t)v136, 6, 0, v37, v38, v39, v40);
  v46 = v134;
  if (v134 != -1)
  {
    v47 = v145;
    if (v145 == v144)
    {
      v48 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v143, (void *)(v145 + 1), (unint64_t)&v134, v41, v42, v43, v44, v45);
      v50 = *v48;
      v49 = (unint64_t *)(v48 + 1);
      v46 = v50;
      v47 = v145;
    }
    else
    {
      v49 = &v135;
    }
    v51 = (char *)v143 + 12 * v47;
    *(_DWORD *)v51 = v46;
    *(_QWORD *)(v51 + 4) = *v49;
    ++v145;
  }
  JSC::MacroAssemblerARM64::branchTruncateDoubleToInt32((uint64_t)v136, 0, 0, 1, v42, v43, v44, v45, (uint64_t)&v134);
  v130 = i;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(&v134, &v130, (uint64_t)v136, v52, v53, v54, v55, v56);
  for (k = v140; (int)k < v137; v140 = k)
  {
    if (k + 4 > v139)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v138, v57, v58, v59, v60, v61, v62, v63);
      k = v140;
    }
    *(_DWORD *)(v138[0] + k) = -721215457;
    k = v140 + 4;
  }
  v65 = k;
  if (k + 4 > v139)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v138, v57, v58, v59, v60, v61, v62, v63);
    v65 = v140;
  }
  *(_DWORD *)(v138[0] + v65) = 335544320;
  v140 += 4;
  if (v142)
    v66 = 0xFF000F4500000000;
  else
    v66 = 0xFF000F4100000000;
  v134 = k;
  v135 = v66;
  if (k != -1)
  {
    if (v145 == v144)
    {
      v67 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v143, (void *)(v145 + 1), (unint64_t)&v134, v59, v60, v61, v62, v63);
      v68 = (_DWORD *)v143 + 3 * v145;
      *v68 = *(_DWORD *)v67;
      v69 = (unint64_t *)(v68 + 1);
      v66 = *(_QWORD *)(v67 + 4);
    }
    else
    {
      v70 = (unsigned int *)v143 + 3 * v145;
      *v70 = k;
      v69 = (unint64_t *)(v70 + 1);
    }
    *v69 = v66;
    ++v145;
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v131, (uint64_t)v136, v58, v59, v60, v61, v62, v63);
  JSC::JSInterfaceJIT::emitLoadDouble((uint64_t)&v134, (uint64_t)v136, 7, 1, v71, v72, v73, v74);
  v80 = v134;
  if (v134 != -1)
  {
    v81 = v145;
    if (v145 == v144)
    {
      v82 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v143, (void *)(v145 + 1), (unint64_t)&v134, v75, v76, v77, v78, v79);
      v84 = *v82;
      v83 = (unint64_t *)(v82 + 1);
      v80 = v84;
      v81 = v145;
    }
    else
    {
      v83 = &v135;
    }
    v85 = (char *)v143 + 12 * v81;
    *(_DWORD *)v85 = v80;
    *(_QWORD *)(v85 + 4) = *v83;
    ++v145;
  }
  JSC::MacroAssemblerARM64::branchTruncateDoubleToInt32((uint64_t)v136, 0, 1, 1, v76, v77, v78, v79, (uint64_t)&v134);
  v129 = j;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(&v134, &v129, (uint64_t)v136, v86, v87, v88, v89, v90);
  for (m = v140; (int)m < v137; v140 = m)
  {
    if (m + 4 > v139)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v138, v91, v92, v93, v94, v95, v96, v97);
      m = v140;
    }
    *(_DWORD *)(v138[0] + m) = -721215457;
    m = v140 + 4;
  }
  v99 = m;
  if (m + 4 > v139)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v138, v91, v92, v93, v94, v95, v96, v97);
    v99 = v140;
  }
  *(_DWORD *)(v138[0] + v99) = 335544320;
  v140 += 4;
  if (v142)
    v100 = 0xFF000F4500000000;
  else
    v100 = 0xFF000F4100000000;
  v134 = m;
  v135 = v100;
  if (m != -1)
  {
    if (v145 == v144)
    {
      v101 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v143, (void *)(v145 + 1), (unint64_t)&v134, v93, v94, v95, v96, v97);
      v102 = (_DWORD *)v143 + 3 * v145;
      *v102 = *(_DWORD *)v101;
      v103 = (unint64_t *)(v102 + 1);
      v100 = *(_QWORD *)(v101 + 4);
    }
    else
    {
      v104 = (unsigned int *)v143 + 3 * v145;
      *v104 = m;
      v103 = (unint64_t *)(v104 + 1);
    }
    *v103 = v100;
    ++v145;
  }
  v105 = *((_QWORD *)this + 11305);
  v107 = *(_QWORD *)(v105 + 88);
  v106 = *(unsigned int **)(v105 + 96);
  if (v106)
  {
    do
      v108 = __ldaxr(v106);
    while (__stlxr(v108 + 1, v106));
    do
    {
      v109 = __ldaxr(v106);
      v110 = v109 - 1;
    }
    while (__stlxr(v110, v106));
    if (!v110)
    {
      atomic_store(1u, v106);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v106, v91, v92, v93, v94, v95, v96, v97);
      WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
    }
  }
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v136, v107, "imul", v94, v95, v96, v97);
  v118 = v147;
  if (v147)
  {
    v147 = 0;
    v148 = 0;
    WTF::fastFree(v118, v111, v112, v113, v114, v115, v116, v117);
  }
  v119 = (unint64_t)v143;
  if (&v146 != v143 && v143)
  {
    v143 = 0;
    v144 = 0;
    WTF::fastFree(v119, v111, v112, v113, v114, v115, v116, v117);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v136, v111, v112, v113, v114, v115, v116, v117);
}

uint64_t JSC::randomThunkGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[360];
  WTF *v46;
  int v47;
  uint64_t v48;
  WTF *v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v45, this, 0);
  JSC::AssemblyHelpers::emitRandomThunk((uint64_t)v45, (uint64_t)this, 0, 1, 2, 3, 0, v5);
  JSC::SpecializedThunkJIT::returnDouble((uint64_t)v45, v6, v7, v8, v9, v10, v11, v12, v13);
  v21 = *((_QWORD *)this + 11305);
  v23 = *(_QWORD *)(v21 + 88);
  v22 = *(unsigned int **)(v21 + 96);
  if (v22)
  {
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 + 1, v22));
    do
    {
      v25 = __ldaxr(v22);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v22));
    if (!v26)
    {
      atomic_store(1u, v22);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v22, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
  }
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v45, v23, "random", v17, v18, v19, v20);
  v34 = v49;
  if (v49)
  {
    v49 = 0;
    v50 = 0;
    WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
  }
  v35 = v46;
  if (&v48 != (uint64_t *)v46 && v46)
  {
    v46 = 0;
    v47 = 0;
    WTF::fastFree((unint64_t)v35, v27, v28, v29, v30, v31, v32, v33);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v45, v27, v28, v29, v30, v31, v32, v33);
}

uint64_t JSC::boundFunctionCallGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  int *v3;
  uint64_t *v4;
  unint64_t v7;
  pthread_key_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  WTF *v17;
  char *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  const char *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint8x8_t v74;
  __int32 v75;
  uint8x8_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int8x8_t v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int i;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int8x8_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int8x8_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  unsigned int v163;
  _DWORD *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int8x8_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int k;
  unsigned int v198;
  char v199;
  _DWORD *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int m;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int8x8_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int8x8_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int8x8_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  int n;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int8x8_t v304;
  unsigned int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  _DWORD *v313;
  uint64_t *v314;
  int v315;
  _DWORD *v316;
  uint64_t *v317;
  _DWORD *v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  char v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unsigned int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unsigned int v359;
  unint64_t v360;
  pthread_key_t *v361;
  void *v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  WTF *v370;
  unsigned int v371;
  char v372;
  void *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  void *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  WTF *v387;
  WTF *v388;
  char v390;
  char v391;
  uint64_t v392;
  _BYTE *v393;
  uint64_t v394;
  uint64_t *v395;
  _QWORD *v396;
  int v397;
  int v398;
  uint64_t v399;
  WTF *v400;
  uint64_t v401;
  _BYTE v402[24];
  unsigned int v403[3];
  unsigned int v404[3];
  unsigned int v405[3];
  int v406;
  int v407;
  int v408;
  char v409;
  __int16 v410;
  char v411;
  int v412;
  unsigned int v413[3];
  int v414;
  uint64_t v415;
  WTF *p_dst;
  uint64_t v417;
  _BYTE v418[24];
  int v419;
  unsigned int v420[3];
  unsigned int v421[3];
  char v422;
  char **v423;
  char *v424;
  void *__dst;
  uint64_t v426;
  uint64_t v427;
  WTF *v428;
  _BYTE v429[128];
  unsigned int v430;
  char v431;
  int v432;
  int v433;
  __int128 v434;
  __int128 v435;
  uint64_t v436;
  _DWORD v437[6];
  char v438;
  uint64_t v439;
  uint64_t v440;
  unint64_t v441;
  WTF *v442;
  _BYTE v443[128];
  unsigned int v444;
  unsigned int j;
  int v446;
  char v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  _DWORD *v451;
  char v452;
  uint64_t v453;
  int v454;
  _DWORD *v455;
  char v456;
  uint64_t v457;
  int v458;
  char v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;

  v462 = *MEMORY[0x1E0C80C00];
  LOBYTE(v437[0]) = 0;
  v438 = 0;
  v440 = 0;
  v439 = 0;
  v441 = 0x8000000080000000;
  v442 = (WTF *)v443;
  v444 = 128;
  v7 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v7 != -1)
  {
    __dst = &v400;
    p_dst = (WTF *)&__dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v8 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v16 = (char *)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v16)
  {
    v16 = (char *)WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data(v16, v8);
  }
  v18 = v16 + 8;
  v17 = *(WTF **)v16;
  v19 = v444;
  if (*(char **)v16 != v16 + 8)
  {
    v20 = *((_DWORD *)v16 + 34);
    if (v444 < v20)
    {
      if (v442 && v442 != (WTF *)v443)
      {
        WTF::fastFree((unint64_t)v442, v9, v10, v11, v12, v13, v14, v15);
        v17 = *(WTF **)v16;
        v20 = *((_DWORD *)v16 + 34);
      }
      v442 = v17;
      v444 = v20;
      *(_QWORD *)v16 = v18;
      *((_DWORD *)v16 + 34) = 128;
      v19 = v444;
    }
  }
  v21 = 0;
  v447 = 1;
  j = 0;
  v446 = 0;
  v448 = 0u;
  v449 = 0u;
  v450 = 0u;
  v452 = 16;
  v454 = 0x10000;
  v451 = v437;
  v453 = 0;
  v455 = v437;
  v456 = 17;
  v457 = 0;
  v458 = 0x20000;
  v459 = 0;
  v461 = 0;
  v460 = 0;
  if (v19 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v21 = j;
  }
  *(_DWORD *)((char *)v442 + v21) = -1447068675;
  v22 = j;
  v23 = j + 4;
  j += 4;
  if (v22 + 8 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v23 = j;
  }
  *(_DWORD *)((char *)v442 + v23) = -1862269955;
  v24 = j;
  v25 = j + 4;
  j += 4;
  if (v24 + 8 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v25 = j;
  }
  *(_DWORD *)((char *)v442 + v25) = -134151233;
  v26 = j;
  v27 = j + 4;
  j += 4;
  if (v26 + 8 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v27 = j;
  }
  *(_DWORD *)((char *)v442 + v27) = -1207811137;
  v28 = j;
  v29 = j + 4;
  j += 4;
  if (v28 + 8 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v29 = j;
  }
  *(_DWORD *)((char *)v442 + v29) = -129924192;
  v30 = j;
  v31 = j + 4;
  j += 4;
  if (v30 + 8 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v31 = j;
  }
  *(_DWORD *)((char *)v442 + v31) = -1203404798;
  v32 = j;
  v33 = j + 4;
  j += 4;
  if (v32 + 8 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v33 = j;
  }
  *(_DWORD *)((char *)v442 + v33) = -1203633247;
  v34 = j;
  v35 = j + 4;
  j += 4;
  if (v34 + 8 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v35 = j;
  }
  *(_DWORD *)((char *)v442 + v35) = -1442774045;
  v36 = j;
  v37 = j + 4;
  j += 4;
  if (v36 + 8 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v37 = j;
  }
  *(_DWORD *)((char *)v442 + v37) = 184680481;
  v38 = j;
  v39 = j + 4;
  j += 4;
  if (v38 + 8 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v39 = j;
  }
  *(_DWORD *)((char *)v442 + v39) = 285215778;
  v40 = j;
  v41 = j + 4;
  j += 4;
  if (v40 + 8 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v41 = j;
  }
  *(_DWORD *)((char *)v442 + v41) = 1394438210;
  v42 = j;
  v43 = j + 4;
  j += 4;
  if (v42 + 8 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v43 = j;
  }
  *(_DWORD *)((char *)v442 + v43) = 285228098;
  j += 4;
  JSC::MacroAssemblerARM64::and32((uint64_t)v437, (JSC::ARM64LogicalImmediate *)0xFFFFFFF0, 2, 2);
  v51 = j;
  if (j + 4 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v44, v45, v46, v47, v48, v49, v50);
    v51 = j;
  }
  *(_DWORD *)((char *)v442 + v51) = -889060382;
  v52 = j;
  v53 = j + 4;
  j += 4;
  if (v52 + 8 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v44, v45, v46, v47, v48, v49, v50);
    v53 = j;
  }
  *(_DWORD *)((char *)v442 + v53) = -1960680478;
  j += 4;
  if (!v447)
  {
    v63 = "/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h";
    v64 = "RegisterID JSC::MacroAssemblerARM64::getCachedDataTempRegisterIDAndInvalidate()";
    v65 = 121;
    __break(0xC471u);
LABEL_194:
    __break(1u);
    goto LABEL_195;
  }
  v4 = &v415;
  v3 = &v408;
  v395 = &v399;
  v451[52] &= ~v454;
  JSC::MacroAssemblerARM64::load64((uint64_t)v437, (uint64_t)this + 8, v452, v46, v47, v48, v49, v50);
  JSC::MacroAssemblerARM64::branch64((uint64_t)v437, 9, 16, 2, v54, v55, v56, v57, (uint64_t)v421);
  v16 = (char *)this + 48;
  LOWORD(v18) = 3;
  JSC::MacroAssemblerARM64::load64((uint64_t)v437, (uint64_t)this + 48, 3, v58, v59, v60, v61, v62);
  JSC::AssemblyHelpers::copyCalleeSavesToEntryFrameCalleeSavesBufferImpl((char *)v437, 3);
  v66 = j;
  if (j + 4 > v444)
  {
LABEL_195:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, (uint64_t)v63, (uint64_t)v64, v65, v47, v48, v49, v50);
    v66 = j;
  }
  *(_DWORD *)((char *)v442 + v66) = -129957885;
  j += 4;
  __dst = &v427;
  LOWORD(v427) = (_WORD)v18;
  v426 = 0x100000001;
  LOWORD(v18) = 1;
  v67 = 1;
  do
  {
    v68 = 0;
    v69 = 0;
    v70 = (char *)__dst;
    v71 = v67;
    do
    {
      if ((*((_BYTE *)__dst + v68 + 1) & 0x40) != 0)
        goto LABEL_194;
      v69 |= 1 << *((_BYTE *)__dst + v68 + 1);
      v68 += 2;
    }
    while (2 * v67 != v68);
    v72 = 0;
    do
    {
      v73 = *((_BYTE *)__dst + v72) & 0x7F;
      if (v73 >= 0x40)
        goto LABEL_194;
      v69 &= ~(1 << v73);
      v72 += 2;
    }
    while (2 * v67 != v72);
    v74 = (uint8x8_t)vcnt_s8((int8x8_t)v69);
    v74.i16[0] = vaddlv_u8(v74);
    v75 = v74.i32[0];
    v76 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v69));
    v76.i16[0] = vaddlv_u8(v76);
    if (v76.i32[0] + v75)
    {
      v77 = 0;
      if (v67 <= 1uLL)
        v78 = 1;
      else
        v78 = v67;
      v79 = 2 * v78;
      while (1)
      {
        v80 = *((unsigned __int8 *)__dst + v77 + 1);
        if ((v80 & 0x7Fu) >= 0x40)
          goto LABEL_194;
        if (((v69 >> (v80 & 0x7F)) & 1) != 0)
          break;
        v77 += 2;
        if (v79 == v77)
          goto LABEL_66;
      }
      v81 = *((unsigned __int8 *)__dst + v77);
      if (v81 == v80)
      {
LABEL_65:
        memmove(&v70[v77], &v70[v77 + 2], 2 * v71 - v77 - 2);
        v67 = --HIDWORD(v426);
        continue;
      }
      if ((char)v81 == 63)
      {
        v82 = j;
        if (v80 != 31)
        {
          v84 = v80 & 0x1F | 0xD2800000;
          goto LABEL_62;
        }
      }
      else
      {
        v82 = j;
        if ((char)v80 != 31 && (char)v81 != 31)
        {
          v84 = v80 & 0xFFE0FFFF | ((v81 & 0x1F) << 16) | 0xAA0003E0;
LABEL_62:
          if (v82 + 4 > v444)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, (uint64_t)v63, (uint64_t)v64, v65, v47, v48, v49, v50);
            v82 = j;
          }
          *(_DWORD *)((char *)v442 + v82) = v84;
          j += 4;
          v70 = (char *)__dst;
          v71 = HIDWORD(v426);
          goto LABEL_65;
        }
      }
      v84 = (char)v80 | (32 * (char)v81) | 0x91000000;
      goto LABEL_62;
    }
    v390 = *(_BYTE *)__dst;
    v391 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)v437, *(char *)__dst, v391, v65, v47, v48, v49, v50);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v426) - 2);
    v392 = --HIDWORD(v426);
    if (HIDWORD(v426))
    {
      v393 = __dst;
      v394 = 2 * v392;
      while (*v393 != v391)
      {
        v393 += 2;
        v394 -= 2;
        if (!v394)
          goto LABEL_224;
      }
      *v393 = v390;
    }
LABEL_224:
    WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,1u>(std::array<JSC::ARM64Registers::RegisterID,1u>,std::array<JSC::ARM64Registers::RegisterID,1u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&p_dst, 0);
    v67 = HIDWORD(v426);
LABEL_66:
    ;
  }
  while (v67);
  v85 = __dst;
  if (&v427 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v426) = 0;
    WTF::fastFree((unint64_t)v85, v63, (uint64_t)v64, v65, v47, v48, v49, v50);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v437, (uint64_t)operationThrowStackOverflowErrorFromThunk, 8, v65, v47, v48, v49, v50);
  v446 = 0;
  v93 = j;
  if (j + 4 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v86, v87, v88, v89, v90, v91, v92);
    v93 = j;
  }
  *(_DWORD *)((char *)v442 + v93) = -700514048;
  j += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)v437, (uint64_t)this + 90488, 1, v88, v89, v90, v91, v92);
  v101 = j;
  if (j + 4 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v94, v95, v96, v97, v98, v99, v100);
    v101 = j;
  }
  *(_DWORD *)((char *)v442 + v101) = -702611424;
  j += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v421, (uint64_t)v437, v95, v96, v97, v98, v99, v100);
  v110 = j;
  if (j + 4 > v444)
  {
    v109 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v102, v103, v104, v105, v106, v107, v108).n128_u64[0];
    v110 = j;
  }
  *(_DWORD *)((char *)v442 + v110) = -1862270881;
  v111 = j;
  v112 = j + 4;
  j += 4;
  if (v111 + 8 > v444)
  {
    v109 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v102, v103, v104, v105, v106, v107, v108).n128_u64[0];
    v112 = j;
  }
  *(_DWORD *)((char *)v442 + v112) = -1207893023;
  v113 = j;
  v114 = j + 4;
  j += 4;
  if (v113 + 8 > v444)
  {
    v109 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v102, v103, v104, v105, v106, v107, v108).n128_u64[0];
    v114 = j;
  }
  *(_DWORD *)((char *)v442 + v114) = -129859580;
  v115 = j;
  v116 = j + 4;
  j += 4;
  if (v115 + 8 > v444)
  {
    v109 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v102, v103, v104, v105, v106, v107, v108).n128_u64[0];
    v116 = j;
  }
  *(_DWORD *)((char *)v442 + v116) = -134118428;
  v117 = j;
  v118 = j + 4;
  j += 4;
  if (v117 + 8 > v444)
  {
    v109 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v102, v103, v104, v105, v106, v107, v108).n128_u64[0];
    v118 = j;
  }
  v396 = a2;
  *(_DWORD *)((char *)v442 + v118) = 1358955619;
  v119 = j;
  v120 = j + 4;
  j += 4;
  if (v119 + 8 > v444)
  {
    v109 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v102, v103, v104, v105, v106, v107, v108).n128_u64[0];
    v120 = j;
  }
  *(_DWORD *)((char *)v442 + v120) = 1358955553;
  j += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)v437, 0, 3, v105, v106, v107, v108, (uint64_t)v420, v109);
  for (i = j; i < SHIDWORD(v441); j = i)
  {
    if (i + 4 > v444)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v121, v122, v123, v124, v125, v126, v127);
      i = j;
    }
    *(_DWORD *)((char *)v442 + i) = -721215457;
    i = j + 4;
  }
  v446 = 0;
  v129 = i;
  if (i + 4 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v121, v122, v123, v124, v125, v126, v127);
    v129 = j;
  }
  *(_DWORD *)((char *)v442 + v129) = 1358955619;
  v130 = j;
  v131 = j + 4;
  j += 4;
  if (v130 + 8 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v121, v122, v123, v124, v125, v126, v127);
    v131 = j;
  }
  *(_DWORD *)((char *)v442 + v131) = 1358955553;
  j += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)v437, 0x30000031DuLL, 0x200000030uLL, 4, v124, v125, v126, v127);
  JSC::MacroAssemblerARM64::store64((uint64_t)v437, 4, 0x30000011FuLL, 0x200000020uLL, v132, v133, v134, v135);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)v437, 1, 3, v136, v137, v138, v139, (uint64_t)&__dst, v140);
  v419 = i;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&__dst, (unsigned int *)&v419, (uint64_t)v437, v141, v142, v143, v144, v145);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v420, (uint64_t)v437, v146, v147, v148, v149, v150, v151);
  p_dst = (WTF *)v418;
  v417 = 2;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)v437, 0, 1, v152, v153, v154, v155, (uint64_t)&v414, v156);
  v162 = v414;
  if (v414 != -1)
  {
    v163 = HIDWORD(v417);
    if (HIDWORD(v417) == (_DWORD)v417)
    {
      v164 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v417) + 1), (unint64_t)&v414, v157, v158, v159, v160, v161);
      v4 = (uint64_t *)(v164 + 1);
      v162 = *v164;
      v163 = HIDWORD(v417);
    }
    v165 = (char *)p_dst + 12 * v163;
    *(_DWORD *)v165 = v162;
    *(_QWORD *)(v165 + 4) = *v4;
    ++HIDWORD(v417);
  }
  JSC::MacroAssemblerARM64::branch32((uint64_t)v437, 9, 1, 3, v158, v159, v160, v161, (uint64_t)v413);
  v173 = j;
  if (j + 4 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v166, v167, v168, v169, v170, v171, v172);
    v173 = j;
  }
  *(_DWORD *)((char *)v442 + v173) = -129826813;
  v174 = j + 4;
  for (j = v174; v174 < SHIDWORD(v441); j = v174)
  {
    if (v174 + 4 > v444)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v166, v167, v168, v169, v170, v171, v172);
      v174 = j;
    }
    *(_DWORD *)((char *)v442 + v174) = -721215457;
    v174 = j + 4;
  }
  v446 = 0;
  v175 = v174;
  if (v174 + 4 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v166, v167, v168, v169, v170, v171, v172);
    v175 = j;
  }
  *(_DWORD *)((char *)v442 + v175) = 1358955553;
  j += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)v437, 0x300000103uLL, 0x200000010uLL, 4, v169, v170, v171, v172);
  JSC::MacroAssemblerARM64::store64((uint64_t)v437, 4, 0x30000011FuLL, 0x200000020uLL, v176, v177, v178, v179);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)v437, 1, 1, v180, v181, v182, v183, (uint64_t)&__dst, v184);
  v412 = v174;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&__dst, (unsigned int *)&v412, (uint64_t)v437, v185, v186, v187, v188, v189);
  for (k = j; k < SHIDWORD(v441); j = k)
  {
    if (k + 4 > v444)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v190, v191, v192, v193, v194, v195, v196);
      k = j;
    }
    *(_DWORD *)((char *)v442 + k) = -721215457;
    k = j + 4;
  }
  v198 = k;
  if (k + 4 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v190, v191, v192, v193, v194, v195, v196);
    v198 = j;
  }
  *(_DWORD *)((char *)v442 + v198) = 335544320;
  j += 4;
  if (v459)
    v199 = 69;
  else
    v199 = 65;
  v407 = k;
  v408 = 0;
  v409 = v199;
  v410 = 15;
  v411 = -1;
  if (k != -1)
  {
    if (HIDWORD(v417) == (_DWORD)v417)
    {
      v200 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_dst, (void *)(HIDWORD(v417) + 1), (unint64_t)&v407, v192, v193, v194, v195, v196);
      v3 = v200 + 1;
      v201 = (char *)p_dst + 12 * HIDWORD(v417);
      *(_DWORD *)v201 = *v200;
    }
    else
    {
      v201 = (char *)p_dst + 12 * HIDWORD(v417);
      *(_DWORD *)v201 = k;
    }
    *(_QWORD *)(v201 + 4) = *(_QWORD *)v3;
    ++HIDWORD(v417);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v413, (uint64_t)v437, v191, v192, v193, v194, v195, v196);
  for (m = j; m < SHIDWORD(v441); j = m)
  {
    if (m + 4 > v444)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v202, v203, v204, v205, v206, v207, v208);
      m = j;
    }
    *(_DWORD *)((char *)v442 + m) = -721215457;
    m = j + 4;
  }
  v446 = 0;
  v210 = m;
  if (m + 4 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v202, v203, v204, v205, v206, v207, v208);
    v210 = j;
  }
  *(_DWORD *)((char *)v442 + v210) = 1358955553;
  j += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)v437, 0x300000100uLL, 0x200000030uLL, 4, v205, v206, v207, v208);
  JSC::MacroAssemblerARM64::store64((uint64_t)v437, 4, 0x30000011FuLL, 0x200000020uLL, v211, v212, v213, v214);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)v437, 1, 1, v215, v216, v217, v218, (uint64_t)&__dst, v219);
  v406 = m;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&__dst, (unsigned int *)&v406, (uint64_t)v437, v220, v221, v222, v223, v224);
  if (HIDWORD(v417))
  {
    v233 = 0;
    v234 = 0;
    v235 = 12 * HIDWORD(v417);
    do
    {
      if (v234 >= HIDWORD(v417))
      {
        __break(0xC471u);
        JUMPOUT(0x1988184ECLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)p_dst + v233), (uint64_t)v437, v226, v227, v228, v229, v230, v231);
      ++v234;
      v233 += 12;
    }
    while (v235 != v233);
  }
  v236 = j;
  if (j + 4 > v444)
  {
    v232 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v225, v226, v227, v228, v229, v230, v231).n128_u64[0];
    v236 = j;
  }
  *(_DWORD *)((char *)v442 + v236) = -129892350;
  v237 = j;
  v238 = j + 4;
  j += 4;
  if (v237 + 8 > v444)
  {
    v232 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v225, v226, v227, v228, v229, v230, v231).n128_u64[0];
    v238 = j;
  }
  *(_DWORD *)((char *)v442 + v238) = -134183966;
  v239 = j;
  v240 = j + 4;
  j += 4;
  if (v239 + 8 > v444)
  {
    v232 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v225, v226, v227, v228, v229, v230, v231).n128_u64[0];
    v240 = j;
  }
  *(_DWORD *)((char *)v442 + v240) = -129925055;
  j += 4;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v437, 0, 1, 1, v228, v229, v230, v231, (uint64_t)v405, v232);
  v248 = j;
  if (j + 4 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v241, v242, v243, v244, v245, v246, v247);
    v248 = j;
  }
  *(_DWORD *)((char *)v442 + v248) = -129830879;
  j += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v405, (uint64_t)v437, v242, v243, v244, v245, v246, v247);
  v257 = j;
  if (j + 4 > v444)
  {
    v256 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v249, v250, v251, v252, v253, v254, v255).n128_u64[0];
    v257 = j;
  }
  *(_DWORD *)((char *)v442 + v257) = -129925086;
  j += 4;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v437, 0, 2, 0xFFFFFFFFLL, v252, v253, v254, v255, (uint64_t)v404, v256);
  if (!v447)
  {
    __break(0xC471u);
    goto LABEL_234;
  }
  v455[52] &= ~v458;
  v265 = v456 & 0x1F | 0x38405020;
  v266 = j;
  if (j + 4 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v258, v259, v260, v261, v262, v263, v264);
    v266 = j;
  }
  *(_DWORD *)((char *)v442 + v266) = v265;
  j += 4;
  JSC::MacroAssemblerARM64::branch32((uint64_t)v437, 1, 17, 12, v261, v262, v263, v264, (uint64_t)v403);
  v274 = j;
  if (j + 4 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v267, v268, v269, v270, v271, v272, v273);
    v274 = j;
  }
  *(_DWORD *)((char *)v442 + v274) = -129630173;
  v275 = j;
  v276 = j + 4;
  j += 4;
  if (v275 + 8 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v267, v268, v269, v270, v271, v272, v273);
    v276 = j;
  }
  *(_DWORD *)((char *)v442 + v276) = -134216733;
  j += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v403, (uint64_t)v437, v268, v269, v270, v271, v272, v273);
  for (n = j; n < SHIDWORD(v441); j = n)
  {
    if (n + 4 > v444)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v277, v278, v279, v280, v281, v282, v283);
      n = j;
    }
    *(_DWORD *)((char *)v442 + n) = -721215457;
    n = j + 4;
  }
  v446 = 0;
  v285 = n;
  if (n + 4 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v277, v278, v279, v280, v281, v282, v283);
    v285 = j;
  }
  *(_DWORD *)((char *)v442 + v285) = -700514240;
  v286 = j;
  v287 = j + 4;
  j += 4;
  if (v286 + 8 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v277, v278, v279, v280, v281, v282, v283);
    v287 = j;
  }
  *(_DWORD *)((char *)v442 + v287) = -1862270017;
  v288 = j;
  v289 = j + 4;
  j += 4;
  if (v288 + 8 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v277, v278, v279, v280, v281, v282, v283);
    v289 = j;
  }
  *(_DWORD *)((char *)v442 + v289) = -1463714819;
  v290 = j;
  v291 = j + 4;
  j += 4;
  if (v290 + 8 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v277, v278, v279, v280, v281, v282, v283);
    v291 = j;
  }
  *(_DWORD *)((char *)v442 + v291) = -698416192;
  j += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v404, (uint64_t)v437, v278, v279, v280, v281, v282, v283);
  v400 = (WTF *)v402;
  v401 = 2;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v437, (uint64_t)operationMaterializeBoundFunctionTargetCode, 8, v292, v293, v294, v295, v296);
  v446 = 0;
  v305 = j;
  if (j + 4 > v444)
  {
    v304 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v297, v298, v299, v300, v301, v302, v303).n128_u64[0];
    v305 = j;
  }
  *(_DWORD *)((char *)v442 + v305) = -700514048;
  j += 4;
  JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)v437, (uint64_t)this, 0, 0, 0xFFFFFFFFLL, v301, v302, v303, (uint64_t)&v398, v304);
  if (v398 != -1)
  {
    if (HIDWORD(v401) == (_DWORD)v401)
    {
      v313 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v400, (void *)(HIDWORD(v401) + 1), (unint64_t)&v398, v308, v309, v310, v311, v312);
      v315 = *v313;
      v314 = (uint64_t *)(v313 + 1);
      v316 = (_DWORD *)((char *)v400 + 12 * HIDWORD(v401));
      *v316 = v315;
      v317 = (uint64_t *)(v316 + 1);
    }
    else
    {
      v318 = (_DWORD *)((char *)v400 + 12 * HIDWORD(v401));
      *v318 = v398;
      v317 = (uint64_t *)(v318 + 1);
      v314 = v395;
    }
    *v317 = *v314;
    ++HIDWORD(v401);
  }
  v319 = j;
  if (j + 4 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v306, v307, v308, v309, v310, v311, v312);
    v319 = j;
  }
  *(_DWORD *)((char *)v442 + v319) = -134216735;
  v320 = j;
  v321 = j + 4;
  j += 4;
  if (v320 + 8 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v306, v307, v308, v309, v310, v311, v312);
    v321 = j;
  }
  *(_DWORD *)((char *)v442 + v321) = -1442839582;
  v322 = j + 4;
  for (j = v322; (int)v322 < SHIDWORD(v441); j = v322)
  {
    if (v322 + 4 > v444)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v306, v307, v308, v309, v310, v311, v312);
      v322 = j;
    }
    *(_DWORD *)((char *)v442 + v322) = -721215457;
    v322 = j + 4;
  }
  v323 = v322;
  if (v322 + 4 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v306, v307, v308, v309, v310, v311, v312);
    v323 = j;
  }
  *(_DWORD *)((char *)v442 + v323) = 335544320;
  j += 4;
  if (v459)
    v324 = 69;
  else
    v324 = 65;
  __dst = (void *)v322;
  LOBYTE(v426) = v324;
  *(_WORD *)((char *)&v426 + 1) = 15;
  BYTE3(v426) = -1;
  v397 = n;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&__dst, (unsigned int *)&v397, (uint64_t)v437, v308, v309, v310, v311, v312);
  if (HIDWORD(v401))
  {
    v331 = 0;
    v332 = 0;
    v333 = 12 * HIDWORD(v401);
    while (v332 < HIDWORD(v401))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v400 + v331), (uint64_t)v437, v325, v326, v327, v328, v329, v330);
      ++v332;
      v331 += 12;
      if (v333 == v331)
        goto LABEL_165;
    }
    __break(0xC471u);
LABEL_234:
    JUMPOUT(0x198818264);
  }
LABEL_165:
  JSC::MacroAssemblerARM64::load64((uint64_t)v437, (uint64_t)v16, 0, v326, v327, v328, v329, v330);
  JSC::AssemblyHelpers::copyCalleeSavesToEntryFrameCalleeSavesBufferImpl((char *)v437, 0);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v437, (uint64_t)this, 0, v334, v335, v336, v337, v338);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v437, (uint64_t)operationLookupExceptionHandler, 8, v339, v340, v341, v342, v343);
  v446 = 0;
  v351 = j;
  if (j + 4 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v344, v345, v346, v347, v348, v349, v350);
    v351 = j;
  }
  *(_DWORD *)((char *)v442 + v351) = -700514048;
  j += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)v437, (uint64_t)this + 90488, 1, v346, v347, v348, v349, v350);
  v359 = j;
  if (j + 4 > v444)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v442, v352, v353, v354, v355, v356, v357, v358);
    v359 = j;
  }
  *(_DWORD *)((char *)v442 + v359) = -702611424;
  j += 4;
  __dst = 0;
  v426 = 0;
  v427 = -1;
  v428 = (WTF *)v429;
  v430 = 128;
  v360 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v360 != -1)
  {
    v424 = &v422;
    v423 = &v424;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v423, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v361 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v369 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v369)
  {
    v369 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v369, v361);
  }
  v370 = *(WTF **)v369;
  if (*(_QWORD *)v369 != v369 + 8)
  {
    v371 = *(_DWORD *)(v369 + 136);
    if (v430 < v371)
    {
      if (v428 && v428 != (WTF *)v429)
      {
        WTF::fastFree((unint64_t)v428, v362, v363, v364, v365, v366, v367, v368);
        v370 = *(WTF **)v369;
        v371 = *(_DWORD *)(v369 + 136);
      }
      v428 = v370;
      v430 = v371;
      *(_QWORD *)v369 = v369 + 8;
      *(_DWORD *)(v369 + 136) = 128;
    }
  }
  v372 = 1;
  v431 = 1;
  v432 = 0;
  v433 = 8;
  v434 = 0u;
  v435 = 0u;
  v436 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v437, 1, v364, v365, v366, v367, v368);
  BYTE2(v432) = 1;
  if (byte_1ECF4C288)
  {
LABEL_192:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, v372, "bound", 6, "Specialized thunk for bound function calls with no arguments", v396);
    goto LABEL_182;
  }
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v372 = HIBYTE(word_1ECF4C286) != 0;
    goto LABEL_192;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, "bound", 6, v396);
LABEL_182:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v373, v374, v375, v376, v377, v378, v379);
  v387 = v400;
  if (v402 != (_BYTE *)v400 && v400)
  {
    v400 = 0;
    LODWORD(v401) = 0;
    WTF::fastFree((unint64_t)v387, v380, v381, v382, v383, v384, v385, v386);
  }
  v388 = p_dst;
  if (v418 != (_BYTE *)p_dst && p_dst)
  {
    p_dst = 0;
    LODWORD(v417) = 0;
    WTF::fastFree((unint64_t)v388, v380, v381, v382, v383, v384, v385, v386);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v437, v380, v381, v382, v383, v384, v385, v386);
}

uint64_t JSC::remoteFunctionCallGenerator@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  WTF *v5;
  unint64_t v6;
  pthread_key_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  const char *v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint8x8_t v68;
  __int32 v69;
  uint8x8_t v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  BOOL v77;
  unsigned int v78;
  char v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  int v83;
  char *v84;
  uint64_t v85;
  uint64_t *v86;
  char *v87;
  char *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int8x8_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int8x8_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int *v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  unsigned int v183;
  int *v184;
  char *v185;
  int v186;
  int v187;
  unsigned int v188;
  int *v189;
  char *v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  unint64_t v194;
  WTF *v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  uint8x8_t v199;
  __int32 v200;
  uint8x8_t v201;
  unsigned int v202;
  uint64_t v203;
  int v204;
  int v205;
  int v206;
  int v207;
  unsigned int v208;
  char v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  WTF *v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  char *v218;
  WTF *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int8x8_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int *v236;
  int *v237;
  int v238;
  _DWORD *v239;
  _QWORD *v240;
  _DWORD *v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int8x8_t v271;
  uint64_t *v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int8x8_t v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int8x8_t v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  int *v316;
  int *v317;
  int v318;
  _DWORD *v319;
  _QWORD *v320;
  _DWORD *v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  char v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  int v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  _DWORD *v367;
  uint64_t *v368;
  int v369;
  _DWORD *v370;
  uint64_t *v371;
  _DWORD *v372;
  int v373;
  int *v374;
  int *v375;
  int v376;
  _DWORD *v377;
  _QWORD *v378;
  _DWORD *v379;
  int v380;
  unsigned int v381;
  uint64_t v382;
  unint64_t v383;
  uint64_t *v384;
  uint64_t v385;
  uint64_t v386;
  unsigned int v387;
  uint8x8_t v388;
  __int32 v389;
  uint8x8_t v390;
  unsigned int v391;
  uint64_t v392;
  int v393;
  int v394;
  int v395;
  int v396;
  unsigned int v397;
  char v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t *v402;
  int v403;
  WTF *v404;
  char *v405;
  uint64_t v406;
  int v407;
  char *v408;
  uint64_t *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  int8x8_t v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  _DWORD *v426;
  uint64_t *v427;
  int v428;
  _DWORD *v429;
  uint64_t *v430;
  _DWORD *v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  uint64_t v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  int v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  unint64_t v469;
  pthread_key_t *v470;
  void *v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  unsigned int v480;
  char v481;
  void *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  void *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  WTF *v496;
  unint64_t v497;
  unint64_t v499;
  void *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  int64_t v508;
  char *v509;
  uint64_t *v510;
  int *v511;
  uint64_t *v512;
  int *v513;
  int *v514;
  int v515;
  char *__dst;
  char *__dsta;
  char *v518;
  _QWORD *v519;
  JSC *v520;
  int v521;
  uint64_t v522;
  int v523;
  int v524;
  int v525;
  uint64_t v526;
  WTF *v527;
  uint64_t v528;
  _WORD v529[12];
  unsigned int v530[3];
  unsigned int v531[2];
  char v532;
  __int16 v533;
  char v534;
  int v535;
  int v536;
  unsigned int v537[3];
  unsigned int v538[3];
  int v539;
  int v540;
  int v541;
  int v542;
  uint64_t v543;
  int v544;
  int v545;
  unsigned int v546[3];
  uint64_t **v547;
  uint64_t v548;
  _BYTE v549[24];
  unsigned int v550[3];
  char v551;
  char **v552;
  char *v553;
  uint64_t *v554;
  uint64_t v555;
  uint64_t v556;
  _BYTE *v557;
  _BYTE v558[128];
  unsigned int v559;
  char v560;
  int v561;
  int v562;
  __int128 v563;
  __int128 v564;
  uint64_t v565;
  _DWORD v566[6];
  char v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  _BYTE *v571;
  _BYTE v572[128];
  unsigned int v573;
  int i;
  int v575;
  char v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  _DWORD *v580;
  char v581;
  uint64_t v582;
  int v583;
  _DWORD *v584;
  char v585;
  uint64_t v586;
  int v587;
  char v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;

  v591 = *MEMORY[0x1E0C80C00];
  LOBYTE(v566[0]) = 0;
  v567 = 0;
  v568 = 0;
  v569 = 0;
  v570 = 0x8000000080000000;
  v5 = (WTF *)v572;
  v571 = v572;
  v573 = 128;
  v6 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v6 != -1)
  {
    v554 = (uint64_t *)&v527;
    v547 = &v554;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v547, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v7 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v15 = (unint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v15)
  {
    v15 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v15, v7);
  }
  v17 = v15 + 8;
  v16 = *(_QWORD *)v15;
  v18 = v573;
  if (*(_QWORD *)v15 != v15 + 8)
  {
    v19 = *(_DWORD *)(v15 + 136);
    if (v573 < v19)
    {
      if (v571 && v571 != v572)
      {
        WTF::fastFree((unint64_t)v571, v8, v9, v10, v11, v12, v13, v14);
        v16 = *(_QWORD *)v15;
        v19 = *(_DWORD *)(v15 + 136);
      }
      v571 = (_BYTE *)v16;
      v573 = v19;
      *(_QWORD *)v15 = v17;
      *(_DWORD *)(v15 + 136) = 128;
      v18 = v573;
    }
  }
  v20 = 0;
  v576 = 1;
  i = 0;
  v575 = 0;
  v577 = 0u;
  v578 = 0u;
  v579 = 0u;
  v581 = 16;
  v583 = 0x10000;
  v585 = 17;
  v587 = 0x20000;
  v21 = (uint64_t)v566;
  v580 = v566;
  v582 = 0;
  v584 = v566;
  v586 = 0;
  v588 = 0;
  v589 = 0;
  v590 = 0;
  if (v18 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
    v20 = i;
  }
  *(_DWORD *)&v571[v20] = -1447068675;
  v22 = i;
  v23 = i + 4;
  i += 4;
  if (v22 + 8 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
    v23 = i;
  }
  *(_DWORD *)&v571[v23] = -1862269955;
  v24 = i;
  v25 = i + 4;
  i += 4;
  if (v24 + 8 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
    v25 = i;
  }
  *(_DWORD *)&v571[v25] = -134151233;
  v26 = i;
  v27 = i + 4;
  i += 4;
  if (v26 + 8 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
    v27 = i;
  }
  *(_DWORD *)&v571[v27] = -1207811137;
  v28 = i;
  v29 = i + 4;
  i += 4;
  if (v28 + 8 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
    v29 = i;
  }
  *(_DWORD *)&v571[v29] = -129924192;
  v30 = i;
  v31 = i + 4;
  i += 4;
  if (v30 + 8 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
    v31 = i;
  }
  *(_DWORD *)&v571[v31] = -1203633247;
  v32 = i;
  v33 = i + 4;
  i += 4;
  if (v32 + 8 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
    v33 = i;
  }
  *(_DWORD *)&v571[v33] = 285216802;
  v34 = i;
  v35 = i + 4;
  i += 4;
  if (v34 + 8 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
    v35 = i;
  }
  *(_DWORD *)&v571[v35] = 1394438210;
  v36 = i;
  v37 = i + 4;
  i += 4;
  if (v36 + 8 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
    v37 = i;
  }
  *(_DWORD *)&v571[v37] = 285228098;
  i += 4;
  JSC::MacroAssemblerARM64::and32((uint64_t)v566, (JSC::ARM64LogicalImmediate *)0xFFFFFFF0, 2, 2);
  v45 = i;
  if (i + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v38, v39, v40, v41, v42, v43, v44);
    v45 = i;
  }
  *(_DWORD *)&v571[v45] = -889060382;
  v46 = i;
  v47 = i + 4;
  i += 4;
  if (v46 + 8 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v38, v39, v40, v41, v42, v43, v44);
    v47 = i;
  }
  *(_DWORD *)&v571[v47] = -1960680478;
  i += 4;
  if (!v576)
  {
    v57 = "/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h";
    v58 = "RegisterID JSC::MacroAssemblerARM64::getCachedDataTempRegisterIDAndInvalidate()";
    v59 = 121;
    __break(0xC471u);
LABEL_353:
    __break(1u);
    goto LABEL_354;
  }
  v519 = a2;
  v15 = (unint64_t)&v545;
  v17 = (uint64_t)&v543;
  v513 = &v541;
  v514 = &v536;
  v511 = &v524;
  v512 = &v526;
  v510 = &v522;
  v21 = (uint64_t)&v580;
  v580[52] &= ~v583;
  JSC::MacroAssemblerARM64::load64((uint64_t)v566, this + 8, v581, v40, v41, v42, v43, v44);
  JSC::MacroAssemblerARM64::branch64((uint64_t)v566, 9, 16, 2, v48, v49, v50, v51, (uint64_t)v550);
  LOWORD(v5) = 3;
  v518 = (char *)(this + 48);
  JSC::MacroAssemblerARM64::load64((uint64_t)v566, this + 48, 3, v52, v53, v54, v55, v56);
  JSC::AssemblyHelpers::copyCalleeSavesToEntryFrameCalleeSavesBufferImpl((char *)v566, 3);
  v60 = i;
  if (i + 4 > v573)
  {
LABEL_354:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, (uint64_t)v57, (uint64_t)v58, v59, v41, v42, v43, v44);
    v60 = i;
  }
  *(_DWORD *)&v571[v60] = -129957885;
  i += 4;
  v554 = &v556;
  LOWORD(v556) = (_WORD)v5;
  v555 = 0x100000001;
  v61 = 1;
  v520 = (JSC *)this;
  do
  {
    v62 = 0;
    v63 = 0;
    v64 = v554;
    v65 = v61;
    do
    {
      if ((*((_BYTE *)v554 + v62 + 1) & 0x40) != 0)
        goto LABEL_353;
      v63 |= 1 << *((_BYTE *)v554 + v62 + 1);
      v62 += 2;
    }
    while (2 * v61 != v62);
    v66 = 0;
    do
    {
      v67 = *((_BYTE *)v554 + v66) & 0x7F;
      if (v67 >= 0x40)
        goto LABEL_353;
      v63 &= ~(1 << v67);
      v66 += 2;
    }
    while (2 * v61 != v66);
    v68 = (uint8x8_t)vcnt_s8((int8x8_t)v63);
    v68.i16[0] = vaddlv_u8(v68);
    v69 = v68.i32[0];
    v70 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v63));
    v70.i16[0] = vaddlv_u8(v70);
    if (v70.i32[0] + v69)
    {
      v5 = 0;
      if (v61 <= 1)
        v71 = 1;
      else
        v71 = v61;
      v72 = 2 * v71;
      while (1)
      {
        v73 = *((unsigned __int8 *)v5 + (_QWORD)v554 + 1);
        if ((v73 & 0x7Fu) >= 0x40)
          goto LABEL_353;
        if (((v63 >> (v73 & 0x7F)) & 1) != 0)
          break;
        v5 = (WTF *)((char *)v5 + 2);
        if ((WTF *)v72 == v5)
          goto LABEL_66;
      }
      v74 = *((unsigned __int8 *)v5 + (_QWORD)v554);
      if (v74 == v73)
      {
LABEL_64:
        memmove((char *)v5 + (_QWORD)v64, (char *)v5 + (_QWORD)v64 + 2, 2 * v65 - (_QWORD)v5 - 2);
        v61 = HIDWORD(v555) - 1;
        goto LABEL_65;
      }
      v75 = (char)v74;
      if ((char)v74 == 63)
      {
        v76 = i;
        if (v73 != 31)
        {
          v78 = v73 & 0x1F | 0xD2800000;
          goto LABEL_61;
        }
      }
      else
      {
        v76 = i;
        v77 = (char)v73 == 31 || v75 == 31;
        if (!v77)
        {
          v78 = v73 & 0xFFE0FFFF | ((v75 & 0x1F) << 16) | 0xAA0003E0;
LABEL_61:
          if (v76 + 4 > v573)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, (uint64_t)v57, (uint64_t)v58, v59, v41, v42, v43, v44);
            v76 = i;
          }
          *(_DWORD *)&v571[v76] = v78;
          i += 4;
          v64 = v554;
          v65 = HIDWORD(v555);
          goto LABEL_64;
        }
      }
      v78 = (char)v73 | (32 * v75) | 0x91000000;
      goto LABEL_61;
    }
    v79 = *(_BYTE *)v554;
    LOWORD(v5) = *((char *)v554 + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)v566, *(char *)v554, *((char *)v554 + 1), v59, v41, v42, v43, v44);
    memmove(v554, (char *)v554 + 2, 2 * HIDWORD(v555) - 2);
    v80 = (HIDWORD(v555) - 1);
    v77 = HIDWORD(v555) == 1;
    HIDWORD(v555) = v80;
    v81 = (char *)v554;
    __dst = (char *)v554 + 2 * v80;
    if (v77)
    {
      v82 = 0;
      v83 = 0;
      v515 = 0;
      v57 = (char *)v554 + 2 * v80;
    }
    else
    {
      v85 = 2 * v80;
      v86 = v554;
      while (*(unsigned __int8 *)v86 != v5)
      {
        v86 = (uint64_t *)((char *)v86 + 2);
        v85 -= 2;
        if (!v85)
          goto LABEL_76;
      }
      *(_BYTE *)v86 = v79;
LABEL_76:
      v515 = 0;
      v5 = (WTF *)v81;
      v87 = __dst;
      v57 = __dst;
      do
      {
        if (*v81 == v81[1])
        {
          v88 = v81;
          if (v87 != (char *)v554 + 2 * HIDWORD(v555))
          {
            if (v81 == v57)
            {
              v88 = v87;
            }
            else
            {
              v508 = v5 - (WTF *)v57;
              memmove(v87, v57, v5 - (WTF *)v57);
              v88 = &v87[v508];
            }
          }
          v57 = v81 + 2;
          ++v515;
          v87 = v88;
        }
        v81 += 2;
        v5 = (WTF *)((char *)v5 + 2);
      }
      while (v81 < __dst);
      v81 = (char *)v554;
      v82 = HIDWORD(v555);
      v83 = HIDWORD(v555);
      __dst = v87;
    }
    v84 = &v81[2 * v82];
    if (v57 != v84)
    {
      memmove(__dst, v57, v84 - v57);
      v83 = HIDWORD(v555);
    }
    v61 = v83 - v515;
    this = (uint64_t)v520;
LABEL_65:
    HIDWORD(v555) = v61;
LABEL_66:
    ;
  }
  while (v61);
  v89 = v554;
  if (&v556 != v554 && v554)
  {
    v554 = 0;
    LODWORD(v555) = 0;
    WTF::fastFree((unint64_t)v89, v57, (uint64_t)v58, v59, v41, v42, v43, v44);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v566, (uint64_t)operationThrowStackOverflowErrorFromThunk, 8, v59, v41, v42, v43, v44);
  v575 = 0;
  v97 = i;
  if (i + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v90, v91, v92, v93, v94, v95, v96);
    v97 = i;
  }
  *(_DWORD *)&v571[v97] = -700514048;
  i += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)v566, this + 90488, 1, v92, v93, v94, v95, v96);
  v105 = i;
  if (i + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v98, v99, v100, v101, v102, v103, v104);
    v105 = i;
  }
  *(_DWORD *)&v571[v105] = -702611424;
  i += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v550, (uint64_t)v566, v99, v100, v101, v102, v103, v104);
  v113 = i;
  if (i + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v106, v107, v108, v109, v110, v111, v112);
    v113 = i;
  }
  *(_DWORD *)&v571[v113] = -1862270881;
  v114 = i;
  v115 = i + 4;
  i += 4;
  if (v114 + 8 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v106, v107, v108, v109, v110, v111, v112);
    v115 = i;
  }
  *(_DWORD *)&v571[v115] = -1207893023;
  i += 4;
  if (!v576)
  {
    __break(0xC471u);
    goto LABEL_377;
  }
  JSC::MacroAssemblerARM64::moveToCachedReg(v566, 10, v21, v108, v109, v110, v111, v112);
  v124 = i;
  if (i + 4 > v573)
  {
    v123 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v116, v117, v118, v119, v120, v121, v122).n128_u64[0];
    v124 = i;
  }
  *(_DWORD *)&v571[v124] = -134118416;
  v125 = i;
  v126 = i + 4;
  i += 4;
  if (v125 + 8 > v573)
  {
    v123 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v116, v117, v118, v119, v120, v121, v122).n128_u64[0];
    v126 = i;
  }
  *(_DWORD *)&v571[v126] = -129892350;
  v127 = i;
  v128 = i + 4;
  i += 4;
  if (v127 + 8 > v573)
  {
    v123 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v116, v117, v118, v119, v120, v121, v122).n128_u64[0];
    v128 = i;
  }
  *(_DWORD *)&v571[v128] = -129925054;
  i += 4;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v566, 0, 2, 1, v119, v120, v121, v122, (uint64_t)&v554, v123);
  v136 = i;
  if (i + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v129, v130, v131, v132, v133, v134, v135);
    v136 = i;
  }
  *(_DWORD *)&v571[v136] = -129830846;
  i += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v554, (uint64_t)v566, v130, v131, v132, v133, v134, v135);
  v145 = i;
  if (i + 4 > v573)
  {
    v144 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v137, v138, v139, v140, v141, v142, v143).n128_u64[0];
    v145 = i;
  }
  *(_DWORD *)&v571[v145] = -129925054;
  i += 4;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v566, 0, 2, 0xFFFFFFFFLL, v140, v141, v142, v143, (uint64_t)&v547, v144);
  v153 = *(_QWORD *)(this + 90440);
  v155 = *(_QWORD *)(v153 + 104);
  v154 = *(unsigned int **)(v153 + 112);
  if (v154)
  {
    do
      v156 = __ldaxr(v154);
    while (__stlxr(v156 + 1, v154));
    do
    {
      v157 = __ldaxr(v154);
      v158 = v157 - 1;
    }
    while (__stlxr(v158, v154));
    if (!v158)
    {
      atomic_store(1u, v154);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v154, v146, v147, v148, v149, v150, v151, v152);
      WTF::fastFree(v499, v500, v501, v502, v503, v504, v505, v506);
    }
  }
  v5 = (WTF *)&v547;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26129>((unsigned int *)&v547, v155, (uint64_t)v566, v148, v149, v150, v151, v152);
  v21 = (uint64_t)v549;
  v547 = (uint64_t **)v549;
  v548 = 2;
  JSC::MacroAssemblerARM64::branchSub32((uint64_t)v566, 0, 1, 1, 1, v159, v160, v161, (uint64_t)v546);
  v169 = i;
  if (i < SHIDWORD(v570))
  {
    LOWORD(v5) = 8223;
    do
    {
      if (v169 + 4 > v573)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v162, v163, v164, v165, v166, v167, v168);
        v169 = i;
      }
      *(_DWORD *)&v571[v169] = -721215457;
      v169 = i + 4;
      i = v169;
    }
    while (v169 < SHIDWORD(v570));
  }
  v575 = 0;
  JSC::MacroAssemblerARM64::load64((uint64_t)v566, 0x30000011DuLL, 0x200000028uLL, 4, v165, v166, v167, v168);
  v554 = &v556;
  v555 = 2;
  JSC::AssemblyHelpers::branchIfNotCell((uint64_t)v566, 4, 0, v170, v171, v172, v173, v174, (uint64_t)&v544);
  v182 = v544;
  if (v544 != -1)
  {
    v183 = HIDWORD(v555);
    if (HIDWORD(v555) == (_DWORD)v555)
    {
      v184 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v554, (void *)(HIDWORD(v555) + 1), (unint64_t)&v544, v177, v178, v179, v180, v181);
      v15 = (unint64_t)(v184 + 1);
      v182 = *v184;
      v183 = HIDWORD(v555);
    }
    v185 = (char *)v554 + 12 * v183;
    *(_DWORD *)v185 = v182;
    *(_QWORD *)(v185 + 4) = *(_QWORD *)v15;
    ++HIDWORD(v555);
  }
  if (!v576)
  {
    __break(0xC471u);
    JUMPOUT(0x19881A538);
  }
  v584[52] &= ~v587;
  v15 = v585 & 0x1F | 0x38405080u;
  v186 = i;
  if (i + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v175, v176, v177, v178, v179, v180, v181);
    v186 = i;
  }
  *(_DWORD *)&v571[v186] = v15;
  i += 4;
  JSC::MacroAssemblerARM64::branch32((uint64_t)v566, 3, 17, 23, v178, v179, v180, v181, (uint64_t)&v542);
  v187 = v542;
  if (v542 != -1)
  {
    v188 = HIDWORD(v555);
    if (HIDWORD(v555) == (_DWORD)v555)
    {
      v189 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v554, (void *)(HIDWORD(v555) + 1), (unint64_t)&v542, v59, v41, v42, v43, v44);
      v17 = (uint64_t)(v189 + 1);
      v187 = *v189;
      v188 = HIDWORD(v555);
    }
    v190 = (char *)v554 + 12 * v188;
    *(_DWORD *)v190 = v187;
    *(_QWORD *)(v190 + 4) = *(_QWORD *)v17;
    ++HIDWORD(v555);
  }
  __dsta = (char *)(this + 90488);
  v191 = i;
  if (i + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, (uint64_t)v57, (uint64_t)v58, v59, v41, v42, v43, v44);
    v191 = i;
  }
  *(_DWORD *)&v571[v191] = -132152415;
  i += 4;
  v527 = (WTF *)v529;
  v529[0] = 260;
  v528 = 0x100000002;
  this = 1;
  v192 = 1;
  while (2)
  {
    v193 = 0;
    v194 = 0;
    v195 = v527;
    v196 = v192;
    do
    {
      if ((*((_BYTE *)v527 + v193 + 1) & 0x40) != 0)
        goto LABEL_353;
      v194 |= 1 << *((_BYTE *)v527 + v193 + 1);
      v193 += 2;
    }
    while (2 * v192 != v193);
    v197 = 0;
    do
    {
      v198 = *((_BYTE *)v527 + v197) & 0x7F;
      if (v198 >= 0x40)
        goto LABEL_353;
      v194 &= ~(1 << v198);
      v197 += 2;
    }
    while (2 * v192 != v197);
    v199 = (uint8x8_t)vcnt_s8((int8x8_t)v194);
    v199.i16[0] = vaddlv_u8(v199);
    v200 = v199.i32[0];
    v201 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v194));
    v201.i16[0] = vaddlv_u8(v201);
    if (v201.i32[0] + v200)
    {
      v15 = 0;
      if (v192 <= 1)
        v202 = 1;
      else
        v202 = v192;
      v203 = 2 * v202;
      while (1)
      {
        v204 = *((unsigned __int8 *)v527 + v15 + 1);
        if ((v204 & 0x7Fu) >= 0x40)
          goto LABEL_353;
        if (((v194 >> (v204 & 0x7F)) & 1) != 0)
          break;
        v15 += 2;
        if (v203 == v15)
          goto LABEL_176;
      }
      v205 = *((unsigned __int8 *)v527 + v15);
      if (v205 != v204)
      {
        v206 = (char)v205;
        if ((char)v205 == 63)
        {
          v207 = i;
          v208 = v573;
          if (v204 == 31)
            goto LABEL_170;
          LODWORD(v5) = v204 & 0x1F | 0xD2800000;
        }
        else
        {
          v207 = i;
          v208 = v573;
          if ((char)v204 != 31 && v206 != 31)
          {
            LODWORD(v5) = v204 & 0xFFE0FFFF | ((v206 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_171;
          }
LABEL_170:
          LODWORD(v5) = (char)v204 | (32 * v206) | 0x91000000;
        }
LABEL_171:
        if (v207 + 4 > v208)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, (uint64_t)v57, (uint64_t)v58, v59, v41, v42, v43, v44);
          v207 = i;
        }
        *(_DWORD *)&v571[v207] = (_DWORD)v5;
        i += 4;
        v195 = v527;
        v196 = HIDWORD(v528);
      }
      memmove((char *)v195 + v15, (char *)v195 + v15 + 2, 2 * v196 - v15 - 2);
      v192 = HIDWORD(v528) - 1;
      goto LABEL_175;
    }
    v210 = *(_BYTE *)v527;
    v17 = *((char *)v527 + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)v566, *(char *)v527, v17, v59, v41, v42, v43, v44);
    memmove(v527, (char *)v527 + 2, 2 * HIDWORD(v528) - 2);
    v211 = (HIDWORD(v528) - 1);
    v77 = HIDWORD(v528) == 1;
    HIDWORD(v528) = v211;
    v5 = v527;
    v212 = (char *)v527 + 2 * v211;
    if (v77)
    {
      v216 = 0;
      v217 = 0;
      v21 = 0;
      v57 = (char *)v527 + 2 * v211;
    }
    else
    {
      v213 = 2 * v211;
      v214 = v527;
      while (*(unsigned __int8 *)v214 != v17)
      {
        v214 = (WTF *)((char *)v214 + 2);
        v213 -= 2;
        if (!v213)
          goto LABEL_154;
      }
      *(_BYTE *)v214 = v210;
LABEL_154:
      v21 = 0;
      v15 = (unint64_t)v5;
      v57 = v212;
      v17 = (uint64_t)v212;
      do
      {
        if (*(unsigned __int8 *)v5 == *((unsigned __int8 *)v5 + 1))
        {
          v215 = (uint64_t)v5;
          if ((WTF *)v17 != (WTF *)((char *)v527 + 2 * HIDWORD(v528)))
          {
            v509 = v212;
            if (v5 == (WTF *)v57)
            {
              v215 = v17;
            }
            else
            {
              v507 = v15 - (_QWORD)v57;
              memmove((void *)v17, v57, v15 - (_QWORD)v57);
              v215 = v17 + v507;
            }
            v212 = v509;
          }
          v57 = (char *)v5 + 2;
          v21 = (v21 + 1);
          v17 = v215;
        }
        v5 = (WTF *)((char *)v5 + 2);
        v15 += 2;
      }
      while (v5 < (WTF *)v212);
      v5 = v527;
      v216 = HIDWORD(v528);
      v217 = HIDWORD(v528);
      v212 = (char *)v17;
    }
    v218 = (char *)v5 + 2 * v216;
    if (v57 != v218)
    {
      memmove(v212, v57, v218 - v57);
      v217 = HIDWORD(v528);
    }
    v192 = v217 - v21;
LABEL_175:
    HIDWORD(v528) = v192;
LABEL_176:
    if (v192)
      continue;
    break;
  }
  v219 = v527;
  if (v529 != (_WORD *)v527 && v527)
  {
    v527 = 0;
    LODWORD(v528) = 0;
    WTF::fastFree((unint64_t)v219, v57, (uint64_t)v58, v59, v41, v42, v43, v44);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v566, (uint64_t)operationGetWrappedValueForTarget, 8, v59, v41, v42, v43, v44);
  v575 = 0;
  v228 = i;
  v21 = (uint64_t)v520;
  this = 2852127712;
  if (i + 4 > v573)
  {
    v227 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v220, v221, v222, v223, v224, v225, v226).n128_u64[0];
    v228 = i;
  }
  *(_DWORD *)&v571[v228] = -700514048;
  i += 4;
  JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)v566, (uint64_t)v520, 0, 0, 0xFFFFFFFFLL, v224, v225, v226, (uint64_t)&v540, v227);
  if (v540 != -1)
  {
    if (HIDWORD(v548) == (_DWORD)v548)
    {
      v236 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v547, (void *)(HIDWORD(v548) + 1), (unint64_t)&v540, v231, v232, v233, v234, v235);
      v238 = *v236;
      v237 = v236 + 1;
      v239 = (_DWORD *)v547 + 3 * HIDWORD(v548);
      *v239 = v238;
      v240 = v239 + 1;
    }
    else
    {
      v241 = (_DWORD *)v547 + 3 * HIDWORD(v548);
      *v241 = v540;
      v240 = v241 + 1;
      v237 = v513;
    }
    *v240 = *(_QWORD *)v237;
    ++HIDWORD(v548);
  }
  v242 = i;
  if (i + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v229, v230, v231, v232, v233, v234, v235);
    v242 = i;
  }
  *(_DWORD *)&v571[v242] = -1442839580;
  v243 = i;
  v244 = i + 4;
  i += 4;
  if (v243 + 8 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v229, v230, v231, v232, v233, v234, v235);
    v244 = i;
  }
  *(_DWORD *)&v571[v244] = -129924192;
  v245 = i;
  v246 = i + 4;
  i += 4;
  if (v245 + 8 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v229, v230, v231, v232, v233, v234, v235);
    v246 = i;
  }
  *(_DWORD *)&v571[v246] = -127958111;
  i += 4;
  if (HIDWORD(v555))
  {
    v247 = 0;
    v248 = 0;
    v249 = 12 * HIDWORD(v555);
    do
    {
      if (v248 >= HIDWORD(v555))
      {
        __break(0xC471u);
        JUMPOUT(0x19881A7D0);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v554 + v247), (uint64_t)v566, v230, v231, v232, v233, v234, v235);
      ++v248;
      v247 += 12;
    }
    while (v249 != v247);
  }
  JSC::MacroAssemblerARM64::store64((uint64_t)v566, 4, 0x30000011FuLL, 0x200000018uLL, v232, v233, v234, v235);
  JSC::MacroAssemblerARM64::branchSub32((uint64_t)v566, 1, 1, 1, 1, v250, v251, v252, (uint64_t)&v527);
  v539 = v169;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v527, (unsigned int *)&v539, (uint64_t)v566, v253, v254, v255, v256, v257);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v546, (uint64_t)v566, v258, v259, v260, v261, v262, v263);
  v272 = v554;
  if (&v556 != v554 && v554)
  {
    v554 = 0;
    LODWORD(v555) = 0;
    WTF::fastFree((unint64_t)v272, v264, v265, v266, v267, v268, v269, v270);
  }
  v273 = i;
  if (i + 4 > v573)
  {
    v271 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, (uint64_t)v264, v265, v266, v267, v268, v269, v270).n128_u64[0];
    v273 = i;
  }
  *(_DWORD *)&v571[v273] = -129892350;
  v274 = i;
  v275 = i + 4;
  i += 4;
  if (v274 + 8 > v573)
  {
    v271 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, (uint64_t)v264, v265, v266, v267, v268, v269, v270).n128_u64[0];
    v275 = i;
  }
  *(_DWORD *)&v571[v275] = -134183966;
  v276 = i;
  v277 = i + 4;
  i += 4;
  if (v276 + 8 > v573)
  {
    v271 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, (uint64_t)v264, v265, v266, v267, v268, v269, v270).n128_u64[0];
    v277 = i;
  }
  *(_DWORD *)&v571[v277] = -129925055;
  i += 4;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v566, 0, 1, 1, v267, v268, v269, v270, (uint64_t)v538, v271);
  v285 = i;
  if (i + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v278, v279, v280, v281, v282, v283, v284);
    v285 = i;
  }
  *(_DWORD *)&v571[v285] = -129830879;
  i += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v538, (uint64_t)v566, v279, v280, v281, v282, v283, v284);
  v294 = i;
  if (i + 4 > v573)
  {
    v293 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v286, v287, v288, v289, v290, v291, v292).n128_u64[0];
    v294 = i;
  }
  *(_DWORD *)&v571[v294] = -129925086;
  i += 4;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v566, 1, 2, 0xFFFFFFFFLL, v289, v290, v291, v292, (uint64_t)v537, v293);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v566, (uint64_t)operationMaterializeRemoteFunctionTargetCode, 8, v295, v296, v297, v298, v299);
  v575 = 0;
  v308 = i;
  if (i + 4 > v573)
  {
    v307 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v300, v301, v302, v303, v304, v305, v306).n128_u64[0];
    v308 = i;
  }
  *(_DWORD *)&v571[v308] = -700514048;
  i += 4;
  JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)v566, (uint64_t)v520, 0, 0, 0xFFFFFFFFLL, v304, v305, v306, (uint64_t)&v535, v307);
  if (v535 != -1)
  {
    if (HIDWORD(v548) == (_DWORD)v548)
    {
      v316 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v547, (void *)(HIDWORD(v548) + 1), (unint64_t)&v535, v311, v312, v313, v314, v315);
      v318 = *v316;
      v317 = v316 + 1;
      v319 = (_DWORD *)v547 + 3 * HIDWORD(v548);
      *v319 = v318;
      v320 = v319 + 1;
    }
    else
    {
      v321 = (_DWORD *)v547 + 3 * HIDWORD(v548);
      *v321 = v535;
      v320 = v321 + 1;
      v317 = v514;
    }
    *v320 = *(_QWORD *)v317;
    ++HIDWORD(v548);
  }
  v322 = i;
  if (i + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v309, v310, v311, v312, v313, v314, v315);
    v322 = i;
  }
  *(_DWORD *)&v571[v322] = -134216735;
  v323 = i;
  v324 = i + 4;
  i += 4;
  if (v323 + 8 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v309, v310, v311, v312, v313, v314, v315);
    v324 = i;
  }
  *(_DWORD *)&v571[v324] = -1442839582;
  v325 = i + 4;
  for (i = v325; v325 < SHIDWORD(v570); i = v325)
  {
    if (v325 + 4 > v573)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v309, v310, v311, v312, v313, v314, v315);
      v325 = i;
    }
    *(_DWORD *)&v571[v325] = -721215457;
    v325 = i + 4;
  }
  v326 = v325;
  if (v325 + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v309, v310, v311, v312, v313, v314, v315);
    v326 = i;
  }
  *(_DWORD *)&v571[v326] = 335544320;
  i += 4;
  if (v588)
    v327 = 69;
  else
    v327 = 65;
  v531[0] = v325;
  v531[1] = 0;
  v532 = v327;
  v533 = 15;
  v534 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v537, (uint64_t)v566, v310, v311, v312, v313, v314, v315);
  v17 = 943738880;
  if (!v576)
  {
    __break(0xC471u);
    JUMPOUT(0x19881A6A8);
  }
  v584[52] &= ~v587;
  LODWORD(v5) = v585 & 0x1F | 0x38405020;
  v335 = i;
  if (i + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v328, v329, v330, v331, v332, v333, v334);
    v335 = i;
  }
  *(_DWORD *)&v571[v335] = (_DWORD)v5;
  i += 4;
  JSC::MacroAssemblerARM64::branch32((uint64_t)v566, 1, 17, 12, v331, v332, v333, v334, (uint64_t)v530);
  v343 = i;
  if (i + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v336, v337, v338, v339, v340, v341, v342);
    v343 = i;
  }
  *(_DWORD *)&v571[v343] = -129630173;
  v344 = i;
  v345 = i + 4;
  i += 4;
  if (v344 + 8 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v336, v337, v338, v339, v340, v341, v342);
    v345 = i;
  }
  *(_DWORD *)&v571[v345] = -134216733;
  i += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v530, (uint64_t)v566, v337, v338, v339, v340, v341, v342);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v531, (uint64_t)v566, v346, v347, v348, v349, v350, v351);
  v575 = 0;
  v359 = i;
  if (i + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v352, v353, v354, v355, v356, v357, v358);
    v359 = i;
  }
  *(_DWORD *)&v571[v359] = -700514240;
  i += 4;
  v527 = (WTF *)v529;
  v528 = 2;
  JSC::AssemblyHelpers::branchIfNotCell((uint64_t)v566, 0, 0, v354, v355, v356, v357, v358, (uint64_t)&v525);
  if (v525 != -1)
  {
    if (HIDWORD(v528) == (_DWORD)v528)
    {
      v367 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v527, (void *)(HIDWORD(v528) + 1), (unint64_t)&v525, v362, v363, v364, v365, v366);
      v369 = *v367;
      v368 = (uint64_t *)(v367 + 1);
      v370 = (_DWORD *)((char *)v527 + 12 * HIDWORD(v528));
      *v370 = v369;
      v371 = (uint64_t *)(v370 + 1);
    }
    else
    {
      v372 = (_DWORD *)((char *)v527 + 12 * HIDWORD(v528));
      *v372 = v525;
      v371 = (uint64_t *)(v372 + 1);
      v368 = v512;
    }
    *v371 = *v368;
    ++HIDWORD(v528);
  }
  if (!v576)
  {
    __break(0xC471u);
    JUMPOUT(0x19881A708);
  }
  v584[52] &= ~v587;
  v15 = v585 & 0x1F | 0x38405000u;
  v373 = i;
  if (i + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v360, v361, v362, v363, v364, v365, v366);
    v373 = i;
  }
  *(_DWORD *)&v571[v373] = v15;
  i += 4;
  JSC::MacroAssemblerARM64::branch32((uint64_t)v566, 3, 17, 23, v363, v364, v365, v366, (uint64_t)&v523);
  if (v523 != -1)
  {
    if (HIDWORD(v528) == (_DWORD)v528)
    {
      v374 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v527, (void *)(HIDWORD(v528) + 1), (unint64_t)&v523, v59, v41, v42, v43, v44);
      v376 = *v374;
      v375 = v374 + 1;
      v377 = (_DWORD *)((char *)v527 + 12 * HIDWORD(v528));
      *v377 = v376;
      v378 = v377 + 1;
    }
    else
    {
      v379 = (_DWORD *)((char *)v527 + 12 * HIDWORD(v528));
      *v379 = v523;
      v378 = v379 + 1;
      v375 = v511;
    }
    *v378 = *(_QWORD *)v375;
    ++HIDWORD(v528);
  }
  v380 = i;
  if (i + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, (uint64_t)v57, (uint64_t)v58, v59, v41, v42, v43, v44);
    v380 = i;
  }
  *(_DWORD *)&v571[v380] = -129924190;
  i += 4;
  v554 = &v556;
  LODWORD(v556) = 16777218;
  v555 = 0x200000002;
  v381 = 2;
  while (2)
  {
    v382 = 0;
    v383 = 0;
    v384 = v554;
    v385 = v381;
    do
    {
      if ((*((_BYTE *)v554 + v382 + 1) & 0x40) != 0)
        goto LABEL_353;
      v383 |= 1 << *((_BYTE *)v554 + v382 + 1);
      v382 += 2;
    }
    while (2 * v381 != v382);
    v386 = 0;
    do
    {
      v387 = *((_BYTE *)v554 + v386) & 0x7F;
      if (v387 >= 0x40)
        goto LABEL_353;
      v383 &= ~(1 << v387);
      v386 += 2;
    }
    while (2 * v381 != v386);
    v388 = (uint8x8_t)vcnt_s8((int8x8_t)v383);
    v388.i16[0] = vaddlv_u8(v388);
    v389 = v388.i32[0];
    v390 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v383));
    v390.i16[0] = vaddlv_u8(v390);
    if (v390.i32[0] + v389)
    {
      v15 = 0;
      if (v381 <= 1)
        v391 = 1;
      else
        v391 = v381;
      v392 = 2 * v391;
      while (1)
      {
        v393 = *((unsigned __int8 *)v554 + v15 + 1);
        if ((v393 & 0x7Fu) >= 0x40)
          goto LABEL_353;
        if (((v383 >> (v393 & 0x7F)) & 1) != 0)
          break;
        v15 += 2;
        if (v392 == v15)
          goto LABEL_301;
      }
      v394 = *((unsigned __int8 *)v554 + v15);
      if (v394 != v393)
      {
        v395 = (char)v394;
        if ((char)v394 == 63)
        {
          v396 = i;
          v397 = v573;
          if (v393 == 31)
            goto LABEL_295;
          LODWORD(v5) = v393 & 0x1F | 0xD2800000;
        }
        else
        {
          v396 = i;
          v397 = v573;
          if ((char)v393 != 31 && v395 != 31)
          {
            LODWORD(v5) = v393 & 0xFFE0FFFF | ((v395 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_296;
          }
LABEL_295:
          LODWORD(v5) = (char)v393 | (32 * v395) | 0x91000000;
        }
LABEL_296:
        if (v396 + 4 > v397)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, (uint64_t)v57, (uint64_t)v58, v59, v41, v42, v43, v44);
          v396 = i;
        }
        *(_DWORD *)&v571[v396] = (_DWORD)v5;
        i += 4;
        v384 = v554;
        v385 = HIDWORD(v555);
      }
      memmove((char *)v384 + v15, (char *)v384 + v15 + 2, 2 * v385 - v15 - 2);
      v381 = HIDWORD(v555) - 1;
    }
    else
    {
      v399 = *(_BYTE *)v554;
      v17 = *((char *)v554 + 1);
      JSC::MacroAssemblerARM64::swap((uint64_t)v566, *(char *)v554, v17, v59, v41, v42, v43, v44);
      memmove(v554, (char *)v554 + 2, 2 * HIDWORD(v555) - 2);
      v400 = (HIDWORD(v555) - 1);
      v77 = HIDWORD(v555) == 1;
      HIDWORD(v555) = v400;
      v5 = (WTF *)v554;
      v15 = (unint64_t)v554 + 2 * v400;
      if (v77)
      {
        v406 = 0;
        v407 = 0;
        v403 = 0;
        v57 = (char *)v554 + 2 * v400;
      }
      else
      {
        v401 = 2 * v400;
        v402 = v554;
        while (*(unsigned __int8 *)v402 != v17)
        {
          v402 = (uint64_t *)((char *)v402 + 2);
          v401 -= 2;
          if (!v401)
            goto LABEL_280;
        }
        *(_BYTE *)v402 = v399;
LABEL_280:
        v403 = 0;
        v404 = v5;
        v57 = (char *)v15;
        v17 = v15;
        do
        {
          if (*(unsigned __int8 *)v5 == *((unsigned __int8 *)v5 + 1))
          {
            v405 = (char *)v5;
            if ((uint64_t *)v17 != (uint64_t *)((char *)v554 + 2 * HIDWORD(v555)))
            {
              if (v5 == (WTF *)v57)
              {
                v405 = (char *)v17;
              }
              else
              {
                v514 = (int *)(v404 - (WTF *)v57);
                memmove((void *)v17, v57, v404 - (WTF *)v57);
                v405 = (char *)v514 + v17;
              }
            }
            v57 = (char *)v5 + 2;
            ++v403;
            v17 = (uint64_t)v405;
          }
          v5 = (WTF *)((char *)v5 + 2);
          v404 = (WTF *)((char *)v404 + 2);
        }
        while ((unint64_t)v5 < v15);
        v5 = (WTF *)v554;
        v406 = HIDWORD(v555);
        v407 = HIDWORD(v555);
        v15 = v17;
      }
      v408 = (char *)v5 + 2 * v406;
      if (v57 != v408)
      {
        memmove((void *)v15, v57, v408 - v57);
        v407 = HIDWORD(v555);
      }
      v381 = v407 - v403;
      v21 = (uint64_t)v520;
      this = 2852127712;
    }
    HIDWORD(v555) = v381;
LABEL_301:
    if (v381)
      continue;
    break;
  }
  v409 = v554;
  if (&v556 != v554 && v554)
  {
    v554 = 0;
    LODWORD(v555) = 0;
    WTF::fastFree((unint64_t)v409, v57, (uint64_t)v58, v59, v41, v42, v43, v44);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v566, (uint64_t)operationGetWrappedValueForCaller, 8, v59, v41, v42, v43, v44);
  v575 = 0;
  v418 = i;
  if (i + 4 > v573)
  {
    v417 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v410, v411, v412, v413, v414, v415, v416).n128_u64[0];
    v418 = i;
  }
  *(_DWORD *)&v571[v418] = -700514048;
  i += 4;
  JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)v566, v21, 0, 0, 0xFFFFFFFFLL, v414, v415, v416, (uint64_t)&v521, v417);
  if (v521 != -1)
  {
    if (HIDWORD(v548) == (_DWORD)v548)
    {
      v426 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v547, (void *)(HIDWORD(v548) + 1), (unint64_t)&v521, v421, v422, v423, v424, v425);
      v428 = *v426;
      v427 = (uint64_t *)(v426 + 1);
      v429 = (_DWORD *)v547 + 3 * HIDWORD(v548);
      *v429 = v428;
      v430 = (uint64_t *)(v429 + 1);
    }
    else
    {
      v431 = (_DWORD *)v547 + 3 * HIDWORD(v548);
      *v431 = v521;
      v430 = (uint64_t *)(v431 + 1);
      v427 = v510;
    }
    *v430 = *v427;
    ++HIDWORD(v548);
  }
  if (HIDWORD(v528))
  {
    v432 = 0;
    v433 = 0;
    v434 = 12 * HIDWORD(v528);
    do
    {
      if (v433 >= HIDWORD(v528))
      {
        __break(0xC471u);
        JUMPOUT(0x19881A7D8);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v527 + v432), (uint64_t)v566, v420, v421, v422, v423, v424, v425);
      ++v433;
      v432 += 12;
    }
    while (v434 != v432);
  }
  v435 = i;
  if (i + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v419, v420, v421, v422, v423, v424, v425);
    v435 = i;
  }
  *(_DWORD *)&v571[v435] = -1862270017;
  v436 = i;
  v437 = i + 4;
  i += 4;
  if (v436 + 8 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v419, v420, v421, v422, v423, v424, v425);
    v437 = i;
  }
  *(_DWORD *)&v571[v437] = -1463714819;
  v438 = i;
  v439 = i + 4;
  i += 4;
  if (v438 + 8 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v419, v420, v421, v422, v423, v424, v425);
    v439 = i;
  }
  *(_DWORD *)&v571[v439] = -698416192;
  i += 4;
  if (HIDWORD(v548))
  {
    v440 = 0;
    v441 = 0;
    v442 = 12 * HIDWORD(v548);
    while (v441 < HIDWORD(v548))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v547 + v440), (uint64_t)v566, v420, v421, v422, v423, v424, v425);
      ++v441;
      v440 += 12;
      if (v442 == v440)
        goto LABEL_326;
    }
    __break(0xC471u);
LABEL_377:
    JUMPOUT(0x19881A47CLL);
  }
LABEL_326:
  JSC::MacroAssemblerARM64::load64((uint64_t)v566, (uint64_t)v518, 0, v421, v422, v423, v424, v425);
  JSC::AssemblyHelpers::copyCalleeSavesToEntryFrameCalleeSavesBufferImpl((char *)v566, 0);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v566, v21, 0, v443, v444, v445, v446, v447);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v566, (uint64_t)operationLookupExceptionHandler, 8, v448, v449, v450, v451, v452);
  v575 = 0;
  v460 = i;
  if (i + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v453, v454, v455, v456, v457, v458, v459);
    v460 = i;
  }
  *(_DWORD *)&v571[v460] = -700514048;
  i += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)v566, (uint64_t)__dsta, 1, v455, v456, v457, v458, v459);
  v468 = i;
  if (i + 4 > v573)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v571, v461, v462, v463, v464, v465, v466, v467);
    v468 = i;
  }
  *(_DWORD *)&v571[v468] = -702611424;
  i += 4;
  v554 = 0;
  v555 = 0;
  v556 = -1;
  v557 = v558;
  v559 = 128;
  v469 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v469 != -1)
  {
    v552 = &v553;
    v553 = &v551;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v552, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v470 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v478 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v478)
  {
    v478 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v478, v470);
  }
  v479 = *(_QWORD *)v478;
  if (*(_QWORD *)v478 != v478 + 8)
  {
    v480 = *(_DWORD *)(v478 + 136);
    if (v559 < v480)
    {
      if (v557 && v557 != v558)
      {
        WTF::fastFree((unint64_t)v557, v471, v472, v473, v474, v475, v476, v477);
        v479 = *(_QWORD *)v478;
        v480 = *(_DWORD *)(v478 + 136);
      }
      v557 = (_BYTE *)v479;
      v559 = v480;
      *(_QWORD *)v478 = v478 + 8;
      *(_DWORD *)(v478 + 136) = 128;
    }
  }
  v481 = 1;
  v560 = 1;
  v561 = 0;
  v562 = 8;
  v563 = 0u;
  v564 = 0u;
  v565 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v554, (uint64_t)v566, 1, v473, v474, v475, v476, v477);
  BYTE2(v561) = 1;
  if (byte_1ECF4C288)
  {
LABEL_351:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v554, v481, "remote", 7, "Specialized thunk for remote function calls", v519);
    goto LABEL_343;
  }
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v481 = HIBYTE(word_1ECF4C286) != 0;
    goto LABEL_351;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v554, "remote", 7, v519);
LABEL_343:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v554, v482, v483, v484, v485, v486, v487, v488);
  v496 = v527;
  if (v529 != (_WORD *)v527 && v527)
  {
    v527 = 0;
    LODWORD(v528) = 0;
    WTF::fastFree((unint64_t)v496, v489, v490, v491, v492, v493, v494, v495);
  }
  v497 = (unint64_t)v547;
  if (v549 != (_BYTE *)v547 && v547)
  {
    v547 = 0;
    LODWORD(v548) = 0;
    WTF::fastFree(v497, v489, v490, v491, v492, v493, v494, v495);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v566, v489, v490, v491, v492, v493, v494, v495);
}

uint64_t JSC::returnFromBaselineGenerator@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  pthread_key_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  unsigned int v40;
  char v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v57;
  char **v58;
  char *v59;
  _QWORD v60[3];
  WTF *v61;
  _BYTE v62[128];
  unsigned int v63;
  char v64;
  int v65;
  int v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _BYTE v70[32];
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  _BYTE v75[128];
  unsigned int v76;
  int v77;
  int v78;
  char v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE *v83;
  char v84;
  uint64_t v85;
  int v86;
  _BYTE *v87;
  char v88;
  uint64_t v89;
  int v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v70[0] = 0;
  v70[24] = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0x8000000080000000;
  v74 = v75;
  v76 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    v59 = (char *)v60;
    v60[0] = &v58;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v59, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v15 = *(_DWORD *)(v13 + 136);
    if (v76 < v15)
    {
      if (v74 && v74 != v75)
      {
        WTF::fastFree((unint64_t)v74, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(_QWORD *)v13;
        v15 = *(_DWORD *)(v13 + 136);
      }
      v74 = (_BYTE *)v14;
      v76 = v15;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
    }
  }
  v77 = 0;
  v79 = 1;
  v78 = 0;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = v70;
  v84 = 16;
  v85 = 0;
  v86 = 0x10000;
  v87 = v70;
  v88 = 17;
  v89 = 0;
  v90 = 0x20000;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v16 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
  if (v16 != -1)
  {
    v60[0] = &v58;
    v59 = (char *)v60;
    std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v59, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
  }
  JSC::AssemblyHelpers::emitRestoreCalleeSavesFor((JSC::AssemblyHelpers *)v70, (const JSC::RegisterAtOffsetList *)&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result, v7, v8, v9, v10, v11, v12);
  v24 = v77;
  if (v77 + 4 > v76)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v74, v17, v18, v19, v20, v21, v22, v23);
    v24 = v77;
  }
  *(_DWORD *)&v74[v24] = -1862270017;
  v25 = v77;
  v26 = v77 + 4;
  v77 += 4;
  if (v25 + 8 > v76)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v74, v17, v18, v19, v20, v21, v22, v23);
    v26 = v77;
  }
  *(_DWORD *)&v74[v26] = -1463714819;
  v27 = v77;
  v28 = v77 + 4;
  v77 += 4;
  if (v27 + 8 > v76)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v74, v17, v18, v19, v20, v21, v22, v23);
    v28 = v77;
  }
  *(_DWORD *)&v74[v28] = -698416192;
  v77 += 4;
  v60[0] = 0;
  v60[1] = 0;
  v60[2] = -1;
  v61 = (WTF *)v62;
  v63 = 128;
  v29 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v29 != -1)
  {
    v59 = &v57;
    v58 = &v59;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v58, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v30 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v38 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v38)
  {
    v38 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v38, v30);
  }
  v39 = *(WTF **)v38;
  if (*(_QWORD *)v38 != v38 + 8)
  {
    v40 = *(_DWORD *)(v38 + 136);
    if (v63 < v40)
    {
      if (v61 && v61 != (WTF *)v62)
      {
        WTF::fastFree((unint64_t)v61, v31, v32, v33, v34, v35, v36, v37);
        v39 = *(WTF **)v38;
        v40 = *(_DWORD *)(v38 + 136);
      }
      v61 = v39;
      v63 = v40;
      *(_QWORD *)v38 = v38 + 8;
      *(_DWORD *)(v38 + 136) = 128;
    }
  }
  v41 = 1;
  v64 = 1;
  v65 = 0;
  v66 = 13;
  v67 = 0u;
  v68 = 0u;
  v69 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v60, (uint64_t)v70, 1, v33, v34, v35, v36, v37);
  BYTE2(v65) = 1;
  if (byte_1ECF4C288)
    goto LABEL_34;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v41 = HIBYTE(word_1ECF4C286) != 0;
LABEL_34:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v60, v41, "op_ret_handler", 15, "Baseline: op_ret_handler", a1);
    goto LABEL_32;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v60, "op_ret_handler", 15, a1);
LABEL_32:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v60, v42, v43, v44, v45, v46, v47, v48);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v70, v49, v50, v51, v52, v53, v54, v55);
}

void JSC::toIntegerOrInfinityThunkGenerator(JSC::JITThunks **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  _DWORD v46[104];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v46, (JSC::VM *)this, 1);
  JSC::MacroAssemblerARM64::load64((uint64_t)v46, 0x300000001DLL, 0, v5, v6, v7, v8, v9);
  JSC::MacroAssemblerARM64::branch64((uint64_t)v46, 3, 0, 27, v10, v11, v12, v13, (uint64_t)&v44);
  JSC::SpecializedThunkJIT::appendFailure((unint64_t)v46, v44, v45, v14, v15, v16, v17, v18);
  JSC::SpecializedThunkJIT::returnJSCell(v46, v19, v20, v21, v22, v23, v24, v25);
  v32 = JSC::JITThunks::ctiNativeTailCall(this[11305], (JSC::VM *)this, v26, v27, v28, v29, v30, v31);
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v46, v32, "toIntegerOrInfinity", v33, v34, v35, v36);
  JSC::SpecializedThunkJIT::~SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v46, v37, v38, v39, v40, v41, v42, v43);
}

void JSC::toLengthThunkGenerator(JSC::JITThunks **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51[104];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v51, (JSC::VM *)this, 1);
  JSC::MacroAssemblerARM64::load64((uint64_t)v51, 0x300000001DLL, 0, v5, v6, v7, v8, v9);
  JSC::MacroAssemblerARM64::branch64((uint64_t)v51, 3, 0, 27, v10, v11, v12, v13, (uint64_t)&v49);
  JSC::SpecializedThunkJIT::appendFailure((unint64_t)v51, v49, v50, v14, v15, v16, v17, v18);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(v51, 0, 2, v19, v20, v21, v22, v23);
  JSC::MacroAssemblerARM64::moveConditionally32((uint64_t)v51, 11, 0, 0, 2, 0, 0, v24);
  JSC::MacroAssemblerARM64::and64((uint64_t)v51, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, 0, 0);
  JSC::SpecializedThunkJIT::returnInt32(v51, 0, v25, v26, v27, v28, v29, v30);
  v37 = JSC::JITThunks::ctiNativeTailCall(this[11305], (JSC::VM *)this, v31, v32, v33, v34, v35, v36);
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v51, v37, "toLength", v38, v39, v40, v41);
  JSC::SpecializedThunkJIT::~SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v51, v42, v43, v44, v45, v46, v47, v48);
}

void JSC::objectIsThunkGenerator(JSC::JITThunks **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unsigned int v81[3];
  _DWORD v82[104];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  JSC::SpecializedThunkJIT::SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v82, (JSC::VM *)this, 2);
  JSC::MacroAssemblerARM64::load64((uint64_t)v82, 0x300000001DLL, 2, v5, v6, v7, v8, v9);
  JSC::MacroAssemblerARM64::load64((uint64_t)v82, 0x380000001DLL, 4, v10, v11, v12, v13, v14);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v82, 7, 0, v15, v16, v17, v18, v19);
  JSC::MacroAssemblerARM64::branch64((uint64_t)v82, 0, 2, 4, v20, v21, v22, v23, (uint64_t)v81);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v82, 1, 2, 28, v24, v25, v26, v27, (uint64_t)&v79);
  JSC::SpecializedThunkJIT::appendFailure((unint64_t)v82, v79, v80, v28, v29, v30, v31, v32);
  JSC::AssemblyHelpers::branchIfNotObject((uint64_t)v82, 2u, v33, v34, v35, v36, v37, (uint64_t)&v79);
  JSC::SpecializedThunkJIT::appendFailure((unint64_t)v82, v79, v80, v38, v39, v40, v41, v42);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v82, 6, 0, v43, v44, v45, v46, v47);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v81, (uint64_t)v82, v48, v49, v50, v51, v52, v53);
  JSC::SpecializedThunkJIT::returnJSCell(v82, v54, v55, v56, v57, v58, v59, v60);
  v67 = JSC::JITThunks::ctiNativeTailCall(this[11305], (JSC::VM *)this, v61, v62, v63, v64, v65, v66);
  JSC::SpecializedThunkJIT::finalize(a2, (uint64_t)v82, v67, "is", v68, v69, v70, v71);
  JSC::SpecializedThunkJIT::~SpecializedThunkJIT((JSC::SpecializedThunkJIT *)v82, v72, v73, v74, v75, v76, v77, v78);
}

void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::executeVector<JSC::ARM64Registers::FPRegisterID>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  v10 = *(_QWORD *)(a1 + 16) & 0x7FLL;
  if ((_DWORD)v10 != 127)
  {
    JSC::MacroAssemblerARM64::storeDouble(*(_QWORD *)a1, (char)(v10 - 32), *(unsigned __int8 *)(a1 + 8) | ((unint64_t)(*(_QWORD *)(a1 + 16) >> 8) << 34), a4, a5, a6, a7, a8);
    *(_QWORD *)(a1 + 16) = 127;
  }
  JSC::MacroAssemblerARM64::storeVector(*(_QWORD *)a1, (char)((*a2 & 0x7F) - 32), *(unsigned __int8 *)(a1 + 8) | ((unint64_t)(*a2 >> 8) << 34), a4, a5, a6, a7, a8);
}

void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::executeVector<JSC::ARM64Registers::FPRegisterID>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  v10 = *(_QWORD *)(a1 + 16) & 0x7FLL;
  if ((_DWORD)v10 != 127)
  {
    JSC::MacroAssemblerARM64::loadDouble(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8) | ((unint64_t)(*(_QWORD *)(a1 + 16) >> 8) << 34), (char)(v10 - 32), a4, a5, a6, a7, a8);
    *(_QWORD *)(a1 + 16) = 127;
  }
  JSC::MacroAssemblerARM64::loadVector(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8) | ((unint64_t)(*a2 >> 8) << 34), (char)((*a2 & 0x7F) - 32), a4, a5, a6, a7, a8);
}

void JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129,char const*,char const*,char const*,char const*>(_QWORD *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  JSC::ExecutableMemoryHandle *v37;

  JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(a2, a3, "CallTrampoline", 15, "%s %s%s%s trampoline", &v36, a4);
  v12 = (unsigned int *)v37;
  *a1 = v36;
  a1[1] = 0;
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = (unsigned int *)a1[1];
    a1[1] = v12;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v14, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
    }
    v17 = (unsigned int *)v37;
    v37 = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v17, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
    }
  }
}

void WTF::toCString<JSC::CodeSpecializationKind>(uint64_t *a1, _BYTE *a2)
{
  const char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(WTF::StringPrintStream *__hidden);
  _BYTE *v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v16 = off_1E3572250;
  v17 = v19;
  v18 = xmmword_199122F80;
  v19[0] = 0;
  if (*a2)
    v3 = "Construct";
  else
    v3 = "Call";
  WTF::PrintStream::printf((WTF::PrintStream *)&v16, "%s", v3);
  v16[5]((WTF::StringPrintStream *)&v16);
  v16[5]((WTF::StringPrintStream *)&v16);
  v12 = v17;
  v11 = v18;
  *a1 = 0;
  if (!v12)
  {
    v15 = 0;
LABEL_9:
    WTF::fastFree(v15, v4, v5, v6, v7, v8, v9, v10);
    return;
  }
  if (v11 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19881B274);
  }
  v13 = WTF::fastMalloc((WTF *)(v11 + 17));
  *(_DWORD *)v13 = 1;
  *(_QWORD *)(v13 + 8) = v11;
  *a1 = v13;
  v14 = v13 + 16;
  memcpy((void *)(v13 + 16), v12, v11);
  *(_BYTE *)(v14 + v11) = 0;
  v15 = (unint64_t)v17;
  if (v17 != v19)
    goto LABEL_9;
}

JSC::SpecializedThunkJIT *JSC::SpecializedThunkJIT::SpecializedThunkJIT(JSC::SpecializedThunkJIT *this, JSC::VM *a2, int a3)
{
  JSC::CCallHelpers *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::AssemblerBuffer *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  int v44;
  uint64_t v45;

  v6 = JSC::CCallHelpers::CCallHelpers(this, 0);
  *((_QWORD *)v6 + 44) = a2;
  *((_QWORD *)v6 + 45) = (char *)v6 + 376;
  *((_QWORD *)v6 + 46) = 2;
  *((_QWORD *)v6 + 50) = 0;
  *((_QWORD *)v6 + 51) = 0;
  v14 = (JSC::CCallHelpers *)((char *)v6 + 56);
  v15 = *((_DWORD *)v6 + 50);
  if (v15 + 4 > *((_DWORD *)v6 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)v6 + 56), v7, v8, v9, v10, v11, v12, v13);
    v15 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v15) = -1447068675;
  v16 = *((_DWORD *)this + 50);
  v17 = v16 + 4;
  *((_DWORD *)this + 50) = v16 + 4;
  if ((v16 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, v7, v8, v9, v10, v11, v12, v13);
    v17 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v17) = -1862269955;
  v18 = *((_DWORD *)this + 50);
  v19 = v18 + 4;
  *((_DWORD *)this + 50) = v18 + 4;
  if ((v18 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, v7, v8, v9, v10, v11, v12, v13);
    v19 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v19) = -1447070725;
  v20 = *((_DWORD *)this + 50);
  v21 = v20 + 4;
  *((_DWORD *)this + 50) = v20 + 4;
  if ((v20 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, v7, v8, v9, v10, v11, v12, v13);
    v21 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v21) = -1303430149;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::or64((uint64_t)this, 2, 27, 28);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19881B4E0);
  }
  v29 = (a3 + 1);
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  v30 = *((_BYTE *)this + 304) & 0x1F | 0xB84203A0;
  v31 = *((_DWORD *)this + 50);
  if (v31 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, v22, v23, v24, v25, v26, v27, v28);
    v31 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v31) = v30;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, v29, v25, v26, v27, v28, (uint64_t)&v44);
  v37 = v44;
  if (v44 != -1)
  {
    v38 = *((unsigned int *)this + 93);
    if ((_DWORD)v38 == *((_DWORD *)this + 92))
    {
      v39 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 360, (void *)(v38 + 1), (unint64_t)&v44, v32, v33, v34, v35, v36);
      v41 = *v39;
      v40 = (uint64_t *)(v39 + 1);
      v37 = v41;
      v42 = *((_QWORD *)this + 45) + 12 * *((unsigned int *)this + 93);
    }
    else
    {
      v40 = &v45;
      v42 = *((_QWORD *)this + 45) + 12 * v38;
    }
    *(_DWORD *)v42 = v37;
    *(_QWORD *)(v42 + 4) = *v40;
    ++*((_DWORD *)this + 93);
  }
  return this;
}

unsigned int *JSC::JSInterfaceJIT::emitLoadDouble(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v44[2];
  char v45;
  __int16 v46;
  char v47;
  unsigned int v48[3];

  JSC::MacroAssemblerARM64::load64(a2, (a3 << 35) | 0x1D, a4, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branchTest64(a2, 0, a4, 27, v11, v12, v13, v14, a1);
  JSC::MacroAssemblerARM64::branch64(a2, 3, a4, 27, v15, v16, v17, v18, (uint64_t)v48);
  v26 = *(_DWORD *)(a2 + 200);
  if (v26 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
    v26 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v26) = (32 * (a4 & 0x1F)) | 0x1E620000;
  v27 = *(_DWORD *)(a2 + 200) + 4;
  for (*(_DWORD *)(a2 + 200) = v27; v27 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v27)
  {
    if ((v27 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
      v27 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v27) = -721215457;
    v27 = *(_DWORD *)(a2 + 200) + 4;
  }
  v28 = v27;
  if ((v27 + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
    v28 = *(_DWORD *)(a2 + 200);
  }
  v29 = a4 & 0x1F;
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v30 = 69;
  else
    v30 = 65;
  v44[0] = v27;
  v44[1] = 0;
  v45 = v30;
  v46 = 15;
  v47 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v48, a2, v20, v21, v22, v23, v24, v25);
  if ((_DWORD)a4 == 31)
    v38 = -1959042049;
  else
    v38 = v29 | (v29 << 16) | 0x8B000360;
  v39 = *(_DWORD *)(a2 + 200);
  if (v39 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v31, v32, v33, v34, v35, v36, v37);
    v39 = *(_DWORD *)(a2 + 200);
  }
  v40 = 32 * v29;
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v39) = v38;
  v41 = *(_DWORD *)(a2 + 200);
  v42 = v41 + 4;
  *(_DWORD *)(a2 + 200) = v41 + 4;
  if ((v41 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v31, v32, v33, v34, v35, v36, v37);
    v42 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v42) = v40 | 0x9E670000;
  *(_DWORD *)(a2 + 200) += 4;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v44, a2, v32, v33, v34, v35, v36, v37);
}

_QWORD *JSC::SpecializedThunkJIT::callDoubleToDouble(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  unsigned int i;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  _QWORD *result;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _DWORD v24[2];
  uint64_t v25;

  v10 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); (signed int)i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if (i + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19881B920);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v12 = *(_BYTE *)(a1 + 272) & 0x1F;
  if (i + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    i = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = v12 | 0xD2800000;
  v13 = *(_DWORD *)(a1 + 200);
  v14 = v13 + 4;
  *(_DWORD *)(a1 + 200) = v13 + 4;
  if ((v13 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v12 | 0xF2A00000;
  v15 = *(_DWORD *)(a1 + 200);
  v16 = v15 + 4;
  *(_DWORD *)(a1 + 200) = v15 + 4;
  if ((v15 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v16 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v16) = v12 | 0xF2C00000;
  v17 = *(_DWORD *)(a1 + 200);
  v18 = v17 + 4;
  *(_DWORD *)(a1 + 200) = v17 + 4;
  *(_DWORD *)(a1 + 208) = 0;
  if ((v17 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v18 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = -700513792;
  v19 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v19; v19 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v19)
  {
    if ((v19 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
      v19 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v19) = -721215457;
    v19 = *(_DWORD *)(a1 + 200) + 4;
  }
  result = (_QWORD *)(a1 + 400);
  v24[0] = v19;
  v24[1] = 1;
  v25 = a2;
  v21 = *(unsigned int *)(a1 + 412);
  if ((_DWORD)v21 == *(_DWORD *)(a1 + 408))
  {
    result = (_QWORD *)WTF::Vector<JSC::CallRecord<(WTF::PtrTag)64323>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v21 + 1, (unint64_t)v24);
    v22 = (_QWORD *)(*(_QWORD *)(a1 + 400) + 16 * *(unsigned int *)(a1 + 412));
    *v22 = *result;
    v22[1] = result[1];
  }
  else
  {
    v23 = *result + 16 * v21;
    *(_DWORD *)v23 = v19;
    *(_DWORD *)(v23 + 4) = 1;
    *(_QWORD *)(v23 + 8) = a2;
  }
  ++*(_DWORD *)(a1 + 412);
  return result;
}

uint64_t JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::$_0::operator()()
{
  uint64_t v0;
  uint64_t result;

  v0 = WTF::fastMalloc((WTF *)0x10);
  result = JSC::RegisterAtOffsetList::RegisterAtOffsetList(v0, 0xFF001FF80000, 0, 1);
  JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::result = result;
  return result;
}

uint64_t WTF::PrintStream::atomically<void WTF::PrintStream::print<char [3],WTF::HexNumberBuffer,char [3],WTF::HexNumberBuffer,char [3],WTF::HexNumberBuffer,char [3],WTF::HexNumberBuffer,char [3]>(char [3],WTF::HexNumberBuffer,char [3],WTF::HexNumberBuffer,char [3],WTF::HexNumberBuffer,char [3],WTF::HexNumberBuffer,char [3] const&)::{lambda(WTF::PrintStream&)#1}>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  __int128 *v5;
  const char *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;
  size_t v11;
  char *v12;
  WTF::PrintStream *v13;
  float v14;
  __int128 v15;
  size_t v16;
  char *v17;
  WTF::PrintStream *v18;
  float v19;
  __int128 v20;
  size_t v21;
  char *v22;
  WTF::PrintStream *v23;
  float v24;
  __int128 v25;
  size_t v26;
  WTF::PrintStream *v27;
  float v28;
  const char *v30;
  const char *v31;
  const char *v32;
  int v33;
  int v34;
  char v35;
  __int128 v36;
  unsigned int v37;
  __int128 v38;
  unsigned int v39;
  __int128 v40;
  unsigned int v41;
  __int128 v42;
  unsigned int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = *(__int128 **)(a2 + 8);
  v6 = *(const char **)(a2 + 16);
  v7 = *(__int128 **)(a2 + 24);
  v8 = *(__int128 **)(a2 + 40);
  v9 = *(__int128 **)(a2 + 56);
  v30 = *(const char **)(a2 + 32);
  v31 = *(const char **)(a2 + 48);
  v32 = *(const char **)(a2 + 64);
  WTF::PrintStream::printf(v4, "%s", *(const char **)a2);
  v10 = *v5;
  v37 = *((_DWORD *)v5 + 4);
  v36 = v10;
  v11 = v37;
  v12 = (char *)&v37 - v37;
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::StringImpl::utf8ForCharacters(v12, v11, (uint64_t)&v42, v14);
  WTF::printExpectedCStringHelper(v13, "StringView", &v42);
  if (DWORD2(v42) != -1)
    ((void (*)(__int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[DWORD2(v42)])(&v40, &v42);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", v6);
  v15 = *v7;
  v39 = *((_DWORD *)v7 + 4);
  v38 = v15;
  v16 = v39;
  v17 = (char *)&v39 - v39;
  v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::StringImpl::utf8ForCharacters(v17, v16, (uint64_t)&v42, v19);
  WTF::printExpectedCStringHelper(v18, "StringView", &v42);
  if (DWORD2(v42) != -1)
    ((void (*)(__int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[DWORD2(v42)])(&v40, &v42);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", v30);
  v20 = *v8;
  v41 = *((_DWORD *)v8 + 4);
  v40 = v20;
  v21 = v41;
  v22 = (char *)&v41 - v41;
  v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::StringImpl::utf8ForCharacters(v22, v21, (uint64_t)&v42, v24);
  WTF::printExpectedCStringHelper(v23, "StringView", &v42);
  if (DWORD2(v42) != -1)
    ((void (*)(int *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[DWORD2(v42)])(&v33, &v42);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", v31);
  v25 = *v9;
  v43 = *((_DWORD *)v9 + 4);
  v42 = v25;
  v26 = v43;
  v27 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::StringImpl::utf8ForCharacters((char *)&v43 - v26, v26, (uint64_t)&v33, v28);
  WTF::printExpectedCStringHelper(v27, "StringView", &v33);
  if (v34 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(&v35, &v33);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", v32);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

void JSC::IPInt::initialize(JSC::IPInt *this)
{
  if ((char *)ipint_nop - (char *)ipint_unreachable != 256)
    goto LABEL_1376;
  if ((char *)ipint_block - (char *)ipint_unreachable != 512)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FB74);
  }
  if ((char *)ipint_loop - (char *)ipint_unreachable != 768)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FB94);
  }
  if ((char *)ipint_if - (char *)ipint_unreachable != 1024)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FBB4);
  }
  if ((char *)ipint_else - (char *)ipint_unreachable != 1280)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FBD4);
  }
  if ((char *)ipint_try - (char *)ipint_unreachable != 1536)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FBF4);
  }
  if ((char *)ipint_catch - (char *)ipint_unreachable != 1792)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FC14);
  }
  if ((char *)ipint_throw - (char *)ipint_unreachable != 2048)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FC34);
  }
  if ((char *)ipint_rethrow - (char *)ipint_unreachable != 2304)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FC54);
  }
  if ((char *)ipint_reserved_0xa - (char *)ipint_unreachable != 2560)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FC74);
  }
  if ((char *)ipint_end - (char *)ipint_unreachable != 2816)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FC94);
  }
  if ((char *)ipint_br - (char *)ipint_unreachable != 3072)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FCB4);
  }
  if ((char *)ipint_br_if - (char *)ipint_unreachable != 3328)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FCD4);
  }
  if ((char *)ipint_br_table - (char *)ipint_unreachable != 3584)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FCF4);
  }
  if ((char *)ipint_return - (char *)ipint_unreachable != 3840)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FD14);
  }
  if ((char *)ipint_call - (char *)ipint_unreachable != 4096)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FD34);
  }
  if ((char *)ipint_call_indirect - (char *)ipint_unreachable != 4352)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FD54);
  }
  if ((char *)ipint_reserved_0x12 - (char *)ipint_unreachable != 4608)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FD74);
  }
  if ((char *)ipint_reserved_0x13 - (char *)ipint_unreachable != 4864)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FD94);
  }
  if ((char *)ipint_reserved_0x14 - (char *)ipint_unreachable != 5120)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FDB4);
  }
  if ((char *)ipint_reserved_0x15 - (char *)ipint_unreachable != 5376)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FDD4);
  }
  if ((char *)ipint_reserved_0x16 - (char *)ipint_unreachable != 5632)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FDF4);
  }
  if ((char *)ipint_reserved_0x17 - (char *)ipint_unreachable != 5888)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FE14);
  }
  if ((char *)ipint_delegate - (char *)ipint_unreachable != 6144)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FE34);
  }
  if ((char *)ipint_catch_all - (char *)ipint_unreachable != 6400)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FE54);
  }
  if ((char *)ipint_drop - (char *)ipint_unreachable != 6656)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FE74);
  }
  if ((char *)ipint_select - (char *)ipint_unreachable != 6912)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FE94);
  }
  if ((char *)ipint_select_t - (char *)ipint_unreachable != 7168)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FEB4);
  }
  if ((char *)ipint_reserved_0x1d - (char *)ipint_unreachable != 7424)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FED4);
  }
  if ((char *)ipint_reserved_0x1e - (char *)ipint_unreachable != 7680)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FEF4);
  }
  if ((char *)ipint_reserved_0x1f - (char *)ipint_unreachable != 7936)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FF14);
  }
  if ((char *)ipint_local_get - (char *)ipint_unreachable != 0x2000)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FF34);
  }
  if ((char *)ipint_local_set - (char *)ipint_unreachable != 8448)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FF54);
  }
  if ((char *)ipint_local_tee - (char *)ipint_unreachable != 8704)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FF74);
  }
  if ((char *)ipint_global_get - (char *)ipint_unreachable != 8960)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FF94);
  }
  if ((char *)ipint_global_set - (char *)ipint_unreachable != 9216)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FFB4);
  }
  if ((char *)ipint_table_get - (char *)ipint_unreachable != 9472)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FFD4);
  }
  if ((char *)ipint_table_set - (char *)ipint_unreachable != 9728)
  {
    __break(0xC471u);
    JUMPOUT(0x19881FFF4);
  }
  if ((char *)ipint_reserved_0x27 - (char *)ipint_unreachable != 9984)
  {
    __break(0xC471u);
    JUMPOUT(0x198820014);
  }
  if ((char *)ipint_i32_load_mem - (char *)ipint_unreachable != 10240)
  {
    __break(0xC471u);
    JUMPOUT(0x198820034);
  }
  if ((char *)ipint_i64_load_mem - (char *)ipint_unreachable != 10496)
  {
    __break(0xC471u);
    JUMPOUT(0x198820054);
  }
  if ((char *)ipint_f32_load_mem - (char *)ipint_unreachable != 10752)
  {
    __break(0xC471u);
    JUMPOUT(0x198820074);
  }
  if ((char *)ipint_f64_load_mem - (char *)ipint_unreachable != 11008)
  {
    __break(0xC471u);
    JUMPOUT(0x198820094);
  }
  if ((char *)ipint_i32_load8s_mem - (char *)ipint_unreachable != 11264)
  {
    __break(0xC471u);
    JUMPOUT(0x1988200B4);
  }
  if ((char *)ipint_i32_load8u_mem - (char *)ipint_unreachable != 11520)
  {
    __break(0xC471u);
    JUMPOUT(0x1988200D4);
  }
  if ((char *)ipint_i32_load16s_mem - (char *)ipint_unreachable != 11776)
  {
    __break(0xC471u);
    JUMPOUT(0x1988200F4);
  }
  if ((char *)ipint_i32_load16u_mem - (char *)ipint_unreachable != 12032)
  {
    __break(0xC471u);
    JUMPOUT(0x198820114);
  }
  if ((char *)ipint_i64_load8s_mem - (char *)ipint_unreachable != 12288)
  {
    __break(0xC471u);
    JUMPOUT(0x198820134);
  }
  if ((char *)ipint_i64_load8u_mem - (char *)ipint_unreachable != 12544)
  {
    __break(0xC471u);
    JUMPOUT(0x198820154);
  }
  if ((char *)ipint_i64_load16s_mem - (char *)ipint_unreachable != 12800)
  {
    __break(0xC471u);
    JUMPOUT(0x198820174);
  }
  if ((char *)ipint_i64_load16u_mem - (char *)ipint_unreachable != 13056)
  {
    __break(0xC471u);
    JUMPOUT(0x198820194);
  }
  if ((char *)ipint_i64_load32s_mem - (char *)ipint_unreachable != 13312)
  {
    __break(0xC471u);
    JUMPOUT(0x1988201B4);
  }
  if ((char *)ipint_i64_load32u_mem - (char *)ipint_unreachable != 13568)
  {
    __break(0xC471u);
    JUMPOUT(0x1988201D4);
  }
  if ((char *)ipint_i32_store_mem - (char *)ipint_unreachable != 13824)
  {
    __break(0xC471u);
    JUMPOUT(0x1988201F4);
  }
  if ((char *)ipint_i64_store_mem - (char *)ipint_unreachable != 14080)
  {
    __break(0xC471u);
    JUMPOUT(0x198820214);
  }
  if ((char *)ipint_f32_store_mem - (char *)ipint_unreachable != 14336)
  {
    __break(0xC471u);
    JUMPOUT(0x198820234);
  }
  if ((char *)ipint_f64_store_mem - (char *)ipint_unreachable != 14592)
  {
    __break(0xC471u);
    JUMPOUT(0x198820254);
  }
  if ((char *)ipint_i32_store8_mem - (char *)ipint_unreachable != 14848)
  {
    __break(0xC471u);
    JUMPOUT(0x198820274);
  }
  if ((char *)ipint_i32_store16_mem - (char *)ipint_unreachable != 15104)
  {
    __break(0xC471u);
    JUMPOUT(0x198820294);
  }
  if ((char *)ipint_i64_store8_mem - (char *)ipint_unreachable != 15360)
  {
    __break(0xC471u);
    JUMPOUT(0x1988202B4);
  }
  if ((char *)ipint_i64_store16_mem - (char *)ipint_unreachable != 15616)
  {
    __break(0xC471u);
    JUMPOUT(0x1988202D4);
  }
  if ((char *)ipint_i64_store32_mem - (char *)ipint_unreachable != 15872)
  {
    __break(0xC471u);
    JUMPOUT(0x1988202F4);
  }
  if ((char *)ipint_memory_size - (char *)ipint_unreachable != 16128)
  {
    __break(0xC471u);
    JUMPOUT(0x198820314);
  }
  if ((char *)ipint_memory_grow - (char *)ipint_unreachable != 0x4000)
  {
    __break(0xC471u);
    JUMPOUT(0x198820334);
  }
  if ((char *)ipint_i32_const - (char *)ipint_unreachable != 16640)
  {
    __break(0xC471u);
    JUMPOUT(0x198820354);
  }
  if ((char *)ipint_i64_const - (char *)ipint_unreachable != 16896)
  {
    __break(0xC471u);
    JUMPOUT(0x198820374);
  }
  if ((char *)ipint_f32_const - (char *)ipint_unreachable != 17152)
  {
    __break(0xC471u);
    JUMPOUT(0x198820394);
  }
  if ((char *)ipint_f64_const - (char *)ipint_unreachable != 17408)
  {
    __break(0xC471u);
    JUMPOUT(0x1988203B4);
  }
  if ((char *)ipint_i32_eqz - (char *)ipint_unreachable != 17664)
  {
    __break(0xC471u);
    JUMPOUT(0x1988203D4);
  }
  if ((char *)ipint_i32_eq - (char *)ipint_unreachable != 17920)
  {
    __break(0xC471u);
    JUMPOUT(0x1988203F4);
  }
  if ((char *)ipint_i32_ne - (char *)ipint_unreachable != 18176)
  {
    __break(0xC471u);
    JUMPOUT(0x198820414);
  }
  if ((char *)ipint_i32_lt_s - (char *)ipint_unreachable != 18432)
  {
    __break(0xC471u);
    JUMPOUT(0x198820434);
  }
  if ((char *)ipint_i32_lt_u - (char *)ipint_unreachable != 18688)
  {
    __break(0xC471u);
    JUMPOUT(0x198820454);
  }
  if ((char *)ipint_i32_gt_s - (char *)ipint_unreachable != 18944)
  {
    __break(0xC471u);
    JUMPOUT(0x198820474);
  }
  if ((char *)ipint_i32_gt_u - (char *)ipint_unreachable != 19200)
  {
    __break(0xC471u);
    JUMPOUT(0x198820494);
  }
  if ((char *)ipint_i32_le_s - (char *)ipint_unreachable != 19456)
  {
    __break(0xC471u);
    JUMPOUT(0x1988204B4);
  }
  if ((char *)ipint_i32_le_u - (char *)ipint_unreachable != 19712)
  {
    __break(0xC471u);
    JUMPOUT(0x1988204D4);
  }
  if ((char *)ipint_i32_ge_s - (char *)ipint_unreachable != 19968)
  {
    __break(0xC471u);
    JUMPOUT(0x1988204F4);
  }
  if ((char *)ipint_i32_ge_u - (char *)ipint_unreachable != 20224)
  {
    __break(0xC471u);
    JUMPOUT(0x198820514);
  }
  if ((char *)ipint_i64_eqz - (char *)ipint_unreachable != 20480)
  {
    __break(0xC471u);
    JUMPOUT(0x198820534);
  }
  if ((char *)ipint_i64_eq - (char *)ipint_unreachable != 20736)
  {
    __break(0xC471u);
    JUMPOUT(0x198820554);
  }
  if ((char *)ipint_i64_ne - (char *)ipint_unreachable != 20992)
  {
    __break(0xC471u);
    JUMPOUT(0x198820574);
  }
  if ((char *)ipint_i64_lt_s - (char *)ipint_unreachable != 21248)
  {
    __break(0xC471u);
    JUMPOUT(0x198820594);
  }
  if ((char *)ipint_i64_lt_u - (char *)ipint_unreachable != 21504)
  {
    __break(0xC471u);
    JUMPOUT(0x1988205B4);
  }
  if ((char *)ipint_i64_gt_s - (char *)ipint_unreachable != 21760)
  {
    __break(0xC471u);
    JUMPOUT(0x1988205D4);
  }
  if ((char *)ipint_i64_gt_u - (char *)ipint_unreachable != 22016)
  {
    __break(0xC471u);
    JUMPOUT(0x1988205F4);
  }
  if ((char *)ipint_i64_le_s - (char *)ipint_unreachable != 22272)
  {
    __break(0xC471u);
    JUMPOUT(0x198820614);
  }
  if ((char *)ipint_i64_le_u - (char *)ipint_unreachable != 22528)
  {
    __break(0xC471u);
    JUMPOUT(0x198820634);
  }
  if ((char *)ipint_i64_ge_s - (char *)ipint_unreachable != 22784)
  {
    __break(0xC471u);
    JUMPOUT(0x198820654);
  }
  if ((char *)ipint_i64_ge_u - (char *)ipint_unreachable != 23040)
  {
    __break(0xC471u);
    JUMPOUT(0x198820674);
  }
  if ((char *)ipint_f32_eq - (char *)ipint_unreachable != 23296)
  {
    __break(0xC471u);
    JUMPOUT(0x198820694);
  }
  if ((char *)ipint_f32_ne - (char *)ipint_unreachable != 23552)
  {
    __break(0xC471u);
    JUMPOUT(0x1988206B4);
  }
  if ((char *)ipint_f32_lt - (char *)ipint_unreachable != 23808)
  {
    __break(0xC471u);
    JUMPOUT(0x1988206D4);
  }
  if ((char *)ipint_f32_gt - (char *)ipint_unreachable != 24064)
  {
    __break(0xC471u);
    JUMPOUT(0x1988206F4);
  }
  if ((char *)ipint_f32_le - (char *)ipint_unreachable != 24320)
  {
    __break(0xC471u);
    JUMPOUT(0x198820714);
  }
  if ((char *)ipint_f32_ge - (char *)ipint_unreachable != 24576)
  {
    __break(0xC471u);
    JUMPOUT(0x198820734);
  }
  if ((char *)ipint_f64_eq - (char *)ipint_unreachable != 24832)
  {
    __break(0xC471u);
    JUMPOUT(0x198820754);
  }
  if ((char *)ipint_f64_ne - (char *)ipint_unreachable != 25088)
  {
    __break(0xC471u);
    JUMPOUT(0x198820774);
  }
  if ((char *)ipint_f64_lt - (char *)ipint_unreachable != 25344)
  {
    __break(0xC471u);
    JUMPOUT(0x198820794);
  }
  if ((char *)ipint_f64_gt - (char *)ipint_unreachable != 25600)
  {
    __break(0xC471u);
    JUMPOUT(0x1988207B4);
  }
  if ((char *)ipint_f64_le - (char *)ipint_unreachable != 25856)
  {
    __break(0xC471u);
    JUMPOUT(0x1988207D4);
  }
  if ((char *)ipint_f64_ge - (char *)ipint_unreachable != 26112)
  {
    __break(0xC471u);
    JUMPOUT(0x1988207F4);
  }
  if ((char *)ipint_i32_clz - (char *)ipint_unreachable != 26368)
  {
    __break(0xC471u);
    JUMPOUT(0x198820814);
  }
  if ((char *)ipint_i32_ctz - (char *)ipint_unreachable != 26624)
  {
    __break(0xC471u);
    JUMPOUT(0x198820834);
  }
  if ((char *)ipint_i32_popcnt - (char *)ipint_unreachable != 26880)
  {
    __break(0xC471u);
    JUMPOUT(0x198820854);
  }
  if ((char *)ipint_i32_add - (char *)ipint_unreachable != 27136)
  {
    __break(0xC471u);
    JUMPOUT(0x198820874);
  }
  if ((char *)ipint_i32_sub - (char *)ipint_unreachable != 27392)
  {
    __break(0xC471u);
    JUMPOUT(0x198820894);
  }
  if ((char *)ipint_i32_mul - (char *)ipint_unreachable != 27648)
  {
    __break(0xC471u);
    JUMPOUT(0x1988208B4);
  }
  if ((char *)ipint_i32_div_s - (char *)ipint_unreachable != 27904)
  {
    __break(0xC471u);
    JUMPOUT(0x1988208D4);
  }
  if ((char *)ipint_i32_div_u - (char *)ipint_unreachable != 28160)
  {
    __break(0xC471u);
    JUMPOUT(0x1988208F4);
  }
  if ((char *)ipint_i32_rem_s - (char *)ipint_unreachable != 28416)
  {
    __break(0xC471u);
    JUMPOUT(0x198820914);
  }
  if ((char *)ipint_i32_rem_u - (char *)ipint_unreachable != 28672)
  {
    __break(0xC471u);
    JUMPOUT(0x198820934);
  }
  if ((char *)ipint_i32_and - (char *)ipint_unreachable != 28928)
  {
    __break(0xC471u);
    JUMPOUT(0x198820954);
  }
  if ((char *)ipint_i32_or - (char *)ipint_unreachable != 29184)
  {
    __break(0xC471u);
    JUMPOUT(0x198820974);
  }
  if ((char *)ipint_i32_xor - (char *)ipint_unreachable != 29440)
  {
    __break(0xC471u);
    JUMPOUT(0x198820994);
  }
  if ((char *)ipint_i32_shl - (char *)ipint_unreachable != 29696)
  {
    __break(0xC471u);
    JUMPOUT(0x1988209B4);
  }
  if ((char *)ipint_i32_shr_s - (char *)ipint_unreachable != 29952)
  {
    __break(0xC471u);
    JUMPOUT(0x1988209D4);
  }
  if ((char *)ipint_i32_shr_u - (char *)ipint_unreachable != 30208)
  {
    __break(0xC471u);
    JUMPOUT(0x1988209F4);
  }
  if ((char *)ipint_i32_rotl - (char *)ipint_unreachable != 30464)
  {
    __break(0xC471u);
    JUMPOUT(0x198820A14);
  }
  if ((char *)ipint_i32_rotr - (char *)ipint_unreachable != 30720)
  {
    __break(0xC471u);
    JUMPOUT(0x198820A34);
  }
  if ((char *)ipint_i64_clz - (char *)ipint_unreachable != 30976)
  {
    __break(0xC471u);
    JUMPOUT(0x198820A54);
  }
  if ((char *)ipint_i64_ctz - (char *)ipint_unreachable != 31232)
  {
    __break(0xC471u);
    JUMPOUT(0x198820A74);
  }
  if ((char *)ipint_i64_popcnt - (char *)ipint_unreachable != 31488)
  {
    __break(0xC471u);
    JUMPOUT(0x198820A94);
  }
  if ((char *)ipint_i64_add - (char *)ipint_unreachable != 31744)
  {
    __break(0xC471u);
    JUMPOUT(0x198820AB4);
  }
  if ((char *)ipint_i64_sub - (char *)ipint_unreachable != 32000)
  {
    __break(0xC471u);
    JUMPOUT(0x198820AD4);
  }
  if ((char *)ipint_i64_mul - (char *)ipint_unreachable != 32256)
  {
    __break(0xC471u);
    JUMPOUT(0x198820AF4);
  }
  if ((char *)ipint_i64_div_s - (char *)ipint_unreachable != 32512)
  {
    __break(0xC471u);
    JUMPOUT(0x198820B14);
  }
  if ((char *)ipint_i64_div_u - (char *)ipint_unreachable != 0x8000)
  {
    __break(0xC471u);
    JUMPOUT(0x198820B34);
  }
  if ((char *)ipint_i64_rem_s - (char *)ipint_unreachable != 33024)
  {
    __break(0xC471u);
    JUMPOUT(0x198820B54);
  }
  if ((char *)ipint_i64_rem_u - (char *)ipint_unreachable != 33280)
  {
    __break(0xC471u);
    JUMPOUT(0x198820B74);
  }
  if ((char *)ipint_i64_and - (char *)ipint_unreachable != 33536)
  {
    __break(0xC471u);
    JUMPOUT(0x198820B94);
  }
  if ((char *)ipint_i64_or - (char *)ipint_unreachable != 33792)
  {
    __break(0xC471u);
    JUMPOUT(0x198820BB4);
  }
  if ((char *)ipint_i64_xor - (char *)ipint_unreachable != 34048)
  {
    __break(0xC471u);
    JUMPOUT(0x198820BD4);
  }
  if ((char *)ipint_i64_shl - (char *)ipint_unreachable != 34304)
  {
    __break(0xC471u);
    JUMPOUT(0x198820BF4);
  }
  if ((char *)ipint_i64_shr_s - (char *)ipint_unreachable != 34560)
  {
    __break(0xC471u);
    JUMPOUT(0x198820C14);
  }
  if ((char *)ipint_i64_shr_u - (char *)ipint_unreachable != 34816)
  {
    __break(0xC471u);
    JUMPOUT(0x198820C34);
  }
  if ((char *)ipint_i64_rotl - (char *)ipint_unreachable != 35072)
  {
    __break(0xC471u);
    JUMPOUT(0x198820C54);
  }
  if ((char *)ipint_i64_rotr - (char *)ipint_unreachable != 35328)
  {
    __break(0xC471u);
    JUMPOUT(0x198820C74);
  }
  if ((char *)ipint_f32_abs - (char *)ipint_unreachable != 35584)
  {
    __break(0xC471u);
    JUMPOUT(0x198820C94);
  }
  if ((char *)ipint_f32_neg - (char *)ipint_unreachable != 35840)
  {
    __break(0xC471u);
    JUMPOUT(0x198820CB4);
  }
  if ((char *)ipint_f32_ceil - (char *)ipint_unreachable != 36096)
  {
    __break(0xC471u);
    JUMPOUT(0x198820CD4);
  }
  if ((char *)ipint_f32_floor - (char *)ipint_unreachable != 36352)
  {
    __break(0xC471u);
    JUMPOUT(0x198820CF4);
  }
  if ((char *)ipint_f32_trunc - (char *)ipint_unreachable != 36608)
  {
    __break(0xC471u);
    JUMPOUT(0x198820D14);
  }
  if ((char *)ipint_f32_nearest - (char *)ipint_unreachable != 36864)
  {
    __break(0xC471u);
    JUMPOUT(0x198820D34);
  }
  if ((char *)ipint_f32_sqrt - (char *)ipint_unreachable != 37120)
  {
    __break(0xC471u);
    JUMPOUT(0x198820D54);
  }
  if ((char *)ipint_f32_add - (char *)ipint_unreachable != 37376)
  {
    __break(0xC471u);
    JUMPOUT(0x198820D74);
  }
  if ((char *)ipint_f32_sub - (char *)ipint_unreachable != 37632)
  {
    __break(0xC471u);
    JUMPOUT(0x198820D94);
  }
  if ((char *)ipint_f32_mul - (char *)ipint_unreachable != 37888)
  {
    __break(0xC471u);
    JUMPOUT(0x198820DB4);
  }
  if ((char *)ipint_f32_div - (char *)ipint_unreachable != 38144)
  {
    __break(0xC471u);
    JUMPOUT(0x198820DD4);
  }
  if ((char *)ipint_f32_min - (char *)ipint_unreachable != 38400)
  {
    __break(0xC471u);
    JUMPOUT(0x198820DF4);
  }
  if ((char *)ipint_f32_max - (char *)ipint_unreachable != 38656)
  {
    __break(0xC471u);
    JUMPOUT(0x198820E14);
  }
  if ((char *)ipint_f32_copysign - (char *)ipint_unreachable != 38912)
  {
    __break(0xC471u);
    JUMPOUT(0x198820E34);
  }
  if ((char *)ipint_f64_abs - (char *)ipint_unreachable != 39168)
  {
    __break(0xC471u);
    JUMPOUT(0x198820E54);
  }
  if ((char *)ipint_f64_neg - (char *)ipint_unreachable != 39424)
  {
    __break(0xC471u);
    JUMPOUT(0x198820E74);
  }
  if ((char *)ipint_f64_ceil - (char *)ipint_unreachable != 39680)
  {
    __break(0xC471u);
    JUMPOUT(0x198820E94);
  }
  if ((char *)ipint_f64_floor - (char *)ipint_unreachable != 39936)
  {
    __break(0xC471u);
    JUMPOUT(0x198820EB4);
  }
  if ((char *)ipint_f64_trunc - (char *)ipint_unreachable != 40192)
  {
    __break(0xC471u);
    JUMPOUT(0x198820ED4);
  }
  if ((char *)ipint_f64_nearest - (char *)ipint_unreachable != 40448)
  {
    __break(0xC471u);
    JUMPOUT(0x198820EF4);
  }
  if ((char *)ipint_f64_sqrt - (char *)ipint_unreachable != 40704)
  {
    __break(0xC471u);
    JUMPOUT(0x198820F14);
  }
  if ((char *)ipint_f64_add - (char *)ipint_unreachable != 40960)
  {
    __break(0xC471u);
    JUMPOUT(0x198820F34);
  }
  if ((char *)ipint_f64_sub - (char *)ipint_unreachable != 41216)
  {
    __break(0xC471u);
    JUMPOUT(0x198820F54);
  }
  if ((char *)ipint_f64_mul - (char *)ipint_unreachable != 41472)
  {
    __break(0xC471u);
    JUMPOUT(0x198820F74);
  }
  if ((char *)ipint_f64_div - (char *)ipint_unreachable != 41728)
  {
    __break(0xC471u);
    JUMPOUT(0x198820F94);
  }
  if ((char *)ipint_f64_min - (char *)ipint_unreachable != 41984)
  {
    __break(0xC471u);
    JUMPOUT(0x198820FB4);
  }
  if ((char *)ipint_f64_max - (char *)ipint_unreachable != 42240)
  {
    __break(0xC471u);
    JUMPOUT(0x198820FD4);
  }
  if ((char *)ipint_f64_copysign - (char *)ipint_unreachable != 42496)
  {
    __break(0xC471u);
    JUMPOUT(0x198820FF4);
  }
  if ((char *)ipint_i32_wrap_i64 - (char *)ipint_unreachable != 42752)
  {
    __break(0xC471u);
    JUMPOUT(0x198821014);
  }
  if ((char *)ipint_i32_trunc_f32_s - (char *)ipint_unreachable != 43008)
  {
    __break(0xC471u);
    JUMPOUT(0x198821034);
  }
  if ((char *)ipint_i32_trunc_f32_u - (char *)ipint_unreachable != 43264)
  {
    __break(0xC471u);
    JUMPOUT(0x198821054);
  }
  if ((char *)ipint_i32_trunc_f64_s - (char *)ipint_unreachable != 43520)
  {
    __break(0xC471u);
    JUMPOUT(0x198821074);
  }
  if ((char *)ipint_i32_trunc_f64_u - (char *)ipint_unreachable != 43776)
  {
    __break(0xC471u);
    JUMPOUT(0x198821094);
  }
  if ((char *)ipint_i64_extend_i32_s - (char *)ipint_unreachable != 44032)
  {
    __break(0xC471u);
    JUMPOUT(0x1988210B4);
  }
  if ((char *)ipint_i64_extend_i32_u - (char *)ipint_unreachable != 44288)
  {
    __break(0xC471u);
    JUMPOUT(0x1988210D4);
  }
  if ((char *)ipint_i64_trunc_f32_s - (char *)ipint_unreachable != 44544)
  {
    __break(0xC471u);
    JUMPOUT(0x1988210F4);
  }
  if ((char *)ipint_i64_trunc_f32_u - (char *)ipint_unreachable != 44800)
  {
    __break(0xC471u);
    JUMPOUT(0x198821114);
  }
  if ((char *)ipint_i64_trunc_f64_s - (char *)ipint_unreachable != 45056)
  {
    __break(0xC471u);
    JUMPOUT(0x198821134);
  }
  if ((char *)ipint_i64_trunc_f64_u - (char *)ipint_unreachable != 45312)
  {
    __break(0xC471u);
    JUMPOUT(0x198821154);
  }
  if ((char *)ipint_f32_convert_i32_s - (char *)ipint_unreachable != 45568)
  {
    __break(0xC471u);
    JUMPOUT(0x198821174);
  }
  if ((char *)ipint_f32_convert_i32_u - (char *)ipint_unreachable != 45824)
  {
    __break(0xC471u);
    JUMPOUT(0x198821194);
  }
  if ((char *)ipint_f32_convert_i64_s - (char *)ipint_unreachable != 46080)
  {
    __break(0xC471u);
    JUMPOUT(0x1988211B4);
  }
  if ((char *)ipint_f32_convert_i64_u - (char *)ipint_unreachable != 46336)
  {
    __break(0xC471u);
    JUMPOUT(0x1988211D4);
  }
  if ((char *)ipint_f32_demote_f64 - (char *)ipint_unreachable != 46592)
  {
    __break(0xC471u);
    JUMPOUT(0x1988211F4);
  }
  if ((char *)ipint_f64_convert_i32_s - (char *)ipint_unreachable != 46848)
  {
    __break(0xC471u);
    JUMPOUT(0x198821214);
  }
  if ((char *)ipint_f64_convert_i32_u - (char *)ipint_unreachable != 47104)
  {
    __break(0xC471u);
    JUMPOUT(0x198821234);
  }
  if ((char *)ipint_f64_convert_i64_s - (char *)ipint_unreachable != 47360)
  {
    __break(0xC471u);
    JUMPOUT(0x198821254);
  }
  if ((char *)ipint_f64_convert_i64_u - (char *)ipint_unreachable != 47616)
  {
    __break(0xC471u);
    JUMPOUT(0x198821274);
  }
  if ((char *)ipint_f64_promote_f32 - (char *)ipint_unreachable != 47872)
  {
    __break(0xC471u);
    JUMPOUT(0x198821294);
  }
  if ((char *)ipint_i32_reinterpret_f32 - (char *)ipint_unreachable != 48128)
  {
    __break(0xC471u);
    JUMPOUT(0x1988212B4);
  }
  if ((char *)ipint_i64_reinterpret_f64 - (char *)ipint_unreachable != 48384)
  {
    __break(0xC471u);
    JUMPOUT(0x1988212D4);
  }
  if ((char *)ipint_f32_reinterpret_i32 - (char *)ipint_unreachable != 48640)
  {
    __break(0xC471u);
    JUMPOUT(0x1988212F4);
  }
  if ((char *)ipint_f64_reinterpret_i64 - (char *)ipint_unreachable != 48896)
  {
    __break(0xC471u);
    JUMPOUT(0x198821314);
  }
  if ((char *)ipint_i32_extend8_s - (char *)ipint_unreachable != 49152)
  {
    __break(0xC471u);
    JUMPOUT(0x198821334);
  }
  if ((char *)ipint_i32_extend16_s - (char *)ipint_unreachable != 49408)
  {
    __break(0xC471u);
    JUMPOUT(0x198821354);
  }
  if ((char *)ipint_i64_extend8_s - (char *)ipint_unreachable != 49664)
  {
    __break(0xC471u);
    JUMPOUT(0x198821374);
  }
  if ((char *)ipint_i64_extend16_s - (char *)ipint_unreachable != 49920)
  {
    __break(0xC471u);
    JUMPOUT(0x198821394);
  }
  if ((char *)ipint_i64_extend32_s - (char *)ipint_unreachable != 50176)
  {
    __break(0xC471u);
    JUMPOUT(0x1988213B4);
  }
  if ((char *)ipint_reserved_0xc5 - (char *)ipint_unreachable != 50432)
  {
    __break(0xC471u);
    JUMPOUT(0x1988213D4);
  }
  if ((char *)ipint_reserved_0xc6 - (char *)ipint_unreachable != 50688)
  {
    __break(0xC471u);
    JUMPOUT(0x1988213F4);
  }
  if ((char *)ipint_reserved_0xc7 - (char *)ipint_unreachable != 50944)
  {
    __break(0xC471u);
    JUMPOUT(0x198821414);
  }
  if ((char *)ipint_reserved_0xc8 - (char *)ipint_unreachable != 51200)
  {
    __break(0xC471u);
    JUMPOUT(0x198821434);
  }
  if ((char *)ipint_reserved_0xc9 - (char *)ipint_unreachable != 51456)
  {
    __break(0xC471u);
    JUMPOUT(0x198821454);
  }
  if ((char *)ipint_reserved_0xca - (char *)ipint_unreachable != 51712)
  {
    __break(0xC471u);
    JUMPOUT(0x198821474);
  }
  if ((char *)ipint_reserved_0xcb - (char *)ipint_unreachable != 51968)
  {
    __break(0xC471u);
    JUMPOUT(0x198821494);
  }
  if ((char *)ipint_reserved_0xcc - (char *)ipint_unreachable != 52224)
  {
    __break(0xC471u);
    JUMPOUT(0x1988214B4);
  }
  if ((char *)ipint_reserved_0xcd - (char *)ipint_unreachable != 52480)
  {
    __break(0xC471u);
    JUMPOUT(0x1988214D4);
  }
  if ((char *)ipint_reserved_0xce - (char *)ipint_unreachable != 52736)
  {
    __break(0xC471u);
    JUMPOUT(0x1988214F4);
  }
  if ((char *)ipint_reserved_0xcf - (char *)ipint_unreachable != 52992)
  {
    __break(0xC471u);
    JUMPOUT(0x198821514);
  }
  if ((char *)ipint_ref_null_t - (char *)ipint_unreachable != 53248)
  {
    __break(0xC471u);
    JUMPOUT(0x198821534);
  }
  if ((char *)ipint_ref_is_null - (char *)ipint_unreachable != 53504)
  {
    __break(0xC471u);
    JUMPOUT(0x198821554);
  }
  if ((char *)ipint_ref_func - (char *)ipint_unreachable != 53760)
  {
    __break(0xC471u);
    JUMPOUT(0x198821574);
  }
  if ((char *)ipint_reserved_0xd3 - (char *)ipint_unreachable != 54016)
  {
    __break(0xC471u);
    JUMPOUT(0x198821594);
  }
  if ((char *)ipint_reserved_0xd4 - (char *)ipint_unreachable != 54272)
  {
    __break(0xC471u);
    JUMPOUT(0x1988215B4);
  }
  if ((char *)ipint_reserved_0xd5 - (char *)ipint_unreachable != 54528)
  {
    __break(0xC471u);
    JUMPOUT(0x1988215D4);
  }
  if ((char *)ipint_reserved_0xd6 - (char *)ipint_unreachable != 54784)
  {
    __break(0xC471u);
    JUMPOUT(0x1988215F4);
  }
  if ((char *)ipint_reserved_0xd7 - (char *)ipint_unreachable != 55040)
  {
    __break(0xC471u);
    JUMPOUT(0x198821614);
  }
  if ((char *)ipint_reserved_0xd8 - (char *)ipint_unreachable != 55296)
  {
    __break(0xC471u);
    JUMPOUT(0x198821634);
  }
  if ((char *)ipint_reserved_0xd9 - (char *)ipint_unreachable != 55552)
  {
    __break(0xC471u);
    JUMPOUT(0x198821654);
  }
  if ((char *)ipint_reserved_0xda - (char *)ipint_unreachable != 55808)
  {
    __break(0xC471u);
    JUMPOUT(0x198821674);
  }
  if ((char *)ipint_reserved_0xdb - (char *)ipint_unreachable != 56064)
  {
    __break(0xC471u);
    JUMPOUT(0x198821694);
  }
  if ((char *)ipint_reserved_0xdc - (char *)ipint_unreachable != 56320)
  {
    __break(0xC471u);
    JUMPOUT(0x1988216B4);
  }
  if ((char *)ipint_reserved_0xdd - (char *)ipint_unreachable != 56576)
  {
    __break(0xC471u);
    JUMPOUT(0x1988216D4);
  }
  if ((char *)ipint_reserved_0xde - (char *)ipint_unreachable != 56832)
  {
    __break(0xC471u);
    JUMPOUT(0x1988216F4);
  }
  if ((char *)ipint_reserved_0xdf - (char *)ipint_unreachable != 57088)
  {
    __break(0xC471u);
    JUMPOUT(0x198821714);
  }
  if ((char *)ipint_reserved_0xe0 - (char *)ipint_unreachable != 57344)
  {
    __break(0xC471u);
    JUMPOUT(0x198821734);
  }
  if ((char *)ipint_reserved_0xe1 - (char *)ipint_unreachable != 57600)
  {
    __break(0xC471u);
    JUMPOUT(0x198821754);
  }
  if ((char *)ipint_reserved_0xe2 - (char *)ipint_unreachable != 57856)
  {
    __break(0xC471u);
    JUMPOUT(0x198821774);
  }
  if ((char *)ipint_reserved_0xe3 - (char *)ipint_unreachable != 58112)
  {
    __break(0xC471u);
    JUMPOUT(0x198821794);
  }
  if ((char *)ipint_reserved_0xe4 - (char *)ipint_unreachable != 58368)
  {
    __break(0xC471u);
    JUMPOUT(0x1988217B4);
  }
  if ((char *)ipint_reserved_0xe5 - (char *)ipint_unreachable != 58624)
  {
    __break(0xC471u);
    JUMPOUT(0x1988217D4);
  }
  if ((char *)ipint_reserved_0xe6 - (char *)ipint_unreachable != 58880)
  {
    __break(0xC471u);
    JUMPOUT(0x1988217F4);
  }
  if ((char *)ipint_reserved_0xe7 - (char *)ipint_unreachable != 59136)
  {
    __break(0xC471u);
    JUMPOUT(0x198821814);
  }
  if ((char *)ipint_reserved_0xe8 - (char *)ipint_unreachable != 59392)
  {
    __break(0xC471u);
    JUMPOUT(0x198821834);
  }
  if ((char *)ipint_reserved_0xe9 - (char *)ipint_unreachable != 59648)
  {
    __break(0xC471u);
    JUMPOUT(0x198821854);
  }
  if ((char *)ipint_reserved_0xea - (char *)ipint_unreachable != 59904)
  {
    __break(0xC471u);
    JUMPOUT(0x198821874);
  }
  if ((char *)ipint_reserved_0xeb - (char *)ipint_unreachable != 60160)
  {
    __break(0xC471u);
    JUMPOUT(0x198821894);
  }
  if ((char *)ipint_reserved_0xec - (char *)ipint_unreachable != 60416)
  {
    __break(0xC471u);
    JUMPOUT(0x1988218B4);
  }
  if ((char *)ipint_reserved_0xed - (char *)ipint_unreachable != 60672)
  {
    __break(0xC471u);
    JUMPOUT(0x1988218D4);
  }
  if ((char *)ipint_reserved_0xee - (char *)ipint_unreachable != 60928)
  {
    __break(0xC471u);
    JUMPOUT(0x1988218F4);
  }
  if ((char *)ipint_reserved_0xef - (char *)ipint_unreachable != 61184)
  {
    __break(0xC471u);
    JUMPOUT(0x198821914);
  }
  if ((char *)ipint_reserved_0xf0 - (char *)ipint_unreachable != 61440)
  {
    __break(0xC471u);
    JUMPOUT(0x198821934);
  }
  if ((char *)ipint_reserved_0xf1 - (char *)ipint_unreachable != 61696)
  {
    __break(0xC471u);
    JUMPOUT(0x198821954);
  }
  if ((char *)ipint_reserved_0xf2 - (char *)ipint_unreachable != 61952)
  {
    __break(0xC471u);
    JUMPOUT(0x198821974);
  }
  if ((char *)ipint_reserved_0xf3 - (char *)ipint_unreachable != 62208)
  {
    __break(0xC471u);
    JUMPOUT(0x198821994);
  }
  if ((char *)ipint_reserved_0xf4 - (char *)ipint_unreachable != 62464)
  {
    __break(0xC471u);
    JUMPOUT(0x1988219B4);
  }
  if ((char *)ipint_reserved_0xf5 - (char *)ipint_unreachable != 62720)
  {
    __break(0xC471u);
    JUMPOUT(0x1988219D4);
  }
  if ((char *)ipint_reserved_0xf6 - (char *)ipint_unreachable != 62976)
  {
    __break(0xC471u);
    JUMPOUT(0x1988219F4);
  }
  if ((char *)ipint_reserved_0xf7 - (char *)ipint_unreachable != 63232)
  {
    __break(0xC471u);
    JUMPOUT(0x198821A14);
  }
  if ((char *)ipint_reserved_0xf8 - (char *)ipint_unreachable != 63488)
  {
    __break(0xC471u);
    JUMPOUT(0x198821A34);
  }
  if ((char *)ipint_reserved_0xf9 - (char *)ipint_unreachable != 63744)
  {
    __break(0xC471u);
    JUMPOUT(0x198821A54);
  }
  if ((char *)ipint_reserved_0xfa - (char *)ipint_unreachable != 64000)
  {
    __break(0xC471u);
    JUMPOUT(0x198821A74);
  }
  if ((char *)ipint_reserved_0xfb - (char *)ipint_unreachable != 64256)
  {
    __break(0xC471u);
    JUMPOUT(0x198821A94);
  }
  if ((char *)ipint_fc_block - (char *)ipint_unreachable != 64512)
  {
    __break(0xC471u);
    JUMPOUT(0x198821AB4);
  }
  if ((char *)ipint_simd - (char *)ipint_unreachable != 64768)
  {
    __break(0xC471u);
    JUMPOUT(0x198821AD4);
  }
  if ((char *)ipint_atomic - (char *)ipint_unreachable != 65024)
  {
    __break(0xC471u);
    JUMPOUT(0x198821AF4);
  }
  if ((char *)ipint_reserved_0xff - (char *)ipint_unreachable != 65280)
  {
    __break(0xC471u);
    JUMPOUT(0x198821B14);
  }
  if ((char *)ipint_i32_trunc_sat_f32_u - (char *)ipint_i32_trunc_sat_f32_s != 256)
  {
    __break(0xC471u);
    JUMPOUT(0x198821B34);
  }
  if ((char *)ipint_i32_trunc_sat_f64_s - (char *)ipint_i32_trunc_sat_f32_s != 512)
  {
    __break(0xC471u);
    JUMPOUT(0x198821B54);
  }
  if ((char *)ipint_i32_trunc_sat_f64_u - (char *)ipint_i32_trunc_sat_f32_s != 768)
  {
    __break(0xC471u);
    JUMPOUT(0x198821B74);
  }
  if ((char *)ipint_i64_trunc_sat_f32_s - (char *)ipint_i32_trunc_sat_f32_s != 1024)
  {
    __break(0xC471u);
    JUMPOUT(0x198821B94);
  }
  if ((char *)ipint_i64_trunc_sat_f32_u - (char *)ipint_i32_trunc_sat_f32_s != 1280)
  {
    __break(0xC471u);
    JUMPOUT(0x198821BB4);
  }
  if ((char *)ipint_i64_trunc_sat_f64_s - (char *)ipint_i32_trunc_sat_f32_s != 1536)
  {
    __break(0xC471u);
    JUMPOUT(0x198821BD4);
  }
  if ((char *)ipint_i64_trunc_sat_f64_u - (char *)ipint_i32_trunc_sat_f32_s != 1792)
  {
    __break(0xC471u);
    JUMPOUT(0x198821BF4);
  }
  if ((char *)ipint_memory_init - (char *)ipint_i32_trunc_sat_f32_s != 2048)
  {
    __break(0xC471u);
    JUMPOUT(0x198821C14);
  }
  if ((char *)ipint_data_drop - (char *)ipint_i32_trunc_sat_f32_s != 2304)
  {
    __break(0xC471u);
    JUMPOUT(0x198821C34);
  }
  if ((char *)ipint_memory_copy - (char *)ipint_i32_trunc_sat_f32_s != 2560)
  {
    __break(0xC471u);
    JUMPOUT(0x198821C54);
  }
  if ((char *)ipint_memory_fill - (char *)ipint_i32_trunc_sat_f32_s != 2816)
  {
    __break(0xC471u);
    JUMPOUT(0x198821C74);
  }
  if ((char *)ipint_table_init - (char *)ipint_i32_trunc_sat_f32_s != 3072)
  {
    __break(0xC471u);
    JUMPOUT(0x198821C94);
  }
  if ((char *)ipint_elem_drop - (char *)ipint_i32_trunc_sat_f32_s != 3328)
  {
    __break(0xC471u);
    JUMPOUT(0x198821CB4);
  }
  if ((char *)ipint_table_copy - (char *)ipint_i32_trunc_sat_f32_s != 3584)
  {
    __break(0xC471u);
    JUMPOUT(0x198821CD4);
  }
  if ((char *)ipint_table_grow - (char *)ipint_i32_trunc_sat_f32_s != 3840)
  {
    __break(0xC471u);
    JUMPOUT(0x198821CF4);
  }
  if ((char *)ipint_table_size - (char *)ipint_i32_trunc_sat_f32_s != 4096)
  {
    __break(0xC471u);
    JUMPOUT(0x198821D14);
  }
  if ((char *)ipint_table_fill - (char *)ipint_i32_trunc_sat_f32_s != 4352)
  {
    __break(0xC471u);
    JUMPOUT(0x198821D34);
  }
  if ((char *)ipint_simd_v128_load_8x8s_mem - (char *)ipint_simd_v128_load_mem != 256)
  {
    __break(0xC471u);
    JUMPOUT(0x198821D54);
  }
  if ((char *)ipint_simd_v128_load_8x8u_mem - (char *)ipint_simd_v128_load_mem != 512)
  {
    __break(0xC471u);
    JUMPOUT(0x198821D74);
  }
  if ((char *)ipint_simd_v128_load_16x4s_mem - (char *)ipint_simd_v128_load_mem != 768)
  {
    __break(0xC471u);
    JUMPOUT(0x198821D94);
  }
  if ((char *)ipint_simd_v128_load_16x4u_mem - (char *)ipint_simd_v128_load_mem != 1024)
  {
    __break(0xC471u);
    JUMPOUT(0x198821DB4);
  }
  if ((char *)ipint_simd_v128_load_32x2s_mem - (char *)ipint_simd_v128_load_mem != 1280)
  {
    __break(0xC471u);
    JUMPOUT(0x198821DD4);
  }
  if ((char *)ipint_simd_v128_load_32x2u_mem - (char *)ipint_simd_v128_load_mem != 1536)
  {
    __break(0xC471u);
    JUMPOUT(0x198821DF4);
  }
  if ((char *)ipint_simd_v128_load8_splat_mem - (char *)ipint_simd_v128_load_mem != 1792)
  {
    __break(0xC471u);
    JUMPOUT(0x198821E14);
  }
  if ((char *)ipint_simd_v128_load16_splat_mem - (char *)ipint_simd_v128_load_mem != 2048)
  {
    __break(0xC471u);
    JUMPOUT(0x198821E34);
  }
  if ((char *)ipint_simd_v128_load32_splat_mem - (char *)ipint_simd_v128_load_mem != 2304)
  {
    __break(0xC471u);
    JUMPOUT(0x198821E54);
  }
  if ((char *)ipint_simd_v128_load64_splat_mem - (char *)ipint_simd_v128_load_mem != 2560)
  {
    __break(0xC471u);
    JUMPOUT(0x198821E74);
  }
  if ((char *)ipint_simd_v128_store_mem - (char *)ipint_simd_v128_load_mem != 2816)
  {
    __break(0xC471u);
    JUMPOUT(0x198821E94);
  }
  if ((char *)ipint_simd_v128_const - (char *)ipint_simd_v128_load_mem != 3072)
  {
    __break(0xC471u);
    JUMPOUT(0x198821EB4);
  }
  if ((char *)ipint_simd_i8x16_shuffle - (char *)ipint_simd_v128_load_mem != 3328)
  {
    __break(0xC471u);
    JUMPOUT(0x198821ED4);
  }
  if ((char *)ipint_simd_i8x16_swizzle - (char *)ipint_simd_v128_load_mem != 3584)
  {
    __break(0xC471u);
    JUMPOUT(0x198821EF4);
  }
  if ((char *)ipint_simd_i8x16_splat - (char *)ipint_simd_v128_load_mem != 3840)
  {
    __break(0xC471u);
    JUMPOUT(0x198821F14);
  }
  if ((char *)ipint_simd_i16x8_splat - (char *)ipint_simd_v128_load_mem != 4096)
  {
    __break(0xC471u);
    JUMPOUT(0x198821F34);
  }
  if ((char *)ipint_simd_i32x4_splat - (char *)ipint_simd_v128_load_mem != 4352)
  {
    __break(0xC471u);
    JUMPOUT(0x198821F54);
  }
  if ((char *)ipint_simd_i64x2_splat - (char *)ipint_simd_v128_load_mem != 4608)
  {
    __break(0xC471u);
    JUMPOUT(0x198821F74);
  }
  if ((char *)ipint_simd_f32x4_splat - (char *)ipint_simd_v128_load_mem != 4864)
  {
    __break(0xC471u);
    JUMPOUT(0x198821F94);
  }
  if ((char *)ipint_simd_f64x2_splat - (char *)ipint_simd_v128_load_mem != 5120)
  {
    __break(0xC471u);
    JUMPOUT(0x198821FB4);
  }
  if ((char *)ipint_simd_i8x16_extract_lane_s - (char *)ipint_simd_v128_load_mem != 5376)
  {
    __break(0xC471u);
    JUMPOUT(0x198821FD4);
  }
  if ((char *)ipint_simd_i8x16_extract_lane_u - (char *)ipint_simd_v128_load_mem != 5632)
  {
    __break(0xC471u);
    JUMPOUT(0x198821FF4);
  }
  if ((char *)ipint_simd_i8x16_replace_lane - (char *)ipint_simd_v128_load_mem != 5888)
  {
    __break(0xC471u);
    JUMPOUT(0x198822014);
  }
  if ((char *)ipint_simd_i16x8_extract_lane_s - (char *)ipint_simd_v128_load_mem != 6144)
  {
    __break(0xC471u);
    JUMPOUT(0x198822034);
  }
  if ((char *)ipint_simd_i16x8_extract_lane_u - (char *)ipint_simd_v128_load_mem != 6400)
  {
    __break(0xC471u);
    JUMPOUT(0x198822054);
  }
  if ((char *)ipint_simd_i16x8_replace_lane - (char *)ipint_simd_v128_load_mem != 6656)
  {
    __break(0xC471u);
    JUMPOUT(0x198822074);
  }
  if ((char *)ipint_simd_i32x4_extract_lane - (char *)ipint_simd_v128_load_mem != 6912)
  {
    __break(0xC471u);
    JUMPOUT(0x198822094);
  }
  if ((char *)ipint_simd_i32x4_replace_lane - (char *)ipint_simd_v128_load_mem != 7168)
  {
    __break(0xC471u);
    JUMPOUT(0x1988220B4);
  }
  if ((char *)ipint_simd_i64x2_extract_lane - (char *)ipint_simd_v128_load_mem != 7424)
  {
    __break(0xC471u);
    JUMPOUT(0x1988220D4);
  }
  if ((char *)ipint_simd_i64x2_replace_lane - (char *)ipint_simd_v128_load_mem != 7680)
  {
    __break(0xC471u);
    JUMPOUT(0x1988220F4);
  }
  if ((char *)ipint_simd_f32x4_extract_lane - (char *)ipint_simd_v128_load_mem != 7936)
  {
    __break(0xC471u);
    JUMPOUT(0x198822114);
  }
  if ((char *)ipint_simd_f32x4_replace_lane - (char *)ipint_simd_v128_load_mem != 0x2000)
  {
    __break(0xC471u);
    JUMPOUT(0x198822134);
  }
  if ((char *)ipint_simd_f64x2_extract_lane - (char *)ipint_simd_v128_load_mem != 8448)
  {
    __break(0xC471u);
    JUMPOUT(0x198822154);
  }
  if ((char *)ipint_simd_f64x2_replace_lane - (char *)ipint_simd_v128_load_mem != 8704)
  {
    __break(0xC471u);
    JUMPOUT(0x198822174);
  }
  if ((char *)ipint_simd_i8x16_eq - (char *)ipint_simd_v128_load_mem != 8960)
  {
    __break(0xC471u);
    JUMPOUT(0x198822194);
  }
  if ((char *)ipint_simd_i8x16_ne - (char *)ipint_simd_v128_load_mem != 9216)
  {
    __break(0xC471u);
    JUMPOUT(0x1988221B4);
  }
  if ((char *)ipint_simd_i8x16_lt_s - (char *)ipint_simd_v128_load_mem != 9472)
  {
    __break(0xC471u);
    JUMPOUT(0x1988221D4);
  }
  if ((char *)ipint_simd_i8x16_lt_u - (char *)ipint_simd_v128_load_mem != 9728)
  {
    __break(0xC471u);
    JUMPOUT(0x1988221F4);
  }
  if ((char *)ipint_simd_i8x16_gt_s - (char *)ipint_simd_v128_load_mem != 9984)
  {
    __break(0xC471u);
    JUMPOUT(0x198822214);
  }
  if ((char *)ipint_simd_i8x16_gt_u - (char *)ipint_simd_v128_load_mem != 10240)
  {
    __break(0xC471u);
    JUMPOUT(0x198822234);
  }
  if ((char *)ipint_simd_i8x16_le_s - (char *)ipint_simd_v128_load_mem != 10496)
  {
    __break(0xC471u);
    JUMPOUT(0x198822254);
  }
  if ((char *)ipint_simd_i8x16_le_u - (char *)ipint_simd_v128_load_mem != 10752)
  {
    __break(0xC471u);
    JUMPOUT(0x198822274);
  }
  if ((char *)ipint_simd_i8x16_ge_s - (char *)ipint_simd_v128_load_mem != 11008)
  {
    __break(0xC471u);
    JUMPOUT(0x198822294);
  }
  if ((char *)ipint_simd_i8x16_ge_u - (char *)ipint_simd_v128_load_mem != 11264)
  {
    __break(0xC471u);
    JUMPOUT(0x1988222B4);
  }
  if ((char *)ipint_simd_i16x8_eq - (char *)ipint_simd_v128_load_mem != 11520)
  {
    __break(0xC471u);
    JUMPOUT(0x1988222D4);
  }
  if ((char *)ipint_simd_i16x8_ne - (char *)ipint_simd_v128_load_mem != 11776)
  {
    __break(0xC471u);
    JUMPOUT(0x1988222F4);
  }
  if ((char *)ipint_simd_i16x8_lt_s - (char *)ipint_simd_v128_load_mem != 12032)
  {
    __break(0xC471u);
    JUMPOUT(0x198822314);
  }
  if ((char *)ipint_simd_i16x8_lt_u - (char *)ipint_simd_v128_load_mem != 12288)
  {
    __break(0xC471u);
    JUMPOUT(0x198822334);
  }
  if ((char *)ipint_simd_i16x8_gt_s - (char *)ipint_simd_v128_load_mem != 12544)
  {
    __break(0xC471u);
    JUMPOUT(0x198822354);
  }
  if ((char *)ipint_simd_i16x8_gt_u - (char *)ipint_simd_v128_load_mem != 12800)
  {
    __break(0xC471u);
    JUMPOUT(0x198822374);
  }
  if ((char *)ipint_simd_i16x8_le_s - (char *)ipint_simd_v128_load_mem != 13056)
  {
    __break(0xC471u);
    JUMPOUT(0x198822394);
  }
  if ((char *)ipint_simd_i16x8_le_u - (char *)ipint_simd_v128_load_mem != 13312)
  {
    __break(0xC471u);
    JUMPOUT(0x1988223B4);
  }
  if ((char *)ipint_simd_i16x8_ge_s - (char *)ipint_simd_v128_load_mem != 13568)
  {
    __break(0xC471u);
    JUMPOUT(0x1988223D4);
  }
  if ((char *)ipint_simd_i16x8_ge_u - (char *)ipint_simd_v128_load_mem != 13824)
  {
    __break(0xC471u);
    JUMPOUT(0x1988223F4);
  }
  if ((char *)ipint_simd_i32x4_eq - (char *)ipint_simd_v128_load_mem != 14080)
  {
    __break(0xC471u);
    JUMPOUT(0x198822414);
  }
  if ((char *)ipint_simd_i32x4_ne - (char *)ipint_simd_v128_load_mem != 14336)
  {
    __break(0xC471u);
    JUMPOUT(0x198822434);
  }
  if ((char *)ipint_simd_i32x4_lt_s - (char *)ipint_simd_v128_load_mem != 14592)
  {
    __break(0xC471u);
    JUMPOUT(0x198822454);
  }
  if ((char *)ipint_simd_i32x4_lt_u - (char *)ipint_simd_v128_load_mem != 14848)
  {
    __break(0xC471u);
    JUMPOUT(0x198822474);
  }
  if ((char *)ipint_simd_i32x4_gt_s - (char *)ipint_simd_v128_load_mem != 15104)
  {
    __break(0xC471u);
    JUMPOUT(0x198822494);
  }
  if ((char *)ipint_simd_i32x4_gt_u - (char *)ipint_simd_v128_load_mem != 15360)
  {
    __break(0xC471u);
    JUMPOUT(0x1988224B4);
  }
  if ((char *)ipint_simd_i32x4_le_s - (char *)ipint_simd_v128_load_mem != 15616)
  {
    __break(0xC471u);
    JUMPOUT(0x1988224D4);
  }
  if ((char *)ipint_simd_i32x4_le_u - (char *)ipint_simd_v128_load_mem != 15872)
  {
    __break(0xC471u);
    JUMPOUT(0x1988224F4);
  }
  if ((char *)ipint_simd_i32x4_ge_s - (char *)ipint_simd_v128_load_mem != 16128)
  {
    __break(0xC471u);
    JUMPOUT(0x198822514);
  }
  if ((char *)ipint_simd_i32x4_ge_u - (char *)ipint_simd_v128_load_mem != 0x4000)
  {
    __break(0xC471u);
    JUMPOUT(0x198822534);
  }
  if ((char *)ipint_simd_f32x4_eq - (char *)ipint_simd_v128_load_mem != 16640)
  {
    __break(0xC471u);
    JUMPOUT(0x198822554);
  }
  if ((char *)ipint_simd_f32x4_ne - (char *)ipint_simd_v128_load_mem != 16896)
  {
    __break(0xC471u);
    JUMPOUT(0x198822574);
  }
  if ((char *)ipint_simd_f32x4_lt - (char *)ipint_simd_v128_load_mem != 17152)
  {
    __break(0xC471u);
    JUMPOUT(0x198822594);
  }
  if ((char *)ipint_simd_f32x4_gt - (char *)ipint_simd_v128_load_mem != 17408)
  {
    __break(0xC471u);
    JUMPOUT(0x1988225B4);
  }
  if ((char *)ipint_simd_f32x4_le - (char *)ipint_simd_v128_load_mem != 17664)
  {
    __break(0xC471u);
    JUMPOUT(0x1988225D4);
  }
  if ((char *)ipint_simd_f32x4_ge - (char *)ipint_simd_v128_load_mem != 17920)
  {
    __break(0xC471u);
    JUMPOUT(0x1988225F4);
  }
  if ((char *)ipint_simd_f64x2_eq - (char *)ipint_simd_v128_load_mem != 18176)
  {
    __break(0xC471u);
    JUMPOUT(0x198822614);
  }
  if ((char *)ipint_simd_f64x2_ne - (char *)ipint_simd_v128_load_mem != 18432)
  {
    __break(0xC471u);
    JUMPOUT(0x198822634);
  }
  if ((char *)ipint_simd_f64x2_lt - (char *)ipint_simd_v128_load_mem != 18688)
  {
    __break(0xC471u);
    JUMPOUT(0x198822654);
  }
  if ((char *)ipint_simd_f64x2_gt - (char *)ipint_simd_v128_load_mem != 18944)
  {
    __break(0xC471u);
    JUMPOUT(0x198822674);
  }
  if ((char *)ipint_simd_f64x2_le - (char *)ipint_simd_v128_load_mem != 19200)
  {
    __break(0xC471u);
    JUMPOUT(0x198822694);
  }
  if ((char *)ipint_simd_f64x2_ge - (char *)ipint_simd_v128_load_mem != 19456)
  {
    __break(0xC471u);
    JUMPOUT(0x1988226B4);
  }
  if ((char *)ipint_simd_v128_not - (char *)ipint_simd_v128_load_mem != 19712)
  {
    __break(0xC471u);
    JUMPOUT(0x1988226D4);
  }
  if ((char *)ipint_simd_v128_and - (char *)ipint_simd_v128_load_mem != 19968)
  {
    __break(0xC471u);
    JUMPOUT(0x1988226F4);
  }
  if ((char *)ipint_simd_v128_andnot - (char *)ipint_simd_v128_load_mem != 20224)
  {
    __break(0xC471u);
    JUMPOUT(0x198822714);
  }
  if ((char *)ipint_simd_v128_or - (char *)ipint_simd_v128_load_mem != 20480)
  {
    __break(0xC471u);
    JUMPOUT(0x198822734);
  }
  if ((char *)ipint_simd_v128_xor - (char *)ipint_simd_v128_load_mem != 20736)
  {
    __break(0xC471u);
    JUMPOUT(0x198822754);
  }
  if ((char *)ipint_simd_v128_bitselect - (char *)ipint_simd_v128_load_mem != 20992)
  {
    __break(0xC471u);
    JUMPOUT(0x198822774);
  }
  if ((char *)ipint_simd_v128_any_true - (char *)ipint_simd_v128_load_mem != 21248)
  {
    __break(0xC471u);
    JUMPOUT(0x198822794);
  }
  if ((char *)ipint_simd_v128_load8_lane_mem - (char *)ipint_simd_v128_load_mem != 21504)
  {
    __break(0xC471u);
    JUMPOUT(0x1988227B4);
  }
  if ((char *)ipint_simd_v128_load16_lane_mem - (char *)ipint_simd_v128_load_mem != 21760)
  {
    __break(0xC471u);
    JUMPOUT(0x1988227D4);
  }
  if ((char *)ipint_simd_v128_load32_lane_mem - (char *)ipint_simd_v128_load_mem != 22016)
  {
    __break(0xC471u);
    JUMPOUT(0x1988227F4);
  }
  if ((char *)ipint_simd_v128_load64_lane_mem - (char *)ipint_simd_v128_load_mem != 22272)
  {
    __break(0xC471u);
    JUMPOUT(0x198822814);
  }
  if ((char *)ipint_simd_v128_store8_lane_mem - (char *)ipint_simd_v128_load_mem != 22528)
  {
    __break(0xC471u);
    JUMPOUT(0x198822834);
  }
  if ((char *)ipint_simd_v128_store16_lane_mem - (char *)ipint_simd_v128_load_mem != 22784)
  {
    __break(0xC471u);
    JUMPOUT(0x198822854);
  }
  if ((char *)ipint_simd_v128_store32_lane_mem - (char *)ipint_simd_v128_load_mem != 23040)
  {
    __break(0xC471u);
    JUMPOUT(0x198822874);
  }
  if ((char *)ipint_simd_v128_store64_lane_mem - (char *)ipint_simd_v128_load_mem != 23296)
  {
    __break(0xC471u);
    JUMPOUT(0x198822894);
  }
  if ((char *)ipint_simd_v128_load32_zero_mem - (char *)ipint_simd_v128_load_mem != 23552)
  {
    __break(0xC471u);
    JUMPOUT(0x1988228B4);
  }
  if ((char *)ipint_simd_v128_load64_zero_mem - (char *)ipint_simd_v128_load_mem != 23808)
  {
    __break(0xC471u);
    JUMPOUT(0x1988228D4);
  }
  if ((char *)ipint_simd_f32x4_demote_f64x2_zero - (char *)ipint_simd_v128_load_mem != 24064)
  {
    __break(0xC471u);
    JUMPOUT(0x1988228F4);
  }
  if ((char *)ipint_simd_f64x2_promote_low_f32x4 - (char *)ipint_simd_v128_load_mem != 24320)
  {
    __break(0xC471u);
    JUMPOUT(0x198822914);
  }
  if ((char *)ipint_simd_i8x16_abs - (char *)ipint_simd_v128_load_mem != 24576)
  {
    __break(0xC471u);
    JUMPOUT(0x198822934);
  }
  if ((char *)ipint_simd_i8x16_neg - (char *)ipint_simd_v128_load_mem != 24832)
  {
    __break(0xC471u);
    JUMPOUT(0x198822954);
  }
  if ((char *)ipint_simd_i8x16_popcnt - (char *)ipint_simd_v128_load_mem != 25088)
  {
    __break(0xC471u);
    JUMPOUT(0x198822974);
  }
  if ((char *)ipint_simd_i8x16_all_true - (char *)ipint_simd_v128_load_mem != 25344)
  {
    __break(0xC471u);
    JUMPOUT(0x198822994);
  }
  if ((char *)ipint_simd_i8x16_bitmask - (char *)ipint_simd_v128_load_mem != 25600)
  {
    __break(0xC471u);
    JUMPOUT(0x1988229B4);
  }
  if ((char *)ipint_simd_i8x16_narrow_i16x8_s - (char *)ipint_simd_v128_load_mem != 25856)
  {
    __break(0xC471u);
    JUMPOUT(0x1988229D4);
  }
  if ((char *)ipint_simd_i8x16_narrow_i16x8_u - (char *)ipint_simd_v128_load_mem != 26112)
  {
    __break(0xC471u);
    JUMPOUT(0x1988229F4);
  }
  if ((char *)ipint_simd_f32x4_ceil - (char *)ipint_simd_v128_load_mem != 26368)
  {
    __break(0xC471u);
    JUMPOUT(0x198822A14);
  }
  if ((char *)ipint_simd_f32x4_floor - (char *)ipint_simd_v128_load_mem != 26624)
  {
    __break(0xC471u);
    JUMPOUT(0x198822A34);
  }
  if ((char *)ipint_simd_f32x4_trunc - (char *)ipint_simd_v128_load_mem != 26880)
  {
    __break(0xC471u);
    JUMPOUT(0x198822A54);
  }
  if ((char *)ipint_simd_f32x4_nearest - (char *)ipint_simd_v128_load_mem != 27136)
  {
    __break(0xC471u);
    JUMPOUT(0x198822A74);
  }
  if ((char *)ipint_simd_i8x16_shl - (char *)ipint_simd_v128_load_mem != 27392)
  {
    __break(0xC471u);
    JUMPOUT(0x198822A94);
  }
  if ((char *)ipint_simd_i8x16_shr_s - (char *)ipint_simd_v128_load_mem != 27648)
  {
    __break(0xC471u);
    JUMPOUT(0x198822AB4);
  }
  if ((char *)ipint_simd_i8x16_shr_u - (char *)ipint_simd_v128_load_mem != 27904)
  {
    __break(0xC471u);
    JUMPOUT(0x198822AD4);
  }
  if ((char *)ipint_simd_i8x16_add - (char *)ipint_simd_v128_load_mem != 28160)
  {
    __break(0xC471u);
    JUMPOUT(0x198822AF4);
  }
  if ((char *)ipint_simd_i8x16_add_sat_s - (char *)ipint_simd_v128_load_mem != 28416)
  {
    __break(0xC471u);
    JUMPOUT(0x198822B14);
  }
  if ((char *)ipint_simd_i8x16_add_sat_u - (char *)ipint_simd_v128_load_mem != 28672)
  {
    __break(0xC471u);
    JUMPOUT(0x198822B34);
  }
  if ((char *)ipint_simd_i8x16_sub - (char *)ipint_simd_v128_load_mem != 28928)
  {
    __break(0xC471u);
    JUMPOUT(0x198822B54);
  }
  if ((char *)ipint_simd_i8x16_sub_sat_s - (char *)ipint_simd_v128_load_mem != 29184)
  {
    __break(0xC471u);
    JUMPOUT(0x198822B74);
  }
  if ((char *)ipint_simd_i8x16_sub_sat_u - (char *)ipint_simd_v128_load_mem != 29440)
  {
    __break(0xC471u);
    JUMPOUT(0x198822B94);
  }
  if ((char *)ipint_simd_f64x2_ceil - (char *)ipint_simd_v128_load_mem != 29696)
  {
    __break(0xC471u);
    JUMPOUT(0x198822BB4);
  }
  if ((char *)ipint_simd_f64x2_floor - (char *)ipint_simd_v128_load_mem != 29952)
  {
    __break(0xC471u);
    JUMPOUT(0x198822BD4);
  }
  if ((char *)ipint_simd_i8x16_min_s - (char *)ipint_simd_v128_load_mem != 30208)
  {
    __break(0xC471u);
    JUMPOUT(0x198822BF4);
  }
  if ((char *)ipint_simd_i8x16_min_u - (char *)ipint_simd_v128_load_mem != 30464)
  {
    __break(0xC471u);
    JUMPOUT(0x198822C14);
  }
  if ((char *)ipint_simd_i8x16_max_s - (char *)ipint_simd_v128_load_mem != 30720)
  {
    __break(0xC471u);
    JUMPOUT(0x198822C34);
  }
  if ((char *)ipint_simd_i8x16_max_u - (char *)ipint_simd_v128_load_mem != 30976)
  {
    __break(0xC471u);
    JUMPOUT(0x198822C54);
  }
  if ((char *)ipint_simd_f64x2_trunc - (char *)ipint_simd_v128_load_mem != 31232)
  {
    __break(0xC471u);
    JUMPOUT(0x198822C74);
  }
  if ((char *)ipint_simd_i8x16_avgr_u - (char *)ipint_simd_v128_load_mem != 31488)
  {
    __break(0xC471u);
    JUMPOUT(0x198822C94);
  }
  if ((char *)ipint_simd_i16x8_extadd_pairwise_i8x16_s - (char *)ipint_simd_v128_load_mem != 31744)
  {
    __break(0xC471u);
    JUMPOUT(0x198822CB4);
  }
  if ((char *)ipint_simd_i16x8_extadd_pairwise_i8x16_u - (char *)ipint_simd_v128_load_mem != 32000)
  {
    __break(0xC471u);
    JUMPOUT(0x198822CD4);
  }
  if ((char *)ipint_simd_i32x4_extadd_pairwise_i16x8_s - (char *)ipint_simd_v128_load_mem != 32256)
  {
    __break(0xC471u);
    JUMPOUT(0x198822CF4);
  }
  if ((char *)ipint_simd_i32x4_extadd_pairwise_i16x8_u - (char *)ipint_simd_v128_load_mem != 32512)
  {
    __break(0xC471u);
    JUMPOUT(0x198822D14);
  }
  if ((char *)ipint_simd_i16x8_abs - (char *)ipint_simd_v128_load_mem != 0x8000)
  {
    __break(0xC471u);
    JUMPOUT(0x198822D34);
  }
  if ((char *)ipint_simd_i16x8_neg - (char *)ipint_simd_v128_load_mem != 33024)
  {
    __break(0xC471u);
    JUMPOUT(0x198822D54);
  }
  if ((char *)ipint_simd_i16x8_q15mulr_sat_s - (char *)ipint_simd_v128_load_mem != 33280)
  {
    __break(0xC471u);
    JUMPOUT(0x198822D74);
  }
  if ((char *)ipint_simd_i16x8_all_true - (char *)ipint_simd_v128_load_mem != 33536)
  {
    __break(0xC471u);
    JUMPOUT(0x198822D94);
  }
  if ((char *)ipint_simd_i16x8_bitmask - (char *)ipint_simd_v128_load_mem != 33792)
  {
    __break(0xC471u);
    JUMPOUT(0x198822DB4);
  }
  if ((char *)ipint_simd_i16x8_narrow_i32x4_s - (char *)ipint_simd_v128_load_mem != 34048)
  {
    __break(0xC471u);
    JUMPOUT(0x198822DD4);
  }
  if ((char *)ipint_simd_i16x8_narrow_i32x4_u - (char *)ipint_simd_v128_load_mem != 34304)
  {
    __break(0xC471u);
    JUMPOUT(0x198822DF4);
  }
  if ((char *)ipint_simd_i16x8_extend_low_i8x16_s - (char *)ipint_simd_v128_load_mem != 34560)
  {
    __break(0xC471u);
    JUMPOUT(0x198822E14);
  }
  if ((char *)ipint_simd_i16x8_extend_high_i8x16_s - (char *)ipint_simd_v128_load_mem != 34816)
  {
    __break(0xC471u);
    JUMPOUT(0x198822E34);
  }
  if ((char *)ipint_simd_i16x8_extend_low_i8x16_u - (char *)ipint_simd_v128_load_mem != 35072)
  {
    __break(0xC471u);
    JUMPOUT(0x198822E54);
  }
  if ((char *)ipint_simd_i16x8_extend_high_i8x16_u - (char *)ipint_simd_v128_load_mem != 35328)
  {
    __break(0xC471u);
    JUMPOUT(0x198822E74);
  }
  if ((char *)ipint_simd_i16x8_shl - (char *)ipint_simd_v128_load_mem != 35584)
  {
    __break(0xC471u);
    JUMPOUT(0x198822E94);
  }
  if ((char *)ipint_simd_i16x8_shr_s - (char *)ipint_simd_v128_load_mem != 35840)
  {
    __break(0xC471u);
    JUMPOUT(0x198822EB4);
  }
  if ((char *)ipint_simd_i16x8_shr_u - (char *)ipint_simd_v128_load_mem != 36096)
  {
    __break(0xC471u);
    JUMPOUT(0x198822ED4);
  }
  if ((char *)ipint_simd_i16x8_add - (char *)ipint_simd_v128_load_mem != 36352)
  {
    __break(0xC471u);
    JUMPOUT(0x198822EF4);
  }
  if ((char *)ipint_simd_i16x8_add_sat_s - (char *)ipint_simd_v128_load_mem != 36608)
  {
    __break(0xC471u);
    JUMPOUT(0x198822F14);
  }
  if ((char *)ipint_simd_i16x8_add_sat_u - (char *)ipint_simd_v128_load_mem != 36864)
  {
    __break(0xC471u);
    JUMPOUT(0x198822F34);
  }
  if ((char *)ipint_simd_i16x8_sub - (char *)ipint_simd_v128_load_mem != 37120)
  {
    __break(0xC471u);
    JUMPOUT(0x198822F54);
  }
  if ((char *)ipint_simd_i16x8_sub_sat_s - (char *)ipint_simd_v128_load_mem != 37376)
  {
    __break(0xC471u);
    JUMPOUT(0x198822F74);
  }
  if ((char *)ipint_simd_i16x8_sub_sat_u - (char *)ipint_simd_v128_load_mem != 37632)
  {
    __break(0xC471u);
    JUMPOUT(0x198822F94);
  }
  if ((char *)ipint_simd_f64x2_nearest - (char *)ipint_simd_v128_load_mem != 37888)
  {
    __break(0xC471u);
    JUMPOUT(0x198822FB4);
  }
  if ((char *)ipint_simd_i16x8_mul - (char *)ipint_simd_v128_load_mem != 38144)
  {
    __break(0xC471u);
    JUMPOUT(0x198822FD4);
  }
  if ((char *)ipint_simd_i16x8_min_s - (char *)ipint_simd_v128_load_mem != 38400)
  {
    __break(0xC471u);
    JUMPOUT(0x198822FF4);
  }
  if ((char *)ipint_simd_i16x8_min_u - (char *)ipint_simd_v128_load_mem != 38656)
  {
    __break(0xC471u);
    JUMPOUT(0x198823014);
  }
  if ((char *)ipint_simd_i16x8_max_s - (char *)ipint_simd_v128_load_mem != 38912)
  {
    __break(0xC471u);
    JUMPOUT(0x198823034);
  }
  if ((char *)ipint_simd_i16x8_max_u - (char *)ipint_simd_v128_load_mem != 39168)
  {
    __break(0xC471u);
    JUMPOUT(0x198823054);
  }
  if ((char *)ipint_reserved_0xfd9a01 - (char *)ipint_simd_v128_load_mem != 39424)
  {
    __break(0xC471u);
    JUMPOUT(0x198823074);
  }
  if ((char *)ipint_simd_i16x8_avgr_u - (char *)ipint_simd_v128_load_mem != 39680)
  {
    __break(0xC471u);
    JUMPOUT(0x198823094);
  }
  if ((char *)ipint_simd_i16x8_extmul_low_i8x16_s - (char *)ipint_simd_v128_load_mem != 39936)
  {
    __break(0xC471u);
    JUMPOUT(0x1988230B4);
  }
  if ((char *)ipint_simd_i16x8_extmul_high_i8x16_s - (char *)ipint_simd_v128_load_mem != 40192)
  {
    __break(0xC471u);
    JUMPOUT(0x1988230D4);
  }
  if ((char *)ipint_simd_i16x8_extmul_low_i8x16_u - (char *)ipint_simd_v128_load_mem != 40448)
  {
    __break(0xC471u);
    JUMPOUT(0x1988230F4);
  }
  if ((char *)ipint_simd_i16x8_extmul_high_i8x16_u - (char *)ipint_simd_v128_load_mem != 40704)
  {
    __break(0xC471u);
    JUMPOUT(0x198823114);
  }
  if ((char *)ipint_simd_i32x4_abs - (char *)ipint_simd_v128_load_mem != 40960)
  {
    __break(0xC471u);
    JUMPOUT(0x198823134);
  }
  if ((char *)ipint_simd_i32x4_neg - (char *)ipint_simd_v128_load_mem != 41216)
  {
    __break(0xC471u);
    JUMPOUT(0x198823154);
  }
  if ((char *)ipint_reserved_0xfda201 - (char *)ipint_simd_v128_load_mem != 41472)
  {
    __break(0xC471u);
    JUMPOUT(0x198823174);
  }
  if ((char *)ipint_simd_i32x4_all_true - (char *)ipint_simd_v128_load_mem != 41728)
  {
    __break(0xC471u);
    JUMPOUT(0x198823194);
  }
  if ((char *)ipint_simd_i32x4_bitmask - (char *)ipint_simd_v128_load_mem != 41984)
  {
    __break(0xC471u);
    JUMPOUT(0x1988231B4);
  }
  if ((char *)ipint_reserved_0xfda501 - (char *)ipint_simd_v128_load_mem != 42240)
  {
    __break(0xC471u);
    JUMPOUT(0x1988231D4);
  }
  if ((char *)ipint_reserved_0xfda601 - (char *)ipint_simd_v128_load_mem != 42496)
  {
    __break(0xC471u);
    JUMPOUT(0x1988231F4);
  }
  if ((char *)ipint_simd_i32x4_extend_low_i16x8_s - (char *)ipint_simd_v128_load_mem != 42752)
  {
    __break(0xC471u);
    JUMPOUT(0x198823214);
  }
  if ((char *)ipint_simd_i32x4_extend_high_i16x8_s - (char *)ipint_simd_v128_load_mem != 43008)
  {
    __break(0xC471u);
    JUMPOUT(0x198823234);
  }
  if ((char *)ipint_simd_i32x4_extend_low_i16x8_u - (char *)ipint_simd_v128_load_mem != 43264)
  {
    __break(0xC471u);
    JUMPOUT(0x198823254);
  }
  if ((char *)ipint_simd_i32x4_extend_high_i16x8_u - (char *)ipint_simd_v128_load_mem != 43520)
  {
    __break(0xC471u);
    JUMPOUT(0x198823274);
  }
  if ((char *)ipint_simd_i32x4_shl - (char *)ipint_simd_v128_load_mem != 43776)
  {
    __break(0xC471u);
    JUMPOUT(0x198823294);
  }
  if ((char *)ipint_simd_i32x4_shr_s - (char *)ipint_simd_v128_load_mem != 44032)
  {
    __break(0xC471u);
    JUMPOUT(0x1988232B4);
  }
  if ((char *)ipint_simd_i32x4_shr_u - (char *)ipint_simd_v128_load_mem != 44288)
  {
    __break(0xC471u);
    JUMPOUT(0x1988232D4);
  }
  if ((char *)ipint_simd_i32x4_add - (char *)ipint_simd_v128_load_mem != 44544)
  {
    __break(0xC471u);
    JUMPOUT(0x1988232F4);
  }
  if ((char *)ipint_reserved_0xfdaf01 - (char *)ipint_simd_v128_load_mem != 44800)
  {
    __break(0xC471u);
    JUMPOUT(0x198823314);
  }
  if ((char *)ipint_reserved_0xfdb001 - (char *)ipint_simd_v128_load_mem != 45056)
  {
    __break(0xC471u);
    JUMPOUT(0x198823334);
  }
  if ((char *)ipint_simd_i32x4_sub - (char *)ipint_simd_v128_load_mem != 45312)
  {
    __break(0xC471u);
    JUMPOUT(0x198823354);
  }
  if ((char *)ipint_reserved_0xfdb201 - (char *)ipint_simd_v128_load_mem != 45568)
  {
    __break(0xC471u);
    JUMPOUT(0x198823374);
  }
  if ((char *)ipint_reserved_0xfdb301 - (char *)ipint_simd_v128_load_mem != 45824)
  {
    __break(0xC471u);
    JUMPOUT(0x198823394);
  }
  if ((char *)ipint_reserved_0xfdb401 - (char *)ipint_simd_v128_load_mem != 46080)
  {
    __break(0xC471u);
    JUMPOUT(0x1988233B4);
  }
  if ((char *)ipint_simd_i32x4_mul - (char *)ipint_simd_v128_load_mem != 46336)
  {
    __break(0xC471u);
    JUMPOUT(0x1988233D4);
  }
  if ((char *)ipint_simd_i32x4_min_s - (char *)ipint_simd_v128_load_mem != 46592)
  {
    __break(0xC471u);
    JUMPOUT(0x1988233F4);
  }
  if ((char *)ipint_simd_i32x4_min_u - (char *)ipint_simd_v128_load_mem != 46848)
  {
    __break(0xC471u);
    JUMPOUT(0x198823414);
  }
  if ((char *)ipint_simd_i32x4_max_s - (char *)ipint_simd_v128_load_mem != 47104)
  {
    __break(0xC471u);
    JUMPOUT(0x198823434);
  }
  if ((char *)ipint_simd_i32x4_max_u - (char *)ipint_simd_v128_load_mem != 47360)
  {
    __break(0xC471u);
    JUMPOUT(0x198823454);
  }
  if ((char *)ipint_simd_i32x4_dot_i16x8_s - (char *)ipint_simd_v128_load_mem != 47616)
  {
    __break(0xC471u);
    JUMPOUT(0x198823474);
  }
  if ((char *)ipint_reserved_0xfdbb01 - (char *)ipint_simd_v128_load_mem != 47872)
  {
    __break(0xC471u);
    JUMPOUT(0x198823494);
  }
  if ((char *)ipint_simd_i32x4_extmul_low_i16x8_s - (char *)ipint_simd_v128_load_mem != 48128)
  {
    __break(0xC471u);
    JUMPOUT(0x1988234B4);
  }
  if ((char *)ipint_simd_i32x4_extmul_high_i16x8_s - (char *)ipint_simd_v128_load_mem != 48384)
  {
    __break(0xC471u);
    JUMPOUT(0x1988234D4);
  }
  if ((char *)ipint_simd_i32x4_extmul_low_i16x8_u - (char *)ipint_simd_v128_load_mem != 48640)
  {
    __break(0xC471u);
    JUMPOUT(0x1988234F4);
  }
  if ((char *)ipint_simd_i32x4_extmul_high_i16x8_u - (char *)ipint_simd_v128_load_mem != 48896)
  {
    __break(0xC471u);
    JUMPOUT(0x198823514);
  }
  if ((char *)ipint_simd_i64x2_abs - (char *)ipint_simd_v128_load_mem != 49152)
  {
    __break(0xC471u);
    JUMPOUT(0x198823534);
  }
  if ((char *)ipint_simd_i64x2_neg - (char *)ipint_simd_v128_load_mem != 49408)
  {
    __break(0xC471u);
    JUMPOUT(0x198823554);
  }
  if ((char *)ipint_reserved_0xfdc201 - (char *)ipint_simd_v128_load_mem != 49664)
  {
    __break(0xC471u);
    JUMPOUT(0x198823574);
  }
  if ((char *)ipint_simd_i64x2_all_true - (char *)ipint_simd_v128_load_mem != 49920)
  {
    __break(0xC471u);
    JUMPOUT(0x198823594);
  }
  if ((char *)ipint_simd_i64x2_bitmask - (char *)ipint_simd_v128_load_mem != 50176)
  {
    __break(0xC471u);
    JUMPOUT(0x1988235B4);
  }
  if ((char *)ipint_reserved_0xfdc501 - (char *)ipint_simd_v128_load_mem != 50432)
  {
    __break(0xC471u);
    JUMPOUT(0x1988235D4);
  }
  if ((char *)ipint_reserved_0xfdc601 - (char *)ipint_simd_v128_load_mem != 50688)
  {
    __break(0xC471u);
    JUMPOUT(0x1988235F4);
  }
  if ((char *)ipint_simd_i64x2_extend_low_i32x4_s - (char *)ipint_simd_v128_load_mem != 50944)
  {
    __break(0xC471u);
    JUMPOUT(0x198823614);
  }
  if ((char *)ipint_simd_i64x2_extend_high_i32x4_s - (char *)ipint_simd_v128_load_mem != 51200)
  {
    __break(0xC471u);
    JUMPOUT(0x198823634);
  }
  if ((char *)ipint_simd_i64x2_extend_low_i32x4_u - (char *)ipint_simd_v128_load_mem != 51456)
  {
    __break(0xC471u);
    JUMPOUT(0x198823654);
  }
  if ((char *)ipint_simd_i64x2_extend_high_i32x4_u - (char *)ipint_simd_v128_load_mem != 51712)
  {
    __break(0xC471u);
    JUMPOUT(0x198823674);
  }
  if ((char *)ipint_simd_i64x2_shl - (char *)ipint_simd_v128_load_mem != 51968)
  {
    __break(0xC471u);
    JUMPOUT(0x198823694);
  }
  if ((char *)ipint_simd_i64x2_shr_s - (char *)ipint_simd_v128_load_mem != 52224)
  {
    __break(0xC471u);
    JUMPOUT(0x1988236B4);
  }
  if ((char *)ipint_simd_i64x2_shr_u - (char *)ipint_simd_v128_load_mem != 52480)
  {
    __break(0xC471u);
    JUMPOUT(0x1988236D4);
  }
  if ((char *)ipint_simd_i64x2_add - (char *)ipint_simd_v128_load_mem != 52736)
  {
    __break(0xC471u);
    JUMPOUT(0x1988236F4);
  }
  if ((char *)ipint_reserved_0xfdcf01 - (char *)ipint_simd_v128_load_mem != 52992)
  {
    __break(0xC471u);
    JUMPOUT(0x198823714);
  }
  if ((char *)ipint_reserved_0xfdd001 - (char *)ipint_simd_v128_load_mem != 53248)
  {
    __break(0xC471u);
    JUMPOUT(0x198823734);
  }
  if ((char *)ipint_simd_i64x2_sub - (char *)ipint_simd_v128_load_mem != 53504)
  {
    __break(0xC471u);
    JUMPOUT(0x198823754);
  }
  if ((char *)ipint_reserved_0xfdd201 - (char *)ipint_simd_v128_load_mem != 53760)
  {
    __break(0xC471u);
    JUMPOUT(0x198823774);
  }
  if ((char *)ipint_reserved_0xfdd301 - (char *)ipint_simd_v128_load_mem != 54016)
  {
    __break(0xC471u);
    JUMPOUT(0x198823794);
  }
  if ((char *)ipint_reserved_0xfdd401 - (char *)ipint_simd_v128_load_mem != 54272)
  {
    __break(0xC471u);
    JUMPOUT(0x1988237B4);
  }
  if ((char *)ipint_simd_i64x2_mul - (char *)ipint_simd_v128_load_mem != 54528)
  {
    __break(0xC471u);
    JUMPOUT(0x1988237D4);
  }
  if ((char *)ipint_simd_i64x2_eq - (char *)ipint_simd_v128_load_mem != 54784)
  {
    __break(0xC471u);
    JUMPOUT(0x1988237F4);
  }
  if ((char *)ipint_simd_i64x2_ne - (char *)ipint_simd_v128_load_mem != 55040)
  {
    __break(0xC471u);
    JUMPOUT(0x198823814);
  }
  if ((char *)ipint_simd_i64x2_lt_s - (char *)ipint_simd_v128_load_mem != 55296)
  {
    __break(0xC471u);
    JUMPOUT(0x198823834);
  }
  if ((char *)ipint_simd_i64x2_gt_s - (char *)ipint_simd_v128_load_mem != 55552)
  {
    __break(0xC471u);
    JUMPOUT(0x198823854);
  }
  if ((char *)ipint_simd_i64x2_le_s - (char *)ipint_simd_v128_load_mem != 55808)
  {
    __break(0xC471u);
    JUMPOUT(0x198823874);
  }
  if ((char *)ipint_simd_i64x2_ge_s - (char *)ipint_simd_v128_load_mem != 56064)
  {
    __break(0xC471u);
    JUMPOUT(0x198823894);
  }
  if ((char *)ipint_simd_i64x2_extmul_low_i32x4_s - (char *)ipint_simd_v128_load_mem != 56320)
  {
    __break(0xC471u);
    JUMPOUT(0x1988238B4);
  }
  if ((char *)ipint_simd_i64x2_extmul_high_i32x4_s - (char *)ipint_simd_v128_load_mem != 56576)
  {
    __break(0xC471u);
    JUMPOUT(0x1988238D4);
  }
  if ((char *)ipint_simd_i64x2_extmul_low_i32x4_u - (char *)ipint_simd_v128_load_mem != 56832)
  {
    __break(0xC471u);
    JUMPOUT(0x1988238F4);
  }
  if ((char *)ipint_simd_i64x2_extmul_high_i32x4_u - (char *)ipint_simd_v128_load_mem != 57088)
  {
    __break(0xC471u);
    JUMPOUT(0x198823914);
  }
  if ((char *)ipint_simd_f32x4_abs - (char *)ipint_simd_v128_load_mem != 57344)
  {
    __break(0xC471u);
    JUMPOUT(0x198823934);
  }
  if ((char *)ipint_simd_f32x4_neg - (char *)ipint_simd_v128_load_mem != 57600)
  {
    __break(0xC471u);
    JUMPOUT(0x198823954);
  }
  if ((char *)ipint_reserved_0xfde201 - (char *)ipint_simd_v128_load_mem != 57856)
  {
    __break(0xC471u);
    JUMPOUT(0x198823974);
  }
  if ((char *)ipint_simd_f32x4_sqrt - (char *)ipint_simd_v128_load_mem != 58112)
  {
    __break(0xC471u);
    JUMPOUT(0x198823994);
  }
  if ((char *)ipint_simd_f32x4_add - (char *)ipint_simd_v128_load_mem != 58368)
  {
    __break(0xC471u);
    JUMPOUT(0x1988239B4);
  }
  if ((char *)ipint_simd_f32x4_sub - (char *)ipint_simd_v128_load_mem != 58624)
  {
    __break(0xC471u);
    JUMPOUT(0x1988239D4);
  }
  if ((char *)ipint_simd_f32x4_mul - (char *)ipint_simd_v128_load_mem != 58880)
  {
    __break(0xC471u);
    JUMPOUT(0x1988239F4);
  }
  if ((char *)ipint_simd_f32x4_div - (char *)ipint_simd_v128_load_mem != 59136)
  {
    __break(0xC471u);
    JUMPOUT(0x198823A14);
  }
  if ((char *)ipint_simd_f32x4_min - (char *)ipint_simd_v128_load_mem != 59392)
  {
    __break(0xC471u);
    JUMPOUT(0x198823A34);
  }
  if ((char *)ipint_simd_f32x4_max - (char *)ipint_simd_v128_load_mem != 59648)
  {
    __break(0xC471u);
    JUMPOUT(0x198823A54);
  }
  if ((char *)ipint_simd_f32x4_pmin - (char *)ipint_simd_v128_load_mem != 59904)
  {
    __break(0xC471u);
    JUMPOUT(0x198823A74);
  }
  if ((char *)ipint_simd_f32x4_pmax - (char *)ipint_simd_v128_load_mem != 60160)
  {
    __break(0xC471u);
    JUMPOUT(0x198823A94);
  }
  if ((char *)ipint_simd_f64x2_abs - (char *)ipint_simd_v128_load_mem != 60416)
  {
    __break(0xC471u);
    JUMPOUT(0x198823AB4);
  }
  if ((char *)ipint_simd_f64x2_neg - (char *)ipint_simd_v128_load_mem != 60672)
  {
    __break(0xC471u);
    JUMPOUT(0x198823AD4);
  }
  if ((char *)ipint_reserved_0xfdee01 - (char *)ipint_simd_v128_load_mem != 60928)
  {
    __break(0xC471u);
    JUMPOUT(0x198823AF4);
  }
  if ((char *)ipint_simd_f64x2_sqrt - (char *)ipint_simd_v128_load_mem != 61184)
  {
    __break(0xC471u);
    JUMPOUT(0x198823B14);
  }
  if ((char *)ipint_simd_f64x2_add - (char *)ipint_simd_v128_load_mem != 61440)
  {
    __break(0xC471u);
    JUMPOUT(0x198823B34);
  }
  if ((char *)ipint_simd_f64x2_sub - (char *)ipint_simd_v128_load_mem != 61696)
  {
    __break(0xC471u);
    JUMPOUT(0x198823B54);
  }
  if ((char *)ipint_simd_f64x2_mul - (char *)ipint_simd_v128_load_mem != 61952)
  {
    __break(0xC471u);
    JUMPOUT(0x198823B74);
  }
  if ((char *)ipint_simd_f64x2_div - (char *)ipint_simd_v128_load_mem != 62208)
  {
    __break(0xC471u);
    JUMPOUT(0x198823B94);
  }
  if ((char *)ipint_simd_f64x2_min - (char *)ipint_simd_v128_load_mem != 62464)
  {
    __break(0xC471u);
    JUMPOUT(0x198823BB4);
  }
  if ((char *)ipint_simd_f64x2_max - (char *)ipint_simd_v128_load_mem != 62720)
  {
    __break(0xC471u);
    JUMPOUT(0x198823BD4);
  }
  if ((char *)ipint_simd_f64x2_pmin - (char *)ipint_simd_v128_load_mem != 62976)
  {
    __break(0xC471u);
    JUMPOUT(0x198823BF4);
  }
  if ((char *)ipint_simd_f64x2_pmax - (char *)ipint_simd_v128_load_mem != 63232)
  {
    __break(0xC471u);
    JUMPOUT(0x198823C14);
  }
  if ((char *)ipint_simd_i32x4_trunc_sat_f32x4_s - (char *)ipint_simd_v128_load_mem != 63488)
  {
    __break(0xC471u);
    JUMPOUT(0x198823C34);
  }
  if ((char *)ipint_simd_i32x4_trunc_sat_f32x4_u - (char *)ipint_simd_v128_load_mem != 63744)
  {
    __break(0xC471u);
    JUMPOUT(0x198823C54);
  }
  if ((char *)ipint_simd_f32x4_convert_i32x4_s - (char *)ipint_simd_v128_load_mem != 64000)
  {
    __break(0xC471u);
    JUMPOUT(0x198823C74);
  }
  if ((char *)ipint_simd_f32x4_convert_i32x4_u - (char *)ipint_simd_v128_load_mem != 64256)
  {
    __break(0xC471u);
    JUMPOUT(0x198823C94);
  }
  if ((char *)ipint_simd_i32x4_trunc_sat_f64x2_s_zero - (char *)ipint_simd_v128_load_mem != 64512)
  {
    __break(0xC471u);
    JUMPOUT(0x198823CB4);
  }
  if ((char *)ipint_simd_i32x4_trunc_sat_f64x2_u_zero - (char *)ipint_simd_v128_load_mem != 64768)
  {
    __break(0xC471u);
    JUMPOUT(0x198823CD4);
  }
  if ((char *)ipint_simd_f64x2_convert_low_i32x4_s - (char *)ipint_simd_v128_load_mem != 65024)
  {
    __break(0xC471u);
    JUMPOUT(0x198823CF4);
  }
  if ((char *)ipint_simd_f64x2_convert_low_i32x4_u - (char *)ipint_simd_v128_load_mem != 65280)
  {
    __break(0xC471u);
    JUMPOUT(0x198823D14);
  }
  if ((char *)ipint_memory_atomic_wait32 - (char *)ipint_memory_atomic_notify != 256)
  {
    __break(0xC471u);
    JUMPOUT(0x198823D34);
  }
  if ((char *)ipint_memory_atomic_wait64 - (char *)ipint_memory_atomic_notify != 512)
  {
    __break(0xC471u);
    JUMPOUT(0x198823D54);
  }
  if ((char *)ipint_atomic_fence - (char *)ipint_memory_atomic_notify != 768)
  {
    __break(0xC471u);
    JUMPOUT(0x198823D74);
  }
  if ((char *)ipint_reserved_atomic_0x4 - (char *)ipint_memory_atomic_notify != 1024)
  {
    __break(0xC471u);
    JUMPOUT(0x198823D94);
  }
  if ((char *)ipint_reserved_atomic_0x5 - (char *)ipint_memory_atomic_notify != 1280)
  {
    __break(0xC471u);
    JUMPOUT(0x198823DB4);
  }
  if ((char *)ipint_reserved_atomic_0x6 - (char *)ipint_memory_atomic_notify != 1536)
  {
    __break(0xC471u);
    JUMPOUT(0x198823DD4);
  }
  if ((char *)ipint_reserved_atomic_0x7 - (char *)ipint_memory_atomic_notify != 1792)
  {
    __break(0xC471u);
    JUMPOUT(0x198823DF4);
  }
  if ((char *)ipint_reserved_atomic_0x8 - (char *)ipint_memory_atomic_notify != 2048)
  {
    __break(0xC471u);
    JUMPOUT(0x198823E14);
  }
  if ((char *)ipint_reserved_atomic_0x9 - (char *)ipint_memory_atomic_notify != 2304)
  {
    __break(0xC471u);
    JUMPOUT(0x198823E34);
  }
  if ((char *)ipint_reserved_atomic_0xa - (char *)ipint_memory_atomic_notify != 2560)
  {
    __break(0xC471u);
    JUMPOUT(0x198823E54);
  }
  if ((char *)ipint_reserved_atomic_0xb - (char *)ipint_memory_atomic_notify != 2816)
  {
    __break(0xC471u);
    JUMPOUT(0x198823E74);
  }
  if ((char *)ipint_reserved_atomic_0xc - (char *)ipint_memory_atomic_notify != 3072)
  {
    __break(0xC471u);
    JUMPOUT(0x198823E94);
  }
  if ((char *)ipint_reserved_atomic_0xd - (char *)ipint_memory_atomic_notify != 3328)
  {
    __break(0xC471u);
    JUMPOUT(0x198823EB4);
  }
  if ((char *)ipint_reserved_atomic_0xe - (char *)ipint_memory_atomic_notify != 3584)
  {
    __break(0xC471u);
    JUMPOUT(0x198823ED4);
  }
  if ((char *)ipint_reserved_atomic_0xf - (char *)ipint_memory_atomic_notify != 3840)
  {
    __break(0xC471u);
    JUMPOUT(0x198823EF4);
  }
  if ((char *)ipint_i32_atomic_load - (char *)ipint_memory_atomic_notify != 4096)
  {
    __break(0xC471u);
    JUMPOUT(0x198823F14);
  }
  if ((char *)ipint_i64_atomic_load - (char *)ipint_memory_atomic_notify != 4352)
  {
    __break(0xC471u);
    JUMPOUT(0x198823F34);
  }
  if ((char *)ipint_i32_atomic_load8_u - (char *)ipint_memory_atomic_notify != 4608)
  {
    __break(0xC471u);
    JUMPOUT(0x198823F54);
  }
  if ((char *)ipint_i32_atomic_load16_u - (char *)ipint_memory_atomic_notify != 4864)
  {
    __break(0xC471u);
    JUMPOUT(0x198823F74);
  }
  if ((char *)ipint_i64_atomic_load8_u - (char *)ipint_memory_atomic_notify != 5120)
  {
    __break(0xC471u);
    JUMPOUT(0x198823F94);
  }
  if ((char *)ipint_i64_atomic_load16_u - (char *)ipint_memory_atomic_notify != 5376)
  {
    __break(0xC471u);
    JUMPOUT(0x198823FB4);
  }
  if ((char *)ipint_i64_atomic_load32_u - (char *)ipint_memory_atomic_notify != 5632)
  {
    __break(0xC471u);
    JUMPOUT(0x198823FD4);
  }
  if ((char *)ipint_i32_atomic_store - (char *)ipint_memory_atomic_notify != 5888)
  {
    __break(0xC471u);
    JUMPOUT(0x198823FF4);
  }
  if ((char *)ipint_i64_atomic_store - (char *)ipint_memory_atomic_notify != 6144)
  {
    __break(0xC471u);
    JUMPOUT(0x198824014);
  }
  if ((char *)ipint_i32_atomic_store8_u - (char *)ipint_memory_atomic_notify != 6400)
  {
    __break(0xC471u);
    JUMPOUT(0x198824034);
  }
  if ((char *)ipint_i32_atomic_store16_u - (char *)ipint_memory_atomic_notify != 6656)
  {
    __break(0xC471u);
    JUMPOUT(0x198824054);
  }
  if ((char *)ipint_i64_atomic_store8_u - (char *)ipint_memory_atomic_notify != 6912)
  {
    __break(0xC471u);
    JUMPOUT(0x198824074);
  }
  if ((char *)ipint_i64_atomic_store16_u - (char *)ipint_memory_atomic_notify != 7168)
  {
    __break(0xC471u);
    JUMPOUT(0x198824094);
  }
  if ((char *)ipint_i64_atomic_store32_u - (char *)ipint_memory_atomic_notify != 7424)
  {
    __break(0xC471u);
    JUMPOUT(0x1988240B4);
  }
  if ((char *)ipint_i32_atomic_rmw_add - (char *)ipint_memory_atomic_notify != 7680)
  {
    __break(0xC471u);
    JUMPOUT(0x1988240D4);
  }
  if ((char *)ipint_i64_atomic_rmw_add - (char *)ipint_memory_atomic_notify != 7936)
  {
    __break(0xC471u);
    JUMPOUT(0x1988240F4);
  }
  if ((char *)ipint_i32_atomic_rmw8_add_u - (char *)ipint_memory_atomic_notify != 0x2000)
  {
    __break(0xC471u);
    JUMPOUT(0x198824114);
  }
  if ((char *)ipint_i32_atomic_rmw16_add_u - (char *)ipint_memory_atomic_notify != 8448)
  {
    __break(0xC471u);
    JUMPOUT(0x198824134);
  }
  if ((char *)ipint_i64_atomic_rmw8_add_u - (char *)ipint_memory_atomic_notify != 8704)
  {
    __break(0xC471u);
    JUMPOUT(0x198824154);
  }
  if ((char *)ipint_i64_atomic_rmw16_add_u - (char *)ipint_memory_atomic_notify != 8960)
  {
    __break(0xC471u);
    JUMPOUT(0x198824174);
  }
  if ((char *)ipint_i64_atomic_rmw32_add_u - (char *)ipint_memory_atomic_notify != 9216)
  {
    __break(0xC471u);
    JUMPOUT(0x198824194);
  }
  if ((char *)ipint_i32_atomic_rmw_sub - (char *)ipint_memory_atomic_notify != 9472)
  {
    __break(0xC471u);
    JUMPOUT(0x1988241B4);
  }
  if ((char *)ipint_i64_atomic_rmw_sub - (char *)ipint_memory_atomic_notify != 9728)
  {
    __break(0xC471u);
    JUMPOUT(0x1988241D4);
  }
  if ((char *)ipint_i32_atomic_rmw8_sub_u - (char *)ipint_memory_atomic_notify != 9984)
  {
    __break(0xC471u);
    JUMPOUT(0x1988241F4);
  }
  if ((char *)ipint_i32_atomic_rmw16_sub_u - (char *)ipint_memory_atomic_notify != 10240)
  {
    __break(0xC471u);
    JUMPOUT(0x198824214);
  }
  if ((char *)ipint_i64_atomic_rmw8_sub_u - (char *)ipint_memory_atomic_notify != 10496)
  {
    __break(0xC471u);
    JUMPOUT(0x198824234);
  }
  if ((char *)ipint_i64_atomic_rmw16_sub_u - (char *)ipint_memory_atomic_notify != 10752)
  {
    __break(0xC471u);
    JUMPOUT(0x198824254);
  }
  if ((char *)ipint_i64_atomic_rmw32_sub_u - (char *)ipint_memory_atomic_notify != 11008)
  {
    __break(0xC471u);
    JUMPOUT(0x198824274);
  }
  if ((char *)ipint_i32_atomic_rmw_and - (char *)ipint_memory_atomic_notify != 11264)
  {
    __break(0xC471u);
    JUMPOUT(0x198824294);
  }
  if ((char *)ipint_i64_atomic_rmw_and - (char *)ipint_memory_atomic_notify != 11520)
  {
    __break(0xC471u);
    JUMPOUT(0x1988242B4);
  }
  if ((char *)ipint_i32_atomic_rmw8_and_u - (char *)ipint_memory_atomic_notify != 11776)
  {
    __break(0xC471u);
    JUMPOUT(0x1988242D4);
  }
  if ((char *)ipint_i32_atomic_rmw16_and_u - (char *)ipint_memory_atomic_notify != 12032)
  {
    __break(0xC471u);
    JUMPOUT(0x1988242F4);
  }
  if ((char *)ipint_i64_atomic_rmw8_and_u - (char *)ipint_memory_atomic_notify != 12288)
  {
    __break(0xC471u);
    JUMPOUT(0x198824314);
  }
  if ((char *)ipint_i64_atomic_rmw16_and_u - (char *)ipint_memory_atomic_notify != 12544)
  {
    __break(0xC471u);
    JUMPOUT(0x198824334);
  }
  if ((char *)ipint_i64_atomic_rmw32_and_u - (char *)ipint_memory_atomic_notify != 12800)
  {
    __break(0xC471u);
    JUMPOUT(0x198824354);
  }
  if ((char *)ipint_i32_atomic_rmw_or - (char *)ipint_memory_atomic_notify != 13056)
  {
    __break(0xC471u);
    JUMPOUT(0x198824374);
  }
  if ((char *)ipint_i64_atomic_rmw_or - (char *)ipint_memory_atomic_notify != 13312)
  {
    __break(0xC471u);
    JUMPOUT(0x198824394);
  }
  if ((char *)ipint_i32_atomic_rmw8_or_u - (char *)ipint_memory_atomic_notify != 13568)
  {
    __break(0xC471u);
    JUMPOUT(0x1988243B4);
  }
  if ((char *)ipint_i32_atomic_rmw16_or_u - (char *)ipint_memory_atomic_notify != 13824)
  {
    __break(0xC471u);
    JUMPOUT(0x1988243D4);
  }
  if ((char *)ipint_i64_atomic_rmw8_or_u - (char *)ipint_memory_atomic_notify != 14080)
  {
    __break(0xC471u);
    JUMPOUT(0x1988243F4);
  }
  if ((char *)ipint_i64_atomic_rmw16_or_u - (char *)ipint_memory_atomic_notify != 14336)
  {
    __break(0xC471u);
    JUMPOUT(0x198824414);
  }
  if ((char *)ipint_i64_atomic_rmw32_or_u - (char *)ipint_memory_atomic_notify != 14592)
  {
    __break(0xC471u);
    JUMPOUT(0x198824434);
  }
  if ((char *)ipint_i32_atomic_rmw_xor - (char *)ipint_memory_atomic_notify != 14848)
  {
    __break(0xC471u);
    JUMPOUT(0x198824454);
  }
  if ((char *)ipint_i64_atomic_rmw_xor - (char *)ipint_memory_atomic_notify != 15104)
  {
    __break(0xC471u);
    JUMPOUT(0x198824474);
  }
  if ((char *)ipint_i32_atomic_rmw8_xor_u - (char *)ipint_memory_atomic_notify != 15360)
  {
    __break(0xC471u);
    JUMPOUT(0x198824494);
  }
  if ((char *)ipint_i32_atomic_rmw16_xor_u - (char *)ipint_memory_atomic_notify != 15616)
  {
    __break(0xC471u);
    JUMPOUT(0x1988244B4);
  }
  if ((char *)ipint_i64_atomic_rmw8_xor_u - (char *)ipint_memory_atomic_notify != 15872)
  {
    __break(0xC471u);
    JUMPOUT(0x1988244D4);
  }
  if ((char *)ipint_i64_atomic_rmw16_xor_u - (char *)ipint_memory_atomic_notify != 16128)
  {
    __break(0xC471u);
    JUMPOUT(0x1988244F4);
  }
  if ((char *)ipint_i64_atomic_rmw32_xor_u - (char *)ipint_memory_atomic_notify != 0x4000)
  {
    __break(0xC471u);
    JUMPOUT(0x198824514);
  }
  if ((char *)ipint_i32_atomic_rmw_xchg - (char *)ipint_memory_atomic_notify != 16640)
  {
    __break(0xC471u);
    JUMPOUT(0x198824534);
  }
  if ((char *)ipint_i64_atomic_rmw_xchg - (char *)ipint_memory_atomic_notify != 16896)
  {
    __break(0xC471u);
    JUMPOUT(0x198824554);
  }
  if ((char *)ipint_i32_atomic_rmw8_xchg_u - (char *)ipint_memory_atomic_notify != 17152)
  {
    __break(0xC471u);
    JUMPOUT(0x198824574);
  }
  if ((char *)ipint_i32_atomic_rmw16_xchg_u - (char *)ipint_memory_atomic_notify != 17408)
  {
    __break(0xC471u);
    JUMPOUT(0x198824594);
  }
  if ((char *)ipint_i64_atomic_rmw8_xchg_u - (char *)ipint_memory_atomic_notify != 17664)
  {
    __break(0xC471u);
    JUMPOUT(0x1988245B4);
  }
  if ((char *)ipint_i64_atomic_rmw16_xchg_u - (char *)ipint_memory_atomic_notify != 17920)
  {
    __break(0xC471u);
    JUMPOUT(0x1988245D4);
  }
  if ((char *)ipint_i64_atomic_rmw32_xchg_u - (char *)ipint_memory_atomic_notify != 18176)
  {
    __break(0xC471u);
    JUMPOUT(0x1988245F4);
  }
  if ((char *)ipint_i32_atomic_rmw_cmpxchg - (char *)ipint_memory_atomic_notify != 18432)
  {
    __break(0xC471u);
    JUMPOUT(0x198824614);
  }
  if ((char *)ipint_i64_atomic_rmw_cmpxchg - (char *)ipint_memory_atomic_notify != 18688)
  {
    __break(0xC471u);
    JUMPOUT(0x198824634);
  }
  if ((char *)ipint_i32_atomic_rmw8_cmpxchg_u - (char *)ipint_memory_atomic_notify != 18944)
  {
    __break(0xC471u);
    JUMPOUT(0x198824654);
  }
  if ((char *)ipint_i32_atomic_rmw16_cmpxchg_u - (char *)ipint_memory_atomic_notify != 19200)
  {
    __break(0xC471u);
    JUMPOUT(0x198824674);
  }
  if ((char *)ipint_i64_atomic_rmw8_cmpxchg_u - (char *)ipint_memory_atomic_notify != 19456)
  {
    __break(0xC471u);
    JUMPOUT(0x198824694);
  }
  if ((char *)ipint_i64_atomic_rmw16_cmpxchg_u - (char *)ipint_memory_atomic_notify != 19712)
  {
    __break(0xC471u);
    JUMPOUT(0x1988246B4);
  }
  if ((char *)ipint_i64_atomic_rmw32_cmpxchg_u - (char *)ipint_memory_atomic_notify != 19968)
  {
    __break(0xC471u);
    JUMPOUT(0x1988246D4);
  }
  if ((_BYTE)word_1ECF4C79E)
  {
    if ((char *)js_to_wasm_wrapper_entry_interp_LoadI64 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 32)
    {
      __break(0xC471u);
      JUMPOUT(0x198824CD4);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_LoadF32 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 64)
    {
      __break(0xC471u);
      JUMPOUT(0x198824CF4);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_LoadF64 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 96)
    {
      __break(0xC471u);
      JUMPOUT(0x198824D14);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_StoreI32 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 128)
    {
      __break(0xC471u);
      JUMPOUT(0x198824D34);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_StoreI64 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 160)
    {
      __break(0xC471u);
      JUMPOUT(0x198824D54);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_StoreF32 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 192)
    {
      __break(0xC471u);
      JUMPOUT(0x198824D74);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_StoreF64 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 224)
    {
      __break(0xC471u);
      JUMPOUT(0x198824D94);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_BoxInt32 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 256)
    {
      __break(0xC471u);
      JUMPOUT(0x198824DB4);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_BoxInt64 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 288)
    {
      __break(0xC471u);
      JUMPOUT(0x198824DD4);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_BoxFloat32 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 320)
    {
      __break(0xC471u);
      JUMPOUT(0x198824DF4);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_BoxFloat64 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 352)
    {
      __break(0xC471u);
      JUMPOUT(0x198824E14);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_UnBoxInt32 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 384)
    {
      __break(0xC471u);
      JUMPOUT(0x198824E34);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_UnBoxInt64 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 416)
    {
      __break(0xC471u);
      JUMPOUT(0x198824E54);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_UnBoxFloat32 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 448)
    {
      __break(0xC471u);
      JUMPOUT(0x198824E74);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_UnBoxFloat64 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 480)
    {
      __break(0xC471u);
      JUMPOUT(0x198824E94);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_Zero - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 512)
    {
      __break(0xC471u);
      JUMPOUT(0x198824EB4);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_Undefined - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 544)
    {
      __break(0xC471u);
      JUMPOUT(0x198824ED4);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_ShiftTag - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 576)
    {
      __break(0xC471u);
      JUMPOUT(0x198824EF4);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_Memory - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 608)
    {
      __break(0xC471u);
      JUMPOUT(0x198824F14);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_Call - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 640)
    {
      __break(0xC471u);
      JUMPOUT(0x198824F34);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_Done - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 672)
    {
      __break(0xC471u);
      JUMPOUT(0x198824F54);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_WA0 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 704)
    {
      __break(0xC471u);
      JUMPOUT(0x198824F74);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_WA1 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 736)
    {
      __break(0xC471u);
      JUMPOUT(0x198824F94);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_WA2 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 768)
    {
      __break(0xC471u);
      JUMPOUT(0x198824FB4);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_WA3 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 800)
    {
      __break(0xC471u);
      JUMPOUT(0x198824FD4);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_WA4 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 832)
    {
      __break(0xC471u);
      JUMPOUT(0x198824FF4);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_WA5 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 864)
    {
      __break(0xC471u);
      JUMPOUT(0x198825014);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_WA6 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 896)
    {
      __break(0xC471u);
      JUMPOUT(0x198825034);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_WA7 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 928)
    {
      __break(0xC471u);
      JUMPOUT(0x198825054);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_WR0 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 960)
    {
      __break(0xC471u);
      JUMPOUT(0x198825074);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_WA0_READ - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 992)
    {
      __break(0xC471u);
      JUMPOUT(0x198825094);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_WR1 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 1024)
    {
      __break(0xC471u);
      JUMPOUT(0x1988250B4);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_WAF0 - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 1056)
    {
      __break(0xC471u);
      JUMPOUT(0x1988250D4);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_invalidop - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 1088)
    {
      __break(0xC471u);
      JUMPOUT(0x1988250F4);
    }
    if ((char *)js_to_wasm_wrapper_entry_interp_afterops_validate - (char *)js_to_wasm_wrapper_entry_interp_LoadI32 != 2048)
    {
LABEL_1376:
      __break(0xC471u);
      JUMPOUT(0x19881FB54);
    }
  }
  if ((char *)argumINT_a1 - (char *)argumINT_a0 != 64)
  {
    __break(0xC471u);
    JUMPOUT(0x1988246F4);
  }
  if ((char *)argumINT_a2 - (char *)argumINT_a0 != 128)
  {
    __break(0xC471u);
    JUMPOUT(0x198824714);
  }
  if ((char *)argumINT_a3 - (char *)argumINT_a0 != 192)
  {
    __break(0xC471u);
    JUMPOUT(0x198824734);
  }
  if ((char *)argumINT_a4 - (char *)argumINT_a0 != 256)
  {
    __break(0xC471u);
    JUMPOUT(0x198824754);
  }
  if ((char *)argumINT_a5 - (char *)argumINT_a0 != 320)
  {
    __break(0xC471u);
    JUMPOUT(0x198824774);
  }
  if ((char *)argumINT_a6 - (char *)argumINT_a0 != 384)
  {
    __break(0xC471u);
    JUMPOUT(0x198824794);
  }
  if ((char *)argumINT_a7 - (char *)argumINT_a0 != 448)
  {
    __break(0xC471u);
    JUMPOUT(0x1988247B4);
  }
  if ((char *)argumINT_fa0 - (char *)argumINT_a0 != 512)
  {
    __break(0xC471u);
    JUMPOUT(0x1988247D4);
  }
  if ((char *)argumINT_fa1 - (char *)argumINT_a0 != 576)
  {
    __break(0xC471u);
    JUMPOUT(0x1988247F4);
  }
  if ((char *)argumINT_fa2 - (char *)argumINT_a0 != 640)
  {
    __break(0xC471u);
    JUMPOUT(0x198824814);
  }
  if ((char *)argumINT_fa3 - (char *)argumINT_a0 != 704)
  {
    __break(0xC471u);
    JUMPOUT(0x198824834);
  }
  if ((char *)argumINT_stack - (char *)argumINT_a0 != 768)
  {
    __break(0xC471u);
    JUMPOUT(0x198824854);
  }
  if ((char *)argumINT_end - (char *)argumINT_a0 != 832)
  {
    __break(0xC471u);
    JUMPOUT(0x198824874);
  }
  if ((char *)ipint_local_set_slow_path - (char *)ipint_local_get_slow_path != 256)
  {
    __break(0xC471u);
    JUMPOUT(0x198824894);
  }
  if ((char *)ipint_local_tee_slow_path - (char *)ipint_local_get_slow_path != 512)
  {
    __break(0xC471u);
    JUMPOUT(0x1988248B4);
  }
  if ((char *)ipint_mint_a1_validate - (char *)ipint_mint_a0_validate != 64)
  {
    __break(0xC471u);
    JUMPOUT(0x1988248D4);
  }
  if ((char *)ipint_mint_a2_validate - (char *)ipint_mint_a0_validate != 128)
  {
    __break(0xC471u);
    JUMPOUT(0x1988248F4);
  }
  if ((char *)ipint_mint_a3_validate - (char *)ipint_mint_a0_validate != 192)
  {
    __break(0xC471u);
    JUMPOUT(0x198824914);
  }
  if ((char *)ipint_mint_a4_validate - (char *)ipint_mint_a0_validate != 256)
  {
    __break(0xC471u);
    JUMPOUT(0x198824934);
  }
  if ((char *)ipint_mint_a5_validate - (char *)ipint_mint_a0_validate != 320)
  {
    __break(0xC471u);
    JUMPOUT(0x198824954);
  }
  if ((char *)ipint_mint_a6_validate - (char *)ipint_mint_a0_validate != 384)
  {
    __break(0xC471u);
    JUMPOUT(0x198824974);
  }
  if ((char *)ipint_mint_a7_validate - (char *)ipint_mint_a0_validate != 448)
  {
    __break(0xC471u);
    JUMPOUT(0x198824994);
  }
  if ((char *)ipint_mint_fa0_validate - (char *)ipint_mint_a0_validate != 512)
  {
    __break(0xC471u);
    JUMPOUT(0x1988249B4);
  }
  if ((char *)ipint_mint_fa1_validate - (char *)ipint_mint_a0_validate != 576)
  {
    __break(0xC471u);
    JUMPOUT(0x1988249D4);
  }
  if ((char *)ipint_mint_fa2_validate - (char *)ipint_mint_a0_validate != 640)
  {
    __break(0xC471u);
    JUMPOUT(0x1988249F4);
  }
  if ((char *)ipint_mint_fa3_validate - (char *)ipint_mint_a0_validate != 704)
  {
    __break(0xC471u);
    JUMPOUT(0x198824A14);
  }
  if ((char *)ipint_mint_stackzero_validate - (char *)ipint_mint_a0_validate != 768)
  {
    __break(0xC471u);
    JUMPOUT(0x198824A34);
  }
  if ((char *)ipint_mint_stackeight_validate - (char *)ipint_mint_a0_validate != 832)
  {
    __break(0xC471u);
    JUMPOUT(0x198824A54);
  }
  if ((char *)ipint_mint_gap_validate - (char *)ipint_mint_a0_validate != 896)
  {
    __break(0xC471u);
    JUMPOUT(0x198824A74);
  }
  if ((char *)ipint_mint_call_validate - (char *)ipint_mint_a0_validate != 960)
  {
    __break(0xC471u);
    JUMPOUT(0x198824A94);
  }
  if ((char *)ipint_mint_r1_validate - (char *)ipint_mint_r0_validate != 64)
  {
    __break(0xC471u);
    JUMPOUT(0x198824AB4);
  }
  if ((char *)ipint_mint_r2_validate - (char *)ipint_mint_r0_validate != 128)
  {
    __break(0xC471u);
    JUMPOUT(0x198824AD4);
  }
  if ((char *)ipint_mint_r3_validate - (char *)ipint_mint_r0_validate != 192)
  {
    __break(0xC471u);
    JUMPOUT(0x198824AF4);
  }
  if ((char *)ipint_mint_r4_validate - (char *)ipint_mint_r0_validate != 256)
  {
    __break(0xC471u);
    JUMPOUT(0x198824B14);
  }
  if ((char *)ipint_mint_r5_validate - (char *)ipint_mint_r0_validate != 320)
  {
    __break(0xC471u);
    JUMPOUT(0x198824B34);
  }
  if ((char *)ipint_mint_r6_validate - (char *)ipint_mint_r0_validate != 384)
  {
    __break(0xC471u);
    JUMPOUT(0x198824B54);
  }
  if ((char *)ipint_mint_r7_validate - (char *)ipint_mint_r0_validate != 448)
  {
    __break(0xC471u);
    JUMPOUT(0x198824B74);
  }
  if ((char *)ipint_mint_fr0_validate - (char *)ipint_mint_r0_validate != 512)
  {
    __break(0xC471u);
    JUMPOUT(0x198824B94);
  }
  if ((char *)ipint_mint_fr1_validate - (char *)ipint_mint_r0_validate != 576)
  {
    __break(0xC471u);
    JUMPOUT(0x198824BB4);
  }
  if ((char *)ipint_mint_fr2_validate - (char *)ipint_mint_r0_validate != 640)
  {
    __break(0xC471u);
    JUMPOUT(0x198824BD4);
  }
  if ((char *)ipint_mint_fr3_validate - (char *)ipint_mint_r0_validate != 704)
  {
    __break(0xC471u);
    JUMPOUT(0x198824BF4);
  }
  if ((char *)ipint_mint_stack_validate - (char *)ipint_mint_r0_validate != 768)
  {
    __break(0xC471u);
    JUMPOUT(0x198824C14);
  }
  if ((char *)ipint_mint_end_validate - (char *)ipint_mint_r0_validate != 832)
  {
    __break(0xC471u);
    JUMPOUT(0x198824C34);
  }
  if ((char *)ipint_uint_r1_validate - (char *)ipint_uint_r0_validate != 64)
  {
    __break(0xC471u);
    JUMPOUT(0x198824C54);
  }
  if ((char *)ipint_uint_fr1_validate - (char *)ipint_uint_r0_validate != 128)
  {
    __break(0xC471u);
    JUMPOUT(0x198824C74);
  }
  if ((char *)ipint_uint_stack_validate - (char *)ipint_uint_r0_validate != 192)
  {
    __break(0xC471u);
    JUMPOUT(0x198824C94);
  }
  if ((char *)ipint_uint_ret_validate - (char *)ipint_uint_r0_validate != 256)
  {
    __break(0xC471u);
    JUMPOUT(0x198824CB4);
  }
}

void JSC::LLInt::initialize(JSC::LLInt *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char **v24;
  char *v25;

  if (byte_1ECF4C1E3)
  {
    JSC::LLInt::neuterOpcodeMaps(this);
  }
  else
  {
    llint_entry((uint64_t (**)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))g_opcodeMap, (uint64_t (**)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))g_opcodeMapWide16, (uint64_t (**)(int8x8_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))g_opcodeMapWide32);
    wasm_entry(qword_1ECF533C0, qword_1ECF51120, qword_1ECF52270);
  }
  *(_QWORD *)&v8 = 0xCBCBCBCBCBCBCBCBLL;
  *((_QWORD *)&v8 + 1) = 0xCBCBCBCBCBCBCBCBLL;
  xmmword_1ECF4C7D0 = v8;
  xmmword_1ECF4C7C0 = v8;
  *(__int128 *)((char *)&xmmword_1ECF4C7D0 + 11) = v8;
  *(_QWORD *)&v8 = 0x8888888888888888;
  *((_QWORD *)&v8 + 1) = 0x8888888888888888;
  xmmword_1ECF4C7EB = v8;
  unk_1ECF4C7FB = v8;
  unk_1ECF4C806 = v8;
  if (!BYTE1(dword_1ECF4C240))
  {
    v10 = qword_1ECF53248;
LABEL_15:
    qword_1ECF4C220 = v10;
    return;
  }
  v9 = atomic_load(&JSC::LLInt::defaultCallThunk(void)::onceKey);
  if (v9 != -1)
  {
    v25 = &v23;
    v24 = &v25;
    std::__call_once(&JSC::LLInt::defaultCallThunk(void)::onceKey, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::defaultCallThunk(void)::$_0 &&>>);
  }
  v10 = JSC::LLInt::defaultCallThunk(void)::codeRef;
  v11 = (unsigned int *)JSC::LLInt::defaultCallThunk(void)::codeRef;
  if (!JSC::LLInt::defaultCallThunk(void)::codeRef)
    goto LABEL_15;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  qword_1ECF4C220 = v10;
  do
  {
    v13 = __ldaxr(v11);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v11));
  if (!v14)
  {
    atomic_store(1u, v11);
    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v11, v1, v2, v3, v4, v5, v6, v7);
    WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
  }
}

void JSC::LLInt::neuterOpcodeMaps(JSC::LLInt *this)
{
  memset_pattern16(g_opcodeMap, memset_pattern_6, 0x1150uLL);
  memset_pattern16(g_opcodeMapWide16, memset_pattern_150, 0x1150uLL);
  memset_pattern16(g_opcodeMapWide32, memset_pattern_151, 0x1150uLL);
}

void JSC::LLInt::getHostCallReturnValueEntrypoint(_QWORD *a1@<X8>)
{
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  char v6;
  char **v7;
  char *v8;

  if (BYTE1(dword_1ECF4C240))
  {
    v3 = atomic_load(&JSC::LLInt::getHostCallReturnValueThunk(void)::onceKey);
    if (v3 != -1)
    {
      v8 = &v6;
      v7 = &v8;
      std::__call_once(&JSC::LLInt::getHostCallReturnValueThunk(void)::onceKey, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::getHostCallReturnValueThunk(void)::$_0 &&>>);
    }
    *a1 = JSC::LLInt::getHostCallReturnValueThunk(void)::codeRef;
    v4 = (unsigned int *)JSC::LLInt::getHostCallReturnValueThunk(void)::codeRef;
    if (JSC::LLInt::getHostCallReturnValueThunk(void)::codeRef)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
  }
  else
  {
    v4 = 0;
    *a1 = qword_1ECF532A0;
  }
  a1[1] = v4;
}

void JSC::LLInt::fuzzerReturnEarlyFromLoopHintEntrypoint(JSC::LLInt *this)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  char v5;
  char **v6;
  char *v7;

  if (BYTE1(dword_1ECF4C240))
  {
    v2 = atomic_load(&qword_1ECF58AA8);
    if (v2 != -1)
    {
      v7 = &v5;
      v6 = &v7;
      std::__call_once(&qword_1ECF58AA8, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::fuzzerReturnEarlyFromLoopHintThunk(void)::$_0 &&>>);
    }
    v3 = (unsigned int *)unk_1ECF58AA0;
    *(_QWORD *)this = qword_1ECF58A98;
    if (v3)
    {
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
    }
  }
  else
  {
    v3 = 0;
    *(_QWORD *)this = qword_1ECF53290;
  }
  *((_QWORD *)this + 1) = v3;
}

void JSC::LLInt::setEntrypoint(JSC::LLInt *this, JSC::CodeBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  unint64_t v25;
  _BYTE *v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int *v32;
  unsigned int v33;
  unint64_t v34;
  _BYTE *v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v41;
  unsigned int v42;
  unint64_t v43;
  _BYTE *v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v50;
  unsigned int v51;
  unint64_t v52;
  _BYTE *v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  char v118;
  unsigned int **v119;
  unsigned int *v120;

  v9 = *((_QWORD *)this + 7);
  v10 = (*(unsigned __int16 *)(v9 + 28) >> 12) & 3;
  if (v10 != 2)
  {
    if (!v10)
    {
      if (!BYTE1(dword_1ECF4C240))
      {
        std::call_once[abi:sn180100]<JSC::LLInt::setProgramEntrypoint(JSC::CodeBlock *)::$_1>((uint64_t)&v120);
        v80 = qword_1ECF58D10;
        v81 = (unsigned int *)(qword_1ECF58D10 + 8);
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 + 1, v81));
        v120 = (unsigned int *)v80;
        JSC::CodeBlock::setJITCode((uint64_t)this, &v120, v74, v75, v76, v77, v78, v79);
        v70 = v120;
        v120 = 0;
        if (!v70)
          return;
        v83 = v70 + 2;
        do
        {
          v84 = __ldaxr(v83);
          v73 = --v84 == 0;
        }
        while (__stlxr(v84, v83));
        goto LABEL_126;
      }
      v34 = atomic_load(&qword_1ECF58D08);
      if (v34 != -1)
      {
        v120 = (unsigned int *)&v118;
        v119 = &v120;
        std::__call_once(&qword_1ECF58D08, &v119, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setProgramEntrypoint(JSC::CodeBlock *)::$_0 &&>>);
      }
      v35 = (_BYTE *)qword_1ECF58D00;
      v36 = (unsigned int *)(qword_1ECF58D00 + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
      if (v35[13] != 1)
      {
        v38 = *((_QWORD *)this + 9);
        v39 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v35 + 128))(v35);
        if (v39 >= 0x101)
          JSC::Heap::reportExtraMemoryAllocatedSlowCase(v38 + 192, 0, (uint64_t)this, v39, a5, a6, a7, a8);
      }
      v18 = (unsigned __int8 *)this + 16;
      if (__ldaxr((unsigned __int8 *)this + 16))
      {
        __clrex();
      }
      else if (!__stxr(1u, v18))
      {
LABEL_53:
        __dmb(0xAu);
        v20 = (unsigned int *)*((_QWORD *)this + 15);
        *((_QWORD *)this + 15) = v35;
        if (v20)
        {
          v41 = v20 + 2;
          do
          {
            v42 = __ldaxr(v41);
            v23 = --v42 == 0;
          }
          while (__stlxr(v42, v41));
          goto LABEL_17;
        }
        goto LABEL_19;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 16);
      goto LABEL_53;
    }
    if (v10 == 1)
    {
      if (!BYTE1(dword_1ECF4C240))
      {
        std::call_once[abi:sn180100]<JSC::LLInt::setEvalEntrypoint(JSC::CodeBlock *)::$_1>((uint64_t)&v120);
        v91 = qword_1ECF58D40;
        v92 = (unsigned int *)(qword_1ECF58D40 + 8);
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 + 1, v92));
        v120 = (unsigned int *)v91;
        JSC::CodeBlock::setJITCode((uint64_t)this, &v120, v85, v86, v87, v88, v89, v90);
        v70 = v120;
        v120 = 0;
        if (!v70)
          return;
        v94 = v70 + 2;
        do
        {
          v95 = __ldaxr(v94);
          v73 = --v95 == 0;
        }
        while (__stlxr(v95, v94));
        goto LABEL_126;
      }
      v43 = atomic_load(&qword_1ECF58D38);
      if (v43 != -1)
      {
        v120 = (unsigned int *)&v118;
        v119 = &v120;
        std::__call_once(&qword_1ECF58D38, &v119, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setEvalEntrypoint(JSC::CodeBlock *)::$_0 &&>>);
      }
      v44 = (_BYTE *)qword_1ECF58D30;
      v45 = (unsigned int *)(qword_1ECF58D30 + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 + 1, v45));
      if (v44[13] != 1)
      {
        v47 = *((_QWORD *)this + 9);
        v48 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v44 + 128))(v44);
        if (v48 >= 0x101)
          JSC::Heap::reportExtraMemoryAllocatedSlowCase(v47 + 192, 0, (uint64_t)this, v48, a5, a6, a7, a8);
      }
      v18 = (unsigned __int8 *)this + 16;
      if (__ldaxr((unsigned __int8 *)this + 16))
      {
        __clrex();
      }
      else if (!__stxr(1u, v18))
      {
LABEL_71:
        __dmb(0xAu);
        v20 = (unsigned int *)*((_QWORD *)this + 15);
        *((_QWORD *)this + 15) = v44;
        if (v20)
        {
          v50 = v20 + 2;
          do
          {
            v51 = __ldaxr(v50);
            v23 = --v51 == 0;
          }
          while (__stlxr(v51, v50));
          goto LABEL_17;
        }
        goto LABEL_19;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 16);
      goto LABEL_71;
    }
    if (!BYTE1(dword_1ECF4C240))
    {
      std::call_once[abi:sn180100]<JSC::LLInt::setModuleProgramEntrypoint(JSC::CodeBlock *)::$_1>((uint64_t)&v120);
      v102 = qword_1ECF58D28;
      v103 = (unsigned int *)(qword_1ECF58D28 + 8);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 + 1, v103));
      v120 = (unsigned int *)v102;
      JSC::CodeBlock::setJITCode((uint64_t)this, &v120, v96, v97, v98, v99, v100, v101);
      v70 = v120;
      v120 = 0;
      if (!v70)
        return;
      v105 = v70 + 2;
      do
      {
        v106 = __ldaxr(v105);
        v73 = --v106 == 0;
      }
      while (__stlxr(v106, v105));
      goto LABEL_126;
    }
    v52 = atomic_load(&qword_1ECF58D20);
    if (v52 != -1)
    {
      v120 = (unsigned int *)&v118;
      v119 = &v120;
      std::__call_once(&qword_1ECF58D20, &v119, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setModuleProgramEntrypoint(JSC::CodeBlock *)::$_0 &&>>);
    }
    v53 = (_BYTE *)qword_1ECF58D18;
    v54 = (unsigned int *)(qword_1ECF58D18 + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 + 1, v54));
    if (v53[13] != 1)
    {
      v56 = *((_QWORD *)this + 9);
      v57 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v53 + 128))(v53);
      if (v57 >= 0x101)
        JSC::Heap::reportExtraMemoryAllocatedSlowCase(v56 + 192, 0, (uint64_t)this, v57, a5, a6, a7, a8);
    }
    v18 = (unsigned __int8 *)this + 16;
    if (__ldaxr((unsigned __int8 *)this + 16))
    {
      __clrex();
    }
    else if (!__stxr(1u, v18))
    {
LABEL_88:
      __dmb(0xAu);
      v20 = (unsigned int *)*((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = v53;
      if (v20)
      {
        v59 = v20 + 2;
        do
        {
          v60 = __ldaxr(v59);
          v23 = --v60 == 0;
        }
        while (__stlxr(v60, v59));
        goto LABEL_17;
      }
      goto LABEL_19;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 16);
    goto LABEL_88;
  }
  v11 = *(_QWORD *)(v9 + 20);
  if (!BYTE1(dword_1ECF4C240))
  {
    if ((v11 & 0x80000000) != 0)
    {
      std::call_once[abi:sn180100]<JSC::LLInt::setFunctionEntrypoint(JSC::CodeBlock *)::$_3>((uint64_t)&v120);
      v113 = qword_1ECF58D70;
      v114 = (unsigned int *)(qword_1ECF58D70 + 8);
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 + 1, v114));
      v120 = (unsigned int *)v113;
      JSC::CodeBlock::setJITCode((uint64_t)this, &v120, v107, v108, v109, v110, v111, v112);
      v70 = v120;
      v120 = 0;
      if (!v70)
        return;
      v116 = v70 + 2;
      do
      {
        v117 = __ldaxr(v116);
        v73 = --v117 == 0;
      }
      while (__stlxr(v117, v116));
    }
    else
    {
      std::call_once[abi:sn180100]<JSC::LLInt::setFunctionEntrypoint(JSC::CodeBlock *)::$_2>((uint64_t)&v120);
      v67 = qword_1ECF58D68;
      v68 = (unsigned int *)(qword_1ECF58D68 + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 + 1, v68));
      v120 = (unsigned int *)v67;
      JSC::CodeBlock::setJITCode((uint64_t)this, &v120, v61, v62, v63, v64, v65, v66);
      v70 = v120;
      v120 = 0;
      if (!v70)
        return;
      v71 = v70 + 2;
      do
      {
        v72 = __ldaxr(v71);
        v73 = --v72 == 0;
      }
      while (__stlxr(v72, v71));
    }
LABEL_126:
    if (v73)
    {
      atomic_store(1u, v70 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 32))(v70);
    }
    return;
  }
  if ((v11 & 0x80000000) == 0)
  {
    v12 = atomic_load(&qword_1ECF58D50);
    if (v12 != -1)
    {
      v120 = (unsigned int *)&v118;
      v119 = &v120;
      std::__call_once(&qword_1ECF58D50, &v119, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setFunctionEntrypoint(JSC::CodeBlock *)::$_0 &&>>);
    }
    v13 = (_BYTE *)qword_1ECF58D48;
    v14 = (unsigned int *)(qword_1ECF58D48 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    if (v13[13] != 1)
    {
      v16 = *((_QWORD *)this + 9);
      v17 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v13 + 128))(v13);
      if (v17 >= 0x101)
        JSC::Heap::reportExtraMemoryAllocatedSlowCase(v16 + 192, 0, (uint64_t)this, v17, a5, a6, a7, a8);
    }
    v18 = (unsigned __int8 *)this + 16;
    if (__ldaxr((unsigned __int8 *)this + 16))
    {
      __clrex();
    }
    else if (!__stxr(1u, v18))
    {
LABEL_14:
      __dmb(0xAu);
      v20 = (unsigned int *)*((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = v13;
      if (v20)
      {
        v21 = v20 + 2;
        do
        {
          v22 = __ldaxr(v21);
          v23 = --v22 == 0;
        }
        while (__stlxr(v22, v21));
LABEL_17:
        if (v23)
        {
          atomic_store(1u, v20 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 32))(v20);
        }
        goto LABEL_19;
      }
      goto LABEL_19;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 16);
    goto LABEL_14;
  }
  v25 = atomic_load(&qword_1ECF58D60);
  if (v25 != -1)
  {
    v120 = (unsigned int *)&v118;
    v119 = &v120;
    std::__call_once(&qword_1ECF58D60, &v119, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setFunctionEntrypoint(JSC::CodeBlock *)::$_1 &&>>);
  }
  v26 = (_BYTE *)qword_1ECF58D58;
  v27 = (unsigned int *)(qword_1ECF58D58 + 8);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  if (v26[13] != 1)
  {
    v29 = *((_QWORD *)this + 9);
    v30 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v26 + 128))(v26);
    if (v30 >= 0x101)
      JSC::Heap::reportExtraMemoryAllocatedSlowCase(v29 + 192, 0, (uint64_t)this, v30, a5, a6, a7, a8);
  }
  v18 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
LABEL_36:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 16);
    goto LABEL_37;
  }
  if (__stxr(1u, v18))
    goto LABEL_36;
LABEL_37:
  __dmb(0xAu);
  v20 = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v26;
  if (v20)
  {
    v32 = v20 + 2;
    do
    {
      v33 = __ldaxr(v32);
      v23 = --v33 == 0;
    }
    while (__stlxr(v33, v32));
    goto LABEL_17;
  }
LABEL_19:
  v24 = __ldxr(v18);
  if (v24 == 1)
  {
    if (!__stlxr(0, v18))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v18, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::LLInt::frameRegisterCountFor(JSC::LLInt *this, JSC::CodeBlock *a2)
{
  return ((*((_DWORD *)this + 5) + 3) & 0xFFFFFFFE) - 2;
}

void JSC::LLInt::callToThrow(_QWORD *a1@<X8>)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  char v5;
  char **v6;
  char *v7;

  if (BYTE1(dword_1ECF4C240))
  {
    v2 = atomic_load(&qword_1ECF589B8);
    if (v2 != -1)
    {
      v7 = &v5;
      v6 = &v7;
      std::__call_once(&qword_1ECF589B8, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::callToThrowThunk(void)::$_0 &&>>);
    }
    v3 = (unsigned int *)unk_1ECF589B0;
    *a1 = qword_1ECF589A8;
    if (v3)
    {
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
    }
  }
  else
  {
    v3 = 0;
    *a1 = qword_1ECF53220;
  }
  a1[1] = v3;
}

void JSC::LLInt::handleCatchThunk(int a1@<W0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unint64_t v6;
  char v7;
  char **v8;
  char *v9;

  switch(a1)
  {
    case 1:
      v3 = atomic_load(&JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::onceKey);
      if (v3 != -1)
      {
        v9 = &v7;
        v8 = &v9;
        std::__call_once(&JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::onceKey, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::$_0 &&>>);
      }
      *a2 = JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::codeRef;
      v4 = (unsigned int *)JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::codeRef;
      if (!JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::codeRef)
        goto LABEL_6;
      goto LABEL_5;
    case 2:
      v6 = atomic_load(&JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::onceKey);
      if (v6 != -1)
      {
        v9 = &v7;
        v8 = &v9;
        std::__call_once(&JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::onceKey, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::$_1 &&>>);
      }
      *a2 = JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::codeRef;
      v4 = (unsigned int *)JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::codeRef;
      if (!JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::codeRef)
        goto LABEL_6;
      goto LABEL_5;
    case 4:
      std::call_once[abi:sn180100]<JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::$_2>((uint64_t)&v9);
      *a2 = JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::codeRef;
      v4 = (unsigned int *)JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::codeRef;
      if (!JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::codeRef)
      {
LABEL_6:
        a2[1] = v4;
        return;
      }
      do
LABEL_5:
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      goto LABEL_6;
  }
  __break(0xC471u);
}

void JSC::LLInt::handleWasmCatch(int a1@<W0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  int *v11;
  int v12;
  int ***v13;
  int **v14;

  if (!BYTE1(dword_1ECF4C240))
  {
    switch(a1)
    {
      case 4:
        v5 = qword_1ECF52970;
        break;
      case 2:
        v5 = qword_1ECF51820;
        break;
      case 1:
        v5 = qword_1ECF53AC0;
        break;
      default:
        goto LABEL_24;
    }
    *a2 = v5;
    a2[1] = 0;
    return;
  }
  v12 = 224;
  if (a1 == 4)
  {
    v11 = &v12;
    v6 = atomic_load(&qword_1ECF58A00);
    if (v6 != -1)
    {
      v14 = &v11;
      v13 = &v14;
      std::__call_once(&qword_1ECF58A00, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleWasmCatchThunk(JSC::OpcodeSize)::$_2 &&>>);
    }
    v4 = &qword_1ECF589F0;
    goto LABEL_18;
  }
  if (a1 == 2)
  {
    v11 = &v12;
    v7 = atomic_load(&qword_1ECF589E8);
    if (v7 != -1)
    {
      v14 = &v11;
      v13 = &v14;
      std::__call_once(&qword_1ECF589E8, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleWasmCatchThunk(JSC::OpcodeSize)::$_1 &&>>);
    }
    v4 = &qword_1ECF589D8;
    goto LABEL_18;
  }
  if (a1 != 1)
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x198825EF8);
  }
  v11 = &v12;
  v3 = atomic_load(&qword_1ECF589D0);
  if (v3 != -1)
  {
    v14 = &v11;
    v13 = &v14;
    std::__call_once(&qword_1ECF589D0, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleWasmCatchThunk(JSC::OpcodeSize)::$_0 &&>>);
  }
  v4 = &qword_1ECF589C0;
LABEL_18:
  v9 = *v4;
  v8 = (unsigned int *)v4[1];
  *a2 = v9;
  if (v8)
  {
    do
      v10 = __ldaxr(v8);
    while (__stlxr(v10 + 1, v8));
  }
  a2[1] = (uint64_t)v8;
}

void JSC::LLInt::handleWasmCatchAll(int a1@<W0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  int *v11;
  int v12;
  int ***v13;
  int **v14;

  if (!BYTE1(dword_1ECF4C240))
  {
    switch(a1)
    {
      case 4:
        v5 = qword_1ECF52978;
        break;
      case 2:
        v5 = qword_1ECF51828;
        break;
      case 1:
        v5 = qword_1ECF53AC8;
        break;
      default:
        goto LABEL_24;
    }
    *a2 = v5;
    a2[1] = 0;
    return;
  }
  v12 = 225;
  if (a1 == 4)
  {
    v11 = &v12;
    v6 = atomic_load(&qword_1ECF58A48);
    if (v6 != -1)
    {
      v14 = &v11;
      v13 = &v14;
      std::__call_once(&qword_1ECF58A48, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleWasmCatchAllThunk(JSC::OpcodeSize)::$_2 &&>>);
    }
    v4 = &qword_1ECF58A38;
    goto LABEL_18;
  }
  if (a1 == 2)
  {
    v11 = &v12;
    v7 = atomic_load(&qword_1ECF58A30);
    if (v7 != -1)
    {
      v14 = &v11;
      v13 = &v14;
      std::__call_once(&qword_1ECF58A30, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleWasmCatchAllThunk(JSC::OpcodeSize)::$_1 &&>>);
    }
    v4 = &qword_1ECF58A20;
    goto LABEL_18;
  }
  if (a1 != 1)
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x1988260D8);
  }
  v11 = &v12;
  v3 = atomic_load(&qword_1ECF58A18);
  if (v3 != -1)
  {
    v14 = &v11;
    v13 = &v14;
    std::__call_once(&qword_1ECF58A18, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleWasmCatchAllThunk(JSC::OpcodeSize)::$_0 &&>>);
  }
  v4 = &qword_1ECF58A08;
LABEL_18:
  v9 = *v4;
  v8 = (unsigned int *)v4[1];
  *a2 = v9;
  if (v8)
  {
    do
      v10 = __ldaxr(v8);
    while (__stlxr(v10 + 1, v8));
  }
  a2[1] = (uint64_t)v8;
}

__int128 *llint_trace_operand(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v4;
  uint64_t v6;
  unint64_t v7;
  JSC::VM *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  unsigned int v19;
  JSC::VM *v21;

  v4 = (unsigned __int8 *)a2;
  if (byte_1ECF4C727)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(JSC::VM **)(v6 + 72);
    *((_QWORD *)v8 + 5) = a1;
    v21 = v8;
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 80);
    v11 = *(_QWORD *)v10;
    if (*(_QWORD *)v10 > (unint64_t)a2
      || (unint64_t)*(unsigned int *)(v10 + 12) + *(_QWORD *)v10 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x19882624CLL);
    }
    *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v11) & 0x3FFFFFFF;
    v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v15)
    {
      v15 = WTF::Thread::initializeCurrentTLS(0);
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 80);
      v11 = *(_QWORD *)v10;
    }
    v16 = v11 + *(unsigned int *)(v10 + 12);
    if (v11 > (unint64_t)v4 || v16 <= (unint64_t)v4)
    {
      __break(0xC471u);
      JUMPOUT(0x19882626CLL);
    }
    v18 = ((_DWORD)v4 - v11);
    v19 = *v4;
    if ((v19 | 2) == 0x82)
      v19 = v4[1];
    WTF::dataLogF((WTF *)"<%p> %p / %p: executing bc#%zu, op#%u: Trace(%d): %d\n", a2, v15, v9, v7, v18, v19, a3, a4, v21);
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing(v7, &v21, "LLIntSlowPaths", v4);
    if (*((_QWORD *)v8 + 2))
      return &xmmword_1ECF4C7C0;
  }
  return (__int128 *)v4;
}

unsigned __int8 *llint_trace_value(WTF::Thread *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  JSC::Structure *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  const char *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  WTF::Thread *v45;
  unint64_t v46;
  void (**v47)(WTF::StringPrintStream *__hidden);
  _BYTE *v48;
  __int128 v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (!byte_1ECF4C727)
    return a2;
  if ((int)a4 >= 0x40000000)
  {
    v40 = *((_QWORD *)a1 + 2);
    v41 = (a4 - 0x40000000);
    if (v41 >= *(unsigned int *)(v40 + 172))
      goto LABEL_35;
    v8 = (unint64_t *)(*(_QWORD *)(v40 + 160) + 8 * v41);
  }
  else
  {
    v8 = (unint64_t *)((char *)a1 + 8 * (int)a4);
  }
  v9 = *v8;
  v46 = *v8;
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10)
    v10 = WTF::Thread::initializeCurrentTLS(a1);
  v11 = *((_QWORD *)a1 + 2);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x198826544);
  }
  v16 = ((_DWORD)a2 - v13);
  v17 = *a2;
  if ((v17 | 2) == 0x82)
    v17 = a2[1];
  v44 = v17;
  v18 = 0;
  v47 = off_1E3572250;
  v48 = v50;
  v43 = HIDWORD(v9);
  v49 = xmmword_199122F80;
  v50[0] = 0;
  if (v9 && (v9 & 0xFFFE000000000002) == 0)
    v18 = (JSC::Structure *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE));
  JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v46, (WTF::PrintStream *)&v47, 0, v18);
  v47[5]((WTF::StringPrintStream *)&v47);
  v26 = v48;
  v45 = a1;
  if (v48)
  {
    v42 = v10;
    v27 = v49;
    if ((unint64_t)v49 >= 0xFFFFFFFFFFFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x198826550);
    }
    if ((_QWORD)v49 == -17)
    {
      __break(0xC471u);
      JUMPOUT(0x198826558);
    }
    v28 = WTF::fastMalloc((WTF *)(v49 + 17));
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = v27;
    memcpy((void *)(v28 + 16), v26, v27);
    *(_BYTE *)(v28 + 16 + v27) = 0;
    v29 = (unint64_t)v48;
    if (v48 == v50)
    {
      WTF::dataLogF((WTF *)"<%p> %p / %p: executing bc#%zu, op#%u: Trace(%d): %d: %08x:%08x: %s\n", v19, v42, v11, v45, v16, v44, a3, a4, v9, v43, v28 + 16);
LABEL_27:
      if (*(_DWORD *)v28 == 1)
        WTF::fastFree(v28, v32, v33, v34, v35, v36, v37, v38);
      else
        --*(_DWORD *)v28;
      return a2;
    }
    v10 = v42;
  }
  else
  {
    v28 = 0;
    v29 = 0;
  }
  WTF::fastFree(v29, v19, v20, v21, v22, v23, v24, v25);
  v31 = v28 + 16;
  if (!v28)
    v31 = 0;
  WTF::dataLogF((WTF *)"<%p> %p / %p: executing bc#%zu, op#%u: Trace(%d): %d: %08x:%08x: %s\n", v30, v10, v11, v45, v16, v44, a3, a4, v9, v43, v31);
  if (v28)
    goto LABEL_27;
  return a2;
}

const char *llint_trace_prologue(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (byte_1ECF4C727)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v7 = v4;
    v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v5)
      v5 = WTF::Thread::initializeCurrentTLS(0);
    WTF::dataLogF((WTF *)"<%p> %p / %p: in prologue of ", a2, v5, v4, a1, v7);
    WTF::dataLog<JSC::CodeBlock *,char [2]>(&v7, "\n");
  }
  return a2;
}

uint64_t WTF::dataLog<JSC::CodeBlock *,char [2]>(uint64_t *a1, const char *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v7 = *a1;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  if (v7)
    JSC::CodeBlock::dumpAssumingJITType(v7);
  else
    WTF::PrintStream::printf(v8, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t llint_trace_prologue_function_for_call(uint64_t a1, uint64_t a2)
{
  JSC::LLInt::traceFunctionPrologue(a1, "call prologue", 0);
  return a2;
}

uint64_t JSC::LLInt::traceFunctionPrologue(uint64_t result, const char *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  const char *v10;
  unsigned int *v11;

  if (byte_1ECF4C727)
  {
    v4 = (_QWORD *)result;
    v5 = *(_QWORD *)(result + 24);
    v6 = *(_QWORD *)(v5 + 24);
    if ((v6 & 1) != 0)
      v6 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 48);
    v7 = 104;
    if (!a3)
      v7 = 96;
    v8 = *(unsigned int **)(v6 + v7);
    v11 = v8;
    v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v9)
      v9 = WTF::Thread::initializeCurrentTLS(0);
    WTF::dataLogF((WTF *)"<%p> %p / %p: in %s of ", a2, v9, v8, v4, a2);
    WTF::dataLog<JSC::CodeBlock *>((uint64_t *)&v11);
    return WTF::dataLogF((WTF *)" function %p, executable %p; numVars = %u, numParameters = %u, numCalleeLocals = %u, caller = %p.\n",
             v10,
             v5,
             v6,
             v11[6],
             v11[7],
             v11[5],
             *v4);
  }
  return result;
}

uint64_t llint_trace_prologue_function_for_construct(uint64_t a1, uint64_t a2)
{
  JSC::LLInt::traceFunctionPrologue(a1, "construct prologue", 1);
  return a2;
}

uint64_t llint_trace_arityCheck_for_call(uint64_t a1, uint64_t a2)
{
  JSC::LLInt::traceFunctionPrologue(a1, "call arity check", 0);
  return a2;
}

uint64_t llint_trace_arityCheck_for_construct(uint64_t a1, uint64_t a2)
{
  JSC::LLInt::traceFunctionPrologue(a1, "construct arity check", 1);
  return a2;
}

uint64_t llint_trace(_QWORD *a1, const char *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  unsigned int v12;
  const char *v13;
  const char *v14;
  uint64_t result;

  if (byte_1ECF4C727)
  {
    v4 = a1[2];
    v5 = *(unsigned __int8 *)a2;
    if ((v5 | 2) == 0x82)
      v5 = *((unsigned __int8 *)a2 + 1);
    v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v6)
      v6 = WTF::Thread::initializeCurrentTLS(0);
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 80);
    v8 = *(_QWORD *)v7;
    v9 = *(unsigned int *)(v7 + 12) + *(_QWORD *)v7;
    if (v8 > (unint64_t)a2 || v9 <= (unint64_t)a2)
    {
      result = 299;
      __break(0xC471u);
      return result;
    }
    v11 = ((_DWORD)a2 - v8);
    v12 = *(unsigned __int8 *)a2;
    if ((v12 | 2) == 0x82)
      v12 = *((unsigned __int8 *)a2 + 1);
    WTF::dataLogF((WTF *)"<%p> %p / %p: executing bc#%zu, %s, pc = %p\n", a2, v6, v4, a1, v11, (&JSC::opcodeNames)[2 * v12], a2);
    if (v5 == 102)
    {
      WTF::dataLogF((WTF *)"Will be returning to %p\n", v13, a1[1]);
      WTF::dataLogF((WTF *)"The new cfr will be %p\n", v14, *a1);
    }
    else if (v5 == 131)
    {
      WTF::dataLogF((WTF *)"Frame will eventually return to %p\n", v13, a1[1]);
    }
  }
  return (uint64_t)a2;
}

uint64_t llint_entry_osr(uint64_t a1)
{
  return JSC::LLInt::entryOSR(*(_QWORD *)(a1 + 16), "entry_osr", 0);
}

uint64_t JSC::LLInt::entryOSR(uint64_t a1, const char *a2, int a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x8_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(JSC::JSString *);
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint8x8_t v28;
  unsigned int *v29;
  JSC::Profiler::Database *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t i;
  uint64_t v45;
  uint64_t ValueProfileForBytecodeIndex;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  int ready;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  JSC::JITPlan *v77;
  JSC::JITWorklist *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  const char *v94;
  JSC::JITPlan *v95;
  uint64_t (*v96)(JSC::JSString *);
  char v97;
  WTF *v98;
  void (**v99)(WTF::StringPrintStream *__hidden);
  WTF *v100;
  __int128 v101;
  _BYTE v102[128];
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v94 = a2;
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::CodeBlock,char [11],char const*,char [24],JSC::ExecutionCounter<(JSC::CountingVariant)0>,char [2]>(a1, &v94, *(_QWORD *)(a1 + 56) + 168);
  if (dword_1ECF4C2B0 >= 2)
  {
    v89 = *(_QWORD *)(a1 + 56);
    v90 = *(_DWORD *)(*(_QWORD *)(v89 + 80) + 12);
    if (qword_1ECF4C2C0 > v90 || HIDWORD(qword_1ECF4C2C0) < v90)
    {
      if (dword_1ECF4C2B0 == 2)
        goto LABEL_71;
    }
    else if (dword_1ECF4C2B0 != 2)
    {
      goto LABEL_71;
    }
  }
  v5 = atomic_load(&qword_1ECF58D78);
  if (v5 != -1)
  {
    v99 = (void (**)(WTF::StringPrintStream *__hidden))&v96;
    v98 = (WTF *)&v99;
    std::__call_once(&qword_1ECF58D78, &v98, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::ensureGlobalJITAllowlist(void)::$_0 &&>>);
  }
  if (!JSC::FunctionAllowlist::contains((JSC::FunctionAllowlist *)&unk_1ECF58D80, (JSC::CodeBlock *)a1)
    || !BYTE2(dword_1ECF4C240))
  {
    v89 = *(_QWORD *)(a1 + 56);
LABEL_71:
    v35 = 0;
    *(_DWORD *)(v89 + 176) = 0x7FFFFFFF;
    *(_QWORD *)(v89 + 168) = 0x80000000;
    return v35;
  }
  v12 = *(_QWORD *)(a1 + 72);
  ++*(_DWORD *)(v12 + 916);
  JSC::CodeBlock::updateAllNonLazyValueProfilePredictions((_QWORD *)a1, (uint64_t)&v99, v6, v7, v8, v9, v10, v11);
  v20 = *(uint64_t **)(a1 + 144);
  if (v20)
  {
    v42 = *v20;
    if (*v20)
    {
      v72 = 0;
      v73 = v20[1];
      do
      {
        v74 = (unint64_t *)(*(_QWORD *)(v73 + (v72 & 0xFFFFFFFFFFFFFFF8) + 8) + 32 * (v72 & 7));
        v75 = *v74;
        if (*v74)
        {
          v76 = v73;
          v75 = JSC::speculationFromValue(v75);
          v73 = v76;
          *v74 = 0;
        }
        v74[1] |= v75;
        ++v72;
      }
      while (v42 != v72);
    }
    v43 = v20[5];
    if (v43)
    {
      for (i = 0; i != v43; ++i)
      {
        v45 = *(_QWORD *)(v20[6] + (i & 0xFFFFFFFFFFFFFFF8) + 8) + 16 * (i & 7);
        ValueProfileForBytecodeIndex = JSC::CodeBlock::tryGetValueProfileForBytecodeIndex(a1, *(_DWORD *)v45, v19);
        v49 = *(_QWORD *)(v45 + 8);
        v48 = (_QWORD *)(v45 + 8);
        v47 = v49;
        if (v49)
          *(_QWORD *)(ValueProfileForBytecodeIndex + 8) |= JSC::speculationFromValue(v47);
        *v48 = 0;
      }
    }
  }
  v21 = *(_QWORD *)(a1 + 120);
  if (v21 && *(_BYTE *)(v21 + 12) == 3)
  {
    v22 = *(_QWORD *)(a1 + 56);
LABEL_39:
    if ((JSC::ExecutionCounter<(JSC::CountingVariant)0>::checkIfThresholdCrossedAndSet((int *)(v22 + 168), a1) & 1) != 0)
    {
      v50 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
      if (v50 != -1)
      {
        v99 = (void (**)(WTF::StringPrintStream *__hidden))&v97;
        v98 = (WTF *)&v99;
        std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v98, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
      }
      ready = JSC::JITWorklist::completeAllReadyPlansForVM(JSC::theGlobalJITWorklist, v12, *(_QWORD *)(a1 + 56), 1);
      v52 = *(_QWORD *)(a1 + 120);
      if (v52 && *(_BYTE *)(v52 + 12) == 3)
      {
        if (BYTE1(qword_1ECF4C332))
          WTF::dataLog<char [88],char [2]>("    Code was already compiled.", "\n");
        JSC::CodeBlock::jitSoon((JSC::CodeBlock *)a1);
        goto LABEL_16;
      }
      if (!ready)
      {
        v77 = (JSC::JITPlan *)WTF::fastMalloc((WTF *)0x50);
        v78 = (JSC::JITWorklist *)JSC::BaselineJITPlan::BaselineJITPlan((uint64_t)v77, (JSC::CodeBlock *)a1);
        v79 = JSC::JITWorklist::ensureGlobalWorklist(v78);
        v95 = v77;
        JSC::JITWorklist::enqueue(v79, &v95, v80, v81, v82, v83, v84, v85);
        v86 = (unsigned int *)v95;
        v95 = 0;
        if (v86)
        {
          v91 = v86 + 2;
          do
          {
            v92 = __ldaxr(v91);
            v93 = v92 - 1;
          }
          while (__stlxr(v93, v91));
          if (!v93)
          {
            atomic_store(1u, v86 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v86 + 8))(v86);
          }
        }
        v87 = *(_QWORD *)(a1 + 120);
        if (v87)
        {
          v88 = *(unsigned __int8 *)(v87 + 12);
          --*(_DWORD *)(v12 + 916);
          if (v88 != 3)
            return 0;
          goto LABEL_17;
        }
      }
    }
    else
    {
      JSC::VM::logEvent<JSC::LLInt::jitCompileAndSetHeuristics(JSC::VM&,JSC::CodeBlock *)::{lambda(void)#1}>(*(JSC::Profiler::Database **)(*(_QWORD *)(a1 + 72) + 93016), a1, a1);
      if (BYTE1(qword_1ECF4C332))
        WTF::dataLog<char [88],char [2]>("    JIT threshold should be lifted.", "\n");
    }
    v35 = 0;
    --*(_DWORD *)(v12 + 916);
    return v35;
  }
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(uint64_t (**)(JSC::JSString *))(v22 + 32);
  if (!v23)
    goto LABEL_39;
  v24 = (unsigned int *)((char *)v23 + 8);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 + 1, v24));
  v96 = v23;
  JSC::CodeBlock::setupWithUnlinkedBaselineCode(a1, &v96, v13, v14, v15, v16, v17, v18);
  v29 = (unsigned int *)v96;
  v96 = 0;
  if (v29)
  {
    v39 = v29 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v29 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 32))(v29);
    }
  }
  JSC::ScriptExecutable::installCode(*(_QWORD *)(a1 + 64), *(JSC::VM **)(a1 + 72), (JSC::CodeBlock *)a1, (*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 28) >> 12) & 3, *(_DWORD *)(*(_QWORD *)(a1 + 56) + 20) >> 31, 0, v26, v27, v28);
  JSC::ExecutionCounter<(JSC::CountingVariant)0>::setNewThreshold(*(_QWORD *)(a1 + 56) + 168, 0, a1);
LABEL_16:
  --*(_DWORD *)(v12 + 916);
LABEL_17:
  v30 = *(JSC::Profiler::Database **)(*(_QWORD *)(a1 + 72) + 93016);
  if (v30)
  {
    v99 = off_1E3572250;
    v100 = (WTF *)v102;
    v101 = xmmword_199122F80;
    v102[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v99, "%s", "in prologue");
    v99[5]((WTF::StringPrintStream *)&v99);
    WTF::StringPrintStream::toCString(&v99, (uint64_t *)&v98);
    if (v100 != (WTF *)v102)
      WTF::fastFree((unint64_t)v100, v53, v54, v55, v56, v57, v58, v59);
    JSC::Profiler::Database::logEvent(v30, a1, "OSR entry", &v98, v56, v57, v58, v59);
    v67 = v98;
    v98 = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 1)
        WTF::fastFree((unint64_t)v67, v60, v61, v62, v63, v64, v65, v66);
      else
        --*(_DWORD *)v67;
    }
  }
  v31 = *(unsigned int **)(a1 + 120);
  if (a3)
  {
    if (v31)
    {
      v68 = v31 + 2;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 + 1, v68));
    }
    v70 = v31 + 2;
    v35 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v31 + 40))(v31, 1);
    do
    {
      v71 = __ldaxr(v70);
      v37 = --v71 == 0;
    }
    while (__stlxr(v71, v70));
  }
  else
  {
    if (v31)
    {
      v32 = v31 + 2;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
    }
    v34 = v31 + 2;
    v35 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v31 + 48))(v31, 0);
    do
    {
      v36 = __ldaxr(v34);
      v37 = --v36 == 0;
    }
    while (__stlxr(v36, v34));
  }
  if (v37)
  {
    atomic_store(1u, v31 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 32))(v31);
  }
  return v35;
}

uint64_t llint_entry_osr_function_for_call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL8 v9;
  double v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  void *i;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t *v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t (*v107)(JSC::JSString *);
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint8x8_t v112;
  unsigned int *v113;
  JSC::Profiler::Database *v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int *v122;
  unsigned int v123;
  unsigned int v124;
  unint64_t v125;
  int ready;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t j;
  uint64_t v131;
  uint64_t ValueProfileForBytecodeIndex;
  unint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  size_t v143;
  const void *v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  JSC::JITPlan *v160;
  JSC::JITWorklist *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int *v169;
  uint64_t v170;
  int v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  const char *v176;
  JSC::JITPlan *v177;
  uint64_t (*v178)(JSC::JSString *);
  char v179;
  WTF *v180;
  void (**v181)(WTF::StringPrintStream *__hidden);
  _BYTE *v182;
  __int128 v183;
  _BYTE v184[128];
  uint64_t v185;

  v185 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  if ((v1 & 1) != 0)
    v1 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 48);
  v2 = *(_QWORD *)(v1 + 96);
  v176 = "entry_osr_function_for_call";
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::CodeBlock,char [11],char const*,char [24],JSC::ExecutionCounter<(JSC::CountingVariant)0>,char [2]>(v2, &v176, *(_QWORD *)(v2 + 56) + 168);
  if (dword_1ECF4C2B0 >= 2)
  {
    v11 = *(_QWORD *)(v2 + 56);
    v38 = *(_DWORD *)(*(_QWORD *)(v11 + 80) + 12);
    if (qword_1ECF4C2C0 > v38 || HIDWORD(qword_1ECF4C2C0) < v38)
    {
      if (dword_1ECF4C2B0 != 2)
        goto LABEL_6;
    }
    else if (dword_1ECF4C2B0 == 2)
    {
      goto LABEL_6;
    }
LABEL_96:
    v39 = 0;
    *(_DWORD *)(v11 + 176) = 0x7FFFFFFF;
    *(_QWORD *)(v11 + 168) = 0x80000000;
    return v39;
  }
LABEL_6:
  v3 = atomic_load(&qword_1ECF58D78);
  if (v3 != -1)
  {
    v181 = (void (**)(WTF::StringPrintStream *__hidden))&v178;
    v180 = (WTF *)&v181;
    std::__call_once(&qword_1ECF58D78, &v180, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::ensureGlobalJITAllowlist(void)::$_0 &&>>);
  }
  v4 = JSC::FunctionAllowlist::contains((JSC::FunctionAllowlist *)&unk_1ECF58D80, (JSC::CodeBlock *)v2);
  v11 = *(_QWORD *)(v2 + 56);
  if (v4)
    v12 = BYTE2(dword_1ECF4C240) == 0;
  else
    v12 = 1;
  if (v12)
    goto LABEL_96;
  v13 = *(_QWORD *)(v2 + 72);
  ++*(_DWORD *)(v13 + 916);
  v14 = *(unsigned __int16 *)(v11 + 28) | ((unint64_t)*(unsigned __int8 *)(v11 + 30) << 16);
  v15 = *(unsigned int **)(v2 + 152);
  v16 = qword_1ECF4C080;
  v17 = 0;
  v18 = (uint64_t *)(v15 + 6);
  if ((*(_WORD *)(v11 + 28) & 1) == 0)
  {
    if (!v15)
      goto LABEL_93;
LABEL_14:
    for (i = (void *)*v15; ; i = 0)
    {
      if (v17 >= (unint64_t)i)
        goto LABEL_206;
      if (v17 >= *v15)
        goto LABEL_308;
      v20 = *(v18 - 2);
      if (!v20)
      {
        v21 = 0;
        v22 = *(v18 - 1);
        if (!v22)
          goto LABEL_19;
        goto LABEL_36;
      }
      if (v20 >= 0xFFFE000000000000)
      {
        if ((v20 & 0xFFFFFFFE) != 0)
          v21 = 0x200000000;
        else
          v21 = 0x100000000;
      }
      else if (v20 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v10 = v20 - 0x2000000000000;
        v36 = (uint64_t)COERCE_DOUBLE(v20 - 0x2000000000000);
        if ((double)(uint64_t)v10 != v10)
          goto LABEL_77;
        if (v36)
        {
          if ((unint64_t)(v36 + 0x8000000000000) >> 52)
            goto LABEL_77;
        }
        else if ((uint64_t)v20 < 0x2000000000000)
        {
LABEL_77:
          v21 = 0x2000000000;
          goto LABEL_35;
        }
        v21 = 0x1000000000;
      }
      else
      {
        v26 = v20 & 0xFFFE000000000002;
        v27 = v20 >> 36;
        v7 = (v20 & 0xFFFFFFFFFLL) != 0 && v27 == 0;
        if (v16 <= v20 && (v7 & 1) != 0)
        {
          if (v26)
          {
            if ((v20 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v21 = 0x10000000000;
            else
              v21 = 0x20000000000;
          }
          else
          {
            v29 = *(unsigned __int8 *)(v20 + 5);
            if (v29 != 2)
            {
              v21 = JSC::speculatedTypeMapping[v29];
              goto LABEL_35;
            }
            v34 = *(_QWORD *)(v20 + 8);
            if (!v34)
              goto LABEL_80;
            v21 = 805306368;
            if ((v34 & 1) != 0)
              goto LABEL_35;
            if (v34 < v16)
            {
              v21 = 0;
            }
            else
            {
              v21 = 0;
              if (!(v34 >> 36) && (v34 & 0xFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)(v34 + 16) & 0x10) != 0)
                {
                  v21 = 0x10000000;
                  goto LABEL_35;
                }
LABEL_80:
                v21 = 805306368;
              }
            }
          }
        }
        else
        {
          v7 = v14;
          if (v26)
          {
            v21 = 0x20000000000;
            if ((v20 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v21 = 0x10000000000;
          }
          else
          {
            if (v16 > v20)
              goto LABEL_138;
            v21 = 0;
            if (!v27 && (v20 & 0xFFFFFFFFFLL) != 0)
            {
              v40 = *(unsigned __int8 *)(v20 + 5);
              if (v40 == 2)
              {
                v42 = *(_QWORD *)(v20 + 8);
                v21 = 805306368;
                if (v42 && (v42 & 1) == 0)
                {
                  if (v42 < v16)
                  {
LABEL_138:
                    v21 = 0;
                    goto LABEL_35;
                  }
                  v21 = 0;
                  if (!(v42 >> 36) && (v42 & 0xFFFFFFFFFLL) != 0)
                  {
                    if ((*(_BYTE *)(v42 + 16) & 0x10) != 0)
                      v21 = 0x10000000;
                    else
                      v21 = 805306368;
                  }
                }
              }
              else
              {
                v21 = JSC::speculatedTypeMapping[v40];
              }
            }
          }
        }
      }
LABEL_35:
      *(v18 - 2) = 0;
      v22 = *(v18 - 1);
      if (!v22)
        goto LABEL_19;
LABEL_36:
      if (v22 >= 0xFFFE000000000000)
      {
        if ((v22 & 0xFFFFFFFE) != 0)
          v33 = 0x200000000;
        else
          v33 = 0x100000000;
        goto LABEL_49;
      }
      if (v22 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v10 = v22 - 0x2000000000000;
        v37 = (uint64_t)COERCE_DOUBLE(v22 - 0x2000000000000);
        if ((double)(uint64_t)v10 == v10)
        {
          if (v37)
          {
            if (!((unint64_t)(v37 + 0x8000000000000) >> 52))
              goto LABEL_87;
          }
          else if ((uint64_t)v22 >= 0x2000000000000)
          {
LABEL_87:
            v33 = 0x1000000000;
            goto LABEL_49;
          }
        }
        v33 = 0x2000000000;
      }
      else
      {
        v30 = v22 & 0xFFFE000000000002;
        v7 = v22 >> 36;
        v8 = (v22 & 0xFFFFFFFFFLL) != 0 && v7 == 0;
        if (v16 <= v22 && (v8 & 1) != 0)
        {
          if (v30)
          {
            if ((v22 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v33 = 0x10000000000;
            else
              v33 = 0x20000000000;
            goto LABEL_49;
          }
          v32 = *(unsigned __int8 *)(v22 + 5);
          if (v32 == 2)
          {
            v35 = *(_QWORD *)(v22 + 8);
            if (!v35)
              goto LABEL_81;
            v33 = 805306368;
            if ((v35 & 1) == 0)
            {
              if (v35 < v16)
              {
                v33 = 0;
                goto LABEL_49;
              }
              v33 = 0;
              v7 = v35 >> 36;
              if (v35 >> 36)
                goto LABEL_49;
              v7 = v35 & 0xFFFFFFFFFLL;
              if ((v35 & 0xFFFFFFFFFLL) == 0)
                goto LABEL_49;
              if ((*(_BYTE *)(v35 + 16) & 0x10) == 0)
              {
LABEL_81:
                v33 = 805306368;
                goto LABEL_49;
              }
              v33 = 0x10000000;
            }
          }
          else
          {
            v33 = JSC::speculatedTypeMapping[v32];
          }
        }
        else
        {
          v8 = v14;
          if (v30)
          {
            v33 = 0x20000000000;
            if ((v22 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v33 = 0x10000000000;
            goto LABEL_49;
          }
          if (v16 <= v22)
          {
            v33 = 0;
            if (v7)
              goto LABEL_49;
            v7 = v22 & 0xFFFFFFFFFLL;
            if ((v22 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_49;
            v41 = *(unsigned __int8 *)(v22 + 5);
            if (v41 != 2)
            {
              v33 = JSC::speculatedTypeMapping[v41];
              goto LABEL_49;
            }
            v43 = *(_QWORD *)(v22 + 8);
            v33 = 805306368;
            if (!v43 || (v43 & 1) != 0)
              goto LABEL_49;
            if (v43 >= v16)
            {
              v33 = 0;
              v7 = v43 >> 36;
              if (!(v43 >> 36))
              {
                v7 = v43 & 0xFFFFFFFFFLL;
                if ((v43 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v43 + 16) & 0x10) != 0)
                    v33 = 0x10000000;
                  else
                    v33 = 805306368;
                }
              }
              goto LABEL_49;
            }
          }
          v33 = 0;
        }
      }
LABEL_49:
      v21 |= v33;
      *(v18 - 1) = 0;
LABEL_19:
      v23 = *v18 | v21;
      *v18 = v23;
      v24 = *(unsigned int **)(v11 + 184);
      if (v17 >= *v24)
        goto LABEL_513;
      v5 = (uint64_t)&v24[2 * v17];
      v6 = *(_QWORD *)(v5 + 8);
      v25 = v6 | v23;
      *v18 = v25;
      v18 += 3;
      *(_QWORD *)(v5 + 8) = v25;
      ++v17;
      if (v15)
        goto LABEL_14;
LABEL_93:
      ;
    }
  }
  while (1)
  {
    i = v15 ? (void *)*v15 : 0;
    if (v17 >= (unint64_t)i)
      break;
    if (v17 >= *v15)
    {
LABEL_308:
      __break(0xC471u);
      JUMPOUT(0x198827B18);
    }
    v46 = *(v18 - 2);
    if (!v46)
    {
      v45 = 0;
      v6 = *(v18 - 1);
      if (v6)
        goto LABEL_151;
      goto LABEL_144;
    }
    if (v46 >= 0xFFFE000000000000)
    {
      if ((v46 & 0xFFFFFFFE) != 0)
        v45 = 0x200000000;
      else
        v45 = 0x100000000;
    }
    else if (v46 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v10 = v46 - 0x2000000000000;
      v56 = (uint64_t)COERCE_DOUBLE(v46 - 0x2000000000000);
      if ((double)(uint64_t)v10 != v10)
        goto LABEL_205;
      if (v56)
      {
        if ((unint64_t)(v56 + 0x8000000000000) >> 52)
          goto LABEL_205;
      }
      else if ((uint64_t)v46 < 0x2000000000000)
      {
LABEL_205:
        v45 = 0x2000000000;
        goto LABEL_177;
      }
      v45 = 0x1000000000;
    }
    else
    {
      v50 = v46 & 0xFFFE000000000002;
      v51 = v46 >> 36;
      v7 = (v46 & 0xFFFFFFFFFLL) != 0 && v51 == 0;
      if (v16 <= v46 && (v7 & 1) != 0)
      {
        if (v50)
        {
          if ((v46 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v45 = 0x10000000000;
          else
            v45 = 0x20000000000;
        }
        else
        {
          v53 = *(unsigned __int8 *)(v46 + 5);
          if (v53 != 2)
          {
            v45 = JSC::speculatedTypeMapping[v53];
            goto LABEL_177;
          }
          v54 = *(_QWORD *)(v46 + 8);
          if (!v54)
            goto LABEL_301;
          v45 = 805306368;
          if ((v54 & 1) != 0)
            goto LABEL_177;
          if (v54 < v16)
          {
            v45 = 0;
          }
          else
          {
            v45 = 0;
            if (!(v54 >> 36) && (v54 & 0xFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)(v54 + 16) & 0x10) != 0)
              {
                v45 = 0x10000000;
                goto LABEL_177;
              }
LABEL_301:
              v45 = 805306368;
            }
          }
        }
      }
      else
      {
        v7 = v14;
        if (v50)
        {
          v45 = 0x20000000000;
          if ((v46 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v45 = 0x10000000000;
        }
        else
        {
          if (v16 > v46)
            goto LABEL_391;
          v45 = 0;
          if (!v51 && (v46 & 0xFFFFFFFFFLL) != 0)
          {
            v92 = *(unsigned __int8 *)(v46 + 5);
            if (v92 == 2)
            {
              v93 = *(_QWORD *)(v46 + 8);
              v45 = 805306368;
              if (v93 && (v93 & 1) == 0)
              {
                if (v93 < v16)
                {
LABEL_391:
                  v45 = 0;
                  goto LABEL_177;
                }
                v45 = 0;
                if (!(v93 >> 36) && (v93 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v93 + 16) & 0x10) != 0)
                    v45 = 0x10000000;
                  else
                    v45 = 805306368;
                }
              }
            }
            else
            {
              v45 = JSC::speculatedTypeMapping[v92];
            }
          }
        }
      }
    }
LABEL_177:
    *(v18 - 2) = 0;
    v6 = *(v18 - 1);
    if (v6)
    {
LABEL_151:
      if (v6 >= 0xFFFE000000000000)
      {
        if ((v6 & 0xFFFFFFFE) != 0)
          v44 = 0x200000000;
        else
          v44 = 0x100000000;
        goto LABEL_143;
      }
      if (v6 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v47 = v6 & 0xFFFE000000000002;
        v7 = v6 >> 36;
        v8 = (v6 & 0xFFFFFFFFFLL) != 0 && v7 == 0;
        if (v16 <= v6 && (v8 & 1) != 0)
        {
          if (v47)
          {
            if ((v6 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v44 = 0x10000000000;
            else
              v44 = 0x20000000000;
            goto LABEL_143;
          }
          v49 = *(unsigned __int8 *)(v6 + 5);
          if (v49 == 2)
          {
            v6 = *(_QWORD *)(v6 + 8);
            if (v6)
            {
              v44 = 805306368;
              if ((v6 & 1) != 0)
                goto LABEL_143;
              if (v6 < v16)
              {
                v44 = 0;
                goto LABEL_143;
              }
              v44 = 0;
              v7 = v6 >> 36;
              if (v6 >> 36)
                goto LABEL_143;
              v7 = v6 & 0xFFFFFFFFFLL;
              if ((v6 & 0xFFFFFFFFFLL) == 0)
                goto LABEL_143;
              if ((*(_BYTE *)(v6 + 16) & 0x10) != 0)
              {
                v44 = 0x10000000;
                goto LABEL_143;
              }
            }
            v44 = 805306368;
            goto LABEL_143;
          }
          v44 = JSC::speculatedTypeMapping[v49];
        }
        else
        {
          v8 = v14;
          if (v47)
          {
            v12 = (v6 & 0xFFFFFFFFFFFFFFFELL) == 6;
            v44 = 0x20000000000;
            v6 = 0x10000000000;
            if (v12)
              v44 = 0x10000000000;
            goto LABEL_143;
          }
          if (v16 <= v6)
          {
            v44 = 0;
            if (v7)
              goto LABEL_143;
            v7 = v6 & 0xFFFFFFFFFLL;
            if ((v6 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_143;
            v91 = *(unsigned __int8 *)(v6 + 5);
            if (v91 != 2)
            {
              v44 = JSC::speculatedTypeMapping[v91];
              goto LABEL_143;
            }
            v6 = *(_QWORD *)(v6 + 8);
            v44 = 805306368;
            if (!v6 || (v6 & 1) != 0)
              goto LABEL_143;
            if (v6 >= v16)
            {
              v44 = 0;
              v7 = v6 >> 36;
              if (!(v6 >> 36))
              {
                v7 = v6 & 0xFFFFFFFFFLL;
                if ((v6 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v6 + 16) & 0x10) != 0)
                    v44 = 0x10000000;
                  else
                    v44 = 805306368;
                }
              }
              goto LABEL_143;
            }
          }
          v44 = 0;
        }
LABEL_143:
        v45 |= v44;
        *(v18 - 1) = 0;
        goto LABEL_144;
      }
      *(_QWORD *)&v10 = v6 - 0x2000000000000;
      v55 = (uint64_t)COERCE_DOUBLE(v6 - 0x2000000000000);
      if ((double)(uint64_t)v10 != v10)
      {
LABEL_203:
        v44 = 0x2000000000;
        goto LABEL_143;
      }
      if (v55)
      {
        if ((unint64_t)(v55 + 0x8000000000000) >> 52)
          goto LABEL_203;
      }
      else if ((uint64_t)v6 < 0x2000000000000)
      {
        goto LABEL_203;
      }
      v44 = 0x1000000000;
      goto LABEL_143;
    }
LABEL_144:
    v5 = *v18;
    *v18 |= v45;
    v18 += 3;
    ++v17;
  }
LABEL_206:
  v57 = *(_QWORD *)(v2 + 136);
  if (!v57)
    goto LABEL_435;
  v58 = *(_QWORD *)(v57 - 16);
  do
    v59 = __ldaxr((unsigned int *)v58);
  while (__stlxr(v59 + 1, (unsigned int *)v58));
  v60 = -*(_DWORD *)(v58 + 8);
  do
  {
    v61 = __ldaxr((unsigned int *)v58);
    v62 = v61 - 1;
  }
  while (__stlxr(v62, (unsigned int *)v58));
  if (!v62)
  {
    v175 = v14;
    atomic_store(1u, (unsigned int *)v58);
    if ((*(_BYTE *)(v58 + 4) & 1) != 0)
      WTF::fastFree(*(_QWORD *)(v58 + 16), i, v5, v6, v7, v8, v14, v9);
    WTF::fastFree(v58, i, v5, v6, v7, v8, v14, v9);
    v14 = v175;
  }
  if (v60 < 0)
  {
    v68 = v60;
    if ((v14 & 1) == 0)
    {
      v69 = *(_DWORD **)(v11 + 184);
      if (*v69 <= v17)
        v70 = v17;
      else
        v70 = *v69;
      v71 = (unint64_t *)&v69[2 * v17 + 2];
      v72 = qword_1ECF4C080;
      v73 = v70 - v17;
      v74 = (unint64_t *)(v57 - 32);
      v5 = 0x10000000000;
      while (1)
      {
        v8 = *v74;
        v75 = v74[1];
        v76 = *v74 | v75;
        if (!v76)
        {
          v75 = 0;
          goto LABEL_242;
        }
        if (!v8)
        {
          v76 = 0;
          goto LABEL_242;
        }
        if (v8 >= 0xFFFE000000000000)
        {
          if ((v8 & 0xFFFFFFFE) != 0)
            v76 = 0x200000000;
          else
            v76 = 0x100000000;
          goto LABEL_240;
        }
        if (v8 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v10 = v8 - 0x2000000000000;
          v82 = (uint64_t)COERCE_DOUBLE(v8 - 0x2000000000000);
          if ((double)(uint64_t)v10 == v10)
          {
            if (v82)
            {
              if (!((unint64_t)(v82 + 0x8000000000000) >> 52))
                goto LABEL_320;
            }
            else if ((uint64_t)v8 >= 0x2000000000000)
            {
LABEL_320:
              v76 = 0x1000000000;
              goto LABEL_240;
            }
          }
          v76 = 0x2000000000;
        }
        else
        {
          v77 = v8 & 0xFFFE000000000002;
          v14 = v8 >> 36;
          v9 = (v8 & 0xFFFFFFFFFLL) != 0 && v14 == 0;
          if (v72 <= v8 && v9)
          {
            if (v77)
            {
              if ((v8 & 0xFFFFFFFFFFFFFFFELL) == 6)
                v76 = 0x10000000000;
              else
                v76 = 0x20000000000;
              goto LABEL_240;
            }
            v79 = *(unsigned __int8 *)(v8 + 5);
            if (v79 != 2)
              goto LABEL_239;
            v8 = *(_QWORD *)(v8 + 8);
            if (!v8)
              goto LABEL_314;
            v76 = 805306368;
          }
          else
          {
            if (v77)
            {
              v12 = (v8 & 0xFFFFFFFFFFFFFFFELL) == 6;
              v76 = 0x20000000000;
              v8 = 0x10000000000;
              if (v12)
                v76 = 0x10000000000;
              goto LABEL_240;
            }
            if (v72 > v8)
            {
LABEL_361:
              v76 = 0;
              goto LABEL_240;
            }
            v76 = 0;
            if (v14)
              goto LABEL_240;
            v14 = v8 & 0xFFFFFFFFFLL;
            if ((v8 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_240;
            v79 = *(unsigned __int8 *)(v8 + 5);
            if (v79 != 2)
            {
LABEL_239:
              v76 = JSC::speculatedTypeMapping[v79];
              goto LABEL_240;
            }
            v8 = *(_QWORD *)(v8 + 8);
            v76 = 805306368;
            if (!v8)
              goto LABEL_240;
          }
          if ((v8 & 1) == 0)
          {
            if (v8 < v72)
              goto LABEL_361;
            v76 = 0;
            v14 = v8 >> 36;
            if (v8 >> 36)
              goto LABEL_240;
            v14 = v8 & 0xFFFFFFFFFLL;
            if ((v8 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_240;
            if ((*(_BYTE *)(v8 + 16) & 0x10) == 0)
            {
LABEL_314:
              v76 = 805306368;
              goto LABEL_240;
            }
            v76 = 0x10000000;
          }
        }
LABEL_240:
        *v74 = 0;
LABEL_242:
        v80 = v76 | v75;
        v74[1] = v80;
        if (!v73)
        {
          __break(0xC471u);
          JUMPOUT(0x198827BA8);
        }
        v7 = *v71;
        v6 = *v71 | v80;
        v74[1] = v6;
        *v71++ = v6;
        --v73;
        v74 -= 2;
        if (__CFADD__(v68++, 1))
          goto LABEL_213;
      }
    }
    v83 = 0;
    v84 = (unint64_t *)(v57 - 32);
    v85 = qword_1ECF4C080;
    do
    {
      v7 = *v84;
      v86 = v84[1];
      v6 = *v84 | v86;
      if (!v6)
      {
        v86 = 0;
        goto LABEL_281;
      }
      if (!v7)
      {
        v6 = 0;
        goto LABEL_281;
      }
      if (v7 >= 0xFFFE000000000000)
      {
        if ((v7 & 0xFFFFFFFE) != 0)
          v6 = 0x200000000;
        else
          v6 = 0x100000000;
        goto LABEL_279;
      }
      if (v7 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v10 = v7 - 0x2000000000000;
        v90 = (uint64_t)COERCE_DOUBLE(v7 - 0x2000000000000);
        if ((double)(uint64_t)v10 == v10)
        {
          if (v90)
          {
            if (!((unint64_t)(v90 + 0x8000000000000) >> 52))
              goto LABEL_317;
          }
          else if ((uint64_t)v7 >= 0x2000000000000)
          {
LABEL_317:
            v6 = 0x1000000000;
            goto LABEL_279;
          }
        }
        v6 = 0x2000000000;
      }
      else
      {
        v87 = v7 & 0xFFFE000000000002;
        v8 = v7 >> 36;
        v14 = (v7 & 0xFFFFFFFFFLL) != 0 && v8 == 0;
        if (v85 <= v7 && (v14 & 1) != 0)
        {
          if (v87)
          {
            if ((v7 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v6 = 0x10000000000;
            else
              v6 = 0x20000000000;
            goto LABEL_279;
          }
          v89 = *(unsigned __int8 *)(v7 + 5);
          if (v89 != 2)
            goto LABEL_278;
          v7 = *(_QWORD *)(v7 + 8);
          if (!v7)
            goto LABEL_313;
          v6 = 805306368;
        }
        else
        {
          if (v87)
          {
            v12 = (v7 & 0xFFFFFFFFFFFFFFFELL) == 6;
            v6 = 0x20000000000;
            v7 = 0x10000000000;
            if (v12)
              v6 = 0x10000000000;
            goto LABEL_279;
          }
          if (v85 > v7)
          {
LABEL_353:
            v6 = 0;
            goto LABEL_279;
          }
          v6 = 0;
          if (v8)
            goto LABEL_279;
          v8 = v7 & 0xFFFFFFFFFLL;
          if ((v7 & 0xFFFFFFFFFLL) == 0)
            goto LABEL_279;
          v89 = *(unsigned __int8 *)(v7 + 5);
          if (v89 != 2)
          {
LABEL_278:
            v6 = JSC::speculatedTypeMapping[v89];
            goto LABEL_279;
          }
          v7 = *(_QWORD *)(v7 + 8);
          v6 = 805306368;
          if (!v7)
            goto LABEL_279;
        }
        if ((v7 & 1) == 0)
        {
          if (v7 < v85)
            goto LABEL_353;
          v6 = 0;
          v8 = v7 >> 36;
          if (v7 >> 36)
            goto LABEL_279;
          v8 = v7 & 0xFFFFFFFFFLL;
          if ((v7 & 0xFFFFFFFFFLL) == 0)
            goto LABEL_279;
          if ((*(_BYTE *)(v7 + 16) & 0x10) == 0)
          {
LABEL_313:
            v6 = 805306368;
            goto LABEL_279;
          }
          v6 = 0x10000000;
        }
      }
LABEL_279:
      *v84 = 0;
LABEL_281:
      v5 = v6 | v86;
      v84[1] = v5;
      --v83;
      v84 -= 2;
    }
    while (v83 > v60);
  }
LABEL_213:
  v63 = *(_QWORD *)(v2 + 136);
  if (v63)
  {
    v64 = *(unsigned __int16 *)(v63 + 30);
    if (!*(_WORD *)(v63 + 30))
      v64 = *(_DWORD *)(v63 + 156);
    v65 = (uint64_t *)((v63 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
    v66 = *(unsigned __int16 *)(v63 + 32);
    if (!*(_WORD *)(v63 + 32))
      v66 = *(_DWORD *)(v63 + 160);
    v67 = v63 + v66;
    if (v67 > (unint64_t)v65)
    {
      while (1)
      {
        v5 = *v65;
        if (*v65)
        {
          v94 = *(unsigned int *)v5;
          if ((_DWORD)v94)
            break;
        }
LABEL_392:
        if ((unint64_t)++v65 >= v67)
          goto LABEL_435;
      }
      v95 = qword_1ECF4C080;
      v5 += 16;
      while (2)
      {
        while (1)
        {
          v96 = *(_QWORD *)(v5 - 8);
          if (v96)
            break;
          v7 = *(_QWORD *)v5;
          v6 = *(_QWORD *)v5;
          *(_QWORD *)v5 = *(_QWORD *)v5;
          v5 += 24;
          if (!--v94)
            goto LABEL_392;
        }
        if (v96 >= 0xFFFE000000000000)
        {
          if ((v96 & 0xFFFFFFFE) != 0)
            v100 = 0x200000000;
          else
            v100 = 0x100000000;
          goto LABEL_411;
        }
        if (v96 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          v97 = v96 & 0xFFFE000000000002;
          v8 = v96 >> 36;
          v14 = (v96 & 0xFFFFFFFFFLL) != 0 && v8 == 0;
          if (v95 <= v96 && (v14 & 1) != 0)
          {
            if (v97)
            {
              if ((v96 & 0xFFFFFFFFFFFFFFFELL) == 6)
                v100 = 0x10000000000;
              else
                v100 = 0x20000000000;
            }
            else
            {
              v99 = *(unsigned __int8 *)(v96 + 5);
              if (v99 != 2)
                goto LABEL_410;
              v101 = *(_QWORD *)(v96 + 8);
              if (v101)
              {
                v100 = 805306368;
                goto LABEL_421;
              }
LABEL_429:
              v100 = 805306368;
            }
            goto LABEL_411;
          }
          if (v97)
          {
            v100 = 0x20000000000;
            if ((v96 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v100 = 0x10000000000;
            goto LABEL_411;
          }
          if (v95 <= v96)
          {
            v100 = 0;
            if (v8)
              goto LABEL_411;
            v8 = v96 & 0xFFFFFFFFFLL;
            if ((v96 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_411;
            v99 = *(unsigned __int8 *)(v96 + 5);
            if (v99 != 2)
            {
LABEL_410:
              v100 = JSC::speculatedTypeMapping[v99];
              goto LABEL_411;
            }
            v101 = *(_QWORD *)(v96 + 8);
            v100 = 805306368;
            if (!v101)
            {
LABEL_411:
              *(_QWORD *)(v5 - 8) = 0;
              v7 = *(_QWORD *)v5;
              v6 = *(_QWORD *)v5 | v100;
              *(_QWORD *)v5 = v6;
              v5 += 24;
              if (!--v94)
                goto LABEL_392;
              continue;
            }
LABEL_421:
            if ((v101 & 1) != 0)
              goto LABEL_411;
            if (v101 >= v95)
            {
              v100 = 0;
              v8 = v101 >> 36;
              if (!(v101 >> 36))
              {
                v8 = v101 & 0xFFFFFFFFFLL;
                if ((v101 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v101 + 16) & 0x10) == 0)
                    goto LABEL_429;
                  v100 = 0x10000000;
                }
              }
              goto LABEL_411;
            }
          }
          v100 = 0;
          goto LABEL_411;
        }
        break;
      }
      *(_QWORD *)&v10 = v96 - 0x2000000000000;
      v102 = (uint64_t)COERCE_DOUBLE(v96 - 0x2000000000000);
      if ((double)(uint64_t)v10 != v10)
      {
LABEL_428:
        v100 = 0x2000000000;
        goto LABEL_411;
      }
      if (v102)
      {
        if ((unint64_t)(v102 + 0x8000000000000) >> 52)
          goto LABEL_428;
      }
      else if ((uint64_t)v96 < 0x2000000000000)
      {
        goto LABEL_428;
      }
      v100 = 0x1000000000;
      goto LABEL_411;
    }
  }
LABEL_435:
  v103 = *(uint64_t **)(v2 + 144);
  if (v103)
  {
    v128 = *v103;
    if (*v103)
    {
      v156 = 0;
      v157 = v103[1];
      do
      {
        v158 = (unint64_t *)(*(_QWORD *)(v157 + (v156 & 0xFFFFFFFFFFFFFFF8) + 8) + 32 * (v156 & 7));
        v159 = *v158;
        if (*v158)
        {
          v159 = JSC::speculationFromValue(v159);
          *v158 = 0;
        }
        v158[1] |= v159;
        ++v156;
      }
      while (v128 != v156);
    }
    v129 = v103[5];
    if (v129)
    {
      for (j = 0; j != v129; ++j)
      {
        v131 = *(_QWORD *)(v103[6] + (j & 0xFFFFFFFFFFFFFFF8) + 8) + 16 * (j & 7);
        ValueProfileForBytecodeIndex = JSC::CodeBlock::tryGetValueProfileForBytecodeIndex(v2, *(_DWORD *)v131, *(int8x8_t *)&v10);
        v135 = *(_QWORD *)(v131 + 8);
        v134 = (_QWORD *)(v131 + 8);
        v133 = v135;
        if (v135)
          *(_QWORD *)(ValueProfileForBytecodeIndex + 8) |= JSC::speculationFromValue(v133);
        *v134 = 0;
      }
    }
  }
  v104 = *(_QWORD *)(v2 + 120);
  if (v104)
  {
    v105 = *(unsigned __int8 *)(v104 + 12);
    v106 = *(_QWORD *)(v2 + 56);
    if (v105 != 3)
      goto LABEL_438;
    goto LABEL_458;
  }
  v106 = *(_QWORD *)(v2 + 56);
LABEL_438:
  v107 = *(uint64_t (**)(JSC::JSString *))(v106 + 32);
  if (v107)
  {
    v108 = (unsigned int *)((char *)v107 + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 + 1, v108));
    v178 = v107;
    JSC::CodeBlock::setupWithUnlinkedBaselineCode(v2, &v178, v5, v6, v7, v8, v14, v9);
    v113 = (unsigned int *)v178;
    v178 = 0;
    if (v113)
    {
      v122 = v113 + 2;
      do
      {
        v123 = __ldaxr(v122);
        v124 = v123 - 1;
      }
      while (__stlxr(v124, v122));
      if (!v124)
      {
        atomic_store(1u, v113 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v113 + 32))(v113);
      }
    }
    JSC::ScriptExecutable::installCode(*(_QWORD *)(v2 + 64), *(JSC::VM **)(v2 + 72), (JSC::CodeBlock *)v2, (*(unsigned __int16 *)(*(_QWORD *)(v2 + 56) + 28) >> 12) & 3, *(_DWORD *)(*(_QWORD *)(v2 + 56) + 20) >> 31, 0, v110, v111, v112);
    JSC::ExecutionCounter<(JSC::CountingVariant)0>::setNewThreshold(*(_QWORD *)(v2 + 56) + 168, 0, v2);
    goto LABEL_443;
  }
LABEL_458:
  if ((JSC::ExecutionCounter<(JSC::CountingVariant)0>::checkIfThresholdCrossedAndSet((int *)(v106 + 168), v2) & 1) == 0)
  {
    JSC::VM::logEvent<JSC::LLInt::jitCompileAndSetHeuristics(JSC::VM&,JSC::CodeBlock *)::{lambda(void)#1}>(*(JSC::Profiler::Database **)(*(_QWORD *)(v2 + 72) + 93016), v2, v2);
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<char [88],char [2]>("    JIT threshold should be lifted.", "\n");
LABEL_464:
    v39 = 0;
    --*(_DWORD *)(v13 + 916);
    return v39;
  }
  v125 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
  if (v125 != -1)
  {
    v181 = (void (**)(WTF::StringPrintStream *__hidden))&v179;
    v180 = (WTF *)&v181;
    std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v180, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
  }
  ready = JSC::JITWorklist::completeAllReadyPlansForVM(JSC::theGlobalJITWorklist, v13, *(_QWORD *)(v2 + 56), 1);
  v127 = *(_QWORD *)(v2 + 120);
  if (v127 && *(_BYTE *)(v127 + 12) == 3)
  {
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<char [88],char [2]>("    Code was already compiled.", "\n");
    JSC::CodeBlock::jitSoon((JSC::CodeBlock *)v2);
LABEL_443:
    --*(_DWORD *)(v13 + 916);
    goto LABEL_444;
  }
  if (ready)
    goto LABEL_464;
  v160 = (JSC::JITPlan *)WTF::fastMalloc((WTF *)0x50);
  v161 = (JSC::JITWorklist *)JSC::BaselineJITPlan::BaselineJITPlan((uint64_t)v160, (JSC::CodeBlock *)v2);
  v162 = JSC::JITWorklist::ensureGlobalWorklist(v161);
  v177 = v160;
  JSC::JITWorklist::enqueue(v162, &v177, v163, v164, v165, v166, v167, v168);
  v169 = (unsigned int *)v177;
  v177 = 0;
  if (v169)
  {
    v172 = v169 + 2;
    do
    {
      v173 = __ldaxr(v172);
      v174 = v173 - 1;
    }
    while (__stlxr(v174, v172));
    if (!v174)
    {
      atomic_store(1u, v169 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v169 + 8))(v169);
    }
  }
  v170 = *(_QWORD *)(v2 + 120);
  if (!v170)
    goto LABEL_464;
  v171 = *(unsigned __int8 *)(v170 + 12);
  --*(_DWORD *)(v13 + 916);
  if (v171 != 3)
    return 0;
LABEL_444:
  v114 = *(JSC::Profiler::Database **)(*(_QWORD *)(v2 + 72) + 93016);
  if (v114)
  {
    v181 = off_1E3572250;
    v182 = v184;
    v183 = xmmword_199122F80;
    v184[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v181, "%s", "in prologue");
    v181[5]((WTF::StringPrintStream *)&v181);
    v144 = v182;
    v143 = v183;
    v180 = 0;
    if (v182)
    {
      if ((unint64_t)v183 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x198828494);
      }
      if ((_QWORD)v183 == -17)
      {
LABEL_513:
        __break(0xC471u);
        JUMPOUT(0x1988273C8);
      }
      v145 = (_QWORD *)WTF::fastMalloc((WTF *)(v183 + 17));
      *(_DWORD *)v145 = 1;
      v145[1] = v143;
      v180 = (WTF *)v145;
      v146 = v145 + 2;
      memcpy(v145 + 2, v144, v143);
      *((_BYTE *)v146 + v143) = 0;
      v147 = (unint64_t)v182;
      if (v182 == v184)
        goto LABEL_479;
    }
    else
    {
      v147 = 0;
    }
    WTF::fastFree(v147, v136, v137, v138, v139, v140, v141, v142);
LABEL_479:
    JSC::Profiler::Database::logEvent(v114, v2, "OSR entry", &v180, v139, v140, v141, v142);
    v155 = v180;
    v180 = 0;
    if (v155)
    {
      if (*(_DWORD *)v155 == 1)
        WTF::fastFree((unint64_t)v155, v148, v149, v150, v151, v152, v153, v154);
      else
        --*(_DWORD *)v155;
    }
  }
  v115 = *(unsigned int **)(v2 + 120);
  if (v115)
  {
    v116 = v115 + 2;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 + 1, v116));
  }
  v118 = v115 + 2;
  v39 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v115 + 48))(v115, 0);
  do
  {
    v119 = __ldaxr(v118);
    v120 = v119 - 1;
  }
  while (__stlxr(v120, v118));
  if (!v120)
  {
    atomic_store(1u, v115 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v115 + 32))(v115);
  }
  return v39;
}

uint64_t llint_entry_osr_function_for_construct(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  if ((v1 & 1) != 0)
    v1 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 48);
  return JSC::LLInt::entryOSR(*(_QWORD *)(v1 + 104), "entry_osr_function_for_construct", 0);
}

uint64_t llint_entry_osr_function_for_call_arityCheck(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  if ((v1 & 1) != 0)
    v1 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 48);
  return JSC::LLInt::entryOSR(*(_QWORD *)(v1 + 96), "entry_osr_function_for_call_arityCheck", 1);
}

uint64_t llint_entry_osr_function_for_construct_arityCheck(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  if ((v1 & 1) != 0)
    v1 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 48);
  return JSC::LLInt::entryOSR(*(_QWORD *)(v1 + 104), "entry_osr_function_for_construct_arityCheck", 1);
}

void (**llint_loop_osr(JSC::CallFrame *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(WTF::StringPrintStream *__hidden this)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  unint64_t i;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *LoopHintExecutionCounter;
  unint64_t v46;
  JSC::CodeBlock *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (**v54)(WTF::StringPrintStream *__hidden);
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t *v81;
  unsigned int v82;
  unint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t (*v123)(JSC::JSString *);
  unsigned int *v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint8x8_t v128;
  unsigned int *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  int v134;
  JSC::Profiler::Database *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  unint64_t v142;
  unsigned int v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int *v153;
  unsigned int v154;
  unsigned int v155;
  unint64_t v156;
  int ready;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t j;
  uint64_t v162;
  uint64_t ValueProfileForBytecodeIndex;
  unint64_t v164;
  _QWORD *v165;
  unint64_t v166;
  WTF::PrintStream *v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  size_t v175;
  const void *v176;
  _QWORD *v177;
  _QWORD *v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  WTF *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  JSC::JITPlan *v192;
  JSC::JITWorklist *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int *v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  unint64_t v205;
  unsigned int *v206;
  unsigned int v207;
  unsigned int v208;
  uint64_t v209;
  unint64_t v210;
  JSC::JITPlan *v211;
  uint64_t (*v212)(JSC::JSString *);
  char v213;
  WTF *v214;
  void (**v215)(WTF::StringPrintStream *__hidden);
  _BYTE *v216;
  __int128 v217;
  _BYTE v218[128];
  uint64_t v219;

  v219 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)a1 + 2);
  v11 = *(_QWORD *)(v10 + 72);
  *(_QWORD *)(v11 + 40) = a1;
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::CodeBlock,char [42],JSC::ExecutionCounter<(JSC::CountingVariant)0>,char [2]>(v10, *(_QWORD *)(v10 + 56) + 168);
  v12 = *(_QWORD *)(v10 + 56);
  if (HIBYTE(qword_1ECF4C75C))
  {
    if ((*(_WORD *)(v12 + 28) & 1) == 0)
    {
      LoopHintExecutionCounter = (_QWORD *)JSC::VM::getLoopHintExecutionCounter(v11, a2, a3, a4, a5, a6, a7, a8);
      v12 = *(_QWORD *)(v10 + 56);
      v46 = *LoopHintExecutionCounter + *(int *)(v12 + 176);
      *LoopHintExecutionCounter = v46;
      if (v46 >= qword_1ECF4C768)
      {
        JSC::LLInt::fuzzerReturnEarlyFromLoopHintEntrypoint((JSC::LLInt *)&v215);
        v54 = v215;
        if (*((_QWORD *)a1 + 2))
          JSC::CallFrame::topOfFrameInternal(a1, v47);
        JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v215, (uint64_t)v47, v48, v49, v50, v51, v52, v53);
        return v54;
      }
    }
  }
  if (dword_1ECF4C2B0 >= 2)
  {
    v55 = *(_DWORD *)(*(_QWORD *)(v12 + 80) + 12);
    if (qword_1ECF4C2C0 > v55 || HIDWORD(qword_1ECF4C2C0) < v55)
    {
      if (dword_1ECF4C2B0 != 2)
        goto LABEL_5;
    }
    else if (dword_1ECF4C2B0 == 2)
    {
      goto LABEL_5;
    }
LABEL_98:
    v54 = 0;
    *(_DWORD *)(v12 + 176) = 0x7FFFFFFF;
    *(_QWORD *)(v12 + 168) = 0x80000000;
    return v54;
  }
LABEL_5:
  v13 = atomic_load(&qword_1ECF58D78);
  if (v13 != -1)
  {
    v215 = (void (**)(WTF::StringPrintStream *__hidden))&v212;
    v214 = (WTF *)&v215;
    std::__call_once(&qword_1ECF58D78, &v214, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::ensureGlobalJITAllowlist(void)::$_0 &&>>);
  }
  v14 = JSC::FunctionAllowlist::contains((JSC::FunctionAllowlist *)&unk_1ECF58D80, (JSC::CodeBlock *)v10);
  v12 = *(_QWORD *)(v10 + 56);
  if (!v14 || !BYTE2(dword_1ECF4C240))
    goto LABEL_98;
  ++*(_DWORD *)(v11 + 916);
  v20 = *(unsigned __int16 *)(v12 + 28) | ((unint64_t)*(unsigned __int8 *)(v12 + 30) << 16);
  v21 = *(unsigned int **)(v10 + 152);
  v22 = qword_1ECF4C080;
  v23 = 0;
  v24 = (uint64_t *)(v21 + 6);
  v25 = JSC::speculatedTypeMapping;
  if ((*(_WORD *)(v12 + 28) & 1) == 0)
  {
    if (!v21)
      goto LABEL_90;
LABEL_11:
    for (i = *v21; ; i = 0)
    {
      if (v23 >= i)
        goto LABEL_208;
      if (v23 >= *v21)
        goto LABEL_274;
      v27 = *(v24 - 2);
      if (!v27)
      {
        v28 = 0;
        v29 = *(v24 - 1);
        if (!v29)
          goto LABEL_16;
        goto LABEL_33;
      }
      if (v27 >= 0xFFFE000000000000)
      {
        if ((v27 & 0xFFFFFFFE) != 0)
          v28 = 0x200000000;
        else
          v28 = 0x100000000;
      }
      else if (v27 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v19 = v27 - 0x2000000000000;
        v43 = (uint64_t)COERCE_DOUBLE(v27 - 0x2000000000000);
        if ((double)(uint64_t)v19 != v19)
          goto LABEL_74;
        if (v43)
        {
          if ((unint64_t)(v43 + 0x8000000000000) >> 52)
            goto LABEL_74;
        }
        else if ((uint64_t)v27 < 0x2000000000000)
        {
LABEL_74:
          v28 = 0x2000000000;
          goto LABEL_32;
        }
        v28 = 0x1000000000;
      }
      else
      {
        v33 = v27 & 0xFFFE000000000002;
        v34 = v27 >> 36;
        v35 = (v27 & 0xFFFFFFFFFLL) != 0 && v34 == 0;
        v17 = v35;
        if (v22 <= v27 && (v17 & 1) != 0)
        {
          if (v33)
          {
            if ((v27 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v28 = 0x10000000000;
            else
              v28 = 0x20000000000;
          }
          else
          {
            v36 = *(unsigned __int8 *)(v27 + 5);
            if (v36 != 2)
            {
              v28 = JSC::speculatedTypeMapping[v36];
              goto LABEL_32;
            }
            v41 = *(_QWORD *)(v27 + 8);
            if (!v41)
              goto LABEL_77;
            v28 = 805306368;
            if ((v41 & 1) != 0)
              goto LABEL_32;
            if (v41 < v22)
            {
              v28 = 0;
            }
            else
            {
              v28 = 0;
              if (!(v41 >> 36) && (v41 & 0xFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)(v41 + 16) & 0x10) != 0)
                {
                  v28 = 0x10000000;
                  goto LABEL_32;
                }
LABEL_77:
                v28 = 805306368;
              }
            }
          }
        }
        else
        {
          v18 = v20;
          v17 = a2;
          if (v33)
          {
            v28 = 0x20000000000;
            if ((v27 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v28 = 0x10000000000;
          }
          else
          {
            if (v22 > v27)
              goto LABEL_140;
            v28 = 0;
            if (!v34 && (v27 & 0xFFFFFFFFFLL) != 0)
            {
              v56 = *(unsigned __int8 *)(v27 + 5);
              if (v56 == 2)
              {
                v58 = *(_QWORD *)(v27 + 8);
                v28 = 805306368;
                if (v58 && (v58 & 1) == 0)
                {
                  if (v58 < v22)
                  {
LABEL_140:
                    v28 = 0;
                    goto LABEL_32;
                  }
                  v28 = 0;
                  if (!(v58 >> 36) && (v58 & 0xFFFFFFFFFLL) != 0)
                  {
                    if ((*(_BYTE *)(v58 + 16) & 0x10) != 0)
                      v28 = 0x10000000;
                    else
                      v28 = 805306368;
                  }
                }
              }
              else
              {
                v28 = JSC::speculatedTypeMapping[v56];
              }
            }
          }
        }
      }
LABEL_32:
      *(v24 - 2) = 0;
      v29 = *(v24 - 1);
      if (!v29)
        goto LABEL_16;
LABEL_33:
      if (v29 >= 0xFFFE000000000000)
      {
        if ((v29 & 0xFFFFFFFE) != 0)
          v40 = 0x200000000;
        else
          v40 = 0x100000000;
        goto LABEL_46;
      }
      if (v29 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v19 = v29 - 0x2000000000000;
        v44 = (uint64_t)COERCE_DOUBLE(v29 - 0x2000000000000);
        if ((double)(uint64_t)v19 == v19)
        {
          if (v44)
          {
            if (!((unint64_t)(v44 + 0x8000000000000) >> 52))
              goto LABEL_84;
          }
          else if ((uint64_t)v29 >= 0x2000000000000)
          {
LABEL_84:
            v40 = 0x1000000000;
            goto LABEL_46;
          }
        }
        v40 = 0x2000000000;
      }
      else
      {
        v37 = v29 & 0xFFFE000000000002;
        v17 = v29 >> 36;
        v18 = (v29 & 0xFFFFFFFFFLL) != 0 && v17 == 0;
        if (v22 <= v29 && (v18 & 1) != 0)
        {
          if (v37)
          {
            if ((v29 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v40 = 0x10000000000;
            else
              v40 = 0x20000000000;
            goto LABEL_46;
          }
          v39 = *(unsigned __int8 *)(v29 + 5);
          if (v39 == 2)
          {
            v42 = *(_QWORD *)(v29 + 8);
            if (!v42)
              goto LABEL_78;
            v40 = 805306368;
            if ((v42 & 1) == 0)
            {
              if (v42 < v22)
              {
                v40 = 0;
                goto LABEL_46;
              }
              v40 = 0;
              v17 = v42 >> 36;
              if (v42 >> 36)
                goto LABEL_46;
              v17 = v42 & 0xFFFFFFFFFLL;
              if ((v42 & 0xFFFFFFFFFLL) == 0)
                goto LABEL_46;
              if ((*(_BYTE *)(v42 + 16) & 0x10) == 0)
              {
LABEL_78:
                v40 = 805306368;
                goto LABEL_46;
              }
              v40 = 0x10000000;
            }
          }
          else
          {
            v40 = JSC::speculatedTypeMapping[v39];
          }
        }
        else
        {
          v18 = a2;
          if (v37)
          {
            v40 = 0x20000000000;
            if ((v29 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v40 = 0x10000000000;
            goto LABEL_46;
          }
          if (v22 <= v29)
          {
            v40 = 0;
            if (v17)
              goto LABEL_46;
            v17 = v29 & 0xFFFFFFFFFLL;
            if ((v29 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_46;
            v57 = *(unsigned __int8 *)(v29 + 5);
            if (v57 != 2)
            {
              v40 = JSC::speculatedTypeMapping[v57];
              goto LABEL_46;
            }
            v59 = *(_QWORD *)(v29 + 8);
            v40 = 805306368;
            if (!v59 || (v59 & 1) != 0)
              goto LABEL_46;
            if (v59 >= v22)
            {
              v40 = 0;
              v17 = v59 >> 36;
              if (!(v59 >> 36))
              {
                v17 = v59 & 0xFFFFFFFFFLL;
                if ((v59 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v59 + 16) & 0x10) != 0)
                    v40 = 0x10000000;
                  else
                    v40 = 805306368;
                }
              }
              goto LABEL_46;
            }
          }
          v40 = 0;
        }
      }
LABEL_46:
      v28 |= v40;
      *(v24 - 1) = 0;
LABEL_16:
      v30 = *v24 | v28;
      *v24 = v30;
      v31 = *(unsigned int **)(v12 + 184);
      if (v23 >= *v31)
      {
        __break(0xC471u);
        JUMPOUT(0x1988288BCLL);
      }
      v15 = (uint64_t)&v31[2 * v23];
      v16 = *(_QWORD *)(v15 + 8);
      v32 = v16 | v30;
      *v24 = v32;
      v24 += 3;
      *(_QWORD *)(v15 + 8) = v32;
      ++v23;
      if (v21)
        goto LABEL_11;
LABEL_90:
      ;
    }
  }
  while (1)
  {
    i = v21 ? *v21 : 0;
    if (v23 >= i)
      break;
    if (v23 >= *v21)
    {
LABEL_274:
      __break(0xC471u);
      JUMPOUT(0x198828FACLL);
    }
    v62 = *(v24 - 2);
    if (!v62)
    {
      v61 = 0;
      v16 = *(v24 - 1);
      if (v16)
        goto LABEL_153;
      goto LABEL_146;
    }
    if (v62 >= 0xFFFE000000000000)
    {
      if ((v62 & 0xFFFFFFFE) != 0)
        v61 = 0x200000000;
      else
        v61 = 0x100000000;
    }
    else if (v62 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v19 = v62 - 0x2000000000000;
      v72 = (uint64_t)COERCE_DOUBLE(v62 - 0x2000000000000);
      if ((double)(uint64_t)v19 != v19)
        goto LABEL_207;
      if (v72)
      {
        if ((unint64_t)(v72 + 0x8000000000000) >> 52)
          goto LABEL_207;
      }
      else if ((uint64_t)v62 < 0x2000000000000)
      {
LABEL_207:
        v61 = 0x2000000000;
        goto LABEL_179;
      }
      v61 = 0x1000000000;
    }
    else
    {
      v66 = v62 & 0xFFFE000000000002;
      v67 = v62 >> 36;
      v17 = (v62 & 0xFFFFFFFFFLL) != 0 && v67 == 0;
      if (v22 <= v62 && (v17 & 1) != 0)
      {
        if (v66)
        {
          if ((v62 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v61 = 0x10000000000;
          else
            v61 = 0x20000000000;
        }
        else
        {
          v69 = *(unsigned __int8 *)(v62 + 5);
          if (v69 != 2)
          {
            v61 = JSC::speculatedTypeMapping[v69];
            goto LABEL_179;
          }
          v70 = *(_QWORD *)(v62 + 8);
          if (!v70)
            goto LABEL_267;
          v61 = 805306368;
          if ((v70 & 1) != 0)
            goto LABEL_179;
          if (v70 < v22)
          {
            v61 = 0;
          }
          else
          {
            v61 = 0;
            if (!(v70 >> 36) && (v70 & 0xFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)(v70 + 16) & 0x10) != 0)
              {
                v61 = 0x10000000;
                goto LABEL_179;
              }
LABEL_267:
              v61 = 805306368;
            }
          }
        }
      }
      else
      {
        v18 = v20;
        v17 = a2;
        if (v66)
        {
          v61 = 0x20000000000;
          if ((v62 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v61 = 0x10000000000;
        }
        else
        {
          if (v22 > v62)
            goto LABEL_340;
          v61 = 0;
          if (!v67 && (v62 & 0xFFFFFFFFFLL) != 0)
          {
            v104 = *(unsigned __int8 *)(v62 + 5);
            if (v104 == 2)
            {
              v105 = *(_QWORD *)(v62 + 8);
              v61 = 805306368;
              if (v105 && (v105 & 1) == 0)
              {
                if (v105 < v22)
                {
LABEL_340:
                  v61 = 0;
                  goto LABEL_179;
                }
                v61 = 0;
                if (!(v105 >> 36) && (v105 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v105 + 16) & 0x10) != 0)
                    v61 = 0x10000000;
                  else
                    v61 = 805306368;
                }
              }
            }
            else
            {
              v61 = JSC::speculatedTypeMapping[v104];
            }
          }
        }
      }
    }
LABEL_179:
    *(v24 - 2) = 0;
    v16 = *(v24 - 1);
    if (v16)
    {
LABEL_153:
      if (v16 >= 0xFFFE000000000000)
      {
        if ((v16 & 0xFFFFFFFE) != 0)
          v60 = 0x200000000;
        else
          v60 = 0x100000000;
        goto LABEL_145;
      }
      if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v63 = v16 & 0xFFFE000000000002;
        v17 = v16 >> 36;
        v18 = (v16 & 0xFFFFFFFFFLL) != 0 && v17 == 0;
        if (v22 <= v16 && (v18 & 1) != 0)
        {
          if (v63)
          {
            if ((v16 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v60 = 0x10000000000;
            else
              v60 = 0x20000000000;
            goto LABEL_145;
          }
          v65 = *(unsigned __int8 *)(v16 + 5);
          if (v65 == 2)
          {
            v16 = *(_QWORD *)(v16 + 8);
            if (v16)
            {
              v60 = 805306368;
              if ((v16 & 1) != 0)
                goto LABEL_145;
              if (v16 < v22)
              {
                v60 = 0;
                goto LABEL_145;
              }
              v60 = 0;
              v17 = v16 >> 36;
              if (v16 >> 36)
                goto LABEL_145;
              v17 = v16 & 0xFFFFFFFFFLL;
              if ((v16 & 0xFFFFFFFFFLL) == 0)
                goto LABEL_145;
              if ((*(_BYTE *)(v16 + 16) & 0x10) != 0)
              {
                v60 = 0x10000000;
                goto LABEL_145;
              }
            }
            v60 = 805306368;
            goto LABEL_145;
          }
          v60 = JSC::speculatedTypeMapping[v65];
        }
        else
        {
          v18 = a2;
          if (v63)
          {
            v35 = (v16 & 0xFFFFFFFFFFFFFFFELL) == 6;
            v60 = 0x20000000000;
            v16 = 0x10000000000;
            if (v35)
              v60 = 0x10000000000;
            goto LABEL_145;
          }
          if (v22 <= v16)
          {
            v60 = 0;
            if (v17)
              goto LABEL_145;
            v17 = v16 & 0xFFFFFFFFFLL;
            if ((v16 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_145;
            v103 = *(unsigned __int8 *)(v16 + 5);
            if (v103 != 2)
            {
              v60 = JSC::speculatedTypeMapping[v103];
              goto LABEL_145;
            }
            v16 = *(_QWORD *)(v16 + 8);
            v60 = 805306368;
            if (!v16 || (v16 & 1) != 0)
              goto LABEL_145;
            if (v16 >= v22)
            {
              v60 = 0;
              v17 = v16 >> 36;
              if (!(v16 >> 36))
              {
                v17 = v16 & 0xFFFFFFFFFLL;
                if ((v16 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v16 + 16) & 0x10) != 0)
                    v60 = 0x10000000;
                  else
                    v60 = 805306368;
                }
              }
              goto LABEL_145;
            }
          }
          v60 = 0;
        }
LABEL_145:
        v61 |= v60;
        *(v24 - 1) = 0;
        goto LABEL_146;
      }
      *(_QWORD *)&v19 = v16 - 0x2000000000000;
      v71 = (uint64_t)COERCE_DOUBLE(v16 - 0x2000000000000);
      if ((double)(uint64_t)v19 != v19)
      {
LABEL_205:
        v60 = 0x2000000000;
        goto LABEL_145;
      }
      if (v71)
      {
        if ((unint64_t)(v71 + 0x8000000000000) >> 52)
          goto LABEL_205;
      }
      else if ((uint64_t)v16 < 0x2000000000000)
      {
        goto LABEL_205;
      }
      v60 = 0x1000000000;
      goto LABEL_145;
    }
LABEL_146:
    v15 = *v24;
    *v24 |= v61;
    v24 += 3;
    ++v23;
  }
LABEL_208:
  v73 = *(_QWORD *)(v10 + 136);
  if (!v73)
    goto LABEL_435;
  v210 = a2;
  v74 = *(_QWORD *)(v73 - 16);
  do
    v75 = __ldaxr((unsigned int *)v74);
  while (__stlxr(v75 + 1, (unsigned int *)v74));
  v76 = -*(_DWORD *)(v74 + 8);
  do
  {
    v77 = __ldaxr((unsigned int *)v74);
    v78 = v77 - 1;
  }
  while (__stlxr(v78, (unsigned int *)v74));
  if (!v78)
  {
    v209 = v20;
    atomic_store(1u, (unsigned int *)v74);
    if ((*(_BYTE *)(v74 + 4) & 1) != 0)
      WTF::fastFree(*(_QWORD *)(v74 + 16), JSC::speculatedTypeMapping, i, v15, v16, v17, v18, v20);
    WTF::fastFree(v74, v25, i, v15, v16, v17, v18, v20);
    v20 = v209;
  }
  if (v76 < 0)
  {
    v84 = v76;
    if ((v20 & 1) == 0)
    {
      v85 = *(_DWORD **)(v12 + 184);
      if (*v85 <= v23)
        v86 = v23;
      else
        v86 = *v85;
      v87 = (unint64_t *)&v85[2 * v23 + 2];
      v88 = qword_1ECF4C080;
      v89 = v86 - v23;
      v90 = (unint64_t *)(v73 - 32);
      i = 0x20000000000;
      v15 = 0x10000000000;
      while (1)
      {
        v18 = *v90;
        v91 = v90[1];
        v92 = *v90 | v91;
        if (!v92)
        {
          v91 = 0;
          goto LABEL_244;
        }
        if (!v18)
        {
          v92 = 0;
          goto LABEL_244;
        }
        if (v18 >= 0xFFFE000000000000)
        {
          if ((v18 & 0xFFFFFFFE) != 0)
            v92 = 0x200000000;
          else
            v92 = 0x100000000;
          goto LABEL_242;
        }
        if (v18 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v19 = v18 - 0x2000000000000;
          v99 = (uint64_t)COERCE_DOUBLE(v18 - 0x2000000000000);
          if ((double)(uint64_t)v19 == v19)
          {
            if (v99)
            {
              if (!((unint64_t)(v99 + 0x8000000000000) >> 52))
                goto LABEL_282;
            }
            else if ((uint64_t)v18 >= 0x2000000000000)
            {
LABEL_282:
              v92 = 0x1000000000;
              goto LABEL_242;
            }
          }
          v92 = 0x2000000000;
        }
        else
        {
          v93 = v18 & 0xFFFE000000000002;
          v20 = v18 >> 36;
          v95 = (v18 & 0xFFFFFFFFFLL) != 0 && v20 == 0;
          if (v88 <= v18 && v95)
          {
            if (v93)
            {
              if ((v18 & 0xFFFFFFFFFFFFFFFELL) == 6)
                v92 = 0x10000000000;
              else
                v92 = 0x20000000000;
              goto LABEL_242;
            }
            v96 = *(unsigned __int8 *)(v18 + 5);
            if (v96 != 2)
              goto LABEL_241;
            v18 = *(_QWORD *)(v18 + 8);
            if (!v18)
              goto LABEL_279;
            v92 = 805306368;
          }
          else
          {
            if (v93)
            {
              v35 = (v18 & 0xFFFFFFFFFFFFFFFELL) == 6;
              v92 = 0x20000000000;
              v18 = 0x10000000000;
              if (v35)
                v92 = 0x10000000000;
              goto LABEL_242;
            }
            if (v88 > v18)
            {
LABEL_313:
              v92 = 0;
              goto LABEL_242;
            }
            v92 = 0;
            if (v20)
              goto LABEL_242;
            v20 = v18 & 0xFFFFFFFFFLL;
            if ((v18 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_242;
            v96 = *(unsigned __int8 *)(v18 + 5);
            if (v96 != 2)
            {
LABEL_241:
              v92 = JSC::speculatedTypeMapping[v96];
              goto LABEL_242;
            }
            v18 = *(_QWORD *)(v18 + 8);
            v92 = 805306368;
            if (!v18)
              goto LABEL_242;
          }
          if ((v18 & 1) == 0)
          {
            if (v18 < v88)
              goto LABEL_313;
            v92 = 0;
            v20 = v18 >> 36;
            if (v18 >> 36)
              goto LABEL_242;
            v20 = v18 & 0xFFFFFFFFFLL;
            if ((v18 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_242;
            if ((*(_BYTE *)(v18 + 16) & 0x10) == 0)
            {
LABEL_279:
              v92 = 805306368;
              goto LABEL_242;
            }
            v92 = 0x10000000;
          }
        }
LABEL_242:
        *v90 = 0;
LABEL_244:
        v97 = v92 | v91;
        v90[1] = v97;
        if (!v89)
        {
          __break(0xC471u);
          JUMPOUT(0x198829010);
        }
        v17 = *v87;
        v16 = *v87 | v97;
        v90[1] = v16;
        *v87++ = v16;
        --v89;
        v90 -= 2;
        if (__CFADD__(v84++, 1))
          goto LABEL_215;
      }
    }
    v100 = 0;
    v101 = (unint64_t *)(v73 - 32);
    v102 = qword_1ECF4C080;
    i = (unint64_t)JSC::speculatedTypeMapping;
    while (1)
    {
      v17 = *v101;
      v106 = v101[1];
      v16 = *v101 | v106;
      if (v16)
        break;
      v106 = 0;
LABEL_342:
      v15 = v16 | v106;
      v101[1] = v15;
      --v100;
      v101 -= 2;
      if (v100 <= v76)
        goto LABEL_215;
    }
    if (!v17)
    {
      v16 = 0;
      goto LABEL_342;
    }
    if (v17 >= 0xFFFE000000000000)
    {
      if ((v17 & 0xFFFFFFFE) != 0)
        v16 = 0x200000000;
      else
        v16 = 0x100000000;
      goto LABEL_358;
    }
    if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v107 = v17 & 0xFFFE000000000002;
      v18 = v17 >> 36;
      v20 = (v17 & 0xFFFFFFFFFLL) != 0 && v18 == 0;
      if (v102 <= v17 && (v20 & 1) != 0)
      {
        if (v107)
        {
          if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v16 = 0x10000000000;
          else
            v16 = 0x20000000000;
          goto LABEL_358;
        }
        v109 = *(unsigned __int8 *)(v17 + 5);
        if (v109 != 2)
          goto LABEL_357;
        v17 = *(_QWORD *)(v17 + 8);
        if (!v17)
        {
LABEL_376:
          v16 = 805306368;
          goto LABEL_358;
        }
        v16 = 805306368;
      }
      else
      {
        if (v107)
        {
          v35 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 6;
          v16 = 0x20000000000;
          v17 = 0x10000000000;
          if (v35)
            v16 = 0x10000000000;
          goto LABEL_358;
        }
        if (v102 > v17)
          goto LABEL_389;
        v16 = 0;
        if (v18)
          goto LABEL_358;
        v18 = v17 & 0xFFFFFFFFFLL;
        if ((v17 & 0xFFFFFFFFFLL) == 0)
          goto LABEL_358;
        v109 = *(unsigned __int8 *)(v17 + 5);
        if (v109 != 2)
        {
LABEL_357:
          v16 = JSC::speculatedTypeMapping[v109];
LABEL_358:
          *v101 = 0;
          goto LABEL_342;
        }
        v17 = *(_QWORD *)(v17 + 8);
        v16 = 805306368;
        if (!v17)
          goto LABEL_358;
      }
      if ((v17 & 1) != 0)
        goto LABEL_358;
      if (v17 >= v102)
      {
        v16 = 0;
        v18 = v17 >> 36;
        if (v17 >> 36)
          goto LABEL_358;
        v18 = v17 & 0xFFFFFFFFFLL;
        if ((v17 & 0xFFFFFFFFFLL) == 0)
          goto LABEL_358;
        if ((*(_BYTE *)(v17 + 16) & 0x10) != 0)
        {
          v16 = 0x10000000;
          goto LABEL_358;
        }
        goto LABEL_376;
      }
LABEL_389:
      v16 = 0;
      goto LABEL_358;
    }
    *(_QWORD *)&v19 = v17 - 0x2000000000000;
    v110 = (uint64_t)COERCE_DOUBLE(v17 - 0x2000000000000);
    if ((double)(uint64_t)v19 != v19)
    {
LABEL_375:
      v16 = 0x2000000000;
      goto LABEL_358;
    }
    if (v110)
    {
      if ((unint64_t)(v110 + 0x8000000000000) >> 52)
        goto LABEL_375;
    }
    else if ((uint64_t)v17 < 0x2000000000000)
    {
      goto LABEL_375;
    }
    v16 = 0x1000000000;
    goto LABEL_358;
  }
LABEL_215:
  v79 = *(_QWORD *)(v10 + 136);
  a2 = v210;
  if (v79)
  {
    v80 = *(unsigned __int16 *)(v79 + 30);
    if (!*(_WORD *)(v79 + 30))
      v80 = *(_DWORD *)(v79 + 156);
    v81 = (uint64_t *)((v79 + v80 + 7) & 0xFFFFFFFFFFFFFFF8);
    v82 = *(unsigned __int16 *)(v79 + 32);
    if (!*(_WORD *)(v79 + 32))
      v82 = *(_DWORD *)(v79 + 160);
    v83 = v79 + v82;
    if (v83 > (unint64_t)v81)
    {
      while (1)
      {
        v15 = *v81;
        if (*v81)
        {
          v111 = *(unsigned int *)v15;
          if ((_DWORD)v111)
            break;
        }
LABEL_393:
        if ((unint64_t)++v81 >= v83)
          goto LABEL_435;
      }
      i = qword_1ECF4C080;
      v15 += 16;
      while (2)
      {
        while (1)
        {
          v112 = *(_QWORD *)(v15 - 8);
          if (v112)
            break;
          v17 = *(_QWORD *)v15;
          v16 = *(_QWORD *)v15;
          *(_QWORD *)v15 = *(_QWORD *)v15;
          v15 += 24;
          if (!--v111)
            goto LABEL_393;
        }
        if (v112 >= 0xFFFE000000000000)
        {
          if ((v112 & 0xFFFFFFFE) != 0)
            v116 = 0x200000000;
          else
            v116 = 0x100000000;
          goto LABEL_412;
        }
        if (v112 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          v113 = v112 & 0xFFFE000000000002;
          v18 = v112 >> 36;
          v20 = (v112 & 0xFFFFFFFFFLL) != 0 && v18 == 0;
          if (i <= v112 && (v20 & 1) != 0)
          {
            if (v113)
            {
              if ((v112 & 0xFFFFFFFFFFFFFFFELL) == 6)
                v116 = 0x10000000000;
              else
                v116 = 0x20000000000;
            }
            else
            {
              v115 = *(unsigned __int8 *)(v112 + 5);
              if (v115 != 2)
              {
                v116 = JSC::speculatedTypeMapping[v115];
                goto LABEL_412;
              }
              v117 = *(_QWORD *)(v112 + 8);
              if (!v117)
                goto LABEL_429;
              v116 = 805306368;
              if ((v117 & 1) != 0)
                goto LABEL_412;
              if (v117 < i)
              {
                v116 = 0;
              }
              else
              {
                v116 = 0;
                v18 = v117 >> 36;
                if (!(v117 >> 36))
                {
                  v18 = v117 & 0xFFFFFFFFFLL;
                  if ((v117 & 0xFFFFFFFFFLL) != 0)
                  {
                    if ((*(_BYTE *)(v117 + 16) & 0x10) != 0)
                    {
                      v116 = 0x10000000;
                      goto LABEL_412;
                    }
LABEL_429:
                    v116 = 805306368;
                  }
                }
              }
            }
LABEL_412:
            *(_QWORD *)(v15 - 8) = 0;
            v17 = *(_QWORD *)v15;
            v16 = *(_QWORD *)v15 | v116;
            *(_QWORD *)v15 = v16;
            v15 += 24;
            if (!--v111)
              goto LABEL_393;
            continue;
          }
          if (v113)
          {
            v116 = 0x20000000000;
            if ((v112 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v116 = 0x10000000000;
            goto LABEL_527;
          }
          if (i <= v112)
          {
            v116 = 0;
            if (v18)
            {
LABEL_527:
              a2 = v210;
              goto LABEL_412;
            }
            v18 = v112 & 0xFFFFFFFFFLL;
            a2 = v210;
            if ((v112 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_412;
            v204 = *(unsigned __int8 *)(v112 + 5);
            if (v204 != 2)
            {
              v116 = JSC::speculatedTypeMapping[v204];
              goto LABEL_527;
            }
            v205 = *(_QWORD *)(v112 + 8);
            v116 = 805306368;
            if (!v205)
              goto LABEL_527;
            a2 = v210;
            if ((v205 & 1) != 0)
              goto LABEL_412;
            if (v205 >= i)
            {
              v116 = 0;
              v18 = v205 >> 36;
              if (!(v205 >> 36))
              {
                v18 = v205 & 0xFFFFFFFFFLL;
                if ((v205 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v205 + 16) & 0x10) != 0)
                    v116 = 0x10000000;
                  else
                    v116 = 805306368;
                }
              }
              goto LABEL_527;
            }
          }
          v116 = 0;
          goto LABEL_527;
        }
        break;
      }
      *(_QWORD *)&v19 = v112 - 0x2000000000000;
      v118 = (uint64_t)COERCE_DOUBLE(v112 - 0x2000000000000);
      if ((double)(uint64_t)v19 != v19)
      {
LABEL_428:
        v116 = 0x2000000000;
        goto LABEL_412;
      }
      if (v118)
      {
        if ((unint64_t)(v118 + 0x8000000000000) >> 52)
          goto LABEL_428;
      }
      else if ((uint64_t)v112 < 0x2000000000000)
      {
        goto LABEL_428;
      }
      v116 = 0x1000000000;
      goto LABEL_412;
    }
  }
LABEL_435:
  v119 = *(uint64_t **)(v10 + 144);
  if (v119)
  {
    v159 = *v119;
    if (*v119)
    {
      v188 = 0;
      v189 = v119[1];
      do
      {
        v190 = (unint64_t *)(*(_QWORD *)(v189 + (v188 & 0xFFFFFFFFFFFFFFF8) + 8) + 32 * (v188 & 7));
        v191 = *v190;
        if (*v190)
        {
          v191 = JSC::speculationFromValue(v191);
          *v190 = 0;
        }
        v190[1] |= v191;
        ++v188;
      }
      while (v159 != v188);
    }
    v160 = v119[5];
    if (v160)
    {
      for (j = 0; j != v160; ++j)
      {
        v162 = *(_QWORD *)(v119[6] + (j & 0xFFFFFFFFFFFFFFF8) + 8) + 16 * (j & 7);
        ValueProfileForBytecodeIndex = JSC::CodeBlock::tryGetValueProfileForBytecodeIndex(v10, *(_DWORD *)v162, *(int8x8_t *)&v19);
        v166 = *(_QWORD *)(v162 + 8);
        v165 = (_QWORD *)(v162 + 8);
        v164 = v166;
        if (v166)
          *(_QWORD *)(ValueProfileForBytecodeIndex + 8) |= JSC::speculationFromValue(v164);
        *v165 = 0;
      }
    }
  }
  v120 = *(_QWORD *)(v10 + 120);
  if (v120)
  {
    v121 = *(unsigned __int8 *)(v120 + 12);
    v122 = *(_QWORD *)(v10 + 56);
    if (v121 != 3)
      goto LABEL_438;
    goto LABEL_481;
  }
  v122 = *(_QWORD *)(v10 + 56);
LABEL_438:
  v123 = *(uint64_t (**)(JSC::JSString *))(v122 + 32);
  if (v123)
  {
    v124 = (unsigned int *)((char *)v123 + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 + 1, v124));
    v212 = v123;
    JSC::CodeBlock::setupWithUnlinkedBaselineCode(v10, &v212, i, v15, v16, v17, v18, v20);
    v129 = (unsigned int *)v212;
    v212 = 0;
    if (v129)
    {
      v153 = v129 + 2;
      do
      {
        v154 = __ldaxr(v153);
        v155 = v154 - 1;
      }
      while (__stlxr(v155, v153));
      if (!v155)
      {
        atomic_store(1u, v129 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v129 + 32))(v129);
      }
    }
    JSC::ScriptExecutable::installCode(*(_QWORD *)(v10 + 64), *(JSC::VM **)(v10 + 72), (JSC::CodeBlock *)v10, (*(unsigned __int16 *)(*(_QWORD *)(v10 + 56) + 28) >> 12) & 3, *(_DWORD *)(*(_QWORD *)(v10 + 56) + 20) >> 31, 0, v126, v127, v128);
    JSC::ExecutionCounter<(JSC::CountingVariant)0>::setNewThreshold(*(_QWORD *)(v10 + 56) + 168, 0, v10);
    goto LABEL_443;
  }
LABEL_481:
  if ((JSC::ExecutionCounter<(JSC::CountingVariant)0>::checkIfThresholdCrossedAndSet((int *)(v122 + 168), v10) & 1) == 0)
  {
    JSC::VM::logEvent<JSC::LLInt::jitCompileAndSetHeuristics(JSC::VM&,JSC::CodeBlock *)::{lambda(void)#1}>(*(JSC::Profiler::Database **)(*(_QWORD *)(v10 + 72) + 93016), v10, v10);
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<char [88],char [2]>("    JIT threshold should be lifted.", "\n");
LABEL_487:
    v54 = 0;
    --*(_DWORD *)(v11 + 916);
    return v54;
  }
  v156 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
  if (v156 != -1)
  {
    v215 = (void (**)(WTF::StringPrintStream *__hidden))&v213;
    v214 = (WTF *)&v215;
    std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v214, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
  }
  ready = JSC::JITWorklist::completeAllReadyPlansForVM(JSC::theGlobalJITWorklist, v11, *(_QWORD *)(v10 + 56), 1);
  v158 = *(_QWORD *)(v10 + 120);
  if (v158 && *(_BYTE *)(v158 + 12) == 3)
  {
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<char [88],char [2]>("    Code was already compiled.", "\n");
    JSC::CodeBlock::jitSoon((JSC::CodeBlock *)v10);
LABEL_443:
    --*(_DWORD *)(v11 + 916);
    goto LABEL_444;
  }
  if (ready)
    goto LABEL_487;
  v192 = (JSC::JITPlan *)WTF::fastMalloc((WTF *)0x50);
  v193 = (JSC::JITWorklist *)JSC::BaselineJITPlan::BaselineJITPlan((uint64_t)v192, (JSC::CodeBlock *)v10);
  v194 = JSC::JITWorklist::ensureGlobalWorklist(v193);
  v211 = v192;
  JSC::JITWorklist::enqueue(v194, &v211, v195, v196, v197, v198, v199, v200);
  v201 = (unsigned int *)v211;
  v211 = 0;
  if (v201)
  {
    v206 = v201 + 2;
    do
    {
      v207 = __ldaxr(v206);
      v208 = v207 - 1;
    }
    while (__stlxr(v208, v206));
    if (!v208)
    {
      atomic_store(1u, v201 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v201 + 8))(v201);
    }
  }
  v202 = *(_QWORD *)(v10 + 120);
  if (!v202)
    goto LABEL_487;
  v203 = *(unsigned __int8 *)(v202 + 12);
  --*(_DWORD *)(v11 + 916);
  if (v203 != 3)
    return 0;
LABEL_444:
  v130 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 80);
  v131 = *(_QWORD *)v130;
  v132 = *(unsigned int *)(v130 + 12) + *(_QWORD *)v130;
  if (v131 > a2 || v132 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988298B0);
  }
  v134 = a2 - v131;
  v135 = *(JSC::Profiler::Database **)(*(_QWORD *)(v10 + 72) + 93016);
  if (v135)
  {
    v215 = off_1E3572250;
    v216 = v218;
    v217 = xmmword_199122F80;
    v218[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v215, "%s", "at ");
    v167 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v215[4])(&v215);
    WTF::PrintStream::printf(v167, "%s", "bc#");
    WTF::PrintStream::printf(v167, "%u", v134 & 0x3FFFFFFF);
    v215[5]((WTF::StringPrintStream *)&v215);
    v215[5]((WTF::StringPrintStream *)&v215);
    v176 = v216;
    v175 = v217;
    v214 = 0;
    if (v216)
    {
      if ((unint64_t)v217 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x198829C34);
      }
      if ((_QWORD)v217 == -17)
      {
        __break(0xC471u);
        JUMPOUT(0x198829C3CLL);
      }
      v177 = (_QWORD *)WTF::fastMalloc((WTF *)(v217 + 17));
      *(_DWORD *)v177 = 1;
      v177[1] = v175;
      v214 = (WTF *)v177;
      v178 = v177 + 2;
      memcpy(v177 + 2, v176, v175);
      *((_BYTE *)v178 + v175) = 0;
      v179 = (unint64_t)v216;
      if (v216 == v218)
        goto LABEL_502;
    }
    else
    {
      v179 = 0;
    }
    WTF::fastFree(v179, v168, v169, v170, v171, v172, v173, v174);
LABEL_502:
    JSC::Profiler::Database::logEvent(v135, v10, "osrEntry", &v214, v171, v172, v173, v174);
    v187 = v214;
    v214 = 0;
    if (v187)
    {
      if (*(_DWORD *)v187 == 1)
        WTF::fastFree((unint64_t)v187, v180, v181, v182, v183, v184, v185, v186);
      else
        --*(_DWORD *)v187;
    }
  }
  v136 = *(_QWORD *)(v10 + 120);
  if (!v136 || *(_BYTE *)(v136 + 12) != 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198829770);
  }
  v137 = *(_QWORD *)(v136 + 104);
  v138 = *(unsigned int *)(v136 + 112);
  if (v138 < 2)
  {
    v139 = 0;
    v54 = 0;
    if (v137)
      goto LABEL_461;
  }
  else
  {
    v139 = 0;
    v140 = 4 * v134;
    v141 = v137 + 8 * v138;
    while (1)
    {
      v142 = (v138 - 1) >> 1;
      v143 = *(_DWORD *)(v141 + 4 * (v142 + v139));
      if (v143 == v140)
        break;
      v138 -= v142 + 1;
      if (v143 <= v140)
      {
        v144 = v142 + 1;
      }
      else
      {
        v138 = v142;
        v144 = 0;
      }
      v139 += v144;
      if (v138 <= 1)
        goto LABEL_461;
    }
    v139 += v142;
LABEL_461:
    v54 = *(void (***)(WTF::StringPrintStream *__hidden))(v137 + 8 * v139);
  }
  v145 = *((_QWORD *)a1 + 2);
  if (v145)
  {
    v146 = *(_QWORD *)(v145 + 120);
    if (v146)
    {
      v147 = *(unsigned __int8 *)(v146 + 12);
      if (v147 == 3)
        return v54;
      if ((v147 - 4) < 2)
      {
        v148 = (unsigned int *)(v146 + 8);
        do
          v149 = __ldaxr(v148);
        while (__stlxr(v149 + 1, v148));
        (*(uint64_t (**)(uint64_t))(*(_QWORD *)v146 + 72))(v146);
        do
        {
          v150 = __ldaxr(v148);
          v151 = v150 - 1;
        }
        while (__stlxr(v151, v148));
        if (!v151)
        {
          atomic_store(1u, (unsigned int *)(v146 + 8));
          (*(void (**)(uint64_t))(*(_QWORD *)v146 + 32))(v146);
        }
        return v54;
      }
      if (v147 == 2)
        return v54;
    }
    __break(0xC471u);
    JUMPOUT(0x198829B00);
  }
  return v54;
}

uint64_t JSC::JITCodeMap::find(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 < 2)
  {
    v3 = 0;
    v8 = 0;
    if (!a1)
      return v8;
  }
  else
  {
    v3 = 0;
    v4 = a2;
    while (1)
    {
      v5 = v4 - 1;
      v6 = *(_DWORD *)(a1 + 8 * a2 + 4 * (v3 + ((v4 - 1) >> 1)));
      if (v6 == a3)
        break;
      v4 -= (v5 >> 1) + 1;
      if (v6 <= a3)
      {
        v7 = (v5 >> 1) + 1;
      }
      else
      {
        v4 = v5 >> 1;
        v7 = 0;
      }
      v3 += v7;
      if (v4 <= 1)
        return *(_QWORD *)(a1 + 8 * v3);
    }
    v3 += (v4 - 1) >> 1;
  }
  return *(_QWORD *)(a1 + 8 * v3);
}

unint64_t llint_replace(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  void *i;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t *v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t (*v106)(JSC::JSString *);
  unsigned int *v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint8x8_t v111;
  unsigned int *v112;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  unint64_t v117;
  int ready;
  uint64_t v119;
  uint64_t (*v120)(JSC::JSString *);
  JSC::JITWorklist *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t j;
  uint64_t v136;
  uint64_t ValueProfileForBytecodeIndex;
  unint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char v149;
  uint64_t (**v150)(JSC::JSString *);
  uint64_t (*v151)(JSC::JSString *);

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(v4 + 40) = a1;
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::CodeBlock,char [41],JSC::ExecutionCounter<(JSC::CountingVariant)0>,char [2]>(v3, *(_QWORD *)(v3 + 56) + 168);
  if (dword_1ECF4C2B0 >= 2)
  {
    v13 = *(_QWORD *)(v3 + 56);
    v38 = *(_DWORD *)(*(_QWORD *)(v13 + 80) + 12);
    if (qword_1ECF4C2C0 > v38 || HIDWORD(qword_1ECF4C2C0) < v38)
    {
      if (dword_1ECF4C2B0 != 2)
        goto LABEL_4;
    }
    else if (dword_1ECF4C2B0 == 2)
    {
      goto LABEL_4;
    }
LABEL_92:
    *(_DWORD *)(v13 + 176) = 0x7FFFFFFF;
    *(_QWORD *)(v13 + 168) = 0x80000000;
    return a2;
  }
LABEL_4:
  v5 = atomic_load(&qword_1ECF58D78);
  if (v5 != -1)
  {
    v151 = (uint64_t (*)(JSC::JSString *))&v149;
    v150 = &v151;
    std::__call_once(&qword_1ECF58D78, &v150, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::ensureGlobalJITAllowlist(void)::$_0 &&>>);
  }
  v6 = JSC::FunctionAllowlist::contains((JSC::FunctionAllowlist *)&unk_1ECF58D80, (JSC::CodeBlock *)v3);
  v13 = *(_QWORD *)(v3 + 56);
  if (!v6 || !BYTE2(dword_1ECF4C240))
    goto LABEL_92;
  ++*(_DWORD *)(v4 + 916);
  v14 = *(unsigned __int16 *)(v13 + 28) | ((unint64_t)*(unsigned __int8 *)(v13 + 30) << 16);
  v15 = *(unsigned int **)(v3 + 152);
  v16 = qword_1ECF4C080;
  v17 = 0;
  v18 = (uint64_t *)(v15 + 6);
  if ((*(_WORD *)(v13 + 28) & 1) == 0)
  {
    if (!v15)
      goto LABEL_89;
LABEL_10:
    for (i = (void *)*v15; ; i = 0)
    {
      if (v17 >= (unint64_t)i)
        goto LABEL_202;
      if (v17 >= *v15)
        goto LABEL_268;
      v20 = *(v18 - 2);
      if (!v20)
      {
        v21 = 0;
        v22 = *(v18 - 1);
        if (!v22)
          goto LABEL_15;
        goto LABEL_32;
      }
      if (v20 >= 0xFFFE000000000000)
      {
        if ((v20 & 0xFFFFFFFE) != 0)
          v21 = 0x200000000;
        else
          v21 = 0x100000000;
      }
      else if (v20 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v12 = v20 - 0x2000000000000;
        v36 = (uint64_t)COERCE_DOUBLE(v20 - 0x2000000000000);
        if ((double)(uint64_t)v12 != v12)
          goto LABEL_73;
        if (v36)
        {
          if ((unint64_t)(v36 + 0x8000000000000) >> 52)
            goto LABEL_73;
        }
        else if ((uint64_t)v20 < 0x2000000000000)
        {
LABEL_73:
          v21 = 0x2000000000;
          goto LABEL_31;
        }
        v21 = 0x1000000000;
      }
      else
      {
        v26 = v20 & 0xFFFE000000000002;
        v27 = v20 >> 36;
        v28 = (v20 & 0xFFFFFFFFFLL) != 0 && v27 == 0;
        v9 = v28;
        if (v16 <= v20 && (v9 & 1) != 0)
        {
          if (v26)
          {
            if ((v20 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v21 = 0x10000000000;
            else
              v21 = 0x20000000000;
          }
          else
          {
            v29 = *(unsigned __int8 *)(v20 + 5);
            if (v29 != 2)
            {
              v21 = JSC::speculatedTypeMapping[v29];
              goto LABEL_31;
            }
            v34 = *(_QWORD *)(v20 + 8);
            if (!v34)
              goto LABEL_76;
            v21 = 805306368;
            if ((v34 & 1) != 0)
              goto LABEL_31;
            if (v34 < v16)
            {
              v21 = 0;
            }
            else
            {
              v21 = 0;
              if (!(v34 >> 36) && (v34 & 0xFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)(v34 + 16) & 0x10) != 0)
                {
                  v21 = 0x10000000;
                  goto LABEL_31;
                }
LABEL_76:
                v21 = 805306368;
              }
            }
          }
        }
        else
        {
          v10 = v14;
          v9 = a2;
          if (v26)
          {
            v21 = 0x20000000000;
            if ((v20 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v21 = 0x10000000000;
          }
          else
          {
            if (v16 > v20)
              goto LABEL_134;
            v21 = 0;
            if (!v27 && (v20 & 0xFFFFFFFFFLL) != 0)
            {
              v39 = *(unsigned __int8 *)(v20 + 5);
              if (v39 == 2)
              {
                v41 = *(_QWORD *)(v20 + 8);
                v21 = 805306368;
                if (v41 && (v41 & 1) == 0)
                {
                  if (v41 < v16)
                  {
LABEL_134:
                    v21 = 0;
                    goto LABEL_31;
                  }
                  v21 = 0;
                  if (!(v41 >> 36) && (v41 & 0xFFFFFFFFFLL) != 0)
                  {
                    if ((*(_BYTE *)(v41 + 16) & 0x10) != 0)
                      v21 = 0x10000000;
                    else
                      v21 = 805306368;
                  }
                }
              }
              else
              {
                v21 = JSC::speculatedTypeMapping[v39];
              }
            }
          }
        }
      }
LABEL_31:
      *(v18 - 2) = 0;
      v22 = *(v18 - 1);
      if (!v22)
        goto LABEL_15;
LABEL_32:
      if (v22 >= 0xFFFE000000000000)
      {
        if ((v22 & 0xFFFFFFFE) != 0)
          v33 = 0x200000000;
        else
          v33 = 0x100000000;
        goto LABEL_45;
      }
      if (v22 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v12 = v22 - 0x2000000000000;
        v37 = (uint64_t)COERCE_DOUBLE(v22 - 0x2000000000000);
        if ((double)(uint64_t)v12 == v12)
        {
          if (v37)
          {
            if (!((unint64_t)(v37 + 0x8000000000000) >> 52))
              goto LABEL_83;
          }
          else if ((uint64_t)v22 >= 0x2000000000000)
          {
LABEL_83:
            v33 = 0x1000000000;
            goto LABEL_45;
          }
        }
        v33 = 0x2000000000;
      }
      else
      {
        v30 = v22 & 0xFFFE000000000002;
        v9 = v22 >> 36;
        v10 = (v22 & 0xFFFFFFFFFLL) != 0 && v9 == 0;
        if (v16 <= v22 && (v10 & 1) != 0)
        {
          if (v30)
          {
            if ((v22 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v33 = 0x10000000000;
            else
              v33 = 0x20000000000;
            goto LABEL_45;
          }
          v32 = *(unsigned __int8 *)(v22 + 5);
          if (v32 == 2)
          {
            v35 = *(_QWORD *)(v22 + 8);
            if (!v35)
              goto LABEL_77;
            v33 = 805306368;
            if ((v35 & 1) == 0)
            {
              if (v35 < v16)
              {
                v33 = 0;
                goto LABEL_45;
              }
              v33 = 0;
              v9 = v35 >> 36;
              if (v35 >> 36)
                goto LABEL_45;
              v9 = v35 & 0xFFFFFFFFFLL;
              if ((v35 & 0xFFFFFFFFFLL) == 0)
                goto LABEL_45;
              if ((*(_BYTE *)(v35 + 16) & 0x10) == 0)
              {
LABEL_77:
                v33 = 805306368;
                goto LABEL_45;
              }
              v33 = 0x10000000;
            }
          }
          else
          {
            v33 = JSC::speculatedTypeMapping[v32];
          }
        }
        else
        {
          v11 = v14;
          v10 = a2;
          if (v30)
          {
            v33 = 0x20000000000;
            if ((v22 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v33 = 0x10000000000;
            goto LABEL_45;
          }
          if (v16 <= v22)
          {
            v33 = 0;
            if (v9)
              goto LABEL_45;
            v9 = v22 & 0xFFFFFFFFFLL;
            if ((v22 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_45;
            v40 = *(unsigned __int8 *)(v22 + 5);
            if (v40 != 2)
            {
              v33 = JSC::speculatedTypeMapping[v40];
              goto LABEL_45;
            }
            v42 = *(_QWORD *)(v22 + 8);
            v33 = 805306368;
            if (!v42 || (v42 & 1) != 0)
              goto LABEL_45;
            if (v42 >= v16)
            {
              v33 = 0;
              v9 = v42 >> 36;
              if (!(v42 >> 36))
              {
                v9 = v42 & 0xFFFFFFFFFLL;
                if ((v42 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v42 + 16) & 0x10) != 0)
                    v33 = 0x10000000;
                  else
                    v33 = 805306368;
                }
              }
              goto LABEL_45;
            }
          }
          v33 = 0;
        }
      }
LABEL_45:
      v21 |= v33;
      *(v18 - 1) = 0;
LABEL_15:
      v23 = *v18 | v21;
      *v18 = v23;
      v24 = *(unsigned int **)(v13 + 184);
      if (v17 >= *v24)
      {
        __break(0xC471u);
        JUMPOUT(0x19882A03CLL);
      }
      v7 = (uint64_t)&v24[2 * v17];
      v8 = *(_QWORD *)(v7 + 8);
      v25 = v8 | v23;
      *v18 = v25;
      v18 += 3;
      *(_QWORD *)(v7 + 8) = v25;
      ++v17;
      if (v15)
        goto LABEL_10;
LABEL_89:
      ;
    }
  }
  while (1)
  {
    i = v15 ? (void *)*v15 : 0;
    if (v17 >= (unint64_t)i)
      break;
    if (v17 >= *v15)
    {
LABEL_268:
      __break(0xC471u);
      JUMPOUT(0x19882A6A8);
    }
    v45 = *(v18 - 2);
    if (!v45)
    {
      v44 = 0;
      v8 = *(v18 - 1);
      if (v8)
        goto LABEL_147;
      goto LABEL_140;
    }
    if (v45 >= 0xFFFE000000000000)
    {
      if ((v45 & 0xFFFFFFFE) != 0)
        v44 = 0x200000000;
      else
        v44 = 0x100000000;
    }
    else if (v45 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v12 = v45 - 0x2000000000000;
      v55 = (uint64_t)COERCE_DOUBLE(v45 - 0x2000000000000);
      if ((double)(uint64_t)v12 != v12)
        goto LABEL_201;
      if (v55)
      {
        if ((unint64_t)(v55 + 0x8000000000000) >> 52)
          goto LABEL_201;
      }
      else if ((uint64_t)v45 < 0x2000000000000)
      {
LABEL_201:
        v44 = 0x2000000000;
        goto LABEL_173;
      }
      v44 = 0x1000000000;
    }
    else
    {
      v49 = v45 & 0xFFFE000000000002;
      v50 = v45 >> 36;
      v9 = (v45 & 0xFFFFFFFFFLL) != 0 && v50 == 0;
      if (v16 <= v45 && (v9 & 1) != 0)
      {
        if (v49)
        {
          if ((v45 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v44 = 0x10000000000;
          else
            v44 = 0x20000000000;
        }
        else
        {
          v52 = *(unsigned __int8 *)(v45 + 5);
          if (v52 != 2)
          {
            v44 = JSC::speculatedTypeMapping[v52];
            goto LABEL_173;
          }
          v53 = *(_QWORD *)(v45 + 8);
          if (!v53)
            goto LABEL_261;
          v44 = 805306368;
          if ((v53 & 1) != 0)
            goto LABEL_173;
          if (v53 < v16)
          {
            v44 = 0;
          }
          else
          {
            v44 = 0;
            if (!(v53 >> 36) && (v53 & 0xFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)(v53 + 16) & 0x10) != 0)
              {
                v44 = 0x10000000;
                goto LABEL_173;
              }
LABEL_261:
              v44 = 805306368;
            }
          }
        }
      }
      else
      {
        v10 = v14;
        v9 = a2;
        if (v49)
        {
          v44 = 0x20000000000;
          if ((v45 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v44 = 0x10000000000;
        }
        else
        {
          if (v16 > v45)
            goto LABEL_334;
          v44 = 0;
          if (!v50 && (v45 & 0xFFFFFFFFFLL) != 0)
          {
            v86 = *(unsigned __int8 *)(v45 + 5);
            if (v86 == 2)
            {
              v87 = *(_QWORD *)(v45 + 8);
              v44 = 805306368;
              if (v87 && (v87 & 1) == 0)
              {
                if (v87 < v16)
                {
LABEL_334:
                  v44 = 0;
                  goto LABEL_173;
                }
                v44 = 0;
                if (!(v87 >> 36) && (v87 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v87 + 16) & 0x10) != 0)
                    v44 = 0x10000000;
                  else
                    v44 = 805306368;
                }
              }
            }
            else
            {
              v44 = JSC::speculatedTypeMapping[v86];
            }
          }
        }
      }
    }
LABEL_173:
    *(v18 - 2) = 0;
    v8 = *(v18 - 1);
    if (v8)
    {
LABEL_147:
      if (v8 >= 0xFFFE000000000000)
      {
        if ((v8 & 0xFFFFFFFE) != 0)
          v43 = 0x200000000;
        else
          v43 = 0x100000000;
        goto LABEL_139;
      }
      if (v8 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v46 = v8 & 0xFFFE000000000002;
        v9 = v8 >> 36;
        v10 = (v8 & 0xFFFFFFFFFLL) != 0 && v9 == 0;
        if (v16 <= v8 && (v10 & 1) != 0)
        {
          if (v46)
          {
            if ((v8 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v43 = 0x10000000000;
            else
              v43 = 0x20000000000;
            goto LABEL_139;
          }
          v48 = *(unsigned __int8 *)(v8 + 5);
          if (v48 == 2)
          {
            v8 = *(_QWORD *)(v8 + 8);
            if (v8)
            {
              v43 = 805306368;
              if ((v8 & 1) != 0)
                goto LABEL_139;
              if (v8 < v16)
              {
                v43 = 0;
                goto LABEL_139;
              }
              v43 = 0;
              v9 = v8 >> 36;
              if (v8 >> 36)
                goto LABEL_139;
              v9 = v8 & 0xFFFFFFFFFLL;
              if ((v8 & 0xFFFFFFFFFLL) == 0)
                goto LABEL_139;
              if ((*(_BYTE *)(v8 + 16) & 0x10) != 0)
              {
                v43 = 0x10000000;
                goto LABEL_139;
              }
            }
            v43 = 805306368;
            goto LABEL_139;
          }
          v43 = JSC::speculatedTypeMapping[v48];
        }
        else
        {
          v11 = v14;
          v10 = a2;
          if (v46)
          {
            v28 = (v8 & 0xFFFFFFFFFFFFFFFELL) == 6;
            v43 = 0x20000000000;
            v8 = 0x10000000000;
            if (v28)
              v43 = 0x10000000000;
            goto LABEL_139;
          }
          if (v16 <= v8)
          {
            v43 = 0;
            if (v9)
              goto LABEL_139;
            v9 = v8 & 0xFFFFFFFFFLL;
            if ((v8 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_139;
            v85 = *(unsigned __int8 *)(v8 + 5);
            if (v85 != 2)
            {
              v43 = JSC::speculatedTypeMapping[v85];
              goto LABEL_139;
            }
            v8 = *(_QWORD *)(v8 + 8);
            v43 = 805306368;
            if (!v8 || (v8 & 1) != 0)
              goto LABEL_139;
            if (v8 >= v16)
            {
              v43 = 0;
              v9 = v8 >> 36;
              if (!(v8 >> 36))
              {
                v9 = v8 & 0xFFFFFFFFFLL;
                if ((v8 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v8 + 16) & 0x10) != 0)
                    v43 = 0x10000000;
                  else
                    v43 = 805306368;
                }
              }
              goto LABEL_139;
            }
          }
          v43 = 0;
        }
LABEL_139:
        v44 |= v43;
        *(v18 - 1) = 0;
        goto LABEL_140;
      }
      *(_QWORD *)&v12 = v8 - 0x2000000000000;
      v54 = (uint64_t)COERCE_DOUBLE(v8 - 0x2000000000000);
      if ((double)(uint64_t)v12 != v12)
      {
LABEL_199:
        v43 = 0x2000000000;
        goto LABEL_139;
      }
      if (v54)
      {
        if ((unint64_t)(v54 + 0x8000000000000) >> 52)
          goto LABEL_199;
      }
      else if ((uint64_t)v8 < 0x2000000000000)
      {
        goto LABEL_199;
      }
      v43 = 0x1000000000;
      goto LABEL_139;
    }
LABEL_140:
    v7 = *v18;
    *v18 |= v44;
    v18 += 3;
    ++v17;
  }
LABEL_202:
  v56 = *(_QWORD *)(v3 + 136);
  if (!v56)
    goto LABEL_429;
  v148 = a2;
  v57 = *(_QWORD *)(v56 - 16);
  do
    v58 = __ldaxr((unsigned int *)v57);
  while (__stlxr(v58 + 1, (unsigned int *)v57));
  v59 = -*(_DWORD *)(v57 + 8);
  do
  {
    v60 = __ldaxr((unsigned int *)v57);
    v61 = v60 - 1;
  }
  while (__stlxr(v61, (unsigned int *)v57));
  if (!v61)
  {
    v147 = v14;
    atomic_store(1u, (unsigned int *)v57);
    if ((*(_BYTE *)(v57 + 4) & 1) != 0)
      WTF::fastFree(*(_QWORD *)(v57 + 16), i, v7, v8, v9, v10, v14, v11);
    WTF::fastFree(v57, i, v7, v8, v9, v10, v14, v11);
    v14 = v147;
  }
  if (v59 < 0)
  {
    v67 = v59;
    if ((v14 & 1) == 0)
    {
      v68 = *(_DWORD **)(v13 + 184);
      if (*v68 <= v17)
        v69 = v17;
      else
        v69 = *v68;
      v70 = (unint64_t *)&v68[2 * v17 + 2];
      v71 = qword_1ECF4C080;
      v72 = v69 - v17;
      v73 = (unint64_t *)(v56 - 32);
      v7 = 0x10000000000;
      while (1)
      {
        v10 = *v73;
        v74 = v73[1];
        v75 = *v73 | v74;
        if (!v75)
        {
          v74 = 0;
          goto LABEL_238;
        }
        if (!v10)
        {
          v75 = 0;
          goto LABEL_238;
        }
        if (v10 >= 0xFFFE000000000000)
        {
          if ((v10 & 0xFFFFFFFE) != 0)
            v75 = 0x200000000;
          else
            v75 = 0x100000000;
          goto LABEL_236;
        }
        if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v12 = v10 - 0x2000000000000;
          v81 = (uint64_t)COERCE_DOUBLE(v10 - 0x2000000000000);
          if ((double)(uint64_t)v12 == v12)
          {
            if (v81)
            {
              if (!((unint64_t)(v81 + 0x8000000000000) >> 52))
                goto LABEL_276;
            }
            else if ((uint64_t)v10 >= 0x2000000000000)
            {
LABEL_276:
              v75 = 0x1000000000;
              goto LABEL_236;
            }
          }
          v75 = 0x2000000000;
        }
        else
        {
          v76 = v10 & 0xFFFE000000000002;
          v14 = v10 >> 36;
          v11 = (v10 & 0xFFFFFFFFFLL) != 0 && v14 == 0;
          if (v71 <= v10 && v11)
          {
            if (v76)
            {
              if ((v10 & 0xFFFFFFFFFFFFFFFELL) == 6)
                v75 = 0x10000000000;
              else
                v75 = 0x20000000000;
              goto LABEL_236;
            }
            v78 = *(unsigned __int8 *)(v10 + 5);
            if (v78 != 2)
              goto LABEL_235;
            v10 = *(_QWORD *)(v10 + 8);
            if (!v10)
              goto LABEL_273;
            v75 = 805306368;
          }
          else
          {
            if (v76)
            {
              v28 = (v10 & 0xFFFFFFFFFFFFFFFELL) == 6;
              v75 = 0x20000000000;
              v10 = 0x10000000000;
              if (v28)
                v75 = 0x10000000000;
              goto LABEL_236;
            }
            if (v71 > v10)
            {
LABEL_307:
              v75 = 0;
              goto LABEL_236;
            }
            v75 = 0;
            if (v14)
              goto LABEL_236;
            v14 = v10 & 0xFFFFFFFFFLL;
            if ((v10 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_236;
            v78 = *(unsigned __int8 *)(v10 + 5);
            if (v78 != 2)
            {
LABEL_235:
              v75 = JSC::speculatedTypeMapping[v78];
              goto LABEL_236;
            }
            v10 = *(_QWORD *)(v10 + 8);
            v75 = 805306368;
            if (!v10)
              goto LABEL_236;
          }
          if ((v10 & 1) == 0)
          {
            if (v10 < v71)
              goto LABEL_307;
            v75 = 0;
            v14 = v10 >> 36;
            if (v10 >> 36)
              goto LABEL_236;
            v14 = v10 & 0xFFFFFFFFFLL;
            if ((v10 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_236;
            if ((*(_BYTE *)(v10 + 16) & 0x10) == 0)
            {
LABEL_273:
              v75 = 805306368;
              goto LABEL_236;
            }
            v75 = 0x10000000;
          }
        }
LABEL_236:
        *v73 = 0;
LABEL_238:
        v79 = v75 | v74;
        v73[1] = v79;
        if (!v72)
        {
          __break(0xC471u);
          JUMPOUT(0x19882A70CLL);
        }
        v9 = *v70;
        v8 = *v70 | v79;
        v73[1] = v8;
        *v70++ = v8;
        --v72;
        v73 -= 2;
        if (__CFADD__(v67++, 1))
          goto LABEL_209;
      }
    }
    v82 = 0;
    v83 = (unint64_t *)(v56 - 32);
    v84 = qword_1ECF4C080;
    while (1)
    {
      v9 = *v83;
      v88 = v83[1];
      v8 = *v83 | v88;
      if (v8)
        break;
      v88 = 0;
LABEL_336:
      v7 = v8 | v88;
      v83[1] = v7;
      --v82;
      v83 -= 2;
      if (v82 <= v59)
        goto LABEL_209;
    }
    if (!v9)
    {
      v8 = 0;
      goto LABEL_336;
    }
    if (v9 >= 0xFFFE000000000000)
    {
      if ((v9 & 0xFFFFFFFE) != 0)
        v8 = 0x200000000;
      else
        v8 = 0x100000000;
      goto LABEL_352;
    }
    if (v9 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v89 = v9 & 0xFFFE000000000002;
      v10 = v9 >> 36;
      v14 = (v9 & 0xFFFFFFFFFLL) != 0 && v10 == 0;
      if (v84 <= v9 && (v14 & 1) != 0)
      {
        if (v89)
        {
          if ((v9 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v8 = 0x10000000000;
          else
            v8 = 0x20000000000;
          goto LABEL_352;
        }
        v91 = *(unsigned __int8 *)(v9 + 5);
        if (v91 != 2)
          goto LABEL_351;
        v9 = *(_QWORD *)(v9 + 8);
        if (!v9)
        {
LABEL_370:
          v8 = 805306368;
          goto LABEL_352;
        }
        v8 = 805306368;
      }
      else
      {
        if (v89)
        {
          v28 = (v9 & 0xFFFFFFFFFFFFFFFELL) == 6;
          v8 = 0x20000000000;
          v9 = 0x10000000000;
          if (v28)
            v8 = 0x10000000000;
          goto LABEL_352;
        }
        if (v84 > v9)
          goto LABEL_383;
        v8 = 0;
        if (v10)
          goto LABEL_352;
        v10 = v9 & 0xFFFFFFFFFLL;
        if ((v9 & 0xFFFFFFFFFLL) == 0)
          goto LABEL_352;
        v91 = *(unsigned __int8 *)(v9 + 5);
        if (v91 != 2)
        {
LABEL_351:
          v8 = JSC::speculatedTypeMapping[v91];
LABEL_352:
          *v83 = 0;
          goto LABEL_336;
        }
        v9 = *(_QWORD *)(v9 + 8);
        v8 = 805306368;
        if (!v9)
          goto LABEL_352;
      }
      if ((v9 & 1) != 0)
        goto LABEL_352;
      if (v9 >= v84)
      {
        v8 = 0;
        v10 = v9 >> 36;
        if (v9 >> 36)
          goto LABEL_352;
        v10 = v9 & 0xFFFFFFFFFLL;
        if ((v9 & 0xFFFFFFFFFLL) == 0)
          goto LABEL_352;
        if ((*(_BYTE *)(v9 + 16) & 0x10) != 0)
        {
          v8 = 0x10000000;
          goto LABEL_352;
        }
        goto LABEL_370;
      }
LABEL_383:
      v8 = 0;
      goto LABEL_352;
    }
    *(_QWORD *)&v12 = v9 - 0x2000000000000;
    v92 = (uint64_t)COERCE_DOUBLE(v9 - 0x2000000000000);
    if ((double)(uint64_t)v12 != v12)
    {
LABEL_369:
      v8 = 0x2000000000;
      goto LABEL_352;
    }
    if (v92)
    {
      if ((unint64_t)(v92 + 0x8000000000000) >> 52)
        goto LABEL_369;
    }
    else if ((uint64_t)v9 < 0x2000000000000)
    {
      goto LABEL_369;
    }
    v8 = 0x1000000000;
    goto LABEL_352;
  }
LABEL_209:
  v62 = *(_QWORD *)(v3 + 136);
  a2 = v148;
  if (v62)
  {
    v63 = *(unsigned __int16 *)(v62 + 30);
    if (!*(_WORD *)(v62 + 30))
      v63 = *(_DWORD *)(v62 + 156);
    v64 = (uint64_t *)((v62 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
    v65 = *(unsigned __int16 *)(v62 + 32);
    if (!*(_WORD *)(v62 + 32))
      v65 = *(_DWORD *)(v62 + 160);
    v66 = v62 + v65;
    if (v66 > (unint64_t)v64)
    {
      while (1)
      {
        v7 = *v64;
        if (*v64)
        {
          v93 = *(unsigned int *)v7;
          if ((_DWORD)v93)
            break;
        }
LABEL_387:
        if ((unint64_t)++v64 >= v66)
          goto LABEL_429;
      }
      v94 = qword_1ECF4C080;
      v7 += 16;
      while (2)
      {
        while (1)
        {
          v95 = *(_QWORD *)(v7 - 8);
          if (v95)
            break;
          v9 = *(_QWORD *)v7;
          v8 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v7;
          v7 += 24;
          if (!--v93)
            goto LABEL_387;
        }
        if (v95 >= 0xFFFE000000000000)
        {
          if ((v95 & 0xFFFFFFFE) != 0)
            v99 = 0x200000000;
          else
            v99 = 0x100000000;
          goto LABEL_406;
        }
        if (v95 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          v96 = v95 & 0xFFFE000000000002;
          v10 = v95 >> 36;
          v14 = (v95 & 0xFFFFFFFFFLL) != 0 && v10 == 0;
          if (v94 <= v95 && (v14 & 1) != 0)
          {
            if (v96)
            {
              if ((v95 & 0xFFFFFFFFFFFFFFFELL) == 6)
                v99 = 0x10000000000;
              else
                v99 = 0x20000000000;
            }
            else
            {
              v98 = *(unsigned __int8 *)(v95 + 5);
              if (v98 != 2)
              {
                v99 = JSC::speculatedTypeMapping[v98];
                goto LABEL_406;
              }
              v100 = *(_QWORD *)(v95 + 8);
              if (!v100)
                goto LABEL_423;
              v99 = 805306368;
              if ((v100 & 1) != 0)
                goto LABEL_406;
              if (v100 < v94)
              {
                v99 = 0;
              }
              else
              {
                v99 = 0;
                v10 = v100 >> 36;
                if (!(v100 >> 36))
                {
                  v10 = v100 & 0xFFFFFFFFFLL;
                  if ((v100 & 0xFFFFFFFFFLL) != 0)
                  {
                    if ((*(_BYTE *)(v100 + 16) & 0x10) != 0)
                    {
                      v99 = 0x10000000;
                      goto LABEL_406;
                    }
LABEL_423:
                    v99 = 805306368;
                  }
                }
              }
            }
LABEL_406:
            *(_QWORD *)(v7 - 8) = 0;
            v9 = *(_QWORD *)v7;
            v8 = *(_QWORD *)v7 | v99;
            *(_QWORD *)v7 = v8;
            v7 += 24;
            if (!--v93)
              goto LABEL_387;
            continue;
          }
          if (v96)
          {
            v99 = 0x20000000000;
            if ((v95 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v99 = 0x10000000000;
            goto LABEL_477;
          }
          if (v94 <= v95)
          {
            v99 = 0;
            if (v10)
            {
LABEL_477:
              a2 = v148;
              goto LABEL_406;
            }
            v10 = v95 & 0xFFFFFFFFFLL;
            a2 = v148;
            if ((v95 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_406;
            v145 = *(unsigned __int8 *)(v95 + 5);
            if (v145 != 2)
            {
              v99 = JSC::speculatedTypeMapping[v145];
              goto LABEL_477;
            }
            v146 = *(_QWORD *)(v95 + 8);
            v99 = 805306368;
            if (!v146)
              goto LABEL_477;
            a2 = v148;
            if ((v146 & 1) != 0)
              goto LABEL_406;
            if (v146 >= v94)
            {
              v99 = 0;
              v10 = v146 >> 36;
              if (!(v146 >> 36))
              {
                v10 = v146 & 0xFFFFFFFFFLL;
                if ((v146 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v146 + 16) & 0x10) != 0)
                    v99 = 0x10000000;
                  else
                    v99 = 805306368;
                }
              }
              goto LABEL_477;
            }
          }
          v99 = 0;
          goto LABEL_477;
        }
        break;
      }
      *(_QWORD *)&v12 = v95 - 0x2000000000000;
      v101 = (uint64_t)COERCE_DOUBLE(v95 - 0x2000000000000);
      if ((double)(uint64_t)v12 != v12)
      {
LABEL_422:
        v99 = 0x2000000000;
        goto LABEL_406;
      }
      if (v101)
      {
        if ((unint64_t)(v101 + 0x8000000000000) >> 52)
          goto LABEL_422;
      }
      else if ((uint64_t)v95 < 0x2000000000000)
      {
        goto LABEL_422;
      }
      v99 = 0x1000000000;
      goto LABEL_406;
    }
  }
LABEL_429:
  v102 = *(uint64_t **)(v3 + 144);
  if (v102)
  {
    v133 = *v102;
    if (*v102)
    {
      v141 = 0;
      v142 = v102[1];
      do
      {
        v143 = (unint64_t *)(*(_QWORD *)(v142 + (v141 & 0xFFFFFFFFFFFFFFF8) + 8) + 32 * (v141 & 7));
        v144 = *v143;
        if (*v143)
        {
          v144 = JSC::speculationFromValue(v144);
          *v143 = 0;
        }
        v143[1] |= v144;
        ++v141;
      }
      while (v133 != v141);
    }
    v134 = v102[5];
    if (v134)
    {
      for (j = 0; j != v134; ++j)
      {
        v136 = *(_QWORD *)(v102[6] + (j & 0xFFFFFFFFFFFFFFF8) + 8) + 16 * (j & 7);
        ValueProfileForBytecodeIndex = JSC::CodeBlock::tryGetValueProfileForBytecodeIndex(v3, *(_DWORD *)v136, *(int8x8_t *)&v12);
        v140 = *(_QWORD *)(v136 + 8);
        v139 = (_QWORD *)(v136 + 8);
        v138 = v140;
        if (v140)
          *(_QWORD *)(ValueProfileForBytecodeIndex + 8) |= JSC::speculationFromValue(v138);
        *v139 = 0;
      }
    }
  }
  v103 = *(_QWORD *)(v3 + 120);
  if (v103)
  {
    v104 = *(unsigned __int8 *)(v103 + 12);
    v105 = *(_QWORD *)(v3 + 56);
    if (v104 != 3)
      goto LABEL_432;
    goto LABEL_444;
  }
  v105 = *(_QWORD *)(v3 + 56);
LABEL_432:
  v106 = *(uint64_t (**)(JSC::JSString *))(v105 + 32);
  if (v106)
  {
    v107 = (unsigned int *)((char *)v106 + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 + 1, v107));
    v151 = v106;
    JSC::CodeBlock::setupWithUnlinkedBaselineCode(v3, &v151, v7, v8, v9, v10, v14, v11);
    v112 = (unsigned int *)v151;
    v151 = 0;
    if (v112)
    {
      v114 = v112 + 2;
      do
      {
        v115 = __ldaxr(v114);
        v116 = v115 - 1;
      }
      while (__stlxr(v116, v114));
      if (!v116)
      {
        atomic_store(1u, v112 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v112 + 32))(v112);
      }
    }
    JSC::ScriptExecutable::installCode(*(_QWORD *)(v3 + 64), *(JSC::VM **)(v3 + 72), (JSC::CodeBlock *)v3, (*(unsigned __int16 *)(*(_QWORD *)(v3 + 56) + 28) >> 12) & 3, *(_DWORD *)(*(_QWORD *)(v3 + 56) + 20) >> 31, 0, v109, v110, v111);
    JSC::ExecutionCounter<(JSC::CountingVariant)0>::setNewThreshold(*(_QWORD *)(v3 + 56) + 168, 0, v3);
  }
  else
  {
LABEL_444:
    if ((JSC::ExecutionCounter<(JSC::CountingVariant)0>::checkIfThresholdCrossedAndSet((int *)(v105 + 168), v3) & 1) != 0)
    {
      v117 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
      if (v117 != -1)
      {
        v151 = (uint64_t (*)(JSC::JSString *))&v149;
        v150 = &v151;
        std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v150, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
      }
      ready = JSC::JITWorklist::completeAllReadyPlansForVM(JSC::theGlobalJITWorklist, v4, *(_QWORD *)(v3 + 56), 1);
      v119 = *(_QWORD *)(v3 + 120);
      if (v119 && *(_BYTE *)(v119 + 12) == 3)
      {
        if (BYTE1(qword_1ECF4C332))
          WTF::dataLog<char [88],char [2]>("    Code was already compiled.", "\n");
        JSC::CodeBlock::jitSoon((JSC::CodeBlock *)v3);
      }
      else if (!ready)
      {
        v120 = (uint64_t (*)(JSC::JSString *))WTF::fastMalloc((WTF *)0x50);
        v121 = (JSC::JITWorklist *)JSC::BaselineJITPlan::BaselineJITPlan((uint64_t)v120, (JSC::CodeBlock *)v3);
        v122 = JSC::JITWorklist::ensureGlobalWorklist(v121);
        v151 = v120;
        JSC::JITWorklist::enqueue(v122, (JSC::JITPlan **)&v151, v123, v124, v125, v126, v127, v128);
        v129 = (unsigned int *)v151;
        v151 = 0;
        if (v129)
        {
          v130 = v129 + 2;
          do
          {
            v131 = __ldaxr(v130);
            v132 = v131 - 1;
          }
          while (__stlxr(v132, v130));
          if (!v132)
          {
            atomic_store(1u, v129 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v129 + 8))(v129);
          }
        }
      }
    }
    else
    {
      JSC::VM::logEvent<JSC::LLInt::jitCompileAndSetHeuristics(JSC::VM&,JSC::CodeBlock *)::{lambda(void)#1}>(*(JSC::Profiler::Database **)(*(_QWORD *)(v3 + 72) + 93016), v3, v3);
      if (BYTE1(qword_1ECF4C332))
        WTF::dataLog<char [88],char [2]>("    JIT threshold should be lifted.", "\n");
    }
  }
  --*(_DWORD *)(v4 + 916);
  return a2;
}

