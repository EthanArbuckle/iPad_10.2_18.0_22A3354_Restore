void JSC::Yarr::createCharacterClass329(uint64_t *a1@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = (__int128 *)WTF::fastMalloc((WTF *)0x1C);
  *v3 = xmmword_19918BB8C;
  *(__int128 *)((char *)v3 + 12) = *(__int128 *)((char *)&xmmword_19918BB8C + 12);
  v4 = (__int128 *)WTF::fastMalloc((WTF *)0x1C);
  *v4 = xmmword_19918BBAC;
  *(__int128 *)((char *)v4 + 12) = *(__int128 *)((char *)&xmmword_19918BBAC + 12);
  v5 = (__int128 *)WTF::fastMalloc((WTF *)0x1C);
  *v5 = xmmword_19918BBCC;
  *(__int128 *)((char *)v5 + 12) = *(__int128 *)((char *)&xmmword_19918BBCC + 12);
  v6 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  v7 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v6 + 8) = 3;
  *(_QWORD *)v6 = v7;
  v8 = v7 + 16 * *(unsigned int *)(v6 + 12);
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 12) = 7;
  v9 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  *(_DWORD *)(v8 + 8) = 7;
  *(_QWORD *)v8 = v9;
  v10 = *v3;
  *(_OWORD *)((char *)v9 + 12) = *(__int128 *)((char *)v3 + 12);
  *v9 = v10;
  v11 = *(_DWORD *)(v6 + 12) + 1;
  *(_DWORD *)(v6 + 12) = v11;
  v12 = *(_QWORD *)v6 + 16 * v11;
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_DWORD *)(v12 + 12) = 7;
  v13 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  *(_DWORD *)(v12 + 8) = 7;
  *(_QWORD *)v12 = v13;
  v14 = *v4;
  *(_OWORD *)((char *)v13 + 12) = *(__int128 *)((char *)v4 + 12);
  *v13 = v14;
  v15 = *(_DWORD *)(v6 + 12) + 1;
  *(_DWORD *)(v6 + 12) = v15;
  v16 = *(_QWORD *)v6 + 16 * v15;
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  *(_DWORD *)(v16 + 12) = 7;
  v17 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  *(_DWORD *)(v16 + 8) = 7;
  *(_QWORD *)v16 = v17;
  v18 = *v5;
  *(_OWORD *)((char *)v17 + 12) = *(__int128 *)((char *)v5 + 12);
  *v17 = v18;
  ++*(_DWORD *)(v6 + 12);
  *(_OWORD *)(v6 + 73) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_BYTE *)(v6 + 89) = *(_BYTE *)(v6 + 89) & 0xF8 | 4;
  *a1 = v6;
  WTF::fastFree((unint64_t)v5, v19, v20, v21, v22, v23, v24, v25);
  WTF::fastFree((unint64_t)v4, v26, v27, v28, v29, v30, v31, v32);
  WTF::fastFree((unint64_t)v3, v33, v34, v35, v36, v37, v38, v39);
}

void JSC::Yarr::createCharacterClass330(JSC::Yarr *this, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t casual;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD v21[2];
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  _QWORD *v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  _QWORD *v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  _QWORD *v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  _QWORD *v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  _QWORD *v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  _QWORD *v368;
  uint64_t v369;
  _QWORD *v370;
  uint64_t v371;
  _QWORD *v372;
  uint64_t v373;
  _QWORD *v374;
  uint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  _QWORD *v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  _QWORD *v384;
  uint64_t v385;
  _QWORD *v386;
  uint64_t v387;
  _QWORD *v388;
  uint64_t v389;
  _QWORD *v390;
  uint64_t v391;
  _QWORD *v392;
  uint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  _QWORD *v396;
  uint64_t v397;
  _QWORD *v398;
  uint64_t v399;
  _QWORD *v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  _QWORD *v408;
  uint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  _QWORD *v412;
  uint64_t v413;
  _QWORD *v414;
  uint64_t v415;
  _QWORD *v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  _QWORD *v420;
  uint64_t v421;
  _QWORD *v422;
  uint64_t v423;
  _QWORD *v424;
  uint64_t v425;
  _QWORD *v426;
  uint64_t v427;
  _QWORD *v428;
  uint64_t v429;
  _QWORD *v430;
  uint64_t v431;
  _QWORD *v432;
  uint64_t v433;
  _QWORD *v434;
  uint64_t v435;
  _QWORD *v436;
  uint64_t v437;
  _QWORD *v438;
  uint64_t v439;
  _QWORD *v440;
  uint64_t v441;
  _QWORD *v442;
  uint64_t v443;
  _QWORD *v444;
  uint64_t v445;
  _QWORD *v446;
  uint64_t v447;
  _QWORD *v448;
  uint64_t v449;
  _QWORD *v450;
  uint64_t v451;
  _QWORD *v452;
  uint64_t v453;
  _QWORD *v454;
  uint64_t v455;
  _QWORD *v456;
  uint64_t v457;
  _QWORD *v458;
  uint64_t v459;
  _QWORD *v460;
  uint64_t v461;
  _QWORD *v462;
  uint64_t v463;
  _QWORD *v464;
  uint64_t v465;
  _QWORD *v466;
  uint64_t v467;
  _QWORD *v468;
  uint64_t v469;
  _QWORD *v470;
  uint64_t v471;
  _QWORD *v472;
  uint64_t v473;
  _QWORD *v474;
  uint64_t v475;
  _QWORD *v476;
  uint64_t v477;
  _QWORD *v478;
  uint64_t v479;
  _QWORD *v480;
  uint64_t v481;
  _QWORD *v482;
  uint64_t v483;
  _QWORD *v484;
  uint64_t v485;
  _QWORD *v486;
  uint64_t v487;
  _QWORD *v488;
  uint64_t v489;
  _QWORD *v490;
  uint64_t v491;
  _QWORD *v492;
  uint64_t v493;
  _QWORD *v494;
  uint64_t v495;
  _QWORD *v496;
  uint64_t v497;
  _QWORD *v498;
  uint64_t v499;
  _QWORD *v500;
  uint64_t v501;
  _QWORD *v502;
  uint64_t v503;
  _QWORD *v504;
  uint64_t v505;
  _QWORD *v506;
  uint64_t v507;
  _QWORD *v508;
  uint64_t v509;
  _QWORD *v510;
  uint64_t v511;
  _QWORD *v512;
  uint64_t v513;
  _QWORD *v514;
  uint64_t v515;
  _QWORD *v516;
  uint64_t v517;
  _QWORD *v518;
  uint64_t v519;
  _QWORD *v520;
  uint64_t v521;
  _QWORD *v522;
  uint64_t v523;
  _QWORD *v524;
  uint64_t v525;
  _QWORD *v526;
  uint64_t v527;
  _QWORD *v528;
  uint64_t v529;
  _QWORD *v530;
  uint64_t v531;
  _QWORD *v532;
  uint64_t v533;
  _QWORD *v534;
  uint64_t v535;
  _QWORD *v536;
  uint64_t v537;
  _QWORD *v538;
  uint64_t v539;
  _QWORD *v540;
  uint64_t v541;
  _QWORD *v542;
  uint64_t v543;
  _QWORD *v544;
  uint64_t v545;
  _QWORD *v546;
  uint64_t v547;
  _QWORD *v548;
  uint64_t v549;
  _QWORD *v550;
  uint64_t v551;
  _QWORD *v552;
  uint64_t v553;
  _QWORD *v554;
  uint64_t v555;
  _QWORD *v556;
  uint64_t v557;
  _QWORD *v558;
  uint64_t v559;
  _QWORD *v560;
  uint64_t v561;
  _QWORD *v562;
  uint64_t v563;
  _QWORD *v564;
  uint64_t v565;
  _QWORD *v566;
  uint64_t v567;
  _QWORD *v568;
  uint64_t v569;
  _QWORD *v570;
  uint64_t v571;
  _QWORD *v572;
  uint64_t v573;
  _QWORD *v574;
  uint64_t v575;
  _QWORD *v576;
  uint64_t v577;
  _QWORD *v578;
  uint64_t v579;
  _QWORD *v580;
  uint64_t v581;
  _QWORD *v582;
  uint64_t v583;
  _QWORD *v584;
  uint64_t v585;
  _QWORD *v586;
  uint64_t v587;
  _QWORD *v588;
  uint64_t v589;
  _QWORD *v590;
  uint64_t v591;
  _QWORD *v592;
  uint64_t v593;
  _QWORD *v594;
  uint64_t v595;
  _QWORD *v596;
  uint64_t v597;
  _QWORD *v598;
  uint64_t v599;
  _QWORD *v600;
  uint64_t v601;
  _QWORD *v602;
  uint64_t v603;
  _QWORD *v604;
  uint64_t v605;
  _QWORD *v606;
  uint64_t v607;
  _QWORD *v608;
  uint64_t v609;
  _QWORD *v610;
  uint64_t v611;
  _QWORD *v612;
  uint64_t v613;
  _QWORD *v614;
  uint64_t v615;
  _QWORD *v616;
  uint64_t v617;
  _QWORD *v618;
  uint64_t v619;
  _QWORD *v620;
  uint64_t v621;
  _QWORD *v622;
  uint64_t v623;
  _QWORD *v624;
  uint64_t v625;
  _QWORD *v626;
  uint64_t v627;
  _QWORD *v628;
  uint64_t v629;
  _QWORD *v630;
  uint64_t v631;
  _QWORD *v632;
  uint64_t v633;
  _QWORD *v634;
  uint64_t v635;
  _QWORD *v636;
  uint64_t v637;
  _QWORD *v638;
  uint64_t v639;
  _QWORD *v640;
  uint64_t v641;
  _QWORD *v642;
  uint64_t v643;
  _QWORD *v644;
  uint64_t v645;
  _QWORD *v646;
  uint64_t v647;
  _QWORD *v648;
  uint64_t v649;
  _QWORD *v650;
  uint64_t v651;
  _QWORD *v652;
  uint64_t v653;
  _QWORD *v654;
  uint64_t v655;
  _QWORD *v656;
  uint64_t v657;
  _QWORD *v658;
  uint64_t v659;
  _QWORD *v660;
  uint64_t v661;
  _QWORD *v662;
  uint64_t v663;
  _QWORD *v664;
  uint64_t v665;
  _QWORD *v666;
  uint64_t v667;
  _QWORD *v668;
  uint64_t v669;
  _QWORD *v670;
  uint64_t v671;
  _QWORD *v672;
  uint64_t v673;
  _QWORD *v674;
  uint64_t v675;
  _QWORD *v676;
  uint64_t v677;
  _QWORD *v678;
  uint64_t v679;
  _QWORD *v680;
  uint64_t v681;
  _QWORD *v682;
  uint64_t v683;
  _QWORD *v684;
  uint64_t v685;
  _QWORD *v686;
  uint64_t v687;
  _QWORD *v688;
  uint64_t v689;
  _QWORD *v690;
  uint64_t v691;
  _QWORD *v692;
  uint64_t v693;
  _QWORD *v694;
  uint64_t v695;
  _QWORD *v696;
  uint64_t v697;
  _QWORD *v698;
  uint64_t v699;
  _QWORD *v700;
  uint64_t v701;
  _QWORD *v702;
  uint64_t v703;
  _QWORD *v704;
  uint64_t v705;
  _QWORD *v706;
  uint64_t v707;
  _QWORD *v708;
  uint64_t v709;
  _QWORD *v710;
  uint64_t v711;
  _QWORD *v712;
  uint64_t v713;
  _QWORD *v714;
  uint64_t v715;
  _QWORD *v716;
  uint64_t v717;
  _QWORD *v718;
  uint64_t v719;
  _QWORD *v720;
  uint64_t v721;
  _QWORD *v722;
  uint64_t v723;
  _QWORD *v724;
  uint64_t v725;
  _QWORD *v726;
  uint64_t v727;
  _QWORD *v728;
  uint64_t v729;
  _QWORD *v730;
  uint64_t v731;
  _QWORD *v732;
  uint64_t v733;
  _QWORD *v734;
  uint64_t v735;
  _QWORD *v736;
  uint64_t v737;
  _QWORD *v738;
  uint64_t v739;
  _QWORD *v740;
  uint64_t v741;
  _QWORD *v742;
  uint64_t v743;
  _QWORD *v744;
  uint64_t v745;
  _QWORD *v746;
  uint64_t v747;
  _QWORD *v748;
  uint64_t v749;
  _QWORD *v750;
  uint64_t v751;
  _QWORD *v752;
  uint64_t v753;
  _QWORD *v754;
  uint64_t v755;
  _QWORD *v756;
  uint64_t v757;
  _QWORD *v758;
  uint64_t v759;
  _QWORD *v760;
  uint64_t v761;
  _QWORD *v762;
  uint64_t v763;
  _QWORD *v764;
  uint64_t v765;
  _QWORD *v766;
  uint64_t v767;
  _QWORD *v768;
  uint64_t v769;
  _QWORD *v770;
  uint64_t v771;
  _QWORD *v772;
  uint64_t v773;
  _QWORD *v774;
  uint64_t v775;
  _QWORD *v776;
  uint64_t v777;
  _QWORD *v778;
  uint64_t v779;
  _QWORD *v780;
  uint64_t v781;
  _QWORD *v782;
  uint64_t v783;
  _QWORD *v784;
  uint64_t v785;
  _QWORD *v786;
  uint64_t v787;
  _QWORD *v788;
  uint64_t v789;
  _QWORD *v790;
  uint64_t v791;
  _QWORD *v792;
  uint64_t v793;
  _QWORD *v794;
  uint64_t v795;
  _QWORD *v796;
  uint64_t v797;
  _QWORD *v798;
  uint64_t v799;
  _QWORD *v800;
  uint64_t v801;
  _QWORD *v802;
  uint64_t v803;
  _QWORD *v804;
  uint64_t v805;
  _QWORD *v806;
  uint64_t v807;
  _QWORD *v808;
  uint64_t v809;
  _QWORD *v810;
  uint64_t v811;
  _QWORD *v812;
  uint64_t v813;
  _QWORD *v814;
  uint64_t v815;
  _QWORD *v816;
  uint64_t v817;
  _QWORD *v818;
  uint64_t v819;
  _QWORD *v820;
  uint64_t v821;
  _QWORD *v822;
  uint64_t v823;
  _QWORD *v824;
  uint64_t v825;
  _QWORD *v826;
  uint64_t v827;
  _QWORD *v828;
  uint64_t v829;
  _QWORD *v830;
  uint64_t v831;
  _QWORD *v832;
  uint64_t v833;
  _QWORD *v834;
  uint64_t v835;
  _QWORD *v836;
  uint64_t v837;
  _QWORD *v838;
  uint64_t v839;
  _QWORD *v840;
  uint64_t v841;
  _QWORD *v842;
  uint64_t v843;
  _QWORD *v844;
  uint64_t v845;
  _QWORD *v846;
  uint64_t v847;
  _QWORD *v848;
  uint64_t v849;
  _QWORD *v850;
  uint64_t v851;
  _QWORD *v852;
  uint64_t v853;
  _QWORD *v854;
  uint64_t v855;
  _QWORD *v856;
  uint64_t v857;
  _QWORD *v858;
  uint64_t v859;
  _QWORD *v860;
  uint64_t v861;
  _QWORD *v862;
  uint64_t v863;
  _QWORD *v864;
  uint64_t v865;
  _QWORD *v866;
  uint64_t v867;
  _QWORD *v868;
  uint64_t v869;
  _QWORD *v870;
  uint64_t v871;
  _QWORD *v872;
  uint64_t v873;
  _QWORD *v874;
  uint64_t v875;
  _QWORD *v876;
  uint64_t v877;
  _QWORD *v878;
  uint64_t v879;
  _QWORD *v880;
  uint64_t v881;
  _QWORD *v882;
  uint64_t v883;
  _QWORD *v884;
  uint64_t v885;
  _QWORD *v886;
  uint64_t v887;
  _QWORD *v888;
  uint64_t v889;
  _QWORD *v890;
  uint64_t v891;
  _QWORD *v892;
  uint64_t v893;
  _QWORD *v894;
  uint64_t v895;
  _QWORD *v896;
  uint64_t v897;
  _QWORD *v898;
  uint64_t v899;
  _QWORD *v900;
  uint64_t v901;
  _QWORD *v902;
  uint64_t v903;
  _QWORD *v904;
  uint64_t v905;
  _QWORD *v906;
  uint64_t v907;
  _QWORD *v908;
  uint64_t v909;
  _QWORD *v910;
  uint64_t v911;
  _QWORD *v912;
  uint64_t v913;
  _QWORD *v914;
  uint64_t v915;
  _QWORD *v916;
  uint64_t v917;
  _QWORD *v918;
  uint64_t v919;
  _QWORD *v920;
  uint64_t v921;
  _QWORD *v922;
  uint64_t v923;
  _QWORD *v924;
  uint64_t v925;
  _QWORD *v926;
  uint64_t v927;
  _QWORD *v928;
  uint64_t v929;
  _QWORD *v930;
  uint64_t v931;
  _QWORD *v932;
  uint64_t v933;
  _QWORD *v934;
  uint64_t v935;
  _QWORD *v936;
  uint64_t v937;
  _QWORD *v938;
  uint64_t v939;
  _QWORD *v940;
  uint64_t v941;
  _QWORD *v942;
  uint64_t v943;
  _QWORD *v944;
  uint64_t v945;
  _QWORD *v946;
  uint64_t v947;
  _QWORD *v948;
  uint64_t v949;
  _QWORD *v950;
  uint64_t v951;
  _QWORD *v952;
  uint64_t v953;
  _QWORD *v954;
  uint64_t v955;
  _QWORD *v956;
  uint64_t v957;
  _QWORD *v958;
  uint64_t v959;
  _QWORD *v960;
  uint64_t v961;
  _QWORD *v962;
  uint64_t v963;
  _QWORD *v964;
  uint64_t v965;
  _QWORD *v966;
  uint64_t v967;
  _QWORD *v968;
  uint64_t v969;
  _QWORD *v970;
  uint64_t v971;
  _QWORD *v972;
  uint64_t v973;
  _QWORD *v974;
  uint64_t v975;
  _QWORD *v976;
  uint64_t v977;
  _QWORD *v978;
  uint64_t v979;
  _QWORD *v980;
  uint64_t v981;
  _QWORD *v982;
  uint64_t v983;
  _QWORD *v984;
  uint64_t v985;
  _QWORD *v986;
  uint64_t v987;
  _QWORD *v988;
  uint64_t v989;
  _QWORD *v990;
  uint64_t v991;
  _QWORD *v992;
  uint64_t v993;
  _QWORD *v994;
  uint64_t v995;
  _QWORD *v996;
  uint64_t v997;
  _QWORD *v998;
  uint64_t v999;
  _QWORD *v1000;
  uint64_t v1001;
  _QWORD *v1002;
  uint64_t v1003;
  _QWORD *v1004;
  uint64_t v1005;
  _QWORD *v1006;
  uint64_t v1007;
  _QWORD *v1008;
  uint64_t v1009;
  _QWORD *v1010;
  uint64_t v1011;
  _QWORD *v1012;
  uint64_t v1013;
  _QWORD *v1014;
  uint64_t v1015;
  _QWORD *v1016;
  uint64_t v1017;
  _QWORD *v1018;
  uint64_t v1019;
  _QWORD *v1020;
  uint64_t v1021;
  _QWORD *v1022;
  uint64_t v1023;
  _QWORD *v1024;
  uint64_t v1025;
  _QWORD *v1026;
  uint64_t v1027;
  _QWORD *v1028;
  uint64_t v1029;
  _QWORD *v1030;
  uint64_t v1031;
  _QWORD *v1032;
  uint64_t v1033;
  _QWORD *v1034;
  uint64_t v1035;
  _QWORD *v1036;
  uint64_t v1037;
  _QWORD *v1038;
  uint64_t v1039;
  _QWORD *v1040;
  uint64_t v1041;
  _QWORD *v1042;
  uint64_t v1043;
  _QWORD *v1044;
  uint64_t v1045;
  _QWORD *v1046;
  uint64_t v1047;
  _QWORD *v1048;
  uint64_t v1049;
  _QWORD *v1050;
  uint64_t v1051;
  _QWORD *v1052;
  uint64_t v1053;
  _QWORD *v1054;
  uint64_t v1055;
  _QWORD *v1056;
  uint64_t v1057;
  _QWORD *v1058;
  uint64_t v1059;
  _QWORD *v1060;
  uint64_t v1061;
  _QWORD *v1062;
  uint64_t v1063;
  _QWORD *v1064;
  uint64_t v1065;
  _QWORD *v1066;
  uint64_t v1067;
  _QWORD *v1068;
  uint64_t v1069;
  _QWORD *v1070;
  uint64_t v1071;
  _QWORD *v1072;
  uint64_t v1073;
  _QWORD *v1074;
  uint64_t v1075;
  _QWORD *v1076;
  uint64_t v1077;
  _QWORD *v1078;
  uint64_t v1079;
  _QWORD *v1080;
  uint64_t v1081;
  _QWORD *v1082;
  uint64_t v1083;
  _QWORD *v1084;
  uint64_t v1085;
  _QWORD *v1086;
  uint64_t v1087;
  _QWORD *v1088;
  uint64_t v1089;
  _QWORD *v1090;
  uint64_t v1091;
  _QWORD *v1092;
  uint64_t v1093;
  _QWORD *v1094;
  uint64_t v1095;
  _QWORD *v1096;
  uint64_t v1097;
  _QWORD *v1098;
  uint64_t v1099;
  _QWORD *v1100;
  uint64_t v1101;
  _QWORD *v1102;
  uint64_t v1103;
  _QWORD *v1104;
  uint64_t v1105;
  _QWORD *v1106;
  uint64_t v1107;
  _QWORD *v1108;
  uint64_t v1109;
  _QWORD *v1110;
  uint64_t v1111;
  _QWORD *v1112;
  uint64_t v1113;
  _QWORD *v1114;
  uint64_t v1115;
  _QWORD *v1116;
  uint64_t v1117;
  _QWORD *v1118;
  uint64_t v1119;
  _QWORD *v1120;
  uint64_t v1121;
  _QWORD *v1122;
  uint64_t v1123;
  _QWORD *v1124;
  uint64_t v1125;
  _QWORD *v1126;
  uint64_t v1127;
  _QWORD *v1128;
  uint64_t v1129;
  _QWORD *v1130;
  uint64_t v1131;
  _QWORD *v1132;
  uint64_t v1133;
  _QWORD *v1134;
  uint64_t v1135;
  _QWORD *v1136;
  uint64_t v1137;
  _QWORD *v1138;
  uint64_t v1139;
  _QWORD *v1140;
  uint64_t v1141;
  _QWORD *v1142;
  uint64_t v1143;
  _QWORD *v1144;
  uint64_t v1145;
  _QWORD *v1146;
  uint64_t v1147;
  _QWORD *v1148;
  uint64_t v1149;
  _QWORD *v1150;
  uint64_t v1151;
  _QWORD *v1152;
  uint64_t v1153;
  _QWORD *v1154;
  uint64_t v1155;
  _QWORD *v1156;
  uint64_t v1157;
  _QWORD *v1158;
  uint64_t v1159;
  _QWORD *v1160;
  uint64_t v1161;
  _QWORD *v1162;
  uint64_t v1163;
  _QWORD *v1164;
  uint64_t v1165;
  _QWORD *v1166;
  uint64_t v1167;
  _QWORD *v1168;
  uint64_t v1169;
  _QWORD *v1170;
  uint64_t v1171;
  _QWORD *v1172;
  uint64_t v1173;
  _QWORD *v1174;
  uint64_t v1175;
  _QWORD *v1176;
  uint64_t v1177;
  _QWORD *v1178;
  uint64_t v1179;
  _QWORD *v1180;
  uint64_t v1181;
  _QWORD *v1182;
  uint64_t v1183;
  _QWORD *v1184;
  uint64_t v1185;
  _QWORD *v1186;
  uint64_t v1187;
  _QWORD *v1188;
  uint64_t v1189;
  _QWORD *v1190;
  uint64_t v1191;
  _QWORD *v1192;
  uint64_t v1193;
  _QWORD *v1194;
  uint64_t v1195;
  _QWORD *v1196;
  uint64_t v1197;
  _QWORD *v1198;
  uint64_t v1199;
  _QWORD *v1200;
  uint64_t v1201;
  _QWORD *v1202;
  uint64_t v1203;
  _QWORD *v1204;
  uint64_t v1205;
  _QWORD *v1206;
  uint64_t v1207;
  _QWORD *v1208;
  uint64_t v1209;
  _QWORD *v1210;
  uint64_t v1211;
  _QWORD *v1212;
  uint64_t v1213;
  _QWORD *v1214;
  uint64_t v1215;
  _QWORD *v1216;
  uint64_t v1217;
  _QWORD *v1218;
  uint64_t v1219;
  _QWORD *v1220;
  uint64_t v1221;
  _QWORD *v1222;
  uint64_t v1223;
  _QWORD *v1224;
  uint64_t v1225;
  _QWORD *v1226;
  uint64_t v1227;
  _QWORD *v1228;
  uint64_t v1229;
  _QWORD *v1230;
  uint64_t v1231;
  _QWORD *v1232;
  uint64_t v1233;
  _QWORD *v1234;
  uint64_t v1235;
  _QWORD *v1236;
  uint64_t v1237;
  _QWORD *v1238;
  uint64_t v1239;
  _QWORD *v1240;
  uint64_t v1241;
  _QWORD *v1242;
  uint64_t v1243;
  _QWORD *v1244;
  uint64_t v1245;
  _QWORD *v1246;
  uint64_t v1247;
  _QWORD *v1248;
  uint64_t v1249;
  _QWORD *v1250;
  uint64_t v1251;
  _QWORD *v1252;
  uint64_t v1253;
  _QWORD *v1254;
  uint64_t v1255;
  _QWORD *v1256;
  uint64_t v1257;
  _QWORD *v1258;
  uint64_t v1259;
  _QWORD *v1260;
  uint64_t v1261;
  _QWORD *v1262;
  uint64_t v1263;
  _QWORD *v1264;
  uint64_t v1265;
  _QWORD *v1266;
  uint64_t v1267;
  _QWORD *v1268;
  uint64_t v1269;
  _QWORD *v1270;
  uint64_t v1271;
  _QWORD *v1272;
  uint64_t v1273;
  _QWORD *v1274;
  uint64_t v1275;
  _QWORD *v1276;
  uint64_t v1277;
  _QWORD *v1278;
  uint64_t v1279;
  _QWORD *v1280;
  uint64_t v1281;
  _QWORD *v1282;
  uint64_t v1283;
  _QWORD *v1284;
  uint64_t v1285;
  _QWORD *v1286;
  uint64_t v1287;
  _QWORD *v1288;
  uint64_t v1289;
  _QWORD *v1290;
  uint64_t v1291;
  _QWORD *v1292;
  uint64_t v1293;
  _QWORD *v1294;
  uint64_t v1295;
  _QWORD *v1296;
  uint64_t v1297;
  _QWORD *v1298;
  uint64_t v1299;
  _QWORD *v1300;
  uint64_t v1301;
  _QWORD *v1302;
  uint64_t v1303;
  _QWORD *v1304;
  uint64_t v1305;
  _QWORD *v1306;
  uint64_t v1307;
  _QWORD *v1308;
  uint64_t v1309;
  _QWORD *v1310;
  uint64_t v1311;
  _QWORD *v1312;
  uint64_t v1313;
  _QWORD *v1314;
  uint64_t v1315;
  _QWORD *v1316;
  uint64_t v1317;
  _QWORD *v1318;
  uint64_t v1319;
  _QWORD *v1320;
  uint64_t v1321;
  _QWORD *v1322;
  uint64_t v1323;
  _QWORD *v1324;
  uint64_t v1325;
  _QWORD *v1326;
  uint64_t v1327;
  _QWORD *v1328;
  uint64_t v1329;
  _QWORD v1330[2];

  MEMORY[0x1E0C80A78](this, a2);
  v3 = v2;
  v1330[0] = *MEMORY[0x1E0C80C00];
  v21[1] = 0x200000002;
  v21[0] = WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v21[0] = 0x1F3FB0000261DLL;
  v23 = 0x200000002;
  v22 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v22 = 0x1F3FC0000261DLL;
  v25 = 0x200000002;
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v24 = 0x1F3FD0000261DLL;
  v27 = 0x200000002;
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v26 = 0x1F3FE0000261DLL;
  v29 = 0x200000002;
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v28 = 0x1F3FF0000261DLL;
  v31 = 0x200000002;
  v30 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v30 = 0x1F3FB000026F9;
  v33 = 0x200000002;
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v32 = 0x1F3FC000026F9;
  v35 = 0x200000002;
  v34 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v34 = 0x1F3FD000026F9;
  v37 = 0x200000002;
  v36 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v36 = 0x1F3FE000026F9;
  v39 = 0x200000002;
  v38 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v38 = 0x1F3FF000026F9;
  v41 = 0x200000002;
  v40 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v40 = 0x1F3FB0000270ALL;
  v43 = 0x200000002;
  v42 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v42 = 0x1F3FC0000270ALL;
  v45 = 0x200000002;
  v44 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v44 = 0x1F3FD0000270ALL;
  v47 = 0x200000002;
  v46 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v46 = 0x1F3FE0000270ALL;
  v49 = 0x200000002;
  v48 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v48 = 0x1F3FF0000270ALL;
  v51 = 0x200000002;
  v50 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v50 = 0x1F3FB0000270BLL;
  v53 = 0x200000002;
  v52 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v52 = 0x1F3FC0000270BLL;
  v55 = 0x200000002;
  v54 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v54 = 0x1F3FD0000270BLL;
  v57 = 0x200000002;
  v56 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v56 = 0x1F3FE0000270BLL;
  v59 = 0x200000002;
  v58 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v58 = 0x1F3FF0000270BLL;
  v61 = 0x200000002;
  v60 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v60 = 0x1F3FB0000270CLL;
  v63 = 0x200000002;
  v62 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v62 = 0x1F3FC0000270CLL;
  v65 = 0x200000002;
  v64 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v64 = 0x1F3FD0000270CLL;
  v67 = 0x200000002;
  v66 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v66 = 0x1F3FE0000270CLL;
  v69 = 0x200000002;
  v68 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v68 = 0x1F3FF0000270CLL;
  v71 = 0x200000002;
  v70 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v70 = 0x1F3FB0000270DLL;
  v73 = 0x200000002;
  v72 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v72 = 0x1F3FC0000270DLL;
  v75 = 0x200000002;
  v74 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v74 = 0x1F3FD0000270DLL;
  v77 = 0x200000002;
  v76 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v76 = 0x1F3FE0000270DLL;
  v79 = 0x200000002;
  v78 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v78 = 0x1F3FF0000270DLL;
  v81 = 0x200000002;
  v80 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v80 = 0x1F3FB0001F385;
  v83 = 0x200000002;
  v82 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v82 = 0x1F3FC0001F385;
  v85 = 0x200000002;
  v84 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v84 = 0x1F3FD0001F385;
  v87 = 0x200000002;
  v86 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v86 = 0x1F3FE0001F385;
  v89 = 0x200000002;
  v88 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v88 = 0x1F3FF0001F385;
  v91 = 0x200000002;
  v90 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v90 = 0x1F3FB0001F3C2;
  v93 = 0x200000002;
  v92 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v92 = 0x1F3FC0001F3C2;
  v95 = 0x200000002;
  v94 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v94 = 0x1F3FD0001F3C2;
  v97 = 0x200000002;
  v96 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v96 = 0x1F3FE0001F3C2;
  v99 = 0x200000002;
  v98 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v98 = 0x1F3FF0001F3C2;
  v101 = 0x200000002;
  v100 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v100 = 0x1F3FB0001F3C3;
  v103 = 0x200000002;
  v102 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v102 = 0x1F3FC0001F3C3;
  v105 = 0x200000002;
  v104 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v104 = 0x1F3FD0001F3C3;
  v107 = 0x200000002;
  v106 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v106 = 0x1F3FE0001F3C3;
  v109 = 0x200000002;
  v108 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v108 = 0x1F3FF0001F3C3;
  v111 = 0x200000002;
  v110 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v110 = 0x1F3FB0001F3C4;
  v113 = 0x200000002;
  v112 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v112 = 0x1F3FC0001F3C4;
  v115 = 0x200000002;
  v114 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v114 = 0x1F3FD0001F3C4;
  v117 = 0x200000002;
  v116 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v116 = 0x1F3FE0001F3C4;
  v119 = 0x200000002;
  v118 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v118 = 0x1F3FF0001F3C4;
  v121 = 0x200000002;
  v120 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v120 = 0x1F3FB0001F3C7;
  v123 = 0x200000002;
  v122 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v122 = 0x1F3FC0001F3C7;
  v125 = 0x200000002;
  v124 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v124 = 0x1F3FD0001F3C7;
  v127 = 0x200000002;
  v126 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v126 = 0x1F3FE0001F3C7;
  v129 = 0x200000002;
  v128 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v128 = 0x1F3FF0001F3C7;
  v131 = 0x200000002;
  v130 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v130 = 0x1F3FB0001F3CALL;
  v133 = 0x200000002;
  v132 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v132 = 0x1F3FC0001F3CALL;
  v135 = 0x200000002;
  v134 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v134 = 0x1F3FD0001F3CALL;
  v137 = 0x200000002;
  v136 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v136 = 0x1F3FE0001F3CALL;
  v139 = 0x200000002;
  v138 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v138 = 0x1F3FF0001F3CALL;
  v141 = 0x200000002;
  v140 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v140 = 0x1F3FB0001F3CBLL;
  v143 = 0x200000002;
  v142 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v142 = 0x1F3FC0001F3CBLL;
  v145 = 0x200000002;
  v144 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v144 = 0x1F3FD0001F3CBLL;
  v147 = 0x200000002;
  v146 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v146 = 0x1F3FE0001F3CBLL;
  v149 = 0x200000002;
  v148 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v148 = 0x1F3FF0001F3CBLL;
  v151 = 0x200000002;
  v150 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v150 = 0x1F3FB0001F3CCLL;
  v153 = 0x200000002;
  v152 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v152 = 0x1F3FC0001F3CCLL;
  v155 = 0x200000002;
  v154 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v154 = 0x1F3FD0001F3CCLL;
  v157 = 0x200000002;
  v156 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v156 = 0x1F3FE0001F3CCLL;
  v159 = 0x200000002;
  v158 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v158 = 0x1F3FF0001F3CCLL;
  v161 = 0x200000002;
  v160 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v160 = 0x1F3FB0001F442;
  v163 = 0x200000002;
  v162 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v162 = 0x1F3FC0001F442;
  v165 = 0x200000002;
  v164 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v164 = 0x1F3FD0001F442;
  v167 = 0x200000002;
  v166 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v166 = 0x1F3FE0001F442;
  v169 = 0x200000002;
  v168 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v168 = 0x1F3FF0001F442;
  v171 = 0x200000002;
  v170 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v170 = 0x1F3FB0001F443;
  v173 = 0x200000002;
  v172 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v172 = 0x1F3FC0001F443;
  v175 = 0x200000002;
  v174 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v174 = 0x1F3FD0001F443;
  v177 = 0x200000002;
  v176 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v176 = 0x1F3FE0001F443;
  v179 = 0x200000002;
  v178 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v178 = 0x1F3FF0001F443;
  v181 = 0x200000002;
  v180 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v180 = 0x1F3FB0001F446;
  v183 = 0x200000002;
  v182 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v182 = 0x1F3FC0001F446;
  v185 = 0x200000002;
  v184 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v184 = 0x1F3FD0001F446;
  v187 = 0x200000002;
  v186 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v186 = 0x1F3FE0001F446;
  v189 = 0x200000002;
  v188 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v188 = 0x1F3FF0001F446;
  v191 = 0x200000002;
  v190 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v190 = 0x1F3FB0001F447;
  v193 = 0x200000002;
  v192 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v192 = 0x1F3FC0001F447;
  v195 = 0x200000002;
  v194 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v194 = 0x1F3FD0001F447;
  v197 = 0x200000002;
  v196 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v196 = 0x1F3FE0001F447;
  v199 = 0x200000002;
  v198 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v198 = 0x1F3FF0001F447;
  v201 = 0x200000002;
  v200 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v200 = 0x1F3FB0001F448;
  v203 = 0x200000002;
  v202 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v202 = 0x1F3FC0001F448;
  v205 = 0x200000002;
  v204 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v204 = 0x1F3FD0001F448;
  v207 = 0x200000002;
  v206 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v206 = 0x1F3FE0001F448;
  v209 = 0x200000002;
  v208 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v208 = 0x1F3FF0001F448;
  v211 = 0x200000002;
  v210 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v210 = 0x1F3FB0001F449;
  v213 = 0x200000002;
  v212 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v212 = 0x1F3FC0001F449;
  v215 = 0x200000002;
  v214 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v214 = 0x1F3FD0001F449;
  v217 = 0x200000002;
  v216 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v216 = 0x1F3FE0001F449;
  v219 = 0x200000002;
  v218 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v218 = 0x1F3FF0001F449;
  v221 = 0x200000002;
  v220 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v220 = 0x1F3FB0001F44ALL;
  v223 = 0x200000002;
  v222 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v222 = 0x1F3FC0001F44ALL;
  v225 = 0x200000002;
  v224 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v224 = 0x1F3FD0001F44ALL;
  v227 = 0x200000002;
  v226 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v226 = 0x1F3FE0001F44ALL;
  v229 = 0x200000002;
  v228 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v228 = 0x1F3FF0001F44ALL;
  v231 = 0x200000002;
  v230 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v230 = 0x1F3FB0001F44BLL;
  v233 = 0x200000002;
  v232 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v232 = 0x1F3FC0001F44BLL;
  v235 = 0x200000002;
  v234 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v234 = 0x1F3FD0001F44BLL;
  v237 = 0x200000002;
  v236 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v236 = 0x1F3FE0001F44BLL;
  v239 = 0x200000002;
  v238 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v238 = 0x1F3FF0001F44BLL;
  v241 = 0x200000002;
  v240 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v240 = 0x1F3FB0001F44CLL;
  v243 = 0x200000002;
  v242 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v242 = 0x1F3FC0001F44CLL;
  v245 = 0x200000002;
  v244 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v244 = 0x1F3FD0001F44CLL;
  v247 = 0x200000002;
  v246 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v246 = 0x1F3FE0001F44CLL;
  v249 = 0x200000002;
  v248 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v248 = 0x1F3FF0001F44CLL;
  v251 = 0x200000002;
  v250 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v250 = 0x1F3FB0001F44DLL;
  v253 = 0x200000002;
  v252 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v252 = 0x1F3FC0001F44DLL;
  v255 = 0x200000002;
  v254 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v254 = 0x1F3FD0001F44DLL;
  v257 = 0x200000002;
  v256 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v256 = 0x1F3FE0001F44DLL;
  v259 = 0x200000002;
  v258 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v258 = 0x1F3FF0001F44DLL;
  v261 = 0x200000002;
  v260 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v260 = 0x1F3FB0001F44ELL;
  v263 = 0x200000002;
  v262 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v262 = 0x1F3FC0001F44ELL;
  v265 = 0x200000002;
  v264 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v264 = 0x1F3FD0001F44ELL;
  v267 = 0x200000002;
  v266 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v266 = 0x1F3FE0001F44ELL;
  v269 = 0x200000002;
  v268 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v268 = 0x1F3FF0001F44ELL;
  v271 = 0x200000002;
  v270 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v270 = 0x1F3FB0001F44FLL;
  v273 = 0x200000002;
  v272 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v272 = 0x1F3FC0001F44FLL;
  v275 = 0x200000002;
  v274 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v274 = 0x1F3FD0001F44FLL;
  v277 = 0x200000002;
  v276 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v276 = 0x1F3FE0001F44FLL;
  v279 = 0x200000002;
  v278 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v278 = 0x1F3FF0001F44FLL;
  v281 = 0x200000002;
  v280 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v280 = 0x1F3FB0001F450;
  v283 = 0x200000002;
  v282 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v282 = 0x1F3FC0001F450;
  v285 = 0x200000002;
  v284 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v284 = 0x1F3FD0001F450;
  v287 = 0x200000002;
  v286 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v286 = 0x1F3FE0001F450;
  v289 = 0x200000002;
  v288 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v288 = 0x1F3FF0001F450;
  v291 = 0x200000002;
  v290 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v290 = 0x1F3FB0001F466;
  v293 = 0x200000002;
  v292 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v292 = 0x1F3FC0001F466;
  v295 = 0x200000002;
  v294 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v294 = 0x1F3FD0001F466;
  v297 = 0x200000002;
  v296 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v296 = 0x1F3FE0001F466;
  v299 = 0x200000002;
  v298 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v298 = 0x1F3FF0001F466;
  v301 = 0x200000002;
  v300 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v300 = 0x1F3FB0001F467;
  v303 = 0x200000002;
  v302 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v302 = 0x1F3FC0001F467;
  v305 = 0x200000002;
  v304 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v304 = 0x1F3FD0001F467;
  v307 = 0x200000002;
  v306 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v306 = 0x1F3FE0001F467;
  v309 = 0x200000002;
  v308 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v308 = 0x1F3FF0001F467;
  v311 = 0x200000002;
  v310 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v310 = 0x1F3FB0001F468;
  v313 = 0x200000002;
  v312 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v312 = 0x1F3FC0001F468;
  v315 = 0x200000002;
  v314 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v314 = 0x1F3FD0001F468;
  v317 = 0x200000002;
  v316 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v316 = 0x1F3FE0001F468;
  v319 = 0x200000002;
  v318 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v318 = 0x1F3FF0001F468;
  v321 = 0x200000002;
  v320 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v320 = 0x1F3FB0001F469;
  v323 = 0x200000002;
  v322 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v322 = 0x1F3FC0001F469;
  v325 = 0x200000002;
  v324 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v324 = 0x1F3FD0001F469;
  v327 = 0x200000002;
  v326 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v326 = 0x1F3FE0001F469;
  v329 = 0x200000002;
  v328 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v328 = 0x1F3FF0001F469;
  v331 = 0x200000002;
  v330 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v330 = 0x1F3FB0001F46BLL;
  v333 = 0x200000002;
  v332 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v332 = 0x1F3FC0001F46BLL;
  v335 = 0x200000002;
  v334 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v334 = 0x1F3FD0001F46BLL;
  v337 = 0x200000002;
  v336 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v336 = 0x1F3FE0001F46BLL;
  v339 = 0x200000002;
  v338 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v338 = 0x1F3FF0001F46BLL;
  v341 = 0x200000002;
  v340 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v340 = 0x1F3FB0001F46CLL;
  v343 = 0x200000002;
  v342 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v342 = 0x1F3FC0001F46CLL;
  v345 = 0x200000002;
  v344 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v344 = 0x1F3FD0001F46CLL;
  v347 = 0x200000002;
  v346 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v346 = 0x1F3FE0001F46CLL;
  v349 = 0x200000002;
  v348 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v348 = 0x1F3FF0001F46CLL;
  v351 = 0x200000002;
  v350 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v350 = 0x1F3FB0001F46DLL;
  v353 = 0x200000002;
  v352 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v352 = 0x1F3FC0001F46DLL;
  v355 = 0x200000002;
  v354 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v354 = 0x1F3FD0001F46DLL;
  v357 = 0x200000002;
  v356 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v356 = 0x1F3FE0001F46DLL;
  v359 = 0x200000002;
  v358 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v358 = 0x1F3FF0001F46DLL;
  v361 = 0x200000002;
  v360 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v360 = 0x1F3FB0001F46ELL;
  v363 = 0x200000002;
  v362 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v362 = 0x1F3FC0001F46ELL;
  v365 = 0x200000002;
  v364 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v364 = 0x1F3FD0001F46ELL;
  v367 = 0x200000002;
  v366 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v366 = 0x1F3FE0001F46ELL;
  v369 = 0x200000002;
  v368 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v368 = 0x1F3FF0001F46ELL;
  v371 = 0x200000002;
  v370 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v370 = 0x1F3FB0001F470;
  v373 = 0x200000002;
  v372 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v372 = 0x1F3FC0001F470;
  v375 = 0x200000002;
  v374 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v374 = 0x1F3FD0001F470;
  v377 = 0x200000002;
  v376 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v376 = 0x1F3FE0001F470;
  v379 = 0x200000002;
  v378 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v378 = 0x1F3FF0001F470;
  v381 = 0x200000002;
  v380 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v380 = 0x1F3FB0001F471;
  v383 = 0x200000002;
  v382 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v382 = 0x1F3FC0001F471;
  v385 = 0x200000002;
  v384 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v384 = 0x1F3FD0001F471;
  v387 = 0x200000002;
  v386 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v386 = 0x1F3FE0001F471;
  v389 = 0x200000002;
  v388 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v388 = 0x1F3FF0001F471;
  v391 = 0x200000002;
  v390 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v390 = 0x1F3FB0001F472;
  v393 = 0x200000002;
  v392 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v392 = 0x1F3FC0001F472;
  v395 = 0x200000002;
  v394 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v394 = 0x1F3FD0001F472;
  v397 = 0x200000002;
  v396 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v396 = 0x1F3FE0001F472;
  v399 = 0x200000002;
  v398 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v398 = 0x1F3FF0001F472;
  v401 = 0x200000002;
  v400 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v400 = 0x1F3FB0001F473;
  v403 = 0x200000002;
  v402 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v402 = 0x1F3FC0001F473;
  v405 = 0x200000002;
  v404 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v404 = 0x1F3FD0001F473;
  v407 = 0x200000002;
  v406 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v406 = 0x1F3FE0001F473;
  v409 = 0x200000002;
  v408 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v408 = 0x1F3FF0001F473;
  v411 = 0x200000002;
  v410 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v410 = 0x1F3FB0001F474;
  v413 = 0x200000002;
  v412 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v412 = 0x1F3FC0001F474;
  v415 = 0x200000002;
  v414 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v414 = 0x1F3FD0001F474;
  v417 = 0x200000002;
  v416 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v416 = 0x1F3FE0001F474;
  v419 = 0x200000002;
  v418 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v418 = 0x1F3FF0001F474;
  v421 = 0x200000002;
  v420 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v420 = 0x1F3FB0001F475;
  v423 = 0x200000002;
  v422 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v422 = 0x1F3FC0001F475;
  v425 = 0x200000002;
  v424 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v424 = 0x1F3FD0001F475;
  v427 = 0x200000002;
  v426 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v426 = 0x1F3FE0001F475;
  v429 = 0x200000002;
  v428 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v428 = 0x1F3FF0001F475;
  v431 = 0x200000002;
  v430 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v430 = 0x1F3FB0001F476;
  v433 = 0x200000002;
  v432 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v432 = 0x1F3FC0001F476;
  v435 = 0x200000002;
  v434 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v434 = 0x1F3FD0001F476;
  v437 = 0x200000002;
  v436 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v436 = 0x1F3FE0001F476;
  v439 = 0x200000002;
  v438 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v438 = 0x1F3FF0001F476;
  v441 = 0x200000002;
  v440 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v440 = 0x1F3FB0001F477;
  v443 = 0x200000002;
  v442 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v442 = 0x1F3FC0001F477;
  v445 = 0x200000002;
  v444 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v444 = 0x1F3FD0001F477;
  v447 = 0x200000002;
  v446 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v446 = 0x1F3FE0001F477;
  v449 = 0x200000002;
  v448 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v448 = 0x1F3FF0001F477;
  v451 = 0x200000002;
  v450 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v450 = 0x1F3FB0001F478;
  v453 = 0x200000002;
  v452 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v452 = 0x1F3FC0001F478;
  v455 = 0x200000002;
  v454 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v454 = 0x1F3FD0001F478;
  v457 = 0x200000002;
  v456 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v456 = 0x1F3FE0001F478;
  v459 = 0x200000002;
  v458 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v458 = 0x1F3FF0001F478;
  v461 = 0x200000002;
  v460 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v460 = 0x1F3FB0001F47CLL;
  v463 = 0x200000002;
  v462 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v462 = 0x1F3FC0001F47CLL;
  v465 = 0x200000002;
  v464 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v464 = 0x1F3FD0001F47CLL;
  v467 = 0x200000002;
  v466 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v466 = 0x1F3FE0001F47CLL;
  v469 = 0x200000002;
  v468 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v468 = 0x1F3FF0001F47CLL;
  v471 = 0x200000002;
  v470 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v470 = 0x1F3FB0001F481;
  v473 = 0x200000002;
  v472 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v472 = 0x1F3FC0001F481;
  v475 = 0x200000002;
  v474 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v474 = 0x1F3FD0001F481;
  v477 = 0x200000002;
  v476 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v476 = 0x1F3FE0001F481;
  v479 = 0x200000002;
  v478 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v478 = 0x1F3FF0001F481;
  v481 = 0x200000002;
  v480 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v480 = 0x1F3FB0001F482;
  v483 = 0x200000002;
  v482 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v482 = 0x1F3FC0001F482;
  v485 = 0x200000002;
  v484 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v484 = 0x1F3FD0001F482;
  v487 = 0x200000002;
  v486 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v486 = 0x1F3FE0001F482;
  v489 = 0x200000002;
  v488 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v488 = 0x1F3FF0001F482;
  v491 = 0x200000002;
  v490 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v490 = 0x1F3FB0001F483;
  v493 = 0x200000002;
  v492 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v492 = 0x1F3FC0001F483;
  v495 = 0x200000002;
  v494 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v494 = 0x1F3FD0001F483;
  v497 = 0x200000002;
  v496 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v496 = 0x1F3FE0001F483;
  v499 = 0x200000002;
  v498 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v498 = 0x1F3FF0001F483;
  v501 = 0x200000002;
  v500 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v500 = 0x1F3FB0001F485;
  v503 = 0x200000002;
  v502 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v502 = 0x1F3FC0001F485;
  v505 = 0x200000002;
  v504 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v504 = 0x1F3FD0001F485;
  v507 = 0x200000002;
  v506 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v506 = 0x1F3FE0001F485;
  v509 = 0x200000002;
  v508 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v508 = 0x1F3FF0001F485;
  v511 = 0x200000002;
  v510 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v510 = 0x1F3FB0001F486;
  v513 = 0x200000002;
  v512 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v512 = 0x1F3FC0001F486;
  v515 = 0x200000002;
  v514 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v514 = 0x1F3FD0001F486;
  v517 = 0x200000002;
  v516 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v516 = 0x1F3FE0001F486;
  v519 = 0x200000002;
  v518 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v518 = 0x1F3FF0001F486;
  v521 = 0x200000002;
  v520 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v520 = 0x1F3FB0001F487;
  v523 = 0x200000002;
  v522 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v522 = 0x1F3FC0001F487;
  v525 = 0x200000002;
  v524 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v524 = 0x1F3FD0001F487;
  v527 = 0x200000002;
  v526 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v526 = 0x1F3FE0001F487;
  v529 = 0x200000002;
  v528 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v528 = 0x1F3FF0001F487;
  v531 = 0x200000002;
  v530 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v530 = 0x1F3FB0001F48FLL;
  v533 = 0x200000002;
  v532 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v532 = 0x1F3FC0001F48FLL;
  v535 = 0x200000002;
  v534 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v534 = 0x1F3FD0001F48FLL;
  v537 = 0x200000002;
  v536 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v536 = 0x1F3FE0001F48FLL;
  v539 = 0x200000002;
  v538 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v538 = 0x1F3FF0001F48FLL;
  v541 = 0x200000002;
  v540 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v540 = 0x1F3FB0001F491;
  v543 = 0x200000002;
  v542 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v542 = 0x1F3FC0001F491;
  v545 = 0x200000002;
  v544 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v544 = 0x1F3FD0001F491;
  v547 = 0x200000002;
  v546 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v546 = 0x1F3FE0001F491;
  v549 = 0x200000002;
  v548 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v548 = 0x1F3FF0001F491;
  v551 = 0x200000002;
  v550 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v550 = 0x1F3FB0001F4AALL;
  v553 = 0x200000002;
  v552 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v552 = 0x1F3FC0001F4AALL;
  v555 = 0x200000002;
  v554 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v554 = 0x1F3FD0001F4AALL;
  v557 = 0x200000002;
  v556 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v556 = 0x1F3FE0001F4AALL;
  v559 = 0x200000002;
  v558 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v558 = 0x1F3FF0001F4AALL;
  v561 = 0x200000002;
  v560 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v560 = 0x1F3FB0001F574;
  v563 = 0x200000002;
  v562 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v562 = 0x1F3FC0001F574;
  v565 = 0x200000002;
  v564 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v564 = 0x1F3FD0001F574;
  v567 = 0x200000002;
  v566 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v566 = 0x1F3FE0001F574;
  v569 = 0x200000002;
  v568 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v568 = 0x1F3FF0001F574;
  v571 = 0x200000002;
  v570 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v570 = 0x1F3FB0001F575;
  v573 = 0x200000002;
  v572 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v572 = 0x1F3FC0001F575;
  v575 = 0x200000002;
  v574 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v574 = 0x1F3FD0001F575;
  v577 = 0x200000002;
  v576 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v576 = 0x1F3FE0001F575;
  v579 = 0x200000002;
  v578 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v578 = 0x1F3FF0001F575;
  v581 = 0x200000002;
  v580 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v580 = 0x1F3FB0001F57ALL;
  v583 = 0x200000002;
  v582 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v582 = 0x1F3FC0001F57ALL;
  v585 = 0x200000002;
  v584 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v584 = 0x1F3FD0001F57ALL;
  v587 = 0x200000002;
  v586 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v586 = 0x1F3FE0001F57ALL;
  v589 = 0x200000002;
  v588 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v588 = 0x1F3FF0001F57ALL;
  v591 = 0x200000002;
  v590 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v590 = 0x1F3FB0001F590;
  v593 = 0x200000002;
  v592 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v592 = 0x1F3FC0001F590;
  v595 = 0x200000002;
  v594 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v594 = 0x1F3FD0001F590;
  v597 = 0x200000002;
  v596 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v596 = 0x1F3FE0001F590;
  v599 = 0x200000002;
  v598 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v598 = 0x1F3FF0001F590;
  v601 = 0x200000002;
  v600 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v600 = 0x1F3FB0001F595;
  v603 = 0x200000002;
  v602 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v602 = 0x1F3FC0001F595;
  v605 = 0x200000002;
  v604 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v604 = 0x1F3FD0001F595;
  v607 = 0x200000002;
  v606 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v606 = 0x1F3FE0001F595;
  v609 = 0x200000002;
  v608 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v608 = 0x1F3FF0001F595;
  v611 = 0x200000002;
  v610 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v610 = 0x1F3FB0001F596;
  v613 = 0x200000002;
  v612 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v612 = 0x1F3FC0001F596;
  v615 = 0x200000002;
  v614 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v614 = 0x1F3FD0001F596;
  v617 = 0x200000002;
  v616 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v616 = 0x1F3FE0001F596;
  v619 = 0x200000002;
  v618 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v618 = 0x1F3FF0001F596;
  v621 = 0x200000002;
  v620 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v620 = 0x1F3FB0001F645;
  v623 = 0x200000002;
  v622 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v622 = 0x1F3FC0001F645;
  v625 = 0x200000002;
  v624 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v624 = 0x1F3FD0001F645;
  v627 = 0x200000002;
  v626 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v626 = 0x1F3FE0001F645;
  v629 = 0x200000002;
  v628 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v628 = 0x1F3FF0001F645;
  v631 = 0x200000002;
  v630 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v630 = 0x1F3FB0001F646;
  v633 = 0x200000002;
  v632 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v632 = 0x1F3FC0001F646;
  v635 = 0x200000002;
  v634 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v634 = 0x1F3FD0001F646;
  v637 = 0x200000002;
  v636 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v636 = 0x1F3FE0001F646;
  v639 = 0x200000002;
  v638 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v638 = 0x1F3FF0001F646;
  v641 = 0x200000002;
  v640 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v640 = 0x1F3FB0001F647;
  v643 = 0x200000002;
  v642 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v642 = 0x1F3FC0001F647;
  v645 = 0x200000002;
  v644 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v644 = 0x1F3FD0001F647;
  v647 = 0x200000002;
  v646 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v646 = 0x1F3FE0001F647;
  v649 = 0x200000002;
  v648 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v648 = 0x1F3FF0001F647;
  v651 = 0x200000002;
  v650 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v650 = 0x1F3FB0001F64BLL;
  v653 = 0x200000002;
  v652 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v652 = 0x1F3FC0001F64BLL;
  v655 = 0x200000002;
  v654 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v654 = 0x1F3FD0001F64BLL;
  v657 = 0x200000002;
  v656 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v656 = 0x1F3FE0001F64BLL;
  v659 = 0x200000002;
  v658 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v658 = 0x1F3FF0001F64BLL;
  v661 = 0x200000002;
  v660 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v660 = 0x1F3FB0001F64CLL;
  v663 = 0x200000002;
  v662 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v662 = 0x1F3FC0001F64CLL;
  v665 = 0x200000002;
  v664 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v664 = 0x1F3FD0001F64CLL;
  v667 = 0x200000002;
  v666 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v666 = 0x1F3FE0001F64CLL;
  v669 = 0x200000002;
  v668 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v668 = 0x1F3FF0001F64CLL;
  v671 = 0x200000002;
  v670 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v670 = 0x1F3FB0001F64DLL;
  v673 = 0x200000002;
  v672 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v672 = 0x1F3FC0001F64DLL;
  v675 = 0x200000002;
  v674 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v674 = 0x1F3FD0001F64DLL;
  v677 = 0x200000002;
  v676 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v676 = 0x1F3FE0001F64DLL;
  v679 = 0x200000002;
  v678 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v678 = 0x1F3FF0001F64DLL;
  v681 = 0x200000002;
  v680 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v680 = 0x1F3FB0001F64ELL;
  v683 = 0x200000002;
  v682 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v682 = 0x1F3FC0001F64ELL;
  v685 = 0x200000002;
  v684 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v684 = 0x1F3FD0001F64ELL;
  v687 = 0x200000002;
  v686 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v686 = 0x1F3FE0001F64ELL;
  v689 = 0x200000002;
  v688 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v688 = 0x1F3FF0001F64ELL;
  v691 = 0x200000002;
  v690 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v690 = 0x1F3FB0001F64FLL;
  v693 = 0x200000002;
  v692 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v692 = 0x1F3FC0001F64FLL;
  v695 = 0x200000002;
  v694 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v694 = 0x1F3FD0001F64FLL;
  v697 = 0x200000002;
  v696 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v696 = 0x1F3FE0001F64FLL;
  v699 = 0x200000002;
  v698 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v698 = 0x1F3FF0001F64FLL;
  v701 = 0x200000002;
  v700 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v700 = 0x1F3FB0001F6A3;
  v703 = 0x200000002;
  v702 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v702 = 0x1F3FC0001F6A3;
  v705 = 0x200000002;
  v704 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v704 = 0x1F3FD0001F6A3;
  v707 = 0x200000002;
  v706 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v706 = 0x1F3FE0001F6A3;
  v709 = 0x200000002;
  v708 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v708 = 0x1F3FF0001F6A3;
  v711 = 0x200000002;
  v710 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v710 = 0x1F3FB0001F6B4;
  v713 = 0x200000002;
  v712 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v712 = 0x1F3FC0001F6B4;
  v715 = 0x200000002;
  v714 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v714 = 0x1F3FD0001F6B4;
  v717 = 0x200000002;
  v716 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v716 = 0x1F3FE0001F6B4;
  v719 = 0x200000002;
  v718 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v718 = 0x1F3FF0001F6B4;
  v721 = 0x200000002;
  v720 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v720 = 0x1F3FB0001F6B5;
  v723 = 0x200000002;
  v722 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v722 = 0x1F3FC0001F6B5;
  v725 = 0x200000002;
  v724 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v724 = 0x1F3FD0001F6B5;
  v727 = 0x200000002;
  v726 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v726 = 0x1F3FE0001F6B5;
  v729 = 0x200000002;
  v728 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v728 = 0x1F3FF0001F6B5;
  v731 = 0x200000002;
  v730 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v730 = 0x1F3FB0001F6B6;
  v733 = 0x200000002;
  v732 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v732 = 0x1F3FC0001F6B6;
  v735 = 0x200000002;
  v734 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v734 = 0x1F3FD0001F6B6;
  v737 = 0x200000002;
  v736 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v736 = 0x1F3FE0001F6B6;
  v739 = 0x200000002;
  v738 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v738 = 0x1F3FF0001F6B6;
  v741 = 0x200000002;
  v740 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v740 = 0x1F3FB0001F6C0;
  v743 = 0x200000002;
  v742 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v742 = 0x1F3FC0001F6C0;
  v745 = 0x200000002;
  v744 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v744 = 0x1F3FD0001F6C0;
  v747 = 0x200000002;
  v746 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v746 = 0x1F3FE0001F6C0;
  v749 = 0x200000002;
  v748 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v748 = 0x1F3FF0001F6C0;
  v751 = 0x200000002;
  v750 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v750 = 0x1F3FB0001F6CCLL;
  v753 = 0x200000002;
  v752 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v752 = 0x1F3FC0001F6CCLL;
  v755 = 0x200000002;
  v754 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v754 = 0x1F3FD0001F6CCLL;
  v757 = 0x200000002;
  v756 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v756 = 0x1F3FE0001F6CCLL;
  v759 = 0x200000002;
  v758 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v758 = 0x1F3FF0001F6CCLL;
  v761 = 0x200000002;
  v760 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v760 = 0x1F3FB0001F90CLL;
  v763 = 0x200000002;
  v762 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v762 = 0x1F3FC0001F90CLL;
  v765 = 0x200000002;
  v764 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v764 = 0x1F3FD0001F90CLL;
  v767 = 0x200000002;
  v766 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v766 = 0x1F3FE0001F90CLL;
  v769 = 0x200000002;
  v768 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v768 = 0x1F3FF0001F90CLL;
  v771 = 0x200000002;
  v770 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v770 = 0x1F3FB0001F90FLL;
  v773 = 0x200000002;
  v772 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v772 = 0x1F3FC0001F90FLL;
  v775 = 0x200000002;
  v774 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v774 = 0x1F3FD0001F90FLL;
  v777 = 0x200000002;
  v776 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v776 = 0x1F3FE0001F90FLL;
  v779 = 0x200000002;
  v778 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v778 = 0x1F3FF0001F90FLL;
  v781 = 0x200000002;
  v780 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v780 = 0x1F3FB0001F918;
  v783 = 0x200000002;
  v782 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v782 = 0x1F3FC0001F918;
  v785 = 0x200000002;
  v784 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v784 = 0x1F3FD0001F918;
  v787 = 0x200000002;
  v786 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v786 = 0x1F3FE0001F918;
  v789 = 0x200000002;
  v788 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v788 = 0x1F3FF0001F918;
  v791 = 0x200000002;
  v790 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v790 = 0x1F3FB0001F919;
  v793 = 0x200000002;
  v792 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v792 = 0x1F3FC0001F919;
  v795 = 0x200000002;
  v794 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v794 = 0x1F3FD0001F919;
  v797 = 0x200000002;
  v796 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v796 = 0x1F3FE0001F919;
  v799 = 0x200000002;
  v798 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v798 = 0x1F3FF0001F919;
  v801 = 0x200000002;
  v800 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v800 = 0x1F3FB0001F91ALL;
  v803 = 0x200000002;
  v802 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v802 = 0x1F3FC0001F91ALL;
  v805 = 0x200000002;
  v804 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v804 = 0x1F3FD0001F91ALL;
  v807 = 0x200000002;
  v806 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v806 = 0x1F3FE0001F91ALL;
  v809 = 0x200000002;
  v808 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v808 = 0x1F3FF0001F91ALL;
  v811 = 0x200000002;
  v810 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v810 = 0x1F3FB0001F91BLL;
  v813 = 0x200000002;
  v812 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v812 = 0x1F3FC0001F91BLL;
  v815 = 0x200000002;
  v814 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v814 = 0x1F3FD0001F91BLL;
  v817 = 0x200000002;
  v816 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v816 = 0x1F3FE0001F91BLL;
  v819 = 0x200000002;
  v818 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v818 = 0x1F3FF0001F91BLL;
  v821 = 0x200000002;
  v820 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v820 = 0x1F3FB0001F91CLL;
  v823 = 0x200000002;
  v822 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v822 = 0x1F3FC0001F91CLL;
  v825 = 0x200000002;
  v824 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v824 = 0x1F3FD0001F91CLL;
  v827 = 0x200000002;
  v826 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v826 = 0x1F3FE0001F91CLL;
  v829 = 0x200000002;
  v828 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v828 = 0x1F3FF0001F91CLL;
  v831 = 0x200000002;
  v830 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v830 = 0x1F3FB0001F91DLL;
  v833 = 0x200000002;
  v832 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v832 = 0x1F3FC0001F91DLL;
  v835 = 0x200000002;
  v834 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v834 = 0x1F3FD0001F91DLL;
  v837 = 0x200000002;
  v836 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v836 = 0x1F3FE0001F91DLL;
  v839 = 0x200000002;
  v838 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v838 = 0x1F3FF0001F91DLL;
  v841 = 0x200000002;
  v840 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v840 = 0x1F3FB0001F91ELL;
  v843 = 0x200000002;
  v842 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v842 = 0x1F3FC0001F91ELL;
  v845 = 0x200000002;
  v844 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v844 = 0x1F3FD0001F91ELL;
  v847 = 0x200000002;
  v846 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v846 = 0x1F3FE0001F91ELL;
  v849 = 0x200000002;
  v848 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v848 = 0x1F3FF0001F91ELL;
  v851 = 0x200000002;
  v850 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v850 = 0x1F3FB0001F91FLL;
  v853 = 0x200000002;
  v852 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v852 = 0x1F3FC0001F91FLL;
  v855 = 0x200000002;
  v854 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v854 = 0x1F3FD0001F91FLL;
  v857 = 0x200000002;
  v856 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v856 = 0x1F3FE0001F91FLL;
  v859 = 0x200000002;
  v858 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v858 = 0x1F3FF0001F91FLL;
  v861 = 0x200000002;
  v860 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v860 = 0x1F3FB0001F926;
  v863 = 0x200000002;
  v862 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v862 = 0x1F3FC0001F926;
  v865 = 0x200000002;
  v864 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v864 = 0x1F3FD0001F926;
  v867 = 0x200000002;
  v866 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v866 = 0x1F3FE0001F926;
  v869 = 0x200000002;
  v868 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v868 = 0x1F3FF0001F926;
  v871 = 0x200000002;
  v870 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v870 = 0x1F3FB0001F930;
  v873 = 0x200000002;
  v872 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v872 = 0x1F3FC0001F930;
  v875 = 0x200000002;
  v874 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v874 = 0x1F3FD0001F930;
  v877 = 0x200000002;
  v876 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v876 = 0x1F3FE0001F930;
  v879 = 0x200000002;
  v878 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v878 = 0x1F3FF0001F930;
  v881 = 0x200000002;
  v880 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v880 = 0x1F3FB0001F931;
  v883 = 0x200000002;
  v882 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v882 = 0x1F3FC0001F931;
  v885 = 0x200000002;
  v884 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v884 = 0x1F3FD0001F931;
  v887 = 0x200000002;
  v886 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v886 = 0x1F3FE0001F931;
  v889 = 0x200000002;
  v888 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v888 = 0x1F3FF0001F931;
  v891 = 0x200000002;
  v890 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v890 = 0x1F3FB0001F932;
  v893 = 0x200000002;
  v892 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v892 = 0x1F3FC0001F932;
  v895 = 0x200000002;
  v894 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v894 = 0x1F3FD0001F932;
  v897 = 0x200000002;
  v896 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v896 = 0x1F3FE0001F932;
  v899 = 0x200000002;
  v898 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v898 = 0x1F3FF0001F932;
  v901 = 0x200000002;
  v900 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v900 = 0x1F3FB0001F933;
  v903 = 0x200000002;
  v902 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v902 = 0x1F3FC0001F933;
  v905 = 0x200000002;
  v904 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v904 = 0x1F3FD0001F933;
  v907 = 0x200000002;
  v906 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v906 = 0x1F3FE0001F933;
  v909 = 0x200000002;
  v908 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v908 = 0x1F3FF0001F933;
  v911 = 0x200000002;
  v910 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v910 = 0x1F3FB0001F934;
  v913 = 0x200000002;
  v912 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v912 = 0x1F3FC0001F934;
  v915 = 0x200000002;
  v914 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v914 = 0x1F3FD0001F934;
  v917 = 0x200000002;
  v916 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v916 = 0x1F3FE0001F934;
  v919 = 0x200000002;
  v918 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v918 = 0x1F3FF0001F934;
  v921 = 0x200000002;
  v920 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v920 = 0x1F3FB0001F935;
  v923 = 0x200000002;
  v922 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v922 = 0x1F3FC0001F935;
  v925 = 0x200000002;
  v924 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v924 = 0x1F3FD0001F935;
  v927 = 0x200000002;
  v926 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v926 = 0x1F3FE0001F935;
  v929 = 0x200000002;
  v928 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v928 = 0x1F3FF0001F935;
  v931 = 0x200000002;
  v930 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v930 = 0x1F3FB0001F936;
  v933 = 0x200000002;
  v932 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v932 = 0x1F3FC0001F936;
  v935 = 0x200000002;
  v934 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v934 = 0x1F3FD0001F936;
  v937 = 0x200000002;
  v936 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v936 = 0x1F3FE0001F936;
  v939 = 0x200000002;
  v938 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v938 = 0x1F3FF0001F936;
  v941 = 0x200000002;
  v940 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v940 = 0x1F3FB0001F937;
  v943 = 0x200000002;
  v942 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v942 = 0x1F3FC0001F937;
  v945 = 0x200000002;
  v944 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v944 = 0x1F3FD0001F937;
  v947 = 0x200000002;
  v946 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v946 = 0x1F3FE0001F937;
  v949 = 0x200000002;
  v948 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v948 = 0x1F3FF0001F937;
  v951 = 0x200000002;
  v950 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v950 = 0x1F3FB0001F938;
  v953 = 0x200000002;
  v952 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v952 = 0x1F3FC0001F938;
  v955 = 0x200000002;
  v954 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v954 = 0x1F3FD0001F938;
  v957 = 0x200000002;
  v956 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v956 = 0x1F3FE0001F938;
  v959 = 0x200000002;
  v958 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v958 = 0x1F3FF0001F938;
  v961 = 0x200000002;
  v960 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v960 = 0x1F3FB0001F939;
  v963 = 0x200000002;
  v962 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v962 = 0x1F3FC0001F939;
  v965 = 0x200000002;
  v964 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v964 = 0x1F3FD0001F939;
  v967 = 0x200000002;
  v966 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v966 = 0x1F3FE0001F939;
  v969 = 0x200000002;
  v968 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v968 = 0x1F3FF0001F939;
  v971 = 0x200000002;
  v970 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v970 = 0x1F3FB0001F93DLL;
  v973 = 0x200000002;
  v972 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v972 = 0x1F3FC0001F93DLL;
  v975 = 0x200000002;
  v974 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v974 = 0x1F3FD0001F93DLL;
  v977 = 0x200000002;
  v976 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v976 = 0x1F3FE0001F93DLL;
  v979 = 0x200000002;
  v978 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v978 = 0x1F3FF0001F93DLL;
  v981 = 0x200000002;
  v980 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v980 = 0x1F3FB0001F93ELL;
  v983 = 0x200000002;
  v982 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v982 = 0x1F3FC0001F93ELL;
  v985 = 0x200000002;
  v984 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v984 = 0x1F3FD0001F93ELL;
  v987 = 0x200000002;
  v986 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v986 = 0x1F3FE0001F93ELL;
  v989 = 0x200000002;
  v988 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v988 = 0x1F3FF0001F93ELL;
  v991 = 0x200000002;
  v990 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v990 = 0x1F3FB0001F977;
  v993 = 0x200000002;
  v992 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v992 = 0x1F3FC0001F977;
  v995 = 0x200000002;
  v994 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v994 = 0x1F3FD0001F977;
  v997 = 0x200000002;
  v996 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v996 = 0x1F3FE0001F977;
  v999 = 0x200000002;
  v998 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v998 = 0x1F3FF0001F977;
  v1001 = 0x200000002;
  v1000 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1000 = 0x1F3FB0001F9B5;
  v1003 = 0x200000002;
  v1002 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1002 = 0x1F3FC0001F9B5;
  v1005 = 0x200000002;
  v1004 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1004 = 0x1F3FD0001F9B5;
  v1007 = 0x200000002;
  v1006 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1006 = 0x1F3FE0001F9B5;
  v1009 = 0x200000002;
  v1008 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1008 = 0x1F3FF0001F9B5;
  v1011 = 0x200000002;
  v1010 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1010 = 0x1F3FB0001F9B6;
  v1013 = 0x200000002;
  v1012 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1012 = 0x1F3FC0001F9B6;
  v1015 = 0x200000002;
  v1014 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1014 = 0x1F3FD0001F9B6;
  v1017 = 0x200000002;
  v1016 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1016 = 0x1F3FE0001F9B6;
  v1019 = 0x200000002;
  v1018 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1018 = 0x1F3FF0001F9B6;
  v1021 = 0x200000002;
  v1020 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1020 = 0x1F3FB0001F9B8;
  v1023 = 0x200000002;
  v1022 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1022 = 0x1F3FC0001F9B8;
  v1025 = 0x200000002;
  v1024 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1024 = 0x1F3FD0001F9B8;
  v1027 = 0x200000002;
  v1026 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1026 = 0x1F3FE0001F9B8;
  v1029 = 0x200000002;
  v1028 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1028 = 0x1F3FF0001F9B8;
  v1031 = 0x200000002;
  v1030 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1030 = 0x1F3FB0001F9B9;
  v1033 = 0x200000002;
  v1032 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1032 = 0x1F3FC0001F9B9;
  v1035 = 0x200000002;
  v1034 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1034 = 0x1F3FD0001F9B9;
  v1037 = 0x200000002;
  v1036 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1036 = 0x1F3FE0001F9B9;
  v1039 = 0x200000002;
  v1038 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1038 = 0x1F3FF0001F9B9;
  v1041 = 0x200000002;
  v1040 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1040 = 0x1F3FB0001F9BBLL;
  v1043 = 0x200000002;
  v1042 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1042 = 0x1F3FC0001F9BBLL;
  v1045 = 0x200000002;
  v1044 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1044 = 0x1F3FD0001F9BBLL;
  v1047 = 0x200000002;
  v1046 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1046 = 0x1F3FE0001F9BBLL;
  v1049 = 0x200000002;
  v1048 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1048 = 0x1F3FF0001F9BBLL;
  v1051 = 0x200000002;
  v1050 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1050 = 0x1F3FB0001F9CDLL;
  v1053 = 0x200000002;
  v1052 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1052 = 0x1F3FC0001F9CDLL;
  v1055 = 0x200000002;
  v1054 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1054 = 0x1F3FD0001F9CDLL;
  v1057 = 0x200000002;
  v1056 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1056 = 0x1F3FE0001F9CDLL;
  v1059 = 0x200000002;
  v1058 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1058 = 0x1F3FF0001F9CDLL;
  v1061 = 0x200000002;
  v1060 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1060 = 0x1F3FB0001F9CELL;
  v1063 = 0x200000002;
  v1062 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1062 = 0x1F3FC0001F9CELL;
  v1065 = 0x200000002;
  v1064 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1064 = 0x1F3FD0001F9CELL;
  v1067 = 0x200000002;
  v1066 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1066 = 0x1F3FE0001F9CELL;
  v1069 = 0x200000002;
  v1068 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1068 = 0x1F3FF0001F9CELL;
  v1071 = 0x200000002;
  v1070 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1070 = 0x1F3FB0001F9CFLL;
  v1073 = 0x200000002;
  v1072 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1072 = 0x1F3FC0001F9CFLL;
  v1075 = 0x200000002;
  v1074 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1074 = 0x1F3FD0001F9CFLL;
  v1077 = 0x200000002;
  v1076 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1076 = 0x1F3FE0001F9CFLL;
  v1079 = 0x200000002;
  v1078 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1078 = 0x1F3FF0001F9CFLL;
  v1081 = 0x200000002;
  v1080 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1080 = 0x1F3FB0001F9D1;
  v1083 = 0x200000002;
  v1082 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1082 = 0x1F3FC0001F9D1;
  v1085 = 0x200000002;
  v1084 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1084 = 0x1F3FD0001F9D1;
  v1087 = 0x200000002;
  v1086 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1086 = 0x1F3FE0001F9D1;
  v1089 = 0x200000002;
  v1088 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1088 = 0x1F3FF0001F9D1;
  v1091 = 0x200000002;
  v1090 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1090 = 0x1F3FB0001F9D2;
  v1093 = 0x200000002;
  v1092 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1092 = 0x1F3FC0001F9D2;
  v1095 = 0x200000002;
  v1094 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1094 = 0x1F3FD0001F9D2;
  v1097 = 0x200000002;
  v1096 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1096 = 0x1F3FE0001F9D2;
  v1099 = 0x200000002;
  v1098 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1098 = 0x1F3FF0001F9D2;
  v1101 = 0x200000002;
  v1100 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1100 = 0x1F3FB0001F9D3;
  v1103 = 0x200000002;
  v1102 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1102 = 0x1F3FC0001F9D3;
  v1105 = 0x200000002;
  v1104 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1104 = 0x1F3FD0001F9D3;
  v1107 = 0x200000002;
  v1106 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1106 = 0x1F3FE0001F9D3;
  v1109 = 0x200000002;
  v1108 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1108 = 0x1F3FF0001F9D3;
  v1111 = 0x200000002;
  v1110 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1110 = 0x1F3FB0001F9D4;
  v1113 = 0x200000002;
  v1112 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1112 = 0x1F3FC0001F9D4;
  v1115 = 0x200000002;
  v1114 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1114 = 0x1F3FD0001F9D4;
  v1117 = 0x200000002;
  v1116 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1116 = 0x1F3FE0001F9D4;
  v1119 = 0x200000002;
  v1118 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1118 = 0x1F3FF0001F9D4;
  v1121 = 0x200000002;
  v1120 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1120 = 0x1F3FB0001F9D5;
  v1123 = 0x200000002;
  v1122 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1122 = 0x1F3FC0001F9D5;
  v1125 = 0x200000002;
  v1124 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1124 = 0x1F3FD0001F9D5;
  v1127 = 0x200000002;
  v1126 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1126 = 0x1F3FE0001F9D5;
  v1129 = 0x200000002;
  v1128 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1128 = 0x1F3FF0001F9D5;
  v1131 = 0x200000002;
  v1130 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1130 = 0x1F3FB0001F9D6;
  v1133 = 0x200000002;
  v1132 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1132 = 0x1F3FC0001F9D6;
  v1135 = 0x200000002;
  v1134 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1134 = 0x1F3FD0001F9D6;
  v1137 = 0x200000002;
  v1136 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1136 = 0x1F3FE0001F9D6;
  v1139 = 0x200000002;
  v1138 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1138 = 0x1F3FF0001F9D6;
  v1141 = 0x200000002;
  v1140 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1140 = 0x1F3FB0001F9D7;
  v1143 = 0x200000002;
  v1142 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1142 = 0x1F3FC0001F9D7;
  v1145 = 0x200000002;
  v1144 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1144 = 0x1F3FD0001F9D7;
  v1147 = 0x200000002;
  v1146 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1146 = 0x1F3FE0001F9D7;
  v1149 = 0x200000002;
  v1148 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1148 = 0x1F3FF0001F9D7;
  v1151 = 0x200000002;
  v1150 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1150 = 0x1F3FB0001F9D8;
  v1153 = 0x200000002;
  v1152 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1152 = 0x1F3FC0001F9D8;
  v1155 = 0x200000002;
  v1154 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1154 = 0x1F3FD0001F9D8;
  v1157 = 0x200000002;
  v1156 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1156 = 0x1F3FE0001F9D8;
  v1159 = 0x200000002;
  v1158 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1158 = 0x1F3FF0001F9D8;
  v1161 = 0x200000002;
  v1160 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1160 = 0x1F3FB0001F9D9;
  v1163 = 0x200000002;
  v1162 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1162 = 0x1F3FC0001F9D9;
  v1165 = 0x200000002;
  v1164 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1164 = 0x1F3FD0001F9D9;
  v1167 = 0x200000002;
  v1166 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1166 = 0x1F3FE0001F9D9;
  v1169 = 0x200000002;
  v1168 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1168 = 0x1F3FF0001F9D9;
  v1171 = 0x200000002;
  v1170 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1170 = 0x1F3FB0001F9DALL;
  v1173 = 0x200000002;
  v1172 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1172 = 0x1F3FC0001F9DALL;
  v1175 = 0x200000002;
  v1174 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1174 = 0x1F3FD0001F9DALL;
  v1177 = 0x200000002;
  v1176 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1176 = 0x1F3FE0001F9DALL;
  v1179 = 0x200000002;
  v1178 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1178 = 0x1F3FF0001F9DALL;
  v1181 = 0x200000002;
  v1180 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1180 = 0x1F3FB0001F9DBLL;
  v1183 = 0x200000002;
  v1182 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1182 = 0x1F3FC0001F9DBLL;
  v1185 = 0x200000002;
  v1184 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1184 = 0x1F3FD0001F9DBLL;
  v1187 = 0x200000002;
  v1186 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1186 = 0x1F3FE0001F9DBLL;
  v1189 = 0x200000002;
  v1188 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1188 = 0x1F3FF0001F9DBLL;
  v1191 = 0x200000002;
  v1190 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1190 = 0x1F3FB0001F9DCLL;
  v1193 = 0x200000002;
  v1192 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1192 = 0x1F3FC0001F9DCLL;
  v1195 = 0x200000002;
  v1194 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1194 = 0x1F3FD0001F9DCLL;
  v1197 = 0x200000002;
  v1196 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1196 = 0x1F3FE0001F9DCLL;
  v1199 = 0x200000002;
  v1198 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1198 = 0x1F3FF0001F9DCLL;
  v1201 = 0x200000002;
  v1200 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1200 = 0x1F3FB0001F9DDLL;
  v1203 = 0x200000002;
  v1202 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1202 = 0x1F3FC0001F9DDLL;
  v1205 = 0x200000002;
  v1204 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1204 = 0x1F3FD0001F9DDLL;
  v1207 = 0x200000002;
  v1206 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1206 = 0x1F3FE0001F9DDLL;
  v1209 = 0x200000002;
  v1208 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1208 = 0x1F3FF0001F9DDLL;
  v1211 = 0x200000002;
  v1210 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1210 = 0x1F3FB0001FAC3;
  v1213 = 0x200000002;
  v1212 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1212 = 0x1F3FC0001FAC3;
  v1215 = 0x200000002;
  v1214 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1214 = 0x1F3FD0001FAC3;
  v1217 = 0x200000002;
  v1216 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1216 = 0x1F3FE0001FAC3;
  v1219 = 0x200000002;
  v1218 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1218 = 0x1F3FF0001FAC3;
  v1221 = 0x200000002;
  v1220 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1220 = 0x1F3FB0001FAC4;
  v1223 = 0x200000002;
  v1222 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1222 = 0x1F3FC0001FAC4;
  v1225 = 0x200000002;
  v1224 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1224 = 0x1F3FD0001FAC4;
  v1227 = 0x200000002;
  v1226 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1226 = 0x1F3FE0001FAC4;
  v1229 = 0x200000002;
  v1228 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1228 = 0x1F3FF0001FAC4;
  v1231 = 0x200000002;
  v1230 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1230 = 0x1F3FB0001FAC5;
  v1233 = 0x200000002;
  v1232 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1232 = 0x1F3FC0001FAC5;
  v1235 = 0x200000002;
  v1234 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1234 = 0x1F3FD0001FAC5;
  v1237 = 0x200000002;
  v1236 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1236 = 0x1F3FE0001FAC5;
  v1239 = 0x200000002;
  v1238 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1238 = 0x1F3FF0001FAC5;
  v1241 = 0x200000002;
  v1240 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1240 = 0x1F3FB0001FAF0;
  v1243 = 0x200000002;
  v1242 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1242 = 0x1F3FC0001FAF0;
  v1245 = 0x200000002;
  v1244 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1244 = 0x1F3FD0001FAF0;
  v1247 = 0x200000002;
  v1246 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1246 = 0x1F3FE0001FAF0;
  v1249 = 0x200000002;
  v1248 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1248 = 0x1F3FF0001FAF0;
  v1251 = 0x200000002;
  v1250 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1250 = 0x1F3FB0001FAF1;
  v1253 = 0x200000002;
  v1252 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1252 = 0x1F3FC0001FAF1;
  v1255 = 0x200000002;
  v1254 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1254 = 0x1F3FD0001FAF1;
  v1257 = 0x200000002;
  v1256 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1256 = 0x1F3FE0001FAF1;
  v1259 = 0x200000002;
  v1258 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1258 = 0x1F3FF0001FAF1;
  v1261 = 0x200000002;
  v1260 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1260 = 0x1F3FB0001FAF2;
  v1263 = 0x200000002;
  v1262 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1262 = 0x1F3FC0001FAF2;
  v1265 = 0x200000002;
  v1264 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1264 = 0x1F3FD0001FAF2;
  v1267 = 0x200000002;
  v1266 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1266 = 0x1F3FE0001FAF2;
  v1269 = 0x200000002;
  v1268 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1268 = 0x1F3FF0001FAF2;
  v1271 = 0x200000002;
  v1270 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1270 = 0x1F3FB0001FAF3;
  v1273 = 0x200000002;
  v1272 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1272 = 0x1F3FC0001FAF3;
  v1275 = 0x200000002;
  v1274 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1274 = 0x1F3FD0001FAF3;
  v1277 = 0x200000002;
  v1276 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1276 = 0x1F3FE0001FAF3;
  v1279 = 0x200000002;
  v1278 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1278 = 0x1F3FF0001FAF3;
  v1281 = 0x200000002;
  v1280 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1280 = 0x1F3FB0001FAF4;
  v1283 = 0x200000002;
  v1282 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1282 = 0x1F3FC0001FAF4;
  v1285 = 0x200000002;
  v1284 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1284 = 0x1F3FD0001FAF4;
  v1287 = 0x200000002;
  v1286 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1286 = 0x1F3FE0001FAF4;
  v1289 = 0x200000002;
  v1288 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1288 = 0x1F3FF0001FAF4;
  v1291 = 0x200000002;
  v1290 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1290 = 0x1F3FB0001FAF5;
  v1293 = 0x200000002;
  v1292 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1292 = 0x1F3FC0001FAF5;
  v1295 = 0x200000002;
  v1294 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1294 = 0x1F3FD0001FAF5;
  v1297 = 0x200000002;
  v1296 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1296 = 0x1F3FE0001FAF5;
  v1299 = 0x200000002;
  v1298 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1298 = 0x1F3FF0001FAF5;
  v1301 = 0x200000002;
  v1300 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1300 = 0x1F3FB0001FAF6;
  v1303 = 0x200000002;
  v1302 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1302 = 0x1F3FC0001FAF6;
  v1305 = 0x200000002;
  v1304 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1304 = 0x1F3FD0001FAF6;
  v1307 = 0x200000002;
  v1306 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1306 = 0x1F3FE0001FAF6;
  v1309 = 0x200000002;
  v1308 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1308 = 0x1F3FF0001FAF6;
  v1311 = 0x200000002;
  v1310 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1310 = 0x1F3FB0001FAF7;
  v1313 = 0x200000002;
  v1312 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1312 = 0x1F3FC0001FAF7;
  v1315 = 0x200000002;
  v1314 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1314 = 0x1F3FD0001FAF7;
  v1317 = 0x200000002;
  v1316 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1316 = 0x1F3FE0001FAF7;
  v1319 = 0x200000002;
  v1318 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1318 = 0x1F3FF0001FAF7;
  v1321 = 0x200000002;
  v1320 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1320 = 0x1F3FB0001FAF8;
  v1323 = 0x200000002;
  v1322 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1322 = 0x1F3FC0001FAF8;
  v1325 = 0x200000002;
  v1324 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1324 = 0x1F3FD0001FAF8;
  v1327 = 0x200000002;
  v1326 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1326 = 0x1F3FE0001FAF8;
  v1329 = 0x200000002;
  v1328 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v1328 = 0x1F3FF0001FAF8;
  v4 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  casual = bmalloc_allocate_casual(10480, 1);
  *(_DWORD *)(v4 + 8) = 655;
  *(_QWORD *)v4 = casual;
  v13 = *(_DWORD *)(v4 + 12);
  v14 = 0x1FFFFFFFFFFFFAE2;
  do
  {
    v15 = HIDWORD(v1330[v14 + 1]);
    v16 = *(_QWORD *)v4 + 16 * v13;
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v16 + 8) = 0;
    *(_DWORD *)(v16 + 12) = v15;
    if ((_DWORD)v15)
    {
      if (v15 >> 30)
      {
        __break(0xC471u);
        return;
      }
      v17 = (void *)WTF::fastMalloc((WTF *)(4 * v15));
      *(_DWORD *)(v16 + 8) = v15;
      *(_QWORD *)v16 = v17;
      memcpy(v17, (const void *)v1330[v14], 4 * HIDWORD(v1330[v14 + 1]));
    }
    v13 = *(_DWORD *)(v4 + 12) + 1;
    *(_DWORD *)(v4 + 12) = v13;
    v14 += 2;
  }
  while (v14 * 8);
  *(_OWORD *)(v4 + 73) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_BYTE *)(v4 + 89) = *(_BYTE *)(v4 + 89) & 0xF8 | 4;
  *v3 = v4;
  v18 = 1310;
  do
  {
    v19 = &v21[v18];
    v20 = v21[v18 - 2];
    if (v20)
    {
      *(v19 - 2) = 0;
      *((_DWORD *)v19 - 2) = 0;
      WTF::fastFree(v20, v6, v7, v8, v9, v10, v11, v12);
    }
    v18 -= 2;
  }
  while (v18 * 8);
}

void JSC::Yarr::createCharacterClass331(JSC::Yarr *this, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  _OWORD *v99;
  _OWORD *v100;
  _OWORD *v101;
  _OWORD *v102;
  _OWORD *v103;
  _OWORD *v104;
  _OWORD *v105;
  _OWORD *v106;
  _OWORD *v107;
  _OWORD *v108;
  _OWORD *v109;
  _OWORD *v110;
  _OWORD *v111;
  _OWORD *v112;
  _OWORD *v113;
  _OWORD *v114;
  _OWORD *v115;
  _OWORD *v116;
  _OWORD *v117;
  _OWORD *v118;
  _OWORD *v119;
  _OWORD *v120;
  _OWORD *v121;
  _OWORD *v122;
  _OWORD *v123;
  _OWORD *v124;
  _OWORD *v125;
  _OWORD *v126;
  _OWORD *v127;
  _OWORD *v128;
  _OWORD *v129;
  _OWORD *v130;
  _OWORD *v131;
  _OWORD *v132;
  _OWORD *v133;
  _OWORD *v134;
  _OWORD *v135;
  _OWORD *v136;
  _OWORD *v137;
  _OWORD *v138;
  _OWORD *v139;
  _OWORD *v140;
  _OWORD *v141;
  _OWORD *v142;
  _OWORD *v143;
  _OWORD *v144;
  _OWORD *v145;
  _OWORD *v146;
  _OWORD *v147;
  _OWORD *v148;
  _OWORD *v149;
  _OWORD *v150;
  _OWORD *v151;
  _OWORD *v152;
  _OWORD *v153;
  _OWORD *v154;
  _OWORD *v155;
  _OWORD *v156;
  _OWORD *v157;
  _OWORD *v158;
  _OWORD *v159;
  _OWORD *v160;
  _OWORD *v161;
  _OWORD *v162;
  _OWORD *v163;
  _OWORD *v164;
  _OWORD *v165;
  _OWORD *v166;
  _OWORD *v167;
  _OWORD *v168;
  _OWORD *v169;
  _OWORD *v170;
  _OWORD *v171;
  _OWORD *v172;
  _OWORD *v173;
  _OWORD *v174;
  _OWORD *v175;
  _OWORD *v176;
  _OWORD *v177;
  _OWORD *v178;
  _OWORD *v179;
  _OWORD *v180;
  _OWORD *v181;
  _OWORD *v182;
  _OWORD *v183;
  _OWORD *v184;
  _OWORD *v185;
  _OWORD *v186;
  _OWORD *v187;
  _OWORD *v188;
  _OWORD *v189;
  _OWORD *v190;
  _OWORD *v191;
  _OWORD *v192;
  _OWORD *v193;
  _OWORD *v194;
  _OWORD *v195;
  _OWORD *v196;
  _OWORD *v197;
  _OWORD *v198;
  _OWORD *v199;
  _OWORD *v200;
  _OWORD *v201;
  _OWORD *v202;
  _OWORD *v203;
  _OWORD *v204;
  _OWORD *v205;
  _OWORD *v206;
  _OWORD *v207;
  _OWORD *v208;
  _OWORD *v209;
  _OWORD *v210;
  _OWORD *v211;
  _OWORD *v212;
  _OWORD *v213;
  _OWORD *v214;
  _OWORD *v215;
  _OWORD *v216;
  _OWORD *v217;
  _OWORD *v218;
  _OWORD *v219;
  _OWORD *v220;
  _OWORD *v221;
  _OWORD *v222;
  _OWORD *v223;
  _OWORD *v224;
  _OWORD *v225;
  _OWORD *v226;
  _OWORD *v227;
  _OWORD *v228;
  _OWORD *v229;
  _OWORD *v230;
  _OWORD *v231;
  _OWORD *v232;
  _OWORD *v233;
  _OWORD *v234;
  _OWORD *v235;
  _OWORD *v236;
  _OWORD *v237;
  _OWORD *v238;
  _OWORD *v239;
  _OWORD *v240;
  _OWORD *v241;
  _OWORD *v242;
  _OWORD *v243;
  _OWORD *v244;
  _OWORD *v245;
  _OWORD *v246;
  _OWORD *v247;
  _OWORD *v248;
  _OWORD *v249;
  _OWORD *v250;
  _OWORD *v251;
  _OWORD *v252;
  _OWORD *v253;
  _OWORD *v254;
  _OWORD *v255;
  _OWORD *v256;
  _OWORD *v257;
  _OWORD *v258;
  _OWORD *v259;
  _OWORD *v260;
  _OWORD *v261;
  _OWORD *v262;
  _OWORD *v263;
  _OWORD *v264;
  _OWORD *v265;
  _OWORD *v266;
  _OWORD *v267;
  _OWORD *v268;
  _OWORD *v269;
  _OWORD *v270;
  _OWORD *v271;
  _OWORD *v272;
  _OWORD *v273;
  _OWORD *v274;
  _OWORD *v275;
  _OWORD *v276;
  _OWORD *v277;
  _OWORD *v278;
  _OWORD *v279;
  _OWORD *v280;
  _OWORD *v281;
  _OWORD *v282;
  _OWORD *v283;
  _OWORD *v284;
  _OWORD *v285;
  _OWORD *v286;
  _OWORD *v287;
  _OWORD *v288;
  _OWORD *v289;
  _OWORD *v290;
  _OWORD *v291;
  _OWORD *v292;
  _OWORD *v293;
  _OWORD *v294;
  _OWORD *v295;
  _OWORD *v296;
  _OWORD *v297;
  _OWORD *v298;
  _OWORD *v299;
  _OWORD *v300;
  _OWORD *v301;
  _OWORD *v302;
  _OWORD *v303;
  _OWORD *v304;
  _OWORD *v305;
  _OWORD *v306;
  _OWORD *v307;
  _OWORD *v308;
  _OWORD *v309;
  _OWORD *v310;
  _OWORD *v311;
  _OWORD *v312;
  _OWORD *v313;
  _OWORD *v314;
  _OWORD *v315;
  _OWORD *v316;
  _OWORD *v317;
  _OWORD *v318;
  _OWORD *v319;
  _OWORD *v320;
  _OWORD *v321;
  _OWORD *v322;
  _OWORD *v323;
  _OWORD *v324;
  _OWORD *v325;
  _OWORD *v326;
  _OWORD *v327;
  _OWORD *v328;
  _OWORD *v329;
  _OWORD *v330;
  _OWORD *v331;
  _OWORD *v332;
  _OWORD *v333;
  _OWORD *v334;
  _OWORD *v335;
  _OWORD *v336;
  _OWORD *v337;
  _OWORD *v338;
  _OWORD *v339;
  _OWORD *v340;
  _OWORD *v341;
  _OWORD *v342;
  _OWORD *v343;
  _OWORD *v344;
  _OWORD *v345;
  _OWORD *v346;
  _OWORD *v347;
  _OWORD *v348;
  _OWORD *v349;
  _OWORD *v350;
  _OWORD *v351;
  _OWORD *v352;
  _OWORD *v353;
  _OWORD *v354;
  _OWORD *v355;
  _OWORD *v356;
  _OWORD *v357;
  _OWORD *v358;
  _OWORD *v359;
  _OWORD *v360;
  _OWORD *v361;
  _OWORD *v362;
  _OWORD *v363;
  _OWORD *v364;
  _OWORD *v365;
  _OWORD *v366;
  _OWORD *v367;
  _OWORD *v368;
  _OWORD *v369;
  _OWORD *v370;
  _OWORD *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t casual;
  void *v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  unsigned int v1046;
  unsigned int *v1047;
  uint64_t v1048;
  uint64_t v1049;
  void *v1050;
  unint64_t v1051;
  uint64_t *v1052;
  uint64_t v1053;
  _QWORD v1054[1911];
  _OWORD *v1055;
  uint64_t v1056;
  _OWORD *v1057;
  uint64_t v1058;
  _OWORD *v1059;
  uint64_t v1060;
  _OWORD *v1061;
  uint64_t v1062;
  _OWORD *v1063;
  uint64_t v1064;
  _OWORD *v1065;
  uint64_t v1066;
  _OWORD *v1067;
  uint64_t v1068;
  _OWORD *v1069;
  uint64_t v1070;
  _OWORD *v1071;
  uint64_t v1072;
  _OWORD *v1073;
  uint64_t v1074;
  _OWORD *v1075;
  uint64_t v1076;
  _OWORD *v1077;
  uint64_t v1078;
  _OWORD *v1079;
  uint64_t v1080;
  _OWORD *v1081;
  uint64_t v1082;
  _OWORD *v1083;
  uint64_t v1084;
  _OWORD *v1085;
  uint64_t v1086;
  _OWORD *v1087;
  uint64_t v1088;
  _OWORD *v1089;
  uint64_t v1090;
  _OWORD *v1091;
  uint64_t v1092;
  _OWORD *v1093;
  uint64_t v1094;
  _OWORD *v1095;
  uint64_t v1096;
  _OWORD *v1097;
  uint64_t v1098;
  _OWORD *v1099;
  uint64_t v1100;
  _OWORD *v1101;
  uint64_t v1102;
  _OWORD *v1103;
  uint64_t v1104;
  _OWORD *v1105;
  uint64_t v1106;
  _OWORD *v1107;
  uint64_t v1108;
  _OWORD *v1109;
  uint64_t v1110;
  _OWORD *v1111;
  uint64_t v1112;
  _OWORD *v1113;
  uint64_t v1114;
  _OWORD *v1115;
  uint64_t v1116;
  _OWORD *v1117;
  uint64_t v1118;
  _OWORD *v1119;
  uint64_t v1120;
  _OWORD *v1121;
  uint64_t v1122;
  _OWORD *v1123;
  uint64_t v1124;
  _OWORD *v1125;
  uint64_t v1126;
  _OWORD *v1127;
  uint64_t v1128;
  _OWORD *v1129;
  uint64_t v1130;
  _OWORD *v1131;
  uint64_t v1132;
  _OWORD *v1133;
  uint64_t v1134;
  _OWORD *v1135;
  uint64_t v1136;
  _OWORD *v1137;
  uint64_t v1138;
  _OWORD *v1139;
  uint64_t v1140;
  _OWORD *v1141;
  uint64_t v1142;
  _OWORD *v1143;
  uint64_t v1144;
  _OWORD *v1145;
  uint64_t v1146;
  _OWORD *v1147;
  uint64_t v1148;
  _OWORD *v1149;
  uint64_t v1150;
  _OWORD *v1151;
  uint64_t v1152;
  _OWORD *v1153;
  uint64_t v1154;
  _OWORD *v1155;
  uint64_t v1156;
  _OWORD *v1157;
  uint64_t v1158;
  _OWORD *v1159;
  uint64_t v1160;
  _OWORD *v1161;
  uint64_t v1162;
  _OWORD *v1163;
  uint64_t v1164;
  _OWORD *v1165;
  uint64_t v1166;
  _OWORD *v1167;
  uint64_t v1168;
  _OWORD *v1169;
  uint64_t v1170;
  _OWORD *v1171;
  uint64_t v1172;
  _OWORD *v1173;
  uint64_t v1174;
  _OWORD *v1175;
  uint64_t v1176;
  _OWORD *v1177;
  uint64_t v1178;
  _OWORD *v1179;
  uint64_t v1180;
  _OWORD *v1181;
  uint64_t v1182;
  _OWORD *v1183;
  uint64_t v1184;
  _OWORD *v1185;
  uint64_t v1186;
  _OWORD *v1187;
  uint64_t v1188;
  _OWORD *v1189;
  uint64_t v1190;
  _OWORD *v1191;
  uint64_t v1192;
  _OWORD *v1193;
  uint64_t v1194;
  _OWORD *v1195;
  uint64_t v1196;
  _OWORD *v1197;
  uint64_t v1198;
  _OWORD *v1199;
  uint64_t v1200;
  _OWORD *v1201;
  uint64_t v1202;
  _OWORD *v1203;
  uint64_t v1204;
  _OWORD *v1205;
  uint64_t v1206;
  _OWORD *v1207;
  uint64_t v1208;
  _OWORD *v1209;
  uint64_t v1210;
  _OWORD *v1211;
  uint64_t v1212;
  _OWORD *v1213;
  uint64_t v1214;
  _OWORD *v1215;
  uint64_t v1216;
  _OWORD *v1217;
  uint64_t v1218;
  _OWORD *v1219;
  uint64_t v1220;
  _OWORD *v1221;
  uint64_t v1222;
  _OWORD *v1223;
  uint64_t v1224;
  _OWORD *v1225;
  uint64_t v1226;
  _OWORD *v1227;
  uint64_t v1228;
  _OWORD *v1229;
  uint64_t v1230;
  _OWORD *v1231;
  uint64_t v1232;
  _OWORD *v1233;
  uint64_t v1234;
  _OWORD *v1235;
  uint64_t v1236;
  _OWORD *v1237;
  uint64_t v1238;
  _OWORD *v1239;
  uint64_t v1240;
  _OWORD *v1241;
  uint64_t v1242;
  _OWORD *v1243;
  uint64_t v1244;
  _OWORD *v1245;
  uint64_t v1246;
  _OWORD *v1247;
  uint64_t v1248;
  _OWORD *v1249;
  uint64_t v1250;
  _OWORD *v1251;
  uint64_t v1252;
  _OWORD *v1253;
  uint64_t v1254;
  _OWORD *v1255;
  uint64_t v1256;
  _OWORD *v1257;
  uint64_t v1258;
  _OWORD *v1259;
  uint64_t v1260;
  _OWORD *v1261;
  uint64_t v1262;
  _OWORD *v1263;
  uint64_t v1264;
  _OWORD *v1265;
  uint64_t v1266;
  _OWORD *v1267;
  uint64_t v1268;
  _OWORD *v1269;
  uint64_t v1270;
  _OWORD *v1271;
  uint64_t v1272;
  _OWORD *v1273;
  uint64_t v1274;
  _OWORD *v1275;
  uint64_t v1276;
  _OWORD *v1277;
  uint64_t v1278;
  _OWORD *v1279;
  uint64_t v1280;
  _OWORD *v1281;
  uint64_t v1282;
  _OWORD *v1283;
  uint64_t v1284;
  _OWORD *v1285;
  uint64_t v1286;
  _OWORD *v1287;
  uint64_t v1288;
  _OWORD *v1289;
  uint64_t v1290;
  _OWORD *v1291;
  uint64_t v1292;
  _OWORD *v1293;
  uint64_t v1294;
  _OWORD *v1295;
  uint64_t v1296;
  _OWORD *v1297;
  uint64_t v1298;
  _OWORD *v1299;
  uint64_t v1300;
  _OWORD *v1301;
  uint64_t v1302;
  _OWORD *v1303;
  uint64_t v1304;
  _OWORD *v1305;
  uint64_t v1306;
  _OWORD *v1307;
  uint64_t v1308;
  _OWORD *v1309;
  uint64_t v1310;
  _OWORD *v1311;
  uint64_t v1312;
  _OWORD *v1313;
  uint64_t v1314;
  _OWORD *v1315;
  uint64_t v1316;
  _OWORD *v1317;
  uint64_t v1318;
  _OWORD *v1319;
  uint64_t v1320;
  _OWORD *v1321;
  uint64_t v1322;
  _OWORD *v1323;
  uint64_t v1324;
  _OWORD *v1325;
  uint64_t v1326;
  _OWORD *v1327;
  uint64_t v1328;
  _OWORD *v1329;
  uint64_t v1330;
  _OWORD *v1331;
  uint64_t v1332;
  _OWORD *v1333;
  uint64_t v1334;
  _OWORD *v1335;
  uint64_t v1336;
  _OWORD *v1337;
  uint64_t v1338;
  _OWORD *v1339;
  uint64_t v1340;
  _OWORD *v1341;
  uint64_t v1342;
  _OWORD *v1343;
  uint64_t v1344;
  _OWORD *v1345;
  uint64_t v1346;
  _OWORD *v1347;
  uint64_t v1348;
  _OWORD *v1349;
  uint64_t v1350;
  _OWORD *v1351;
  uint64_t v1352;
  _OWORD *v1353;
  uint64_t v1354;
  _OWORD *v1355;
  uint64_t v1356;
  _OWORD *v1357;
  uint64_t v1358;
  _OWORD *v1359;
  uint64_t v1360;
  _OWORD *v1361;
  uint64_t v1362;
  _OWORD *v1363;
  uint64_t v1364;
  _OWORD *v1365;
  uint64_t v1366;
  _OWORD *v1367;
  uint64_t v1368;
  _OWORD *v1369;
  uint64_t v1370;
  _OWORD *v1371;
  uint64_t v1372;
  _OWORD *v1373;
  uint64_t v1374;
  _OWORD *v1375;
  uint64_t v1376;
  _OWORD *v1377;
  uint64_t v1378;
  _OWORD *v1379;
  uint64_t v1380;
  _OWORD *v1381;
  uint64_t v1382;
  _OWORD *v1383;
  uint64_t v1384;
  _OWORD *v1385;
  uint64_t v1386;
  _OWORD *v1387;
  uint64_t v1388;
  _OWORD *v1389;
  uint64_t v1390;
  _OWORD *v1391;
  uint64_t v1392;
  _OWORD *v1393;
  uint64_t v1394;
  _OWORD *v1395;
  uint64_t v1396;
  _OWORD *v1397;
  uint64_t v1398;
  _OWORD *v1399;
  uint64_t v1400;
  _OWORD *v1401;
  uint64_t v1402;
  _OWORD *v1403;
  uint64_t v1404;
  _OWORD *v1405;
  uint64_t v1406;
  _OWORD *v1407;
  uint64_t v1408;
  _OWORD *v1409;
  uint64_t v1410;
  _OWORD *v1411;
  uint64_t v1412;
  _OWORD *v1413;
  uint64_t v1414;
  _OWORD *v1415;
  uint64_t v1416;
  _OWORD *v1417;
  uint64_t v1418;
  _OWORD *v1419;
  uint64_t v1420;
  _OWORD *v1421;
  uint64_t v1422;
  _OWORD *v1423;
  uint64_t v1424;
  _OWORD *v1425;
  uint64_t v1426;
  _OWORD *v1427;
  uint64_t v1428;
  _OWORD *v1429;
  uint64_t v1430;
  _OWORD *v1431;
  uint64_t v1432;
  _OWORD *v1433;
  uint64_t v1434;
  _OWORD *v1435;
  uint64_t v1436;
  _OWORD *v1437;
  uint64_t v1438;
  _OWORD *v1439;
  uint64_t v1440;
  _OWORD *v1441;
  uint64_t v1442;
  _OWORD *v1443;
  uint64_t v1444;
  _OWORD *v1445;
  uint64_t v1446;
  _OWORD *v1447;
  uint64_t v1448;
  _OWORD *v1449;
  uint64_t v1450;
  _OWORD *v1451;
  uint64_t v1452;
  _OWORD *v1453;
  uint64_t v1454;
  _OWORD *v1455;
  uint64_t v1456;
  _OWORD *v1457;
  uint64_t v1458;
  _OWORD *v1459;
  uint64_t v1460;
  _OWORD *v1461;
  uint64_t v1462;
  _OWORD *v1463;
  uint64_t v1464;
  _OWORD *v1465;
  uint64_t v1466;
  _OWORD *v1467;
  uint64_t v1468;
  _OWORD *v1469;
  uint64_t v1470;
  _OWORD *v1471;
  uint64_t v1472;
  _OWORD *v1473;
  uint64_t v1474;
  _OWORD *v1475;
  uint64_t v1476;
  _OWORD *v1477;
  uint64_t v1478;
  _OWORD *v1479;
  uint64_t v1480;
  _OWORD *v1481;
  uint64_t v1482;
  _OWORD *v1483;
  uint64_t v1484;
  _OWORD *v1485;
  uint64_t v1486;
  _OWORD *v1487;
  uint64_t v1488;
  _OWORD *v1489;
  uint64_t v1490;
  _OWORD *v1491;
  uint64_t v1492;
  _OWORD *v1493;
  uint64_t v1494;
  _OWORD *v1495;
  uint64_t v1496;
  _OWORD *v1497;
  uint64_t v1498;
  _OWORD *v1499;
  uint64_t v1500;
  _OWORD *v1501;
  uint64_t v1502;
  _OWORD *v1503;
  uint64_t v1504;
  _OWORD *v1505;
  uint64_t v1506;
  _OWORD *v1507;
  uint64_t v1508;
  _OWORD *v1509;
  uint64_t v1510;
  _OWORD *v1511;
  uint64_t v1512;
  _OWORD *v1513;
  uint64_t v1514;
  _OWORD *v1515;
  uint64_t v1516;
  _OWORD *v1517;
  uint64_t v1518;
  _OWORD *v1519;
  uint64_t v1520;
  _OWORD *v1521;
  uint64_t v1522;
  _OWORD *v1523;
  uint64_t v1524;
  _OWORD *v1525;
  uint64_t v1526;
  _OWORD *v1527;
  uint64_t v1528;
  _OWORD *v1529;
  uint64_t v1530;
  _OWORD *v1531;
  uint64_t v1532;
  _OWORD *v1533;
  uint64_t v1534;
  _OWORD *v1535;
  uint64_t v1536;
  _OWORD *v1537;
  uint64_t v1538;
  _OWORD *v1539;
  uint64_t v1540;
  _OWORD *v1541;
  uint64_t v1542;
  _OWORD *v1543;
  uint64_t v1544;
  _OWORD *v1545;
  uint64_t v1546;
  _OWORD *v1547;
  uint64_t v1548;
  _OWORD *v1549;
  uint64_t v1550;
  _OWORD *v1551;
  uint64_t v1552;
  _OWORD *v1553;
  uint64_t v1554;
  _OWORD *v1555;
  uint64_t v1556;
  _OWORD *v1557;
  uint64_t v1558;
  _OWORD *v1559;
  uint64_t v1560;
  _OWORD *v1561;
  uint64_t v1562;
  _OWORD *v1563;
  uint64_t v1564;
  _OWORD *v1565;
  uint64_t v1566;
  _OWORD *v1567;
  uint64_t v1568;
  _OWORD *v1569;
  uint64_t v1570;
  _OWORD *v1571;
  uint64_t v1572;
  _OWORD *v1573;
  uint64_t v1574;
  _OWORD *v1575;
  uint64_t v1576;
  _OWORD *v1577;
  uint64_t v1578;
  _OWORD *v1579;
  uint64_t v1580;
  _OWORD *v1581;
  uint64_t v1582;
  _OWORD *v1583;
  uint64_t v1584;
  _OWORD *v1585;
  uint64_t v1586;
  _OWORD *v1587;
  uint64_t v1588;
  _OWORD *v1589;
  uint64_t v1590;
  _OWORD *v1591;
  uint64_t v1592;
  _OWORD *v1593;
  uint64_t v1594;
  _OWORD *v1595;
  uint64_t v1596;
  _OWORD *v1597;
  uint64_t v1598;
  _OWORD *v1599;
  uint64_t v1600;
  _OWORD *v1601;
  uint64_t v1602;
  _OWORD *v1603;
  uint64_t v1604;
  _OWORD *v1605;
  uint64_t v1606;
  _OWORD *v1607;
  uint64_t v1608;
  _OWORD *v1609;
  uint64_t v1610;
  _OWORD *v1611;
  uint64_t v1612;
  _OWORD *v1613;
  uint64_t v1614;
  _OWORD *v1615;
  uint64_t v1616;
  _OWORD *v1617;
  uint64_t v1618;
  _OWORD *v1619;
  uint64_t v1620;
  _OWORD *v1621;
  uint64_t v1622;
  _OWORD *v1623;
  uint64_t v1624;
  _OWORD *v1625;
  uint64_t v1626;
  _OWORD *v1627;
  uint64_t v1628;
  _OWORD *v1629;
  uint64_t v1630;
  _OWORD *v1631;
  uint64_t v1632;
  _OWORD *v1633;
  uint64_t v1634;
  _OWORD *v1635;
  uint64_t v1636;
  _OWORD *v1637;
  uint64_t v1638;
  _OWORD *v1639;
  uint64_t v1640;
  _OWORD *v1641;
  uint64_t v1642;
  _OWORD *v1643;
  uint64_t v1644;
  _OWORD *v1645;
  uint64_t v1646;
  _OWORD *v1647;
  uint64_t v1648;
  _OWORD *v1649;
  uint64_t v1650;
  _OWORD *v1651;
  uint64_t v1652;
  _OWORD *v1653;
  uint64_t v1654;
  _OWORD *v1655;
  uint64_t v1656;
  _OWORD *v1657;
  uint64_t v1658;
  _OWORD *v1659;
  uint64_t v1660;
  _OWORD *v1661;
  uint64_t v1662;
  _OWORD *v1663;
  uint64_t v1664;
  _OWORD *v1665;
  uint64_t v1666;
  _OWORD *v1667;
  uint64_t v1668;
  _OWORD *v1669;
  uint64_t v1670;
  _OWORD *v1671;
  uint64_t v1672;
  _OWORD *v1673;
  uint64_t v1674;
  _OWORD *v1675;
  uint64_t v1676;
  _OWORD *v1677;
  uint64_t v1678;
  _OWORD *v1679;
  uint64_t v1680;
  _OWORD *v1681;
  uint64_t v1682;
  _OWORD *v1683;
  uint64_t v1684;
  _OWORD *v1685;
  uint64_t v1686;
  _OWORD *v1687;
  uint64_t v1688;
  _OWORD *v1689;
  uint64_t v1690;
  _OWORD *v1691;
  uint64_t v1692;
  _OWORD *v1693;
  uint64_t v1694;
  _OWORD *v1695;
  uint64_t v1696;
  _OWORD *v1697;
  uint64_t v1698;
  _OWORD *v1699;
  uint64_t v1700;
  _OWORD *v1701;
  uint64_t v1702;
  _OWORD *v1703;
  uint64_t v1704;
  _OWORD *v1705;
  uint64_t v1706;
  _OWORD *v1707;
  uint64_t v1708;
  _OWORD *v1709;
  uint64_t v1710;
  _OWORD *v1711;
  uint64_t v1712;
  _OWORD *v1713;
  uint64_t v1714;
  _OWORD *v1715;
  uint64_t v1716;
  _OWORD *v1717;
  uint64_t v1718;
  _OWORD *v1719;
  uint64_t v1720;
  _OWORD *v1721;
  uint64_t v1722;
  _OWORD *v1723;
  uint64_t v1724;
  _OWORD *v1725;
  uint64_t v1726;
  _OWORD *v1727;
  uint64_t v1728;
  _OWORD *v1729;
  uint64_t v1730;
  _OWORD *v1731;
  uint64_t v1732;
  _OWORD *v1733;
  uint64_t v1734;
  _OWORD *v1735;
  uint64_t v1736;
  _OWORD *v1737;
  uint64_t v1738;
  _OWORD *v1739;
  uint64_t v1740;
  _OWORD *v1741;
  uint64_t v1742;
  _OWORD *v1743;
  uint64_t v1744;
  _OWORD *v1745;
  uint64_t v1746;
  _OWORD *v1747;
  uint64_t v1748;
  _OWORD *v1749;
  uint64_t v1750;
  _OWORD *v1751;
  uint64_t v1752;
  _OWORD *v1753;
  uint64_t v1754;
  _OWORD *v1755;
  uint64_t v1756;
  _OWORD *v1757;
  uint64_t v1758;
  _OWORD *v1759;
  uint64_t v1760;
  _OWORD *v1761;
  uint64_t v1762;
  _OWORD *v1763;
  uint64_t v1764;
  _OWORD *v1765;
  uint64_t v1766;
  _OWORD *v1767;
  uint64_t v1768;
  _OWORD *v1769;
  uint64_t v1770;
  _OWORD *v1771;
  uint64_t v1772;
  _OWORD *v1773;
  uint64_t v1774;
  _OWORD *v1775;
  uint64_t v1776;
  _OWORD *v1777;
  uint64_t v1778;
  _OWORD *v1779;
  uint64_t v1780;
  _OWORD *v1781;
  uint64_t v1782;
  _OWORD *v1783;
  uint64_t v1784;
  _OWORD *v1785;
  uint64_t v1786;
  _OWORD *v1787;
  uint64_t v1788;
  _OWORD *v1789;
  uint64_t v1790;
  _OWORD *v1791;
  uint64_t v1792;
  _OWORD *v1793;
  uint64_t v1794;
  _OWORD *v1795;
  uint64_t v1796;
  _OWORD *v1797;
  uint64_t v1798;
  _OWORD *v1799;
  uint64_t v1800;
  _OWORD *v1801;
  uint64_t v1802;
  _OWORD *v1803;
  uint64_t v1804;
  _OWORD *v1805;
  uint64_t v1806;
  _OWORD *v1807;
  uint64_t v1808;
  _OWORD *v1809;
  uint64_t v1810;
  _OWORD *v1811;
  uint64_t v1812;
  _OWORD *v1813;
  uint64_t v1814;
  _OWORD *v1815;
  uint64_t v1816;
  _OWORD *v1817;
  uint64_t v1818;
  _OWORD *v1819;
  uint64_t v1820;
  _OWORD *v1821;
  uint64_t v1822;
  _OWORD *v1823;
  uint64_t v1824;
  _OWORD *v1825;
  uint64_t v1826;
  _OWORD *v1827;
  uint64_t v1828;
  _OWORD *v1829;
  uint64_t v1830;
  _OWORD *v1831;
  uint64_t v1832;
  _OWORD *v1833;
  uint64_t v1834;
  _OWORD *v1835;
  uint64_t v1836;
  _OWORD *v1837;
  uint64_t v1838;
  _OWORD *v1839;
  uint64_t v1840;
  _OWORD *v1841;
  uint64_t v1842;
  _OWORD *v1843;
  uint64_t v1844;
  _OWORD *v1845;
  uint64_t v1846;
  _OWORD *v1847;
  uint64_t v1848;
  _OWORD *v1849;
  uint64_t v1850;
  _OWORD *v1851;
  uint64_t v1852;
  _OWORD *v1853;
  uint64_t v1854;
  _OWORD *v1855;
  uint64_t v1856;
  _OWORD *v1857;
  uint64_t v1858;
  _OWORD *v1859;
  uint64_t v1860;
  _OWORD *v1861;
  uint64_t v1862;
  _OWORD *v1863;
  uint64_t v1864;
  _OWORD *v1865;
  uint64_t v1866;
  _OWORD *v1867;
  uint64_t v1868;
  _OWORD *v1869;
  uint64_t v1870;
  _OWORD *v1871;
  uint64_t v1872;
  _OWORD *v1873;
  uint64_t v1874;
  _OWORD *v1875;
  uint64_t v1876;
  _OWORD *v1877;
  uint64_t v1878;
  _OWORD *v1879;
  uint64_t v1880;
  _OWORD *v1881;
  uint64_t v1882;
  _OWORD *v1883;
  uint64_t v1884;
  _OWORD *v1885;
  uint64_t v1886;
  _OWORD *v1887;
  uint64_t v1888;
  _OWORD *v1889;
  uint64_t v1890;
  _OWORD *v1891;
  uint64_t v1892;
  _OWORD *v1893;
  uint64_t v1894;
  _OWORD *v1895;
  uint64_t v1896;
  _OWORD *v1897;
  uint64_t v1898;
  _OWORD *v1899;
  uint64_t v1900;
  _OWORD *v1901;
  uint64_t v1902;
  _OWORD *v1903;
  uint64_t v1904;
  _OWORD *v1905;
  uint64_t v1906;
  _OWORD *v1907;
  uint64_t v1908;
  _OWORD *v1909;
  uint64_t v1910;
  _OWORD *v1911;
  uint64_t v1912;
  _OWORD *v1913;
  uint64_t v1914;
  _OWORD *v1915;
  uint64_t v1916;
  _OWORD *v1917;
  uint64_t v1918;
  _OWORD *v1919;
  uint64_t v1920;
  _OWORD *v1921;
  uint64_t v1922;
  _OWORD *v1923;
  uint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  uint64_t v1927;
  uint64_t v1928;
  uint64_t v1929;
  uint64_t v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  uint64_t v1935;
  uint64_t v1936;
  uint64_t v1937;
  uint64_t v1938;
  uint64_t v1939;
  uint64_t v1940;
  uint64_t v1941;
  uint64_t v1942;
  uint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  uint64_t v1947;
  uint64_t v1948;
  uint64_t v1949;
  uint64_t v1950;
  uint64_t v1951;
  uint64_t v1952;
  uint64_t v1953;
  uint64_t v1954;
  uint64_t v1955;
  uint64_t v1956;
  uint64_t v1957;
  uint64_t v1958;
  uint64_t v1959;
  uint64_t v1960;
  uint64_t v1961;
  uint64_t v1962;
  uint64_t v1963;
  uint64_t v1964;
  uint64_t v1965;
  uint64_t v1966;
  uint64_t v1967;
  uint64_t v1968;
  uint64_t v1969;
  uint64_t v1970;
  uint64_t v1971;
  uint64_t v1972;
  uint64_t v1973;
  uint64_t v1974;
  uint64_t v1975;
  uint64_t v1976;
  uint64_t v1977;
  uint64_t v1978;
  uint64_t v1979;
  uint64_t v1980;
  uint64_t v1981;
  uint64_t v1982;
  uint64_t v1983;
  uint64_t v1984;
  uint64_t v1985;
  uint64_t v1986;
  uint64_t v1987;
  uint64_t v1988;
  uint64_t v1989;
  uint64_t v1990;
  uint64_t v1991;
  uint64_t v1992;
  uint64_t v1993;
  uint64_t v1994;
  uint64_t v1995;
  uint64_t v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  uint64_t v2000;
  uint64_t v2001;
  uint64_t v2002;
  uint64_t v2003;
  uint64_t v2004;
  uint64_t v2005;
  uint64_t v2006;
  uint64_t v2007;
  uint64_t v2008;
  uint64_t v2009;
  uint64_t v2010;
  uint64_t v2011;
  uint64_t v2012;
  uint64_t v2013;
  uint64_t v2014;
  uint64_t v2015;
  uint64_t v2016;
  uint64_t v2017;
  uint64_t v2018;
  uint64_t v2019;
  uint64_t v2020;
  uint64_t v2021;
  uint64_t v2022;
  uint64_t v2023;
  uint64_t v2024;
  uint64_t v2025;
  uint64_t v2026;
  uint64_t v2027;
  uint64_t v2028;
  uint64_t v2029;
  uint64_t v2030;
  uint64_t v2031;
  uint64_t v2032;
  uint64_t v2033;
  uint64_t v2034;
  uint64_t v2035;
  uint64_t v2036;
  uint64_t v2037;
  uint64_t v2038;
  uint64_t v2039;
  uint64_t v2040;
  uint64_t v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t v2044;
  uint64_t v2045;
  uint64_t v2046;
  uint64_t v2047;
  uint64_t v2048;
  uint64_t v2049;
  uint64_t v2050;
  uint64_t v2051;
  uint64_t v2052;
  uint64_t v2053;
  uint64_t v2054;
  uint64_t v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  uint64_t v2059;
  uint64_t v2060;
  uint64_t v2061;
  uint64_t v2062;
  uint64_t v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  uint64_t v2067;
  uint64_t v2068;
  uint64_t v2069;
  uint64_t v2070;
  uint64_t v2071;
  uint64_t v2072;
  uint64_t v2073;
  uint64_t v2074;
  uint64_t v2075;
  uint64_t v2076;
  uint64_t v2077;
  _QWORD v2078[3];

  MEMORY[0x1E0C80A78](this, a2);
  v1052 = v2;
  v2078[1] = *MEMORY[0x1E0C80C00];
  v3 = WTF::fastMalloc((WTF *)0x28);
  v1054[0] = 0xA0000000ALL;
  v1053 = v3;
  *(_OWORD *)v3 = xmmword_1991898F8;
  *(_OWORD *)(v3 + 16) = unk_199189908;
  *(_QWORD *)(v3 + 32) = 0x1F3FB0001F468;
  v4 = WTF::fastMalloc((WTF *)0x28);
  v1054[2] = 0xA0000000ALL;
  v1054[1] = v4;
  *(_OWORD *)v4 = xmmword_199189924;
  *(_OWORD *)(v4 + 16) = unk_199189934;
  *(_QWORD *)(v4 + 32) = 0x1F3FC0001F468;
  v5 = WTF::fastMalloc((WTF *)0x28);
  v1054[4] = 0xA0000000ALL;
  v1054[3] = v5;
  *(_OWORD *)v5 = xmmword_199189950;
  *(_OWORD *)(v5 + 16) = unk_199189960;
  *(_QWORD *)(v5 + 32) = 0x1F3FD0001F468;
  v6 = WTF::fastMalloc((WTF *)0x28);
  v1054[6] = 0xA0000000ALL;
  v1054[5] = v6;
  *(_OWORD *)v6 = xmmword_19918997C;
  *(_OWORD *)(v6 + 16) = unk_19918998C;
  *(_QWORD *)(v6 + 32) = 0x1F3FE0001F468;
  v7 = WTF::fastMalloc((WTF *)0x28);
  v1054[8] = 0xA0000000ALL;
  v1054[7] = v7;
  *(_OWORD *)v7 = xmmword_1991899A8;
  *(_OWORD *)(v7 + 16) = unk_1991899B8;
  *(_QWORD *)(v7 + 32) = 0x1F3FF0001F468;
  v8 = WTF::fastMalloc((WTF *)0x28);
  v1054[10] = 0xA0000000ALL;
  v1054[9] = v8;
  *(_OWORD *)v8 = xmmword_1991899D4;
  *(_OWORD *)(v8 + 16) = unk_1991899E4;
  *(_QWORD *)(v8 + 32) = 0x1F3FB0001F468;
  v9 = WTF::fastMalloc((WTF *)0x28);
  v1054[12] = 0xA0000000ALL;
  v1054[11] = v9;
  *(_OWORD *)v9 = xmmword_199189A00;
  *(_OWORD *)(v9 + 16) = unk_199189A10;
  *(_QWORD *)(v9 + 32) = 0x1F3FC0001F468;
  v10 = WTF::fastMalloc((WTF *)0x28);
  v1054[14] = 0xA0000000ALL;
  v1054[13] = v10;
  *(_OWORD *)v10 = xmmword_199189A2C;
  *(_OWORD *)(v10 + 16) = unk_199189A3C;
  *(_QWORD *)(v10 + 32) = 0x1F3FD0001F468;
  v11 = WTF::fastMalloc((WTF *)0x28);
  v1054[16] = 0xA0000000ALL;
  v1054[15] = v11;
  *(_OWORD *)v11 = xmmword_199189A58;
  *(_OWORD *)(v11 + 16) = unk_199189A68;
  *(_QWORD *)(v11 + 32) = 0x1F3FE0001F468;
  v12 = WTF::fastMalloc((WTF *)0x28);
  v1054[18] = 0xA0000000ALL;
  v1054[17] = v12;
  *(_OWORD *)v12 = xmmword_199189A84;
  *(_OWORD *)(v12 + 16) = unk_199189A94;
  *(_QWORD *)(v12 + 32) = 0x1F3FF0001F468;
  v13 = WTF::fastMalloc((WTF *)0x28);
  v1054[20] = 0xA0000000ALL;
  v1054[19] = v13;
  *(_OWORD *)v13 = xmmword_199189AB0;
  *(_OWORD *)(v13 + 16) = unk_199189AC0;
  *(_QWORD *)(v13 + 32) = 0x1F3FB0001F468;
  v14 = WTF::fastMalloc((WTF *)0x28);
  v1054[22] = 0xA0000000ALL;
  v1054[21] = v14;
  *(_OWORD *)v14 = xmmword_199189ADC;
  *(_OWORD *)(v14 + 16) = unk_199189AEC;
  *(_QWORD *)(v14 + 32) = 0x1F3FC0001F468;
  v15 = WTF::fastMalloc((WTF *)0x28);
  v1054[24] = 0xA0000000ALL;
  v1054[23] = v15;
  *(_OWORD *)v15 = xmmword_199189B08;
  *(_OWORD *)(v15 + 16) = unk_199189B18;
  *(_QWORD *)(v15 + 32) = 0x1F3FD0001F468;
  v16 = WTF::fastMalloc((WTF *)0x28);
  v1054[26] = 0xA0000000ALL;
  v1054[25] = v16;
  *(_OWORD *)v16 = xmmword_199189B34;
  *(_OWORD *)(v16 + 16) = unk_199189B44;
  *(_QWORD *)(v16 + 32) = 0x1F3FE0001F468;
  v17 = WTF::fastMalloc((WTF *)0x28);
  v1054[28] = 0xA0000000ALL;
  v1054[27] = v17;
  *(_OWORD *)v17 = xmmword_199189B60;
  *(_OWORD *)(v17 + 16) = unk_199189B70;
  *(_QWORD *)(v17 + 32) = 0x1F3FF0001F468;
  v18 = WTF::fastMalloc((WTF *)0x28);
  v1054[30] = 0xA0000000ALL;
  v1054[29] = v18;
  *(_OWORD *)v18 = xmmword_199189B8C;
  *(_OWORD *)(v18 + 16) = unk_199189B9C;
  *(_QWORD *)(v18 + 32) = 0x1F3FB0001F468;
  v19 = WTF::fastMalloc((WTF *)0x28);
  v1054[32] = 0xA0000000ALL;
  v1054[31] = v19;
  *(_OWORD *)v19 = xmmword_199189BB8;
  *(_OWORD *)(v19 + 16) = unk_199189BC8;
  *(_QWORD *)(v19 + 32) = 0x1F3FC0001F468;
  v20 = WTF::fastMalloc((WTF *)0x28);
  v1054[34] = 0xA0000000ALL;
  v1054[33] = v20;
  *(_OWORD *)v20 = xmmword_199189BE4;
  *(_OWORD *)(v20 + 16) = unk_199189BF4;
  *(_QWORD *)(v20 + 32) = 0x1F3FD0001F468;
  v21 = WTF::fastMalloc((WTF *)0x28);
  v1054[36] = 0xA0000000ALL;
  v1054[35] = v21;
  *(_OWORD *)v21 = xmmword_199189C10;
  *(_OWORD *)(v21 + 16) = unk_199189C20;
  *(_QWORD *)(v21 + 32) = 0x1F3FE0001F468;
  v22 = WTF::fastMalloc((WTF *)0x28);
  v1054[38] = 0xA0000000ALL;
  v1054[37] = v22;
  *(_OWORD *)v22 = xmmword_199189C3C;
  *(_OWORD *)(v22 + 16) = unk_199189C4C;
  *(_QWORD *)(v22 + 32) = 0x1F3FF0001F468;
  v23 = WTF::fastMalloc((WTF *)0x28);
  v1054[40] = 0xA0000000ALL;
  v1054[39] = v23;
  *(_OWORD *)v23 = xmmword_199189C68;
  *(_OWORD *)(v23 + 16) = unk_199189C78;
  *(_QWORD *)(v23 + 32) = 0x1F3FB0001F468;
  v24 = WTF::fastMalloc((WTF *)0x28);
  v1054[42] = 0xA0000000ALL;
  v1054[41] = v24;
  *(_OWORD *)v24 = xmmword_199189C94;
  *(_OWORD *)(v24 + 16) = unk_199189CA4;
  *(_QWORD *)(v24 + 32) = 0x1F3FC0001F468;
  v25 = WTF::fastMalloc((WTF *)0x28);
  v1054[44] = 0xA0000000ALL;
  v1054[43] = v25;
  *(_OWORD *)v25 = xmmword_199189CC0;
  *(_OWORD *)(v25 + 16) = unk_199189CD0;
  *(_QWORD *)(v25 + 32) = 0x1F3FD0001F468;
  v26 = WTF::fastMalloc((WTF *)0x28);
  v1054[46] = 0xA0000000ALL;
  v1054[45] = v26;
  *(_OWORD *)v26 = xmmword_199189CEC;
  *(_OWORD *)(v26 + 16) = unk_199189CFC;
  *(_QWORD *)(v26 + 32) = 0x1F3FE0001F468;
  v27 = WTF::fastMalloc((WTF *)0x28);
  v1054[48] = 0xA0000000ALL;
  v1054[47] = v27;
  *(_OWORD *)v27 = xmmword_199189D18;
  *(_OWORD *)(v27 + 16) = unk_199189D28;
  *(_QWORD *)(v27 + 32) = 0x1F3FF0001F468;
  v28 = WTF::fastMalloc((WTF *)0x28);
  v1054[50] = 0xA0000000ALL;
  v1054[49] = v28;
  *(_OWORD *)v28 = xmmword_199189D44;
  *(_OWORD *)(v28 + 16) = unk_199189D54;
  *(_QWORD *)(v28 + 32) = 0x1F3FB0001F468;
  v29 = WTF::fastMalloc((WTF *)0x28);
  v1054[52] = 0xA0000000ALL;
  v1054[51] = v29;
  *(_OWORD *)v29 = xmmword_199189D70;
  *(_OWORD *)(v29 + 16) = unk_199189D80;
  *(_QWORD *)(v29 + 32) = 0x1F3FC0001F468;
  v30 = WTF::fastMalloc((WTF *)0x28);
  v1054[54] = 0xA0000000ALL;
  v1054[53] = v30;
  *(_OWORD *)v30 = xmmword_199189D9C;
  *(_OWORD *)(v30 + 16) = unk_199189DAC;
  *(_QWORD *)(v30 + 32) = 0x1F3FD0001F468;
  v31 = WTF::fastMalloc((WTF *)0x28);
  v1054[56] = 0xA0000000ALL;
  v1054[55] = v31;
  *(_OWORD *)v31 = xmmword_199189DC8;
  *(_OWORD *)(v31 + 16) = unk_199189DD8;
  *(_QWORD *)(v31 + 32) = 0x1F3FE0001F468;
  v32 = WTF::fastMalloc((WTF *)0x28);
  v1054[58] = 0xA0000000ALL;
  v1054[57] = v32;
  *(_OWORD *)v32 = xmmword_199189DF4;
  *(_OWORD *)(v32 + 16) = unk_199189E04;
  *(_QWORD *)(v32 + 32) = 0x1F3FF0001F468;
  v33 = WTF::fastMalloc((WTF *)0x28);
  v1054[60] = 0xA0000000ALL;
  v1054[59] = v33;
  *(_OWORD *)v33 = xmmword_199189E20;
  *(_OWORD *)(v33 + 16) = unk_199189E30;
  *(_QWORD *)(v33 + 32) = 0x1F3FB0001F469;
  v34 = WTF::fastMalloc((WTF *)0x28);
  v1054[62] = 0xA0000000ALL;
  v1054[61] = v34;
  *(_OWORD *)v34 = xmmword_199189E4C;
  *(_OWORD *)(v34 + 16) = unk_199189E5C;
  *(_QWORD *)(v34 + 32) = 0x1F3FC0001F469;
  v35 = WTF::fastMalloc((WTF *)0x28);
  v1054[64] = 0xA0000000ALL;
  v1054[63] = v35;
  *(_OWORD *)v35 = xmmword_199189E78;
  *(_OWORD *)(v35 + 16) = unk_199189E88;
  *(_QWORD *)(v35 + 32) = 0x1F3FD0001F469;
  v36 = WTF::fastMalloc((WTF *)0x28);
  v1054[66] = 0xA0000000ALL;
  v1054[65] = v36;
  *(_OWORD *)v36 = xmmword_199189EA4;
  *(_OWORD *)(v36 + 16) = unk_199189EB4;
  *(_QWORD *)(v36 + 32) = 0x1F3FE0001F469;
  v37 = WTF::fastMalloc((WTF *)0x28);
  v1054[68] = 0xA0000000ALL;
  v1054[67] = v37;
  *(_OWORD *)v37 = xmmword_199189ED0;
  *(_OWORD *)(v37 + 16) = unk_199189EE0;
  *(_QWORD *)(v37 + 32) = 0x1F3FF0001F469;
  v38 = WTF::fastMalloc((WTF *)0x28);
  v1054[70] = 0xA0000000ALL;
  v1054[69] = v38;
  *(_OWORD *)v38 = xmmword_199189EFC;
  *(_OWORD *)(v38 + 16) = unk_199189F0C;
  *(_QWORD *)(v38 + 32) = 0x1F3FB0001F468;
  v39 = WTF::fastMalloc((WTF *)0x28);
  v1054[72] = 0xA0000000ALL;
  v1054[71] = v39;
  *(_OWORD *)v39 = xmmword_199189F28;
  *(_OWORD *)(v39 + 16) = unk_199189F38;
  *(_QWORD *)(v39 + 32) = 0x1F3FC0001F468;
  v40 = WTF::fastMalloc((WTF *)0x28);
  v1054[74] = 0xA0000000ALL;
  v1054[73] = v40;
  *(_OWORD *)v40 = xmmword_199189F54;
  *(_OWORD *)(v40 + 16) = unk_199189F64;
  *(_QWORD *)(v40 + 32) = 0x1F3FD0001F468;
  v41 = WTF::fastMalloc((WTF *)0x28);
  v1054[76] = 0xA0000000ALL;
  v1054[75] = v41;
  *(_OWORD *)v41 = xmmword_199189F80;
  *(_OWORD *)(v41 + 16) = unk_199189F90;
  *(_QWORD *)(v41 + 32) = 0x1F3FE0001F468;
  v42 = WTF::fastMalloc((WTF *)0x28);
  v1054[78] = 0xA0000000ALL;
  v1054[77] = v42;
  *(_OWORD *)v42 = xmmword_199189FAC;
  *(_OWORD *)(v42 + 16) = unk_199189FBC;
  *(_QWORD *)(v42 + 32) = 0x1F3FF0001F468;
  v43 = WTF::fastMalloc((WTF *)0x28);
  v1054[80] = 0xA0000000ALL;
  v1054[79] = v43;
  *(_OWORD *)v43 = xmmword_199189FD8;
  *(_OWORD *)(v43 + 16) = unk_199189FE8;
  *(_QWORD *)(v43 + 32) = 0x1F3FB0001F469;
  v44 = WTF::fastMalloc((WTF *)0x28);
  v1054[82] = 0xA0000000ALL;
  v1054[81] = v44;
  *(_OWORD *)v44 = xmmword_19918A004;
  *(_OWORD *)(v44 + 16) = unk_19918A014;
  *(_QWORD *)(v44 + 32) = 0x1F3FC0001F469;
  v45 = WTF::fastMalloc((WTF *)0x28);
  v1054[84] = 0xA0000000ALL;
  v1054[83] = v45;
  *(_OWORD *)v45 = xmmword_19918A030;
  *(_OWORD *)(v45 + 16) = unk_19918A040;
  *(_QWORD *)(v45 + 32) = 0x1F3FD0001F469;
  v46 = WTF::fastMalloc((WTF *)0x28);
  v1054[86] = 0xA0000000ALL;
  v1054[85] = v46;
  *(_OWORD *)v46 = xmmword_19918A05C;
  *(_OWORD *)(v46 + 16) = unk_19918A06C;
  *(_QWORD *)(v46 + 32) = 0x1F3FE0001F469;
  v47 = WTF::fastMalloc((WTF *)0x28);
  v1054[88] = 0xA0000000ALL;
  v1054[87] = v47;
  *(_OWORD *)v47 = xmmword_19918A088;
  *(_OWORD *)(v47 + 16) = unk_19918A098;
  *(_QWORD *)(v47 + 32) = 0x1F3FF0001F469;
  v48 = WTF::fastMalloc((WTF *)0x28);
  v1054[90] = 0xA0000000ALL;
  v1054[89] = v48;
  *(_OWORD *)v48 = xmmword_19918A0B4;
  *(_OWORD *)(v48 + 16) = unk_19918A0C4;
  *(_QWORD *)(v48 + 32) = 0x1F3FB0001F468;
  v49 = WTF::fastMalloc((WTF *)0x28);
  v1054[92] = 0xA0000000ALL;
  v1054[91] = v49;
  *(_OWORD *)v49 = xmmword_19918A0E0;
  *(_OWORD *)(v49 + 16) = unk_19918A0F0;
  *(_QWORD *)(v49 + 32) = 0x1F3FC0001F468;
  v50 = WTF::fastMalloc((WTF *)0x28);
  v1054[94] = 0xA0000000ALL;
  v1054[93] = v50;
  *(_OWORD *)v50 = xmmword_19918A10C;
  *(_OWORD *)(v50 + 16) = unk_19918A11C;
  *(_QWORD *)(v50 + 32) = 0x1F3FD0001F468;
  v51 = WTF::fastMalloc((WTF *)0x28);
  v1054[96] = 0xA0000000ALL;
  v1054[95] = v51;
  *(_OWORD *)v51 = xmmword_19918A138;
  *(_OWORD *)(v51 + 16) = unk_19918A148;
  *(_QWORD *)(v51 + 32) = 0x1F3FE0001F468;
  v52 = WTF::fastMalloc((WTF *)0x28);
  v1054[98] = 0xA0000000ALL;
  v1054[97] = v52;
  *(_OWORD *)v52 = xmmword_19918A164;
  *(_OWORD *)(v52 + 16) = unk_19918A174;
  *(_QWORD *)(v52 + 32) = 0x1F3FF0001F468;
  v53 = WTF::fastMalloc((WTF *)0x28);
  v1054[100] = 0xA0000000ALL;
  v1054[99] = v53;
  *(_OWORD *)v53 = xmmword_19918A190;
  *(_OWORD *)(v53 + 16) = unk_19918A1A0;
  *(_QWORD *)(v53 + 32) = 0x1F3FB0001F469;
  v54 = WTF::fastMalloc((WTF *)0x28);
  v1054[102] = 0xA0000000ALL;
  v1054[101] = v54;
  *(_OWORD *)v54 = xmmword_19918A1BC;
  *(_OWORD *)(v54 + 16) = unk_19918A1CC;
  *(_QWORD *)(v54 + 32) = 0x1F3FC0001F469;
  v55 = WTF::fastMalloc((WTF *)0x28);
  v1054[104] = 0xA0000000ALL;
  v1054[103] = v55;
  *(_OWORD *)v55 = xmmword_19918A1E8;
  *(_OWORD *)(v55 + 16) = unk_19918A1F8;
  *(_QWORD *)(v55 + 32) = 0x1F3FD0001F469;
  v56 = WTF::fastMalloc((WTF *)0x28);
  v1054[106] = 0xA0000000ALL;
  v1054[105] = v56;
  *(_OWORD *)v56 = xmmword_19918A214;
  *(_OWORD *)(v56 + 16) = unk_19918A224;
  *(_QWORD *)(v56 + 32) = 0x1F3FE0001F469;
  v57 = WTF::fastMalloc((WTF *)0x28);
  v1054[108] = 0xA0000000ALL;
  v1054[107] = v57;
  *(_OWORD *)v57 = xmmword_19918A240;
  *(_OWORD *)(v57 + 16) = unk_19918A250;
  *(_QWORD *)(v57 + 32) = 0x1F3FF0001F469;
  v58 = WTF::fastMalloc((WTF *)0x28);
  v1054[110] = 0xA0000000ALL;
  v1054[109] = v58;
  *(_OWORD *)v58 = xmmword_19918A26C;
  *(_OWORD *)(v58 + 16) = unk_19918A27C;
  *(_QWORD *)(v58 + 32) = 0x1F3FB0001F468;
  v59 = WTF::fastMalloc((WTF *)0x28);
  v1054[112] = 0xA0000000ALL;
  v1054[111] = v59;
  *(_OWORD *)v59 = xmmword_19918A298;
  *(_OWORD *)(v59 + 16) = unk_19918A2A8;
  *(_QWORD *)(v59 + 32) = 0x1F3FC0001F468;
  v60 = WTF::fastMalloc((WTF *)0x28);
  v1054[114] = 0xA0000000ALL;
  v1054[113] = v60;
  *(_OWORD *)v60 = xmmword_19918A2C4;
  *(_OWORD *)(v60 + 16) = unk_19918A2D4;
  *(_QWORD *)(v60 + 32) = 0x1F3FD0001F468;
  v61 = WTF::fastMalloc((WTF *)0x28);
  v1054[116] = 0xA0000000ALL;
  v1054[115] = v61;
  *(_OWORD *)v61 = xmmword_19918A2F0;
  *(_OWORD *)(v61 + 16) = unk_19918A300;
  *(_QWORD *)(v61 + 32) = 0x1F3FE0001F468;
  v62 = WTF::fastMalloc((WTF *)0x28);
  v1054[118] = 0xA0000000ALL;
  v1054[117] = v62;
  *(_OWORD *)v62 = xmmword_19918A31C;
  *(_OWORD *)(v62 + 16) = unk_19918A32C;
  *(_QWORD *)(v62 + 32) = 0x1F3FF0001F468;
  v63 = WTF::fastMalloc((WTF *)0x28);
  v1054[120] = 0xA0000000ALL;
  v1054[119] = v63;
  *(_OWORD *)v63 = xmmword_19918A348;
  *(_OWORD *)(v63 + 16) = unk_19918A358;
  *(_QWORD *)(v63 + 32) = 0x1F3FB0001F469;
  v64 = WTF::fastMalloc((WTF *)0x28);
  v1054[122] = 0xA0000000ALL;
  v1054[121] = v64;
  *(_OWORD *)v64 = xmmword_19918A374;
  *(_OWORD *)(v64 + 16) = unk_19918A384;
  *(_QWORD *)(v64 + 32) = 0x1F3FC0001F469;
  v65 = WTF::fastMalloc((WTF *)0x28);
  v1054[124] = 0xA0000000ALL;
  v1054[123] = v65;
  *(_OWORD *)v65 = xmmword_19918A3A0;
  *(_OWORD *)(v65 + 16) = unk_19918A3B0;
  *(_QWORD *)(v65 + 32) = 0x1F3FD0001F469;
  v66 = WTF::fastMalloc((WTF *)0x28);
  v1054[126] = 0xA0000000ALL;
  v1054[125] = v66;
  *(_OWORD *)v66 = xmmword_19918A3CC;
  *(_OWORD *)(v66 + 16) = unk_19918A3DC;
  *(_QWORD *)(v66 + 32) = 0x1F3FE0001F469;
  v67 = WTF::fastMalloc((WTF *)0x28);
  v1054[128] = 0xA0000000ALL;
  v1054[127] = v67;
  *(_OWORD *)v67 = xmmword_19918A3F8;
  *(_OWORD *)(v67 + 16) = unk_19918A408;
  *(_QWORD *)(v67 + 32) = 0x1F3FF0001F469;
  v68 = WTF::fastMalloc((WTF *)0x28);
  v1054[130] = 0xA0000000ALL;
  v1054[129] = v68;
  *(_OWORD *)v68 = xmmword_19918A424;
  *(_OWORD *)(v68 + 16) = unk_19918A434;
  *(_QWORD *)(v68 + 32) = 0x1F3FB0001F468;
  v69 = WTF::fastMalloc((WTF *)0x28);
  v1054[132] = 0xA0000000ALL;
  v1054[131] = v69;
  *(_OWORD *)v69 = xmmword_19918A450;
  *(_OWORD *)(v69 + 16) = unk_19918A460;
  *(_QWORD *)(v69 + 32) = 0x1F3FC0001F468;
  v70 = WTF::fastMalloc((WTF *)0x28);
  v1054[134] = 0xA0000000ALL;
  v1054[133] = v70;
  *(_OWORD *)v70 = xmmword_19918A47C;
  *(_OWORD *)(v70 + 16) = unk_19918A48C;
  *(_QWORD *)(v70 + 32) = 0x1F3FD0001F468;
  v71 = WTF::fastMalloc((WTF *)0x28);
  v1054[136] = 0xA0000000ALL;
  v1054[135] = v71;
  *(_OWORD *)v71 = xmmword_19918A4A8;
  *(_OWORD *)(v71 + 16) = unk_19918A4B8;
  *(_QWORD *)(v71 + 32) = 0x1F3FE0001F468;
  v72 = WTF::fastMalloc((WTF *)0x28);
  v1054[138] = 0xA0000000ALL;
  v1054[137] = v72;
  *(_OWORD *)v72 = xmmword_19918A4D4;
  *(_OWORD *)(v72 + 16) = unk_19918A4E4;
  *(_QWORD *)(v72 + 32) = 0x1F3FF0001F468;
  v73 = WTF::fastMalloc((WTF *)0x28);
  v1054[140] = 0xA0000000ALL;
  v1054[139] = v73;
  *(_OWORD *)v73 = xmmword_19918A500;
  *(_OWORD *)(v73 + 16) = unk_19918A510;
  *(_QWORD *)(v73 + 32) = 0x1F3FB0001F469;
  v74 = WTF::fastMalloc((WTF *)0x28);
  v1054[142] = 0xA0000000ALL;
  v1054[141] = v74;
  *(_OWORD *)v74 = xmmword_19918A52C;
  *(_OWORD *)(v74 + 16) = unk_19918A53C;
  *(_QWORD *)(v74 + 32) = 0x1F3FC0001F469;
  v75 = WTF::fastMalloc((WTF *)0x28);
  v1054[144] = 0xA0000000ALL;
  v1054[143] = v75;
  *(_OWORD *)v75 = xmmword_19918A558;
  *(_OWORD *)(v75 + 16) = unk_19918A568;
  *(_QWORD *)(v75 + 32) = 0x1F3FD0001F469;
  v76 = WTF::fastMalloc((WTF *)0x28);
  v1054[146] = 0xA0000000ALL;
  v1054[145] = v76;
  *(_OWORD *)v76 = xmmword_19918A584;
  *(_OWORD *)(v76 + 16) = unk_19918A594;
  *(_QWORD *)(v76 + 32) = 0x1F3FE0001F469;
  v77 = WTF::fastMalloc((WTF *)0x28);
  v1054[148] = 0xA0000000ALL;
  v1054[147] = v77;
  *(_OWORD *)v77 = xmmword_19918A5B0;
  *(_OWORD *)(v77 + 16) = unk_19918A5C0;
  *(_QWORD *)(v77 + 32) = 0x1F3FF0001F469;
  v78 = WTF::fastMalloc((WTF *)0x28);
  v1054[150] = 0xA0000000ALL;
  v1054[149] = v78;
  *(_OWORD *)v78 = xmmword_19918A5DC;
  *(_OWORD *)(v78 + 16) = unk_19918A5EC;
  *(_QWORD *)(v78 + 32) = 0x1F3FC0001F9D1;
  v79 = WTF::fastMalloc((WTF *)0x28);
  v1054[152] = 0xA0000000ALL;
  v1054[151] = v79;
  *(_OWORD *)v79 = xmmword_19918A608;
  *(_OWORD *)(v79 + 16) = unk_19918A618;
  *(_QWORD *)(v79 + 32) = 0x1F3FD0001F9D1;
  v80 = WTF::fastMalloc((WTF *)0x28);
  v1054[154] = 0xA0000000ALL;
  v1054[153] = v80;
  *(_OWORD *)v80 = xmmword_19918A634;
  *(_OWORD *)(v80 + 16) = unk_19918A644;
  *(_QWORD *)(v80 + 32) = 0x1F3FE0001F9D1;
  v81 = WTF::fastMalloc((WTF *)0x28);
  v1054[156] = 0xA0000000ALL;
  v1054[155] = v81;
  *(_OWORD *)v81 = xmmword_19918A660;
  *(_OWORD *)(v81 + 16) = unk_19918A670;
  *(_QWORD *)(v81 + 32) = 0x1F3FF0001F9D1;
  v82 = WTF::fastMalloc((WTF *)0x28);
  v1054[158] = 0xA0000000ALL;
  v1054[157] = v82;
  *(_OWORD *)v82 = xmmword_19918A68C;
  *(_OWORD *)(v82 + 16) = unk_19918A69C;
  *(_QWORD *)(v82 + 32) = 0x1F3FB0001F9D1;
  v83 = WTF::fastMalloc((WTF *)0x28);
  v1054[160] = 0xA0000000ALL;
  v1054[159] = v83;
  *(_OWORD *)v83 = xmmword_19918A6B8;
  *(_OWORD *)(v83 + 16) = unk_19918A6C8;
  *(_QWORD *)(v83 + 32) = 0x1F3FD0001F9D1;
  v84 = WTF::fastMalloc((WTF *)0x28);
  v1054[162] = 0xA0000000ALL;
  v1054[161] = v84;
  *(_OWORD *)v84 = xmmword_19918A6E4;
  *(_OWORD *)(v84 + 16) = unk_19918A6F4;
  *(_QWORD *)(v84 + 32) = 0x1F3FE0001F9D1;
  v85 = WTF::fastMalloc((WTF *)0x28);
  v1054[164] = 0xA0000000ALL;
  v1054[163] = v85;
  *(_OWORD *)v85 = xmmword_19918A710;
  *(_OWORD *)(v85 + 16) = unk_19918A720;
  *(_QWORD *)(v85 + 32) = 0x1F3FF0001F9D1;
  v86 = WTF::fastMalloc((WTF *)0x28);
  v1054[166] = 0xA0000000ALL;
  v1054[165] = v86;
  *(_OWORD *)v86 = xmmword_19918A73C;
  *(_OWORD *)(v86 + 16) = unk_19918A74C;
  *(_QWORD *)(v86 + 32) = 0x1F3FB0001F9D1;
  v87 = WTF::fastMalloc((WTF *)0x28);
  v1054[168] = 0xA0000000ALL;
  v1054[167] = v87;
  *(_OWORD *)v87 = xmmword_19918A768;
  *(_OWORD *)(v87 + 16) = unk_19918A778;
  *(_QWORD *)(v87 + 32) = 0x1F3FC0001F9D1;
  v88 = WTF::fastMalloc((WTF *)0x28);
  v1054[170] = 0xA0000000ALL;
  v1054[169] = v88;
  *(_OWORD *)v88 = xmmword_19918A794;
  *(_OWORD *)(v88 + 16) = unk_19918A7A4;
  *(_QWORD *)(v88 + 32) = 0x1F3FE0001F9D1;
  v89 = WTF::fastMalloc((WTF *)0x28);
  v1054[172] = 0xA0000000ALL;
  v1054[171] = v89;
  *(_OWORD *)v89 = xmmword_19918A7C0;
  *(_OWORD *)(v89 + 16) = unk_19918A7D0;
  *(_QWORD *)(v89 + 32) = 0x1F3FF0001F9D1;
  v90 = WTF::fastMalloc((WTF *)0x28);
  v1054[174] = 0xA0000000ALL;
  v1054[173] = v90;
  *(_OWORD *)v90 = xmmword_19918A7EC;
  *(_OWORD *)(v90 + 16) = unk_19918A7FC;
  *(_QWORD *)(v90 + 32) = 0x1F3FB0001F9D1;
  v91 = WTF::fastMalloc((WTF *)0x28);
  v1054[176] = 0xA0000000ALL;
  v1054[175] = v91;
  *(_OWORD *)v91 = xmmword_19918A818;
  *(_OWORD *)(v91 + 16) = unk_19918A828;
  *(_QWORD *)(v91 + 32) = 0x1F3FC0001F9D1;
  v92 = WTF::fastMalloc((WTF *)0x28);
  v1054[178] = 0xA0000000ALL;
  v1054[177] = v92;
  *(_OWORD *)v92 = xmmword_19918A844;
  *(_OWORD *)(v92 + 16) = unk_19918A854;
  *(_QWORD *)(v92 + 32) = 0x1F3FD0001F9D1;
  v93 = WTF::fastMalloc((WTF *)0x28);
  v1054[180] = 0xA0000000ALL;
  v1054[179] = v93;
  *(_OWORD *)v93 = xmmword_19918A870;
  *(_OWORD *)(v93 + 16) = unk_19918A880;
  *(_QWORD *)(v93 + 32) = 0x1F3FF0001F9D1;
  v94 = WTF::fastMalloc((WTF *)0x28);
  v1054[182] = 0xA0000000ALL;
  v1054[181] = v94;
  *(_OWORD *)v94 = xmmword_19918A89C;
  *(_OWORD *)(v94 + 16) = unk_19918A8AC;
  *(_QWORD *)(v94 + 32) = 0x1F3FB0001F9D1;
  v95 = WTF::fastMalloc((WTF *)0x28);
  v1054[184] = 0xA0000000ALL;
  v1054[183] = v95;
  *(_OWORD *)v95 = xmmword_19918A8C8;
  *(_OWORD *)(v95 + 16) = unk_19918A8D8;
  *(_QWORD *)(v95 + 32) = 0x1F3FC0001F9D1;
  v96 = WTF::fastMalloc((WTF *)0x28);
  v1054[186] = 0xA0000000ALL;
  v1054[185] = v96;
  *(_OWORD *)v96 = xmmword_19918A8F4;
  *(_OWORD *)(v96 + 16) = unk_19918A904;
  *(_QWORD *)(v96 + 32) = 0x1F3FD0001F9D1;
  v97 = WTF::fastMalloc((WTF *)0x28);
  v1054[188] = 0xA0000000ALL;
  v1054[187] = v97;
  *(_OWORD *)v97 = xmmword_19918A920;
  *(_OWORD *)(v97 + 16) = unk_19918A930;
  *(_QWORD *)(v97 + 32) = 0x1F3FE0001F9D1;
  v98 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[190] = 0x800000008;
  v1054[189] = v98;
  *v98 = xmmword_19918A94C;
  v98[1] = unk_19918A95C;
  v99 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[192] = 0x800000008;
  v1054[191] = v99;
  *v99 = xmmword_19918A970;
  v99[1] = unk_19918A980;
  v100 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[194] = 0x800000008;
  v1054[193] = v100;
  *v100 = xmmword_19918A994;
  v100[1] = unk_19918A9A4;
  v101 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[196] = 0x800000008;
  v1054[195] = v101;
  *v101 = xmmword_19918A9B8;
  v101[1] = unk_19918A9C8;
  v102 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[198] = 0x800000008;
  v1054[197] = v102;
  *v102 = xmmword_19918A9DC;
  v102[1] = unk_19918A9EC;
  v103 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[200] = 0x800000008;
  v1054[199] = v103;
  *v103 = xmmword_19918AA00;
  v103[1] = unk_19918AA10;
  v104 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[202] = 0x800000008;
  v1054[201] = v104;
  *v104 = xmmword_19918AA24;
  v104[1] = unk_19918AA34;
  v105 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[204] = 0x800000008;
  v1054[203] = v105;
  *v105 = xmmword_19918AA48;
  v105[1] = unk_19918AA58;
  v106 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[206] = 0x800000008;
  v1054[205] = v106;
  *v106 = xmmword_19918AA6C;
  v106[1] = unk_19918AA7C;
  v107 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[208] = 0x800000008;
  v1054[207] = v107;
  *v107 = xmmword_19918AA90;
  v107[1] = unk_19918AAA0;
  v108 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[210] = 0x800000008;
  v1054[209] = v108;
  *v108 = xmmword_19918AAB4;
  v108[1] = unk_19918AAC4;
  v109 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[212] = 0x800000008;
  v1054[211] = v109;
  *v109 = xmmword_19918AAD8;
  v109[1] = unk_19918AAE8;
  v110 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[214] = 0x800000008;
  v1054[213] = v110;
  *v110 = xmmword_19918AAFC;
  v110[1] = unk_19918AB0C;
  v111 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[216] = 0x800000008;
  v1054[215] = v111;
  *v111 = xmmword_19918AB20;
  v111[1] = unk_19918AB30;
  v112 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[218] = 0x800000008;
  v1054[217] = v112;
  *v112 = xmmword_19918AB44;
  v112[1] = unk_19918AB54;
  v113 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[220] = 0x800000008;
  v1054[219] = v113;
  *v113 = xmmword_19918AB68;
  v113[1] = unk_19918AB78;
  v114 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[222] = 0x800000008;
  v1054[221] = v114;
  *v114 = xmmword_19918AB8C;
  v114[1] = unk_19918AB9C;
  v115 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[224] = 0x800000008;
  v1054[223] = v115;
  *v115 = xmmword_19918ABB0;
  v115[1] = unk_19918ABC0;
  v116 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[226] = 0x800000008;
  v1054[225] = v116;
  *v116 = xmmword_19918ABD4;
  v116[1] = unk_19918ABE4;
  v117 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[228] = 0x800000008;
  v1054[227] = v117;
  *v117 = xmmword_19918ABF8;
  v117[1] = unk_19918AC08;
  v118 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[230] = 0x800000008;
  v1054[229] = v118;
  *v118 = xmmword_19918AC1C;
  v118[1] = unk_19918AC2C;
  v119 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[232] = 0x800000008;
  v1054[231] = v119;
  *v119 = xmmword_19918AC40;
  v119[1] = unk_19918AC50;
  v120 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[234] = 0x800000008;
  v1054[233] = v120;
  *v120 = xmmword_19918AC64;
  v120[1] = unk_19918AC74;
  v121 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[236] = 0x800000008;
  v1054[235] = v121;
  *v121 = xmmword_19918AC88;
  v121[1] = unk_19918AC98;
  v122 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[238] = 0x800000008;
  v1054[237] = v122;
  *v122 = xmmword_19918ACAC;
  v122[1] = unk_19918ACBC;
  v123 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[240] = 0x800000008;
  v1054[239] = v123;
  *v123 = xmmword_19918ACD0;
  v123[1] = unk_19918ACE0;
  v124 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[242] = 0x800000008;
  v1054[241] = v124;
  *v124 = xmmword_19918ACF4;
  v124[1] = unk_19918AD04;
  v125 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[244] = 0x800000008;
  v1054[243] = v125;
  *v125 = xmmword_19918AD18;
  v125[1] = unk_19918AD28;
  v126 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[246] = 0x800000008;
  v1054[245] = v126;
  *v126 = xmmword_19918AD3C;
  v126[1] = unk_19918AD4C;
  v127 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[248] = 0x800000008;
  v1054[247] = v127;
  *v127 = xmmword_19918AD60;
  v127[1] = unk_19918AD70;
  v128 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[250] = 0x800000008;
  v1054[249] = v128;
  *v128 = xmmword_19918AD84;
  v128[1] = unk_19918AD94;
  v129 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[252] = 0x800000008;
  v1054[251] = v129;
  *v129 = xmmword_19918ADA8;
  v129[1] = unk_19918ADB8;
  v130 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[254] = 0x800000008;
  v1054[253] = v130;
  *v130 = xmmword_19918ADCC;
  v130[1] = unk_19918ADDC;
  v131 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[256] = 0x800000008;
  v1054[255] = v131;
  *v131 = xmmword_19918ADF0;
  v131[1] = unk_19918AE00;
  v132 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[258] = 0x800000008;
  v1054[257] = v132;
  *v132 = xmmword_19918AE14;
  v132[1] = unk_19918AE24;
  v133 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[260] = 0x800000008;
  v1054[259] = v133;
  *v133 = xmmword_19918AE38;
  v133[1] = unk_19918AE48;
  v134 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[262] = 0x800000008;
  v1054[261] = v134;
  *v134 = xmmword_19918AE5C;
  v134[1] = unk_19918AE6C;
  v135 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[264] = 0x800000008;
  v1054[263] = v135;
  *v135 = xmmword_19918AE80;
  v135[1] = unk_19918AE90;
  v136 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[266] = 0x800000008;
  v1054[265] = v136;
  *v136 = xmmword_19918AEA4;
  v136[1] = unk_19918AEB4;
  v137 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[268] = 0x800000008;
  v1054[267] = v137;
  *v137 = xmmword_19918AEC8;
  v137[1] = unk_19918AED8;
  v138 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[270] = 0x800000008;
  v1054[269] = v138;
  *v138 = xmmword_19918AEEC;
  v138[1] = unk_19918AEFC;
  v139 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[272] = 0x800000008;
  v1054[271] = v139;
  *v139 = xmmword_19918AF10;
  v139[1] = unk_19918AF20;
  v140 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[274] = 0x800000008;
  v1054[273] = v140;
  *v140 = xmmword_19918AF34;
  v140[1] = unk_19918AF44;
  v141 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[276] = 0x800000008;
  v1054[275] = v141;
  *v141 = xmmword_19918AF58;
  v141[1] = unk_19918AF68;
  v142 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[278] = 0x800000008;
  v1054[277] = v142;
  *v142 = xmmword_19918AF7C;
  v142[1] = unk_19918AF8C;
  v143 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[280] = 0x800000008;
  v1054[279] = v143;
  *v143 = xmmword_19918AFA0;
  v143[1] = unk_19918AFB0;
  v144 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[282] = 0x800000008;
  v1054[281] = v144;
  *v144 = xmmword_19918AFC4;
  v144[1] = unk_19918AFD4;
  v145 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[284] = 0x800000008;
  v1054[283] = v145;
  *v145 = xmmword_19918AFE8;
  v145[1] = unk_19918AFF8;
  v146 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[286] = 0x800000008;
  v1054[285] = v146;
  *v146 = xmmword_19918B00C;
  v146[1] = unk_19918B01C;
  v147 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[288] = 0x800000008;
  v1054[287] = v147;
  *v147 = xmmword_19918B030;
  v147[1] = unk_19918B040;
  v148 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[290] = 0x800000008;
  v1054[289] = v148;
  *v148 = xmmword_19918B054;
  v148[1] = unk_19918B064;
  v149 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[292] = 0x800000008;
  v1054[291] = v149;
  *v149 = xmmword_19918B078;
  v149[1] = unk_19918B088;
  v150 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[294] = 0x800000008;
  v1054[293] = v150;
  *v150 = xmmword_19918B09C;
  v150[1] = unk_19918B0AC;
  v151 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[296] = 0x800000008;
  v1054[295] = v151;
  *v151 = xmmword_19918B0C0;
  v151[1] = unk_19918B0D0;
  v152 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[298] = 0x800000008;
  v1054[297] = v152;
  *v152 = xmmword_19918B0E4;
  v152[1] = unk_19918B0F4;
  v153 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[300] = 0x800000008;
  v1054[299] = v153;
  *v153 = xmmword_19918B108;
  v153[1] = unk_19918B118;
  v154 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[302] = 0x800000008;
  v1054[301] = v154;
  *v154 = xmmword_19918B12C;
  v154[1] = unk_19918B13C;
  v155 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[304] = 0x800000008;
  v1054[303] = v155;
  *v155 = xmmword_19918B150;
  v155[1] = unk_19918B160;
  v156 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[306] = 0x800000008;
  v1054[305] = v156;
  *v156 = xmmword_19918B174;
  v156[1] = unk_19918B184;
  v157 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[308] = 0x800000008;
  v1054[307] = v157;
  *v157 = xmmword_19918B198;
  v157[1] = unk_19918B1A8;
  v158 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[310] = 0x800000008;
  v1054[309] = v158;
  *v158 = xmmword_19918B1BC;
  v158[1] = unk_19918B1CC;
  v159 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[312] = 0x800000008;
  v1054[311] = v159;
  *v159 = xmmword_19918B1E0;
  v159[1] = unk_19918B1F0;
  v160 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[314] = 0x800000008;
  v1054[313] = v160;
  *v160 = xmmword_19918B204;
  v160[1] = unk_19918B214;
  v161 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[316] = 0x800000008;
  v1054[315] = v161;
  *v161 = xmmword_19918B228;
  v161[1] = unk_19918B238;
  v162 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[318] = 0x800000008;
  v1054[317] = v162;
  *v162 = xmmword_19918B24C;
  v162[1] = unk_19918B25C;
  v163 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[320] = 0x800000008;
  v1054[319] = v163;
  *v163 = xmmword_19918B270;
  v163[1] = unk_19918B280;
  v164 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[322] = 0x800000008;
  v1054[321] = v164;
  *v164 = xmmword_19918B294;
  v164[1] = unk_19918B2A4;
  v165 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[324] = 0x800000008;
  v1054[323] = v165;
  *v165 = xmmword_19918B2B8;
  v165[1] = unk_19918B2C8;
  v166 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[326] = 0x800000008;
  v1054[325] = v166;
  *v166 = xmmword_19918B2DC;
  v166[1] = unk_19918B2EC;
  v167 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[328] = 0x800000008;
  v1054[327] = v167;
  *v167 = xmmword_19918B300;
  v167[1] = unk_19918B310;
  v168 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[330] = 0x800000008;
  v1054[329] = v168;
  *v168 = xmmword_19918B324;
  v168[1] = unk_19918B334;
  v169 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[332] = 0x800000008;
  v1054[331] = v169;
  *v169 = xmmword_19918B348;
  v169[1] = unk_19918B358;
  v170 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[334] = 0x800000008;
  v1054[333] = v170;
  *v170 = xmmword_19918B36C;
  v170[1] = unk_19918B37C;
  v171 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[336] = 0x800000008;
  v1054[335] = v171;
  *v171 = xmmword_19918B390;
  v171[1] = unk_19918B3A0;
  v172 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[338] = 0x800000008;
  v1054[337] = v172;
  *v172 = xmmword_19918B3B4;
  v172[1] = unk_19918B3C4;
  v173 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[340] = 0x800000008;
  v1054[339] = v173;
  *v173 = xmmword_19918B3D8;
  v173[1] = unk_19918B3E8;
  v174 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[342] = 0x800000008;
  v1054[341] = v174;
  *v174 = xmmword_19918B3FC;
  v174[1] = unk_19918B40C;
  v175 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[344] = 0x800000008;
  v1054[343] = v175;
  *v175 = xmmword_19918B420;
  v175[1] = unk_19918B430;
  v176 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[346] = 0x800000008;
  v1054[345] = v176;
  *v176 = xmmword_19918B444;
  v176[1] = unk_19918B454;
  v177 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[348] = 0x800000008;
  v1054[347] = v177;
  *v177 = xmmword_19918B468;
  v177[1] = unk_19918B478;
  v178 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[350] = 0x800000008;
  v1054[349] = v178;
  *v178 = xmmword_19918B48C;
  v178[1] = unk_19918B49C;
  v179 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[352] = 0x800000008;
  v1054[351] = v179;
  *v179 = xmmword_19918B4B0;
  v179[1] = unk_19918B4C0;
  v180 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[354] = 0x800000008;
  v1054[353] = v180;
  *v180 = xmmword_19918B4D4;
  v180[1] = unk_19918B4E4;
  v181 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[356] = 0x800000008;
  v1054[355] = v181;
  *v181 = xmmword_19918B4F8;
  v181[1] = unk_19918B508;
  v182 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[358] = 0x800000008;
  v1054[357] = v182;
  *v182 = xmmword_19918B51C;
  v182[1] = unk_19918B52C;
  v183 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[360] = 0x800000008;
  v1054[359] = v183;
  *v183 = xmmword_19918B540;
  v183[1] = unk_19918B550;
  v184 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[362] = 0x800000008;
  v1054[361] = v184;
  *v184 = xmmword_19918B564;
  v184[1] = unk_19918B574;
  v185 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[364] = 0x800000008;
  v1054[363] = v185;
  *v185 = xmmword_19918B588;
  v185[1] = unk_19918B598;
  v186 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[366] = 0x800000008;
  v1054[365] = v186;
  *v186 = xmmword_19918B5AC;
  v186[1] = unk_19918B5BC;
  v187 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[368] = 0x800000008;
  v1054[367] = v187;
  *v187 = xmmword_19918B5D0;
  v187[1] = unk_19918B5E0;
  v188 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[370] = 0x800000008;
  v1054[369] = v188;
  *v188 = xmmword_19918B5F4;
  v188[1] = unk_19918B604;
  v189 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[372] = 0x800000008;
  v1054[371] = v189;
  *v189 = xmmword_19918B618;
  v189[1] = unk_19918B628;
  v190 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[374] = 0x800000008;
  v1054[373] = v190;
  *v190 = xmmword_19918B63C;
  v190[1] = unk_19918B64C;
  v191 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[376] = 0x800000008;
  v1054[375] = v191;
  *v191 = xmmword_19918B660;
  v191[1] = unk_19918B670;
  v192 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[378] = 0x800000008;
  v1054[377] = v192;
  *v192 = xmmword_19918B684;
  v192[1] = unk_19918B694;
  v193 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[380] = 0x800000008;
  v1054[379] = v193;
  *v193 = xmmword_19918B6A8;
  v193[1] = unk_19918B6B8;
  v194 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[382] = 0x800000008;
  v1054[381] = v194;
  *v194 = xmmword_19918B6CC;
  v194[1] = unk_19918B6DC;
  v195 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[384] = 0x800000008;
  v1054[383] = v195;
  *v195 = xmmword_19918B6F0;
  v195[1] = unk_19918B700;
  v196 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[386] = 0x800000008;
  v1054[385] = v196;
  *v196 = xmmword_19918B714;
  v196[1] = unk_19918B724;
  v197 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[388] = 0x800000008;
  v1054[387] = v197;
  *v197 = xmmword_19918B738;
  v197[1] = unk_19918B748;
  v198 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[390] = 0x800000008;
  v1054[389] = v198;
  *v198 = xmmword_19918B75C;
  v198[1] = unk_19918B76C;
  v199 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[392] = 0x800000008;
  v1054[391] = v199;
  *v199 = xmmword_19918B780;
  v199[1] = unk_19918B790;
  v200 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[394] = 0x800000008;
  v1054[393] = v200;
  *v200 = xmmword_19918B7A4;
  v200[1] = unk_19918B7B4;
  v201 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[396] = 0x800000008;
  v1054[395] = v201;
  *v201 = xmmword_19918B7C8;
  v201[1] = unk_19918B7D8;
  v202 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[398] = 0x800000008;
  v1054[397] = v202;
  *v202 = xmmword_19918B7EC;
  v202[1] = unk_19918B7FC;
  v203 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[400] = 0x800000008;
  v1054[399] = v203;
  *v203 = xmmword_19918B810;
  v203[1] = unk_19918B820;
  v204 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[402] = 0x800000008;
  v1054[401] = v204;
  *v204 = xmmword_19918B834;
  v204[1] = unk_19918B844;
  v205 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[404] = 0x800000008;
  v1054[403] = v205;
  *v205 = xmmword_19918B858;
  v205[1] = unk_19918B868;
  v206 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[406] = 0x800000008;
  v1054[405] = v206;
  *v206 = xmmword_19918B87C;
  v206[1] = unk_19918B88C;
  v207 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[408] = 0x800000008;
  v1054[407] = v207;
  *v207 = xmmword_19918B8A0;
  v207[1] = unk_19918B8B0;
  v208 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[410] = 0x800000008;
  v1054[409] = v208;
  *v208 = xmmword_19918B8C4;
  v208[1] = unk_19918B8D4;
  v209 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[412] = 0x800000008;
  v1054[411] = v209;
  *v209 = xmmword_19918B8E8;
  v209[1] = unk_19918B8F8;
  v210 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[414] = 0x800000008;
  v1054[413] = v210;
  *v210 = xmmword_19918B90C;
  v210[1] = unk_19918B91C;
  v211 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[416] = 0x800000008;
  v1054[415] = v211;
  *v211 = xmmword_19918B930;
  v211[1] = unk_19918B940;
  v212 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[418] = 0x800000008;
  v1054[417] = v212;
  *v212 = xmmword_19918B954;
  v212[1] = unk_19918B964;
  v213 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[420] = 0x800000008;
  v1054[419] = v213;
  *v213 = xmmword_19918B978;
  v213[1] = unk_19918B988;
  v214 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[422] = 0x800000008;
  v1054[421] = v214;
  *v214 = xmmword_19918B99C;
  v214[1] = unk_19918B9AC;
  v215 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[424] = 0x800000008;
  v1054[423] = v215;
  *v215 = xmmword_19918B9C0;
  v215[1] = unk_19918B9D0;
  v216 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[426] = 0x800000008;
  v1054[425] = v216;
  *v216 = xmmword_19918B9E4;
  v216[1] = unk_19918B9F4;
  v217 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[428] = 0x800000008;
  v1054[427] = v217;
  *v217 = xmmword_19918BA08;
  v217[1] = unk_19918BA18;
  v218 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[430] = 0x800000008;
  v1054[429] = v218;
  *v218 = xmmword_19918BA2C;
  v218[1] = unk_19918BA3C;
  v219 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[432] = 0x800000008;
  v1054[431] = v219;
  *v219 = xmmword_19918BA50;
  v219[1] = unk_19918BA60;
  v220 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[434] = 0x800000008;
  v1054[433] = v220;
  *v220 = xmmword_19918BA74;
  v220[1] = unk_19918BA84;
  v221 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[436] = 0x800000008;
  v1054[435] = v221;
  *v221 = xmmword_19918BA98;
  v221[1] = unk_19918BAA8;
  v222 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[438] = 0x800000008;
  v1054[437] = v222;
  *v222 = xmmword_19918BABC;
  v222[1] = unk_19918BACC;
  v223 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[440] = 0x800000008;
  v1054[439] = v223;
  *v223 = xmmword_19918BAE0;
  v223[1] = unk_19918BAF0;
  v224 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[442] = 0x800000008;
  v1054[441] = v224;
  *v224 = xmmword_19918BB04;
  v224[1] = unk_19918BB14;
  v225 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v1054[444] = 0x800000008;
  v1054[443] = v225;
  *v225 = xmmword_19918BB28;
  v225[1] = unk_19918BB38;
  v226 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[446] = 0x700000007;
  v1054[445] = v226;
  *v226 = xmmword_19918BB4C;
  *(_OWORD *)((char *)v226 + 12) = *(__int128 *)((char *)&xmmword_19918BB4C + 12);
  v227 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[448] = 0x700000007;
  v1054[447] = v227;
  *v227 = xmmword_19918BB6C;
  *(_OWORD *)((char *)v227 + 12) = *(__int128 *)((char *)&xmmword_19918BB6C + 12);
  v228 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[450] = 0x700000007;
  v1054[449] = v228;
  *v228 = xmmword_19918BBEC;
  *(_OWORD *)((char *)v228 + 12) = *(__int128 *)((char *)&xmmword_19918BBEC + 12);
  v229 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[452] = 0x700000007;
  v1054[451] = v229;
  *v229 = xmmword_19918BC0C;
  *(_OWORD *)((char *)v229 + 12) = *(__int128 *)((char *)&xmmword_19918BC0C + 12);
  v230 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[454] = 0x700000007;
  v1054[453] = v230;
  *v230 = xmmword_19918BC2C;
  *(_OWORD *)((char *)v230 + 12) = *(__int128 *)((char *)&xmmword_19918BC2C + 12);
  v231 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[456] = 0x700000007;
  v1054[455] = v231;
  *v231 = xmmword_19918BC4C;
  *(_OWORD *)((char *)v231 + 12) = *(__int128 *)((char *)&xmmword_19918BC4C + 12);
  v232 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[458] = 0x700000007;
  v1054[457] = v232;
  *v232 = xmmword_19918BC6C;
  *(_OWORD *)((char *)v232 + 12) = *(__int128 *)((char *)&xmmword_19918BC6C + 12);
  v233 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[460] = 0x700000007;
  v1054[459] = v233;
  *v233 = xmmword_19918BC8C;
  *(_OWORD *)((char *)v233 + 12) = *(__int128 *)((char *)&xmmword_19918BC8C + 12);
  v234 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[462] = 0x700000007;
  v1054[461] = v234;
  *v234 = xmmword_19918BCAC;
  *(_OWORD *)((char *)v234 + 12) = *(__int128 *)((char *)&xmmword_19918BCAC + 12);
  v235 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[464] = 0x700000007;
  v1054[463] = v235;
  *v235 = xmmword_19918BCCC;
  *(_OWORD *)((char *)v235 + 12) = *(__int128 *)((char *)&xmmword_19918BCCC + 12);
  v236 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[466] = 0x700000007;
  v1054[465] = v236;
  *v236 = xmmword_19918BCEC;
  *(_OWORD *)((char *)v236 + 12) = *(__int128 *)((char *)&xmmword_19918BCEC + 12);
  v237 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[468] = 0x700000007;
  v1054[467] = v237;
  *v237 = xmmword_19918BD0C;
  *(_OWORD *)((char *)v237 + 12) = *(__int128 *)((char *)&xmmword_19918BD0C + 12);
  v238 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[470] = 0x700000007;
  v1054[469] = v238;
  *v238 = xmmword_19918BD2C;
  *(_OWORD *)((char *)v238 + 12) = *(__int128 *)((char *)&xmmword_19918BD2C + 12);
  v239 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[472] = 0x700000007;
  v1054[471] = v239;
  *v239 = xmmword_19918BD4C;
  *(_OWORD *)((char *)v239 + 12) = *(__int128 *)((char *)&xmmword_19918BD4C + 12);
  v240 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[474] = 0x700000007;
  v1054[473] = v240;
  *v240 = xmmword_19918BD6C;
  *(_OWORD *)((char *)v240 + 12) = *(__int128 *)((char *)&xmmword_19918BD6C + 12);
  v241 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[476] = 0x700000007;
  v1054[475] = v241;
  *v241 = xmmword_19918BD8C;
  *(_OWORD *)((char *)v241 + 12) = *(__int128 *)((char *)&xmmword_19918BD8C + 12);
  v242 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[478] = 0x700000007;
  v1054[477] = v242;
  *v242 = xmmword_19918BDAC;
  *(_OWORD *)((char *)v242 + 12) = *(__int128 *)((char *)&xmmword_19918BDAC + 12);
  v243 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[480] = 0x700000007;
  v1054[479] = v243;
  *v243 = xmmword_19918BDCC;
  *(_OWORD *)((char *)v243 + 12) = *(__int128 *)((char *)&xmmword_19918BDCC + 12);
  v244 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[482] = 0x700000007;
  v1054[481] = v244;
  *v244 = xmmword_19918BDEC;
  *(_OWORD *)((char *)v244 + 12) = *(__int128 *)((char *)&xmmword_19918BDEC + 12);
  v245 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[484] = 0x700000007;
  v1054[483] = v245;
  *v245 = xmmword_19918BE0C;
  *(_OWORD *)((char *)v245 + 12) = *(__int128 *)((char *)&xmmword_19918BE0C + 12);
  v246 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[486] = 0x700000007;
  v1054[485] = v246;
  *v246 = xmmword_19918BE2C;
  *(_OWORD *)((char *)v246 + 12) = *(__int128 *)((char *)&xmmword_19918BE2C + 12);
  v247 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[488] = 0x700000007;
  v1054[487] = v247;
  *v247 = xmmword_19918BE4C;
  *(_OWORD *)((char *)v247 + 12) = *(__int128 *)((char *)&xmmword_19918BE4C + 12);
  v248 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[490] = 0x700000007;
  v1054[489] = v248;
  *v248 = xmmword_19918BE6C;
  *(_OWORD *)((char *)v248 + 12) = *(__int128 *)((char *)&xmmword_19918BE6C + 12);
  v249 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[492] = 0x700000007;
  v1054[491] = v249;
  *v249 = xmmword_19918BE8C;
  *(_OWORD *)((char *)v249 + 12) = *(__int128 *)((char *)&xmmword_19918BE8C + 12);
  v250 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[494] = 0x700000007;
  v1054[493] = v250;
  *v250 = xmmword_19918BEAC;
  *(_OWORD *)((char *)v250 + 12) = *(__int128 *)((char *)&xmmword_19918BEAC + 12);
  v251 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[496] = 0x700000007;
  v1054[495] = v251;
  *v251 = xmmword_19918BECC;
  *(_OWORD *)((char *)v251 + 12) = *(__int128 *)((char *)&xmmword_19918BECC + 12);
  v252 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[498] = 0x700000007;
  v1054[497] = v252;
  *v252 = xmmword_19918BEEC;
  *(_OWORD *)((char *)v252 + 12) = *(__int128 *)((char *)&xmmword_19918BEEC + 12);
  v253 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[500] = 0x700000007;
  v1054[499] = v253;
  *v253 = xmmword_19918BF0C;
  *(_OWORD *)((char *)v253 + 12) = *(__int128 *)((char *)&xmmword_19918BF0C + 12);
  v254 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[502] = 0x700000007;
  v1054[501] = v254;
  *v254 = xmmword_19918BF2C;
  *(_OWORD *)((char *)v254 + 12) = *(__int128 *)((char *)&xmmword_19918BF2C + 12);
  v255 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[504] = 0x700000007;
  v1054[503] = v255;
  *v255 = xmmword_19918BF4C;
  *(_OWORD *)((char *)v255 + 12) = *(__int128 *)((char *)&xmmword_19918BF4C + 12);
  v256 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[506] = 0x700000007;
  v1054[505] = v256;
  *v256 = xmmword_19918BF6C;
  *(_OWORD *)((char *)v256 + 12) = *(__int128 *)((char *)&xmmword_19918BF6C + 12);
  v257 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[508] = 0x700000007;
  v1054[507] = v257;
  *v257 = xmmword_19918BF8C;
  *(_OWORD *)((char *)v257 + 12) = *(__int128 *)((char *)&xmmword_19918BF8C + 12);
  v258 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[510] = 0x700000007;
  v1054[509] = v258;
  *v258 = xmmword_19918BFAC;
  *(_OWORD *)((char *)v258 + 12) = *(__int128 *)((char *)&xmmword_19918BFAC + 12);
  v259 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[512] = 0x700000007;
  v1054[511] = v259;
  *v259 = xmmword_19918BFCC;
  *(_OWORD *)((char *)v259 + 12) = *(__int128 *)((char *)&xmmword_19918BFCC + 12);
  v260 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[514] = 0x700000007;
  v1054[513] = v260;
  *v260 = xmmword_19918BFEC;
  *(_OWORD *)((char *)v260 + 12) = *(__int128 *)((char *)&xmmword_19918BFEC + 12);
  v261 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[516] = 0x700000007;
  v1054[515] = v261;
  *v261 = xmmword_19918C00C;
  *(_OWORD *)((char *)v261 + 12) = *(__int128 *)((char *)&xmmword_19918C00C + 12);
  v262 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[518] = 0x700000007;
  v1054[517] = v262;
  *v262 = xmmword_19918C02C;
  *(_OWORD *)((char *)v262 + 12) = *(__int128 *)((char *)&xmmword_19918C02C + 12);
  v263 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[520] = 0x700000007;
  v1054[519] = v263;
  *v263 = xmmword_19918C04C;
  *(_OWORD *)((char *)v263 + 12) = *(__int128 *)((char *)&xmmword_19918C04C + 12);
  v264 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[522] = 0x700000007;
  v1054[521] = v264;
  *v264 = xmmword_19918C06C;
  *(_OWORD *)((char *)v264 + 12) = *(__int128 *)((char *)&xmmword_19918C06C + 12);
  v265 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[524] = 0x700000007;
  v1054[523] = v265;
  *v265 = xmmword_19918C08C;
  *(_OWORD *)((char *)v265 + 12) = *(__int128 *)((char *)&xmmword_19918C08C + 12);
  v266 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[526] = 0x700000007;
  v1054[525] = v266;
  *v266 = xmmword_19918C0AC;
  *(_OWORD *)((char *)v266 + 12) = *(__int128 *)((char *)&xmmword_19918C0AC + 12);
  v267 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[528] = 0x700000007;
  v1054[527] = v267;
  *v267 = xmmword_19918C0CC;
  *(_OWORD *)((char *)v267 + 12) = *(__int128 *)((char *)&xmmword_19918C0CC + 12);
  v268 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[530] = 0x700000007;
  v1054[529] = v268;
  *v268 = xmmword_19918C0EC;
  *(_OWORD *)((char *)v268 + 12) = *(__int128 *)((char *)&xmmword_19918C0EC + 12);
  v269 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[532] = 0x700000007;
  v1054[531] = v269;
  *v269 = xmmword_19918C10C;
  *(_OWORD *)((char *)v269 + 12) = *(__int128 *)((char *)&xmmword_19918C10C + 12);
  v270 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[534] = 0x700000007;
  v1054[533] = v270;
  *v270 = xmmword_19918C12C;
  *(_OWORD *)((char *)v270 + 12) = *(__int128 *)((char *)&xmmword_19918C12C + 12);
  v271 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[536] = 0x700000007;
  v1054[535] = v271;
  *v271 = xmmword_19918C14C;
  *(_OWORD *)((char *)v271 + 12) = *(__int128 *)((char *)&xmmword_19918C14C + 12);
  v272 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[538] = 0x700000007;
  v1054[537] = v272;
  *v272 = xmmword_19918C16C;
  *(_OWORD *)((char *)v272 + 12) = *(__int128 *)((char *)&xmmword_19918C16C + 12);
  v273 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[540] = 0x700000007;
  v1054[539] = v273;
  *v273 = xmmword_19918C18C;
  *(_OWORD *)((char *)v273 + 12) = *(__int128 *)((char *)&xmmword_19918C18C + 12);
  v274 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[542] = 0x700000007;
  v1054[541] = v274;
  *v274 = xmmword_19918C1AC;
  *(_OWORD *)((char *)v274 + 12) = *(__int128 *)((char *)&xmmword_19918C1AC + 12);
  v275 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[544] = 0x700000007;
  v1054[543] = v275;
  *v275 = xmmword_19918C1CC;
  *(_OWORD *)((char *)v275 + 12) = *(__int128 *)((char *)&xmmword_19918C1CC + 12);
  v276 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[546] = 0x700000007;
  v1054[545] = v276;
  *v276 = xmmword_19918C1EC;
  *(_OWORD *)((char *)v276 + 12) = *(__int128 *)((char *)&xmmword_19918C1EC + 12);
  v277 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[548] = 0x700000007;
  v1054[547] = v277;
  *v277 = xmmword_19918C20C;
  *(_OWORD *)((char *)v277 + 12) = *(__int128 *)((char *)&xmmword_19918C20C + 12);
  v278 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[550] = 0x700000007;
  v1054[549] = v278;
  *v278 = xmmword_19918C22C;
  *(_OWORD *)((char *)v278 + 12) = *(__int128 *)((char *)&xmmword_19918C22C + 12);
  v279 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[552] = 0x700000007;
  v1054[551] = v279;
  *v279 = xmmword_19918C24C;
  *(_OWORD *)((char *)v279 + 12) = *(__int128 *)((char *)&xmmword_19918C24C + 12);
  v280 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[554] = 0x700000007;
  v1054[553] = v280;
  *v280 = xmmword_19918C26C;
  *(_OWORD *)((char *)v280 + 12) = *(__int128 *)((char *)&xmmword_19918C26C + 12);
  v281 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[556] = 0x700000007;
  v1054[555] = v281;
  *v281 = xmmword_19918C28C;
  *(_OWORD *)((char *)v281 + 12) = *(__int128 *)((char *)&xmmword_19918C28C + 12);
  v282 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[558] = 0x700000007;
  v1054[557] = v282;
  *v282 = xmmword_19918C2AC;
  *(_OWORD *)((char *)v282 + 12) = *(__int128 *)((char *)&xmmword_19918C2AC + 12);
  v283 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[560] = 0x700000007;
  v1054[559] = v283;
  *v283 = xmmword_19918C2CC;
  *(_OWORD *)((char *)v283 + 12) = *(__int128 *)((char *)&xmmword_19918C2CC + 12);
  v284 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[562] = 0x700000007;
  v1054[561] = v284;
  *v284 = xmmword_19918C2EC;
  *(_OWORD *)((char *)v284 + 12) = *(__int128 *)((char *)&xmmword_19918C2EC + 12);
  v285 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[564] = 0x700000007;
  v1054[563] = v285;
  *v285 = xmmword_19918C30C;
  *(_OWORD *)((char *)v285 + 12) = *(__int128 *)((char *)&xmmword_19918C30C + 12);
  v286 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[566] = 0x700000007;
  v1054[565] = v286;
  *v286 = xmmword_19918C32C;
  *(_OWORD *)((char *)v286 + 12) = *(__int128 *)((char *)&xmmword_19918C32C + 12);
  v287 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[568] = 0x700000007;
  v1054[567] = v287;
  *v287 = xmmword_19918C34C;
  *(_OWORD *)((char *)v287 + 12) = *(__int128 *)((char *)&xmmword_19918C34C + 12);
  v288 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[570] = 0x700000007;
  v1054[569] = v288;
  *v288 = xmmword_19918C36C;
  *(_OWORD *)((char *)v288 + 12) = *(__int128 *)((char *)&xmmword_19918C36C + 12);
  v289 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[572] = 0x700000007;
  v1054[571] = v289;
  *v289 = xmmword_19918C38C;
  *(_OWORD *)((char *)v289 + 12) = *(__int128 *)((char *)&xmmword_19918C38C + 12);
  v290 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[574] = 0x700000007;
  v1054[573] = v290;
  *v290 = xmmword_19918C3AC;
  *(_OWORD *)((char *)v290 + 12) = *(__int128 *)((char *)&xmmword_19918C3AC + 12);
  v291 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[576] = 0x700000007;
  v1054[575] = v291;
  *v291 = xmmword_19918C3CC;
  *(_OWORD *)((char *)v291 + 12) = *(__int128 *)((char *)&xmmword_19918C3CC + 12);
  v292 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[578] = 0x700000007;
  v1054[577] = v292;
  *v292 = xmmword_19918C3EC;
  *(_OWORD *)((char *)v292 + 12) = *(__int128 *)((char *)&xmmword_19918C3EC + 12);
  v293 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[580] = 0x700000007;
  v1054[579] = v293;
  *v293 = xmmword_19918C40C;
  *(_OWORD *)((char *)v293 + 12) = *(__int128 *)((char *)&xmmword_19918C40C + 12);
  v294 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[582] = 0x700000007;
  v1054[581] = v294;
  *v294 = xmmword_19918C42C;
  *(_OWORD *)((char *)v294 + 12) = *(__int128 *)((char *)&xmmword_19918C42C + 12);
  v295 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[584] = 0x700000007;
  v1054[583] = v295;
  *v295 = xmmword_19918C44C;
  *(_OWORD *)((char *)v295 + 12) = *(__int128 *)((char *)&xmmword_19918C44C + 12);
  v296 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[586] = 0x700000007;
  v1054[585] = v296;
  *v296 = xmmword_19918C46C;
  *(_OWORD *)((char *)v296 + 12) = *(__int128 *)((char *)&xmmword_19918C46C + 12);
  v297 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[588] = 0x700000007;
  v1054[587] = v297;
  *v297 = xmmword_19918C48C;
  *(_OWORD *)((char *)v297 + 12) = *(__int128 *)((char *)&xmmword_19918C48C + 12);
  v298 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[590] = 0x700000007;
  v1054[589] = v298;
  *v298 = xmmword_19918C4AC;
  *(_OWORD *)((char *)v298 + 12) = *(__int128 *)((char *)&xmmword_19918C4AC + 12);
  v299 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[592] = 0x700000007;
  v1054[591] = v299;
  *v299 = xmmword_19918C4CC;
  *(_OWORD *)((char *)v299 + 12) = *(__int128 *)((char *)&xmmword_19918C4CC + 12);
  v300 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[594] = 0x700000007;
  v1054[593] = v300;
  *v300 = xmmword_19918C4EC;
  *(_OWORD *)((char *)v300 + 12) = *(__int128 *)((char *)&xmmword_19918C4EC + 12);
  v301 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[596] = 0x700000007;
  v1054[595] = v301;
  *v301 = xmmword_19918C50C;
  *(_OWORD *)((char *)v301 + 12) = *(__int128 *)((char *)&xmmword_19918C50C + 12);
  v302 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[598] = 0x700000007;
  v1054[597] = v302;
  *v302 = xmmword_19918C52C;
  *(_OWORD *)((char *)v302 + 12) = *(__int128 *)((char *)&xmmword_19918C52C + 12);
  v303 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[600] = 0x700000007;
  v1054[599] = v303;
  *v303 = xmmword_19918C54C;
  *(_OWORD *)((char *)v303 + 12) = *(__int128 *)((char *)&xmmword_19918C54C + 12);
  v304 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[602] = 0x700000007;
  v1054[601] = v304;
  *v304 = xmmword_19918C56C;
  *(_OWORD *)((char *)v304 + 12) = *(__int128 *)((char *)&xmmword_19918C56C + 12);
  v305 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[604] = 0x700000007;
  v1054[603] = v305;
  *v305 = xmmword_19918C58C;
  *(_OWORD *)((char *)v305 + 12) = *(__int128 *)((char *)&xmmword_19918C58C + 12);
  v306 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[606] = 0x700000007;
  v1054[605] = v306;
  *v306 = xmmword_19918C5AC;
  *(_OWORD *)((char *)v306 + 12) = *(__int128 *)((char *)&xmmword_19918C5AC + 12);
  v307 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[608] = 0x700000007;
  v1054[607] = v307;
  *v307 = xmmword_19918C5CC;
  *(_OWORD *)((char *)v307 + 12) = *(__int128 *)((char *)&xmmword_19918C5CC + 12);
  v308 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[610] = 0x700000007;
  v1054[609] = v308;
  *v308 = xmmword_19918C5EC;
  *(_OWORD *)((char *)v308 + 12) = *(__int128 *)((char *)&xmmword_19918C5EC + 12);
  v309 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[612] = 0x700000007;
  v1054[611] = v309;
  *v309 = xmmword_19918C60C;
  *(_OWORD *)((char *)v309 + 12) = *(__int128 *)((char *)&xmmword_19918C60C + 12);
  v310 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[614] = 0x700000007;
  v1054[613] = v310;
  *v310 = xmmword_19918C62C;
  *(_OWORD *)((char *)v310 + 12) = *(__int128 *)((char *)&xmmword_19918C62C + 12);
  v311 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[616] = 0x700000007;
  v1054[615] = v311;
  *v311 = xmmword_19918C64C;
  *(_OWORD *)((char *)v311 + 12) = *(__int128 *)((char *)&xmmword_19918C64C + 12);
  v312 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[618] = 0x700000007;
  v1054[617] = v312;
  *v312 = xmmword_19918C66C;
  *(_OWORD *)((char *)v312 + 12) = *(__int128 *)((char *)&xmmword_19918C66C + 12);
  v313 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[620] = 0x700000007;
  v1054[619] = v313;
  *v313 = xmmword_19918C68C;
  *(_OWORD *)((char *)v313 + 12) = *(__int128 *)((char *)&xmmword_19918C68C + 12);
  v314 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[622] = 0x700000007;
  v1054[621] = v314;
  *v314 = xmmword_19918C6AC;
  *(_OWORD *)((char *)v314 + 12) = *(__int128 *)((char *)&xmmword_19918C6AC + 12);
  v315 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[624] = 0x700000007;
  v1054[623] = v315;
  *v315 = xmmword_19918C6CC;
  *(_OWORD *)((char *)v315 + 12) = *(__int128 *)((char *)&xmmword_19918C6CC + 12);
  v316 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[626] = 0x700000007;
  v1054[625] = v316;
  *v316 = xmmword_19918C6EC;
  *(_OWORD *)((char *)v316 + 12) = *(__int128 *)((char *)&xmmword_19918C6EC + 12);
  v317 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[628] = 0x700000007;
  v1054[627] = v317;
  *v317 = xmmword_19918C70C;
  *(_OWORD *)((char *)v317 + 12) = *(__int128 *)((char *)&xmmword_19918C70C + 12);
  v318 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[630] = 0x700000007;
  v1054[629] = v318;
  *v318 = xmmword_19918C72C;
  *(_OWORD *)((char *)v318 + 12) = *(__int128 *)((char *)&xmmword_19918C72C + 12);
  v319 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[632] = 0x700000007;
  v1054[631] = v319;
  *v319 = xmmword_19918C74C;
  *(_OWORD *)((char *)v319 + 12) = *(__int128 *)((char *)&xmmword_19918C74C + 12);
  v320 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[634] = 0x700000007;
  v1054[633] = v320;
  *v320 = xmmword_19918C76C;
  *(_OWORD *)((char *)v320 + 12) = *(__int128 *)((char *)&xmmword_19918C76C + 12);
  v321 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[636] = 0x700000007;
  v1054[635] = v321;
  *v321 = xmmword_19918C78C;
  *(_OWORD *)((char *)v321 + 12) = *(__int128 *)((char *)&xmmword_19918C78C + 12);
  v322 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[638] = 0x700000007;
  v1054[637] = v322;
  *v322 = xmmword_19918C7AC;
  *(_OWORD *)((char *)v322 + 12) = *(__int128 *)((char *)&xmmword_19918C7AC + 12);
  v323 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[640] = 0x700000007;
  v1054[639] = v323;
  *v323 = xmmword_19918C7CC;
  *(_OWORD *)((char *)v323 + 12) = *(__int128 *)((char *)&xmmword_19918C7CC + 12);
  v324 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[642] = 0x700000007;
  v1054[641] = v324;
  *v324 = xmmword_19918C7EC;
  *(_OWORD *)((char *)v324 + 12) = *(__int128 *)((char *)&xmmword_19918C7EC + 12);
  v325 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[644] = 0x700000007;
  v1054[643] = v325;
  *v325 = xmmword_19918C80C;
  *(_OWORD *)((char *)v325 + 12) = *(__int128 *)((char *)&xmmword_19918C80C + 12);
  v326 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[646] = 0x700000007;
  v1054[645] = v326;
  *v326 = xmmword_19918C82C;
  *(_OWORD *)((char *)v326 + 12) = *(__int128 *)((char *)&xmmword_19918C82C + 12);
  v327 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[648] = 0x700000007;
  v1054[647] = v327;
  *v327 = xmmword_19918C84C;
  *(_OWORD *)((char *)v327 + 12) = *(__int128 *)((char *)&xmmword_19918C84C + 12);
  v328 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[650] = 0x700000007;
  v1054[649] = v328;
  *v328 = xmmword_19918C86C;
  *(_OWORD *)((char *)v328 + 12) = *(__int128 *)((char *)&xmmword_19918C86C + 12);
  v329 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[652] = 0x700000007;
  v1054[651] = v329;
  *v329 = xmmword_19918C88C;
  *(_OWORD *)((char *)v329 + 12) = *(__int128 *)((char *)&xmmword_19918C88C + 12);
  v330 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[654] = 0x700000007;
  v1054[653] = v330;
  *v330 = xmmword_19918C8AC;
  *(_OWORD *)((char *)v330 + 12) = *(__int128 *)((char *)&xmmword_19918C8AC + 12);
  v331 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[656] = 0x700000007;
  v1054[655] = v331;
  *v331 = xmmword_19918C8CC;
  *(_OWORD *)((char *)v331 + 12) = *(__int128 *)((char *)&xmmword_19918C8CC + 12);
  v332 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[658] = 0x700000007;
  v1054[657] = v332;
  *v332 = xmmword_19918C8EC;
  *(_OWORD *)((char *)v332 + 12) = *(__int128 *)((char *)&xmmword_19918C8EC + 12);
  v333 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[660] = 0x700000007;
  v1054[659] = v333;
  *v333 = xmmword_19918C90C;
  *(_OWORD *)((char *)v333 + 12) = *(__int128 *)((char *)&xmmword_19918C90C + 12);
  v334 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[662] = 0x700000007;
  v1054[661] = v334;
  *v334 = xmmword_19918C92C;
  *(_OWORD *)((char *)v334 + 12) = *(__int128 *)((char *)&xmmword_19918C92C + 12);
  v335 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[664] = 0x700000007;
  v1054[663] = v335;
  *v335 = xmmword_19918C94C;
  *(_OWORD *)((char *)v335 + 12) = *(__int128 *)((char *)&xmmword_19918C94C + 12);
  v336 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[666] = 0x700000007;
  v1054[665] = v336;
  *v336 = xmmword_19918C96C;
  *(_OWORD *)((char *)v336 + 12) = *(__int128 *)((char *)&xmmword_19918C96C + 12);
  v337 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[668] = 0x700000007;
  v1054[667] = v337;
  *v337 = xmmword_19918C98C;
  *(_OWORD *)((char *)v337 + 12) = *(__int128 *)((char *)&xmmword_19918C98C + 12);
  v338 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[670] = 0x700000007;
  v1054[669] = v338;
  *v338 = xmmword_19918C9AC;
  *(_OWORD *)((char *)v338 + 12) = *(__int128 *)((char *)&xmmword_19918C9AC + 12);
  v339 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[672] = 0x700000007;
  v1054[671] = v339;
  *v339 = xmmword_19918C9CC;
  *(_OWORD *)((char *)v339 + 12) = *(__int128 *)((char *)&xmmword_19918C9CC + 12);
  v340 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[674] = 0x700000007;
  v1054[673] = v340;
  *v340 = xmmword_19918C9EC;
  *(_OWORD *)((char *)v340 + 12) = *(__int128 *)((char *)&xmmword_19918C9EC + 12);
  v341 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[676] = 0x700000007;
  v1054[675] = v341;
  *v341 = xmmword_19918CA0C;
  *(_OWORD *)((char *)v341 + 12) = *(__int128 *)((char *)&xmmword_19918CA0C + 12);
  v342 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[678] = 0x700000007;
  v1054[677] = v342;
  *v342 = xmmword_19918CA2C;
  *(_OWORD *)((char *)v342 + 12) = *(__int128 *)((char *)&xmmword_19918CA2C + 12);
  v343 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[680] = 0x700000007;
  v1054[679] = v343;
  *v343 = xmmword_19918CA4C;
  *(_OWORD *)((char *)v343 + 12) = *(__int128 *)((char *)&xmmword_19918CA4C + 12);
  v344 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[682] = 0x700000007;
  v1054[681] = v344;
  *v344 = xmmword_19918CA6C;
  *(_OWORD *)((char *)v344 + 12) = *(__int128 *)((char *)&xmmword_19918CA6C + 12);
  v345 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[684] = 0x700000007;
  v1054[683] = v345;
  *v345 = xmmword_19918CA8C;
  *(_OWORD *)((char *)v345 + 12) = *(__int128 *)((char *)&xmmword_19918CA8C + 12);
  v346 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[686] = 0x700000007;
  v1054[685] = v346;
  *v346 = xmmword_19918CAAC;
  *(_OWORD *)((char *)v346 + 12) = *(__int128 *)((char *)&xmmword_19918CAAC + 12);
  v347 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[688] = 0x700000007;
  v1054[687] = v347;
  *v347 = xmmword_19918CACC;
  *(_OWORD *)((char *)v347 + 12) = *(__int128 *)((char *)&xmmword_19918CACC + 12);
  v348 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[690] = 0x700000007;
  v1054[689] = v348;
  *v348 = xmmword_19918CAEC;
  *(_OWORD *)((char *)v348 + 12) = *(__int128 *)((char *)&xmmword_19918CAEC + 12);
  v349 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[692] = 0x700000007;
  v1054[691] = v349;
  *v349 = xmmword_19918CB0C;
  *(_OWORD *)((char *)v349 + 12) = *(__int128 *)((char *)&xmmword_19918CB0C + 12);
  v350 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[694] = 0x700000007;
  v1054[693] = v350;
  *v350 = xmmword_19918CB2C;
  *(_OWORD *)((char *)v350 + 12) = *(__int128 *)((char *)&xmmword_19918CB2C + 12);
  v351 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[696] = 0x700000007;
  v1054[695] = v351;
  *v351 = xmmword_19918CB4C;
  *(_OWORD *)((char *)v351 + 12) = *(__int128 *)((char *)&xmmword_19918CB4C + 12);
  v352 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[698] = 0x700000007;
  v1054[697] = v352;
  *v352 = xmmword_19918CB6C;
  *(_OWORD *)((char *)v352 + 12) = *(__int128 *)((char *)&xmmword_19918CB6C + 12);
  v353 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[700] = 0x700000007;
  v1054[699] = v353;
  *v353 = xmmword_19918CB8C;
  *(_OWORD *)((char *)v353 + 12) = *(__int128 *)((char *)&xmmword_19918CB8C + 12);
  v354 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[702] = 0x700000007;
  v1054[701] = v354;
  *v354 = xmmword_19918CBAC;
  *(_OWORD *)((char *)v354 + 12) = *(__int128 *)((char *)&xmmword_19918CBAC + 12);
  v355 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[704] = 0x700000007;
  v1054[703] = v355;
  *v355 = xmmword_19918CBCC;
  *(_OWORD *)((char *)v355 + 12) = *(__int128 *)((char *)&xmmword_19918CBCC + 12);
  v356 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[706] = 0x700000007;
  v1054[705] = v356;
  *v356 = xmmword_19918CBEC;
  *(_OWORD *)((char *)v356 + 12) = *(__int128 *)((char *)&xmmword_19918CBEC + 12);
  v357 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[708] = 0x700000007;
  v1054[707] = v357;
  *v357 = xmmword_19918CC0C;
  *(_OWORD *)((char *)v357 + 12) = *(__int128 *)((char *)&xmmword_19918CC0C + 12);
  v358 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[710] = 0x700000007;
  v1054[709] = v358;
  *v358 = xmmword_19918CC2C;
  *(_OWORD *)((char *)v358 + 12) = *(__int128 *)((char *)&xmmword_19918CC2C + 12);
  v359 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[712] = 0x700000007;
  v1054[711] = v359;
  *v359 = xmmword_19918CC4C;
  *(_OWORD *)((char *)v359 + 12) = *(__int128 *)((char *)&xmmword_19918CC4C + 12);
  v360 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[714] = 0x700000007;
  v1054[713] = v360;
  *v360 = xmmword_19918CC6C;
  *(_OWORD *)((char *)v360 + 12) = *(__int128 *)((char *)&xmmword_19918CC6C + 12);
  v361 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[716] = 0x700000007;
  v1054[715] = v361;
  *v361 = xmmword_19918CC8C;
  *(_OWORD *)((char *)v361 + 12) = *(__int128 *)((char *)&xmmword_19918CC8C + 12);
  v362 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[718] = 0x700000007;
  v1054[717] = v362;
  *v362 = xmmword_19918CCAC;
  *(_OWORD *)((char *)v362 + 12) = *(__int128 *)((char *)&xmmword_19918CCAC + 12);
  v363 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[720] = 0x700000007;
  v1054[719] = v363;
  *v363 = xmmword_19918CCCC;
  *(_OWORD *)((char *)v363 + 12) = *(__int128 *)((char *)&xmmword_19918CCCC + 12);
  v364 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[722] = 0x700000007;
  v1054[721] = v364;
  *v364 = xmmword_19918CCEC;
  *(_OWORD *)((char *)v364 + 12) = *(__int128 *)((char *)&xmmword_19918CCEC + 12);
  v365 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[724] = 0x700000007;
  v1054[723] = v365;
  *v365 = xmmword_19918CD0C;
  *(_OWORD *)((char *)v365 + 12) = *(__int128 *)((char *)&xmmword_19918CD0C + 12);
  v366 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[726] = 0x700000007;
  v1054[725] = v366;
  *v366 = xmmword_19918CD2C;
  *(_OWORD *)((char *)v366 + 12) = *(__int128 *)((char *)&xmmword_19918CD2C + 12);
  v367 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[728] = 0x700000007;
  v1054[727] = v367;
  *v367 = xmmword_19918CD4C;
  *(_OWORD *)((char *)v367 + 12) = *(__int128 *)((char *)&xmmword_19918CD4C + 12);
  v368 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[730] = 0x700000007;
  v1054[729] = v368;
  *v368 = xmmword_19918CD6C;
  *(_OWORD *)((char *)v368 + 12) = *(__int128 *)((char *)&xmmword_19918CD6C + 12);
  v369 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[732] = 0x700000007;
  v1054[731] = v369;
  *v369 = xmmword_19918CD8C;
  *(_OWORD *)((char *)v369 + 12) = *(__int128 *)((char *)&xmmword_19918CD8C + 12);
  v370 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[734] = 0x700000007;
  v1054[733] = v370;
  *v370 = xmmword_19918CDAC;
  *(_OWORD *)((char *)v370 + 12) = *(__int128 *)((char *)&xmmword_19918CDAC + 12);
  v371 = (_OWORD *)WTF::fastMalloc((WTF *)0x1C);
  v1054[736] = 0x700000007;
  v1054[735] = v371;
  *v371 = xmmword_19918CDCC;
  *(_OWORD *)((char *)v371 + 12) = *(__int128 *)((char *)&xmmword_19918CDCC + 12);
  v372 = WTF::fastMalloc((WTF *)0x18);
  v1054[738] = 0x600000006;
  v1054[737] = v372;
  *(_OWORD *)v372 = xmmword_19918CDEC;
  *(_QWORD *)(v372 + 16) = 0x1F4680000200DLL;
  v373 = WTF::fastMalloc((WTF *)0x18);
  v1054[740] = 0x600000006;
  v1054[739] = v373;
  *(_OWORD *)v373 = xmmword_19918CE08;
  *(_QWORD *)(v373 + 16) = 0xFE0F000027A1;
  v374 = WTF::fastMalloc((WTF *)0x18);
  v1054[742] = 0x600000006;
  v1054[741] = v374;
  *(_OWORD *)v374 = xmmword_19918CE24;
  *(_QWORD *)(v374 + 16) = 0xFE0F000027A1;
  v375 = WTF::fastMalloc((WTF *)0x18);
  v1054[744] = 0x600000006;
  v1054[743] = v375;
  *(_OWORD *)v375 = xmmword_19918CE40;
  *(_QWORD *)(v375 + 16) = 0xFE0F000027A1;
  v376 = WTF::fastMalloc((WTF *)0x18);
  v1054[746] = 0x600000006;
  v1054[745] = v376;
  *(_OWORD *)v376 = xmmword_19918CE5C;
  *(_QWORD *)(v376 + 16) = 0x1F4680000200DLL;
  v377 = WTF::fastMalloc((WTF *)0x18);
  v1054[748] = 0x600000006;
  v1054[747] = v377;
  *(_OWORD *)v377 = xmmword_19918CE78;
  *(_QWORD *)(v377 + 16) = 0x1F4690000200DLL;
  v378 = WTF::fastMalloc((WTF *)0x18);
  v1054[750] = 0x600000006;
  v1054[749] = v378;
  *(_OWORD *)v378 = xmmword_19918CE94;
  *(_QWORD *)(v378 + 16) = 0xFE0F000027A1;
  v379 = WTF::fastMalloc((WTF *)0x18);
  v1054[752] = 0x600000006;
  v1054[751] = v379;
  *(_OWORD *)v379 = xmmword_19918CEB0;
  *(_QWORD *)(v379 + 16) = 0xFE0F000027A1;
  v380 = WTF::fastMalloc((WTF *)0x18);
  v1054[754] = 0x600000006;
  v1054[753] = v380;
  *(_OWORD *)v380 = xmmword_19918CECC;
  *(_QWORD *)(v380 + 16) = 0xFE0F000027A1;
  v381 = WTF::fastMalloc((WTF *)0x18);
  v1054[756] = 0x600000006;
  v1054[755] = v381;
  *(_OWORD *)v381 = xmmword_19918CEE8;
  *(_QWORD *)(v381 + 16) = 0xFE0F000027A1;
  v382 = WTF::fastMalloc((WTF *)0x18);
  v1054[758] = 0x600000006;
  v1054[757] = v382;
  *(_OWORD *)v382 = xmmword_19918CF04;
  *(_QWORD *)(v382 + 16) = 0xFE0F000027A1;
  v383 = WTF::fastMalloc((WTF *)0x18);
  v1054[760] = 0x600000006;
  v1054[759] = v383;
  *(_OWORD *)v383 = xmmword_19918CF20;
  *(_QWORD *)(v383 + 16) = 0xFE0F000027A1;
  v384 = WTF::fastMalloc((WTF *)0x14);
  v1054[762] = 0x500000005;
  v1054[761] = v384;
  *(_OWORD *)v384 = xmmword_19918CF3C;
  *(_DWORD *)(v384 + 16) = 65039;
  v385 = WTF::fastMalloc((WTF *)0x14);
  v1054[764] = 0x500000005;
  v1054[763] = v385;
  *(_OWORD *)v385 = xmmword_19918CF54;
  *(_DWORD *)(v385 + 16) = 65039;
  v386 = WTF::fastMalloc((WTF *)0x14);
  v1054[766] = 0x500000005;
  v1054[765] = v386;
  *(_OWORD *)v386 = xmmword_19918CF6C;
  *(_DWORD *)(v386 + 16) = 65039;
  v387 = WTF::fastMalloc((WTF *)0x14);
  v1054[768] = 0x500000005;
  v1054[767] = v387;
  *(_OWORD *)v387 = xmmword_19918CF84;
  *(_DWORD *)(v387 + 16) = 65039;
  v388 = WTF::fastMalloc((WTF *)0x14);
  v1054[770] = 0x500000005;
  v1054[769] = v388;
  *(_OWORD *)v388 = xmmword_19918CF9C;
  *(_DWORD *)(v388 + 16) = 65039;
  v389 = WTF::fastMalloc((WTF *)0x14);
  v1054[772] = 0x500000005;
  v1054[771] = v389;
  *(_OWORD *)v389 = xmmword_19918CFB4;
  *(_DWORD *)(v389 + 16) = 65039;
  v390 = WTF::fastMalloc((WTF *)0x14);
  v1054[774] = 0x500000005;
  v1054[773] = v390;
  *(_OWORD *)v390 = xmmword_19918CFCC;
  *(_DWORD *)(v390 + 16) = 65039;
  v391 = WTF::fastMalloc((WTF *)0x14);
  v1054[776] = 0x500000005;
  v1054[775] = v391;
  *(_OWORD *)v391 = xmmword_19918CFE4;
  *(_DWORD *)(v391 + 16) = 65039;
  v392 = WTF::fastMalloc((WTF *)0x14);
  v1054[778] = 0x500000005;
  v1054[777] = v392;
  *(_OWORD *)v392 = xmmword_19918CFFC;
  *(_DWORD *)(v392 + 16) = 65039;
  v393 = WTF::fastMalloc((WTF *)0x14);
  v1054[780] = 0x500000005;
  v1054[779] = v393;
  *(_OWORD *)v393 = xmmword_19918D014;
  *(_DWORD *)(v393 + 16) = 65039;
  v394 = WTF::fastMalloc((WTF *)0x14);
  v1054[782] = 0x500000005;
  v1054[781] = v394;
  *(_OWORD *)v394 = xmmword_19918D02C;
  *(_DWORD *)(v394 + 16) = 65039;
  v395 = WTF::fastMalloc((WTF *)0x14);
  v1054[784] = 0x500000005;
  v1054[783] = v395;
  *(_OWORD *)v395 = xmmword_19918D044;
  *(_DWORD *)(v395 + 16) = 65039;
  v396 = WTF::fastMalloc((WTF *)0x14);
  v1054[786] = 0x500000005;
  v1054[785] = v396;
  *(_OWORD *)v396 = xmmword_19918D05C;
  *(_DWORD *)(v396 + 16) = 65039;
  v397 = WTF::fastMalloc((WTF *)0x14);
  v1054[788] = 0x500000005;
  v1054[787] = v397;
  *(_OWORD *)v397 = xmmword_19918D074;
  *(_DWORD *)(v397 + 16) = 65039;
  v398 = WTF::fastMalloc((WTF *)0x14);
  v1054[790] = 0x500000005;
  v1054[789] = v398;
  *(_OWORD *)v398 = xmmword_19918D08C;
  *(_DWORD *)(v398 + 16) = 65039;
  v399 = WTF::fastMalloc((WTF *)0x14);
  v1054[792] = 0x500000005;
  v1054[791] = v399;
  *(_OWORD *)v399 = xmmword_19918D0A4;
  *(_DWORD *)(v399 + 16) = 65039;
  v400 = WTF::fastMalloc((WTF *)0x14);
  v1054[794] = 0x500000005;
  v1054[793] = v400;
  *(_OWORD *)v400 = xmmword_19918D0BC;
  *(_DWORD *)(v400 + 16) = 65039;
  v401 = WTF::fastMalloc((WTF *)0x14);
  v1054[796] = 0x500000005;
  v1054[795] = v401;
  *(_OWORD *)v401 = xmmword_19918D0D4;
  *(_DWORD *)(v401 + 16) = 65039;
  v402 = WTF::fastMalloc((WTF *)0x14);
  v1054[798] = 0x500000005;
  v1054[797] = v402;
  *(_OWORD *)v402 = xmmword_19918D0EC;
  *(_DWORD *)(v402 + 16) = 65039;
  v403 = WTF::fastMalloc((WTF *)0x14);
  v1054[800] = 0x500000005;
  v1054[799] = v403;
  *(_OWORD *)v403 = xmmword_19918D104;
  *(_DWORD *)(v403 + 16) = 65039;
  v404 = WTF::fastMalloc((WTF *)0x14);
  v1054[802] = 0x500000005;
  v1054[801] = v404;
  *(_OWORD *)v404 = xmmword_19918D11C;
  *(_DWORD *)(v404 + 16) = 65039;
  v405 = WTF::fastMalloc((WTF *)0x14);
  v1054[804] = 0x500000005;
  v1054[803] = v405;
  *(_OWORD *)v405 = xmmword_19918D134;
  *(_DWORD *)(v405 + 16) = 65039;
  v406 = WTF::fastMalloc((WTF *)0x14);
  v1054[806] = 0x500000005;
  v1054[805] = v406;
  *(_OWORD *)v406 = xmmword_19918D14C;
  *(_DWORD *)(v406 + 16) = 65039;
  v407 = WTF::fastMalloc((WTF *)0x14);
  v1054[808] = 0x500000005;
  v1054[807] = v407;
  *(_OWORD *)v407 = xmmword_19918D164;
  *(_DWORD *)(v407 + 16) = 65039;
  v408 = WTF::fastMalloc((WTF *)0x14);
  v1054[810] = 0x500000005;
  v1054[809] = v408;
  *(_OWORD *)v408 = xmmword_19918D17C;
  *(_DWORD *)(v408 + 16) = 65039;
  v409 = WTF::fastMalloc((WTF *)0x14);
  v1054[812] = 0x500000005;
  v1054[811] = v409;
  *(_OWORD *)v409 = xmmword_19918D194;
  *(_DWORD *)(v409 + 16) = 65039;
  v410 = WTF::fastMalloc((WTF *)0x14);
  v1054[814] = 0x500000005;
  v1054[813] = v410;
  *(_OWORD *)v410 = xmmword_19918D1AC;
  *(_DWORD *)(v410 + 16) = 65039;
  v411 = WTF::fastMalloc((WTF *)0x14);
  v1054[816] = 0x500000005;
  v1054[815] = v411;
  *(_OWORD *)v411 = xmmword_19918D1C4;
  *(_DWORD *)(v411 + 16) = 65039;
  v412 = WTF::fastMalloc((WTF *)0x14);
  v1054[818] = 0x500000005;
  v1054[817] = v412;
  *(_OWORD *)v412 = xmmword_19918D1DC;
  *(_DWORD *)(v412 + 16) = 65039;
  v413 = WTF::fastMalloc((WTF *)0x14);
  v1054[820] = 0x500000005;
  v1054[819] = v413;
  *(_OWORD *)v413 = xmmword_19918D1F4;
  *(_DWORD *)(v413 + 16) = 65039;
  v414 = WTF::fastMalloc((WTF *)0x14);
  v1054[822] = 0x500000005;
  v1054[821] = v414;
  *(_OWORD *)v414 = xmmword_19918D20C;
  *(_DWORD *)(v414 + 16) = 65039;
  v415 = WTF::fastMalloc((WTF *)0x14);
  v1054[824] = 0x500000005;
  v1054[823] = v415;
  *(_OWORD *)v415 = xmmword_19918D224;
  *(_DWORD *)(v415 + 16) = 65039;
  v416 = WTF::fastMalloc((WTF *)0x14);
  v1054[826] = 0x500000005;
  v1054[825] = v416;
  *(_OWORD *)v416 = xmmword_19918D23C;
  *(_DWORD *)(v416 + 16) = 65039;
  v417 = WTF::fastMalloc((WTF *)0x14);
  v1054[828] = 0x500000005;
  v1054[827] = v417;
  *(_OWORD *)v417 = xmmword_19918D254;
  *(_DWORD *)(v417 + 16) = 65039;
  v418 = WTF::fastMalloc((WTF *)0x14);
  v1054[830] = 0x500000005;
  v1054[829] = v418;
  *(_OWORD *)v418 = xmmword_19918D26C;
  *(_DWORD *)(v418 + 16) = 65039;
  v419 = WTF::fastMalloc((WTF *)0x14);
  v1054[832] = 0x500000005;
  v1054[831] = v419;
  *(_OWORD *)v419 = xmmword_19918D284;
  *(_DWORD *)(v419 + 16) = 65039;
  v420 = WTF::fastMalloc((WTF *)0x14);
  v1054[834] = 0x500000005;
  v1054[833] = v420;
  *(_OWORD *)v420 = xmmword_19918D29C;
  *(_DWORD *)(v420 + 16) = 65039;
  v421 = WTF::fastMalloc((WTF *)0x14);
  v1054[836] = 0x500000005;
  v1054[835] = v421;
  *(_OWORD *)v421 = xmmword_19918D2B4;
  *(_DWORD *)(v421 + 16) = 65039;
  v422 = WTF::fastMalloc((WTF *)0x14);
  v1054[838] = 0x500000005;
  v1054[837] = v422;
  *(_OWORD *)v422 = xmmword_19918D2CC;
  *(_DWORD *)(v422 + 16) = 65039;
  v423 = WTF::fastMalloc((WTF *)0x14);
  v1054[840] = 0x500000005;
  v1054[839] = v423;
  *(_OWORD *)v423 = xmmword_19918D2E4;
  *(_DWORD *)(v423 + 16) = 65039;
  v424 = WTF::fastMalloc((WTF *)0x14);
  v1054[842] = 0x500000005;
  v1054[841] = v424;
  *(_OWORD *)v424 = xmmword_19918D2FC;
  *(_DWORD *)(v424 + 16) = 65039;
  v425 = WTF::fastMalloc((WTF *)0x14);
  v1054[844] = 0x500000005;
  v1054[843] = v425;
  *(_OWORD *)v425 = xmmword_19918D314;
  *(_DWORD *)(v425 + 16) = 65039;
  v426 = WTF::fastMalloc((WTF *)0x14);
  v1054[846] = 0x500000005;
  v1054[845] = v426;
  *(_OWORD *)v426 = xmmword_19918D32C;
  *(_DWORD *)(v426 + 16) = 65039;
  v427 = WTF::fastMalloc((WTF *)0x14);
  v1054[848] = 0x500000005;
  v1054[847] = v427;
  *(_OWORD *)v427 = xmmword_19918D344;
  *(_DWORD *)(v427 + 16) = 65039;
  v428 = WTF::fastMalloc((WTF *)0x14);
  v1054[850] = 0x500000005;
  v1054[849] = v428;
  *(_OWORD *)v428 = xmmword_19918D35C;
  *(_DWORD *)(v428 + 16) = 65039;
  v429 = WTF::fastMalloc((WTF *)0x14);
  v1054[852] = 0x500000005;
  v1054[851] = v429;
  *(_OWORD *)v429 = xmmword_19918D374;
  *(_DWORD *)(v429 + 16) = 65039;
  v430 = WTF::fastMalloc((WTF *)0x14);
  v1054[854] = 0x500000005;
  v1054[853] = v430;
  *(_OWORD *)v430 = xmmword_19918D38C;
  *(_DWORD *)(v430 + 16) = 65039;
  v431 = WTF::fastMalloc((WTF *)0x14);
  v1054[856] = 0x500000005;
  v1054[855] = v431;
  *(_OWORD *)v431 = xmmword_19918D3A4;
  *(_DWORD *)(v431 + 16) = 65039;
  v432 = WTF::fastMalloc((WTF *)0x14);
  v1054[858] = 0x500000005;
  v1054[857] = v432;
  *(_OWORD *)v432 = xmmword_19918D3BC;
  *(_DWORD *)(v432 + 16) = 65039;
  v433 = WTF::fastMalloc((WTF *)0x14);
  v1054[860] = 0x500000005;
  v1054[859] = v433;
  *(_OWORD *)v433 = xmmword_19918D3D4;
  *(_DWORD *)(v433 + 16) = 65039;
  v434 = WTF::fastMalloc((WTF *)0x14);
  v1054[862] = 0x500000005;
  v1054[861] = v434;
  *(_OWORD *)v434 = xmmword_19918D3EC;
  *(_DWORD *)(v434 + 16) = 65039;
  v435 = WTF::fastMalloc((WTF *)0x14);
  v1054[864] = 0x500000005;
  v1054[863] = v435;
  *(_OWORD *)v435 = xmmword_19918D404;
  *(_DWORD *)(v435 + 16) = 65039;
  v436 = WTF::fastMalloc((WTF *)0x14);
  v1054[866] = 0x500000005;
  v1054[865] = v436;
  *(_OWORD *)v436 = xmmword_19918D41C;
  *(_DWORD *)(v436 + 16) = 65039;
  v437 = WTF::fastMalloc((WTF *)0x14);
  v1054[868] = 0x500000005;
  v1054[867] = v437;
  *(_OWORD *)v437 = xmmword_19918D434;
  *(_DWORD *)(v437 + 16) = 65039;
  v438 = WTF::fastMalloc((WTF *)0x14);
  v1054[870] = 0x500000005;
  v1054[869] = v438;
  *(_OWORD *)v438 = xmmword_19918D44C;
  *(_DWORD *)(v438 + 16) = 65039;
  v439 = WTF::fastMalloc((WTF *)0x14);
  v1054[872] = 0x500000005;
  v1054[871] = v439;
  *(_OWORD *)v439 = xmmword_19918D464;
  *(_DWORD *)(v439 + 16) = 65039;
  v440 = WTF::fastMalloc((WTF *)0x14);
  v1054[874] = 0x500000005;
  v1054[873] = v440;
  *(_OWORD *)v440 = xmmword_19918D47C;
  *(_DWORD *)(v440 + 16) = 65039;
  v441 = WTF::fastMalloc((WTF *)0x14);
  v1054[876] = 0x500000005;
  v1054[875] = v441;
  *(_OWORD *)v441 = xmmword_19918D494;
  *(_DWORD *)(v441 + 16) = 65039;
  v442 = WTF::fastMalloc((WTF *)0x14);
  v1054[878] = 0x500000005;
  v1054[877] = v442;
  *(_OWORD *)v442 = xmmword_19918D4AC;
  *(_DWORD *)(v442 + 16) = 65039;
  v443 = WTF::fastMalloc((WTF *)0x14);
  v1054[880] = 0x500000005;
  v1054[879] = v443;
  *(_OWORD *)v443 = xmmword_19918D4C4;
  *(_DWORD *)(v443 + 16) = 65039;
  v444 = WTF::fastMalloc((WTF *)0x14);
  v1054[882] = 0x500000005;
  v1054[881] = v444;
  *(_OWORD *)v444 = xmmword_19918D4DC;
  *(_DWORD *)(v444 + 16) = 65039;
  v445 = WTF::fastMalloc((WTF *)0x14);
  v1054[884] = 0x500000005;
  v1054[883] = v445;
  *(_OWORD *)v445 = xmmword_19918D4F4;
  *(_DWORD *)(v445 + 16) = 65039;
  v446 = WTF::fastMalloc((WTF *)0x14);
  v1054[886] = 0x500000005;
  v1054[885] = v446;
  *(_OWORD *)v446 = xmmword_19918D50C;
  *(_DWORD *)(v446 + 16) = 65039;
  v447 = WTF::fastMalloc((WTF *)0x14);
  v1054[888] = 0x500000005;
  v1054[887] = v447;
  *(_OWORD *)v447 = xmmword_19918D524;
  *(_DWORD *)(v447 + 16) = 65039;
  v448 = WTF::fastMalloc((WTF *)0x14);
  v1054[890] = 0x500000005;
  v1054[889] = v448;
  *(_OWORD *)v448 = xmmword_19918D53C;
  *(_DWORD *)(v448 + 16) = 65039;
  v449 = WTF::fastMalloc((WTF *)0x14);
  v1054[892] = 0x500000005;
  v1054[891] = v449;
  *(_OWORD *)v449 = xmmword_19918D554;
  *(_DWORD *)(v449 + 16) = 65039;
  v450 = WTF::fastMalloc((WTF *)0x14);
  v1054[894] = 0x500000005;
  v1054[893] = v450;
  *(_OWORD *)v450 = xmmword_19918D56C;
  *(_DWORD *)(v450 + 16) = 65039;
  v451 = WTF::fastMalloc((WTF *)0x14);
  v1054[896] = 0x500000005;
  v1054[895] = v451;
  *(_OWORD *)v451 = xmmword_19918D584;
  *(_DWORD *)(v451 + 16) = 65039;
  v452 = WTF::fastMalloc((WTF *)0x14);
  v1054[898] = 0x500000005;
  v1054[897] = v452;
  *(_OWORD *)v452 = xmmword_19918D59C;
  *(_DWORD *)(v452 + 16) = 65039;
  v453 = WTF::fastMalloc((WTF *)0x14);
  v1054[900] = 0x500000005;
  v1054[899] = v453;
  *(_OWORD *)v453 = xmmword_19918D5B4;
  *(_DWORD *)(v453 + 16) = 65039;
  v454 = WTF::fastMalloc((WTF *)0x14);
  v1054[902] = 0x500000005;
  v1054[901] = v454;
  *(_OWORD *)v454 = xmmword_19918D5CC;
  *(_DWORD *)(v454 + 16) = 65039;
  v455 = WTF::fastMalloc((WTF *)0x14);
  v1054[904] = 0x500000005;
  v1054[903] = v455;
  *(_OWORD *)v455 = xmmword_19918D5E4;
  *(_DWORD *)(v455 + 16) = 65039;
  v456 = WTF::fastMalloc((WTF *)0x14);
  v1054[906] = 0x500000005;
  v1054[905] = v456;
  *(_OWORD *)v456 = xmmword_19918D5FC;
  *(_DWORD *)(v456 + 16) = 65039;
  v457 = WTF::fastMalloc((WTF *)0x14);
  v1054[908] = 0x500000005;
  v1054[907] = v457;
  *(_OWORD *)v457 = xmmword_19918D614;
  *(_DWORD *)(v457 + 16) = 128102;
  v458 = WTF::fastMalloc((WTF *)0x14);
  v1054[910] = 0x500000005;
  v1054[909] = v458;
  *(_OWORD *)v458 = xmmword_19918D62C;
  *(_DWORD *)(v458 + 16) = 128102;
  v459 = WTF::fastMalloc((WTF *)0x14);
  v1054[912] = 0x500000005;
  v1054[911] = v459;
  *(_OWORD *)v459 = xmmword_19918D644;
  *(_DWORD *)(v459 + 16) = 128103;
  v460 = WTF::fastMalloc((WTF *)0x14);
  v1054[914] = 0x500000005;
  v1054[913] = v460;
  *(_OWORD *)v460 = xmmword_19918D65C;
  *(_DWORD *)(v460 + 16) = 128102;
  v461 = WTF::fastMalloc((WTF *)0x14);
  v1054[916] = 0x500000005;
  v1054[915] = v461;
  *(_OWORD *)v461 = xmmword_19918D674;
  *(_DWORD *)(v461 + 16) = 128103;
  v462 = WTF::fastMalloc((WTF *)0x14);
  v1054[918] = 0x500000005;
  v1054[917] = v462;
  *(_OWORD *)v462 = xmmword_19918D68C;
  *(_DWORD *)(v462 + 16) = 128102;
  v463 = WTF::fastMalloc((WTF *)0x14);
  v1054[920] = 0x500000005;
  v1054[919] = v463;
  *(_OWORD *)v463 = xmmword_19918D6A4;
  *(_DWORD *)(v463 + 16) = 128103;
  v464 = WTF::fastMalloc((WTF *)0x14);
  v1054[922] = 0x500000005;
  v1054[921] = v464;
  *(_OWORD *)v464 = xmmword_19918D6BC;
  *(_DWORD *)(v464 + 16) = 65039;
  v465 = WTF::fastMalloc((WTF *)0x14);
  v1054[924] = 0x500000005;
  v1054[923] = v465;
  *(_OWORD *)v465 = xmmword_19918D6D4;
  *(_DWORD *)(v465 + 16) = 65039;
  v466 = WTF::fastMalloc((WTF *)0x14);
  v1054[926] = 0x500000005;
  v1054[925] = v466;
  *(_OWORD *)v466 = xmmword_19918D6EC;
  *(_DWORD *)(v466 + 16) = 65039;
  v467 = WTF::fastMalloc((WTF *)0x14);
  v1054[928] = 0x500000005;
  v1054[927] = v467;
  *(_OWORD *)v467 = xmmword_19918D704;
  *(_DWORD *)(v467 + 16) = 65039;
  v468 = WTF::fastMalloc((WTF *)0x14);
  v1054[930] = 0x500000005;
  v1054[929] = v468;
  *(_OWORD *)v468 = xmmword_19918D71C;
  *(_DWORD *)(v468 + 16) = 65039;
  v469 = WTF::fastMalloc((WTF *)0x14);
  v1054[932] = 0x500000005;
  v1054[931] = v469;
  *(_OWORD *)v469 = xmmword_19918D734;
  *(_DWORD *)(v469 + 16) = 65039;
  v470 = WTF::fastMalloc((WTF *)0x14);
  v1054[934] = 0x500000005;
  v1054[933] = v470;
  *(_OWORD *)v470 = xmmword_19918D74C;
  *(_DWORD *)(v470 + 16) = 65039;
  v471 = WTF::fastMalloc((WTF *)0x14);
  v1054[936] = 0x500000005;
  v1054[935] = v471;
  *(_OWORD *)v471 = xmmword_19918D764;
  *(_DWORD *)(v471 + 16) = 65039;
  v472 = WTF::fastMalloc((WTF *)0x14);
  v1054[938] = 0x500000005;
  v1054[937] = v472;
  *(_OWORD *)v472 = xmmword_19918D77C;
  *(_DWORD *)(v472 + 16) = 65039;
  v473 = WTF::fastMalloc((WTF *)0x14);
  v1054[940] = 0x500000005;
  v1054[939] = v473;
  *(_OWORD *)v473 = xmmword_19918D794;
  *(_DWORD *)(v473 + 16) = 65039;
  v474 = WTF::fastMalloc((WTF *)0x14);
  v1054[942] = 0x500000005;
  v1054[941] = v474;
  *(_OWORD *)v474 = xmmword_19918D7AC;
  *(_DWORD *)(v474 + 16) = 65039;
  v475 = WTF::fastMalloc((WTF *)0x14);
  v1054[944] = 0x500000005;
  v1054[943] = v475;
  *(_OWORD *)v475 = xmmword_19918D7C4;
  *(_DWORD *)(v475 + 16) = 65039;
  v476 = WTF::fastMalloc((WTF *)0x14);
  v1054[946] = 0x500000005;
  v1054[945] = v476;
  *(_OWORD *)v476 = xmmword_19918D7DC;
  *(_DWORD *)(v476 + 16) = 65039;
  v477 = WTF::fastMalloc((WTF *)0x14);
  v1054[948] = 0x500000005;
  v1054[947] = v477;
  *(_OWORD *)v477 = xmmword_19918D7F4;
  *(_DWORD *)(v477 + 16) = 65039;
  v478 = WTF::fastMalloc((WTF *)0x14);
  v1054[950] = 0x500000005;
  v1054[949] = v478;
  *(_OWORD *)v478 = xmmword_19918D80C;
  *(_DWORD *)(v478 + 16) = 65039;
  v479 = WTF::fastMalloc((WTF *)0x14);
  v1054[952] = 0x500000005;
  v1054[951] = v479;
  *(_OWORD *)v479 = xmmword_19918D824;
  *(_DWORD *)(v479 + 16) = 128102;
  v480 = WTF::fastMalloc((WTF *)0x14);
  v1054[954] = 0x500000005;
  v1054[953] = v480;
  *(_OWORD *)v480 = xmmword_19918D83C;
  *(_DWORD *)(v480 + 16) = 128102;
  v481 = WTF::fastMalloc((WTF *)0x14);
  v1054[956] = 0x500000005;
  v1054[955] = v481;
  *(_OWORD *)v481 = xmmword_19918D854;
  *(_DWORD *)(v481 + 16) = 128103;
  v482 = WTF::fastMalloc((WTF *)0x14);
  v1054[958] = 0x500000005;
  v1054[957] = v482;
  *(_OWORD *)v482 = xmmword_19918D86C;
  *(_DWORD *)(v482 + 16) = 128102;
  v483 = WTF::fastMalloc((WTF *)0x14);
  v1054[960] = 0x500000005;
  v1054[959] = v483;
  *(_OWORD *)v483 = xmmword_19918D884;
  *(_DWORD *)(v483 + 16) = 128103;
  v484 = WTF::fastMalloc((WTF *)0x14);
  v1054[962] = 0x500000005;
  v1054[961] = v484;
  *(_OWORD *)v484 = xmmword_19918D89C;
  *(_DWORD *)(v484 + 16) = 65039;
  v485 = WTF::fastMalloc((WTF *)0x14);
  v1054[964] = 0x500000005;
  v1054[963] = v485;
  *(_OWORD *)v485 = xmmword_19918D8B4;
  *(_DWORD *)(v485 + 16) = 65039;
  v486 = WTF::fastMalloc((WTF *)0x14);
  v1054[966] = 0x500000005;
  v1054[965] = v486;
  *(_OWORD *)v486 = xmmword_19918D8CC;
  *(_DWORD *)(v486 + 16) = 65039;
  v487 = WTF::fastMalloc((WTF *)0x14);
  v1054[968] = 0x500000005;
  v1054[967] = v487;
  *(_OWORD *)v487 = xmmword_19918D8E4;
  *(_DWORD *)(v487 + 16) = 65039;
  v488 = WTF::fastMalloc((WTF *)0x14);
  v1054[970] = 0x500000005;
  v1054[969] = v488;
  *(_OWORD *)v488 = xmmword_19918D8FC;
  *(_DWORD *)(v488 + 16) = 65039;
  v489 = WTF::fastMalloc((WTF *)0x14);
  v1054[972] = 0x500000005;
  v1054[971] = v489;
  *(_OWORD *)v489 = xmmword_19918D914;
  *(_DWORD *)(v489 + 16) = 65039;
  v490 = WTF::fastMalloc((WTF *)0x14);
  v1054[974] = 0x500000005;
  v1054[973] = v490;
  *(_OWORD *)v490 = xmmword_19918D92C;
  *(_DWORD *)(v490 + 16) = 65039;
  v491 = WTF::fastMalloc((WTF *)0x14);
  v1054[976] = 0x500000005;
  v1054[975] = v491;
  *(_OWORD *)v491 = xmmword_19918D944;
  *(_DWORD *)(v491 + 16) = 65039;
  v492 = WTF::fastMalloc((WTF *)0x14);
  v1054[978] = 0x500000005;
  v1054[977] = v492;
  *(_OWORD *)v492 = xmmword_19918D95C;
  *(_DWORD *)(v492 + 16) = 65039;
  v493 = WTF::fastMalloc((WTF *)0x14);
  v1054[980] = 0x500000005;
  v1054[979] = v493;
  *(_OWORD *)v493 = xmmword_19918D974;
  *(_DWORD *)(v493 + 16) = 65039;
  v494 = WTF::fastMalloc((WTF *)0x14);
  v1054[982] = 0x500000005;
  v1054[981] = v494;
  *(_OWORD *)v494 = xmmword_19918D98C;
  *(_DWORD *)(v494 + 16) = 65039;
  v495 = WTF::fastMalloc((WTF *)0x14);
  v1054[984] = 0x500000005;
  v1054[983] = v495;
  *(_OWORD *)v495 = xmmword_19918D9A4;
  *(_DWORD *)(v495 + 16) = 65039;
  v496 = WTF::fastMalloc((WTF *)0x14);
  v1054[986] = 0x500000005;
  v1054[985] = v496;
  *(_OWORD *)v496 = xmmword_19918D9BC;
  *(_DWORD *)(v496 + 16) = 65039;
  v497 = WTF::fastMalloc((WTF *)0x14);
  v1054[988] = 0x500000005;
  v1054[987] = v497;
  *(_OWORD *)v497 = xmmword_19918D9D4;
  *(_DWORD *)(v497 + 16) = 65039;
  v498 = WTF::fastMalloc((WTF *)0x14);
  v1054[990] = 0x500000005;
  v1054[989] = v498;
  *(_OWORD *)v498 = xmmword_19918D9EC;
  *(_DWORD *)(v498 + 16) = 65039;
  v499 = WTF::fastMalloc((WTF *)0x14);
  v1054[992] = 0x500000005;
  v1054[991] = v499;
  *(_OWORD *)v499 = xmmword_19918DA04;
  *(_DWORD *)(v499 + 16) = 65039;
  v500 = WTF::fastMalloc((WTF *)0x14);
  v1054[994] = 0x500000005;
  v1054[993] = v500;
  *(_OWORD *)v500 = xmmword_19918DA1C;
  *(_DWORD *)(v500 + 16) = 65039;
  v501 = WTF::fastMalloc((WTF *)0x14);
  v1054[996] = 0x500000005;
  v1054[995] = v501;
  *(_OWORD *)v501 = xmmword_19918DA34;
  *(_DWORD *)(v501 + 16) = 65039;
  v502 = WTF::fastMalloc((WTF *)0x14);
  v1054[998] = 0x500000005;
  v1054[997] = v502;
  *(_OWORD *)v502 = xmmword_19918DA4C;
  *(_DWORD *)(v502 + 16) = 65039;
  v503 = WTF::fastMalloc((WTF *)0x14);
  v1054[1000] = 0x500000005;
  v1054[999] = v503;
  *(_OWORD *)v503 = xmmword_19918DA64;
  *(_DWORD *)(v503 + 16) = 65039;
  v504 = WTF::fastMalloc((WTF *)0x14);
  v1054[1002] = 0x500000005;
  v1054[1001] = v504;
  *(_OWORD *)v504 = xmmword_19918DA7C;
  *(_DWORD *)(v504 + 16) = 65039;
  v505 = WTF::fastMalloc((WTF *)0x14);
  v1054[1004] = 0x500000005;
  v1054[1003] = v505;
  *(_OWORD *)v505 = xmmword_19918DA94;
  *(_DWORD *)(v505 + 16) = 65039;
  v506 = WTF::fastMalloc((WTF *)0x14);
  v1054[1006] = 0x500000005;
  v1054[1005] = v506;
  *(_OWORD *)v506 = xmmword_19918DAAC;
  *(_DWORD *)(v506 + 16) = 65039;
  v507 = WTF::fastMalloc((WTF *)0x14);
  v1054[1008] = 0x500000005;
  v1054[1007] = v507;
  *(_OWORD *)v507 = xmmword_19918DAC4;
  *(_DWORD *)(v507 + 16) = 65039;
  v508 = WTF::fastMalloc((WTF *)0x14);
  v1054[1010] = 0x500000005;
  v1054[1009] = v508;
  *(_OWORD *)v508 = xmmword_19918DADC;
  *(_DWORD *)(v508 + 16) = 65039;
  v509 = WTF::fastMalloc((WTF *)0x14);
  v1054[1012] = 0x500000005;
  v1054[1011] = v509;
  *(_OWORD *)v509 = xmmword_19918DAF4;
  *(_DWORD *)(v509 + 16) = 65039;
  v510 = WTF::fastMalloc((WTF *)0x14);
  v1054[1014] = 0x500000005;
  v1054[1013] = v510;
  *(_OWORD *)v510 = xmmword_19918DB0C;
  *(_DWORD *)(v510 + 16) = 65039;
  v511 = WTF::fastMalloc((WTF *)0x14);
  v1054[1016] = 0x500000005;
  v1054[1015] = v511;
  *(_OWORD *)v511 = xmmword_19918DB24;
  *(_DWORD *)(v511 + 16) = 65039;
  v512 = WTF::fastMalloc((WTF *)0x14);
  v1054[1018] = 0x500000005;
  v1054[1017] = v512;
  *(_OWORD *)v512 = xmmword_19918DB3C;
  *(_DWORD *)(v512 + 16) = 65039;
  v513 = WTF::fastMalloc((WTF *)0x14);
  v1054[1020] = 0x500000005;
  v1054[1019] = v513;
  *(_OWORD *)v513 = xmmword_19918DB54;
  *(_DWORD *)(v513 + 16) = 65039;
  v514 = WTF::fastMalloc((WTF *)0x14);
  v1054[1022] = 0x500000005;
  v1054[1021] = v514;
  *(_OWORD *)v514 = xmmword_19918DB6C;
  *(_DWORD *)(v514 + 16) = 65039;
  v515 = WTF::fastMalloc((WTF *)0x14);
  v1054[1024] = 0x500000005;
  v1054[1023] = v515;
  *(_OWORD *)v515 = xmmword_19918DB84;
  *(_DWORD *)(v515 + 16) = 65039;
  v516 = WTF::fastMalloc((WTF *)0x14);
  v1054[1026] = 0x500000005;
  v1054[1025] = v516;
  *(_OWORD *)v516 = xmmword_19918DB9C;
  *(_DWORD *)(v516 + 16) = 65039;
  v517 = WTF::fastMalloc((WTF *)0x14);
  v1054[1028] = 0x500000005;
  v1054[1027] = v517;
  *(_OWORD *)v517 = xmmword_19918DBB4;
  *(_DWORD *)(v517 + 16) = 65039;
  v518 = WTF::fastMalloc((WTF *)0x14);
  v1054[1030] = 0x500000005;
  v1054[1029] = v518;
  *(_OWORD *)v518 = xmmword_19918DBCC;
  *(_DWORD *)(v518 + 16) = 65039;
  v519 = WTF::fastMalloc((WTF *)0x14);
  v1054[1032] = 0x500000005;
  v1054[1031] = v519;
  *(_OWORD *)v519 = xmmword_19918DBE4;
  *(_DWORD *)(v519 + 16) = 65039;
  v520 = WTF::fastMalloc((WTF *)0x14);
  v1054[1034] = 0x500000005;
  v1054[1033] = v520;
  *(_OWORD *)v520 = xmmword_19918DBFC;
  *(_DWORD *)(v520 + 16) = 65039;
  v521 = WTF::fastMalloc((WTF *)0x14);
  v1054[1036] = 0x500000005;
  v1054[1035] = v521;
  *(_OWORD *)v521 = xmmword_19918DC14;
  *(_DWORD *)(v521 + 16) = 65039;
  v522 = WTF::fastMalloc((WTF *)0x14);
  v1054[1038] = 0x500000005;
  v1054[1037] = v522;
  *(_OWORD *)v522 = xmmword_19918DC2C;
  *(_DWORD *)(v522 + 16) = 65039;
  v523 = WTF::fastMalloc((WTF *)0x14);
  v1054[1040] = 0x500000005;
  v1054[1039] = v523;
  *(_OWORD *)v523 = xmmword_19918DC44;
  *(_DWORD *)(v523 + 16) = 65039;
  v524 = WTF::fastMalloc((WTF *)0x14);
  v1054[1042] = 0x500000005;
  v1054[1041] = v524;
  *(_OWORD *)v524 = xmmword_19918DC5C;
  *(_DWORD *)(v524 + 16) = 65039;
  v525 = WTF::fastMalloc((WTF *)0x14);
  v1054[1044] = 0x500000005;
  v1054[1043] = v525;
  *(_OWORD *)v525 = xmmword_19918DC74;
  *(_DWORD *)(v525 + 16) = 65039;
  v526 = WTF::fastMalloc((WTF *)0x14);
  v1054[1046] = 0x500000005;
  v1054[1045] = v526;
  *(_OWORD *)v526 = xmmword_19918DC8C;
  *(_DWORD *)(v526 + 16) = 65039;
  v527 = WTF::fastMalloc((WTF *)0x14);
  v1054[1048] = 0x500000005;
  v1054[1047] = v527;
  *(_OWORD *)v527 = xmmword_19918DCA4;
  *(_DWORD *)(v527 + 16) = 65039;
  v528 = WTF::fastMalloc((WTF *)0x14);
  v1054[1050] = 0x500000005;
  v1054[1049] = v528;
  *(_OWORD *)v528 = xmmword_19918DCBC;
  *(_DWORD *)(v528 + 16) = 65039;
  v529 = WTF::fastMalloc((WTF *)0x14);
  v1054[1052] = 0x500000005;
  v1054[1051] = v529;
  *(_OWORD *)v529 = xmmword_19918DCD4;
  *(_DWORD *)(v529 + 16) = 65039;
  v530 = WTF::fastMalloc((WTF *)0x14);
  v1054[1054] = 0x500000005;
  v1054[1053] = v530;
  *(_OWORD *)v530 = xmmword_19918DCEC;
  *(_DWORD *)(v530 + 16) = 65039;
  v531 = WTF::fastMalloc((WTF *)0x14);
  v1054[1056] = 0x500000005;
  v1054[1055] = v531;
  *(_OWORD *)v531 = xmmword_19918DD04;
  *(_DWORD *)(v531 + 16) = 65039;
  v532 = WTF::fastMalloc((WTF *)0x14);
  v1054[1058] = 0x500000005;
  v1054[1057] = v532;
  *(_OWORD *)v532 = xmmword_19918DD1C;
  *(_DWORD *)(v532 + 16) = 65039;
  v533 = WTF::fastMalloc((WTF *)0x14);
  v1054[1060] = 0x500000005;
  v1054[1059] = v533;
  *(_OWORD *)v533 = xmmword_19918DD34;
  *(_DWORD *)(v533 + 16) = 65039;
  v534 = WTF::fastMalloc((WTF *)0x14);
  v1054[1062] = 0x500000005;
  v1054[1061] = v534;
  *(_OWORD *)v534 = xmmword_19918DD4C;
  *(_DWORD *)(v534 + 16) = 65039;
  v535 = WTF::fastMalloc((WTF *)0x14);
  v1054[1064] = 0x500000005;
  v1054[1063] = v535;
  *(_OWORD *)v535 = xmmword_19918DD64;
  *(_DWORD *)(v535 + 16) = 65039;
  v536 = WTF::fastMalloc((WTF *)0x14);
  v1054[1066] = 0x500000005;
  v1054[1065] = v536;
  *(_OWORD *)v536 = xmmword_19918DD7C;
  *(_DWORD *)(v536 + 16) = 65039;
  v537 = WTF::fastMalloc((WTF *)0x14);
  v1054[1068] = 0x500000005;
  v1054[1067] = v537;
  *(_OWORD *)v537 = xmmword_19918DD94;
  *(_DWORD *)(v537 + 16) = 65039;
  v538 = WTF::fastMalloc((WTF *)0x14);
  v1054[1070] = 0x500000005;
  v1054[1069] = v538;
  *(_OWORD *)v538 = xmmword_19918DDAC;
  *(_DWORD *)(v538 + 16) = 65039;
  v539 = WTF::fastMalloc((WTF *)0x14);
  v1054[1072] = 0x500000005;
  v1054[1071] = v539;
  *(_OWORD *)v539 = xmmword_19918DDC4;
  *(_DWORD *)(v539 + 16) = 65039;
  v540 = WTF::fastMalloc((WTF *)0x14);
  v1054[1074] = 0x500000005;
  v1054[1073] = v540;
  *(_OWORD *)v540 = xmmword_19918DDDC;
  *(_DWORD *)(v540 + 16) = 65039;
  v541 = WTF::fastMalloc((WTF *)0x14);
  v1054[1076] = 0x500000005;
  v1054[1075] = v541;
  *(_OWORD *)v541 = xmmword_19918DDF4;
  *(_DWORD *)(v541 + 16) = 65039;
  v542 = WTF::fastMalloc((WTF *)0x14);
  v1054[1078] = 0x500000005;
  v1054[1077] = v542;
  *(_OWORD *)v542 = xmmword_19918DE0C;
  *(_DWORD *)(v542 + 16) = 65039;
  v543 = WTF::fastMalloc((WTF *)0x14);
  v1054[1080] = 0x500000005;
  v1054[1079] = v543;
  *(_OWORD *)v543 = xmmword_19918DE24;
  *(_DWORD *)(v543 + 16) = 65039;
  v544 = WTF::fastMalloc((WTF *)0x14);
  v1054[1082] = 0x500000005;
  v1054[1081] = v544;
  *(_OWORD *)v544 = xmmword_19918DE3C;
  *(_DWORD *)(v544 + 16) = 65039;
  v545 = WTF::fastMalloc((WTF *)0x14);
  v1054[1084] = 0x500000005;
  v1054[1083] = v545;
  *(_OWORD *)v545 = xmmword_19918DE54;
  *(_DWORD *)(v545 + 16) = 65039;
  v546 = WTF::fastMalloc((WTF *)0x14);
  v1054[1086] = 0x500000005;
  v1054[1085] = v546;
  *(_OWORD *)v546 = xmmword_19918DE6C;
  *(_DWORD *)(v546 + 16) = 65039;
  v547 = WTF::fastMalloc((WTF *)0x14);
  v1054[1088] = 0x500000005;
  v1054[1087] = v547;
  *(_OWORD *)v547 = xmmword_19918DE84;
  *(_DWORD *)(v547 + 16) = 65039;
  v548 = WTF::fastMalloc((WTF *)0x14);
  v1054[1090] = 0x500000005;
  v1054[1089] = v548;
  *(_OWORD *)v548 = xmmword_19918DE9C;
  *(_DWORD *)(v548 + 16) = 65039;
  v549 = WTF::fastMalloc((WTF *)0x14);
  v1054[1092] = 0x500000005;
  v1054[1091] = v549;
  *(_OWORD *)v549 = xmmword_19918DEB4;
  *(_DWORD *)(v549 + 16) = 65039;
  v550 = WTF::fastMalloc((WTF *)0x14);
  v1054[1094] = 0x500000005;
  v1054[1093] = v550;
  *(_OWORD *)v550 = xmmword_19918DECC;
  *(_DWORD *)(v550 + 16) = 65039;
  v551 = WTF::fastMalloc((WTF *)0x14);
  v1054[1096] = 0x500000005;
  v1054[1095] = v551;
  *(_OWORD *)v551 = xmmword_19918DEE4;
  *(_DWORD *)(v551 + 16) = 65039;
  v552 = WTF::fastMalloc((WTF *)0x14);
  v1054[1098] = 0x500000005;
  v1054[1097] = v552;
  *(_OWORD *)v552 = xmmword_19918DEFC;
  *(_DWORD *)(v552 + 16) = 65039;
  v553 = WTF::fastMalloc((WTF *)0x14);
  v1054[1100] = 0x500000005;
  v1054[1099] = v553;
  *(_OWORD *)v553 = xmmword_19918DF14;
  *(_DWORD *)(v553 + 16) = 65039;
  v554 = WTF::fastMalloc((WTF *)0x14);
  v1054[1102] = 0x500000005;
  v1054[1101] = v554;
  *(_OWORD *)v554 = xmmword_19918DF2C;
  *(_DWORD *)(v554 + 16) = 65039;
  v555 = WTF::fastMalloc((WTF *)0x14);
  v1054[1104] = 0x500000005;
  v1054[1103] = v555;
  *(_OWORD *)v555 = xmmword_19918DF44;
  *(_DWORD *)(v555 + 16) = 65039;
  v556 = WTF::fastMalloc((WTF *)0x14);
  v1054[1106] = 0x500000005;
  v1054[1105] = v556;
  *(_OWORD *)v556 = xmmword_19918DF5C;
  *(_DWORD *)(v556 + 16) = 65039;
  v557 = WTF::fastMalloc((WTF *)0x14);
  v1054[1108] = 0x500000005;
  v1054[1107] = v557;
  *(_OWORD *)v557 = xmmword_19918DF74;
  *(_DWORD *)(v557 + 16) = 65039;
  v558 = WTF::fastMalloc((WTF *)0x14);
  v1054[1110] = 0x500000005;
  v1054[1109] = v558;
  *(_OWORD *)v558 = xmmword_19918DF8C;
  *(_DWORD *)(v558 + 16) = 65039;
  v559 = WTF::fastMalloc((WTF *)0x14);
  v1054[1112] = 0x500000005;
  v1054[1111] = v559;
  *(_OWORD *)v559 = xmmword_19918DFA4;
  *(_DWORD *)(v559 + 16) = 65039;
  v560 = WTF::fastMalloc((WTF *)0x14);
  v1054[1114] = 0x500000005;
  v1054[1113] = v560;
  *(_OWORD *)v560 = xmmword_19918DFBC;
  *(_DWORD *)(v560 + 16) = 65039;
  v561 = WTF::fastMalloc((WTF *)0x14);
  v1054[1116] = 0x500000005;
  v1054[1115] = v561;
  *(_OWORD *)v561 = xmmword_19918DFD4;
  *(_DWORD *)(v561 + 16) = 65039;
  v562 = WTF::fastMalloc((WTF *)0x14);
  v1054[1118] = 0x500000005;
  v1054[1117] = v562;
  *(_OWORD *)v562 = xmmword_19918DFEC;
  *(_DWORD *)(v562 + 16) = 65039;
  v563 = WTF::fastMalloc((WTF *)0x14);
  v1054[1120] = 0x500000005;
  v1054[1119] = v563;
  *(_OWORD *)v563 = xmmword_19918E004;
  *(_DWORD *)(v563 + 16) = 65039;
  v564 = WTF::fastMalloc((WTF *)0x14);
  v1054[1122] = 0x500000005;
  v1054[1121] = v564;
  *(_OWORD *)v564 = xmmword_19918E01C;
  *(_DWORD *)(v564 + 16) = 65039;
  v565 = WTF::fastMalloc((WTF *)0x14);
  v1054[1124] = 0x500000005;
  v1054[1123] = v565;
  *(_OWORD *)v565 = xmmword_19918E034;
  *(_DWORD *)(v565 + 16) = 65039;
  v566 = WTF::fastMalloc((WTF *)0x14);
  v1054[1126] = 0x500000005;
  v1054[1125] = v566;
  *(_OWORD *)v566 = xmmword_19918E04C;
  *(_DWORD *)(v566 + 16) = 65039;
  v567 = WTF::fastMalloc((WTF *)0x14);
  v1054[1128] = 0x500000005;
  v1054[1127] = v567;
  *(_OWORD *)v567 = xmmword_19918E064;
  *(_DWORD *)(v567 + 16) = 65039;
  v568 = WTF::fastMalloc((WTF *)0x14);
  v1054[1130] = 0x500000005;
  v1054[1129] = v568;
  *(_OWORD *)v568 = xmmword_19918E07C;
  *(_DWORD *)(v568 + 16) = 65039;
  v569 = WTF::fastMalloc((WTF *)0x14);
  v1054[1132] = 0x500000005;
  v1054[1131] = v569;
  *(_OWORD *)v569 = xmmword_19918E094;
  *(_DWORD *)(v569 + 16) = 65039;
  v570 = WTF::fastMalloc((WTF *)0x14);
  v1054[1134] = 0x500000005;
  v1054[1133] = v570;
  *(_OWORD *)v570 = xmmword_19918E0AC;
  *(_DWORD *)(v570 + 16) = 65039;
  v571 = WTF::fastMalloc((WTF *)0x14);
  v1054[1136] = 0x500000005;
  v1054[1135] = v571;
  *(_OWORD *)v571 = xmmword_19918E0C4;
  *(_DWORD *)(v571 + 16) = 65039;
  v572 = WTF::fastMalloc((WTF *)0x14);
  v1054[1138] = 0x500000005;
  v1054[1137] = v572;
  *(_OWORD *)v572 = xmmword_19918E0DC;
  *(_DWORD *)(v572 + 16) = 65039;
  v573 = WTF::fastMalloc((WTF *)0x14);
  v1054[1140] = 0x500000005;
  v1054[1139] = v573;
  *(_OWORD *)v573 = xmmword_19918E0F4;
  *(_DWORD *)(v573 + 16) = 65039;
  v574 = WTF::fastMalloc((WTF *)0x14);
  v1054[1142] = 0x500000005;
  v1054[1141] = v574;
  *(_OWORD *)v574 = xmmword_19918E10C;
  *(_DWORD *)(v574 + 16) = 65039;
  v575 = WTF::fastMalloc((WTF *)0x14);
  v1054[1144] = 0x500000005;
  v1054[1143] = v575;
  *(_OWORD *)v575 = xmmword_19918E124;
  *(_DWORD *)(v575 + 16) = 65039;
  v576 = WTF::fastMalloc((WTF *)0x14);
  v1054[1146] = 0x500000005;
  v1054[1145] = v576;
  *(_OWORD *)v576 = xmmword_19918E13C;
  *(_DWORD *)(v576 + 16) = 65039;
  v577 = WTF::fastMalloc((WTF *)0x14);
  v1054[1148] = 0x500000005;
  v1054[1147] = v577;
  *(_OWORD *)v577 = xmmword_19918E154;
  *(_DWORD *)(v577 + 16) = 65039;
  v578 = WTF::fastMalloc((WTF *)0x14);
  v1054[1150] = 0x500000005;
  v1054[1149] = v578;
  *(_OWORD *)v578 = xmmword_19918E16C;
  *(_DWORD *)(v578 + 16) = 65039;
  v579 = WTF::fastMalloc((WTF *)0x14);
  v1054[1152] = 0x500000005;
  v1054[1151] = v579;
  *(_OWORD *)v579 = xmmword_19918E184;
  *(_DWORD *)(v579 + 16) = 65039;
  v580 = WTF::fastMalloc((WTF *)0x14);
  v1054[1154] = 0x500000005;
  v1054[1153] = v580;
  *(_OWORD *)v580 = xmmword_19918E19C;
  *(_DWORD *)(v580 + 16) = 65039;
  v581 = WTF::fastMalloc((WTF *)0x14);
  v1054[1156] = 0x500000005;
  v1054[1155] = v581;
  *(_OWORD *)v581 = xmmword_19918E1B4;
  *(_DWORD *)(v581 + 16) = 65039;
  v582 = WTF::fastMalloc((WTF *)0x14);
  v1054[1158] = 0x500000005;
  v1054[1157] = v582;
  *(_OWORD *)v582 = xmmword_19918E1CC;
  *(_DWORD *)(v582 + 16) = 65039;
  v583 = WTF::fastMalloc((WTF *)0x14);
  v1054[1160] = 0x500000005;
  v1054[1159] = v583;
  *(_OWORD *)v583 = xmmword_19918E1E4;
  *(_DWORD *)(v583 + 16) = 65039;
  v584 = WTF::fastMalloc((WTF *)0x14);
  v1054[1162] = 0x500000005;
  v1054[1161] = v584;
  *(_OWORD *)v584 = xmmword_19918E1FC;
  *(_DWORD *)(v584 + 16) = 65039;
  v585 = WTF::fastMalloc((WTF *)0x14);
  v1054[1164] = 0x500000005;
  v1054[1163] = v585;
  *(_OWORD *)v585 = xmmword_19918E214;
  *(_DWORD *)(v585 + 16) = 65039;
  v586 = WTF::fastMalloc((WTF *)0x14);
  v1054[1166] = 0x500000005;
  v1054[1165] = v586;
  *(_OWORD *)v586 = xmmword_19918E22C;
  *(_DWORD *)(v586 + 16) = 65039;
  v587 = WTF::fastMalloc((WTF *)0x14);
  v1054[1168] = 0x500000005;
  v1054[1167] = v587;
  *(_OWORD *)v587 = xmmword_19918E244;
  *(_DWORD *)(v587 + 16) = 65039;
  v588 = WTF::fastMalloc((WTF *)0x14);
  v1054[1170] = 0x500000005;
  v1054[1169] = v588;
  *(_OWORD *)v588 = xmmword_19918E25C;
  *(_DWORD *)(v588 + 16) = 65039;
  v589 = WTF::fastMalloc((WTF *)0x14);
  v1054[1172] = 0x500000005;
  v1054[1171] = v589;
  *(_OWORD *)v589 = xmmword_19918E274;
  *(_DWORD *)(v589 + 16) = 65039;
  v590 = WTF::fastMalloc((WTF *)0x14);
  v1054[1174] = 0x500000005;
  v1054[1173] = v590;
  *(_OWORD *)v590 = xmmword_19918E28C;
  *(_DWORD *)(v590 + 16) = 65039;
  v591 = WTF::fastMalloc((WTF *)0x14);
  v1054[1176] = 0x500000005;
  v1054[1175] = v591;
  *(_OWORD *)v591 = xmmword_19918E2A4;
  *(_DWORD *)(v591 + 16) = 65039;
  v592 = WTF::fastMalloc((WTF *)0x14);
  v1054[1178] = 0x500000005;
  v1054[1177] = v592;
  *(_OWORD *)v592 = xmmword_19918E2BC;
  *(_DWORD *)(v592 + 16) = 65039;
  v593 = WTF::fastMalloc((WTF *)0x14);
  v1054[1180] = 0x500000005;
  v1054[1179] = v593;
  *(_OWORD *)v593 = xmmword_19918E2D4;
  *(_DWORD *)(v593 + 16) = 65039;
  v594 = WTF::fastMalloc((WTF *)0x14);
  v1054[1182] = 0x500000005;
  v1054[1181] = v594;
  *(_OWORD *)v594 = xmmword_19918E2EC;
  *(_DWORD *)(v594 + 16) = 65039;
  v595 = WTF::fastMalloc((WTF *)0x14);
  v1054[1184] = 0x500000005;
  v1054[1183] = v595;
  *(_OWORD *)v595 = xmmword_19918E304;
  *(_DWORD *)(v595 + 16) = 65039;
  v596 = WTF::fastMalloc((WTF *)0x14);
  v1054[1186] = 0x500000005;
  v1054[1185] = v596;
  *(_OWORD *)v596 = xmmword_19918E31C;
  *(_DWORD *)(v596 + 16) = 65039;
  v597 = WTF::fastMalloc((WTF *)0x14);
  v1054[1188] = 0x500000005;
  v1054[1187] = v597;
  *(_OWORD *)v597 = xmmword_19918E334;
  *(_DWORD *)(v597 + 16) = 65039;
  v598 = WTF::fastMalloc((WTF *)0x14);
  v1054[1190] = 0x500000005;
  v1054[1189] = v598;
  *(_OWORD *)v598 = xmmword_19918E34C;
  *(_DWORD *)(v598 + 16) = 65039;
  v599 = WTF::fastMalloc((WTF *)0x14);
  v1054[1192] = 0x500000005;
  v1054[1191] = v599;
  *(_OWORD *)v599 = xmmword_19918E364;
  *(_DWORD *)(v599 + 16) = 65039;
  v600 = WTF::fastMalloc((WTF *)0x14);
  v1054[1194] = 0x500000005;
  v1054[1193] = v600;
  *(_OWORD *)v600 = xmmword_19918E37C;
  *(_DWORD *)(v600 + 16) = 65039;
  v601 = WTF::fastMalloc((WTF *)0x14);
  v1054[1196] = 0x500000005;
  v1054[1195] = v601;
  *(_OWORD *)v601 = xmmword_19918E394;
  *(_DWORD *)(v601 + 16) = 65039;
  v602 = WTF::fastMalloc((WTF *)0x14);
  v1054[1198] = 0x500000005;
  v1054[1197] = v602;
  *(_OWORD *)v602 = xmmword_19918E3AC;
  *(_DWORD *)(v602 + 16) = 65039;
  v603 = WTF::fastMalloc((WTF *)0x14);
  v1054[1200] = 0x500000005;
  v1054[1199] = v603;
  *(_OWORD *)v603 = xmmword_19918E3C4;
  *(_DWORD *)(v603 + 16) = 65039;
  v604 = WTF::fastMalloc((WTF *)0x14);
  v1054[1202] = 0x500000005;
  v1054[1201] = v604;
  *(_OWORD *)v604 = xmmword_19918E3DC;
  *(_DWORD *)(v604 + 16) = 65039;
  v605 = WTF::fastMalloc((WTF *)0x14);
  v1054[1204] = 0x500000005;
  v1054[1203] = v605;
  *(_OWORD *)v605 = xmmword_19918E3F4;
  *(_DWORD *)(v605 + 16) = 65039;
  v606 = WTF::fastMalloc((WTF *)0x14);
  v1054[1206] = 0x500000005;
  v1054[1205] = v606;
  *(_OWORD *)v606 = xmmword_19918E40C;
  *(_DWORD *)(v606 + 16) = 65039;
  v607 = WTF::fastMalloc((WTF *)0x14);
  v1054[1208] = 0x500000005;
  v1054[1207] = v607;
  *(_OWORD *)v607 = xmmword_19918E424;
  *(_DWORD *)(v607 + 16) = 65039;
  v608 = WTF::fastMalloc((WTF *)0x14);
  v1054[1210] = 0x500000005;
  v1054[1209] = v608;
  *(_OWORD *)v608 = xmmword_19918E43C;
  *(_DWORD *)(v608 + 16) = 65039;
  v609 = WTF::fastMalloc((WTF *)0x14);
  v1054[1212] = 0x500000005;
  v1054[1211] = v609;
  *(_OWORD *)v609 = xmmword_19918E454;
  *(_DWORD *)(v609 + 16) = 65039;
  v610 = WTF::fastMalloc((WTF *)0x14);
  v1054[1214] = 0x500000005;
  v1054[1213] = v610;
  *(_OWORD *)v610 = xmmword_19918E46C;
  *(_DWORD *)(v610 + 16) = 65039;
  v611 = WTF::fastMalloc((WTF *)0x14);
  v1054[1216] = 0x500000005;
  v1054[1215] = v611;
  *(_OWORD *)v611 = xmmword_19918E484;
  *(_DWORD *)(v611 + 16) = 65039;
  v612 = WTF::fastMalloc((WTF *)0x14);
  v1054[1218] = 0x500000005;
  v1054[1217] = v612;
  *(_OWORD *)v612 = xmmword_19918E49C;
  *(_DWORD *)(v612 + 16) = 65039;
  v613 = WTF::fastMalloc((WTF *)0x14);
  v1054[1220] = 0x500000005;
  v1054[1219] = v613;
  *(_OWORD *)v613 = xmmword_19918E4B4;
  *(_DWORD *)(v613 + 16) = 65039;
  v614 = WTF::fastMalloc((WTF *)0x14);
  v1054[1222] = 0x500000005;
  v1054[1221] = v614;
  *(_OWORD *)v614 = xmmword_19918E4CC;
  *(_DWORD *)(v614 + 16) = 65039;
  v615 = WTF::fastMalloc((WTF *)0x14);
  v1054[1224] = 0x500000005;
  v1054[1223] = v615;
  *(_OWORD *)v615 = xmmword_19918E4E4;
  *(_DWORD *)(v615 + 16) = 65039;
  v616 = WTF::fastMalloc((WTF *)0x14);
  v1054[1226] = 0x500000005;
  v1054[1225] = v616;
  *(_OWORD *)v616 = xmmword_19918E4FC;
  *(_DWORD *)(v616 + 16) = 65039;
  v617 = WTF::fastMalloc((WTF *)0x14);
  v1054[1228] = 0x500000005;
  v1054[1227] = v617;
  *(_OWORD *)v617 = xmmword_19918E514;
  *(_DWORD *)(v617 + 16) = 65039;
  v618 = WTF::fastMalloc((WTF *)0x14);
  v1054[1230] = 0x500000005;
  v1054[1229] = v618;
  *(_OWORD *)v618 = xmmword_19918E52C;
  *(_DWORD *)(v618 + 16) = 65039;
  v619 = WTF::fastMalloc((WTF *)0x14);
  v1054[1232] = 0x500000005;
  v1054[1231] = v619;
  *(_OWORD *)v619 = xmmword_19918E544;
  *(_DWORD *)(v619 + 16) = 65039;
  v620 = WTF::fastMalloc((WTF *)0x14);
  v1054[1234] = 0x500000005;
  v1054[1233] = v620;
  *(_OWORD *)v620 = xmmword_19918E55C;
  *(_DWORD *)(v620 + 16) = 65039;
  v621 = WTF::fastMalloc((WTF *)0x14);
  v1054[1236] = 0x500000005;
  v1054[1235] = v621;
  *(_OWORD *)v621 = xmmword_19918E574;
  *(_DWORD *)(v621 + 16) = 65039;
  v622 = WTF::fastMalloc((WTF *)0x14);
  v1054[1238] = 0x500000005;
  v1054[1237] = v622;
  *(_OWORD *)v622 = xmmword_19918E58C;
  *(_DWORD *)(v622 + 16) = 65039;
  v623 = WTF::fastMalloc((WTF *)0x14);
  v1054[1240] = 0x500000005;
  v1054[1239] = v623;
  *(_OWORD *)v623 = xmmword_19918E5A4;
  *(_DWORD *)(v623 + 16) = 65039;
  v624 = WTF::fastMalloc((WTF *)0x14);
  v1054[1242] = 0x500000005;
  v1054[1241] = v624;
  *(_OWORD *)v624 = xmmword_19918E5BC;
  *(_DWORD *)(v624 + 16) = 65039;
  v625 = WTF::fastMalloc((WTF *)0x14);
  v1054[1244] = 0x500000005;
  v1054[1243] = v625;
  *(_OWORD *)v625 = xmmword_19918E5D4;
  *(_DWORD *)(v625 + 16) = 65039;
  v626 = WTF::fastMalloc((WTF *)0x14);
  v1054[1246] = 0x500000005;
  v1054[1245] = v626;
  *(_OWORD *)v626 = xmmword_19918E5EC;
  *(_DWORD *)(v626 + 16) = 65039;
  v627 = WTF::fastMalloc((WTF *)0x14);
  v1054[1248] = 0x500000005;
  v1054[1247] = v627;
  *(_OWORD *)v627 = xmmword_19918E604;
  *(_DWORD *)(v627 + 16) = 65039;
  v628 = WTF::fastMalloc((WTF *)0x14);
  v1054[1250] = 0x500000005;
  v1054[1249] = v628;
  *(_OWORD *)v628 = xmmword_19918E61C;
  *(_DWORD *)(v628 + 16) = 65039;
  v629 = WTF::fastMalloc((WTF *)0x14);
  v1054[1252] = 0x500000005;
  v1054[1251] = v629;
  *(_OWORD *)v629 = xmmword_19918E634;
  *(_DWORD *)(v629 + 16) = 65039;
  v630 = WTF::fastMalloc((WTF *)0x14);
  v1054[1254] = 0x500000005;
  v1054[1253] = v630;
  *(_OWORD *)v630 = xmmword_19918E64C;
  *(_DWORD *)(v630 + 16) = 65039;
  v631 = WTF::fastMalloc((WTF *)0x14);
  v1054[1256] = 0x500000005;
  v1054[1255] = v631;
  *(_OWORD *)v631 = xmmword_19918E664;
  *(_DWORD *)(v631 + 16) = 65039;
  v632 = WTF::fastMalloc((WTF *)0x14);
  v1054[1258] = 0x500000005;
  v1054[1257] = v632;
  *(_OWORD *)v632 = xmmword_19918E67C;
  *(_DWORD *)(v632 + 16) = 65039;
  v633 = WTF::fastMalloc((WTF *)0x14);
  v1054[1260] = 0x500000005;
  v1054[1259] = v633;
  *(_OWORD *)v633 = xmmword_19918E694;
  *(_DWORD *)(v633 + 16) = 65039;
  v634 = WTF::fastMalloc((WTF *)0x14);
  v1054[1262] = 0x500000005;
  v1054[1261] = v634;
  *(_OWORD *)v634 = xmmword_19918E6AC;
  *(_DWORD *)(v634 + 16) = 65039;
  v635 = WTF::fastMalloc((WTF *)0x14);
  v1054[1264] = 0x500000005;
  v1054[1263] = v635;
  *(_OWORD *)v635 = xmmword_19918E6C4;
  *(_DWORD *)(v635 + 16) = 65039;
  v636 = WTF::fastMalloc((WTF *)0x14);
  v1054[1266] = 0x500000005;
  v1054[1265] = v636;
  *(_OWORD *)v636 = xmmword_19918E6DC;
  *(_DWORD *)(v636 + 16) = 65039;
  v637 = WTF::fastMalloc((WTF *)0x14);
  v1054[1268] = 0x500000005;
  v1054[1267] = v637;
  *(_OWORD *)v637 = xmmword_19918E6F4;
  *(_DWORD *)(v637 + 16) = 65039;
  v638 = WTF::fastMalloc((WTF *)0x14);
  v1054[1270] = 0x500000005;
  v1054[1269] = v638;
  *(_OWORD *)v638 = xmmword_19918E70C;
  *(_DWORD *)(v638 + 16) = 65039;
  v639 = WTF::fastMalloc((WTF *)0x14);
  v1054[1272] = 0x500000005;
  v1054[1271] = v639;
  *(_OWORD *)v639 = xmmword_19918E724;
  *(_DWORD *)(v639 + 16) = 65039;
  v640 = WTF::fastMalloc((WTF *)0x14);
  v1054[1274] = 0x500000005;
  v1054[1273] = v640;
  *(_OWORD *)v640 = xmmword_19918E73C;
  *(_DWORD *)(v640 + 16) = 65039;
  v641 = WTF::fastMalloc((WTF *)0x14);
  v1054[1276] = 0x500000005;
  v1054[1275] = v641;
  *(_OWORD *)v641 = xmmword_19918E754;
  *(_DWORD *)(v641 + 16) = 65039;
  v642 = WTF::fastMalloc((WTF *)0x14);
  v1054[1278] = 0x500000005;
  v1054[1277] = v642;
  *(_OWORD *)v642 = xmmword_19918E76C;
  *(_DWORD *)(v642 + 16) = 65039;
  v643 = WTF::fastMalloc((WTF *)0x14);
  v1054[1280] = 0x500000005;
  v1054[1279] = v643;
  *(_OWORD *)v643 = xmmword_19918E784;
  *(_DWORD *)(v643 + 16) = 65039;
  v644 = WTF::fastMalloc((WTF *)0x14);
  v1054[1282] = 0x500000005;
  v1054[1281] = v644;
  *(_OWORD *)v644 = xmmword_19918E79C;
  *(_DWORD *)(v644 + 16) = 65039;
  v645 = WTF::fastMalloc((WTF *)0x14);
  v1054[1284] = 0x500000005;
  v1054[1283] = v645;
  *(_OWORD *)v645 = xmmword_19918E7B4;
  *(_DWORD *)(v645 + 16) = 65039;
  v646 = WTF::fastMalloc((WTF *)0x14);
  v1054[1286] = 0x500000005;
  v1054[1285] = v646;
  *(_OWORD *)v646 = xmmword_19918E7CC;
  *(_DWORD *)(v646 + 16) = 65039;
  v647 = WTF::fastMalloc((WTF *)0x14);
  v1054[1288] = 0x500000005;
  v1054[1287] = v647;
  *(_OWORD *)v647 = xmmword_19918E7E4;
  *(_DWORD *)(v647 + 16) = 65039;
  v648 = WTF::fastMalloc((WTF *)0x14);
  v1054[1290] = 0x500000005;
  v1054[1289] = v648;
  *(_OWORD *)v648 = xmmword_19918E7FC;
  *(_DWORD *)(v648 + 16) = 65039;
  v649 = WTF::fastMalloc((WTF *)0x14);
  v1054[1292] = 0x500000005;
  v1054[1291] = v649;
  *(_OWORD *)v649 = xmmword_19918E814;
  *(_DWORD *)(v649 + 16) = 65039;
  v650 = WTF::fastMalloc((WTF *)0x14);
  v1054[1294] = 0x500000005;
  v1054[1293] = v650;
  *(_OWORD *)v650 = xmmword_19918E82C;
  *(_DWORD *)(v650 + 16) = 65039;
  v651 = WTF::fastMalloc((WTF *)0x14);
  v1054[1296] = 0x500000005;
  v1054[1295] = v651;
  *(_OWORD *)v651 = xmmword_19918E844;
  *(_DWORD *)(v651 + 16) = 65039;
  v652 = WTF::fastMalloc((WTF *)0x14);
  v1054[1298] = 0x500000005;
  v1054[1297] = v652;
  *(_OWORD *)v652 = xmmword_19918E85C;
  *(_DWORD *)(v652 + 16) = 65039;
  v653 = WTF::fastMalloc((WTF *)0x14);
  v1054[1300] = 0x500000005;
  v1054[1299] = v653;
  *(_OWORD *)v653 = xmmword_19918E874;
  *(_DWORD *)(v653 + 16) = 65039;
  v654 = WTF::fastMalloc((WTF *)0x14);
  v1054[1302] = 0x500000005;
  v1054[1301] = v654;
  *(_OWORD *)v654 = xmmword_19918E88C;
  *(_DWORD *)(v654 + 16) = 65039;
  v655 = WTF::fastMalloc((WTF *)0x14);
  v1054[1304] = 0x500000005;
  v1054[1303] = v655;
  *(_OWORD *)v655 = xmmword_19918E8A4;
  *(_DWORD *)(v655 + 16) = 65039;
  v656 = WTF::fastMalloc((WTF *)0x14);
  v1054[1306] = 0x500000005;
  v1054[1305] = v656;
  *(_OWORD *)v656 = xmmword_19918E8BC;
  *(_DWORD *)(v656 + 16) = 65039;
  v657 = WTF::fastMalloc((WTF *)0x14);
  v1054[1308] = 0x500000005;
  v1054[1307] = v657;
  *(_OWORD *)v657 = xmmword_19918E8D4;
  *(_DWORD *)(v657 + 16) = 65039;
  v658 = WTF::fastMalloc((WTF *)0x14);
  v1054[1310] = 0x500000005;
  v1054[1309] = v658;
  *(_OWORD *)v658 = xmmword_19918E8EC;
  *(_DWORD *)(v658 + 16) = 65039;
  v659 = WTF::fastMalloc((WTF *)0x14);
  v1054[1312] = 0x500000005;
  v1054[1311] = v659;
  *(_OWORD *)v659 = xmmword_19918E904;
  *(_DWORD *)(v659 + 16) = 65039;
  v660 = WTF::fastMalloc((WTF *)0x14);
  v1054[1314] = 0x500000005;
  v1054[1313] = v660;
  *(_OWORD *)v660 = xmmword_19918E91C;
  *(_DWORD *)(v660 + 16) = 65039;
  v661 = WTF::fastMalloc((WTF *)0x14);
  v1054[1316] = 0x500000005;
  v1054[1315] = v661;
  *(_OWORD *)v661 = xmmword_19918E934;
  *(_DWORD *)(v661 + 16) = 65039;
  v662 = WTF::fastMalloc((WTF *)0x14);
  v1054[1318] = 0x500000005;
  v1054[1317] = v662;
  *(_OWORD *)v662 = xmmword_19918E94C;
  *(_DWORD *)(v662 + 16) = 65039;
  v663 = WTF::fastMalloc((WTF *)0x14);
  v1054[1320] = 0x500000005;
  v1054[1319] = v663;
  *(_OWORD *)v663 = xmmword_19918E964;
  *(_DWORD *)(v663 + 16) = 65039;
  v664 = WTF::fastMalloc((WTF *)0x14);
  v1054[1322] = 0x500000005;
  v1054[1321] = v664;
  *(_OWORD *)v664 = xmmword_19918E97C;
  *(_DWORD *)(v664 + 16) = 65039;
  v665 = WTF::fastMalloc((WTF *)0x14);
  v1054[1324] = 0x500000005;
  v1054[1323] = v665;
  *(_OWORD *)v665 = xmmword_19918E994;
  *(_DWORD *)(v665 + 16) = 65039;
  v666 = WTF::fastMalloc((WTF *)0x14);
  v1054[1326] = 0x500000005;
  v1054[1325] = v666;
  *(_OWORD *)v666 = xmmword_19918E9AC;
  *(_DWORD *)(v666 + 16) = 65039;
  v667 = WTF::fastMalloc((WTF *)0x14);
  v1054[1328] = 0x500000005;
  v1054[1327] = v667;
  *(_OWORD *)v667 = xmmword_19918E9C4;
  *(_DWORD *)(v667 + 16) = 65039;
  v668 = WTF::fastMalloc((WTF *)0x14);
  v1054[1330] = 0x500000005;
  v1054[1329] = v668;
  *(_OWORD *)v668 = xmmword_19918E9DC;
  *(_DWORD *)(v668 + 16) = 65039;
  v669 = WTF::fastMalloc((WTF *)0x14);
  v1054[1332] = 0x500000005;
  v1054[1331] = v669;
  *(_OWORD *)v669 = xmmword_19918E9F4;
  *(_DWORD *)(v669 + 16) = 65039;
  v670 = WTF::fastMalloc((WTF *)0x14);
  v1054[1334] = 0x500000005;
  v1054[1333] = v670;
  *(_OWORD *)v670 = xmmword_19918EA0C;
  *(_DWORD *)(v670 + 16) = 65039;
  v671 = WTF::fastMalloc((WTF *)0x14);
  v1054[1336] = 0x500000005;
  v1054[1335] = v671;
  *(_OWORD *)v671 = xmmword_19918EA24;
  *(_DWORD *)(v671 + 16) = 65039;
  v672 = WTF::fastMalloc((WTF *)0x14);
  v1054[1338] = 0x500000005;
  v1054[1337] = v672;
  *(_OWORD *)v672 = xmmword_19918EA3C;
  *(_DWORD *)(v672 + 16) = 65039;
  v673 = WTF::fastMalloc((WTF *)0x14);
  v1054[1340] = 0x500000005;
  v1054[1339] = v673;
  *(_OWORD *)v673 = xmmword_19918EA54;
  *(_DWORD *)(v673 + 16) = 65039;
  v674 = WTF::fastMalloc((WTF *)0x14);
  v1054[1342] = 0x500000005;
  v1054[1341] = v674;
  *(_OWORD *)v674 = xmmword_19918EA6C;
  *(_DWORD *)(v674 + 16) = 65039;
  v675 = WTF::fastMalloc((WTF *)0x14);
  v1054[1344] = 0x500000005;
  v1054[1343] = v675;
  *(_OWORD *)v675 = xmmword_19918EA84;
  *(_DWORD *)(v675 + 16) = 65039;
  v676 = WTF::fastMalloc((WTF *)0x14);
  v1054[1346] = 0x500000005;
  v1054[1345] = v676;
  *(_OWORD *)v676 = xmmword_19918EA9C;
  *(_DWORD *)(v676 + 16) = 65039;
  v677 = WTF::fastMalloc((WTF *)0x14);
  v1054[1348] = 0x500000005;
  v1054[1347] = v677;
  *(_OWORD *)v677 = xmmword_19918EAB4;
  *(_DWORD *)(v677 + 16) = 65039;
  v678 = WTF::fastMalloc((WTF *)0x14);
  v1054[1350] = 0x500000005;
  v1054[1349] = v678;
  *(_OWORD *)v678 = xmmword_19918EACC;
  *(_DWORD *)(v678 + 16) = 65039;
  v679 = WTF::fastMalloc((WTF *)0x14);
  v1054[1352] = 0x500000005;
  v1054[1351] = v679;
  *(_OWORD *)v679 = xmmword_19918EAE4;
  *(_DWORD *)(v679 + 16) = 65039;
  v680 = WTF::fastMalloc((WTF *)0x14);
  v1054[1354] = 0x500000005;
  v1054[1353] = v680;
  *(_OWORD *)v680 = xmmword_19918EAFC;
  *(_DWORD *)(v680 + 16) = 65039;
  v681 = WTF::fastMalloc((WTF *)0x14);
  v1054[1356] = 0x500000005;
  v1054[1355] = v681;
  *(_OWORD *)v681 = xmmword_19918EB14;
  *(_DWORD *)(v681 + 16) = 65039;
  v682 = WTF::fastMalloc((WTF *)0x14);
  v1054[1358] = 0x500000005;
  v1054[1357] = v682;
  *(_OWORD *)v682 = xmmword_19918EB2C;
  *(_DWORD *)(v682 + 16) = 65039;
  v683 = WTF::fastMalloc((WTF *)0x14);
  v1054[1360] = 0x500000005;
  v1054[1359] = v683;
  *(_OWORD *)v683 = xmmword_19918EB44;
  *(_DWORD *)(v683 + 16) = 65039;
  v684 = WTF::fastMalloc((WTF *)0x14);
  v1054[1362] = 0x500000005;
  v1054[1361] = v684;
  *(_OWORD *)v684 = xmmword_19918EB5C;
  *(_DWORD *)(v684 + 16) = 65039;
  v685 = WTF::fastMalloc((WTF *)0x14);
  v1054[1364] = 0x500000005;
  v1054[1363] = v685;
  *(_OWORD *)v685 = xmmword_19918EB74;
  *(_DWORD *)(v685 + 16) = 65039;
  v686 = WTF::fastMalloc((WTF *)0x14);
  v1054[1366] = 0x500000005;
  v1054[1365] = v686;
  *(_OWORD *)v686 = xmmword_19918EB8C;
  *(_DWORD *)(v686 + 16) = 65039;
  v687 = WTF::fastMalloc((WTF *)0x14);
  v1054[1368] = 0x500000005;
  v1054[1367] = v687;
  *(_OWORD *)v687 = xmmword_19918EBA4;
  *(_DWORD *)(v687 + 16) = 65039;
  v688 = WTF::fastMalloc((WTF *)0x14);
  v1054[1370] = 0x500000005;
  v1054[1369] = v688;
  *(_OWORD *)v688 = xmmword_19918EBBC;
  *(_DWORD *)(v688 + 16) = 65039;
  v689 = WTF::fastMalloc((WTF *)0x14);
  v1054[1372] = 0x500000005;
  v1054[1371] = v689;
  *(_OWORD *)v689 = xmmword_19918EBD4;
  *(_DWORD *)(v689 + 16) = 65039;
  v690 = WTF::fastMalloc((WTF *)0x14);
  v1054[1374] = 0x500000005;
  v1054[1373] = v690;
  *(_OWORD *)v690 = xmmword_19918EBEC;
  *(_DWORD *)(v690 + 16) = 65039;
  v691 = WTF::fastMalloc((WTF *)0x14);
  v1054[1376] = 0x500000005;
  v1054[1375] = v691;
  *(_OWORD *)v691 = xmmword_19918EC04;
  *(_DWORD *)(v691 + 16) = 65039;
  v692 = WTF::fastMalloc((WTF *)0x14);
  v1054[1378] = 0x500000005;
  v1054[1377] = v692;
  *(_OWORD *)v692 = xmmword_19918EC1C;
  *(_DWORD *)(v692 + 16) = 65039;
  v693 = WTF::fastMalloc((WTF *)0x14);
  v1054[1380] = 0x500000005;
  v1054[1379] = v693;
  *(_OWORD *)v693 = xmmword_19918EC34;
  *(_DWORD *)(v693 + 16) = 65039;
  v694 = WTF::fastMalloc((WTF *)0x14);
  v1054[1382] = 0x500000005;
  v1054[1381] = v694;
  *(_OWORD *)v694 = xmmword_19918EC4C;
  *(_DWORD *)(v694 + 16) = 65039;
  v695 = WTF::fastMalloc((WTF *)0x14);
  v1054[1384] = 0x500000005;
  v1054[1383] = v695;
  *(_OWORD *)v695 = xmmword_19918EC64;
  *(_DWORD *)(v695 + 16) = 65039;
  v696 = WTF::fastMalloc((WTF *)0x14);
  v1054[1386] = 0x500000005;
  v1054[1385] = v696;
  *(_OWORD *)v696 = xmmword_19918EC7C;
  *(_DWORD *)(v696 + 16) = 65039;
  v697 = WTF::fastMalloc((WTF *)0x14);
  v1054[1388] = 0x500000005;
  v1054[1387] = v697;
  *(_OWORD *)v697 = xmmword_19918EC94;
  *(_DWORD *)(v697 + 16) = 65039;
  v698 = WTF::fastMalloc((WTF *)0x14);
  v1054[1390] = 0x500000005;
  v1054[1389] = v698;
  *(_OWORD *)v698 = xmmword_19918ECAC;
  *(_DWORD *)(v698 + 16) = 65039;
  v699 = WTF::fastMalloc((WTF *)0x14);
  v1054[1392] = 0x500000005;
  v1054[1391] = v699;
  *(_OWORD *)v699 = xmmword_19918ECC4;
  *(_DWORD *)(v699 + 16) = 65039;
  v700 = WTF::fastMalloc((WTF *)0x14);
  v1054[1394] = 0x500000005;
  v1054[1393] = v700;
  *(_OWORD *)v700 = xmmword_19918ECDC;
  *(_DWORD *)(v700 + 16) = 65039;
  v701 = WTF::fastMalloc((WTF *)0x14);
  v1054[1396] = 0x500000005;
  v1054[1395] = v701;
  *(_OWORD *)v701 = xmmword_19918ECF4;
  *(_DWORD *)(v701 + 16) = 65039;
  v702 = WTF::fastMalloc((WTF *)0x14);
  v1054[1398] = 0x500000005;
  v1054[1397] = v702;
  *(_OWORD *)v702 = xmmword_19918ED0C;
  *(_DWORD *)(v702 + 16) = 65039;
  v703 = WTF::fastMalloc((WTF *)0x14);
  v1054[1400] = 0x500000005;
  v1054[1399] = v703;
  *(_OWORD *)v703 = xmmword_19918ED24;
  *(_DWORD *)(v703 + 16) = 65039;
  v704 = WTF::fastMalloc((WTF *)0x14);
  v1054[1402] = 0x500000005;
  v1054[1401] = v704;
  *(_OWORD *)v704 = xmmword_19918ED3C;
  *(_DWORD *)(v704 + 16) = 65039;
  v705 = WTF::fastMalloc((WTF *)0x14);
  v1054[1404] = 0x500000005;
  v1054[1403] = v705;
  *(_OWORD *)v705 = xmmword_19918ED54;
  *(_DWORD *)(v705 + 16) = 65039;
  v706 = WTF::fastMalloc((WTF *)0x14);
  v1054[1406] = 0x500000005;
  v1054[1405] = v706;
  *(_OWORD *)v706 = xmmword_19918ED6C;
  *(_DWORD *)(v706 + 16) = 65039;
  v707 = WTF::fastMalloc((WTF *)0x14);
  v1054[1408] = 0x500000005;
  v1054[1407] = v707;
  *(_OWORD *)v707 = xmmword_19918ED84;
  *(_DWORD *)(v707 + 16) = 65039;
  v708 = WTF::fastMalloc((WTF *)0x14);
  v1054[1410] = 0x500000005;
  v1054[1409] = v708;
  *(_OWORD *)v708 = xmmword_19918ED9C;
  *(_DWORD *)(v708 + 16) = 65039;
  v709 = WTF::fastMalloc((WTF *)0x14);
  v1054[1412] = 0x500000005;
  v1054[1411] = v709;
  *(_OWORD *)v709 = xmmword_19918EDB4;
  *(_DWORD *)(v709 + 16) = 65039;
  v710 = WTF::fastMalloc((WTF *)0x14);
  v1054[1414] = 0x500000005;
  v1054[1413] = v710;
  *(_OWORD *)v710 = xmmword_19918EDCC;
  *(_DWORD *)(v710 + 16) = 65039;
  v711 = WTF::fastMalloc((WTF *)0x14);
  v1054[1416] = 0x500000005;
  v1054[1415] = v711;
  *(_OWORD *)v711 = xmmword_19918EDE4;
  *(_DWORD *)(v711 + 16) = 65039;
  v712 = WTF::fastMalloc((WTF *)0x14);
  v1054[1418] = 0x500000005;
  v1054[1417] = v712;
  *(_OWORD *)v712 = xmmword_19918EDFC;
  *(_DWORD *)(v712 + 16) = 65039;
  v713 = WTF::fastMalloc((WTF *)0x14);
  v1054[1420] = 0x500000005;
  v1054[1419] = v713;
  *(_OWORD *)v713 = xmmword_19918EE14;
  *(_DWORD *)(v713 + 16) = 65039;
  v714 = WTF::fastMalloc((WTF *)0x14);
  v1054[1422] = 0x500000005;
  v1054[1421] = v714;
  *(_OWORD *)v714 = xmmword_19918EE2C;
  *(_DWORD *)(v714 + 16) = 65039;
  v715 = WTF::fastMalloc((WTF *)0x14);
  v1054[1424] = 0x500000005;
  v1054[1423] = v715;
  *(_OWORD *)v715 = xmmword_19918EE44;
  *(_DWORD *)(v715 + 16) = 65039;
  v716 = WTF::fastMalloc((WTF *)0x14);
  v1054[1426] = 0x500000005;
  v1054[1425] = v716;
  *(_OWORD *)v716 = xmmword_19918EE5C;
  *(_DWORD *)(v716 + 16) = 65039;
  v717 = WTF::fastMalloc((WTF *)0x14);
  v1054[1428] = 0x500000005;
  v1054[1427] = v717;
  *(_OWORD *)v717 = xmmword_19918EE74;
  *(_DWORD *)(v717 + 16) = 65039;
  v718 = WTF::fastMalloc((WTF *)0x14);
  v1054[1430] = 0x500000005;
  v1054[1429] = v718;
  *(_OWORD *)v718 = xmmword_19918EE8C;
  *(_DWORD *)(v718 + 16) = 65039;
  v719 = WTF::fastMalloc((WTF *)0x14);
  v1054[1432] = 0x500000005;
  v1054[1431] = v719;
  *(_OWORD *)v719 = xmmword_19918EEA4;
  *(_DWORD *)(v719 + 16) = 65039;
  v720 = WTF::fastMalloc((WTF *)0x14);
  v1054[1434] = 0x500000005;
  v1054[1433] = v720;
  *(_OWORD *)v720 = xmmword_19918EEBC;
  *(_DWORD *)(v720 + 16) = 65039;
  v721 = WTF::fastMalloc((WTF *)0x14);
  v1054[1436] = 0x500000005;
  v1054[1435] = v721;
  *(_OWORD *)v721 = xmmword_19918EED4;
  *(_DWORD *)(v721 + 16) = 65039;
  v722 = WTF::fastMalloc((WTF *)0x14);
  v1054[1438] = 0x500000005;
  v1054[1437] = v722;
  *(_OWORD *)v722 = xmmword_19918EEEC;
  *(_DWORD *)(v722 + 16) = 65039;
  v723 = WTF::fastMalloc((WTF *)0x14);
  v1054[1440] = 0x500000005;
  v1054[1439] = v723;
  *(_OWORD *)v723 = xmmword_19918EF04;
  *(_DWORD *)(v723 + 16) = 65039;
  v724 = WTF::fastMalloc((WTF *)0x14);
  v1054[1442] = 0x500000005;
  v1054[1441] = v724;
  *(_OWORD *)v724 = xmmword_19918EF1C;
  *(_DWORD *)(v724 + 16) = 65039;
  v725 = WTF::fastMalloc((WTF *)0x14);
  v1054[1444] = 0x500000005;
  v1054[1443] = v725;
  *(_OWORD *)v725 = xmmword_19918EF34;
  *(_DWORD *)(v725 + 16) = 65039;
  v726 = WTF::fastMalloc((WTF *)0x14);
  v1054[1446] = 0x500000005;
  v1054[1445] = v726;
  *(_OWORD *)v726 = xmmword_19918EF4C;
  *(_DWORD *)(v726 + 16) = 65039;
  v727 = WTF::fastMalloc((WTF *)0x14);
  v1054[1448] = 0x500000005;
  v1054[1447] = v727;
  *(_OWORD *)v727 = xmmword_19918EF64;
  *(_DWORD *)(v727 + 16) = 65039;
  v728 = WTF::fastMalloc((WTF *)0x14);
  v1054[1450] = 0x500000005;
  v1054[1449] = v728;
  *(_OWORD *)v728 = xmmword_19918EF7C;
  *(_DWORD *)(v728 + 16) = 65039;
  v729 = WTF::fastMalloc((WTF *)0x14);
  v1054[1452] = 0x500000005;
  v1054[1451] = v729;
  *(_OWORD *)v729 = xmmword_19918EF94;
  *(_DWORD *)(v729 + 16) = 65039;
  v730 = WTF::fastMalloc((WTF *)0x14);
  v1054[1454] = 0x500000005;
  v1054[1453] = v730;
  *(_OWORD *)v730 = xmmword_19918EFAC;
  *(_DWORD *)(v730 + 16) = 65039;
  v731 = WTF::fastMalloc((WTF *)0x14);
  v1054[1456] = 0x500000005;
  v1054[1455] = v731;
  *(_OWORD *)v731 = xmmword_19918EFC4;
  *(_DWORD *)(v731 + 16) = 65039;
  v732 = WTF::fastMalloc((WTF *)0x14);
  v1054[1458] = 0x500000005;
  v1054[1457] = v732;
  *(_OWORD *)v732 = xmmword_19918EFDC;
  *(_DWORD *)(v732 + 16) = 65039;
  v733 = WTF::fastMalloc((WTF *)0x14);
  v1054[1460] = 0x500000005;
  v1054[1459] = v733;
  *(_OWORD *)v733 = xmmword_19918EFF4;
  *(_DWORD *)(v733 + 16) = 65039;
  v734 = WTF::fastMalloc((WTF *)0x14);
  v1054[1462] = 0x500000005;
  v1054[1461] = v734;
  *(_OWORD *)v734 = xmmword_19918F00C;
  *(_DWORD *)(v734 + 16) = 65039;
  v735 = WTF::fastMalloc((WTF *)0x14);
  v1054[1464] = 0x500000005;
  v1054[1463] = v735;
  *(_OWORD *)v735 = xmmword_19918F024;
  *(_DWORD *)(v735 + 16) = 65039;
  v736 = WTF::fastMalloc((WTF *)0x14);
  v1054[1466] = 0x500000005;
  v1054[1465] = v736;
  *(_OWORD *)v736 = xmmword_19918F03C;
  *(_DWORD *)(v736 + 16) = 65039;
  v737 = WTF::fastMalloc((WTF *)0x14);
  v1054[1468] = 0x500000005;
  v1054[1467] = v737;
  *(_OWORD *)v737 = xmmword_19918F054;
  *(_DWORD *)(v737 + 16) = 65039;
  v738 = WTF::fastMalloc((WTF *)0x14);
  v1054[1470] = 0x500000005;
  v1054[1469] = v738;
  *(_OWORD *)v738 = xmmword_19918F06C;
  *(_DWORD *)(v738 + 16) = 65039;
  v739 = WTF::fastMalloc((WTF *)0x14);
  v1054[1472] = 0x500000005;
  v1054[1471] = v739;
  *(_OWORD *)v739 = xmmword_19918F084;
  *(_DWORD *)(v739 + 16) = 65039;
  v740 = WTF::fastMalloc((WTF *)0x14);
  v1054[1474] = 0x500000005;
  v1054[1473] = v740;
  *(_OWORD *)v740 = xmmword_19918F09C;
  *(_DWORD *)(v740 + 16) = 65039;
  v741 = WTF::fastMalloc((WTF *)0x14);
  v1054[1476] = 0x500000005;
  v1054[1475] = v741;
  *(_OWORD *)v741 = xmmword_19918F0B4;
  *(_DWORD *)(v741 + 16) = 65039;
  v742 = WTF::fastMalloc((WTF *)0x14);
  v1054[1478] = 0x500000005;
  v1054[1477] = v742;
  *(_OWORD *)v742 = xmmword_19918F0CC;
  *(_DWORD *)(v742 + 16) = 65039;
  v743 = WTF::fastMalloc((WTF *)0x14);
  v1054[1480] = 0x500000005;
  v1054[1479] = v743;
  *(_OWORD *)v743 = xmmword_19918F0E4;
  *(_DWORD *)(v743 + 16) = 65039;
  v744 = WTF::fastMalloc((WTF *)0x14);
  v1054[1482] = 0x500000005;
  v1054[1481] = v744;
  *(_OWORD *)v744 = xmmword_19918F0FC;
  *(_DWORD *)(v744 + 16) = 65039;
  v745 = WTF::fastMalloc((WTF *)0x14);
  v1054[1484] = 0x500000005;
  v1054[1483] = v745;
  *(_OWORD *)v745 = xmmword_19918F114;
  *(_DWORD *)(v745 + 16) = 65039;
  v746 = WTF::fastMalloc((WTF *)0x14);
  v1054[1486] = 0x500000005;
  v1054[1485] = v746;
  *(_OWORD *)v746 = xmmword_19918F12C;
  *(_DWORD *)(v746 + 16) = 65039;
  v747 = WTF::fastMalloc((WTF *)0x14);
  v1054[1488] = 0x500000005;
  v1054[1487] = v747;
  *(_OWORD *)v747 = xmmword_19918F144;
  *(_DWORD *)(v747 + 16) = 65039;
  v748 = WTF::fastMalloc((WTF *)0x14);
  v1054[1490] = 0x500000005;
  v1054[1489] = v748;
  *(_OWORD *)v748 = xmmword_19918F15C;
  *(_DWORD *)(v748 + 16) = 65039;
  v749 = WTF::fastMalloc((WTF *)0x14);
  v1054[1492] = 0x500000005;
  v1054[1491] = v749;
  *(_OWORD *)v749 = xmmword_19918F174;
  *(_DWORD *)(v749 + 16) = 65039;
  v750 = WTF::fastMalloc((WTF *)0x14);
  v1054[1494] = 0x500000005;
  v1054[1493] = v750;
  *(_OWORD *)v750 = xmmword_19918F18C;
  *(_DWORD *)(v750 + 16) = 65039;
  v751 = WTF::fastMalloc((WTF *)0x14);
  v1054[1496] = 0x500000005;
  v1054[1495] = v751;
  *(_OWORD *)v751 = xmmword_19918F1A4;
  *(_DWORD *)(v751 + 16) = 65039;
  v752 = WTF::fastMalloc((WTF *)0x14);
  v1054[1498] = 0x500000005;
  v1054[1497] = v752;
  *(_OWORD *)v752 = xmmword_19918F1BC;
  *(_DWORD *)(v752 + 16) = 65039;
  v753 = WTF::fastMalloc((WTF *)0x14);
  v1054[1500] = 0x500000005;
  v1054[1499] = v753;
  *(_OWORD *)v753 = xmmword_19918F1D4;
  *(_DWORD *)(v753 + 16) = 65039;
  v754 = WTF::fastMalloc((WTF *)0x14);
  v1054[1502] = 0x500000005;
  v1054[1501] = v754;
  *(_OWORD *)v754 = xmmword_19918F1EC;
  *(_DWORD *)(v754 + 16) = 65039;
  v755 = WTF::fastMalloc((WTF *)0x14);
  v1054[1504] = 0x500000005;
  v1054[1503] = v755;
  *(_OWORD *)v755 = xmmword_19918F204;
  *(_DWORD *)(v755 + 16) = 65039;
  v756 = WTF::fastMalloc((WTF *)0x14);
  v1054[1506] = 0x500000005;
  v1054[1505] = v756;
  *(_OWORD *)v756 = xmmword_19918F21C;
  *(_DWORD *)(v756 + 16) = 65039;
  v757 = WTF::fastMalloc((WTF *)0x14);
  v1054[1508] = 0x500000005;
  v1054[1507] = v757;
  *(_OWORD *)v757 = xmmword_19918F234;
  *(_DWORD *)(v757 + 16) = 65039;
  v758 = WTF::fastMalloc((WTF *)0x14);
  v1054[1510] = 0x500000005;
  v1054[1509] = v758;
  *(_OWORD *)v758 = xmmword_19918F24C;
  *(_DWORD *)(v758 + 16) = 65039;
  v759 = WTF::fastMalloc((WTF *)0x14);
  v1054[1512] = 0x500000005;
  v1054[1511] = v759;
  *(_OWORD *)v759 = xmmword_19918F264;
  *(_DWORD *)(v759 + 16) = 65039;
  v760 = WTF::fastMalloc((WTF *)0x14);
  v1054[1514] = 0x500000005;
  v1054[1513] = v760;
  *(_OWORD *)v760 = xmmword_19918F27C;
  *(_DWORD *)(v760 + 16) = 65039;
  v761 = WTF::fastMalloc((WTF *)0x14);
  v1054[1516] = 0x500000005;
  v1054[1515] = v761;
  *(_OWORD *)v761 = xmmword_19918F294;
  *(_DWORD *)(v761 + 16) = 65039;
  v762 = WTF::fastMalloc((WTF *)0x14);
  v1054[1518] = 0x500000005;
  v1054[1517] = v762;
  *(_OWORD *)v762 = xmmword_19918F2AC;
  *(_DWORD *)(v762 + 16) = 65039;
  v763 = WTF::fastMalloc((WTF *)0x14);
  v1054[1520] = 0x500000005;
  v1054[1519] = v763;
  *(_OWORD *)v763 = xmmword_19918F2C4;
  *(_DWORD *)(v763 + 16) = 65039;
  v764 = WTF::fastMalloc((WTF *)0x14);
  v1054[1522] = 0x500000005;
  v1054[1521] = v764;
  *(_OWORD *)v764 = xmmword_19918F2DC;
  *(_DWORD *)(v764 + 16) = 65039;
  v765 = WTF::fastMalloc((WTF *)0x14);
  v1054[1524] = 0x500000005;
  v1054[1523] = v765;
  *(_OWORD *)v765 = xmmword_19918F2F4;
  *(_DWORD *)(v765 + 16) = 65039;
  v766 = WTF::fastMalloc((WTF *)0x14);
  v1054[1526] = 0x500000005;
  v1054[1525] = v766;
  *(_OWORD *)v766 = xmmword_19918F30C;
  *(_DWORD *)(v766 + 16) = 65039;
  v767 = WTF::fastMalloc((WTF *)0x14);
  v1054[1528] = 0x500000005;
  v1054[1527] = v767;
  *(_OWORD *)v767 = xmmword_19918F324;
  *(_DWORD *)(v767 + 16) = 65039;
  v768 = WTF::fastMalloc((WTF *)0x14);
  v1054[1530] = 0x500000005;
  v1054[1529] = v768;
  *(_OWORD *)v768 = xmmword_19918F33C;
  *(_DWORD *)(v768 + 16) = 65039;
  v769 = WTF::fastMalloc((WTF *)0x14);
  v1054[1532] = 0x500000005;
  v1054[1531] = v769;
  *(_OWORD *)v769 = xmmword_19918F354;
  *(_DWORD *)(v769 + 16) = 65039;
  v770 = WTF::fastMalloc((WTF *)0x14);
  v1054[1534] = 0x500000005;
  v1054[1533] = v770;
  *(_OWORD *)v770 = xmmword_19918F36C;
  *(_DWORD *)(v770 + 16) = 65039;
  v771 = WTF::fastMalloc((WTF *)0x14);
  v1054[1536] = 0x500000005;
  v1054[1535] = v771;
  *(_OWORD *)v771 = xmmword_19918F384;
  *(_DWORD *)(v771 + 16) = 65039;
  v772 = WTF::fastMalloc((WTF *)0x14);
  v1054[1538] = 0x500000005;
  v1054[1537] = v772;
  *(_OWORD *)v772 = xmmword_19918F39C;
  *(_DWORD *)(v772 + 16) = 65039;
  v773 = WTF::fastMalloc((WTF *)0x14);
  v1054[1540] = 0x500000005;
  v1054[1539] = v773;
  *(_OWORD *)v773 = xmmword_19918F3B4;
  *(_DWORD *)(v773 + 16) = 65039;
  v774 = WTF::fastMalloc((WTF *)0x14);
  v1054[1542] = 0x500000005;
  v1054[1541] = v774;
  *(_OWORD *)v774 = xmmword_19918F3CC;
  *(_DWORD *)(v774 + 16) = 65039;
  v775 = WTF::fastMalloc((WTF *)0x14);
  v1054[1544] = 0x500000005;
  v1054[1543] = v775;
  *(_OWORD *)v775 = xmmword_19918F3E4;
  *(_DWORD *)(v775 + 16) = 65039;
  v776 = WTF::fastMalloc((WTF *)0x14);
  v1054[1546] = 0x500000005;
  v1054[1545] = v776;
  *(_OWORD *)v776 = xmmword_19918F3FC;
  *(_DWORD *)(v776 + 16) = 65039;
  v777 = WTF::fastMalloc((WTF *)0x14);
  v1054[1548] = 0x500000005;
  v1054[1547] = v777;
  *(_OWORD *)v777 = xmmword_19918F414;
  *(_DWORD *)(v777 + 16) = 65039;
  v778 = WTF::fastMalloc((WTF *)0x14);
  v1054[1550] = 0x500000005;
  v1054[1549] = v778;
  *(_OWORD *)v778 = xmmword_19918F42C;
  *(_DWORD *)(v778 + 16) = 65039;
  v779 = WTF::fastMalloc((WTF *)0x14);
  v1054[1552] = 0x500000005;
  v1054[1551] = v779;
  *(_OWORD *)v779 = xmmword_19918F444;
  *(_DWORD *)(v779 + 16) = 65039;
  v780 = WTF::fastMalloc((WTF *)0x14);
  v1054[1554] = 0x500000005;
  v1054[1553] = v780;
  *(_OWORD *)v780 = xmmword_19918F45C;
  *(_DWORD *)(v780 + 16) = 65039;
  v781 = WTF::fastMalloc((WTF *)0x14);
  v1054[1556] = 0x500000005;
  v1054[1555] = v781;
  *(_OWORD *)v781 = xmmword_19918F474;
  *(_DWORD *)(v781 + 16) = 65039;
  v782 = WTF::fastMalloc((WTF *)0x14);
  v1054[1558] = 0x500000005;
  v1054[1557] = v782;
  *(_OWORD *)v782 = xmmword_19918F48C;
  *(_DWORD *)(v782 + 16) = 65039;
  v783 = WTF::fastMalloc((WTF *)0x14);
  v1054[1560] = 0x500000005;
  v1054[1559] = v783;
  *(_OWORD *)v783 = xmmword_19918F4A4;
  *(_DWORD *)(v783 + 16) = 65039;
  v784 = WTF::fastMalloc((WTF *)0x14);
  v1054[1562] = 0x500000005;
  v1054[1561] = v784;
  *(_OWORD *)v784 = xmmword_19918F4BC;
  *(_DWORD *)(v784 + 16) = 65039;
  v785 = WTF::fastMalloc((WTF *)0x14);
  v1054[1564] = 0x500000005;
  v1054[1563] = v785;
  *(_OWORD *)v785 = xmmword_19918F4D4;
  *(_DWORD *)(v785 + 16) = 65039;
  v786 = WTF::fastMalloc((WTF *)0x14);
  v1054[1566] = 0x500000005;
  v1054[1565] = v786;
  *(_OWORD *)v786 = xmmword_19918F4EC;
  *(_DWORD *)(v786 + 16) = 65039;
  v787 = WTF::fastMalloc((WTF *)0x14);
  v1054[1568] = 0x500000005;
  v1054[1567] = v787;
  *(_OWORD *)v787 = xmmword_19918F504;
  *(_DWORD *)(v787 + 16) = 65039;
  v788 = WTF::fastMalloc((WTF *)0x14);
  v1054[1570] = 0x500000005;
  v1054[1569] = v788;
  *(_OWORD *)v788 = xmmword_19918F51C;
  *(_DWORD *)(v788 + 16) = 65039;
  v789 = WTF::fastMalloc((WTF *)0x14);
  v1054[1572] = 0x500000005;
  v1054[1571] = v789;
  *(_OWORD *)v789 = xmmword_19918F534;
  *(_DWORD *)(v789 + 16) = 65039;
  v790 = WTF::fastMalloc((WTF *)0x14);
  v1054[1574] = 0x500000005;
  v1054[1573] = v790;
  *(_OWORD *)v790 = xmmword_19918F54C;
  *(_DWORD *)(v790 + 16) = 65039;
  v791 = WTF::fastMalloc((WTF *)0x14);
  v1054[1576] = 0x500000005;
  v1054[1575] = v791;
  *(_OWORD *)v791 = xmmword_19918F564;
  *(_DWORD *)(v791 + 16) = 65039;
  v792 = WTF::fastMalloc((WTF *)0x14);
  v1054[1578] = 0x500000005;
  v1054[1577] = v792;
  *(_OWORD *)v792 = xmmword_19918F57C;
  *(_DWORD *)(v792 + 16) = 65039;
  v793 = WTF::fastMalloc((WTF *)0x14);
  v1054[1580] = 0x500000005;
  v1054[1579] = v793;
  *(_OWORD *)v793 = xmmword_19918F594;
  *(_DWORD *)(v793 + 16) = 65039;
  v794 = WTF::fastMalloc((WTF *)0x14);
  v1054[1582] = 0x500000005;
  v1054[1581] = v794;
  *(_OWORD *)v794 = xmmword_19918F5AC;
  *(_DWORD *)(v794 + 16) = 65039;
  v795 = WTF::fastMalloc((WTF *)0x14);
  v1054[1584] = 0x500000005;
  v1054[1583] = v795;
  *(_OWORD *)v795 = xmmword_19918F5C4;
  *(_DWORD *)(v795 + 16) = 65039;
  v796 = WTF::fastMalloc((WTF *)0x14);
  v1054[1586] = 0x500000005;
  v1054[1585] = v796;
  *(_OWORD *)v796 = xmmword_19918F5DC;
  *(_DWORD *)(v796 + 16) = 65039;
  v797 = WTF::fastMalloc((WTF *)0x14);
  v1054[1588] = 0x500000005;
  v1054[1587] = v797;
  *(_OWORD *)v797 = xmmword_19918F5F4;
  *(_DWORD *)(v797 + 16) = 65039;
  v798 = WTF::fastMalloc((WTF *)0x14);
  v1054[1590] = 0x500000005;
  v1054[1589] = v798;
  *(_OWORD *)v798 = xmmword_19918F60C;
  *(_DWORD *)(v798 + 16) = 65039;
  v799 = WTF::fastMalloc((WTF *)0x14);
  v1054[1592] = 0x500000005;
  v1054[1591] = v799;
  *(_OWORD *)v799 = xmmword_19918F624;
  *(_DWORD *)(v799 + 16) = 65039;
  v800 = WTF::fastMalloc((WTF *)0x14);
  v1054[1594] = 0x500000005;
  v1054[1593] = v800;
  *(_OWORD *)v800 = xmmword_19918F63C;
  *(_DWORD *)(v800 + 16) = 65039;
  v801 = WTF::fastMalloc((WTF *)0x14);
  v1054[1596] = 0x500000005;
  v1054[1595] = v801;
  *(_OWORD *)v801 = xmmword_19918F654;
  *(_DWORD *)(v801 + 16) = 65039;
  v802 = WTF::fastMalloc((WTF *)0x14);
  v1054[1598] = 0x500000005;
  v1054[1597] = v802;
  *(_OWORD *)v802 = xmmword_19918F66C;
  *(_DWORD *)(v802 + 16) = 65039;
  v803 = WTF::fastMalloc((WTF *)0x14);
  v1054[1600] = 0x500000005;
  v1054[1599] = v803;
  *(_OWORD *)v803 = xmmword_19918F684;
  *(_DWORD *)(v803 + 16) = 65039;
  v804 = WTF::fastMalloc((WTF *)0x14);
  v1054[1602] = 0x500000005;
  v1054[1601] = v804;
  *(_OWORD *)v804 = xmmword_19918F69C;
  *(_DWORD *)(v804 + 16) = 65039;
  v805 = WTF::fastMalloc((WTF *)0x14);
  v1054[1604] = 0x500000005;
  v1054[1603] = v805;
  *(_OWORD *)v805 = xmmword_19918F6B4;
  *(_DWORD *)(v805 + 16) = 65039;
  v806 = WTF::fastMalloc((WTF *)0x14);
  v1054[1606] = 0x500000005;
  v1054[1605] = v806;
  *(_OWORD *)v806 = xmmword_19918F6CC;
  *(_DWORD *)(v806 + 16) = 65039;
  v807 = WTF::fastMalloc((WTF *)0x14);
  v1054[1608] = 0x500000005;
  v1054[1607] = v807;
  *(_OWORD *)v807 = xmmword_19918F6E4;
  *(_DWORD *)(v807 + 16) = 65039;
  v808 = WTF::fastMalloc((WTF *)0x14);
  v1054[1610] = 0x500000005;
  v1054[1609] = v808;
  *(_OWORD *)v808 = xmmword_19918F6FC;
  *(_DWORD *)(v808 + 16) = 65039;
  v809 = WTF::fastMalloc((WTF *)0x14);
  v1054[1612] = 0x500000005;
  v1054[1611] = v809;
  *(_OWORD *)v809 = xmmword_19918F714;
  *(_DWORD *)(v809 + 16) = 65039;
  v810 = WTF::fastMalloc((WTF *)0x14);
  v1054[1614] = 0x500000005;
  v1054[1613] = v810;
  *(_OWORD *)v810 = xmmword_19918F72C;
  *(_DWORD *)(v810 + 16) = 65039;
  v811 = WTF::fastMalloc((WTF *)0x14);
  v1054[1616] = 0x500000005;
  v1054[1615] = v811;
  *(_OWORD *)v811 = xmmword_19918F744;
  *(_DWORD *)(v811 + 16) = 65039;
  v812 = WTF::fastMalloc((WTF *)0x14);
  v1054[1618] = 0x500000005;
  v1054[1617] = v812;
  *(_OWORD *)v812 = xmmword_19918F75C;
  *(_DWORD *)(v812 + 16) = 65039;
  v813 = WTF::fastMalloc((WTF *)0x14);
  v1054[1620] = 0x500000005;
  v1054[1619] = v813;
  *(_OWORD *)v813 = xmmword_19918F774;
  *(_DWORD *)(v813 + 16) = 65039;
  v814 = WTF::fastMalloc((WTF *)0x14);
  v1054[1622] = 0x500000005;
  v1054[1621] = v814;
  *(_OWORD *)v814 = xmmword_19918F78C;
  *(_DWORD *)(v814 + 16) = 65039;
  v815 = WTF::fastMalloc((WTF *)0x14);
  v1054[1624] = 0x500000005;
  v1054[1623] = v815;
  *(_OWORD *)v815 = xmmword_19918F7A4;
  *(_DWORD *)(v815 + 16) = 65039;
  v816 = WTF::fastMalloc((WTF *)0x14);
  v1054[1626] = 0x500000005;
  v1054[1625] = v816;
  *(_OWORD *)v816 = xmmword_19918F7BC;
  *(_DWORD *)(v816 + 16) = 65039;
  v817 = WTF::fastMalloc((WTF *)0x14);
  v1054[1628] = 0x500000005;
  v1054[1627] = v817;
  *(_OWORD *)v817 = xmmword_19918F7D4;
  *(_DWORD *)(v817 + 16) = 65039;
  v818 = WTF::fastMalloc((WTF *)0x14);
  v1054[1630] = 0x500000005;
  v1054[1629] = v818;
  *(_OWORD *)v818 = xmmword_19918F7EC;
  *(_DWORD *)(v818 + 16) = 65039;
  v819 = WTF::fastMalloc((WTF *)0x14);
  v1054[1632] = 0x500000005;
  v1054[1631] = v819;
  *(_OWORD *)v819 = xmmword_19918F804;
  *(_DWORD *)(v819 + 16) = 65039;
  v820 = WTF::fastMalloc((WTF *)0x14);
  v1054[1634] = 0x500000005;
  v1054[1633] = v820;
  *(_OWORD *)v820 = xmmword_19918F81C;
  *(_DWORD *)(v820 + 16) = 65039;
  v821 = WTF::fastMalloc((WTF *)0x14);
  v1054[1636] = 0x500000005;
  v1054[1635] = v821;
  *(_OWORD *)v821 = xmmword_19918F834;
  *(_DWORD *)(v821 + 16) = 65039;
  v822 = WTF::fastMalloc((WTF *)0x14);
  v1054[1638] = 0x500000005;
  v1054[1637] = v822;
  *(_OWORD *)v822 = xmmword_19918F84C;
  *(_DWORD *)(v822 + 16) = 65039;
  v823 = WTF::fastMalloc((WTF *)0x14);
  v1054[1640] = 0x500000005;
  v1054[1639] = v823;
  *(_OWORD *)v823 = xmmword_19918F864;
  *(_DWORD *)(v823 + 16) = 65039;
  v824 = WTF::fastMalloc((WTF *)0x14);
  v1054[1642] = 0x500000005;
  v1054[1641] = v824;
  *(_OWORD *)v824 = xmmword_19918F87C;
  *(_DWORD *)(v824 + 16) = 65039;
  v825 = WTF::fastMalloc((WTF *)0x14);
  v1054[1644] = 0x500000005;
  v1054[1643] = v825;
  *(_OWORD *)v825 = xmmword_19918F894;
  *(_DWORD *)(v825 + 16) = 65039;
  v826 = WTF::fastMalloc((WTF *)0x14);
  v1054[1646] = 0x500000005;
  v1054[1645] = v826;
  *(_OWORD *)v826 = xmmword_19918F8AC;
  *(_DWORD *)(v826 + 16) = 65039;
  v827 = WTF::fastMalloc((WTF *)0x14);
  v1054[1648] = 0x500000005;
  v1054[1647] = v827;
  *(_OWORD *)v827 = xmmword_19918F8C4;
  *(_DWORD *)(v827 + 16) = 65039;
  v828 = WTF::fastMalloc((WTF *)0x14);
  v1054[1650] = 0x500000005;
  v1054[1649] = v828;
  *(_OWORD *)v828 = xmmword_19918F8DC;
  *(_DWORD *)(v828 + 16) = 65039;
  v829 = WTF::fastMalloc((WTF *)0x14);
  v1054[1652] = 0x500000005;
  v1054[1651] = v829;
  *(_OWORD *)v829 = xmmword_19918F8F4;
  *(_DWORD *)(v829 + 16) = 65039;
  v830 = WTF::fastMalloc((WTF *)0x14);
  v1054[1654] = 0x500000005;
  v1054[1653] = v830;
  *(_OWORD *)v830 = xmmword_19918F90C;
  *(_DWORD *)(v830 + 16) = 65039;
  v831 = WTF::fastMalloc((WTF *)0x14);
  v1054[1656] = 0x500000005;
  v1054[1655] = v831;
  *(_OWORD *)v831 = xmmword_19918F924;
  *(_DWORD *)(v831 + 16) = 129489;
  v832 = WTF::fastMalloc((WTF *)0x14);
  v1054[1658] = 0x500000005;
  v1054[1657] = v832;
  *(_OWORD *)v832 = xmmword_19918F93C;
  *(_DWORD *)(v832 + 16) = 129490;
  v833 = WTF::fastMalloc((WTF *)0x14);
  v1054[1660] = 0x500000005;
  v1054[1659] = v833;
  *(_OWORD *)v833 = xmmword_19918F954;
  *(_DWORD *)(v833 + 16) = 129490;
  v834 = WTF::fastMalloc((WTF *)0x14);
  v1054[1662] = 0x500000005;
  v1054[1661] = v834;
  *(_OWORD *)v834 = xmmword_19918F96C;
  *(_DWORD *)(v834 + 16) = 65039;
  v835 = WTF::fastMalloc((WTF *)0x14);
  v1054[1664] = 0x500000005;
  v1054[1663] = v835;
  *(_OWORD *)v835 = xmmword_19918F984;
  *(_DWORD *)(v835 + 16) = 65039;
  v836 = WTF::fastMalloc((WTF *)0x14);
  v1054[1666] = 0x500000005;
  v1054[1665] = v836;
  *(_OWORD *)v836 = xmmword_19918F99C;
  *(_DWORD *)(v836 + 16) = 65039;
  v837 = WTF::fastMalloc((WTF *)0x14);
  v1054[1668] = 0x500000005;
  v1054[1667] = v837;
  *(_OWORD *)v837 = xmmword_19918F9B4;
  *(_DWORD *)(v837 + 16) = 65039;
  v838 = WTF::fastMalloc((WTF *)0x14);
  v1054[1670] = 0x500000005;
  v1054[1669] = v838;
  *(_OWORD *)v838 = xmmword_19918F9CC;
  *(_DWORD *)(v838 + 16) = 65039;
  v839 = WTF::fastMalloc((WTF *)0x14);
  v1054[1672] = 0x500000005;
  v1054[1671] = v839;
  *(_OWORD *)v839 = xmmword_19918F9E4;
  *(_DWORD *)(v839 + 16) = 65039;
  v840 = WTF::fastMalloc((WTF *)0x14);
  v1054[1674] = 0x500000005;
  v1054[1673] = v840;
  *(_OWORD *)v840 = xmmword_19918F9FC;
  *(_DWORD *)(v840 + 16) = 65039;
  v841 = WTF::fastMalloc((WTF *)0x14);
  v1054[1676] = 0x500000005;
  v1054[1675] = v841;
  *(_OWORD *)v841 = xmmword_19918FA14;
  *(_DWORD *)(v841 + 16) = 65039;
  v842 = WTF::fastMalloc((WTF *)0x14);
  v1054[1678] = 0x500000005;
  v1054[1677] = v842;
  *(_OWORD *)v842 = xmmword_19918FA2C;
  *(_DWORD *)(v842 + 16) = 65039;
  v843 = WTF::fastMalloc((WTF *)0x14);
  v1054[1680] = 0x500000005;
  v1054[1679] = v843;
  *(_OWORD *)v843 = xmmword_19918FA44;
  *(_DWORD *)(v843 + 16) = 65039;
  v844 = WTF::fastMalloc((WTF *)0x14);
  v1054[1682] = 0x500000005;
  v1054[1681] = v844;
  *(_OWORD *)v844 = xmmword_19918FA5C;
  *(_DWORD *)(v844 + 16) = 65039;
  v845 = WTF::fastMalloc((WTF *)0x14);
  v1054[1684] = 0x500000005;
  v1054[1683] = v845;
  *(_OWORD *)v845 = xmmword_19918FA74;
  *(_DWORD *)(v845 + 16) = 65039;
  v846 = WTF::fastMalloc((WTF *)0x14);
  v1054[1686] = 0x500000005;
  v1054[1685] = v846;
  *(_OWORD *)v846 = xmmword_19918FA8C;
  *(_DWORD *)(v846 + 16) = 65039;
  v847 = WTF::fastMalloc((WTF *)0x14);
  v1054[1688] = 0x500000005;
  v1054[1687] = v847;
  *(_OWORD *)v847 = xmmword_19918FAA4;
  *(_DWORD *)(v847 + 16) = 65039;
  v848 = WTF::fastMalloc((WTF *)0x14);
  v1054[1690] = 0x500000005;
  v1054[1689] = v848;
  *(_OWORD *)v848 = xmmword_19918FABC;
  *(_DWORD *)(v848 + 16) = 65039;
  v849 = WTF::fastMalloc((WTF *)0x14);
  v1054[1692] = 0x500000005;
  v1054[1691] = v849;
  *(_OWORD *)v849 = xmmword_19918FAD4;
  *(_DWORD *)(v849 + 16) = 65039;
  v850 = WTF::fastMalloc((WTF *)0x14);
  v1054[1694] = 0x500000005;
  v1054[1693] = v850;
  *(_OWORD *)v850 = xmmword_19918FAEC;
  *(_DWORD *)(v850 + 16) = 65039;
  v851 = WTF::fastMalloc((WTF *)0x14);
  v1054[1696] = 0x500000005;
  v1054[1695] = v851;
  *(_OWORD *)v851 = xmmword_19918FB04;
  *(_DWORD *)(v851 + 16) = 65039;
  v852 = WTF::fastMalloc((WTF *)0x14);
  v1054[1698] = 0x500000005;
  v1054[1697] = v852;
  *(_OWORD *)v852 = xmmword_19918FB1C;
  *(_DWORD *)(v852 + 16) = 65039;
  v853 = WTF::fastMalloc((WTF *)0x14);
  v1054[1700] = 0x500000005;
  v1054[1699] = v853;
  *(_OWORD *)v853 = xmmword_19918FB34;
  *(_DWORD *)(v853 + 16) = 65039;
  v854 = WTF::fastMalloc((WTF *)0x14);
  v1054[1702] = 0x500000005;
  v1054[1701] = v854;
  *(_OWORD *)v854 = xmmword_19918FB4C;
  *(_DWORD *)(v854 + 16) = 65039;
  v855 = WTF::fastMalloc((WTF *)0x14);
  v1054[1704] = 0x500000005;
  v1054[1703] = v855;
  *(_OWORD *)v855 = xmmword_19918FB64;
  *(_DWORD *)(v855 + 16) = 65039;
  v856 = WTF::fastMalloc((WTF *)0x14);
  v1054[1706] = 0x500000005;
  v1054[1705] = v856;
  *(_OWORD *)v856 = xmmword_19918FB7C;
  *(_DWORD *)(v856 + 16) = 65039;
  v857 = WTF::fastMalloc((WTF *)0x14);
  v1054[1708] = 0x500000005;
  v1054[1707] = v857;
  *(_OWORD *)v857 = xmmword_19918FB94;
  *(_DWORD *)(v857 + 16) = 65039;
  v858 = WTF::fastMalloc((WTF *)0x14);
  v1054[1710] = 0x500000005;
  v1054[1709] = v858;
  *(_OWORD *)v858 = xmmword_19918FBAC;
  *(_DWORD *)(v858 + 16) = 65039;
  v859 = WTF::fastMalloc((WTF *)0x14);
  v1054[1712] = 0x500000005;
  v1054[1711] = v859;
  *(_OWORD *)v859 = xmmword_19918FBC4;
  *(_DWORD *)(v859 + 16) = 65039;
  v860 = WTF::fastMalloc((WTF *)0x14);
  v1054[1714] = 0x500000005;
  v1054[1713] = v860;
  *(_OWORD *)v860 = xmmword_19918FBDC;
  *(_DWORD *)(v860 + 16) = 65039;
  v861 = WTF::fastMalloc((WTF *)0x14);
  v1054[1716] = 0x500000005;
  v1054[1715] = v861;
  *(_OWORD *)v861 = xmmword_19918FBF4;
  *(_DWORD *)(v861 + 16) = 65039;
  v862 = WTF::fastMalloc((WTF *)0x14);
  v1054[1718] = 0x500000005;
  v1054[1717] = v862;
  *(_OWORD *)v862 = xmmword_19918FC0C;
  *(_DWORD *)(v862 + 16) = 65039;
  v863 = WTF::fastMalloc((WTF *)0x14);
  v1054[1720] = 0x500000005;
  v1054[1719] = v863;
  *(_OWORD *)v863 = xmmword_19918FC24;
  *(_DWORD *)(v863 + 16) = 65039;
  v864 = WTF::fastMalloc((WTF *)0x14);
  v1054[1722] = 0x500000005;
  v1054[1721] = v864;
  *(_OWORD *)v864 = xmmword_19918FC3C;
  *(_DWORD *)(v864 + 16) = 65039;
  v865 = WTF::fastMalloc((WTF *)0x14);
  v1054[1724] = 0x500000005;
  v1054[1723] = v865;
  *(_OWORD *)v865 = xmmword_19918FC54;
  *(_DWORD *)(v865 + 16) = 65039;
  v866 = WTF::fastMalloc((WTF *)0x14);
  v1054[1726] = 0x500000005;
  v1054[1725] = v866;
  *(_OWORD *)v866 = xmmword_19918FC6C;
  *(_DWORD *)(v866 + 16) = 65039;
  v867 = WTF::fastMalloc((WTF *)0x14);
  v1054[1728] = 0x500000005;
  v1054[1727] = v867;
  *(_OWORD *)v867 = xmmword_19918FC84;
  *(_DWORD *)(v867 + 16) = 65039;
  v868 = WTF::fastMalloc((WTF *)0x14);
  v1054[1730] = 0x500000005;
  v1054[1729] = v868;
  *(_OWORD *)v868 = xmmword_19918FC9C;
  *(_DWORD *)(v868 + 16) = 65039;
  v869 = WTF::fastMalloc((WTF *)0x14);
  v1054[1732] = 0x500000005;
  v1054[1731] = v869;
  *(_OWORD *)v869 = xmmword_19918FCB4;
  *(_DWORD *)(v869 + 16) = 65039;
  v870 = WTF::fastMalloc((WTF *)0x14);
  v1054[1734] = 0x500000005;
  v1054[1733] = v870;
  *(_OWORD *)v870 = xmmword_19918FCCC;
  *(_DWORD *)(v870 + 16) = 65039;
  v871 = WTF::fastMalloc((WTF *)0x14);
  v1054[1736] = 0x500000005;
  v1054[1735] = v871;
  *(_OWORD *)v871 = xmmword_19918FCE4;
  *(_DWORD *)(v871 + 16) = 65039;
  v872 = WTF::fastMalloc((WTF *)0x14);
  v1054[1738] = 0x500000005;
  v1054[1737] = v872;
  *(_OWORD *)v872 = xmmword_19918FCFC;
  *(_DWORD *)(v872 + 16) = 65039;
  v873 = WTF::fastMalloc((WTF *)0x14);
  v1054[1740] = 0x500000005;
  v1054[1739] = v873;
  *(_OWORD *)v873 = xmmword_19918FD14;
  *(_DWORD *)(v873 + 16) = 65039;
  v874 = WTF::fastMalloc((WTF *)0x14);
  v1054[1742] = 0x500000005;
  v1054[1741] = v874;
  *(_OWORD *)v874 = xmmword_19918FD2C;
  *(_DWORD *)(v874 + 16) = 65039;
  v875 = WTF::fastMalloc((WTF *)0x14);
  v1054[1744] = 0x500000005;
  v1054[1743] = v875;
  *(_OWORD *)v875 = xmmword_19918FD44;
  *(_DWORD *)(v875 + 16) = 65039;
  v876 = WTF::fastMalloc((WTF *)0x14);
  v1054[1746] = 0x500000005;
  v1054[1745] = v876;
  *(_OWORD *)v876 = xmmword_19918FD5C;
  *(_DWORD *)(v876 + 16) = 65039;
  v877 = WTF::fastMalloc((WTF *)0x14);
  v1054[1748] = 0x500000005;
  v1054[1747] = v877;
  *(_OWORD *)v877 = xmmword_19918FD74;
  *(_DWORD *)(v877 + 16) = 65039;
  v878 = WTF::fastMalloc((WTF *)0x14);
  v1054[1750] = 0x500000005;
  v1054[1749] = v878;
  *(_OWORD *)v878 = xmmword_19918FD8C;
  *(_DWORD *)(v878 + 16) = 65039;
  v879 = WTF::fastMalloc((WTF *)0x14);
  v1054[1752] = 0x500000005;
  v1054[1751] = v879;
  *(_OWORD *)v879 = xmmword_19918FDA4;
  *(_DWORD *)(v879 + 16) = 65039;
  v880 = WTF::fastMalloc((WTF *)0x14);
  v1054[1754] = 0x500000005;
  v1054[1753] = v880;
  *(_OWORD *)v880 = xmmword_19918FDBC;
  *(_DWORD *)(v880 + 16) = 65039;
  v881 = WTF::fastMalloc((WTF *)0x14);
  v1054[1756] = 0x500000005;
  v1054[1755] = v881;
  *(_OWORD *)v881 = xmmword_19918FDD4;
  *(_DWORD *)(v881 + 16) = 65039;
  v882 = WTF::fastMalloc((WTF *)0x14);
  v1054[1758] = 0x500000005;
  v1054[1757] = v882;
  *(_OWORD *)v882 = xmmword_19918FDEC;
  *(_DWORD *)(v882 + 16) = 65039;
  v883 = WTF::fastMalloc((WTF *)0x14);
  v1054[1760] = 0x500000005;
  v1054[1759] = v883;
  *(_OWORD *)v883 = xmmword_19918FE04;
  *(_DWORD *)(v883 + 16) = 65039;
  v884 = WTF::fastMalloc((WTF *)0x14);
  v1054[1762] = 0x500000005;
  v1054[1761] = v884;
  *(_OWORD *)v884 = xmmword_19918FE1C;
  *(_DWORD *)(v884 + 16) = 65039;
  v885 = WTF::fastMalloc((WTF *)0x14);
  v1054[1764] = 0x500000005;
  v1054[1763] = v885;
  *(_OWORD *)v885 = xmmword_19918FE34;
  *(_DWORD *)(v885 + 16) = 65039;
  v886 = WTF::fastMalloc((WTF *)0x14);
  v1054[1766] = 0x500000005;
  v1054[1765] = v886;
  *(_OWORD *)v886 = xmmword_19918FE4C;
  *(_DWORD *)(v886 + 16) = 65039;
  v887 = WTF::fastMalloc((WTF *)0x14);
  v1054[1768] = 0x500000005;
  v1054[1767] = v887;
  *(_OWORD *)v887 = xmmword_19918FE64;
  *(_DWORD *)(v887 + 16) = 65039;
  v888 = WTF::fastMalloc((WTF *)0x14);
  v1054[1770] = 0x500000005;
  v1054[1769] = v888;
  *(_OWORD *)v888 = xmmword_19918FE7C;
  *(_DWORD *)(v888 + 16) = 65039;
  v889 = WTF::fastMalloc((WTF *)0x14);
  v1054[1772] = 0x500000005;
  v1054[1771] = v889;
  *(_OWORD *)v889 = xmmword_19918FE94;
  *(_DWORD *)(v889 + 16) = 65039;
  v890 = WTF::fastMalloc((WTF *)0x14);
  v1054[1774] = 0x500000005;
  v1054[1773] = v890;
  *(_OWORD *)v890 = xmmword_19918FEAC;
  *(_DWORD *)(v890 + 16) = 65039;
  v891 = WTF::fastMalloc((WTF *)0x14);
  v1054[1776] = 0x500000005;
  v1054[1775] = v891;
  *(_OWORD *)v891 = xmmword_19918FEC4;
  *(_DWORD *)(v891 + 16) = 65039;
  v892 = WTF::fastMalloc((WTF *)0x14);
  v1054[1778] = 0x500000005;
  v1054[1777] = v892;
  *(_OWORD *)v892 = xmmword_19918FEDC;
  *(_DWORD *)(v892 + 16) = 65039;
  v893 = WTF::fastMalloc((WTF *)0x14);
  v1054[1780] = 0x500000005;
  v1054[1779] = v893;
  *(_OWORD *)v893 = xmmword_19918FEF4;
  *(_DWORD *)(v893 + 16) = 65039;
  v894 = WTF::fastMalloc((WTF *)0x14);
  v1054[1782] = 0x500000005;
  v1054[1781] = v894;
  *(_OWORD *)v894 = xmmword_19918FF0C;
  *(_DWORD *)(v894 + 16) = 65039;
  v895 = WTF::fastMalloc((WTF *)0x14);
  v1054[1784] = 0x500000005;
  v1054[1783] = v895;
  *(_OWORD *)v895 = xmmword_19918FF24;
  *(_DWORD *)(v895 + 16) = 65039;
  v896 = WTF::fastMalloc((WTF *)0x14);
  v1054[1786] = 0x500000005;
  v1054[1785] = v896;
  *(_OWORD *)v896 = xmmword_19918FF3C;
  *(_DWORD *)(v896 + 16) = 65039;
  v897 = WTF::fastMalloc((WTF *)0x14);
  v1054[1788] = 0x500000005;
  v1054[1787] = v897;
  *(_OWORD *)v897 = xmmword_19918FF54;
  *(_DWORD *)(v897 + 16) = 65039;
  v898 = WTF::fastMalloc((WTF *)0x14);
  v1054[1790] = 0x500000005;
  v1054[1789] = v898;
  *(_OWORD *)v898 = xmmword_19918FF6C;
  *(_DWORD *)(v898 + 16) = 65039;
  v899 = WTF::fastMalloc((WTF *)0x14);
  v1054[1792] = 0x500000005;
  v1054[1791] = v899;
  *(_OWORD *)v899 = xmmword_19918FF84;
  *(_DWORD *)(v899 + 16) = 65039;
  v900 = WTF::fastMalloc((WTF *)0x14);
  v1054[1794] = 0x500000005;
  v1054[1793] = v900;
  *(_OWORD *)v900 = xmmword_19918FF9C;
  *(_DWORD *)(v900 + 16) = 65039;
  v901 = WTF::fastMalloc((WTF *)0x14);
  v1054[1796] = 0x500000005;
  v1054[1795] = v901;
  *(_OWORD *)v901 = xmmword_19918FFB4;
  *(_DWORD *)(v901 + 16) = 65039;
  v902 = WTF::fastMalloc((WTF *)0x14);
  v1054[1798] = 0x500000005;
  v1054[1797] = v902;
  *(_OWORD *)v902 = xmmword_19918FFCC;
  *(_DWORD *)(v902 + 16) = 65039;
  v903 = WTF::fastMalloc((WTF *)0x14);
  v1054[1800] = 0x500000005;
  v1054[1799] = v903;
  *(_OWORD *)v903 = xmmword_19918FFE4;
  *(_DWORD *)(v903 + 16) = 65039;
  v904 = WTF::fastMalloc((WTF *)0x14);
  v1054[1802] = 0x500000005;
  v1054[1801] = v904;
  *(_OWORD *)v904 = xmmword_19918FFFC;
  *(_DWORD *)(v904 + 16) = 65039;
  v905 = WTF::fastMalloc((WTF *)0x14);
  v1054[1804] = 0x500000005;
  v1054[1803] = v905;
  *(_OWORD *)v905 = xmmword_199190014;
  *(_DWORD *)(v905 + 16) = 65039;
  v906 = WTF::fastMalloc((WTF *)0x14);
  v1054[1806] = 0x500000005;
  v1054[1805] = v906;
  *(_OWORD *)v906 = xmmword_19919002C;
  *(_DWORD *)(v906 + 16) = 65039;
  v907 = WTF::fastMalloc((WTF *)0x14);
  v1054[1808] = 0x500000005;
  v1054[1807] = v907;
  *(_OWORD *)v907 = xmmword_199190044;
  *(_DWORD *)(v907 + 16) = 65039;
  v908 = WTF::fastMalloc((WTF *)0x14);
  v1054[1810] = 0x500000005;
  v1054[1809] = v908;
  *(_OWORD *)v908 = xmmword_19919005C;
  *(_DWORD *)(v908 + 16) = 65039;
  v909 = WTF::fastMalloc((WTF *)0x14);
  v1054[1812] = 0x500000005;
  v1054[1811] = v909;
  *(_OWORD *)v909 = xmmword_199190074;
  *(_DWORD *)(v909 + 16) = 65039;
  v910 = WTF::fastMalloc((WTF *)0x14);
  v1054[1814] = 0x500000005;
  v1054[1813] = v910;
  *(_OWORD *)v910 = xmmword_19919008C;
  *(_DWORD *)(v910 + 16) = 65039;
  v911 = WTF::fastMalloc((WTF *)0x14);
  v1054[1816] = 0x500000005;
  v1054[1815] = v911;
  *(_OWORD *)v911 = xmmword_1991900A4;
  *(_DWORD *)(v911 + 16) = 65039;
  v912 = WTF::fastMalloc((WTF *)0x14);
  v1054[1818] = 0x500000005;
  v1054[1817] = v912;
  *(_OWORD *)v912 = xmmword_1991900BC;
  *(_DWORD *)(v912 + 16) = 65039;
  v913 = WTF::fastMalloc((WTF *)0x14);
  v1054[1820] = 0x500000005;
  v1054[1819] = v913;
  *(_OWORD *)v913 = xmmword_1991900D4;
  *(_DWORD *)(v913 + 16) = 65039;
  v914 = WTF::fastMalloc((WTF *)0x14);
  v1054[1822] = 0x500000005;
  v1054[1821] = v914;
  *(_OWORD *)v914 = xmmword_1991900EC;
  *(_DWORD *)(v914 + 16) = 65039;
  v915 = WTF::fastMalloc((WTF *)0x14);
  v1054[1824] = 0x500000005;
  v1054[1823] = v915;
  *(_OWORD *)v915 = xmmword_199190104;
  *(_DWORD *)(v915 + 16) = 65039;
  v916 = WTF::fastMalloc((WTF *)0x14);
  v1054[1826] = 0x500000005;
  v1054[1825] = v916;
  *(_OWORD *)v916 = xmmword_19919011C;
  *(_DWORD *)(v916 + 16) = 65039;
  v917 = WTF::fastMalloc((WTF *)0x14);
  v1054[1828] = 0x500000005;
  v1054[1827] = v917;
  *(_OWORD *)v917 = xmmword_199190134;
  *(_DWORD *)(v917 + 16) = 65039;
  v918 = WTF::fastMalloc((WTF *)0x14);
  v1054[1830] = 0x500000005;
  v1054[1829] = v918;
  *(_OWORD *)v918 = xmmword_19919014C;
  *(_DWORD *)(v918 + 16) = 65039;
  v919 = WTF::fastMalloc((WTF *)0x14);
  v1054[1832] = 0x500000005;
  v1054[1831] = v919;
  *(_OWORD *)v919 = xmmword_199190164;
  *(_DWORD *)(v919 + 16) = 65039;
  v920 = WTF::fastMalloc((WTF *)0x14);
  v1054[1834] = 0x500000005;
  v1054[1833] = v920;
  *(_OWORD *)v920 = xmmword_19919017C;
  *(_DWORD *)(v920 + 16) = 65039;
  v921 = WTF::fastMalloc((WTF *)0x14);
  v1054[1836] = 0x500000005;
  v1054[1835] = v921;
  *(_OWORD *)v921 = xmmword_199190194;
  *(_DWORD *)(v921 + 16) = 65039;
  v922 = WTF::fastMalloc((WTF *)0x14);
  v1054[1838] = 0x500000005;
  v1054[1837] = v922;
  *(_OWORD *)v922 = xmmword_1991901AC;
  *(_DWORD *)(v922 + 16) = 65039;
  v923 = WTF::fastMalloc((WTF *)0x14);
  v1054[1840] = 0x500000005;
  v1054[1839] = v923;
  *(_OWORD *)v923 = xmmword_1991901C4;
  *(_DWORD *)(v923 + 16) = 65039;
  v924 = WTF::fastMalloc((WTF *)0x14);
  v1054[1842] = 0x500000005;
  v1054[1841] = v924;
  *(_OWORD *)v924 = xmmword_1991901DC;
  *(_DWORD *)(v924 + 16) = 65039;
  v925 = WTF::fastMalloc((WTF *)0x14);
  v1054[1844] = 0x500000005;
  v1054[1843] = v925;
  *(_OWORD *)v925 = xmmword_1991901F4;
  *(_DWORD *)(v925 + 16) = 65039;
  v926 = WTF::fastMalloc((WTF *)0x14);
  v1054[1846] = 0x500000005;
  v1054[1845] = v926;
  *(_OWORD *)v926 = xmmword_19919020C;
  *(_DWORD *)(v926 + 16) = 65039;
  v927 = WTF::fastMalloc((WTF *)0x14);
  v1054[1848] = 0x500000005;
  v1054[1847] = v927;
  *(_OWORD *)v927 = xmmword_199190224;
  *(_DWORD *)(v927 + 16) = 65039;
  v928 = WTF::fastMalloc((WTF *)0x14);
  v1054[1850] = 0x500000005;
  v1054[1849] = v928;
  *(_OWORD *)v928 = xmmword_19919023C;
  *(_DWORD *)(v928 + 16) = 65039;
  v929 = WTF::fastMalloc((WTF *)0x14);
  v1054[1852] = 0x500000005;
  v1054[1851] = v929;
  *(_OWORD *)v929 = xmmword_199190254;
  *(_DWORD *)(v929 + 16) = 65039;
  v930 = WTF::fastMalloc((WTF *)0x14);
  v1054[1854] = 0x500000005;
  v1054[1853] = v930;
  *(_OWORD *)v930 = xmmword_19919026C;
  *(_DWORD *)(v930 + 16) = 65039;
  v931 = WTF::fastMalloc((WTF *)0x14);
  v1054[1856] = 0x500000005;
  v1054[1855] = v931;
  *(_OWORD *)v931 = xmmword_199190284;
  *(_DWORD *)(v931 + 16) = 65039;
  v932 = WTF::fastMalloc((WTF *)0x14);
  v1054[1858] = 0x500000005;
  v1054[1857] = v932;
  *(_OWORD *)v932 = xmmword_19919029C;
  *(_DWORD *)(v932 + 16) = 65039;
  v933 = WTF::fastMalloc((WTF *)0x14);
  v1054[1860] = 0x500000005;
  v1054[1859] = v933;
  *(_OWORD *)v933 = xmmword_1991902B4;
  *(_DWORD *)(v933 + 16) = 65039;
  v934 = WTF::fastMalloc((WTF *)0x14);
  v1054[1862] = 0x500000005;
  v1054[1861] = v934;
  *(_OWORD *)v934 = xmmword_1991902CC;
  *(_DWORD *)(v934 + 16) = 65039;
  v935 = WTF::fastMalloc((WTF *)0x14);
  v1054[1864] = 0x500000005;
  v1054[1863] = v935;
  *(_OWORD *)v935 = xmmword_1991902E4;
  *(_DWORD *)(v935 + 16) = 65039;
  v936 = WTF::fastMalloc((WTF *)0x14);
  v1054[1866] = 0x500000005;
  v1054[1865] = v936;
  *(_OWORD *)v936 = xmmword_1991902FC;
  *(_DWORD *)(v936 + 16) = 65039;
  v937 = WTF::fastMalloc((WTF *)0x14);
  v1054[1868] = 0x500000005;
  v1054[1867] = v937;
  *(_OWORD *)v937 = xmmword_199190314;
  *(_DWORD *)(v937 + 16) = 65039;
  v938 = WTF::fastMalloc((WTF *)0x14);
  v1054[1870] = 0x500000005;
  v1054[1869] = v938;
  *(_OWORD *)v938 = xmmword_19919032C;
  *(_DWORD *)(v938 + 16) = 65039;
  v939 = WTF::fastMalloc((WTF *)0x14);
  v1054[1872] = 0x500000005;
  v1054[1871] = v939;
  *(_OWORD *)v939 = xmmword_199190344;
  *(_DWORD *)(v939 + 16) = 127996;
  v940 = WTF::fastMalloc((WTF *)0x14);
  v1054[1874] = 0x500000005;
  v1054[1873] = v940;
  *(_OWORD *)v940 = xmmword_19919035C;
  *(_DWORD *)(v940 + 16) = 127997;
  v941 = WTF::fastMalloc((WTF *)0x14);
  v1054[1876] = 0x500000005;
  v1054[1875] = v941;
  *(_OWORD *)v941 = xmmword_199190374;
  *(_DWORD *)(v941 + 16) = 127998;
  v942 = WTF::fastMalloc((WTF *)0x14);
  v1054[1878] = 0x500000005;
  v1054[1877] = v942;
  *(_OWORD *)v942 = xmmword_19919038C;
  *(_DWORD *)(v942 + 16) = 127999;
  v943 = WTF::fastMalloc((WTF *)0x14);
  v1054[1880] = 0x500000005;
  v1054[1879] = v943;
  *(_OWORD *)v943 = xmmword_1991903A4;
  *(_DWORD *)(v943 + 16) = 127995;
  v944 = WTF::fastMalloc((WTF *)0x14);
  v1054[1882] = 0x500000005;
  v1054[1881] = v944;
  *(_OWORD *)v944 = xmmword_1991903BC;
  *(_DWORD *)(v944 + 16) = 127997;
  v945 = WTF::fastMalloc((WTF *)0x14);
  v1054[1884] = 0x500000005;
  v1054[1883] = v945;
  *(_OWORD *)v945 = xmmword_1991903D4;
  *(_DWORD *)(v945 + 16) = 127998;
  v946 = WTF::fastMalloc((WTF *)0x14);
  v1054[1886] = 0x500000005;
  v1054[1885] = v946;
  *(_OWORD *)v946 = xmmword_1991903EC;
  *(_DWORD *)(v946 + 16) = 127999;
  v947 = WTF::fastMalloc((WTF *)0x14);
  v1054[1888] = 0x500000005;
  v1054[1887] = v947;
  *(_OWORD *)v947 = xmmword_199190404;
  *(_DWORD *)(v947 + 16) = 127995;
  v948 = WTF::fastMalloc((WTF *)0x14);
  v1054[1890] = 0x500000005;
  v1054[1889] = v948;
  *(_OWORD *)v948 = xmmword_19919041C;
  *(_DWORD *)(v948 + 16) = 127996;
  v949 = WTF::fastMalloc((WTF *)0x14);
  v1054[1892] = 0x500000005;
  v1054[1891] = v949;
  *(_OWORD *)v949 = xmmword_199190434;
  *(_DWORD *)(v949 + 16) = 127998;
  v950 = WTF::fastMalloc((WTF *)0x14);
  v1054[1894] = 0x500000005;
  v1054[1893] = v950;
  *(_OWORD *)v950 = xmmword_19919044C;
  *(_DWORD *)(v950 + 16) = 127999;
  v951 = WTF::fastMalloc((WTF *)0x14);
  v1054[1896] = 0x500000005;
  v1054[1895] = v951;
  *(_OWORD *)v951 = xmmword_199190464;
  *(_DWORD *)(v951 + 16) = 127995;
  v952 = WTF::fastMalloc((WTF *)0x14);
  v1054[1898] = 0x500000005;
  v1054[1897] = v952;
  *(_OWORD *)v952 = xmmword_19919047C;
  *(_DWORD *)(v952 + 16) = 127996;
  v953 = WTF::fastMalloc((WTF *)0x14);
  v1054[1900] = 0x500000005;
  v1054[1899] = v953;
  *(_OWORD *)v953 = xmmword_199190494;
  *(_DWORD *)(v953 + 16) = 127997;
  v954 = WTF::fastMalloc((WTF *)0x14);
  v1054[1902] = 0x500000005;
  v1054[1901] = v954;
  *(_OWORD *)v954 = xmmword_1991904AC;
  *(_DWORD *)(v954 + 16) = 127999;
  v955 = WTF::fastMalloc((WTF *)0x14);
  v1054[1904] = 0x500000005;
  v1054[1903] = v955;
  *(_OWORD *)v955 = xmmword_1991904C4;
  *(_DWORD *)(v955 + 16) = 127995;
  v956 = WTF::fastMalloc((WTF *)0x14);
  v1054[1906] = 0x500000005;
  v1054[1905] = v956;
  *(_OWORD *)v956 = xmmword_1991904DC;
  *(_DWORD *)(v956 + 16) = 127996;
  v957 = WTF::fastMalloc((WTF *)0x14);
  v1054[1908] = 0x500000005;
  v1054[1907] = v957;
  *(_OWORD *)v957 = xmmword_1991904F4;
  *(_DWORD *)(v957 + 16) = 127997;
  v958 = WTF::fastMalloc((WTF *)0x14);
  v1054[1910] = 0x500000005;
  v1054[1909] = v958;
  *(_OWORD *)v958 = xmmword_19919050C;
  *(_DWORD *)(v958 + 16) = 127998;
  v1056 = 0x400000004;
  v1055 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1055 = xmmword_199190524;
  v1058 = 0x400000004;
  v1057 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1057 = xmmword_199190538;
  v1060 = 0x400000004;
  v1059 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1059 = xmmword_19919054C;
  v1062 = 0x400000004;
  v1061 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1061 = xmmword_199190560;
  v1064 = 0x400000004;
  v1063 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1063 = xmmword_199190574;
  v1066 = 0x400000004;
  v1065 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1065 = xmmword_199190588;
  v1068 = 0x400000004;
  v1067 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1067 = xmmword_19919059C;
  v1070 = 0x400000004;
  v1069 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1069 = xmmword_1991905B0;
  v1072 = 0x400000004;
  v1071 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1071 = xmmword_1991905C4;
  v1074 = 0x400000004;
  v1073 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1073 = xmmword_1991905D8;
  v1076 = 0x400000004;
  v1075 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1075 = xmmword_1991905EC;
  v1078 = 0x400000004;
  v1077 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1077 = xmmword_199190600;
  v1080 = 0x400000004;
  v1079 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1079 = xmmword_199190614;
  v1082 = 0x400000004;
  v1081 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1081 = xmmword_199190628;
  v1084 = 0x400000004;
  v1083 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1083 = xmmword_19919063C;
  v1086 = 0x400000004;
  v1085 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1085 = xmmword_199190650;
  v1088 = 0x400000004;
  v1087 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1087 = xmmword_199190664;
  v1090 = 0x400000004;
  v1089 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1089 = xmmword_199190678;
  v1092 = 0x400000004;
  v1091 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1091 = xmmword_19919068C;
  v1094 = 0x400000004;
  v1093 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1093 = xmmword_1991906A0;
  v1096 = 0x400000004;
  v1095 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1095 = xmmword_1991906B4;
  v1098 = 0x400000004;
  v1097 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1097 = xmmword_1991906C8;
  v1100 = 0x400000004;
  v1099 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1099 = xmmword_1991906DC;
  v1102 = 0x400000004;
  v1101 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1101 = xmmword_1991906F0;
  v1104 = 0x400000004;
  v1103 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1103 = xmmword_199190704;
  v1106 = 0x400000004;
  v1105 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1105 = xmmword_199190718;
  v1108 = 0x400000004;
  v1107 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1107 = xmmword_19919072C;
  v1110 = 0x400000004;
  v1109 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1109 = xmmword_199190740;
  v1112 = 0x400000004;
  v1111 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1111 = xmmword_199190754;
  v1114 = 0x400000004;
  v1113 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1113 = xmmword_199190768;
  v1116 = 0x400000004;
  v1115 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1115 = xmmword_19919077C;
  v1118 = 0x400000004;
  v1117 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1117 = xmmword_199190790;
  v1120 = 0x400000004;
  v1119 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1119 = xmmword_1991907A4;
  v1122 = 0x400000004;
  v1121 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1121 = xmmword_1991907B8;
  v1124 = 0x400000004;
  v1123 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1123 = xmmword_1991907CC;
  v1126 = 0x400000004;
  v1125 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1125 = xmmword_1991907E0;
  v1128 = 0x400000004;
  v1127 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1127 = xmmword_1991907F4;
  v1130 = 0x400000004;
  v1129 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1129 = xmmword_199190808;
  v1132 = 0x400000004;
  v1131 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1131 = xmmword_19919081C;
  v1134 = 0x400000004;
  v1133 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1133 = xmmword_199190830;
  v1136 = 0x400000004;
  v1135 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1135 = xmmword_199190844;
  v1138 = 0x400000004;
  v1137 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1137 = xmmword_199190858;
  v1140 = 0x400000004;
  v1139 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1139 = xmmword_19919086C;
  v1142 = 0x400000004;
  v1141 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1141 = xmmword_199190880;
  v1144 = 0x400000004;
  v1143 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1143 = xmmword_199190894;
  v1146 = 0x400000004;
  v1145 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1145 = xmmword_1991908A8;
  v1148 = 0x400000004;
  v1147 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1147 = xmmword_1991908BC;
  v1150 = 0x400000004;
  v1149 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1149 = xmmword_1991908D0;
  v1152 = 0x400000004;
  v1151 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1151 = xmmword_1991908E4;
  v1154 = 0x400000004;
  v1153 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1153 = xmmword_1991908F8;
  v1156 = 0x400000004;
  v1155 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1155 = xmmword_19919090C;
  v1158 = 0x400000004;
  v1157 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1157 = xmmword_199190920;
  v1160 = 0x400000004;
  v1159 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1159 = xmmword_199190934;
  v1162 = 0x400000004;
  v1161 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1161 = xmmword_199190948;
  v1164 = 0x400000004;
  v1163 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1163 = xmmword_19919095C;
  v1166 = 0x400000004;
  v1165 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1165 = xmmword_199190970;
  v1168 = 0x400000004;
  v1167 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1167 = xmmword_199190984;
  v1170 = 0x400000004;
  v1169 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1169 = xmmword_199190998;
  v1172 = 0x400000004;
  v1171 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1171 = xmmword_1991909AC;
  v1174 = 0x400000004;
  v1173 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1173 = xmmword_1991909C0;
  v1176 = 0x400000004;
  v1175 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1175 = xmmword_1991909D4;
  v1178 = 0x400000004;
  v1177 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1177 = xmmword_1991909E8;
  v1180 = 0x400000004;
  v1179 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1179 = xmmword_1991909FC;
  v1182 = 0x400000004;
  v1181 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1181 = xmmword_199190A10;
  v1184 = 0x400000004;
  v1183 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1183 = xmmword_199190A24;
  v1186 = 0x400000004;
  v1185 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1185 = xmmword_199190A38;
  v1188 = 0x400000004;
  v1187 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1187 = xmmword_199190A4C;
  v1190 = 0x400000004;
  v1189 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1189 = xmmword_199190A60;
  v1192 = 0x400000004;
  v1191 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1191 = xmmword_199190A74;
  v1194 = 0x400000004;
  v1193 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1193 = xmmword_199190A88;
  v1196 = 0x400000004;
  v1195 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1195 = xmmword_199190A9C;
  v1198 = 0x400000004;
  v1197 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1197 = xmmword_199190AB0;
  v1200 = 0x400000004;
  v1199 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1199 = xmmword_199190AC4;
  v1202 = 0x400000004;
  v1201 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1201 = xmmword_199190AD8;
  v1204 = 0x400000004;
  v1203 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1203 = xmmword_199190AEC;
  v1206 = 0x400000004;
  v1205 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1205 = xmmword_199190B00;
  v1208 = 0x400000004;
  v1207 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1207 = xmmword_199190B14;
  v1210 = 0x400000004;
  v1209 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1209 = xmmword_199190B28;
  v1212 = 0x400000004;
  v1211 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1211 = xmmword_199190B3C;
  v1214 = 0x400000004;
  v1213 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1213 = xmmword_199190B50;
  v1216 = 0x400000004;
  v1215 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1215 = xmmword_199190B64;
  v1218 = 0x400000004;
  v1217 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1217 = xmmword_199190B78;
  v1220 = 0x400000004;
  v1219 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1219 = xmmword_199190B8C;
  v1222 = 0x400000004;
  v1221 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1221 = xmmword_199190BA0;
  v1224 = 0x400000004;
  v1223 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1223 = xmmword_199190BB4;
  v1226 = 0x400000004;
  v1225 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1225 = xmmword_199190BC8;
  v1228 = 0x400000004;
  v1227 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1227 = xmmword_199190BDC;
  v1230 = 0x400000004;
  v1229 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1229 = xmmword_199190BF0;
  v1232 = 0x400000004;
  v1231 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1231 = xmmword_199190C04;
  v1234 = 0x400000004;
  v1233 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1233 = xmmword_199190C18;
  v1236 = 0x400000004;
  v1235 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1235 = xmmword_199190C2C;
  v1238 = 0x400000004;
  v1237 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1237 = xmmword_199190C40;
  v1240 = 0x400000004;
  v1239 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1239 = xmmword_199190C54;
  v1242 = 0x400000004;
  v1241 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1241 = xmmword_199190C68;
  v1244 = 0x400000004;
  v1243 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1243 = xmmword_199190C7C;
  v1246 = 0x400000004;
  v1245 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1245 = xmmword_199190C90;
  v1248 = 0x400000004;
  v1247 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1247 = xmmword_199190CA4;
  v1250 = 0x400000004;
  v1249 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1249 = xmmword_199190CB8;
  v1252 = 0x400000004;
  v1251 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1251 = xmmword_199190CCC;
  v1254 = 0x400000004;
  v1253 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1253 = xmmword_199190CE0;
  v1256 = 0x400000004;
  v1255 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1255 = xmmword_199190CF4;
  v1258 = 0x400000004;
  v1257 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1257 = xmmword_199190D08;
  v1260 = 0x400000004;
  v1259 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1259 = xmmword_199190D1C;
  v1262 = 0x400000004;
  v1261 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1261 = xmmword_199190D30;
  v1264 = 0x400000004;
  v1263 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1263 = xmmword_199190D44;
  v1266 = 0x400000004;
  v1265 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1265 = xmmword_199190D58;
  v1268 = 0x400000004;
  v1267 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1267 = xmmword_199190D6C;
  v1270 = 0x400000004;
  v1269 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1269 = xmmword_199190D80;
  v1272 = 0x400000004;
  v1271 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1271 = xmmword_199190D94;
  v1274 = 0x400000004;
  v1273 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1273 = xmmword_199190DA8;
  v1276 = 0x400000004;
  v1275 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1275 = xmmword_199190DBC;
  v1278 = 0x400000004;
  v1277 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1277 = xmmword_199190DD0;
  v1280 = 0x400000004;
  v1279 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1279 = xmmword_199190DE4;
  v1282 = 0x400000004;
  v1281 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1281 = xmmword_199190DF8;
  v1284 = 0x400000004;
  v1283 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1283 = xmmword_199190E0C;
  v1286 = 0x400000004;
  v1285 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1285 = xmmword_199190E20;
  v1288 = 0x400000004;
  v1287 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1287 = xmmword_199190E34;
  v1290 = 0x400000004;
  v1289 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1289 = xmmword_199190E48;
  v1292 = 0x400000004;
  v1291 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1291 = xmmword_199190E5C;
  v1294 = 0x400000004;
  v1293 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1293 = xmmword_199190E70;
  v1296 = 0x400000004;
  v1295 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1295 = xmmword_199190E84;
  v1298 = 0x400000004;
  v1297 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1297 = xmmword_199190E98;
  v1300 = 0x400000004;
  v1299 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1299 = xmmword_199190EAC;
  v1302 = 0x400000004;
  v1301 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1301 = xmmword_199190EC0;
  v1304 = 0x400000004;
  v1303 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1303 = xmmword_199190ED4;
  v1306 = 0x400000004;
  v1305 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1305 = xmmword_199190EE8;
  v1308 = 0x400000004;
  v1307 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1307 = xmmword_199190EFC;
  v1310 = 0x400000004;
  v1309 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1309 = xmmword_199190F10;
  v1312 = 0x400000004;
  v1311 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1311 = xmmword_199190F24;
  v1314 = 0x400000004;
  v1313 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1313 = xmmword_199190F38;
  v1316 = 0x400000004;
  v1315 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1315 = xmmword_199190F4C;
  v1318 = 0x400000004;
  v1317 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1317 = xmmword_199190F60;
  v1320 = 0x400000004;
  v1319 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1319 = xmmword_199190F74;
  v1322 = 0x400000004;
  v1321 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1321 = xmmword_199190F88;
  v1324 = 0x400000004;
  v1323 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1323 = xmmword_199190F9C;
  v1326 = 0x400000004;
  v1325 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1325 = xmmword_199190FB0;
  v1328 = 0x400000004;
  v1327 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1327 = xmmword_199190FC4;
  v1330 = 0x400000004;
  v1329 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1329 = xmmword_199190FD8;
  v1332 = 0x400000004;
  v1331 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1331 = xmmword_199190FEC;
  v1334 = 0x400000004;
  v1333 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1333 = xmmword_199191000;
  v1336 = 0x400000004;
  v1335 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1335 = xmmword_199191014;
  v1338 = 0x400000004;
  v1337 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1337 = xmmword_199191028;
  v1340 = 0x400000004;
  v1339 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1339 = xmmword_19919103C;
  v1342 = 0x400000004;
  v1341 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1341 = xmmword_199191050;
  v1344 = 0x400000004;
  v1343 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1343 = xmmword_199191064;
  v1346 = 0x400000004;
  v1345 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1345 = xmmword_199191078;
  v1348 = 0x400000004;
  v1347 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1347 = xmmword_19919108C;
  v1350 = 0x400000004;
  v1349 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1349 = xmmword_1991910A0;
  v1352 = 0x400000004;
  v1351 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1351 = xmmword_1991910B4;
  v1354 = 0x400000004;
  v1353 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1353 = xmmword_1991910C8;
  v1356 = 0x400000004;
  v1355 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1355 = xmmword_1991910DC;
  v1358 = 0x400000004;
  v1357 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1357 = xmmword_1991910F0;
  v1360 = 0x400000004;
  v1359 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1359 = xmmword_199191104;
  v1362 = 0x400000004;
  v1361 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1361 = xmmword_199191118;
  v1364 = 0x400000004;
  v1363 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1363 = xmmword_19919112C;
  v1366 = 0x400000004;
  v1365 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1365 = xmmword_199191140;
  v1368 = 0x400000004;
  v1367 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1367 = xmmword_199191154;
  v1370 = 0x400000004;
  v1369 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1369 = xmmword_199191168;
  v1372 = 0x400000004;
  v1371 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1371 = xmmword_19919117C;
  v1374 = 0x400000004;
  v1373 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1373 = xmmword_199191190;
  v1376 = 0x400000004;
  v1375 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1375 = xmmword_1991911A4;
  v1378 = 0x400000004;
  v1377 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1377 = xmmword_1991911B8;
  v1380 = 0x400000004;
  v1379 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1379 = xmmword_1991911CC;
  v1382 = 0x400000004;
  v1381 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1381 = xmmword_1991911E0;
  v1384 = 0x400000004;
  v1383 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1383 = xmmword_1991911F4;
  v1386 = 0x400000004;
  v1385 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1385 = xmmword_199191208;
  v1388 = 0x400000004;
  v1387 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1387 = xmmword_19919121C;
  v1390 = 0x400000004;
  v1389 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1389 = xmmword_199191230;
  v1392 = 0x400000004;
  v1391 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1391 = xmmword_199191244;
  v1394 = 0x400000004;
  v1393 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1393 = xmmword_199191258;
  v1396 = 0x400000004;
  v1395 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1395 = xmmword_19919126C;
  v1398 = 0x400000004;
  v1397 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1397 = xmmword_199191280;
  v1400 = 0x400000004;
  v1399 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1399 = xmmword_199191294;
  v1402 = 0x400000004;
  v1401 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1401 = xmmword_1991912A8;
  v1404 = 0x400000004;
  v1403 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1403 = xmmword_1991912BC;
  v1406 = 0x400000004;
  v1405 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1405 = xmmword_1991912D0;
  v1408 = 0x400000004;
  v1407 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1407 = xmmword_1991912E4;
  v1410 = 0x400000004;
  v1409 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1409 = xmmword_1991912F8;
  v1412 = 0x400000004;
  v1411 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1411 = xmmword_19919130C;
  v1414 = 0x400000004;
  v1413 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1413 = xmmword_199191320;
  v1416 = 0x400000004;
  v1415 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1415 = xmmword_199191334;
  v1418 = 0x400000004;
  v1417 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1417 = xmmword_199191348;
  v1420 = 0x400000004;
  v1419 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1419 = xmmword_19919135C;
  v1422 = 0x400000004;
  v1421 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1421 = xmmword_199191370;
  v1424 = 0x400000004;
  v1423 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1423 = xmmword_199191384;
  v1426 = 0x400000004;
  v1425 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1425 = xmmword_199191398;
  v1428 = 0x400000004;
  v1427 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1427 = xmmword_1991913AC;
  v1430 = 0x400000004;
  v1429 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1429 = xmmword_1991913C0;
  v1432 = 0x400000004;
  v1431 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1431 = xmmword_1991913D4;
  v1434 = 0x400000004;
  v1433 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1433 = xmmword_1991913E8;
  v1436 = 0x400000004;
  v1435 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1435 = xmmword_1991913FC;
  v1438 = 0x400000004;
  v1437 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1437 = xmmword_199191410;
  v1440 = 0x400000004;
  v1439 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1439 = xmmword_199191424;
  v1442 = 0x400000004;
  v1441 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1441 = xmmword_199191438;
  v1444 = 0x400000004;
  v1443 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1443 = xmmword_19919144C;
  v1446 = 0x400000004;
  v1445 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1445 = xmmword_199191460;
  v1448 = 0x400000004;
  v1447 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1447 = xmmword_199191474;
  v1450 = 0x400000004;
  v1449 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1449 = xmmword_199191488;
  v1452 = 0x400000004;
  v1451 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1451 = xmmword_19919149C;
  v1454 = 0x400000004;
  v1453 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1453 = xmmword_1991914B0;
  v1456 = 0x400000004;
  v1455 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1455 = xmmword_1991914C4;
  v1458 = 0x400000004;
  v1457 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1457 = xmmword_1991914D8;
  v1460 = 0x400000004;
  v1459 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1459 = xmmword_1991914EC;
  v1462 = 0x400000004;
  v1461 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1461 = xmmword_199191500;
  v1464 = 0x400000004;
  v1463 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1463 = xmmword_199191514;
  v1466 = 0x400000004;
  v1465 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1465 = xmmword_199191528;
  v1468 = 0x400000004;
  v1467 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1467 = xmmword_19919153C;
  v1470 = 0x400000004;
  v1469 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1469 = xmmword_199191550;
  v1472 = 0x400000004;
  v1471 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1471 = xmmword_199191564;
  v1474 = 0x400000004;
  v1473 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1473 = xmmword_199191578;
  v1476 = 0x400000004;
  v1475 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1475 = xmmword_19919158C;
  v1478 = 0x400000004;
  v1477 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1477 = xmmword_1991915A0;
  v1480 = 0x400000004;
  v1479 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1479 = xmmword_1991915B4;
  v1482 = 0x400000004;
  v1481 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1481 = xmmword_1991915C8;
  v1484 = 0x400000004;
  v1483 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1483 = xmmword_1991915DC;
  v1486 = 0x400000004;
  v1485 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1485 = xmmword_1991915F0;
  v1488 = 0x400000004;
  v1487 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1487 = xmmword_199191604;
  v1490 = 0x400000004;
  v1489 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1489 = xmmword_199191618;
  v1492 = 0x400000004;
  v1491 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1491 = xmmword_19919162C;
  v1494 = 0x400000004;
  v1493 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1493 = xmmword_199191640;
  v1496 = 0x400000004;
  v1495 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1495 = xmmword_199191654;
  v1498 = 0x400000004;
  v1497 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1497 = xmmword_199191668;
  v1500 = 0x400000004;
  v1499 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1499 = xmmword_19919167C;
  v1502 = 0x400000004;
  v1501 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1501 = xmmword_199191690;
  v1504 = 0x400000004;
  v1503 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1503 = xmmword_1991916A4;
  v1506 = 0x400000004;
  v1505 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1505 = xmmword_1991916B8;
  v1508 = 0x400000004;
  v1507 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1507 = xmmword_1991916CC;
  v1510 = 0x400000004;
  v1509 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1509 = xmmword_1991916E0;
  v1512 = 0x400000004;
  v1511 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1511 = xmmword_1991916F4;
  v1514 = 0x400000004;
  v1513 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1513 = xmmword_199191708;
  v1516 = 0x400000004;
  v1515 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1515 = xmmword_19919171C;
  v1518 = 0x400000004;
  v1517 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1517 = xmmword_199191730;
  v1520 = 0x400000004;
  v1519 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1519 = xmmword_199191744;
  v1522 = 0x400000004;
  v1521 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1521 = xmmword_199191758;
  v1524 = 0x400000004;
  v1523 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1523 = xmmword_19919176C;
  v1526 = 0x400000004;
  v1525 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1525 = xmmword_199191780;
  v1528 = 0x400000004;
  v1527 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1527 = xmmword_199191794;
  v1530 = 0x400000004;
  v1529 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1529 = xmmword_1991917A8;
  v1532 = 0x400000004;
  v1531 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1531 = xmmword_1991917BC;
  v1534 = 0x400000004;
  v1533 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1533 = xmmword_1991917D0;
  v1536 = 0x400000004;
  v1535 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1535 = xmmword_1991917E4;
  v1538 = 0x400000004;
  v1537 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1537 = xmmword_1991917F8;
  v1540 = 0x400000004;
  v1539 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1539 = xmmword_19919180C;
  v1542 = 0x400000004;
  v1541 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1541 = xmmword_199191820;
  v1544 = 0x400000004;
  v1543 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1543 = xmmword_199191834;
  v1546 = 0x400000004;
  v1545 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1545 = xmmword_199191848;
  v1548 = 0x400000004;
  v1547 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1547 = xmmword_19919185C;
  v1550 = 0x400000004;
  v1549 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1549 = xmmword_199191870;
  v1552 = 0x400000004;
  v1551 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1551 = xmmword_199191884;
  v1554 = 0x400000004;
  v1553 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1553 = xmmword_199191898;
  v1556 = 0x400000004;
  v1555 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1555 = xmmword_1991918AC;
  v1558 = 0x400000004;
  v1557 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1557 = xmmword_1991918C0;
  v1560 = 0x400000004;
  v1559 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1559 = xmmword_1991918D4;
  v1562 = 0x400000004;
  v1561 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1561 = xmmword_1991918E8;
  v1564 = 0x400000004;
  v1563 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1563 = xmmword_1991918FC;
  v1566 = 0x400000004;
  v1565 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1565 = xmmword_199191910;
  v1568 = 0x400000004;
  v1567 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1567 = xmmword_199191924;
  v1570 = 0x400000004;
  v1569 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1569 = xmmword_199191938;
  v1572 = 0x400000004;
  v1571 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1571 = xmmword_19919194C;
  v1574 = 0x400000004;
  v1573 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1573 = xmmword_199191960;
  v1576 = 0x400000004;
  v1575 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1575 = xmmword_199191974;
  v1578 = 0x400000004;
  v1577 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1577 = xmmword_199191988;
  v1580 = 0x400000004;
  v1579 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1579 = xmmword_19919199C;
  v1582 = 0x400000004;
  v1581 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1581 = xmmword_1991919B0;
  v1584 = 0x400000004;
  v1583 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1583 = xmmword_1991919C4;
  v1586 = 0x400000004;
  v1585 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1585 = xmmword_1991919D8;
  v1588 = 0x400000004;
  v1587 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1587 = xmmword_1991919EC;
  v1590 = 0x400000004;
  v1589 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1589 = xmmword_199191A00;
  v1592 = 0x400000004;
  v1591 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1591 = xmmword_199191A14;
  v1594 = 0x400000004;
  v1593 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1593 = xmmword_199191A28;
  v1596 = 0x400000004;
  v1595 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1595 = xmmword_199191A3C;
  v1598 = 0x400000004;
  v1597 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1597 = xmmword_199191A50;
  v1600 = 0x400000004;
  v1599 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1599 = xmmword_199191A64;
  v1602 = 0x400000004;
  v1601 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1601 = xmmword_199191A78;
  v1604 = 0x400000004;
  v1603 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1603 = xmmword_199191A8C;
  v1606 = 0x400000004;
  v1605 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1605 = xmmword_199191AA0;
  v1608 = 0x400000004;
  v1607 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1607 = xmmword_199191AB4;
  v1610 = 0x400000004;
  v1609 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1609 = xmmword_199191AC8;
  v1612 = 0x400000004;
  v1611 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1611 = xmmword_199191ADC;
  v1614 = 0x400000004;
  v1613 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1613 = xmmword_199191AF0;
  v1616 = 0x400000004;
  v1615 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1615 = xmmword_199191B04;
  v1618 = 0x400000004;
  v1617 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1617 = xmmword_199191B18;
  v1620 = 0x400000004;
  v1619 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1619 = xmmword_199191B2C;
  v1622 = 0x400000004;
  v1621 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1621 = xmmword_199191B40;
  v1624 = 0x400000004;
  v1623 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1623 = xmmword_199191B54;
  v1626 = 0x400000004;
  v1625 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1625 = xmmword_199191B68;
  v1628 = 0x400000004;
  v1627 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1627 = xmmword_199191B7C;
  v1630 = 0x400000004;
  v1629 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1629 = xmmword_199191B90;
  v1632 = 0x400000004;
  v1631 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1631 = xmmword_199191BA4;
  v1634 = 0x400000004;
  v1633 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1633 = xmmword_199191BB8;
  v1636 = 0x400000004;
  v1635 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1635 = xmmword_199191BCC;
  v1638 = 0x400000004;
  v1637 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1637 = xmmword_199191BE0;
  v1640 = 0x400000004;
  v1639 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1639 = xmmword_199191BF4;
  v1642 = 0x400000004;
  v1641 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1641 = xmmword_199191C08;
  v1644 = 0x400000004;
  v1643 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1643 = xmmword_199191C1C;
  v1646 = 0x400000004;
  v1645 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1645 = xmmword_199191C30;
  v1648 = 0x400000004;
  v1647 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1647 = xmmword_199191C44;
  v1650 = 0x400000004;
  v1649 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1649 = xmmword_199191C58;
  v1652 = 0x400000004;
  v1651 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1651 = xmmword_199191C6C;
  v1654 = 0x400000004;
  v1653 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1653 = xmmword_199191C80;
  v1656 = 0x400000004;
  v1655 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1655 = xmmword_199191C94;
  v1658 = 0x400000004;
  v1657 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1657 = xmmword_199191CA8;
  v1660 = 0x400000004;
  v1659 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1659 = xmmword_199191CBC;
  v1662 = 0x400000004;
  v1661 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1661 = xmmword_199191CD0;
  v1664 = 0x400000004;
  v1663 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1663 = xmmword_199191CE4;
  v1666 = 0x400000004;
  v1665 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1665 = xmmword_199191CF8;
  v1668 = 0x400000004;
  v1667 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1667 = xmmword_199191D0C;
  v1670 = 0x400000004;
  v1669 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1669 = xmmword_199191D20;
  v1672 = 0x400000004;
  v1671 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1671 = xmmword_199191D34;
  v1674 = 0x400000004;
  v1673 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1673 = xmmword_199191D48;
  v1676 = 0x400000004;
  v1675 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1675 = xmmword_199191D5C;
  v1678 = 0x400000004;
  v1677 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1677 = xmmword_199191D70;
  v1680 = 0x400000004;
  v1679 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1679 = xmmword_199191D84;
  v1682 = 0x400000004;
  v1681 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1681 = xmmword_199191D98;
  v1684 = 0x400000004;
  v1683 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1683 = xmmword_199191DAC;
  v1686 = 0x400000004;
  v1685 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1685 = xmmword_199191DC0;
  v1688 = 0x400000004;
  v1687 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1687 = xmmword_199191DD4;
  v1690 = 0x400000004;
  v1689 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1689 = xmmword_199191DE8;
  v1692 = 0x400000004;
  v1691 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1691 = xmmword_199191DFC;
  v1694 = 0x400000004;
  v1693 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1693 = xmmword_199191E10;
  v1696 = 0x400000004;
  v1695 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1695 = xmmword_199191E24;
  v1698 = 0x400000004;
  v1697 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1697 = xmmword_199191E38;
  v1700 = 0x400000004;
  v1699 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1699 = xmmword_199191E4C;
  v1702 = 0x400000004;
  v1701 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1701 = xmmword_199191E60;
  v1704 = 0x400000004;
  v1703 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1703 = xmmword_199191E74;
  v1706 = 0x400000004;
  v1705 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1705 = xmmword_199191E88;
  v1708 = 0x400000004;
  v1707 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1707 = xmmword_199191E9C;
  v1710 = 0x400000004;
  v1709 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1709 = xmmword_199191EB0;
  v1712 = 0x400000004;
  v1711 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1711 = xmmword_199191EC4;
  v1714 = 0x400000004;
  v1713 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1713 = xmmword_199191ED8;
  v1716 = 0x400000004;
  v1715 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1715 = xmmword_199191EEC;
  v1718 = 0x400000004;
  v1717 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1717 = xmmword_199191F00;
  v1720 = 0x400000004;
  v1719 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1719 = xmmword_199191F14;
  v1722 = 0x400000004;
  v1721 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1721 = xmmword_199191F28;
  v1724 = 0x400000004;
  v1723 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1723 = xmmword_199191F3C;
  v1726 = 0x400000004;
  v1725 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1725 = xmmword_199191F50;
  v1728 = 0x400000004;
  v1727 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1727 = xmmword_199191F64;
  v1730 = 0x400000004;
  v1729 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1729 = xmmword_199191F78;
  v1732 = 0x400000004;
  v1731 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1731 = xmmword_199191F8C;
  v1734 = 0x400000004;
  v1733 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1733 = xmmword_199191FA0;
  v1736 = 0x400000004;
  v1735 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1735 = xmmword_199191FB4;
  v1738 = 0x400000004;
  v1737 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1737 = xmmword_199191FC8;
  v1740 = 0x400000004;
  v1739 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1739 = xmmword_199191FDC;
  v1742 = 0x400000004;
  v1741 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1741 = xmmword_199191FF0;
  v1744 = 0x400000004;
  v1743 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1743 = xmmword_199192004;
  v1746 = 0x400000004;
  v1745 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1745 = xmmword_199192018;
  v1748 = 0x400000004;
  v1747 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1747 = xmmword_19919202C;
  v1750 = 0x400000004;
  v1749 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1749 = xmmword_199192040;
  v1752 = 0x400000004;
  v1751 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1751 = xmmword_199192054;
  v1754 = 0x400000004;
  v1753 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1753 = xmmword_199192068;
  v1756 = 0x400000004;
  v1755 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1755 = xmmword_19919207C;
  v1758 = 0x400000004;
  v1757 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1757 = xmmword_199192090;
  v1760 = 0x400000004;
  v1759 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1759 = xmmword_1991920A4;
  v1762 = 0x400000004;
  v1761 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1761 = xmmword_1991920B8;
  v1764 = 0x400000004;
  v1763 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1763 = xmmword_1991920CC;
  v1766 = 0x400000004;
  v1765 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1765 = xmmword_1991920E0;
  v1768 = 0x400000004;
  v1767 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1767 = xmmword_1991920F4;
  v1770 = 0x400000004;
  v1769 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1769 = xmmword_199192108;
  v1772 = 0x400000004;
  v1771 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1771 = xmmword_19919211C;
  v1774 = 0x400000004;
  v1773 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1773 = xmmword_199192130;
  v1776 = 0x400000004;
  v1775 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1775 = xmmword_199192144;
  v1778 = 0x400000004;
  v1777 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1777 = xmmword_199192158;
  v1780 = 0x400000004;
  v1779 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1779 = xmmword_19919216C;
  v1782 = 0x400000004;
  v1781 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1781 = xmmword_199192180;
  v1784 = 0x400000004;
  v1783 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1783 = xmmword_199192194;
  v1786 = 0x400000004;
  v1785 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1785 = xmmword_1991921A8;
  v1788 = 0x400000004;
  v1787 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1787 = xmmword_1991921BC;
  v1790 = 0x400000004;
  v1789 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1789 = xmmword_1991921D0;
  v1792 = 0x400000004;
  v1791 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1791 = xmmword_1991921E4;
  v1794 = 0x400000004;
  v1793 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1793 = xmmword_1991921F8;
  v1796 = 0x400000004;
  v1795 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1795 = xmmword_19919220C;
  v1798 = 0x400000004;
  v1797 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1797 = xmmword_199192220;
  v1800 = 0x400000004;
  v1799 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1799 = xmmword_199192234;
  v1802 = 0x400000004;
  v1801 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1801 = xmmword_199192248;
  v1804 = 0x400000004;
  v1803 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1803 = xmmword_19919225C;
  v1806 = 0x400000004;
  v1805 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1805 = xmmword_199192270;
  v1808 = 0x400000004;
  v1807 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1807 = xmmword_199192284;
  v1810 = 0x400000004;
  v1809 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1809 = xmmword_199192298;
  v1812 = 0x400000004;
  v1811 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1811 = xmmword_1991922AC;
  v1814 = 0x400000004;
  v1813 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1813 = xmmword_1991922C0;
  v1816 = 0x400000004;
  v1815 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1815 = xmmword_1991922D4;
  v1818 = 0x400000004;
  v1817 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1817 = xmmword_1991922E8;
  v1820 = 0x400000004;
  v1819 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1819 = xmmword_1991922FC;
  v1822 = 0x400000004;
  v1821 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1821 = xmmword_199192310;
  v1824 = 0x400000004;
  v1823 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1823 = xmmword_199192324;
  v1826 = 0x400000004;
  v1825 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1825 = xmmword_199192338;
  v1828 = 0x400000004;
  v1827 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1827 = xmmword_19919234C;
  v1830 = 0x400000004;
  v1829 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1829 = xmmword_199192360;
  v1832 = 0x400000004;
  v1831 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1831 = xmmword_199192374;
  v1834 = 0x400000004;
  v1833 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1833 = xmmword_199192388;
  v1836 = 0x400000004;
  v1835 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1835 = xmmword_19919239C;
  v1838 = 0x400000004;
  v1837 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1837 = xmmword_1991923B0;
  v1840 = 0x400000004;
  v1839 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1839 = xmmword_1991923C4;
  v1842 = 0x400000004;
  v1841 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1841 = xmmword_1991923D8;
  v1844 = 0x400000004;
  v1843 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1843 = xmmword_1991923EC;
  v1846 = 0x400000004;
  v1845 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1845 = xmmword_199192400;
  v1848 = 0x400000004;
  v1847 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1847 = xmmword_199192414;
  v1850 = 0x400000004;
  v1849 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1849 = xmmword_199192428;
  v1852 = 0x400000004;
  v1851 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1851 = xmmword_19919243C;
  v1854 = 0x400000004;
  v1853 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1853 = xmmword_199192450;
  v1856 = 0x400000004;
  v1855 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1855 = xmmword_199192464;
  v1858 = 0x400000004;
  v1857 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1857 = xmmword_199192478;
  v1860 = 0x400000004;
  v1859 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1859 = xmmword_19919248C;
  v1862 = 0x400000004;
  v1861 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1861 = xmmword_1991924A0;
  v1864 = 0x400000004;
  v1863 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1863 = xmmword_1991924B4;
  v1866 = 0x400000004;
  v1865 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1865 = xmmword_1991924C8;
  v1868 = 0x400000004;
  v1867 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1867 = xmmword_1991924DC;
  v1870 = 0x400000004;
  v1869 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1869 = xmmword_1991924F0;
  v1872 = 0x400000004;
  v1871 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1871 = xmmword_199192504;
  v1874 = 0x400000004;
  v1873 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1873 = xmmword_199192518;
  v1876 = 0x400000004;
  v1875 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1875 = xmmword_19919252C;
  v1878 = 0x400000004;
  v1877 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1877 = xmmword_199192540;
  v1880 = 0x400000004;
  v1879 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1879 = xmmword_199192554;
  v1882 = 0x400000004;
  v1881 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1881 = xmmword_199192568;
  v1884 = 0x400000004;
  v1883 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1883 = xmmword_19919257C;
  v1886 = 0x400000004;
  v1885 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1885 = xmmword_199192590;
  v1888 = 0x400000004;
  v1887 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1887 = xmmword_1991925A4;
  v1890 = 0x400000004;
  v1889 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1889 = xmmword_1991925B8;
  v1892 = 0x400000004;
  v1891 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1891 = xmmword_1991925CC;
  v1894 = 0x400000004;
  v1893 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1893 = xmmword_1991925E0;
  v1896 = 0x400000004;
  v1895 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1895 = xmmword_1991925F4;
  v1898 = 0x400000004;
  v1897 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1897 = xmmword_199192608;
  v1900 = 0x400000004;
  v1899 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1899 = xmmword_19919261C;
  v1902 = 0x400000004;
  v1901 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1901 = xmmword_199192630;
  v1904 = 0x400000004;
  v1903 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1903 = xmmword_199192644;
  v1906 = 0x400000004;
  v1905 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1905 = xmmword_199192658;
  v1908 = 0x400000004;
  v1907 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1907 = xmmword_19919266C;
  v1910 = 0x400000004;
  v1909 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1909 = xmmword_199192680;
  v1912 = 0x400000004;
  v1911 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1911 = xmmword_199192694;
  v1914 = 0x400000004;
  v1913 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1913 = xmmword_1991926A8;
  v1916 = 0x400000004;
  v1915 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1915 = xmmword_1991926BC;
  v1918 = 0x400000004;
  v1917 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1917 = xmmword_1991926D0;
  v1920 = 0x400000004;
  v1919 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1919 = xmmword_1991926E4;
  v1922 = 0x400000004;
  v1921 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1921 = xmmword_1991926F8;
  v1924 = 0x400000004;
  v1923 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1923 = xmmword_19919270C;
  v959 = WTF::fastMalloc((WTF *)0xC);
  v1926 = 0x300000003;
  v1925 = v959;
  *(_DWORD *)(v959 + 8) = 129003;
  *(_QWORD *)v959 = 0x200D0001F344;
  v960 = WTF::fastMalloc((WTF *)0xC);
  v1928 = 0x300000003;
  v1927 = v960;
  *(_DWORD *)(v960 + 8) = 129001;
  *(_QWORD *)v960 = 0x200D0001F34BLL;
  v961 = WTF::fastMalloc((WTF *)0xC);
  v1930 = 0x300000003;
  v1929 = v961;
  *(_DWORD *)(v961 + 8) = 11035;
  *(_QWORD *)v961 = 0x200D0001F408;
  v962 = WTF::fastMalloc((WTF *)0xC);
  v1932 = 0x300000003;
  v1931 = v962;
  *(_DWORD *)(v962 + 8) = 129466;
  *(_QWORD *)v962 = 0x200D0001F415;
  v963 = WTF::fastMalloc((WTF *)0xC);
  v1934 = 0x300000003;
  v1933 = v963;
  *(_DWORD *)(v963 + 8) = 11035;
  *(_QWORD *)v963 = 0x200D0001F426;
  v964 = WTF::fastMalloc((WTF *)0xC);
  v1936 = 0x300000003;
  v1935 = v964;
  *(_DWORD *)(v964 + 8) = 128293;
  *(_QWORD *)v964 = 0x200D0001F426;
  v965 = WTF::fastMalloc((WTF *)0xC);
  v1938 = 0x300000003;
  v1937 = v965;
  *(_DWORD *)(v965 + 8) = 127806;
  *(_QWORD *)v965 = 0x200D0001F468;
  v966 = WTF::fastMalloc((WTF *)0xC);
  v1940 = 0x300000003;
  v1939 = v966;
  *(_DWORD *)(v966 + 8) = 127859;
  *(_QWORD *)v966 = 0x200D0001F468;
  v967 = WTF::fastMalloc((WTF *)0xC);
  v1942 = 0x300000003;
  v1941 = v967;
  *(_DWORD *)(v967 + 8) = 127868;
  *(_QWORD *)v967 = 0x200D0001F468;
  v968 = WTF::fastMalloc((WTF *)0xC);
  v1944 = 0x300000003;
  v1943 = v968;
  *(_DWORD *)(v968 + 8) = 127891;
  *(_QWORD *)v968 = 0x200D0001F468;
  v969 = WTF::fastMalloc((WTF *)0xC);
  v1946 = 0x300000003;
  v1945 = v969;
  *(_DWORD *)(v969 + 8) = 127908;
  *(_QWORD *)v969 = 0x200D0001F468;
  v970 = WTF::fastMalloc((WTF *)0xC);
  v1948 = 0x300000003;
  v1947 = v970;
  *(_DWORD *)(v970 + 8) = 127912;
  *(_QWORD *)v970 = 0x200D0001F468;
  v971 = WTF::fastMalloc((WTF *)0xC);
  v1950 = 0x300000003;
  v1949 = v971;
  *(_DWORD *)(v971 + 8) = 127979;
  *(_QWORD *)v971 = 0x200D0001F468;
  v972 = WTF::fastMalloc((WTF *)0xC);
  v1952 = 0x300000003;
  v1951 = v972;
  *(_DWORD *)(v972 + 8) = 127981;
  *(_QWORD *)v972 = 0x200D0001F468;
  v973 = WTF::fastMalloc((WTF *)0xC);
  v1954 = 0x300000003;
  v1953 = v973;
  *(_DWORD *)(v973 + 8) = 128102;
  *(_QWORD *)v973 = 0x200D0001F468;
  v974 = WTF::fastMalloc((WTF *)0xC);
  v1956 = 0x300000003;
  v1955 = v974;
  *(_DWORD *)(v974 + 8) = 128103;
  *(_QWORD *)v974 = 0x200D0001F468;
  v975 = WTF::fastMalloc((WTF *)0xC);
  v1958 = 0x300000003;
  v1957 = v975;
  *(_DWORD *)(v975 + 8) = 128187;
  *(_QWORD *)v975 = 0x200D0001F468;
  v976 = WTF::fastMalloc((WTF *)0xC);
  v1960 = 0x300000003;
  v1959 = v976;
  *(_DWORD *)(v976 + 8) = 128188;
  *(_QWORD *)v976 = 0x200D0001F468;
  v977 = WTF::fastMalloc((WTF *)0xC);
  v1962 = 0x300000003;
  v1961 = v977;
  *(_DWORD *)(v977 + 8) = 128295;
  *(_QWORD *)v977 = 0x200D0001F468;
  v978 = WTF::fastMalloc((WTF *)0xC);
  v1964 = 0x300000003;
  v1963 = v978;
  *(_DWORD *)(v978 + 8) = 128300;
  *(_QWORD *)v978 = 0x200D0001F468;
  v979 = WTF::fastMalloc((WTF *)0xC);
  v1966 = 0x300000003;
  v1965 = v979;
  *(_DWORD *)(v979 + 8) = 128640;
  *(_QWORD *)v979 = 0x200D0001F468;
  v980 = WTF::fastMalloc((WTF *)0xC);
  v1968 = 0x300000003;
  v1967 = v980;
  *(_DWORD *)(v980 + 8) = 128658;
  *(_QWORD *)v980 = 0x200D0001F468;
  v981 = WTF::fastMalloc((WTF *)0xC);
  v1970 = 0x300000003;
  v1969 = v981;
  *(_DWORD *)(v981 + 8) = 129455;
  *(_QWORD *)v981 = 0x200D0001F468;
  v982 = WTF::fastMalloc((WTF *)0xC);
  v1972 = 0x300000003;
  v1971 = v982;
  *(_DWORD *)(v982 + 8) = 129456;
  *(_QWORD *)v982 = 0x200D0001F468;
  v983 = WTF::fastMalloc((WTF *)0xC);
  v1974 = 0x300000003;
  v1973 = v983;
  *(_DWORD *)(v983 + 8) = 129457;
  *(_QWORD *)v983 = 0x200D0001F468;
  v984 = WTF::fastMalloc((WTF *)0xC);
  v1976 = 0x300000003;
  v1975 = v984;
  *(_DWORD *)(v984 + 8) = 129458;
  *(_QWORD *)v984 = 0x200D0001F468;
  v985 = WTF::fastMalloc((WTF *)0xC);
  v1978 = 0x300000003;
  v1977 = v985;
  *(_DWORD *)(v985 + 8) = 129459;
  *(_QWORD *)v985 = 0x200D0001F468;
  v986 = WTF::fastMalloc((WTF *)0xC);
  v1980 = 0x300000003;
  v1979 = v986;
  *(_DWORD *)(v986 + 8) = 129468;
  *(_QWORD *)v986 = 0x200D0001F468;
  v987 = WTF::fastMalloc((WTF *)0xC);
  v1982 = 0x300000003;
  v1981 = v987;
  *(_DWORD *)(v987 + 8) = 129469;
  *(_QWORD *)v987 = 0x200D0001F468;
  v988 = WTF::fastMalloc((WTF *)0xC);
  v1984 = 0x300000003;
  v1983 = v988;
  *(_DWORD *)(v988 + 8) = 127806;
  *(_QWORD *)v988 = 0x200D0001F469;
  v989 = WTF::fastMalloc((WTF *)0xC);
  v1986 = 0x300000003;
  v1985 = v989;
  *(_DWORD *)(v989 + 8) = 127859;
  *(_QWORD *)v989 = 0x200D0001F469;
  v990 = WTF::fastMalloc((WTF *)0xC);
  v1988 = 0x300000003;
  v1987 = v990;
  *(_DWORD *)(v990 + 8) = 127868;
  *(_QWORD *)v990 = 0x200D0001F469;
  v991 = WTF::fastMalloc((WTF *)0xC);
  v1990 = 0x300000003;
  v1989 = v991;
  *(_DWORD *)(v991 + 8) = 127891;
  *(_QWORD *)v991 = 0x200D0001F469;
  v992 = WTF::fastMalloc((WTF *)0xC);
  v1992 = 0x300000003;
  v1991 = v992;
  *(_DWORD *)(v992 + 8) = 127908;
  *(_QWORD *)v992 = 0x200D0001F469;
  v993 = WTF::fastMalloc((WTF *)0xC);
  v1994 = 0x300000003;
  v1993 = v993;
  *(_DWORD *)(v993 + 8) = 127912;
  *(_QWORD *)v993 = 0x200D0001F469;
  v994 = WTF::fastMalloc((WTF *)0xC);
  v1996 = 0x300000003;
  v1995 = v994;
  *(_DWORD *)(v994 + 8) = 127979;
  *(_QWORD *)v994 = 0x200D0001F469;
  v995 = WTF::fastMalloc((WTF *)0xC);
  v1998 = 0x300000003;
  v1997 = v995;
  *(_DWORD *)(v995 + 8) = 127981;
  *(_QWORD *)v995 = 0x200D0001F469;
  v996 = WTF::fastMalloc((WTF *)0xC);
  v2000 = 0x300000003;
  v1999 = v996;
  *(_DWORD *)(v996 + 8) = 128102;
  *(_QWORD *)v996 = 0x200D0001F469;
  v997 = WTF::fastMalloc((WTF *)0xC);
  v2002 = 0x300000003;
  v2001 = v997;
  *(_DWORD *)(v997 + 8) = 128103;
  *(_QWORD *)v997 = 0x200D0001F469;
  v998 = WTF::fastMalloc((WTF *)0xC);
  v2004 = 0x300000003;
  v2003 = v998;
  *(_DWORD *)(v998 + 8) = 128187;
  *(_QWORD *)v998 = 0x200D0001F469;
  v999 = WTF::fastMalloc((WTF *)0xC);
  v2006 = 0x300000003;
  v2005 = v999;
  *(_DWORD *)(v999 + 8) = 128188;
  *(_QWORD *)v999 = 0x200D0001F469;
  v1000 = WTF::fastMalloc((WTF *)0xC);
  v2008 = 0x300000003;
  v2007 = v1000;
  *(_DWORD *)(v1000 + 8) = 128295;
  *(_QWORD *)v1000 = 0x200D0001F469;
  v1001 = WTF::fastMalloc((WTF *)0xC);
  v2010 = 0x300000003;
  v2009 = v1001;
  *(_DWORD *)(v1001 + 8) = 128300;
  *(_QWORD *)v1001 = 0x200D0001F469;
  v1002 = WTF::fastMalloc((WTF *)0xC);
  v2012 = 0x300000003;
  v2011 = v1002;
  *(_DWORD *)(v1002 + 8) = 128640;
  *(_QWORD *)v1002 = 0x200D0001F469;
  v1003 = WTF::fastMalloc((WTF *)0xC);
  v2014 = 0x300000003;
  v2013 = v1003;
  *(_DWORD *)(v1003 + 8) = 128658;
  *(_QWORD *)v1003 = 0x200D0001F469;
  v1004 = WTF::fastMalloc((WTF *)0xC);
  v2016 = 0x300000003;
  v2015 = v1004;
  *(_DWORD *)(v1004 + 8) = 129455;
  *(_QWORD *)v1004 = 0x200D0001F469;
  v1005 = WTF::fastMalloc((WTF *)0xC);
  v2018 = 0x300000003;
  v2017 = v1005;
  *(_DWORD *)(v1005 + 8) = 129456;
  *(_QWORD *)v1005 = 0x200D0001F469;
  v1006 = WTF::fastMalloc((WTF *)0xC);
  v2020 = 0x300000003;
  v2019 = v1006;
  *(_DWORD *)(v1006 + 8) = 129457;
  *(_QWORD *)v1006 = 0x200D0001F469;
  v1007 = WTF::fastMalloc((WTF *)0xC);
  v2022 = 0x300000003;
  v2021 = v1007;
  *(_DWORD *)(v1007 + 8) = 129458;
  *(_QWORD *)v1007 = 0x200D0001F469;
  v1008 = WTF::fastMalloc((WTF *)0xC);
  v2024 = 0x300000003;
  v2023 = v1008;
  *(_DWORD *)(v1008 + 8) = 129459;
  *(_QWORD *)v1008 = 0x200D0001F469;
  v1009 = WTF::fastMalloc((WTF *)0xC);
  v2026 = 0x300000003;
  v2025 = v1009;
  *(_DWORD *)(v1009 + 8) = 129468;
  *(_QWORD *)v1009 = 0x200D0001F469;
  v1010 = WTF::fastMalloc((WTF *)0xC);
  v2028 = 0x300000003;
  v2027 = v1010;
  *(_DWORD *)(v1010 + 8) = 129469;
  *(_QWORD *)v1010 = 0x200D0001F469;
  v1011 = WTF::fastMalloc((WTF *)0xC);
  v2030 = 0x300000003;
  v2029 = v1011;
  *(_DWORD *)(v1011 + 8) = 128168;
  *(_QWORD *)v1011 = 0x200D0001F62ELL;
  v1012 = WTF::fastMalloc((WTF *)0xC);
  v2032 = 0x300000003;
  v2031 = v1012;
  *(_DWORD *)(v1012 + 8) = 128171;
  *(_QWORD *)v1012 = 0x200D0001F635;
  v1013 = WTF::fastMalloc((WTF *)0xC);
  v2034 = 0x300000003;
  v2033 = v1013;
  *(_DWORD *)(v1013 + 8) = 127806;
  *(_QWORD *)v1013 = 0x200D0001F9D1;
  v1014 = WTF::fastMalloc((WTF *)0xC);
  v2036 = 0x300000003;
  v2035 = v1014;
  *(_DWORD *)(v1014 + 8) = 127859;
  *(_QWORD *)v1014 = 0x200D0001F9D1;
  v1015 = WTF::fastMalloc((WTF *)0xC);
  v2038 = 0x300000003;
  v2037 = v1015;
  *(_DWORD *)(v1015 + 8) = 127868;
  *(_QWORD *)v1015 = 0x200D0001F9D1;
  v1016 = WTF::fastMalloc((WTF *)0xC);
  v2040 = 0x300000003;
  v2039 = v1016;
  *(_DWORD *)(v1016 + 8) = 127876;
  *(_QWORD *)v1016 = 0x200D0001F9D1;
  v1017 = WTF::fastMalloc((WTF *)0xC);
  v2042 = 0x300000003;
  v2041 = v1017;
  *(_DWORD *)(v1017 + 8) = 127891;
  *(_QWORD *)v1017 = 0x200D0001F9D1;
  v1018 = WTF::fastMalloc((WTF *)0xC);
  v2044 = 0x300000003;
  v2043 = v1018;
  *(_DWORD *)(v1018 + 8) = 127908;
  *(_QWORD *)v1018 = 0x200D0001F9D1;
  v1019 = WTF::fastMalloc((WTF *)0xC);
  v2046 = 0x300000003;
  v2045 = v1019;
  *(_DWORD *)(v1019 + 8) = 127912;
  *(_QWORD *)v1019 = 0x200D0001F9D1;
  v1020 = WTF::fastMalloc((WTF *)0xC);
  v2048 = 0x300000003;
  v2047 = v1020;
  *(_DWORD *)(v1020 + 8) = 127979;
  *(_QWORD *)v1020 = 0x200D0001F9D1;
  v1021 = WTF::fastMalloc((WTF *)0xC);
  v2050 = 0x300000003;
  v2049 = v1021;
  *(_DWORD *)(v1021 + 8) = 127981;
  *(_QWORD *)v1021 = 0x200D0001F9D1;
  v1022 = WTF::fastMalloc((WTF *)0xC);
  v2052 = 0x300000003;
  v2051 = v1022;
  *(_DWORD *)(v1022 + 8) = 128187;
  *(_QWORD *)v1022 = 0x200D0001F9D1;
  v1023 = WTF::fastMalloc((WTF *)0xC);
  v2054 = 0x300000003;
  v2053 = v1023;
  *(_DWORD *)(v1023 + 8) = 128188;
  *(_QWORD *)v1023 = 0x200D0001F9D1;
  v1024 = WTF::fastMalloc((WTF *)0xC);
  v2056 = 0x300000003;
  v2055 = v1024;
  *(_DWORD *)(v1024 + 8) = 128295;
  *(_QWORD *)v1024 = 0x200D0001F9D1;
  v1025 = WTF::fastMalloc((WTF *)0xC);
  v2058 = 0x300000003;
  v2057 = v1025;
  *(_DWORD *)(v1025 + 8) = 128300;
  *(_QWORD *)v1025 = 0x200D0001F9D1;
  v1026 = WTF::fastMalloc((WTF *)0xC);
  v2060 = 0x300000003;
  v2059 = v1026;
  *(_DWORD *)(v1026 + 8) = 128640;
  *(_QWORD *)v1026 = 0x200D0001F9D1;
  v1027 = WTF::fastMalloc((WTF *)0xC);
  v2062 = 0x300000003;
  v2061 = v1027;
  *(_DWORD *)(v1027 + 8) = 128658;
  *(_QWORD *)v1027 = 0x200D0001F9D1;
  v1028 = WTF::fastMalloc((WTF *)0xC);
  v2064 = 0x300000003;
  v2063 = v1028;
  *(_DWORD *)(v1028 + 8) = 129455;
  *(_QWORD *)v1028 = 0x200D0001F9D1;
  v1029 = WTF::fastMalloc((WTF *)0xC);
  v2066 = 0x300000003;
  v2065 = v1029;
  *(_DWORD *)(v1029 + 8) = 129456;
  *(_QWORD *)v1029 = 0x200D0001F9D1;
  v1030 = WTF::fastMalloc((WTF *)0xC);
  v2068 = 0x300000003;
  v2067 = v1030;
  *(_DWORD *)(v1030 + 8) = 129457;
  *(_QWORD *)v1030 = 0x200D0001F9D1;
  v1031 = WTF::fastMalloc((WTF *)0xC);
  v2070 = 0x300000003;
  v2069 = v1031;
  *(_DWORD *)(v1031 + 8) = 129458;
  *(_QWORD *)v1031 = 0x200D0001F9D1;
  v1032 = WTF::fastMalloc((WTF *)0xC);
  v2072 = 0x300000003;
  v2071 = v1032;
  *(_DWORD *)(v1032 + 8) = 129459;
  *(_QWORD *)v1032 = 0x200D0001F9D1;
  v1033 = WTF::fastMalloc((WTF *)0xC);
  v2074 = 0x300000003;
  v2073 = v1033;
  *(_DWORD *)(v1033 + 8) = 129468;
  *(_QWORD *)v1033 = 0x200D0001F9D1;
  v1034 = WTF::fastMalloc((WTF *)0xC);
  v2076 = 0x300000003;
  v2075 = v1034;
  *(_DWORD *)(v1034 + 8) = 129469;
  *(_QWORD *)v1034 = 0x200D0001F9D1;
  v1035 = WTF::fastMalloc((WTF *)0xC);
  v2078[0] = 0x300000003;
  v2077 = v1035;
  *(_DWORD *)(v1035 + 8) = 129490;
  *(_QWORD *)v1035 = 0x200D0001F9D1;
  v1036 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v1036 = 0;
  *(_QWORD *)(v1036 + 8) = 0;
  casual = bmalloc_allocate_casual(23488, 1);
  v1045 = 1468;
  *(_DWORD *)(v1036 + 8) = 1468;
  *(_QWORD *)v1036 = casual;
  v1046 = *(_DWORD *)(v1036 + 12);
  v1047 = (unsigned int *)v1054 + 1;
  do
  {
    v1048 = *v1047;
    v1049 = *(_QWORD *)v1036 + 16 * v1046;
    *(_QWORD *)v1049 = 0;
    *(_QWORD *)(v1049 + 8) = 0;
    *(_DWORD *)(v1049 + 12) = v1048;
    if ((_DWORD)v1048)
    {
      if (v1048 >> 30)
      {
        __break(0xC471u);
        return;
      }
      v1050 = (void *)WTF::fastMalloc((WTF *)(4 * v1048));
      *(_DWORD *)(v1049 + 8) = v1048;
      *(_QWORD *)v1049 = v1050;
      memcpy(v1050, *(const void **)(v1047 - 3), 4 * *v1047);
    }
    v1046 = *(_DWORD *)(v1036 + 12) + 1;
    *(_DWORD *)(v1036 + 12) = v1046;
    v1047 += 4;
    --v1045;
  }
  while (v1045);
  *(_OWORD *)(v1036 + 73) = 0u;
  *(_OWORD *)(v1036 + 48) = 0u;
  *(_OWORD *)(v1036 + 64) = 0u;
  *(_OWORD *)(v1036 + 16) = 0u;
  *(_OWORD *)(v1036 + 32) = 0u;
  *(_BYTE *)(v1036 + 89) = *(_BYTE *)(v1036 + 89) & 0xF8 | 4;
  *v1052 = v1036;
  do
  {
    v1051 = *(_QWORD *)((char *)&v2078[-1] + v1045);
    if (v1051)
    {
      *(_QWORD *)((char *)&v2078[-1] + v1045) = 0;
      *(_DWORD *)((char *)v2078 + v1045) = 0;
      WTF::fastFree(v1051, v1038, v1039, v1040, v1041, v1042, v1043, v1044);
    }
    v1045 -= 16;
  }
  while (v1045 != -23488);
}

uint64_t JSC::Yarr::CharacterClass::CharacterClass(uint64_t a1, int *a2, unint64_t a3, uint64_t *a4, unint64_t a5, int *a6, unint64_t a7, uint64_t a8, uint64_t *a9, unint64_t a10, char a11)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)(a1 + 16), a2, a3);
  WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)(a1 + 32), a4, a5);
  WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)(a1 + 48), a6, a7);
  WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)(a1 + 64), a9, a10);
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = a11;
  *(_BYTE *)(a1 + 89) &= 0xFCu;
  return a1;
}

uint64_t *WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, int *a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  v4 = a3;
  if (!(a3 >> 30))
  {
    v6 = 4 * a3;
    v7 = WTF::fastMalloc((WTF *)(4 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *v3 = v7;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *a2++;
      *(_DWORD *)(v7 + 4 * v8++) = v9;
      v6 -= 4;
    }
    while (v6);
    *((_DWORD *)v3 + 3) = v8;
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  v4 = a3;
  if (!(a3 >> 29))
  {
    v6 = 8 * a3;
    v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *v3 = v7;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *a2++;
      *(_QWORD *)(*v3 + 8 * v8) = v9;
      v8 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v8;
      v6 -= 8;
    }
    while (v6);
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::Yarr::CharacterClass::CharacterClass(uint64_t a1, uint64_t a2, unint64_t a3, WTF *this, unint64_t a5, uint64_t *a6, unint64_t a7, char a8)
{
  int v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    v14 = a3;
    if (a3 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198EF2958);
    }
    v16 = 16 * a3;
    v17 = WTF::fastMalloc((WTF *)(16 * a3));
    *(_DWORD *)(a1 + 8) = v14;
    *(_QWORD *)a1 = v17;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = (unsigned int *)(a2 + 12);
    do
    {
      v20 = *v19;
      v21 = *(_QWORD *)a1 + 16 * v18;
      *(_QWORD *)v21 = 0;
      *(_QWORD *)(v21 + 8) = 0;
      *(_DWORD *)(v21 + 12) = v20;
      if ((_DWORD)v20)
      {
        if (v20 >> 30)
          goto LABEL_21;
        v22 = (void *)WTF::fastMalloc((WTF *)(4 * v20));
        *(_DWORD *)(v21 + 8) = v20;
        *(_QWORD *)v21 = v22;
        memcpy(v22, *(const void **)(v19 - 3), 4 * *v19);
      }
      v18 = *(_DWORD *)(a1 + 12) + 1;
      *(_DWORD *)(a1 + 12) = v18;
      v19 += 4;
      v16 -= 16;
    }
    while (v16);
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a5)
  {
    if (a5 >> 30)
    {
LABEL_21:
      __break(0xC471u);
      JUMPOUT(0x198EF2948);
    }
    v23 = 4 * a5;
    v24 = WTF::fastMalloc((WTF *)(4 * a5));
    *(_DWORD *)(a1 + 56) = a5;
    *(_QWORD *)(a1 + 48) = v24;
    v25 = *(_DWORD *)(a1 + 60);
    do
    {
      v26 = *(_DWORD *)this;
      this = (WTF *)((char *)this + 4);
      *(_DWORD *)(v24 + 4 * v25++) = v26;
      v23 -= 4;
    }
    while (v23);
    *(_DWORD *)(a1 + 60) = v25;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (a7)
  {
    if (a7 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198EF2950);
    }
    v27 = 8 * a7;
    v28 = WTF::fastMalloc((WTF *)(8 * a7));
    *(_DWORD *)(a1 + 72) = a7;
    *(_QWORD *)(a1 + 64) = v28;
    v29 = *(_DWORD *)(a1 + 76);
    do
    {
      v30 = *a6++;
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v29) = v30;
      v29 = *(_DWORD *)(a1 + 76) + 1;
      *(_DWORD *)(a1 + 76) = v29;
      v27 -= 8;
    }
    while (v27);
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = a8;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a1 + 89) & 0xF8 | 4;
  return a1;
}

_QWORD *WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

void WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_10:
    v18 = *(unsigned int *)(a1 + 12);
    *(_DWORD *)(*(_QWORD *)a1 + 4 * v18) = *a2;
    *(_DWORD *)(a1 + 12) = v18 + 1;
    return;
  }
  if (!(v8 >> 30))
  {
    v9 = *(const void **)a1;
    v10 = (void *)WTF::fastMalloc((WTF *)(4 * v8));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v10;
    memcpy(v10, v9, 4 * v5);
    if (v9)
    {
      if (*(const void **)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::parse(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 24) > 0x100000u)
    return 1;
  JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::parseTokens((_QWORD **)a1, a2, a3, a4, a5, a6, a7, a8);
  result = *(unsigned __int8 *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 8))
  {
    JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::handleIllegalReferences(a1);
    return *(unsigned __int8 *)(a1 + 8);
  }
  return result;
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::~Parser(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl ***v11;
  WTF::StringImpl ***v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  uint64_t v46;
  WTF::StringImpl **v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl **v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v9 = *(_QWORD *)(a1 + 144);
  if (v9)
  {
    v46 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v46)
    {
      v47 = *(WTF::StringImpl ***)(a1 + 144);
      do
      {
        v48 = *v47;
        if (*v47 != (WTF::StringImpl *)-1)
        {
          *v47 = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
            {
              WTF::StringImpl::~StringImpl(v48, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
            }
            else
            {
              *(_DWORD *)v48 -= 2;
            }
          }
        }
        ++v47;
        --v46;
      }
      while (v46);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *(unsigned int *)(a1 + 132);
  v11 = *(WTF::StringImpl ****)(a1 + 120);
  if ((_DWORD)v10)
  {
    v12 = &v11[v10];
    do
    {
      v13 = *v11;
      if (*v11)
      {
        v14 = *((unsigned int *)v13 - 1);
        if ((_DWORD)v14)
        {
          v15 = *v11;
          do
          {
            v16 = *v15;
            if (*v15 != (WTF::StringImpl *)-1)
            {
              *v15 = 0;
              if (v16)
              {
                if (*(_DWORD *)v16 == 2)
                {
                  WTF::StringImpl::~StringImpl(v16, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
                }
                else
                {
                  *(_DWORD *)v16 -= 2;
                }
              }
            }
            ++v15;
            --v14;
          }
          while (v14);
        }
        WTF::fastFree((unint64_t)(v13 - 2), a2, a3, a4, a5, a6, a7, a8);
      }
      ++v11;
    }
    while (v11 != v12);
    v11 = *(WTF::StringImpl ****)(a1 + 120);
  }
  if ((WTF::StringImpl ***)(a1 + 136) != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v26 = *(unsigned int *)(a1 + 108);
  v27 = *(WTF::StringImpl ****)(a1 + 96);
  if ((_DWORD)v26)
  {
    v28 = &v27[v26];
    do
    {
      v29 = *v27;
      if (*v27)
      {
        v30 = *((unsigned int *)v29 - 1);
        if ((_DWORD)v30)
        {
          v31 = *v27;
          do
          {
            v32 = *v31;
            if (*v31 != (WTF::StringImpl *)-1)
            {
              *v31 = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                {
                  WTF::StringImpl::~StringImpl(v32, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
                }
                else
                {
                  *(_DWORD *)v32 -= 2;
                }
              }
            }
            ++v31;
            --v30;
          }
          while (v30);
        }
        WTF::fastFree((unint64_t)(v29 - 2), a2, a3, a4, a5, a6, a7, a8);
      }
      ++v27;
    }
    while (v27 != v28);
    v27 = *(WTF::StringImpl ****)(a1 + 96);
  }
  if ((WTF::StringImpl ***)(a1 + 112) != v27 && v27 != 0)
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree((unint64_t)v27, a2, a3, a4, a5, a6, a7, a8);
  }
  v42 = *(_QWORD *)(a1 + 88);
  if (v42)
  {
    v57 = *(unsigned int *)(v42 - 4);
    if ((_DWORD)v57)
    {
      v58 = *(WTF::StringImpl ***)(a1 + 88);
      do
      {
        v59 = *v58;
        if (*v58 != (WTF::StringImpl *)-1)
        {
          *v58 = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2)
            {
              WTF::StringImpl::~StringImpl(v59, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
            }
            else
            {
              *(_DWORD *)v59 -= 2;
            }
          }
        }
        ++v58;
        --v57;
      }
      while (v57);
    }
    WTF::fastFree(v42 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v43 = *(_QWORD *)(a1 + 56);
  if (a1 + 72 != v43 && v43 != 0)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v43, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  if (!*(_DWORD *)(a1 + 8))
    WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, 0x10uLL, a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)a1)
  {
    v9 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v9 != 1)
      bzero((void *)(*(_QWORD *)a1 + 8 * v9), -8 * v9 + 8);
  }
  *(_DWORD *)(a1 + 12) = 1;
}

void WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  WTF::StringImpl ***v13;
  WTF::StringImpl ***v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v8 = a2;
    v10 = *(_QWORD *)a1;
    v11 = *(unsigned int *)(a1 + 12);
    if (a2 < 2)
    {
      v12 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = v8;
      *(_QWORD *)a1 = v12;
    }
    if ((_DWORD)v11)
    {
      v13 = (WTF::StringImpl ***)(v10 + 8 * v11);
      v14 = (WTF::StringImpl ***)v10;
      do
      {
        *v12 = 0;
        v15 = *v14;
        *v14 = 0;
        *v12 = v15;
        v16 = *v14;
        if (*v14)
        {
          v17 = *((unsigned int *)v16 - 1);
          if ((_DWORD)v17)
          {
            v18 = *v14;
            do
            {
              v19 = *v18;
              if (*v18 != (WTF::StringImpl *)-1)
              {
                *v18 = 0;
                if (v19)
                {
                  if (*(_DWORD *)v19 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v19, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
                  }
                  else
                  {
                    *(_DWORD *)v19 -= 2;
                  }
                }
              }
              ++v18;
              --v17;
            }
            while (v17);
          }
          WTF::fastFree((unint64_t)(v16 - 2), (void *)a2, a3, a4, a5, a6, a7, a8);
        }
        ++v12;
        ++v14;
      }
      while (v14 != v13);
    }
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v9)
  {
    v10 = a1;
    do
    {
      v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        *v10 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
          {
            WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
          }
          else
          {
            *(_DWORD *)v11 -= 2;
          }
        }
      }
      ++v10;
      --v9;
    }
    while (v9);
  }
  WTF::fastFree((unint64_t)(a1 - 2), a2, a3, a4, a5, a6, a7, a8);
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::parseTokens(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  _QWORD *v16;
  unsigned int v17;
  JSC::Yarr::YarrPatternConstructor **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  int v29;
  JSC::Yarr::YarrPatternConstructor *v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  JSC::Yarr::YarrPatternConstructor *v46;
  int v47;
  unsigned int v48;
  JSC::Yarr::YarrPatternConstructor *v49;
  char v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  WTF::StringImpl **v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  WTF::StringImpl **v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl **v73;
  uint64_t v74;
  WTF::StringImpl **v75;
  WTF::StringImpl **v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  JSC::Yarr::YarrPatternConstructor *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  WTF::StringImpl **v91;
  uint64_t v92;
  WTF::StringImpl **v93;
  WTF::StringImpl **v94;
  WTF::StringImpl **v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl **v98;
  uint64_t v99;
  WTF::StringImpl **v100;
  WTF::StringImpl **v101;
  unsigned int v102;
  int v103;
  char v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  unint64_t v108;
  unsigned int v109;
  uint64_t v110;
  JSC::Yarr::YarrPatternConstructor *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t *v115;
  uint64_t *v116;
  WTF::AtomStringImpl *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  int v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v132;
  unsigned int v133;
  unsigned __int8 v134;
  int v135;
  unsigned int v136;
  unsigned __int8 v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  JSC::Yarr::YarrPatternConstructor *v142;
  _BOOL4 v143;
  JSC::Yarr::YarrPattern *v144;
  JSC::Yarr::CharacterClassConstructor *v145;
  void *v147;
  uint64_t v149;
  unsigned int v150;
  char v151;
  uint64_t v152;
  unsigned int v153;
  char v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  __int16 v158;
  unsigned int v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  int v163;
  _QWORD *v164;
  int v165;
  _BOOL4 v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  int v172;
  uint64_t v173;
  char v174;
  WTF *v175;
  unsigned int v176;
  char v177;
  unint64_t *v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  JSC::Yarr::YarrPattern **v184;
  int v185;
  uint64_t v186;
  char v187;
  unsigned int v188;
  unsigned int v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v192;
  unint64_t v193;
  _BOOL8 v195;
  uint64_t v196;
  WTF::StringImpl **v197;
  WTF::StringImpl *v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  WTF::StringImpl **v208;
  WTF::StringImpl *v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  WTF::StringImpl **v219;
  WTF::StringImpl *v220;
  unint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  WTF::StringImpl **v230;
  WTF::StringImpl *v231;
  unint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  WTF::AtomStringImpl *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  JSC::Yarr::YarrPatternConstructor *v253;
  WTF::StringImpl *v254;
  uint64_t v255;
  WTF::AtomStringImpl *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  unsigned int v264;
  unint64_t v265;
  unsigned int v266;
  uint64_t *v267;
  WTF::StringImpl **v268;
  uint64_t *v269;
  WTF::StringImpl **v270;
  uint64_t *v271;
  WTF::StringImpl **v272;
  uint64_t v273;
  uint64_t v274;
  BOOL v275;
  unsigned int v276;
  WTF::StringImpl **v277;
  char v278;
  unsigned int v279;
  unsigned int v280;
  unint64_t v281;
  char v282;
  unint64_t v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  BOOL v292;
  unsigned int v293;
  char v295;
  char v296;
  WTF::AtomStringImpl *v297;
  const WTF::StringImpl *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unsigned int v304;
  unsigned int v305;
  void *v306;
  int v307;
  char *v308;
  char v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  uint64_t v321;
  int v322;
  int v323;
  WTF::AtomStringImpl *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  char v333;
  const JSC::Yarr::CharacterClass *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  int v352;
  int v353;
  JSC::Yarr::YarrPattern **v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  int v365;
  BOOL v366;
  unsigned int v367;
  WTF *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  void *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  char v404;
  BOOL v405;
  char v406;
  uint64_t *v407;
  uint64_t v408;
  WTF::StringImpl *v409;
  char v410;
  WTF::StringImpl *v411;
  char v412;
  WTF::StringImpl *v413;
  char v414;
  _OWORD v415[2];
  WTF *v416;
  uint64_t v417;

  LOBYTE(v9) = 0;
  v10 = (char *)(a1 + 1);
  v408 = (uint64_t)(a1 + 7);
  v11 = a1 + 12;
  v12 = a1 + 15;
  v13 = 48;
  while (2)
  {
    v14 = *((_DWORD *)a1 + 6);
    v15 = (WTF *)*((unsigned int *)a1 + 7);
    if ((_DWORD)v15 != v14)
    {
      v16 = a1[2];
      v17 = *((unsigned __int8 *)v15 + (_QWORD)v16);
      if (v17 > 0x5A)
      {
        if (*((unsigned __int8 *)v15 + (_QWORD)v16) <= 0x7Au)
        {
          switch(*((_BYTE *)v15 + (_QWORD)v16))
          {
            case '[':
              v47 = *((unsigned __int8 *)a1 + 32);
              v48 = (_DWORD)v15 + 1;
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 1;
              if (v47 != 2)
              {
                v49 = (JSC::Yarr::YarrPatternConstructor *)*a1;
                *(_QWORD *)&v415[0] = *a1;
                *((_QWORD *)&v415[0] + 1) = v10;
                LOBYTE(v415[1]) = v47 == 1;
                *(_QWORD *)((char *)&v415[1] + 4) = 0;
                if (v48 == v14 || *((_BYTE *)v16 + v48) != 94)
                {
                  v50 = 0;
                }
                else
                {
                  *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
                  v50 = 1;
                }
                *((_BYTE *)v49 + 153) = v50;
                while (1)
                {
                  v51 = *((_DWORD *)a1 + 6);
                  v52 = *((unsigned int *)a1 + 7);
                  if ((_DWORD)v52 == v51)
                  {
                    v278 = 13;
                    goto LABEL_564;
                  }
                  v53 = a1[2];
                  v54 = *((unsigned __int8 *)v53 + v52);
                  if (v54 != 92)
                  {
                    if (v54 != 93)
                    {
                      *((_DWORD *)a1 + 7) = v52 + 1;
                      v55 = *((unsigned __int8 *)v53 + v52);
                      switch(DWORD1(v415[1]))
                      {
                        case 0:
                          goto LABEL_62;
                        case 1:
                          if ((_DWORD)v55 != 45)
                            goto LABEL_59;
                          v56 = 2;
                          goto LABEL_51;
                        case 2:
                          goto LABEL_63;
                        case 3:
                          if ((_DWORD)v55 != 45)
                            goto LABEL_62;
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)0x2D, a3, a4, a5, a6, a7, a8);
                          v56 = 4;
                          goto LABEL_51;
                        case 4:
                          goto LABEL_679;
                        default:
                          goto LABEL_60;
                      }
                    }
                    *((_DWORD *)a1 + 7) = v52 + 1;
                    if (DWORD1(v415[1]) == 1)
                    {
                      v62 = DWORD2(v415[1]);
                      v63 = *(uint64_t **)&v415[0];
                    }
                    else
                    {
                      if (DWORD1(v415[1]) != 2)
                      {
                        v63 = *(uint64_t **)&v415[0];
                        goto LABEL_74;
                      }
                      v63 = *(uint64_t **)&v415[0];
                      JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
                      v62 = 45;
                    }
                    JSC::Yarr::CharacterClassConstructor::putChar(v63[13], (void *)v62, a3, a4, a5, a6, a7, a8);
LABEL_74:
                    JSC::Yarr::YarrPatternConstructor::atomCharacterClassEnd((JSC::Yarr::YarrPatternConstructor *)v63);
                    goto LABEL_37;
                  }
                  v57 = (v52 + 1);
                  *((_DWORD *)a1 + 7) = v57;
                  if ((_DWORD)v57 == v51)
                  {
                    v278 = 17;
                    goto LABEL_564;
                  }
                  v58 = *((unsigned __int8 *)v53 + v57);
                  if (v58 == 117)
                  {
                    v59 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::UnicodeParseContext)0>((uint64_t)a1);
                    if (*((_BYTE *)a1 + 8))
                      goto LABEL_37;
                    if (v59 == -1)
                      v55 = 117;
                    else
                      v55 = v59;
                    switch(DWORD1(v415[1]))
                    {
                      case 0:
                      case 3:
                        goto LABEL_62;
                      case 1:
                        goto LABEL_59;
                      case 2:
                        goto LABEL_63;
                      case 4:
                        goto LABEL_679;
                      default:
                        goto LABEL_60;
                    }
                    goto LABEL_60;
                  }
                  switch(*((_BYTE *)v53 + v57))
                  {
                    case 'P':
                    case 'p':
                      v191 = v52 + 2;
                      *((_DWORD *)a1 + 7) = v52 + 2;
                      v192 = *((unsigned __int8 *)v53 + v57);
                      if (!*((_BYTE *)a1 + 32))
                        goto LABEL_573;
                      if (v191 == v51 || *((_BYTE *)v53 + v191) != 123)
                      {
                        v278 = 25;
                        goto LABEL_564;
                      }
                      *((_DWORD *)a1 + 7) = v52 + 3;
                      v193 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeUnicodePropertyExpression((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
                      if (!HIDWORD(v193))
                        goto LABEL_60;
                      a2 = v193;
                      if ((_DWORD)v192 == 80 && (v193 - 329) <= 6)
                      {
LABEL_689:
                        v278 = 30;
                        goto LABEL_564;
                      }
                      v195 = (_DWORD)v192 == 80;
LABEL_383:
                      JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::CharacterClassParserDelegate::atomBuiltInCharacterClass((unsigned int *)v415, a2, v195, a4, a5, a6, a7, a8);
                      goto LABEL_60;
                    case 'Q':
                    case 'R':
                    case 'T':
                    case 'U':
                    case 'V':
                    case 'X':
                    case 'Y':
                    case 'Z':
                    case '[':
                    case '\\':
                    case ']':
                    case '^':
                    case '_':
                    case 'a':
                    case 'e':
                    case 'g':
                    case 'h':
                    case 'i':
                    case 'j':
                    case 'l':
                    case 'm':
                    case 'o':
                    case 'u':
LABEL_200:
                      if (*((unsigned __int8 *)a1 + 32) - 1 <= 1 && (v58 & 0x80) == 0)
                      {
                        v147 = memchr("^$\\.*+?()[]{}|/", *((unsigned __int8 *)v53 + v57), 0x10uLL);
                        if (!v58 || v147 == 0)
                        {
LABEL_808:
                          v278 = 22;
LABEL_564:
                          *v10 = v278;
LABEL_37:
                          LOBYTE(v9) = 1;
                          goto LABEL_38;
                        }
                      }
LABEL_177:
                      *((_DWORD *)a1 + 7) = v52 + 2;
                      v55 = *((unsigned __int8 *)v53 + v57);
                      switch(DWORD1(v415[1]))
                      {
                        case 0:
                        case 3:
                          goto LABEL_62;
                        case 1:
                          goto LABEL_59;
                        case 2:
                          goto LABEL_63;
                        case 4:
                          goto LABEL_679;
                        default:
                          goto LABEL_60;
                      }
                      goto LABEL_60;
                    case 'S':
                      *((_DWORD *)a1 + 7) = v52 + 2;
                      switch(DWORD1(v415[1]))
                      {
                        case 0:
                        case 3:
                          goto LABEL_341;
                        case 1:
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
LABEL_341:
                          v184 = *(JSC::Yarr::YarrPattern ***)&v415[0];
                          v185 = 1;
                          goto LABEL_342;
                        case 2:
                          v376 = *(_QWORD *)&v415[0];
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(v376 + 104), (void *)0x2D, v377, v378, v379, v380, v381, v382);
                          goto LABEL_767;
                        case 4:
LABEL_767:
                          if (LOBYTE(v415[1]))
                            goto LABEL_700;
                          v354 = *(JSC::Yarr::YarrPattern ***)&v415[0];
                          v355 = 1;
                          break;
                        default:
                          goto LABEL_60;
                      }
                      goto LABEL_769;
                    case 'W':
                      *((_DWORD *)a1 + 7) = v52 + 2;
                      switch(DWORD1(v415[1]))
                      {
                        case 0:
                        case 3:
                          goto LABEL_369;
                        case 1:
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
LABEL_369:
                          v184 = *(JSC::Yarr::YarrPattern ***)&v415[0];
                          v185 = 2;
LABEL_342:
                          JSC::Yarr::YarrPatternConstructor::atomCharacterClassBuiltIn(v184, v185, 1, a4, a5, a6, a7, a8);
                          goto LABEL_70;
                        case 2:
                          v383 = *(_QWORD *)&v415[0];
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(v383 + 104), (void *)0x2D, v384, v385, v386, v387, v388, v389);
                          goto LABEL_775;
                        case 4:
LABEL_775:
                          if (LOBYTE(v415[1]))
                            goto LABEL_700;
                          v354 = *(JSC::Yarr::YarrPattern ***)&v415[0];
                          v355 = 2;
                          break;
                        default:
                          goto LABEL_60;
                      }
LABEL_769:
                      v356 = 1;
                      goto LABEL_720;
                    case 'b':
                      *((_DWORD *)a1 + 7) = v52 + 2;
                      v243 = 8;
                      goto LABEL_440;
                    case 'c':
                      *((_DWORD *)a1 + 7) = v52 + 2;
                      if ((_DWORD)v52 + 2 == v51)
                      {
                        if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                        {
LABEL_791:
                          v404 = 22;
LABEL_792:
                          *v10 = v404;
                          v13 = 48;
                          goto LABEL_37;
                        }
LABEL_579:
                        *((_DWORD *)a1 + 7) = v57;
                        v149 = 92;
                        goto LABEL_580;
                      }
                      *((_DWORD *)a1 + 7) = v52 + 3;
                      v343 = *((unsigned __int8 *)v53 + (v52 + 2));
                      if ((v343 | 0x20u) - 97 > 0x19)
                      {
                        if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                        {
                          v404 = 24;
                          goto LABEL_792;
                        }
                        if (v343 != 95 && (v343 - 48) > 9)
                          goto LABEL_579;
                      }
                      v149 = v343 & 0x1F;
LABEL_580:
                      JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::CharacterClassParserDelegate::atomPatternCharacter((uint64_t)v415, (void *)v149, a3, a4, a5, a6, a7, a8);
LABEL_701:
                      v13 = 48;
LABEL_60:
                      if (*v10)
                        goto LABEL_37;
                      break;
                    case 'd':
                      *((_DWORD *)a1 + 7) = v52 + 2;
                      switch(DWORD1(v415[1]))
                      {
                        case 0:
                        case 3:
                          goto LABEL_233;
                        case 1:
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
LABEL_233:
                          v145 = *(JSC::Yarr::CharacterClassConstructor **)(*(_QWORD *)&v415[0] + 104);
                          JSC::Yarr::YarrPattern::digitsCharacterClass(**(JSC::Yarr::YarrPattern ***)&v415[0]);
                          goto LABEL_69;
                        case 2:
                          v357 = *(_QWORD *)&v415[0];
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(v357 + 104), (void *)0x2D, v358, v359, v360, v361, v362, v363);
                          goto LABEL_725;
                        case 4:
LABEL_725:
                          if (LOBYTE(v415[1]))
                            goto LABEL_700;
                          v354 = *(JSC::Yarr::YarrPattern ***)&v415[0];
                          v355 = 0;
                          break;
                        default:
                          goto LABEL_60;
                      }
                      goto LABEL_719;
                    case 'f':
                      *((_DWORD *)a1 + 7) = v52 + 2;
                      switch(DWORD1(v415[1]))
                      {
                        case 0:
                        case 3:
                          *(_QWORD *)((char *)&v415[1] + 4) = 0xC00000001;
                          goto LABEL_60;
                        case 1:
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
                          v141 = 12;
                          goto LABEL_68;
                        case 2:
                          a3 = DWORD2(v415[1]);
                          if (DWORD2(v415[1]) >= 0xD)
                            goto LABEL_587;
                          v178 = *(unint64_t **)(*(_QWORD *)&v415[0] + 104);
                          v179 = (uint64_t)(v178 + 5);
                          v180 = 12;
                          goto LABEL_306;
                        case 4:
                          if (LOBYTE(v415[1]))
                            goto LABEL_700;
                          v331 = *(_QWORD *)(*(_QWORD *)&v415[0] + 104);
                          v332 = 12;
                          goto LABEL_681;
                        default:
                          goto LABEL_60;
                      }
                    case 'k':
                      *((_DWORD *)a1 + 7) = v52 + 2;
                      if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                        goto LABEL_791;
                      JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::CharacterClassParserDelegate::atomPatternCharacter((uint64_t)v415, (void *)0x6B, a3, a4, a5, a6, a7, a8);
                      *((_BYTE *)a1 + 49) = 1;
                      goto LABEL_701;
                    case 'n':
                      *((_DWORD *)a1 + 7) = v52 + 2;
                      switch(DWORD1(v415[1]))
                      {
                        case 0:
                        case 3:
                          *(_QWORD *)((char *)&v415[1] + 4) = 0xA00000001;
                          goto LABEL_60;
                        case 1:
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
                          v141 = 10;
                          goto LABEL_68;
                        case 2:
                          a3 = DWORD2(v415[1]);
                          if (DWORD2(v415[1]) >= 0xB)
                            goto LABEL_587;
                          v178 = *(unint64_t **)(*(_QWORD *)&v415[0] + 104);
                          v179 = (uint64_t)(v178 + 5);
                          v180 = 10;
                          goto LABEL_306;
                        case 4:
                          if (LOBYTE(v415[1]))
                            goto LABEL_700;
                          v331 = *(_QWORD *)(*(_QWORD *)&v415[0] + 104);
                          v332 = 10;
                          goto LABEL_681;
                        default:
                          goto LABEL_60;
                      }
                    case 'q':
                      *((_DWORD *)a1 + 7) = v52 + 2;
                      v192 = *((unsigned __int8 *)v53 + v57);
LABEL_573:
                      if ((JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ParseEscapeMode)1>((uint64_t)a1, v192) & 1) != 0)goto LABEL_60;
                      v243 = v192;
                      goto LABEL_440;
                    case 'r':
                      *((_DWORD *)a1 + 7) = v52 + 2;
                      switch(DWORD1(v415[1]))
                      {
                        case 0:
                        case 3:
                          *(_QWORD *)((char *)&v415[1] + 4) = 0xD00000001;
                          goto LABEL_60;
                        case 1:
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
                          v141 = 13;
                          goto LABEL_68;
                        case 2:
                          a3 = DWORD2(v415[1]);
                          if (DWORD2(v415[1]) >= 0xE)
                            goto LABEL_587;
                          v178 = *(unint64_t **)(*(_QWORD *)&v415[0] + 104);
                          v179 = (uint64_t)(v178 + 5);
                          v180 = 13;
                          goto LABEL_306;
                        case 4:
                          if (LOBYTE(v415[1]))
                            goto LABEL_700;
                          v331 = *(_QWORD *)(*(_QWORD *)&v415[0] + 104);
                          v332 = 13;
                          goto LABEL_681;
                        default:
                          goto LABEL_60;
                      }
                    case 's':
                      *((_DWORD *)a1 + 7) = v52 + 2;
                      switch(DWORD1(v415[1]))
                      {
                        case 0:
                        case 3:
                          goto LABEL_308;
                        case 1:
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
LABEL_308:
                          v145 = *(JSC::Yarr::CharacterClassConstructor **)(*(_QWORD *)&v415[0] + 104);
                          v334 = (const JSC::Yarr::CharacterClass *)JSC::Yarr::YarrPattern::spacesCharacterClass(**(JSC::Yarr::YarrPattern ***)&v415[0]);
                          goto LABEL_69;
                        case 2:
                          v369 = *(_QWORD *)&v415[0];
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(v369 + 104), (void *)0x2D, v370, v371, v372, v373, v374, v375);
                          goto LABEL_757;
                        case 4:
LABEL_757:
                          if (LOBYTE(v415[1]))
                            goto LABEL_700;
                          v354 = *(JSC::Yarr::YarrPattern ***)&v415[0];
                          v355 = 1;
                          break;
                        default:
                          goto LABEL_60;
                      }
                      goto LABEL_719;
                    case 't':
                      *((_DWORD *)a1 + 7) = v52 + 2;
                      switch(DWORD1(v415[1]))
                      {
                        case 0:
                        case 3:
                          *(_QWORD *)((char *)&v415[1] + 4) = 0x900000001;
                          goto LABEL_60;
                        case 1:
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
                          v141 = 9;
                          goto LABEL_68;
                        case 2:
                          a3 = DWORD2(v415[1]);
                          if (DWORD2(v415[1]) >= 0xA)
                            goto LABEL_587;
                          v178 = *(unint64_t **)(*(_QWORD *)&v415[0] + 104);
                          v179 = (uint64_t)(v178 + 5);
                          v180 = 9;
                          goto LABEL_306;
                        case 4:
                          if (LOBYTE(v415[1]))
                            goto LABEL_700;
                          v331 = *(_QWORD *)(*(_QWORD *)&v415[0] + 104);
                          v332 = 9;
                          goto LABEL_681;
                        default:
                          goto LABEL_60;
                      }
                    case 'v':
                      *((_DWORD *)a1 + 7) = v52 + 2;
                      switch(DWORD1(v415[1]))
                      {
                        case 0:
                        case 3:
                          v190 = 0xB00000001;
                          goto LABEL_371;
                        case 1:
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
                          v141 = 11;
LABEL_68:
                          DWORD2(v415[1]) = v141;
                          goto LABEL_60;
                        case 2:
                          a2 = DWORD2(v415[1]);
                          if (DWORD2(v415[1]) >= 0xC)
                            goto LABEL_587;
                          v60 = *(unint64_t **)(*(_QWORD *)&v415[0] + 104);
                          v61 = 11;
                          goto LABEL_65;
                        case 4:
                          if (LOBYTE(v415[1]))
                            goto LABEL_700;
                          v331 = *(_QWORD *)(*(_QWORD *)&v415[0] + 104);
                          v332 = 11;
                          goto LABEL_681;
                        default:
                          goto LABEL_60;
                      }
                    case 'w':
                      *((_DWORD *)a1 + 7) = v52 + 2;
                      switch(DWORD1(v415[1]))
                      {
                        case 0:
                        case 3:
                          goto LABEL_189;
                        case 1:
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
LABEL_189:
                          v144 = **(JSC::Yarr::YarrPattern ***)&v415[0];
                          v145 = *(JSC::Yarr::CharacterClassConstructor **)(*(_QWORD *)&v415[0] + 104);
                          if ((*(_WORD *)(**(_QWORD **)&v415[0] + 2) & 0x60) == 0
                            || (*(_WORD *)(**(_QWORD **)&v415[0] + 2) & 4) == 0)
                          {
                            JSC::Yarr::YarrPattern::wordcharCharacterClass(v144);
                          }
                          else
                          {
                            JSC::Yarr::YarrPattern::wordUnicodeIgnoreCaseCharCharacterClass(v144);
                          }
LABEL_69:
                          JSC::Yarr::CharacterClassConstructor::append(v145, v334, v335, v336, v337, v338, v339, v340);
LABEL_70:
                          v56 = 3;
LABEL_51:
                          DWORD1(v415[1]) = v56;
                          goto LABEL_60;
                        case 2:
                          v344 = *(_QWORD *)&v415[0];
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
                          JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(v344 + 104), (void *)0x2D, v345, v346, v347, v348, v349, v350);
                          goto LABEL_699;
                        case 4:
LABEL_699:
                          if (LOBYTE(v415[1]))
                            goto LABEL_700;
                          v354 = *(JSC::Yarr::YarrPattern ***)&v415[0];
                          v355 = 2;
                          break;
                        default:
                          goto LABEL_60;
                      }
LABEL_719:
                      v356 = 0;
LABEL_720:
                      JSC::Yarr::YarrPatternConstructor::atomCharacterClassBuiltIn(v354, v355, v356, a4, a5, a6, a7, a8);
LABEL_721:
                      DWORD1(v415[1]) = 0;
                      goto LABEL_701;
                    case 'x':
                      v127 = (v52 + 2);
                      *((_DWORD *)a1 + 7) = v127;
                      if ((_DWORD)v127 != v51)
                      {
                        v128 = *((unsigned __int8 *)v53 + v127);
                        v129 = v128 - 48;
                        v130 = (v128 | 0x20) - 97;
                        if (v129 < 0xA || v130 <= 5)
                        {
                          v132 = (v52 + 3);
                          *((_DWORD *)a1 + 7) = v132;
                          v133 = *((unsigned __int8 *)v53 + v127);
                          v134 = v133 >= 0x41 ? (v133 + 9) & 0xF : v133 - 48;
                          if ((_DWORD)v132 != v51)
                          {
                            v135 = *((unsigned __int8 *)v53 + v132);
                            if ((v135 - 48) < 0xA || (v135 | 0x20u) - 97 < 6)
                            {
                              *((_DWORD *)a1 + 7) = v52 + 4;
                              v136 = *((unsigned __int8 *)v53 + v132);
                              v137 = v136 - 48;
                              if (v136 >= 0x41)
                                v137 = (v136 + 9) & 0xF;
                              v55 = v137 | (16 * v134);
                              switch(DWORD1(v415[1]))
                              {
                                case 0:
                                case 3:
LABEL_62:
                                  DWORD1(v415[1]) = 1;
                                  DWORD2(v415[1]) = v55;
                                  break;
                                case 1:
LABEL_59:
                                  JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
                                  DWORD2(v415[1]) = v55;
                                  break;
                                case 2:
LABEL_63:
                                  a2 = DWORD2(v415[1]);
                                  if (DWORD2(v415[1]) > v55)
                                    goto LABEL_587;
                                  v60 = *(unint64_t **)(*(_QWORD *)&v415[0] + 104);
                                  v61 = v55;
LABEL_65:
                                  JSC::Yarr::CharacterClassConstructor::putRange(v60, a2, v61);
                                  goto LABEL_66;
                                case 4:
LABEL_679:
                                  if (LOBYTE(v415[1]))
                                    goto LABEL_700;
                                  v331 = *(_QWORD *)(*(_QWORD *)&v415[0] + 104);
                                  v332 = v55;
                                  goto LABEL_681;
                                default:
                                  goto LABEL_60;
                              }
                              goto LABEL_60;
                            }
                          }
                        }
                      }
                      *((_DWORD *)a1 + 7) = v127;
                      if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                        goto LABEL_791;
                      v149 = 120;
                      goto LABEL_580;
                    default:
                      switch(*((_BYTE *)v53 + v57))
                      {
                        case '-':
                          if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                            goto LABEL_524;
                          goto LABEL_177;
                        case '0':
                          *((_DWORD *)a1 + 7) = v52 + 2;
                          if ((_DWORD)v52 + 2 == v51
                            || *((unsigned __int8 *)v53 + (v52 + 2)) - 48 >= 0xA)
                          {
                            switch(DWORD1(v415[1]))
                            {
                              case 0:
                              case 3:
                                v190 = 1;
LABEL_371:
                                *(_QWORD *)((char *)&v415[1] + 4) = v190;
                                break;
                              case 1:
                                JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
                                DWORD2(v415[1]) = 0;
                                break;
                              case 2:
                                if (DWORD2(v415[1]))
                                {
LABEL_587:
                                  **((_BYTE **)&v415[0] + 1) = 14;
                                }
                                else
                                {
                                  v178 = *(unint64_t **)(*(_QWORD *)&v415[0] + 104);
                                  v179 = (uint64_t)(v178 + 5);
                                  LODWORD(a3) = 0;
                                  v180 = 0;
LABEL_306:
                                  JSC::Yarr::CharacterClassConstructor::addSortedRange(v178, v179, a3, v180);
LABEL_66:
                                  DWORD1(v415[1]) = 0;
                                }
                                break;
                              case 4:
                                if (LOBYTE(v415[1]))
                                {
LABEL_700:
                                  **((_BYTE **)&v415[0] + 1) = 15;
                                  goto LABEL_701;
                                }
                                v331 = *(_QWORD *)(*(_QWORD *)&v415[0] + 104);
                                v332 = 0;
LABEL_681:
                                JSC::Yarr::CharacterClassConstructor::putChar(v331, (void *)v332, a3, a4, a5, a6, a7, a8);
                                goto LABEL_721;
                              default:
                                goto LABEL_60;
                            }
                          }
                          else
                          {
                            if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                            {
LABEL_563:
                              v278 = 23;
                              goto LABEL_564;
                            }
                            v241 = (uint64_t)a1;
                            v242 = 2;
LABEL_439:
                            v243 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::consumeOctal(v241, v242);
LABEL_440:
                            JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::CharacterClassParserDelegate::atomPatternCharacter((uint64_t)v415, (void *)v243, a3, a4, a5, a6, a7, a8);
                          }
                          break;
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                          if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                            goto LABEL_563;
                          if (v58 <= 0x37)
                          {
                            v241 = (uint64_t)a1;
                            v242 = 3;
                            goto LABEL_439;
                          }
LABEL_524:
                          *((_DWORD *)a1 + 7) = v52 + 2;
                          v243 = *((unsigned __int8 *)v53 + v57);
                          goto LABEL_440;
                        case 'B':
                          *((_DWORD *)a1 + 7) = v52 + 2;
                          if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                            goto LABEL_808;
                          v243 = 66;
                          goto LABEL_440;
                        case 'D':
                          *((_DWORD *)a1 + 7) = v52 + 2;
                          LODWORD(a2) = 0;
                          v195 = 1;
                          goto LABEL_383;
                        default:
                          goto LABEL_200;
                      }
                      goto LABEL_60;
                  }
                }
              }
              v160 = (uint64_t)*a1;
              *(_QWORD *)&v415[0] = *a1;
              *((_QWORD *)&v415[0] + 1) = v10;
              v416 = 0;
              v417 = 0;
              memset(&v415[1], 0, 12);
              if (v48 == v14 || *((_BYTE *)v16 + v48) != 94)
              {
                v161 = 0;
              }
              else
              {
                *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
                v161 = 1;
              }
              BYTE6(v415[1]) = v161;
              *(_BYTE *)(v160 + 153) = v161;
              while (1)
              {
                v163 = *((_DWORD *)a1 + 6);
                v162 = *((unsigned int *)a1 + 7);
                if ((_DWORD)v162 == v163)
                {
                  v296 = 13;
                  goto LABEL_631;
                }
                v164 = a1[2];
                v165 = *((unsigned __int8 *)v164 + v162);
                if (v165 == 92)
                {
                  if (BYTE4(v415[1]))
                    v166 = BYTE4(v415[1]) == 1;
                  else
                    v166 = 1;
                  switch(LODWORD(v415[1]))
                  {
                    case 0:
                    case 7:
                      goto LABEL_262;
                    case 1:
                      if (!v166)
                      {
                        v296 = 29;
LABEL_764:
                        v13 = 48;
LABEL_631:
                        *v10 = v296;
LABEL_287:
                        v175 = v416;
                        if (v416)
                        {
                          v416 = 0;
                          LODWORD(v417) = 0;
                          WTF::fastFree((unint64_t)v175, (void *)a2, a3, a4, a5, a6, a7, a8);
                        }
                        goto LABEL_37;
                      }
                      JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
                      LODWORD(v415[1]) = 0;
                      v164 = a1[2];
                      v163 = *((_DWORD *)a1 + 6);
                      LODWORD(v162) = *((_DWORD *)a1 + 7);
                      v13 = 48;
LABEL_262:
                      BYTE7(v415[1]) = 1;
                      v167 = (v162 + 1);
                      *((_DWORD *)a1 + 7) = v167;
                      if ((_DWORD)v167 == v163)
                      {
                        v168 = 0;
                        *v10 = 17;
                        goto LABEL_276;
                      }
                      break;
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                      if (v166)
                        goto LABEL_262;
                      goto LABEL_630;
                    default:
LABEL_630:
                      v296 = 29;
                      goto LABEL_631;
                  }
                  a2 = *((unsigned __int8 *)v164 + v167);
                  switch(*((_BYTE *)v164 + v167))
                  {
                    case '-':
                      if (*((unsigned __int8 *)a1 + 32) - 1 > 1)
                        goto LABEL_710;
                      v352 = v162 + 2;
                      goto LABEL_711;
                    case '0':
                      v318 = v162 + 2;
                      *((_DWORD *)a1 + 7) = v318;
                      if (v318 == v163 || *((unsigned __int8 *)v164 + v318) - 48 >= 0xA)
                      {
                        v317 = 0;
                      }
                      else
                      {
                        if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                        {
                          v282 = 23;
                          goto LABEL_662;
                        }
                        v320 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::consumeOctal((uint64_t)a1, 2);
LABEL_664:
                        v317 = v320;
                      }
                      goto LABEL_665;
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                      if (*((unsigned __int8 *)a1 + 32) - 1 > 1)
                      {
                        if (a2 > 0x37)
                        {
                          *((_DWORD *)a1 + 7) = v162 + 2;
                          v266 = *((unsigned __int8 *)v164 + v167);
                        }
                        else
                        {
                          v266 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::consumeOctal((uint64_t)a1, 3);
                        }
LABEL_526:
                        JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::atomPatternCharacter((uint64_t)v415, v266, a3, a4, a5, a6, a7, a8);
                      }
                      else
                      {
                        *v10 = 23;
                      }
LABEL_275:
                      v168 = 1;
                      goto LABEL_276;
                    case 'B':
                      *((_DWORD *)a1 + 7) = v162 + 2;
                      if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                        goto LABEL_661;
                      v317 = 66;
                      goto LABEL_665;
                    case 'D':
                      *((_DWORD *)a1 + 7) = v162 + 2;
                      v168 = 1;
                      v169 = 0;
                      goto LABEL_646;
                    case 'P':
                    case 'p':
                      v279 = v162 + 2;
                      *((_DWORD *)a1 + 7) = v162 + 2;
                      v280 = *((unsigned __int8 *)v164 + v167);
                      if (!*((_BYTE *)a1 + 32))
                        goto LABEL_687;
                      if (v279 == v163 || *((_BYTE *)v164 + v279) != 123)
                      {
                        v282 = 25;
                        goto LABEL_662;
                      }
                      *((_DWORD *)a1 + 7) = v162 + 3;
                      v281 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeUnicodePropertyExpression((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
                      if (!HIDWORD(v281))
                        goto LABEL_666;
                      a2 = v281;
                      if (v280 == 80 && (v281 - 329) <= 6)
                      {
                        v282 = 30;
                        goto LABEL_662;
                      }
                      JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::atomBuiltInCharacterClass((uint64_t)v415, v281, v280 == 80, a4, a5, a6, a7, a8);
                      goto LABEL_666;
                    case 'S':
                      *((_DWORD *)a1 + 7) = v162 + 2;
                      v168 = 1;
                      v169 = 1;
                      goto LABEL_646;
                    case 'W':
                      *((_DWORD *)a1 + 7) = v162 + 2;
                      v168 = 1;
                      v169 = 2;
LABEL_646:
                      v170 = 1;
                      goto LABEL_265;
                    case 'b':
                      *((_DWORD *)a1 + 7) = v162 + 2;
                      v266 = 8;
                      goto LABEL_526;
                    case 'c':
                      *((_DWORD *)a1 + 7) = v162 + 2;
                      if ((_DWORD)v162 + 2 == v163)
                      {
                        if (*((unsigned __int8 *)a1 + 32) - 1 > 1)
                          goto LABEL_650;
LABEL_661:
                        v282 = 22;
                        goto LABEL_662;
                      }
                      *((_DWORD *)a1 + 7) = v162 + 3;
                      v353 = *((unsigned __int8 *)v164 + (v162 + 2));
                      if ((v353 | 0x20u) - 97 > 0x19)
                      {
                        if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                        {
                          v282 = 24;
LABEL_662:
                          *v10 = v282;
                          goto LABEL_666;
                        }
                        if (v353 != 95 && (v353 - 48) > 9)
                        {
LABEL_650:
                          *((_DWORD *)a1 + 7) = v167;
                          v317 = 92;
                          goto LABEL_665;
                        }
                      }
                      v317 = v353 & 0x1F;
LABEL_665:
                      JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::atomPatternCharacter((uint64_t)v415, v317, a3, a4, a5, a6, a7, a8);
LABEL_666:
                      v168 = 1;
LABEL_667:
                      v13 = 48;
LABEL_276:
                      if (BYTE4(v415[1]) >= 2u)
                      {
                        if (BYTE4(v415[1]) != 2)
                        {
LABEL_279:
                          if ((v168 - 3) <= 1u)
                          {
                            if (LODWORD(v415[1]) == 1)
                              JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
                            LODWORD(v415[1]) = 6;
                          }
                          goto LABEL_280;
                        }
                        v174 = v168 == 4 && BYTE5(v415[1]) != 0;
                      }
                      else
                      {
                        v174 = BYTE5(v415[1]) | (v168 == 4);
                      }
                      BYTE5(v415[1]) = v174;
                      goto LABEL_279;
                    case 'd':
                      *((_DWORD *)a1 + 7) = v162 + 2;
                      v173 = 0;
                      goto LABEL_274;
                    case 'f':
                      *((_DWORD *)a1 + 7) = v162 + 2;
                      v266 = 12;
                      goto LABEL_526;
                    case 'k':
                      *((_DWORD *)a1 + 7) = v162 + 2;
                      if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                        goto LABEL_661;
                      JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::atomPatternCharacter((uint64_t)v415, 0x6Bu, a3, a4, a5, a6, a7, a8);
                      v168 = 1;
                      *((_BYTE *)a1 + 49) = 1;
                      goto LABEL_667;
                    case 'n':
                      *((_DWORD *)a1 + 7) = v162 + 2;
                      v266 = 10;
                      goto LABEL_526;
                    case 'q':
                      v319 = v162 + 2;
                      *((_DWORD *)a1 + 7) = v319;
                      v280 = *((unsigned __int8 *)v164 + v167);
                      if (v319 != v163 && *((_BYTE *)v164 + v319) == 123)
                      {
                        LOBYTE(v413) = 0;
                        JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::parseClassStringDisjunction((uint64_t)a1, (char *)&v413, a3, a4, a5, a6, a7, a8);
                        if ((_BYTE)v413)
                          v168 = 4;
                        else
                          v168 = 3;
                        goto LABEL_667;
                      }
                      *((_BYTE *)a1 + 8) = 25;
LABEL_687:
                      if ((JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ParseEscapeMode)2>((uint64_t)a1, v280) & 1) == 0)
                      {
                        v317 = v280;
                        goto LABEL_665;
                      }
                      goto LABEL_666;
                    case 'r':
                      *((_DWORD *)a1 + 7) = v162 + 2;
                      v266 = 13;
                      goto LABEL_526;
                    case 's':
                      *((_DWORD *)a1 + 7) = v162 + 2;
                      v168 = 1;
                      v169 = 1;
                      v170 = 0;
LABEL_265:
                      JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::atomBuiltInCharacterClass((uint64_t)v415, v169, v170, a4, a5, a6, a7, a8);
                      goto LABEL_276;
                    case 't':
                      *((_DWORD *)a1 + 7) = v162 + 2;
                      v266 = 9;
                      goto LABEL_526;
                    case 'u':
                      v316 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::UnicodeParseContext)0>((uint64_t)a1);
                      if (*((_BYTE *)a1 + 8))
                        goto LABEL_666;
                      if (v316 == -1)
                        v317 = 117;
                      else
                        v317 = v316;
                      goto LABEL_665;
                    case 'v':
                      *((_DWORD *)a1 + 7) = v162 + 2;
                      v266 = 11;
                      goto LABEL_526;
                    case 'w':
                      *((_DWORD *)a1 + 7) = v162 + 2;
                      v173 = 2;
LABEL_274:
                      JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::atomBuiltInCharacterClass((uint64_t)v415, v173, 0, a4, a5, a6, a7, a8);
                      goto LABEL_275;
                    case 'x':
                      *((_DWORD *)a1 + 7) = v162 + 2;
                      v320 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeHex((uint64_t)a1, 2);
                      if (v320 != -1)
                        goto LABEL_664;
                      if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                        goto LABEL_661;
                      v317 = 120;
                      goto LABEL_665;
                    default:
                      if ((JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ParseEscapeMode)2>((uint64_t)a1, a2) & 1) != 0)goto LABEL_666;
                      v164 = a1[2];
                      v167 = *((unsigned int *)a1 + 7);
LABEL_710:
                      v352 = v167 + 1;
LABEL_711:
                      *((_DWORD *)a1 + 7) = v352;
                      v317 = *((unsigned __int8 *)v164 + v167);
                      goto LABEL_665;
                  }
                }
                if (*((unsigned __int8 *)v164 + v162) <= 0x5Cu)
                {
                  switch(v165)
                  {
                    case '&':
                      *((_DWORD *)a1 + 7) = v162 + 1;
                      if ((_DWORD)v162 + 1 == v163)
                        goto LABEL_763;
                      if (*((_BYTE *)v164 + (v162 + 1)) == 38)
                      {
                        v304 = v162 + 2;
                        *((_DWORD *)a1 + 7) = v304;
                        if (v304 == v163 || *((_BYTE *)v164 + v304) == 38)
                        {
LABEL_765:
                          v296 = 31;
                          goto LABEL_764;
                        }
                        JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::setIntersectionOp((uint64_t)v415, a2, a3, a4, a5, a6, a7, a8);
                        goto LABEL_672;
                      }
LABEL_671:
                      *((_DWORD *)a1 + 7) = v162;
                      JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::parseClassSet(void)::{lambda(void)#1}::operator()((uint64_t)a1, (uint64_t)v415, a3, a4, a5, a6, a7, a8);
LABEL_672:
                      v13 = 48;
                      goto LABEL_280;
                    case '-':
                      *((_DWORD *)a1 + 7) = v162 + 1;
                      if ((_DWORD)v162 + 1 == v163)
                      {
LABEL_763:
                        v296 = 13;
                        goto LABEL_764;
                      }
                      if (*((_BYTE *)v164 + (v162 + 1)) == 45)
                      {
                        v305 = v162 + 2;
                        *((_DWORD *)a1 + 7) = v305;
                        if (v305 == v163 || *((_BYTE *)v164 + v305) == 45)
                          goto LABEL_765;
                        JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::setSubtractOp((uint64_t)v415, a2, a3, a4, a5, a6, a7, a8);
                        goto LABEL_672;
                      }
                      goto LABEL_671;
                    case '[':
                      *((_DWORD *)a1 + 7) = v162 + 1;
                      if ((_DWORD)v162 + 1 == v163 || *((_BYTE *)v164 + (v162 + 1)) != 94)
                      {
                        v273 = 0;
                      }
                      else
                      {
                        *((_DWORD *)a1 + 7) = v162 + 2;
                        v273 = 1;
                      }
                      JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::nestedClassBegin((uint64_t)v415, (void *)v273, a3, a4, a5, a6, a7, a8);
                      goto LABEL_672;
                  }
                }
                else if (v165 == 93)
                {
                  *((_DWORD *)a1 + 7) = v162 + 1;
                  v171 = v415[1];
                  if (LODWORD(v415[1]) == 1)
                  {
                    JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
                    v171 = 0;
                    LODWORD(v415[1]) = 0;
                  }
                  v172 = BYTE6(v415[1]);
                  if (BYTE6(v415[1]) && BYTE5(v415[1]))
                    **((_BYTE **)&v415[0] + 1) = 30;
                  if (!HIDWORD(v417))
                  {
                    if (v171 == 2)
                    {
                      JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)DWORD2(v415[1]), a3, a4, a5, a6, a7, a8);
                      JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)&v415[0] + 104), (void *)0x2D, v310, v311, v312, v313, v314, v315);
                      v172 = BYTE6(v415[1]);
                    }
                    else if (v171 == 7)
                    {
                      **((_BYTE **)&v415[0] + 1) = 31;
                    }
                    if (v172 && BYTE5(v415[1]))
                      **((_BYTE **)&v415[0] + 1) = 30;
                    JSC::Yarr::YarrPatternConstructor::atomCharacterClassEnd(*(JSC::Yarr::YarrPatternConstructor **)&v415[0]);
                    goto LABEL_287;
                  }
                  v307 = BYTE5(v415[1]);
                  v308 = (char *)v416 + 3 * HIDWORD(v417);
                  v309 = *(v308 - 1);
                  LOWORD(v308) = *(_WORD *)(v308 - 3);
                  --HIDWORD(v417);
                  WORD2(v415[1]) = (unsigned __int16)v308 & 0x1FF;
                  BYTE6(v415[1]) = v309 & 1;
                  JSC::Yarr::YarrPatternConstructor::atomCharacterClassPopNested(*(JSC::Yarr::YarrPatternConstructor **)&v415[0], a2, a3, a4, a5, a6, a7, a8);
                  LODWORD(v415[1]) = 6;
                  if (BYTE4(v415[1]) >= 2u)
                  {
                    v13 = 48;
                    if (BYTE4(v415[1]) == 2)
                    {
                      if (v307)
                        v405 = BYTE5(v415[1]) == 0;
                      else
                        v405 = 1;
                      v406 = !v405;
                      BYTE5(v415[1]) = v406;
                    }
                    goto LABEL_280;
                  }
                  BYTE5(v415[1]) |= v307;
                  goto LABEL_672;
                }
                JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::parseClassSet(void)::{lambda(void)#1}::operator()((uint64_t)a1, (uint64_t)v415, a3, a4, a5, a6, a7, a8);
LABEL_280:
                if (*v10)
                  goto LABEL_287;
              }
            case '\\':
              v18 = (JSC::Yarr::YarrPatternConstructor **)*a1;
              v19 = ((_DWORD)v15 + 1);
              *((_DWORD *)a1 + 7) = v19;
              if ((_DWORD)v19 == v14)
              {
                LOBYTE(v9) = 0;
                *v10 = 17;
                goto LABEL_140;
              }
              break;
            case ']':
              goto LABEL_498;
            case '^':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 1;
              JSC::Yarr::YarrPatternConstructor::assertionBOL((JSC::Yarr::YarrPatternConstructor *)*a1);
              goto LABEL_28;
            default:
              goto LABEL_34;
          }
          v20 = *((unsigned __int8 *)v16 + v19);
          switch(*((_BYTE *)v16 + v19))
          {
            case '-':
              if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                goto LABEL_603;
              goto LABEL_135;
            case '0':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              if ((_DWORD)v15 + 2 == v14
                || *((unsigned __int8 *)v16 + ((_DWORD)v15 + 2)) - 48 >= 0xA)
              {
                v115 = (uint64_t *)v18;
                v114 = 0;
                goto LABEL_138;
              }
              if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
              {
                v295 = 23;
                goto LABEL_557;
              }
              v341 = (uint64_t)a1;
              v342 = 2;
              goto LABEL_695;
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              a2 = *((unsigned __int8 *)v16 + v19) - 48;
              if ((_DWORD)v15 + 2 != v14)
              {
                v187 = 0;
                v188 = (_DWORD)v15 + 2;
                do
                {
                  if (*((unsigned __int8 *)v16 + v188) - 48 > 9)
                    break;
                  v364 = v188;
                  if (v187 || a2 >= 0x1999999A)
                  {
                    a2 = 0;
                    ++v188;
                    *((_DWORD *)a1 + 7) = v364 + 1;
                    v187 = 1;
                  }
                  else
                  {
                    *((_DWORD *)a1 + 7) = ++v188;
                    v365 = *((unsigned __int8 *)v16 + v364) - 48;
                    v366 = __CFADD__(v365, 10 * a2);
                    v367 = v365 + 10 * a2;
                    v187 = v366;
                    a2 = v366 ? 0 : v367;
                  }
                }
                while (v188 != v14);
                if (v187)
                  a2 = 0xFFFFFFFFLL;
              }
              if (a2 <= *((_DWORD *)a1 + 9))
              {
                v189 = *((_DWORD *)a1 + 11);
                if (v189 <= a2)
                  v189 = a2;
                *((_DWORD *)a1 + 11) = v189;
                JSC::Yarr::YarrPatternConstructor::atomBackReference((JSC::Yarr::YarrPatternConstructor *)v18, a2);
                goto LABEL_139;
              }
              *((_DWORD *)a1 + 7) = v19;
              if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
              {
                v295 = 20;
                goto LABEL_557;
              }
              if (*((unsigned __int8 *)v16 + v19) > 0x37u)
              {
                *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
LABEL_136:
                v114 = *((unsigned __int8 *)v16 + v19);
              }
              else
              {
                v341 = (uint64_t)a1;
                v342 = 3;
LABEL_695:
                v240 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::consumeOctal(v341, v342);
LABEL_430:
                v114 = v240;
              }
              goto LABEL_137;
            case 'B':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              JSC::Yarr::YarrPatternConstructor::assertionWordBoundary(v18[1], 1);
              LOBYTE(v9) = 0;
              goto LABEL_140;
            case 'D':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              LOBYTE(v9) = 1;
              v138 = (uint64_t)v18;
              v139 = 0;
              goto LABEL_385;
            case 'P':
            case 'p':
              v263 = (_DWORD)v15 + 2;
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              v264 = *((unsigned __int8 *)v16 + v19);
              if (!*((_BYTE *)a1 + 32))
                goto LABEL_589;
              if (v263 == v14 || *((_BYTE *)v16 + v263) != 123)
              {
                v295 = 25;
                goto LABEL_557;
              }
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 3;
              v265 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeUnicodePropertyExpression((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
              v13 = 48;
              if (!HIDWORD(v265))
                goto LABEL_37;
              a2 = v265;
              if (v264 != 80 || (v265 - 329) > 6)
              {
                v143 = v264 == 80;
                v142 = (JSC::Yarr::YarrPatternConstructor *)v18;
                goto LABEL_186;
              }
              goto LABEL_689;
            case 'S':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              LOBYTE(v9) = 1;
              v138 = (uint64_t)v18;
              v139 = 1;
              goto LABEL_385;
            case 'W':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              LOBYTE(v9) = 1;
              v138 = (uint64_t)v18;
              v139 = 2;
LABEL_385:
              v140 = 1;
              goto LABEL_180;
            case 'b':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              v21 = (uint64_t)v18[1];
              LOWORD(v415[0]) = 2;
              BYTE2(v415[0]) = 0;
              *(_QWORD *)((char *)v415 + 4) = 0x100000001;
              v22 = *(unsigned int *)(v21 + 12);
              if ((_DWORD)v22 != *(_DWORD *)(v21 + 8))
              {
                v23 = *(_QWORD *)v21;
                v13 = 48;
                goto LABEL_10;
              }
              v27 = (_OWORD *)WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)v415);
              v155 = *(_DWORD *)(v21 + 12);
              v156 = *(_QWORD *)v21;
              v13 = 48;
              goto LABEL_235;
            case 'c':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              if ((_DWORD)v15 + 2 == v14)
              {
                if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                {
LABEL_603:
                  v295 = 22;
LABEL_557:
                  *v10 = v295;
LABEL_139:
                  LOBYTE(v9) = 1;
LABEL_140:
                  v13 = 48;
                  goto LABEL_38;
                }
              }
              else
              {
                *((_DWORD *)a1 + 7) = (_DWORD)v15 + 3;
                v351 = *((unsigned __int8 *)v16 + ((_DWORD)v15 + 2));
                if ((v351 | 0x20u) - 97 <= 0x19)
                {
                  v114 = v351 & 0x1F;
LABEL_137:
                  v115 = (uint64_t *)v18;
                  goto LABEL_138;
                }
                if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                {
                  v295 = 24;
                  goto LABEL_557;
                }
              }
              *((_DWORD *)a1 + 7) = v19;
              v115 = (uint64_t *)v18;
              v114 = 92;
LABEL_138:
              JSC::Yarr::YarrPatternConstructor::atomPatternCharacter(v115, v114);
              goto LABEL_139;
            case 'd':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              v123 = (uint64_t)v18;
              v124 = 0;
              goto LABEL_151;
            case 'f':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              v115 = (uint64_t *)v18;
              v114 = 12;
              goto LABEL_138;
            case 'k':
              v13 = (_DWORD)v15 + 2;
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              if ((_DWORD)v15 + 2 == v14 || *((_BYTE *)v16 + v13) != 60)
                goto LABEL_787;
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 3;
              JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeGroupName(&v413, (uint64_t)a1);
              if (*((_BYTE *)a1 + 8))
                goto LABEL_600;
              if (!v414)
                goto LABEL_786;
              v9 = v413;
              if (v413)
              {
                *(_DWORD *)v413 += 2;
                v409 = v9;
                v368 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::NamedCaptureGroups::contains((WTF *)a1[11], &v409, v298);
                v15 = v368;
                if (*(_DWORD *)v9 != 2)
                {
                  *(_DWORD *)v9 -= 2;
                  if ((v368 & 1) != 0)
                    goto LABEL_753;
                  goto LABEL_782;
                }
                WTF::StringImpl::~StringImpl(v9, v297, (uint64_t)v298, v299, v300, v301, v302, v303);
                WTF::fastFree(v390, v391, v392, v393, v394, v395, v396, v397);
                if (!(_DWORD)v15)
                {
LABEL_782:
                  if (!*((_BYTE *)a1 + 48))
                  {
LABEL_786:
                    std::optional<WTF::String>::~optional((uint64_t)&v413, v297, (uint64_t)v298, v299, v300, v301, v302, v303);
LABEL_787:
                    *((_DWORD *)a1 + 7) = v13;
                    if (*((unsigned __int8 *)a1 + 32) - 1 > 1)
                    {
                      JSC::Yarr::YarrPatternConstructor::atomPatternCharacter((uint64_t *)v18, 0x6Bu);
                      LOBYTE(v9) = 1;
                      *((_BYTE *)a1 + 49) = 1;
                      goto LABEL_140;
                    }
                    goto LABEL_603;
                  }
                  if (v414)
                  {
                    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)a1 + 18, &v413, v298, v299, v300, v301, v302, v303, (uint64_t)v415);
                    if (v414)
                    {
                      JSC::Yarr::YarrPatternConstructor::atomNamedForwardReference((JSC::Yarr::YarrPatternConstructor *)v18, &v413, v398, v399, v400, v401, v402, v403);
                      goto LABEL_600;
                    }
                  }
LABEL_824:
                  std::__throw_bad_optional_access[abi:sn180100]();
LABEL_825:
                  v112 = 0;
                  *((_DWORD *)a1 + 7) = ++v150;
                  v151 = 1;
                  while (v150 != v14)
                  {
LABEL_220:
                    if (*((unsigned __int8 *)v16 + v150) - 48 > 9)
                      goto LABEL_221;
                    if (v151 || v112 >= 0x1999999A)
                      goto LABEL_825;
                    v274 = v150++;
                    *((_DWORD *)a1 + 7) = v150;
                    LODWORD(v274) = *((unsigned __int8 *)v16 + v274) - 48;
                    v275 = __CFADD__((_DWORD)v274, 10 * v112);
                    v276 = v274 + 10 * v112;
                    v151 = v275;
                    if (v275)
                      v112 = 0;
                    else
                      v112 = v276;
                  }
                  v150 = v14;
LABEL_221:
                  if (v151)
                    v112 = -1;
                  goto LABEL_223;
                }
              }
              else
              {
                v409 = 0;
                if ((JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::NamedCaptureGroups::contains((WTF *)a1[11], &v409, v298) & 1) == 0)goto LABEL_782;
              }
LABEL_753:
              if (v414)
              {
                JSC::Yarr::YarrPatternConstructor::atomNamedBackReference((JSC::Yarr::YarrPatternConstructor *)v18, &v413, v298, v299, v300, v301, v302, v303);
LABEL_600:
                std::optional<WTF::String>::~optional((uint64_t)&v413, v297, (uint64_t)v298, v299, v300, v301, v302, v303);
                goto LABEL_139;
              }
              goto LABEL_824;
            case 'n':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              v115 = (uint64_t *)v18;
              v114 = 10;
              goto LABEL_138;
            case 'q':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              v264 = *((unsigned __int8 *)v16 + v19);
LABEL_589:
              if ((JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ParseEscapeMode)0>((uint64_t)a1, v264) & 1) != 0)goto LABEL_139;
              v115 = (uint64_t *)v18;
              v114 = v264;
              goto LABEL_138;
            case 'r':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              v115 = (uint64_t *)v18;
              v114 = 13;
              goto LABEL_138;
            case 's':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              LOBYTE(v9) = 1;
              v138 = (uint64_t)v18;
              v139 = 1;
              v140 = 0;
LABEL_180:
              JSC::Yarr::YarrPatternConstructor::atomBuiltInCharacterClass(v138, v139, v140);
              goto LABEL_140;
            case 't':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              v115 = (uint64_t *)v18;
              v114 = 9;
              goto LABEL_138;
            case 'u':
              v159 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::UnicodeParseContext)0>((uint64_t)a1);
              if (*((_BYTE *)a1 + 8))
                goto LABEL_139;
              if (v159 == -1)
                v114 = 117;
              else
                v114 = v159;
              goto LABEL_137;
            case 'v':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              v115 = (uint64_t *)v18;
              v114 = 11;
              goto LABEL_138;
            case 'w':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              v123 = (uint64_t)v18;
              v124 = 2;
LABEL_151:
              JSC::Yarr::YarrPatternConstructor::atomBuiltInCharacterClass(v123, v124, 0);
              goto LABEL_139;
            case 'x':
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              v240 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeHex((uint64_t)a1, 2);
              if (v240 != -1)
                goto LABEL_430;
              if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                goto LABEL_603;
              v115 = (uint64_t *)v18;
              v114 = 120;
              goto LABEL_138;
            default:
              if (*((unsigned __int8 *)a1 + 32) - 1 <= 1 && (v20 & 0x80) == 0)
              {
                v306 = memchr("^$\\.*+?()[]{}|/", *((unsigned __int8 *)v16 + v19), 0x10uLL);
                if (!v20 || !v306)
                  goto LABEL_603;
              }
LABEL_135:
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              goto LABEL_136;
          }
        }
        if (v17 != 124)
        {
          if (v17 == 123)
          {
            v45 = ((_DWORD)v15 + 1);
            *((_DWORD *)a1 + 7) = v45;
            if ((_DWORD)v45 == v14 || *((unsigned __int8 *)v16 + v45) - 48 > 9)
              goto LABEL_301;
            v150 = (_DWORD)v15 + 2;
            *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
            v112 = *((unsigned __int8 *)v16 + v45) - 48;
            if ((_DWORD)v15 + 2 != v14)
            {
              v151 = 0;
              goto LABEL_220;
            }
            v150 = v14;
LABEL_223:
            if (v150 != v14)
            {
              if (*((_BYTE *)v16 + v150) != 44)
              {
                LODWORD(v152) = v150;
                v113 = v112;
                goto LABEL_292;
              }
              v152 = v150 + 1;
              *((_DWORD *)a1 + 7) = v152;
              if ((_DWORD)v152 != v14)
              {
                if (*((unsigned __int8 *)v16 + v152) - 48 > 9)
                  goto LABEL_231;
                v153 = v150 + 2;
                *((_DWORD *)a1 + 7) = v150 + 2;
                v113 = *((unsigned __int8 *)v16 + v152) - 48;
                if (v150 + 2 == v14)
                {
                  LODWORD(v152) = v14;
                  goto LABEL_292;
                }
                v154 = 0;
                LODWORD(v152) = v153;
                while (*((unsigned __int8 *)v16 + v152) - 48 <= 9)
                {
                  if (v154 || v113 >= 0x1999999A)
                  {
                    v113 = 0;
                    LODWORD(v152) = v152 + 1;
                    *((_DWORD *)a1 + 7) = v152;
                    v154 = 1;
                  }
                  else
                  {
                    v291 = v152;
                    LODWORD(v152) = v152 + 1;
                    *((_DWORD *)a1 + 7) = v152;
                    LODWORD(v291) = *((unsigned __int8 *)v16 + v291) - 48;
                    v292 = __CFADD__((_DWORD)v291, 10 * v113);
                    v293 = v291 + 10 * v113;
                    v154 = v292;
                    if (v292)
                      v113 = 0;
                    else
                      v113 = v293;
                  }
                  v13 = 48;
                  if ((_DWORD)v152 == v14)
                  {
                    LODWORD(v152) = v14;
                    break;
                  }
                }
                if (v154)
LABEL_231:
                  v113 = -1;
LABEL_292:
                if ((_DWORD)v152 != v14 && *((_BYTE *)v16 + v152) == 125)
                {
                  v176 = v152 + 1;
                  *((_DWORD *)a1 + 7) = v152 + 1;
                  if (v112 > v113)
                  {
                    v177 = 2;
                  }
                  else if (v112 == -1)
                  {
                    v177 = 4;
                  }
                  else
                  {
                    if (v9 == 1)
                    {
                      if (v176 == v14 || *((_BYTE *)v16 + v176) != 63)
                      {
                        v110 = 1;
                      }
                      else
                      {
                        v110 = 0;
                        *((_DWORD *)a1 + 7) = v152 + 2;
                      }
                      v111 = (JSC::Yarr::YarrPatternConstructor *)*a1;
LABEL_133:
                      JSC::Yarr::YarrPatternConstructor::quantifyAtom(v111, v112, v113, v110, a5, a6, a7, a8);
                      goto LABEL_28;
                    }
                    if (v9 == 2)
LABEL_678:
                      v177 = 6;
                    else
LABEL_772:
                      v177 = 3;
                  }
                  goto LABEL_303;
                }
              }
            }
LABEL_301:
            if (*((unsigned __int8 *)a1 + 32) - 1 < 2)
            {
              v177 = 5;
              goto LABEL_303;
            }
            goto LABEL_35;
          }
          if (v17 != 125)
          {
LABEL_34:
            LODWORD(v45) = (_DWORD)v15 + 1;
LABEL_35:
            v46 = (JSC::Yarr::YarrPatternConstructor *)*a1;
            *((_DWORD *)a1 + 7) = v45;
LABEL_36:
            JSC::Yarr::YarrPatternConstructor::atomPatternCharacter((uint64_t *)v46, *((unsigned __int8 *)v15 + (_QWORD)v16));
            goto LABEL_37;
          }
LABEL_498:
          if (*((unsigned __int8 *)a1 + 32) - 1 >= 2)
          {
            v46 = (JSC::Yarr::YarrPatternConstructor *)*a1;
            *((_DWORD *)a1 + 7) = (_DWORD)v15 + 1;
            goto LABEL_36;
          }
          v177 = 8;
LABEL_303:
          *v10 = v177;
          return;
        }
        *((_DWORD *)a1 + 7) = (_DWORD)v15 + 1;
        v83 = (JSC::Yarr::YarrPatternConstructor *)*a1;
        v84 = (*a1)[1];
        v85 = *(_QWORD *)(v84 + 16);
        v86 = *(_DWORD *)(**a1 + 4);
        if (!*(_QWORD *)(v85 + 16))
          *(_DWORD *)(v84 + 32) = v86;
        JSC::Yarr::PatternDisjunction::addNewAlternative(v85, v86, *((_BYTE *)v83 + 181));
        *((_QWORD *)v83 + 1) = v87;
        v88 = *((unsigned int *)a1 + 27);
        if (!(_DWORD)v88)
        {
          __break(0xC471u);
          JUMPOUT(0x198EF5944);
        }
        v89 = *((unsigned int *)a1 + 33);
        if (!(_DWORD)v89)
        {
          __break(0xC471u);
          JUMPOUT(0x198EF594CLL);
        }
        v90 = *(_QWORD *)(*v12 + 8 * v89 - 8);
        if (v90)
        {
          v92 = *(unsigned int *)(v90 - 4);
          v93 = (WTF::StringImpl **)(v90 + 8 * v92);
          if (*(_DWORD *)(v90 - 12))
          {
            v91 = *(WTF::StringImpl ***)(*v12 + 8 * v89 - 8);
            if ((_DWORD)v92)
            {
              v183 = 8 * v92;
              v91 = *(WTF::StringImpl ***)(*v12 + 8 * v89 - 8);
              do
              {
                if ((unint64_t)*v91 + 1 > 1)
                  goto LABEL_106;
                ++v91;
                v183 -= 8;
              }
              while (v183);
              v91 = v93;
            }
LABEL_106:
            if (v90)
              v94 = (WTF::StringImpl **)(v90 + 8 * *(unsigned int *)(v90 - 4));
            else
              v94 = 0;
            if (v94 != v91)
            {
              v271 = &a1[12][v88 - 1];
              do
              {
                WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v271, v91, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (uint64_t)v415);
                v272 = v91 + 1;
                v91 = v93;
                if (v272 != v93)
                {
                  v91 = v272;
                  do
                  {
                    if ((unint64_t)*v91 + 1 > 1)
                      goto LABEL_495;
                    ++v91;
                  }
                  while (v91 != v93);
                  v91 = v93;
                }
LABEL_495:
                ;
              }
              while (v91 != v94);
              v89 = *((unsigned int *)a1 + 33);
            }
            if (!v89)
            {
              __break(0xC471u);
              JUMPOUT(0x198EF5954);
            }
            v95 = *(WTF::StringImpl ***)(*v12 + 8 * (v89 - 1));
            if (v95)
            {
              *(_QWORD *)(*v12 + 8 * (v89 - 1)) = 0;
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v95, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              v89 = *((unsigned int *)a1 + 33);
            }
            if (v89 < 2)
            {
LABEL_28:
              LOBYTE(v9) = 0;
              goto LABEL_38;
            }
            v96 = *v12 + 8 * v89;
            v97 = *(_QWORD *)(v96 - 16);
            if (v97)
            {
              v99 = *(unsigned int *)(v97 - 4);
              v100 = (WTF::StringImpl **)(v97 + 8 * v99);
              if (*(_DWORD *)(v97 - 12))
              {
                v98 = *(WTF::StringImpl ***)(v96 - 16);
                if ((_DWORD)v99)
                {
                  v186 = 8 * v99;
                  v98 = *(WTF::StringImpl ***)(v96 - 16);
                  do
                  {
                    if ((unint64_t)*v98 + 1 > 1)
                      goto LABEL_116;
                    ++v98;
                    v186 -= 8;
                  }
                  while (v186);
                  v98 = v100;
                }
                goto LABEL_116;
              }
              v98 = (WTF::StringImpl **)(v97 + 8 * v99);
            }
            else
            {
              v98 = 0;
              v99 = 0;
            }
            v100 = (WTF::StringImpl **)(v97 + 8 * v99);
LABEL_116:
            if (v97)
              v101 = (WTF::StringImpl **)(v97 + 8 * *(unsigned int *)(v97 - 4));
            else
              v101 = 0;
            if (v101 != v98)
            {
              v407 = (uint64_t *)(v96 - 8);
              while (1)
              {
                WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v407, v98, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (uint64_t)v415);
                v277 = v98 + 1;
                v98 = v100;
                if (v277 != v100)
                {
                  v98 = v277;
                  do
                  {
                    if ((unint64_t)*v98 + 1 > 1)
                      goto LABEL_522;
                    ++v98;
                  }
                  while (v98 != v100);
                  v98 = v100;
                }
LABEL_522:
                LOBYTE(v9) = 0;
                if (v98 == v101)
                  goto LABEL_38;
              }
            }
            goto LABEL_28;
          }
          v91 = (WTF::StringImpl **)(v90 + 8 * v92);
        }
        else
        {
          v91 = 0;
          v92 = 0;
        }
        v93 = (WTF::StringImpl **)(v90 + 8 * v92);
        goto LABEL_106;
      }
      switch(*((_BYTE *)v15 + (_QWORD)v16))
      {
        case '$':
          *((_DWORD *)a1 + 7) = (_DWORD)v15 + 1;
          v21 = (*a1)[1];
          LOWORD(v415[0]) = 1;
          BYTE2(v415[0]) = 0;
          *(_QWORD *)((char *)v415 + 4) = 0x100000001;
          v22 = *(unsigned int *)(v21 + 12);
          if ((_DWORD)v22 == *(_DWORD *)(v21 + 8))
          {
            v27 = (_OWORD *)WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)v415);
            v155 = *(_DWORD *)(v21 + 12);
            v156 = *(_QWORD *)v21;
LABEL_235:
            v157 = v156 + v155 * (unint64_t)v13;
            v158 = *(_WORD *)v27;
            *(_BYTE *)(v157 + 2) = *((_BYTE *)v27 + 2);
            *(_WORD *)v157 = v158;
            *(_DWORD *)(v157 + 4) = *((_DWORD *)v27 + 1);
            *(_DWORD *)(v157 + 8) = *((_DWORD *)v27 + 2);
            v26 = (_OWORD *)(v157 + 16);
          }
          else
          {
            v23 = *(_QWORD *)v21;
LABEL_10:
            v24 = v23 + v22 * (unint64_t)v13;
            v25 = v415[0];
            *(_BYTE *)(v24 + 2) = BYTE2(v415[0]);
            *(_WORD *)v24 = v25;
            *(_QWORD *)(v24 + 4) = 0x100000001;
            v26 = (_OWORD *)(v24 + 16);
            v27 = v415;
          }
          LOBYTE(v9) = 0;
          v28 = v27[2];
          *v26 = v27[1];
          v26[1] = v28;
          ++*(_DWORD *)(v21 + 12);
          goto LABEL_38;
        case '%':
        case '&':
        case '\'':
        case ',':
        case '-':
          goto LABEL_34;
        case '(':
          *((_DWORD *)a1 + 7) = (_DWORD)v15 + 1;
          v412 = 0;
          if ((_DWORD)v15 + 1 == v14 || *((_BYTE *)v16 + ((_DWORD)v15 + 1)) != 63)
          {
            v30 = (JSC::Yarr::YarrPatternConstructor *)*a1;
            v31 = 1;
            goto LABEL_18;
          }
          *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
          if ((_DWORD)v15 + 2 == v14)
          {
            *v10 = 10;
            goto LABEL_28;
          }
          *((_DWORD *)a1 + 7) = (_DWORD)v15 + 3;
          v29 = *((unsigned __int8 *)v16 + ((_DWORD)v15 + 2));
          switch(v29)
          {
            case ':':
              v30 = (JSC::Yarr::YarrPatternConstructor *)*a1;
              v31 = 0;
LABEL_18:
              JSC::Yarr::YarrPatternConstructor::atomParenthesesSubpatternBegin((uint64_t)v30, v31, 0, 0, a5, a6, a7, a8);
LABEL_19:
              v32 = 0;
              ++*((_DWORD *)a1 + 10);
              goto LABEL_20;
            case '!':
              v32 = 1;
              JSC::Yarr::YarrPatternConstructor::atomParentheticalAssertionBegin(*a1, 1, 0);
LABEL_247:
              v412 = 1;
LABEL_20:
              v33 = *((unsigned int *)a1 + 17);
              if ((_DWORD)v33 == *((_DWORD *)a1 + 16))
              {
                WTF::Vector<JSC::ParserState,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserState>(v408, (unint64_t)&v412);
              }
              else
              {
                *((_BYTE *)a1[7] + v33) = v32;
                *((_DWORD *)a1 + 17) = v33 + 1;
              }
              v34 = *((unsigned int *)a1 + 33);
              if (!(_DWORD)v34)
              {
                __break(0xC471u);
                JUMPOUT(0x198EF5904);
              }
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)v415, &a1[15][v34 - 1]);
              v413 = 0;
              v40 = *((unsigned int *)a1 + 27);
              if ((_DWORD)v40 == *((_DWORD *)a1 + 26))
              {
                v116 = (uint64_t *)WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v40 + 1, (unint64_t)&v413, v35, v36, v37, v38, v39);
                v119 = *((unsigned int *)a1 + 27);
                v120 = a1[12];
                v120[v119] = 0;
                v121 = *v116;
                *v116 = 0;
                v120[v119] = v121;
                v122 = v413;
                ++*((_DWORD *)a1 + 27);
                if (v122)
                {
                  v207 = *((unsigned int *)v122 - 1);
                  if ((_DWORD)v207)
                  {
                    v208 = (WTF::StringImpl **)v122;
                    do
                    {
                      v209 = *v208;
                      if (*v208 != (WTF::StringImpl *)-1)
                      {
                        *v208 = 0;
                        if (v209)
                        {
                          if (*(_DWORD *)v209 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v209, v117, v118, v35, v36, v37, v38, v39);
                            WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
                          }
                          else
                          {
                            *(_DWORD *)v209 -= 2;
                          }
                        }
                      }
                      ++v208;
                      --v207;
                    }
                    while (v207);
                  }
                  WTF::fastFree((unint64_t)v122 - 16, v117, v118, v35, v36, v37, v38, v39);
                }
              }
              else
              {
                a1[12][v40] = 0;
                ++*((_DWORD *)a1 + 27);
              }
              v41 = *((unsigned int *)a1 + 33);
              if ((_DWORD)v41 == *((_DWORD *)a1 + 32))
              {
                v43 = (uint64_t *)WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v41 + 1, (unint64_t)v415, v35, v36, v37, v38, v39);
                v42 = &a1[15][*((unsigned int *)a1 + 33)];
              }
              else
              {
                v42 = (uint64_t *)(*v12 + 8 * v41);
                v43 = (uint64_t *)v415;
              }
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v42, v43);
              ++*((_DWORD *)a1 + 33);
              v44 = *(_QWORD *)&v415[0];
              if (*(_QWORD *)&v415[0])
              {
                v196 = *(unsigned int *)(*(_QWORD *)&v415[0] - 4);
                if ((_DWORD)v196)
                {
                  v197 = *(WTF::StringImpl ***)&v415[0];
                  do
                  {
                    v198 = *v197;
                    if (*v197 != (WTF::StringImpl *)-1)
                    {
                      *v197 = 0;
                      if (v198)
                      {
                        if (*(_DWORD *)v198 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v198, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v199, v200, v201, v202, v203, v204, v205, v206);
                        }
                        else
                        {
                          *(_DWORD *)v198 -= 2;
                        }
                      }
                    }
                    ++v197;
                    --v196;
                  }
                  while (v196);
                }
                WTF::fastFree(v44 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
              }
              goto LABEL_28;
            case '=':
              JSC::Yarr::YarrPatternConstructor::atomParentheticalAssertionBegin(*a1, 0, 0);
              v32 = 1;
              goto LABEL_247;
          }
          if (v29 != 60)
          {
            *v10 = 10;
            goto LABEL_19;
          }
          JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeGroupName(&v413, (uint64_t)a1);
          if (*((_BYTE *)a1 + 8))
            goto LABEL_458;
          if (v414)
          {
            if (*((_BYTE *)a1 + 49))
            {
              v333 = 21;
            }
            else
            {
              v251 = v413;
              if (v413)
                *(_DWORD *)v413 += 2;
              v411 = v251;
              JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::NamedCaptureGroups::add((uint64_t)v415, (uint64_t)(a1 + 11), &v411, v246, v247, v248, v249, v250);
              v252 = v411;
              v411 = 0;
              if (v252)
              {
                if (*(_DWORD *)v252 == 2)
                {
                  WTF::StringImpl::~StringImpl(v252, v244, v245, v246, v247, v248, v249, v250);
                  WTF::fastFree(v283, v284, v285, v286, v287, v288, v289, v290);
                }
                else
                {
                  *(_DWORD *)v252 -= 2;
                }
              }
              if (LOBYTE(v415[1]))
              {
                v253 = (JSC::Yarr::YarrPatternConstructor *)*a1;
                LOBYTE(v409) = 0;
                v410 = 0;
                if (v414)
                {
                  v254 = v413;
                  if (v413)
                    *(_DWORD *)v413 += 2;
                  v409 = v254;
                  v255 = 1;
                  v410 = 1;
                }
                else
                {
                  v255 = 0;
                  v254 = v409;
                }
                JSC::Yarr::YarrPatternConstructor::atomParenthesesSubpatternBegin((uint64_t)v253, 1, v254, v255, v247, v248, v249, v250);
                std::optional<WTF::String>::~optional((uint64_t)&v409, v256, v257, v258, v259, v260, v261, v262);
                goto LABEL_458;
              }
              v333 = 12;
            }
            *v10 = v333;
LABEL_458:
            std::optional<WTF::String>::~optional((uint64_t)&v413, v244, v245, v246, v247, v248, v249, v250);
            goto LABEL_19;
          }
          v321 = *((unsigned int *)a1 + 7);
          if ((_DWORD)v321 == *((_DWORD *)a1 + 6))
            goto LABEL_755;
          v322 = *((unsigned __int8 *)a1[2] + v321);
          if (v322 == 61)
          {
            v323 = 0;
          }
          else
          {
            if (v322 != 33)
            {
LABEL_755:
              *v10 = 11;
              v13 = 48;
              goto LABEL_458;
            }
            v323 = 1;
          }
          *((_DWORD *)a1 + 7) = v321 + 1;
          JSC::Yarr::YarrPatternConstructor::atomParentheticalAssertionBegin(*a1, v323, 1);
          v32 = 2;
          v412 = 2;
          std::optional<WTF::String>::~optional((uint64_t)&v413, v324, v325, v326, v327, v328, v329, v330);
          v13 = 48;
          goto LABEL_20;
        case ')':
          *((_DWORD *)a1 + 7) = (_DWORD)v15 + 1;
          if (!*((_DWORD *)a1 + 17))
          {
            v177 = 9;
            goto LABEL_303;
          }
          JSC::Yarr::YarrPatternConstructor::atomParenthesesEnd((JSC::Yarr::YarrPatternConstructor *)*a1);
          v64 = *((unsigned int *)a1 + 27);
          if (!(_DWORD)v64)
          {
            __break(0xC471u);
            JUMPOUT(0x198EF590CLL);
          }
          v65 = *((unsigned int *)a1 + 33);
          if (!(_DWORD)v65)
          {
            __break(0xC471u);
            JUMPOUT(0x198EF5914);
          }
          v66 = *(_QWORD *)(*v12 + 8 * v65 - 8);
          if (!v66)
          {
            v67 = 0;
            v68 = 0;
LABEL_80:
            v69 = (WTF::StringImpl **)(v66 + 8 * v68);
            goto LABEL_81;
          }
          v68 = *(unsigned int *)(v66 - 4);
          v69 = (WTF::StringImpl **)(v66 + 8 * v68);
          if (!*(_DWORD *)(v66 - 12))
          {
            v67 = (WTF::StringImpl **)(v66 + 8 * v68);
            goto LABEL_80;
          }
          v67 = *(WTF::StringImpl ***)(*v12 + 8 * v65 - 8);
          if ((_DWORD)v68)
          {
            v181 = 8 * v68;
            v67 = *(WTF::StringImpl ***)(*v12 + 8 * v65 - 8);
            while ((unint64_t)*v67 + 1 <= 1)
            {
              ++v67;
              v181 -= 8;
              if (!v181)
              {
                v67 = v69;
                break;
              }
            }
          }
LABEL_81:
          if (v66)
            v70 = (WTF::StringImpl **)(v66 + 8 * *(unsigned int *)(v66 - 4));
          else
            v70 = 0;
          if (v70 != v67)
          {
            v267 = &a1[12][v64 - 1];
            do
            {
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v267, v67, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (uint64_t)v415);
              v268 = v67 + 1;
              v67 = v69;
              if (v268 != v69)
              {
                v67 = v268;
                while ((unint64_t)*v67 + 1 <= 1)
                {
                  if (++v67 == v69)
                  {
                    v67 = v69;
                    break;
                  }
                }
              }
            }
            while (v67 != v70);
            v65 = *((unsigned int *)a1 + 33);
          }
          if (v65 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198EF591CLL);
          }
          v71 = *((unsigned int *)a1 + 27);
          if (!(_DWORD)v71)
          {
            __break(0xC471u);
            JUMPOUT(0x198EF5924);
          }
          v72 = *(_QWORD *)(*v11 + 8 * v71 - 8);
          if (!v72)
          {
            v73 = 0;
            v74 = 0;
LABEL_88:
            v75 = (WTF::StringImpl **)(v72 + 8 * v74);
            goto LABEL_89;
          }
          v74 = *(unsigned int *)(v72 - 4);
          v75 = (WTF::StringImpl **)(v72 + 8 * v74);
          if (!*(_DWORD *)(v72 - 12))
          {
            v73 = (WTF::StringImpl **)(v72 + 8 * v74);
            goto LABEL_88;
          }
          v73 = *(WTF::StringImpl ***)(*v11 + 8 * v71 - 8);
          if ((_DWORD)v74)
          {
            v182 = 8 * v74;
            v73 = *(WTF::StringImpl ***)(*v11 + 8 * v71 - 8);
            while ((unint64_t)*v73 + 1 <= 1)
            {
              ++v73;
              v182 -= 8;
              if (!v182)
              {
                v73 = v75;
                break;
              }
            }
          }
LABEL_89:
          if (v72)
            v76 = (WTF::StringImpl **)(v72 + 8 * *(unsigned int *)(v72 - 4));
          else
            v76 = 0;
          if (v76 != v73)
          {
            v269 = &a1[15][v65 - 2];
            do
            {
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v269, v73, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (uint64_t)v415);
              v270 = v73 + 1;
              v73 = v75;
              if (v270 != v75)
              {
                v73 = v270;
                while ((unint64_t)*v73 + 1 <= 1)
                {
                  if (++v73 == v75)
                  {
                    v73 = v75;
                    break;
                  }
                }
              }
            }
            while (v73 != v76);
            v71 = *((unsigned int *)a1 + 27);
          }
          if (!v71)
          {
            __break(0xC471u);
            JUMPOUT(0x198EF592CLL);
          }
          v77 = v71 - 1;
          v78 = *(_QWORD *)(*v11 + 8 * (v71 - 1));
          if (v78)
          {
            v218 = *(unsigned int *)(v78 - 4);
            if ((_DWORD)v218)
            {
              v219 = *(WTF::StringImpl ***)(*v11 + 8 * (v71 - 1));
              do
              {
                v220 = *v219;
                if (*v219 != (WTF::StringImpl *)-1)
                {
                  *v219 = 0;
                  if (v220)
                  {
                    if (*(_DWORD *)v220 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v220, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v221, v222, v223, v224, v225, v226, v227, v228);
                    }
                    else
                    {
                      *(_DWORD *)v220 -= 2;
                    }
                  }
                }
                ++v219;
                --v218;
              }
              while (v218);
            }
            WTF::fastFree(v78 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
          *((_DWORD *)a1 + 27) = v77;
          v79 = *((unsigned int *)a1 + 33);
          if (!(_DWORD)v79)
          {
            __break(0xC471u);
            JUMPOUT(0x198EF5934);
          }
          v80 = v79 - 1;
          v81 = *(_QWORD *)(*v12 + 8 * (v79 - 1));
          if (v81)
          {
            v229 = *(unsigned int *)(v81 - 4);
            if ((_DWORD)v229)
            {
              v230 = *(WTF::StringImpl ***)(*v12 + 8 * v80);
              do
              {
                v231 = *v230;
                if (*v230 != (WTF::StringImpl *)-1)
                {
                  *v230 = 0;
                  if (v231)
                  {
                    if (*(_DWORD *)v231 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v231, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v232, v233, v234, v235, v236, v237, v238, v239);
                    }
                    else
                    {
                      *(_DWORD *)v231 -= 2;
                    }
                  }
                }
                ++v230;
                --v229;
              }
              while (v229);
            }
            WTF::fastFree(v81 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
          *((_DWORD *)a1 + 33) = v80;
          v82 = *((unsigned int *)a1 + 17);
          if (!(_DWORD)v82)
          {
            __break(0xC471u);
            JUMPOUT(0x198EF593CLL);
          }
          LODWORD(v9) = *((unsigned __int8 *)a1[7] + v82 - 1);
          *((_DWORD *)a1 + 17) = v82 - 1;
          if (!(_DWORD)v9)
            goto LABEL_37;
          if ((_DWORD)v9 != 2)
          {
            if (!*((_BYTE *)a1 + 32))
              goto LABEL_37;
            goto LABEL_28;
          }
LABEL_38:
          if (*v10)
            return;
          continue;
        case '*':
          v102 = (_DWORD)v15 + 1;
          *((_DWORD *)a1 + 7) = (_DWORD)v15 + 1;
          v103 = v9;
          if (v9 != 1)
            goto LABEL_677;
          if (v102 == v14 || *((_BYTE *)v16 + v102) != 63)
          {
            v104 = 1;
          }
          else
          {
            *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
            v104 = 2;
          }
          v105 = (*a1)[1];
          v106 = *(_DWORD *)(v105 + 12);
          if (!v106)
          {
            __break(0xC471u);
            JUMPOUT(0x198EF595CLL);
          }
          v107 = v106 - 1;
          if (*(_BYTE *)(*(_QWORD *)v105 + v107 * (unint64_t)v13) == 8)
            goto LABEL_690;
          LOBYTE(v9) = 0;
          v108 = *(_QWORD *)v105 + v107 * (unint64_t)v13;
          *(_QWORD *)(v108 + 4) = 0xFFFFFFFF00000000;
          goto LABEL_127;
        case '+':
          v109 = (_DWORD)v15 + 1;
          *((_DWORD *)a1 + 7) = (_DWORD)v15 + 1;
          v103 = v9;
          if (v9 != 1)
            goto LABEL_677;
          if (v109 == v14 || *((_BYTE *)v16 + v109) != 63)
          {
            v110 = 1;
          }
          else
          {
            v110 = 0;
            *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
          }
          v111 = (JSC::Yarr::YarrPatternConstructor *)*a1;
          v112 = 1;
          v113 = -1;
          goto LABEL_133;
        case '.':
          *((_DWORD *)a1 + 7) = (_DWORD)v15 + 1;
          v142 = (JSC::Yarr::YarrPatternConstructor *)*a1;
          LODWORD(a2) = 3;
          v143 = 0;
LABEL_186:
          JSC::Yarr::YarrPatternConstructor::atomBuiltInCharacterClass((uint64_t)v142, a2, v143);
          goto LABEL_37;
        default:
          if (v17 != 63)
            goto LABEL_34;
          v125 = (_DWORD)v15 + 1;
          *((_DWORD *)a1 + 7) = (_DWORD)v15 + 1;
          v103 = v9;
          if (v9 == 1)
          {
            if (v125 != v14 && *((_BYTE *)v16 + v125) == 63)
            {
              *((_DWORD *)a1 + 7) = (_DWORD)v15 + 2;
              v104 = 2;
            }
            else
            {
              v104 = 1;
            }
            v105 = (*a1)[1];
            v126 = *(_DWORD *)(v105 + 12);
            if (!v126)
            {
              __break(0xC471u);
              JUMPOUT(0x198EF5964);
            }
            v107 = v126 - 1;
            if (*(_BYTE *)(*(_QWORD *)v105 + v107 * (unint64_t)v13) == 8)
            {
LABEL_690:
              LOBYTE(v9) = 0;
              *(_DWORD *)(v105 + 12) = v107;
            }
            else
            {
              LOBYTE(v9) = 0;
              v108 = *(_QWORD *)v105 + v107 * (unint64_t)v13;
              *(_QWORD *)(v108 + 4) = 0x100000000;
LABEL_127:
              *(_BYTE *)(v108 + 2) = v104;
            }
            goto LABEL_38;
          }
LABEL_677:
          if (v103 == 2)
            goto LABEL_678;
          goto LABEL_772;
      }
    }
    break;
  }
  if (*((_DWORD *)a1 + 17))
  {
    v177 = 7;
    goto LABEL_303;
  }
}

void JSC::Yarr::YarrPatternConstructor::disjunction(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_DWORD *)(v3 + 4);
  if (!*(_QWORD *)(v4 + 16))
    *(_DWORD *)(v2 + 32) = v5;
  JSC::Yarr::PatternDisjunction::addNewAlternative(v4, v5, *((_BYTE *)a1 + 181));
  a1[1] = v6;
}

__n128 JSC::Yarr::YarrPatternConstructor::assertionBOL(JSC::Yarr::YarrPatternConstructor *this)
{
  uint64_t v1;
  unsigned int v2;
  __n128 *v3;
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  __n128 result;
  __n128 v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  char v12;
  uint64_t v13;

  v1 = *((_QWORD *)this + 1);
  v2 = *(_DWORD *)(v1 + 12);
  if (!v2)
  {
    if (*((_BYTE *)this + 180) || *((_BYTE *)this + 181))
    {
      v2 = 0;
    }
    else
    {
      *(_BYTE *)(v1 + 37) |= 4u;
      *(_BYTE *)(*((_QWORD *)this + 1) + 37) |= 8u;
      **(_BYTE **)this |= 2u;
      v1 = *((_QWORD *)this + 1);
      v2 = *(_DWORD *)(v1 + 12);
    }
  }
  LOBYTE(v11) = 0;
  v12 = 0;
  v13 = 0x100000001;
  HIBYTE(v11) = 4 * (*((_BYTE *)this + 181) & 1);
  if (v2 == *(_DWORD *)(v1 + 8))
  {
    v3 = (__n128 *)WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1, v2 + 1, (unint64_t)&v11);
    v4 = *(_QWORD *)v1 + 48 * *(unsigned int *)(v1 + 12);
    v5 = v3->n128_u16[0];
    *(_BYTE *)(v4 + 2) = v3->n128_u8[2];
    *(_WORD *)v4 = v5;
    *(_DWORD *)(v4 + 4) = v3->n128_u32[1];
    *(_DWORD *)(v4 + 8) = v3->n128_u32[2];
    v6 = v4 + 16;
  }
  else
  {
    v9 = *(_QWORD *)v1 + 48 * v2;
    v10 = v11;
    *(_BYTE *)(v9 + 2) = v12;
    *(_WORD *)v9 = v10;
    *(_QWORD *)(v9 + 4) = 0x100000001;
    v6 = v9 + 16;
    v3 = (__n128 *)&v11;
  }
  result = v3[1];
  v8 = v3[2];
  *(__n128 *)v6 = result;
  *(__n128 *)(v6 + 16) = v8;
  ++*(_DWORD *)(v1 + 12);
  return result;
}

__n128 JSC::Yarr::YarrPatternConstructor::assertionEOL(JSC::Yarr::YarrPatternConstructor *this)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  __int16 *v6;
  __n128 result;
  __int128 v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  char v12;
  uint64_t v13;

  v11 = 1;
  v12 = 0;
  v13 = 0x100000001;
  v2 = *((unsigned int *)this + 3);
  if ((_DWORD)v2 == *((_DWORD *)this + 2))
  {
    v6 = (__int16 *)WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v2 + 1, (unint64_t)&v11);
    v9 = *(_QWORD *)this + 48 * *((unsigned int *)this + 3);
    v10 = *v6;
    *(_BYTE *)(v9 + 2) = *((_BYTE *)v6 + 2);
    *(_WORD *)v9 = v10;
    *(_DWORD *)(v9 + 4) = *((_DWORD *)v6 + 1);
    *(_DWORD *)(v9 + 8) = *((_DWORD *)v6 + 2);
    v5 = v9 + 16;
  }
  else
  {
    v3 = *(_QWORD *)this + 48 * v2;
    v4 = v11;
    *(_BYTE *)(v3 + 2) = v12;
    *(_WORD *)v3 = v4;
    *(_QWORD *)(v3 + 4) = 0x100000001;
    v5 = v3 + 16;
    v6 = &v11;
  }
  result = *((__n128 *)v6 + 1);
  v8 = *((_OWORD *)v6 + 2);
  *(__n128 *)v5 = result;
  *(_OWORD *)(v5 + 16) = v8;
  ++*((_DWORD *)this + 3);
  return result;
}

void JSC::Yarr::YarrPatternConstructor::atomBuiltInCharacterClass(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int16 v16;
  JSC::Yarr::YarrPattern *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  JSC::Yarr::YarrPattern *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  JSC::Yarr::CharacterClass **v30;
  char v31;
  char v32;
  uint64_t v33;
  JSC::Yarr::CharacterClass **v34;
  JSC::Yarr::CharacterClass **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSC::Yarr::CharacterClass **v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  __int16 v66;
  __int128 v67;
  WTF::StringImpl *v68;
  char v69;
  _BYTE v70[12];
  unsigned int v71;
  __int128 v72;
  __int128 v73;

  switch(a2)
  {
    case 0:
      v6 = *(_QWORD *)(a1 + 8);
      JSC::Yarr::YarrPattern::digitsCharacterClass(*(JSC::Yarr::YarrPattern **)a1);
      goto LABEL_3;
    case 1:
      v6 = *(_QWORD *)(a1 + 8);
      v7 = JSC::Yarr::YarrPattern::spacesCharacterClass(*(JSC::Yarr::YarrPattern **)a1);
      goto LABEL_3;
    case 2:
      v26 = *(JSC::Yarr::YarrPattern **)a1;
      v27 = *(_WORD *)(*(_QWORD *)a1 + 2);
      if ((v27 & 0x60) != 0 && (v27 & 4) != 0)
      {
        v6 = *(_QWORD *)(a1 + 8);
        JSC::Yarr::YarrPattern::wordUnicodeIgnoreCaseCharCharacterClass(v26);
        goto LABEL_21;
      }
      v6 = *(_QWORD *)(a1 + 8);
      JSC::Yarr::YarrPattern::wordcharCharacterClass(v26);
LABEL_3:
      v8 = *(_BYTE *)(a1 + 181);
      v70[0] = 4;
      if (a3)
        v9 = 2;
      else
        v9 = 0;
      *(_WORD *)&v70[1] = v9 & 0xFB | (4 * (v8 & 1));
      *(_QWORD *)&v72 = v7;
      *(_QWORD *)&v70[4] = 0x100000001;
      v10 = *(unsigned int *)(v6 + 12);
      if ((_DWORD)v10 == *(_DWORD *)(v6 + 8))
      {
        v15 = WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v10 + 1, (unint64_t)v70);
        v11 = *(_QWORD *)v6 + 48 * *(unsigned int *)(v6 + 12);
        v16 = *(_WORD *)v15;
        *(_BYTE *)(v11 + 2) = *(_BYTE *)(v15 + 2);
        *(_WORD *)v11 = v16;
        *(_DWORD *)(v11 + 4) = *(_DWORD *)(v15 + 4);
        *(_DWORD *)(v11 + 8) = *(_DWORD *)(v15 + 8);
        v13 = *(_OWORD *)(v15 + 16);
        v14 = *(_OWORD *)(v15 + 32);
        goto LABEL_8;
      }
      goto LABEL_7;
    case 3:
      v17 = *(JSC::Yarr::YarrPattern **)a1;
      v18 = *(_QWORD *)(a1 + 8);
      if ((*(_WORD *)(*(_QWORD *)a1 + 2) & 0x10) == 0)
      {
        JSC::Yarr::YarrPattern::newlineCharacterClass(v17);
        v19 = *(_BYTE *)(a1 + 181);
        v70[0] = 4;
        *(_WORD *)&v70[1] = (4 * (v19 & 1)) | 2;
        *(_QWORD *)&v72 = v20;
        *(_QWORD *)&v70[4] = 0x100000001;
        v21 = *(unsigned int *)(v18 + 12);
        if ((_DWORD)v21 == *(_DWORD *)(v18 + 8))
        {
          v28 = WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18, v21 + 1, (unint64_t)v70);
          v22 = *(_QWORD *)v18 + 48 * *(unsigned int *)(v18 + 12);
          v29 = *(_WORD *)v28;
          *(_BYTE *)(v22 + 2) = *(_BYTE *)(v28 + 2);
          *(_WORD *)v22 = v29;
          *(_DWORD *)(v22 + 4) = *(_DWORD *)(v28 + 4);
          *(_DWORD *)(v22 + 8) = *(_DWORD *)(v28 + 8);
          v24 = *(_OWORD *)(v28 + 16);
          v25 = *(_OWORD *)(v28 + 32);
          goto LABEL_15;
        }
LABEL_14:
        v22 = *(_QWORD *)v18 + 48 * v21;
        v23 = *(_WORD *)v70;
        *(_BYTE *)(v22 + 2) = v70[2];
        *(_WORD *)v22 = v23;
        *(_QWORD *)(v22 + 4) = 0x100000001;
        v24 = v72;
        v25 = v73;
LABEL_15:
        *(_OWORD *)(v22 + 16) = v24;
        *(_OWORD *)(v22 + 32) = v25;
        ++*(_DWORD *)(v18 + 12);
        return;
      }
      v34 = JSC::Yarr::YarrPattern::anyCharacterClass(v17);
      LOBYTE(v21) = *(_BYTE *)(a1 + 181);
      v70[0] = 4;
      *(_WORD *)&v70[1] = (4 * (v21 & 1));
      *(_QWORD *)&v72 = v34;
      *(_QWORD *)&v70[4] = 0x100000001;
      LODWORD(v21) = *(_DWORD *)(v18 + 12);
      if ((_DWORD)v21 != *(_DWORD *)(v18 + 8))
        goto LABEL_14;
      v33 = v18;
LABEL_28:
      WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::PatternTerm>(v33, (unint64_t)v70);
      return;
    default:
      if ((a2 - 329) <= 6
        && (v35 = JSC::Yarr::YarrPattern::unicodeCharacterClassFor(*(_QWORD *)a1, a2), *((_DWORD *)v35 + 3)))
      {
        v40 = v35;
        LOBYTE(v68) = 0;
        v69 = 0;
        JSC::Yarr::YarrPatternConstructor::atomParenthesesSubpatternBegin(a1, 0, v68, 0, v36, v37, v38, v39);
        std::optional<WTF::String>::~optional((uint64_t)&v68, v41, v42, v43, v44, v45, v46, v47);
        v48 = *((unsigned int *)v40 + 3);
        if ((_DWORD)v48)
        {
          v49 = 0;
          v50 = *((unsigned int *)v40 + 3);
          do
          {
            if (v49)
            {
              JSC::Yarr::YarrPatternConstructor::disjunction((uint64_t *)a1);
              v50 = *((unsigned int *)v40 + 3);
            }
            if (v49 >= v50)
            {
              __break(0xC471u);
              JUMPOUT(0x198EF653CLL);
            }
            WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v70, (uint64_t)*v40 + 16 * v49);
            v58 = *(unsigned int **)v70;
            if (v71)
            {
              v59 = 4 * v71;
              do
              {
                v60 = *v58++;
                JSC::Yarr::YarrPatternConstructor::atomPatternCharacter((uint64_t *)a1, v60);
                v59 -= 4;
              }
              while (v59);
              v58 = *(unsigned int **)v70;
            }
            if (v58)
            {
              memset(v70, 0, sizeof(v70));
              WTF::fastFree((unint64_t)v58, v51, v52, v53, v54, v55, v56, v57);
            }
            ++v49;
            v50 = *((unsigned int *)v40 + 3);
          }
          while (v49 < v50);
        }
        if (*((_DWORD *)v40 + 7) || *((_DWORD *)v40 + 11) || *((_DWORD *)v40 + 15) || *((_DWORD *)v40 + 19))
        {
          if (v48)
            JSC::Yarr::YarrPatternConstructor::disjunction((uint64_t *)a1);
          v61 = *(_QWORD *)(a1 + 8);
          v62 = *(_BYTE *)(a1 + 181);
          v70[0] = 4;
          if (a3)
            v63 = 2;
          else
            v63 = 0;
          *(_WORD *)&v70[1] = v63 & 0xFB | (4 * (v62 & 1));
          *(_QWORD *)&v72 = v40;
          *(_QWORD *)&v70[4] = 0x100000001;
          v64 = *(_DWORD *)(v61 + 12);
          if (v64 == *(_DWORD *)(v61 + 8))
          {
            WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::PatternTerm>(v61, (unint64_t)v70);
          }
          else
          {
            v65 = *(_QWORD *)v61 + 48 * v64;
            v66 = *(_WORD *)v70;
            *(_BYTE *)(v65 + 2) = v70[2];
            *(_WORD *)v65 = v66;
            *(_QWORD *)(v65 + 4) = 0x100000001;
            v67 = v73;
            *(_OWORD *)(v65 + 16) = v72;
            *(_OWORD *)(v65 + 32) = v67;
            ++*(_DWORD *)(v61 + 12);
          }
        }
        JSC::Yarr::YarrPatternConstructor::atomParenthesesEnd((JSC::Yarr::YarrPatternConstructor *)a1);
      }
      else
      {
        v6 = *(_QWORD *)(a1 + 8);
        v30 = JSC::Yarr::YarrPattern::unicodeCharacterClassFor(*(_QWORD *)a1, a2);
LABEL_21:
        v31 = *(_BYTE *)(a1 + 181);
        v70[0] = 4;
        if (a3)
          v32 = 2;
        else
          v32 = 0;
        *(_WORD *)&v70[1] = v32 & 0xFB | (4 * (v31 & 1));
        *(_QWORD *)&v72 = v30;
        *(_QWORD *)&v70[4] = 0x100000001;
        LODWORD(v10) = *(_DWORD *)(v6 + 12);
        if ((_DWORD)v10 == *(_DWORD *)(v6 + 8))
        {
          v33 = v6;
          goto LABEL_28;
        }
LABEL_7:
        v11 = *(_QWORD *)v6 + 48 * v10;
        v12 = *(_WORD *)v70;
        *(_BYTE *)(v11 + 2) = v70[2];
        *(_WORD *)v11 = v12;
        *(_QWORD *)(v11 + 4) = 0x100000001;
        v13 = v72;
        v14 = v73;
LABEL_8:
        *(_OWORD *)(v11 + 16) = v13;
        *(_OWORD *)(v11 + 32) = v14;
        ++*(_DWORD *)(v6 + 12);
      }
      return;
  }
}

double JSC::Yarr::YarrPatternConstructor::atomPatternCharacter(uint64_t *a1, unsigned int a2)
{
  __int16 v2;
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int16 v12;
  BOOL v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::Yarr::CharacterClass *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  __int16 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  __int16 v40;
  __int128 v41;
  JSC::Yarr::CharacterClass *v43;
  __int16 v44;
  char v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;

  v2 = *(_WORD *)(*a1 + 2);
  if ((v2 & 4) != 0 && ((v3 = v2 & 0x60, a2 > 0x7F) || v3))
  {
    v14 = v3 == 0;
    if (v3)
      v15 = &JSC::Yarr::unicodeRangeInfo;
    else
      v15 = &JSC::Yarr::ucs2RangeInfo;
    v16 = 540;
    if (v14)
      v16 = 448;
    while (1)
    {
      do
      {
        v17 = v16;
        v16 >>= 1;
      }
      while (v15[4 * v16] > a2);
      v18 = (uint64_t)&v15[4 * v16];
      if (*(_DWORD *)(v18 + 4) >= a2)
        break;
      v15 = (_DWORD *)(v18 + 16);
      v16 = v17 + ~v16;
    }
    if (*(_DWORD *)(v18 + 12))
    {
      JSC::Yarr::CharacterClassConstructor::putUnicodeIgnoreCase((unint64_t *)a1[13], a2, v18);
      JSC::Yarr::CharacterClassConstructor::charClass((JSC::Yarr::CharacterClassConstructor *)&v43, a1[13]);
      v26 = a1[1];
      v27 = v43;
      v28 = *((_BYTE *)a1 + 181);
      LOBYTE(v44) = 4;
      HIBYTE(v44) = 4 * (v28 & 1);
      *(_QWORD *)&v47 = v43;
      v45 = 0;
      v46 = 0x100000001;
      v29 = *(_DWORD *)(v26 + 12);
      if (v29 == *(_DWORD *)(v26 + 8))
      {
        WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::PatternTerm>(v26, (unint64_t)&v44);
      }
      else
      {
        v30 = *(_QWORD *)v26 + 48 * v29;
        v31 = v44;
        *(_BYTE *)(v30 + 2) = v45;
        *(_WORD *)v30 = v31;
        *(_QWORD *)(v30 + 4) = 0x100000001;
        v32 = v48;
        *(_OWORD *)(v30 + 16) = v47;
        *(_OWORD *)(v30 + 32) = v32;
        ++*(_DWORD *)(v26 + 12);
      }
      v33 = *a1;
      v34 = *(unsigned int *)(*a1 + 84);
      if ((_DWORD)v34 == *(_DWORD *)(*a1 + 80))
      {
        WTF::Vector<std::unique_ptr<JSC::Yarr::CharacterClass>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<JSC::Yarr::CharacterClass>>(v33 + 72, (unint64_t)&v43);
      }
      else
      {
        v35 = *(_QWORD *)(v33 + 72);
        v43 = 0;
        *(_QWORD *)(v35 + 8 * v34) = v27;
        *(_DWORD *)(v33 + 84) = v34 + 1;
      }
      std::unique_ptr<JSC::Yarr::CharacterClass>::~unique_ptr[abi:sn180100](&v43, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      v36 = a1[1];
      v37 = *((_BYTE *)a1 + 181);
      LOBYTE(v44) = 3;
      HIBYTE(v44) = 4 * (v37 & 1);
      LODWORD(v47) = a2;
      v45 = 0;
      v46 = 0x100000001;
      v38 = *(_DWORD *)(v36 + 12);
      if (v38 == *(_DWORD *)(v36 + 8))
      {
        *(_QWORD *)&v9 = WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::PatternTerm>(v36, (unint64_t)&v44).n128_u64[0];
      }
      else
      {
        v39 = *(_QWORD *)v36 + 48 * v38;
        v40 = v44;
        *(_BYTE *)(v39 + 2) = v45;
        *(_WORD *)v39 = v40;
        *(_QWORD *)(v39 + 4) = 0x100000001;
        *(_QWORD *)&v9 = v47;
        v41 = v48;
        *(_OWORD *)(v39 + 16) = v47;
        *(_OWORD *)(v39 + 32) = v41;
        ++*(_DWORD *)(v36 + 12);
      }
    }
  }
  else
  {
    v4 = a1[1];
    v5 = *((_BYTE *)a1 + 181);
    LOBYTE(v44) = 3;
    HIBYTE(v44) = 4 * (v5 & 1);
    LODWORD(v47) = a2;
    v45 = 0;
    v46 = 0x100000001;
    v6 = *(unsigned int *)(v4 + 12);
    if ((_DWORD)v6 == *(_DWORD *)(v4 + 8))
    {
      v11 = WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v6 + 1, (unint64_t)&v44);
      v7 = *(_QWORD *)v4 + 48 * *(unsigned int *)(v4 + 12);
      v12 = *(_WORD *)v11;
      *(_BYTE *)(v7 + 2) = *(_BYTE *)(v11 + 2);
      *(_WORD *)v7 = v12;
      *(_DWORD *)(v7 + 4) = *(_DWORD *)(v11 + 4);
      *(_DWORD *)(v7 + 8) = *(_DWORD *)(v11 + 8);
      v9 = *(_OWORD *)(v11 + 16);
      v10 = *(_OWORD *)(v11 + 32);
    }
    else
    {
      v7 = *(_QWORD *)v4 + 48 * v6;
      v8 = v44;
      *(_BYTE *)(v7 + 2) = v45;
      *(_WORD *)v7 = v8;
      *(_QWORD *)(v7 + 4) = 0x100000001;
      v9 = v47;
      v10 = v48;
    }
    *(_OWORD *)(v7 + 16) = v9;
    *(_OWORD *)(v7 + 32) = v10;
    ++*(_DWORD *)(v4 + 12);
  }
  return *(double *)&v9;
}

void WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::formUnion<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  _BYTE v15[24];

  if (!a2)
  {
    v9 = 0;
    v10 = 0;
LABEL_3:
    v11 = &a2[v10];
    goto LABEL_4;
  }
  v10 = *((unsigned int *)a2 - 1);
  v11 = &a2[v10];
  if (!*((_DWORD *)a2 - 3))
  {
    v9 = &a2[v10];
    goto LABEL_3;
  }
  v9 = a2;
  if ((_DWORD)v10)
  {
    v13 = 8 * v10;
    v9 = a2;
    while ((unint64_t)*v9 + 1 <= 1)
    {
      ++v9;
      v13 -= 8;
      if (!v13)
      {
        v9 = v11;
        break;
      }
    }
  }
LABEL_4:
  if (a2)
    v12 = &a2[*((unsigned int *)a2 - 1)];
  else
    v12 = 0;
  while (v9 != v12)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a1, v9, a3, a4, a5, a6, a7, a8, (uint64_t)v15);
    v14 = v9 + 1;
    v9 = v11;
    if (v14 != v11)
    {
      v9 = v14;
      while ((unint64_t)*v9 + 1 <= 1)
      {
        if (++v9 == v11)
        {
          v9 = v11;
          break;
        }
      }
    }
  }
}

void WTF::GenericHashTraits<WTF::String>::assignToEmpty<WTF::String,WTF::String const&>(WTF::StringImpl **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2)
    *(_DWORD *)a2 += 2;
  v9 = *a1;
  *a1 = a2;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
}

void JSC::Yarr::YarrPatternConstructor::atomParenthesesSubpatternBegin(uint64_t a1, int a2, WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  __int16 *v29;
  uint64_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  char v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  WTF *v69;
  WTF::StringImpl *v70;

  v8 = a2;
  v10 = *(_DWORD *)(*(_QWORD *)a1 + 4) + 1;
  if (a2)
  {
    *(_DWORD *)(*(_QWORD *)a1 + 4) = v10;
    if ((_BYTE)a4)
    {
      if (a3)
        *(_DWORD *)a3 += 2;
      v70 = a3;
      JSC::Yarr::YarrPatternConstructor::addCaptureGroupForName(a1, &v70, v10, a4, a5, a6, a7, a8);
      v55 = v70;
      v70 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
        {
          WTF::StringImpl::~StringImpl(v55, v48, v49, v50, v51, v52, v53, v54);
          WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
        }
        else
        {
          *(_DWORD *)v55 -= 2;
        }
      }
    }
  }
  v11 = WTF::fastMalloc((WTF *)0x28);
  v12 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 32) = 0;
  v69 = (WTF *)v11;
  v13 = *(_QWORD *)(a1 + 8);
  LOBYTE(v12) = *(_BYTE *)(a1 + 181);
  LOBYTE(v64) = 7;
  HIBYTE(v64) = v8 & 0xFB | (4 * (v12 & 1));
  *(_QWORD *)&v67 = v11;
  DWORD2(v67) = v10;
  LOBYTE(v68) = 0;
  v65 = 0;
  v66 = 0x100000001;
  v14 = *(unsigned int *)(v13 + 12);
  if ((_DWORD)v14 == *(_DWORD *)(v13 + 8))
  {
    v27 = WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v64);
    v15 = *(_QWORD *)v13 + 48 * *(unsigned int *)(v13 + 12);
    v28 = *(_WORD *)v27;
    *(_BYTE *)(v15 + 2) = *(_BYTE *)(v27 + 2);
    *(_WORD *)v15 = v28;
    *(_DWORD *)(v15 + 4) = *(_DWORD *)(v27 + 4);
    *(_DWORD *)(v15 + 8) = *(_DWORD *)(v27 + 8);
    v17 = *(_OWORD *)(v27 + 16);
    v18 = *(_OWORD *)(v27 + 32);
  }
  else
  {
    v15 = *(_QWORD *)v13 + 48 * v14;
    v16 = v64;
    *(_BYTE *)(v15 + 2) = v65;
    *(_WORD *)v15 = v16;
    *(_QWORD *)(v15 + 4) = 0x100000001;
    v17 = v67;
    v18 = v68;
  }
  *(_OWORD *)(v15 + 16) = v17;
  *(_OWORD *)(v15 + 32) = v18;
  ++*(_DWORD *)(v13 + 12);
  JSC::Yarr::PatternDisjunction::addNewAlternative(v11, *(_DWORD *)(*(_QWORD *)a1 + 4), *(_BYTE *)(a1 + 181));
  *(_QWORD *)(a1 + 8) = v19;
  v20 = *(_DWORD *)(a1 + 176);
  *(_DWORD *)(a1 + 176) = v20 + 1;
  if (v20)
  {
    v23 = (uint64_t *)(a1 + 160);
    v64 = *(_WORD *)(a1 + 180);
    v24 = *(unsigned int *)(a1 + 172);
    if ((_DWORD)v24 == *(_DWORD *)(a1 + 168))
    {
      v29 = (__int16 *)WTF::Vector<JSC::Yarr::YarrPatternConstructor::ParenthesisContext::SavedContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)&v64);
      v24 = *(unsigned int *)(a1 + 172);
      v25 = *(_QWORD *)(a1 + 160);
      v26 = *v29;
    }
    else
    {
      v25 = *v23;
      v26 = v64;
    }
    *(_WORD *)(v25 + 2 * v24) = v26;
    ++*(_DWORD *)(a1 + 172);
  }
  v21 = *(_QWORD *)a1;
  v22 = *(unsigned int *)(*(_QWORD *)a1 + 36);
  if ((_DWORD)v22 == *(_DWORD *)(*(_QWORD *)a1 + 32))
  {
    v30 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::Yarr::PatternDisjunction>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21 + 24, v22 + 1, (unint64_t)&v69);
    v38 = *(unsigned int *)(v21 + 36);
    v39 = *(_QWORD *)(v21 + 24);
    v40 = *v30;
    *v30 = 0;
    *(_QWORD *)(v39 + 8 * v38) = v40;
    v41 = v69;
    *(_DWORD *)(v21 + 36) = v38 + 1;
    v69 = 0;
    if (v41)
    {
      v42 = *((unsigned int *)v41 + 3);
      if ((_DWORD)v42)
      {
        v43 = *(unint64_t **)v41;
        v44 = 8 * v42;
        do
        {
          v45 = *v43;
          *v43 = 0;
          if (v45)
          {
            v46 = *(_QWORD *)v45;
            if (*(_QWORD *)v45)
            {
              *(_QWORD *)v45 = 0;
              *(_DWORD *)(v45 + 8) = 0;
              WTF::fastFree(v46, v31, v32, v33, v34, v35, v36, v37);
            }
            WTF::fastFree(v45, v31, v32, v33, v34, v35, v36, v37);
          }
          ++v43;
          v44 -= 8;
        }
        while (v44);
      }
      v47 = *(_QWORD *)v41;
      if (*(_QWORD *)v41)
      {
        *(_QWORD *)v41 = 0;
        *((_DWORD *)v41 + 2) = 0;
        WTF::fastFree(v47, v31, v32, v33, v34, v35, v36, v37);
      }
      WTF::fastFree((unint64_t)v41, v31, v32, v33, v34, v35, v36, v37);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v21 + 24) + 8 * v22) = v11;
    *(_DWORD *)(v21 + 36) = v22 + 1;
  }
}

void JSC::Yarr::YarrPatternConstructor::atomParentheticalAssertionBegin(_QWORD *a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  __int16 *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int16 v42;
  char v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  WTF *v47;

  v6 = WTF::fastMalloc((WTF *)0x28);
  v7 = v6;
  v8 = a1[1];
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = v8;
  *(_BYTE *)(v6 + 32) = 0;
  v47 = (WTF *)v6;
  v9 = a1[1];
  v10 = *(_DWORD *)(*a1 + 4) + 1;
  LOBYTE(v42) = 8;
  if (a2)
    v11 = 2;
  else
    v11 = 0;
  HIBYTE(v42) = v11 & 0xFB | (4 * (a3 & 1));
  *(_QWORD *)&v45 = v6;
  DWORD2(v45) = v10;
  LOBYTE(v46) = 0;
  v43 = 0;
  v44 = 0x100000001;
  v12 = *(unsigned int *)(v9 + 12);
  if ((_DWORD)v12 == *(_DWORD *)(v9 + 8))
  {
    v25 = WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v12 + 1, (unint64_t)&v42);
    v13 = *(_QWORD *)v9 + 48 * *(unsigned int *)(v9 + 12);
    v26 = *(_WORD *)v25;
    *(_BYTE *)(v13 + 2) = *(_BYTE *)(v25 + 2);
    *(_WORD *)v13 = v26;
    *(_DWORD *)(v13 + 4) = *(_DWORD *)(v25 + 4);
    *(_DWORD *)(v13 + 8) = *(_DWORD *)(v25 + 8);
    v15 = *(_OWORD *)(v25 + 16);
    v16 = *(_OWORD *)(v25 + 32);
  }
  else
  {
    v13 = *(_QWORD *)v9 + 48 * v12;
    v14 = v42;
    *(_BYTE *)(v13 + 2) = v43;
    *(_WORD *)v13 = v14;
    *(_QWORD *)(v13 + 4) = 0x100000001;
    v15 = v45;
    v16 = v46;
  }
  *(_OWORD *)(v13 + 16) = v15;
  *(_OWORD *)(v13 + 32) = v16;
  ++*(_DWORD *)(v9 + 12);
  JSC::Yarr::PatternDisjunction::addNewAlternative(v7, *(_DWORD *)(*a1 + 4), a3);
  a1[1] = v17;
  v18 = *((_DWORD *)a1 + 44);
  *((_DWORD *)a1 + 44) = v18 + 1;
  if (v18)
  {
    v21 = a1 + 20;
    v42 = *((_WORD *)a1 + 90);
    v22 = *((unsigned int *)a1 + 43);
    if ((_DWORD)v22 == *((_DWORD *)a1 + 42))
    {
      v27 = (__int16 *)WTF::Vector<JSC::Yarr::YarrPatternConstructor::ParenthesisContext::SavedContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v42);
      v22 = *((unsigned int *)a1 + 43);
      v23 = a1[20];
      v24 = *v27;
    }
    else
    {
      v23 = *v21;
      v24 = v42;
    }
    *(_WORD *)(v23 + 2 * v22) = v24;
    ++*((_DWORD *)a1 + 43);
  }
  *((_BYTE *)a1 + 180) = a2;
  *((_BYTE *)a1 + 181) = a3;
  if (a3 == 1)
    *(_BYTE *)*a1 |= 4u;
  v19 = *a1;
  v20 = *(unsigned int *)(*a1 + 36);
  if ((_DWORD)v20 == *(_DWORD *)(*a1 + 32))
  {
    WTF::Vector<std::unique_ptr<JSC::Yarr::PatternDisjunction>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<JSC::Yarr::PatternDisjunction>>(v19 + 24, (unint64_t)&v47);
    v35 = v47;
    v47 = 0;
    if (v35)
    {
      v36 = *((unsigned int *)v35 + 3);
      if ((_DWORD)v36)
      {
        v37 = *(unint64_t **)v35;
        v38 = 8 * v36;
        do
        {
          v39 = *v37;
          *v37 = 0;
          if (v39)
          {
            v40 = *(_QWORD *)v39;
            if (*(_QWORD *)v39)
            {
              *(_QWORD *)v39 = 0;
              *(_DWORD *)(v39 + 8) = 0;
              WTF::fastFree(v40, v28, v29, v30, v31, v32, v33, v34);
            }
            WTF::fastFree(v39, v28, v29, v30, v31, v32, v33, v34);
          }
          ++v37;
          v38 -= 8;
        }
        while (v38);
      }
      v41 = *(_QWORD *)v35;
      if (*(_QWORD *)v35)
      {
        *(_QWORD *)v35 = 0;
        *((_DWORD *)v35 + 2) = 0;
        WTF::fastFree(v41, v28, v29, v30, v31, v32, v33, v34);
      }
      WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v19 + 24) + 8 * v20) = v7;
    *(_DWORD *)(v19 + 36) = v20 + 1;
  }
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeGroupName(_BYTE *a1, uint64_t a2)
{
  int v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  int v29;
  char v30;

  v3 = *(_DWORD *)(a2 + 28);
  if (v3 == *(_DWORD *)(a2 + 24))
    goto LABEL_9;
  v5 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeIdentifierCharacter(a2);
  if (!JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::isIdentifierStart(v5))
  {
LABEL_8:
    *(_DWORD *)(a2 + 28) = v3;
LABEL_9:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  v30 = 1;
  while (1)
  {
    WTF::StringBuilder::append<char32_t>((uint64_t)v28, v5, v6, v7, v8, v9, v10, v11);
    if (*(_DWORD *)(a2 + 28) == *(_DWORD *)(a2 + 24))
    {
LABEL_7:
      WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v28, v12, v6, v7, v8, v9, v10, v11);
      goto LABEL_8;
    }
    v13 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeIdentifierCharacter(a2);
    if (v13 == 62)
      break;
    v5 = v13;
    if (!JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::isIdentifierPart(v13))
      goto LABEL_7;
  }
  WTF::StringBuilder::toString((WTF::StringBuilder *)v28, v14, v15, v16, v17, v18, v19, &v27);
  *(_QWORD *)a1 = v27;
  a1[8] = 1;
  WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v28, v20, v21, v22, v23, v24, v25, v26);
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::NamedCaptureGroups::add(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];

  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)a2, a3, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (uint64_t)v18);
  v17 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v17)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(*(_QWORD *)(a2 + 32) + 8 * v17 - 8), a3, v11, v12, v13, v14, v15, v16, a1);
  else
    __break(0xC471u);
}

void JSC::Yarr::YarrPatternConstructor::addCaptureGroupForName(uint64_t a1, WTF::StringImpl **a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int **v20;
  _BYTE *v21;
  uint64_t *v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  WTF *v42[2];
  uint64_t v43;
  char v44;
  unsigned int v45;

  v45 = a3;
  **(_BYTE **)a1 |= 0x20u;
  v11 = (uint64_t *)(*(_QWORD *)a1 + 104);
  v42[0] = 0;
  v42[1] = 0;
  WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v43, v11, a2, (uint64_t *)v42, a5, a6, a7, a8);
  if (v42[0])
    WTF::fastFree((unint64_t)v42[0], v12, v13, v14, v15, v16, v17, v18);
  v19 = v43;
  v20 = (int **)(v43 + 8);
  if (v44)
  {
    v21 = *(_BYTE **)a1;
    v22 = (uint64_t *)(*(_QWORD *)a1 + 88);
    v23 = (_DWORD *)(*(_QWORD *)a1 + 100);
    v24 = *v23;
    v25 = v24;
    if (v24 < a3)
    {
      v26 = *(unsigned int *)(*(_QWORD *)a1 + 100);
      do
      {
        v42[0] = 0;
        if (v25 == *((_DWORD *)v21 + 24))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)v22, (unint64_t)v42);
        }
        else
        {
          *(_QWORD *)(*v22 + 8 * v26) = 0;
          *v23 = v25 + 1;
        }
        v32 = v42[0];
        v42[0] = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
          {
            WTF::StringImpl::~StringImpl(v32, (WTF::AtomStringImpl *)v12, v13, v14, v15, v16, v17, v18);
            WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
          }
          else
          {
            *(_DWORD *)v32 -= 2;
          }
        }
        v21 = *(_BYTE **)a1;
        v22 = (uint64_t *)(*(_QWORD *)a1 + 88);
        v23 = (_DWORD *)(*(_QWORD *)a1 + 100);
        v26 = *v23;
        v25 = v26;
        v24 = v26;
      }
      while (v26 < v45);
    }
    else
    {
      LODWORD(v26) = *v23;
    }
    if ((_DWORD)v26 == *((_DWORD *)v21 + 24))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v22, (unint64_t)a2);
    }
    else
    {
      v27 = v26 + 1;
      v28 = *v22;
      v29 = *a2;
      if (*a2)
        *(_DWORD *)v29 += 2;
      *(_QWORD *)(v28 + 8 * v24) = v29;
      *v23 = v27;
    }
    v30 = *(unsigned int *)(v19 + 20);
    if ((_DWORD)v30 == *(_DWORD *)(v19 + 16))
    {
      WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)v20, (unint64_t)&v45);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)(v19 + 8) + 4 * v30) = v45;
      ++*(_DWORD *)(v19 + 20);
    }
  }
  else if (*(_DWORD *)(v43 + 20) == 2)
  {
    v41 = *(_DWORD *)(*(_QWORD *)a1 + 12) + 1;
    *(_DWORD *)(*(_QWORD *)a1 + 12) = v41;
    **v20 = v41;
  }
  v31 = *(unsigned int *)(v19 + 20);
  if ((_DWORD)v31 == *(_DWORD *)(v19 + 16))
  {
    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)v20, (unint64_t)&v45);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v19 + 8) + 4 * v31) = v45;
    ++*(_DWORD *)(v19 + 20);
  }
}

void WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl **v15;
  int i;
  unsigned int v17;
  WTF::StringImpl **v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unsigned int v41;

  v11 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8), (v11 = *a2) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = *((_DWORD *)*a3 + 4);
  if (v13 < 0x100)
    v14 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v14 = v13 >> 8;
  v15 = 0;
  for (i = 1; ; ++i)
  {
    v17 = v14 & v12;
    v18 = (WTF::StringImpl **)(v11 + 24 * (v14 & v12));
    v19 = *v18;
    if (!*v18)
    {
      if (v15)
      {
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        --*(_DWORD *)(*a2 - 16);
        v18 = v15;
      }
      WTF::GenericHashTraits<WTF::String>::assignToEmpty<WTF::String,WTF::String const&>(v18, *a3, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::VectorBuffer<unsigned int,0ul,WTF::FastMalloc>::adopt((uint64_t)(v18 + 1), a4, v20, v21, v22, v23, v24, v25);
      v32 = *a2;
      if (*a2)
        v33 = *(_DWORD *)(v32 - 12) + 1;
      else
        v33 = 1;
      *(_DWORD *)(v32 - 12) = v33;
      v34 = *a2;
      if (*a2)
        v35 = *(_DWORD *)(v34 - 12);
      else
        v35 = 0;
      v36 = (*(_DWORD *)(v34 - 16) + v35);
      v37 = *(unsigned int *)(v34 - 4);
      if (v37 > 0x400)
      {
        if (v37 > 2 * v36)
          goto LABEL_16;
      }
      else if (3 * v37 > 4 * v36)
      {
LABEL_16:
        v38 = v34 + 24 * v37;
        v39 = 1;
        goto LABEL_17;
      }
      v18 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, (uint64_t)v18, v26, v27, v28, v29, v30, v31);
      v34 = *a2;
      if (*a2)
        LODWORD(v37) = *(_DWORD *)(v34 - 4);
      else
        LODWORD(v37) = 0;
      goto LABEL_16;
    }
    if (v19 == (WTF *)-1)
    {
      v15 = (WTF::StringImpl **)(v11 + 24 * v17);
      goto LABEL_26;
    }
    if (WTF::equal(v19, *a3, (const WTF::StringImpl *)a3))
      break;
LABEL_26:
    v14 = i + v17;
  }
  v40 = *a2;
  if (*a2)
    v41 = *(_DWORD *)(v40 - 4);
  else
    v41 = 0;
  v39 = 0;
  v38 = v40 + 24 * v41;
LABEL_17:
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v38;
  *(_BYTE *)(a1 + 16) = v39;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl **result;
  uint64_t v24;
  _QWORD *v25;
  WTF::StringImpl **v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  v22 = 0;
  if (v12)
  {
    v24 = v12;
    v25 = (_QWORD *)v11;
    do
    {
      if (*v25 != -1)
      {
        if (*v25)
        {
          v26 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(*a1, (uint64_t)v25, v16, v17, v18, v19, v20, v21);
          WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair((uint64_t)v25, v27, v28, v29, v30, v31, v32, v33);
          if (v25 == (_QWORD *)a3)
            v22 = v26;
        }
        else
        {
          WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair((uint64_t)v25, v15, v16, v17, v18, v19, v20, v21);
        }
      }
      v25 += 3;
      --v24;
    }
    while (v24);
    goto LABEL_14;
  }
  result = 0;
  if (v11)
  {
LABEL_14:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (a1)
    v10 = *(_DWORD *)(a1 - 8);
  else
    v10 = 0;
  v11 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if (v11 < 0x100)
    v12 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a2);
  else
    v12 = v11 >> 8;
  v13 = 0;
  do
  {
    v14 = v12 & v10;
    v15 = (WTF::StringImpl **)(a1 + 24 * (v12 & v10));
    v12 = ++v13 + (v12 & v10);
  }
  while (*v15);
  v16 = a1 + 24 * v14;
  v19 = *(_QWORD *)(v16 + 8);
  v18 = (_QWORD *)(v16 + 8);
  v17 = v19;
  if (v19)
  {
    *v18 = 0;
    *(_DWORD *)(a1 + 24 * v14 + 16) = 0;
    WTF::fastFree(v17, (void *)a2, a3, a4, a5, a6, a7, a8);
    v27 = *v15;
    *v15 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v27 -= 2;
      }
    }
  }
  else
  {
    *v15 = 0;
  }
  v28 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  *v15 = v28;
  *v18 = 0;
  v18[1] = 0;
  v29 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *v18 = v29;
  LODWORD(v29) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  v30 = a1 + 24 * v14;
  *(_DWORD *)(v30 + 16) = v29;
  LODWORD(v29) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(v30 + 20) = v29;
  return v15;
}

void WTF::VectorBuffer<unsigned int,0ul,WTF::FastMalloc>::adopt(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v12)
    {
      pas_try_deallocate_slow_no_cache(v10, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_2;
    }
    if (!(v10 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v10 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v10)) & 1) != 0)
    {
      goto LABEL_6;
    }
    if (v10 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v10 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v10 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v10) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
      {
LABEL_6:
        v13 = *(unsigned int *)(v12 + 8000);
        if (v13 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v12, v10, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v12 + 8 * v13) = v10 | 0x5000000000000;
          *(_DWORD *)(v12 + 8000) = v13 + 1;
        }
        goto LABEL_2;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v12, v10, 1, a4, a5, a6, a7, a8);
  }
LABEL_2:
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 8) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v11;
}

_DWORD **WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>(uint64_t a1, unint64_t a2)
{
  _DWORD **result;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  result = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  if (*result)
    *v6 += 2;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<JSC::Yarr::YarrPatternConstructor::ParenthesisContext::SavedContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _WORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  __int16 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 2 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::Yarr::YarrPatternConstructor::ParenthesisContext::SavedContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 31))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_WORD *)WTF::fastMalloc((WTF *)(2 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 2 * v10;
      v20 = (__int16 *)v5;
      do
      {
        v21 = *v20++;
        *v11++ = v21;
        v19 -= 2;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::Yarr::YarrPatternConstructor::ParenthesisContext::SavedContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _WORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  __int16 v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 31)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (_WORD *)WTF::fastMalloc((WTF *)(2 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = 2 * v8;
        v18 = (__int16 *)v7;
        do
        {
          v19 = *v18++;
          *v9++ = v19;
          v17 -= 2;
        }
        while (v17);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeIdentifierCharacter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned int *)(a1 + 28);
  v2 = *(_QWORD *)(a1 + 16);
  if ((_DWORD)v1 == *(_DWORD *)(a1 + 24) || *(_BYTE *)(v2 + v1) != 92)
  {
    *(_DWORD *)(a1 + 28) = v1 + 1;
    return *(unsigned __int8 *)(v2 + v1);
  }
  else
  {
    *(_DWORD *)(a1 + 28) = v1 + 1;
    return JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::UnicodeParseContext)1>(a1);
  }
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::isIdentifierStart(unsigned int a1)
{
  uint64_t v1;

  if (a1 > 0x7F)
    return ((1 << u_charType(a1)) & 0x3E) != 0;
  if ((a1 | 0x20) - 97 < 0x1A)
    return 1;
  v1 = 1;
  if (a1 != 36 && a1 != 95)
    return ((1 << u_charType(a1)) & 0x3E) != 0;
  return v1;
}

uint64_t WTF::StringBuilder::append<char32_t>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int16 v16;

  v8 = a2;
  v9 = *(_DWORD *)(a1 + 16);
  if (a2 < 0x10000)
    v10 = 1;
  else
    v10 = 2;
  v11 = __CFADD__(v9, v10);
  v12 = v9 + v10;
  if (v11)
    v13 = 0xFFFFFFFFLL;
  else
    v13 = v12;
  v14 = *(_QWORD *)(a1 + 8);
  if (!v14)
  {
    v14 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
      if (v8 > 0xFF)
        goto LABEL_15;
LABEL_10:
      result = WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v13, a3, a4, a5, a6, a7, a8);
      if (result)
        *(_BYTE *)result = v8;
      return result;
    }
  }
  if (v8 <= 0xFF && (*(_DWORD *)(v14 + 16) & 4) != 0)
    goto LABEL_10;
LABEL_15:
  result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v13, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    if (HIWORD(v8))
    {
      v16 = v8 & 0x3FF | 0xDC00;
      v8 = (v8 >> 10) - 10304;
      *(_WORD *)(result + 2) = v16;
    }
    *(_WORD *)result = v8;
  }
  return result;
}

BOOL JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::isIdentifierPart(unsigned int c)
{
  _BOOL8 result;

  if (c > 0x7F)
    return ((1 << u_charType(c)) & 0x40037E) != 0 || c >> 1 == 4102;
  result = 1;
  if (c != 95 && (c | 0x20) - 97 >= 0x1A && c != 36)
    return ((1 << u_charType(c)) & 0x40037E) != 0 || c >> 1 == 4102;
  return result;
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::UnicodeParseContext)1>(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v16;
  unsigned __int8 v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  unsigned int v23;
  unsigned __int8 v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;
  unsigned int v30;
  unsigned __int8 v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned __int8 v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int8 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int8 v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned __int8 v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 v53;
  int v54;
  unsigned int v55;
  unsigned __int8 v56;

  v2 = *(_DWORD *)(a1 + 24);
  v1 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v1 == v2)
    goto LABEL_4;
  v3 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v3 + v1) != 117)
    goto LABEL_4;
  v4 = (v1 + 1);
  *(_DWORD *)(a1 + 28) = v4;
  if ((_DWORD)v4 == v2)
    goto LABEL_4;
  v8 = *(unsigned __int8 *)(v3 + v4);
  if (v8 == 123)
  {
    LODWORD(v6) = 0;
    *(_DWORD *)(a1 + 28) = v1 + 2;
    v9 = v1 + 3;
    v10 = -v2;
    while (v10 + v9 != 1)
    {
      v11 = v9 - 1;
      v12 = *(unsigned __int8 *)(v3 + v11);
      v13 = v12 - 48;
      v14 = (v12 | 0x20) - 97;
      if (v13 >= 0xA && v14 >= 6)
        break;
      *(_DWORD *)(a1 + 28) = v9;
      v16 = *(unsigned __int8 *)(v3 + v11);
      v17 = v16 >= 0x41 ? (v16 + 9) & 0xF : v16 - 48;
      v6 = v17 | (16 * v6);
      if (v6 >= 0x110000 || !(v10 + v9))
        break;
      v18 = *(unsigned __int8 *)(v3 + v9++);
      if (v18 == 125)
      {
        *(_DWORD *)(a1 + 28) = v9;
        return v6;
      }
    }
    v5 = 19;
    goto LABEL_5;
  }
  v19 = v8 - 48;
  v20 = (v8 | 0x20) - 97;
  if (v19 >= 0xA && v20 > 5)
    goto LABEL_81;
  v22 = (v1 + 2);
  *(_DWORD *)(a1 + 28) = v22;
  v23 = *(unsigned __int8 *)(v3 + v4);
  v24 = v23 >= 0x41 ? (v23 + 9) & 0xF : v23 - 48;
  if ((_DWORD)v22 == v2)
    goto LABEL_81;
  v25 = *(unsigned __int8 *)(v3 + v22);
  v26 = v25 - 48;
  v27 = (v25 | 0x20) - 97;
  if (v26 >= 0xA && v27 > 5)
    goto LABEL_81;
  v29 = (v1 + 3);
  *(_DWORD *)(a1 + 28) = v29;
  v30 = *(unsigned __int8 *)(v3 + v22);
  v31 = v30 >= 0x41 ? (v30 + 9) & 0xF : v30 - 48;
  if ((_DWORD)v29 == v2
    || (v32 = *(unsigned __int8 *)(v3 + v29), (v32 - 48) >= 0xA) && (v32 | 0x20u) - 97 > 5
    || ((v33 = (v1 + 4), *(_DWORD *)(a1 + 28) = v33, v34 = *(unsigned __int8 *)(v3 + v29), v34 >= 0x41)
      ? (v35 = (v34 + 9) & 0xF)
      : (v35 = v34 - 48),
        (_DWORD)v33 == v2
     || (v36 = *(unsigned __int8 *)(v3 + v33), (v36 - 48) >= 0xA) && (v36 | 0x20u) - 97 >= 6))
  {
LABEL_81:
    *(_DWORD *)(a1 + 28) = v4;
LABEL_4:
    v5 = 18;
LABEL_5:
    *(_BYTE *)(a1 + 8) = v5;
    return 0xFFFFFFFFLL;
  }
  v37 = (16 * v31) | (v24 << 8) | v35;
  v38 = v1 + 5;
  *(_DWORD *)(a1 + 28) = v1 + 5;
  v39 = *(unsigned __int8 *)(v3 + v33);
  if (v39 >= 0x41)
    v40 = (v39 + 9) & 0xF;
  else
    v40 = v39 - 48;
  v6 = v40 | (16 * v37);
  if (v2 - v38 >= 6 && (v37 & 0xFFC0) == 0xD80 && *(_BYTE *)(v3 + v38) == 92)
  {
    *(_DWORD *)(a1 + 28) = v1 + 6;
    if ((_DWORD)v1 + 6 == v2)
      goto LABEL_80;
    if (*(_BYTE *)(v3 + (v1 + 6)) != 117)
      goto LABEL_80;
    v41 = (v1 + 7);
    *(_DWORD *)(a1 + 28) = v41;
    if ((_DWORD)v41 == v2)
      goto LABEL_80;
    v42 = *(unsigned __int8 *)(v3 + v41);
    if ((v42 - 48) >= 0xA && (v42 | 0x20u) - 97 > 5)
      goto LABEL_80;
    v43 = (v1 + 8);
    *(_DWORD *)(a1 + 28) = v43;
    v44 = *(unsigned __int8 *)(v3 + v41);
    v45 = v44 >= 0x41 ? (v44 + 9) & 0xF : v44 - 48;
    if ((_DWORD)v43 == v2)
      goto LABEL_80;
    v46 = *(unsigned __int8 *)(v3 + v43);
    if ((v46 - 48) >= 0xA && (v46 | 0x20u) - 97 > 5)
      goto LABEL_80;
    v47 = (v1 + 9);
    *(_DWORD *)(a1 + 28) = v47;
    v48 = *(unsigned __int8 *)(v3 + v43);
    v49 = v48 >= 0x41 ? (v48 + 9) & 0xF : v48 - 48;
    if ((_DWORD)v47 == v2)
      goto LABEL_80;
    v50 = *(unsigned __int8 *)(v3 + v47);
    if ((v50 - 48) >= 0xA && (v50 | 0x20u) - 97 > 5)
      goto LABEL_80;
    v51 = (v1 + 10);
    *(_DWORD *)(a1 + 28) = v51;
    v52 = *(unsigned __int8 *)(v3 + v47);
    v53 = v52 >= 0x41 ? (v52 + 9) & 0xF : v52 - 48;
    if ((_DWORD)v51 == v2
      || (v54 = *(unsigned __int8 *)(v3 + v51), (v54 - 48) >= 0xA) && (v54 | 0x20u) - 97 > 5
      || ((*(_DWORD *)(a1 + 28) = v1 + 11, v55 = *(unsigned __int8 *)(v3 + v51), v55 >= 0x41)
        ? (v56 = (v55 + 9) & 0xF)
        : (v56 = v55 - 48),
          ((16 * v49) & 0xFFC0 | (unsigned __int16)(v45 << 8) | v53 & 0xC0) != 0xDC0))
    {
LABEL_80:
      *(_DWORD *)(a1 + 28) = v38;
    }
    else
    {
      return (v56 | (16 * ((16 * v49) | (v45 << 8) | v53))) + ((_DWORD)v6 << 10) - 56613888;
    }
  }
  return v6;
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeHex(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  unsigned __int8 v13;

  v2 = result;
  v3 = 0;
  LODWORD(result) = 0;
  v4 = *(_DWORD *)(v2 + 28);
  v5 = v4 - *(_DWORD *)(v2 + 24);
  while (v5 + v3)
  {
    v6 = (v4 + v3);
    v7 = *(_QWORD *)(v2 + 16);
    v8 = *(unsigned __int8 *)(v7 + v6);
    v9 = v8 - 48;
    v10 = (v8 | 0x20) - 97;
    if (v9 >= 0xA && v10 >= 6)
      break;
    *(_DWORD *)(v2 + 28) = v4 + v3 + 1;
    v12 = *(unsigned __int8 *)(v7 + v6);
    if (v12 >= 0x41)
      v13 = (v12 + 9) & 0xF;
    else
      v13 = v12 - 48;
    result = v13 | (16 * result);
    if (a2 == ++v3)
      return result;
  }
  *(_DWORD *)(v2 + 28) = v4;
  return 0xFFFFFFFFLL;
}

uint64_t *WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = (uint64_t *)WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2, a4, a5, a6, a7, a8);
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(_QWORD *)a1;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = 0;
  v12 = *result;
  *result = 0;
  *(_QWORD *)(v11 + 8 * v10) = v12;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = a3;
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v9 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v13 = a3 - v9;
    v14 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 > a2)
      a2 = v15;
    WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v13;
  }
  return v8;
}

uint64_t *WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t *result;

  v9 = (uint64_t *)WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2, a4, a5, a6, a7, a8);
  result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)), v9);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void JSC::Yarr::YarrPatternConstructor::atomParenthesesEnd(JSC::Yarr::YarrPatternConstructor *this)
{
  uint64_t v1;
  uint64_t *v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  WTF::AtomStringImpl *v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
  v2 = *(uint64_t **)(v1 + 16);
  *((_QWORD *)this + 1) = v2;
  v3 = *((_DWORD *)v2 + 3);
  if (!v3)
    goto LABEL_18;
  v4 = v3 - 1;
  v5 = *v2;
  v6 = (_BYTE *)(*v2 + 48 * v4);
  v7 = *(unsigned int *)(v1 + 12);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(uint64_t **)v1;
    v10 = v7;
    do
    {
      v11 = *v9++;
      v8 += (*(unsigned __int8 *)(v11 + 37) >> 2) & 1;
      --v10;
    }
    while (v10);
    if (v8)
    {
      *((_BYTE *)v2 + 37) |= 8u;
      if (v8 == (_DWORD)v7)
        *(_BYTE *)(*((_QWORD *)this + 1) + 37) |= 4u;
    }
  }
  *(_DWORD *)(v5 + 48 * v4 + 28) = *(_DWORD *)(*(_QWORD *)this + 4);
  if (*v6 != 8 || !*((_DWORD *)this + 35))
  {
    v12 = *((_DWORD *)this + 44) - 1;
    *((_DWORD *)this + 44) = v12;
    if (!v12)
    {
      *((_WORD *)this + 90) = 0;
      return;
    }
    v13 = *((unsigned int *)this + 43);
    if ((_DWORD)v13)
    {
      v14 = *(_WORD *)(*((_QWORD *)this + 20) + 2 * v13 - 2);
      *((_DWORD *)this + 43) = v13 - 1;
      *((_WORD *)this + 90) = v14;
      return;
    }
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x198EF8128);
  }
  v15 = *((unsigned __int8 *)this + 181);
  JSC::Yarr::YarrPatternConstructor::popParenthesisContext((uint64_t)this);
  if (v15 == 1 && !*((_BYTE *)this + 181))
    JSC::Yarr::YarrPatternConstructor::tryConvertingForwardReferencesToBackreferences(this, v16, v17, v18, v19, v20, v21, v22);
}

uint64_t JSC::Yarr::YarrPatternConstructor::popParenthesisContext(uint64_t this)
{
  int v1;
  uint64_t v2;
  __int16 v3;

  v1 = *(_DWORD *)(this + 176) - 1;
  *(_DWORD *)(this + 176) = v1;
  if (v1)
  {
    v2 = *(unsigned int *)(this + 172);
    if ((_DWORD)v2)
    {
      v3 = *(_WORD *)(*(_QWORD *)(this + 160) + 2 * v2 - 2);
      *(_DWORD *)(this + 172) = v2 - 1;
      *(_WORD *)(this + 180) = v3;
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    *(_WORD *)(this + 180) = 0;
  }
  return this;
}

void JSC::Yarr::YarrPatternConstructor::tryConvertingForwardReferencesToBackreferences(JSC::Yarr::YarrPatternConstructor *this, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Yarr::YarrPatternConstructor *v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int i;
  int v23;
  uint64_t v24;
  WTF *v25;
  unsigned int v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  _BYTE *v59;

  v8 = this;
  if (!*((_DWORD *)this + 35))
  {
    if (!*((_DWORD *)this + 34))
      return;
    goto LABEL_44;
  }
  v9 = 0;
  do
  {
    v10 = *((_QWORD *)v8 + 16);
    v11 = (_DWORD *)(v10 + 24 * v9);
    v12 = *(uint64_t **)v11;
    v13 = v11[2];
    if (*(_DWORD *)(*(_QWORD *)v11 + 12) <= v13)
      goto LABEL_48;
    v14 = *v12;
    v15 = (_BYTE *)(*v12 + 48 * v13);
    v16 = *(WTF::StringImpl **)(v10 + 24 * v9 + 16);
    if (v16)
    {
      v17 = *(_QWORD *)v8;
      *(_DWORD *)v16 += 2;
      v18 = *(_QWORD *)(v17 + 104);
      if (!v18)
      {
LABEL_18:
        v24 = 0;
        goto LABEL_20;
      }
      v58 = v14;
      v19 = *(_DWORD *)(v18 - 8);
      v20 = *((_DWORD *)v16 + 4);
      if (v20 < 0x100)
        v21 = WTF::StringImpl::hashSlowCase(v16);
      else
        v21 = v20 >> 8;
      v59 = v15;
      for (i = 0; ; v21 = i + v23)
      {
        v23 = v21 & v19;
        v24 = v18 + 24 * (v21 & v19);
        v25 = *(WTF **)v24;
        if (*(_QWORD *)v24 != -1)
        {
          if (!v25)
          {
            v28 = *(_QWORD *)(v17 + 104);
            v8 = this;
            v14 = v58;
            v15 = v59;
            if (!v28)
              goto LABEL_18;
            v24 = v28 + 24 * *(unsigned int *)(v28 - 4);
LABEL_20:
            if (*(_DWORD *)v16 == 2)
            {
              v36 = v14;
              WTF::StringImpl::~StringImpl(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
              v14 = v36;
            }
            else
            {
              *(_DWORD *)v16 -= 2;
            }
            v29 = *(_QWORD *)(*(_QWORD *)v8 + 104);
            if (v29)
              v29 += 24 * *(unsigned int *)(v29 - 4);
            if (v29 == v24)
              goto LABEL_30;
            v30 = *(unsigned int *)(v24 + 20);
            if ((_DWORD)v30)
            {
              v31 = *(_DWORD *)(*(_QWORD *)(v24 + 8) + 4 * v30 - 4);
              v32 = v14 + 48 * v13;
              v34 = *(_DWORD *)(v32 + 16);
              v33 = (_DWORD *)(v32 + 16);
              if (v31 == v34)
              {
                *v33 = 0;
                goto LABEL_30;
              }
              *v33 = v31;
              *v15 = 5;
              v27 = *(_BYTE **)v8;
LABEL_29:
              *v27 |= 1u;
              goto LABEL_30;
            }
LABEL_48:
            __break(0xC471u);
            JUMPOUT(0x198EF8414);
          }
          if (WTF::equal(v25, v16, a3))
          {
            v8 = this;
            v14 = v58;
            v15 = v59;
            goto LABEL_20;
          }
        }
        ++i;
      }
    }
    v26 = *(_DWORD *)(v14 + 48 * v13 + 16);
    if (v26)
    {
      v27 = *(_BYTE **)v8;
      if (v26 <= *(_DWORD *)(*(_QWORD *)v8 + 4))
      {
        *v15 = 5;
        goto LABEL_29;
      }
    }
LABEL_30:
    ++v9;
    v35 = *((unsigned int *)v8 + 35);
  }
  while (v9 < v35);
  if (*((_DWORD *)v8 + 34))
  {
    v45 = *((_QWORD *)v8 + 16);
    if (!(_DWORD)v35)
      goto LABEL_45;
    v46 = 24 * v35;
    v47 = (WTF::StringImpl **)(v45 + 16);
    do
    {
      v48 = *v47;
      *v47 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
        {
          WTF::StringImpl::~StringImpl(v48, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
        }
        else
        {
          *(_DWORD *)v48 -= 2;
        }
      }
      v47 += 3;
      v46 -= 24;
    }
    while (v46);
    *((_DWORD *)v8 + 35) = 0;
LABEL_44:
    v45 = *((_QWORD *)v8 + 16);
LABEL_45:
    if (v45)
    {
      *((_QWORD *)v8 + 16) = 0;
      *((_DWORD *)v8 + 34) = 0;
      WTF::fastFree(v45, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeLast(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v8)
  {
    v10 = v8 - 1;
    v11 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v8 - 1));
    if (v11)
    {
      v12 = *(unsigned int *)(v11 - 4);
      if ((_DWORD)v12)
      {
        v13 = *(WTF::StringImpl ***)(*(_QWORD *)a1 + 8 * v10);
        do
        {
          v14 = *v13;
          if (*v13 != (WTF::StringImpl *)-1)
          {
            *v13 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
              {
                WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
              }
              else
              {
                *(_DWORD *)v14 -= 2;
              }
            }
          }
          ++v13;
          --v12;
        }
        while (v12);
      }
      WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_DWORD *)(a1 + 12) = v10;
  }
  else
  {
    __break(0xC471u);
  }
}

JSC::Yarr::CharacterClass **JSC::Yarr::YarrPattern::unicodeCharacterClassFor(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Yarr::CharacterClass *v17;
  JSC::Yarr::CharacterClass **result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::Yarr::CharacterClass *v25[3];
  uint64_t v26;
  int v27;

  v27 = a2;
  v4 = (uint64_t *)(a1 + 208);
  v5 = *(_QWORD *)(a1 + 208);
  if (v5)
  {
    v6 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Yarr::CharacterClass *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Yarr::CharacterClass *>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Yarr::CharacterClass *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Yarr::CharacterClass *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,JSC::Yarr::CharacterClass *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Yarr::CharacterClass *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(*(_QWORD *)(a1 + 208), a2);
    v7 = v6 ? v6 : v5 + 16 * *(unsigned int *)(v5 - 4);
    if (v5 + 16 * *(unsigned int *)(v5 - 4) != v7)
      return (JSC::Yarr::CharacterClass **)WTF::HashMap<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::HashTableTraits>::get(v5, a2);
  }
  JSC::Yarr::createCharacterClassFunctions[a2 - 4]((JSC::Yarr *)v25);
  v15 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v15 == *(_DWORD *)(a1 + 80))
  {
    WTF::Vector<std::unique_ptr<JSC::Yarr::CharacterClass>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<JSC::Yarr::CharacterClass>>(a1 + 72, (unint64_t)v25);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 72);
    v17 = v25[0];
    v25[0] = 0;
    *(_QWORD *)(v16 + 8 * v15) = v17;
    *(_DWORD *)(a1 + 84) = v15 + 1;
  }
  result = std::unique_ptr<JSC::Yarr::CharacterClass>::~unique_ptr[abi:sn180100](v25, v8, v9, v10, v11, v12, v13, v14);
  v23 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v23)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v23 - 8);
    v24 = v26;
    WTF::HashMap<unsigned int,JSC::Yarr::CharacterClass *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Yarr::CharacterClass *>,WTF::HashTableTraits>::add<JSC::Yarr::CharacterClass *&>((uint64_t)v25, v4, &v27, &v26, v19, v20, v21, v22);
    return (JSC::Yarr::CharacterClass **)v24;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::HashMap<unsigned int,JSC::Yarr::CharacterClass *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Yarr::CharacterClass *>,WTF::HashTableTraits>::add<JSC::Yarr::CharacterClass *&>(uint64_t result, uint64_t *a2, int *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Yarr::CharacterClass *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Yarr::CharacterClass *>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Yarr::CharacterClass *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Yarr::CharacterClass *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(a2, 0, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = 9 * ((v15 + ~(v15 << 15)) ^ ((v15 + ~(v15 << 15)) >> 10));
  v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
  v18 = (v17 ^ HIWORD(v17)) & v14;
  v19 = v12 + 16 * v18;
  v20 = *(_DWORD *)v19;
  if (*(_DWORD *)v19)
  {
    v29 = 0;
    v30 = 1;
    do
    {
      if (v20 == v15)
      {
        if ((v13 & 1) != 0)
          v31 = 0;
        else
          v31 = *(unsigned int *)(v12 - 4);
        v28 = 0;
        v27 = v12 + 16 * v31;
        goto LABEL_12;
      }
      if (v20 == -1)
        v29 = (_QWORD *)v19;
      v18 = (v18 + v30) & v14;
      v19 = v12 + 16 * v18;
      v20 = *(_DWORD *)v19;
      ++v30;
    }
    while (*(_DWORD *)v19);
    if (v29)
    {
      *v29 = 0;
      v29[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v19 = (uint64_t)v29;
    }
  }
  *(_DWORD *)v19 = v15;
  *(_QWORD *)(v19 + 8) = *a4;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_11;
LABEL_16:
    result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Yarr::CharacterClass *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Yarr::CharacterClass *>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Yarr::CharacterClass *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Yarr::CharacterClass *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(a2, v19, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v19 = result;
    v23 = *a2;
    if (*a2)
      v26 = *(unsigned int *)(v23 - 4);
    else
      v26 = 0;
    goto LABEL_11;
  }
  if (3 * v26 <= 4 * v25)
    goto LABEL_16;
LABEL_11:
  v27 = v23 + 16 * v26;
  v28 = 1;
LABEL_12:
  *(_QWORD *)v11 = v19;
  *(_QWORD *)(v11 + 8) = v27;
  *(_BYTE *)(v11 + 16) = v28;
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Yarr::CharacterClass *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Yarr::CharacterClass *>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Yarr::CharacterClass *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Yarr::CharacterClass *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,JSC::Yarr::CharacterClass *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Yarr::CharacterClass *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
    v5 = v2 & (v4 ^ HIWORD(v4));
    v6 = *(_DWORD *)(result + 16 * v5);
    if (v6 == a2)
    {
LABEL_7:
      result += 16 * v5;
    }
    else
    {
      v7 = 1;
      while (v6)
      {
        v5 = ((_DWORD)v5 + v7) & v2;
        v6 = *(_DWORD *)(result + 16 * v5);
        ++v7;
        if (v6 == a2)
          goto LABEL_7;
      }
      return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Yarr::CharacterClass *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Yarr::CharacterClass *>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Yarr::CharacterClass *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Yarr::CharacterClass *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Yarr::CharacterClass *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Yarr::CharacterClass *>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Yarr::CharacterClass *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Yarr::CharacterClass *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Yarr::CharacterClass *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Yarr::CharacterClass *>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Yarr::CharacterClass *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Yarr::CharacterClass *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  __n128 *v24;
  uint64_t v25;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    LODWORD(v12) = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    LODWORD(v12) = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  v22 = 0;
  if ((_DWORD)v12)
  {
    v12 = v12;
    v24 = (__n128 *)v11;
    do
    {
      if (v24->n128_u32[0] + 1 >= 2)
      {
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Yarr::CharacterClass *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Yarr::CharacterClass *>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Yarr::CharacterClass *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Yarr::CharacterClass *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::reinsert(*a1, v24);
        if (v24 == (__n128 *)a3)
          v22 = v25;
      }
      ++v24;
      --v12;
    }
    while (v12);
    goto LABEL_12;
  }
  result = 0;
  if (v11)
  {
LABEL_12:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

__n128 WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Yarr::CharacterClass *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Yarr::CharacterClass *>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Yarr::CharacterClass *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Yarr::CharacterClass *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::reinsert(uint64_t a1, __n128 *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  __n128 result;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = 0;
  v4 = 9 * ((a2->n128_u32[0] + ~(a2->n128_u32[0] << 15)) ^ ((a2->n128_u32[0] + ~(a2->n128_u32[0] << 15)) >> 10));
  v5 = ((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) ^ (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) >> 16);
  do
  {
    v6 = v5 & v2;
    v5 = ++v3 + v6;
  }
  while (*(_DWORD *)(a1 + 16 * v6));
  result = *a2;
  *(__n128 *)(a1 + 16 * v6) = *a2;
  return result;
}

unint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::nestedClassBegin(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  __int16 v16;
  char v17;

  v8 = (char)a2;
  JSC::Yarr::YarrPatternConstructor::atomCharacterClassPushNested(*(JSC::Yarr::YarrPatternConstructor **)a1, a2, a3, a4, a5, a6, a7, a8);
  result = a1 + 32;
  v11 = *(_BYTE *)(a1 + 22);
  v16 = *(_WORD *)(a1 + 20);
  v17 = v11;
  v12 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 40))
  {
    result = WTF::Vector<JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::NestingState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v12 + 1, (unint64_t)&v16);
    v13 = *(_QWORD *)(a1 + 32) + 3 * *(unsigned int *)(a1 + 44);
    v14 = *(_WORD *)result;
    v15 = *(_BYTE *)(result + 2);
  }
  else
  {
    v13 = *(_QWORD *)result + 3 * v12;
    v14 = v16;
    v15 = v17;
  }
  *(_BYTE *)(v13 + 2) = v15;
  *(_WORD *)v13 = v14;
  ++*(_DWORD *)(a1 + 44);
  *(_WORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 22) = v8;
  return result;
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::setSubtractOp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  BOOL v10;

  v9 = *(_DWORD *)(a1 + 16);
  if (v9 && (*(_BYTE *)(a1 + 20) ? (v10 = *(_BYTE *)(a1 + 20) == 3) : (v10 = 1), v10))
  {
    if (v9 == 1)
      JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)*(unsigned int *)(a1 + 24), a3, a4, a5, a6, a7, a8);
    *(_BYTE *)(a1 + 20) = 3;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 104) + 1) = 3;
    *(_DWORD *)(a1 + 16) = 7;
  }
  else
  {
    **(_BYTE **)(a1 + 8) = 29;
  }
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::parseClassSet(void)::{lambda(void)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  char v14;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(unsigned int *)(a1 + 28);
  v11 = v10 + 1;
  *(_DWORD *)(a1 + 28) = v10 + 1;
  v12 = *(unsigned __int8 *)(v9 + v10);
  if (!*(_BYTE *)(v9 + v10))
    goto LABEL_4;
  if ((v12 & 0x80) == 0)
  {
    if (memchr("()[]{}/|)", *(unsigned __int8 *)(v9 + v10), 0xAuLL))
    {
LABEL_4:
      v14 = 31;
LABEL_5:
      *(_BYTE *)(a1 + 8) = v14;
      return;
    }
    if (v11 != *(_DWORD *)(a1 + 24)
      && v12 == *(unsigned __int8 *)(v9 + v11)
    {
      v14 = 29;
      goto LABEL_5;
    }
  }
  JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::atomPatternCharacter(a2, v12, a3, a4, a5, a6, a7, a8);
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::setIntersectionOp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;

  v9 = *(_DWORD *)(a1 + 16);
  if (v9 && (*(unsigned __int8 *)(a1 + 20) | 2) == 2)
  {
    if (v9 == 1)
      JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)*(unsigned int *)(a1 + 24), a3, a4, a5, a6, a7, a8);
    *(_BYTE *)(a1 + 20) = 2;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 104) + 1) = 2;
    *(_DWORD *)(a1 + 16) = 7;
  }
  else
  {
    **(_BYTE **)(a1 + 8) = 29;
  }
}

void JSC::Yarr::YarrPatternConstructor::atomCharacterClassPopNested(JSC::Yarr::YarrPatternConstructor *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  JSC::Yarr::CharacterClassConstructor *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v8 = *((_DWORD *)this + 31);
  if (v8)
  {
    if (v8 == 1)
      v10 = (JSC::Yarr::YarrPatternConstructor *)((char *)this + 16);
    else
      v10 = (JSC::Yarr::CharacterClassConstructor *)(*((_QWORD *)this + 14) + 88 * v8 - 176);
    JSC::Yarr::CharacterClassConstructor::performSetOpWith(v10, *((JSC::Yarr::CharacterClassConstructor **)this + 13), a3, a4, a5, a6, a7, a8);
    v18 = *((unsigned int *)this + 31);
    if ((_DWORD)v18)
    {
      v19 = v18 - 1;
      JSC::Yarr::CharacterClassConstructor::~CharacterClassConstructor((JSC::Yarr::CharacterClassConstructor *)(*((_QWORD *)this + 14) + 88 * (v18 - 1)), v11, v12, v13, v14, v15, v16, v17);
      *((_DWORD *)this + 31) = v19;
      *((_QWORD *)this + 13) = v10;
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void JSC::Yarr::CharacterClassConstructor::putChar(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  BOOL v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v8 = a2;
  v9 = a1;
  if (*(unsigned __int8 *)(a1 + 1) >= 2u)
  {
    JSC::Yarr::CharacterClassConstructor::putCharNonUnion(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    if ((*(_BYTE *)a1 & 1) == 0)
      goto LABEL_3;
    v12 = *(_DWORD *)(a1 + 4);
    if (a2 <= 0x7F && !v12)
    {
      if ((a2 | 0x20) - 97 <= 0x19)
      {
        if (((_DWORD)a2 - 97) >= 0x1A)
          v13 = -1;
        else
          v13 = -33;
        JSC::Yarr::CharacterClassConstructor::addSorted((unint64_t *)a1, a1 + 24, v13 & a2);
        v11 = v8 | (32 * (v8 - 65 < 0x1A));
        a1 = v9;
        v10 = v9 + 24;
        goto LABEL_7;
      }
      v10 = a1 + 24;
LABEL_6:
      v11 = v8;
LABEL_7:
      JSC::Yarr::CharacterClassConstructor::addSorted((unint64_t *)a1, v10, v11);
      return;
    }
    v14 = v12 == 0;
    if (v12)
      v15 = &JSC::Yarr::unicodeRangeInfo;
    else
      v15 = &JSC::Yarr::ucs2RangeInfo;
    v16 = 540;
    if (v14)
      v16 = 448;
    while (1)
    {
      do
      {
        v17 = v16;
        v16 >>= 1;
      }
      while (v15[4 * v16] > a2);
      v18 = (uint64_t)&v15[4 * v16];
      if (*(_DWORD *)(v18 + 4) >= a2)
        break;
      v15 = (_DWORD *)(v18 + 16);
      v16 = v17 + ~v16;
    }
    if (!*(_DWORD *)(v18 + 12))
    {
LABEL_3:
      if (a2 <= 0x7F)
        v10 = a1 + 24;
      else
        v10 = a1 + 56;
      goto LABEL_6;
    }
    JSC::Yarr::CharacterClassConstructor::putUnicodeIgnoreCase((unint64_t *)a1, a2, v18);
  }
}

void JSC::Yarr::CharacterClassConstructor::putCharNonUnion(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  WTF **v10;
  int v11;
  int v12;
  int v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _UNKNOWN **v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  int v23;
  int v24;
  WTF **v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  WTF **v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  WTF *v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  int v45;

  v8 = a2;
  v43 = 0;
  v44 = 0;
  v41 = 0;
  v42 = 0;
  v40[0] = 0;
  v40[1] = 0;
  if (*(_BYTE *)(a1 + 1) == 2 && *(_DWORD *)(a1 + 16))
  {
    v35 = *(unsigned int *)(a1 + 20);
    v36 = *(_QWORD *)(a1 + 8);
    if ((_DWORD)v35)
    {
      v37 = 16 * v35;
      do
      {
        v38 = *(_QWORD *)v36;
        if (*(_QWORD *)v36)
        {
          *(_QWORD *)v36 = 0;
          *(_DWORD *)(v36 + 8) = 0;
          v39 = v37;
          WTF::fastFree(v38, a2, a3, a4, a5, a6, a7, a8);
          v37 = v39;
        }
        v36 += 16;
        v37 -= 16;
      }
      while (v37);
      *(_DWORD *)(a1 + 20) = 0;
      v36 = *(_QWORD *)(a1 + 8);
    }
    if (v36)
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree(v36, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if ((*(_BYTE *)a1 & 1) == 0)
  {
LABEL_4:
    v45 = v8;
    if (v8 >= 0x80)
      v10 = &v41;
    else
      v10 = &v43;
    goto LABEL_40;
  }
  v11 = *(_DWORD *)(a1 + 4);
  if (v8 > 0x7F || v11)
  {
    v14 = &JSC::Yarr::unicodeRangeInfo;
    if (!v11)
      v14 = &JSC::Yarr::ucs2RangeInfo;
    v15 = 540;
    if (!v11)
      v15 = 448;
    while (1)
    {
      do
      {
        v16 = v15;
        v15 >>= 1;
      }
      while (v14[4 * v15] > v8);
      v17 = &v14[4 * v15];
      if (v17[1] >= v8)
        break;
      v14 = v17 + 4;
      v15 = v16 + ~v15;
    }
    switch(v17[3])
    {
      case 0:
        goto LABEL_4;
      case 1:
        v18 = v14[4 * v15 + 2];
        if (v11)
          v19 = &JSC::Yarr::unicodeCharacterSetInfo;
        else
          v19 = &JSC::Yarr::ucs2CharacterSetInfo;
        v20 = (unsigned int *)v19[v18];
        v21 = *v20;
        if (!*v20)
          goto LABEL_41;
        v22 = v20 + 1;
        break;
      case 2:
        v30 = v14[4 * v15 + 2] + v8;
        goto LABEL_52;
      case 3:
        v30 = v8 - v14[4 * v15 + 2];
        goto LABEL_52;
      case 4:
        v30 = v8 ^ 1;
        goto LABEL_52;
      case 5:
        v30 = ((v8 - 1) ^ 1) + 1;
LABEL_52:
        if (v30 >= v8)
          v31 = v8;
        else
          v31 = v30;
        v45 = v31;
        if (v30 > v8)
          v8 = v30;
        if (v31 >= 0x80)
          v32 = &v41;
        else
          v32 = &v43;
        WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v32, (unint64_t)&v45);
        v45 = v8;
        if (v8 <= 0x7F)
        {
          v33 = HIDWORD(v44);
          if (HIDWORD(v44) == (_DWORD)v44)
            goto LABEL_39;
          *((_DWORD *)v43 + HIDWORD(v44)) = v8;
          HIDWORD(v44) = v33 + 1;
          goto LABEL_41;
        }
        v34 = HIDWORD(v42);
        if (HIDWORD(v42) != (_DWORD)v42)
        {
          *((_DWORD *)v41 + HIDWORD(v42)) = v8;
          HIDWORD(v42) = v34 + 1;
          goto LABEL_41;
        }
        v10 = &v41;
        goto LABEL_40;
      default:
        __break(0xC471u);
        JUMPOUT(0x198EF9120);
    }
    while (1)
    {
      v45 = v21;
      if (v21 > 0x7F)
      {
        v24 = HIDWORD(v42);
        if (HIDWORD(v42) == (_DWORD)v42)
        {
          v25 = &v41;
          goto LABEL_35;
        }
        *((_DWORD *)v41 + HIDWORD(v42)) = v21;
        HIDWORD(v42) = v24 + 1;
      }
      else
      {
        v23 = HIDWORD(v44);
        if (HIDWORD(v44) == (_DWORD)v44)
        {
          v25 = &v43;
LABEL_35:
          WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v25, (unint64_t)&v45);
          goto LABEL_36;
        }
        *((_DWORD *)v43 + HIDWORD(v44)) = v21;
        HIDWORD(v44) = v23 + 1;
      }
LABEL_36:
      v26 = *v22++;
      v21 = v26;
      if (!v26)
        goto LABEL_41;
    }
  }
  if ((v8 | 0x20) - 97 > 0x19)
  {
    v45 = v8;
  }
  else
  {
    if (v8 - 97 >= 0x1A)
      v12 = -1;
    else
      v12 = -33;
    v45 = v12 & v8;
    WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v43, (unint64_t)&v45);
    v13 = HIDWORD(v44);
    v45 = v8 | (32 * (v8 - 65 < 0x1A));
    if (HIDWORD(v44) != (_DWORD)v44)
    {
      *((_DWORD *)v43 + HIDWORD(v44)) = v8 | (32 * (v8 - 65 < 0x1A));
      HIDWORD(v44) = v13 + 1;
      goto LABEL_41;
    }
  }
LABEL_39:
  v10 = &v43;
LABEL_40:
  WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v10, (unint64_t)&v45);
LABEL_41:
  if (*(_BYTE *)(a1 + 2) == 2)
  {
    JSC::Yarr::CharacterClassConstructor::asciiOpSorted(a1, (unsigned int *)v43, HIDWORD(v44), 0, 0, a6, a7, a8);
    JSC::Yarr::CharacterClassConstructor::unicodeOpSorted(a1, (unsigned int *)&v41, (uint64_t)v40, v27, v28, v29);
  }
  if (v41)
    WTF::fastFree((unint64_t)v41, a2, a3, a4, a5, a6, a7, a8);
  if (v43)
    WTF::fastFree((unint64_t)v43, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *JSC::Yarr::CharacterClassConstructor::addSorted(unint64_t *result, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  char v6;
  unint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _DWORD *v29;
  unsigned int v30;

  v30 = a3;
  v5 = *(unsigned int *)(a2 + 12);
  if (a3 < 0x10000)
    v6 = 1;
  else
    v6 = 2;
  *((_BYTE *)result + 3) |= v6;
  if ((_DWORD)v5)
  {
    v7 = result;
    v8 = 0;
    v9 = *(_QWORD *)a2;
    v10 = v5;
    do
    {
      v11 = v8 + (v10 >> 1);
      if (v5 <= v11)
        goto LABEL_42;
      v12 = *(_DWORD *)(v9 + 4 * v11);
      v13 = v12 - a3;
      if (v12 == a3)
        return result;
      if (v13 >= 1)
      {
        v10 >>= 1;
        if (v13 == 1)
        {
          memmove((void *)(v9 + 4 * v11), (const void *)(v9 + 4 * v11 + 4), 4 * v5 - (4 * v11 + 4));
          v15 = (*(_DWORD *)(a2 + 12) - 1);
          *(_DWORD *)(a2 + 12) = v15;
          v16 = a3;
          if ((_DWORD)v11)
          {
            if (v15 <= (int)v11 - 1)
            {
LABEL_42:
              __break(0xC471u);
              JUMPOUT(0x198EF93E8);
            }
            v29 = (_DWORD *)(*(_QWORD *)a2 + 4 * (v11 - 1));
            v16 = a3;
            if (*v29 == a3 - 1)
            {
              memmove(v29, v29 + 1, *(_QWORD *)a2 + 4 * v15 - (_QWORD)(v29 + 1));
              --*(_DWORD *)(a2 + 12);
              v16 = a3 - 1;
            }
          }
          v17 = a3 + 1;
          if (a3 <= 0x7F)
            v18 = (uint64_t)(v7 + 5);
          else
            v18 = (uint64_t)(v7 + 9);
          v19 = v7;
          return JSC::Yarr::CharacterClassConstructor::addSortedRange(v19, v18, v16, v17);
        }
      }
      else
      {
        if (v13 == -1)
        {
          memmove((void *)(v9 + 4 * v11), (const void *)(v9 + 4 * v11 + 4), 4 * v5 - (4 * v11 + 4));
          v26 = (*(_DWORD *)(a2 + 12) - 1);
          *(_DWORD *)(a2 + 12) = v26;
          v17 = a3;
          if (v26 > (int)v11 + 1)
          {
            v27 = (unsigned int *)(*(_QWORD *)a2 + 4 * (v11 + 1));
            v28 = *v27;
            v17 = a3;
            if (*v27 == a3 + 1)
            {
              memmove(v27, v27 + 1, *(_QWORD *)a2 + 4 * v26 - (_QWORD)(v27 + 1));
              --*(_DWORD *)(a2 + 12);
              v17 = v28;
            }
          }
          if (a3 <= 0x7F)
            v18 = (uint64_t)(v7 + 5);
          else
            v18 = (uint64_t)(v7 + 9);
          v19 = v7;
          v16 = a3 - 1;
          return JSC::Yarr::CharacterClassConstructor::addSortedRange(v19, v18, v16, v17);
        }
        v14 = (v10 >> 1) + 1;
        v8 += v14;
        v10 -= v14;
      }
    }
    while (v10);
    if ((_DWORD)v5 == v8)
    {
      v20 = v5;
      goto LABEL_21;
    }
    v23 = v8;
    if ((_DWORD)v5 == *(_DWORD *)(a2 + 8))
    {
      v5 = *(unsigned int *)(a2 + 12);
      v9 = *(_QWORD *)a2;
    }
    else
    {
      v24 = &v30;
    }
    v25 = (_DWORD *)(v9 + 4 * v23);
    result = (unint64_t *)memmove(v25 + 1, v25, v9 + 4 * v5 - (_QWORD)v25);
    *v25 = *v24;
    v21 = *(_DWORD *)(a2 + 12) + 1;
  }
  else
  {
    v20 = 0;
LABEL_21:
    if ((_DWORD)v5 == *(_DWORD *)(a2 + 8))
    {
      v22 = *(unsigned int *)(a2 + 12);
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v22) = *(_DWORD *)result;
      *(_DWORD *)(a2 + 12) = v22 + 1;
      return result;
    }
    v21 = v5 + 1;
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v20) = a3;
  }
  *(_DWORD *)(a2 + 12) = v21;
  return result;
}

unint64_t *JSC::Yarr::CharacterClassConstructor::putUnicodeIgnoreCase(unint64_t *result, unsigned int a2, uint64_t a3)
{
  unint64_t *v4;
  _UNKNOWN **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v4 = result;
  if (*(_DWORD *)(a3 + 12) == 1)
  {
    v5 = &JSC::Yarr::unicodeCharacterSetInfo;
    if (!*((_DWORD *)result + 1))
      v5 = &JSC::Yarr::ucs2CharacterSetInfo;
    v6 = (unsigned int *)v5[*(unsigned int *)(a3 + 8)];
    v7 = *v6;
    if (*v6)
    {
      v8 = v6 + 1;
      do
      {
        if (v7 >= 0x80)
          v9 = (uint64_t)(v4 + 7);
        else
          v9 = (uint64_t)(v4 + 3);
        result = JSC::Yarr::CharacterClassConstructor::addSorted(v4, v9, v7);
        v10 = *v8++;
        v7 = v10;
      }
      while (v10);
    }
  }
  else
  {
    if (a2 <= 0x7F)
      v12 = (uint64_t)(result + 3);
    else
      v12 = (uint64_t)(result + 7);
    JSC::Yarr::CharacterClassConstructor::addSorted(result, v12, a2);
    switch(*(_DWORD *)(a3 + 12))
    {
      case 2:
        v13 = *(_DWORD *)(a3 + 8) + a2;
        break;
      case 3:
        v13 = a2 - *(_DWORD *)(a3 + 8);
        break;
      case 4:
        v13 = a2 ^ 1;
        break;
      case 5:
        v13 = ((a2 - 1) ^ 1) + 1;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198EF952CLL);
    }
    if (v13 <= 0x7F)
      v14 = (uint64_t)(v4 + 3);
    else
      v14 = (uint64_t)(v4 + 7);
    return JSC::Yarr::CharacterClassConstructor::addSorted(v4, v14, v13);
  }
  return result;
}

void WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v9 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v9)
  {
    v10 = *a1;
    v11 = 16 * v9;
    do
    {
      v12 = *(_QWORD *)v10;
      if (*(_QWORD *)v10)
      {
        *(_QWORD *)v10 = 0;
        *(_DWORD *)(v10 + 8) = 0;
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      v10 += 16;
      v11 -= 16;
    }
    while (v11);
  }
  *((_DWORD *)a1 + 3) = 0;
}

_DWORD *WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;
  uint64_t v4;

  v4 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

void JSC::Yarr::CharacterClassConstructor::asciiOpSorted(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int8x16_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  int8x16_t v52;
  int8x16_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;

  v56 = 0;
  v57 = 0;
  v54 = 0;
  v55 = 0;
  v53 = 0uLL;
  v52 = 0uLL;
  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9)
  {
    v10 = *(unsigned int **)(a1 + 24);
    v11 = 4 * v9;
    do
    {
      v12 = *v10;
      if (v12 >= 0x80)
        goto LABEL_34;
      *(uint64_t *)((char *)v53.i64 + ((v12 >> 3) & 0x1FFFFFF8)) |= 1 << v12;
      ++v10;
      v11 -= 4;
    }
    while (v11);
  }
  v13 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v13)
  {
    v14 = *(unsigned int **)(a1 + 40);
    v15 = &v14[2 * v13];
    while (1)
    {
      v16 = *v14;
      v17 = v14[1];
      if (v16 <= v17)
        break;
LABEL_14:
      v14 += 2;
      if (v14 == v15)
        goto LABEL_15;
    }
    if (v16 <= 0x80)
      v18 = 128;
    else
      v18 = v16;
    v19 = v17 + 1;
    while (v18 != v16)
    {
      *(uint64_t *)((char *)v53.i64 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (v19 == ++v16)
        goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_15:
  if ((_DWORD)a3)
  {
    v20 = 4 * a3;
    do
    {
      v21 = *a2;
      if (v21 >= 0x80)
        goto LABEL_34;
      *(uint64_t *)((char *)v52.i64 + ((v21 >> 3) & 0x1FFFFFF8)) |= 1 << v21;
      ++a2;
      v20 -= 4;
    }
    while (v20);
  }
  if ((_DWORD)a5)
  {
    v22 = &a4[2 * a5];
    while (1)
    {
      v23 = *a4;
      v24 = a4[1];
      if (v23 <= v24)
        break;
LABEL_28:
      a4 += 2;
      if (a4 == v22)
        goto LABEL_29;
    }
    if (v23 <= 0x80)
      v25 = 128;
    else
      v25 = v23;
    v26 = v24 + 1;
    while (v25 != v23)
    {
      *(uint64_t *)((char *)v52.i64 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      if (v26 == ++v23)
        goto LABEL_28;
    }
LABEL_34:
    __break(1u);
LABEL_35:
    v28 = vandq_s8(v53, v52);
    goto LABEL_36;
  }
LABEL_29:
  v27 = *(unsigned __int8 *)(a1 + 1);
  if (v27 < 2)
  {
    v28 = vorrq_s8(v53, v52);
    goto LABEL_36;
  }
  if (v27 == 2)
    goto LABEL_35;
  if (v27 != 3)
  {
    v29 = v53.i64[0];
    if (!v53.i64[0])
      goto LABEL_40;
    goto LABEL_37;
  }
  v28 = vbicq_s8(v53, v52);
LABEL_36:
  v53 = v28;
  v29 = v28.i64[0];
  if (!v28.i64[0])
    goto LABEL_40;
LABEL_37:
  v30 = __clz(__rbit64(v29));
  if (v30 < 0x40)
  {
    v31 = 0;
    goto LABEL_43;
  }
LABEL_40:
  if (!v53.i64[1])
    goto LABEL_51;
  v30 = __clz(__rbit64(v53.u64[1]));
  if (v30 > 0x3F)
    goto LABEL_51;
  v31 = 64;
LABEL_43:
  v32 = v30 + v31;
  v51 = v32;
  if (v32 > 0x7E)
    goto LABEL_50;
  v33 = (v32 + 1) >> 6;
  v34 = v53.u64[v33];
  if (!v34 || (v35 = __clz(__rbit64(v34 >> ((v32 + 1) & 0x3F))) + (((_BYTE)v32 + 1) & 0x3F), v35 >= 0x40))
  {
    if (v32 > 0x3E)
      goto LABEL_50;
    v36 = v53.u64[++v33];
    if (!v36)
      goto LABEL_50;
    v35 = __clz(__rbit64(v36));
    if (v35 > 0x3F)
      goto LABEL_50;
  }
  v37 = v35 + (v33 << 6);
  if (v37 == 128)
    goto LABEL_50;
  v40 = v32;
  do
  {
    v41 = v37;
    if (v40 + 1 != (_DWORD)v37)
    {
      if ((_DWORD)v32 == v40)
      {
        v42 = HIDWORD(v57);
        if (HIDWORD(v57) == (_DWORD)v57)
        {
          WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v56, (unint64_t)&v51);
        }
        else
        {
          *(_DWORD *)(v56 + 4 * HIDWORD(v57)) = v32;
          HIDWORD(v57) = v42 + 1;
        }
      }
      else
      {
        v58 = __PAIR64__(v40, v32);
        v43 = HIDWORD(v55);
        if (HIDWORD(v55) == (_DWORD)v55)
        {
          WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>((uint64_t)&v54, (unint64_t)&v58);
        }
        else
        {
          *(_QWORD *)(v54 + 8 * HIDWORD(v55)) = v58;
          HIDWORD(v55) = v43 + 1;
        }
      }
      v51 = v37;
      LODWORD(v32) = v37;
    }
    v44 = v37 + 1;
    if (v37 + 1 > 0x7F)
      break;
    v45 = v44 >> 6;
    v46 = v53.u64[v44 >> 6];
    if (!v46 || (v47 = __clz(__rbit64(v46 >> (v44 & 0x3F))) + (v44 & 0x3F), v47 >= 0x40))
    {
      if (v44 > 0x3F)
        break;
      v48 = v53.u64[++v45];
      if (!v48)
        break;
      v47 = __clz(__rbit64(v48));
      if (v47 > 0x3F)
        break;
    }
    v37 = v47 + (v45 << 6);
    v40 = v41;
  }
  while (v37 != 128);
  if ((_DWORD)v32 == v41)
  {
    v49 = HIDWORD(v57);
    if (HIDWORD(v57) == (_DWORD)v57)
    {
LABEL_50:
      WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v56, (unint64_t)&v51);
      goto LABEL_51;
    }
    *(_DWORD *)(v56 + 4 * HIDWORD(v57)) = v41;
    HIDWORD(v57) = v49 + 1;
  }
  else
  {
    v58 = __PAIR64__(v41, v32);
    v50 = HIDWORD(v55);
    if (HIDWORD(v55) == (_DWORD)v55)
    {
      WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>((uint64_t)&v54, (unint64_t)&v58);
    }
    else
    {
      *(_QWORD *)(v54 + 8 * HIDWORD(v55)) = v58;
      HIDWORD(v55) = v50 + 1;
    }
  }
LABEL_51:
  v38 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v56;
  *(_QWORD *)(a1 + 32) = v57;
  v39 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v54;
  *(_QWORD *)(a1 + 48) = v55;
  if (!v39)
  {
    if (!v38)
      return;
LABEL_55:
    WTF::fastFree(v38, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    return;
  }
  WTF::fastFree(v39, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (v38)
    goto LABEL_55;
}

void JSC::Yarr::CharacterClassConstructor::unicodeOpSorted(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int8x16_t *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int8x16_t v18;
  BOOL v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  unsigned int *v69;
  uint64_t v70;
  int v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD v109[3];

  v6 = a1;
  v7 = &v73;
  v108 = 0;
  v107 = 0;
  v106 = 0;
  v105 = 0;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v8 = 0x7FFFFFFF;
  v9 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v9)
  {
    if (**(_DWORD **)(a1 + 56) >= 0x7FFFFFFFu)
      v8 = 0x7FFFFFFF;
    else
      v8 = **(_DWORD **)(a1 + 56);
  }
  if (*(_DWORD *)(a1 + 84) && **(_DWORD **)(a1 + 72) < v8)
    v8 = **(_DWORD **)(a1 + 72);
  v10 = a2[3];
  if ((_DWORD)v10 && **(_DWORD **)a2 < v8)
    v8 = **(_DWORD **)a2;
  v11 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v11 && **(_DWORD **)a3 < v8)
    v8 = **(_DWORD **)a3;
  if (v8 != 0x7FFFFFFF)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = -v8;
    v17 = &v89.i64[1];
    v18 = 0uLL;
    v70 = a3;
    v69 = a2;
    while (1)
    {
      if (v15 >= v9
        && (v14 >= *(unsigned int *)(v6 + 84) ? (v19 = v13 >= v10) : (v19 = 0), v19 ? (v20 = v12 >= v11) : (v20 = 0), v20)
        || v13 >= v10 && v12 > v11 && *(_BYTE *)(v6 + 1) == 2)
      {
LABEL_215:
        v66 = *(_QWORD *)(v6 + 56);
        *(_QWORD *)(v6 + 56) = v107;
        *(_QWORD *)(v6 + 64) = v108;
        v67 = *(_QWORD *)(v6 + 72);
        *(_QWORD *)(v6 + 72) = v105;
        *(_QWORD *)(v6 + 80) = v106;
        if (v67)
          WTF::fastFree(v67, a2, a3, (uint64_t)&v73, v6, a6, v16, (uint64_t)&v89.i64[1]);
        if (v66)
          WTF::fastFree(v66, a2, a3, (uint64_t)v7, v6, a6, v16, (uint64_t)v17);
        return;
      }
      v21 = v8 + 2047;
      if (v15 < v9)
      {
        v22 = *(_QWORD *)(v6 + 56);
        while (1)
        {
          v23 = *(_DWORD *)(v22 + 4 * v15);
          if (v23 > v21)
            break;
          v24 = v23 - v8;
          if (v24 >= 0x800)
          {
LABEL_214:
            __break(1u);
            goto LABEL_215;
          }
          *(uint64_t *)((char *)v89.i64 + ((v24 >> 3) & 0x1FFFFFF8)) |= 1 << v24;
          if (v9 == ++v15)
          {
            v15 = v9;
            break;
          }
        }
      }
      v25 = *(unsigned int *)(v6 + 84);
      if (v14 < v25)
      {
        v26 = *(_QWORD *)(v6 + 72);
        while (1)
        {
          v27 = (unsigned int *)(v26 + 8 * v14);
          v28 = *v27;
          if (*v27 > v21)
            break;
          v29 = v27[1];
          if (v8 <= v28)
            v30 = v28;
          else
            v30 = v8;
          if (v21 >= v29)
            v31 = v29;
          else
            v31 = v8 + 2047;
          if (v30 <= v31)
          {
            if (v28 <= v8)
              v28 = v8;
            v32 = v16 + v28;
            while (v32 < 0x800)
            {
              v33 = (v32 >> 3) & 0x1FFFFFFFFFFFFFF8;
              a6 = *(uint64_t *)((char *)v89.i64 + v33);
              *(uint64_t *)((char *)v89.i64 + v33) = a6 | (1 << v32);
              ++v30;
              ++v32;
              if (v30 > v31)
                goto LABEL_48;
            }
            goto LABEL_214;
          }
LABEL_48:
          if (v21 < v29)
            break;
          if (++v14 == v25)
          {
            v14 = v25;
            break;
          }
        }
      }
      if (v13 < v10)
      {
        v34 = *(unsigned int **)a2;
        while (1)
        {
          v35 = v34[v13];
          if (v35 > v21)
            break;
          v36 = v35 - v8;
          if (v36 >= 0x800)
            goto LABEL_214;
          *(uint64_t *)((char *)v73.i64 + ((v36 >> 3) & 0x1FFFFFF8)) |= 1 << v36;
          if (v10 == ++v13)
          {
            v13 = v10;
            break;
          }
        }
      }
      if (v12 < v11)
      {
        v37 = *(unsigned int **)a3;
        while (1)
        {
          v38 = &v37[2 * v12];
          v39 = *v38;
          if (*v38 > v21)
            break;
          v40 = v38[1];
          if (v8 <= v39)
            v41 = v39;
          else
            v41 = v8;
          if (v21 >= v40)
            v42 = v40;
          else
            v42 = v8 + 2047;
          if (v41 <= v42)
          {
            if (v39 <= v8)
              v39 = v8;
            v43 = v16 + v39;
            while (v43 < 0x800)
            {
              *(uint64_t *)((char *)v73.i64 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v43;
              ++v41;
              ++v43;
              if (v41 > v42)
                goto LABEL_72;
            }
            goto LABEL_214;
          }
LABEL_72:
          if (v21 < v40)
            break;
          if (++v12 == v11)
          {
            v12 = v11;
            break;
          }
        }
      }
      v44 = *(unsigned __int8 *)(v6 + 1);
      if (v44 < 2)
        break;
      if (v44 == 2)
      {
        v89 = vandq_s8(v89, v73);
        v90 = vandq_s8(v90, v74);
        v91 = vandq_s8(v91, v75);
        v92 = vandq_s8(v92, v76);
        v93 = vandq_s8(v93, v77);
        v94 = vandq_s8(v94, v78);
        v95 = vandq_s8(v95, v79);
        v96 = vandq_s8(v96, v80);
        v97 = vandq_s8(v97, v81);
        v98 = vandq_s8(v98, v82);
        v99 = vandq_s8(v99, v83);
        v100 = vandq_s8(v100, v84);
        v45 = v104.i64[0] & v88.i64[0];
        v46 = v104.i64[1] & v88.i64[1];
        v101 = vandq_s8(v101, v85);
        v102 = vandq_s8(v102, v86);
        v47 = vandq_s8(v103, v87);
        goto LABEL_81;
      }
      if (v44 == 3)
      {
        v89 = vbicq_s8(v89, v73);
        v90 = vbicq_s8(v90, v74);
        v91 = vbicq_s8(v91, v75);
        v92 = vbicq_s8(v92, v76);
        v93 = vbicq_s8(v93, v77);
        v94 = vbicq_s8(v94, v78);
        v95 = vbicq_s8(v95, v79);
        v96 = vbicq_s8(v96, v80);
        v97 = vbicq_s8(v97, v81);
        v98 = vbicq_s8(v98, v82);
        v99 = vbicq_s8(v99, v83);
        v100 = vbicq_s8(v100, v84);
        v45 = v104.i64[0] & ~v88.i64[0];
        v46 = v104.i64[1] & ~v88.i64[1];
        v101 = vbicq_s8(v101, v85);
        v102 = vbicq_s8(v102, v86);
        v47 = vbicq_s8(v103, v87);
LABEL_81:
        v103 = v47;
        v104.i64[0] = v45;
        v104.i64[1] = v46;
      }
      v72 = 0;
      if (v89.i64[0] && (v48 = __clz(__rbit64(v89.u64[0])), v48 < 0x40))
      {
        v49 = 0;
      }
      else if (v89.i64[1] && (v48 = __clz(__rbit64(v89.u64[1])), v48 < 0x40))
      {
        v49 = 64;
      }
      else if (v90.i64[0] && (v48 = __clz(__rbit64(v90.u64[0])), v48 < 0x40))
      {
        v49 = 128;
      }
      else if (v90.i64[1] && (v48 = __clz(__rbit64(v90.u64[1])), v48 < 0x40))
      {
        v49 = 192;
      }
      else if (v91.i64[0] && (v48 = __clz(__rbit64(v91.u64[0])), v48 < 0x40))
      {
        v49 = 256;
      }
      else if (v91.i64[1] && (v48 = __clz(__rbit64(v91.u64[1])), v48 < 0x40))
      {
        v49 = 320;
      }
      else if (v92.i64[0] && (v48 = __clz(__rbit64(v92.u64[0])), v48 < 0x40))
      {
        v49 = 384;
      }
      else if (v92.i64[1] && (v48 = __clz(__rbit64(v92.u64[1])), v48 < 0x40))
      {
        v49 = 448;
      }
      else if (v93.i64[0] && (v48 = __clz(__rbit64(v93.u64[0])), v48 < 0x40))
      {
        v49 = 512;
      }
      else if (v93.i64[1] && (v48 = __clz(__rbit64(v93.u64[1])), v48 < 0x40))
      {
        v49 = 576;
      }
      else if (v94.i64[0] && (v48 = __clz(__rbit64(v94.u64[0])), v48 < 0x40))
      {
        v49 = 640;
      }
      else if (v94.i64[1] && (v48 = __clz(__rbit64(v94.u64[1])), v48 < 0x40))
      {
        v49 = 704;
      }
      else if (v95.i64[0] && (v48 = __clz(__rbit64(v95.u64[0])), v48 < 0x40))
      {
        v49 = 768;
      }
      else if (v95.i64[1] && (v48 = __clz(__rbit64(v95.u64[1])), v48 < 0x40))
      {
        v49 = 832;
      }
      else if (v96.i64[0] && (v48 = __clz(__rbit64(v96.u64[0])), v48 < 0x40))
      {
        v49 = 896;
      }
      else if (v96.i64[1] && (v48 = __clz(__rbit64(v96.u64[1])), v48 < 0x40))
      {
        v49 = 960;
      }
      else
      {
        if (v97.i64[0] && (v48 = __clz(__rbit64(v97.u64[0])), v48 < 0x40))
        {
          v49 = 1024;
        }
        else if (v97.i64[1] && (v48 = __clz(__rbit64(v97.u64[1])), v48 < 0x40))
        {
          v49 = 1088;
        }
        else if (v98.i64[0] && (v48 = __clz(__rbit64(v98.u64[0])), v48 < 0x40))
        {
          v49 = 1152;
        }
        else if (v98.i64[1] && (v48 = __clz(__rbit64(v98.u64[1])), v48 < 0x40))
        {
          v49 = 1216;
        }
        else if (v99.i64[0] && (v48 = __clz(__rbit64(v99.u64[0])), v48 < 0x40))
        {
          v49 = 1280;
        }
        else if (v99.i64[1] && (v48 = __clz(__rbit64(v99.u64[1])), v48 < 0x40))
        {
          v49 = 1344;
        }
        else if (v100.i64[0] && (v48 = __clz(__rbit64(v100.u64[0])), v48 < 0x40))
        {
          v49 = 1408;
        }
        else if (v100.i64[1] && (v48 = __clz(__rbit64(v100.u64[1])), v48 < 0x40))
        {
          v49 = 1472;
        }
        else if (v101.i64[0] && (v48 = __clz(__rbit64(v101.u64[0])), v48 < 0x40))
        {
          v49 = 1536;
        }
        else if (v101.i64[1] && (v48 = __clz(__rbit64(v101.u64[1])), v48 < 0x40))
        {
          v49 = 1600;
        }
        else if (v102.i64[0] && (v48 = __clz(__rbit64(v102.u64[0])), v48 < 0x40))
        {
          v49 = 1664;
        }
        else if (v102.i64[1] && (v48 = __clz(__rbit64(v102.u64[1])), v48 < 0x40))
        {
          v49 = 1728;
        }
        else if (v103.i64[0] && (v48 = __clz(__rbit64(v103.u64[0])), v48 < 0x40))
        {
          v49 = 1792;
        }
        else if (v103.i64[1] && (v48 = __clz(__rbit64(v103.u64[1])), v48 < 0x40))
        {
          v49 = 1856;
        }
        else
        {
          if (!v104.i64[0] || (v48 = __clz(__rbit64(v104.u64[0])), v48 >= 0x40))
          {
            v7 = &v73;
            a3 = v70;
            v6 = a1;
            v17 = &v89.i64[1];
            a2 = v69;
            v18 = 0uLL;
            if (!v104.i64[1])
              goto LABEL_210;
            v48 = __clz(__rbit64(v104.u64[1]));
            if (v48 > 0x3F)
              goto LABEL_210;
            v49 = 1984;
            goto LABEL_176;
          }
          v49 = 1920;
        }
        a3 = v70;
        v6 = a1;
        v7 = &v73;
        v17 = &v89.i64[1];
        a2 = v69;
        v18 = 0uLL;
      }
LABEL_176:
      v50 = 0;
      v51 = 0;
      v52 = v48 + v49;
      v53 = 1;
      do
      {
        v54 = v8 + v52;
        if ((v53 & 1) != 0)
          goto LABEL_178;
        if (v54 != v51 + 1)
        {
          if (v50 == v51)
          {
            v61 = HIDWORD(v108);
            if (HIDWORD(v108) != (_DWORD)v108)
            {
              *(_DWORD *)(v107 + 4 * HIDWORD(v108)) = v50;
              HIDWORD(v108) = v61 + 1;
LABEL_178:
              v72 = v8 + v52;
              v50 = v8 + v52;
              goto LABEL_180;
            }
            v68 = v16;
            WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v107, (unint64_t)&v72);
          }
          else
          {
            v109[0] = __PAIR64__(v51, v50);
            v62 = HIDWORD(v106);
            if (HIDWORD(v106) != (_DWORD)v106)
            {
              *(_QWORD *)(v105 + 8 * HIDWORD(v106)) = v109[0];
              HIDWORD(v106) = v62 + 1;
              goto LABEL_178;
            }
            v68 = v16;
            WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>((uint64_t)&v105, (unint64_t)v109);
          }
          v18 = 0uLL;
          v17 = &v89.i64[1];
          a2 = v69;
          LODWORD(v16) = v68;
          a3 = v70;
          v6 = a1;
          v7 = &v73;
          goto LABEL_178;
        }
LABEL_180:
        v55 = v52 + 1;
        if (v52 + 1 > 0x7FF)
          break;
        v56 = v55 >> 6;
        if (v55 >> 6 <= 0x1F)
          v57 = 31;
        else
          v57 = v55 >> 6;
        v58 = v89.u64[v56];
        if (!v58 || (v59 = __clz(__rbit64(v58 >> (v55 & 0x3F))) + (v55 & 0x3F), v59 >= 0x40))
        {
          if (v55 > 0x7BF)
            break;
          while (1)
          {
            v60 = v89.u64[v56 + 1];
            if (v60)
            {
              v59 = __clz(__rbit64(v60));
              if (v59 < 0x40)
                break;
            }
            if (v57 == ++v56)
              goto LABEL_202;
          }
          ++v56;
        }
        v53 = 0;
        v52 = v59 + (v56 << 6);
        v51 = v54;
      }
      while (v52 != 2048);
LABEL_202:
      if (v50 == v54)
      {
        v63 = HIDWORD(v108);
        if (HIDWORD(v108) != (_DWORD)v108)
        {
          *(_DWORD *)(v107 + 4 * HIDWORD(v108)) = v54;
          HIDWORD(v108) = v63 + 1;
          goto LABEL_210;
        }
        v65 = v16;
        WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v107, (unint64_t)&v72);
LABEL_209:
        v18 = 0uLL;
        v17 = &v89.i64[1];
        a2 = v69;
        LODWORD(v16) = v65;
        a3 = v70;
        v6 = a1;
        v7 = &v73;
      }
      else
      {
        v109[0] = __PAIR64__(v54, v50);
        v64 = HIDWORD(v106);
        if (HIDWORD(v106) == (_DWORD)v106)
        {
          v65 = v16;
          WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::CharacterRange>((uint64_t)&v105, (unint64_t)v109);
          goto LABEL_209;
        }
        *(_QWORD *)(v105 + 8 * HIDWORD(v106)) = v109[0];
        HIDWORD(v106) = v64 + 1;
      }
LABEL_210:
      v8 += 2048;
      v103 = v18;
      v104 = v18;
      v101 = v18;
      v102 = v18;
      v99 = v18;
      v100 = v18;
      v97 = v18;
      v98 = v18;
      v95 = v18;
      v96 = v18;
      v93 = v18;
      v94 = v18;
      v91 = v18;
      v92 = v18;
      v89 = v18;
      v90 = v18;
      v73 = v18;
      v74 = v18;
      v75 = v18;
      v76 = v18;
      v77 = v18;
      v78 = v18;
      v79 = v18;
      v80 = v18;
      v81 = v18;
      v82 = v18;
      v83 = v18;
      v84 = v18;
      v85 = v18;
      v86 = v18;
      v87 = v18;
      v88 = v18;
      v9 = *(unsigned int *)(v6 + 68);
      v10 = a2[3];
      v16 = (v16 - 2048);
      v11 = *(unsigned int *)(a3 + 12);
    }
    v89 = vorrq_s8(v89, v73);
    v90 = vorrq_s8(v90, v74);
    v91 = vorrq_s8(v91, v75);
    v92 = vorrq_s8(v92, v76);
    v93 = vorrq_s8(v93, v77);
    v94 = vorrq_s8(v94, v78);
    v95 = vorrq_s8(v95, v79);
    v96 = vorrq_s8(v96, v80);
    v97 = vorrq_s8(v97, v81);
    v98 = vorrq_s8(v98, v82);
    v99 = vorrq_s8(v99, v83);
    v100 = vorrq_s8(v100, v84);
    v45 = v104.i64[0] | v88.i64[0];
    v46 = v104.i64[1] | v88.i64[1];
    v101 = vorrq_s8(v101, v85);
    v102 = vorrq_s8(v102, v86);
    v47 = vorrq_s8(v103, v87);
    goto LABEL_81;
  }
}

unint64_t *JSC::Yarr::CharacterClassConstructor::addSortedRange(unint64_t *result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;

  v5 = *(unsigned int *)(a2 + 12);
  if (!HIWORD(a3))
    *((_BYTE *)result + 3) |= 1u;
  if (a4 >= 0x10000)
    *((_BYTE *)result + 3) |= 2u;
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(_QWORD *)a2;
    v8 = 1;
    while (1)
    {
      v9 = *(_DWORD *)(*(_QWORD *)a2 + v6);
      if (v9 > a4)
        break;
      v10 = *(_DWORD *)(*(_QWORD *)a2 + 4 + v6);
      if (v10 + 1 >= a3)
      {
        v17 = (unsigned int *)(v7 + v6);
        if (v9 >= a3)
          v18 = a3;
        else
          v18 = *(_DWORD *)(*(_QWORD *)a2 + v6);
        if (v10 <= a4)
          v19 = a4;
        else
          v19 = *(_DWORD *)(*(_QWORD *)a2 + 4 + v6);
        *v17 = v18;
        v17[1] = v19;
        if (v8 < v5)
        {
          while (v5 > v8 - 1)
          {
            v20 = *(_QWORD *)a2 + v6;
            result = (unint64_t *)(v20 + 8);
            v21 = *(_DWORD *)(v20 + 4);
            if (*(_DWORD *)(v20 + 8) <= v21 + 1)
            {
              v22 = *(_QWORD *)a2 + v6;
              if (v21 <= *(_DWORD *)(v22 + 12))
                v21 = *(_DWORD *)(v22 + 12);
              *(_DWORD *)(v20 + 4) = v21;
              if (8 * v5 - 16 != v6)
              {
                result = (unint64_t *)memmove(result, (const void *)(v22 + 16), 8 * (v5 - v8) - 8);
                LODWORD(v5) = *(_DWORD *)(a2 + 12);
              }
              v5 = (v5 - 1);
              *(_DWORD *)(a2 + 12) = v5;
              if (v8 < v5)
                continue;
            }
            return result;
          }
          __break(0xC471u);
        }
        return result;
      }
      v6 += 8;
      ++v8;
      if (8 * v5 == v6)
        goto LABEL_10;
    }
    if (v9 - 1 == a4)
    {
      *(_DWORD *)(v7 + v6) = a3;
      return result;
    }
    v23 = __PAIR64__(a4, a3);
    if ((_DWORD)v5 == *(_DWORD *)(a2 + 8))
    {
      result = (unint64_t *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v5 + 1, (unint64_t)&v23);
      v5 = *(unsigned int *)(a2 + 12);
      v7 = *(_QWORD *)a2;
    }
    else
    {
      result = &v23;
    }
    v13 = v6 - 8 * v5;
    if (v6 != 8 * v5)
    {
      v14 = (_QWORD *)(v7 + v6 + ((8 * v5 - v6) & 0xFFFFFFFFFFFFFFF8));
      v15 = (uint64_t *)(v7 + 8 * v5 - 8);
      do
      {
        v16 = *v15--;
        *v14-- = v16;
        v13 += 8;
      }
      while (v13);
    }
    *(_QWORD *)(v7 + v6) = *result;
  }
  else
  {
LABEL_10:
    v23 = __PAIR64__(a4, a3);
    if ((_DWORD)v5 == *(_DWORD *)(a2 + 8))
    {
      result = (unint64_t *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v5 + 1, (unint64_t)&v23);
      v5 = *(unsigned int *)(a2 + 12);
      v11 = *(_QWORD *)a2;
      v12 = *result;
    }
    else
    {
      v11 = *(_QWORD *)a2;
      v12 = v23;
    }
    *(_QWORD *)(v11 + 8 * v5) = v12;
  }
  ++*(_DWORD *)(a2 + 12);
  return result;
}

void JSC::Yarr::YarrPatternConstructor::atomCharacterClassEnd(JSC::Yarr::YarrPatternConstructor *this)
{
  _BYTE *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  JSC::Yarr::YarrPatternConstructor *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  JSC::Yarr::CharacterClass *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  __int16 v58;
  __int128 v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  __int16 v84;
  __int128 v85;
  WTF::StringImpl *v86;
  char v87;
  _BYTE v88[12];
  unsigned int v89;
  __int128 v90;
  __int128 v91;
  JSC::Yarr::CharacterClass *v92;
  JSC::Yarr::CharacterClass *v93;

  v2 = (_BYTE *)*((_QWORD *)this + 13);
  if ((*v2 & 8) != 0)
  {
    *((_BYTE *)this + 152) = 30;
    return;
  }
  JSC::Yarr::CharacterClassConstructor::charClass((JSC::Yarr::CharacterClassConstructor *)&v92, (uint64_t)v2);
  JSC::Yarr::CharacterClassConstructor::reset(*((JSC::Yarr::CharacterClassConstructor **)this + 13), v3, v4, v5, v6, v7, v8, v9);
  v17 = (unsigned int *)v92;
  v18 = *((_DWORD *)v92 + 3);
  if (*((_BYTE *)this + 153))
  {
    if (!v18)
    {
      LOBYTE(v18) = 2;
      goto LABEL_5;
    }
    *((_BYTE *)this + 152) = 30;
    goto LABEL_23;
  }
  if ((*((_BYTE *)v92 + 89) & 2) != 0)
  {
    v43 = this;
    v41 = *(_QWORD *)this;
    v42 = *((_QWORD *)v43 + 1);
    v44 = *(_QWORD *)(v41 + 128);
    if (!v44)
    {
      JSC::Yarr::anycharCreate((JSC::Yarr *)&v93);
      v52 = *(unsigned int *)(v41 + 84);
      if ((_DWORD)v52 == *(_DWORD *)(v41 + 80))
      {
        WTF::Vector<std::unique_ptr<JSC::Yarr::CharacterClass>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<JSC::Yarr::CharacterClass>>(v41 + 72, (unint64_t)&v93);
      }
      else
      {
        v53 = *(_QWORD *)(v41 + 72);
        v54 = v93;
        v93 = 0;
        *(_QWORD *)(v53 + 8 * v52) = v54;
        *(_DWORD *)(v41 + 84) = v52 + 1;
      }
      std::unique_ptr<JSC::Yarr::CharacterClass>::~unique_ptr[abi:sn180100](&v93, v45, v46, v47, v48, v49, v50, v51);
      v55 = *(unsigned int *)(v41 + 84);
      if (!(_DWORD)v55)
      {
        __break(0xC471u);
        goto LABEL_53;
      }
      v44 = *(_QWORD *)(*(_QWORD *)(v41 + 72) + 8 * v55 - 8);
      *(_QWORD *)(v41 + 128) = v44;
    }
    *(_WORD *)v88 = 4;
    *(_QWORD *)&v90 = v44;
    v88[2] = 0;
    *(_QWORD *)&v88[4] = 0x100000001;
    v56 = *(_DWORD *)(v42 + 12);
    if (v56 == *(_DWORD *)(v42 + 8))
    {
      WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::PatternTerm>(v42, (unint64_t)v88);
    }
    else
    {
      v57 = *(_QWORD *)v42 + 48 * v56;
      v58 = *(_WORD *)v88;
      *(_BYTE *)(v57 + 2) = v88[2];
      *(_WORD *)v57 = v58;
      *(_QWORD *)(v57 + 4) = 0x100000001;
      v59 = v91;
      *(_OWORD *)(v57 + 16) = v90;
      *(_OWORD *)(v57 + 32) = v59;
      ++*(_DWORD *)(v42 + 12);
    }
LABEL_23:
    v92 = 0;
    goto LABEL_12;
  }
  if (!v18)
  {
LABEL_5:
    v19 = *((_QWORD *)this + 1);
    v88[0] = 4;
    *(_WORD *)&v88[1] = v18;
    *(_QWORD *)&v90 = v92;
    *(_QWORD *)&v88[4] = 0x100000001;
    v20 = *(unsigned int *)(v19 + 12);
    if ((_DWORD)v20 == *(_DWORD *)(v19 + 8))
    {
      v39 = WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v19, v20 + 1, (unint64_t)v88);
      v21 = *(_QWORD *)v19 + 48 * *(unsigned int *)(v19 + 12);
      v40 = *(_WORD *)v39;
      *(_BYTE *)(v21 + 2) = *(_BYTE *)(v39 + 2);
      *(_WORD *)v21 = v40;
      *(_DWORD *)(v21 + 4) = *(_DWORD *)(v39 + 4);
      *(_DWORD *)(v21 + 8) = *(_DWORD *)(v39 + 8);
      v23 = *(_OWORD *)(v39 + 16);
      v24 = *(_OWORD *)(v39 + 32);
    }
    else
    {
      v21 = *(_QWORD *)v19 + 48 * v20;
      v22 = *(_WORD *)v88;
      *(_BYTE *)(v21 + 2) = v88[2];
      *(_WORD *)v21 = v22;
      *(_QWORD *)(v21 + 4) = 0x100000001;
      v23 = v90;
      v24 = v91;
    }
    *(_OWORD *)(v21 + 16) = v23;
    *(_OWORD *)(v21 + 32) = v24;
    ++*(_DWORD *)(v19 + 12);
    goto LABEL_8;
  }
  LOBYTE(v86) = 0;
  v87 = 0;
  JSC::Yarr::YarrPatternConstructor::atomParenthesesSubpatternBegin((uint64_t)this, 0, v86, 0, v13, v14, v15, v16);
  std::optional<WTF::String>::~optional((uint64_t)&v86, v60, v61, v62, v63, v64, v65, v66);
  v67 = v17[3];
  if ((_DWORD)v67)
  {
    v68 = 0;
    v69 = v17[3];
    while (1)
    {
      if (v68)
      {
        JSC::Yarr::YarrPatternConstructor::disjunction((uint64_t *)this);
        v69 = v17[3];
      }
      if (v68 >= v69)
        break;
      WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v88, *(_QWORD *)v17 + 16 * v68);
      v77 = *(unsigned int **)v88;
      if (v89)
      {
        v78 = 4 * v89;
        do
        {
          v79 = *v77++;
          JSC::Yarr::YarrPatternConstructor::atomPatternCharacter((uint64_t *)this, v79);
          v78 -= 4;
        }
        while (v78);
        v77 = *(unsigned int **)v88;
      }
      if (v77)
      {
        memset(v88, 0, sizeof(v88));
        WTF::fastFree((unint64_t)v77, v70, v71, v72, v73, v74, v75, v76);
      }
      ++v68;
      v69 = v17[3];
      if (v68 >= v69)
        goto LABEL_39;
    }
    __break(0xC471u);
LABEL_53:
    JUMPOUT(0x198EFABF8);
  }
LABEL_39:
  if (v17[7] || v17[11] || v17[15] || v17[19])
  {
    if (v67)
      JSC::Yarr::YarrPatternConstructor::disjunction((uint64_t *)this);
    v80 = *((_QWORD *)this + 1);
    v81 = *((_BYTE *)this + 153);
    v88[0] = 4;
    *(_WORD *)&v88[1] = (2 * v81);
    *(_QWORD *)&v90 = v17;
    *(_QWORD *)&v88[4] = 0x100000001;
    v82 = *(_DWORD *)(v80 + 12);
    if (v82 == *(_DWORD *)(v80 + 8))
    {
      WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::PatternTerm>(v80, (unint64_t)v88);
    }
    else
    {
      v83 = *(_QWORD *)v80 + 48 * v82;
      v84 = *(_WORD *)v88;
      *(_BYTE *)(v83 + 2) = v88[2];
      *(_WORD *)v83 = v84;
      *(_QWORD *)(v83 + 4) = 0x100000001;
      v85 = v91;
      *(_OWORD *)(v83 + 16) = v90;
      *(_OWORD *)(v83 + 32) = v85;
      ++*(_DWORD *)(v80 + 12);
    }
  }
  JSC::Yarr::YarrPatternConstructor::atomParenthesesEnd(this);
LABEL_8:
  v25 = *(_QWORD *)this;
  v26 = *(unsigned int *)(v25 + 84);
  if ((_DWORD)v26 != *(_DWORD *)(v25 + 80))
  {
    *(_QWORD *)(*(_QWORD *)(v25 + 72) + 8 * v26) = v17;
    *(_DWORD *)(v25 + 84) = v26 + 1;
    return;
  }
  v27 = (uint64_t *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 72, v26 + 1, (unint64_t)&v92);
  v28 = *(unsigned int *)(v25 + 84);
  v29 = *(_QWORD *)(v25 + 72);
  v30 = *v27;
  *v27 = 0;
  *(_QWORD *)(v29 + 8 * v28) = v30;
  *(_DWORD *)(v25 + 84) = v28 + 1;
  v17 = (unsigned int *)v92;
  v92 = 0;
  if (v17)
  {
LABEL_12:
    JSC::Yarr::CharacterClass::~CharacterClass((JSC::Yarr::CharacterClass *)v17, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
  }
}

double JSC::Yarr::CharacterClassConstructor::charClass(JSC::Yarr::CharacterClassConstructor *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  double result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a2 + 40;
  JSC::Yarr::CharacterClassConstructor::coalesceTables(void)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1}::operator()((unsigned int *)(a2 + 24), (_DWORD *)(a2 + 40));
  v5 = a2 + 72;
  JSC::Yarr::CharacterClassConstructor::coalesceTables(void)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1}::operator()((unsigned int *)(a2 + 56), (_DWORD *)(a2 + 72));
  if (!*(_DWORD *)(a2 + 36)
    && !*(_DWORD *)(a2 + 68)
    && *(_DWORD *)(a2 + 52) == 1
    && *(_DWORD *)(a2 + 84) == 1
    && !**(_DWORD **)v4
    && *(_DWORD *)(*(_QWORD *)v4 + 4) == 127
    && **(_DWORD **)v5 == 128
    && *(_DWORD *)(*(_QWORD *)v5 + 4) == 1114111)
  {
    *(_BYTE *)a2 |= 2u;
  }
  v12 = *(_DWORD *)(a2 + 20);
  if (v12)
    JSC::Yarr::CharacterClassConstructor::sort(*(int **)(a2 + 8), v12, v6, v7, v8, v9, v10, v11);
  v13 = WTF::fastMalloc((WTF *)0x60);
  result = 0.0;
  *(_OWORD *)(v13 + 73) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)v13 = 0u;
  *(_BYTE *)(v13 + 89) &= ~2u;
  *(_QWORD *)this = v13;
  *(_QWORD *)v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  v15 = *(_DWORD *)(v13 + 12);
  *(_DWORD *)(v13 + 12) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = v15;
  v16 = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v16;
  LODWORD(v16) = *(_DWORD *)(v13 + 24);
  *(_DWORD *)(v13 + 24) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v16;
  LODWORD(v16) = *(_DWORD *)(v13 + 28);
  *(_DWORD *)(v13 + 28) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v16;
  v17 = *(_QWORD *)(v13 + 32);
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v17;
  LODWORD(v17) = *(_DWORD *)(v13 + 40);
  *(_DWORD *)(v13 + 40) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = v17;
  LODWORD(v17) = *(_DWORD *)(v13 + 44);
  *(_DWORD *)(v13 + 44) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = v17;
  v18 = *(_QWORD *)(v13 + 48);
  *(_QWORD *)(v13 + 48) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v18;
  LODWORD(v18) = *(_DWORD *)(v13 + 56);
  *(_DWORD *)(v13 + 56) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v18;
  LODWORD(v18) = *(_DWORD *)(v13 + 60);
  *(_DWORD *)(v13 + 60) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = v18;
  v19 = *(_QWORD *)(v13 + 64);
  *(_QWORD *)(v13 + 64) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v19;
  LODWORD(v19) = *(_DWORD *)(v13 + 72);
  *(_DWORD *)(v13 + 72) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = v19;
  LODWORD(v19) = *(_DWORD *)(v13 + 76);
  *(_DWORD *)(v13 + 76) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = v19;
  *(_BYTE *)(v13 + 89) = *(_BYTE *)(v13 + 89) & 0xFD | *(_BYTE *)a2 & 2;
  *(_BYTE *)(v13 + 88) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)a2 &= ~2u;
  *(_BYTE *)(a2 + 3) = 0;
  return result;
}

void JSC::Yarr::CharacterClassConstructor::reset(JSC::Yarr::CharacterClassConstructor *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (*((_DWORD *)this + 4))
  {
    v9 = (unint64_t *)((char *)this + 8);
    if (*((_DWORD *)this + 5))
      WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t *)this + 1, a2, a3, a4, a5, a6, a7, a8);
    v10 = *v9;
    if (*v9)
    {
      *((_QWORD *)this + 1) = 0;
      *((_DWORD *)this + 4) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*((_DWORD *)this + 8))
  {
    if (*((_DWORD *)this + 9))
      *((_DWORD *)this + 9) = 0;
    v11 = *((_QWORD *)this + 3);
    if (v11)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*((_DWORD *)this + 12))
  {
    if (*((_DWORD *)this + 13))
      *((_DWORD *)this + 13) = 0;
    v12 = *((_QWORD *)this + 5);
    if (v12)
    {
      *((_QWORD *)this + 5) = 0;
      *((_DWORD *)this + 12) = 0;
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*((_DWORD *)this + 16))
  {
    if (*((_DWORD *)this + 17))
      *((_DWORD *)this + 17) = 0;
    v13 = *((_QWORD *)this + 7);
    if (v13)
    {
      *((_QWORD *)this + 7) = 0;
      *((_DWORD *)this + 16) = 0;
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*((_DWORD *)this + 20))
  {
    if (*((_DWORD *)this + 21))
      *((_DWORD *)this + 21) = 0;
    v14 = *((_QWORD *)this + 9);
    if (v14)
    {
      *((_QWORD *)this + 9) = 0;
      *((_DWORD *)this + 20) = 0;
      WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *((_BYTE *)this + 1) = 0;
  *(_BYTE *)this &= 0xF1u;
  *((_BYTE *)this + 3) = 0;
}

void JSC::Yarr::CharacterClassConstructor::sort(int *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;

  v8 = 126 - 2 * __clz(a2);
  if (a2)
    v9 = v8;
  else
    v9 = 0;
  std::__introsort<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*,false>(a1, (uint64_t *)&a1[4 * a2], v9, 1, a5, a6, a7, a8);
}

unsigned int *JSC::Yarr::CharacterClassConstructor::coalesceTables(void)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1}::operator()(unsigned int *result, _DWORD *a2)
{
  unsigned int v2;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  size_t v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;

  v2 = result[3];
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = result[3];
    while (a2[3])
    {
      if (v5 < v6)
      {
        v7 = **(_DWORD **)a2 - 1;
        result = (unsigned int *)(*(_QWORD *)v4 + 4 * v5);
        v8 = 4 * v6 - 4 * v5 - 4;
        while (*result < v7)
        {
          ++v5;
          ++result;
          v8 -= 4;
          if (v6 == v5)
          {
            v5 = v6;
            goto LABEL_11;
          }
        }
        if (*result == v7)
        {
          **(_DWORD **)a2 = v7;
          result = (unsigned int *)memmove(result, result + 1, v8);
          v2 = v4[3] - 1;
          v4[3] = v2;
        }
      }
LABEL_11:
      if (v5 < v2)
      {
        if (!a2[3])
        {
          __break(0xC471u);
          return result;
        }
        v9 = *(_DWORD *)(*(_QWORD *)a2 + 4) + 1;
        result = (unsigned int *)(*(_QWORD *)v4 + 4 * v5);
        v10 = 4 * v2 - 4 * v5 - 4;
        while (*result < v9)
        {
          ++v5;
          ++result;
          v10 -= 4;
          if (v2 == v5)
          {
            v5 = v2;
            goto LABEL_17;
          }
        }
        if (*result == v9)
        {
          *(_DWORD *)(*(_QWORD *)a2 + 4) = v9;
          result = (unsigned int *)memmove(result, result + 1, v10);
          v2 = v4[3] - 1;
          v4[3] = v2;
          v11 = a2[3];
          if (v11 >= 2)
          {
            do
            {
              v12 = *(_DWORD **)a2;
              result = (unsigned int *)(*(_QWORD *)a2 + 8);
              v13 = *(_DWORD *)(*(_QWORD *)a2 + 4);
              if (*result > v13 + 1)
                break;
              if (v13 <= v12[3])
                v13 = v12[3];
              v12[1] = v13;
              if (v11 == 2)
              {
                a2[3] = 1;
                break;
              }
              result = (unsigned int *)memmove(result, v12 + 4, 8 * v11 - 16);
              v11 = a2[3] - 1;
              a2[3] = v11;
            }
            while (v11 > 1);
            v2 = v4[3];
          }
        }
        else
        {
          ++v5;
        }
      }
LABEL_17:
      v6 = v2;
      if (v5 >= v2)
        return result;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*,false>(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unint64_t i;
  BOOL v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  int v37;
  uint64_t *v38;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  uint64_t *v46;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t *v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  BOOL v60;
  unsigned int *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  BOOL v67;
  uint64_t v68;
  unsigned int **v69;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  BOOL v76;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  BOOL v88;
  int *v89;
  unsigned int *v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  BOOL v95;
  uint64_t *v96;
  unsigned int *v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  BOOL v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int *v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  BOOL v110;
  unsigned int *v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  BOOL v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  int v124;
  char v125;
  uint64_t *v126;
  BOOL v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  int v137;
  uint64_t *v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  BOOL v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  int64_t v149;
  unint64_t v150;
  uint64_t v151;
  int *v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int *v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  BOOL v161;
  int *v162;
  unsigned int v163;
  unsigned int *v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  BOOL v170;
  unint64_t v171;
  int *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  unsigned int *v179;
  unsigned int *v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  BOOL v184;
  unsigned int *v186;
  unsigned int *v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  BOOL v191;
  unint64_t v192;
  uint64_t v193;
  int64_t v194;
  int v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int64_t v200;
  unsigned int v201;
  unsigned int *v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  BOOL v208;
  unint64_t v209;
  unsigned int *v210;
  uint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  int *v216;
  uint64_t v217;
  unsigned int v218;
  unsigned int *v219;
  int v220;
  unint64_t v221;
  unsigned int *v223;
  unsigned int *v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  BOOL v228;
  unint64_t v229;
  unint64_t v230;
  BOOL v231;
  uint64_t v232;
  unsigned int v233;
  unsigned int v234;
  BOOL v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  int *v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  unsigned int *v247;
  int v248;
  unint64_t v249;
  int *v250;
  unsigned int v251;
  unsigned int *v252;
  unsigned int *v253;
  uint64_t v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  BOOL v258;
  unint64_t v259;
  BOOL v260;
  uint64_t v261;
  unsigned int v262;
  unsigned int v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  unsigned int **v267;
  unsigned int *v268;
  uint64_t v269;

  v8 = a4;
  v9 = a3;
  v10 = a2;
LABEL_2:
  v267 = (unsigned int **)(v10 - 2);
  v12 = (unint64_t)(v10 - 4);
  v13 = (uint64_t *)a1;
  while (2)
  {
    a1 = (int *)v13;
    v14 = (char *)v10 - (char *)v13;
    v15 = ((char *)v10 - (char *)v13) >> 4;
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v121 = *((unsigned int *)v10 - 1);
        v122 = *((_DWORD *)v13 + 3);
        if (v121 > v122)
        {
          i = *v13;
          v12 = *(v10 - 2);
          goto LABEL_188;
        }
        if ((_DWORD)v121)
          v236 = v121 >= v122;
        else
          v236 = 0;
        if (v236)
        {
          v237 = 0;
          v12 = *(v10 - 2);
          i = *v13;
          v238 = 4 * v121;
          do
          {
            v239 = *(_DWORD *)(v12 + v237);
            v240 = *(_DWORD *)(i + v237);
            v30 = v239 >= v240;
            if (v239 != v240)
              goto LABEL_391;
            v237 += 4;
          }
          while (v238 != v237);
        }
        return;
      case 3uLL:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>((int *)v13, (uint64_t)(v13 + 2), v267);
        return;
      case 4uLL:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>((int *)v13, (uint64_t)(v13 + 2), (uint64_t)(v13 + 4), v267);
        return;
      case 5uLL:
        std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>((int *)v13, (uint64_t)(v13 + 2), (uint64_t)(v13 + 4), (uint64_t)(v13 + 6), v267);
        return;
      default:
        if (v14 > 383)
        {
          if (!v9)
          {
            if (v13 == v10)
              return;
            v149 = (v15 - 2) >> 1;
            i = v149;
            do
            {
              v150 = i;
              if (v149 >= (uint64_t)i)
              {
                v151 = (2 * i) | 1;
                v152 = &a1[4 * v151];
                if ((uint64_t)(2 * v150 + 2) < (uint64_t)v15)
                {
                  v153 = v152[3];
                  v154 = v152[7];
                  if (v153 > v154)
                    goto LABEL_233;
                  if ((_DWORD)v153 && v153 >= v154)
                  {
                    v156 = *(unsigned int **)v152;
                    v157 = (unsigned int *)*((_QWORD *)v152 + 2);
                    while (1)
                    {
                      v159 = *v156++;
                      v158 = v159;
                      v160 = *v157++;
                      v161 = v158 >= v160;
                      if (v158 != v160)
                        break;
                      if (!--v153)
                        goto LABEL_245;
                    }
                    if (!v161)
                    {
LABEL_233:
                      v152 += 4;
                      v151 = 2 * v150 + 2;
                    }
                  }
                }
LABEL_245:
                v162 = &a1[4 * v150];
                v12 = v152[3];
                v163 = v162[3];
                if (v12 <= v163)
                {
                  v268 = *(unsigned int **)v162;
                  if (!(_DWORD)v12 || v12 < v163)
                    goto LABEL_257;
                  v165 = *(unsigned int **)v152;
                  v166 = *(unsigned int **)v162;
                  while (1)
                  {
                    v168 = *v165++;
                    v167 = v168;
                    v169 = *v166++;
                    v170 = v167 >= v169;
                    if (v167 != v169)
                      break;
                    if (!--v12)
                      goto LABEL_257;
                  }
                  if (v170)
                  {
LABEL_257:
                    v171 = 0;
                    v12 = v162[2];
                    v266 = v162[2];
                    *(_QWORD *)v162 = 0;
                    *((_QWORD *)v162 + 1) = 0;
                    while (1)
                    {
                      v172 = v152;
                      if (v171)
                      {
                        *(_QWORD *)v162 = 0;
                        v162[2] = 0;
                        WTF::fastFree(v171, a2, a3, a4, a5, a6, a7, a8);
                      }
                      v173 = *(_QWORD *)v172;
                      *(_QWORD *)v172 = 0;
                      *(_QWORD *)v162 = v173;
                      LODWORD(v173) = v172[2];
                      v172[2] = 0;
                      v162[2] = v173;
                      LODWORD(v173) = v172[3];
                      v172[3] = 0;
                      v162[3] = v173;
                      if (v149 < v151)
                        break;
                      v174 = 2 * v151;
                      v151 = (2 * v151) | 1;
                      v152 = &a1[4 * v151];
                      v175 = v174 + 2;
                      if (v175 < (uint64_t)v15)
                      {
                        v176 = v152[3];
                        v177 = v152[7];
                        if (v176 > v177)
                          goto LABEL_263;
                        if ((_DWORD)v176 && v176 >= v177)
                        {
                          v179 = *(unsigned int **)v152;
                          v180 = (unsigned int *)*((_QWORD *)v152 + 2);
                          while (1)
                          {
                            v182 = *v179++;
                            v181 = v182;
                            v183 = *v180++;
                            v184 = v181 >= v183;
                            if (v181 != v183)
                              break;
                            if (!--v176)
                              goto LABEL_275;
                          }
                          if (!v184)
                          {
LABEL_263:
                            v152 += 4;
                            v151 = v175;
                          }
                        }
                      }
LABEL_275:
                      v12 = v152[3];
                      if (v12 > v163)
                        break;
                      if (v12 >= v163 && (_DWORD)v12 != 0)
                      {
                        v186 = *(unsigned int **)v152;
                        v187 = v268;
                        do
                        {
                          v189 = *v186++;
                          v188 = v189;
                          v190 = *v187++;
                          v191 = v188 >= v190;
                          if (v188 != v190)
                            break;
                          --v12;
                        }
                        while (v12);
                        if (!v191)
                          break;
                      }
                      v171 = *(_QWORD *)v172;
                      v162 = v172;
                    }
                    v192 = *(_QWORD *)v172;
                    if (*(_QWORD *)v172)
                    {
                      *(_QWORD *)v172 = 0;
                      v172[2] = 0;
                      WTF::fastFree(v192, a2, a3, a4, a5, a6, a7, a8);
                    }
                    *(_QWORD *)v172 = v268;
                    v172[2] = v266;
                    v172[3] = v163;
                  }
                }
              }
              i = v150 - 1;
            }
            while (v150);
            v193 = (unint64_t)v14 >> 4;
            while (1)
            {
              v30 = 1;
              if (v193 <= 0)
                goto LABEL_390;
              if (v193 == 1)
                return;
              v194 = 0;
              v269 = *(_QWORD *)a1;
              v195 = a1[2];
              v196 = a1[3];
              v197 = (uint64_t)a1;
              *(_QWORD *)a1 = 0;
              *((_QWORD *)a1 + 1) = 0;
              do
              {
                v198 = v197 + 16 * v194 + 16;
                v199 = 2 * v194;
                v12 = (2 * v194) | 1;
                v194 = v12;
                v200 = v199 + 2;
                if (v200 < v193)
                {
                  v12 = *(unsigned int *)(v198 + 12);
                  v201 = *(_DWORD *)(v198 + 28);
                  if (v12 > v201)
                    goto LABEL_297;
                  if ((_DWORD)v12 && v12 >= v201)
                  {
                    v203 = *(unsigned int **)v198;
                    v204 = *(unsigned int **)(v198 + 16);
                    while (1)
                    {
                      v206 = *v203++;
                      v205 = v206;
                      v207 = *v204++;
                      v208 = v205 >= v207;
                      if (v205 != v207)
                        break;
                      if (!--v12)
                        goto LABEL_309;
                    }
                    if (!v208)
                    {
LABEL_297:
                      v198 += 16;
                      v194 = v200;
                    }
                  }
                }
LABEL_309:
                v209 = *(_QWORD *)v197;
                if (*(_QWORD *)v197)
                {
                  *(_QWORD *)v197 = 0;
                  *(_DWORD *)(v197 + 8) = 0;
                  WTF::fastFree(v209, a2, a3, a4, a5, a6, a7, a8);
                }
                v210 = *(unsigned int **)v198;
                *(_QWORD *)v198 = 0;
                *(_QWORD *)v197 = v210;
                LODWORD(v210) = *(_DWORD *)(v198 + 8);
                *(_DWORD *)(v198 + 8) = 0;
                *(_DWORD *)(v197 + 8) = (_DWORD)v210;
                LODWORD(v210) = *(_DWORD *)(v198 + 12);
                *(_DWORD *)(v198 + 12) = 0;
                *(_DWORD *)(v197 + 12) = (_DWORD)v210;
                v197 = v198;
              }
              while (v194 <= (uint64_t)((unint64_t)(v193 - 2) >> 1));
              v211 = v10 - 2;
              v212 = *(_QWORD *)v198;
              if ((uint64_t *)v198 == v10 - 2)
              {
                if (v212)
                {
                  *(_QWORD *)v198 = 0;
                  *(_DWORD *)(v198 + 8) = 0;
                  WTF::fastFree(v212, a2, a3, a4, a5, a6, a7, a8);
                }
                i = v269;
                *(_QWORD *)v198 = v269;
                *(_DWORD *)(v198 + 8) = v195;
                *(_DWORD *)(v198 + 12) = v196;
              }
              else
              {
                if (v212)
                {
                  *(_QWORD *)v198 = 0;
                  *(_DWORD *)(v198 + 8) = 0;
                  WTF::fastFree(v212, a2, a3, a4, a5, a6, a7, a8);
                }
                v213 = *(v10 - 2);
                *(v10 - 2) = 0;
                *(_QWORD *)v198 = v213;
                *(_DWORD *)(v198 + 8) = *((_DWORD *)v10 - 2);
                LODWORD(v213) = *((_DWORD *)v10 - 1);
                *((_DWORD *)v10 - 1) = 0;
                *(_DWORD *)(v198 + 12) = v213;
                v214 = *(v10 - 2);
                if (v214)
                {
                  *(v10 - 2) = 0;
                  *((_DWORD *)v10 - 2) = 0;
                  WTF::fastFree(v214, a2, a3, a4, a5, a6, a7, a8);
                }
                v12 = v269;
                *(v10 - 2) = v269;
                *((_DWORD *)v10 - 2) = v195;
                *((_DWORD *)v10 - 1) = v196;
                i = v198 + 16 - (_QWORD)a1;
                if ((uint64_t)i >= 17)
                {
                  i = (i >> 4) - 2;
                  v215 = i >> 1;
                  v216 = &a1[4 * (i >> 1)];
                  v217 = v216[3];
                  v218 = *(_DWORD *)(v198 + 12);
                  if (v217 <= v218)
                  {
                    if ((_DWORD)v217)
                      v231 = v217 >= v218;
                    else
                      v231 = 0;
                    if (!v231)
                      goto LABEL_350;
                    i = 0;
                    v12 = *(_QWORD *)v216;
                    v219 = *(unsigned int **)v198;
                    v232 = 4 * v217;
                    while (1)
                    {
                      v233 = *(_DWORD *)(v12 + i);
                      v234 = *(unsigned int *)((char *)v219 + i);
                      if (v233 != v234)
                        break;
                      i += 4;
                      if (v232 == i)
                        goto LABEL_350;
                    }
                    if (v233 >= v234)
                      goto LABEL_350;
                  }
                  else
                  {
                    v219 = *(unsigned int **)v198;
                  }
                  v220 = *(_DWORD *)(v198 + 8);
                  *(_QWORD *)v198 = 0;
                  *(_QWORD *)(v198 + 8) = 0;
                  while (1)
                  {
                    v221 = *(_QWORD *)v216;
                    *(_QWORD *)v216 = 0;
                    *(_QWORD *)v198 = v221;
                    LODWORD(v221) = v216[2];
                    v216[2] = 0;
                    *(_DWORD *)(v198 + 8) = v221;
                    i = v216[3];
                    v216[3] = 0;
                    *(_DWORD *)(v198 + 12) = i;
                    if (!v215)
                      break;
                    v215 = (v215 - 1) >> 1;
                    i = (unint64_t)&a1[4 * v215];
                    v12 = *(unsigned int *)(i + 12);
                    if (v12 <= v218)
                    {
                      if (v12 < v218 || (_DWORD)v12 == 0)
                        break;
                      v223 = *(unsigned int **)i;
                      v224 = v219;
                      while (1)
                      {
                        v226 = *v223++;
                        v225 = v226;
                        v227 = *v224++;
                        v228 = v225 >= v227;
                        if (v225 != v227)
                          break;
                        if (!--v12)
                          goto LABEL_337;
                      }
                      if (v228)
                        break;
                    }
                    v229 = *(_QWORD *)v216;
                    v198 = (uint64_t)v216;
                    v216 = &a1[4 * v215];
                    if (v229)
                    {
                      *(_QWORD *)v198 = 0;
                      *(_DWORD *)(v198 + 8) = 0;
                      WTF::fastFree(v229, a2, a3, a4, a5, a6, a7, a8);
                    }
                  }
LABEL_337:
                  v230 = *(_QWORD *)v216;
                  if (*(_QWORD *)v216)
                  {
                    *(_QWORD *)v216 = 0;
                    v216[2] = 0;
                    WTF::fastFree(v230, a2, a3, a4, a5, a6, a7, a8);
                  }
                  *(_QWORD *)v216 = v219;
                  v216[2] = v220;
                  v216[3] = v218;
                }
              }
LABEL_350:
              v10 = v211;
              if ((unint64_t)v193-- <= 2)
                return;
            }
          }
          v16 = (int *)&v13[2 * (v15 >> 1)];
          if ((unint64_t)v14 < 0x801)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(&a1[4 * (v15 >> 1)], (uint64_t)a1, v267);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(a1, (uint64_t)&a1[4 * (v15 >> 1)], v267);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(a1 + 4, (uint64_t)(v16 - 4), (unsigned int **)v10 - 4);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(a1 + 8, (uint64_t)&a1[4 * (v15 >> 1) + 4], (unsigned int **)v10 - 6);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(v16 - 4, (uint64_t)&a1[4 * (v15 >> 1)], (unsigned int **)&a1[4 * (v15 >> 1) + 4]);
            v17 = *(_QWORD *)a1;
            v12 = *(_QWORD *)v16;
            *(_QWORD *)a1 = *(_QWORD *)v16;
            *(_QWORD *)v16 = v17;
            v18 = *((_QWORD *)a1 + 1);
            *((_QWORD *)a1 + 1) = *((_QWORD *)v16 + 1);
            *((_QWORD *)v16 + 1) = v18;
          }
          --v9;
          if ((v8 & 1) == 0)
          {
            v22 = *(a1 - 1);
            v21 = a1[3];
            v20 = *(unsigned int **)a1;
            if (v22 > v21)
              goto LABEL_32;
            if ((_DWORD)v22 && v22 >= v21)
            {
              v23 = 0;
              v12 = *((_QWORD *)a1 - 2);
              v24 = 4 * v22;
              while (1)
              {
                v25 = *(_DWORD *)(v12 + v23);
                v26 = v20[v23 / 4];
                if (v25 != v26)
                  break;
                v23 += 4;
                if (v24 == v23)
                  goto LABEL_17;
              }
              if (v25 < v26)
              {
LABEL_32:
                v265 = v9;
                v19 = v8;
                goto LABEL_33;
              }
            }
LABEL_17:
            v27 = a1[2];
            *(_QWORD *)a1 = 0;
            *((_QWORD *)a1 + 1) = 0;
            v28 = *((_DWORD *)v10 - 1);
            if (v21 > v28)
              goto LABEL_18;
            if (!(_DWORD)v21 || v21 < v28)
              goto LABEL_123;
            v62 = *v267;
            v12 = (unint64_t)v20;
            v63 = v21;
            while (1)
            {
              v65 = *(_DWORD *)v12;
              v12 += 4;
              v64 = v65;
              v66 = *v62++;
              v67 = v64 >= v66;
              if (v64 != v66)
                break;
              if (!--v63)
                goto LABEL_123;
            }
            if (v67)
            {
LABEL_123:
              v13 = (uint64_t *)(a1 + 4);
              if (a1 + 4 < (int *)v10)
              {
                if ((_DWORD)v21)
                {
                  v89 = a1;
                  do
                  {
                    v12 = v89[7];
                    v89 = (int *)v13;
                    if (v21 > v12)
                      break;
                    if (v21 >= v12)
                    {
                      v12 = *v13;
                      v90 = v20;
                      v91 = v21;
                      while (1)
                      {
                        v93 = *v90++;
                        v92 = v93;
                        v94 = *(_DWORD *)v12;
                        v12 += 4;
                        v95 = v92 >= v94;
                        if (v92 != v94)
                          break;
                        if (!--v91)
                          goto LABEL_134;
                      }
                      if (!v95)
                        break;
                    }
LABEL_134:
                    v13 += 2;
                  }
                  while (v89 + 4 < (int *)v10);
                }
                else
                {
                  if (v10 <= (uint64_t *)a1 + 4)
                    v96 = (uint64_t *)(a1 + 8);
                  else
                    v96 = v10;
                  v12 = ((char *)v96 - (char *)a1 - 17) & 0xFFFFFFFFFFFFFFF0;
                  v13 = (uint64_t *)((char *)a1 + v12 + 32);
                }
              }
            }
            else
            {
LABEL_18:
              i = (unint64_t)(a1 + 4);
              v30 = a1 + 4 >= (int *)v10;
              if (a1 + 4 == (int *)v10 || !(_DWORD)v21)
                goto LABEL_390;
              v13 = (uint64_t *)a1;
              while (1)
              {
                v12 = *((unsigned int *)v13 + 7);
                v13 = (uint64_t *)i;
                if (v21 > v12)
                  break;
                if (v21 >= v12)
                {
                  v31 = *(unsigned int **)i;
                  v12 = (unint64_t)v20;
                  v32 = v21;
                  while (1)
                  {
                    v34 = *(_DWORD *)v12;
                    v12 += 4;
                    v33 = v34;
                    v35 = *v31++;
                    v36 = v33 >= v35;
                    if (v33 != v35)
                      break;
                    if (!--v32)
                      goto LABEL_29;
                  }
                  if (!v36)
                    break;
                }
LABEL_29:
                i = (unint64_t)(v13 + 2);
                v30 = v13 + 2 >= v10;
                if (v13 + 2 == v10)
                  goto LABEL_390;
              }
            }
            i = (unint64_t)v10;
            if (v13 >= v10)
              goto LABEL_153;
            v30 = v10 >= (uint64_t *)a1;
            if (v10 == (uint64_t *)a1)
              goto LABEL_390;
            if ((_DWORD)v21)
            {
              i = (unint64_t)v10;
              while (1)
              {
                v12 = *(unsigned int *)(i - 4);
                i -= 16;
                if (v21 <= v12)
                {
                  if (v21 < v12)
                    break;
                  v12 = *(_QWORD *)i;
                  v97 = v20;
                  v98 = v21;
                  while (1)
                  {
                    v100 = *v97++;
                    v99 = v100;
                    v101 = *(_DWORD *)v12;
                    v12 += 4;
                    v102 = v99 >= v101;
                    if (v99 != v101)
                      break;
                    if (!--v98)
                      goto LABEL_153;
                  }
                  if (v102)
                    break;
                }
                v30 = i >= (unint64_t)a1;
                if ((int *)i == a1)
                  goto LABEL_390;
              }
LABEL_153:
              if ((unint64_t)v13 < i)
              {
                if (!(_DWORD)v21)
                  goto LABEL_395;
                do
                {
                  v103 = *v13;
                  *v13 = *(_QWORD *)i;
                  *(_QWORD *)i = v103;
                  LODWORD(v103) = *((_DWORD *)v13 + 2);
                  *((_DWORD *)v13 + 2) = *(_DWORD *)(i + 8);
                  *(_DWORD *)(i + 8) = v103;
                  LODWORD(v103) = *((_DWORD *)v13 + 3);
                  *((_DWORD *)v13 + 3) = *(_DWORD *)(i + 12);
                  *(_DWORD *)(i + 12) = v103;
                  while (1)
                  {
LABEL_156:
                    v12 = (unint64_t)(v13 + 2);
                    v30 = v13 + 2 >= v10;
                    if (v13 + 2 == v10)
                      goto LABEL_390;
                    v104 = *((_DWORD *)v13 + 7);
                    v13 += 2;
                    if (v21 > v104)
                      goto LABEL_164;
                    if (v21 >= v104)
                    {
                      v12 = *(_QWORD *)v12;
                      v105 = v20;
                      v106 = v21;
                      while (1)
                      {
                        v108 = *v105++;
                        v107 = v108;
                        v109 = *(_DWORD *)v12;
                        v12 += 4;
                        v110 = v107 >= v109;
                        if (v107 != v109)
                          break;
                        if (!--v106)
                          goto LABEL_156;
                      }
                      if (!v110)
                        break;
                    }
                  }
                  while (1)
                  {
LABEL_164:
                    v30 = i >= (unint64_t)a1;
                    if ((int *)i == a1)
                      goto LABEL_390;
                    v12 = *(unsigned int *)(i - 4);
                    i -= 16;
                    if (v21 <= v12)
                    {
                      if (v21 < v12)
                        break;
                      v12 = *(_QWORD *)i;
                      v111 = v20;
                      v112 = v21;
                      while (1)
                      {
                        v114 = *v111++;
                        v113 = v114;
                        v115 = *(_DWORD *)v12;
                        v12 += 4;
                        v116 = v113 >= v115;
                        if (v113 != v115)
                          break;
                        if (!--v112)
                          goto LABEL_173;
                      }
                      if (v116)
                        break;
                    }
                  }
LABEL_173:
                  ;
                }
                while ((unint64_t)v13 < i);
              }
              goto LABEL_176;
            }
            if (v13 < (uint64_t *)v267)
            {
              i = (unint64_t)(v10 - 2);
LABEL_395:
              v264 = *v13;
              *v13 = *(_QWORD *)i;
              *(_QWORD *)i = v264;
              LODWORD(v264) = *((_DWORD *)v13 + 2);
              *((_DWORD *)v13 + 2) = *(_DWORD *)(i + 8);
              *(_DWORD *)(i + 8) = v264;
              LODWORD(v264) = *((_DWORD *)v13 + 3);
              *((_DWORD *)v13 + 3) = *(_DWORD *)(i + 12);
              *(_DWORD *)(i + 12) = v264;
              __break(1u);
              return;
            }
LABEL_176:
            v117 = (unint64_t *)(v13 - 2);
            if (v13 - 2 != (uint64_t *)a1)
            {
              v118 = *(_QWORD *)a1;
              if (*(_QWORD *)a1)
              {
                *(_QWORD *)a1 = 0;
                a1[2] = 0;
                WTF::fastFree(v118, a2, a3, a4, a5, a6, a7, a8);
              }
              v119 = *(v13 - 2);
              *(v13 - 2) = 0;
              *(_QWORD *)a1 = v119;
              a1[2] = *((_DWORD *)v13 - 2);
              LODWORD(v119) = *((_DWORD *)v13 - 1);
              *((_DWORD *)v13 - 1) = 0;
              a1[3] = v119;
            }
            v120 = *v117;
            if (*v117)
            {
              *(v13 - 2) = 0;
              *((_DWORD *)v13 - 2) = 0;
              WTF::fastFree(v120, a2, a3, a4, a5, a6, a7, a8);
            }
            v8 = 0;
            *(v13 - 2) = (uint64_t)v20;
            *((_DWORD *)v13 - 2) = v27;
            *((_DWORD *)v13 - 1) = v21;
            continue;
          }
          v265 = v9;
          v19 = v8;
          v20 = *(unsigned int **)a1;
          LODWORD(v21) = a1[3];
LABEL_33:
          v37 = a1[2];
          *(_QWORD *)a1 = 0;
          *((_QWORD *)a1 + 1) = 0;
          v12 = (unint64_t)(a1 + 4);
          for (i = (unint64_t)a1; ; i = (unint64_t)v38)
          {
            v30 = v12 >= (unint64_t)v10;
            if ((uint64_t *)v12 == v10)
              goto LABEL_390;
            v38 = (uint64_t *)v12;
            v12 = *(unsigned int *)(i + 28);
            if (v12 <= v21)
            {
              if (v12 < v21 || (_DWORD)v12 == 0)
                break;
              v40 = (unsigned int *)*v38;
              v41 = v20;
              while (1)
              {
                v43 = *v40++;
                v42 = v43;
                v44 = *v41++;
                v45 = v42 >= v44;
                if (v42 != v44)
                  break;
                if (!--v12)
                  goto LABEL_46;
              }
              if (v45)
                break;
            }
            v12 = (unint64_t)(v38 + 2);
          }
LABEL_46:
          v46 = v10;
          if ((int *)i != a1)
          {
            v30 = v10 >= (uint64_t *)a1;
            if (v10 != (uint64_t *)a1)
            {
              do
              {
                i = *((unsigned int *)v46 - 1);
                v46 -= 2;
                if (i > v21)
                  goto LABEL_84;
                if (i >= v21 && (_DWORD)i != 0)
                {
                  v12 = *v46;
                  v48 = v20;
                  while (1)
                  {
                    v50 = *(_DWORD *)v12;
                    v12 += 4;
                    v49 = v50;
                    v51 = *v48++;
                    v52 = v49 >= v51;
                    if (v49 != v51)
                      break;
                    if (!--i)
                      goto LABEL_59;
                  }
                  if (!v52)
                    goto LABEL_84;
                }
LABEL_59:
                v30 = v46 >= (uint64_t *)a1;
              }
              while (v46 != (uint64_t *)a1);
            }
LABEL_390:
            __break(1u);
LABEL_391:
            if (!v30)
            {
LABEL_188:
              *(_QWORD *)a1 = v12;
              *(v10 - 2) = i;
              v123 = a1[2];
              a1[2] = *((_DWORD *)v10 - 2);
              *((_DWORD *)v10 - 2) = v123;
              v124 = a1[3];
              a1[3] = *((_DWORD *)v10 - 1);
              *((_DWORD *)v10 - 1) = v124;
            }
            return;
          }
          if (v38 < v10)
          {
            LODWORD(v53) = *((_DWORD *)v10 - 1);
            v46 = v10 - 2;
            if (v53 <= v21)
            {
              v54 = v10 - 2;
              do
              {
                if (v53 >= v21 && (_DWORD)v53)
                {
                  v55 = (unsigned int *)*v54;
                  v53 = v53;
                  v56 = v20;
                  while (1)
                  {
                    v58 = *v55++;
                    v57 = v58;
                    v59 = *v56++;
                    v60 = v57 >= v59;
                    if (v57 != v59)
                      break;
                    if (!--v53)
                      goto LABEL_69;
                  }
                  if (!v60 || v38 >= v54)
                  {
LABEL_83:
                    v46 = v54;
                    break;
                  }
                }
                else
                {
LABEL_69:
                  if (v38 >= v54)
                    goto LABEL_83;
                }
                v46 = v54 - 2;
                LODWORD(v53) = *((_DWORD *)v54 - 1);
                v54 -= 2;
              }
              while (v53 <= v21);
            }
          }
LABEL_84:
          v13 = v38;
          if (v38 < v46)
          {
            v13 = v38;
            i = (unint64_t)v46;
            do
            {
              v68 = *v13;
              *v13 = *(_QWORD *)i;
              *(_QWORD *)i = v68;
              LODWORD(v68) = *((_DWORD *)v13 + 2);
              *((_DWORD *)v13 + 2) = *(_DWORD *)(i + 8);
              *(_DWORD *)(i + 8) = v68;
              v12 = *((unsigned int *)v13 + 3);
              *((_DWORD *)v13 + 3) = *(_DWORD *)(i + 12);
              *(_DWORD *)(i + 12) = v12;
              while (1)
              {
                do
                {
                  v30 = v13 + 2 >= v10;
                  if (v13 + 2 == v10)
                    goto LABEL_390;
                  v12 = *((unsigned int *)v13 + 7);
                  v69 = (unsigned int **)(v13 + 2);
                  v13 += 2;
                }
                while (v12 > v21);
                if (v12 < v21 || (_DWORD)v12 == 0)
                  break;
                v71 = *v69;
                v72 = v20;
                while (1)
                {
                  v74 = *v71++;
                  v73 = v74;
                  v75 = *v72++;
                  v76 = v73 >= v75;
                  if (v73 != v75)
                    break;
                  if (!--v12)
                    goto LABEL_99;
                }
                if (v76)
                  goto LABEL_99;
              }
              while (1)
              {
LABEL_99:
                v30 = i >= (unint64_t)a1;
                if ((int *)i == a1)
                  goto LABEL_390;
                v12 = *(unsigned int *)(i - 4);
                i -= 16;
                if (v12 > v21)
                  break;
                if (v12 >= v21 && (_DWORD)v12 != 0)
                {
                  v78 = *(unsigned int **)i;
                  v79 = v20;
                  while (1)
                  {
                    v81 = *v78++;
                    v80 = v81;
                    v82 = *v79++;
                    v83 = v80 >= v82;
                    if (v80 != v82)
                      break;
                    if (!--v12)
                      goto LABEL_99;
                  }
                  if (!v83)
                    break;
                }
              }
            }
            while ((unint64_t)v13 < i);
          }
          v84 = (unint64_t *)(v13 - 2);
          if (v13 - 2 != (uint64_t *)a1)
          {
            v85 = *(_QWORD *)a1;
            if (*(_QWORD *)a1)
            {
              *(_QWORD *)a1 = 0;
              a1[2] = 0;
              WTF::fastFree(v85, a2, a3, a4, a5, a6, a7, a8);
            }
            v86 = *(v13 - 2);
            *(v13 - 2) = 0;
            *(_QWORD *)a1 = v86;
            a1[2] = *((_DWORD *)v13 - 2);
            LODWORD(v86) = *((_DWORD *)v13 - 1);
            *((_DWORD *)v13 - 1) = 0;
            a1[3] = v86;
          }
          v87 = *v84;
          if (*v84)
          {
            *(v13 - 2) = 0;
            *((_DWORD *)v13 - 2) = 0;
            WTF::fastFree(v87, a2, a3, a4, a5, a6, a7, a8);
          }
          *(v13 - 2) = (uint64_t)v20;
          *((_DWORD *)v13 - 2) = v37;
          *((_DWORD *)v13 - 1) = v21;
          v8 = v19;
          v9 = v265;
          if (v38 < v46)
          {
LABEL_120:
            std::__introsort<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*,false>(a1, v13 - 2, v265, v8 & 1);
            v8 = 0;
            continue;
          }
          v88 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>((uint64_t *)a1, v13 - 2);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(v13, v10))
          {
            if (v88)
              continue;
            goto LABEL_120;
          }
          v10 = v13 - 2;
          if (v88)
            return;
          goto LABEL_2;
        }
        v125 = v8;
        v126 = v13 + 2;
        v128 = v13 == v10 || v126 == v10;
        if ((v125 & 1) != 0)
        {
          if (v128)
            return;
          v129 = v13;
          while (1)
          {
            v130 = v129;
            v129 = v126;
            v131 = *((unsigned int *)v130 + 7);
            v132 = *((_DWORD *)v130 + 3);
            if (v131 <= v132)
            {
              if ((_DWORD)v131)
                v145 = v131 >= v132;
              else
                v145 = 0;
              if (!v145)
                goto LABEL_226;
              v146 = 0;
              v133 = *v126;
              v134 = *v130;
              while (1)
              {
                v147 = *(_DWORD *)(v133 + v146);
                v148 = *(_DWORD *)(v134 + v146);
                if (v147 != v148)
                  break;
                v146 += 4;
                if (4 * *((unsigned int *)v130 + 7) == v146)
                  goto LABEL_226;
              }
              if (v147 >= v148)
                goto LABEL_226;
            }
            else
            {
              v133 = *v126;
              v134 = *v130;
            }
            v135 = *((_DWORD *)v130 + 6);
            v130[3] = 0;
            v136 = *((_DWORD *)v130 + 2);
            *v130 = 0;
            v130[2] = v134;
            *((_DWORD *)v126 + 2) = v136;
            v137 = *((_DWORD *)v130 + 3);
            v130[1] = 0;
            *((_DWORD *)v126 + 3) = v137;
            v138 = v13;
            if (v130 != v13)
            {
              v138 = v130;
              if ((_DWORD)v131)
              {
                do
                {
                  v138 = v130;
                  v130 -= 2;
                  v139 = *((_DWORD *)v138 - 1);
                  if (v131 <= v139)
                  {
                    if (v131 < v139)
                      goto LABEL_215;
                    v141 = 0;
                    v140 = *v130;
                    while (1)
                    {
                      v142 = *(_DWORD *)(v133 + 4 * v141);
                      v143 = *(_DWORD *)(v140 + 4 * v141);
                      if (v142 != v143)
                        break;
                      if (v131 == ++v141)
                        goto LABEL_215;
                    }
                    if (v142 >= v143)
                      goto LABEL_215;
                  }
                  else
                  {
                    v140 = *v130;
                  }
                  v144 = *((_DWORD *)v138 - 2);
                  *(v138 - 2) = 0;
                  *(v138 - 1) = 0;
                  *v138 = v140;
                  *((_DWORD *)v138 + 2) = v144;
                  *((_DWORD *)v138 + 3) = v139;
                }
                while (v130 != v13);
                v138 = v13;
              }
            }
LABEL_215:
            *v138 = v133;
            *((_DWORD *)v138 + 2) = v135;
            *((_DWORD *)v138 + 3) = v131;
LABEL_226:
            v126 += 2;
            if (v129 + 2 == v10)
              return;
          }
        }
        if (!v128)
        {
          v241 = 0;
          v242 = 1;
          v243 = (int *)v13;
          while (1)
          {
            v244 = v241;
            v241 = v242;
            v245 = v243[7];
            v246 = v243[3];
            if (v245 > v246)
              break;
            if ((_DWORD)v245)
              v260 = v245 >= v246;
            else
              v260 = 0;
            if (v260)
            {
              v261 = 0;
              v247 = (unsigned int *)*v126;
              while (1)
              {
                v262 = v247[v261];
                v263 = *(_DWORD *)(*(_QWORD *)v243 + v261 * 4);
                if (v262 != v263)
                  break;
                if (v245 == ++v261)
                  goto LABEL_388;
              }
              if (v262 < v263)
                goto LABEL_365;
            }
LABEL_388:
            v243 = &a1[4 * v241];
            v242 = v241 + 1;
            v126 = (uint64_t *)&a1[4 * v241 + 4];
            if (v126 == v10)
              return;
          }
          v247 = (unsigned int *)*v126;
LABEL_365:
          *v126 = 0;
          v248 = v243[6];
          *((_QWORD *)v243 + 3) = 0;
          while (1)
          {
            i = (unint64_t)&a1[4 * v244];
            v249 = *(_QWORD *)i;
            *(_QWORD *)i = 0;
            *v126 = v249;
            LODWORD(v249) = *(_DWORD *)(i + 8);
            *(_DWORD *)(i + 8) = 0;
            *((_DWORD *)v126 + 2) = v249;
            v12 = *(unsigned int *)(i + 12);
            *(_DWORD *)(i + 12) = 0;
            *((_DWORD *)v126 + 3) = v12;
            v30 = __CFADD__(v244, 1);
            if (v244 == -1)
              goto LABEL_390;
            --v244;
            v250 = &a1[4 * v244];
            v251 = v250[3];
            if (v245 <= v251)
            {
              if (!(_DWORD)v245 || v245 < v251)
                goto LABEL_377;
              v252 = *(unsigned int **)v250;
              v253 = v247;
              v254 = v245;
              while (1)
              {
                v256 = *v253++;
                v255 = v256;
                v257 = *v252++;
                v258 = v255 >= v257;
                if (v255 != v257)
                  break;
                if (!--v254)
                  goto LABEL_377;
              }
              if (v258)
              {
LABEL_377:
                *(_QWORD *)i = v247;
                *(_DWORD *)(i + 8) = v248;
                *(_DWORD *)(i + 12) = v245;
                goto LABEL_388;
              }
            }
            v259 = *(_QWORD *)i;
            v126 = (uint64_t *)i;
            if (*(_QWORD *)i)
            {
              *(_QWORD *)i = 0;
              *(_DWORD *)(i + 8) = 0;
              WTF::fastFree(v259, a2, a3, a4, a5, a6, a7, a8);
            }
          }
        }
        return;
    }
  }
}

int *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(int *result, uint64_t a2, unsigned int **a3)
{
  int *v3;
  unsigned int v4;
  int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  int *v10;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  unsigned int *v19;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  int v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  unsigned int *v32;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;

  v3 = (int *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 12);
  v5 = result + 3;
  v6 = result[3];
  if (v4 <= v6)
  {
    if (!v4 || v4 < v6)
      goto LABEL_24;
    v12 = *(unsigned int **)a2;
    v13 = *(unsigned int **)result;
    v14 = *(unsigned int *)(a2 + 12);
    while (1)
    {
      v16 = *v12++;
      v15 = v16;
      v17 = *v13++;
      v18 = v15 >= v17;
      if (v15 != v17)
        break;
      if (!--v14)
        goto LABEL_24;
    }
    if (v18)
    {
LABEL_24:
      v25 = *((unsigned int *)a3 + 3);
      if (v25 <= v4)
      {
        if (v25 < v4 || (_DWORD)v25 == 0)
          return result;
        v34 = 0;
        v27 = *a3;
        v26 = *(unsigned int **)a2;
        v35 = 4 * v25;
        while (1)
        {
          v36 = v27[v34 / 4];
          v37 = v26[v34 / 4];
          if (v36 != v37)
            break;
          v34 += 4;
          if (v35 == v34)
            return result;
        }
        if (v36 >= v37)
          return result;
      }
      else
      {
        v26 = *(unsigned int **)a2;
        v27 = *a3;
      }
      *(_QWORD *)a2 = v27;
      *a3 = v26;
      v10 = (int *)(a2 + 8);
      v28 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
      *((_DWORD *)a3 + 2) = v28;
      v29 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = *((_DWORD *)a3 + 3);
      *((_DWORD *)a3 + 3) = v29;
      v30 = *(unsigned int *)(a2 + 12);
      if (v30 <= *v5)
      {
        if (!(_DWORD)v30 || v30 < *v5)
          return result;
        v38 = 0;
        v32 = *(unsigned int **)a2;
        v31 = *(_DWORD **)result;
        v39 = 4 * v30;
        while (1)
        {
          v40 = v32[v38 / 4];
          v41 = v31[v38 / 4];
          if (v40 != v41)
            break;
          v38 += 4;
          if (v39 == v38)
            return result;
        }
        if (v40 >= v41)
          return result;
      }
      else
      {
        v31 = *(_DWORD **)result;
        v32 = *(unsigned int **)a2;
      }
      *(_QWORD *)result = v32;
      result += 2;
      *(_QWORD *)a2 = v31;
LABEL_48:
      v47 = *result;
      *result = *v10;
      *v10 = v47;
      v48 = *v5;
      *v5 = *v3;
      *v3 = v48;
      return result;
    }
  }
  v7 = *((unsigned int *)a3 + 3);
  if (v7 > v4)
  {
    v8 = *a3;
LABEL_4:
    v9 = *(unsigned int **)result;
    *(_QWORD *)result = v8;
    result += 2;
    *a3 = v9;
    v10 = (int *)(a3 + 1);
LABEL_47:
    v3 = (int *)a3 + 3;
    goto LABEL_48;
  }
  v19 = *(unsigned int **)a2;
  if (v7 >= v4 && (_DWORD)v7 != 0)
  {
    v21 = 0;
    v8 = *a3;
    v22 = 4 * v7;
    while (1)
    {
      v23 = v8[v21 / 4];
      v24 = v19[v21 / 4];
      if (v23 != v24)
        break;
      v21 += 4;
      if (v22 == v21)
        goto LABEL_44;
    }
    if (v23 < v24)
      goto LABEL_4;
  }
LABEL_44:
  v42 = *(unsigned int **)result;
  *(_QWORD *)result = v19;
  *(_QWORD *)a2 = v42;
  v43 = result[2];
  result[2] = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = v43;
  v44 = result[3];
  result[3] = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v44;
  v45 = *((unsigned int *)a3 + 3);
  if (v45 > v44)
  {
    v46 = *a3;
LABEL_46:
    *(_QWORD *)a2 = v46;
    *a3 = v42;
    result = (int *)(a2 + 8);
    v10 = (int *)(a3 + 1);
    v5 = (int *)(a2 + 12);
    goto LABEL_47;
  }
  if (v45 >= v44 && (_DWORD)v45)
  {
    v49 = 0;
    v46 = *a3;
    v50 = 4 * v45;
    while (1)
    {
      v51 = v46[v49 / 4];
      v52 = v42[v49 / 4];
      if (v51 != v52)
        break;
      v49 += 4;
      if (v50 == v49)
        return result;
    }
    if (v51 < v52)
      goto LABEL_46;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((unsigned int *)a2 - 1);
      v7 = *((_DWORD *)a1 + 3);
      if (v6 > v7)
      {
        v8 = *a1;
        v9 = *(a2 - 2);
        goto LABEL_4;
      }
      if ((_DWORD)v6 && v6 >= v7)
      {
        v33 = 0;
        v9 = *(a2 - 2);
        v8 = *a1;
        v34 = 4 * v6;
        while (1)
        {
          v35 = *(_DWORD *)(v9 + v33);
          v36 = *(_DWORD *)(v8 + v33);
          if (v35 != v36)
            break;
          v33 += 4;
          if (v34 == v33)
            return result;
        }
        if (v35 < v36)
        {
LABEL_4:
          *a1 = v9;
          *(a2 - 2) = v8;
          v10 = *((_DWORD *)a1 + 2);
          *((_DWORD *)a1 + 2) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v10;
          v11 = *((_DWORD *)a1 + 3);
          *((_DWORD *)a1 + 3) = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v11;
        }
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>((int *)a1, (uint64_t)(a1 + 2), (unsigned int **)a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>((int *)a1, (uint64_t)(a1 + 2), (uint64_t)(a1 + 4), (unsigned int **)a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>((int *)a1, (uint64_t)(a1 + 2), (uint64_t)(a1 + 4), (uint64_t)(a1 + 6), (unsigned int **)a2 - 2);
      return 1;
    default:
      v12 = a1 + 4;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>((int *)a1, (uint64_t)(a1 + 2), (unsigned int **)a1 + 4);
      v13 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v14 = 0;
      while (2)
      {
        v15 = *((unsigned int *)v13 + 3);
        v16 = *((_DWORD *)v12 + 3);
        if (v15 <= v16)
        {
          if ((_DWORD)v15)
            v29 = v15 >= v16;
          else
            v29 = 0;
          if (!v29)
            goto LABEL_34;
          v30 = 0;
          v17 = *v13;
          v18 = *v12;
          while (1)
          {
            v31 = *(_DWORD *)(v17 + v30);
            v32 = *(_DWORD *)(v18 + v30);
            if (v31 != v32)
              break;
            v30 += 4;
            if (4 * *((unsigned int *)v13 + 3) == v30)
              goto LABEL_34;
          }
          if (v31 >= v32)
          {
LABEL_34:
            v12 = v13;
            v13 += 2;
            if (v13 == a2)
              return 1;
            continue;
          }
        }
        else
        {
          v17 = *v13;
          v18 = *v12;
        }
        break;
      }
      v19 = *((_DWORD *)v13 + 2);
      *((_DWORD *)v13 + 3) = 0;
      v20 = *((_DWORD *)v12 + 2);
      *v12 = 0;
      *v13 = v18;
      *((_DWORD *)v13 + 2) = v20;
      v21 = *((_DWORD *)v12 + 3);
      v12[1] = 0;
      *((_DWORD *)v13 + 3) = v21;
      v22 = a1;
      if (v12 != a1)
      {
        v22 = v12;
        if ((_DWORD)v15)
        {
          do
          {
            v22 = v12;
            v12 -= 2;
            v23 = *((_DWORD *)v22 - 1);
            if (v15 <= v23)
            {
              if (v15 < v23)
                goto LABEL_22;
              v25 = 0;
              v24 = *v12;
              while (1)
              {
                v26 = *(_DWORD *)(v17 + 4 * v25);
                v27 = *(_DWORD *)(v24 + 4 * v25);
                if (v26 != v27)
                  break;
                if (v15 == ++v25)
                  goto LABEL_22;
              }
              if (v26 >= v27)
                goto LABEL_22;
            }
            else
            {
              v24 = *v12;
            }
            v28 = *((_DWORD *)v22 - 2);
            *(v22 - 2) = 0;
            *(v22 - 1) = 0;
            *v22 = v24;
            *((_DWORD *)v22 + 2) = v28;
            *((_DWORD *)v22 + 3) = v23;
          }
          while (v12 != a1);
          v22 = a1;
        }
      }
LABEL_22:
      *v22 = v17;
      *((_DWORD *)v22 + 2) = v19;
      *((_DWORD *)v22 + 3) = v15;
      if (++v14 != 8)
        goto LABEL_34;
      return v13 + 2 == a2;
  }
}

int *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(int *a1, uint64_t a2, uint64_t a3, unsigned int **a4)
{
  int *result;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;

  result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(a1, a2, (unsigned int **)a3);
  v9 = *((unsigned int *)a4 + 3);
  v10 = *(_DWORD *)(a3 + 12);
  if (v9 <= v10)
  {
    if ((_DWORD)v9)
      v27 = v9 >= v10;
    else
      v27 = 0;
    if (!v27)
      return result;
    v28 = 0;
    v12 = *a4;
    v11 = *(unsigned int **)a3;
    v29 = 4 * v9;
    while (1)
    {
      v30 = v12[v28 / 4];
      v31 = v11[v28 / 4];
      if (v30 != v31)
        break;
      v28 += 4;
      if (v29 == v28)
        return result;
    }
    if (v30 >= v31)
      return result;
  }
  else
  {
    v11 = *(unsigned int **)a3;
    v12 = *a4;
  }
  *(_QWORD *)a3 = v12;
  *a4 = v11;
  v13 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = v13;
  v14 = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = v14;
  v15 = *(unsigned int *)(a3 + 12);
  v16 = *(_DWORD *)(a2 + 12);
  if (v15 <= v16)
  {
    if (!(_DWORD)v15 || v15 < v16)
      return result;
    v32 = 0;
    v18 = *(unsigned int **)a3;
    v17 = *(_QWORD *)a2;
    v33 = 4 * v15;
    while (1)
    {
      v34 = v18[v32 / 4];
      v35 = *(_DWORD *)(v17 + v32);
      if (v34 != v35)
        break;
      v32 += 4;
      if (v33 == v32)
        return result;
    }
    if (v34 >= v35)
      return result;
  }
  else
  {
    v17 = *(_QWORD *)a2;
    v18 = *(unsigned int **)a3;
  }
  *(_QWORD *)a2 = v18;
  *(_QWORD *)a3 = v17;
  v19 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = v19;
  v20 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = v20;
  v21 = *(unsigned int *)(a2 + 12);
  v22 = a1[3];
  if (v21 > v22)
  {
    v23 = *(_QWORD *)a1;
    v24 = *(_QWORD *)a2;
LABEL_7:
    *(_QWORD *)a1 = v24;
    *(_QWORD *)a2 = v23;
    v25 = a1[2];
    a1[2] = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v25;
    v26 = a1[3];
    a1[3] = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = v26;
    return result;
  }
  if ((_DWORD)v21 && v21 >= v22)
  {
    v36 = 0;
    v24 = *(_QWORD *)a2;
    v23 = *(_QWORD *)a1;
    v37 = 4 * v21;
    while (1)
    {
      v38 = *(_DWORD *)(v24 + v36);
      v39 = *(_DWORD *)(v23 + v36);
      if (v38 != v39)
        break;
      v36 += 4;
      if (v37 == v36)
        return result;
    }
    if (v38 < v39)
      goto LABEL_7;
  }
  return result;
}

int *std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5)
{
  int *result;
  uint64_t v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;

  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(a1, a2, a3, (unsigned int **)a4);
  v11 = *((unsigned int *)a5 + 3);
  v12 = *(_DWORD *)(a4 + 12);
  if (v11 <= v12)
  {
    if ((_DWORD)v11)
      v35 = v11 >= v12;
    else
      v35 = 0;
    if (!v35)
      return result;
    v36 = 0;
    v14 = *a5;
    v13 = *(unsigned int **)a4;
    v37 = 4 * v11;
    while (1)
    {
      v38 = v14[v36 / 4];
      v39 = v13[v36 / 4];
      if (v38 != v39)
        break;
      v36 += 4;
      if (v37 == v36)
        return result;
    }
    if (v38 >= v39)
      return result;
  }
  else
  {
    v13 = *(unsigned int **)a4;
    v14 = *a5;
  }
  *(_QWORD *)a4 = v14;
  *a5 = v13;
  v15 = *(_DWORD *)(a4 + 8);
  *(_DWORD *)(a4 + 8) = *((_DWORD *)a5 + 2);
  *((_DWORD *)a5 + 2) = v15;
  v16 = *(_DWORD *)(a4 + 12);
  *(_DWORD *)(a4 + 12) = *((_DWORD *)a5 + 3);
  *((_DWORD *)a5 + 3) = v16;
  v17 = *(unsigned int *)(a4 + 12);
  v18 = *(_DWORD *)(a3 + 12);
  if (v17 <= v18)
  {
    if (!(_DWORD)v17 || v17 < v18)
      return result;
    v40 = 0;
    v20 = *(unsigned int **)a4;
    v19 = *(_QWORD *)a3;
    v41 = 4 * v17;
    while (1)
    {
      v42 = v20[v40 / 4];
      v43 = *(_DWORD *)(v19 + v40);
      if (v42 != v43)
        break;
      v40 += 4;
      if (v41 == v40)
        return result;
    }
    if (v42 >= v43)
      return result;
  }
  else
  {
    v19 = *(_QWORD *)a3;
    v20 = *(unsigned int **)a4;
  }
  *(_QWORD *)a3 = v20;
  *(_QWORD *)a4 = v19;
  v21 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
  *(_DWORD *)(a4 + 8) = v21;
  v22 = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a4 + 12);
  *(_DWORD *)(a4 + 12) = v22;
  v23 = *(unsigned int *)(a3 + 12);
  v24 = *(_DWORD *)(a2 + 12);
  if (v23 <= v24)
  {
    if (!(_DWORD)v23 || v23 < v24)
      return result;
    v44 = 0;
    v26 = *(_QWORD *)a3;
    v25 = *(_QWORD *)a2;
    v45 = 4 * v23;
    while (1)
    {
      v46 = *(_DWORD *)(v26 + v44);
      v47 = *(_DWORD *)(v25 + v44);
      if (v46 != v47)
        break;
      v44 += 4;
      if (v45 == v44)
        return result;
    }
    if (v46 >= v47)
      return result;
  }
  else
  {
    v25 = *(_QWORD *)a2;
    v26 = *(_QWORD *)a3;
  }
  *(_QWORD *)a2 = v26;
  *(_QWORD *)a3 = v25;
  v27 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = v27;
  v28 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = v28;
  v29 = *(unsigned int *)(a2 + 12);
  v30 = a1[3];
  if (v29 > v30)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD *)a2;
LABEL_9:
    *(_QWORD *)a1 = v32;
    *(_QWORD *)a2 = v31;
    v33 = a1[2];
    a1[2] = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v33;
    v34 = a1[3];
    a1[3] = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = v34;
    return result;
  }
  if ((_DWORD)v29 && v29 >= v30)
  {
    v48 = 0;
    v32 = *(_QWORD *)a2;
    v31 = *(_QWORD *)a1;
    v49 = 4 * v29;
    while (1)
    {
      v50 = *(_DWORD *)(v32 + v48);
      v51 = *(_DWORD *)(v31 + v48);
      if (v50 != v51)
        break;
      v48 += 4;
      if (v49 == v48)
        return result;
    }
    if (v50 < v51)
      goto LABEL_9;
  }
  return result;
}

void JSC::Yarr::CharacterClassConstructor::performSetOpWith(JSC::Yarr::CharacterClassConstructor *this, JSC::Yarr::CharacterClassConstructor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*((_BYTE *)this + 2) == 2)
  {
    v10 = (unsigned int *)((char *)a2 + 8);
    v11 = *((unsigned __int8 *)this + 1);
    if (v11 < 2)
    {
      JSC::Yarr::CharacterClassConstructor::unionStrings((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    }
    else if (v11 == 2)
    {
      JSC::Yarr::CharacterClassConstructor::intersectionStrings((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      if (v11 != 3)
      {
LABEL_9:
        JSC::Yarr::CharacterClassConstructor::asciiOpSorted((uint64_t)this, *((unsigned int **)a2 + 3), *((unsigned int *)a2 + 9), *((unsigned int **)a2 + 5), *((unsigned int *)a2 + 13), a6, a7, a8);
        JSC::Yarr::CharacterClassConstructor::unicodeOpSorted((uint64_t)this, (unsigned int *)a2 + 14, (uint64_t)a2 + 72, v12, v13, v14);
        return;
      }
      JSC::Yarr::CharacterClassConstructor::subtractionStrings((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    }
    if (*((_BYTE *)this + 2) != 2)
      return;
    goto LABEL_9;
  }
}

void JSC::Yarr::CharacterClassConstructor::unionStrings(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  unsigned int *v40;
  WTF *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v47;
  void *v48;
  WTF *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  const void **v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unsigned int *v60;
  const void **v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  WTF *v70;
  int v71;
  unsigned int v72;
  void *__src;
  int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;

  v76 = 0;
  v77 = 0;
  LODWORD(v10) = *(_DWORD *)(a1 + 20);
  if (!(_DWORD)v10 || (v11 = a2[3], !(_DWORD)v11))
  {
    v12 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    goto LABEL_52;
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  do
  {
    v17 = *(_QWORD *)(a1 + 8) + 16 * v15;
    v18 = *(unsigned int *)(v17 + 12);
    __src = 0;
    v74 = 0;
    v75 = v18;
    if ((_DWORD)v18)
    {
      if (v18 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198EFD01CLL);
      }
      v19 = (void *)WTF::fastMalloc((WTF *)(4 * v18));
      v74 = v18;
      __src = v19;
      memcpy(v19, *(const void **)v17, 4 * *(unsigned int *)(v17 + 12));
      v11 = a2[3];
    }
    if (v16 >= v11)
      goto LABEL_92;
    v20 = *(_QWORD *)a2 + 16 * v16;
    v21 = *(unsigned int *)(v20 + 12);
    v70 = 0;
    v71 = 0;
    v72 = v21;
    if ((_DWORD)v21)
    {
      if (v21 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198EFD024);
      }
      v22 = (WTF *)WTF::fastMalloc((WTF *)(4 * v21));
      v71 = v21;
      v70 = v22;
      memcpy(v22, *(const void **)v20, 4 * *(unsigned int *)(v20 + 12));
      v23 = v72;
    }
    else
    {
      v23 = 0;
    }
    v24 = v75;
    if (v75 > v23)
      goto LABEL_13;
    if (v75 < v23)
      goto LABEL_19;
    if (!v75)
    {
      v26 = v14;
      if (v14 == (_DWORD)v77)
      {
        v25 = 1;
        goto LABEL_15;
      }
      v51 = v12 + 16 * v14;
      *(_QWORD *)v51 = 0;
      *(_QWORD *)(v51 + 8) = 0;
      *(_DWORD *)(v51 + 12) = 0;
      v25 = 1;
      goto LABEL_28;
    }
    v40 = (unsigned int *)__src;
    v41 = v70;
    v42 = v75;
    do
    {
      v44 = *v40++;
      v43 = v44;
      v45 = *(_DWORD *)v41;
      v41 = (WTF *)((char *)v41 + 4);
      v46 = v43 >= v45;
      if (v43 != v45)
      {
        if (!v46)
        {
LABEL_13:
          v25 = 0;
          goto LABEL_14;
        }
LABEL_19:
        if (v14 == (_DWORD)v77)
        {
          v34 = WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v76, v14 + 1, (unint64_t)&v70);
          v12 = v76;
          v35 = v76 + 16 * HIDWORD(v77);
          v36 = *(unsigned int *)(v34 + 12);
          *(_QWORD *)v35 = 0;
          *(_QWORD *)(v35 + 8) = 0;
          *(_DWORD *)(v35 + 12) = v36;
          if ((_DWORD)v36)
          {
            if (v36 >> 30)
            {
              __break(0xC471u);
              JUMPOUT(0x198EFD05CLL);
            }
            v37 = v34;
            v38 = (void *)WTF::fastMalloc((WTF *)(4 * v36));
            *(_DWORD *)(v35 + 8) = v36;
            *(_QWORD *)v35 = v38;
            memcpy(v38, *(const void **)v37, 4 * *(unsigned int *)(v37 + 12));
          }
          v13 = v12;
        }
        else
        {
          v47 = v13 + 16 * v14;
          *(_QWORD *)v47 = 0;
          *(_QWORD *)(v47 + 8) = 0;
          *(_DWORD *)(v47 + 12) = v23;
          if (v23)
          {
            if (v23 >> 30)
            {
LABEL_92:
              __break(0xC471u);
              JUMPOUT(0x198EFD014);
            }
            v48 = (void *)WTF::fastMalloc((WTF *)(4 * v23));
            *(_DWORD *)(v47 + 8) = v23;
            *(_QWORD *)v47 = v48;
            memcpy(v48, v70, 4 * v72);
          }
        }
        v14 = ++HIDWORD(v77);
        ++v16;
        goto LABEL_38;
      }
      --v42;
    }
    while (v42);
    v25 = 1;
LABEL_14:
    v26 = v14;
    if (v14 == (_DWORD)v77)
    {
LABEL_15:
      v27 = WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v76, v26 + 1, (unint64_t)&__src);
      v12 = v76;
      v28 = v76 + 16 * HIDWORD(v77);
      v29 = *(unsigned int *)(v27 + 12);
      *(_QWORD *)v28 = 0;
      *(_QWORD *)(v28 + 8) = 0;
      *(_DWORD *)(v28 + 12) = v29;
      if ((_DWORD)v29)
      {
        if (v29 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x198EFD04CLL);
        }
        v30 = v27;
        v31 = (void *)WTF::fastMalloc((WTF *)(4 * v29));
        *(_DWORD *)(v28 + 8) = v29;
        *(_QWORD *)v28 = v31;
        v32 = *(unsigned int *)(v30 + 12);
        v33 = *(void **)v30;
        goto LABEL_27;
      }
    }
    else
    {
      v39 = v12 + 16 * v14;
      *(_QWORD *)v39 = 0;
      *(_QWORD *)(v39 + 8) = 0;
      *(_DWORD *)(v39 + 12) = v24;
      if (v24)
      {
        if (v24 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x198EFD054);
        }
        v31 = (void *)WTF::fastMalloc((WTF *)(4 * v24));
        *(_DWORD *)(v39 + 8) = v24;
        *(_QWORD *)v39 = v31;
        v32 = v75;
        v33 = __src;
LABEL_27:
        memcpy(v31, v33, 4 * v32);
      }
    }
LABEL_28:
    v14 = ++HIDWORD(v77);
    ++v15;
    v16 += v25;
    v13 = v12;
LABEL_38:
    v49 = v70;
    if (v70)
    {
      v70 = 0;
      v71 = 0;
      WTF::fastFree((unint64_t)v49, a2, a3, a4, a5, a6, a7, a8);
    }
    v50 = __src;
    if (__src)
    {
      __src = 0;
      v74 = 0;
      WTF::fastFree((unint64_t)v50, a2, a3, a4, a5, a6, a7, a8);
    }
    v10 = *(unsigned int *)(a1 + 20);
    if (v15 >= v10)
      break;
    v11 = a2[3];
  }
  while (v16 < v11);
LABEL_52:
  if (v15 < v10)
  {
    v52 = (16 * v15) | 0xC;
    do
    {
      v53 = (unsigned int *)(*(_QWORD *)(a1 + 8) + v52);
      v54 = (const void **)(v53 - 3);
      if (v14 == (_DWORD)v77)
      {
        v55 = WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v76, v14 + 1, (unint64_t)(v53 - 3));
        v12 = v76;
        v56 = v76 + 16 * HIDWORD(v77);
        v53 = (unsigned int *)(v55 + 12);
        v57 = *(unsigned int *)(v55 + 12);
        *(_QWORD *)v56 = 0;
        *(_QWORD *)(v56 + 8) = 0;
        *(_DWORD *)(v56 + 12) = v57;
        if ((_DWORD)v57)
        {
          if (v57 >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x198EFD02CLL);
          }
          v54 = (const void **)v55;
LABEL_60:
          v58 = (void *)WTF::fastMalloc((WTF *)(4 * v57));
          *(_DWORD *)(v56 + 8) = v57;
          *(_QWORD *)v56 = v58;
          memcpy(v58, *v54, 4 * *v53);
        }
      }
      else
      {
        v57 = *v53;
        v56 = v12 + 16 * v14;
        *(_QWORD *)v56 = 0;
        *(_QWORD *)(v56 + 8) = 0;
        *(_DWORD *)(v56 + 12) = v57;
        if ((_DWORD)v57)
        {
          if (v57 >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x198EFD034);
          }
          goto LABEL_60;
        }
      }
      ++v15;
      v14 = ++HIDWORD(v77);
      v10 = *(unsigned int *)(a1 + 20);
      v52 += 16;
    }
    while (v15 < v10);
  }
  if (v16 >= a2[3])
    goto LABEL_73;
  v59 = (16 * v16) | 0xC;
  do
  {
    v60 = (unsigned int *)(*(_QWORD *)a2 + v59);
    v61 = (const void **)(v60 - 3);
    if (v14 == (_DWORD)v77)
    {
      v62 = WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v76, v14 + 1, (unint64_t)(v60 - 3));
      v12 = v76;
      v63 = v76 + 16 * HIDWORD(v77);
      v60 = (unsigned int *)(v62 + 12);
      v64 = *(unsigned int *)(v62 + 12);
      *(_QWORD *)v63 = 0;
      *(_QWORD *)(v63 + 8) = 0;
      *(_DWORD *)(v63 + 12) = v64;
      if (!(_DWORD)v64)
        goto LABEL_71;
      if (v64 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198EFD03CLL);
      }
      v61 = (const void **)v62;
    }
    else
    {
      v64 = *v60;
      v63 = v12 + 16 * v14;
      *(_QWORD *)v63 = 0;
      *(_QWORD *)(v63 + 8) = 0;
      *(_DWORD *)(v63 + 12) = v64;
      if (!(_DWORD)v64)
        goto LABEL_71;
      if (v64 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198EFD044);
      }
    }
    v65 = (void *)WTF::fastMalloc((WTF *)(4 * v64));
    *(_DWORD *)(v63 + 8) = v64;
    *(_QWORD *)v63 = v65;
    memcpy(v65, *v61, 4 * *v60);
LABEL_71:
    ++v16;
    v14 = ++HIDWORD(v77);
    v59 += 16;
  }
  while (v16 < a2[3]);
  LODWORD(v10) = *(_DWORD *)(a1 + 20);
LABEL_73:
  v66 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v76;
  *(_DWORD *)(a1 + 16) = v77;
  *(_DWORD *)(a1 + 20) = v14;
  *(_BYTE *)a1 = *(_BYTE *)a1 & 0xFB | (4 * (v14 != 0));
  if ((_DWORD)v10)
  {
    v67 = 16 * v10;
    v68 = v66;
    do
    {
      v69 = *(_QWORD *)v68;
      if (*(_QWORD *)v68)
      {
        *(_QWORD *)v68 = 0;
        *(_DWORD *)(v68 + 8) = 0;
        WTF::fastFree(v69, a2, a3, a4, a5, a6, a7, a8);
      }
      v68 += 16;
      v67 -= 16;
    }
    while (v67);
  }
  if (v66)
    WTF::fastFree(v66, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::Yarr::CharacterClassConstructor::intersectionStrings(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  WTF *v23;
  unint64_t v24;
  WTF *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  WTF *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;

  v51 = 0;
  v52 = 0;
  v9 = *(_DWORD *)(a1 + 20);
  if (v9)
  {
    v11 = a2[3];
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      do
      {
        v16 = *(_QWORD *)(a1 + 8) + 16 * v14;
        v17 = *(unsigned int *)(v16 + 12);
        v48 = 0;
        v49 = 0;
        v50 = v17;
        if ((_DWORD)v17)
        {
          if (v17 >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x198EFD350);
          }
          v18 = (WTF *)WTF::fastMalloc((WTF *)(4 * v17));
          v49 = v17;
          v48 = v18;
          memcpy(v18, *(const void **)v16, 4 * *(unsigned int *)(v16 + 12));
          v11 = a2[3];
        }
        if (v15 >= v11)
          goto LABEL_57;
        v19 = *(_QWORD *)a2 + 16 * v15;
        v20 = *(unsigned int *)(v19 + 12);
        if ((_DWORD)v20)
        {
          if (v20 >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x198EFD358);
          }
          v21 = (void *)WTF::fastMalloc((WTF *)(4 * v20));
          memcpy(v21, *(const void **)v19, 4 * *(unsigned int *)(v19 + 12));
        }
        else
        {
          v21 = 0;
        }
        v22 = v50;
        if (v50 > v20)
          goto LABEL_13;
        if (v50 < v20)
          goto LABEL_40;
        if (!v50)
        {
          v33 = v13;
          if (v13 != (_DWORD)v52)
          {
            v42 = v12 + 16 * v13;
            *(_QWORD *)v42 = 0;
            *(_QWORD *)(v42 + 8) = 0;
            *(_DWORD *)(v42 + 12) = 0;
            goto LABEL_39;
          }
LABEL_31:
          v38 = WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v51, v33 + 1, (unint64_t)&v48);
          v12 = v51;
          v39 = v51 + 16 * HIDWORD(v52);
          v40 = *(unsigned int *)(v38 + 12);
          *(_QWORD *)v39 = 0;
          *(_QWORD *)(v39 + 8) = 0;
          *(_DWORD *)(v39 + 12) = v40;
          if (!(_DWORD)v40)
            goto LABEL_39;
          if (!(v40 >> 30))
          {
            v41 = v38;
            v35 = (void *)WTF::fastMalloc((WTF *)(4 * v40));
            *(_DWORD *)(v39 + 8) = v40;
            *(_QWORD *)v39 = v35;
            v36 = *(unsigned int *)(v41 + 12);
            v37 = *(WTF **)v41;
            goto LABEL_34;
          }
LABEL_57:
          __break(0xC471u);
          JUMPOUT(0x198EFD348);
        }
        v26 = v48;
        v27 = v50;
        v28 = (unsigned int *)v21;
        do
        {
          v30 = *(_DWORD *)v26;
          v26 = (WTF *)((char *)v26 + 4);
          v29 = v30;
          v31 = *v28++;
          v32 = v29 >= v31;
          if (v29 != v31)
          {
            if (v32)
              goto LABEL_40;
LABEL_13:
            ++v14;
            if (v21)
              goto LABEL_41;
            goto LABEL_14;
          }
          --v27;
        }
        while (v27);
        v33 = v13;
        if (v13 == (_DWORD)v52)
          goto LABEL_31;
        v34 = v12 + 16 * v13;
        *(_QWORD *)v34 = 0;
        *(_QWORD *)(v34 + 8) = 0;
        *(_DWORD *)(v34 + 12) = v22;
        if (v22 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x198EFD360);
        }
        v35 = (void *)WTF::fastMalloc((WTF *)(4 * v22));
        *(_DWORD *)(v34 + 8) = v22;
        *(_QWORD *)v34 = v35;
        v36 = v50;
        v37 = v48;
LABEL_34:
        memcpy(v35, v37, 4 * v36);
LABEL_39:
        v13 = ++HIDWORD(v52);
        ++v14;
LABEL_40:
        ++v15;
        if (v21)
LABEL_41:
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
LABEL_14:
        v23 = v48;
        if (v48)
        {
          v48 = 0;
          v49 = 0;
          WTF::fastFree((unint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
        }
        v24 = *(unsigned int *)(a1 + 20);
        v11 = a2[3];
      }
      while (v14 < v24 && v15 < v11);
      v43 = v51;
      LODWORD(v11) = v52;
      v9 = *(_DWORD *)(a1 + 20);
    }
    else
    {
      v13 = 0;
      v43 = 0;
      v24 = *(unsigned int *)(a1 + 20);
    }
  }
  else
  {
    v13 = 0;
    LODWORD(v11) = 0;
    v43 = 0;
    v24 = 0;
  }
  v44 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v43;
  *(_DWORD *)(a1 + 16) = v11;
  *(_DWORD *)(a1 + 20) = v13;
  *(_BYTE *)a1 = *(_BYTE *)a1 & 0xFB | (4 * (v13 != 0));
  if (v9)
  {
    v45 = 16 * v24;
    v46 = v44;
    do
    {
      v47 = *(_QWORD *)v46;
      if (*(_QWORD *)v46)
      {
        *(_QWORD *)v46 = 0;
        *(_DWORD *)(v46 + 8) = 0;
        WTF::fastFree(v47, a2, a3, a4, a5, a6, a7, a8);
      }
      v46 += 16;
      v45 -= 16;
    }
    while (v45);
  }
  if (v44)
    WTF::fastFree(v44, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::Yarr::CharacterClassConstructor::subtractionStrings(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  unsigned int *v40;
  const void **v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *__src;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;

  v54 = 0;
  v55 = 0;
  LODWORD(v9) = *(_DWORD *)(a1 + 20);
  if ((_DWORD)v9)
  {
    v11 = a2[3];
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = *(_QWORD *)(a1 + 8) + 16 * v14;
        v17 = *(unsigned int *)(v16 + 12);
        __src = 0;
        v52 = 0;
        v53 = v17;
        if ((_DWORD)v17)
        {
          if (v17 >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x198EFD6F4);
          }
          v18 = (void *)WTF::fastMalloc((WTF *)(4 * v17));
          v52 = v17;
          __src = v18;
          memcpy(v18, *(const void **)v16, 4 * *(unsigned int *)(v16 + 12));
          v11 = a2[3];
        }
        if (v15 >= v11)
        {
LABEL_66:
          __break(0xC471u);
          JUMPOUT(0x198EFD6ECLL);
        }
        v19 = *(_QWORD *)a2 + 16 * v15;
        v20 = *(unsigned int *)(v19 + 12);
        if ((_DWORD)v20)
        {
          if (v20 >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x198EFD6FCLL);
          }
          v21 = (void *)WTF::fastMalloc((WTF *)(4 * v20));
          memcpy(v21, *(const void **)v19, 4 * *(unsigned int *)(v19 + 12));
        }
        else
        {
          v21 = 0;
        }
        v22 = v53;
        if (v53 > v20)
          break;
        if (v53 >= v20)
        {
          if (v53)
          {
            v30 = (unsigned int *)__src;
            v31 = v53;
            v32 = (unsigned int *)v21;
            while (1)
            {
              v34 = *v30++;
              v33 = v34;
              v35 = *v32++;
              v36 = v33 >= v35;
              if (v33 != v35)
                break;
              if (!--v31)
                goto LABEL_22;
            }
            if (!v36)
              break;
          }
          else
          {
LABEL_22:
            ++v14;
          }
        }
        ++v15;
        if (v21)
          goto LABEL_24;
LABEL_30:
        v38 = __src;
        if (__src)
        {
          __src = 0;
          v52 = 0;
          WTF::fastFree((unint64_t)v38, a2, a3, a4, a5, a6, a7, a8);
        }
        v9 = *(unsigned int *)(a1 + 20);
        if (v14 < v9)
        {
          v11 = a2[3];
          if (v15 < v11)
            continue;
        }
        goto LABEL_39;
      }
      if (v13 == (_DWORD)v55)
      {
        v23 = WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v54, v13 + 1, (unint64_t)&__src);
        v12 = v54;
        v24 = v54 + 16 * HIDWORD(v55);
        v25 = *(unsigned int *)(v23 + 12);
        *(_QWORD *)v24 = 0;
        *(_QWORD *)(v24 + 8) = 0;
        *(_DWORD *)(v24 + 12) = v25;
        if (!(_DWORD)v25)
          goto LABEL_29;
        if (v25 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x198EFD714);
        }
        v26 = v23;
        v27 = (void *)WTF::fastMalloc((WTF *)(4 * v25));
        *(_DWORD *)(v24 + 8) = v25;
        *(_QWORD *)v24 = v27;
        v28 = *(unsigned int *)(v26 + 12);
        v29 = *(void **)v26;
      }
      else
      {
        v37 = v12 + 16 * v13;
        *(_QWORD *)v37 = 0;
        *(_QWORD *)(v37 + 8) = 0;
        *(_DWORD *)(v37 + 12) = v22;
        if (!(_DWORD)v22)
          goto LABEL_29;
        if (v22 >> 30)
          goto LABEL_66;
        v27 = (void *)WTF::fastMalloc((WTF *)(4 * v22));
        *(_DWORD *)(v37 + 8) = v22;
        *(_QWORD *)v37 = v27;
        v28 = v53;
        v29 = __src;
      }
      memcpy(v27, v29, 4 * v28);
LABEL_29:
      v13 = ++HIDWORD(v55);
      ++v14;
      if (!v21)
        goto LABEL_30;
LABEL_24:
      WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_30;
    }
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
LABEL_39:
  if (v14 < v9)
  {
    v39 = (16 * v14) | 0xC;
    while (1)
    {
      v40 = (unsigned int *)(*(_QWORD *)(a1 + 8) + v39);
      v41 = (const void **)(v40 - 3);
      if (v13 == (_DWORD)v55)
      {
        v42 = WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v54, v13 + 1, (unint64_t)(v40 - 3));
        v12 = v54;
        v43 = v54 + 16 * HIDWORD(v55);
        v40 = (unsigned int *)(v42 + 12);
        v44 = *(unsigned int *)(v42 + 12);
        *(_QWORD *)v43 = 0;
        *(_QWORD *)(v43 + 8) = 0;
        *(_DWORD *)(v43 + 12) = v44;
        if ((_DWORD)v44)
        {
          if (v44 >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x198EFD704);
          }
          v41 = (const void **)v42;
LABEL_47:
          v45 = (void *)WTF::fastMalloc((WTF *)(4 * v44));
          *(_DWORD *)(v43 + 8) = v44;
          *(_QWORD *)v43 = v45;
          memcpy(v45, *v41, 4 * *v40);
        }
      }
      else
      {
        v44 = *v40;
        v43 = v12 + 16 * v13;
        *(_QWORD *)v43 = 0;
        *(_QWORD *)(v43 + 8) = 0;
        *(_DWORD *)(v43 + 12) = v44;
        if ((_DWORD)v44)
        {
          if (v44 >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x198EFD70CLL);
          }
          goto LABEL_47;
        }
      }
      ++v14;
      v13 = ++HIDWORD(v55);
      v46 = *(unsigned int *)(a1 + 20);
      v39 += 16;
      if (v14 >= v46)
      {
        LODWORD(v9) = *(_DWORD *)(a1 + 20);
        goto LABEL_51;
      }
    }
  }
  v46 = v9;
LABEL_51:
  v47 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v54;
  *(_DWORD *)(a1 + 16) = v55;
  *(_DWORD *)(a1 + 20) = v13;
  *(_BYTE *)a1 = *(_BYTE *)a1 & 0xFB | (4 * (v13 != 0));
  if ((_DWORD)v9)
  {
    v48 = 16 * v46;
    v49 = v47;
    do
    {
      v50 = *(_QWORD *)v49;
      if (*(_QWORD *)v49)
      {
        *(_QWORD *)v49 = 0;
        *(_DWORD *)(v49 + 8) = 0;
        WTF::fastFree(v50, a2, a3, a4, a5, a6, a7, a8);
      }
      v49 += 16;
      v48 -= 16;
    }
    while (v48);
  }
  if (v47)
    WTF::fastFree(v47, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = v6;
        v15 = 16 * v5;
        v16 = (_DWORD *)(v4 + 8);
        do
        {
          *(_QWORD *)v14 = 0;
          *(_QWORD *)(v14 + 8) = 0;
          v17 = *((_QWORD *)v16 - 1);
          *((_QWORD *)v16 - 1) = 0;
          *(_QWORD *)v14 = v17;
          LODWORD(v17) = *v16;
          *v16 = 0;
          *(_DWORD *)(v14 + 8) = v17;
          LODWORD(v17) = v16[1];
          v16[1] = 0;
          *(_DWORD *)(v14 + 12) = v17;
          v18 = *((_QWORD *)v16 - 1);
          if (v18)
          {
            *((_QWORD *)v16 - 1) = 0;
            *v16 = 0;
            WTF::fastFree(v18, v7, v8, v9, v10, v11, v12, v13);
          }
          v16 += 4;
          v14 += 16;
          v15 -= 16;
        }
        while (v15);
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

unint64_t WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;

  result = WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(result + 12);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  if (!(_DWORD)v5)
    goto LABEL_4;
  if (!(v5 >> 30))
  {
    v6 = result;
    v7 = (void *)WTF::fastMalloc((WTF *)(4 * v5));
    *(_DWORD *)(v4 + 8) = v5;
    *(_QWORD *)v4 = v7;
    result = (unint64_t)memcpy(v7, *(const void **)v6, 4 * *(unsigned int *)(v6 + 12));
LABEL_4:
    ++*(_DWORD *)(a1 + 12);
    return result;
  }
  __break(0xC471u);
  return result;
}

void JSC::Yarr::YarrPatternConstructor::atomCharacterClassPushNested(JSC::Yarr::YarrPatternConstructor *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  WTF *v29[2];
  WTF *v30[2];
  WTF *v31[2];
  WTF *v32[2];
  WTF *v33[2];

  v9 = *(unsigned __int16 *)(*(_QWORD *)this + 2);
  LOBYTE(v28) = (v9 & 4) != 0;
  if ((v9 & 0x20) != 0)
    v10 = 1;
  else
    v10 = (v9 >> 5) & 2;
  BYTE1(v28) = 0;
  WORD1(v28) = v10;
  HIDWORD(v28) = v10 != 0;
  *(_OWORD *)v29 = 0u;
  *(_OWORD *)v30 = 0u;
  *(_OWORD *)v31 = 0u;
  *(_OWORD *)v32 = 0u;
  *(_OWORD *)v33 = 0u;
  v11 = *((unsigned int *)this + 31);
  if ((_DWORD)v11 == *((_DWORD *)this + 30))
  {
    v12 = WTF::Vector<JSC::Yarr::CharacterClassConstructor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 112, v11 + 1, (unint64_t)&v28);
    v13 = *((_QWORD *)this + 14) + 88 * *((unsigned int *)this + 31);
    *(_QWORD *)v13 = *v12;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    v14 = v12[1];
    v12[1] = 0;
    *(_QWORD *)(v13 + 8) = v14;
    LODWORD(v14) = *((_DWORD *)v12 + 4);
    *((_DWORD *)v12 + 4) = 0;
    *(_DWORD *)(v13 + 16) = v14;
    LODWORD(v14) = *((_DWORD *)v12 + 5);
    *((_DWORD *)v12 + 5) = 0;
    *(_DWORD *)(v13 + 20) = v14;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 32) = 0;
    v15 = v12[3];
    v12[3] = 0;
    *(_QWORD *)(v13 + 24) = v15;
    LODWORD(v15) = *((_DWORD *)v12 + 8);
    *((_DWORD *)v12 + 8) = 0;
    *(_DWORD *)(v13 + 32) = v15;
    LODWORD(v15) = *((_DWORD *)v12 + 9);
    *((_DWORD *)v12 + 9) = 0;
    *(_DWORD *)(v13 + 36) = v15;
    *(_QWORD *)(v13 + 40) = 0;
    *(_QWORD *)(v13 + 48) = 0;
    v16 = v12[5];
    v12[5] = 0;
    *(_QWORD *)(v13 + 40) = v16;
    LODWORD(v16) = *((_DWORD *)v12 + 12);
    *((_DWORD *)v12 + 12) = 0;
    *(_DWORD *)(v13 + 48) = v16;
    LODWORD(v16) = *((_DWORD *)v12 + 13);
    *((_DWORD *)v12 + 13) = 0;
    *(_DWORD *)(v13 + 52) = v16;
    *(_QWORD *)(v13 + 56) = 0;
    *(_QWORD *)(v13 + 64) = 0;
    v17 = v12[7];
    v12[7] = 0;
    *(_QWORD *)(v13 + 56) = v17;
    LODWORD(v17) = *((_DWORD *)v12 + 16);
    *((_DWORD *)v12 + 16) = 0;
    *(_DWORD *)(v13 + 64) = v17;
    LODWORD(v17) = *((_DWORD *)v12 + 17);
    *((_DWORD *)v12 + 17) = 0;
    *(_DWORD *)(v13 + 68) = v17;
    *(_QWORD *)(v13 + 72) = 0;
    *(_QWORD *)(v13 + 80) = 0;
    v18 = v12[9];
    v12[9] = 0;
    *(_QWORD *)(v13 + 72) = v18;
    LODWORD(v18) = *((_DWORD *)v12 + 20);
    *((_DWORD *)v12 + 20) = 0;
    *(_DWORD *)(v13 + 80) = v18;
    LODWORD(v18) = *((_DWORD *)v12 + 21);
    *((_DWORD *)v12 + 21) = 0;
    *(_DWORD *)(v13 + 84) = v18;
    ++*((_DWORD *)this + 31);
    v19 = v33[0];
    if (v33[0])
    {
      v33[0] = 0;
      LODWORD(v33[1]) = 0;
      WTF::fastFree((unint64_t)v19, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  else
  {
    v20 = *((_QWORD *)this + 14) + 88 * v11;
    *(_QWORD *)v20 = v28;
    *(_QWORD *)(v20 + 16) = 0;
    v29[0] = 0;
    *(_QWORD *)(v20 + 8) = 0;
    LODWORD(v29[1]) = 0;
    *(_DWORD *)(v20 + 16) = 0;
    HIDWORD(v29[1]) = 0;
    *(_QWORD *)(v20 + 28) = 0;
    *(_QWORD *)(v20 + 20) = 0;
    *(_DWORD *)(v20 + 36) = 0;
    v30[0] = 0;
    *(_QWORD *)(v20 + 24) = 0;
    LODWORD(v30[1]) = 0;
    *(_DWORD *)(v20 + 32) = 0;
    HIDWORD(v30[1]) = 0;
    *(_QWORD *)(v20 + 44) = 0;
    *(_QWORD *)(v20 + 36) = 0;
    *(_DWORD *)(v20 + 52) = 0;
    v31[0] = 0;
    *(_QWORD *)(v20 + 40) = 0;
    LODWORD(v31[1]) = 0;
    *(_DWORD *)(v20 + 48) = 0;
    HIDWORD(v31[1]) = 0;
    *(_QWORD *)(v20 + 60) = 0;
    *(_QWORD *)(v20 + 52) = 0;
    *(_DWORD *)(v20 + 68) = 0;
    v32[0] = 0;
    *(_QWORD *)(v20 + 56) = 0;
    LODWORD(v32[1]) = 0;
    *(_DWORD *)(v20 + 64) = 0;
    HIDWORD(v32[1]) = 0;
    *(_QWORD *)(v20 + 76) = 0;
    *(_QWORD *)(v20 + 68) = 0;
    *(_DWORD *)(v20 + 84) = 0;
    v33[0] = 0;
    *(_QWORD *)(v20 + 72) = 0;
    LODWORD(v33[1]) = 0;
    *(_DWORD *)(v20 + 80) = 0;
    HIDWORD(v33[1]) = 0;
    *(_DWORD *)(v20 + 84) = 0;
    ++*((_DWORD *)this + 31);
  }
  v21 = v32[0];
  if (v32[0])
  {
    v32[0] = 0;
    LODWORD(v32[1]) = 0;
    WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = v31[0];
  if (v31[0])
  {
    v31[0] = 0;
    LODWORD(v31[1]) = 0;
    WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
  }
  v23 = v30[0];
  if (v30[0])
  {
    v30[0] = 0;
    LODWORD(v30[1]) = 0;
    WTF::fastFree((unint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
  }
  v24 = v29[0];
  if (!HIDWORD(v29[1]))
  {
    if (!v29[0])
      goto LABEL_16;
    goto LABEL_23;
  }
  v26 = 16 * HIDWORD(v29[1]);
  do
  {
    v27 = *(_QWORD *)v24;
    if (*(_QWORD *)v24)
    {
      *(_QWORD *)v24 = 0;
      *((_DWORD *)v24 + 2) = 0;
      WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
    }
    v24 = (WTF *)((char *)v24 + 16);
    v26 -= 16;
  }
  while (v26);
  v24 = v29[0];
  if (v29[0])
  {
LABEL_23:
    v29[0] = 0;
    LODWORD(v29[1]) = 0;
    WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_16:
  v25 = *((_DWORD *)this + 31);
  if (v25)
    *((_QWORD *)this + 13) = *((_QWORD *)this + 14) + 88 * v25 - 88;
  else
    __break(0xC471u);
}

uint64_t *WTF::Vector<JSC::Yarr::CharacterClassConstructor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = a3;
  v5 = *(uint64_t **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = &v5[11 * *(unsigned int *)(a1 + 12)], (unint64_t)v6 <= a3))
  {
    v25 = *(unsigned int *)(a1 + 8);
    v26 = v25 + (v25 >> 2);
    if (v26 >= 0x10)
      v27 = v26 + 1;
    else
      v27 = 16;
    if (v27 <= a2)
      v27 = a2;
    if (v27 > v25)
    {
      if (v27 >= 0x2E8BA2F)
      {
        __break(0xC471u);
        JUMPOUT(0x198EFDDECLL);
      }
      v28 = &v5[11 * *(unsigned int *)(a1 + 12)];
      v29 = 88 * v27;
      v30 = WTF::fastMalloc((WTF *)(88 * v27));
      *(_DWORD *)(a1 + 8) = (v29 & 0xFFFFFFF8) / 0x58;
      *(_QWORD *)a1 = v30;
      WTF::VectorMover<false,JSC::Yarr::CharacterClassConstructor>::move(v5, v28, v30, v31, v32, v33, v34, v35);
      if (v5)
      {
        if (*(uint64_t **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v5, v36, v37, v38, v39, v40, v41, v42);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v24 = *(uint64_t **)a1;
    }
    else
    {
      if (v9 >= 0x2E8BA2F)
      {
        __break(0xC471u);
        JUMPOUT(0x198EFDDF4);
      }
      v10 = 88 * v9;
      v11 = WTF::fastMalloc((WTF *)(88 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x58;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,JSC::Yarr::CharacterClassConstructor>::move(v5, v6, v11, v12, v13, v14, v15, v16);
      v24 = *(uint64_t **)a1;
      if (v5)
      {
        if (v24 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v5, v17, v18, v19, v20, v21, v22, v23);
        v24 = *(uint64_t **)a1;
      }
    }
    return &v24[(uint64_t)(v3 - (_QWORD)v5) >> 3];
  }
  return (uint64_t *)v3;
}

uint64_t *WTF::VectorMover<false,JSC::Yarr::CharacterClassConstructor>::move(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (result != a2)
  {
    v8 = a3;
    do
    {
      v10 = *result;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)v8 = v10;
      v11 = result[1];
      result[1] = 0;
      *(_QWORD *)(v8 + 8) = v11;
      LODWORD(v11) = *((_DWORD *)result + 4);
      *((_DWORD *)result + 4) = 0;
      *(_DWORD *)(v8 + 16) = v11;
      LODWORD(v11) = *((_DWORD *)result + 5);
      *((_DWORD *)result + 5) = 0;
      *(_DWORD *)(v8 + 20) = v11;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      v12 = result[3];
      result[3] = 0;
      *(_QWORD *)(v8 + 24) = v12;
      LODWORD(v12) = *((_DWORD *)result + 8);
      *((_DWORD *)result + 8) = 0;
      *(_DWORD *)(v8 + 32) = v12;
      LODWORD(v12) = *((_DWORD *)result + 9);
      *((_DWORD *)result + 9) = 0;
      *(_DWORD *)(v8 + 36) = v12;
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      v13 = result[5];
      result[5] = 0;
      *(_QWORD *)(v8 + 40) = v13;
      LODWORD(v13) = *((_DWORD *)result + 12);
      *((_DWORD *)result + 12) = 0;
      *(_DWORD *)(v8 + 48) = v13;
      LODWORD(v13) = *((_DWORD *)result + 13);
      *((_DWORD *)result + 13) = 0;
      *(_DWORD *)(v8 + 52) = v13;
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 64) = 0;
      v14 = result[7];
      result[7] = 0;
      *(_QWORD *)(v8 + 56) = v14;
      LODWORD(v14) = *((_DWORD *)result + 16);
      *((_DWORD *)result + 16) = 0;
      *(_DWORD *)(v8 + 64) = v14;
      LODWORD(v14) = *((_DWORD *)result + 17);
      *((_DWORD *)result + 17) = 0;
      *(_DWORD *)(v8 + 68) = v14;
      *(_QWORD *)(v8 + 72) = 0;
      *(_QWORD *)(v8 + 80) = 0;
      v15 = result[9];
      result[9] = 0;
      *(_QWORD *)(v8 + 72) = v15;
      LODWORD(v15) = *((_DWORD *)result + 20);
      *((_DWORD *)result + 20) = 0;
      *(_DWORD *)(v8 + 80) = v15;
      LODWORD(v15) = *((_DWORD *)result + 21);
      *((_DWORD *)result + 21) = 0;
      *(_DWORD *)(v8 + 84) = v15;
      JSC::Yarr::CharacterClassConstructor::~CharacterClassConstructor((JSC::Yarr::CharacterClassConstructor *)result, a2, a3, a4, a5, a6, a7, a8);
      result = (uint64_t *)(v16 + 88);
      v8 += 88;
    }
    while (result != a2);
  }
  return result;
}

unint64_t WTF::Vector<JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::NestingState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int16 v38;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if (v5 + 3 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v22 = *(_QWORD *)a1;
        return v22 + v3 - v5;
      }
      if (v9 < 0x55555556)
      {
        v10 = 3 * v9;
        v11 = WTF::fastMalloc((WTF *)(3 * v9));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = v10 / 3;
        *(_QWORD *)a1 = v11;
        do
        {
          v20 = v11 + v19;
          v21 = *(_WORD *)(v5 + v19);
          *(_BYTE *)(v20 + 2) = *(_BYTE *)(v5 + v19 + 2);
          *(_WORD *)v20 = v21;
          v19 += 3;
        }
        while (3 * v6 != v19);
        v22 = *(_QWORD *)a1;
        if (v5)
        {
          if (v22 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
          v22 = *(_QWORD *)a1;
        }
        return v22 + v3 - v5;
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x198EFE0D4);
    }
  }
  v23 = *(unsigned int *)(a1 + 8);
  v24 = v23 + (v23 >> 2);
  if (v24 >= 0x10)
    v25 = v24 + 1;
  else
    v25 = 16;
  if (v25 <= a2)
    v25 = a2;
  if (v25 > v23)
  {
    if (v25 >= 0x55555556)
      goto LABEL_33;
    v26 = *(unsigned int *)(a1 + 12);
    v27 = 3 * v25;
    v28 = WTF::fastMalloc((WTF *)(3 * v25));
    *(_DWORD *)(a1 + 8) = v27 / 3;
    *(_QWORD *)a1 = v28;
    if ((_DWORD)v26)
    {
      v36 = 3 * v26;
      v37 = v5;
      do
      {
        v38 = *(_WORD *)v37;
        *(_BYTE *)(v28 + 2) = *(_BYTE *)(v37 + 2);
        *(_WORD *)v28 = v38;
        v28 += 3;
        v37 += 3;
        v36 -= 3;
      }
      while (v36);
    }
    if (v5)
    {
      if (*(_QWORD *)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v29, v30, v31, v32, v33, v34, v35);
    }
  }
  return v3;
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::atomPatternCharacter(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v9;
  int v12;
  unsigned int v13;
  char *v14;
  char v15;

  v8 = *(unsigned __int8 *)(a1 + 20);
  v9 = *(unsigned __int8 *)(a1 + 23);
  *(_BYTE *)(a1 + 23) = 0;
  switch(*(_DWORD *)(a1 + 16))
  {
    case 0:
    case 7:
      goto LABEL_12;
    case 1:
      if (v8 >= 2)
        goto LABEL_19;
      if (a2 != 45)
        goto LABEL_21;
      v12 = 2;
      goto LABEL_24;
    case 2:
      v13 = *(_DWORD *)(a1 + 24);
      if (v13 > a2)
      {
        v14 = *(char **)(a1 + 8);
        v15 = 14;
        goto LABEL_20;
      }
      JSC::Yarr::CharacterClassConstructor::putRange(*(unint64_t **)(*(_QWORD *)a1 + 104), v13, a2);
      if (!*(_BYTE *)(a1 + 20))
      {
        *(_BYTE *)(a1 + 20) = 1;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 104) + 1) = 1;
      }
      v12 = 5;
      goto LABEL_24;
    case 3:
      if (a2 != 45 || v8 > 1)
        goto LABEL_10;
      JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)0x2D, a3, a4, a5, a6, a7, a8);
      v12 = 4;
      goto LABEL_24;
    case 4:
      v14 = *(char **)(a1 + 8);
      v15 = 15;
      goto LABEL_20;
    case 5:
LABEL_10:
      if (!v8)
      {
        *(_BYTE *)(a1 + 20) = 1;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 104) + 1) = 1;
      }
LABEL_12:
      if (a2 != 45 || v9)
        goto LABEL_23;
      v14 = *(char **)(a1 + 8);
      v15 = 31;
      goto LABEL_20;
    case 6:
      if (v8 >= 2)
        **(_BYTE **)(a1 + 8) = 29;
      if (a2 == 45)
      {
LABEL_19:
        v14 = *(char **)(a1 + 8);
        v15 = 29;
LABEL_20:
        *v14 = v15;
      }
      else
      {
LABEL_21:
        JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)*(unsigned int *)(a1 + 24), a3, a4, a5, a6, a7, a8);
        if (!*(_BYTE *)(a1 + 20))
        {
          *(_BYTE *)(a1 + 20) = 1;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 104) + 1) = 1;
        }
LABEL_23:
        *(_DWORD *)(a1 + 24) = a2;
        v12 = 1;
LABEL_24:
        *(_DWORD *)(a1 + 16) = v12;
      }
      return;
    default:
      return;
  }
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ParseEscapeMode)2>(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  void *v5;

  result = 0;
  if (a2 <= 0x7F && *(unsigned __int8 *)(a1 + 32) - 1 <= 1)
  {
    if (a2 && v5)
    {
      return 0;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 22;
      return 1;
    }
  }
  return result;
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::atomBuiltInCharacterClass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  BOOL v9;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v22[3];
  unsigned __int8 v23;
  int v24;

  v24 = a2;
  v23 = a3;
  v8 = *(unsigned __int8 *)(a1 + 20);
  if (*(_BYTE *)(a1 + 20))
    v9 = v8 == 1;
  else
    v9 = 1;
  v22[0] = a1;
  v22[1] = (uint64_t)&v24;
  v22[2] = (uint64_t)&v23;
  switch(*(_DWORD *)(a1 + 16))
  {
    case 0:
    case 3:
    case 7:
      goto LABEL_5;
    case 1:
      if (v9)
      {
        JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)*(unsigned int *)(a1 + 24), a3, a4, a5, a6, a7, a8);
        v8 = *(unsigned __int8 *)(a1 + 20);
        LODWORD(a2) = v24;
LABEL_11:
        if (v8)
        {
LABEL_5:
          v11 = (a2 - 329) < 7;
          if (v8 >= 2)
          {
            if (v8 != 2)
              goto LABEL_8;
            v12 = (a2 - 329) < 7 && *(_BYTE *)(a1 + 21) != 0;
LABEL_7:
            *(_BYTE *)(a1 + 21) = v12;
LABEL_8:
            JSC::Yarr::YarrPatternConstructor::atomCharacterClassBuiltIn(*(JSC::Yarr::YarrPattern ***)a1, a2, v23, a4, a5, a6, a7, a8);
            *(_DWORD *)(a1 + 16) = 3;
            return;
          }
        }
        else
        {
          *(_BYTE *)(a1 + 20) = 1;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 104) + 1) = 1;
          v11 = (a2 - 329) < 7;
        }
        v12 = *(_BYTE *)(a1 + 21) | v11;
        goto LABEL_7;
      }
      v19 = *(char **)(a1 + 8);
      v20 = 29;
LABEL_15:
      *v19 = v20;
      return;
    case 2:
      JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)*(unsigned int *)(a1 + 24), a3, a4, a5, a6, a7, a8);
      JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)0x2D, v13, v14, v15, v16, v17, v18);
      goto LABEL_14;
    case 4:
LABEL_14:
      v19 = *(char **)(a1 + 8);
      v20 = 15;
      goto LABEL_15;
    case 5:
      goto LABEL_11;
    case 6:
      if (!v9)
        **(_BYTE **)(a1 + 8) = 29;
      JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::atomBuiltInCharacterClass(JSC::Yarr::BuiltInCharacterClassID,BOOL)::{lambda(void)#1}::operator()(v22, a2, a3, a4, a5, a6, a7, a8);
      return;
    default:
      return;
  }
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::consumeOctal(uint64_t a1, int a2)
{
  uint64_t result;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  result = 0;
  v4 = *(_DWORD *)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 28);
  v6 = a2 - 1;
  do
  {
    if (v4 == v5)
      break;
    v7 = *(_QWORD *)(a1 + 16);
    if ((*(_BYTE *)(v7 + v5) & 0xF8) != 0x30)
      break;
    v8 = v5++;
    *(_DWORD *)(a1 + 28) = v5;
    result = *(unsigned __int8 *)(v7 + v8) + 8 * (_DWORD)result - 48;
    if (v6-- == 0)
      break;
  }
  while (result < 0x20);
  return result;
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeUnicodePropertyExpression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  BOOL v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  char v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v28;
  WTF::StringImpl *v29;
  _BYTE *v30;
  WTF::StringImpl *v31;
  size_t matched;
  size_t v33;
  uint64_t v34;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  _WORD *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  int v94;
  char v95;

  v9 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 24)
    || ((v10 = *(_QWORD *)(a1 + 16), v11 = *(unsigned __int8 *)(v10 + v9), v11 != 95)
      ? (v12 = (v11 - 48) >= 0xA)
      : (v12 = 0),
        v12 ? (v13 = (v11 | 0x20u) - 97 >= 0x1A) : (v13 = 0),
        v13 && v11 != 61))
  {
    LODWORD(v33) = 0;
    v34 = 0;
    LOBYTE(matched) = 0;
    *(_BYTE *)(a1 + 8) = 25;
    return v34 & 0x100000000 | ((_DWORD)v33 << 8) | matched;
  }
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 1;
  *(_DWORD *)(a1 + 28) = v9 + 1;
  WTF::StringBuilder::append<char32_t>((uint64_t)&v92, *(unsigned __int8 *)(v10 + v9), a3, a4, a5, a6, a7, a8);
  v21 = *(_DWORD *)(a1 + 28);
  if (v21 == *(_DWORD *)(a1 + 24))
  {
    v24 = 0;
LABEL_69:
    LODWORD(v33) = 0;
    LOBYTE(matched) = 0;
    goto LABEL_70;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  while (1)
  {
    v25 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v21);
    *(_DWORD *)(a1 + 28) = v21 + 1;
    if (v25 == 125)
      break;
    if (v25 == 61)
    {
      if ((v23 & 1) != 0)
      {
        ++v22;
        v23 = 1;
      }
      else
      {
        WTF::StringBuilder::toString((WTF::StringBuilder *)&v92, v15, v16, v17, v18, v19, v20, &v88);
        v61 = v88;
        v88 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
          {
            WTF::StringImpl::~StringImpl(v24, v54, v55, v56, v57, v58, v59, v60);
            WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
            v79 = v88;
            v88 = 0;
            if (v79)
            {
              if (*(_DWORD *)v79 == 2)
              {
                WTF::StringImpl::~StringImpl(v79, v54, v55, v56, v57, v58, v59, v60);
                WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
              }
              else
              {
                *(_DWORD *)v79 -= 2;
              }
            }
          }
          else
          {
            *(_DWORD *)v24 -= 2;
          }
        }
        WTF::StringBuilder::clear(&v92, v54, v55, v56, v57, v58, v59, v60);
        v23 = 1;
        v24 = v61;
      }
    }
    else if (v25 != 95 && (v25 - 48) >= 0xA && (v25 | 0x20u) - 97 >= 0x1A)
    {
      ++v22;
    }
    else
    {
      if (v94 == -1)
        v28 = 0xFFFFFFFFLL;
      else
        v28 = (v94 + 1);
      v29 = v93;
      if ((v93 || (v29 = v92) != 0) && (*((_BYTE *)v29 + 16) & 4) == 0)
      {
        v62 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v92, (WTF::AtomStringImpl *)v28, v15, v16, v17, v18, v19, v20);
        if (v62)
          *v62 = v25;
      }
      else
      {
        v30 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v92, (WTF::AtomStringImpl *)v28, v15, v16, v17, v18, v19, v20);
        if (v30)
          *v30 = v25;
      }
    }
    v21 = *(_DWORD *)(a1 + 28);
    if (v21 == *(_DWORD *)(a1 + 24))
      goto LABEL_69;
  }
  if (v22)
    goto LABEL_69;
  if ((v23 & 1) != 0)
  {
    if (v24)
      *(_DWORD *)v24 += 2;
    v91 = v24;
    WTF::StringBuilder::toString((WTF::StringBuilder *)&v92, v15, v16, v17, v18, v19, v20, &v90);
    matched = JSC::Yarr::unicodeMatchPropertyValue((uint64_t *)&v91, &v90);
    v53 = v90;
    v90 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
      {
        WTF::StringImpl::~StringImpl(v53, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v53 -= 2;
      }
    }
    v33 = matched >> 8;
    v34 = matched & 0x100000000;
    v91 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        v44 = v24;
LABEL_44:
        WTF::StringImpl::~StringImpl(v44, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
        goto LABEL_36;
      }
      *(_DWORD *)v24 -= 2;
    }
  }
  else
  {
    v31 = v92;
    if (v92
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v92, (uint64_t)v14, v15, v16, v17, v18, v19, v20),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v92),
          (v31 = v92) != 0))
    {
      *(_DWORD *)v31 += 2;
    }
    v89 = v31;
    matched = JSC::Yarr::unicodeMatchProperty(&v89, *(unsigned __int8 *)(a1 + 32));
    v33 = matched >> 8;
    v34 = matched & 0x100000000;
    v89 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 != 2)
      {
        *(_DWORD *)v31 -= 2;
        goto LABEL_36;
      }
      v44 = v31;
      goto LABEL_44;
    }
  }
LABEL_36:
  if (!HIDWORD(matched))
  {
LABEL_70:
    v34 = 0;
    *(_BYTE *)(a1 + 8) = 25;
  }
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)&v92, v14, v15, v16, v17, v18, v19, v20);
  return v34 & 0x100000000 | ((_DWORD)v33 << 8) | matched;
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::parseClassStringDisjunction(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  void *v22;
  void *v24;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v40;
  unsigned int v41;
  unsigned __int8 v42;
  int v43;
  unsigned int v44;
  unsigned __int8 v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  WTF *v57;
  WTF *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v62;
  char v63;
  uint64_t v64;
  WTF *v65[2];
  WTF *v66[2];
  int v67;

  v9 = (char *)(a1 + 8);
  ++*(_DWORD *)(a1 + 28);
  v62 = *(_QWORD *)a1;
  v63 = 0;
  v64 = a1 + 8;
  *(_OWORD *)v65 = 0u;
  *(_OWORD *)v66 = 0u;
  while (2)
  {
    v11 = *(_DWORD *)(a1 + 24);
    v10 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v10 == v11)
    {
      v56 = 16;
      goto LABEL_123;
    }
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(unsigned __int8 *)(v12 + v10);
    if (v13 > 0x7B)
    {
      if (v13 == 124)
      {
        *(_DWORD *)(a1 + 28) = v10 + 1;
        JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassStringDisjunctionParserDelegate::newAlternative((uint64_t)&v62, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_115;
      }
      if (v13 == 125)
      {
        *(_DWORD *)(a1 + 28) = v10 + 1;
        JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassStringDisjunctionParserDelegate::newAlternative((uint64_t)&v62, a2, a3, a4, a5, a6, a7, a8);
        JSC::Yarr::CharacterClassConstructor::atomClassStringDisjunction(*(_QWORD *)(v62 + 104), (uint64_t)v66, v50, v51, v52, v53, v54, v55);
        *a2 = v63;
        goto LABEL_124;
      }
LABEL_16:
      v19 = v10 + 1;
      *(_DWORD *)(a1 + 28) = v10 + 1;
      v20 = *(unsigned __int8 *)(v12 + v10);
      if (!*(_BYTE *)(v12 + v10))
        goto LABEL_118;
      if ((v20 & 0x80) == 0)
      {
        if (memchr("()[]{}/|)", *(unsigned __int8 *)(v12 + v10), 0xAuLL))
        {
LABEL_118:
          v56 = 31;
          goto LABEL_123;
        }
        {
          v56 = 29;
          goto LABEL_123;
        }
      }
LABEL_32:
      v67 = v20;
      if (HIDWORD(v65[1]) != LODWORD(v65[1]))
      {
        v21 = HIDWORD(v65[1]) + 1;
        *((_DWORD *)v65[0] + HIDWORD(v65[1])) = v20;
        goto LABEL_75;
      }
      goto LABEL_112;
    }
    if (v13 != 92)
    {
      if (v13 == 45)
      {
        *(_DWORD *)(a1 + 28) = v10 + 1;
        *(_BYTE *)(a1 + 8) = 31;
        goto LABEL_124;
      }
      goto LABEL_16;
    }
    v14 = (v10 + 1);
    *(_DWORD *)(a1 + 28) = v14;
    if ((_DWORD)v14 == v11)
    {
      v56 = 17;
      goto LABEL_123;
    }
    v15 = *(unsigned __int8 *)(v12 + v14);
    switch(*(_BYTE *)(v12 + v14))
    {
      case '-':
        goto LABEL_40;
      case '0':
        *(_DWORD *)(a1 + 28) = v10 + 2;
        if ((_DWORD)v10 + 2 != v11 && *(unsigned __int8 *)(v12 + (v10 + 2)) - 48 < 0xA)
        {
          if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          {
LABEL_121:
            v56 = 23;
            goto LABEL_123;
          }
          v16 = a1;
          v17 = 2;
LABEL_10:
          v18 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::consumeOctal(v16, v17);
LABEL_24:
          v67 = v18;
          if (HIDWORD(v65[1]) != LODWORD(v65[1]))
          {
            v21 = HIDWORD(v65[1]) + 1;
            *((_DWORD *)v65[0] + HIDWORD(v65[1])) = v18;
            goto LABEL_75;
          }
          goto LABEL_112;
        }
        v67 = 0;
        if (HIDWORD(v65[1]) == LODWORD(v65[1]))
          goto LABEL_112;
        v21 = HIDWORD(v65[1]) + 1;
        *((_DWORD *)v65[0] + HIDWORD(v65[1])) = 0;
        goto LABEL_75;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          goto LABEL_121;
        if (v15 <= 0x37)
        {
          v16 = a1;
          v17 = 3;
          goto LABEL_10;
        }
        *(_DWORD *)(a1 + 28) = v10 + 2;
        v18 = *(unsigned __int8 *)(v12 + v14);
        goto LABEL_24;
      case 'B':
        *(_DWORD *)(a1 + 28) = v10 + 2;
        v27 = 66;
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          goto LABEL_122;
        goto LABEL_72;
      case 'D':
        *(_DWORD *)(a1 + 28) = v10 + 2;
        v27 = 68;
        goto LABEL_72;
      case 'P':
      case 'p':
      case 'q':
        *(_DWORD *)(a1 + 28) = v10 + 2;
        v20 = *(unsigned __int8 *)(v12 + v14);
        if (*(char *)(v12 + v14) < 0 || *(unsigned __int8 *)(a1 + 32) - 1 > 1)
          goto LABEL_32;
        if (v20 && v22 != 0)
          goto LABEL_32;
        goto LABEL_122;
      case 'S':
        *(_DWORD *)(a1 + 28) = v10 + 2;
        v27 = 83;
        goto LABEL_72;
      case 'W':
        *(_DWORD *)(a1 + 28) = v10 + 2;
        v27 = 87;
        goto LABEL_72;
      case 'b':
        *(_DWORD *)(a1 + 28) = v10 + 2;
        v27 = 8;
        goto LABEL_72;
      case 'c':
        *(_DWORD *)(a1 + 28) = v10 + 2;
        if ((_DWORD)v10 + 2 == v11)
        {
          if (*(unsigned __int8 *)(a1 + 32) - 1 < 2)
            goto LABEL_122;
          v29 = (int)v65[1];
          v28 = HIDWORD(v65[1]);
          goto LABEL_54;
        }
        *(_DWORD *)(a1 + 28) = v10 + 3;
        v46 = *(unsigned __int8 *)(v12 + (v10 + 2));
        if ((v46 | 0x20u) - 97 <= 0x19)
        {
          v26 = v46 & 0x1F;
LABEL_95:
          v67 = v26;
          v47 = HIDWORD(v65[1]);
          if (HIDWORD(v65[1]) == LODWORD(v65[1]))
          {
            WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v65, (unint64_t)&v67);
            v48 = HIDWORD(v65[1]);
          }
          else
          {
            v48 = HIDWORD(v65[1]) + 1;
            *((_DWORD *)v65[0] + HIDWORD(v65[1])) = v26;
            HIDWORD(v65[1]) = v47 + 1;
          }
          if (v48 >= 2)
LABEL_114:
            v63 = 1;
LABEL_115:
          if (*v9)
            goto LABEL_124;
          continue;
        }
        if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
        {
          v29 = (int)v65[1];
          v28 = HIDWORD(v65[1]);
          if (v46 == 95 || (v46 - 48) <= 9)
          {
            v49 = v46 & 0x1F;
            v67 = v49;
            if (HIDWORD(v65[1]) != LODWORD(v65[1]))
            {
              v21 = HIDWORD(v65[1]) + 1;
              *((_DWORD *)v65[0] + HIDWORD(v65[1])) = v49;
LABEL_75:
              HIDWORD(v65[1]) = v21;
LABEL_113:
              if (v21 >= 2)
                goto LABEL_114;
              goto LABEL_115;
            }
LABEL_112:
            WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v65, (unint64_t)&v67);
            v21 = HIDWORD(v65[1]);
            goto LABEL_113;
          }
LABEL_54:
          *(_DWORD *)(a1 + 28) = v14;
          v67 = 92;
          if (v28 != v29)
          {
            v21 = v28 + 1;
            *((_DWORD *)v65[0] + v28) = 92;
            goto LABEL_75;
          }
          goto LABEL_112;
        }
        v56 = 24;
LABEL_123:
        *v9 = v56;
LABEL_124:
        v57 = v66[0];
        if (HIDWORD(v66[1]))
        {
          v59 = 16 * HIDWORD(v66[1]);
          do
          {
            v60 = *(_QWORD *)v57;
            if (*(_QWORD *)v57)
            {
              *(_QWORD *)v57 = 0;
              *((_DWORD *)v57 + 2) = 0;
              WTF::fastFree(v60, a2, a3, a4, a5, a6, a7, a8);
            }
            v57 = (WTF *)((char *)v57 + 16);
            v59 -= 16;
          }
          while (v59);
          v57 = v66[0];
          if (v66[0])
            goto LABEL_135;
        }
        else
        {
          if (!v66[0])
            goto LABEL_126;
LABEL_135:
          v66[0] = 0;
          LODWORD(v66[1]) = 0;
          WTF::fastFree((unint64_t)v57, a2, a3, a4, a5, a6, a7, a8);
        }
LABEL_126:
        v58 = v65[0];
        if (v65[0])
        {
          v65[0] = 0;
          LODWORD(v65[1]) = 0;
          WTF::fastFree((unint64_t)v58, a2, a3, a4, a5, a6, a7, a8);
        }
        return;
      case 'd':
        *(_DWORD *)(a1 + 28) = v10 + 2;
        v27 = 100;
        goto LABEL_72;
      case 'f':
        *(_DWORD *)(a1 + 28) = v10 + 2;
        v27 = 12;
        goto LABEL_72;
      case 'k':
        *(_DWORD *)(a1 + 28) = v10 + 2;
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          goto LABEL_122;
        v67 = 107;
        v30 = HIDWORD(v65[1]);
        if (HIDWORD(v65[1]) == LODWORD(v65[1]))
        {
          WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v65, (unint64_t)&v67);
          v31 = HIDWORD(v65[1]);
        }
        else
        {
          v31 = HIDWORD(v65[1]) + 1;
          *((_DWORD *)v65[0] + HIDWORD(v65[1])) = 107;
          HIDWORD(v65[1]) = v30 + 1;
        }
        if (v31 >= 2)
          v63 = 1;
        *(_BYTE *)(a1 + 49) = 1;
        goto LABEL_115;
      case 'n':
        *(_DWORD *)(a1 + 28) = v10 + 2;
        v67 = 10;
        if (HIDWORD(v65[1]) == LODWORD(v65[1]))
          goto LABEL_112;
        v21 = HIDWORD(v65[1]) + 1;
        *((_DWORD *)v65[0] + HIDWORD(v65[1])) = 10;
        goto LABEL_75;
      case 'r':
        *(_DWORD *)(a1 + 28) = v10 + 2;
        v27 = 13;
        goto LABEL_72;
      case 's':
        *(_DWORD *)(a1 + 28) = v10 + 2;
        v27 = 115;
        goto LABEL_72;
      case 't':
        *(_DWORD *)(a1 + 28) = v10 + 2;
        v27 = 9;
        goto LABEL_72;
      case 'u':
        v32 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::UnicodeParseContext)0>(a1);
        if (*(_BYTE *)(a1 + 8))
          goto LABEL_124;
        if (v32 == -1)
          v26 = 117;
        else
          v26 = v32;
        goto LABEL_95;
      case 'v':
        *(_DWORD *)(a1 + 28) = v10 + 2;
        v27 = 11;
        goto LABEL_72;
      case 'w':
        *(_DWORD *)(a1 + 28) = v10 + 2;
        v27 = 119;
LABEL_72:
        v67 = v27;
        v33 = HIDWORD(v65[1]);
        if (HIDWORD(v65[1]) == LODWORD(v65[1]))
          goto LABEL_112;
        v21 = HIDWORD(v65[1]) + 1;
        v34 = v65[0];
        goto LABEL_74;
      case 'x':
        v35 = (v10 + 2);
        *(_DWORD *)(a1 + 28) = v35;
        if ((_DWORD)v35 != v11)
        {
          v36 = *(unsigned __int8 *)(v12 + v35);
          v37 = v36 - 48;
          v38 = (v36 | 0x20) - 97;
          if (v37 < 0xA || v38 <= 5)
          {
            v40 = (v10 + 3);
            *(_DWORD *)(a1 + 28) = v40;
            v41 = *(unsigned __int8 *)(v12 + v35);
            v42 = v41 >= 0x41 ? (v41 + 9) & 0xF : v41 - 48;
            if ((_DWORD)v40 != v11)
            {
              v43 = *(unsigned __int8 *)(v12 + v40);
              if ((v43 - 48) < 0xA || (v43 | 0x20u) - 97 < 6)
              {
                *(_DWORD *)(a1 + 28) = v10 + 4;
                v44 = *(unsigned __int8 *)(v12 + v40);
                if (v44 >= 0x41)
                  v45 = (v44 + 9) & 0xF;
                else
                  v45 = v44 - 48;
                v26 = v45 | (16 * v42);
                goto LABEL_95;
              }
            }
          }
        }
        *(_DWORD *)(a1 + 28) = v35;
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
        {
LABEL_122:
          v56 = 22;
          goto LABEL_123;
        }
        v67 = 120;
        v33 = HIDWORD(v65[1]);
        if (HIDWORD(v65[1]) == LODWORD(v65[1]))
          goto LABEL_112;
        v21 = HIDWORD(v65[1]) + 1;
        v34 = v65[0];
        v27 = 120;
LABEL_74:
        *((_DWORD *)v34 + v33) = v27;
        goto LABEL_75;
      default:
        if ((v15 & 0x80) == 0 && *(unsigned __int8 *)(a1 + 32) - 1 <= 1)
        {
          if (!v15 || v24 == 0)
            goto LABEL_122;
        }
LABEL_40:
        *(_DWORD *)(a1 + 28) = v10 + 2;
        v26 = *(unsigned __int8 *)(v12 + v14);
        goto LABEL_95;
    }
  }
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::UnicodeParseContext)0>(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int8 v28;
  uint64_t v29;
  unsigned int v30;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v40;
  unsigned __int8 v41;
  uint64_t v42;
  int v43;
  int v45;
  unsigned int v46;

  v1 = *(unsigned __int8 *)(a1 + 32) - 3;
  v3 = *(_DWORD *)(a1 + 24);
  v2 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v2 == v3
    || (v4 = *(_QWORD *)(a1 + 16), *(_BYTE *)(v4 + v2) != 117)
    || (v5 = (v2 + 1), *(_DWORD *)(a1 + 28) = v5, (_DWORD)v5 == v3))
  {
    if (v1 < 0xFFFFFFFE)
      return 0xFFFFFFFFLL;
LABEL_41:
    *(_BYTE *)(a1 + 8) = 18;
    return 0xFFFFFFFFLL;
  }
  v6 = *(unsigned __int8 *)(v4 + v5);
  if (v1 >= 0xFFFFFFFE && v6 == 123)
  {
    v32 = 0;
    *(_DWORD *)(a1 + 28) = v2 + 2;
    v33 = v2 + 3;
    v34 = -v3;
    while (v34 + v33 != 1)
    {
      v35 = v33 - 1;
      v36 = *(unsigned __int8 *)(v4 + v35);
      v37 = v36 - 48;
      v38 = (v36 | 0x20) - 97;
      if (v37 >= 0xA && v38 >= 6)
        break;
      *(_DWORD *)(a1 + 28) = v33;
      v40 = *(unsigned __int8 *)(v4 + v35);
      v41 = v40 >= 0x41 ? (v40 + 9) & 0xF : v40 - 48;
      v42 = v41 | (16 * v32);
      if (v42 >= 0x110000 || !(v34 + v33))
        break;
      v32 = v41 | (16 * v32);
      v43 = *(unsigned __int8 *)(v4 + v33++);
      if (v43 == 125)
      {
        *(_DWORD *)(a1 + 28) = v33;
        return v42;
      }
    }
    *(_BYTE *)(a1 + 8) = 19;
    return 0xFFFFFFFFLL;
  }
  v7 = v6 - 48;
  v8 = (v6 | 0x20) - 97;
  if (v7 >= 0xA && v8 > 5)
    goto LABEL_44;
  v10 = (v2 + 2);
  *(_DWORD *)(a1 + 28) = v10;
  v11 = *(unsigned __int8 *)(v4 + v5);
  v12 = v11 >= 0x41 ? (v11 + 9) & 0xF : v11 - 48;
  if ((_DWORD)v10 == v3)
    goto LABEL_44;
  v13 = *(unsigned __int8 *)(v4 + v10);
  v14 = v13 - 48;
  v15 = (v13 | 0x20) - 97;
  if (v14 >= 0xA && v15 > 5)
    goto LABEL_44;
  v17 = (v2 + 3);
  *(_DWORD *)(a1 + 28) = v17;
  v18 = *(unsigned __int8 *)(v4 + v10);
  v19 = v18 >= 0x41 ? (v18 + 9) & 0xF : v18 - 48;
  if ((_DWORD)v17 == v3
    || (v20 = *(unsigned __int8 *)(v4 + v17), (v20 - 48) >= 0xA) && (v20 | 0x20u) - 97 > 5
    || ((v21 = (v2 + 4), *(_DWORD *)(a1 + 28) = v21, v22 = *(unsigned __int8 *)(v4 + v17), v22 >= 0x41)
      ? (v23 = (v22 + 9) & 0xF)
      : (v23 = v22 - 48),
        (_DWORD)v21 == v3
     || (v24 = *(unsigned __int8 *)(v4 + v21), (v24 - 48) >= 0xA) && (v24 | 0x20u) - 97 >= 6))
  {
LABEL_44:
    *(_DWORD *)(a1 + 28) = v5;
    if (v1 < 0xFFFFFFFE)
      return 0xFFFFFFFFLL;
    goto LABEL_41;
  }
  v25 = (16 * v19) | (v12 << 8) | v23;
  v26 = v2 + 5;
  *(_DWORD *)(a1 + 28) = v2 + 5;
  v27 = *(unsigned __int8 *)(v4 + v21);
  if (v27 >= 0x41)
    v28 = (v27 + 9) & 0xF;
  else
    v28 = v27 - 48;
  v29 = v28 | (16 * v25);
  if ((v25 & 0xFFC0) == 0xD80 && v1 >= 0xFFFFFFFE)
  {
    v46 = v29;
    v45 = v2 + 5;
    if (v3 - v26 >= 6 && *(_BYTE *)(v4 + v26) == 92)
    {
      *(_DWORD *)(a1 + 28) = v2 + 6;
      if ((_DWORD)v2 + 6 != v3 && *(_BYTE *)(v4 + (v2 + 6)) == 117)
      {
        *(_DWORD *)(a1 + 28) = v2 + 7;
        v30 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::tryConsumeHex(a1, 4);
        if (v30 >> 10 == 55)
          return v30 + (v46 << 10) - 56613888;
      }
      *(_DWORD *)(a1 + 28) = v45;
    }
    return v46;
  }
  return v29;
}

unint64_t *JSC::Yarr::CharacterClassConstructor::putRange(unint64_t *result, unsigned int a2, unsigned int a3)
{
  unint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  _UNKNOWN **v19;
  _WORD *v20;
  unsigned int v21;
  unsigned __int16 *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unint64_t *v28;
  uint64_t v29;
  unsigned int v30;

  v5 = result;
  if (a2 <= 0x7F)
  {
    v7 = a3 >= 0x7F ? 127 : a3;
    result = JSC::Yarr::CharacterClassConstructor::addSortedRange(result, (uint64_t)(result + 5), a2, v7);
    if ((*(_BYTE *)v5 & 1) != 0)
    {
      if (a2 <= 0x5Au)
      {
        v8 = v7;
        if (v7 >= 0x41u)
        {
          v11 = a2;
          if (a2 <= 0x41u)
            v11 = 65;
          if (v7 >= 0x5Au)
            v8 = 90;
          result = JSC::Yarr::CharacterClassConstructor::addSortedRange(v5, (uint64_t)(v5 + 5), v11 + 32, v8 + 32);
        }
      }
      if (a2 <= 0x7Au)
      {
        v9 = v7;
        if (v7 >= 0x61u)
        {
          v10 = a2;
          if (a2 <= 0x61u)
            v10 = 97;
          if (v7 >= 0x7Au)
            v9 = 122;
          result = JSC::Yarr::CharacterClassConstructor::addSortedRange(v5, (uint64_t)(v5 + 5), v10 - 32, v9 - 32);
        }
      }
    }
  }
  if (a3 >= 0x80)
  {
    v6 = a2 <= 0x80 ? 128 : a2;
    result = JSC::Yarr::CharacterClassConstructor::addSortedRange(v5, (uint64_t)(v5 + 9), v6, a3);
    if ((*(_BYTE *)v5 & 1) != 0)
    {
      v12 = &JSC::Yarr::unicodeRangeInfo;
      v13 = *((_DWORD *)v5 + 1);
      if (!v13)
        v12 = &JSC::Yarr::ucs2RangeInfo;
      v14 = 540;
      if (!v13)
        v14 = 448;
      while (1)
      {
        do
        {
          v15 = v14;
          v14 >>= 1;
        }
        while (v12[4 * v14] > v6);
        v16 = &v12[4 * v14];
        if (v16[1] >= v6)
          break;
        v12 = v16 + 4;
        v14 = v15 + ~v14;
      }
      while (1)
      {
        v17 = v16[1];
        v18 = v17 >= a3 ? a3 : v16[1];
        switch(v16[3])
        {
          case 1:
            v19 = &JSC::Yarr::unicodeCharacterSetInfo;
            if (!*((_DWORD *)v5 + 1))
              v19 = &JSC::Yarr::ucs2CharacterSetInfo;
            v20 = v19[v16[2]];
            v21 = (unsigned __int16)*v20;
            if (*v20)
            {
              v22 = v20 + 2;
              do
              {
                result = JSC::Yarr::CharacterClassConstructor::addSorted(v5, (uint64_t)(v5 + 7), v21);
                v23 = *v22;
                v22 += 2;
                v21 = v23;
              }
              while (v23);
            }
            break;
          case 2:
            v24 = v16[2];
            v25 = v24 + v6;
            v26 = v24 + v18;
            goto LABEL_45;
          case 3:
            v27 = v16[2];
            v25 = v6 - v27;
            v26 = v18 - v27;
LABEL_45:
            v28 = v5;
            v29 = (uint64_t)(v5 + 9);
            goto LABEL_46;
          case 4:
            if ((v6 & 1) != 0)
              result = JSC::Yarr::CharacterClassConstructor::addSortedRange(v5, (uint64_t)(v5 + 9), v6 - 1, v6 - 1);
            if ((v18 & 1) == 0)
              goto LABEL_56;
            break;
          case 5:
            if ((v6 & 1) == 0)
              result = JSC::Yarr::CharacterClassConstructor::addSortedRange(v5, (uint64_t)(v5 + 9), v6 - 1, v6 - 1);
            if ((v18 & 1) != 0)
            {
LABEL_56:
              v25 = v18 + 1;
              v28 = v5;
              v29 = (uint64_t)(v5 + 9);
              v26 = v18 + 1;
LABEL_46:
              result = JSC::Yarr::CharacterClassConstructor::addSortedRange(v28, v29, v25, v26);
            }
            break;
          default:
            break;
        }
        if (v17 >= a3)
          break;
        v30 = v16[4];
        v16 += 4;
        v6 = v30;
      }
    }
  }
  return result;
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::atomBuiltInCharacterClass(JSC::Yarr::BuiltInCharacterClassID,BOOL)::{lambda(void)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  char v12;

  v8 = *a1;
  v9 = *(_DWORD *)a1[1];
  v10 = v9 - 329;
  v11 = *(unsigned __int8 *)(*a1 + 20);
  if (v11 >= 2)
  {
    if (v11 != 2)
      goto LABEL_4;
    v12 = v10 < 7 && *(_BYTE *)(v8 + 21) != 0;
  }
  else
  {
    v12 = *(_BYTE *)(v8 + 21) | (v10 < 7);
  }
  *(_BYTE *)(v8 + 21) = v12;
LABEL_4:
  JSC::Yarr::YarrPatternConstructor::atomCharacterClassBuiltIn(*(JSC::Yarr::YarrPattern ***)v8, v9, *(unsigned __int8 *)a1[2], a4, a5, a6, a7, a8);
  *(_DWORD *)(v8 + 16) = 3;
}

void JSC::Yarr::YarrPatternConstructor::atomCharacterClassBuiltIn(JSC::Yarr::YarrPattern **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  JSC::Yarr::YarrPattern *v9;
  JSC::Yarr::CharacterClassConstructor *v10;
  uint64_t v12;
  const JSC::Yarr::CharacterClass *v13;
  JSC::Yarr::YarrPattern *v14;
  JSC::Yarr::YarrPattern *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::Yarr::CharacterClass **v23;
  uint64_t v24;
  unsigned int v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::Yarr::CharacterClass *v35;
  uint64_t v36;
  void *v37;
  JSC::Yarr::CharacterClass *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  JSC::Yarr::YarrPattern *v47;
  JSC::Yarr::CharacterClass *v48;

  v8 = a3;
  switch(a2)
  {
    case 2:
      v9 = *a1;
      v10 = a1[13];
      if ((*((_WORD *)*a1 + 1) & 0x60) != 0 && (*((_WORD *)*a1 + 1) & 4) != 0)
      {
        v47 = *a1;
        if ((_DWORD)a3)
          v16 = JSC::Yarr::YarrPattern::nonwordUnicodeIgnoreCaseCharCharacterClass(v47);
        else
          JSC::Yarr::YarrPattern::wordUnicodeIgnoreCaseCharCharacterClass(v47);
LABEL_17:
        v23 = (JSC::Yarr::CharacterClass **)v16;
LABEL_18:
        JSC::Yarr::CharacterClassConstructor::append(v10, (const JSC::Yarr::CharacterClass *)v23, v17, v18, v19, v20, v21, v22);
        return;
      }
      if (!(_DWORD)a3)
      {
        JSC::Yarr::YarrPattern::wordcharCharacterClass(*a1);
LABEL_9:
        v13 = (const JSC::Yarr::CharacterClass *)v12;
LABEL_10:
        JSC::Yarr::CharacterClassConstructor::append(v10, v13, a3, a4, a5, a6, a7, a8);
        return;
      }
      v13 = (const JSC::Yarr::CharacterClass *)*((_QWORD *)v9 + 24);
      if (v13)
        goto LABEL_10;
      JSC::Yarr::nonwordcharCreate((JSC::Yarr *)&v48);
      v33 = *((unsigned int *)v9 + 21);
      if ((_DWORD)v33 == *((_DWORD *)v9 + 20))
      {
        WTF::Vector<std::unique_ptr<JSC::Yarr::CharacterClass>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<JSC::Yarr::CharacterClass>>((uint64_t)v9 + 72, (unint64_t)&v48);
      }
      else
      {
        v34 = *((_QWORD *)v9 + 9);
        v35 = v48;
        v48 = 0;
        *(_QWORD *)(v34 + 8 * v33) = v35;
        *((_DWORD *)v9 + 21) = v33 + 1;
      }
      std::unique_ptr<JSC::Yarr::CharacterClass>::~unique_ptr[abi:sn180100](&v48, v26, v27, v28, v29, v30, v31, v32);
      v36 = *((unsigned int *)v9 + 21);
      if ((_DWORD)v36)
      {
        v13 = *(const JSC::Yarr::CharacterClass **)(*((_QWORD *)v9 + 9) + 8 * v36 - 8);
        *((_QWORD *)v9 + 24) = v13;
        goto LABEL_10;
      }
      goto LABEL_39;
    case 1:
      v10 = a1[13];
      v14 = *a1;
      if (!(_DWORD)a3)
      {
        v12 = JSC::Yarr::YarrPattern::spacesCharacterClass(*a1);
        goto LABEL_9;
      }
      v13 = (const JSC::Yarr::CharacterClass *)*((_QWORD *)v14 + 23);
      if (v13)
        goto LABEL_10;
      JSC::Yarr::nonspacesCreate((JSC::Yarr *)&v48);
      v24 = *((unsigned int *)v14 + 21);
      if ((_DWORD)v24 == *((_DWORD *)v14 + 20))
      {
        WTF::Vector<std::unique_ptr<JSC::Yarr::CharacterClass>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<JSC::Yarr::CharacterClass>>((uint64_t)v14 + 72, (unint64_t)&v48);
        v38 = v48;
        v48 = 0;
        if (v38)
        {
          JSC::Yarr::CharacterClass::~CharacterClass(v38, v37, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
        }
        v25 = *((_DWORD *)v14 + 21);
      }
      else
      {
        v25 = v24 + 1;
        *(_QWORD *)(*((_QWORD *)v14 + 9) + 8 * v24) = v48;
        *((_DWORD *)v14 + 21) = v24 + 1;
      }
      if (v25)
      {
        v13 = *(const JSC::Yarr::CharacterClass **)(*((_QWORD *)v14 + 9) + 8 * v25 - 8);
        *((_QWORD *)v14 + 23) = v13;
        goto LABEL_10;
      }
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x198EFF718);
    case 0:
      v10 = a1[13];
      v15 = *a1;
      if ((_DWORD)a3)
        JSC::Yarr::YarrPattern::nondigitsCharacterClass(v15);
      else
        JSC::Yarr::YarrPattern::digitsCharacterClass(v15);
      goto LABEL_17;
  }
  v10 = a1[13];
  v23 = JSC::Yarr::YarrPattern::unicodeCharacterClassFor((uint64_t)*a1, a2);
  if ((v8 & 1) == 0)
    goto LABEL_18;
  JSC::Yarr::CharacterClassConstructor::appendInverted(v10, (const JSC::Yarr::CharacterClass *)v23);
}

void JSC::Yarr::CharacterClassConstructor::append(JSC::Yarr::CharacterClassConstructor *this, const JSC::Yarr::CharacterClass *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  if (*((_BYTE *)this + 1))
  {
    JSC::Yarr::CharacterClassConstructor::performSetOpWith(this, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    if (*((_DWORD *)a2 + 3))
    {
      v17 = 0;
      v18 = 0;
      do
      {
        v19 = *(_QWORD *)a2 + v17;
        v20 = *((unsigned int *)this + 5);
        if ((_DWORD)v20 == *((_DWORD *)this + 4))
        {
          WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)this + 8, v19);
        }
        else
        {
          WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(*((_QWORD *)this + 1) + 16 * v20, v19);
          ++*((_DWORD *)this + 5);
        }
        ++v18;
        v17 += 16;
      }
      while (v18 < *((unsigned int *)a2 + 3));
    }
    if (*((_DWORD *)a2 + 7))
    {
      v16 = 0;
      do
        JSC::Yarr::CharacterClassConstructor::addSorted((unint64_t *)this, (uint64_t)this + 24, *(_DWORD *)(*((_QWORD *)a2 + 2) + 4 * v16++));
      while (v16 < *((unsigned int *)a2 + 7));
    }
    if (*((_DWORD *)a2 + 11))
    {
      v10 = 0;
      v11 = 0;
      do
      {
        JSC::Yarr::CharacterClassConstructor::addSortedRange((unint64_t *)this, (uint64_t)this + 40, *(_DWORD *)(*((_QWORD *)a2 + 4) + v10), *(_DWORD *)(*((_QWORD *)a2 + 4) + v10 + 4));
        ++v11;
        v10 += 8;
      }
      while (v11 < *((unsigned int *)a2 + 11));
    }
    if (*((_DWORD *)a2 + 15))
    {
      v12 = 0;
      do
        JSC::Yarr::CharacterClassConstructor::addSorted((unint64_t *)this, (uint64_t)this + 56, *(_DWORD *)(*((_QWORD *)a2 + 6) + 4 * v12++));
      while (v12 < *((unsigned int *)a2 + 15));
    }
    if (*((_DWORD *)a2 + 19))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::Yarr::CharacterClassConstructor::addSortedRange((unint64_t *)this, (uint64_t)this + 72, *(_DWORD *)(*((_QWORD *)a2 + 8) + v13), *(_DWORD *)(*((_QWORD *)a2 + 8) + v13 + 4));
        ++v14;
        v13 += 8;
      }
      while (v14 < *((unsigned int *)a2 + 19));
    }
    if (*((_DWORD *)a2 + 3))
      v15 = 4;
    else
      v15 = *(_BYTE *)this & 4;
    *(_BYTE *)this = v15 | *(_BYTE *)this & 0xFB;
  }
}

unint64_t *JSC::Yarr::CharacterClassConstructor::appendInverted(JSC::Yarr::CharacterClassConstructor *this, const JSC::Yarr::CharacterClass *a2)
{
  if (*((_DWORD *)a2 + 3))
    *(_BYTE *)this |= 0xCu;
  JSC::Yarr::CharacterClassConstructor::appendInverted(JSC::Yarr::CharacterClass const*)::{lambda(char32_t,char32_t,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1}::operator()((unint64_t *)this, 0, 0x7Fu, (uint64_t)a2 + 16, (uint64_t)a2 + 32, (uint64_t)this + 24, (uint64_t)this + 40);
  return JSC::Yarr::CharacterClassConstructor::appendInverted(JSC::Yarr::CharacterClass const*)::{lambda(char32_t,char32_t,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1}::operator()((unint64_t *)this, 0x80u, 0x10FFFFu, (uint64_t)a2 + 48, (uint64_t)a2 + 64, (uint64_t)this + 56, (uint64_t)this + 72);
}

void JSC::Yarr::CharacterClassConstructor::performSetOpWith(JSC::Yarr::CharacterClassConstructor *this, const JSC::Yarr::CharacterClass *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*((_BYTE *)this + 2) == 2)
  {
    v10 = *((unsigned __int8 *)this + 1);
    if (v10 < 2)
    {
      JSC::Yarr::CharacterClassConstructor::unionStrings((uint64_t)this, (unsigned int *)a2, a3, a4, a5, a6, a7, a8);
    }
    else if (v10 == 2)
    {
      JSC::Yarr::CharacterClassConstructor::intersectionStrings((uint64_t)this, (unsigned int *)a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      if (v10 != 3)
      {
LABEL_9:
        JSC::Yarr::CharacterClassConstructor::asciiOpSorted((uint64_t)this, *((unsigned int **)a2 + 2), *((unsigned int *)a2 + 7), *((unsigned int **)a2 + 4), *((unsigned int *)a2 + 11), a6, a7, a8);
        JSC::Yarr::CharacterClassConstructor::unicodeOpSorted((uint64_t)this, (unsigned int *)a2 + 12, (uint64_t)a2 + 64, v11, v12, v13);
        return;
      }
      JSC::Yarr::CharacterClassConstructor::subtractionStrings((uint64_t)this, (unsigned int *)a2, a3, a4, a5, a6, a7, a8);
    }
    if (*((_BYTE *)this + 2) != 2)
      return;
    goto LABEL_9;
  }
}

unint64_t *JSC::Yarr::CharacterClassConstructor::appendInverted(JSC::Yarr::CharacterClass const*)::{lambda(char32_t,char32_t,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,WTF::Vector<JSC::Yarr::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1}::operator()(unint64_t *result, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v11;
  unint64_t *v12;
  int v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  v11 = a2;
  v12 = result;
  v13 = *(_DWORD *)(a4 + 12);
  v14 = *(_DWORD *)(a5 + 12);
  v15 = v13 != 0;
  v16 = v14 != 0;
  if (v13 | v14)
  {
    v25 = a3;
    v18 = 0;
    v19 = 0;
    while (v15)
    {
      v20 = *(unsigned int *)(a4 + 12);
      if (v16)
      {
        if (v19 >= v20)
        {
          __break(0xC471u);
          JUMPOUT(0x198EFFBF0);
        }
        v21 = *(unsigned int *)(a5 + 12);
        if (v18 >= v21)
        {
LABEL_28:
          __break(0xC471u);
          JUMPOUT(0x198EFFBE0);
        }
        if (*(_DWORD *)(*(_QWORD *)a4 + 4 * v19) >= *(_DWORD *)(*(_QWORD *)a5 + 8 * v18))
          goto LABEL_11;
      }
      if (v19 >= v20)
      {
        __break(0xC471u);
        JUMPOUT(0x198EFFBE8);
      }
      v22 = *(_DWORD *)(*(_QWORD *)a4 + 4 * v19++);
      v15 = v19 < v20;
      v23 = v22;
LABEL_13:
      if (v11 < v22)
      {
        if (v11 + 1 == v22)
          result = JSC::Yarr::CharacterClassConstructor::addSorted(v12, a6, v11);
        else
          result = JSC::Yarr::CharacterClassConstructor::addSortedRange(v12, a7, v11, v22 - 1);
      }
      v11 = v23 + 1;
      if (!v15 && !v16)
      {
        a3 = v25;
        if (v11 <= v25)
        {
          if (v11 != v25)
            return JSC::Yarr::CharacterClassConstructor::addSortedRange(v12, a7, v11, a3);
          return JSC::Yarr::CharacterClassConstructor::addSorted(v12, a6, a3);
        }
        return result;
      }
    }
    v21 = *(unsigned int *)(a5 + 12);
LABEL_11:
    if (v18 >= v21)
      goto LABEL_28;
    v24 = (unsigned int *)(*(_QWORD *)a5 + 8 * v18);
    v22 = *v24;
    v23 = v24[1];
    v16 = ++v18 < v21;
    goto LABEL_13;
  }
  if (a3 >= a2)
  {
    if (a2 == a3)
      return JSC::Yarr::CharacterClassConstructor::addSorted(v12, a6, a3);
    return JSC::Yarr::CharacterClassConstructor::addSortedRange(v12, a7, v11, a3);
  }
  return result;
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassStringDisjunctionParserDelegate::newAlternative(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  const void **v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v9 = a1 + 24;
  v10 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 48))
  {
    v11 = WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 40, v10 + 1, v9);
    v12 = *(_QWORD *)(a1 + 40) + 16 * *(unsigned int *)(a1 + 52);
    v13 = (unsigned int *)(v11 + 12);
    v14 = *(unsigned int *)(v11 + 12);
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
    *(_DWORD *)(v12 + 12) = v14;
    if ((_DWORD)v14)
    {
      if (!(v14 >> 30))
      {
        v15 = (const void **)v11;
        v16 = (void *)WTF::fastMalloc((WTF *)(4 * v14));
        *(_DWORD *)(v12 + 8) = v14;
        *(_QWORD *)v12 = v16;
LABEL_8:
        memcpy(v16, *v15, 4 * *v13);
        goto LABEL_9;
      }
      goto LABEL_10;
    }
  }
  else
  {
    v13 = (unsigned int *)(a1 + 36);
    v17 = *(unsigned int *)(a1 + 36);
    v18 = *(_QWORD *)(a1 + 40) + 16 * v10;
    *(_QWORD *)v18 = 0;
    *(_QWORD *)(v18 + 8) = 0;
    *(_DWORD *)(v18 + 12) = v17;
    if ((_DWORD)v17)
    {
      if (!(v17 >> 30))
      {
        v16 = (void *)WTF::fastMalloc((WTF *)(4 * v17));
        *(_DWORD *)(v18 + 8) = v17;
        *(_QWORD *)v18 = v16;
        v15 = (const void **)v9;
        goto LABEL_8;
      }
LABEL_10:
      __break(0xC471u);
      JUMPOUT(0x198EFFCE4);
    }
  }
LABEL_9:
  ++*(_DWORD *)(a1 + 52);
}

void JSC::Yarr::CharacterClassConstructor::atomClassStringDisjunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  _DWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  int v45;
  int v46;
  unint64_t v47;
  void *v48;
  int v49;
  BOOL v50;
  _UNKNOWN **v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  int v55;
  int v56;
  WTF **v57;
  unsigned int v58;
  int v59;
  int v60;
  WTF **v61;
  unsigned int v62;
  int v63;
  WTF **v64;
  int v65;
  unsigned int v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void *__src;
  int v75;
  unsigned int v76;
  unsigned int *v77;
  uint64_t v78;
  WTF *v79;
  uint64_t v80;
  WTF *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;

  v83 = 0;
  v84 = 0;
  v81 = 0;
  v82 = 0;
  v79 = 0;
  v80 = 0;
  v77 = 0;
  v78 = 0;
  v10 = *(int **)a2;
  v11 = *(unsigned int *)(a2 + 12);
  v12 = (uint64_t *)(*(_QWORD *)a2 + 16 * v11);
  v13 = 126 - 2 * __clz(v11);
  if ((_DWORD)v11)
    v14 = v13;
  else
    v14 = 0;
  std::__introsort<std::_ClassicAlgPolicy,JSC::Yarr::CharacterClassConstructor::sort(WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*,false>(v10, v12, v14, 1, a5, a6, a7, a8);
  v22 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v22)
  {
    v23 = 0;
    v24 = 0;
    v25 = *(int **)a2;
    v26 = *(_QWORD *)a2 + 16 * v22;
    while (1)
    {
      v27 = v25[3];
      __src = 0;
      v75 = 0;
      v76 = v27;
      if (!(_DWORD)v27)
      {
        v36 = v24;
        if (v24 == (_DWORD)v84)
          goto LABEL_22;
        v37 = (_QWORD *)(v23 + 16 * v24);
        *v37 = 0;
        v37[1] = 0;
        goto LABEL_34;
      }
      if (v27 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198F0025CLL);
      }
      v28 = (void *)WTF::fastMalloc((WTF *)(4 * v27));
      v75 = v27;
      __src = v28;
      memcpy(v28, *(const void **)v25, 4 * v25[3]);
      v29 = v76;
      if (v76 != 1)
      {
        v36 = v24;
        if (v24 == (_DWORD)v84)
        {
LABEL_22:
          v38 = WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v83, v36 + 1, (unint64_t)&__src);
          v24 = HIDWORD(v84);
          v23 = v83;
          v39 = v83 + 16 * HIDWORD(v84);
          v40 = *(unsigned int *)(v38 + 12);
          *(_QWORD *)v39 = 0;
          *(_QWORD *)(v39 + 8) = 0;
          *(_DWORD *)(v39 + 12) = v40;
          if ((_DWORD)v40)
          {
            if (v40 >> 30)
            {
              __break(0xC471u);
              JUMPOUT(0x198F00264);
            }
            v41 = v38;
            v42 = (void *)WTF::fastMalloc((WTF *)(4 * v40));
            *(_DWORD *)(v39 + 8) = v40;
            *(_QWORD *)v39 = v42;
            v43 = *(unsigned int *)(v41 + 12);
            v44 = *(void **)v41;
            goto LABEL_33;
          }
        }
        else
        {
          v47 = v23 + 16 * v24;
          *(_QWORD *)v47 = 0;
          *(_QWORD *)(v47 + 8) = 0;
          *(_DWORD *)(v47 + 12) = v29;
          if ((_DWORD)v29)
          {
            if (v29 >> 30)
            {
              __break(0xC471u);
              JUMPOUT(0x198F0026CLL);
            }
            v42 = (void *)WTF::fastMalloc((WTF *)(4 * v29));
            *(_DWORD *)(v47 + 8) = v29;
            *(_QWORD *)v47 = v42;
            v43 = v76;
            v44 = __src;
LABEL_33:
            memcpy(v42, v44, 4 * v43);
          }
        }
LABEL_34:
        HIDWORD(v84) = ++v24;
        goto LABEL_35;
      }
      v30 = *(_DWORD *)__src;
      if ((*(_BYTE *)a1 & 1) == 0)
        goto LABEL_27;
      v31 = *(_DWORD *)(a1 + 4);
      if (v31)
        v32 = &JSC::Yarr::unicodeRangeInfo;
      else
        v32 = &JSC::Yarr::ucs2RangeInfo;
      if (v31)
        v33 = 540;
      else
        v33 = 448;
      while (1)
      {
        do
        {
          v34 = v33;
          v33 >>= 1;
        }
        while (v32[4 * v33] > v30);
        v35 = &v32[4 * v33];
        if (v35[1] >= v30)
          break;
        v32 = v35 + 4;
        v33 = v34 + ~v33;
      }
      v45 = v35[3];
      if (v45 == 1)
      {
        v50 = v31 == 0;
        v51 = &JSC::Yarr::unicodeCharacterSetInfo;
        if (v50)
          v51 = &JSC::Yarr::ucs2CharacterSetInfo;
        v52 = (unsigned int *)v51[v32[4 * v33 + 2]];
        v53 = *v52;
        if (!*v52)
          goto LABEL_35;
        v54 = v52 + 1;
        while (2)
        {
          v85 = v53;
          if (v53 > 0x7F)
          {
            v56 = HIDWORD(v80);
            if (HIDWORD(v80) == (_DWORD)v80)
            {
              v57 = &v79;
              goto LABEL_52;
            }
            *((_DWORD *)v79 + HIDWORD(v80)) = v53;
            HIDWORD(v80) = v56 + 1;
          }
          else
          {
            v55 = HIDWORD(v82);
            if (HIDWORD(v82) != (_DWORD)v82)
            {
              *((_DWORD *)v81 + HIDWORD(v82)) = v53;
              HIDWORD(v82) = v55 + 1;
              goto LABEL_53;
            }
            v57 = &v81;
LABEL_52:
            WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v57, (unint64_t)&v85);
          }
LABEL_53:
          v58 = *v54++;
          v53 = v58;
          if (!v58)
            goto LABEL_35;
          continue;
        }
      }
      if (!v45)
      {
LABEL_27:
        v85 = *(_DWORD *)__src;
        if (v30 > 0x7F)
        {
          v49 = HIDWORD(v80);
          if (HIDWORD(v80) == (_DWORD)v80)
            goto LABEL_74;
          *((_DWORD *)v79 + HIDWORD(v80)) = v30;
          HIDWORD(v80) = v49 + 1;
        }
        else
        {
          v46 = HIDWORD(v82);
          if (HIDWORD(v82) == (_DWORD)v82)
            goto LABEL_71;
          *((_DWORD *)v81 + HIDWORD(v82)) = v30;
          HIDWORD(v82) = v46 + 1;
        }
        goto LABEL_35;
      }
      v85 = *(_DWORD *)__src;
      if (v30 > 0x7F)
      {
        v60 = HIDWORD(v80);
        if (HIDWORD(v80) != (_DWORD)v80)
        {
          *((_DWORD *)v79 + HIDWORD(v80)) = v30;
          HIDWORD(v80) = v60 + 1;
          goto LABEL_63;
        }
        v61 = &v79;
      }
      else
      {
        v59 = HIDWORD(v82);
        if (HIDWORD(v82) != (_DWORD)v82)
        {
          *((_DWORD *)v81 + HIDWORD(v82)) = v30;
          HIDWORD(v82) = v59 + 1;
          goto LABEL_63;
        }
        v61 = &v81;
      }
      WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v61, (unint64_t)&v85);
LABEL_63:
      switch(v45)
      {
        case 2:
          v62 = v32[4 * v33 + 2] + v30;
          break;
        case 3:
          v62 = v30 - v32[4 * v33 + 2];
          break;
        case 4:
          v62 = v30 ^ 1;
          break;
        case 5:
          v62 = ((v30 - 1) ^ 1) + 1;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F00254);
      }
      v85 = v62;
      if (v62 > 0x7F)
      {
        v65 = HIDWORD(v80);
        if (HIDWORD(v80) == (_DWORD)v80)
        {
LABEL_74:
          v64 = &v79;
          goto LABEL_75;
        }
        *((_DWORD *)v79 + HIDWORD(v80)) = v62;
        HIDWORD(v80) = v65 + 1;
      }
      else
      {
        v63 = HIDWORD(v82);
        if (HIDWORD(v82) == (_DWORD)v82)
        {
LABEL_71:
          v64 = &v81;
LABEL_75:
          WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v64, (unint64_t)&v85);
          goto LABEL_35;
        }
        *((_DWORD *)v81 + HIDWORD(v82)) = v62;
        HIDWORD(v82) = v63 + 1;
      }
LABEL_35:
      v48 = __src;
      if (__src)
      {
        __src = 0;
        v75 = 0;
        WTF::fastFree((unint64_t)v48, v15, v16, v17, v18, v19, v20, v21);
      }
      v25 += 4;
      if (v25 == (int *)v26)
        goto LABEL_77;
    }
  }
  v23 = 0;
  v24 = 0;
LABEL_77:
  if (*(_BYTE *)(a1 + 2) == 2)
  {
    v66 = *(unsigned __int8 *)(a1 + 1);
    if (v66 < 2)
    {
      JSC::Yarr::CharacterClassConstructor::unionStrings(a1, (unsigned int *)&v83, v16, v17, v18, v19, v20, v21);
    }
    else if (v66 == 2)
    {
      JSC::Yarr::CharacterClassConstructor::intersectionStrings(a1, (unsigned int *)&v83, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      if (v66 != 3)
      {
LABEL_85:
        v67 = v77;
        JSC::Yarr::CharacterClassConstructor::asciiOpSorted(a1, (unsigned int *)v81, HIDWORD(v82), v77, HIDWORD(v78), v19, v20, v21);
        JSC::Yarr::CharacterClassConstructor::unicodeOpSorted(a1, (unsigned int *)&v79, (uint64_t)&v77, v68, v69, v70);
        if (v67)
          WTF::fastFree((unint64_t)v67, v15, v16, v17, v18, v19, v20, v21);
        goto LABEL_87;
      }
      JSC::Yarr::CharacterClassConstructor::subtractionStrings(a1, (unsigned int *)&v83, v16, v17, v18, v19, v20, v21);
    }
    if (*(_BYTE *)(a1 + 2) != 2)
      goto LABEL_87;
    goto LABEL_85;
  }
LABEL_87:
  if (v79)
    WTF::fastFree((unint64_t)v79, v15, v16, v17, v18, v19, v20, v21);
  if (v81)
  {
    WTF::fastFree((unint64_t)v81, v15, v16, v17, v18, v19, v20, v21);
    if (!v24)
      goto LABEL_93;
  }
  else if (!v24)
  {
    goto LABEL_93;
  }
  v71 = 16 * v24;
  v72 = v23;
  do
  {
    v73 = *(_QWORD *)v72;
    if (*(_QWORD *)v72)
    {
      *(_QWORD *)v72 = 0;
      *(_DWORD *)(v72 + 8) = 0;
      WTF::fastFree(v73, v15, v16, v17, v18, v19, v20, v21);
    }
    v72 += 16;
    v71 -= 16;
  }
  while (v71);
LABEL_93:
  if (v23)
  {
    v83 = 0;
    LODWORD(v84) = 0;
    WTF::fastFree(v23, v15, v16, v17, v18, v19, v20, v21);
  }
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::CharacterClassParserDelegate::atomPatternCharacter(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v10;
  char *v11;
  char v12;

  v8 = a2;
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0:
    case 3:
      *(_DWORD *)(a1 + 20) = 1;
      *(_DWORD *)(a1 + 24) = (_DWORD)a2;
      break;
    case 1:
      JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)*(unsigned int *)(a1 + 24), a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 24) = v8;
      break;
    case 2:
      v10 = *(_DWORD *)(a1 + 24);
      if (v10 <= v8)
      {
        JSC::Yarr::CharacterClassConstructor::putRange(*(unint64_t **)(*(_QWORD *)a1 + 104), v10, v8);
        goto LABEL_7;
      }
      v11 = *(char **)(a1 + 8);
      v12 = 14;
      goto LABEL_11;
    case 4:
      if (*(_BYTE *)(a1 + 16))
      {
        v11 = *(char **)(a1 + 8);
        v12 = 15;
LABEL_11:
        *v11 = v12;
      }
      else
      {
        JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), a2, a3, a4, a5, a6, a7, a8);
LABEL_7:
        *(_DWORD *)(a1 + 20) = 0;
      }
      break;
    default:
      return;
  }
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ParseEscapeMode)1>(uint64_t a1, unsigned int a2)
{
  void *v4;

  if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
    return 0;
  if (a2 > 0x7F)
    return 0;
  v4 = memchr("^$\\.*+?()[]{}|/", a2, 0x10uLL);
  if (a2)
  {
    if (v4)
      return 0;
  }
  *(_BYTE *)(a1 + 8) = 22;
  return 1;
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::CharacterClassParserDelegate::atomBuiltInCharacterClass(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  switch(a1[5])
  {
    case 0u:
    case 3u:
      goto LABEL_2;
    case 1u:
      JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)a1[6], a3, a4, a5, a6, a7, a8);
LABEL_2:
      JSC::Yarr::YarrPatternConstructor::atomCharacterClassBuiltIn(*(JSC::Yarr::YarrPattern ***)a1, a2, a3, a4, a5, a6, a7, a8);
      a1[5] = 3;
      return;
    case 2u:
      JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)a1[6], a3, a4, a5, a6, a7, a8);
      JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)0x2D, v11, v12, v13, v14, v15, v16);
      goto LABEL_5;
    case 4u:
LABEL_5:
      if (*((_BYTE *)a1 + 16))
      {
        **((_BYTE **)a1 + 1) = 15;
      }
      else
      {
        JSC::Yarr::YarrPatternConstructor::atomCharacterClassBuiltIn(*(JSC::Yarr::YarrPattern ***)a1, a2, a3, a4, a5, a6, a7, a8);
        a1[5] = 0;
      }
      break;
    default:
      return;
  }
}

__n128 JSC::Yarr::YarrPatternConstructor::assertionWordBoundary(JSC::Yarr::YarrPatternConstructor *this, int a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  __n128 *v8;
  __n128 result;
  __n128 v10;
  uint64_t v11;
  unsigned __int16 v12;
  __int16 v13;
  char v14;
  uint64_t v15;

  LOBYTE(v13) = 2;
  if (a2)
    v3 = 2;
  else
    v3 = 0;
  HIBYTE(v13) = v3;
  v14 = 0;
  v15 = 0x100000001;
  v4 = *((unsigned int *)this + 3);
  if ((_DWORD)v4 == *((_DWORD *)this + 2))
  {
    v8 = (__n128 *)WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v4 + 1, (unint64_t)&v13);
    v11 = *(_QWORD *)this + 48 * *((unsigned int *)this + 3);
    v12 = v8->n128_u16[0];
    *(_BYTE *)(v11 + 2) = v8->n128_u8[2];
    *(_WORD *)v11 = v12;
    *(_DWORD *)(v11 + 4) = v8->n128_u32[1];
    *(_DWORD *)(v11 + 8) = v8->n128_u32[2];
    v7 = v11 + 16;
  }
  else
  {
    v5 = *(_QWORD *)this + 48 * v4;
    v6 = v13;
    *(_BYTE *)(v5 + 2) = v14;
    *(_WORD *)v5 = v6;
    *(_QWORD *)(v5 + 4) = 0x100000001;
    v7 = v5 + 16;
    v8 = (__n128 *)&v13;
  }
  result = v8[1];
  v10 = v8[2];
  *(__n128 *)v7 = result;
  *(__n128 *)(v7 + 16) = v10;
  ++*((_DWORD *)this + 3);
  return result;
}

void JSC::Yarr::YarrPatternConstructor::atomBackReference(JSC::Yarr::YarrPatternConstructor *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;
  __int16 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[12];
  WTF::StringImpl *v50[2];
  __int128 v51;

  v5 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v5 + 4) < a2)
  {
    *(_WORD *)v49 = 6;
    v49[2] = 0;
    *(_QWORD *)&v49[4] = 0x100000001;
    LODWORD(v50[0]) = 0;
    v22 = *(_DWORD *)(v4 + 12);
    if (v22 == *(_DWORD *)(v4 + 8))
    {
      WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::PatternTerm>(v4, (unint64_t)v49);
    }
    else
    {
      v23 = *(_QWORD *)v4 + 48 * v22;
      v24 = *(_WORD *)v49;
      *(_BYTE *)(v23 + 2) = v49[2];
      *(_WORD *)v23 = v24;
      *(_QWORD *)(v23 + 4) = 0x100000001;
      v25 = v51;
      *(_OWORD *)(v23 + 16) = *(_OWORD *)v50;
      *(_OWORD *)(v23 + 32) = v25;
      ++*(_DWORD *)(v4 + 12);
    }
    if (*((_BYTE *)this + 181) == 1)
    {
      v26 = *((_QWORD *)this + 1);
      v27 = *(_DWORD *)(v26 + 12);
      if (!v27)
      {
        __break(0xC471u);
        goto LABEL_37;
      }
      v28 = *(_QWORD *)v26 + 48 * (v27 - 1);
      *(_DWORD *)(v28 + 16) = a2;
      *(_BYTE *)(v28 + 1) = *(_BYTE *)(v28 + 1) & 0xFB | (4 * (*((_BYTE *)this + 181) & 1));
      v29 = *(_DWORD *)(*((_QWORD *)this + 1) + 12) - 1;
      *(_QWORD *)v49 = *((_QWORD *)this + 1);
      *(_DWORD *)&v49[8] = v29;
      v50[0] = 0;
      v30 = *((_DWORD *)this + 35);
      if (v30 == *((_DWORD *)this + 34))
      {
        WTF::Vector<JSC::Yarr::YarrPatternConstructor::UnresolvedForwardReference,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrPatternConstructor::UnresolvedForwardReference>((uint64_t)this + 128, (unint64_t)v49);
        v38 = v50[0];
        v50[0] = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::~StringImpl(v38, v31, v32, v33, v34, v35, v36, v37);
            WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
          }
          else
          {
            *(_DWORD *)v38 -= 2;
          }
        }
      }
      else
      {
        v39 = *((_QWORD *)this + 16) + 24 * v30;
        v40 = *(_QWORD *)v49;
        *(_DWORD *)(v39 + 8) = *(_DWORD *)&v49[8];
        *(_QWORD *)v39 = v40;
        *(_QWORD *)(v39 + 16) = 0;
        ++*((_DWORD *)this + 35);
      }
    }
  }
  else
  {
    v6 = *(uint64_t **)(*(_QWORD *)(v4 + 16) + 16);
    if (v6)
    {
      while (1)
      {
        v7 = *((_DWORD *)v6 + 3);
        if (!v7)
          break;
        v8 = v7 - 1;
        v9 = *v6;
        v10 = *(unsigned __int8 *)(*v6 + 48 * v8);
        if (v10 == 7)
        {
          v11 = v9 + 48 * v8;
          if ((*(_BYTE *)(v11 + 1) & 1) != 0 && *(_DWORD *)(v11 + 24) == a2)
            goto LABEL_16;
        }
        else if (*((_BYTE *)this + 181) == 1 && v10 == 8)
        {
          v13 = v9 + 48 * v8;
          if ((*(_BYTE *)(v13 + 1) & 4) != 0 && *(_DWORD *)(v13 + 24) <= a2)
          {
LABEL_16:
            *(_WORD *)v49 = 6;
            v49[2] = 0;
            *(_QWORD *)&v49[4] = 0x100000001;
            LODWORD(v50[0]) = 0;
            v14 = *(_DWORD *)(v4 + 12);
            if (v14 == *(_DWORD *)(v4 + 8))
            {
              WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::PatternTerm>(v4, (unint64_t)v49);
            }
            else
            {
              v15 = *(_QWORD *)v4 + 48 * v14;
              v16 = *(_WORD *)v49;
              *(_BYTE *)(v15 + 2) = v49[2];
              *(_WORD *)v15 = v16;
              *(_QWORD *)(v15 + 4) = 0x100000001;
              v17 = v51;
              *(_OWORD *)(v15 + 16) = *(_OWORD *)v50;
              *(_OWORD *)(v15 + 32) = v17;
              ++*(_DWORD *)(v4 + 12);
            }
            return;
          }
        }
        v6 = *(uint64_t **)(v6[2] + 16);
        if (!v6)
          goto LABEL_18;
      }
      __break(0xC471u);
LABEL_37:
      JUMPOUT(0x198F0082CLL);
    }
LABEL_18:
    *(_WORD *)v49 = 5;
    LODWORD(v50[0]) = a2;
    v49[2] = 0;
    *(_QWORD *)&v49[4] = 0x100000001;
    v18 = *(_DWORD *)(v4 + 12);
    if (v18 == *(_DWORD *)(v4 + 8))
    {
      WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::PatternTerm>(v4, (unint64_t)v49);
    }
    else
    {
      v19 = *(_QWORD *)v4 + 48 * v18;
      v20 = *(_WORD *)v49;
      *(_BYTE *)(v19 + 2) = v49[2];
      *(_WORD *)v19 = v20;
      *(_QWORD *)(v19 + 4) = 0x100000001;
      v21 = v51;
      *(_OWORD *)(v19 + 16) = *(_OWORD *)v50;
      *(_OWORD *)(v19 + 32) = v21;
      ++*(_DWORD *)(v4 + 12);
    }
    **(_BYTE **)this |= 1u;
  }
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ParseEscapeMode)0>(uint64_t a1, unsigned int a2)
{
  void *v4;

  if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
    return 0;
  if (a2 > 0x7F)
    return 0;
  v4 = memchr("^$\\.*+?()[]{}|/", a2, 0x10uLL);
  if (a2)
  {
    if (v4)
      return 0;
  }
  *(_BYTE *)(a1 + 8) = 22;
  return 1;
}

WTF *JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::NamedCaptureGroups::contains(WTF *result, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int i;
  int v9;

  if (result)
  {
    v4 = result;
    v5 = *((_DWORD *)result - 2);
    v6 = *((_DWORD *)*a2 + 4);
    if (v6 < 0x100)
      v7 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v7 = v6 >> 8;
    for (i = 0; ; v7 = i + v9)
    {
      v9 = v7 & v5;
      result = (WTF *)*((_QWORD *)v4 + (v7 & v5));
      if (!result)
        break;
      if (result != (WTF *)-1 && WTF::equal(result, *a2, a3))
        return (WTF *)1;
      ++i;
    }
  }
  return result;
}

void JSC::Yarr::YarrPatternConstructor::atomNamedBackReference(JSC::Yarr::YarrPatternConstructor *this, WTF::StringImpl **a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int i;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  WTF::StringImpl *v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  _BYTE v89[12];
  __int128 v90;
  __int128 v91;

  v10 = *(_DWORD **)(*(_QWORD *)this + 104);
  if (v10)
  {
    v11 = *(v10 - 2);
    v12 = *((_DWORD *)*a2 + 4);
    if (v12 < 0x100)
      v13 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v13 = v12 >> 8;
    for (i = 0; ; v13 = i + v15)
    {
      v15 = v13 & v11;
      v16 = *(_QWORD *)&v10[6 * (v13 & v11)];
      if (v16 != -1)
      {
        if (!v16)
          goto LABEL_37;
        if (WTF::equal(*(WTF **)&v10[6 * (v13 & v11)], *a2, a3))
          break;
      }
      ++i;
    }
    v17 = (char *)&v10[6 * v15];
    v16 = *((unsigned int *)v17 + 5);
    if (!(_DWORD)v16)
    {
      v16 = 0;
LABEL_37:
      v10 = 0;
      goto LABEL_38;
    }
    if (v16 >> 30)
    {
LABEL_76:
      __break(0xC471u);
      JUMPOUT(0x198F00E90);
    }
    v18 = v17 + 8;
    v10 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v16));
    memcpy(v10, *(const void **)v18, 4 * *((unsigned int *)v18 + 3));
    if ((_DWORD)v16 == 2)
    {
      v19 = *((_QWORD *)this + 1);
      v20 = *(uint64_t **)(*(_QWORD *)(v19 + 16) + 16);
      if (v20)
      {
        v21 = v10[v16 - 1];
        while (1)
        {
          v22 = *((_DWORD *)v20 + 3);
          if (!v22)
            goto LABEL_76;
          v23 = v22 - 1;
          v24 = *v20;
          v25 = *(unsigned __int8 *)(*v20 + 48 * v23);
          if (v25 == 7)
          {
            v26 = v24 + 48 * v23;
            if ((*(_BYTE *)(v26 + 1) & 1) != 0 && v21 == *(_DWORD *)(v26 + 24))
              goto LABEL_32;
          }
          else if (v25 == 8 && *((_BYTE *)this + 181) == 1)
          {
            v28 = v24 + 48 * v23;
            if ((*(_BYTE *)(v28 + 1) & 4) != 0 && v21 >= *(_DWORD *)(v28 + 24))
            {
LABEL_32:
              *(_WORD *)v89 = 6;
              v89[2] = 0;
              *(_QWORD *)&v89[4] = 0x100000001;
              LODWORD(v90) = 0;
              v29 = *(unsigned int *)(v19 + 12);
              if ((_DWORD)v29 == *(_DWORD *)(v19 + 8))
              {
                v34 = WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v19, v29 + 1, (unint64_t)v89);
                v30 = *(_QWORD *)v19 + 48 * *(unsigned int *)(v19 + 12);
                v35 = *(_WORD *)v34;
                *(_BYTE *)(v30 + 2) = *(_BYTE *)(v34 + 2);
                *(_WORD *)v30 = v35;
                *(_DWORD *)(v30 + 4) = *(_DWORD *)(v34 + 4);
                *(_DWORD *)(v30 + 8) = *(_DWORD *)(v34 + 8);
                v32 = *(_OWORD *)(v34 + 16);
                v33 = *(_OWORD *)(v34 + 32);
              }
              else
              {
                v30 = *(_QWORD *)v19 + 48 * v29;
                v31 = *(_WORD *)v89;
                *(_BYTE *)(v30 + 2) = v89[2];
                *(_WORD *)v30 = v31;
                *(_QWORD *)(v30 + 4) = 0x100000001;
                v32 = v90;
                v33 = v91;
              }
              *(_OWORD *)(v30 + 16) = v32;
              *(_OWORD *)(v30 + 32) = v33;
              ++*(_DWORD *)(v19 + 12);
              goto LABEL_70;
            }
          }
          v20 = *(uint64_t **)(v20[2] + 16);
          if (!v20)
            goto LABEL_39;
        }
      }
      v16 = 2;
    }
    else
    {
      LODWORD(v20) = 0;
    }
  }
  else
  {
    v16 = 0;
LABEL_38:
    LODWORD(v20) = 1;
  }
LABEL_39:
  v36 = *((_QWORD *)this + 1);
  if (*((_BYTE *)this + 181))
  {
    *(_WORD *)v89 = 6;
    v89[2] = 0;
    *(_QWORD *)&v89[4] = 0x100000001;
    LODWORD(v90) = 0;
    v37 = *(unsigned int *)(v36 + 12);
    if ((_DWORD)v37 == *(_DWORD *)(v36 + 8))
    {
      v48 = WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v37 + 1, (unint64_t)v89);
      v38 = *(_QWORD *)v36 + 48 * *(unsigned int *)(v36 + 12);
      v49 = *(_WORD *)v48;
      *(_BYTE *)(v38 + 2) = *(_BYTE *)(v48 + 2);
      *(_WORD *)v38 = v49;
      *(_DWORD *)(v38 + 4) = *(_DWORD *)(v48 + 4);
      *(_DWORD *)(v38 + 8) = *(_DWORD *)(v48 + 8);
      v40 = *(_OWORD *)(v48 + 16);
      v41 = *(_OWORD *)(v48 + 32);
    }
    else
    {
      v38 = *(_QWORD *)v36 + 48 * v37;
      v39 = *(_WORD *)v89;
      *(_BYTE *)(v38 + 2) = v89[2];
      *(_WORD *)v38 = v39;
      *(_QWORD *)(v38 + 4) = 0x100000001;
      v40 = v90;
      v41 = v91;
    }
    *(_OWORD *)(v38 + 16) = v40;
    *(_OWORD *)(v38 + 32) = v41;
    ++*(_DWORD *)(v36 + 12);
    v50 = *((_QWORD *)this + 1);
    v51 = *(_DWORD *)(v50 + 12);
    if (!v51)
    {
      __break(0xC471u);
      JUMPOUT(0x198F00E98);
    }
    v52 = *(_QWORD *)v50 + 48 * (v51 - 1);
    *(_BYTE *)(v52 + 1) = *(_BYTE *)(v52 + 1) & 0xFB | (4 * (*((_BYTE *)this + 181) & 1));
    *(_DWORD *)(v52 + 16) = *(_DWORD *)(*(_QWORD *)this + 4);
    v53 = *((_QWORD *)this + 1);
    v54 = *(_DWORD *)(v53 + 12) - 1;
    v55 = *a2;
    if (v55)
      *(_DWORD *)v55 += 4;
    v56 = (uint64_t *)((char *)this + 128);
    *(_QWORD *)v89 = v53;
    *(_DWORD *)&v89[8] = v54;
    *(_QWORD *)&v90 = v55;
    v57 = *((unsigned int *)this + 35);
    if ((_DWORD)v57 == *((_DWORD *)this + 34))
    {
      v58 = WTF::Vector<JSC::Yarr::YarrPatternConstructor::UnresolvedForwardReference,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v56, v57 + 1, (unint64_t)v89);
      v59 = *((_DWORD *)this + 35);
      v60 = *((_QWORD *)this + 16);
      v61 = v60 + 24 * v59;
      v62 = *(_QWORD *)v58;
      *(_DWORD *)(v61 + 8) = *(_DWORD *)(v58 + 8);
      *(_QWORD *)v61 = v62;
      v63 = *(_DWORD **)(v58 + 16);
      if (v63)
        *v63 += 2;
      *(_QWORD *)(v60 + 24 * v59 + 16) = v63;
      v64 = (WTF::StringImpl *)v90;
    }
    else
    {
      v65 = *v56;
      v66 = *v56 + 24 * v57;
      v67 = *(_QWORD *)v89;
      *(_DWORD *)(v66 + 8) = *(_DWORD *)&v89[8];
      *(_QWORD *)v66 = v67;
      if (v55)
        *(_DWORD *)v55 += 2;
      *(_QWORD *)(v65 + 24 * v57 + 16) = v55;
      v64 = v55;
    }
    ++*((_DWORD *)this + 35);
    *(_QWORD *)&v90 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
      {
        WTF::StringImpl::~StringImpl(v64, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
        if (!v55)
          goto LABEL_62;
        goto LABEL_60;
      }
      *(_DWORD *)v64 -= 2;
    }
    if (!v55)
      goto LABEL_62;
LABEL_60:
    if (*(_DWORD *)v55 == 2)
    {
      WTF::StringImpl::~StringImpl(v55, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
    }
    else
    {
      *(_DWORD *)v55 -= 2;
    }
LABEL_62:
    if (v10)
      goto LABEL_70;
    return;
  }
  if ((_DWORD)v20)
  {
    __break(0xC471u);
    JUMPOUT(0x198F00EA0);
  }
  v42 = v10[v16 - 1];
  *(_WORD *)v89 = 5;
  LODWORD(v90) = v42;
  v89[2] = 0;
  *(_QWORD *)&v89[4] = 0x100000001;
  v43 = *(unsigned int *)(v36 + 12);
  if ((_DWORD)v43 == *(_DWORD *)(v36 + 8))
  {
    v84 = WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v43 + 1, (unint64_t)v89);
    v44 = *(_QWORD *)v36 + 48 * *(unsigned int *)(v36 + 12);
    v85 = *(_WORD *)v84;
    *(_BYTE *)(v44 + 2) = *(_BYTE *)(v84 + 2);
    *(_WORD *)v44 = v85;
    *(_DWORD *)(v44 + 4) = *(_DWORD *)(v84 + 4);
    *(_DWORD *)(v44 + 8) = *(_DWORD *)(v84 + 8);
    v46 = *(_OWORD *)(v84 + 16);
    v47 = *(_OWORD *)(v84 + 32);
  }
  else
  {
    v44 = *(_QWORD *)v36 + 48 * v43;
    v45 = *(_WORD *)v89;
    *(_BYTE *)(v44 + 2) = v89[2];
    *(_WORD *)v44 = v45;
    *(_QWORD *)(v44 + 4) = 0x100000001;
    v46 = v90;
    v47 = v91;
  }
  *(_OWORD *)(v44 + 16) = v46;
  *(_OWORD *)(v44 + 32) = v47;
  ++*(_DWORD *)(v36 + 12);
  v86 = *((_QWORD *)this + 1);
  v87 = *(_DWORD *)(v86 + 12);
  if (!v87)
  {
    __break(0xC471u);
    JUMPOUT(0x198F00EA8);
  }
  v88 = *(_QWORD *)v86 + 48 * (v87 - 1);
  *(_BYTE *)(v88 + 1) = *(_BYTE *)(v88 + 1) & 0xFB | (4 * (*((_BYTE *)this + 181) & 1));
  **(_BYTE **)this |= 1u;
LABEL_70:
  WTF::fastFree((unint64_t)v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void JSC::Yarr::YarrPatternConstructor::atomNamedForwardReference(JSC::Yarr::YarrPatternConstructor *this, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[12];
  __int128 v53;
  __int128 v54;

  v10 = *((_QWORD *)this + 1);
  *(_WORD *)v52 = 6;
  v52[2] = 0;
  *(_QWORD *)&v52[4] = 0x100000001;
  LODWORD(v53) = 0;
  v11 = *(unsigned int *)(v10 + 12);
  if ((_DWORD)v11 == *(_DWORD *)(v10 + 8))
  {
    v16 = WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)v52);
    v12 = *(_QWORD *)v10 + 48 * *(unsigned int *)(v10 + 12);
    v17 = *(_WORD *)v16;
    *(_BYTE *)(v12 + 2) = *(_BYTE *)(v16 + 2);
    *(_WORD *)v12 = v17;
    *(_DWORD *)(v12 + 4) = *(_DWORD *)(v16 + 4);
    *(_DWORD *)(v12 + 8) = *(_DWORD *)(v16 + 8);
    v14 = *(_OWORD *)(v16 + 16);
    v15 = *(_OWORD *)(v16 + 32);
  }
  else
  {
    v12 = *(_QWORD *)v10 + 48 * v11;
    v13 = *(_WORD *)v52;
    *(_BYTE *)(v12 + 2) = v52[2];
    *(_WORD *)v12 = v13;
    *(_QWORD *)(v12 + 4) = 0x100000001;
    v14 = v53;
    v15 = v54;
  }
  *(_OWORD *)(v12 + 16) = v14;
  *(_OWORD *)(v12 + 32) = v15;
  ++*(_DWORD *)(v10 + 12);
  if (*((_BYTE *)this + 181) == 1)
  {
    v18 = *((_QWORD *)this + 1);
    v19 = *(_DWORD *)(v18 + 12);
    if (!v19)
    {
      __break(0xC471u);
      return;
    }
    v20 = *(_QWORD *)v18 + 48 * (v19 - 1);
    *(_BYTE *)(v20 + 1) |= 4u;
    v21 = *((_QWORD *)this + 1);
    v22 = *(_DWORD *)(v21 + 12) - 1;
    v23 = *a2;
    if (v23)
      *(_DWORD *)v23 += 4;
    v24 = (uint64_t *)((char *)this + 128);
    *(_QWORD *)v52 = v21;
    *(_DWORD *)&v52[8] = v22;
    *(_QWORD *)&v53 = v23;
    v25 = *((unsigned int *)this + 35);
    if ((_DWORD)v25 == *((_DWORD *)this + 34))
    {
      v26 = WTF::Vector<JSC::Yarr::YarrPatternConstructor::UnresolvedForwardReference,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)v52);
      v27 = *((_DWORD *)this + 35);
      v28 = *((_QWORD *)this + 16);
      v29 = v28 + 24 * v27;
      v30 = *(_QWORD *)v26;
      *(_DWORD *)(v29 + 8) = *(_DWORD *)(v26 + 8);
      *(_QWORD *)v29 = v30;
      v31 = *(_DWORD **)(v26 + 16);
      if (v31)
        *v31 += 2;
      *(_QWORD *)(v28 + 24 * v27 + 16) = v31;
      v32 = (WTF::StringImpl *)v53;
    }
    else
    {
      v33 = *v24;
      v34 = *v24 + 24 * v25;
      v35 = *(_QWORD *)v52;
      *(_DWORD *)(v34 + 8) = *(_DWORD *)&v52[8];
      *(_QWORD *)v34 = v35;
      if (v23)
        *(_DWORD *)v23 += 2;
      *(_QWORD *)(v33 + 24 * v25 + 16) = v23;
      v32 = v23;
    }
    ++*((_DWORD *)this + 35);
    *(_QWORD *)&v53 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::~StringImpl(v32, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
        if (!v23)
          return;
        goto LABEL_19;
      }
      *(_DWORD *)v32 -= 2;
    }
    if (!v23)
      return;
LABEL_19:
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
}

unint64_t WTF::Vector<JSC::Yarr::YarrPatternConstructor::UnresolvedForwardReference,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::YarrPatternConstructor::UnresolvedForwardReference>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  result = WTF::Vector<JSC::Yarr::YarrPatternConstructor::UnresolvedForwardReference,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 24 * v4;
  v7 = *(_QWORD *)result;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(result + 8);
  *(_QWORD *)v6 = v7;
  v8 = *(_DWORD **)(result + 16);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(v5 + 24 * v4 + 16) = v8;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::Yarr::YarrPatternConstructor::UnresolvedForwardReference,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<JSC::Yarr::YarrPatternConstructor::UnresolvedForwardReference,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<JSC::Yarr::YarrPatternConstructor::UnresolvedForwardReference,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::Yarr::YarrPatternConstructor::UnresolvedForwardReference,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(_DWORD *)(a1 + 12);
      v5 = 24 * a2;
      v6 = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v6;
      if (v4)
      {
        v14 = v6;
        v15 = v3 + 24 * v4;
        v16 = v3;
        do
        {
          v17 = *(_QWORD *)v16;
          *(_DWORD *)(v14 + 8) = *(_DWORD *)(v16 + 8);
          *(_QWORD *)v14 = v17;
          v18 = *(_DWORD **)(v16 + 16);
          if (v18)
            *v18 += 2;
          *(_QWORD *)(v14 + 16) = v18;
          v19 = *(WTF::StringImpl **)(v16 + 16);
          *(_QWORD *)(v16 + 16) = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
            {
              WTF::StringImpl::~StringImpl(v19, v7, v8, v9, v10, v11, v12, v13);
              WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
            }
            else
            {
              *(_DWORD *)v19 -= 2;
            }
          }
          v16 += 24;
          v14 += 24;
        }
        while (v16 != v15);
      }
      if (v3)
      {
        if (*(_QWORD *)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

double JSC::Yarr::YarrPatternConstructor::quantifyAtom(JSC::Yarr::YarrPatternConstructor *this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  JSC::Yarr::PatternDisjunction **v20;
  uint64_t v21;
  _DWORD *v22;
  int *v23;
  unsigned int v24;
  __int16 v25;
  int v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  __int128 v33;
  __int128 v34;
  uint64_t *v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __int16 v45;
  JSC::Yarr::PatternDisjunction *v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int128 v50;
  int v52;
  char v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  __int16 v57;
  __int128 v58;
  uint64_t *v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v65;
  unsigned __int8 v66;
  int v67;
  int v68;
  JSC::Yarr::PatternDisjunction *v69[2];
  __int128 v70;

  v8 = *((_QWORD *)this + 1);
  v9 = *(_DWORD *)(v8 + 12);
  if (!a3)
  {
    *(_DWORD *)(v8 + 12) = v9 - 1;
    return *(double *)&v33;
  }
  if (!v9)
  {
    __break(0xC471u);
    goto LABEL_57;
  }
  v11 = v9 - 1;
  v12 = *(_QWORD *)v8;
  v13 = (unsigned __int8 *)(*(_QWORD *)v8 + 48 * v11);
  v14 = *v13;
  if (v14 == 8)
  {
    if (!a2)
      *(_DWORD *)(v8 + 12) = v11;
    return *(double *)&v33;
  }
  v15 = a3 - a2;
  if (a3 == a2)
  {
    *(int32x2_t *)&v33 = vdup_n_s32(a3);
    v47 = v12 + 48 * v11;
    *(_QWORD *)(v47 + 4) = v33;
    *(_BYTE *)(v47 + 2) = 0;
    return *(double *)&v33;
  }
  v16 = a4;
  if (!a2)
  {
    if ((_DWORD)a4)
      v17 = 1;
    else
      v17 = 2;
    v18 = v12 + 48 * v11;
    *(_DWORD *)(v18 + 4) = 0;
LABEL_10:
    *(_DWORD *)(v18 + 8) = a3;
    *(_BYTE *)(v18 + 2) = v17;
    return *(double *)&v33;
  }
  if (v14 == 7 && (**(_BYTE **)this & 0x10) != 0)
  {
    if ((_DWORD)a4)
      v17 = 1;
    else
      v17 = 2;
    v18 = v12 + 48 * v11;
    *(_DWORD *)(v18 + 4) = a2;
    goto LABEL_10;
  }
  if ((*(_BYTE *)(v12 + 48 * v11 + 1) & 4) != 0)
  {
    if (a3 == -1)
      v52 = -1;
    else
      v52 = a3 - a2;
    if ((_DWORD)a4)
      v53 = 1;
    else
      v53 = 2;
    v54 = v12 + 48 * v11;
    *(_DWORD *)(v54 + 4) = 0;
    *(_DWORD *)(v54 + 8) = v52;
    *(_BYTE *)(v54 + 2) = v53;
    if (v14 == 7)
    {
      *(_BYTE *)(v12 + 48 * v11 + 32) |= 1u;
      v8 = *((_QWORD *)this + 1);
    }
    JSC::Yarr::YarrPatternConstructor::copyTerm((JSC::Yarr::YarrPatternConstructor *)&v65, this, v13, a4, a5, a6, a7, a8);
    v55 = *(_DWORD *)(v8 + 12);
    if (v55 == *(_DWORD *)(v8 + 8))
    {
      WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::PatternTerm>(v8, (unint64_t)&v65);
    }
    else
    {
      v56 = *(_QWORD *)v8 + 48 * v55;
      v57 = v65;
      *(_BYTE *)(v56 + 2) = v66;
      *(_WORD *)v56 = v57;
      *(_DWORD *)(v56 + 4) = v67;
      *(_DWORD *)(v56 + 8) = v68;
      v58 = v70;
      *(_OWORD *)(v56 + 16) = *(_OWORD *)v69;
      *(_OWORD *)(v56 + 32) = v58;
      ++*(_DWORD *)(v8 + 12);
    }
    v59 = (uint64_t *)*((_QWORD *)this + 1);
    v60 = *((_DWORD *)v59 + 3);
    if (v60)
    {
      v61 = v60 - 1;
      v62 = *v59;
      v63 = v62 + 48 * v61;
      *(int32x2_t *)&v33 = vdup_n_s32(a2);
      *(_QWORD *)(v63 + 4) = v33;
      *(_BYTE *)(v63 + 2) = 0;
      if (*(_BYTE *)v63 != 7)
        return *(double *)&v33;
      v42 = v62 + 48 * v61;
      v43 = *(_BYTE *)(v42 + 32) & 0xFE;
      goto LABEL_28;
    }
    __break(0xC471u);
LABEL_57:
    JUMPOUT(0x198F016ECLL);
  }
  v20 = v69;
  v21 = v12 + 48 * v11;
  *(_DWORD *)(v21 + 4) = a2;
  v22 = (_DWORD *)(v21 + 4);
  v22[1] = a2;
  v23 = v22 + 1;
  *((_BYTE *)v22 - 2) = 0;
  if ((unint64_t)&v65 < *((_QWORD *)this + 18))
  {
    *((_BYTE *)this + 152) = 1;
    v48 = *(_WORD *)v13;
    v66 = v13[2];
    v65 = v48;
    v26 = *v22;
    v67 = *v22;
    v27 = *v23;
    v68 = *v23;
    v49 = v12 + 48 * v11;
    v50 = *(_OWORD *)(v49 + 32);
    *(_OWORD *)v69 = *(_OWORD *)(v49 + 16);
    v70 = v50;
  }
  else
  {
    v24 = *v13 - 7;
    v25 = *(_WORD *)v13;
    v66 = v13[2];
    v65 = v25;
    v26 = *v22;
    v67 = *v22;
    v27 = *v23;
    v68 = *v23;
    v28 = v12 + 48 * v11;
    v29 = *(_OWORD *)(v28 + 32);
    *(_OWORD *)v69 = *(_OWORD *)(v28 + 16);
    v70 = v29;
    if (v24 <= 1)
    {
      JSC::Yarr::YarrPatternConstructor::copyDisjunction(this, v69[0], 0, a4, a5, a6, a7, a8);
      v69[0] = v46;
      **(_BYTE **)this |= 0x10u;
    }
  }
  v30 = *(unsigned int *)(v8 + 12);
  if ((_DWORD)v30 == *(_DWORD *)(v8 + 8))
  {
    v44 = WTF::Vector<JSC::Yarr::PatternTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v30 + 1, (unint64_t)&v65);
    v20 = (JSC::Yarr::PatternDisjunction **)(v44 + 16);
    v31 = *(_QWORD *)v8 + 48 * *(unsigned int *)(v8 + 12);
    v45 = *(_WORD *)v44;
    *(_BYTE *)(v31 + 2) = *(_BYTE *)(v44 + 2);
    *(_WORD *)v31 = v45;
    *(_DWORD *)(v31 + 4) = *(_DWORD *)(v44 + 4);
    *(_DWORD *)(v31 + 8) = *(_DWORD *)(v44 + 8);
  }
  else
  {
    v31 = *(_QWORD *)v8 + 48 * v30;
    v32 = v65;
    *(_BYTE *)(v31 + 2) = v66;
    *(_WORD *)v31 = v32;
    *(_DWORD *)(v31 + 4) = v26;
    *(_DWORD *)(v31 + 8) = v27;
  }
  v33 = *(_OWORD *)v20;
  v34 = *((_OWORD *)v20 + 1);
  *(_OWORD *)(v31 + 16) = *(_OWORD *)v20;
  *(_OWORD *)(v31 + 32) = v34;
  ++*(_DWORD *)(v8 + 12);
  v35 = (uint64_t *)*((_QWORD *)this + 1);
  v36 = *((_DWORD *)v35 + 3);
  if (!v36)
  {
    __break(0xC471u);
    JUMPOUT(0x198F016F4);
  }
  v37 = v36 - 1;
  v38 = *v35;
  v39 = v38 + 48 * v37;
  if (a3 == -1)
    v40 = -1;
  else
    v40 = v15;
  if (v16)
    v41 = 1;
  else
    v41 = 2;
  *(_DWORD *)(v39 + 4) = 0;
  *(_DWORD *)(v39 + 8) = v40;
  *(_BYTE *)(v39 + 2) = v41;
  if (*(_BYTE *)v39 == 7)
  {
    v42 = v38 + 48 * v37;
    v43 = *(_BYTE *)(v42 + 32) | 1;
LABEL_28:
    *(_BYTE *)(v42 + 32) = v43;
  }
  return *(double *)&v33;
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::resetForReparsing(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  WTF::StringImpl **v17;
  _QWORD *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl **v36;

  JSC::Yarr::YarrPatternConstructor::resetForReparsing(*(JSC::Yarr::YarrPatternConstructor **)a1, a2, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 49) = 0;
  if (*(_DWORD *)(a1 + 64))
  {
    if (*(_DWORD *)(a1 + 68))
      *(_DWORD *)(a1 + 68) = 0;
    v16 = *(_QWORD *)(a1 + 56);
    if (a1 + 72 == v16)
    {
      if (v16)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (!v16
      || (*(_QWORD *)(a1 + 56) = 0,
          *(_DWORD *)(a1 + 64) = 0,
          WTF::fastFree(v16, v9, v10, v11, v12, v13, v14, v15),
          !*(_QWORD *)(a1 + 56)))
    {
LABEL_6:
      *(_QWORD *)(a1 + 56) = a1 + 72;
      *(_DWORD *)(a1 + 64) = 16;
    }
  }
LABEL_7:
  v17 = *(WTF::StringImpl ***)(a1 + 88);
  if (v17)
  {
    *(_QWORD *)(a1 + 88) = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v17, (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
  }
  v18 = (_QWORD *)(a1 + 96);
  WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 96, (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
  if (!*(_DWORD *)(a1 + 104))
    WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 96, 0x10uLL, v20, v21, v22, v23, v24, v25);
  if (*v18)
  {
    v26 = *(unsigned int *)(a1 + 108);
    if ((_DWORD)v26 != 1)
      bzero((void *)(*v18 + 8 * v26), -8 * v26 + 8);
  }
  *(_DWORD *)(a1 + 108) = 1;
  v27 = (_QWORD *)(a1 + 120);
  WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 120, v19, v20, v21, v22, v23, v24, v25);
  if (!*(_DWORD *)(a1 + 128))
    WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 120, 0x10uLL, v29, v30, v31, v32, v33, v34);
  if (*v27)
  {
    v35 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v35 != 1)
      bzero((void *)(*v27 + 8 * v35), -8 * v35 + 8);
  }
  *(_DWORD *)(a1 + 132) = 1;
  v36 = *(WTF::StringImpl ***)(a1 + 144);
  if (v36)
  {
    *(_QWORD *)(a1 + 144) = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v36, v28, v29, v30, v31, v32, v33, v34);
  }
}

void JSC::Yarr::YarrPatternConstructor::resetForReparsing(JSC::Yarr::YarrPatternConstructor *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  uint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  JSC::Yarr::CharacterClass **v78;
  uint64_t v79;
  JSC::Yarr::CharacterClass *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;

  v9 = *(_QWORD *)this;
  *(_QWORD *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 4) = 0;
  *(_BYTE *)v9 &= 0x80u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 192) = 0u;
  v10 = *(_QWORD *)(v9 + 208);
  if (v10)
  {
    *(_QWORD *)(v9 + 208) = 0;
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  if (*(_DWORD *)(v9 + 32))
  {
    v11 = *(unsigned int *)(v9 + 36);
    v12 = *(unint64_t **)(v9 + 24);
    if ((_DWORD)v11)
    {
      v13 = &v12[v11];
      do
      {
        v14 = *v12;
        *v12 = 0;
        if (v14)
        {
          v15 = *(unsigned int *)(v14 + 12);
          if ((_DWORD)v15)
          {
            v16 = *(unint64_t **)v14;
            v17 = 8 * v15;
            do
            {
              v18 = *v16;
              *v16 = 0;
              if (v18)
              {
                v19 = *(_QWORD *)v18;
                if (*(_QWORD *)v18)
                {
                  *(_QWORD *)v18 = 0;
                  *(_DWORD *)(v18 + 8) = 0;
                  WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
                }
                WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
              }
              ++v16;
              v17 -= 8;
            }
            while (v17);
          }
          v20 = *(_QWORD *)v14;
          if (*(_QWORD *)v14)
          {
            *(_QWORD *)v14 = 0;
            *(_DWORD *)(v14 + 8) = 0;
            WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
          }
          WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
        }
        ++v12;
      }
      while (v12 != v13);
      v12 = *(unint64_t **)(v9 + 24);
      *(_DWORD *)(v9 + 36) = 0;
    }
    if ((unint64_t *)(v9 + 40) == v12 || v12 == 0)
    {
      if (v12)
        goto LABEL_26;
      goto LABEL_25;
    }
    *(_QWORD *)(v9 + 24) = 0;
    *(_DWORD *)(v9 + 32) = 0;
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
    if (!*(_QWORD *)(v9 + 24))
    {
LABEL_25:
      *(_QWORD *)(v9 + 24) = v9 + 40;
      *(_DWORD *)(v9 + 32) = 4;
    }
  }
LABEL_26:
  if (*(_DWORD *)(v9 + 80))
  {
    v22 = *(unsigned int *)(v9 + 84);
    if ((_DWORD)v22)
    {
      v78 = *(JSC::Yarr::CharacterClass ***)(v9 + 72);
      v79 = 8 * v22;
      do
      {
        v80 = *v78;
        *v78 = 0;
        if (v80)
        {
          JSC::Yarr::CharacterClass::~CharacterClass(v80, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
        }
        ++v78;
        v79 -= 8;
      }
      while (v79);
      *(_DWORD *)(v9 + 84) = 0;
    }
    v23 = *(_QWORD *)(v9 + 72);
    if (v23)
    {
      *(_QWORD *)(v9 + 72) = 0;
      *(_DWORD *)(v9 + 80) = 0;
      WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*(_DWORD *)(v9 + 96))
  {
    v51 = *(unsigned int *)(v9 + 100);
    if ((_DWORD)v51)
    {
      v52 = *(WTF::StringImpl ***)(v9 + 88);
      v53 = 8 * v51;
      do
      {
        v54 = *v52;
        *v52 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
          {
            WTF::StringImpl::~StringImpl(v54, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
          }
          else
          {
            *(_DWORD *)v54 -= 2;
          }
        }
        ++v52;
        v53 -= 8;
      }
      while (v53);
      *(_DWORD *)(v9 + 100) = 0;
    }
    v63 = *(_QWORD *)(v9 + 88);
    if (v63)
    {
      *(_QWORD *)(v9 + 88) = 0;
      *(_DWORD *)(v9 + 96) = 0;
      WTF::fastFree(v63, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v24 = *(_QWORD **)(v9 + 104);
  if (v24)
  {
    *(_QWORD *)(v9 + 104) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v24, a2, a3, a4, a5, a6, a7, a8);
  }
  if (*(_DWORD *)(v9 + 120))
  {
    if (*(_DWORD *)(v9 + 124))
      *(_DWORD *)(v9 + 124) = 0;
    v25 = *(_QWORD *)(v9 + 112);
    if (v25)
    {
      *(_QWORD *)(v9 + 112) = 0;
      *(_DWORD *)(v9 + 120) = 0;
      WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  JSC::Yarr::CharacterClassConstructor::reset((JSC::Yarr::YarrPatternConstructor *)((char *)this + 16), a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 13) = (char *)this + 16;
  *((_BYTE *)this + 152) = 0;
  if (*((_DWORD *)this + 42))
  {
    if (*((_DWORD *)this + 43))
      *((_DWORD *)this + 43) = 0;
    v33 = *((_QWORD *)this + 20);
    if (v33)
    {
      *((_QWORD *)this + 20) = 0;
      *((_DWORD *)this + 42) = 0;
      WTF::fastFree(v33, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  *((_DWORD *)this + 44) = 0;
  *((_WORD *)this + 90) = 0;
  if (*((_DWORD *)this + 34))
  {
    v34 = *((unsigned int *)this + 35);
    if ((_DWORD)v34)
    {
      v35 = 24 * v34;
      v36 = (WTF::StringImpl **)(*((_QWORD *)this + 16) + 16);
      do
      {
        v37 = *v36;
        *v36 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
          {
            WTF::StringImpl::~StringImpl(v37, (WTF::AtomStringImpl *)v26, v27, v28, v29, v30, v31, v32);
            WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
          }
          else
          {
            *(_DWORD *)v37 -= 2;
          }
        }
        v36 += 3;
        v35 -= 24;
      }
      while (v35);
      *((_DWORD *)this + 35) = 0;
    }
    v46 = *((_QWORD *)this + 16);
    if (v46)
    {
      *((_QWORD *)this + 16) = 0;
      *((_DWORD *)this + 34) = 0;
      WTF::fastFree(v46, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  v47 = WTF::fastMalloc((WTF *)0x28);
  *(_BYTE *)(v47 + 32) = 0;
  *(_QWORD *)(v47 + 8) = 0;
  *(_QWORD *)(v47 + 16) = 0;
  *(_QWORD *)v47 = 0;
  v89 = (WTF *)v47;
  *(_QWORD *)(*(_QWORD *)this + 16) = v47;
  JSC::Yarr::PatternDisjunction::addNewAlternative(v47, 1, 0);
  *((_QWORD *)this + 1) = v48;
  v49 = *(_QWORD *)this;
  v50 = *(unsigned int *)(*(_QWORD *)this + 36);
  if ((_DWORD)v50 == *(_DWORD *)(*(_QWORD *)this + 32))
  {
    WTF::Vector<std::unique_ptr<JSC::Yarr::PatternDisjunction>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<JSC::Yarr::PatternDisjunction>>(v49 + 24, (unint64_t)&v89);
    v71 = v89;
    v89 = 0;
    if (v71)
    {
      v72 = *((unsigned int *)v71 + 3);
      if ((_DWORD)v72)
      {
        v73 = *(unint64_t **)v71;
        v74 = 8 * v72;
        do
        {
          v75 = *v73;
          *v73 = 0;
          if (v75)
          {
            v76 = *(_QWORD *)v75;
            if (*(_QWORD *)v75)
            {
              *(_QWORD *)v75 = 0;
              *(_DWORD *)(v75 + 8) = 0;
              WTF::fastFree(v76, v64, v65, v66, v67, v68, v69, v70);
            }
            WTF::fastFree(v75, v64, v65, v66, v67, v68, v69, v70);
          }
          ++v73;
          v74 -= 8;
        }
        while (v74);
      }
      v77 = *(_QWORD *)v71;
      if (*(_QWORD *)v71)
      {
        *(_QWORD *)v71 = 0;
        *((_DWORD *)v71 + 2) = 0;
        WTF::fastFree(v77, v64, v65, v66, v67, v68, v69, v70);
      }
      WTF::fastFree((unint64_t)v71, v64, v65, v66, v67, v68, v69, v70);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v49 + 24) + 8 * v50) = v47;
    *(_DWORD *)(v49 + 36) = v50 + 1;
  }
}

void WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (*(_DWORD *)(a1 + 8))
  {
    v9 = *(unsigned int *)(a1 + 12);
    v10 = *(WTF::StringImpl ****)a1;
    if ((_DWORD)v9)
    {
      v11 = &v10[v9];
      do
      {
        v12 = *v10;
        if (*v10)
        {
          v13 = *((unsigned int *)v12 - 1);
          if ((_DWORD)v13)
          {
            v14 = *v10;
            do
            {
              v15 = *v14;
              if (*v14 != (WTF::StringImpl *)-1)
              {
                *v14 = 0;
                if (v15)
                {
                  if (*(_DWORD *)v15 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
                  }
                  else
                  {
                    *(_DWORD *)v15 -= 2;
                  }
                }
              }
              ++v14;
              --v13;
            }
            while (v13);
          }
          WTF::fastFree((unint64_t)(v12 - 2), a2, a3, a4, a5, a6, a7, a8);
        }
        ++v10;
      }
      while (v10 != v11);
      *(_DWORD *)(a1 + 12) = 0;
      v10 = *(WTF::StringImpl ****)a1;
    }
    if ((WTF::StringImpl ***)(a1 + 16) == v10 || v10 == 0)
    {
      if (v10)
        return;
      goto LABEL_23;
    }
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
    if (!*(_QWORD *)a1)
    {
LABEL_23:
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
  }
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::Parser(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 36) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 44) = 0;
  *(_WORD *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 56) = a1 + 72;
  *(_QWORD *)(a1 + 64) = 16;
  JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::NamedCaptureGroups::NamedCaptureGroups((_QWORD *)(a1 + 88), a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

_QWORD *JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::NamedCaptureGroups::NamedCaptureGroups(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = 0;
  a1[1] = a1 + 3;
  a1[2] = 1;
  a1[4] = a1 + 6;
  a1[5] = 1;
  WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)(a1 + 1), a2, a3, a4, a5, a6, a7, a8);
  WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)(a1 + 4), v9, v10, v11, v12, v13, v14, v15);
  return a1;
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::parseTokens(_QWORD **a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  char *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  JSC::Yarr::YarrPatternConstructor *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  WTF::StringImpl **v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl **v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  WTF::AtomStringImpl *v48;
  WTF::StringImpl *v49;
  int v50;
  unsigned int v51;
  JSC::Yarr::YarrPatternConstructor *v52;
  int v54;
  WTF::StringImpl *v55;
  char v56;
  uint64_t v57;
  int v58;
  _QWORD *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v77;
  unsigned __int8 v78;
  unsigned int v79;
  unsigned __int8 v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t *v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  WTF::StringImpl **v93;
  uint64_t v94;
  WTF::StringImpl **v95;
  WTF::StringImpl **v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl **v99;
  uint64_t v100;
  WTF::StringImpl **v101;
  WTF::StringImpl **v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  _QWORD *v117;
  JSC::Yarr::YarrPatternConstructor *v118;
  uint64_t v119;
  unsigned int v120;
  int v121;
  uint64_t *v122;
  WTF::AtomStringImpl *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  WTF::StringImpl **v128;
  uint64_t v129;
  JSC::Yarr::YarrPatternConstructor *v130;
  WTF::AtomStringImpl *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  WTF::StringImpl **v138;
  uint64_t v139;
  JSC::Yarr::YarrPatternConstructor *v140;
  int v141;
  _BOOL4 v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  _BOOL8 v146;
  int v147;
  int v148;
  JSC::Yarr::YarrPatternConstructor *v149;
  int v150;
  unsigned int v151;
  char v152;
  uint64_t v153;
  int v154;
  int v155;
  unsigned int v156;
  char v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v161;
  int v162;
  int v163;
  unsigned int v164;
  unint64_t v165;
  char *v166;
  char v167;
  unsigned int v168;
  unsigned int v169;
  WTF::AtomStringImpl *v170;
  const WTF::StringImpl *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  WTF::StringImpl **v178;
  WTF::StringImpl *v179;
  unint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  WTF::StringImpl **v189;
  WTF::StringImpl *v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  WTF::StringImpl **v200;
  WTF::StringImpl *v201;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  WTF::StringImpl **v211;
  WTF::StringImpl *v212;
  unint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int v222;
  uint64_t *v223;
  WTF::StringImpl **v224;
  char v225;
  WTF::StringImpl **v227;
  BOOL v228;
  WTF::StringImpl *v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  int v233;
  int v234;
  WTF::AtomStringImpl *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  JSC::Yarr::YarrPatternConstructor *v244;
  WTF::StringImpl *v245;
  uint64_t v246;
  WTF::AtomStringImpl *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  WTF::StringImpl **v255;
  uint64_t *v256;
  WTF::StringImpl **v257;
  unint64_t v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  _QWORD *v282;
  _QWORD *v283;
  WTF::StringImpl *v284;
  char v285;
  WTF::StringImpl *v286;
  char v287;
  WTF::StringImpl **v288;
  WTF::StringImpl *v289;
  char *v290;
  BOOL v291;
  int v292;
  unsigned int v293;
  WTF::StringImpl *v294;
  char v295;

  LOBYTE(v9) = 0;
  v10 = (char *)(a1 + 1);
  v281 = (uint64_t)(a1 + 7);
  v282 = a1 + 12;
  v283 = a1 + 15;
LABEL_2:
  v11 = *((_DWORD *)a1 + 6);
  v12 = *((unsigned int *)a1 + 7);
  if ((_DWORD)v12 == v11)
  {
    if (*((_DWORD *)a1 + 17))
    {
      v157 = 7;
      goto LABEL_268;
    }
    return;
  }
  v13 = a1[2];
  v14 = *((unsigned __int16 *)v13 + v12);
  if (*((unsigned __int16 *)v13 + v12) <= 0x7Au)
  {
    switch(*((_WORD *)v13 + v12))
    {
      case '[':
        v54 = *((unsigned __int8 *)a1 + 32);
        if (v54 == 2)
        {
          JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::parseClassSet((uint64_t)a1, v14);
          goto LABEL_54;
        }
        *((_DWORD *)a1 + 7) = v12 + 1;
        v55 = (WTF::StringImpl *)*a1;
        v289 = (WTF::StringImpl *)*a1;
        v290 = v10;
        v291 = v54 == 1;
        v292 = 0;
        v293 = 0;
        if ((_DWORD)v12 + 1 == v11 || *((_WORD *)v13 + (v12 + 1)) != 94)
        {
          v56 = 0;
        }
        else
        {
          *((_DWORD *)a1 + 7) = v12 + 2;
          v56 = 1;
        }
        *((_BYTE *)v55 + 153) = v56;
        while (2)
        {
          v58 = *((_DWORD *)a1 + 6);
          v57 = *((unsigned int *)a1 + 7);
          if ((_DWORD)v57 == v58)
          {
            v152 = 13;
            goto LABEL_248;
          }
          v59 = a1[2];
          v60 = *((unsigned __int16 *)v59 + v57);
          if ((_DWORD)v60 != 92)
          {
            if ((_DWORD)v60 != 93)
            {
              v61 = *((unsigned __int8 *)a1 + 32) - 3;
              v62 = v57 + 1;
              *((_DWORD *)a1 + 7) = v57 + 1;
              if ((_DWORD)v57 + 1 != v58 && (v60 & 0xFC00) == 55296 && v61 >= 0xFFFFFFFE)
              {
                *((_DWORD *)a1 + 7) = v57 + 2;
                v82 = *((unsigned __int16 *)v59 + v62);
                if ((v82 & 0xFC00) == 0xDC00)
                  v60 = (((_DWORD)v60 << 10) - 56613888 + v82);
                else
                  *((_DWORD *)a1 + 7) = v62;
              }
              switch(v292)
              {
                case 0:
                  goto LABEL_110;
                case 1:
                  if ((_DWORD)v60 == 45)
                  {
                    v292 = 2;
                    goto LABEL_114;
                  }
                  v65 = v293;
                  v66 = *((_QWORD *)v289 + 13);
                  if (*(unsigned __int8 *)(v66 + 1) >= 2u)
                  {
                    JSC::Yarr::CharacterClassConstructor::putCharNonUnion(*((_QWORD *)v289 + 13), (void *)v293, (uint64_t)a3, a4, a5, a6, a7, a8);
                  }
                  else
                  {
                    if ((*(_BYTE *)v66 & 1) == 0)
                      goto LABEL_76;
                    v73 = *(_DWORD *)(v66 + 4);
                    if (v293 <= 0x7F && !v73)
                    {
                      if ((v293 | 0x20) - 97 > 0x19)
                      {
                        v68 = (unint64_t *)*((_QWORD *)v289 + 13);
                        v67 = v66 + 24;
                        goto LABEL_80;
                      }
                      if (v293 - 97 >= 0x1A)
                        v81 = -1;
                      else
                        v81 = -33;
                      JSC::Yarr::CharacterClassConstructor::addSorted(*((unint64_t **)v289 + 13), v66 + 24, v81 & v293);
                      v69 = v65 | (32 * (v65 - 65 < 0x1A));
                      v68 = (unint64_t *)v66;
                      v67 = v66 + 24;
LABEL_81:
                      JSC::Yarr::CharacterClassConstructor::addSorted(v68, v67, v69);
                      goto LABEL_82;
                    }
                    v228 = v73 == 0;
                    if (v73)
                      v86 = &JSC::Yarr::unicodeRangeInfo;
                    else
                      v86 = &JSC::Yarr::ucs2RangeInfo;
                    v84 = 540;
                    if (v228)
                      v84 = 448;
                    while (1)
                    {
                      do
                      {
                        v83 = v84;
                        v84 >>= 1;
                      }
                      while (v86[4 * v84] > v293);
                      v85 = (uint64_t)&v86[4 * v84];
                      if (*(_DWORD *)(v85 + 4) >= v293)
                        break;
                      v86 = (_DWORD *)(v85 + 16);
                      v84 = v83 + ~v84;
                    }
                    if (!*(_DWORD *)(v85 + 12))
                    {
LABEL_76:
                      if (v293 <= 0x7F)
                        v67 = v66 + 24;
                      else
                        v67 = v66 + 56;
                      v68 = (unint64_t *)*((_QWORD *)v289 + 13);
LABEL_80:
                      v69 = v293;
                      goto LABEL_81;
                    }
                    JSC::Yarr::CharacterClassConstructor::putUnicodeIgnoreCase(*((unint64_t **)v289 + 13), v293, v85);
                  }
LABEL_82:
                  v293 = v60;
                  break;
                case 2:
                  goto LABEL_111;
                case 3:
                  if ((_DWORD)v60 != 45)
                    goto LABEL_110;
                  JSC::Yarr::CharacterClassConstructor::putChar(*((_QWORD *)v289 + 13), (void *)0x2D, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v292 = 4;
                  goto LABEL_114;
                case 4:
                  goto LABEL_301;
                default:
                  goto LABEL_114;
              }
              goto LABEL_114;
            }
            *((_DWORD *)a1 + 7) = v57 + 1;
            if (v292 == 1)
            {
              v87 = v293;
              v88 = (uint64_t *)v289;
              goto LABEL_128;
            }
            if (v292 == 2)
            {
              v88 = (uint64_t *)v289;
              JSC::Yarr::CharacterClassConstructor::putChar(*((_QWORD *)v289 + 13), (void *)v293, (uint64_t)a3, a4, a5, a6, a7, a8);
              v87 = 45;
LABEL_128:
              JSC::Yarr::CharacterClassConstructor::putChar(v88[13], (void *)v87, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
            else
            {
              v88 = (uint64_t *)v289;
            }
            JSC::Yarr::YarrPatternConstructor::atomCharacterClassEnd((JSC::Yarr::YarrPatternConstructor *)v88);
            goto LABEL_54;
          }
          LODWORD(v70) = v57 + 1;
          *((_DWORD *)a1 + 7) = v57 + 1;
          if ((_DWORD)v57 + 1 == v58)
          {
            v152 = 17;
            goto LABEL_248;
          }
          v71 = *((unsigned __int16 *)v59 + v70);
          switch(*((_WORD *)v59 + v70))
          {
            case '-':
              if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                goto LABEL_406;
              v139 = 45;
              goto LABEL_429;
            case '0':
              v168 = v57 + 2;
              *((_DWORD *)a1 + 7) = v168;
              if (v168 == v58 || *((unsigned __int16 *)v59 + v168) - 48 >= 0xA)
              {
                v139 = 0;
              }
              else
              {
                if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                {
LABEL_337:
                  v152 = 23;
                  goto LABEL_248;
                }
                v139 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::consumeOctal((uint64_t)a1, 2);
              }
              goto LABEL_125;
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
              if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                goto LABEL_337;
              if (v71 > 0x37)
LABEL_406:
                *((_DWORD *)a1 + 7) = v57 + 2;
              else
                v71 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::consumeOctal((uint64_t)a1, 3);
              goto LABEL_407;
            case 'B':
              *((_DWORD *)a1 + 7) = v57 + 2;
              if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                goto LABEL_346;
              v139 = 66;
              goto LABEL_125;
            case 'D':
              *((_DWORD *)a1 + 7) = v57 + 2;
              v145 = 0;
              goto LABEL_317;
            case 'P':
            case 'p':
              v158 = v57 + 2;
              *((_DWORD *)a1 + 7) = v57 + 2;
              if (!*((_BYTE *)a1 + 32))
                goto LABEL_324;
              if (v158 == v58 || *((_WORD *)v59 + v158) != 123)
                goto LABEL_330;
              *((_DWORD *)a1 + 7) = v57 + 3;
              v159 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeUnicodePropertyExpression((uint64_t)a1, v14, (uint64_t)a3, a4, a5, a6, a7, a8);
              if (!HIDWORD(v159))
                goto LABEL_114;
              v145 = v159;
              if ((_DWORD)v71 == 80 && (v159 - 329) <= 6)
                goto LABEL_290;
              v146 = (_DWORD)v71 == 80;
LABEL_212:
              JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::CharacterClassParserDelegate::atomBuiltInCharacterClass(&v289, v145, v146, a4, a5, a6, a7, a8);
              goto LABEL_114;
            case 'S':
              *((_DWORD *)a1 + 7) = v57 + 2;
              v145 = 1;
              goto LABEL_317;
            case 'W':
              *((_DWORD *)a1 + 7) = v57 + 2;
              v145 = 2;
LABEL_317:
              v146 = 1;
              goto LABEL_212;
            case 'b':
              *((_DWORD *)a1 + 7) = v57 + 2;
              v139 = 8;
              goto LABEL_125;
            case 'c':
              *((_DWORD *)a1 + 7) = v57 + 2;
              if ((_DWORD)v57 + 2 == v58)
              {
                if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                  goto LABEL_346;
                goto LABEL_320;
              }
              *((_DWORD *)a1 + 7) = v57 + 3;
              v221 = *((unsigned __int16 *)v59 + (v57 + 2));
              if ((v221 | 0x20u) - 97 <= 0x19)
                goto LABEL_409;
              if (*((unsigned __int8 *)a1 + 32) - 1 > 1)
              {
                if (v221 == 95 || (v221 - 48) <= 9)
                {
LABEL_409:
                  v139 = v221 & 0x1F;
LABEL_125:
                  JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::CharacterClassParserDelegate::atomPatternCharacter((uint64_t)&v289, (void *)v139, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_114:
                  if (*v10)
                    goto LABEL_54;
                  continue;
                }
LABEL_320:
                *((_DWORD *)a1 + 7) = v70;
                v139 = 92;
                goto LABEL_125;
              }
LABEL_459:
              v152 = 24;
LABEL_248:
              *v10 = v152;
LABEL_54:
              LOBYTE(v9) = 1;
LABEL_26:
              if (*v10)
                return;
              break;
            case 'd':
              *((_DWORD *)a1 + 7) = v57 + 2;
              v145 = 0;
              goto LABEL_221;
            case 'f':
              *((_DWORD *)a1 + 7) = v57 + 2;
              v139 = 12;
              goto LABEL_125;
            case 'k':
              *((_DWORD *)a1 + 7) = v57 + 2;
              if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                goto LABEL_346;
              JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::CharacterClassParserDelegate::atomPatternCharacter((uint64_t)&v289, (void *)0x6B, (uint64_t)a3, a4, a5, a6, a7, a8);
              *((_BYTE *)a1 + 49) = 1;
              goto LABEL_114;
            case 'n':
              *((_DWORD *)a1 + 7) = v57 + 2;
              v139 = 10;
              goto LABEL_125;
            case 'q':
              *((_DWORD *)a1 + 7) = v57 + 2;
LABEL_324:
              if ((JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ParseEscapeMode)1>((uint64_t)a1, v71) & 1) != 0)goto LABEL_114;
LABEL_407:
              v139 = v71;
              goto LABEL_125;
            case 'r':
              *((_DWORD *)a1 + 7) = v57 + 2;
              v139 = 13;
              goto LABEL_125;
            case 's':
              *((_DWORD *)a1 + 7) = v57 + 2;
              v145 = 1;
              goto LABEL_221;
            case 't':
              *((_DWORD *)a1 + 7) = v57 + 2;
              v139 = 9;
              goto LABEL_125;
            case 'u':
              v72 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::UnicodeParseContext)0>((uint64_t)a1);
              if (*((_BYTE *)a1 + 8))
                goto LABEL_54;
              if (v72 == -1)
                v60 = 117;
              else
                v60 = v72;
              switch(v292)
              {
                case 0:
                case 3:
                  goto LABEL_110;
                case 1:
                  goto LABEL_90;
                case 2:
                  goto LABEL_111;
                case 4:
                  goto LABEL_301;
                default:
                  goto LABEL_114;
              }
              goto LABEL_114;
            case 'v':
              *((_DWORD *)a1 + 7) = v57 + 2;
              v139 = 11;
              goto LABEL_125;
            case 'w':
              *((_DWORD *)a1 + 7) = v57 + 2;
              v145 = 2;
LABEL_221:
              v146 = 0;
              goto LABEL_212;
            case 'x':
              v74 = v57 + 2;
              *((_DWORD *)a1 + 7) = v57 + 2;
              if ((_DWORD)v57 + 2 != v58)
              {
                v75 = *((unsigned __int16 *)v59 + v74);
                if (v75 - 48 < 0xA || (v75 | 0x20) - 97 <= 5)
                {
                  v77 = v57 + 3;
                  *((_DWORD *)a1 + 7) = v57 + 3;
                  v78 = v75 >= 0x41 ? (v75 + 9) & 0xF : v75 - 48;
                  if (v77 != v58)
                  {
                    v79 = *((unsigned __int16 *)v59 + v77);
                    if (v79 - 48 < 0xA || (v79 | 0x20) - 97 < 6)
                    {
                      *((_DWORD *)a1 + 7) = v57 + 4;
                      if (v79 >= 0x41)
                        v80 = (v79 + 9) & 0xF;
                      else
                        v80 = v79 - 48;
                      v60 = v80 | (16 * v78);
                      switch(v292)
                      {
                        case 0:
                        case 3:
LABEL_110:
                          v292 = 1;
                          v293 = v60;
                          goto LABEL_114;
                        case 1:
LABEL_90:
                          JSC::Yarr::CharacterClassConstructor::putChar(*((_QWORD *)v289 + 13), (void *)v293, (uint64_t)a3, a4, a5, a6, a7, a8);
                          goto LABEL_82;
                        case 2:
LABEL_111:
                          v14 = v293;
                          if (v293 <= v60)
                          {
                            JSC::Yarr::CharacterClassConstructor::putRange(*((unint64_t **)v289 + 13), v293, v60);
                            goto LABEL_113;
                          }
                          v166 = v290;
                          v167 = 14;
                          goto LABEL_304;
                        case 4:
LABEL_301:
                          if (v291)
                          {
                            v166 = v290;
                            v167 = 15;
LABEL_304:
                            *v166 = v167;
                          }
                          else
                          {
                            JSC::Yarr::CharacterClassConstructor::putChar(*((_QWORD *)v289 + 13), (void *)v60, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_113:
                            v292 = 0;
                          }
                          break;
                        default:
                          goto LABEL_114;
                      }
                      goto LABEL_114;
                    }
                  }
                }
              }
              *((_DWORD *)a1 + 7) = v74;
              if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
                goto LABEL_346;
              v139 = 120;
              goto LABEL_125;
            default:
              if ((JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ParseEscapeMode)1>((uint64_t)a1, *((unsigned __int16 *)v59 + v70)) & 1) != 0)goto LABEL_114;
              v70 = *((unsigned int *)a1 + 7);
              v139 = *((unsigned __int16 *)a1[2] + v70);
LABEL_429:
              *((_DWORD *)a1 + 7) = v70 + 1;
              goto LABEL_125;
          }
          goto LABEL_2;
        }
      case '\\':
        v118 = (JSC::Yarr::YarrPatternConstructor *)*a1;
        v119 = (v12 + 1);
        *((_DWORD *)a1 + 7) = v119;
        if ((_DWORD)v119 == v11)
        {
          LOBYTE(v9) = 0;
          *v10 = 17;
          goto LABEL_26;
        }
        break;
      case ']':
        goto LABEL_253;
      case '^':
        *((_DWORD *)a1 + 7) = v12 + 1;
        JSC::Yarr::YarrPatternConstructor::assertionBOL((JSC::Yarr::YarrPatternConstructor *)*a1);
        goto LABEL_25;
      default:
        switch(*((_WORD *)v13 + v12))
        {
          case '$':
            *((_DWORD *)a1 + 7) = v12 + 1;
            JSC::Yarr::YarrPatternConstructor::assertionEOL((JSC::Yarr::YarrPatternConstructor *)(*a1)[1]);
            goto LABEL_25;
          case '%':
          case '&':
          case '\'':
          case ',':
          case '-':
            goto LABEL_47;
          case '(':
            *((_DWORD *)a1 + 7) = v12 + 1;
            v287 = 0;
            if ((_DWORD)v12 + 1 == v11 || *((_WORD *)v13 + (v12 + 1)) != 63)
            {
              v130 = (JSC::Yarr::YarrPatternConstructor *)*a1;
              LOBYTE(v289) = 0;
              LOBYTE(v290) = 0;
              JSC::Yarr::YarrPatternConstructor::atomParenthesesSubpatternBegin((uint64_t)v130, 1, v289, 0, a5, a6, a7, a8);
              v138 = &v289;
              goto LABEL_190;
            }
            *((_DWORD *)a1 + 7) = v12 + 2;
            if ((_DWORD)v12 + 2 == v11)
            {
              *v10 = 10;
              goto LABEL_25;
            }
            *((_DWORD *)a1 + 7) = v12 + 3;
            v35 = *((unsigned __int16 *)v13 + (v12 + 2));
            switch(v35)
            {
              case ':':
                JSC::Yarr::YarrPatternConstructor::atomParenthesesSubpatternBegin((uint64_t)*a1, 0, 0, 0, a5, a6, a7, a8);
                goto LABEL_35;
              case '=':
                JSC::Yarr::YarrPatternConstructor::atomParentheticalAssertionBegin(*a1, 0, 0);
                v36 = 1;
LABEL_198:
                v287 = 1;
                goto LABEL_36;
              case '!':
                v36 = 1;
                JSC::Yarr::YarrPatternConstructor::atomParentheticalAssertionBegin(*a1, 1, 0);
                goto LABEL_198;
            }
            if (v35 != 60)
            {
              *v10 = 10;
              goto LABEL_35;
            }
            JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeGroupName(&v294, (uint64_t)a1, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (*((_BYTE *)a1 + 8))
              goto LABEL_293;
            if (v295)
            {
              if (*((_BYTE *)a1 + 49))
              {
                v225 = 21;
                goto LABEL_427;
              }
              v242 = v294;
              if (v294)
                *(_DWORD *)v294 += 2;
              v286 = v242;
              JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::NamedCaptureGroups::add((uint64_t)&v289, (uint64_t)(a1 + 11), &v286, v133, v134, v135, v136, v137);
              v243 = v286;
              v286 = 0;
              if (v243)
              {
                if (*(_DWORD *)v243 == 2)
                {
                  WTF::StringImpl::~StringImpl(v243, v131, v132, v133, v134, v135, v136, v137);
                  WTF::fastFree(v272, v273, v274, v275, v276, v277, v278, v279);
                }
                else
                {
                  *(_DWORD *)v243 -= 2;
                }
              }
              if (v291)
              {
                v244 = (JSC::Yarr::YarrPatternConstructor *)*a1;
                LOBYTE(v284) = 0;
                v285 = 0;
                if (v295)
                {
                  v245 = v294;
                  if (v294)
                    *(_DWORD *)v294 += 2;
                  v284 = v245;
                  v246 = 1;
                  v285 = 1;
                }
                else
                {
                  v246 = 0;
                  v245 = v284;
                }
                JSC::Yarr::YarrPatternConstructor::atomParenthesesSubpatternBegin((uint64_t)v244, 1, v245, v246, v134, v135, v136, v137);
                std::optional<WTF::String>::~optional((uint64_t)&v284, v247, v248, v249, v250, v251, v252, v253);
LABEL_293:
                v138 = &v294;
LABEL_190:
                std::optional<WTF::String>::~optional((uint64_t)v138, v131, v132, v133, v134, v135, v136, v137);
LABEL_35:
                v36 = 0;
                ++*((_DWORD *)a1 + 10);
                goto LABEL_36;
              }
              v225 = 12;
LABEL_427:
              *v10 = v225;
              goto LABEL_293;
            }
            v232 = *((unsigned int *)a1 + 7);
            if ((_DWORD)v232 == *((_DWORD *)a1 + 6))
              goto LABEL_510;
            v233 = *((unsigned __int16 *)a1[2] + v232);
            if (v233 == 61)
            {
              v234 = 0;
            }
            else
            {
              if (v233 != 33)
              {
LABEL_510:
                v225 = 11;
                goto LABEL_427;
              }
              v234 = 1;
            }
            *((_DWORD *)a1 + 7) = v232 + 1;
            JSC::Yarr::YarrPatternConstructor::atomParentheticalAssertionBegin(*a1, v234, 1);
            v36 = 2;
            v287 = 2;
            std::optional<WTF::String>::~optional((uint64_t)&v294, v235, v236, v237, v238, v239, v240, v241);
LABEL_36:
            v37 = *((unsigned int *)a1 + 17);
            if ((_DWORD)v37 == *((_DWORD *)a1 + 16))
            {
              WTF::Vector<JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ParenthesesType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ParenthesesType&>(v281, (unint64_t)&v287);
            }
            else
            {
              *((_BYTE *)a1[7] + v37) = v36;
              *((_DWORD *)a1 + 17) = v37 + 1;
            }
            v38 = *((unsigned int *)a1 + 33);
            if (!(_DWORD)v38)
              goto LABEL_524;
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v294, &a1[15][v38 - 1]);
            v288 = 0;
            v44 = *((unsigned int *)a1 + 27);
            if ((_DWORD)v44 == *((_DWORD *)a1 + 26))
            {
              v122 = (uint64_t *)WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v282, v44 + 1, (unint64_t)&v288, v39, v40, v41, v42, v43);
              v125 = *((unsigned int *)a1 + 27);
              v126 = a1[12];
              v126[v125] = 0;
              v127 = *v122;
              *v122 = 0;
              v126[v125] = v127;
              v128 = v288;
              ++*((_DWORD *)a1 + 27);
              if (v128)
              {
                v188 = *((unsigned int *)v128 - 1);
                if ((_DWORD)v188)
                {
                  v189 = v128;
                  do
                  {
                    v190 = *v189;
                    if (*v189 != (WTF::StringImpl *)-1)
                    {
                      *v189 = 0;
                      if (v190)
                      {
                        if (*(_DWORD *)v190 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v190, v123, v124, v39, v40, v41, v42, v43);
                          WTF::fastFree(v191, v192, v193, v194, v195, v196, v197, v198);
                        }
                        else
                        {
                          *(_DWORD *)v190 -= 2;
                        }
                      }
                    }
                    ++v189;
                    --v188;
                  }
                  while (v188);
                }
                WTF::fastFree((unint64_t)(v128 - 2), v123, v124, v39, v40, v41, v42, v43);
              }
            }
            else
            {
              a1[12][v44] = 0;
              ++*((_DWORD *)a1 + 27);
            }
            v45 = *((unsigned int *)a1 + 33);
            if ((_DWORD)v45 == *((_DWORD *)a1 + 32))
            {
              v47 = (uint64_t *)WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v283, v45 + 1, (unint64_t)&v294, v39, v40, v41, v42, v43);
              v46 = &a1[15][*((unsigned int *)a1 + 33)];
            }
            else
            {
              v46 = (uint64_t *)(*v283 + 8 * v45);
              v47 = (uint64_t *)&v294;
            }
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v46, v47);
            ++*((_DWORD *)a1 + 33);
            v49 = v294;
            if (v294)
            {
              v177 = *((unsigned int *)v294 - 1);
              if ((_DWORD)v177)
              {
                v178 = (WTF::StringImpl **)v294;
                do
                {
                  v179 = *v178;
                  if (*v178 != (WTF::StringImpl *)-1)
                  {
                    *v178 = 0;
                    if (v179)
                    {
                      if (*(_DWORD *)v179 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v179, v48, (uint64_t)a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v180, v181, v182, v183, v184, v185, v186, v187);
                      }
                      else
                      {
                        *(_DWORD *)v179 -= 2;
                      }
                    }
                  }
                  ++v178;
                  --v177;
                }
                while (v177);
              }
              WTF::fastFree((unint64_t)v49 - 16, v48, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
            goto LABEL_25;
          case ')':
            *((_DWORD *)a1 + 7) = v12 + 1;
            if (!*((_DWORD *)a1 + 17))
            {
              v157 = 9;
              goto LABEL_268;
            }
            JSC::Yarr::YarrPatternConstructor::atomParenthesesEnd((JSC::Yarr::YarrPatternConstructor *)*a1);
            v90 = *((unsigned int *)a1 + 27);
            if (!(_DWORD)v90)
            {
              __break(0xC471u);
              JUMPOUT(0x198F03794);
            }
            v91 = *((unsigned int *)a1 + 33);
            if (!(_DWORD)v91)
            {
              __break(0xC471u);
              JUMPOUT(0x198F0379CLL);
            }
            v92 = *(_QWORD *)(*v283 + 8 * v91 - 8);
            if (!v92)
            {
              v93 = 0;
              v94 = 0;
LABEL_135:
              v95 = (WTF::StringImpl **)(v92 + 8 * v94);
              goto LABEL_136;
            }
            v94 = *(unsigned int *)(v92 - 4);
            v95 = (WTF::StringImpl **)(v92 + 8 * v94);
            if (!*(_DWORD *)(v92 - 12))
            {
              v93 = (WTF::StringImpl **)(v92 + 8 * v94);
              goto LABEL_135;
            }
            v93 = *(WTF::StringImpl ***)(*v283 + 8 * v91 - 8);
            if ((_DWORD)v94)
            {
              v143 = 8 * v94;
              v93 = *(WTF::StringImpl ***)(*v283 + 8 * v91 - 8);
              while ((unint64_t)*v93 + 1 <= 1)
              {
                ++v93;
                v143 -= 8;
                if (!v143)
                {
                  v93 = v95;
                  break;
                }
              }
            }
LABEL_136:
            if (v92)
              v96 = (WTF::StringImpl **)(v92 + 8 * *(unsigned int *)(v92 - 4));
            else
              v96 = 0;
            if (v96 != v93)
            {
              v254 = &a1[12][v90 - 1];
              do
              {
                WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v254, v93, a3, a4, a5, a6, a7, a8, (uint64_t)&v289);
                v255 = v93 + 1;
                v93 = v95;
                if (v255 != v95)
                {
                  v93 = v255;
                  while ((unint64_t)*v93 + 1 <= 1)
                  {
                    if (++v93 == v95)
                    {
                      v93 = v95;
                      break;
                    }
                  }
                }
              }
              while (v93 != v96);
              v91 = *((unsigned int *)a1 + 33);
            }
            if (v91 <= 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198F037A4);
            }
            v97 = *((unsigned int *)a1 + 27);
            if (!(_DWORD)v97)
            {
              __break(0xC471u);
              JUMPOUT(0x198F037ACLL);
            }
            v98 = *(_QWORD *)(*v282 + 8 * v97 - 8);
            if (!v98)
            {
              v99 = 0;
              v100 = 0;
LABEL_143:
              v101 = (WTF::StringImpl **)(v98 + 8 * v100);
              goto LABEL_144;
            }
            v100 = *(unsigned int *)(v98 - 4);
            v101 = (WTF::StringImpl **)(v98 + 8 * v100);
            if (!*(_DWORD *)(v98 - 12))
            {
              v99 = (WTF::StringImpl **)(v98 + 8 * v100);
              goto LABEL_143;
            }
            v99 = *(WTF::StringImpl ***)(*v282 + 8 * v97 - 8);
            if ((_DWORD)v100)
            {
              v144 = 8 * v100;
              v99 = *(WTF::StringImpl ***)(*v282 + 8 * v97 - 8);
              while ((unint64_t)*v99 + 1 <= 1)
              {
                ++v99;
                v144 -= 8;
                if (!v144)
                {
                  v99 = v101;
                  break;
                }
              }
            }
LABEL_144:
            if (v98)
              v102 = (WTF::StringImpl **)(v98 + 8 * *(unsigned int *)(v98 - 4));
            else
              v102 = 0;
            if (v102 != v99)
            {
              v256 = &a1[15][v91 - 2];
              do
              {
                WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v256, v99, a3, a4, a5, a6, a7, a8, (uint64_t)&v289);
                v257 = v99 + 1;
                v99 = v101;
                if (v257 != v101)
                {
                  v99 = v257;
                  while ((unint64_t)*v99 + 1 <= 1)
                  {
                    if (++v99 == v101)
                    {
                      v99 = v101;
                      break;
                    }
                  }
                }
              }
              while (v99 != v102);
              v97 = *((unsigned int *)a1 + 27);
            }
            if (!v97)
            {
              __break(0xC471u);
              JUMPOUT(0x198F037B4);
            }
            v103 = v97 - 1;
            v104 = *(_QWORD *)(*v282 + 8 * (v97 - 1));
            if (v104)
            {
              v199 = *(unsigned int *)(v104 - 4);
              if ((_DWORD)v199)
              {
                v200 = *(WTF::StringImpl ***)(*v282 + 8 * (v97 - 1));
                do
                {
                  v201 = *v200;
                  if (*v200 != (WTF::StringImpl *)-1)
                  {
                    *v200 = 0;
                    if (v201)
                    {
                      if (*(_DWORD *)v201 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v201, v89, (uint64_t)a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
                      }
                      else
                      {
                        *(_DWORD *)v201 -= 2;
                      }
                    }
                  }
                  ++v200;
                  --v199;
                }
                while (v199);
              }
              WTF::fastFree(v104 - 16, v89, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
            *((_DWORD *)a1 + 27) = v103;
            v105 = *((unsigned int *)a1 + 33);
            if (!(_DWORD)v105)
            {
              __break(0xC471u);
              JUMPOUT(0x198F037BCLL);
            }
            v106 = v105 - 1;
            v107 = *(_QWORD *)(*v283 + 8 * (v105 - 1));
            if (v107)
            {
              v210 = *(unsigned int *)(v107 - 4);
              if ((_DWORD)v210)
              {
                v211 = *(WTF::StringImpl ***)(*v283 + 8 * v106);
                do
                {
                  v212 = *v211;
                  if (*v211 != (WTF::StringImpl *)-1)
                  {
                    *v211 = 0;
                    if (v212)
                    {
                      if (*(_DWORD *)v212 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v212, v89, (uint64_t)a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v213, v214, v215, v216, v217, v218, v219, v220);
                      }
                      else
                      {
                        *(_DWORD *)v212 -= 2;
                      }
                    }
                  }
                  ++v211;
                  --v210;
                }
                while (v210);
              }
              WTF::fastFree(v107 - 16, v89, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
            *((_DWORD *)a1 + 33) = v106;
            v108 = *((unsigned int *)a1 + 17);
            if (!(_DWORD)v108)
            {
              __break(0xC471u);
              JUMPOUT(0x198F037C4);
            }
            v9 = *((unsigned __int8 *)a1[7] + v108 - 1);
            *((_DWORD *)a1 + 17) = v108 - 1;
            if (!v9)
              goto LABEL_54;
            if (v9 == 2)
              goto LABEL_26;
            if (!*((_BYTE *)a1 + 32))
              goto LABEL_54;
            break;
          case '*':
            *((_DWORD *)a1 + 7) = v12 + 1;
            v109 = v9;
            v110 = (uint64_t)a1;
            v111 = 0;
            goto LABEL_195;
          case '+':
            *((_DWORD *)a1 + 7) = v12 + 1;
            v109 = v9;
            v110 = (uint64_t)a1;
            v111 = 1;
LABEL_195:
            v112 = -1;
            goto LABEL_174;
          case '.':
            *((_DWORD *)a1 + 7) = v12 + 1;
            v140 = (JSC::Yarr::YarrPatternConstructor *)*a1;
            v141 = 3;
LABEL_204:
            v142 = 0;
LABEL_205:
            JSC::Yarr::YarrPatternConstructor::atomBuiltInCharacterClass((uint64_t)v140, v141, v142);
            goto LABEL_54;
          default:
            if ((_DWORD)v14 != 63)
              goto LABEL_47;
            *((_DWORD *)a1 + 7) = v12 + 1;
            v109 = v9;
            v110 = (uint64_t)a1;
            v111 = 0;
            v112 = 1;
            goto LABEL_174;
        }
        goto LABEL_25;
    }
    v120 = *((unsigned __int16 *)v13 + v119);
    switch(*((_WORD *)v13 + v119))
    {
      case '-':
        if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
          goto LABEL_346;
        LODWORD(v14) = 45;
        goto LABEL_233;
      case '0':
        *((_DWORD *)a1 + 7) = v12 + 2;
        if ((_DWORD)v12 + 2 == v11 || *((unsigned __int16 *)v13 + (v12 + 2)) - 48 >= 0xA)
        {
          v52 = v118;
          LODWORD(v14) = 0;
          goto LABEL_53;
        }
        if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
          goto LABEL_337;
        v161 = (uint64_t)a1;
        v162 = 2;
        goto LABEL_281;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        v151 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::consumeNumber((uint64_t)a1);
        if (v151 <= *((_DWORD *)a1 + 9))
        {
          v156 = *((_DWORD *)a1 + 11);
          if (v156 <= v151)
            v156 = v151;
          *((_DWORD *)a1 + 11) = v156;
          JSC::Yarr::YarrPatternConstructor::atomBackReference(v118, v151);
          goto LABEL_54;
        }
        *((_DWORD *)a1 + 7) = v119;
        if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
        {
          v152 = 20;
          goto LABEL_248;
        }
        LODWORD(v14) = *((unsigned __int16 *)a1[2] + v119);
        if (v14 > 0x37)
        {
          v147 = v12 + 2;
LABEL_234:
          *((_DWORD *)a1 + 7) = v147;
        }
        else
        {
          v161 = (uint64_t)a1;
          v162 = 3;
LABEL_281:
          v163 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::consumeOctal(v161, v162);
LABEL_282:
          LODWORD(v14) = v163;
        }
        goto LABEL_181;
      case 'B':
        *((_DWORD *)a1 + 7) = v12 + 2;
        v149 = (JSC::Yarr::YarrPatternConstructor *)*((_QWORD *)v118 + 1);
        v150 = 1;
        goto LABEL_238;
      case 'D':
        *((_DWORD *)a1 + 7) = v12 + 2;
        LOBYTE(v9) = 1;
        v153 = (uint64_t)v118;
        v154 = 0;
        goto LABEL_343;
      case 'P':
      case 'p':
        v164 = v12 + 2;
        *((_DWORD *)a1 + 7) = v12 + 2;
        if (!*((_BYTE *)a1 + 32))
          goto LABEL_352;
        if (v164 == v11 || *((_WORD *)v13 + v164) != 123)
        {
LABEL_330:
          v152 = 25;
          goto LABEL_248;
        }
        *((_DWORD *)a1 + 7) = v12 + 3;
        v165 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeUnicodePropertyExpression((uint64_t)a1, v14, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (!HIDWORD(v165))
          goto LABEL_54;
        v141 = v165;
        if (v120 == 80 && (v165 - 329) <= 6)
        {
LABEL_290:
          v152 = 30;
          goto LABEL_248;
        }
        v142 = v120 == 80;
        v140 = v118;
        goto LABEL_205;
      case 'S':
        *((_DWORD *)a1 + 7) = v12 + 2;
        LOBYTE(v9) = 1;
        v153 = (uint64_t)v118;
        v154 = 1;
        goto LABEL_343;
      case 'W':
        *((_DWORD *)a1 + 7) = v12 + 2;
        LOBYTE(v9) = 1;
        v153 = (uint64_t)v118;
        v154 = 2;
LABEL_343:
        v155 = 1;
        goto LABEL_252;
      case 'b':
        *((_DWORD *)a1 + 7) = v12 + 2;
        v149 = (JSC::Yarr::YarrPatternConstructor *)*((_QWORD *)v118 + 1);
        v150 = 0;
LABEL_238:
        JSC::Yarr::YarrPatternConstructor::assertionWordBoundary(v149, v150);
        goto LABEL_25;
      case 'c':
        *((_DWORD *)a1 + 7) = v12 + 2;
        if ((_DWORD)v12 + 2 == v11)
        {
          if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
            goto LABEL_346;
        }
        else
        {
          *((_DWORD *)a1 + 7) = v12 + 3;
          v222 = *((unsigned __int16 *)v13 + (v12 + 2));
          if ((v222 | 0x20u) - 97 <= 0x19)
          {
            LODWORD(v14) = v222 & 0x1F;
LABEL_181:
            v52 = v118;
            goto LABEL_53;
          }
          if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
            goto LABEL_459;
        }
        *((_DWORD *)a1 + 7) = v119;
        v52 = v118;
        LODWORD(v14) = 92;
        goto LABEL_53;
      case 'd':
        *((_DWORD *)a1 + 7) = v12 + 2;
        v140 = v118;
        v141 = 0;
        goto LABEL_204;
      case 'f':
        *((_DWORD *)a1 + 7) = v12 + 2;
        v52 = v118;
        LODWORD(v14) = 12;
        goto LABEL_53;
      case 'k':
        v169 = v12 + 2;
        *((_DWORD *)a1 + 7) = v12 + 2;
        if ((_DWORD)v12 + 2 == v11 || *((_WORD *)v13 + v169) != 60)
          goto LABEL_506;
        *((_DWORD *)a1 + 7) = v12 + 3;
        JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeGroupName(&v294, (uint64_t)a1, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*((_BYTE *)a1 + 8))
          goto LABEL_350;
        if (!v295)
          goto LABEL_505;
        v229 = v294;
        if (v294)
        {
          *(_DWORD *)v294 += 2;
          v284 = v229;
          v230 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::NamedCaptureGroups::contains((WTF *)a1[11], &v284, v171);
          v231 = v230;
          if (*(_DWORD *)v229 == 2)
          {
            WTF::StringImpl::~StringImpl(v229, v170, (uint64_t)v171, v172, v173, v174, v175, v176);
            WTF::fastFree(v258, v259, v260, v261, v262, v263, v264, v265);
            if (v231)
              goto LABEL_456;
          }
          else
          {
            *(_DWORD *)v229 -= 2;
            if ((v230 & 1) != 0)
              goto LABEL_456;
          }
        }
        else
        {
          v284 = 0;
          if ((JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::NamedCaptureGroups::contains((WTF *)a1[11], &v284, v171) & 1) != 0)
          {
LABEL_456:
            if (!v295)
              goto LABEL_523;
            JSC::Yarr::YarrPatternConstructor::atomNamedBackReference(v118, &v294, v171, v172, v173, v174, v175, v176);
            goto LABEL_350;
          }
        }
        if (!*((_BYTE *)a1 + 48))
        {
LABEL_505:
          std::optional<WTF::String>::~optional((uint64_t)&v294, v170, (uint64_t)v171, v172, v173, v174, v175, v176);
LABEL_506:
          *((_DWORD *)a1 + 7) = v169;
          if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
          {
LABEL_346:
            v152 = 22;
            goto LABEL_248;
          }
          JSC::Yarr::YarrPatternConstructor::atomPatternCharacter((uint64_t *)v118, 0x6Bu);
          LOBYTE(v9) = 1;
          *((_BYTE *)a1 + 49) = 1;
          goto LABEL_26;
        }
        if (!v295
          || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)a1 + 18, &v294, v171, v172, v173, v174, v175, v176, (uint64_t)&v289), !v295))
        {
LABEL_523:
          std::__throw_bad_optional_access[abi:sn180100]();
LABEL_524:
          __break(0xC471u);
          JUMPOUT(0x198F037D0);
        }
        JSC::Yarr::YarrPatternConstructor::atomNamedForwardReference(v118, &v294, v266, v267, v268, v269, v270, v271);
LABEL_350:
        std::optional<WTF::String>::~optional((uint64_t)&v294, v170, (uint64_t)v171, v172, v173, v174, v175, v176);
        goto LABEL_54;
      case 'n':
        *((_DWORD *)a1 + 7) = v12 + 2;
        v52 = v118;
        LODWORD(v14) = 10;
        goto LABEL_53;
      case 'q':
        *((_DWORD *)a1 + 7) = v12 + 2;
LABEL_352:
        if ((JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ParseEscapeMode)0>((uint64_t)a1, v120) & 1) != 0)goto LABEL_54;
        v52 = v118;
        LODWORD(v14) = v120;
        goto LABEL_53;
      case 'r':
        *((_DWORD *)a1 + 7) = v12 + 2;
        v52 = v118;
        LODWORD(v14) = 13;
        goto LABEL_53;
      case 's':
        *((_DWORD *)a1 + 7) = v12 + 2;
        LOBYTE(v9) = 1;
        v153 = (uint64_t)v118;
        v154 = 1;
        v155 = 0;
LABEL_252:
        JSC::Yarr::YarrPatternConstructor::atomBuiltInCharacterClass(v153, v154, v155);
        goto LABEL_26;
      case 't':
        *((_DWORD *)a1 + 7) = v12 + 2;
        v52 = v118;
        LODWORD(v14) = 9;
        goto LABEL_53;
      case 'u':
        v121 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::UnicodeParseContext)0>((uint64_t)a1);
        if (*((_BYTE *)a1 + 8))
          goto LABEL_54;
        if (v121 == -1)
          LODWORD(v14) = 117;
        else
          LODWORD(v14) = v121;
        goto LABEL_181;
      case 'v':
        *((_DWORD *)a1 + 7) = v12 + 2;
        v52 = v118;
        LODWORD(v14) = 11;
        goto LABEL_53;
      case 'w':
        *((_DWORD *)a1 + 7) = v12 + 2;
        v140 = v118;
        v141 = 2;
        goto LABEL_204;
      case 'x':
        *((_DWORD *)a1 + 7) = v12 + 2;
        v163 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeHex((uint64_t)a1, 2);
        if (v163 != -1)
          goto LABEL_282;
        if (*((unsigned __int8 *)a1 + 32) - 1 <= 1)
          goto LABEL_346;
        v52 = v118;
        LODWORD(v14) = 120;
        goto LABEL_53;
      default:
        if ((JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ParseEscapeMode)0>((uint64_t)a1, *((unsigned __int16 *)v13 + v119)) & 1) != 0)goto LABEL_54;
        v119 = *((unsigned int *)a1 + 7);
        LODWORD(v14) = *((unsigned __int16 *)a1[2] + v119);
LABEL_233:
        v147 = v119 + 1;
        goto LABEL_234;
    }
  }
  if ((_DWORD)v14 == 124)
  {
    *((_DWORD *)a1 + 7) = v12 + 1;
    v15 = (JSC::Yarr::YarrPatternConstructor *)*a1;
    v16 = (*a1)[1];
    v17 = *(_QWORD *)(v16 + 16);
    v18 = *(_DWORD *)(**a1 + 4);
    if (!*(_QWORD *)(v17 + 16))
      *(_DWORD *)(v16 + 32) = v18;
    JSC::Yarr::PatternDisjunction::addNewAlternative(v17, v18, *((_BYTE *)v15 + 181));
    *((_QWORD *)v15 + 1) = v20;
    v21 = *((unsigned int *)a1 + 27);
    if (!(_DWORD)v21)
    {
      __break(0xC471u);
      JUMPOUT(0x198F0377CLL);
    }
    v22 = *((unsigned int *)a1 + 33);
    if (!(_DWORD)v22)
    {
      __break(0xC471u);
      JUMPOUT(0x198F03784);
    }
    v23 = *(_QWORD *)(*v283 + 8 * v22 - 8);
    if (v23)
    {
      v25 = *(unsigned int *)(v23 - 4);
      v26 = (WTF::StringImpl **)(v23 + 8 * v25);
      if (*(_DWORD *)(v23 - 12))
      {
        v24 = *(WTF::StringImpl ***)(*v283 + 8 * v22 - 8);
        if ((_DWORD)v25)
        {
          v113 = 8 * v25;
          v24 = *(WTF::StringImpl ***)(*v283 + 8 * v22 - 8);
          while ((unint64_t)*v24 + 1 <= 1)
          {
            ++v24;
            v113 -= 8;
            if (!v113)
            {
              v24 = v26;
              break;
            }
          }
        }
LABEL_12:
        if (v23)
          v27 = (WTF::StringImpl **)(v23 + 8 * *(unsigned int *)(v23 - 4));
        else
          v27 = 0;
        if (v27 != v24)
        {
          v223 = &a1[12][v21 - 1];
          do
          {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v223, v24, a3, a4, a5, a6, a7, a8, (uint64_t)&v289);
            v224 = v24 + 1;
            v24 = v26;
            if (v224 != v26)
            {
              v24 = v224;
              while ((unint64_t)*v24 + 1 <= 1)
              {
                if (++v24 == v26)
                {
                  v24 = v26;
                  break;
                }
              }
            }
          }
          while (v24 != v27);
          v22 = *((unsigned int *)a1 + 33);
        }
        if (!v22)
        {
          __break(0xC471u);
          JUMPOUT(0x198F0378CLL);
        }
        v28 = *(WTF::StringImpl ***)(*v283 + 8 * (v22 - 1));
        if (v28)
        {
          *(_QWORD *)(*v283 + 8 * (v22 - 1)) = 0;
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v28, v19, (uint64_t)a3, a4, a5, a6, a7, a8);
          v22 = *((unsigned int *)a1 + 33);
        }
        if (v22 >= 2)
        {
          v29 = *v283 + 8 * v22;
          v30 = *(_QWORD *)(v29 - 16);
          if (v30)
          {
            v32 = *(unsigned int *)(v30 - 4);
            v33 = (WTF::StringImpl **)(v30 + 8 * v32);
            if (*(_DWORD *)(v30 - 12))
            {
              v31 = *(WTF::StringImpl ***)(v29 - 16);
              if ((_DWORD)v32)
              {
                v129 = 8 * v32;
                v31 = *(WTF::StringImpl ***)(v29 - 16);
                while ((unint64_t)*v31 + 1 <= 1)
                {
                  ++v31;
                  v129 -= 8;
                  if (!v129)
                  {
                    v31 = v33;
                    break;
                  }
                }
              }
LABEL_22:
              if (v30)
                v34 = (WTF::StringImpl **)(v30 + 8 * *(unsigned int *)(v30 - 4));
              else
                v34 = 0;
              if (v34 != v31)
              {
                v280 = (uint64_t *)(v29 - 8);
                do
                {
                  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v280, v31, a3, a4, a5, a6, a7, a8, (uint64_t)&v289);
                  v227 = v31 + 1;
                  v31 = v33;
                  if (v227 != v33)
                  {
                    v31 = v227;
                    while ((unint64_t)*v31 + 1 <= 1)
                    {
                      if (++v31 == v33)
                      {
                        v31 = v33;
                        break;
                      }
                    }
                  }
                  LOBYTE(v9) = 0;
                }
                while (v31 != v34);
                goto LABEL_26;
              }
              goto LABEL_25;
            }
            v31 = (WTF::StringImpl **)(v30 + 8 * v32);
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v33 = (WTF::StringImpl **)(v30 + 8 * v32);
          goto LABEL_22;
        }
LABEL_25:
        LOBYTE(v9) = 0;
        goto LABEL_26;
      }
      v24 = (WTF::StringImpl **)(v23 + 8 * v25);
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
    v26 = (WTF::StringImpl **)(v23 + 8 * v25);
    goto LABEL_12;
  }
  if ((_DWORD)v14 != 123)
  {
    if ((_DWORD)v14 != 125)
    {
LABEL_47:
      v50 = *((unsigned __int8 *)a1 + 32);
      v51 = v12 + 1;
      goto LABEL_48;
    }
LABEL_253:
    if (*((unsigned __int8 *)a1 + 32) - 1 >= 2)
    {
      v52 = (JSC::Yarr::YarrPatternConstructor *)*a1;
      *((_DWORD *)a1 + 7) = v12 + 1;
      goto LABEL_53;
    }
    v157 = 8;
    goto LABEL_268;
  }
  v51 = v12 + 1;
  *((_DWORD *)a1 + 7) = v12 + 1;
  if ((_DWORD)v12 + 1 == v11 || *((unsigned __int16 *)v13 + v51) - 48 > 9)
    goto LABEL_191;
  v114 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::consumeNumber((uint64_t)a1);
  v11 = *((_DWORD *)a1 + 6);
  v115 = *((unsigned int *)a1 + 7);
  if ((_DWORD)v115 != v11)
  {
    v116 = v114;
    v117 = a1[2];
    if (*((_WORD *)v117 + v115) == 44)
    {
      LODWORD(v115) = v115 + 1;
      *((_DWORD *)a1 + 7) = v115;
      if ((_DWORD)v115 == v11)
        goto LABEL_191;
      if (*((unsigned __int16 *)v117 + v115) - 48 > 9)
      {
        v112 = -1;
      }
      else
      {
        v112 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::consumeNumber((uint64_t)a1);
        v11 = *((_DWORD *)a1 + 6);
        LODWORD(v115) = *((_DWORD *)a1 + 7);
      }
    }
    else
    {
      v112 = v114;
    }
    if ((_DWORD)v115 == v11 || *((_WORD *)a1[2] + v115) != 125)
      goto LABEL_191;
    *((_DWORD *)a1 + 7) = v115 + 1;
    if (v116 > v112)
    {
      v157 = 2;
      goto LABEL_268;
    }
    v109 = v9;
    v110 = (uint64_t)a1;
    v111 = v116;
LABEL_174:
    JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::parseQuantifier(v110, v109, v111, v112, a5, a6, a7, a8);
    goto LABEL_25;
  }
  v11 = *((_DWORD *)a1 + 7);
LABEL_191:
  v50 = *((unsigned __int8 *)a1 + 32);
  if ((v50 - 1) >= 2)
  {
    v13 = a1[2];
    LODWORD(v14) = *((unsigned __int16 *)v13 + v12);
LABEL_48:
    v52 = (JSC::Yarr::YarrPatternConstructor *)*a1;
    *((_DWORD *)a1 + 7) = v51;
    if (v51 != v11 && (v14 & 0xFC00) == 0xD800 && (v50 - 3) >= 0xFFFFFFFE)
    {
      *((_DWORD *)a1 + 7) = v12 + 2;
      v148 = *((unsigned __int16 *)v13 + v51);
      if ((v148 & 0xFC00) == 0xDC00)
        LODWORD(v14) = ((_DWORD)v14 << 10) - 56613888 + v148;
      else
        *((_DWORD *)a1 + 7) = v51;
    }
LABEL_53:
    JSC::Yarr::YarrPatternConstructor::atomPatternCharacter((uint64_t *)v52, v14);
    goto LABEL_54;
  }
  v157 = 5;
LABEL_268:
  *v10 = v157;
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::handleIllegalReferences(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_DWORD *)(a1 + 40);
  v2 = *(_DWORD *)(a1 + 44);
  if (v2 > v3)
  {
    if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
    {
      v11 = 20;
LABEL_13:
      *(_BYTE *)(a1 + 8) = v11;
      return;
    }
    *(_DWORD *)(a1 + 36) = v3;
  }
  if (*(_BYTE *)(a1 + 49))
  {
    v12 = *(_QWORD *)(a1 + 88);
    if (v12)
    {
      if (*(_DWORD *)(v12 - 12))
      {
LABEL_12:
        v11 = 21;
        goto LABEL_13;
      }
    }
  }
  if (JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::containsIllegalNamedForwardReference(a1))
  {
    if (*(unsigned __int8 *)(a1 + 32) - 1 >= 2)
    {
      v13 = *(_QWORD *)(a1 + 88);
      if (!v13 || !*(_DWORD *)(v13 - 12))
      {
        *(_BYTE *)(a1 + 48) = 0;
        goto LABEL_17;
      }
    }
    goto LABEL_12;
  }
  if (v2 > v3)
  {
LABEL_17:
    JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::resetForReparsing(a1, v4, v5, v6, v7, v8, v9, v10);
    JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::parseTokens((_QWORD **)a1, v14, v15, v16, v17, v18, v19, v20);
  }
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::parseClassSet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  JSC::Yarr::YarrPatternConstructor *v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  char *v22;
  char v23;
  __int16 v24;
  JSC::Yarr::YarrPatternConstructor *v25;
  unsigned int v26;
  JSC::Yarr::CharacterClassConstructor *v27;
  JSC::Yarr::YarrPatternConstructor *v28;
  char v29;
  char v30;
  unsigned int v31;
  char v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v36;
  char v37;
  unsigned __int8 v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  __int16 v52;
  char v53;
  int v54;
  int v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  void *v77;
  void *v78;
  int v79;
  unsigned int v80;
  void *v82;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v100;
  unsigned __int8 v101;
  unsigned int v102;
  int v103;
  unsigned __int8 v104;
  int v105;
  unsigned int v106;
  int v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  unsigned int v112;
  BOOL v113;
  int v114;
  unsigned int v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  void *v120;
  int v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned __int8 v126;
  unsigned int v127;
  unsigned __int8 v128;
  int v129;
  char v130;
  int v131;
  int v132;
  char v133;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  char v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  WTF *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  JSC::Yarr::YarrPatternConstructor *v156;
  _BYTE *v157;
  uint64_t v158;
  unsigned int v159;
  WTF *v160;
  uint64_t v161;
  JSC::Yarr::YarrPatternConstructor *v162;
  unsigned __int8 v163;
  char *v164;
  __int128 v165;
  __int128 v166;
  int v167;

  v3 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = v4 + 1;
  v6 = *(JSC::Yarr::YarrPatternConstructor **)a1;
  v7 = (char *)(a1 + 8);
  v156 = *(JSC::Yarr::YarrPatternConstructor **)a1;
  v157 = (_BYTE *)(a1 + 8);
  v160 = 0;
  v161 = 0;
  v158 = 0;
  v159 = 0;
  if (v4 + 1 == v5 || *(_WORD *)(v3 + 2 * (v4 + 1)) != 94)
  {
    v8 = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 28) = v4 + 2;
    v8 = 1;
  }
  BYTE6(v158) = v8;
  *((_BYTE *)v6 + 153) = v8;
  v9 = 83;
  v10 = 87;
  v11 = 100;
  v12 = 13;
  v13 = 115;
  v14 = 9;
  while (1)
  {
    v15 = *(_DWORD *)(a1 + 24);
    v16 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v16 == v15)
    {
LABEL_396:
      v148 = 13;
      goto LABEL_398;
    }
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(unsigned __int16 *)(v17 + 2 * v16);
    if (v18 <= 0x5A)
      break;
    if (v18 == 91)
    {
      *(_DWORD *)(a1 + 28) = v16 + 1;
      if ((_DWORD)v16 + 1 == v15 || *(_WORD *)(v17 + 2 * (v16 + 1)) != 94)
      {
        v30 = 0;
      }
      else
      {
        *(_DWORD *)(a1 + 28) = v16 + 2;
        v30 = 1;
      }
      JSC::Yarr::YarrPatternConstructor::atomCharacterClassPushNested(v156, (void *)a2, 83, 87, 100, 13, 115, 9);
      LOWORD(v162) = WORD2(v158);
      BYTE2(v162) = BYTE6(v158);
      if (HIDWORD(v161) == (_DWORD)v161)
      {
        v50 = WTF::Vector<JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::NestingState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v160, HIDWORD(v161) + 1, (unint64_t)&v162);
        v51 = (char *)v160 + 3 * HIDWORD(v161);
        v52 = *(_WORD *)v50;
        v53 = *(_BYTE *)(v50 + 2);
      }
      else
      {
        v51 = (char *)v160 + 3 * HIDWORD(v161);
        v52 = (__int16)v162;
        v53 = BYTE2(v162);
      }
      v51[2] = v53;
      *(_WORD *)v51 = v52;
      v9 = 83;
      v10 = 87;
      v11 = 100;
      v12 = 13;
      v13 = 115;
      v14 = 9;
      ++HIDWORD(v161);
      WORD2(v158) = 0;
      BYTE6(v158) = v30;
      goto LABEL_360;
    }
    if (v18 == 92)
    {
      switch((int)v158)
      {
        case 0:
        case 7:
          goto LABEL_37;
        case 1:
          if (BYTE4(v158) > 1u)
            goto LABEL_405;
          JSC::Yarr::CharacterClassConstructor::putChar(*((_QWORD *)v156 + 13), (void *)v159, 83, 87, 100, 13, 115, 9);
          v14 = 9;
          v13 = 115;
          v12 = 13;
          v11 = 100;
          v10 = 87;
          v9 = 83;
          LODWORD(v158) = 0;
          v17 = *(_QWORD *)(a1 + 16);
          v15 = *(_DWORD *)(a1 + 24);
          LODWORD(v16) = *(_DWORD *)(a1 + 28);
LABEL_37:
          HIBYTE(v158) = 1;
          v31 = v16 + 1;
          *(_DWORD *)(a1 + 28) = v16 + 1;
          if ((_DWORD)v16 + 1 == v15)
          {
            v32 = 0;
            *v7 = 17;
            goto LABEL_346;
          }
          break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          if (BYTE4(v158) <= 1u)
            goto LABEL_37;
          goto LABEL_405;
        default:
          goto LABEL_405;
      }
      v36 = *(unsigned __int16 *)(v17 + 2 * v31);
      switch(*(_WORD *)(v17 + 2 * v31))
      {
        case '-':
          goto LABEL_284;
        case '0':
          *(_DWORD *)(a1 + 28) = v16 + 2;
          if ((_DWORD)v16 + 2 == v15
            || (v121 = *(unsigned __int16 *)(v17 + 2 * (v16 + 2)),
                a2 = (v121 - 48),
                a2 >= 0xA))
          {
            v63 = 0;
            goto LABEL_343;
          }
          if (*(unsigned __int8 *)(a1 + 32) - 1 < 2)
          {
LABEL_65:
            v37 = 23;
            goto LABEL_320;
          }
          if ((v121 & 0xFFF8) == 0x30)
          {
            *(_DWORD *)(a1 + 28) = v16 + 3;
            if ((_DWORD)v16 + 3 != v15)
            {
              v122 = *(unsigned __int16 *)(v17 + 2 * (v16 + 3));
              if ((v122 & 0xFFF8) == 0x30)
              {
                *(_DWORD *)(a1 + 28) = v16 + 4;
                LODWORD(a2) = v122 + 8 * a2 - 48;
              }
            }
          }
          else
          {
            LODWORD(a2) = 0;
          }
          goto LABEL_286;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
            goto LABEL_65;
          if (v36 > 0x37)
            goto LABEL_284;
          v54 = 0;
          v36 = 0;
          do
          {
            if (!((_DWORD)v16 - v15 + 1 + v54))
              break;
            v55 = *(unsigned __int16 *)(v17 + 2 * (v16 + v54 + 1));
            if ((v55 & 0xFFF8) != 0x30)
              break;
            *(_DWORD *)(a1 + 28) = v16 + v54 + 2;
            v36 = v55 + 8 * v36 - 48;
            if (v54 == 2)
              break;
            ++v54;
          }
          while (v36 < 0x20);
          goto LABEL_285;
        case 'B':
          *(_DWORD *)(a1 + 28) = v16 + 2;
          if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
            goto LABEL_319;
          v63 = 66;
          goto LABEL_343;
        case 'D':
          *(_DWORD *)(a1 + 28) = v16 + 2;
          v32 = 1;
          v64 = 0;
          goto LABEL_314;
        case 'P':
        case 'p':
          v56 = v16 + 2;
          *(_DWORD *)(a1 + 28) = v16 + 2;
          if (!*(_BYTE *)(a1 + 32))
            goto LABEL_285;
          if (v56 == v15 || *(_WORD *)(v17 + 2 * v56) != 123)
          {
            v130 = 25;
            goto LABEL_334;
          }
          *(_DWORD *)(a1 + 28) = v16 + 3;
          v57 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeUnicodePropertyExpression(a1, a2, 83, 87, 100, 13, 115, 9);
          if (HIDWORD(v57))
          {
            a2 = v57;
            if (v36 == 80 && (v57 - 329) <= 6)
              *v7 = 30;
            else
              JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ClassSetParserDelegate::atomBuiltInCharacterClass((uint64_t)&v156, v57, v36 == 80, v58, v59, v60, v61, v62);
          }
          goto LABEL_287;
        case 'S':
          *(_DWORD *)(a1 + 28) = v16 + 2;
          v32 = 1;
          v64 = 1;
          goto LABEL_314;
        case 'W':
          *(_DWORD *)(a1 + 28) = v16 + 2;
          v32 = 1;
          v64 = 2;
LABEL_314:
          v118 = 1;
          goto LABEL_315;
        case 'b':
          *(_DWORD *)(a1 + 28) = v16 + 2;
          v63 = 8;
          goto LABEL_343;
        case 'c':
          *(_DWORD *)(a1 + 28) = v16 + 2;
          if ((_DWORD)v16 + 2 == v15)
          {
            if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
            {
LABEL_319:
              v37 = 22;
LABEL_320:
              *v7 = v37;
              goto LABEL_345;
            }
          }
          else
          {
            *(_DWORD *)(a1 + 28) = v16 + 3;
            v132 = *(unsigned __int16 *)(v17 + 2 * (v16 + 2));
            if ((v132 | 0x20u) - 97 <= 0x19)
              goto LABEL_337;
            if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
            {
              v37 = 24;
              goto LABEL_320;
            }
            if (v132 == 95 || (v132 - 48) <= 9)
            {
LABEL_337:
              v63 = v132 & 0x1F;
LABEL_343:
              JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ClassSetParserDelegate::atomPatternCharacter((uint64_t)&v156, v63, 83, 87, 100, 13, 115, 9);
LABEL_344:
              v14 = 9;
              v13 = 115;
              v12 = 13;
              v11 = 100;
              v10 = 87;
              v9 = 83;
LABEL_345:
              v32 = 1;
              goto LABEL_346;
            }
          }
          *(_DWORD *)(a1 + 28) = v31;
          v63 = 92;
          goto LABEL_343;
        case 'd':
          *(_DWORD *)(a1 + 28) = v16 + 2;
          v65 = 0;
          goto LABEL_300;
        case 'f':
          *(_DWORD *)(a1 + 28) = v16 + 2;
          v63 = 12;
          goto LABEL_343;
        case 'k':
          *(_DWORD *)(a1 + 28) = v16 + 2;
          if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
            goto LABEL_319;
          JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ClassSetParserDelegate::atomPatternCharacter((uint64_t)&v156, 0x6Bu, 83, 87, 100, 13, 115, 9);
          v14 = 9;
          v13 = 115;
          v12 = 13;
          v11 = 100;
          v10 = 87;
          v9 = 83;
          v32 = 1;
          *(_BYTE *)(a1 + 49) = 1;
          goto LABEL_346;
        case 'n':
          *(_DWORD *)(a1 + 28) = v16 + 2;
          v63 = 10;
          goto LABEL_343;
        case 'q':
          *(_DWORD *)(a1 + 28) = v16 + 2;
          if ((_DWORD)v16 + 2 == v15 || *(_WORD *)(v17 + 2 * (v16 + 2)) != 123)
          {
            *(_BYTE *)(a1 + 8) = 25;
            if (*(unsigned __int8 *)(a1 + 32) - 1 > 1
            {
LABEL_285:
              LODWORD(a2) = v36;
LABEL_286:
              JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ClassSetParserDelegate::atomPatternCharacter((uint64_t)&v156, a2, v9, v10, v11, v12, v13, v14);
            }
            else
            {
LABEL_333:
              v130 = 22;
LABEL_334:
              *v7 = v130;
            }
LABEL_287:
            v32 = 1;
LABEL_288:
            v9 = 83;
            v10 = 87;
            v11 = 100;
            v12 = 13;
            v13 = 115;
            v14 = 9;
            goto LABEL_346;
          }
          *(_DWORD *)(a1 + 28) = v16 + 3;
          v162 = *(JSC::Yarr::YarrPatternConstructor **)a1;
          v163 = 0;
          v164 = v7;
          v165 = 0u;
          v166 = 0u;
          while (2)
          {
            v67 = *(_DWORD *)(a1 + 24);
            v66 = *(unsigned int *)(a1 + 28);
            if ((_DWORD)v66 == v67)
            {
              v135 = 0;
              v143 = 16;
              goto LABEL_374;
            }
            v68 = *(_QWORD *)(a1 + 16);
            v69 = *(unsigned __int16 *)(v68 + 2 * v66);
            if (v69 > 0x7B)
            {
              if (v69 == 124)
              {
                *(_DWORD *)(a1 + 28) = v66 + 1;
                JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassStringDisjunctionParserDelegate::newAlternative((uint64_t)&v162, (void *)a2, 83, 87, 100, 13, 115, 9);
                v14 = 9;
                v13 = 115;
                v12 = 13;
                v11 = 100;
                v10 = 87;
                v9 = 83;
                goto LABEL_245;
              }
              if (v69 == 125)
              {
                *(_DWORD *)(a1 + 28) = v66 + 1;
                JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassStringDisjunctionParserDelegate::newAlternative((uint64_t)&v162, (void *)a2, 83, 87, 100, 13, 115, 9);
                JSC::Yarr::CharacterClassConstructor::atomClassStringDisjunction(*((_QWORD *)v162 + 13), (uint64_t)&v166, v136, v137, v138, v139, v140, v141);
                v14 = 9;
                v13 = 115;
                v12 = 13;
                v11 = 100;
                v10 = 87;
                v9 = 83;
                v135 = v163;
                goto LABEL_375;
              }
            }
            else
            {
              if (v69 == 92)
              {
                v70 = v66 + 1;
                *(_DWORD *)(a1 + 28) = v66 + 1;
                if ((_DWORD)v66 + 1 == v67)
                {
                  v135 = 0;
                  v143 = 17;
                  goto LABEL_374;
                }
                v71 = *(unsigned __int16 *)(v68 + 2 * v70);
                switch(*(_WORD *)(v68 + 2 * v70))
                {
                  case '-':
                    goto LABEL_156;
                  case '0':
                    *(_DWORD *)(a1 + 28) = v66 + 2;
                    if ((_DWORD)v66 + 2 != v67)
                    {
                      v85 = *(unsigned __int16 *)(v68 + 2 * (v66 + 2));
                      v86 = v85 - 48;
                      if ((v85 - 48) < 0xA)
                      {
                        if (*(unsigned __int8 *)(a1 + 32) - 1 >= 2)
                        {
                          if ((v85 & 0xFFF8) == 0x30)
                          {
                            *(_DWORD *)(a1 + 28) = v66 + 3;
                            if ((_DWORD)v66 + 3 != v67)
                            {
                              v87 = *(unsigned __int16 *)(v68 + 2 * (v66 + 3));
                              if ((v87 & 0xFFF8) == 0x30)
                              {
                                *(_DWORD *)(a1 + 28) = v66 + 4;
                                v86 = v87 + 8 * v86 - 48;
                              }
                            }
                          }
                          else
                          {
                            v86 = 0;
                          }
                          goto LABEL_222;
                        }
LABEL_372:
                        v135 = 0;
                        v143 = 23;
LABEL_374:
                        *v7 = v143;
                        goto LABEL_375;
                      }
                    }
                    v167 = 0;
                    if (HIDWORD(v165) == DWORD2(v165))
                    {
LABEL_229:
                      WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v165, (unint64_t)&v167);
                      v14 = 9;
                      v13 = 115;
                      v12 = 13;
                      v11 = 100;
                      v10 = 87;
                      v9 = 83;
                      v84 = HIDWORD(v165);
                    }
                    else
                    {
                      v84 = HIDWORD(v165) + 1;
                      *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = 0;
LABEL_159:
                      HIDWORD(v165) = v84;
                    }
                    if (v84 >= 2)
                      goto LABEL_244;
                    goto LABEL_245;
                  case '1':
                  case '2':
                  case '3':
                  case '4':
                  case '5':
                  case '6':
                  case '7':
                  case '8':
                  case '9':
                    if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
                      goto LABEL_372;
                    if (v71 > 0x37)
                    {
LABEL_156:
                      *(_DWORD *)(a1 + 28) = v66 + 2;
                    }
                    else
                    {
                      v72 = 0;
                      v71 = 0;
                      do
                      {
                        if (!((_DWORD)v66 - v67 + 1 + v72))
                          break;
                        v73 = *(unsigned __int16 *)(v68 + 2 * (v66 + v72 + 1));
                        if ((v73 & 0xFFF8) != 0x30)
                          break;
                        *(_DWORD *)(a1 + 28) = v66 + v72 + 2;
                        v71 = v73 + 8 * v71 - 48;
                        if (v72 == 2)
                          break;
                        ++v72;
                      }
                      while (v71 < 0x20);
                    }
                    v167 = v71;
                    if (HIDWORD(v165) == DWORD2(v165))
                      goto LABEL_229;
                    v84 = HIDWORD(v165) + 1;
                    *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = v71;
                    goto LABEL_159;
                  case 'B':
                    *(_DWORD *)(a1 + 28) = v66 + 2;
                    if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
                      goto LABEL_373;
                    v167 = 66;
                    if (HIDWORD(v165) == DWORD2(v165))
                      goto LABEL_229;
                    v84 = HIDWORD(v165) + 1;
                    *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = 66;
                    goto LABEL_159;
                  case 'D':
                    *(_DWORD *)(a1 + 28) = v66 + 2;
                    v167 = 68;
                    if (HIDWORD(v165) == DWORD2(v165))
                      goto LABEL_229;
                    v84 = HIDWORD(v165) + 1;
                    *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = 68;
                    goto LABEL_159;
                  case 'P':
                  case 'p':
                  case 'q':
                    *(_DWORD *)(a1 + 28) = v66 + 2;
                    if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
                    {
                      v14 = 9;
                      v13 = 115;
                      v12 = 13;
                      v11 = 100;
                      v10 = 87;
                      v9 = 83;
                      if (!v78)
                        goto LABEL_373;
                    }
                    v167 = v71;
                    v79 = HIDWORD(v165);
                    if (HIDWORD(v165) == DWORD2(v165))
                    {
                      WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v165, (unint64_t)&v167);
                      v14 = 9;
                      v13 = 115;
                      v12 = 13;
                      v11 = 100;
                      v10 = 87;
                      v9 = 83;
                      v80 = HIDWORD(v165);
                    }
                    else
                    {
                      v80 = HIDWORD(v165) + 1;
                      *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = v71;
                      HIDWORD(v165) = v79 + 1;
                    }
                    if (v80 >= 2)
                      v163 = 1;
                    goto LABEL_245;
                  case 'S':
                    *(_DWORD *)(a1 + 28) = v66 + 2;
                    v167 = 83;
                    if (HIDWORD(v165) == DWORD2(v165))
                      goto LABEL_229;
                    v84 = HIDWORD(v165) + 1;
                    *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = 83;
                    goto LABEL_159;
                  case 'W':
                    *(_DWORD *)(a1 + 28) = v66 + 2;
                    v167 = 87;
                    if (HIDWORD(v165) == DWORD2(v165))
                      goto LABEL_229;
                    v84 = HIDWORD(v165) + 1;
                    *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = 87;
                    goto LABEL_159;
                  case 'b':
                    *(_DWORD *)(a1 + 28) = v66 + 2;
                    v167 = 8;
                    if (HIDWORD(v165) == DWORD2(v165))
                      goto LABEL_229;
                    v84 = HIDWORD(v165) + 1;
                    *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = 8;
                    goto LABEL_159;
                  case 'c':
                    *(_DWORD *)(a1 + 28) = v66 + 2;
                    if ((_DWORD)v66 + 2 == v67)
                    {
                      if (*(unsigned __int8 *)(a1 + 32) - 1 < 2)
                      {
LABEL_373:
                        v135 = 0;
                        v143 = 22;
                        goto LABEL_374;
                      }
                      v89 = DWORD2(v165);
                      v88 = HIDWORD(v165);
                      goto LABEL_181;
                    }
                    *(_DWORD *)(a1 + 28) = v66 + 3;
                    v107 = *(unsigned __int16 *)(v68 + 2 * (v66 + 2));
                    if ((v107 | 0x20u) - 97 <= 0x19)
                    {
                      v167 = v107 & 0x1F;
                      v108 = HIDWORD(v165);
                      if (HIDWORD(v165) == DWORD2(v165))
                      {
                        WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v165, (unint64_t)&v167);
                        v109 = HIDWORD(v165);
                      }
                      else
                      {
                        v109 = HIDWORD(v165) + 1;
                        *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = v107 & 0x1F;
                        HIDWORD(v165) = v108 + 1;
                      }
                      v113 = v109 >= 2;
LABEL_264:
                      v9 = 83;
                      v10 = 87;
                      v11 = 100;
                      v12 = 13;
                      v13 = 115;
                      v14 = 9;
                      goto LABEL_242;
                    }
                    if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
                    {
                      v135 = 0;
                      v143 = 24;
                      goto LABEL_374;
                    }
                    v89 = DWORD2(v165);
                    v88 = HIDWORD(v165);
                    if (v107 != 95 && (v107 - 48) > 9)
                    {
LABEL_181:
                      *(_DWORD *)(a1 + 28) = v70;
                      v167 = 92;
                      if (v88 == v89)
                      {
                        WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v165, (unint64_t)&v167);
                        v14 = 9;
                        v13 = 115;
                        v12 = 13;
                        v11 = 100;
                        v10 = 87;
                        v9 = 83;
                        v90 = HIDWORD(v165);
                      }
                      else
                      {
                        v90 = v88 + 1;
                        *(_DWORD *)(v165 + 4 * v88) = 92;
                        HIDWORD(v165) = v88 + 1;
                      }
                      if (v90 >= 2)
                        goto LABEL_244;
LABEL_245:
                      if (*v7)
                      {
                        v135 = 0;
                        goto LABEL_375;
                      }
                      continue;
                    }
                    v114 = v107 & 0x1F;
                    v167 = v114;
                    if (HIDWORD(v165) == DWORD2(v165))
                    {
                      WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v165, (unint64_t)&v167);
                      v115 = HIDWORD(v165);
                    }
                    else
                    {
                      v115 = HIDWORD(v165) + 1;
                      *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = v114;
                      HIDWORD(v165) = v88 + 1;
                    }
                    if (v115 >= 2)
                      goto LABEL_267;
                    goto LABEL_268;
                  case 'd':
                    *(_DWORD *)(a1 + 28) = v66 + 2;
                    v167 = 100;
                    if (HIDWORD(v165) == DWORD2(v165))
                      goto LABEL_229;
                    v84 = HIDWORD(v165) + 1;
                    *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = 100;
                    goto LABEL_159;
                  case 'f':
                    *(_DWORD *)(a1 + 28) = v66 + 2;
                    v167 = 12;
                    if (HIDWORD(v165) == DWORD2(v165))
                      goto LABEL_229;
                    v84 = HIDWORD(v165) + 1;
                    *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = 12;
                    goto LABEL_159;
                  case 'k':
                    *(_DWORD *)(a1 + 28) = v66 + 2;
                    if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
                      goto LABEL_373;
                    v167 = 107;
                    v91 = HIDWORD(v165);
                    if (HIDWORD(v165) == DWORD2(v165))
                    {
                      WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v165, (unint64_t)&v167);
                      v14 = 9;
                      v13 = 115;
                      v12 = 13;
                      v11 = 100;
                      v10 = 87;
                      v9 = 83;
                      v92 = HIDWORD(v165);
                    }
                    else
                    {
                      v92 = HIDWORD(v165) + 1;
                      *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = 107;
                      HIDWORD(v165) = v91 + 1;
                    }
                    if (v92 >= 2)
                      v163 = 1;
                    *(_BYTE *)(a1 + 49) = 1;
                    goto LABEL_245;
                  case 'n':
                    *(_DWORD *)(a1 + 28) = v66 + 2;
                    v167 = 10;
                    if (HIDWORD(v165) == DWORD2(v165))
                      goto LABEL_229;
                    v84 = HIDWORD(v165) + 1;
                    *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = 10;
                    goto LABEL_159;
                  case 'r':
                    *(_DWORD *)(a1 + 28) = v66 + 2;
                    v167 = 13;
                    if (HIDWORD(v165) == DWORD2(v165))
                      goto LABEL_229;
                    v84 = HIDWORD(v165) + 1;
                    *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = 13;
                    goto LABEL_159;
                  case 's':
                    *(_DWORD *)(a1 + 28) = v66 + 2;
                    v167 = 115;
                    if (HIDWORD(v165) == DWORD2(v165))
                      goto LABEL_229;
                    v84 = HIDWORD(v165) + 1;
                    *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = 115;
                    goto LABEL_159;
                  case 't':
                    *(_DWORD *)(a1 + 28) = v66 + 2;
                    v167 = 9;
                    if (HIDWORD(v165) == DWORD2(v165))
                      goto LABEL_229;
                    v84 = HIDWORD(v165) + 1;
                    *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = 9;
                    goto LABEL_159;
                  case 'u':
                    v93 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::UnicodeParseContext)0>(a1);
                    if (*(_BYTE *)(a1 + 8))
                    {
                      v135 = 0;
                      goto LABEL_371;
                    }
                    if (v93 == -1)
                      v94 = 117;
                    else
                      v94 = v93;
                    v167 = v94;
                    v95 = HIDWORD(v165);
                    if (HIDWORD(v165) == DWORD2(v165))
                    {
                      WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v165, (unint64_t)&v167);
                      v96 = HIDWORD(v165);
                    }
                    else
                    {
                      v96 = HIDWORD(v165) + 1;
                      *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = v94;
                      HIDWORD(v165) = v95 + 1;
                    }
                    v113 = v96 >= 2;
                    goto LABEL_264;
                  case 'v':
                    *(_DWORD *)(a1 + 28) = v66 + 2;
                    v167 = 11;
                    if (HIDWORD(v165) == DWORD2(v165))
                      goto LABEL_229;
                    v84 = HIDWORD(v165) + 1;
                    *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = 11;
                    goto LABEL_159;
                  case 'w':
                    *(_DWORD *)(a1 + 28) = v66 + 2;
                    v167 = 119;
                    if (HIDWORD(v165) == DWORD2(v165))
                      goto LABEL_229;
                    v84 = HIDWORD(v165) + 1;
                    *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = 119;
                    goto LABEL_159;
                  case 'x':
                    v97 = v66 + 2;
                    *(_DWORD *)(a1 + 28) = v66 + 2;
                    if ((_DWORD)v66 + 2 != v67)
                    {
                      v98 = *(unsigned __int16 *)(v68 + 2 * v97);
                      if (v98 - 48 < 0xA || (v98 | 0x20) - 97 <= 5)
                      {
                        v100 = v66 + 3;
                        *(_DWORD *)(a1 + 28) = v66 + 3;
                        v101 = v98 >= 0x41 ? (v98 + 9) & 0xF : v98 - 48;
                        if (v100 != v67)
                        {
                          v102 = *(unsigned __int16 *)(v68 + 2 * v100);
                          if (v102 - 48 < 0xA || (v102 | 0x20) - 97 < 6)
                          {
                            v103 = 16 * v101;
                            *(_DWORD *)(a1 + 28) = v66 + 4;
                            v104 = v102 - 48;
                            if (v102 >= 0x41)
                              v104 = (v102 + 9) & 0xF;
                            v86 = v104 | v103;
LABEL_222:
                            v167 = v86;
                            v105 = HIDWORD(v165);
                            if (HIDWORD(v165) == DWORD2(v165))
                            {
                              WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v165, (unint64_t)&v167);
                              v14 = 9;
                              v13 = 115;
                              v12 = 13;
                              v11 = 100;
                              v10 = 87;
                              v9 = 83;
                              v106 = HIDWORD(v165);
                            }
                            else
                            {
                              v106 = HIDWORD(v165) + 1;
                              *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = v86;
                              HIDWORD(v165) = v105 + 1;
                            }
                            if (v106 < 2)
                              goto LABEL_245;
LABEL_244:
                            v163 = 1;
                            goto LABEL_245;
                          }
                        }
                      }
                    }
                    *(_DWORD *)(a1 + 28) = v97;
                    if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
                    {
                      v167 = 120;
                      v116 = HIDWORD(v165);
                      if (HIDWORD(v165) == DWORD2(v165))
                      {
                        WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v165, (unint64_t)&v167);
                        v117 = HIDWORD(v165);
                      }
                      else
                      {
                        v117 = HIDWORD(v165) + 1;
                        *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = 120;
                        HIDWORD(v165) = v116 + 1;
                      }
                      if (v117 >= 2)
LABEL_267:
                        v163 = 1;
LABEL_268:
                      v9 = 83;
                      v10 = 87;
                      v11 = 100;
                      v12 = 13;
                      v13 = 115;
                      v14 = 9;
                      goto LABEL_245;
                    }
                    v135 = 0;
                    v142 = 22;
LABEL_370:
                    *v7 = v142;
LABEL_371:
                    v9 = 83;
                    v10 = 87;
                    v11 = 100;
                    v12 = 13;
                    v13 = 115;
                    v14 = 9;
LABEL_375:
                    v144 = v166;
                    if (HIDWORD(v166))
                    {
                      v146 = 16 * HIDWORD(v166);
                      do
                      {
                        v147 = *(_QWORD *)v144;
                        if (*(_QWORD *)v144)
                        {
                          *(_QWORD *)v144 = 0;
                          *(_DWORD *)(v144 + 8) = 0;
                          WTF::fastFree(v147, (void *)a2, v9, v10, v11, v12, v13, v14);
                        }
                        v144 += 16;
                        v146 -= 16;
                      }
                      while (v146);
                      v144 = v166;
                      v9 = 83;
                      v10 = 87;
                      v11 = 100;
                      v12 = 13;
                      v13 = 115;
                      v14 = 9;
                      if ((_QWORD)v166)
                        goto LABEL_394;
                    }
                    else
                    {
                      if (!(_QWORD)v166)
                        goto LABEL_377;
LABEL_394:
                      *(_QWORD *)&v166 = 0;
                      DWORD2(v166) = 0;
                      WTF::fastFree(v144, (void *)a2, 83, 87, 100, 13, 115, 9);
                      v14 = 9;
                      v13 = 115;
                      v12 = 13;
                      v11 = 100;
                      v10 = 87;
                      v9 = 83;
                    }
LABEL_377:
                    v145 = v165;
                    if ((_QWORD)v165)
                    {
                      *(_QWORD *)&v165 = 0;
                      DWORD2(v165) = 0;
                      WTF::fastFree(v145, (void *)a2, 83, 87, 100, 13, 115, 9);
                      v14 = 9;
                      v13 = 115;
                      v12 = 13;
                      v11 = 100;
                      v10 = 87;
                      v9 = 83;
                    }
                    if (v135)
                      v32 = 4;
                    else
                      v32 = 3;
LABEL_346:
                    if (BYTE4(v158) >= 2u)
                    {
                      if (BYTE4(v158) != 2)
                        goto LABEL_356;
                      v133 = v32 == 4 && BYTE5(v158) != 0;
                    }
                    else
                    {
                      v133 = BYTE5(v158) | (v32 == 4);
                    }
                    BYTE5(v158) = v133;
LABEL_356:
                    if ((v32 - 3) <= 1u)
                    {
                      if ((_DWORD)v158 == 1)
                      {
                        JSC::Yarr::CharacterClassConstructor::putChar(*((_QWORD *)v156 + 13), (void *)v159, 83, 87, 100, 13, 115, 9);
                        v14 = 9;
                        v13 = 115;
                        v12 = 13;
                        v11 = 100;
                        v10 = 87;
                        v9 = 83;
                      }
                      LODWORD(v158) = 6;
                    }
                    goto LABEL_360;
                  default:
                    if (v71 > 0x7F || *(unsigned __int8 *)(a1 + 32) - 1 > 1)
                      goto LABEL_156;
                    v14 = 9;
                    v13 = 115;
                    v12 = 13;
                    v11 = 100;
                    v10 = 87;
                    v9 = 83;
                    if (v71 && v82 != 0)
                      goto LABEL_156;
                    goto LABEL_373;
                }
              }
              if (v69 == 45)
              {
                v135 = 0;
                *(_DWORD *)(a1 + 28) = v66 + 1;
                *(_BYTE *)(a1 + 8) = 31;
                goto LABEL_375;
              }
            }
            break;
          }
          v74 = *(unsigned __int8 *)(a1 + 32) - 3;
          v75 = v66 + 1;
          *(_DWORD *)(a1 + 28) = v66 + 1;
          if ((v69 & 0xFC00) == 0xD800 && v74 >= 0xFFFFFFFE)
          {
            if (v75 != v67)
            {
              *(_DWORD *)(a1 + 28) = v66 + 2;
              v110 = *(unsigned __int16 *)(v68 + 2 * v75);
              if ((v110 & 0xFC00) == 0xDC00)
                v69 = v110 + (v69 << 10) - 56613888;
              else
                *(_DWORD *)(a1 + 28) = v75;
            }
          }
          else
          {
            if (!v69)
            {
              v135 = 0;
              *v7 = 31;
              goto LABEL_375;
            }
            if (v69 <= 0x7F)
            {
              if (memchr("()[]{}/|)", v69, 0xAuLL))
              {
                v135 = 0;
                v142 = 31;
                goto LABEL_370;
              }
              v9 = 83;
              v10 = 87;
              v11 = 100;
              v12 = 13;
              v13 = 115;
              v14 = 9;
              if (v75 != v67 && v69 == *(unsigned __int16 *)(v68 + 2 * v75))
              {
                v14 = 9;
                v13 = 115;
                v12 = 13;
                v11 = 100;
                v10 = 87;
                v9 = 83;
                if (v77)
                {
                  v135 = 0;
                  v143 = 29;
                  goto LABEL_374;
                }
              }
            }
          }
          v167 = v69;
          v111 = HIDWORD(v165);
          if (HIDWORD(v165) == DWORD2(v165))
          {
            WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v165, (unint64_t)&v167);
            v14 = 9;
            v13 = 115;
            v12 = 13;
            v11 = 100;
            v10 = 87;
            v9 = 83;
            v112 = HIDWORD(v165);
          }
          else
          {
            v112 = HIDWORD(v165) + 1;
            *(_DWORD *)(v165 + 4 * HIDWORD(v165)) = v69;
            HIDWORD(v165) = v111 + 1;
          }
          v113 = v112 >= 2;
LABEL_242:
          if (!v113)
            goto LABEL_245;
          goto LABEL_244;
        case 'r':
          *(_DWORD *)(a1 + 28) = v16 + 2;
          v63 = 13;
          goto LABEL_343;
        case 's':
          *(_DWORD *)(a1 + 28) = v16 + 2;
          v32 = 1;
          v64 = 1;
          v118 = 0;
LABEL_315:
          JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ClassSetParserDelegate::atomBuiltInCharacterClass((uint64_t)&v156, v64, v118, 87, 100, 13, 115, 9);
          v14 = 9;
          v13 = 115;
          v12 = 13;
          v11 = 100;
          v10 = 87;
          v9 = 83;
          goto LABEL_346;
        case 't':
          *(_DWORD *)(a1 + 28) = v16 + 2;
          v63 = 9;
          goto LABEL_343;
        case 'u':
          v129 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::UnicodeParseContext)0>(a1);
          if (*(_BYTE *)(a1 + 8))
            goto LABEL_287;
          if (v129 == -1)
            LODWORD(a2) = 117;
          else
            LODWORD(a2) = v129;
          goto LABEL_286;
        case 'v':
          *(_DWORD *)(a1 + 28) = v16 + 2;
          v63 = 11;
          goto LABEL_343;
        case 'w':
          *(_DWORD *)(a1 + 28) = v16 + 2;
          v65 = 2;
LABEL_300:
          JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ClassSetParserDelegate::atomBuiltInCharacterClass((uint64_t)&v156, v65, 0, 87, 100, 13, 115, 9);
          goto LABEL_344;
        case 'x':
          v123 = v16 + 2;
          *(_DWORD *)(a1 + 28) = v16 + 2;
          if ((_DWORD)v16 + 2 == v15
            || (v124 = *(unsigned __int16 *)(v17 + 2 * v123), v124 - 48 >= 0xA) && (v124 | 0x20) - 97 > 5
            || ((v125 = v16 + 3, *(_DWORD *)(a1 + 28) = v16 + 3, v124 >= 0x41)
              ? (v126 = (v124 + 9) & 0xF)
              : (v126 = v124 - 48),
                v125 == v15
             || (v127 = *(unsigned __int16 *)(v17 + 2 * v125), v127 - 48 >= 0xA) && (v127 | 0x20) - 97 >= 6))
          {
            *(_DWORD *)(a1 + 28) = v123;
            if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
              JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ClassSetParserDelegate::atomPatternCharacter((uint64_t)&v156, 0x78u, 83, 87, 100, 13, 115, 9);
            else
              *v7 = 22;
            v32 = 1;
            goto LABEL_288;
          }
          *(_DWORD *)(a1 + 28) = v16 + 4;
          v128 = v127 - 48;
          if (v127 >= 0x41)
            v128 = (v127 + 9) & 0xF;
          LODWORD(a2) = v128 | (16 * v126);
          goto LABEL_286;
        default:
          if (v36 <= 0x7F && *(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          {
            if (!v36 || !v120)
              goto LABEL_333;
          }
LABEL_284:
          *(_DWORD *)(a1 + 28) = v16 + 2;
          goto LABEL_285;
      }
    }
    if (v18 != 93)
      goto LABEL_49;
    *(_DWORD *)(a1 + 28) = v16 + 1;
    v19 = v158;
    if ((_DWORD)v158 == 1)
    {
      JSC::Yarr::CharacterClassConstructor::putChar(*((_QWORD *)v156 + 13), (void *)v159, 83, 87, 100, 13, 115, 9);
      v14 = 9;
      v13 = 115;
      v12 = 13;
      v11 = 100;
      v10 = 87;
      v9 = 83;
      v19 = 0;
      LODWORD(v158) = 0;
    }
    v20 = BYTE6(v158);
    if (BYTE6(v158) && BYTE5(v158))
      *v157 = 30;
    if (!HIDWORD(v161))
    {
      if (v19 == 7)
      {
        *v157 = 31;
      }
      else if (v19 == 2)
      {
        JSC::Yarr::CharacterClassConstructor::putChar(*((_QWORD *)v156 + 13), (void *)v159, 83, 87, 100, 13, 115, 9);
        JSC::Yarr::CharacterClassConstructor::putChar(*((_QWORD *)v156 + 13), (void *)0x2D, v150, v151, v152, v153, v154, v155);
        v20 = BYTE6(v158);
      }
      if (v20 && BYTE5(v158))
        *v157 = 30;
      JSC::Yarr::YarrPatternConstructor::atomCharacterClassEnd(v156);
      goto LABEL_399;
    }
    v21 = BYTE5(v158);
    v22 = (char *)v160 + 3 * HIDWORD(v161);
    v23 = *(v22 - 1);
    v24 = *(_WORD *)(v22 - 3);
    --HIDWORD(v161);
    WORD2(v158) = v24 & 0x1FF;
    BYTE6(v158) = v23 & 1;
    v25 = v156;
    v26 = *((_DWORD *)v156 + 31);
    if (v26)
    {
      if (v26 == 1)
        v27 = (JSC::Yarr::YarrPatternConstructor *)((char *)v156 + 16);
      else
        v27 = (JSC::Yarr::CharacterClassConstructor *)(*((_QWORD *)v156 + 14) + 88 * v26 - 176);
      JSC::Yarr::CharacterClassConstructor::performSetOpWith(v27, *((JSC::Yarr::CharacterClassConstructor **)v156 + 13), 83, 87, 100, 13, 115, 9);
      v46 = *((unsigned int *)v25 + 31);
      if (!(_DWORD)v46)
      {
        __break(0xC471u);
        JUMPOUT(0x198F057D4);
      }
      v47 = v46 - 1;
      JSC::Yarr::CharacterClassConstructor::~CharacterClassConstructor((JSC::Yarr::CharacterClassConstructor *)(*((_QWORD *)v25 + 14) + 88 * (v46 - 1)), v39, v40, v41, v42, v43, v44, v45);
      *((_DWORD *)v25 + 31) = v47;
      *((_QWORD *)v25 + 13) = v27;
      v38 = BYTE4(v158);
      v9 = 83;
      v10 = 87;
      v11 = 100;
      v12 = 13;
      v13 = 115;
      v14 = 9;
    }
    else
    {
      v38 = v24;
    }
    LODWORD(v158) = 6;
    if (v38 < 2u)
    {
      v48 = BYTE5(v158) | v21;
LABEL_79:
      BYTE5(v158) = v48;
      goto LABEL_360;
    }
    if (v38 == 2)
    {
      if (v21)
        v49 = BYTE5(v158) == 0;
      else
        v49 = 1;
      v48 = !v49;
      goto LABEL_79;
    }
LABEL_360:
    if (*v7)
      goto LABEL_399;
  }
  if (v18 == 38)
  {
    *(_DWORD *)(a1 + 28) = v16 + 1;
    if ((_DWORD)v16 + 1 == v15)
      goto LABEL_396;
    if (*(_WORD *)(v17 + 2 * (v16 + 1)) == 38)
    {
      *(_DWORD *)(a1 + 28) = v16 + 2;
      if ((_DWORD)v16 + 2 == v15 || *(_WORD *)(v17 + 2 * (v16 + 2)) == 38)
      {
LABEL_397:
        v148 = 31;
        goto LABEL_398;
      }
      if (!(_DWORD)v158 || (BYTE4(v158) | 2) != 2)
        goto LABEL_62;
      v28 = v156;
      if ((_DWORD)v158 == 1)
      {
        JSC::Yarr::CharacterClassConstructor::putChar(*((_QWORD *)v156 + 13), (void *)v159, 83, 87, 100, 13, 115, 9);
        v14 = 9;
        v13 = 115;
        v12 = 13;
        v11 = 100;
        v10 = 87;
        v9 = 83;
        v28 = v156;
      }
      v29 = 2;
LABEL_48:
      BYTE4(v158) = v29;
      *(_BYTE *)(*((_QWORD *)v28 + 13) + 1) = v29;
      LODWORD(v158) = 7;
      goto LABEL_360;
    }
LABEL_60:
    if (memchr("()[]{}/|)", v18, 0xAuLL))
      goto LABEL_397;
LABEL_330:
    JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ClassSetParserDelegate::atomPatternCharacter((uint64_t)&v156, v18, v9, v10, v11, v12, v13, v14);
    v9 = 83;
    v10 = 87;
    v11 = 100;
    v12 = 13;
    v13 = 115;
    v14 = 9;
    goto LABEL_360;
  }
  if (v18 == 45)
  {
    *(_DWORD *)(a1 + 28) = v16 + 1;
    if ((_DWORD)v16 + 1 == v15)
      goto LABEL_396;
    if (*(_WORD *)(v17 + 2 * (v16 + 1)) != 45)
      goto LABEL_60;
    *(_DWORD *)(a1 + 28) = v16 + 2;
    if ((_DWORD)v16 + 2 == v15 || *(_WORD *)(v17 + 2 * (v16 + 2)) == 45)
      goto LABEL_397;
    if (!(_DWORD)v158 || BYTE4(v158) && BYTE4(v158) != 3)
    {
LABEL_62:
      *v157 = 29;
      goto LABEL_360;
    }
    v28 = v156;
    if ((_DWORD)v158 == 1)
    {
      JSC::Yarr::CharacterClassConstructor::putChar(*((_QWORD *)v156 + 13), (void *)v159, 83, 87, 100, 13, 115, 9);
      v14 = 9;
      v13 = 115;
      v12 = 13;
      v11 = 100;
      v10 = 87;
      v9 = 83;
      v28 = v156;
    }
    v29 = 3;
    goto LABEL_48;
  }
LABEL_49:
  v33 = *(unsigned __int8 *)(a1 + 32) - 3;
  v34 = v16 + 1;
  *(_DWORD *)(a1 + 28) = v16 + 1;
  if ((v18 & 0xFC00) == 0xD800 && v33 >= 0xFFFFFFFE)
  {
    if (v34 != v15)
    {
      *(_DWORD *)(a1 + 28) = v16 + 2;
      v131 = *(unsigned __int16 *)(v17 + 2 * v34);
      if ((v131 & 0xFC00) == 0xDC00)
        v18 = v131 + (v18 << 10) - 56613888;
      else
        *(_DWORD *)(a1 + 28) = v34;
    }
    goto LABEL_330;
  }
  if (!v18)
    goto LABEL_397;
  if (v18 > 0x7F)
    goto LABEL_330;
  if (memchr("()[]{}/|)", v18, 0xAuLL))
    goto LABEL_397;
    goto LABEL_330;
LABEL_405:
  v148 = 29;
LABEL_398:
  *v7 = v148;
LABEL_399:
  v149 = v160;
  if (v160)
  {
    v160 = 0;
    LODWORD(v161) = 0;
    WTF::fastFree((unint64_t)v149, (void *)a2, v9, v10, v11, v12, v13, v14);
  }
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::parseQuantifier(uint64_t a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Yarr::YarrPatternConstructor *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a3 == -1)
  {
    v11 = 4;
LABEL_9:
    *(_BYTE *)(a1 + 8) = v11;
    return;
  }
  if (a2 != 1)
  {
    if (a2 == 2)
      v11 = 6;
    else
      v11 = 3;
    goto LABEL_9;
  }
  v8 = *(JSC::Yarr::YarrPatternConstructor **)a1;
  v9 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 24) || *(_WORD *)(*(_QWORD *)(a1 + 16) + 2 * v9) != 63)
  {
    v10 = 1;
  }
  else
  {
    v10 = 0;
    *(_DWORD *)(a1 + 28) = v9 + 1;
  }
  JSC::Yarr::YarrPatternConstructor::quantifyAtom(v8, a3, a4, v10, a5, a6, a7, a8);
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::consumeNumber(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  unsigned int v8;
  BOOL v9;
  BOOL v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 24);
  v4 = *(unsigned int *)(a1 + 28);
  v5 = v4 + 1;
  *(_DWORD *)(a1 + 28) = v4 + 1;
  result = *(unsigned __int16 *)(v2 + 2 * v4) - 48;
  if ((_DWORD)v4 + 1 != v3)
  {
    LOBYTE(v7) = 0;
    do
    {
      v8 = *(unsigned __int16 *)(v2 + 2 * v5) - 48;
      if (v8 > 9)
        break;
      if ((_BYTE)v7)
        v9 = 1;
      else
        v9 = result > 0x19999999;
      v7 = v9;
      v10 = __CFADD__(v8, 10 * result);
      v11 = v8 + 10 * result;
      if (v10)
        v7 = 1;
      result = v7 ? 0 : v11;
      *(_DWORD *)(a1 + 28) = ++v5;
    }
    while (v3 != v5);
    if ((_BYTE)v7)
      return 0xFFFFFFFFLL;
  }
  return result;
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeGroupName(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v17;
  _BYTE *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  _BYTE *v41;
  _WORD *v42;
  __int16 v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::AtomStringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _WORD *v86;
  __int16 v87;
  WTF::StringImpl *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  unsigned int v99;
  char v100;

  v9 = *(_DWORD *)(a2 + 24);
  v10 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v10 == v9)
    goto LABEL_32;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(unsigned __int16 *)(v12 + 2 * v10);
  v14 = v10 + 1;
  *(_DWORD *)(a2 + 28) = v10 + 1;
  if (v13 == 92)
  {
    v13 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::UnicodeParseContext)1>(a2);
  }
  else if (v14 != v9 && (v13 & 0xFC00) == 55296)
  {
    *(_DWORD *)(a2 + 28) = v10 + 2;
    v17 = *(unsigned __int16 *)(v12 + 2 * v14);
    if ((v17 & 0xFC00) == 0xDC00)
      v13 = v17 + (v13 << 10) - 56613888;
    else
      *(_DWORD *)(a2 + 28) = v14;
    goto LABEL_17;
  }
  if (v13 <= 0x7F && ((v13 | 0x20) - 97 < 0x1A || v13 == 36 || v13 == 95))
  {
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v15 = 1;
    v100 = 1;
LABEL_22:
    v18 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v97, (WTF::AtomStringImpl *)v15, a3, a4, a5, a6, a7, a8);
    if (v18)
      *v18 = v13;
    goto LABEL_24;
  }
LABEL_17:
  if (((1 << u_charType(v13)) & 0x3E) == 0)
  {
LABEL_31:
    *(_DWORD *)(a2 + 28) = v10;
LABEL_32:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 1;
  if (v13 < 0x10000)
    v15 = 1;
  else
    v15 = 2;
  if (v13 <= 0xFF)
    goto LABEL_22;
  v86 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v97, (WTF::AtomStringImpl *)v15, a3, a4, a5, a6, a7, a8);
  if (v86)
  {
    if (HIWORD(v13))
    {
      v87 = v13 & 0x3FF | 0xDC00;
      v13 = (v13 >> 10) - 10304;
      v86[1] = v87;
    }
    *v86 = v13;
  }
LABEL_24:
  v27 = *(_DWORD *)(a2 + 24);
  v26 = *(_DWORD *)(a2 + 28);
  if (v26 == v27)
  {
LABEL_25:
    v28 = v98;
    v98 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    v29 = v97;
    v97 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::~StringImpl(v29, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
      }
      else
      {
        *(_DWORD *)v29 -= 2;
      }
    }
    goto LABEL_31;
  }
  while (1)
  {
    v30 = *(_QWORD *)(a2 + 16);
    v31 = *(unsigned __int16 *)(v30 + 2 * v26);
    v32 = v26 + 1;
    *(_DWORD *)(a2 + 28) = v26 + 1;
    if (v31 == 92)
      break;
    if (v32 == v27 || (v31 & 0xFC00) != 0xD800)
      goto LABEL_36;
    *(_DWORD *)(a2 + 28) = v26 + 2;
    v33 = *(unsigned __int16 *)(v30 + 2 * v32);
    if ((v33 & 0xFC00) == 0xDC00)
      v31 = (v31 << 10) - 56613888 + v33;
    else
      *(_DWORD *)(a2 + 28) = v32;
LABEL_47:
    v34 = (1 << u_charType(v31)) & 0x40037E;
    if (v31 >> 1 != 4102 && v34 == 0)
      goto LABEL_25;
LABEL_51:
    if (v31 < 0x10000)
      v36 = 1;
    else
      v36 = 2;
    v37 = v36 + v99;
    if (__CFADD__(v36, v99))
      v37 = 0xFFFFFFFFLL;
    v38 = v98;
    if (v98 || (v38 = v97) != 0)
    {
      v39 = *((_DWORD *)v38 + 4) & 4;
      if (v31 <= 0xFF && v39 != 0)
      {
LABEL_61:
        v41 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v97, (WTF::AtomStringImpl *)v37, v20, v21, v22, v23, v24, v25);
        if (v41)
          *v41 = v31;
        goto LABEL_63;
      }
    }
    else if (v31 <= 0xFF)
    {
      goto LABEL_61;
    }
    v42 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v97, (WTF::AtomStringImpl *)v37, v20, v21, v22, v23, v24, v25);
    if (v42)
    {
      if (HIWORD(v31))
      {
        v43 = v31 & 0x3FF | 0xDC00;
        v31 = (v31 >> 10) - 10304;
        v42[1] = v43;
      }
      *v42 = v31;
    }
LABEL_63:
    v27 = *(_DWORD *)(a2 + 24);
    v26 = *(_DWORD *)(a2 + 28);
    if (v26 == v27)
      goto LABEL_25;
  }
  v31 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::UnicodeParseContext)1>(a2);
LABEL_36:
  if (v31 != 62)
  {
    if (v31 <= 0x7F && ((v31 | 0x20) - 97 < 0x1A || v31 == 36 || v31 == 95))
      goto LABEL_51;
    goto LABEL_47;
  }
  v44 = v97;
  if (v97)
    goto LABEL_72;
  if ((v99 & 0x80000000) == 0 && v98 && *((_DWORD *)v98 + 1) > v99 + (v99 >> 2))
  {
    if ((*((_BYTE *)v98 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v97, (WTF::AtomStringImpl *)v99, v20, v21, v22, v23, v24, v25);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v97, (WTF::AtomStringImpl *)v99, v20, v21, v22, v23, v24, v25);
    v88 = v97;
    v97 = v98;
    v98 = 0;
    if (v88)
    {
      if (*(_DWORD *)v88 == 2)
      {
        WTF::StringImpl::~StringImpl(v88, v79, v80, v81, v82, v83, v84, v85);
        WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
      }
      else
      {
        *(_DWORD *)v88 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v97);
  v44 = v97;
  if (v97)
LABEL_72:
    *(_DWORD *)v44 += 2;
  *(_QWORD *)a1 = v44;
  a1[8] = 1;
  v45 = v98;
  v98 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::~StringImpl(v45, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    }
    else
    {
      *(_DWORD *)v45 -= 2;
    }
  }
  v46 = v97;
  v97 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::UnicodeParseContext)1>(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned __int8 v11;
  int v12;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v19;
  unsigned __int8 v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  __int16 v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int8 v33;
  unsigned int v34;
  unsigned int v35;
  unsigned __int8 v36;
  unsigned int v37;
  unsigned __int8 v38;

  v2 = *(_DWORD *)(a1 + 24);
  v1 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v1 == v2)
    goto LABEL_4;
  v3 = *(_QWORD *)(a1 + 16);
  if (*(_WORD *)(v3 + 2 * v1) != 117)
    goto LABEL_4;
  *(_DWORD *)(a1 + 28) = v1 + 1;
  if ((_DWORD)v1 + 1 == v2)
    goto LABEL_4;
  v5 = *(unsigned __int16 *)(v3 + 2 * (v1 + 1));
  if (v5 == 123)
  {
    LODWORD(v6) = 0;
    *(_DWORD *)(a1 + 28) = v1 + 2;
    v7 = v1 + 3;
    v8 = -v2;
    while (v8 + v7 != 1)
    {
      v9 = *(unsigned __int16 *)(v3 + 2 * (v7 - 1));
      if (v9 - 48 >= 0xA && (v9 | 0x20) - 97 >= 6)
        break;
      *(_DWORD *)(a1 + 28) = v7;
      v11 = v9 >= 0x41 ? (v9 + 9) & 0xF : v9 - 48;
      v6 = v11 | (16 * v6);
      if (v6 >= 0x110000 || !(v8 + v7))
        break;
      v12 = *(unsigned __int16 *)(v3 + 2 * v7++);
      if (v12 == 125)
      {
        *(_DWORD *)(a1 + 28) = v7;
        return v6;
      }
    }
    v4 = 19;
    goto LABEL_20;
  }
  if (v5 - 48 >= 0xA && (v5 | 0x20) - 97 > 5)
    goto LABEL_4;
  v15 = v1 + 2;
  v16 = v5 >= 0x41 ? ((_BYTE)v5 + 9) & 0xF : v5 + 208;
  if (v15 == v2)
    goto LABEL_4;
  v17 = *(unsigned __int16 *)(v3 + 2 * v15);
  if (v17 - 48 >= 0xA && (v17 | 0x20) - 97 > 5)
    goto LABEL_4;
  v19 = v1 + 3;
  v20 = v17 >= 0x41 ? (v17 + 9) & 0xF : v17 - 48;
  if (v19 == v2)
    goto LABEL_4;
  v21 = *(unsigned __int16 *)(v3 + 2 * v19);
  if (v21 - 48 >= 0xA && (v21 | 0x20) - 97 > 5)
    goto LABEL_4;
  v22 = v1 + 4;
  v23 = v21 - 48;
  if (v21 >= 0x41)
    v23 = (v21 + 9) & 0xF;
  if (v22 == v2 || (v24 = *(unsigned __int16 *)(v3 + 2 * v22), v24 - 48 >= 0xA) && (v24 | 0x20) - 97 >= 6)
  {
LABEL_4:
    v4 = 18;
LABEL_20:
    *(_BYTE *)(a1 + 8) = v4;
    return 0xFFFFFFFFLL;
  }
  v25 = (unsigned __int16)((16 * v20) | (v16 << 8) | v23);
  v26 = v1 + 5;
  *(_DWORD *)(a1 + 28) = v1 + 5;
  v27 = v24 - 48;
  if (v24 >= 0x41)
    v27 = (v24 + 9) & 0xF;
  v6 = v27 | (16 * v25);
  if (v2 - v26 >= 6 && (v25 & 0xFFC0) == 0xD80 && *(_WORD *)(v3 + 2 * v26) == 92)
  {
    if ((_DWORD)v1 + 6 == v2)
      goto LABEL_78;
    if (*(_WORD *)(v3 + 2 * (v1 + 6)) != 117)
      goto LABEL_78;
    if ((_DWORD)v1 + 7 == v2)
      goto LABEL_78;
    v28 = *(unsigned __int16 *)(v3 + 2 * (v1 + 7));
    if (v28 - 48 >= 0xA && (v28 | 0x20) - 97 > 5)
      goto LABEL_78;
    v29 = v1 + 8;
    v30 = v28 >= 0x41 ? ((_BYTE)v28 + 9) & 0xF : v28 + 208;
    if (v29 == v2)
      goto LABEL_78;
    v31 = *(unsigned __int16 *)(v3 + 2 * v29);
    if (v31 - 48 >= 0xA && (v31 | 0x20) - 97 > 5)
      goto LABEL_78;
    v32 = v1 + 9;
    v33 = v31 >= 0x41 ? (v31 + 9) & 0xF : v31 - 48;
    if (v32 == v2
      || (v34 = *(unsigned __int16 *)(v3 + 2 * v32), v34 - 48 >= 0xA) && (v34 | 0x20) - 97 > 5
      || ((v35 = v1 + 10, v34 >= 0x41) ? (v36 = (v34 + 9) & 0xF) : (v36 = v34 - 48),
          v35 == v2
       || (v37 = *(unsigned __int16 *)(v3 + 2 * v35), v37 - 48 >= 0xA) && (v37 | 0x20) - 97 > 5
       || ((*(_DWORD *)(a1 + 28) = v1 + 11, v37 >= 0x41) ? (v38 = (v37 + 9) & 0xF) : (v38 = v37 - 48),
           ((16 * v33) & 0xFFC0 | (unsigned __int16)(v30 << 8) | v36 & 0xC0) != 0xDC0)))
    {
LABEL_78:
      *(_DWORD *)(a1 + 28) = v26;
    }
    else
    {
      return (v38 | (16 * (unsigned __int16)((16 * v33) | (v30 << 8) | v36)))
           + ((_DWORD)v6 << 10)
           - 56613888;
    }
  }
  return v6;
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeHex(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned __int8 v8;

  v2 = result;
  v3 = 0;
  LODWORD(result) = 0;
  v4 = *(_DWORD *)(v2 + 28);
  v5 = v4 - *(_DWORD *)(v2 + 24);
  while (v5 + v3)
  {
    v6 = *(unsigned __int16 *)(*(_QWORD *)(v2 + 16) + 2 * (v4 + v3));
    if (v6 - 48 >= 0xA && (v6 | 0x20) - 97 >= 6)
      break;
    *(_DWORD *)(v2 + 28) = v4 + v3 + 1;
    if (v6 >= 0x41)
      v8 = (v6 + 9) & 0xF;
    else
      v8 = v6 - 48;
    result = v8 | (16 * result);
    if (a2 == ++v3)
      return result;
  }
  *(_DWORD *)(v2 + 28) = v4;
  return 0xFFFFFFFFLL;
}

char *WTF::Vector<JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ParenthesesType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ParenthesesType&>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  result = WTF::Vector<JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ParenthesesType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, (WTF *)(*(unsigned int *)(a1 + 12) + 1), a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_BYTE *)(*(_QWORD *)a1 + v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

char *WTF::Vector<JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ParenthesesType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v25 = *a1;
        return &v25[v3 - (_QWORD)v5];
      }
      if (v10 < 0x11)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 16;
        goto LABEL_31;
      }
      if (!HIDWORD(v10))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)v10);
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, v6);
        v25 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v25 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
          v25 = *a1;
        }
        return &v25[v3 - (_QWORD)v5];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x198F06550);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 0x11)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 16;
    }
    else
    {
      if (HIDWORD(v15))
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)v15);
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return (char *)v3;
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ClassSetParserDelegate::atomPatternCharacter(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v9;
  int v12;
  unsigned int v13;
  char *v14;
  char v15;

  v8 = *(unsigned __int8 *)(a1 + 20);
  v9 = *(unsigned __int8 *)(a1 + 23);
  *(_BYTE *)(a1 + 23) = 0;
  switch(*(_DWORD *)(a1 + 16))
  {
    case 0:
    case 7:
      goto LABEL_12;
    case 1:
      if (v8 >= 2)
        goto LABEL_19;
      if (a2 != 45)
        goto LABEL_21;
      v12 = 2;
      goto LABEL_24;
    case 2:
      v13 = *(_DWORD *)(a1 + 24);
      if (v13 > a2)
      {
        v14 = *(char **)(a1 + 8);
        v15 = 14;
        goto LABEL_20;
      }
      JSC::Yarr::CharacterClassConstructor::putRange(*(unint64_t **)(*(_QWORD *)a1 + 104), v13, a2);
      if (!*(_BYTE *)(a1 + 20))
      {
        *(_BYTE *)(a1 + 20) = 1;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 104) + 1) = 1;
      }
      v12 = 5;
      goto LABEL_24;
    case 3:
      if (a2 != 45 || v8 > 1)
        goto LABEL_10;
      JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)0x2D, a3, a4, a5, a6, a7, a8);
      v12 = 4;
      goto LABEL_24;
    case 4:
      v14 = *(char **)(a1 + 8);
      v15 = 15;
      goto LABEL_20;
    case 5:
LABEL_10:
      if (!v8)
      {
        *(_BYTE *)(a1 + 20) = 1;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 104) + 1) = 1;
      }
LABEL_12:
      if (a2 != 45 || v9)
        goto LABEL_23;
      v14 = *(char **)(a1 + 8);
      v15 = 31;
      goto LABEL_20;
    case 6:
      if (v8 >= 2)
        **(_BYTE **)(a1 + 8) = 29;
      if (a2 == 45)
      {
LABEL_19:
        v14 = *(char **)(a1 + 8);
        v15 = 29;
LABEL_20:
        *v14 = v15;
      }
      else
      {
LABEL_21:
        JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)*(unsigned int *)(a1 + 24), a3, a4, a5, a6, a7, a8);
        if (!*(_BYTE *)(a1 + 20))
        {
          *(_BYTE *)(a1 + 20) = 1;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 104) + 1) = 1;
        }
LABEL_23:
        *(_DWORD *)(a1 + 24) = a2;
        v12 = 1;
LABEL_24:
        *(_DWORD *)(a1 + 16) = v12;
      }
      return;
    default:
      return;
  }
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ClassSetParserDelegate::atomBuiltInCharacterClass(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  BOOL v12;
  BOOL v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;

  v11 = *(unsigned __int8 *)(a1 + 20);
  switch(*(_DWORD *)(a1 + 16))
  {
    case 0:
    case 3:
    case 7:
      goto LABEL_5;
    case 1:
      if (v11 >= 2)
      {
        v22 = *(char **)(a1 + 8);
        v23 = 29;
LABEL_17:
        *v22 = v23;
        return;
      }
      JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)*(unsigned int *)(a1 + 24), a3, a4, a5, a6, a7, a8);
      v11 = *(unsigned __int8 *)(a1 + 20);
LABEL_4:
      if (!v11)
      {
        *(_BYTE *)(a1 + 20) = 1;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 104) + 1) = 1;
        v12 = (a2 - 329) < 7;
        goto LABEL_15;
      }
LABEL_5:
      v12 = (a2 - 329) < 7;
      if (v11 < 2)
      {
LABEL_15:
        v15 = *(_BYTE *)(a1 + 21) | v12;
        goto LABEL_26;
      }
      if (v11 != 2)
        goto LABEL_27;
      v13 = (a2 - 329) >= 7;
LABEL_20:
      v15 = !v13 && *(_BYTE *)(a1 + 21) != 0;
LABEL_26:
      *(_BYTE *)(a1 + 21) = v15;
LABEL_27:
      JSC::Yarr::YarrPatternConstructor::atomCharacterClassBuiltIn(*(JSC::Yarr::YarrPattern ***)a1, a2, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 16) = 3;
      return;
    case 2:
      JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)*(unsigned int *)(a1 + 24), a3, a4, a5, a6, a7, a8);
      JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)0x2D, v16, v17, v18, v19, v20, v21);
      goto LABEL_13;
    case 4:
LABEL_13:
      v22 = *(char **)(a1 + 8);
      v23 = 15;
      goto LABEL_17;
    case 5:
      goto LABEL_4;
    case 6:
      if (v11 >= 2)
        **(_BYTE **)(a1 + 8) = 29;
      v14 = a2 - 329;
      if (v11 < 2)
      {
        v15 = *(_BYTE *)(a1 + 21) | (v14 < 7);
        goto LABEL_26;
      }
      if (v11 != 2)
        goto LABEL_27;
      v13 = v14 >= 7;
      goto LABEL_20;
    default:
      return;
  }
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::consumeOctal(uint64_t a1, int a2)
{
  uint64_t result;
  int v4;
  unsigned int v5;
  int v6;
  int v7;

  result = 0;
  v4 = *(_DWORD *)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 28);
  v6 = a2 - 1;
  do
  {
    if (v4 == v5)
      break;
    v7 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 2 * v5);
    if ((v7 & 0xFFF8) != 0x30)
      break;
    *(_DWORD *)(a1 + 28) = ++v5;
    result = (v7 + 8 * result - 48);
    if (v6-- == 0)
      break;
  }
  while (result < 0x20);
  return result;
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeUnicodePropertyExpression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  size_t matched;
  size_t v16;
  unsigned int v17;
  _BYTE *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v31;
  char v32;
  unsigned int v33;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  _BYTE *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _WORD *v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::AtomStringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WTF::AtomStringImpl *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _WORD *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  unsigned int v166;
  char v167;

  v9 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 24)
    || (v10 = *(_QWORD *)(a1 + 16), v11 = *(unsigned __int16 *)(v10 + 2 * v9), v11 != 61)
    && (v11 != 95 ? (v12 = (v11 - 48) >= 0xA) : (v12 = 0),
        v12 ? (v13 = (v11 | 0x20u) - 97 >= 0x1A) : (v13 = 0),
        v13))
  {
    v14 = 0;
    LOBYTE(matched) = 0;
    LODWORD(v16) = 0;
    *(_BYTE *)(a1 + 8) = 25;
    return v14 & 0x100000000 | matched | ((_DWORD)v16 << 8);
  }
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v167 = 1;
  *(_DWORD *)(a1 + 28) = v9 + 1;
  v17 = *(unsigned __int16 *)(v10 + 2 * v9);
  if (v17 > 0xFF)
  {
    v142 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v164, (WTF::AtomStringImpl *)1, a3, a4, a5, a6, a7, a8);
    if (v142)
      *v142 = v17;
  }
  else
  {
    v18 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v164, (WTF::AtomStringImpl *)1, a3, a4, a5, a6, a7, a8);
    if (v18)
      *v18 = v17;
  }
  v26 = *(_DWORD *)(a1 + 28);
  if (v26 == *(_DWORD *)(a1 + 24))
  {
    v27 = 0;
LABEL_17:
    LOBYTE(matched) = 0;
    LODWORD(v16) = 0;
LABEL_18:
    v14 = 0;
    *(_BYTE *)(a1 + 8) = 25;
    goto LABEL_19;
  }
  v31 = 0;
  v32 = 0;
  v27 = 0;
  while (1)
  {
    v33 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 2 * v26);
    *(_DWORD *)(a1 + 28) = v26 + 1;
    if (v33 == 61)
    {
      if ((v32 & 1) != 0)
      {
        ++v31;
        v32 = 1;
      }
      else
      {
        v41 = v164;
        if (v164)
          goto LABEL_53;
        if ((v166 & 0x80000000) == 0 && v165 && *((_DWORD *)v165 + 1) > v166 + (v166 >> 2))
        {
          if ((*((_BYTE *)v165 + 16) & 4) != 0)
            WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v164, (WTF::AtomStringImpl *)v166, v20, v21, v22, v23, v24, v25);
          else
            WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v164, (WTF::AtomStringImpl *)v166, v20, v21, v22, v23, v24, v25);
          v76 = v164;
          v164 = v165;
          v165 = 0;
          if (v76)
          {
            if (*(_DWORD *)v76 == 2)
            {
              WTF::StringImpl::~StringImpl(v76, v68, v69, v70, v71, v72, v73, v74);
              WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
            }
            else
            {
              *(_DWORD *)v76 -= 2;
            }
          }
        }
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v164);
        v41 = v164;
        if (v164)
LABEL_53:
          *(_DWORD *)v41 += 2;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
          {
            WTF::StringImpl::~StringImpl(v27, v19, v20, v21, v22, v23, v24, v25);
            WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
          }
          else
          {
            *(_DWORD *)v27 -= 2;
          }
        }
        v42 = v164;
        v164 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
          {
            WTF::StringImpl::~StringImpl(v42, v19, v20, v21, v22, v23, v24, v25);
            WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
          }
          else
          {
            *(_DWORD *)v42 -= 2;
          }
        }
        v43 = v165;
        v165 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
          {
            WTF::StringImpl::~StringImpl(v43, v19, v20, v21, v22, v23, v24, v25);
            WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
          }
          else
          {
            *(_DWORD *)v43 -= 2;
          }
        }
        v166 = 0;
        v32 = 1;
        v27 = v41;
      }
      goto LABEL_64;
    }
    if (v33 == 125)
      break;
    if (v33 != 95 && v33 - 48 >= 0xA && (v33 | 0x20) - 97 >= 0x1A)
    {
      ++v31;
    }
    else
    {
      if (v166 == -1)
        v36 = 0xFFFFFFFFLL;
      else
        v36 = v166 + 1;
      v37 = v165;
      if (v165 || (v37 = v164) != 0)
      {
        v38 = *((_DWORD *)v37 + 4) & 4;
        if (v33 <= 0xFF && v38 != 0)
        {
LABEL_47:
          v40 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v164, (WTF::AtomStringImpl *)v36, v20, v21, v22, v23, v24, v25);
          if (v40)
            *v40 = v33;
          goto LABEL_64;
        }
      }
      else if (v33 <= 0xFF)
      {
        goto LABEL_47;
      }
      v75 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v164, (WTF::AtomStringImpl *)v36, v20, v21, v22, v23, v24, v25);
      if (v75)
        *v75 = v33;
    }
LABEL_64:
    v26 = *(_DWORD *)(a1 + 28);
    if (v26 == *(_DWORD *)(a1 + 24))
      goto LABEL_17;
  }
  if (v31)
    goto LABEL_17;
  if ((v32 & 1) != 0)
  {
    if (v27)
      *(_DWORD *)v27 += 2;
    v163 = v27;
    v85 = v164;
    if (v164)
      goto LABEL_90;
    if ((v166 & 0x80000000) == 0 && v165 && *((_DWORD *)v165 + 1) > v166 + (v166 >> 2))
    {
      if ((*((_BYTE *)v165 + 16) & 4) != 0)
        WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v164, (WTF::AtomStringImpl *)v166, v20, v21, v22, v23, v24, v25);
      else
        WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v164, (WTF::AtomStringImpl *)v166, v20, v21, v22, v23, v24, v25);
      v143 = v164;
      v164 = v165;
      v165 = 0;
      if (v143)
      {
        if (*(_DWORD *)v143 == 2)
        {
          WTF::StringImpl::~StringImpl(v143, v128, v129, v130, v131, v132, v133, v134);
          WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
        }
        else
        {
          *(_DWORD *)v143 -= 2;
        }
      }
    }
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v164);
    v85 = v164;
    if (v164)
LABEL_90:
      *(_DWORD *)v85 += 2;
    v162 = v85;
    matched = JSC::Yarr::unicodeMatchPropertyValue((uint64_t *)&v163, &v162);
    v162 = 0;
    v86 = v27;
    if (v85)
    {
      if (*(_DWORD *)v85 == 2)
      {
        WTF::StringImpl::~StringImpl(v85, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
        v86 = v163;
      }
      else
      {
        *(_DWORD *)v85 -= 2;
        v86 = v27;
      }
    }
    v16 = matched >> 8;
    v14 = matched & 0x100000000;
    v163 = 0;
    if (v86)
    {
      if (*(_DWORD *)v86 != 2)
      {
        *(_DWORD *)v86 -= 2;
        goto LABEL_108;
      }
LABEL_107:
      WTF::StringImpl::~StringImpl(v86, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
    }
  }
  else
  {
    v111 = v164;
    if (v164)
      goto LABEL_101;
    if ((v166 & 0x80000000) == 0 && v165 && *((_DWORD *)v165 + 1) > v166 + (v166 >> 2))
    {
      if ((*((_BYTE *)v165 + 16) & 4) != 0)
        WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v164, (WTF::AtomStringImpl *)v166, v20, v21, v22, v23, v24, v25);
      else
        WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v164, (WTF::AtomStringImpl *)v166, v20, v21, v22, v23, v24, v25);
      v144 = v164;
      v164 = v165;
      v165 = 0;
      if (v144)
      {
        if (*(_DWORD *)v144 == 2)
        {
          WTF::StringImpl::~StringImpl(v144, v135, v136, v137, v138, v139, v140, v141);
          WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
        }
        else
        {
          *(_DWORD *)v144 -= 2;
        }
      }
    }
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v164);
    v111 = v164;
    if (v164)
LABEL_101:
      *(_DWORD *)v111 += 2;
    v161 = v111;
    matched = JSC::Yarr::unicodeMatchProperty(&v161, *(unsigned __int8 *)(a1 + 32));
    v16 = matched >> 8;
    v14 = matched & 0x100000000;
    v161 = 0;
    if (v111)
    {
      if (*(_DWORD *)v111 == 2)
      {
        v86 = v111;
        goto LABEL_107;
      }
      *(_DWORD *)v111 -= 2;
    }
  }
LABEL_108:
  if (!HIDWORD(matched))
    goto LABEL_18;
LABEL_19:
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = v165;
  v165 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  v29 = v164;
  v164 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  return v14 & 0x100000000 | matched | ((_DWORD)v16 << 8);
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::UnicodeParseContext)0>(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v7;
  __int16 v8;
  unsigned int v9;
  unsigned int v11;
  unsigned __int8 v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned __int8 v28;
  int v29;
  int v30;
  uint64_t v31;

  v1 = *(unsigned __int8 *)(a1 + 32) - 3;
  v3 = *(_DWORD *)(a1 + 24);
  v2 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v2 == v3)
    goto LABEL_39;
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_WORD *)(v4 + 2 * v2) != 117)
    goto LABEL_39;
  *(_DWORD *)(a1 + 28) = v2 + 1;
  if ((_DWORD)v2 + 1 == v3)
    goto LABEL_39;
  v5 = *(unsigned __int16 *)(v4 + 2 * (v2 + 1));
  if (v1 >= 0xFFFFFFFE && v5 == 123)
  {
    LODWORD(v20) = 0;
    *(_DWORD *)(a1 + 28) = v2 + 2;
    v24 = v2 + 3;
    v25 = -v3;
    while (v25 + v24 != 1)
    {
      v26 = *(unsigned __int16 *)(v4 + 2 * (v24 - 1));
      if (v26 - 48 >= 0xA && (v26 | 0x20) - 97 >= 6)
        break;
      *(_DWORD *)(a1 + 28) = v24;
      v28 = v26 >= 0x41 ? (v26 + 9) & 0xF : v26 - 48;
      v20 = v28 | (16 * v20);
      if (v20 >= 0x110000 || !(v25 + v24))
        break;
      v29 = *(unsigned __int16 *)(v4 + 2 * v24++);
      if (v29 == 125)
      {
        *(_DWORD *)(a1 + 28) = v24;
        return v20;
      }
    }
    v22 = 19;
    goto LABEL_41;
  }
  if (v5 - 48 >= 0xA && (v5 | 0x20) - 97 > 5)
    goto LABEL_39;
  v7 = v2 + 2;
  v8 = v5 >= 0x41 ? ((_BYTE)v5 + 9) & 0xF : v5 + 208;
  if (v7 == v3)
    goto LABEL_39;
  v9 = *(unsigned __int16 *)(v4 + 2 * v7);
  if (v9 - 48 >= 0xA && (v9 | 0x20) - 97 > 5)
    goto LABEL_39;
  v11 = v2 + 3;
  v12 = v9 >= 0x41 ? (v9 + 9) & 0xF : v9 - 48;
  if (v11 == v3)
    goto LABEL_39;
  v13 = *(unsigned __int16 *)(v4 + 2 * v11);
  if (v13 - 48 >= 0xA && (v13 | 0x20) - 97 > 5)
    goto LABEL_39;
  v14 = v2 + 4;
  v15 = v13 - 48;
  if (v13 >= 0x41)
    v15 = (v13 + 9) & 0xF;
  if (v14 == v3 || (v16 = *(unsigned __int16 *)(v4 + 2 * v14), v16 - 48 >= 0xA) && (v16 | 0x20) - 97 >= 6)
  {
LABEL_39:
    if (v1 < 0xFFFFFFFE)
      return 0xFFFFFFFFLL;
    v22 = 18;
LABEL_41:
    *(_BYTE *)(a1 + 8) = v22;
    return 0xFFFFFFFFLL;
  }
  v17 = (unsigned __int16)((16 * v12) | (v8 << 8) | v15);
  v18 = v2 + 5;
  *(_DWORD *)(a1 + 28) = v2 + 5;
  if (v16 >= 0x41)
    v19 = (v16 + 9) & 0xF;
  else
    v19 = v16 - 48;
  v20 = v19 | (16 * v17);
  if ((v17 & 0xFFC0) == 0xD80 && v1 >= 0xFFFFFFFE && v3 - v18 >= 6 && *(_WORD *)(v4 + 2 * v18) == 92)
  {
    v30 = v2 + 5;
    if ((_DWORD)v2 + 6 != v3
      && *(_WORD *)(v4 + 2 * (v2 + 6)) == 117
      && (*(_DWORD *)(a1 + 28) = v2 + 7,
          v31 = a1,
          v21 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeHex(a1, 4),
          a1 = v31,
          v21 >> 10 == 55))
    {
      return v21 + ((_DWORD)v20 << 10) - 56613888;
    }
    else
    {
      *(_DWORD *)(a1 + 28) = v30;
    }
  }
  return v20;
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::CharacterClassParserDelegate::atomPatternCharacter(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v10;
  char *v11;
  char v12;

  v8 = a2;
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0:
    case 3:
      *(_DWORD *)(a1 + 20) = 1;
      *(_DWORD *)(a1 + 24) = (_DWORD)a2;
      break;
    case 1:
      JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)*(unsigned int *)(a1 + 24), a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 24) = v8;
      break;
    case 2:
      v10 = *(_DWORD *)(a1 + 24);
      if (v10 <= v8)
      {
        JSC::Yarr::CharacterClassConstructor::putRange(*(unint64_t **)(*(_QWORD *)a1 + 104), v10, v8);
        goto LABEL_7;
      }
      v11 = *(char **)(a1 + 8);
      v12 = 14;
      goto LABEL_11;
    case 4:
      if (*(_BYTE *)(a1 + 16))
      {
        v11 = *(char **)(a1 + 8);
        v12 = 15;
LABEL_11:
        *v11 = v12;
      }
      else
      {
        JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), a2, a3, a4, a5, a6, a7, a8);
LABEL_7:
        *(_DWORD *)(a1 + 20) = 0;
      }
      break;
    default:
      return;
  }
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ParseEscapeMode)1>(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  void *v5;

  result = 0;
  if (a2 <= 0x7F && *(unsigned __int8 *)(a1 + 32) - 1 <= 1)
  {
    v5 = memchr("^$\\.*+?()[]{}|/", a2, 0x10uLL);
    if (a2 && v5)
    {
      return 0;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 22;
      return 1;
    }
  }
  return result;
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::CharacterClassParserDelegate::atomBuiltInCharacterClass(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v11 = a1[5];
  if (v11 == 1)
  {
    JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)a1[6], a3, a4, a5, a6, a7, a8);
LABEL_3:
    JSC::Yarr::YarrPatternConstructor::atomCharacterClassBuiltIn(*(JSC::Yarr::YarrPattern ***)a1, a2, a3, a4, a5, a6, a7, a8);
    a1[5] = 3;
  }
  else
  {
    switch(v11)
    {
      case 0:
      case 3:
        goto LABEL_3;
      case 2:
        JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)a1[6], a3, a4, a5, a6, a7, a8);
        JSC::Yarr::CharacterClassConstructor::putChar(*(_QWORD *)(*(_QWORD *)a1 + 104), (void *)0x2D, v12, v13, v14, v15, v16, v17);
        goto LABEL_6;
      case 4:
LABEL_6:
        if (*((_BYTE *)a1 + 16))
        {
          **((_BYTE **)a1 + 1) = 15;
        }
        else
        {
          JSC::Yarr::YarrPatternConstructor::atomCharacterClassBuiltIn(*(JSC::Yarr::YarrPattern ***)a1, a2, a3, a4, a5, a6, a7, a8);
          a1[5] = 0;
        }
        break;
      default:
        return;
    }
  }
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ParseEscapeMode)0>(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  void *v5;

  result = 0;
  if (a2 <= 0x7F && *(unsigned __int8 *)(a1 + 32) - 1 <= 1)
  {
    v5 = memchr("^$\\.*+?()[]{}|/", a2, 0x10uLL);
    if (a2 && v5)
    {
      return 0;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 22;
      return 1;
    }
  }
  return result;
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::containsIllegalNamedForwardReference(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  v1 = *(_QWORD *)(a1 + 144);
  if (!v1 || !*(_DWORD *)(v1 - 12))
    return 0;
  v4 = *(_QWORD *)(a1 + 88);
  if (!v4 || !*(_DWORD *)(v4 - 12))
    return 1;
  v5 = (WTF::StringImpl **)WTF::HashSet<JSC::JSArrayBufferView *,WTF::DefaultHash<JSC::JSArrayBufferView *>,WTF::HashTraits<JSC::JSArrayBufferView *>,WTF::HashTableTraits>::begin(*(_QWORD **)(a1 + 144));
  v8 = (WTF::StringImpl **)(v1 + 8 * *(unsigned int *)(v1 - 4));
  if (v8 == v5)
    return 0;
  v9 = v5;
  v10 = v6;
  do
  {
    v11 = *v9;
    if (*v9)
      *(_DWORD *)v11 += 2;
    v27 = v11;
    v18 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::NamedCaptureGroups::contains(*(WTF **)(a1 + 88), &v27, v7);
    v27 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::~StringImpl(v11, v12, (uint64_t)v7, v13, v14, v15, v16, v17);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v11 -= 2;
      }
    }
    if (!v18)
      break;
    while (++v9 != v10)
    {
      if ((unint64_t)*v9 + 1 > 1)
        goto LABEL_20;
    }
    v9 = v10;
LABEL_20:
    ;
  }
  while (v9 != v8);
  return v18 ^ 1;
}

void JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::resetForReparsing(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  WTF::StringImpl **v18;
  _QWORD *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl **v37;

  JSC::Yarr::YarrPatternConstructor::resetForReparsing(*(JSC::Yarr::YarrPatternConstructor **)a1, a2, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 49) = 0;
  if (*(_DWORD *)(a1 + 64))
  {
    if (*(_DWORD *)(a1 + 68))
      *(_DWORD *)(a1 + 68) = 0;
    v16 = *(_QWORD *)(a1 + 56);
    if (a1 + 72 == v16 || v16 == 0)
    {
      if (v16)
        goto LABEL_11;
      goto LABEL_10;
    }
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v16, v9, v10, v11, v12, v13, v14, v15);
    if (!*(_QWORD *)(a1 + 56))
    {
LABEL_10:
      *(_QWORD *)(a1 + 56) = a1 + 72;
      *(_DWORD *)(a1 + 64) = 16;
    }
  }
LABEL_11:
  v18 = *(WTF::StringImpl ***)(a1 + 88);
  if (v18)
  {
    *(_QWORD *)(a1 + 88) = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v18, (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
  }
  v19 = (_QWORD *)(a1 + 96);
  WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 96, (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
  if (!*(_DWORD *)(a1 + 104))
    WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 96, 0x10uLL, v21, v22, v23, v24, v25, v26);
  if (*v19)
  {
    v27 = *(unsigned int *)(a1 + 108);
    if ((_DWORD)v27 != 1)
      bzero((void *)(*v19 + 8 * v27), -8 * v27 + 8);
  }
  *(_DWORD *)(a1 + 108) = 1;
  v28 = (_QWORD *)(a1 + 120);
  WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 120, v20, v21, v22, v23, v24, v25, v26);
  if (!*(_DWORD *)(a1 + 128))
    WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 120, 0x10uLL, v30, v31, v32, v33, v34, v35);
  if (*v28)
  {
    v36 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v36 != 1)
      bzero((void *)(*v28 + 8 * v36), -8 * v36 + 8);
  }
  *(_DWORD *)(a1 + 132) = 1;
  v37 = *(WTF::StringImpl ***)(a1 + 144);
  if (v37)
  {
    *(_QWORD *)(a1 + 144) = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v37, v29, v30, v31, v32, v33, v34, v35);
  }
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::parse(unint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, __int16 *a4, __int16 *a5, __int16 *a6, __int16 *a7, __int16 *a8)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 24) > 0x100000u)
    return 1;
  JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::parseTokens(a1, a2, a3, a4, a5, a6, a7, a8);
  result = *(unsigned __int8 *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 8))
  {
    JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::handleIllegalReferences(a1);
    return *(unsigned __int8 *)(a1 + 8);
  }
  return result;
}

void JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::parseTokens(uint64_t a1, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl **v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  WTF::StringImpl **v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  uint64_t v70;
  WTF::StringImpl **v71;
  WTF::StringImpl **v72;
  WTF::StringImpl **v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl **v76;
  uint64_t v77;
  WTF::StringImpl **v78;
  WTF::StringImpl **v79;
  uint64_t *v80;
  WTF::AtomStringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  unsigned int v87;
  unsigned int v88;
  char v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  char v93;
  char v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v100;
  unsigned int v101;
  unsigned __int8 v102;
  int v103;
  unsigned int v104;
  unsigned __int8 v105;
  unsigned int v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  char v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  WTF::AtomStringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  WTF::StringImpl **v132;
  WTF::StringImpl *v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl **v143;
  WTF::StringImpl *v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  WTF::StringImpl **v154;
  WTF::StringImpl *v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  WTF::StringImpl **v165;
  WTF::StringImpl *v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  BOOL v177;
  int v178;
  int v179;
  uint64_t v180;
  unsigned int v181;
  int v182;
  unsigned int v183;
  unsigned int v184;
  int v186;
  unsigned int v187;
  unint64_t v188;
  unsigned int v190;
  int v191;
  unint64_t v192;
  uint64_t *v193;
  WTF::StringImpl **v194;
  uint64_t *v195;
  WTF::StringImpl **v196;
  uint64_t *v197;
  uint64_t *v198;
  WTF::StringImpl **v199;
  uint64_t *v200;
  uint64_t *v201;
  WTF::StringImpl **v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  char v213;
  char v214;
  unsigned int v215;
  WTF::AtomStringImpl *v216;
  const WTF::StringImpl *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  unsigned __int8 *v224;
  void *v225;
  void *v226;
  BOOL v227;
  int v228;
  uint64_t v229;
  int v230;
  WTF::StringImpl *v231;
  unsigned int v232;
  unsigned int v233;
  unint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  WTF::StringImpl *v243;
  char v244;
  WTF::StringImpl *v245;
  char v246;
  uint64_t v247[2];
  char v248;
  WTF::StringImpl *v249;
  char v250;

  LOBYTE(v9) = 0;
  v242 = a1 + 56;
  v10 = (_QWORD *)(a1 + 96);
  v11 = (_QWORD *)(a1 + 120);
  while (1)
  {
    v12 = *(_DWORD *)(a1 + 24);
    v13 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v13 == v12)
    {
      if (*(_DWORD *)(a1 + 68))
      {
        v94 = 7;
        goto LABEL_189;
      }
      return;
    }
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(unsigned __int8 *)(v14 + v13);
    if (v15 <= 0x5A)
    {
      switch(*(_BYTE *)(v14 + v13))
      {
        case '$':
          goto LABEL_65;
        case '%':
        case '&':
        case '\'':
        case ',':
        case '-':
          goto LABEL_22;
        case '(':
          *(_DWORD *)(a1 + 28) = v13 + 1;
          v246 = 0;
          if ((_DWORD)v13 + 1 == v12 || *(_BYTE *)(v14 + (v13 + 1)) != 63)
            goto LABEL_31;
          *(_DWORD *)(a1 + 28) = v13 + 2;
          if ((_DWORD)v13 + 2 == v12)
          {
            *(_BYTE *)(a1 + 8) = 10;
            goto LABEL_40;
          }
          *(_DWORD *)(a1 + 28) = v13 + 3;
          v22 = *(unsigned __int8 *)(v14 + (v13 + 2));
          switch(v22)
          {
            case ':':
              goto LABEL_31;
            case '!':
            case '=':
              v23 = 1;
              v246 = 1;
              break;
            case '<':
              JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeGroupName(&v249, a1);
              if (*(_BYTE *)(a1 + 8))
                goto LABEL_250;
              if (v250)
              {
                if (*(_BYTE *)(a1 + 49))
                {
                  v213 = 21;
                }
                else
                {
                  v125 = v249;
                  if (v249)
                    *(_DWORD *)v249 += 2;
                  v245 = v125;
                  JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::NamedCaptureGroups::add((uint64_t)v247, a1 + 88, &v245, v120, v121, v122, v123, v124);
                  v126 = v245;
                  v245 = 0;
                  if (v126)
                  {
                    if (*(_DWORD *)v126 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v126, v118, v119, v120, v121, v122, v123, v124);
                      WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
                    }
                    else
                    {
                      *(_DWORD *)v126 -= 2;
                    }
                  }
                  if (v248)
                  {
                    LOBYTE(v243) = 0;
                    v244 = 0;
                    if (v250)
                    {
                      v127 = v249;
                      if (v249)
                        *(_DWORD *)v249 += 2;
                      v243 = v127;
                      v244 = 1;
                    }
                    std::optional<WTF::String>::~optional((uint64_t)&v243, v118, v119, v120, v121, v122, v123, v124);
LABEL_250:
                    std::optional<WTF::String>::~optional((uint64_t)&v249, v118, v119, v120, v121, v122, v123, v124);
LABEL_31:
                    v23 = 0;
                    ++*(_DWORD *)(a1 + 40);
                    break;
                  }
                  v213 = 12;
                }
                *(_BYTE *)(a1 + 8) = v213;
                goto LABEL_250;
              }
              v211 = *(unsigned int *)(a1 + 28);
              if ((_DWORD)v211 == *(_DWORD *)(a1 + 24)
                || (v212 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v211), v212 != 61) && v212 != 33)
              {
                *(_BYTE *)(a1 + 8) = 11;
                goto LABEL_250;
              }
              *(_DWORD *)(a1 + 28) = v211 + 1;
              v23 = 2;
              v246 = 2;
              std::optional<WTF::String>::~optional((uint64_t)&v249, v118, v119, v120, v121, v122, v123, v124);
              break;
            default:
              *(_BYTE *)(a1 + 8) = 10;
              goto LABEL_31;
          }
          v24 = *(unsigned int *)(a1 + 68);
          if ((_DWORD)v24 == *(_DWORD *)(a1 + 64))
          {
            WTF::Vector<JSC::ParserState,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserState>(v242, (unint64_t)&v246);
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)(a1 + 56) + v24) = v23;
            *(_DWORD *)(a1 + 68) = v24 + 1;
          }
          v25 = *(unsigned int *)(a1 + 132);
          if (!(_DWORD)v25)
          {
            __break(0xC471u);
            JUMPOUT(0x198F09004);
          }
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v247, (uint64_t *)(*(_QWORD *)(a1 + 120) + 8 * v25 - 8));
          v249 = 0;
          v31 = *(unsigned int *)(a1 + 108);
          if ((_DWORD)v31 == *(_DWORD *)(a1 + 104))
          {
            v80 = (uint64_t *)WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v31 + 1, (unint64_t)&v249, v26, v27, v28, v29, v30);
            v83 = *(unsigned int *)(a1 + 108);
            v84 = *(_QWORD *)(a1 + 96);
            *(_QWORD *)(v84 + 8 * v83) = 0;
            v85 = *v80;
            *v80 = 0;
            *(_QWORD *)(v84 + 8 * v83) = v85;
            v86 = v249;
            ++*(_DWORD *)(a1 + 108);
            if (v86)
            {
              v164 = *((unsigned int *)v86 - 1);
              if ((_DWORD)v164)
              {
                v165 = (WTF::StringImpl **)v86;
                do
                {
                  v166 = *v165;
                  if (*v165 != (WTF::StringImpl *)-1)
                  {
                    *v165 = 0;
                    if (v166)
                    {
                      if (*(_DWORD *)v166 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v166, v81, v82, v26, v27, v28, v29, v30);
                        WTF::fastFree(v167, v168, v169, v170, v171, v172, v173, v174);
                      }
                      else
                      {
                        *(_DWORD *)v166 -= 2;
                      }
                    }
                  }
                  ++v165;
                  --v164;
                }
                while (v164);
              }
              WTF::fastFree((unint64_t)v86 - 16, v81, v82, v26, v27, v28, v29, v30);
            }
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v31) = 0;
            ++*(_DWORD *)(a1 + 108);
          }
          v32 = *(unsigned int *)(a1 + 132);
          if ((_DWORD)v32 == *(_DWORD *)(a1 + 128))
          {
            v34 = (uint64_t *)WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v32 + 1, (unint64_t)v247, v26, v27, v28, v29, v30);
            v33 = (uint64_t *)(*(_QWORD *)(a1 + 120) + 8 * *(unsigned int *)(a1 + 132));
          }
          else
          {
            v33 = (uint64_t *)(*v11 + 8 * v32);
            v34 = v247;
          }
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v33, v34);
          ++*(_DWORD *)(a1 + 132);
          v35 = v247[0];
          if (v247[0])
          {
            v153 = *(unsigned int *)(v247[0] - 4);
            if ((_DWORD)v153)
            {
              v154 = (WTF::StringImpl **)v247[0];
              do
              {
                v155 = *v154;
                if (*v154 != (WTF::StringImpl *)-1)
                {
                  *v154 = 0;
                  if (v155)
                  {
                    if (*(_DWORD *)v155 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v155, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
                    }
                    else
                    {
                      *(_DWORD *)v155 -= 2;
                    }
                  }
                }
                ++v154;
                --v153;
              }
              while (v153);
            }
            WTF::fastFree(v35 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
          goto LABEL_40;
        case ')':
          *(_DWORD *)(a1 + 28) = v13 + 1;
          if (!*(_DWORD *)(a1 + 68))
          {
            v94 = 9;
            goto LABEL_189;
          }
          v36 = *(unsigned int *)(a1 + 108);
          if (!(_DWORD)v36)
          {
            __break(0xC471u);
            JUMPOUT(0x198F0900CLL);
          }
          v37 = *(unsigned int *)(a1 + 132);
          if (!(_DWORD)v37)
          {
            __break(0xC471u);
            JUMPOUT(0x198F09014);
          }
          v38 = *(_QWORD *)(*v11 + 8 * v37 - 8);
          if (!v38)
          {
            v39 = 0;
            v40 = 0;
LABEL_46:
            v41 = (WTF::StringImpl **)(v38 + 8 * v40);
            goto LABEL_47;
          }
          v40 = *(unsigned int *)(v38 - 4);
          v41 = (WTF::StringImpl **)(v38 + 8 * v40);
          if (!*(_DWORD *)(v38 - 12))
          {
            v39 = (WTF::StringImpl **)(v38 + 8 * v40);
            goto LABEL_46;
          }
          v39 = *(WTF::StringImpl ***)(*v11 + 8 * v37 - 8);
          if ((_DWORD)v40)
          {
            v108 = 8 * v40;
            v39 = *(WTF::StringImpl ***)(*v11 + 8 * v37 - 8);
            while ((unint64_t)*v39 + 1 <= 1)
            {
              ++v39;
              v108 -= 8;
              if (!v108)
              {
                v39 = v41;
                break;
              }
            }
          }
LABEL_47:
          if (v38)
            v42 = (WTF::StringImpl **)(v38 + 8 * *(unsigned int *)(v38 - 4));
          else
            v42 = 0;
          if (v42 != v39)
          {
            v193 = (uint64_t *)(*(_QWORD *)(a1 + 96) + 8 * v36 - 8);
            do
            {
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v193, v39, a3, a4, a5, a6, a7, a8, (uint64_t)v247);
              v194 = v39 + 1;
              v39 = v41;
              if (v194 != v41)
              {
                v39 = v194;
                while ((unint64_t)*v39 + 1 <= 1)
                {
                  if (++v39 == v41)
                  {
                    v39 = v41;
                    break;
                  }
                }
              }
            }
            while (v39 != v42);
            v37 = *(unsigned int *)(a1 + 132);
          }
          if (v37 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198F0901CLL);
          }
          v43 = *(unsigned int *)(a1 + 108);
          if (!(_DWORD)v43)
          {
            __break(0xC471u);
            JUMPOUT(0x198F09024);
          }
          v44 = *(_QWORD *)(*v10 + 8 * v43 - 8);
          if (!v44)
          {
            v45 = 0;
            v46 = 0;
LABEL_54:
            v47 = (WTF::StringImpl **)(v44 + 8 * v46);
            goto LABEL_55;
          }
          v46 = *(unsigned int *)(v44 - 4);
          v47 = (WTF::StringImpl **)(v44 + 8 * v46);
          if (!*(_DWORD *)(v44 - 12))
          {
            v45 = (WTF::StringImpl **)(v44 + 8 * v46);
            goto LABEL_54;
          }
          v45 = *(WTF::StringImpl ***)(*v10 + 8 * v43 - 8);
          if ((_DWORD)v46)
          {
            v109 = 8 * v46;
            v45 = *(WTF::StringImpl ***)(*v10 + 8 * v43 - 8);
            while ((unint64_t)*v45 + 1 <= 1)
            {
              ++v45;
              v109 -= 8;
              if (!v109)
              {
                v45 = v47;
                break;
              }
            }
          }
LABEL_55:
          if (v44)
            v48 = (WTF::StringImpl **)(v44 + 8 * *(unsigned int *)(v44 - 4));
          else
            v48 = 0;
          if (v48 != v45)
          {
            v195 = (uint64_t *)(*(_QWORD *)(a1 + 120) + 8 * v37 - 16);
            do
            {
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v195, v45, a3, a4, a5, a6, a7, a8, (uint64_t)v247);
              v196 = v45 + 1;
              v45 = v47;
              if (v196 != v47)
              {
                v45 = v196;
                while ((unint64_t)*v45 + 1 <= 1)
                {
                  if (++v45 == v47)
                  {
                    v45 = v47;
                    break;
                  }
                }
              }
            }
            while (v45 != v48);
            v43 = *(unsigned int *)(a1 + 108);
          }
          if (!v43)
          {
            __break(0xC471u);
            JUMPOUT(0x198F0902CLL);
          }
          v49 = v43 - 1;
          v50 = *(_QWORD *)(*v10 + 8 * (v43 - 1));
          if (v50)
          {
            v131 = *(unsigned int *)(v50 - 4);
            if ((_DWORD)v131)
            {
              v132 = *(WTF::StringImpl ***)(*v10 + 8 * (v43 - 1));
              do
              {
                v133 = *v132;
                if (*v132 != (WTF::StringImpl *)-1)
                {
                  *v132 = 0;
                  if (v133)
                  {
                    if (*(_DWORD *)v133 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v133, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
                    }
                    else
                    {
                      *(_DWORD *)v133 -= 2;
                    }
                  }
                }
                ++v132;
                --v131;
              }
              while (v131);
            }
            WTF::fastFree(v50 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
          *(_DWORD *)(a1 + 108) = v49;
          v51 = *(unsigned int *)(a1 + 132);
          if (!(_DWORD)v51)
          {
            __break(0xC471u);
            JUMPOUT(0x198F09034);
          }
          v52 = v51 - 1;
          v53 = *(_QWORD *)(*v11 + 8 * (v51 - 1));
          if (v53)
          {
            v142 = *(unsigned int *)(v53 - 4);
            if ((_DWORD)v142)
            {
              v143 = *(WTF::StringImpl ***)(*v11 + 8 * v52);
              do
              {
                v144 = *v143;
                if (*v143 != (WTF::StringImpl *)-1)
                {
                  *v143 = 0;
                  if (v144)
                  {
                    if (*(_DWORD *)v144 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v144, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
                    }
                    else
                    {
                      *(_DWORD *)v144 -= 2;
                    }
                  }
                }
                ++v143;
                --v142;
              }
              while (v142);
            }
            WTF::fastFree(v53 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
          *(_DWORD *)(a1 + 132) = v52;
          v54 = *(unsigned int *)(a1 + 68);
          if (!(_DWORD)v54)
          {
            __break(0xC471u);
            JUMPOUT(0x198F0903CLL);
          }
          LODWORD(v9) = *(unsigned __int8 *)(v54 + *(_QWORD *)(a1 + 56) - 1);
          *(_DWORD *)(a1 + 68) = v54 - 1;
          if (!(_DWORD)v9)
            goto LABEL_24;
          if ((_DWORD)v9 == 2)
            goto LABEL_25;
          if (*(_BYTE *)(a1 + 32))
            goto LABEL_40;
          goto LABEL_24;
        case '*':
        case '+':
          goto LABEL_5;
        case '.':
          goto LABEL_263;
        default:
          if (v15 != 63)
            goto LABEL_22;
LABEL_5:
          v16 = v13 + 1;
          *(_DWORD *)(a1 + 28) = v13 + 1;
          LODWORD(v9) = v9;
          if (v9 != 1)
            goto LABEL_479;
          if (v16 != v12 && *(_BYTE *)(v14 + v16) == 63)
            goto LABEL_8;
          goto LABEL_40;
      }
    }
    if (*(unsigned __int8 *)(v14 + v13) <= 0x7Au)
      break;
    if (v15 != 124)
    {
      if (v15 != 123)
      {
        if (v15 == 125)
        {
LABEL_262:
          if (*(unsigned __int8 *)(a1 + 32) - 1 < 2)
          {
            v94 = 8;
            goto LABEL_189;
          }
LABEL_263:
          v20 = v13 + 1;
          goto LABEL_16;
        }
LABEL_22:
        LODWORD(v21) = v13 + 1;
LABEL_23:
        *(_DWORD *)(a1 + 28) = v21;
LABEL_24:
        LOBYTE(v9) = 1;
        goto LABEL_25;
      }
      v21 = (v13 + 1);
      *(_DWORD *)(a1 + 28) = v21;
      if ((_DWORD)v21 != v12 && *(unsigned __int8 *)(v14 + v21) - 48 <= 9)
      {
        v87 = v13 + 2;
        *(_DWORD *)(a1 + 28) = v13 + 2;
        v88 = *(unsigned __int8 *)(v14 + v21) - 48;
        if ((_DWORD)v13 + 2 == v12)
        {
          v87 = v12;
        }
        else
        {
          v89 = 0;
          while (*(unsigned __int8 *)(v14 + v87) - 48 <= 9)
          {
            if (v89 || v88 >= 0x1999999A)
            {
              v88 = 0;
              *(_DWORD *)(a1 + 28) = ++v87;
              v89 = 1;
            }
            else
            {
              v116 = v87++;
              *(_DWORD *)(a1 + 28) = v87;
              LODWORD(v116) = *(unsigned __int8 *)(v14 + v116) - 48;
              v117 = __CFADD__((_DWORD)v116, 10 * v88);
              v88 = v116 + 10 * v88;
              v89 = v117;
              if (v117)
                v88 = 0;
            }
            if (v87 == v12)
            {
              v87 = v12;
              break;
            }
          }
          if (v89)
            v88 = -1;
        }
        if (v87 != v12)
        {
          if (*(_BYTE *)(v14 + v87) != 44)
          {
            LODWORD(v90) = v87;
            v92 = v88;
            goto LABEL_179;
          }
          v90 = v87 + 1;
          *(_DWORD *)(a1 + 28) = v90;
          if ((_DWORD)v90 != v12)
          {
            if (*(unsigned __int8 *)(v14 + v90) - 48 > 9)
              goto LABEL_147;
            v91 = v87 + 2;
            *(_DWORD *)(a1 + 28) = v87 + 2;
            v92 = *(unsigned __int8 *)(v14 + v90) - 48;
            if (v91 == v12)
            {
              LODWORD(v90) = v12;
            }
            else
            {
              v93 = 0;
              LODWORD(v90) = v91;
              while (*(unsigned __int8 *)(v14 + v90) - 48 <= 9)
              {
                if (v93 || v92 >= 0x1999999A)
                {
                  v92 = 0;
                  LODWORD(v90) = v90 + 1;
                  *(_DWORD *)(a1 + 28) = v90;
                  v93 = 1;
                }
                else
                {
                  v129 = v90;
                  LODWORD(v90) = v90 + 1;
                  *(_DWORD *)(a1 + 28) = v90;
                  LODWORD(v129) = *(unsigned __int8 *)(v14 + v129) - 48;
                  v130 = __CFADD__((_DWORD)v129, 10 * v92);
                  v92 = v129 + 10 * v92;
                  v93 = v130;
                  if (v130)
                    v92 = 0;
                }
                if ((_DWORD)v90 == v12)
                {
                  LODWORD(v90) = v12;
                  break;
                }
              }
              if (v93)
LABEL_147:
                v92 = -1;
            }
LABEL_179:
            if ((_DWORD)v90 != v12 && *(_BYTE *)(v14 + v90) == 125)
            {
              v106 = v90 + 1;
              *(_DWORD *)(a1 + 28) = v90 + 1;
              if (v88 > v92)
              {
                v94 = 2;
                goto LABEL_189;
              }
              if (v88 == -1)
              {
                v94 = 4;
                goto LABEL_189;
              }
              LODWORD(v9) = v9;
              if (v9 != 1)
              {
LABEL_479:
                if ((_DWORD)v9 == 2)
                  v94 = 6;
                else
                  v94 = 3;
                goto LABEL_189;
              }
              if (v106 != v12 && *(_BYTE *)(v14 + v106) == 63)
              {
                LOBYTE(v9) = 0;
                v17 = v90 + 2;
LABEL_9:
                *(_DWORD *)(a1 + 28) = v17;
                goto LABEL_25;
              }
LABEL_40:
              LOBYTE(v9) = 0;
              goto LABEL_25;
            }
          }
        }
      }
      if (*(unsigned __int8 *)(a1 + 32) - 1 < 2)
      {
        v94 = 5;
        goto LABEL_189;
      }
      goto LABEL_23;
    }
    *(_DWORD *)(a1 + 28) = v13 + 1;
    v66 = *(unsigned int *)(a1 + 108);
    if (!(_DWORD)v66)
    {
      __break(0xC471u);
      JUMPOUT(0x198F09044);
    }
    v67 = *(unsigned int *)(a1 + 132);
    if (!(_DWORD)v67)
    {
      __break(0xC471u);
      JUMPOUT(0x198F0904CLL);
    }
    v68 = *(_QWORD *)(*v11 + 8 * v67 - 8);
    if (!v68)
    {
      v69 = 0;
      v70 = 0;
LABEL_108:
      v71 = (WTF::StringImpl **)(v68 + 8 * v70);
      goto LABEL_109;
    }
    v70 = *(unsigned int *)(v68 - 4);
    v71 = (WTF::StringImpl **)(v68 + 8 * v70);
    if (!*(_DWORD *)(v68 - 12))
    {
      v69 = (WTF::StringImpl **)(v68 + 8 * v70);
      goto LABEL_108;
    }
    v69 = *(WTF::StringImpl ***)(*v11 + 8 * v67 - 8);
    if ((_DWORD)v70)
    {
      v115 = 8 * v70;
      v69 = *(WTF::StringImpl ***)(*v11 + 8 * v67 - 8);
      while ((unint64_t)*v69 + 1 <= 1)
      {
        ++v69;
        v115 -= 8;
        if (!v115)
        {
          v69 = v71;
          break;
        }
      }
    }
LABEL_109:
    if (v68)
      v72 = (WTF::StringImpl **)(v68 + 8 * *(unsigned int *)(v68 - 4));
    else
      v72 = 0;
    if (v72 != v69)
    {
      v197 = (uint64_t *)(*(_QWORD *)(a1 + 96) + 8 * v66 - 8);
      do
      {
        v198 = v197;
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v197, v69, a3, a4, a5, a6, a7, a8, (uint64_t)v247);
        v199 = v69 + 1;
        v69 = v71;
        if (v199 != v71)
        {
          v69 = v199;
          while ((unint64_t)*v69 + 1 <= 1)
          {
            if (++v69 == v71)
            {
              v69 = v71;
              break;
            }
          }
        }
        v197 = v198;
      }
      while (v69 != v72);
      v67 = *(unsigned int *)(a1 + 132);
    }
    if (!v67)
    {
      __break(0xC471u);
      JUMPOUT(0x198F09054);
    }
    v73 = *(WTF::StringImpl ***)(*v11 + 8 * (v67 - 1));
    if (v73)
    {
      *(_QWORD *)(*v11 + 8 * (v67 - 1)) = 0;
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v73, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v67 = *(unsigned int *)(a1 + 132);
    }
    if (v67 < 2)
      goto LABEL_40;
    v74 = *v11 + 8 * v67;
    v75 = *(_QWORD *)(v74 - 16);
    if (v75)
    {
      v77 = *(unsigned int *)(v75 - 4);
      v78 = (WTF::StringImpl **)(v75 + 8 * v77);
      if (*(_DWORD *)(v75 - 12))
      {
        v76 = *(WTF::StringImpl ***)(v74 - 16);
        if ((_DWORD)v77)
        {
          v128 = 8 * v77;
          v76 = *(WTF::StringImpl ***)(v74 - 16);
          while ((unint64_t)*v76 + 1 <= 1)
          {
            ++v76;
            v128 -= 8;
            if (!v128)
            {
              v76 = v78;
              goto LABEL_119;
            }
          }
        }
        goto LABEL_119;
      }
      v76 = (WTF::StringImpl **)(v75 + 8 * v77);
    }
    else
    {
      v76 = 0;
      v77 = 0;
    }
    v78 = (WTF::StringImpl **)(v75 + 8 * v77);
LABEL_119:
    if (v75)
      v79 = (WTF::StringImpl **)(v75 + 8 * *(unsigned int *)(v75 - 4));
    else
      v79 = 0;
    if (v79 == v76)
      goto LABEL_40;
    v200 = (uint64_t *)(v74 - 8);
    do
    {
      v201 = v200;
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v200, v76, a3, a4, a5, a6, a7, a8, (uint64_t)v247);
      v202 = v76 + 1;
      v76 = v78;
      if (v202 != v78)
      {
        v76 = v202;
        while ((unint64_t)*v76 + 1 <= 1)
        {
          if (++v76 == v78)
          {
            v76 = v78;
            break;
          }
        }
      }
      LOBYTE(v9) = 0;
      v200 = v201;
    }
    while (v76 != v79);
LABEL_25:
    if (*(_BYTE *)(a1 + 8))
      return;
  }
  switch(*(_BYTE *)(v14 + v13))
  {
    case '[':
      v55 = *(unsigned __int8 *)(a1 + 32);
      if (v55 == 2)
      {
        JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::parseClassSet(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_24;
      }
      *(_DWORD *)(a1 + 28) = v13 + 1;
      if ((_DWORD)v13 + 1 != v12 && *(_BYTE *)(v14 + (v13 + 1)) == 94)
        *(_DWORD *)(a1 + 28) = v13 + 2;
      v56 = 0;
      v57 = 0;
      break;
    case '\\':
      v18 = (v13 + 1);
      *(_DWORD *)(a1 + 28) = v18;
      if ((_DWORD)v18 == v12)
      {
        LOBYTE(v9) = 0;
        *(_BYTE *)(a1 + 8) = 17;
      }
      else
      {
        v19 = *(unsigned __int8 *)(v14 + v18);
        switch(*(_BYTE *)(v14 + v18))
        {
          case '-':
            if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
              goto LABEL_195;
            goto LABEL_15;
          case '0':
            *(_DWORD *)(a1 + 28) = v13 + 2;
            if ((_DWORD)v13 + 2 == v12 || *(unsigned __int8 *)(v14 + (v13 + 2)) - 48 > 9)
              goto LABEL_454;
            if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
            {
              v214 = 23;
              goto LABEL_453;
            }
            v229 = a1;
            v230 = 2;
            goto LABEL_507;
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            v110 = v13 + 2;
            *(_DWORD *)(a1 + 28) = v13 + 2;
            v111 = *(unsigned __int8 *)(v14 + v18) - 48;
            if ((_DWORD)v13 + 2 == v12)
              goto LABEL_215;
            v112 = 0;
            v113 = v13 + 2;
            goto LABEL_212;
          case 'B':
          case 'b':
LABEL_8:
            LOBYTE(v9) = 0;
            v17 = v13 + 2;
            goto LABEL_9;
          case 'D':
          case 'S':
          case 'W':
          case 'd':
          case 'f':
          case 'n':
          case 'r':
          case 's':
          case 't':
          case 'v':
          case 'w':
            goto LABEL_15;
          case 'P':
          case 'p':
            v190 = v13 + 2;
            *(_DWORD *)(a1 + 28) = v13 + 2;
            v191 = *(unsigned __int8 *)(v14 + v18);
            if (!*(_BYTE *)(a1 + 32))
            {
              v224 = (unsigned __int8 *)a1;
              v223 = *(unsigned __int8 *)(v14 + v18);
LABEL_473:
              JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::ParseEscapeMode)0>(v224, v223);
              goto LABEL_24;
            }
            if (v190 == v12 || *(_BYTE *)(v14 + v190) != 123)
            {
              v107 = 25;
              goto LABEL_418;
            }
            *(_DWORD *)(a1 + 28) = v13 + 3;
            v192 = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeUnicodePropertyExpression(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            LOBYTE(v9) = 1;
            if (HIDWORD(v192) && v191 == 80 && (v192 - 329) <= 6)
            {
              v107 = 30;
              goto LABEL_418;
            }
            goto LABEL_25;
          case 'c':
            *(_DWORD *)(a1 + 28) = v13 + 2;
            if ((_DWORD)v13 + 2 == v12)
            {
              if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
                goto LABEL_466;
            }
            else
            {
              *(_DWORD *)(a1 + 28) = v13 + 3;
              if ((*(unsigned __int8 *)(v14 + (v13 + 2)) | 0x20u) - 97 < 0x1A)
                goto LABEL_454;
              if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
              {
                v214 = 24;
                goto LABEL_453;
              }
            }
            *(_DWORD *)(a1 + 28) = v18;
            goto LABEL_454;
          case 'k':
            v215 = v13 + 2;
            *(_DWORD *)(a1 + 28) = v13 + 2;
            if ((_DWORD)v13 + 2 == v12 || *(_BYTE *)(v14 + v215) != 60)
              goto LABEL_529;
            *(_DWORD *)(a1 + 28) = v13 + 3;
            JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeGroupName(&v249, a1);
            if (*(_BYTE *)(a1 + 8))
              goto LABEL_463;
            if (!v250)
              goto LABEL_528;
            v231 = v249;
            if (v249)
            {
              *(_DWORD *)v249 += 2;
              v243 = v231;
              v232 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::NamedCaptureGroups::contains(*(WTF **)(a1 + 88), &v243, v217);
              v233 = v232;
              if (*(_DWORD *)v231 == 2)
              {
                WTF::StringImpl::~StringImpl(v231, v216, (uint64_t)v217, v218, v219, v220, v221, v222);
                WTF::fastFree(v234, v235, v236, v237, v238, v239, v240, v241);
                if (v233)
                  goto LABEL_516;
              }
              else
              {
                *(_DWORD *)v231 -= 2;
                if ((v232 & 1) != 0)
                  goto LABEL_516;
              }
            }
            else
            {
              v243 = 0;
              if ((JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::NamedCaptureGroups::contains(*(WTF **)(a1 + 88), &v243, v217) & 1) != 0)goto LABEL_516;
            }
            if (!*(_BYTE *)(a1 + 48))
            {
LABEL_528:
              std::optional<WTF::String>::~optional((uint64_t)&v249, v216, (uint64_t)v217, v218, v219, v220, v221, v222);
LABEL_529:
              *(_DWORD *)(a1 + 28) = v215;
              if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
              {
                LOBYTE(v9) = 1;
                *(_BYTE *)(a1 + 49) = 1;
                goto LABEL_25;
              }
              goto LABEL_466;
            }
            if (v250)
            {
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(a1 + 144), &v249, v217, v218, v219, v220, v221, v222, (uint64_t)v247);
LABEL_516:
              if (v250)
              {
LABEL_463:
                std::optional<WTF::String>::~optional((uint64_t)&v249, v216, (uint64_t)v217, v218, v219, v220, v221, v222);
                goto LABEL_454;
              }
            }
            std::__throw_bad_optional_access[abi:sn180100]();
LABEL_552:
            v111 = 0;
            v113 = v175 + 1;
            *(_DWORD *)(a1 + 28) = v175 + 1;
            v112 = 1;
            while (v113 != v12)
            {
LABEL_212:
              if (*(unsigned __int8 *)(v14 + v113) - 48 > 9)
                break;
              v175 = v113;
              if (v112 || v111 >= 0x1999999A)
                goto LABEL_552;
              *(_DWORD *)(a1 + 28) = ++v113;
              v176 = *(unsigned __int8 *)(v14 + v175) - 48;
              v177 = __CFADD__(v176, 10 * v111);
              v111 = v176 + 10 * v111;
              v112 = v177;
              if (v177)
                v111 = 0;
            }
            if (v112)
              v111 = -1;
LABEL_215:
            if (v111 <= *(_DWORD *)(a1 + 36))
            {
              v114 = *(_DWORD *)(a1 + 44);
              if (v114 <= v111)
                v114 = v111;
              *(_DWORD *)(a1 + 44) = v114;
              goto LABEL_24;
            }
            *(_DWORD *)(a1 + 28) = v18;
            if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
            {
              v214 = 20;
              goto LABEL_453;
            }
            if (*(unsigned __int8 *)(v14 + v18) > 0x37u)
            {
              *(_DWORD *)(a1 + 28) = v110;
            }
            else
            {
              v229 = a1;
              v230 = 3;
LABEL_507:
              JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::consumeOctal(v229, v230);
            }
LABEL_454:
            LOBYTE(v9) = 1;
            break;
          case 'q':
            *(_DWORD *)(a1 + 28) = v13 + 2;
            v223 = *(unsigned __int8 *)(v14 + v18);
            v224 = (unsigned __int8 *)a1;
            goto LABEL_473;
          case 'u':
            JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::UnicodeParseContext)0>(a1);
            goto LABEL_24;
          case 'x':
            v181 = v13 + 2;
            *(_DWORD *)(a1 + 28) = v13 + 2;
            if ((_DWORD)v13 + 2 != v12)
            {
              v182 = *(unsigned __int8 *)(v14 + v181);
              v183 = v182 - 48;
              v184 = (v182 | 0x20) - 97;
              if (v183 < 0xA || v184 <= 5)
              {
                *(_DWORD *)(a1 + 28) = v13 + 3;
                if ((_DWORD)v13 + 3 != v12)
                {
                  v186 = *(unsigned __int8 *)(v14 + (v13 + 3));
                  if ((v186 - 48) < 0xA || (v186 | 0x20u) - 97 <= 5)
                  {
                    v20 = v13 + 4;
                    goto LABEL_16;
                  }
                }
              }
            }
            *(_DWORD *)(a1 + 28) = v181;
            if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
            {
LABEL_466:
              v214 = 22;
LABEL_453:
              *(_BYTE *)(a1 + 8) = v214;
            }
            goto LABEL_454;
          default:
            if (*(unsigned __int8 *)(a1 + 32) - 1 > 1
              || (v19 & 0x80) != 0
              || (v225 = memchr("^$\\.*+?()[]{}|/", v19, 0x10uLL), v19) && v225)
            {
LABEL_15:
              v20 = v13 + 2;
              goto LABEL_16;
            }
LABEL_195:
            v107 = 22;
LABEL_418:
            *(_BYTE *)(a1 + 8) = v107;
            goto LABEL_24;
        }
      }
      goto LABEL_25;
    case ']':
      goto LABEL_262;
    case '^':
LABEL_65:
      LOBYTE(v9) = 0;
      v17 = v13 + 1;
      goto LABEL_9;
    default:
      goto LABEL_22;
  }
  while (1)
  {
    v58 = *(_DWORD *)(a1 + 24);
    v59 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v59 == v58)
    {
      v94 = 13;
      goto LABEL_189;
    }
    v60 = *(_QWORD *)(a1 + 16);
    v61 = *(unsigned __int8 *)(v60 + v59);
    if (v61 != 92)
    {
      if (v61 != 93)
      {
        *(_DWORD *)(a1 + 28) = v59 + 1;
        v62 = *(unsigned __int8 *)(v60 + v59);
        switch((int)v56)
        {
          case 0:
            goto LABEL_90;
          case 1:
            if ((_DWORD)v62 == 45)
              v9 = 2;
            else
              v9 = 1;
            if ((_DWORD)v62 == 45)
              v62 = v57;
            else
              v62 = *(unsigned __int8 *)(v60 + v59);
            goto LABEL_88;
          case 2:
            goto LABEL_96;
          case 3:
            if ((_DWORD)v62 != 45)
              goto LABEL_90;
            v9 = 4;
            break;
          case 4:
            goto LABEL_151;
          default:
            goto LABEL_419;
        }
        goto LABEL_98;
      }
      v20 = v59 + 1;
LABEL_16:
      *(_DWORD *)(a1 + 28) = v20;
      goto LABEL_24;
    }
    v63 = (v59 + 1);
    *(_DWORD *)(a1 + 28) = v63;
    if ((_DWORD)v63 == v58)
    {
      v94 = 17;
      goto LABEL_189;
    }
    v64 = *(unsigned __int8 *)(v60 + v63);
    if (v64 != 117)
      break;
    v65 = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::UnicodeParseContext)0>(a1);
    if (*(_BYTE *)(a1 + 8))
      return;
    if (v65 == -1)
      v62 = 117;
    else
      v62 = v65;
    v9 = 1;
    if (v56 < 2)
      goto LABEL_88;
    if ((_DWORD)v56 == 2)
    {
LABEL_96:
      if (v57 > v62)
      {
LABEL_157:
        v94 = 14;
        goto LABEL_189;
      }
    }
    else
    {
      if ((_DWORD)v56 == 3)
        goto LABEL_88;
LABEL_151:
      if (v55 == 1)
        goto LABEL_152;
    }
LABEL_97:
    v9 = 0;
LABEL_98:
    v62 = v57;
LABEL_88:
    v56 = v9;
    v57 = v62;
    LOBYTE(v9) = 1;
    if (*(_BYTE *)(a1 + 8))
      goto LABEL_25;
  }
  switch(*(_BYTE *)(v60 + v63))
  {
    case 'P':
    case 'p':
      v187 = v59 + 2;
      *(_DWORD *)(a1 + 28) = v59 + 2;
      v62 = *(unsigned __int8 *)(v60 + v63);
      if (!*(_BYTE *)(a1 + 32))
      {
        if ((JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::ParseEscapeMode)1>(a1, *(unsigned __int8 *)(v60 + v63)) & 1) == 0)
        {
          switch((int)v56)
          {
            case 0:
            case 1:
            case 3:
              goto LABEL_102;
            case 2:
              goto LABEL_446;
            case 4:
              goto LABEL_173;
            default:
              break;
          }
        }
LABEL_436:
        v9 = v56;
LABEL_94:
        v62 = v57;
        goto LABEL_88;
      }
      if (v187 == v58 || *(_BYTE *)(v60 + v187) != 123)
      {
        v94 = 25;
        goto LABEL_189;
      }
      *(_DWORD *)(a1 + 28) = v59 + 3;
      v188 = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeUnicodePropertyExpression(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (HIDWORD(v188))
      {
        if ((_DWORD)v62 == 80 && (v188 - 329) <= 6)
        {
          v94 = 30;
          goto LABEL_189;
        }
        if (v56 >= 2 && (_DWORD)v56 != 3)
        {
LABEL_173:
          if (v55 == 1)
          {
LABEL_152:
            v94 = 15;
            goto LABEL_189;
          }
LABEL_174:
          v9 = 0;
          goto LABEL_94;
        }
        v9 = 3;
      }
      else
      {
LABEL_419:
        v9 = v56;
      }
      goto LABEL_98;
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'e':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'l':
    case 'm':
    case 'o':
    case 'u':
LABEL_100:
      if (*(unsigned __int8 *)(a1 + 32) - 1 > 1
        || (v64 & 0x80) != 0
        || ((v226 = memchr("^$\\.*+?()[]{}|/", *(unsigned __int8 *)(v60 + v63), 0x10uLL), v64)
          ? (v227 = v226 == 0)
          : (v227 = 1),
            !v227))
      {
LABEL_101:
        *(_DWORD *)(a1 + 28) = v59 + 2;
        v62 = *(unsigned __int8 *)(v60 + v63);
        switch((int)v56)
        {
          case 0:
          case 1:
          case 3:
            goto LABEL_102;
          case 2:
            if (v57 > v62)
              goto LABEL_157;
            goto LABEL_97;
          case 4:
            goto LABEL_173;
          default:
            goto LABEL_436;
        }
      }
      goto LABEL_488;
    case 'S':
    case 'W':
    case 'd':
    case 's':
    case 'w':
LABEL_92:
      *(_DWORD *)(a1 + 28) = v59 + 2;
      if (v56 >= 2 && (_DWORD)v56 != 3)
        goto LABEL_173;
      v9 = 3;
      goto LABEL_94;
    case 'b':
      *(_DWORD *)(a1 + 28) = v59 + 2;
      switch((int)v56)
      {
        case 0:
        case 1:
        case 3:
          v62 = 8;
          goto LABEL_90;
        case 2:
          if (v57 >= 9)
            goto LABEL_157;
          goto LABEL_97;
        case 4:
          goto LABEL_173;
        default:
          goto LABEL_436;
      }
    case 'c':
      *(_DWORD *)(a1 + 28) = v59 + 2;
      if ((_DWORD)v59 + 2 == v58)
      {
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
        {
LABEL_488:
          v94 = 22;
          goto LABEL_189;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 28) = v59 + 3;
        v228 = *(unsigned __int8 *)(v60 + (v59 + 2));
        if ((v228 | 0x20u) - 97 <= 0x19)
        {
          v62 = v228 & 0x1F;
          switch((int)v56)
          {
            case 0:
            case 1:
            case 3:
              goto LABEL_102;
            case 2:
              goto LABEL_446;
            case 4:
              goto LABEL_173;
            default:
              goto LABEL_436;
          }
        }
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
        {
          v94 = 24;
          goto LABEL_189;
        }
        if (v228 == 95 || (v228 - 48) <= 9)
        {
          v62 = v228 & 0x1F;
          switch((int)v56)
          {
            case 0:
            case 1:
            case 3:
              goto LABEL_102;
            case 2:
              goto LABEL_446;
            case 4:
              goto LABEL_173;
            default:
              goto LABEL_436;
          }
        }
      }
      *(_DWORD *)(a1 + 28) = v63;
      switch((int)v56)
      {
        case 0:
        case 1:
        case 3:
          v62 = 92;
          goto LABEL_102;
        case 2:
          if (v57 >= 0x5D)
            goto LABEL_157;
          goto LABEL_174;
        case 4:
          goto LABEL_173;
        default:
          goto LABEL_436;
      }
    case 'f':
      *(_DWORD *)(a1 + 28) = v59 + 2;
      switch((int)v56)
      {
        case 0:
        case 1:
        case 3:
          v62 = 12;
          goto LABEL_90;
        case 2:
          if (v57 >= 0xD)
            goto LABEL_157;
          goto LABEL_97;
        case 4:
          goto LABEL_173;
        default:
          goto LABEL_436;
      }
    case 'k':
      *(_DWORD *)(a1 + 28) = v59 + 2;
      if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
        goto LABEL_488;
      switch((int)v56)
      {
        case 0:
        case 1:
        case 3:
          v57 = 107;
          v56 = 1;
          break;
        case 2:
          if (v57 < 0x6C)
            goto LABEL_509;
          *(_BYTE *)(a1 + 8) = 14;
          v56 = 2;
          break;
        case 4:
          if (v55 == 1)
          {
            *(_BYTE *)(a1 + 8) = 15;
            v56 = 4;
          }
          else
          {
LABEL_509:
            v56 = 0;
          }
          break;
        default:
          break;
      }
      *(_BYTE *)(a1 + 49) = 1;
      goto LABEL_436;
    case 'n':
      *(_DWORD *)(a1 + 28) = v59 + 2;
      switch((int)v56)
      {
        case 0:
        case 1:
        case 3:
          v62 = 10;
          goto LABEL_90;
        case 2:
          if (v57 >= 0xB)
            goto LABEL_157;
          goto LABEL_97;
        case 4:
          goto LABEL_173;
        default:
          goto LABEL_436;
      }
    case 'q':
      *(_DWORD *)(a1 + 28) = v59 + 2;
      v62 = *(unsigned __int8 *)(v60 + v63);
      if ((JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::ParseEscapeMode)1>(a1, *(unsigned __int8 *)(v60 + v63)) & 1) == 0)
      {
        switch((int)v56)
        {
          case 0:
          case 1:
          case 3:
            goto LABEL_102;
          case 2:
            goto LABEL_446;
          case 4:
            goto LABEL_173;
          default:
            goto LABEL_436;
        }
      }
      goto LABEL_436;
    case 'r':
      *(_DWORD *)(a1 + 28) = v59 + 2;
      switch((int)v56)
      {
        case 0:
        case 1:
        case 3:
          v62 = 13;
          goto LABEL_90;
        case 2:
          if (v57 >= 0xE)
            goto LABEL_157;
          goto LABEL_97;
        case 4:
          goto LABEL_173;
        default:
          goto LABEL_436;
      }
    case 't':
      *(_DWORD *)(a1 + 28) = v59 + 2;
      switch((int)v56)
      {
        case 0:
        case 1:
        case 3:
          v62 = 9;
          goto LABEL_90;
        case 2:
          if (v57 >= 0xA)
            goto LABEL_157;
          goto LABEL_97;
        case 4:
          goto LABEL_173;
        default:
          goto LABEL_436;
      }
    case 'v':
      *(_DWORD *)(a1 + 28) = v59 + 2;
      switch((int)v56)
      {
        case 0:
        case 1:
        case 3:
          v62 = 11;
          goto LABEL_90;
        case 2:
          if (v57 >= 0xC)
            goto LABEL_157;
          goto LABEL_97;
        case 4:
          goto LABEL_173;
        default:
          goto LABEL_436;
      }
    case 'x':
      v95 = (v59 + 2);
      *(_DWORD *)(a1 + 28) = v95;
      if ((_DWORD)v95 != v58)
      {
        v96 = *(unsigned __int8 *)(v60 + v95);
        v97 = v96 - 48;
        v98 = (v96 | 0x20) - 97;
        if (v97 < 0xA || v98 <= 5)
        {
          v100 = (v59 + 3);
          *(_DWORD *)(a1 + 28) = v100;
          v101 = *(unsigned __int8 *)(v60 + v95);
          v102 = v101 >= 0x41 ? (v101 + 9) & 0xF : v101 - 48;
          if ((_DWORD)v100 != v58)
          {
            v103 = *(unsigned __int8 *)(v60 + v100);
            if ((v103 - 48) < 0xA || (v103 | 0x20u) - 97 < 6)
            {
              *(_DWORD *)(a1 + 28) = v59 + 4;
              v104 = *(unsigned __int8 *)(v60 + v100);
              if (v104 >= 0x41)
                v105 = (v104 + 9) & 0xF;
              else
                v105 = v104 - 48;
              v62 = v105 | (16 * v102);
              switch((int)v56)
              {
                case 0:
                case 1:
                case 3:
                  goto LABEL_90;
                case 2:
                  goto LABEL_96;
                case 4:
                  goto LABEL_173;
                default:
                  goto LABEL_419;
              }
            }
          }
        }
      }
      *(_DWORD *)(a1 + 28) = v95;
      if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
      {
        switch((int)v56)
        {
          case 0:
          case 1:
          case 3:
            v62 = 120;
            goto LABEL_102;
          case 2:
            if (v57 >= 0x79)
              goto LABEL_157;
            goto LABEL_174;
          case 4:
            goto LABEL_173;
          default:
            goto LABEL_436;
        }
      }
      goto LABEL_488;
    default:
      switch(*(_BYTE *)(v60 + v63))
      {
        case '-':
          if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          {
            *(_DWORD *)(a1 + 28) = v59 + 2;
            v62 = *(unsigned __int8 *)(v60 + v63);
            switch((int)v56)
            {
              case 0:
              case 1:
              case 3:
                goto LABEL_102;
              case 2:
                goto LABEL_446;
              case 4:
                goto LABEL_173;
              default:
                goto LABEL_436;
            }
          }
          goto LABEL_101;
        case '0':
          *(_DWORD *)(a1 + 28) = v59 + 2;
          if ((_DWORD)v59 + 2 == v58 || *(unsigned __int8 *)(v60 + (v59 + 2)) - 48 >= 0xA)
          {
            switch((int)v56)
            {
              case 0:
              case 1:
              case 3:
                v62 = 0;
                goto LABEL_90;
              case 2:
                if ((_DWORD)v57)
                  goto LABEL_157;
                v9 = 0;
                v62 = 0;
                break;
              case 4:
                goto LABEL_173;
              default:
                goto LABEL_419;
            }
            goto LABEL_88;
          }
          if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
          {
            v62 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::consumeOctal(a1, 2);
            switch((int)v56)
            {
              case 0:
              case 1:
              case 3:
                goto LABEL_102;
              case 2:
LABEL_446:
                if (v57 > v62)
                  goto LABEL_157;
                goto LABEL_174;
              case 4:
                goto LABEL_173;
              default:
                goto LABEL_436;
            }
          }
LABEL_448:
          v94 = 23;
LABEL_189:
          *(_BYTE *)(a1 + 8) = v94;
          return;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
          {
            if (v64 > 0x37)
            {
              *(_DWORD *)(a1 + 28) = v59 + 2;
              v62 = *(unsigned __int8 *)(v60 + v63);
            }
            else
            {
              v178 = 0;
              v62 = 0;
              v179 = v59 - v58 + 1;
              do
              {
                if (!(v179 + v178))
                  break;
                v180 = (v59 + v178 + 1);
                if ((*(_BYTE *)(v60 + v180) & 0xF8) != 0x30)
                  break;
                *(_DWORD *)(a1 + 28) = v59 + v178 + 2;
                v62 = *(unsigned __int8 *)(v60 + v180) + 8 * (_DWORD)v62 - 48;
                if (v178 == 2)
                  break;
                ++v178;
              }
              while (v62 < 0x20);
            }
            switch((int)v56)
            {
              case 0:
              case 1:
              case 3:
LABEL_90:
                v9 = 1;
                goto LABEL_88;
              case 2:
                goto LABEL_96;
              case 4:
                goto LABEL_173;
              default:
                goto LABEL_419;
            }
          }
          goto LABEL_448;
        case 'B':
          *(_DWORD *)(a1 + 28) = v59 + 2;
          if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
          {
            switch((int)v56)
            {
              case 0:
              case 1:
              case 3:
                v62 = 66;
LABEL_102:
                v9 = 1;
                goto LABEL_88;
              case 2:
                if (v57 >= 0x43)
                  goto LABEL_157;
                goto LABEL_174;
              case 4:
                goto LABEL_173;
              default:
                goto LABEL_436;
            }
          }
          goto LABEL_488;
        case 'D':
          goto LABEL_92;
        default:
          goto LABEL_100;
      }
  }
}

void JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::parseClassSet(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  int v11;
  char *v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  char *v24;
  char v25;
  unsigned int v26;
  int v27;
  char v28;
  int v29;
  uint64_t v30;
  char v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  unint64_t v37;
  char *v38;
  __int16 v39;
  char v40;
  unsigned int v41;
  char v42;
  unsigned int v43;
  int v44;
  int v45;
  BOOL v46;
  char v47;
  unsigned int v48;
  int v49;
  int v50;
  char *v51;
  char v52;
  int v55;
  unsigned int v56;
  uint64_t v57;
  char *v58;
  char v59;
  char *v60;
  char v61;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  void *v81;
  unsigned int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  void *v89;
  int v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v102;
  unsigned int v103;
  unsigned __int8 v104;
  int v105;
  unsigned int v106;
  unsigned __int8 v107;
  int v108;
  int v109;
  int v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  void *v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  unsigned int v121;
  unsigned __int8 v122;
  int v123;
  unsigned int v124;
  unsigned __int8 v125;
  unsigned int v126;
  void *v127;
  int v128;
  int v129;
  char v130;
  char *v131;
  char v132;
  char *v133;
  char v134;
  int v135;
  char v137;
  unint64_t v138;
  unint64_t v139;
  char v140;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  char v145;
  char v146;
  char v147;
  WTF *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  unsigned int v152;
  WTF *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int8 v156;
  char *v157;
  __int128 v158;
  __int128 v159;
  int v160;

  v9 = *(_QWORD *)(a1 + 16);
  v11 = *(_DWORD *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = v10 + 1;
  v12 = (char *)(a1 + 8);
  v150 = (char *)(a1 + 8);
  v153 = 0;
  v154 = 0;
  v151 = 0;
  v152 = 0;
  if (v10 + 1 == v11 || *(_BYTE *)(v9 + (v10 + 1)) != 94)
  {
    v13 = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 28) = v10 + 2;
    v13 = 1;
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  BYTE6(v151) = v13;
  v149 = (char *)(a1 + 8);
  while (2)
  {
    v18 = *(_DWORD *)(a1 + 24);
    v19 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v19 == v18)
      goto LABEL_653;
    v20 = *(_QWORD *)(a1 + 16);
    v21 = *(unsigned __int8 *)(v20 + v19);
    if (v21 <= 0x5A)
    {
      if (v21 == 38)
      {
        *(_DWORD *)(a1 + 28) = v19 + 1;
        if ((_DWORD)v19 + 1 != v18)
        {
          v32 = *(unsigned __int8 *)(v20 + (v19 + 1));
          if (v32 == 38)
          {
            *(_DWORD *)(a1 + 28) = v19 + 2;
            if ((_DWORD)v19 + 2 != v18 && *(_BYTE *)(v20 + (v19 + 2)) != 38)
            {
              v12 = v149;
              if ((_DWORD)v151)
              {
                v17 = v16;
                if ((v16 | 2) == 2)
                {
                  v14 = 2;
                  BYTE4(v151) = 2;
                  LODWORD(v151) = 7;
                  goto LABEL_78;
                }
              }
LABEL_128:
              v58 = v150;
              v59 = 29;
LABEL_129:
              *v58 = v59;
              goto LABEL_627;
            }
            goto LABEL_655;
          }
          v43 = *(unsigned __int8 *)(v20 + v19);
          if (*(_BYTE *)(v20 + v19))
          {
            if ((v43 & 0x80) == 0)
            {
              if (memchr("()[]{}/|)", *(unsigned __int8 *)(v20 + v19), 0xAuLL))
                goto LABEL_655;
                goto LABEL_667;
            }
            v44 = HIBYTE(v151);
            HIBYTE(v151) = 0;
            v12 = v149;
            switch((int)v151)
            {
              case 0:
              case 7:
                goto LABEL_143;
              case 1:
                if (v17 >= 2)
                  goto LABEL_128;
                if (v43 == 45)
                {
                  v45 = 2;
                  goto LABEL_148;
                }
                if (!v17)
                {
                  v14 = 1;
                  BYTE4(v151) = 1;
                  v15 = 1;
                  v16 = 1;
                }
                v17 = 1;
                v152 = v43;
                LODWORD(v151) = 1;
                goto LABEL_627;
              case 2:
                if (v152 > v43)
                {
                  v58 = v150;
                  v59 = 14;
                  goto LABEL_129;
                }
                if (!v17)
                {
                  v14 = 1;
                  BYTE4(v151) = 1;
                  v15 = 1;
                  v16 = 1;
                  v17 = 1;
                }
                v45 = 5;
LABEL_148:
                LODWORD(v151) = v45;
                break;
              case 3:
                if (v43 != 45 || v17 > 1)
                  goto LABEL_141;
                v45 = 4;
                goto LABEL_148;
              case 4:
                v58 = v150;
                v59 = 15;
                goto LABEL_129;
              case 5:
LABEL_141:
                if (!v17)
                {
                  v14 = 1;
                  BYTE4(v151) = 1;
                  v15 = 1;
                  v16 = 1;
                  v17 = 1;
                }
LABEL_143:
                if (v43 != 45 || v44 != 0)
                  goto LABEL_147;
                v58 = v150;
                v59 = 31;
                goto LABEL_129;
              case 6:
                if (v17 >= 2)
                  *v150 = 29;
                if (v43 == 45)
                  goto LABEL_128;
                if (!v17)
                {
                  v14 = 1;
                  BYTE4(v151) = 1;
                  v15 = 1;
                  v16 = 1;
                  v17 = 1;
                }
LABEL_147:
                v152 = v43;
                v45 = 1;
                goto LABEL_148;
              default:
LABEL_160:
                v12 = v149;
                goto LABEL_627;
            }
            goto LABEL_627;
          }
LABEL_655:
          v147 = 31;
LABEL_656:
          *v149 = v147;
          goto LABEL_657;
        }
      }
      else
      {
        if (v21 != 45)
        {
LABEL_43:
          v33 = v19 + 1;
          *(_DWORD *)(a1 + 28) = v19 + 1;
          v34 = *(unsigned __int8 *)(v20 + v19);
          if (!*(_BYTE *)(v20 + v19))
            goto LABEL_660;
          if ((v34 & 0x80) != 0)
            goto LABEL_49;
          if (memchr("()[]{}/|)", *(unsigned __int8 *)(v20 + v19), 0xAuLL))
          {
LABEL_660:
            v146 = 31;
          }
          else
          {
            {
LABEL_49:
              v14 = BYTE4(v151);
              v35 = HIBYTE(v151);
              HIBYTE(v151) = 0;
              switch((int)v151)
              {
                case 0:
                case 7:
                  goto LABEL_103;
                case 1:
                  if (BYTE4(v151) >= 2u)
                    goto LABEL_95;
                  if (v34 == 45)
                  {
                    v36 = 2;
                    goto LABEL_625;
                  }
                  if (!BYTE4(v151))
                    BYTE4(v151) = 1;
                  v14 = 1;
                  v152 = v34;
                  LODWORD(v151) = 1;
                  v15 = 1;
                  goto LABEL_416;
                case 2:
                  if (v152 > v34)
                  {
                    v51 = v150;
                    v52 = 14;
                    goto LABEL_110;
                  }
                  if (!BYTE4(v151))
                  {
                    v14 = 1;
                    BYTE4(v151) = 1;
                  }
                  v36 = 5;
                  goto LABEL_625;
                case 3:
                  if (v34 != 45 || BYTE4(v151) > 1u)
                    goto LABEL_101;
                  v36 = 4;
                  goto LABEL_625;
                case 4:
                  v51 = v150;
                  v52 = 15;
                  goto LABEL_110;
                case 5:
LABEL_101:
                  if (!BYTE4(v151))
                  {
                    v14 = 1;
                    BYTE4(v151) = 1;
                  }
LABEL_103:
                  if (v34 != 45 || v35 != 0)
                    goto LABEL_107;
                  v51 = v150;
                  v52 = 31;
                  goto LABEL_110;
                case 6:
                  if (BYTE4(v151) >= 2u)
                    *v150 = 29;
                  if (v34 != 45)
                  {
                    if (!BYTE4(v151))
                    {
                      v14 = 1;
                      BYTE4(v151) = 1;
                    }
LABEL_107:
                    v152 = v34;
                    v36 = 1;
                    goto LABEL_625;
                  }
LABEL_95:
                  v51 = v150;
                  v52 = 29;
LABEL_110:
                  *v51 = v52;
                  break;
                default:
                  goto LABEL_626;
              }
              goto LABEL_626;
            }
LABEL_661:
            v146 = 29;
          }
LABEL_654:
          *v12 = v146;
          goto LABEL_657;
        }
        *(_DWORD *)(a1 + 28) = v19 + 1;
        if ((_DWORD)v19 + 1 != v18)
        {
          v27 = *(unsigned __int8 *)(v20 + (v19 + 1));
          if (v27 == 45)
          {
            *(_DWORD *)(a1 + 28) = v19 + 2;
            if ((_DWORD)v19 + 2 != v18 && *(_BYTE *)(v20 + (v19 + 2)) != 45)
            {
              v12 = v149;
              if ((_DWORD)v151)
              {
                if (!v14 || (v15 = v14, v16 = v14, v17 = v14, v14 == 3))
                {
                  v14 = 3;
                  BYTE4(v151) = 3;
                  LODWORD(v151) = 7;
                  v15 = 3;
                  v16 = 3;
                  v17 = 3;
                  goto LABEL_627;
                }
              }
              goto LABEL_128;
            }
            goto LABEL_655;
          }
          v48 = *(unsigned __int8 *)(v20 + v19);
          if (*(_BYTE *)(v20 + v19))
          {
            if ((v48 & 0x80) != 0)
              goto LABEL_84;
            if (!memchr("()[]{}/|)", *(unsigned __int8 *)(v20 + v19), 0xAuLL))
            {
              {
LABEL_84:
                v49 = HIBYTE(v151);
                HIBYTE(v151) = 0;
                v12 = v149;
                switch((int)v151)
                {
                  case 0:
                  case 7:
                    goto LABEL_156;
                  case 1:
                    if (v15 >= 2)
                      goto LABEL_135;
                    if (v48 == 45)
                    {
                      v50 = 2;
                      goto LABEL_186;
                    }
                    if (!v15)
                    {
                      v14 = 1;
                      BYTE4(v151) = 1;
                    }
                    v15 = 1;
                    v152 = v48;
                    LODWORD(v151) = 1;
LABEL_416:
                    v16 = 1;
                    v17 = 1;
                    goto LABEL_627;
                  case 2:
                    if (v152 > v48)
                    {
                      v60 = v150;
                      v61 = 14;
                      goto LABEL_162;
                    }
                    if (!v15)
                    {
                      v14 = 1;
                      BYTE4(v151) = 1;
                      v15 = 1;
                    }
                    v50 = 5;
                    goto LABEL_186;
                  case 3:
                    if (v48 != 45 || v15 > 1)
                      goto LABEL_154;
                    v50 = 4;
                    goto LABEL_186;
                  case 4:
                    v60 = v150;
                    v61 = 15;
                    goto LABEL_162;
                  case 5:
LABEL_154:
                    if (!v15)
                    {
                      v14 = 1;
                      BYTE4(v151) = 1;
                      v15 = 1;
                    }
LABEL_156:
                    if (v48 != 45 || v49)
                      goto LABEL_185;
                    v60 = v150;
                    v61 = 31;
                    goto LABEL_162;
                  case 6:
                    if (v15 >= 2)
                      *v150 = 29;
                    if (v48 == 45)
                    {
LABEL_135:
                      v60 = v150;
                      v61 = 29;
LABEL_162:
                      *v60 = v61;
                    }
                    else
                    {
                      if (!v15)
                      {
                        v14 = 1;
                        BYTE4(v151) = 1;
                        v15 = 1;
                      }
LABEL_185:
                      v152 = v48;
                      v50 = 1;
LABEL_186:
                      LODWORD(v151) = v50;
                    }
                    v16 = v15;
                    v17 = v15;
                    break;
                  default:
                    v16 = v15;
                    v17 = v15;
                    goto LABEL_160;
                }
                goto LABEL_627;
              }
LABEL_667:
              v147 = 29;
              goto LABEL_656;
            }
          }
          goto LABEL_655;
        }
      }
LABEL_653:
      v146 = 13;
      goto LABEL_654;
    }
    if (v21 == 91)
    {
      *(_DWORD *)(a1 + 28) = v19 + 1;
      if ((_DWORD)v19 + 1 == v18 || *(_BYTE *)(v20 + (v19 + 1)) != 94)
      {
        v28 = 0;
      }
      else
      {
        *(_DWORD *)(a1 + 28) = v19 + 2;
        v28 = 1;
      }
      LOWORD(v155) = WORD2(v151);
      BYTE2(v155) = BYTE6(v151);
      if (HIDWORD(v154) == (_DWORD)v154)
      {
        v37 = WTF::Vector<JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::NestingState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v153, HIDWORD(v154) + 1, (unint64_t)&v155);
        v38 = (char *)v153 + 3 * HIDWORD(v154);
        v39 = *(_WORD *)v37;
        v40 = *(_BYTE *)(v37 + 2);
      }
      else
      {
        v38 = (char *)v153 + 3 * HIDWORD(v154);
        v39 = v155;
        v40 = BYTE2(v155);
      }
      v38[2] = v40;
      *(_WORD *)v38 = v39;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      ++HIDWORD(v154);
      WORD2(v151) = 0;
      BYTE6(v151) = v28;
      goto LABEL_627;
    }
    if (v21 != 92)
    {
      if (v21 == 93)
      {
        *(_DWORD *)(a1 + 28) = v19 + 1;
        v22 = v151;
        if ((_DWORD)v151 == 1)
          v22 = 0;
        v23 = BYTE5(v151);
        if (BYTE6(v151) && BYTE5(v151))
          *v150 = 30;
        if (!HIDWORD(v154))
        {
          if (v22 == 7)
            *v150 = 31;
          if (BYTE6(v151) && BYTE5(v151))
            *v150 = 30;
          goto LABEL_657;
        }
        v24 = (char *)v153 + 3 * HIDWORD(v154);
        v25 = *(v24 - 1);
        LODWORD(v24) = *(unsigned __int16 *)(v24 - 3);
        --HIDWORD(v154);
        v14 = v24;
        BYTE4(v151) = (_BYTE)v24;
        BYTE6(v151) = v25 & 1;
        v26 = (v24 >> 8) & 1;
        BYTE5(v151) = v26;
        LODWORD(v151) = 6;
        if (v14 < 2)
        {
          BYTE5(v151) = v26 | v23;
          goto LABEL_626;
        }
        v15 = v14;
        v16 = v14;
        v17 = v14;
        if (v14 != 2)
          goto LABEL_627;
        if (v23)
          v46 = v26 == 0;
        else
          v46 = 1;
        v47 = !v46;
        BYTE5(v151) = v47;
        v14 = 2;
LABEL_78:
        v15 = 2;
        v16 = 2;
        v17 = 2;
        goto LABEL_627;
      }
      goto LABEL_43;
    }
    v29 = v151;
    switch((int)v151)
    {
      case 0:
      case 7:
        goto LABEL_34;
      case 1:
        if (v14 > 1)
          goto LABEL_661;
        v29 = 0;
        LODWORD(v151) = 0;
LABEL_34:
        HIBYTE(v151) = 1;
        v30 = (v19 + 1);
        *(_DWORD *)(a1 + 28) = v30;
        if ((_DWORD)v30 == v18)
        {
          v31 = 0;
          *v12 = 17;
          goto LABEL_612;
        }
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        if (v14 < 2)
          goto LABEL_34;
        goto LABEL_661;
      default:
        goto LABEL_661;
    }
    v41 = *(unsigned __int8 *)(v20 + v30);
    switch(*(_BYTE *)(v20 + v30))
    {
      case '-':
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
        {
          *(_DWORD *)(a1 + 28) = v19 + 2;
          v56 = *(unsigned __int8 *)(v20 + v30);
          HIBYTE(v151) = 0;
          switch(v29)
          {
            case 0:
            case 7:
              goto LABEL_561;
            case 1:
              goto LABEL_506;
            case 2:
              goto LABEL_510;
            case 3:
              goto LABEL_517;
            case 4:
              goto LABEL_509;
            case 5:
              goto LABEL_559;
            case 6:
              goto LABEL_512;
            default:
              goto LABEL_611;
          }
        }
        goto LABEL_355;
      case '0':
        v115 = (v19 + 2);
        *(_DWORD *)(a1 + 28) = v115;
        if ((_DWORD)v115 == v18
          || (v116 = *(unsigned __int8 *)(v20 + v115), (v116 - 48) >= 0xA))
        {
          HIBYTE(v151) = 0;
          switch(v29)
          {
            case 0:
            case 7:
              goto LABEL_565;
            case 1:
              if (v14 >= 2)
                goto LABEL_515;
              goto LABEL_534;
            case 2:
              if (!v152)
                goto LABEL_458;
              goto LABEL_511;
            case 3:
            case 5:
              goto LABEL_534;
            case 4:
              goto LABEL_509;
            case 6:
              if (v14 >= 2)
              {
                *v150 = 29;
              }
              else
              {
LABEL_534:
                if (!v14)
                  BYTE4(v151) = 1;
              }
LABEL_565:
              v31 = 1;
              v152 = 0;
              break;
            default:
              goto LABEL_611;
          }
          goto LABEL_563;
        }
        if (*(unsigned __int8 *)(a1 + 32) - 1 >= 2)
        {
          if ((v116 & 0xF8) == 0x30)
          {
            v117 = (v19 + 3);
            *(_DWORD *)(a1 + 28) = v117;
            v56 = *(unsigned __int8 *)(v20 + v115) - 48;
            if ((_DWORD)v117 != v18 && v56 <= 0x1F && (*(_BYTE *)(v20 + v117) & 0xF8) == 0x30)
            {
              *(_DWORD *)(a1 + 28) = v19 + 4;
              v56 = *(unsigned __int8 *)(v20 + v117) + 8 * v56 - 48;
            }
          }
          else
          {
            v56 = 0;
          }
          HIBYTE(v151) = 0;
          switch(v29)
          {
            case 0:
            case 7:
              goto LABEL_561;
            case 1:
              goto LABEL_506;
            case 2:
              goto LABEL_510;
            case 3:
              goto LABEL_517;
            case 4:
              goto LABEL_509;
            case 5:
              goto LABEL_559;
            case 6:
              goto LABEL_512;
            default:
              goto LABEL_611;
          }
        }
LABEL_60:
        v42 = 23;
        goto LABEL_610;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
        {
          if (v41 > 0x37)
          {
            *(_DWORD *)(a1 + 28) = v19 + 2;
            v56 = *(unsigned __int8 *)(v20 + v30);
          }
          else
          {
            v55 = 0;
            v56 = 0;
            do
            {
              if (!((_DWORD)v19 - v18 + 1 + v55))
                break;
              v57 = (v19 + v55 + 1);
              if ((*(_BYTE *)(v20 + v57) & 0xF8) != 0x30)
                break;
              *(_DWORD *)(a1 + 28) = v19 + v55 + 2;
              v56 = *(unsigned __int8 *)(v20 + v57) + 8 * v56 - 48;
              if (v55 == 2)
                break;
              ++v55;
            }
            while (v56 < 0x20);
          }
          HIBYTE(v151) = 0;
          switch(v29)
          {
            case 0:
            case 7:
              goto LABEL_561;
            case 1:
              goto LABEL_506;
            case 2:
              goto LABEL_510;
            case 3:
              goto LABEL_517;
            case 4:
              goto LABEL_509;
            case 5:
              goto LABEL_559;
            case 6:
              goto LABEL_512;
            default:
              goto LABEL_611;
          }
        }
        goto LABEL_60;
      case 'B':
        *(_DWORD *)(a1 + 28) = v19 + 2;
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          goto LABEL_609;
        HIBYTE(v151) = 0;
        switch(v29)
        {
          case 0:
          case 7:
            goto LABEL_340;
          case 1:
            if (v14 >= 2)
              goto LABEL_515;
            goto LABEL_338;
          case 2:
            if (v152 < 0x43)
              goto LABEL_458;
            goto LABEL_511;
          case 3:
          case 5:
LABEL_338:
            if (!v14)
              BYTE4(v151) = 1;
LABEL_340:
            v31 = 1;
            v56 = 66;
            goto LABEL_562;
          case 4:
            goto LABEL_509;
          case 6:
            if (v14 < 2)
            {
              v56 = 66;
              goto LABEL_559;
            }
            *v150 = 29;
            v56 = 66;
            break;
          default:
            goto LABEL_611;
        }
        goto LABEL_561;
      case 'D':
        *(_DWORD *)(a1 + 28) = v19 + 2;
        switch(v29)
        {
          case 0:
          case 3:
          case 7:
            goto LABEL_387;
          case 1:
            goto LABEL_432;
          case 2:
          case 4:
            goto LABEL_509;
          case 5:
            goto LABEL_433;
          case 6:
            goto LABEL_429;
          default:
            goto LABEL_611;
        }
        goto LABEL_611;
      case 'P':
      case 'p':
        v64 = v19 + 2;
        *(_DWORD *)(a1 + 28) = v19 + 2;
        v65 = *(unsigned __int8 *)(v20 + v30);
        if (!*(_BYTE *)(a1 + 32))
        {
          HIBYTE(v151) = 0;
          switch(v29)
          {
            case 0:
            case 7:
              goto LABEL_498;
            case 1:
              if (v14 >= 2)
                goto LABEL_515;
              if (v65 != 45)
                goto LABEL_496;
              goto LABEL_508;
            case 2:
              if (v152 <= v65)
                goto LABEL_458;
              goto LABEL_511;
            case 3:
              if (v14 <= 1 && v65 == 45)
                goto LABEL_519;
              goto LABEL_496;
            case 4:
              goto LABEL_509;
            case 5:
              goto LABEL_496;
            case 6:
              if (v14 >= 2)
                *v150 = 29;
              if (v65 == 45)
                goto LABEL_515;
LABEL_496:
              if (!v14)
                BYTE4(v151) = 1;
LABEL_498:
              v31 = 1;
              v152 = v65;
              break;
            default:
              goto LABEL_611;
          }
          goto LABEL_563;
        }
        if (v64 == v18 || *(_BYTE *)(v20 + v64) != 123)
        {
          v42 = 25;
          goto LABEL_610;
        }
        *(_DWORD *)(a1 + 28) = v19 + 3;
        v66 = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeUnicodePropertyExpression(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        if (HIDWORD(v66))
        {
          v67 = v66 - 329;
          if (v65 == 80 && v67 <= 6)
          {
            *v12 = 30;
          }
          else
          {
            v14 = BYTE4(v151);
            switch((int)v151)
            {
              case 0:
              case 3:
              case 7:
                goto LABEL_500;
              case 1:
                if (BYTE4(v151) >= 2u)
                  goto LABEL_515;
                goto LABEL_582;
              case 2:
              case 4:
                goto LABEL_509;
              case 5:
LABEL_582:
                if (BYTE4(v151) == 2)
                  goto LABEL_586;
                if (BYTE4(v151) == 1)
                  goto LABEL_501;
                if (BYTE4(v151))
                  break;
                BYTE4(v151) = 1;
LABEL_501:
                v130 = BYTE5(v151) | (v67 < 7);
LABEL_592:
                BYTE5(v151) = v130;
                break;
              case 6:
                if (BYTE4(v151) >= 2u)
                  *v150 = 29;
LABEL_500:
                if (BYTE4(v151) < 2u)
                  goto LABEL_501;
                if (BYTE4(v151) != 2)
                  break;
LABEL_586:
                v130 = v67 < 7 && BYTE5(v151) != 0;
                goto LABEL_592;
              default:
                v31 = 1;
                goto LABEL_613;
            }
LABEL_437:
            v128 = 3;
LABEL_438:
            LODWORD(v151) = v128;
          }
        }
        goto LABEL_611;
      case 'S':
        *(_DWORD *)(a1 + 28) = v19 + 2;
        switch(v29)
        {
          case 0:
          case 3:
          case 7:
            goto LABEL_387;
          case 1:
            goto LABEL_432;
          case 2:
          case 4:
            goto LABEL_509;
          case 5:
            goto LABEL_433;
          case 6:
            goto LABEL_429;
          default:
            goto LABEL_611;
        }
        goto LABEL_611;
      case 'W':
        *(_DWORD *)(a1 + 28) = v19 + 2;
        switch(v29)
        {
          case 0:
          case 3:
          case 7:
            goto LABEL_387;
          case 1:
            goto LABEL_432;
          case 2:
          case 4:
            goto LABEL_509;
          case 5:
            goto LABEL_433;
          case 6:
            goto LABEL_429;
          default:
            goto LABEL_611;
        }
        goto LABEL_611;
      case 'b':
        *(_DWORD *)(a1 + 28) = v19 + 2;
        HIBYTE(v151) = 0;
        switch(v29)
        {
          case 0:
          case 7:
            goto LABEL_372;
          case 1:
            if (v14 >= 2)
              goto LABEL_515;
            goto LABEL_370;
          case 2:
            if (v152 < 9)
              goto LABEL_458;
            goto LABEL_511;
          case 3:
          case 5:
LABEL_370:
            if (!v14)
              BYTE4(v151) = 1;
LABEL_372:
            v31 = 1;
            v56 = 8;
            goto LABEL_562;
          case 4:
            goto LABEL_509;
          case 6:
            if (v14 < 2)
            {
              v56 = 8;
              goto LABEL_559;
            }
            *v150 = 29;
            v56 = 8;
            break;
          default:
            goto LABEL_611;
        }
        goto LABEL_561;
      case 'c':
        *(_DWORD *)(a1 + 28) = v19 + 2;
        if ((_DWORD)v19 + 2 == v18)
        {
          if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
            goto LABEL_609;
LABEL_395:
          *(_DWORD *)(a1 + 28) = v30;
          HIBYTE(v151) = 0;
          switch(v29)
          {
            case 0:
            case 7:
              goto LABEL_399;
            case 1:
              if (v14 >= 2)
                goto LABEL_515;
              goto LABEL_397;
            case 2:
              if (v152 < 0x5D)
                goto LABEL_458;
              goto LABEL_511;
            case 3:
            case 5:
LABEL_397:
              if (!v14)
                BYTE4(v151) = 1;
LABEL_399:
              v31 = 1;
              v56 = 92;
              goto LABEL_562;
            case 4:
              goto LABEL_509;
            case 6:
              if (v14 < 2)
              {
                v56 = 92;
                goto LABEL_559;
              }
              *v150 = 29;
              v56 = 92;
              break;
            default:
              goto LABEL_611;
          }
          goto LABEL_561;
        }
        *(_DWORD *)(a1 + 28) = v19 + 3;
        v129 = *(unsigned __int8 *)(v20 + (v19 + 2));
        if ((v129 | 0x20u) - 97 <= 0x19)
        {
          HIBYTE(v151) = 0;
          v56 = v129 & 0x1F;
          switch(v29)
          {
            case 0:
            case 7:
              goto LABEL_561;
            case 1:
              goto LABEL_444;
            case 2:
              goto LABEL_510;
            case 3:
            case 5:
              goto LABEL_559;
            case 4:
              goto LABEL_509;
            case 6:
              goto LABEL_451;
            default:
              goto LABEL_611;
          }
        }
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
        {
          v42 = 24;
          goto LABEL_610;
        }
        if (v129 != 95 && (v129 - 48) > 9)
          goto LABEL_395;
        HIBYTE(v151) = 0;
        v56 = v129 & 0x1F;
        switch(v29)
        {
          case 0:
          case 7:
            break;
          case 1:
LABEL_444:
            if (v14 < 2)
              goto LABEL_559;
            goto LABEL_515;
          case 2:
            goto LABEL_510;
          case 3:
          case 5:
            goto LABEL_559;
          case 4:
            goto LABEL_509;
          case 6:
LABEL_451:
            if (v14 < 2)
              goto LABEL_559;
            *v150 = 29;
            break;
          default:
            goto LABEL_611;
        }
LABEL_561:
        v31 = 1;
LABEL_562:
        v152 = v56;
        goto LABEL_563;
      case 'd':
        *(_DWORD *)(a1 + 28) = v19 + 2;
        switch(v29)
        {
          case 0:
          case 3:
          case 7:
            goto LABEL_387;
          case 1:
            goto LABEL_432;
          case 2:
          case 4:
            goto LABEL_509;
          case 5:
            goto LABEL_433;
          case 6:
            goto LABEL_429;
          default:
            goto LABEL_611;
        }
        goto LABEL_611;
      case 'f':
        *(_DWORD *)(a1 + 28) = v19 + 2;
        HIBYTE(v151) = 0;
        switch(v29)
        {
          case 0:
          case 7:
            goto LABEL_392;
          case 1:
            if (v14 >= 2)
              goto LABEL_515;
            goto LABEL_390;
          case 2:
            if (v152 < 0xD)
              goto LABEL_458;
            goto LABEL_511;
          case 3:
          case 5:
LABEL_390:
            if (!v14)
              BYTE4(v151) = 1;
LABEL_392:
            v31 = 1;
            v56 = 12;
            goto LABEL_562;
          case 4:
            goto LABEL_509;
          case 6:
            if (v14 < 2)
            {
              v56 = 12;
              goto LABEL_559;
            }
            *v150 = 29;
            v56 = 12;
            break;
          default:
            goto LABEL_611;
        }
        goto LABEL_561;
      case 'k':
        *(_DWORD *)(a1 + 28) = v19 + 2;
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          goto LABEL_609;
        HIBYTE(v151) = 0;
        switch(v29)
        {
          case 0:
          case 7:
            goto LABEL_193;
          case 1:
            if (v14 < 2)
              goto LABEL_191;
            v133 = v150;
            v134 = 29;
            goto LABEL_567;
          case 2:
            if (v152 < 0x6C)
            {
              if (!v14)
                BYTE4(v151) = 1;
              v68 = 5;
LABEL_195:
              LODWORD(v151) = v68;
            }
            else
            {
              v133 = v150;
              v134 = 14;
LABEL_567:
              *v133 = v134;
            }
LABEL_568:
            v31 = 1;
            *(_BYTE *)(a1 + 49) = 1;
            break;
          case 3:
          case 5:
LABEL_191:
            if (!v14)
              BYTE4(v151) = 1;
LABEL_193:
            v152 = 107;
            goto LABEL_194;
          case 4:
            v133 = v150;
            v134 = 15;
            goto LABEL_567;
          case 6:
            if (v14 >= 2)
            {
              *v150 = 29;
            }
            else if (!v14)
            {
              BYTE4(v151) = 1;
            }
            v152 = 107;
LABEL_194:
            v68 = 1;
            goto LABEL_195;
          default:
            goto LABEL_568;
        }
        goto LABEL_612;
      case 'n':
        *(_DWORD *)(a1 + 28) = v19 + 2;
        HIBYTE(v151) = 0;
        switch(v29)
        {
          case 0:
          case 7:
            goto LABEL_345;
          case 1:
            if (v14 >= 2)
              goto LABEL_515;
            goto LABEL_343;
          case 2:
            if (v152 < 0xB)
              goto LABEL_458;
            goto LABEL_511;
          case 3:
          case 5:
LABEL_343:
            if (!v14)
              BYTE4(v151) = 1;
LABEL_345:
            v31 = 1;
            break;
          case 4:
            goto LABEL_509;
          case 6:
            if (v14 >= 2)
            {
              *v150 = 29;
            }
            else if (!v14)
            {
              BYTE4(v151) = 1;
            }
            v31 = 1;
            break;
          default:
            goto LABEL_611;
        }
        v152 = 10;
        goto LABEL_563;
      case 'q':
        *(_DWORD *)(a1 + 28) = v19 + 2;
        v69 = *(unsigned __int8 *)(v20 + v30);
        if ((_DWORD)v19 + 2 == v18 || *(_BYTE *)(v20 + (v19 + 2)) != 123)
        {
          *(_BYTE *)(a1 + 8) = 25;
          if ((v69 & 0x80) == 0 && *(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          {
            if (!v69 || !v127)
            {
LABEL_609:
              v42 = 22;
LABEL_610:
              *v12 = v42;
LABEL_611:
              v31 = 1;
              goto LABEL_612;
            }
          }
          HIBYTE(v151) = 0;
          switch(v29)
          {
            case 0:
            case 7:
              goto LABEL_530;
            case 1:
              if (v14 >= 2)
                goto LABEL_515;
              if (v69 != 45)
                goto LABEL_528;
              goto LABEL_508;
            case 2:
              if (v152 <= v69)
                goto LABEL_458;
              goto LABEL_511;
            case 3:
              if (v14 <= 1 && v69 == 45)
                goto LABEL_519;
              goto LABEL_528;
            case 4:
              goto LABEL_509;
            case 5:
              goto LABEL_528;
            case 6:
              if (v14 >= 2)
                *v150 = 29;
              if (v69 == 45)
                goto LABEL_515;
LABEL_528:
              if (!v14)
                BYTE4(v151) = 1;
LABEL_530:
              v31 = 1;
              v152 = v69;
              break;
            default:
              goto LABEL_611;
          }
LABEL_563:
          LODWORD(v151) = 1;
          goto LABEL_612;
        }
        *(_DWORD *)(a1 + 28) = v19 + 3;
        v155 = *(_QWORD *)a1;
        v156 = 0;
        v157 = v12;
        v158 = 0u;
        v159 = 0u;
        break;
      case 'r':
        *(_DWORD *)(a1 + 28) = v19 + 2;
        HIBYTE(v151) = 0;
        switch(v29)
        {
          case 0:
          case 7:
            goto LABEL_359;
          case 1:
            if (v14 >= 2)
              goto LABEL_515;
            goto LABEL_357;
          case 2:
            if (v152 < 0xE)
              goto LABEL_458;
            goto LABEL_511;
          case 3:
          case 5:
LABEL_357:
            if (!v14)
              BYTE4(v151) = 1;
LABEL_359:
            v31 = 1;
            v56 = 13;
            goto LABEL_562;
          case 4:
            goto LABEL_509;
          case 6:
            if (v14 < 2)
            {
              v56 = 13;
              goto LABEL_559;
            }
            *v150 = 29;
            v56 = 13;
            break;
          default:
            goto LABEL_611;
        }
        goto LABEL_561;
      case 's':
        *(_DWORD *)(a1 + 28) = v19 + 2;
        switch(v29)
        {
          case 0:
          case 3:
          case 7:
            goto LABEL_387;
          case 1:
            goto LABEL_432;
          case 2:
          case 4:
            goto LABEL_509;
          case 5:
            goto LABEL_433;
          case 6:
            goto LABEL_429;
          default:
            goto LABEL_611;
        }
        goto LABEL_611;
      case 't':
        *(_DWORD *)(a1 + 28) = v19 + 2;
        HIBYTE(v151) = 0;
        switch(v29)
        {
          case 0:
          case 7:
            goto LABEL_403;
          case 1:
            if (v14 >= 2)
              goto LABEL_515;
            goto LABEL_401;
          case 2:
            if (v152 < 0xA)
              goto LABEL_458;
            goto LABEL_511;
          case 3:
          case 5:
LABEL_401:
            if (!v14)
              BYTE4(v151) = 1;
LABEL_403:
            v31 = 1;
            v56 = 9;
            goto LABEL_562;
          case 4:
            goto LABEL_509;
          case 6:
            if (v14 < 2)
            {
              v56 = 9;
              goto LABEL_559;
            }
            *v150 = 29;
            v56 = 9;
            break;
          default:
            goto LABEL_611;
        }
        goto LABEL_561;
      case 'u':
        v126 = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::UnicodeParseContext)0>(a1);
        if (!*(_BYTE *)(a1 + 8))
        {
          if (v126 == -1)
            v56 = 117;
          else
            v56 = v126;
          HIBYTE(v151) = 0;
          switch(v29)
          {
            case 0:
            case 7:
              goto LABEL_561;
            case 1:
              goto LABEL_506;
            case 2:
              goto LABEL_510;
            case 3:
              goto LABEL_517;
            case 4:
              goto LABEL_509;
            case 5:
              goto LABEL_559;
            case 6:
              goto LABEL_512;
            default:
              goto LABEL_611;
          }
        }
        goto LABEL_611;
      case 'v':
        *(_DWORD *)(a1 + 28) = v19 + 2;
        HIBYTE(v151) = 0;
        switch(v29)
        {
          case 0:
          case 7:
            goto LABEL_334;
          case 1:
            if (v14 >= 2)
              goto LABEL_515;
            goto LABEL_332;
          case 2:
            if (v152 < 0xC)
              goto LABEL_458;
            goto LABEL_511;
          case 3:
          case 5:
LABEL_332:
            if (!v14)
              BYTE4(v151) = 1;
LABEL_334:
            v31 = 1;
            v56 = 11;
            goto LABEL_562;
          case 4:
            goto LABEL_509;
          case 6:
            if (v14 < 2)
            {
              v56 = 11;
              goto LABEL_559;
            }
            *v150 = 29;
            v56 = 11;
            break;
          default:
            goto LABEL_611;
        }
        goto LABEL_561;
      case 'w':
        *(_DWORD *)(a1 + 28) = v19 + 2;
        switch(v29)
        {
          case 0:
          case 3:
          case 7:
LABEL_387:
            if (v14 != 2)
              goto LABEL_437;
            goto LABEL_436;
          case 1:
LABEL_432:
            if (v14 >= 2)
              goto LABEL_515;
            goto LABEL_433;
          case 2:
          case 4:
            goto LABEL_509;
          case 5:
LABEL_433:
            if (v14 == 2)
              goto LABEL_436;
            if (!v14)
              BYTE4(v151) = 1;
            goto LABEL_437;
          case 6:
LABEL_429:
            if (v14 < 2)
              goto LABEL_437;
            *v150 = 29;
            if (v14 != 2)
              goto LABEL_437;
LABEL_436:
            BYTE5(v151) = 0;
            goto LABEL_437;
          default:
            goto LABEL_611;
        }
      case 'x':
        v118 = (v19 + 2);
        *(_DWORD *)(a1 + 28) = v118;
        if ((_DWORD)v118 != v18)
        {
          v119 = *(unsigned __int8 *)(v20 + v118);
          if ((v119 - 48) < 0xA || (v119 | 0x20u) - 97 <= 5)
          {
            v120 = (v19 + 3);
            *(_DWORD *)(a1 + 28) = v120;
            v121 = *(unsigned __int8 *)(v20 + v118);
            v122 = v121 >= 0x41 ? (v121 + 9) & 0xF : v121 - 48;
            if ((_DWORD)v120 != v18)
            {
              v123 = *(unsigned __int8 *)(v20 + v120);
              if ((v123 - 48) < 0xA || (v123 | 0x20u) - 97 < 6)
              {
                *(_DWORD *)(a1 + 28) = v19 + 4;
                v124 = *(unsigned __int8 *)(v20 + v120);
                if (v124 >= 0x41)
                  v125 = (v124 + 9) & 0xF;
                else
                  v125 = v124 - 48;
                HIBYTE(v151) = 0;
                v56 = v125 | (16 * v122);
                switch(v29)
                {
                  case 0:
                  case 7:
                    goto LABEL_561;
                  case 1:
LABEL_506:
                    if (v14 >= 2)
                      goto LABEL_515;
                    if (v56 != 45)
                      goto LABEL_559;
LABEL_508:
                    v128 = 2;
                    goto LABEL_438;
                  case 2:
LABEL_510:
                    if (v152 > v56)
                    {
LABEL_511:
                      v131 = v150;
                      v132 = 14;
                      goto LABEL_516;
                    }
LABEL_458:
                    if (!v14)
                      BYTE4(v151) = 1;
                    v128 = 5;
                    goto LABEL_438;
                  case 3:
LABEL_517:
                    if (v14 > 1 || v56 != 45)
                      goto LABEL_559;
LABEL_519:
                    v128 = 4;
                    goto LABEL_438;
                  case 4:
LABEL_509:
                    v131 = v150;
                    v132 = 15;
                    goto LABEL_516;
                  case 5:
                    goto LABEL_559;
                  case 6:
LABEL_512:
                    if (v14 >= 2)
                      *v150 = 29;
                    if (v56 != 45)
                    {
LABEL_559:
                      if (!v14)
                        BYTE4(v151) = 1;
                      goto LABEL_561;
                    }
LABEL_515:
                    v131 = v150;
                    v132 = 29;
LABEL_516:
                    *v131 = v132;
                    break;
                  default:
                    goto LABEL_611;
                }
                goto LABEL_611;
              }
            }
          }
        }
        *(_DWORD *)(a1 + 28) = v118;
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
        {
          v12 = v149;
          goto LABEL_609;
        }
        HIBYTE(v151) = 0;
        switch(v29)
        {
          case 0:
          case 7:
            goto LABEL_647;
          case 1:
            if (v14 < 2)
              goto LABEL_636;
            v144 = v150;
            v145 = 29;
            goto LABEL_643;
          case 2:
            if (v152 < 0x79)
            {
              if (!v14)
                BYTE4(v151) = 1;
              LODWORD(v151) = 5;
            }
            else
            {
              v144 = v150;
              v145 = 14;
LABEL_643:
              *v144 = v145;
            }
LABEL_644:
            v31 = 1;
LABEL_648:
            v12 = v149;
            break;
          case 3:
          case 5:
            goto LABEL_636;
          case 4:
            v144 = v150;
            v145 = 15;
            goto LABEL_643;
          case 6:
            if (v14 < 2)
            {
LABEL_636:
              if (!v14)
                BYTE4(v151) = 1;
            }
            else
            {
              *v150 = 29;
            }
LABEL_647:
            v31 = 1;
            v152 = 120;
            LODWORD(v151) = 1;
            goto LABEL_648;
          default:
            goto LABEL_644;
        }
        goto LABEL_612;
      default:
        if ((v41 & 0x80) != 0
          || *(unsigned __int8 *)(a1 + 32) - 1 > 1
              v41)
          && v114)
        {
LABEL_355:
          *(_DWORD *)(a1 + 28) = v19 + 2;
          v56 = *(unsigned __int8 *)(v20 + v30);
          HIBYTE(v151) = 0;
          switch(v29)
          {
            case 0:
            case 7:
              goto LABEL_561;
            case 1:
              goto LABEL_506;
            case 2:
              goto LABEL_510;
            case 3:
              goto LABEL_517;
            case 4:
              goto LABEL_509;
            case 5:
              goto LABEL_559;
            case 6:
              goto LABEL_512;
            default:
              goto LABEL_611;
          }
        }
        goto LABEL_609;
    }
    while (1)
    {
      v70 = *(_DWORD *)(a1 + 24);
      v71 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v71 == v70)
      {
        v135 = 0;
        v137 = 16;
        goto LABEL_598;
      }
      v72 = *(_QWORD *)(a1 + 16);
      v73 = *(unsigned __int8 *)(v72 + v71);
      if (v73 <= 0x7B)
        break;
      if (v73 != 124)
      {
        if (v73 == 125)
        {
          *(_DWORD *)(a1 + 28) = v71 + 1;
          JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassStringDisjunctionParserDelegate::newAlternative((uint64_t)&v155, a2, a3, a4, a5, a6, a7, a8);
          v135 = v156;
          goto LABEL_599;
        }
        goto LABEL_217;
      }
      *(_DWORD *)(a1 + 28) = v71 + 1;
      JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassStringDisjunctionParserDelegate::newAlternative((uint64_t)&v155, a2, a3, a4, a5, a6, a7, a8);
LABEL_312:
      if (*v12)
      {
LABEL_503:
        v135 = 0;
        goto LABEL_599;
      }
    }
    if (v73 != 92)
    {
      if (v73 == 45)
      {
        v135 = 0;
        *(_DWORD *)(a1 + 28) = v71 + 1;
        *(_BYTE *)(a1 + 8) = 31;
        goto LABEL_599;
      }
LABEL_217:
      v79 = v71 + 1;
      *(_DWORD *)(a1 + 28) = v71 + 1;
      v80 = *(unsigned __int8 *)(v72 + v71);
      if (!*(_BYTE *)(v72 + v71))
        goto LABEL_553;
      if ((v80 & 0x80) == 0)
      {
        if (memchr("()[]{}/|)", *(unsigned __int8 *)(v72 + v71), 0xAuLL))
        {
LABEL_553:
          v137 = 31;
LABEL_554:
          v135 = 0;
          goto LABEL_598;
        }
        {
          v137 = 29;
          goto LABEL_554;
        }
      }
LABEL_230:
      v160 = v80;
      if (HIDWORD(v158) == DWORD2(v158))
      {
LABEL_309:
        WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v158, (unint64_t)&v160);
        v83 = HIDWORD(v158);
      }
      else
      {
        v83 = HIDWORD(v158) + 1;
        *(_DWORD *)(v158 + 4 * HIDWORD(v158)) = v80;
LABEL_275:
        HIDWORD(v158) = v83;
      }
      if (v83 < 2)
        goto LABEL_312;
LABEL_311:
      v156 = 1;
      goto LABEL_312;
    }
    v74 = (v71 + 1);
    *(_DWORD *)(a1 + 28) = v74;
    if ((_DWORD)v74 == v70)
    {
      v135 = 0;
      v137 = 17;
      goto LABEL_598;
    }
    v75 = *(unsigned __int8 *)(v72 + v74);
    switch(*(_BYTE *)(v72 + v74))
    {
      case '-':
        goto LABEL_253;
      case '0':
        v93 = (v71 + 2);
        *(_DWORD *)(a1 + 28) = v93;
        if ((_DWORD)v93 != v70)
        {
          v94 = *(unsigned __int8 *)(v72 + v93);
          if ((v94 - 48) < 0xA)
          {
            if (*(unsigned __int8 *)(a1 + 32) - 1 < 2)
            {
LABEL_595:
              v135 = 0;
              v137 = 23;
              goto LABEL_598;
            }
            if ((v94 & 0xF8) == 0x30)
            {
              v95 = (v71 + 3);
              *(_DWORD *)(a1 + 28) = v95;
              v77 = *(unsigned __int8 *)(v72 + v93) - 48;
              if ((_DWORD)v95 != v70 && v77 <= 0x1F && (*(_BYTE *)(v72 + v95) & 0xF8) == 0x30)
              {
                *(_DWORD *)(a1 + 28) = v71 + 4;
                v77 = *(unsigned __int8 *)(v72 + v95) + 8 * v77 - 48;
              }
            }
            else
            {
              v77 = 0;
            }
            goto LABEL_254;
          }
        }
        v160 = 0;
        if (HIDWORD(v158) == DWORD2(v158))
          goto LABEL_309;
        v83 = HIDWORD(v158) + 1;
        *(_DWORD *)(v158 + 4 * HIDWORD(v158)) = 0;
        goto LABEL_275;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          goto LABEL_595;
        if (v75 > 0x37)
        {
LABEL_253:
          *(_DWORD *)(a1 + 28) = v71 + 2;
          v77 = *(unsigned __int8 *)(v72 + v74);
        }
        else
        {
          v76 = 0;
          v77 = 0;
          do
          {
            if (!((_DWORD)v71 - v70 + 1 + v76))
              break;
            v78 = (v71 + v76 + 1);
            if ((*(_BYTE *)(v72 + v78) & 0xF8) != 0x30)
              break;
            *(_DWORD *)(a1 + 28) = v71 + v76 + 2;
            v77 = *(unsigned __int8 *)(v72 + v78) + 8 * v77 - 48;
            if (v76 == 2)
              break;
            ++v76;
          }
          while (v77 < 0x20);
        }
        goto LABEL_254;
      case 'B':
        *(_DWORD *)(a1 + 28) = v71 + 2;
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          goto LABEL_596;
        v84 = 66;
LABEL_273:
        v160 = v84;
        if (HIDWORD(v158) == DWORD2(v158))
          goto LABEL_309;
        v83 = HIDWORD(v158) + 1;
        *(_DWORD *)(v158 + 4 * HIDWORD(v158)) = v84;
        goto LABEL_275;
      case 'D':
        *(_DWORD *)(a1 + 28) = v71 + 2;
        v84 = 68;
        goto LABEL_273;
      case 'P':
      case 'p':
      case 'q':
        *(_DWORD *)(a1 + 28) = v71 + 2;
        v80 = *(unsigned __int8 *)(v72 + v74);
        if (*(char *)(v72 + v74) < 0 || *(unsigned __int8 *)(a1 + 32) - 1 > 1)
          goto LABEL_230;
        if (v80 && v81 != 0)
          goto LABEL_230;
        goto LABEL_596;
      case 'S':
        *(_DWORD *)(a1 + 28) = v71 + 2;
        v84 = 83;
        goto LABEL_273;
      case 'W':
        *(_DWORD *)(a1 + 28) = v71 + 2;
        v84 = 87;
        goto LABEL_273;
      case 'b':
        *(_DWORD *)(a1 + 28) = v71 + 2;
        v84 = 8;
        goto LABEL_273;
      case 'c':
        *(_DWORD *)(a1 + 28) = v71 + 2;
        if ((_DWORD)v71 + 2 == v70)
        {
          if (*(unsigned __int8 *)(a1 + 32) - 1 < 2)
          {
LABEL_596:
            v135 = 0;
            goto LABEL_597;
          }
          v86 = DWORD2(v158);
          v85 = HIDWORD(v158);
LABEL_307:
          *(_DWORD *)(a1 + 28) = v74;
          v160 = 92;
          if (v85 == v86)
            goto LABEL_309;
          v83 = v85 + 1;
          *(_DWORD *)(v158 + 4 * v85) = 92;
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 28) = v71 + 3;
        v108 = *(unsigned __int8 *)(v72 + (v71 + 2));
        if ((v108 | 0x20u) - 97 <= 0x19)
        {
          v109 = v108 & 0x1F;
          v160 = v109;
          v110 = HIDWORD(v158);
          if (HIDWORD(v158) == DWORD2(v158))
          {
            WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v158, (unint64_t)&v160);
            v111 = HIDWORD(v158);
          }
          else
          {
            v111 = HIDWORD(v158) + 1;
            *(_DWORD *)(v158 + 4 * HIDWORD(v158)) = v109;
            HIDWORD(v158) = v110 + 1;
          }
          if (v111 < 2)
            goto LABEL_321;
          goto LABEL_320;
        }
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
        {
          v135 = 0;
          v137 = 24;
          goto LABEL_598;
        }
        v86 = DWORD2(v158);
        v85 = HIDWORD(v158);
        if (v108 != 95 && (v108 - 48) > 9)
          goto LABEL_307;
        v112 = v108 & 0x1F;
        v160 = v112;
        if (HIDWORD(v158) == DWORD2(v158))
          goto LABEL_325;
        v113 = HIDWORD(v158) + 1;
        *(_DWORD *)(v158 + 4 * HIDWORD(v158)) = v112;
        goto LABEL_317;
      case 'd':
        *(_DWORD *)(a1 + 28) = v71 + 2;
        v84 = 100;
        goto LABEL_273;
      case 'f':
        *(_DWORD *)(a1 + 28) = v71 + 2;
        v84 = 12;
        goto LABEL_273;
      case 'k':
        *(_DWORD *)(a1 + 28) = v71 + 2;
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          goto LABEL_596;
        v160 = 107;
        v87 = HIDWORD(v158);
        if (HIDWORD(v158) == DWORD2(v158))
        {
          WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v158, (unint64_t)&v160);
          v88 = HIDWORD(v158);
        }
        else
        {
          v88 = HIDWORD(v158) + 1;
          *(_DWORD *)(v158 + 4 * HIDWORD(v158)) = 107;
          HIDWORD(v158) = v87 + 1;
        }
        if (v88 >= 2)
          v156 = 1;
        *(_BYTE *)(a1 + 49) = 1;
        goto LABEL_312;
      case 'n':
        *(_DWORD *)(a1 + 28) = v71 + 2;
        v160 = 10;
        if (HIDWORD(v158) == DWORD2(v158))
          goto LABEL_309;
        v83 = HIDWORD(v158) + 1;
        *(_DWORD *)(v158 + 4 * HIDWORD(v158)) = 10;
        goto LABEL_275;
      case 'r':
        *(_DWORD *)(a1 + 28) = v71 + 2;
        v84 = 13;
        goto LABEL_273;
      case 's':
        *(_DWORD *)(a1 + 28) = v71 + 2;
        v84 = 115;
        goto LABEL_273;
      case 't':
        *(_DWORD *)(a1 + 28) = v71 + 2;
        v84 = 9;
        goto LABEL_273;
      case 'u':
        v96 = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::UnicodeParseContext)0>(a1);
        if (*(_BYTE *)(a1 + 8))
          goto LABEL_503;
        if (v96 == -1)
          v77 = 117;
        else
          v77 = v96;
        goto LABEL_254;
      case 'v':
        *(_DWORD *)(a1 + 28) = v71 + 2;
        v84 = 11;
        goto LABEL_273;
      case 'w':
        *(_DWORD *)(a1 + 28) = v71 + 2;
        v84 = 119;
        goto LABEL_273;
      case 'x':
        v97 = (v71 + 2);
        *(_DWORD *)(a1 + 28) = v97;
        if ((_DWORD)v97 != v70)
        {
          v98 = *(unsigned __int8 *)(v72 + v97);
          v99 = v98 - 48;
          v100 = (v98 | 0x20) - 97;
          if (v99 < 0xA || v100 <= 5)
          {
            v102 = (v71 + 3);
            *(_DWORD *)(a1 + 28) = v102;
            v103 = *(unsigned __int8 *)(v72 + v97);
            v104 = v103 >= 0x41 ? (v103 + 9) & 0xF : v103 - 48;
            if ((_DWORD)v102 != v70)
            {
              v105 = *(unsigned __int8 *)(v72 + v102);
              if ((v105 - 48) < 0xA || (v105 | 0x20u) - 97 < 6)
              {
                *(_DWORD *)(a1 + 28) = v71 + 4;
                v106 = *(unsigned __int8 *)(v72 + v102);
                if (v106 >= 0x41)
                  v107 = (v106 + 9) & 0xF;
                else
                  v107 = v106 - 48;
                v77 = v107 | (16 * v104);
LABEL_254:
                v160 = v77;
                v91 = HIDWORD(v158);
                if (HIDWORD(v158) == DWORD2(v158))
                {
                  WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v158, (unint64_t)&v160);
                  v92 = HIDWORD(v158);
                }
                else
                {
                  v92 = HIDWORD(v158) + 1;
                  *(_DWORD *)(v158 + 4 * HIDWORD(v158)) = v77;
                  HIDWORD(v158) = v91 + 1;
                }
                if (v92 < 2)
                  goto LABEL_312;
                goto LABEL_311;
              }
            }
          }
        }
        *(_DWORD *)(a1 + 28) = v97;
        if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
        {
          v160 = 120;
          if (HIDWORD(v158) == DWORD2(v158))
          {
LABEL_325:
            WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v158, (unint64_t)&v160);
            v113 = HIDWORD(v158);
          }
          else
          {
            v113 = HIDWORD(v158) + 1;
            *(_DWORD *)(v158 + 4 * HIDWORD(v158)) = 120;
LABEL_317:
            HIDWORD(v158) = v113;
          }
          if (v113 >= 2)
LABEL_320:
            v156 = 1;
LABEL_321:
          v12 = v149;
          goto LABEL_312;
        }
        v135 = 0;
        v12 = v149;
LABEL_597:
        v137 = 22;
LABEL_598:
        *v12 = v137;
LABEL_599:
        v138 = v159;
        if (HIDWORD(v159))
        {
          v142 = 16 * HIDWORD(v159);
          do
          {
            v143 = *(_QWORD *)v138;
            if (*(_QWORD *)v138)
            {
              *(_QWORD *)v138 = 0;
              *(_DWORD *)(v138 + 8) = 0;
              WTF::fastFree(v143, a2, a3, a4, a5, a6, a7, a8);
            }
            v138 += 16;
            v142 -= 16;
          }
          while (v142);
          v138 = v159;
          v12 = v149;
          if ((_QWORD)v159)
            goto LABEL_634;
        }
        else
        {
          if (!(_QWORD)v159)
            goto LABEL_601;
LABEL_634:
          *(_QWORD *)&v159 = 0;
          DWORD2(v159) = 0;
          WTF::fastFree(v138, a2, a3, a4, a5, a6, a7, a8);
        }
LABEL_601:
        v139 = v158;
        if ((_QWORD)v158)
        {
          *(_QWORD *)&v158 = 0;
          DWORD2(v158) = 0;
          WTF::fastFree(v139, a2, a3, a4, a5, a6, a7, a8);
        }
        if (v135)
          v31 = 4;
        else
          v31 = 3;
LABEL_612:
        v14 = BYTE4(v151);
LABEL_613:
        if (v14 < 2)
        {
          v140 = BYTE5(v151) | (v31 == 4);
          goto LABEL_622;
        }
        if (v14 == 2)
        {
          v140 = v31 == 4 && BYTE5(v151) != 0;
LABEL_622:
          BYTE5(v151) = v140;
        }
        if ((v31 - 3) <= 1u)
        {
          v36 = 6;
LABEL_625:
          LODWORD(v151) = v36;
        }
LABEL_626:
        v15 = v14;
        v16 = v14;
        v17 = v14;
LABEL_627:
        if (!*v12)
          continue;
LABEL_657:
        v148 = v153;
        if (v153)
        {
          v153 = 0;
          LODWORD(v154) = 0;
          WTF::fastFree((unint64_t)v148, a2, a3, a4, a5, a6, a7, a8);
        }
        return;
      default:
        if ((v75 & 0x80) != 0 || *(unsigned __int8 *)(a1 + 32) - 1 > 1)
          goto LABEL_253;
        if (v75 && v89 != 0)
          goto LABEL_253;
        goto LABEL_596;
    }
  }
}

void JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeGroupName(_BYTE *a1, uint64_t a2)
{
  int v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  int v29;
  char v30;

  v3 = *(_DWORD *)(a2 + 28);
  if (v3 == *(_DWORD *)(a2 + 24))
    goto LABEL_9;
  v5 = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeIdentifierCharacter(a2);
  if (!JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::isIdentifierStart(v5))
  {
LABEL_8:
    *(_DWORD *)(a2 + 28) = v3;
LABEL_9:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  v30 = 1;
  while (1)
  {
    WTF::StringBuilder::append<char32_t>((uint64_t)v28, v5, v6, v7, v8, v9, v10, v11);
    if (*(_DWORD *)(a2 + 28) == *(_DWORD *)(a2 + 24))
    {
LABEL_7:
      WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v28, v12, v6, v7, v8, v9, v10, v11);
      goto LABEL_8;
    }
    v13 = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeIdentifierCharacter(a2);
    if (v13 == 62)
      break;
    v5 = v13;
    if (!JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::isIdentifierPart(v13))
      goto LABEL_7;
  }
  WTF::StringBuilder::toString((WTF::StringBuilder *)v28, v14, v15, v16, v17, v18, v19, &v27);
  *(_QWORD *)a1 = v27;
  a1[8] = 1;
  WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v28, v20, v21, v22, v23, v24, v25, v26);
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeIdentifierCharacter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned int *)(a1 + 28);
  v2 = *(_QWORD *)(a1 + 16);
  if ((_DWORD)v1 == *(_DWORD *)(a1 + 24) || *(_BYTE *)(v2 + v1) != 92)
  {
    *(_DWORD *)(a1 + 28) = v1 + 1;
    return *(unsigned __int8 *)(v2 + v1);
  }
  else
  {
    *(_DWORD *)(a1 + 28) = v1 + 1;
    return JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::UnicodeParseContext)1>(a1);
  }
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::UnicodeParseContext)1>(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v16;
  unsigned __int8 v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  unsigned int v23;
  unsigned __int8 v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;
  unsigned int v30;
  unsigned __int8 v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned __int8 v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int8 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int8 v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned __int8 v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 v53;
  int v54;
  unsigned int v55;
  unsigned __int8 v56;

  v2 = *(_DWORD *)(a1 + 24);
  v1 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v1 == v2)
    goto LABEL_4;
  v3 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v3 + v1) != 117)
    goto LABEL_4;
  v4 = (v1 + 1);
  *(_DWORD *)(a1 + 28) = v4;
  if ((_DWORD)v4 == v2)
    goto LABEL_4;
  v8 = *(unsigned __int8 *)(v3 + v4);
  if (v8 == 123)
  {
    LODWORD(v6) = 0;
    *(_DWORD *)(a1 + 28) = v1 + 2;
    v9 = v1 + 3;
    v10 = -v2;
    while (v10 + v9 != 1)
    {
      v11 = v9 - 1;
      v12 = *(unsigned __int8 *)(v3 + v11);
      v13 = v12 - 48;
      v14 = (v12 | 0x20) - 97;
      if (v13 >= 0xA && v14 >= 6)
        break;
      *(_DWORD *)(a1 + 28) = v9;
      v16 = *(unsigned __int8 *)(v3 + v11);
      v17 = v16 >= 0x41 ? (v16 + 9) & 0xF : v16 - 48;
      v6 = v17 | (16 * v6);
      if (v6 >= 0x110000 || !(v10 + v9))
        break;
      v18 = *(unsigned __int8 *)(v3 + v9++);
      if (v18 == 125)
      {
        *(_DWORD *)(a1 + 28) = v9;
        return v6;
      }
    }
    v5 = 19;
    goto LABEL_5;
  }
  v19 = v8 - 48;
  v20 = (v8 | 0x20) - 97;
  if (v19 >= 0xA && v20 > 5)
    goto LABEL_81;
  v22 = (v1 + 2);
  *(_DWORD *)(a1 + 28) = v22;
  v23 = *(unsigned __int8 *)(v3 + v4);
  v24 = v23 >= 0x41 ? (v23 + 9) & 0xF : v23 - 48;
  if ((_DWORD)v22 == v2)
    goto LABEL_81;
  v25 = *(unsigned __int8 *)(v3 + v22);
  v26 = v25 - 48;
  v27 = (v25 | 0x20) - 97;
  if (v26 >= 0xA && v27 > 5)
    goto LABEL_81;
  v29 = (v1 + 3);
  *(_DWORD *)(a1 + 28) = v29;
  v30 = *(unsigned __int8 *)(v3 + v22);
  v31 = v30 >= 0x41 ? (v30 + 9) & 0xF : v30 - 48;
  if ((_DWORD)v29 == v2
    || (v32 = *(unsigned __int8 *)(v3 + v29), (v32 - 48) >= 0xA) && (v32 | 0x20u) - 97 > 5
    || ((v33 = (v1 + 4), *(_DWORD *)(a1 + 28) = v33, v34 = *(unsigned __int8 *)(v3 + v29), v34 >= 0x41)
      ? (v35 = (v34 + 9) & 0xF)
      : (v35 = v34 - 48),
        (_DWORD)v33 == v2
     || (v36 = *(unsigned __int8 *)(v3 + v33), (v36 - 48) >= 0xA) && (v36 | 0x20u) - 97 >= 6))
  {
LABEL_81:
    *(_DWORD *)(a1 + 28) = v4;
LABEL_4:
    v5 = 18;
LABEL_5:
    *(_BYTE *)(a1 + 8) = v5;
    return 0xFFFFFFFFLL;
  }
  v37 = (16 * v31) | (v24 << 8) | v35;
  v38 = v1 + 5;
  *(_DWORD *)(a1 + 28) = v1 + 5;
  v39 = *(unsigned __int8 *)(v3 + v33);
  if (v39 >= 0x41)
    v40 = (v39 + 9) & 0xF;
  else
    v40 = v39 - 48;
  v6 = v40 | (16 * v37);
  if (v2 - v38 >= 6 && (v37 & 0xFFC0) == 0xD80 && *(_BYTE *)(v3 + v38) == 92)
  {
    *(_DWORD *)(a1 + 28) = v1 + 6;
    if ((_DWORD)v1 + 6 == v2)
      goto LABEL_80;
    if (*(_BYTE *)(v3 + (v1 + 6)) != 117)
      goto LABEL_80;
    v41 = (v1 + 7);
    *(_DWORD *)(a1 + 28) = v41;
    if ((_DWORD)v41 == v2)
      goto LABEL_80;
    v42 = *(unsigned __int8 *)(v3 + v41);
    if ((v42 - 48) >= 0xA && (v42 | 0x20u) - 97 > 5)
      goto LABEL_80;
    v43 = (v1 + 8);
    *(_DWORD *)(a1 + 28) = v43;
    v44 = *(unsigned __int8 *)(v3 + v41);
    v45 = v44 >= 0x41 ? (v44 + 9) & 0xF : v44 - 48;
    if ((_DWORD)v43 == v2)
      goto LABEL_80;
    v46 = *(unsigned __int8 *)(v3 + v43);
    if ((v46 - 48) >= 0xA && (v46 | 0x20u) - 97 > 5)
      goto LABEL_80;
    v47 = (v1 + 9);
    *(_DWORD *)(a1 + 28) = v47;
    v48 = *(unsigned __int8 *)(v3 + v43);
    v49 = v48 >= 0x41 ? (v48 + 9) & 0xF : v48 - 48;
    if ((_DWORD)v47 == v2)
      goto LABEL_80;
    v50 = *(unsigned __int8 *)(v3 + v47);
    if ((v50 - 48) >= 0xA && (v50 | 0x20u) - 97 > 5)
      goto LABEL_80;
    v51 = (v1 + 10);
    *(_DWORD *)(a1 + 28) = v51;
    v52 = *(unsigned __int8 *)(v3 + v47);
    v53 = v52 >= 0x41 ? (v52 + 9) & 0xF : v52 - 48;
    if ((_DWORD)v51 == v2
      || (v54 = *(unsigned __int8 *)(v3 + v51), (v54 - 48) >= 0xA) && (v54 | 0x20u) - 97 > 5
      || ((*(_DWORD *)(a1 + 28) = v1 + 11, v55 = *(unsigned __int8 *)(v3 + v51), v55 >= 0x41)
        ? (v56 = (v55 + 9) & 0xF)
        : (v56 = v55 - 48),
          ((16 * v49) & 0xFFC0 | (unsigned __int16)(v45 << 8) | v53 & 0xC0) != 0xDC0))
    {
LABEL_80:
      *(_DWORD *)(a1 + 28) = v38;
    }
    else
    {
      return (v56 | (16 * ((16 * v49) | (v45 << 8) | v53))) + ((_DWORD)v6 << 10) - 56613888;
    }
  }
  return v6;
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeHex(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int8 v21;
  int v22;
  unsigned int v23;
  unsigned __int8 v24;

  v2 = *(_DWORD *)(a1 + 24);
  v1 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v1 == v2)
    goto LABEL_30;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(v3 + v1);
  v5 = v4 - 48;
  v6 = (v4 | 0x20) - 97;
  if (v5 >= 0xA && v6 >= 6)
    goto LABEL_30;
  v8 = (v1 + 1);
  *(_DWORD *)(a1 + 28) = v8;
  v9 = *(unsigned __int8 *)(v3 + v1);
  v10 = v9 >= 0x41 ? (v9 + 9) & 0xF : v9 - 48;
  if ((_DWORD)v8 == v2)
    goto LABEL_30;
  v11 = *(unsigned __int8 *)(v3 + v8);
  v12 = v11 - 48;
  v13 = (v11 | 0x20) - 97;
  if (v12 >= 0xA && v13 > 5)
    goto LABEL_30;
  v15 = (v1 + 2);
  *(_DWORD *)(a1 + 28) = v15;
  v16 = *(unsigned __int8 *)(v3 + v8);
  v17 = v16 >= 0x41 ? (v16 + 9) & 0xF : v16 - 48;
  if ((_DWORD)v15 == v2
    || (v18 = *(unsigned __int8 *)(v3 + v15), (v18 - 48) >= 0xA) && (v18 | 0x20u) - 97 > 5
    || ((v19 = (v1 + 3), *(_DWORD *)(a1 + 28) = v19, v20 = *(unsigned __int8 *)(v3 + v15), v20 >= 0x41)
      ? (v21 = (v20 + 9) & 0xF)
      : (v21 = v20 - 48),
        (_DWORD)v19 == v2
     || (v22 = *(unsigned __int8 *)(v3 + v19), (v22 - 48) >= 0xA) && (v22 | 0x20u) - 97 > 5))
  {
LABEL_30:
    *(_DWORD *)(a1 + 28) = v1;
    return 0xFFFFFFFFLL;
  }
  else
  {
    *(_DWORD *)(a1 + 28) = v1 + 4;
    v23 = *(unsigned __int8 *)(v3 + v19);
    if (v23 >= 0x41)
      v24 = (v23 + 9) & 0xF;
    else
      v24 = v23 - 48;
    return v24 | (16 * ((v10 << 8) | (16 * v17) | v21));
  }
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeUnicodePropertyExpression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  BOOL v13;
  char v14;
  _BYTE *v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  char v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v30;
  WTF::StringImpl *v31;
  _BYTE *v32;
  WTF::StringImpl *v33;
  size_t matched;
  size_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _WORD *v73;
  WTF::StringImpl *v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  int v114;
  char v115;

  v9 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 24)
    || ((v10 = *(_QWORD *)(a1 + 16), v11 = *(unsigned __int8 *)(v10 + v9), v11 != 95)
      ? (v12 = (v11 - 48) >= 0xA)
      : (v12 = 0),
        v12 ? (v13 = (v11 | 0x20u) - 97 >= 0x1A) : (v13 = 0),
        v13 && v11 != 61))
  {
    v36 = 0;
    LOBYTE(matched) = 0;
    LODWORD(v35) = 0;
    *(_BYTE *)(a1 + 8) = 25;
    return v36 & 0x100000000 | matched | ((_DWORD)v35 << 8);
  }
  v112 = 0;
  v113 = 0;
  v114 = 0;
  v115 = 1;
  *(_DWORD *)(a1 + 28) = v9 + 1;
  v14 = *(_BYTE *)(v10 + v9);
  v15 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v112, (WTF::AtomStringImpl *)1, a3, a4, a5, a6, a7, a8);
  if (v15)
    *v15 = v14;
  v23 = *(_DWORD *)(a1 + 28);
  if (v23 == *(_DWORD *)(a1 + 24))
  {
    v26 = 0;
LABEL_81:
    LOBYTE(matched) = 0;
    LODWORD(v35) = 0;
    goto LABEL_82;
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  while (1)
  {
    v27 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v23);
    *(_DWORD *)(a1 + 28) = v23 + 1;
    if (v27 == 125)
      break;
    if (v27 == 61)
    {
      if ((v25 & 1) != 0)
      {
        ++v24;
        v25 = 1;
      }
      else
      {
        WTF::StringBuilder::toString((WTF::StringBuilder *)&v112, v17, v18, v19, v20, v21, v22, &v108);
        v82 = v108;
        v108 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
          {
            WTF::StringImpl::~StringImpl(v26, v75, v76, v77, v78, v79, v80, v81);
            WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
            v99 = v108;
            v108 = 0;
            if (v99)
            {
              if (*(_DWORD *)v99 == 2)
              {
                WTF::StringImpl::~StringImpl(v99, v75, v76, v77, v78, v79, v80, v81);
                WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
              }
              else
              {
                *(_DWORD *)v99 -= 2;
              }
            }
          }
          else
          {
            *(_DWORD *)v26 -= 2;
          }
        }
        WTF::StringBuilder::clear(&v112, v75, v76, v77, v78, v79, v80, v81);
        v25 = 1;
        v26 = v82;
      }
    }
    else if (v27 != 95 && (v27 - 48) >= 0xA && (v27 | 0x20u) - 97 >= 0x1A)
    {
      ++v24;
    }
    else
    {
      if (v114 == -1)
        v30 = 0xFFFFFFFFLL;
      else
        v30 = (v114 + 1);
      v31 = v113;
      if ((v113 || (v31 = v112) != 0) && (*((_BYTE *)v31 + 16) & 4) == 0)
      {
        v73 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v112, (WTF::AtomStringImpl *)v30, v17, v18, v19, v20, v21, v22);
        if (v73)
          *v73 = v27;
      }
      else
      {
        v32 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v112, (WTF::AtomStringImpl *)v30, v17, v18, v19, v20, v21, v22);
        if (v32)
          *v32 = v27;
      }
    }
    v23 = *(_DWORD *)(a1 + 28);
    if (v23 == *(_DWORD *)(a1 + 24))
      goto LABEL_81;
  }
  if (v24)
    goto LABEL_81;
  if ((v25 & 1) != 0)
  {
    if (v26)
      *(_DWORD *)v26 += 2;
    v111 = v26;
    WTF::StringBuilder::toString((WTF::StringBuilder *)&v112, v17, v18, v19, v20, v21, v22, &v110);
    matched = JSC::Yarr::unicodeMatchPropertyValue((uint64_t *)&v111, &v110);
    v74 = v110;
    v110 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
      {
        WTF::StringImpl::~StringImpl(v74, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
      }
      else
      {
        *(_DWORD *)v74 -= 2;
      }
    }
    v35 = matched >> 8;
    v36 = matched & 0x100000000;
    v111 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        v64 = v26;
LABEL_53:
        WTF::StringImpl::~StringImpl(v64, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
        goto LABEL_38;
      }
      *(_DWORD *)v26 -= 2;
    }
  }
  else
  {
    v33 = v112;
    if (v112
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v112, (uint64_t)v16, v17, v18, v19, v20, v21, v22),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v112),
          (v33 = v112) != 0))
    {
      *(_DWORD *)v33 += 2;
    }
    v109 = v33;
    matched = JSC::Yarr::unicodeMatchProperty(&v109, *(unsigned __int8 *)(a1 + 32));
    v35 = matched >> 8;
    v36 = matched & 0x100000000;
    v109 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 != 2)
      {
        *(_DWORD *)v33 -= 2;
        goto LABEL_38;
      }
      v64 = v33;
      goto LABEL_53;
    }
  }
LABEL_38:
  if (!HIDWORD(matched))
  {
LABEL_82:
    v36 = 0;
    *(_BYTE *)(a1 + 8) = 25;
  }
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  v37 = v113;
  v113 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  v38 = v112;
  v112 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  return v36 & 0x100000000 | matched | ((_DWORD)v35 << 8);
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::UnicodeParseContext)0>(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int8 v28;
  uint64_t v29;
  unsigned int v30;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v40;
  unsigned __int8 v41;
  uint64_t v42;
  int v43;
  int v45;
  unsigned int v46;

  v1 = *(unsigned __int8 *)(a1 + 32) - 3;
  v3 = *(_DWORD *)(a1 + 24);
  v2 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v2 == v3
    || (v4 = *(_QWORD *)(a1 + 16), *(_BYTE *)(v4 + v2) != 117)
    || (v5 = (v2 + 1), *(_DWORD *)(a1 + 28) = v5, (_DWORD)v5 == v3))
  {
    if (v1 < 0xFFFFFFFE)
      return 0xFFFFFFFFLL;
LABEL_41:
    *(_BYTE *)(a1 + 8) = 18;
    return 0xFFFFFFFFLL;
  }
  v6 = *(unsigned __int8 *)(v4 + v5);
  if (v1 >= 0xFFFFFFFE && v6 == 123)
  {
    v32 = 0;
    *(_DWORD *)(a1 + 28) = v2 + 2;
    v33 = v2 + 3;
    v34 = -v3;
    while (v34 + v33 != 1)
    {
      v35 = v33 - 1;
      v36 = *(unsigned __int8 *)(v4 + v35);
      v37 = v36 - 48;
      v38 = (v36 | 0x20) - 97;
      if (v37 >= 0xA && v38 >= 6)
        break;
      *(_DWORD *)(a1 + 28) = v33;
      v40 = *(unsigned __int8 *)(v4 + v35);
      v41 = v40 >= 0x41 ? (v40 + 9) & 0xF : v40 - 48;
      v42 = v41 | (16 * v32);
      if (v42 >= 0x110000 || !(v34 + v33))
        break;
      v32 = v41 | (16 * v32);
      v43 = *(unsigned __int8 *)(v4 + v33++);
      if (v43 == 125)
      {
        *(_DWORD *)(a1 + 28) = v33;
        return v42;
      }
    }
    *(_BYTE *)(a1 + 8) = 19;
    return 0xFFFFFFFFLL;
  }
  v7 = v6 - 48;
  v8 = (v6 | 0x20) - 97;
  if (v7 >= 0xA && v8 > 5)
    goto LABEL_44;
  v10 = (v2 + 2);
  *(_DWORD *)(a1 + 28) = v10;
  v11 = *(unsigned __int8 *)(v4 + v5);
  v12 = v11 >= 0x41 ? (v11 + 9) & 0xF : v11 - 48;
  if ((_DWORD)v10 == v3)
    goto LABEL_44;
  v13 = *(unsigned __int8 *)(v4 + v10);
  v14 = v13 - 48;
  v15 = (v13 | 0x20) - 97;
  if (v14 >= 0xA && v15 > 5)
    goto LABEL_44;
  v17 = (v2 + 3);
  *(_DWORD *)(a1 + 28) = v17;
  v18 = *(unsigned __int8 *)(v4 + v10);
  v19 = v18 >= 0x41 ? (v18 + 9) & 0xF : v18 - 48;
  if ((_DWORD)v17 == v3
    || (v20 = *(unsigned __int8 *)(v4 + v17), (v20 - 48) >= 0xA) && (v20 | 0x20u) - 97 > 5
    || ((v21 = (v2 + 4), *(_DWORD *)(a1 + 28) = v21, v22 = *(unsigned __int8 *)(v4 + v17), v22 >= 0x41)
      ? (v23 = (v22 + 9) & 0xF)
      : (v23 = v22 - 48),
        (_DWORD)v21 == v3
     || (v24 = *(unsigned __int8 *)(v4 + v21), (v24 - 48) >= 0xA) && (v24 | 0x20u) - 97 >= 6))
  {
LABEL_44:
    *(_DWORD *)(a1 + 28) = v5;
    if (v1 < 0xFFFFFFFE)
      return 0xFFFFFFFFLL;
    goto LABEL_41;
  }
  v25 = (16 * v19) | (v12 << 8) | v23;
  v26 = v2 + 5;
  *(_DWORD *)(a1 + 28) = v2 + 5;
  v27 = *(unsigned __int8 *)(v4 + v21);
  if (v27 >= 0x41)
    v28 = (v27 + 9) & 0xF;
  else
    v28 = v27 - 48;
  v29 = v28 | (16 * v25);
  if ((v25 & 0xFFC0) == 0xD80 && v1 >= 0xFFFFFFFE)
  {
    v46 = v29;
    v45 = v2 + 5;
    if (v3 - v26 >= 6 && *(_BYTE *)(v4 + v26) == 92)
    {
      *(_DWORD *)(a1 + 28) = v2 + 6;
      if ((_DWORD)v2 + 6 != v3 && *(_BYTE *)(v4 + (v2 + 6)) == 117)
      {
        *(_DWORD *)(a1 + 28) = v2 + 7;
        v30 = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::tryConsumeHex(a1);
        if (v30 >> 10 == 55)
          return v30 + (v46 << 10) - 56613888;
      }
      *(_DWORD *)(a1 + 28) = v45;
    }
    return v46;
  }
  return v29;
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::ParseEscapeMode)1>(uint64_t a1, unsigned int a2)
{
  void *v4;

  if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
    return 0;
  if (a2 > 0x7F)
    return 0;
  v4 = memchr("^$\\.*+?()[]{}|/", a2, 0x10uLL);
  if (a2)
  {
    if (v4)
      return 0;
  }
  *(_BYTE *)(a1 + 8) = 22;
  return 1;
}

unsigned __int8 *JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::ParseEscapeMode)0>(unsigned __int8 *result, unsigned int a2)
{
  unsigned __int8 *v3;

  if (result[32] - 1 <= 1 && a2 <= 0x7F)
  {
    v3 = result;
    result = (unsigned __int8 *)memchr("^$\\.*+?()[]{}|/", a2, 0x10uLL);
    if (!a2 || !result)
      v3[8] = 22;
  }
  return result;
}

void JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,unsigned char>::resetForReparsing(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  WTF::StringImpl **v10;
  _QWORD *v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl **v29;

  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 49) = 0;
  if (*(_DWORD *)(a1 + 64))
  {
    if (*(_DWORD *)(a1 + 68))
      *(_DWORD *)(a1 + 68) = 0;
    v9 = *(_QWORD *)(a1 + 56);
    if (a1 + 72 == v9)
    {
      if (v9)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (!v9
      || (*(_QWORD *)(a1 + 56) = 0,
          *(_DWORD *)(a1 + 64) = 0,
          WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8),
          !*(_QWORD *)(a1 + 56)))
    {
LABEL_6:
      *(_QWORD *)(a1 + 56) = a1 + 72;
      *(_DWORD *)(a1 + 64) = 16;
    }
  }
LABEL_7:
  v10 = *(WTF::StringImpl ***)(a1 + 88);
  if (v10)
  {
    *(_QWORD *)(a1 + 88) = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = (_QWORD *)(a1 + 96);
  WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 96, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(a1 + 104))
    WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 96, 0x10uLL, v13, v14, v15, v16, v17, v18);
  if (*v11)
  {
    v19 = *(unsigned int *)(a1 + 108);
    if ((_DWORD)v19 != 1)
      bzero((void *)(*v11 + 8 * v19), -8 * v19 + 8);
  }
  *(_DWORD *)(a1 + 108) = 1;
  v20 = (_QWORD *)(a1 + 120);
  WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 120, v12, v13, v14, v15, v16, v17, v18);
  if (!*(_DWORD *)(a1 + 128))
    WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 120, 0x10uLL, v22, v23, v24, v25, v26, v27);
  if (*v20)
  {
    v28 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v28 != 1)
      bzero((void *)(*v20 + 8 * v28), -8 * v28 + 8);
  }
  *(_DWORD *)(a1 + 132) = 1;
  v29 = *(WTF::StringImpl ***)(a1 + 144);
  if (v29)
  {
    *(_QWORD *)(a1 + 144) = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v29, v21, v22, v23, v24, v25, v26, v27);
  }
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::Parser(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 36) = a6;
  *(_BYTE *)(a1 + 48) = a7;
  *(_BYTE *)(a1 + 49) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 72;
  *(_QWORD *)(a1 + 64) = 16;
  JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::NamedCaptureGroups::NamedCaptureGroups((_QWORD *)(a1 + 88), a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

void JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::parseTokens(unint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, __int16 *a4, __int16 *a5, __int16 *a6, __int16 *a7, __int16 *a8)
{
  WTF::StringImpl *v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;
  char v40;
  WTF::AtomStringImpl *v41;
  const WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  char v58[24];
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  char v61;

  LOBYTE(v9) = 0;
  while (1)
  {
    v10 = *(_DWORD *)(a1 + 24);
    v11 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v11 == v10)
    {
      if (*(_DWORD *)(a1 + 68))
      {
        v36 = 7;
        goto LABEL_64;
      }
      return;
    }
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(unsigned __int16 *)(v12 + 2 * v11);
    if (v13 <= 0x7A)
      break;
    switch(v13)
    {
      case '|':
        *(_DWORD *)(a1 + 28) = v11 + 1;
        v19 = *(unsigned int *)(a1 + 108);
        if (!(_DWORD)v19)
        {
          __break(0xC471u);
          JUMPOUT(0x198F0CB84);
        }
        v20 = *(unsigned int *)(a1 + 132);
        if (!(_DWORD)v20)
        {
          __break(0xC471u);
          JUMPOUT(0x198F0CB8CLL);
        }
        WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::formUnion<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((uint64_t *)(*(_QWORD *)(a1 + 96) + 8 * v19 - 8), *(WTF::StringImpl ***)(*(_QWORD *)(a1 + 120) + 8 * v20 - 8), (const WTF::StringImpl *)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
        v21 = *(unsigned int *)(a1 + 132);
        if (!(_DWORD)v21)
        {
          __break(0xC471u);
          JUMPOUT(0x198F0CB94);
        }
        v22 = *(_QWORD *)(a1 + 120);
        v23 = *(WTF::StringImpl ***)(v22 + 8 * (v21 - 1));
        if (v23)
        {
          *(_QWORD *)(v22 + 8 * (v21 - 1)) = 0;
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v23, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
          v21 = *(unsigned int *)(a1 + 132);
        }
        if (v21 >= 2)
          WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::formUnion<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((uint64_t *)(*(_QWORD *)(a1 + 120) + 8 * v21 - 8), *(WTF::StringImpl ***)(*(_QWORD *)(a1 + 120) + 8 * v21 - 16), (const WTF::StringImpl *)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
LABEL_26:
        LOBYTE(v9) = 0;
        goto LABEL_13;
      case '{':
        v15 = v11 + 1;
        *(_DWORD *)(a1 + 28) = v11 + 1;
        if ((_DWORD)v11 + 1 == v10 || *(unsigned __int16 *)(v12 + 2 * v15) - 48 > 9)
          goto LABEL_54;
        v30 = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::consumeNumber(a1);
        v10 = *(_DWORD *)(a1 + 24);
        v31 = *(unsigned int *)(a1 + 28);
        if ((_DWORD)v31 != v10)
        {
          a3 = v30;
          v32 = *(_QWORD *)(a1 + 16);
          if (*(_WORD *)(v32 + 2 * v31) == 44)
          {
            LODWORD(v31) = v31 + 1;
            *(_DWORD *)(a1 + 28) = v31;
            if ((_DWORD)v31 == v10)
            {
LABEL_54:
              v14 = *(unsigned __int8 *)(a1 + 32);
              if ((v14 - 1) < 2)
              {
                v36 = 5;
                goto LABEL_64;
              }
              v12 = *(_QWORD *)(a1 + 16);
              LOWORD(v13) = *(_WORD *)(v12 + 2 * v11);
              goto LABEL_8;
            }
            if (*(unsigned __int16 *)(v32 + 2 * v31) - 48 > 9)
            {
LABEL_113:
              LODWORD(v30) = -1;
            }
            else
            {
              v57 = v30;
              LODWORD(v30) = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::consumeNumber(a1);
              a3 = v57;
              v10 = *(_DWORD *)(a1 + 24);
              LODWORD(v31) = *(_DWORD *)(a1 + 28);
            }
          }
          if ((_DWORD)v31 != v10 && *(_WORD *)(*(_QWORD *)(a1 + 16) + 2 * v31) == 125)
          {
            *(_DWORD *)(a1 + 28) = v31 + 1;
            if (a3 > v30)
            {
              v36 = 2;
              goto LABEL_64;
            }
            JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::parseQuantifier(a1, v9, a3);
            goto LABEL_26;
          }
          goto LABEL_54;
        }
        v10 = *(_DWORD *)(a1 + 28);
        goto LABEL_54;
      case '}':
LABEL_44:
        if (*(unsigned __int8 *)(a1 + 32) - 1 < 2)
        {
          v36 = 8;
          goto LABEL_64;
        }
LABEL_45:
        v26 = v11 + 1;
        goto LABEL_34;
    }
LABEL_7:
    v14 = *(unsigned __int8 *)(a1 + 32);
    v15 = v11 + 1;
LABEL_8:
    v16 = v14 - 3;
    *(_DWORD *)(a1 + 28) = v15;
    v17 = (v13 & 0xFC00) == 0xD800 && v16 >= 0xFFFFFFFE;
    if (!v17 || v15 == v10)
      goto LABEL_12;
    v26 = v11 + 2;
    if ((*(_WORD *)(v12 + 2 * v15) & 0xFC00) != 0xDC00)
      v26 = v15;
LABEL_34:
    *(_DWORD *)(a1 + 28) = v26;
LABEL_12:
    LOBYTE(v9) = 1;
LABEL_13:
    if (*(_BYTE *)(a1 + 8))
      return;
  }
  switch(*(_WORD *)(v12 + 2 * v11))
  {
    case '[':
      if (*(_BYTE *)(a1 + 32) == 2)
        JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::parseClassSet(a1, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
      else
        JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::parseCharacterClass(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_12;
    case '\\':
      v24 = (v11 + 1);
      *(_DWORD *)(a1 + 28) = v24;
      if ((_DWORD)v24 == v10)
      {
        LOBYTE(v9) = 0;
        v39 = 17;
LABEL_78:
        *(_BYTE *)(a1 + 8) = v39;
        goto LABEL_13;
      }
      v25 = *(unsigned __int16 *)(v12 + 2 * v24);
      switch(*(_WORD *)(v12 + 2 * v24))
      {
        case '-':
          if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
            goto LABEL_95;
          goto LABEL_33;
        case '0':
          *(_DWORD *)(a1 + 28) = v11 + 2;
          if ((_DWORD)v11 + 2 == v10
            || *(unsigned __int16 *)(v12 + 2 * (v11 + 2)) - 48 > 9)
          {
            goto LABEL_12;
          }
          if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          {
            v40 = 23;
            goto LABEL_96;
          }
          v34 = a1;
          v35 = 2;
          goto LABEL_62;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          v28 = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::consumeNumber(a1);
          if (v28 <= *(_DWORD *)(a1 + 36))
          {
            v29 = *(_DWORD *)(a1 + 44);
            if (v29 <= v28)
              v29 = v28;
            *(_DWORD *)(a1 + 44) = v29;
          }
          else
          {
            *(_DWORD *)(a1 + 28) = v24;
            if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
            {
              if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 2 * v24) > 0x37u)
              {
LABEL_30:
                v26 = v11 + 2;
                goto LABEL_34;
              }
              v34 = a1;
              v35 = 3;
LABEL_62:
              JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::consumeOctal(v34, v35);
            }
            else
            {
              *(_BYTE *)(a1 + 8) = 20;
            }
          }
          goto LABEL_12;
        case 'B':
        case 'b':
          goto LABEL_59;
        case 'D':
        case 'S':
        case 'W':
        case 'd':
        case 'f':
        case 'n':
        case 'r':
        case 's':
        case 't':
        case 'v':
        case 'w':
          goto LABEL_30;
        case 'P':
        case 'p':
          v37 = v11 + 2;
          *(_DWORD *)(a1 + 28) = v11 + 2;
          if (!*(_BYTE *)(a1 + 32))
            goto LABEL_80;
          if (v37 == v10 || *(_WORD *)(v12 + 2 * v37) != 123)
          {
            *(_BYTE *)(a1 + 8) = 25;
            goto LABEL_12;
          }
          *(_DWORD *)(a1 + 28) = v11 + 3;
          v38 = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::tryConsumeUnicodePropertyExpression(a1, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
          LOBYTE(v9) = 1;
          if (v25 == 80 && HIDWORD(v38) && (v38 - 329) <= 6)
          {
            v39 = 30;
            goto LABEL_78;
          }
          goto LABEL_13;
        case 'c':
          *(_DWORD *)(a1 + 28) = v11 + 2;
          if ((_DWORD)v11 + 2 == v10)
          {
            if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
              goto LABEL_95;
          }
          else
          {
            *(_DWORD *)(a1 + 28) = v11 + 3;
            if ((*(unsigned __int16 *)(v12 + 2 * (v11 + 2)) | 0x20u) - 97 < 0x1A)
              goto LABEL_12;
            if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
            {
              v40 = 24;
              goto LABEL_96;
            }
          }
          *(_DWORD *)(a1 + 28) = v24;
          goto LABEL_12;
        case 'k':
          v15 = v11 + 2;
          *(_DWORD *)(a1 + 28) = v11 + 2;
          if ((_DWORD)v11 + 2 == v10 || *(_WORD *)(v12 + 2 * v15) != 60)
            goto LABEL_129;
          *(_DWORD *)(a1 + 28) = v11 + 3;
          JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::tryConsumeGroupName(&v60, a1, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
          if (*(_BYTE *)(a1 + 8))
            goto LABEL_91;
          if (!v61)
            goto LABEL_128;
          v9 = v60;
          if (v60)
          {
            *(_DWORD *)v60 += 2;
            v59 = v9;
            v48 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::NamedCaptureGroups::contains(*(WTF **)(a1 + 88), &v59, v42);
            v11 = (unint64_t)v48;
            if (*(_DWORD *)v9 == 2)
            {
              WTF::StringImpl::~StringImpl(v9, v41, (uint64_t)v42, v43, v44, v45, v46, v47);
              WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
              if ((_DWORD)v11)
                goto LABEL_111;
            }
            else
            {
              *(_DWORD *)v9 -= 2;
              if ((v48 & 1) != 0)
                goto LABEL_111;
            }
          }
          else
          {
            v59 = 0;
            if ((JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::NamedCaptureGroups::contains(*(WTF **)(a1 + 88), &v59, v42) & 1) != 0)goto LABEL_111;
          }
          if (*(_BYTE *)(a1 + 48))
          {
            if (v61)
            {
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(a1 + 144), &v60, v42, v43, v44, v45, v46, v47, (uint64_t)v58);
LABEL_111:
              if (v61)
              {
LABEL_91:
                std::optional<WTF::String>::~optional((uint64_t)&v60, v41, (uint64_t)v42, v43, v44, v45, v46, v47);
                goto LABEL_12;
              }
            }
            std::__throw_bad_optional_access[abi:sn180100]();
            goto LABEL_113;
          }
LABEL_128:
          std::optional<WTF::String>::~optional((uint64_t)&v60, v41, (uint64_t)v42, v43, v44, v45, v46, v47);
LABEL_129:
          *(_DWORD *)(a1 + 28) = v15;
          if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
          {
            LOBYTE(v9) = 1;
            *(_BYTE *)(a1 + 49) = 1;
            goto LABEL_13;
          }
LABEL_95:
          v40 = 22;
LABEL_96:
          *(_BYTE *)(a1 + 8) = v40;
          break;
        case 'q':
          *(_DWORD *)(a1 + 28) = v11 + 2;
LABEL_80:
          JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::ParseEscapeMode)0>(a1, v25);
          goto LABEL_12;
        case 'u':
          JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::UnicodeParseContext)0>(a1);
          goto LABEL_12;
        case 'x':
          *(_DWORD *)(a1 + 28) = v11 + 2;
          if (JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::tryConsumeHex(a1) != -1
            || *(unsigned __int8 *)(a1 + 32) - 1 > 1)
          {
            goto LABEL_12;
          }
          goto LABEL_95;
        default:
          if ((JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::ParseEscapeMode)0>(a1, *(unsigned __int16 *)(v12 + 2 * v24)) & 1) != 0)goto LABEL_12;
          LODWORD(v24) = *(_DWORD *)(a1 + 28);
LABEL_33:
          v26 = v24 + 1;
          goto LABEL_34;
      }
      goto LABEL_12;
    case ']':
      goto LABEL_44;
    case '^':
LABEL_17:
      LOBYTE(v9) = 0;
      v18 = v11 + 1;
      goto LABEL_18;
    default:
      switch(*(_WORD *)(v12 + 2 * v11))
      {
        case '$':
          goto LABEL_17;
        case '%':
        case '&':
        case '\'':
        case ',':
        case '-':
          goto LABEL_7;
        case '(':
          JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::parseParenthesesBegin((WTF::StringImpl ***)a1, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
          goto LABEL_26;
        case ')':
          JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::parseParenthesesEnd(a1, (uint64_t)a2, (const WTF::StringImpl *)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
          LOBYTE(v9) = v27;
          goto LABEL_13;
        case '*':
        case '+':
          goto LABEL_56;
        case '.':
          goto LABEL_45;
        default:
          if (v13 != 63)
            goto LABEL_7;
LABEL_56:
          v33 = v11 + 1;
          *(_DWORD *)(a1 + 28) = v11 + 1;
          if (v9 == 1)
          {
            if (v33 != v10 && *(_WORD *)(v12 + 2 * v33) == 63)
            {
LABEL_59:
              LOBYTE(v9) = 0;
              v18 = v11 + 2;
LABEL_18:
              *(_DWORD *)(a1 + 28) = v18;
              goto LABEL_13;
            }
            goto LABEL_26;
          }
          if (v9 == 2)
            v36 = 6;
          else
            v36 = 3;
LABEL_64:
          *(_BYTE *)(a1 + 8) = v36;
          return;
      }
  }
}

void JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::handleIllegalReferences(unint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  __int16 *v16;
  __int16 *v17;
  __int16 *v18;
  __int16 *v19;
  __int16 *v20;

  v3 = *(_DWORD *)(a1 + 40);
  v2 = *(_DWORD *)(a1 + 44);
  if (v2 > v3)
  {
    if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
    {
      v11 = 20;
LABEL_13:
      *(_BYTE *)(a1 + 8) = v11;
      return;
    }
    *(_DWORD *)(a1 + 36) = v3;
  }
  if (*(_BYTE *)(a1 + 49))
  {
    v12 = *(_QWORD *)(a1 + 88);
    if (v12)
    {
      if (*(_DWORD *)(v12 - 12))
      {
LABEL_12:
        v11 = 21;
        goto LABEL_13;
      }
    }
  }
  if (JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::containsIllegalNamedForwardReference(a1))
  {
    if (*(unsigned __int8 *)(a1 + 32) - 1 >= 2)
    {
      v13 = *(_QWORD *)(a1 + 88);
      if (!v13 || !*(_DWORD *)(v13 - 12))
      {
        *(_BYTE *)(a1 + 48) = 0;
        goto LABEL_17;
      }
    }
    goto LABEL_12;
  }
  if (v2 > v3)
  {
LABEL_17:
    JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::resetForReparsing(a1, v4, v5, v6, v7, v8, v9, v10);
    JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::parseTokens(a1, v14, v15, v16, v17, v18, v19, v20);
  }
}

WTF::StringImpl ***JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::parseParenthesesBegin(WTF::StringImpl ***result, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl ***v8;
  WTF::StringImpl **v9;
  int v10;
  int v11;
  int v12;
  WTF::StringImpl **v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  WTF::StringImpl *v31;
  char v32;
  WTF::StringImpl *v33;
  _BYTE v34[24];
  WTF::StringImpl *v35;
  char v36;
  _BYTE v37[23];
  char v38;

  v8 = result;
  v9 = result[2];
  v11 = *((_DWORD *)result + 6);
  v10 = *((_DWORD *)result + 7);
  *((_DWORD *)result + 7) = v10 + 1;
  v38 = 0;
  if (v10 + 1 == v11 || *((_WORD *)v9 + (v10 + 1)) != 63)
  {
    v30[0] = 0;
    v30[8] = 0;
    v13 = (WTF::StringImpl **)v30;
    goto LABEL_6;
  }
  *((_DWORD *)result + 7) = v10 + 2;
  if (v10 + 2 == v11)
  {
    *((_BYTE *)result + 8) = 10;
    return result;
  }
  *((_DWORD *)result + 7) = v10 + 3;
  v12 = *((unsigned __int16 *)v9 + (v10 + 2));
  if (v12 != 58)
  {
    if (v12 == 33)
      goto LABEL_14;
    if (v12 != 60)
    {
      if (v12 != 61)
      {
        *((_BYTE *)result + 8) = 10;
        goto LABEL_7;
      }
LABEL_14:
      v14 = 1;
      v38 = 1;
      goto LABEL_8;
    }
    JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::tryConsumeGroupName(&v35, (uint64_t)result, a3, a4, a5, a6, a7, a8);
    if (!*((_BYTE *)v8 + 8))
    {
      if (v36)
      {
        if (*((_BYTE *)v8 + 49))
        {
          v16 = 21;
        }
        else
        {
          v19 = v35;
          if (v35)
            *(_DWORD *)v35 += 2;
          v33 = v19;
          JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::NamedCaptureGroups::add((uint64_t)v34, (uint64_t)(v8 + 11), &v33, a4, a5, a6, a7, a8);
          v20 = v33;
          v33 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
            {
              WTF::StringImpl::~StringImpl(v20, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
            }
            else
            {
              *(_DWORD *)v20 -= 2;
            }
          }
          if (v34[16])
          {
            LOBYTE(v31) = 0;
            v32 = 0;
            if (v36)
            {
              v21 = v35;
              if (v35)
                *(_DWORD *)v35 += 2;
              v31 = v21;
              v32 = 1;
            }
            std::optional<WTF::String>::~optional((uint64_t)&v31, a2, a3, a4, a5, a6, a7, a8);
            goto LABEL_19;
          }
          v16 = 12;
        }
      }
      else
      {
        v17 = *((unsigned int *)v8 + 7);
        if ((_DWORD)v17 != *((_DWORD *)v8 + 6))
        {
          v18 = *((unsigned __int16 *)v8[2] + v17);
          if (v18 == 61 || v18 == 33)
          {
            *((_DWORD *)v8 + 7) = v17 + 1;
            v14 = 2;
            v38 = 2;
            std::optional<WTF::String>::~optional((uint64_t)&v35, a2, a3, a4, a5, a6, a7, a8);
            goto LABEL_8;
          }
        }
        v16 = 11;
      }
      *((_BYTE *)v8 + 8) = v16;
    }
LABEL_19:
    v13 = &v35;
    goto LABEL_6;
  }
  v37[0] = 0;
  v37[8] = 0;
  v13 = (WTF::StringImpl **)v37;
LABEL_6:
  std::optional<WTF::String>::~optional((uint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
LABEL_7:
  v14 = 0;
  ++*((_DWORD *)v8 + 10);
LABEL_8:
  v15 = *((unsigned int *)v8 + 17);
  if ((_DWORD)v15 == *((_DWORD *)v8 + 16))
  {
    WTF::Vector<JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ParenthesesType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::ParenthesesType&>((uint64_t)(v8 + 7), (unint64_t)&v38);
  }
  else
  {
    *((_BYTE *)v8[7] + v15) = v14;
    *((_DWORD *)v8 + 17) = v15 + 1;
  }
  return JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::NamedCaptureGroups::pushParenthesis(v8 + 11);
}

void JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::parseParenthesesEnd(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;

  ++*(_DWORD *)(a1 + 28);
  if (*(_DWORD *)(a1 + 68))
  {
    JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::NamedCaptureGroups::popParenthesis(a1 + 88, a2, a3, a4, a5, a6, a7, a8);
    v9 = *(_DWORD *)(a1 + 68);
    if (v9)
      *(_DWORD *)(a1 + 68) = v9 - 1;
    else
      __break(0xC471u);
  }
  else
  {
    *(_BYTE *)(a1 + 8) = 9;
  }
}

void JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::parseClassSet(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  int v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  char *v24;
  char v25;
  unsigned int v26;
  char v27;
  unint64_t v28;
  char *v29;
  __int16 v30;
  char v31;
  int v32;
  unsigned int v33;
  char v34;
  unsigned int v35;
  unsigned int v36;
  int v38;
  int v39;
  unsigned int v40;
  char v41;
  BOOL v42;
  char v43;
  int v44;
  int v45;
  int v46;
  char *v47;
  char v48;
  char *v51;
  char v52;
  int v53;
  int v54;
  char *v55;
  char v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unsigned int v60;
  BOOL v61;
  void *v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  void *v79;
  unsigned int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  BOOL v94;
  unsigned int v95;
  unsigned __int8 v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned __int8 v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v113;
  unsigned __int8 v114;
  unsigned int v115;
  char *v116;
  char v117;
  int v118;
  int v119;
  char v120;
  unsigned __int8 v121;
  char *v122;
  char v123;
  char v124;
  int v126;
  char v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  WTF *v134;
  char *v135;
  uint64_t v136;
  unsigned int v137;
  WTF *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 v141;
  char *v142;
  __int128 v143;
  __int128 v144;
  int v145;

  v9 = *(_QWORD *)(a1 + 16);
  v11 = *(_DWORD *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = v10 + 1;
  v12 = (char *)(a1 + 8);
  v135 = (char *)(a1 + 8);
  v138 = 0;
  v139 = 0;
  v136 = 0;
  v137 = 0;
  if (v10 + 1 == v11 || *(_WORD *)(v9 + 2 * (v10 + 1)) != 94)
  {
    v13 = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 28) = v10 + 2;
    v13 = 1;
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  BYTE6(v136) = v13;
  while (2)
  {
    v19 = *(_DWORD *)(a1 + 24);
    v18 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v18 == v19)
      goto LABEL_618;
    v20 = *(_QWORD *)(a1 + 16);
    v21 = *(unsigned __int16 *)(v20 + 2 * v18);
    if (v21 <= 0x5A)
    {
      if (v21 == 38)
      {
        *(_DWORD *)(a1 + 28) = v18 + 1;
        if ((_DWORD)v18 + 1 != v19)
        {
          if (*(_WORD *)(v20 + 2 * (v18 + 1)) != 38)
          {
            if (!memchr("()[]{}/|)", 38, 0xAuLL))
            {
              HIBYTE(v136) = 0;
              switch((int)v136)
              {
                case 0:
                case 7:
                  goto LABEL_80;
                case 1:
                  if (v17 >= 2)
                    goto LABEL_132;
                  if (!(_DWORD)v17)
                  {
                    v14 = 1;
                    BYTE4(v136) = 1;
                    v15 = 1;
                    v16 = 1;
                  }
                  v17 = 1;
                  v137 = 38;
                  LODWORD(v136) = 1;
                  goto LABEL_571;
                case 2:
                  if (v137 > 0x26)
                  {
                    v55 = v135;
                    v56 = 14;
                    goto LABEL_133;
                  }
                  if (!(_DWORD)v17)
                  {
                    v14 = 1;
                    BYTE4(v136) = 1;
                    v15 = 1;
                    v16 = 1;
                    v17 = 1;
                  }
                  v46 = 5;
LABEL_81:
                  LODWORD(v136) = v46;
                  break;
                case 3:
                case 5:
                  if (!(_DWORD)v17)
                  {
                    v14 = 1;
                    BYTE4(v136) = 1;
                    v15 = 1;
                    v16 = 1;
                    v17 = 1;
                  }
LABEL_80:
                  v137 = 38;
                  v46 = 1;
                  goto LABEL_81;
                case 4:
                  v55 = v135;
                  v56 = 15;
                  goto LABEL_133;
                case 6:
                  if (v17 >= 2)
                  {
                    *v135 = 29;
                    v57 = v17;
                  }
                  else
                  {
                    v57 = 1;
                    if (!(_DWORD)v17)
                    {
                      BYTE4(v136) = 1;
                      v14 = 1;
                      v15 = 1;
                      v16 = 1;
                    }
                  }
                  v137 = 38;
                  LODWORD(v136) = 1;
                  v17 = v57;
                  goto LABEL_571;
                default:
                  goto LABEL_571;
              }
              goto LABEL_571;
            }
            goto LABEL_619;
          }
          *(_DWORD *)(a1 + 28) = v18 + 2;
          if ((_DWORD)v18 + 2 == v19 || *(_WORD *)(v20 + 2 * (v18 + 2)) == 38)
          {
LABEL_619:
            v133 = 31;
            goto LABEL_620;
          }
          if ((_DWORD)v136)
          {
            v17 = v16;
            if ((v16 | 2) == 2)
            {
              v14 = 2;
              BYTE4(v136) = 2;
              LODWORD(v136) = 7;
              goto LABEL_71;
            }
          }
LABEL_132:
          v55 = v135;
          v56 = 29;
LABEL_133:
          *v55 = v56;
          goto LABEL_571;
        }
      }
      else
      {
        if (v21 != 45)
        {
LABEL_44:
          v35 = *(unsigned __int8 *)(a1 + 32) - 3;
          v36 = v18 + 1;
          *(_DWORD *)(a1 + 28) = v18 + 1;
          if ((v21 & 0xFC00) == 0xD800 && v35 >= 0xFFFFFFFE)
          {
            if (v36 != v19)
            {
              *(_DWORD *)(a1 + 28) = v18 + 2;
              v119 = *(unsigned __int16 *)(v20 + 2 * v36);
              if ((v119 & 0xFC00) == 0xDC00)
                v21 = v119 + (v21 << 10) - 56613888;
              else
                *(_DWORD *)(a1 + 28) = v36;
            }
            goto LABEL_54;
          }
          if (v21)
          {
            if (v21 > 0x7F)
              goto LABEL_54;
            if (!memchr("()[]{}/|)", v21, 0xAuLL))
            {
              if (v36 == v19
                || v21 != *(unsigned __int16 *)(v20 + 2 * v36)
              {
LABEL_54:
                v14 = BYTE4(v136);
                v38 = HIBYTE(v136);
                HIBYTE(v136) = 0;
                switch((int)v136)
                {
                  case 0:
                  case 7:
                    goto LABEL_93;
                  case 1:
                    if (BYTE4(v136) >= 2u)
                      goto LABEL_103;
                    if (v21 == 45)
                    {
                      v39 = 2;
                      goto LABEL_569;
                    }
                    if (!BYTE4(v136))
                      BYTE4(v136) = 1;
                    v14 = 1;
                    v137 = v21;
                    LODWORD(v136) = 1;
                    v15 = 1;
                    v16 = 1;
                    v17 = 1;
                    goto LABEL_571;
                  case 2:
                    if (v137 > v21)
                    {
                      v47 = v135;
                      v48 = 14;
                      goto LABEL_104;
                    }
                    if (!BYTE4(v136))
                    {
                      v14 = 1;
                      BYTE4(v136) = 1;
                    }
                    v39 = 5;
                    goto LABEL_569;
                  case 3:
                    if (v21 != 45 || BYTE4(v136) > 1u)
                      goto LABEL_91;
                    v39 = 4;
                    goto LABEL_569;
                  case 4:
                    v47 = v135;
                    v48 = 15;
                    goto LABEL_104;
                  case 5:
LABEL_91:
                    if (!BYTE4(v136))
                    {
                      v14 = 1;
                      BYTE4(v136) = 1;
                    }
LABEL_93:
                    if (v21 != 45 || v38 != 0)
                      goto LABEL_97;
                    v47 = v135;
                    v48 = 31;
                    goto LABEL_104;
                  case 6:
                    if (BYTE4(v136) >= 2u)
                      *v135 = 29;
                    if (v21 != 45)
                    {
                      if (!BYTE4(v136))
                      {
                        v14 = 1;
                        BYTE4(v136) = 1;
                      }
LABEL_97:
                      v137 = v21;
                      v39 = 1;
                      goto LABEL_569;
                    }
LABEL_103:
                    v47 = v135;
                    v48 = 29;
LABEL_104:
                    *v47 = v48;
                    break;
                  default:
                    goto LABEL_570;
                }
                goto LABEL_570;
              }
LABEL_630:
              v133 = 29;
LABEL_620:
              *v12 = v133;
              goto LABEL_621;
            }
          }
          goto LABEL_619;
        }
        *(_DWORD *)(a1 + 28) = v18 + 1;
        if ((_DWORD)v18 + 1 != v19)
        {
          if (*(_WORD *)(v20 + 2 * (v18 + 1)) == 45)
          {
            *(_DWORD *)(a1 + 28) = v18 + 2;
            if ((_DWORD)v18 + 2 == v19 || *(_WORD *)(v20 + 2 * (v18 + 2)) == 45)
              goto LABEL_619;
            if ((_DWORD)v136)
            {
              if (!(_DWORD)v14 || (v15 = v14, v16 = v14, v17 = v14, (_DWORD)v14 == 3))
              {
                v14 = 3;
                BYTE4(v136) = 3;
                LODWORD(v136) = 7;
                v15 = 3;
                v16 = 3;
                v17 = 3;
                goto LABEL_571;
              }
            }
            goto LABEL_132;
          }
          if (memchr("()[]{}/|)", 45, 0xAuLL))
            goto LABEL_619;
          v44 = HIBYTE(v136);
          HIBYTE(v136) = 0;
          switch((int)v136)
          {
            case 0:
            case 7:
              goto LABEL_125;
            case 1:
              if (v15 >= 2)
                goto LABEL_105;
              v45 = 2;
              goto LABEL_127;
            case 2:
              if (v137 > 0x2D)
              {
                v51 = v135;
                v52 = 14;
                goto LABEL_162;
              }
              if (!(_DWORD)v15)
              {
                v14 = 1;
                BYTE4(v136) = 1;
                v15 = 1;
              }
              v45 = 5;
              goto LABEL_127;
            case 3:
              if (v15 > 1)
                goto LABEL_125;
              v45 = 4;
              goto LABEL_127;
            case 4:
              v51 = v135;
              v52 = 15;
              goto LABEL_162;
            case 5:
              if ((_DWORD)v15)
              {
LABEL_125:
                if (v44)
                {
LABEL_126:
                  v137 = 45;
                  v45 = 1;
LABEL_127:
                  LODWORD(v136) = v45;
LABEL_163:
                  v16 = v15;
                  v17 = v15;
                  goto LABEL_571;
                }
              }
              else
              {
                v14 = 1;
                BYTE4(v136) = 1;
                v15 = 1;
                if (v44)
                  goto LABEL_126;
              }
              v51 = v135;
              v52 = 31;
LABEL_162:
              *v51 = v52;
              goto LABEL_163;
            case 6:
LABEL_105:
              v51 = v135;
              v52 = 29;
              goto LABEL_162;
            default:
              goto LABEL_163;
          }
        }
      }
LABEL_618:
      v133 = 13;
      goto LABEL_620;
    }
    if (v21 == 91)
    {
      *(_DWORD *)(a1 + 28) = v18 + 1;
      if ((_DWORD)v18 + 1 == v19 || *(_WORD *)(v20 + 2 * (v18 + 1)) != 94)
      {
        v27 = 0;
      }
      else
      {
        *(_DWORD *)(a1 + 28) = v18 + 2;
        v27 = 1;
      }
      LOWORD(v140) = WORD2(v136);
      BYTE2(v140) = BYTE6(v136);
      if (HIDWORD(v139) == (_DWORD)v139)
      {
        v28 = WTF::Vector<JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassSetParserDelegate::NestingState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v138, HIDWORD(v139) + 1, (unint64_t)&v140);
        v29 = (char *)v138 + 3 * HIDWORD(v139);
        v30 = *(_WORD *)v28;
        v31 = *(_BYTE *)(v28 + 2);
      }
      else
      {
        v29 = (char *)v138 + 3 * HIDWORD(v139);
        v30 = v140;
        v31 = BYTE2(v140);
      }
      v29[2] = v31;
      *(_WORD *)v29 = v30;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      ++HIDWORD(v139);
      WORD2(v136) = 0;
      BYTE6(v136) = v27;
      goto LABEL_571;
    }
    if (v21 != 92)
    {
      if (v21 == 93)
      {
        *(_DWORD *)(a1 + 28) = v18 + 1;
        v22 = v136;
        if ((_DWORD)v136 == 1)
          v22 = 0;
        v23 = BYTE5(v136);
        if (BYTE6(v136) && BYTE5(v136))
          *v135 = 30;
        if (!HIDWORD(v139))
        {
          if (v22 == 7)
            *v135 = 31;
          if (BYTE6(v136) && BYTE5(v136))
            *v135 = 30;
          goto LABEL_621;
        }
        v24 = (char *)v138 + 3 * HIDWORD(v139);
        v25 = *(v24 - 1);
        LODWORD(v24) = *(unsigned __int16 *)(v24 - 3);
        --HIDWORD(v139);
        v14 = v24;
        BYTE4(v136) = (_BYTE)v24;
        BYTE6(v136) = v25 & 1;
        v26 = (v24 >> 8) & 1;
        BYTE5(v136) = v26;
        LODWORD(v136) = 6;
        if (v14 < 2)
        {
          BYTE5(v136) = v26 | v23;
          goto LABEL_570;
        }
        v15 = v14;
        v16 = v14;
        v17 = v14;
        if ((_DWORD)v14 != 2)
          goto LABEL_571;
        if (v23)
          v42 = v26 == 0;
        else
          v42 = 1;
        v43 = !v42;
        BYTE5(v136) = v43;
        v14 = 2;
LABEL_71:
        v15 = 2;
        v16 = 2;
        v17 = 2;
        goto LABEL_571;
      }
      goto LABEL_44;
    }
    v32 = v136;
    switch((int)v136)
    {
      case 0:
      case 7:
        goto LABEL_35;
      case 1:
        if (v14 > 1)
          goto LABEL_630;
        v32 = 0;
        LODWORD(v136) = 0;
LABEL_35:
        HIBYTE(v136) = 1;
        v33 = v18 + 1;
        *(_DWORD *)(a1 + 28) = v18 + 1;
        if ((_DWORD)v18 + 1 == v19)
        {
          v34 = 0;
          *v12 = 17;
          goto LABEL_556;
        }
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        if (v14 < 2)
          goto LABEL_35;
        goto LABEL_630;
      default:
        goto LABEL_630;
    }
    v40 = *(unsigned __int16 *)(v20 + 2 * v33);
    switch(*(_WORD *)(v20 + 2 * v33))
    {
      case '-':
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
        {
          *(_DWORD *)(a1 + 28) = v18 + 2;
          HIBYTE(v136) = 0;
          switch(v32)
          {
            case 0:
            case 7:
              goto LABEL_433;
            case 1:
              if (v14 >= 2)
                goto LABEL_423;
              goto LABEL_177;
            case 2:
              goto LABEL_406;
            case 3:
              if (v14 > 1)
                goto LABEL_433;
              goto LABEL_419;
            case 4:
              goto LABEL_503;
            case 5:
              goto LABEL_431;
            case 6:
              goto LABEL_423;
            default:
              goto LABEL_505;
          }
        }
        goto LABEL_174;
      case '0':
        *(_DWORD *)(a1 + 28) = v18 + 2;
        if ((_DWORD)v18 + 2 == v19
          || (v64 = *(unsigned __int16 *)(v20 + 2 * (v18 + 2)),
              v65 = v64 - 48,
              (v64 - 48) >= 0xA))
        {
          HIBYTE(v136) = 0;
          switch(v32)
          {
            case 0:
            case 7:
              goto LABEL_488;
            case 1:
              if (v14 >= 2)
                goto LABEL_423;
              goto LABEL_397;
            case 2:
              if (!v137)
                goto LABEL_445;
              goto LABEL_407;
            case 3:
            case 5:
              goto LABEL_397;
            case 4:
              goto LABEL_503;
            case 6:
              if (v14 < 2)
              {
LABEL_397:
                if (!(_DWORD)v14)
                  BYTE4(v136) = 1;
              }
              else
              {
                *v135 = 29;
              }
LABEL_488:
              v34 = 1;
              v137 = 0;
              break;
            default:
              goto LABEL_505;
          }
          goto LABEL_555;
        }
        if (*(unsigned __int8 *)(a1 + 32) - 1 >= 2)
        {
          if ((v64 & 0xFFF8) == 0x30)
          {
            *(_DWORD *)(a1 + 28) = v18 + 3;
            if ((_DWORD)v18 + 3 != v19)
            {
              v66 = *(unsigned __int16 *)(v20 + 2 * (v18 + 3));
              if ((v66 & 0xFFF8) == 0x30)
              {
                *(_DWORD *)(a1 + 28) = v18 + 4;
                v65 = v66 + 8 * v65 - 48;
              }
            }
          }
          else
          {
            v65 = 0;
          }
          HIBYTE(v136) = 0;
          switch(v32)
          {
            case 0:
            case 7:
              goto LABEL_553;
            case 1:
              goto LABEL_500;
            case 2:
              goto LABEL_506;
            case 3:
              goto LABEL_508;
            case 4:
              goto LABEL_503;
            case 5:
              goto LABEL_551;
            case 6:
              goto LABEL_511;
            default:
              goto LABEL_505;
          }
        }
LABEL_62:
        v41 = 23;
        goto LABEL_405;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
        {
          if (v40 > 0x37)
          {
            *(_DWORD *)(a1 + 28) = v18 + 2;
          }
          else
          {
            v53 = 0;
            v40 = 0;
            do
            {
              if (!((_DWORD)v18 - v19 + 1 + v53))
                break;
              v54 = *(unsigned __int16 *)(v20 + 2 * (v18 + v53 + 1));
              if ((v54 & 0xFFF8) != 0x30)
                break;
              *(_DWORD *)(a1 + 28) = v18 + v53 + 2;
              v40 = v54 + 8 * v40 - 48;
              if (v53 == 2)
                break;
              ++v53;
            }
            while (v40 < 0x20);
          }
          HIBYTE(v136) = 0;
          switch(v32)
          {
            case 0:
            case 7:
              goto LABEL_433;
            case 1:
LABEL_175:
              if (v14 >= 2)
                goto LABEL_423;
              if (v40 == 45)
                goto LABEL_177;
              goto LABEL_431;
            case 2:
              goto LABEL_406;
            case 3:
LABEL_417:
              if (v14 <= 1 && v40 == 45)
                goto LABEL_419;
              goto LABEL_431;
            case 4:
              goto LABEL_503;
            case 5:
              goto LABEL_431;
            case 6:
LABEL_420:
              if (v14 >= 2)
                *v135 = 29;
              if (v40 == 45)
                goto LABEL_423;
              goto LABEL_431;
            default:
              goto LABEL_505;
          }
        }
        goto LABEL_62;
      case 'B':
        *(_DWORD *)(a1 + 28) = v18 + 2;
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          goto LABEL_404;
        HIBYTE(v136) = 0;
        switch(v32)
        {
          case 0:
          case 7:
            goto LABEL_523;
          case 1:
            if (v14 >= 2)
              goto LABEL_423;
            goto LABEL_187;
          case 2:
            if (v137 < 0x43)
              goto LABEL_445;
            goto LABEL_407;
          case 3:
          case 5:
            goto LABEL_187;
          case 4:
            goto LABEL_503;
          case 6:
            if (v14 < 2)
            {
LABEL_187:
              if (!(_DWORD)v14)
                BYTE4(v136) = 1;
            }
            else
            {
              *v135 = 29;
            }
LABEL_523:
            v34 = 1;
            v137 = 66;
            break;
          default:
            goto LABEL_505;
        }
        goto LABEL_555;
      case 'D':
        *(_DWORD *)(a1 + 28) = v18 + 2;
        switch(v32)
        {
          case 0:
          case 3:
          case 7:
            goto LABEL_376;
          case 1:
            goto LABEL_408;
          case 2:
          case 4:
            goto LABEL_503;
          case 5:
            goto LABEL_409;
          case 6:
            goto LABEL_412;
          default:
            goto LABEL_505;
        }
        goto LABEL_505;
      case 'P':
      case 'p':
        v58 = v18 + 2;
        *(_DWORD *)(a1 + 28) = v18 + 2;
        if (!*(_BYTE *)(a1 + 32))
        {
          HIBYTE(v136) = 0;
          switch(v32)
          {
            case 0:
            case 7:
              goto LABEL_433;
            case 1:
              goto LABEL_402;
            case 2:
              goto LABEL_406;
            case 3:
            case 5:
              goto LABEL_431;
            case 4:
              goto LABEL_503;
            case 6:
              goto LABEL_430;
            default:
              goto LABEL_505;
          }
        }
        if (v58 == v19 || *(_WORD *)(v20 + 2 * v58) != 123)
        {
          v41 = 25;
          goto LABEL_405;
        }
        *(_DWORD *)(a1 + 28) = v18 + 3;
        v59 = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::tryConsumeUnicodePropertyExpression(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        if (HIDWORD(v59))
        {
          v60 = v59 - 329;
          if (v40 == 80 && v60 <= 6)
          {
            *v12 = 30;
          }
          else
          {
            v14 = BYTE4(v136);
            switch((int)v136)
            {
              case 0:
              case 3:
              case 7:
                goto LABEL_490;
              case 1:
                if (BYTE4(v136) >= 2u)
                  goto LABEL_423;
                goto LABEL_588;
              case 2:
              case 4:
                goto LABEL_503;
              case 5:
LABEL_588:
                if (BYTE4(v136) == 2)
                  goto LABEL_592;
                if (BYTE4(v136) == 1)
                  goto LABEL_491;
                if (BYTE4(v136))
                  break;
                BYTE4(v136) = 1;
LABEL_491:
                v120 = BYTE5(v136) | (v60 < 7);
LABEL_598:
                BYTE5(v136) = v120;
                break;
              case 6:
                if (BYTE4(v136) >= 2u)
                  *v135 = 29;
LABEL_490:
                if (BYTE4(v136) < 2u)
                  goto LABEL_491;
                if (BYTE4(v136) != 2)
                  break;
LABEL_592:
                v120 = v60 < 7 && BYTE5(v136) != 0;
                goto LABEL_598;
              default:
                v34 = 1;
                goto LABEL_557;
            }
LABEL_415:
            v63 = 3;
LABEL_416:
            LODWORD(v136) = v63;
          }
        }
        goto LABEL_505;
      case 'S':
        *(_DWORD *)(a1 + 28) = v18 + 2;
        switch(v32)
        {
          case 0:
          case 3:
          case 7:
            goto LABEL_376;
          case 1:
            goto LABEL_408;
          case 2:
          case 4:
            goto LABEL_503;
          case 5:
            goto LABEL_409;
          case 6:
            goto LABEL_412;
          default:
            goto LABEL_505;
        }
        goto LABEL_505;
      case 'W':
        *(_DWORD *)(a1 + 28) = v18 + 2;
        switch(v32)
        {
          case 0:
          case 3:
          case 7:
            goto LABEL_376;
          case 1:
            goto LABEL_408;
          case 2:
          case 4:
            goto LABEL_503;
          case 5:
            goto LABEL_409;
          case 6:
            goto LABEL_412;
          default:
            goto LABEL_505;
        }
        goto LABEL_505;
      case 'b':
        *(_DWORD *)(a1 + 28) = v18 + 2;
        HIBYTE(v136) = 0;
        switch(v32)
        {
          case 0:
          case 7:
            goto LABEL_195;
          case 1:
            if (v14 >= 2)
              goto LABEL_423;
            goto LABEL_193;
          case 2:
            if (v137 < 9)
              goto LABEL_445;
            goto LABEL_407;
          case 3:
          case 5:
LABEL_193:
            if (!(_DWORD)v14)
              BYTE4(v136) = 1;
LABEL_195:
            v34 = 1;
            v65 = 8;
            goto LABEL_554;
          case 4:
            goto LABEL_503;
          case 6:
            if (v14 >= 2)
            {
              *v135 = 29;
              v65 = 8;
              goto LABEL_553;
            }
            v65 = 8;
            if ((_DWORD)v14)
              goto LABEL_553;
            break;
          default:
            goto LABEL_505;
        }
LABEL_552:
        BYTE4(v136) = 1;
        goto LABEL_553;
      case 'c':
        *(_DWORD *)(a1 + 28) = v18 + 2;
        if ((_DWORD)v18 + 2 == v19)
        {
          if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
            goto LABEL_404;
LABEL_198:
          *(_DWORD *)(a1 + 28) = v33;
          HIBYTE(v136) = 0;
          switch(v32)
          {
            case 0:
            case 7:
              goto LABEL_201;
            case 1:
              if (v14 >= 2)
                goto LABEL_423;
              goto LABEL_199;
            case 2:
              if (v137 < 0x5D)
                goto LABEL_445;
              goto LABEL_407;
            case 3:
            case 5:
LABEL_199:
              if (!(_DWORD)v14)
                BYTE4(v136) = 1;
LABEL_201:
              v34 = 1;
              v65 = 92;
              goto LABEL_554;
            case 4:
              goto LABEL_503;
            case 6:
              if (v14 < 2)
              {
                v65 = 92;
                goto LABEL_551;
              }
              *v135 = 29;
              v65 = 92;
              break;
            default:
              goto LABEL_505;
          }
          goto LABEL_553;
        }
        *(_DWORD *)(a1 + 28) = v18 + 3;
        v118 = *(unsigned __int16 *)(v20 + 2 * (v18 + 2));
        if ((v118 | 0x20u) - 97 <= 0x19)
        {
          HIBYTE(v136) = 0;
          v65 = v118 & 0x1F;
          switch(v32)
          {
            case 0:
            case 7:
              goto LABEL_553;
            case 1:
              goto LABEL_426;
            case 2:
              goto LABEL_506;
            case 3:
            case 5:
              goto LABEL_551;
            case 4:
              goto LABEL_503;
            case 6:
              goto LABEL_437;
            default:
              goto LABEL_505;
          }
        }
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
        {
          v41 = 24;
          goto LABEL_405;
        }
        if (v118 != 95 && (v118 - 48) > 9)
          goto LABEL_198;
        HIBYTE(v136) = 0;
        v65 = v118 & 0x1F;
        switch(v32)
        {
          case 0:
          case 7:
            break;
          case 1:
LABEL_426:
            if (v14 < 2)
              goto LABEL_551;
            goto LABEL_423;
          case 2:
            goto LABEL_506;
          case 3:
          case 5:
            goto LABEL_551;
          case 4:
            goto LABEL_503;
          case 6:
LABEL_437:
            if (v14 < 2)
              goto LABEL_551;
            *v135 = 29;
            break;
          default:
            goto LABEL_505;
        }
LABEL_553:
        v34 = 1;
LABEL_554:
        v137 = v65;
        goto LABEL_555;
      case 'd':
        *(_DWORD *)(a1 + 28) = v18 + 2;
        switch(v32)
        {
          case 0:
          case 3:
          case 7:
            goto LABEL_376;
          case 1:
            goto LABEL_408;
          case 2:
          case 4:
            goto LABEL_503;
          case 5:
            goto LABEL_409;
          case 6:
            goto LABEL_412;
          default:
            goto LABEL_505;
        }
        goto LABEL_505;
      case 'f':
        *(_DWORD *)(a1 + 28) = v18 + 2;
        HIBYTE(v136) = 0;
        switch(v32)
        {
          case 0:
          case 7:
            goto LABEL_206;
          case 1:
            if (v14 >= 2)
              goto LABEL_423;
            goto LABEL_204;
          case 2:
            if (v137 < 0xD)
              goto LABEL_445;
            goto LABEL_407;
          case 3:
          case 5:
LABEL_204:
            if (!(_DWORD)v14)
              BYTE4(v136) = 1;
LABEL_206:
            v34 = 1;
            v65 = 12;
            goto LABEL_554;
          case 4:
            goto LABEL_503;
          case 6:
            if (v14 < 2)
            {
              v65 = 12;
              goto LABEL_551;
            }
            *v135 = 29;
            v65 = 12;
            break;
          default:
            goto LABEL_505;
        }
        goto LABEL_553;
      case 'k':
        *(_DWORD *)(a1 + 28) = v18 + 2;
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          goto LABEL_404;
        HIBYTE(v136) = 0;
        switch(v32)
        {
          case 0:
          case 7:
            goto LABEL_211;
          case 1:
            if (v14 < 2)
              goto LABEL_209;
            v122 = v135;
            v123 = 29;
            goto LABEL_529;
          case 2:
            if (v137 < 0x6C)
            {
              if (!(_DWORD)v14)
                BYTE4(v136) = 1;
              v67 = 5;
LABEL_213:
              LODWORD(v136) = v67;
            }
            else
            {
              v122 = v135;
              v123 = 14;
LABEL_529:
              *v122 = v123;
            }
LABEL_530:
            v34 = 1;
            *(_BYTE *)(a1 + 49) = 1;
            break;
          case 3:
          case 5:
LABEL_209:
            if (!(_DWORD)v14)
              BYTE4(v136) = 1;
LABEL_211:
            v137 = 107;
            goto LABEL_212;
          case 4:
            v122 = v135;
            v123 = 15;
            goto LABEL_529;
          case 6:
            if (v14 >= 2)
            {
              *v135 = 29;
            }
            else if (!(_DWORD)v14)
            {
              BYTE4(v136) = 1;
            }
            v137 = 107;
LABEL_212:
            v67 = 1;
            goto LABEL_213;
          default:
            goto LABEL_530;
        }
        goto LABEL_556;
      case 'n':
        *(_DWORD *)(a1 + 28) = v18 + 2;
        HIBYTE(v136) = 0;
        switch(v32)
        {
          case 0:
          case 7:
            goto LABEL_463;
          case 1:
            if (v14 >= 2)
              goto LABEL_423;
            goto LABEL_215;
          case 2:
            if (v137 < 0xB)
              goto LABEL_445;
            goto LABEL_407;
          case 3:
          case 5:
            goto LABEL_215;
          case 4:
            goto LABEL_503;
          case 6:
            if (v14 < 2)
            {
LABEL_215:
              if (!(_DWORD)v14)
                BYTE4(v136) = 1;
            }
            else
            {
              *v135 = 29;
            }
LABEL_463:
            v34 = 1;
            v137 = 10;
            break;
          default:
            goto LABEL_505;
        }
        goto LABEL_555;
      case 'q':
        *(_DWORD *)(a1 + 28) = v18 + 2;
        if ((_DWORD)v18 + 2 == v19 || *(_WORD *)(v20 + 2 * (v18 + 2)) != 123)
        {
          *(_BYTE *)(a1 + 8) = 25;
          if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1
          {
LABEL_404:
            v41 = 22;
LABEL_405:
            *v12 = v41;
LABEL_505:
            v34 = 1;
            goto LABEL_556;
          }
          HIBYTE(v136) = 0;
          switch(v32)
          {
            case 0:
            case 7:
              goto LABEL_433;
            case 1:
LABEL_402:
              if (v14 >= 2)
                goto LABEL_423;
              goto LABEL_431;
            case 2:
LABEL_406:
              if (v137 > v40)
                goto LABEL_407;
              goto LABEL_445;
            case 3:
            case 5:
              goto LABEL_431;
            case 4:
              goto LABEL_503;
            case 6:
LABEL_430:
              if (v14 >= 2)
              {
                *v135 = 29;
              }
              else
              {
LABEL_431:
                if (!(_DWORD)v14)
                  BYTE4(v136) = 1;
              }
LABEL_433:
              v34 = 1;
              v137 = v40;
              break;
            default:
              goto LABEL_505;
          }
LABEL_555:
          LODWORD(v136) = 1;
          goto LABEL_556;
        }
        *(_DWORD *)(a1 + 28) = v18 + 3;
        v140 = *(_QWORD *)a1;
        v141 = 0;
        v142 = v12;
        v143 = 0u;
        v144 = 0u;
        break;
      case 'r':
        *(_DWORD *)(a1 + 28) = v18 + 2;
        HIBYTE(v136) = 0;
        switch(v32)
        {
          case 0:
          case 7:
            goto LABEL_360;
          case 1:
            if (v14 >= 2)
              goto LABEL_423;
            goto LABEL_358;
          case 2:
            if (v137 < 0xE)
              goto LABEL_445;
            goto LABEL_407;
          case 3:
          case 5:
LABEL_358:
            if (!(_DWORD)v14)
              BYTE4(v136) = 1;
LABEL_360:
            v34 = 1;
            v65 = 13;
            goto LABEL_554;
          case 4:
            goto LABEL_503;
          case 6:
            if (v14 < 2)
            {
              v65 = 13;
              goto LABEL_551;
            }
            *v135 = 29;
            v65 = 13;
            break;
          default:
            goto LABEL_505;
        }
        goto LABEL_553;
      case 's':
        *(_DWORD *)(a1 + 28) = v18 + 2;
        switch(v32)
        {
          case 0:
          case 3:
          case 7:
            goto LABEL_376;
          case 1:
            goto LABEL_408;
          case 2:
          case 4:
            goto LABEL_503;
          case 5:
            goto LABEL_409;
          case 6:
            goto LABEL_412;
          default:
            goto LABEL_505;
        }
        goto LABEL_505;
      case 't':
        *(_DWORD *)(a1 + 28) = v18 + 2;
        HIBYTE(v136) = 0;
        switch(v32)
        {
          case 0:
          case 7:
            goto LABEL_365;
          case 1:
            if (v14 >= 2)
              goto LABEL_423;
            goto LABEL_363;
          case 2:
            if (v137 < 0xA)
              goto LABEL_445;
            goto LABEL_407;
          case 3:
          case 5:
LABEL_363:
            if (!(_DWORD)v14)
              BYTE4(v136) = 1;
LABEL_365:
            v34 = 1;
            v65 = 9;
            goto LABEL_554;
          case 4:
            goto LABEL_503;
          case 6:
            if (v14 < 2)
            {
              v65 = 9;
              goto LABEL_551;
            }
            *v135 = 29;
            v65 = 9;
            break;
          default:
            goto LABEL_505;
        }
        goto LABEL_553;
      case 'u':
        v109 = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::UnicodeParseContext)0>(a1);
        if (!*(_BYTE *)(a1 + 8))
        {
          if (v109 == -1)
            v65 = 117;
          else
            v65 = v109;
          HIBYTE(v136) = 0;
          switch(v32)
          {
            case 0:
            case 7:
              goto LABEL_553;
            case 1:
              goto LABEL_500;
            case 2:
              goto LABEL_506;
            case 3:
              goto LABEL_508;
            case 4:
              goto LABEL_503;
            case 5:
              goto LABEL_551;
            case 6:
              goto LABEL_511;
            default:
              goto LABEL_505;
          }
        }
        goto LABEL_505;
      case 'v':
        *(_DWORD *)(a1 + 28) = v18 + 2;
        HIBYTE(v136) = 0;
        switch(v32)
        {
          case 0:
          case 7:
            goto LABEL_374;
          case 1:
            if (v14 >= 2)
              goto LABEL_423;
            goto LABEL_372;
          case 2:
            if (v137 < 0xC)
              goto LABEL_445;
            goto LABEL_407;
          case 3:
          case 5:
LABEL_372:
            if (!(_DWORD)v14)
              BYTE4(v136) = 1;
LABEL_374:
            v34 = 1;
            v65 = 11;
            goto LABEL_554;
          case 4:
            goto LABEL_503;
          case 6:
            if (v14 < 2)
            {
              v65 = 11;
              goto LABEL_551;
            }
            *v135 = 29;
            v65 = 11;
            break;
          default:
            goto LABEL_505;
        }
        goto LABEL_553;
      case 'w':
        *(_DWORD *)(a1 + 28) = v18 + 2;
        switch(v32)
        {
          case 0:
          case 3:
          case 7:
LABEL_376:
            if ((_DWORD)v14 != 2)
              goto LABEL_415;
            goto LABEL_414;
          case 1:
LABEL_408:
            if (v14 >= 2)
              goto LABEL_423;
            goto LABEL_409;
          case 2:
          case 4:
            goto LABEL_503;
          case 5:
LABEL_409:
            if ((_DWORD)v14 == 2)
              goto LABEL_414;
            if (!(_DWORD)v14)
              BYTE4(v136) = 1;
            goto LABEL_415;
          case 6:
LABEL_412:
            if (v14 < 2)
              goto LABEL_415;
            *v135 = 29;
            if ((_DWORD)v14 != 2)
              goto LABEL_415;
LABEL_414:
            BYTE5(v136) = 0;
            goto LABEL_415;
          default:
            goto LABEL_505;
        }
      case 'x':
        v110 = v18 + 2;
        *(_DWORD *)(a1 + 28) = v18 + 2;
        if ((_DWORD)v18 + 2 != v19)
        {
          v111 = *(unsigned __int16 *)(v20 + 2 * v110);
          if (v111 - 48 < 0xA || (v111 | 0x20) - 97 <= 5)
          {
            v113 = v18 + 3;
            *(_DWORD *)(a1 + 28) = v18 + 3;
            v114 = v111 >= 0x41 ? (v111 + 9) & 0xF : v111 - 48;
            if (v113 != v19)
            {
              v115 = *(unsigned __int16 *)(v20 + 2 * v113);
              if (v115 - 48 < 0xA || (v115 | 0x20) - 97 < 6)
              {
                *(_DWORD *)(a1 + 28) = v18 + 4;
                v121 = v115 - 48;
                if (v115 >= 0x41)
                  v121 = (v115 + 9) & 0xF;
                HIBYTE(v136) = 0;
                v65 = v121 | (16 * v114);
                switch(v32)
                {
                  case 0:
                  case 7:
                    goto LABEL_553;
                  case 1:
LABEL_500:
                    if (v14 >= 2)
                      goto LABEL_423;
                    if (v65 == 45)
                    {
LABEL_177:
                      v63 = 2;
                      goto LABEL_416;
                    }
LABEL_551:
                    if (!(_DWORD)v14)
                      goto LABEL_552;
                    goto LABEL_553;
                  case 2:
LABEL_506:
                    if (v137 <= v65)
                    {
LABEL_445:
                      if (!(_DWORD)v14)
                        BYTE4(v136) = 1;
                      v63 = 5;
                      goto LABEL_416;
                    }
LABEL_407:
                    v116 = v135;
                    v117 = 14;
LABEL_504:
                    *v116 = v117;
                    break;
                  case 3:
LABEL_508:
                    if (v14 > 1 || v65 != 45)
                      goto LABEL_551;
LABEL_419:
                    v63 = 4;
                    goto LABEL_416;
                  case 4:
LABEL_503:
                    v116 = v135;
                    v117 = 15;
                    goto LABEL_504;
                  case 5:
                    goto LABEL_551;
                  case 6:
LABEL_511:
                    if (v14 >= 2)
                      *v135 = 29;
                    if (v65 != 45)
                      goto LABEL_551;
LABEL_423:
                    v116 = v135;
                    v117 = 29;
                    goto LABEL_504;
                  default:
                    goto LABEL_505;
                }
                goto LABEL_505;
              }
            }
          }
        }
        *(_DWORD *)(a1 + 28) = v110;
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          goto LABEL_404;
        HIBYTE(v136) = 0;
        switch(v32)
        {
          case 0:
          case 7:
            goto LABEL_393;
          case 1:
            if (v14 >= 2)
              goto LABEL_423;
            goto LABEL_391;
          case 2:
            if (v137 < 0x79)
              goto LABEL_445;
            goto LABEL_407;
          case 3:
          case 5:
LABEL_391:
            if (!(_DWORD)v14)
              BYTE4(v136) = 1;
LABEL_393:
            v34 = 1;
            v65 = 120;
            goto LABEL_554;
          case 4:
            goto LABEL_503;
          case 6:
            if (v14 < 2)
            {
              v65 = 120;
              goto LABEL_551;
            }
            *v135 = 29;
            v65 = 120;
            break;
          default:
            goto LABEL_505;
        }
        goto LABEL_553;
      default:
        v61 = v40 > 0x7F || *(unsigned __int8 *)(a1 + 32) - 1 > 1;
        {
LABEL_174:
          *(_DWORD *)(a1 + 28) = v18 + 2;
          HIBYTE(v136) = 0;
          switch(v32)
          {
            case 0:
            case 7:
              goto LABEL_433;
            case 1:
              goto LABEL_175;
            case 2:
              goto LABEL_406;
            case 3:
              goto LABEL_417;
            case 4:
              goto LABEL_503;
            case 5:
              goto LABEL_431;
            case 6:
              goto LABEL_420;
            default:
              goto LABEL_505;
          }
        }
        goto LABEL_404;
    }
    while (1)
    {
      v69 = *(_DWORD *)(a1 + 24);
      v68 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v68 == v69)
      {
        v126 = 0;
        v128 = 16;
        goto LABEL_603;
      }
      v70 = *(_QWORD *)(a1 + 16);
      v71 = *(unsigned __int16 *)(v70 + 2 * v68);
      if (v71 <= 0x7B)
        break;
      if (v71 != 124)
      {
        if (v71 == 125)
        {
          *(_DWORD *)(a1 + 28) = v68 + 1;
          JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassStringDisjunctionParserDelegate::newAlternative((uint64_t)&v140, a2, a3, a4, a5, a6, a7, a8);
          v126 = v141;
          goto LABEL_604;
        }
        goto LABEL_238;
      }
      *(_DWORD *)(a1 + 28) = v68 + 1;
      JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,unsigned char>::ClassStringDisjunctionParserDelegate::newAlternative((uint64_t)&v140, a2, a3, a4, a5, a6, a7, a8);
LABEL_319:
      if (*v12)
      {
LABEL_494:
        v126 = 0;
        goto LABEL_604;
      }
    }
    if (v71 != 92)
    {
      if (v71 == 45)
      {
        v126 = 0;
        *(_DWORD *)(a1 + 28) = v68 + 1;
        *(_BYTE *)(a1 + 8) = 31;
        goto LABEL_604;
      }
LABEL_238:
      v75 = *(unsigned __int8 *)(a1 + 32) - 3;
      v76 = v68 + 1;
      *(_DWORD *)(a1 + 28) = v68 + 1;
      if ((v71 & 0xFC00) == 0xD800 && v75 >= 0xFFFFFFFE)
      {
        if (v76 != v69)
        {
          *(_DWORD *)(a1 + 28) = v68 + 2;
          v108 = *(unsigned __int16 *)(v70 + 2 * v76);
          if ((v108 & 0xFC00) == 0xDC00)
            v71 = v108 + (v71 << 10) - 56613888;
          else
            *(_DWORD *)(a1 + 28) = v76;
        }
      }
      else
      {
        if (!v71)
          goto LABEL_573;
        if (v71 <= 0x7F)
        {
          if (memchr("()[]{}/|)", v71, 0xAuLL))
          {
LABEL_573:
            v126 = 0;
            v128 = 31;
            goto LABEL_603;
          }
          if (v76 != v69
            && v71 == *(unsigned __int16 *)(v70 + 2 * v76)
          {
            v126 = 0;
            v128 = 29;
            goto LABEL_603;
          }
        }
      }
LABEL_261:
      v145 = v71;
      if (HIDWORD(v143) == DWORD2(v143))
      {
LABEL_316:
        WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v143, (unint64_t)&v145);
        v81 = HIDWORD(v143);
      }
      else
      {
        v81 = HIDWORD(v143) + 1;
        *(_DWORD *)(v143 + 4 * HIDWORD(v143)) = v71;
LABEL_313:
        HIDWORD(v143) = v81;
      }
      if (v81 < 2)
        goto LABEL_319;
LABEL_318:
      v141 = 1;
      goto LABEL_319;
    }
    v72 = v68 + 1;
    *(_DWORD *)(a1 + 28) = v68 + 1;
    if ((_DWORD)v68 + 1 == v69)
    {
      v126 = 0;
      v128 = 17;
      goto LABEL_603;
    }
    v71 = *(unsigned __int16 *)(v70 + 2 * v72);
    switch(*(_WORD *)(v70 + 2 * v72))
    {
      case '-':
        goto LABEL_260;
      case '0':
        *(_DWORD *)(a1 + 28) = v68 + 2;
        if ((_DWORD)v68 + 2 != v69)
        {
          v82 = *(unsigned __int16 *)(v70 + 2 * (v68 + 2));
          v83 = v82 - 48;
          if ((v82 - 48) < 0xA)
          {
            if (*(unsigned __int8 *)(a1 + 32) - 1 < 2)
            {
LABEL_601:
              v126 = 0;
              v128 = 23;
              goto LABEL_603;
            }
            if ((v82 & 0xFFF8) == 0x30)
            {
              *(_DWORD *)(a1 + 28) = v68 + 3;
              if ((_DWORD)v68 + 3 != v69)
              {
                v84 = *(unsigned __int16 *)(v70 + 2 * (v68 + 3));
                if ((v84 & 0xFFF8) == 0x30)
                {
                  *(_DWORD *)(a1 + 28) = v68 + 4;
                  v83 = v84 + 8 * v83 - 48;
                }
              }
            }
            else
            {
              v83 = 0;
            }
            goto LABEL_336;
          }
        }
        v145 = 0;
        if (HIDWORD(v143) == DWORD2(v143))
          goto LABEL_316;
        v81 = HIDWORD(v143) + 1;
        *(_DWORD *)(v143 + 4 * HIDWORD(v143)) = 0;
        goto LABEL_313;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          goto LABEL_601;
        if (v71 > 0x37)
        {
LABEL_260:
          *(_DWORD *)(a1 + 28) = v68 + 2;
        }
        else
        {
          v73 = 0;
          v71 = 0;
          do
          {
            if (!((_DWORD)v68 - v69 + 1 + v73))
              break;
            v74 = *(unsigned __int16 *)(v70 + 2 * (v68 + v73 + 1));
            if ((v74 & 0xFFF8) != 0x30)
              break;
            *(_DWORD *)(a1 + 28) = v68 + v73 + 2;
            v71 = v74 + 8 * v71 - 48;
            if (v73 == 2)
              break;
            ++v73;
          }
          while (v71 < 0x20);
        }
        goto LABEL_261;
      case 'B':
        *(_DWORD *)(a1 + 28) = v68 + 2;
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          goto LABEL_602;
        v85 = 66;
        goto LABEL_311;
      case 'D':
        *(_DWORD *)(a1 + 28) = v68 + 2;
        v85 = 68;
        goto LABEL_311;
      case 'P':
      case 'p':
      case 'q':
        *(_DWORD *)(a1 + 28) = v68 + 2;
        if (*(unsigned __int8 *)(a1 + 32) - 1 > 1
        {
          goto LABEL_261;
        }
        goto LABEL_602;
      case 'S':
        *(_DWORD *)(a1 + 28) = v68 + 2;
        v85 = 83;
        goto LABEL_311;
      case 'W':
        *(_DWORD *)(a1 + 28) = v68 + 2;
        v85 = 87;
        goto LABEL_311;
      case 'b':
        *(_DWORD *)(a1 + 28) = v68 + 2;
        v145 = 8;
        if (HIDWORD(v143) == DWORD2(v143))
          goto LABEL_316;
        v81 = HIDWORD(v143) + 1;
        *(_DWORD *)(v143 + 4 * HIDWORD(v143)) = 8;
        goto LABEL_313;
      case 'c':
        *(_DWORD *)(a1 + 28) = v68 + 2;
        if ((_DWORD)v68 + 2 == v69)
        {
          if (*(unsigned __int8 *)(a1 + 32) - 1 < 2)
            goto LABEL_602;
          v87 = DWORD2(v143);
          v86 = HIDWORD(v143);
          goto LABEL_280;
        }
        *(_DWORD *)(a1 + 28) = v68 + 3;
        v98 = *(unsigned __int16 *)(v70 + 2 * (v68 + 2));
        if ((v98 | 0x20u) - 97 <= 0x19)
        {
          v83 = v98 & 0x1F;
LABEL_336:
          v145 = v83;
          v101 = HIDWORD(v143);
          if (HIDWORD(v143) == DWORD2(v143))
          {
            WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v143, (unint64_t)&v145);
            v102 = HIDWORD(v143);
          }
          else
          {
            v102 = HIDWORD(v143) + 1;
            *(_DWORD *)(v143 + 4 * HIDWORD(v143)) = v83;
            HIDWORD(v143) = v101 + 1;
          }
          if (v102 < 2)
            goto LABEL_319;
          goto LABEL_318;
        }
        if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
        {
          v87 = DWORD2(v143);
          v86 = HIDWORD(v143);
          if (v98 == 95 || (v98 - 48) <= 9)
          {
            v99 = v98 & 0x1F;
            v145 = v99;
            if (HIDWORD(v143) == DWORD2(v143))
            {
              WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v143, (unint64_t)&v145);
              v100 = HIDWORD(v143);
            }
            else
            {
              v100 = HIDWORD(v143) + 1;
              *(_DWORD *)(v143 + 4 * HIDWORD(v143)) = v99;
              HIDWORD(v143) = v86 + 1;
            }
            if (v100 >= 2)
LABEL_350:
              v141 = 1;
            goto LABEL_319;
          }
LABEL_280:
          *(_DWORD *)(a1 + 28) = v72;
          v145 = 92;
          if (v86 == v87)
          {
            WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v143, (unint64_t)&v145);
            v88 = HIDWORD(v143);
          }
          else
          {
            v88 = v86 + 1;
            *(_DWORD *)(v143 + 4 * v86) = 92;
            HIDWORD(v143) = v86 + 1;
          }
          if (v88 < 2)
            goto LABEL_319;
          goto LABEL_318;
        }
        v126 = 0;
        v128 = 24;
LABEL_603:
        *v12 = v128;
LABEL_604:
        v129 = v144;
        if (HIDWORD(v144))
        {
          v131 = 16 * HIDWORD(v144);
          do
          {
            v132 = *(_QWORD *)v129;
            if (*(_QWORD *)v129)
            {
              *(_QWORD *)v129 = 0;
              *(_DWORD *)(v129 + 8) = 0;
              WTF::fastFree(v132, a2, a3, a4, a5, a6, a7, a8);
            }
            v129 += 16;
            v131 -= 16;
          }
          while (v131);
          v129 = v144;
          if ((_QWORD)v144)
            goto LABEL_617;
        }
        else
        {
          if (!(_QWORD)v144)
            goto LABEL_606;
LABEL_617:
          *(_QWORD *)&v144 = 0;
          DWORD2(v144) = 0;
          WTF::fastFree(v129, a2, a3, a4, a5, a6, a7, a8);
        }
LABEL_606:
        v130 = v143;
        if ((_QWORD)v143)
        {
          *(_QWORD *)&v143 = 0;
          DWORD2(v143) = 0;
          WTF::fastFree(v130, a2, a3, a4, a5, a6, a7, a8);
        }
        if (v126)
          v34 = 4;
        else
          v34 = 3;
LABEL_556:
        v14 = BYTE4(v136);
LABEL_557:
        if (v14 < 2)
        {
          v124 = BYTE5(v136) | (v34 == 4);
          goto LABEL_566;
        }
        if ((_DWORD)v14 == 2)
        {
          v124 = v34 == 4 && BYTE5(v136) != 0;
LABEL_566:
          BYTE5(v136) = v124;
        }
        if ((v34 - 3) <= 1u)
        {
          v39 = 6;
LABEL_569:
          LODWORD(v136) = v39;
        }
LABEL_570:
        v15 = v14;
        v16 = v14;
        v17 = v14;
LABEL_571:
        if (!*v12)
          continue;
LABEL_621:
        v134 = v138;
        if (v138)
        {
          v138 = 0;
          LODWORD(v139) = 0;
          WTF::fastFree((unint64_t)v134, a2, a3, a4, a5, a6, a7, a8);
        }
        return;
      case 'd':
        *(_DWORD *)(a1 + 28) = v68 + 2;
        v85 = 100;
        goto LABEL_311;
      case 'f':
        *(_DWORD *)(a1 + 28) = v68 + 2;
        v85 = 12;
        goto LABEL_311;
      case 'k':
        *(_DWORD *)(a1 + 28) = v68 + 2;
        if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          goto LABEL_602;
        v145 = 107;
        v89 = HIDWORD(v143);
        if (HIDWORD(v143) == DWORD2(v143))
        {
          WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v143, (unint64_t)&v145);
          v90 = HIDWORD(v143);
        }
        else
        {
          v90 = HIDWORD(v143) + 1;
          *(_DWORD *)(v143 + 4 * HIDWORD(v143)) = 107;
          HIDWORD(v143) = v89 + 1;
        }
        if (v90 >= 2)
          v141 = 1;
        *(_BYTE *)(a1 + 49) = 1;
        goto LABEL_319;
      case 'n':
        *(_DWORD *)(a1 + 28) = v68 + 2;
        v145 = 10;
        if (HIDWORD(v143) == DWORD2(v143))
          goto LABEL_316;
        v81 = HIDWORD(v143) + 1;
        *(_DWORD *)(v143 + 4 * HIDWORD(v143)) = 10;
        goto LABEL_313;
      case 'r':
        *(_DWORD *)(a1 + 28) = v68 + 2;
        v85 = 13;
        goto LABEL_311;
      case 's':
        *(_DWORD *)(a1 + 28) = v68 + 2;
        v85 = 115;
        goto LABEL_311;
      case 't':
        *(_DWORD *)(a1 + 28) = v68 + 2;
        v85 = 9;
        goto LABEL_311;
      case 'u':
        v91 = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::UnicodeParseContext)0>(a1);
        if (*(_BYTE *)(a1 + 8))
          goto LABEL_494;
        if (v91 == -1)
          v83 = 117;
        else
          v83 = v91;
        goto LABEL_336;
      case 'v':
        *(_DWORD *)(a1 + 28) = v68 + 2;
        v85 = 11;
        goto LABEL_311;
      case 'w':
        *(_DWORD *)(a1 + 28) = v68 + 2;
        v85 = 119;
        goto LABEL_311;
      case 'x':
        v92 = v68 + 2;
        *(_DWORD *)(a1 + 28) = v68 + 2;
        if ((_DWORD)v68 + 2 == v69
          || ((v93 = *(unsigned __int16 *)(v70 + 2 * v92), v93 - 48 >= 0xA)
            ? (v94 = (v93 | 0x20) - 97 > 5)
            : (v94 = 0),
              v94
           || ((v95 = v68 + 3, *(_DWORD *)(a1 + 28) = v68 + 3, v93 >= 0x41) ? (v96 = (v93 + 9) & 0xF) : (v96 = v93 - 48),
               v95 == v69 || (v97 = *(unsigned __int16 *)(v70 + 2 * v95), v97 - 48 >= 0xA) && (v97 | 0x20) - 97 >= 6)))
        {
          *(_DWORD *)(a1 + 28) = v92;
          if (*(unsigned __int8 *)(a1 + 32) - 1 <= 1)
          {
LABEL_602:
            v126 = 0;
            v128 = 22;
            goto LABEL_603;
          }
          v85 = 120;
LABEL_311:
          v145 = v85;
          if (HIDWORD(v143) != DWORD2(v143))
          {
            v81 = HIDWORD(v143) + 1;
            *(_DWORD *)(v143 + 4 * HIDWORD(v143)) = v85;
            goto LABEL_313;
          }
          goto LABEL_316;
        }
        v103 = 16 * v96;
        *(_DWORD *)(a1 + 28) = v68 + 4;
        v104 = v97 - 48;
        if (v97 >= 0x41)
          v104 = (v97 + 9) & 0xF;
        v105 = v104 | v103;
        v145 = v105;
        v106 = HIDWORD(v143);
        if (HIDWORD(v143) == DWORD2(v143))
        {
          WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)&v143, (unint64_t)&v145);
          v107 = HIDWORD(v143);
        }
        else
        {
          v107 = HIDWORD(v143) + 1;
          *(_DWORD *)(v143 + 4 * HIDWORD(v143)) = v105;
          HIDWORD(v143) = v106 + 1;
        }
        if (v107 >= 2)
          goto LABEL_350;
        goto LABEL_319;
      default:
        if (v71 > 0x7F || *(unsigned __int8 *)(a1 + 32) - 1 > 1)
          goto LABEL_260;
        if (v71 && v79 != 0)
          goto LABEL_260;
        goto LABEL_602;
    }
  }
}

unint64_t JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::parseCharacterClass(unint64_t result, uint64_t a2, uint64_t a3, __int16 *a4, __int16 *a5, __int16 *a6, __int16 *a7, __int16 *a8)
{
  __int16 *v8;
  uint64_t v9;
  __int16 *v10;
  __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  __int16 *v32;
  uint64_t v33;
  char *v34;
  char *v36;
  uint64_t v37;
  __int16 *v38;
  __int16 *v39;
  int v41;
  int v42;
  __int16 *v43;
  char *v44;
  uint64_t v45;
  __int16 *v46;
  char *v47;
  __int16 *v48;
  __int16 *v49;
  uint64_t v50;
  __int16 *v51;
  __int16 *v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  BOOL v56;
  unsigned int v57;
  unsigned __int8 v58;
  unsigned int v59;
  int v61;
  int v63;
  unsigned __int8 v64;
  int v65;
  char v66;
  int v67;

  v12 = result;
  v13 = *(_QWORD *)(result + 16);
  v15 = *(_DWORD *)(result + 24);
  v14 = *(_DWORD *)(result + 28);
  *(_DWORD *)(result + 28) = v14 + 1;
  if (v14 + 1 != v15 && *(_WORD *)(v13 + 2 * (v14 + 1)) == 94)
    *(_DWORD *)(result + 28) = v14 + 2;
  v16 = 0;
  v17 = 0;
  v67 = *(unsigned __int8 *)(result + 32);
  v18 = "^$\\.*+?()[]{}|/";
  while (1)
  {
    v19 = *(_DWORD *)(v12 + 24);
    v20 = *(unsigned int *)(v12 + 28);
    if ((_DWORD)v20 == v19)
    {
      v66 = 13;
      goto LABEL_187;
    }
    v21 = *(_QWORD *)(v12 + 16);
    v22 = *(unsigned __int16 *)(v21 + 2 * v20);
    if ((_DWORD)v22 == 92)
      break;
    if ((_DWORD)v22 == 93)
    {
      *(_DWORD *)(v12 + 28) = v20 + 1;
      return result;
    }
    v23 = *(unsigned __int8 *)(v12 + 32) - 3;
    v24 = v20 + 1;
    *(_DWORD *)(v12 + 28) = v20 + 1;
    if ((v22 & 0xFC00) == 0xD800 && v23 >= 0xFFFFFFFE && v24 != v19)
    {
      *(_DWORD *)(v12 + 28) = v20 + 2;
      v65 = *(unsigned __int16 *)(v21 + 2 * v24);
      if ((v65 & 0xFC00) == 0xDC00)
        v22 = (v65 + ((_DWORD)v22 << 10) - 56613888);
      else
        *(_DWORD *)(v12 + 28) = v24;
    }
    switch(v16)
    {
      case 0:
        goto LABEL_39;
      case 1:
        if ((_DWORD)v22 == 45)
          v16 = 2;
        else
          v16 = 1;
        if ((_DWORD)v22 == 45)
          v22 = v17;
        else
          v22 = v22;
        goto LABEL_173;
      case 2:
        goto LABEL_162;
      case 3:
        if ((_DWORD)v22 != 45)
          goto LABEL_39;
        v16 = 4;
        break;
      case 4:
        goto LABEL_170;
      default:
        break;
    }
LABEL_172:
    v22 = v17;
LABEL_173:
    v63 = *(unsigned __int8 *)(v12 + 8);
    v17 = v22;
LABEL_174:
    if (v63)
      return result;
  }
  v27 = v20 + 1;
  *(_DWORD *)(v12 + 28) = v20 + 1;
  if ((_DWORD)v20 + 1 == v19)
  {
    v66 = 17;
    goto LABEL_187;
  }
  v22 = *(unsigned __int16 *)(v21 + 2 * v27);
  switch(*(_WORD *)(v21 + 2 * v27))
  {
    case '-':
      if (*(unsigned __int8 *)(v12 + 32) - 1 <= 1)
      {
        *(_DWORD *)(v12 + 28) = v20 + 2;
        switch(v16)
        {
          case 0:
          case 1:
          case 3:
            v22 = 45;
            goto LABEL_39;
          case 2:
            goto LABEL_162;
          case 4:
            goto LABEL_170;
          default:
            goto LABEL_172;
        }
      }
      goto LABEL_56;
    case '0':
      *(_DWORD *)(v12 + 28) = v20 + 2;
      if ((_DWORD)v20 + 2 == v19
        || (v41 = *(unsigned __int16 *)(v21 + 2 * (v20 + 2)),
            v22 = (v41 - 48),
            v22 >= 0xA))
      {
        switch(v16)
        {
          case 0:
          case 1:
          case 3:
            v22 = 0;
            goto LABEL_39;
          case 2:
            if ((_DWORD)v17)
              goto LABEL_183;
            v16 = 0;
            v22 = 0;
            break;
          case 4:
            goto LABEL_170;
          default:
            goto LABEL_172;
        }
        goto LABEL_173;
      }
      if (*(unsigned __int8 *)(v12 + 32) - 1 >= 2)
      {
        if ((v41 & 0xFFF8) == 0x30)
        {
          *(_DWORD *)(v12 + 28) = v20 + 3;
          if ((_DWORD)v20 + 3 != v19)
          {
            v42 = *(unsigned __int16 *)(v21 + 2 * (v20 + 3));
            if ((v42 & 0xFFF8) == 0x30)
            {
              *(_DWORD *)(v12 + 28) = v20 + 4;
              v22 = (v42 + 8 * v22 - 48);
            }
          }
        }
        else
        {
          v22 = 0;
        }
        switch(v16)
        {
          case 0:
          case 1:
          case 3:
            goto LABEL_39;
          case 2:
            goto LABEL_162;
          case 4:
            goto LABEL_170;
          default:
            goto LABEL_172;
        }
      }
LABEL_184:
      v66 = 23;
LABEL_187:
      *(_BYTE *)(v12 + 8) = v66;
      return result;
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      if (*(unsigned __int8 *)(v12 + 32) - 1 > 1)
      {
        if (v22 > 0x37)
        {
          *(_DWORD *)(v12 + 28) = v20 + 2;
        }
        else
        {
          v28 = 0;
          v22 = 0;
          v29 = v20 - v19 + 1;
          do
          {
            if (!(v29 + v28))
              break;
            v30 = *(unsigned __int16 *)(v21 + 2 * (v20 + v28 + 1));
            if ((v30 & 0xFFF8) != 0x30)
              break;
            *(_DWORD *)(v12 + 28) = v20 + v28 + 2;
            v22 = (v30 + 8 * v22 - 48);
            if (v28 == 2)
              break;
            ++v28;
          }
          while (v22 < 0x20);
        }
        switch(v16)
        {
          case 0:
          case 1:
          case 3:
            goto LABEL_39;
          case 2:
            goto LABEL_162;
          case 4:
            goto LABEL_170;
          default:
            goto LABEL_172;
        }
      }
      goto LABEL_184;
    case 'B':
      *(_DWORD *)(v12 + 28) = v20 + 2;
      if (*(unsigned __int8 *)(v12 + 32) - 1 > 1)
      {
        switch(v16)
        {
          case 0:
          case 1:
          case 3:
            v22 = 66;
            goto LABEL_39;
          case 2:
            if (v17 >= 0x43)
              goto LABEL_183;
            goto LABEL_171;
          case 4:
            goto LABEL_170;
          default:
            goto LABEL_172;
        }
      }
      goto LABEL_185;
    case 'D':
    case 'S':
    case 'W':
    case 'd':
    case 's':
    case 'w':
      *(_DWORD *)(v12 + 28) = v20 + 2;
      if (((1 << v16) & 0xB) != 0)
      {
        v16 = 3;
      }
      else
      {
LABEL_170:
        if (v67 == 1)
        {
LABEL_182:
          v66 = 15;
          goto LABEL_187;
        }
LABEL_171:
        v16 = 0;
      }
      goto LABEL_172;
    case 'P':
    case 'p':
      v31 = v20 + 2;
      *(_DWORD *)(v12 + 28) = v20 + 2;
      if (!*(_BYTE *)(v12 + 32))
      {
        switch(v16)
        {
          case 0:
          case 1:
          case 3:
            goto LABEL_39;
          case 2:
            goto LABEL_162;
          case 4:
            goto LABEL_170;
          default:
            goto LABEL_172;
        }
      }
      if (v31 == v19 || *(_WORD *)(v21 + 2 * v31) != 123)
      {
        v66 = 25;
        goto LABEL_187;
      }
      v32 = v10;
      v33 = v9;
      v34 = v18;
      *(_DWORD *)(v12 + 28) = v20 + 3;
      result = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::tryConsumeUnicodePropertyExpression(v12, 1, 11, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
      if (HIDWORD(result))
      {
        if ((_DWORD)v22 == 80 && (result - 329) <= 6)
        {
          v66 = 30;
          goto LABEL_187;
        }
        v18 = v34;
        v9 = v33;
        v10 = v32;
        v8 = &jpt_198F0F6D4;
        a4 = &jpt_198F0F4D0;
        a5 = &jpt_198F0F8D4;
        v11 = &jpt_198F0F5DC;
        if (((1 << v16) & 0xB) != 0)
        {
          v16 = 3;
        }
        else
        {
          if (v67 == 1)
            goto LABEL_182;
          v16 = 0;
        }
        v22 = v17;
        a6 = &jpt_198F0F4FC;
        a7 = &jpt_198F0F544;
        a8 = &jpt_198F0F9EC;
      }
      else
      {
        v22 = v17;
        v18 = v34;
        v9 = v33;
        v10 = v32;
        a4 = &jpt_198F0F4D0;
        a5 = &jpt_198F0F8D4;
        a6 = &jpt_198F0F4FC;
        a7 = &jpt_198F0F544;
        a8 = &jpt_198F0F9EC;
        v11 = &jpt_198F0F5DC;
        v8 = &jpt_198F0F6D4;
      }
      goto LABEL_173;
    case 'b':
      *(_DWORD *)(v12 + 28) = v20 + 2;
      switch(v16)
      {
        case 0:
        case 1:
        case 3:
          v22 = 8;
          goto LABEL_39;
        case 2:
          if (v17 >= 9)
            goto LABEL_183;
          goto LABEL_171;
        case 4:
          goto LABEL_170;
        default:
          goto LABEL_172;
      }
    case 'c':
      *(_DWORD *)(v12 + 28) = v20 + 2;
      if ((_DWORD)v20 + 2 == v19)
      {
        if (*(unsigned __int8 *)(v12 + 32) - 1 <= 1)
        {
LABEL_185:
          v66 = 22;
          goto LABEL_187;
        }
      }
      else
      {
        *(_DWORD *)(v12 + 28) = v20 + 3;
        v61 = *(unsigned __int16 *)(v21 + 2 * (v20 + 2));
        if ((v61 | 0x20u) - 97 <= 0x19)
        {
          v22 = v61 & 0x1F;
          switch(v16)
          {
            case 0:
            case 1:
            case 3:
              goto LABEL_39;
            case 2:
              goto LABEL_162;
            case 4:
              goto LABEL_170;
            default:
              goto LABEL_172;
          }
        }
        if (*(unsigned __int8 *)(v12 + 32) - 1 <= 1)
        {
          v66 = 24;
          goto LABEL_187;
        }
        if (v61 == 95 || (v61 - 48) <= 9)
        {
          v22 = v61 & 0x1F;
          switch(v16)
          {
            case 0:
            case 1:
            case 3:
              goto LABEL_39;
            case 2:
              goto LABEL_162;
            case 4:
              goto LABEL_170;
            default:
              goto LABEL_172;
          }
        }
      }
      *(_DWORD *)(v12 + 28) = v27;
      switch(v16)
      {
        case 0:
        case 1:
        case 3:
          v22 = 92;
          goto LABEL_39;
        case 2:
          if (v17 >= 0x5D)
            goto LABEL_183;
          goto LABEL_171;
        case 4:
          goto LABEL_170;
        default:
          goto LABEL_172;
      }
    case 'f':
      *(_DWORD *)(v12 + 28) = v20 + 2;
      switch(v16)
      {
        case 0:
        case 1:
        case 3:
          v22 = 12;
          goto LABEL_39;
        case 2:
          if (v17 >= 0xD)
            goto LABEL_183;
          goto LABEL_171;
        case 4:
          goto LABEL_170;
        default:
          goto LABEL_172;
      }
    case 'k':
      *(_DWORD *)(v12 + 28) = v20 + 2;
      if (*(unsigned __int8 *)(v12 + 32) - 1 <= 1)
        goto LABEL_185;
      switch(v16)
      {
        case 0:
        case 1:
        case 3:
          v17 = 107;
          v16 = 1;
          break;
        case 2:
          if (v17 < 0x6C)
            goto LABEL_154;
          *(_BYTE *)(v12 + 8) = 14;
          v16 = 2;
          break;
        case 4:
          if (v67 == 1)
          {
            *(_BYTE *)(v12 + 8) = 15;
            v16 = 4;
          }
          else
          {
LABEL_154:
            v16 = 0;
          }
          break;
        default:
          break;
      }
      *(_BYTE *)(v12 + 49) = 1;
      goto LABEL_172;
    case 'n':
      *(_DWORD *)(v12 + 28) = v20 + 2;
      switch(v16)
      {
        case 0:
        case 1:
        case 3:
          v22 = 10;
          goto LABEL_39;
        case 2:
          if (v17 >= 0xB)
            goto LABEL_183;
          goto LABEL_171;
        case 4:
          goto LABEL_170;
        default:
          goto LABEL_172;
      }
    case 'q':
      *(_DWORD *)(v12 + 28) = v20 + 2;
      if (*(unsigned __int8 *)(v12 + 32) - 1 > 1)
        goto LABEL_192;
      v43 = v11;
      v44 = v18;
      v45 = v9;
      v46 = v8;
      result = (unint64_t)memchr(v18, v22, 0x10uLL);
      v8 = v46;
      v9 = v45;
      v18 = v44;
      v11 = v43;
      a8 = &jpt_198F0F9EC;
      a7 = &jpt_198F0F544;
      a6 = &jpt_198F0F4FC;
      if (result)
      {
LABEL_192:
        v10 = &jpt_198F0F250;
        switch(v16)
        {
          case 0:
          case 1:
          case 3:
            v22 = 113;
            v16 = 1;
            a4 = &jpt_198F0F4D0;
            a5 = &jpt_198F0F8D4;
            goto LABEL_173;
          case 2:
            a4 = &jpt_198F0F4D0;
            a5 = &jpt_198F0F8D4;
            if (v17 > v22)
              goto LABEL_183;
            goto LABEL_171;
          case 4:
            a4 = &jpt_198F0F4D0;
            a5 = &jpt_198F0F8D4;
            if (v67 == 1)
              goto LABEL_182;
            goto LABEL_171;
          default:
            v22 = v17;
            v10 = &jpt_198F0F250;
            a4 = &jpt_198F0F4D0;
            a5 = &jpt_198F0F8D4;
            goto LABEL_173;
        }
      }
      goto LABEL_185;
    case 'r':
      *(_DWORD *)(v12 + 28) = v20 + 2;
      switch(v16)
      {
        case 0:
        case 1:
        case 3:
          v22 = 13;
          goto LABEL_39;
        case 2:
          if (v17 >= 0xE)
            goto LABEL_183;
          goto LABEL_171;
        case 4:
          goto LABEL_170;
        default:
          goto LABEL_172;
      }
    case 't':
      *(_DWORD *)(v12 + 28) = v20 + 2;
      switch(v16)
      {
        case 0:
        case 1:
        case 3:
          v22 = 9;
          goto LABEL_39;
        case 2:
          if (v17 >= 0xA)
            goto LABEL_183;
          goto LABEL_171;
        case 4:
          goto LABEL_170;
        default:
          goto LABEL_172;
      }
    case 'u':
      v47 = v18;
      v48 = a4;
      v49 = a5;
      v50 = v9;
      v51 = v10;
      v52 = v8;
      result = JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::UnicodeParseContext)0>(v12);
      v8 = v52;
      v10 = v51;
      v9 = v50;
      a5 = v49;
      a8 = &jpt_198F0F9EC;
      a7 = &jpt_198F0F544;
      a6 = &jpt_198F0F4FC;
      v11 = &jpt_198F0F5DC;
      if (!*(_BYTE *)(v12 + 8))
      {
        a4 = v48;
        v18 = v47;
        if ((_DWORD)result == -1)
          v22 = 117;
        else
          v22 = result;
        v53 = v16;
        v16 = 1;
        switch(v53)
        {
          case 0:
          case 1:
          case 3:
            goto LABEL_173;
          case 2:
            goto LABEL_162;
          case 4:
            goto LABEL_170;
          default:
            v63 = 0;
            goto LABEL_174;
        }
      }
      return result;
    case 'v':
      *(_DWORD *)(v12 + 28) = v20 + 2;
      switch(v16)
      {
        case 0:
        case 1:
        case 3:
          v22 = 11;
          goto LABEL_39;
        case 2:
          if (v17 >= 0xC)
            goto LABEL_183;
          goto LABEL_171;
        case 4:
          goto LABEL_170;
        default:
          goto LABEL_172;
      }
    case 'x':
      v54 = v20 + 2;
      *(_DWORD *)(v12 + 28) = v20 + 2;
      if ((_DWORD)v20 + 2 == v19
        || ((v55 = *(unsigned __int16 *)(v21 + 2 * v54), v55 - 48 >= 0xA) ? (v56 = (v55 | 0x20) - 97 > 5) : (v56 = 0),
            v56
         || ((v57 = v20 + 3, *(_DWORD *)(v12 + 28) = v20 + 3, result = (unint64_t)v8, v55 >= 0x41)
           ? (v58 = (v55 + 9) & 0xF)
           : (v58 = v55 - 48),
             v57 == v19 || (v59 = *(unsigned __int16 *)(v21 + 2 * v57), v59 - 48 >= 0xA) && (v59 | 0x20) - 97 >= 6)))
      {
        *(_DWORD *)(v12 + 28) = v54;
        if (*(unsigned __int8 *)(v12 + 32) - 1 > 1)
        {
          switch(v16)
          {
            case 0:
            case 1:
            case 3:
              v22 = 120;
              goto LABEL_39;
            case 2:
              if (v17 >= 0x79)
                goto LABEL_183;
              goto LABEL_171;
            case 4:
              goto LABEL_170;
            default:
              goto LABEL_172;
          }
        }
        goto LABEL_185;
      }
      *(_DWORD *)(v12 + 28) = v20 + 4;
      if (v59 >= 0x41)
        v64 = (v59 + 9) & 0xF;
      else
        v64 = v59 - 48;
      v22 = v64 | (16 * v58);
      switch(v16)
      {
        case 0:
        case 1:
        case 3:
LABEL_39:
          v16 = 1;
          goto LABEL_173;
        case 2:
LABEL_162:
          if (v17 <= v22)
            goto LABEL_171;
LABEL_183:
          v66 = 14;
          break;
        case 4:
          goto LABEL_170;
        default:
          goto LABEL_172;
      }
      goto LABEL_187;
    default:
      if (v22 > 0x7F || *(unsigned __int8 *)(v12 + 32) - 1 > 1)
        goto LABEL_56;
      v36 = v18;
      v37 = v9;
      v38 = v10;
      v39 = v8;
      result = (unint64_t)memchr(v18, v22, 0x10uLL);
      v8 = v39;
      v10 = v38;
      a5 = &jpt_198F0F8D4;
      a4 = &jpt_198F0F4D0;
      v9 = v37;
      v18 = v36;
      v11 = &jpt_198F0F5DC;
      a8 = &jpt_198F0F9EC;
      a7 = &jpt_198F0F544;
      a6 = &jpt_198F0F4FC;
      if ((_DWORD)v22 && result != 0)
      {
LABEL_56:
        *(_DWORD *)(v12 + 28) = v20 + 2;
        switch(v16)
        {
          case 0:
          case 1:
          case 3:
            goto LABEL_39;
          case 2:
            goto LABEL_162;
          case 4:
            goto LABEL_170;
          default:
            goto LABEL_172;
        }
      }
      goto LABEL_185;
  }
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::parseQuantifier(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  char v4;

  if (a3 == -1)
  {
    v4 = 4;
LABEL_10:
    *(_BYTE *)(result + 8) = v4;
    return result;
  }
  if (a2 == 2)
  {
    v4 = 6;
    goto LABEL_10;
  }
  if (a2 != 1)
  {
    v4 = 3;
    goto LABEL_10;
  }
  v3 = *(unsigned int *)(result + 28);
  if ((_DWORD)v3 != *(_DWORD *)(result + 24) && *(_WORD *)(*(_QWORD *)(result + 16) + 2 * v3) == 63)
    *(_DWORD *)(result + 28) = v3 + 1;
  return result;
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::consumeNumber(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  unsigned int v8;
  BOOL v9;
  BOOL v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 24);
  v4 = *(unsigned int *)(a1 + 28);
  v5 = v4 + 1;
  *(_DWORD *)(a1 + 28) = v4 + 1;
  result = *(unsigned __int16 *)(v2 + 2 * v4) - 48;
  if ((_DWORD)v4 + 1 != v3)
  {
    LOBYTE(v7) = 0;
    do
    {
      v8 = *(unsigned __int16 *)(v2 + 2 * v5) - 48;
      if (v8 > 9)
        break;
      if ((_BYTE)v7)
        v9 = 1;
      else
        v9 = result > 0x19999999;
      v7 = v9;
      v10 = __CFADD__(v8, 10 * result);
      v11 = v8 + 10 * result;
      if (v10)
        v7 = 1;
      result = v7 ? 0 : v11;
      *(_DWORD *)(a1 + 28) = ++v5;
    }
    while (v3 != v5);
    if ((_BYTE)v7)
      return 0xFFFFFFFFLL;
  }
  return result;
}

void JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::tryConsumeGroupName(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::AtomStringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  unsigned int v87;
  char v88;

  v9 = *(_DWORD *)(a2 + 24);
  v10 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v10 == v9)
    goto LABEL_17;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(unsigned __int16 *)(v12 + 2 * v10);
  v14 = v10 + 1;
  *(_DWORD *)(a2 + 28) = v10 + 1;
  if (v13 == 92)
  {
    v13 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::UnicodeParseContext)1>(a2);
  }
  else if (v14 != v9 && (v13 & 0xFC00) == 55296)
  {
    *(_DWORD *)(a2 + 28) = v10 + 2;
    v52 = *(unsigned __int16 *)(v12 + 2 * v14);
    if ((v52 & 0xFC00) == 0xDC00)
      v13 = v52 + (v13 << 10) - 56613888;
    else
      *(_DWORD *)(a2 + 28) = v14;
LABEL_8:
    if (((1 << u_charType(v13)) & 0x3E) == 0)
    {
LABEL_16:
      *(_DWORD *)(a2 + 28) = v10;
LABEL_17:
      *a1 = 0;
      a1[8] = 0;
      return;
    }
    goto LABEL_9;
  }
  if (v13 > 0x7F || (v13 | 0x20) - 97 >= 0x1A && v13 != 36 && v13 != 95)
    goto LABEL_8;
LABEL_9:
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 1;
  WTF::StringBuilder::append<char32_t>((uint64_t)&v85, v13, a3, a4, a5, a6, a7, a8);
  v23 = *(_DWORD *)(a2 + 24);
  v22 = *(_DWORD *)(a2 + 28);
  if (v22 == v23)
  {
LABEL_10:
    v24 = v86;
    v86 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::~StringImpl(v24, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
      }
      else
      {
        *(_DWORD *)v24 -= 2;
      }
    }
    v25 = v85;
    v85 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::~StringImpl(v25, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
      }
      else
      {
        *(_DWORD *)v25 -= 2;
      }
    }
    goto LABEL_16;
  }
  while (1)
  {
    v26 = *(_QWORD *)(a2 + 16);
    v27 = *(unsigned __int16 *)(v26 + 2 * v22);
    v28 = v22 + 1;
    *(_DWORD *)(a2 + 28) = v22 + 1;
    if (v27 == 92)
      break;
    if (v28 == v23 || (v27 & 0xFC00) != 0xD800)
      goto LABEL_21;
    *(_DWORD *)(a2 + 28) = v22 + 2;
    v31 = *(unsigned __int16 *)(v26 + 2 * v28);
    if ((v31 & 0xFC00) == 0xDC00)
      v27 = v31 + (v27 << 10) - 56613888;
    else
      *(_DWORD *)(a2 + 28) = v28;
LABEL_26:
    v29 = (1 << u_charType(v27)) & 0x40037E;
    if (v27 >> 1 != 4102 && v29 == 0)
      goto LABEL_10;
LABEL_30:
    WTF::StringBuilder::append<char32_t>((uint64_t)&v85, v27, v16, v17, v18, v19, v20, v21);
    v23 = *(_DWORD *)(a2 + 24);
    v22 = *(_DWORD *)(a2 + 28);
    if (v22 == v23)
      goto LABEL_10;
  }
  v27 = JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::YarrPatternConstructor,char16_t>::UnicodeParseContext)1>(a2);
LABEL_21:
  if (v27 != 62)
  {
    if (v27 <= 0x7F && ((v27 | 0x20) - 97 < 0x1A || v27 == 36 || v27 == 95))
      goto LABEL_30;
    goto LABEL_26;
  }
  v32 = v85;
  if (v85)
    goto LABEL_38;
  if ((v87 & 0x80000000) == 0 && v86 && *((_DWORD *)v86 + 1) > v87 + (v87 >> 2))
  {
    if ((*((_BYTE *)v86 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v85, (WTF::AtomStringImpl *)v87, v16, v17, v18, v19, v20, v21);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v85, (WTF::AtomStringImpl *)v87, v16, v17, v18, v19, v20, v21);
    v76 = v85;
    v85 = v86;
    v86 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
      {
        WTF::StringImpl::~StringImpl(v76, v69, v70, v71, v72, v73, v74, v75);
        WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
      }
      else
      {
        *(_DWORD *)v76 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v85);
  v32 = v85;
  if (v85)
LABEL_38:
    *(_DWORD *)v32 += 2;
  *(_QWORD *)a1 = v32;
  a1[8] = 1;
  v33 = v86;
  v86 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
  v34 = v85;
  v85 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
}

WTF::StringImpl ***JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::NamedCaptureGroups::pushParenthesis(WTF::StringImpl ***result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  WTF::StringImpl **v28;

  v1 = *((unsigned int *)result + 11);
  if ((_DWORD)v1)
  {
    v2 = result;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v28, (uint64_t *)&result[4][v1 - 1]);
    v27 = 0;
    v10 = *((unsigned int *)v2 + 5);
    if ((_DWORD)v10 == *((_DWORD *)v2 + 4))
    {
      WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((uint64_t)(v2 + 1), (unint64_t)&v27, v4, v5, v6, v7, v8, v9);
    }
    else
    {
      v11 = v2[1];
      v11[v10] = 0;
      v12 = v27;
      v27 = 0;
      v11[v10] = (WTF::StringImpl *)v12;
      ++*((_DWORD *)v2 + 5);
    }
    WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>::~HashSet(&v27, v3, v4, v5, v6, v7, v8, v9);
    v19 = *((unsigned int *)v2 + 11);
    if ((_DWORD)v19 == *((_DWORD *)v2 + 10))
    {
      WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&>((uint64_t)(v2 + 4), (unint64_t)&v28, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v2[4][v19], (uint64_t *)&v28);
      ++*((_DWORD *)v2 + 11);
    }
    return WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>::~HashSet(&v28, v20, v21, v22, v23, v24, v25, v26);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::tryConsumeHex(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 v10;

  v2 = *(_DWORD *)(a1 + 24);
  v1 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v1 == v2)
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int16 *)(v3 + 2 * v1);
  if (v4 - 48 >= 0xA && (v4 | 0x20) - 97 > 5)
    return 0xFFFFFFFFLL;
  v6 = v1 + 1;
  v7 = v4 >= 0x41 ? (v4 + 9) & 0xF : v4 - 48;
  if (v6 == v2)
    return 0xFFFFFFFFLL;
  v8 = *(unsigned __int16 *)(v3 + 2 * v6);
  if (v8 - 48 >= 0xA && (v8 | 0x20) - 97 > 5)
    return 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 28) = v1 + 2;
  v10 = v8 - 48;
  if (v8 >= 0x41)
    v10 = (v8 + 9) & 0xF;
  return (16 * v7) | v10;
}

void JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::NamedCaptureGroups::popParenthesis(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v8 = *(unsigned int *)(a1 + 20);
  if (!(_DWORD)v8)
    goto LABEL_9;
  v10 = *(unsigned int *)(a1 + 44);
  if (!(_DWORD)v10)
  {
    __break(0xC471u);
    JUMPOUT(0x198F10338);
  }
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::formUnion<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((uint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v8 - 8), *(WTF::StringImpl ***)(*(_QWORD *)(a1 + 32) + 8 * v10 - 8), a3, a4, a5, a6, a7, a8);
  v17 = *(unsigned int *)(a1 + 44);
  if (v17 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x198F10340);
  }
  v18 = *(unsigned int *)(a1 + 20);
  if (!(_DWORD)v18)
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x198F10330);
  }
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::formUnion<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((uint64_t *)(*(_QWORD *)(a1 + 32) + 8 * v17 - 16), *(WTF::StringImpl ***)(*(_QWORD *)(a1 + 8) + 8 * v18 - 8), v11, v12, v13, v14, v15, v16);
  WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeLast(a1 + 8, v19, v20, v21, v22, v23, v24, v25);
  WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeLast(a1 + 32, v26, v27, v28, v29, v30, v31, v32);
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::consumeOctal(uint64_t result, int a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;

  v2 = 0;
  v3 = *(_DWORD *)(result + 24);
  v4 = *(_DWORD *)(result + 28);
  v5 = a2 - 1;
  do
  {
    if (v3 == v4)
      break;
    v6 = *(unsigned __int16 *)(*(_QWORD *)(result + 16) + 2 * v4);
    if ((v6 & 0xFFF8) != 0x30)
      break;
    *(_DWORD *)(result + 28) = ++v4;
    if (v5-- == 0)
      break;
    v2 = v6 + 8 * v2 - 48;
  }
  while (v2 < 0x20);
  return result;
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::tryConsumeUnicodePropertyExpression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  BOOL v13;
  size_t v14;
  uint64_t v15;
  size_t matched;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v29;
  char v30;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF::AtomStringImpl *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF::AtomStringImpl *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  unsigned int v156;
  char v157;

  v9 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 24)
    || (v10 = *(_QWORD *)(a1 + 16), v11 = *(unsigned __int16 *)(v10 + 2 * v9), v11 != 61)
    && (v11 != 95 ? (v12 = (v11 - 48) >= 0xA) : (v12 = 0),
        v12 ? (v13 = (v11 | 0x20u) - 97 >= 0x1A) : (v13 = 0),
        v13))
  {
    LODWORD(v14) = 0;
    v15 = 0;
    LOBYTE(matched) = 0;
    *(_BYTE *)(a1 + 8) = 25;
    return v15 & 0x100000000 | ((_DWORD)v14 << 8) | matched;
  }
  v154 = 0;
  v155 = 0;
  v156 = 0;
  v157 = 1;
  *(_DWORD *)(a1 + 28) = v9 + 1;
  WTF::StringBuilder::append<char32_t>((uint64_t)&v154, *(unsigned __int16 *)(v10 + 2 * v9), a3, a4, a5, a6, a7, a8);
  v24 = *(_DWORD *)(a1 + 28);
  if (v24 == *(_DWORD *)(a1 + 24))
  {
    v25 = 0;
LABEL_14:
    LODWORD(v14) = 0;
    LOBYTE(matched) = 0;
LABEL_15:
    v15 = 0;
    *(_BYTE *)(a1 + 8) = 25;
    goto LABEL_16;
  }
  v29 = 0;
  v30 = 0;
  v25 = 0;
  while (1)
  {
    v17 = (WTF::AtomStringImpl *)*(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 2 * v24);
    *(_DWORD *)(a1 + 28) = v24 + 1;
    if ((_DWORD)v17 == 61)
    {
      if ((v30 & 1) != 0)
      {
        ++v29;
        v30 = 1;
      }
      else
      {
        v33 = v154;
        if (v154)
          goto LABEL_41;
        if ((v156 & 0x80000000) == 0 && v155 && *((_DWORD *)v155 + 1) > v156 + (v156 >> 2))
        {
          if ((*((_BYTE *)v155 + 16) & 4) != 0)
            WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v154, (WTF::AtomStringImpl *)v156, v18, v19, v20, v21, v22, v23);
          else
            WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v154, (WTF::AtomStringImpl *)v156, v18, v19, v20, v21, v22, v23);
          v67 = v154;
          v154 = v155;
          v155 = 0;
          if (v67)
          {
            if (*(_DWORD *)v67 == 2)
            {
              WTF::StringImpl::~StringImpl(v67, v60, v61, v62, v63, v64, v65, v66);
              WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
            }
            else
            {
              *(_DWORD *)v67 -= 2;
            }
          }
        }
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v154);
        v33 = v154;
        if (v154)
LABEL_41:
          *(_DWORD *)v33 += 2;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
          {
            WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
            WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
          }
          else
          {
            *(_DWORD *)v25 -= 2;
          }
        }
        v34 = v154;
        v154 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
          {
            WTF::StringImpl::~StringImpl(v34, v17, v18, v19, v20, v21, v22, v23);
            WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
          }
          else
          {
            *(_DWORD *)v34 -= 2;
          }
        }
        v35 = v155;
        v155 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
          {
            WTF::StringImpl::~StringImpl(v35, v17, v18, v19, v20, v21, v22, v23);
            WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
          }
          else
          {
            *(_DWORD *)v35 -= 2;
          }
        }
        v156 = 0;
        v30 = 1;
        v25 = v33;
      }
      goto LABEL_52;
    }
    if ((_DWORD)v17 == 125)
      break;
    if ((_DWORD)v17 != 95 && ((_DWORD)v17 - 48) >= 0xA && (v17 | 0x20) - 97 >= 0x1A)
      ++v29;
    else
      WTF::StringBuilder::append<char32_t>((uint64_t)&v154, v17, v18, v19, v20, v21, v22, v23);
LABEL_52:
    v24 = *(_DWORD *)(a1 + 28);
    if (v24 == *(_DWORD *)(a1 + 24))
      goto LABEL_14;
  }
  if (v29)
    goto LABEL_14;
  if ((v30 & 1) != 0)
  {
    if (v25)
      *(_DWORD *)v25 += 2;
    v153 = v25;
    v76 = v154;
    if (v154)
      goto LABEL_74;
    if ((v156 & 0x80000000) == 0 && v155 && *((_DWORD *)v155 + 1) > v156 + (v156 >> 2))
    {
      if ((*((_BYTE *)v155 + 16) & 4) != 0)
        WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v154, (WTF::AtomStringImpl *)v156, v18, v19, v20, v21, v22, v23);
      else
        WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v154, (WTF::AtomStringImpl *)v156, v18, v19, v20, v21, v22, v23);
      v133 = v154;
      v154 = v155;
      v155 = 0;
      if (v133)
      {
        if (*(_DWORD *)v133 == 2)
        {
          WTF::StringImpl::~StringImpl(v133, v119, v120, v121, v122, v123, v124, v125);
          WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
        }
        else
        {
          *(_DWORD *)v133 -= 2;
        }
      }
    }
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v154);
    v76 = v154;
    if (v154)
LABEL_74:
      *(_DWORD *)v76 += 2;
    v152 = v76;
    matched = JSC::Yarr::unicodeMatchPropertyValue((uint64_t *)&v153, &v152);
    v152 = 0;
    v77 = v25;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
      {
        WTF::StringImpl::~StringImpl(v76, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
        v77 = v153;
      }
      else
      {
        *(_DWORD *)v76 -= 2;
        v77 = v25;
      }
    }
    v14 = matched >> 8;
    v15 = matched & 0x100000000;
    v153 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 != 2)
      {
        *(_DWORD *)v77 -= 2;
        goto LABEL_92;
      }
LABEL_91:
      WTF::StringImpl::~StringImpl(v77, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
  }
  else
  {
    v102 = v154;
    if (v154)
      goto LABEL_85;
    if ((v156 & 0x80000000) == 0 && v155 && *((_DWORD *)v155 + 1) > v156 + (v156 >> 2))
    {
      if ((*((_BYTE *)v155 + 16) & 4) != 0)
        WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v154, (WTF::AtomStringImpl *)v156, v18, v19, v20, v21, v22, v23);
      else
        WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v154, (WTF::AtomStringImpl *)v156, v18, v19, v20, v21, v22, v23);
      v134 = v154;
      v154 = v155;
      v155 = 0;
      if (v134)
      {
        if (*(_DWORD *)v134 == 2)
        {
          WTF::StringImpl::~StringImpl(v134, v126, v127, v128, v129, v130, v131, v132);
          WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
        }
        else
        {
          *(_DWORD *)v134 -= 2;
        }
      }
    }
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v154);
    v102 = v154;
    if (v154)
LABEL_85:
      *(_DWORD *)v102 += 2;
    v151 = v102;
    matched = JSC::Yarr::unicodeMatchProperty(&v151, *(unsigned __int8 *)(a1 + 32));
    v14 = matched >> 8;
    v15 = matched & 0x100000000;
    v151 = 0;
    if (v102)
    {
      if (*(_DWORD *)v102 == 2)
      {
        v77 = v102;
        goto LABEL_91;
      }
      *(_DWORD *)v102 -= 2;
    }
  }
LABEL_92:
  if (!HIDWORD(matched))
    goto LABEL_15;
LABEL_16:
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = v155;
  v155 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  v27 = v154;
  v154 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  return v15 & 0x100000000 | ((_DWORD)v14 << 8) | matched;
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::UnicodeParseContext)0>(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned __int8 v11;
  int v12;
  unsigned int v14;
  __int16 v15;
  unsigned int v16;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int8 v22;
  unsigned int v23;
  char v24;
  int v26;
  unsigned int v27;
  unsigned __int8 v28;
  unsigned int v29;
  unsigned int v30;
  __int16 v31;
  unsigned int v32;
  unsigned int v33;
  unsigned __int8 v34;
  unsigned int v35;
  unsigned int v36;
  unsigned __int8 v37;
  unsigned int v38;
  unsigned __int8 v39;

  v1 = *(unsigned __int8 *)(a1 + 32) - 1;
  v3 = *(_DWORD *)(a1 + 24);
  v2 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v2 == v3)
    goto LABEL_42;
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_WORD *)(v4 + 2 * v2) != 117)
    goto LABEL_42;
  *(_DWORD *)(a1 + 28) = v2 + 1;
  if ((_DWORD)v2 + 1 == v3)
    goto LABEL_42;
  v5 = *(unsigned __int16 *)(v4 + 2 * (v2 + 1));
  if (v1 <= 1 && v5 == 123)
  {
    LODWORD(v6) = 0;
    *(_DWORD *)(a1 + 28) = v2 + 2;
    v7 = v2 + 3;
    v8 = -v3;
    while (v8 + v7 != 1)
    {
      v9 = *(unsigned __int16 *)(v4 + 2 * (v7 - 1));
      if (v9 - 48 >= 0xA && (v9 | 0x20) - 97 >= 6)
        break;
      *(_DWORD *)(a1 + 28) = v7;
      v11 = v9 >= 0x41 ? (v9 + 9) & 0xF : v9 - 48;
      v6 = v11 | (16 * v6);
      if (v6 >= 0x110000 || !(v8 + v7))
        break;
      v12 = *(unsigned __int16 *)(v4 + 2 * v7++);
      if (v12 == 125)
      {
        *(_DWORD *)(a1 + 28) = v7;
        return v6;
      }
    }
    v24 = 19;
    goto LABEL_45;
  }
  if (v5 - 48 >= 0xA && (v5 | 0x20) - 97 > 5)
    goto LABEL_42;
  v14 = v2 + 2;
  v15 = v5 >= 0x41 ? ((_BYTE)v5 + 9) & 0xF : v5 + 208;
  if (v14 == v3)
    goto LABEL_42;
  v16 = *(unsigned __int16 *)(v4 + 2 * v14);
  if (v16 - 48 >= 0xA && (v16 | 0x20) - 97 > 5)
    goto LABEL_42;
  v18 = v2 + 3;
  v19 = v16 >= 0x41 ? (v16 + 9) & 0xF : v16 - 48;
  if (v18 == v3)
    goto LABEL_42;
  v20 = *(unsigned __int16 *)(v4 + 2 * v18);
  if (v20 - 48 >= 0xA && (v20 | 0x20) - 97 > 5)
    goto LABEL_42;
  v21 = v2 + 4;
  v22 = v20 - 48;
  if (v20 >= 0x41)
    v22 = (v20 + 9) & 0xF;
  if (v21 == v3 || (v23 = *(unsigned __int16 *)(v4 + 2 * v21), v23 - 48 >= 0xA) && (v23 | 0x20) - 97 >= 6)
  {
LABEL_42:
    if (v1 > 1)
      return 0xFFFFFFFFLL;
    v24 = 18;
LABEL_45:
    *(_BYTE *)(a1 + 8) = v24;
    return 0xFFFFFFFFLL;
  }
  v26 = (unsigned __int16)((16 * v19) | (v15 << 8) | v22);
  v27 = v2 + 5;
  *(_DWORD *)(a1 + 28) = v2 + 5;
  v28 = v23 - 48;
  if (v23 >= 0x41)
    v28 = (v23 + 9) & 0xF;
  v6 = v28 | (16 * v26);
  if (v3 - v27 >= 6 && (v26 & 0xFFC0) == 0xD80 && v1 <= 1 && *(_WORD *)(v4 + 2 * v27) == 92)
  {
    if ((_DWORD)v2 + 6 == v3)
      goto LABEL_82;
    if (*(_WORD *)(v4 + 2 * (v2 + 6)) != 117)
      goto LABEL_82;
    if ((_DWORD)v2 + 7 == v3)
      goto LABEL_82;
    v29 = *(unsigned __int16 *)(v4 + 2 * (v2 + 7));
    if (v29 - 48 >= 0xA && (v29 | 0x20) - 97 > 5)
      goto LABEL_82;
    v30 = v2 + 8;
    v31 = v29 >= 0x41 ? ((_BYTE)v29 + 9) & 0xF : v29 + 208;
    if (v30 == v3)
      goto LABEL_82;
    v32 = *(unsigned __int16 *)(v4 + 2 * v30);
    if (v32 - 48 >= 0xA && (v32 | 0x20) - 97 > 5)
      goto LABEL_82;
    v33 = v2 + 9;
    v34 = v32 >= 0x41 ? (v32 + 9) & 0xF : v32 - 48;
    if (v33 == v3
      || (v35 = *(unsigned __int16 *)(v4 + 2 * v33), v35 - 48 >= 0xA) && (v35 | 0x20) - 97 > 5
      || ((v36 = v2 + 10, v35 >= 0x41) ? (v37 = (v35 + 9) & 0xF) : (v37 = v35 - 48),
          v36 == v3
       || (v38 = *(unsigned __int16 *)(v4 + 2 * v36), v38 - 48 >= 0xA) && (v38 | 0x20) - 97 > 5
       || ((*(_DWORD *)(a1 + 28) = v2 + 11, v38 >= 0x41) ? (v39 = (v38 + 9) & 0xF) : (v39 = v38 - 48),
           ((16 * v34) & 0xFFC0 | (unsigned __int16)(v31 << 8) | v37 & 0xC0) != 0xDC0)))
    {
LABEL_82:
      *(_DWORD *)(a1 + 28) = v27;
    }
    else
    {
      return (v39 | (16 * (unsigned __int16)((16 * v34) | (v31 << 8) | v37)))
           + ((_DWORD)v6 << 10)
           - 56613888;
    }
  }
  return v6;
}

uint64_t JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::isIdentityEscapeAnError<(JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::ParseEscapeMode)0>(uint64_t a1, unsigned int __c)
{
  void *v5;

  if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
    return 0;
  if (__c > 0x7F)
    return 0;
  v5 = memchr("^$\\.*+?()[]{}|/", __c, 0x10uLL);
  if (__c)
  {
    if (v5)
      return 0;
  }
  *(_BYTE *)(a1 + 8) = 22;
  return 1;
}

void JSC::Yarr::Parser<JSC::Yarr::SyntaxChecker,char16_t>::resetForReparsing(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  WTF::StringImpl **v11;
  _QWORD *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl **v30;

  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 49) = 0;
  if (*(_DWORD *)(a1 + 64))
  {
    if (*(_DWORD *)(a1 + 68))
      *(_DWORD *)(a1 + 68) = 0;
    v9 = *(_QWORD *)(a1 + 56);
    if (a1 + 72 == v9 || v9 == 0)
    {
      if (v9)
        goto LABEL_11;
      goto LABEL_10;
    }
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    if (!*(_QWORD *)(a1 + 56))
    {
LABEL_10:
      *(_QWORD *)(a1 + 56) = a1 + 72;
      *(_DWORD *)(a1 + 64) = 16;
    }
  }
LABEL_11:
  v11 = *(WTF::StringImpl ***)(a1 + 88);
  if (v11)
  {
    *(_QWORD *)(a1 + 88) = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = (_QWORD *)(a1 + 96);
  WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 96, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(a1 + 104))
    WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 96, 0x10uLL, v14, v15, v16, v17, v18, v19);
  if (*v12)
  {
    v20 = *(unsigned int *)(a1 + 108);
    if ((_DWORD)v20 != 1)
      bzero((void *)(*v12 + 8 * v20), -8 * v20 + 8);
  }
  *(_DWORD *)(a1 + 108) = 1;
  v21 = (_QWORD *)(a1 + 120);
  WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 120, v13, v14, v15, v16, v17, v18, v19);
  if (!*(_DWORD *)(a1 + 128))
    WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 120, 0x10uLL, v23, v24, v25, v26, v27, v28);
  if (*v21)
  {
    v29 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v29 != 1)
      bzero((void *)(*v21 + 8 * v29), -8 * v29 + 8);
  }
  *(_DWORD *)(a1 + 132) = 1;
  v30 = *(WTF::StringImpl ***)(a1 + 144);
  if (v30)
  {
    *(_QWORD *)(a1 + 144) = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v22, v23, v24, v25, v26, v27, v28);
  }
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::Location::fromStack(JSC::Wasm::BBQJITImpl::BBQJIT::Location *this)
{
  return (8 * (_DWORD)this) | 1u;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::Location::fromStackArgument(JSC::Wasm::BBQJITImpl::BBQJIT::Location *this)
{
  return (8 * (_DWORD)this) | 5u;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress(JSC::Wasm::BBQJITImpl::BBQJIT::Location *this)
{
  int v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_DWORD *)this & 7;
  switch(v1)
  {
    case 1:
      v2 = 29;
      return v2 | ((unint64_t)(*(int *)this >> 3) << 32);
    case 4:
      v2 = 19;
      return v2 | ((unint64_t)(*(int *)this >> 3) << 32);
    case 5:
      v2 = 31;
      return v2 | ((unint64_t)(*(int *)this >> 3) << 32);
  }
  result = 209;
  __break(0xC471u);
  return result;
}

int *JSC::Wasm::BBQJITImpl::BBQJIT::Location::dump(int *this, WTF::PrintStream *a2)
{
  int v2;
  WTF::PrintStream *v4;
  int v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  const char *v8;
  char **v9;
  char *v10;
  char *v11;
  WTF::PrintStream *v12;
  WTF::PrintStream *v13;
  const char *v14;
  char **v15;
  WTF::PrintStream *v16;
  float v17;
  unsigned int v18;
  int *v19;
  char **v20;
  char *v21;
  char *v22;
  WTF::PrintStream *v23;
  WTF::PrintStream *v24;
  float v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  char **v29;
  char *v30;
  char *v31;
  WTF::PrintStream *v32;
  WTF::PrintStream *v33;
  float v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;

  v2 = *this;
  switch(*this & 7)
  {
    case 0:
      v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v4, "%s");
      goto LABEL_13;
    case 1:
      v5 = v2 >> 3;
      v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v7 = v6;
      v8 = "Stack(";
      goto LABEL_12;
    case 2:
      v9 = &(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * SBYTE1(v2)];
      v10 = *v9;
      v11 = v9[1];
      v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v13 = v12;
      v14 = "GPR(";
      goto LABEL_6;
    case 3:
      v15 = &(&JSC::ARM64Assembler::fprName(JSC::ARM64Registers::FPRegisterID)::nameForRegister)[2 * SBYTE1(v2)];
      v10 = *v15;
      v11 = v15[1];
      v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v13 = v12;
      v14 = "FPR(";
LABEL_6:
      WTF::PrintStream::printf(v12, "%s", v14);
      v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v13 + 32))(v13);
      if (v10)
      {
        v18 = (_DWORD)v11 - 1;
        if (!v11)
          v18 = 0;
        WTF::StringImpl::utf8ForCharacters(v10, v18, (uint64_t)&v37, v17);
      }
      else
      {
        v27 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v27 = 1;
        *(_QWORD *)(v27 + 8) = 0;
        *(_BYTE *)(v27 + 16) = 0;
        v37 = v27;
        v38 = 0;
      }
      WTF::printExpectedCStringHelper(v16, "StringView", &v37);
      if (v38 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
      goto LABEL_32;
    case 4:
      v5 = v2 >> 3;
      v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v7 = v6;
      v8 = "Global(";
      goto LABEL_12;
    case 5:
      v5 = v2 >> 3;
      v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v7 = v6;
      v8 = "StackArgument(";
LABEL_12:
      WTF::PrintStream::printf(v6, "%s", v8);
      WTF::PrintStream::printf(v7, "%d", v5);
      WTF::PrintStream::printf(v7, "%s");
LABEL_13:
      this = (int *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      break;
    case 6:
      v19 = this;
      v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v13, "%s", "GPR2(");
      v20 = &(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * *((char *)v19 + 1)];
      v21 = *v20;
      v22 = v20[1];
      v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v13 + 32))(v13);
      WTF::PrintStream::printf(v23, "%s", "%");
      v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v23 + 32))(v23);
      if (v21)
      {
        v26 = (_DWORD)v22 - 1;
        if (!v22)
          v26 = 0;
        WTF::StringImpl::utf8ForCharacters(v21, v26, (uint64_t)&v37, v25);
      }
      else
      {
        v28 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v28 = 1;
        *(_QWORD *)(v28 + 8) = 0;
        *(_BYTE *)(v28 + 16) = 0;
        v37 = v28;
        v38 = 0;
      }
      WTF::printExpectedCStringHelper(v24, "StringView", &v37);
      if (v38 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v23 + 40))(v23);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v13 + 40))(v13);
      WTF::PrintStream::printf(v13, "%s", ",");
      v29 = &(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * *((char *)v19 + 2)];
      v30 = *v29;
      v31 = v29[1];
      v32 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v13 + 32))(v13);
      WTF::PrintStream::printf(v32, "%s", "%");
      v33 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v32 + 32))(v32);
      if (v30)
      {
        v35 = (_DWORD)v31 - 1;
        if (!v31)
          v35 = 0;
        WTF::StringImpl::utf8ForCharacters(v30, v35, (uint64_t)&v37, v34);
      }
      else
      {
        v36 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v36 = 1;
        *(_QWORD *)(v36 + 8) = 0;
        *(_BYTE *)(v36 + 16) = 0;
        v37 = v36;
        v38 = 0;
      }
      WTF::printExpectedCStringHelper(v33, "StringView", &v37);
      if (v38 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v38])(&v39, &v37);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v32 + 40))(v32);
LABEL_32:
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v13 + 40))(v13);
      WTF::PrintStream::printf(v13, "%s", ")");
      this = (int *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      break;
    default:
      return this;
  }
  return this;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::Location::operator==(int *a1, unint64_t a2)
{
  int v2;
  int v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a1 & 7;
  if (v3 != (a2 & 7))
    return 0;
  if (v3 != 2)
  {
    result = 1;
    switch(v3)
    {
      case 0:
        return result;
      case 1:
      case 4:
      case 5:
        return (v2 ^ (a2 & 0xFF0000F8 | (BYTE2(a2) << 16) | (BYTE1(a2) << 8))) < 8;
      case 3:
        break;
      case 6:
        return !(((v2 << 8) ^ ((a2 >> 16) << 24)) >> 24) && BYTE1(v2) == BYTE1(a2);
      default:
        __break(0xC471u);
        JUMPOUT(0x198F11360);
    }
  }
  return BYTE1(v2) == BYTE1(a2);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::Value::dump(uint64_t this, WTF::PrintStream *a2)
{
  int *v3;
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  WTF::PrintStream *v8;
  const char *v9;
  WTF::PrintStream *v10;
  WTF::PrintStream *v11;
  WTF::PrintStream *v12;

  v3 = (int *)this;
  switch(*(_BYTE *)(this + 8))
  {
    case 0:
      v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      goto LABEL_13;
    case 1:
      v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v6, "%s", "Const(");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      switch(*((_BYTE *)v3 + 9))
      {
        case 0xFC:
        case 0xFD:
          v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v10, "%lf");
          goto LABEL_11;
        case 0xFE:
          v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v11, "%lld");
          goto LABEL_11;
        case 0xFF:
          v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v12, "%d");
LABEL_11:
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          break;
        default:
          break;
      }
      v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
LABEL_13:
      WTF::PrintStream::printf(v4, "%s");
      goto LABEL_14;
    case 2:
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v8 = v7;
      v9 = "Temp(";
      goto LABEL_7;
    case 3:
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v8 = v7;
      v9 = "Local(";
LABEL_7:
      WTF::PrintStream::printf(v7, "%s", v9);
      WTF::PrintStream::printf(v8, "%u", *v3);
      WTF::PrintStream::printf(v8, "%s");
      goto LABEL_14;
    case 4:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      JSC::Wasm::BBQJITImpl::BBQJIT::Location::dump(v3, v5);
LABEL_14:
      this = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      break;
    default:
      return this;
  }
  return this;
}

unsigned __int8 *JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding::toValue(unsigned __int8 *this)
{
  unsigned int v1;
  int v2;
  int v3;
  int v4;

  v1 = *(unsigned __int16 *)(this + 1) | (this[3] << 16);
  v2 = *(_WORD *)(this + 1) & 7;
  if (v2)
  {
    if (v2 == 2)
    {
      v3 = *this;
      if ((v3 - 192) <= 0x33
        && ((1 << (v3 + 64)) & 0xFFC19C001C000) == 0
        && v3 == 192)
      {
        __break(0xC471u);
        JUMPOUT(0x198F116E8);
      }
      return (unsigned __int8 *)(v1 >> 3);
    }
    else if (v2 != 3)
    {
      if (v2 != 1
        || (v4 = *this, (v4 - 192) <= 0x33)
        && ((1 << (v4 + 64)) & 0xFFC19C001C000) == 0
        && v4 == 192)
      {
        __break(0xC471u);
        JUMPOUT(0x198F116C0);
      }
      return (unsigned __int8 *)(v1 >> 3);
    }
  }
  return this;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding::dump(uint64_t this, WTF::PrintStream *a2)
{
  unsigned int v2;
  unsigned int v4;
  WTF::PrintStream *v5;
  WTF::PrintStream *v6;
  const char *v7;
  WTF::PrintStream *v8;

  v2 = *(unsigned __int16 *)(this + 1) | (*(unsigned __int8 *)(this + 3) << 16);
  switch(*(_WORD *)(this + 1) & 7)
  {
    case 0:
    case 3:
      v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v8, "%s");
      goto LABEL_6;
    case 1:
      v4 = v2 >> 3;
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = v5;
      v7 = "Local(";
      goto LABEL_4;
    case 2:
      v4 = v2 >> 3;
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = v5;
      v7 = "Temp(";
LABEL_4:
      WTF::PrintStream::printf(v5, "%s", v7);
      WTF::PrintStream::printf(v6, "%u", v4);
      WTF::PrintStream::printf(v6, "%s");
LABEL_6:
      this = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      break;
    default:
      return this;
  }
  return this;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::ControlData(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t i;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;
  unint64_t j;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  int v44;
  __int128 v45;
  int8x16_t v46;
  unsigned int v47;
  int ArgumentOrResult;
  uint64_t v49;
  int v50;
  __int128 v51;
  _OWORD v52[2];
  WTF *v53;
  int v54;
  unsigned int v55;
  WTF *v56;
  int v57;
  unsigned int v58;
  uint64_t v59;

  *(_QWORD *)a1 = a4;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  v9 = a1 + 16;
  *(_QWORD *)(a1 + 24) = 2;
  *(_QWORD *)(a1 + 40) = a1 + 56;
  v10 = a1 + 40;
  *(_QWORD *)(a1 + 48) = 2;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 2;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = -1;
  *(_DWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 132) = -16773311;
  *(_DWORD *)(a1 + 136) = a5;
  *(_QWORD *)(a1 + 144) = 0x8000000000000000;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  if (a3 == 5)
  {
LABEL_2:
    if (*(_DWORD *)(a4 + 12))
    {
      v12 = 0;
      v13 = 0;
      v14 = *(_QWORD *)(a2 + 664);
      v15 = *(_QWORD *)(a2 + 648);
      do
      {
        v16 = *(_QWORD *)(*(_QWORD *)a4 + v12);
        if ((v16 + 5) <= 2u)
        {
          if (v14)
          {
            v42 = __clz(__rbit64(v14));
            v14 &= ~(1 << v42);
            v18 = ((v42 << 8) - 0x2000) & 0xFF00 | 3;
          }
          else
          {
            v18 = JSC::Wasm::BBQJITImpl::BBQJIT::canonicalSlot(a2, (int)v13 + *(_DWORD *)(a1 + 136), 2);
          }
        }
        else if (v15)
        {
          v17 = __clz(__rbit64(v15));
          v15 &= ~(1 << v17);
          v18 = (v17 << 8) | 2;
        }
        else
        {
          if (*(_QWORD *)(*(_QWORD *)a4 + v12) - 192 <= 0x33
            && ((1 << (v16 + 64)) & 0xFFC19C001C000) == 0
            && *(_QWORD *)(*(_QWORD *)a4 + v12) == 192)
          {
            __break(0xC471u);
            JUMPOUT(0x198F11CBCLL);
          }
          v18 = JSC::Wasm::BBQJITImpl::BBQJIT::canonicalSlot(a2, (int)v13 + *(_DWORD *)(a1 + 136), 2);
          v15 = 0;
        }
        LODWORD(v52[0]) = v18;
        v19 = *(unsigned int *)(a1 + 52);
        if ((_DWORD)v19 == *(_DWORD *)(a1 + 48))
        {
          WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::BBQJITImpl::BBQJIT::Location>(v10, (unint64_t)v52);
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v19) = v18;
          ++*(_DWORD *)(a1 + 52);
        }
        ++v13;
        v12 += 16;
      }
      while (v13 < *(unsigned int *)(a4 + 12));
    }
    return a1;
  }
  if (a3 != 3)
  {
    v45 = *(_OWORD *)(a2 + 648);
    v51 = *(_OWORD *)(a2 + 664);
    v52[0] = v45;
    if (a6)
    {
      v46 = (int8x16_t)v52[0];
      do
      {
        v46 = vandq_s8(v46, (int8x16_t)vdupq_n_s64(~(a6 & (unint64_t)-a6)));
        a6 &= a6 - 1;
      }
      while (a6);
      v52[0] = v46;
    }
    if (*(_DWORD *)(a4 + 8))
    {
      v47 = 0;
      do
      {
        ArgumentOrResult = JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::allocateArgumentOrResult(a1, a2, *(char *)(*(_QWORD *)a4 + 16 * (v47 + *(_DWORD *)(a4 + 12))), v47, (unint64_t *)v52, (unint64_t *)&v51);
        v50 = ArgumentOrResult;
        v49 = *(unsigned int *)(a1 + 28);
        if ((_DWORD)v49 == *(_DWORD *)(a1 + 24))
        {
          WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::BBQJITImpl::BBQJIT::Location>(v9, (unint64_t)&v50);
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v49) = ArgumentOrResult;
          ++*(_DWORD *)(a1 + 28);
        }
        ++v47;
      }
      while (v47 < *(_DWORD *)(a4 + 8));
    }
    goto LABEL_2;
  }
  v20 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v20 != -1)
  {
    *(_QWORD *)&v52[0] = &v50;
    *(_QWORD *)&v51 = v52;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v51, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, (unsigned __int8 **)a4, 1, (char *)v52);
  if (*(_DWORD *)(a4 + 8))
  {
    v28 = 0;
    for (i = 0; i < *(unsigned int *)(a4 + 8); ++i)
    {
      if (i >= v55)
      {
        __break(0xC471u);
        JUMPOUT(0x198F11CC4);
      }
      v30 = *((unsigned __int8 *)v53 + v28 + 8);
      if (*((_BYTE *)v53 + v28 + 8))
      {
        if (v30 == 3)
        {
          v43 = 5;
LABEL_50:
          v32 = v43 | (8 * *(_QWORD *)((char *)v53 + v28));
          goto LABEL_21;
        }
        if (v30 != 1)
        {
          if (v30 != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x198F11C64);
          }
          v43 = 1;
          goto LABEL_50;
        }
        v31 = 3;
      }
      else
      {
        v31 = 2;
      }
      v32 = v31 & 0xFFFF00FF | (*(_QWORD *)((char *)v53 + v28) << 8);
LABEL_21:
      LODWORD(v51) = v32;
      v33 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v33 == *(_DWORD *)(a1 + 24))
      {
        WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::BBQJITImpl::BBQJIT::Location>(v9, (unint64_t)&v51);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v33) = v32;
        ++*(_DWORD *)(a1 + 28);
      }
      v28 += 24;
    }
  }
  if (*(_DWORD *)(a4 + 12))
  {
    v36 = 0;
    for (j = 0; j < *(unsigned int *)(a4 + 12); ++j)
    {
      if (j >= v58)
      {
        __break(0xC471u);
        JUMPOUT(0x198F11D7CLL);
      }
      v38 = *((unsigned __int8 *)v56 + v36 + 8);
      if (*((_BYTE *)v56 + v36 + 8))
      {
        if (v38 == 3)
        {
          v44 = 5;
LABEL_53:
          v40 = v44 | (8 * *(_QWORD *)((char *)v56 + v36));
          goto LABEL_35;
        }
        if (v38 != 1)
        {
          if (v38 != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x198F11C94);
          }
          v44 = 1;
          goto LABEL_53;
        }
        v39 = 3;
      }
      else
      {
        v39 = 2;
      }
      v40 = v39 & 0xFFFF00FF | (*(_QWORD *)((char *)v56 + v36) << 8);
LABEL_35:
      LODWORD(v51) = v40;
      v41 = *(unsigned int *)(a1 + 52);
      if ((_DWORD)v41 == *(_DWORD *)(a1 + 48))
      {
        WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::BBQJITImpl::BBQJIT::Location>(v10, (unint64_t)&v51);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v41) = v40;
        ++*(_DWORD *)(a1 + 52);
      }
      v36 += 24;
    }
  }
  v34 = v56;
  if (&v59 != (uint64_t *)v56 && v56)
  {
    v56 = 0;
    v57 = 0;
    WTF::fastFree((unint64_t)v34, v21, v22, v23, v24, v25, v26, v27);
  }
  v35 = v53;
  if (v53)
  {
    v53 = 0;
    v54 = 0;
    WTF::fastFree((unint64_t)v35, v21, v22, v23, v24, v25, v26, v27);
  }
  return a1;
}

unint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::addBranch(unint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;

  v13 = a2;
  v14 = a3;
  if (a2 != -1)
  {
    v8 = result;
    result += 64;
    v9 = *(unsigned int *)(v8 + 76);
    if ((_DWORD)v9 == *(_DWORD *)(v8 + 72))
    {
      result = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v9 + 1), (unint64_t)&v13, a4, a5, a6, a7, a8);
      v10 = (_DWORD *)(*(_QWORD *)(v8 + 64) + 12 * *(unsigned int *)(v8 + 76));
      *v10 = *(_DWORD *)result;
      v11 = v10 + 1;
      a3 = *(_QWORD *)(result + 4);
    }
    else
    {
      v12 = (_DWORD *)(*(_QWORD *)result + 12 * v9);
      *v12 = a2;
      v11 = v12 + 1;
    }
    *v11 = a3;
    ++*(_DWORD *)(v8 + 76);
  }
  return result;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::delegateJumpsTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int **v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  _BYTE v45[24];

  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = v45;
  v44 = 2;
  v10 = *(_QWORD *)(a1 + 64);
  if (v10 == a1 + 80)
  {
    v11 = *(unsigned int *)(a1 + 76);
    if (!(_DWORD)v11)
    {
      *(_QWORD *)(a1 + 72) = 2;
      goto LABEL_36;
    }
    v12 = 0;
    do
    {
      v13 = (char *)&v43 + v12;
      v14 = v10 + v12;
      *((_DWORD *)v13 + 4) = *(_DWORD *)(v10 + v12);
      *(_QWORD *)(v13 + 20) = *(_QWORD *)(v10 + v12 + 4);
      v12 += 12;
    }
    while (v14 + 12 != v10 + 12 * v11);
    v10 = (unint64_t)v43;
  }
  else
  {
    *(_QWORD *)(a1 + 64) = a1 + 80;
    v43 = (_BYTE *)v10;
    v11 = *(unsigned int *)(a1 + 76);
    LODWORD(v44) = *(_DWORD *)(a1 + 72);
  }
  HIDWORD(v44) = v11;
  *(_QWORD *)(a1 + 72) = 2;
  if ((_DWORD)v11)
  {
    v15 = *(unsigned int *)(a2 + 72);
    v16 = *(unsigned int *)(a2 + 76);
    v17 = v11 + v16;
    if (v11 + v16 <= v15)
      goto LABEL_27;
    v18 = v15 + (v15 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= v17)
      v19 = v11 + v16;
    v20 = *(_QWORD *)(a2 + 64);
    if (v19 < 3)
    {
      v22 = a2 + 80;
      *(_QWORD *)(a2 + 64) = a2 + 80;
      *(_DWORD *)(a2 + 72) = 2;
      if (!(_DWORD)v16)
        goto LABEL_22;
    }
    else
    {
      if (v19 >= 0x15555556)
        goto LABEL_50;
      v21 = 12 * v19;
      v22 = WTF::fastMalloc((WTF *)(12 * v19));
      *(_DWORD *)(a2 + 72) = (v21 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)(a2 + 64) = v22;
      if (!(_DWORD)v16)
        goto LABEL_22;
    }
    v23 = v20;
    do
    {
      *(_DWORD *)v22 = *(_DWORD *)v23;
      *(_QWORD *)(v22 + 4) = *(_QWORD *)(v23 + 4);
      v23 += 12;
      v22 += 12;
    }
    while (v23 != v20 + 12 * v16);
LABEL_22:
    if (a2 + 80 != v20 && v20)
    {
      if (*(_QWORD *)(a2 + 64) == v20)
      {
        *(_QWORD *)(a2 + 64) = 0;
        *(_DWORD *)(a2 + 72) = 0;
      }
      WTF::fastFree(v20, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
LABEL_27:
    v24 = *(unsigned int *)(a2 + 76);
    if (v17 >= v24)
    {
      v25 = *(_QWORD *)(a2 + 64) + 12 * v24;
      v26 = v10 + 12 * v11;
      do
      {
        *(_DWORD *)v25 = *(_DWORD *)v10;
        *(_QWORD *)(v25 + 4) = *(_QWORD *)(v10 + 4);
        v10 += 12;
        v25 += 12;
      }
      while (v10 != v26);
      *(_DWORD *)(a2 + 76) = v17;
      v10 = (unint64_t)v43;
      goto LABEL_31;
    }
LABEL_50:
    __break(0xC471u);
    JUMPOUT(0x198F12128);
  }
LABEL_31:
  if (v45 != (_BYTE *)v10 && v10 != 0)
  {
    v43 = 0;
    LODWORD(v44) = 0;
    WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_36:
  v28 = *(_QWORD *)(a1 + 104);
  v29 = *(unsigned int *)(a1 + 116);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v30 = (void *)(*(unsigned int *)(a2 + 116) + v29);
  if ((unint64_t)v30 > *(unsigned int *)(a2 + 112))
    WTF::Vector<WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 104, (unint64_t)v30);
  if ((_DWORD)v29)
  {
    v31 = *(_DWORD *)(a2 + 116);
    v32 = 8 * v29;
    v33 = (uint64_t *)v28;
    do
    {
      v34 = *(_QWORD *)(a2 + 104);
      v35 = *v33;
      *v33++ = 0;
      *(_QWORD *)(v34 + 8 * v31++) = v35;
      v32 -= 8;
    }
    while (v32);
    *(_DWORD *)(a2 + 116) = v31;
    v36 = (unsigned int **)v28;
    do
    {
      v37 = *v36;
      *v36 = 0;
      if (v37)
      {
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
        {
          atomic_store(1u, v37);
          WTF::fastFree((unint64_t)v37, v30, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v36;
    }
    while (v36 != (unsigned int **)(v28 + 8 * v29));
  }
  if (v28)
    WTF::fastFree(v28, v30, a3, a4, a5, a6, a7, a8);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::linkJumps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  JSC::AssemblerBuffer *v19;
  JSC::AssemblerBuffer *v20;

  v10 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 12 * v10;
    while (v12 < *(unsigned int *)(a1 + 76))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 64) + v11), a2, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v13 == v11)
        goto LABEL_5;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_5:
    v14 = *(_DWORD *)(a2 + 200);
    if (v14 < *(_DWORD *)(a2 + 52))
    {
      v19 = (JSC::AssemblerBuffer *)(a2 + 56);
      do
      {
        if ((v14 + 4) > *(_DWORD *)(a2 + 192))
        {
          v20 = v19;
          JSC::AssemblerBuffer::outOfLineGrow(v19, a2, a3, a4, a5, a6, a7, a8);
          v19 = v20;
          v14 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = -721215457;
        v14 = *(_DWORD *)(a2 + 200) + 4;
        *(_DWORD *)(a2 + 200) = v14;
      }
      while (v14 < *(_DWORD *)(a2 + 52));
    }
    *(_DWORD *)(a2 + 208) = 0;
    v15 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v15)
    {
      v16 = *(uint64_t **)(a1 + 104);
      v17 = 8 * v15;
      do
      {
        v18 = *v16++;
        *(_DWORD *)(v18 + 4) = v14;
        v17 -= 8;
      }
      while (v17);
    }
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::touch(JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)((char *)this + 144);
  v2 = *((_QWORD *)this + 18);
  v4 = a2;
  if (v2 < 0)
    v5 = 63;
  else
    v5 = *(_QWORD *)(2 * v2);
  if (v5 <= a2)
  {
    WTF::BitVector::resizeOutOfLine((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)((char *)this + 144), a2 + 1, 0);
    v2 = *v3;
  }
  if (v2 >= 0)
    v6 = 2 * v2 + 8;
  else
    v6 = (uint64_t)v3;
  *(_QWORD *)(v6 + ((v4 >> 3) & 0x1FFFFFF8)) |= 1 << v4;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::bind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  int v30;
  _QWORD v31[2];

  v31[0] = a2;
  v31[1] = a3;
  v30 = a4;
  if (a3 == 2)
  {
    v9 = a2;
    if (a2 >= (unint64_t)*(unsigned int *)(a1 + 740))
    {
      v11 = 0;
      goto LABEL_5;
    }
    v10 = *(_QWORD *)(a1 + 728);
  }
  else
  {
    if (a3 != 3)
    {
      if (a3 == 4)
        v11 = a2;
      else
        v11 = 0;
      goto LABEL_5;
    }
    v9 = a2;
    if (a2 >= (unint64_t)*(unsigned int *)(a1 + 692))
    {
      __break(0xC471u);
      goto LABEL_66;
    }
    v10 = *(_QWORD *)(a1 + 680);
  }
  v11 = *(unsigned int *)(v10 + 4 * v9);
LABEL_5:
  if ((v11 & 7) != (a4 & 7))
    goto LABEL_6;
  if ((v11 & 7) != 2)
  {
    switch(v11 & 7)
    {
      case 0:
        return v11;
      case 1:
      case 4:
      case 5:
        if ((unint64_t)(v11 ^ (a4 & 0xFF0000F8 | (BYTE2(a4) << 16) | (BYTE1(a4) << 8))) < 8)
          return v11;
        goto LABEL_6;
      case 3:
        break;
      case 6:
        if ((((_DWORD)v11 << 8) ^ (WORD1(a4) << 24)) >> 24)
          goto LABEL_6;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F125A4);
    }
  }
  if (BYTE1(v11) != BYTE1(a4))
  {
LABEL_6:
    if ((a4 & 6) != 2)
    {
LABEL_23:
      if (a3 == 2)
      {
        v17 = (_QWORD *)(a1 + 728);
        LODWORD(v18) = *(_DWORD *)(a1 + 740);
        if (v18 <= a2)
        {
          v18 = (a2 + 1);
          if (*(_DWORD *)(a1 + 736) < v18)
          {
            v28 = a2;
            v29 = a1;
            v26 = (a2 + 1);
            v27 = (_QWORD *)(a1 + 728);
            WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 728, (void *)v26, a3, a4, a5, a6, a7, a8);
            v18 = v26;
            v17 = v27;
            LODWORD(a2) = v28;
            a1 = v29;
          }
          if (*v17)
          {
            v20 = *(unsigned int *)(a1 + 740);
            if ((_DWORD)v20 != (_DWORD)v18)
            {
              v21 = (_DWORD *)(*v17 + 4 * v20);
              v22 = 4 * v18 - 4 * v20;
              do
              {
                *v21++ &= 0xFFFFFFF8;
                v22 -= 4;
              }
              while (v22);
            }
          }
          *(_DWORD *)(a1 + 740) = v18;
        }
        if (v18 <= a2)
        {
          __break(0xC471u);
          JUMPOUT(0x198F12648);
        }
        goto LABEL_26;
      }
      if (a3 != 3)
        goto LABEL_27;
      if (*(_DWORD *)(a1 + 692) > a2)
      {
        v17 = (_QWORD *)(a1 + 680);
LABEL_26:
        *(_DWORD *)(*v17 + 4 * a2) = a4;
LABEL_27:
        if ((_BYTE)word_1ECF4C700)
          WTF::dataLog<char [17],JSC::Wasm::BBQJITImpl::BBQJIT::Value,char [5],JSC::Wasm::BBQJITImpl::BBQJIT::Location,char [2]>((uint64_t)v31, &v30);
        return a4;
      }
LABEL_67:
      __break(0xC471u);
      JUMPOUT(0x198F12668);
    }
    if ((BYTE1(a3) + 5) > 2u)
    {
      if ((a4 & 7) == 6)
      {
        if ((a4 & 0x400000) == 0)
        {
          v23 = *(_QWORD *)(a1 + 616) & ~(1 << SBYTE2(a4));
          *(_QWORD *)(a1 + 616) = v23;
          v24 = *(_QWORD *)(a1 + 624) & ~(1 << SBYTE2(a4));
          *(_QWORD *)(a1 + 624) = v24;
          if ((a4 & 0x4000) == 0)
          {
            *(_QWORD *)(a1 + 616) = v23 & ~(1 << SBYTE1(a4));
            *(_QWORD *)(a1 + 624) = v24 & ~(1 << SBYTE1(a4));
            if (SBYTE2(a4) >= (unint64_t)*(unsigned int *)(a1 + 340))
            {
              __break(0xC471u);
              JUMPOUT(0x198F12670);
            }
            if (a3 == 3)
              v25 = 256;
            else
              v25 = 512;
            v16 = v25 & 0xFFFFFF00 | ((_DWORD)a2 << 11) | BYTE1(a3);
            *(_DWORD *)(*(_QWORD *)(a1 + 328) + 4 * SBYTE2(a4)) = v16;
            v13 = SBYTE1(a4);
            if (SBYTE1(a4) >= (unint64_t)*(unsigned int *)(a1 + 340))
            {
              __break(0xC471u);
              JUMPOUT(0x198F12678);
            }
            v14 = (_QWORD *)(a1 + 328);
            goto LABEL_22;
          }
        }
      }
      else if ((a4 & 0x4000) == 0)
      {
        *(int8x16_t *)(a1 + 616) = vandq_s8(*(int8x16_t *)(a1 + 616), (int8x16_t)vdupq_n_s64(~(1 << SBYTE1(a4))));
        v13 = SBYTE1(a4);
        if (SBYTE1(a4) >= (unint64_t)*(unsigned int *)(a1 + 340))
        {
          __break(0xC471u);
          JUMPOUT(0x198F12658);
        }
        v14 = (_QWORD *)(a1 + 328);
        goto LABEL_18;
      }
    }
    else
    {
      v12 = (BYTE1(a4) + 32) & 0x7F;
      if (v12 < 0x40)
      {
        *(int8x16_t *)(a1 + 632) = vandq_s8(*(int8x16_t *)(a1 + 632), (int8x16_t)vdupq_n_s64(~(1 << v12)));
        v13 = SBYTE1(a4);
        if (SBYTE1(a4) >= (unint64_t)*(unsigned int *)(a1 + 484))
        {
          __break(0xC471u);
          JUMPOUT(0x198F12650);
        }
        v14 = (_QWORD *)(a1 + 472);
LABEL_18:
        if (a3 == 3)
          v15 = 256;
        else
          v15 = 512;
        v16 = v15 & 0xFFFFFF00 | ((_DWORD)a2 << 11) | BYTE1(a3);
LABEL_22:
        *(_DWORD *)(*v14 + 4 * v13) = v16;
        goto LABEL_23;
      }
    }
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  return v11;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::consume(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v12;

  result = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, a6, a7, a8);
  if (a3 == 2)
  {
    v12 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v12)
      *(_DWORD *)(a1 + 1280) = v12;
    if ((result & 7) != 1 || ((-8 * v12) ^ result) >= 8)
      return JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, result);
  }
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::topValue(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_DWORD *)(v2 + 596);
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x198F127D0);
  }
  v4 = *(_QWORD *)(v2 + 584) + 1232 * v3;
  v5 = *(_DWORD *)(v4 - 32);
  v6 = *(_DWORD *)(v4 - 160);
  v7 = *(_DWORD *)(v2 + 68);
  if ((a2 + 64) <= 0x33 && ((1 << (a2 + 64)) & 0xFFC19C001C000) == 0 && a2 == -64)
  {
    __break(0xC471u);
    JUMPOUT(0x198F127C8);
  }
  v8 = v7 + v5;
  if (v6 == 5)
    return v8 + 1;
  else
    return v8;
}

unint64_t JSC::Wasm::BBQJITImpl::BBQJIT::throwExceptionIf(unint64_t result, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _QWORD *v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a2 >= 0x28)
  {
    __break(1u);
  }
  else
  {
    v19 = v8;
    v20 = v9;
    v10 = *a3;
    v17 = v10;
    v11 = *(_QWORD *)(a3 + 1);
    v18 = v11;
    if (v10 != -1)
    {
      v12 = result + 40 * a2 + 1360;
      v13 = *(unsigned int *)(result + 40 * a2 + 1372);
      if ((_DWORD)v13 == *(_DWORD *)(result + 40 * a2 + 1368))
      {
        result = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (void *)(v13 + 1), (unint64_t)&v17, a4, a5, a6, a7, a8);
        v14 = (_DWORD *)(*(_QWORD *)v12 + 12 * *(unsigned int *)(v12 + 12));
        *v14 = *(_DWORD *)result;
        v15 = v14 + 1;
        v11 = *(_QWORD *)(result + 4);
      }
      else
      {
        v16 = (_DWORD *)(*(_QWORD *)v12 + 12 * v13);
        *v16 = v10;
        v15 = v16 + 1;
      }
      *v15 = v11;
      ++*(_DWORD *)(v12 + 12);
    }
  }
  return result;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitCCall<void (*)(JSC::Wasm::Instance *,unsigned int),8ul>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::Wasm::Type *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t *v18;
  unsigned __int8 *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  unsigned __int8 **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  unsigned int v52;
  WTF *v53;
  WTF *v54;
  unsigned int v55;
  unsigned int v56;
  WTF *v57;
  WTF *v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  char v70[32];
  WTF *v71;
  int v72;
  WTF *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  _BYTE v79[256];
  WTF *v80;
  uint64_t v81;
  _BYTE v82[256];
  uint64_t *v83[2];
  char v84;

  v80 = (WTF *)v82;
  v81 = 16;
  v77 = (WTF *)v79;
  v78 = 16;
  v11 = *(unsigned int *)(a3 + 12);
  if (v11 < 0x11)
  {
    if (!(_DWORD)v11)
      goto LABEL_5;
    goto LABEL_3;
  }
  if (v11 >> 28)
  {
    __break(0xC471u);
    goto LABEL_61;
  }
  LODWORD(v78) = *(_DWORD *)(a3 + 12);
  v77 = (WTF *)WTF::fastMalloc((WTF *)(16 * v11));
  v11 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v11)
  {
LABEL_3:
    v12 = HIDWORD(v78);
    v13 = 16 * v11;
    v14 = (unsigned __int8 *)(*(_QWORD *)a3 + 9);
    do
    {
      v15 = *v14;
      v14 += 16;
      v16 = (_QWORD *)((char *)v77 + 16 * v12);
      *v16 = v15;
      v16[1] = 0;
      v12 = ++HIDWORD(v78);
      v13 -= 16;
    }
    while (v13);
  }
LABEL_5:
  v17 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v17 != -1)
  {
    *(_QWORD *)v70 = &v84;
    v83[0] = (uint64_t *)v70;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, v83, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v18 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v19 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v19))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v19);
LABEL_11:
  v83[0] = (uint64_t *)&v80;
  v83[1] = (uint64_t *)&v77;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v18, v83, (uint64_t)v83, a4, a5, a6, a7, a8, (uint64_t)v70);
  v27 = **(unsigned int ***)v70;
  if (**(_QWORD **)v70)
  {
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  v29 = __ldxr(v19);
  if (v29 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v19))
LABEL_17:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v19, 0, v21, v22, v23, v24, v25, v26);
  v30 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v30 != -1)
  {
    *(_QWORD *)v70 = &v84;
    v83[0] = (uint64_t *)v70;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, v83, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (v27[8])
    v31 = 0;
  else
    v31 = (unsigned __int8 **)(v27 + 2);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v31, 0, v70);
  if ((unint64_t)(v76 + 15) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198F12C64);
  }
  v37 = (v76 + 15) & 0xFFFFFFF0;
  if (*(_DWORD *)(a1 + 1284) > v37)
    v37 = *(_DWORD *)(a1 + 1284);
  *(_DWORD *)(a1 + 1284) = v37;
  v38 = *(unsigned int *)(a1 + 1300);
  if ((_DWORD)v38 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x198F12C6CLL);
  }
  *(_DWORD *)(a1 + 1300) = v38 + 1;
  if (!*(_BYTE *)(a1 + 73) || *(_BYTE *)(a1 + 72))
  {
    v61 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v61 + 212))
    {
      JSC::MacroAssemblerARM64::moveToCachedReg(*(unsigned int **)(a1 + 8), (JSC::ARM64LogicalImmediate *)(v38 + 1), v61 + 264, v32, v33, v34, v35, v36);
      v69 = *(_DWORD *)(v61 + 200);
      if (v69 + 4 > *(_DWORD *)(v61 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v61 + 56), v62, v63, v64, v65, v66, v67, v68);
        v69 = *(_DWORD *)(v61 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v61 + 56) + v69) = -1207811152;
      *(_DWORD *)(v61 + 200) += 4;
      JSC::Wasm::BBQJITImpl::BBQJIT::flushRegistersForException(a1, v62, v63, v64, v65, v66, v67, v68);
      goto LABEL_29;
    }
    __break(0xC471u);
LABEL_61:
    JUMPOUT(0x198F12C4CLL);
  }
LABEL_29:
  JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<8ul>(a1, a3, (uint64_t)v70, (uint64_t)v27, v33, v34, v35, v36);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), a2, 8, v39, v40, v41, v42, v43);
  v51 = *(_DWORD **)(a1 + 8);
  v51[52] = 0;
  v52 = v51[50];
  if (v52 + 4 > v51[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v51 + 14), (uint64_t)v44, v45, v46, v47, v48, v49, v50);
    v52 = v51[50];
  }
  *(_DWORD *)(*((_QWORD *)v51 + 7) + v52) = -700514048;
  v51[50] += 4;
  v53 = v73;
  if (&v75 != (uint64_t *)v73 && v73)
  {
    v73 = 0;
    v74 = 0;
    WTF::fastFree((unint64_t)v53, v44, v45, v46, v47, v48, v49, v50);
  }
  v54 = v71;
  if (v71)
  {
    v71 = 0;
    v72 = 0;
    WTF::fastFree((unint64_t)v54, v44, v45, v46, v47, v48, v49, v50);
  }
  do
  {
    v55 = __ldaxr(v27);
    v56 = v55 - 1;
  }
  while (__stlxr(v56, v27));
  if (!v56)
  {
    atomic_store(1u, v27);
    WTF::fastFree((unint64_t)v27, v44, v45, v46, v47, v48, v49, v50);
  }
  v57 = v77;
  if (v79 != (_BYTE *)v77 && v77 != 0)
  {
    v77 = 0;
    LODWORD(v78) = 0;
    WTF::fastFree((unint64_t)v57, v44, v45, v46, v47, v48, v49, v50);
  }
  v59 = v80;
  if (v82 != (_BYTE *)v80 && v80 != 0)
  {
    v80 = 0;
    LODWORD(v81) = 0;
    WTF::fastFree((unint64_t)v59, v44, v45, v46, v47, v48, v49, v50);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::getLocal(JSC::Wasm::BBQJITImpl::BBQJIT *this, uint64_t a2, JSC::Wasm::BBQJITImpl::BBQJIT::Value *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v11;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  int v30;
  const char *v31;

  v30 = (int)a3;
  v8 = *(_QWORD *)(a2 + 88);
  if (*(_DWORD *)(v8 + 20324) <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198F12E94);
  }
  v9 = *(_DWORD *)(v8 + 596);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198F12E9CLL);
  }
  v11 = a3;
  v14 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 20312) + 16 * a3);
  v15 = *(_QWORD *)(v8 + 584) + 1232 * v9;
  v16 = *(_DWORD *)(v15 - 32);
  v17 = *(_DWORD *)(v15 - 160);
  v18 = *(_DWORD *)(v8 + 68);
  if ((v14 - 192) <= 0x33)
  {
    if (((1 << (v14 + 64)) & 0xFFC19C001C000) != 0)
    {
      LOWORD(v14) = 254;
    }
    else if (v14 == 192)
    {
      goto LABEL_25;
    }
  }
  v19 = v18 + v16;
  if (v17 == 5)
    v20 = v19 + 1;
  else
    v20 = v19;
  *a4 = v20;
  *((_WORD *)a4 + 4) = ((_WORD)v14 << 8) | 2;
  v21 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v20, a4[1], 0, a5, a6, a7, a8);
  v26 = *(_QWORD *)(a2 + 88);
  if (*(_DWORD *)(v26 + 20324) <= v11)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x198F12E6CLL);
  }
  v27 = *(unsigned __int8 *)(*(_QWORD *)(v26 + 20312) + 16 * v11);
  if (v27 - 192 <= 0x33)
  {
    if (((1 << (v27 + 64)) & 0xFFC19C001C000) != 0)
    {
      v27 = 254;
    }
    else if (v27 == 192)
    {
      __break(0xC471u);
      JUMPOUT(0x198F12E8CLL);
    }
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::emitLoad((unsigned int *)a2, v11, ((unint64_t)v27 << 8) | 3, v21, v22, v23, v24, v25);
  if (HIBYTE(word_1ECF4C700))
  {
    v29 = *(_OWORD *)a4;
    v31 = "GetLocal";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a2)
    {
      v28 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v28;
      }
      while (v28 < *(_DWORD *)a2);
    }
    WTF::dataLog<char const*,char [2]>(&v31, " ");
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, &v30, (uint64_t *)&v29);
  }
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitLoad(unsigned int *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  const char *v20;

  v8 = a4;
  v18 = a2;
  v19 = a3;
  v10 = a3 >> 8;
  if ((a4 & 7) == 2)
  {
    if (BYTE1(a4) == 8)
      goto LABEL_4;
  }
  else if ((a4 & 7) == 3 && BYTE1(a4) == 16)
  {
    goto LABEL_4;
  }
  if (HIBYTE(word_1ECF4C700))
  {
    v17 = a4;
    v20 = "Load";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*a1)
    {
      v16 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v16;
      }
      while (v16 < *a1);
    }
    WTF::dataLog<char const*,char [2]>(&v20, " ");
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Location>>((uint64_t)a1, 1, &v18, &v17);
    LOBYTE(v10) = BYTE1(v19);
    a2 = v18;
    a3 = v19;
  }
LABEL_4:
  v11 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  JSC::Wasm::BBQJITImpl::BBQJIT::emitLoad((uint64_t)a1, (char)v10, v11, v8, v12, v13, v14, v15);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::setLocal(_BYTE *a1, uint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  const char *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46[2];
  unsigned int v47;
  const char *v48;
  unint64_t v49;
  const char *v50;

  v46[0] = a4;
  v46[1] = a5;
  v45 = a3;
  v13 = a5;
  if (a5 != 1)
    JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, a4, a5, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a2 + 88);
  if (*(_DWORD *)(v14 + 20324) <= a3)
    goto LABEL_28;
  v15 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 20312) + 16 * a3);
  if (v15 - 192 > 0x33)
    goto LABEL_7;
  if (((1 << (v15 + 64)) & 0xFFC19C001C000) == 0)
  {
    if (v15 != 192)
      goto LABEL_7;
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x198F13284);
  }
  v15 = 254;
LABEL_7:
  v16 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, a3, ((unint64_t)v15 << 8) | 3, a4, a5, a6, a7, a8);
  v22 = v16;
  v48 = (const char *)a4;
  v49 = a5;
  if (v13 == 1)
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::emitStoreConst(a2, (JSC::ARM64LogicalImmediate *)a4, a5, v16, v18, v19, v20, v21);
    result = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, a4, a5, v38, v39, v40, v41, v42);
  }
  else
  {
    if (HIBYTE(word_1ECF4C700))
    {
      v47 = v16;
      v50 = "Store";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v44 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v44;
        }
        while (v44 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v50, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Location>>(a2, 1, (uint64_t *)&v48, (int *)&v47);
      LOBYTE(v23) = BYTE1(v49);
      v25 = v48;
      v24 = v49;
    }
    else
    {
      v23 = a5 >> 8;
      v24 = a5;
      v25 = (const char *)a4;
    }
    v26 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, (uint64_t)v25, v24, v17, v18, v19, v20, v21);
    JSC::Wasm::BBQJITImpl::BBQJIT::emitStore(a2, (char)v23, v26, v22, v27, v28, v29, v30);
    result = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, a4, a5, v31, v32, v33, v34, v35);
    if (v13 == 2)
    {
      v37 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
      if (*(_DWORD *)(a2 + 1280) < v37)
        *(_DWORD *)(a2 + 1280) = v37;
      if ((result & 7) != 1 || ((-8 * v37) ^ result) >= 8)
        result = JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, a4, a5, result);
    }
  }
  if (HIBYTE(word_1ECF4C700))
  {
    v48 = "SetLocal";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a2)
    {
      v43 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v43;
      }
      while (v43 < *(_DWORD *)a2);
    }
    WTF::dataLog<char const*,char [2]>(&v48, " ");
    result = JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a2, 1, &v45, v46);
  }
  *a1 = 0;
  a1[8] = 0;
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned __int8 v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  int v29;
  unint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  _QWORD v37[2];
  int v38;

  v37[0] = a2;
  v37[1] = a3;
  if ((_BYTE)word_1ECF4C700)
    WTF::dataLog<char [19],JSC::Wasm::BBQJITImpl::BBQJIT::Value,char [14],char [2]>((uint64_t)v37);
  if (a3 == 2)
  {
    v11 = a2;
    v12 = (_QWORD *)(a1 + 728);
    v13 = *(unsigned int *)(a1 + 740);
    if (a2 >= v13 || (*(_DWORD *)(*v12 + 4 * a2) & 7) == 0)
    {
      v33 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
      if (*(_DWORD *)(a1 + 1280) < v33)
        *(_DWORD *)(a1 + 1280) = v33;
      JSC::Wasm::BBQJITImpl::BBQJIT::bind(a1, a2, a3, (1 - 8 * v33), a5, a6, a7, a8);
      v13 = *(unsigned int *)(a1 + 740);
    }
    if (a2 >= v13)
    {
      __break(0xC471u);
      JUMPOUT(0x198F13598);
    }
    goto LABEL_7;
  }
  if (a3 != 2)
  {
    if (a3 == 3)
    {
      v11 = a2;
      if (a2 >= (unint64_t)*(unsigned int *)(a1 + 692))
      {
        __break(0xC471u);
        JUMPOUT(0x198F135A8);
      }
      v12 = (_QWORD *)(a1 + 680);
      goto LABEL_7;
    }
    v14 = a2;
    if (a3 == 4)
      goto LABEL_8;
LABEL_42:
    v14 = 0;
    ++*(_DWORD *)(a1 + 1168);
    return v14;
  }
  v11 = a2;
  if (a2 >= (unint64_t)*(unsigned int *)(a1 + 740))
    goto LABEL_42;
  v12 = (_QWORD *)(a1 + 728);
LABEL_7:
  v14 = *(unsigned int *)(*v12 + 4 * v11);
LABEL_8:
  v38 = v14;
  v15 = v14 & 7;
  if (v15 <= 5 && ((1 << v15) & 0x32) != 0)
  {
    if ((_BYTE)word_1ECF4C700)
      WTF::dataLog<char [19],JSC::Wasm::BBQJITImpl::BBQJIT::Value,char [5],JSC::Wasm::BBQJITImpl::BBQJIT::Location,char [2]>((uint64_t)v37, &v38);
    if ((BYTE1(a3) + 2) >= 0xFDu)
    {
      v19 = *(_QWORD *)(a1 + 632);
      if (v19)
        v17 = __clz(__rbit64(v19)) - 32;
      else
        v17 = JSC::Wasm::BBQJITImpl::BBQJIT::evictFPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, (JSC::ARM64LogicalImmediate *)a2, a3, a4, a5, a6, a7, a8);
      v18 = 3;
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 616);
      if (v16)
        v17 = __clz(__rbit64(v16));
      else
        v17 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, (JSC::ARM64LogicalImmediate *)a2, a3, a4, a5, a6, a7, a8);
      v18 = 2;
    }
    v14 = v18 & 0xFFFF00FF | (v17 << 8);
    JSC::Wasm::BBQJITImpl::BBQJIT::emitLoad((unsigned int *)a1, a2, a3, v14, a5, a6, a7, a8);
    v24 = *(_DWORD *)(a1 + 1168);
    *(_DWORD *)(a1 + 1168) = v24 + 1;
    v25 = (uint64_t)(__int16)v14 >> 8;
    if ((BYTE1(a3) + 2) > 0xFCu)
    {
      if (v25 >= *(unsigned int *)(a1 + 1020))
      {
        __break(0xC471u);
        JUMPOUT(0x198F135B0);
      }
      v26 = *(_QWORD *)(a1 + 1008);
      goto LABEL_22;
    }
    if (v25 < *(unsigned int *)(a1 + 860))
    {
      v26 = *(_QWORD *)(a1 + 848);
LABEL_22:
      v27 = (_DWORD *)(v26 + 4 * v25);
      if ((*v27 & 0x80000000) == 0)
        *v27 = v24;
      if (a3 == 3)
      {
        v34 = *(_QWORD *)(a1 + 88);
        v35 = *(_DWORD *)(v34 + 596);
        if (!v35)
        {
          __break(0xC471u);
          JUMPOUT(0x198F135B8);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::touch((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)(*(_QWORD *)(v34 + 584) + 1232 * v35 - 168), a2);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::bind(a1, a2, a3, v14, v20, v21, v22, v23);
      return v14;
    }
LABEL_65:
    __break(0xC471u);
    JUMPOUT(0x198F13590);
  }
  v29 = *(_DWORD *)(a1 + 1168);
  *(_DWORD *)(a1 + 1168) = v29 + 1;
  switch(v15)
  {
    case 2u:
      v30 = SBYTE1(v14);
      if (SBYTE1(v14) >= (unint64_t)*(unsigned int *)(a1 + 860))
      {
        __break(0xC471u);
        JUMPOUT(0x198F135A0);
      }
      v31 = *(_QWORD *)(a1 + 848);
      break;
    case 3u:
      v30 = SBYTE1(v14);
      if (SBYTE1(v14) >= (unint64_t)*(unsigned int *)(a1 + 1020))
      {
        __break(0xC471u);
        JUMPOUT(0x198F13600);
      }
      v31 = *(_QWORD *)(a1 + 1008);
      break;
    case 6u:
      v36 = *(unsigned int *)(a1 + 860);
      if (SBYTE1(v14) >= v36)
        goto LABEL_65;
      v31 = *(_QWORD *)(a1 + 848);
      if ((*(_DWORD *)(v31 + 4 * SBYTE1(v14)) & 0x80000000) == 0)
      {
        *(_DWORD *)(v31 + 4 * SBYTE1(v14)) = v29;
        v36 = *(unsigned int *)(a1 + 860);
      }
      v30 = (uint64_t)((unint64_t)v14 << 40) >> 56;
      if (v30 >= v36)
      {
        __break(0xC471u);
        JUMPOUT(0x198F135F8);
      }
      break;
    default:
      return v14;
  }
  v32 = (_DWORD *)(v31 + 4 * v30);
  if ((*v32 & 0x80000000) == 0)
    *v32 = v29;
  return v14;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (a3 == 2)
  {
    v9 = a2;
    v10 = *(unsigned int *)(a1 + 740);
    if (a2 >= v10 || (*(_DWORD *)(*(_QWORD *)(a1 + 728) + 4 * a2) & 7) == 0)
    {
      v14 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
      if (*(_DWORD *)(a1 + 1280) < v14)
        *(_DWORD *)(a1 + 1280) = v14;
      JSC::Wasm::BBQJITImpl::BBQJIT::bind(a1, a2, a3, (1 - 8 * v14), a5, a6, a7, a8);
      v10 = *(unsigned int *)(a1 + 740);
    }
    if (v9 < v10)
      return *(unsigned int *)(*(_QWORD *)(a1 + 728) + 4 * v9);
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x198F13704);
  }
  switch(a3)
  {
    case 2u:
      v12 = a2;
      if (a2 < (unint64_t)*(unsigned int *)(a1 + 740))
      {
        v13 = *(_QWORD *)(a1 + 728);
        return *(unsigned int *)(v13 + 4 * v12);
      }
      return 0;
    case 3u:
      v12 = a2;
      if (a2 >= (unint64_t)*(unsigned int *)(a1 + 692))
        goto LABEL_20;
      v13 = *(_QWORD *)(a1 + 680);
      return *(unsigned int *)(v13 + 4 * v12);
    case 4u:
      return a2;
    default:
      return 0;
  }
}

unsigned int *JSC::Wasm::BBQJITImpl::BBQJIT::emitWriteBarrier(uint64_t *a1, JSC::ARM64LogicalImmediate *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unint64_t v11;
  unint64_t v12;
  JSC::ARM64LogicalImmediate *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int8x8_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint8x8_t v86;
  __int32 v87;
  uint8x8_t v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  BOOL v96;
  char v97;
  uint64_t v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  uint64_t v101;
  _BYTE *v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  int64_t v105;
  uint64_t v106;
  unsigned int v107;
  char *v108;
  void *v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  int v135;
  unsigned int v136[3];
  unsigned int v137[3];
  void *__dst;
  int v139;
  unsigned int v140;
  unint64_t v141[2];
  __int16 v142;
  __int128 v143;

  v9 = (int)a2;
  v141[0] = 0;
  v141[1] = 0;
  __dst = a1;
  v142 = 0;
  v11 = a1[77];
  if (v11)
    v12 = __clz(__rbit64(v11));
  else
    v12 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, a2, a3, a4, a5, a6, a7, a8);
  LOBYTE(v139) = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::bindGPRToScratch(&__dst, v12);
  v20 = *((_QWORD *)__dst + 77);
  if (v20)
    v21 = __clz(__rbit64(v20));
  else
    v21 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)__dst, v13, v14, v15, v16, v17, v18, v19);
  v29 = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::bindGPRToScratch(&__dst, v21);
  BYTE1(v139) = (_BYTE)v29;
  v30 = (char)v139;
  v31 = v139;
  if ((_BYTE)v142)
    goto LABEL_23;
  LOBYTE(v142) = 1;
  v32 = v139 & 0x7F;
  if ((v139 & 0x7Fu) >= 0x40)
    goto LABEL_113;
  v33 = (int8x16_t *)__dst;
  v34 = 1 << v32;
  if ((*((_QWORD *)__dst + 81) & (1 << v32)) != 0)
  {
    if (*((unsigned int *)__dst + 85) <= (unint64_t)(char)v139)
      goto LABEL_124;
    v8 = *((_QWORD *)__dst + 41) + 4 * (char)v139;
    *((int8x16_t *)__dst + 62) = vandq_s8(*((int8x16_t *)__dst + 62), (int8x16_t)vdupq_n_s64(~v34));
    if ((_BYTE)word_1ECF4C700)
    {
      v143 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v30];
      WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v143, "\n");
    }
    if ((v141[0] & v34) != 0 && (*(_WORD *)(v8 + 1) & 7) != 3)
    {
      v33 = (int8x16_t *)__dst;
    }
    else
    {
      *(_DWORD *)v8 = 0;
      v33 = (int8x16_t *)__dst;
      *((_QWORD *)__dst + 77) |= 1 << v32;
    }
  }
  v32 = BYTE1(v139) & 0x7F;
  if (v32 > 0x3F)
  {
LABEL_113:
    __break(1u);
LABEL_114:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v32 + 56), (uint64_t)v22, v23, v24, v25, v26, v27, v28);
    v38 = *(_DWORD *)(v32 + 200);
    goto LABEL_25;
  }
  v35 = 1 << v32;
  if ((v33[40].i64[1] & (1 << v32)) == 0)
    goto LABEL_23;
  v36 = SBYTE1(v139);
  if (v33[21].u32[1] <= (unint64_t)SBYTE1(v139))
  {
LABEL_124:
    __break(0xC471u);
LABEL_125:
    JUMPOUT(0x198F13F98);
  }
  v37 = v33[20].i64[1] + 4 * SBYTE1(v139);
  v33[62] = vandq_s8(v33[62], (int8x16_t)vdupq_n_s64(~v35));
  if ((_BYTE)word_1ECF4C700)
  {
    v143 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v36];
    WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v143, "\n");
  }
  if ((v141[0] & v35) == 0 || (*(_WORD *)(v37 + 1) & 7) == 3)
  {
    *(_DWORD *)v37 = 0;
    *((_QWORD *)__dst + 77) |= 1 << v32;
  }
LABEL_23:
  if (!HIBYTE(v142))
  {
    HIBYTE(v142) = 1;
    v127 = v141[0];
    if (v141[0])
    {
      v128 = __clz(__rbit64(v141[0]));
      do
      {
        if (v128 > 0x1Fu)
        {
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(&__dst, (char)(v128 - 32));
        }
        else
        {
          v129 = 1 << v128;
          if ((*((_QWORD *)__dst + 81) & (1 << v128)) != 0)
          {
            if (v128 >= *((unsigned int *)__dst + 85))
            {
              __break(0xC471u);
              JUMPOUT(0x198F140A8);
            }
            v130 = *((_QWORD *)__dst + 41);
            *((int8x16_t *)__dst + 62) = vandq_s8(*((int8x16_t *)__dst + 62), (int8x16_t)vdupq_n_s64(~v129));
            if ((_BYTE)word_1ECF4C700)
            {
              v143 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v128];
              WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v143, "\n");
              v127 = v141[0];
            }
            v131 = v130 + 4 * v128;
            if ((v127 & v129) == 0 || (*(_WORD *)(v131 + 1) & 7) == 3)
            {
              *(_DWORD *)v131 = 0;
              *((_QWORD *)__dst + 77) |= v129;
            }
          }
        }
        if (v128 > 0x3E)
          break;
        v127 = v141[0];
        if (!v141[0])
          break;
        v132 = __clz(__rbit64(v141[0] >> ((v128 + 1) & 0x3F))) + (((_BYTE)v128 + 1) & 0x3F);
        v128 = v132 >= 0x40 ? 64 : v132;
      }
      while (v132 < 0x40);
    }
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::flushRegisters((uint64_t)a1, (uint64_t)v22, v23, v24, v25, v26, v27, v28);
  v32 = a1[1];
  LODWORD(v8) = v30 & 0x1F | 0xF8408260;
  v38 = *(_DWORD *)(v32 + 200);
  if (v38 + 4 > *(_DWORD *)(v32 + 192))
    goto LABEL_114;
LABEL_25:
  *(_DWORD *)(*(_QWORD *)(v32 + 56) + v38) = v8;
  *(_DWORD *)(v32 + 200) += 4;
  v32 = v9 | 0x700000000;
  JSC::MacroAssemblerARM64::load8(a1[1], v32, (uint64_t)v29, v24, v25, v26, v27, v28);
  v8 = a1[1];
  if (!*(_BYTE *)(v8 + 212))
  {
    __break(0xC471u);
    goto LABEL_125;
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
  JSC::MacroAssemblerARM64::load32(v8, v31 | 0x2F800000000, *(char *)(v8 + 304), v39, v40, v41, v42, v43);
  JSC::MacroAssemblerARM64::branch32(v8, 8, (uint64_t)v29, 17, v44, v45, v46, v47, (uint64_t)&v143);
  v53 = a1[1];
  if (!*(_BYTE *)(v53 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198F13FB8);
  }
  *(_DWORD *)(*(_QWORD *)(v53 + 296) + 208) &= ~*(_DWORD *)(v53 + 320);
  JSC::MacroAssemblerARM64::load8(v53, v31 | 0x2F300000000, *(char *)(v53 + 304), v48, v49, v50, v51, v52);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v53, 0, 17, v54, v55, v56, v57, (uint64_t)v137, v58);
  v66 = (_DWORD *)a1[1];
  v67 = v66[50];
  if (v67 + 4 > v66[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v66 + 14), v59, v60, v61, v62, v63, v64, v65);
    v67 = v66[50];
  }
  *(_DWORD *)(*((_QWORD *)v66 + 7) + v67) = -721208385;
  v66[50] += 4;
  v68 = a1[1];
  if (!*(_BYTE *)(v68 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198F13FE8);
  }
  *(_DWORD *)(*(_QWORD *)(v68 + 296) + 208) &= ~*(_DWORD *)(v68 + 320);
  JSC::MacroAssemblerARM64::load8(v68, v9 | 0x700000000, *(char *)(v68 + 304), v61, v62, v63, v64, v65);
  JSC::MacroAssemblerARM64::branch32(v68, 8, 17, 0, v69, v70, v71, v72, (uint64_t)v136);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v137, a1[1], v73, v74, v75, v76, v77, v78);
  v29 = (_DWORD *)a1[1];
  __dst = v141;
  v139 = 2;
  if (v9)
  {
    LOWORD(v141[0]) = v9;
    v79 = 1;
    v140 = 1;
    if ((_DWORD)v31 == 1)
      goto LABEL_36;
  }
  else
  {
    if ((_DWORD)v31 == 1)
      goto LABEL_91;
    v79 = 0;
  }
  *((_WORD *)v141 + v79++) = v31 | 0x100;
  v140 = v79;
LABEL_36:
  v9 = (_DWORD)v29 + 56;
  v31 = 1;
  do
  {
    v80 = 0;
    v81 = 0;
    v82 = (char *)__dst;
    v83 = v79;
    do
    {
      if ((*((_BYTE *)__dst + v80 + 1) & 0x40) != 0)
        goto LABEL_113;
      v81 |= 1 << *((_BYTE *)__dst + v80 + 1);
      v80 += 2;
    }
    while (2 * v79 != v80);
    v84 = 0;
    do
    {
      v85 = *((_BYTE *)__dst + v84) & 0x7F;
      if (v85 >= 0x40)
        goto LABEL_113;
      v81 &= ~(1 << v85);
      v84 += 2;
    }
    while (2 * v79 != v84);
    v86 = (uint8x8_t)vcnt_s8((int8x8_t)v81);
    v86.i16[0] = vaddlv_u8(v86);
    v87 = v86.i32[0];
    v88 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v81));
    v88.i16[0] = vaddlv_u8(v88);
    if (v88.i32[0] + v87)
    {
      v32 = 0;
      if (v79 <= 1)
        v89 = 1;
      else
        v89 = v79;
      v90 = 2 * v89;
      while (1)
      {
        v91 = *((unsigned __int8 *)__dst + v32 + 1);
        if ((v91 & 0x7Fu) >= 0x40)
          goto LABEL_113;
        if (((v81 >> (v91 & 0x7F)) & 1) != 0)
          break;
        v32 += 2;
        if (v90 == v32)
          goto LABEL_87;
      }
      v92 = *((unsigned __int8 *)__dst + v32);
      if (v92 == v91)
        goto LABEL_85;
      v93 = (char)v92;
      if ((char)v92 == 63)
      {
        v94 = v29[50];
        v95 = v29[48];
        if (v91 != 31)
        {
          LODWORD(v8) = v91 & 0x1F | 0xD2800000;
          goto LABEL_82;
        }
      }
      else
      {
        v94 = v29[50];
        v95 = v29[48];
        v96 = (char)v91 == 31 || v93 == 31;
        if (!v96)
        {
          LODWORD(v8) = v91 & 0xFFE0FFFF | ((v93 & 0x1F) << 16) | 0xAA0003E0;
LABEL_82:
          if (v94 + 4 > v95)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v29 + 14), (uint64_t)v22, v23, v24, v25, v26, v27, v28);
            v94 = v29[50];
          }
          *(_DWORD *)(*((_QWORD *)v29 + 7) + v94) = v8;
          v29[50] += 4;
          v82 = (char *)__dst;
          v83 = v140;
LABEL_85:
          memmove(&v82[v32], &v82[v32 + 2], 2 * v83 - v32 - 2);
          v79 = v140 - 1;
          goto LABEL_86;
        }
      }
      LODWORD(v8) = (char)v91 | (32 * v93) | 0x91000000;
      goto LABEL_82;
    }
    v97 = *(_BYTE *)__dst;
    v32 = *((char *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)v29, *(char *)__dst, v32, v24, v25, v26, v27, v28);
    memmove(__dst, (char *)__dst + 2, 2 * v140 - 2);
    v98 = v140 - 1;
    v96 = v140 == 1;
    v140 = v98;
    v99 = (unsigned __int8 *)__dst;
    v100 = (unsigned __int8 *)__dst + 2 * v98;
    if (v96)
    {
      v106 = 0;
      v107 = 0;
      LODWORD(v8) = 0;
      v22 = (char *)__dst + 2 * v98;
    }
    else
    {
      v101 = 2 * v98;
      v102 = __dst;
      while (*v102 != v32)
      {
        v102 += 2;
        v101 -= 2;
        if (!v101)
          goto LABEL_65;
      }
      *v102 = v97;
LABEL_65:
      LODWORD(v8) = 0;
      v103 = v99;
      v22 = (char *)v100;
      v32 = (uint64_t)v100;
      do
      {
        if (*v99 == v99[1])
        {
          v104 = v99;
          if ((void *)v32 != (char *)__dst + 2 * v140)
          {
            v135 = v8;
            v133 = v100;
            v134 = v99;
            if (v99 == (unsigned __int8 *)v22)
            {
              v104 = (unsigned __int8 *)v32;
            }
            else
            {
              v105 = v103 - (unsigned __int8 *)v22;
              memmove((void *)v32, v22, v103 - (unsigned __int8 *)v22);
              v104 = (unsigned __int8 *)(v32 + v105);
            }
            v100 = v133;
            v99 = v134;
            LODWORD(v8) = v135;
          }
          v22 = (char *)(v99 + 2);
          LODWORD(v8) = v8 + 1;
          v32 = (uint64_t)v104;
        }
        v99 += 2;
        v103 += 2;
      }
      while (v99 < v100);
      v99 = (unsigned __int8 *)__dst;
      v106 = v140;
      v107 = v140;
      v100 = (unsigned __int8 *)v32;
    }
    v108 = (char *)&v99[2 * v106];
    if (v22 != v108)
    {
      memmove(v100, v22, v108 - v22);
      v107 = v140;
    }
    v79 = v107 - v8;
LABEL_86:
    v140 = v79;
LABEL_87:
    ;
  }
  while (v79);
  v109 = __dst;
  if (v141 != __dst && __dst)
  {
    __dst = 0;
    v139 = 0;
    WTF::fastFree((unint64_t)v109, v22, v23, v24, v25, v26, v27, v28);
  }
LABEL_91:
  v110 = a1[1];
  if (!*(_BYTE *)(v110 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198F14008);
  }
  *(_DWORD *)(*(_QWORD *)(v110 + 264) + 208) &= ~*(_DWORD *)(v110 + 288);
  v111 = *(_BYTE *)(v110 + 272);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v110, (uint64_t)operationWasmWriteBarrierSlowPath, v111, v24, v25, v26, v27, v28);
  *(_DWORD *)(v110 + 208) = 0;
  v119 = *(_DWORD *)(v110 + 200);
  if (v119 + 4 > *(_DWORD *)(v110 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v110 + 56), v112, v113, v114, v115, v116, v117, v118);
    v119 = *(_DWORD *)(v110 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v110 + 56) + v119) = (32 * (v111 & 0x1F)) | 0xD63F0000;
  *(_DWORD *)(v110 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v143, a1[1], v113, v114, v115, v116, v117, v118);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v136, a1[1], v120, v121, v122, v123, v124, v125);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::flushRegisters(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t i;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t j;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v8 = this;
  v9 = *(unsigned int *)(this + 340);
  if ((_DWORD)v9)
  {
    v10 = *(unsigned __int8 **)(this + 328);
    for (i = 4 * v9; i; i -= 4)
    {
      v12 = *(_WORD *)(v10 + 1) & 7;
      if (v12)
      {
        if (v12 == 2)
        {
          v13 = *v10;
          if ((unint64_t)(v13 - 192) <= 0x33)
          {
            if (((1 << (v13 + 64)) & 0xFFC19C001C000) == 0)
            {
              v14 = 2;
              if (v13 == 192)
              {
                __break(0xC471u);
                JUMPOUT(0x198F142E4);
              }
              goto LABEL_19;
            }
            v13 = 254;
          }
          v14 = 2;
LABEL_19:
          this = JSC::Wasm::BBQJITImpl::BBQJIT::flushValue(v8, (JSC::ARM64LogicalImmediate *)((*(unsigned __int16 *)(v10 + 1) | (v10[3] << 16)) >> 3), v14 | (v13 << 8), a4, a5, a6, a7, a8);
          goto LABEL_4;
        }
        if (v12 != 3)
        {
          if (v12 != 1)
          {
LABEL_37:
            __break(0xC471u);
            JUMPOUT(0x198F142A4);
          }
          v13 = *v10;
          if ((unint64_t)(v13 - 192) <= 0x33)
          {
            if (((1 << (v13 + 64)) & 0xFFC19C001C000) == 0)
            {
              v14 = 3;
              if (v13 == 192)
              {
                __break(0xC471u);
                JUMPOUT(0x198F14324);
              }
              goto LABEL_19;
            }
            v13 = 254;
          }
          v14 = 3;
          goto LABEL_19;
        }
      }
LABEL_4:
      v10 += 4;
    }
  }
  v15 = *(unsigned int *)(v8 + 484);
  if ((_DWORD)v15)
  {
    v16 = *(unsigned __int8 **)(v8 + 472);
    for (j = 4 * v15; j; j -= 4)
    {
      v18 = *(_WORD *)(v16 + 1) & 7;
      if (v18)
      {
        if (v18 == 2)
        {
          v19 = *v16;
          if ((unint64_t)(v19 - 192) <= 0x33)
          {
            if (((1 << (v19 + 64)) & 0xFFC19C001C000) == 0)
            {
              v20 = 2;
              if (v19 == 192)
              {
                __break(0xC471u);
                JUMPOUT(0x198F14304);
              }
              goto LABEL_40;
            }
            v19 = 254;
          }
          v20 = 2;
LABEL_40:
          this = JSC::Wasm::BBQJITImpl::BBQJIT::flushValue(v8, (JSC::ARM64LogicalImmediate *)((*(unsigned __int16 *)(v16 + 1) | (v16[3] << 16)) >> 3), v20 | (v19 << 8), a4, a5, a6, a7, a8);
          goto LABEL_25;
        }
        if (v18 != 3)
        {
          if (v18 != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198F142C4);
          }
          v19 = *v16;
          if ((unint64_t)(v19 - 192) <= 0x33)
          {
            if (((1 << (v19 + 64)) & 0xFFC19C001C000) == 0)
            {
              v20 = 3;
              if (v19 == 192)
                goto LABEL_37;
              goto LABEL_40;
            }
            v19 = 254;
          }
          v20 = 3;
          goto LABEL_40;
        }
      }
LABEL_25:
      v16 += 4;
    }
  }
  return this;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitCCall<unsigned long long (*)(JSC::Wasm::Instance *,unsigned int,unsigned int,unsigned int),8ul>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const JSC::Wasm::Type *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  unsigned __int8 *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  unsigned __int8 **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  unsigned int v54;
  uint64_t v55;
  _DWORD **v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  WTF *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  char v82[32];
  WTF *v83;
  int v84;
  WTF *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  int v90;
  uint64_t v91;
  uint64_t *v92[2];
  char v93;
  __int128 v94;
  _QWORD v95[33];

  v95[32] = *MEMORY[0x1E0C80C00];
  LOBYTE(v94) = *(_BYTE *)(a4 + 9);
  *((_QWORD *)&v94 + 1) = 0;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v89, &v94, 1uLL);
  *(_QWORD *)&v94 = v95;
  *((_QWORD *)&v94 + 1) = 16;
  v13 = *(unsigned int *)(a3 + 12);
  if (v13 < 0x11)
  {
    if (!(_DWORD)v13)
      goto LABEL_5;
    goto LABEL_3;
  }
  if (v13 >> 28)
  {
    __break(0xC471u);
    goto LABEL_74;
  }
  v72 = WTF::fastMalloc((WTF *)(16 * v13));
  DWORD2(v94) = v13;
  *(_QWORD *)&v94 = v72;
  v13 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v13)
  {
LABEL_3:
    v14 = HIDWORD(v94);
    v15 = 16 * v13;
    v16 = (unsigned __int8 *)(*(_QWORD *)a3 + 9);
    do
    {
      v17 = *v16;
      v16 += 16;
      v18 = (_QWORD *)(v94 + 16 * v14);
      *v18 = v17;
      v18[1] = 0;
      v14 = ++HIDWORD(v94);
      v15 -= 16;
    }
    while (v15);
  }
LABEL_5:
  v19 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v19 != -1)
  {
    *(_QWORD *)v82 = &v93;
    v92[0] = (uint64_t *)v82;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v20 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v21 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v21))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v21);
LABEL_11:
  v92[0] = (uint64_t *)&v89;
  v92[1] = (uint64_t *)&v94;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v20, v92, (uint64_t)v92, v8, v9, v10, v11, v12, (uint64_t)v82);
  v29 = **(unsigned int ***)v82;
  if (**(_QWORD **)v82)
  {
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 + 1, v29));
  }
  v31 = __ldxr(v21);
  if (v31 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v21))
LABEL_17:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, v23, v24, v25, v26, v27, v28);
  v32 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v32 != -1)
  {
    *(_QWORD *)v82 = &v93;
    v92[0] = (uint64_t *)v82;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (v29[8])
    v33 = 0;
  else
    v33 = (unsigned __int8 **)(v29 + 2);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v33, 0, v82);
  if ((unint64_t)(v88 + 15) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198F1483CLL);
  }
  v39 = (v88 + 15) & 0xFFFFFFF0;
  if (*(_DWORD *)(a1 + 1284) > v39)
    v39 = *(_DWORD *)(a1 + 1284);
  *(_DWORD *)(a1 + 1284) = v39;
  v40 = *(unsigned int *)(a1 + 1300);
  if ((_DWORD)v40 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x198F14844);
  }
  *(_DWORD *)(a1 + 1300) = v40 + 1;
  if (!*(_BYTE *)(a1 + 73) || *(_BYTE *)(a1 + 72))
  {
    v73 = *(_QWORD *)(a1 + 8);
    if (!*(_BYTE *)(v73 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198F14824);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(*(unsigned int **)(a1 + 8), (JSC::ARM64LogicalImmediate *)(v40 + 1), v73 + 264, v34, v35, v36, v37, v38);
    v81 = *(_DWORD *)(v73 + 200);
    if (v81 + 4 > *(_DWORD *)(v73 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v73 + 56), v74, v75, v76, v77, v78, v79, v80);
      v81 = *(_DWORD *)(v73 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v73 + 56) + v81) = -1207811152;
    *(_DWORD *)(v73 + 200) += 4;
    JSC::Wasm::BBQJITImpl::BBQJIT::flushRegistersForException(a1, v74, v75, v76, v77, v78, v79, v80);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<8ul>(a1, a3, (uint64_t)v82, (uint64_t)v29, v35, v36, v37, v38);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), a2, 8, v41, v42, v43, v44, v45);
  v53 = *(_DWORD **)(a1 + 8);
  v53[52] = 0;
  v54 = v53[50];
  if (v54 + 4 > v53[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 + 14), v46, v47, v48, v49, v50, v51, v52);
    v54 = v53[50];
  }
  v55 = 0;
  *(_DWORD *)(*((_QWORD *)v53 + 7) + v54) = -700514048;
  v53[50] += 4;
  if (*(unsigned __int8 *)(a4 + 9) - 192 <= 0x3F)
  {
    if (((1 << (*(_BYTE *)(a4 + 9) + 64)) & 0xC00FFC19C001C000) != 0)
    {
      if (!*(_DWORD *)(a1 + 340))
      {
        __break(0xC471u);
        JUMPOUT(0x198F1484CLL);
      }
      v56 = (_DWORD **)(a1 + 328);
      v55 = 2;
LABEL_35:
      if ((**v56 & 0x700) == 0x300)
      {
        __break(0xC471u);
        JUMPOUT(0x198F14784);
      }
      goto LABEL_36;
    }
    if (((1 << (*(_BYTE *)(a4 + 9) + 64)) & 0x3800000000000000) != 0)
    {
      if (!*(_DWORD *)(a1 + 484))
      {
        __break(0xC471u);
        JUMPOUT(0x198F14854);
      }
      v56 = (_DWORD **)(a1 + 472);
      v55 = 3;
      goto LABEL_35;
    }
    if (*(unsigned __int8 *)(a4 + 9) != 192)
      goto LABEL_36;
    __break(0xC471u);
LABEL_74:
    JUMPOUT(0x198F14734);
  }
LABEL_36:
  JSC::Wasm::BBQJITImpl::BBQJIT::bind(a1, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), v55, v49, v50, v51, v52);
  v64 = v85;
  if (&v87 != (uint64_t *)v85 && v85)
  {
    v85 = 0;
    v86 = 0;
    WTF::fastFree((unint64_t)v64, v57, v58, v59, v60, v61, v62, v63);
  }
  v65 = v83;
  if (v83)
  {
    v83 = 0;
    v84 = 0;
    WTF::fastFree((unint64_t)v65, v57, v58, v59, v60, v61, v62, v63);
  }
  do
  {
    v66 = __ldaxr(v29);
    v67 = v66 - 1;
  }
  while (__stlxr(v67, v29));
  if (!v67)
  {
    atomic_store(1u, v29);
    WTF::fastFree((unint64_t)v29, v57, v58, v59, v60, v61, v62, v63);
  }
  v68 = v94;
  if (v95 != (_QWORD *)v94 && (_QWORD)v94 != 0)
  {
    *(_QWORD *)&v94 = 0;
    DWORD2(v94) = 0;
    WTF::fastFree(v68, v57, v58, v59, v60, v61, v62, v63);
  }
  v70 = v89;
  if (&v91 != (uint64_t *)v89 && v89 != 0)
  {
    v89 = 0;
    v90 = 0;
    WTF::fastFree((unint64_t)v70, v57, v58, v59, v60, v61, v62, v63);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(uint64_t a1, JSC::ARM64LogicalImmediate *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::ExecutableMemoryHandle *v45;
  unsigned __int8 *v46;
  char v47;

  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(*(unsigned int **)(a1 + 8), (JSC::ARM64LogicalImmediate *)this, 1, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 8);
  v15 = (uint64_t *)JSC::Wasm::thunks;
  v16 = (unsigned __int8 *)(JSC::Wasm::thunks + 8);
  v46 = (unsigned __int8 *)(JSC::Wasm::thunks + 8);
  v47 = 1;
  if (__ldaxr((unsigned __int8 *)(JSC::Wasm::thunks + 8)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v16);
    goto LABEL_4;
  }
  if (__stxr(1u, v16))
    goto LABEL_3;
LABEL_4:
  JSC::Wasm::Thunks::stub(v15, (uint64_t)&v46, (void (*)(uint64_t))JSC::Wasm::throwExceptionFromWasmThunkGenerator, v9, v10, v11, v12, v13, &v44);
  if (!v47)
    goto LABEL_10;
  v24 = v46;
  v25 = __ldxr(v46);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v46))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v24, 0, v18, v19, v20, v21, v22, v23);
LABEL_10:
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(v14, v44, v18, v19, v20, v21, v22, v23);
  v33 = (unsigned int *)v45;
  v45 = 0;
  if (v33)
  {
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v33);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v33, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
  }
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::emitCheckAndPreparePointer(int8x16_t *a1, JSC::ARM64LogicalImmediate *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  _QWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int8x16_t *v59;
  signed __int8 v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  __int128 v64;

  v8 = a5;
  v9 = a4;
  v11 = (uint64_t)a2;
  v12 = (uint64_t)a1;
  v61 = 0;
  v62 = 0;
  v59 = a1;
  v63 = 0;
  v13 = a1[38].u64[1];
  if (v13)
    v14 = __clz(__rbit64(v13));
  else
    v14 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, a2, a3, a4, a5, a6, a7, a8);
  v15 = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(&v59, v14);
  v60 = v15;
  if (a3 == 1)
  {
    LOBYTE(v21) = v15;
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(v12, (JSC::ARM64LogicalImmediate *)v11, a3, ((unint64_t)v15 << 8) | 2, v17, v18, v19, v20);
  }
  else
  {
    v21 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(v12, v11, a3, v16, v17, v18, v19, v20) >> 8;
  }
  v29 = v9 + (unint64_t)v8 - 1;
  if (*(_BYTE *)(v12 + 56) == 1)
  {
    if (v9 < (unint64_t)dword_1ECF4C6F4 << 16)
      goto LABEL_23;
    v36 = *(unsigned int *)(*(_QWORD *)(v12 + 48) + 108);
    if ((_DWORD)v36 == -1)
      v37 = 0xFFFFFFFFLL;
    else
      v37 = v36 << 16;
    JSC::MacroAssemblerARM64::and64(*(_QWORD *)(v12 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v21, 8);
    if (v29)
      JSC::MacroAssemblerARM64::add64(*(_QWORD *)(v12 + 8), v29, 8, 8, v38, v39, v40, v41);
    JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(v12 + 8), 2, 8, v37, v38, v39, v40, v41, (uint64_t)&v55);
    v34 = v55;
    LODWORD(v64) = v55;
    v35 = v56;
  }
  else
  {
    if (*(_BYTE *)(v12 + 56))
      goto LABEL_23;
    JSC::MacroAssemblerARM64::and64(*(_QWORD *)(v12 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v21, 8);
    if (v29)
      JSC::MacroAssemblerARM64::add64(*(_QWORD *)(v12 + 8), v29, 8, 8, v30, v31, v32, v33);
    JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(v12 + 8), 2, 8, 23, v30, v31, v32, v33, (uint64_t)&v57);
    v34 = v57;
    LODWORD(v64) = v57;
    v35 = v58;
  }
  *(_QWORD *)((char *)&v64 + 4) = v35;
  if (v34 != -1)
  {
    v42 = (_QWORD *)(v12 + 1360);
    v43 = *(unsigned int *)(v12 + 1372);
    if ((_DWORD)v43 == *(_DWORD *)(v12 + 1368))
    {
      v44 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, (void *)(v43 + 1), (unint64_t)&v64, v24, v25, v26, v27, v28);
      v45 = (_DWORD *)(*(_QWORD *)(v12 + 1360) + 12 * *(unsigned int *)(v12 + 1372));
      *v45 = *(_DWORD *)v44;
      v46 = v45 + 1;
      v35 = *(_QWORD *)(v44 + 4);
    }
    else
    {
      v47 = (_DWORD *)(*v42 + 12 * v43);
      *v47 = v34;
      v46 = v47 + 1;
    }
    *v46 = v35;
    ++*(_DWORD *)(v12 + 1372);
  }
LABEL_23:
  v48 = *(_DWORD **)(v12 + 8);
  v49 = v48[50];
  if (v49 + 4 > v48[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v48 + 14), v22, v23, v24, v25, v26, v27, v28);
    v49 = v48[50];
  }
  *(_DWORD *)(*((_QWORD *)v48 + 7) + v49) = ((v21 & 0x1F) << 16) | 0x8B2042C8;
  v48[50] += 4;
  v50 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(v12, v11, a3, v24, v25, v26, v27, v28);
  if (a3 == 2)
  {
    v51 = ((*(_DWORD *)(v12 + 1288) + 15) & 0xFFFFFFF0) + 16 * v11 + 16;
    if (*(_DWORD *)(v12 + 1280) < v51)
      *(_DWORD *)(v12 + 1280) = v51;
    if ((v50 & 7) != 1 || ((-8 * v51) ^ v50) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(v12, v11, a3, v50);
  }
  if (!(_BYTE)v63)
  {
    LOBYTE(v63) = 1;
    v52 = v60;
    v53 = v60 & 0x7F;
    if (v53 >= 0x40)
    {
      __break(1u);
    }
    else
    {
      v11 = 1 << v53;
      if ((v59[40].i64[1] & (1 << v53)) == 0)
        goto LABEL_39;
      v52 = v60;
      if (v59[21].u32[1] <= (unint64_t)v60)
      {
        __break(0xC471u);
        JUMPOUT(0x198F14D18);
      }
      v12 = v59[20].i64[1] + 4 * v60;
      v59[62] = vandq_s8(v59[62], (int8x16_t)vdupq_n_s64(~v11));
      if (!(_BYTE)word_1ECF4C700)
        goto LABEL_36;
    }
    v64 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v52];
    WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v64, "\n");
LABEL_36:
    if ((v61 & v11) == 0 || (*(_WORD *)(v12 + 1) & 7) == 3)
    {
      *(_DWORD *)v12 = 0;
      v59[38].i64[1] |= 1 << v53;
    }
  }
LABEL_39:
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindPreserved((uint64_t)&v59);
  return 2050;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::truncationKind(uint64_t a1, char a2)
{
  char v2;
  uint64_t result;

  v2 = a2 + 88;
  if ((a2 + 88) < 0xAu && ((0x3CFu >> v2) & 1) != 0)
    return dword_19919F488[v2];
  result = 1292;
  __break(0xC471u);
  return result;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::getArrayElementType(JSC::Wasm::BBQJITImpl::BBQJIT *this@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const JSC::Wasm::Type *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  JSC::Wasm::TypeDefinition *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  WTF *v18;
  JSC::Wasm::TypeInformation *v19;
  _BOOL4 hasRecursiveReference;
  unint64_t CachedUnrolling;
  const JSC::Wasm::TypeDefinition *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v10 = *((_QWORD *)this + 6);
  if (*(_DWORD *)(v10 + 100) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v10 + 88) + 8 * a2);
    do
      v12 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v12 + 1, (unsigned int *)v11));
    v13 = (JSC::Wasm::TypeDefinition *)v11;
    if (*(_DWORD *)(v11 + 32) == 4)
    {
      v17 = *(unsigned int **)(v11 + 8);
      v18 = *(WTF **)v17;
      v13 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v17 + 8) + 8 * v17[2]);
      v19 = (JSC::Wasm::TypeInformation *)v11;
      hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v13);
      v11 = (unint64_t)v19;
      if (hasRecursiveReference)
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v19, (unint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
        if ((_BYTE)a2)
        {
          v13 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v13 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v13, v18, a3, a4, a5, a6, a7, a8);
          JSC::Wasm::TypeInformation::addCachedUnrolling(v19, v13, v22, v23, v24, v25, v26, v27);
        }
        v11 = (unint64_t)v19;
      }
    }
    if (*((_DWORD *)v13 + 8) == 5)
      v13 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v13 + 1);
    do
    {
      v14 = __ldaxr((unsigned int *)v11);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v11));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v11);
      WTF::fastFree(v11, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
    }
    v16 = *((_QWORD *)v13 + 1);
    *(_OWORD *)a9 = *(_OWORD *)v16;
    *(_QWORD *)(a9 + 16) = *(_QWORD *)(v16 + 16);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitCCall<long long (*)(JSC::Wasm::Instance *,unsigned int,unsigned int),8ul>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const JSC::Wasm::Type *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  unsigned __int8 *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  unsigned __int8 **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  unsigned int v54;
  uint64_t v55;
  _DWORD **v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  WTF *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  char v82[32];
  WTF *v83;
  int v84;
  WTF *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  int v90;
  uint64_t v91;
  uint64_t *v92[2];
  char v93;
  __int128 v94;
  _QWORD v95[33];

  v95[32] = *MEMORY[0x1E0C80C00];
  LOBYTE(v94) = *(_BYTE *)(a4 + 9);
  *((_QWORD *)&v94 + 1) = 0;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v89, &v94, 1uLL);
  *(_QWORD *)&v94 = v95;
  *((_QWORD *)&v94 + 1) = 16;
  v13 = *(unsigned int *)(a3 + 12);
  if (v13 < 0x11)
  {
    if (!(_DWORD)v13)
      goto LABEL_5;
    goto LABEL_3;
  }
  if (v13 >> 28)
  {
    __break(0xC471u);
    goto LABEL_74;
  }
  v72 = WTF::fastMalloc((WTF *)(16 * v13));
  DWORD2(v94) = v13;
  *(_QWORD *)&v94 = v72;
  v13 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v13)
  {
LABEL_3:
    v14 = HIDWORD(v94);
    v15 = 16 * v13;
    v16 = (unsigned __int8 *)(*(_QWORD *)a3 + 9);
    do
    {
      v17 = *v16;
      v16 += 16;
      v18 = (_QWORD *)(v94 + 16 * v14);
      *v18 = v17;
      v18[1] = 0;
      v14 = ++HIDWORD(v94);
      v15 -= 16;
    }
    while (v15);
  }
LABEL_5:
  v19 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v19 != -1)
  {
    *(_QWORD *)v82 = &v93;
    v92[0] = (uint64_t *)v82;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v20 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v21 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v21))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v21);
LABEL_11:
  v92[0] = (uint64_t *)&v89;
  v92[1] = (uint64_t *)&v94;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v20, v92, (uint64_t)v92, v8, v9, v10, v11, v12, (uint64_t)v82);
  v29 = **(unsigned int ***)v82;
  if (**(_QWORD **)v82)
  {
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 + 1, v29));
  }
  v31 = __ldxr(v21);
  if (v31 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v21))
LABEL_17:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, v23, v24, v25, v26, v27, v28);
  v32 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v32 != -1)
  {
    *(_QWORD *)v82 = &v93;
    v92[0] = (uint64_t *)v82;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (v29[8])
    v33 = 0;
  else
    v33 = (unsigned __int8 **)(v29 + 2);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v33, 0, v82);
  if ((unint64_t)(v88 + 15) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198F1581CLL);
  }
  v39 = (v88 + 15) & 0xFFFFFFF0;
  if (*(_DWORD *)(a1 + 1284) > v39)
    v39 = *(_DWORD *)(a1 + 1284);
  *(_DWORD *)(a1 + 1284) = v39;
  v40 = *(unsigned int *)(a1 + 1300);
  if ((_DWORD)v40 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x198F15824);
  }
  *(_DWORD *)(a1 + 1300) = v40 + 1;
  if (!*(_BYTE *)(a1 + 73) || *(_BYTE *)(a1 + 72))
  {
    v73 = *(_QWORD *)(a1 + 8);
    if (!*(_BYTE *)(v73 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198F15804);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(*(unsigned int **)(a1 + 8), (JSC::ARM64LogicalImmediate *)(v40 + 1), v73 + 264, v34, v35, v36, v37, v38);
    v81 = *(_DWORD *)(v73 + 200);
    if (v81 + 4 > *(_DWORD *)(v73 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v73 + 56), v74, v75, v76, v77, v78, v79, v80);
      v81 = *(_DWORD *)(v73 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v73 + 56) + v81) = -1207811152;
    *(_DWORD *)(v73 + 200) += 4;
    JSC::Wasm::BBQJITImpl::BBQJIT::flushRegistersForException(a1, v74, v75, v76, v77, v78, v79, v80);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<8ul>(a1, a3, (uint64_t)v82, (uint64_t)v29, v35, v36, v37, v38);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), a2, 8, v41, v42, v43, v44, v45);
  v53 = *(_DWORD **)(a1 + 8);
  v53[52] = 0;
  v54 = v53[50];
  if (v54 + 4 > v53[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 + 14), v46, v47, v48, v49, v50, v51, v52);
    v54 = v53[50];
  }
  v55 = 0;
  *(_DWORD *)(*((_QWORD *)v53 + 7) + v54) = -700514048;
  v53[50] += 4;
  if (*(unsigned __int8 *)(a4 + 9) - 192 <= 0x3F)
  {
    if (((1 << (*(_BYTE *)(a4 + 9) + 64)) & 0xC00FFC19C001C000) != 0)
    {
      if (!*(_DWORD *)(a1 + 340))
      {
        __break(0xC471u);
        JUMPOUT(0x198F1582CLL);
      }
      v56 = (_DWORD **)(a1 + 328);
      v55 = 2;
LABEL_35:
      if ((**v56 & 0x700) == 0x300)
      {
        __break(0xC471u);
        JUMPOUT(0x198F15764);
      }
      goto LABEL_36;
    }
    if (((1 << (*(_BYTE *)(a4 + 9) + 64)) & 0x3800000000000000) != 0)
    {
      if (!*(_DWORD *)(a1 + 484))
      {
        __break(0xC471u);
        JUMPOUT(0x198F15834);
      }
      v56 = (_DWORD **)(a1 + 472);
      v55 = 3;
      goto LABEL_35;
    }
    if (*(unsigned __int8 *)(a4 + 9) != 192)
      goto LABEL_36;
    __break(0xC471u);
LABEL_74:
    JUMPOUT(0x198F15714);
  }
LABEL_36:
  JSC::Wasm::BBQJITImpl::BBQJIT::bind(a1, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), v55, v49, v50, v51, v52);
  v64 = v85;
  if (&v87 != (uint64_t *)v85 && v85)
  {
    v85 = 0;
    v86 = 0;
    WTF::fastFree((unint64_t)v64, v57, v58, v59, v60, v61, v62, v63);
  }
  v65 = v83;
  if (v83)
  {
    v83 = 0;
    v84 = 0;
    WTF::fastFree((unint64_t)v65, v57, v58, v59, v60, v61, v62, v63);
  }
  do
  {
    v66 = __ldaxr(v29);
    v67 = v66 - 1;
  }
  while (__stlxr(v67, v29));
  if (!v67)
  {
    atomic_store(1u, v29);
    WTF::fastFree((unint64_t)v29, v57, v58, v59, v60, v61, v62, v63);
  }
  v68 = v94;
  if (v95 != (_QWORD *)v94 && (_QWORD)v94 != 0)
  {
    *(_QWORD *)&v94 = 0;
    DWORD2(v94) = 0;
    WTF::fastFree(v68, v57, v58, v59, v60, v61, v62, v63);
  }
  v70 = v89;
  if (&v91 != (uint64_t *)v89 && v89 != 0)
  {
    v89 = 0;
    v90 = 0;
    WTF::fastFree((unint64_t)v70, v57, v58, v59, v60, v61, v62, v63);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::pushArrayNewFromSegment(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, __int16 a6, uint64_t a7, __int16 a8, int a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  const JSC::Wasm::Type *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t *v27;
  unsigned __int8 *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  unsigned __int8 **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  unsigned int v61;
  uint64_t v62;
  _DWORD **v63;
  char *v64;
  const char *v65;
  uint64_t v66;
  WTF *v67;
  WTF *v68;
  unsigned int v69;
  unsigned int v70;
  unint64_t v71;
  WTF *v73;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _DWORD *v84;
  _QWORD *v85;
  _DWORD *v86;
  WTF *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  WTF *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  char v109[32];
  WTF *v110;
  int v111;
  WTF *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  WTF *v116[2];
  uint64_t v117;
  uint64_t *v118[2];
  char v119;
  __int128 v120;
  _QWORD v121[33];

  v121[32] = *MEMORY[0x1E0C80C00];
  v98 = (WTF *)&v100;
  v100 = xmmword_19919F700;
  v101 = a3;
  v102 = 65281;
  v103 = a4;
  v104 = 65281;
  v105 = a5;
  v106 = a6;
  v107 = a7;
  v108 = a8;
  v99 = 0x500000008;
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *(_DWORD *)(v10 + 596);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198F15E94);
  }
  v14 = *(_QWORD *)(v10 + 584) + 1232 * v11;
  LODWORD(v10) = *(_DWORD *)(v10 + 68) + *(_DWORD *)(v14 - 32);
  if (*(_DWORD *)(v14 - 160) == 5)
    v10 = (v10 + 1);
  else
    v10 = v10;
  *(_QWORD *)a10 = v10;
  *(_WORD *)(a10 + 8) = -510;
  LOBYTE(v120) = -2;
  *((_QWORD *)&v120 + 1) = 0;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v116, &v120, 1uLL);
  *(_QWORD *)&v120 = v121;
  *((_QWORD *)&v120 + 1) = 16;
  v20 = HIDWORD(v99);
  if (HIDWORD(v99) >= 0x11)
  {
    if (HIDWORD(v99) >> 28)
    {
      __break(0xC471u);
      goto LABEL_89;
    }
    v88 = WTF::fastMalloc((WTF *)(16 * HIDWORD(v99)));
    DWORD2(v120) = HIDWORD(v99);
    *(_QWORD *)&v120 = v88;
    v20 = HIDWORD(v99);
  }
  else if (!HIDWORD(v99))
  {
    goto LABEL_9;
  }
  v21 = HIDWORD(v120);
  v22 = 16 * v20;
  v23 = (unsigned __int8 *)v98 + 9;
  do
  {
    v24 = *v23;
    v23 += 16;
    v25 = (_QWORD *)(v120 + 16 * v21);
    *v25 = v24;
    v25[1] = 0;
    v21 = ++HIDWORD(v120);
    v22 -= 16;
  }
  while (v22);
LABEL_9:
  v26 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v26 != -1)
  {
    *(_QWORD *)v109 = &v119;
    v118[0] = (uint64_t *)v109;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, v118, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v27 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v28 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v28))
  {
    goto LABEL_15;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v28);
LABEL_15:
  v118[0] = (uint64_t *)v116;
  v118[1] = (uint64_t *)&v120;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v27, v118, (uint64_t)v118, v15, v16, v17, v18, v19, (uint64_t)v109);
  v36 = **(unsigned int ***)v109;
  if (**(_QWORD **)v109)
  {
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = __ldxr(v28);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_21;
  }
  if (__stlxr(0, v28))
LABEL_21:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v28, 0, v30, v31, v32, v33, v34, v35);
  v39 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v39 != -1)
  {
    *(_QWORD *)v109 = &v119;
    v118[0] = (uint64_t *)v109;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, v118, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (v36[8])
    v40 = 0;
  else
    v40 = (unsigned __int8 **)(v36 + 2);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v40, 0, v109);
  if ((unint64_t)(v115 + 15) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198F15E9CLL);
  }
  v46 = (v115 + 15) & 0xFFFFFFF0;
  if (*(_DWORD *)(a1 + 1284) > v46)
    v46 = *(_DWORD *)(a1 + 1284);
  *(_DWORD *)(a1 + 1284) = v46;
  v47 = *(unsigned int *)(a1 + 1300);
  if ((_DWORD)v47 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x198F15EA4);
  }
  *(_DWORD *)(a1 + 1300) = v47 + 1;
  if (!*(_BYTE *)(a1 + 73) || *(_BYTE *)(a1 + 72))
  {
    v89 = *(_QWORD *)(a1 + 8);
    if (!*(_BYTE *)(v89 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198F15E7CLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(*(unsigned int **)(a1 + 8), (JSC::ARM64LogicalImmediate *)(v47 + 1), v89 + 264, v41, v42, v43, v44, v45);
    v97 = *(_DWORD *)(v89 + 200);
    if (v97 + 4 > *(_DWORD *)(v89 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v89 + 56), v90, v91, v92, v93, v94, v95, v96);
      v97 = *(_DWORD *)(v89 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v89 + 56) + v97) = -1207811152;
    *(_DWORD *)(v89 + 200) += 4;
    JSC::Wasm::BBQJITImpl::BBQJIT::flushRegistersForException(a1, v90, v91, v92, v93, v94, v95, v96);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<8ul>(a1, (uint64_t)&v98, (uint64_t)v109, (uint64_t)v36, v42, v43, v44, v45);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), a2, 8, v48, v49, v50, v51, v52);
  v60 = *(_DWORD **)(a1 + 8);
  v60[52] = 0;
  v61 = v60[50];
  if (v61 + 4 > v60[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v60 + 14), v53, v54, v55, v56, v57, v58, v59);
    v61 = v60[50];
  }
  v62 = 0;
  *(_DWORD *)(*((_QWORD *)v60 + 7) + v61) = -700514048;
  v60[50] += 4;
  if (*(unsigned __int8 *)(a10 + 9) - 192 > 0x3F)
    goto LABEL_40;
  if (((1 << (*(_BYTE *)(a10 + 9) + 64)) & 0xC00FFC19C001C000) != 0)
  {
    if (!*(_DWORD *)(a1 + 340))
    {
      __break(0xC471u);
      JUMPOUT(0x198F15EACLL);
    }
    v63 = (_DWORD **)(a1 + 328);
    v62 = 2;
    goto LABEL_39;
  }
  if (((1 << (*(_BYTE *)(a10 + 9) + 64)) & 0x3800000000000000) == 0)
  {
    if (*(unsigned __int8 *)(a10 + 9) != 192)
      goto LABEL_40;
    __break(0xC471u);
LABEL_89:
    JUMPOUT(0x198F15D78);
  }
  if (!*(_DWORD *)(a1 + 484))
  {
    __break(0xC471u);
    JUMPOUT(0x198F15EB4);
  }
  v63 = (_DWORD **)(a1 + 472);
  v62 = 3;
LABEL_39:
  if ((**v63 & 0x700) == 0x300)
  {
    v64 = "/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/wasm/WasmBBQJIT64.h";
    v65 = "void JSC::Wasm::BBQJITImpl::BBQJIT::emitCCall(Func, const Vector<Value, N> &, Value &) [Func = long long (*)(J"
          "SC::Wasm::Instance *, unsigned int, unsigned int, unsigned int, unsigned int), N = 8UL]";
    v66 = 323;
    __break(0xC471u);
    goto LABEL_72;
  }
LABEL_40:
  JSC::Wasm::BBQJITImpl::BBQJIT::bind(a1, *(_QWORD *)a10, *(_QWORD *)(a10 + 8), v62, v56, v57, v58, v59);
  v67 = v112;
  if (&v114 != (uint64_t *)v112 && v112)
  {
    v112 = 0;
    v113 = 0;
    WTF::fastFree((unint64_t)v67, v64, (uint64_t)v65, v66, v56, v57, v58, v59);
  }
  v68 = v110;
  if (v110)
  {
    v110 = 0;
    v111 = 0;
    WTF::fastFree((unint64_t)v68, v64, (uint64_t)v65, v66, v56, v57, v58, v59);
  }
  LODWORD(v60) = a9;
  do
  {
    v69 = __ldaxr(v36);
    v70 = v69 - 1;
  }
  while (__stlxr(v70, v36));
  if (!v70)
    goto LABEL_73;
  while (1)
  {
    v71 = v120;
    if (v121 != (_QWORD *)v120 && (_QWORD)v120 != 0)
    {
      *(_QWORD *)&v120 = 0;
      DWORD2(v120) = 0;
      WTF::fastFree(v71, v64, (uint64_t)v65, v66, v56, v57, v58, v59);
    }
    v73 = v116[0];
    if (&v117 != (uint64_t *)v116[0] && v116[0] != 0)
    {
      memset(v116, 0, 12);
      WTF::fastFree((unint64_t)v73, v64, (uint64_t)v65, v66, v56, v57, v58, v59);
    }
    v75 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, *(_QWORD *)a10, *(_QWORD *)(a10 + 8), 0, v56, v57, v58, v59);
    JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 0, (v75 >> 8), 2, v76, v77, v78, v79, (uint64_t)&v120);
    if (v60 < 0x28)
      break;
LABEL_72:
    __break(1u);
LABEL_73:
    atomic_store(1u, v36);
    WTF::fastFree((unint64_t)v36, v64, (uint64_t)v65, v66, v56, v57, v58, v59);
  }
  LODWORD(v116[0]) = v120;
  v80 = *(_QWORD *)((char *)&v120 + 4);
  *(WTF **)((char *)v116 + 4) = *(WTF **)((char *)&v120 + 4);
  if ((_DWORD)v120 != -1)
  {
    v81 = a1 + 40 * v60 + 1360;
    v82 = *(unsigned int *)(v81 + 12);
    if ((_DWORD)v82 == *(_DWORD *)(v81 + 8))
    {
      v83 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v81, (void *)(v82 + 1), (unint64_t)v116, v66, v56, v57, v58, v59);
      v84 = (_DWORD *)(*(_QWORD *)v81 + 12 * *(unsigned int *)(v81 + 12));
      *v84 = *(_DWORD *)v83;
      v85 = v84 + 1;
      v80 = *(_QWORD *)(v83 + 4);
    }
    else
    {
      v86 = (_DWORD *)(*(_QWORD *)v81 + 12 * v82);
      *v86 = v120;
      v85 = v86 + 1;
    }
    *v85 = v80;
    ++*(_DWORD *)(v81 + 12);
  }
  v87 = v98;
  if (&v100 != (__int128 *)v98)
  {
    if (v98)
    {
      v98 = 0;
      LODWORD(v99) = 0;
      WTF::fastFree((unint64_t)v87, v64, (uint64_t)v65, v66, v56, v57, v58, v59);
    }
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitCCall<unsigned long long (*)(JSC::Wasm::Instance *,long long,unsigned int,unsigned int,unsigned int,unsigned int),8ul>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const JSC::Wasm::Type *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  unsigned __int8 *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  unsigned __int8 **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  unsigned int v54;
  uint64_t v55;
  _DWORD **v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  WTF *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  char v82[32];
  WTF *v83;
  int v84;
  WTF *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  int v90;
  uint64_t v91;
  uint64_t *v92[2];
  char v93;
  __int128 v94;
  _QWORD v95[33];

  v95[32] = *MEMORY[0x1E0C80C00];
  LOBYTE(v94) = *(_BYTE *)(a4 + 9);
  *((_QWORD *)&v94 + 1) = 0;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v89, &v94, 1uLL);
  *(_QWORD *)&v94 = v95;
  *((_QWORD *)&v94 + 1) = 16;
  v13 = *(unsigned int *)(a3 + 12);
  if (v13 < 0x11)
  {
    if (!(_DWORD)v13)
      goto LABEL_5;
    goto LABEL_3;
  }
  if (v13 >> 28)
  {
    __break(0xC471u);
    goto LABEL_74;
  }
  v72 = WTF::fastMalloc((WTF *)(16 * v13));
  DWORD2(v94) = v13;
  *(_QWORD *)&v94 = v72;
  v13 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v13)
  {
LABEL_3:
    v14 = HIDWORD(v94);
    v15 = 16 * v13;
    v16 = (unsigned __int8 *)(*(_QWORD *)a3 + 9);
    do
    {
      v17 = *v16;
      v16 += 16;
      v18 = (_QWORD *)(v94 + 16 * v14);
      *v18 = v17;
      v18[1] = 0;
      v14 = ++HIDWORD(v94);
      v15 -= 16;
    }
    while (v15);
  }
LABEL_5:
  v19 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v19 != -1)
  {
    *(_QWORD *)v82 = &v93;
    v92[0] = (uint64_t *)v82;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v20 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v21 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v21))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v21);
LABEL_11:
  v92[0] = (uint64_t *)&v89;
  v92[1] = (uint64_t *)&v94;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v20, v92, (uint64_t)v92, v8, v9, v10, v11, v12, (uint64_t)v82);
  v29 = **(unsigned int ***)v82;
  if (**(_QWORD **)v82)
  {
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 + 1, v29));
  }
  v31 = __ldxr(v21);
  if (v31 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v21))
LABEL_17:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, v23, v24, v25, v26, v27, v28);
  v32 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v32 != -1)
  {
    *(_QWORD *)v82 = &v93;
    v92[0] = (uint64_t *)v82;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (v29[8])
    v33 = 0;
  else
    v33 = (unsigned __int8 **)(v29 + 2);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v33, 0, v82);
  if ((unint64_t)(v88 + 15) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198F163B4);
  }
  v39 = (v88 + 15) & 0xFFFFFFF0;
  if (*(_DWORD *)(a1 + 1284) > v39)
    v39 = *(_DWORD *)(a1 + 1284);
  *(_DWORD *)(a1 + 1284) = v39;
  v40 = *(unsigned int *)(a1 + 1300);
  if ((_DWORD)v40 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x198F163BCLL);
  }
  *(_DWORD *)(a1 + 1300) = v40 + 1;
  if (!*(_BYTE *)(a1 + 73) || *(_BYTE *)(a1 + 72))
  {
    v73 = *(_QWORD *)(a1 + 8);
    if (!*(_BYTE *)(v73 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198F1639CLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(*(unsigned int **)(a1 + 8), (JSC::ARM64LogicalImmediate *)(v40 + 1), v73 + 264, v34, v35, v36, v37, v38);
    v81 = *(_DWORD *)(v73 + 200);
    if (v81 + 4 > *(_DWORD *)(v73 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v73 + 56), v74, v75, v76, v77, v78, v79, v80);
      v81 = *(_DWORD *)(v73 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v73 + 56) + v81) = -1207811152;
    *(_DWORD *)(v73 + 200) += 4;
    JSC::Wasm::BBQJITImpl::BBQJIT::flushRegistersForException(a1, v74, v75, v76, v77, v78, v79, v80);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<8ul>(a1, a3, (uint64_t)v82, (uint64_t)v29, v35, v36, v37, v38);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), a2, 8, v41, v42, v43, v44, v45);
  v53 = *(_DWORD **)(a1 + 8);
  v53[52] = 0;
  v54 = v53[50];
  if (v54 + 4 > v53[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 + 14), v46, v47, v48, v49, v50, v51, v52);
    v54 = v53[50];
  }
  v55 = 0;
  *(_DWORD *)(*((_QWORD *)v53 + 7) + v54) = -700514048;
  v53[50] += 4;
  if (*(unsigned __int8 *)(a4 + 9) - 192 <= 0x3F)
  {
    if (((1 << (*(_BYTE *)(a4 + 9) + 64)) & 0xC00FFC19C001C000) != 0)
    {
      if (!*(_DWORD *)(a1 + 340))
      {
        __break(0xC471u);
        JUMPOUT(0x198F163C4);
      }
      v56 = (_DWORD **)(a1 + 328);
      v55 = 2;
LABEL_35:
      if ((**v56 & 0x700) == 0x300)
      {
        __break(0xC471u);
        JUMPOUT(0x198F162FCLL);
      }
      goto LABEL_36;
    }
    if (((1 << (*(_BYTE *)(a4 + 9) + 64)) & 0x3800000000000000) != 0)
    {
      if (!*(_DWORD *)(a1 + 484))
      {
        __break(0xC471u);
        JUMPOUT(0x198F163CCLL);
      }
      v56 = (_DWORD **)(a1 + 472);
      v55 = 3;
      goto LABEL_35;
    }
    if (*(unsigned __int8 *)(a4 + 9) != 192)
      goto LABEL_36;
    __break(0xC471u);
LABEL_74:
    JUMPOUT(0x198F162ACLL);
  }
LABEL_36:
  JSC::Wasm::BBQJITImpl::BBQJIT::bind(a1, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), v55, v49, v50, v51, v52);
  v64 = v85;
  if (&v87 != (uint64_t *)v85 && v85)
  {
    v85 = 0;
    v86 = 0;
    WTF::fastFree((unint64_t)v64, v57, v58, v59, v60, v61, v62, v63);
  }
  v65 = v83;
  if (v83)
  {
    v83 = 0;
    v84 = 0;
    WTF::fastFree((unint64_t)v65, v57, v58, v59, v60, v61, v62, v63);
  }
  do
  {
    v66 = __ldaxr(v29);
    v67 = v66 - 1;
  }
  while (__stlxr(v67, v29));
  if (!v67)
  {
    atomic_store(1u, v29);
    WTF::fastFree((unint64_t)v29, v57, v58, v59, v60, v61, v62, v63);
  }
  v68 = v94;
  if (v95 != (_QWORD *)v94 && (_QWORD)v94 != 0)
  {
    *(_QWORD *)&v94 = 0;
    DWORD2(v94) = 0;
    WTF::fastFree(v68, v57, v58, v59, v60, v61, v62, v63);
  }
  v70 = v89;
  if (&v91 != (uint64_t *)v89 && v89 != 0)
  {
    v89 = 0;
    v90 = 0;
    WTF::fastFree((unint64_t)v70, v57, v58, v59, v60, v61, v62, v63);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitCCall<int (*)(JSC::Wasm::Instance *,long long,unsigned int,int,BOOL),8ul>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const JSC::Wasm::Type *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  unsigned __int8 *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  unsigned __int8 **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  unsigned int v54;
  uint64_t v55;
  _DWORD **v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  WTF *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  char v82[32];
  WTF *v83;
  int v84;
  WTF *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  int v90;
  uint64_t v91;
  uint64_t *v92[2];
  char v93;
  __int128 v94;
  _QWORD v95[33];

  v95[32] = *MEMORY[0x1E0C80C00];
  LOBYTE(v94) = *(_BYTE *)(a4 + 9);
  *((_QWORD *)&v94 + 1) = 0;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v89, &v94, 1uLL);
  *(_QWORD *)&v94 = v95;
  *((_QWORD *)&v94 + 1) = 16;
  v13 = *(unsigned int *)(a3 + 12);
  if (v13 < 0x11)
  {
    if (!(_DWORD)v13)
      goto LABEL_5;
    goto LABEL_3;
  }
  if (v13 >> 28)
  {
    __break(0xC471u);
    goto LABEL_74;
  }
  v72 = WTF::fastMalloc((WTF *)(16 * v13));
  DWORD2(v94) = v13;
  *(_QWORD *)&v94 = v72;
  v13 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v13)
  {
LABEL_3:
    v14 = HIDWORD(v94);
    v15 = 16 * v13;
    v16 = (unsigned __int8 *)(*(_QWORD *)a3 + 9);
    do
    {
      v17 = *v16;
      v16 += 16;
      v18 = (_QWORD *)(v94 + 16 * v14);
      *v18 = v17;
      v18[1] = 0;
      v14 = ++HIDWORD(v94);
      v15 -= 16;
    }
    while (v15);
  }
LABEL_5:
  v19 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v19 != -1)
  {
    *(_QWORD *)v82 = &v93;
    v92[0] = (uint64_t *)v82;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v20 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v21 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v21))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v21);
LABEL_11:
  v92[0] = (uint64_t *)&v89;
  v92[1] = (uint64_t *)&v94;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v20, v92, (uint64_t)v92, v8, v9, v10, v11, v12, (uint64_t)v82);
  v29 = **(unsigned int ***)v82;
  if (**(_QWORD **)v82)
  {
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 + 1, v29));
  }
  v31 = __ldxr(v21);
  if (v31 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v21))
LABEL_17:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, v23, v24, v25, v26, v27, v28);
  v32 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v32 != -1)
  {
    *(_QWORD *)v82 = &v93;
    v92[0] = (uint64_t *)v82;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (v29[8])
    v33 = 0;
  else
    v33 = (unsigned __int8 **)(v29 + 2);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v33, 0, v82);
  if ((unint64_t)(v88 + 15) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198F168CCLL);
  }
  v39 = (v88 + 15) & 0xFFFFFFF0;
  if (*(_DWORD *)(a1 + 1284) > v39)
    v39 = *(_DWORD *)(a1 + 1284);
  *(_DWORD *)(a1 + 1284) = v39;
  v40 = *(unsigned int *)(a1 + 1300);
  if ((_DWORD)v40 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x198F168D4);
  }
  *(_DWORD *)(a1 + 1300) = v40 + 1;
  if (!*(_BYTE *)(a1 + 73) || *(_BYTE *)(a1 + 72))
  {
    v73 = *(_QWORD *)(a1 + 8);
    if (!*(_BYTE *)(v73 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198F168B4);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(*(unsigned int **)(a1 + 8), (JSC::ARM64LogicalImmediate *)(v40 + 1), v73 + 264, v34, v35, v36, v37, v38);
    v81 = *(_DWORD *)(v73 + 200);
    if (v81 + 4 > *(_DWORD *)(v73 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v73 + 56), v74, v75, v76, v77, v78, v79, v80);
      v81 = *(_DWORD *)(v73 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v73 + 56) + v81) = -1207811152;
    *(_DWORD *)(v73 + 200) += 4;
    JSC::Wasm::BBQJITImpl::BBQJIT::flushRegistersForException(a1, v74, v75, v76, v77, v78, v79, v80);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<8ul>(a1, a3, (uint64_t)v82, (uint64_t)v29, v35, v36, v37, v38);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), a2, 8, v41, v42, v43, v44, v45);
  v53 = *(_DWORD **)(a1 + 8);
  v53[52] = 0;
  v54 = v53[50];
  if (v54 + 4 > v53[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 + 14), v46, v47, v48, v49, v50, v51, v52);
    v54 = v53[50];
  }
  v55 = 0;
  *(_DWORD *)(*((_QWORD *)v53 + 7) + v54) = -700514048;
  v53[50] += 4;
  if (*(unsigned __int8 *)(a4 + 9) - 192 <= 0x3F)
  {
    if (((1 << (*(_BYTE *)(a4 + 9) + 64)) & 0xC00FFC19C001C000) != 0)
    {
      if (!*(_DWORD *)(a1 + 340))
      {
        __break(0xC471u);
        JUMPOUT(0x198F168DCLL);
      }
      v56 = (_DWORD **)(a1 + 328);
      v55 = 2;
LABEL_35:
      if ((**v56 & 0x700) == 0x300)
      {
        __break(0xC471u);
        JUMPOUT(0x198F16814);
      }
      goto LABEL_36;
    }
    if (((1 << (*(_BYTE *)(a4 + 9) + 64)) & 0x3800000000000000) != 0)
    {
      if (!*(_DWORD *)(a1 + 484))
      {
        __break(0xC471u);
        JUMPOUT(0x198F168E4);
      }
      v56 = (_DWORD **)(a1 + 472);
      v55 = 3;
      goto LABEL_35;
    }
    if (*(unsigned __int8 *)(a4 + 9) != 192)
      goto LABEL_36;
    __break(0xC471u);
LABEL_74:
    JUMPOUT(0x198F167C4);
  }
LABEL_36:
  JSC::Wasm::BBQJITImpl::BBQJIT::bind(a1, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), v55, v49, v50, v51, v52);
  v64 = v85;
  if (&v87 != (uint64_t *)v85 && v85)
  {
    v85 = 0;
    v86 = 0;
    WTF::fastFree((unint64_t)v64, v57, v58, v59, v60, v61, v62, v63);
  }
  v65 = v83;
  if (v83)
  {
    v83 = 0;
    v84 = 0;
    WTF::fastFree((unint64_t)v65, v57, v58, v59, v60, v61, v62, v63);
  }
  do
  {
    v66 = __ldaxr(v29);
    v67 = v66 - 1;
  }
  while (__stlxr(v67, v29));
  if (!v67)
  {
    atomic_store(1u, v29);
    WTF::fastFree((unint64_t)v29, v57, v58, v59, v60, v61, v62, v63);
  }
  v68 = v94;
  if (v95 != (_QWORD *)v94 && (_QWORD)v94 != 0)
  {
    *(_QWORD *)&v94 = 0;
    DWORD2(v94) = 0;
    WTF::fastFree(v68, v57, v58, v59, v60, v61, v62, v63);
  }
  v70 = v89;
  if (&v91 != (uint64_t *)v89 && v89 != 0)
  {
    v89 = 0;
    v90 = 0;
    WTF::fastFree((unint64_t)v70, v57, v58, v59, v60, v61, v62, v63);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSelect(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, JSC::ARM64LogicalImmediate *a7, uint64_t a8, __int128 *a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int IfNecessary;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  JSC::ARM64LogicalImmediate *v95;
  unint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  __int128 v101;

  v9 = a8;
  v10 = (uint64_t)a7;
  v13 = a4;
  v14 = a3;
  v98 = a3;
  v99 = a4;
  *(_QWORD *)&v97 = a5;
  *((_QWORD *)&v97 + 1) = a6;
  v16 = a6 >> 8;
  v95 = a7;
  v96 = a8;
  if (a4 == 1)
  {
    if ((_DWORD)a3)
    {
      v10 = a5;
      v9 = a6;
    }
    if (v9 == 1)
    {
      IfNecessary = 0;
      *(_QWORD *)a9 = v10;
      *((_WORD *)a9 + 4) = v9;
    }
    else
    {
      *(_QWORD *)a9 = JSC::Wasm::BBQJITImpl::BBQJIT::topValue(a2, SBYTE1(a6));
      *((_WORD *)a9 + 4) = v64;
      IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, v10, v9, v65, v66, v67, v68, v69);
    }
    if (HIBYTE(word_1ECF4C700))
    {
      v101 = *a9;
      v100 = "Select";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v90 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v90;
        }
        while (v90 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v100, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, &v98, (uint64_t *)&v97, (uint64_t *)&v95, (uint64_t *)&v101);
      v14 = v98;
      v13 = v99;
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::consume(a2, v14, v13, a4, a5, a6, (uint64_t)a7, a8);
    JSC::Wasm::BBQJITImpl::BBQJIT::consume(a2, v97, *((uint64_t *)&v97 + 1), v70, v71, v72, v73, v74);
    JSC::Wasm::BBQJITImpl::BBQJIT::consume(a2, (uint64_t)v95, v96, v75, v76, v77, v78, v79);
    if (*((_BYTE *)a9 + 8) != 1)
    {
      v84 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, *(_QWORD *)a9, *((_QWORD *)a9 + 1), 0, v80, v81, v82, v83);
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMove(a2, SBYTE9(v97), IfNecessary, v84, v85, v86, v87, v88);
    }
  }
  else
  {
    v22 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, a3, a4, a4, a5, a6, (uint64_t)a7, a8);
    v93 = 0;
    v94 = v22;
    v92 = 0;
    if (a6 != 1)
      v93 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, a5, a6, v17, v18, v19, v20, v21);
    if (v9 != 1)
      v92 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, v10, v9, v17, v18, v19, v20, v21);
    JSC::Wasm::BBQJITImpl::BBQJIT::consume(a2, a5, a6, v17, v18, v19, v20, v21);
    JSC::Wasm::BBQJITImpl::BBQJIT::consume(a2, v10, v9, v23, v24, v25, v26, v27);
    v28 = JSC::Wasm::BBQJITImpl::BBQJIT::topValue(a2, (char)v16);
    *(_QWORD *)a9 = v28;
    *((_WORD *)a9 + 4) = v29;
    v34 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v28, *((_QWORD *)a9 + 1), 0, v30, v31, v32, v33);
    if (HIBYTE(word_1ECF4C700))
    {
      v101 = *a9;
      v100 = "Select";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v89 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v89;
        }
        while (v89 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v100, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, &v98, (uint64_t)&v97, (int *)&v93, (uint64_t)&v95, (int *)&v92, (uint64_t *)&v101);
      if (HIBYTE(word_1ECF4C700))
        *(_DWORD *)a2 += 2;
    }
    v35 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::operator==((int *)&v92, v34);
    if (v35)
    {
      v101 = v97;
      WORD4(v97) = v96;
      *(_QWORD *)&v97 = v95;
      v95 = (JSC::ARM64LogicalImmediate *)v101;
      LOWORD(v96) = WORD4(v101);
      v62 = v92;
      v92 = v93;
      v93 = v62;
    }
    v36 = v35 ^ 1u;
    if (JSC::Wasm::BBQJITImpl::BBQJIT::Location::operator==((int *)&v94, v34))
    {
      LOBYTE(v42) = 8;
      JSC::MacroAssemblerARM64::move(*(_DWORD **)(a2 + 8), ((__int16)v22 >> 8), 8, v37, v38, v39, v40, v41);
    }
    else
    {
      v42 = v22 >> 8;
    }
    if (BYTE8(v97) == 1)
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a2, (JSC::ARM64LogicalImmediate *)v97, *((unint64_t *)&v97 + 1), v34, v38, v39, v40, v41);
    else
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMove(a2, SBYTE9(v97), v93, v34, v38, v39, v40, v41);
    JSC::MacroAssemblerARM64::branchTest32(*(_QWORD *)(a2 + 8), v36, (char)v42, (char)v42, v43, v44, v45, v46, (uint64_t)&v101);
    JSC::Wasm::BBQJITImpl::BBQJIT::consume(a2, v98, v99, v47, v48, v49, v50, v51);
    if (v96 == 1)
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a2, v95, v96, v34, v52, v53, v54, v55);
    else
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMove(a2, SBYTE1(v96), v92, v34, v52, v53, v54, v55);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v101, *(_QWORD *)(a2 + 8), v56, v57, v58, v59, v60, v61);
    if (HIBYTE(word_1ECF4C700))
      *(_DWORD *)a2 -= 2;
  }
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitMove(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;

  v8 = a4 & 7;
  if ((a3 & 6) == 2)
  {
    if (v8 <= 5 && ((1 << v8) & 0x32) != 0)
      JSC::Wasm::BBQJITImpl::BBQJIT::emitStore(a1, a2, a3, a4, a5, a6, a7, a8);
    else
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveRegister(a1, a2, a3, a4);
  }
  else if (v8 <= 5 && ((1 << v8) & 0x32) != 0)
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveMemory(a1, a2, a3, a4);
  }
  else
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::emitLoad(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32Add(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  _BYTE *v50;
  int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  __int16 v55;
  uint64_t *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  __int128 v71;
  const char *v72;
  unsigned int v73;

  v68 = a2;
  v69 = a3;
  v66 = a4;
  v67 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 != 1)
  {
    v65 = a9;
    v70 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v19 = 0;
    v73 = IfNecessary;
    if (v17 == 1)
    {
LABEL_9:
      v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
      if (a3 == 2)
      {
        v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
        if (*(_DWORD *)(a1 + 1280) < v26)
          *(_DWORD *)(a1 + 1280) = v26;
        if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
      }
      v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
      if (a5 == 2)
      {
        v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
        if (*(_DWORD *)(a1 + 1280) < v32)
          *(_DWORD *)(a1 + 1280) = v32;
        if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
      }
      v33 = *(_QWORD *)(a1 + 88);
      v34 = *(_DWORD *)(v33 + 596);
      if (!v34)
      {
        __break(0xC471u);
        return;
      }
      if (v16 == 1)
        v35 = v19;
      else
        v35 = IfNecessary;
      v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
      v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
      if (*(_DWORD *)(v36 - 160) == 5)
        v38 = v37 + 1;
      else
        v38 = v37;
      *a6 = v38;
      *((_WORD *)a6 + 4) = -254;
      v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, a6[1], v35, v28, v29, v30, v31);
      if (HIBYTE(word_1ECF4C700))
      {
        v71 = *(_OWORD *)a6;
        v72 = "I32Add";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v57 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v57;
          }
          while (v57 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v72, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v68);
        if ((IfNecessary & 7) != 0)
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v73);
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v66, (int *)&v70, (uint64_t *)&v71);
        v16 = v69;
        v17 = v67;
        IfNecessary = v73;
        v19 = v70;
      }
      v47 = *(_QWORD *)(a1 + 8);
      if (v16 == 1 || v17 == 1)
      {
        if ((IfNecessary & 6) == 2)
          v55 = IfNecessary;
        else
          v55 = v19;
        v56 = &v66;
        if (v16 == 1)
          v56 = &v68;
        JSC::MacroAssemblerARM64::add32(v47, *(unsigned int *)v56, (v55 >> 8), ((__int16)v46 >> 8), v42, v43, v44, v45);
        v50 = v65;
        goto LABEL_44;
      }
      v48 = IfNecessary >> 8;
      if ((v19 & 0xFF00) == 0x1F00)
      {
        v49 = IfNecessary >> 8;
        LOBYTE(v48) = 31;
      }
      else
      {
        v49 = v19 >> 8;
        if ((v46 & 0xFF00) != 0x1F00)
        {
          v50 = v65;
          if ((IfNecessary & 0xFF00) != 0x1F00)
          {
            v51 = ((BYTE1(v19) & 0x1F) << 16) | (v46 >> 8) & 0x1F | (32 * (BYTE1(IfNecessary) & 0x1F)) | 0xB000000;
LABEL_35:
            v54 = *(_DWORD *)(v47 + 200);
            v53 = (unsigned int *)(v47 + 200);
            v52 = v54;
            if (v54 + 4 > *(v53 - 2))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 - 36), v39, v40, v41, v42, v43, v44, v45);
              v52 = *v53;
            }
            *(_DWORD *)(*((_QWORD *)v53 - 18) + v52) = v51;
            *v53 += 4;
LABEL_44:
            *v50 = 0;
            v50[8] = 0;
            return;
          }
LABEL_62:
          v51 = SBYTE1(v46) | ((v49 & 0x1F) << 16) | (32 * (char)v48) | 0xB206000;
          goto LABEL_35;
        }
      }
      v50 = v65;
      goto LABEL_62;
    }
LABEL_8:
    v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
    v70 = v19;
    goto LABEL_9;
  }
  if (a5 != 1)
  {
    v65 = a9;
    IfNecessary = 0;
    v73 = 0;
    goto LABEL_8;
  }
  *a6 = (a4 + a2);
  *((_WORD *)a6 + 4) = -255;
  if (HIBYTE(word_1ECF4C700))
  {
    v71 = *(_OWORD *)a6;
    v72 = "I32Add";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v58 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v58;
      }
      while (v58 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>(&v72, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v68);
    if (v69 != 1 && v69 != 4)
    {
      v73 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v68, v69, v59, v60, v61, v62, v63);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v73);
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v66, (uint64_t *)&v71);
  }
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Add(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  _DWORD *v47;
  unsigned int v48;
  unsigned int v49;
  const char **v50;
  uint64_t *v51;
  unint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  __int128 v76;
  const char *v77;
  unsigned int v78;

  v73 = a2;
  v74 = a3;
  v71 = a4;
  v72 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1)
  {
    if (a5 == 1)
    {
      *a6 = COERCE_UNSIGNED_INT(*(float *)&a2 + *(float *)&a4);
      *((_WORD *)a6 + 4) = -767;
      if (HIBYTE(word_1ECF4C700))
      {
        v76 = *(_OWORD *)a6;
        v77 = "F32Add";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v63 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v63;
          }
          while (v63 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v77, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v73);
        if (v74 != 1 && v74 != 4)
        {
          v78 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v73, v74, v64, v65, v66, v67, v68);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v78);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v71, (uint64_t *)&v76);
      }
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    v70 = a9;
    IfNecessary = 0;
    v78 = 0;
  }
  else
  {
    v70 = a9;
    v75 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v19 = 0;
    v78 = IfNecessary;
    if (v17 == 1)
      goto LABEL_9;
  }
  v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v75 = v19;
LABEL_9:
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  if (a3 == 2)
  {
    v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v26)
      *(_DWORD *)(a1 + 1280) = v26;
    if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
  }
  v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
  if (a5 == 2)
  {
    v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v32)
      *(_DWORD *)(a1 + 1280) = v32;
    if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
  }
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_DWORD *)(v33 + 596);
  if (v34)
  {
    if (v16 == 1)
      v35 = v19;
    else
      v35 = IfNecessary;
    v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
    v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
    if (*(_DWORD *)(v36 - 160) == 5)
      v38 = v37 + 1;
    else
      v38 = v37;
    *a6 = v38;
    *((_WORD *)a6 + 4) = -766;
    v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, a6[1], v35, v28, v29, v30, v31);
    if (HIBYTE(word_1ECF4C700))
    {
      v76 = *(_OWORD *)a6;
      v77 = "F32Add";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v62 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v62;
        }
        while (v62 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v77, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v73);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v78);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v71, (int *)&v75, (uint64_t *)&v76);
      v16 = v74;
      v17 = v72;
      IfNecessary = v78;
      v19 = v75;
    }
    if (v16 == 1 || v17 == 1)
    {
      LODWORD(v76) = IfNecessary;
      LODWORD(v77) = v19;
      v50 = (const char **)&v76;
      if ((IfNecessary & 6) == 2)
        v50 = &v77;
      *(_DWORD *)v50 = 4099;
      if (v16 == 1)
        v51 = &v73;
      else
        v51 = &v71;
      v52 = &v72;
      if (v16 == 1)
        v52 = (unint64_t *)&v74;
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)*v51, *v52, 0x1003uLL, v42, v43, v44, v45);
      v47 = *(_DWORD **)(a1 + 8);
      v60 = SBYTE1(v76);
      v61 = SBYTE1(v77);
      v48 = v47[50];
      if (v48 + 4 > v47[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 14), v53, v54, v55, v56, v57, v58, v59);
        v48 = v47[50];
      }
      v49 = (v46 >> 8) | (32 * v60) | (v61 << 16) | 0x1E202800;
    }
    else
    {
      v47 = *(_DWORD **)(a1 + 8);
      v48 = v47[50];
      if (v48 + 4 > v47[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 14), v39, v40, v41, v42, v43, v44, v45);
        v48 = v47[50];
      }
      v49 = ((__int16)v19 << 8) & 0xFFFF00FF | (v46 >> 8) | ((__int16)IfNecessary >> 3) & 0xE1DFD7E0 | 0x1E202800;
    }
    *(_DWORD *)(*((_QWORD *)v47 + 7) + v48) = v49;
    v47[50] += 4;
    *v70 = 0;
    v70[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Add(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  _DWORD *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  const char **v51;
  uint64_t *v52;
  unint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  __int128 v77;
  const char *v78;
  unsigned int v79;

  v74 = a2;
  v75 = a3;
  v72 = a4;
  v73 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1)
  {
    if (a5 == 1)
    {
      *(double *)a6 = *(double *)&a2 + *(double *)&a4;
      *(_WORD *)(a6 + 8) = -1023;
      if (HIBYTE(word_1ECF4C700))
      {
        v77 = *(_OWORD *)a6;
        v78 = "F64Add";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v64 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v64;
          }
          while (v64 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v78, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v74);
        if (v75 != 1 && v75 != 4)
        {
          v79 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v74, v75, v65, v66, v67, v68, v69);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v79);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v72, (uint64_t *)&v77);
      }
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    v71 = a9;
    IfNecessary = 0;
    v79 = 0;
  }
  else
  {
    v71 = a9;
    v76 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, a6, a7, a8);
    v19 = 0;
    v79 = IfNecessary;
    if (v17 == 1)
      goto LABEL_9;
  }
  v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, a6, a7, a8);
  v76 = v19;
LABEL_9:
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, a6, a7, a8);
  if (a3 == 2)
  {
    v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v26)
      *(_DWORD *)(a1 + 1280) = v26;
    if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
  }
  v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
  if (a5 == 2)
  {
    v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v32)
      *(_DWORD *)(a1 + 1280) = v32;
    if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
  }
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_DWORD *)(v33 + 596);
  if (v34)
  {
    if (v16 == 1)
      v35 = v19;
    else
      v35 = IfNecessary;
    v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
    v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
    if (*(_DWORD *)(v36 - 160) == 5)
      v38 = v37 + 1;
    else
      v38 = v37;
    *(_QWORD *)a6 = v38;
    *(_WORD *)(a6 + 8) = -1022;
    v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, *(_QWORD *)(a6 + 8), v35, v28, v29, v30, v31);
    if (HIBYTE(word_1ECF4C700))
    {
      v77 = *(_OWORD *)a6;
      v78 = "F64Add";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v63 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v63;
        }
        while (v63 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v78, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v74);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v79);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v72, (int *)&v76, (uint64_t *)&v77);
      v16 = v75;
      v17 = v73;
      IfNecessary = v79;
      v19 = v76;
    }
    if (v16 == 1 || v17 == 1)
    {
      LODWORD(v77) = IfNecessary;
      LODWORD(v78) = v19;
      v51 = (const char **)&v77;
      if ((IfNecessary & 6) == 2)
        v51 = &v78;
      *(_DWORD *)v51 = 4099;
      if (v16 == 1)
        v52 = &v74;
      else
        v52 = &v72;
      v53 = &v73;
      if (v16 == 1)
        v53 = (unint64_t *)&v75;
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)*v52, *v53, 0x1003uLL, v42, v43, v44, v45);
      v47 = *(_DWORD **)(a1 + 8);
      v61 = SBYTE1(v77);
      v62 = SBYTE1(v78);
      v48 = v47[50];
      if (v48 + 4 > v47[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 14), v54, v55, v56, v57, v58, v59, v60);
        v48 = v47[50];
      }
      v49 = (v46 >> 8) | (32 * v61) | (v62 << 16);
      v50 = 509618176;
    }
    else
    {
      v47 = *(_DWORD **)(a1 + 8);
      v48 = v47[50];
      if (v48 + 4 > v47[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 14), v39, v40, v41, v42, v43, v44, v45);
        v48 = v47[50];
      }
      v49 = ((__int16)v19 << 8) & 0xFFFF00FF | (v46 >> 8);
      v50 = ((__int16)IfNecessary >> 3) & 0xE19FD7E0 | 0x1E602800;
    }
    *(_DWORD *)(*((_QWORD *)v47 + 7) + v48) = v49 | v50;
    v47[50] += 4;
    *v71 = 0;
    v71[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32Sub(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _BYTE *v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v74;
  uint64_t v75;
  unint64_t v76;
  JSC::ARM64LogicalImmediate *v77;
  unint64_t v78;
  unsigned int v79;
  __int128 v80;
  const char *v81;
  unsigned int v82;

  v77 = (JSC::ARM64LogicalImmediate *)a2;
  v78 = a3;
  v75 = a4;
  v76 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1)
  {
    if (a5 == 1)
    {
      *a6 = (a2 - a4);
      *((_WORD *)a6 + 4) = -255;
      if (HIBYTE(word_1ECF4C700))
      {
        v80 = *(_OWORD *)a6;
        v81 = "I32Sub";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v67 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v67;
          }
          while (v67 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v81, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v77);
        if (v78 != 1 && v78 != 4)
        {
          v82 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v77, v78, v68, v69, v70, v71, v72);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v82);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v75, (uint64_t *)&v80);
      }
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    v74 = a9;
    IfNecessary = 0;
    v82 = 0;
  }
  else
  {
    v74 = a9;
    v79 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v19 = 0;
    v82 = IfNecessary;
    if (v17 == 1)
      goto LABEL_9;
  }
  v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v79 = v19;
LABEL_9:
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  if (a3 == 2)
  {
    v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v26)
      *(_DWORD *)(a1 + 1280) = v26;
    if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
  }
  v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
  if (a5 == 2)
  {
    v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v32)
      *(_DWORD *)(a1 + 1280) = v32;
    if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
  }
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_DWORD *)(v33 + 596);
  if (!v34)
  {
    __break(0xC471u);
    JUMPOUT(0x198F180D4);
  }
  if (v16 == 1)
    v35 = v19;
  else
    v35 = IfNecessary;
  v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
  v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
  if (*(_DWORD *)(v36 - 160) == 5)
    v38 = v37 + 1;
  else
    v38 = v37;
  *a6 = v38;
  *((_WORD *)a6 + 4) = -254;
  v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, a6[1], v35, v28, v29, v30, v31);
  if (HIBYTE(word_1ECF4C700))
  {
    v80 = *(_OWORD *)a6;
    v81 = "I32Sub";
    WTF::dataLog<char [16]>("BBQ\t");
    v47 = v74;
    if (*(_DWORD *)a1)
    {
      v66 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v66;
      }
      while (v66 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>(&v81, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v77);
    if ((IfNecessary & 7) != 0)
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v82);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v75, (int *)&v79, (uint64_t *)&v80);
    v16 = v78;
    v17 = v76;
  }
  else
  {
    v47 = v74;
  }
  if (v16 == 1 || v17 == 1)
  {
    if (v17 == 1)
    {
      JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), SBYTE1(v82), v75, ((__int16)v46 >> 8), v42, v43, v44, v45);
    }
    else
    {
      v54 = v79;
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v77, v78, 0x802uLL, v42, v43, v44, v45);
      v62 = *(_DWORD **)(a1 + 8);
      v63 = (v54 << 8) & 0x1F0000;
      v64 = v62[50];
      if (BYTE1(v46) == 31)
        v65 = v63 | 0x4B20611F;
      else
        v65 = (v46 >> 8) & 0x1F | v63 | 0x4B000100;
      if (v64 + 4 > v62[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v62 + 14), v55, v56, v57, v58, v59, v60, v61);
        v64 = v62[50];
      }
      *(_DWORD *)(*((_QWORD *)v62 + 7) + v64) = v65;
      v62[50] += 4;
    }
  }
  else
  {
    v48 = *(_QWORD *)(a1 + 8);
    v49 = (v79 << 8) & 0x1F0000;
    if ((v46 & 0xFF00) == 0x1F00 || (v82 & 0xFF00) == 0x1F00)
      v50 = SBYTE1(v46) | (32 * SBYTE1(v82)) | v49 | 0x4B206000;
    else
      v50 = (32 * ((v82 >> 8) & 0x1F)) | (v46 >> 8) & 0x1F | v49 | 0x4B000000;
    v53 = *(_DWORD *)(v48 + 200);
    v52 = (unsigned int *)(v48 + 200);
    v51 = v53;
    if (v53 + 4 > *(v52 - 2))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v52 - 36), v39, v40, v41, v42, v43, v44, v45);
      v51 = *v52;
    }
    *(_DWORD *)(*((_QWORD *)v52 - 18) + v51) = v50;
    *v52 += 4;
  }
  *v47 = 0;
  v47[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Sub(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _BYTE *v47;
  __int16 v48;
  __int16 v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  int v68;
  __int16 v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v79;
  uint64_t v80;
  unint64_t v81;
  JSC::ARM64LogicalImmediate *v82;
  unint64_t v83;
  unsigned int v84;
  __int128 v85;
  const char *v86;
  int v87;

  v82 = (JSC::ARM64LogicalImmediate *)a2;
  v83 = a3;
  v80 = a4;
  v81 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1)
  {
    if (a5 == 1)
    {
      *a6 = COERCE_UNSIGNED_INT(*(float *)&a2 - *(float *)&a4);
      *((_WORD *)a6 + 4) = -767;
      if (HIBYTE(word_1ECF4C700))
      {
        v85 = *(_OWORD *)a6;
        v86 = "F32Sub";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v72 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v72;
          }
          while (v72 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v86, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v82);
        if (v83 != 1 && v83 != 4)
        {
          v87 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v82, v83, v73, v74, v75, v76, v77);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v87);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v80, (uint64_t *)&v85);
      }
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    v79 = a9;
    IfNecessary = 0;
    v87 = 0;
  }
  else
  {
    v79 = a9;
    v84 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v19 = 0;
    v87 = IfNecessary;
    if (v17 == 1)
      goto LABEL_9;
  }
  v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v84 = v19;
LABEL_9:
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  if (a3 == 2)
  {
    v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v26)
      *(_DWORD *)(a1 + 1280) = v26;
    if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
  }
  v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
  if (a5 == 2)
  {
    v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v32)
      *(_DWORD *)(a1 + 1280) = v32;
    if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
  }
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_DWORD *)(v33 + 596);
  if (v34)
  {
    if (v16 == 1)
      v35 = v19;
    else
      v35 = IfNecessary;
    v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
    v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
    if (*(_DWORD *)(v36 - 160) == 5)
      v38 = v37 + 1;
    else
      v38 = v37;
    *a6 = v38;
    *((_WORD *)a6 + 4) = -766;
    v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, a6[1], v35, v28, v29, v30, v31);
    if (HIBYTE(word_1ECF4C700))
    {
      v85 = *(_OWORD *)a6;
      v86 = "F32Sub";
      WTF::dataLog<char [16]>("BBQ\t");
      v47 = v79;
      if (*(_DWORD *)a1)
      {
        v71 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v71;
        }
        while (v71 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v86, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v82);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v87);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v80, (int *)&v84, (uint64_t *)&v85);
      v16 = v83;
      v17 = v81;
    }
    else
    {
      v47 = v79;
    }
    if (v16 == 1 || v17 == 1)
    {
      v56 = v46 >> 8;
      if (v17 == 1)
      {
        v57 = v87;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)COERCE_UNSIGNED_INT(-*(float *)&v80), 0xFD01uLL, 0x1003uLL, v42, v43, v44, v45);
        v65 = *(_QWORD *)(a1 + 8);
        v66 = (v57 >> 3) & 0xE1CFD7E0;
        v67 = (char)v56;
        v68 = 506472448;
      }
      else
      {
        v69 = v84;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v82, v83, 0x1003uLL, v42, v43, v44, v45);
        v65 = *(_QWORD *)(a1 + 8);
        v66 = (v69 << 8) & 0xE1DF0000;
        v67 = (char)v56;
        v68 = 505428480;
      }
      v55 = v67 | v68 | v66;
      v70 = *(_DWORD *)(v65 + 200);
      v52 = (unsigned int *)(v65 + 200);
      v51 = v70;
      v54 = v52 - 36;
      if (v70 + 4 > *(v52 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v52 - 36), v58, v59, v60, v61, v62, v63, v64);
        v51 = *v52;
      }
    }
    else
    {
      v48 = v87;
      v49 = v84;
      v50 = *(_QWORD *)(a1 + 8);
      v53 = *(_DWORD *)(v50 + 200);
      v52 = (unsigned int *)(v50 + 200);
      v51 = v53;
      v54 = v52 - 36;
      if (v53 + 4 > *(v52 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v52 - 36), v39, v40, v41, v42, v43, v44, v45);
        v51 = *v52;
      }
      v55 = (v48 >> 3) & 0xFFFFFFE0 | ((__int16)v46 >> 8) | (v49 << 8) & 0xE1DF00FF | 0x1E203800;
    }
    *(_DWORD *)(*(_QWORD *)v54 + v51) = v55;
    *v52 += 4;
    *v47 = 0;
    v47[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Sub(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addF64Sub(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF64Sub(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addF64Sub(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(a8, a1, v9, (uint64_t)v8, a6, a1, a1, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addF64Sub(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF64Sub(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addF64Sub(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(_BYTE *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int IfNecessary;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  __int16 v56;
  __int16 v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  JSC::AssemblerBuffer *v62;
  unsigned int v63;
  int v64;
  int v65;
  double v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  char v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  __int128 v86;
  const char *v87;
  int v88;

  if (*((_BYTE *)a3 + 8) == 1)
  {
    v13 = (unsigned __int8 *)(a4 + 8);
    if (*(_BYTE *)(a4 + 8) == 1)
    {
      *(double *)a5 = *(double *)a3 - *(double *)a4;
      *(_WORD *)(a5 + 8) = -1023;
      if (HIBYTE(word_1ECF4C700))
      {
        v86 = *(_OWORD *)a5;
        v87 = "F64Sub";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a2)
        {
          v14 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v14;
          }
          while (v14 < *(_DWORD *)a2);
        }
        WTF::dataLog<char const*,char [2]>(&v87, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
        v20 = *((unsigned __int8 *)a3 + 8);
        if (v20 != 1 && v20 != 4)
        {
          v88 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, a3[1], v15, v16, v17, v18, v19);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v88);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t *)a4, (uint64_t *)&v86);
      }
LABEL_49:
      *a1 = 0;
      a1[8] = 0;
      return;
    }
    v83 = a6;
    v84 = a7;
    IfNecessary = 0;
    v88 = 0;
    goto LABEL_16;
  }
  v83 = a6;
  v84 = a7;
  v85 = 0;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *a3, a3[1], a4, a5, a6, a7, a8);
  v23 = 0;
  v88 = IfNecessary;
  v13 = (unsigned __int8 *)(a4 + 8);
  if (*(_BYTE *)(a4 + 8) != 1)
  {
LABEL_16:
    v23 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), a4, a5, a6, a7, a8);
    v85 = v23;
  }
  v25 = *a3;
  v24 = a3[1];
  v26 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, v24, a4, a5, a6, a7, a8);
  if (v24 == 2)
  {
    v32 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v25 + 16;
    if (*(_DWORD *)(a2 + 1280) < v32)
      *(_DWORD *)(a2 + 1280) = v32;
    if ((v26 & 7) != 1 || ((-8 * v32) ^ v26) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v25, v24, v26);
  }
  v33 = *(_QWORD *)a4;
  v34 = *(_QWORD *)(a4 + 8);
  v35 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a4, v34, v27, v28, v29, v30, v31);
  if (v34 == 2)
  {
    v40 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v33 + 16;
    if (*(_DWORD *)(a2 + 1280) < v40)
      *(_DWORD *)(a2 + 1280) = v40;
    if ((v35 & 7) != 1 || ((-8 * v40) ^ v35) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v33, v34, v35);
  }
  v41 = *(_QWORD *)(a2 + 88);
  v42 = *(_DWORD *)(v41 + 596);
  if (v42)
  {
    if (*((_BYTE *)a3 + 8) == 1)
      v43 = v23;
    else
      v43 = IfNecessary;
    v44 = *(_QWORD *)(v41 + 584) + 1232 * v42;
    v45 = *(_DWORD *)(v41 + 68) + *(_DWORD *)(v44 - 32);
    if (*(_DWORD *)(v44 - 160) == 5)
      v46 = v45 + 1;
    else
      v46 = v45;
    *(_QWORD *)a5 = v46;
    *(_WORD *)(a5 + 8) = -1022;
    v54 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v46, *(_QWORD *)(a5 + 8), v43, v36, v37, v38, v39);
    if (HIBYTE(word_1ECF4C700))
    {
      v86 = *(_OWORD *)a5;
      v87 = "F64Sub";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v82 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v82;
        }
        while (v82 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v87, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v88);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, a4, (int *)&v85, (uint64_t *)&v86);
    }
    v55 = *v13;
    if (*((_BYTE *)a3 + 8) == 1 || v55 == 1)
    {
      v64 = 509622784;
      if (v55 == 1)
      {
        v65 = -510666784;
        v66 = *(double *)a4;
        v67 = v88;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(v84, COERCE_JSC_ARM64LOGICALIMMEDIATE_(-v66), 0xFC01uLL, 0x1003uLL, v50, v51, v52, v53);
        v75 = *(_QWORD *)(v84 + 8);
        v76 = *(_DWORD *)(v75 + 200);
        v60 = (unsigned int *)(v75 + 200);
        v59 = v76;
        v62 = (JSC::AssemblerBuffer *)(v60 - 36);
        v77 = v76 + 4;
        v78 = *(v60 - 2);
        v64 = 510666752;
        v79 = 19;
      }
      else
      {
        v65 = -509673472;
        v67 = v85;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(v84, (JSC::ARM64LogicalImmediate *)*a3, a3[1], 0x1003uLL, v50, v51, v52, v53);
        v80 = *(_QWORD *)(v84 + 8);
        v81 = *(_DWORD *)(v80 + 200);
        v60 = (unsigned int *)(v80 + 200);
        v59 = v81;
        v62 = (JSC::AssemblerBuffer *)(v60 - 36);
        v77 = v81 + 4;
        v78 = *(v60 - 2);
        v79 = 8;
      }
      if (v77 > v78)
      {
        JSC::AssemblerBuffer::outOfLineGrow(v62, v68, v69, v70, v71, v72, v73, v74);
        v59 = *v60;
      }
      v63 = (v67 << 16 >> v79) & v65 | (v54 >> 8) | v64;
    }
    else
    {
      v56 = v88;
      v57 = v85;
      v58 = *(_QWORD *)(v83 + 8);
      v61 = *(_DWORD *)(v58 + 200);
      v60 = (unsigned int *)(v58 + 200);
      v59 = v61;
      v62 = (JSC::AssemblerBuffer *)(v60 - 36);
      if (v61 + 4 > *(v60 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v60 - 36), v47, v48, v49, v50, v51, v52, v53);
        v59 = *v60;
      }
      v63 = (v56 >> 3) & 0xFFFFFFE0 | (v54 >> 8) | (v57 << 8) & 0xE19F00FF | 0x1E603800;
    }
    *(_DWORD *)(*(_QWORD *)v62 + v59) = v63;
    *v60 += 4;
    goto LABEL_49;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32Mul(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI32Mul(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI32Mul(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI32Mul(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(a8, a1, v9, (uint64_t)v8, a6, a1, a1, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI32Mul(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI32Mul(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI32Mul(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(_BYTE *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int IfNecessary;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  _DWORD *v56;
  unsigned int v57;
  __int16 v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  __int128 v64;
  const char *v65;
  unsigned int v66;

  if (*((_BYTE *)a3 + 8) == 1)
  {
    v13 = (_BYTE *)(a4 + 8);
    if (*(_BYTE *)(a4 + 8) == 1)
    {
      *a5 = (*(_DWORD *)a4 * *(_DWORD *)a3);
      *((_WORD *)a5 + 4) = -255;
      if (HIBYTE(word_1ECF4C700))
      {
        v64 = *(_OWORD *)a5;
        v65 = "I32Mul";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a2)
        {
          v14 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v14;
          }
          while (v14 < *(_DWORD *)a2);
        }
        WTF::dataLog<char const*,char [2]>(&v65, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
        v20 = *((unsigned __int8 *)a3 + 8);
        if (v20 != 1 && v20 != 4)
        {
          v66 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, a3[1], v15, v16, v17, v18, v19);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v66);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t *)a4, (uint64_t *)&v64);
      }
LABEL_49:
      *a1 = 0;
      a1[8] = 0;
      return;
    }
    v61 = a6;
    v62 = a7;
    IfNecessary = 0;
    v66 = 0;
    goto LABEL_16;
  }
  v61 = a6;
  v62 = a7;
  v63 = 0;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *a3, a3[1], a4, (uint64_t)a5, a6, a7, a8);
  v23 = 0;
  v66 = IfNecessary;
  v13 = (_BYTE *)(a4 + 8);
  if (*(_BYTE *)(a4 + 8) != 1)
  {
LABEL_16:
    v23 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), a4, (uint64_t)a5, a6, a7, a8);
    v63 = v23;
  }
  v25 = *a3;
  v24 = a3[1];
  v26 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, v24, a4, (uint64_t)a5, a6, a7, a8);
  if (v24 == 2)
  {
    v32 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v25 + 16;
    if (*(_DWORD *)(a2 + 1280) < v32)
      *(_DWORD *)(a2 + 1280) = v32;
    if ((v26 & 7) != 1 || ((-8 * v32) ^ v26) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v25, v24, v26);
  }
  v33 = *(_QWORD *)a4;
  v34 = *(_QWORD *)(a4 + 8);
  v35 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a4, v34, v27, v28, v29, v30, v31);
  if (v34 == 2)
  {
    v40 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v33 + 16;
    if (*(_DWORD *)(a2 + 1280) < v40)
      *(_DWORD *)(a2 + 1280) = v40;
    if ((v35 & 7) != 1 || ((-8 * v40) ^ v35) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v33, v34, v35);
  }
  v41 = *(_QWORD *)(a2 + 88);
  v42 = *(_DWORD *)(v41 + 596);
  if (v42)
  {
    if (*((_BYTE *)a3 + 8) == 1)
      v43 = v23;
    else
      v43 = IfNecessary;
    v44 = *(_QWORD *)(v41 + 584) + 1232 * v42;
    v45 = *(_DWORD *)(v41 + 68) + *(_DWORD *)(v44 - 32);
    if (*(_DWORD *)(v44 - 160) == 5)
      v46 = v45 + 1;
    else
      v46 = v45;
    *a5 = v46;
    *((_WORD *)a5 + 4) = -254;
    v54 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v46, a5[1], v43, v36, v37, v38, v39);
    if (HIBYTE(word_1ECF4C700))
    {
      v64 = *(_OWORD *)a5;
      v65 = "I32Mul";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v60 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v60;
        }
        while (v60 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v65, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v66);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, a4, (int *)&v63, (uint64_t *)&v64);
      IfNecessary = v66;
      v23 = v63;
    }
    v55 = *((unsigned __int8 *)a3 + 8);
    if (v55 == 1 || *v13 == 1)
    {
      if ((IfNecessary & 6) == 2)
        v58 = IfNecessary;
      else
        v58 = v23;
      if (v55 == 1)
        v59 = (unsigned int *)a3;
      else
        v59 = (unsigned int *)a4;
      JSC::MacroAssembler::mul32(*(_QWORD *)(v62 + 8), *v59, (v58 >> 8), ((__int16)v54 >> 8), v50, v51, v52, v53);
    }
    else
    {
      v56 = *(_DWORD **)(v61 + 8);
      v57 = v56[50];
      if (v57 + 4 > v56[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v56 + 14), v47, v48, v49, v50, v51, v52, v53);
        v57 = v56[50];
      }
      *(_DWORD *)(*((_QWORD *)v56 + 7) + v57) = (IfNecessary >> 3) & 0x3E0 | (v54 >> 8) & 0x1F | (((v23 >> 8) & 0x1F) << 16) | 0x1B007C00;
      v56[50] += 4;
    }
    goto LABEL_49;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Mul(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  _DWORD *v47;
  unsigned int v48;
  unsigned int v49;
  const char **v50;
  uint64_t *v51;
  unint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  __int128 v76;
  const char *v77;
  unsigned int v78;

  v73 = a2;
  v74 = a3;
  v71 = a4;
  v72 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1)
  {
    if (a5 == 1)
    {
      *a6 = COERCE_UNSIGNED_INT(*(float *)&a2 * *(float *)&a4);
      *((_WORD *)a6 + 4) = -767;
      if (HIBYTE(word_1ECF4C700))
      {
        v76 = *(_OWORD *)a6;
        v77 = "F32Mul";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v63 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v63;
          }
          while (v63 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v77, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v73);
        if (v74 != 1 && v74 != 4)
        {
          v78 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v73, v74, v64, v65, v66, v67, v68);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v78);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v71, (uint64_t *)&v76);
      }
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    v70 = a9;
    IfNecessary = 0;
    v78 = 0;
  }
  else
  {
    v70 = a9;
    v75 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v19 = 0;
    v78 = IfNecessary;
    if (v17 == 1)
      goto LABEL_9;
  }
  v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v75 = v19;
LABEL_9:
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  if (a3 == 2)
  {
    v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v26)
      *(_DWORD *)(a1 + 1280) = v26;
    if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
  }
  v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
  if (a5 == 2)
  {
    v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v32)
      *(_DWORD *)(a1 + 1280) = v32;
    if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
  }
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_DWORD *)(v33 + 596);
  if (v34)
  {
    if (v16 == 1)
      v35 = v19;
    else
      v35 = IfNecessary;
    v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
    v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
    if (*(_DWORD *)(v36 - 160) == 5)
      v38 = v37 + 1;
    else
      v38 = v37;
    *a6 = v38;
    *((_WORD *)a6 + 4) = -766;
    v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, a6[1], v35, v28, v29, v30, v31);
    if (HIBYTE(word_1ECF4C700))
    {
      v76 = *(_OWORD *)a6;
      v77 = "F32Mul";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v62 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v62;
        }
        while (v62 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v77, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v73);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v78);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v71, (int *)&v75, (uint64_t *)&v76);
      v16 = v74;
      v17 = v72;
      IfNecessary = v78;
      v19 = v75;
    }
    if (v16 == 1 || v17 == 1)
    {
      LODWORD(v76) = IfNecessary;
      LODWORD(v77) = v19;
      v50 = (const char **)&v76;
      if ((IfNecessary & 6) == 2)
        v50 = &v77;
      *(_DWORD *)v50 = 4099;
      if (v16 == 1)
        v51 = &v73;
      else
        v51 = &v71;
      v52 = &v72;
      if (v16 == 1)
        v52 = (unint64_t *)&v74;
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)*v51, *v52, 0x1003uLL, v42, v43, v44, v45);
      v47 = *(_DWORD **)(a1 + 8);
      v60 = SBYTE1(v76);
      v61 = SBYTE1(v77);
      v48 = v47[50];
      if (v48 + 4 > v47[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 14), v53, v54, v55, v56, v57, v58, v59);
        v48 = v47[50];
      }
      v49 = (v46 >> 8) | (32 * v60) | (v61 << 16) | 0x1E200800;
    }
    else
    {
      v47 = *(_DWORD **)(a1 + 8);
      v48 = v47[50];
      if (v48 + 4 > v47[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 14), v39, v40, v41, v42, v43, v44, v45);
        v48 = v47[50];
      }
      v49 = ((__int16)v19 << 8) & 0xFFFF00FF | (v46 >> 8) | ((__int16)IfNecessary >> 3) & 0xE1DFF7E0 | 0x1E200800;
    }
    *(_DWORD *)(*((_QWORD *)v47 + 7) + v48) = v49;
    v47[50] += 4;
    *v70 = 0;
    v70[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Mul(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addF64Mul(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF64Mul(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addF64Mul(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(a8, a1, v9, (uint64_t)v8, a6, a1, a1, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addF64Mul(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF64Mul(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addF64Mul(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(_BYTE *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int IfNecessary;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  _DWORD *v56;
  unsigned int v57;
  unsigned int v58;
  const char **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  __int128 v74;
  const char *v75;
  unsigned int v76;

  if (*((_BYTE *)a3 + 8) == 1)
  {
    v13 = (_BYTE *)(a4 + 8);
    if (*(_BYTE *)(a4 + 8) == 1)
    {
      *(double *)a5 = *(double *)a3 * *(double *)a4;
      *(_WORD *)(a5 + 8) = -1023;
      if (HIBYTE(word_1ECF4C700))
      {
        v74 = *(_OWORD *)a5;
        v75 = "F64Mul";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a2)
        {
          v14 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v14;
          }
          while (v14 < *(_DWORD *)a2);
        }
        WTF::dataLog<char const*,char [2]>(&v75, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
        v20 = *((unsigned __int8 *)a3 + 8);
        if (v20 != 1 && v20 != 4)
        {
          v76 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, a3[1], v15, v16, v17, v18, v19);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v76);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t *)a4, (uint64_t *)&v74);
      }
LABEL_51:
      *a1 = 0;
      a1[8] = 0;
      return;
    }
    v71 = a6;
    v72 = a7;
    IfNecessary = 0;
    v76 = 0;
    goto LABEL_16;
  }
  v71 = a6;
  v72 = a7;
  v73 = 0;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *a3, a3[1], a4, a5, a6, a7, a8);
  v23 = 0;
  v76 = IfNecessary;
  v13 = (_BYTE *)(a4 + 8);
  if (*(_BYTE *)(a4 + 8) != 1)
  {
LABEL_16:
    v23 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), a4, a5, a6, a7, a8);
    v73 = v23;
  }
  v25 = *a3;
  v24 = a3[1];
  v26 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, v24, a4, a5, a6, a7, a8);
  if (v24 == 2)
  {
    v32 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v25 + 16;
    if (*(_DWORD *)(a2 + 1280) < v32)
      *(_DWORD *)(a2 + 1280) = v32;
    if ((v26 & 7) != 1 || ((-8 * v32) ^ v26) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v25, v24, v26);
  }
  v33 = *(_QWORD *)a4;
  v34 = *(_QWORD *)(a4 + 8);
  v35 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a4, v34, v27, v28, v29, v30, v31);
  if (v34 == 2)
  {
    v40 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v33 + 16;
    if (*(_DWORD *)(a2 + 1280) < v40)
      *(_DWORD *)(a2 + 1280) = v40;
    if ((v35 & 7) != 1 || ((-8 * v40) ^ v35) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v33, v34, v35);
  }
  v41 = *(_QWORD *)(a2 + 88);
  v42 = *(_DWORD *)(v41 + 596);
  if (v42)
  {
    if (*((_BYTE *)a3 + 8) == 1)
      v43 = v23;
    else
      v43 = IfNecessary;
    v44 = *(_QWORD *)(v41 + 584) + 1232 * v42;
    v45 = *(_DWORD *)(v41 + 68) + *(_DWORD *)(v44 - 32);
    if (*(_DWORD *)(v44 - 160) == 5)
      v46 = v45 + 1;
    else
      v46 = v45;
    *(_QWORD *)a5 = v46;
    *(_WORD *)(a5 + 8) = -1022;
    v54 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v46, *(_QWORD *)(a5 + 8), v43, v36, v37, v38, v39);
    if (HIBYTE(word_1ECF4C700))
    {
      v74 = *(_OWORD *)a5;
      v75 = "F64Mul";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v70 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v70;
        }
        while (v70 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v75, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v76);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, a4, (int *)&v73, (uint64_t *)&v74);
      IfNecessary = v76;
      v23 = v73;
    }
    v55 = *((unsigned __int8 *)a3 + 8);
    if (v55 == 1 || *v13 == 1)
    {
      LODWORD(v74) = IfNecessary;
      LODWORD(v75) = v23;
      v59 = (const char **)&v74;
      if ((IfNecessary & 6) == 2)
        v59 = &v75;
      *(_DWORD *)v59 = 4099;
      if (v55 == 1)
        v60 = (uint64_t)a3;
      else
        v60 = a4;
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(v72, *(JSC::ARM64LogicalImmediate **)v60, *(_QWORD *)(v60 + 8), 0x1003uLL, v50, v51, v52, v53);
      v56 = *(_DWORD **)(v72 + 8);
      v68 = SBYTE1(v74);
      v69 = SBYTE1(v75);
      v57 = v56[50];
      if (v57 + 4 > v56[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v56 + 14), v61, v62, v63, v64, v65, v66, v67);
        v57 = v56[50];
      }
      v58 = (v54 >> 8) | (32 * v68) | (v69 << 16) | 0x1E600800;
    }
    else
    {
      v56 = *(_DWORD **)(v71 + 8);
      v57 = v56[50];
      if (v57 + 4 > v56[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v56 + 14), v47, v48, v49, v50, v51, v52, v53);
        v57 = v56[50];
      }
      v58 = ((__int16)IfNecessary >> 3) & 0xFFFFFFE0 | (v54 >> 8) | ((__int16)v23 << 8) & 0xE19F00FF | 0x1E600800;
    }
    *(_DWORD *)(*((_QWORD *)v56 + 7) + v57) = v58;
    v56[50] += 4;
    goto LABEL_51;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32DivS(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _BYTE *a7@<X8>)
{
  _QWORD v7[2];
  uint64_t v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v7[0] = a4;
  v7[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI32DivS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI32DivS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI32DivS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(a7, a1, v8, (uint64_t)v7, a6, a1, a1, (uint64_t)a6, a1);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI32DivS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI32DivS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI32DivS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(_BYTE *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int IfNecessary;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int8x8_t v46;
  int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v59;
  __int128 v60;
  const char *v61;
  unsigned int v62;

  if (*((_BYTE *)a3 + 8) == 1)
  {
    if (*(_BYTE *)(a4 + 8) == 1)
    {
      v15 = *(_DWORD *)a3;
      if (*(_DWORD *)a4 == -1)
      {
        if (v15 == 0x80000000)
        {
          v16 = a6;
          v17 = 10;
          goto LABEL_39;
        }
      }
      else if (!*(_DWORD *)a4)
      {
        v16 = a6;
        v17 = 9;
LABEL_39:
        JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(v16, (JSC::ARM64LogicalImmediate *)v17, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
        v49 = 1;
        goto LABEL_41;
      }
      v49 = *(_DWORD *)a4;
LABEL_41:
      *a5 = (v15 / v49);
      *((_WORD *)a5 + 4) = -255;
      if (HIBYTE(word_1ECF4C700))
      {
        v60 = *(_OWORD *)a5;
        v61 = "I32DivS";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a2)
        {
          v51 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v51;
          }
          while (v51 < *(_DWORD *)a2);
        }
        WTF::dataLog<char const*,char [2]>(&v61, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
        v57 = *((unsigned __int8 *)a3 + 8);
        if (v57 != 1 && v57 != 4)
        {
          v62 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, a3[1], v52, v53, v54, v55, v56);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v62);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t *)a4, (uint64_t *)&v60);
      }
LABEL_42:
      *a1 = 0;
      a1[8] = 0;
      return;
    }
    IfNecessary = 0;
    v62 = 0;
    goto LABEL_9;
  }
  v59 = 0;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *a3, a3[1], a4, (uint64_t)a5, a6, a7, a8);
  v19 = 0;
  v62 = IfNecessary;
  if (*(_BYTE *)(a4 + 8) != 1)
  {
LABEL_9:
    v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), a4, (uint64_t)a5, a6, a7, a8);
    v59 = v19;
  }
  v20 = *a3;
  v21 = a3[1];
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, v21, a4, (uint64_t)a5, a6, a7, a8);
  if (v21 == 2)
  {
    v28 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v20 + 16;
    if (*(_DWORD *)(a2 + 1280) < v28)
      *(_DWORD *)(a2 + 1280) = v28;
    if ((v22 & 7) != 1 || ((-8 * v28) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v20, v21, v22);
  }
  v29 = *(_QWORD *)a4;
  v30 = *(_QWORD *)(a4 + 8);
  v31 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a4, v30, v23, v24, v25, v26, v27);
  if (v30 == 2)
  {
    v36 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v29 + 16;
    if (*(_DWORD *)(a2 + 1280) < v36)
      *(_DWORD *)(a2 + 1280) = v36;
    if ((v31 & 7) != 1 || ((-8 * v36) ^ v31) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v29, v30, v31);
  }
  v37 = *(_QWORD *)(a2 + 88);
  v38 = *(_DWORD *)(v37 + 596);
  if (v38)
  {
    if (*((_BYTE *)a3 + 8) == 1)
      v39 = v19;
    else
      v39 = IfNecessary;
    v40 = *(_QWORD *)(v37 + 584) + 1232 * v38;
    v41 = *(_DWORD *)(v37 + 68) + *(_DWORD *)(v40 - 32);
    if (*(_DWORD *)(v40 - 160) == 5)
      v42 = v41 + 1;
    else
      v42 = v41;
    *a5 = v42;
    *((_WORD *)a5 + 4) = -254;
    v45 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v42, a5[1], v39, v32, v33, v34, v35);
    if (HIBYTE(word_1ECF4C700))
    {
      v60 = *(_OWORD *)a5;
      v61 = "I32DivS";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v50 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v50;
        }
        while (v50 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v61, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v62);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, a4, (int *)&v59, (uint64_t *)&v60);
      IfNecessary = v62;
      v19 = v59;
    }
    if (*(_BYTE *)(a4 + 8) != 1 && *((_BYTE *)a3 + 8) != 1)
      a9 = a7;
    JSC::Wasm::BBQJITImpl::BBQJIT::emitModOrDiv<int,false>(a9, (int *)a3, IfNecessary, a4, v19, v45, v43, v44, v46);
    goto LABEL_42;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64DivS(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, JSC::ARM64LogicalImmediate *a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v11;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int IfNecessary;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int8x8_t v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  unint64_t v56;
  JSC::ARM64LogicalImmediate *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  _DWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  _DWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  _DWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  _DWORD *v118;
  _DWORD *v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  _DWORD *v126;
  _QWORD *v127;
  _DWORD *v128;
  char v129;
  unsigned int v130;
  _DWORD *v131;
  _DWORD *v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  _DWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int8x8_t v144;
  _DWORD *v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  _DWORD *v149;
  unsigned int v150;
  unsigned int v151;
  _DWORD *v152;
  int v153;
  int v154;
  int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  _DWORD *v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  unint64_t v165;
  _DWORD *v166;
  _QWORD *v167;
  _DWORD *v168;
  _DWORD *v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v187;
  char v188;
  _BYTE *v189;
  JSC::ARM64LogicalImmediate *v190;
  unint64_t v191;
  JSC::ARM64LogicalImmediate *v192;
  unint64_t v193;
  unsigned int v194;
  unsigned int v195;
  __int128 v196;
  uint64_t v197;
  char v198;
  int v199;
  uint64_t v200;
  __int128 v201;

  v11 = (uint64_t)a4;
  v192 = (JSC::ARM64LogicalImmediate *)a2;
  v193 = a3;
  v190 = a4;
  v191 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 != 1)
  {
    v189 = a9;
    v194 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
    v20 = 0;
    v195 = IfNecessary;
    if (v17 == 1)
    {
LABEL_11:
      v21 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
      if (v16 == 2)
      {
        v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
        if (*(_DWORD *)(a1 + 1280) < v27)
          *(_DWORD *)(a1 + 1280) = v27;
        if ((v21 & 7) != 1 || ((-8 * v27) ^ v21) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v21);
      }
      v28 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v11, a5, v22, v23, v24, v25, v26);
      if (a5 == 2)
      {
        v33 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v11 + 16;
        if (*(_DWORD *)(a1 + 1280) < v33)
          *(_DWORD *)(a1 + 1280) = v33;
        if ((v28 & 7) != 1 || ((-8 * v33) ^ v28) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v11, a5, v28);
      }
      v34 = *(_QWORD *)(a1 + 88);
      v35 = *(_DWORD *)(v34 + 596);
      if (!v35)
      {
        __break(0xC471u);
        goto LABEL_175;
      }
      if (v16 == 1)
        v36 = v20;
      else
        v36 = IfNecessary;
      v37 = *(_QWORD *)(v34 + 584) + 1232 * v35;
      v38 = *(_DWORD *)(v34 + 68) + *(_DWORD *)(v37 - 32);
      if (*(_DWORD *)(v37 - 160) == 5)
        v39 = v38 + 1;
      else
        v39 = v38;
      *a6 = v39;
      *((_WORD *)a6 + 4) = -510;
      v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v39, a6[1], v36, v29, v30, v31, v32);
      if (HIBYTE(word_1ECF4C700))
      {
        v196 = *(_OWORD *)a6;
        *(_QWORD *)&v201 = "I64DivS";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v175 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v175;
          }
          while (v175 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>((const char **)&v201, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v192);
        if ((IfNecessary & 7) != 0)
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v195);
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v190, (int *)&v194, (uint64_t *)&v196);
        v20 = v194;
        IfNecessary = v195;
        v17 = v191;
      }
      v48 = IfNecessary;
      v49 = v46;
      v50 = (unint64_t)IfNecessary >> 16;
      if (v17 != 1)
      {
        v55 = v20;
        v56 = (unint64_t)v20 >> 16;
        if (v193 == 1)
        {
          v57 = v192;
          JSC::MacroAssemblerARM64::branchTest64(*(_QWORD *)(a1 + 8), 0, ((__int16)v20 >> 8), 0xFFFFFFFFLL, v42, v43, v44, v45, (uint64_t)&v201, v47);
          v65 = *(_QWORD *)((char *)&v201 + 4);
          LODWORD(v196) = v201;
          *(_QWORD *)((char *)&v196 + 4) = *(_QWORD *)((char *)&v201 + 4);
          if ((_DWORD)v201 != -1)
          {
            v66 = (_QWORD *)(a1 + 1720);
            v67 = *(unsigned int *)(a1 + 1732);
            if ((_DWORD)v67 == *(_DWORD *)(a1 + 1728))
            {
              v68 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, (void *)(v67 + 1), (unint64_t)&v196, v60, v61, v62, v63, v64);
              v69 = (_DWORD *)(*(_QWORD *)(a1 + 1720) + 12 * *(unsigned int *)(a1 + 1732));
              *v69 = *(_DWORD *)v68;
              v70 = v69 + 1;
              v65 = *(_QWORD *)(v68 + 4);
            }
            else
            {
              v118 = (_DWORD *)(*v66 + 12 * v67);
              *v118 = v201;
              v70 = v118 + 1;
            }
            *v70 = v65;
            ++*(_DWORD *)(a1 + 1732);
          }
          if (v57 == (JSC::ARM64LogicalImmediate *)0x8000000000000000)
          {
            JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 0, ((__int16)v20 >> 8), -1, v61, v62, v63, v64, (uint64_t)&v199);
            v122 = v200;
            LODWORD(v196) = v199;
            *(_QWORD *)((char *)&v196 + 4) = v200;
            if (v199 != -1)
            {
              v123 = (_QWORD *)(a1 + 1760);
              v124 = *(unsigned int *)(a1 + 1772);
              if ((_DWORD)v124 == *(_DWORD *)(a1 + 1768))
              {
                v125 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v123, (void *)(v124 + 1), (unint64_t)&v196, v121, v61, v62, v63, v64);
                v126 = (_DWORD *)(*(_QWORD *)(a1 + 1760) + 12 * *(unsigned int *)(a1 + 1772));
                *v126 = *(_DWORD *)v125;
                v127 = v126 + 1;
                v122 = *(_QWORD *)(v125 + 4);
              }
              else
              {
                v136 = (_DWORD *)(*v123 + 12 * v124);
                *v136 = v199;
                v127 = v136 + 1;
              }
              *v127 = v122;
              ++*(_DWORD *)(a1 + 1772);
            }
          }
          else if (!v57)
          {
            v119 = *(_DWORD **)(a1 + 8);
            v120 = v119[50];
            if (v120 + 4 > v119[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v119 + 14), v58, v59, v60, v61, v62, v63, v64);
              v120 = v119[50];
            }
            *(_DWORD *)(*((_QWORD *)v119 + 7) + v120) = (65569 * ((v46 >> 8) & 0x1F)) | 0xCA000000;
            v119[50] += 4;
            goto LABEL_134;
          }
          v130 = v20 >> 8;
          JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v192, v193, 0x802uLL, v61, v62, v63, v64);
          LODWORD(v50) = 0;
          LOBYTE(v20) = 8;
          v129 = 1;
          LOBYTE(v48) = 2;
        }
        else
        {
          JSC::MacroAssemblerARM64::branchTest64(*(_QWORD *)(a1 + 8), 0, ((__int16)v20 >> 8), 0xFFFFFFFFLL, v42, v43, v44, v45, (uint64_t)&v201, v47);
          v76 = *(_QWORD *)((char *)&v201 + 4);
          LODWORD(v196) = v201;
          *(_QWORD *)((char *)&v196 + 4) = *(_QWORD *)((char *)&v201 + 4);
          if ((_DWORD)v201 != -1)
          {
            v77 = (_QWORD *)(a1 + 1720);
            v78 = *(unsigned int *)(a1 + 1732);
            if ((_DWORD)v78 == *(_DWORD *)(a1 + 1728))
            {
              v79 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v77, (void *)(v78 + 1), (unint64_t)&v196, v71, v72, v73, v74, v75);
              v80 = (_DWORD *)(*(_QWORD *)(a1 + 1720) + 12 * *(unsigned int *)(a1 + 1732));
              *v80 = *(_DWORD *)v79;
              v81 = v80 + 1;
              v76 = *(_QWORD *)(v79 + 4);
            }
            else
            {
              v128 = (_DWORD *)(*v77 + 12 * v78);
              *v128 = v201;
              v81 = v128 + 1;
            }
            *v81 = v76;
            ++*(_DWORD *)(a1 + 1732);
          }
          v129 = 0;
          v130 = v20 >> 8;
          v20 = v48 >> 8;
        }
        goto LABEL_102;
      }
      v51 = IfNecessary >> 8;
      v52 = (unint64_t)v190;
      if (v190 == (JSC::ARM64LogicalImmediate *)-1)
      {
        JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 0, ((__int16)v48 >> 8), 0x8000000000000000, v42, v43, v44, v45, (uint64_t)&v201);
        v92 = *(_QWORD *)((char *)&v201 + 4);
        LODWORD(v196) = v201;
        *(_QWORD *)((char *)&v196 + 4) = *(_QWORD *)((char *)&v201 + 4);
        if ((_DWORD)v201 != -1)
        {
          v93 = (_QWORD *)(a1 + 1760);
          v94 = *(unsigned int *)(a1 + 1772);
          if ((_DWORD)v94 == *(_DWORD *)(a1 + 1768))
          {
            v95 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, (void *)(v94 + 1), (unint64_t)&v196, v87, v88, v89, v90, v91);
            v96 = (_DWORD *)(*(_QWORD *)(a1 + 1760) + 12 * *(unsigned int *)(a1 + 1772));
            *v96 = *(_DWORD *)v95;
            v97 = v96 + 1;
            v92 = *(_QWORD *)(v95 + 4);
          }
          else
          {
            v131 = (_DWORD *)(*v93 + 12 * v94);
            *v131 = v201;
            v97 = v131 + 1;
          }
          *v97 = v92;
          ++*(_DWORD *)(a1 + 1772);
        }
        v132 = *(_DWORD **)(a1 + 8);
        v133 = (v51 & 0x1F) << 16;
        if (BYTE1(v46) == 31)
          v134 = v133 | 0xCB2067FF;
        else
          v134 = (v46 >> 8) & 0x1F | 0xCB0003E0 | v133;
        v135 = v132[50];
        if (v135 + 4 > v132[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v132 + 14), v85, v86, v87, v88, v89, v90, v91);
          v135 = v132[50];
        }
        *(_DWORD *)(*((_QWORD *)v132 + 7) + v135) = v134;
        v132[50] += 4;
        goto LABEL_134;
      }
      v53 = (unint64_t)v46 >> 8;
      v54 = (uint64_t)v190 - 1;
      if (v190 != (JSC::ARM64LogicalImmediate *)1)
      {
        if (!v190)
        {
          JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)9, v40, v41, v42, v43, v44, v45);
LABEL_134:
          *v189 = 0;
          v189[8] = 0;
          return;
        }
        if (((unint64_t)v190 & v54) == 0)
        {
          JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), v54, ((__int16)v48 >> 8), 8, v42, v43, v44, v45);
          v105 = *(_DWORD **)(a1 + 8);
          v106 = (v48 >> 8) & 0x1F;
          v107 = v105[50];
          if (v107 + 4 > v105[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v105 + 14), v98, v99, v100, v101, v102, v103, v104);
            v107 = v105[50];
          }
          *(_DWORD *)(*((_QWORD *)v105 + 7) + v107) = (32 * v106) & 0xFFE0FFFF | (((v48 >> 8) & 0x1F) << 16) | 0xEA00001F;
          v108 = v105[50];
          v109 = v108 + 4;
          v105[50] = v108 + 4;
          if ((v108 + 8) > v105[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v105 + 14), v98, v99, v100, v101, v102, v103, v104);
            v109 = v105[50];
          }
          *(_DWORD *)(*((_QWORD *)v105 + 7) + v109) = (32 * v106) | 0x9A885008;
          v105[50] += 4;
          v110 = *(_QWORD *)(a1 + 8);
          v111 = HIDWORD(v52);
          if (HIDWORD(v52))
          {
            v187 = (HIDWORD(v52) & (HIDWORD(v52) - 1)) != 0;
            if (HIDWORD(v52) >= 0x10000)
            {
              LODWORD(v111) = HIWORD(HIDWORD(v52));
              v187 |= 0x10u;
            }
            if (v111 >= 0x100)
            {
              LODWORD(v111) = v111 >> 8;
              v187 += 8;
            }
            if (v111 >= 0x10)
            {
              LODWORD(v111) = v111 >> 4;
              v187 += 4;
            }
            if (v111 >= 4)
            {
              LODWORD(v111) = v111 >> 2;
              v187 += 2;
            }
            if (v111 <= 1)
              v188 = v187;
            else
              v188 = v187 + 1;
            LOBYTE(v112) = v188 + 32;
          }
          else
          {
            v112 = (v52 & ((_DWORD)v52 - 1)) != 0;
            if (v52 >= 0x10000)
            {
              LODWORD(v52) = WORD1(v52);
              v112 |= 0x10u;
            }
            if (v52 >= 0x100)
            {
              LODWORD(v52) = v52 >> 8;
              v112 += 8;
            }
            v113 = v52 >> 4;
            if (v52 >= 0x10)
              v112 += 4;
            else
              v113 = v52;
            if (v113 >= 4)
            {
              v113 >>= 2;
              v112 += 2;
            }
            if (v113 > 1)
              ++v112;
            if (!v112)
            {
              if (v53 == 8)
                goto LABEL_134;
              if (v53 == 31)
                v114 = -1862270689;
              else
                v114 = (v49 >> 8) & 0x1F | 0xAA0803E0;
LABEL_70:
              v117 = *(_DWORD *)(v110 + 200);
              v116 = (unsigned int *)(v110 + 200);
              v115 = v117;
              if (v117 + 4 > *(v116 - 2))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v116 - 36), v98, v99, v100, v101, v102, v103, v104);
                v115 = *v116;
              }
              *(_DWORD *)(*((_QWORD *)v116 - 18) + v115) = v114;
              *v116 += 4;
              goto LABEL_134;
            }
          }
          v114 = (v49 >> 8) & 0x1F | ((v112 & 0x3F) << 16) | 0x9340FD00;
          goto LABEL_70;
        }
        v20 = v48 >> 8;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v190, v191, 0x802uLL, v42, v43, v44, v45);
        LODWORD(v56) = 0;
        LOBYTE(v130) = 8;
        v129 = 1;
        v55 = 2;
LABEL_102:
        JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::ScratchScope<JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location>((uint64_t)&v196, a1, ((_DWORD)v50 << 16) | (v20 << 8) | v48, ((_DWORD)v56 << 16) | (v130 << 8) | v55, v49);
        if ((v129 & 1) == 0)
        {
          v145 = *(_DWORD **)(a1 + 8);
          v146 = v145[50];
          if (v146 + 4 > v145[48])
          {
            v144 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v145 + 14), v137, v138, v139, v140, v141, v142, v143).n128_u64[0];
            v146 = v145[50];
          }
          *(_DWORD *)(*((_QWORD *)v145 + 7) + v146) = (32 * (char)v130) | 0xB100041F;
          v147 = v145[50];
          v148 = v147 + 4;
          v145[50] = v147 + 4;
          if ((v147 + 8) > v145[48])
          {
            v144 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v145 + 14), v137, v138, v139, v140, v141, v142, v143).n128_u64[0];
            v148 = v145[50];
          }
          *(_DWORD *)(*((_QWORD *)v145 + 7) + v148) = 446633960;
          v145[50] += 4;
          v149 = *(_DWORD **)(a1 + 8);
          v150 = SBYTE8(v196) | 0xB24103E0;
          v151 = v149[50];
          if (v151 + 4 > v149[48])
          {
            v144 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v149 + 14), v137, v138, v139, v140, v141, v142, v143).n128_u64[0];
            v151 = v149[50];
          }
          *(_DWORD *)(*((_QWORD *)v149 + 7) + v151) = v150;
          v149[50] += 4;
          v152 = *(_DWORD **)(a1 + 8);
          v153 = BYTE8(v196) & 0x1F;
          v154 = v153 << 16;
          if (v20 == 31)
          {
            v155 = -350198785;
          }
          else
          {
            v154 |= 32 * (v20 & 0x1F);
            v155 = -352321505;
          }
          v156 = v154 | v155;
          v157 = v152[50];
          if (v157 + 4 > v152[48])
          {
            v144 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v152 + 14), v137, v138, v139, v140, v141, v142, v143).n128_u64[0];
            v157 = v152[50];
          }
          *(_DWORD *)(*((_QWORD *)v152 + 7) + v157) = v156;
          v158 = v152[50] + 4;
          v152[50] = v158;
          if (v158 + 4 > v152[48])
          {
            v144 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v152 + 14), v137, v138, v139, v140, v141, v142, v143).n128_u64[0];
            v158 = v152[50];
          }
          *(_DWORD *)(*((_QWORD *)v152 + 7) + v158) = v153 | 0x1A9F17E0;
          v152[50] += 4;
          v159 = *(_DWORD **)(a1 + 8);
          v160 = BYTE8(v196);
          v161 = v159[50];
          if (v161 + 4 > v159[48])
          {
            v144 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v159 + 14), v137, v138, v139, v140, v141, v142, v143).n128_u64[0];
            v161 = v159[50];
          }
          *(_DWORD *)(*((_QWORD *)v159 + 7) + v161) = ((v160 & 0x1F) << 16) | 0x8A000108;
          v159[50] += 4;
          JSC::MacroAssemblerARM64::branchTest64(*(_QWORD *)(a1 + 8), 1, 8, 0xFFFFFFFFLL, v140, v141, v142, v143, (uint64_t)&v199, v144);
          v162 = v200;
          LODWORD(v201) = v199;
          *(_QWORD *)((char *)&v201 + 4) = v200;
          if (v199 != -1)
          {
            v163 = (_QWORD *)(a1 + 1760);
            v164 = *(unsigned int *)(a1 + 1772);
            if ((_DWORD)v164 == *(_DWORD *)(a1 + 1768))
            {
              v165 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v163, (void *)(v164 + 1), (unint64_t)&v201, v139, v140, v141, v142, v143);
              v166 = (_DWORD *)(*(_QWORD *)(a1 + 1760) + 12 * *(unsigned int *)(a1 + 1772));
              *v166 = *(_DWORD *)v165;
              v167 = v166 + 1;
              v162 = *(_QWORD *)(v165 + 4);
            }
            else
            {
              v168 = (_DWORD *)(*v163 + 12 * v164);
              *v168 = v199;
              v167 = v168 + 1;
            }
            *v167 = v162;
            ++*(_DWORD *)(a1 + 1772);
          }
        }
        v169 = *(_DWORD **)(a1 + 8);
        v170 = v169[50];
        if (v170 + 4 > v169[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v169 + 14), v137, v138, v139, v140, v141, v142, v143);
          v170 = v169[50];
        }
        *(_DWORD *)(*((_QWORD *)v169 + 7) + v170) = (unsigned __int16)(32 * (v20 & 0x1F)) | ((v130 & 0x1F) << 16) | (v49 >> 8) & 0x1F | 0x9AC00C00;
        v169[50] += 4;
        if (v198)
          goto LABEL_133;
        v198 = 1;
        v171 = BYTE8(v196) & 0x7F;
        if (v171 < 0x40)
        {
          v172 = 1 << v171;
          if ((*(_QWORD *)(v196 + 648) & (1 << v171)) == 0)
          {
LABEL_133:
            JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindPreserved((uint64_t)&v196);
            goto LABEL_134;
          }
          v173 = SBYTE8(v196);
          if (*(unsigned int *)(v196 + 340) > (unint64_t)SBYTE8(v196))
          {
            v174 = *(_QWORD *)(v196 + 328) + 4 * SBYTE8(v196);
            *(int8x16_t *)(v196 + 992) = vandq_s8(*(int8x16_t *)(v196 + 992), (int8x16_t)vdupq_n_s64(~v172));
            if ((_BYTE)word_1ECF4C700)
            {
              v201 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v173];
              WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v201, "\n");
            }
            if ((v197 & v172) == 0 || (*(_WORD *)(v174 + 1) & 7) == 3)
            {
              *(_DWORD *)v174 = 0;
              *(_QWORD *)(v196 + 616) |= 1 << v171;
            }
            goto LABEL_133;
          }
LABEL_176:
          __break(0xC471u);
          JUMPOUT(0x198F1AC30);
        }
LABEL_175:
        __break(1u);
        goto LABEL_176;
      }
      if (BYTE1(v48) == BYTE1(v49))
        goto LABEL_134;
      v82 = *(_QWORD *)(a1 + 8);
      if (BYTE1(v48) == 63)
      {
        if (BYTE1(v49) != 31)
        {
          v176 = (v49 >> 8) & 0x1F | 0xD2800000;
LABEL_145:
          v179 = *(_DWORD *)(v82 + 200);
          v178 = (unsigned int *)(v82 + 200);
          v177 = v179;
          if (v179 + 4 > *(v178 - 2))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v178 - 36), v54, v40, v41, v42, v43, v44, v45);
            v177 = *v178;
          }
          *(_DWORD *)(*((_QWORD *)v178 - 18) + v177) = v176;
          *v178 += 4;
          goto LABEL_134;
        }
      }
      else if (BYTE1(v49) != 31 && BYTE1(v48) != 31)
      {
        v83 = (v49 >> 8) & 0x1F | ((v51 & 0x1F) << 16);
        v84 = -1442839584;
LABEL_144:
        v176 = v83 | v84;
        goto LABEL_145;
      }
      v83 = (char)v53 | (32 * (char)v51);
      v84 = -1862270976;
      goto LABEL_144;
    }
LABEL_10:
    v20 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, v11, a5, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
    v194 = v20;
    goto LABEL_11;
  }
  if (a5 != 1)
  {
    v189 = a9;
    IfNecessary = 0;
    v195 = 0;
    goto LABEL_10;
  }
  if (!a4)
  {
    v18 = 9;
LABEL_74:
    JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)v18, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
    v11 = 1;
    goto LABEL_90;
  }
  if (a4 == (JSC::ARM64LogicalImmediate *)-1)
  {
    if (a2 != 0x8000000000000000)
    {
      v11 = -1;
      goto LABEL_90;
    }
    v18 = 10;
    goto LABEL_74;
  }
LABEL_90:
  *a6 = a2 / v11;
  *((_WORD *)a6 + 4) = -511;
  if (HIBYTE(word_1ECF4C700))
  {
    v196 = *(_OWORD *)a6;
    *(_QWORD *)&v201 = "I64DivS";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v180 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v180;
      }
      while (v180 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>((const char **)&v201, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v192);
    if (v193 != 1 && v193 != 4)
    {
      v199 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v192, v193, v181, v182, v183, v184, v185);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v199);
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t *)&v190, (uint64_t *)&v196);
  }
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32DivU(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _BYTE *a7@<X8>)
{
  _QWORD v7[2];
  uint64_t v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v7[0] = a4;
  v7[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI32DivU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI32DivU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI32DivU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(a7, a1, v8, (uint64_t)v7, a6, a1, a1, (uint64_t)a6, a1);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI32DivU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI32DivU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI32DivU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(_BYTE *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int IfNecessary;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int8x8_t v46;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v59;
  __int128 v60;
  const char *v61;
  unsigned int v62;

  if (*((_BYTE *)a3 + 8) == 1)
  {
    if (*(_BYTE *)(a4 + 8) == 1)
    {
      v15 = *(_DWORD *)a3;
      if (*(_DWORD *)a4 == -1)
      {
        if (v15 == 0x80000000)
        {
          v16 = a6;
          v17 = 10;
          goto LABEL_39;
        }
      }
      else if (!*(_DWORD *)a4)
      {
        v16 = a6;
        v17 = 9;
LABEL_39:
        JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(v16, (JSC::ARM64LogicalImmediate *)v17, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
        v49 = 1;
        goto LABEL_41;
      }
      v49 = *(_DWORD *)a4;
LABEL_41:
      *a5 = v15 / v49;
      *((_WORD *)a5 + 4) = -255;
      if (HIBYTE(word_1ECF4C700))
      {
        v60 = *(_OWORD *)a5;
        v61 = "I32DivU";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a2)
        {
          v51 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v51;
          }
          while (v51 < *(_DWORD *)a2);
        }
        WTF::dataLog<char const*,char [2]>(&v61, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
        v57 = *((unsigned __int8 *)a3 + 8);
        if (v57 != 1 && v57 != 4)
        {
          v62 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, a3[1], v52, v53, v54, v55, v56);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v62);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t *)a4, (uint64_t *)&v60);
      }
LABEL_42:
      *a1 = 0;
      a1[8] = 0;
      return;
    }
    IfNecessary = 0;
    v62 = 0;
    goto LABEL_9;
  }
  v59 = 0;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *a3, a3[1], a4, (uint64_t)a5, a6, a7, a8);
  v19 = 0;
  v62 = IfNecessary;
  if (*(_BYTE *)(a4 + 8) != 1)
  {
LABEL_9:
    v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), a4, (uint64_t)a5, a6, a7, a8);
    v59 = v19;
  }
  v20 = *a3;
  v21 = a3[1];
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, v21, a4, (uint64_t)a5, a6, a7, a8);
  if (v21 == 2)
  {
    v28 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v20 + 16;
    if (*(_DWORD *)(a2 + 1280) < v28)
      *(_DWORD *)(a2 + 1280) = v28;
    if ((v22 & 7) != 1 || ((-8 * v28) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v20, v21, v22);
  }
  v29 = *(_QWORD *)a4;
  v30 = *(_QWORD *)(a4 + 8);
  v31 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a4, v30, v23, v24, v25, v26, v27);
  if (v30 == 2)
  {
    v36 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v29 + 16;
    if (*(_DWORD *)(a2 + 1280) < v36)
      *(_DWORD *)(a2 + 1280) = v36;
    if ((v31 & 7) != 1 || ((-8 * v36) ^ v31) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v29, v30, v31);
  }
  v37 = *(_QWORD *)(a2 + 88);
  v38 = *(_DWORD *)(v37 + 596);
  if (v38)
  {
    if (*((_BYTE *)a3 + 8) == 1)
      v39 = v19;
    else
      v39 = IfNecessary;
    v40 = *(_QWORD *)(v37 + 584) + 1232 * v38;
    v41 = *(_DWORD *)(v37 + 68) + *(_DWORD *)(v40 - 32);
    if (*(_DWORD *)(v40 - 160) == 5)
      v42 = v41 + 1;
    else
      v42 = v41;
    *a5 = v42;
    *((_WORD *)a5 + 4) = -254;
    v45 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v42, a5[1], v39, v32, v33, v34, v35);
    if (HIBYTE(word_1ECF4C700))
    {
      v60 = *(_OWORD *)a5;
      v61 = "I32DivU";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v50 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v50;
        }
        while (v50 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v61, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v62);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, a4, (int *)&v59, (uint64_t *)&v60);
      IfNecessary = v62;
      v19 = v59;
    }
    if (*(_BYTE *)(a4 + 8) != 1 && *((_BYTE *)a3 + 8) != 1)
      a9 = a7;
    JSC::Wasm::BBQJITImpl::BBQJIT::emitModOrDiv<unsigned int,false>(a9, (int *)a3, IfNecessary, a4, v19, v45, v43, v44, v46);
    goto LABEL_42;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64DivU(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, _BYTE *a7@<X8>)
{
  _QWORD v7[2];
  uint64_t v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v7[0] = a4;
  v7[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI64DivU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI64DivU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI64DivU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(a7, a1, v8, (uint64_t)v7, a6, a1, a1, (uint64_t)a6, a1);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI64DivU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI64DivU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI64DivU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(_BYTE *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int IfNecessary;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int8x8_t v46;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v58;
  __int128 v59;
  const char *v60;
  unsigned int v61;

  if (*((_BYTE *)a3 + 8) == 1)
  {
    if (*(_BYTE *)(a4 + 8) == 1)
    {
      v15 = *a3;
      v16 = *(_QWORD *)a4;
      if (*(_QWORD *)a4)
      {
        if (v16 != -1)
          goto LABEL_41;
        if (v15 != 0x8000000000000000)
        {
          v16 = -1;
LABEL_41:
          *a5 = v15 / v16;
          *((_WORD *)a5 + 4) = -511;
          if (HIBYTE(word_1ECF4C700))
          {
            v59 = *(_OWORD *)a5;
            v60 = "I64DivU";
            WTF::dataLog<char [16]>("BBQ\t");
            if (*(_DWORD *)a2)
            {
              v50 = 0;
              do
              {
                WTF::dataLog<char [16]>(" ");
                ++v50;
              }
              while (v50 < *(_DWORD *)a2);
            }
            WTF::dataLog<char const*,char [2]>(&v60, " ");
            WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
            v56 = *((unsigned __int8 *)a3 + 8);
            if (v56 != 1 && v56 != 4)
            {
              v61 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, a3[1], v51, v52, v53, v54, v55);
              WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v61);
            }
            JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t *)a4, (uint64_t *)&v59);
          }
LABEL_42:
          *a1 = 0;
          a1[8] = 0;
          return;
        }
        v17 = 10;
      }
      else
      {
        v17 = 9;
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a6, (JSC::ARM64LogicalImmediate *)v17, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
      v16 = 1;
      goto LABEL_41;
    }
    IfNecessary = 0;
    v61 = 0;
    goto LABEL_10;
  }
  v58 = 0;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *a3, a3[1], a4, (uint64_t)a5, a6, a7, a8);
  v19 = 0;
  v61 = IfNecessary;
  if (*(_BYTE *)(a4 + 8) != 1)
  {
LABEL_10:
    v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), a4, (uint64_t)a5, a6, a7, a8);
    v58 = v19;
  }
  v20 = *a3;
  v21 = a3[1];
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, v21, a4, (uint64_t)a5, a6, a7, a8);
  if (v21 == 2)
  {
    v28 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v20 + 16;
    if (*(_DWORD *)(a2 + 1280) < v28)
      *(_DWORD *)(a2 + 1280) = v28;
    if ((v22 & 7) != 1 || ((-8 * v28) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v20, v21, v22);
  }
  v29 = *(_QWORD *)a4;
  v30 = *(_QWORD *)(a4 + 8);
  v31 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a4, v30, v23, v24, v25, v26, v27);
  if (v30 == 2)
  {
    v36 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v29 + 16;
    if (*(_DWORD *)(a2 + 1280) < v36)
      *(_DWORD *)(a2 + 1280) = v36;
    if ((v31 & 7) != 1 || ((-8 * v36) ^ v31) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v29, v30, v31);
  }
  v37 = *(_QWORD *)(a2 + 88);
  v38 = *(_DWORD *)(v37 + 596);
  if (v38)
  {
    if (*((_BYTE *)a3 + 8) == 1)
      v39 = v19;
    else
      v39 = IfNecessary;
    v40 = *(_QWORD *)(v37 + 584) + 1232 * v38;
    v41 = *(_DWORD *)(v37 + 68) + *(_DWORD *)(v40 - 32);
    if (*(_DWORD *)(v40 - 160) == 5)
      v42 = v41 + 1;
    else
      v42 = v41;
    *a5 = v42;
    *((_WORD *)a5 + 4) = -510;
    v45 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v42, a5[1], v39, v32, v33, v34, v35);
    if (HIBYTE(word_1ECF4C700))
    {
      v59 = *(_OWORD *)a5;
      v60 = "I64DivU";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v49 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v49;
        }
        while (v49 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v60, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v61);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, a4, (int *)&v58, (uint64_t *)&v59);
      IfNecessary = v61;
      v19 = v58;
    }
    if (*(_BYTE *)(a4 + 8) != 1 && *((_BYTE *)a3 + 8) != 1)
      a9 = a7;
    JSC::Wasm::BBQJITImpl::BBQJIT::emitModOrDiv<unsigned long long,false>(a9, (uint64_t)a3, IfNecessary, (unint64_t *)a4, v19, v45, v43, v44, v46);
    goto LABEL_42;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32RemS(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, JSC::ARM64LogicalImmediate *a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v11;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int IfNecessary;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int8x8_t v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  _DWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  _DWORD *v78;
  _QWORD *v79;
  _DWORD *v80;
  unsigned int v81;
  _DWORD *v82;
  unsigned int v83;
  char v84;
  _DWORD *v85;
  unsigned int v86;
  char v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  _DWORD *v105;
  unsigned int v106;
  unsigned int v107;
  _DWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  _DWORD *v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  int v122;
  _DWORD *v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  _BYTE *v141;
  JSC::ARM64LogicalImmediate *v142;
  unint64_t v143;
  JSC::ARM64LogicalImmediate *v144;
  unint64_t v145;
  unsigned int v146;
  unsigned int v147;
  __int128 v148;
  uint64_t v149;
  char v150;
  __int128 v151;

  v11 = (uint64_t)a4;
  v15 = a9;
  v144 = (JSC::ARM64LogicalImmediate *)a2;
  v145 = a3;
  v142 = a4;
  v143 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 != 1)
  {
    v141 = a9;
    v146 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
    v20 = 0;
    v147 = IfNecessary;
    if (v17 == 1)
    {
LABEL_11:
      v21 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
      if (v16 == 2)
      {
        v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
        if (*(_DWORD *)(a1 + 1280) < v27)
          *(_DWORD *)(a1 + 1280) = v27;
        if ((v21 & 7) != 1 || ((-8 * v27) ^ v21) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v21);
      }
      v28 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v11, a5, v22, v23, v24, v25, v26);
      if (a5 == 2)
      {
        v33 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v11 + 16;
        if (*(_DWORD *)(a1 + 1280) < v33)
          *(_DWORD *)(a1 + 1280) = v33;
        if ((v28 & 7) != 1 || ((-8 * v33) ^ v28) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v11, a5, v28);
      }
      v34 = *(_QWORD *)(a1 + 88);
      v35 = *(_DWORD *)(v34 + 596);
      if (!v35)
      {
        __break(0xC471u);
        goto LABEL_123;
      }
      if (v16 == 1)
        v36 = v20;
      else
        v36 = IfNecessary;
      v37 = *(_QWORD *)(v34 + 584) + 1232 * v35;
      v38 = *(_DWORD *)(v34 + 68) + *(_DWORD *)(v37 - 32);
      if (*(_DWORD *)(v37 - 160) == 5)
        v39 = v38 + 1;
      else
        v39 = v38;
      *a6 = v39;
      *((_WORD *)a6 + 4) = -254;
      v47 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v39, a6[1], v36, v29, v30, v31, v32);
      if (HIBYTE(word_1ECF4C700))
      {
        v148 = *(_OWORD *)a6;
        *(_QWORD *)&v151 = "I32RemS";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v129 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v129;
          }
          while (v129 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>((const char **)&v151, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v144);
        if ((IfNecessary & 7) != 0)
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v147);
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v142, (int *)&v146, (uint64_t *)&v148);
        v20 = v146;
        IfNecessary = v147;
        v17 = v143;
      }
      v49 = IfNecessary;
      v50 = v47;
      v51 = BYTE1(IfNecessary);
      v52 = (unint64_t)IfNecessary >> 16;
      if (v17 != 1)
      {
        v54 = (unint64_t)v20 >> 16;
        if (v145 == 1)
        {
          v55 = (int)v144;
          JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 0, ((__int16)v20 >> 8), v43, v44, v45, v46, (uint64_t)&v151, v48);
          v63 = *(_QWORD *)((char *)&v151 + 4);
          LODWORD(v148) = v151;
          *(_QWORD *)((char *)&v148 + 4) = *(_QWORD *)((char *)&v151 + 4);
          if ((_DWORD)v151 != -1)
          {
            v64 = (_QWORD *)(a1 + 1720);
            v65 = *(unsigned int *)(a1 + 1732);
            if ((_DWORD)v65 == *(_DWORD *)(a1 + 1728))
            {
              v66 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v64, (void *)(v65 + 1), (unint64_t)&v148, v58, v59, v60, v61, v62);
              v67 = (_DWORD *)(*(_QWORD *)(a1 + 1720) + 12 * *(unsigned int *)(a1 + 1732));
              *v67 = *(_DWORD *)v66;
              v68 = v67 + 1;
              v63 = *(_QWORD *)(v66 + 4);
            }
            else
            {
              v105 = (_DWORD *)(*v64 + 12 * v65);
              *v105 = v151;
              v68 = v105 + 1;
            }
            *v68 = v63;
            ++*(_DWORD *)(a1 + 1732);
          }
          if (!v55)
          {
            v80 = *(_DWORD **)(a1 + 8);
            v107 = v80[50];
            if (v107 + 4 > v80[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v80 + 14), v56, v57, v58, v59, v60, v61, v62);
              v107 = v80[50];
            }
            *(_DWORD *)(*((_QWORD *)v80 + 7) + v107) = (65569 * ((v50 >> 8) & 0x1F)) | 0x4A000000;
            goto LABEL_83;
          }
          v106 = v20 >> 8;
          JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v144, v145, 0x802uLL, v59, v60, v61, v62);
          LODWORD(v52) = 0;
          v51 = 8;
          LOBYTE(v49) = 2;
        }
        else
        {
          JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 0, ((__int16)v20 >> 8), v43, v44, v45, v46, (uint64_t)&v151, v48);
          v74 = *(_QWORD *)((char *)&v151 + 4);
          LODWORD(v148) = v151;
          *(_QWORD *)((char *)&v148 + 4) = *(_QWORD *)((char *)&v151 + 4);
          if ((_DWORD)v151 != -1)
          {
            v75 = (_QWORD *)(a1 + 1720);
            v76 = *(unsigned int *)(a1 + 1732);
            if ((_DWORD)v76 == *(_DWORD *)(a1 + 1728))
            {
              v77 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v75, (void *)(v76 + 1), (unint64_t)&v148, v69, v70, v71, v72, v73);
              v78 = (_DWORD *)(*(_QWORD *)(a1 + 1720) + 12 * *(unsigned int *)(a1 + 1732));
              *v78 = *(_DWORD *)v77;
              v79 = v78 + 1;
              v74 = *(_QWORD *)(v77 + 4);
            }
            else
            {
              v108 = (_DWORD *)(*v75 + 12 * v76);
              *v108 = v151;
              v79 = v108 + 1;
            }
            *v79 = v74;
            ++*(_DWORD *)(a1 + 1732);
          }
          v106 = v20 >> 8;
        }
        goto LABEL_87;
      }
      v53 = v142;
      if ((_DWORD)v142 == -1)
      {
        v80 = *(_DWORD **)(a1 + 8);
        v81 = v80[50];
        v15 = v141;
        if (v81 + 4 <= v80[48])
          goto LABEL_44;
      }
      else
      {
        v40 = ((_DWORD)v142 - 1);
        v15 = v141;
        if ((_DWORD)v142 != 1)
        {
          if (!(_DWORD)v142)
          {
            JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)9, v41, v42, v43, v44, v45, v46);
            goto LABEL_104;
          }
          if (((int)v142 & (unint64_t)((int)v142 - 1)) == 0)
          {
            v82 = *(_DWORD **)(a1 + 8);
            v83 = v82[50];
            if (v83 + 4 > v82[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v82 + 14), v40, v41, v42, v43, v44, v45, v46);
              v40 = v53 - 1;
              v83 = v82[50];
            }
            *(_DWORD *)(*((_QWORD *)v82 + 7) + v83) = (v49 >> 3) & 0x3E0 | 0x131F7C08;
            v82[50] += 4;
            v84 = (v53 & v40) != 0;
            v85 = *(_DWORD **)(a1 + 8);
            if (v53 >= 0x10000)
            {
              v53 >>= 16;
              v84 |= 0x10u;
            }
            if (v53 >= 0x100)
            {
              v53 >>= 8;
              v84 += 8;
            }
            v86 = v53 >> 4;
            if (v53 >= 0x10)
              v84 += 4;
            else
              v86 = v53;
            if (v86 >= 4)
            {
              v86 >>= 2;
              v84 += 2;
            }
            if (v86 <= 1)
              v87 = 0;
            else
              v87 = -1;
            v88 = v87 - v84;
            v89 = v85[50];
            if (v89 + 4 > v85[48])
            {
              v137 = v40;
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v85 + 14), v40, v41, v42, v43, v44, v45, v46);
              v40 = v137;
              v89 = v85[50];
            }
            *(_DWORD *)(*((_QWORD *)v85 + 7) + v89) = ((v88 & 0x1F) << 16) | 0x53007D08;
            v85[50] += 4;
            v90 = *(_QWORD *)(a1 + 8);
            if (v51 == 31)
            {
              v139 = 992;
              LOBYTE(v51) = 8;
            }
            else
            {
              if (BYTE1(v50) != 31)
              {
                v91 = (v50 >> 8) & 0x1F | ((v51 & 0x1F) << 16);
                v92 = 184549632;
LABEL_68:
                v93 = v91 | v92;
                v96 = *(_DWORD *)(v90 + 200);
                v95 = (unsigned int *)(v90 + 200);
                v94 = v96;
                if (v96 + 4 > *(v95 - 2))
                {
                  v138 = v40;
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v95 - 36), v40, v41, v42, v43, v44, v45, v46);
                  v40 = v138;
                  v94 = *v95;
                }
                *(_DWORD *)(*((_QWORD *)v95 - 18) + v94) = v93;
                *v95 += 4;
                JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)v40, SBYTE1(v50), SBYTE1(v50));
                v80 = *(_DWORD **)(a1 + 8);
                if (BYTE1(v50) == 31)
                {
                  v104 = v80[50];
                  v15 = v141;
                  if (v104 + 4 > v80[48])
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v80 + 14), v97, v98, v99, v100, v101, v102, v103);
                    v104 = v80[50];
                  }
                  *(_DWORD *)(*((_QWORD *)v80 + 7) + v104) = BYTE1(v50) | (32 * BYTE1(v50)) | 0x4B286000;
                  goto LABEL_45;
                }
                v140 = v80[50];
                if (v140 + 4 > v80[48])
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v80 + 14), v97, v98, v99, v100, v101, v102, v103);
                  v140 = v80[50];
                }
                *(_DWORD *)(*((_QWORD *)v80 + 7) + v140) = (v50 >> 8) & 0x1F | (32 * ((v50 >> 8) & 0x1F)) | 0x4B080000;
LABEL_83:
                v80[50] += 4;
                v15 = v141;
                goto LABEL_104;
              }
              v139 = 256;
            }
            v91 = v139 | SBYTE1(v50) | ((v51 & 0x1F) << 16);
            v92 = 186671104;
            goto LABEL_68;
          }
          JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v142, v143, 0x802uLL, v43, v44, v45, v46);
          LODWORD(v54) = 0;
          LOBYTE(v106) = 8;
          LOBYTE(v20) = 2;
LABEL_87:
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::ScratchScope<JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location>((uint64_t)&v148, a1, (v51 << 8) | ((_DWORD)v52 << 16) | v49, (v106 << 8) | ((_DWORD)v54 << 16) | v20, v50);
          v116 = BYTE8(v148);
          v117 = *(_DWORD **)(a1 + 8);
          v118 = (v106 & 0x1F) << 16;
          v119 = v118 & 0xFFFFFC00 | (32 * (v51 & 0x1F)) | BYTE8(v148) & 0x1F | 0x1AC00C00;
          v120 = v117[50];
          if (v120 + 4 > v117[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v117 + 14), v109, v110, v111, v112, v113, v114, v115);
            v120 = v117[50];
          }
          v121 = v51 & 0x1F;
          v122 = v116 & 0x1F;
          *(_DWORD *)(*((_QWORD *)v117 + 7) + v120) = v119;
          v117[50] += 4;
          v123 = *(_DWORD **)(a1 + 8);
          v124 = v123[50];
          if (v124 + 4 > v123[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v123 + 14), v109, v110, v111, v112, v113, v114, v115);
            v124 = v123[50];
          }
          *(_DWORD *)(*((_QWORD *)v123 + 7) + v124) = (v121 << 10) | (32 * v122) | (v50 >> 8) & 0x1F | v118 | 0x1B008000;
          v123[50] += 4;
          v15 = v141;
          if (v150)
            goto LABEL_100;
          v150 = 1;
          v125 = BYTE8(v148) & 0x7F;
          if (v125 < 0x40)
          {
            v126 = 1 << v125;
            if ((*(_QWORD *)(v148 + 648) & (1 << v125)) == 0)
            {
LABEL_100:
              JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindPreserved((uint64_t)&v148);
              goto LABEL_104;
            }
            v127 = SBYTE8(v148);
            if (*(unsigned int *)(v148 + 340) > (unint64_t)SBYTE8(v148))
            {
              v128 = *(_QWORD *)(v148 + 328) + 4 * SBYTE8(v148);
              *(int8x16_t *)(v148 + 992) = vandq_s8(*(int8x16_t *)(v148 + 992), (int8x16_t)vdupq_n_s64(~v126));
              if ((_BYTE)word_1ECF4C700)
              {
                v151 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v127];
                WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v151, "\n");
              }
              if ((v149 & v126) == 0 || (*(_WORD *)(v128 + 1) & 7) == 3)
              {
                *(_DWORD *)v128 = 0;
                *(_QWORD *)(v148 + 616) |= 1 << v125;
              }
              goto LABEL_100;
            }
LABEL_124:
            __break(0xC471u);
            JUMPOUT(0x198F1BF40);
          }
LABEL_123:
          __break(1u);
          goto LABEL_124;
        }
        v80 = *(_DWORD **)(a1 + 8);
        v81 = v80[50];
        if (v81 + 4 <= v80[48])
        {
LABEL_44:
          *(_DWORD *)(*((_QWORD *)v80 + 7) + v81) = (65569 * ((v50 >> 8) & 0x1F)) | 0x4A000000;
LABEL_45:
          v80[50] += 4;
          goto LABEL_104;
        }
      }
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v80 + 14), v40, v41, v42, v43, v44, v45, v46);
      v81 = v80[50];
      goto LABEL_44;
    }
LABEL_10:
    v20 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, v11, a5, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
    v146 = v20;
    goto LABEL_11;
  }
  if (a5 != 1)
  {
    v141 = a9;
    IfNecessary = 0;
    v147 = 0;
    goto LABEL_10;
  }
  if (!(_DWORD)a4)
  {
    v18 = 9;
    goto LABEL_75;
  }
  if ((_DWORD)a4 != -1)
    goto LABEL_103;
  if ((_DWORD)a2 == 0x80000000)
  {
    v18 = 10;
LABEL_75:
    JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)v18, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
    LODWORD(v11) = 1;
    goto LABEL_103;
  }
  LODWORD(v11) = -1;
LABEL_103:
  *a6 = ((int)a2 % (int)v11);
  *((_WORD *)a6 + 4) = -255;
  if (HIBYTE(word_1ECF4C700))
  {
    v148 = *(_OWORD *)a6;
    *(_QWORD *)&v151 = "I32RemS";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v130 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v130;
      }
      while (v130 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>((const char **)&v151, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v144);
    if (v145 != 1 && v145 != 4)
    {
      v147 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v144, v145, v131, v132, v133, v134, v135);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v147);
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t *)&v142, (uint64_t *)&v148);
  }
LABEL_104:
  *v15 = 0;
  v15[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64RemS(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, JSC::ARM64LogicalImmediate *a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v11;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int IfNecessary;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int8x8_t v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  JSC::ARM64LogicalImmediate *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  _DWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  _DWORD *v74;
  _QWORD *v75;
  _DWORD *v76;
  unsigned int v77;
  _DWORD *v78;
  unsigned int v79;
  _DWORD *v80;
  unint64_t v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  _DWORD *v98;
  unsigned int v99;
  unsigned int v100;
  _DWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  _DWORD *v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  int v129;
  int v130;
  unsigned int v131;
  _BYTE *v132;
  JSC::ARM64LogicalImmediate *v133;
  unint64_t v134;
  JSC::ARM64LogicalImmediate *v135;
  unint64_t v136;
  unsigned int v137;
  unsigned int v138;
  __int128 v139;
  uint64_t v140;
  char v141;
  __int128 v142;

  v11 = (uint64_t)a4;
  v15 = a9;
  v135 = (JSC::ARM64LogicalImmediate *)a2;
  v136 = a3;
  v133 = a4;
  v134 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 != 1)
  {
    v132 = a9;
    v137 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
    v20 = 0;
    v138 = IfNecessary;
    if (v17 == 1)
    {
LABEL_11:
      v21 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
      if (v16 == 2)
      {
        v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
        if (*(_DWORD *)(a1 + 1280) < v27)
          *(_DWORD *)(a1 + 1280) = v27;
        if ((v21 & 7) != 1 || ((-8 * v27) ^ v21) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v21);
      }
      v28 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v11, a5, v22, v23, v24, v25, v26);
      if (a5 == 2)
      {
        v33 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v11 + 16;
        if (*(_DWORD *)(a1 + 1280) < v33)
          *(_DWORD *)(a1 + 1280) = v33;
        if ((v28 & 7) != 1 || ((-8 * v33) ^ v28) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v11, a5, v28);
      }
      v34 = *(_QWORD *)(a1 + 88);
      v35 = *(_DWORD *)(v34 + 596);
      if (!v35)
      {
        __break(0xC471u);
        goto LABEL_136;
      }
      if (v16 == 1)
        v36 = v20;
      else
        v36 = IfNecessary;
      v37 = *(_QWORD *)(v34 + 584) + 1232 * v35;
      v38 = *(_DWORD *)(v34 + 68) + *(_DWORD *)(v37 - 32);
      if (*(_DWORD *)(v37 - 160) == 5)
        v39 = v38 + 1;
      else
        v39 = v38;
      *a6 = v39;
      *((_WORD *)a6 + 4) = -510;
      v47 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v39, a6[1], v36, v29, v30, v31, v32);
      if (HIBYTE(word_1ECF4C700))
      {
        v139 = *(_OWORD *)a6;
        *(_QWORD *)&v142 = "I64RemS";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v117 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v117;
          }
          while (v117 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>((const char **)&v142, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v135);
        if ((IfNecessary & 7) != 0)
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v138);
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v133, (int *)&v137, (uint64_t *)&v139);
        v20 = v137;
        IfNecessary = v138;
        v17 = v134;
      }
      v49 = IfNecessary;
      v50 = v47;
      v51 = (unint64_t)IfNecessary >> 8;
      v52 = (unint64_t)IfNecessary >> 16;
      v53 = v50 >> 8;
      if (v17 == 1)
      {
        v54 = (unint64_t)v133;
        if (v133 != (JSC::ARM64LogicalImmediate *)-1)
        {
          v55 = (uint64_t)v133 - 1;
          if (v133 == (JSC::ARM64LogicalImmediate *)1)
          {
            v76 = *(_DWORD **)(a1 + 8);
            v77 = v76[50];
            v15 = v132;
            if (v77 + 4 > v76[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v55, v41, v42, v43, v44, v45, v46);
              v77 = v76[50];
            }
            *(_DWORD *)(*((_QWORD *)v76 + 7) + v77) = (65569 * ((v50 >> 8) & 0x1F)) | 0xCA000000;
            goto LABEL_73;
          }
          if (!v133)
          {
            JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)9, v41, v42, v43, v44, v45, v46);
LABEL_84:
            v15 = v132;
            goto LABEL_103;
          }
          if (((unint64_t)v133 & v55) == 0)
          {
            v78 = *(_DWORD **)(a1 + 8);
            v79 = v78[50];
            if (v79 + 4 > v78[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v78 + 14), v55, v41, v42, v43, v44, v45, v46);
              v53 = v50 >> 8;
              v55 = v54 - 1;
              v79 = v78[50];
            }
            *(_DWORD *)(*((_QWORD *)v78 + 7) + v79) = (v49 >> 3) & 0x3E0 | 0x937FFC08;
            v78[50] += 4;
            v80 = *(_DWORD **)(a1 + 8);
            v81 = HIDWORD(v54);
            if (HIDWORD(v54))
            {
              v129 = (HIDWORD(v54) & (HIDWORD(v54) - 1)) != 0;
              if (HIDWORD(v54) >= 0x10000)
              {
                LODWORD(v81) = HIWORD(HIDWORD(v54));
                v129 |= 0x10u;
              }
              if (v81 >= 0x100)
              {
                LODWORD(v81) = v81 >> 8;
                v129 += 8;
              }
              if (v81 >= 0x10)
              {
                LODWORD(v81) = v81 >> 4;
                v129 += 4;
              }
              if (v81 >= 4)
              {
                LODWORD(v81) = v81 >> 2;
                v129 += 2;
              }
              if (v81 <= 1)
                v130 = v129;
              else
                v130 = v129 + 1;
              v82 = v130 + 32;
              if (v82 == 64)
              {
LABEL_64:
                if (BYTE1(v49) == 31)
                {
                  v116 = 992;
                  LOBYTE(v51) = 8;
                }
                else
                {
                  if (BYTE1(v50) != 31)
                  {
                    v86 = (v50 >> 8) & 0x1F | (((v49 >> 8) & 0x1F) << 16) | 0x8B000100;
LABEL_67:
                    v89 = v80[50];
                    v88 = v80 + 50;
                    v87 = v89;
                    if (v89 + 4 > *(v88 - 2))
                    {
                      v125 = v55;
                      v126 = v53;
                      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v88 - 36), v55, v41, v42, v43, v44, v45, v46);
                      LOBYTE(v53) = v126;
                      v55 = v125;
                      v87 = *v88;
                    }
                    *(_DWORD *)(*((_QWORD *)v88 - 18) + v87) = v86;
                    *v88 += 4;
                    JSC::MacroAssemblerARM64::and64(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)v55, v53, (char)v53);
                    v76 = *(_DWORD **)(a1 + 8);
                    if (BYTE1(v50) == 31)
                    {
                      v97 = v76[50];
                      v15 = v132;
                      if (v97 + 4 > v76[48])
                      {
                        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v90, v91, v92, v93, v94, v95, v96);
                        v97 = v76[50];
                      }
                      *(_DWORD *)(*((_QWORD *)v76 + 7) + v97) = BYTE1(v50) | (32 * BYTE1(v50)) | 0xCB286000;
LABEL_73:
                      v76[50] += 4;
                      goto LABEL_103;
                    }
                    v131 = v76[50];
                    if (v131 + 4 > v76[48])
                    {
                      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v90, v91, v92, v93, v94, v95, v96);
                      v131 = v76[50];
                    }
                    *(_DWORD *)(*((_QWORD *)v76 + 7) + v131) = (v50 >> 8) & 0x1F | (32
                                                                                                * ((v50 >> 8) & 0x1F)) | 0xCB080000;
LABEL_83:
                    v76[50] += 4;
                    goto LABEL_84;
                  }
                  v116 = 256;
                }
                v86 = v116 | (char)v53 | ((v51 & 0x1F) << 16) | 0x8B206000;
                goto LABEL_67;
              }
            }
            else
            {
              v82 = (v54 & ((_DWORD)v54 - 1)) != 0;
              if (v54 >= 0x10000)
              {
                LODWORD(v54) = WORD1(v54);
                v82 |= 0x10u;
              }
              if (v54 >= 0x100)
              {
                LODWORD(v54) = v54 >> 8;
                v82 += 8;
              }
              v83 = v54 >> 4;
              if (v54 >= 0x10)
                v82 += 4;
              else
                v83 = v54;
              if (v83 >= 4)
              {
                v83 >>= 2;
                v82 += 2;
              }
              if (v83 > 1)
                ++v82;
            }
            v84 = (-65536 * v82) & 0x3F0000 | 0xD340FD08;
            v85 = v80[50];
            if (v85 + 4 > v80[48])
            {
              v127 = v55;
              v128 = v53;
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v80 + 14), v55, v41, v42, v43, v44, v45, v46);
              LOBYTE(v53) = v128;
              v55 = v127;
              v85 = v80[50];
            }
            *(_DWORD *)(*((_QWORD *)v80 + 7) + v85) = v84;
            v80[50] += 4;
            v80 = *(_DWORD **)(a1 + 8);
            goto LABEL_64;
          }
          v56 = v50 >> 8;
          JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v133, v134, 0x802uLL, v43, v44, v45, v46);
          LODWORD(v57) = 0;
          LOBYTE(v99) = 8;
          LOBYTE(v20) = 2;
LABEL_88:
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::ScratchScope<JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location>((uint64_t)&v139, a1, (v51 << 8) | ((_DWORD)v52 << 16) | v49, (v99 << 8) | ((_DWORD)v57 << 16) | v20, v50);
          v109 = BYTE8(v139);
          v110 = *(_DWORD **)(a1 + 8);
          v111 = v110[50];
          if (v111 + 4 > v110[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v110 + 14), v102, v103, v104, v105, v106, v107, v108);
            v111 = v110[50];
          }
          *(_DWORD *)(*((_QWORD *)v110 + 7) + v111) = ((v99 & 0x1F) << 16) | (32 * (v51 & 0x1F)) | v109 & 0x1F | 0x9AC00C00;
          v110[50] += 4;
          JSC::MacroAssemblerARM64::multiplySub64(*(_QWORD *)(a1 + 8), v109, (char)v99, (char)v51, (char)v56, v106, v107, v108);
          v15 = v132;
          if (v141)
            goto LABEL_99;
          v141 = 1;
          v112 = BYTE8(v139) & 0x7F;
          if (v112 < 0x40)
          {
            v113 = 1 << v112;
            if ((*(_QWORD *)(v139 + 648) & (1 << v112)) == 0)
            {
LABEL_99:
              JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindPreserved((uint64_t)&v139);
              goto LABEL_103;
            }
            v114 = SBYTE8(v139);
            if (*(unsigned int *)(v139 + 340) > (unint64_t)SBYTE8(v139))
            {
              v115 = *(_QWORD *)(v139 + 328) + 4 * SBYTE8(v139);
              *(int8x16_t *)(v139 + 992) = vandq_s8(*(int8x16_t *)(v139 + 992), (int8x16_t)vdupq_n_s64(~v113));
              if ((_BYTE)word_1ECF4C700)
              {
                v142 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v114];
                WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v142, "\n");
              }
              if ((v140 & v113) == 0 || (*(_WORD *)(v115 + 1) & 7) == 3)
              {
                *(_DWORD *)v115 = 0;
                *(_QWORD *)(v139 + 616) |= 1 << v112;
              }
              goto LABEL_99;
            }
LABEL_137:
            __break(0xC471u);
            JUMPOUT(0x198F1CA50);
          }
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
      }
      else
      {
        v56 = v50 >> 8;
        v57 = (unint64_t)v20 >> 16;
        if (v136 != 1)
        {
          JSC::MacroAssemblerARM64::branchTest64(*(_QWORD *)(a1 + 8), 0, ((__int16)v20 >> 8), 0xFFFFFFFFLL, v43, v44, v45, v46, (uint64_t)&v142, v48);
          v70 = *(_QWORD *)((char *)&v142 + 4);
          LODWORD(v139) = v142;
          *(_QWORD *)((char *)&v139 + 4) = *(_QWORD *)((char *)&v142 + 4);
          if ((_DWORD)v142 != -1)
          {
            v71 = (_QWORD *)(a1 + 1720);
            v72 = *(unsigned int *)(a1 + 1732);
            if ((_DWORD)v72 == *(_DWORD *)(a1 + 1728))
            {
              v73 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v71, (void *)(v72 + 1), (unint64_t)&v139, v65, v66, v67, v68, v69);
              v74 = (_DWORD *)(*(_QWORD *)(a1 + 1720) + 12 * *(unsigned int *)(a1 + 1732));
              *v74 = *(_DWORD *)v73;
              v75 = v74 + 1;
              v70 = *(_QWORD *)(v73 + 4);
            }
            else
            {
              v101 = (_DWORD *)(*v71 + 12 * v72);
              *v101 = v142;
              v75 = v101 + 1;
            }
            *v75 = v70;
            ++*(_DWORD *)(a1 + 1732);
          }
          v99 = v20 >> 8;
          goto LABEL_88;
        }
        v58 = v135;
        JSC::MacroAssemblerARM64::branchTest64(*(_QWORD *)(a1 + 8), 0, ((__int16)v20 >> 8), 0xFFFFFFFFLL, v43, v44, v45, v46, (uint64_t)&v142, v48);
        v59 = *(_QWORD *)((char *)&v142 + 4);
        LODWORD(v139) = v142;
        *(_QWORD *)((char *)&v139 + 4) = *(_QWORD *)((char *)&v142 + 4);
        if ((_DWORD)v142 != -1)
        {
          v60 = (_QWORD *)(a1 + 1720);
          v61 = *(unsigned int *)(a1 + 1732);
          if ((_DWORD)v61 == *(_DWORD *)(a1 + 1728))
          {
            v62 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, (void *)(v61 + 1), (unint64_t)&v139, v42, v43, v44, v45, v46);
            v63 = (_DWORD *)(*(_QWORD *)(a1 + 1720) + 12 * *(unsigned int *)(a1 + 1732));
            *v63 = *(_DWORD *)v62;
            v64 = v63 + 1;
            v59 = *(_QWORD *)(v62 + 4);
          }
          else
          {
            v98 = (_DWORD *)(*v60 + 12 * v61);
            *v98 = v142;
            v64 = v98 + 1;
          }
          *v64 = v59;
          ++*(_DWORD *)(a1 + 1732);
        }
        if (v58)
        {
          v99 = v20 >> 8;
          JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v135, v136, 0x802uLL, v43, v44, v45, v46);
          LODWORD(v52) = 0;
          LOBYTE(v51) = 8;
          LOBYTE(v49) = 2;
          goto LABEL_88;
        }
      }
      v76 = *(_DWORD **)(a1 + 8);
      v100 = v76[50];
      if (v100 + 4 > v76[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v40, v41, v42, v43, v44, v45, v46);
        v100 = v76[50];
      }
      *(_DWORD *)(*((_QWORD *)v76 + 7) + v100) = (65569 * ((v50 >> 8) & 0x1F)) | 0xCA000000;
      goto LABEL_83;
    }
LABEL_10:
    v20 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, v11, a5, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
    v137 = v20;
    goto LABEL_11;
  }
  if (a5 != 1)
  {
    v132 = a9;
    IfNecessary = 0;
    v138 = 0;
    goto LABEL_10;
  }
  if (!a4)
  {
    v18 = 9;
    goto LABEL_75;
  }
  if (a4 != (JSC::ARM64LogicalImmediate *)-1)
    goto LABEL_102;
  if (a2 == 0x8000000000000000)
  {
    v18 = 10;
LABEL_75:
    JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)v18, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
    v11 = 1;
    goto LABEL_102;
  }
  v11 = -1;
LABEL_102:
  *a6 = a2 % v11;
  *((_WORD *)a6 + 4) = -511;
  if (HIBYTE(word_1ECF4C700))
  {
    v139 = *(_OWORD *)a6;
    *(_QWORD *)&v142 = "I64RemS";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v118 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v118;
      }
      while (v118 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>((const char **)&v142, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v135);
    if (v136 != 1 && v136 != 4)
    {
      v138 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v135, v136, v119, v120, v121, v122, v123);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v138);
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t *)&v133, (uint64_t *)&v139);
  }
LABEL_103:
  *v15 = 0;
  v15[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32RemU(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _BYTE *a7@<X8>)
{
  _QWORD v7[2];
  uint64_t v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v7[0] = a4;
  v7[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI32RemU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI32RemU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI32RemU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(a7, a1, v8, (uint64_t)v7, a6, a1, a1, (uint64_t)a6, a1);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI32RemU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI32RemU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI32RemU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(_BYTE *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int IfNecessary;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int8x8_t v46;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v59;
  __int128 v60;
  const char *v61;
  unsigned int v62;

  if (*((_BYTE *)a3 + 8) == 1)
  {
    if (*(_BYTE *)(a4 + 8) == 1)
    {
      v15 = *(_DWORD *)a3;
      if (*(_DWORD *)a4 == -1)
      {
        if (v15 == 0x80000000)
        {
          v16 = a6;
          v17 = 10;
          goto LABEL_39;
        }
      }
      else if (!*(_DWORD *)a4)
      {
        v16 = a6;
        v17 = 9;
LABEL_39:
        JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(v16, (JSC::ARM64LogicalImmediate *)v17, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
        v49 = 1;
        goto LABEL_41;
      }
      v49 = *(_DWORD *)a4;
LABEL_41:
      *a5 = v15 % v49;
      *((_WORD *)a5 + 4) = -255;
      if (HIBYTE(word_1ECF4C700))
      {
        v60 = *(_OWORD *)a5;
        v61 = "I32RemU";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a2)
        {
          v51 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v51;
          }
          while (v51 < *(_DWORD *)a2);
        }
        WTF::dataLog<char const*,char [2]>(&v61, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
        v57 = *((unsigned __int8 *)a3 + 8);
        if (v57 != 1 && v57 != 4)
        {
          v62 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, a3[1], v52, v53, v54, v55, v56);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v62);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t *)a4, (uint64_t *)&v60);
      }
LABEL_42:
      *a1 = 0;
      a1[8] = 0;
      return;
    }
    IfNecessary = 0;
    v62 = 0;
    goto LABEL_9;
  }
  v59 = 0;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *a3, a3[1], a4, (uint64_t)a5, a6, a7, a8);
  v19 = 0;
  v62 = IfNecessary;
  if (*(_BYTE *)(a4 + 8) != 1)
  {
LABEL_9:
    v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), a4, (uint64_t)a5, a6, a7, a8);
    v59 = v19;
  }
  v20 = *a3;
  v21 = a3[1];
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, v21, a4, (uint64_t)a5, a6, a7, a8);
  if (v21 == 2)
  {
    v28 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v20 + 16;
    if (*(_DWORD *)(a2 + 1280) < v28)
      *(_DWORD *)(a2 + 1280) = v28;
    if ((v22 & 7) != 1 || ((-8 * v28) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v20, v21, v22);
  }
  v29 = *(_QWORD *)a4;
  v30 = *(_QWORD *)(a4 + 8);
  v31 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a4, v30, v23, v24, v25, v26, v27);
  if (v30 == 2)
  {
    v36 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v29 + 16;
    if (*(_DWORD *)(a2 + 1280) < v36)
      *(_DWORD *)(a2 + 1280) = v36;
    if ((v31 & 7) != 1 || ((-8 * v36) ^ v31) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v29, v30, v31);
  }
  v37 = *(_QWORD *)(a2 + 88);
  v38 = *(_DWORD *)(v37 + 596);
  if (v38)
  {
    if (*((_BYTE *)a3 + 8) == 1)
      v39 = v19;
    else
      v39 = IfNecessary;
    v40 = *(_QWORD *)(v37 + 584) + 1232 * v38;
    v41 = *(_DWORD *)(v37 + 68) + *(_DWORD *)(v40 - 32);
    if (*(_DWORD *)(v40 - 160) == 5)
      v42 = v41 + 1;
    else
      v42 = v41;
    *a5 = v42;
    *((_WORD *)a5 + 4) = -254;
    v45 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v42, a5[1], v39, v32, v33, v34, v35);
    if (HIBYTE(word_1ECF4C700))
    {
      v60 = *(_OWORD *)a5;
      v61 = "I32RemU";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v50 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v50;
        }
        while (v50 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v61, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v62);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, a4, (int *)&v59, (uint64_t *)&v60);
      IfNecessary = v62;
      v19 = v59;
    }
    if (*(_BYTE *)(a4 + 8) != 1 && *((_BYTE *)a3 + 8) != 1)
      a9 = a7;
    JSC::Wasm::BBQJITImpl::BBQJIT::emitModOrDiv<unsigned int,true>(a9, (int *)a3, IfNecessary, a4, v19, v45, v43, v44, v46);
    goto LABEL_42;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64RemU(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, JSC::ARM64LogicalImmediate *a4@<X3>, unint64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unint64_t v11;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int IfNecessary;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int8x8_t v47;
  unsigned int v48;
  unint64_t v49;
  unsigned __int8 v50;
  unint64_t v51;
  JSC::ARM64LogicalImmediate *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  _DWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  _DWORD *v75;
  _QWORD *v76;
  _DWORD *v77;
  unsigned int v78;
  _BYTE *v79;
  unsigned int v80;
  _DWORD *v81;
  _DWORD *v82;
  unsigned int v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  _DWORD *v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v108;
  JSC::ARM64LogicalImmediate *v109;
  unint64_t v110;
  JSC::ARM64LogicalImmediate *v111;
  unint64_t v112;
  unsigned int v113;
  unsigned int v114;
  __int128 v115;
  uint64_t v116;
  char v117;
  __int128 v118;

  v11 = (unint64_t)a4;
  v111 = (JSC::ARM64LogicalImmediate *)a2;
  v112 = a3;
  v109 = a4;
  v110 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 != 1)
  {
    v108 = a9;
    v113 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
    v20 = 0;
    v114 = IfNecessary;
    if (v17 == 1)
    {
LABEL_11:
      v21 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
      if (v16 == 2)
      {
        v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
        if (*(_DWORD *)(a1 + 1280) < v27)
          *(_DWORD *)(a1 + 1280) = v27;
        if ((v21 & 7) != 1 || ((-8 * v27) ^ v21) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v21);
      }
      v28 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v11, a5, v22, v23, v24, v25, v26);
      if (a5 == 2)
      {
        v33 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v11 + 16;
        if (*(_DWORD *)(a1 + 1280) < v33)
          *(_DWORD *)(a1 + 1280) = v33;
        if ((v28 & 7) != 1 || ((-8 * v33) ^ v28) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v11, a5, v28);
      }
      v34 = *(_QWORD *)(a1 + 88);
      v35 = *(_DWORD *)(v34 + 596);
      if (v35)
      {
        if (v16 == 1)
          v36 = v20;
        else
          v36 = IfNecessary;
        v37 = *(_QWORD *)(v34 + 584) + 1232 * v35;
        v38 = *(_DWORD *)(v34 + 68) + *(_DWORD *)(v37 - 32);
        if (*(_DWORD *)(v37 - 160) == 5)
          v39 = v38 + 1;
        else
          v39 = v38;
        *a6 = v39;
        *((_WORD *)a6 + 4) = -510;
        v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v39, a6[1], v36, v29, v30, v31, v32);
        if (HIBYTE(word_1ECF4C700))
        {
          v115 = *(_OWORD *)a6;
          *(_QWORD *)&v118 = "I64RemU";
          WTF::dataLog<char [16]>("BBQ\t");
          if (*(_DWORD *)a1)
          {
            v100 = 0;
            do
            {
              WTF::dataLog<char [16]>(" ");
              ++v100;
            }
            while (v100 < *(_DWORD *)a1);
          }
          WTF::dataLog<char const*,char [2]>((const char **)&v118, " ");
          WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v111);
          if ((IfNecessary & 7) != 0)
            WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v114);
          JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v109, (int *)&v113, (uint64_t *)&v115);
          v20 = v113;
          IfNecessary = v114;
          v17 = v110;
        }
        v48 = IfNecessary;
        v49 = (unint64_t)IfNecessary >> 16;
        if (v17 == 1)
        {
          if (v109 != (JSC::ARM64LogicalImmediate *)-1)
          {
            if (v109 == (JSC::ARM64LogicalImmediate *)1)
            {
              v77 = *(_DWORD **)(a1 + 8);
              v78 = v77[50];
              v79 = v108;
              if (v78 + 4 > v77[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v77 + 14), 1, v40, v41, v42, v43, v44, v45);
                v78 = v77[50];
              }
              *(_DWORD *)(*((_QWORD *)v77 + 7) + v78) = (65569 * ((v46 >> 8) & 0x1F)) | 0xCA000000;
              v77[50] += 4;
              goto LABEL_74;
            }
            if (!v109)
            {
              JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)9, v40, v41, v42, v43, v44, v45);
LABEL_58:
              v79 = v108;
LABEL_74:
              *v79 = 0;
              v79[8] = 0;
              return;
            }
            if (((unint64_t)v109 & ((unint64_t)v109 - 1)) == 0)
            {
              JSC::MacroAssemblerARM64::and64(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)((char *)v109 - 1), SBYTE1(IfNecessary), (__int16)v46 >> 8);
              goto LABEL_58;
            }
          }
          v20 = IfNecessary >> 8;
          JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v109, v110, 0x802uLL, v42, v43, v44, v45);
          LODWORD(v51) = 0;
          LOBYTE(v80) = 8;
          v50 = 2;
        }
        else
        {
          v50 = v20;
          v51 = (unint64_t)v20 >> 16;
          if (v112 == 1)
          {
            v52 = v111;
            JSC::MacroAssemblerARM64::branchTest64(*(_QWORD *)(a1 + 8), 0, ((__int16)v20 >> 8), 0xFFFFFFFFLL, v42, v43, v44, v45, (uint64_t)&v118, v47);
            v60 = *(_QWORD *)((char *)&v118 + 4);
            LODWORD(v115) = v118;
            *(_QWORD *)((char *)&v115 + 4) = *(_QWORD *)((char *)&v118 + 4);
            if ((_DWORD)v118 != -1)
            {
              v61 = (_QWORD *)(a1 + 1720);
              v62 = *(unsigned int *)(a1 + 1732);
              if ((_DWORD)v62 == *(_DWORD *)(a1 + 1728))
              {
                v63 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, (void *)(v62 + 1), (unint64_t)&v115, v55, v56, v57, v58, v59);
                v64 = (_DWORD *)(*(_QWORD *)(a1 + 1720) + 12 * *(unsigned int *)(a1 + 1732));
                *v64 = *(_DWORD *)v63;
                v65 = v64 + 1;
                v60 = *(_QWORD *)(v63 + 4);
              }
              else
              {
                v81 = (_DWORD *)(*v61 + 12 * v62);
                *v81 = v118;
                v65 = v81 + 1;
              }
              *v65 = v60;
              ++*(_DWORD *)(a1 + 1732);
            }
            if (!v52)
            {
              v82 = *(_DWORD **)(a1 + 8);
              v83 = v82[50];
              if (v83 + 4 > v82[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v82 + 14), v53, v54, v55, v56, v57, v58, v59);
                v83 = v82[50];
              }
              *(_DWORD *)(*((_QWORD *)v82 + 7) + v83) = (65569 * ((v46 >> 8) & 0x1F)) | 0xCA000000;
              v82[50] += 4;
              goto LABEL_58;
            }
            v80 = v20 >> 8;
            JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v111, v112, 0x802uLL, v56, v57, v58, v59);
            LODWORD(v49) = 0;
            LOBYTE(v20) = 8;
            LOBYTE(v48) = 2;
          }
          else
          {
            JSC::MacroAssemblerARM64::branchTest64(*(_QWORD *)(a1 + 8), 0, ((__int16)v20 >> 8), 0xFFFFFFFFLL, v42, v43, v44, v45, (uint64_t)&v118, v47);
            v71 = *(_QWORD *)((char *)&v118 + 4);
            LODWORD(v115) = v118;
            *(_QWORD *)((char *)&v115 + 4) = *(_QWORD *)((char *)&v118 + 4);
            if ((_DWORD)v118 != -1)
            {
              v72 = (_QWORD *)(a1 + 1720);
              v73 = *(unsigned int *)(a1 + 1732);
              if ((_DWORD)v73 == *(_DWORD *)(a1 + 1728))
              {
                v74 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v72, (void *)(v73 + 1), (unint64_t)&v115, v66, v67, v68, v69, v70);
                v75 = (_DWORD *)(*(_QWORD *)(a1 + 1720) + 12 * *(unsigned int *)(a1 + 1732));
                *v75 = *(_DWORD *)v74;
                v76 = v75 + 1;
                v71 = *(_QWORD *)(v74 + 4);
              }
              else
              {
                v84 = (_DWORD *)(*v72 + 12 * v73);
                *v84 = v118;
                v76 = v84 + 1;
              }
              *v76 = v71;
              ++*(_DWORD *)(a1 + 1732);
            }
            v80 = v20 >> 8;
            v20 = v48 >> 8;
          }
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::ScratchScope<JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location>((uint64_t)&v115, a1, (v20 << 8) | ((_DWORD)v49 << 16) | v48, (v80 << 8) | ((_DWORD)v51 << 16) | v50, v46);
        v92 = BYTE8(v115);
        v93 = *(_DWORD **)(a1 + 8);
        v94 = ((v80 & 0x1F) << 16) | (32 * (v20 & 0x1F)) | BYTE8(v115) & 0x1F | 0x9AC00800;
        v95 = v93[50];
        if (v95 + 4 > v93[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v93 + 14), v85, v86, v87, v88, v89, v90, v91);
          v95 = v93[50];
        }
        *(_DWORD *)(*((_QWORD *)v93 + 7) + v95) = v94;
        v93[50] += 4;
        JSC::MacroAssemblerARM64::multiplySub64(*(_QWORD *)(a1 + 8), v92, (char)v80, (char)v20, ((__int16)v46 >> 8), v89, v90, v91);
        v79 = v108;
        if (v117)
          goto LABEL_73;
        v117 = 1;
        v96 = BYTE8(v115) & 0x7F;
        if (v96 < 0x40)
        {
          v97 = 1 << v96;
          if ((*(_QWORD *)(v115 + 648) & (1 << v96)) != 0)
          {
            v98 = SBYTE8(v115);
            if (*(unsigned int *)(v115 + 340) > (unint64_t)SBYTE8(v115))
            {
              v99 = *(_QWORD *)(v115 + 328) + 4 * SBYTE8(v115);
              *(int8x16_t *)(v115 + 992) = vandq_s8(*(int8x16_t *)(v115 + 992), (int8x16_t)vdupq_n_s64(~v97));
              if ((_BYTE)word_1ECF4C700)
              {
                v118 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v98];
                WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v118, "\n");
              }
              if ((v116 & v97) == 0 || (*(_WORD *)(v99 + 1) & 7) == 3)
              {
                *(_DWORD *)v99 = 0;
                *(_QWORD *)(v115 + 616) |= 1 << v96;
              }
              goto LABEL_73;
            }
LABEL_95:
            __break(0xC471u);
            return;
          }
LABEL_73:
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindPreserved((uint64_t)&v115);
          goto LABEL_74;
        }
      }
      else
      {
        __break(0xC471u);
      }
      __break(1u);
      goto LABEL_95;
    }
LABEL_10:
    v20 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, v11, a5, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
    v113 = v20;
    goto LABEL_11;
  }
  if (a5 != 1)
  {
    v108 = a9;
    IfNecessary = 0;
    v114 = 0;
    goto LABEL_10;
  }
  if (!a4)
  {
    v18 = 9;
LABEL_50:
    JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)v18, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
    v11 = 1;
    goto LABEL_76;
  }
  if (a4 == (JSC::ARM64LogicalImmediate *)-1)
  {
    if (a2 != 0x8000000000000000)
    {
      v11 = -1;
      goto LABEL_76;
    }
    v18 = 10;
    goto LABEL_50;
  }
LABEL_76:
  *a6 = a2 % v11;
  *((_WORD *)a6 + 4) = -511;
  if (HIBYTE(word_1ECF4C700))
  {
    v115 = *(_OWORD *)a6;
    *(_QWORD *)&v118 = "I64RemU";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v101 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v101;
      }
      while (v101 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>((const char **)&v118, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v111);
    if (v112 != 1 && v112 != 4)
    {
      v114 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v111, v112, v102, v103, v104, v105, v106);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v114);
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t *)&v109, (uint64_t *)&v115);
  }
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Div(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  _DWORD *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  const char **v51;
  uint64_t *v52;
  unint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  __int128 v77;
  const char *v78;
  unsigned int v79;

  v74 = a2;
  v75 = a3;
  v72 = a4;
  v73 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1)
  {
    if (a5 == 1)
    {
      *a6 = COERCE_UNSIGNED_INT(*(float *)&a2 / *(float *)&a4);
      *((_WORD *)a6 + 4) = -767;
      if (HIBYTE(word_1ECF4C700))
      {
        v77 = *(_OWORD *)a6;
        v78 = "F32Div";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v64 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v64;
          }
          while (v64 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v78, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v74);
        if (v75 != 1 && v75 != 4)
        {
          v79 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v74, v75, v65, v66, v67, v68, v69);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v79);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v72, (uint64_t *)&v77);
      }
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    v71 = a9;
    IfNecessary = 0;
    v79 = 0;
  }
  else
  {
    v71 = a9;
    v76 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v19 = 0;
    v79 = IfNecessary;
    if (v17 == 1)
      goto LABEL_9;
  }
  v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v76 = v19;
LABEL_9:
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  if (a3 == 2)
  {
    v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v26)
      *(_DWORD *)(a1 + 1280) = v26;
    if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
  }
  v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
  if (a5 == 2)
  {
    v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v32)
      *(_DWORD *)(a1 + 1280) = v32;
    if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
  }
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_DWORD *)(v33 + 596);
  if (v34)
  {
    if (v16 == 1)
      v35 = v19;
    else
      v35 = IfNecessary;
    v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
    v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
    if (*(_DWORD *)(v36 - 160) == 5)
      v38 = v37 + 1;
    else
      v38 = v37;
    *a6 = v38;
    *((_WORD *)a6 + 4) = -766;
    v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, a6[1], v35, v28, v29, v30, v31);
    if (HIBYTE(word_1ECF4C700))
    {
      v77 = *(_OWORD *)a6;
      v78 = "F32Div";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v63 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v63;
        }
        while (v63 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v78, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v74);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v79);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v72, (int *)&v76, (uint64_t *)&v77);
      v16 = v75;
      v17 = v73;
      IfNecessary = v79;
      v19 = v76;
    }
    if (v16 == 1 || v17 == 1)
    {
      LODWORD(v77) = IfNecessary;
      LODWORD(v78) = v19;
      v51 = (const char **)&v77;
      if ((IfNecessary & 6) == 2)
        v51 = &v78;
      *(_DWORD *)v51 = 4099;
      if (v16 == 1)
        v52 = &v74;
      else
        v52 = &v72;
      v53 = &v73;
      if (v16 == 1)
        v53 = (unint64_t *)&v75;
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)*v52, *v53, 0x1003uLL, v42, v43, v44, v45);
      v47 = *(_DWORD **)(a1 + 8);
      v61 = SBYTE1(v77);
      v62 = SBYTE1(v78);
      v48 = v47[50];
      if (v48 + 4 > v47[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 14), v54, v55, v56, v57, v58, v59, v60);
        v48 = v47[50];
      }
      v49 = (v46 >> 8) | (32 * v61) | (v62 << 16);
      v50 = 505419776;
    }
    else
    {
      v47 = *(_DWORD **)(a1 + 8);
      v48 = v47[50];
      if (v48 + 4 > v47[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 14), v39, v40, v41, v42, v43, v44, v45);
        v48 = v47[50];
      }
      v49 = ((__int16)v19 << 8) & 0xFFFF00FF | (v46 >> 8);
      v50 = ((__int16)IfNecessary >> 3) & 0xE1DFE7E0 | 0x1E201800;
    }
    *(_DWORD *)(*((_QWORD *)v47 + 7) + v48) = v49 | v50;
    v47[50] += 4;
    *v71 = 0;
    v71[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Div(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  _DWORD *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  const char **v51;
  uint64_t *v52;
  unint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  __int128 v77;
  const char *v78;
  unsigned int v79;

  v74 = a2;
  v75 = a3;
  v72 = a4;
  v73 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1)
  {
    if (a5 == 1)
    {
      *(double *)a6 = *(double *)&a2 / *(double *)&a4;
      *(_WORD *)(a6 + 8) = -1023;
      if (HIBYTE(word_1ECF4C700))
      {
        v77 = *(_OWORD *)a6;
        v78 = "F64Div";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v64 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v64;
          }
          while (v64 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v78, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v74);
        if (v75 != 1 && v75 != 4)
        {
          v79 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v74, v75, v65, v66, v67, v68, v69);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v79);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v72, (uint64_t *)&v77);
      }
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    v71 = a9;
    IfNecessary = 0;
    v79 = 0;
  }
  else
  {
    v71 = a9;
    v76 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, a6, a7, a8);
    v19 = 0;
    v79 = IfNecessary;
    if (v17 == 1)
      goto LABEL_9;
  }
  v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, a6, a7, a8);
  v76 = v19;
LABEL_9:
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, a6, a7, a8);
  if (a3 == 2)
  {
    v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v26)
      *(_DWORD *)(a1 + 1280) = v26;
    if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
  }
  v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
  if (a5 == 2)
  {
    v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v32)
      *(_DWORD *)(a1 + 1280) = v32;
    if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
  }
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_DWORD *)(v33 + 596);
  if (v34)
  {
    if (v16 == 1)
      v35 = v19;
    else
      v35 = IfNecessary;
    v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
    v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
    if (*(_DWORD *)(v36 - 160) == 5)
      v38 = v37 + 1;
    else
      v38 = v37;
    *(_QWORD *)a6 = v38;
    *(_WORD *)(a6 + 8) = -1022;
    v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, *(_QWORD *)(a6 + 8), v35, v28, v29, v30, v31);
    if (HIBYTE(word_1ECF4C700))
    {
      v77 = *(_OWORD *)a6;
      v78 = "F64Div";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v63 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v63;
        }
        while (v63 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v78, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v74);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v79);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v72, (int *)&v76, (uint64_t *)&v77);
      v16 = v75;
      v17 = v73;
      IfNecessary = v79;
      v19 = v76;
    }
    if (v16 == 1 || v17 == 1)
    {
      LODWORD(v77) = IfNecessary;
      LODWORD(v78) = v19;
      v51 = (const char **)&v77;
      if ((IfNecessary & 6) == 2)
        v51 = &v78;
      *(_DWORD *)v51 = 4099;
      if (v16 == 1)
        v52 = &v74;
      else
        v52 = &v72;
      v53 = &v73;
      if (v16 == 1)
        v53 = (unint64_t *)&v75;
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)*v52, *v53, 0x1003uLL, v42, v43, v44, v45);
      v47 = *(_DWORD **)(a1 + 8);
      v61 = SBYTE1(v77);
      v62 = SBYTE1(v78);
      v48 = v47[50];
      if (v48 + 4 > v47[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 14), v54, v55, v56, v57, v58, v59, v60);
        v48 = v47[50];
      }
      v49 = (v46 >> 8) | (32 * v61) | (v62 << 16);
      v50 = 509614080;
    }
    else
    {
      v47 = *(_DWORD **)(a1 + 8);
      v48 = v47[50];
      if (v48 + 4 > v47[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 14), v39, v40, v41, v42, v43, v44, v45);
        v48 = v47[50];
      }
      v49 = ((__int16)v19 << 8) & 0xFFFF00FF | (v46 >> 8);
      v50 = ((__int16)IfNecessary >> 3) & 0xE19FE7E0 | 0x1E601800;
    }
    *(_DWORD *)(*((_QWORD *)v47 + 7) + v48) = v49 | v50;
    v47[50] += 4;
    *v71 = 0;
    v71[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Min(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  const char **v18;
  unsigned int IfNecessary;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  _DWORD *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  const char **v52;
  uint64_t *v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  __int128 v78;
  const char *v79;
  unsigned int v80;

  v75 = a2;
  v76 = a3;
  v73 = a4;
  v74 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1)
  {
    if (a5 == 1)
    {
      LODWORD(v78) = a2;
      LODWORD(v79) = a4;
      if (*(float *)&a4 >= *(float *)&a2)
        v18 = (const char **)&v78;
      else
        v18 = &v79;
      *a6 = *(unsigned int *)v18;
      *((_WORD *)a6 + 4) = -767;
      if (HIBYTE(word_1ECF4C700))
      {
        v78 = *(_OWORD *)a6;
        v79 = "F32Min";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v65 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v65;
          }
          while (v65 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v79, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v75);
        if (v76 != 1 && v76 != 4)
        {
          v80 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v75, v76, v66, v67, v68, v69, v70);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v80);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v73, (uint64_t *)&v78);
      }
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    v72 = a9;
    IfNecessary = 0;
    v80 = 0;
  }
  else
  {
    v72 = a9;
    v77 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v20 = 0;
    v80 = IfNecessary;
    if (v17 == 1)
      goto LABEL_12;
  }
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v77 = v20;
LABEL_12:
  v21 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  if (a3 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v21 & 7) != 1 || ((-8 * v27) ^ v21) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v21);
  }
  v28 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v22, v23, v24, v25, v26);
  if (a5 == 2)
  {
    v33 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v33)
      *(_DWORD *)(a1 + 1280) = v33;
    if ((v28 & 7) != 1 || ((-8 * v33) ^ v28) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v28);
  }
  v34 = *(_QWORD *)(a1 + 88);
  v35 = *(_DWORD *)(v34 + 596);
  if (v35)
  {
    if (v16 == 1)
      v36 = v20;
    else
      v36 = IfNecessary;
    v37 = *(_QWORD *)(v34 + 584) + 1232 * v35;
    v38 = *(_DWORD *)(v34 + 68) + *(_DWORD *)(v37 - 32);
    if (*(_DWORD *)(v37 - 160) == 5)
      v39 = v38 + 1;
    else
      v39 = v38;
    *a6 = v39;
    *((_WORD *)a6 + 4) = -766;
    v47 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v39, a6[1], v36, v29, v30, v31, v32);
    if (HIBYTE(word_1ECF4C700))
    {
      v78 = *(_OWORD *)a6;
      v79 = "F32Min";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v64 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v64;
        }
        while (v64 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v79, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v75);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v80);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v73, (int *)&v77, (uint64_t *)&v78);
      v16 = v76;
      v17 = v74;
      IfNecessary = v80;
      v20 = v77;
    }
    if (v16 == 1 || v17 == 1)
    {
      LODWORD(v78) = IfNecessary;
      LODWORD(v79) = v20;
      v52 = (const char **)&v78;
      if ((IfNecessary & 6) == 2)
        v52 = &v79;
      *(_DWORD *)v52 = 4099;
      if (v16 == 1)
        v53 = &v75;
      else
        v53 = &v73;
      v54 = &v74;
      if (v16 == 1)
        v54 = (unint64_t *)&v76;
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)*v53, *v54, 0x1003uLL, v43, v44, v45, v46);
      v62 = SBYTE1(v78);
      v63 = SBYTE1(v79);
      v48 = *(_DWORD **)(a1 + 8);
      v49 = v48[50];
      if (v49 + 4 > v48[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v48 + 14), v55, v56, v57, v58, v59, v60, v61);
        v49 = v48[50];
      }
      v50 = (v47 >> 8) | (32 * v62) | (v63 << 16);
      v51 = 505436160;
    }
    else
    {
      v48 = *(_DWORD **)(a1 + 8);
      v49 = v48[50];
      if (v49 + 4 > v48[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v48 + 14), v40, v41, v42, v43, v44, v45, v46);
        v49 = v48[50];
      }
      v50 = ((__int16)v20 << 8) & 0xFFFF00FF | (v47 >> 8);
      v51 = ((__int16)IfNecessary >> 3) & 0xE1DFA7E0 | 0x1E205800;
    }
    *(_DWORD *)(*((_QWORD *)v48 + 7) + v49) = v50 | v51;
    v48[50] += 4;
    *v72 = 0;
    v72[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Min(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  const char **v18;
  unsigned int IfNecessary;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  _DWORD *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  const char **v52;
  uint64_t *v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  __int128 v78;
  const char *v79;
  unsigned int v80;

  v75 = a2;
  v76 = a3;
  v73 = a4;
  v74 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1)
  {
    if (a5 == 1)
    {
      *(_QWORD *)&v78 = a2;
      v79 = (const char *)a4;
      if (*(double *)&a4 >= *(double *)&a2)
        v18 = (const char **)&v78;
      else
        v18 = &v79;
      *a6 = *v18;
      *((_WORD *)a6 + 4) = -1023;
      if (HIBYTE(word_1ECF4C700))
      {
        v78 = *(_OWORD *)a6;
        v79 = "F64Min";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v65 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v65;
          }
          while (v65 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v79, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v75);
        if (v76 != 1 && v76 != 4)
        {
          v80 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v75, v76, v66, v67, v68, v69, v70);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v80);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v73, (uint64_t *)&v78);
      }
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    v72 = a9;
    IfNecessary = 0;
    v80 = 0;
  }
  else
  {
    v72 = a9;
    v77 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v20 = 0;
    v80 = IfNecessary;
    if (v17 == 1)
      goto LABEL_12;
  }
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v77 = v20;
LABEL_12:
  v21 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  if (a3 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v21 & 7) != 1 || ((-8 * v27) ^ v21) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v21);
  }
  v28 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v22, v23, v24, v25, v26);
  if (a5 == 2)
  {
    v33 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v33)
      *(_DWORD *)(a1 + 1280) = v33;
    if ((v28 & 7) != 1 || ((-8 * v33) ^ v28) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v28);
  }
  v34 = *(_QWORD *)(a1 + 88);
  v35 = *(_DWORD *)(v34 + 596);
  if (v35)
  {
    if (v16 == 1)
      v36 = v20;
    else
      v36 = IfNecessary;
    v37 = *(_QWORD *)(v34 + 584) + 1232 * v35;
    v38 = *(_DWORD *)(v34 + 68) + *(_DWORD *)(v37 - 32);
    if (*(_DWORD *)(v37 - 160) == 5)
      v39 = v38 + 1;
    else
      v39 = v38;
    *a6 = v39;
    *((_WORD *)a6 + 4) = -1022;
    v47 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v39, a6[1], v36, v29, v30, v31, v32);
    if (HIBYTE(word_1ECF4C700))
    {
      v78 = *(_OWORD *)a6;
      v79 = "F64Min";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v64 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v64;
        }
        while (v64 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v79, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v75);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v80);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v73, (int *)&v77, (uint64_t *)&v78);
      v16 = v76;
      v17 = v74;
      IfNecessary = v80;
      v20 = v77;
    }
    if (v16 == 1 || v17 == 1)
    {
      LODWORD(v78) = IfNecessary;
      LODWORD(v79) = v20;
      v52 = (const char **)&v78;
      if ((IfNecessary & 6) == 2)
        v52 = &v79;
      *(_DWORD *)v52 = 4099;
      if (v16 == 1)
        v53 = &v75;
      else
        v53 = &v73;
      v54 = &v74;
      if (v16 == 1)
        v54 = (unint64_t *)&v76;
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)*v53, *v54, 0x1003uLL, v43, v44, v45, v46);
      v62 = SBYTE1(v78);
      v63 = SBYTE1(v79);
      v48 = *(_DWORD **)(a1 + 8);
      v49 = v48[50];
      if (v49 + 4 > v48[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v48 + 14), v55, v56, v57, v58, v59, v60, v61);
        v49 = v48[50];
      }
      v50 = (v47 >> 8) | (32 * v62) | (v63 << 16);
      v51 = 509630464;
    }
    else
    {
      v48 = *(_DWORD **)(a1 + 8);
      v49 = v48[50];
      if (v49 + 4 > v48[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v48 + 14), v40, v41, v42, v43, v44, v45, v46);
        v49 = v48[50];
      }
      v50 = ((__int16)v20 << 8) & 0xFFFF00FF | (v47 >> 8);
      v51 = ((__int16)IfNecessary >> 3) & 0xE19FA7E0 | 0x1E605800;
    }
    *(_DWORD *)(*((_QWORD *)v48 + 7) + v49) = v50 | v51;
    v48[50] += 4;
    *v72 = 0;
    v72[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Max(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  const char **v18;
  unsigned int IfNecessary;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  _DWORD *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  const char **v52;
  uint64_t *v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  __int128 v78;
  const char *v79;
  unsigned int v80;

  v75 = a2;
  v76 = a3;
  v73 = a4;
  v74 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1)
  {
    if (a5 == 1)
    {
      LODWORD(v78) = a2;
      LODWORD(v79) = a4;
      if (*(float *)&a2 >= *(float *)&a4)
        v18 = (const char **)&v78;
      else
        v18 = &v79;
      *a6 = *(unsigned int *)v18;
      *((_WORD *)a6 + 4) = -767;
      if (HIBYTE(word_1ECF4C700))
      {
        v78 = *(_OWORD *)a6;
        v79 = "F32Max";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v65 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v65;
          }
          while (v65 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v79, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v75);
        if (v76 != 1 && v76 != 4)
        {
          v80 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v75, v76, v66, v67, v68, v69, v70);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v80);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v73, (uint64_t *)&v78);
      }
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    v72 = a9;
    IfNecessary = 0;
    v80 = 0;
  }
  else
  {
    v72 = a9;
    v77 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v20 = 0;
    v80 = IfNecessary;
    if (v17 == 1)
      goto LABEL_12;
  }
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v77 = v20;
LABEL_12:
  v21 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  if (a3 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v21 & 7) != 1 || ((-8 * v27) ^ v21) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v21);
  }
  v28 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v22, v23, v24, v25, v26);
  if (a5 == 2)
  {
    v33 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v33)
      *(_DWORD *)(a1 + 1280) = v33;
    if ((v28 & 7) != 1 || ((-8 * v33) ^ v28) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v28);
  }
  v34 = *(_QWORD *)(a1 + 88);
  v35 = *(_DWORD *)(v34 + 596);
  if (v35)
  {
    if (v16 == 1)
      v36 = v20;
    else
      v36 = IfNecessary;
    v37 = *(_QWORD *)(v34 + 584) + 1232 * v35;
    v38 = *(_DWORD *)(v34 + 68) + *(_DWORD *)(v37 - 32);
    if (*(_DWORD *)(v37 - 160) == 5)
      v39 = v38 + 1;
    else
      v39 = v38;
    *a6 = v39;
    *((_WORD *)a6 + 4) = -766;
    v47 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v39, a6[1], v36, v29, v30, v31, v32);
    if (HIBYTE(word_1ECF4C700))
    {
      v78 = *(_OWORD *)a6;
      v79 = "F32Max";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v64 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v64;
        }
        while (v64 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v79, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v75);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v80);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v73, (int *)&v77, (uint64_t *)&v78);
      v16 = v76;
      v17 = v74;
      IfNecessary = v80;
      v20 = v77;
    }
    if (v16 == 1 || v17 == 1)
    {
      LODWORD(v78) = IfNecessary;
      LODWORD(v79) = v20;
      v52 = (const char **)&v78;
      if ((IfNecessary & 6) == 2)
        v52 = &v79;
      *(_DWORD *)v52 = 4099;
      if (v16 == 1)
        v53 = &v75;
      else
        v53 = &v73;
      v54 = &v74;
      if (v16 == 1)
        v54 = (unint64_t *)&v76;
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)*v53, *v54, 0x1003uLL, v43, v44, v45, v46);
      v62 = SBYTE1(v78);
      v63 = SBYTE1(v79);
      v48 = *(_DWORD **)(a1 + 8);
      v49 = v48[50];
      if (v49 + 4 > v48[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v48 + 14), v55, v56, v57, v58, v59, v60, v61);
        v49 = v48[50];
      }
      v50 = (v47 >> 8) | (32 * v62) | (v63 << 16);
      v51 = 505432064;
    }
    else
    {
      v48 = *(_DWORD **)(a1 + 8);
      v49 = v48[50];
      if (v49 + 4 > v48[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v48 + 14), v40, v41, v42, v43, v44, v45, v46);
        v49 = v48[50];
      }
      v50 = ((__int16)v20 << 8) & 0xFFFF00FF | (v47 >> 8);
      v51 = ((__int16)IfNecessary >> 3) & 0xE1DFB7E0 | 0x1E204800;
    }
    *(_DWORD *)(*((_QWORD *)v48 + 7) + v49) = v50 | v51;
    v48[50] += 4;
    *v72 = 0;
    v72[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Max(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  const char **v18;
  unsigned int IfNecessary;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  _DWORD *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  const char **v52;
  uint64_t *v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  __int128 v78;
  const char *v79;
  unsigned int v80;

  v75 = a2;
  v76 = a3;
  v73 = a4;
  v74 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1)
  {
    if (a5 == 1)
    {
      *(_QWORD *)&v78 = a2;
      v79 = (const char *)a4;
      if (*(double *)&a2 >= *(double *)&a4)
        v18 = (const char **)&v78;
      else
        v18 = &v79;
      *a6 = *v18;
      *((_WORD *)a6 + 4) = -1023;
      if (HIBYTE(word_1ECF4C700))
      {
        v78 = *(_OWORD *)a6;
        v79 = "F64Max";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v65 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v65;
          }
          while (v65 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v79, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v75);
        if (v76 != 1 && v76 != 4)
        {
          v80 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v75, v76, v66, v67, v68, v69, v70);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v80);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v73, (uint64_t *)&v78);
      }
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    v72 = a9;
    IfNecessary = 0;
    v80 = 0;
  }
  else
  {
    v72 = a9;
    v77 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v20 = 0;
    v80 = IfNecessary;
    if (v17 == 1)
      goto LABEL_12;
  }
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v77 = v20;
LABEL_12:
  v21 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  if (a3 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v21 & 7) != 1 || ((-8 * v27) ^ v21) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v21);
  }
  v28 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v22, v23, v24, v25, v26);
  if (a5 == 2)
  {
    v33 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v33)
      *(_DWORD *)(a1 + 1280) = v33;
    if ((v28 & 7) != 1 || ((-8 * v33) ^ v28) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v28);
  }
  v34 = *(_QWORD *)(a1 + 88);
  v35 = *(_DWORD *)(v34 + 596);
  if (v35)
  {
    if (v16 == 1)
      v36 = v20;
    else
      v36 = IfNecessary;
    v37 = *(_QWORD *)(v34 + 584) + 1232 * v35;
    v38 = *(_DWORD *)(v34 + 68) + *(_DWORD *)(v37 - 32);
    if (*(_DWORD *)(v37 - 160) == 5)
      v39 = v38 + 1;
    else
      v39 = v38;
    *a6 = v39;
    *((_WORD *)a6 + 4) = -1022;
    v47 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v39, a6[1], v36, v29, v30, v31, v32);
    if (HIBYTE(word_1ECF4C700))
    {
      v78 = *(_OWORD *)a6;
      v79 = "F64Max";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v64 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v64;
        }
        while (v64 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v79, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v75);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v80);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v73, (int *)&v77, (uint64_t *)&v78);
      v16 = v76;
      v17 = v74;
      IfNecessary = v80;
      v20 = v77;
    }
    if (v16 == 1 || v17 == 1)
    {
      LODWORD(v78) = IfNecessary;
      LODWORD(v79) = v20;
      v52 = (const char **)&v78;
      if ((IfNecessary & 6) == 2)
        v52 = &v79;
      *(_DWORD *)v52 = 4099;
      if (v16 == 1)
        v53 = &v75;
      else
        v53 = &v73;
      v54 = &v74;
      if (v16 == 1)
        v54 = (unint64_t *)&v76;
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)*v53, *v54, 0x1003uLL, v43, v44, v45, v46);
      v62 = SBYTE1(v78);
      v63 = SBYTE1(v79);
      v48 = *(_DWORD **)(a1 + 8);
      v49 = v48[50];
      if (v49 + 4 > v48[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v48 + 14), v55, v56, v57, v58, v59, v60, v61);
        v49 = v48[50];
      }
      v50 = (v47 >> 8) | (32 * v62) | (v63 << 16);
      v51 = 509626368;
    }
    else
    {
      v48 = *(_DWORD **)(a1 + 8);
      v49 = v48[50];
      if (v49 + 4 > v48[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v48 + 14), v40, v41, v42, v43, v44, v45, v46);
        v49 = v48[50];
      }
      v50 = ((__int16)v20 << 8) & 0xFFFF00FF | (v47 >> 8);
      v51 = ((__int16)IfNecessary >> 3) & 0xE19FB7E0 | 0x1E604800;
    }
    *(_DWORD *)(*((_QWORD *)v48 + 7) + v49) = v50 | v51;
    v48[50] += 4;
    *v72 = 0;
    v72[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32And(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _DWORD *v47;
  unsigned int v48;
  char v49;
  uint64_t *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  __int128 v65;
  const char *v66;
  unsigned int v67;

  v62 = a2;
  v63 = a3;
  v60 = a4;
  v61 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1)
  {
    if (a5 == 1)
    {
      *a6 = a2 & a4;
      *((_WORD *)a6 + 4) = -255;
      if (HIBYTE(word_1ECF4C700))
      {
        v65 = *(_OWORD *)a6;
        v66 = "I32And";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v52 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v52;
          }
          while (v52 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v66, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v62);
        if (v63 != 1 && v63 != 4)
        {
          v67 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v62, v63, v53, v54, v55, v56, v57);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v67);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v60, (uint64_t *)&v65);
      }
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    v59 = a9;
    IfNecessary = 0;
    v67 = 0;
  }
  else
  {
    v59 = a9;
    v64 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v19 = 0;
    v67 = IfNecessary;
    if (v17 == 1)
      goto LABEL_9;
  }
  v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v64 = v19;
LABEL_9:
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  if (a3 == 2)
  {
    v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v26)
      *(_DWORD *)(a1 + 1280) = v26;
    if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
  }
  v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
  if (a5 == 2)
  {
    v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v32)
      *(_DWORD *)(a1 + 1280) = v32;
    if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
  }
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_DWORD *)(v33 + 596);
  if (v34)
  {
    if (v16 == 1)
      v35 = v19;
    else
      v35 = IfNecessary;
    v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
    v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
    if (*(_DWORD *)(v36 - 160) == 5)
      v38 = v37 + 1;
    else
      v38 = v37;
    *a6 = v38;
    *((_WORD *)a6 + 4) = -254;
    v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, a6[1], v35, v28, v29, v30, v31);
    if (HIBYTE(word_1ECF4C700))
    {
      v65 = *(_OWORD *)a6;
      v66 = "I32And";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v51 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v51;
        }
        while (v51 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v66, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v62);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v67);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v60, (int *)&v64, (uint64_t *)&v65);
      v16 = v63;
      v17 = v61;
      IfNecessary = v67;
      v19 = v64;
    }
    v47 = *(_DWORD **)(a1 + 8);
    if (v16 == 1 || v17 == 1)
    {
      if ((IfNecessary & 6) == 2)
        v49 = BYTE1(IfNecessary);
      else
        v49 = BYTE1(v19);
      v50 = &v60;
      if (v16 == 1)
        v50 = &v62;
      JSC::MacroAssemblerARM64::and32((uint64_t)v47, (JSC::ARM64LogicalImmediate *)*(unsigned int *)v50, v49, (__int16)v46 >> 8);
    }
    else
    {
      v48 = v47[50];
      if (v48 + 4 > v47[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 14), v39, v40, v41, v42, v43, v44, v45);
        v48 = v47[50];
      }
      *(_DWORD *)(*((_QWORD *)v47 + 7) + v48) = (v19 << 8) & 0x1F0000 | (v46 >> 8) & 0x1F | (IfNecessary >> 3) & 0x3E0 | 0xA000000;
      v47[50] += 4;
    }
    *v59 = 0;
    v59[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32Xor(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _DWORD *v47;
  unsigned int v48;
  __int16 v49;
  uint64_t *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  __int128 v65;
  const char *v66;
  unsigned int v67;

  v62 = a2;
  v63 = a3;
  v60 = a4;
  v61 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1)
  {
    if (a5 == 1)
    {
      *a6 = a4 ^ a2;
      *((_WORD *)a6 + 4) = -255;
      if (HIBYTE(word_1ECF4C700))
      {
        v65 = *(_OWORD *)a6;
        v66 = "I32Xor";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v52 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v52;
          }
          while (v52 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v66, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v62);
        if (v63 != 1 && v63 != 4)
        {
          v67 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v62, v63, v53, v54, v55, v56, v57);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v67);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v60, (uint64_t *)&v65);
      }
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    v59 = a9;
    IfNecessary = 0;
    v67 = 0;
  }
  else
  {
    v59 = a9;
    v64 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v19 = 0;
    v67 = IfNecessary;
    if (v17 == 1)
      goto LABEL_9;
  }
  v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v64 = v19;
LABEL_9:
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  if (a3 == 2)
  {
    v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v26)
      *(_DWORD *)(a1 + 1280) = v26;
    if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
  }
  v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
  if (a5 == 2)
  {
    v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v32)
      *(_DWORD *)(a1 + 1280) = v32;
    if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
  }
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_DWORD *)(v33 + 596);
  if (v34)
  {
    if (v16 == 1)
      v35 = v19;
    else
      v35 = IfNecessary;
    v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
    v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
    if (*(_DWORD *)(v36 - 160) == 5)
      v38 = v37 + 1;
    else
      v38 = v37;
    *a6 = v38;
    *((_WORD *)a6 + 4) = -254;
    v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, a6[1], v35, v28, v29, v30, v31);
    if (HIBYTE(word_1ECF4C700))
    {
      v65 = *(_OWORD *)a6;
      v66 = "I32Xor";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v51 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v51;
        }
        while (v51 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v66, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v62);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v67);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v60, (int *)&v64, (uint64_t *)&v65);
      v16 = v63;
      v17 = v61;
      IfNecessary = v67;
      v19 = v64;
    }
    v47 = *(_DWORD **)(a1 + 8);
    if (v16 == 1 || v17 == 1)
    {
      if ((IfNecessary & 6) == 2)
        v49 = IfNecessary;
      else
        v49 = v19;
      v50 = &v60;
      if (v16 == 1)
        v50 = &v62;
      JSC::MacroAssemblerARM64::xor32((uint64_t)v47, (JSC::ARM64LogicalImmediate *)*(unsigned int *)v50, (v49 >> 8), ((__int16)v46 >> 8), v42, v43, v44, v45);
    }
    else
    {
      v48 = v47[50];
      if (v48 + 4 > v47[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 14), v39, v40, v41, v42, v43, v44, v45);
        v48 = v47[50];
      }
      *(_DWORD *)(*((_QWORD *)v47 + 7) + v48) = (v19 << 8) & 0x1F0000 | (v46 >> 8) & 0x1F | (IfNecessary >> 3) & 0x3E0 | 0x4A000000;
      v47[50] += 4;
    }
    *v59 = 0;
    v59[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32Or(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _DWORD *v47;
  unsigned int v48;
  char v49;
  uint64_t *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  __int128 v65;
  const char *v66;
  unsigned int v67;

  v62 = a2;
  v63 = a3;
  v60 = a4;
  v61 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1)
  {
    if (a5 == 1)
    {
      *a6 = a4 | a2;
      *((_WORD *)a6 + 4) = -255;
      if (HIBYTE(word_1ECF4C700))
      {
        v65 = *(_OWORD *)a6;
        v66 = "I32Or";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v52 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v52;
          }
          while (v52 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v66, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v62);
        if (v63 != 1 && v63 != 4)
        {
          v67 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v62, v63, v53, v54, v55, v56, v57);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v67);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v60, (uint64_t *)&v65);
      }
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    v59 = a9;
    IfNecessary = 0;
    v67 = 0;
  }
  else
  {
    v59 = a9;
    v64 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v19 = 0;
    v67 = IfNecessary;
    if (v17 == 1)
      goto LABEL_9;
  }
  v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v64 = v19;
LABEL_9:
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  if (a3 == 2)
  {
    v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v26)
      *(_DWORD *)(a1 + 1280) = v26;
    if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
  }
  v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
  if (a5 == 2)
  {
    v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v32)
      *(_DWORD *)(a1 + 1280) = v32;
    if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
  }
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_DWORD *)(v33 + 596);
  if (v34)
  {
    if (v16 == 1)
      v35 = v19;
    else
      v35 = IfNecessary;
    v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
    v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
    if (*(_DWORD *)(v36 - 160) == 5)
      v38 = v37 + 1;
    else
      v38 = v37;
    *a6 = v38;
    *((_WORD *)a6 + 4) = -254;
    v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, a6[1], v35, v28, v29, v30, v31);
    if (HIBYTE(word_1ECF4C700))
    {
      v65 = *(_OWORD *)a6;
      v66 = "I32Or";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v51 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v51;
        }
        while (v51 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v66, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v62);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v67);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v60, (int *)&v64, (uint64_t *)&v65);
      v16 = v63;
      v17 = v61;
      IfNecessary = v67;
      v19 = v64;
    }
    v47 = *(_DWORD **)(a1 + 8);
    if (v16 == 1 || v17 == 1)
    {
      if ((IfNecessary & 6) == 2)
        v49 = BYTE1(IfNecessary);
      else
        v49 = BYTE1(v19);
      v50 = &v60;
      if (v16 == 1)
        v50 = &v62;
      JSC::MacroAssemblerARM64::or32((uint64_t)v47, (JSC::ARM64LogicalImmediate *)*(unsigned int *)v50, v49, (__int16)v46 >> 8);
    }
    else
    {
      v48 = v47[50];
      if (v48 + 4 > v47[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 14), v39, v40, v41, v42, v43, v44, v45);
        v48 = v47[50];
      }
      *(_DWORD *)(*((_QWORD *)v47 + 7) + v48) = (v19 << 8) & 0x1F0000 | (v46 >> 8) & 0x1F | (IfNecessary >> 3) & 0x3E0 | 0x2A000000;
      v47[50] += 4;
    }
    *v59 = 0;
    v59[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32Shl(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v73;
  uint64_t v74;
  unint64_t v75;
  JSC::ARM64LogicalImmediate *v76;
  unint64_t v77;
  unsigned int v78;
  __int128 v79;
  const char *v80;
  unsigned int v81;

  v76 = (JSC::ARM64LogicalImmediate *)a2;
  v77 = a3;
  v74 = a4;
  v75 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1)
  {
    if (a5 == 1)
    {
      *a6 = ((_DWORD)a2 << a4);
      *((_WORD *)a6 + 4) = -255;
      if (HIBYTE(word_1ECF4C700))
      {
        v79 = *(_OWORD *)a6;
        v80 = "I32Shl";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v66 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v66;
          }
          while (v66 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v80, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v76);
        if (v77 != 1 && v77 != 4)
        {
          v81 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v76, v77, v67, v68, v69, v70, v71);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v81);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v74, (uint64_t *)&v79);
      }
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    v73 = a9;
    IfNecessary = 0;
    v81 = 0;
  }
  else
  {
    v73 = a9;
    v78 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v19 = 0;
    v81 = IfNecessary;
    if (v17 == 1)
      goto LABEL_9;
  }
  v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v78 = v19;
LABEL_9:
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  if (a3 == 2)
  {
    v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v26)
      *(_DWORD *)(a1 + 1280) = v26;
    if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
  }
  v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
  if (a5 == 2)
  {
    v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v32)
      *(_DWORD *)(a1 + 1280) = v32;
    if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
  }
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_DWORD *)(v33 + 596);
  if (v34)
  {
    if (v16 == 1)
      v35 = v19;
    else
      v35 = IfNecessary;
    v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
    v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
    if (*(_DWORD *)(v36 - 160) == 5)
      v38 = v37 + 1;
    else
      v38 = v37;
    *a6 = v38;
    *((_WORD *)a6 + 4) = -254;
    v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, a6[1], v35, v28, v29, v30, v31);
    if (HIBYTE(word_1ECF4C700))
    {
      v79 = *(_OWORD *)a6;
      v80 = "I32Shl";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v65 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v65;
        }
        while (v65 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v80, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v76);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v81);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v74, (int *)&v78, (uint64_t *)&v79);
      v16 = v77;
      v17 = v75;
      IfNecessary = v81;
      v19 = v78;
    }
    if (v16 == 1 || v17 == 1)
    {
      if (v17 == 1)
      {
        v53 = *(_QWORD *)(a1 + 8);
        v54 = v74 & 0x1F;
        v55 = *(_DWORD *)(v53 + 200);
        v49 = (unsigned int *)(v53 + 200);
        v48 = v55;
        v51 = v49 - 36;
        if (v55 + 4 > *(v49 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v49 - 36), v39, v40, v41, v42, v43, v44, v45);
          v48 = *v49;
        }
        v52 = ((IfNecessary >> 3) & 0x3E0 | (-65536 * v54) & 0x1F0000 | (v54 << 10) | (v46 >> 8) & 0x1F) ^ 0x53007C00;
      }
      else
      {
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v76, v77, 0x802uLL, v42, v43, v44, v45);
        v63 = *(_QWORD *)(a1 + 8);
        v64 = *(_DWORD *)(v63 + 200);
        v49 = (unsigned int *)(v63 + 200);
        v48 = v64;
        v51 = v49 - 36;
        if (v64 + 4 > *(v49 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v49 - 36), v56, v57, v58, v59, v60, v61, v62);
          v48 = *v49;
        }
        v52 = (v19 << 8) & 0x1F0000 | (v46 >> 8) & 0x1F | 0x1AC02100;
      }
    }
    else
    {
      v47 = *(_QWORD *)(a1 + 8);
      v50 = *(_DWORD *)(v47 + 200);
      v49 = (unsigned int *)(v47 + 200);
      v48 = v50;
      v51 = v49 - 36;
      if (v50 + 4 > *(v49 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v49 - 36), v39, v40, v41, v42, v43, v44, v45);
        v48 = *v49;
      }
      v52 = (v19 << 8) & 0x1F0000 | (v46 >> 8) & 0x1F | (IfNecessary >> 3) & 0x3E0 | 0x1AC02000;
    }
    *(_DWORD *)(*(_QWORD *)v51 + v48) = v52;
    *v49 += 4;
    *v73 = 0;
    v73[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32ShrS(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  int v52;
  int v53;
  int v54;
  char v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v75;
  uint64_t v76;
  unint64_t v77;
  JSC::ARM64LogicalImmediate *v78;
  unint64_t v79;
  unsigned int v80;
  __int128 v81;
  const char *v82;
  unsigned int v83;

  v78 = (JSC::ARM64LogicalImmediate *)a2;
  v79 = a3;
  v76 = a4;
  v77 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 != 1)
  {
    v75 = a9;
    v80 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v19 = 0;
    v83 = IfNecessary;
    if (v17 == 1)
    {
LABEL_9:
      v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
      if (a3 == 2)
      {
        v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
        if (*(_DWORD *)(a1 + 1280) < v26)
          *(_DWORD *)(a1 + 1280) = v26;
        if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
      }
      v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
      if (a5 == 2)
      {
        v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
        if (*(_DWORD *)(a1 + 1280) < v32)
          *(_DWORD *)(a1 + 1280) = v32;
        if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
      }
      v33 = *(_QWORD *)(a1 + 88);
      v34 = *(_DWORD *)(v33 + 596);
      if (!v34)
      {
        __break(0xC471u);
        return;
      }
      if (v16 == 1)
        v35 = v19;
      else
        v35 = IfNecessary;
      v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
      v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
      if (*(_DWORD *)(v36 - 160) == 5)
        v38 = v37 + 1;
      else
        v38 = v37;
      *a6 = v38;
      *((_WORD *)a6 + 4) = -254;
      v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, a6[1], v35, v28, v29, v30, v31);
      if (HIBYTE(word_1ECF4C700))
      {
        v81 = *(_OWORD *)a6;
        v82 = "I32ShrS";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v67 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v67;
          }
          while (v67 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v82, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v78);
        if ((IfNecessary & 7) != 0)
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v83);
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v76, (int *)&v80, (uint64_t *)&v81);
        v16 = v79;
        v17 = v77;
        IfNecessary = v83;
        v19 = v80;
      }
      if (v16 == 1 || v17 == 1)
      {
        if (v17 != 1)
        {
          JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v78, v79, 0x802uLL, v42, v43, v44, v45);
          v65 = *(_QWORD *)(a1 + 8);
          v66 = *(_DWORD *)(v65 + 200);
          v49 = (unsigned int *)(v65 + 200);
          v48 = v66;
          v51 = v49 - 36;
          if (v66 + 4 > *(v49 - 2))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v49 - 36), v58, v59, v60, v61, v62, v63, v64);
            v48 = *v49;
          }
          v54 = (v19 << 8) & 0x1F0000 | (v46 >> 8) & 0x1F | 0x1AC02900;
          goto LABEL_35;
        }
        v55 = v76;
        v56 = *(_QWORD *)(a1 + 8);
        v57 = *(_DWORD *)(v56 + 200);
        v49 = (unsigned int *)(v56 + 200);
        v48 = v57;
        v51 = v49 - 36;
        if (v57 + 4 > *(v49 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v49 - 36), v39, v40, v41, v42, v43, v44, v45);
          v48 = *v49;
        }
        v52 = (IfNecessary >> 3) & 0x3E0 | (v46 >> 8) & 0x1F | ((v55 & 0x1F) << 16);
        v53 = 318798848;
      }
      else
      {
        v47 = *(_QWORD *)(a1 + 8);
        v50 = *(_DWORD *)(v47 + 200);
        v49 = (unsigned int *)(v47 + 200);
        v48 = v50;
        v51 = v49 - 36;
        if (v50 + 4 > *(v49 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v49 - 36), v39, v40, v41, v42, v43, v44, v45);
          v48 = *v49;
        }
        v52 = (v19 << 8) & 0x1F0000 | (v46 >> 8) & 0x1F;
        v53 = (IfNecessary >> 3) & 0x3E0 | 0x1AC02800;
      }
      v54 = v52 | v53;
LABEL_35:
      *(_DWORD *)(*(_QWORD *)v51 + v48) = v54;
      *v49 += 4;
      *v75 = 0;
      v75[8] = 0;
      return;
    }
LABEL_8:
    v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
    v80 = v19;
    goto LABEL_9;
  }
  if (a5 != 1)
  {
    v75 = a9;
    IfNecessary = 0;
    v83 = 0;
    goto LABEL_8;
  }
  *a6 = ((int)a2 >> a4);
  *((_WORD *)a6 + 4) = -255;
  if (HIBYTE(word_1ECF4C700))
  {
    v81 = *(_OWORD *)a6;
    v82 = "I32ShrS";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v68 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v68;
      }
      while (v68 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>(&v82, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v78);
    if (v79 != 1 && v79 != 4)
    {
      v83 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v78, v79, v69, v70, v71, v72, v73);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v83);
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v76, (uint64_t *)&v81);
  }
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32ShrU(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  int v52;
  int v53;
  int v54;
  char v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v75;
  uint64_t v76;
  unint64_t v77;
  JSC::ARM64LogicalImmediate *v78;
  unint64_t v79;
  unsigned int v80;
  __int128 v81;
  const char *v82;
  unsigned int v83;

  v78 = (JSC::ARM64LogicalImmediate *)a2;
  v79 = a3;
  v76 = a4;
  v77 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 != 1)
  {
    v75 = a9;
    v80 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v19 = 0;
    v83 = IfNecessary;
    if (v17 == 1)
    {
LABEL_9:
      v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
      if (a3 == 2)
      {
        v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
        if (*(_DWORD *)(a1 + 1280) < v26)
          *(_DWORD *)(a1 + 1280) = v26;
        if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
      }
      v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
      if (a5 == 2)
      {
        v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
        if (*(_DWORD *)(a1 + 1280) < v32)
          *(_DWORD *)(a1 + 1280) = v32;
        if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
      }
      v33 = *(_QWORD *)(a1 + 88);
      v34 = *(_DWORD *)(v33 + 596);
      if (!v34)
      {
        __break(0xC471u);
        return;
      }
      if (v16 == 1)
        v35 = v19;
      else
        v35 = IfNecessary;
      v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
      v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
      if (*(_DWORD *)(v36 - 160) == 5)
        v38 = v37 + 1;
      else
        v38 = v37;
      *a6 = v38;
      *((_WORD *)a6 + 4) = -254;
      v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, a6[1], v35, v28, v29, v30, v31);
      if (HIBYTE(word_1ECF4C700))
      {
        v81 = *(_OWORD *)a6;
        v82 = "I32ShrU";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v67 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v67;
          }
          while (v67 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v82, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v78);
        if ((IfNecessary & 7) != 0)
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v83);
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v76, (int *)&v80, (uint64_t *)&v81);
        v16 = v79;
        v17 = v77;
        IfNecessary = v83;
        v19 = v80;
      }
      if (v16 == 1 || v17 == 1)
      {
        if (v17 != 1)
        {
          JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v78, v79, 0x802uLL, v42, v43, v44, v45);
          v65 = *(_QWORD *)(a1 + 8);
          v66 = *(_DWORD *)(v65 + 200);
          v49 = (unsigned int *)(v65 + 200);
          v48 = v66;
          v51 = v49 - 36;
          if (v66 + 4 > *(v49 - 2))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v49 - 36), v58, v59, v60, v61, v62, v63, v64);
            v48 = *v49;
          }
          v54 = (v19 << 8) & 0x1F0000 | (v46 >> 8) & 0x1F | 0x1AC02500;
          goto LABEL_35;
        }
        v55 = v76;
        v56 = *(_QWORD *)(a1 + 8);
        v57 = *(_DWORD *)(v56 + 200);
        v49 = (unsigned int *)(v56 + 200);
        v48 = v57;
        v51 = v49 - 36;
        if (v57 + 4 > *(v49 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v49 - 36), v39, v40, v41, v42, v43, v44, v45);
          v48 = *v49;
        }
        v52 = (IfNecessary >> 3) & 0x3E0 | (v46 >> 8) & 0x1F | ((v55 & 0x1F) << 16);
        v53 = 1392540672;
      }
      else
      {
        v47 = *(_QWORD *)(a1 + 8);
        v50 = *(_DWORD *)(v47 + 200);
        v49 = (unsigned int *)(v47 + 200);
        v48 = v50;
        v51 = v49 - 36;
        if (v50 + 4 > *(v49 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v49 - 36), v39, v40, v41, v42, v43, v44, v45);
          v48 = *v49;
        }
        v52 = (v19 << 8) & 0x1F0000 | (v46 >> 8) & 0x1F;
        v53 = (IfNecessary >> 3) & 0x3E0 | 0x1AC02400;
      }
      v54 = v52 | v53;
LABEL_35:
      *(_DWORD *)(*(_QWORD *)v51 + v48) = v54;
      *v49 += 4;
      *v75 = 0;
      v75[8] = 0;
      return;
    }
LABEL_8:
    v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
    v80 = v19;
    goto LABEL_9;
  }
  if (a5 != 1)
  {
    v75 = a9;
    IfNecessary = 0;
    v83 = 0;
    goto LABEL_8;
  }
  *a6 = a2 >> a4;
  *((_WORD *)a6 + 4) = -255;
  if (HIBYTE(word_1ECF4C700))
  {
    v81 = *(_OWORD *)a6;
    v82 = "I32ShrU";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v68 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v68;
      }
      while (v68 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>(&v82, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v78);
    if (v79 != 1 && v79 != 4)
    {
      v83 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v78, v79, v69, v70, v71, v72, v73);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v83);
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v76, (uint64_t *)&v81);
  }
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32Rotl(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _BYTE *v47;
  _DWORD *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  _DWORD *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v81;
  uint64_t v82;
  unint64_t v83;
  JSC::ARM64LogicalImmediate *v84;
  unint64_t v85;
  unsigned int v86;
  __int128 v87;
  const char *v88;
  unsigned int v89;

  v84 = (JSC::ARM64LogicalImmediate *)a2;
  v85 = a3;
  v82 = a4;
  v83 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 != 1)
  {
    v81 = a9;
    v86 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v19 = 0;
    v89 = IfNecessary;
    if (v17 == 1)
    {
LABEL_9:
      v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
      if (a3 == 2)
      {
        v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
        if (*(_DWORD *)(a1 + 1280) < v26)
          *(_DWORD *)(a1 + 1280) = v26;
        if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
      }
      v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
      if (a5 == 2)
      {
        v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
        if (*(_DWORD *)(a1 + 1280) < v32)
          *(_DWORD *)(a1 + 1280) = v32;
        if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
      }
      v33 = *(_QWORD *)(a1 + 88);
      v34 = *(_DWORD *)(v33 + 596);
      if (!v34)
      {
        __break(0xC471u);
        return;
      }
      if (v16 == 1)
        v35 = v19;
      else
        v35 = IfNecessary;
      v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
      v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
      if (*(_DWORD *)(v36 - 160) == 5)
        v38 = v37 + 1;
      else
        v38 = v37;
      *a6 = v38;
      *((_WORD *)a6 + 4) = -254;
      v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, a6[1], v35, v28, v29, v30, v31);
      if (HIBYTE(word_1ECF4C700))
      {
        v87 = *(_OWORD *)a6;
        v88 = "I32Rotl";
        WTF::dataLog<char [16]>("BBQ\t");
        v47 = v81;
        if (*(_DWORD *)a1)
        {
          v73 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v73;
          }
          while (v73 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v88, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v84);
        if ((IfNecessary & 7) != 0)
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v89);
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v82, (int *)&v86, (uint64_t *)&v87);
        v16 = v85;
        v17 = v83;
        IfNecessary = v89;
      }
      else
      {
        v47 = v81;
      }
      if (v16 == 1 || v17 == 1)
      {
        if (v17 == 1)
        {
          v57 = v82;
          v58 = *(_QWORD *)(a1 + 8);
          v59 = *(_DWORD *)(v58 + 200);
          v53 = (unsigned int *)(v58 + 200);
          v52 = v59;
          v55 = v53 - 36;
          if (v59 + 4 > *(v53 - 2))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 - 36), v39, v40, v41, v42, v43, v44, v45);
            v52 = *v53;
          }
          v60 = (-1024 * v57) & 0x7C00 | (((IfNecessary >> 8) & 0x1F) << 16) | (32 * ((IfNecessary >> 8) & 0x1F)) | (v46 >> 8) & 0x1F | 0x13800000;
          goto LABEL_47;
        }
        v61 = *(_DWORD **)(a1 + 8);
        v62 = (((v86 >> 8) & 0x1F) << 16) | 0x4B0003E8;
        v63 = v61[50];
        if (v63 + 4 > v61[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v61 + 14), v39, v40, v41, v42, v43, v44, v45);
          v63 = v61[50];
        }
        *(_DWORD *)(*((_QWORD *)v61 + 7) + v63) = v62;
        v61[50] += 4;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v84, v85, v46, v42, v43, v44, v45);
        v71 = *(_QWORD *)(a1 + 8);
        v72 = *(_DWORD *)(v71 + 200);
        v53 = (unsigned int *)(v71 + 200);
        v52 = v72;
        v55 = v53 - 36;
        if (v72 + 4 > *(v53 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 - 36), v64, v65, v66, v67, v68, v69, v70);
          v52 = *v53;
        }
        v56 = (v46 >> 8) & 0x1F | (32 * ((v46 >> 8) & 0x1F));
      }
      else
      {
        v48 = *(_DWORD **)(a1 + 8);
        v49 = (((v86 >> 8) & 0x1F) << 16) | 0x4B0003E8;
        v50 = v48[50];
        if (v50 + 4 > v48[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v48 + 14), v39, v40, v41, v42, v43, v44, v45);
          v50 = v48[50];
        }
        *(_DWORD *)(*((_QWORD *)v48 + 7) + v50) = v49;
        v48[50] += 4;
        v51 = *(_QWORD *)(a1 + 8);
        v54 = *(_DWORD *)(v51 + 200);
        v53 = (unsigned int *)(v51 + 200);
        v52 = v54;
        v55 = v53 - 36;
        if (v54 + 4 > *(v53 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 - 36), v39, v40, v41, v42, v43, v44, v45);
          v52 = *v53;
        }
        v56 = (IfNecessary >> 3) & 0x3E0 | (v46 >> 8) & 0x1F;
      }
      v60 = v56 | 0x1AC82C00;
LABEL_47:
      *(_DWORD *)(*(_QWORD *)v55 + v52) = v60;
      *v53 += 4;
      *v47 = 0;
      v47[8] = 0;
      return;
    }
LABEL_8:
    v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
    v86 = v19;
    goto LABEL_9;
  }
  if (a5 != 1)
  {
    v81 = a9;
    IfNecessary = 0;
    v89 = 0;
    goto LABEL_8;
  }
  *a6 = __ROR4__(a2, -(char)a4);
  *((_WORD *)a6 + 4) = -255;
  if (HIBYTE(word_1ECF4C700))
  {
    v87 = *(_OWORD *)a6;
    v88 = "I32Rotl";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v74 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v74;
      }
      while (v74 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>(&v88, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v84);
    if (v85 != 1 && v85 != 4)
    {
      v89 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v84, v85, v75, v76, v77, v78, v79);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v89);
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v82, (uint64_t *)&v87);
  }
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32Rotr(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  int v52;
  int v53;
  char v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v75;
  uint64_t v76;
  unint64_t v77;
  JSC::ARM64LogicalImmediate *v78;
  unint64_t v79;
  unsigned int v80;
  __int128 v81;
  const char *v82;
  unsigned int v83;

  v78 = (JSC::ARM64LogicalImmediate *)a2;
  v79 = a3;
  v76 = a4;
  v77 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1)
  {
    if (a5 == 1)
    {
      *a6 = __ROR4__(a2, a4);
      *((_WORD *)a6 + 4) = -255;
      if (HIBYTE(word_1ECF4C700))
      {
        v81 = *(_OWORD *)a6;
        v82 = "I32Rotr";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v68 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v68;
          }
          while (v68 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v82, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v78);
        if (v79 != 1 && v79 != 4)
        {
          v83 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v78, v79, v69, v70, v71, v72, v73);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v83);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v76, (uint64_t *)&v81);
      }
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    v75 = a9;
    IfNecessary = 0;
    v83 = 0;
  }
  else
  {
    v75 = a9;
    v80 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v19 = 0;
    v83 = IfNecessary;
    if (v17 == 1)
      goto LABEL_9;
  }
  v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v80 = v19;
LABEL_9:
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  if (a3 == 2)
  {
    v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v26)
      *(_DWORD *)(a1 + 1280) = v26;
    if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
  }
  v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
  if (a5 == 2)
  {
    v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v32)
      *(_DWORD *)(a1 + 1280) = v32;
    if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
  }
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_DWORD *)(v33 + 596);
  if (v34)
  {
    if (v16 == 1)
      v35 = v19;
    else
      v35 = IfNecessary;
    v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
    v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
    if (*(_DWORD *)(v36 - 160) == 5)
      v38 = v37 + 1;
    else
      v38 = v37;
    *a6 = v38;
    *((_WORD *)a6 + 4) = -254;
    v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, a6[1], v35, v28, v29, v30, v31);
    if (HIBYTE(word_1ECF4C700))
    {
      v81 = *(_OWORD *)a6;
      v82 = "I32Rotr";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v67 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v67;
        }
        while (v67 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v82, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v78);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v83);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v76, (int *)&v80, (uint64_t *)&v81);
      v16 = v79;
      v17 = v77;
      IfNecessary = v83;
      v19 = v80;
    }
    if (v16 == 1 || v17 == 1)
    {
      if (v17 == 1)
      {
        v54 = v76;
        v55 = *(_QWORD *)(a1 + 8);
        v56 = *(_DWORD *)(v55 + 200);
        v49 = (unsigned int *)(v55 + 200);
        v48 = v56;
        v51 = v49 - 36;
        if (v56 + 4 > *(v49 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v49 - 36), v39, v40, v41, v42, v43, v44, v45);
          v48 = *v49;
        }
        v52 = (((IfNecessary >> 8) & 0x1F) << 16) | ((v54 & 0x1F) << 10) | (32 * ((IfNecessary >> 8) & 0x1F));
        v57 = 327155712;
      }
      else
      {
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v78, v79, 0x802uLL, v42, v43, v44, v45);
        v65 = *(_QWORD *)(a1 + 8);
        v66 = *(_DWORD *)(v65 + 200);
        v49 = (unsigned int *)(v65 + 200);
        v48 = v66;
        v51 = v49 - 36;
        if (v66 + 4 > *(v49 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v49 - 36), v58, v59, v60, v61, v62, v63, v64);
          v48 = *v49;
        }
        v52 = (v19 << 8) & 0x1F0000;
        v57 = 448802048;
      }
      v53 = (v46 >> 8) & 0x1F | v57;
    }
    else
    {
      v47 = *(_QWORD *)(a1 + 8);
      v50 = *(_DWORD *)(v47 + 200);
      v49 = (unsigned int *)(v47 + 200);
      v48 = v50;
      v51 = v49 - 36;
      if (v50 + 4 > *(v49 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v49 - 36), v39, v40, v41, v42, v43, v44, v45);
        v48 = *v49;
      }
      v52 = (v19 << 8) & 0x1F0000 | (v46 >> 8) & 0x1F;
      v53 = (IfNecessary >> 3) & 0x3E0 | 0x1AC02C00;
    }
    *(_DWORD *)(*(_QWORD *)v51 + v48) = v52 | v53;
    *v49 += 4;
    *v75 = 0;
    v75[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32Clz(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = __clz(a2);
    *((_WORD *)a4 + 4) = -255;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "I32Clz";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -254;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "I32Clz";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      IfNecessary = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = (IfNecessary >> 3) & 0x3E0 | (v40 >> 8) & 0x1F | 0x5AC01000;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32Ctz(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46[2];
  unsigned int v47;
  uint64_t v48[3];
  const char *v49;

  v46[0] = a2;
  v46[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = __clz(__rbit32(a2));
    *((_WORD *)a4 + 4) = -255;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v48 = *(_OWORD *)a4;
      v49 = "I32Ctz";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v49, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v46, v48);
    }
LABEL_23:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v47 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -254;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v48 = *(_OWORD *)a4;
      v49 = "I32Ctz";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v45 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v45;
        }
        while (v45 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v49, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v46, (int *)&v47, v48);
      IfNecessary = v47;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = (IfNecessary >> 3) & 0x3E0 | (v40 >> 8) & 0x1F | 0x5AC00000;
    v43 = v41[50];
    v44 = v43 + 4;
    v41[50] = v43 + 4;
    if ((v43 + 8) > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v44 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v44) = (v40 >> 8) & 0x1F | (32 * ((v40 >> 8) & 0x1F)) | 0x5AC01000;
    v41[50] += 4;
    goto LABEL_23;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI32(_BYTE *a1, uint64_t a2, const char *a3, uint64_t *a4, unsigned int *a5, uint64_t *a6, uint64_t a7, unsigned int (*a8)(_QWORD, _QWORD))
{
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int IfNecessary;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  _DWORD *v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  const char *v68;
  unsigned int v69;
  unsigned int v70;
  __int128 v71;
  const char *v72;
  unsigned int v73;

  if (*((_BYTE *)a4 + 8) == 1)
  {
    v14 = (unsigned __int8 *)(a5 + 2);
    if (*((_BYTE *)a5 + 8) == 1)
    {
      *a6 = a8(*(unsigned int *)a4, *a5);
      *((_WORD *)a6 + 4) = -255;
      if (HIBYTE(word_1ECF4C700))
      {
        v71 = *(_OWORD *)a6;
        v72 = a3;
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a2)
        {
          v15 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v15;
          }
          while (v15 < *(_DWORD *)a2);
        }
        WTF::dataLog<char const*,char [2]>(&v72, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a4);
        v21 = *((unsigned __int8 *)a4 + 8);
        if (v21 != 1 && v21 != 4)
        {
          v73 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a4, a4[1], v16, v17, v18, v19, v20);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v73);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t *)a5, (uint64_t *)&v71);
      }
      goto LABEL_53;
    }
    v68 = a3;
    v69 = a7;
    IfNecessary = 0;
    v73 = 0;
  }
  else
  {
    v68 = a3;
    v69 = a7;
    v70 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *a4, a4[1], (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, (uint64_t)a8);
    v24 = 0;
    v73 = IfNecessary;
    v14 = (unsigned __int8 *)(a5 + 2);
    if (*((_BYTE *)a5 + 8) == 1)
      goto LABEL_17;
  }
  v24 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a5, *((_QWORD *)a5 + 1), (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, (uint64_t)a8);
  v70 = v24;
LABEL_17:
  v26 = *a4;
  v25 = a4[1];
  v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a4, v25, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, (uint64_t)a8);
  if (v25 == 2)
  {
    v33 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v26 + 16;
    if (*(_DWORD *)(a2 + 1280) < v33)
      *(_DWORD *)(a2 + 1280) = v33;
    if ((v27 & 7) != 1 || ((-8 * v33) ^ v27) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v26, v25, v27);
  }
  v34 = *(_QWORD *)a5;
  v35 = *((_QWORD *)a5 + 1);
  v36 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a5, v35, v28, v29, v30, v31, v32);
  if (v35 == 2)
  {
    v41 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v34 + 16;
    if (*(_DWORD *)(a2 + 1280) < v41)
      *(_DWORD *)(a2 + 1280) = v41;
    if ((v36 & 7) != 1 || ((-8 * v41) ^ v36) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v34, v35, v36);
  }
  v42 = *(_QWORD *)(a2 + 88);
  v43 = *(_DWORD *)(v42 + 596);
  if (!v43)
  {
    __break(0xC471u);
    JUMPOUT(0x198F2245CLL);
  }
  if (*((_BYTE *)a4 + 8) == 1)
    v44 = v24;
  else
    v44 = IfNecessary;
  v45 = *(_QWORD *)(v42 + 584) + 1232 * v43;
  v46 = *(_DWORD *)(v42 + 68) + *(_DWORD *)(v45 - 32);
  if (*(_DWORD *)(v45 - 160) == 5)
    v47 = v46 + 1;
  else
    v47 = v46;
  *a6 = v47;
  *((_WORD *)a6 + 4) = -254;
  v55 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v47, a6[1], v44, v37, v38, v39, v40);
  if (HIBYTE(word_1ECF4C700))
  {
    v71 = *(_OWORD *)a6;
    v72 = v68;
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a2)
    {
      v67 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v67;
      }
      while (v67 < *(_DWORD *)a2);
    }
    WTF::dataLog<char const*,char [2]>(&v72, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a4);
    if ((IfNecessary & 7) != 0)
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v73);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t)a5, (int *)&v70, (uint64_t *)&v71);
  }
  v56 = *v14;
  if (*((_BYTE *)a4 + 8) == 1 || v56 == 1)
  {
    v62 = v69;
    if (v56 == 1)
    {
      v63 = *a5;
      v64 = SBYTE1(v73);
      v65 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      v63 = *(unsigned int *)a4;
      v65 = *(_QWORD *)(a2 + 8);
      v66 = v69 - 2;
      if (v69 - 2 <= 0xB && ((0xFC3u >> v66) & 1) != 0)
        v62 = dword_19919F6B0[v66];
      v64 = ((__int16)v70 >> 8);
    }
    JSC::MacroAssemblerARM64::compare32(v65, v62, v64, v63, ((__int16)v55 >> 8), v52, v53, v54);
  }
  else
  {
    v57 = *(_DWORD **)(a2 + 8);
    v58 = (v70 << 8) & 0x1F0000;
    if ((v73 & 0xFF00) == 0x1F00)
      v59 = v58 | 0x6B2063FF;
    else
      v59 = (v73 >> 3) & 0x3E0 | v58 | 0x6B00001F;
    v60 = v57[50];
    if (v60 + 4 > v57[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v57 + 14), v48, v49, v50, v51, v52, v53, v54);
      v60 = v57[50];
    }
    *(_DWORD *)(*((_QWORD *)v57 + 7) + v60) = v59;
    v61 = v57[50] + 4;
    v57[50] = v61;
    if (v61 + 4 > v57[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v57 + 14), v48, v49, v50, v51, v52, v53, v54);
      v61 = v57[50];
    }
    *(_DWORD *)(*((_QWORD *)v57 + 7) + v61) = (((v69 & 0xF) << 12) | (v55 >> 8) & 0x1F) ^ 0x1A9F17E0;
    v57[50] += 4;
  }
LABEL_53:
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32Eq(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _DWORD *v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  __int128 v68;
  const char *v69;
  unsigned int v70;

  v65 = a2;
  v66 = a3;
  v63 = a4;
  v64 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1)
  {
    if (a5 == 1)
    {
      *a6 = (_DWORD)a2 == (_DWORD)a4;
      *((_WORD *)a6 + 4) = -255;
      if (HIBYTE(word_1ECF4C700))
      {
        v68 = *(_OWORD *)a6;
        v69 = "I32Eq";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v55 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v55;
          }
          while (v55 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v69, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v65);
        if (v66 != 1 && v66 != 4)
        {
          v70 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v65, v66, v56, v57, v58, v59, v60);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v70);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v63, (uint64_t *)&v68);
      }
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    v62 = a9;
    IfNecessary = 0;
    v70 = 0;
  }
  else
  {
    v62 = a9;
    v67 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v19 = 0;
    v70 = IfNecessary;
    if (v17 == 1)
      goto LABEL_9;
  }
  v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v67 = v19;
LABEL_9:
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  if (a3 == 2)
  {
    v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v26)
      *(_DWORD *)(a1 + 1280) = v26;
    if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
  }
  v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
  if (a5 == 2)
  {
    v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v32)
      *(_DWORD *)(a1 + 1280) = v32;
    if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
  }
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_DWORD *)(v33 + 596);
  if (!v34)
  {
    __break(0xC471u);
    JUMPOUT(0x198F2290CLL);
  }
  if (v16 == 1)
    v35 = v19;
  else
    v35 = IfNecessary;
  v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
  v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
  if (*(_DWORD *)(v36 - 160) == 5)
    v38 = v37 + 1;
  else
    v38 = v37;
  *a6 = v38;
  *((_WORD *)a6 + 4) = -254;
  v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, a6[1], v35, v28, v29, v30, v31);
  if (HIBYTE(word_1ECF4C700))
  {
    v68 = *(_OWORD *)a6;
    v69 = "I32Eq";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v54 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v54;
      }
      while (v54 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>(&v69, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v65);
    if ((IfNecessary & 7) != 0)
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v70);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v63, (int *)&v67, (uint64_t *)&v68);
    v16 = v66;
    v17 = v64;
  }
  if (v16 == 1 || v17 == 1)
  {
    if (v17 == 1)
    {
      v52 = v63;
      v53 = SBYTE1(v70);
    }
    else
    {
      v53 = SBYTE1(v67);
      v52 = v65;
    }
    JSC::MacroAssemblerARM64::compare32(*(_QWORD *)(a1 + 8), 0, v53, v52, ((__int16)v46 >> 8), v43, v44, v45);
  }
  else
  {
    v47 = *(_DWORD **)(a1 + 8);
    v48 = (v67 << 8) & 0x1F0000;
    if ((v70 & 0xFF00) == 0x1F00)
      v49 = v48 | 0x6B2063FF;
    else
      v49 = (v70 >> 3) & 0x3E0 | v48 | 0x6B00001F;
    v50 = v47[50];
    if (v50 + 4 > v47[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 14), v39, v40, v41, v42, v43, v44, v45);
      v50 = v47[50];
    }
    *(_DWORD *)(*((_QWORD *)v47 + 7) + v50) = v49;
    v51 = v47[50] + 4;
    v47[50] = v51;
    if (v51 + 4 > v47[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 14), v39, v40, v41, v42, v43, v44, v45);
      v51 = v47[50];
    }
    *(_DWORD *)(*((_QWORD *)v47 + 7) + v51) = (v46 >> 8) & 0x1F | 0x1A9F17E0;
    v47[50] += 4;
  }
  *v62 = 0;
  v62[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64Eq(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];
  BOOL (*v10)(uint64_t, uint64_t);
  int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 0;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addI64Eq(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_2>(a8, a1, "I64Eq", v9, (uint64_t)v8, a6, (unsigned int (**)(uint64_t, _QWORD))&v10, a7, a1, &v11, a1, (unsigned int *)&v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32Ne(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _DWORD *v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  __int128 v68;
  const char *v69;
  unsigned int v70;

  v65 = a2;
  v66 = a3;
  v63 = a4;
  v64 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1)
  {
    if (a5 == 1)
    {
      *a6 = (_DWORD)a2 != (_DWORD)a4;
      *((_WORD *)a6 + 4) = -255;
      if (HIBYTE(word_1ECF4C700))
      {
        v68 = *(_OWORD *)a6;
        v69 = "I32Ne";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v55 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v55;
          }
          while (v55 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v69, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v65);
        if (v66 != 1 && v66 != 4)
        {
          v70 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v65, v66, v56, v57, v58, v59, v60);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v70);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v63, (uint64_t *)&v68);
      }
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    v62 = a9;
    IfNecessary = 0;
    v70 = 0;
  }
  else
  {
    v62 = a9;
    v67 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v19 = 0;
    v70 = IfNecessary;
    if (v17 == 1)
      goto LABEL_9;
  }
  v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v67 = v19;
LABEL_9:
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  if (a3 == 2)
  {
    v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v26)
      *(_DWORD *)(a1 + 1280) = v26;
    if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
  }
  v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
  if (a5 == 2)
  {
    v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v32)
      *(_DWORD *)(a1 + 1280) = v32;
    if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
  }
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_DWORD *)(v33 + 596);
  if (!v34)
  {
    __break(0xC471u);
    JUMPOUT(0x198F22E1CLL);
  }
  if (v16 == 1)
    v35 = v19;
  else
    v35 = IfNecessary;
  v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
  v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
  if (*(_DWORD *)(v36 - 160) == 5)
    v38 = v37 + 1;
  else
    v38 = v37;
  *a6 = v38;
  *((_WORD *)a6 + 4) = -254;
  v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, a6[1], v35, v28, v29, v30, v31);
  if (HIBYTE(word_1ECF4C700))
  {
    v68 = *(_OWORD *)a6;
    v69 = "I32Ne";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v54 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v54;
      }
      while (v54 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>(&v69, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v65);
    if ((IfNecessary & 7) != 0)
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v70);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v63, (int *)&v67, (uint64_t *)&v68);
    v16 = v66;
    v17 = v64;
  }
  if (v16 == 1 || v17 == 1)
  {
    if (v17 == 1)
    {
      v52 = v63;
      v53 = SBYTE1(v70);
    }
    else
    {
      v53 = SBYTE1(v67);
      v52 = v65;
    }
    JSC::MacroAssemblerARM64::compare32(*(_QWORD *)(a1 + 8), 1, v53, v52, ((__int16)v46 >> 8), v43, v44, v45);
  }
  else
  {
    v47 = *(_DWORD **)(a1 + 8);
    v48 = (v67 << 8) & 0x1F0000;
    if ((v70 & 0xFF00) == 0x1F00)
      v49 = v48 | 0x6B2063FF;
    else
      v49 = (v70 >> 3) & 0x3E0 | v48 | 0x6B00001F;
    v50 = v47[50];
    if (v50 + 4 > v47[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 14), v39, v40, v41, v42, v43, v44, v45);
      v50 = v47[50];
    }
    *(_DWORD *)(*((_QWORD *)v47 + 7) + v50) = v49;
    v51 = v47[50] + 4;
    v47[50] = v51;
    if (v51 + 4 > v47[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 14), v39, v40, v41, v42, v43, v44, v45);
      v51 = v47[50];
    }
    *(_DWORD *)(*((_QWORD *)v47 + 7) + v51) = (v46 >> 8) & 0x1F | 0x1A9F07E0;
    v47[50] += 4;
  }
  *v62 = 0;
  v62[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64Ne(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];
  BOOL (*v10)(uint64_t, uint64_t);
  int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 1;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addI64Ne(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_2>(a8, a1, "I64Ne", v9, (uint64_t)v8, a6, (unsigned int (**)(uint64_t, _QWORD))&v10, a7, a1, &v11, a1, (unsigned int *)&v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32LtS(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _BYTE *a7@<X8>)
{
  _QWORD v7[2];
  uint64_t v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v7[0] = a4;
  v7[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI32(a7, a1, "I32LtS", v8, (unsigned int *)v7, a6, 11, (unsigned int (*)(_QWORD, _QWORD))JSC::Wasm::BBQJITImpl::BBQJIT::addI32LtS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<int,int>);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64LtS(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];
  BOOL (*v10)(uint64_t, uint64_t);
  int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 11;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addI64LtS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_2>(a8, a1, "I64LtS", v9, (uint64_t)v8, a6, (unsigned int (**)(uint64_t, _QWORD))&v10, a7, a1, &v11, a1, (unsigned int *)&v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32LeS(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _BYTE *a7@<X8>)
{
  _QWORD v7[2];
  uint64_t v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v7[0] = a4;
  v7[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI32(a7, a1, "I32LeS", v8, (unsigned int *)v7, a6, 13, (unsigned int (*)(_QWORD, _QWORD))JSC::Wasm::BBQJITImpl::BBQJIT::addI32LeS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<int,int>);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64LeS(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];
  BOOL (*v10)(uint64_t, uint64_t);
  int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 13;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addI64LeS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_2>(a8, a1, "I64LeS", v9, (uint64_t)v8, a6, (unsigned int (**)(uint64_t, _QWORD))&v10, a7, a1, &v11, a1, (unsigned int *)&v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32GtS(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _BYTE *a7@<X8>)
{
  _QWORD v7[2];
  uint64_t v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v7[0] = a4;
  v7[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI32(a7, a1, "I32GtS", v8, (unsigned int *)v7, a6, 12, (unsigned int (*)(_QWORD, _QWORD))JSC::Wasm::BBQJITImpl::BBQJIT::addI32GtS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<int,int>);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64GtS(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];
  BOOL (*v10)(uint64_t, uint64_t);
  int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 12;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addI64GtS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_2>(a8, a1, "I64GtS", v9, (uint64_t)v8, a6, (unsigned int (**)(uint64_t, _QWORD))&v10, a7, a1, &v11, a1, (unsigned int *)&v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32GeS(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _BYTE *a7@<X8>)
{
  _QWORD v7[2];
  uint64_t v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v7[0] = a4;
  v7[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI32(a7, a1, "I32GeS", v8, (unsigned int *)v7, a6, 10, (unsigned int (*)(_QWORD, _QWORD))JSC::Wasm::BBQJITImpl::BBQJIT::addI32GeS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<int,int>);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64GeS(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];
  BOOL (*v10)(uint64_t, uint64_t);
  int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 10;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addI64GeS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_2>(a8, a1, "I64GeS", v9, (uint64_t)v8, a6, (unsigned int (**)(uint64_t, _QWORD))&v10, a7, a1, &v11, a1, (unsigned int *)&v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32LtU(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _BYTE *a7@<X8>)
{
  _QWORD v7[2];
  uint64_t v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v7[0] = a4;
  v7[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI32(a7, a1, "I32LtU", v8, (unsigned int *)v7, a6, 3, (unsigned int (*)(_QWORD, _QWORD))JSC::Wasm::BBQJITImpl::BBQJIT::addI32LtU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<int,int>);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64LtU(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];
  BOOL (*v10)(unint64_t, unint64_t);
  int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 3;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addI64LtU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_2>(a8, a1, "I64LtU", v9, (uint64_t)v8, a6, (unsigned int (**)(uint64_t, _QWORD))&v10, a7, a1, &v11, a1, (unsigned int *)&v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32LeU(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  _QWORD v9[2];
  uint64_t v10[2];

  v10[0] = a2;
  v10[1] = a3;
  v9[0] = a4;
  v9[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI32(a9, a1, v10, (unsigned int *)v9, a6, 9, a7, a8);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64LeU(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];
  BOOL (*v10)(unint64_t, unint64_t);
  int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 9;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addI64LeU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_2>(a8, a1, "I64LeU", v9, (uint64_t)v8, a6, (unsigned int (**)(uint64_t, _QWORD))&v10, a7, a1, &v11, a1, (unsigned int *)&v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32GtU(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _BYTE *a7@<X8>)
{
  _QWORD v7[2];
  uint64_t v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v7[0] = a4;
  v7[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI32(a7, a1, "I32GtU", v8, (unsigned int *)v7, a6, 8, (unsigned int (*)(_QWORD, _QWORD))JSC::Wasm::BBQJITImpl::BBQJIT::addI32GtU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<int,int>);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64GtU(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];
  BOOL (*v10)(unint64_t, unint64_t);
  int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 8;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addI64GtU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_2>(a8, a1, "I64GtU", v9, (uint64_t)v8, a6, (unsigned int (**)(uint64_t, _QWORD))&v10, a7, a1, &v11, a1, (unsigned int *)&v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32GeU(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _BYTE *a7@<X8>)
{
  _QWORD v7[2];
  uint64_t v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v7[0] = a4;
  v7[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI32(a7, a1, "I32GeU", v8, (unsigned int *)v7, a6, 2, (unsigned int (*)(_QWORD, _QWORD))JSC::Wasm::BBQJITImpl::BBQJIT::addI32GeU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<int,int>);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64GeU(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];
  BOOL (*v10)(unint64_t, unint64_t);
  int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 2;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addI64GeU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_2>(a8, a1, "I64GeU", v9, (uint64_t)v8, a6, (unsigned int (**)(uint64_t, _QWORD))&v10, a7, a1, &v11, a1, (unsigned int *)&v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_2>(_BYTE *a1, uint64_t a2, const char *a3, uint64_t *a4, float *a5, uint64_t *a6, unsigned int (**a7)(float, float), uint64_t a8, uint64_t a9, unsigned int *a10, uint64_t a11, unsigned int *a12)
{
  _BYTE *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int IfNecessary;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  int *v61;
  void *v62;
  unsigned int v63;
  const char *v64;
  unsigned int v65;
  unsigned int v66;
  const char *v67;
  int v68;
  char v69;
  char v70;
  __int128 v71;
  int *v72;

  if (*((_BYTE *)a4 + 8) == 1)
  {
    v18 = a5 + 2;
    if (*((_BYTE *)a5 + 8) == 1)
    {
      *a6 = (*a7)(*(float *)a4, *a5);
      *((_WORD *)a6 + 4) = -255;
      if (HIBYTE(word_1ECF4C700))
      {
        v71 = *(_OWORD *)a6;
        v67 = a3;
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a2)
        {
          v19 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v19;
          }
          while (v19 < *(_DWORD *)a2);
        }
        WTF::dataLog<char const*,char [2]>(&v67, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a4);
        v25 = *((unsigned __int8 *)a4 + 8);
        if (v25 != 1 && v25 != 4)
        {
          v68 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a4, a4[1], v20, v21, v22, v23, v24);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v68);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t *)a5, (uint64_t *)&v71);
      }
LABEL_47:
      *a1 = 0;
      a1[8] = 0;
      return;
    }
    v64 = a3;
    IfNecessary = 0;
    v66 = 0;
    goto LABEL_16;
  }
  v64 = a3;
  v65 = 0;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *a4, a4[1], (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
  v28 = 0;
  v66 = IfNecessary;
  v18 = a5 + 2;
  if (*((_BYTE *)a5 + 8) != 1)
  {
LABEL_16:
    v28 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a5, *((_QWORD *)a5 + 1), (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
    v65 = v28;
  }
  v29 = *a4;
  v30 = a4[1];
  v31 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a4, v30, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
  if (v30 == 2)
  {
    v37 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v29 + 16;
    if (*(_DWORD *)(a2 + 1280) < v37)
      *(_DWORD *)(a2 + 1280) = v37;
    if ((v31 & 7) != 1 || ((-8 * v37) ^ v31) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v29, v30, v31);
  }
  v38 = *(_QWORD *)a5;
  v39 = *((_QWORD *)a5 + 1);
  v40 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a5, v39, v32, v33, v34, v35, v36);
  if (v39 == 2)
  {
    v45 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v38 + 16;
    if (*(_DWORD *)(a2 + 1280) < v45)
      *(_DWORD *)(a2 + 1280) = v45;
    if ((v40 & 7) != 1 || ((-8 * v45) ^ v40) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v38, v39, v40);
  }
  v46 = *(_QWORD *)(a2 + 88);
  v47 = *(_DWORD *)(v46 + 596);
  if (v47)
  {
    if (*((_BYTE *)a4 + 8) == 1)
      v48 = v28;
    else
      v48 = IfNecessary;
    v49 = *(_QWORD *)(v46 + 584) + 1232 * v47;
    v50 = *(_DWORD *)(v46 + 68) + *(_DWORD *)(v49 - 32);
    if (*(_DWORD *)(v49 - 160) == 5)
      v51 = v50 + 1;
    else
      v51 = v50;
    *a6 = v51;
    *((_WORD *)a6 + 4) = -254;
    v56 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v51, a6[1], v48, v41, v42, v43, v44);
    if (HIBYTE(word_1ECF4C700))
    {
      v71 = *(_OWORD *)a6;
      v67 = v64;
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v63 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v63;
        }
        while (v63 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v67, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a4);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v66);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t)a5, (int *)&v65, (uint64_t *)&v71);
      v28 = v65;
      IfNecessary = v66;
    }
    v57 = *((unsigned __int8 *)a4 + 8);
    if (v57 == 1 || *v18 == 1)
    {
      LODWORD(v67) = IfNecessary;
      v68 = v28;
      v61 = (int *)&v67;
      if ((IfNecessary & 6) == 2)
        v61 = &v68;
      *v61 = 4099;
      if (v57 == 1)
        v62 = a4;
      else
        v62 = a5;
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a11, *(JSC::ARM64LogicalImmediate **)v62, *((_QWORD *)v62 + 1), 0x1003uLL, v52, v53, v54, v55);
      v58 = *(_QWORD *)(a11 + 8);
      v59 = *a12;
      v70 = BYTE1(v67);
      v69 = BYTE1(v68);
      *(_QWORD *)&v71 = v58;
      *((_QWORD *)&v71 + 1) = &v70;
      v60 = (int *)&v69;
    }
    else
    {
      v58 = *(_QWORD *)(a9 + 8);
      v59 = *a10;
      LOBYTE(v67) = BYTE1(IfNecessary);
      LOBYTE(v68) = BYTE1(v28);
      *(_QWORD *)&v71 = v58;
      *((_QWORD *)&v71 + 1) = &v67;
      v60 = &v68;
    }
    v72 = v60;
    JSC::MacroAssemblerARM64::floatingPointCompare<JSC::MacroAssemblerARM64::compareFloat(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}>(v58, v59, (v56 >> 8), (char **)&v71, v52, v53, v54, v55);
    goto LABEL_47;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_2>(_BYTE *a1, uint64_t a2, const char *a3, uint64_t *a4, double *a5, uint64_t *a6, unsigned int (**a7)(double, double), uint64_t a8, uint64_t a9, unsigned int *a10, uint64_t a11, unsigned int *a12)
{
  _BYTE *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int IfNecessary;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  int *v61;
  void *v62;
  unsigned int v63;
  const char *v64;
  unsigned int v65;
  unsigned int v66;
  const char *v67;
  int v68;
  char v69;
  char v70;
  __int128 v71;
  int *v72;

  if (*((_BYTE *)a4 + 8) == 1)
  {
    v18 = a5 + 1;
    if (*((_BYTE *)a5 + 8) == 1)
    {
      *a6 = (*a7)(*(double *)a4, *a5);
      *((_WORD *)a6 + 4) = -255;
      if (HIBYTE(word_1ECF4C700))
      {
        v71 = *(_OWORD *)a6;
        v67 = a3;
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a2)
        {
          v19 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v19;
          }
          while (v19 < *(_DWORD *)a2);
        }
        WTF::dataLog<char const*,char [2]>(&v67, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a4);
        v25 = *((unsigned __int8 *)a4 + 8);
        if (v25 != 1 && v25 != 4)
        {
          v68 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a4, a4[1], v20, v21, v22, v23, v24);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v68);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t *)a5, (uint64_t *)&v71);
      }
LABEL_47:
      *a1 = 0;
      a1[8] = 0;
      return;
    }
    v64 = a3;
    IfNecessary = 0;
    v66 = 0;
    goto LABEL_16;
  }
  v64 = a3;
  v65 = 0;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *a4, a4[1], (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
  v28 = 0;
  v66 = IfNecessary;
  v18 = a5 + 1;
  if (*((_BYTE *)a5 + 8) != 1)
  {
LABEL_16:
    v28 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a5, *((_QWORD *)a5 + 1), (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
    v65 = v28;
  }
  v29 = *a4;
  v30 = a4[1];
  v31 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a4, v30, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
  if (v30 == 2)
  {
    v37 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v29 + 16;
    if (*(_DWORD *)(a2 + 1280) < v37)
      *(_DWORD *)(a2 + 1280) = v37;
    if ((v31 & 7) != 1 || ((-8 * v37) ^ v31) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v29, v30, v31);
  }
  v38 = *(_QWORD *)a5;
  v39 = *((_QWORD *)a5 + 1);
  v40 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a5, v39, v32, v33, v34, v35, v36);
  if (v39 == 2)
  {
    v45 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v38 + 16;
    if (*(_DWORD *)(a2 + 1280) < v45)
      *(_DWORD *)(a2 + 1280) = v45;
    if ((v40 & 7) != 1 || ((-8 * v45) ^ v40) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v38, v39, v40);
  }
  v46 = *(_QWORD *)(a2 + 88);
  v47 = *(_DWORD *)(v46 + 596);
  if (v47)
  {
    if (*((_BYTE *)a4 + 8) == 1)
      v48 = v28;
    else
      v48 = IfNecessary;
    v49 = *(_QWORD *)(v46 + 584) + 1232 * v47;
    v50 = *(_DWORD *)(v46 + 68) + *(_DWORD *)(v49 - 32);
    if (*(_DWORD *)(v49 - 160) == 5)
      v51 = v50 + 1;
    else
      v51 = v50;
    *a6 = v51;
    *((_WORD *)a6 + 4) = -254;
    v56 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v51, a6[1], v48, v41, v42, v43, v44);
    if (HIBYTE(word_1ECF4C700))
    {
      v71 = *(_OWORD *)a6;
      v67 = v64;
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v63 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v63;
        }
        while (v63 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v67, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a4);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v66);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t)a5, (int *)&v65, (uint64_t *)&v71);
      v28 = v65;
      IfNecessary = v66;
    }
    v57 = *((unsigned __int8 *)a4 + 8);
    if (v57 == 1 || *v18 == 1)
    {
      LODWORD(v67) = IfNecessary;
      v68 = v28;
      v61 = (int *)&v67;
      if ((IfNecessary & 6) == 2)
        v61 = &v68;
      *v61 = 4099;
      if (v57 == 1)
        v62 = a4;
      else
        v62 = a5;
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a11, *(JSC::ARM64LogicalImmediate **)v62, *((_QWORD *)v62 + 1), 0x1003uLL, v52, v53, v54, v55);
      v58 = *(_QWORD *)(a11 + 8);
      v59 = *a12;
      v70 = BYTE1(v67);
      v69 = BYTE1(v68);
      *(_QWORD *)&v71 = v58;
      *((_QWORD *)&v71 + 1) = &v70;
      v60 = (int *)&v69;
    }
    else
    {
      v58 = *(_QWORD *)(a9 + 8);
      v59 = *a10;
      LOBYTE(v67) = BYTE1(IfNecessary);
      LOBYTE(v68) = BYTE1(v28);
      *(_QWORD *)&v71 = v58;
      *((_QWORD *)&v71 + 1) = &v67;
      v60 = &v68;
    }
    v72 = v60;
    JSC::MacroAssemblerARM64::floatingPointCompare<JSC::MacroAssemblerARM64::compareDouble(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}>(v58, v59, (v56 >> 8), (char **)&v71, v52, v53, v54, v55);
    goto LABEL_47;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Eq(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];
  BOOL (*v10)(float, float);
  unsigned int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 0;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addF32Eq(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<float,float>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_2>(a8, a1, "F32Eq", v9, (float *)v8, a6, (unsigned int (**)(float, float))&v10, a7, a1, &v11, a1, &v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Eq(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double a4@<X3>, double a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  double v8[2];
  uint64_t v9[2];
  BOOL (*v10)(double, double);
  unsigned int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 0;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addF64Eq(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<double,double>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_2>(a8, a1, "F64Eq", v9, v8, a6, (unsigned int (**)(double, double))&v10, a7, a1, &v11, a1, &v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Ne(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];
  BOOL (*v10)(float, float);
  unsigned int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 1;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addF32Ne(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<float,float>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_2>(a8, a1, "F32Ne", v9, (float *)v8, a6, (unsigned int (**)(float, float))&v10, a7, a1, &v11, a1, &v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Ne(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double a4@<X3>, double a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  double v8[2];
  uint64_t v9[2];
  BOOL (*v10)(double, double);
  unsigned int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 1;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addF64Ne(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<double,double>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_2>(a8, a1, "F64Ne", v9, v8, a6, (unsigned int (**)(double, double))&v10, a7, a1, &v11, a1, &v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Lt(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];
  BOOL (*v10)(float, float);
  unsigned int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 3;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addF32Lt(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<float,float>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_2>(a8, a1, "F32Lt", v9, (float *)v8, a6, (unsigned int (**)(float, float))&v10, a7, a1, &v11, a1, &v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Lt(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double a4@<X3>, double a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  double v8[2];
  uint64_t v9[2];
  BOOL (*v10)(double, double);
  unsigned int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 3;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addF64Lt(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<double,double>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_2>(a8, a1, "F64Lt", v9, v8, a6, (unsigned int (**)(double, double))&v10, a7, a1, &v11, a1, &v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Le(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];
  BOOL (*v10)(float, float);
  unsigned int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 9;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addF32Le(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<float,float>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_2>(a8, a1, "F32Le", v9, (float *)v8, a6, (unsigned int (**)(float, float))&v10, a7, a1, &v11, a1, &v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Le(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double a4@<X3>, double a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  double v8[2];
  uint64_t v9[2];
  BOOL (*v10)(double, double);
  unsigned int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 9;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addF64Le(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<double,double>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_2>(a8, a1, "F64Le", v9, v8, a6, (unsigned int (**)(double, double))&v10, a7, a1, &v11, a1, &v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Gt(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];
  BOOL (*v10)(float, float);
  unsigned int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 12;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addF32Gt(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<float,float>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_2>(a8, a1, "F32Gt", v9, (float *)v8, a6, (unsigned int (**)(float, float))&v10, a7, a1, &v11, a1, &v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Gt(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double a4@<X3>, double a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  double v8[2];
  uint64_t v9[2];
  BOOL (*v10)(double, double);
  unsigned int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 12;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addF64Gt(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<double,double>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_2>(a8, a1, "F64Gt", v9, v8, a6, (unsigned int (**)(double, double))&v10, a7, a1, &v11, a1, &v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Ge(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];
  BOOL (*v10)(float, float);
  unsigned int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 10;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addF32Ge(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<float,float>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF32(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(float,float))::$_2>(a8, a1, "F32Ge", v9, (float *)v8, a6, (unsigned int (**)(float, float))&v10, a7, a1, &v11, a1, &v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Ge(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double a4@<X3>, double a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  double v8[2];
  uint64_t v9[2];
  BOOL (*v10)(double, double);
  unsigned int v11;

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v11 = 10;
  v10 = JSC::Wasm::BBQJITImpl::BBQJIT::addF64Ge(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<double,double>;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareF64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::DoubleCondition,BOOL (*)(double,double))::$_2>(a8, a1, "F64Ge", v9, v8, a6, (unsigned int (**)(double, double))&v10, a7, a1, &v11, a1, &v11);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32Extend8S(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = (char)a2;
    *((_WORD *)a4 + 4) = -255;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "I32Extend8S";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -254;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "I32Extend8S";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      IfNecessary = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = (IfNecessary >> 3) & 0x3E0 | (v40 >> 8) & 0x1F | 0x13001C00;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32Extend16S(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = (__int16)a2;
    *((_WORD *)a4 + 4) = -255;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "I32Extend16S";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -254;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "I32Extend16S";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      IfNecessary = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = (IfNecessary >> 3) & 0x3E0 | (v40 >> 8) & 0x1F | 0x13003C00;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32Eqz(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47[2];
  unsigned int v48;
  uint64_t v49[3];
  const char *v50;

  v47[0] = a2;
  v47[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = (_DWORD)a2 == 0;
    *((_WORD *)a4 + 4) = -255;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v49 = *(_OWORD *)a4;
      v50 = "I32Eqz";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v50, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v47, v49);
    }
LABEL_23:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v48 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -254;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v49 = *(_OWORD *)a4;
      v50 = "I32Eqz";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v46 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v46;
        }
        while (v46 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v50, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v47, (int *)&v48, v49);
      IfNecessary = v48;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = (32 * ((IfNecessary >> 8) & 0x1F)) & 0xFFE0FFFF | (((IfNecessary >> 8) & 0x1F) << 16) | 0x6A00001F;
    v43 = v41[50];
    if (v43 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v43 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v43) = v42;
    v44 = v41[50];
    v45 = v44 + 4;
    v41[50] = v44 + 4;
    if ((v44 + 8) > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v45 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v45) = (v40 >> 8) & 0x1F | 0x1A9F17E0;
    v41[50] += 4;
    goto LABEL_23;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32Popcnt(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, int8x8_t a10@<D0>)
{
  uint64_t v14;
  uint8x8_t v15;
  unsigned int v16;
  unsigned int IfNecessary;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  unsigned int v40;
  uint64_t v41[2];
  unsigned int v42;
  uint64_t v43[3];
  const char *v44;

  v41[0] = a2;
  v41[1] = a3;
  v14 = a3;
  if (a3 == 1)
  {
    a10.i32[0] = a2;
    v15 = (uint8x8_t)vcnt_s8(a10);
    v15.i16[0] = vaddlv_u8(v15);
    *a4 = v15.u32[0];
    *((_WORD *)a4 + 4) = -255;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v43 = *(_OWORD *)a4;
      v44 = "I32Popcnt";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v16 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v16;
        }
        while (v16 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v44, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v41, v43);
    }
LABEL_19:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v42 = IfNecessary;
  v24 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v19, v20, v21, v22, v23);
  if (v14 == 2)
  {
    v29 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v29)
      *(_DWORD *)(a1 + 1280) = v29;
    if ((v24 & 7) != 1 || ((-8 * v29) ^ v24) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v24);
  }
  v30 = *(_QWORD *)(a1 + 88);
  v31 = *(_DWORD *)(v30 + 596);
  if (v31)
  {
    v32 = *(_QWORD *)(v30 + 584) + 1232 * v31;
    v33 = *(_DWORD *)(v30 + 68) + *(_DWORD *)(v32 - 32);
    if (*(_DWORD *)(v32 - 160) == 5)
      v34 = v33 + 1;
    else
      v34 = v33;
    *a4 = v34;
    *((_WORD *)a4 + 4) = -254;
    v39 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v34, a4[1], IfNecessary, v25, v26, v27, v28);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v43 = *(_OWORD *)a4;
      v44 = "I32Popcnt";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v40 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v40;
        }
        while (v40 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v44, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v41, (int *)&v42, v43);
      LOWORD(IfNecessary) = v42;
    }
    JSC::MacroAssemblerARM64::countPopulation32(*(_DWORD **)(a1 + 8), ((__int16)IfNecessary >> 8), (v39 >> 8), 16, v35, v36, v37, v38);
    goto LABEL_19;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64Popcnt(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  uint8x8_t v14;
  unsigned int v15;
  unsigned int IfNecessary;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  unsigned int v39;
  uint64_t v40[2];
  unsigned int v41;
  uint64_t v42[3];
  const char *v43;

  v40[0] = a2;
  v40[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
    v14.i16[0] = vaddlv_u8(v14);
    *a4 = v14.u32[0];
    *((_WORD *)a4 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v42 = *(_OWORD *)a4;
      v43 = "I64Popcnt";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v15 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v15;
        }
        while (v15 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v43, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v40, v42);
    }
LABEL_19:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v41 = IfNecessary;
  v23 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v18, v19, v20, v21, v22);
  if (v13 == 2)
  {
    v28 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v28)
      *(_DWORD *)(a1 + 1280) = v28;
    if ((v23 & 7) != 1 || ((-8 * v28) ^ v23) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v23);
  }
  v29 = *(_QWORD *)(a1 + 88);
  v30 = *(_DWORD *)(v29 + 596);
  if (v30)
  {
    v31 = *(_QWORD *)(v29 + 584) + 1232 * v30;
    v32 = *(_DWORD *)(v29 + 68) + *(_DWORD *)(v31 - 32);
    if (*(_DWORD *)(v31 - 160) == 5)
      v33 = v32 + 1;
    else
      v33 = v32;
    *a4 = v33;
    *((_WORD *)a4 + 4) = -510;
    v38 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v33, a4[1], IfNecessary, v24, v25, v26, v27);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v42 = *(_OWORD *)a4;
      v43 = "I64Popcnt";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v39 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v39;
        }
        while (v39 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v43, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v40, (int *)&v41, v42);
      LOWORD(IfNecessary) = v41;
    }
    JSC::MacroAssemblerARM64::countPopulation64(*(_DWORD **)(a1 + 8), ((__int16)IfNecessary >> 8), (v38 >> 8), 16, v34, v35, v36, v37);
    goto LABEL_19;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32ReinterpretF32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = a2;
    *((_WORD *)a4 + 4) = -255;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "I32ReinterpretF32";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -254;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "I32ReinterpretF32";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      LOWORD(IfNecessary) = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = (v40 >> 8) & 0x1F | 0x1E260000 | ((__int16)IfNecessary >> 3) & 0xFFFFFFE0;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32ReinterpretI32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF32ReinterpretI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF32ReinterpretI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(a8, a1, (unsigned int *)v8, a4, a1, a5, a6, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF32ReinterpretI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF32ReinterpretI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(_BYTE *a1, uint64_t a2, unsigned int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned int IfNecessary;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  _DWORD *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47[3];
  const char *v48;

  if (*((_BYTE *)a3 + 8) == 1)
  {
    *a4 = *a3;
    *((_WORD *)a4 + 4) = -767;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "F32ReinterpretI32";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v12 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v12;
        }
        while (v12 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, (uint64_t *)a3, v47);
    }
LABEL_24:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a3, *((_QWORD *)a3 + 1), (uint64_t)a4, a5, a6, a7, a8);
  v46 = IfNecessary;
  v15 = *(_QWORD *)a3;
  v16 = *((_QWORD *)a3 + 1);
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a3, v16, v17, v18, v19, v20, v21);
  if (v16 == 2)
  {
    v27 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v15 + 16;
    if (*(_DWORD *)(a2 + 1280) < v27)
      *(_DWORD *)(a2 + 1280) = v27;
    v28 = (-8 * v27) ^ v22;
    if ((v22 & 7) != 1 || v28 >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v15, v16, v22);
  }
  v30 = *(_QWORD *)(a2 + 88);
  v31 = *(_DWORD *)(v30 + 596);
  if (v31)
  {
    v32 = *(_QWORD *)(v30 + 584) + 1232 * v31;
    v33 = *(_DWORD *)(v30 + 68) + *(_DWORD *)(v32 - 32);
    if (*(_DWORD *)(v32 - 160) == 5)
      v34 = v33 + 1;
    else
      v34 = v33;
    *a4 = v34;
    *((_WORD *)a4 + 4) = -766;
    v42 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v34, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "F32ReinterpretI32";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v45 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v45;
        }
        while (v45 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, (uint64_t)a3, (int *)&v46, v47);
      IfNecessary = v46;
    }
    v43 = *(_DWORD **)(a5 + 8);
    v44 = v43[50];
    if (v44 + 4 > v43[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v43 + 14), v35, v36, v37, v38, v39, v40, v41);
      v44 = v43[50];
    }
    *(_DWORD *)(*((_QWORD *)v43 + 7) + v44) = (IfNecessary >> 3) & 0x3E0 | (v42 >> 8) | 0x1E270000;
    v43[50] += 4;
    goto LABEL_24;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32DemoteF64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF32DemoteF64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF32DemoteF64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(a8, a1, (uint64_t)v8, a4, a1, a5, a6, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF32DemoteF64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF32DemoteF64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned int v13;
  unsigned int IfNecessary;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  _DWORD *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48[3];
  const char *v49;

  if (*(_BYTE *)(a3 + 8) == 1)
  {
    *(float *)&v12 = *(double *)a3;
    *a4 = v12;
    *((_WORD *)a4 + 4) = -767;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v48 = *(_OWORD *)a4;
      v49 = "F32DemoteF64";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v13 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v13;
        }
        while (v13 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v49, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, (uint64_t *)a3, v48);
    }
LABEL_24:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), (uint64_t)a4, a5, a6, a7, a8);
  v47 = IfNecessary;
  v16 = *(_QWORD *)a3;
  v17 = *(_QWORD *)(a3 + 8);
  v23 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a3, v17, v18, v19, v20, v21, v22);
  if (v17 == 2)
  {
    v28 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v16 + 16;
    if (*(_DWORD *)(a2 + 1280) < v28)
      *(_DWORD *)(a2 + 1280) = v28;
    v29 = (-8 * v28) ^ v23;
    if ((v23 & 7) != 1 || v29 >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v16, v17, v23);
  }
  v31 = *(_QWORD *)(a2 + 88);
  v32 = *(_DWORD *)(v31 + 596);
  if (v32)
  {
    v33 = *(_QWORD *)(v31 + 584) + 1232 * v32;
    v34 = *(_DWORD *)(v31 + 68) + *(_DWORD *)(v33 - 32);
    if (*(_DWORD *)(v33 - 160) == 5)
      v35 = v34 + 1;
    else
      v35 = v34;
    *a4 = v35;
    *((_WORD *)a4 + 4) = -766;
    v43 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v35, a4[1], IfNecessary, v24, v25, v26, v27);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v48 = *(_OWORD *)a4;
      v49 = "F32DemoteF64";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v46 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v46;
        }
        while (v46 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v49, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, a3, (int *)&v47, v48);
      LOWORD(IfNecessary) = v47;
    }
    v44 = *(_DWORD **)(a5 + 8);
    v45 = v44[50];
    if (v45 + 4 > v44[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v44 + 14), v36, v37, v38, v39, v40, v41, v42);
      v45 = v44[50];
    }
    *(_DWORD *)(*((_QWORD *)v44 + 7) + v45) = ((__int16)IfNecessary >> 3) & 0xFFFFFFE0 | (v43 >> 8) | 0x1E624000;
    v44[50] += 4;
    goto LABEL_24;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64PromoteF32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF64PromoteF32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF64PromoteF32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(a8, a1, (uint64_t)v8, a4, a1, a5, a6, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF64PromoteF32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF64PromoteF32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned int IfNecessary;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  _DWORD *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47[3];
  const char *v48;

  if (*(_BYTE *)(a3 + 8) == 1)
  {
    *(double *)a4 = *(float *)a3;
    *(_WORD *)(a4 + 8) = -1023;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "F64PromoteF32";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v12 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v12;
        }
        while (v12 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, (uint64_t *)a3, v47);
    }
LABEL_24:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), a4, a5, a6, a7, a8);
  v46 = IfNecessary;
  v15 = *(_QWORD *)a3;
  v16 = *(_QWORD *)(a3 + 8);
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a3, v16, v17, v18, v19, v20, v21);
  if (v16 == 2)
  {
    v27 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v15 + 16;
    if (*(_DWORD *)(a2 + 1280) < v27)
      *(_DWORD *)(a2 + 1280) = v27;
    v28 = (-8 * v27) ^ v22;
    if ((v22 & 7) != 1 || v28 >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v15, v16, v22);
  }
  v30 = *(_QWORD *)(a2 + 88);
  v31 = *(_DWORD *)(v30 + 596);
  if (v31)
  {
    v32 = *(_QWORD *)(v30 + 584) + 1232 * v31;
    v33 = *(_DWORD *)(v30 + 68) + *(_DWORD *)(v32 - 32);
    if (*(_DWORD *)(v32 - 160) == 5)
      v34 = v33 + 1;
    else
      v34 = v33;
    *(_QWORD *)a4 = v34;
    *(_WORD *)(a4 + 8) = -1022;
    v42 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v34, *(_QWORD *)(a4 + 8), IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "F64PromoteF32";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v45 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v45;
        }
        while (v45 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, a3, (int *)&v46, v47);
      LOWORD(IfNecessary) = v46;
    }
    v43 = *(_DWORD **)(a5 + 8);
    v44 = v43[50];
    if (v44 + 4 > v43[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v43 + 14), v35, v36, v37, v38, v39, v40, v41);
      v44 = v43[50];
    }
    *(_DWORD *)(*((_QWORD *)v43 + 7) + v44) = ((__int16)IfNecessary >> 3) & 0xFFFFFFE0 | (v42 >> 8) | 0x1E22C000;
    v43[50] += 4;
    goto LABEL_24;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertSI32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertSI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertSI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(a8, a1, (uint64_t)v8, a4, a1, a5, a6, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertSI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertSI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned int IfNecessary;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  _DWORD *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47[3];
  const char *v48;

  if (*(_BYTE *)(a3 + 8) == 1)
  {
    *a4 = COERCE_UNSIGNED_INT((float)*(int *)a3);
    *((_WORD *)a4 + 4) = -767;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "F32ConvertSI32";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v12 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v12;
        }
        while (v12 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, (uint64_t *)a3, v47);
    }
LABEL_24:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), (uint64_t)a4, a5, a6, a7, a8);
  v46 = IfNecessary;
  v15 = *(_QWORD *)a3;
  v16 = *(_QWORD *)(a3 + 8);
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a3, v16, v17, v18, v19, v20, v21);
  if (v16 == 2)
  {
    v27 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v15 + 16;
    if (*(_DWORD *)(a2 + 1280) < v27)
      *(_DWORD *)(a2 + 1280) = v27;
    v28 = (-8 * v27) ^ v22;
    if ((v22 & 7) != 1 || v28 >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v15, v16, v22);
  }
  v30 = *(_QWORD *)(a2 + 88);
  v31 = *(_DWORD *)(v30 + 596);
  if (v31)
  {
    v32 = *(_QWORD *)(v30 + 584) + 1232 * v31;
    v33 = *(_DWORD *)(v30 + 68) + *(_DWORD *)(v32 - 32);
    if (*(_DWORD *)(v32 - 160) == 5)
      v34 = v33 + 1;
    else
      v34 = v33;
    *a4 = v34;
    *((_WORD *)a4 + 4) = -766;
    v42 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v34, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "F32ConvertSI32";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v45 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v45;
        }
        while (v45 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, a3, (int *)&v46, v47);
      IfNecessary = v46;
    }
    v43 = *(_DWORD **)(a5 + 8);
    v44 = v43[50];
    if (v44 + 4 > v43[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v43 + 14), v35, v36, v37, v38, v39, v40, v41);
      v44 = v43[50];
    }
    *(_DWORD *)(*((_QWORD *)v43 + 7) + v44) = (IfNecessary >> 3) & 0x3E0 | (v42 >> 8) | 0x1E220000;
    v43[50] += 4;
    goto LABEL_24;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertSI32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertSI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertSI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(a8, a1, (uint64_t)v8, a4, a1, a5, a6, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertSI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertSI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned int IfNecessary;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  _DWORD *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47[3];
  const char *v48;

  if (*(_BYTE *)(a3 + 8) == 1)
  {
    *(double *)a4 = (double)*(int *)a3;
    *(_WORD *)(a4 + 8) = -1023;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "F64ConvertSI32";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v12 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v12;
        }
        while (v12 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, (uint64_t *)a3, v47);
    }
LABEL_24:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), a4, a5, a6, a7, a8);
  v46 = IfNecessary;
  v15 = *(_QWORD *)a3;
  v16 = *(_QWORD *)(a3 + 8);
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a3, v16, v17, v18, v19, v20, v21);
  if (v16 == 2)
  {
    v27 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v15 + 16;
    if (*(_DWORD *)(a2 + 1280) < v27)
      *(_DWORD *)(a2 + 1280) = v27;
    v28 = (-8 * v27) ^ v22;
    if ((v22 & 7) != 1 || v28 >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v15, v16, v22);
  }
  v30 = *(_QWORD *)(a2 + 88);
  v31 = *(_DWORD *)(v30 + 596);
  if (v31)
  {
    v32 = *(_QWORD *)(v30 + 584) + 1232 * v31;
    v33 = *(_DWORD *)(v30 + 68) + *(_DWORD *)(v32 - 32);
    if (*(_DWORD *)(v32 - 160) == 5)
      v34 = v33 + 1;
    else
      v34 = v33;
    *(_QWORD *)a4 = v34;
    *(_WORD *)(a4 + 8) = -1022;
    v42 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v34, *(_QWORD *)(a4 + 8), IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "F64ConvertSI32";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v45 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v45;
        }
        while (v45 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, a3, (int *)&v46, v47);
      IfNecessary = v46;
    }
    v43 = *(_DWORD **)(a5 + 8);
    v44 = v43[50];
    if (v44 + 4 > v43[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v43 + 14), v35, v36, v37, v38, v39, v40, v41);
      v44 = v43[50];
    }
    *(_DWORD *)(*((_QWORD *)v43 + 7) + v44) = (IfNecessary >> 3) & 0x3E0 | (v42 >> 8) | 0x1E620000;
    v43[50] += 4;
    goto LABEL_24;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Copysign(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  __int16 v47;
  _DWORD *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  int v71;
  int v72;
  int v73;
  __int16 v74;
  int v75;
  _DWORD *v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  __int16 v80;
  _DWORD *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  unsigned int v91;
  _DWORD *v92;
  unsigned int v93;
  int v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  __int128 v112;
  const char *v113;
  int v114;

  v109 = a2;
  v110 = a3;
  v107 = a4;
  v108 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 != 1)
  {
    v106 = a9;
    v111 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    v19 = 0;
    v114 = IfNecessary;
    if (v17 == 1)
    {
LABEL_9:
      v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
      if (a3 == 2)
      {
        v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
        if (*(_DWORD *)(a1 + 1280) < v26)
          *(_DWORD *)(a1 + 1280) = v26;
        if ((v20 & 7) != 1 || ((-8 * v26) ^ v20) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v20);
      }
      v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v21, v22, v23, v24, v25);
      if (a5 == 2)
      {
        v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
        if (*(_DWORD *)(a1 + 1280) < v32)
          *(_DWORD *)(a1 + 1280) = v32;
        if ((v27 & 7) != 1 || ((-8 * v32) ^ v27) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v27);
      }
      v33 = *(_QWORD *)(a1 + 88);
      v34 = *(_DWORD *)(v33 + 596);
      if (!v34)
      {
        __break(0xC471u);
        return;
      }
      if (v16 == 1)
        v35 = v19;
      else
        v35 = IfNecessary;
      v36 = *(_QWORD *)(v33 + 584) + 1232 * v34;
      v37 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v36 - 32);
      if (*(_DWORD *)(v36 - 160) == 5)
        v38 = v37 + 1;
      else
        v38 = v37;
      *a6 = v38;
      *((_WORD *)a6 + 4) = -766;
      v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v38, a6[1], v35, v28, v29, v30, v31);
      if (HIBYTE(word_1ECF4C700))
      {
        v112 = *(_OWORD *)a6;
        v113 = "F32Copysign";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v98 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v98;
          }
          while (v98 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v113, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v109);
        if ((IfNecessary & 7) != 0)
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v114);
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v107, (int *)&v111, (uint64_t *)&v112);
        v16 = v110;
      }
      if (v16 == 1)
      {
        v47 = v111;
        v48 = *(_DWORD **)(a1 + 8);
        v49 = v48[50];
        if (v49 + 4 > v48[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v48 + 14), v39, v40, v41, v42, v43, v44, v45);
          v49 = v48[50];
        }
        *(_DWORD *)(*((_QWORD *)v48 + 7) + v49) = (v47 >> 3) & 0xE1D9FFE0 | 0x1E260008;
        v48[50] += 4;
        JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0x80000000, 8, 8);
        v57 = *(_DWORD **)(a1 + 8);
        v58 = v57[50];
        if (v58 + 4 > v57[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v57 + 14), v50, v51, v52, v53, v54, v55, v56);
          v58 = v57[50];
        }
        *(_DWORD *)(*((_QWORD *)v57 + 7) + v58) = 505872656;
        v57[50] += 4;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)(v109 & 0x7FFFFFFF), 0xFD01uLL, v46, v53, v54, v55, v56);
        v66 = *(_QWORD *)(a1 + 8);
        v69 = *(_DWORD *)(v66 + 200);
        v68 = (unsigned int *)(v66 + 200);
        v67 = v69;
        v70 = v68 - 36;
        if (v69 + 4 > *(v68 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v68 - 36), v59, v60, v61, v62, v63, v64, v65);
          v67 = *v68;
        }
        v71 = 246422528;
        v72 = (__int16)v46 >> 8;
      }
      else
      {
        v74 = v114;
        if (v108 != 1)
        {
          v80 = v111;
          v81 = *(_DWORD **)(a1 + 8);
          v82 = v81[50];
          if (v82 + 4 > v81[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v81 + 14), v39, v40, v41, v42, v43, v44, v45);
            v82 = v81[50];
          }
          *(_DWORD *)(*((_QWORD *)v81 + 7) + v82) = (v80 >> 3) & 0xE1D9FFE0 | 0x1E260008;
          v81[50] += 4;
          JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0x80000000, 8, 8);
          v90 = *(_DWORD **)(a1 + 8);
          v91 = v90[50];
          if (v91 + 4 > v90[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v90 + 14), v83, v84, v85, v86, v87, v88, v89);
            v91 = v90[50];
          }
          *(_DWORD *)(*((_QWORD *)v90 + 7) + v91) = 505872656;
          v90[50] += 4;
          v92 = *(_DWORD **)(a1 + 8);
          v93 = v92[50];
          if (v93 + 4 > v92[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v92 + 14), v83, v84, v85, v86, v87, v88, v89);
            v93 = v92[50];
          }
          v94 = v74 >> 8;
          v95 = 32 * v94;
          *(_DWORD *)(*((_QWORD *)v92 + 7) + v93) = v94 | (32 * v94) | 0x1E20C000;
          v92[50] += 4;
          v96 = *(_QWORD *)(a1 + 8);
          v97 = *(_DWORD *)(v96 + 200);
          v68 = (unsigned int *)(v96 + 200);
          v67 = v97;
          v70 = v68 - 36;
          if (v97 + 4 > *(v68 - 2))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v68 - 36), v83, v84, v85, v86, v87, v88, v89);
            v67 = *v68;
          }
          v73 = v95 | ((__int16)v46 >> 8) | 0xEB01C00;
          goto LABEL_53;
        }
        v75 = v107;
        v76 = *(_DWORD **)(a1 + 8);
        v77 = v76[50];
        if (v77 + 4 > v76[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v39, v40, v41, v42, v43, v44, v45);
          v77 = v76[50];
        }
        *(_DWORD *)(*((_QWORD *)v76 + 7) + v77) = (v74 >> 3) & 0xE1DF3FE0 | ((__int16)v46 >> 8) | 0x1E20C000;
        v76[50] += 4;
        if ((v75 & 0x80000000) == 0)
          goto LABEL_54;
        v78 = *(_QWORD *)(a1 + 8);
        v79 = *(_DWORD *)(v78 + 200);
        v68 = (unsigned int *)(v78 + 200);
        v67 = v79;
        v72 = (__int16)v46 >> 8;
        v70 = v68 - 36;
        v71 = 505495552;
        if (v79 + 4 > *(v68 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v68 - 36), v39, v40, v41, v42, v43, v44, v45);
          v67 = *v68;
        }
      }
      v73 = v71 | (32 * v72) | v72;
LABEL_53:
      *(_DWORD *)(*(_QWORD *)v70 + v67) = v73;
      *v68 += 4;
LABEL_54:
      *v106 = 0;
      v106[8] = 0;
      return;
    }
LABEL_8:
    v19 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
    v111 = v19;
    goto LABEL_9;
  }
  if (a5 != 1)
  {
    v106 = a9;
    IfNecessary = 0;
    v114 = 0;
    goto LABEL_8;
  }
  *a6 = a4 & 0x80000000 | (unint64_t)(a2 & 0x7FFFFFFF);
  *((_WORD *)a6 + 4) = -767;
  if (HIBYTE(word_1ECF4C700))
  {
    v112 = *(_OWORD *)a6;
    v113 = "F32Copysign";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v99 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v99;
      }
      while (v99 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>(&v113, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v109);
    if (v110 != 1 && v110 != 4)
    {
      v114 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v109, v110, v100, v101, v102, v103, v104);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v114);
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v107, (uint64_t *)&v112);
  }
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Abs(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = a2 & 0x7FFFFFFF;
    *((_WORD *)a4 + 4) = -767;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F32Abs";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -766;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F32Abs";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      LOWORD(IfNecessary) = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = ((__int16)IfNecessary >> 3) & 0xFFFFFFE0 | (v40 >> 8) | 0x1E20C000;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Abs(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = a2 & 0x7FFFFFFFFFFFFFFFLL;
    *((_WORD *)a4 + 4) = -1023;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F64Abs";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -1022;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F64Abs";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      LOWORD(IfNecessary) = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = ((__int16)IfNecessary >> 3) & 0xFFFFFFE0 | (v40 >> 8) | 0x1E60C000;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Sqrt(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = COERCE_UNSIGNED_INT(sqrtf(*(float *)&a2));
    *((_WORD *)a4 + 4) = -767;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F32Sqrt";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -766;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F32Sqrt";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      LOWORD(IfNecessary) = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = ((__int16)IfNecessary >> 3) & 0xFFFFFFE0 | (v40 >> 8) | 0x1E21C000;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Sqrt(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *(double *)a4 = sqrt(*(double *)&a2);
    *(_WORD *)(a4 + 8) = -1023;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F64Sqrt";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *(_QWORD *)a4 = v32;
    *(_WORD *)(a4 + 8) = -1022;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, *(_QWORD *)(a4 + 8), IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F64Sqrt";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      LOWORD(IfNecessary) = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = ((__int16)IfNecessary >> 3) & 0xFFFFFFE0 | (v40 >> 8) | 0x1E61C000;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Neg(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = a2 ^ 0x80000000;
    *((_WORD *)a4 + 4) = -767;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F32Neg";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -766;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F32Neg";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      LOWORD(IfNecessary) = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = ((__int16)IfNecessary >> 3) & 0xFFFFFFE0 | (v40 >> 8) | 0x1E214000;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Neg(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = a2 ^ 0x8000000000000000;
    *((_WORD *)a4 + 4) = -1023;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F64Neg";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -1022;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F64Neg";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      LOWORD(IfNecessary) = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = ((__int16)IfNecessary >> 3) & 0xFFFFFFE0 | (v40 >> 8) | 0x1E614000;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::addI32TruncSF32@<X0>(JSC::Wasm::BBQJITImpl::BBQJIT *a1@<X0>, JSC::ARM64LogicalImmediate *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X7>, _BYTE *a6@<X8>)
{
  return JSC::Wasm::BBQJITImpl::BBQJIT::truncTrapping(a1, 168, a2, a3, a4, 255, 0, a5, a6, 0xFDu, 0);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::addI32TruncSF64@<X0>(JSC::Wasm::BBQJITImpl::BBQJIT *a1@<X0>, JSC::ARM64LogicalImmediate *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X7>, _BYTE *a6@<X8>)
{
  return JSC::Wasm::BBQJITImpl::BBQJIT::truncTrapping(a1, 170, a2, a3, a4, 255, 0, a5, a6, 0xFCu, 0);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::addI32TruncUF32@<X0>(JSC::Wasm::BBQJITImpl::BBQJIT *a1@<X0>, JSC::ARM64LogicalImmediate *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X7>, _BYTE *a6@<X8>)
{
  return JSC::Wasm::BBQJITImpl::BBQJIT::truncTrapping(a1, 169, a2, a3, a4, 255, 0, a5, a6, 0xFDu, 0);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::addI32TruncUF64@<X0>(JSC::Wasm::BBQJITImpl::BBQJIT *a1@<X0>, JSC::ARM64LogicalImmediate *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X7>, _BYTE *a6@<X8>)
{
  return JSC::Wasm::BBQJITImpl::BBQJIT::truncTrapping(a1, 171, a2, a3, a4, 255, 0, a5, a6, 0xFCu, 0);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::addI64TruncSF32@<X0>(JSC::Wasm::BBQJITImpl::BBQJIT *a1@<X0>, JSC::ARM64LogicalImmediate *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X7>, _BYTE *a6@<X8>)
{
  return JSC::Wasm::BBQJITImpl::BBQJIT::truncTrapping(a1, 174, a2, a3, a4, 254, 0, a5, a6, 0xFDu, 0);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::addI64TruncSF64@<X0>(JSC::Wasm::BBQJITImpl::BBQJIT *a1@<X0>, JSC::ARM64LogicalImmediate *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X7>, _BYTE *a6@<X8>)
{
  return JSC::Wasm::BBQJITImpl::BBQJIT::truncTrapping(a1, 176, a2, a3, a4, 254, 0, a5, a6, 0xFCu, 0);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::addI64TruncUF32@<X0>(JSC::Wasm::BBQJITImpl::BBQJIT *a1@<X0>, JSC::ARM64LogicalImmediate *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X7>, _BYTE *a6@<X8>)
{
  return JSC::Wasm::BBQJITImpl::BBQJIT::truncTrapping(a1, 175, a2, a3, a4, 254, 0, a5, a6, 0xFDu, 0);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::addI64TruncUF64@<X0>(JSC::Wasm::BBQJITImpl::BBQJIT *a1@<X0>, JSC::ARM64LogicalImmediate *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X7>, _BYTE *a6@<X8>)
{
  return JSC::Wasm::BBQJITImpl::BBQJIT::truncTrapping(a1, 177, a2, a3, a4, 254, 0, a5, a6, 0xFCu, 0);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitCCall<long long (*)(JSC::Wasm::Instance *,unsigned int),8ul>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const JSC::Wasm::Type *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  unsigned __int8 *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  unsigned __int8 **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  unsigned int v54;
  uint64_t v55;
  _DWORD **v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  WTF *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  char v82[32];
  WTF *v83;
  int v84;
  WTF *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  int v90;
  uint64_t v91;
  uint64_t *v92[2];
  char v93;
  __int128 v94;
  _QWORD v95[33];

  v95[32] = *MEMORY[0x1E0C80C00];
  LOBYTE(v94) = *(_BYTE *)(a4 + 9);
  *((_QWORD *)&v94 + 1) = 0;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v89, &v94, 1uLL);
  *(_QWORD *)&v94 = v95;
  *((_QWORD *)&v94 + 1) = 16;
  v13 = *(unsigned int *)(a3 + 12);
  if (v13 < 0x11)
  {
    if (!(_DWORD)v13)
      goto LABEL_5;
    goto LABEL_3;
  }
  if (v13 >> 28)
  {
    __break(0xC471u);
    goto LABEL_74;
  }
  v72 = WTF::fastMalloc((WTF *)(16 * v13));
  DWORD2(v94) = v13;
  *(_QWORD *)&v94 = v72;
  v13 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v13)
  {
LABEL_3:
    v14 = HIDWORD(v94);
    v15 = 16 * v13;
    v16 = (unsigned __int8 *)(*(_QWORD *)a3 + 9);
    do
    {
      v17 = *v16;
      v16 += 16;
      v18 = (_QWORD *)(v94 + 16 * v14);
      *v18 = v17;
      v18[1] = 0;
      v14 = ++HIDWORD(v94);
      v15 -= 16;
    }
    while (v15);
  }
LABEL_5:
  v19 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v19 != -1)
  {
    *(_QWORD *)v82 = &v93;
    v92[0] = (uint64_t *)v82;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v20 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v21 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v21))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v21);
LABEL_11:
  v92[0] = (uint64_t *)&v89;
  v92[1] = (uint64_t *)&v94;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v20, v92, (uint64_t)v92, v8, v9, v10, v11, v12, (uint64_t)v82);
  v29 = **(unsigned int ***)v82;
  if (**(_QWORD **)v82)
  {
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 + 1, v29));
  }
  v31 = __ldxr(v21);
  if (v31 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v21))
LABEL_17:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, v23, v24, v25, v26, v27, v28);
  v32 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v32 != -1)
  {
    *(_QWORD *)v82 = &v93;
    v92[0] = (uint64_t *)v82;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (v29[8])
    v33 = 0;
  else
    v33 = (unsigned __int8 **)(v29 + 2);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v33, 0, v82);
  if ((unint64_t)(v88 + 15) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198F27DFCLL);
  }
  v39 = (v88 + 15) & 0xFFFFFFF0;
  if (*(_DWORD *)(a1 + 1284) > v39)
    v39 = *(_DWORD *)(a1 + 1284);
  *(_DWORD *)(a1 + 1284) = v39;
  v40 = *(unsigned int *)(a1 + 1300);
  if ((_DWORD)v40 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x198F27E04);
  }
  *(_DWORD *)(a1 + 1300) = v40 + 1;
  if (!*(_BYTE *)(a1 + 73) || *(_BYTE *)(a1 + 72))
  {
    v73 = *(_QWORD *)(a1 + 8);
    if (!*(_BYTE *)(v73 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198F27DE4);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(*(unsigned int **)(a1 + 8), (JSC::ARM64LogicalImmediate *)(v40 + 1), v73 + 264, v34, v35, v36, v37, v38);
    v81 = *(_DWORD *)(v73 + 200);
    if (v81 + 4 > *(_DWORD *)(v73 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v73 + 56), v74, v75, v76, v77, v78, v79, v80);
      v81 = *(_DWORD *)(v73 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v73 + 56) + v81) = -1207811152;
    *(_DWORD *)(v73 + 200) += 4;
    JSC::Wasm::BBQJITImpl::BBQJIT::flushRegistersForException(a1, v74, v75, v76, v77, v78, v79, v80);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<8ul>(a1, a3, (uint64_t)v82, (uint64_t)v29, v35, v36, v37, v38);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), a2, 8, v41, v42, v43, v44, v45);
  v53 = *(_DWORD **)(a1 + 8);
  v53[52] = 0;
  v54 = v53[50];
  if (v54 + 4 > v53[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 + 14), v46, v47, v48, v49, v50, v51, v52);
    v54 = v53[50];
  }
  v55 = 0;
  *(_DWORD *)(*((_QWORD *)v53 + 7) + v54) = -700514048;
  v53[50] += 4;
  if (*(unsigned __int8 *)(a4 + 9) - 192 <= 0x3F)
  {
    if (((1 << (*(_BYTE *)(a4 + 9) + 64)) & 0xC00FFC19C001C000) != 0)
    {
      if (!*(_DWORD *)(a1 + 340))
      {
        __break(0xC471u);
        JUMPOUT(0x198F27E0CLL);
      }
      v56 = (_DWORD **)(a1 + 328);
      v55 = 2;
LABEL_35:
      if ((**v56 & 0x700) == 0x300)
      {
        __break(0xC471u);
        JUMPOUT(0x198F27D44);
      }
      goto LABEL_36;
    }
    if (((1 << (*(_BYTE *)(a4 + 9) + 64)) & 0x3800000000000000) != 0)
    {
      if (!*(_DWORD *)(a1 + 484))
      {
        __break(0xC471u);
        JUMPOUT(0x198F27E14);
      }
      v56 = (_DWORD **)(a1 + 472);
      v55 = 3;
      goto LABEL_35;
    }
    if (*(unsigned __int8 *)(a4 + 9) != 192)
      goto LABEL_36;
    __break(0xC471u);
LABEL_74:
    JUMPOUT(0x198F27CF4);
  }
LABEL_36:
  JSC::Wasm::BBQJITImpl::BBQJIT::bind(a1, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), v55, v49, v50, v51, v52);
  v64 = v85;
  if (&v87 != (uint64_t *)v85 && v85)
  {
    v85 = 0;
    v86 = 0;
    WTF::fastFree((unint64_t)v64, v57, v58, v59, v60, v61, v62, v63);
  }
  v65 = v83;
  if (v83)
  {
    v83 = 0;
    v84 = 0;
    WTF::fastFree((unint64_t)v65, v57, v58, v59, v60, v61, v62, v63);
  }
  do
  {
    v66 = __ldaxr(v29);
    v67 = v66 - 1;
  }
  while (__stlxr(v67, v29));
  if (!v67)
  {
    atomic_store(1u, v29);
    WTF::fastFree((unint64_t)v29, v57, v58, v59, v60, v61, v62, v63);
  }
  v68 = v94;
  if (v95 != (_QWORD *)v94 && (_QWORD)v94 != 0)
  {
    *(_QWORD *)&v94 = 0;
    DWORD2(v94) = 0;
    WTF::fastFree(v68, v57, v58, v59, v60, v61, v62, v63);
  }
  v70 = v89;
  if (&v91 != (uint64_t *)v89 && v89 != 0)
  {
    v89 = 0;
    v90 = 0;
    WTF::fastFree((unint64_t)v70, v57, v58, v59, v60, v61, v62, v63);
  }
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::operator=(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  _DWORD *v11;
  int *v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  _DWORD *v17;
  int *v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int **v30;
  unsigned int **v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  const void *v51;
  size_t v52;

  *(_OWORD *)a1 = *a2;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = (_DWORD *)(a1 + 32);
  if (v10 != a1 + 32)
  {
    if (v10)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)(a1 + 16) = v11;
  }
  v12 = (int *)*((_QWORD *)a2 + 2);
  if (v12 == (int *)(a2 + 2))
  {
    v13 = *((unsigned int *)a2 + 7);
    if ((_DWORD)v13)
    {
      v43 = 4 * v13;
      do
      {
        v44 = *v12++;
        *v11++ = v44;
        v43 -= 4;
      }
      while (v43);
    }
    v14 = *((_DWORD *)a2 + 6);
  }
  else
  {
    *((_QWORD *)a2 + 2) = a2 + 2;
    *(_QWORD *)(a1 + 16) = v12;
    v14 = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = 2;
  }
  *(_DWORD *)(a1 + 24) = v14;
  v15 = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_DWORD *)(a1 + 28) = v15;
  v16 = *(_QWORD *)(a1 + 40);
  v17 = (_DWORD *)(a1 + 56);
  if (v16 != a1 + 56)
  {
    if (v16)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)(a1 + 40) = v17;
  }
  v18 = (int *)*((_QWORD *)a2 + 5);
  if (v18 == (int *)((char *)a2 + 56))
  {
    v19 = *((unsigned int *)a2 + 13);
    if ((_DWORD)v19)
    {
      v45 = 4 * v19;
      do
      {
        v46 = *v18++;
        *v17++ = v46;
        v45 -= 4;
      }
      while (v45);
    }
    v20 = *((_DWORD *)a2 + 12);
  }
  else
  {
    *((_QWORD *)a2 + 5) = (char *)a2 + 56;
    *(_QWORD *)(a1 + 40) = v18;
    v20 = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = 2;
  }
  *(_DWORD *)(a1 + 48) = v20;
  v21 = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = 0;
  *(_DWORD *)(a1 + 52) = v21;
  v22 = *(_QWORD *)(a1 + 64);
  v23 = a1 + 80;
  if (v22 != a1 + 80)
  {
    if (v22)
    {
      *(_QWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 72) = 0;
      WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)(a1 + 64) = v23;
  }
  v24 = *((_QWORD *)a2 + 8);
  if ((_OWORD *)v24 == a2 + 5)
  {
    v26 = *((_DWORD *)a2 + 19);
    if (v26)
    {
      v27 = v24 + 12 * v26;
      do
      {
        *(_DWORD *)v23 = *(_DWORD *)v24;
        *(_QWORD *)(v23 + 4) = *(_QWORD *)(v24 + 4);
        v24 += 12;
        v23 += 12;
      }
      while (v24 != v27);
    }
    v25 = *((_DWORD *)a2 + 18);
  }
  else
  {
    *((_QWORD *)a2 + 8) = a2 + 5;
    *(_QWORD *)(a1 + 64) = v24;
    v25 = *((_DWORD *)a2 + 18);
    *((_DWORD *)a2 + 18) = 2;
  }
  *(_DWORD *)(a1 + 72) = v25;
  v28 = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = 0;
  *(_DWORD *)(a1 + 76) = v28;
  v29 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v29)
  {
    v30 = *(unsigned int ***)(a1 + 104);
    v31 = &v30[v29];
    do
    {
      v32 = *v30;
      *v30 = 0;
      if (v32)
      {
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          atomic_store(1u, v32);
          WTF::fastFree((unint64_t)v32, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v30;
    }
    while (v30 != v31);
  }
  v35 = *(_QWORD *)(a1 + 104);
  if (v35)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v35, a2, a3, a4, a5, a6, a7, a8);
  }
  v36 = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = 0;
  *(_QWORD *)(a1 + 104) = v36;
  LODWORD(v36) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = 0;
  *(_DWORD *)(a1 + 112) = v36;
  v37 = *(_QWORD *)((char *)a2 + 116);
  *((_DWORD *)a2 + 29) = 0;
  *(_QWORD *)(a1 + 116) = v37;
  *(_DWORD *)(a1 + 124) = *((_DWORD *)a2 + 31);
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  v39 = (uint64_t *)(a2 + 9);
  v38 = *((_QWORD *)a2 + 18);
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
  v40 = *(_QWORD *)(a1 + 144);
  if ((v40 & 0x8000000000000000) == 0 || (v38 & 0x8000000000000000) == 0)
  {
    if (v38 >= 2)
    {
      v47 = *(_QWORD *)(2 * v38) + 63;
      v48 = v47 & 0xFFFFFFFFFFFFFFC0;
      v49 = WTF::fastMalloc((WTF *)(((v47 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
      *(_QWORD *)v49 = v48;
      v50 = (_QWORD *)(2 * *v39);
      if (*v39 >= 0)
        v51 = v50 + 1;
      else
        v51 = a2 + 9;
      if (*v39 < 0)
        v52 = 8;
      else
        v52 = (unint64_t)(*v50 + 7) >> 3;
      memcpy((void *)(v49 + 8), v51, v52);
      v38 = v49 >> 1;
      v40 = *(_QWORD *)(a1 + 144);
    }
    if (v40 >= 2)
      WTF::fastFree(2 * v40, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)(a1 + 144) = v38;
  v41 = *((_QWORD *)a2 + 19);
  *(_DWORD *)(a1 + 160) = *((_DWORD *)a2 + 40);
  *(_QWORD *)(a1 + 152) = v41;
  return a1;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::flushValue(uint64_t result, JSC::ARM64LogicalImmediate *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a3 != 1 && a3 != 4)
  {
    v11 = result;
    v12 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(result, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v18 = JSC::Wasm::BBQJITImpl::BBQJIT::canonicalSlot(v11, a2, a3);
    if (a3 == 1)
    {
      if ((v18 & 7) <= 5 && ((1 << (v18 & 7)) & 0x32) != 0)
        JSC::Wasm::BBQJITImpl::BBQJIT::emitStoreConst(v11, a2, a3, v18, v14, v15, v16, v17);
      else
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(v11, a2, a3, v18, v14, v15, v16, v17);
    }
    else
    {
      v19 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(v11, (uint64_t)a2, a3, v13, v14, v15, v16, v17);
      v24 = v18 & 7;
      if ((v19 & 6) == 2)
      {
        if (v24 <= 5 && ((1 << v24) & 0x32) != 0)
          JSC::Wasm::BBQJITImpl::BBQJIT::emitStore(v11, SBYTE1(a3), v19, v18, v20, v21, v22, v23);
        else
          JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveRegister(v11, SBYTE1(a3), v19, v18);
      }
      else if (v24 <= 5 && ((1 << v24) & 0x32) != 0)
      {
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveMemory(v11, SBYTE1(a3), v19, v18);
      }
      else
      {
        JSC::Wasm::BBQJITImpl::BBQJIT::emitLoad(v11, SBYTE1(a3), v19, v18, v20, v21, v22, v23);
      }
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::unbind(v11, (uint64_t)a2, a3, v12);
    return JSC::Wasm::BBQJITImpl::BBQJIT::bind(v11, (uint64_t)a2, a3, v18, v25, v26, v27, v28);
  }
  return result;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addTopLevel(JSC::Wasm::FunctionSignature const*)::$_0::operator()(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;

  if (*((_BYTE *)*a1 + 4))
  {
    v9 = a1[1];
    if (*((_BYTE *)v9 + 4))
    {
      v10 = a1[2];
      v11 = **a1;
      v12 = *v9 - v11;
      if ((v11 & 4) != 0 && v12 >= 4)
      {
        JSC::MacroAssemblerARM64::store32(*((_QWORD *)v10 + 1), 63, ((unint64_t)v11 << 32) | 0x1D, a4, a5, a6, a7, a8);
        v11 = (v11 + 4);
        v12 -= 4;
      }
      if ((v11 & 8) != 0 && v12 >= 8)
      {
        JSC::MacroAssemblerARM64::store64(*((_QWORD *)v10 + 1), 63, (v11 << 32) | 0x1D, a4, a5, a6, a7, a8);
        v11 = (v11 + 8);
        v12 -= 8;
      }
      v13 = v12 >> 4;
      if ((v12 >> 4))
      {
        if ((v11 & 7) != 0)
        {
          do
          {
            v14 = *((_QWORD *)v10 + 1);
            JSC::MacroAssemblerARM64::store64(v14, 63, ((unint64_t)v11 << 32) | 0x1D, a4, a5, a6, a7, a8);
            JSC::MacroAssemblerARM64::store64(v14, 63, (v11 << 32) + 0x80000001DLL, v15, v16, v17, v18, v19);
            v11 = (v11 + 16);
            LODWORD(v13) = v13 - 1;
          }
          while ((_DWORD)v13);
        }
        else
        {
          do
          {
            v20 = (_DWORD *)*((_QWORD *)v10 + 1);
            if ((((int)v11 >> 3) + 64) > 0x7F)
            {
              JSC::MacroAssemblerARM64::store64(*((_QWORD *)v10 + 1), 63, ((unint64_t)v11 << 32) | 0x1D, a4, a5, a6, a7, a8);
              JSC::MacroAssemblerARM64::store64((uint64_t)v20, 63, (v11 << 32) + 0x80000001DLL, v22, v23, v24, v25, v26);
            }
            else
            {
              v21 = v20[50];
              if (v21 + 4 > v20[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 + 14), a2, a3, a4, a5, a6, a7, a8);
                v21 = v20[50];
              }
              *(_DWORD *)(*((_QWORD *)v20 + 7) + v21) = ((((int)v11 >> 3) & 0x7F) << 15) | 0xA9007FBF;
              v20[50] += 4;
            }
            v11 = (v11 + 16);
            LODWORD(v13) = v13 - 1;
          }
          while ((_DWORD)v13);
        }
        LOBYTE(v12) = v12 - 16;
      }
      if ((v12 & 8) != 0)
      {
        JSC::MacroAssemblerARM64::store64(*((_QWORD *)v10 + 1), 63, (v11 << 32) | 0x1D, a4, a5, a6, a7, a8);
        v11 = (v11 + 8);
        LOBYTE(v12) = v12 - 8;
      }
      if ((v12 & 4) != 0)
        JSC::MacroAssemblerARM64::store32(*((_QWORD *)v10 + 1), 63, (v11 << 32) | 0x1D, a4, a5, a6, a7, a8);
      v27 = a1[1];
      if (*((_BYTE *)v27 + 4))
        *((_BYTE *)v27 + 4) = 0;
      if (*((_BYTE *)*a1 + 4))
        *((_BYTE *)*a1 + 4) = 0;
    }
    else
    {
      v28 = std::__throw_bad_optional_access[abi:sn180100]();
      JSC::Wasm::BBQJITImpl::BBQJIT::addBlock(v28);
    }
  }
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::addBlock(_BYTE *a1, uint64_t a2, JSC::Wasm::FunctionSignature *a3, _DWORD *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  _OWORD v57[10];

  v6 = *(_QWORD *)(a2 + 88);
  v7 = *(_DWORD *)(v6 + 596);
  if (!v7)
  {
    __break(0xC471u);
    goto LABEL_18;
  }
  v14 = *(_QWORD *)(v6 + 584) + 1232 * v7;
  v15 = *(_DWORD *)(v14 - 160) == 5;
  v16 = a4[3] + *(_DWORD *)(v14 - 32);
  if (v15)
    ++v16;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::ControlData((uint64_t)v57, a2, 1, (uint64_t)a3, v16 - *((_DWORD *)a3 + 2), 0);
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::operator=(a5, v57, v17, v18, v19, v20, v21, v22);
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::~ControlData((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)v57, v23, v24, v25, v26, v27, v28, v29);
  v33 = *(_QWORD *)(a2 + 88);
  v34 = *(_DWORD *)(v33 + 596);
  if (!v34)
  {
    __break(0xC471u);
LABEL_18:
    JUMPOUT(0x198F286DCLL);
  }
  v35 = (_DWORD *)(*(_QWORD *)(v33 + 584) + 1232 * v34 - 168);
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::flushAtBlockBoundary<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>(v35, a2, *(_DWORD *)(a5 + 28), (uint64_t)a4, 0, v30, v31, v32);
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::addExit<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,2ul>(a2, a5 + 16, (uint64_t)a4, v36, v37, v38, v39, v40);
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::finalizeBlock<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>((uint64_t)v35, a2, *(_DWORD *)(a5 + 28), (uint64_t)a4, 0, v41, v42, v43);
  if (HIBYTE(word_1ECF4C700))
  {
    *(_QWORD *)&v57[0] = "Block";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a2)
    {
      v54 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v54;
      }
      while (v54 < *(_DWORD *)a2);
    }
    WTF::dataLog<char const*,char [2]>((const char **)v57, " ");
    WTF::dataLog<JSC::Wasm::FunctionSignature>(a3);
    WTF::dataLog<char [16]>("\n");
    if (HIBYTE(word_1ECF4C700))
      *(_DWORD *)a2 += 2;
  }
  result = (uint64_t)JSC::Wasm::splitStack<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>((void *)*((unsigned int *)a3 + 2), a4, (uint64_t)a6, v44, v45, v46, v47, v48);
  if (*(_DWORD *)(a5 + 28))
  {
    v55 = 0;
    v56 = 0;
    do
    {
      result = JSC::Wasm::BBQJITImpl::BBQJIT::bind(a2, *(_QWORD *)(*a6 + v55 + 16), *(_QWORD *)(*a6 + v55 + 24), *(unsigned int *)(*(_QWORD *)(a5 + 16) + 4 * v56++), v50, v51, v52, v53);
      v55 += 32;
    }
    while (v56 < *(unsigned int *)(a5 + 28));
  }
  *a1 = 0;
  a1[8] = 0;
  return result;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::flushAndSingleExit<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_DWORD *)(a3 + 8) == 2)
    v12 = a3 + 16;
  else
    v12 = a3 + 40;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::flushAtBlockBoundary<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>(a1, a2, *(_DWORD *)(v12 + 12), a4, 1, a6, a7, a8);
  if ((a5 & 1) == 0)
    JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::addExit<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,2ul>(a2, v12, a4, v13, v14, v15, v16, v17);
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::finalizeBlock<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>((uint64_t)a1, a2, *(_DWORD *)(v12 + 12), a4, 0, v15, v16, v17);
}

void *JSC::Wasm::splitStack<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>(void *result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE v22[512];

  v10 = a2[3] - (_DWORD)result;
  v11 = result;
  v20 = v22;
  v21 = 16;
  if (result >= 0x11)
  {
    if (result >> 27)
    {
      __break(0xC471u);
      return result;
    }
    LODWORD(v21) = (_DWORD)result;
    v20 = (_BYTE *)WTF::fastMalloc((WTF *)(32 * result));
    v15 = 0;
    goto LABEL_11;
  }
  if ((_DWORD)result)
  {
    v15 = 0;
LABEL_11:
    v16 = 32 * v10;
    do
    {
      v17 = (_OWORD *)(*(_QWORD *)a2 + v16);
      v18 = &v20[32 * v15];
      v19 = v17[1];
      *v18 = *v17;
      v18[1] = v19;
      v15 = ++HIDWORD(v21);
      v16 += 32;
      --v11;
    }
    while (v11);
  }
  result = (void *)(a3 + 16);
  v12 = *(_QWORD *)a3;
  if (*(_QWORD *)a3 != a3 + 16)
  {
    if (v12)
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
    result = (void *)(a3 + 16);
    *(_QWORD *)a3 = a3 + 16;
  }
  if (v20 == v22)
  {
    v13 = HIDWORD(v21);
    if (HIDWORD(v21))
      result = memcpy(result, v22, 32 * HIDWORD(v21));
    v14 = v21;
  }
  else
  {
    *(_QWORD *)a3 = v20;
    v14 = v21;
    v13 = HIDWORD(v21);
  }
  *(_DWORD *)(a3 + 8) = v14;
  *(_DWORD *)(a3 + 12) = v13;
  a2[3] = v10;
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::startBlock<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if (*(_DWORD *)(result + 28))
  {
    v10 = result;
    v11 = 0;
    v12 = 0;
    do
    {
      result = JSC::Wasm::BBQJITImpl::BBQJIT::bind(a2, *(_QWORD *)(*a3 + v11 + 16), *(_QWORD *)(*a3 + v11 + 24), *(unsigned int *)(*(_QWORD *)(v10 + 16) + 4 * v12++), a5, a6, a7, a8);
      v11 += 32;
    }
    while (v12 < *(unsigned int *)(v10 + 28));
  }
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::toB3Type(unsigned int a1)
{
  uint64_t result;

  if (a1 > 0xFFFFFFE2 && ((0x1F01FF83u >> (a1 + 29)) & 1) != 0)
    return dword_19919F4B0[(char)(a1 + 29)];
  result = 3190;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::toB3Rep(unint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;

  v1 = a1 & 7;
  if ((a1 & 6) == 2)
  {
    v5 = v1 == 2;
    v3 = ((a1 >> 8) + 32) & 0x7FLL;
    v2 = 0;
    if (v5)
      v3 = (a1 >> 8) & 0x7F;
    return v3 | v2;
  }
  if (v1 == 1)
  {
    v2 = (uint64_t)((int)a1 >> 11) << 8;
    v3 = (a1 >> 3);
    return v3 | v2;
  }
  result = 3202;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindPreserved(uint64_t result)
{
  int8x16_t **v1;
  unint64_t v2;
  unint64_t v3;
  int8x16_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int8x16_t *v8;
  unint64_t v9;
  __int128 v10;

  if (!*(_BYTE *)(result + 33))
  {
    v1 = (int8x16_t **)result;
    *(_BYTE *)(result + 33) = 1;
    v2 = *(_QWORD *)(result + 16);
    if (v2)
    {
      v3 = __clz(__rbit64(v2));
      while (1)
      {
        if (v3 > 0x1Fu)
        {
          result = (uint64_t)JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(v1, (char)(v3 - 32));
        }
        else
        {
          v4 = *v1;
          v5 = 1 << v3;
          if (((*v1)[40].i64[1] & (1 << v3)) != 0)
          {
            if (v3 >= v4[21].u32[1])
            {
              __break(0xC471u);
              return result;
            }
            v6 = v4[20].i64[1];
            v4[62] = vandq_s8(v4[62], (int8x16_t)vdupq_n_s64(~v5));
            if ((_BYTE)word_1ECF4C700)
            {
              v10 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v3];
              result = WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v10, "\n");
            }
            v7 = v6 + 4 * v3;
            if (((unint64_t)v1[2] & v5) == 0 || (*(_WORD *)(v7 + 1) & 7) == 3)
            {
              *(_DWORD *)v7 = 0;
              (*v1)[38].i64[1] |= v5;
            }
          }
        }
        if (v3 <= 0x3E)
        {
          v8 = v1[2];
          if (v8)
          {
            v9 = __clz(__rbit64((unint64_t)v8 >> ((v3 + 1) & 0x3F))) + (((_BYTE)v3 + 1) & 0x3F);
            v3 = v9 >= 0x40 ? 64 : v9;
            if (v9 < 0x40)
              continue;
          }
        }
        return result;
      }
    }
  }
  return result;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitMove(uint64_t a1, JSC::ARM64LogicalImmediate *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v8 = a4;
  if (a3 == 1)
  {
    if ((a4 & 7u) <= 5 && ((1 << (a4 & 7)) & 0x32) != 0)
      JSC::Wasm::BBQJITImpl::BBQJIT::emitStoreConst(a1, a2, a3, a4, a5, a6, a7, a8);
    else
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v10 = a3 >> 8;
    v11 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v16 = v8 & 7;
    if ((v11 & 6) == 2)
    {
      if (v16 <= 5 && ((1 << v16) & 0x32) != 0)
        JSC::Wasm::BBQJITImpl::BBQJIT::emitStore(a1, (char)v10, v11, v8, v12, v13, v14, v15);
      else
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveRegister(a1, (char)v10, v11, v8);
    }
    else if (v16 <= 5 && ((1 << v16) & 0x32) != 0)
    {
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveMemory(a1, (char)v10, v11, v8);
    }
    else
    {
      JSC::Wasm::BBQJITImpl::BBQJIT::emitLoad(a1, (char)v10, v11, v8, v12, v13, v14, v15);
    }
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addElse(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t i;
  unsigned int v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  _DWORD *v49;
  unint64_t *v50;
  _DWORD *v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t j;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  int v64;
  int *v65;
  uint64_t v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  unint64_t v73;
  _QWORD *v74;
  JSC::AssemblerBuffer *v75;
  uint64_t v76;
  unint64_t v77;
  JSC::AssemblerBuffer *v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t *v87;
  int v88;
  int v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD v93[6];
  int v94;
  int v95;
  int v96;
  unint64_t v97;
  uint64_t v98;
  int v99;

  if (*(_DWORD *)(a3 + 8) == 2)
    v12 = a3 + 16;
  else
    v12 = a3 + 40;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::flushAtBlockBoundary<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>((_DWORD *)a3, a2, *(_DWORD *)(v12 + 12), a4, 1, a6, a7, a8);
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::addExit<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,2ul>(a2, v12, a4, v13, v14, v15, v16, v17);
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::finalizeBlock<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>(a3, a2, *(_DWORD *)(v12 + 12), a4, 0, v18, v19, v20);
  v81 = *(_QWORD *)a3;
  v82 = 1;
  v28 = *(unsigned int *)(a3 + 28);
  v29 = &v86;
  v83 = &v86;
  v84 = 2;
  v85 = v28;
  if (v28 >= 3)
  {
    if (v28 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x198F292C8);
    }
    v29 = (uint64_t *)WTF::fastMalloc((WTF *)(4 * v28));
    v84 = v28;
    v83 = v29;
    v28 = *(unsigned int *)(a3 + 28);
  }
  if ((_DWORD)v28)
  {
    v62 = *(int **)(a3 + 16);
    v63 = 4 * v28;
    do
    {
      v64 = *v62++;
      *(_DWORD *)v29 = v64;
      v29 = (uint64_t *)((char *)v29 + 4);
      v63 -= 4;
    }
    while (v63);
  }
  v30 = *(unsigned int *)(a3 + 52);
  v31 = &v90;
  v87 = &v90;
  v88 = 2;
  v89 = v30;
  if (v30 >= 3)
  {
    if (v30 >> 30)
      goto LABEL_82;
    v31 = (uint64_t *)WTF::fastMalloc((WTF *)(4 * v30));
    v88 = v30;
    v87 = v31;
    v30 = *(unsigned int *)(a3 + 52);
  }
  if ((_DWORD)v30)
  {
    v65 = *(int **)(a3 + 40);
    v66 = 4 * v30;
    do
    {
      v67 = *v65++;
      *(_DWORD *)v31 = v67;
      v31 = (uint64_t *)((char *)v31 + 4);
      v66 -= 4;
    }
    while (v66);
  }
  v91 = v93;
  v92 = 2;
  v93[3] = 0;
  v93[4] = 0;
  v93[5] = -1;
  v94 = 0;
  v95 = -16773311;
  v96 = *(_DWORD *)(a3 + 136);
  v97 = 0x8000000000000000;
  v98 = 0;
  v99 = 0;
  v32 = *(_QWORD *)(a2 + 8);
  v33 = *(unsigned int *)(a3 + 76);
  if ((_DWORD)v33)
  {
    v34 = 0;
    v35 = 0;
    v36 = 12 * v33;
    while (v35 < *(unsigned int *)(a3 + 76))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a3 + 64) + v34), v32, v22, v23, v24, v25, v26, v27);
      ++v35;
      v34 += 12;
      if (v36 == v34)
        goto LABEL_12;
    }
LABEL_82:
    __break(0xC471u);
    JUMPOUT(0x198F292A0);
  }
LABEL_12:
  v37 = *(_DWORD *)(v32 + 200);
  if (v37 < *(_DWORD *)(v32 + 52))
  {
    v75 = (JSC::AssemblerBuffer *)(v32 + 56);
    do
    {
      if ((v37 + 4) > *(_DWORD *)(v32 + 192))
      {
        v78 = v75;
        JSC::AssemblerBuffer::outOfLineGrow(v75, (uint64_t)v21, v22, v23, v24, v25, v26, v27);
        v75 = v78;
        v37 = *(_DWORD *)(v32 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v32 + 56) + v37) = -721215457;
      v37 = *(_DWORD *)(v32 + 200) + 4;
      *(_DWORD *)(v32 + 200) = v37;
    }
    while (v37 < *(_DWORD *)(v32 + 52));
  }
  *(_DWORD *)(v32 + 208) = 0;
  v38 = *(unsigned int *)(a3 + 116);
  if ((_DWORD)v38)
  {
    v39 = *(uint64_t **)(a3 + 104);
    v40 = 8 * v38;
    do
    {
      v41 = *v39++;
      *(_DWORD *)(v41 + 4) = v37;
      v40 -= 8;
    }
    while (v40);
  }
  v42 = *(_QWORD *)(a2 + 8);
  for (i = *(unsigned int *)(v42 + 200); (int)i < *(_DWORD *)(v42 + 52); *(_DWORD *)(v42 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(v42 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v42 + 56), (uint64_t)v21, v22, v23, v24, v25, v26, v27);
      LODWORD(i) = *(_DWORD *)(v42 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v42 + 56) + i) = -721215457;
    i = (*(_DWORD *)(v42 + 200) + 4);
  }
  v44 = i;
  if ((i + 4) > *(_DWORD *)(v42 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v42 + 56), (uint64_t)v21, v22, v23, v24, v25, v26, v27);
    v44 = *(_DWORD *)(v42 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v42 + 56) + v44) = 335544320;
  *(_DWORD *)(v42 + 200) += 4;
  v45 = *(unsigned __int8 *)(v42 + 328);
  LODWORD(v80) = i;
  v46 = v45 == 0;
  v47 = 0xFF000F4500000000;
  if (v46)
    v47 = 0xFF000F4100000000;
  *(_QWORD *)((char *)&v80 + 4) = v47;
  if ((_DWORD)i != -1)
  {
    if (HIDWORD(v92) == (_DWORD)v92)
    {
      v48 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v91, (void *)(HIDWORD(v92) + 1), (unint64_t)&v80, v23, v24, v25, v26, v27);
      v49 = (_DWORD *)v91 + 3 * HIDWORD(v92);
      *v49 = *(_DWORD *)v48;
      v50 = (unint64_t *)(v49 + 1);
      v47 = *(_QWORD *)(v48 + 4);
    }
    else
    {
      v51 = (_DWORD *)v91 + 3 * HIDWORD(v92);
      *v51 = i;
      v50 = (unint64_t *)(v51 + 1);
    }
    *v50 = v47;
    ++HIDWORD(v92);
  }
  if (*(_DWORD *)(a3 + 124) != -1)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a3 + 124), *(_QWORD *)(a2 + 8), v22, v23, v24, v25, v26, v27);
  if (HIBYTE(word_1ECF4C700))
  {
    *(_DWORD *)a2 -= 2;
    *(_QWORD *)&v80 = "Else";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a2)
    {
      LODWORD(i) = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        i = (i + 1);
      }
      while (i < *(_DWORD *)a2);
    }
    WTF::dataLog<char const*,char [2]>((const char **)&v80, " ");
    WTF::dataLog<char [16]>("\n");
    if (HIBYTE(word_1ECF4C700))
      *(_DWORD *)a2 += 2;
  }
  if (*(_DWORD *)(a4 + 8))
  {
    if (*(_DWORD *)(a4 + 12))
      *(_DWORD *)(a4 + 12) = 0;
    v52 = *(_QWORD *)a4;
    if (a4 + 16 != *(_QWORD *)a4)
    {
      if (!v52)
      {
LABEL_49:
        *(_QWORD *)a4 = a4 + 16;
        *(_DWORD *)(a4 + 8) = 16;
        goto LABEL_34;
      }
      *(_QWORD *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 0;
      WTF::fastFree(v52, v21, v22, v23, v24, v25, v26, v27);
      v52 = *(_QWORD *)a4;
    }
    if (v52)
      goto LABEL_34;
    goto LABEL_49;
  }
LABEL_34:
  v53 = *(_DWORD *)(a4 + 12);
  for (j = *(_QWORD *)a3; v53 < *(_DWORD *)(*(_QWORD *)a3 + 8); j = *(_QWORD *)a3)
  {
    v68 = (uint64_t *)(*(_QWORD *)j + 16 * (*(_DWORD *)(j + 12) + v53));
    v69 = *v68;
    v70 = v68[1];
    *(_QWORD *)&v80 = v69;
    *((_QWORD *)&v80 + 1) = v70;
    LODWORD(v71) = v96 + v53;
    if ((_DWORD)v82 == 5)
      v71 = (v71 + 1);
    else
      v71 = v71;
    v72 = v69;
    if (v69 - 192 <= 0x33)
    {
      if (((1 << (v69 + 64)) & 0xFFC19C001C000) != 0)
      {
        v72 = -2;
      }
      else
      {
        v72 = v69;
        if (v69 == 192)
        {
          __break(0xC471u);
          JUMPOUT(0x198F292C0);
        }
      }
    }
    v73 = ((unint64_t)v72 << 8) | 2;
    i = i & 0xFFFFFFFF00000000 | v71;
    *(_QWORD *)&v79 = i;
    *((_QWORD *)&v79 + 1) = v73;
    if (v53 == *(_DWORD *)(a4 + 8))
    {
      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a4, &v80, &v79, v23, v24, v25, v26, v27);
      v53 = *(_DWORD *)(a4 + 12);
    }
    else
    {
      v74 = (_QWORD *)(*(_QWORD *)a4 + 32 * v53);
      *v74 = v69;
      v74[1] = v70;
      v74[2] = i;
      v74[3] = v73;
      v53 = *(_DWORD *)(a4 + 12) + 1;
      *(_DWORD *)(a4 + 12) = v53;
    }
  }
  if (v85)
  {
    v76 = 0;
    v77 = 0;
    do
    {
      JSC::Wasm::BBQJITImpl::BBQJIT::bind(a2, *(_QWORD *)(*(_QWORD *)a4 + v76 + 16), *(_QWORD *)(*(_QWORD *)a4 + v76 + 24), *((unsigned int *)v83 + v77++), v24, v25, v26, v27);
      v76 += 32;
    }
    while (v77 < v85);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::operator=(a3, (uint64_t)&v81, v22, v23, v24, v25, v26, v27);
  *a1 = 0;
  a1[8] = 0;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::~ControlData((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)&v81, v55, v56, v57, v58, v59, v60, v61);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::operator=(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int **v28;
  unsigned int **v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int **v34;
  unsigned int **v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  _DWORD *v39;
  int *v40;
  uint64_t v41;
  int v42;
  _DWORD *v43;
  int *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int **v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int **v58;
  unsigned int **v59;
  unsigned int **v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  unsigned int **v68;
  unsigned int **v69;
  unsigned int **v70;
  unsigned int *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  const void *v81;
  size_t v82;
  unint64_t v83;
  unint64_t v84;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (a2 == a1)
  {
    WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 64, (unsigned int *)(a2 + 64), a3, a4, a5, a6, a7, a8);
    goto LABEL_70;
  }
  v10 = *(_DWORD *)(a1 + 28);
  v11 = *(_DWORD *)(a2 + 28);
  if (v10 > v11)
  {
    *(_DWORD *)(a1 + 28) = v11;
    v10 = v11;
    goto LABEL_4;
  }
  v12 = *(_DWORD *)(a1 + 24);
  if (v11 <= v12)
    goto LABEL_4;
  if (v12)
  {
    if (v10)
      *(_DWORD *)(a1 + 28) = 0;
    v83 = *(_QWORD *)(a1 + 16);
    if (a1 + 32 != v83)
    {
      if (v83)
      {
        *(_QWORD *)(a1 + 16) = 0;
        *(_DWORD *)(a1 + 24) = 0;
        WTF::fastFree(v83, (void *)a2, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(a1 + 16))
          goto LABEL_92;
      }
      goto LABEL_91;
    }
    if (!v83)
    {
LABEL_91:
      *(_QWORD *)(a1 + 16) = a1 + 32;
      *(_DWORD *)(a1 + 24) = 2;
    }
  }
LABEL_92:
  WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 16, *(unsigned int *)(a2 + 28));
  v10 = *(_DWORD *)(a1 + 28);
LABEL_4:
  if (v10)
  {
    memmove(*(void **)(a1 + 16), *(const void **)(a2 + 16), 4 * v10);
    v10 = *(_DWORD *)(a1 + 28);
  }
  v13 = *(unsigned int *)(a2 + 28);
  if (v10 != (_DWORD)v13)
  {
    v39 = (_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v10);
    v40 = (int *)(*(_QWORD *)(a2 + 16) + 4 * v10);
    v41 = 4 * v13 - 4 * v10;
    do
    {
      v42 = *v40++;
      *v39++ = v42;
      v41 -= 4;
    }
    while (v41);
    v10 = *(_DWORD *)(a2 + 28);
  }
  *(_DWORD *)(a1 + 28) = v10;
  v14 = *(_DWORD *)(a1 + 52);
  v15 = *(_DWORD *)(a2 + 52);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 52) = v15;
    v14 = v15;
    goto LABEL_9;
  }
  v16 = *(_DWORD *)(a1 + 48);
  if (v15 > v16)
  {
    if (v16)
    {
      if (v14)
        *(_DWORD *)(a1 + 52) = 0;
      v84 = *(_QWORD *)(a1 + 40);
      if (a1 + 56 != v84)
      {
        if (v84)
        {
          *(_QWORD *)(a1 + 40) = 0;
          *(_DWORD *)(a1 + 48) = 0;
          WTF::fastFree(v84, (void *)a2, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(a1 + 40))
            goto LABEL_99;
        }
        goto LABEL_98;
      }
      if (!v84)
      {
LABEL_98:
        *(_QWORD *)(a1 + 40) = a1 + 56;
        *(_DWORD *)(a1 + 48) = 2;
      }
    }
LABEL_99:
    WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 40, *(unsigned int *)(a2 + 52));
    v14 = *(_DWORD *)(a1 + 52);
  }
LABEL_9:
  if (v14)
  {
    memmove(*(void **)(a1 + 40), *(const void **)(a2 + 40), 4 * v14);
    v14 = *(_DWORD *)(a1 + 52);
  }
  v17 = *(unsigned int *)(a2 + 52);
  if (v14 != (_DWORD)v17)
  {
    v43 = (_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v14);
    v44 = (int *)(*(_QWORD *)(a2 + 40) + 4 * v14);
    v45 = 4 * v17 - 4 * v14;
    do
    {
      v46 = *v44++;
      *v43++ = v46;
      v45 -= 4;
    }
    while (v45);
    v14 = *(_DWORD *)(a2 + 52);
  }
  *(_DWORD *)(a1 + 52) = v14;
  WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 64, (unsigned int *)(a2 + 64), a3, a4, a5, a6, a7, a8);
  v25 = *(unsigned int *)(a1 + 116);
  v26 = *(unsigned int *)(a2 + 116);
  if (v25 <= v26)
  {
    v33 = *(_DWORD *)(a1 + 112);
    if (v26 > v33)
    {
      if (v33)
      {
        if ((_DWORD)v25)
        {
          v34 = *(unsigned int ***)(a1 + 104);
          v35 = &v34[v25];
          do
          {
            v36 = *v34;
            *v34 = 0;
            if (v36)
            {
              do
              {
                v37 = __ldaxr(v36);
                v38 = v37 - 1;
              }
              while (__stlxr(v38, v36));
              if (!v38)
              {
                atomic_store(1u, v36);
                WTF::fastFree((unint64_t)v36, v18, v19, v20, v21, v22, v23, v24);
              }
            }
            ++v34;
          }
          while (v34 != v35);
          *(_DWORD *)(a1 + 116) = 0;
        }
        v47 = *(_QWORD *)(a1 + 104);
        if (v47)
        {
          *(_QWORD *)(a1 + 104) = 0;
          *(_DWORD *)(a1 + 112) = 0;
          WTF::fastFree(v47, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      v48 = *(unsigned int *)(a2 + 116);
      if (*(_DWORD *)(a1 + 112) < v48)
      {
        if (v48 >> 29)
        {
          __break(0xC471u);
          return;
        }
        v49 = *(_QWORD *)(a1 + 104);
        v50 = *(unsigned int *)(a1 + 116);
        v51 = WTF::fastMalloc((WTF *)(8 * v48));
        *(_DWORD *)(a1 + 112) = v48;
        *(_QWORD *)(a1 + 104) = v51;
        if ((_DWORD)v50)
        {
          v52 = (_QWORD *)v51;
          v53 = (unsigned int **)v49;
          do
          {
            v54 = *v53;
            *v53 = 0;
            *v52 = v54;
            v55 = *v53;
            *v53 = 0;
            if (v55)
            {
              do
              {
                v56 = __ldaxr(v55);
                v57 = v56 - 1;
              }
              while (__stlxr(v57, v55));
              if (!v57)
              {
                atomic_store(1u, v55);
                WTF::fastFree((unint64_t)v55, v18, v19, v20, v21, v22, v23, v24);
              }
            }
            ++v52;
            ++v53;
          }
          while (v53 != (unsigned int **)(v49 + 8 * v50));
        }
        if (v49)
        {
          if (*(_QWORD *)(a1 + 104) == v49)
          {
            *(_QWORD *)(a1 + 104) = 0;
            *(_DWORD *)(a1 + 112) = 0;
          }
          WTF::fastFree(v49, v18, v19, v20, v21, v22, v23, v24);
        }
      }
    }
    v26 = *(unsigned int *)(a1 + 116);
  }
  else
  {
    v27 = *(_QWORD *)(a1 + 104);
    v28 = (unsigned int **)(v27 + 8 * v25);
    v29 = (unsigned int **)(v27 + 8 * v26);
    do
    {
      v30 = *v29;
      *v29 = 0;
      if (v30)
      {
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          atomic_store(1u, v30);
          WTF::fastFree((unint64_t)v30, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      ++v29;
    }
    while (v29 != v28);
    *(_DWORD *)(a1 + 116) = v26;
  }
  v58 = *(unsigned int ***)(a2 + 104);
  v59 = *(unsigned int ***)(a1 + 104);
  if ((_DWORD)v26)
  {
    v60 = &v58[v26];
    do
    {
      v61 = *v58;
      if (*v58)
      {
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 + 1, v61));
      }
      v63 = *v59;
      *v59 = v61;
      if (v63)
      {
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
        {
          atomic_store(1u, v63);
          WTF::fastFree((unint64_t)v63, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      ++v58;
      ++v59;
    }
    while (v58 != v60);
    v58 = *(unsigned int ***)(a2 + 104);
    v66 = *(_DWORD *)(a1 + 116);
    v59 = *(unsigned int ***)(a1 + 104);
  }
  else
  {
    v66 = 0;
  }
  v67 = *(unsigned int *)(a2 + 116);
  if (v66 != (_DWORD)v67)
  {
    v68 = &v58[v67];
    v69 = &v59[v66];
    v70 = &v58[v66];
    do
    {
      v71 = *v70;
      if (*v70)
      {
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 + 1, v71));
      }
      *v69++ = v71;
      ++v70;
    }
    while (v70 != v68);
    v66 = *(_DWORD *)(a2 + 116);
  }
  *(_DWORD *)(a1 + 116) = v66;
LABEL_70:
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v74 = (uint64_t *)(a2 + 144);
  v73 = *(_QWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  v75 = *(_QWORD *)(a1 + 144);
  if ((v75 & 0x8000000000000000) == 0 || (v73 & 0x8000000000000000) == 0)
  {
    if (v73 >= 2)
    {
      v77 = *(_QWORD *)(2 * v73) + 63;
      v78 = v77 & 0xFFFFFFFFFFFFFFC0;
      v79 = WTF::fastMalloc((WTF *)(((v77 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
      *(_QWORD *)v79 = v78;
      v80 = (_QWORD *)(2 * *v74);
      if (*v74 >= 0)
        v81 = v80 + 1;
      else
        v81 = (const void *)(a2 + 144);
      if (*v74 < 0)
        v82 = 8;
      else
        v82 = (unint64_t)(*v80 + 7) >> 3;
      memcpy((void *)(v79 + 8), v81, v82);
      v73 = v79 >> 1;
      v75 = *(_QWORD *)(a1 + 144);
    }
    if (v75 >= 2)
      WTF::fastFree(2 * v75, v18, v19, v20, v21, v22, v23, v24);
  }
  *(_QWORD *)(a1 + 144) = v73;
  v76 = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v76;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addElseToUnreachable(JSC::Wasm::BBQJITImpl::BBQJIT *this, JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int i;
  unsigned int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  unint64_t *v40;
  int *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  int *v52;
  uint64_t v53;
  int v54;
  int *v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned __int8 v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  JSC::AssemblerBuffer *v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  JSC::AssemblerBuffer *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[512];
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t *v82;
  int v83;
  int v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD v88[6];
  int v89;
  int v90;
  int v91;
  unint64_t v92;
  uint64_t v93;
  int v94;

  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::flushAtBlockBoundary<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>((_DWORD *)a3, (uint64_t)a2, 0, *((_QWORD *)a2 + 11) + 56, 1, a6, a7, a8);
  v76 = *(_QWORD *)a3;
  v77 = 1;
  v19 = *(unsigned int *)(a3 + 28);
  v20 = &v81;
  v78 = &v81;
  v79 = 2;
  v80 = v19;
  if (v19 >= 3)
  {
    if (v19 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x198F29DE8);
    }
    v20 = (uint64_t *)WTF::fastMalloc((WTF *)(4 * v19));
    v79 = v19;
    v78 = v20;
    v19 = *(unsigned int *)(a3 + 28);
  }
  if ((_DWORD)v19)
  {
    v52 = *(int **)(a3 + 16);
    v53 = 4 * v19;
    do
    {
      v54 = *v52++;
      *(_DWORD *)v20 = v54;
      v20 = (uint64_t *)((char *)v20 + 4);
      v53 -= 4;
    }
    while (v53);
  }
  v21 = *(unsigned int *)(a3 + 52);
  v22 = &v85;
  v82 = &v85;
  v83 = 2;
  v84 = v21;
  if (v21 >= 3)
  {
    if (v21 >> 30)
      goto LABEL_76;
    v22 = (uint64_t *)WTF::fastMalloc((WTF *)(4 * v21));
    v83 = v21;
    v82 = v22;
    v21 = *(unsigned int *)(a3 + 52);
  }
  if ((_DWORD)v21)
  {
    v55 = *(int **)(a3 + 40);
    v56 = 4 * v21;
    do
    {
      v57 = *v55++;
      *(_DWORD *)v22 = v57;
      v22 = (uint64_t *)((char *)v22 + 4);
      v56 -= 4;
    }
    while (v56);
  }
  v86 = v88;
  v87 = 2;
  v88[3] = 0;
  v88[4] = 0;
  v88[5] = -1;
  v89 = 0;
  v90 = -16773311;
  v91 = *(_DWORD *)(a3 + 136);
  v92 = 0x8000000000000000;
  v93 = 0;
  v94 = 0;
  v23 = *((_QWORD *)a2 + 1);
  v24 = *(unsigned int *)(a3 + 76);
  if ((_DWORD)v24)
  {
    v25 = 0;
    v26 = 0;
    v27 = 12 * v24;
    while (v26 < *(unsigned int *)(a3 + 76))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a3 + 64) + v25), v23, v13, v14, v15, v16, v17, v18);
      ++v26;
      v25 += 12;
      if (v27 == v25)
        goto LABEL_9;
    }
LABEL_76:
    __break(0xC471u);
    JUMPOUT(0x198F29DC0);
  }
LABEL_9:
  v28 = *(_DWORD *)(v23 + 200);
  if (v28 < *(_DWORD *)(v23 + 52))
  {
    v67 = (JSC::AssemblerBuffer *)(v23 + 56);
    do
    {
      if ((v28 + 4) > *(_DWORD *)(v23 + 192))
      {
        v71 = v67;
        JSC::AssemblerBuffer::outOfLineGrow(v67, v12, v13, v14, v15, v16, v17, v18);
        v67 = v71;
        v28 = *(_DWORD *)(v23 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v23 + 56) + v28) = -721215457;
      v28 = *(_DWORD *)(v23 + 200) + 4;
      *(_DWORD *)(v23 + 200) = v28;
    }
    while (v28 < *(_DWORD *)(v23 + 52));
  }
  *(_DWORD *)(v23 + 208) = 0;
  v29 = *(unsigned int *)(a3 + 116);
  if ((_DWORD)v29)
  {
    v30 = *(uint64_t **)(a3 + 104);
    v31 = 8 * v29;
    do
    {
      v32 = *v30++;
      *(_DWORD *)(v32 + 4) = v28;
      v31 -= 8;
    }
    while (v31);
  }
  v33 = *((_QWORD *)a2 + 1);
  for (i = *(_DWORD *)(v33 + 200); i < *(_DWORD *)(v33 + 52); *(_DWORD *)(v33 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(v33 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v33 + 56), v12, v13, v14, v15, v16, v17, v18);
      i = *(_DWORD *)(v33 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v33 + 56) + i) = -721215457;
    i = *(_DWORD *)(v33 + 200) + 4;
  }
  v35 = i;
  if ((i + 4) > *(_DWORD *)(v33 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v33 + 56), v12, v13, v14, v15, v16, v17, v18);
    v35 = *(_DWORD *)(v33 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v33 + 56) + v35) = 335544320;
  *(_DWORD *)(v33 + 200) += 4;
  v36 = *(unsigned __int8 *)(v33 + 328);
  LODWORD(v74) = i;
  v51 = v36 == 0;
  v37 = 0xFF000F4500000000;
  if (v51)
    v37 = 0xFF000F4100000000;
  *(_QWORD *)((char *)&v74 + 4) = v37;
  if (i != -1)
  {
    if (HIDWORD(v87) == (_DWORD)v87)
    {
      v38 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v86, (void *)(HIDWORD(v87) + 1), (unint64_t)&v74, v14, v15, v16, v17, v18);
      v39 = (_DWORD *)v86 + 3 * HIDWORD(v87);
      *v39 = *(_DWORD *)v38;
      v40 = (unint64_t *)(v39 + 1);
      v37 = *(_QWORD *)(v38 + 4);
    }
    else
    {
      v41 = (int *)v86 + 3 * HIDWORD(v87);
      *v41 = i;
      v40 = (unint64_t *)(v41 + 1);
    }
    *v40 = v37;
    ++HIDWORD(v87);
  }
  if (*(_DWORD *)(a3 + 124) != -1)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a3 + 124), *((_QWORD *)a2 + 1), v13, v14, v15, v16, v17, v18);
  if (HIBYTE(word_1ECF4C700))
  {
    *(_DWORD *)a2 -= 2;
    *(_QWORD *)&v74 = "Else";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a2)
    {
      v68 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v68;
      }
      while (v68 < *(_DWORD *)a2);
    }
    WTF::dataLog<char const*,char [2]>((const char **)&v74, " ");
    WTF::dataLog<char [16]>("\n");
    if (HIBYTE(word_1ECF4C700))
      *(_DWORD *)a2 += 2;
  }
  *(_QWORD *)&v74 = v75;
  *((_QWORD *)&v74 + 1) = 16;
  v42 = v76;
  if (*(_DWORD *)(v76 + 8))
  {
    v58 = 0;
    do
    {
      v59 = (uint64_t *)(*(_QWORD *)v42 + 16 * (v58 + *(_DWORD *)(v42 + 12)));
      v60 = *v59;
      v61 = v59[1];
      *(_QWORD *)&v73 = v60;
      *((_QWORD *)&v73 + 1) = v61;
      v62 = v91;
      if ((_DWORD)v77 == 5)
        v62 = v91 + 1;
      v63 = v60;
      if (v60 - 192 <= 0x33)
      {
        if (((1 << (v60 + 64)) & 0xFFC19C001C000) != 0)
        {
          v63 = -2;
        }
        else
        {
          v63 = v60;
          if (v60 == 192)
          {
            __break(0xC471u);
            JUMPOUT(0x198F29DE0);
          }
        }
      }
      v64 = v58 + v62;
      v65 = ((unint64_t)v63 << 8) | 2;
      v8 = v8 & 0xFFFFFFFF00000000 | v64;
      *(_QWORD *)&v72 = v8;
      *((_QWORD *)&v72 + 1) = v65;
      if (HIDWORD(v74) == DWORD2(v74))
      {
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v74, &v73, &v72, v14, v15, v16, v17, v18);
      }
      else
      {
        v66 = (_QWORD *)(v74 + 32 * HIDWORD(v74));
        *v66 = v60;
        v66[1] = v61;
        v66[2] = v8;
        v66[3] = v65;
        ++HIDWORD(v74);
      }
      ++v58;
    }
    while (v58 < *(_DWORD *)(v42 + 8));
  }
  if (v80)
  {
    v69 = 0;
    v70 = 0;
    do
    {
      JSC::Wasm::BBQJITImpl::BBQJIT::bind((uint64_t)a2, *(_QWORD *)(v74 + v69 + 16), *(_QWORD *)(v74 + v69 + 24), *((unsigned int *)v78 + v70++), v15, v16, v17, v18);
      v69 += 32;
    }
    while (v70 < v80);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::operator=(a3, (uint64_t)&v76, v13, v14, v15, v16, v17, v18);
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
  v50 = v74;
  v51 = v75 == (_BYTE *)v74 || (_QWORD)v74 == 0;
  if (!v51)
  {
    *(_QWORD *)&v74 = 0;
    DWORD2(v74) = 0;
    WTF::fastFree(v50, v43, v44, v45, v46, v47, v48, v49);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::~ControlData((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)&v76, v43, v44, v45, v46, v47, v48, v49);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::flushAtBlockBoundary<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  char v9;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t i;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  JSC::ARM64LogicalImmediate *v64;

  v9 = a5;
  v14 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v14)
  {
    v8 = 0;
    for (i = 0; i < v14; ++i)
    {
      v23 = *(_QWORD *)a4 + v8;
      if (*(_BYTE *)(v23 + 24) == 3)
      {
        WTF::BitVector::add((WTF::BitVector *)(a1 + 36), *(unsigned int *)(v23 + 16));
        v14 = *(unsigned int *)(a4 + 12);
      }
      v8 += 32;
    }
  }
  v15 = *((_QWORD *)a1 + 18);
  if ((v15 & 0x8000000000000000) != 0)
  {
    v57 = __clz(__rbit64(v15));
    v16 = 63;
    if (v57 >= 0x3F)
      v20 = 63;
    else
      v20 = v57;
LABEL_8:
    if (v20 == v16)
      goto LABEL_9;
    while (1)
    {
      if (v20 >= (unint64_t)*(unsigned int *)(a2 + 836))
      {
LABEL_83:
        __break(0xC471u);
        JUMPOUT(0x198F2A17CLL);
      }
      v47 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 824) + v20);
      if ((unint64_t)(v47 - 192) <= 0x33)
      {
        if (((1 << (v47 + 64)) & 0xFFC19C001C000) != 0)
        {
          v47 = 254;
        }
        else if (v47 == 192)
        {
          __break(0xC471u);
          JUMPOUT(0x198F2A28CLL);
        }
      }
      v8 = v8 & 0xFFFFFFFFFFFF0000 | (v47 << 8) | 3;
      if ((JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, v20, v8, a4, a5, a6, a7, a8) & 6) == 2)
        JSC::Wasm::BBQJITImpl::BBQJIT::flushValue(a2, (JSC::ARM64LogicalImmediate *)v20, v8, a4, a5, a6, a7, a8);
      v48 = v20 + 1;
      v49 = *((_QWORD *)a1 + 18);
      if ((v49 & 0x8000000000000000) != 0)
      {
        v60 = __clz(__rbit64(v49 >> v48)) + v48;
        if (v60 >= 0x3F)
          v20 = 63;
        else
          v20 = v60;
        goto LABEL_51;
      }
      v50 = 2 * v49;
      v20 = *(_QWORD *)(2 * v49);
      v51 = v20 + 63;
      v52 = v48 >> 6;
      if (v48 >> 6 < (unint64_t)(v20 + 63) >> 6)
      {
        v53 = *(_QWORD *)(v50 + 8 * v52 + 8);
        if (!v53 || (v54 = __clz(__rbit64(v53 >> v48)) + (v48 & 0x3F), v54 >= 0x40))
        {
          if (v52 + 1 == v51 >> 6)
            goto LABEL_51;
          v58 = v50 + 16;
          while (1)
          {
            v59 = *(_QWORD *)(v58 + 8 * v52);
            if (v59)
            {
              v54 = __clz(__rbit64(v59));
              if (v54 <= 0x3F)
                break;
            }
            if ((v51 >> 6) - 1 == ++v52)
              goto LABEL_51;
          }
          ++v52;
        }
        v20 = v54 + (v52 << 6);
      }
LABEL_51:
      if (v20 == v16)
        goto LABEL_9;
    }
  }
  v16 = *(_QWORD *)(2 * v15);
  if ((unint64_t)(v16 + 63) < 0x40)
    goto LABEL_9;
  v17 = *(_QWORD *)(2 * v15 + 8);
  if (v17)
  {
    v18 = __clz(__rbit64(v17));
    if (v18 < 0x40)
    {
      v19 = 0;
LABEL_7:
      v20 = v18 + (v19 << 6);
      goto LABEL_8;
    }
  }
  if ((unint64_t)(v16 + 63) >> 6 != 1)
  {
    v55 = 0;
    while (1)
    {
      v56 = *(_QWORD *)(2 * v15 + 0x10 + 8 * v55);
      if (v56)
      {
        v18 = __clz(__rbit64(v56));
        if (v18 <= 0x3F)
          break;
      }
      if (((unint64_t)(v16 + 63) >> 6) - 1 == ++v55)
        goto LABEL_9;
    }
    v19 = v55 + 1;
    goto LABEL_7;
  }
LABEL_9:
  if (a1[2] == 5)
  {
    v61 = a1[34];
    if ((v9 & 1) != 0)
      JSC::Wasm::BBQJITImpl::BBQJIT::consume(a2, v61, 65026, a4, a5, a6, a7, a8);
    else
      JSC::Wasm::BBQJITImpl::BBQJIT::flushValue(a2, (JSC::ARM64LogicalImmediate *)v61, 0xFE02uLL, a4, a5, a6, a7, a8);
  }
  LODWORD(v21) = *(_DWORD *)(a4 + 12);
  if ((_DWORD)v21)
  {
    v24 = 0;
    v25 = 0;
    v26 = a3;
    while (1)
    {
      v27 = *(_QWORD *)a4;
      v28 = *(_QWORD *)a4 + v24;
      v29 = v26 + v25 - v21;
      v30 = *(unsigned __int8 *)(v28 + 24);
      if (v30 != 1)
        goto LABEL_19;
      if (v29 < 0 || (v9 & 1) == 0)
        break;
LABEL_22:
      ++v25;
      v21 = *(unsigned int *)(a4 + 12);
      v24 += 32;
      if (v25 >= v21)
        return;
    }
    v31 = v27 + v24;
    v32 = *(_QWORD *)(v27 + v24 + 24);
    v33 = v32 >> 8;
    v34 = a1[34];
    if (a1[2] == 5)
      ++v34;
    v63 = *(_QWORD *)(v27 + v24 + 24);
    v64 = *(JSC::ARM64LogicalImmediate **)(v28 + 16);
    if (BYTE1(v32) - 192 <= 0x33)
    {
      if (((1 << (BYTE1(v32) + 64)) & 0xFFC19C001C000) != 0)
      {
        LOWORD(v33) = 254;
      }
      else if (BYTE1(v32) == 192)
      {
        goto LABEL_83;
      }
    }
    v35 = v62 & 0xFFFFFFFF00000000 | (v25 + v34);
    *(_QWORD *)(v28 + 16) = v35;
    *(_WORD *)(v31 + 24) = ((_WORD)v33 << 8) | 2;
    v62 = v35;
    v36 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, v35, *(_QWORD *)(v31 + 24), a4, a5, a6, a7, a8);
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a2, v64, v63, v36, v37, v38, v39, v40);
    v30 = *(unsigned __int8 *)(v28 + 24);
LABEL_19:
    if (v30 == 2)
    {
      if ((v9 & 1) != 0)
      {
        if (v29 < 0)
        {
          v41 = *(_QWORD *)(v28 + 16);
          v42 = *(_QWORD *)(v27 + v24 + 24);
          v43 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, v41, v42, a4, a5, a6, a7, a8);
          if (v42 == 2)
          {
            v44 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v41 + 16;
            if (*(_DWORD *)(a2 + 1280) < v44)
              *(_DWORD *)(a2 + 1280) = v44;
            v45 = (-8 * v44) ^ v43;
            if ((v43 & 7) != 1 || v45 >= 8)
              JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v41, v42, v43);
          }
        }
      }
      else
      {
        JSC::Wasm::BBQJITImpl::BBQJIT::flushValue(a2, *(JSC::ARM64LogicalImmediate **)(v28 + 16), *(_QWORD *)(v27 + v24 + 24), a4, a5, a6, a7, a8);
      }
    }
    goto LABEL_22;
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addCatchToUnreachable(_BYTE *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  __int128 *v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  unsigned int v45;
  _BYTE v46[28];
  _OWORD v47[9];
  int v48;
  int v49;
  int v50;

  *(_BYTE *)(a2 + 1293) = 1;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::ControlData((uint64_t)v47, a2, 5, *(_QWORD *)a5, *(_DWORD *)(a5 + 136), 0);
  HIDWORD(v47[0]) = 0;
  if (*(_DWORD *)(a5 + 8) == 4)
  {
    v18 = *(_DWORD *)(a2 + 1300);
    if (v18 == -1)
    {
      __break(0xC471u);
      return;
    }
    v19 = v18 + 1;
    *(_DWORD *)(a2 + 1300) = v19;
    *(_DWORD *)(a5 + 156) = v19;
  }
  else
  {
    v19 = *(_DWORD *)(a5 + 156);
  }
  v20 = *(_DWORD *)(a5 + 160);
  v48 = *(_DWORD *)(a5 + 152);
  v49 = v19;
  v50 = v20;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::delegateJumpsTo(a5, (uint64_t)v47, v12, v13, v14, v15, v16, v17);
  if (HIBYTE(word_1ECF4C700))
  {
    *(_DWORD *)a2 -= 2;
    *(_QWORD *)v46 = "Catch";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a2)
    {
      v45 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v45;
      }
      while (v45 < *(_DWORD *)a2);
    }
    WTF::dataLog<char const*,char [2]>((const char **)v46, " ");
    WTF::dataLog<char [16]>("\n");
    if (HIBYTE(word_1ECF4C700))
      *(_DWORD *)a2 += 2;
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::emitCatchImpl(a2, (uint64_t)v47, a4, a6, v21, v22, v23, v24);
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::operator=(a5, v47, v25, v26, v27, v28, v29, v30);
  v38 = (_QWORD *)(a2 + 2960);
  v39 = *(_DWORD *)(a2 + 1296);
  *(_DWORD *)v46 = 0;
  *(_QWORD *)&v46[4] = *(_QWORD *)(a5 + 152);
  *(_DWORD *)&v46[12] = 0;
  *(_DWORD *)&v46[16] = 0;
  *(_DWORD *)&v46[20] = v39;
  *(_DWORD *)&v46[24] = a3;
  v40 = *(unsigned int *)(a2 + 2972);
  if ((_DWORD)v40 == *(_DWORD *)(a2 + 2968))
  {
    v41 = (__int128 *)WTF::Vector<JSC::Wasm::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v40 + 1, (unint64_t)v46);
    v42 = (_OWORD *)(*(_QWORD *)(a2 + 2960) + 28 * *(unsigned int *)(a2 + 2972));
    v43 = *v41;
    v44 = *(__int128 *)((char *)v41 + 12);
  }
  else
  {
    v42 = (_OWORD *)(*v38 + 28 * v40);
    v43 = *(_OWORD *)v46;
    v44 = *(_OWORD *)&v46[12];
  }
  *(_OWORD *)((char *)v42 + 12) = v44;
  *v42 = v43;
  ++*(_DWORD *)(a2 + 2972);
  *a1 = 0;
  a1[8] = 0;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::~ControlData((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)v47, v31, v32, v33, v34, v35, v36, v37);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addCatchAllToUnreachable(JSC::Wasm::BBQJITImpl::BBQJIT *this, JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  __int128 *v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  unsigned int v41;
  _BYTE v42[28];
  _OWORD v43[9];
  int v44;
  int v45;
  int v46;

  *((_BYTE *)a2 + 1293) = 1;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::ControlData((uint64_t)v43, (uint64_t)a2, 5, *(_QWORD *)a3, *(_DWORD *)(a3 + 136), 0);
  HIDWORD(v43[0]) = 1;
  if (*(_DWORD *)(a3 + 8) == 4)
  {
    v12 = *((_DWORD *)a2 + 325);
    if (v12 == -1)
    {
      __break(0xC471u);
      return;
    }
    v13 = v12 + 1;
    *((_DWORD *)a2 + 325) = v13;
    *(_DWORD *)(a3 + 156) = v13;
  }
  else
  {
    v13 = *(_DWORD *)(a3 + 156);
  }
  v14 = *(_DWORD *)(a3 + 160);
  v44 = *(_DWORD *)(a3 + 152);
  v45 = v13;
  v46 = v14;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::delegateJumpsTo(a3, (uint64_t)v43, v6, v7, v8, v9, v10, v11);
  if (HIBYTE(word_1ECF4C700))
  {
    *(_DWORD *)a2 -= 2;
    *(_QWORD *)v42 = "CatchAll";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a2)
    {
      v41 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v41;
      }
      while (v41 < *(_DWORD *)a2);
    }
    WTF::dataLog<char const*,char [2]>((const char **)v42, " ");
    WTF::dataLog<char [16]>("\n");
    if (HIBYTE(word_1ECF4C700))
      *(_DWORD *)a2 += 2;
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::emitCatchAllImpl(a2, (JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)v43, v15, v16, v17, v18, v19, v20);
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::operator=(a3, v43, v21, v22, v23, v24, v25, v26);
  v34 = (_QWORD *)((char *)a2 + 2960);
  v35 = *((_DWORD *)a2 + 324);
  *(_DWORD *)v42 = 1;
  *(_QWORD *)&v42[4] = *(_QWORD *)(a3 + 152);
  *(_DWORD *)&v42[12] = 0;
  *(_DWORD *)&v42[16] = 0;
  *(_DWORD *)&v42[20] = v35;
  *(_DWORD *)&v42[24] = 0;
  v36 = *((unsigned int *)a2 + 743);
  if ((_DWORD)v36 == *((_DWORD *)a2 + 742))
  {
    v37 = (__int128 *)WTF::Vector<JSC::Wasm::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v36 + 1, (unint64_t)v42);
    v38 = (_OWORD *)(*((_QWORD *)a2 + 370) + 28 * *((unsigned int *)a2 + 743));
    v39 = *v37;
    v40 = *(__int128 *)((char *)v37 + 12);
  }
  else
  {
    v38 = (_OWORD *)(*v34 + 28 * v36);
    v39 = *(_OWORD *)v42;
    v40 = *(_OWORD *)&v42[12];
  }
  *(_OWORD *)((char *)v38 + 12) = v40;
  *v38 = v39;
  ++*((_DWORD *)a2 + 743);
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::~ControlData((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)v43, v27, v28, v29, v30, v31, v32, v33);
}

_OWORD *JSC::Wasm::BBQJITImpl::BBQJIT::addDelegateToUnreachable(_OWORD *this, JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *a2, JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *a3, int a4, _DWORD *a5)
{
  _BYTE *v6;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[28];

  v6 = this;
  if ((_DWORD)a3 != 4)
    a4 = 0;
  v8 = *((_DWORD *)a2 + 325);
  if (a5[2] == 4)
  {
    if (v8 == -1)
    {
      __break(0xC471u);
      return this;
    }
    *((_DWORD *)a2 + 325) = ++v8;
    a5[39] = v8;
  }
  this = (_OWORD *)((char *)a2 + 2960);
  v9 = a5[38];
  v10 = *((_DWORD *)a2 + 324);
  *(_DWORD *)v15 = 2;
  *(_DWORD *)&v15[4] = v9;
  *(_DWORD *)&v15[8] = v8;
  *(_QWORD *)&v15[12] = 0;
  *(_DWORD *)&v15[20] = v10;
  *(_DWORD *)&v15[24] = a4;
  v11 = *((unsigned int *)a2 + 743);
  if ((_DWORD)v11 == *((_DWORD *)a2 + 742))
  {
    this = (_OWORD *)WTF::Vector<JSC::Wasm::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v11 + 1, (unint64_t)v15);
    v12 = (_OWORD *)(*((_QWORD *)a2 + 370) + 28 * *((unsigned int *)a2 + 743));
    v13 = *this;
    v14 = *(_OWORD *)((char *)this + 12);
  }
  else
  {
    v12 = (_OWORD *)(*(_QWORD *)this + 28 * v11);
    v13 = *(_OWORD *)v15;
    v14 = *(_OWORD *)&v15[12];
  }
  *(_OWORD *)((char *)v12 + 12) = v14;
  *v12 = v13;
  ++*((_DWORD *)a2 + 743);
  *v6 = 0;
  v6[8] = 0;
  return this;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::prepareForExceptions(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(_DWORD *)(this + 1300);
  if (v8 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)(this + 1300) = v8 + 1;
    if (!*(_BYTE *)(this + 73) || *(_BYTE *)(this + 72))
    {
      v9 = this;
      JSC::MacroAssemblerARM64::store32(*(_QWORD *)(this + 8), v8 + 1, 0x240000001DLL, a4, a5, a6, a7, a8);
      return JSC::Wasm::BBQJITImpl::BBQJIT::flushRegistersForException(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  return this;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::flushRegistersForException(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  char v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t i;
  unsigned int v19;
  int v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;

  v8 = this;
  v9 = *(unsigned int *)(this + 340);
  if ((_DWORD)v9)
  {
    v10 = *(unsigned __int8 **)(this + 328);
    v11 = 4 * v9;
    do
    {
      v12 = *(unsigned __int16 *)(v10 + 1) | (v10[3] << 16);
      v13 = *(_WORD *)(v10 + 1) & 7;
      if (v13)
      {
        if (v13 == 2)
        {
          if (*v10 == 192)
          {
            __break(0xC471u);
            JUMPOUT(0x198F2A9E0);
          }
        }
        else if (v13 != 3)
        {
          v23 = v11;
          v25 = v10;
          if (v13 != 1)
          {
LABEL_39:
            __break(0xC471u);
            JUMPOUT(0x198F2A9A0);
          }
          v14 = *v10;
          if (v14 == 192)
          {
            __break(0xC471u);
            JUMPOUT(0x198F2AA20);
          }
          if (((0x3FF0670007uLL >> (v14 + 50)) & 1) != 0)
            v15 = -2;
          else
            v15 = v14;
          if ((v14 + 50) < 0x26u)
            LOBYTE(v14) = v15;
          this = JSC::Wasm::BBQJITImpl::BBQJIT::flushValue(v8, (JSC::ARM64LogicalImmediate *)(v12 >> 3), ((unint64_t)v14 << 8) | 3, a4, a5, a6, a7, a8);
          v11 = v23;
          v10 = v25;
        }
      }
      v10 += 4;
      v11 -= 4;
    }
    while (v11);
  }
  v16 = *(unsigned int *)(v8 + 484);
  if ((_DWORD)v16)
  {
    v17 = *(unsigned __int8 **)(v8 + 472);
    for (i = 4 * v16; i; i -= 4)
    {
      v19 = *(unsigned __int16 *)(v17 + 1) | (v17[3] << 16);
      v20 = *(_WORD *)(v17 + 1) & 7;
      if (v20)
      {
        if (v20 == 2)
        {
          if (*v17 == 192)
          {
            __break(0xC471u);
            JUMPOUT(0x198F2AA00);
          }
        }
        else if (v20 != 3)
        {
          v24 = i;
          v26 = v17;
          if (v20 != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198F2A9C0);
          }
          v21 = *v17;
          if (v21 == 192)
            goto LABEL_39;
          if (((0x3FF0670007uLL >> (v21 + 50)) & 1) != 0)
            v22 = -2;
          else
            v22 = v21;
          if ((v21 + 50) < 0x26u)
            LOBYTE(v21) = v22;
          this = JSC::Wasm::BBQJITImpl::BBQJIT::flushValue(v8, (JSC::ARM64LogicalImmediate *)(v19 >> 3), ((unint64_t)v21 << 8) | 3, a4, a5, a6, a7, a8);
          i = v24;
          v17 = v26;
        }
      }
      v17 += 4;
    }
  }
  return this;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addReturn(_BYTE *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  WTF *v25;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  WTF *v43;
  WTF *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  WTF *v75;
  uint64_t v76;
  _BYTE v77[32];
  WTF *v78;
  uint64_t v79;
  _BYTE v80[128];
  char v81[32];
  WTF *v82;
  int v83;
  WTF *v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  const char *v88[2];

  v8 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v8 != -1)
  {
    v78 = (WTF *)&v75;
    *(_QWORD *)v81 = &v78;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, v81, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, *(unsigned __int8 ***)a3, 1, v81);
  if (v86)
  {
    v16 = 0;
    v17 = 0;
    v18 = *(_DWORD *)(a4 + 12);
    v78 = (WTF *)v80;
    v79 = 8;
    v75 = (WTF *)v77;
    v76 = 8;
    v19 = v18 - v86;
    while (1)
    {
      v20 = (v19 + v17);
      v21 = *(_QWORD *)a4;
      if (HIDWORD(v79) == (_DWORD)v79)
      {
        WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Value,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression const&>((uint64_t)&v78, (_OWORD *)(v21 + 32 * v20), v10, v11, v12, v13, v14, v15);
      }
      else
      {
        *((_OWORD *)v78 + HIDWORD(v79)) = *(_OWORD *)(v21 + 32 * v20 + 16);
        ++HIDWORD(v79);
      }
      if (v17 >= v86)
      {
        __break(0xC471u);
        JUMPOUT(0x198F2B16CLL);
      }
      v22 = *((unsigned __int8 *)v84 + v16 + 8);
      if (*((_BYTE *)v84 + v16 + 8))
      {
        if (v22 == 3)
        {
          v67 = 5;
LABEL_91:
          v24 = v67 | (8 * *(_QWORD *)((char *)v84 + v16));
          goto LABEL_11;
        }
        if (v22 != 1)
        {
          if (v22 != 2)
          {
LABEL_112:
            __break(0xC471u);
            JUMPOUT(0x198F2B144);
          }
          v67 = 1;
          goto LABEL_91;
        }
        v23 = 3;
      }
      else
      {
        v23 = 2;
      }
      v24 = v23 & 0xFFFF00FF | (*(_QWORD *)((char *)v84 + v16) << 8);
LABEL_11:
      LODWORD(v88[0]) = v24;
      if (HIDWORD(v76) == (_DWORD)v76)
      {
        WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::BBQJITImpl::BBQJIT::Location>((uint64_t)&v75, (unint64_t)v88, v10, v11, v12, v13, v14, v15);
      }
      else
      {
        *((_DWORD *)v75 + HIDWORD(v76)) = v24;
        ++HIDWORD(v76);
      }
      ++v17;
      v16 += 24;
      if (v17 >= v86)
      {
        JSC::Wasm::BBQJITImpl::BBQJIT::emitShuffle<8ul,WTF::CrashOnOverflow>(a2, (uint64_t)&v78, (unsigned int **)&v75, v11, v12, v13, v14, v15);
        if (HIBYTE(word_1ECF4C700))
        {
          v88[0] = "Return";
          WTF::dataLog<char [16]>("BBQ\t");
          if (*(_DWORD *)a2)
          {
            v74 = 0;
            do
            {
              WTF::dataLog<char [16]>(" ");
              ++v74;
            }
            while (v74 < *(_DWORD *)a2);
          }
          WTF::dataLog<char const*,char [2]>(v88, " ");
          JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<8ul,WTF::CrashOnOverflow>((int *)v75, HIDWORD(v76));
        }
        v25 = v75;
        if (v77 != (_BYTE *)v75 && v75 != 0)
        {
          v75 = 0;
          LODWORD(v76) = 0;
          WTF::fastFree((unint64_t)v25, v9, v10, v11, v12, v13, v14, v15);
        }
        v27 = v78;
        if (v80 != (_BYTE *)v78 && v78)
        {
          v78 = 0;
          LODWORD(v79) = 0;
          WTF::fastFree((unint64_t)v27, v9, v10, v11, v12, v13, v14, v15);
        }
        goto LABEL_21;
      }
    }
  }
  if (HIBYTE(word_1ECF4C700))
  {
    v78 = (WTF *)"Return";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a2)
    {
      v60 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v60;
      }
      while (v60 < *(_DWORD *)a2);
    }
    WTF::dataLog<char const*,char [2]>((const char **)&v78, " ");
    WTF::dataLog<char [16]>("\n");
  }
LABEL_21:
  v28 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v28)
  {
    v45 = 32 * v28;
    v46 = (uint64_t *)(*(_QWORD *)a4 + 24);
    do
    {
      a4 = *(v46 - 1);
      v47 = *v46;
      v48 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, a4, *v46, v11, v12, v13, v14, v15);
      if (v47 == 2)
      {
        v49 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
        if (*(_DWORD *)(a2 + 1280) < v49)
          *(_DWORD *)(a2 + 1280) = v49;
        v50 = (-8 * v49) ^ v48;
        if ((v48 & 7) != 1 || v50 >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, a4, v47, v48);
      }
      v46 += 4;
      v45 -= 32;
    }
    while (v45);
  }
  v29 = *(_QWORD *)(a2 + 88);
  v30 = *(_DWORD *)(v29 + 596);
  if (v30)
    a3 = *(_QWORD *)(v29 + 584) + 1232 * v30 - 168;
  v31 = *(_QWORD *)(a3 + 144);
  if ((v31 & 0x8000000000000000) != 0)
  {
    v65 = __clz(__rbit64(v31));
    v32 = 63;
    if (v65 >= 0x3F)
      v36 = 63;
    else
      v36 = v65;
LABEL_30:
    if (v36 == v32)
      goto LABEL_31;
    while (1)
    {
      if (v36 >= (unint64_t)*(unsigned int *)(a2 + 836))
        goto LABEL_112;
      v52 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 824) + v36);
      if ((unint64_t)(v52 - 192) <= 0x33)
      {
        if (((1 << (v52 + 64)) & 0xFFC19C001C000) != 0)
        {
          v52 = 254;
        }
        else if (v52 == 192)
        {
          __break(0xC471u);
          JUMPOUT(0x198F2B164);
        }
      }
      a4 = a4 & 0xFFFFFFFFFFFF0000 | (v52 << 8) | 3;
      if ((JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, v36, a4, v11, v12, v13, v14, v15) & 6) == 2)
      {
        v68 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, v36, a4, v11, v12, v13, v14, v15);
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v36, a4, v68);
        v69 = JSC::Wasm::BBQJITImpl::BBQJIT::canonicalSlot(a2, v36, a4);
        JSC::Wasm::BBQJITImpl::BBQJIT::bind(a2, v36, a4, v69, v70, v71, v72, v73);
      }
      v53 = v36 + 1;
      v54 = *(_QWORD *)(a3 + 144);
      if ((v54 & 0x8000000000000000) != 0)
      {
        v66 = __clz(__rbit64(v54 >> v53)) + v53;
        if (v66 >= 0x3F)
          v36 = 63;
        else
          v36 = v66;
        goto LABEL_64;
      }
      v55 = 2 * v54;
      v36 = *(_QWORD *)(2 * v54);
      v56 = v36 + 63;
      v57 = v53 >> 6;
      if (v53 >> 6 < (unint64_t)(v36 + 63) >> 6)
      {
        v58 = *(_QWORD *)(v55 + 8 * v57 + 8);
        if (!v58 || (v59 = __clz(__rbit64(v58 >> v53)) + (v53 & 0x3F), v59 >= 0x40))
        {
          if (v57 + 1 == v56 >> 6)
            goto LABEL_64;
          v63 = v55 + 16;
          while (1)
          {
            v64 = *(_QWORD *)(v63 + 8 * v57);
            if (v64)
            {
              v59 = __clz(__rbit64(v64));
              if (v59 <= 0x3F)
                break;
            }
            if ((v56 >> 6) - 1 == ++v57)
              goto LABEL_64;
          }
          ++v57;
        }
        v36 = v59 + (v57 << 6);
      }
LABEL_64:
      if (v36 == v32)
        goto LABEL_31;
    }
  }
  v32 = *(_QWORD *)(2 * v31);
  if ((unint64_t)(v32 + 63) < 0x40)
    goto LABEL_31;
  v33 = *(_QWORD *)(2 * v31 + 8);
  if (v33)
  {
    v34 = __clz(__rbit64(v33));
    if (v34 < 0x40)
    {
      v35 = 0;
LABEL_29:
      v36 = v34 + (v35 << 6);
      goto LABEL_30;
    }
  }
  if ((unint64_t)(v32 + 63) >> 6 != 1)
  {
    v61 = 0;
    while (1)
    {
      v62 = *(_QWORD *)(2 * v31 + 0x10 + 8 * v61);
      if (v62)
      {
        v34 = __clz(__rbit64(v62));
        if (v34 <= 0x3F)
          break;
      }
      if (((unint64_t)(v32 + 63) >> 6) - 1 == ++v61)
        goto LABEL_31;
    }
    v35 = v61 + 1;
    goto LABEL_29;
  }
LABEL_31:
  v37 = *(_DWORD **)(a2 + 8);
  v38 = v37[50];
  if (v38 + 4 > v37[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v37 + 14), (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v38 = v37[50];
  }
  *(_DWORD *)(*((_QWORD *)v37 + 7) + v38) = -1862270017;
  v39 = v37[50];
  v40 = v39 + 4;
  v37[50] = v39 + 4;
  if ((v39 + 8) > v37[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v37 + 14), (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v40 = v37[50];
  }
  *(_DWORD *)(*((_QWORD *)v37 + 7) + v40) = -1463714819;
  v37[50] += 4;
  v41 = *(_DWORD **)(a2 + 8);
  v42 = v41[50];
  if (v42 + 4 > v41[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v42 = v41[50];
  }
  *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = -698416192;
  v41[50] += 4;
  *a1 = 0;
  a1[8] = 0;
  v43 = v84;
  if (&v87 != (uint64_t *)v84 && v84)
  {
    v84 = 0;
    v85 = 0;
    WTF::fastFree((unint64_t)v43, v9, v10, v11, v12, v13, v14, v15);
  }
  v44 = v82;
  if (v82)
  {
    v82 = 0;
    v83 = 0;
    WTF::fastFree((unint64_t)v44, v9, v10, v11, v12, v13, v14, v15);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitShuffle<8ul,WTF::CrashOnOverflow>(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  JSC::ARM64LogicalImmediate *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  int v26;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  WTF *v37;
  int v39;
  WTF *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;

  v11 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v11 == 1)
  {
    if (*((_DWORD *)a3 + 3))
    {
      v12 = **(JSC::ARM64LogicalImmediate ***)a2;
      v13 = *(_QWORD *)(*(_QWORD *)a2 + 8);
      v14 = **a3;
      if (v13 == 1)
      {
        if ((v14 & 7) > 5 || ((1 << (v14 & 7)) & 0x32) == 0)
          JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v12, v13, v14, a5, a6, a7, a8);
        else
          JSC::Wasm::BBQJITImpl::BBQJIT::emitStoreConst(a1, v12, v13, v14, a5, a6, a7, a8);
      }
      else
      {
        v15 = v13 >> 8;
        v16 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v12, v13, a4, a5, a6, a7, a8);
        v21 = v14 & 7;
        if ((v16 & 6) == 2)
        {
          v22 = v21 > 5;
          v23 = (1 << v21) & 0x32;
          if (v22 || v23 == 0)
            JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveRegister(a1, (char)v15, v16, v14);
          else
            JSC::Wasm::BBQJITImpl::BBQJIT::emitStore(a1, (char)v15, v16, v14, v17, v18, v19, v20);
        }
        else
        {
          v22 = v21 > 5;
          v26 = (1 << v21) & 0x32;
          if (v22 || v26 == 0)
            JSC::Wasm::BBQJITImpl::BBQJIT::emitLoad(a1, (char)v15, v16, v14, v17, v18, v19, v20);
          else
            JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveMemory(a1, (char)v15, v16, v14);
        }
      }
      return;
    }
    __break(0xC471u);
LABEL_37:
    JUMPOUT(0x198F2B390);
  }
  v39 = 0;
  WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::ShuffleStatus,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v40, v11, &v39);
  v35 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v35)
  {
    v36 = 0;
    while (v36 < v42)
    {
      if (!*((_DWORD *)v40 + v36))
      {
        JSC::Wasm::BBQJITImpl::BBQJIT::emitShuffleMove<8ul,WTF::CrashOnOverflow>(a1, a2, (uint64_t)a3, (uint64_t)&v40, v36, v32, v33, v34);
        v35 = *(unsigned int *)(a2 + 12);
      }
      if (++v36 >= v35)
        goto LABEL_29;
    }
    __break(0xC471u);
    goto LABEL_37;
  }
LABEL_29:
  v37 = v40;
  if (&v43 != (uint64_t *)v40 && v40 != 0)
  {
    v40 = 0;
    v41 = 0;
    WTF::fastFree((unint64_t)v37, v28, v29, v30, v31, v32, v33, v34);
  }
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::unbind(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  int v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  v9 = a4;
  v5 = a4 & 7;
  switch(v5)
  {
    case 2:
      if ((a4 & 0x4000) == 0)
      {
        *(_QWORD *)(result + 616) |= 1 << SBYTE1(a4);
        v6 = SBYTE1(a4);
        if (SBYTE1(a4) < (unint64_t)*(unsigned int *)(result + 340))
        {
LABEL_4:
          v7 = (_QWORD *)(result + 328);
LABEL_5:
          *(_DWORD *)(*v7 + 4 * v6) = 0;
          break;
        }
LABEL_34:
        __break(0xC471u);
        JUMPOUT(0x198F2B548);
      }
      goto LABEL_27;
    case 3:
      v8 = (BYTE1(a4) + 32) & 0x7F;
      if (v8 < 0x40)
      {
        v4 = 1 << v8;
        *(_QWORD *)(result + 632) |= 1 << v8;
        if (((BYTE1(a4) + 32) & 0x60) != 0x20)
        {
LABEL_19:
          v6 = SBYTE1(a4);
          if (SBYTE1(a4) >= (unint64_t)*(unsigned int *)(result + 484))
          {
            __break(0xC471u);
            JUMPOUT(0x198F2B568);
          }
          v7 = (_QWORD *)(result + 472);
          goto LABEL_5;
        }
LABEL_28:
        *(_QWORD *)(result + 640) |= v4;
        goto LABEL_19;
      }
LABEL_27:
      __break(1u);
      goto LABEL_28;
    case 6:
      if ((a4 & 0x400000) == 0)
      {
        v4 = *(_QWORD *)(result + 616) | (1 << SBYTE2(a4));
        *(_QWORD *)(result + 616) = v4;
        if ((a4 & 0x4000) == 0)
        {
          *(_QWORD *)(result + 616) = v4 | (1 << SBYTE1(a4));
          if (SBYTE2(a4) >= (unint64_t)*(unsigned int *)(result + 340))
            goto LABEL_34;
          v4 = *(_QWORD *)(result + 328);
          *(_DWORD *)(v4 + 4 * SBYTE2(a4)) = 0;
          v6 = SBYTE1(a4);
          if (SBYTE1(a4) < (unint64_t)*(unsigned int *)(result + 340))
            goto LABEL_4;
          __break(0xC471u);
        }
      }
      goto LABEL_27;
  }
  if (a3 == 2)
  {
    if (*(_DWORD *)(result + 740) <= a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198F2B550);
    }
    *(_DWORD *)(*(_QWORD *)(result + 728) + 4 * a2) = 0;
  }
  else if (a3 == 3)
  {
    if (*(_DWORD *)(result + 788) <= a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198F2B558);
    }
    if (*(_DWORD *)(result + 692) <= a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198F2B560);
    }
    *(_DWORD *)(*(_QWORD *)(result + 680) + 4 * a2) = *(_DWORD *)(*(_QWORD *)(result + 776)
                                                                                + 4 * a2);
  }
  if ((_BYTE)word_1ECF4C700)
    return WTF::dataLog<char [19],JSC::Wasm::BBQJITImpl::BBQJIT::Value,char [7],JSC::Wasm::BBQJITImpl::BBQJIT::Location,char [2]>((uint64_t)v10, &v9);
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::canonicalSlot(uint64_t result, unsigned int a2, char a3)
{
  signed int v3;

  if (a3 == 3)
  {
    if (a2 >= (unint64_t)*(unsigned int *)(result + 788))
      __break(0xC471u);
    else
      return *(unsigned int *)(*(_QWORD *)(result + 776) + 4 * a2);
  }
  else
  {
    v3 = ((*(_DWORD *)(result + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(result + 1280) < v3)
      *(_DWORD *)(result + 1280) = v3;
    return (1 - 8 * v3);
  }
  return result;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addBranch(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int i;
  unsigned int v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  unint64_t *v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x8_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int j;
  unsigned int v80;
  int v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  _DWORD *v86;
  unint64_t *v87;
  int *v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99[3];
  int v100;
  uint64_t v101;
  unint64_t v102;
  _BYTE v103[12];

  v101 = a3;
  v102 = a4;
  v15 = a4;
  if (a4 == 1)
  {
    if (!(_DWORD)a3)
      goto LABEL_44;
    v100 = 2050;
  }
  else
  {
    v100 = 2050;
    if ((_BYTE)a4)
    {
      if (a4 == 1)
      {
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)a3, a4, 0x802uLL, a5, a6, a7, a8);
      }
      else
      {
        v52 = a4 >> 8;
        v53 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a3, a4, a4, a5, a6, a7, a8);
        if ((v53 & 6) == 2)
          JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveRegister(a1, (char)v52, v53, 0x802u);
        else
          JSC::Wasm::BBQJITImpl::BBQJIT::emitLoad(a1, (char)v52, v53, 0x802uLL, v54, v55, v56, v57);
      }
    }
  }
  v16 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a3, a4, a4, a5, a6, a7, a8);
  if (a4 == 2)
  {
    v20 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a3 + 16;
    if (*(_DWORD *)(a1 + 1280) < v20)
      *(_DWORD *)(a1 + 1280) = v20;
    if ((v16 & 7) != 1 || ((-8 * v20) ^ v16) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a3, a4, v16);
  }
  if (v15)
  {
    if (!HIBYTE(word_1ECF4C700))
      goto LABEL_28;
    *(_QWORD *)v103 = "Branch";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v98 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v98;
      }
      while (v98 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>((const char **)v103, " ");
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<>((uint64_t)&v101, &v100);
  }
  else
  {
    if (!HIBYTE(word_1ECF4C700))
      goto LABEL_11;
    *(_QWORD *)v103 = "Branch";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v97 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v97;
      }
      while (v97 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>((const char **)v103, " ");
    WTF::dataLog<char [16]>("\n");
  }
  v15 = v102;
LABEL_28:
  if (v15 == 1)
  {
    v21 = 0;
    goto LABEL_12;
  }
  if (!v15)
  {
LABEL_11:
    v21 = 1;
LABEL_12:
    v22 = *(_QWORD *)(a1 + 88);
    v23 = *(_DWORD *)(v22 + 596);
    if (v23)
    {
      v24 = (_DWORD *)(*(_QWORD *)(v22 + 584) + 1232 * v23 - 168);
      if (*(_DWORD *)(a2 + 8) == 2)
        v25 = a2 + 16;
      else
        v25 = a2 + 40;
      JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::flushAtBlockBoundary<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>(v24, a1, *(_DWORD *)(v25 + 12), a5, v21, v17, v18, v19);
      JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::addExit<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,2ul>(a1, v25, a5, v26, v27, v28, v29, v30);
      JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::finalizeBlock<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>((uint64_t)v24, a1, *(_DWORD *)(v25 + 12), a5, 0, v31, v32, v33);
      v41 = *(_QWORD *)(a1 + 8);
      for (i = *(_DWORD *)(v41 + 200); i < *(_DWORD *)(v41 + 52); *(_DWORD *)(v41 + 200) = i)
      {
        if ((i + 4) > *(_DWORD *)(v41 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 56), v34, v35, v36, v37, v38, v39, v40);
          i = *(_DWORD *)(v41 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v41 + 56) + i) = -721215457;
        i = *(_DWORD *)(v41 + 200) + 4;
      }
      v43 = i;
      if ((i + 4) > *(_DWORD *)(v41 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 56), v34, v35, v36, v37, v38, v39, v40);
        v43 = *(_DWORD *)(v41 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v41 + 56) + v43) = 335544320;
      *(_DWORD *)(v41 + 200) += 4;
      v44 = *(unsigned __int8 *)(v41 + 328);
      *(_DWORD *)v103 = i;
      v45 = v44 == 0;
      v46 = 0xFF000F4500000000;
      if (v45)
        v46 = 0xFF000F4100000000;
      *(_QWORD *)&v103[4] = v46;
      if (i != -1)
      {
        v47 = (_QWORD *)(a2 + 64);
        v48 = *(unsigned int *)(a2 + 76);
        if ((_DWORD)v48 == *(_DWORD *)(a2 + 72))
        {
          v49 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, (void *)(v48 + 1), (unint64_t)v103, v36, v37, v38, v39, v40);
          v50 = (_DWORD *)(*(_QWORD *)(a2 + 64) + 12 * *(unsigned int *)(a2 + 76));
          *v50 = *(_DWORD *)v49;
          v51 = (unint64_t *)(v50 + 1);
          v46 = *(_QWORD *)(v49 + 4);
        }
        else
        {
          v88 = (int *)(*v47 + 12 * v48);
          *v88 = i;
          v51 = (unint64_t *)(v88 + 1);
        }
        *v51 = v46;
        ++*(_DWORD *)(a2 + 76);
      }
      goto LABEL_44;
    }
    __break(0xC471u);
LABEL_78:
    JUMPOUT(0x198F2BBC4);
  }
  v58 = *(_QWORD *)(a1 + 88);
  v59 = *(_DWORD *)(v58 + 596);
  if (!v59)
  {
    __break(0xC471u);
    JUMPOUT(0x198F2BBCCLL);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::flushAtBlockBoundary<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>((_DWORD *)(*(_QWORD *)(v58 + 584) + 1232 * v59 - 168), a1, 0, a5, 0, v17, v18, v19);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 0, 8, v60, v61, v62, v63, (uint64_t)v99, v64);
  if (!*(_DWORD *)(*(_QWORD *)(a1 + 88) + 596))
  {
    __break(0xC471u);
    JUMPOUT(0x198F2BBD4);
  }
  if (*(_DWORD *)(a2 + 8) == 2)
    v70 = a2 + 16;
  else
    v70 = a2 + 40;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::addExit<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,2ul>(a1, v70, a5, v65, v66, v67, v68, v69);
  v78 = *(_QWORD *)(a1 + 8);
  for (j = *(_DWORD *)(v78 + 200); j < *(_DWORD *)(v78 + 52); *(_DWORD *)(v78 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(v78 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v78 + 56), v71, v72, v73, v74, v75, v76, v77);
      j = *(_DWORD *)(v78 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v78 + 56) + j) = -721215457;
    j = *(_DWORD *)(v78 + 200) + 4;
  }
  v80 = j;
  if ((j + 4) > *(_DWORD *)(v78 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v78 + 56), v71, v72, v73, v74, v75, v76, v77);
    v80 = *(_DWORD *)(v78 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v78 + 56) + v80) = 335544320;
  *(_DWORD *)(v78 + 200) += 4;
  v81 = *(unsigned __int8 *)(v78 + 328);
  *(_DWORD *)v103 = j;
  v45 = v81 == 0;
  v82 = 0xFF000F4500000000;
  if (v45)
    v82 = 0xFF000F4100000000;
  *(_QWORD *)&v103[4] = v82;
  if (j != -1)
  {
    v83 = (_QWORD *)(a2 + 64);
    v84 = *(unsigned int *)(a2 + 76);
    if ((_DWORD)v84 == *(_DWORD *)(a2 + 72))
    {
      v85 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v83, (void *)(v84 + 1), (unint64_t)v103, v73, v74, v75, v76, v77);
      v86 = (_DWORD *)(*(_QWORD *)(a2 + 64) + 12 * *(unsigned int *)(a2 + 76));
      *v86 = *(_DWORD *)v85;
      v87 = (unint64_t *)(v86 + 1);
      v82 = *(_QWORD *)(v85 + 4);
    }
    else
    {
      v89 = (int *)(*v83 + 12 * v84);
      *v89 = j;
      v87 = (unint64_t *)(v89 + 1);
    }
    *v87 = v82;
    ++*(_DWORD *)(a2 + 76);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v99, *(_QWORD *)(a1 + 8), v72, v73, v74, v75, v76, v77);
  v93 = *(_QWORD *)(a1 + 88);
  v94 = *(_DWORD *)(v93 + 596);
  if (!v94)
  {
    __break(0xC471u);
    goto LABEL_78;
  }
  v95 = *(_QWORD *)(v93 + 584) + 1232 * v94 - 168;
  v96 = a2 + 40;
  if (*(_DWORD *)(a2 + 8) == 2)
    v96 = a2 + 16;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::finalizeBlock<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>(v95, a1, *(_DWORD *)(v96 + 12), a5, 1, v90, v91, v92);
LABEL_44:
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::addExit<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,2ul>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  _OWORD *v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  _BYTE v29[32];
  WTF *v30;
  uint64_t v31;
  _BYTE v32[136];

  v8 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v8)
  {
    v12 = 0;
    v13 = 0;
    v14 = *(_DWORD *)(a3 + 12);
    v30 = (WTF *)v32;
    v31 = 8;
    v27 = (WTF *)v29;
    v28 = 8;
    v15 = v14 - v8;
    do
    {
      v16 = (_OWORD *)(*(_QWORD *)a3 + 32 * (v15 + v13) + 16);
      if (HIDWORD(v31) == (_DWORD)v31)
      {
        WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Value,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::BBQJITImpl::BBQJIT::Value&>((uint64_t)&v30, (unint64_t)v16, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        *((_OWORD *)v30 + HIDWORD(v31)) = *v16;
        ++HIDWORD(v31);
      }
      if (v13 >= *(unsigned int *)(a2 + 12))
      {
        __break(0xC471u);
        return;
      }
      v17 = (_DWORD *)(*(_QWORD *)a2 + v12);
      if (HIDWORD(v28) == (_DWORD)v28)
      {
        WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::BBQJITImpl::BBQJIT::Location>((uint64_t)&v27, (unint64_t)v17, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        *((_DWORD *)v27 + HIDWORD(v28)) = *v17;
        ++HIDWORD(v28);
      }
      ++v13;
      v12 += 4;
    }
    while (4 * v8 != v12);
    JSC::Wasm::BBQJITImpl::BBQJIT::emitShuffle<8ul,WTF::CrashOnOverflow>(a1, (uint64_t)&v30, (unsigned int **)&v27, a4, a5, a6, a7, a8);
    v25 = v27;
    if (v29 != (_BYTE *)v27 && v27)
    {
      v27 = 0;
      LODWORD(v28) = 0;
      WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
    }
    v26 = v30;
    if (v32 != (_BYTE *)v30)
    {
      if (v30)
      {
        v30 = 0;
        LODWORD(v31) = 0;
        WTF::fastFree((unint64_t)v26, v18, v19, v20, v21, v22, v23, v24);
      }
    }
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::finalizeBlock<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  JSC::ARM64LogicalImmediate *v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (a3)
  {
    v13 = *(_DWORD *)(a4 + 12);
    v14 = a3;
    if ((a5 & 1) == 0)
    {
      v15 = v13 - a3;
      while (1)
      {
        v16 = v15;
        v17 = *(_QWORD *)a4 + 32 * v15;
        v18 = (uint64_t *)(v17 + 16);
        v19 = *(unsigned __int8 *)(v17 + 24);
        if (v19 == 2)
        {
          v20 = *v18;
          v21 = v18[1];
          v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *v18, v21, a4, a5, a6, a7, a8);
          if (v21 == 2)
          {
            v23 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v20 + 16;
            if (*(_DWORD *)(a2 + 1280) < v23)
              *(_DWORD *)(a2 + 1280) = v23;
            v24 = (-8 * v23) ^ v22;
            if ((v22 & 7) != 1 || v24 >= 8)
              JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v20, v21, v22);
          }
        }
        else if (v19 == 1)
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a4 + 32 * v16 + 25);
          v27 = *(_DWORD *)(a1 + 136);
          if (*(_DWORD *)(a1 + 8) == 5)
            ++v27;
          if ((v26 - 192) <= 0x33)
          {
            if (((1 << (v26 + 64)) & 0xFFC19C001C000) != 0)
            {
              LOWORD(v26) = 254;
            }
            else if (v26 == 192)
            {
              goto LABEL_37;
            }
          }
          v9 = v9 & 0xFFFFFFFF00000000 | (v16 + v27);
          *v18 = v9;
          *((_WORD *)v18 + 4) = ((_WORD)v26 << 8) | 2;
        }
        v15 = v16 + 1;
        if (!--v14)
          return;
      }
    }
    v28 = v13 - a3;
    do
    {
      v29 = *(_QWORD *)a4 + 32 * v28;
      v30 = v29 + 16;
      v31 = *(unsigned __int8 *)(v29 + 24);
      if (v31 == 2)
      {
        JSC::Wasm::BBQJITImpl::BBQJIT::flushValue(a2, *(JSC::ARM64LogicalImmediate **)v30, *(_QWORD *)(v30 + 8), a4, a5, a6, a7, a8);
      }
      else if (v31 == 1)
      {
        v32 = *(JSC::ARM64LogicalImmediate **)v30;
        v33 = *(_QWORD *)(v30 + 8);
        v34 = v33 >> 8;
        v35 = *(_DWORD *)(a1 + 136);
        if (*(_DWORD *)(a1 + 8) == 5)
          ++v35;
        if (BYTE1(v33) - 192 <= 0x33)
        {
          if (((1 << (BYTE1(v33) + 64)) & 0xFFC19C001C000) != 0)
          {
            LOWORD(v34) = 254;
          }
          else if (BYTE1(v33) == 192)
          {
LABEL_37:
            __break(0xC471u);
            JUMPOUT(0x198F2BFBCLL);
          }
        }
        v8 = v8 & 0xFFFFFFFF00000000 | (v28 + v35);
        *(_QWORD *)v30 = v8;
        *(_WORD *)(v30 + 8) = ((_WORD)v34 << 8) | 2;
        v36 = JSC::Wasm::BBQJITImpl::BBQJIT::canonicalSlot(a2, v8, *(_QWORD *)(v30 + 8));
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a2, v32, v33, v36, v37, v38, v39, v40);
      }
      ++v28;
      --v14;
    }
    while (v14);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSwitch(_BYTE *a1, uint64_t a2, JSC::ARM64LogicalImmediate *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _DWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t i;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  JSC::AssemblerBuffer *v126;
  int j;
  unsigned int v128;
  int v129;
  unint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  _DWORD *v134;
  unint64_t *v135;
  int *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  WTF *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  JSC::AssemblerBuffer *v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unsigned int v196[13];
  unsigned int v197;
  WTF *v198;
  uint64_t v199;
  _QWORD v200[16];
  JSC::ARM64LogicalImmediate *v201;
  unint64_t v202;
  int v203;
  unint64_t v204;

  v201 = a3;
  v202 = a4;
  if (HIBYTE(word_1ECF4C700))
  {
    v191 = "BrTable";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a2)
    {
      v189 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v189;
      }
      while (v189 < *(_DWORD *)a2);
    }
    WTF::dataLog<char const*,char [2]>(&v191, " ");
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<>(a2, (uint64_t *)&v201);
    v13 = v202;
    a3 = v201;
    a4 = v202;
  }
  else
  {
    v13 = a4;
  }
  if (v13 != 1)
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMove(a2, a3, a4, 2050, a5, a6, a7, a8);
    a3 = v201;
    a4 = v202;
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::consume(a2, (uint64_t)a3, a4, a4, a5, a6, a7, a8);
  if (v202 == 1)
  {
    v147 = v201;
    if ((v201 & 0x80000000) != 0 || (int)v201 >= *(_DWORD *)(a5 + 12))
    {
      v173 = *(_QWORD *)(a2 + 88);
      v174 = *(_DWORD *)(v173 + 596);
      if (!v174)
      {
        __break(0xC471u);
        JUMPOUT(0x198F2C67CLL);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::flushAndSingleExit<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>((_DWORD *)(*(_QWORD *)(v173 + 584) + 1232 * v174 - 168), a2, a6, a7, 0, v14, v15, v16);
      v175 = *(_QWORD *)(a2 + 8);
      JSC::ARM64Assembler::label((_DWORD *)(v175 + 32), v176, v177, v178, v179, v180, v181, v182, (int *)&v191);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v175 + 56), 335544320, v183, v184, v185, v186, v187, v188);
      v170 = (int)v191;
      if (*(_BYTE *)(v175 + 328))
        v171 = 0xFF000F4500000000;
      else
        v171 = 0xFF000F4100000000;
      v172 = a6;
    }
    else
    {
      v148 = *(_QWORD *)(a2 + 88);
      v149 = *(_DWORD *)(v148 + 596);
      if (!v149)
      {
        __break(0xC471u);
        JUMPOUT(0x198F2C684);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::flushAndSingleExit<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>((_DWORD *)(*(_QWORD *)(v148 + 584) + 1232 * v149 - 168), a2, *(_QWORD *)(*(_QWORD *)a5 + 8 * v201), a7, 0, v14, v15, v16);
      if (*(_DWORD *)(a5 + 12) <= v147)
        goto LABEL_86;
      v157 = *(_QWORD *)(*(_QWORD *)a5 + 8 * v147);
      v158 = *(_QWORD *)(a2 + 8);
      JSC::ARM64Assembler::label((_DWORD *)(v158 + 32), v150, v151, v152, v153, v154, v155, v156, (int *)&v191);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v158 + 56), 335544320, v159, v160, v161, v162, v163, v164);
      v170 = (int)v191;
      if (*(_BYTE *)(v158 + 328))
        v171 = 0xFF000F4500000000;
      else
        v171 = 0xFF000F4100000000;
      v172 = v157;
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::addBranch(v172, v170, v171, v165, v166, v167, v168, v169);
    goto LABEL_25;
  }
  v17 = *(_QWORD *)(a2 + 88);
  v18 = *(_DWORD *)(v17 + 596);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198F2C664);
  }
  v19 = (_DWORD *)(*(_QWORD *)(v17 + 584) + 1232 * v18 - 168);
  v20 = a6 + 40;
  if (*(_DWORD *)(a6 + 8) == 2)
    v20 = a6 + 16;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::flushAtBlockBoundary<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>(v19, a2, *(_DWORD *)(v20 + 12), a7, 1, v14, v15, v16);
  v21 = *(unsigned int *)(a5 + 12);
  if (v21 < 7)
  {
    v198 = (WTF *)v200;
    v199 = 16;
    if ((_DWORD)v21)
    {
      for (i = 0; i != v21; ++i)
        v200[i] = i;
      HIDWORD(v199) = v21;
    }
    JSC::BinarySwitch::BinarySwitch(&v191, 8, v200);
    if (!JSC::BinarySwitch::advance((JSC::BinarySwitch *)&v191, *(JSC::MacroAssembler **)(a2 + 8), v99, v100, v101, v102, v103, v104))
    {
LABEL_51:
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link(v196, *(_QWORD *)(a2 + 8), v105, v106, v107, v108, v109, v110);
      JSC::BinarySwitch::~BinarySwitch((JSC::BinarySwitch *)&v191, v137, v138, v139, v140, v141, v142, v143);
      v146 = v198;
      if (v200 != (_QWORD *)v198 && v198)
      {
        v198 = 0;
        LODWORD(v199) = 0;
        WTF::fastFree((unint64_t)v146, v144, v145, v65, v66, v67, v68, v69);
      }
      goto LABEL_13;
    }
    while (v195 > v197)
    {
      if (!*(_DWORD *)(*(_QWORD *)(a2 + 88) + 596))
      {
        __break(0xC471u);
        JUMPOUT(0x198F2C64CLL);
      }
      v111 = *(unsigned int *)(v194 + 16 * v197 + 8);
      if (*(_DWORD *)(a5 + 12) <= v111)
      {
        __break(0xC471u);
        JUMPOUT(0x198F2C654);
      }
      v112 = *(_QWORD *)(*(_QWORD *)a5 + 8 * v111);
      v113 = *(_DWORD *)(v112 + 8) == 2;
      v114 = v112 + 40;
      v115 = v112 + 16;
      if (v113)
        v116 = v115;
      else
        v116 = v114;
      JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::addExit<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,2ul>(a2, v116, a7, v106, v107, v108, v109, v110);
      if (*(_DWORD *)(a5 + 12) <= v111)
      {
        __break(0xC471u);
        JUMPOUT(0x198F2C65CLL);
      }
      v124 = *(_QWORD *)(*(_QWORD *)a5 + 8 * v111);
      v125 = *(_QWORD *)(a2 + 8);
      v126 = (JSC::AssemblerBuffer *)(v125 + 56);
      for (j = *(_DWORD *)(v125 + 200); j < *(_DWORD *)(v125 + 52); *(_DWORD *)(v125 + 200) = j)
      {
        if ((j + 4) > *(_DWORD *)(v125 + 192))
        {
          v190 = v126;
          JSC::AssemblerBuffer::outOfLineGrow(v126, v117, v118, v119, v120, v121, v122, v123);
          v126 = v190;
          j = *(_DWORD *)(v125 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v125 + 56) + j) = -721215457;
        j = *(_DWORD *)(v125 + 200) + 4;
      }
      v128 = j;
      if ((j + 4) > *(_DWORD *)(v125 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v126, v117, v118, v119, v120, v121, v122, v123);
        v128 = *(_DWORD *)(v125 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v125 + 56) + v128) = 335544320;
      *(_DWORD *)(v125 + 200) += 4;
      v129 = *(unsigned __int8 *)(v125 + 328);
      v203 = j;
      if (v129)
        v130 = 0xFF000F4500000000;
      else
        v130 = 0xFF000F4100000000;
      v204 = v130;
      if (j != -1)
      {
        v131 = (_QWORD *)(v124 + 64);
        v132 = *(unsigned int *)(v124 + 76);
        if ((_DWORD)v132 == *(_DWORD *)(v124 + 72))
        {
          v133 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v131, (void *)(v132 + 1), (unint64_t)&v203, v119, v120, v121, v122, v123);
          v134 = (_DWORD *)(*(_QWORD *)(v124 + 64) + 12 * *(unsigned int *)(v124 + 76));
          *v134 = *(_DWORD *)v133;
          v135 = (unint64_t *)(v134 + 1);
          v130 = *(_QWORD *)(v133 + 4);
        }
        else
        {
          v136 = (int *)(*v131 + 12 * v132);
          *v136 = j;
          v135 = (unint64_t *)(v136 + 1);
        }
        *v135 = v130;
        ++*(_DWORD *)(v124 + 76);
      }
      if ((JSC::BinarySwitch::advance((JSC::BinarySwitch *)&v191, *(JSC::MacroAssembler **)(a2 + 8), v118, v119, v120, v121, v122, v123) & 1) == 0)goto LABEL_51;
    }
LABEL_86:
    __break(0xC471u);
    JUMPOUT(0x198F2C644);
  }
  JSC::Wasm::BBQCallee::addJumpTable(*(JSC::Wasm::BBQCallee **)(a2 + 16), *(_DWORD *)(a5 + 12));
  v23 = v22;
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a2 + 8), 2, 8, *(unsigned int *)(a5 + 12), v24, v25, v26, v27, (uint64_t)&v203);
  JSC::MacroAssemblerARM64::and64(*(_QWORD *)(a2 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, 8, 8);
  v35 = *(_DWORD **)(a2 + 8);
  v36 = v35[50];
  if (v36 + 4 > v35[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v35 + 14), v28, v29, v30, v31, v32, v33, v34);
    v36 = v35[50];
  }
  *(_DWORD *)(*((_QWORD *)v35 + 7) + v36) = -746721016;
  v35[50] += 4;
  JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a2 + 8), v23 + 8, 8, 8, v31, v32, v33, v34);
  JSC::MacroAssemblerARM64::farJump(*(_QWORD *)(a2 + 8), 8, 40321, v37, v38, v39, v40, v41);
  v191 = (const char *)a2;
  v192 = a7;
  WTF::map<0ul,WTF::CrashOnOverflow,16ul,JSC::Wasm::BBQJITImpl::BBQJIT::addSwitch(JSC::Wasm::BBQJITImpl::BBQJIT::Value,WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::Wasm::BBQJITImpl::BBQJIT::ControlData&,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> &)::$_0,WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>((uint64_t)&v198, (uint64_t **)a5, (uint64_t *)&v191);
  v42 = *(_QWORD *)(a2 + 8);
  v43 = v198;
  v198 = 0;
  v191 = (const char *)v43;
  v44 = v199;
  v199 = 0;
  v192 = v44;
  v193 = v23;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<JSC::Wasm::BBQJITImpl::BBQJIT::addSwitch(JSC::Wasm::BBQJITImpl::BBQJIT::Value,WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::Wasm::BBQJITImpl::BBQJIT::ControlData&,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> &)::$_2>(v42, (uint64_t)&v191);
  WTF::Vector<WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v191, v45, v46, v47, v48, v49, v50, v51);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v203, *(_QWORD *)(a2 + 8), v52, v53, v54, v55, v56, v57);
  WTF::Vector<WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v198, v58, v59, v60, v61, v62, v63, v64);
LABEL_13:
  if (!*(_DWORD *)(*(_QWORD *)(a2 + 88) + 596))
  {
    __break(0xC471u);
    JUMPOUT(0x198F2C66CLL);
  }
  if (*(_DWORD *)(a6 + 8) == 2)
    v70 = a6 + 16;
  else
    v70 = a6 + 40;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::addExit<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,2ul>(a2, v70, a7, v65, v66, v67, v68, v69);
  v71 = *(_QWORD *)(a2 + 8);
  JSC::ARM64Assembler::label((_DWORD *)(v71 + 32), v72, v73, v74, v75, v76, v77, v78, (int *)&v191);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v71 + 56), 335544320, v79, v80, v81, v82, v83, v84);
  if (*(_BYTE *)(v71 + 328))
    v90 = 0xFF000F4500000000;
  else
    v90 = 0xFF000F4100000000;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::addBranch(a6, (int)v191, v90, v85, v86, v87, v88, v89);
  v94 = *(_QWORD *)(a2 + 88);
  v95 = *(_DWORD *)(v94 + 596);
  if (!v95)
  {
    __break(0xC471u);
    JUMPOUT(0x198F2C674);
  }
  v96 = *(_QWORD *)(v94 + 584) + 1232 * v95 - 168;
  if (*(_DWORD *)(a6 + 8) == 2)
    v97 = a6 + 16;
  else
    v97 = a6 + 40;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::finalizeBlock<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>(v96, a2, *(_DWORD *)(v97 + 12), a7, 0, v91, v92, v93);
LABEL_25:
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::BBQCallee::addJumpTable(JSC::Wasm::BBQCallee *this, unsigned int a2)
{
  char *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  int v16;
  WTF *v17;

  v4 = (char *)this + 176;
  v5 = 8 * a2;
  v6 = WTF::fastMalloc((WTF *)(v5 + 8));
  *(_DWORD *)v6 = a2;
  bzero((void *)(v6 + 8), v5);
  v17 = (WTF *)v6;
  v7 = *((unsigned int *)this + 47);
  if ((_DWORD)v7 == *((_DWORD *)this + 46))
  {
    WTF::Vector<WTF::RefPtr<JSC::Wasm::RTT const,WTF::RawPtrTraits<JSC::Wasm::RTT const>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<JSC::Wasm::RTT const,WTF::RawPtrTraits<JSC::Wasm::RTT const>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT const>>>((uint64_t)v4, (unint64_t)&v17);
    v15 = v17;
    v17 = 0;
    if (v15)
      WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
    v16 = *((_DWORD *)this + 47);
  }
  else
  {
    v16 = v7 + 1;
    *(_QWORD *)(*((_QWORD *)this + 22) + 8 * v7) = v6;
    *((_DWORD *)this + 47) = v7 + 1;
  }
  if (!v16)
    __break(0xC471u);
}

void WTF::map<0ul,WTF::CrashOnOverflow,16ul,JSC::Wasm::BBQJITImpl::BBQJIT::addSwitch(JSC::Wasm::BBQJITImpl::BBQJIT::Value,WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::Wasm::BBQJITImpl::BBQJIT::ControlData&,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> &)::$_0,WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  _DWORD *v20;
  int i;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int j;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int **v37;
  unsigned int **v38;
  unsigned int *v39;
  unsigned int v40;
  int v41;
  BOOL v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  _DWORD *v47;
  unint64_t *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  int *v52;
  uint64_t v53;
  _BYTE v54[12];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
      goto LABEL_43;
    }
    v7 = WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(a1 + 8) = v3;
    *(_QWORD *)a1 = v7;
    v15 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v15)
    {
      v16 = v7;
      v17 = 0;
      v18 = *a2;
      v53 = (uint64_t)&(*a2)[v15];
      while (1)
      {
        v19 = *a3;
        v20 = *(_DWORD **)(*a3 + 8);
        for (i = v20[50]; i < v20[13]; v20[50] = i)
        {
          if ((i + 4) > v20[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 + 14), (uint64_t)v8, v9, v10, v11, v12, v13, v14);
            i = v20[50];
          }
          *(_DWORD *)(*((_QWORD *)v20 + 7) + i) = -721215457;
          i = v20[50] + 4;
        }
        v20[52] = 0;
        v22 = (unsigned int *)WTF::fastMalloc((WTF *)8);
        *v22 = 1;
        v22[1] = i;
        if (!*(_DWORD *)(*(_QWORD *)(v19 + 88) + 596))
          break;
        v28 = v22;
        if (*(_DWORD *)(*v18 + 8) == 2)
          v29 = *v18 + 16;
        else
          v29 = *v18 + 40;
        JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::addExit<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,2ul>(v19, v29, a3[1], v23, v24, v25, v26, v27);
        v30 = *v18;
        if (v31)
        {
          v32 = *(_QWORD *)(v19 + 8);
          for (j = *(_DWORD *)(v32 + 200); j < *(_DWORD *)(v32 + 52); *(_DWORD *)(v32 + 200) = j)
          {
            if ((j + 4) > *(_DWORD *)(v32 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v32 + 56), (uint64_t)v8, v9, v10, v11, v12, v13, v14);
              j = *(_DWORD *)(v32 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v32 + 56) + j) = -721215457;
            j = *(_DWORD *)(v32 + 200) + 4;
          }
          v40 = j;
          if ((j + 4) > *(_DWORD *)(v32 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v32 + 56), (uint64_t)v8, v9, v10, v11, v12, v13, v14);
            v40 = *(_DWORD *)(v32 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v32 + 56) + v40) = 335544320;
          *(_DWORD *)(v32 + 200) += 4;
          v41 = *(unsigned __int8 *)(v32 + 328);
          *(_DWORD *)v54 = j;
          v42 = v41 == 0;
          v43 = 0xFF000F4500000000;
          if (v42)
            v43 = 0xFF000F4100000000;
          *(_QWORD *)&v54[4] = v43;
          if (j != -1)
          {
            v44 = (_QWORD *)(v30 + 64);
            v45 = *(unsigned int *)(v30 + 76);
            if ((_DWORD)v45 == *(_DWORD *)(v30 + 72))
            {
              v46 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, (void *)(v45 + 1), (unint64_t)v54, v10, v11, v12, v13, v14);
              v47 = (_DWORD *)(*(_QWORD *)(v30 + 64) + 12 * *(unsigned int *)(v30 + 76));
              *v47 = *(_DWORD *)v46;
              v48 = (unint64_t *)(v47 + 1);
              v43 = *(_QWORD *)(v46 + 4);
            }
            else
            {
              v52 = (int *)(*v44 + 12 * v45);
              *v52 = j;
              v48 = (unint64_t *)(v52 + 1);
            }
            *v48 = v43;
            ++*(_DWORD *)(v30 + 76);
          }
        }
        else
        {
          do
            v34 = __ldaxr(v28);
          while (__stlxr(v34 + 1, v28));
          *(_QWORD *)v54 = v28;
          v35 = (_QWORD *)(v30 + 104);
          v36 = *(unsigned int *)(v30 + 116);
          if ((_DWORD)v36 == *(_DWORD *)(v30 + 112))
          {
            v37 = (unsigned int **)WTF::Vector<WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, (unint64_t)v54);
            v36 = *(unsigned int *)(v30 + 116);
            v38 = (unsigned int **)(*(_QWORD *)(v30 + 104) + 8 * v36);
            v39 = *v37;
          }
          else
          {
            v38 = (unsigned int **)(*v35 + 8 * v36);
            v37 = (unsigned int **)v54;
            v39 = v28;
          }
          *v37 = 0;
          *v38 = v39;
          *(_DWORD *)(v30 + 116) = v36 + 1;
          v49 = *(unsigned int **)v54;
          *(_QWORD *)v54 = 0;
          if (v49)
          {
            do
            {
              v50 = __ldaxr(v49);
              v51 = v50 - 1;
            }
            while (__stlxr(v51, v49));
            if (!v51)
            {
              atomic_store(1u, v49);
              WTF::fastFree((unint64_t)v49, v8, v9, v10, v11, v12, v13, v14);
            }
          }
          v17 = *(_DWORD *)(a1 + 12);
          v16 = *(_QWORD *)a1;
        }
        *(_QWORD *)(v16 + 8 * v17++) = v28;
        *(_DWORD *)(a1 + 12) = v17;
        if (++v18 == (uint64_t *)v53)
          return;
      }
      __break(0xC471u);
LABEL_43:
      JUMPOUT(0x198F2CA68);
    }
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<JSC::Wasm::BBQJITImpl::BBQJIT::addSwitch(JSC::Wasm::BBQJITImpl::BBQJIT::Value,WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::Wasm::BBQJITImpl::BBQJIT::ControlData&,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> &)::$_2>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int **v6;
  uint64_t v7;
  unsigned int **v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E35BE240;
  v5 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 28) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 29)
      goto LABEL_23;
    v6 = (unsigned int **)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v4 + 24) = v5;
    *(_QWORD *)(v4 + 16) = v6;
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v7)
    {
      v8 = *(unsigned int ***)a2;
      v9 = *(_QWORD *)a2 + 8 * v7;
      do
      {
        v10 = *v8;
        if (*v8)
        {
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
        *v6++ = v10;
        ++v8;
      }
      while (v8 != (unsigned int **)v9);
    }
  }
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 16);
  v12 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v12 != *(_DWORD *)(a1 + 240))
  {
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v12);
    goto LABEL_19;
  }
  v14 = v12 + (v12 >> 2);
  if (v14 >= 0x10)
    v15 = v14 + 1;
  else
    v15 = 16;
  if (v15 <= v12 + 1)
    v16 = v12 + 1;
  else
    v16 = v15;
  if (v16 >> 29)
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x198F2CBC8);
  }
  v17 = *(const void **)(a1 + 232);
  v18 = (void *)WTF::fastMalloc((WTF *)(8 * v16));
  *(_DWORD *)(a1 + 240) = v16;
  *(_QWORD *)(a1 + 232) = v18;
  memcpy(v18, v17, 8 * v12);
  if (v17)
  {
    if (*(const void **)(a1 + 232) == v17)
    {
      *(_QWORD *)(a1 + 232) = 0;
      *(_DWORD *)(a1 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v17, v19, v20, v21, v22, v23, v24, v25);
  }
  v12 = *(unsigned int *)(a1 + 244);
  v13 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v12);
LABEL_19:
  *v13 = v4;
  *(_DWORD *)(a1 + 244) = v12 + 1;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addEndToUnreachable(_BYTE *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int i;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v46;
  _OWORD *v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int j;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t k;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  unsigned __int8 v110;
  unsigned int v111;
  unint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int8 *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;

  v10 = a5;
  v14 = *(unsigned int *)(*(_QWORD *)(a3 + 1064) + 12);
  if ((_DWORD)a5)
  {
    if ((_DWORD)v14)
    {
      v104 = 0;
      v105 = 0;
      v8 = 1;
      do
      {
        v106 = (uint64_t *)(**(_QWORD **)(a3 + 1064) + v104);
        v107 = *v106;
        v108 = v106[1];
        *(_QWORD *)&v136 = v107;
        *((_QWORD *)&v136 + 1) = v108;
        v109 = *(_DWORD *)(a3 + 1200);
        if (*(_DWORD *)(a3 + 1072) == 5)
          ++v109;
        v110 = v107;
        if (v107 - 192 <= 0x33)
        {
          if (((1 << (v107 + 64)) & 0xFFC19C001C000) != 0)
          {
            v110 = -2;
          }
          else
          {
            v110 = v107;
            if (v107 == 192)
            {
              __break(0xC471u);
              JUMPOUT(0x198F2D414);
            }
          }
        }
        v111 = v105 + v109;
        v112 = ((unint64_t)v110 << 8) | 2;
        v9 = v9 & 0xFFFFFFFF00000000 | v111;
        *(_QWORD *)&v135 = v9;
        *((_QWORD *)&v135 + 1) = v112;
        v113 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v113 == *(_DWORD *)(a3 + 8))
        {
          WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a3, &v136, &v135, a4, a5, a6, a7, a8);
        }
        else
        {
          v114 = (_QWORD *)(*(_QWORD *)a3 + 32 * v113);
          *v114 = v107;
          v114[1] = v108;
          v114[2] = v9;
          v114[3] = v112;
          ++*(_DWORD *)(a3 + 12);
        }
        ++v105;
        v104 += 16;
      }
      while (v14 != v105);
    }
    v39 = *(unsigned int *)(a2 + 340);
    if ((_DWORD)v39)
    {
      v40 = *(_QWORD *)(a2 + 328);
      v41 = 4 * v39;
      do
      {
        if ((*(_WORD *)(v40 + 1) & 7) != 0)
        {
          v123 = JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding::toValue((unsigned __int8 *)v40);
          JSC::Wasm::BBQJITImpl::BBQJIT::consume(a2, (uint64_t)v123, v124, v124, v125, v126, v127, v128);
        }
        v40 += 4;
        v41 -= 4;
      }
      while (v41);
    }
    v42 = *(unsigned int *)(a2 + 484);
    if ((_DWORD)v42)
    {
      v43 = *(_QWORD *)(a2 + 472);
      v44 = 4 * v42;
      do
      {
        if ((*(_WORD *)(v43 + 1) & 7) != 0)
        {
          v129 = JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding::toValue((unsigned __int8 *)v43);
          JSC::Wasm::BBQJITImpl::BBQJIT::consume(a2, (uint64_t)v129, v130, v130, v131, v132, v133, v134);
        }
        v43 += 4;
        v44 -= 4;
      }
      while (v44);
    }
  }
  else if ((_DWORD)v14)
  {
    v46 = *(_DWORD *)(a4 + 12) - v14;
    v8 = *(unsigned int *)(*(_QWORD *)(a3 + 1064) + 12);
    do
    {
      v47 = (_OWORD *)(*(_QWORD *)a4 + 32 * v46);
      v48 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v48 == *(_DWORD *)(a3 + 8))
      {
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression&>(a3, (unint64_t)v47, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v49 = (_OWORD *)(*(_QWORD *)a3 + 32 * v48);
        v50 = v47[1];
        *v49 = *v47;
        v49[1] = v50;
        ++*(_DWORD *)(a3 + 12);
      }
      ++v46;
      --v8;
    }
    while (v8);
  }
  v15 = *(_DWORD *)(a3 + 1072);
  if (v15 == 2)
  {
    *(_DWORD *)(a3 + 1072) = 1;
    JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::flushAtBlockBoundary<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>((_DWORD *)(a3 + 1064), a2, *(_DWORD *)(a3 + 1116), a3, 1, a6, a7, a8);
    if ((v10 & 1) == 0)
      JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::addExit<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,2ul>(a2, a3 + 1104, a3, v55, v56, v57, v58, v59);
    JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::finalizeBlock<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>(a3 + 1064, a2, *(_DWORD *)(a3 + 1116), a3, 0, v57, v58, v59);
    v61 = *(_DWORD *)(a3 + 1184);
    v62 = *(unsigned int *)(a3 + 1140);
    if ((_DWORD)v62)
    {
      v63 = *(_QWORD *)(a2 + 8);
      v64 = *(unsigned int **)(a3 + 1128);
      v65 = 12 * v62;
      do
      {
        LODWORD(v136) = v61;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v64, (unsigned int *)&v136, v63, v60, v24, v25, v26, v27);
        v64 += 3;
        v65 -= 12;
      }
      while (v65);
    }
    v66 = *(unsigned int *)(a3 + 1180);
    if ((_DWORD)v66)
    {
      v67 = *(uint64_t **)(a3 + 1168);
      v68 = 8 * v66;
      do
      {
        v69 = *v67++;
        *(_DWORD *)(v69 + 4) = v61;
        v68 -= 8;
      }
      while (v68);
    }
    if (*(_QWORD *)(a2 + 80))
    {
      v70 = *(_DWORD *)(a2 + 316);
      if (!v70)
      {
        __break(0xC471u);
        JUMPOUT(0x198F2D44CLL);
      }
      *(_DWORD *)(a2 + 316) = v70 - 1;
    }
LABEL_16:
    if (HIBYTE(word_1ECF4C700))
    {
      *(_DWORD *)a2 -= 2;
      *(_QWORD *)&v136 = "End";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v115 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v115;
        }
        while (v115 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>((const char **)&v136, " ");
      WTF::dataLog<char [16]>("\n");
    }
    if (!*(_DWORD *)(*(_QWORD *)(a2 + 88) + 596))
    {
      __break(0xC471u);
      JUMPOUT(0x198F2D43CLL);
    }
    LODWORD(v38) = *(_DWORD *)(a3 + 1116);
    if ((_DWORD)v38)
    {
      v51 = 0;
      do
      {
        v52 = (v51 + *(_DWORD *)(a3 + 12) - v38);
        v53 = *(_QWORD *)(*(_QWORD *)a3 + 32 * v52);
        if (v53 - 192 <= 0x33)
        {
          if (((1 << (v53 + 64)) & 0xFFC19C001C000) != 0)
          {
            LOWORD(v53) = 254;
          }
          else if (*(_QWORD *)(*(_QWORD *)a3 + 32 * v52) == 192)
          {
            __break(0xC471u);
            JUMPOUT(0x198F2D3C4);
          }
        }
        v8 = v8 & 0xFFFFFFFF00000000 | (v51 + *(_DWORD *)(a3 + 1200));
        v54 = *(_QWORD *)a3 + 32 * v52;
        *(_QWORD *)(v54 + 16) = v8;
        *(_WORD *)(v54 + 24) = ((_WORD)v53 << 8) | 2;
        if (v51 >= *(unsigned int *)(a3 + 1116))
        {
          __break(0xC471u);
          JUMPOUT(0x198F2D444);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::bind(a2, *(_QWORD *)(*(_QWORD *)a3 + 32 * v52 + 16), *(_QWORD *)(*(_QWORD *)a3 + 32 * v52 + 24), *(unsigned int *)(*(_QWORD *)(a3 + 1104) + 4 * v51++), v24, v25, v26, v27);
        v38 = *(unsigned int *)(a3 + 1116);
      }
      while (v51 < v38);
    }
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  if (v15 != 3)
  {
    if ((v15 - 4) < 2)
    {
      v116 = *(_DWORD *)(a2 + 1296);
      if (!v116)
      {
LABEL_119:
        __break(0xC471u);
        JUMPOUT(0x198F2D338);
      }
      *(_DWORD *)(a2 + 1296) = v116 - 1;
      JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::flushAndSingleExit<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>((_DWORD *)(a3 + 1064), a2, a3 + 1064, a3, v10, a6, a7, a8);
      JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::linkJumps(a3 + 1064, *(_QWORD *)(a2 + 8), v117, v118, v119, v120, v121, v122);
    }
    else
    {
      JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::flushAtBlockBoundary<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>((_DWORD *)(a3 + 1064), a2, *(_DWORD *)(a3 + 1116), a3, 1, a6, a7, a8);
      if ((v10 & 1) == 0)
        JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::addExit<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,2ul>(a2, a3 + 1104, a3, v16, v17, v18, v19, v20);
      JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::finalizeBlock<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>(a3 + 1064, a2, *(_DWORD *)(a3 + 1116), a3, 0, v18, v19, v20);
      v28 = *(_DWORD **)(a2 + 8);
      v29 = *(unsigned int *)(a3 + 1140);
      if ((_DWORD)v29)
      {
        v30 = 0;
        v31 = 0;
        v32 = 12 * v29;
        do
        {
          if (v31 >= *(unsigned int *)(a3 + 1140))
          {
            __break(0xC471u);
            JUMPOUT(0x198F2D42CLL);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a3 + 1128) + v30), (uint64_t)v28, v22, v23, v24, v25, v26, v27);
          ++v31;
          v30 += 12;
        }
        while (v32 != v30);
      }
      for (i = v28[50]; i < v28[13]; v28[50] = i)
      {
        if ((i + 4) > v28[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v28 + 14), v21, v22, v23, v24, v25, v26, v27);
          i = v28[50];
        }
        *(_DWORD *)(*((_QWORD *)v28 + 7) + i) = -721215457;
        i = v28[50] + 4;
      }
      v28[52] = 0;
      v34 = *(unsigned int *)(a3 + 1180);
      if ((_DWORD)v34)
      {
        v35 = *(uint64_t **)(a3 + 1168);
        v36 = 8 * v34;
        do
        {
          v37 = *v35++;
          *(_DWORD *)(v37 + 4) = i;
          v36 -= 8;
        }
        while (v36);
      }
    }
    goto LABEL_16;
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::flushAtBlockBoundary<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>((_DWORD *)(a3 + 1064), a2, *(_DWORD *)(a3 + 1116), a3, 1, a6, a7, a8);
  if ((v10 & 1) == 0)
    JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::addExit<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,2ul>(a2, a3 + 1104, a3, v71, v72, v73, v74, v75);
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::finalizeBlock<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>(a3 + 1064, a2, *(_DWORD *)(a3 + 1116), a3, 0, v73, v74, v75);
  v83 = *(_QWORD *)(a2 + 8);
  v84 = *(unsigned int *)(a3 + 1140);
  if ((_DWORD)v84)
  {
    v85 = 0;
    v86 = 0;
    v87 = 12 * v84;
    do
    {
      if (v86 >= *(unsigned int *)(a3 + 1140))
      {
        __break(0xC471u);
        JUMPOUT(0x198F2D434);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a3 + 1128) + v85), v83, v77, v78, v79, v80, v81, v82);
      ++v86;
      v85 += 12;
    }
    while (v87 != v85);
  }
  for (j = *(_DWORD *)(v83 + 200); j < *(_DWORD *)(v83 + 52); *(_DWORD *)(v83 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(v83 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v83 + 56), v76, v77, v78, v79, v80, v81, v82);
      j = *(_DWORD *)(v83 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v83 + 56) + j) = -721215457;
    j = *(_DWORD *)(v83 + 200) + 4;
  }
  *(_DWORD *)(v83 + 208) = 0;
  v89 = *(unsigned int *)(a3 + 1180);
  if ((_DWORD)v89)
  {
    v90 = *(uint64_t **)(a3 + 1168);
    v91 = 8 * v89;
    do
    {
      v92 = *v90++;
      *(_DWORD *)(v92 + 4) = j;
      v91 -= 8;
    }
    while (v91);
  }
  if ((_DWORD)v14)
  {
    v93 = 0;
    for (k = 0; v14 != k; ++k)
    {
      v95 = *(_QWORD *)a3;
      v96 = *(_QWORD *)a3 + v93;
      if (*(_BYTE *)(v96 + 24) != 1)
      {
        v97 = *(unsigned __int8 *)(v96 + 25);
        if ((v97 - 192) <= 0x33)
        {
          if (((1 << (v97 + 64)) & 0xFFC19C001C000) != 0)
          {
            LOWORD(v97) = 254;
          }
          else if (v97 == 192)
          {
            __break(0xC471u);
            JUMPOUT(0x198F2D3E4);
          }
        }
        v83 = v83 & 0xFFFFFFFF00000000 | k;
        *(_QWORD *)(v96 + 16) = v83;
        v98 = v95 + v93;
        *(_WORD *)(v95 + v93 + 24) = ((_WORD)v97 << 8) | 2;
        LODWORD(v136) = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, v83, *(_QWORD *)(v95 + v93 + 24), v78, v79, v80, v81, v82);
        v103 = *(unsigned int *)(a3 + 1116);
        if ((v136 & 6) == 2)
        {
          if (k >= v103)
          {
            __break(0xC471u);
            JUMPOUT(0x198F2D45CLL);
          }
          if ((JSC::Wasm::BBQJITImpl::BBQJIT::Location::operator==((int *)&v136, *(unsigned int *)(*(_QWORD *)(a3 + 1104) + 4 * k)) & 1) == 0)goto LABEL_119;
        }
        else
        {
          if (k >= v103)
          {
            __break(0xC471u);
            JUMPOUT(0x198F2D454);
          }
          JSC::Wasm::BBQJITImpl::BBQJIT::bind(a2, *(_QWORD *)(v96 + 16), *(_QWORD *)(v98 + 24), *(unsigned int *)(*(_QWORD *)(a3 + 1104) + 4 * k), v99, v100, v101, v102);
        }
      }
      v93 += 32;
    }
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::addReturn(a1, a2, a3 + 1064, a3);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitSlowPathRTTCheck(uint64_t a1, unsigned int *a2, JSC::Wasm::TypeInformation *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  void *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  _BYTE v72[12];
  WTF *v73;
  char v74;

  if (BYTE2(dword_1ECF4C7B0))
  {
    JSC::Wasm::TypeInformation::tryGetCanonicalRTT(this, (uint64_t)this, a4, a5, a6, a7, a8, (uint64_t)&v73);
    if (!v74)
    {
      v68 = std::__throw_bad_optional_access[abi:sn180100]();
      JSC::Wasm::BBQJITImpl::BBQJIT::loadWebAssemblyGlobalState(v68);
      return;
    }
    v11 = (unsigned int *)v73;
    if (v73)
    {
      do
        v64 = __ldaxr(v11);
      while (__stlxr(v64 + 1, v11));
      if (v74)
      {
        v65 = (unsigned int *)v73;
        v73 = 0;
        if (v65)
        {
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (!v67)
          {
            atomic_store(1u, v65);
            WTF::fastFree((unint64_t)v65, v62, v63, a4, a5, a6, a7, a8);
          }
        }
      }
    }
  }
  else
  {
    v11 = 0;
  }
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), a4 | 0x1800000000, a4, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), a4 | 0x800000000, 8, v12, v13, v14, v15, v16);
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 9, 8, 0, v17, v18, v19, v20, (uint64_t)&v73);
  v25 = v11[2];
  *(_QWORD *)v72 = 0xFFFFFFFFLL;
  *(_DWORD *)&v72[8] = -16773311;
  if ((_DWORD)v25)
  {
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 9, 8, v25, v21, v22, v23, v24, (uint64_t)&v70);
    *(_DWORD *)v72 = v70;
    *(_QWORD *)&v72[4] = v71;
    v26 = v11[2] + 1;
    v27 = v70 == -1;
  }
  else
  {
    v27 = 1;
    v26 = 1;
  }
  JSC::MacroAssemblerARM64::sub32(*(_QWORD *)(a1 + 8), 8, v26, 8, v21, v22, v23, v24);
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), a4 | 0x300000800, 0x200000010uLL, a4, v28, v29, v30, v31);
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 0, a4, (uint64_t)v11, v32, v33, v34, v35, (uint64_t)&v70);
  v69 = *a2;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(&v70, &v69, *(_QWORD *)(a1 + 8), v36, v37, v38, v39, v40);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v73, *(_QWORD *)(a1 + 8), v41, v42, v43, v44, v45, v46);
  if (!v27)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v72, *(_QWORD *)(a1 + 8), v47, v48, v49, v50, v51, v52);
  JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)6, v47, v48, v49, v50, v51, v52);
  do
  {
    v60 = __ldaxr(v11);
    v61 = v60 - 1;
  }
  while (__stlxr(v61, v11));
  if (!v61)
  {
    atomic_store(1u, v11);
    WTF::fastFree((unint64_t)v11, v53, v54, v55, v56, v57, v58, v59);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::loadWebAssemblyGlobalState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  JSC::MacroAssemblerARM64::loadPair64(*(_DWORD **)(a1 + 8), 19, 40, a2, a3, a6, a7, a8);
  JSC::AssemblyHelpers::cageConditionally(*(_DWORD **)(a1 + 8), 0, a2, a3, 8, v11, v12, v13);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addCall(_BYTE *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  unsigned __int8 **v12;
  _QWORD *v13;
  unint64_t v14;
  unsigned __int8 **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int i;
  _QWORD *v39;
  unsigned int *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  WTF *v65;
  WTF *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  const void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  char v90[32];
  WTF *v91;
  int v92;
  WTF *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  char v98;
  const char *v99;

  v97 = a3;
  v12 = (unsigned __int8 **)(a4 + 8);
  if (*(_DWORD *)(a4 + 32))
    v13 = 0;
  else
    v13 = (_QWORD *)(a4 + 8);
  v14 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v14 != -1)
  {
    *(_QWORD *)v90 = &v98;
    v99 = v90;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v99, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (*(_DWORD *)(a4 + 32))
    v15 = 0;
  else
    v15 = v12;
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v15, 0, v90);
  if ((unint64_t)(v96 + 15) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198F2DBC0);
  }
  v21 = (v96 + 15) & 0xFFFFFFF0;
  if (*(_DWORD *)(a2 + 1284) > v21)
    v21 = *(_DWORD *)(a2 + 1284);
  *(_DWORD *)(a2 + 1284) = v21;
  v22 = *(_DWORD *)(a2 + 1300);
  if (v22 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x198F2DBC8);
  }
  *(_DWORD *)(a2 + 1300) = v22 + 1;
  if (!*(_BYTE *)(a2 + 73) || *(_BYTE *)(a2 + 72))
  {
    JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a2 + 8), v22 + 1, 0x240000001DLL, v16, v17, v18, v19, v20);
    JSC::Wasm::BBQJITImpl::BBQJIT::flushRegistersForException(a2, v81, v82, v83, v84, v85, v86, v87);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<0ul>(a2, a5, (uint64_t)v90, a4, v17, v18, v19, v20);
  if (*(_DWORD *)(*(_QWORD *)(a2 + 48) + 36) <= a3)
  {
    v89 = *(_QWORD *)(a2 + 64);
    JSC::CCallHelpers::storeWasmCalleeCalleePatchable(*(JSC::CCallHelpers **)(a2 + 8), v23, v24, v25, v26, v27, v28, v29, (unsigned int *)&v99);
    v37 = *(_DWORD **)(a2 + 8);
    v37[52] = 0;
    for (i = v37[50]; (signed int)i < v37[13]; v37[50] = i)
    {
      if (i + 4 > v37[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v37 + 14), v30, v31, v32, v33, v34, v35, v36);
        i = v37[50];
      }
      *(_DWORD *)(*((_QWORD *)v37 + 7) + i) = -721215457;
      i = v37[50] + 4;
    }
    v88 = a1;
    v39 = v13;
    v40 = a5;
    v41 = a6;
    v37[52] = 0;
    if (i + 4 > v37[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v37 + 14), v30, v31, v32, v33, v34, v35, v36);
      i = v37[50];
    }
    *(_DWORD *)(*((_QWORD *)v37 + 7) + i) = -1811939328;
    v42 = v37[50] + 4;
    v37[50] = v42;
    v43 = *(_QWORD *)(a2 + 8);
    v44 = (int)v99;
    v49 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v49 + 8) = 1;
    *(_QWORD *)v49 = off_1E35BE290;
    *(_QWORD *)(v49 + 16) = v89;
    *(_DWORD *)(v49 + 24) = v42;
    *(_DWORD *)(v49 + 28) = 3;
    *(_DWORD *)(v49 + 32) = a3;
    *(_DWORD *)(v49 + 36) = v44;
    v50 = *(unsigned int *)(v43 + 244);
    if ((_DWORD)v50 != *(_DWORD *)(v43 + 240))
    {
      v51 = (uint64_t *)(*(_QWORD *)(v43 + 232) + 8 * v50);
      a6 = v41;
      a5 = v40;
      v13 = v39;
      a1 = v88;
LABEL_21:
      *v51 = v49;
      *(_DWORD *)(v43 + 244) = v50 + 1;
      goto LABEL_22;
    }
    v67 = v50 + (v50 >> 2);
    if (v67 >= 0x10)
      v68 = v67 + 1;
    else
      v68 = 16;
    if (v68 <= v50 + 1)
      v69 = v50 + 1;
    else
      v69 = v68;
    if (!(v69 >> 29))
    {
      v70 = *(const void **)(v43 + 232);
      v71 = (void *)WTF::fastMalloc((WTF *)(8 * v69));
      *(_DWORD *)(v43 + 240) = v69;
      *(_QWORD *)(v43 + 232) = v71;
      memcpy(v71, v70, 8 * v50);
      a6 = v41;
      a5 = v40;
      v13 = v39;
      a1 = v88;
      if (v70)
      {
        if (*(const void **)(v43 + 232) == v70)
        {
          *(_QWORD *)(v43 + 232) = 0;
          *(_DWORD *)(v43 + 240) = 0;
        }
        WTF::fastFree((unint64_t)v70, v72, v73, v74, v45, v46, v47, v48);
      }
      v50 = *(unsigned int *)(v43 + 244);
      v51 = (uint64_t *)(*(_QWORD *)(v43 + 232) + 8 * v50);
      goto LABEL_21;
    }
LABEL_67:
    __break(0xC471u);
    JUMPOUT(0x198F2DB98);
  }
  if (a3 >= 0x1111110)
    goto LABEL_67;
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a2 + 8), ((unint64_t)((120 * a3 + 168) >> 3) << 35) | 0x13, 8, v25, v26, v27, v28, v29);
  v78 = *(_DWORD **)(a2 + 8);
  v78[52] = 0;
  v79 = v78[50];
  if (v79 + 4 > v78[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v78 + 14), v75, v76, v77, v45, v46, v47, v48);
    v79 = v78[50];
  }
  *(_DWORD *)(*((_QWORD *)v78 + 7) + v79) = -700514048;
  v78[50] += 4;
LABEL_22:
  JSC::Wasm::BBQJITImpl::BBQJIT::returnValuesFromCall<8ul>(a2, a6, v13, (uint64_t)v90, v45, v46, v47, v48);
  v59 = *(_QWORD *)(a2 + 48);
  v60 = *(_QWORD *)(v59 + 328);
  v61 = (unint64_t *)(2 * v60);
  if (v60 < 0)
    v62 = 63;
  else
    v62 = *v61;
  if (v62 > a3
    && ((v63 = v61 + 1, v60 >= 0) ? (v64 = v63) : (v64 = (_QWORD *)(v59 + 328)),
        ((*(_QWORD *)((char *)v64 + (((unint64_t)a3 >> 3) & 0x1FFFFFF8)) >> a3) & 1) != 0)
    || *(_DWORD *)(v59 + 36) > a3)
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::restoreWebAssemblyGlobalStateAfterWasmCall((JSC::Wasm::BBQJITImpl::BBQJIT *)a2, (uint64_t)v52, v53, v54, v55, v56, v57, v58);
  }
  if (HIBYTE(word_1ECF4C700))
  {
    v99 = "Call";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a2)
    {
      v80 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v80;
      }
      while (v80 < *(_DWORD *)a2);
    }
    WTF::dataLog<char const*,char [2]>(&v99, " ");
    WTF::dataLog<unsigned int>(&v97);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<0ul,WTF::CrashOnOverflow,char [4],WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Value,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, *(uint64_t **)a5, a5[3], "=> ", a6);
  }
  *a1 = 0;
  a1[8] = 0;
  v65 = v93;
  if (&v95 != (uint64_t *)v93 && v93)
  {
    v93 = 0;
    v94 = 0;
    WTF::fastFree((unint64_t)v65, v52, v53, v54, v55, v56, v57, v58);
  }
  v66 = v91;
  if (v91)
  {
    v91 = 0;
    v92 = 0;
    WTF::fastFree((unint64_t)v66, v52, v53, v54, v55, v56, v57, v58);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<0ul>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  JSC::ARM64LogicalImmediate **v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t i;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t j;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  int v54;
  unsigned int v55;
  int v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t k;
  WTF *v66;
  JSC::ARM64LogicalImmediate *v67;
  JSC::ARM64LogicalImmediate *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unsigned __int8 *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  uint64_t v90;
  JSC::ARM64LogicalImmediate **v91;
  uint64_t v92;
  void *v93;
  unsigned int v94;
  unsigned int v95;

  v8 = a3;
  v91 = 0;
  v92 = 0;
  v10 = a2[3];
  if ((_DWORD)v10)
  {
    if (v10 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198F2E314);
    }
    v12 = (JSC::ARM64LogicalImmediate **)WTF::fastMalloc((WTF *)(16 * v10));
    LODWORD(v92) = v10;
    v91 = v12;
    v13 = a2[3];
    if ((_DWORD)v13)
    {
      v88 = v8;
      v14 = 0;
      v15 = 0;
      v16 = *(_QWORD *)a2;
      v17 = 16 * v13;
      do
      {
        v18 = v16 + v14;
        if (*(_BYTE *)(v16 + v14 + 8) == 1)
        {
          v22 = *(_QWORD *)v18;
          v23 = *(_QWORD *)(v18 + 8);
          v24 = v22;
          v21 = v23;
        }
        else
        {
          v19 = *(unsigned __int8 *)(v18 + 9);
          v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *(_QWORD *)v18, *(_QWORD *)(v18 + 8), a4, a5, a6, a7, a8);
          if ((unint64_t)(v19 - 192) <= 0x33)
          {
            if (((1 << (v19 + 64)) & 0xFFC19C001C000) != 0)
            {
              v19 = 254;
            }
            else if (v19 == 192)
            {
              __break(0xC471u);
              JUMPOUT(0x198F2E258);
            }
          }
          v21 = (v19 << 8) | 4;
          v22 = *(_QWORD *)v18;
          v23 = *(_QWORD *)(v18 + 8);
          v24 = v20;
        }
        v25 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v22, v23, a4, a5, a6, a7, a8);
        if (v23 == 2)
        {
          v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v22 + 16;
          if (*(_DWORD *)(a1 + 1280) < v26)
            *(_DWORD *)(a1 + 1280) = v26;
          v27 = (-8 * v26) ^ v25;
          if ((v25 & 7) != 1 || v27 >= 8)
            JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v22, v23, v25);
        }
        v29 = (uint64_t *)&v12[v14 / 8];
        *v29 = v24;
        v29[1] = v21;
        ++v15;
        v14 += 16;
      }
      while (v17 != v14);
      HIDWORD(v92) = v15;
      v8 = v88;
      goto LABEL_21;
    }
  }
  else
  {
    v12 = 0;
  }
  v15 = 0;
LABEL_21:
  v30 = *(_QWORD *)(a1 + 1336);
  if (v30)
  {
    v31 = __clz(__rbit64(v30));
    while (1)
    {
      if (v31 <= 0x1F)
      {
        if (v31 >= *(unsigned int *)(a1 + 340))
        {
          __break(0xC471u);
          JUMPOUT(0x198F2E31CLL);
        }
        v33 = (_QWORD *)(a1 + 328);
        v32 = v31;
      }
      else
      {
        v32 = (v31 - 32);
        v33 = (_QWORD *)(a1 + 472);
        if (v32 >= *(unsigned int *)(a1 + 484))
        {
          __break(0xC471u);
          JUMPOUT(0x198F2E2D4);
        }
      }
      v34 = *(unsigned int *)(*v33 + 4 * v32);
      v35 = (v34 >> 8) & 7;
      if (!v35)
        goto LABEL_26;
      v78 = v34;
      switch(v35)
      {
        case 2u:
          v79 = 2;
          if ((unint64_t)v34 - 192 <= 0x33)
          {
            if (((1 << (v34 + 64)) & 0xFFC19C001C000) == 0)
            {
              if (v34 == 192)
              {
                __break(0xC471u);
                JUMPOUT(0x198F2E2CCLL);
              }
              break;
            }
            v79 = 2;
            goto LABEL_124;
          }
          break;
        case 3u:
          goto LABEL_26;
        case 1u:
          v79 = 3;
          if ((unint64_t)v34 - 192 <= 0x33)
          {
            if (((1 << (v34 + 64)) & 0xFFC19C001C000) == 0)
            {
              if (v34 == 192)
              {
                __break(0xC471u);
                JUMPOUT(0x198F2E1A0);
              }
              break;
            }
            v79 = 3;
LABEL_124:
            v78 = 254;
          }
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F2E238);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::flushValue(a1, (JSC::ARM64LogicalImmediate *)(v34 >> 11), v79 | (v78 << 8), a4, a5, a6, a7, a8);
LABEL_26:
      if (v31 <= 0x3E)
      {
        v36 = *(_QWORD *)(a1 + 1336);
        if (v36)
        {
          v37 = __clz(__rbit64(v36 >> ((v31 + 1) & 0x3F))) + (((_BYTE)v31 + 1) & 0x3F);
          v31 = v37 >= 0x40 ? 64 : v37;
          if (v37 <= 0x3F)
            continue;
        }
      }
      break;
    }
  }
  v38 = *(unsigned int *)(v8 + 44);
  if (!(_DWORD)v38)
  {
    v89 = 0;
    v90 = 0;
    goto LABEL_53;
  }
  v39 = 0;
  for (i = 0; i < v38; ++i)
  {
    v41 = (uint64_t *)(*(_QWORD *)(v8 + 32) + v39);
    v42 = *v41;
    v43 = *((unsigned __int8 *)v41 + 8);
    switch(v43)
    {
      case 0:
        v44 = 2;
LABEL_36:
        v45 = v44 & 0xFFFF00FF | (v42 << 8);
        goto LABEL_37;
      case 3:
        v81 = 5;
        break;
      case 1:
        v44 = 3;
        goto LABEL_36;
      case 2:
        v81 = 1;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F2E200);
    }
    v45 = v81 | (8 * v42);
LABEL_37:
    if ((v45 & 6) != 2)
      goto LABEL_42;
    v46 = v45 & 7;
    switch(v46)
    {
      case 2:
        LODWORD(v47) = v45 >> 8;
        if (*(unsigned int *)(a1 + 340) <= (unint64_t)(char)v47)
        {
          __break(0xC471u);
          JUMPOUT(0x198F2E304);
        }
        break;
      case 3:
        LODWORD(v47) = v45 >> 8;
        if (*(unsigned int *)(a1 + 484) <= (unint64_t)(char)v47)
        {
          __break(0xC471u);
          JUMPOUT(0x198F2E30CLL);
        }
        v47 = (char)v47;
        v48 = *(_QWORD *)(a1 + 472);
        goto LABEL_41;
      case 6:
        LODWORD(v47) = v45 >> 8;
        if (*(unsigned int *)(a1 + 340) <= (unint64_t)(char)v47)
        {
          __break(0xC471u);
          JUMPOUT(0x198F2E1C0);
        }
        break;
      default:
        goto LABEL_42;
    }
    v47 = (char)v47;
    v48 = *(_QWORD *)(a1 + 328);
LABEL_41:
    LODWORD(v93) = *(_DWORD *)(v48 + 4 * v47);
    switch((v93 >> 8) & 7)
    {
      case 0u:
      case 3u:
        break;
      case 1u:
        if (v93 == 192)
        {
          __break(0xC471u);
          JUMPOUT(0x198F2E2A0);
        }
        goto LABEL_90;
      case 2u:
        if (v93 == 192)
        {
          __break(0xC471u);
          JUMPOUT(0x198F2E2F4);
        }
LABEL_90:
        v82 = JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding::toValue((unsigned __int8 *)&v93);
        JSC::Wasm::BBQJITImpl::BBQJIT::flushValue(a1, (JSC::ARM64LogicalImmediate *)v82, v83, v83, v84, v85, v86, v87);
        v38 = *(unsigned int *)(v8 + 44);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F2E278);
    }
LABEL_42:
    v39 += 24;
  }
  v89 = 0;
  v90 = 0;
  if (v38)
  {
    if (v38 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x198F2E32CLL);
    }
    LODWORD(v90) = v38;
    v89 = (WTF *)WTF::fastMalloc((WTF *)(4 * v38));
    if (*(_DWORD *)(v8 + 44))
    {
      v49 = 0;
      for (j = 0; j < *(unsigned int *)(v8 + 44); ++j)
      {
        v51 = (uint64_t *)(*(_QWORD *)(v8 + 32) + v49);
        v52 = *v51;
        v53 = *((unsigned __int8 *)v51 + 8);
        if (v53)
        {
          if (v53 == 3)
          {
            v80 = 5;
LABEL_85:
            v55 = v80 | (8 * v52);
            goto LABEL_50;
          }
          if (v53 != 1)
          {
            if (v53 != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x198F2E1E0);
            }
            v80 = 1;
            goto LABEL_85;
          }
          v54 = 3;
        }
        else
        {
          v54 = 2;
        }
        v55 = v54 & 0xFFFF00FF | (v52 << 8);
LABEL_50:
        LODWORD(v93) = v55;
        v56 = HIDWORD(v90);
        if (HIDWORD(v90) == (_DWORD)v90)
        {
          WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::BBQJITImpl::BBQJIT::Location&>((uint64_t)&v89, (unint64_t)&v93);
        }
        else
        {
          *((_DWORD *)v89 + HIDWORD(v90)) = v55;
          HIDWORD(v90) = v56 + 1;
        }
        v49 += 24;
      }
    }
  }
LABEL_53:
  if (v15 == 1)
  {
    if (!HIDWORD(v90))
    {
      __break(0xC471u);
      JUMPOUT(0x198F2E334);
    }
    v67 = *v12;
    v68 = v12[1];
    v66 = v89;
    v69 = *(_DWORD *)v89;
    if (v68 == 1)
    {
      v75 = (unint64_t)v12[1];
      v76 = *(unsigned int *)v89;
      if ((*(_DWORD *)v89 & 7u) > 5 || ((1 << (v69 & 7)) & 0x32) == 0)
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v67, v75, v76, a5, a6, a7, a8);
      else
        JSC::Wasm::BBQJITImpl::BBQJIT::emitStoreConst(a1, v67, v75, v76, a5, a6, a7, a8);
    }
    else
    {
      v70 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v67, (uint64_t)v12[1], a4, a5, a6, a7, a8);
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMove(a1, (__int16)v68 >> 8, v70, v69, v71, v72, v73, v74);
    }
LABEL_62:
    WTF::fastFree((unint64_t)v66, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v95 = v15;
    if (v15)
    {
      if (v15 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198F2E324);
      }
      v57 = (void *)WTF::fastMalloc((WTF *)(4 * v15));
      v94 = v15;
      v93 = v57;
      bzero(v57, 4 * v15);
      for (k = 0; k != v15; ++k)
      {
        if (!*((_DWORD *)v57 + k))
          JSC::Wasm::BBQJITImpl::BBQJIT::emitShuffleMove<0ul,WTF::CrashOnOverflow>(a1, (uint64_t)&v91, (uint64_t)&v89, (uint64_t)&v93, k, v62, v63, v64);
      }
      WTF::fastFree((unint64_t)v57, v58, v59, v60, v61, v62, v63, v64);
    }
    v66 = v89;
    if (v89)
      goto LABEL_62;
  }
  if (v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::returnValuesFromCall<8ul>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BOOL4 v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;

  if (*(_DWORD *)(a4 + 60))
  {
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = *(_QWORD *)(a1 + 88);
      v15 = *(_DWORD *)(v14 + 596);
      if (!v15)
      {
        __break(0xC471u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(0xC471u);
        JUMPOUT(0x198F2E678);
      }
      v16 = *(_QWORD *)(*a3 + 16 * v13);
      v17 = *(_QWORD *)(v14 + 584) + 1232 * v15;
      v18 = *(_DWORD *)(v17 - 32);
      v19 = *(_DWORD *)(v17 - 160) == 5;
      v20 = *(_DWORD *)(v14 + 68);
      if (v16 - 192 <= 0x33)
      {
        if (((1 << (v16 + 64)) & 0xFFC19C001C000) != 0)
        {
          LOBYTE(v16) = -2;
        }
        else if (v16 == 192)
        {
          __break(0xC471u);
          JUMPOUT(0x198F2E668);
        }
      }
      v21 = ((unint64_t)v16 << 8) | 2;
      v22 = (v13 + v20 + v18 + v19);
      *(_QWORD *)&v38 = v22;
      *((_QWORD *)&v38 + 1) = v21;
      v23 = (uint64_t *)(*(_QWORD *)(a4 + 48) + v12);
      v24 = *v23;
      v25 = *((unsigned __int8 *)v23 + 8);
      if (!v25)
        break;
      switch(v25)
      {
        case 3:
          v33 = 5;
          break;
        case 1:
          v26 = 3;
          goto LABEL_10;
        case 2:
          v33 = 1;
          break;
        default:
LABEL_50:
          __break(0xC471u);
          JUMPOUT(0x198F2E648);
      }
      v27 = v33 | (8 * v24);
LABEL_11:
      if ((v27 & 6) == 2)
      {
        v28 = v27 & 7;
        switch(v28)
        {
          case 2:
            if (*(unsigned int *)(a1 + 340) <= (unint64_t)SBYTE1(v27))
              goto LABEL_48;
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 328) + 4 * SBYTE1(v27)) & 0x700) != 0x300)
              goto LABEL_15;
            if ((v27 & 0x4000) != 0)
              goto LABEL_47;
            v36 = 1 << SBYTE1(v27);
            v37 = *(_QWORD *)(a1 + 616);
            break;
          case 3:
            if (*(unsigned int *)(a1 + 484) <= (unint64_t)SBYTE1(v27))
            {
              __break(0xC471u);
              JUMPOUT(0x198F2E680);
            }
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 472) + 4 * SBYTE1(v27)) & 0x700) == 0x300)
            {
              v32 = (BYTE1(v27) + 32) & 0x7F;
              if (v32 >= 0x40)
                goto LABEL_47;
              *(_QWORD *)(a1 + 632) |= 1 << v32;
              if (((BYTE1(v27) + 32) & 0x60) == 0x20)
                *(_QWORD *)(a1 + 640) |= 1 << v32;
            }
            goto LABEL_15;
          case 6:
            if (*(unsigned int *)(a1 + 340) <= (unint64_t)SBYTE1(v27))
              goto LABEL_50;
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 328) + 4 * SBYTE1(v27)) & 0x700) != 0x300)
              goto LABEL_15;
            if ((v27 & 0x400000) != 0)
              goto LABEL_47;
            v37 = *(_QWORD *)(a1 + 616) | (1 << SBYTE2(v27));
            *(_QWORD *)(a1 + 616) = v37;
            if ((v27 & 0x4000) != 0)
              goto LABEL_47;
            v36 = 1 << SBYTE1(v27);
            break;
          default:
            goto LABEL_15;
        }
        *(_QWORD *)(a1 + 616) = v37 | v36;
      }
      else
      {
        v34 = JSC::Wasm::BBQJITImpl::BBQJIT::canonicalSlot(a1, v22, v21);
        v35 = v27;
        v27 = v34;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveMemory(a1, SBYTE9(v38), v35, v34);
        v21 = *((_QWORD *)&v38 + 1);
        v22 = v38;
      }
LABEL_15:
      JSC::Wasm::BBQJITImpl::BBQJIT::bind(a1, v22, v21, v27, a5, a6, a7, a8);
      v31 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v31 == *(_DWORD *)(a2 + 8))
      {
        WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Value,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::BBQJITImpl::BBQJIT::Value&>(a2, (unint64_t)&v38, v29, v30, a5, a6, a7, a8);
      }
      else
      {
        *(_OWORD *)(*(_QWORD *)a2 + 16 * v31) = v38;
        ++*(_DWORD *)(a2 + 12);
      }
      ++v13;
      v12 += 24;
      if (v13 >= *(unsigned int *)(a4 + 60))
        return;
    }
    v26 = 2;
LABEL_10:
    v27 = v26 & 0xFFFF00FF | (v24 << 8);
    goto LABEL_11;
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitIndirectCall(uint64_t a1, const char *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int *a8, uint64_t a9, char a10)
{
  uint64_t *v18;
  unsigned __int8 **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  __int128 v91;
  uint64_t v92;
  unsigned int v93[3];
  char v94[8];
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;

  if (a10 != 1)
  {
    __break(0xC471u);
    goto LABEL_19;
  }
  v18 = JSC::Wasm::wasmCallingConvention((JSC::Wasm *)a1);
  if (*(_DWORD *)(a7 + 32))
    v19 = 0;
  else
    v19 = (unsigned __int8 **)(a7 + 8);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)v18, v19, 0, v94);
  if ((unint64_t)(v97 + 15) >> 31)
  {
    __break(0xC471u);
LABEL_19:
    JUMPOUT(0x198F2E85CLL);
  }
  v24 = (v97 + 15) & 0xFFFFFFF0;
  if (*(_DWORD *)(a1 + 1284) > v24)
    v24 = *(_DWORD *)(a1 + 1284);
  *(_DWORD *)(a1 + 1284) = v24;
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 0, a4, 19, v20, v21, v22, v23, (uint64_t)v93);
  JSC::MacroAssemblerARM64::move(*(_DWORD **)(a1 + 8), a4, 19, v25, v26, v27, v28, v29);
  JSC::Wasm::BBQJITImpl::BBQJIT::loadWebAssemblyGlobalState(a1, 22, 23, v30, v31, v32, v33, v34);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v93, *(_QWORD *)(a1 + 8), v35, v36, v37, v38, v39, v40);
  v41 = *(_QWORD *)(a1 + 8);
  v91 = v95;
  v92 = v96;
  LODWORD(v98) = JSC::Wasm::BBQJITImpl::BBQJIT::Location::fromArgumentLocation((unsigned __int8 *)&v91);
  v42 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v98);
  JSC::MacroAssemblerARM64::store64(v41, a6, v42, v43, v44, v45, v46, v47);
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), a5, a5, v48, v49, v50, v51, v52);
  JSC::Wasm::BBQJITImpl::BBQJIT::prepareForExceptions(a1, v53, v54, v55, v56, v57, v58, v59);
  JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<0ul>(a1, a8, (uint64_t)v94, a7, v60, v61, v62, v63);
  v64 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v64 + 208) = 0;
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v64 + 56), (32 * (a5 & 0x1F)) | 0xD63F0000, v65, v66, v67, v68, v69, v70);
  if (*(_DWORD *)(a7 + 32))
    v75 = 0;
  else
    v75 = (_QWORD *)(a7 + 8);
  JSC::Wasm::BBQJITImpl::BBQJIT::returnValuesFromCall<8ul>(a1, a9, v75, (uint64_t)v94, v71, v72, v73, v74);
  JSC::Wasm::BBQJITImpl::BBQJIT::restoreWebAssemblyGlobalStateAfterWasmCall((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v76, v77, v78, v79, v80, v81, v82);
  if (HIBYTE(word_1ECF4C700))
  {
    v98 = a2;
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v90 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v90;
      }
      while (v90 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>(&v98, " ");
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Value,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,char [4],WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Value,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, 1, a3, (uint64_t)a8, "=> ", a9);
  }
  JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)v94, v83, v84, v85, v86, v87, v88, v89);
}

unint64_t JSC::Wasm::BBQJITImpl::BBQJIT::addRTTSlowPathJump(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v11;
  JSC::AssemblerBuffer *v12;
  int i;
  unsigned int v14;
  unint64_t v15;
  _DWORD *v16;
  int v17;
  unint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::AssemblerBuffer *v22;
  _DWORD *v23;
  JSC::AssemblerBuffer *v24;
  JSC::AssemblerBuffer *v25;
  int v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  char v30;

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (JSC::AssemblerBuffer *)(v11 + 56);
  for (i = *(_DWORD *)(v11 + 200); i < *(_DWORD *)(v11 + 52); *(_DWORD *)(v11 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(v11 + 192))
    {
      v24 = v12;
      JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
      v12 = v24;
      i = *(_DWORD *)(v11 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v11 + 56) + i) = -721215457;
    i = *(_DWORD *)(v11 + 200) + 4;
  }
  v14 = i;
  if ((i + 4) > *(_DWORD *)(v11 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(v11 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v11 + 56) + v14) = 335544320;
  *(_DWORD *)(v11 + 200) += 4;
  if (*(_BYTE *)(v11 + 328))
    v15 = 0xFF000F4500000000;
  else
    v15 = 0xFF000F4100000000;
  v16 = *(_DWORD **)(a1 + 8);
  v17 = v16[50];
  if (v17 < v16[13])
  {
    v22 = (JSC::AssemblerBuffer *)(v16 + 14);
    do
    {
      if ((v17 + 4) > v16[48])
      {
        v23 = v16;
        v25 = v22;
        JSC::AssemblerBuffer::outOfLineGrow(v22, a2, a3, a4, a5, a6, a7, a8);
        v16 = v23;
        v22 = v25;
        v17 = v23[50];
      }
      *(_DWORD *)(*((_QWORD *)v16 + 7) + v17) = -721215457;
      v17 = v16[50] + 4;
      v16[50] = v17;
    }
    while (v17 < v16[13]);
  }
  v16[52] = 0;
  result = a1 + 2992;
  v26 = i;
  v27 = v15;
  v28 = v17;
  v29 = a2;
  v30 = v8;
  v19 = *(unsigned int *)(a1 + 3004);
  if ((_DWORD)v19 == *(_DWORD *)(a1 + 3000))
  {
    result = WTF::Vector<std::tuple<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,unsigned long,JSC::ARM64Registers::RegisterID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v19 + 1, (unint64_t)&v26);
    v20 = *(_QWORD *)(a1 + 2992) + 32 * *(unsigned int *)(a1 + 3004);
    *(_DWORD *)v20 = *(_DWORD *)result;
    *(_QWORD *)(v20 + 4) = *(_QWORD *)(result + 4);
    *(_DWORD *)(v20 + 12) = *(_DWORD *)(result + 12);
    *(_QWORD *)(v20 + 16) = *(_QWORD *)(result + 16);
    *(_BYTE *)(v20 + 24) = *(_BYTE *)(result + 24);
  }
  else
  {
    v21 = *(_QWORD *)result + 32 * v19;
    *(_DWORD *)v21 = i;
    *(_QWORD *)(v21 + 4) = v15;
    *(_DWORD *)(v21 + 12) = v17;
    *(_QWORD *)(v21 + 16) = a2;
    *(_BYTE *)(v21 + 24) = v8;
  }
  ++*(_DWORD *)(a1 + 3004);
  return result;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addCallIndirect(_BYTE *a1, uint64_t *a2, unsigned int a3, JSC::Wasm::TypeDefinition *this, unsigned int *a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v12;
  JSC::ARM64LogicalImmediate *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unsigned int v142[3];
  int v143[3];
  int v144[3];
  unsigned __int8 v145[8];
  char v146;
  unsigned __int8 v147;
  char v148;
  unsigned __int8 v149[40];
  uint64_t v150[3];

  v7 = a5[3];
  if (!(_DWORD)v7)
  {
    __break(0xC471u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)a5 + 16 * v7;
  v13 = *(JSC::ARM64LogicalImmediate **)(v12 - 16);
  v14 = *(_QWORD *)(v12 - 8);
  a5[3] = v7 - 1;
  v150[0] = (uint64_t)v13;
  v150[1] = v14;
  v138 = JSC::Wasm::TypeDefinition::expand((unint64_t)this);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::ScratchScope<JSC::RegisterSet>((uint64_t)v149, (JSC::Wasm::BBQJITImpl::BBQJIT *)a2, 0xFFuLL, 0, v15, v16, v17, v18);
  v19 = v149[8];
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindPreserved((uint64_t)v149);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<3,0>::ScratchScope<>((uint64_t)v145, (JSC::Wasm::BBQJITImpl::BBQJIT *)a2, v20, v21, v22, v23, v24, v25);
  if (v14 == 1)
  {
    LOBYTE(v36) = v147;
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst((uint64_t)a2, v13, v14, ((unint64_t)v147 << 8) | 2, v27, v28, v29, v30);
  }
  else
  {
    v36 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary((uint64_t)a2, (uint64_t)v13, v14, v26, v27, v28, v29, v30) >> 8;
  }
  v37 = v146;
  JSC::MacroAssemblerARM64::load64(a2[1], ((unint64_t)((120 * *(_DWORD *)(a2[6] + 36) + 8 * a3 + 152) >> 3) << 35) | 0x13, (char)v19, v31, v32, v33, v34, v35);
  v43 = a2[6];
  if (*(_DWORD *)(v43 + 204) <= a3)
  {
    __break(0xC471u);
LABEL_23:
    JUMPOUT(0x198F2EEA0);
  }
  v44 = *(_QWORD *)(v43 + 192);
  v45 = (unsigned int *)(v44 + 48 * a3);
  v46 = *(_QWORD *)(v45 + 1);
  if ((v46 & 0xFF00000000) != 0 && *v45 == (_DWORD)v46)
  {
    v47 = a2[1];
    if (*(_BYTE *)(v44 + 48 * a3 + 12))
      JSC::MacroAssemblerARM64::load64(v47, v19 | 0x3000000000, v37, v38, v39, v40, v41, v42);
    else
      JSC::MacroAssemblerARM64::add64(v47, 56, (char)v19, v37, v39, v40, v41, v42);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2[1], (JSC::ARM64LogicalImmediate *)*v45, (char)v19, v48, v49, v50, v51, v52);
  }
  else
  {
    JSC::MacroAssemblerARM64::load64(a2[1], v19 | 0x3000000000, v37, v38, v39, v40, v41, v42);
    JSC::MacroAssemblerARM64::load32(a2[1], v19 | 0x400000000, (char)v19, v131, v132, v133, v134, v135);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::consume((uint64_t)a2, (uint64_t)v13, v14, v53, v54, v55, v56, v57);
  JSC::MacroAssemblerARM64::branch32(a2[1], 2, (char)v36, (char)v19, v58, v59, v60, v61, (uint64_t)v144);
  JSC::Wasm::BBQJITImpl::BBQJIT::throwExceptionIf((unint64_t)a2, 2u, v144, v62, v63, v64, v65, v66);
  v67 = v146;
  v68 = v147;
  v69 = v148;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2[1], 48, 8, v70, v71, v72, v73, v74);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2[1] + 56), (32 * (v36 & 0x1F)) & 0x83FF | ((v37 & 0x1F) << 10) | 0x9BA80008, v75, v76, v77, v78, v79, v80);
  v81 = (char)v68;
  JSC::MacroAssemblerARM64::load64(a2[1], 0x1000000008, v81, v82, v83, v84, v85, v86);
  JSC::MacroAssemblerARM64::load64(a2[1], v68, v81, v87, v88, v89, v90, v91);
  JSC::CCallHelpers::storeWasmCalleeCallee((_DWORD *)a2[1], v81, v92, v93, v94, v95, v96, v97);
  JSC::MacroAssemblerARM64::loadPair64((_DWORD *)a2[1], 8, 32, v67, v81, v98, v99, v100);
  if (!BYTE2(dword_1ECF4C7B0) || JSC::Wasm::TypeDefinition::isFinalType(this))
  {
    v104 = v69;
    v105 = 0;
  }
  else
  {
    v104 = v69;
    JSC::MacroAssemblerARM64::move((_DWORD *)a2[1], 8, v69, v136, v137, v101, v102, v103);
    v105 = 1;
  }
  JSC::MacroAssemblerARM64::loadPair64((_DWORD *)a2[1], 8, 0, 8, (char)v19, v101, v102, v103);
  JSC::MacroAssemblerARM64::branchTest64(a2[1], 0, 8, 8, v106, v107, v108, v109, (uint64_t)v143);
  JSC::Wasm::BBQJITImpl::BBQJIT::throwExceptionIf((unint64_t)a2, 3u, v143, v110, v111, v112, v113, v114);
  JSC::MacroAssemblerARM64::branch64(a2[1], 0, 8, (uint64_t)this, v115, v116, v117, v118, (uint64_t)v142);
  if (v105)
    JSC::Wasm::BBQJITImpl::BBQJIT::addRTTSlowPathJump((uint64_t)a2, (uint64_t)this, v104, v120, v121, v122, v123, v124);
  else
    JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException((uint64_t)a2, (JSC::ARM64LogicalImmediate *)6, v119, v120, v121, v122, v123, v124);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v142, a2[1], v125, v126, v127, v128, v129, v130);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<3,0>::unbindScratches(v145);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<3,0>::unbindPreserved((uint64_t)v145);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindScratches(v149);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindPreserved((uint64_t)v149);
  JSC::Wasm::BBQJITImpl::BBQJIT::emitIndirectCall((uint64_t)a2, "CallIndirect", v150, (char)v67, (char)v19, v81, v138, a5, a6, a7);
  *a1 = 0;
  a1[8] = 0;
}

void JSC::CCallHelpers::storeWasmCalleeCallee(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v10;

  v8 = a2;
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)a1, "< Store Callee's wasm callee");
  v10 = a1[50];
  if (v10 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v10) = v8 & 0x1F | 0xF80083E0;
  a1[50] += 4;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addUnreachable(JSC::Wasm::BBQJITImpl::BBQJIT *this, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  const char *v11;

  if (HIBYTE(word_1ECF4C700))
  {
    v11 = "Unreachable";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*a2)
    {
      v10 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v10;
      }
      while (v10 < *a2);
    }
    WTF::dataLog<char const*,char [2]>(&v11, " ");
    WTF::dataLog<char [16]>("\n");
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException((uint64_t)a2, (JSC::ARM64LogicalImmediate *)8, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v13;
  JSC::ARM64LogicalImmediate *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  int v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  BOOL v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD v40[2];
  unsigned int v41;
  _QWORD v42[2];

  v9 = a2;
  v42[0] = a2;
  v42[1] = a3;
  v10 = a3;
  if (a3 == 4)
    return v9;
  v11 = a4;
  v13 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((v13 & 6) == 2)
    return v13;
  v41 = v11;
  if ((v11 & 7) != 0)
  {
    v31 = BYTE1(a3) == 251 || ((a3 >> 8) & 0xFE) == 252;
    v32 = v31;
    v33 = v11 & 7;
    if ((((v33 == 3) ^ v32) & 1) == 0)
    {
      if (v33 != 2)
      {
        if (v33 != 6
          && (v33 != 3 || (JSC::RegisterSet::contains((_QWORD *)(a1 + 632), (BYTE1(v11) + 32) & 0x7F, 4u) & 1) != 0))
        {
          goto LABEL_12;
        }
        goto LABEL_4;
      }
      if ((v11 & 0x4000) == 0)
      {
        if (((*(_QWORD *)(a1 + 616) >> SBYTE1(v11)) & 1) != 0)
          goto LABEL_12;
        goto LABEL_4;
      }
      __break(1u);
      return v13;
    }
  }
LABEL_4:
  if ((BYTE1(a3) + 5) > 2u)
  {
    v24 = *(_QWORD *)(a1 + 616);
    if (v24)
      v22 = __clz(__rbit64(v24));
    else
      v22 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v14, v15, v16, v17, v18, v19, v20);
    v23 = 2;
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 632);
    if (v21)
      v22 = __clz(__rbit64(v21)) - 32;
    else
      v22 = JSC::Wasm::BBQJITImpl::BBQJIT::evictFPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v14, v15, v16, v17, v18, v19, v20);
    v23 = 3;
  }
  v11 = v23 & 0xFFFF00FF | (v22 << 8);
  v41 = v11;
LABEL_12:
  v25 = *(_DWORD *)(a1 + 1168);
  *(_DWORD *)(a1 + 1168) = v25 + 1;
  v26 = v11 & 7;
  switch(v26)
  {
    case 2:
      v27 = SBYTE1(v11);
      if (SBYTE1(v11) < (unint64_t)*(unsigned int *)(a1 + 860))
      {
        v28 = *(_QWORD *)(a1 + 848);
LABEL_15:
        v29 = (_DWORD *)(v28 + 4 * v27);
        goto LABEL_16;
      }
LABEL_57:
      __break(0xC471u);
      JUMPOUT(0x198F2F28CLL);
    case 3:
      v27 = SBYTE1(v11);
      if (SBYTE1(v11) >= (unint64_t)*(unsigned int *)(a1 + 1020))
      {
        __break(0xC471u);
        JUMPOUT(0x198F2F294);
      }
      v28 = *(_QWORD *)(a1 + 1008);
      goto LABEL_15;
    case 6:
      v37 = *(unsigned int *)(a1 + 860);
      if (SBYTE1(v11) >= v37)
      {
        __break(0xC471u);
        JUMPOUT(0x198F2F2A4);
      }
      v38 = *(_QWORD *)(a1 + 848);
      if ((*(_DWORD *)(v38 + 4 * SBYTE1(v11)) & 0x80000000) == 0)
      {
        *(_DWORD *)(v38 + 4 * SBYTE1(v11)) = v25;
        v37 = *(unsigned int *)(a1 + 860);
      }
      v39 = (uint64_t)((unint64_t)v11 << 40) >> 56;
      if (v39 < v37)
      {
        v29 = (_DWORD *)(v38 + 4 * v39);
LABEL_16:
        if ((*v29 & 0x80000000) == 0)
          *v29 = v25;
        break;
      }
      goto LABEL_57;
  }
  if (v10 == 3)
  {
    v35 = *(_QWORD *)(a1 + 88);
    v36 = *(_DWORD *)(v35 + 596);
    if (!v36)
    {
      __break(0xC471u);
      JUMPOUT(0x198F2F29CLL);
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::touch((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)(*(_QWORD *)(v35 + 584) + 1232 * v36 - 168), v9);
  }
  if ((_BYTE)word_1ECF4C700)
  {
    v40[0] = JSC::Wasm::makeString(SBYTE1(a3));
    v40[1] = v34;
    WTF::dataLog<char [15],JSC::Wasm::BBQJITImpl::BBQJIT::Value,char [12],WTF::ASCIILiteral,char [5],JSC::Wasm::BBQJITImpl::BBQJIT::Location,char [2]>((uint64_t)v42, (uint64_t)v40, (int *)&v41);
  }
  return JSC::Wasm::BBQJITImpl::BBQJIT::bind(a1, v9, a3, v11, v17, v18, v19, v20);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::evictFPR(JSC::Wasm::BBQJITImpl::BBQJIT *this, JSC::ARM64LogicalImmediate *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  unsigned __int8 v20;
  uint64_t v21;
  __int128 v22;
  unsigned int v23;

  v10 = *((unsigned int *)this + 255);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = -1;
    v13 = -1;
    while (1)
    {
      v14 = ((_BYTE)v11 + 32) & 0x7F;
      if ((((_BYTE)v11 + 32) & 0x60) == 0x20 && (((_BYTE)v11 + 32) & 0x60) == 0x20)
      {
        if (v14 >= 0x40)
        {
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        v18 = 1 << v14;
        if ((*((_QWORD *)this + 144) & v18) == 0 || (*((_QWORD *)this + 145) & v18) == 0)
        {
LABEL_7:
          v15 = *(_DWORD *)(*((_QWORD *)this + 126) + 4 * v11);
          if ((v15 & 0x80000000) == 0 && (v13 < 0 || v15 < v13))
          {
            v13 = *(_DWORD *)(*((_QWORD *)this + 126) + 4 * v11);
            v12 = v11;
          }
        }
      }
      else
      {
        if (v14 >= 0x40)
          goto LABEL_28;
        if (((*((_QWORD *)this + 144) >> v14) & 1) == 0)
          goto LABEL_7;
      }
      if (v10 == ++v11)
        goto LABEL_23;
    }
  }
  v12 = -1;
LABEL_23:
  if (*((unsigned int *)this + 121) <= (unint64_t)v12)
  {
    __break(0xC471u);
    JUMPOUT(0x198F2F508);
  }
  v8 = *(_DWORD *)(*((_QWORD *)this + 59) + 4 * v12);
  v23 = v8;
  if ((_BYTE)word_1ECF4C700)
  {
    v22 = *(_OWORD *)&(&JSC::ARM64Assembler::fprName(JSC::ARM64Registers::FPRegisterID)::nameForRegister)[2 * v12];
    WTF::dataLog<char [18],WTF::ASCIILiteral,char [21],JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding,char [2]>("BBQ\tEvicting FPR ", (uint64_t)&v22, (uint64_t)&v23);
  }
  a3 = 0;
  LODWORD(v10) = (v8 >> 8) & 7;
  if ((_DWORD)v10)
  {
LABEL_29:
    switch((_DWORD)v10)
    {
      case 2:
        if (v8 - 192 > 0x33)
        {
          v20 = v8;
        }
        else if (((1 << (v8 + 64)) & 0xFFC19C001C000) != 0)
        {
          v20 = -2;
        }
        else
        {
          v20 = v8;
          if (v8 == 192)
          {
            __break(0xC471u);
            JUMPOUT(0x198F2F428);
          }
        }
        a2 = (JSC::ARM64LogicalImmediate *)(v8 >> 11);
        v21 = 2;
        break;
      case 3:
        goto LABEL_27;
      case 1:
        if (v8 - 192 > 0x33)
        {
          v20 = v8;
        }
        else if (((1 << (v8 + 64)) & 0xFFC19C001C000) != 0)
        {
          v20 = -2;
        }
        else
        {
          v20 = v8;
          if (v8 == 192)
          {
            __break(0xC471u);
            JUMPOUT(0x198F2F4C8);
          }
        }
        a2 = (JSC::ARM64LogicalImmediate *)(v8 >> 11);
        v21 = 3;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F2F4E8);
    }
    a3 = v21 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v20 << 8);
  }
LABEL_27:
  JSC::Wasm::BBQJITImpl::BBQJIT::flushValue((uint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  return v12;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR(JSC::Wasm::BBQJITImpl::BBQJIT *this, JSC::ARM64LogicalImmediate *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  char v14;
  unsigned int v15;
  uint64_t v18;
  unsigned __int8 v20;
  uint64_t v21;
  __int128 v22;
  unsigned int v23;

  v10 = *((unsigned int *)this + 215);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = -1;
    v13 = -1;
    while (1)
    {
      v14 = v11 & 0x7F;
      if ((v11 & 0x60) == 0x20 && (v11 & 0x60) == 0x20)
      {
        if ((v11 & 0x40) != 0)
        {
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        v18 = 1 << v14;
        if ((*((_QWORD *)this + 124) & v18) == 0 || (*((_QWORD *)this + 125) & v18) == 0)
        {
LABEL_7:
          v15 = *(_DWORD *)(*((_QWORD *)this + 106) + 4 * v11);
          if ((v15 & 0x80000000) == 0 && (v13 < 0 || v15 < v13))
          {
            v13 = *(_DWORD *)(*((_QWORD *)this + 106) + 4 * v11);
            v12 = v11;
          }
        }
      }
      else
      {
        if ((v11 & 0x40) != 0)
          goto LABEL_28;
        if (((*((_QWORD *)this + 124) >> v14) & 1) == 0)
          goto LABEL_7;
      }
      if (v10 == ++v11)
        goto LABEL_23;
    }
  }
  v12 = -1;
LABEL_23:
  if (*((unsigned int *)this + 85) <= (unint64_t)v12)
  {
    __break(0xC471u);
    JUMPOUT(0x198F2F764);
  }
  v8 = *(_DWORD *)(*((_QWORD *)this + 41) + 4 * v12);
  v23 = v8;
  if ((_BYTE)word_1ECF4C700)
  {
    v22 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v12];
    WTF::dataLog<char [18],WTF::ASCIILiteral,char [21],JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding,char [2]>("BBQ\tEvicting GPR ", (uint64_t)&v22, (uint64_t)&v23);
  }
  a3 = 0;
  LODWORD(v10) = (v8 >> 8) & 7;
  if ((_DWORD)v10)
  {
LABEL_29:
    switch((_DWORD)v10)
    {
      case 2:
        if (v8 - 192 > 0x33)
        {
          v20 = v8;
        }
        else if (((1 << (v8 + 64)) & 0xFFC19C001C000) != 0)
        {
          v20 = -2;
        }
        else
        {
          v20 = v8;
          if (v8 == 192)
          {
            __break(0xC471u);
            JUMPOUT(0x198F2F684);
          }
        }
        a2 = (JSC::ARM64LogicalImmediate *)(v8 >> 11);
        v21 = 2;
        break;
      case 3:
        goto LABEL_27;
      case 1:
        if (v8 - 192 > 0x33)
        {
          v20 = v8;
        }
        else if (((1 << (v8 + 64)) & 0xFFC19C001C000) != 0)
        {
          v20 = -2;
        }
        else
        {
          v20 = v8;
          if (v8 == 192)
          {
            __break(0xC471u);
            JUMPOUT(0x198F2F724);
          }
        }
        a2 = (JSC::ARM64LogicalImmediate *)(v8 >> 11);
        v21 = 3;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F2F744);
    }
    a3 = v21 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v20 << 8);
  }
LABEL_27:
  JSC::Wasm::BBQJITImpl::BBQJIT::flushValue((uint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  return v12;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::clobber(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = result;
  v3 = ((_BYTE)a2 + 32) & 0x7F;
  if ((((_BYTE)a2 + 32) & 0x60) != 0x20)
  {
    if (v3 < 0x40)
    {
      v4 = 1 << v3;
      if ((*(_QWORD *)(result + 664) & v4) == 0)
        return result;
      v5 = *(_QWORD *)(result + 632);
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v3 >= 0x40)
    goto LABEL_21;
  v4 = 1 << v3;
  if ((*(_QWORD *)(result + 664) & v4) != 0 && (*(_QWORD *)(result + 672) & v4) != 0)
  {
    if ((*(_QWORD *)(result + 632) & v4) == 0)
      goto LABEL_6;
    v5 = *(_QWORD *)(result + 640);
LABEL_5:
    if ((v5 & v4) != 0)
      return result;
LABEL_6:
    if (*(unsigned int *)(result + 484) > (unint64_t)a2)
    {
      v6 = *(_QWORD *)(result + 472) + 4 * a2;
      if ((_BYTE)word_1ECF4C700)
      {
        v15 = *(_OWORD *)&(&JSC::ARM64Assembler::fprName(JSC::ARM64Registers::FPRegisterID)::nameForRegister)[2 * a2];
        v14 = v6;
        WTF::dataLog<char [20],WTF::ASCIILiteral,char [21],JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding,char [2]>("BBQ\tClobbering FPR ", (uint64_t)&v15, " currently bound to ", v6, "\n");
        v6 = v14;
      }
      if ((*(_WORD *)(v6 + 1) & 7) != 0 && (*(_WORD *)(v6 + 1) & 7) != 3)
      {
        v8 = JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding::toValue((unsigned __int8 *)v6);
        return JSC::Wasm::BBQJITImpl::BBQJIT::flushValue(v2, (JSC::ARM64LogicalImmediate *)v8, v9, v9, v10, v11, v12, v13);
      }
      __break(0xC471u);
LABEL_23:
      JUMPOUT(0x198F2F848);
    }
LABEL_22:
    __break(0xC471u);
    goto LABEL_23;
  }
  return result;
}

void JSC::Wasm::parseAndCompileBBQ(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, int a10, int a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned __int8 *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  _OWORD *v40;
  JSC::CCallHelpers *v41;
  JSC::CCallHelpers *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  JSC::Wasm::TypeDefinition *v59;
  int v60;
  char *v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  WTF *v67;
  unint64_t v68;
  JSC::Wasm::BBQDisassembler *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  unint64_t v78;
  _DWORD *v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  unsigned __int8 **v84;
  void *v85;
  _DWORD *v86;
  uint64_t v87;
  const JSC::Wasm::Type *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  char *v93;
  unsigned int v94;
  __int128 v95;
  char v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  int v108;
  unsigned __int8 v109;
  int v110;
  unsigned int v111;
  WTF *v112;
  unint64_t v113;
  WTF *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  JSC::Wasm::TypeDefinition *v119;
  WTF *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unsigned __int8 *v126;
  unint64_t v127;
  uint64_t v128;
  char v129;
  int v130;
  unint64_t v131;
  WTF::BitVector *v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  _DWORD *v147;
  int i;
  _DWORD *v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _DWORD *v178;
  unsigned int v179;
  _DWORD *v180;
  int v181;
  int v182;
  unsigned int v183;
  int v184;
  unsigned int v185;
  _QWORD *v186;
  uint64_t v187;
  _DWORD *v188;
  unint64_t v189;
  char v190;
  int v191;
  unint64_t v192;
  int *v193;
  unsigned __int8 *v194;
  unsigned int v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unsigned int v201;
  unint64_t v202;
  uint64_t *v203;
  WTF *v204;
  char *v205;
  _QWORD *v206;
  char v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _BYTE *v218;
  char *v219;
  uint64_t v220;
  WTF::AtomStringImpl *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  JSC::Wasm::InternalFunction *v236;
  uint64_t v237;
  unsigned __int8 *v238;
  int v239;
  _DWORD *v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  unsigned int v250;
  _DWORD *v251;
  uint64_t *v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  unsigned int v264;
  int *v265;
  int *v266;
  int v267;
  uint64_t v268;
  uint64_t *v269;
  unsigned __int8 *v270;
  unsigned __int8 *v272;
  int v273;
  uint64_t v274;
  unsigned int *v275;
  uint64_t v276;
  unsigned int *v277;
  unsigned int v278;
  unsigned int v279;
  unint64_t v280;
  unsigned int v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  void *v301;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  _DWORD *v314;
  int j;
  int v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  _BYTE *v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unsigned int **v331;
  uint64_t v332;
  unsigned int **v333;
  unsigned int **v334;
  unsigned int *v335;
  unsigned int v336;
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  unsigned int v340;
  WTF *v341;
  char *v342;
  _OWORD *v343;
  void *v344;
  int v345;
  char *v346;
  _OWORD *v347;
  _DWORD *v348;
  WTF *v349;
  int v350;
  char *v351;
  void *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  void *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  double v366;
  double v367;
  WTF *v368;
  JSC::Wasm::WasmOpcodeCounter *v369;
  unsigned __int8 *v370;
  unint64_t v371;
  WTF *v372;
  _DWORD *v373;
  int m;
  unsigned int v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  void *v382;
  WTF *v383;
  uint64_t v384;
  int *v385;
  int v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  _DWORD *v390;
  int *v391;
  uint64_t v392;
  int v393;
  unint64_t v394;
  uint64_t *v395;
  void *v396;
  uint64_t v398;
  uint64_t v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  JSC::ARM64LogicalImmediate *v403;
  char *v404;
  char *v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t k;
  uint64_t v409;
  WTF *v410;
  unsigned int v411;
  uint64_t v412;
  _OWORD *v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  _DWORD *v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  unsigned int v421;
  unsigned int v422;
  WTF *v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  WTF *v427;
  WTF *v428;
  WTF *v429;
  WTF *v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  unint64_t v434;
  unint64_t v435;
  unint64_t v436;
  int *v437;
  _OWORD *v438;
  WTF *v440;
  WTF *v442;
  WTF *v443;
  unsigned int *v444;
  unsigned int *v445;
  unsigned int v446;
  unsigned int v447;
  WTF *v448;
  WTF *v450;
  WTF *v452;
  WTF *v453;
  WTF *v454;
  WTF *v455;
  WTF *v456;
  WTF *v457;
  WTF *v458;
  unint64_t v459;
  void *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  WTF *v467;
  unint64_t v468;
  void *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  _DWORD *v476;
  int v477;
  unsigned int v478;
  _DWORD *v479;
  int v480;
  unsigned int v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unsigned int v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  int v502;
  unsigned int v503;
  _DWORD *v504;
  _QWORD *v505;
  int v506;
  uint64_t v507;
  uint64_t *v508;
  int v509;
  WTF::AtomStringImpl *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  void *v517;
  void *v518;
  WTF *v519;
  unint64_t v520;
  unint64_t v521;
  unint64_t v522;
  const void *v523;
  void *v524;
  char *v525;
  uint64_t v526;
  unsigned int v527;
  unsigned int v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  int v534;
  unsigned int v535;
  _DWORD *v536;
  _QWORD *v537;
  int v538;
  char *v539;
  uint64_t *v540;
  unsigned __int8 *v541;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unsigned __int8 *v550;
  int v551;
  int *v552;
  uint64_t v553;
  unsigned int *v554;
  uint64_t v555;
  unsigned int *v556;
  unsigned int v557;
  unsigned int v558;
  uint64_t v559;
  unsigned int v560;
  void *v561;
  int *v562;
  uint64_t v563;
  int v564;
  int *v565;
  uint64_t v566;
  int v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  _BYTE *v573;
  unsigned int *v574;
  unsigned int *v575;
  unsigned int v576;
  unsigned int v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  float v581;
  _BYTE *v582;
  uint64_t v583;
  uint64_t v584;
  int *v585;
  __int128 v586;
  __int128 v587;
  uint64_t v588;
  __int128 *v589;
  __int128 v590;
  __int128 v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t v599;
  unint64_t v600;
  unint64_t v601;
  _QWORD *v602;
  _QWORD *v603;
  size_t v604;
  WTF *v605;
  uint64_t v606;
  unint64_t v607;
  unint64_t v608;
  BOOL v609;
  _BYTE *v610;
  uint64_t v611;
  int v612;
  WTF *v613;
  char *v614;
  uint64_t v615;
  unint64_t v616;
  void *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  const void *v624;
  uint64_t v625;
  uint64_t v626;
  unsigned int v627;
  unsigned int v628;
  unsigned int v629;
  unsigned int v630;
  unsigned int v631;
  unsigned int v632;
  unsigned int v633;
  unsigned int v634;
  unsigned int v635;
  unint64_t v636;
  void *v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  unint64_t v645;
  uint64_t v646;
  unsigned int v647;
  uint64_t v648;
  unsigned int v649;
  unsigned int v650;
  unint64_t v651;
  void *v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  int v659;
  int v660;
  unsigned int *v661;
  WTF *v662;
  unint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  unint64_t CachedUnrolling;
  uint64_t v671;
  uint64_t v672;
  const JSC::Wasm::Type *v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  char v677;
  unsigned int *v678;
  unint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  unint64_t v686;
  uint64_t v687;
  uint64_t v688;
  const JSC::Wasm::Type *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  char v693;
  unsigned int *v694;
  unint64_t v695;
  uint64_t v696;
  uint64_t *v697;
  uint64_t v698;
  uint64_t v699;
  const JSC::Wasm::TypeDefinition *v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  const JSC::Wasm::TypeDefinition *v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  const JSC::Wasm::TypeDefinition *v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  unsigned int v719;
  WTF::AtomStringImpl *v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  WTF::StringImpl *v727;
  unint64_t v728;
  void *v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t *v737;
  uint64_t v738;
  uint64_t v739;
  BOOL v740;
  BOOL v741;
  WTF::BitVector *v742;
  uint64_t *v743;
  WTF **v744;
  _BYTE *v745;
  WTF **v746;
  unint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  _QWORD *v751;
  int *v752;
  uint64_t v753;
  _OWORD *v754;
  void *v755;
  char v756;
  unsigned __int8 *v757;
  uint64_t v758;
  unint64_t v759;
  void *v760;
  WTF *v761;
  unsigned int v762;
  unsigned int v763;
  WTF *v764;
  WTF *v765;
  uint64_t v766;
  _BYTE v767[512];
  WTF *v768;
  uint64_t v769;
  _BYTE v770[19712];
  WTF *v771;
  uint64_t v772;
  _BYTE v773[256];
  JSC::Wasm::TypeDefinition *v774;
  int *v775;
  __int128 v776;
  uint64_t v777;
  unsigned __int8 v778;
  __int128 v779;
  unsigned __int8 **v780;
  int v781[2];
  uint64_t v782;
  _QWORD *v783;
  char *v784;
  int v785;
  int *v786;
  char v787;
  uint64_t v788;
  __int16 v789;
  uint64_t v790;
  WTF *v791;
  uint64_t v792;
  _BYTE v793[16];
  _DWORD v794[4];
  _QWORD *v795;
  uint64_t v796;
  _QWORD v797[3];
  _QWORD v798[3];
  _BYTE v799[40];
  uint64_t v800;
  int v801;
  uint64_t v802;
  unint64_t v803;
  uint64_t v804;
  int v805;
  int v806;
  __int128 v807;
  int v808;
  WTF *v809;
  uint64_t v810;
  _BYTE v811[128];
  WTF *v812;
  uint64_t v813;
  _BYTE v814[128];
  __int128 v815;
  __int128 v816;
  uint64_t v817;
  uint64_t v818;
  __int128 v819;
  WTF *v820;
  uint64_t v821;
  _BYTE v822[32];
  WTF *v823;
  uint64_t v824;
  _BYTE v825[32];
  WTF *v826;
  uint64_t v827;
  _BYTE v828[32];
  WTF *v829;
  uint64_t v830;
  uint64_t v831;
  WTF *v832;
  uint64_t v833;
  _OWORD v834[9];
  WTF *v835;
  uint64_t v836;
  _OWORD v837[9];
  int v838;
  WTF *v839;
  uint64_t v840;
  _BYTE v841[64];
  WTF *v842;
  uint64_t v843;
  uint64_t v844;
  _QWORD v845[4];
  __int128 v846;
  __int128 v847;
  uint64_t v848;
  _OWORD *v849;
  __int128 *v850;
  uint64_t v851;
  __int128 v852;
  uint64_t v853;
  __int128 *v854;
  uint64_t v855;
  __int128 v856;
  uint64_t v857;
  __int128 *v858;
  uint64_t v859;
  __int128 v860;
  uint64_t v861;
  __int128 *v862;
  uint64_t v863;
  __int128 v864;
  uint64_t v865;
  __int128 *v866;
  uint64_t v867;
  __int128 v868;
  uint64_t v869;
  __int128 *v870;
  uint64_t v871;
  __int128 v872;
  uint64_t v873;
  __int128 *v874;
  uint64_t v875;
  __int128 v876;
  uint64_t v877;
  __int128 *v878;
  uint64_t v879;
  __int128 v880;
  uint64_t v881;
  __int128 *v882;
  uint64_t v883;
  __int128 v884;
  uint64_t v885;
  __int128 *v886;
  uint64_t v887;
  __int128 v888;
  uint64_t v889;
  __int128 *v890;
  uint64_t v891;
  __int128 v892;
  uint64_t v893;
  __int128 *v894;
  uint64_t v895;
  __int128 v896;
  uint64_t v897;
  __int128 *v898;
  uint64_t v899;
  __int128 v900;
  uint64_t v901;
  __int128 *v902;
  uint64_t v903;
  __int128 v904;
  uint64_t v905;
  __int128 *v906;
  uint64_t v907;
  __int128 v908;
  uint64_t v909;
  __int128 *v910;
  uint64_t v911;
  __int128 v912;
  uint64_t v913;
  __int128 *v914;
  uint64_t v915;
  __int128 v916;
  uint64_t v917;
  __int128 *v918;
  uint64_t v919;
  __int128 v920;
  uint64_t v921;
  __int128 *v922;
  uint64_t v923;
  __int128 v924;
  uint64_t v925;
  __int128 *v926;
  uint64_t v927;
  __int128 v928;
  uint64_t v929;
  __int128 *v930;
  uint64_t v931;
  __int128 v932;
  uint64_t v933;
  __int128 *v934;
  uint64_t v935;
  __int128 v936;
  uint64_t v937;
  __int128 *v938;
  uint64_t v939;
  __int128 v940;
  uint64_t v941;
  __int128 *v942;
  uint64_t v943;
  __int128 v944;
  uint64_t v945;
  __int128 *v946;
  uint64_t v947;
  __int128 v948;
  uint64_t v949;
  __int128 *v950;
  uint64_t v951;
  __int128 v952;
  uint64_t v953;
  __int128 *v954;
  uint64_t v955;
  __int128 v956;
  uint64_t v957;
  __int128 *v958;
  uint64_t v959;
  __int128 v960;
  uint64_t v961;
  __int128 *v962;
  uint64_t v963;
  __int128 v964;
  uint64_t v965;
  __int128 *v966;
  uint64_t v967;
  __int128 v968;
  uint64_t v969;
  __int128 *v970;
  uint64_t v971;
  __int128 v972;
  uint64_t v973;
  __int128 *v974;
  uint64_t v975;
  __int128 v976;
  uint64_t v977;
  __int128 *v978;
  uint64_t v979;
  __int128 v980;
  uint64_t v981;
  __int128 *v982;
  uint64_t v983;
  __int128 v984;
  uint64_t v985;
  __int128 *v986;
  uint64_t v987;
  __int128 v988;
  uint64_t v989;
  __int128 *v990;
  uint64_t v991;
  __int128 v992;
  uint64_t v993;
  __int128 *v994;
  uint64_t v995;
  __int128 v996;
  uint64_t v997;
  __int128 *v998;
  uint64_t v999;
  __int128 v1000;
  uint64_t v1001;
  __int128 *v1002;
  uint64_t v1003;
  __int128 v1004;
  uint64_t v1005;
  __int128 *v1006;
  uint64_t v1007;
  __int128 v1008;
  uint64_t v1009;
  __int128 v1010;
  __int128 v1011;
  __int128 v1012;
  __int128 v1013;
  char v1014;
  WTF *v1015;
  uint64_t v1016;
  JSC::ExecutableMemoryHandle *v1017;
  _QWORD v1018[4];
  double v1019;
  void *v1020;
  char v1021;
  void *__dst[2];
  int v1023;
  unsigned int v1024;
  uint64_t v1025;
  uint64_t v1026;
  WTF *v1027;
  uint64_t v1028;
  _BYTE v1029[512];
  int v1030;
  __int128 v1031;
  uint64_t *v1032;
  int v1033;
  int v1034;
  uint64_t v1035;
  uint64_t *v1036;
  int v1037;
  int v1038;
  uint64_t v1039;
  _BYTE *v1040;
  unsigned int v1041;
  int v1042;
  _BYTE v1043[24];
  unsigned int **v1044;
  int v1045;
  int v1046;
  uint64_t v1047;
  uint64_t v1048;
  int v1049;
  uint64_t v1050;
  uint64_t v1051;
  int v1052;
  unsigned __int8 *v1053;
  JSC::ExecutableMemoryHandle *v1054;
  JSC::Wasm::TypeDefinition *v1055;
  int v1056;
  char v1057;
  int v1058;
  char v1059;
  __int128 v1060;
  int v1061;
  int v1062;
  int v1063;
  uint64_t v1064;
  __int128 v1065;
  _BYTE v1066[152];
  unsigned int *v1067;

  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v18 = v17;
  v19 = v16;
  v751 = v20;
  v752 = (int *)v15;
  v21 = v14;
  v22 = v13;
  v749 = v23;
  v750 = v12;
  v748 = v24;
  v1018[0] = "BBQ";
  v1018[1] = 4;
  v1018[2] = "Total BBQ";
  v1018[3] = 10;
  v1019 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v606 = mach_absolute_time();
    v608 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v608 != -1)
    {
      v757 = (unsigned __int8 *)__dst;
      v780 = &v757;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v780, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v607) = dword_1ECF4400C;
    v1019 = (double)(v606 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v607 * 1000000000.0);
  }
  v25 = (uint64_t *)JSC::Wasm::thunks;
  v26 = (unsigned __int8 *)(JSC::Wasm::thunks + 8);
  v757 = (unsigned __int8 *)(JSC::Wasm::thunks + 8);
  LOBYTE(v758) = 1;
  if (__ldaxr((unsigned __int8 *)(JSC::Wasm::thunks + 8)))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v26);
    goto LABEL_5;
  }
  if (__stxr(1u, v26))
    goto LABEL_4;
LABEL_5:
  JSC::Wasm::Thunks::stub(v25, (uint64_t)&v757, (void (*)(uint64_t))JSC::Wasm::catchInWasmThunkGenerator, v13, v14, v15, v16, v17, &v1016);
  if ((_BYTE)v758)
  {
    v35 = v757;
    v36 = __ldxr(v757);
    if (v36 == 1)
    {
      if (!__stlxr(0, v757))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v35, 0, v29, v30, v31, v32, v33, v34);
  }
LABEL_11:
  v37 = (unsigned int *)v1017;
  v1017 = 0;
  if (v37)
  {
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      atomic_store(1u, v37);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v37, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v616, v617, v618, v619, v620, v621, v622, v623);
    }
  }
  v40 = (_OWORD *)WTF::fastMalloc((WTF *)0x50);
  *v40 = 0u;
  v40[1] = 0u;
  v40[2] = 0u;
  v40[3] = 0u;
  v754 = v40;
  v40[4] = 0u;
  v41 = (JSC::CCallHelpers *)WTF::fastMalloc((WTF *)0x160);
  v42 = JSC::CCallHelpers::CCallHelpers(v41, 0);
  v50 = *(_QWORD *)(v750 + 8);
  *(_QWORD *)(v750 + 8) = v42;
  if (v50)
  {
    v51 = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler(v50, v43, v44, v45, v46, v47, v48, v49);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
    v42 = *(JSC::CCallHelpers **)(v750 + 8);
  }
  LODWORD(v780) = 0;
  *(_QWORD *)v781 = v42;
  v782 = v749;
  v783 = v751;
  v59 = (JSC::Wasm::TypeDefinition *)v22;
  if (*(_DWORD *)(v22 + 32) == 4)
  {
    v661 = *(unsigned int **)(v22 + 8);
    v662 = *(WTF **)v661;
    v59 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v661 + 8) + 8 * v661[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v59))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v22, v663, v664, v665, v666, v667, v668, v669);
      if (v677)
      {
        v59 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v59 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v59, v662, v671, v672, v673, v674, v675, v676);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v22, v59, v700, v701, v702, v703, v704, v705);
      }
    }
  }
  v60 = *((_DWORD *)v59 + 8);
  if (v60 == 5)
  {
    v59 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v59 + 1);
    v60 = *((_DWORD *)v59 + 8);
  }
  v785 = v18;
  if (v60)
    v61 = 0;
  else
    v61 = (char *)v59 + 8;
  v784 = v61;
  v786 = v752;
  v787 = v19;
  v789 = a9;
  v788 = v21;
  v790 = a12;
  v791 = (WTF *)v793;
  v792 = 4;
  v794[3] = 0;
  v795 = v797;
  v796 = 2;
  v797[1] = v798;
  v797[2] = 2;
  v798[1] = v799;
  *(_OWORD *)&v799[24] = 0u;
  *(_QWORD *)&v62 = -1;
  *((_QWORD *)&v62 + 1) = -1;
  v798[2] = 2;
  v800 = -1;
  v801 = 0;
  v802 = 4278193985;
  v804 = 0;
  v805 = 0;
  v806 = a11;
  v807 = 0u;
  v808 = 1;
  memset(v811, 0, sizeof(v811));
  v63 = (uint64_t)v811;
  v803 = 0x8000000000000000;
  v809 = (WTF *)v811;
  v810 = 0x2000000020;
  memset(v814, 0, sizeof(v814));
  v812 = (WTF *)v814;
  v813 = 0x2000000020;
  v820 = (WTF *)v822;
  v821 = 8;
  v823 = (WTF *)v825;
  v824 = 8;
  v826 = (WTF *)v828;
  v827 = 8;
  v829 = (WTF *)&v831;
  v830 = 8;
  v832 = (WTF *)v834;
  v833 = 0x2000000020;
  v834[6] = v62;
  v834[7] = v62;
  v834[4] = v62;
  v834[5] = v62;
  v834[2] = v62;
  v834[3] = v62;
  v834[0] = v62;
  v834[1] = v62;
  v834[8] = 0u;
  v835 = (WTF *)v837;
  v836 = 0x2000000020;
  v837[0] = v62;
  v837[1] = v62;
  v837[2] = v62;
  v837[3] = v62;
  v837[4] = v62;
  v837[5] = v62;
  v837[6] = v62;
  v837[7] = v62;
  v838 = 0;
  v837[8] = 0u;
  v839 = (WTF *)v841;
  v840 = 8;
  v842 = (WTF *)&v844;
  v843 = 1;
  *(_QWORD *)((char *)v845 + 6) = 0;
  v845[0] = 0;
  v845[2] = 0;
  v849 = v754;
  v853 = 0;
  v852 = 0u;
  v850 = &v852;
  v851 = 2;
  v857 = 0;
  v856 = 0u;
  v854 = &v856;
  v855 = 2;
  v861 = 0;
  v860 = 0u;
  v858 = &v860;
  v859 = 2;
  v865 = 0;
  v864 = 0u;
  v862 = &v864;
  v863 = 2;
  v869 = 0;
  v868 = 0u;
  v866 = &v868;
  v867 = 2;
  v873 = 0;
  v872 = 0u;
  v870 = &v872;
  v871 = 2;
  v877 = 0;
  v876 = 0u;
  v874 = &v876;
  v875 = 2;
  v881 = 0;
  v880 = 0u;
  v878 = &v880;
  v879 = 2;
  v885 = 0;
  v884 = 0u;
  v882 = &v884;
  v883 = 2;
  v888 = 0u;
  v889 = 0;
  v886 = &v888;
  v887 = 2;
  v893 = 0;
  v892 = 0u;
  v890 = &v892;
  v891 = 2;
  v897 = 0;
  v896 = 0u;
  v894 = &v896;
  v895 = 2;
  v901 = 0;
  v900 = 0u;
  v898 = &v900;
  v899 = 2;
  v905 = 0;
  v904 = 0u;
  v902 = &v904;
  v903 = 2;
  v909 = 0;
  v908 = 0u;
  v906 = &v908;
  v907 = 2;
  v913 = 0;
  v912 = 0u;
  v910 = &v912;
  v911 = 2;
  v917 = 0;
  v916 = 0u;
  v914 = &v916;
  v915 = 2;
  v921 = 0;
  v920 = 0u;
  v918 = &v920;
  v919 = 2;
  v925 = 0;
  v924 = 0u;
  v922 = &v924;
  v923 = 2;
  v929 = 0;
  v928 = 0u;
  v926 = &v928;
  v927 = 2;
  v933 = 0;
  v932 = 0u;
  v930 = &v932;
  v931 = 2;
  v936 = 0u;
  v937 = 0;
  v934 = &v936;
  v935 = 2;
  v941 = 0;
  v940 = 0u;
  v938 = &v940;
  v939 = 2;
  v945 = 0;
  v944 = 0u;
  v942 = &v944;
  v943 = 2;
  v949 = 0;
  v948 = 0u;
  v946 = &v948;
  v947 = 2;
  v953 = 0;
  v952 = 0u;
  v950 = &v952;
  v951 = 2;
  v957 = 0;
  v956 = 0u;
  v954 = &v956;
  v955 = 2;
  v961 = 0;
  v960 = 0u;
  v958 = &v960;
  v959 = 2;
  v965 = 0;
  v964 = 0u;
  v962 = &v964;
  v963 = 2;
  v969 = 0;
  v968 = 0u;
  v966 = &v968;
  v967 = 2;
  v973 = 0;
  v972 = 0u;
  v970 = &v972;
  v971 = 2;
  v977 = 0;
  v976 = 0u;
  v974 = &v976;
  v975 = 2;
  v981 = 0;
  v980 = 0u;
  v978 = &v980;
  v979 = 2;
  v984 = 0u;
  v985 = 0;
  v982 = &v984;
  v983 = 2;
  v989 = 0;
  v988 = 0u;
  v986 = &v988;
  v987 = 2;
  v993 = 0;
  v992 = 0u;
  v990 = &v992;
  v991 = 2;
  v997 = 0;
  v996 = 0u;
  v994 = &v996;
  v995 = 2;
  v1001 = 0;
  v1000 = 0u;
  v998 = &v1000;
  v999 = 2;
  v1005 = 0;
  v1004 = 0u;
  v1002 = &v1004;
  v1003 = 2;
  v1009 = 0;
  v1008 = 0u;
  v1006 = &v1008;
  v1007 = 2;
  v1012 = 0u;
  v1011 = 0u;
  v1010 = 0u;
  v1013 = 0u;
  v1014 = byte_1ECF4C5E2;
  v1015 = 0;
  v817 = 65279;
  v818 = 0;
  v815 = 0xFEFFuLL;
  *(_QWORD *)&v819 = 0x7FFE00FF00000000;
  *((_QWORD *)&v819 + 1) = 0x7FFE00FF00000000;
  v816 = v819;
  v845[3] = 0xFFFFLL;
  v846 = xmmword_19919F710;
  v847 = xmmword_19919F720;
  v848 = 0x7FFF00FF00000000;
  v64 = 65279;
  do
  {
    v65 = __clz(__rbit64(v64));
    if (v65 >= HIDWORD(v833))
    {
      __break(0xC471u);
      JUMPOUT(0x198F333D0);
    }
    *((_DWORD *)v834 + v65) = 0;
    v64 &= v64 - 1;
  }
  while (v64);
  v66 = v816;
  if ((_QWORD)v816)
  {
    v67 = v835;
    do
    {
      v68 = (char)(__clz(__rbit64(v66)) - 32);
      if (v68 >= HIDWORD(v836))
      {
        __break(0xC471u);
        JUMPOUT(0x198F333C8);
      }
      *((_DWORD *)v67 + v68) = 0;
      v66 &= v66 - 1;
    }
    while (v66);
  }
  if ((_BYTE)word_1ECF4C700)
    WTF::dataLog<char [20],JSC::RegisterSet,char [15],JSC::RegisterSet,char [2]>((JSC::RegisterSet *)&v815, (JSC::RegisterSet *)&v816);
  if (byte_1ECF4C288
    || (!HIBYTE(word_1ECF4C286) ? (v740 = byte_1ECF4C28E == 0) : (v740 = 0),
        v740 ? (v741 = word_1ECF4C2A0 == 0) : (v741 = 0),
        !v741))
  {
    v69 = (JSC::Wasm::BBQDisassembler *)WTF::fastMalloc((WTF *)0x30);
    JSC::Wasm::BBQDisassembler::BBQDisassembler(v69);
    v63 = (uint64_t)v1015;
    v1015 = v77;
    if (v63)
    {
      v78 = *(_QWORD *)(v63 + 8);
      if (v78)
      {
        *(_QWORD *)(v63 + 8) = 0;
        *(_DWORD *)(v63 + 16) = 0;
        WTF::fastFree(v78, v70, v71, v72, v73, v74, v75, v76);
      }
      WTF::fastFree(v63, v70, v71, v72, v73, v74, v75, v76);
      v69 = v1015;
    }
    v79 = *(_DWORD **)v781;
    v80 = *(_DWORD *)(*(_QWORD *)v781 + 200);
    if (v80 < *(_DWORD *)(*(_QWORD *)v781 + 52))
    {
      v63 = *(_QWORD *)v781 + 56;
      do
      {
        if ((v80 + 4) > v79[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v79 + 14), (uint64_t)v70, v71, v72, v73, v74, v75, v76);
          v80 = v79[50];
        }
        *(_DWORD *)(*((_QWORD *)v79 + 7) + v80) = -721215457;
        v80 = v79[50] + 4;
        v79[50] = v80;
      }
      while (v80 < v79[13]);
    }
    v79[52] = 0;
    *(_DWORD *)v69 = v80;
  }
  v81 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v81 != -1)
  {
    v757 = (unsigned __int8 *)&v1065;
    __dst[0] = &v757;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, __dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  v82 = v22;
  if (*(_DWORD *)(v22 + 32) == 4)
  {
    v678 = *(unsigned int **)(v22 + 8);
    v63 = *(_QWORD *)v678;
    v82 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v678 + 8) + 8 * v678[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference((JSC::Wasm::TypeDefinition *)v82))
    {
      v686 = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v22, v679, v680, v681, v682, v683, v684, v685);
      if (v693)
      {
        v82 = v686;
      }
      else
      {
        v82 = (uint64_t)JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v82, (WTF *)v63, v687, v688, v689, v690, v691, v692);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v22, (WTF *)v82, v706, v707, v708, v709, v710, v711);
      }
    }
  }
  v83 = *(_DWORD *)(v82 + 32);
  if (v83 == 5)
  {
    v82 = **(_QWORD **)(v82 + 8);
    v83 = *(_DWORD *)(v82 + 32);
  }
  if (v83)
    v84 = 0;
  else
    v84 = (unsigned __int8 **)(v82 + 8);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v84, 1, (char *)&v757);
  LODWORD(v1065) = 0;
  v93 = v784;
  if (*((_DWORD *)v784 + 2))
  {
    v94 = 0;
    v747 = (unint64_t)&v791;
    v746 = &v829;
    do
    {
      v95 = *(_OWORD *)(*(_QWORD *)v93 + 16 * (*((_DWORD *)v93 + 3) + v94));
      *(_OWORD *)__dst = v95;
      v96 = v95;
      if (v95 - 192 <= 0x33)
      {
        if (((1 << (v95 + 64)) & 0xFFC19C001C000) != 0)
        {
          v96 = -2;
        }
        else if (v95 == 192)
        {
          __break(0xC471u);
          JUMPOUT(0x198F33174);
        }
      }
      v97 = JSC::Wasm::BBQJITImpl::BBQJIT::sizeOfType(v96);
      LODWORD(v845[0]) = ((v97 + LODWORD(v845[0]) - 1) & -v97) + v97;
      LODWORD(v1053) = 1 - 8 * LODWORD(v845[0]);
      if (HIDWORD(v827) == (_DWORD)v827)
      {
        WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::BBQJITImpl::BBQJIT::Location>((uint64_t)&v826, (unint64_t)&v1053, v98, v99, v100, v101, v102, v103);
      }
      else
      {
        *((_DWORD *)v826 + HIDWORD(v827)) = 1 - 8 * LODWORD(v845[0]);
        ++HIDWORD(v827);
      }
      LODWORD(v1053) = 0;
      if (HIDWORD(v821) == (_DWORD)v821)
      {
        WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::BBQJITImpl::BBQJIT::Location>((uint64_t)&v820, (unint64_t)&v1053, v98, v99, v100, v101, v102, v103);
      }
      else
      {
        *((_DWORD *)v820 + HIDWORD(v821)) = 0;
        ++HIDWORD(v821);
      }
      v104 = HIDWORD(v830);
      if (HIDWORD(v830) == (_DWORD)v830)
      {
        WTF::Vector<JSC::Wasm::TypeKind,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::TypeKind const&>((uint64_t)&v829, (unint64_t)__dst);
      }
      else
      {
        *((_BYTE *)v829 + HIDWORD(v830)) = __dst[0];
        HIDWORD(v830) = v104 + 1;
      }
      v105 = LOBYTE(__dst[0]);
      if ((unint64_t)LOBYTE(__dst[0]) - 192 <= 0x33)
      {
        if (((1 << (LOBYTE(__dst[0]) + 64)) & 0xFFC19C001C000) != 0)
        {
          v105 = 254;
        }
        else if (LOBYTE(__dst[0]) == 192)
        {
          __break(0xC471u);
          JUMPOUT(0x198F33154);
        }
      }
      if (v763 <= v1065)
      {
        __break(0xC471u);
        JUMPOUT(0x198F33418);
      }
      v106 = (char *)v761 + 24 * v1065;
      v107 = *(_QWORD *)v106;
      v108 = v106[8];
      if (v108)
      {
        if (v108 == 3)
        {
          v111 = (8 * v107) | 5;
          goto LABEL_65;
        }
        if (v108 != 1)
        {
          if (v108 != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x198F32FA8);
          }
          v111 = (8 * v107) | 1;
          goto LABEL_65;
        }
        v109 = v107;
        v110 = 3;
      }
      else
      {
        v109 = v107;
        v110 = 2;
      }
      v111 = v110 & 0xFFFF00FF | (v109 << 8);
LABEL_65:
      v82 = v82 & 0xFFFFFFFFFFFF0000 | (v105 << 8) | 3;
      v63 = v63 & 0xFFFFFFFF00000000 | v1065;
      JSC::Wasm::BBQJITImpl::BBQJIT::bind((uint64_t)&v780, v63, v82, v111, v100, v101, v102, v103);
      if (HIDWORD(v792) == (_DWORD)v792)
      {
        WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)&v791, (unint64_t)&v1065);
      }
      else
      {
        *((_DWORD *)v791 + HIDWORD(v792)) = v1065;
        ++HIDWORD(v792);
      }
      v94 = v1065 + 1;
      LODWORD(v1065) = v94;
      v93 = v784;
    }
    while (v94 < *((_DWORD *)v784 + 2));
  }
  LODWORD(v845[1]) = v845[0];
  v112 = v764;
  if (&v766 != (uint64_t *)v764 && v764)
  {
    v764 = 0;
    LODWORD(v765) = 0;
    WTF::fastFree((unint64_t)v112, v85, (uint64_t)v86, v87, (uint64_t)v88, v89, v90, v91);
  }
  v113 = 20320;
  v114 = v761;
  if (v761)
  {
    v761 = 0;
    v762 = 0;
    WTF::fastFree((unint64_t)v114, v85, (uint64_t)v86, v87, (uint64_t)v88, v89, v90, v91);
  }
  v115 = v751[2];
  v116 = *((unsigned int *)v751 + 7);
  v757 = 0;
  v758 = v115;
  v759 = v116;
  v117 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v117 != -1)
  {
    __dst[0] = &v1053;
    *(_QWORD *)&v1065 = __dst;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v1065, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v760 = JSC::Wasm::TypeInformation::singleton(void)::theOne;
  LOBYTE(v761) = 0;
  v762 = 0;
  HIDWORD(v761) = 0;
  v118 = (unint64_t)&v757;
  v764 = (WTF *)&v780;
  v765 = (WTF *)v767;
  v766 = 16;
  v768 = (WTF *)v770;
  v769 = 16;
  v771 = (WTF *)v773;
  v772 = 16;
  if (*(_DWORD *)(v22 + 32) == 4)
  {
    v694 = *(unsigned int **)(v22 + 8);
    v113 = *(_QWORD *)v694;
    v119 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v694 + 8) + 8 * v694[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v119))
    {
      v695 = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v22, (unint64_t)v85, (uint64_t)v86, v87, (uint64_t)v88, v89, v90, v91);
      if ((_BYTE)v85)
      {
        v119 = (JSC::Wasm::TypeDefinition *)v695;
      }
      else
      {
        v119 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v119, (WTF *)v113, (uint64_t)v86, v87, v88, v89, v90, v91);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v22, v119, v712, v713, v714, v715, v716, v717);
      }
    }
  }
  else
  {
    v119 = (JSC::Wasm::TypeDefinition *)v22;
  }
  if (*((_DWORD *)v119 + 8) == 5)
    v119 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v119 + 1);
  v774 = v119;
  v775 = v752;
  v776 = 0u;
  v777 = 0x8000000000000000;
  v778 = 0;
  v779 = 0u;
  v120 = v764;
  *((_QWORD *)v764 + 11) = &v757;
  if (*((_DWORD *)v119 + 8))
  {
    v614 = "type signature was not a function signature";
    v615 = 44;
LABEL_639:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v614, (unint64_t *)&v757, v615, __dst, v92);
    goto LABEL_171;
  }
  v122 = *((unsigned int *)v119 + 4);
  v121 = *((unsigned int *)v119 + 5);
  if ((_DWORD)v122)
  {
    v123 = 0;
    v124 = *((_DWORD *)v119 + 5);
    v125 = *((unsigned int *)v119 + 4);
    do
    {
      if (*(unsigned __int8 *)(*((_QWORD *)v119 + 1) + 16 * v124) == 251)
        ++v123;
      ++v124;
      --v125;
    }
    while (v125);
    if (v123)
      goto LABEL_178;
  }
  if ((_DWORD)v121)
  {
    v237 = 0;
    v238 = (unsigned __int8 *)*((_QWORD *)v119 + 1);
    do
    {
      v239 = *v238;
      v238 += 16;
      if (v239 == 251)
        ++v237;
      --v121;
    }
    while (v121);
    if (v237)
LABEL_178:
      *((_BYTE *)v120 + 1292) = 1;
  }
  if (*((_DWORD *)v120 + 27) != (_DWORD)v122)
  {
    __break(0xC471u);
    JUMPOUT(0x198F328D8);
  }
  v126 = v757;
  v127 = v759 - (_QWORD)v757;
  if (v759 <= (unint64_t)v757)
    goto LABEL_760;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v131 = (unint64_t)&v1013;
  v132 = (WTF::BitVector *)&v777;
  ++v757;
  v133 = &v126[v758];
  v134 = v126 + 2;
  while (1)
  {
    v135 = (char)v133[v128];
    v130 |= (v135 & 0x7F) << v129;
    if ((v135 & 0x80000000) == 0)
      break;
    if (v127 >= 5)
      v578 = 5;
    else
      v578 = v127;
    if (v578 - 1 == v128)
      goto LABEL_760;
    v757 = &v134[v128];
    v129 += 7;
    if (v127 == ++v128)
    {
LABEL_540:
      __break(1u);
      goto LABEL_541;
    }
  }
  if ((_DWORD)v128 == 4 && v133[v128] >= 0x10u)
  {
LABEL_760:
    v614 = "can't get local groups count";
    v615 = 29;
    goto LABEL_639;
  }
  LODWORD(v752) = v130;
  v743 = (uint64_t *)&v1013;
  v744 = &v768;
  v136 = v772;
  v137 = HIDWORD(v772);
  if (v772 < v122)
  {
    v113 = (unint64_t)v771;
    if (v122 >= 0x11)
    {
      if (!(v122 >> 28))
      {
        WTF::tryFastMalloc((WTF *)(16 * v122), __dst);
        v573 = __dst[0];
        if (__dst[0])
        {
          LODWORD(v772) = v122;
          v771 = (WTF *)__dst[0];
          goto LABEL_527;
        }
        LODWORD(v122) = *((_DWORD *)v119 + 4);
      }
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>("can't allocate enough memory for function's ", (unint64_t *)&v757, 45, v122, " arguments", 11, __dst, v92);
      goto LABEL_171;
    }
    v573 = v773;
    v771 = (WTF *)v773;
    LODWORD(v772) = 16;
LABEL_527:
    memcpy(v573, (const void *)v113, 16 * v137);
    if (v773 != (_BYTE *)v113 && v113)
    {
      if (v771 == (WTF *)v113)
      {
        v771 = 0;
        LODWORD(v772) = 0;
      }
      WTF::fastFree(v113, v85, (uint64_t)v86, v87, (uint64_t)v88, v89, v90, v91);
    }
    v122 = *((unsigned int *)v119 + 4);
    v136 = v772;
    LODWORD(v137) = HIDWORD(v772);
  }
  v138 = v122 + v137;
  if (v138 > v136)
  {
    v113 = (unint64_t)v771;
    if (v138 < 0x11)
    {
      v771 = (WTF *)v773;
      LODWORD(v772) = 16;
      v605 = (WTF *)v773;
    }
    else
    {
      if (v138 >> 28)
      {
LABEL_802:
        __break(0xC471u);
        JUMPOUT(0x198F322CCLL);
      }
      v605 = (WTF *)WTF::fastMalloc((WTF *)(16 * v138));
      LODWORD(v772) = v122 + v137;
      v771 = v605;
    }
    memcpy(v605, (const void *)v113, 16 * v137);
    if (v773 != (_BYTE *)v113 && v113)
    {
      if (v771 == (WTF *)v113)
      {
        v771 = 0;
        LODWORD(v772) = 0;
      }
      WTF::fastFree(v113, v85, (uint64_t)v86, v87, (uint64_t)v88, v89, v90, v91);
    }
  }
  if ((_DWORD)v122)
  {
    v139 = 0;
    v140 = HIDWORD(v772);
    do
    {
      *((_OWORD *)v771 + v140) = *(_OWORD *)(*((_QWORD *)v119 + 1) + 16 * (v139 + *((_DWORD *)v119 + 5)));
      v140 = ++HIDWORD(v772);
      ++v139;
    }
    while (v122 != v139);
  }
  v131 = *((unsigned int *)v119 + 4);
  if ((_DWORD)v752)
  {
    v122 = 0;
    v87 = 0;
    while (1)
    {
      v133 = v757;
      v189 = v759 - (_QWORD)v757;
      if (v759 <= (unint64_t)v757)
        goto LABEL_763;
      v128 = 0;
      v190 = 0;
      LODWORD(v118) = 0;
      LOBYTE(v127) = v758;
      ++v757;
      while (1)
      {
        v191 = (char)v133[v758 + v128];
        v118 = ((v191 & 0x7F) << v190) | v118;
        if ((v191 & 0x80000000) == 0)
          break;
        v579 = 5;
        if (v189 < 5)
          v579 = v189;
        if (v579 - 1 == v128)
          goto LABEL_763;
        v757 = &v133[v128++ + 2];
        v190 += 7;
        if (!&v133[v128 - v759])
          goto LABEL_540;
      }
      if ((_DWORD)v128 == 4 && v133[v758 + v128] >= 0x10u)
      {
LABEL_763:
        v219 = "can't get Function's number of locals in group ";
        v220 = 48;
LABEL_170:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int>(v219, (unint64_t *)&v757, v220, v87, __dst, v92);
LABEL_171:
        v755 = __dst[0];
        v756 = 1;
        goto LABEL_172;
      }
      v192 = v131 + v118;
      if (v192 >= 0xC351)
      {
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long>("Function's number of locals is too big ", (unint64_t *)&v757, 40, v192, " maximum ", 10, 50000, __dst, v92);
        goto LABEL_171;
      }
      LODWORD(v746) = v87;
      v745 = (_BYTE *)v122;
      v747 = v192;
      if ((unint64_t)&v133[v128 + 1] >= v759)
        goto LABEL_169;
      v193 = v775;
      v194 = &v133[v128];
      v757 = v194 + 2;
      v195 = (char)v194[v758 + 1];
      if ((v195 & 0x80000000) != 0)
        goto LABEL_169;
      v113 = v195 | (v195 >> 6 << 7);
      if (!JSC::Wasm::isValidTypeKind<signed char>((char)(v195 | ((v195 >> 6) << 7))))
        goto LABEL_169;
      if (!BYTE1(dword_1ECF4C7B0))
        break;
      v196 = (char)v113;
      v197 = (char)v113 + 22;
      if (v197 <= 9 && (((1 << v197) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
      {
        v198 = 227;
        goto LABEL_608;
      }
      if ((v113 + 29) >= 2u)
        goto LABEL_141;
      LODWORD(__dst[0]) = 0;
      if (!WTF::LEBDecoder::decodeInt32(v758, v759, (uint64_t *)&v757, (int *)__dst))
        goto LABEL_169;
      v196 = SLODWORD(__dst[0]);
      if (((uint64_t)__dst[0] & 0x80000000) != 0)
      {
        if ((unint64_t)(SLODWORD(__dst[0]) + 22) > 9
          || ((1 << (LOBYTE(__dst[0]) + 22)) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
        {
          goto LABEL_169;
        }
        goto LABEL_142;
      }
      if (LODWORD(__dst[0]) >= v193[25])
      {
        if (!(_BYTE)v761)
          goto LABEL_169;
        v612 = HIDWORD(v761);
        if (LODWORD(__dst[0]) < HIDWORD(v761) || LODWORD(__dst[0]) >= v762)
          goto LABEL_169;
LABEL_709:
        JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(LODWORD(__dst[0]) - v612), v611, (uint64_t)v88, v89, v90, v91, (unsigned int **)__dst);
        v196 = (unint64_t)__dst[0];
        __dst[0] = 0;
        if (v196)
        {
          do
          {
            v649 = __ldaxr((unsigned int *)v196);
            v650 = v649 - 1;
          }
          while (__stlxr(v650, (unsigned int *)v196));
          if (!v650)
          {
            atomic_store(1u, (unsigned int *)v196);
            WTF::fastFree(v196, v85, (uint64_t)v86, v648, (uint64_t)v88, v89, v90, v91);
          }
        }
        goto LABEL_142;
      }
      if ((_BYTE)v761)
      {
        v612 = HIDWORD(v761);
        if (LODWORD(__dst[0]) >= HIDWORD(v761))
          goto LABEL_709;
      }
      v196 = *(_QWORD *)(*((_QWORD *)v193 + 11) + 8 * LODWORD(__dst[0]));
LABEL_142:
      v198 = v113;
      if (v113 - 252 < 4)
        goto LABEL_143;
      if (v113 - 239 < 2)
      {
        if (BYTE1(dword_1ECF4C7B0))
          goto LABEL_169;
        goto LABEL_143;
      }
      if (v113 == 251)
      {
        if (!HIBYTE(dword_1ECF4C7B0))
          goto LABEL_169;
        *((_BYTE *)v764 + 1292) = 1;
        v198 = 251;
        goto LABEL_143;
      }
      if (v113 - 227 > 1)
        goto LABEL_169;
LABEL_608:
      if (BYTE1(dword_1ECF4C7B0))
        v609 = v196 == 0;
      else
        v609 = 1;
      if (v609)
      {
LABEL_169:
        v219 = "can't get Function local's type in group ";
        v220 = 42;
        LODWORD(v87) = (_DWORD)v746;
        goto LABEL_170;
      }
      v610 = v745;
      if (v198 == 228)
        v610 = v745 + 1;
      v745 = v610;
      if (v198 == 228)
        v198 = 228;
      else
        v198 = 227;
LABEL_143:
      v742 = v132;
      if (v747 > v772)
      {
        v113 = (unint64_t)v771;
        v580 = HIDWORD(v772);
        if (v747 < 0x11)
        {
          v582 = v773;
          v771 = (WTF *)v773;
          LODWORD(v772) = 16;
        }
        else
        {
          WTF::tryFastMalloc((WTF *)(16 * v747), __dst);
          v582 = __dst[0];
          if (!__dst[0])
          {
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral>("can't allocate enough memory for function's ", (unint64_t *)&v757, 45, v747, " locals", 8, __dst, v581);
            goto LABEL_171;
          }
          LODWORD(v772) = v747;
          v771 = (WTF *)__dst[0];
        }
        memcpy(v582, (const void *)v113, 16 * v580);
        if (v773 != (_BYTE *)v113 && v113)
        {
          if (v771 == (WTF *)v113)
          {
            v771 = 0;
            LODWORD(v772) = 0;
          }
          WTF::fastFree(v113, v85, (uint64_t)v86, v583, (uint64_t)v88, v89, v90, v91);
        }
      }
      v199 = HIDWORD(v772);
      v200 = HIDWORD(v772) + v118;
      if (v200 > v772)
      {
        v113 = (unint64_t)v771;
        if (v200 < 0x11)
        {
          v771 = (WTF *)v773;
          LODWORD(v772) = 16;
          v613 = (WTF *)v773;
        }
        else
        {
          if (v200 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x198F33450);
          }
          v613 = (WTF *)WTF::fastMalloc((WTF *)(16 * v200));
          LODWORD(v772) = v200;
          v771 = v613;
        }
        memcpy(v613, (const void *)v113, 16 * v199);
        if (v773 != (_BYTE *)v113 && v113)
        {
          if (v771 == (WTF *)v113)
          {
            v771 = 0;
            LODWORD(v772) = 0;
          }
          WTF::fastFree(v113, v85, (uint64_t)v86, v646, (uint64_t)v88, v89, v90, v91);
        }
      }
      if ((_DWORD)v118)
      {
        v201 = HIDWORD(v772);
        v202 = v118;
        do
        {
          v203 = (uint64_t *)((char *)v771 + 16 * v201);
          *v203 = v198;
          v203[1] = v196;
          v201 = ++HIDWORD(v772);
          --v202;
        }
        while (v202);
        v204 = v764;
        __dst[0] = (void *)v198;
        __dst[1] = (void *)v196;
        v113 = (unint64_t)v764 + 680;
        v205 = (char *)v764 + 776;
        v206 = (_QWORD *)((char *)v764 + 824);
        do
        {
          v207 = (char)__dst[0];
          if (LOBYTE(__dst[0]) - 192 <= 0x33)
          {
            if (((1 << (LOBYTE(__dst[0]) + 64)) & 0xFFC19C001C000) != 0)
            {
              v207 = -2;
            }
            else if (LOBYTE(__dst[0]) == 192)
            {
              __break(0xC471u);
              JUMPOUT(0x198F33134);
            }
          }
          v208 = JSC::Wasm::BBQJITImpl::BBQJIT::sizeOfType(v207);
          v211 = ((v208 + *((_DWORD *)v204 + 320) - 1) & -v208) + v208;
          *((_DWORD *)v204 + 320) = v211;
          v212 = 1 - 8 * v211;
          LODWORD(v1065) = v212;
          v213 = *((unsigned int *)v204 + 197);
          if ((_DWORD)v213 == *((_DWORD *)v204 + 196))
          {
            WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::BBQJITImpl::BBQJIT::Location>((uint64_t)v205, (unint64_t)&v1065, v209, v210, (uint64_t)v88, v89, v90, v91);
            v214 = *((_DWORD *)v204 + 197);
          }
          else
          {
            *(_DWORD *)(*((_QWORD *)v204 + 97) + 4 * v213) = v212;
            v214 = *((_DWORD *)v204 + 197) + 1;
            *((_DWORD *)v204 + 197) = v214;
          }
          *((_DWORD *)v204 + 322) = *((_DWORD *)v204 + 320);
          if (!v214)
          {
            __break(0xC471u);
            JUMPOUT(0x198F33410);
          }
          v86 = (_DWORD *)(*((_QWORD *)v204 + 97) + 4 * v214 - 4);
          v215 = *((unsigned int *)v204 + 173);
          if ((_DWORD)v215 == *((_DWORD *)v204 + 172))
          {
            v86 = (_DWORD *)WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v113, (void *)(v215 + 1), (unint64_t)v86, v210, (uint64_t)v88, v89, v90, v91);
            v215 = *((unsigned int *)v204 + 173);
            v216 = *((_QWORD *)v204 + 85);
          }
          else
          {
            v216 = *(_QWORD *)v113;
          }
          *(_DWORD *)(v216 + 4 * v215) = *v86;
          ++*((_DWORD *)v204 + 173);
          v217 = *((unsigned int *)v204 + 209);
          if ((_DWORD)v217 == *((_DWORD *)v204 + 208))
          {
            v218 = (_BYTE *)WTF::Vector<JSC::Wasm::TypeKind,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v206, (WTF *)(v217 + 1), (unint64_t)__dst);
            v217 = *((unsigned int *)v204 + 209);
            *(_BYTE *)(*((_QWORD *)v204 + 103) + v217) = *v218;
          }
          else
          {
            *(_BYTE *)(*v206 + v217) = __dst[0];
          }
          *((_DWORD *)v204 + 209) = v217 + 1;
          LODWORD(v118) = v118 - 1;
        }
        while ((_DWORD)v118);
      }
      v87 = ((_DWORD)v746 + 1);
      v132 = v742;
      v131 = v747;
      v122 = (unint64_t)v745;
      if ((_DWORD)v87 == (_DWORD)v752)
        goto LABEL_97;
    }
    if ((v113 + 29) < 2u)
      goto LABEL_169;
LABEL_141:
    v196 = 0;
    goto LABEL_142;
  }
  v122 = 0;
LABEL_97:
  if (BYTE1(dword_1ECF4C7B0))
  {
    if (v122 > DWORD2(v776))
    {
      if (v122 >> 30
        || (v624 = (const void *)v776, v625 = HIDWORD(v776), WTF::tryFastMalloc((WTF *)(4 * v122), __dst), !__dst[0]))
      {
        v614 = "can't allocate enough memory for tracking function's local initialization";
        v615 = 74;
        goto LABEL_639;
      }
      DWORD2(v776) = v122;
      *(void **)&v776 = __dst[0];
      memcpy(__dst[0], v624, 4 * v625);
      if (v624)
      {
        if ((const void *)v776 == v624)
        {
          *(_QWORD *)&v776 = 0;
          DWORD2(v776) = 0;
        }
        WTF::fastFree((unint64_t)v624, v85, (uint64_t)v86, v87, (uint64_t)v88, v89, v90, v91);
      }
    }
    if (v777 < 0)
      v141 = 63;
    else
      v141 = *(_QWORD *)(2 * v777);
    if (v141 < v131)
      WTF::BitVector::resizeOutOfLine(v132, v131, 0);
    v142 = *((unsigned int *)v119 + 4);
    if ((_DWORD)v142)
    {
      v143 = 0;
      v144 = *((_DWORD *)v119 + 5);
      v145 = *((_QWORD *)v119 + 1);
      do
      {
        if (*(unsigned __int8 *)(v145 + 16 * (v144 + v143)) == 228)
        {
          if (v777 >= 0)
            v592 = 2 * v777 + 8;
          else
            v592 = (uint64_t)v132;
          *(_QWORD *)(v592 + ((v143 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v143;
        }
        ++v143;
      }
      while (v142 != v143);
    }
  }
  v752 = &v1023;
  __dst[0] = &v1023;
  __dst[1] = (void *)16;
  v747 = (unint64_t)v1029;
  v1027 = (WTF *)v1029;
  v1028 = 16;
  v1030 = 0;
  v119 = v764;
  if (*((_DWORD *)v774 + 8))
    v146 = 0;
  else
    v146 = (uint64_t)v774 + 8;
  if (HIBYTE(word_1ECF4C700))
  {
    v626 = *(_QWORD *)(*((_QWORD *)v764 + 6) + 248);
    do
      v627 = __ldaxr((unsigned int *)v626);
    while (__stlxr(v627 + 1, (unsigned int *)v626));
    v628 = *((_DWORD *)v119 + 10);
    v629 = *(_DWORD *)(*((_QWORD *)v119 + 6) + 36);
    if (v629 > v628)
      v629 = 0;
    v630 = v629 + v628;
    if (*(_DWORD *)(v626 + 52) > v629 + v628)
    {
      v718 = *(_QWORD *)(v626 + 40);
      do
        v719 = __ldaxr((unsigned int *)v626);
      while (__stlxr(v719 + 1, (unsigned int *)v626));
      WTF::dataLog<char [16]>("BBQ\tFunction ");
      if (v718)
      {
        JSC::Wasm::makeString(v718 + 16 * v630, (int **)&v1065);
        WTF::dataLog<WTF::String>((WTF::PrintStream *)&v1065);
        v727 = (WTF::StringImpl *)v1065;
        *(_QWORD *)&v1065 = 0;
        if (v727)
        {
          if (*(_DWORD *)v727 == 2)
          {
            WTF::StringImpl::~StringImpl(v727, v720, v721, v722, v723, v724, v725, v726);
            WTF::fastFree(v728, v729, v730, v731, v732, v733, v734, v735);
          }
          else
          {
            *(_DWORD *)v727 -= 2;
          }
        }
        goto LABEL_655;
      }
    }
    else
    {
      do
        v631 = __ldaxr((unsigned int *)v626);
      while (__stlxr(v631 + 1, (unsigned int *)v626));
      WTF::dataLog<char [16]>("BBQ\tFunction ");
    }
    WTF::dataLog<unsigned int>((_DWORD *)v119 + 10);
LABEL_655:
    WTF::dataLog<char [2],JSC::Wasm::FunctionSignature,char [2]>(*((JSC::Wasm::FunctionSignature **)v119 + 4));
    if (HIBYTE(word_1ECF4C700))
      *(_DWORD *)v119 += 2;
    do
    {
      v632 = __ldaxr((unsigned int *)v626);
      v633 = v632 - 1;
    }
    while (__stlxr(v633, (unsigned int *)v626));
    if (!v633)
    {
      atomic_store(1u, (unsigned int *)v626);
      *(_QWORD *)&v1065 = v626;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)&v1065, v85, (uint64_t)v86, v87, (uint64_t)v88, v89, v90, v91);
    }
    do
    {
      v634 = __ldaxr((unsigned int *)v626);
      v635 = v634 - 1;
    }
    while (__stlxr(v635, (unsigned int *)v626));
    if (!v635)
    {
      atomic_store(1u, (unsigned int *)v626);
      *(_QWORD *)&v1065 = v626;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)&v1065, v85, (uint64_t)v86, v87, (uint64_t)v88, v89, v90, v91);
    }
  }
  v147 = (_DWORD *)*((_QWORD *)v119 + 1);
  for (i = v147[50]; i < v147[13]; v147[50] = i)
  {
    if ((i + 4) > v147[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v147 + 14), (uint64_t)v85, (uint64_t)v86, v87, (uint64_t)v88, v89, v90, v91);
      i = v147[50];
    }
    *(_DWORD *)(*((_QWORD *)v147 + 7) + i) = -721215457;
    i = v147[50] + 4;
  }
  v147[52] = 0;
  *(_QWORD *)&v1065 = 0;
  if (*((_BYTE *)v119 + 3024))
  {
    LODWORD(v1053) = i;
    JSC::PCToCodeOriginMapBuilder::appendItemSlow((uint64_t)v119 + 3008, (unsigned int *)&v1053, (unint64_t *)&v1065);
    if ((v1065 & 1) != 0 && (v1065 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v1065 & 0xFFFFFFFF8, v85, (uint64_t)v86, v87, (uint64_t)v88, v89, v90, v91);
  }
  v149 = (_DWORD *)*((_QWORD *)v119 + 1);
  v150 = v149[50];
  if (v150 + 4 > v149[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v149 + 14), (uint64_t)v85, (uint64_t)v86, v87, (uint64_t)v88, v89, v90, v91);
    v150 = v149[50];
  }
  *(_DWORD *)(*((_QWORD *)v149 + 7) + v150) = -1447068675;
  v151 = v149[50];
  v152 = v151 + 4;
  v149[50] = v151 + 4;
  if ((v151 + 8) > v149[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v149 + 14), (uint64_t)v85, (uint64_t)v86, v87, (uint64_t)v88, v89, v90, v91);
    v152 = v149[50];
  }
  *(_DWORD *)(*((_QWORD *)v149 + 7) + v152) = -1862269955;
  v149[50] += 4;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::ControlData((uint64_t)&v1065, (uint64_t)v119, 3, v146, 0, 0);
  v746 = (WTF **)((char *)v119 + 128);
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::operator=((uint64_t)v119 + 128, &v1065, v153, v154, v155, v156, v157, v158);
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::~ControlData((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)&v1065, v159, v160, v161, v162, v163, v164, v165);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*((_DWORD **)v119 + 1), (*((_QWORD *)v119 + 2) - qword_1ECF4C080) | 3, 8, v166, v167, v168, v169, v170);
  v178 = (_DWORD *)*((_QWORD *)v119 + 1);
  v179 = v178[50];
  if (v179 + 4 > v178[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v178 + 14), v171, v172, v173, v174, v175, v176, v177);
    v179 = v178[50];
  }
  *(_DWORD *)(*((_QWORD *)v178 + 7) + v179) = -1459543117;
  v178[50] += 4;
  v180 = (_DWORD *)*((_QWORD *)v119 + 1);
  v181 = v180[50];
  LODWORD(v1065) = v181;
  if (v181 < v180[13])
  {
    do
    {
      if ((v181 + 4) > v180[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v180 + 14), v171, v172, v173, v174, v175, v176, v177);
        v181 = v180[50];
      }
      *(_DWORD *)(*((_QWORD *)v180 + 7) + v181) = -721215457;
      v181 = v180[50] + 4;
      v180[50] = v181;
    }
    while (v181 < v180[13]);
    LODWORD(v1065) = v181;
  }
  if ((v181 + 4) > v180[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v180 + 14), v171, v172, v173, v174, v175, v176, v177);
    v181 = v180[50];
  }
  *(_DWORD *)(*((_QWORD *)v180 + 7) + v181) = -763363320;
  v182 = v180[50];
  v183 = v182 + 4;
  v180[50] = v182 + 4;
  if ((v182 + 8) > v180[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v180 + 14), v171, v172, v173, v174, v175, v176, v177);
    v183 = v180[50];
  }
  *(_DWORD *)(*((_QWORD *)v180 + 7) + v183) = -224395256;
  v184 = v180[50];
  v185 = v184 + 4;
  v180[50] = v184 + 4;
  if ((v184 + 8) > v180[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v180 + 14), v171, v172, v173, v174, v175, v176, v177);
    v185 = v180[50];
  }
  v186 = (_QWORD *)((char *)v119 + 1256);
  *(_DWORD *)(*((_QWORD *)v180 + 7) + v185) = -222298104;
  v180[50] += 4;
  v187 = *((unsigned int *)v119 + 317);
  if ((_DWORD)v187 == *((_DWORD *)v119 + 316))
  {
    v188 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::DataLabelPtr,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v186, (void *)(v187 + 1), (unint64_t)&v1065, v173, v174, v175, v176, v177);
    v187 = *((unsigned int *)v119 + 317);
    *(_DWORD *)(*((_QWORD *)v119 + 157) + 4 * v187) = *v188;
  }
  else
  {
    *(_DWORD *)(*v186 + 4 * v187) = v1065;
  }
  *((_DWORD *)v119 + 317) = v187 + 1;
  if (!*((_BYTE *)v119 + 73) || *((_BYTE *)v119 + 72))
    JSC::MacroAssemblerARM64::store32(*((_QWORD *)v119 + 1), 0xFFFFFFFF, 0x240000001DLL, v173, v174, v175, v176, v177);
  v240 = (_DWORD *)*((_QWORD *)v119 + 1);
  v241 = v240[50];
  if (v241 + 4 > v240[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v240 + 14), v171, v172, v173, v174, v175, v176, v177);
    v241 = v240[50];
  }
  *(_DWORD *)(*((_QWORD *)v240 + 7) + v241) = -888667224;
  v240[50] += 4;
  *(_QWORD *)&v1065 = v1066;
  *((_QWORD *)&v1065 + 1) = 2;
  JSC::MacroAssemblerARM64::branch64(*((_QWORD *)v119 + 1), 8, 8, 29, v174, v175, v176, v177, (uint64_t)&v1063);
  v249 = v1063;
  if (v1063 != -1)
  {
    v250 = HIDWORD(v1065);
    if (HIDWORD(v1065) == DWORD2(v1065))
    {
      v251 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1065, (void *)(HIDWORD(v1065) + 1), (unint64_t)&v1063, v244, v245, v246, v247, v248);
      v253 = *v251;
      v252 = (uint64_t *)(v251 + 1);
      v249 = v253;
      v250 = HIDWORD(v1065);
    }
    else
    {
      v252 = &v1064;
    }
    v254 = v1065 + 12 * v250;
    *(_DWORD *)v254 = v249;
    *(_QWORD *)(v254 + 4) = *v252;
    ++HIDWORD(v1065);
  }
  v255 = *((_QWORD *)v119 + 1);
  if (!*(_BYTE *)(v255 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198F32B10);
  }
  v745 = v1066;
  *(_DWORD *)(*(_QWORD *)(v255 + 296) + 208) &= ~*(_DWORD *)(v255 + 320);
  v256 = *(_BYTE *)(v255 + 304) & 0x1F | 0xF8410260;
  v257 = *(_DWORD *)(v255 + 200);
  if (v257 + 4 > *(_DWORD *)(v255 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v255 + 56), v242, v243, v244, v245, v246, v247, v248);
    v257 = *(_DWORD *)(v255 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v255 + 56) + v257) = v256;
  *(_DWORD *)(v255 + 200) += 4;
  JSC::MacroAssemblerARM64::branch64(v255, 3, 8, 17, v245, v246, v247, v248, (uint64_t)&v1061);
  v263 = v1061;
  if (v1061 != -1)
  {
    v264 = HIDWORD(v1065);
    if (HIDWORD(v1065) == DWORD2(v1065))
    {
      v265 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1065, (void *)(HIDWORD(v1065) + 1), (unint64_t)&v1061, v258, v259, v260, v261, v262);
      v267 = *v265;
      v266 = v265 + 1;
      v263 = v267;
      v264 = HIDWORD(v1065);
    }
    else
    {
      v266 = &v1062;
    }
    v268 = v1065 + 12 * v264;
    *(_DWORD *)v268 = v263;
    *(_QWORD *)(v268 + 4) = *(_QWORD *)v266;
    ++HIDWORD(v1065);
  }
  v269 = (uint64_t *)JSC::Wasm::thunks;
  v270 = (unsigned __int8 *)(JSC::Wasm::thunks + 8);
  v1053 = (unsigned __int8 *)(JSC::Wasm::thunks + 8);
  LOBYTE(v1054) = 1;
  if (__ldaxr((unsigned __int8 *)(JSC::Wasm::thunks + 8)))
  {
    __clrex();
LABEL_201:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v270);
    goto LABEL_202;
  }
  if (__stxr(1u, v270))
    goto LABEL_201;
LABEL_202:
  JSC::Wasm::Thunks::stub(v269, (uint64_t)&v1053, (void (*)(uint64_t))JSC::Wasm::throwStackOverflowFromWasmThunkGenerator, v258, v259, v260, v261, v262, (uint64_t *)&v1060);
  if (!(_BYTE)v1054)
    goto LABEL_208;
  v272 = v1053;
  v273 = __ldxr(v1053);
  if (v273 != 1)
  {
    __clrex();
    goto LABEL_207;
  }
  if (__stlxr(0, v1053))
LABEL_207:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v272, 0, (uint64_t)v86, v87, (uint64_t)v88, v89, v90, v91);
LABEL_208:
  if (HIDWORD(v1065))
  {
    v274 = v1060;
    v256 = *((_QWORD *)v119 + 1);
    v275 = (unsigned int *)v1065;
    v276 = 12 * HIDWORD(v1065);
    do
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26129>(v275, v274, v256, v87, (uint64_t)v88, v89, v90, v91);
      v275 += 3;
      v276 -= 12;
    }
    while (v276);
  }
  v277 = (unsigned int *)*((_QWORD *)&v1060 + 1);
  *((_QWORD *)&v1060 + 1) = 0;
  if (v277)
  {
    do
    {
      v278 = __ldaxr(v277);
      v279 = v278 - 1;
    }
    while (__stlxr(v279, v277));
    if (!v279)
    {
      atomic_store(1u, v277);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v277, (uint64_t)v85, (uint64_t)v86, v87, (uint64_t)v88, v89, v90, v91);
      WTF::fastFree(v636, v637, v638, v639, v640, v641, v642, v643);
    }
  }
  v280 = *((_QWORD *)v119 + 1);
  v281 = *(_DWORD *)(v280 + 200);
  if (v281 + 4 > *(_DWORD *)(v280 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v280 + 56), (uint64_t)v85, (uint64_t)v86, v87, (uint64_t)v88, v89, v90, v91);
    v281 = *(_DWORD *)(v280 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v280 + 56) + v281) = -1862270689;
  *(_DWORD *)(v280 + 200) += 4;
  if (*((_DWORD *)v119 + 27))
  {
    v282 = 0;
    v283 = 0;
    do
    {
      v284 = *((_QWORD *)v119 + 11);
      if (v283 >= *(unsigned int *)(v284 + 20324))
      {
        __break(0xC471u);
        JUMPOUT(0x198F33420);
      }
      v285 = *(unsigned __int8 *)(*(_QWORD *)(v284 + 20312) + v282);
      if ((unint64_t)(v285 - 192) <= 0x33)
      {
        if (((1 << (v285 + 64)) & 0xFFC19C001C000) != 0)
        {
          v285 = 254;
        }
        else if (v285 == 192)
        {
          __break(0xC471u);
          JUMPOUT(0x198F33194);
        }
      }
      v280 = v280 & 0xFFFFFFFFFFFF0000 | (v285 << 8) | 3;
      v256 = v256 & 0xFFFFFFFF00000000 | v283;
      JSC::Wasm::BBQJITImpl::BBQJIT::flushValue((uint64_t)v119, (JSC::ARM64LogicalImmediate *)v256, v280, v87, (uint64_t)v88, v89, v90, v91);
      ++v283;
      v282 += 16;
    }
    while (v283 < *((unsigned int *)v119 + 27));
    v118 = v283;
  }
  else
  {
    v118 = 0;
  }
  LOBYTE(v1058) = 0;
  v1059 = 0;
  LOBYTE(v1056) = 0;
  v1057 = 0;
  v1053 = (unsigned __int8 *)&v1056;
  v1054 = (JSC::ExecutableMemoryHandle *)&v1058;
  v1055 = v119;
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(*((_QWORD *)v119 + 1), "initialize locals");
  v122 = *((unsigned int *)v119 + 173);
  if (v122 > v118)
  {
    v131 = 16 * v118;
    v128 = 20324;
    v113 = 1;
    while (1)
    {
      v133 = (unsigned __int8 *)*((_QWORD *)v119 + 11);
      if (v118 >= *(unsigned int *)&v133[v128])
      {
        __break(0xC471u);
        JUMPOUT(0x198F33408);
      }
      LODWORD(v133) = *(unsigned __int8 *)(*((_QWORD *)v133 + 2539) + v131);
      if (((_DWORD)v133 - 251) < 5)
        goto LABEL_231;
      LOBYTE(v127) = (_BYTE)v133 + 50;
      if (((_DWORD)v133 - 206) > 0x25)
        goto LABEL_802;
      if (((v113 << v127) & 0x3FB0600000) == 0)
        break;
      v568 = *(unsigned int *)(*((_QWORD *)v119 + 85) + 4 * v118);
      JSC::Wasm::BBQJITImpl::BBQJIT::addTopLevel(JSC::Wasm::FunctionSignature const*)::$_0::operator()((int **)&v1053, (uint64_t)v85, (uint64_t)v86, v87, (uint64_t)v88, v89, v90, v91);
      JSC::Wasm::BBQJITImpl::BBQJIT::emitStoreConst((uint64_t)v119, (JSC::ARM64LogicalImmediate *)2, 0xFE01uLL, v568, v569, v570, v571, v572);
      v128 = 20324;
      v122 = *((unsigned int *)v119 + 173);
LABEL_234:
      ++v118;
      v131 += 16;
      if (v118 >= v122)
        goto LABEL_235;
    }
LABEL_541:
    if (((v113 << v127) & 0x40070007) == 0)
      goto LABEL_802;
LABEL_231:
    v286 = *(int *)(*((_QWORD *)v119 + 85) + 4 * v118) >> 3;
    if (!v1059)
    {
      v287 = JSC::Wasm::BBQJITImpl::BBQJIT::sizeOfType((char)v133);
      v128 = 20324;
      v1059 = v113;
      v1058 = v287 + v286;
    }
    v1056 = v286;
    v1057 = v113;
    goto LABEL_234;
  }
LABEL_235:
  JSC::Wasm::BBQJITImpl::BBQJIT::addTopLevel(JSC::Wasm::FunctionSignature const*)::$_0::operator()((int **)&v1053, (uint64_t)v85, (uint64_t)v86, v87, (uint64_t)v88, v89, v90, v91);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(*((_QWORD *)v119 + 1), "initialize locals done");
  v294 = *((_QWORD *)v119 + 4);
  if (*(_DWORD *)(v294 + 8))
  {
    v295 = 0;
    v296 = (uint64_t *)((char *)v119 + 272);
    do
    {
      v297 = *v296;
      if (*v296 < 0)
        v298 = 63;
      else
        v298 = *(_QWORD *)(2 * v297);
      v299 = v295 + 1;
      if (v298 <= v295)
      {
        WTF::BitVector::resizeOutOfLine((JSC::Wasm::TypeDefinition *)((char *)v119 + 272), v295 + 1, 0);
        v297 = *((_QWORD *)v119 + 34);
        v294 = *((_QWORD *)v119 + 4);
      }
      if (v297 >= 0)
        v300 = 2 * v297 + 8;
      else
        v300 = (uint64_t)v119 + 272;
      *(_QWORD *)(v300 + ((v295 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v295;
      ++v295;
    }
    while (v299 < *(unsigned int *)(v294 + 8));
  }
  v301 = (void *)*((_QWORD *)v119 + 10);
  if (v301)
  {
    if (BYTE2(dword_1ECF4C702) && word_1ECF4C6D4 != 0)
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*((_DWORD **)v119 + 1), (uint64_t)v301, 8, v289, v290, v291, v292, v293);
      JSC::MacroAssemblerARM64::branchAdd32(*((_QWORD *)v119 + 1), 5u, SHIDWORD(qword_1ECF4C6E8), 8, v303, v304, v305, v306, (uint64_t)&v1060);
      v314 = (_DWORD *)*((_QWORD *)v119 + 1);
      for (j = v314[50]; j < v314[13]; v314[50] = j)
      {
        if ((j + 4) > v314[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v314 + 14), v307, v308, v309, v310, v311, v312, v313);
          j = v314[50];
        }
        *(_DWORD *)(*((_QWORD *)v314 + 7) + j) = -721215457;
        j = v314[50] + 4;
      }
      v314[52] = 0;
      v316 = *((_DWORD *)v119 + 10);
      v317 = v1060;
      v318 = *(_QWORD *)((char *)&v1060 + 4);
      v319 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v319 = off_1E35BE1F0;
      *(_DWORD *)(v319 + 8) = 1;
      *(_DWORD *)(v319 + 12) = v317;
      *(_QWORD *)(v319 + 16) = v318;
      *(_DWORD *)(v319 + 24) = j;
      *(_DWORD *)(v319 + 28) = v316;
      v1067 = (unsigned int *)v319;
      v320 = *((unsigned int *)v119 + 297);
      if ((_DWORD)v320 == *((_DWORD *)v119 + 296))
      {
        WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>>>>((uint64_t)v119 + 1176, (uint64_t *)&v1067);
        v574 = v1067;
        v1067 = 0;
        if (v574)
        {
          v575 = v574 + 2;
          do
          {
            v576 = __ldaxr(v575);
            v577 = v576 - 1;
          }
          while (__stlxr(v577, v575));
          if (!v577)
          {
            atomic_store(1u, v574 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v574 + 8))(v574);
          }
        }
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)v119 + 147) + 8 * v320) = v319;
        *((_DWORD *)v119 + 297) = v320 + 1;
      }
    }
  }
  v1031 = *(_OWORD *)v746;
  v321 = *((unsigned int *)v119 + 39);
  v322 = &v1035;
  v1032 = &v1035;
  v1033 = 2;
  v1034 = v321;
  if (v321 >= 3)
  {
    if (v321 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x198F33480);
    }
    v322 = (uint64_t *)WTF::fastMalloc((WTF *)(4 * v321));
    v1033 = v321;
    v1032 = v322;
    v321 = *((unsigned int *)v119 + 39);
  }
  if ((_DWORD)v321)
  {
    v562 = (int *)*((_QWORD *)v119 + 18);
    v563 = 4 * v321;
    do
    {
      v564 = *v562++;
      *(_DWORD *)v322 = v564;
      v322 = (uint64_t *)((char *)v322 + 4);
      v563 -= 4;
    }
    while (v563);
  }
  v323 = *((unsigned int *)v119 + 45);
  v324 = &v1039;
  v1036 = &v1039;
  v1037 = 2;
  v1038 = v323;
  if (v323 >= 3)
  {
    if (v323 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x198F33488);
    }
    v324 = (uint64_t *)WTF::fastMalloc((WTF *)(4 * v323));
    v1037 = v323;
    v1036 = v324;
    v323 = *((unsigned int *)v119 + 45);
  }
  if ((_DWORD)v323)
  {
    v565 = (int *)*((_QWORD *)v119 + 21);
    v566 = 4 * v323;
    do
    {
      v567 = *v565++;
      *(_DWORD *)v324 = v567;
      v324 = (uint64_t *)((char *)v324 + 4);
      v566 -= 4;
    }
    while (v566);
  }
  v325 = *((unsigned int *)v119 + 51);
  v326 = v1043;
  v1040 = v1043;
  v1041 = 2;
  v1042 = v325;
  if (v325 >= 3)
  {
    if (v325 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x198F33458);
    }
    v327 = 12 * v325;
    v326 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v325));
    v1041 = (v327 & 0xFFFFFFFC) / 0xC;
    v1040 = v326;
    LODWORD(v325) = *((_DWORD *)v119 + 51);
  }
  if ((_DWORD)v325)
  {
    v328 = *((_QWORD *)v119 + 24);
    v329 = v328 + 12 * v325;
    do
    {
      *(_DWORD *)v326 = *(_DWORD *)v328;
      *(_QWORD *)(v326 + 4) = *(_QWORD *)(v328 + 4);
      v328 += 12;
      v326 += 12;
    }
    while (v328 != v329);
  }
  v330 = *((unsigned int *)v119 + 61);
  v1045 = 0;
  v1044 = 0;
  v1046 = v330;
  if ((_DWORD)v330)
  {
    if (v330 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198F33448);
    }
    v331 = (unsigned int **)WTF::fastMalloc((WTF *)(8 * v330));
    v1045 = v330;
    v1044 = v331;
    v332 = *((unsigned int *)v119 + 61);
    if ((_DWORD)v332)
    {
      v333 = (unsigned int **)*((_QWORD *)v119 + 29);
      v334 = &v333[v332];
      do
      {
        v335 = *v333;
        if (*v333)
        {
          do
            v336 = __ldaxr(v335);
          while (__stlxr(v336 + 1, v335));
        }
        *v331++ = v335;
        ++v333;
      }
      while (v333 != v334);
    }
  }
  v1047 = *((_QWORD *)v119 + 31);
  v1048 = *((_QWORD *)v119 + 32);
  v1049 = *((_DWORD *)v119 + 66);
  v1050 = 0x8000000000000000;
  v337 = *((_QWORD *)v119 + 34);
  if ((v337 & 0x8000000000000000) == 0 && v337 >= 2)
  {
    v599 = *(_QWORD *)(2 * v337) + 63;
    v600 = v599 & 0xFFFFFFFFFFFFFFC0;
    v601 = WTF::fastMalloc((WTF *)(((v599 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
    *(_QWORD *)v601 = v600;
    v602 = (_QWORD *)(2 * *((_QWORD *)v119 + 34));
    v603 = *((uint64_t *)v119 + 34) >= 0 ? v602 + 1 : (_QWORD *)((char *)v119 + 272);
    v604 = (*((_QWORD *)v119 + 34) & 0x8000000000000000) != 0 ? 8 : (unint64_t)(*v602 + 7) >> 3;
    memcpy((void *)(v601 + 8), v603, v604);
    v337 = v601 >> 1;
    if (v1050 >= 2)
      WTF::fastFree(2 * v1050, v301, v288, v289, v290, v291, v292, v293);
  }
  v1050 = v337;
  v338 = *((_QWORD *)v119 + 35);
  v1052 = *((_DWORD *)v119 + 72);
  v1051 = v338;
  v339 = v1065;
  if (v745 != (_BYTE *)v1065 && (_QWORD)v1065)
  {
    *(_QWORD *)&v1065 = 0;
    DWORD2(v1065) = 0;
    WTF::fastFree(v339, v301, v288, v289, v290, v291, v292, v293);
  }
  v340 = HIDWORD(v769);
  if (HIDWORD(v769) == (_DWORD)v769)
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry>((uint64_t)v744, (unint64_t)__dst);
  }
  else
  {
    v341 = v768;
    v342 = (char *)v768 + 1232 * HIDWORD(v769);
    v343 = v342 + 16;
    *(_QWORD *)v342 = v342 + 16;
    *((_QWORD *)v342 + 1) = 16;
    v344 = __dst[0];
    if (__dst[0] == v752)
    {
      if (HIDWORD(__dst[1]))
      {
        v584 = 32 * HIDWORD(__dst[1]);
        v585 = v752;
        do
        {
          v586 = *(_OWORD *)v585;
          v587 = *((_OWORD *)v585 + 1);
          v585 += 8;
          *v343 = v586;
          v343[1] = v587;
          v343 += 2;
          v584 -= 32;
        }
        while (v584);
      }
    }
    else
    {
      __dst[0] = v752;
      *(_QWORD *)v342 = v344;
      v659 = (int)__dst[1];
      LODWORD(__dst[1]) = 16;
      *((_DWORD *)v342 + 2) = v659;
    }
    v345 = HIDWORD(__dst[1]);
    HIDWORD(__dst[1]) = 0;
    *((_DWORD *)v342 + 3) = v345;
    v346 = (char *)v341 + 1232 * v340;
    v347 = v346 + 544;
    *((_QWORD *)v346 + 66) = v346 + 544;
    v348 = v346 + 540;
    *((_QWORD *)v346 + 67) = 16;
    v349 = v1027;
    if (v1027 == (WTF *)v747)
    {
      if (HIDWORD(v1028))
      {
        v588 = 32 * HIDWORD(v1028);
        v589 = (__int128 *)v747;
        do
        {
          v590 = *v589;
          v591 = v589[1];
          v589 += 2;
          *v347 = v590;
          v347[1] = v591;
          v347 += 2;
          v588 -= 32;
        }
        while (v588);
      }
    }
    else
    {
      v1027 = (WTF *)v747;
      *((_QWORD *)v346 + 66) = v349;
      v660 = v1028;
      LODWORD(v1028) = 16;
      *((_DWORD *)v346 + 134) = v660;
    }
    v350 = HIDWORD(v1028);
    HIDWORD(v1028) = 0;
    *v348 = v350;
    v351 = (char *)v341 + 1232 * v340;
    *((_DWORD *)v351 + 264) = v1030;
    JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::ControlData((uint64_t)(v351 + 1064), (uint64_t)&v1031);
    ++HIDWORD(v769);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::~ControlData((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)&v1031, v352, v353, v354, v355, v356, v357, v358);
  v368 = v1027;
  if ((WTF *)v747 != v1027 && v1027)
  {
    v1027 = 0;
    LODWORD(v1028) = 0;
    WTF::fastFree((unint64_t)v368, v359, v360, v361, v362, v363, v364, v365);
  }
  v369 = (JSC::Wasm::WasmOpcodeCounter *)__dst[0];
  if (v752 != __dst[0] && __dst[0])
  {
    __dst[0] = 0;
    LODWORD(__dst[1]) = 0;
    WTF::fastFree((unint64_t)v369, v359, v360, v361, v362, v363, v364, v365);
  }
  if (!HIDWORD(v769))
  {
LABEL_313:
    v383 = v764;
    v384 = *((_QWORD *)v764 + 1);
    LODWORD(__dst[0]) = (*((_DWORD *)v764 + 321) + *((_DWORD *)v764 + 320) + 15) & 0xFFFFFFF0;
    __dst[1] = &v1025;
    v1023 = 1;
    v385 = (int *)*((_QWORD *)v764 + 157);
    if (v385 == (int *)((char *)v764 + 1272))
    {
      v387 = *((unsigned int *)v764 + 317);
      if ((_DWORD)v387)
      {
        v507 = 4 * v387;
        v508 = &v1025;
        do
        {
          v509 = *v385++;
          *(_DWORD *)v508 = v509;
          v508 = (uint64_t *)((char *)v508 + 4);
          v507 -= 4;
        }
        while (v507);
      }
    }
    else
    {
      *((_QWORD *)v764 + 157) = (char *)v764 + 1272;
      __dst[1] = v385;
      v386 = *((_DWORD *)v383 + 316);
      *((_DWORD *)v383 + 316) = 1;
      v1023 = v386;
      LODWORD(v387) = *((_DWORD *)v383 + 317);
    }
    *((_DWORD *)v383 + 317) = 0;
    v1024 = v387;
    v1026 = v384;
    v388 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v388 + 8) = 1;
    *(_QWORD *)v388 = &off_1E35BE268;
    *(_DWORD *)(v388 + 16) = __dst[0];
    v389 = v1024;
    v390 = (_DWORD *)(v388 + 40);
    *(_QWORD *)(v388 + 24) = v388 + 40;
    *(_DWORD *)(v388 + 32) = 1;
    *(_DWORD *)(v388 + 36) = v389;
    if (v389 >= 2)
    {
      if (v389 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198F33460);
      }
      v390 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v389));
      *(_DWORD *)(v388 + 32) = v389;
      *(_QWORD *)(v388 + 24) = v390;
      v389 = v1024;
    }
    if ((_DWORD)v389)
    {
      v391 = (int *)__dst[1];
      v392 = 4 * v389;
      do
      {
        v393 = *v391++;
        *v390++ = v393;
        v392 -= 4;
      }
      while (v392);
    }
    *(_QWORD *)(v388 + 48) = v1026;
    v394 = *(unsigned int *)(v384 + 244);
    if ((_DWORD)v394 == *(_DWORD *)(v384 + 240))
    {
      v519 = v383;
      v520 = v394 + (v394 >> 2);
      if (v520 >= 0x10)
        v521 = v520 + 1;
      else
        v521 = 16;
      if (v521 <= v394 + 1)
        v522 = v394 + 1;
      else
        v522 = v521;
      if (v522 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198F33468);
      }
      v523 = *(const void **)(v384 + 232);
      v524 = (void *)WTF::fastMalloc((WTF *)(8 * v522));
      *(_DWORD *)(v384 + 240) = v522;
      *(_QWORD *)(v384 + 232) = v524;
      memcpy(v524, v523, 8 * v394);
      v383 = v519;
      if (v523)
      {
        if (*(const void **)(v384 + 232) == v523)
        {
          *(_QWORD *)(v384 + 232) = 0;
          *(_DWORD *)(v384 + 240) = 0;
        }
        WTF::fastFree((unint64_t)v523, v229, v230, v231, v232, v233, v234, v235);
      }
      v394 = *(unsigned int *)(v384 + 244);
      v395 = (uint64_t *)(*(_QWORD *)(v384 + 232) + 8 * v394);
    }
    else
    {
      v395 = (uint64_t *)(*(_QWORD *)(v384 + 232) + 8 * v394);
    }
    *v395 = v388;
    *(_DWORD *)(v384 + 244) = v394 + 1;
    v396 = __dst[1];
    if (&v1025 != __dst[1] && __dst[1] != 0)
    {
      __dst[1] = 0;
      v1023 = 0;
      WTF::fastFree((unint64_t)v396, v229, v230, v231, v232, v233, v234, v235);
    }
    if (HIBYTE(word_1ECF4C700))
    {
      *(_DWORD *)v383 -= 2;
      __dst[0] = "End";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)v383)
      {
        v647 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v647;
        }
        while (v647 < *(_DWORD *)v383);
      }
      WTF::dataLog<char const*,char [2]>((const char **)__dst, " ");
      WTF::dataLog<char [16]>("\n");
    }
    v398 = *((_QWORD *)v383 + 379);
    if (v398)
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*((_DWORD **)v383 + 1), (uint64_t)v229, v230, v231, v232, v233, v234, v235, (int *)__dst);
      *(_DWORD *)(v398 + 24) = __dst[0];
    }
    v399 = *((unsigned int *)v383 + 297);
    if ((_DWORD)v399)
    {
      v400 = (uint64_t *)*((_QWORD *)v383 + 147);
      v401 = 8 * v399;
      do
      {
        v402 = *v400++;
        (*(void (**)(uint64_t, WTF *, _QWORD))(*(_QWORD *)v402 + 16))(v402, v383, *((_QWORD *)v383 + 1));
        v401 -= 8;
      }
      while (v401);
    }
    v403 = 0;
    v404 = (char *)v383 + 1360;
    do
    {
      v405 = &v404[40 * (_QWORD)v403];
      v406 = *((unsigned int *)v405 + 3);
      if ((_DWORD)v406)
      {
        v753 = (uint64_t)v383;
        v407 = 0;
        for (k = 0; k != v406; ++k)
        {
          if (k >= *((unsigned int *)v405 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x198F333D8);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)v405 + v407), v384, v230, v231, v232, v233, v234, v235);
          v407 += 12;
        }
        v383 = (WTF *)v753;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(v753, v403, v230, v231, v232, v233, v234, v235);
      }
      v403 = (JSC::ARM64LogicalImmediate *)((char *)v403 + 1);
    }
    while (v403 != (JSC::ARM64LogicalImmediate *)40);
    v409 = *((unsigned int *)v383 + 751);
    if ((_DWORD)v409)
    {
      v593 = *((_QWORD *)v383 + 374);
      v594 = v593 + 32 * v409;
      do
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v593, v384, v230, v231, v232, v233, v234, v235);
        LODWORD(v1065) = *(_DWORD *)(v593 + 12);
        JSC::Wasm::BBQJITImpl::BBQJIT::emitSlowPathRTTCheck((uint64_t)v383, (unsigned int *)&v1065, *(JSC::Wasm::TypeInformation **)(v593 + 16), *(char *)(v593 + 24), v595, v596, v597, v598);
        v593 += 32;
      }
      while (v593 != v594);
    }
    *(_DWORD *)(*((_QWORD *)v383 + 169) + 72) = *((_DWORD *)v383 + 80);
    if (!*((_DWORD *)v849 + 9))
      goto LABEL_344;
    v476 = *(_DWORD **)v781;
    v477 = *(_DWORD *)(*(_QWORD *)v781 + 200);
    if (v477 < *(_DWORD *)(*(_QWORD *)v781 + 52))
    {
      do
      {
        if ((v477 + 4) > v476[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v476 + 14), (uint64_t)v229, v230, v231, v232, v233, v234, v235);
          v477 = v476[50];
        }
        *(_DWORD *)(*((_QWORD *)v476 + 7) + v477) = -721215457;
        v477 = v476[50] + 4;
        v476[50] = v477;
      }
      while (v477 < v476[13]);
      v479 = *(_DWORD **)v781;
      v478 = *(_DWORD *)(*(_QWORD *)v781 + 200);
    }
    else
    {
      v478 = *(_DWORD *)(*(_QWORD *)v781 + 200);
      v479 = *(_DWORD **)v781;
    }
    v476[52] = 0;
    if (v478 + 4 > v479[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v479 + 14), (uint64_t)v229, v230, v231, v232, v233, v234, v235);
      v478 = v479[50];
    }
    *(_DWORD *)(*((_QWORD *)v479 + 7) + v478) = -1447068675;
    v480 = v479[50];
    v481 = v480 + 4;
    v479[50] = v480 + 4;
    if ((v480 + 8) > v479[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v479 + 14), (uint64_t)v229, v230, v231, v232, v233, v234, v235);
      v481 = v479[50];
    }
    *(_DWORD *)(*((_QWORD *)v479 + 7) + v481) = -1862269955;
    v479[50] += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)v781, (v782 - qword_1ECF4C080) | 3, 8, v231, v232, v233, v234, v235);
    v489 = *(_QWORD *)v781;
    v490 = *(_DWORD *)(*(_QWORD *)v781 + 200);
    if (v490 + 4 > *(_DWORD *)(*(_QWORD *)v781 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)v781 + 56), v482, v483, v484, v485, v486, v487, v488);
      v490 = *(_DWORD *)(v489 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v489 + 56) + v490) = -1459543117;
    *(_DWORD *)(v489 + 200) += 4;
    JSC::MacroAssemblerARM64::sub64(*(uint64_t *)v781, 29, (HIDWORD(v845[0]) + LODWORD(v845[0]) + 15) & 0xFFFFFFF0, 31, v485, v486, v487, v488);
    __dst[0] = &v1023;
    __dst[1] = (void *)2;
    JSC::MacroAssemblerARM64::branch64(*(uint64_t *)v781, 8, 31, 29, v491, v492, v493, v494, (uint64_t)&v1060);
    v502 = v1060;
    if ((_DWORD)v1060 != -1)
    {
      v503 = HIDWORD(__dst[1]);
      if (HIDWORD(__dst[1]) == LODWORD(__dst[1]))
      {
        v504 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)__dst, (void *)(HIDWORD(__dst[1]) + 1), (unint64_t)&v1060, v497, v498, v499, v500, v501);
        v506 = *v504;
        v505 = v504 + 1;
        v502 = v506;
        v503 = HIDWORD(__dst[1]);
      }
      else
      {
        v505 = (_QWORD *)((char *)&v1060 + 4);
      }
      v525 = (char *)__dst[0] + 12 * v503;
      *(_DWORD *)v525 = v502;
      *(_QWORD *)(v525 + 4) = *v505;
      ++HIDWORD(__dst[1]);
    }
    v526 = *(_QWORD *)v781;
    if (!*(_BYTE *)(*(_QWORD *)v781 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198F32EB0);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v781 + 296) + 208) &= ~*(_DWORD *)(*(_QWORD *)v781 + 320);
    v527 = *(_BYTE *)(v526 + 304) & 0x1F | 0xF8410260;
    v528 = *(_DWORD *)(v526 + 200);
    if (v528 + 4 > *(_DWORD *)(v526 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v526 + 56), v495, v496, v497, v498, v499, v500, v501);
      v528 = *(_DWORD *)(v526 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v526 + 56) + v528) = v527;
    *(_DWORD *)(v526 + 200) += 4;
    JSC::MacroAssemblerARM64::branch64(v526, 3, 31, 17, v498, v499, v500, v501, (uint64_t)&v1020);
    v534 = (int)v1020;
    if ((_DWORD)v1020 != -1)
    {
      v535 = HIDWORD(__dst[1]);
      if (HIDWORD(__dst[1]) == LODWORD(__dst[1]))
      {
        v536 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)__dst, (void *)(HIDWORD(__dst[1]) + 1), (unint64_t)&v1020, v529, v530, v531, v532, v533);
        v538 = *v536;
        v537 = v536 + 1;
        v534 = v538;
        v535 = HIDWORD(__dst[1]);
      }
      else
      {
        v537 = (void **)((char *)&v1020 + 4);
      }
      v539 = (char *)__dst[0] + 12 * v535;
      *(_DWORD *)v539 = v534;
      *(_QWORD *)(v539 + 4) = *v537;
      ++HIDWORD(__dst[1]);
    }
    v540 = (uint64_t *)JSC::Wasm::thunks;
    v541 = (unsigned __int8 *)(JSC::Wasm::thunks + 8);
    *(_QWORD *)&v1065 = JSC::Wasm::thunks + 8;
    BYTE8(v1065) = 1;
    if (__ldaxr((unsigned __int8 *)(JSC::Wasm::thunks + 8)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v541))
    {
LABEL_486:
      JSC::Wasm::Thunks::stub(v540, (uint64_t)&v1065, (void (*)(uint64_t))JSC::Wasm::crashDueToBBQStackOverflowGenerator, v529, v530, v531, v532, v533, (uint64_t *)&v1053);
      if (BYTE8(v1065))
      {
        v550 = (unsigned __int8 *)v1065;
        v551 = __ldxr((unsigned __int8 *)v1065);
        if (v551 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v1065))
            goto LABEL_492;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v550, 0, v544, v545, v546, v547, v548, v549);
      }
LABEL_492:
      if (HIDWORD(__dst[1]))
      {
        v552 = (int *)v1053;
        v553 = *(_QWORD *)v781;
        v554 = (unsigned int *)__dst[0];
        v555 = 12 * HIDWORD(__dst[1]);
        do
        {
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26129>(v554, (uint64_t)v552, v553, v545, v546, v547, v548, v549);
          v554 += 3;
          v555 -= 12;
        }
        while (v555);
      }
      v556 = (unsigned int *)v1054;
      v1054 = 0;
      if (v556)
      {
        do
        {
          v557 = __ldaxr(v556);
          v558 = v557 - 1;
        }
        while (__stlxr(v558, v556));
        if (!v558)
        {
          atomic_store(1u, v556);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v556, v543, v544, v545, v546, v547, v548, v549);
          WTF::fastFree(v651, v652, v653, v654, v655, v656, v657, v658);
        }
      }
      JSC::MacroAssembler::probe(*(_DWORD **)v781, (uint64_t)operationWasmLoopOSREnterBBQJIT, v790, BYTE4(v845[1]) == 0, v546, v547, v548, v549);
      v559 = *(_QWORD *)v781;
      v560 = *(_DWORD *)(*(_QWORD *)v781 + 200);
      if (v560 + 4 > *(_DWORD *)(*(_QWORD *)v781 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)v781 + 56), (uint64_t)v229, v230, v231, v232, v233, v234, v235);
        v560 = *(_DWORD *)(v559 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v559 + 56) + v560) = -702611200;
      *(_DWORD *)(v559 + 200) += 4;
      v561 = __dst[0];
      if (&v1023 != __dst[0] && __dst[0])
      {
        __dst[0] = 0;
        LODWORD(__dst[1]) = 0;
        WTF::fastFree((unint64_t)v561, v229, v230, v231, v232, v233, v234, v235);
      }
      if (!*((_BYTE *)v754 + 44))
        *((_BYTE *)v754 + 44) = 1;
      *((_DWORD *)v754 + 10) = v477;
LABEL_344:
      v410 = v1015;
      if (v1015)
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*(_DWORD **)v781, (uint64_t)v229, v230, v231, v232, v233, v234, v235, (int *)__dst);
        *((_DWORD *)v410 + 7) = __dst[0];
      }
      v411 = (HIDWORD(v845[0]) + LODWORD(v845[0]) + 15) & 0xFFFFFFF0;
      v412 = v750;
      if (!v411)
        v411 = -1;
      v413 = v754;
      *(_DWORD *)(v749 + 164) = v411;
      v414 = *((_QWORD *)v754 + 1);
      if (v414)
      {
        *((_QWORD *)v754 + 1) = 0;
        *((_DWORD *)v754 + 4) = 0;
        WTF::fastFree(v414, v229, v230, v231, v232, v233, v234, v235);
      }
      v415 = v1010;
      *(_QWORD *)&v1010 = 0;
      *((_QWORD *)v754 + 1) = v415;
      LODWORD(v415) = DWORD2(v1010);
      DWORD2(v1010) = 0;
      *((_DWORD *)v754 + 4) = v415;
      LODWORD(v415) = HIDWORD(v1010);
      HIDWORD(v1010) = 0;
      *((_DWORD *)v754 + 5) = v415;
      v416 = *(_QWORD *)(v750 + 56);
      if (v416)
      {
        *(_QWORD *)(v750 + 56) = 0;
        *(_DWORD *)(v750 + 64) = 0;
        WTF::fastFree(v416, v229, v230, v231, v232, v233, v234, v235);
      }
      v417 = 0;
      v418 = v1011;
      *(_QWORD *)&v1011 = 0;
      *(_QWORD *)(v750 + 56) = v418;
      v419 = *((_QWORD *)&v1011 + 1);
      *((_QWORD *)&v1011 + 1) = 0;
      *(_QWORD *)(v750 + 64) = v419;
      if (v1014)
      {
        v417 = (_DWORD *)WTF::fastMalloc((WTF *)0x20);
        *v417 = 1;
        JSC::PCToCodeOriginMapBuilder::PCToCodeOriginMapBuilder((uint64_t)(v417 + 2), v743);
      }
      v420 = *(_QWORD *)(v750 + 48);
      *(_QWORD *)(v750 + 48) = v417;
      if (v420)
      {
        do
        {
          v421 = __ldaxr((unsigned int *)v420);
          v422 = v421 - 1;
        }
        while (__stlxr(v422, (unsigned int *)v420));
        if (!v422)
        {
          atomic_store(1u, (unsigned int *)v420);
          v644 = *(unsigned int *)(v420 + 20);
          v645 = *(_QWORD *)(v420 + 8);
          if ((_DWORD)v644)
          {
            v736 = 16 * v644;
            v737 = (uint64_t *)(v645 + 8);
            do
            {
              v739 = *v737;
              v737 += 2;
              v738 = v739;
              if ((v739 & 1) != 0 && (v738 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v738 & 0xFFFFFFFF8, v229, v230, v231, v232, v233, v234, v235);
              v736 -= 16;
            }
            while (v736);
            v645 = *(_QWORD *)(v420 + 8);
            v413 = v754;
            v412 = v750;
          }
          if (v645)
          {
            *(_QWORD *)(v420 + 8) = 0;
            *(_DWORD *)(v420 + 16) = 0;
            WTF::fastFree(v645, v229, v230, v231, v232, v233, v234, v235);
          }
          WTF::fastFree(v420, v229, v230, v231, v232, v233, v234, v235);
        }
      }
      v423 = v1015;
      v1015 = 0;
      v424 = *(_QWORD *)(v412 + 32);
      *(_QWORD *)(v412 + 32) = v423;
      if (v424)
      {
        v425 = *(_QWORD *)(v424 + 8);
        if (v425)
        {
          *(_QWORD *)(v424 + 8) = 0;
          *(_DWORD *)(v424 + 16) = 0;
          WTF::fastFree(v425, v229, v230, v231, v232, v233, v234, v235);
        }
        WTF::fastFree(v424, v229, v230, v231, v232, v233, v234, v235);
      }
      *(_QWORD *)v748 = v413;
      *(_DWORD *)(v748 + 8) = 0;
      v236 = 0;
      goto LABEL_362;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v541);
    goto LABEL_486;
  }
  while (1)
  {
    v370 = v757;
    *(_QWORD *)&v779 = v757;
    if ((unint64_t)v757 >= v759)
    {
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't decode opcode", (unint64_t *)&v757, 20, &v1020, *(float *)&v367);
      goto LABEL_461;
    }
    ++v757;
    v371 = v370[v758];
    if (v371 == 255
      || ((JSC::Wasm::isValidOpType<unsigned char>(unsigned char)::valid[v371 >> 3] >> (v371 & 7)) & 1) == 0)
    {
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char>("invalid opcode ", (unint64_t *)&v757, 16, v371, &v1020, *(float *)&v367);
LABEL_461:
      v1021 = 1;
      goto LABEL_463;
    }
    v778 = v370[v758];
    if (BYTE5(qword_1ECF4C789))
    {
      v382 = JSC::Wasm::WasmOpcodeCounter::singleton(v369);
      JSC::Wasm::WasmOpcodeCounter::increment((uint64_t)v382, v778);
    }
    v372 = v764;
    v373 = (_DWORD *)*((_QWORD *)v764 + 1);
    for (m = v373[50]; m < v373[13]; v373[50] = m)
    {
      if ((m + 4) > v373[48])
      {
        *(_QWORD *)&v366 = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v373 + 14), (uint64_t)v359, v360, v371, v362, v363, v364, v365).n128_u64[0];
        m = v373[50];
      }
      *(_DWORD *)(*((_QWORD *)v373 + 7) + m) = -721215457;
      m = v373[50] + 4;
    }
    v373[52] = 0;
    v375 = *(_DWORD *)(*((_QWORD *)v372 + 11) + 20632);
    v376 = 4 * v375;
    if (((v375 >> 26) & 0xF) != 0)
    {
      v378 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v378 = 0;
      *(_DWORD *)(v378 + 8) = v376;
      v377 = 1;
    }
    else
    {
      v377 = 0;
      v378 = v376 << 36;
    }
    v379 = v378 | v377;
    __dst[0] = (void *)v379;
    if (*((_BYTE *)v372 + 3024))
    {
      LODWORD(v1065) = m;
      JSC::PCToCodeOriginMapBuilder::appendItemSlow((uint64_t)v372 + 3008, (unsigned int *)&v1065, (unint64_t *)__dst);
      v379 = (uint64_t)__dst[0];
    }
    if ((v379 & 1) != 0 && (v379 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v379 & 0xFFFFFFFF8, v359, v360, v371, v362, v363, v364, v365);
    v380 = *((_QWORD *)v372 + 379);
    if (v380)
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(*((_DWORD **)v372 + 1), (uint64_t)v359, v360, v371, v362, v363, v364, v365, (int *)__dst);
      JSC::Wasm::BBQDisassembler::setOpcode(v380, (int)__dst[0], *(_BYTE *)(*((_QWORD *)v372 + 11) + 20624), *(_QWORD *)(*((_QWORD *)v372 + 11) + 20632));
    }
    if (DWORD2(v779))
      JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseUnreachableExpression((uint64_t)__dst, (uint64_t)&v757, v360, v371, v362, v363, v364, v365, v366, v367);
    else
      v369 = (JSC::Wasm::WasmOpcodeCounter *)JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseExpression(__dst, &v757);
    if (LOBYTE(__dst[1]))
      break;
    if (!HIDWORD(v769))
      goto LABEL_313;
  }
  v517 = __dst[0];
  __dst[0] = 0;
  v1020 = v517;
  v1021 = 1;
  std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)__dst, (WTF::AtomStringImpl *)v359, v360, v381, v362, v363, v364, v365);
LABEL_463:
  v518 = v1020;
  v1020 = 0;
  v755 = v518;
  v756 = 1;
  std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v1020, v510, v511, v512, v513, v514, v515, v516);
LABEL_172:
  v228 = v755;
  v755 = 0;
  *(_QWORD *)v748 = v228;
  *(_DWORD *)(v748 + 8) = 1;
  std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v755, v221, v222, v223, v224, v225, v226, v227);
  v236 = (JSC::Wasm::InternalFunction *)v754;
LABEL_362:
  if ((v777 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v777, v229, v230, v231, v232, v233, v234, v235);
  v426 = v776;
  if ((_QWORD)v776)
  {
    *(_QWORD *)&v776 = 0;
    DWORD2(v776) = 0;
    WTF::fastFree(v426, v229, v230, v231, v232, v233, v234, v235);
  }
  v427 = v771;
  if (v773 != (_BYTE *)v771 && v771)
  {
    v771 = 0;
    LODWORD(v772) = 0;
    WTF::fastFree((unint64_t)v427, v229, v230, v231, v232, v233, v234, v235);
  }
  if (HIDWORD(v769))
    WTF::VectorTypeOperations<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry>::destruct(v768, (_QWORD *)v768 + 154 * HIDWORD(v769), v230, v231, v232, v233, v234, v235);
  v428 = v768;
  if (v770 != (_BYTE *)v768 && v768)
  {
    v768 = 0;
    LODWORD(v769) = 0;
    WTF::fastFree((unint64_t)v428, v229, v230, v231, v232, v233, v234, v235);
  }
  v429 = v765;
  if (v767 != (_BYTE *)v765 && v765)
  {
    v765 = 0;
    LODWORD(v766) = 0;
    WTF::fastFree((unint64_t)v429, v229, v230, v231, v232, v233, v234, v235);
  }
  v430 = v1015;
  v1015 = 0;
  if (v430)
  {
    v431 = *((_QWORD *)v430 + 1);
    if (v431)
    {
      *((_QWORD *)v430 + 1) = 0;
      *((_DWORD *)v430 + 4) = 0;
      WTF::fastFree(v431, v229, v230, v231, v232, v233, v234, v235);
    }
    WTF::fastFree((unint64_t)v430, v229, v230, v231, v232, v233, v234, v235);
  }
  v432 = v1013;
  if (HIDWORD(v1013))
  {
    v696 = 16 * HIDWORD(v1013);
    v697 = (uint64_t *)(v1013 + 8);
    do
    {
      v699 = *v697;
      v697 += 2;
      v698 = v699;
      if ((v699 & 1) != 0 && (v698 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v698 & 0xFFFFFFFF8, v229, v230, v231, v232, v233, v234, v235);
      v696 -= 16;
    }
    while (v696);
    v432 = v1013;
  }
  if (v432)
  {
    *(_QWORD *)&v1013 = 0;
    DWORD2(v1013) = 0;
    WTF::fastFree(v432, v229, v230, v231, v232, v233, v234, v235);
  }
  v433 = v1012;
  if ((_QWORD)v1012)
  {
    *(_QWORD *)&v1012 = 0;
    DWORD2(v1012) = 0;
    WTF::fastFree(v433, v229, v230, v231, v232, v233, v234, v235);
  }
  v434 = v1011;
  if ((_QWORD)v1011)
  {
    *(_QWORD *)&v1011 = 0;
    DWORD2(v1011) = 0;
    WTF::fastFree(v434, v229, v230, v231, v232, v233, v234, v235);
  }
  v435 = v1010;
  if ((_QWORD)v1010)
  {
    *(_QWORD *)&v1010 = 0;
    DWORD2(v1010) = 0;
    WTF::fastFree(v435, v229, v230, v231, v232, v233, v234, v235);
  }
  v436 = 1600;
  do
  {
    v437 = &v781[v436 / 4 - 2];
    v438 = *(_OWORD **)((char *)&v846 + v436 + 8);
    if ((__int128 *)((char *)&v847 + v436 + 8) != v438 && v438 != 0)
    {
      *((_QWORD *)v437 + 165) = 0;
      v437[332] = 0;
      WTF::fastFree((unint64_t)v438, v229, v230, v231, v232, v233, v234, v235);
    }
    v436 -= 40;
  }
  while (v436);
  v440 = v842;
  if (&v844 != (uint64_t *)v842 && v842 != 0)
  {
    v842 = 0;
    LODWORD(v843) = 0;
    WTF::fastFree((unint64_t)v440, v229, v230, v231, v232, v233, v234, v235);
  }
  if (HIDWORD(v840))
  {
    v442 = v839;
    v443 = (WTF *)((char *)v839 + 8 * HIDWORD(v840));
    do
    {
      v444 = *(unsigned int **)v442;
      *(_QWORD *)v442 = 0;
      if (v444)
      {
        v445 = v444 + 2;
        do
        {
          v446 = __ldaxr(v445);
          v447 = v446 - 1;
        }
        while (__stlxr(v447, v445));
        if (!v447)
        {
          atomic_store(1u, v444 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v444 + 8))(v444);
        }
      }
      v442 = (WTF *)((char *)v442 + 8);
    }
    while (v442 != v443);
  }
  v448 = v839;
  if (v841 != (_BYTE *)v839 && v839 != 0)
  {
    v839 = 0;
    LODWORD(v840) = 0;
    WTF::fastFree((unint64_t)v448, v229, v230, v231, v232, v233, v234, v235);
  }
  v450 = v835;
  if (v837 != (_OWORD *)v835 && v835 != 0)
  {
    v835 = 0;
    LODWORD(v836) = 0;
    WTF::fastFree((unint64_t)v450, v229, v230, v231, v232, v233, v234, v235);
  }
  v452 = v832;
  if (v834 != (_OWORD *)v832 && v832)
  {
    v832 = 0;
    LODWORD(v833) = 0;
    WTF::fastFree((unint64_t)v452, v229, v230, v231, v232, v233, v234, v235);
  }
  v453 = v829;
  if (&v831 != (uint64_t *)v829 && v829)
  {
    v829 = 0;
    LODWORD(v830) = 0;
    WTF::fastFree((unint64_t)v453, v229, v230, v231, v232, v233, v234, v235);
  }
  v454 = v826;
  if (v828 != (_BYTE *)v826 && v826)
  {
    v826 = 0;
    LODWORD(v827) = 0;
    WTF::fastFree((unint64_t)v454, v229, v230, v231, v232, v233, v234, v235);
  }
  v455 = v823;
  if (v825 != (_BYTE *)v823 && v823)
  {
    v823 = 0;
    LODWORD(v824) = 0;
    WTF::fastFree((unint64_t)v455, v229, v230, v231, v232, v233, v234, v235);
  }
  v456 = v820;
  if (v822 != (_BYTE *)v820 && v820)
  {
    v820 = 0;
    LODWORD(v821) = 0;
    WTF::fastFree((unint64_t)v456, v229, v230, v231, v232, v233, v234, v235);
  }
  v457 = v812;
  if (v814 != (_BYTE *)v812 && v812)
  {
    v812 = 0;
    LODWORD(v813) = 0;
    WTF::fastFree((unint64_t)v457, v229, v230, v231, v232, v233, v234, v235);
  }
  v458 = v809;
  if (v811 != (_BYTE *)v809 && v809)
  {
    v809 = 0;
    LODWORD(v810) = 0;
    WTF::fastFree((unint64_t)v458, v229, v230, v231, v232, v233, v234, v235);
  }
  v459 = v807;
  if ((_QWORD)v807)
  {
    *(_QWORD *)&v807 = 0;
    DWORD2(v807) = 0;
    WTF::fastFree(v459, v229, v230, v231, v232, v233, v234, v235);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::~ControlData((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)v794, v229, v230, v231, v232, v233, v234, v235);
  v467 = v791;
  if (v793 != (_BYTE *)v791 && v791)
  {
    v791 = 0;
    LODWORD(v792) = 0;
    WTF::fastFree((unint64_t)v467, v460, v461, v462, v463, v464, v465, v466);
  }
  if (v236)
  {
    JSC::Wasm::InternalFunction::~InternalFunction(v236, v460, v461, v462, v463, v464, v465, v466);
    WTF::fastFree(v468, v469, v470, v471, v472, v473, v474, v475);
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v1018);
}

_QWORD *JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v3 = a2 & 0x7F;
  if (v3 >= 0x40)
  {
    __break(1u);
    goto LABEL_14;
  }
  v2 = a2;
  v4 = *result;
  v5 = a2 & 0x7F;
  v6 = 1 << (a2 & 0x7F);
  if ((*(_QWORD *)(*result + 648) & v6) == 0)
    return (_QWORD *)v2;
  if (*(unsigned int *)(v4 + 340) > (unint64_t)(int)a2)
  {
    v3 = (int)a2;
    v7 = *(_QWORD *)(v4 + 328) + 4 * (int)a2;
    *(_QWORD *)(v4 + 992) |= 1 << v5;
    if ((a2 & 0x60) == 0x20 && (a2 & 0x60) == 0x20)
      *(_QWORD *)(v4 + 1000) |= 1 << v5;
    if ((result[2] & v6) != 0 && (*(_WORD *)(v7 + 1) & 7) != 0)
    {
      if ((_BYTE)word_1ECF4C700)
      {
        v8 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * (int)a2];
        WTF::dataLog<char [20],WTF::ASCIILiteral,char [21],JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding,char [2]>("BBQ\tPreserving GPR ", (uint64_t)&v8, " currently bound to ", v7, "\n");
      }
      return (_QWORD *)v2;
    }
    *(_DWORD *)v7 = 768;
    *(int8x16_t *)(*result + 616) = vandq_s8(*(int8x16_t *)(*result + 616), (int8x16_t)vdupq_n_s64(~v6));
    if (!(_BYTE)word_1ECF4C700)
      return (_QWORD *)v2;
LABEL_14:
    v8 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v3];
    WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReserving scratch GPR ", (uint64_t)&v8, "\n");
    return (_QWORD *)v2;
  }
  __break(0xC471u);
  return result;
}

_QWORD *JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindFPRToScratch(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v10;

  v5 = result;
  v6 = *result;
  v7 = (a2 + 32);
  v8 = ((_BYTE)a2 + 32) & 0x7F;
  v9 = ((_BYTE)a2 + 32) & 0x60;
  if (v9 == 32)
  {
    if (v8 < 0x40)
    {
      if ((*(_QWORD *)(v6 + 664) & (1 << v8)) == 0 || (*(_QWORD *)(v6 + 672) & (1 << v8)) == 0)
        return (_QWORD *)a2;
      goto LABEL_4;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v8 >= 0x40)
    goto LABEL_14;
  if (((*(_QWORD *)(v6 + 664) >> v8) & 1) == 0)
    return (_QWORD *)a2;
LABEL_4:
  if (*(unsigned int *)(v6 + 484) > (unint64_t)(int)a2)
  {
    v3 = (int)a2;
    v2 = *(_QWORD *)(v6 + 472) + 4 * (int)a2;
    JSC::Wasm::BBQJITImpl::BBQJIT::LRU<JSC::ARM64Registers::FPRegisterID>::lock(v6 + 1008, a2);
    v6 = 1 << v8;
    v7 = v5[2] & (1 << v8);
    if (v9 != 32)
    {
      if (!v7)
        goto LABEL_16;
LABEL_7:
      if ((*(_WORD *)(v2 + 1) & 7) != 0)
      {
        if ((_BYTE)word_1ECF4C700)
        {
          v10 = *(_OWORD *)&(&JSC::ARM64Assembler::fprName(JSC::ARM64Registers::FPRegisterID)::nameForRegister)[2 * v3];
          WTF::dataLog<char [20],WTF::ASCIILiteral,char [21],JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding,char [2]>("BBQ\tPreserving FPR ", (uint64_t)&v10, " currently bound to ", v2, "\n");
        }
        return (_QWORD *)a2;
      }
LABEL_16:
      *(_DWORD *)v2 = 768;
      *(int8x16_t *)(*v5 + 632) = vandq_s8(*(int8x16_t *)(*v5 + 632), (int8x16_t)vdupq_n_s64(~v6));
      if ((_BYTE)word_1ECF4C700)
      {
        v10 = *(_OWORD *)&(&JSC::ARM64Assembler::fprName(JSC::ARM64Registers::FPRegisterID)::nameForRegister)[2 * v3];
        WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReserving scratch FPR ", (uint64_t)&v10, "\n");
      }
      return (_QWORD *)a2;
    }
LABEL_15:
    if (!v7 || (v5[3] & v6) == 0)
      goto LABEL_16;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::LRU<JSC::ARM64Registers::RegisterID>::lock(uint64_t result, char a2)
{
  uint64_t v2;
  char v3;

  v3 = a2 & 0x7F;
  if ((a2 & 0x7Fu) >= 0x40)
  {
    __break(1u);
LABEL_6:
    *(_QWORD *)(result + 152) |= v2;
    return result;
  }
  v2 = 1 << v3;
  *(_QWORD *)(result + 144) |= 1 << v3;
  if ((a2 & 0x60) == 0x20 && (a2 & 0x60) == 0x20)
    goto LABEL_6;
  return result;
}

uint64_t WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>(const char *a1, uint64_t a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char v16;
  char **v17;
  char *v18;
  int v19;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", a1);
  v9 = *(char **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  if (v9)
  {
    v13 = v10 - 1;
    if (!v10)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v18, v12);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v18 = (char *)v14;
    v19 = 0;
  }
  WTF::printExpectedCStringHelper(v11, "StringView", &v18);
  if (v19 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v19])(&v17, &v18);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::LRU<JSC::ARM64Registers::FPRegisterID>::lock(uint64_t result, char a2)
{
  uint64_t v2;
  unsigned int v3;

  v3 = (a2 + 32) & 0x7F;
  if (v3 >= 0x40)
  {
    __break(1u);
LABEL_6:
    *(_QWORD *)(result + 152) |= v2;
    return result;
  }
  v2 = 1 << v3;
  *(_QWORD *)(result + 144) |= 1 << v3;
  if (((a2 + 32) & 0x60) == 0x20 && ((a2 + 32) & 0x60) == 0x20)
    goto LABEL_6;
  return result;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addI64Eq(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addI64Ne(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>(uint64_t a1, uint64_t a2)
{
  return a1 != a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addI32LtS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<int,int>(int a1, int a2)
{
  return a1 < a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addI64LtS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addI32LeS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<int,int>(int a1, int a2)
{
  return a1 <= a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addI64LeS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>(uint64_t a1, uint64_t a2)
{
  return a1 <= a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addI32GtS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<int,int>(int a1, int a2)
{
  return a1 > a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addI64GtS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>(uint64_t a1, uint64_t a2)
{
  return a1 > a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addI32GeS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<int,int>(int a1, int a2)
{
  return a1 >= a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addI64GeS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>(uint64_t a1, uint64_t a2)
{
  return a1 >= a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addI32LtU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<int,int>(unsigned int a1, unsigned int a2)
{
  return a1 < a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addI64LtU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>(unint64_t a1, unint64_t a2)
{
  return a1 < a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addI64LeU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>(unint64_t a1, unint64_t a2)
{
  return a1 <= a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addI32GtU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<int,int>(unsigned int a1, unsigned int a2)
{
  return a1 > a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addI64GtU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>(unint64_t a1, unint64_t a2)
{
  return a1 > a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addI32GeU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<int,int>(unsigned int a1, unsigned int a2)
{
  return a1 >= a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addI64GeU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<long long,long long>(unint64_t a1, unint64_t a2)
{
  return a1 >= a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addF32Eq(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<float,float>(float a1, float a2)
{
  return a1 == a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addF64Eq(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<double,double>(double a1, double a2)
{
  return a1 == a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addF32Ne(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<float,float>(float a1, float a2)
{
  return a1 != a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addF64Ne(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<double,double>(double a1, double a2)
{
  return a1 != a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addF32Lt(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<float,float>(float a1, float a2)
{
  return a1 < a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addF64Lt(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<double,double>(double a1, double a2)
{
  return a1 < a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addF32Le(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<float,float>(float a1, float a2)
{
  return a1 <= a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addF64Le(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<double,double>(double a1, double a2)
{
  return a1 <= a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addF32Gt(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<float,float>(float a1, float a2)
{
  return a1 > a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addF64Gt(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<double,double>(double a1, double a2)
{
  return a1 > a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addF32Ge(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<float,float>(float a1, float a2)
{
  return a1 >= a2;
}

BOOL JSC::Wasm::BBQJITImpl::BBQJIT::addF64Ge(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::__invoke<double,double>(double a1, double a2)
{
  return a1 >= a2;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::~ControlData(JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *v17;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *v19;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *v20;

  v9 = *((_QWORD *)this + 18);
  if ((v9 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((unsigned int *)this + 29);
  if ((_DWORD)v10)
  {
    v11 = (unsigned int **)*((_QWORD *)this + 13);
    v12 = &v11[v10];
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  v16 = *((_QWORD *)this + 13);
  if (v16)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = (JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)*((_QWORD *)this + 8);
  if ((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)((char *)this + 80) != v17 && v17 != 0)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
  }
  v19 = (JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)*((_QWORD *)this + 5);
  if ((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)((char *)this + 56) != v19 && v19)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree((unint64_t)v19, a2, a3, a4, a5, a6, a7, a8);
  }
  v20 = (JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)*((_QWORD *)this + 2);
  if ((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)((char *)this + 32) != v20)
  {
    if (v20)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t WTF::VectorBuffer<JSC::Wasm::BBQJITImpl::BBQJIT::Location,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 3)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 2;
  }
  else
  {
    v3 = a2;
    if (a2 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(4 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

void WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int *v14;
  int v15;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(_QWORD *)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<JSC::Wasm::BBQJITImpl::BBQJIT::Location,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    if ((_DWORD)v4)
    {
      v12 = *(_DWORD **)a1;
      v13 = 4 * v4;
      v14 = (int *)v3;
      do
      {
        v15 = *v14++;
        *v12++ = v15;
        v13 -= 4;
      }
      while (v13);
    }
    if (a1 + 16 != v3 && v3)
    {
      if (*(_QWORD *)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

void WTF::VectorTypeOperations<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry>::destruct(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t v12;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::~ControlData((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)(v9 + 133), a2, a3, a4, a5, a6, a7, a8);
      v10 = v9[66];
      if (v9 + 68 != (_QWORD *)v10 && v10 != 0)
      {
        v9[66] = 0;
        *((_DWORD *)v9 + 134) = 0;
        WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
      }
      v12 = *v9;
      if (v9 + 2 != (_QWORD *)*v9 && v12 != 0)
      {
        *v9 = 0;
        *((_DWORD *)v9 + 2) = 0;
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      v9 += 154;
    }
    while (v9 != a2);
  }
}

uint64_t JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry::~ControlEntry(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v18;

  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::~ControlData((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)(a1 + 1064), a2, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 528);
  if (a1 + 544 != v16 && v16 != 0)
  {
    *(_QWORD *)(a1 + 528) = 0;
    *(_DWORD *)(a1 + 536) = 0;
    WTF::fastFree(v16, v9, v10, v11, v12, v13, v14, v15);
  }
  v18 = *(_QWORD *)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v18 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v18, v9, v10, v11, v12, v13, v14, v15);
  }
  return a1;
}

unsigned __int8 *JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindScratches(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  char v5;
  int8x16_t *v6;
  __int128 v7;

  if (result[32])
    return result;
  v3 = result;
  result[32] = 1;
  v4 = result[8];
  v5 = v4 & 0x7F;
  if ((v4 & 0x7Fu) >= 0x40)
  {
    __break(1u);
  }
  else
  {
    v6 = *(int8x16_t **)result;
    v1 = 1 << v5;
    if ((*(_QWORD *)(*(_QWORD *)result + 648) & (1 << v5)) == 0)
      return result;
    v4 = (char)v4;
    if (v6[21].u32[1] <= (unint64_t)(char)v4)
    {
      __break(0xC471u);
      return result;
    }
    v2 = v6[20].i64[1] + 4 * (char)v4;
    v6[62] = vandq_s8(v6[62], (int8x16_t)vdupq_n_s64(~v1));
    if (!(_BYTE)word_1ECF4C700)
      goto LABEL_6;
  }
  v7 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v4];
  result = (unsigned __int8 *)WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v7, "\n");
LABEL_6:
  if ((*((_QWORD *)v3 + 2) & v1) == 0 || (*(_WORD *)(v2 + 1) & 7) == 3)
  {
    *(_DWORD *)v2 = 0;
    *(_QWORD *)(*(_QWORD *)v3 + 616) |= 1 << v5;
  }
  return result;
}

_QWORD *JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(_QWORD *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int8x16_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = result;
  v5 = (int8x16_t *)*result;
  v6 = (a2 + 32) & 0x7F;
  v7 = ((_BYTE)a2 + 32) & 0x60;
  if (v7 != 32)
  {
    if (v6 < 0x40)
    {
      if ((((unint64_t)v5[41].i64[1] >> v6) & 1) == 0)
        return result;
LABEL_4:
      if (v5[30].u32[1] <= (unint64_t)a2)
      {
        __break(0xC471u);
        return result;
      }
      v2 = v5[29].i64[1] + 4 * a2;
      v3 = 1 << v6;
      v5[72] = vandq_s8(v5[72], (int8x16_t)vdupq_n_s64(~(1 << v6)));
      if ((_BYTE)word_1ECF4C700)
      {
        v9 = *(_OWORD *)&(&JSC::ARM64Assembler::fprName(JSC::ARM64Registers::FPRegisterID)::nameForRegister)[2 * a2];
        result = (_QWORD *)WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing FPR ", (uint64_t)&v9, "\n");
      }
      v5 = (int8x16_t *)(v4[2] & v3);
      if (v7 != 32)
      {
        if (v5)
          goto LABEL_9;
        goto LABEL_10;
      }
LABEL_18:
      if (v5 && (v4[3] & v3) != 0)
      {
LABEL_9:
        if ((*(_WORD *)(v2 + 1) & 7) != 3)
          return result;
      }
LABEL_10:
      *(_DWORD *)v2 = 0;
      v8 = *v4;
      *(_QWORD *)(*v4 + 632) |= 1 << v6;
      if (v7 == 32)
        *(_QWORD *)(v8 + 640) |= 1 << v6;
      return result;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v6 >= 0x40)
    goto LABEL_17;
  if ((v5[41].i64[1] & (1 << v6)) != 0 && (v5[42].i64[0] & (1 << v6)) != 0)
    goto LABEL_4;
  return result;
}

_DWORD *WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::BBQJITImpl::BBQJIT::Location>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

unint64_t WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 4 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

unint64_t WTF::Vector<WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int **v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = (_QWORD *)v9;
        v18 = (unsigned int **)v7;
        do
        {
          v19 = *v18;
          *v18 = 0;
          *v17 = v19;
          v20 = *v18;
          *v18 = 0;
          if (v20)
          {
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              atomic_store(1u, v20);
              WTF::fastFree((unint64_t)v20, v10, v11, v12, v13, v14, v15, v16);
            }
          }
          ++v17;
          ++v18;
        }
        while (v18 != (unsigned int **)(v7 + 8 * v8));
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t WTF::dataLog<char [20],JSC::RegisterSet,char [15],JSC::RegisterSet,char [2]>(JSC::RegisterSet *a1, JSC::RegisterSet *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "BBQ\tUsing GPR set: ");
  JSC::RegisterSet::dump(a1, v6);
  WTF::PrintStream::printf(v6, "%s", "\n   \tFPR set: ");
  JSC::RegisterSet::dump(a2, v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

_DWORD *WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::BBQJITImpl::BBQJIT::Location>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  int *v18;
  int v19;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 4 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 9)
  {
    v16 = (_DWORD *)(result + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 8;
    goto LABEL_13;
  }
  if (!(v14 >> 30))
  {
    v16 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_13:
    if ((_DWORD)v15)
    {
      v17 = 4 * v15;
      v18 = (int *)v10;
      do
      {
        v19 = *v18++;
        *v16++ = v19;
        v17 -= 4;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int *v17;
  int v18;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 > v8)
  {
    v13 = *(_QWORD *)a1;
    v14 = *(unsigned int *)(a1 + 12);
    if (v11 < 9)
    {
      v15 = (_DWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
    }
    else
    {
      if (v11 >> 30)
      {
        __break(0xC471u);
        return;
      }
      v15 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v11));
      *(_DWORD *)(a1 + 8) = v11;
      *(_QWORD *)a1 = v15;
    }
    if ((_DWORD)v14)
    {
      v16 = 4 * v14;
      v17 = (int *)v13;
      do
      {
        v18 = *v17++;
        *v15++ = v18;
        v16 -= 4;
      }
      while (v16);
    }
    if (a1 + 16 != v13 && v13)
    {
      if (*(_QWORD *)a1 == v13)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

_BYTE *WTF::Vector<JSC::Wasm::TypeKind,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::TypeKind const&>(uint64_t a1, unint64_t a2)
{
  _BYTE *result;
  uint64_t v4;

  result = (_BYTE *)WTF::Vector<JSC::Wasm::TypeKind,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(*(unsigned int *)(a1 + 12) + 1), a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_BYTE *)(*(_QWORD *)a1 + v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<JSC::Wasm::TypeKind,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::Wasm::TypeKind,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= (unint64_t)a2)
    v9 = (unint64_t)a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 9)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 8;
    goto LABEL_13;
  }
  if (!HIDWORD(v9))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)v9);
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_13:
    memcpy(v11, v5, v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::Wasm::TypeKind,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  size_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v7 = *(const void **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    if (v5 < 9)
    {
      v9 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
    }
    else
    {
      if (HIDWORD(v5))
      {
        __break(0xC471u);
        return;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)v5);
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
    }
    memcpy(v9, v7, v8);
    if ((const void *)(a1 + 16) != v7 && v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v12;

  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a2);
  v9 = *((unsigned __int8 *)a2 + 8);
  if (v9 != 1 && v9 != 4)
  {
    v12 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a2, a2[1], v4, v5, v6, v7, v8);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v12);
  }
  return WTF::dataLog<char [16]>("\n");
}

uint64_t WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::Wasm::BBQJITImpl::BBQJIT::Value::dump(a1, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(const char *a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", a1);
  JSC::Wasm::BBQJITImpl::BBQJIT::Location::dump(a2, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<WTF::ASCIILiteral>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  float v8;
  unsigned int v9;
  uint64_t v10;
  char v12;
  char **v13;
  char *v14;
  int v15;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v5 = *(char **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if (v5)
  {
    v9 = v6 - 1;
    if (!v6)
      v9 = 0;
    WTF::StringImpl::utf8ForCharacters(v5, v9, (uint64_t)&v14, v8);
  }
  else
  {
    v10 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = 0;
    *(_BYTE *)(v10 + 16) = 0;
    v14 = (char *)v10;
    v15 = 0;
  }
  WTF::printExpectedCStringHelper(v7, "StringView", &v14);
  if (v15 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v15])(&v13, &v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<8ul>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t i;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t j;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  int v54;
  unsigned int v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  unsigned int v65;
  WTF *v66;
  uint64_t v67;
  _BYTE v68[32];
  WTF *v69;
  uint64_t v70;
  _BYTE v71[136];

  v69 = (WTF *)v71;
  v70 = 8;
  v11 = *(unsigned int *)(a2 + 12);
  if (v11 >= 9)
  {
    if (v11 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198F3524CLL);
    }
    LODWORD(v70) = *(_DWORD *)(a2 + 12);
    v69 = (WTF *)WTF::fastMalloc((WTF *)(16 * v11));
    v11 = *(unsigned int *)(a2 + 12);
  }
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)a2 + 8;
    v13 = 16 * v11;
    do
    {
      if (*(_BYTE *)v12 == 1)
      {
        v14 = *(_QWORD *)(v12 - 8);
        v15 = *(_QWORD *)v12;
        v16 = v14;
        v17 = *(_QWORD *)v12;
      }
      else
      {
        v18 = *(unsigned __int8 *)(v12 + 1);
        v19 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *(_QWORD *)(v12 - 8), *(_QWORD *)v12, a4, a5, a6, a7, a8);
        if ((unint64_t)(v18 - 192) <= 0x33)
        {
          if (((1 << (v18 + 64)) & 0xFFC19C001C000) != 0)
          {
            v18 = 254;
          }
          else if (v18 == 192)
          {
            __break(0xC471u);
            JUMPOUT(0x198F3515CLL);
          }
        }
        v17 = (v18 << 8) | 4;
        v14 = *(_QWORD *)(v12 - 8);
        v15 = *(_QWORD *)v12;
        v16 = v19;
      }
      v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v14, v15, a4, a5, a6, a7, a8);
      if (v15 == 2)
      {
        v21 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v14 + 16;
        if (*(_DWORD *)(a1 + 1280) < v21)
          *(_DWORD *)(a1 + 1280) = v21;
        v22 = (-8 * v21) ^ v20;
        if ((v20 & 7) != 1 || v22 >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v14, v15, v20);
      }
      v24 = (uint64_t *)((char *)v69 + 16 * HIDWORD(v70));
      *v24 = v16;
      v24[1] = v17;
      ++HIDWORD(v70);
      v12 += 16;
      v13 -= 16;
    }
    while (v13);
  }
  v25 = *(_QWORD *)(a1 + 1336);
  if (v25)
  {
    v26 = __clz(__rbit64(v25));
    while (1)
    {
      if (v26 > 0x1F)
      {
        v28 = (v26 - 32);
        v27 = (_QWORD *)(a1 + 472);
        if (v28 >= *(unsigned int *)(a1 + 484))
        {
          __break(0xC471u);
          JUMPOUT(0x198F351ECLL);
        }
      }
      else
      {
        v27 = (_QWORD *)(a1 + 328);
        v28 = v26;
        if (v26 >= *(unsigned int *)(a1 + 340))
        {
          __break(0xC471u);
          JUMPOUT(0x198F351E4);
        }
      }
      v29 = *(unsigned int *)(*v27 + 4 * v28);
      v30 = (v29 >> 8) & 7;
      if (!v30)
        goto LABEL_31;
      v33 = v29;
      if (v30 == 2)
        break;
      if (v30 != 3)
      {
        if (v30 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198F3517CLL);
        }
        if ((unint64_t)v29 - 192 <= 0x33)
        {
          if (((1 << (v29 + 64)) & 0xFFC19C001C000) == 0)
          {
            v34 = 3;
            if (v29 == 192)
            {
              __break(0xC471u);
              JUMPOUT(0x198F35244);
            }
            goto LABEL_51;
          }
          v33 = 254;
        }
        v34 = 3;
        goto LABEL_51;
      }
LABEL_31:
      if (v26 <= 0x3E)
      {
        v31 = *(_QWORD *)(a1 + 1336);
        if (v31)
        {
          v32 = __clz(__rbit64(v31 >> ((v26 + 1) & 0x3F))) + (((_BYTE)v26 + 1) & 0x3F);
          v26 = v32 >= 0x40 ? 64 : v32;
          if (v32 <= 0x3F)
            continue;
        }
      }
      goto LABEL_54;
    }
    if ((unint64_t)v29 - 192 <= 0x33)
    {
      if (((1 << (v29 + 64)) & 0xFFC19C001C000) == 0)
      {
        v34 = 2;
        if (v29 == 192)
        {
          __break(0xC471u);
          JUMPOUT(0x198F351BCLL);
        }
        goto LABEL_51;
      }
      v33 = 254;
    }
    v34 = 2;
LABEL_51:
    JSC::Wasm::BBQJITImpl::BBQJIT::flushValue(a1, (JSC::ARM64LogicalImmediate *)(v29 >> 11), v34 | (v33 << 8), a4, a5, a6, a7, a8);
    goto LABEL_31;
  }
LABEL_54:
  v35 = *(unsigned int *)(a3 + 44);
  if (!(_DWORD)v35)
  {
    v66 = (WTF *)v68;
    v67 = 8;
    goto LABEL_111;
  }
  v36 = 0;
  for (i = 0; i < v35; ++i)
  {
    v38 = (uint64_t *)(*(_QWORD *)(a3 + 32) + v36);
    v39 = *v38;
    v40 = *((unsigned __int8 *)v38 + 8);
    switch(v40)
    {
      case 0:
        v41 = 2;
LABEL_58:
        v42 = v41 & 0xFFFF00FF | (v39 << 8);
        break;
      case 3:
        v42 = (8 * v39) | 5;
        break;
      case 1:
        v41 = 3;
        goto LABEL_58;
      case 2:
        v42 = (8 * v39) | 1;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F35108);
    }
    if ((v42 & 6) != 2)
      goto LABEL_70;
    v43 = v42 & 7;
    switch(v43)
    {
      case 6:
        LODWORD(v44) = v42 >> 8;
        if (*(unsigned int *)(a1 + 340) <= (unint64_t)(char)v44)
        {
          __break(0xC471u);
          JUMPOUT(0x198F35204);
        }
        break;
      case 3:
        LODWORD(v44) = v42 >> 8;
        if (*(unsigned int *)(a1 + 484) <= (unint64_t)(char)v44)
        {
          __break(0xC471u);
          JUMPOUT(0x198F351FCLL);
        }
        v44 = (char)v44;
        v45 = (_QWORD *)(a1 + 472);
        goto LABEL_69;
      case 2:
        LODWORD(v44) = v42 >> 8;
        if (*(unsigned int *)(a1 + 340) <= (unint64_t)(char)v44)
        {
          __break(0xC471u);
          JUMPOUT(0x198F351F4);
        }
        break;
      default:
        goto LABEL_70;
    }
    v44 = (char)v44;
    v45 = (_QWORD *)(a1 + 328);
LABEL_69:
    v46 = *(unsigned int *)(*v45 + 4 * v44);
    v47 = v46;
    switch((v46 >> 8) & 7)
    {
      case 0u:
      case 3u:
        goto LABEL_70;
      case 1u:
        if ((unint64_t)v46 - 192 > 0x33)
          goto LABEL_90;
        if (((1 << (v46 + 64)) & 0xFFC19C001C000) != 0)
        {
          v47 = 254;
LABEL_90:
          v48 = 3;
        }
        else
        {
          v48 = 3;
          if (v46 == 192)
          {
            __break(0xC471u);
            JUMPOUT(0x198F35224);
          }
        }
        return;
      case 2u:
        if ((unint64_t)v46 - 192 > 0x33)
          goto LABEL_87;
        if (((1 << (v46 + 64)) & 0xFFC19C001C000) != 0)
        {
          v47 = 254;
LABEL_87:
          v48 = 2;
        }
        else
        {
          v48 = 2;
          if (v46 == 192)
          {
            __break(0xC471u);
            JUMPOUT(0x198F351DCLL);
          }
        }
        return;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F3519CLL);
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::flushValue(a1, (JSC::ARM64LogicalImmediate *)(v46 >> 11), v48 | (v47 << 8), a4, a5, a6, a7, a8);
    v35 = *(unsigned int *)(a3 + 44);
LABEL_70:
    v36 += 24;
  }
  v66 = (WTF *)v68;
  v67 = 8;
  if (v35 >= 9)
  {
    if (v35 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x198F35254);
    }
    LODWORD(v67) = v35;
    v66 = (WTF *)WTF::fastMalloc((WTF *)(4 * v35));
    v35 = *(unsigned int *)(a3 + 44);
  }
  if (v35)
  {
    v49 = 0;
    for (j = 0; j < *(unsigned int *)(a3 + 44); ++j)
    {
      v51 = (uint64_t *)(*(_QWORD *)(a3 + 32) + v49);
      v52 = *v51;
      v53 = *((unsigned __int8 *)v51 + 8);
      if (v53)
      {
        if (v53 == 3)
        {
          v55 = (8 * v52) | 5;
          goto LABEL_99;
        }
        if (v53 != 1)
        {
          if (v53 != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x198F35128);
          }
          v55 = (8 * v52) | 1;
          goto LABEL_99;
        }
        v54 = 3;
      }
      else
      {
        v54 = 2;
      }
      v55 = v54 & 0xFFFF00FF | (v52 << 8);
LABEL_99:
      v65 = v55;
      if (HIDWORD(v67) == (_DWORD)v67)
      {
        WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::BBQJITImpl::BBQJIT::Location>((uint64_t)&v66, (unint64_t)&v65, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        *((_DWORD *)v66 + HIDWORD(v67)) = v55;
        ++HIDWORD(v67);
      }
      v49 += 24;
    }
  }
LABEL_111:
  JSC::Wasm::BBQJITImpl::BBQJIT::emitShuffle<8ul,WTF::CrashOnOverflow>(a1, (uint64_t)&v69, (unsigned int **)&v66, a4, a5, a6, a7, a8);
  v63 = v66;
  if (v68 != (_BYTE *)v66 && v66)
  {
    v66 = 0;
    LODWORD(v67) = 0;
    WTF::fastFree((unint64_t)v63, v56, v57, v58, v59, v60, v61, v62);
  }
  v64 = v69;
  if (v71 != (_BYTE *)v69 && v69)
  {
    v69 = 0;
    LODWORD(v70) = 0;
    WTF::fastFree((unint64_t)v64, v56, v57, v58, v59, v60, v61, v62);
  }
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Value>(uint64_t a1, char a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v21;
  int v22;

  if ((a2 & 1) == 0)
    WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
  v12 = *((unsigned __int8 *)a3 + 8);
  if (v12 != 1 && v12 != 4)
  {
    v21 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a3, a3[1], v7, v8, v9, v10, v11);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v21);
  }
  WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a4);
  v19 = *((unsigned __int8 *)a4 + 8);
  if (v19 != 1 && v19 != 4)
  {
    v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a4, a4[1], v14, v15, v16, v17, v18);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v22);
  }
  return WTF::dataLog<char [16]>("\n");
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v18;

  WTF::dataLog<char [16]>(", ");
  WTF::dataLog<unsigned int>(a2);
  WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
  v15 = *((unsigned __int8 *)a3 + 8);
  if (v15 != 1 && v15 != 4)
  {
    v18 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a3, a3[1], v10, v11, v12, v13, v14);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v18);
  }
  return JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a1, 0, a4, a5);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(uint64_t a1, char a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v15;

  if ((a2 & 1) == 0)
    WTF::dataLog<char [16]>(", ");
  WTF::dataLog<unsigned int>(a3);
  WTF::dataLog<char [16]>(" ");
  WTF::dataLog<char [16]>("=> ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a4);
  v12 = *((unsigned __int8 *)a4 + 8);
  if (v12 != 1 && v12 != 4)
  {
    v15 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a4, a4[1], v7, v8, v9, v10, v11);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v15);
  }
  return WTF::dataLog<char [16]>("\n");
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v18;

  WTF::dataLog<char [16]>(", ");
  WTF::dataLog<unsigned int>(a2);
  WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
  v15 = *((unsigned __int8 *)a3 + 8);
  if (v15 != 1 && v15 != 4)
  {
    v18 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a3, a3[1], v10, v11, v12, v13, v14);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v18);
  }
  return JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, a4, a5);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(uint64_t a1, char a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v21;
  int v22;

  if ((a2 & 1) == 0)
    WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
  v12 = *((unsigned __int8 *)a3 + 8);
  if (v12 != 1 && v12 != 4)
  {
    v21 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a3, a3[1], v7, v8, v9, v10, v11);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v21);
  }
  WTF::dataLog<char [16]>(" ");
  WTF::dataLog<char [16]>("=> ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a4);
  v19 = *((unsigned __int8 *)a4 + 8);
  if (v19 != 1 && v19 != 4)
  {
    v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a4, a4[1], v14, v15, v16, v17, v18);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v22);
  }
  return WTF::dataLog<char [16]>("\n");
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(uint64_t a1, char a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v15;

  if ((a2 & 1) == 0)
    WTF::dataLog<char [16]>(", ");
  WTF::dataLog<unsigned int>(a3);
  WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a4);
  v12 = *((unsigned __int8 *)a4 + 8);
  if (v12 != 1 && v12 != 4)
  {
    v15 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a4, a4[1], v7, v8, v9, v10, v11);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v15);
  }
  return WTF::dataLog<char [16]>("\n");
}

_QWORD *JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::bindGPRToScratch(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v3 = a2 & 0x7F;
  if (v3 >= 0x40)
  {
    __break(1u);
    goto LABEL_14;
  }
  v2 = a2;
  v4 = *result;
  v5 = a2 & 0x7F;
  v6 = 1 << (a2 & 0x7F);
  if ((*(_QWORD *)(*result + 648) & v6) == 0)
    return (_QWORD *)v2;
  if (*(unsigned int *)(v4 + 340) > (unint64_t)(int)a2)
  {
    v3 = (int)a2;
    v7 = *(_QWORD *)(v4 + 328) + 4 * (int)a2;
    *(_QWORD *)(v4 + 992) |= 1 << v5;
    if ((a2 & 0x60) == 0x20 && (a2 & 0x60) == 0x20)
      *(_QWORD *)(v4 + 1000) |= 1 << v5;
    if ((result[2] & v6) != 0 && (*(_WORD *)(v7 + 1) & 7) != 0)
    {
      if ((_BYTE)word_1ECF4C700)
      {
        v8 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * (int)a2];
        WTF::dataLog<char [20],WTF::ASCIILiteral,char [21],JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding,char [2]>("BBQ\tPreserving GPR ", (uint64_t)&v8, " currently bound to ", v7, "\n");
      }
      return (_QWORD *)v2;
    }
    *(_DWORD *)v7 = 768;
    *(int8x16_t *)(*result + 616) = vandq_s8(*(int8x16_t *)(*result + 616), (int8x16_t)vdupq_n_s64(~v6));
    if (!(_BYTE)word_1ECF4C700)
      return (_QWORD *)v2;
LABEL_14:
    v8 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v3];
    WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReserving scratch GPR ", (uint64_t)&v8, "\n");
    return (_QWORD *)v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Location>(uint64_t a1, char a2, uint64_t *a3, _DWORD *a4, uint64_t a5, int *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v19;

  if ((a2 & 1) == 0)
    WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
  v16 = *((unsigned __int8 *)a3 + 8);
  if (v16 != 1 && v16 != 4)
  {
    v19 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a3, a3[1], v11, v12, v13, v14, v15);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v19);
  }
  WTF::dataLog<char [16]>(", ");
  WTF::dataLog<unsigned int>(a4);
  WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a5);
  if ((*(_BYTE *)a6 & 7) != 0)
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", a6);
  return WTF::dataLog<char [16]>("\n");
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<>(uint64_t a1, int *a2)
{
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a1);
  if ((*(_BYTE *)a2 & 7) != 0)
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", a2);
  return WTF::dataLog<char [16]>("\n");
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(uint64_t a1, char a2, uint64_t a3, int *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v16;

  if ((a2 & 1) == 0)
    WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a3);
  if ((*(_BYTE *)a4 & 7) != 0)
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", a4);
  WTF::dataLog<char [16]>(" ");
  WTF::dataLog<char [16]>("=> ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a5);
  v14 = *((unsigned __int8 *)a5 + 8);
  if (v14 != 1 && v14 != 4)
  {
    v16 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a5, a5[1], v9, v10, v11, v12, v13);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v16);
  }
  return WTF::dataLog<char [16]>("\n");
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Value,unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(uint64_t a1, char a2, uint64_t *a3, uint64_t *a4, _DWORD *a5, uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v25;
  int v26;

  if ((a2 & 1) == 0)
    WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
  v16 = *((unsigned __int8 *)a3 + 8);
  if (v16 != 1 && v16 != 4)
  {
    v25 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a3, a3[1], v11, v12, v13, v14, v15);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v25);
  }
  WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a4);
  v23 = *((unsigned __int8 *)a4 + 8);
  if (v23 != 1 && v23 != 4)
  {
    v26 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a4, a4[1], v18, v19, v20, v21, v22);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v26);
  }
  return JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, a5, a6);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v18;

  WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a2);
  v15 = *((unsigned __int8 *)a2 + 8);
  if (v15 != 1 && v15 != 4)
  {
    v18 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a2, a2[1], v10, v11, v12, v13, v14);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v18);
  }
  WTF::dataLog<char [16]>(", ");
  WTF::dataLog<unsigned int>(a3);
  return JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a1, 0, a4, a5);
}

uint64_t WTF::dataLog<BOOL>(_BYTE *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  WTF::PrintStream *v7;
  char v9;
  char **v10;
  char *v11;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v5 = v4;
  if (*a1)
    v6 = "true";
  else
    v6 = "false";
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v7, "%s", v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<int>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%d", *a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v25;
  int v26;

  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a2);
  v15 = *((unsigned __int8 *)a2 + 8);
  if (v15 != 1 && v15 != 4)
  {
    v25 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a2, a2[1], v10, v11, v12, v13, v14);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v25);
  }
  WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
  v22 = *((unsigned __int8 *)a3 + 8);
  if (v22 != 1 && v22 != 4)
  {
    v26 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a3, a3[1], v17, v18, v19, v20, v21);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v26);
  }
  return JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, a4, a5);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v22;

  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a2);
  v19 = *((unsigned __int8 *)a2 + 8);
  if (v19 != 1 && v19 != 4)
  {
    v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a2, a2[1], v14, v15, v16, v17, v18);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v22);
  }
  WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a3);
  if ((*(_BYTE *)a4 & 7) != 0)
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", a4);
  return JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, a5, a6, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitModOrDiv<int,false>(unint64_t a1, int *a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  unsigned int v9;
  unsigned __int8 v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int8x8_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  WTF *v51;
  uint64_t v52;
  _DWORD *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;

  v9 = a6;
  v10 = a3;
  v12 = a3 >> 8;
  v13 = a3 >> 16;
  v14 = a6 >> 8;
  if (*(_BYTE *)(a4 + 8) == 1)
  {
    v50 = *(_DWORD *)a4;
    if (!*(_DWORD *)a4)
    {
      JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)9, a3, a4, a5, a6, a7, a8);
      return;
    }
    if (v50 == 1)
    {
      JSC::MacroAssemblerARM64::move(*(_DWORD **)(a1 + 8), SBYTE1(a3), SBYTE1(a6), a4, a5, a6, a7, a8);
      return;
    }
    if (v50 == -1)
    {
      JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, SBYTE1(a3), 0x80000000, a5, a6, a7, a8, (uint64_t)&v88);
      v98 = v88;
      v99 = v89;
      JSC::Wasm::BBQJITImpl::BBQJIT::throwExceptionIf(a1, 0xAu, &v98, v76, v77, v78, v79, v80);
      JSC::MacroAssemblerARM64::neg32(*(_DWORD **)(a1 + 8), (char)v12, (char)v14, v81, v82, v83, v84, v85);
      return;
    }
    v51 = (WTF *)v50;
    if ((v50 & (unint64_t)(v50 - 1)) == 0)
    {
      JSC::MacroAssemblerARM64::add32(*(_QWORD *)(a1 + 8), (v50 - 1), SBYTE1(a3), 8, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::moveConditionally32(*(_QWORD *)(a1 + 8), 10, (char)v12, 0, (char)v12, 8, 8, v52);
      v53 = *(_DWORD **)(a1 + 8);
      v54 = WTF::fastLog2(v51);
      JSC::MacroAssemblerARM64::rshift32(v53, v54 & 0x1F, (char)v14, v55, v56, v57, v58, v59);
      return;
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, *(JSC::ARM64LogicalImmediate **)a4, *(_QWORD *)(a4 + 8), 0x802uLL, a5, a6, a7, a8);
    LODWORD(v18) = 0;
    LOBYTE(v17) = 8;
    v24 = 1;
    v15 = 2;
  }
  else
  {
    v15 = a5;
    v17 = a5 >> 8;
    v18 = a5 >> 16;
    if (*((_BYTE *)a2 + 8) == 1)
    {
      v60 = *a2;
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 0, SBYTE1(a5), a5, a6, a7, a8, (uint64_t)&v88, a9);
      v96 = v88;
      v97 = v89;
      JSC::Wasm::BBQJITImpl::BBQJIT::throwExceptionIf(a1, 9u, &v96, v61, v62, v63, v64, v65);
      if (!v60)
      {
        JSC::MacroAssemblerARM64::xor32(*(_DWORD **)(a1 + 8), (char)v14, (char)v14, v66, v67, v68, v69, v70);
        return;
      }
      if (v60 == 0x80000000)
      {
        JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 0, (char)v17, 0xFFFFFFFFLL, v67, v68, v69, v70, (uint64_t)&v94);
        v92 = v94;
        v93 = v95;
        JSC::Wasm::BBQJITImpl::BBQJIT::throwExceptionIf(a1, 0xAu, &v92, v71, v72, v73, v74, v75);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, *(JSC::ARM64LogicalImmediate **)a2, *((_QWORD *)a2 + 1), 0x802uLL, v67, v68, v69, v70);
      LODWORD(v13) = 0;
      LOBYTE(v12) = 8;
      v24 = 1;
      v10 = 2;
    }
    else
    {
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 0, SBYTE1(a5), a5, a6, a7, a8, (uint64_t)&v88, a9);
      v90 = v88;
      v91 = v89;
      JSC::Wasm::BBQJITImpl::BBQJIT::throwExceptionIf(a1, 9u, &v90, v19, v20, v21, v22, v23);
      v24 = 0;
    }
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::ScratchScope<JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location>((uint64_t)&v88, a1, ((_DWORD)v13 << 16) | (v12 << 8) | v10, ((_DWORD)v18 << 16) | (v17 << 8) | v15, v9);
  if ((v24 & 1) == 0)
  {
    JSC::MacroAssemblerARM64::compare32(*(_QWORD *)(a1 + 8), 0, (char)v17, 0xFFFFFFFFLL, 8, v28, v29, v30);
    JSC::MacroAssemblerARM64::compare32(*(_QWORD *)(a1 + 8), 0, (char)v12, 0x80000000, SBYTE4(v89), v31, v32, v33);
    JSC::MacroAssemblerARM64::and64(*(_DWORD **)(a1 + 8), SBYTE4(v89), v34, v35, v36, v37, v38, v39);
    JSC::MacroAssemblerARM64::branchTest64(*(_QWORD *)(a1 + 8), 1, 8, 0xFFFFFFFFLL, v40, v41, v42, v43, (uint64_t)&v94, v44);
    v86 = v94;
    v87 = v95;
    JSC::Wasm::BBQJITImpl::BBQJIT::throwExceptionIf(a1, 0xAu, &v86, v45, v46, v47, v48, v49);
  }
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(*(_QWORD *)(a1 + 8) + 56), (unsigned __int16)(32 * (v12 & 0x1F)) | ((v17 & 0x1F) << 16) | (v9 >> 8) & 0x1F | 0x1AC00C00, v25, v26, v27, v28, v29, v30);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindScratches((unsigned __int8 *)&v88);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindPreserved((uint64_t)&v88);
}

void JSC::MacroAssemblerARM64::and64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v10;

  v8 = a2;
  v10 = a1[50];
  if (v10 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v10) = ((v8 & 0x1F) << 16) | 0x8A000108;
  a1[50] += 4;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::ScratchScope<JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location>(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  unint64_t *v6;
  JSC::ARM64LogicalImmediate *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  *(_QWORD *)(a1 + 16) = 0;
  v6 = (unint64_t *)(a1 + 16);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::initializedPreservedSet<JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location>(a1, a3, a4, a5);
  if (*v6)
  {
    v14 = __clz(__rbit64(*v6));
    do
    {
      if (v14 > 0x1Fu)
        JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindFPRToScratch((_QWORD *)a1, (char)(v14 - 32));
      else
        JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch((_QWORD *)a1, (char)v14);
      if (v14 > 0x3E || !*v6)
        break;
      v15 = __clz(__rbit64(*v6 >> ((v14 + 1) & 0x3F))) + (((_BYTE)v14 + 1) & 0x3F);
      v14 = v15 >= 0x40 ? 64 : v15;
    }
    while (v15 <= 0x3F);
  }
  v16 = *(_QWORD *)(*(_QWORD *)a1 + 616);
  if (v16)
    v17 = __clz(__rbit64(v16));
  else
    v17 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR(*(JSC::Wasm::BBQJITImpl::BBQJIT **)a1, v7, v8, v9, v10, v11, v12, v13);
  *(_BYTE *)(a1 + 8) = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch((_QWORD *)a1, v17);
  return a1;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::initializedPreservedSet<JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location>(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = a2 & 7;
  switch(v4)
  {
    case 2:
      if ((a2 & 0x4000) == 0)
      {
        v5 = 1 << SBYTE1(a2);
        v6 = *(_QWORD *)(result + 16);
LABEL_4:
        *(_QWORD *)(result + 16) = v6 | v5;
        return JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::initializedPreservedSet<JSC::Wasm::BBQJITImpl::BBQJIT::Location>(result, a3, a4);
      }
      break;
    case 3:
      v7 = BYTE1(a2) + 32;
      if (((BYTE1(a2) + 32) & 0x40) == 0)
      {
        *(_QWORD *)(result + 16) |= 1 << v7;
        if ((v7 & 0x60) == 0x20)
          *(_QWORD *)(result + 24) |= 1 << v7;
        return JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::initializedPreservedSet<JSC::Wasm::BBQJITImpl::BBQJIT::Location>(result, a3, a4);
      }
      break;
    case 6:
      if ((a2 & 0x400000) == 0)
      {
        v6 = *(_QWORD *)(result + 16) | (1 << SBYTE2(a2));
        *(_QWORD *)(result + 16) = v6;
        if ((a2 & 0x4000) == 0)
        {
          v5 = 1 << SBYTE1(a2);
          goto LABEL_4;
        }
      }
      break;
    default:
      return JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::initializedPreservedSet<JSC::Wasm::BBQJITImpl::BBQJIT::Location>(result, a3, a4);
  }
  __break(1u);
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::initializedPreservedSet<JSC::Wasm::BBQJITImpl::BBQJIT::Location>(uint64_t result, int a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = a2 & 7;
  switch(v3)
  {
    case 2:
      if ((a2 & 0x4000) == 0)
      {
        v4 = 1 << SBYTE1(a2);
        v5 = *(_QWORD *)(result + 16);
LABEL_4:
        *(_QWORD *)(result + 16) = v5 | v4;
        return JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::initializedPreservedSet<>(result, a3);
      }
      break;
    case 3:
      v6 = BYTE1(a2) + 32;
      if (((BYTE1(a2) + 32) & 0x40) == 0)
      {
        *(_QWORD *)(result + 16) |= 1 << v6;
        if ((v6 & 0x60) == 0x20)
          *(_QWORD *)(result + 24) |= 1 << v6;
        return JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::initializedPreservedSet<>(result, a3);
      }
      break;
    case 6:
      if ((a2 & 0x400000) == 0)
      {
        v5 = *(_QWORD *)(result + 16) | (1 << SBYTE2(a2));
        *(_QWORD *)(result + 16) = v5;
        if ((a2 & 0x4000) == 0)
        {
          v4 = 1 << SBYTE1(a2);
          goto LABEL_4;
        }
      }
      break;
    default:
      return JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::initializedPreservedSet<>(result, a3);
  }
  __break(1u);
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::initializedPreservedSet<>(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = a2 & 7;
  switch(v2)
  {
    case 2:
      if ((a2 & 0x4000) == 0)
      {
        v3 = 1 << SBYTE1(a2);
        v4 = *(_QWORD *)(result + 16);
LABEL_4:
        *(_QWORD *)(result + 16) = v4 | v3;
        return result;
      }
      goto LABEL_14;
    case 3:
      v5 = BYTE1(a2) + 32;
      if (((BYTE1(a2) + 32) & 0x40) != 0)
      {
LABEL_14:
        __break(1u);
        return result;
      }
      *(_QWORD *)(result + 16) |= 1 << v5;
      if ((v5 & 0x60) == 0x20)
        *(_QWORD *)(result + 24) |= 1 << v5;
      break;
    case 6:
      if ((a2 & 0x400000) == 0)
      {
        v4 = *(_QWORD *)(result + 16) | (1 << SBYTE2(a2));
        *(_QWORD *)(result + 16) = v4;
        if ((a2 & 0x4000) == 0)
        {
          v3 = 1 << SBYTE1(a2);
          goto LABEL_4;
        }
      }
      goto LABEL_14;
  }
  return result;
}

uint64_t WTF::fastLog2(unint64_t this)
{
  unsigned int v1;
  unsigned int v2;

  if (HIDWORD(this))
    return WTF::fastLog2((WTF *)HIDWORD(this)) + 32;
  v1 = (this & ((_DWORD)this - 1)) != 0;
  v2 = WORD1(this);
  if (this >= 0x10000)
    v1 |= 0x10u;
  else
    v2 = this;
  if (v2 >= 0x100)
  {
    v2 >>= 8;
    v1 += 8;
  }
  if (v2 >= 0x10)
  {
    v2 >>= 4;
    v1 += 4;
  }
  if (v2 >= 4)
  {
    v2 >>= 2;
    v1 += 2;
  }
  if (v2 <= 1)
    return v1;
  else
    return v1 + 1;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitModOrDiv<unsigned int,false>(unint64_t a1, int *a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  unsigned int v9;
  unsigned __int8 v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;

  v9 = a6;
  v10 = a3;
  v12 = a3 >> 8;
  v13 = a3 >> 16;
  v14 = a6 >> 8;
  if (*(_BYTE *)(a4 + 8) == 1)
  {
    v30 = *(_DWORD *)a4;
    if (!*(_DWORD *)a4)
    {
      JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)9, a3, a4, a5, a6, a7, a8);
      return;
    }
    if (v30 == 1)
    {
      JSC::MacroAssemblerARM64::move(*(_DWORD **)(a1 + 8), SBYTE1(a3), SBYTE1(a6), a4, a5, a6, a7, a8);
      return;
    }
    if (v30 != -1 && (v30 & (unint64_t)(v30 - 1)) == 0)
    {
      v42 = *(_DWORD **)(a1 + 8);
      v43 = WTF::fastLog2((WTF *)v30);
      JSC::MacroAssemblerARM64::urshift32(v42, (char)v12, v43 & 0x1F, (char)v14, v44, v45, v46, v47);
      return;
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, *(JSC::ARM64LogicalImmediate **)a4, *(_QWORD *)(a4 + 8), 0x802uLL, a5, a6, a7, a8);
    LODWORD(v18) = 0;
    LOBYTE(v17) = 8;
    v15 = 2;
  }
  else
  {
    v15 = a5;
    v17 = a5 >> 8;
    v18 = a5 >> 16;
    if (*((_BYTE *)a2 + 8) == 1)
    {
      v31 = *a2;
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 0, SBYTE1(a5), a5, a6, a7, a8, (uint64_t)&v48, a9);
      v52 = v48;
      v53 = v49;
      JSC::Wasm::BBQJITImpl::BBQJIT::throwExceptionIf(a1, 9u, &v52, v32, v33, v34, v35, v36);
      if (!v31)
      {
        JSC::MacroAssemblerARM64::xor32(*(_DWORD **)(a1 + 8), (char)v14, (char)v14, v37, v38, v39, v40, v41);
        return;
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, *(JSC::ARM64LogicalImmediate **)a2, *((_QWORD *)a2 + 1), 0x802uLL, v38, v39, v40, v41);
      LODWORD(v13) = 0;
      LOBYTE(v12) = 8;
      v10 = 2;
    }
    else
    {
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 0, SBYTE1(a5), a5, a6, a7, a8, (uint64_t)&v48, a9);
      v50 = v48;
      v51 = v49;
      JSC::Wasm::BBQJITImpl::BBQJIT::throwExceptionIf(a1, 9u, &v50, v19, v20, v21, v22, v23);
    }
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::ScratchScope<JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location>((uint64_t)&v48, a1, ((_DWORD)v13 << 16) | (v12 << 8) | v10, ((_DWORD)v18 << 16) | (v17 << 8) | v15, v9);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(*(_QWORD *)(a1 + 8) + 56), ((v17 & 0x1F) << 16) | (32 * (v12 & 0x1F)) | (v9 >> 8) & 0x1F | 0x1AC00800, v24, v25, v26, v27, v28, v29);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindScratches((unsigned __int8 *)&v48);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindPreserved((uint64_t)&v48);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitModOrDiv<unsigned long long,false>(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  unsigned int v9;
  unsigned __int8 v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::ARM64LogicalImmediate *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;

  v9 = a6;
  v10 = a3;
  v12 = a3 >> 8;
  v13 = a3 >> 16;
  v14 = a6 >> 8;
  if (*((_BYTE *)a4 + 8) == 1)
  {
    v15 = *a4;
    if (!*a4)
    {
      JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)9, a3, (uint64_t)a4, a5, a6, a7, a8);
      return;
    }
    if (v15 == 1)
    {
      JSC::MacroAssemblerARM64::move(*(_DWORD **)(a1 + 8), SBYTE1(a3), SBYTE1(a6), (uint64_t)a4, a5, a6, a7, a8);
      return;
    }
    if (v15 != -1 && (v15 & (v15 - 1)) == 0)
    {
      v42 = *(_DWORD **)(a1 + 8);
      v43 = WTF::fastLog2(*a4);
      JSC::MacroAssemblerARM64::urshift64(v42, (char)v12, v43, (char)v14, v44, v45, v46, v47);
      return;
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)v15, a4[1], 0x802uLL, a5, a6, a7, a8);
    LODWORD(v16) = 0;
    LOBYTE(v17) = 8;
    v18 = 2;
  }
  else
  {
    v18 = a5;
    v17 = a5 >> 8;
    v16 = a5 >> 16;
    if (*(_BYTE *)(a2 + 8) == 1)
    {
      v26 = *(JSC::ARM64LogicalImmediate **)a2;
      JSC::MacroAssemblerARM64::branchTest64(*(_QWORD *)(a1 + 8), 0, SBYTE1(a5), 0xFFFFFFFFLL, a5, a6, a7, a8, (uint64_t)&v48, a9);
      v52 = v48;
      v53 = v49;
      JSC::Wasm::BBQJITImpl::BBQJIT::throwExceptionIf(a1, 9u, &v52, v27, v28, v29, v30, v31);
      if (!v26)
      {
        JSC::MacroAssemblerARM64::xor64(*(_DWORD **)(a1 + 8), (char)v14, (char)v14, v32, v33, v34, v35, v36);
        return;
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, *(JSC::ARM64LogicalImmediate **)a2, *(_QWORD *)(a2 + 8), 0x802uLL, v33, v34, v35, v36);
      LODWORD(v13) = 0;
      LOBYTE(v12) = 8;
      v10 = 2;
    }
    else
    {
      JSC::MacroAssemblerARM64::branchTest64(*(_QWORD *)(a1 + 8), 0, SBYTE1(a5), 0xFFFFFFFFLL, a5, a6, a7, a8, (uint64_t)&v48, a9);
      v50 = v48;
      v51 = v49;
      JSC::Wasm::BBQJITImpl::BBQJIT::throwExceptionIf(a1, 9u, &v50, v37, v38, v39, v40, v41);
    }
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::ScratchScope<JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location>((uint64_t)&v48, a1, ((_DWORD)v13 << 16) | (v12 << 8) | v10, ((_DWORD)v16 << 16) | (v17 << 8) | v18, v9);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(*(_QWORD *)(a1 + 8) + 56), ((v17 & 0x1F) << 16) | (32 * (v12 & 0x1F)) | (v9 >> 8) & 0x1F | 0x9AC00800, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindScratches((unsigned __int8 *)&v48);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindPreserved((uint64_t)&v48);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitModOrDiv<unsigned int,true>(unint64_t a1, int *a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  int v9;
  unsigned __int8 v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;

  v9 = a6;
  v10 = a3;
  v12 = a3 >> 8;
  v13 = a3 >> 16;
  v14 = a6 >> 8;
  if (*(_BYTE *)(a4 + 8) == 1)
  {
    v34 = *(_DWORD *)a4;
    if (!*(_DWORD *)a4)
    {
      JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)9, a3, a4, a5, a6, a7, a8);
      return;
    }
    if (v34 == 1)
    {
      JSC::MacroAssemblerARM64::xor32(*(_DWORD **)(a1 + 8), SBYTE1(a6), SBYTE1(a6), a4, a5, a6, a7, a8);
      return;
    }
    if (v34 != -1 && (v34 & (unint64_t)(v34 - 1)) == 0)
    {
      JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)(v34 - 1), SBYTE1(a3), SBYTE1(a6));
      return;
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, *(JSC::ARM64LogicalImmediate **)a4, *(_QWORD *)(a4 + 8), 0x802uLL, a5, a6, a7, a8);
    LODWORD(v18) = 0;
    LOBYTE(v17) = 8;
    v15 = 2;
  }
  else
  {
    v15 = a5;
    v17 = a5 >> 8;
    v18 = a5 >> 16;
    if (*((_BYTE *)a2 + 8) == 1)
    {
      v35 = *a2;
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 0, SBYTE1(a5), a5, a6, a7, a8, (uint64_t)&v46, a9);
      v50 = v46;
      v51 = v47;
      JSC::Wasm::BBQJITImpl::BBQJIT::throwExceptionIf(a1, 9u, &v50, v36, v37, v38, v39, v40);
      if (!v35)
      {
        JSC::MacroAssemblerARM64::xor32(*(_DWORD **)(a1 + 8), (char)v14, (char)v14, v41, v42, v43, v44, v45);
        return;
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, *(JSC::ARM64LogicalImmediate **)a2, *((_QWORD *)a2 + 1), 0x802uLL, v42, v43, v44, v45);
      LODWORD(v13) = 0;
      LOBYTE(v12) = 8;
      v10 = 2;
    }
    else
    {
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 0, SBYTE1(a5), a5, a6, a7, a8, (uint64_t)&v46, a9);
      v48 = v46;
      v49 = v47;
      JSC::Wasm::BBQJITImpl::BBQJIT::throwExceptionIf(a1, 9u, &v48, v19, v20, v21, v22, v23);
    }
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::ScratchScope<JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location,JSC::Wasm::BBQJITImpl::BBQJIT::Location>((uint64_t)&v46, a1, ((_DWORD)v13 << 16) | (v12 << 8) | v10, ((_DWORD)v18 << 16) | (v17 << 8) | v15, v9);
  v24 = SBYTE4(v47);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(*(_QWORD *)(a1 + 8) + 56), ((v17 & 0x1F) << 16) | (32 * (v12 & 0x1F)) | BYTE4(v47) & 0x1F | 0x1AC00800, v25, v26, v27, v28, v29, v30);
  JSC::MacroAssemblerARM64::multiplySub32(*(_DWORD **)(a1 + 8), v24, (char)v17, (char)v12, (char)v14, v31, v32, v33);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindScratches((unsigned __int8 *)&v46);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindPreserved((uint64_t)&v46);
}

void WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  v9 = *(_QWORD *)a1;
  v10 = *a2;
  *a2 = 0;
  *(_QWORD *)(v9 + 8 * v8) = v10;
  *(_DWORD *)(a1 + 12) = v8 + 1;
}

void WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  const void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(const void **)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<WTF::RefPtr<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>>>,8ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    memcpy(*(void **)a1, v3, 8 * v4);
    if ((const void *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(const void **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

uint64_t WTF::VectorBuffer<WTF::RefPtr<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &)>>>,8ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 9)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 8;
  }
  else
  {
    v3 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

unsigned int *WTF::SharedTaskFunctor<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &),JSC::Wasm::BBQJITImpl::BBQJIT::emitEntryTierUpCheck(void)::$_0>::run(unsigned int *a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  void (*v22)(uint64_t);
  unsigned __int8 *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  JSC::ExecutableMemoryHandle *v57;
  unsigned __int8 *v58;
  char v59;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(a1 + 3, (uint64_t)a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(a3, (JSC::ARM64LogicalImmediate *)a1[7], 8, v11, v12, v13, v14, v15);
  v21 = (uint64_t *)JSC::Wasm::thunks;
  if (*(_BYTE *)(a2 + 1292))
    v22 = (void (*)(uint64_t))JSC::Wasm::triggerOMGEntryTierUpThunkGeneratorSIMD;
  else
    v22 = (void (*)(uint64_t))JSC::Wasm::triggerOMGEntryTierUpThunkGeneratorNoSIMD;
  v23 = (unsigned __int8 *)(JSC::Wasm::thunks + 8);
  v58 = (unsigned __int8 *)(JSC::Wasm::thunks + 8);
  v59 = 1;
  if (__ldaxr((unsigned __int8 *)(JSC::Wasm::thunks + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v23))
  {
    goto LABEL_8;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v23);
LABEL_8:
  JSC::Wasm::Thunks::stub(v21, (uint64_t)&v58, v22, v16, v17, v18, v19, v20, &v56);
  if (!v59)
    goto LABEL_14;
  v32 = v58;
  v33 = __ldxr(v58);
  if (v33 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v58))
LABEL_13:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v32, 0, v26, v27, v28, v29, v30, v31);
LABEL_14:
  v34 = v56;
  a3[52] = 0;
  v35 = a3[50];
  if (v35 + 4 > a3[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 14), v25, v26, v27, v28, v29, v30, v31);
    v35 = a3[50];
  }
  *(_DWORD *)(*((_QWORD *)a3 + 7) + v35) = -1811939328;
  v36 = a3[50] + 4;
  a3[50] = v36;
  v58 = (unsigned __int8 *)(v36 | 0x300000000);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Call::linkThunk<(WTF::PtrTag)26129>((unsigned int *)&v58, v34, (uint64_t)a3, v27, v28, v29, v30, v31);
  v44 = (unsigned int *)v57;
  v57 = 0;
  if (v44)
  {
    do
    {
      v45 = __ldaxr(v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v44));
    if (!v46)
    {
      atomic_store(1u, v44);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v44, v37, v38, v39, v40, v41, v42, v43);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    }
  }
  LODWORD(v58) = a1[6];
  return JSC::MacroAssembler::jump((uint64_t)a3, (unsigned int *)&v58, v38, v39, v40, v41, v42, v43);
}

uint64_t WTF::dataLog<char [2],JSC::Wasm::FunctionSignature,char [2]>(JSC::Wasm::FunctionSignature *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", " ");
  JSC::Wasm::FunctionSignature::dump(a1, v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::DataLabelPtr,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int *v25;
  int v26;
  uint64_t v27;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 4 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
      {
        v16 = *(_QWORD *)a1;
        return v16 + 4 * ((uint64_t)(v8 - v10) >> 2);
      }
      if (v15 < 2)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 1;
        goto LABEL_34;
      }
      if (!(v15 >> 30))
      {
        v16 = WTF::fastMalloc((WTF *)(4 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_34:
        v27 = 0;
        do
        {
          *(_DWORD *)(v16 + v27) = *(_DWORD *)(v10 + v27);
          v27 += 4;
        }
        while (4 * v11 != v27);
        if (a1 + 16 != v10 && v10)
        {
          if (v16 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
          v16 = *(_QWORD *)a1;
        }
        return v16 + 4 * ((uint64_t)(v8 - v10) >> 2);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x198F3746CLL);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 2)
    {
      v22 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    else
    {
      if (v20 >> 30)
        goto LABEL_43;
      v22 = WTF::fastMalloc((WTF *)(4 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    v23 = 4 * v21;
    v24 = (_DWORD *)v22;
    v25 = (int *)v10;
    do
    {
      v26 = *v25++;
      *v24++ = v26;
      v23 -= 4;
    }
    while (v23);
LABEL_27:
    if (a1 + 16 != v10 && v10)
    {
      if (v22 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

uint64_t WTF::dataLog<JSC::Wasm::FunctionSignature>(JSC::Wasm::FunctionSignature *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::Wasm::FunctionSignature::dump(a1, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  _OWORD *v9;
  __int128 *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _OWORD *v18;
  _DWORD *v19;

  v9 = (_OWORD *)(result + 16);
  v8 = *(_QWORD *)result;
  if (*(_QWORD *)result != result + 16)
  {
    v18 = (_OWORD *)(result + 16);
    v19 = a2;
    if (v8)
    {
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 0;
      v17 = result;
      WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
      result = v17;
    }
    v9 = v18;
    *(_QWORD *)result = v18;
    a2 = v19;
  }
  v10 = *(__int128 **)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    v11 = a2[3];
    if ((_DWORD)v11)
    {
      v14 = 32 * v11;
      do
      {
        v15 = *v10;
        v16 = v10[1];
        v10 += 2;
        *v9 = v15;
        v9[1] = v16;
        v9 += 2;
        v14 -= 32;
      }
      while (v14);
    }
    v12 = a2[2];
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *(_QWORD *)result = v10;
    v12 = a2[2];
    a2[2] = 16;
  }
  *(_DWORD *)(result + 8) = v12;
  v13 = a2[3];
  a2[3] = 0;
  *(_DWORD *)(result + 12) = v13;
  return result;
}

void WTF::SharedTaskFunctor<void ()(JSC::Wasm::BBQJITImpl::BBQJIT &,JSC::CCallHelpers &),JSC::Wasm::BBQJITImpl::BBQJIT::emitLoopTierUpCheckAndOSREntryData(JSC::Wasm::BBQJITImpl::BBQJIT::ControlData const&,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0>::run(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40[3];

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 16), (uint64_t)a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 28), (uint64_t)a3, v11, v12, v13, v14, v15, v16);
  JSC::MacroAssembler::probe(a3, (uint64_t)operationWasmTriggerOSREntryNow, *(_QWORD *)(a1 + 48), *(_BYTE *)(a2 + 1292) == 0, v17, v18, v19, v20);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)a3, 0, 8, 0xFFFFFFFFLL, v21, v22, v23, v24, (uint64_t)v40, v25);
  v39 = *(_DWORD *)(a1 + 40);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v40, &v39, (uint64_t)a3, v26, v27, v28, v29, v30);
  v38 = a3[50];
  if (v38 + 4 > a3[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 14), v31, v32, v33, v34, v35, v36, v37);
    v38 = a3[50];
  }
  *(_DWORD *)(*((_QWORD *)a3 + 7) + v38) = -702611200;
  a3[50] += 4;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::ScratchScope<JSC::RegisterSet>(uint64_t result, JSC::Wasm::BBQJITImpl::BBQJIT *this, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v8 = result;
  *(_QWORD *)result = this;
  *(_QWORD *)(result + 16) = 0;
  v9 = (unint64_t *)(result + 16);
  *(_QWORD *)(result + 24) = 0;
  *(_WORD *)(result + 32) = 0;
  if (a3)
  {
    v10 = 0;
    v11 = 0;
    v12 = __clz(__rbit64(a3));
    while (1)
    {
      if (v12 > 0x1F)
      {
        if (v12 >= 0x40)
        {
          __break(1u);
          return result;
        }
        v11 |= 1 << v12;
        v10 |= 1 << v12;
        *(_QWORD *)(result + 16) = v11;
        *(_QWORD *)(result + 24) = v10;
        if (v12 == 63)
        {
LABEL_6:
          v13 = __clz(__rbit64(v11));
          do
          {
            if (v13 > 0x1Fu)
              JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindFPRToScratch((_QWORD *)v8, (char)(v13 - 32));
            else
              JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch((_QWORD *)v8, (char)v13);
            if (v13 > 0x3E || !*v9)
              break;
            v14 = __clz(__rbit64(*v9 >> ((v13 + 1) & 0x3F))) + (((_BYTE)v13 + 1) & 0x3F);
            v13 = v14 >= 0x40 ? 64 : v14;
          }
          while (v14 <= 0x3F);
          this = *(JSC::Wasm::BBQJITImpl::BBQJIT **)v8;
          break;
        }
      }
      else
      {
        v11 |= 1 << v12;
        *v9 = v11;
      }
      v12 += __clz(__rbit64(a3 >> (v12 + 1))) + 1;
      if (v12 >= 0x40)
        goto LABEL_6;
    }
  }
  v15 = *((_QWORD *)this + 77);
  if (v15)
    v16 = __clz(__rbit64(v15));
  else
    v16 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR(this, this, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(v8 + 8) = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch((_QWORD *)v8, v16);
  return v8;
}

void WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(uint64_t a1, _OWORD *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;

  v11 = *(unsigned int *)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 12);
  v13 = v11 + (v11 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v12 + 1)
    v15 = v12 + 1;
  else
    v15 = v14;
  if (v15 <= v11)
  {
LABEL_14:
    v18 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
    v19 = *a3;
    *v18 = *a2;
    v18[1] = v19;
    ++*(_DWORD *)(a1 + 12);
    return;
  }
  v16 = *(_QWORD *)a1;
  if (v15 < 0x11)
  {
    v17 = (_OWORD *)(a1 + 16);
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 16;
    goto LABEL_12;
  }
  if (!(v15 >> 27))
  {
    v17 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v15));
    *(_DWORD *)(a1 + 8) = v15;
    *(_QWORD *)a1 = v17;
LABEL_12:
    if ((_DWORD)v12)
    {
      v20 = 32 * v12;
      v21 = (__int128 *)v16;
      do
      {
        v22 = *v21;
        v23 = v21[1];
        v21 += 2;
        *v17 = v22;
        v17[1] = v23;
        v17 += 2;
        v20 -= 32;
      }
      while (v20);
    }
    if (a1 + 16 != v16 && v16)
    {
      if (*(_QWORD *)a1 == v16)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    goto LABEL_14;
  }
  __break(0xC471u);
}

void WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Value,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression const&>(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v10 = *(unsigned int *)(a1 + 8);
  v11 = *(unsigned int *)(a1 + 12);
  v12 = v10 + (v10 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v11 + 1)
    v14 = v11 + 1;
  else
    v14 = v13;
  if (v14 <= v10)
  {
LABEL_16:
    *(_OWORD *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = a2[1];
    return;
  }
  v15 = *(_QWORD *)a1;
  if (v14 < 9)
  {
    v16 = (_OWORD *)(a1 + 16);
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 8;
    if (!(_DWORD)v11)
      goto LABEL_15;
    goto LABEL_13;
  }
  if (!(v14 >> 28))
  {
    v16 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v14));
    *(_DWORD *)(a1 + 8) = v14;
    *(_QWORD *)a1 = v16;
    if (!(_DWORD)v11)
      goto LABEL_15;
LABEL_13:
    v17 = 16 * v11;
    v18 = (__int128 *)v15;
    do
    {
      v19 = *v18++;
      *v16++ = v19;
      v17 -= 16;
    }
    while (v17);
LABEL_15:
    if (a1 + 16 != v15 && v15)
    {
      if (*(_QWORD *)a1 == v15)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
    }
    goto LABEL_16;
  }
  __break(0xC471u);
}

_DWORD *WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::ShuffleStatus,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unsigned int v4;
  _DWORD *result;
  uint64_t v7;

  v4 = a2;
  result = (_DWORD *)(a1 + 16);
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = 8;
  *(_DWORD *)(a1 + 12) = a2;
  if (a2 >= 9)
  {
    if (a2 >> 30)
    {
      __break(0xC471u);
      return result;
    }
    result = (_DWORD *)WTF::fastMalloc((WTF *)(4 * a2));
    *(_DWORD *)(a1 + 8) = v4;
    *(_QWORD *)a1 = result;
    v4 = *(_DWORD *)(a1 + 12);
  }
  if (v4)
  {
    v7 = 4 * v4;
    do
    {
      *result++ = *a3;
      v7 -= 4;
    }
    while (v7);
  }
  return (_DWORD *)a1;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitShuffleMove<8ul,WTF::CrashOnOverflow>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  JSC::ARM64LogicalImmediate *v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  JSC::ARM64LogicalImmediate *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  int v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;

  if (*(_DWORD *)(a2 + 12) <= a5)
  {
    __break(0xC471u);
    JUMPOUT(0x198F37F80);
  }
  v8 = a5;
  v13 = a5;
  v14 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *(_QWORD *)(*(_QWORD *)a2 + 16 * a5), *(_QWORD *)(*(_QWORD *)a2 + 16 * a5 + 8), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(a3 + 12) <= v8)
  {
    __break(0xC471u);
    JUMPOUT(0x198F37F88);
  }
  v20 = *(unsigned int *)(*(_QWORD *)a3 + 4 * v13);
  v59 = BYTE1(v20);
  v55 = v20 & 0xFFFF00F8 | (BYTE1(v20) << 8);
  v21 = *(_DWORD *)(*(_QWORD *)a3 + 4 * v13) & 7;
  if ((v14 & 7) != v21)
    goto LABEL_4;
  if ((v14 & 7) != 2)
  {
    switch(v14 & 7)
    {
      case 0u:
        return;
      case 1u:
      case 4u:
      case 5u:
        if ((v55 ^ v14) < 8)
          return;
        goto LABEL_4;
      case 3u:
        break;
      case 6u:
        if (((WORD1(v20) << 24) ^ (v14 << 8)) >> 24)
          v53 = 0;
        else
          v53 = BYTE1(v14) == BYTE1(v20);
        if (!v53)
          goto LABEL_4;
        return;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F37F58);
    }
  }
  if (BYTE1(v14) != BYTE1(v20))
  {
LABEL_4:
    if (*(_DWORD *)(a4 + 12) <= v8)
    {
      __break(0xC471u);
      JUMPOUT(0x198F37F90);
    }
    *(_DWORD *)(*(_QWORD *)a4 + 4 * v13) = 1;
    if (!*(_DWORD *)(a2 + 12))
      goto LABEL_76;
    v22 = 0;
    v23 = 0;
    v54 = WORD1(v20) << 24;
    while (1)
    {
      v24 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *(_QWORD *)(*(_QWORD *)a2 + v22), *(_QWORD *)(*(_QWORD *)a2 + v22 + 8), v15, v16, v17, v18, v19);
      if ((v24 & 7) != v21)
        goto LABEL_8;
      if (v21 != 2)
      {
        switch(v21)
        {
          case 0u:
            goto LABEL_12;
          case 1u:
          case 4u:
          case 5u:
            if ((v24 ^ v55) < 8)
              goto LABEL_12;
            goto LABEL_8;
          case 3u:
            break;
          case 6u:
            if ((v54 ^ (v24 << 8)) >> 24)
              v43 = 0;
            else
              v43 = BYTE1(v24) == v59;
            if (!v43)
              goto LABEL_8;
            goto LABEL_12;
          default:
            __break(0xC471u);
            JUMPOUT(0x198F37EF8);
        }
      }
      if (BYTE1(v24) != v59)
        goto LABEL_8;
LABEL_12:
      if (v23 >= *(unsigned int *)(a4 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x198F37F60);
      }
      v26 = *(_DWORD *)(*(_QWORD *)a4 + 4 * v23);
      if (v26 != 1)
      {
        if (!v26)
          JSC::Wasm::BBQJITImpl::BBQJIT::emitShuffleMove<8ul,WTF::CrashOnOverflow>(a1, a2, a3, a4, v23);
        goto LABEL_8;
      }
      if (v23 >= *(unsigned int *)(a2 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x198F37F68);
      }
      v27 = *(_QWORD *)a2 + v22;
      v28 = *(JSC::ARM64LogicalImmediate **)v27;
      v29 = *(_QWORD *)(v27 + 8);
      v30 = (*(_BYTE *)(v27 + 9) + 5) >= 3u;
      v31 = 2050;
      if (!v30)
        v31 = 4099;
      v58 = v31;
      if (v29 == 1)
      {
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v28, v29, v31, v16, v17, v18, v19);
      }
      else
      {
        v56 = v20;
        v32 = v13;
        v33 = v8;
        v34 = v29 >> 8;
        v35 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v28, v29, v15, v16, v17, v18, v19);
        if ((v35 & 6) == 2)
          JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveRegister(a1, (char)v34, v35, v58);
        else
          JSC::Wasm::BBQJITImpl::BBQJIT::emitLoad(a1, (char)v34, v35, v58, v36, v37, v38, v39);
        v8 = v33;
        v13 = v32;
        v20 = v56;
      }
      if (v23 >= *(unsigned int *)(a2 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x198F37F70);
      }
      v40 = *(_QWORD *)a2 + v22;
      v41 = *(unsigned __int8 *)(v40 + 9);
      if ((v41 - 192) <= 0x33)
      {
        if (((1 << (v41 + 64)) & 0xFFC19C001C000) == 0)
        {
          v42 = v57;
          if (v41 == 192)
          {
            __break(0xC471u);
            JUMPOUT(0x198F37F18);
          }
          goto LABEL_41;
        }
        LOWORD(v41) = 254;
      }
      v42 = v57;
LABEL_41:
      v57 = v58 | v42 & 0xFFFFFFFF00000000;
      *(_QWORD *)v40 = v57;
      *(_WORD *)(v40 + 8) = ((_WORD)v41 << 8) | 4;
LABEL_8:
      ++v23;
      v25 = *(unsigned int *)(a2 + 12);
      v22 += 16;
      if (v23 >= v25)
      {
        if (v25 > v8)
        {
          v44 = *(_QWORD *)a2 + 16 * v13;
          v45 = *(JSC::ARM64LogicalImmediate **)v44;
          v46 = *(_QWORD *)(v44 + 8);
          if (v46 == 1)
          {
            if (v21 <= 5 && ((1 << v21) & 0x32) != 0)
              JSC::Wasm::BBQJITImpl::BBQJIT::emitStoreConst(a1, v45, v46, v20, v16, v17, v18, v19);
            else
              JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v45, v46, v20, v16, v17, v18, v19);
          }
          else
          {
            v47 = v46 >> 8;
            v48 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v45, v46, v15, v16, v17, v18, v19);
            if ((v48 & 6) == 2)
            {
              if (v21 <= 5 && ((1 << v21) & 0x32) != 0)
                JSC::Wasm::BBQJITImpl::BBQJIT::emitStore(a1, (char)v47, v48, v20, v49, v50, v51, v52);
              else
                JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveRegister(a1, (char)v47, v48, v20);
            }
            else if (v21 <= 5 && ((1 << v21) & 0x32) != 0)
            {
              JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveMemory(a1, (char)v47, v48, v20);
            }
            else
            {
              JSC::Wasm::BBQJITImpl::BBQJIT::emitLoad(a1, (char)v47, v48, v20, v49, v50, v51, v52);
            }
          }
          if (*(_DWORD *)(a4 + 12) <= v8)
          {
            __break(0xC471u);
            JUMPOUT(0x198F37F98);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v13) = 2;
          return;
        }
LABEL_76:
        __break(0xC471u);
        JUMPOUT(0x198F37F78);
      }
    }
  }
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<8ul,WTF::CrashOnOverflow>(int *a1, unsigned int a2)
{
  int *v4;
  uint64_t v5;

  if (a2)
  {
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Location>(a1);
    if (a2 != 1)
    {
      v4 = a1 + 1;
      v5 = 4 * a2 - 4;
      do
      {
        WTF::dataLog<char [16]>(", ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Location>(v4++);
        v5 -= 4;
      }
      while (v5);
    }
  }
  return WTF::dataLog<char [16]>("\n");
}

uint64_t WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Location>(int *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::Wasm::BBQJITImpl::BBQJIT::Location::dump(a1, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

__n128 WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Value,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::BBQJITImpl::BBQJIT::Value&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 result;

  v9 = (__n128 *)WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Value,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  result = *v9;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v9;
  return result;
}

uint64_t WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Value,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 16 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v8 - v10) >> 4);
      if (v15 < 9)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 8;
        goto LABEL_33;
      }
      if (!(v15 >> 28))
      {
        v16 = WTF::fastMalloc((WTF *)(16 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_33:
        v26 = 0;
        do
        {
          *(_OWORD *)(v16 + v26) = *(_OWORD *)(v10 + v26);
          v26 += 16;
        }
        while (16 * v11 != v26);
        if (a1 + 16 != v10 && v10)
        {
          if (*(_QWORD *)a1 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
        }
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v8 - v10) >> 4);
      }
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x198F382D4);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 9)
    {
      v22 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    else
    {
      if (v20 >> 28)
        goto LABEL_42;
      v22 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    v23 = 16 * v21;
    v24 = (__int128 *)v10;
    do
    {
      v25 = *v24++;
      *v22++ = v25;
      v23 -= 16;
    }
    while (v23);
LABEL_27:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::Wasm::BBQJITImpl::BBQJIT::addSwitch(JSC::Wasm::BBQJITImpl::BBQJIT::Value,WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::Wasm::BBQJITImpl::BBQJIT::ControlData&,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> &)::$_2>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int **v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;

  v9 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v9)
  {
    v10 = *(unsigned int ***)(a1 + 16);
    v11 = &v10[v9];
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::Wasm::BBQJITImpl::BBQJIT::addSwitch(JSC::Wasm::BBQJITImpl::BBQJIT::Value,WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::Wasm::BBQJITImpl::BBQJIT::ControlData&,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> &)::$_2>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int **v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;

  v9 = *((unsigned int *)this + 7);
  if ((_DWORD)v9)
  {
    v10 = (unsigned int **)*((_QWORD *)this + 2);
    v11 = &v10[v9];
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  v15 = *((_QWORD *)this + 2);
  if (v15)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::Wasm::BBQJITImpl::BBQJIT::addSwitch(JSC::Wasm::BBQJITImpl::BBQJIT::Value,WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::Wasm::BBQJITImpl::BBQJIT::ControlData&,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> &)::$_2>::run(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unsigned int *v9;

  if (*(_DWORD *)(result + 28))
  {
    v2 = 0;
    do
    {
      v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v2) + 4);
      if (v3 < 4)
        v4 = 0;
      else
        v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
      v5 = (v3 - v4);
      v6 = a2[23];
      v7 = v5 + v6;
      v8 = v6 <= v7 && v6 + a2[1] >= v7;
      if (!v8 || (v9 = *(unsigned int **)(result + 32), v2 >= *v9))
      {
        __break(0xC471u);
        JUMPOUT(0x198F3849CLL);
      }
      *(_QWORD *)&v9[2 * v2++ + 2] = v7;
    }
    while (v2 < *(unsigned int *)(result + 28));
  }
  return result;
}

__n128 WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _OWORD *v10;
  __n128 result;
  __int128 v12;

  v9 = WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  v10 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
  result = *(__n128 *)v9;
  v12 = *(_OWORD *)(v9 + 16);
  *v10 = *(_OWORD *)v9;
  v10[1] = v12;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 32 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
        return *(_QWORD *)a1 + 32 * ((uint64_t)(v8 - v10) >> 5);
      if (v15 < 0x11)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
        goto LABEL_31;
      }
      if (!(v15 >> 27))
      {
        v16 = WTF::fastMalloc((WTF *)(32 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_31:
        v23 = 0;
        do
        {
          v24 = (_OWORD *)(v16 + v23);
          v25 = *(_OWORD *)(v10 + v23 + 16);
          *v24 = *(_OWORD *)(v10 + v23);
          v24[1] = v25;
          v23 += 32;
        }
        while (32 * v11 != v23);
        if (a1 + 16 != v10 && v10)
        {
          if (*(_QWORD *)a1 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
        }
        return *(_QWORD *)a1 + 32 * ((uint64_t)(v8 - v10) >> 5);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x198F386C8);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 0x11)
    {
      v22 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
    }
    else
    {
      if (v20 >> 27)
        goto LABEL_43;
      v22 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
    }
    if ((_DWORD)v21)
    {
      v27 = 32 * v21;
      v28 = (__int128 *)v10;
      do
      {
        v29 = *v28;
        v30 = v28[1];
        v28 += 2;
        *v22 = v29;
        v22[1] = v30;
        v22 += 2;
        v27 -= 32;
      }
      while (v27);
    }
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::Wasm::BBQJITImpl::BBQJIT::endTopLevel(JSC::Wasm::FunctionSignature const*,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const&)::$_0>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  v9 = *(_QWORD *)(a1 + 24);
  if (a1 + 40 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::Wasm::BBQJITImpl::BBQJIT::endTopLevel(JSC::Wasm::FunctionSignature const*,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const&)::$_0>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;

  v9 = (WTF *)*((_QWORD *)this + 3);
  if ((WTF *)((char *)this + 40) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::Wasm::BBQJITImpl::BBQJIT::endTopLevel(JSC::Wasm::FunctionSignature const*,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const&)::$_0>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  JSC::ARM64Assembler *v11;

  v2 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v2)
  {
    v5 = *(int **)(a1 + 24);
    v6 = 4 * v2;
    while (1)
    {
      v7 = *v5;
      v8 = *v5 < 4 ? 0 : *(_DWORD *)((v7 & 0xFFFFFFFC) + a2[3] - 4);
      v9 = (v7 - v8);
      v10 = a2[23];
      v11 = (JSC::ARM64Assembler *)(v9 + v10);
      if (v10 > v9 + v10 || v10 + a2[1] < (unint64_t)v11)
        break;
      JSC::ARM64Assembler::linkPointer(v11, *(int *)(a1 + 16), (void *)1);
      ++v5;
      v6 -= 4;
      if (!v6)
        return;
    }
    __break(0xC471u);
  }
}

_DWORD *WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::BBQJITImpl::BBQJIT::Location&>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

unint64_t WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  int *v36;
  int v37;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if (v5 + 4 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v20 = *(_QWORD *)a1;
        return v20 + 4 * ((uint64_t)(v3 - v5) >> 2);
      }
      if (!(v10 >> 30))
      {
        v11 = WTF::fastMalloc((WTF *)(4 * v10));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          *(_DWORD *)(v11 + v19) = *(_DWORD *)(v5 + v19);
          v19 += 4;
        }
        while (4 * v6 != v19);
        v20 = *(_QWORD *)a1;
        if (v5)
        {
          if (v20 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
          v20 = *(_QWORD *)a1;
        }
        return v20 + 4 * ((uint64_t)(v3 - v5) >> 2);
      }
LABEL_36:
      __break(0xC471u);
      JUMPOUT(0x198F389BCLL);
    }
  }
  v21 = *(unsigned int *)(a1 + 8);
  v22 = v21 + (v21 >> 2);
  if (v22 >= 0x10)
    v23 = v22 + 1;
  else
    v23 = 16;
  if (v23 <= a2)
    v24 = a2;
  else
    v24 = v23;
  if (v24 > v21)
  {
    if (v24 >> 30)
      goto LABEL_36;
    v25 = *(unsigned int *)(a1 + 12);
    v26 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v24));
    *(_DWORD *)(a1 + 8) = v24;
    *(_QWORD *)a1 = v26;
    if ((_DWORD)v25)
    {
      v35 = 4 * v25;
      v36 = (int *)v5;
      do
      {
        v37 = *v36++;
        *v26++ = v37;
        v35 -= 4;
      }
      while (v35);
    }
    if (v5)
    {
      if (*(_QWORD *)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v27, v28, v29, v30, v31, v32, v33);
    }
  }
  return v3;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitShuffleMove<0ul,WTF::CrashOnOverflow>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  JSC::ARM64LogicalImmediate *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;

  if (*(_DWORD *)(a2 + 12) <= a5)
  {
    __break(0xC471u);
    JUMPOUT(0x198F38E30);
  }
  v8 = a5;
  v13 = a5;
  v14 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *(_QWORD *)(*(_QWORD *)a2 + 16 * a5), *(_QWORD *)(*(_QWORD *)a2 + 16 * a5 + 8), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(a3 + 12) <= v8)
  {
    __break(0xC471u);
    JUMPOUT(0x198F38E38);
  }
  v20 = *(unsigned int *)(*(_QWORD *)a3 + 4 * v13);
  v21 = *(_DWORD *)(*(_QWORD *)a3 + 4 * v13) & 7;
  if ((v14 & 7) != v21)
    goto LABEL_4;
  if ((v14 & 7) != 2)
  {
    switch(v14 & 7)
    {
      case 0u:
        return;
      case 1u:
      case 4u:
      case 5u:
        if (((v20 & 0xFFFF00F8 | (BYTE1(v20) << 8)) ^ v14) >= 8)
          goto LABEL_4;
        return;
      case 3u:
        break;
      case 6u:
        if (((WORD1(v20) << 24) ^ (v14 << 8)) >> 24)
          v41 = 0;
        else
          v41 = BYTE1(v14) == BYTE1(v20);
        if (!v41)
          goto LABEL_4;
        return;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F38DF8);
    }
  }
  if (BYTE1(v14) != BYTE1(v20))
  {
LABEL_4:
    if (*(_DWORD *)(a4 + 12) <= v8)
    {
      __break(0xC471u);
      JUMPOUT(0x198F38E40);
    }
    *(_DWORD *)(*(_QWORD *)a4 + 4 * v13) = 1;
    if (!*(_DWORD *)(a2 + 12))
      goto LABEL_66;
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *(_QWORD *)(*(_QWORD *)a2 + v22), *(_QWORD *)(*(_QWORD *)a2 + v22 + 8), v15, v16, v17, v18, v19);
      if ((v24 & 7) == v21)
      {
        if (v21 != 2)
        {
          switch(v21)
          {
            case 0u:
              goto LABEL_12;
            case 1u:
            case 4u:
            case 5u:
              if ((v24 ^ (v20 & 0xFFFF00F8 | (BYTE1(v20) << 8))) >= 8)
                goto LABEL_8;
              goto LABEL_12;
            case 3u:
              break;
            case 6u:
              if (((v24 << 8) ^ (WORD1(v20) << 24)) >> 24)
                v40 = 0;
              else
                v40 = BYTE1(v24) == BYTE1(v20);
              if (!v40)
                goto LABEL_8;
              goto LABEL_12;
            default:
              __break(0xC471u);
              JUMPOUT(0x198F38DB8);
          }
        }
        if (BYTE1(v24) == BYTE1(v20))
        {
LABEL_12:
          if (v23 >= *(unsigned int *)(a4 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x198F38E48);
          }
          v26 = *(_DWORD *)(*(_QWORD *)a4 + 4 * v23);
          if (v26)
          {
            if (v26 == 1)
            {
              if (v23 >= *(unsigned int *)(a2 + 12))
              {
                __break(0xC471u);
                JUMPOUT(0x198F38E50);
              }
              v36 = *(_QWORD *)a2 + v22;
              if ((*(_BYTE *)(v36 + 9) + 5) >= 3u)
                v37 = 2050;
              else
                v37 = 4099;
              v42 = v37;
              JSC::Wasm::BBQJITImpl::BBQJIT::emitMove(a1, *(JSC::ARM64LogicalImmediate **)v36, *(_QWORD *)(v36 + 8), v37, v16, v17, v18, v19);
              if (v23 >= *(unsigned int *)(a2 + 12))
              {
                __break(0xC471u);
                JUMPOUT(0x198F38E58);
              }
              v38 = *(_QWORD *)a2 + v22;
              v39 = *(unsigned __int8 *)(v38 + 9);
              if ((v39 - 192) <= 0x33)
              {
                if (((1 << (v39 + 64)) & 0xFFC19C001C000) != 0)
                {
                  LOWORD(v39) = 254;
                }
                else if (v39 == 192)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198F38E20);
                }
              }
              v43 = v42 | v43 & 0xFFFFFFFF00000000;
              *(_QWORD *)v38 = v43;
              *(_WORD *)(v38 + 8) = ((_WORD)v39 << 8) | 4;
            }
          }
          else
          {
            JSC::Wasm::BBQJITImpl::BBQJIT::emitShuffleMove<0ul,WTF::CrashOnOverflow>(a1, a2, a3, a4, v23);
          }
        }
      }
LABEL_8:
      ++v23;
      v25 = *(unsigned int *)(a2 + 12);
      v22 += 16;
    }
    while (v23 < v25);
    if (v25 <= v8)
    {
LABEL_66:
      __break(0xC471u);
      JUMPOUT(0x198F38E28);
    }
    v27 = *(_QWORD *)a2 + 16 * v13;
    v28 = *(JSC::ARM64LogicalImmediate **)v27;
    v29 = *(_QWORD *)(v27 + 8);
    if (v29 == 1)
    {
      if (v21 <= 5 && ((1 << v21) & 0x32) != 0)
        JSC::Wasm::BBQJITImpl::BBQJIT::emitStoreConst(a1, v28, v29, v20, v16, v17, v18, v19);
      else
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v28, v29, v20, v16, v17, v18, v19);
    }
    else
    {
      v30 = v29 >> 8;
      v31 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v28, v29, v15, v16, v17, v18, v19);
      if ((v31 & 6) == 2)
      {
        if (v21 <= 5 && ((1 << v21) & 0x32) != 0)
          JSC::Wasm::BBQJITImpl::BBQJIT::emitStore(a1, (char)v30, v31, v20, v32, v33, v34, v35);
        else
          JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveRegister(a1, (char)v30, v31, v20);
      }
      else if (v21 <= 5 && ((1 << v21) & 0x32) != 0)
      {
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveMemory(a1, (char)v30, v31, v20);
      }
      else
      {
        JSC::Wasm::BBQJITImpl::BBQJIT::emitLoad(a1, (char)v30, v31, v20, v32, v33, v34, v35);
      }
    }
    if (*(_DWORD *)(a4 + 12) <= v8)
    {
      __break(0xC471u);
      JUMPOUT(0x198F38E60);
    }
    *(_DWORD *)(*(_QWORD *)a4 + 4 * v13) = 2;
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::Wasm::BBQJITImpl::BBQJIT::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Value,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Value,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_0>::run(uint64_t result, _QWORD *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v2 = *(_DWORD *)(result + 24);
  if (v2 < 4)
    v3 = 0;
  else
    v3 = *(_DWORD *)((v2 & 0xFFFFFFFC) + a2[3] - 4);
  v4 = (v2 - v3);
  v5 = a2[23];
  v6 = v4 + v5;
  if (v5 > v4 + v5)
    goto LABEL_18;
  v7 = v5 + a2[1];
  if (v7 < v6)
    goto LABEL_18;
  v8 = *(_QWORD *)(result + 16);
  v9 = *(unsigned int *)(result + 32);
  v10 = ((unint64_t)*(unsigned int *)(result + 28) >> 2) & 1;
  *(_QWORD *)&v19 = v6;
  *((_QWORD *)&v19 + 1) = v10;
  *(_QWORD *)&v20 = v9;
  v11 = *(_DWORD *)(result + 36);
  v12 = v11 < 4 ? 0 : *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12) + v5;
  if (v5 > v13 || v7 < v13)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x198F38FC4);
  }
  *((_QWORD *)&v20 + 1) = v13;
  v15 = *(unsigned int *)(v8 + 12);
  if ((_DWORD)v15 == *(_DWORD *)(v8 + 8))
  {
    result = WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v15 + 1, (unint64_t)&v19);
    v16 = (_OWORD *)(*(_QWORD *)v8 + 32 * *(unsigned int *)(v8 + 12));
    v17 = *(_OWORD *)result;
    v18 = *(_OWORD *)(result + 16);
  }
  else
  {
    v16 = (_OWORD *)(*(_QWORD *)v8 + 32 * v15);
    v17 = v19;
    v18 = v20;
  }
  *v16 = v17;
  v16[1] = v18;
  ++*(_DWORD *)(v8 + 12);
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<0ul,WTF::CrashOnOverflow,char [4],WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Value,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2, unsigned int a3, char *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *__s1;
  int v46;

  if (a3)
  {
    WTF::dataLog<char [16]>(", ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a2);
    v15 = *((unsigned __int8 *)a2 + 8);
    if (v15 != 1 && v15 != 4)
    {
      LODWORD(__s1) = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a2, a2[1], v10, v11, v12, v13, v14);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&__s1);
    }
    if (a3 != 1)
    {
      v17 = a2 + 2;
      v18 = 16 * a3 - 16;
      do
      {
        WTF::dataLog<char [16]>(", ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v17);
        v24 = *((unsigned __int8 *)v17 + 8);
        if (v24 != 1 && v24 != 4)
        {
          LODWORD(__s1) = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *v17, v17[1], v19, v20, v21, v22, v23);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&__s1);
        }
        v17 += 2;
        v18 -= 16;
      }
      while (v18);
    }
  }
  __s1 = a4;
  WTF::dataLog<char [16]>(" ");
  WTF::dataLog<char const*>((const char **)&__s1);
  v26 = *(unsigned int *)(a5 + 12);
  if ((_DWORD)v26)
  {
    v27 = *(uint64_t **)a5;
    if (strcmp(__s1, "=> "))
      WTF::dataLog<char [16]>(", ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v27);
    v33 = *((unsigned __int8 *)v27 + 8);
    if (v33 != 1 && v33 != 4)
    {
      v46 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *v27, v27[1], v28, v29, v30, v31, v32);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v46);
    }
    if ((_DWORD)v26 != 1)
    {
      v35 = v27 + 2;
      v36 = 16 * v26 - 16;
      do
      {
        WTF::dataLog<char [16]>(", ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v35);
        v42 = *((unsigned __int8 *)v35 + 8);
        if (v42 != 1 && v42 != 4)
        {
          v46 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *v35, v35[1], v37, v38, v39, v40, v41);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v46);
        }
        v35 += 2;
        v36 -= 16;
      }
      while (v36);
    }
  }
  return WTF::dataLog<char [16]>("\n");
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Value,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,char [4],WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Value,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, char a2, uint64_t *a3, uint64_t a4, char *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v19;

  if ((a2 & 1) == 0)
    WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
  v16 = *((unsigned __int8 *)a3 + 8);
  if (v16 != 1 && v16 != 4)
  {
    v19 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a3, a3[1], v11, v12, v13, v14, v15);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v19);
  }
  return JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<0ul,WTF::CrashOnOverflow,char [4],WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Value,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, *(uint64_t **)a4, *(_DWORD *)(a4 + 12), a5, a6);
}

unint64_t WTF::Vector<std::tuple<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,unsigned long,JSC::ARM64Registers::RegisterID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = v5 + 32 * *(unsigned int *)(a1 + 12);
    if (v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v22 = *(_QWORD *)a1;
        return v22 + 32 * ((uint64_t)(v3 - v5) >> 5);
      }
      if (!(v10 >> 27))
      {
        v11 = WTF::fastMalloc((WTF *)(32 * v10));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          v20 = v11 + v19;
          v21 = v5 + v19;
          *(_DWORD *)v20 = *(_DWORD *)(v5 + v19);
          *(_QWORD *)(v20 + 4) = *(_QWORD *)(v5 + v19 + 4);
          *(_DWORD *)(v20 + 12) = *(_DWORD *)(v5 + v19 + 12);
          *(_QWORD *)(v20 + 16) = *(_QWORD *)(v5 + v19 + 16);
          *(_BYTE *)(v20 + 24) = *(_BYTE *)(v5 + v19 + 24);
          v19 += 32;
        }
        while (v21 + 32 != v6);
        v22 = *(_QWORD *)a1;
        if (v5)
        {
          if (v22 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
          v22 = *(_QWORD *)a1;
        }
        return v22 + 32 * ((uint64_t)(v3 - v5) >> 5);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x198F39438);
    }
  }
  v23 = *(unsigned int *)(a1 + 8);
  v24 = v23 + (v23 >> 2);
  if (v24 >= 0x10)
    v25 = v24 + 1;
  else
    v25 = 16;
  if (v25 <= a2)
    v26 = a2;
  else
    v26 = v25;
  if (v26 > v23)
  {
    if (v26 >> 27)
      goto LABEL_35;
    v27 = *(unsigned int *)(a1 + 12);
    v28 = WTF::fastMalloc((WTF *)(32 * v26));
    *(_DWORD *)(a1 + 8) = v26;
    *(_QWORD *)a1 = v28;
    if ((_DWORD)v27)
    {
      v36 = v5;
      do
      {
        *(_DWORD *)v28 = *(_DWORD *)v36;
        *(_QWORD *)(v28 + 4) = *(_QWORD *)(v36 + 4);
        *(_DWORD *)(v28 + 12) = *(_DWORD *)(v36 + 12);
        *(_QWORD *)(v28 + 16) = *(_QWORD *)(v36 + 16);
        *(_BYTE *)(v28 + 24) = *(_BYTE *)(v36 + 24);
        v36 += 32;
        v28 += 32;
      }
      while (v36 != v5 + 32 * v27);
    }
    if (v5)
    {
      if (*(_QWORD *)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v29, v30, v31, v32, v33, v34, v35);
    }
  }
  return v3;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<3,0>::ScratchScope<>(uint64_t a1, JSC::Wasm::BBQJITImpl::BBQJIT *this, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  JSC::ARM64LogicalImmediate *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  JSC::ARM64LogicalImmediate *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  *(_QWORD *)a1 = this;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  v9 = *((_QWORD *)this + 77);
  if (v9)
    v10 = __clz(__rbit64(v9));
  else
    v10 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR(this, this, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 8) = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<3,0>::bindGPRToScratch((_QWORD *)a1, v10);
  v18 = *(_QWORD *)(*(_QWORD *)a1 + 616);
  if (v18)
    v19 = __clz(__rbit64(v18));
  else
    v19 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR(*(JSC::Wasm::BBQJITImpl::BBQJIT **)a1, v11, v12, v13, v14, v15, v16, v17);
  *(_BYTE *)(a1 + 9) = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<3,0>::bindGPRToScratch((_QWORD *)a1, v19);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 616);
  if (v27)
    v28 = __clz(__rbit64(v27));
  else
    v28 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR(*(JSC::Wasm::BBQJITImpl::BBQJIT **)a1, v20, v21, v22, v23, v24, v25, v26);
  *(_BYTE *)(a1 + 10) = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<3,0>::bindGPRToScratch((_QWORD *)a1, v28);
  return a1;
}

_QWORD *JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<3,0>::bindGPRToScratch(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = a2 & 0x7F;
  if ((a2 & 0x7Fu) >= 0x40)
  {
    __break(1u);
    goto LABEL_11;
  }
  v2 = a2;
  v5 = result;
  v6 = *result;
  v7 = 1 << v4;
  if ((*(_QWORD *)(*result + 648) & (1 << v4)) == 0)
    return (_QWORD *)v2;
  if (*(unsigned int *)(v6 + 340) > (unint64_t)(int)a2)
  {
    v3 = (int)a2;
    v8 = *(_QWORD *)(v6 + 328) + 4 * (int)a2;
    JSC::Wasm::BBQJITImpl::BBQJIT::LRU<JSC::ARM64Registers::RegisterID>::lock(v6 + 848, a2);
    if ((v5[2] & v7) != 0 && (*(_WORD *)(v8 + 1) & 7) != 0)
    {
      if ((_BYTE)word_1ECF4C700)
      {
        v9 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * (int)v2];
        WTF::dataLog<char [20],WTF::ASCIILiteral,char [21],JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding,char [2]>("BBQ\tPreserving GPR ", (uint64_t)&v9, " currently bound to ", v8, "\n");
      }
      return (_QWORD *)v2;
    }
    *(_DWORD *)v8 = 768;
    *(int8x16_t *)(*v5 + 616) = vandq_s8(*(int8x16_t *)(*v5 + 616), (int8x16_t)vdupq_n_s64(~v7));
    if (!(_BYTE)word_1ECF4C700)
      return (_QWORD *)v2;
LABEL_11:
    v9 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v3];
    WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReserving scratch GPR ", (uint64_t)&v9, "\n");
    return (_QWORD *)v2;
  }
  __break(0xC471u);
  return result;
}

unsigned __int8 *JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<3,0>::unbindScratches(unsigned __int8 *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  char v6;
  int8x16_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  if (result[32])
    return result;
  v4 = result;
  result[32] = 1;
  v5 = result[8];
  v6 = v5 & 0x7F;
  if ((v5 & 0x7Fu) >= 0x40)
    goto LABEL_29;
  v7 = *(int8x16_t **)result;
  v2 = 1 << v6;
  v1 = g_config;
  if ((*(_QWORD *)(*(_QWORD *)result + 648) & (1 << v6)) == 0)
    goto LABEL_8;
  v5 = (char)v5;
  if (v7[21].u32[1] <= (unint64_t)(char)v5)
    goto LABEL_31;
  v3 = v7[20].i64[1] + 4 * (char)v5;
  v7[62] = vandq_s8(v7[62], (int8x16_t)vdupq_n_s64(~v2));
  if ((_BYTE)word_1ECF4C700)
    goto LABEL_30;
  while (1)
  {
    if ((*((_QWORD *)v4 + 2) & v2) == 0 || (*(_WORD *)(v3 + 1) & 7) == 3)
    {
      *(_DWORD *)v3 = 0;
      v7 = *(int8x16_t **)v4;
      *(_QWORD *)(*(_QWORD *)v4 + 616) |= 1 << v6;
    }
    else
    {
      v7 = *(int8x16_t **)v4;
    }
LABEL_8:
    v5 = v4[9];
    v6 = v5 & 0x7F;
    if ((v5 & 0x7Fu) <= 0x3F)
    {
      v2 = 1 << v6;
      if ((v7[40].i64[1] & (1 << v6)) != 0)
      {
        if (v7[21].u32[1] <= (unint64_t)(char)v5)
          goto LABEL_31;
        v3 = v7[20].i64[1] + 4 * (char)v5;
        v7[62] = vandq_s8(v7[62], (int8x16_t)vdupq_n_s64(~v2));
        if (*((_BYTE *)v1 + 1792))
        {
          v10 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * (char)v5];
          result = (unsigned __int8 *)WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v10, "\n");
        }
        if ((*((_QWORD *)v4 + 2) & v2) == 0 || (*(_WORD *)(v3 + 1) & 7) == 3)
        {
          *(_DWORD *)v3 = 0;
          v7 = *(int8x16_t **)v4;
          *(_QWORD *)(*(_QWORD *)v4 + 616) |= 1 << v6;
        }
        else
        {
          v7 = *(int8x16_t **)v4;
        }
      }
      v5 = v4[10];
      v6 = v5 & 0x7F;
      if ((v5 & 0x7Fu) <= 0x3F)
        break;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    v10 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v5];
    result = (unsigned __int8 *)WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v10, "\n");
  }
  v8 = 1 << v6;
  if ((v7[40].i64[1] & (1 << v6)) != 0)
  {
    if (v7[21].u32[1] > (unint64_t)(char)v5)
    {
      v9 = v7[20].i64[1] + 4 * (char)v5;
      v7[62] = vandq_s8(v7[62], (int8x16_t)vdupq_n_s64(~v8));
      if (*((_BYTE *)v1 + 1792))
      {
        v10 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * (char)v5];
        result = (unsigned __int8 *)WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v10, "\n");
      }
      if ((*((_QWORD *)v4 + 2) & v8) == 0 || (*(_WORD *)(v9 + 1) & 7) == 3)
      {
        *(_DWORD *)v9 = 0;
        *(_QWORD *)(*(_QWORD *)v4 + 616) |= 1 << v6;
      }
      return result;
    }
LABEL_31:
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<3,0>::unbindPreserved(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (!*(_BYTE *)(result + 33))
  {
    v1 = (_QWORD *)result;
    *(_BYTE *)(result + 33) = 1;
    v2 = *(_QWORD *)(result + 16);
    if (v2)
    {
      v3 = __clz(__rbit64(v2));
      do
      {
        if (v3 > 0x1Fu)
          result = (uint64_t)JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(v1, (char)(v3 - 32));
        else
          result = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<3,0>::unbindGPRFromScratch((uint64_t)v1, (char)v3);
        if (v3 > 0x3E)
          break;
        v4 = v1[2];
        if (!v4)
          break;
        v5 = __clz(__rbit64(v4 >> ((v3 + 1) & 0x3F))) + (((_BYTE)v3 + 1) & 0x3F);
        v3 = v5 >= 0x40 ? 64 : v5;
      }
      while (v5 < 0x40);
    }
  }
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<3,0>::unbindGPRFromScratch(uint64_t result, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t *v7;
  __int128 v8;

  if ((a2 & 0x7Fu) >= 0x40)
  {
    __break(1u);
LABEL_11:
    v8 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v2];
    result = WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v8, "\n");
    goto LABEL_5;
  }
  v3 = (_QWORD *)result;
  v7 = *(int8x16_t **)result;
  v4 = a2 & 0x7F;
  v5 = 1 << (a2 & 0x7F);
  if ((*(_QWORD *)(*(_QWORD *)result + 648) & v5) == 0)
    return result;
  if (v7[21].u32[1] <= (unint64_t)a2)
  {
    __break(0xC471u);
    return result;
  }
  v2 = a2;
  v6 = v7[20].i64[1] + 4 * a2;
  v7[62] = vandq_s8(v7[62], (int8x16_t)vdupq_n_s64(~v5));
  if ((_BYTE)word_1ECF4C700)
    goto LABEL_11;
LABEL_5:
  if ((v3[2] & v5) == 0 || (*(_WORD *)(v6 + 1) & 7) == 3)
  {
    *(_DWORD *)v6 = 0;
    *(_QWORD *)(*v3 + 616) |= 1 << v4;
  }
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Location>>(uint64_t a1, char a2, uint64_t *a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v15;

  if ((a2 & 1) == 0)
    WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
  v12 = *((unsigned __int8 *)a3 + 8);
  if (v12 != 1 && v12 != 4)
  {
    v15 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a3, a3[1], v7, v8, v9, v10, v11);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v15);
  }
  WTF::dataLog<char [16]>(" ");
  WTF::dataLog<char [16]>("=> ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Location>(a4);
  return WTF::dataLog<char [16]>("\n");
}

uint64_t WTF::dataLog<char [15],JSC::Wasm::BBQJITImpl::BBQJIT::Value,char [12],WTF::ASCIILiteral,char [5],JSC::Wasm::BBQJITImpl::BBQJIT::Location,char [2]>(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char v16;
  char **v17;
  char *v18;
  int v19;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "BBQ\tAllocated ");
  JSC::Wasm::BBQJITImpl::BBQJIT::Value::dump(a1, v8);
  WTF::PrintStream::printf(v8, "%s", " with type ");
  v9 = *(char **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  if (v9)
  {
    v13 = v10 - 1;
    if (!v10)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v18, v12);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v18 = (char *)v14;
    v19 = 0;
  }
  WTF::printExpectedCStringHelper(v11, "StringView", &v18);
  if (v19 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v19])(&v17, &v18);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", " to ");
  JSC::Wasm::BBQJITImpl::BBQJIT::Location::dump(a3, v8);
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [19],JSC::Wasm::BBQJITImpl::BBQJIT::Value,char [14],char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "BBQ\tLoading value ");
  JSC::Wasm::BBQJITImpl::BBQJIT::Value::dump(a1, v4);
  WTF::PrintStream::printf(v4, "%s", " if necessary");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [19],JSC::Wasm::BBQJITImpl::BBQJIT::Value,char [5],JSC::Wasm::BBQJITImpl::BBQJIT::Location,char [2]>(uint64_t a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "BBQ\tLoading local ");
  JSC::Wasm::BBQJITImpl::BBQJIT::Value::dump(a1, v6);
  WTF::PrintStream::printf(v6, "%s", " to ");
  JSC::Wasm::BBQJITImpl::BBQJIT::Location::dump(a2, v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [17],JSC::Wasm::BBQJITImpl::BBQJIT::Value,char [5],JSC::Wasm::BBQJITImpl::BBQJIT::Location,char [2]>(uint64_t a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "BBQ\tBound value ");
  JSC::Wasm::BBQJITImpl::BBQJIT::Value::dump(a1, v6);
  WTF::PrintStream::printf(v6, "%s", " to ");
  JSC::Wasm::BBQJITImpl::BBQJIT::Location::dump(a2, v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [19],JSC::Wasm::BBQJITImpl::BBQJIT::Value,char [7],JSC::Wasm::BBQJITImpl::BBQJIT::Location,char [2]>(uint64_t a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "BBQ\tUnbound value ");
  JSC::Wasm::BBQJITImpl::BBQJIT::Value::dump(a1, v6);
  WTF::PrintStream::printf(v6, "%s", " from ");
  JSC::Wasm::BBQJITImpl::BBQJIT::Location::dump(a2, v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [18],WTF::ASCIILiteral,char [21],JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding,char [2]>(const char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char v16;
  char **v17;
  char *v18;
  int v19;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", a1);
  v9 = *(char **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  if (v9)
  {
    v13 = v10 - 1;
    if (!v10)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v18, v12);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v18 = (char *)v14;
    v19 = 0;
  }
  WTF::printExpectedCStringHelper(v11, "StringView", &v18);
  if (v19 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v19])(&v17, &v18);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", " currently bound to ");
  JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding::dump(a3, v8);
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [20],WTF::ASCIILiteral,char [21],JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding,char [2]>(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  unint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  char v20;
  char **v21;
  char *v22;
  int v23;

  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v22 = &v20;
    v21 = &v22;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v11 = WTF::s_file;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v12, "%s", a1);
  v13 = *(char **)a2;
  v14 = *(_QWORD *)(a2 + 8);
  v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
  if (v13)
  {
    v17 = v14 - 1;
    if (!v14)
      v17 = 0;
    WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v22, v16);
  }
  else
  {
    v18 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v18 = 1;
    *(_QWORD *)(v18 + 8) = 0;
    *(_BYTE *)(v18 + 16) = 0;
    v22 = (char *)v18;
    v23 = 0;
  }
  WTF::printExpectedCStringHelper(v15, "StringView", &v22);
  if (v23 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v21, &v22);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
  WTF::PrintStream::printf(v12, "%s", a3);
  JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding::dump(a4, v12);
  WTF::PrintStream::printf(v12, "%s", a5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseUnreachableExpression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, double a10)
{
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  WTF **v38;
  WTF *v39;
  WTF *v40;
  unsigned int v41;
  int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  char *v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  int v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  int v84;
  unint64_t v85;
  char *v86;
  unint64_t *v87;
  uint64_t v88;
  WTF **v89;
  uint64_t v90;
  float v91;
  double v92;
  double v93;
  uint8x8_t v94;
  int v95;
  uint64_t v96;
  unint64_t *v97;
  int v98;
  double v99;
  unsigned int v100;
  float v101;
  unint64_t v102;
  int v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *v108;
  WTF::AtomStringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF::AtomStringImpl *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  double v135;
  float v136;
  double v137;
  int v138;
  BOOL v139;
  int v140;
  char *v141;
  char *v142;
  unint64_t *v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  _BOOL8 v147;
  double v148;
  int v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  WTF *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v172;
  int v173;
  uint64_t v174;
  _QWORD *v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  WTF *v198;
  WTF::AtomStringImpl *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  __int128 *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  __int128 v222;
  uint64_t v223;
  WTF *v224;
  char *v225;
  unint64_t *v226;
  uint64_t v227;
  WTF *v228;
  WTF **v229;
  char *v230;
  unint64_t *v231;
  uint64_t v232;
  char *v233;
  unint64_t v234;
  WTF *v235;
  unint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  char v242;
  float v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unsigned __int8 v256;
  __int128 v257;
  _BYTE v258[512];
  WTF *v259;
  uint64_t v260;
  _BYTE v261[512];
  WTF *v262;
  int v263;
  unsigned int v264;
  _BYTE v265[520];
  JSC::Wasm::FunctionSignature *v266;
  int v267;
  unsigned int v268;

  v12 = a2 + 20624;
  if (*(_BYTE *)(a2 + 20624) != 11)
  {
    switch(*(_BYTE *)(a2 + 20624))
    {
      case 0:
      case 1:
      case 0xF:
      case 0x1A:
      case 0x1B:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x52:
      case 0x53:
      case 0x54:
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
      case 0x99:
      case 0x9A:
      case 0x9B:
      case 0x9C:
      case 0x9D:
      case 0x9E:
      case 0x9F:
      case 0xA0:
      case 0xA1:
      case 0xA2:
      case 0xA3:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA7:
      case 0xA8:
      case 0xA9:
      case 0xAA:
      case 0xAB:
      case 0xAC:
      case 0xAD:
      case 0xAE:
      case 0xAF:
      case 0xB0:
      case 0xB1:
      case 0xB2:
      case 0xB3:
      case 0xB4:
      case 0xB5:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBE:
      case 0xBF:
      case 0xC0:
      case 0xC1:
      case 0xC2:
      case 0xC3:
      case 0xC4:
      case 0xD0:
      case 0xD1:
      case 0xD3:
      case 0xD4:
        goto LABEL_22;
      case 2:
      case 3:
      case 4:
      case 6:
        ++*(_DWORD *)(a2 + 20640);
        *(_QWORD *)&v257 = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseBlockSignatureAndNotifySIMDUseIfNeeded(&v259, (unint64_t *)a2, (unsigned __int8 ***)&v257);
        v75 = v260;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v259, v76, v77, v78, v79, v80, v81, v82);
        if (!v75)
          goto LABEL_37;
        v69 = "can't get inline type for ";
        v70 = (unint64_t *)a2;
        v71 = 27;
        goto LABEL_249;
      case 5:
        if (*(_DWORD *)(a2 + 20640) >= 2u)
          goto LABEL_22;
        v52 = *(unsigned int *)(a2 + 596);
        if (!(_DWORD)v52)
        {
          __break(0xC471u);
          JUMPOUT(0x198F3C5A8);
        }
        v53 = v52 - 1;
        v54 = *(_QWORD *)(a2 + 584);
        *(_DWORD *)(a2 + 20640) = 0;
        if (*(_DWORD *)(v54 + 1232 * (v52 - 1) + 1072))
        {
          JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [37]>((void (***)(WTF::StringPrintStream *__hidden))&v259);
          goto LABEL_241;
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::addElseToUnreachable((JSC::Wasm::BBQJITImpl::BBQJIT *)&v259, *(JSC::Wasm::BBQJITImpl::BBQJIT::ControlData **)(a2 + 48), v54 + 1232 * v53 + 1064, a4, a5, a6, a7, a8);
        if ((_BYTE)v260)
          goto LABEL_203;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v259, v55, v56, v57, v58, v59, v60, v61);
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=(a2 + 56, (_DWORD *)(v54 + 1232 * v53 + 528), v62, v63, v64, v65, v66, v67);
        goto LABEL_22;
      case 7:
        LODWORD(v255) = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseExceptionIndex((uint64_t)&v259, (unint64_t *)a2, (unsigned int *)&v255, a9, *(float *)&a10);
        if ((_BYTE)v260)
          goto LABEL_203;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v259, v55, v56, v57, v58, v59, v60, v61);
        v172 = *(_QWORD *)(a2 + 20592);
        v173 = v255;
        v174 = *(unsigned int *)(v172 + 68);
        if (v174 <= v255)
        {
          v176 = v255 - v174;
          if (v176 >= *(unsigned int *)(v172 + 84))
          {
            __break(0xC471u);
            JUMPOUT(0x198F3C5E8);
          }
          v175 = (_QWORD *)(v172 + 72);
        }
        else
        {
          v175 = (_QWORD *)(v172 + 56);
          v176 = v255;
        }
        v178 = JSC::Wasm::TypeDefinition::expand(*(_QWORD *)(*v175 + 8 * v176));
        if (*(_DWORD *)(v12 + 16) >= 2u)
          goto LABEL_22;
        v185 = *(_DWORD *)(a2 + 596);
        if (!v185)
        {
          __break(0xC471u);
          JUMPOUT(0x198F3C5F0);
        }
        v186 = v178;
        v187 = *(_QWORD *)(a2 + 584) + 1232 * v185;
        v188 = v187 - 168;
        v189 = *(_DWORD *)(v187 - 160);
        if (v189 != 4 && (v189 != 5 || *(_DWORD *)(v188 + 12) != 0))
          goto LABEL_477;
        *(_DWORD *)(v12 + 16) = 0;
        v259 = (WTF *)v261;
        v260 = 16;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=(a2 + 56, &v259, v179, v180, v181, v182, v183, v184);
        v198 = v259;
        if (v261 != (_BYTE *)v259 && v259)
        {
          v259 = 0;
          LODWORD(v260) = 0;
          WTF::fastFree((unint64_t)v198, v191, v192, v193, v194, v195, v196, v197);
        }
        v259 = (WTF *)v261;
        v260 = 8;
        JSC::Wasm::BBQJITImpl::BBQJIT::addCatchToUnreachable(&v257, *(_QWORD *)(a2 + 48), v173, v186, v188, (uint64_t)&v259);
        if (BYTE8(v257))
        {
          v251 = v257;
          *(_QWORD *)&v257 = 0;
          *(_QWORD *)a1 = v251;
          *(_BYTE *)(a1 + 8) = 1;
          std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v257, v199, v200, v201, v202, v203, v204, v205);
        }
        else
        {
          std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v257, v199, v200, v201, v202, v203, v204, v205);
          if (*(_DWORD *)(v186 + 32))
            v213 = 0;
          else
            v213 = v186 + 8;
          v214 = *(_DWORD *)(v213 + 8);
          if (HIDWORD(v260) != v214)
          {
            __break(0xC471u);
            JUMPOUT(0x198F3C4E4);
          }
          if (v214)
          {
            v215 = 0;
            v216 = 0;
            do
            {
              v217 = (uint64_t *)(*(_QWORD *)(v186 + 8) + 16 * (v216 + *(_DWORD *)(v186 + 20)));
              v218 = *v217;
              v219 = v217[1];
              *(_QWORD *)&v257 = v218;
              *((_QWORD *)&v257 + 1) = v219;
              if (v218 == 251)
                *(_BYTE *)(*(_QWORD *)(a2 + 48) + 1292) = 1;
              if (v216 >= HIDWORD(v260))
              {
                __break(0xC471u);
                JUMPOUT(0x198F3C5C8);
              }
              v207 = (__int128 *)((char *)v259 + v215);
              v220 = *(unsigned int *)(a2 + 68);
              if ((_DWORD)v220 == *(_DWORD *)(a2 + 64))
              {
                v254 = v216;
                WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a2 + 56, &v257, v207, v208, v209, v210, v211, v212);
                v216 = v254;
              }
              else
              {
                v221 = *(_QWORD *)(a2 + 56) + 32 * v220;
                v222 = *v207;
                *(_QWORD *)v221 = v218;
                *(_QWORD *)(v221 + 8) = v219;
                *(_OWORD *)(v221 + 16) = v222;
                ++*(_DWORD *)(a2 + 68);
              }
              ++v216;
              if (*(_DWORD *)(v186 + 32))
                v223 = 0;
              else
                v223 = v186 + 8;
              v215 += 16;
            }
            while (v216 < *(unsigned int *)(v223 + 8));
          }
          *(_BYTE *)a1 = 0;
          *(_BYTE *)(a1 + 8) = 0;
        }
        v224 = v259;
        if (v261 != (_BYTE *)v259 && v259)
        {
          v259 = 0;
          LODWORD(v260) = 0;
          WTF::fastFree((unint64_t)v224, v206, (uint64_t)v207, v208, v209, v210, v211, v212);
        }
        return;
      case 8:
        JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseExceptionIndex((uint64_t)&v259, (unint64_t *)a2, (unsigned int *)&v257, a9, *(float *)&a10);
        goto LABEL_51;
      case 9:
        LODWORD(v255) = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseBranchTarget(&v259, a2, (unsigned int *)&v255, 0, a9, *(float *)&a10, a5, a6, a7);
        if ((_BYTE)v260)
          goto LABEL_203;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v259, v55, v56, v57, v58, v59, v60, v61);
        v152 = *(unsigned int *)(a2 + 596);
        v153 = ~(unint64_t)v255;
        v139 = __CFADD__(v153, v152);
        v154 = v153 + v152;
        if (!v139)
        {
          __break(0xC471u);
          JUMPOUT(0x198F3C5D0);
        }
        if (*(_DWORD *)(*(_QWORD *)(a2 + 584) + 1232 * v154 + 1072) == 5)
          goto LABEL_22;
        v155 = "rethrow doesn't refer to a catch block";
        v156 = 39;
        goto LABEL_482;
      case 0xC:
      case 0xD:
        v84 = *(_DWORD *)(a2 + 20640);
        goto LABEL_50;
      case 0xE:
        LODWORD(v257) = 0;
        LODWORD(v255) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
        {
          if ((_DWORD)v257)
          {
            if ((_DWORD)v257 == -1)
            {
              v225 = "br_table's number of targets is too big ";
              v226 = (unint64_t *)a2;
              v227 = 41;
              v95 = -1;
              goto LABEL_201;
            }
            v100 = 0;
            do
            {
              if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v255))
              {
                v141 = "can't get ";
                v142 = "th target for br_table in unreachable context";
                v143 = (unint64_t *)a2;
                v144 = 11;
                v145 = v100;
                v146 = 46;
                goto LABEL_307;
              }
              ++v100;
            }
            while (v100 < v257);
          }
          if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v255))
            goto LABEL_22;
          v86 = "can't get default target for br_table in unreachable context";
          v87 = (unint64_t *)a2;
          v88 = 61;
        }
        else
        {
          v86 = "can't get the number of targets for br_table in unreachable context";
LABEL_471:
          v87 = (unint64_t *)a2;
          v88 = 68;
        }
        goto LABEL_310;
      case 0x10:
        goto LABEL_85;
      case 0x11:
        goto LABEL_87;
      case 0x12:
        if (!HIBYTE(word_1ECF4C7B4))
          goto LABEL_460;
LABEL_85:
        JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseFunctionIndex(&v259, (unint64_t *)a2, (unsigned int *)&v257, a9, *(float *)&a10, a4, a5, a6, a7);
        goto LABEL_51;
      case 0x13:
        if (HIBYTE(word_1ECF4C7B4))
        {
LABEL_87:
          LODWORD(v257) = 0;
          LODWORD(v255) = 0;
          if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
          {
            if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v255))
              goto LABEL_22;
            v86 = "can't get call_indirect's reserved byte in unreachable context";
            v87 = (unint64_t *)a2;
            v88 = 63;
          }
          else
          {
            v86 = "can't get call_indirect's signature index in unreachable context";
            v87 = (unint64_t *)a2;
            v88 = 65;
          }
        }
        else
        {
LABEL_460:
          v86 = "wasm tail calls are not enabled";
          v87 = (unint64_t *)a2;
          v88 = 32;
        }
        goto LABEL_310;
      case 0x14:
        if (BYTE1(dword_1ECF4C7B0))
        {
          LODWORD(v257) = 0;
          if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
          {
LABEL_37:
            v83 = 0;
            *(_BYTE *)a1 = 0;
            goto LABEL_38;
          }
          v86 = "can't call_ref's signature index in unreachable context";
          v87 = (unint64_t *)a2;
          v88 = 56;
        }
        else
        {
          v86 = "function references are not enabled";
          v87 = (unint64_t *)a2;
          v88 = 36;
        }
        goto LABEL_310;
      case 0x18:
        if (*(_DWORD *)(a2 + 596) == 1)
        {
          v86 = "can't use delegate at the top-level of a function";
          v87 = (unint64_t *)a2;
          v88 = 50;
LABEL_310:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v86, v87, v88, &v259, *(float *)&a10);
LABEL_241:
          v235 = v259;
LABEL_242:
          *(_QWORD *)a1 = v235;
          v83 = 1;
LABEL_38:
          *(_BYTE *)(a1 + 8) = v83;
          return;
        }
        v268 = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseDelegateTarget((uint64_t)&v259, a2, &v268, *(_DWORD *)(a2 + 20640), a9, *(float *)&a10);
        if ((_BYTE)v260)
          goto LABEL_203;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v259, v55, v56, v57, v58, v59, v60, v61);
        v103 = *(_DWORD *)(v12 + 16);
        if (v103 != 1)
          goto LABEL_107;
        v104 = (_QWORD *)(a2 + 584);
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v259, (uint64_t *)(a2 + 584));
        if (v267 == 4)
        {
          v105 = *(unsigned int *)(a2 + 596);
          v106 = ~(unint64_t)v268;
          v139 = __CFADD__(v106, v105);
          v107 = v106 + v105;
          if (!v139)
          {
            __break(0xC471u);
            JUMPOUT(0x198F3C5D8);
          }
          v108 = (JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)*(unsigned int *)(*v104 + 1232 * v107 + 1072);
          if (((_DWORD)v108 - 5) > 0xFFFFFFFD)
          {
            JSC::Wasm::BBQJITImpl::BBQJIT::addDelegateToUnreachable(&v257, *(JSC::Wasm::BBQJITImpl::BBQJIT::ControlData **)(a2 + 48), v108, *(_DWORD *)(*v104 + 1232 * v107 + 1224), &v266);
            if (!BYTE8(v257))
            {
              std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v257, v109, v110, v111, v112, v113, v114, v115);
              *(_QWORD *)&v257 = v258;
              *((_QWORD *)&v257 + 1) = 16;
              JSC::Wasm::BBQJITImpl::BBQJIT::addEndToUnreachable(&v255, *(_QWORD *)(a2 + 48), (unint64_t)&v259, (uint64_t)&v257, 1, v116, v117, v118);
              v126 = v256;
              if (v256)
              {
                v253 = v255;
                v255 = 0;
                *(_QWORD *)a1 = v253;
                *(_BYTE *)(a1 + 8) = 1;
                std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v255, v119, v120, v121, v122, v123, v124, v125);
              }
              else
              {
                std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v255, v119, v120, v121, v122, v123, v124, v125);
                WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::swap(a2 + 56, (uint64_t)&v259);
              }
              v134 = v257;
              if (v258 != (_BYTE *)v257 && (_QWORD)v257)
              {
                *(_QWORD *)&v257 = 0;
                DWORD2(v257) = 0;
                WTF::fastFree(v134, v127, v128, v129, v130, v131, v132, v133);
              }
              JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry::~ControlEntry((uint64_t)&v259, v127, v128, v129, v130, v131, v132, v133);
              if (v126)
                return;
              v103 = *(_DWORD *)(v12 + 16);
LABEL_107:
              *(_DWORD *)(v12 + 16) = v103 - 1;
              goto LABEL_22;
            }
            v252 = v257;
            *(_QWORD *)&v257 = 0;
            *(_QWORD *)a1 = v252;
            *(_BYTE *)(a1 + 8) = 1;
            std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v257, v109, v110, v111, v112, v113, v114, v115);
LABEL_489:
            JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry::~ControlEntry((uint64_t)&v259, v244, v245, v246, v247, v248, v249, v250);
            return;
          }
          JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [34]>((void (***)(WTF::StringPrintStream *__hidden))&v257);
        }
        else
        {
          JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [35]>((void (***)(WTF::StringPrintStream *__hidden))&v257);
        }
        *(_QWORD *)a1 = v257;
        *(_BYTE *)(a1 + 8) = 1;
        goto LABEL_489;
      case 0x19:
        if (*(_DWORD *)(a2 + 20640) >= 2u)
          goto LABEL_22;
        v157 = *(unsigned int *)(a2 + 596);
        if (!(_DWORD)v157)
        {
          __break(0xC471u);
          JUMPOUT(0x198F3C5E0);
        }
        v158 = v157 - 1;
        v159 = *(_QWORD *)(a2 + 584);
        *(_DWORD *)(a2 + 20640) = 0;
        v259 = (WTF *)v261;
        v260 = 16;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=(a2 + 56, &v259, a3, a4, a5, a6, a7, a8);
        v167 = v259;
        if (v261 != (_BYTE *)v259 && v259)
        {
          v259 = 0;
          LODWORD(v260) = 0;
          WTF::fastFree((unint64_t)v167, v160, v161, v162, v163, v164, v165, v166);
        }
        v168 = v159 + 1232 * v158;
        v169 = v168 + 1064;
        v170 = *(_DWORD *)(v168 + 1072);
        if (v170 != 4 && (v170 != 5 || *(_DWORD *)(v169 + 12) != 0))
        {
LABEL_477:
          JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [38]>((void (***)(WTF::StringPrintStream *__hidden))&v259);
          goto LABEL_241;
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::addCatchAllToUnreachable((JSC::Wasm::BBQJITImpl::BBQJIT *)&v259, *(JSC::Wasm::BBQJITImpl::BBQJIT::ControlData **)(a2 + 48), v169);
LABEL_51:
        if (!(_BYTE)v260)
        {
          v89 = &v259;
          goto LABEL_53;
        }
LABEL_203:
        v228 = v259;
        v259 = 0;
        *(_QWORD *)a1 = v228;
        *(_BYTE *)(a1 + 8) = 1;
        v229 = &v259;
        goto LABEL_204;
      case 0x1C:
        JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseAnnotatedSelectImmediates(&v257, a2, (uint64_t)&v259, a9, *(float *)&a10);
        if (!BYTE8(v257))
        {
          v89 = (WTF **)&v257;
LABEL_53:
          std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v89, v55, v56, v57, v58, v59, v60, v61);
          goto LABEL_22;
        }
        v239 = v257;
        *(_QWORD *)&v257 = 0;
        *(_QWORD *)a1 = v239;
        *(_BYTE *)(a1 + 8) = 1;
        v229 = (WTF **)&v257;
LABEL_204:
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v229, v55, v56, v57, v58, v59, v60, v61);
        return;
      case 0x20:
        LODWORD(v257) = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseIndexForLocal(&v259, a2, (unsigned int *)&v257, a9, *(float *)&a10);
        if ((_BYTE)v260)
          goto LABEL_203;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v259, v55, v56, v57, v58, v59, v60, v61);
        JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::checkLocalInitialized((uint64_t)&v259, a2, v257, v135, v136);
        goto LABEL_51;
      case 0x21:
      case 0x22:
        LODWORD(v257) = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseIndexForLocal(&v259, a2, (unsigned int *)&v257, a9, *(float *)&a10);
        if ((_BYTE)v260)
          goto LABEL_203;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v259, v55, v56, v57, v58, v59, v60, v61);
        JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::pushLocalInitialized(a2, v257);
        goto LABEL_22;
      case 0x23:
      case 0x24:
        JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseIndexForGlobal(&v259, (unint64_t *)a2, (unsigned int *)&v257, a9, *(float *)&a10);
        goto LABEL_51;
      case 0x25:
      case 0x26:
        LODWORD(v257) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
          goto LABEL_22;
        v86 = "can't parse table index";
        v87 = (unint64_t *)a2;
        v88 = 24;
        goto LABEL_310;
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
        LODWORD(v257) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
        {
          if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
            goto LABEL_22;
          v69 = "can't get second immediate for ";
          v70 = (unint64_t *)a2;
          v71 = 32;
        }
        else
        {
          v69 = "can't get first immediate for ";
          v70 = (unint64_t *)a2;
          v71 = 31;
        }
LABEL_249:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::Wasm::OpType,WTF::ASCIILiteral>(v69, v70, v71, " in unreachable context", 24, &v259, v68);
        goto LABEL_241;
      case 0x3F:
      case 0x40:
        v85 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
        {
          v86 = "can't parse reserved byte for grow_memory/current_memory";
          v87 = (unint64_t *)a2;
          v88 = 57;
        }
        else
        {
          *(_QWORD *)a2 = v85 + 1;
          if (!*(_BYTE *)(*(_QWORD *)(a2 + 8) + v85))
            goto LABEL_22;
          v86 = "reserved byte for grow_memory/current_memory must be zero";
          v87 = (unint64_t *)a2;
          v88 = 58;
        }
        goto LABEL_310;
      case 0x41:
        LODWORD(v257) = 0;
        if (!WTF::LEBDecoder::decodeInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (int *)&v257))
          goto LABEL_93;
        goto LABEL_37;
      case 0x42:
        v259 = 0;
        if (WTF::LEBDecoder::decodeInt64(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (uint64_t *)&v259))
          goto LABEL_37;
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::Wasm::OpType,WTF::ASCIILiteral>("can't get immediate for ", (unint64_t *)a2, 25, " in unreachable context", 24, &v257, v91);
        goto LABEL_483;
      case 0x43:
        v102 = *(_QWORD *)a2 + 4;
        if (*(_QWORD *)(a2 + 16) >= v102)
          goto LABEL_137;
        v86 = "can't parse 32-bit floating-point constant";
        goto LABEL_309;
      case 0x44:
        v102 = *(_QWORD *)a2 + 8;
        if (*(_QWORD *)(a2 + 16) >= v102)
        {
LABEL_137:
          *(_QWORD *)a2 = v102;
          goto LABEL_22;
        }
        v86 = "can't parse 64-bit floating-point constant";
LABEL_309:
        v87 = (unint64_t *)a2;
        v88 = 43;
        goto LABEL_310;
      case 0xD2:
        LODWORD(v257) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
          goto LABEL_37;
LABEL_93:
        v69 = "can't get immediate for ";
        v70 = (unint64_t *)a2;
        v71 = 25;
        goto LABEL_249;
      case 0xD5:
      case 0xD6:
        v84 = 0;
LABEL_50:
        JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseBranchTarget(&v259, a2, (unsigned int *)&v257, v84, a9, *(float *)&a10, a5, a6, a7);
        goto LABEL_51;
      case 0xFB:
        if (BYTE2(dword_1ECF4C7B0))
        {
          LODWORD(v255) = 0;
          v147 = WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v255);
          if (v147)
          {
            v149 = v255;
            if (BYTE5(qword_1ECF4C789))
            {
              v240 = JSC::Wasm::WasmOpcodeCounter::singleton((JSC::Wasm::WasmOpcodeCounter *)v147);
              JSC::Wasm::WasmOpcodeCounter::increment((uint64_t)v240, v149);
            }
            switch(v149)
            {
              case 0:
                v230 = "struct.new";
                v231 = (unint64_t *)a2;
                v232 = 11;
                goto LABEL_220;
              case 1:
                v230 = "struct.new_default";
                v231 = (unint64_t *)a2;
                v232 = 19;
LABEL_220:
                JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseStructTypeIndex(&v259, v231, &v257, v230, v232, v148, *(float *)&a10);
                goto LABEL_51;
              case 2:
                v233 = "struct.get";
                goto LABEL_218;
              case 5:
                v233 = "struct.set";
LABEL_218:
                JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseStructTypeIndexAndFieldIndex((uint64_t)&v259, (unint64_t *)a2, (unsigned int *)&v257, v233, 11, v148, *(float *)&a10);
                goto LABEL_51;
              case 6:
                LODWORD(v257) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
                  goto LABEL_37;
                v86 = "can't get type index immediate for array.new in unreachable context";
                goto LABEL_471;
              case 7:
                LODWORD(v257) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
                  goto LABEL_37;
                v86 = "can't get type index immediate for array.new_default in unreachable context";
                goto LABEL_230;
              case 11:
                LODWORD(v257) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
                  goto LABEL_37;
                v86 = "can't get type index immediate for array.get in unreachable context";
                goto LABEL_471;
              case 12:
                LODWORD(v257) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
                  goto LABEL_37;
                v86 = "can't get type index immediate for array.get_s in unreachable context";
                goto LABEL_215;
              case 13:
                LODWORD(v257) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
                  goto LABEL_37;
                v86 = "can't get type index immediate for array.get_u in unreachable context";
LABEL_215:
                v87 = (unint64_t *)a2;
                v88 = 70;
                goto LABEL_310;
              case 14:
                LODWORD(v257) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
                  goto LABEL_37;
                v86 = "can't get type index immediate for array.set in unreachable context";
                goto LABEL_471;
              case 15:
              case 28:
              case 29:
              case 30:
                goto LABEL_22;
              case 16:
                LODWORD(v257) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
                  goto LABEL_37;
                v86 = "can't get type index immediate for array.fill in unreachable context";
                v87 = (unint64_t *)a2;
                v88 = 69;
                goto LABEL_310;
              case 17:
                LODWORD(v257) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
                {
                  if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
                    goto LABEL_22;
                  v86 = "can't get second type index immediate for array.copy in unreachable context";
LABEL_230:
                  v87 = (unint64_t *)a2;
                  v88 = 76;
                }
                else
                {
                  v86 = "can't get first type index immediate for array.copy in unreachable context";
                  v87 = (unint64_t *)a2;
                  v88 = 75;
                }
                goto LABEL_310;
              case 18:
                LODWORD(v257) = 0;
                if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
                {
                  v86 = "can't get first type index immediate for array.init_data in unreachable context";
                  goto LABEL_501;
                }
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
                  goto LABEL_22;
                v86 = "can't get second type index immediate for array.init_data in unreachable context";
                goto LABEL_238;
              case 19:
                LODWORD(v257) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
                {
                  if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
                    goto LABEL_22;
                  v86 = "can't get second type index immediate for array.init_elem in unreachable context";
LABEL_238:
                  v87 = (unint64_t *)a2;
                  v88 = 81;
                }
                else
                {
                  v86 = "can't get first type index immediate for array.init_elem in unreachable context";
LABEL_501:
                  v87 = (unint64_t *)a2;
                  v88 = 80;
                }
                goto LABEL_310;
              case 20:
              case 21:
              case 22:
              case 23:
                if ((v149 & 0xFFFFFFFE) == 0x16)
                  v150 = "ref.cast";
                else
                  v150 = "ref.test";
                if (!BYTE1(dword_1ECF4C7B0))
                  goto LABEL_240;
                v151 = *(_QWORD *)(a2 + 20592);
                LODWORD(v259) = 0;
                if (!WTF::LEBDecoder::decodeInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (int *)&v259))goto LABEL_240;
                if ((v259 & 0x80000000) != 0)
                {
                  v234 = (int)v259 + 22;
                  if (v234 <= 9 && (((1 << v234) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
                    goto LABEL_22;
                }
                else if (v259 < *(_DWORD *)(v151 + 100)
                       || *(_BYTE *)(a2 + 32)
                       && v259 >= *(_DWORD *)(a2 + 36)
                       && v259 < *(_DWORD *)(a2 + 40))
                {
                  goto LABEL_22;
                }
LABEL_240:
                JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get heap type for ", (unint64_t *)a2, 25, v150, 9, &v259, *(float *)&a10);
                goto LABEL_241;
              default:
                v95 = v255;
                v225 = "invalid extended GC op ";
                v226 = (unint64_t *)a2;
                v227 = 24;
                goto LABEL_201;
            }
          }
          v86 = "can't parse extended GC opcode";
          v87 = (unint64_t *)a2;
          v88 = 31;
        }
        else
        {
          v86 = "Wasm GC is not enabled";
          v87 = (unint64_t *)a2;
          v88 = 23;
        }
        goto LABEL_310;
      case 0xFC:
        LODWORD(v255) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v255))
        {
          v95 = v255;
          switch((int)v255)
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
              goto LABEL_22;
            case 8:
              JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseMemoryInitImmediates((uint64_t)&v259, (unint64_t *)a2, &v257, v99, *(float *)&a10);
              goto LABEL_51;
            case 9:
              JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseDataSegmentIndex(&v259, (unint64_t *)a2, (unsigned int *)&v257, v99, *(float *)&a10);
              goto LABEL_51;
            case 10:
              JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseMemoryCopyImmediates((uint64_t)&v259, (unint64_t *)a2, v99, *(float *)&a10);
              goto LABEL_51;
            case 11:
              JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseMemoryFillImmediate((uint64_t)&v259, (unint64_t *)a2, v99, *(float *)&a10);
              goto LABEL_51;
            case 12:
              JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseTableInitImmediates((uint64_t)&v259, (unint64_t *)a2, &v257, v99, *(float *)&a10);
              goto LABEL_51;
            case 13:
              JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseElementIndex((uint64_t)&v259, (unint64_t *)a2, (unsigned int *)&v257, v99, *(float *)&a10);
              goto LABEL_51;
            case 14:
              JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseTableCopyImmediates(&v259, (unint64_t *)a2, &v257, v99, *(float *)&a10);
              goto LABEL_51;
            case 15:
            case 16:
            case 17:
              JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseTableIndex((uint64_t)&v259, (unint64_t *)a2, (unsigned int *)&v257, v99, *(float *)&a10);
              goto LABEL_51;
            default:
              v225 = "invalid extended 0xfc op ";
              goto LABEL_200;
          }
        }
        v86 = "can't parse extended 0xfc opcode";
        v87 = (unint64_t *)a2;
        v88 = 33;
        goto LABEL_310;
      case 0xFD:
        if (!HIBYTE(dword_1ECF4C7B0))
        {
          v86 = "wasm-simd is not enabled";
          goto LABEL_485;
        }
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + 1292) = 1;
        LODWORD(v257) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
        {
          v95 = v257;
          switch((int)v257)
          {
            case 0:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 40;
              goto LABEL_457;
            case 1:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 50;
              goto LABEL_457;
            case 2:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 14;
              goto LABEL_457;
            case 3:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 13;
              goto LABEL_457;
            case 4:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 61;
              goto LABEL_457;
            case 5:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 27;
              goto LABEL_457;
            case 6:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 37;
              goto LABEL_457;
            case 7:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 34;
              goto LABEL_457;
            case 8:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 56;
              goto LABEL_457;
            case 9:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 35;
              goto LABEL_457;
            case 10:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 70;
              goto LABEL_457;
            case 11:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 7;
              goto LABEL_457;
            case 12:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 19;
              goto LABEL_457;
            case 13:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 41;
              goto LABEL_294;
            case 14:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 52;
              goto LABEL_294;
            case 15:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 12;
              goto LABEL_294;
            case 16:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 12;
              goto LABEL_304;
            case 17:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 12;
              goto LABEL_301;
            case 18:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 12;
              goto LABEL_291;
            case 19:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 12;
              goto LABEL_274;
            case 20:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 12;
              goto LABEL_276;
            case 21:
            case 22:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 65;
              goto LABEL_294;
            case 23:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 66;
              goto LABEL_294;
            case 24:
            case 25:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 65;
              goto LABEL_304;
            case 26:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 66;
              goto LABEL_304;
            case 27:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 65;
              goto LABEL_301;
            case 28:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 66;
              goto LABEL_301;
            case 29:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 65;
              goto LABEL_291;
            case 30:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 66;
              goto LABEL_291;
            case 31:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 65;
              goto LABEL_274;
            case 32:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 66;
              goto LABEL_274;
            case 33:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 65;
              goto LABEL_276;
            case 34:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 66;
              goto LABEL_276;
            case 35:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 33;
              goto LABEL_294;
            case 36:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 22;
              goto LABEL_294;
            case 37:
            case 38:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 30;
              goto LABEL_294;
            case 39:
            case 40:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 4;
              goto LABEL_294;
            case 41:
            case 42:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 59;
              goto LABEL_294;
            case 43:
            case 44:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 15;
              goto LABEL_294;
            case 45:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 33;
              goto LABEL_304;
            case 46:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 22;
              goto LABEL_304;
            case 47:
            case 48:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 30;
              goto LABEL_304;
            case 49:
            case 50:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 4;
              goto LABEL_304;
            case 51:
            case 52:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 59;
              goto LABEL_304;
            case 53:
            case 54:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 15;
              goto LABEL_304;
            case 55:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 33;
              goto LABEL_301;
            case 56:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 22;
              goto LABEL_301;
            case 57:
            case 58:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 30;
              goto LABEL_301;
            case 59:
            case 60:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 4;
              goto LABEL_301;
            case 61:
            case 62:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 59;
              goto LABEL_301;
            case 63:
            case 64:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 15;
              goto LABEL_301;
            case 65:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 33;
              goto LABEL_274;
            case 66:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 22;
              goto LABEL_274;
            case 67:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 30;
              goto LABEL_274;
            case 68:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 4;
              goto LABEL_274;
            case 69:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 59;
              goto LABEL_274;
            case 70:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 15;
              goto LABEL_274;
            case 71:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 33;
              goto LABEL_276;
            case 72:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 22;
              goto LABEL_276;
            case 73:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 30;
              goto LABEL_276;
            case 74:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 4;
              goto LABEL_276;
            case 75:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 59;
              goto LABEL_276;
            case 76:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 15;
              goto LABEL_276;
            case 77:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 0;
              goto LABEL_457;
            case 78:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 6;
              goto LABEL_457;
            case 79:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 3;
              goto LABEL_457;
            case 80:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 60;
              goto LABEL_457;
            case 81:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 9;
              goto LABEL_457;
            case 82:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 72;
              goto LABEL_457;
            case 83:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 44;
              goto LABEL_457;
            case 84:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 16;
              goto LABEL_457;
            case 85:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 2;
              goto LABEL_457;
            case 86:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 46;
              goto LABEL_457;
            case 87:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 71;
              goto LABEL_457;
            case 88:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 8;
              goto LABEL_457;
            case 89:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 48;
              goto LABEL_457;
            case 90:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 25;
              goto LABEL_457;
            case 91:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 29;
              goto LABEL_457;
            case 92:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 64;
              goto LABEL_457;
            case 93:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 36;
LABEL_457:
              v238 = 0;
              goto LABEL_305;
            case 94:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 20;
              goto LABEL_276;
            case 95:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 38;
              goto LABEL_274;
            case 96:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 5;
              goto LABEL_294;
            case 97:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 75;
              goto LABEL_294;
            case 98:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 58;
              goto LABEL_294;
            case 99:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 57;
              goto LABEL_294;
            case 100:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 74;
              goto LABEL_294;
            case 101:
            case 102:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 39;
              goto LABEL_304;
            case 103:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 45;
              goto LABEL_274;
            case 104:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 55;
              goto LABEL_274;
            case 105:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 10;
              goto LABEL_274;
            case 106:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 49;
              goto LABEL_274;
            case 107:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 17;
              goto LABEL_294;
            case 108:
            case 109:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 68;
              goto LABEL_294;
            case 110:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 69;
              goto LABEL_294;
            case 111:
            case 112:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 1;
              goto LABEL_294;
            case 113:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 73;
              goto LABEL_294;
            case 114:
            case 115:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 42;
              goto LABEL_294;
            case 116:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 45;
              goto LABEL_276;
            case 117:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 55;
              goto LABEL_276;
            case 118:
            case 119:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 32;
              goto LABEL_294;
            case 120:
            case 121:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 43;
              goto LABEL_294;
            case 122:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 10;
              goto LABEL_276;
            case 123:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 31;
              goto LABEL_294;
            case 124:
            case 125:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 62;
              goto LABEL_294;
            case 126:
            case 127:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 62;
              goto LABEL_304;
            case 128:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 5;
              goto LABEL_304;
            case 129:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 75;
              goto LABEL_304;
            case 130:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 76;
              goto LABEL_304;
            case 131:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 57;
              goto LABEL_304;
            case 132:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 74;
              goto LABEL_304;
            case 133:
            case 134:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 39;
              goto LABEL_301;
            case 135:
            case 137:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 67;
              goto LABEL_304;
            case 136:
            case 138:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 28;
              goto LABEL_304;
            case 139:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 17;
              goto LABEL_304;
            case 140:
            case 141:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 68;
              goto LABEL_304;
            case 142:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 69;
              goto LABEL_304;
            case 143:
            case 144:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 1;
              goto LABEL_304;
            case 145:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 73;
              goto LABEL_304;
            case 146:
            case 147:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 42;
              goto LABEL_304;
            case 148:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 49;
              goto LABEL_276;
            case 149:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 47;
              goto LABEL_304;
            case 150:
            case 151:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 32;
              goto LABEL_304;
            case 152:
            case 153:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 43;
              goto LABEL_304;
            case 155:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 31;
              goto LABEL_304;
            case 156:
            case 158:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 51;
              goto LABEL_304;
            case 157:
            case 159:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 11;
LABEL_304:
              v238 = 2;
              goto LABEL_305;
            case 160:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 5;
              goto LABEL_301;
            case 161:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 75;
              goto LABEL_301;
            case 163:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 57;
              goto LABEL_301;
            case 164:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 74;
              goto LABEL_301;
            case 167:
            case 169:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 67;
              goto LABEL_301;
            case 168:
            case 170:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 28;
              goto LABEL_301;
            case 171:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 17;
              goto LABEL_301;
            case 172:
            case 173:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 68;
              goto LABEL_301;
            case 174:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 69;
              goto LABEL_301;
            case 177:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 73;
              goto LABEL_301;
            case 181:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 47;
              goto LABEL_301;
            case 182:
            case 183:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 32;
              goto LABEL_301;
            case 184:
            case 185:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 43;
              goto LABEL_301;
            case 186:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 18;
              goto LABEL_301;
            case 188:
            case 190:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 51;
              goto LABEL_301;
            case 189:
            case 191:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 11;
              goto LABEL_301;
            case 192:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 5;
              goto LABEL_291;
            case 193:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 75;
              goto LABEL_291;
            case 195:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 57;
              goto LABEL_291;
            case 196:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 74;
              goto LABEL_291;
            case 199:
            case 201:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 67;
              goto LABEL_291;
            case 200:
            case 202:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 28;
              goto LABEL_291;
            case 203:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 17;
              goto LABEL_291;
            case 204:
            case 205:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 68;
              goto LABEL_291;
            case 206:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 69;
              goto LABEL_291;
            case 209:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 73;
              goto LABEL_291;
            case 213:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 47;
              goto LABEL_291;
            case 214:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 33;
              goto LABEL_291;
            case 215:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 22;
              goto LABEL_291;
            case 216:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 30;
              goto LABEL_291;
            case 217:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 4;
              goto LABEL_291;
            case 218:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 59;
              goto LABEL_291;
            case 219:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 15;
              goto LABEL_291;
            case 220:
            case 222:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 51;
              goto LABEL_291;
            case 221:
            case 223:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 11;
LABEL_291:
              v238 = 4;
              goto LABEL_305;
            case 224:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 5;
              goto LABEL_274;
            case 225:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 75;
              goto LABEL_274;
            case 227:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 23;
              goto LABEL_274;
            case 228:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 69;
              goto LABEL_274;
            case 229:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 73;
              goto LABEL_274;
            case 230:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 47;
              goto LABEL_274;
            case 231:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 53;
              goto LABEL_274;
            case 232:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 32;
              goto LABEL_274;
            case 233:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 43;
              goto LABEL_274;
            case 234:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 24;
              goto LABEL_274;
            case 235:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 26;
              goto LABEL_274;
            case 236:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 5;
              goto LABEL_276;
            case 237:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 75;
              goto LABEL_276;
            case 239:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 23;
              goto LABEL_276;
            case 240:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 69;
              goto LABEL_276;
            case 241:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 73;
              goto LABEL_276;
            case 242:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 47;
              goto LABEL_276;
            case 243:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 53;
              goto LABEL_276;
            case 244:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 32;
              goto LABEL_276;
            case 245:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 43;
              goto LABEL_276;
            case 246:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 24;
              goto LABEL_276;
            case 247:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 26;
              goto LABEL_276;
            case 248:
            case 249:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 63;
              goto LABEL_274;
            case 250:
            case 251:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 21;
              goto LABEL_301;
            case 252:
            case 253:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 63;
              goto LABEL_276;
            case 254:
            case 255:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 54;
LABEL_301:
              v238 = 3;
              goto LABEL_305;
            case 256:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 77;
LABEL_294:
              v238 = 1;
              goto LABEL_305;
            case 257:
            case 258:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 78;
              goto LABEL_274;
            case 259:
            case 260:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 78;
              goto LABEL_276;
            case 261:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 79;
              goto LABEL_274;
            case 262:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 80;
LABEL_274:
              v238 = 5;
              goto LABEL_305;
            case 263:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 79;
              goto LABEL_276;
            case 264:
              v96 = a1;
              v97 = (unint64_t *)a2;
              v98 = 80;
LABEL_276:
              v238 = 6;
LABEL_305:
              JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::simd<false,void>(v96, v97, v98, v238, v92, a10, v93, v94);
              break;
            default:
              v225 = "invalid extended simd op ";
LABEL_200:
              v226 = (unint64_t *)a2;
              v227 = 26;
              goto LABEL_201;
          }
        }
        else
        {
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse wasm extended opcode", (unint64_t *)a2, 33, &v259, *(float *)&a10);
          *(_QWORD *)a1 = v259;
          *(_BYTE *)(a1 + 8) = 1;
        }
        return;
      case 0xFE:
        LODWORD(v255) = 0;
        if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v255))
        {
          v86 = "can't parse atomic extended opcode";
          v87 = (unint64_t *)a2;
          v88 = 35;
          goto LABEL_310;
        }
        v138 = v255;
        v139 = (v255 - 16) >= 0x3F && v255 >= 3;
        if (v139)
        {
          if ((_DWORD)v255 == 3)
          {
            v236 = *(_QWORD *)a2;
            if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
            {
              v86 = "can't get flags";
              v87 = (unint64_t *)a2;
              v88 = 16;
              goto LABEL_310;
            }
            *(_QWORD *)a2 = v236 + 1;
            v237 = *(_QWORD *)(a2 + 8);
            if (!*(_BYTE *)(v237 + v236))
              goto LABEL_22;
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char>("flags should be 0x0 but got ", (unint64_t *)a2, 29, *(unsigned __int8 *)(v237 + v236), &v259, *(float *)&a10);
          }
          else
          {
            v225 = "invalid extended atomic op ";
            v226 = (unint64_t *)a2;
            v227 = 28;
            v95 = v255;
LABEL_201:
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int>(v225, v226, v227, v95, &v259, *(float *)&a10);
          }
        }
        else
        {
          if (*(_DWORD *)(*(_QWORD *)(a2 + 20592) + 104) == -1)
          {
            v155 = "atomic instruction without memory";
            v156 = 34;
LABEL_482:
            v259 = (WTF *)v155;
            v260 = v156;
            JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v257, (uint64_t)&v259, v137, *(float *)&a10);
LABEL_483:
            v235 = (WTF *)v257;
            goto LABEL_242;
          }
          LODWORD(v257) = 0;
          v268 = 0;
          if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v257))
          {
            v86 = "can't get load alignment";
LABEL_485:
            v87 = (unint64_t *)a2;
            v88 = 25;
            goto LABEL_310;
          }
          v140 = v257;
          if (v140 != JSC::Wasm::memoryLog2Alignment())
          {
            v241 = 1 << v257;
            v242 = JSC::Wasm::memoryLog2Alignment();
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, v241, " does not match against atomic op's natural alignment ", 55, 1 << v242, &v259, v243);
            *(_QWORD *)a1 = v259;
            *(_BYTE *)(a1 + 8) = 1;
            return;
          }
          if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v268))
            goto LABEL_22;
          v141 = "can't get first immediate for atomic ";
          v142 = " in unreachable context";
          v143 = (unint64_t *)a2;
          v144 = 38;
          v145 = v138;
          v146 = 24;
LABEL_307:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(v141, v143, v144, v145, v142, v146, &v259, v101);
        }
        goto LABEL_241;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F3AF84);
    }
  }
  v13 = (int *)(a2 + 20640);
  v14 = *(_DWORD *)(a2 + 20640);
  if (v14 != 1)
  {
LABEL_21:
    *v13 = v14 - 1;
LABEL_22:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
    return;
  }
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v259, (uint64_t *)(a2 + 584));
  if (v267)
  {
    *(_QWORD *)&v257 = v258;
    *((_QWORD *)&v257 + 1) = 16;
    JSC::Wasm::BBQJITImpl::BBQJIT::addEndToUnreachable(&v255, *(_QWORD *)(a2 + 48), (unint64_t)&v259, (uint64_t)&v257, 1, v17, v18, v19);
    v27 = v256;
    if (v256)
    {
      v177 = v255;
      v255 = 0;
      *(_QWORD *)a1 = v177;
      *(_BYTE *)(a1 + 8) = 1;
      std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v255, v20, v21, v22, v23, v24, v25, v26);
    }
    v28 = v257;
    if (v258 != (_BYTE *)v257 && (_QWORD)v257)
    {
      *(_QWORD *)&v257 = 0;
      DWORD2(v257) = 0;
      WTF::fastFree(v28, v20, v21, v22, v23, v24, v25, v26);
    }
    if (v27)
      goto LABEL_8;
LABEL_16:
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::swap(a2 + 56, (uint64_t)&v259);
    v29 = 1;
    goto LABEL_17;
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::addElseToUnreachable((JSC::Wasm::BBQJITImpl::BBQJIT *)&v257, *(JSC::Wasm::BBQJITImpl::BBQJIT::ControlData **)(a2 + 48), (uint64_t)&v266, v15, v16, v17, v18, v19);
  if (!BYTE8(v257))
  {
    v38 = (WTF **)(a2 + 56);
    v37 = *(_QWORD *)(a2 + 56);
    v39 = (WTF *)(a2 + 72);
    if (v37 != a2 + 72)
    {
      if (v37)
      {
        *(_QWORD *)(a2 + 56) = 0;
        *(_DWORD *)(a2 + 64) = 0;
        WTF::fastFree(v37, v30, v31, v32, v33, v34, v35, v36);
      }
      *v38 = v39;
    }
    v40 = v262;
    if (v262 == (WTF *)v265)
    {
      v41 = v264;
      if (v264)
      {
        v72 = 32 * v264;
        do
        {
          v73 = *(_OWORD *)v40;
          v74 = *((_OWORD *)v40 + 1);
          v40 = (WTF *)((char *)v40 + 32);
          *(_OWORD *)v39 = v73;
          *((_OWORD *)v39 + 1) = v74;
          v39 = (WTF *)((char *)v39 + 32);
          v72 -= 32;
        }
        while (v72);
      }
      v42 = v263;
    }
    else
    {
      v262 = (WTF *)v265;
      *v38 = v40;
      v42 = v263;
      v263 = 16;
      v41 = v264;
    }
    v264 = 0;
    *(_DWORD *)(a2 + 64) = v42;
    *(_DWORD *)(a2 + 68) = v41;
    JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::unify((uint64_t)&v257, a2, v266, v32, v33, v34, v35, v36);
    if (!BYTE8(v257))
    {
      JSC::Wasm::BBQJITImpl::BBQJIT::addEndToUnreachable(&v257, *(_QWORD *)(a2 + 48), (unint64_t)&v259, a2 + 56, 0, v34, v35, v36);
      if (!BYTE8(v257))
        goto LABEL_16;
    }
  }
  v90 = v257;
  *(_QWORD *)&v257 = 0;
  *(_QWORD *)a1 = v90;
  *(_BYTE *)(a1 + 8) = 1;
  std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v257, (WTF::AtomStringImpl *)v30, v31, v32, v33, v34, v35, v36);
LABEL_8:
  v29 = 0;
LABEL_17:
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::~ControlData((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)&v266, v20, v21, v22, v23, v24, v25, v26);
  v50 = v262;
  if (v265 != (_BYTE *)v262 && v262)
  {
    v262 = 0;
    v263 = 0;
    WTF::fastFree((unint64_t)v50, v43, v44, v45, v46, v47, v48, v49);
  }
  v51 = v259;
  if (v261 != (_BYTE *)v259)
  {
    if (v259)
    {
      v259 = 0;
      LODWORD(v260) = 0;
      WTF::fastFree((unint64_t)v51, v43, v44, v45, v46, v47, v48, v49);
    }
  }
  if (v29)
  {
    v14 = *v13;
    goto LABEL_21;
  }
}

#error "198F3CED8: too big function (funcsize=0)"

uint64_t JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry::ControlEntry(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  __int128 *v4;
  uint64_t v5;
  int v6;
  _OWORD *v7;
  __int128 *v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;

  v3 = (_OWORD *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 16;
  v4 = *(__int128 **)a2;
  if (*(_QWORD *)a2 == a2 + 16)
  {
    v5 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v5)
    {
      v12 = 32 * v5;
      do
      {
        v13 = *v4;
        v14 = v4[1];
        v4 += 2;
        *v3 = v13;
        v3[1] = v14;
        v3 += 2;
        v12 -= 32;
      }
      while (v12);
    }
  }
  else
  {
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)a1 = v4;
    v18 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 16;
    *(_DWORD *)(a1 + 8) = v18;
  }
  v6 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  v7 = (_OWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 528) = a1 + 544;
  *(_QWORD *)(a1 + 536) = 16;
  v8 = *(__int128 **)(a2 + 528);
  if (v8 == (__int128 *)(a2 + 544))
  {
    v9 = *(unsigned int *)(a2 + 540);
    if ((_DWORD)v9)
    {
      v15 = 32 * v9;
      do
      {
        v16 = *v8;
        v17 = v8[1];
        v8 += 2;
        *v7 = v16;
        v7[1] = v17;
        v7 += 2;
        v15 -= 32;
      }
      while (v15);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 528) = a2 + 544;
    *(_QWORD *)(a1 + 528) = v8;
    v19 = *(_DWORD *)(a2 + 536);
    *(_DWORD *)(a2 + 536) = 16;
    *(_DWORD *)(a1 + 536) = v19;
  }
  v10 = *(_DWORD *)(a2 + 540);
  *(_DWORD *)(a2 + 540) = 0;
  *(_DWORD *)(a1 + 540) = v10;
  *(_DWORD *)(a1 + 1056) = *(_DWORD *)(a2 + 1056);
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::ControlData(a1 + 1064, a2 + 1064);
  return a1;
}

uint64_t WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry::ControlEntry(*(_QWORD *)a1 + 1232 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::ControlData(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  int *v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  const void *v34;
  size_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = (_DWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 2;
  v5 = *(int **)(a2 + 16);
  if (v5 == (int *)(a2 + 32))
  {
    v6 = *(unsigned int *)(a2 + 28);
    if ((_DWORD)v6)
    {
      v24 = 4 * v6;
      do
      {
        v25 = *v5++;
        *v4++ = v25;
        v24 -= 4;
      }
      while (v24);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 16) = a2 + 32;
    *(_QWORD *)(a1 + 16) = v5;
    v28 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 2;
    *(_DWORD *)(a1 + 24) = v28;
  }
  v7 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 28) = v7;
  v8 = (_DWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = a1 + 56;
  *(_QWORD *)(a1 + 48) = 2;
  v9 = *(int **)(a2 + 40);
  if (v9 == (int *)(a2 + 56))
  {
    v10 = *(unsigned int *)(a2 + 52);
    if ((_DWORD)v10)
    {
      v26 = 4 * v10;
      do
      {
        v27 = *v9++;
        *v8++ = v27;
        v26 -= 4;
      }
      while (v26);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 40) = a2 + 56;
    *(_QWORD *)(a1 + 40) = v9;
    v29 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 2;
    *(_DWORD *)(a1 + 48) = v29;
  }
  v11 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a1 + 52) = v11;
  v12 = a1 + 80;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 2;
  v13 = *(_QWORD *)(a2 + 64);
  if (v13 == a2 + 80)
  {
    v15 = *(_DWORD *)(a2 + 76);
    if (v15)
    {
      v16 = v13 + 12 * v15;
      do
      {
        *(_DWORD *)v12 = *(_DWORD *)v13;
        *(_QWORD *)(v12 + 4) = *(_QWORD *)(v13 + 4);
        v13 += 12;
        v12 += 12;
      }
      while (v13 != v16);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 64) = a2 + 80;
    *(_QWORD *)(a1 + 64) = v13;
    v14 = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a2 + 72) = 2;
    *(_DWORD *)(a1 + 72) = v14;
  }
  v17 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_DWORD *)(a1 + 76) = v17;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v18 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 104) = v18;
  LODWORD(v18) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 112) = v18;
  v19 = *(_QWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_QWORD *)(a1 + 116) = v19;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = 0x8000000000000000;
  v21 = (uint64_t *)(a2 + 144);
  v20 = *(_QWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  if ((v20 & 0x8000000000000000) == 0 && v20 >= 2)
  {
    v30 = *(_QWORD *)(2 * v20) + 63;
    v31 = v30 & 0xFFFFFFFFFFFFFFC0;
    v32 = WTF::fastMalloc((WTF *)(((v30 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
    *(_QWORD *)v32 = v31;
    v33 = (_QWORD *)(2 * *v21);
    if (*v21 >= 0)
      v34 = v33 + 1;
    else
      v34 = (const void *)(a2 + 144);
    if (*v21 < 0)
      v35 = 8;
    else
      v35 = (unint64_t)(*v33 + 7) >> 3;
    memcpy((void *)(v32 + 8), v34, v35);
    v20 = v32 >> 1;
    v43 = *(_QWORD *)(a1 + 144);
    if (v43 >= 2)
      WTF::fastFree(2 * v43, v36, v37, v38, v39, v40, v41, v42);
  }
  *(_QWORD *)(a1 + 144) = v20;
  v22 = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v22;
  return a1;
}

unint64_t WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 1232 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(_QWORD *)a1;
    v4 = *(_QWORD *)a1 + 1232 * *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry>::move(v3, v4, *(_QWORD *)a1);
    if (a1 + 16 != v3 && v3 != 0)
    {
      if (*(_QWORD *)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

uint64_t WTF::VectorBuffer<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 0x11)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 16;
  }
  else
  {
    if (a2 >= 0x3531DF)
    {
      __break(0xC471u);
      JUMPOUT(0x198F5B708);
    }
    v3 = 1232 * a2;
    result = WTF::fastMalloc((WTF *)(1232 * a2));
    *(_DWORD *)(v2 + 8) = (v3 & 0xFFFFFFF0) / 0x4D0;
    *(_QWORD *)v2 = result;
  }
  return result;
}

void WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  int v40;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_QWORD *)a3 = a3 + 16;
      *(_QWORD *)(a3 + 8) = 16;
      v7 = v5 + 16;
      v6 = *(_QWORD *)v5;
      if (*(_QWORD *)v5 == v5 + 16)
      {
        v8 = *(unsigned int *)(v5 + 12);
        if ((_DWORD)v8)
        {
          v31 = 0;
          v32 = 32 * v8;
          do
          {
            v33 = a3 + v31;
            v34 = *(_OWORD *)(v6 + v31 + 16);
            *(_OWORD *)(v33 + 16) = *(_OWORD *)(v6 + v31);
            *(_OWORD *)(v33 + 32) = v34;
            v31 += 32;
          }
          while (v32 != v31);
        }
      }
      else
      {
        *(_QWORD *)v5 = v7;
        *(_QWORD *)a3 = v6;
        v39 = *(_DWORD *)(v5 + 8);
        *(_DWORD *)(v5 + 8) = 16;
        *(_DWORD *)(a3 + 8) = v39;
      }
      v9 = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 12) = v9;
      *(_QWORD *)(a3 + 528) = a3 + 544;
      *(_QWORD *)(a3 + 536) = 16;
      v10 = *(_QWORD *)(v5 + 528);
      v11 = v5 + 544;
      if (v10 == v5 + 544)
      {
        v12 = *(unsigned int *)(v5 + 540);
        if ((_DWORD)v12)
        {
          v35 = 0;
          v36 = 32 * v12;
          do
          {
            v37 = a3 + v35;
            v38 = *(_OWORD *)(v10 + v35 + 16);
            *(_OWORD *)(v37 + 544) = *(_OWORD *)(v10 + v35);
            *(_OWORD *)(v37 + 560) = v38;
            v35 += 32;
          }
          while (v36 != v35);
        }
      }
      else
      {
        *(_QWORD *)(v5 + 528) = v11;
        *(_QWORD *)(a3 + 528) = v10;
        v40 = *(_DWORD *)(v5 + 536);
        *(_DWORD *)(v5 + 536) = 16;
        *(_DWORD *)(a3 + 536) = v40;
      }
      v13 = *(_DWORD *)(v5 + 540);
      *(_DWORD *)(v5 + 540) = 0;
      *(_DWORD *)(a3 + 540) = v13;
      *(_DWORD *)(a3 + 1056) = *(_DWORD *)(v5 + 1056);
      JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::ControlData(a3 + 1064, v5 + 1064);
      JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::~ControlData((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)(v5 + 1064), v14, v15, v16, v17, v18, v19, v20);
      v28 = *(_QWORD *)(v5 + 528);
      if (v11 != v28 && v28 != 0)
      {
        *(_QWORD *)(v5 + 528) = 0;
        *(_DWORD *)(v5 + 536) = 0;
        WTF::fastFree(v28, v21, v22, v23, v24, v25, v26, v27);
      }
      v30 = *(_QWORD *)v5;
      if (v7 != *(_QWORD *)v5)
      {
        if (v30)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
          WTF::fastFree(v30, v21, v22, v23, v24, v25, v26, v27);
        }
      }
      a3 += 1232;
      v5 += 1232;
    }
    while (v5 != a2);
  }
}

uint64_t JSC::Wasm::BBQDisassembler::setOpcode(uint64_t a1, int a2, char a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;

  result = a1 + 8;
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v6 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 16))
  {
    result = WTF::Vector<std::tuple<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::Wasm::OpType,unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v6 + 1, (unint64_t)&v9);
    v6 = *(unsigned int *)(a1 + 20);
    v7 = *(_QWORD *)(a1 + 8) + 16 * v6;
    *(_DWORD *)v7 = *(_DWORD *)result;
    *(_BYTE *)(v7 + 4) = *(_BYTE *)(result + 4);
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(result + 8);
  }
  else
  {
    v8 = *(_QWORD *)result + 16 * v6;
    *(_DWORD *)v8 = a2;
    *(_BYTE *)(v8 + 4) = a3;
    *(_QWORD *)(v8 + 8) = a4;
  }
  *(_DWORD *)(a1 + 20) = v6 + 1;
  return result;
}

uint64_t WTF::Vector<std::tuple<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::Wasm::OpType,unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = v5 + 16 * *(unsigned int *)(a1 + 12);
    if (v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v11 = *(_QWORD *)a1;
        return v11 + 16 * ((uint64_t)(v3 - v5) >> 4);
      }
      if (!(v10 >> 28))
      {
        v11 = WTF::fastMalloc((WTF *)(16 * v10));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          v20 = v11 + v19;
          v21 = v5 + v19;
          *(_DWORD *)v20 = *(_DWORD *)(v5 + v19);
          *(_BYTE *)(v20 + 4) = *(_BYTE *)(v5 + v19 + 4);
          *(_QWORD *)(v20 + 8) = *(_QWORD *)(v5 + v19 + 8);
          v19 += 16;
        }
        while (v21 + 16 != v6);
        if (v5)
        {
          if (v11 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
          v11 = *(_QWORD *)a1;
        }
        return v11 + 16 * ((uint64_t)(v3 - v5) >> 4);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x198F5BAD4);
    }
  }
  v22 = *(unsigned int *)(a1 + 8);
  v23 = v22 + (v22 >> 2);
  if (v23 >= 0x10)
    v24 = v23 + 1;
  else
    v24 = 16;
  if (v24 <= a2)
    v25 = a2;
  else
    v25 = v24;
  if (v25 > v22)
  {
    if (v25 >> 28)
      goto LABEL_35;
    v26 = *(unsigned int *)(a1 + 12);
    v27 = WTF::fastMalloc((WTF *)(16 * v25));
    *(_DWORD *)(a1 + 8) = v25;
    *(_QWORD *)a1 = v27;
    if ((_DWORD)v26)
    {
      v35 = v27;
      v36 = v5;
      do
      {
        *(_DWORD *)v35 = *(_DWORD *)v36;
        *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
        *(_QWORD *)(v35 + 8) = *(_QWORD *)(v36 + 8);
        v36 += 16;
        v35 += 16;
      }
      while (v36 != v5 + 16 * v26);
    }
    if (v5)
    {
      if (v27 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v28, v29, v30, v31, v32, v33, v34);
    }
  }
  return v3;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseExceptionIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  unint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int v24;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v24 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse exception index", a2, 28, v22, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v22[0];
    goto LABEL_14;
  }
  v18 = *(unsigned int *)(a2[2574] + 84) + (unint64_t)*(unsigned int *)(a2[2574] + 68);
  if (v18 <= v11)
  {
    v22[0] = "exception index ";
    v22[1] = 17;
    v21[0] = " is invalid, limit is ";
    v21[1] = 23;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v23, (uint64_t)v22, &v24, (uint64_t)v21, &v20, a4, a5);
    v19 = v23;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseDelegateTarget(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, double a5, float a6)
{
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  unint64_t v24;
  unint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)a2;
  v9 = v7 > *(_QWORD *)a2;
  v10 = v7 - *(_QWORD *)a2;
  if (!v9)
    goto LABEL_20;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = *(_QWORD *)(a2 + 8);
  v16 = 5;
  if (v10 < 5)
    v16 = v10;
  v17 = v16 - 1;
  *(_QWORD *)a2 = v8 + 1;
  v18 = v15 + v8;
  v19 = v8 + 2;
  while (1)
  {
    v20 = *(char *)(v18 + v12);
    v14 |= (v20 & 0x7F) << v13;
    if ((v20 & 0x80000000) == 0)
      break;
    if (v17 == v12)
      goto LABEL_20;
    LOBYTE(v20) = v19 + v12;
    *(_QWORD *)a2 = v19 + v12;
    v13 += 7;
    if (v10 == ++v12)
    {
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v12 == 4 && v20 >= 0x10u)
  {
LABEL_20:
    v25 = (unint64_t *)a2;
    v26 = "can't get delegate target";
    v27 = 26;
LABEL_21:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v26, v25, v27, &v28, a6);
    goto LABEL_18;
  }
  v21 = *(_DWORD *)(a2 + 596);
  if (a4 && (v22 = a4 - 1, v23 = __CFADD__(v21, v22), v21 += v22, v23) || (v24 = v21 - 1, HIDWORD(v24)))
  {
    v25 = (unint64_t *)a2;
    v26 = "invalid control stack size";
    v27 = 27;
    goto LABEL_21;
  }
  if (v14 >= v24)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>("delegate target ", (unint64_t *)a2, 17, v14, " exceeds control stack size ", 29, v24, &v28, a6);
LABEL_18:
    *(_QWORD *)a1 = v28;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v14;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  int v43;
  int v44;

  v2 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v2)
    goto LABEL_26;
  v4 = v2 - 1;
  v5 = *a2;
  v6 = *a2 + 1232 * v4;
  v7 = (_OWORD *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 16;
  v8 = *(__int128 **)v6;
  if (*(_QWORD *)v6 == v6 + 16)
  {
    v9 = *(unsigned int *)(v6 + 12);
    if ((_DWORD)v9)
    {
      v37 = 32 * v9;
      do
      {
        v38 = *v8;
        v39 = v8[1];
        v8 += 2;
        *v7 = v38;
        v7[1] = v39;
        v7 += 2;
        v37 -= 32;
      }
      while (v37);
    }
  }
  else
  {
    *(_QWORD *)v6 = v6 + 16;
    *(_QWORD *)a1 = v8;
    v43 = *(_DWORD *)(v6 + 8);
    *(_DWORD *)(v6 + 8) = 16;
    *(_DWORD *)(a1 + 8) = v43;
    LODWORD(v9) = *(_DWORD *)(v6 + 12);
  }
  *(_DWORD *)(v6 + 12) = 0;
  *(_DWORD *)(a1 + 12) = v9;
  v10 = v5 + 1232 * v4;
  v11 = (_OWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 528) = a1 + 544;
  *(_QWORD *)(a1 + 536) = 16;
  v12 = *(__int128 **)(v10 + 528);
  if (v12 == (__int128 *)(v10 + 544))
  {
    v13 = *(unsigned int *)(v5 + 1232 * v4 + 540);
    if ((_DWORD)v13)
    {
      v40 = 32 * v13;
      do
      {
        v41 = *v12;
        v42 = v12[1];
        v12 += 2;
        *v11 = v41;
        v11[1] = v42;
        v11 += 2;
        v40 -= 32;
      }
      while (v40);
    }
  }
  else
  {
    *(_QWORD *)(v10 + 528) = v10 + 544;
    *(_QWORD *)(a1 + 528) = v12;
    v13 = v5 + 1232 * v4;
    v44 = *(_DWORD *)(v13 + 536);
    *(_DWORD *)(v13 + 536) = 16;
    *(_DWORD *)(a1 + 536) = v44;
    LODWORD(v13) = *(_DWORD *)(v13 + 540);
  }
  v14 = v5 + 1232 * v4;
  *(_DWORD *)(v14 + 540) = 0;
  *(_DWORD *)(a1 + 540) = v13;
  *(_DWORD *)(a1 + 1056) = *(_DWORD *)(v14 + 1056);
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::ControlData(a1 + 1064, v14 + 1064);
  v22 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v22)
  {
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x198F5BF58);
  }
  v23 = v22 - 1;
  v24 = *a2;
  v25 = *a2 + 1232 * (v22 - 1);
  JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::~ControlData((JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *)(v25 + 1064), v15, v16, v17, v18, v19, v20, v21);
  v33 = *(_QWORD *)(v25 + 528);
  if (v25 + 544 != v33 && v33 != 0)
  {
    *(_QWORD *)(v25 + 528) = 0;
    *(_DWORD *)(v24 + 1232 * v23 + 536) = 0;
    WTF::fastFree(v33, v26, v27, v28, v29, v30, v31, v32);
  }
  v35 = *(_QWORD *)v25;
  if (v25 + 16 != *(_QWORD *)v25 && v35 != 0)
  {
    *(_QWORD *)v25 = 0;
    *(_DWORD *)(v25 + 8) = 0;
    WTF::fastFree(v35, v26, v27, v28, v29, v30, v31, v32);
  }
  *((_DWORD *)a2 + 3) = v23;
}

void WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::swap(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  int v12;
  int v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  v4 = *(unsigned int *)(a2 + 12);
  v5 = *(__int128 **)a1;
  v6 = *(__int128 **)a2;
  v7 = a2 + 16;
  if (*(_QWORD *)a1 != a1 + 16)
  {
    if (v6 != (__int128 *)v7)
    {
      *(_QWORD *)a1 = v6;
      *(_QWORD *)a2 = v5;
      goto LABEL_10;
    }
    *(_QWORD *)a2 = v5;
    *(_QWORD *)a1 = a1 + 16;
    v8 = 0;
LABEL_24:
    WTF::VectorBuffer<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::FastMalloc>::swapInlineBuffer(a1, a2, v8, v4);
    goto LABEL_10;
  }
  v8 = *(unsigned int *)(a1 + 12);
  if (v6 != (__int128 *)v7)
  {
    *(_QWORD *)a1 = v6;
    *(_QWORD *)a2 = v7;
    v4 = 0;
    goto LABEL_24;
  }
  if (a1 != a2)
  {
    if (v4 >= v8)
      v9 = *(unsigned int *)(a1 + 12);
    else
      v9 = *(unsigned int *)(a2 + 12);
    if (v9)
    {
      v14 = *(__int128 **)a1;
      v15 = *(__int128 **)a2;
      v16 = v9;
      do
      {
        v18 = *v14;
        v17 = v14[1];
        v19 = v15[1];
        *v14 = *v15;
        v14[1] = v19;
        v14 += 2;
        *v15 = v18;
        v15[1] = v17;
        v15 += 2;
        --v16;
      }
      while (v16);
    }
    v10 = &v5[2 * v9];
    v11 = &v6[2 * v9];
    if (v8 > v4)
    {
      v20 = 32 * v8 - 32 * v9;
      v21 = v11;
      v22 = v10;
      do
      {
        v23 = *v22;
        v24 = v22[1];
        v22 += 2;
        *v21 = v23;
        v21[1] = v24;
        v21 += 2;
        v20 -= 32;
      }
      while (v20);
    }
    if (v4 > v8)
    {
      v25 = 32 * v4 - 32 * v9;
      do
      {
        v26 = *v11;
        v27 = v11[1];
        v11 += 2;
        *v10 = v26;
        v10[1] = v27;
        v10 += 2;
        v25 -= 32;
      }
      while (v25);
    }
  }
LABEL_10:
  v12 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = v12;
  v13 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v13;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::unify(uint64_t a1, uint64_t a2, JSC::Wasm::FunctionSignature *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  double v16;
  float v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  WTF::StringImpl *v40;
  const char *v41;
  uint64_t v42;
  void (**v43)(WTF::StringPrintStream *__hidden);

  v11 = *((_DWORD *)this + 3);
  if (*(_DWORD *)(a2 + 68) == v11)
  {
    if (v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while ((JSC::Wasm::isSubtype(*(_QWORD *)(*(_QWORD *)(a2 + 56) + v12), *(_QWORD *)(*(_QWORD *)(a2 + 56) + v12 + 8), *(_QWORD *)(*(_QWORD *)this + v13), *(_QWORD *)(*(_QWORD *)this + v13 + 8), a5, a6, a7, a8) & 1) != 0)
      {
        ++v14;
        v13 += 16;
        v12 += 32;
        if (v14 >= *((unsigned int *)this + 3))
          goto LABEL_3;
      }
      v41 = "control flow returns with unexpected type. ";
      v42 = 44;
      v39 = *(_OWORD *)(*(_QWORD *)(a2 + 56) + v12);
      v36 = " is not a ";
      v37 = 11;
      v34 = *(_OWORD *)(*(_QWORD *)this + v13);
      JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(&v43, a2, (uint64_t)&v41, (JSC::Wasm::Type *)&v39, (uint64_t)&v36, (JSC::Wasm::Type *)&v34, *(double *)&v34, v15);
      *(_QWORD *)a1 = v43;
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
LABEL_3:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
    }
  }
  else
  {
    v41 = " block with type: ";
    v42 = 19;
    JSC::Wasm::FunctionSignature::toString(this, (uint64_t *)&v40);
    *(_QWORD *)&v39 = " returns: ";
    *((_QWORD *)&v39 + 1) = 11;
    v38 = *((_DWORD *)this + 3);
    v36 = " but stack has: ";
    v37 = 17;
    v35 = *(unsigned int *)(a2 + 68);
    *(_QWORD *)&v34 = " values";
    *((_QWORD *)&v34 + 1) = 8;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(&v43, (uint64_t)&v41, (WTF::PrintStream *)&v40, (uint64_t)&v39, &v38, (uint64_t)&v36, &v35, (uint64_t)&v34, v16, v17);
    *(_QWORD *)a1 = v43;
    *(_BYTE *)(a1 + 8) = 1;
    v25 = v40;
    v40 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      }
      else
      {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseBlockSignatureAndNotifySIMDUseIfNeeded(_BYTE *a1, unint64_t *a2, unsigned __int8 ***a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 **v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  int v30;
  unint64_t v31;
  _BOOL4 v32;
  WTF::StringImpl *v34;
  float v35;
  unint64_t v36;
  unint64_t v37;
  char *String;
  uint64_t v39;
  float v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  unsigned __int8 v54;
  unint64_t v55;

  v6 = a2[2574];
  v7 = *a2;
  v8 = a2[2];
  if (v7 >= v8 || (v9 = *(char *)(a2[1] + v7), (v9 & 0x80000000) != 0))
  {
LABEL_34:
    v55 = 0;
    if (WTF::LEBDecoder::decodeInt64(a2[1], v8, (uint64_t *)a2, (uint64_t *)&v55))
    {
      if ((v55 & 0x8000000000000000) != 0)
      {
        v50 = "Block-like instruction signature index is negative";
        v51 = a2;
        v52 = 51;
      }
      else
      {
        v36 = *(unsigned int *)(v6 + 100);
        if (v55 >= v36)
        {
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,long long,WTF::ASCIILiteral,unsigned int>("Block-like instruction signature index is out of bounds. Index: ", a2, 65, v55, " type index space: ", 20, v36, &v53, v35);
LABEL_56:
          v23 = 1;
          goto LABEL_39;
        }
        v37 = JSC::Wasm::TypeDefinition::expand(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 8 * v55));
        v23 = *(_DWORD *)(v37 + 32);
        if (!v23)
        {
          *a3 = (unsigned __int8 **)(v37 + 8);
          LOBYTE(v53) = 0;
LABEL_39:
          v54 = v23;
          goto LABEL_8;
        }
        v50 = "Block-like instruction signature index does not refer to a function type definition";
        v51 = a2;
        v52 = 84;
      }
    }
    else
    {
      v50 = "Block-like instruction doesn't return value type but can't decode type section index";
      v51 = a2;
      v52 = 85;
    }
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v50, v51, v52, &v53, v35);
    goto LABEL_56;
  }
  v10 = v9 | (v9 >> 6 << 7);
  v11 = (char)(v9 | ((v9 >> 6) << 7));
  if ((JSC::Wasm::isValidTypeKind<signed char>(v11) & 1) == 0)
  {
    v8 = a2[2];
    goto LABEL_34;
  }
  if (!BYTE1(dword_1ECF4C7B0))
    goto LABEL_5;
  v31 = (char)v10 + 22;
  if (v31 <= 9)
  {
    if (((1 << v31) & 0x39F) == 0)
    {
LABEL_26:
      JSC::Wasm::ParserBase::parseReftypeSignature((uint64_t)a2, v6, a3, (uint64_t)&v53, v12);
      v23 = v54;
      goto LABEL_8;
    }
    v32 = BYTE2(dword_1ECF4C7B0) != 0;
  }
  else
  {
    v32 = 0;
  }
  if ((v10 + 29) < 2u || v32)
    goto LABEL_26;
LABEL_5:
  v13 = v10 - 192;
  if (v13 > 0x3F)
    goto LABEL_42;
  if (((1 << (v10 + 64)) & 0xF000000000000001) == 0)
  {
    if (((1 << (v10 + 64)) & 0x1800000000000) != 0)
    {
      if (!BYTE1(dword_1ECF4C7B0))
        goto LABEL_7;
    }
    else if (v13 == 59 && HIBYTE(dword_1ECF4C7B0))
    {
      goto LABEL_7;
    }
LABEL_42:
    String = (char *)JSC::Wasm::makeString(v11);
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>("result type of block: ", a2, 23, String, v39, " is not a value type or Void", 29, &v55, v40);
    v34 = (WTF::StringImpl *)v55;
    v54 = 1;
    goto LABEL_43;
  }
LABEL_7:
  v14 = a2[3];
  v15 = JSC::Wasm::linearizeType(v11);
  v23 = 0;
  *a3 = *(unsigned __int8 ***)(v14 + 8 * v15 + 32);
  ++*a2;
  LOBYTE(v53) = 0;
  v54 = 0;
LABEL_8:
  if (v23 || (v24 = *a3) == 0)
  {
    *a1 = 0;
    a1[8] = 0;
    if (!v23)
    {
LABEL_44:
      if (v54)
      {
        v41 = v53;
        v53 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
          {
            WTF::StringImpl::~StringImpl(v41, v16, v17, v18, v19, v20, v21, v22);
            WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
          }
          else
          {
            *(_DWORD *)v41 -= 2;
          }
        }
      }
      return;
    }
    v34 = v53;
LABEL_43:
    v53 = 0;
    *(_QWORD *)a1 = v34;
    a1[8] = 1;
    goto LABEL_44;
  }
  v25 = a2[6];
  if (*(_BYTE *)(v25 + 1292))
  {
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_44;
  }
  v26 = *((unsigned int *)v24 + 3);
  if ((_DWORD)v26)
  {
    v27 = (uint64_t)*v24;
    if (**v24 == 251)
    {
LABEL_19:
      *(_BYTE *)(v25 + 1292) = 1;
    }
    else
    {
      v28 = 0;
      v29 = (unsigned __int8 *)(v27 + 16);
      while (v26 - 1 != v28)
      {
        v30 = *v29;
        v29 += 16;
        ++v28;
        if (v30 == 251)
        {
          if (v28 >= v26)
            break;
          goto LABEL_19;
        }
      }
    }
  }
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseIndexForLocal(_BYTE *a1, uint64_t a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  void (**v17)(WTF::StringPrintStream *__hidden);
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  void (**v21)(WTF::StringPrintStream *__hidden);
  unsigned int v22;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)a2;
  v8 = v6 - *(_QWORD *)a2;
  if (v6 > *(_QWORD *)a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a2 = v7 + 1;
    v13 = v12 + v7;
    v14 = v7 + 2;
    while (1)
    {
      v15 = *(char *)(v13 + v9);
      v11 |= (v15 & 0x7F) << v10;
      if ((v15 & 0x80000000) == 0)
        break;
      if (v8 >= 5)
        v16 = 5;
      else
        v16 = v8;
      if (v16 - 1 == v9)
        goto LABEL_17;
      *(_QWORD *)a2 = v14 + v9;
      v10 += 7;
      if (v8 == ++v9)
      {
        __break(1u);
LABEL_14:
        v20[0] = "attempt to use unknown local ";
        v20[1] = 30;
        v19[0] = ", the number of locals is ";
        v19[1] = 27;
        v18 = v8;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v21, (uint64_t)v20, &v22, (uint64_t)v19, &v18, a4, a5);
        v17 = v21;
        goto LABEL_15;
      }
    }
    v22 = v11;
    if ((_DWORD)v9 != 4 || v15 < 0x10u)
    {
      v8 = *(unsigned int *)(a2 + 20324);
      if (v8 > v11)
      {
        *a3 = v11;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      goto LABEL_14;
    }
  }
LABEL_17:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get index for local", (unint64_t *)a2, 26, v20, a5);
  v17 = (void (**)(WTF::StringPrintStream *__hidden))v20[0];
LABEL_15:
  *(_QWORD *)a1 = v17;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::checkLocalInitialized(uint64_t a1, uint64_t a2, unsigned int a3, double a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[2];
  void (**v10)(WTF::StringPrintStream *__hidden);
  unsigned int v11;

  v11 = a3;
  if (BYTE1(dword_1ECF4C7B0))
  {
    if (*(_DWORD *)(a2 + 20324) <= a3)
    {
      __break(0xC471u);
      return;
    }
    if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 20312) + 16 * a3) == 228)
    {
      v5 = a2 + 20616;
      v6 = *(_QWORD *)(a2 + 20616);
      if (v6 >= 0)
        v5 = 2 * v6 + 8;
      if (((*(_QWORD *)(v5 + (((unint64_t)a3 >> 3) & 0x1FFFFFF8)) >> a3) & 1) == 0)
      {
        v9[0] = "non-defaultable function local ";
        v9[1] = 32;
        v8[0] = " is accessed before initialization";
        v8[1] = 35;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v10, (uint64_t)v9, &v11, (uint64_t)v8, a4, a5);
        *(_QWORD *)a1 = v10;
        *(_BYTE *)(a1 + 8) = 1;
        return;
      }
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::pushLocalInitialized(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int v13;

  v13 = a2;
  if (BYTE1(dword_1ECF4C7B0))
  {
    v2 = result + 20324;
    if (*(_DWORD *)(result + 20324) <= a2)
    {
      __break(0xC471u);
    }
    else if (*(unsigned __int8 *)(*(_QWORD *)(result + 20312) + 16 * a2) == 228)
    {
      v3 = *(_QWORD *)(result + 20616);
      v4 = 2 * v3;
      v5 = v3 >= 0 ? 2 * v3 + 8 : result + 20616;
      v6 = (unint64_t)a2 >> 6;
      v7 = 1 << a2;
      if ((*(_QWORD *)(v5 + 8 * v6) & (1 << a2)) == 0)
      {
        v12 = (uint64_t *)(result + 20616);
        result += 20600;
        v8 = *(unsigned int *)(v2 + 288);
        if ((_DWORD)v8 == *(_DWORD *)(v2 + 284))
        {
          result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(result, (unint64_t)&v13);
          v3 = *v12;
          v4 = 2 * *v12;
          v6 = (unint64_t)v13 >> 6;
          v7 = 1 << v13;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)result + 4 * v8) = a2;
          ++*(_DWORD *)(v2 + 288);
        }
        v9 = v4 + 8;
        v10 = v3 < 0;
        v11 = v12;
        if (!v10)
          v11 = (uint64_t *)v9;
        v11[v6] |= v7;
      }
    }
  }
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseIndexForGlobal(_BYTE *a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  void (**v17)(WTF::StringPrintStream *__hidden);
  unint64_t v18;
  _QWORD v19[2];
  void (**v20)(WTF::StringPrintStream *__hidden);
  unsigned int v21;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 > *a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = a2[1];
    *a2 = v7 + 1;
    v13 = v12 + v7;
    v14 = v7 + 2;
    while (1)
    {
      v15 = *(char *)(v13 + v9);
      v11 |= (v15 & 0x7F) << v10;
      if ((v15 & 0x80000000) == 0)
        break;
      if (v8 >= 5)
        v16 = 5;
      else
        v16 = v8;
      if (v16 - 1 == v9)
        goto LABEL_17;
      *a2 = v14 + v9;
      v10 += 7;
      if (v8 == ++v9)
      {
        __break(1u);
LABEL_14:
        v19[0] = " of unknown global, limit is ";
        v19[1] = 30;
        v18 = v8;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral,unsigned long>(&v20, &v21, (uint64_t)v19, &v18);
        v17 = v20;
        goto LABEL_15;
      }
    }
    v21 = v11;
    if ((_DWORD)v9 != 4 || v15 < 0x10u)
    {
      v8 = *(unsigned int *)(a2[2574] + 220);
      if (v8 > v11)
      {
        *a3 = v11;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      goto LABEL_14;
    }
  }
LABEL_17:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get global's index", a2, 25, v19, a5);
  v17 = (void (**)(WTF::StringPrintStream *__hidden))v19[0];
LABEL_15:
  *(_QWORD *)a1 = v17;
  a1[8] = 1;
}

