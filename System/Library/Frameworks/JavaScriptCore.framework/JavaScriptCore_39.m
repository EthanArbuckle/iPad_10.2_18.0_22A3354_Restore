uint64_t JSC::Profiler::Compilation::addOSRExit(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v11;
  uint64_t v13;
  WTF *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _OWORD *v27;
  WTF *v28;
  uint64_t v29;
  __int128 v30;
  unint64_t v32;
  WTF *v34;
  unsigned int v35;
  _BYTE v36[16];
  __int128 v37;
  uint64_t v38;

  v8 = a5;
  v9 = a4;
  v11 = (int)a2;
  v13 = *(unsigned int *)(a3 + 12);
  v34 = (WTF *)v36;
  v35 = v13;
  if (v13 >= 2)
  {
    if (v13 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x19887DDD8);
    }
    v14 = (WTF *)WTF::fastMalloc((WTF *)(16 * v13));
    v34 = v14;
    v13 = *(unsigned int *)(a3 + 12);
    if (!(_DWORD)v13)
      goto LABEL_8;
    goto LABEL_6;
  }
  v14 = (WTF *)v36;
  if ((_DWORD)v13)
  {
LABEL_6:
    v15 = *(__int128 **)a3;
    v16 = 16 * v13;
    do
    {
      v17 = *v15++;
      *(_OWORD *)v14 = v17;
      v14 = (WTF *)((char *)v14 + 16);
      v16 -= 16;
    }
    while (v16);
  }
LABEL_8:
  LODWORD(v37) = v11;
  BYTE4(v37) = v9;
  BYTE5(v37) = v8;
  *((_QWORD *)&v37 + 1) = 0;
  v18 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v18 + 1;
  v19 = v18 >> 3;
  v20 = *(unsigned int *)(a1 + 92);
  if (v18 >> 3 >= v20)
  {
    v21 = WTF::fastMalloc((WTF *)0x180);
    v38 = v21;
    v22 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v22 == *(_DWORD *)(a1 + 88))
    {
      v23 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 80), v22 + 1, (unint64_t)&v38);
      v22 = *(unsigned int *)(a1 + 92);
      *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v22) = *(_QWORD *)v23;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v22) = v21;
    }
    v20 = (v22 + 1);
    *(_DWORD *)(a1 + 92) = v20;
    v18 = *(_QWORD *)(a1 + 72) - 1;
    v19 = v18 >> 3;
  }
  if (v19 >= v20)
    goto LABEL_30;
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19);
  v25 = v18 & 7;
  v26 = v24 + 48 * (v18 & 7);
  v27 = (_OWORD *)(v26 + 16);
  *(_QWORD *)v26 = v26 + 16;
  *(_DWORD *)(v26 + 8) = 1;
  *(_DWORD *)(v26 + 12) = v35;
  if (v35 < 2)
    goto LABEL_17;
  if (v35 >> 28)
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x19887DDC8);
  }
  v27 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v35));
  *(_DWORD *)(v26 + 8) = v35;
  *(_QWORD *)v26 = v27;
LABEL_17:
  if (v35)
  {
    v28 = v34;
    v29 = 16 * v35;
    do
    {
      v30 = *(_OWORD *)v28;
      v28 = (WTF *)((char *)v28 + 16);
      *v27++ = v30;
      v29 -= 16;
    }
    while (v29);
  }
  *(_OWORD *)(v24 + 48 * v25 + 32) = v37;
  if (v36 != (_BYTE *)v34 && v34 != 0)
    WTF::fastFree((unint64_t)v34, a2, a3, a4, a5, a6, a7, a8);
  v32 = *(_QWORD *)(a1 + 72) - 1;
  if (v32 >> 3 >= *(unsigned int *)(a1 + 92))
  {
    __break(0xC471u);
    JUMPOUT(0x19887DDD0);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * (v32 >> 3)) + 48 * (v32 & 7);
}

void JSC::Profiler::Compilation::setJettisonReason(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  int v21;
  void (**v22)(WTF::StringPrintStream *__hidden);
  _BYTE *v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 108))
  {
    *(_DWORD *)(a1 + 108) = (_DWORD)a2;
    if (!a3)
    {
      v20 = *(int **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = 0;
      if (!v20)
        return;
      v21 = *v20 - 1;
      if (*v20 == 1)
      {
        WTF::fastFree((unint64_t)v20, a2, 0, a4, a5, a6, a7, a8);
        return;
      }
LABEL_14:
      *v20 = v21;
      return;
    }
    v22 = off_1E3572250;
    v23 = v25;
    v24 = xmmword_199122F80;
    v25[0] = 0;
    (*(void (**)(uint64_t, void (***)(WTF::StringPrintStream *__hidden)))(*(_QWORD *)a3 + 16))(a3, &v22);
    v22[5]((WTF::StringPrintStream *)&v22);
    v16 = v23;
    if (v23)
    {
      v17 = v24;
      if ((unint64_t)v24 > 0xFFFFFFFFFFFFFFEELL)
      {
        __break(0xC471u);
        JUMPOUT(0x19887DF70);
      }
      v18 = WTF::fastMalloc((WTF *)(v24 + 17));
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = v17;
      memcpy((void *)(v18 + 16), v16, v17);
      *(_BYTE *)(v18 + 16 + v17) = 0;
      v19 = (unint64_t)v23;
      if (v23 == v25)
        goto LABEL_12;
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    WTF::fastFree(v19, v9, v10, v11, v12, v13, v14, v15);
LABEL_12:
    v20 = *(int **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v18;
    if (!v20)
      return;
    v21 = *v20 - 1;
    if (*v20 == 1)
    {
      WTF::fastFree((unint64_t)v20, v9, v10, v11, v12, v13, v14, v15);
      return;
    }
    goto LABEL_14;
  }
}

double JSC::Profiler::Database::Database(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  double result;

  do
  {
    v2 = __ldaxr((unsigned int *)&JSC::Profiler::databaseCounter);
    v3 = v2 + 1;
  }
  while (__stlxr(v3, (unsigned int *)&JSC::Profiler::databaseCounter));
  *(_DWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  return result;
}

{
  unsigned int v2;
  unsigned int v3;
  double result;

  do
  {
    v2 = __ldaxr((unsigned int *)&JSC::Profiler::databaseCounter);
    v3 = v2 + 1;
  }
  while (__stlxr(v3, (unsigned int *)&JSC::Profiler::databaseCounter));
  *(_DWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  return result;
}

void JSC::Profiler::Database::~Database(JSC::Profiler::Database *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::Profiler::Database *v11;
  JSC::Profiler::Database *v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  const char *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD **v20;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::Profiler::Compilation **v25;
  JSC::Profiler::Compilation *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::Profiler::Compilation **v36;
  uint64_t v37;
  JSC::Profiler::Compilation *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  JSC::Profiler::BytecodeSequence *v50;
  _DWORD *v51;
  _DWORD *v52;
  unint64_t v53;
  unint64_t v54;
  char v55[8];

  if (!*((_BYTE *)this + 88))
    goto LABEL_22;
  if (__ldaxr(_MergedGlobals_40))
  {
    __clrex();
  }
  else if (!__stxr(1u, _MergedGlobals_40))
  {
    goto LABEL_6;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)_MergedGlobals_40);
LABEL_6:
  v11 = (JSC::Profiler::Database *)qword_1ECF58D98;
  if (qword_1ECF58D98)
  {
    if ((JSC::Profiler::Database *)qword_1ECF58D98 == this)
    {
      v13 = &qword_1ECF58D98;
LABEL_12:
      *v13 = *((_QWORD *)this + 13);
      *((_QWORD *)this + 13) = 0;
      *((_BYTE *)this + 88) = 0;
    }
    else
    {
      while (1)
      {
        v12 = v11;
        v11 = (JSC::Profiler::Database *)*((_QWORD *)v11 + 13);
        if (!v11)
          break;
        if (v11 == this)
        {
          v13 = (uint64_t *)((char *)v12 + 104);
          goto LABEL_12;
        }
      }
    }
  }
  v14 = __ldxr(_MergedGlobals_40);
  if (v14 == 1)
  {
    if (!__stlxr(0, _MergedGlobals_40))
      goto LABEL_18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(_MergedGlobals_40, 0, a3, a4, a5, a6, a7, a8);
LABEL_18:
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)v55, *((JSC::VM **)this + 1), a3, a4, a5, a6, a7, a8, a9);
  v15 = *((_QWORD *)this + 12);
  if (v15)
    v16 = (const char *)(v15 + 16);
  else
    v16 = 0;
  JSC::Profiler::Database::save(this, v16);
  JSC::JSLockHolder::~JSLockHolder((JSC::JSLockHolder *)v55);
LABEL_22:
  v17 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v17)
  {
    if (*v17 == 1)
      WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v17;
  }
  v18 = *((unsigned int *)this + 21);
  if ((_DWORD)v18)
  {
    v19 = 40 * v18;
    v20 = (_DWORD **)(*((_QWORD *)this + 9) + 32);
    do
    {
      v21 = *v20;
      *v20 = 0;
      if (v21)
      {
        if (*v21 == 1)
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
        else
          --*v21;
      }
      v20 += 5;
      v19 -= 40;
    }
    while (v19);
  }
  v22 = *((_QWORD *)this + 9);
  if (v22)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
  }
  v23 = *((_QWORD *)this + 8);
  if (v23)
  {
    v24 = *(unsigned int *)(v23 - 4);
    if ((_DWORD)v24)
    {
      v25 = (JSC::Profiler::Compilation **)(v23 + 8);
      do
      {
        if (*(v25 - 1) != (JSC::Profiler::Compilation *)-1)
        {
          v26 = *v25;
          *v25 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1)
            {
              JSC::Profiler::Compilation::~Compilation(v26, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
            }
            else
            {
              --*(_DWORD *)v26;
            }
          }
        }
        v25 += 2;
        --v24;
      }
      while (v24);
    }
    WTF::fastFree(v23 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v35 = *((unsigned int *)this + 15);
  if ((_DWORD)v35)
  {
    v36 = (JSC::Profiler::Compilation **)*((_QWORD *)this + 6);
    v37 = 8 * v35;
    do
    {
      v38 = *v36;
      *v36 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 1)
        {
          JSC::Profiler::Compilation::~Compilation(v38, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
        }
        else
        {
          --*(_DWORD *)v38;
        }
      }
      ++v36;
      v37 -= 8;
    }
    while (v37);
  }
  v47 = *((_QWORD *)this + 6);
  if (v47)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v47, a2, a3, a4, a5, a6, a7, a8);
  }
  v48 = *((_QWORD *)this + 5);
  if (v48)
    WTF::fastFree(v48 - 16, a2, a3, a4, a5, a6, a7, a8);
  if (*((_QWORD *)this + 2))
  {
    v49 = 0;
    while (v49 >> 3 < *((unsigned int *)this + 9))
    {
      v50 = (JSC::Profiler::BytecodeSequence *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8 * (v49 >> 3)) + ((v49 & 7) << 6));
      v51 = (_DWORD *)*((_QWORD *)v50 + 6);
      *((_QWORD *)v50 + 6) = 0;
      if (v51)
      {
        if (*v51 == 1)
          WTF::fastFree((unint64_t)v51, a2, a3, a4, a5, a6, a7, a8);
        else
          --*v51;
      }
      v52 = (_DWORD *)*((_QWORD *)v50 + 5);
      *((_QWORD *)v50 + 5) = 0;
      if (v52)
      {
        if (*v52 == 1)
          WTF::fastFree((unint64_t)v52, a2, a3, a4, a5, a6, a7, a8);
        else
          --*v52;
      }
      JSC::Profiler::BytecodeSequence::~BytecodeSequence(v50, a2, a3, a4, a5, a6, a7, a8);
      if (++v49 >= *((_QWORD *)this + 2))
        goto LABEL_71;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_71:
    if (*((_DWORD *)this + 9))
    {
      v53 = 0;
      do
        WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 3) + 8 * v53++), a2, a3, a4, a5, a6, a7, a8);
      while (v53 < *((unsigned int *)this + 9));
    }
    v54 = *((_QWORD *)this + 3);
    if (v54)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      WTF::fastFree(v54, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::Profiler::Database::ensureBytecodesFor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _DWORD **v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  WTF **v53;
  WTF *v54;
  WTF *v55;
  uint64_t v56;
  WTF *v57;
  WTF *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _DWORD **v85;
  unsigned int v86;
  _QWORD *v87;
  unsigned int v88;
  uint64_t v89;
  WTF *v90;
  WTF *v91;
  uint64_t v92;
  uint64_t v93;

  if (*(_QWORD *)(a3 + 192))
    v9 = *(_QWORD *)(a3 + 192);
  else
    v9 = a3;
  v10 = *(_QWORD *)(v9 + 120);
  if (v10)
  {
    v11 = *(unsigned __int8 *)(v10 + 12);
    if ((v11 & 0xFE) != 2 && v11 != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19887E848);
    }
  }
  v14 = (uint64_t *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 40);
  if (v13)
  {
    v15 = *(_DWORD *)(v13 - 8);
    v16 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(_QWORD *)(v13 + 16 * v19);
    if (v20 != v9)
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(_QWORD *)(v13 + 16 * v19);
        ++v21;
        if (v20 == v9)
          goto LABEL_17;
      }
      v19 = *(unsigned int *)(v13 - 4);
    }
LABEL_17:
    if (v19 != *(_DWORD *)(v13 - 4))
      return *(_QWORD *)(v13 + 16 * v19 + 8);
  }
  v22 = *(_QWORD *)(a1 + 16);
  JSC::Profiler::BytecodeSequence::BytecodeSequence((JSC::Profiler::BytecodeSequence *)&v85, (JSC::CodeBlock *)v9, a3, a4, a5, a6, a7, a8);
  v89 = v22;
  JSC::CodeBlock::inferredName((JSC::CodeBlock *)v9);
  JSC::CodeBlock::sourceCodeForTools((JSC::CodeBlock *)v9, &v91);
  v30 = *(_DWORD *)(v9 + 52);
  if (!v30)
  {
    v31 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v31)
      v31 = WTF::Thread::initializeCurrentTLS(0);
    if ((*(_BYTE *)(v31 + 5) & 8) != 0)
      goto LABEL_88;
    JSC::CodeBlockHash::CodeBlockHash((int *)&v93, (uint64_t *)(*(_QWORD *)(v9 + 64) + 40), *(_DWORD *)(*(_QWORD *)(v9 + 56) + 20) >> 31);
    v30 = v93;
    *(_DWORD *)(v9 + 52) = v93;
  }
  LODWORD(v92) = v30;
  HIDWORD(v92) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 56) + 80) + 12);
  v32 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v32 + 1;
  v33 = v32 >> 3;
  v34 = *(unsigned int *)(a1 + 36);
  if (v32 >> 3 >= v34)
  {
    v35 = WTF::fastMalloc((WTF *)0x200);
    v93 = v35;
    v36 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v36 == *(_DWORD *)(a1 + 32))
    {
      v37 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 24), v36 + 1, (unint64_t)&v93);
      v36 = *(unsigned int *)(a1 + 36);
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v36) = *(_QWORD *)v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v36) = v35;
    }
    v34 = (v36 + 1);
    *(_DWORD *)(a1 + 36) = v34;
    v32 = *(_QWORD *)(a1 + 16) - 1;
    v33 = v32 >> 3;
  }
  if (v33 >= v34)
  {
    __break(0xC471u);
    JUMPOUT(0x19887E850);
  }
  v39 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v33);
  v40 = v32 & 7;
  v41 = v86;
  v42 = v39 + (v40 << 6);
  *(_QWORD *)v42 = 0;
  *(_QWORD *)(v42 + 8) = 0;
  *(_DWORD *)(v42 + 12) = v41;
  if ((_DWORD)v41)
  {
    if (v41 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19887E860);
    }
    v43 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v41));
    *(_DWORD *)(v42 + 8) = v41;
    *(_QWORD *)v42 = v43;
    if (v86)
    {
      v44 = v85;
      v45 = 8 * v86;
      do
      {
        v46 = *v44;
        if (*v44)
          ++*v46;
        *v43++ = v46;
        ++v44;
        v45 -= 8;
      }
      while (v45);
    }
  }
  v47 = v88;
  *(_QWORD *)(v42 + 16) = 0;
  *(_QWORD *)(v42 + 24) = 0;
  *(_DWORD *)(v42 + 28) = v47;
  if ((_DWORD)v47)
  {
    if (!(v47 >> 28))
    {
      v48 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v47));
      *(_DWORD *)(v42 + 24) = v47;
      *(_QWORD *)(v42 + 16) = v48;
      if (v88)
      {
        v49 = v87;
        v50 = &v87[2 * v88];
        do
        {
          *v48 = *v49;
          v51 = (_DWORD *)v49[1];
          if (v51)
            ++*v51;
          v48[1] = v51;
          v49 += 2;
          v48 += 2;
        }
        while (v49 != v50);
      }
      goto LABEL_44;
    }
LABEL_88:
    __break(0xC471u);
    JUMPOUT(0x19887E828);
  }
LABEL_44:
  v52 = v39 + (v40 << 6);
  *(_QWORD *)(v52 + 32) = v89;
  v53 = (WTF **)(v52 + 40);
  v54 = v90;
  if (v90)
    ++*(_DWORD *)v90;
  *v53 = v54;
  v55 = v91;
  if (v91)
    ++*(_DWORD *)v91;
  v56 = v39 + (v40 << 6);
  *(_QWORD *)(v56 + 48) = v55;
  *(_QWORD *)(v56 + 56) = v92;
  v57 = v91;
  v91 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 1)
      WTF::fastFree((unint64_t)v57, v23, v24, v25, v26, v27, v28, v29);
    else
      --*(_DWORD *)v57;
  }
  v58 = v90;
  v90 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 1)
      WTF::fastFree((unint64_t)v58, v23, v24, v25, v26, v27, v28, v29);
    else
      --*(_DWORD *)v58;
  }
  JSC::Profiler::BytecodeSequence::~BytecodeSequence((JSC::Profiler::BytecodeSequence *)&v85, v23, v24, v25, v26, v27, v28, v29);
  v64 = *(_QWORD *)(a1 + 16) - 1;
  if (v64 >> 3 >= *(unsigned int *)(a1 + 36))
  {
    __break(0xC471u);
    JUMPOUT(0x19887E858);
  }
  v65 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (v64 >> 3));
  v66 = v64 & 7;
  v67 = *(_QWORD *)(a1 + 40);
  if (v67
    || (WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,void *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,void *>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,void *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<void *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash((uint64_t *)(a1 + 40), 8uLL, 0, v59, v60, v61, v62, v63), (v67 = *v14) != 0))
  {
    v68 = *(_DWORD *)(v67 - 8);
  }
  else
  {
    v68 = 0;
  }
  v38 = v65 + (v66 << 6);
  v69 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
  v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
  v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
  v72 = v68 & ((v71 >> 31) ^ v71);
  v73 = (uint64_t *)(v67 + 16 * v72);
  v74 = *v73;
  if (!*v73)
  {
LABEL_66:
    *v73 = v9;
    v73[1] = v38;
    v77 = *v14;
    if (*v14)
      v78 = *(_DWORD *)(v77 - 12) + 1;
    else
      v78 = 1;
    *(_DWORD *)(v77 - 12) = v78;
    v79 = *v14;
    if (*v14)
      v80 = *(_DWORD *)(v79 - 12);
    else
      v80 = 0;
    v81 = (*(_DWORD *)(v79 - 16) + v80);
    v82 = *(unsigned int *)(v79 - 4);
    if (v82 > 0x400)
    {
      if (v82 > 2 * v81)
        return v38;
    }
    else
    {
      if (3 * v82 > 4 * v81)
        return v38;
      if (!(_DWORD)v82)
      {
        v83 = 8;
        goto LABEL_80;
      }
    }
    v83 = ((_DWORD)v82 << (6 * *(_DWORD *)(v79 - 12) >= (2 * v82)));
LABEL_80:
    WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,void *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,void *>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,void *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<void *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(v14, v83, (uint64_t)v73, v59, v60, v61, v62, v63);
    return v38;
  }
  v75 = 0;
  v76 = 1;
  while (v74 != v9)
  {
    if (v74 == -1)
      v75 = v73;
    v72 = (v72 + v76) & v68;
    v73 = (uint64_t *)(v67 + 16 * v72);
    v74 = *v73;
    ++v76;
    if (!*v73)
    {
      if (v75)
      {
        *v75 = 0;
        v75[1] = 0;
        --*(_DWORD *)(*v14 - 16);
        v73 = v75;
      }
      goto LABEL_66;
    }
  }
  return v38;
}

void JSC::Profiler::Database::notifyDestruction(JSC::Profiler::Database *this, JSC::CodeBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  JSC::CodeBlock *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  JSC::CodeBlock *v35;
  int v36;
  _QWORD *v37;
  JSC::Profiler::Compilation *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v10 = (unsigned __int8 *)this + 112;
  if (__ldaxr((unsigned __int8 *)this + 112))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 112);
LABEL_5:
  v12 = (uint64_t *)((char *)this + 40);
  v13 = *((_QWORD *)this + 5);
  if (v13)
  {
    v14 = *(_DWORD *)(v13 - 8);
    v15 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    v18 = v14 & ((v17 >> 31) ^ v17);
    v19 = *(JSC::CodeBlock **)(v13 + 16 * v18);
    if (v19 != a2)
    {
      v20 = 1;
      while (v19)
      {
        v18 = ((_DWORD)v18 + v20) & v14;
        v19 = *(JSC::CodeBlock **)(v13 + 16 * v18);
        ++v20;
        if (v19 == a2)
          goto LABEL_12;
      }
      v18 = *(unsigned int *)(v13 - 4);
    }
LABEL_12:
    if (v18 != *(_DWORD *)(v13 - 4))
    {
      *(_QWORD *)(v13 + 16 * v18) = -1;
      ++*(_DWORD *)(*v12 - 16);
      v21 = *v12;
      v22 = *v12 ? *(_DWORD *)(v21 - 12) - 1 : -1;
      *(_DWORD *)(v21 - 12) = v22;
      v23 = *v12;
      if (*v12)
      {
        v24 = 6 * *(_DWORD *)(v23 - 12);
        v25 = *(_DWORD *)(v23 - 4);
        if (v24 < v25 && v25 >= 9)
          WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,void *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,void *>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,void *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<void *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(v12, v25 >> 1, 0, a4, a5, a6, a7, a8);
      }
    }
  }
  v29 = *((_QWORD *)this + 8);
  v28 = (uint64_t *)((char *)this + 64);
  v27 = v29;
  if (v29)
  {
    v30 = *(_DWORD *)(v27 - 8);
    v31 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
    v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
    v34 = v30 & ((v33 >> 31) ^ v33);
    v35 = *(JSC::CodeBlock **)(v27 + 16 * v34);
    if (v35 != a2)
    {
      v36 = 1;
      while (v35)
      {
        v34 = ((_DWORD)v34 + v36) & v30;
        v35 = *(JSC::CodeBlock **)(v27 + 16 * v34);
        ++v36;
        if (v35 == a2)
          goto LABEL_30;
      }
      v34 = *(unsigned int *)(v27 - 4);
    }
LABEL_30:
    if (v34 != *(_DWORD *)(v27 - 4))
    {
      v37 = (_QWORD *)(v27 + 16 * v34);
      v38 = (JSC::Profiler::Compilation *)v37[1];
      *v37 = -1;
      v37[1] = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 1)
        {
          JSC::Profiler::Compilation::~Compilation(v38, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
        }
        else
        {
          --*(_DWORD *)v38;
        }
      }
      ++*(_DWORD *)(*v28 - 16);
      v39 = *v28;
      if (*v28)
        v40 = *(_DWORD *)(v39 - 12) - 1;
      else
        v40 = -1;
      *(_DWORD *)(v39 - 12) = v40;
      v41 = *v28;
      if (*v28)
      {
        v42 = 6 * *(_DWORD *)(v41 - 12);
        v43 = *(_DWORD *)(v41 - 4);
        if (v42 < v43 && v43 >= 9)
          WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::rehash(v28, v43 >> 1, 0, a4, a5, a6, a7, a8);
      }
    }
  }
  v45 = __ldxr(v10);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_48;
  }
  if (__stlxr(0, v10))
LABEL_48:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::Profiler::Database::addCompilation(uint64_t a1, void *a2, JSC::Profiler::Compilation **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v11;
  JSC::Profiler::Compilation *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::Profiler::Compilation *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  int v31;
  JSC::Profiler::Compilation *v32;
  JSC::Profiler::Compilation *v33;
  uint64_t v34;
  int v35;
  JSC::Profiler::Compilation *v36;
  JSC::Profiler::Compilation *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  JSC::Profiler::Compilation *v68;

  v11 = (unsigned __int8 *)(a1 + 112);
  if (__ldaxr((unsigned __int8 *)(a1 + 112)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 112);
LABEL_5:
  v13 = *a3;
  *(_DWORD *)v13 = *(_DWORD *)*a3 + 1;
  v68 = v13;
  v14 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 56))
  {
    v15 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 48), v14 + 1, (unint64_t)&v68);
    v16 = *(unsigned int *)(a1 + 60);
    v17 = *(_QWORD *)(a1 + 48);
    v18 = *(_QWORD *)v15;
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v17 + 8 * v16) = v18;
    v19 = v68;
    *(_DWORD *)(a1 + 60) = v16 + 1;
    v68 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
      {
        JSC::Profiler::Compilation::~Compilation(v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
      }
      else
      {
        --*(_DWORD *)v19;
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14) = v13;
    *(_DWORD *)(a1 + 60) = v14 + 1;
  }
  v22 = *(_QWORD *)(a1 + 64);
  v21 = (uint64_t *)(a1 + 64);
  v20 = v22;
  if (v22
    || (WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::rehash(v21, 8uLL, 0, a4, a5, a6, a7, a8), (v20 = *v21) != 0))
  {
    v23 = *(_DWORD *)(v20 - 8);
  }
  else
  {
    v23 = 0;
  }
  v24 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
  v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
  v27 = v23 & ((v26 >> 31) ^ v26);
  v28 = (_QWORD *)(v20 + 16 * v27);
  v29 = (void *)*v28;
  if (!*v28)
  {
LABEL_21:
    *v28 = a2;
    v32 = *a3;
    *a3 = 0;
    v33 = (JSC::Profiler::Compilation *)v28[1];
    v28[1] = v32;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
      {
        JSC::Profiler::Compilation::~Compilation(v33, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
      }
      else
      {
        --*(_DWORD *)v33;
      }
    }
    v34 = *v21;
    if (*v21)
      v35 = *(_DWORD *)(v34 - 12) + 1;
    else
      v35 = 1;
    *(_DWORD *)(v34 - 12) = v35;
    v38 = *v21;
    if (*v21)
      v39 = *(_DWORD *)(v38 - 12);
    else
      v39 = 0;
    v40 = (*(_DWORD *)(v38 - 16) + v39);
    v41 = *(unsigned int *)(v38 - 4);
    if (v41 > 0x400)
    {
      if (v41 > 2 * v40)
        goto LABEL_40;
    }
    else
    {
      if (3 * v41 > 4 * v40)
        goto LABEL_40;
      if (!(_DWORD)v41)
      {
        v42 = 8;
        goto LABEL_39;
      }
    }
    v42 = ((_DWORD)v41 << (6 * *(_DWORD *)(v38 - 12) >= (2 * v41)));
LABEL_39:
    WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::rehash(v21, v42, (uint64_t)v28, a4, a5, a6, a7, a8);
    goto LABEL_40;
  }
  v30 = 0;
  v31 = 1;
  while (v29 != a2)
  {
    if (v29 == (void *)-1)
      v30 = v28;
    v27 = (v27 + v31) & v23;
    v28 = (_QWORD *)(v20 + 16 * v27);
    v29 = (void *)*v28;
    ++v31;
    if (!*v28)
    {
      if (v30)
      {
        *v30 = 0;
        v30[1] = 0;
        --*(_DWORD *)(*v21 - 16);
        v28 = v30;
      }
      goto LABEL_21;
    }
  }
  v36 = *a3;
  *a3 = 0;
  v37 = (JSC::Profiler::Compilation *)v28[1];
  v28[1] = v36;
  if (v37)
  {
    if (*(_DWORD *)v37 == 1)
    {
      JSC::Profiler::Compilation::~Compilation(v37, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      --*(_DWORD *)v37;
    }
  }
LABEL_40:
  v43 = __ldxr(v11);
  if (v43 == 1)
  {
    if (!__stlxr(0, v11))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void JSC::Profiler::Database::toJSON(JSC::Profiler::Database *this@<X0>, _QWORD *a2@<X8>)
{
  JSC::Profiler::Database *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  double v52;
  double *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF *v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::AtomStringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  int v97;
  int8x16_t *v98;
  WTF::AtomStringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF *v106;
  _WORD *v107;
  WTF::StringImpl *v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::AtomStringImpl *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF *v127;
  unsigned int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF *v140;
  unsigned int v141;
  size_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  WTF *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::AtomStringImpl *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  WTF *v172;
  WTF::StringImpl *v173;
  double v174;
  double *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  WTF::AtomStringImpl *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  WTF::StringImpl *v191;
  WTF *v192;
  WTF::AtomStringImpl *v193;
  uint64_t v194;
  WTF::StringImpl *v195;
  uint64_t v196;
  uint64_t *v197;
  _QWORD *v198;
  uint64_t v199;
  WTF *v200;
  unint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  __int16 v226;
  unint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _DWORD **v235;
  uint64_t v236;
  _DWORD *v237;
  _DWORD **v238;
  uint64_t v239;
  _DWORD *v240;
  _DWORD **v241;
  uint64_t v242;
  _DWORD *v243;
  _DWORD **v244;
  uint64_t v245;
  _DWORD *v246;
  _DWORD **v247;
  uint64_t v248;
  _DWORD *v249;
  char *v250;
  int8x16_t v251;
  int8x16_t v252;
  char *v253;
  char *v254;
  char *v255;
  WTF::AtomStringImpl *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  WTF::StringImpl *v267;
  WTF *v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  WTF *v275;
  JSC::Profiler::Database *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  double v280;
  double *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  WTF::AtomStringImpl *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  WTF::StringImpl *v297;
  WTF *v298;
  uint64_t v299;
  void *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  WTF *v307;
  size_t v308;
  unint64_t v309;
  void *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  WTF *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  WTF::StringImpl *v323;
  WTF::AtomStringImpl *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  WTF::StringImpl *v335;
  WTF *v336;
  WTF::StringImpl *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  double v349;
  double *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  WTF::AtomStringImpl *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t v365;
  WTF::StringImpl *v366;
  WTF *v367;
  WTF::AtomStringImpl *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t *v371;
  uint64_t *v372;
  WTF *v373;
  _DWORD **v374;
  uint64_t v375;
  _DWORD *v376;
  WTF::AtomStringImpl *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  WTF::StringImpl *v388;
  WTF *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  _QWORD *v396;
  unsigned int v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  _QWORD *v407;
  unint64_t i;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t *v412;
  _QWORD *v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  uint64_t *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  WTF::StringImpl *v426;
  unint64_t v427;
  void *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  WTF::AtomStringImpl *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t *v442;
  uint64_t v443;
  uint64_t v444;
  WTF::StringImpl *v445;
  WTF *v446;
  uint64_t v447;
  WTF *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  WTF::StringImpl *v454;
  WTF::AtomStringImpl *v455;
  uint64_t v456;
  uint64_t *v457;
  uint64_t v458;
  uint64_t v459;
  WTF::StringImpl *v460;
  WTF *v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t *v464;
  uint64_t *v465;
  WTF *v466;
  uint64_t v467;
  uint64_t v468;
  _DWORD **v469;
  uint64_t v470;
  _DWORD *v471;
  _DWORD **v472;
  uint64_t v473;
  _DWORD *v474;
  WTF::AtomStringImpl *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t *v483;
  uint64_t v484;
  uint64_t v485;
  WTF::StringImpl *v486;
  WTF *v487;
  _QWORD *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  _QWORD *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  _QWORD *v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t *v513;
  _QWORD *v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  WTF::StringImpl *v525;
  unint64_t v526;
  void *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  WTF::AtomStringImpl *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t *v541;
  uint64_t v542;
  uint64_t v543;
  WTF::StringImpl *v544;
  WTF *v545;
  double v546;
  double *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  WTF::AtomStringImpl *v553;
  uint64_t v554;
  uint64_t *v555;
  uint64_t v556;
  uint64_t v557;
  WTF::StringImpl *v558;
  WTF *v559;
  uint64_t v560;
  uint64_t *v561;
  uint64_t *v562;
  WTF *v563;
  uint64_t v564;
  _DWORD **v565;
  uint64_t v566;
  _DWORD *v567;
  _DWORD **v568;
  uint64_t v569;
  _DWORD *v570;
  WTF::AtomStringImpl *v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t *v579;
  uint64_t v580;
  uint64_t v581;
  WTF::StringImpl *v582;
  WTF *v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  _QWORD *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  WTF::AtomStringImpl *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t *v597;
  _QWORD *v598;
  uint64_t v599;
  WTF *v600;
  WTF::AtomStringImpl *v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t *v609;
  uint64_t v610;
  uint64_t v611;
  WTF::StringImpl *v612;
  WTF *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  _QWORD *v620;
  uint64_t v621;
  unint64_t v622;
  unsigned int v623;
  WTF::AtomStringImpl *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t *v627;
  _QWORD *v628;
  uint64_t v629;
  WTF *v630;
  WTF::AtomStringImpl *v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  unint64_t v639;
  uint64_t v640;
  uint64_t *v641;
  uint64_t v642;
  uint64_t v643;
  WTF::StringImpl *v644;
  WTF *v645;
  double v646;
  double *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  WTF::AtomStringImpl *v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  unint64_t v660;
  uint64_t v661;
  uint64_t *v662;
  uint64_t v663;
  uint64_t v664;
  WTF::StringImpl *v665;
  WTF *v666;
  double v667;
  double *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  WTF::AtomStringImpl *v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  unint64_t v681;
  uint64_t v682;
  uint64_t *v683;
  uint64_t v684;
  uint64_t v685;
  WTF::StringImpl *v686;
  WTF *v687;
  double v688;
  double *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  WTF::AtomStringImpl *v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t *v703;
  uint64_t v704;
  uint64_t v705;
  WTF::StringImpl *v706;
  WTF *v707;
  uint64_t v708;
  void *v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  WTF *v716;
  size_t v717;
  unint64_t v718;
  void *v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  WTF *v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  WTF::StringImpl *v732;
  WTF::AtomStringImpl *v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t *v741;
  uint64_t v742;
  uint64_t v743;
  WTF::StringImpl *v744;
  WTF *v745;
  WTF::StringImpl *v746;
  uint64_t v747;
  uint64_t v748;
  WTF *v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  WTF::StringImpl *v755;
  WTF::AtomStringImpl *v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t *v764;
  uint64_t v765;
  uint64_t v766;
  WTF::StringImpl *v767;
  WTF *v768;
  WTF::StringImpl *v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  WTF::AtomStringImpl *v775;
  uint64_t v776;
  WTF *v777;
  uint64_t *v778;
  uint64_t v779;
  uint64_t v780;
  WTF::StringImpl *v781;
  WTF *v782;
  uint64_t v783;
  WTF **v784;
  WTF **v785;
  WTF *v786;
  unint64_t v787;
  void *v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  unint64_t v795;
  void *v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  unint64_t v803;
  void *v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  _DWORD **v811;
  uint64_t v812;
  _DWORD *v813;
  _DWORD **v814;
  uint64_t v815;
  _DWORD *v816;
  _DWORD **v817;
  uint64_t v818;
  _DWORD *v819;
  _DWORD **v820;
  uint64_t v821;
  _DWORD *v822;
  _DWORD **v823;
  uint64_t v824;
  _DWORD *v825;
  _DWORD **v826;
  uint64_t v827;
  _DWORD *v828;
  _DWORD **v829;
  uint64_t v830;
  _DWORD *v831;
  _DWORD **v832;
  uint64_t v833;
  _DWORD *v834;
  _DWORD **v835;
  uint64_t v836;
  _DWORD *v837;
  _DWORD **v838;
  uint64_t v839;
  _DWORD *v840;
  _DWORD **v841;
  uint64_t v842;
  _DWORD *v843;
  _DWORD **v844;
  uint64_t v845;
  _DWORD *v846;
  _DWORD **v847;
  uint64_t v848;
  _DWORD *v849;
  WTF::AtomStringImpl *v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  _QWORD *v857;
  uint64_t *v858;
  uint64_t v859;
  uint64_t v860;
  WTF::StringImpl *v861;
  WTF *v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  _QWORD *v869;
  JSC::Profiler::Database *v870;
  uint64_t v871;
  unint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t *v875;
  uint64_t v876;
  WTF *v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  WTF::AtomStringImpl *v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t *v890;
  uint64_t v891;
  uint64_t v892;
  WTF::StringImpl *v893;
  WTF *v894;
  double v895;
  double *v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  WTF::AtomStringImpl *v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t *v909;
  uint64_t v910;
  uint64_t v911;
  WTF::StringImpl *v912;
  WTF *v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  WTF::AtomStringImpl *v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t *v927;
  uint64_t v928;
  uint64_t v929;
  WTF::StringImpl *v930;
  WTF *v931;
  unint64_t v932;
  size_t v933;
  WTF *v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  WTF::StringImpl *v940;
  WTF::AtomStringImpl *v941;
  uint64_t v942;
  uint64_t *v943;
  uint64_t v944;
  uint64_t v945;
  WTF::StringImpl *v946;
  WTF *v947;
  WTF::StringImpl *v948;
  uint64_t v949;
  WTF *v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  WTF::StringImpl *v956;
  uint64_t *v957;
  uint64_t v958;
  uint64_t v959;
  WTF::StringImpl *v960;
  WTF *v961;
  WTF::StringImpl *v962;
  uint64_t v963;
  uint64_t *v964;
  uint64_t *v965;
  WTF *v966;
  unint64_t v967;
  void *v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  unint64_t v975;
  void *v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  _DWORD **v983;
  uint64_t v984;
  _DWORD *v985;
  _DWORD **v986;
  uint64_t v987;
  _DWORD *v988;
  _DWORD **v989;
  uint64_t v990;
  _DWORD *v991;
  _DWORD **v992;
  uint64_t v993;
  _DWORD *v994;
  _DWORD **v995;
  uint64_t v996;
  _DWORD *v997;
  WTF::AtomStringImpl *v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  _QWORD *v1005;
  uint64_t *v1006;
  uint64_t v1007;
  uint64_t v1008;
  WTF::StringImpl *v1009;
  WTF *v1010;
  WTF::StringImpl *v1011;
  WTF::StringImpl *v1012;
  WTF::StringImpl *v1013;
  WTF::StringImpl *v1014;
  WTF::StringImpl *v1015;
  WTF::StringImpl *v1016;
  WTF::StringImpl *v1017;
  WTF::StringImpl *v1018;
  WTF::StringImpl *v1019;
  WTF::StringImpl *v1020;
  WTF::StringImpl *v1021;
  WTF::StringImpl *v1022;
  WTF::StringImpl *v1023;
  WTF::StringImpl *v1024;
  WTF::StringImpl *v1025;
  WTF::StringImpl *v1026;
  WTF::StringImpl *v1027;
  WTF::StringImpl *v1028;
  WTF::StringImpl *v1029;
  WTF::StringImpl *v1030;
  WTF::StringImpl *v1031;
  WTF::StringImpl *v1032;
  WTF::StringImpl *v1033;
  WTF::StringImpl *v1034;
  WTF::StringImpl *v1035;
  WTF::StringImpl *v1036;
  WTF::StringImpl *v1037;
  WTF::StringImpl *v1038;
  WTF::StringImpl *v1039;
  WTF::StringImpl *v1040;
  WTF::StringImpl *v1041;
  WTF::StringImpl *v1042;
  WTF::StringImpl *v1043;
  WTF::StringImpl *v1044;
  WTF::StringImpl *v1045;
  unint64_t v1046;
  void *v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  unint64_t v1054;
  void *v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  unint64_t v1062;
  void *v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  unint64_t v1070;
  void *v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  unint64_t v1078;
  void *v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  unint64_t v1086;
  void *v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  unint64_t v1094;
  void *v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  unint64_t v1102;
  void *v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  unint64_t v1110;
  void *v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  unint64_t v1118;
  void *v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  unint64_t v1126;
  void *v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  unint64_t v1134;
  void *v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  unint64_t v1142;
  void *v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  unint64_t v1150;
  void *v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  unint64_t v1158;
  void *v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  unint64_t v1166;
  void *v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  unint64_t v1174;
  void *v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  unint64_t v1182;
  void *v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  unint64_t v1190;
  void *v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  unint64_t v1198;
  void *v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  unint64_t v1206;
  void *v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  unint64_t v1214;
  void *v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  unint64_t v1222;
  void *v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  unint64_t v1230;
  void *v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  unint64_t v1238;
  void *v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  unint64_t v1246;
  void *v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  unint64_t v1254;
  void *v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  unint64_t v1262;
  void *v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  unint64_t v1270;
  void *v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  unint64_t v1278;
  void *v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  unint64_t v1286;
  void *v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  unint64_t v1294;
  void *v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  unint64_t v1302;
  void *v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  unint64_t v1310;
  void *v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  unint64_t v1318;
  void *v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  _DWORD **v1326;
  uint64_t v1327;
  _DWORD *v1328;
  _DWORD **v1329;
  uint64_t v1330;
  _DWORD *v1331;
  _DWORD **v1332;
  uint64_t v1333;
  _DWORD *v1334;
  _QWORD *v1336;
  uint64_t *v1337;
  WTF *v1338;
  _QWORD *v1339;
  uint64_t v1340;
  JSC::Profiler::Database *v1341;
  uint64_t v1342;
  uint64_t v1343;
  _QWORD *v1344;
  _QWORD *v1345;
  _QWORD *v1346;
  uint64_t *v1347;
  uint64_t v1348;
  uint64_t *v1349;
  uint64_t v1350;
  uint64_t v1351;
  _QWORD *v1352;
  uint64_t v1353;
  uint64_t v1354;
  unint64_t StatusReg;
  _DWORD *v1356;
  WTF::StringImpl *v1357;
  WTF::StringImpl *v1358;
  WTF::StringImpl *v1359;
  WTF::StringImpl *v1360;
  WTF::StringImpl *v1361;
  WTF::StringImpl *v1362;
  WTF::StringImpl *v1363;
  WTF::StringImpl *v1364;
  WTF::StringImpl *v1365;
  WTF::StringImpl *v1366;
  WTF::StringImpl *v1367;
  WTF::StringImpl *v1368;
  WTF::StringImpl *v1369;
  WTF::StringImpl *v1370;
  WTF::StringImpl *v1371;
  WTF::StringImpl *v1372;
  WTF::StringImpl *v1373;
  WTF::StringImpl *v1374;
  WTF::StringImpl *v1375;
  WTF::StringImpl *v1376;
  WTF::StringImpl *v1377;
  WTF::StringImpl *v1378;
  WTF::StringImpl *v1379;
  WTF::StringImpl *v1380;
  WTF::StringImpl *v1381;
  WTF::StringImpl *v1382;
  WTF::StringImpl *v1383;
  WTF::StringImpl *v1384;
  WTF::StringImpl *v1385;
  WTF::StringImpl *v1386;
  WTF::StringImpl *v1387;
  WTF::StringImpl *v1388;
  WTF::StringImpl *v1389;
  WTF::StringImpl *v1390;
  WTF::StringImpl *v1391;
  WTF::StringImpl *v1392;
  WTF::StringImpl *v1393;
  WTF *v1394;
  WTF *v1395;
  WTF *v1396;
  __int128 v1397;
  _BYTE v1398[128];
  uint64_t v1399;
  int8x16x2_t v1400;
  int8x16x2_t v1401;
  int8x16x2_t v1402;
  int8x16x2_t v1403;

  v2 = this;
  v1399 = *MEMORY[0x1E0C80C00];
  v1356 = this;
  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0x800000002;
  *(_QWORD *)(v3 + 8) = "bytecode";
  *(_DWORD *)(v3 + 16) = 4;
  v1357 = (WTF::StringImpl *)v3;
  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0xD00000002;
  *(_QWORD *)(v4 + 8) = "bytecodeIndex";
  *(_DWORD *)(v4 + 16) = 4;
  v1358 = (WTF::StringImpl *)v4;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x900000002;
  *(_QWORD *)(v5 + 8) = "bytecodes";
  *(_DWORD *)(v5 + 16) = 4;
  v1359 = (WTF::StringImpl *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0xB00000002;
  *(_QWORD *)(v6 + 8) = "bytecodesID";
  *(_DWORD *)(v6 + 16) = 4;
  v1360 = (WTF::StringImpl *)v6;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x800000002;
  *(_QWORD *)(v7 + 8) = "counters";
  *(_DWORD *)(v7 + 16) = 4;
  v1361 = (WTF::StringImpl *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "opcode";
  *(_DWORD *)(v8 + 16) = 4;
  v1362 = (WTF::StringImpl *)v8;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v9 = 0xB00000002;
  *(_QWORD *)(v9 + 8) = "description";
  *(_DWORD *)(v9 + 16) = 4;
  v1363 = (WTF::StringImpl *)v9;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xC00000002;
  *(_QWORD *)(v10 + 8) = "descriptions";
  *(_DWORD *)(v10 + 16) = 4;
  v1364 = (WTF::StringImpl *)v10;
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0x400000002;
  *(_QWORD *)(v11 + 8) = "hash";
  *(_DWORD *)(v11 + 16) = 4;
  v1365 = (WTF::StringImpl *)v11;
  v12 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v12 = 0xC00000002;
  *(_QWORD *)(v12 + 8) = "inferredName";
  *(_DWORD *)(v12 + 16) = 4;
  v1366 = (WTF::StringImpl *)v12;
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0xA00000002;
  *(_QWORD *)(v13 + 8) = "sourceCode";
  *(_DWORD *)(v13 + 16) = 4;
  v1367 = (WTF::StringImpl *)v13;
  v14 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v14 = 0x1000000002;
  *(_QWORD *)(v14 + 8) = "instructionCount";
  *(_DWORD *)(v14 + 16) = 4;
  v1368 = (WTF::StringImpl *)v14;
  v15 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v15 = 0xF00000002;
  *(_QWORD *)(v15 + 8) = "compilationKind";
  *(_DWORD *)(v15 + 16) = 4;
  v1369 = (WTF::StringImpl *)v15;
  v16 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v16 = 0xE00000002;
  *(_QWORD *)(v16 + 8) = "compilationUID";
  *(_DWORD *)(v16 + 16) = 4;
  v1370 = (WTF::StringImpl *)v16;
  v17 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v17 = 0xC00000002;
  *(_QWORD *)(v17 + 8) = "compilations";
  *(_DWORD *)(v17 + 16) = 4;
  v1371 = (WTF::StringImpl *)v17;
  v18 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v18 = 0x1100000002;
  *(_QWORD *)(v18 + 8) = "profiledBytecodes";
  *(_DWORD *)(v18 + 16) = 4;
  v1372 = (WTF::StringImpl *)v18;
  v19 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v19 = 0x600000002;
  *(_QWORD *)(v19 + 8) = "origin";
  *(_DWORD *)(v19 + 16) = 4;
  v1373 = (WTF::StringImpl *)v19;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xC00000002;
  *(_QWORD *)(v20 + 8) = "osrExitSites";
  *(_DWORD *)(v20 + 16) = 4;
  v1374 = (WTF::StringImpl *)v20;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x800000002;
  *(_QWORD *)(v21 + 8) = "osrExits";
  *(_DWORD *)(v21 + 16) = 4;
  v1375 = (WTF::StringImpl *)v21;
  v22 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v22 = 0xE00000002;
  *(_QWORD *)(v22 + 8) = "executionCount";
  *(_DWORD *)(v22 + 16) = 4;
  v1376 = (WTF::StringImpl *)v22;
  v23 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v23 = 0x800000002;
  *(_QWORD *)(v23 + 8) = "exitKind";
  *(_DWORD *)(v23 + 16) = 4;
  v1377 = (WTF::StringImpl *)v23;
  v24 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v24 = 0xF00000002;
  *(_QWORD *)(v24 + 8) = "numInlinedCalls";
  *(_DWORD *)(v24 + 16) = 4;
  v1378 = (WTF::StringImpl *)v24;
  v25 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v25 = 0x1200000002;
  *(_QWORD *)(v25 + 8) = "numInlinedGetByIds";
  *(_DWORD *)(v25 + 16) = 4;
  v1379 = (WTF::StringImpl *)v25;
  v26 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v26 = 0x1200000002;
  *(_QWORD *)(v26 + 8) = "numInlinedPutByIds";
  *(_DWORD *)(v26 + 16) = 4;
  v1380 = (WTF::StringImpl *)v26;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x1800000002;
  *(_QWORD *)(v27 + 8) = "additionalJettisonReason";
  *(_DWORD *)(v27 + 16) = 4;
  v1381 = (WTF::StringImpl *)v27;
  v28 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v28 = 0xE00000002;
  *(_QWORD *)(v28 + 8) = "jettisonReason";
  *(_DWORD *)(v28 + 16) = 4;
  v1382 = (WTF::StringImpl *)v28;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x300000002;
  *(_QWORD *)(v29 + 8) = "uid";
  *(_DWORD *)(v29 + 16) = 4;
  v1383 = (WTF::StringImpl *)v29;
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0x600000002;
  *(_QWORD *)(v30 + 8) = "events";
  *(_DWORD *)(v30 + 16) = 4;
  v1384 = (WTF::StringImpl *)v30;
  v31 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v31 = 0x700000002;
  *(_QWORD *)(v31 + 8) = "summary";
  *(_DWORD *)(v31 + 16) = 4;
  v1385 = (WTF::StringImpl *)v31;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0xC00000002;
  *(_QWORD *)(v32 + 8) = "isWatchpoint";
  *(_DWORD *)(v32 + 16) = 4;
  v1386 = (WTF::StringImpl *)v32;
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0x600000002;
  *(_QWORD *)(v33 + 8) = "detail";
  *(_DWORD *)(v33 + 16) = 4;
  v1387 = (WTF::StringImpl *)v33;
  v34 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v34 = 0x400000002;
  *(_QWORD *)(v34 + 8) = "time";
  *(_DWORD *)(v34 + 16) = 4;
  v1388 = (WTF::StringImpl *)v34;
  v35 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v35 = 0x200000002;
  *(_QWORD *)(v35 + 8) = "id";
  *(_DWORD *)(v35 + 16) = 4;
  v1389 = (WTF::StringImpl *)v35;
  v36 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v36 = 0x600000002;
  *(_QWORD *)(v36 + 8) = "header";
  *(_DWORD *)(v36 + 16) = 4;
  v1390 = (WTF::StringImpl *)v36;
  v37 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v37 = 0x500000002;
  *(_QWORD *)(v37 + 8) = "count";
  *(_DWORD *)(v37 + 16) = 4;
  v1391 = (WTF::StringImpl *)v37;
  v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v38 = 0x500000001;
  v38[2] = 0;
  v1336 = v38;
  v1337 = v38 + 2;
  v38[3] = 0;
  v38[4] = 0;
  v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  v45 = v39;
  *v39 = 0x600000001;
  v39[2] = 0;
  v1346 = v39 + 2;
  v39[3] = 0;
  v1341 = v2;
  if (*((_QWORD *)v2 + 2))
  {
    v46 = 0;
    v47 = 0;
    v1345 = v39;
    while (1)
    {
      if (v46 >> 3 >= *((unsigned int *)v2 + 9))
      {
        __break(0xC471u);
        JUMPOUT(0x198882938);
      }
      v48 = *(_QWORD *)(*((_QWORD *)v2 + 3) + 8 * (v46 >> 3));
      v49 = v46 & 7;
      v50 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v50 = 0x500000001;
      *(_QWORD *)(v50 + 16) = 0;
      v51 = (uint64_t *)(v50 + 16);
      *(_QWORD *)(v50 + 24) = 0;
      *(_QWORD *)(v50 + 32) = 0;
      v1354 = v48 + (v49 << 6);
      v52 = (double)*(unint64_t *)(v1354 + 32);
      v53 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v53 = 0x200000001;
      v53[1] = v52;
      v1394 = (WTF *)v53;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v50 + 16), (WTF::AtomStringImpl *)&v1360, (const WTF::StringImpl *)&v1394, v54, v55, v56, v57, v58, (uint64_t)&v1395);
      if ((_BYTE)v1397)
      {
        v66 = (uint64_t *)(v50 + 24);
        v67 = *(unsigned int *)(v50 + 36);
        if ((_DWORD)v67 == *(_DWORD *)(v50 + 32))
        {
          v235 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, v67 + 1, (unint64_t)&v1360);
          v67 = *(unsigned int *)(v50 + 36);
          v236 = *(_QWORD *)(v50 + 24);
          v237 = *v235;
          if (*v235)
            *v237 += 2;
          *(_QWORD *)(v236 + 8 * v67) = v237;
        }
        else
        {
          v68 = *v66;
          v69 = v1360;
          if (v1360)
            *(_DWORD *)v1360 += 2;
          *(_QWORD *)(v68 + 8 * v67) = v69;
        }
        *(_DWORD *)(v50 + 36) = v67 + 1;
      }
      v70 = v1394;
      v1394 = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 1)
          WTF::JSONImpl::Value::operator delete(v70, v59, v60, v61, v62, v63, v64, v65);
        else
          --*(_DWORD *)v70;
      }
      v71 = *(_QWORD *)(v48 + (v49 << 6) + 40);
      if (v71)
        WTF::fromUTF8Impl<false>(v71 + 16, *(_QWORD *)(v71 + 8), (uint64_t *)&v1393);
      else
        v1393 = 0;
      v72 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v72 = 0x400000001;
      v78 = v1393;
      *((_QWORD *)v72 + 1) = v1393;
      if (v78)
        *(_DWORD *)v78 += 2;
      v1394 = v72;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v51, (WTF::AtomStringImpl *)&v1366, (const WTF::StringImpl *)&v1394, v73, v74, v75, v76, v77, (uint64_t)&v1395);
      if ((_BYTE)v1397)
      {
        v86 = (uint64_t *)(v50 + 24);
        v87 = *(unsigned int *)(v50 + 36);
        if ((_DWORD)v87 == *(_DWORD *)(v50 + 32))
        {
          v238 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v86, v87 + 1, (unint64_t)&v1366);
          v87 = *(unsigned int *)(v50 + 36);
          v239 = *(_QWORD *)(v50 + 24);
          v240 = *v238;
          if (*v238)
            *v240 += 2;
          *(_QWORD *)(v239 + 8 * v87) = v240;
        }
        else
        {
          v88 = *v86;
          v89 = v1366;
          if (v1366)
            *(_DWORD *)v1366 += 2;
          *(_QWORD *)(v88 + 8 * v87) = v89;
        }
        *(_DWORD *)(v50 + 36) = v87 + 1;
      }
      v90 = v1394;
      v1394 = 0;
      if (v90)
      {
        if (*(_DWORD *)v90 == 1)
          WTF::JSONImpl::Value::operator delete(v90, v79, v80, v81, v82, v83, v84, v85);
        else
          --*(_DWORD *)v90;
      }
      v91 = v1393;
      v1393 = 0;
      if (v91)
      {
        if (*(_DWORD *)v91 == 2)
        {
          WTF::StringImpl::~StringImpl(v91, v79, v80, v81, v82, v83, v84, v85);
          WTF::fastFree(v201, v202, v203, v204, v205, v206, v207, v208);
        }
        else
        {
          *(_DWORD *)v91 -= 2;
        }
      }
      v92 = *(_QWORD *)(v48 + (v49 << 6) + 48);
      if (v92)
        WTF::fromUTF8Impl<false>(v92 + 16, *(_QWORD *)(v92 + 8), (uint64_t *)&v1393);
      else
        v1393 = 0;
      v93 = dword_1ECF4C488;
      if (dword_1ECF4C488 && v1393 && *((_DWORD *)v1393 + 1) > dword_1ECF4C488)
      {
        v1342 = v49;
        v1343 = v48;
        v94 = (dword_1ECF4C488 - 1);
        if (dword_1ECF4C488 - 1 < 0
          || (v95 = dword_1ECF4C488, __OFADD__((_DWORD)v94, 1))
          || dword_1ECF4C488 > 0x7FFFFFEF
          || (v96 = v47,
              v97 = *((_DWORD *)v1393 + 4),
              v98 = (int8x16_t *)*((_QWORD *)v1393 + 1),
              WTF::tryFastCompactMalloc((WTF *)(2 * dword_1ECF4C488 + 20), &v1395),
              (v106 = v1395) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198882930);
        }
        v107 = (_WORD *)((char *)v1395 + 20);
        *(_DWORD *)v1395 = 2;
        *((_DWORD *)v106 + 1) = v95;
        *((_QWORD *)v106 + 1) = (char *)v106 + 20;
        *((_DWORD *)v106 + 4) = 0;
        if ((v97 & 4) != 0)
        {
          if (v94 >= 0x40)
          {
            v225 = (char *)&v107[v94 & 0xFFFFFFC0];
            v250 = (char *)v106 + 20;
            do
            {
              v1400.val[0] = *v98;
              v251 = v98[1];
              v1401.val[0] = v98[2];
              v252 = v98[3];
              v98 += 4;
              v1403.val[1] = 0u;
              v1403.val[0] = v252;
              v1401.val[1] = 0u;
              v1402.val[0] = v251;
              v1400.val[1] = 0u;
              v253 = v250;
              vst2q_s8(v253, v1400);
              v253 += 32;
              v1402.val[1] = 0u;
              vst2q_s8(v253, v1402);
              v254 = v250 + 64;
              vst2q_s8(v254, v1401);
              v255 = v250 + 96;
              vst2q_s8(v255, v1403);
              v250 += 128;
            }
            while (v250 != v225);
          }
          else
          {
            v225 = (char *)v106 + 20;
          }
          while (v225 != (char *)&v107[v94])
          {
            v226 = v98->u8[0];
            v98 = (int8x16_t *)((char *)v98 + 1);
            *(_WORD *)v225 = v226;
            v225 += 2;
          }
        }
        else if (v93 == 2)
        {
          *v107 = v98->i16[0];
        }
        else if (v93 != 1)
        {
          memcpy((char *)v106 + 20, v98, 2 * v94);
        }
        v107[v94] = 8230;
        v108 = v1393;
        v1393 = v106;
        v48 = v1343;
        v45 = v1345;
        v47 = v96;
        v49 = v1342;
        if (v108)
        {
          if (*(_DWORD *)v108 == 2)
          {
            WTF::StringImpl::~StringImpl(v108, v99, v100, v101, v102, v103, v104, v105);
            WTF::fastFree(v227, v228, v229, v230, v231, v232, v233, v234);
          }
          else
          {
            *(_DWORD *)v108 -= 2;
          }
        }
      }
      v109 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v109 = 0x400000001;
      v115 = v1393;
      *((_QWORD *)v109 + 1) = v1393;
      if (v115)
        *(_DWORD *)v115 += 2;
      v1394 = v109;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v51, (WTF::AtomStringImpl *)&v1367, (const WTF::StringImpl *)&v1394, v110, v111, v112, v113, v114, (uint64_t)&v1395);
      if ((_BYTE)v1397)
      {
        v123 = (uint64_t *)(v50 + 24);
        v124 = *(unsigned int *)(v50 + 36);
        if ((_DWORD)v124 == *(_DWORD *)(v50 + 32))
        {
          v241 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v123, v124 + 1, (unint64_t)&v1367);
          v124 = *(unsigned int *)(v50 + 36);
          v242 = *(_QWORD *)(v50 + 24);
          v243 = *v241;
          if (*v241)
            *v243 += 2;
          *(_QWORD *)(v242 + 8 * v124) = v243;
        }
        else
        {
          v125 = *v123;
          v126 = v1367;
          if (v1367)
            *(_DWORD *)v1367 += 2;
          *(_QWORD *)(v125 + 8 * v124) = v126;
        }
        *(_DWORD *)(v50 + 36) = v124 + 1;
      }
      v127 = v1394;
      v1394 = 0;
      if (v127)
      {
        if (*(_DWORD *)v127 == 1)
          WTF::JSONImpl::Value::operator delete(v127, v116, v117, v118, v119, v120, v121, v122);
        else
          --*(_DWORD *)v127;
      }
      v1395 = (WTF *)off_1E3572250;
      v1396 = (WTF *)v1398;
      v1397 = xmmword_199122F80;
      v1398[0] = 0;
      v128 = *(_DWORD *)(v48 + (v49 << 6) + 56);
      v129 = WTF::integerToSixCharacterHashString::table[(v128 / 0xF04 - 62 * ((69273667 * (unint64_t)(v128 / 0xF04)) >> 32))];
      v130 = WTF::integerToSixCharacterHashString::table[(unsigned __int16)(v128 / 0x3A2F8 - 62 * ((unsigned __int16)((16913 * (v128 / 0x3A2F8)) >> 16) >> 4))];
      v131 = WTF::integerToSixCharacterHashString::table[(unsigned __int16)(v128 / 0xE17810 - 62 * ((1058 * (v128 / 0xE17810)) >> 16))];
      v132 = WTF::integerToSixCharacterHashString::table[v128 / 0x369B13E0uLL];
      WORD2(v1394) = (((unint64_t)WTF::integerToSixCharacterHashString::table[v128 % 0x3E] << 40) | ((unint64_t)WTF::integerToSixCharacterHashString::table[v128 / 0x3E - 62 * (((138547333 * (unint64_t)(v128 / 0x3E)) >> 32) >> 1)] << 32)) >> 32;
      LODWORD(v1394) = (v130 << 16) | (v129 << 24) | (v131 << 8) | v132;
      WTF::PrintStream::printf((WTF::PrintStream *)&v1395, "%.*s", 6, (const char *)&v1394);
      (*((void (**)(WTF::PrintStream *__hidden))v1395 + 5))((WTF::PrintStream *)&v1395);
      (*((void (**)(WTF::PrintStream *__hidden))v1395 + 5))((WTF::PrintStream *)&v1395);
      v140 = v1396;
      if (v1396)
      {
        v141 = v47;
        v142 = v1397;
        if ((unint64_t)v1397 >= 0xFFFFFFFFFFFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x198882948);
        }
        if ((_QWORD)v1397 == -17)
        {
          __break(0xC471u);
          JUMPOUT(0x198882950);
        }
        v143 = v49;
        v144 = v48;
        v145 = WTF::fastMalloc((WTF *)(v1397 + 17));
        *(_DWORD *)v145 = 1;
        *(_QWORD *)(v145 + 8) = v142;
        memcpy((void *)(v145 + 16), v140, v142);
        *(_BYTE *)(v145 + 16 + v142) = 0;
        if (v1396 != (WTF *)v1398)
          WTF::fastFree((unint64_t)v1396, v146, v147, v148, v149, v150, v151, v152);
        v47 = v141;
        WTF::fromUTF8Impl<false>(v145 + 16, *(_QWORD *)(v145 + 8), (uint64_t *)&v1392);
        v45 = v1345;
      }
      else
      {
        v143 = v49;
        v144 = v48;
        WTF::fastFree(0, v133, v134, v135, v136, v137, v138, v139);
        v145 = 0;
        v1392 = 0;
      }
      v153 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v153 = 0x400000001;
      v159 = v1392;
      *((_QWORD *)v153 + 1) = v1392;
      if (v159)
        *(_DWORD *)v159 += 2;
      v1394 = v153;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v51, (WTF::AtomStringImpl *)&v1365, (const WTF::StringImpl *)&v1394, v154, v155, v156, v157, v158, (uint64_t)&v1395);
      if ((_BYTE)v1397)
      {
        v168 = (uint64_t *)(v50 + 24);
        v169 = *(unsigned int *)(v50 + 36);
        if ((_DWORD)v169 == *(_DWORD *)(v50 + 32))
        {
          v244 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v168, v169 + 1, (unint64_t)&v1365);
          v169 = *(unsigned int *)(v50 + 36);
          v245 = *(_QWORD *)(v50 + 24);
          v246 = *v244;
          if (*v244)
            *v246 += 2;
          *(_QWORD *)(v245 + 8 * v169) = v246;
        }
        else
        {
          v170 = *v168;
          v171 = v1365;
          if (v1365)
            *(_DWORD *)v1365 += 2;
          *(_QWORD *)(v170 + 8 * v169) = v171;
        }
        *(_DWORD *)(v50 + 36) = v169 + 1;
      }
      v172 = v1394;
      v1394 = 0;
      if (v172)
      {
        if (*(_DWORD *)v172 == 1)
          WTF::JSONImpl::Value::operator delete(v172, v160, v161, v162, v163, v164, v165, v166);
        else
          --*(_DWORD *)v172;
      }
      v173 = v1392;
      v1392 = 0;
      if (!v173)
        goto LABEL_77;
      if (*(_DWORD *)v173 != 2)
        break;
      WTF::StringImpl::~StringImpl(v173, v160, v161, v162, v163, v164, v165, v166);
      WTF::fastFree(v209, v210, v211, v212, v213, v214, v215, v216);
      if (v140)
      {
LABEL_78:
        if (*(_DWORD *)v145 == 1)
          WTF::fastFree(v145, v160, v161, v162, v163, v164, v165, v166);
        else
          --*(_DWORD *)v145;
      }
LABEL_80:
      LODWORD(v167) = *(_DWORD *)(v144 + (v143 << 6) + 60);
      v174 = (double)v167;
      v175 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v175 = 0x200000001;
      v175[1] = v174;
      v1394 = (WTF *)v175;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v51, (WTF::AtomStringImpl *)&v1368, (const WTF::StringImpl *)&v1394, v176, v177, v178, v179, v180, (uint64_t)&v1395);
      if ((_BYTE)v1397)
      {
        v188 = (uint64_t *)(v50 + 24);
        v189 = *(unsigned int *)(v50 + 36);
        if ((_DWORD)v189 == *(_DWORD *)(v50 + 32))
        {
          v247 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v188, v189 + 1, (unint64_t)&v1368);
          v189 = *(unsigned int *)(v50 + 36);
          v248 = *(_QWORD *)(v50 + 24);
          v249 = *v247;
          if (*v247)
            *v249 += 2;
          *(_QWORD *)(v248 + 8 * v189) = v249;
        }
        else
        {
          v190 = *v188;
          v191 = v1368;
          if (v1368)
            *(_DWORD *)v1368 += 2;
          *(_QWORD *)(v190 + 8 * v189) = v191;
        }
        *(_DWORD *)(v50 + 36) = v189 + 1;
      }
      v192 = v1394;
      v1394 = 0;
      if (v192)
      {
        if (*(_DWORD *)v192 == 1)
          WTF::JSONImpl::Value::operator delete(v192, v181, v182, v183, v184, v185, v186, v187);
        else
          --*(_DWORD *)v192;
      }
      JSC::Profiler::BytecodeSequence::addSequenceProperties((uint64_t *)v1354, &v1356, v50);
      v1395 = (WTF *)v50;
      v195 = v1393;
      v1393 = 0;
      if (v195)
      {
        if (*(_DWORD *)v195 == 2)
        {
          WTF::StringImpl::~StringImpl(v195, v193, v194, v40, v41, v42, v43, v44);
          WTF::fastFree(v217, v218, v219, v220, v221, v222, v223, v224);
        }
        else
        {
          *(_DWORD *)v195 -= 2;
        }
      }
      v196 = *((unsigned int *)v45 + 7);
      if ((_DWORD)v196 == *((_DWORD *)v45 + 6))
      {
        v197 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1346, v196 + 1, (unint64_t)&v1395);
        v196 = *((unsigned int *)v45 + 7);
        v198 = (_QWORD *)(v45[2] + 8 * v196);
      }
      else
      {
        v198 = (_QWORD *)(*v1346 + 8 * v196);
        v197 = (uint64_t *)&v1395;
      }
      v199 = *v197;
      *v197 = 0;
      *v198 = v199;
      *((_DWORD *)v45 + 7) = v196 + 1;
      v200 = v1395;
      v1395 = 0;
      if (v200)
      {
        if (*(_DWORD *)v200 == 1)
          WTF::JSONImpl::Value::operator delete(v200, v193, v194, v40, v41, v42, v43, v44);
        else
          --*(_DWORD *)v200;
      }
      v2 = v1341;
      v46 = ++v47;
      if (*((_QWORD *)v1341 + 2) <= (unint64_t)v47)
        goto LABEL_137;
    }
    *(_DWORD *)v173 -= 2;
LABEL_77:
    if (v140)
      goto LABEL_78;
    goto LABEL_80;
  }
LABEL_137:
  v1394 = (WTF *)v45;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v1337, (WTF::AtomStringImpl *)&v1359, (const WTF::StringImpl *)&v1394, v40, v41, v42, v43, v44, (uint64_t)&v1395);
  if ((_BYTE)v1397)
  {
    v263 = v1336;
    v264 = v1336 + 3;
    v265 = *((unsigned int *)v1336 + 9);
    if ((_DWORD)v265 == *((_DWORD *)v1336 + 8))
    {
      v1326 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v264, v265 + 1, (unint64_t)&v1359);
      v263 = v1336;
      v265 = *((unsigned int *)v1336 + 9);
      v1327 = v1336[3];
      v1328 = *v1326;
      if (*v1326)
        *v1328 += 2;
      *(_QWORD *)(v1327 + 8 * v265) = v1328;
    }
    else
    {
      v266 = *v264;
      v267 = v1359;
      if (v1359)
        *(_DWORD *)v1359 += 2;
      *(_QWORD *)(v266 + 8 * v265) = v267;
    }
    *((_DWORD *)v263 + 9) = v265 + 1;
  }
  v268 = v1394;
  v1394 = 0;
  if (v268)
  {
    if (*(_DWORD *)v268 == 1)
      WTF::JSONImpl::Value::operator delete(v268, v256, v257, v258, v259, v260, v261, v262);
    else
      --*(_DWORD *)v268;
  }
  v269 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  v275 = (WTF *)v269;
  *v269 = 0x600000001;
  v269[2] = 0;
  v1339 = v269 + 2;
  v269[3] = 0;
  v276 = v1341;
  if (*((_DWORD *)v1341 + 15))
  {
    v277 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v1338 = (WTF *)v269;
    do
    {
      v278 = *(_QWORD *)(*((_QWORD *)v276 + 6) + 8 * v277);
      v279 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)(v279 + 16) = 0;
      *(_QWORD *)v279 = 0x500000001;
      *(_QWORD *)(v279 + 24) = 0;
      *(_QWORD *)(v279 + 32) = 0;
      v1353 = v278;
      v280 = (double)*(unint64_t *)(*(_QWORD *)(v278 + 8) + 32);
      v281 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v281 = 0x200000001;
      v281[1] = v280;
      v1394 = (WTF *)v281;
      v1347 = (uint64_t *)(v279 + 16);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v279 + 16), (WTF::AtomStringImpl *)&v1360, (const WTF::StringImpl *)&v1394, v282, v283, v284, v285, v286, (uint64_t)&v1395);
      v1348 = v279;
      if ((_BYTE)v1397)
      {
        v294 = (uint64_t *)(v279 + 24);
        v295 = *(unsigned int *)(v279 + 36);
        if ((_DWORD)v295 == *(_DWORD *)(v279 + 32))
        {
          v811 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v294, v295 + 1, (unint64_t)&v1360);
          v295 = *(unsigned int *)(v279 + 36);
          v812 = *(_QWORD *)(v279 + 24);
          v813 = *v811;
          if (*v811)
            *v813 += 2;
          *(_QWORD *)(v812 + 8 * v295) = v813;
        }
        else
        {
          v296 = *v294;
          v297 = v1360;
          if (v1360)
            *(_DWORD *)v1360 += 2;
          *(_QWORD *)(v296 + 8 * v295) = v297;
        }
        *(_DWORD *)(v279 + 36) = v295 + 1;
      }
      v298 = v1394;
      v1394 = 0;
      if (v298)
      {
        if (*(_DWORD *)v298 == 1)
          WTF::JSONImpl::Value::operator delete(v298, v287, v288, v289, v290, v291, v292, v293);
        else
          --*(_DWORD *)v298;
      }
      v1395 = (WTF *)off_1E3572250;
      v1396 = (WTF *)v1398;
      v1397 = xmmword_199122F80;
      v1398[0] = 0;
      v299 = *(int *)(v278 + 4);
      if (v299 >= 6)
      {
        __break(0xC471u);
        JUMPOUT(0x198882940);
      }
      WTF::PrintStream::printf((WTF::PrintStream *)&v1395, "%s", off_1E3596DE0[v299]);
      (*((void (**)(WTF::PrintStream *__hidden))v1395 + 5))((WTF::PrintStream *)&v1395);
      (*((void (**)(WTF::PrintStream *__hidden))v1395 + 5))((WTF::PrintStream *)&v1395);
      v307 = v1396;
      v1340 = v277;
      if (v1396)
      {
        v308 = v1397;
        if ((unint64_t)v1397 >= 0xFFFFFFFFFFFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x198882958);
        }
        if ((_QWORD)v1397 == -17)
        {
          __break(0xC471u);
          JUMPOUT(0x198882960);
        }
        v309 = WTF::fastMalloc((WTF *)(v1397 + 17));
        *(_DWORD *)v309 = 1;
        *(_QWORD *)(v309 + 8) = v308;
        memcpy((void *)(v309 + 16), v307, v308);
        *(_BYTE *)(v309 + 16 + v308) = 0;
        if (v1396 != (WTF *)v1398)
          WTF::fastFree((unint64_t)v1396, v310, v311, v312, v313, v314, v315, v316);
        WTF::fromUTF8Impl<false>(v309 + 16, *(_QWORD *)(v309 + 8), (uint64_t *)&v1393);
      }
      else
      {
        WTF::fastFree(0, v300, v301, v302, v303, v304, v305, v306);
        v309 = 0;
        v1393 = 0;
      }
      v317 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v317 = 0x400000001;
      v323 = v1393;
      *((_QWORD *)v317 + 1) = v1393;
      if (v323)
        *(_DWORD *)v323 += 2;
      v1394 = v317;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v1347, (WTF::AtomStringImpl *)&v1369, (const WTF::StringImpl *)&v1394, v318, v319, v320, v321, v322, (uint64_t)&v1395);
      v331 = v1348;
      if ((_BYTE)v1397)
      {
        v332 = (uint64_t *)(v1348 + 24);
        v333 = *(unsigned int *)(v1348 + 36);
        if ((_DWORD)v333 == *(_DWORD *)(v1348 + 32))
        {
          v814 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v332, v333 + 1, (unint64_t)&v1369);
          v331 = v1348;
          v333 = *(unsigned int *)(v1348 + 36);
          v815 = *(_QWORD *)(v1348 + 24);
          v816 = *v814;
          if (*v814)
            *v816 += 2;
          *(_QWORD *)(v815 + 8 * v333) = v816;
        }
        else
        {
          v334 = *v332;
          v335 = v1369;
          if (v1369)
            *(_DWORD *)v1369 += 2;
          *(_QWORD *)(v334 + 8 * v333) = v335;
        }
        *(_DWORD *)(v331 + 36) = v333 + 1;
      }
      v336 = v1394;
      v1394 = 0;
      if (v336)
      {
        if (*(_DWORD *)v336 == 1)
          WTF::JSONImpl::Value::operator delete(v336, v324, v325, v326, v327, v328, v329, v330);
        else
          --*(_DWORD *)v336;
      }
      v337 = v1393;
      v1393 = 0;
      if (v337)
      {
        if (*(_DWORD *)v337 == 2)
        {
          WTF::StringImpl::~StringImpl(v337, v324, v325, v326, v327, v328, v329, v330);
          WTF::fastFree(v787, v788, v789, v790, v791, v792, v793, v794);
          if (!v307)
            goto LABEL_182;
          goto LABEL_180;
        }
        *(_DWORD *)v337 -= 2;
      }
      if (!v307)
        goto LABEL_182;
LABEL_180:
      if (*(_DWORD *)v309 == 1)
        WTF::fastFree(v309, v324, v325, v326, v327, v328, v329, v330);
      else
        --*(_DWORD *)v309;
LABEL_182:
      v343 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v343 = 0x600000001;
      *(_QWORD *)(v343 + 16) = 0;
      v344 = (_QWORD *)(v343 + 16);
      *(_QWORD *)(v343 + 24) = 0;
      v345 = *(unsigned int *)(v1353 + 28);
      if ((_DWORD)v345)
      {
        v346 = *(uint64_t **)(v1353 + 16);
        v347 = 40 * v345;
        do
        {
          v348 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v348 = 0x500000001;
          *(_QWORD *)(v348 + 24) = 0;
          *(_QWORD *)(v348 + 32) = 0;
          *(_QWORD *)(v348 + 16) = 0;
          v349 = (double)*(unint64_t *)(v346[4] + 32);
          v350 = (double *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v350 = 0x200000001;
          v350[1] = v349;
          v1394 = (WTF *)v350;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v348 + 16), (WTF::AtomStringImpl *)&v1360, (const WTF::StringImpl *)&v1394, v351, v352, v353, v354, v355, (uint64_t)&v1395);
          if ((_BYTE)v1397)
          {
            v363 = (uint64_t *)(v348 + 24);
            v364 = *(unsigned int *)(v348 + 36);
            if ((_DWORD)v364 == *(_DWORD *)(v348 + 32))
            {
              v374 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v363, v364 + 1, (unint64_t)&v1360);
              v364 = *(unsigned int *)(v348 + 36);
              v375 = *(_QWORD *)(v348 + 24);
              v376 = *v374;
              if (*v374)
                *v376 += 2;
              *(_QWORD *)(v375 + 8 * v364) = v376;
            }
            else
            {
              v365 = *v363;
              v366 = v1360;
              if (v1360)
                *(_DWORD *)v1360 += 2;
              *(_QWORD *)(v365 + 8 * v364) = v366;
            }
            *(_DWORD *)(v348 + 36) = v364 + 1;
          }
          v367 = v1394;
          v1394 = 0;
          if (v367)
          {
            if (*(_DWORD *)v367 == 1)
              WTF::JSONImpl::Value::operator delete(v367, v356, v357, v358, v359, v360, v361, v362);
            else
              --*(_DWORD *)v367;
          }
          JSC::Profiler::BytecodeSequence::addSequenceProperties(v346, &v1356, v348);
          v1395 = (WTF *)v348;
          v370 = *(unsigned int *)(v343 + 28);
          if ((_DWORD)v370 == *(_DWORD *)(v343 + 24))
          {
            v371 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v344, v370 + 1, (unint64_t)&v1395);
            v370 = *(unsigned int *)(v343 + 28);
            v372 = (uint64_t *)(*(_QWORD *)(v343 + 16) + 8 * v370);
            v348 = *v371;
          }
          else
          {
            v372 = (uint64_t *)(*v344 + 8 * v370);
            v371 = (uint64_t *)&v1395;
          }
          *v371 = 0;
          *v372 = v348;
          *(_DWORD *)(v343 + 28) = v370 + 1;
          v373 = v1395;
          v1395 = 0;
          if (v373)
          {
            if (*(_DWORD *)v373 == 1)
              WTF::JSONImpl::Value::operator delete(v373, v368, v369, v338, v339, v340, v341, v342);
            else
              --*(_DWORD *)v373;
          }
          v346 += 5;
          v347 -= 40;
        }
        while (v347);
      }
      v1394 = (WTF *)v343;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v1347, (WTF::AtomStringImpl *)&v1372, (const WTF::StringImpl *)&v1394, v338, v339, v340, v341, v342, (uint64_t)&v1395);
      v384 = v1348;
      if ((_BYTE)v1397)
      {
        v385 = (uint64_t *)(v1348 + 24);
        v386 = *(unsigned int *)(v1348 + 36);
        if ((_DWORD)v386 == *(_DWORD *)(v1348 + 32))
        {
          v817 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v385, v386 + 1, (unint64_t)&v1372);
          v384 = v1348;
          v386 = *(unsigned int *)(v1348 + 36);
          v818 = *(_QWORD *)(v1348 + 24);
          v819 = *v817;
          if (*v817)
            *v819 += 2;
          *(_QWORD *)(v818 + 8 * v386) = v819;
        }
        else
        {
          v387 = *v385;
          v388 = v1372;
          if (v1372)
            *(_DWORD *)v1372 += 2;
          *(_QWORD *)(v387 + 8 * v386) = v388;
        }
        *(_DWORD *)(v384 + 36) = v386 + 1;
      }
      v389 = v1394;
      v1394 = 0;
      if (v389)
      {
        if (*(_DWORD *)v389 == 1)
          WTF::JSONImpl::Value::operator delete(v389, v377, v378, v379, v380, v381, v382, v383);
        else
          --*(_DWORD *)v389;
      }
      v395 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v395 = 0x600000001;
      *(_QWORD *)(v395 + 16) = 0;
      v396 = (_QWORD *)(v395 + 16);
      *(_QWORD *)(v395 + 24) = 0;
      v397 = *(_DWORD *)(v1353 + 44);
      if (v397)
      {
        v398 = *(_QWORD *)(v1353 + 32);
        v1351 = v398 + 40 * v397;
        do
        {
          v399 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v399 = 0x500000001;
          *(_QWORD *)(v399 + 16) = 0;
          v400 = (uint64_t *)(v399 + 16);
          *(_QWORD *)(v399 + 24) = 0;
          *(_QWORD *)(v399 + 32) = 0;
          v406 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v406 = 0x600000001;
          *(_QWORD *)(v406 + 16) = 0;
          v407 = (_QWORD *)(v406 + 16);
          *(_QWORD *)(v406 + 24) = 0;
          if (*(_DWORD *)(v398 + 12))
          {
            for (i = 0; i < *(unsigned int *)(v398 + 12); ++i)
            {
              JSC::Profiler::Origin::toJSON((_DWORD *)(*(_QWORD *)v398 + 16 * i), (uint64_t)&v1356, (uint64_t *)&v1395);
              v411 = *(unsigned int *)(v406 + 28);
              if ((_DWORD)v411 == *(_DWORD *)(v406 + 24))
              {
                v412 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v407, v411 + 1, (unint64_t)&v1395);
                v411 = *(unsigned int *)(v406 + 28);
                v413 = (_QWORD *)(*(_QWORD *)(v406 + 16) + 8 * v411);
              }
              else
              {
                v413 = (_QWORD *)(*v407 + 8 * v411);
                v412 = (uint64_t *)&v1395;
              }
              v414 = *v412;
              *v412 = 0;
              *v413 = v414;
              *(_DWORD *)(v406 + 28) = v411 + 1;
              v415 = (unint64_t)v1395;
              v1395 = 0;
              if (!v415)
                continue;
              if (*(_DWORD *)v415 == 1)
              {
                switch(*(_DWORD *)(v415 + 4))
                {
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                    goto LABEL_228;
                  case 4:
                    goto LABEL_246;
                  case 5:
                    WTF::JSONImpl::Object::~Object((WTF::JSONImpl::Object *)v415, (WTF::AtomStringImpl *)v409, v410, v401, v402, v403, v404, v405);
                    goto LABEL_228;
                  case 6:
                    v1349 = v400;
                    v418 = v395;
                    v419 = v396;
                    v420 = *(unsigned int *)(v415 + 28);
                    if ((_DWORD)v420)
                    {
                      v421 = *(uint64_t **)(v415 + 16);
                      v422 = 8 * v420;
                      do
                      {
                        v423 = *v421;
                        *v421 = 0;
                        if (v423)
                          WTF::RefCounted<WTF::JSONImpl::Value>::deref(v423, (WTF::AtomStringImpl *)v409, v410, v401, v402, v403, v404, v405);
                        ++v421;
                        v422 -= 8;
                      }
                      while (v422);
                    }
                    v409 = *(_QWORD *)(v415 + 16);
                    v396 = v419;
                    v395 = v418;
                    v400 = v1349;
                    if (!v409)
                      goto LABEL_245;
                    *(_QWORD *)(v415 + 16) = 0;
                    *(_DWORD *)(v415 + 24) = 0;
                    v424 = *(_QWORD *)(StatusReg + 752);
                    if (v424)
                    {
                      if (v409 >> 43
                        || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v409 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v409)) & 1) == 0)
                      {
                        if (v409 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v409 >> 24)
                        {
                          v401 = 0;
LABEL_259:
                          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v424, v409, 1, v401, v402, v403, v404, v405);
                          goto LABEL_245;
                        }
                        v401 = (*(_DWORD *)((char *)off_1ECF425F8
                                          + ((((v409 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                          + 24) >> (2 * ((BYTE3(v409) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                        if ((_DWORD)v401 != 1)
                          goto LABEL_259;
                      }
                      v425 = *(unsigned int *)(v424 + 8000);
                      if (v425 >= 0x3E7)
                      {
                        pas_thread_local_cache_append_deallocation_slow(v424, v409, (os_unfair_lock_s *)5, v401, v402, v403, v404, v405);
                      }
                      else
                      {
                        *(_QWORD *)(v424 + 8 * v425) = v409 | 0x5000000000000;
                        *(_DWORD *)(v424 + 8000) = v425 + 1;
                      }
                    }
                    else
                    {
                      pas_try_deallocate_slow_no_cache(v409, (uint64_t)&bmalloc_heap_config, 1);
                    }
LABEL_245:
                    if (*(_DWORD *)(v415 + 4) == 4)
                    {
LABEL_246:
                      v426 = *(WTF::StringImpl **)(v415 + 8);
                      if (v426)
                      {
                        if (*(_DWORD *)v426 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v426, (WTF::AtomStringImpl *)v409, v410, v401, v402, v403, v404, v405);
                          WTF::fastFree(v427, v428, v429, v430, v431, v432, v433, v434);
                        }
                        else
                        {
                          *(_DWORD *)v426 -= 2;
                        }
                      }
                    }
LABEL_228:
                    v416 = *(_QWORD *)(StatusReg + 752);
                    if (v416)
                    {
                      if (!(v415 >> 43)
                        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v415 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v415)) & 1) != 0)
                      {
LABEL_231:
                        v417 = *(unsigned int *)(v416 + 8000);
                        if (v417 >= 0x3E7)
                        {
                          pas_thread_local_cache_append_deallocation_slow(v416, v415, (os_unfair_lock_s *)5, v401, v402, v403, v404, v405);
                        }
                        else
                        {
                          *(_QWORD *)(v416 + 8 * v417) = v415 | 0x5000000000000;
                          *(_DWORD *)(v416 + 8000) = v417 + 1;
                        }
                        break;
                      }
                      if (v415 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v415 >> 24)
                      {
                        v401 = 0;
                      }
                      else
                      {
                        v401 = (*(_DWORD *)((char *)off_1ECF425F8
                                          + ((((v415 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                          + 24) >> (2 * ((BYTE3(v415) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                        if ((_DWORD)v401 == 1)
                          goto LABEL_231;
                      }
                      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v416, v415, 1, v401, v402, v403, v404, v405);
                    }
                    else
                    {
                      pas_try_deallocate_slow_no_cache(v415, (uint64_t)&bmalloc_heap_config, 1);
                    }
                    break;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x1988828DCLL);
                }
              }
              else
              {
                --*(_DWORD *)v415;
              }
            }
          }
          v1394 = (WTF *)v406;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v400, (WTF::AtomStringImpl *)&v1373, (const WTF::StringImpl *)&v1394, v401, v402, v403, v404, v405, (uint64_t)&v1395);
          if ((_BYTE)v1397)
          {
            v442 = (uint64_t *)(v399 + 24);
            v443 = *(unsigned int *)(v399 + 36);
            if ((_DWORD)v443 == *(_DWORD *)(v399 + 32))
            {
              v469 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v442, v443 + 1, (unint64_t)&v1373);
              v443 = *(unsigned int *)(v399 + 36);
              v470 = *(_QWORD *)(v399 + 24);
              v471 = *v469;
              if (*v469)
                *v471 += 2;
              *(_QWORD *)(v470 + 8 * v443) = v471;
            }
            else
            {
              v444 = *v442;
              v445 = v1373;
              if (v1373)
                *(_DWORD *)v1373 += 2;
              *(_QWORD *)(v444 + 8 * v443) = v445;
            }
            *(_DWORD *)(v399 + 36) = v443 + 1;
          }
          v446 = v1394;
          v1394 = 0;
          if (v446)
          {
            if (*(_DWORD *)v446 == 1)
              WTF::JSONImpl::Value::operator delete(v446, v435, v436, v437, v438, v439, v440, v441);
            else
              --*(_DWORD *)v446;
          }
          v447 = *(_QWORD *)(v398 + 32);
          if (v447)
            WTF::fromUTF8Impl<false>(v447 + 16, *(_QWORD *)(v447 + 8), (uint64_t *)&v1393);
          else
            v1393 = 0;
          v448 = (WTF *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v448 = 0x400000001;
          v454 = v1393;
          *((_QWORD *)v448 + 1) = v1393;
          if (v454)
            *(_DWORD *)v454 += 2;
          v1394 = v448;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v400, (WTF::AtomStringImpl *)&v1363, (const WTF::StringImpl *)&v1394, v449, v450, v451, v452, v453, (uint64_t)&v1395);
          if ((_BYTE)v1397)
          {
            v457 = (uint64_t *)(v399 + 24);
            v458 = *(unsigned int *)(v399 + 36);
            if ((_DWORD)v458 == *(_DWORD *)(v399 + 32))
            {
              v472 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v457, v458 + 1, (unint64_t)&v1363);
              v458 = *(unsigned int *)(v399 + 36);
              v473 = *(_QWORD *)(v399 + 24);
              v474 = *v472;
              if (*v472)
                *v474 += 2;
              *(_QWORD *)(v473 + 8 * v458) = v474;
            }
            else
            {
              v459 = *v457;
              v460 = v1363;
              if (v1363)
                *(_DWORD *)v1363 += 2;
              *(_QWORD *)(v459 + 8 * v458) = v460;
            }
            *(_DWORD *)(v399 + 36) = v458 + 1;
          }
          v461 = v1394;
          v1394 = 0;
          if (v461)
          {
            if (*(_DWORD *)v461 == 1)
              WTF::JSONImpl::Value::operator delete(v461, v455, v456, v390, v391, v392, v393, v394);
            else
              --*(_DWORD *)v461;
          }
          v462 = (unint64_t)v1393;
          v1393 = 0;
          if (v462)
          {
            if (*(_DWORD *)v462 == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v462, v455, v456, v390, v391, v392, v393, v394);
              v467 = *(_QWORD *)(StatusReg + 752);
              if (!v467)
              {
                pas_try_deallocate_slow_no_cache(v462, (uint64_t)&bmalloc_heap_config, 1);
                goto LABEL_289;
              }
              if (v462 >> 43
                || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v462 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v462)) & 1) == 0)
              {
                if (v462 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v462 >> 24)
                {
                  v390 = 0;
LABEL_315:
                  bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v467, v462, 1, v390, v391, v392, v393, v394);
                  goto LABEL_289;
                }
                v390 = (*(_DWORD *)((char *)off_1ECF425F8
                                  + ((((v462 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                  + 24) >> (2 * ((BYTE3(v462) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v390 != 1)
                  goto LABEL_315;
              }
              v468 = *(unsigned int *)(v467 + 8000);
              if (v468 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v467, v462, (os_unfair_lock_s *)5, v390, v391, v392, v393, v394);
              }
              else
              {
                *(_QWORD *)(v467 + 8 * v468) = v462 | 0x5000000000000;
                *(_DWORD *)(v467 + 8000) = v468 + 1;
              }
            }
            else
            {
              *(_DWORD *)v462 -= 2;
            }
          }
LABEL_289:
          v1395 = (WTF *)v399;
          v463 = *(unsigned int *)(v395 + 28);
          if ((_DWORD)v463 == *(_DWORD *)(v395 + 24))
          {
            v464 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v396, v463 + 1, (unint64_t)&v1395);
            v463 = *(unsigned int *)(v395 + 28);
            v465 = (uint64_t *)(*(_QWORD *)(v395 + 16) + 8 * v463);
            v399 = *v464;
          }
          else
          {
            v465 = (uint64_t *)(*v396 + 8 * v463);
            v464 = (uint64_t *)&v1395;
          }
          *v464 = 0;
          *v465 = v399;
          *(_DWORD *)(v395 + 28) = v463 + 1;
          v466 = v1395;
          v1395 = 0;
          if (v466)
          {
            if (*(_DWORD *)v466 == 1)
              WTF::JSONImpl::Value::operator delete(v466, v455, v456, v390, v391, v392, v393, v394);
            else
              --*(_DWORD *)v466;
          }
          v398 += 40;
        }
        while (v398 != v1351);
      }
      v1394 = (WTF *)v395;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v1347, (WTF::AtomStringImpl *)&v1364, (const WTF::StringImpl *)&v1394, v390, v391, v392, v393, v394, (uint64_t)&v1395);
      v482 = v1348;
      if ((_BYTE)v1397)
      {
        v483 = (uint64_t *)(v1348 + 24);
        v484 = *(unsigned int *)(v1348 + 36);
        if ((_DWORD)v484 == *(_DWORD *)(v1348 + 32))
        {
          v820 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v483, v484 + 1, (unint64_t)&v1364);
          v482 = v1348;
          v484 = *(unsigned int *)(v1348 + 36);
          v821 = *(_QWORD *)(v1348 + 24);
          v822 = *v820;
          if (*v820)
            *v822 += 2;
          *(_QWORD *)(v821 + 8 * v484) = v822;
        }
        else
        {
          v485 = *v483;
          v486 = v1364;
          if (v1364)
            *(_DWORD *)v1364 += 2;
          *(_QWORD *)(v485 + 8 * v484) = v486;
        }
        *(_DWORD *)(v482 + 36) = v484 + 1;
      }
      v487 = v1394;
      v1394 = 0;
      if (v487)
      {
        if (*(_DWORD *)v487 == 1)
          WTF::JSONImpl::Value::operator delete(v487, v475, v476, v477, v478, v479, v480, v481);
        else
          --*(_DWORD *)v487;
      }
      v488 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      v494 = v488;
      *v488 = 0x600000001;
      v488[2] = 0;
      v1352 = v488 + 2;
      v488[3] = 0;
      v495 = *(_QWORD *)(v1353 + 48);
      if (!v495)
      {
        v498 = 0;
        LODWORD(v496) = 0;
LABEL_339:
        v497 = v495 + 40 * v496;
        goto LABEL_340;
      }
      v496 = *(unsigned int *)(v495 - 4);
      v497 = v495 + 40 * v496;
      if (!*(_DWORD *)(v495 - 12))
      {
        v498 = v495 + 40 * v496;
        goto LABEL_339;
      }
      v498 = *(_QWORD *)(v1353 + 48);
      if ((_DWORD)v496)
      {
        v499 = 40 * v496;
        v498 = *(_QWORD *)(v1353 + 48);
        while (1)
        {
          v1396 = (WTF *)1;
          if (*(_DWORD *)(v498 + 12))
          {
            if (*(_DWORD *)(v498 + 12) != 1 || *(_DWORD *)(*(_QWORD *)v498 + 8) != -2)
              break;
          }
          v498 += 40;
          v499 -= 40;
          if (!v499)
          {
            v498 = v497;
            break;
          }
        }
      }
LABEL_340:
      if (v495)
        v495 += 40 * *(unsigned int *)(v495 - 4);
      if (v495 != v498)
      {
        v1344 = v488;
        v1350 = v495;
        while (1)
        {
          v500 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v500 = 0x500000001;
          *(_QWORD *)(v500 + 16) = 0;
          v501 = (uint64_t *)(v500 + 16);
          *(_QWORD *)(v500 + 24) = 0;
          *(_QWORD *)(v500 + 32) = 0;
          v507 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v507 = 0x600000001;
          *(_QWORD *)(v507 + 16) = 0;
          v508 = (_QWORD *)(v507 + 16);
          *(_QWORD *)(v507 + 24) = 0;
          if (*(_DWORD *)(v498 + 12))
            break;
LABEL_391:
          v1394 = (WTF *)v507;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v501, (WTF::AtomStringImpl *)&v1373, (const WTF::StringImpl *)&v1394, v502, v503, v504, v505, v506, (uint64_t)&v1395);
          if ((_BYTE)v1397)
          {
            v541 = (uint64_t *)(v500 + 24);
            v542 = *(unsigned int *)(v500 + 36);
            if ((_DWORD)v542 == *(_DWORD *)(v500 + 32))
            {
              v565 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v541, v542 + 1, (unint64_t)&v1373);
              v542 = *(unsigned int *)(v500 + 36);
              v566 = *(_QWORD *)(v500 + 24);
              v567 = *v565;
              if (*v565)
                *v567 += 2;
              *(_QWORD *)(v566 + 8 * v542) = v567;
            }
            else
            {
              v543 = *v541;
              v544 = v1373;
              if (v1373)
                *(_DWORD *)v1373 += 2;
              *(_QWORD *)(v543 + 8 * v542) = v544;
            }
            *(_DWORD *)(v500 + 36) = v542 + 1;
          }
          v545 = v1394;
          v1394 = 0;
          if (v545)
          {
            if (*(_DWORD *)v545 == 1)
              WTF::JSONImpl::Value::operator delete(v545, v534, v535, v536, v537, v538, v539, v540);
            else
              --*(_DWORD *)v545;
          }
          v546 = (double)**(unint64_t **)(v498 + 32);
          v547 = (double *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v547 = 0x200000001;
          v547[1] = v546;
          v1394 = (WTF *)v547;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v501, (WTF::AtomStringImpl *)&v1376, (const WTF::StringImpl *)&v1394, v548, v549, v550, v551, v552, (uint64_t)&v1395);
          if ((_BYTE)v1397)
          {
            v555 = (uint64_t *)(v500 + 24);
            v556 = *(unsigned int *)(v500 + 36);
            if ((_DWORD)v556 == *(_DWORD *)(v500 + 32))
            {
              v568 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v555, v556 + 1, (unint64_t)&v1376);
              v556 = *(unsigned int *)(v500 + 36);
              v569 = *(_QWORD *)(v500 + 24);
              v570 = *v568;
              if (*v568)
                *v570 += 2;
              *(_QWORD *)(v569 + 8 * v556) = v570;
            }
            else
            {
              v557 = *v555;
              v558 = v1376;
              if (v1376)
                *(_DWORD *)v1376 += 2;
              *(_QWORD *)(v557 + 8 * v556) = v558;
            }
            *(_DWORD *)(v500 + 36) = v556 + 1;
          }
          v559 = v1394;
          v1394 = 0;
          if (v559)
          {
            if (*(_DWORD *)v559 == 1)
              WTF::JSONImpl::Value::operator delete(v559, v553, v554, v489, v490, v491, v492, v493);
            else
              --*(_DWORD *)v559;
          }
          v1395 = (WTF *)v500;
          v560 = *((unsigned int *)v494 + 7);
          if ((_DWORD)v560 == *((_DWORD *)v494 + 6))
          {
            v561 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1352, v560 + 1, (unint64_t)&v1395);
            v560 = *((unsigned int *)v494 + 7);
            v562 = (uint64_t *)(v494[2] + 8 * v560);
            v500 = *v561;
          }
          else
          {
            v562 = (uint64_t *)(*v1352 + 8 * v560);
            v561 = (uint64_t *)&v1395;
          }
          *v561 = 0;
          *v562 = v500;
          *((_DWORD *)v494 + 7) = v560 + 1;
          v563 = v1395;
          v1395 = 0;
          if (v563)
          {
            if (*(_DWORD *)v563 == 1)
              WTF::JSONImpl::Value::operator delete(v563, v553, v554, v489, v490, v491, v492, v493);
            else
              --*(_DWORD *)v563;
          }
          v564 = v498 + 40;
          v498 = v497;
          if (v564 != v497)
          {
            v498 = v564;
            while (1)
            {
              v1396 = (WTF *)1;
              if (*(_DWORD *)(v498 + 12))
              {
                if (*(_DWORD *)(v498 + 12) != 1 || *(_DWORD *)(*(_QWORD *)v498 + 8) != -2)
                  break;
              }
              v498 += 40;
              if (v498 == v497)
              {
                v498 = v497;
                break;
              }
            }
          }
          if (v498 == v1350)
            goto LABEL_433;
        }
        v509 = 0;
        while (2)
        {
          JSC::Profiler::Origin::toJSON((_DWORD *)(*(_QWORD *)v498 + 16 * v509), (uint64_t)&v1356, (uint64_t *)&v1395);
          v512 = *(unsigned int *)(v507 + 28);
          if ((_DWORD)v512 == *(_DWORD *)(v507 + 24))
          {
            v513 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v508, v512 + 1, (unint64_t)&v1395);
            v512 = *(unsigned int *)(v507 + 28);
            v514 = (_QWORD *)(*(_QWORD *)(v507 + 16) + 8 * v512);
          }
          else
          {
            v514 = (_QWORD *)(*v508 + 8 * v512);
            v513 = (uint64_t *)&v1395;
          }
          v515 = *v513;
          *v513 = 0;
          *v514 = v515;
          *(_DWORD *)(v507 + 28) = v512 + 1;
          v516 = (unint64_t)v1395;
          v1395 = 0;
          if (v516)
          {
            if (*(_DWORD *)v516 != 1)
            {
              --*(_DWORD *)v516;
              goto LABEL_352;
            }
            switch(*(_DWORD *)(v516 + 4))
            {
              case 0:
              case 1:
              case 2:
              case 3:
                goto LABEL_355;
              case 4:
                goto LABEL_373;
              case 5:
                WTF::JSONImpl::Object::~Object((WTF::JSONImpl::Object *)v516, (WTF::AtomStringImpl *)v510, v511, v502, v503, v504, v505, v506);
                goto LABEL_355;
              case 6:
                v519 = *(unsigned int *)(v516 + 28);
                if ((_DWORD)v519)
                {
                  v520 = *(uint64_t **)(v516 + 16);
                  v521 = 8 * v519;
                  do
                  {
                    v522 = *v520;
                    *v520 = 0;
                    if (v522)
                      WTF::RefCounted<WTF::JSONImpl::Value>::deref(v522, (WTF::AtomStringImpl *)v510, v511, v502, v503, v504, v505, v506);
                    ++v520;
                    v521 -= 8;
                  }
                  while (v521);
                }
                v510 = *(_QWORD *)(v516 + 16);
                v494 = v1344;
                if (!v510)
                  goto LABEL_372;
                *(_QWORD *)(v516 + 16) = 0;
                *(_DWORD *)(v516 + 24) = 0;
                v523 = *(_QWORD *)(StatusReg + 752);
                if (v523)
                {
                  if (v510 >> 43
                    || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v510 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v510)) & 1) == 0)
                  {
                    if (v510 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v510 >> 24)
                    {
                      v502 = 0;
LABEL_386:
                      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v523, v510, 1, v502, v503, v504, v505, v506);
                      goto LABEL_372;
                    }
                    v502 = (*(_DWORD *)((char *)off_1ECF425F8
                                      + ((((v510 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                      + 24) >> (2 * ((BYTE3(v510) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                    if ((_DWORD)v502 != 1)
                      goto LABEL_386;
                  }
                  v524 = *(unsigned int *)(v523 + 8000);
                  if (v524 >= 0x3E7)
                  {
                    pas_thread_local_cache_append_deallocation_slow(v523, v510, (os_unfair_lock_s *)5, v502, v503, v504, v505, v506);
                  }
                  else
                  {
                    *(_QWORD *)(v523 + 8 * v524) = v510 | 0x5000000000000;
                    *(_DWORD *)(v523 + 8000) = v524 + 1;
                  }
                }
                else
                {
                  pas_try_deallocate_slow_no_cache(v510, (uint64_t)&bmalloc_heap_config, 1);
                }
LABEL_372:
                if (*(_DWORD *)(v516 + 4) == 4)
                {
LABEL_373:
                  v525 = *(WTF::StringImpl **)(v516 + 8);
                  if (v525)
                  {
                    if (*(_DWORD *)v525 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v525, (WTF::AtomStringImpl *)v510, v511, v502, v503, v504, v505, v506);
                      WTF::fastFree(v526, v527, v528, v529, v530, v531, v532, v533);
                    }
                    else
                    {
                      *(_DWORD *)v525 -= 2;
                    }
                  }
                }
LABEL_355:
                v517 = *(_QWORD *)(StatusReg + 752);
                if (!v517)
                {
                  pas_try_deallocate_slow_no_cache(v516, (uint64_t)&bmalloc_heap_config, 1);
                  break;
                }
                if (!(v516 >> 43)
                  && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v516 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v516)) & 1) != 0)
                {
                  goto LABEL_358;
                }
                if (v516 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v516 >> 24)
                {
                  v502 = 0;
                  goto LABEL_380;
                }
                v502 = (*(_DWORD *)((char *)off_1ECF425F8
                                  + ((((v516 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                  + 24) >> (2 * ((BYTE3(v516) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v502 != 1)
                {
LABEL_380:
                  bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v517, v516, 1, v502, v503, v504, v505, v506);
                  break;
                }
LABEL_358:
                v518 = *(unsigned int *)(v517 + 8000);
                if (v518 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v517, v516, (os_unfair_lock_s *)5, v502, v503, v504, v505, v506);
                }
                else
                {
                  *(_QWORD *)(v517 + 8 * v518) = v516 | 0x5000000000000;
                  *(_DWORD *)(v517 + 8000) = v518 + 1;
                }
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x1988828FCLL);
            }
          }
LABEL_352:
          if (++v509 >= (unint64_t)*(unsigned int *)(v498 + 12))
            goto LABEL_391;
          continue;
        }
      }
LABEL_433:
      v1394 = (WTF *)v494;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v1347, (WTF::AtomStringImpl *)&v1361, (const WTF::StringImpl *)&v1394, v489, v490, v491, v492, v493, (uint64_t)&v1395);
      v578 = v1348;
      if ((_BYTE)v1397)
      {
        v579 = (uint64_t *)(v1348 + 24);
        v580 = *(unsigned int *)(v1348 + 36);
        if ((_DWORD)v580 == *(_DWORD *)(v1348 + 32))
        {
          v823 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v579, v580 + 1, (unint64_t)&v1361);
          v578 = v1348;
          v580 = *(unsigned int *)(v1348 + 36);
          v824 = *(_QWORD *)(v1348 + 24);
          v825 = *v823;
          if (*v823)
            *v825 += 2;
          *(_QWORD *)(v824 + 8 * v580) = v825;
        }
        else
        {
          v581 = *v579;
          v582 = v1361;
          if (v1361)
            *(_DWORD *)v1361 += 2;
          *(_QWORD *)(v581 + 8 * v580) = v582;
        }
        *(_DWORD *)(v578 + 36) = v580 + 1;
      }
      v583 = v1394;
      v1394 = 0;
      if (v583)
      {
        if (*(_DWORD *)v583 == 1)
          WTF::JSONImpl::Value::operator delete(v583, v571, v572, v573, v574, v575, v576, v577);
        else
          --*(_DWORD *)v583;
      }
      v589 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v589 = 0x600000001;
      *(_QWORD *)(v589 + 16) = 0;
      v590 = (_QWORD *)(v589 + 16);
      *(_QWORD *)(v589 + 24) = 0;
      v591 = *(unsigned int *)(v1353 + 68);
      if ((_DWORD)v591)
      {
        v592 = *(_QWORD *)(v1353 + 56);
        v593 = 16 * v591;
        do
        {
          JSC::Profiler::OSRExitSite::toJSON(v592, (uint64_t *)&v1395);
          v596 = *(unsigned int *)(v589 + 28);
          if ((_DWORD)v596 == *(_DWORD *)(v589 + 24))
          {
            v597 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v590, v596 + 1, (unint64_t)&v1395);
            v596 = *(unsigned int *)(v589 + 28);
            v598 = (_QWORD *)(*(_QWORD *)(v589 + 16) + 8 * v596);
          }
          else
          {
            v598 = (_QWORD *)(*v590 + 8 * v596);
            v597 = (uint64_t *)&v1395;
          }
          v599 = *v597;
          *v597 = 0;
          *v598 = v599;
          *(_DWORD *)(v589 + 28) = v596 + 1;
          v600 = v1395;
          v1395 = 0;
          if (v600)
          {
            if (*(_DWORD *)v600 == 1)
              WTF::JSONImpl::Value::operator delete(v600, v594, v595, v584, v585, v586, v587, v588);
            else
              --*(_DWORD *)v600;
          }
          v592 += 16;
          v593 -= 16;
        }
        while (v593);
      }
      v1394 = (WTF *)v589;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v1347, (WTF::AtomStringImpl *)&v1374, (const WTF::StringImpl *)&v1394, v584, v585, v586, v587, v588, (uint64_t)&v1395);
      v608 = v1348;
      if ((_BYTE)v1397)
      {
        v609 = (uint64_t *)(v1348 + 24);
        v610 = *(unsigned int *)(v1348 + 36);
        if ((_DWORD)v610 == *(_DWORD *)(v1348 + 32))
        {
          v826 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v609, v610 + 1, (unint64_t)&v1374);
          v608 = v1348;
          v610 = *(unsigned int *)(v1348 + 36);
          v827 = *(_QWORD *)(v1348 + 24);
          v828 = *v826;
          if (*v826)
            *v828 += 2;
          *(_QWORD *)(v827 + 8 * v610) = v828;
        }
        else
        {
          v611 = *v609;
          v612 = v1374;
          if (v1374)
            *(_DWORD *)v1374 += 2;
          *(_QWORD *)(v611 + 8 * v610) = v612;
        }
        *(_DWORD *)(v608 + 36) = v610 + 1;
      }
      v613 = v1394;
      v1394 = 0;
      if (v613)
      {
        if (*(_DWORD *)v613 == 1)
          WTF::JSONImpl::Value::operator delete(v613, v601, v602, v603, v604, v605, v606, v607);
        else
          --*(_DWORD *)v613;
      }
      v619 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v619 = 0x600000001;
      *(_QWORD *)(v619 + 16) = 0;
      v620 = (_QWORD *)(v619 + 16);
      *(_QWORD *)(v619 + 24) = 0;
      v621 = v1353;
      if (*(_QWORD *)(v1353 + 72))
      {
        v622 = 0;
        v623 = 1;
        do
        {
          if (v622 >> 3 >= *(unsigned int *)(v621 + 92))
          {
            __break(0xC471u);
            JUMPOUT(0x198882928);
          }
          JSC::Profiler::OSRExit::toJSON(*(_QWORD *)(*(_QWORD *)(v621 + 80) + 8 * (v622 >> 3)) + 48 * (v622 & 7), (uint64_t)&v1356, (uint64_t *)&v1395);
          v626 = *(unsigned int *)(v619 + 28);
          if ((_DWORD)v626 == *(_DWORD *)(v619 + 24))
          {
            v627 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v620, v626 + 1, (unint64_t)&v1395);
            v626 = *(unsigned int *)(v619 + 28);
            v628 = (_QWORD *)(*(_QWORD *)(v619 + 16) + 8 * v626);
          }
          else
          {
            v628 = (_QWORD *)(*v620 + 8 * v626);
            v627 = (uint64_t *)&v1395;
          }
          v629 = *v627;
          *v627 = 0;
          *v628 = v629;
          *(_DWORD *)(v619 + 28) = v626 + 1;
          v630 = v1395;
          v1395 = 0;
          if (v630)
          {
            if (*(_DWORD *)v630 == 1)
              WTF::JSONImpl::Value::operator delete(v630, v624, v625, v614, v615, v616, v617, v618);
            else
              --*(_DWORD *)v630;
          }
          v622 = v623;
          v621 = v1353;
        }
        while (*(_QWORD *)(v1353 + 72) > (unint64_t)v623++);
      }
      v1394 = (WTF *)v619;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v1347, (WTF::AtomStringImpl *)&v1375, (const WTF::StringImpl *)&v1394, v614, v615, v616, v617, v618, (uint64_t)&v1395);
      v640 = v1348;
      if ((_BYTE)v1397)
      {
        v641 = (uint64_t *)(v1348 + 24);
        v642 = *(unsigned int *)(v1348 + 36);
        if ((_DWORD)v642 == *(_DWORD *)(v1348 + 32))
        {
          v829 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v641, v642 + 1, (unint64_t)&v1375);
          v640 = v1348;
          v642 = *(unsigned int *)(v1348 + 36);
          v830 = *(_QWORD *)(v1348 + 24);
          v831 = *v829;
          if (*v829)
            *v831 += 2;
          *(_QWORD *)(v830 + 8 * v642) = v831;
        }
        else
        {
          v643 = *v641;
          v644 = v1375;
          if (v1375)
            *(_DWORD *)v1375 += 2;
          *(_QWORD *)(v643 + 8 * v642) = v644;
        }
        *(_DWORD *)(v640 + 36) = v642 + 1;
      }
      v645 = v1394;
      v1394 = 0;
      if (v645)
      {
        if (*(_DWORD *)v645 == 1)
          WTF::JSONImpl::Value::operator delete(v645, v632, v633, v634, v635, v636, v637, v638);
        else
          --*(_DWORD *)v645;
      }
      LODWORD(v639) = *(_DWORD *)(v1353 + 96);
      v646 = (double)v639;
      v647 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v647 = 0x200000001;
      v647[1] = v646;
      v1394 = (WTF *)v647;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v1347, (WTF::AtomStringImpl *)&v1379, (const WTF::StringImpl *)&v1394, v648, v649, v650, v651, v652, (uint64_t)&v1395);
      v661 = v1348;
      if ((_BYTE)v1397)
      {
        v662 = (uint64_t *)(v1348 + 24);
        v663 = *(unsigned int *)(v1348 + 36);
        if ((_DWORD)v663 == *(_DWORD *)(v1348 + 32))
        {
          v832 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v662, v663 + 1, (unint64_t)&v1379);
          v661 = v1348;
          v663 = *(unsigned int *)(v1348 + 36);
          v833 = *(_QWORD *)(v1348 + 24);
          v834 = *v832;
          if (*v832)
            *v834 += 2;
          *(_QWORD *)(v833 + 8 * v663) = v834;
        }
        else
        {
          v664 = *v662;
          v665 = v1379;
          if (v1379)
            *(_DWORD *)v1379 += 2;
          *(_QWORD *)(v664 + 8 * v663) = v665;
        }
        *(_DWORD *)(v661 + 36) = v663 + 1;
      }
      v666 = v1394;
      v1394 = 0;
      if (v666)
      {
        if (*(_DWORD *)v666 == 1)
          WTF::JSONImpl::Value::operator delete(v666, v653, v654, v655, v656, v657, v658, v659);
        else
          --*(_DWORD *)v666;
      }
      LODWORD(v660) = *(_DWORD *)(v1353 + 100);
      v667 = (double)v660;
      v668 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v668 = 0x200000001;
      v668[1] = v667;
      v1394 = (WTF *)v668;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v1347, (WTF::AtomStringImpl *)&v1380, (const WTF::StringImpl *)&v1394, v669, v670, v671, v672, v673, (uint64_t)&v1395);
      v682 = v1348;
      if ((_BYTE)v1397)
      {
        v683 = (uint64_t *)(v1348 + 24);
        v684 = *(unsigned int *)(v1348 + 36);
        if ((_DWORD)v684 == *(_DWORD *)(v1348 + 32))
        {
          v835 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v683, v684 + 1, (unint64_t)&v1380);
          v682 = v1348;
          v684 = *(unsigned int *)(v1348 + 36);
          v836 = *(_QWORD *)(v1348 + 24);
          v837 = *v835;
          if (*v835)
            *v837 += 2;
          *(_QWORD *)(v836 + 8 * v684) = v837;
        }
        else
        {
          v685 = *v683;
          v686 = v1380;
          if (v1380)
            *(_DWORD *)v1380 += 2;
          *(_QWORD *)(v685 + 8 * v684) = v686;
        }
        *(_DWORD *)(v682 + 36) = v684 + 1;
      }
      v687 = v1394;
      v1394 = 0;
      if (v687)
      {
        if (*(_DWORD *)v687 == 1)
          WTF::JSONImpl::Value::operator delete(v687, v674, v675, v676, v677, v678, v679, v680);
        else
          --*(_DWORD *)v687;
      }
      LODWORD(v681) = *(_DWORD *)(v1353 + 104);
      v688 = (double)v681;
      v689 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v689 = 0x200000001;
      v689[1] = v688;
      v1394 = (WTF *)v689;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v1347, (WTF::AtomStringImpl *)&v1378, (const WTF::StringImpl *)&v1394, v690, v691, v692, v693, v694, (uint64_t)&v1395);
      v702 = v1348;
      if ((_BYTE)v1397)
      {
        v703 = (uint64_t *)(v1348 + 24);
        v704 = *(unsigned int *)(v1348 + 36);
        if ((_DWORD)v704 == *(_DWORD *)(v1348 + 32))
        {
          v838 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v703, v704 + 1, (unint64_t)&v1378);
          v702 = v1348;
          v704 = *(unsigned int *)(v1348 + 36);
          v839 = *(_QWORD *)(v1348 + 24);
          v840 = *v838;
          if (*v838)
            *v840 += 2;
          *(_QWORD *)(v839 + 8 * v704) = v840;
        }
        else
        {
          v705 = *v703;
          v706 = v1378;
          if (v1378)
            *(_DWORD *)v1378 += 2;
          *(_QWORD *)(v705 + 8 * v704) = v706;
        }
        *(_DWORD *)(v702 + 36) = v704 + 1;
      }
      v707 = v1394;
      v1394 = 0;
      if (v707)
      {
        if (*(_DWORD *)v707 == 1)
          WTF::JSONImpl::Value::operator delete(v707, v695, v696, v697, v698, v699, v700, v701);
        else
          --*(_DWORD *)v707;
      }
      v1395 = (WTF *)off_1E3572250;
      v1396 = (WTF *)v1398;
      v1397 = xmmword_199122F80;
      v1398[0] = 0;
      v708 = *(int *)(v1353 + 108);
      if (v708 >= 0xB)
      {
        __break(0xC471u);
        JUMPOUT(0x19888291CLL);
      }
      WTF::PrintStream::printf((WTF::PrintStream *)&v1395, "%s", off_1E3596E10[v708]);
      (*((void (**)(WTF::PrintStream *__hidden))v1395 + 5))((WTF::PrintStream *)&v1395);
      (*((void (**)(WTF::PrintStream *__hidden))v1395 + 5))((WTF::PrintStream *)&v1395);
      v716 = v1396;
      if (v1396)
      {
        v717 = v1397;
        if ((unint64_t)v1397 >= 0xFFFFFFFFFFFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x198882968);
        }
        if ((_QWORD)v1397 == -17)
        {
          __break(0xC471u);
          JUMPOUT(0x198882970);
        }
        v718 = WTF::fastMalloc((WTF *)(v1397 + 17));
        *(_DWORD *)v718 = 1;
        *(_QWORD *)(v718 + 8) = v717;
        memcpy((void *)(v718 + 16), v716, v717);
        *(_BYTE *)(v718 + 16 + v717) = 0;
        if (v1396 != (WTF *)v1398)
          WTF::fastFree((unint64_t)v1396, v719, v720, v721, v722, v723, v724, v725);
        WTF::fromUTF8Impl<false>(v718 + 16, *(_QWORD *)(v718 + 8), (uint64_t *)&v1393);
      }
      else
      {
        WTF::fastFree(0, v709, v710, v711, v712, v713, v714, v715);
        v718 = 0;
        v1393 = 0;
      }
      v726 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v726 = 0x400000001;
      v732 = v1393;
      *((_QWORD *)v726 + 1) = v1393;
      if (v732)
        *(_DWORD *)v732 += 2;
      v1394 = v726;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v1347, (WTF::AtomStringImpl *)&v1382, (const WTF::StringImpl *)&v1394, v727, v728, v729, v730, v731, (uint64_t)&v1395);
      v740 = v1348;
      if ((_BYTE)v1397)
      {
        v741 = (uint64_t *)(v1348 + 24);
        v742 = *(unsigned int *)(v1348 + 36);
        if ((_DWORD)v742 == *(_DWORD *)(v1348 + 32))
        {
          v841 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v741, v742 + 1, (unint64_t)&v1382);
          v740 = v1348;
          v742 = *(unsigned int *)(v1348 + 36);
          v842 = *(_QWORD *)(v1348 + 24);
          v843 = *v841;
          if (*v841)
            *v843 += 2;
          *(_QWORD *)(v842 + 8 * v742) = v843;
        }
        else
        {
          v743 = *v741;
          v744 = v1382;
          if (v1382)
            *(_DWORD *)v1382 += 2;
          *(_QWORD *)(v743 + 8 * v742) = v744;
        }
        *(_DWORD *)(v740 + 36) = v742 + 1;
      }
      v745 = v1394;
      v1394 = 0;
      if (v745)
      {
        if (*(_DWORD *)v745 == 1)
          WTF::JSONImpl::Value::operator delete(v745, v733, v734, v735, v736, v737, v738, v739);
        else
          --*(_DWORD *)v745;
      }
      v746 = v1393;
      v1393 = 0;
      if (v746)
      {
        if (*(_DWORD *)v746 == 2)
        {
          WTF::StringImpl::~StringImpl(v746, v733, v734, v735, v736, v737, v738, v739);
          WTF::fastFree(v795, v796, v797, v798, v799, v800, v801, v802);
        }
        else
        {
          *(_DWORD *)v746 -= 2;
        }
      }
      v747 = v1353;
      if (v716)
      {
        if (*(_DWORD *)v718 == 1)
        {
          WTF::fastFree(v718, v733, v734, v735, v736, v737, v738, v739);
          v747 = v1353;
        }
        else
        {
          --*(_DWORD *)v718;
        }
      }
      v748 = *(_QWORD *)(v747 + 112);
      v275 = v1338;
      if (v748)
      {
        WTF::fromUTF8Impl<false>(v748 + 16, *(_QWORD *)(v748 + 8), (uint64_t *)&v1393);
        v749 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v749 = 0x400000001;
        v755 = v1393;
        *((_QWORD *)v749 + 1) = v1393;
        if (v755)
          *(_DWORD *)v755 += 2;
        v1394 = v749;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v1347, (WTF::AtomStringImpl *)&v1381, (const WTF::StringImpl *)&v1394, v750, v751, v752, v753, v754, (uint64_t)&v1395);
        v763 = v1348;
        if ((_BYTE)v1397)
        {
          v764 = (uint64_t *)(v1348 + 24);
          v765 = *(unsigned int *)(v1348 + 36);
          if ((_DWORD)v765 == *(_DWORD *)(v1348 + 32))
          {
            v847 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v764, v765 + 1, (unint64_t)&v1381);
            v763 = v1348;
            v765 = *(unsigned int *)(v1348 + 36);
            v848 = *(_QWORD *)(v1348 + 24);
            v849 = *v847;
            if (*v847)
              *v849 += 2;
            *(_QWORD *)(v848 + 8 * v765) = v849;
          }
          else
          {
            v766 = *v764;
            v767 = v1381;
            if (v1381)
              *(_DWORD *)v1381 += 2;
            *(_QWORD *)(v766 + 8 * v765) = v767;
          }
          *(_DWORD *)(v763 + 36) = v765 + 1;
        }
        v768 = v1394;
        v1394 = 0;
        if (v768)
        {
          if (*(_DWORD *)v768 == 1)
            WTF::JSONImpl::Value::operator delete(v768, v756, v757, v758, v759, v760, v761, v762);
          else
            --*(_DWORD *)v768;
        }
        v769 = v1393;
        v1393 = 0;
        if (v769)
        {
          if (*(_DWORD *)v769 == 2)
          {
            WTF::StringImpl::~StringImpl(v769, v756, v757, v758, v759, v760, v761, v762);
            WTF::fastFree(v803, v804, v805, v806, v807, v808, v809, v810);
          }
          else
          {
            *(_DWORD *)v769 -= 2;
          }
        }
        v747 = v1353;
      }
      JSC::Profiler::UID::toJSON((_QWORD *)(v747 + 120), &v1394);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v1347, (WTF::AtomStringImpl *)&v1383, (const WTF::StringImpl *)&v1394, v770, v771, v772, v773, v774, (uint64_t)&v1395);
      v777 = (WTF *)v1348;
      if ((_BYTE)v1397)
      {
        v778 = (uint64_t *)(v1348 + 24);
        v779 = *(unsigned int *)(v1348 + 36);
        if ((_DWORD)v779 == *(_DWORD *)(v1348 + 32))
        {
          v844 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v778, v779 + 1, (unint64_t)&v1383);
          v777 = (WTF *)v1348;
          v779 = *(unsigned int *)(v1348 + 36);
          v845 = *(_QWORD *)(v1348 + 24);
          v846 = *v844;
          if (*v844)
            *v846 += 2;
          *(_QWORD *)(v845 + 8 * v779) = v846;
        }
        else
        {
          v780 = *v778;
          v781 = v1383;
          if (v1383)
            *(_DWORD *)v1383 += 2;
          *(_QWORD *)(v780 + 8 * v779) = v781;
        }
        *((_DWORD *)v777 + 9) = v779 + 1;
      }
      v782 = v1394;
      v1394 = 0;
      if (v782)
      {
        if (*(_DWORD *)v782 == 1)
        {
          WTF::JSONImpl::Value::operator delete(v782, v775, v776, v270, v271, v272, v273, v274);
          v777 = (WTF *)v1348;
        }
        else
        {
          --*(_DWORD *)v782;
        }
      }
      v1395 = v777;
      v783 = *((unsigned int *)v1338 + 7);
      if ((_DWORD)v783 == *((_DWORD *)v1338 + 6))
      {
        v784 = (WTF **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1339, v783 + 1, (unint64_t)&v1395);
        v783 = *((unsigned int *)v1338 + 7);
        v785 = (WTF **)(*((_QWORD *)v1338 + 2) + 8 * v783);
        v777 = *v784;
      }
      else
      {
        v785 = (WTF **)(*v1339 + 8 * v783);
        v784 = &v1395;
      }
      *v784 = 0;
      *v785 = v777;
      *((_DWORD *)v1338 + 7) = v783 + 1;
      v786 = v1395;
      v1395 = 0;
      if (v786)
      {
        if (*(_DWORD *)v786 == 1)
          WTF::JSONImpl::Value::operator delete(v786, v775, v776, v270, v271, v272, v273, v274);
        else
          --*(_DWORD *)v786;
      }
      v277 = v1340 + 1;
      v276 = v1341;
    }
    while (v1340 + 1 < (unint64_t)*((unsigned int *)v1341 + 15));
  }
  v1394 = v275;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v1337, (WTF::AtomStringImpl *)&v1371, (const WTF::StringImpl *)&v1394, v270, v271, v272, v273, v274, (uint64_t)&v1395);
  if ((_BYTE)v1397)
  {
    v857 = v1336;
    v858 = v1336 + 3;
    v859 = *((unsigned int *)v1336 + 9);
    if ((_DWORD)v859 == *((_DWORD *)v1336 + 8))
    {
      v1329 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v858, v859 + 1, (unint64_t)&v1371);
      v857 = v1336;
      v859 = *((unsigned int *)v1336 + 9);
      v1330 = v1336[3];
      v1331 = *v1329;
      if (*v1329)
        *v1331 += 2;
      *(_QWORD *)(v1330 + 8 * v859) = v1331;
    }
    else
    {
      v860 = *v858;
      v861 = v1371;
      if (v1371)
        *(_DWORD *)v1371 += 2;
      *(_QWORD *)(v860 + 8 * v859) = v861;
    }
    *((_DWORD *)v857 + 9) = v859 + 1;
  }
  v862 = v1394;
  v1394 = 0;
  if (v862)
  {
    if (*(_DWORD *)v862 == 1)
      WTF::JSONImpl::Value::operator delete(v862, v850, v851, v852, v853, v854, v855, v856);
    else
      --*(_DWORD *)v862;
  }
  v868 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v868 = 0x600000001;
  *(_QWORD *)(v868 + 16) = 0;
  v869 = (_QWORD *)(v868 + 16);
  *(_QWORD *)(v868 + 24) = 0;
  v870 = v1341;
  if (*((_DWORD *)v1341 + 21))
  {
    v871 = 0;
    v872 = 0;
    do
    {
      v873 = *((_QWORD *)v870 + 9);
      v874 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v874 = 0x500000001;
      *(_QWORD *)(v874 + 16) = 0;
      v875 = (uint64_t *)(v874 + 16);
      *(_QWORD *)(v874 + 24) = 0;
      *(_QWORD *)(v874 + 32) = 0;
      v876 = *(_QWORD *)(v873 + v871);
      v877 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v877 = 0x200000001;
      *((_QWORD *)v877 + 1) = v876;
      v1394 = v877;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v874 + 16), (WTF::AtomStringImpl *)&v1388, (const WTF::StringImpl *)&v1394, v878, v879, v880, v881, v882, (uint64_t)&v1395);
      if ((_BYTE)v1397)
      {
        v890 = (uint64_t *)(v874 + 24);
        v891 = *(unsigned int *)(v874 + 36);
        if ((_DWORD)v891 == *(_DWORD *)(v874 + 32))
        {
          v983 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v890, v891 + 1, (unint64_t)&v1388);
          v891 = *(unsigned int *)(v874 + 36);
          v984 = *(_QWORD *)(v874 + 24);
          v985 = *v983;
          if (*v983)
            *v985 += 2;
          *(_QWORD *)(v984 + 8 * v891) = v985;
        }
        else
        {
          v892 = *v890;
          v893 = v1388;
          if (v1388)
            *(_DWORD *)v1388 += 2;
          *(_QWORD *)(v892 + 8 * v891) = v893;
        }
        *(_DWORD *)(v874 + 36) = v891 + 1;
      }
      v894 = v1394;
      v1394 = 0;
      if (v894)
      {
        if (*(_DWORD *)v894 == 1)
          WTF::JSONImpl::Value::operator delete(v894, v883, v884, v885, v886, v887, v888, v889);
        else
          --*(_DWORD *)v894;
      }
      v895 = (double)*(unint64_t *)(*(_QWORD *)(v873 + v871 + 8) + 32);
      v896 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v896 = 0x200000001;
      v896[1] = v895;
      v1394 = (WTF *)v896;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v875, (WTF::AtomStringImpl *)&v1360, (const WTF::StringImpl *)&v1394, v897, v898, v899, v900, v901, (uint64_t)&v1395);
      if ((_BYTE)v1397)
      {
        v909 = (uint64_t *)(v874 + 24);
        v910 = *(unsigned int *)(v874 + 36);
        if ((_DWORD)v910 == *(_DWORD *)(v874 + 32))
        {
          v986 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v909, v910 + 1, (unint64_t)&v1360);
          v910 = *(unsigned int *)(v874 + 36);
          v987 = *(_QWORD *)(v874 + 24);
          v988 = *v986;
          if (*v986)
            *v988 += 2;
          *(_QWORD *)(v987 + 8 * v910) = v988;
        }
        else
        {
          v911 = *v909;
          v912 = v1360;
          if (v1360)
            *(_DWORD *)v1360 += 2;
          *(_QWORD *)(v911 + 8 * v910) = v912;
        }
        *(_DWORD *)(v874 + 36) = v910 + 1;
      }
      v913 = v1394;
      v1394 = 0;
      if (v913)
      {
        if (*(_DWORD *)v913 == 1)
          WTF::JSONImpl::Value::operator delete(v913, v902, v903, v904, v905, v906, v907, v908);
        else
          --*(_DWORD *)v913;
      }
      v914 = *(_QWORD *)(v873 + v871 + 16);
      if (v914)
      {
        v1393 = *(WTF::StringImpl **)(v914 + 120);
        JSC::Profiler::UID::toJSON(&v1393, &v1394);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v875, (WTF::AtomStringImpl *)&v1370, (const WTF::StringImpl *)&v1394, v915, v916, v917, v918, v919, (uint64_t)&v1395);
        if ((_BYTE)v1397)
        {
          v927 = (uint64_t *)(v874 + 24);
          v928 = *(unsigned int *)(v874 + 36);
          if ((_DWORD)v928 == *(_DWORD *)(v874 + 32))
          {
            v992 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v927, v928 + 1, (unint64_t)&v1370);
            v928 = *(unsigned int *)(v874 + 36);
            v993 = *(_QWORD *)(v874 + 24);
            v994 = *v992;
            if (*v992)
              *v994 += 2;
            *(_QWORD *)(v993 + 8 * v928) = v994;
          }
          else
          {
            v929 = *v927;
            v930 = v1370;
            if (v1370)
              *(_DWORD *)v1370 += 2;
            *(_QWORD *)(v929 + 8 * v928) = v930;
          }
          *(_DWORD *)(v874 + 36) = v928 + 1;
        }
        v931 = v1394;
        v1394 = 0;
        if (v931)
        {
          if (*(_DWORD *)v931 == 1)
            WTF::JSONImpl::Value::operator delete(v931, v920, v921, v922, v923, v924, v925, v926);
          else
            --*(_DWORD *)v931;
        }
      }
      v932 = *(_QWORD *)(v873 + v871 + 24);
      if (v932)
      {
        v933 = strlen(*(const char **)(v873 + v871 + 24));
        WTF::fromUTF8Impl<false>(v932, v933, (uint64_t *)&v1393);
      }
      else
      {
        v1393 = 0;
      }
      v934 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v934 = 0x400000001;
      v940 = v1393;
      *((_QWORD *)v934 + 1) = v1393;
      if (v940)
        *(_DWORD *)v940 += 2;
      v1394 = v934;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v875, (WTF::AtomStringImpl *)&v1385, (const WTF::StringImpl *)&v1394, v935, v936, v937, v938, v939, (uint64_t)&v1395);
      if ((_BYTE)v1397)
      {
        v943 = (uint64_t *)(v874 + 24);
        v944 = *(unsigned int *)(v874 + 36);
        if ((_DWORD)v944 == *(_DWORD *)(v874 + 32))
        {
          v989 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v943, v944 + 1, (unint64_t)&v1385);
          v944 = *(unsigned int *)(v874 + 36);
          v990 = *(_QWORD *)(v874 + 24);
          v991 = *v989;
          if (*v989)
            *v991 += 2;
          *(_QWORD *)(v990 + 8 * v944) = v991;
        }
        else
        {
          v945 = *v943;
          v946 = v1385;
          if (v1385)
            *(_DWORD *)v1385 += 2;
          *(_QWORD *)(v945 + 8 * v944) = v946;
        }
        *(_DWORD *)(v874 + 36) = v944 + 1;
      }
      v947 = v1394;
      v1394 = 0;
      if (v947)
      {
        if (*(_DWORD *)v947 == 1)
          WTF::JSONImpl::Value::operator delete(v947, v941, v942, v863, v864, v865, v866, v867);
        else
          --*(_DWORD *)v947;
      }
      v948 = v1393;
      v1393 = 0;
      if (v948)
      {
        if (*(_DWORD *)v948 == 2)
        {
          WTF::StringImpl::~StringImpl(v948, v941, v942, v863, v864, v865, v866, v867);
          WTF::fastFree(v967, v968, v969, v970, v971, v972, v973, v974);
        }
        else
        {
          *(_DWORD *)v948 -= 2;
        }
      }
      v949 = *(_QWORD *)(v873 + v871 + 32);
      if (v949)
      {
        v941 = *(WTF::AtomStringImpl **)(v949 + 8);
        if (v941)
        {
          WTF::fromUTF8Impl<false>(v949 + 16, (size_t)v941, (uint64_t *)&v1393);
          v950 = (WTF *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v950 = 0x400000001;
          v956 = v1393;
          *((_QWORD *)v950 + 1) = v1393;
          if (v956)
            *(_DWORD *)v956 += 2;
          v1394 = v950;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v875, (WTF::AtomStringImpl *)&v1387, (const WTF::StringImpl *)&v1394, v951, v952, v953, v954, v955, (uint64_t)&v1395);
          if ((_BYTE)v1397)
          {
            v957 = (uint64_t *)(v874 + 24);
            v958 = *(unsigned int *)(v874 + 36);
            if ((_DWORD)v958 == *(_DWORD *)(v874 + 32))
            {
              v995 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v957, v958 + 1, (unint64_t)&v1387);
              v958 = *(unsigned int *)(v874 + 36);
              v996 = *(_QWORD *)(v874 + 24);
              v997 = *v995;
              if (*v995)
                *v997 += 2;
              *(_QWORD *)(v996 + 8 * v958) = v997;
            }
            else
            {
              v959 = *v957;
              v960 = v1387;
              if (v1387)
                *(_DWORD *)v1387 += 2;
              *(_QWORD *)(v959 + 8 * v958) = v960;
            }
            *(_DWORD *)(v874 + 36) = v958 + 1;
          }
          v961 = v1394;
          v1394 = 0;
          if (v961)
          {
            if (*(_DWORD *)v961 == 1)
              WTF::JSONImpl::Value::operator delete(v961, v941, v942, v863, v864, v865, v866, v867);
            else
              --*(_DWORD *)v961;
          }
          v962 = v1393;
          v1393 = 0;
          if (v962)
          {
            if (*(_DWORD *)v962 == 2)
            {
              WTF::StringImpl::~StringImpl(v962, v941, v942, v863, v864, v865, v866, v867);
              WTF::fastFree(v975, v976, v977, v978, v979, v980, v981, v982);
            }
            else
            {
              *(_DWORD *)v962 -= 2;
            }
          }
        }
      }
      v1395 = (WTF *)v874;
      v963 = *(unsigned int *)(v868 + 28);
      if ((_DWORD)v963 == *(_DWORD *)(v868 + 24))
      {
        v964 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v869, v963 + 1, (unint64_t)&v1395);
        v963 = *(unsigned int *)(v868 + 28);
        v965 = (uint64_t *)(*(_QWORD *)(v868 + 16) + 8 * v963);
        v874 = *v964;
      }
      else
      {
        v965 = (uint64_t *)(*v869 + 8 * v963);
        v964 = (uint64_t *)&v1395;
      }
      *v964 = 0;
      *v965 = v874;
      *(_DWORD *)(v868 + 28) = v963 + 1;
      v966 = v1395;
      v1395 = 0;
      if (v966)
      {
        if (*(_DWORD *)v966 == 1)
          WTF::JSONImpl::Value::operator delete(v966, v941, v942, v863, v864, v865, v866, v867);
        else
          --*(_DWORD *)v966;
      }
      ++v872;
      v870 = v1341;
      v871 += 40;
    }
    while (v872 < *((unsigned int *)v1341 + 21));
  }
  v1394 = (WTF *)v868;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v1337, (WTF::AtomStringImpl *)&v1384, (const WTF::StringImpl *)&v1394, v863, v864, v865, v866, v867, (uint64_t)&v1395);
  v1005 = v1336;
  if ((_BYTE)v1397)
  {
    v1006 = v1336 + 3;
    v1007 = *((unsigned int *)v1336 + 9);
    if ((_DWORD)v1007 == *((_DWORD *)v1336 + 8))
    {
      v1332 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1006, v1007 + 1, (unint64_t)&v1384);
      v1005 = v1336;
      v1007 = *((unsigned int *)v1336 + 9);
      v1333 = v1336[3];
      v1334 = *v1332;
      if (*v1332)
        *v1334 += 2;
      *(_QWORD *)(v1333 + 8 * v1007) = v1334;
    }
    else
    {
      v1008 = *v1006;
      v1009 = v1384;
      if (v1384)
        *(_DWORD *)v1384 += 2;
      *(_QWORD *)(v1008 + 8 * v1007) = v1009;
    }
    *((_DWORD *)v1005 + 9) = v1007 + 1;
  }
  v1010 = v1394;
  v1394 = 0;
  if (v1010)
  {
    if (*(_DWORD *)v1010 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v1010, v998, v999, v1000, v1001, v1002, v1003, v1004);
      v1005 = v1336;
    }
    else
    {
      --*(_DWORD *)v1010;
    }
  }
  *a2 = v1005;
  v1011 = v1391;
  v1391 = 0;
  if (v1011)
  {
    if (*(_DWORD *)v1011 == 2)
    {
      WTF::StringImpl::~StringImpl(v1011, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1046, v1047, v1048, v1049, v1050, v1051, v1052, v1053);
    }
    else
    {
      *(_DWORD *)v1011 -= 2;
    }
  }
  v1012 = v1390;
  v1390 = 0;
  if (v1012)
  {
    if (*(_DWORD *)v1012 == 2)
    {
      WTF::StringImpl::~StringImpl(v1012, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1054, v1055, v1056, v1057, v1058, v1059, v1060, v1061);
    }
    else
    {
      *(_DWORD *)v1012 -= 2;
    }
  }
  v1013 = v1389;
  v1389 = 0;
  if (v1013)
  {
    if (*(_DWORD *)v1013 == 2)
    {
      WTF::StringImpl::~StringImpl(v1013, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1062, v1063, v1064, v1065, v1066, v1067, v1068, v1069);
    }
    else
    {
      *(_DWORD *)v1013 -= 2;
    }
  }
  v1014 = v1388;
  v1388 = 0;
  if (v1014)
  {
    if (*(_DWORD *)v1014 == 2)
    {
      WTF::StringImpl::~StringImpl(v1014, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077);
    }
    else
    {
      *(_DWORD *)v1014 -= 2;
    }
  }
  v1015 = v1387;
  v1387 = 0;
  if (v1015)
  {
    if (*(_DWORD *)v1015 == 2)
    {
      WTF::StringImpl::~StringImpl(v1015, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1078, v1079, v1080, v1081, v1082, v1083, v1084, v1085);
    }
    else
    {
      *(_DWORD *)v1015 -= 2;
    }
  }
  v1016 = v1386;
  v1386 = 0;
  if (v1016)
  {
    if (*(_DWORD *)v1016 == 2)
    {
      WTF::StringImpl::~StringImpl(v1016, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1086, v1087, v1088, v1089, v1090, v1091, v1092, v1093);
    }
    else
    {
      *(_DWORD *)v1016 -= 2;
    }
  }
  v1017 = v1385;
  v1385 = 0;
  if (v1017)
  {
    if (*(_DWORD *)v1017 == 2)
    {
      WTF::StringImpl::~StringImpl(v1017, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1094, v1095, v1096, v1097, v1098, v1099, v1100, v1101);
    }
    else
    {
      *(_DWORD *)v1017 -= 2;
    }
  }
  v1018 = v1384;
  v1384 = 0;
  if (v1018)
  {
    if (*(_DWORD *)v1018 == 2)
    {
      WTF::StringImpl::~StringImpl(v1018, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109);
    }
    else
    {
      *(_DWORD *)v1018 -= 2;
    }
  }
  v1019 = v1383;
  v1383 = 0;
  if (v1019)
  {
    if (*(_DWORD *)v1019 == 2)
    {
      WTF::StringImpl::~StringImpl(v1019, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1110, v1111, v1112, v1113, v1114, v1115, v1116, v1117);
    }
    else
    {
      *(_DWORD *)v1019 -= 2;
    }
  }
  v1020 = v1382;
  v1382 = 0;
  if (v1020)
  {
    if (*(_DWORD *)v1020 == 2)
    {
      WTF::StringImpl::~StringImpl(v1020, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125);
    }
    else
    {
      *(_DWORD *)v1020 -= 2;
    }
  }
  v1021 = v1381;
  v1381 = 0;
  if (v1021)
  {
    if (*(_DWORD *)v1021 == 2)
    {
      WTF::StringImpl::~StringImpl(v1021, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1126, v1127, v1128, v1129, v1130, v1131, v1132, v1133);
    }
    else
    {
      *(_DWORD *)v1021 -= 2;
    }
  }
  v1022 = v1380;
  v1380 = 0;
  if (v1022)
  {
    if (*(_DWORD *)v1022 == 2)
    {
      WTF::StringImpl::~StringImpl(v1022, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1134, v1135, v1136, v1137, v1138, v1139, v1140, v1141);
    }
    else
    {
      *(_DWORD *)v1022 -= 2;
    }
  }
  v1023 = v1379;
  v1379 = 0;
  if (v1023)
  {
    if (*(_DWORD *)v1023 == 2)
    {
      WTF::StringImpl::~StringImpl(v1023, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1149);
    }
    else
    {
      *(_DWORD *)v1023 -= 2;
    }
  }
  v1024 = v1378;
  v1378 = 0;
  if (v1024)
  {
    if (*(_DWORD *)v1024 == 2)
    {
      WTF::StringImpl::~StringImpl(v1024, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157);
    }
    else
    {
      *(_DWORD *)v1024 -= 2;
    }
  }
  v1025 = v1377;
  v1377 = 0;
  if (v1025)
  {
    if (*(_DWORD *)v1025 == 2)
    {
      WTF::StringImpl::~StringImpl(v1025, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1158, v1159, v1160, v1161, v1162, v1163, v1164, v1165);
    }
    else
    {
      *(_DWORD *)v1025 -= 2;
    }
  }
  v1026 = v1376;
  v1376 = 0;
  if (v1026)
  {
    if (*(_DWORD *)v1026 == 2)
    {
      WTF::StringImpl::~StringImpl(v1026, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1166, v1167, v1168, v1169, v1170, v1171, v1172, v1173);
    }
    else
    {
      *(_DWORD *)v1026 -= 2;
    }
  }
  v1027 = v1375;
  v1375 = 0;
  if (v1027)
  {
    if (*(_DWORD *)v1027 == 2)
    {
      WTF::StringImpl::~StringImpl(v1027, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1174, v1175, v1176, v1177, v1178, v1179, v1180, v1181);
    }
    else
    {
      *(_DWORD *)v1027 -= 2;
    }
  }
  v1028 = v1374;
  v1374 = 0;
  if (v1028)
  {
    if (*(_DWORD *)v1028 == 2)
    {
      WTF::StringImpl::~StringImpl(v1028, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1182, v1183, v1184, v1185, v1186, v1187, v1188, v1189);
    }
    else
    {
      *(_DWORD *)v1028 -= 2;
    }
  }
  v1029 = v1373;
  v1373 = 0;
  if (v1029)
  {
    if (*(_DWORD *)v1029 == 2)
    {
      WTF::StringImpl::~StringImpl(v1029, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1190, v1191, v1192, v1193, v1194, v1195, v1196, v1197);
    }
    else
    {
      *(_DWORD *)v1029 -= 2;
    }
  }
  v1030 = v1372;
  v1372 = 0;
  if (v1030)
  {
    if (*(_DWORD *)v1030 == 2)
    {
      WTF::StringImpl::~StringImpl(v1030, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1198, v1199, v1200, v1201, v1202, v1203, v1204, v1205);
    }
    else
    {
      *(_DWORD *)v1030 -= 2;
    }
  }
  v1031 = v1371;
  v1371 = 0;
  if (v1031)
  {
    if (*(_DWORD *)v1031 == 2)
    {
      WTF::StringImpl::~StringImpl(v1031, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1206, v1207, v1208, v1209, v1210, v1211, v1212, v1213);
    }
    else
    {
      *(_DWORD *)v1031 -= 2;
    }
  }
  v1032 = v1370;
  v1370 = 0;
  if (v1032)
  {
    if (*(_DWORD *)v1032 == 2)
    {
      WTF::StringImpl::~StringImpl(v1032, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1214, v1215, v1216, v1217, v1218, v1219, v1220, v1221);
    }
    else
    {
      *(_DWORD *)v1032 -= 2;
    }
  }
  v1033 = v1369;
  v1369 = 0;
  if (v1033)
  {
    if (*(_DWORD *)v1033 == 2)
    {
      WTF::StringImpl::~StringImpl(v1033, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1222, v1223, v1224, v1225, v1226, v1227, v1228, v1229);
    }
    else
    {
      *(_DWORD *)v1033 -= 2;
    }
  }
  v1034 = v1368;
  v1368 = 0;
  if (v1034)
  {
    if (*(_DWORD *)v1034 == 2)
    {
      WTF::StringImpl::~StringImpl(v1034, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1230, v1231, v1232, v1233, v1234, v1235, v1236, v1237);
    }
    else
    {
      *(_DWORD *)v1034 -= 2;
    }
  }
  v1035 = v1367;
  v1367 = 0;
  if (v1035)
  {
    if (*(_DWORD *)v1035 == 2)
    {
      WTF::StringImpl::~StringImpl(v1035, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1238, v1239, v1240, v1241, v1242, v1243, v1244, v1245);
    }
    else
    {
      *(_DWORD *)v1035 -= 2;
    }
  }
  v1036 = v1366;
  v1366 = 0;
  if (v1036)
  {
    if (*(_DWORD *)v1036 == 2)
    {
      WTF::StringImpl::~StringImpl(v1036, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253);
    }
    else
    {
      *(_DWORD *)v1036 -= 2;
    }
  }
  v1037 = v1365;
  v1365 = 0;
  if (v1037)
  {
    if (*(_DWORD *)v1037 == 2)
    {
      WTF::StringImpl::~StringImpl(v1037, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1254, v1255, v1256, v1257, v1258, v1259, v1260, v1261);
    }
    else
    {
      *(_DWORD *)v1037 -= 2;
    }
  }
  v1038 = v1364;
  v1364 = 0;
  if (v1038)
  {
    if (*(_DWORD *)v1038 == 2)
    {
      WTF::StringImpl::~StringImpl(v1038, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1262, v1263, v1264, v1265, v1266, v1267, v1268, v1269);
    }
    else
    {
      *(_DWORD *)v1038 -= 2;
    }
  }
  v1039 = v1363;
  v1363 = 0;
  if (v1039)
  {
    if (*(_DWORD *)v1039 == 2)
    {
      WTF::StringImpl::~StringImpl(v1039, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1270, v1271, v1272, v1273, v1274, v1275, v1276, v1277);
    }
    else
    {
      *(_DWORD *)v1039 -= 2;
    }
  }
  v1040 = v1362;
  v1362 = 0;
  if (v1040)
  {
    if (*(_DWORD *)v1040 == 2)
    {
      WTF::StringImpl::~StringImpl(v1040, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1278, v1279, v1280, v1281, v1282, v1283, v1284, v1285);
    }
    else
    {
      *(_DWORD *)v1040 -= 2;
    }
  }
  v1041 = v1361;
  v1361 = 0;
  if (v1041)
  {
    if (*(_DWORD *)v1041 == 2)
    {
      WTF::StringImpl::~StringImpl(v1041, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1286, v1287, v1288, v1289, v1290, v1291, v1292, v1293);
    }
    else
    {
      *(_DWORD *)v1041 -= 2;
    }
  }
  v1042 = v1360;
  v1360 = 0;
  if (v1042)
  {
    if (*(_DWORD *)v1042 == 2)
    {
      WTF::StringImpl::~StringImpl(v1042, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1294, v1295, v1296, v1297, v1298, v1299, v1300, v1301);
    }
    else
    {
      *(_DWORD *)v1042 -= 2;
    }
  }
  v1043 = v1359;
  v1359 = 0;
  if (v1043)
  {
    if (*(_DWORD *)v1043 == 2)
    {
      WTF::StringImpl::~StringImpl(v1043, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1302, v1303, v1304, v1305, v1306, v1307, v1308, v1309);
    }
    else
    {
      *(_DWORD *)v1043 -= 2;
    }
  }
  v1044 = v1358;
  v1358 = 0;
  if (v1044)
  {
    if (*(_DWORD *)v1044 == 2)
    {
      WTF::StringImpl::~StringImpl(v1044, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1310, v1311, v1312, v1313, v1314, v1315, v1316, v1317);
    }
    else
    {
      *(_DWORD *)v1044 -= 2;
    }
  }
  v1045 = v1357;
  v1357 = 0;
  if (v1045)
  {
    if (*(_DWORD *)v1045 == 2)
    {
      WTF::StringImpl::~StringImpl(v1045, v998, v999, v1000, v1001, v1002, v1003, v1004);
      WTF::fastFree(v1318, v1319, v1320, v1321, v1322, v1323, v1324, v1325);
    }
    else
    {
      *(_DWORD *)v1045 -= 2;
    }
  }
}

BOOL JSC::Profiler::Database::save(JSC::Profiler::Database *this, const char *__filename)
{
  FILE *v3;
  unint64_t v4;
  WTF::JSONImpl::Value *v5;
  WTF::PrintStream *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::JSONImpl::Value *v21;

  v3 = fopen(__filename, "w");
  if (v3)
  {
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v4 = off_1E3571C18;
    *(_QWORD *)(v4 + 8) = v3;
    *(_DWORD *)(v4 + 16) = 0;
    JSC::Profiler::Database::toJSON(this, &v21);
    v5 = v21;
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v4 + 32))(v4);
    WTF::JSONImpl::Value::dump(v5, v6, v7, v8, v9, v10, v11, v12);
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 40))(v4);
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::JSONImpl::Value::operator delete(v5, v13, v14, v15, v16, v17, v18, v19);
      else
        --*(_DWORD *)v5;
    }
    if (*(_DWORD *)(v4 + 16) != 1)
      fclose(*(FILE **)(v4 + 8));
    WTF::fastFree(v4, v13, v14, v15, v16, v17, v18, v19);
  }
  return v3 != 0;
}

void JSC::Profiler::Database::registerToSaveAtExit(JSC::Profiler::Database *this, char *__s, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v10;
  size_t v11;
  size_t v12;
  WTF *v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  int v18;

  if (__s)
  {
    v10 = strlen(__s);
    v11 = v10 + 16;
    if (v10 >= 0xFFFFFFFFFFFFFFF0 || (v12 = v10, v13 = (WTF *)(v10 + 17), v11 == -1))
    {
      __break(0xC471u);
      JUMPOUT(0x198882BDCLL);
    }
    v14 = WTF::fastMalloc(v13);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = v12;
    memcpy((void *)(v14 + 16), __s, v12);
    *(_BYTE *)(v14 + 16 + v12) = 0;
  }
  else
  {
    v14 = 0;
  }
  v15 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v14;
  if (v15)
  {
    if (*v15 == 1)
      WTF::fastFree((unint64_t)v15, __s, a3, a4, a5, a6, a7, a8);
    else
      --*v15;
  }
  if (!*((_BYTE *)this + 88))
  {
    do
      v16 = __ldaxr(&dword_1ECF58D94);
    while (__stlxr(v16 + 1, &dword_1ECF58D94));
    if (!v16)
      atexit((void (*)(void))JSC::Profiler::Database::atExitCallback);
    if (__ldaxr(_MergedGlobals_40))
    {
      __clrex();
    }
    else if (!__stxr(1u, _MergedGlobals_40))
    {
      goto LABEL_18;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)_MergedGlobals_40);
LABEL_18:
    *((_QWORD *)this + 13) = qword_1ECF58D98;
    qword_1ECF58D98 = (uint64_t)this;
    v18 = __ldxr(_MergedGlobals_40);
    if (v18 == 1)
    {
      if (!__stlxr(0, _MergedGlobals_40))
        goto LABEL_23;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(_MergedGlobals_40, 0, a3, a4, a5, a6, a7, a8);
LABEL_23:
    *((_BYTE *)this + 88) = 1;
  }
}

void JSC::Profiler::Database::logEvent(JSC::Profiler::Database *this, uint64_t a2, const char *a3, WTF **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  JSC::CodeBlock *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  timespec __tp;
  __int128 v42;
  WTF *v43;

  v12 = (unsigned __int8 *)this + 112;
  if (__ldaxr((unsigned __int8 *)this + 112))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 112);
LABEL_5:
  v14 = JSC::Profiler::Database::ensureBytecodesFor((uint64_t)this, a2, a2, (uint64_t)a4, a5, a6, a7, a8);
  v15 = *((_QWORD *)this + 8);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(JSC::CodeBlock **)(v15 + 16 * v20);
    if (v21 == (JSC::CodeBlock *)a2)
    {
LABEL_10:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      goto LABEL_12;
    }
    v22 = 1;
    while (v21)
    {
      v20 = ((_DWORD)v20 + v22) & v16;
      v21 = *(JSC::CodeBlock **)(v15 + 16 * v20);
      ++v22;
      if (v21 == (JSC::CodeBlock *)a2)
        goto LABEL_10;
    }
  }
  v23 = 0;
LABEL_12:
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.tv_sec = (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec;
  __tp.tv_nsec = v14;
  *(_QWORD *)&v42 = v23;
  *((_QWORD *)&v42 + 1) = a3;
  v30 = *a4;
  if (*a4)
    ++*(_DWORD *)v30;
  v43 = v30;
  v31 = *((unsigned int *)this + 21);
  if ((_DWORD)v31 == *((_DWORD *)this + 20))
  {
    v32 = WTF::Vector<JSC::Profiler::Event,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, v31 + 1, (unint64_t)&__tp);
    v34 = *((_QWORD *)this + 9) + 40 * *((unsigned int *)this + 21);
    v35 = *(_OWORD *)(v32 + 16);
    *(_OWORD *)v34 = *(_OWORD *)v32;
    *(_OWORD *)(v34 + 16) = v35;
    v36 = *(_QWORD *)(v32 + 32);
    *(_QWORD *)(v32 + 32) = 0;
    *(_QWORD *)(v34 + 32) = v36;
    v37 = v43;
    ++*((_DWORD *)this + 21);
    v43 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 1)
        WTF::fastFree((unint64_t)v37, v33, v24, v25, v26, v27, v28, v29);
      else
        --*(_DWORD *)v37;
    }
  }
  else
  {
    v38 = *((_QWORD *)this + 9) + 40 * v31;
    v39 = v42;
    *(timespec *)v38 = __tp;
    *(_OWORD *)(v38 + 16) = v39;
    *(_QWORD *)(v38 + 32) = v30;
    ++*((_DWORD *)this + 21);
  }
  v40 = __ldxr(v12);
  if (v40 == 1)
  {
    if (!__stlxr(0, v12))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, v24, v25, v26, v27, v28, v29);
}

void JSC::Profiler::Database::atExitCallback(JSC::Profiler::Database *this, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;

  while (1)
  {
    if (__ldaxr(_MergedGlobals_40))
    {
      __clrex();
    }
    else if (!__stxr(1u, _MergedGlobals_40))
    {
      goto LABEL_5;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)_MergedGlobals_40);
LABEL_5:
    v10 = qword_1ECF58D98;
    if (qword_1ECF58D98)
    {
      qword_1ECF58D98 = *(_QWORD *)(qword_1ECF58D98 + 104);
      *(_QWORD *)(v10 + 104) = 0;
      *(_BYTE *)(v10 + 88) = 0;
    }
    v11 = __ldxr(_MergedGlobals_40);
    if (v11 != 1)
      break;
    if (__stlxr(0, _MergedGlobals_40))
      goto LABEL_12;
    if (!v10)
      return;
LABEL_13:
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v21, *(JSC::VM **)(v10 + 8), a4, a5, a6, a7, a8, a9, a2);
    v12 = *(_QWORD *)(v10 + 96);
    if (v12)
      v13 = (const char *)(v12 + 16);
    else
      v13 = 0;
    JSC::Profiler::Database::save((JSC::Profiler::Database *)v10, v13);
    JSC::JSLockHolder::~JSLockHolder(&v21, v14, v15, v16, v17, v18, v19, v20);
  }
  __clrex();
LABEL_12:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(_MergedGlobals_40, 0, a4, a5, a6, a7, a8, a9);
  if (v10)
    goto LABEL_13;
}

unint64_t WTF::Vector<JSC::Profiler::Bytecode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<JSC::Profiler::Bytecode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<JSC::Profiler::Bytecode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::Profiler::Bytecode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _DWORD *v21;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = (_QWORD *)v9;
        v18 = (_QWORD *)(v7 + 16 * v8);
        v19 = (_QWORD *)v7;
        do
        {
          *v17 = *v19;
          v20 = v19[1];
          v19[1] = 0;
          v17[1] = v20;
          v21 = (_DWORD *)v19[1];
          v19[1] = 0;
          if (v21)
          {
            if (*v21 == 1)
              WTF::fastFree((unint64_t)v21, v10, v11, v12, v13, v14, v15, v16);
            else
              --*v21;
          }
          v19 += 2;
          v17 += 2;
        }
        while (v19 != v18);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

char *WTF::Vector<JSC::Profiler::ProfiledBytecodes,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  JSC::Profiler::BytecodeSequence *v5;
  JSC::Profiler::BytecodeSequence *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::Profiler::BytecodeSequence *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  JSC::Profiler::BytecodeSequence *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = a3;
  v5 = *(JSC::Profiler::BytecodeSequence **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (JSC::Profiler::BytecodeSequence *)((char *)v5 + 40 * *(unsigned int *)(a1 + 12));
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v24 = *(JSC::Profiler::BytecodeSequence **)a1;
        return (char *)v24 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (v9 < 0x6666667)
      {
        v10 = 40 * v9;
        v11 = WTF::fastMalloc((WTF *)(40 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x28;
        *(_QWORD *)a1 = v11;
        WTF::VectorMover<false,JSC::Profiler::ProfiledBytecodes>::move(v5, v6, v11, v12, v13, v14, v15, v16);
        v24 = *(JSC::Profiler::BytecodeSequence **)a1;
        if (v5)
        {
          if (v24 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v17, v18, v19, v20, v21, v22, v23);
          v24 = *(JSC::Profiler::BytecodeSequence **)a1;
        }
        return (char *)v24 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x1988831E0);
    }
  }
  v25 = *(unsigned int *)(a1 + 8);
  v26 = v25 + (v25 >> 2);
  if (v26 >= 0x10)
    v27 = v26 + 1;
  else
    v27 = 16;
  if (v27 <= a2)
    v27 = a2;
  if (v27 > v25)
  {
    if (v27 >= 0x6666667)
      goto LABEL_28;
    v28 = (JSC::Profiler::BytecodeSequence *)((char *)v5 + 40 * *(unsigned int *)(a1 + 12));
    v29 = 40 * v27;
    v30 = WTF::fastMalloc((WTF *)(40 * v27));
    *(_DWORD *)(a1 + 8) = (v29 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)a1 = v30;
    WTF::VectorMover<false,JSC::Profiler::ProfiledBytecodes>::move(v5, v28, v30, v31, v32, v33, v34, v35);
    if (v5)
    {
      if (*(JSC::Profiler::BytecodeSequence **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v36, v37, v38, v39, v40, v41, v42);
    }
  }
  return (char *)v3;
}

void WTF::VectorMover<false,JSC::Profiler::ProfiledBytecodes>::move(JSC::Profiler::BytecodeSequence *this, JSC::Profiler::BytecodeSequence *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::Profiler::BytecodeSequence *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _DWORD *v22;

  if (this != a2)
  {
    v8 = a3;
    v10 = this;
    do
    {
      v11 = *((unsigned int *)v10 + 3);
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 12) = v11;
      if ((_DWORD)v11)
      {
        if (v11 >> 29)
          goto LABEL_19;
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v11));
        *(_DWORD *)(v8 + 8) = v11;
        *(_QWORD *)v8 = v12;
        v13 = *((unsigned int *)v10 + 3);
        if ((_DWORD)v13)
        {
          v14 = *(_DWORD ***)v10;
          v15 = 8 * v13;
          do
          {
            v16 = *v14;
            if (*v14)
              ++*v16;
            *v12++ = v16;
            ++v14;
            v15 -= 8;
          }
          while (v15);
        }
      }
      v17 = *((unsigned int *)v10 + 7);
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_DWORD *)(v8 + 28) = v17;
      if ((_DWORD)v17)
      {
        if (v17 >> 28)
        {
LABEL_19:
          __break(0xC471u);
          JUMPOUT(0x198883308);
        }
        v18 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v17));
        *(_DWORD *)(v8 + 24) = v17;
        *(_QWORD *)(v8 + 16) = v18;
        v19 = *((unsigned int *)v10 + 7);
        if ((_DWORD)v19)
        {
          v20 = (_QWORD *)*((_QWORD *)v10 + 2);
          v21 = &v20[2 * v19];
          do
          {
            *v18 = *v20;
            v22 = (_DWORD *)v20[1];
            if (v22)
              ++*v22;
            v18[1] = v22;
            v20 += 2;
            v18 += 2;
          }
          while (v20 != v21);
        }
      }
      *(_QWORD *)(v8 + 32) = *((_QWORD *)v10 + 4);
      JSC::Profiler::BytecodeSequence::~BytecodeSequence(v10, a2, a3, a4, a5, a6, a7, a8);
      v8 += 40;
      v10 = (JSC::Profiler::BytecodeSequence *)((char *)v10 + 40);
    }
    while (v10 != a2);
  }
}

unint64_t *WTF::Vector<JSC::Profiler::CompiledBytecode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = a3;
  v5 = *(unint64_t **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = &v5[5 * *(unsigned int *)(a1 + 12)];
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v24 = *(unint64_t **)a1;
        return &v24[(uint64_t)(v3 - (_QWORD)v5) >> 3];
      }
      if (v9 < 0x6666667)
      {
        v10 = 40 * v9;
        v11 = WTF::fastMalloc((WTF *)(40 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x28;
        *(_QWORD *)a1 = v11;
        WTF::VectorMover<false,JSC::Profiler::CompiledBytecode>::move(v5, v6, v11, v12, v13, v14, v15, v16);
        v24 = *(unint64_t **)a1;
        if (v5)
        {
          if (v24 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v17, v18, v19, v20, v21, v22, v23);
          v24 = *(unint64_t **)a1;
        }
        return &v24[(uint64_t)(v3 - (_QWORD)v5) >> 3];
      }
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x1988834C4);
    }
  }
  v25 = *(unsigned int *)(a1 + 8);
  v26 = v25 + (v25 >> 2);
  if (v26 >= 0x10)
    v27 = v26 + 1;
  else
    v27 = 16;
  if (v27 <= a2)
    v27 = a2;
  if (v27 > v25)
  {
    if (v27 >= 0x6666667)
      goto LABEL_28;
    v28 = &v5[5 * *(unsigned int *)(a1 + 12)];
    v29 = 40 * v27;
    v30 = WTF::fastMalloc((WTF *)(40 * v27));
    *(_DWORD *)(a1 + 8) = (v29 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)a1 = v30;
    WTF::VectorMover<false,JSC::Profiler::CompiledBytecode>::move(v5, v28, v30, v31, v32, v33, v34, v35);
    if (v5)
    {
      if (*(unint64_t **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v36, v37, v38, v39, v40, v41, v42);
    }
  }
  return (unint64_t *)v3;
}

void WTF::VectorMover<false,JSC::Profiler::CompiledBytecode>::move(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t *i;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;

  if (a1 != a2)
  {
    v8 = a3;
    for (i = a1; i != a2; i += 5)
    {
      v11 = *((unsigned int *)i + 3);
      v12 = (_OWORD *)(v8 + 16);
      *(_QWORD *)v8 = v8 + 16;
      *(_DWORD *)(v8 + 8) = 1;
      *(_DWORD *)(v8 + 12) = v11;
      if (v11 >= 2)
      {
        if (v11 >> 28)
        {
          __break(0xC471u);
          return;
        }
        v12 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v11));
        *(_DWORD *)(v8 + 8) = v11;
        *(_QWORD *)v8 = v12;
      }
      v13 = *((unsigned int *)i + 3);
      if ((_DWORD)v13)
      {
        v14 = (__int128 *)*i;
        v15 = 16 * v13;
        do
        {
          v16 = *v14++;
          *v12++ = v16;
          v15 -= 16;
        }
        while (v15);
      }
      v17 = (_DWORD *)i[4];
      if (v17)
        ++*v17;
      *(_QWORD *)(v8 + 32) = v17;
      v18 = (_DWORD *)i[4];
      i[4] = 0;
      if (v18)
      {
        if (*v18 == 1)
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
        else
          --*v18;
      }
      v19 = *i;
      if (i + 2 != (unint64_t *)*i && v19 != 0)
      {
        *i = 0;
        *((_DWORD *)i + 2) = 0;
        WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
      }
      v8 += 40;
    }
  }
}

void WTF::HashTable<JSC::Profiler::OriginStack,WTF::KeyValuePair<JSC::Profiler::OriginStack,std::unique_ptr<JSC::Profiler::ExecutionCounter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Profiler::OriginStack,std::unique_ptr<JSC::Profiler::ExecutionCounter>>>,WTF::DefaultHash<JSC::Profiler::OriginStack>,WTF::HashMap<JSC::Profiler::OriginStack,std::unique_ptr<JSC::Profiler::ExecutionCounter>,WTF::DefaultHash<JSC::Profiler::OriginStack>,WTF::HashTraits<JSC::Profiler::OriginStack>,WTF::HashTraits<std::unique_ptr<JSC::Profiler::ExecutionCounter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Profiler::OriginStack>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _OWORD *v46;
  uint64_t v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v61;

  v8 = a2;
  v9 = *a1;
  if (*a1)
  {
    v10 = *(_DWORD *)(v9 - 4);
    v11 = *(_DWORD *)(v9 - 12);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = WTF::fastZeroedMalloc(40 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if (v10)
  {
    v20 = 0;
    v21 = 0;
    v22 = v10;
    v58 = v10;
    while (1)
    {
      v23 = (_DWORD *)(v9 + 40 * v20);
      v24 = v23[3];
      if ((_DWORD)v24)
      {
        if ((_DWORD)v24 != 1 || *(_DWORD *)(*(_QWORD *)v23 + 8) != -2)
        {
          v25 = *a1;
          if (*a1)
            v26 = *(_DWORD *)(v25 - 8);
          else
            v26 = 0;
          v31 = v24 - 1;
          do
          {
            v32 = *(_QWORD *)v23 + 16 * v31;
            v33 = ~(*(_QWORD *)v32 << 32) + *(_QWORD *)v32;
            v34 = (v33 ^ (v33 >> 22)) + ~((v33 ^ (v33 >> 22)) << 13);
            v35 = (9 * (v34 ^ (v34 >> 8))) ^ ((9 * (v34 ^ (v34 >> 8))) >> 15);
            LODWORD(v32) = *(_DWORD *)(v32 + 8) + ~(*(_DWORD *)(v32 + 8) << 15);
            LODWORD(v32) = (9 * (v32 ^ (v32 >> 10))) ^ ((9
                                                                     * (v32 ^ (v32 >> 10))) >> 6);
            LODWORD(v24) = ((v32 + ~((_DWORD)v32 << 11)) ^ ((v32 + ~((_DWORD)v32 << 11)) >> 16))
                         + 3 * v24
                         + (((v35 + ~(v35 << 27)) >> 31) ^ (v35 + ~((_DWORD)v35 << 27)));
          }
          while ((unint64_t)v31--);
          v37 = v24 & v26;
          v38 = v25 + 40 * v37;
          v61 = v21;
          if (*(_DWORD *)(v38 + 12))
          {
            v39 = 1;
            do
            {
              v37 = (v37 + v39) & v26;
              v38 = v25 + 40 * v37;
              ++v39;
            }
            while (*(_DWORD *)(v38 + 12));
          }
          v40 = v25 + 40 * v37;
          v43 = *(_QWORD *)(v40 + 32);
          v42 = (_QWORD *)(v40 + 32);
          v41 = v43;
          *v42 = 0;
          if (v43)
            WTF::fastFree(v41, v13, v14, v15, v16, v17, v18, v19);
          v44 = v9;
          v46 = (_OWORD *)(v38 + 16);
          v45 = *(_QWORD *)v38;
          if (v38 + 16 != *(_QWORD *)v38 && v45 != 0)
          {
            *(_QWORD *)v38 = 0;
            *(_DWORD *)(v38 + 8) = 0;
            WTF::fastFree(v45, v13, v14, v15, v16, v17, v18, v19);
          }
          v48 = v23[3];
          *(_QWORD *)v38 = v46;
          *(_DWORD *)(v38 + 8) = 1;
          *(_DWORD *)(v38 + 12) = v48;
          if (v48 >= 2)
          {
            if (v48 >> 28)
            {
              __break(0xC471u);
              return;
            }
            v46 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v48));
            *(_DWORD *)(v38 + 8) = v48;
            *(_QWORD *)v38 = v46;
          }
          v49 = v23[3];
          if ((_DWORD)v49)
          {
            v50 = *(__int128 **)v23;
            v51 = 16 * v49;
            do
            {
              v52 = *v50++;
              *v46++ = v52;
              v51 -= 16;
            }
            while (v51);
          }
          v9 = v44;
          v53 = v44 + 40 * v20;
          v54 = *(_QWORD *)(v53 + 32);
          *(_QWORD *)(v53 + 32) = 0;
          *v42 = v54;
          v55 = *(_QWORD *)(v53 + 32);
          *(_QWORD *)(v53 + 32) = 0;
          if (v55)
            WTF::fastFree(v55, v13, v14, v15, v16, v17, v18, v19);
          v56 = *(_QWORD *)v23;
          v57 = v23 + 4 == *(_DWORD **)v23 || v56 == 0;
          v21 = v61;
          v22 = v58;
          if (!v57)
          {
            *(_QWORD *)v23 = 0;
            v23[2] = 0;
            WTF::fastFree(v56, v13, v14, v15, v16, v17, v18, v19);
          }
          if (v23 == (_DWORD *)a3)
            v21 = v38;
        }
      }
      else
      {
        v27 = v9 + 40 * v20;
        v28 = *(_QWORD *)(v27 + 32);
        *(_QWORD *)(v27 + 32) = 0;
        if (v28)
          WTF::fastFree(v28, v13, v14, v15, v16, v17, v18, v19);
        v29 = *(_QWORD *)v23;
        if (v23 + 4 != *(_DWORD **)v23 && v29 != 0)
        {
          *(_QWORD *)v23 = 0;
          v23[2] = 0;
          WTF::fastFree(v29, v13, v14, v15, v16, v17, v18, v19);
        }
      }
      if (++v20 == v22)
        goto LABEL_49;
    }
  }
  if (v9)
LABEL_49:
    WTF::fastFree(v9 - 16, v13, v14, v15, v16, v17, v18, v19);
}

void WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  JSC::Profiler::Compilation *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;
  JSC::Profiler::Compilation *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v21 = 0;
    while (1)
    {
      v22 = (uint64_t *)(v10 + 16 * v21);
      v23 = *v22;
      if (*v22 != -1)
      {
        if (v23)
        {
          v26 = *a1;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
          v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
          v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
          v31 = v27 & ((v30 >> 31) ^ v30);
          v32 = 1;
          do
          {
            v33 = v31;
            v34 = *(_QWORD *)(v26 + 16 * v31);
            v31 = (v31 + v32++) & v27;
          }
          while (v34);
          v35 = (uint64_t *)(v26 + 16 * v33);
          v36 = (JSC::Profiler::Compilation *)v35[1];
          v35[1] = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 1)
            {
              JSC::Profiler::Compilation::~Compilation(v36, v14, v15, v16, v17, v18, v19, v20);
              WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
            }
            else
            {
              --*(_DWORD *)v36;
            }
          }
          *v35 = *v22;
          v37 = v10 + 16 * v21;
          v38 = *(_QWORD *)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          v35[1] = v38;
          v25 = *(JSC::Profiler::Compilation **)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          if (!v25)
            goto LABEL_22;
          if (*(_DWORD *)v25 == 1)
          {
LABEL_24:
            JSC::Profiler::Compilation::~Compilation(v25, v14, v15, v16, v17, v18, v19, v20);
            WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
            goto LABEL_22;
          }
          --*(_DWORD *)v25;
        }
        else
        {
          v24 = v10 + 16 * v21;
          v25 = *(JSC::Profiler::Compilation **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 1)
              goto LABEL_24;
            --*(_DWORD *)v25;
          }
        }
      }
LABEL_22:
      if (++v21 == v11)
        goto LABEL_28;
    }
  }
  if (v10)
LABEL_28:
    WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

unint64_t WTF::Vector<JSC::Profiler::Event,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<JSC::Profiler::Event,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<JSC::Profiler::Event,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::Profiler::Event,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  _DWORD *v19;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(_DWORD *)(a1 + 12);
      v5 = 40 * a2;
      v6 = WTF::fastMalloc((WTF *)(40 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v6;
      if (v4)
      {
        v14 = v6;
        v15 = v3 + 40 * v4;
        v16 = v3;
        do
        {
          v17 = *(_OWORD *)(v16 + 16);
          *(_OWORD *)v14 = *(_OWORD *)v16;
          *(_OWORD *)(v14 + 16) = v17;
          v18 = *(_QWORD *)(v16 + 32);
          *(_QWORD *)(v16 + 32) = 0;
          *(_QWORD *)(v14 + 32) = v18;
          v19 = *(_DWORD **)(v16 + 32);
          *(_QWORD *)(v16 + 32) = 0;
          if (v19)
          {
            if (*v19 == 1)
              WTF::fastFree((unint64_t)v19, v7, v8, v9, v10, v11, v12, v13);
            else
              --*v19;
          }
          v16 += 40;
          v14 += 40;
        }
        while (v16 != v15);
      }
      if (v3)
      {
        if (*(_QWORD *)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

void JSC::Profiler::OriginStack::~OriginStack(JSC::Profiler::OriginStack *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  char *v10;

  v10 = (char *)this + 16;
  v9 = *(_QWORD *)this;
  if (v10 != (char *)v9 && v9 != 0)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Profiler::OSRExit::toJSON(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _DWORD **v9;
  double v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  WTF *v28;
  _DWORD **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  WTF *v46;
  const char *v47;
  int v48;
  _DWORD **v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD **v52;
  uint64_t v53;
  _DWORD *v54;
  int v55;
  uint64_t v56;
  _DWORD **v57;
  WTF *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  WTF *v75;
  _DWORD **v76;
  char v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::AtomStringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  WTF *v95;
  WTF::AtomStringImpl *v96;
  double v97;
  double *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::AtomStringImpl *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  WTF *v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD **v124;
  uint64_t v125;
  _DWORD *v126;
  _DWORD **v127;
  uint64_t v128;
  _DWORD *v129;
  _DWORD **v130;
  uint64_t v131;
  _DWORD *v132;
  WTF *v133;
  _BYTE v134[16];
  char v135;

  v6 = WTF::fastMalloc((WTF *)0x28);
  HIDWORD(v7) = 5;
  *(_QWORD *)(v6 + 16) = 0;
  v8 = (uint64_t *)(v6 + 16);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v9 = (_DWORD **)(a2 + 264);
  LODWORD(v7) = *(_DWORD *)(a1 + 32);
  v10 = (double)v7;
  v11 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = 0x200000001;
  v11[1] = v10;
  v133 = (WTF *)v11;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)(a2 + 264), (const WTF::StringImpl *)&v133, v12, v13, v14, v15, v16, (uint64_t)v134);
  if (v135)
  {
    v24 = (uint64_t *)(v6 + 24);
    v25 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v25 == *(_DWORD *)(v6 + 32))
    {
      v49 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, a2 + 264);
      v25 = *(unsigned int *)(v6 + 36);
      v50 = *(_QWORD *)(v6 + 24);
      v51 = *v49;
      if (*v49)
        *v51 += 2;
      *(_QWORD *)(v50 + 8 * v25) = v51;
    }
    else
    {
      v26 = *v24;
      v27 = *v9;
      if (*v9)
        *v27 += 2;
      *(_QWORD *)(v26 + 8 * v25) = v27;
    }
    *(_DWORD *)(v6 + 36) = v25 + 1;
  }
  v28 = v133;
  v133 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete(v28, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v28;
  }
  v29 = (_DWORD **)(a2 + 136);
  JSC::Profiler::OriginStack::toJSON(a1, a2, (uint64_t *)&v133);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v8, (WTF::AtomStringImpl *)(a2 + 136), (const WTF::StringImpl *)&v133, v30, v31, v32, v33, v34, (uint64_t)v134);
  if (v135)
  {
    v42 = (uint64_t *)(v6 + 24);
    v43 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v6 + 32))
    {
      v52 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, a2 + 136);
      v43 = *(unsigned int *)(v6 + 36);
      v53 = *(_QWORD *)(v6 + 24);
      v54 = *v52;
      if (*v52)
        *v54 += 2;
      *(_QWORD *)(v53 + 8 * v43) = v54;
    }
    else
    {
      v44 = *v42;
      v45 = *v29;
      if (*v29)
        *v45 += 2;
      *(_QWORD *)(v44 + 8 * v43) = v45;
    }
    *(_DWORD *)(v6 + 36) = v43 + 1;
  }
  v46 = v133;
  v133 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      WTF::JSONImpl::Value::operator delete(v46, v35, v36, v37, v38, v39, v40, v41);
    else
      --*(_DWORD *)v46;
  }
  v47 = "Unset";
  v48 = 6;
  switch(*(_BYTE *)(a1 + 36))
  {
    case 0:
      break;
    case 1:
      v47 = "BadType";
      v48 = 8;
      break;
    case 2:
      v47 = "BadConstantValue";
      goto LABEL_63;
    case 3:
      v47 = "BadIdent";
      goto LABEL_37;
    case 4:
      v47 = "BadExecutable";
      goto LABEL_61;
    case 5:
      v47 = "BadCache";
      goto LABEL_37;
    case 6:
      v47 = "BadConstantCache";
      goto LABEL_63;
    case 7:
      v47 = "BadIndexingType";
      goto LABEL_49;
    case 8:
      v47 = "BadTypeInfoFlags";
      goto LABEL_63;
    case 9:
      v47 = "Overflow";
LABEL_37:
      v48 = 9;
      break;
    case 0xA:
      v47 = "NegativeZero";
      goto LABEL_43;
    case 0xB:
      v47 = "NegativeIndex";
      goto LABEL_61;
    case 0xC:
      v47 = "Int52Overflow";
      goto LABEL_61;
    case 0xD:
      v47 = "StoreToHole";
      goto LABEL_53;
    case 0xE:
      v47 = "LoadFromHole";
LABEL_43:
      v48 = 13;
      break;
    case 0xF:
      v47 = "OutOfBounds";
      goto LABEL_53;
    case 0x10:
      v47 = "InadequateCoverage";
      goto LABEL_56;
    case 0x11:
      v47 = "ArgumentsEscaped";
      goto LABEL_63;
    case 0x12:
      v47 = "ExoticObjectMode";
      goto LABEL_63;
    case 0x13:
      v47 = "VarargsOverflow";
LABEL_49:
      v48 = 16;
      break;
    case 0x14:
      v47 = "TDZFailure";
      v48 = 11;
      break;
    case 0x15:
      v47 = "HoistingFailed";
      goto LABEL_59;
    case 0x16:
      v47 = "Uncountable";
LABEL_53:
      v48 = 12;
      break;
    case 0x17:
      v47 = "UncountableInvalidation";
      v48 = 24;
      break;
    case 0x18:
      v47 = "WatchdogTimerFired";
LABEL_56:
      v48 = 19;
      break;
    case 0x19:
      v47 = "DebuggerEvent";
      goto LABEL_61;
    case 0x1A:
      v47 = "ExceptionCheck";
LABEL_59:
      v48 = 15;
      break;
    case 0x1B:
      v47 = "GenericUnwind";
LABEL_61:
      v48 = 14;
      break;
    case 0x1C:
      v47 = "BigInt32Overflow";
LABEL_63:
      v48 = 17;
      break;
    case 0x1D:
      v47 = "UnexpectedResizableArrayBufferView";
      v48 = 35;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198884378);
  }
  v55 = v48 - 1;
  v56 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_DWORD *)v56 = 2;
  *(_DWORD *)(v56 + 4) = v55;
  *(_QWORD *)(v56 + 8) = v47;
  *(_DWORD *)(v56 + 16) = 4;
  v57 = (_DWORD **)(a2 + 168);
  v58 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v58 = 0x400000001;
  *((_QWORD *)v58 + 1) = v56;
  if (v56)
    *(_DWORD *)v56 += 2;
  v133 = v58;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v8, (WTF::AtomStringImpl *)(a2 + 168), (const WTF::StringImpl *)&v133, v59, v60, v61, v62, v63, (uint64_t)v134);
  if (v135)
  {
    v71 = (uint64_t *)(v6 + 24);
    v72 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v72 == *(_DWORD *)(v6 + 32))
    {
      v124 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v71, v72 + 1, a2 + 168);
      v72 = *(unsigned int *)(v6 + 36);
      v125 = *(_QWORD *)(v6 + 24);
      v126 = *v124;
      if (*v124)
        *v126 += 2;
      *(_QWORD *)(v125 + 8 * v72) = v126;
    }
    else
    {
      v73 = *v71;
      v74 = *v57;
      if (*v57)
        *v74 += 2;
      *(_QWORD *)(v73 + 8 * v72) = v74;
    }
    *(_DWORD *)(v6 + 36) = v72 + 1;
  }
  v75 = v133;
  v133 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v75, v64, v65, v66, v67, v68, v69, v70);
      if (!v56)
        goto LABEL_78;
      goto LABEL_76;
    }
    --*(_DWORD *)v75;
  }
  if (!v56)
    goto LABEL_78;
LABEL_76:
  if (*(_DWORD *)v56 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v56, v64, v65, v66, v67, v68, v69, v70);
    WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
  }
  else
  {
    *(_DWORD *)v56 -= 2;
  }
LABEL_78:
  v76 = (_DWORD **)(a2 + 240);
  v77 = *(_BYTE *)(a1 + 37);
  v78 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v78 = 0x100000001;
  *((_BYTE *)v78 + 8) = v77;
  v133 = v78;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v8, (WTF::AtomStringImpl *)(a2 + 240), (const WTF::StringImpl *)&v133, v79, v80, v81, v82, v83, (uint64_t)v134);
  if (v135)
  {
    v91 = (uint64_t *)(v6 + 24);
    v92 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v92 == *(_DWORD *)(v6 + 32))
    {
      v127 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v91, v92 + 1, a2 + 240);
      v92 = *(unsigned int *)(v6 + 36);
      v128 = *(_QWORD *)(v6 + 24);
      v129 = *v127;
      if (*v127)
        *v129 += 2;
      *(_QWORD *)(v128 + 8 * v92) = v129;
    }
    else
    {
      v93 = *v91;
      v94 = *v76;
      if (*v76)
        *v94 += 2;
      *(_QWORD *)(v93 + 8 * v92) = v94;
    }
    *(_DWORD *)(v6 + 36) = v92 + 1;
  }
  v95 = v133;
  v133 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 1)
      WTF::JSONImpl::Value::operator delete(v95, v84, v85, v86, v87, v88, v89, v90);
    else
      --*(_DWORD *)v95;
  }
  v96 = (WTF::AtomStringImpl *)(a2 + 280);
  v97 = (double)*(unint64_t *)(a1 + 40);
  v98 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v98 = 0x200000001;
  v98[1] = v97;
  v133 = (WTF *)v98;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v8, v96, (const WTF::StringImpl *)&v133, v99, v100, v101, v102, v103, (uint64_t)v134);
  if (v135)
  {
    v111 = (uint64_t *)(v6 + 24);
    v112 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v112 == *(_DWORD *)(v6 + 32))
    {
      v130 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v111, v112 + 1, (unint64_t)v96);
      v112 = *(unsigned int *)(v6 + 36);
      v131 = *(_QWORD *)(v6 + 24);
      v132 = *v130;
      if (*v130)
        *v132 += 2;
      *(_QWORD *)(v131 + 8 * v112) = v132;
    }
    else
    {
      v113 = *v111;
      v114 = *(_DWORD **)v96;
      if (*(_QWORD *)v96)
        *v114 += 2;
      *(_QWORD *)(v113 + 8 * v112) = v114;
    }
    *(_DWORD *)(v6 + 36) = v112 + 1;
  }
  v115 = v133;
  v133 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 1)
      WTF::JSONImpl::Value::operator delete(v115, v104, v105, v106, v107, v108, v109, v110);
    else
      --*(_DWORD *)v115;
  }
  *a3 = v6;
}

void JSC::Profiler::OriginStack::toJSON(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;

  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x600000001;
  *(_QWORD *)(v6 + 16) = 0;
  v7 = (_QWORD *)(v6 + 16);
  *(_QWORD *)(v6 + 24) = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    v9 = 0;
    do
    {
      JSC::Profiler::Origin::toJSON((_DWORD *)(*(_QWORD *)a1 + v8), a2, (uint64_t *)&v22);
      v17 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v17 == *(_DWORD *)(v6 + 24))
      {
        v18 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v17 + 1, (unint64_t)&v22);
        v17 = *(unsigned int *)(v6 + 28);
        v19 = (_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v17);
      }
      else
      {
        v19 = (_QWORD *)(*v7 + 8 * v17);
        v18 = (uint64_t *)&v22;
      }
      v20 = *v18;
      *v18 = 0;
      *v19 = v20;
      *(_DWORD *)(v6 + 28) = v17 + 1;
      v21 = v22;
      v22 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
          WTF::JSONImpl::Value::operator delete(v21, v10, v11, v12, v13, v14, v15, v16);
        else
          --*(_DWORD *)v21;
      }
      ++v9;
      v8 += 16;
    }
    while (v9 < *(unsigned int *)(a1 + 12));
  }
  *a3 = v6;
}

void JSC::Profiler::OSRExitSite::toJSON(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t i;
  const void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  WTF *v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF *v41;
  WTF *v42;
  __int128 v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x600000001;
  *(_QWORD *)(v4 + 16) = 0;
  v5 = (uint64_t *)(v4 + 16);
  *(_QWORD *)(v4 + 24) = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    for (i = 0; i < *(unsigned int *)(a1 + 12); ++i)
    {
      v7 = *(const void **)(*(_QWORD *)a1 + 8 * i);
      v41 = (WTF *)off_1E3572250;
      v42 = (WTF *)v44;
      v43 = xmmword_199122F80;
      v44[0] = 0;
      WTF::PrintStream::printf((WTF::PrintStream *)&v41, "%p", v7);
      (*((void (**)(WTF **))v41 + 5))(&v41);
      v15 = v42;
      if (v42)
      {
        WTF::fromUTF8Impl<false>((unint64_t)v42, v43, (uint64_t *)&v40);
        v15 = v42;
        if (v42 == (WTF *)v44)
          goto LABEL_8;
      }
      else
      {
        v40 = 0;
      }
      WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
LABEL_8:
      v16 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v16 = 0x400000001;
      v24 = v40;
      *((_QWORD *)v16 + 1) = v40;
      if (v24)
        *(_DWORD *)v24 += 2;
      v41 = v16;
      v25 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v25 == *(_DWORD *)(v4 + 24))
      {
        v26 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v25 + 1, (unint64_t)&v41);
        v25 = *(unsigned int *)(v4 + 28);
        v27 = *(_QWORD *)(v4 + 16);
        v28 = *v26;
        *v26 = 0;
        *(_QWORD *)(v27 + 8 * v25) = v28;
      }
      else
      {
        v29 = *v5;
        v41 = 0;
        *(_QWORD *)(v29 + 8 * v25) = v16;
      }
      *(_DWORD *)(v4 + 28) = v25 + 1;
      v30 = v41;
      v41 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 1)
          WTF::JSONImpl::Value::operator delete(v30, v17, v18, v19, v20, v21, v22, v23);
        else
          --*(_DWORD *)v30;
      }
      v31 = v40;
      v40 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
        {
          WTF::StringImpl::~StringImpl(v31, v17, v18, v19, v20, v21, v22, v23);
          WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
        }
        else
        {
          *(_DWORD *)v31 -= 2;
        }
      }
    }
  }
  *a2 = v4;
}

void JSC::Profiler::Origin::toJSON(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _DWORD **v7;
  double v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  WTF *v26;
  WTF::AtomStringImpl *v27;
  double v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  WTF *v46;
  _DWORD **v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD **v50;
  uint64_t v51;
  _DWORD *v52;
  WTF *v53;
  _BYTE v54[16];
  char v55;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = (_DWORD **)(a2 + 32);
  v8 = (double)*(unint64_t *)(*(_QWORD *)a1 + 32);
  v9 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x200000001;
  v9[1] = v8;
  v53 = (WTF *)v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)(a2 + 32), (const WTF::StringImpl *)&v53, v10, v11, v12, v13, v14, (uint64_t)v54);
  if (v55)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v47 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, a2 + 32);
      v23 = *(unsigned int *)(v6 + 36);
      v48 = *(_QWORD *)(v6 + 24);
      v49 = *v47;
      if (*v47)
        *v49 += 2;
      *(_QWORD *)(v48 + 8 * v23) = v49;
    }
    else
    {
      v24 = *v22;
      v25 = *v7;
      if (*v7)
        *v25 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v53;
  v53 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  v27 = (WTF::AtomStringImpl *)(a2 + 16);
  v28 = (double)(a1[2] >> 2);
  v29 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v29 = 0x200000001;
  v29[1] = v28;
  v53 = (WTF *)v29;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), v27, (const WTF::StringImpl *)&v53, v30, v31, v32, v33, v34, (uint64_t)v54);
  if (v55)
  {
    v42 = (uint64_t *)(v6 + 24);
    v43 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v6 + 32))
    {
      v50 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)v27);
      v43 = *(unsigned int *)(v6 + 36);
      v51 = *(_QWORD *)(v6 + 24);
      v52 = *v50;
      if (*v50)
        *v52 += 2;
      *(_QWORD *)(v51 + 8 * v43) = v52;
    }
    else
    {
      v44 = *v42;
      v45 = *(_DWORD **)v27;
      if (*(_QWORD *)v27)
        *v45 += 2;
      *(_QWORD *)(v44 + 8 * v43) = v45;
    }
    *(_DWORD *)(v6 + 36) = v43 + 1;
  }
  v46 = v53;
  v53 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      WTF::JSONImpl::Value::operator delete(v46, v35, v36, v37, v38, v39, v40, v41);
    else
      --*(_DWORD *)v46;
  }
  *a3 = v6;
}

JSC::Profiler::OriginStack *JSC::Profiler::OriginStack::OriginStack(JSC::Profiler::OriginStack *this, JSC::Profiler::Database *a2, JSC::CodeBlock *a3, const JSC::CodeOrigin *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  unsigned int v30;
  unint64_t i;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v47;
  WTF *v48;
  int v49;
  unsigned int v50;

  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 1;
  JSC::CodeOrigin::inlineStack(a4, (uint64_t)&v48);
  if (!v50)
  {
    __break(0xC471u);
LABEL_55:
    JUMPOUT(0x198884BC0);
  }
  v13 = *(_QWORD *)v48;
  if ((*(_QWORD *)v48 & 2) != 0)
  {
    LODWORD(v14) = -1;
  }
  else if ((v13 & 1) != 0)
  {
    LODWORD(v14) = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v14 = v13 >> 36;
  }
  v15 = (unsigned __int8 *)a2 + 112;
  if (__ldaxr((unsigned __int8 *)a2 + 112))
  {
    __clrex();
  }
  else if (!__stxr(1u, v15))
  {
    goto LABEL_9;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 112);
LABEL_9:
  v24 = JSC::Profiler::Database::ensureBytecodesFor((uint64_t)a2, v7, (uint64_t)a3, v8, v9, v10, v11, v12);
  v25 = __ldxr(v15);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v15))
LABEL_13:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 112, 0, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)&v47 = v24;
  DWORD2(v47) = v14;
  v26 = *((unsigned int *)this + 3);
  if ((_DWORD)v26 == *((_DWORD *)this + 2))
  {
    v27 = (__int128 *)WTF::Vector<JSC::Profiler::Origin,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, (void *)(v26 + 1), (unint64_t)&v47, v19, v20, v21, v22, v23);
    v26 = *((unsigned int *)this + 3);
    v28 = *(_QWORD *)this;
    v29 = *v27;
  }
  else
  {
    v28 = *(_QWORD *)this;
    v29 = v47;
  }
  *(_OWORD *)(v28 + 16 * v26) = v29;
  ++*((_DWORD *)this + 3);
  v30 = v50;
  if (v50 >= 2)
  {
    for (i = 1; i < v50; ++i)
    {
      v32 = *((_QWORD *)v48 + i);
      v33 = (_QWORD *)(v32 & 0xFFFFFFFF8);
      if ((v32 & 1) != 0)
        v33 = (_QWORD *)*v33;
      v34 = v33[1];
      if (__ldaxr(v15))
      {
        __clrex();
      }
      else if (!__stxr(1u, v15))
      {
        goto LABEL_25;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 112);
LABEL_25:
      v36 = JSC::Profiler::Database::ensureBytecodesFor((uint64_t)a2, (uint64_t)v17, v34, v19, v20, v21, v22, v23);
      v37 = __ldxr(v15);
      if (v37 != 1)
      {
        __clrex();
LABEL_29:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 112, 0, v18, v19, v20, v21, v22, v23);
        goto LABEL_30;
      }
      if (__stlxr(0, v15))
        goto LABEL_29;
LABEL_30:
      if (i >= v50)
      {
        __break(0xC471u);
        goto LABEL_55;
      }
      v38 = *((_QWORD *)v48 + i);
      if ((v38 & 2) != 0)
      {
        LODWORD(v38) = -1;
      }
      else if ((v38 & 1) != 0)
      {
        LODWORD(v38) = *(_DWORD *)((v38 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v38 >>= 36;
      }
      *(_QWORD *)&v47 = v36;
      DWORD2(v47) = v38;
      v39 = *((unsigned int *)this + 3);
      if ((_DWORD)v39 == *((_DWORD *)this + 2))
      {
        v40 = (__int128 *)WTF::Vector<JSC::Profiler::Origin,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, (void *)(v39 + 1), (unint64_t)&v47, v19, v20, v21, v22, v23);
        v39 = *((unsigned int *)this + 3);
        v41 = *(_QWORD *)this;
        v42 = *v40;
      }
      else
      {
        v41 = *(_QWORD *)this;
        v42 = v47;
      }
      *(_OWORD *)(v41 + 16 * v39) = v42;
      ++*((_DWORD *)this + 3);
      v30 = v50;
    }
  }
  v43 = v48;
  if (v30)
  {
    v44 = 8 * v30;
    do
    {
      v45 = *(_QWORD *)v43;
      if ((*(_QWORD *)v43 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v45 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
      v43 = (WTF *)((char *)v43 + 8);
      v44 -= 8;
    }
    while (v44);
    v43 = v48;
  }
  if (v43)
  {
    v48 = 0;
    v49 = 0;
    WTF::fastFree((unint64_t)v43, v17, v18, v19, v20, v21, v22, v23);
  }
  return this;
}

void JSC::Profiler::UID::toJSON(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  void (**v30)(WTF::StringPrintStream *__hidden);
  WTF *v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v30 = off_1E3572250;
  v31 = (WTF *)v33;
  v32 = xmmword_199122F80;
  v33[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v30, "%llu", *a1);
  v30[5]((WTF::StringPrintStream *)&v30);
  v30[5]((WTF::StringPrintStream *)&v30);
  v10 = v31;
  if (!v31)
  {
    v29 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v31, v32, (uint64_t *)&v29);
  v10 = v31;
  if (v31 != (WTF *)v33)
LABEL_5:
    WTF::fastFree((unint64_t)v10, v3, v4, v5, v6, v7, v8, v9);
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v18 = 0x400000001;
  v19 = v29;
  v18[1] = v29;
  if (v19)
  {
    v20 = *(_DWORD *)v19;
    *(_DWORD *)v19 += 2;
    *a2 = v18;
    v29 = 0;
    if (v20)
    {
      *(_DWORD *)v19 = v20;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
  }
  else
  {
    *a2 = v18;
  }
}

unint64_t WTF::Vector<JSC::Profiler::Origin,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 16 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
      {
        v26 = *(_QWORD *)a1;
        return v26 + 16 * ((uint64_t)(v8 - v10) >> 4);
      }
      if (v15 < 2)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 1;
        goto LABEL_34;
      }
      if (!(v15 >> 28))
      {
        v16 = WTF::fastMalloc((WTF *)(16 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_34:
        v27 = 0;
        do
        {
          *(_OWORD *)(v16 + v27) = *(_OWORD *)(v10 + v27);
          v27 += 16;
        }
        while (16 * v11 != v27);
        v26 = *(_QWORD *)a1;
        if (a1 + 16 != v10 && v10)
        {
          if (v26 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
          v26 = *(_QWORD *)a1;
        }
        return v26 + 16 * ((uint64_t)(v8 - v10) >> 4);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x198884EB4);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 2)
    {
      v22 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    else
    {
      if (v20 >> 28)
        goto LABEL_43;
      v22 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    v23 = 16 * v21;
    v24 = (__int128 *)v10;
    do
    {
      v25 = *v24++;
      *v22++ = v25;
      v23 -= 16;
    }
    while (v23);
LABEL_27:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

void JSC::AbstractModuleRecord::visitChildren(JSC::AbstractModuleRecord *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;

  JSC::JSInternalFieldObjectImpl<2u>::visitChildren(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 14);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
      {
LABEL_6:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_7;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
LABEL_7:
  v18 = *((_QWORD *)this + 13);
  if (!v18)
    goto LABEL_13;
  if ((v18 & 8) != 0)
  {
    if ((*(_BYTE *)(v18 - 79) & 1) != 0)
      goto LABEL_12;
  }
  else
  {
    v19 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != v19)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), v19, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) != 0)
    {
LABEL_12:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_13;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v18, 0, v11, v12, v13, v14, v15);
LABEL_13:
  v20 = *((_QWORD *)this + 12);
  if (!v20)
    return;
  if ((v20 & 8) != 0)
  {
    if ((*(_BYTE *)(v20 - 79) & 1) == 0)
      goto LABEL_25;
  }
  else
  {
    v21 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) != v21)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v20 & 0xFFFFFFFFFFFFC000), v21, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) == 0)
      goto LABEL_25;
  }
  if (*((_QWORD *)a2 + 21))
LABEL_25:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v20, 0, v11, v12, v13, v14, v15);
}

uint64_t JSC::AbstractModuleRecord::visitChildren(JSC::AbstractModuleRecord *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;
  _QWORD v10[2];
  _QWORD *v11;
  char v12;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v10[0] = a2;
    v10[1] = this;
    v12 = 0;
    v11 = v7;
    *((_QWORD *)a2 + 11) = v10;
    JSC::JSObject::visitChildren(this, a2, a3);
    if ((*((_QWORD *)this + 2) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 3) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v10[0] + 88) = v11;
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 14));
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 13));
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 12));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

double JSC::AbstractModuleRecord::AbstractModuleRecord(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD **a4)
{
  int v4;
  _DWORD *v5;
  double result;

  v4 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)a1 = a3 >> 4;
  *(_DWORD *)(a1 + 4) = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = *a4;
  if (*a4)
    *v5 += 2;
  *(_QWORD *)(a1 + 32) = v5;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  return result;
}

void JSC::AbstractModuleRecord::finishCreation(JSC::AbstractModuleRecord *this, unint64_t a2, JSC::VM *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  char *v11;
  JSC::Heap *v12;
  unint64_t SlowCase;
  int v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(WTF::StringImpl **);
  WTF::StringImpl **v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  WTF::StringImpl *v45;
  JSC::AbstractModuleRecord *v46;
  uint64_t v47;
  uint64_t v48;

  if (*((_BYTE *)a3 + 755))
    __dmb(0xAu);
  *((_OWORD *)this + 1) = xmmword_19914EFB0;
  v10 = *(_QWORD *)(a2 + 1520);
  if ((v10 & 1) != 0)
  {
    v35 = *(uint64_t (**)(WTF::StringImpl **))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a2 & 8) != 0)
      v36 = (WTF::StringImpl **)(a2 - 16);
    else
      v36 = (WTF::StringImpl **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    v45 = *v36;
    v46 = (JSC::AbstractModuleRecord *)a2;
    v47 = a2 + 1520;
    v10 = v35(&v45);
  }
  v11 = (char *)a3 + 192;
  v12 = (JSC::Heap *)*((_QWORD *)a3 + 5083);
  if (!v12)
  {
    v38 = v10;
    v12 = JSC::GCClient::Heap::mapSpaceSlow((JSC::Heap **)a3 + 4694);
    v10 = v38;
    v11 = (char *)a3 + 192;
  }
  SlowCase = *((_QWORD *)v12 + 3);
  if (SlowCase < *((_QWORD *)v12 + 4))
    goto LABEL_7;
  SlowCase = *((_QWORD *)v12 + 5);
  if ((SlowCase & 1) == 0)
  {
    v37 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v12 + 6);
    *((_QWORD *)v12 + 4) = SlowCase + HIDWORD(v37);
    *((_QWORD *)v12 + 5) = SlowCase + (int)v37;
LABEL_7:
    *((_QWORD *)v12 + 3) = SlowCase + 32;
    goto LABEL_8;
  }
  v39 = (uint64_t)v11;
  v44 = v10;
  v40 = (uint64_t)v12;
  JSC::sanitizeStackForVM((JSC *)(v11 - 192), (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v40, v39, 32, 0, 0, v41, v42, v43);
  v10 = v44;
  v11 = (char *)v39;
LABEL_8:
  *(_DWORD *)SlowCase = 0;
  v14 = *(_DWORD *)(v10 + 8);
  *(_DWORD *)SlowCase = v10 >> 4;
  *(_DWORD *)(SlowCase + 4) = v14;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  if (*((_BYTE *)a3 + 755))
    __dmb(0xAu);
  *((_QWORD *)this + 12) = SlowCase;
  if (*((_DWORD *)a3 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v11, (unint64_t)this);
  WTF::AtomStringImpl::addLiteral((uint64_t)"dependenciesMap", 0xFuLL, a4, a5, a6, a7, a8, &v45);
  v15 = v45;
  v16 = *((_QWORD *)this + 12);
  v45 = 0;
  v46 = this;
  v47 = 0x1000000FFFFFFFFLL;
  v17.n128_u64[0] = 0x100000001000000;
  v48 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)this, (uint64_t)a3, (unint64_t)v15, v16, 0, (uint64_t)&v45, v18, v19, v17);
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
}

void JSC::AbstractModuleRecord::appendRequestedModule(uint64_t a1, WTF::AtomStringImpl *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _DWORD *v30;

  v9 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v9 += 2;
  v10 = (_DWORD *)*a3;
  *a3 = 0;
  v29 = v9;
  v30 = v10;
  v11 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v11 == *(_DWORD *)(a1 + 88))
  {
    v15 = (uint64_t *)WTF::Vector<JSC::AbstractModuleRecord::ModuleRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 80, v11 + 1, (unint64_t)&v29);
    v16 = *(unsigned int *)(a1 + 92);
    v17 = (_QWORD *)(*(_QWORD *)(a1 + 80) + 16 * v16);
    v18 = *v15;
    *v15 = 0;
    *v17 = v18;
    v19 = v15[1];
    v15[1] = 0;
    v17[1] = v19;
    v20 = v30;
    *(_DWORD *)(a1 + 92) = v16 + 1;
    v30 = 0;
    if (v20)
    {
      if (v20[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
      else
        --v20[2];
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 80);
    v29 = 0;
    v13 = (WTF::StringImpl **)(v12 + 16 * v11);
    *v13 = v9;
    v13[1] = (WTF::StringImpl *)v10;
    *(_DWORD *)(a1 + 92) = v11 + 1;
    v30 = 0;
  }
  v14 = v29;
  v29 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
}

void JSC::AbstractModuleRecord::ModuleRequest::~ModuleRequest(JSC::AbstractModuleRecord::ModuleRequest *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
}

uint64_t *WTF::ListHashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t **v15;
  unsigned int v16;
  int i;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t **v36;

  v9 = result;
  v11 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>> *,WTF::ListHashSetNode<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<JSC::IdentifierRepHash>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>> *>>::rehash(result, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *v9) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = *a2;
  v14 = *(_DWORD *)(*a2 + 16);
  if ((v14 & 0x20) != 0)
    v14 = *(_DWORD *)(v13 + 32);
  v15 = 0;
  v16 = v14 >> 8;
  for (i = 1; ; ++i)
  {
    v18 = v16 & v12;
    v19 = (uint64_t **)(v11 + 8 * (v16 & v12));
    v20 = *v19;
    if (*v19 == (uint64_t *)-1)
    {
      v15 = (uint64_t **)(v11 + 8 * v18);
      goto LABEL_12;
    }
    if (!v20)
      break;
    if (*v20 == v13)
    {
      v34 = 0;
      goto LABEL_30;
    }
LABEL_12:
    v16 = i + v18;
  }
  if (v15)
  {
    *v15 = 0;
    --*(_DWORD *)(*v9 - 16);
    v19 = v15;
  }
  result = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  v26 = *a2;
  *a2 = 0;
  result[1] = 0;
  result[2] = 0;
  *result = v26;
  *v19 = result;
  v27 = *v9;
  if (*v9)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v29 = *v9;
  if (*v9)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 <= 2 * v31)
    {
LABEL_22:
      v33 = ((_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32)));
      goto LABEL_25;
    }
  }
  else if (3 * v32 <= 4 * v31)
  {
    if ((_DWORD)v32)
      goto LABEL_22;
    v33 = 8;
LABEL_25:
    v19 = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>> *,WTF::ListHashSetNode<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<JSC::IdentifierRepHash>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>> *>>::rehash(v9, v33, (uint64_t)v19, v21, v22, v23, v24, v25);
    result = *v19;
  }
  v35 = v9[2];
  result[1] = v35;
  result[2] = 0;
  if (v35)
    v36 = (uint64_t **)(v35 + 16);
  else
    v36 = (uint64_t **)(v9 + 1);
  *v36 = result;
  v9[2] = (uint64_t)result;
  v20 = *v19;
  v34 = 1;
LABEL_30:
  *(_QWORD *)a8 = v9;
  *(_QWORD *)(a8 + 8) = v20;
  *(_BYTE *)(a8 + 16) = v34;
  return result;
}

void JSC::AbstractModuleRecord::addImportEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  _BYTE v27[24];

  v8 = (uint64_t *)(a1 + 40);
  v9 = *(WTF::StringImpl **)(a2 + 24);
  if (v9)
    *(_DWORD *)v9 += 2;
  v26 = v9;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ImportEntry>,WTF::HashTableTraits>::add<JSC::AbstractModuleRecord::ImportEntry const&>(v8, (WTF::AtomStringImpl *)&v26, a2, a4, a5, a6, a7, a8, (uint64_t)v27);
  v17 = v26;
  v26 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
}

void WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ImportEntry>,WTF::HashTableTraits>::add<JSC::AbstractModuleRecord::ImportEntry const&>(uint64_t *a1@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  char v14;
  int v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  WTF::StringImpl **v36;
  int v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ImportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a1, 8u, 0), (v13 = *a1) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *(WTF::StringImpl **)a2;
  v17 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if ((v17 & 0x20) != 0)
    v17 = *((_DWORD *)v16 + 8);
  v18 = v15 & (v17 >> 8);
  v19 = (WTF::StringImpl **)(v13 + 40 * v18);
  v20 = *v19;
  if (*v19)
  {
    v36 = 0;
    v37 = 1;
    do
    {
      if (v20 == v16)
      {
        if ((v14 & 1) != 0)
          v70 = 0;
        else
          v70 = *(_DWORD *)(v13 - 4);
        v35 = 0;
        v34 = v13 + 40 * v70;
        goto LABEL_31;
      }
      if (v20 == (WTF::StringImpl *)-1)
        v36 = v19;
      v18 = (v18 + v37) & v15;
      v19 = (WTF::StringImpl **)(v13 + 40 * v18);
      v20 = *v19;
      ++v37;
    }
    while (*v19);
    if (v36)
    {
      v36[4] = 0;
      *(_OWORD *)v36 = 0u;
      *((_OWORD *)v36 + 1) = 0u;
      --*(_DWORD *)(*a1 - 16);
      v16 = *(WTF::StringImpl **)a2;
      v19 = v36;
    }
  }
  *(_QWORD *)a2 = 0;
  v21 = *v19;
  *v19 = v16;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *((_DWORD *)v19 + 2) = *(_DWORD *)a3;
  v22 = *(WTF::StringImpl **)(a3 + 8);
  if (v22)
    *(_DWORD *)v22 += 2;
  v23 = v19[2];
  v19[2] = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v24 = *(WTF::StringImpl **)(a3 + 16);
  if (v24)
    *(_DWORD *)v24 += 2;
  v25 = v19[3];
  v19[3] = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = *(WTF::StringImpl **)(a3 + 24);
  if (v26)
    *(_DWORD *)v26 += 2;
  v27 = v19[4];
  v19[4] = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = *a1;
  if (*a1)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *a1;
  if (*a1)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 > 2 * v32)
      goto LABEL_30;
LABEL_48:
    v19 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ImportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(a1, v19);
    v30 = *a1;
    if (*a1)
      LODWORD(v33) = *(_DWORD *)(v30 - 4);
    else
      LODWORD(v33) = 0;
    goto LABEL_30;
  }
  if (3 * v33 <= 4 * v32)
    goto LABEL_48;
LABEL_30:
  v34 = v30 + 40 * v33;
  v35 = 1;
LABEL_31:
  *(_QWORD *)a9 = v19;
  *(_QWORD *)(a9 + 8) = v34;
  *(_BYTE *)(a9 + 16) = v35;
}

void JSC::AbstractModuleRecord::addExportEntry(JSC::AbstractModuleRecord *this, const JSC::AbstractModuleRecord::ExportEntry *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  _BYTE v27[24];

  v8 = (uint64_t *)((char *)this + 48);
  v9 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  if (v9)
    *(_DWORD *)v9 += 2;
  v26 = v9;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ExportEntry>,WTF::HashTableTraits>::add<JSC::AbstractModuleRecord::ExportEntry const&>(v8, (WTF::AtomStringImpl *)&v26, (uint64_t)a2, a4, a5, a6, a7, a8, (uint64_t)v27);
  v17 = v26;
  v26 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
}

void WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ExportEntry>,WTF::HashTableTraits>::add<JSC::AbstractModuleRecord::ExportEntry const&>(uint64_t *a1@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t *v38;
  int v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ExportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a1, 8u, 0), (v13 = *a1) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *(_QWORD *)a2;
  v17 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if ((v17 & 0x20) != 0)
    v17 = *(_DWORD *)(v16 + 32);
  v18 = v15 & (v17 >> 8);
  v19 = (uint64_t *)(v13 + 48 * v18);
  v20 = *v19;
  if (*v19)
  {
    v38 = 0;
    v39 = 1;
    do
    {
      if (v20 == v16)
      {
        if ((v14 & 1) != 0)
          v80 = 0;
        else
          v80 = *(_DWORD *)(v13 - 4);
        v37 = 0;
        v36 = v13 + 48 * v80;
        goto LABEL_37;
      }
      if (v20 == -1)
        v38 = v19;
      v18 = (v18 + v39) & v15;
      v19 = (uint64_t *)(v13 + 48 * v18);
      v20 = *v19;
      ++v39;
    }
    while (*v19);
    if (v38)
    {
      *((_OWORD *)v38 + 1) = 0u;
      *((_OWORD *)v38 + 2) = 0u;
      *(_OWORD *)v38 = 0u;
      --*(_DWORD *)(*a1 - 16);
      v16 = *(_QWORD *)a2;
      v19 = v38;
    }
  }
  *(_QWORD *)a2 = 0;
  v21 = (WTF::StringImpl *)*v19;
  *v19 = v16;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *((_DWORD *)v19 + 2) = *(_DWORD *)a3;
  v22 = *(_DWORD **)(a3 + 8);
  if (v22)
    *v22 += 2;
  v23 = (WTF::StringImpl *)v19[2];
  v19[2] = (uint64_t)v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v24 = *(_DWORD **)(a3 + 16);
  if (v24)
    *v24 += 2;
  v25 = (WTF::StringImpl *)v19[3];
  v19[3] = (uint64_t)v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = *(_DWORD **)(a3 + 24);
  if (v26)
    *v26 += 2;
  v27 = (WTF::StringImpl *)v19[4];
  v19[4] = (uint64_t)v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = *(_DWORD **)(a3 + 32);
  if (v28)
    *v28 += 2;
  v29 = (WTF::StringImpl *)v19[5];
  v19[5] = (uint64_t)v28;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = *a1;
  if (*a1)
    v31 = *(_DWORD *)(v30 - 12) + 1;
  else
    v31 = 1;
  *(_DWORD *)(v30 - 12) = v31;
  v32 = *a1;
  if (*a1)
    v33 = *(_DWORD *)(v32 - 12);
  else
    v33 = 0;
  v34 = (*(_DWORD *)(v32 - 16) + v33);
  v35 = *(unsigned int *)(v32 - 4);
  if (v35 > 0x400)
  {
    if (v35 > 2 * v34)
      goto LABEL_36;
LABEL_53:
    v19 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ExportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(a1, v19);
    v32 = *a1;
    if (*a1)
      LODWORD(v35) = *(_DWORD *)(v32 - 4);
    else
      LODWORD(v35) = 0;
    goto LABEL_36;
  }
  if (3 * v35 <= 4 * v34)
    goto LABEL_53;
LABEL_36:
  v36 = v32 + 48 * v35;
  v37 = 1;
LABEL_37:
  *(_QWORD *)a9 = v19;
  *(_QWORD *)(a9 + 8) = v36;
  *(_BYTE *)(a9 + 16) = v37;
}

uint64_t JSC::AbstractModuleRecord::tryGetImportEntry@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  char v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;

  v3 = *(_QWORD *)(result + 40);
  if (!v3)
    goto LABEL_11;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 0x20) != 0)
    v5 = *(_DWORD *)(a2 + 32);
  v6 = v4 & (v5 >> 8);
  v7 = (uint64_t *)(v3 + 40 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 1;
    while (v8)
    {
      v6 = (v6 + v9) & v4;
      v7 = (uint64_t *)(v3 + 40 * v6);
      v8 = *v7;
      ++v9;
      if (*v7 == a2)
        goto LABEL_10;
    }
    v7 = (uint64_t *)(v3 + 40 * *(unsigned int *)(v3 - 4));
  }
LABEL_10:
  if (v7 != (uint64_t *)(v3 + 40 * *(unsigned int *)(v3 - 4)))
  {
    *(_DWORD *)a3 = *((_DWORD *)v7 + 2);
    v11 = (_DWORD *)v7[2];
    if (v11)
      *v11 += 2;
    *(_QWORD *)(a3 + 8) = v11;
    v12 = (_DWORD *)v7[3];
    if (v12)
      *v12 += 2;
    *(_QWORD *)(a3 + 16) = v12;
    v13 = (_DWORD *)v7[4];
    if (v13)
      *v13 += 2;
    *(_QWORD *)(a3 + 24) = v13;
    v10 = 1;
  }
  else
  {
LABEL_11:
    v10 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 32) = v10;
  return result;
}

_DWORD **JSC::AbstractModuleRecord::ExportEntry::createIndirect@<X0>(_DWORD **result@<X0>, _DWORD **a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  *(_DWORD *)a4 = 1;
  v4 = *result;
  if (*result)
    *v4 += 2;
  *(_QWORD *)(a4 + 8) = v4;
  v5 = *a3;
  if (*a3)
    *v5 += 2;
  *(_QWORD *)(a4 + 16) = v5;
  v6 = *a2;
  if (*a2)
    *v6 += 2;
  *(_QWORD *)(a4 + 24) = v6;
  *(_QWORD *)(a4 + 32) = 0;
  return result;
}

_DWORD **JSC::AbstractModuleRecord::ExportEntry::createNamespace@<X0>(_DWORD **result@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_DWORD *)a3 = 2;
  v3 = *result;
  if (*result)
    *v3 += 2;
  *(_QWORD *)(a3 + 8) = v3;
  v4 = *a2;
  if (*a2)
    *v4 += 2;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = v4;
  return result;
}

uint64_t JSC::AbstractModuleRecord::hostResolveImportedModule(JSC::AbstractModuleRecord *this, JSC::VM **a2, JSC::VM **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  JSC::VM *v10;
  JSC::VM *v11;
  unint64_t v12;
  JSC::VM *v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  unint64_t v21;
  unint64_t v22;
  JSC::VM *v23;
  unint64_t v24;
  BOOL v25;
  int v26;
  int **v27;
  unsigned int v28;
  int v29;
  char v30;
  double v31;
  unint64_t v32;
  JSC::VM *v33;
  double v34;
  unint64_t *v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  int v40;
  unint64_t *v41;
  JSC::VM *v42;
  JSC::VM *v43;
  double v44;
  WTF *v45;
  const WTF::StringImpl *v46;
  BOOL v47;
  uint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  JSC::JSString *v57;
  int8x16_t v58;
  uint64_t v59;
  unsigned int v60;
  _BYTE *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  int v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  _WORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unsigned __int16 *v97;
  uint64_t v98;
  unsigned int v99;
  BOOL v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int *v110;
  uint64_t v111;
  JSC::JSString *v112;
  unint64_t v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  BOOL v117;
  int v119;
  uint64_t v120;
  uint64_t v121;
  int8x16_t **v122;
  uint64_t v123;
  int v124;
  _BYTE *v125;
  uint64_t v126;
  JSC::VM *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  unsigned int v144;
  int v145;
  unint64_t v146;
  int v147;
  uint64_t v148;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v150;
  uint64_t v151;
  int v152;
  JSC::VM *v153;
  JSC::VM *v154;
  unint64_t *v155;
  unsigned __int16 *v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  int v162;
  unsigned int v163;
  uint64_t v164;
  unsigned __int8 *v165;
  int v166;
  double v167;
  const unsigned __int8 *v168;
  JSC::JSBigInt *v169;
  double v170;
  JSC::VM *v171;
  JSC::VM *v172;
  unint64_t *v173;
  BOOL v174;
  unsigned __int8 *v175;
  uint64_t v176;
  unsigned int v177;
  JSC::VM *v178;
  uint64_t v179;
  char v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int *v184;
  uint64_t v185;
  uint64_t Index;
  int v187;
  char v188;
  uint64_t v189;
  int v190;
  _BYTE *v191;
  uint64_t v192;
  uint64_t v193;
  unsigned __int16 *v194;
  unsigned int v195;
  unsigned __int8 *v196;
  uint64_t v197;
  unsigned int v198;
  JSC::VM *v199;
  uint64_t v200;
  int v201;
  int v202;
  int v203;
  uint64_t v204;
  _BOOL4 v205;
  uint64_t v206;
  unsigned __int8 *v207;
  unsigned int v208;
  uint64_t v209;
  JSC::JSString *v210;
  double v211;
  JSC::VM *v212;
  JSC::JSGlobalObject *v213;
  JSC::JSString *v214;
  uint64_t (*v215)(unint64_t);
  uint64_t v216;
  unint64_t v217;
  JSC::JSString *v218;
  JSC::JSString *v219;
  _QWORD v220[2];
  uint64_t v221;
  char v222;
  int8x16_t **v223;
  uint64_t v224;
  WTF::StringImpl *v225[18];

  v8 = (JSC::JSGlobalObject *)a2;
  v225[16] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v10 = a2[7];
  v11 = *a3;
  if (*a3 && (*((_BYTE *)v11 + 16) & 0x20) != 0)
    v12 = JSC::Symbol::create(v10, v11, (WTF::SymbolImpl *)a3, a4, a5, a6, a7, a8);
  else
    v12 = JSC::jsString(v10, (JSC::VM *)a3, (const WTF::String *)a3, a4, a5, a6, a7, a8);
  v21 = v12;
  v22 = *(_QWORD *)(*((_QWORD *)this + 12) + 16);
  if (!v22)
    goto LABEL_111;
  v23 = (JSC::VM *)*((_QWORD *)v8 + 7);
  v24 = v22 + 16;
  v213 = v8;
  if (*(_DWORD *)(v22 + 16))
  {
    if (v12 >> 49)
      v25 = v12 > 0xFFFDFFFFFFFFFFFFLL;
    else
      v25 = 1;
    if (!v25)
    {
      v20.i64[0] = v12 - 0x2000000000000;
      v123 = (int)*(double *)v20.i64;
      if (*(double *)v20.i64 == (double)(int)v123)
        v21 = v123 | 0xFFFE000000000000;
    }
    if ((v21 & 0xFFFE000000000002) != 0)
    {
      v30 = 0;
    }
    else
    {
      v26 = *(unsigned __int8 *)(v21 + 5);
      if (v26 == 2)
      {
        v27 = (int **)(v21 + 8);
        if ((*(_BYTE *)(v21 + 8) & 1) != 0)
          v27 = JSC::JSRopeString::resolveRope(v21, v8, (uint64_t)v14, v15, v20, v16, v17, v18, v19);
        if (*((_DWORD *)v23 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v23, (uint64_t)v13, (uint64_t)v14, v15, v16, v17, v18, v19))
        {
          v29 = -1;
        }
        else
        {
          v28 = (*v27)[4];
          if (v28 < 0x100)
            v29 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)*v27);
          else
            v29 = v28 >> 8;
        }
LABEL_18:
        v30 = 1;
LABEL_19:
        if (*((_DWORD *)v23 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v23, (uint64_t)v13, (uint64_t)v14, v15, v16, v17, v18, v19))
        {
          v22 = 0;
          if (!*((_DWORD *)v23 + 20))
            goto LABEL_48;
          goto LABEL_209;
        }
        *(double *)v20.i64 = (double)(int)v21;
        if (v21 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v31 = v21 - 0x2000000000000;
        else
          v31 = (double)(int)v21;
        v32 = *(_QWORD *)(v24 + 8 * (((*(_DWORD *)(v22 + 32) - 1) & v29) + 4));
        if (v32)
        {
          v33 = (JSC::VM *)*((_QWORD *)v8 + 7);
          v34 = v31;
          v35 = (unint64_t *)((char *)v33 + 41840);
          v36 = v30 ^ 1;
          v212 = v10;
          while (1)
          {
            v37 = *(_QWORD *)(v24 + 8 * v32);
            if ((v37 & 0xFFFE000000000002) == 0)
            {
              v38 = *v35;
              if (!*v35)
              {
                v211 = v34;
                v153 = v23;
                v154 = v33;
                v155 = v35;
                v38 = JSC::VM::orderedHashTableDeletedValueSlow(v33, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
                v35 = v155;
                v33 = v154;
                v23 = v153;
                v34 = v211;
              }
              if (v38 == v37)
                goto LABEL_38;
            }
            if (v21 == v37)
              goto LABEL_45;
            if (v21 >> 49)
            {
              if (v37 >> 49)
              {
                *(double *)v20.i64 = (double)(int)v37;
                if (v37 <= 0xFFFDFFFFFFFFFFFFLL)
                  v20.i64[0] = v37 - 0x2000000000000;
                if (*(_QWORD *)&v34 == v20.i64[0])
                {
LABEL_45:
                  v22 = v32;
                  v10 = v212;
                  goto LABEL_46;
                }
              }
            }
            else
            {
              if ((v37 & 0xFFFE000000000002) != 0)
                v39 = 1;
              else
                v39 = v36;
              if ((v39 & 1) != 0)
                goto LABEL_38;
              v40 = *(unsigned __int8 *)(v21 + 5);
              if (v40 == 2)
              {
                if (*(_BYTE *)(v37 + 5) != 2)
                  goto LABEL_37;
                v41 = v35;
                v42 = v23;
                v43 = v33;
                v44 = v34;
                v45 = *(WTF **)(v21 + 8);
                if ((v45 & 1) != 0
                  || (v46 = *(const WTF::StringImpl **)(v37 + 8), (v46 & 1) != 0))
                {
                  v47 = JSC::JSString::equalSlowCase((JSC::JSString *)v21, v213, (JSC::JSString *)v37, v15, v16, v17, v18, v19, v20);
                }
                else
                {
                  v47 = WTF::equal(v45, v46, v14);
                }
                v34 = v44;
                v33 = v43;
                v23 = v42;
                v35 = v41;
                if (v47)
                  goto LABEL_45;
              }
              else
              {
                if (v40 != 3 || *(_BYTE *)(v37 + 5) != 3)
                {
LABEL_37:
                  if (v21 == v37)
                    goto LABEL_45;
                  goto LABEL_38;
                }
                v169 = (JSC::JSBigInt *)v37;
                v170 = v34;
                v171 = v23;
                v172 = v33;
                v173 = v35;
                v174 = JSC::JSBigInt::equals((JSC::JSBigInt *)v21, v169, v14);
                v35 = v173;
                v33 = v172;
                v23 = v171;
                v34 = v170;
                if (v174)
                  goto LABEL_45;
              }
            }
LABEL_38:
            v32 = *(_QWORD *)(v24 + 8 * (v32 + 2));
            v22 = 0xFFFFFFFFLL;
            v10 = v212;
            if (!v32)
              goto LABEL_46;
          }
        }
        goto LABEL_110;
      }
      if (v26 == 3)
      {
        v29 = *(_DWORD *)(v21 + 12);
        if (!v29)
          v29 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v21);
        goto LABEL_18;
      }
      v30 = 1;
    }
    v94 = (v21 + ~(v21 << 32)) ^ ((v21 + ~(v21 << 32)) >> 22);
    v95 = 9 * ((v94 + ~(v94 << 13)) ^ ((v94 + ~(v94 << 13)) >> 8));
    v96 = (v95 ^ (v95 >> 15)) + ~((v95 ^ (v95 >> 15)) << 27);
    v29 = (v96 >> 31) ^ v96;
    goto LABEL_19;
  }
LABEL_110:
  v22 = 0xFFFFFFFFLL;
LABEL_46:
  if (*((_DWORD *)v23 + 20))
  {
    v8 = v213;
LABEL_209:
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v23, (uint64_t)v13, (uint64_t)v14, v15, v16, v17, v18, v19);
    v48 = 10;
    if ((_DWORD)v22 == -1 || hasExceptionsAfterHandlingTraps)
      goto LABEL_50;
LABEL_48:
    v48 = *(_QWORD *)(v24 + 8 * (v22 + 1));
    if (!v48)
      v48 = 10;
    goto LABEL_50;
  }
  v8 = v213;
  if ((_DWORD)v22 != -1)
    goto LABEL_48;
LABEL_111:
  v48 = 10;
LABEL_50:
  v214 = (JSC::JSString *)v48;
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v13, (uint64_t)v14, v15, v16, v17, v18, v19))
  {
    return 0;
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"module", 6uLL, v15, v16, v17, v18, v19, v225);
  v56 = (unint64_t)v225[0];
  v57 = v214;
  v58.i64[0] = 0xFFFFFFFF00000000;
  v217 = 0xFFFFFFFF00000000;
  LOBYTE(v221) = 0;
  v222 = 0;
  v223 = 0;
  v224 = 0;
  v219 = 0;
  memset(v220, 0, 13);
  v218 = v214;
  if (((unint64_t)v214 & 0xFFFE000000000002) == 0)
  {
    v59 = *((_QWORD *)v8 + 7);
    v60 = *((unsigned __int8 *)v214 + 5);
    if (v60 > 0x16)
      goto LABEL_53;
    if (v60 == 2)
    {
      if (*(WTF::StringImpl **)(*(_QWORD *)(v59 + 41952) + 1768) == v225[0])
      {
        v183 = *((_QWORD *)v214 + 1);
        if ((v183 & 1) != 0)
          v184 = (unsigned int *)((char *)v214 + 16);
        else
          v184 = (unsigned int *)(v183 + 4);
        v185 = *v184;
        if ((v185 & 0x80000000) != 0)
          Index = COERCE__INT64((double)v185) + 0x2000000000000;
        else
          Index = v185 | 0xFFFE000000000000;
        v187 = 14;
        goto LABEL_343;
      }
      if (v225[0])
      {
        v190 = *((_DWORD *)v225[0] + 4);
        if ((v190 & 0x20) == 0)
        {
          v191 = (_BYTE *)*((_QWORD *)v225[0] + 1);
          v192 = *((unsigned int *)v225[0] + 1);
          if ((v190 & 4) != 0)
          {
            if (!(_DWORD)v192)
              goto LABEL_353;
            v50 = *v191 - 48;
            if (v50 > 9 || v192 >= 2 && *v191 == 48)
              goto LABEL_353;
            v206 = v192 - 1;
            v207 = v191 + 1;
            while (v206)
            {
              if (v50 > 0x19999999)
                goto LABEL_353;
              v208 = *v207 - 48;
              if (v208 > 9)
                goto LABEL_353;
              v188 = 0;
              v100 = __CFADD__(v208, 10 * v50);
              v50 = v208 + 10 * (_DWORD)v50;
              --v206;
              ++v207;
              if (v100)
                goto LABEL_344;
            }
          }
          else
          {
            if (!(_DWORD)v192)
              goto LABEL_353;
            v50 = *(unsigned __int16 *)v191 - 48;
            if (v50 > 9 || *(_WORD *)v191 == 48 && v192 > 1)
              goto LABEL_353;
            v193 = v192 - 1;
            v194 = (unsigned __int16 *)(v191 + 2);
            while (v193)
            {
              if (v50 > 0x19999999)
                goto LABEL_353;
              v195 = *v194 - 48;
              if (v195 > 9)
                goto LABEL_353;
              v188 = 0;
              v100 = __CFADD__(v195, 10 * v50);
              v50 = v195 + 10 * (_DWORD)v50;
              --v193;
              ++v194;
              if (v100)
                goto LABEL_344;
            }
          }
          if ((_DWORD)v50 != -1)
          {
            v209 = *((_QWORD *)v214 + 1);
            v210 = (v209 & 1) != 0 ? (JSC::JSString *)((char *)v214 + 16) : (JSC::JSString *)(v209 + 4);
            if (*(_DWORD *)v210 > v50)
            {
              Index = JSC::JSString::getIndex(v214, v8, v50, v51, v52, v53, v54, v55, v58);
              if (!*(_DWORD *)(v59 + 80)
                || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v59, (uint64_t)v49, v50, v51, v52, v53, v54, v55))
              {
                v187 = 10;
LABEL_343:
                v215 = (uint64_t (*)(unint64_t))Index;
                LODWORD(v217) = v187;
                v219 = 0;
                v188 = 1;
                BYTE1(v220[1]) = 1;
                goto LABEL_344;
              }
            }
          }
        }
      }
LABEL_353:
      v188 = 0;
LABEL_344:
      if (*(_DWORD *)(v59 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v59, (uint64_t)v49, v50, v51, v52, v53, v54, v55))
      {
        goto LABEL_93;
      }
      if ((v188 & 1) != 0)
        goto LABEL_101;
    }
  }
  v189 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v214, (unint64_t)v8);
  if (!v189)
    goto LABEL_93;
  v57 = (JSC::JSString *)v189;
  v59 = *((_QWORD *)v8 + 7);
LABEL_53:
  v61 = (char *)v57 + 6;
  v62 = v56 >> 4;
  v63 = (unint64_t)v57;
  if ((*((_BYTE *)v57 + 6) & 8) == 0)
  {
    v22 = (unint64_t)v57;
    do
    {
      v64 = *(_DWORD *)v22 & 0xFFFFFFFE;
      v65 = 16 * v64;
      if (!(_DWORD)v62 || (v62 & ~*(_DWORD *)(16 * v64 + 0x20)) != 0)
        goto LABEL_66;
      v66 = *(_QWORD *)(16 * v64 + 0x58);
      if (!v66)
      {
        v77 = *(_QWORD *)(16 * v64 + 0x40);
        if (!v77 || *(_BYTE *)(v77 + 5) != 1 && *(_DWORD *)(v77 + 80) < 2u)
          goto LABEL_66;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v65, (JSC::VM *)v59, 1, (const JSC::PropertyTable *)v51, v52, v53, v54, v55);
        if (!v66)
          goto LABEL_66;
      }
      if (!*(_DWORD *)(v66 + 24))
        goto LABEL_66;
      v67 = *(_QWORD *)(v66 + 16);
      v68 = v67 & 0xFFFFFFFFFFFFFFFELL;
      v69 = *(unsigned int *)(v66 + 8);
      v70 = *(_DWORD *)(v56 + 16);
      if ((v67 & 1) != 0)
      {
        if ((v70 & 0x20) != 0)
          v70 = *(_DWORD *)(v56 + 32);
        v71 = *(_DWORD *)(v66 + 12);
        v72 = (v70 >> 8) & *(_QWORD *)&v71;
        v73 = *(unsigned __int8 *)(v68 + v72);
        if (!*(_BYTE *)(v68 + v72))
          goto LABEL_66;
        v74 = v68 + v69;
        v75 = 1;
        while (1)
        {
          v76 = *(_QWORD *)(v74 + 8 * (v73 - 1));
          if (v56 == (v76 & 0xFFFFFFFFFFFFLL))
            break;
          v72 = ((_DWORD)v72 + v75) & v71;
          v73 = *(unsigned __int8 *)(v68 + v72);
          ++v75;
          if (!*(_BYTE *)(v68 + v72))
            goto LABEL_66;
        }
        v53 = (v76 >> 16) & 0xFF00000000 | HIBYTE(v76);
      }
      else
      {
        if ((v70 & 0x20) != 0)
          v70 = *(_DWORD *)(v56 + 32);
        v78 = *(_DWORD *)(v66 + 12);
        v79 = v78 & (v70 >> 8);
        v80 = *(_DWORD *)(v68 + 4 * v79);
        if (!v80)
          goto LABEL_66;
        v81 = v68 + 4 * v69;
        v82 = 1;
        while (1)
        {
          v83 = (v80 - 1);
          if (v56 == *(_QWORD *)(v81 + 16 * v83))
            break;
          v79 = (v79 + v82) & v78;
          v80 = *(_DWORD *)(v68 + 4 * v79);
          ++v82;
          if (!v80)
            goto LABEL_66;
        }
        v53 = *(unsigned int *)(v81 + 16 * v83 + 8) | ((unint64_t)*(unsigned __int8 *)(v81 + 16 * v83 + 12) << 32);
      }
      if ((_DWORD)v53 != -1)
      {
        v52 = HIDWORD(v53);
        if ((int)v53 <= 63)
        {
          v89 = v22 + 16;
          v90 = v53 << 32;
        }
        else
        {
          v89 = *(_QWORD *)(v22 + 8) - 8;
          v90 = 0x3F00000000 - (v53 << 32);
        }
        v51 = *(_QWORD *)(v89 + (v90 >> 29));
        if ((v51 & 0xFFFE000000000002) == 0)
        {
          v91 = *(unsigned __int8 *)(v51 + 5);
          if (v91 != 5)
          {
            if (v91 != 6)
              goto LABEL_99;
            v119 = *(_DWORD *)(v65 + 16) & 3;
            v120 = *(_QWORD *)(v51 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v51 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v122 = *(int8x16_t ***)(v51 + 24);
              v121 = *(_QWORD *)(v51 + 32);
              v215 = *(uint64_t (**)(unint64_t))(v51 + 8);
              v216 = v120;
              LODWORD(v217) = HIDWORD(v53);
              v219 = (JSC::JSString *)v22;
              goto LABEL_153;
            }
            v215 = *(uint64_t (**)(unint64_t))(v51 + 8);
            v216 = v120;
            LODWORD(v217) = HIDWORD(v53);
            v219 = (JSC::JSString *)v22;
LABEL_233:
            BYTE1(v220[1]) = 3;
            if (v119 != 2)
              LOBYTE(v220[1]) = 1;
            goto LABEL_101;
          }
          v110 = (unsigned int *)v22;
          v111 = v59;
LABEL_132:
          JSC::JSObject::fillGetterPropertySlot(v110, v111, (uint64_t)&v215, v51, v52, v53);
          goto LABEL_101;
        }
LABEL_99:
        v215 = (uint64_t (*)(unint64_t))v51;
        v219 = (JSC::JSString *)v22;
LABEL_100:
        v217 = __PAIR64__(v53, v52);
        LOWORD(v220[1]) = 257;
        goto LABEL_101;
      }
LABEL_66:
      if ((*v61 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v22, (JSC::VM *)v59, v56, (uint64_t)&v215) & 1) != 0)
      {
        goto LABEL_101;
      }
      v63 = *(_QWORD *)(v65 + 48);
      if (!v63)
        v63 = *(_QWORD *)(v22 + 16);
      if ((v63 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v63 + 5) < 0x17u)
      {
        if (!v56)
          goto LABEL_93;
        v84 = *(_DWORD *)(v56 + 16);
        if ((v84 & 0x20) != 0)
          goto LABEL_93;
        v85 = *(_WORD **)(v56 + 8);
        v86 = *(unsigned int *)(v56 + 4);
        if ((v84 & 4) == 0)
        {
          if ((_DWORD)v86)
          {
            v87 = (unsigned __int16)*v85 - 48;
            if (v87 <= 9 && (*v85 != 48 || v86 <= 1))
            {
              v97 = v85 + 1;
              v98 = v86 - 1;
              v88 = 10;
              while (v98)
              {
                if (v87 <= 0x19999999)
                {
                  v99 = *v97 - 48;
                  if (v99 <= 9)
                  {
                    v100 = __CFADD__(v99, 10 * v87);
                    v87 = v99 + 10 * (_DWORD)v87;
                    ++v97;
                    --v98;
                    if (!v100)
                      continue;
                  }
                }
                goto LABEL_103;
              }
              goto LABEL_301;
            }
          }
          goto LABEL_93;
        }
        if (!(_DWORD)v86)
          goto LABEL_93;
        v87 = *(unsigned __int8 *)v85 - 48;
        if (v87 > 9 || v86 >= 2 && *(_BYTE *)v85 == 48)
          goto LABEL_93;
        v175 = (unsigned __int8 *)v85 + 1;
        v176 = v86 - 1;
        v88 = 10;
        while (v176)
        {
          if (v87 <= 0x19999999)
          {
            v177 = *v175 - 48;
            if (v177 <= 9)
            {
              v100 = __CFADD__(v177, 10 * v87);
              v87 = v177 + 10 * (_DWORD)v87;
              ++v175;
              --v176;
              if (!v100)
                continue;
            }
          }
          goto LABEL_103;
        }
LABEL_301:
        if ((_DWORD)v87 == -1)
        {
LABEL_93:
          v88 = 10;
          goto LABEL_103;
        }
        v178 = (JSC::VM *)*((_QWORD *)v8 + 7);
        v88 = 10;
        while (2)
        {
          v179 = 16 * (*(_DWORD *)v57 & 0xFFFFFFFE);
          v180 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, uint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v179 + 0x4C) + 0x70))(v57, v8, v87, &v215);
          if (*((_DWORD *)v178 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v178, (uint64_t)v49, v50, v51, v52, v53, v54, v55))
          {
            goto LABEL_93;
          }
          if ((v180 & 1) != 0)
            goto LABEL_101;
          if (BYTE2(v220[1]) == 3)
          {
            if (BYTE4(v220[1]))
              goto LABEL_93;
            v181 = *((unsigned __int8 *)v57 + 5);
            if (v181 != 61)
              goto LABEL_307;
          }
          else
          {
            v181 = *((unsigned __int8 *)v57 + 5);
            if (v181 == 61)
            {
              if (BYTE2(v220[1]) == 1)
                goto LABEL_93;
            }
            else
            {
LABEL_307:
              if ((v181 - 39) <= 0xA
                && JSC::JSArrayBufferView::length(v57, (uint64_t)v49, v50, v51, v52, v53, v54, v55) <= v87)
              {
                goto LABEL_93;
              }
            }
          }
          if ((*(_WORD *)(v179 + 12) & 0x800) == 0 || BYTE2(v220[1]) == 3)
          {
            v182 = *(_QWORD *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x30);
            if (!v182)
              v182 = *((_QWORD *)v57 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v182 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                       * *(unsigned int *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x4C)
                                                                                       + 0xB0))(v57, v8);
            }
            else
            {
              v182 = *(_QWORD *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x30);
              if (!v182)
                v182 = *((_QWORD *)v57 + 2);
            }
            if (*((_DWORD *)v178 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v178, (uint64_t)v49, v50, v51, v52, v53, v54, v55))
            {
              goto LABEL_93;
            }
          }
          if ((v182 & 0xFFFE000000000002) != 0)
            goto LABEL_103;
          v57 = (JSC::JSString *)v182;
          if (*(unsigned __int8 *)(v182 + 5) <= 0x16u)
            goto LABEL_103;
          continue;
        }
      }
      v61 = (_BYTE *)(v63 + 6);
      v22 = v63;
    }
    while ((*(_BYTE *)(v63 + 6) & 8) == 0);
  }
  if (v56)
  {
    v124 = *(_DWORD *)(v56 + 16);
    if ((v124 & 0x20) == 0)
    {
      v125 = *(_BYTE **)(v56 + 8);
      v126 = *(unsigned int *)(v56 + 4);
      if ((v124 & 4) != 0)
      {
        if ((_DWORD)v126)
        {
          v22 = *v125 - 48;
          if (v22 <= 9 && (v126 < 2 || *v125 != 48))
          {
            v196 = v125 + 1;
            v197 = v126 - 1;
            while (v197)
            {
              if (v22 <= 0x19999999)
              {
                v198 = *v196 - 48;
                if (v198 <= 9)
                {
                  v100 = __CFADD__(v198, 10 * v22);
                  v22 = v198 + 10 * (_DWORD)v22;
                  ++v196;
                  --v197;
                  if (!v100)
                    continue;
                }
              }
              goto LABEL_169;
            }
LABEL_373:
            if ((_DWORD)v22 != -1)
            {
              v199 = (JSC::VM *)*((_QWORD *)v8 + 7);
              v88 = 10;
              while (1)
              {
                v200 = 16 * (*(_DWORD *)v57 & 0xFFFFFFFE);
                v201 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v200 + 0x4C) + 0x70))(v57, v8, v22, &v215);
                v202 = v201;
                if (*((_DWORD *)v199 + 20))
                {
                  v205 = JSC::VM::hasExceptionsAfterHandlingTraps(v199, (uint64_t)v49, v50, v51, v52, v53, v54, v55);
                  if (((v205 | v202) & 1) != 0)
                  {
                    if (!v205)
                      goto LABEL_101;
                    goto LABEL_93;
                  }
                }
                else if ((v201 & 1) != 0)
                {
                  goto LABEL_101;
                }
                if (BYTE2(v220[1]) == 3)
                {
                  if (BYTE4(v220[1]))
                    goto LABEL_93;
                  v203 = *((unsigned __int8 *)v57 + 5);
                  if (v203 == 61)
                    goto LABEL_380;
                }
                else
                {
                  v203 = *((unsigned __int8 *)v57 + 5);
                  if (v203 == 61)
                  {
                    if (BYTE2(v220[1]) == 1)
                      goto LABEL_93;
                    goto LABEL_380;
                  }
                }
                if ((v203 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length(v57, (uint64_t)v49, v50, v51, v52, v53, v54, v55) <= v22)
                {
                  goto LABEL_93;
                }
LABEL_380:
                if ((*(_WORD *)(v200 + 12) & 0x800) == 0 || BYTE2(v220[1]) == 3)
                {
                  v204 = *(_QWORD *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x30);
                  if (!v204)
                    v204 = *((_QWORD *)v57 + 2);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v204 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0xB0))(v57, v8);
                  }
                  else
                  {
                    v204 = *(_QWORD *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x30);
                    if (!v204)
                      v204 = *((_QWORD *)v57 + 2);
                  }
                  if (*((_DWORD *)v199 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v199, (uint64_t)v49, v50, v51, v52, v53, v54, v55))
                  {
                    goto LABEL_93;
                  }
                }
                if ((v204 & 0xFFFE000000000002) == 0)
                {
                  v57 = (JSC::JSString *)v204;
                  if (*(unsigned __int8 *)(v204 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_103;
              }
            }
          }
        }
      }
      else if ((_DWORD)v126)
      {
        v22 = *(unsigned __int16 *)v125 - 48;
        if (v22 <= 9 && (*(_WORD *)v125 != 48 || v126 <= 1))
        {
          v156 = (unsigned __int16 *)(v125 + 2);
          v157 = v126 - 1;
          while (v157)
          {
            if (v22 <= 0x19999999)
            {
              v158 = *v156 - 48;
              if (v158 <= 9)
              {
                v100 = __CFADD__(v158, 10 * v22);
                v22 = v158 + 10 * (_DWORD)v22;
                ++v156;
                --v157;
                if (!v100)
                  continue;
              }
            }
            goto LABEL_169;
          }
          goto LABEL_373;
        }
      }
    }
  }
LABEL_169:
  v127 = (JSC::VM *)*((_QWORD *)v8 + 7);
  v88 = 10;
  while (1)
  {
    v128 = 16 * (*(_DWORD *)v63 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v63 + 6) & 8) == 0)
      break;
    v161 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v63 & 0xFFFFFFFE) + 0x4C) + 0x68))(v63, v8, v56, &v215);
    if (*((_DWORD *)v127 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v127, (uint64_t)v49, v50, v51, v52, v53, v54, v55))
    {
      goto LABEL_93;
    }
    if ((v161 & 1) != 0)
      goto LABEL_101;
    if (BYTE2(v220[1]) == 3)
    {
      if (BYTE4(v220[1]))
        goto LABEL_93;
      v162 = *(unsigned __int8 *)(v63 + 5);
      if (v162 != 61)
      {
LABEL_256:
        if (!v56)
          goto LABEL_183;
        if ((v162 - 50) < 0xFFFFFFF5)
          goto LABEL_183;
        v163 = *(_DWORD *)(v56 + 16);
        if ((v163 & 0x20) != 0)
          goto LABEL_183;
        v164 = *(unsigned int *)(v56 + 4);
        if (!(_DWORD)v164)
          goto LABEL_183;
        v165 = *(unsigned __int8 **)(v56 + 8);
        if ((v163 & 4) == 0)
        {
          v166 = *(unsigned __int16 *)v165;
          if ((_DWORD)v164 == 1)
            goto LABEL_262;
          if (v166 == 45)
          {
            v166 = *((unsigned __int16 *)v165 + 1);
            goto LABEL_269;
          }
          if ((v166 - 48) >= 0xA && ((_DWORD)v164 != 8 || v166 != 73))
          {
LABEL_282:
            if ((_DWORD)v164 != 3 || v166 != 78)
              goto LABEL_183;
          }
LABEL_273:
          v22 = v22 & 0xFFFFFF0000000000 | v164 | ((unint64_t)((v163 >> 2) & 1) << 32);
          JSC::jsToNumber(v165, v22);
          WTF::numberToString(v225, v167);
          if (WTF::equal(v56, (unint64_t)v225, v168))
            goto LABEL_93;
          goto LABEL_183;
        }
        v166 = *v165;
        if ((_DWORD)v164 == 1)
        {
LABEL_262:
          if ((v166 - 48) < 0xA)
            goto LABEL_93;
          goto LABEL_183;
        }
        if (v166 == 45)
        {
          v166 = v165[1];
LABEL_269:
          if ((v166 - 48) < 0xA)
          {
            if ((_DWORD)v164 == 2)
              goto LABEL_93;
            goto LABEL_273;
          }
          if ((_DWORD)v164 != 9)
            goto LABEL_183;
        }
        else
        {
          if ((v166 - 48) < 0xA)
            goto LABEL_273;
          if ((_DWORD)v164 != 8)
            goto LABEL_282;
        }
        if (v166 != 73)
          goto LABEL_183;
        goto LABEL_273;
      }
    }
    else
    {
      v162 = *(unsigned __int8 *)(v63 + 5);
      if (v162 != 61)
        goto LABEL_256;
      if (BYTE2(v220[1]) == 1)
        goto LABEL_93;
    }
LABEL_183:
    if ((*(_WORD *)(v128 + 12) & 0x800) == 0)
    {
      v140 = *(_DWORD *)v63;
LABEL_185:
      v141 = *(_QWORD *)(16 * (v140 & 0xFFFFFFFE) + 0x30);
      if (!v141)
        v141 = *(_QWORD *)(v63 + 16);
      goto LABEL_187;
    }
    v140 = *(_DWORD *)v63;
    if (BYTE2(v220[1]) == 3)
      goto LABEL_185;
    v160 = 16 * (v140 & 0xFFFFFFFE);
    if ((*(_WORD *)(v160 + 12) & 0x800) != 0)
    {
      v141 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v160 + 76)
                                                                                + 0xB0))(v63, v8);
    }
    else
    {
      v141 = *(_QWORD *)(v160 + 48);
      if (!v141)
        v141 = *(_QWORD *)(v63 + 16);
    }
    if (*((_DWORD *)v127 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v127, (uint64_t)v49, v50, v51, v52, v53, v54, v55))
    {
      goto LABEL_93;
    }
LABEL_187:
    if ((v141 & 0xFFFE000000000002) == 0)
    {
      v63 = v141;
      if (*(unsigned __int8 *)(v141 + 5) > 0x16u)
        continue;
    }
    goto LABEL_103;
  }
  if (!(_DWORD)v62 || (v62 & ~*(_DWORD *)(16 * (*(_DWORD *)v63 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_182;
  v129 = *(_QWORD *)(16 * (*(_DWORD *)v63 & 0xFFFFFFFE) + 0x58);
  if (!v129)
  {
    v142 = *(_QWORD *)(16 * (*(_DWORD *)v63 & 0xFFFFFFFE) + 0x40);
    if (!v142 || *(_BYTE *)(v142 + 5) != 1 && *(_DWORD *)(v142 + 80) < 2u)
      goto LABEL_182;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v63 & 0xFFFFFFFE)), v127, 1, (const JSC::PropertyTable *)v51, v52, v53, v54, v55);
    if (!v129)
      goto LABEL_182;
  }
  if (!*(_DWORD *)(v129 + 24))
    goto LABEL_182;
  v130 = *(_QWORD *)(v129 + 16);
  v131 = v130 & 0xFFFFFFFFFFFFFFFELL;
  v132 = *(unsigned int *)(v129 + 8);
  v133 = *(_DWORD *)(v56 + 16);
  if ((v130 & 1) != 0)
  {
    if ((v133 & 0x20) != 0)
      v133 = *(_DWORD *)(v56 + 32);
    v134 = *(_DWORD *)(v129 + 12);
    v135 = (v133 >> 8) & *(_QWORD *)&v134;
    v136 = *(unsigned __int8 *)(v131 + v135);
    if (*(_BYTE *)(v131 + v135))
    {
      v137 = v131 + v132;
      v138 = 1;
      while (1)
      {
        v139 = *(_QWORD *)(v137 + 8 * (v136 - 1));
        if (v56 == (v139 & 0xFFFFFFFFFFFFLL))
          break;
        v135 = ((_DWORD)v135 + v138) & v134;
        v136 = *(unsigned __int8 *)(v131 + v135);
        ++v138;
        if (!*(_BYTE *)(v131 + v135))
          goto LABEL_182;
      }
      v53 = (v139 >> 16) & 0xFF00000000 | HIBYTE(v139);
      goto LABEL_195;
    }
LABEL_182:
    if ((*(_BYTE *)(v63 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v63, v127, v56, (uint64_t)&v215) & 1) != 0)
    {
      goto LABEL_101;
    }
    goto LABEL_183;
  }
  if ((v133 & 0x20) != 0)
    v133 = *(_DWORD *)(v56 + 32);
  v143 = *(_DWORD *)(v129 + 12);
  v144 = v143 & (v133 >> 8);
  v145 = *(_DWORD *)(v131 + 4 * v144);
  if (!v145)
    goto LABEL_182;
  v146 = v131 + 4 * v132;
  v147 = 1;
  while (1)
  {
    v148 = (v145 - 1);
    if (v56 == *(_QWORD *)(v146 + 16 * v148))
      break;
    v144 = (v144 + v147) & v143;
    v145 = *(_DWORD *)(v131 + 4 * v144);
    ++v147;
    if (!v145)
      goto LABEL_182;
  }
  v53 = *(unsigned int *)(v146 + 16 * v148 + 8) | ((unint64_t)*(unsigned __int8 *)(v146 + 16 * v148 + 12) << 32);
LABEL_195:
  if ((_DWORD)v53 == -1)
    goto LABEL_182;
  v52 = HIDWORD(v53);
  if ((int)v53 <= 63)
  {
    v150 = v63 + 16;
    v151 = v53 << 32;
  }
  else
  {
    v150 = *(_QWORD *)(v63 + 8) - 8;
    v151 = 0x3F00000000 - (v53 << 32);
  }
  v51 = *(_QWORD *)(v150 + (v151 >> 29));
  if ((v51 & 0xFFFE000000000002) != 0)
  {
LABEL_220:
    v215 = (uint64_t (*)(unint64_t))v51;
    v219 = (JSC::JSString *)v63;
    goto LABEL_100;
  }
  v152 = *(unsigned __int8 *)(v51 + 5);
  if (v152 == 5)
  {
    v110 = (unsigned int *)v63;
    v111 = (uint64_t)v127;
    goto LABEL_132;
  }
  if (v152 != 6)
    goto LABEL_220;
  v119 = *(_DWORD *)(v128 + 16) & 3;
  v159 = *(_QWORD *)(v51 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE) + 0x4C)))
  {
    v215 = *(uint64_t (**)(unint64_t))(v51 + 8);
    v216 = v159;
    LODWORD(v217) = HIDWORD(v53);
    v219 = (JSC::JSString *)v63;
    goto LABEL_233;
  }
  v122 = *(int8x16_t ***)(v51 + 24);
  v121 = *(_QWORD *)(v51 + 32);
  v215 = *(uint64_t (**)(unint64_t))(v51 + 8);
  v216 = v159;
  LODWORD(v217) = HIDWORD(v53);
  v219 = (JSC::JSString *)v63;
LABEL_153:
  BYTE1(v220[1]) = 3;
  if (v119 != 2)
    LOBYTE(v220[1]) = 1;
  BYTE3(v220[1]) = 1;
  v223 = v122;
  v224 = v121;
LABEL_101:
  if (BYTE1(v220[1]) == 1)
  {
    v88 = (uint64_t)v215;
  }
  else
  {
    if (BYTE1(v220[1]) == 2)
    {
      v109 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v215, v8, v50, v51, v52, v53, v54, v55);
    }
    else
    {
      v112 = v219;
      v113 = *(_QWORD *)(16 * (*(_DWORD *)v219 & 0xFFFFFFFE) + 0x28);
      if ((v217 & 0x20) != 0)
        v112 = v218;
      if (BYTE3(v220[1]) != 1)
        goto LABEL_150;
      if (((unint64_t)v112 & 0xFFFE000000000002) != 0)
        goto LABEL_285;
      v114 = *(unsigned int *)(16 * (*(_DWORD *)v112 & 0xFFFFFFFE) + 0x4C);
      v115 = *(_DWORD *)(16 * (*(_DWORD *)v112 & 0xFFFFFFFE) + 0x4C) != 0;
      v116 = 16 * v114;
      if ((_DWORD)v114)
        v117 = v223 == (int8x16_t **)v116;
      else
        v117 = 1;
      if (!v117)
      {
        do
        {
          v116 = *(_QWORD *)(v116 + 16);
          v115 = v116 != 0;
        }
        while ((int8x16_t **)v116 != v223 && v116 != 0);
      }
      if (!v115)
      {
LABEL_285:
        v225[0] = *((WTF::StringImpl **)v8 + 7);
        v109 = JSC::throwDOMAttributeGetterTypeError(v113, v225, v223, (WTF::StringImpl *)v56);
      }
      else
      {
LABEL_150:
        v109 = v215(v113);
      }
    }
    v88 = v109;
  }
LABEL_103:
  if (v222)
  {
    v92 = *(_DWORD *)(v221 + 4);
    if (!v92)
    {
      __break(0xC471u);
      JUMPOUT(0x1988869D0);
    }
    *(_DWORD *)(v221 + 4) = v92 - 1;
  }
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v56, v49, v50, v51, v52, v53, v54, v55);
      WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
    }
    else
    {
      *(_DWORD *)v56 -= 2;
    }
  }
  return v88;
}

void JSC::AbstractModuleRecord::resolveImport(JSC::AbstractModuleRecord *this@<X0>, JSC::JSGlobalObject *a2@<X1>, const JSC::Identifier *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  JSC::VM *v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  JSC::AbstractModuleRecord *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  JSC::AbstractModuleRecord *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  char v59;

  v10 = *((_QWORD *)this + 5);
  if (!v10)
    goto LABEL_11;
  v12 = *(_QWORD *)a3;
  v13 = *(_DWORD *)(v10 - 8);
  v14 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  if ((v14 & 0x20) != 0)
    v14 = *(_DWORD *)(v12 + 32);
  v15 = v13 & (v14 >> 8);
  v16 = (uint64_t *)(v10 + 40 * v15);
  v17 = *v16;
  if (*v16 != v12)
  {
    v18 = 1;
    while (v17)
    {
      v15 = (v15 + v18) & v13;
      v16 = (uint64_t *)(v10 + 40 * v15);
      v17 = *v16;
      ++v18;
      if (*v16 == v12)
        goto LABEL_10;
    }
    v16 = (uint64_t *)(v10 + 40 * *(unsigned int *)(v10 - 4));
  }
LABEL_10:
  if (v16 == (uint64_t *)(v10 + 40 * *(unsigned int *)(v10 - 4)))
  {
LABEL_11:
    *(_DWORD *)a9 = 1;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    return;
  }
  v19 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v20 = *((_DWORD *)v16 + 2);
  v21 = (WTF::StringImpl *)v16[2];
  if (v21)
    *(_DWORD *)v21 += 2;
  v56 = v21;
  v22 = (WTF::StringImpl *)v16[3];
  if (v22)
    *(_DWORD *)v22 += 2;
  v57 = v22;
  v23 = (WTF::StringImpl *)v16[4];
  if (v23)
    *(_DWORD *)v23 += 2;
  v58 = v23;
  v59 = 1;
  if (v20 == 1)
  {
    *(_DWORD *)a9 = 1;
  }
  else
  {
    v24 = (JSC::AbstractModuleRecord *)JSC::AbstractModuleRecord::hostResolveImportedModule(this, (JSC::VM **)a2, &v56, a4, a5, a6, a7, a8);
    if (!*((_DWORD *)v19 + 20)
      || (v55 = v24,
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v19, v25, v26, a4, a5, a6, a7, a8),
          v24 = v55,
          !hasExceptionsAfterHandlingTraps))
    {
      JSC::AbstractModuleRecord::resolveExport(v24, (JSC::VM **)a2, &v57, a4, a5, a6, a7, a8, a9);
      goto LABEL_22;
    }
    *(_DWORD *)a9 = 3;
  }
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
LABEL_22:
  if (v59)
  {
    v27 = v58;
    v58 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::~StringImpl(v27, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
      }
      else
      {
        *(_DWORD *)v27 -= 2;
      }
    }
    v28 = v57;
    v57 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    v29 = v56;
    v56 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::~StringImpl(v29, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
      }
      else
      {
        *(_DWORD *)v29 -= 2;
      }
    }
  }
}

void JSC::AbstractModuleRecord::resolveExport(JSC::AbstractModuleRecord *this@<X0>, JSC::VM **a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::AbstractModuleRecord *v45;
  WTF::StringImpl *v46;

  v9 = *a3;
  v10 = *((_QWORD *)this + 15);
  if (!v10)
    goto LABEL_10;
  v11 = *(_DWORD *)(v10 - 8);
  v12 = *((_DWORD *)v9 + 4);
  if ((v12 & 0x20) != 0)
    v12 = *((_DWORD *)v9 + 8);
  v13 = v11 & (v12 >> 8);
  v14 = *(WTF::StringImpl **)(v10 + 32 * v13);
  if (v14 != v9)
  {
    v28 = 1;
    while (v14)
    {
      v13 = ((_DWORD)v13 + v28) & v11;
      v14 = *(WTF::StringImpl **)(v10 + 32 * v13);
      ++v28;
      if (v14 == v9)
        goto LABEL_5;
    }
    v13 = *(unsigned int *)(v10 - 4);
  }
LABEL_5:
  if (v13 == *(_DWORD *)(v10 - 4))
  {
LABEL_10:
    v45 = this;
    if (v9)
    {
      *(_DWORD *)v9 += 2;
      v46 = v9;
      JSC::AbstractModuleRecord::resolveExportImpl(a9, a2, (const WTF::StringImpl *)&v45, a4, a5, a6, a7, a8);
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::~StringImpl(v9, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
      }
      else
      {
        *(_DWORD *)v9 -= 2;
      }
    }
    else
    {
      v46 = 0;
      JSC::AbstractModuleRecord::resolveExportImpl(a9, a2, (const WTF::StringImpl *)&v45, a4, a5, a6, a7, a8);
    }
  }
  else
  {
    v15 = v10 + 32 * v13;
    v16 = *(_BYTE *)(v15 + 8);
    v17 = (_QWORD *)(v15 + 9);
    v18 = *(WTF::StringImpl **)(v15 + 24);
    if (v18)
    {
      v19 = *(_DWORD *)v18;
      *(_BYTE *)a9 = v16;
      *(_QWORD *)(a9 + 1) = *v17;
      v20 = *(_QWORD *)((char *)v17 + 7);
      *(_DWORD *)v18 = v19 + 4;
      *(_QWORD *)(a9 + 8) = v20;
      *(_QWORD *)(a9 + 16) = v18;
      if (v19 == -2)
      {
        WTF::StringImpl::~StringImpl(v18, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v18 = v19 + 2;
      }
    }
    else
    {
      *(_BYTE *)a9 = v16;
      *(_QWORD *)(a9 + 1) = *v17;
      *(_QWORD *)(a9 + 8) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(a9 + 16) = 0;
    }
  }
}

void WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::Resolution>,WTF::HashTableTraits>::add<JSC::AbstractModuleRecord::Resolution const&>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::Resolution>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a2, 8u, 0), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *(_QWORD *)a3;
  v16 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  if ((v16 & 0x20) != 0)
    v16 = *(_DWORD *)(v15 + 32);
  v17 = v14 & (v16 >> 8);
  v18 = v12 + 32 * v17;
  v19 = *(_QWORD *)v18;
  if (*(_QWORD *)v18)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      if (v19 == v15)
      {
        if ((v13 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v12 - 4);
        v23 = 0;
        v24 = v12 + 32 * v22;
        goto LABEL_33;
      }
      if (v19 == -1)
        v20 = (_OWORD *)v18;
      v17 = ((_DWORD)v17 + v21) & v14;
      v18 = v12 + 32 * v17;
      v19 = *(_QWORD *)v18;
      ++v21;
    }
    while (*(_QWORD *)v18);
    if (v20)
    {
      *v20 = 0u;
      v20[1] = 0u;
      --*(_DWORD *)(*a2 - 16);
      v15 = *(_QWORD *)a3;
      v18 = (uint64_t)v20;
    }
  }
  *(_QWORD *)a3 = 0;
  v25 = *(WTF::StringImpl **)v18;
  *(_QWORD *)v18 = v15;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  *(_OWORD *)(v18 + 8) = *(_OWORD *)a4;
  v26 = *(_DWORD **)(a4 + 16);
  if (v26)
    *v26 += 2;
  v27 = *(WTF::StringImpl **)(v18 + 24);
  *(_QWORD *)(v18 + 24) = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = *a2;
  if (*a2)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *a2;
  if (*a2)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 > 2 * v32)
      goto LABEL_32;
LABEL_39:
    v18 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::Resolution>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(a2, (uint64_t *)v18);
    v30 = *a2;
    if (*a2)
      v33 = *(unsigned int *)(v30 - 4);
    else
      v33 = 0;
    goto LABEL_32;
  }
  if (3 * v33 <= 4 * v32)
    goto LABEL_39;
LABEL_32:
  v24 = v30 + 32 * v33;
  v23 = 1;
LABEL_33:
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v24;
  *(_BYTE *)(a1 + 16) = v23;
}

void JSC::AbstractModuleRecord::resolveExportImpl(uint64_t a1, JSC::VM **a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  char *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF *v46;
  _QWORD *v47;
  char *v48;
  WTF::StringImpl *v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  int v57;
  _DWORD *v58;
  WTF::StringImpl *v59;
  _DWORD *v60;
  WTF::StringImpl *v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  _OWORD *v71;
  char *v72;
  WTF::StringImpl *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  WTF *v116;
  _DWORD *v117;
  uint64_t *v118;
  uint64_t v119;
  _DWORD *v120;
  uint64_t v121;
  WTF::StringImpl **v122;
  WTF::StringImpl *v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v133;
  uint64_t v134;
  WTF::StringImpl **v135;
  WTF::StringImpl *v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WTF *v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  JSC::VM *v190;
  WTF::StringImpl *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  const WTF::StringImpl *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  uint64_t *v205;
  int v206;
  uint64_t v207;
  WTF::StringImpl *v208;
  unsigned int v209;
  char *v210;
  uint64_t v211;
  WTF::StringImpl *v212;
  char *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  _DWORD *v216;
  unsigned int v217;
  char *v218;
  uint64_t v219;
  WTF::StringImpl *v220;
  int v221;
  unint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  JSC::VM *v263;
  __int128 v264;
  WTF::StringImpl *v265;
  int v266;
  _DWORD *v267;
  WTF::StringImpl *v268;
  _DWORD *v269;
  WTF::StringImpl *v270;
  char v271;
  WTF::StringImpl *v272;
  WTF::StringImpl *v273;
  int v274;
  JSC::VM ***v275[4];
  char v276;
  WTF *v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  WTF *v283;
  int v284;
  unsigned int v285;
  _QWORD v286[2];
  int v287;
  JSC::VM **v288;
  __int128 v289;
  WTF::StringImpl *v290;
  WTF::StringImpl *v291;

  v288 = a2;
  v263 = a2[7];
  v282 = 0;
  v283 = (WTF *)v286;
  v284 = 8;
  v277 = (WTF *)&v279;
  v276 = 0;
  v279 = 1;
  v280 = 0;
  v281 = 0;
  v278 = 0x100000008;
  v275[0] = &v288;
  v275[1] = (JSC::VM ***)&v283;
  v275[2] = (JSC::VM ***)&v276;
  v275[3] = (JSC::VM ***)&v277;
  v11 = *(_QWORD *)a3;
  v10 = (_DWORD *)*((_QWORD *)a3 + 1);
  if (v10)
    *v10 += 2;
  v286[0] = v11;
  v286[1] = v10;
  v287 = 0;
  v12 = 1;
  v285 = 1;
  while (1)
  {
    v13 = v12 - 1;
    v14 = (char *)v283 + 24 * v12 - 24;
    v16 = *(_QWORD *)v14;
    v15 = (WTF::StringImpl *)*((_QWORD *)v14 + 1);
    *((_QWORD *)v14 + 1) = 0;
    v272 = (WTF::StringImpl *)v16;
    v273 = v15;
    v17 = *((_DWORD *)v14 + 4);
    v274 = v17;
    v18 = (char *)v283 + 24 * v13;
    v19 = (WTF::StringImpl *)*((_QWORD *)v18 + 1);
    *((_QWORD *)v18 + 1) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    v285 = v13;
    if (v17)
    {
      if (v17 != 1)
      {
        if (v17 != 2)
          goto LABEL_224;
        WTF::Vector<JSC::AbstractModuleRecord::Resolution,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v266, (unsigned int *)&v277, (uint64_t)a3, a4, a5, a6, a7, a8);
        v186 = JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::$_2::operator()((uint64_t)&v277, (WTF::AtomStringImpl *)&v266, v180, v181, v182, v183, v184, v185);
        if ((v186 & 1) != 0)
        {
          v50 = 4;
        }
        else
        {
          *(_DWORD *)a1 = 2;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          v50 = 1;
        }
        if (v268)
        {
          if (*(_DWORD *)v268 == 2)
          {
            WTF::StringImpl::~StringImpl(v268, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v222, v223, v224, v225, v226, v227, v228, v229);
          }
          else
          {
            *(_DWORD *)v268 -= 2;
          }
        }
        if (v186)
          goto LABEL_224;
        goto LABEL_44;
      }
      WTF::Vector<JSC::AbstractModuleRecord::Resolution,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v266, (unsigned int *)&v277, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (v266 == 1)
      {
        if ((JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::$_0::operator()(v275, &v272, v198, v199, v200, v201, v202, v203) & 1) != 0)
        {
          v204 = 0;
          v50 = 2;
          goto LABEL_220;
        }
        v221 = 3;
      }
      else
      {
        if (!v276)
          JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::$_3::operator()(v16, v15, (uint64_t)&v266, v199, v200, v201, v202, v203);
        if ((JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::$_2::operator()((uint64_t)&v277, (WTF::AtomStringImpl *)&v266, (uint64_t)v198, v199, v200, v201, v202, v203) & 1) != 0)
        {
          v50 = 4;
          v204 = 1;
          goto LABEL_220;
        }
        v221 = 2;
      }
      v204 = 0;
      *(_DWORD *)a1 = v221;
      v50 = 1;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
LABEL_220:
      if (v268)
      {
        if (*(_DWORD *)v268 == 2)
        {
          WTF::StringImpl::~StringImpl(v268, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v230, v231, v232, v233, v234, v235, v236, v237);
        }
        else
        {
          *(_DWORD *)v268 -= 2;
        }
      }
      if ((v204 & 1) != 0)
        goto LABEL_224;
      goto LABEL_44;
    }
    v20 = v282;
    if (v282
      || (WTF::HashTable<JSC::AbstractModuleRecord::ResolveQuery,JSC::AbstractModuleRecord::ResolveQuery,WTF::IdentityExtractor,JSC::AbstractModuleRecord::ResolveQuery::Hash,WTF::CustomHashTraits<JSC::AbstractModuleRecord::ResolveQuery>,WTF::CustomHashTraits<JSC::AbstractModuleRecord::ResolveQuery>>::rehash(&v282, 8u), (v20 = v282) != 0))
    {
      v21 = *(_DWORD *)(v20 - 8);
    }
    else
    {
      v21 = 0;
    }
    v22 = *((_DWORD *)v15 + 4);
    if ((v22 & 0x20) != 0)
      v22 = *((_DWORD *)v15 + 8);
    v23 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
    v26 = (((v25 >> 31) ^ v25) + (v22 >> 8)) & v21;
    v27 = (uint64_t *)(v20 + 16 * v26);
    v28 = (WTF::StringImpl *)v27[1];
    if (!v28)
    {
LABEL_14:
      *v27 = v16;
      v29 = v273;
      if (v273)
        *(_DWORD *)v273 += 2;
      v30 = (WTF::StringImpl *)v27[1];
      v27[1] = (uint64_t)v29;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
        {
          WTF::StringImpl::~StringImpl(v30, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
        }
        else
        {
          *(_DWORD *)v30 -= 2;
        }
      }
      v31 = v282;
      if (v282)
        v32 = *(_DWORD *)(v282 - 12) + 1;
      else
        v32 = 1;
      *(_DWORD *)(v282 - 12) = v32;
      v33 = (*(_DWORD *)(v31 - 16) + v32);
      v34 = *(unsigned int *)(v31 - 4);
      if (v34 > 0x400)
      {
        if (v34 > 2 * v33)
          goto LABEL_23;
      }
      else if (3 * v34 > 4 * v33)
      {
LABEL_23:
        v35 = *(_QWORD *)(v16 + 56);
        if (v35 && *(_DWORD *)(v35 - 12))
        {
          v276 = 1;
          v15 = v273;
LABEL_50:
          v51 = *(_QWORD *)(v16 + 48);
          if (!v51)
            goto LABEL_189;
          v52 = *((_DWORD *)v15 + 4);
          if ((v52 & 0x20) != 0)
            v52 = *((_DWORD *)v15 + 8);
          v53 = *(_DWORD *)(v51 - 8);
          v54 = v53 & (v52 >> 8);
          v55 = v51 + 48 * v54;
          v56 = *(WTF::StringImpl **)v55;
          if (*(WTF::StringImpl **)v55 != v15)
          {
            v179 = 1;
            while (v56)
            {
              v54 = (v54 + v179) & v53;
              v55 = v51 + 48 * v54;
              v56 = *(WTF::StringImpl **)v55;
              ++v179;
              if (*(WTF::StringImpl **)v55 == v15)
                goto LABEL_54;
            }
            v55 = v51 + 48 * *(unsigned int *)(v51 - 4);
          }
LABEL_54:
          if (v55 == v51 + 48 * *(unsigned int *)(v51 - 4))
          {
LABEL_189:
            LOBYTE(v266) = 0;
            v271 = 0;
            if ((JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::$_0::operator()(v275, &v272, a3, a4, a5, a6, a7, a8) & 1) == 0)goto LABEL_190;
LABEL_211:
            v50 = 2;
LABEL_82:
            std::__optional_destruct_base<JSC::AbstractModuleRecord::ExportEntry,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v266, v62, v63, v64, v65, v66, v67, v68);
            goto LABEL_44;
          }
          v57 = *(_DWORD *)(v55 + 8);
          v266 = v57;
          v58 = *(_DWORD **)(v55 + 16);
          if (v58)
            *v58 += 2;
          v267 = v58;
          v59 = *(WTF::StringImpl **)(v55 + 24);
          if (v59)
            *(_DWORD *)v59 += 2;
          v268 = v59;
          v60 = *(_DWORD **)(v55 + 32);
          if (v60)
            *v60 += 2;
          v269 = v60;
          v61 = *(WTF::StringImpl **)(v55 + 40);
          if (v61)
            *(_DWORD *)v61 += 2;
          v270 = v61;
          v271 = 1;
          switch(v57)
          {
            case 0:
              LODWORD(v264) = 0;
              *((_QWORD *)&v264 + 1) = v16;
              if (v61)
                *(_DWORD *)v61 += 2;
              v265 = v61;
              if (v15)
                *(_DWORD *)v15 += 2;
              v291 = v15;
              WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::Resolution>,WTF::HashTableTraits>::add<JSC::AbstractModuleRecord::Resolution const&>((uint64_t)&v289, (uint64_t *)v272 + 15, (uint64_t)&v291, (uint64_t)&v264, a5, a6, a7, a8);
              if (v291)
              {
                if (*(_DWORD *)v291 == 2)
                {
                  WTF::StringImpl::~StringImpl(v291, v62, v63, v64, v65, v66, v67, v68);
                  WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
                }
                else
                {
                  *(_DWORD *)v291 -= 2;
                }
              }
              if (!HIDWORD(v278))
              {
                __break(0xC471u);
                JUMPOUT(0x1988884A8);
              }
              v69 = HIDWORD(v278) - 1;
              v70 = v277;
              v71 = (_OWORD *)((char *)v277 + 24 * v69);
              if (*(_DWORD *)v71 == 1)
              {
                *v71 = v264;
                if (v61)
                  *(_DWORD *)v61 += 2;
                v72 = (char *)v70 + 24 * v69;
                v73 = (WTF::StringImpl *)*((_QWORD *)v72 + 2);
                *((_QWORD *)v72 + 2) = v61;
                if (v73)
                {
                  if (*(_DWORD *)v73 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v73, v62, v63, v64, v65, v66, v67, v68);
                    WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
                  }
                  else
                  {
                    *(_DWORD *)v73 -= 2;
                  }
                }
LABEL_78:
                v50 = 2;
              }
              else
              {
                if (*((_QWORD *)v277 + 3 * v69 + 1) == v16 && *((WTF::StringImpl **)v277 + 3 * v69 + 2) == v61)
                  goto LABEL_78;
                *(_DWORD *)a1 = 2;
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                v50 = 1;
              }
              if (!v61)
                goto LABEL_82;
              if (*(_DWORD *)v61 != 2)
              {
                *(_DWORD *)v61 -= 2;
                goto LABEL_82;
              }
              v162 = v61;
LABEL_136:
              WTF::StringImpl::~StringImpl(v162, v62, v63, v64, v65, v66, v67, v68);
              WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
              goto LABEL_82;
            case 1:
              v207 = JSC::AbstractModuleRecord::hostResolveImportedModule((JSC::AbstractModuleRecord *)v16, v288, &v268, a4, a5, a6, a7, a8);
              if (!*((_DWORD *)v263 + 20)
                || !JSC::VM::hasExceptionsAfterHandlingTraps(v263, (uint64_t)v62, v63, v64, v65, v66, v67, v68))
              {
                v208 = v272;
                *(_QWORD *)&v289 = v272;
                if (v15)
                  *(_DWORD *)v15 += 2;
                *((_QWORD *)&v289 + 1) = v15;
                LODWORD(v290) = 1;
                if (v285 == v284)
                {
                  WTF::Vector<JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::Task,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::Task>((uint64_t)&v283, (unint64_t)&v289, v63, v64, v65, v66, v67, v68);
                }
                else
                {
                  v209 = v285 + 1;
                  v210 = (char *)v283 + 24 * v285;
                  *(_QWORD *)v210 = v208;
                  v211 = *((_QWORD *)&v289 + 1);
                  *((_QWORD *)&v289 + 1) = 0;
                  *((_QWORD *)v210 + 1) = v211;
                  *((_DWORD *)v210 + 4) = 1;
                  v285 = v209;
                }
                v212 = (WTF::StringImpl *)*((_QWORD *)&v289 + 1);
                *((_QWORD *)&v289 + 1) = 0;
                if (v212)
                {
                  if (*(_DWORD *)v212 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v212, v62, v63, v64, v65, v66, v67, v68);
                    WTF::fastFree(v238, v239, v240, v241, v242, v243, v244, v245);
                  }
                  else
                  {
                    *(_DWORD *)v212 -= 2;
                  }
                }
                LODWORD(v289) = 1;
                *((_QWORD *)&v289 + 1) = 0;
                v290 = 0;
                if (HIDWORD(v278) == (_DWORD)v278)
                {
                  WTF::Vector<JSC::AbstractModuleRecord::Resolution,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::AbstractModuleRecord::Resolution>((uint64_t)&v277, (unint64_t)&v289, v63, v64, v65, v66, v67, v68);
                }
                else
                {
                  v213 = (char *)v277 + 24 * HIDWORD(v278);
                  *(_OWORD *)v213 = v289;
                  v214 = v290;
                  v290 = 0;
                  *((_QWORD *)v213 + 2) = v214;
                  ++HIDWORD(v278);
                }
                v215 = v290;
                v290 = 0;
                if (v215)
                {
                  if (*(_DWORD *)v215 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v215, v62, v63, v64, v65, v66, v67, v68);
                    WTF::fastFree(v246, v247, v248, v249, v250, v251, v252, v253);
                  }
                  else
                  {
                    *(_DWORD *)v215 -= 2;
                  }
                }
                v216 = v269;
                *(_QWORD *)&v289 = v207;
                if (v269)
                  *v269 += 2;
                *((_QWORD *)&v289 + 1) = v216;
                LODWORD(v290) = 0;
                if (v285 == v284)
                {
                  WTF::Vector<JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::Task,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::Task>((uint64_t)&v283, (unint64_t)&v289, v63, v64, v65, v66, v67, v68);
                }
                else
                {
                  v217 = v285 + 1;
                  v218 = (char *)v283 + 24 * v285;
                  *(_QWORD *)v218 = v207;
                  v219 = *((_QWORD *)&v289 + 1);
                  *((_QWORD *)&v289 + 1) = 0;
                  *((_QWORD *)v218 + 1) = v219;
                  *((_DWORD *)v218 + 4) = 0;
                  v285 = v217;
                }
                v220 = (WTF::StringImpl *)*((_QWORD *)&v289 + 1);
                *((_QWORD *)&v289 + 1) = 0;
                if (v220)
                {
                  if (*(_DWORD *)v220 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v220, v62, v63, v64, v65, v66, v67, v68);
                    WTF::fastFree(v254, v255, v256, v257, v258, v259, v260, v261);
                  }
                  else
                  {
                    *(_DWORD *)v220 -= 2;
                  }
                }
                goto LABEL_211;
              }
              goto LABEL_190;
            case 2:
              v189 = JSC::AbstractModuleRecord::hostResolveImportedModule((JSC::AbstractModuleRecord *)v16, v288, &v268, a4, a5, a6, a7, a8);
              v190 = v263;
              if (!*((_DWORD *)v263 + 20)
                || (hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v263, v187, v188, v64, v65, v66, v67, v68), v190 = v263, !hasExceptionsAfterHandlingTraps))
              {
                LODWORD(v289) = 0;
                *((_QWORD *)&v289 + 1) = v189;
                v191 = *(WTF::StringImpl **)(*((_QWORD *)v190 + 5244) + 112);
                if (v191)
                  *(_DWORD *)v191 += 2;
                v290 = v191;
                JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::$_3::operator()((uint64_t)v272, v15, (uint64_t)&v289, v64, v65, v66, v67, v68);
                v50 = 2;
                if ((JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::$_2::operator()((uint64_t)&v277, (WTF::AtomStringImpl *)&v289, v192, v193, v194, v195, v196, v197) & 1) == 0)
                {
                  *(_DWORD *)a1 = 2;
                  v50 = 1;
                  *(_QWORD *)(a1 + 8) = 0;
                  *(_QWORD *)(a1 + 16) = 0;
                }
                if (!v191)
                  goto LABEL_82;
                if (*(_DWORD *)v191 != 2)
                {
                  *(_DWORD *)v191 -= 2;
                  goto LABEL_82;
                }
                v162 = v191;
                goto LABEL_136;
              }
LABEL_190:
              *(_DWORD *)a1 = 3;
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              v50 = 1;
              goto LABEL_82;
          }
          std::__optional_destruct_base<JSC::AbstractModuleRecord::ExportEntry,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v266, (WTF::AtomStringImpl *)a2, (uint64_t)&v268, a4, a5, a6, a7, a8);
LABEL_224:
          v50 = 0;
          goto LABEL_44;
        }
        v15 = v273;
        if (v276)
          goto LABEL_50;
        v36 = *(_QWORD *)(v16 + 120);
        if (!v36)
          goto LABEL_50;
        v37 = *((_DWORD *)v273 + 4);
        if ((v37 & 0x20) != 0)
          v37 = *((_DWORD *)v273 + 8);
        v38 = *(_DWORD *)(v36 - 8);
        v39 = v38 & (v37 >> 8);
        v40 = *(WTF::StringImpl **)(v36 + 32 * v39);
        if (v40 != v273)
        {
          v98 = 1;
          while (v40)
          {
            v39 = ((_DWORD)v39 + v98) & v38;
            v40 = *(WTF::StringImpl **)(v36 + 32 * v39);
            ++v98;
            if (v40 == v273)
              goto LABEL_29;
          }
          v39 = *(unsigned int *)(v36 - 4);
        }
LABEL_29:
        if (v39 == *(_DWORD *)(v36 - 4))
          goto LABEL_50;
        v41 = (_QWORD *)(v36 + 32 * v39);
        v42 = v41[1];
        v43 = v41[2];
        v44 = (WTF::StringImpl *)v41[3];
        if (v44)
          *(_DWORD *)v44 += 2;
        if ((_DWORD)v42 == 1)
        {
LABEL_40:
          v50 = 2;
        }
        else
        {
          if (!HIDWORD(v278))
            goto LABEL_244;
          v45 = HIDWORD(v278) - 1;
          v46 = v277;
          v47 = (_QWORD *)((char *)v277 + 24 * v45);
          if (*(_DWORD *)v47 == 1)
          {
            *v47 = v42;
            v47[1] = v43;
            if (v44)
              *(_DWORD *)v44 += 2;
            v48 = (char *)v46 + 24 * v45;
            v49 = (WTF::StringImpl *)*((_QWORD *)v48 + 2);
            *((_QWORD *)v48 + 2) = v44;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
              {
                WTF::StringImpl::~StringImpl(v49, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
              }
              else
              {
                *(_DWORD *)v49 -= 2;
              }
            }
            goto LABEL_40;
          }
          if (*((_QWORD *)v277 + 3 * v45 + 1) == v43 && *((WTF::StringImpl **)v277 + 3 * v45 + 2) == v44)
            goto LABEL_40;
          *(_DWORD *)a1 = 2;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          v50 = 1;
        }
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
          {
            WTF::StringImpl::~StringImpl(v44, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
          }
          else
          {
            *(_DWORD *)v44 -= 2;
          }
        }
        goto LABEL_44;
      }
      WTF::HashTable<JSC::AbstractModuleRecord::ResolveQuery,JSC::AbstractModuleRecord::ResolveQuery,WTF::IdentityExtractor,JSC::AbstractModuleRecord::ResolveQuery::Hash,WTF::CustomHashTraits<JSC::AbstractModuleRecord::ResolveQuery>,WTF::CustomHashTraits<JSC::AbstractModuleRecord::ResolveQuery>>::expand(&v282);
      goto LABEL_23;
    }
    v205 = 0;
    v206 = 1;
    while (v28 != v15 || *v27 != v16)
    {
      if (v28 == (WTF::StringImpl *)-1)
        v205 = v27;
      v26 = (v26 + v206) & v21;
      v27 = (uint64_t *)(v20 + 16 * v26);
      v28 = (WTF::StringImpl *)v27[1];
      ++v206;
      if (!v28)
      {
        if (v205)
        {
          v205[1] = 0;
          --*(_DWORD *)(v20 - 16);
          v27 = v205;
        }
        goto LABEL_14;
      }
    }
    v50 = 2;
LABEL_44:
    v273 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
    if ((v50 | 2) != 2)
      break;
    v12 = v285;
    if (!v285)
    {
      v115 = HIDWORD(v278);
      if (!HIDWORD(v278))
      {
        __break(0xC471u);
        JUMPOUT(0x1988884B0);
      }
      v116 = v277;
      if (!*(_DWORD *)v277)
      {
        v117 = (_DWORD *)*((_QWORD *)a3 + 1);
        v118 = (uint64_t *)(*(_QWORD *)a3 + 120);
        if (v117)
          *v117 += 2;
        *(_QWORD *)&v289 = v117;
        WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::Resolution>,WTF::HashTableTraits>::add<JSC::AbstractModuleRecord::Resolution const&>((uint64_t)&v266, v118, (uint64_t)&v289, (uint64_t)v116, a5, a6, a7, a8);
        if ((_QWORD)v289)
        {
          if (*(_DWORD *)v289 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v289, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v119, a5, a6, a7, a8);
            WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
          }
          else
          {
            *(_DWORD *)v289 -= 2;
          }
        }
        v115 = HIDWORD(v278);
        if (!HIDWORD(v278))
        {
LABEL_244:
          __break(0xC471u);
          JUMPOUT(0x1988884A0);
        }
        v116 = v277;
      }
      *(_OWORD *)a1 = *(_OWORD *)v116;
      v120 = (_DWORD *)*((_QWORD *)v116 + 2);
      if (v120)
        *v120 += 2;
      *(_QWORD *)(a1 + 16) = v120;
      goto LABEL_104;
    }
  }
  v115 = HIDWORD(v278);
  v116 = v277;
  if (!HIDWORD(v278))
    goto LABEL_111;
LABEL_104:
  v121 = 24 * v115;
  v122 = (WTF::StringImpl **)((char *)v116 + 16);
  do
  {
    v123 = *v122;
    *v122 = 0;
    if (v123)
    {
      if (*(_DWORD *)v123 == 2)
      {
        WTF::StringImpl::~StringImpl(v123, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)v116, a5, a6, a7, a8);
        WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
      }
      else
      {
        *(_DWORD *)v123 -= 2;
      }
    }
    v122 += 3;
    v121 -= 24;
  }
  while (v121);
  v116 = v277;
LABEL_111:
  if (&v279 != (int *)v116 && v116 != 0)
  {
    v277 = 0;
    LODWORD(v278) = 0;
    WTF::fastFree((unint64_t)v116, a2, (uint64_t)a3, (uint64_t)v116, a5, a6, a7, a8);
  }
  v133 = v282;
  if (v282)
  {
    v134 = *(unsigned int *)(v282 - 4);
    if ((_DWORD)v134)
    {
      v135 = (WTF::StringImpl **)(v282 + 8);
      do
      {
        v136 = *v135;
        if (*v135 != (WTF::StringImpl *)-1)
        {
          *v135 = 0;
          if (v136)
          {
            if (*(_DWORD *)v136 == 2)
            {
              WTF::StringImpl::~StringImpl(v136, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)v116, a5, a6, a7, a8);
              WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
            }
            else
            {
              *(_DWORD *)v136 -= 2;
            }
          }
        }
        v135 += 2;
        --v134;
      }
      while (v134);
    }
    WTF::fastFree(v133 - 16, a2, (uint64_t)a3, (uint64_t)v116, a5, a6, a7, a8);
  }
  v145 = v283;
  if (v285)
  {
    WTF::VectorTypeOperations<JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::Task>::destruct(v283, (WTF *)((char *)v283 + 24 * v285), (uint64_t)a3, (uint64_t)v116, a5, a6, a7, a8);
    v145 = v283;
  }
  if (v286 != (_QWORD *)v145)
  {
    if (v145)
    {
      v283 = 0;
      v284 = 0;
      WTF::fastFree((unint64_t)v145, a2, (uint64_t)a3, (uint64_t)v116, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::$_2::operator()(uint64_t result, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (*(_DWORD *)a2 == 1)
    return 1;
  v8 = *(unsigned int *)(result + 12);
  if (!(_DWORD)v8)
  {
    __break(0xC471u);
    return result;
  }
  v9 = v8 - 1;
  v10 = *(_QWORD *)result;
  v11 = (_OWORD *)(*(_QWORD *)result + 24 * v9);
  if (*(_DWORD *)v11 == 1)
  {
    *v11 = *(_OWORD *)a2;
    v12 = (WTF::StringImpl **)(v10 + 24 * v9 + 16);
    v13 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
    if (v13)
      *(_DWORD *)v13 += 2;
    v14 = *v12;
    *v12 = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
      }
      else
      {
        *(_DWORD *)v14 -= 2;
      }
    }
    return 1;
  }
  return *(_QWORD *)(v10 + 24 * v9 + 8) == *((_QWORD *)a2 + 1) && *(_QWORD *)(v10 + 24 * v9 + 16) == *((_QWORD *)a2 + 2);
}

uint64_t JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::$_0::operator()(JSC::VM ****a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  WTF::StringImpl *v9;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  __int128 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t *v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t **v28;
  JSC::AbstractModuleRecord *v29;
  JSC::VM **v30;
  WTF::StringImpl *v31;
  int v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  WTF::StringImpl *v91[2];
  WTF::StringImpl *v92;

  v8 = (**a1)[7];
  v9 = a2[1];
  if (v9 == *(WTF::StringImpl **)(*((_QWORD *)v8 + 5244) + 192))
    return 0;
  v12 = (uint64_t)a1[1];
  v13 = *a2;
  v91[0] = *a2;
  if (v9)
    *(_DWORD *)v9 += 2;
  v91[1] = v9;
  LODWORD(v92) = 2;
  v14 = *(unsigned int *)(v12 + 12);
  if ((_DWORD)v14 == *(_DWORD *)(v12 + 8))
  {
    v87 = WTF::Vector<JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::Task,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (void *)(v14 + 1), (unint64_t)v91, a4, a5, a6, a7, a8);
    LODWORD(v14) = *(_DWORD *)(v12 + 12);
    v88 = *(_QWORD *)v12 + 24 * v14;
    *(_QWORD *)v88 = *(_QWORD *)v87;
    v89 = *(_QWORD *)(v87 + 8);
    *(_QWORD *)(v87 + 8) = 0;
    *(_QWORD *)(v88 + 8) = v89;
    *(_DWORD *)(v88 + 16) = *(_DWORD *)(v87 + 16);
  }
  else
  {
    v15 = *(_QWORD *)v12 + 24 * v14;
    *(_QWORD *)v15 = v13;
    v16 = v91[1];
    v91[1] = 0;
    *(_QWORD *)(v15 + 8) = v16;
    *(_DWORD *)(v15 + 16) = 2;
  }
  *(_DWORD *)(v12 + 12) = v14 + 1;
  v17 = v91[1];
  v91[1] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  *(_BYTE *)a1[2] = 1;
  v18 = (uint64_t)a1[3];
  LODWORD(v91[0]) = 1;
  v91[1] = 0;
  v92 = 0;
  v19 = *(unsigned int *)(v18 + 12);
  if ((_DWORD)v19 == *(_DWORD *)(v18 + 8))
  {
    v90 = (_OWORD *)WTF::Vector<JSC::AbstractModuleRecord::Resolution,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18, v19 + 1, (unint64_t)v91, a4, a5, a6, a7, a8);
    v20 = (WTF::StringImpl **)(v90 + 1);
    v21 = *(_QWORD *)v18 + 24 * *(unsigned int *)(v18 + 12);
    v22 = *v90;
  }
  else
  {
    v20 = &v92;
    v21 = *(_QWORD *)v18 + 24 * v19;
    v22 = *(_OWORD *)v91;
  }
  *(_OWORD *)v21 = v22;
  v23 = *v20;
  *v20 = 0;
  *(_QWORD *)(v21 + 16) = v23;
  ++*(_DWORD *)(v18 + 12);
  v24 = v92;
  v92 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  v25 = (unint64_t *)*((_QWORD *)*a2 + 8);
  if (v25)
  {
    v26 = 0;
    v27 = (uint64_t)*a2 + 72;
    while (1)
    {
      v28 = v26 ? (unint64_t **)(v26 + 1) : (unint64_t **)v27;
      v29 = *a2;
      v30 = **a1;
      v31 = (WTF::StringImpl *)**v28;
      v32 = *((_DWORD *)v31 + 4);
      if ((v32 & 0x20) != 0)
        break;
      if ((v32 & 0x10) != 0)
      {
        v33 = *(_DWORD *)v31 + 2;
        *(_DWORD *)v31 = v33;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(*((uint64_t **)v8 + 5239), **v28, a3, a4, a5, a6, a7, a8, v91);
        v31 = v91[0];
        v33 = *(_DWORD *)v91[0];
      }
      *(_DWORD *)v31 = v33 + 2;
      if (v33)
        goto LABEL_24;
      WTF::StringImpl::~StringImpl(v31, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
LABEL_25:
      v91[0] = v31;
      v34 = (WTF::StringImpl *)JSC::AbstractModuleRecord::hostResolveImportedModule(v29, v30, v91, a4, a5, a6, a7, a8);
      v35 = v91[0];
      v91[0] = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::~StringImpl(v35, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
        }
        else
        {
          *(_DWORD *)v35 -= 2;
        }
      }
      if (*((_DWORD *)v8 + 20))
      {
        v69 = *((_DWORD *)v8 + 20);
        if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v8 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*((_QWORD *)v8 + 2))
          return 0;
      }
      v36 = (uint64_t)a1[1];
      v37 = a2[1];
      v91[0] = v34;
      if (v37)
        *(_DWORD *)v37 += 2;
      v91[1] = v37;
      LODWORD(v92) = 0;
      v38 = *(unsigned int *)(v36 + 12);
      if ((_DWORD)v38 == *(_DWORD *)(v36 + 8))
      {
        v66 = WTF::Vector<JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::Task,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, (void *)(v38 + 1), (unint64_t)v91, a4, a5, a6, a7, a8);
        LODWORD(v38) = *(_DWORD *)(v36 + 12);
        v67 = *(_QWORD *)v36 + 24 * v38;
        *(_QWORD *)v67 = *(_QWORD *)v66;
        v68 = *(_QWORD *)(v66 + 8);
        *(_QWORD *)(v66 + 8) = 0;
        *(_QWORD *)(v67 + 8) = v68;
        *(_DWORD *)(v67 + 16) = *(_DWORD *)(v66 + 16);
      }
      else
      {
        v39 = *(_QWORD *)v36 + 24 * v38;
        *(_QWORD *)v39 = v34;
        v40 = v91[1];
        v91[1] = 0;
        *(_QWORD *)(v39 + 8) = v40;
        *(_DWORD *)(v39 + 16) = 0;
      }
      *(_DWORD *)(v36 + 12) = v38 + 1;
      v41 = v91[1];
      v91[1] = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
        {
          WTF::StringImpl::~StringImpl(v41, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
        }
        else
        {
          *(_DWORD *)v41 -= 2;
        }
      }
      v26 = *v28;
      if (*v28 == v25)
        return 1;
    }
    v33 = *(_DWORD *)v31 + 2;
LABEL_24:
    *(_DWORD *)v31 = v33;
    goto LABEL_25;
  }
  return 1;
}

void JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::$_3::operator()(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;

  if (a2)
    *(_DWORD *)a2 += 2;
  v24 = a2;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::Resolution>,WTF::HashTableTraits>::add<JSC::AbstractModuleRecord::Resolution const&>((uint64_t)&v23, (uint64_t *)(a1 + 120), (uint64_t)&v24, a3, a5, a6, a7, a8);
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v8, v9, v10, v11, v12, v13, v14);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
}

void WTF::Vector<JSC::AbstractModuleRecord::Resolution,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = a2[3];
  if ((_DWORD)v8)
  {
    v10 = v8 - 1;
    v11 = *(_QWORD *)a2 + 24 * (v8 - 1);
    *(_OWORD *)a1 = *(_OWORD *)v11;
    v12 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(a1 + 16) = v12;
    v13 = *(_QWORD *)a2 + 24 * v10;
    v14 = *(WTF::StringImpl **)(v13 + 16);
    *(_QWORD *)(v13 + 16) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::~StringImpl(v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
      }
      else
      {
        *(_DWORD *)v14 -= 2;
      }
    }
    a2[3] = v10;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::AbstractModuleRecord::ResolveQuery::~ResolveQuery(JSC::AbstractModuleRecord::ResolveQuery *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
}

unint64_t JSC::AbstractModuleRecord::getModuleNamespace(JSC::AbstractModuleRecord *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl **v20;
  const WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  WTF::StringImpl **v28;
  WTF::StringImpl **v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::VM *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  unint64_t v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v73;
  _BYTE *v74;
  unint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  __int128 v104;
  WTF::StringImpl *v105;
  __int128 v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl **v111;
  JSC::VM *v112;

  v8 = *((_QWORD *)a2 + 7);
  v112 = (JSC::VM *)v8;
  v9 = *((_QWORD *)this + 13);
  if (!v9)
  {
    v111 = 0;
    JSC::getExportedNames((uint64_t)a2, this, (uint64_t *)&v111, a4, a5, a6, a7, a8);
    if (*((_DWORD *)v112 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v112, v12, v13, v14, v15, v16, v17, v18))
    {
      v9 = 0;
      goto LABEL_36;
    }
    v109 = 0;
    v110 = 0;
    v19 = v111;
    v20 = (WTF::StringImpl **)WTF::HashSet<JSC::InlineWatchpointSet *,WTF::DefaultHash<JSC::InlineWatchpointSet *>,WTF::HashTraits<JSC::InlineWatchpointSet *>,WTF::HashTableTraits>::begin(v111);
    v27 = v20;
    v29 = v28;
    v30 = 0;
    if (v19)
      v30 = &v19[*((unsigned int *)v19 - 1)];
    if (v30 == v20)
    {
LABEL_31:
      v58 = (JSC::VM *)JSC::LazyClassStructure::get((JSC::JSGlobalObject *)((char *)a2 + 1112), (unint64_t)a2);
      v9 = JSC::JSModuleNamespaceObject::create((uint64_t)a2, v58, (uint64_t)this, (uint64_t)&v109, v59, v60, v61, v62);
      if (!*((_DWORD *)v112 + 20)
        || !JSC::VM::hasExceptionsAfterHandlingTraps(v112, (uint64_t)v36, (uint64_t)v21, v22, v23, v24, v25, v26))
      {
        v64 = *((_QWORD *)this + 14);
        if (!v64
          || (LOBYTE(v103) = 0,
              JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,JSC::JSModuleEnvironment>(v64, (unint64_t)a2, *(_QWORD *)(*(_QWORD *)(v8 + 41952) + 112), v9, 0, 1, &v103, v26, v63), !*((_DWORD *)v112 + 20))|| !JSC::VM::hasExceptionsAfterHandlingTraps(v112, (uint64_t)v36, (uint64_t)v21, v22, v23, v24, v25, v26))
        {
          *((_QWORD *)this + 13) = v9;
          if (v9 && *(_DWORD *)(v8 + 760) >= *((unsigned __int8 *)this + 7))
            JSC::Heap::writeBarrierSlowPath(v8 + 192, (unint64_t)this);
          goto LABEL_35;
        }
      }
    }
    else
    {
      while (1)
      {
        JSC::Identifier::fromUid(*v27, v8, v21, v22, v23, v24, v25, v26, &v108);
        JSC::AbstractModuleRecord::resolveExport(this, (JSC::VM **)a2, &v108, v31, v32, v33, v34, v35, (uint64_t)&v106);
        if (*((_DWORD *)v112 + 20))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v112, (uint64_t)v36, (uint64_t)v21, v22, v23, v24, v25, v26))
            break;
        }
        if ((_DWORD)v106)
        {
          if ((_DWORD)v106 == 1)
          {
            v73 = *v27;
            if (*v27)
            {
              v74 = (_BYTE *)*((_QWORD *)v73 + 1);
              v75 = *((unsigned int *)v73 + 1) | ((unint64_t)((*((_DWORD *)v73 + 4) >> 2) & 1) << 32);
            }
            else
            {
              v74 = 0;
              v75 = 0x100000000;
            }
            WTF::makeString<WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>((int8x16_t *)"Exported binding name '", 24, v74, v75, (int8x16_t *)"' is not found.", 16, (int **)&v103);
LABEL_42:
            JSC::throwSyntaxError(a2, &v112, &v103);
            v77 = v103;
            v103 = 0;
            if (v77)
            {
              if (*(_DWORD *)v77 == 2)
              {
                WTF::StringImpl::~StringImpl(v77, v36, (uint64_t)v21, v22, v23, v24, v25, v26);
                WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
              }
              else
              {
                *(_DWORD *)v77 -= 2;
              }
            }
            break;
          }
          if ((_DWORD)v106 == 3)
          {
            v76 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v76 = 0x4A00000002;
            *(_QWORD *)(v76 + 8) = "Exported binding name 'default' cannot be resolved by star export entries.";
            *(_DWORD *)(v76 + 16) = 4;
            v103 = (WTF::StringImpl *)v76;
            goto LABEL_42;
          }
          v38 = v107;
        }
        else
        {
          v38 = v107;
          v37 = v108;
          v108 = 0;
          v103 = v37;
          v104 = v106;
          if (v107)
            *(_DWORD *)v107 += 2;
          v105 = v38;
          if (HIDWORD(v110) == (_DWORD)v110)
          {
            WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>>((uint64_t)&v109, (unint64_t)&v103);
          }
          else
          {
            v39 = v109 + 32 * HIDWORD(v110);
            v103 = 0;
            *(_QWORD *)v39 = v37;
            *(_OWORD *)(v39 + 8) = v104;
            v40 = v105;
            v105 = 0;
            *(_QWORD *)(v39 + 24) = v40;
            ++HIDWORD(v110);
          }
          std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::~pair(&v103, v36, (uint64_t)v21, v22, v23, v24, v25, v26);
        }
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::~StringImpl(v38, v36, (uint64_t)v21, v22, v23, v24, v25, v26);
            WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
          }
          else
          {
            *(_DWORD *)v38 -= 2;
          }
        }
        v41 = v108;
        v108 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
          {
            WTF::StringImpl::~StringImpl(v41, v36, (uint64_t)v21, v22, v23, v24, v25, v26);
            WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
          }
          else
          {
            *(_DWORD *)v41 -= 2;
          }
        }
        while (++v27 != v29)
        {
          if ((unint64_t)*v27 + 1 > 1)
            goto LABEL_23;
        }
        v27 = v29;
LABEL_23:
        if (v27 == v30)
          goto LABEL_31;
      }
      if (v107)
      {
        if (*(_DWORD *)v107 == 2)
        {
          WTF::StringImpl::~StringImpl(v107, v36, (uint64_t)v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
        }
        else
        {
          *(_DWORD *)v107 -= 2;
        }
      }
      v78 = v108;
      v108 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
        {
          WTF::StringImpl::~StringImpl(v78, v36, (uint64_t)v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
        }
        else
        {
          *(_DWORD *)v78 -= 2;
        }
      }
    }
    v9 = 0;
LABEL_35:
    WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v109, v36, (uint64_t)v21, v22, v23, v24, v25, v26);
LABEL_36:
    WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>::~HashSet(&v111, v65, v66, v67, v68, v69, v70, v71);
  }
  return v9;
}

void JSC::getExportedNames(uint64_t a1, JSC::AbstractModuleRecord *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int v12;
  JSC::AbstractModuleRecord *v13;
  WTF::AtomStringImpl *v14;
  WTF::AtomStringImpl *v15;
  WTF::AtomStringImpl *v16;
  const WTF::StringImpl *v17;
  WTF::AtomStringImpl *v18;
  WTF::AtomStringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unsigned int v46;
  WTF *v47;
  WTF::StringImpl *v48;
  _QWORD v49[3];
  JSC::AbstractModuleRecord *v50;
  WTF *v51;
  int v52;
  unsigned int v53;
  _QWORD v54[8];
  uint64_t v55;

  v11 = *(_QWORD *)(a1 + 56);
  v55 = 0;
  v51 = (WTF *)v54;
  v52 = 8;
  v54[0] = a2;
  v12 = 1;
  while (1)
  {
    v13 = (JSC::AbstractModuleRecord *)*((_QWORD *)v51 + v12 - 1);
    v53 = v12 - 1;
    v50 = v13;
    if (!v55
      || !WTF::HashTable<JSC::AbstractModuleRecord *,JSC::AbstractModuleRecord *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::AbstractModuleRecord *>,WTF::DefaultHash<JSC::AbstractModuleRecord *>>,JSC::AbstractModuleRecord *>(v55, (uint64_t)v13))
    {
      WTF::HashTable<JSC::AbstractModuleRecord *,JSC::AbstractModuleRecord *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>>::add((uint64_t)v49, &v55, (uint64_t *)&v50, a4, a5, a6, a7, a8);
      v14 = (WTF::AtomStringImpl *)*((_QWORD *)v13 + 6);
      v15 = (WTF::AtomStringImpl *)WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ExportEntry>,WTF::HashTableTraits>::begin(v14);
      v18 = v15;
      v19 = v16;
      if (v14)
        v14 = (WTF::AtomStringImpl *)((char *)v14 + 48 * *((unsigned int *)v14 - 1));
      if (v14 != v15)
      {
        do
        {
          if (v13 == a2)
          {
            v20 = (WTF::StringImpl *)*((_QWORD *)v18 + 2);
          }
          else
          {
            v20 = (WTF::StringImpl *)*((_QWORD *)v18 + 2);
            if (*(WTF::StringImpl **)(*(_QWORD *)(v11 + 41952) + 192) == v20)
              goto LABEL_13;
          }
          if (v20)
            *(_DWORD *)v20 += 2;
          v48 = v20;
          WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add(a3, (WTF::AtomStringImpl *)&v48, (uint64_t)v17, a4, a5, a6, a7, a8, (uint64_t)v49);
          v21 = v48;
          v48 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
            {
              WTF::StringImpl::~StringImpl(v21, v16, (uint64_t)v17, a4, a5, a6, a7, a8);
              WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
            }
            else
            {
              *(_DWORD *)v21 -= 2;
            }
          }
LABEL_13:
          while (1)
          {
            v18 = (WTF::AtomStringImpl *)((char *)v18 + 48);
            if (v18 == v19)
              break;
            if ((unint64_t)(*(_QWORD *)v18 + 1) > 1)
              goto LABEL_17;
          }
          v18 = v19;
LABEL_17:
          ;
        }
        while (v18 != v14);
      }
      v30 = *((_QWORD *)v13 + 8);
      if (v30)
        break;
    }
LABEL_23:
    v12 = v53;
    if (!v53)
      goto LABEL_38;
  }
  while (1)
  {
    v49[0] = 0;
    JSC::Identifier::fromUid(*(WTF::StringImpl **)v30, v11, v17, a4, a5, a6, a7, a8, &v48);
    v44 = JSC::AbstractModuleRecord::hostResolveImportedModule(v13, (JSC::VM **)a1, &v48, v39, v40, v41, v42, v43);
    v45 = v48;
    v48 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
      {
        WTF::StringImpl::~StringImpl(v45, v16, (uint64_t)v17, a4, a5, a6, a7, a8);
        WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
      }
      else
      {
        *(_DWORD *)v45 -= 2;
      }
    }
    v49[0] = v44;
    if (*(_DWORD *)(v11 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v16, (uint64_t)v17, a4, a5, a6, a7, a8))
        break;
    }
    v46 = v53;
    if (v53 == v52)
    {
      WTF::Vector<JSC::AbstractModuleRecord *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::AbstractModuleRecord *&>((uint64_t)&v51, (unint64_t)v49);
    }
    else
    {
      *((_QWORD *)v51 + v53) = v49[0];
      v53 = v46 + 1;
    }
    v30 = *(_QWORD *)(v30 + 16);
    if (!v30)
      goto LABEL_23;
  }
LABEL_38:
  v47 = v51;
  if (v54 != (_QWORD *)v51 && v51)
  {
    v51 = 0;
    v52 = 0;
    WTF::fastFree((unint64_t)v47, v16, (uint64_t)v17, a4, a5, a6, a7, a8);
  }
  if (v55)
    WTF::fastFree(v55 - 16, v16, (uint64_t)v17, a4, a5, a6, a7, a8);
}

WTF::StringImpl **std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::~pair(WTF::StringImpl **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v9 = a1[3];
  a1[3] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *a1;
  *a1 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  return a1;
}

unint64_t JSC::JSModuleNamespaceObject::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap **v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v12 = *(JSC::Heap ***)(a1 + 56);
  v13 = JSC::allocateCell<JSC::JSModuleNamespaceObject>(v12, a2, a3, a4, a5, a6, a7, a8);
  JSC::JSModuleNamespaceObject::JSModuleNamespaceObject(v13, (uint64_t)v12, (unint64_t)a2);
  JSC::JSModuleNamespaceObject::finishCreation(v14, a1, a3, a4, v15, v16, v17, v18);
  return v13;
}

unint64_t JSC::AbstractModuleRecord::setModuleEnvironment(unint64_t result, unint64_t a2, unint64_t a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v10 = result;
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(result + 104);
  if (!v12
    || (v20 = 0,
        result = JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,JSC::JSModuleEnvironment>(a3, a2, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 112), v12, 0, 1, &v20, a9, a4), !*(_DWORD *)(v11 + 80))|| (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v13, v14, v15, v16, v17, v18, v19), (result & 1) == 0))
  {
    *(_QWORD *)(v10 + 112) = a3;
    if (a3)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v10 + 7))
        return JSC::Heap::writeBarrierSlowPath(v11 + 192, v10);
    }
  }
  return result;
}

uint64_t JSC::AbstractModuleRecord::evaluate(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  char **v11;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v10 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C));
  if (v11 != &JSC::JSModuleRecord::s_info)
  {
    if (v11 != &JSC::WebAssemblyModuleRecord::s_info)
    {
      if (v11 == &JSC::SyntheticModuleRecord::s_info)
        return JSC::SyntheticModuleRecord::evaluate((JSC::SyntheticModuleRecord *)a1, a2);
      result = 854;
      __break(0xC471u);
      return result;
    }
    JSC::WebAssemblyModuleRecord::initializeImports((JSC::JSWebAssemblyInstance **)a1, a2, 0, 1);
    if (!*((_DWORD *)v10 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v10, v17, v18, v19, v20, v21, v22, v23))
    {
      JSC::WebAssemblyModuleRecord::initializeExports((JSC::WebAssemblyModuleRecord *)a1, a2);
      if (!*((_DWORD *)v10 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v10, v24, v25, v26, v27, v28, v29, v30))
        return JSC::WebAssemblyModuleRecord::evaluate((JSC::WebAssemblyModuleRecord *)a1, a2, v25, v26, v27, v28, v29, v30);
    }
    return 10;
  }
  v13 = *(_QWORD *)(a1 + 200);
  if (!v13)
    return 10;
  result = JSC::Interpreter::executeModuleProgram((uint64_t)v10 + 90560, (WTF::Thread *)a1, v13, (uint64_t)a2, *(JSC::JSObject **)(a1 + 112), a3, a4, a8);
  v15 = *(_QWORD *)(a1 + 16);
  if (!(v15 >> 49))
    goto LABEL_7;
  v16 = (double)(int)v15;
  if (v15 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v16 = v15 - 0x2000000000000;
  if (v16 == 4294967290.0)
LABEL_7:
    *(_QWORD *)(a1 + 200) = 0;
  return result;
}

void JSC::AbstractModuleRecord::dump(JSC::AbstractModuleRecord *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  _QWORD *v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF::AtomStringImpl *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  unint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  uint64_t v219;
  unint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *i;
  uint64_t v245;
  uint64_t v246;
  WTF::AtomStringImpl *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  WTF::StringImpl *v254;
  unint64_t v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  WTF::StringImpl *v279;
  WTF::StringImpl *v280;
  WTF::StringImpl *v281;

  v9 = *((_QWORD *)this + 4);
  if (v9)
    *(_DWORD *)v9 += 2;
  if ((*(_DWORD *)(v9 + 16) & 0x20) != 0)
  {
    v11 = *(_DWORD *)v9;
    *(_DWORD *)v9 += 2;
    v281 = (WTF::StringImpl *)v9;
    if (!v11)
    {
LABEL_9:
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
      goto LABEL_12;
    }
  }
  else
  {
    v10 = *(unsigned int *)(v9 + 4);
    if ((v10 & 0x80000000) != 0
      || __OFADD__((_DWORD)v10, 1)
      || __OFADD__(v10 + 1, 1)
      || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v281, v10 + 2, (*(_DWORD *)(v9 + 16) >> 2) & 1, *(_OWORD **)(v9 + 8), v10 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v9 + 16) >> 2) & 1) << 32)), !v281))
    {
      __break(0xC471u);
      goto LABEL_259;
    }
    v11 = *(_DWORD *)v9 - 2;
    if (*(_DWORD *)v9 == 2)
      goto LABEL_9;
  }
  *(_DWORD *)v9 = v11;
LABEL_12:
  WTF::dataLog<char [29],WTF::String,char [3]>((WTF::PrintStream *)&v281);
  v27 = v281;
  v281 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v271, v272, v273, v274, v275, v276, v277, v278);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v281 = (WTF::StringImpl *)*((unsigned int *)this + 23);
  WTF::dataLog<char [19],unsigned long,char [10]>(&v281);
  v28 = *((unsigned int *)this + 23);
  if ((_DWORD)v28)
  {
    v29 = (WTF::StringImpl **)*((_QWORD *)this + 10);
    v30 = &v29[2 * v28];
    do
    {
      v31 = *v29;
      if ((*((_DWORD *)*v29 + 4) & 0x20) != 0)
      {
        *(_DWORD *)v31 += 2;
        v281 = v31;
      }
      else
      {
        v32 = *((unsigned int *)v31 + 1);
        if ((v32 & 0x80000000) != 0 || __OFADD__((_DWORD)v32, 1) || __OFADD__(v32 + 1, 1))
        {
          v281 = 0;
LABEL_235:
          __break(0xC471u);
LABEL_259:
          JUMPOUT(0x198889ECCLL);
        }
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v281, v32 + 2, (*((_DWORD *)*v29 + 4) >> 2) & 1, *((_OWORD **)v31 + 1), v32 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*((unsigned int *)*v29 + 4) >> 2) & 1) << 32));
        if (!v281)
          goto LABEL_235;
      }
      v280 = v29[1];
      WTF::dataLog<char [14],WTF::String,char [14],WTF::RawPointer,char [2],char [2]>((WTF::PrintStream *)&v281, (const void **)&v280);
      v40 = v281;
      v281 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
        {
          WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
        }
        else
        {
          *(_DWORD *)v40 -= 2;
        }
      }
      v29 += 2;
    }
    while (v29 != v30);
  }
  v49 = *((_QWORD *)this + 5);
  if (v49)
    LODWORD(v49) = *(_DWORD *)(v49 - 12);
  LODWORD(v281) = v49;
  WTF::dataLog<char [13],unsigned int,char [10]>("    Import: ", &v281);
  v57 = *((_QWORD *)this + 5);
  if (v57)
  {
    v58 = *(unsigned int *)(v57 - 4);
    v59 = (_QWORD *)(v57 + 40 * v58);
    if (*(_DWORD *)(v57 - 12))
    {
      v60 = (_QWORD *)*((_QWORD *)this + 5);
      if ((_DWORD)v58)
      {
        v61 = 40 * v58;
        v60 = (_QWORD *)*((_QWORD *)this + 5);
        while ((unint64_t)(*v60 + 1) <= 1)
        {
          v60 += 5;
          v61 -= 40;
          if (!v61)
          {
            v60 = v59;
            goto LABEL_39;
          }
        }
      }
      goto LABEL_39;
    }
    v60 = (_QWORD *)(v57 + 40 * v58);
  }
  else
  {
    v60 = 0;
    LODWORD(v58) = 0;
  }
  v59 = (_QWORD *)(v57 + 40 * v58);
  if (v57)
  {
LABEL_39:
    v62 = (_QWORD *)(v57 + 40 * *(unsigned int *)(v57 - 4));
    goto LABEL_44;
  }
  v62 = 0;
LABEL_44:
  while (v60 != v62)
  {
    v63 = v60[3];
    if (v63)
      *(_DWORD *)v63 += 2;
    if ((*(_DWORD *)(v63 + 16) & 0x20) != 0)
    {
      v65 = *(_DWORD *)v63;
      *(_DWORD *)v63 += 2;
      v281 = (WTF::StringImpl *)v63;
      if (!v65)
        goto LABEL_53;
    }
    else
    {
      v64 = *(unsigned int *)(v63 + 4);
      if ((v64 & 0x80000000) != 0 || __OFADD__((_DWORD)v64, 1) || __OFADD__(v64 + 1, 1))
      {
        v281 = 0;
LABEL_237:
        __break(0xC471u);
        JUMPOUT(0x198889ED8);
      }
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v281, v64 + 2, (*(_DWORD *)(v63 + 16) >> 2) & 1, *(_OWORD **)(v63 + 8), v64 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v63 + 16) >> 2) & 1) << 32));
      if (!v281)
        goto LABEL_237;
      v65 = *(_DWORD *)v63 - 2;
      if (*(_DWORD *)v63 == 2)
      {
LABEL_53:
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v63, v50, v51, v52, v53, v54, v55, v56);
        WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
        goto LABEL_56;
      }
    }
    *(_DWORD *)v63 = v65;
LABEL_56:
    v74 = v60[4];
    if (v74)
      *(_DWORD *)v74 += 2;
    if ((*(_DWORD *)(v74 + 16) & 0x20) != 0)
    {
      v76 = *(_DWORD *)v74;
      *(_DWORD *)v74 += 2;
      v280 = (WTF::StringImpl *)v74;
      if (!v76)
        goto LABEL_64;
    }
    else
    {
      v75 = *(unsigned int *)(v74 + 4);
      if ((v75 & 0x80000000) != 0 || __OFADD__((_DWORD)v75, 1) || __OFADD__(v75 + 1, 1))
      {
        v280 = 0;
LABEL_239:
        __break(0xC471u);
        JUMPOUT(0x198889EE4);
      }
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v280, v75 + 2, (*(_DWORD *)(v74 + 16) >> 2) & 1, *(_OWORD **)(v74 + 8), v75 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v74 + 16) >> 2) & 1) << 32));
      if (!v280)
        goto LABEL_239;
      v76 = *(_DWORD *)v74 - 2;
      if (*(_DWORD *)v74 == 2)
      {
LABEL_64:
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v74, v50, v51, v52, v53, v54, v55, v56);
        WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
        goto LABEL_67;
      }
    }
    *(_DWORD *)v74 = v76;
LABEL_67:
    v85 = v60[2];
    if (v85)
      *(_DWORD *)v85 += 2;
    if ((*(_DWORD *)(v85 + 16) & 0x20) != 0)
    {
      v87 = *(_DWORD *)v85;
      *(_DWORD *)v85 += 2;
      v279 = (WTF::StringImpl *)v85;
      if (v87)
        goto LABEL_77;
    }
    else
    {
      v86 = *(unsigned int *)(v85 + 4);
      if ((v86 & 0x80000000) != 0 || __OFADD__((_DWORD)v86, 1) || __OFADD__(v86 + 1, 1))
      {
        v279 = 0;
LABEL_241:
        __break(0xC471u);
        JUMPOUT(0x198889EF0);
      }
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v279, v86 + 2, (*(_DWORD *)(v85 + 16) >> 2) & 1, *(_OWORD **)(v85 + 8), v86 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v85 + 16) >> 2) & 1) << 32));
      if (!v279)
        goto LABEL_241;
      v87 = *(_DWORD *)v85 - 2;
      if (*(_DWORD *)v85 != 2)
      {
LABEL_77:
        *(_DWORD *)v85 = v87;
        goto LABEL_78;
      }
    }
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v85, v50, v51, v52, v53, v54, v55, v56);
    WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
LABEL_78:
    WTF::dataLog<char [14],WTF::String,char [10],WTF::String,char [11],WTF::String,char [3]>((WTF::PrintStream *)&v281, (WTF::PrintStream *)&v280, (WTF::PrintStream *)&v279);
    v96 = v279;
    v279 = 0;
    if (v96)
    {
      if (*(_DWORD *)v96 == 2)
      {
        WTF::StringImpl::~StringImpl(v96, v50, v51, v52, v53, v54, v55, v56);
        WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
      }
      else
      {
        *(_DWORD *)v96 -= 2;
      }
    }
    v97 = v280;
    v280 = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
      {
        WTF::StringImpl::~StringImpl(v97, v50, v51, v52, v53, v54, v55, v56);
        WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
      }
      else
      {
        *(_DWORD *)v97 -= 2;
      }
    }
    v98 = v281;
    v281 = 0;
    if (v98)
    {
      if (*(_DWORD *)v98 == 2)
      {
        WTF::StringImpl::~StringImpl(v98, v50, v51, v52, v53, v54, v55, v56);
        WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
      }
      else
      {
        *(_DWORD *)v98 -= 2;
      }
    }
    v99 = v60 + 5;
    v60 = v59;
    if (v99 != v59)
    {
      v60 = v99;
      while ((unint64_t)(*v60 + 1) <= 1)
      {
        v60 += 5;
        if (v60 == v59)
        {
          v60 = v59;
          break;
        }
      }
    }
  }
  v124 = *((_QWORD *)this + 6);
  if (v124)
    LODWORD(v124) = *(_DWORD *)(v124 - 12);
  LODWORD(v281) = v124;
  WTF::dataLog<char [13],unsigned int,char [10]>("    Export: ", &v281);
  v132 = *((_QWORD *)this + 6);
  if (v132)
  {
    v133 = *(unsigned int *)(v132 - 4);
    v134 = v132 + 48 * v133;
    if (*(_DWORD *)(v132 - 12))
    {
      v135 = *((_QWORD *)this + 6);
      if ((_DWORD)v133)
      {
        v136 = 48 * v133;
        v135 = *((_QWORD *)this + 6);
        while ((unint64_t)(*(_QWORD *)v135 + 1) <= 1)
        {
          v135 += 48;
          v136 -= 48;
          if (!v136)
          {
            v135 = v134;
            goto LABEL_106;
          }
        }
      }
      goto LABEL_106;
    }
    v135 = v132 + 48 * v133;
  }
  else
  {
    v135 = 0;
    LODWORD(v133) = 0;
  }
  v134 = v132 + 48 * v133;
  if (v132)
  {
LABEL_106:
    v137 = v132 + 48 * *(unsigned int *)(v132 - 4);
    goto LABEL_111;
  }
  v137 = 0;
LABEL_111:
  if (v137 != v135)
  {
    while (1)
    {
      v138 = *(_DWORD *)(v135 + 8);
      if (v138 == 2)
        break;
      if (v138 == 1)
      {
        v150 = *(_QWORD *)(v135 + 16);
        if (v150)
          *(_DWORD *)v150 += 2;
        if ((*(_DWORD *)(v150 + 16) & 0x20) != 0)
        {
          v152 = *(_DWORD *)v150;
          *(_DWORD *)v150 += 2;
          v281 = (WTF::StringImpl *)v150;
          if (!v152)
            goto LABEL_132;
        }
        else
        {
          v151 = *(unsigned int *)(v150 + 4);
          if ((v151 & 0x80000000) != 0 || __OFADD__((_DWORD)v151, 1) || __OFADD__(v151 + 1, 1))
          {
            v281 = 0;
LABEL_247:
            __break(0xC471u);
            JUMPOUT(0x198889F14);
          }
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v281, v151 + 2, (*(_DWORD *)(v150 + 16) >> 2) & 1, *(_OWORD **)(v150 + 8), v151 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v150 + 16) >> 2) & 1) << 32));
          if (!v281)
            goto LABEL_247;
          v152 = *(_DWORD *)v150 - 2;
          if (*(_DWORD *)v150 == 2)
          {
LABEL_132:
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v150, v125, v126, v127, v128, v129, v130, v131);
            WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
            goto LABEL_144;
          }
        }
        *(_DWORD *)v150 = v152;
LABEL_144:
        v172 = *(_QWORD *)(v135 + 32);
        if (v172)
          *(_DWORD *)v172 += 2;
        if ((*(_DWORD *)(v172 + 16) & 0x20) != 0)
        {
          v174 = *(_DWORD *)v172;
          *(_DWORD *)v172 += 2;
          v280 = (WTF::StringImpl *)v172;
          if (!v174)
            goto LABEL_152;
        }
        else
        {
          v173 = *(unsigned int *)(v172 + 4);
          if ((v173 & 0x80000000) != 0 || __OFADD__((_DWORD)v173, 1) || __OFADD__(v173 + 1, 1))
          {
            v280 = 0;
LABEL_251:
            __break(0xC471u);
            JUMPOUT(0x198889F2CLL);
          }
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v280, v173 + 2, (*(_DWORD *)(v172 + 16) >> 2) & 1, *(_OWORD **)(v172 + 8), v173 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v172 + 16) >> 2) & 1) << 32));
          if (!v280)
            goto LABEL_251;
          v174 = *(_DWORD *)v172 - 2;
          if (*(_DWORD *)v172 == 2)
          {
LABEL_152:
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v172, v125, v126, v127, v128, v129, v130, v131);
            WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
            goto LABEL_177;
          }
        }
        *(_DWORD *)v172 = v174;
LABEL_177:
        v205 = *(_QWORD *)(v135 + 24);
        if (v205)
          *(_DWORD *)v205 += 2;
        if ((*(_DWORD *)(v205 + 16) & 0x20) != 0)
        {
          v207 = *(_DWORD *)v205;
          *(_DWORD *)v205 += 2;
          v279 = (WTF::StringImpl *)v205;
          if (!v207)
            goto LABEL_185;
        }
        else
        {
          v206 = *(unsigned int *)(v205 + 4);
          if ((v206 & 0x80000000) != 0 || __OFADD__((_DWORD)v206, 1) || __OFADD__(v206 + 1, 1))
          {
            v279 = 0;
LABEL_257:
            __break(0xC471u);
            JUMPOUT(0x198889F50);
          }
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v279, v206 + 2, (*(_DWORD *)(v205 + 16) >> 2) & 1, *(_OWORD **)(v205 + 8), v206 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v205 + 16) >> 2) & 1) << 32));
          if (!v279)
            goto LABEL_257;
          v207 = *(_DWORD *)v205 - 2;
          if (*(_DWORD *)v205 == 2)
          {
LABEL_185:
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v205, v125, v126, v127, v128, v129, v130, v131);
            WTF::fastFree(v208, v209, v210, v211, v212, v213, v214, v215);
            goto LABEL_194;
          }
        }
        *(_DWORD *)v205 = v207;
LABEL_194:
        WTF::dataLog<char [18],char [8],WTF::String,char [11],WTF::String,char [11],WTF::String,char [3]>((WTF::PrintStream *)&v281, (WTF::PrintStream *)&v280, (WTF::PrintStream *)&v279);
        v216 = v279;
        v279 = 0;
        if (v216)
        {
          if (*(_DWORD *)v216 == 2)
          {
            WTF::StringImpl::~StringImpl(v216, v125, v126, v127, v128, v129, v130, v131);
            WTF::fastFree(v236, v237, v238, v239, v240, v241, v242, v243);
          }
          else
          {
            *(_DWORD *)v216 -= 2;
          }
        }
        goto LABEL_197;
      }
      if (!v138)
      {
        v139 = *(_QWORD *)(v135 + 16);
        if (v139)
          *(_DWORD *)v139 += 2;
        if ((*(_DWORD *)(v139 + 16) & 0x20) != 0)
        {
          v141 = *(_DWORD *)v139;
          *(_DWORD *)v139 += 2;
          v281 = (WTF::StringImpl *)v139;
          if (!v141)
            goto LABEL_123;
        }
        else
        {
          v140 = *(unsigned int *)(v139 + 4);
          if ((v140 & 0x80000000) != 0 || __OFADD__((_DWORD)v140, 1) || __OFADD__(v140 + 1, 1))
          {
            v281 = 0;
LABEL_245:
            __break(0xC471u);
            JUMPOUT(0x198889F08);
          }
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v281, v140 + 2, (*(_DWORD *)(v139 + 16) >> 2) & 1, *(_OWORD **)(v139 + 8), v140 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v139 + 16) >> 2) & 1) << 32));
          if (!v281)
            goto LABEL_245;
          v141 = *(_DWORD *)v139 - 2;
          if (*(_DWORD *)v139 == 2)
          {
LABEL_123:
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v139, v125, v126, v127, v128, v129, v130, v131);
            WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
            goto LABEL_166;
          }
        }
        *(_DWORD *)v139 = v141;
LABEL_166:
        v194 = *(_QWORD *)(v135 + 40);
        if (v194)
          *(_DWORD *)v194 += 2;
        if ((*(_DWORD *)(v194 + 16) & 0x20) != 0)
        {
          v196 = *(_DWORD *)v194;
          *(_DWORD *)v194 += 2;
          v280 = (WTF::StringImpl *)v194;
          if (!v196)
            goto LABEL_174;
        }
        else
        {
          v195 = *(unsigned int *)(v194 + 4);
          if ((v195 & 0x80000000) != 0 || __OFADD__((_DWORD)v195, 1) || __OFADD__(v195 + 1, 1))
          {
            v280 = 0;
LABEL_255:
            __break(0xC471u);
            JUMPOUT(0x198889F44);
          }
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v280, v195 + 2, (*(_DWORD *)(v194 + 16) >> 2) & 1, *(_OWORD **)(v194 + 8), v195 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v194 + 16) >> 2) & 1) << 32));
          if (!v280)
            goto LABEL_255;
          v196 = *(_DWORD *)v194 - 2;
          if (*(_DWORD *)v194 == 2)
          {
LABEL_174:
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v194, v125, v126, v127, v128, v129, v130, v131);
            WTF::fastFree(v197, v198, v199, v200, v201, v202, v203, v204);
            goto LABEL_191;
          }
        }
        *(_DWORD *)v194 = v196;
LABEL_191:
        WTF::dataLog<char [15],char [8],WTF::String,char [10],WTF::String,char [3]>((WTF::PrintStream *)&v281, (WTF::PrintStream *)&v280);
LABEL_197:
        v217 = v280;
        v280 = 0;
        if (v217)
        {
          if (*(_DWORD *)v217 == 2)
          {
            WTF::StringImpl::~StringImpl(v217, v125, v126, v127, v128, v129, v130, v131);
            WTF::fastFree(v220, v221, v222, v223, v224, v225, v226, v227);
          }
          else
          {
            *(_DWORD *)v217 -= 2;
          }
        }
        v218 = v281;
        v281 = 0;
        if (v218)
        {
          if (*(_DWORD *)v218 == 2)
          {
            WTF::StringImpl::~StringImpl(v218, v125, v126, v127, v128, v129, v130, v131);
            WTF::fastFree(v228, v229, v230, v231, v232, v233, v234, v235);
          }
          else
          {
            *(_DWORD *)v218 -= 2;
          }
        }
      }
      v219 = v135 + 48;
      v135 = v134;
      if (v219 != v134)
      {
        v135 = v219;
        while ((unint64_t)(*(_QWORD *)v135 + 1) <= 1)
        {
          v135 += 48;
          if (v135 == v134)
          {
            v135 = v134;
            break;
          }
        }
      }
      if (v135 == v137)
        goto LABEL_213;
    }
    v161 = *(_QWORD *)(v135 + 16);
    if (v161)
      *(_DWORD *)v161 += 2;
    if ((*(_DWORD *)(v161 + 16) & 0x20) != 0)
    {
      v163 = *(_DWORD *)v161;
      *(_DWORD *)v161 += 2;
      v281 = (WTF::StringImpl *)v161;
      if (!v163)
      {
LABEL_141:
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v161, v125, v126, v127, v128, v129, v130, v131);
        WTF::fastFree(v164, v165, v166, v167, v168, v169, v170, v171);
        goto LABEL_155;
      }
    }
    else
    {
      v162 = *(unsigned int *)(v161 + 4);
      if ((v162 & 0x80000000) != 0 || __OFADD__((_DWORD)v162, 1) || __OFADD__(v162 + 1, 1))
      {
        v281 = 0;
LABEL_249:
        __break(0xC471u);
        JUMPOUT(0x198889F20);
      }
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v281, v162 + 2, (*(_DWORD *)(v161 + 16) >> 2) & 1, *(_OWORD **)(v161 + 8), v162 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v161 + 16) >> 2) & 1) << 32));
      if (!v281)
        goto LABEL_249;
      v163 = *(_DWORD *)v161 - 2;
      if (*(_DWORD *)v161 == 2)
        goto LABEL_141;
    }
    *(_DWORD *)v161 = v163;
LABEL_155:
    v183 = *(_QWORD *)(v135 + 24);
    if (v183)
      *(_DWORD *)v183 += 2;
    if ((*(_DWORD *)(v183 + 16) & 0x20) != 0)
    {
      v185 = *(_DWORD *)v183;
      *(_DWORD *)v183 += 2;
      v280 = (WTF::StringImpl *)v183;
      if (!v185)
      {
LABEL_163:
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v183, v125, v126, v127, v128, v129, v130, v131);
        WTF::fastFree(v186, v187, v188, v189, v190, v191, v192, v193);
LABEL_188:
        WTF::dataLog<char [19],char [8],WTF::String,char [11],WTF::String,char [3]>((WTF::PrintStream *)&v281, (WTF::PrintStream *)&v280);
        goto LABEL_197;
      }
    }
    else
    {
      v184 = *(unsigned int *)(v183 + 4);
      if ((v184 & 0x80000000) != 0 || __OFADD__((_DWORD)v184, 1) || __OFADD__(v184 + 1, 1))
      {
        v280 = 0;
LABEL_253:
        __break(0xC471u);
        JUMPOUT(0x198889F38);
      }
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v280, v184 + 2, (*(_DWORD *)(v183 + 16) >> 2) & 1, *(_OWORD **)(v183 + 8), v184 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v183 + 16) >> 2) & 1) << 32));
      if (!v280)
        goto LABEL_253;
      v185 = *(_DWORD *)v183 - 2;
      if (*(_DWORD *)v183 == 2)
        goto LABEL_163;
    }
    *(_DWORD *)v183 = v185;
    goto LABEL_188;
  }
LABEL_213:
  for (i = (uint64_t *)*((_QWORD *)this + 8); i; i = (uint64_t *)i[2])
  {
    v245 = *i;
    if (*i)
      *(_DWORD *)v245 += 2;
    if ((*(_DWORD *)(v245 + 16) & 0x20) != 0)
    {
      *(_DWORD *)v245 += 2;
      v281 = (WTF::StringImpl *)v245;
    }
    else
    {
      v246 = *(unsigned int *)(v245 + 4);
      if ((v246 & 0x80000000) != 0 || __OFADD__((_DWORD)v246, 1) || __OFADD__(v246 + 1, 1))
      {
        v281 = 0;
LABEL_243:
        __break(0xC471u);
        JUMPOUT(0x198889EFCLL);
      }
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v281, v246 + 2, (*(_DWORD *)(v245 + 16) >> 2) & 1, *(_OWORD **)(v245 + 8), v246 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v245 + 16) >> 2) & 1) << 32));
      if (!v281)
        goto LABEL_243;
    }
    WTF::dataLog<char [21],WTF::String,char [3]>((WTF::PrintStream *)&v281);
    v254 = v281;
    v281 = 0;
    if (v254)
    {
      if (*(_DWORD *)v254 == 2)
      {
        WTF::StringImpl::~StringImpl(v254, v247, v248, v249, v250, v251, v252, v253);
        WTF::fastFree(v263, v264, v265, v266, v267, v268, v269, v270);
      }
      else
      {
        *(_DWORD *)v254 -= 2;
      }
    }
    if (*(_DWORD *)v245 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v245, v247, v248, v249, v250, v251, v252, v253);
      WTF::fastFree(v255, v256, v257, v258, v259, v260, v261, v262);
    }
    else
    {
      *(_DWORD *)v245 -= 2;
    }
  }
}

uint64_t WTF::dataLog<char [29],WTF::String,char [3]>(WTF::PrintStream *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float v12;
  char v14;
  char **v15;
  char *v16;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "\nAnalyzing ModuleRecord key(");
  WTF::printInternal(v4, a1, v5, v6, v7, v8, v9, v10, v11, v12);
  WTF::PrintStream::printf(v4, "%s", ")\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [19],unsigned long,char [10]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Dependencies: ");
  WTF::PrintStream::printf(v4, "%lu", *a1);
  WTF::PrintStream::printf(v4, "%s", " modules\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [13],unsigned int,char [10]>(const char *a1, _DWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", a1);
  WTF::PrintStream::printf(v6, "%u", *a2);
  WTF::PrintStream::printf(v6, "%s", " entries\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [14],WTF::String,char [10],WTF::String,char [11],WTF::String,char [3]>(WTF::PrintStream *a1, WTF::PrintStream *a2, WTF::PrintStream *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  const WTF::String *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  float v16;
  const WTF::String *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  float v24;
  const WTF::String *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  float v32;
  char v34;
  char **v35;
  char *v36;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v36 = &v34;
    v35 = &v36;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "      import(");
  WTF::printInternal(v8, a1, v9, v10, v11, v12, v13, v14, v15, v16);
  WTF::PrintStream::printf(v8, "%s", "), local(");
  WTF::printInternal(v8, a2, v17, v18, v19, v20, v21, v22, v23, v24);
  WTF::PrintStream::printf(v8, "%s", "), module(");
  WTF::printInternal(v8, a3, v25, v26, v27, v28, v29, v30, v31, v32);
  WTF::PrintStream::printf(v8, "%s", ")\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [15],char [8],WTF::String,char [10],WTF::String,char [3]>(WTF::PrintStream *a1, WTF::PrintStream *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  const WTF::String *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  float v14;
  const WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  float v22;
  char v24;
  char **v25;
  char *v26;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v26 = &v24;
    v25 = &v26;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "      [Local] ");
  WTF::PrintStream::printf(v6, "%s", "export(");
  WTF::printInternal(v6, a1, v7, v8, v9, v10, v11, v12, v13, v14);
  WTF::PrintStream::printf(v6, "%s", "), local(");
  WTF::printInternal(v6, a2, v15, v16, v17, v18, v19, v20, v21, v22);
  WTF::PrintStream::printf(v6, "%s", ")\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [18],char [8],WTF::String,char [11],WTF::String,char [11],WTF::String,char [3]>(WTF::PrintStream *a1, WTF::PrintStream *a2, WTF::PrintStream *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  const WTF::String *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  float v16;
  const WTF::String *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  float v24;
  const WTF::String *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  float v32;
  char v34;
  char **v35;
  char *v36;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v36 = &v34;
    v35 = &v36;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "      [Indirect] ");
  WTF::PrintStream::printf(v8, "%s", "export(");
  WTF::printInternal(v8, a1, v9, v10, v11, v12, v13, v14, v15, v16);
  WTF::PrintStream::printf(v8, "%s", "), import(");
  WTF::printInternal(v8, a2, v17, v18, v19, v20, v21, v22, v23, v24);
  WTF::PrintStream::printf(v8, "%s", "), module(");
  WTF::printInternal(v8, a3, v25, v26, v27, v28, v29, v30, v31, v32);
  WTF::PrintStream::printf(v8, "%s", ")\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [19],char [8],WTF::String,char [11],WTF::String,char [3]>(WTF::PrintStream *a1, WTF::PrintStream *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  const WTF::String *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  float v14;
  const WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  float v22;
  char v24;
  char **v25;
  char *v26;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v26 = &v24;
    v25 = &v26;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "      [Namespace] ");
  WTF::PrintStream::printf(v6, "%s", "export(");
  WTF::printInternal(v6, a1, v7, v8, v9, v10, v11, v12, v13, v14);
  WTF::PrintStream::printf(v6, "%s", "), module(");
  WTF::printInternal(v6, a2, v15, v16, v17, v18, v19, v20, v21, v22);
  WTF::PrintStream::printf(v6, "%s", ")\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [21],WTF::String,char [3]>(WTF::PrintStream *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float v12;
  char v14;
  char **v15;
  char *v16;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "      [Star] module(");
  WTF::printInternal(v4, a1, v5, v6, v7, v8, v9, v10, v11, v12);
  WTF::PrintStream::printf(v4, "%s", ")\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

int *JSC::createAggregateError(unint64_t a1, uint64_t a2, const WTF::String *a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v12;
  int *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t i;
  unint64_t v24;
  uint64_t Index;
  int v26;
  WTF *v27;
  unsigned int v28;
  _QWORD *v29;
  unint64_t v30;
  WTF *v31;
  uint64_t v32;
  BOOL v33;
  _QWORD *v35;
  int v37;
  unint64_t OutOfMemoryError;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  JSC::Exception *v45;
  int v46;
  JSC::VM *v47;
  JSC::VM *v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t v51;
  unint64_t v52;
  JSC::JSGlobalObject *v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  int *v58;
  unint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int8x16_t v77;
  _BOOL4 v78;
  uint64_t v79;
  int v80;
  WTF *v81;
  unsigned int v82;
  _QWORD *v83;
  int v84;
  int v85;
  unint64_t v86;
  WTF *v87;
  uint64_t v88;
  BOOL v89;
  _QWORD *v91;
  int v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  JSC::Exception *v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  uint64_t v110;
  WTF *v111;
  _OWORD v112[4];
  uint64_t v113;
  WTF::StringImpl *v114;
  unint64_t v115;
  WTF *v116;
  int *v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121[2];

  v12 = a2;
  v115 = a5;
  if (a5 != 10)
  {
    if ((a5 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a5 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v115, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, (int **)&v114);
      goto LABEL_9;
    }
    v14 = *(int **)(a5 + 8);
    if ((v14 & 1) != 0)
    {
      v14 = *JSC::JSRopeString::resolveRope(a5, (JSC::JSGlobalObject *)a1, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (!v14)
        goto LABEL_8;
    }
    else if (!v14)
    {
LABEL_8:
      v114 = (WTF::StringImpl *)v14;
      goto LABEL_9;
    }
    *v14 += 2;
    goto LABEL_8;
  }
  v114 = 0;
LABEL_9:
  if (*(_DWORD *)(v12 + 80))
  {
    v102 = *(_DWORD *)(v12 + 80);
    if ((v102 & 0x27) != 0 && (v102 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_175;
  }
  if ((a6 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a6 + 5) < 0x17u)
  {
    v107 = 0;
  }
  else
  {
    v107 = JSC::JSObject::getIfPropertyExists<JSC::Identifier>(a6, (JSC::JSGlobalObject *)a1, *(_QWORD *)(v12 + 41952) + 1008, a4, a5, a6, a7, a8);
    if (*(_DWORD *)(v12 + 80))
    {
      v15 = *(_DWORD *)(v12 + 80);
      if ((v15 & 0x27) != 0 && (v15 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v12 + 16))
      {
LABEL_175:
        v58 = 0;
        goto LABEL_102;
      }
    }
  }
  v109 = 0;
  v108 = (unint64_t)a3;
  v110 = 0x800000000;
  v111 = (WTF *)((char *)v112 + 8);
  memset(v112, 0, sizeof(v112));
  v113 = 0;
  v16 = *(_QWORD *)(a1 + 56);
  if ((a4 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a4 + 5) == 36)
  {
    v17 = *(unsigned __int8 *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 8);
    v18 = (v17 & 0x10) != 0 ? ((v17 & 0xE) + 10) >> 1 : (v17 >> 1) & 7;
    v19 = *(_DWORD *)(a1 + 4 * v18 + 852);
    v20 = v19 ? 16 * (v19 & 0xFFFFFFFE) : 0;
    if (v20 == 16 * (*(_DWORD *)a4 & 0xFFFFFFFE))
    {
      v21 = *(_QWORD *)(a1 + 2216);
      v22 = (v21 & 1) != 0 ? (v21 >> 1) & 3 : *(unsigned __int8 *)(v21 + 4);
      if (v22 != 2)
      {
        for (i = 0; ; ++i)
        {
          if ((*(_BYTE *)(a4 + 4) & 0xE) != 0)
            v24 = *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8);
          else
            v24 = 0;
          if (i >= v24)
            goto LABEL_93;
          Index = JSC::JSObject::getIndex((JSC::JSObject *)a4, (JSC::JSGlobalObject *)a1, i, a4, a5, a6, a7, a8);
          if (*(_DWORD *)(v16 + 80))
          {
            v37 = *(_DWORD *)(v16 + 80);
            if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v16 + 16))
              goto LABEL_93;
          }
          v26 = v110;
          if ((_DWORD)v110 != HIDWORD(v110))
            break;
          if (!(v110 >> 30))
          {
            WTF::tryFastMalloc((WTF *)(16 * v110), &v116);
            v27 = v116;
            if (v116)
            {
              v28 = v110;
              if ((_DWORD)v110)
              {
                v30 = 0;
                do
                {
                  v31 = v111;
                  *((_QWORD *)v27 + v30) = *((_QWORD *)v111 + v30);
                  v32 = *((_QWORD *)v31 + v30);
                  if (*(_QWORD *)&v112[0])
                    v33 = 0;
                  else
                    v33 = (v32 & 0xFFFE000000000002) == 0;
                  if (v33 && v32 != 0)
                  {
                    v35 = (_QWORD *)(v32 & 0xFFFFFFFFFFFFC000 | 8);
                    if ((v32 & 8) != 0)
                      v35 = (_QWORD *)(v32 - 16);
                    *(_QWORD *)&v112[0] = *v35 + 560;
                    v121[0] = (uint64_t)&v110;
                    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v112[0], v121, a4, a5, a6, a7, a8, (uint64_t)&v116);
                    v28 = v110;
                  }
                  ++v30;
                }
                while (v30 < v28);
              }
              if (v111 != (WTF *)((char *)v112 + 8) && v111 != 0)
              {
                WTF::fastFree((unint64_t)v111, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                v28 = v110;
              }
              v111 = v27;
              HIDWORD(v110) = 2 * v26;
LABEL_42:
              *((_QWORD *)v27 + v28) = Index;
              LODWORD(v110) = v28 + 1;
              if (!*(_QWORD *)&v112[0] && (Index & 0xFFFE000000000002) == 0 && Index)
              {
                v29 = (_QWORD *)(Index & 0xFFFFFFFFFFFFC000 | 8);
                if ((Index & 8) != 0)
                  v29 = (_QWORD *)(Index - 16);
                *(_QWORD *)&v112[0] = *v29 + 560;
                v121[0] = (uint64_t)&v110;
                WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v112[0], v121, a4, a5, a6, a7, a8, (uint64_t)&v116);
              }
              goto LABEL_38;
            }
          }
          v109 = 1;
LABEL_76:
          OutOfMemoryError = JSC::createOutOfMemoryError(a1, (JSC::JSGlobalObject *)a2);
          v45 = (JSC::Exception *)OutOfMemoryError;
          if ((OutOfMemoryError & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                    + 0x4C)))
          {
            v45 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)OutOfMemoryError, 0, v39, v40, v41, v42, v43);
          }
          JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a1, v45, v44, v39, v40, v41, v42, v43);
LABEL_39:
          if (*(_QWORD *)(v16 + 16))
          {
            v46 = *(_DWORD *)(a1 + 1000);
            if (v46)
              v47 = (JSC::VM *)(16 * (v46 & 0xFFFFFFFE));
            else
              v47 = 0;
            v48 = JSC::JSArrayIterator::create(v16, v47, a4, 0xFFFE000000000001, a5, a6, a7, a8);
            v49 = (uint64_t)v48;
            v50 = (i + 1);
            *(double *)v51.i64 = (double)v50;
            v52 = v50 | 0xFFFE000000000000;
            if ((int)i + 1 < 0)
              v52 = v51.i64[0] + 0x2000000000000;
            *((_QWORD *)v48 + 2) = v52;
            v53 = (JSC::JSGlobalObject *)a1;
            goto LABEL_92;
          }
        }
        v27 = v111;
        if (v111 != (WTF *)((char *)v112 + 8) && v111)
        {
          v28 = v110;
          goto LABEL_42;
        }
        *((_QWORD *)v111 + v110) = Index;
        LODWORD(v110) = v26 + 1;
LABEL_38:
        if (!v109)
          goto LABEL_39;
        goto LABEL_76;
      }
    }
  }
  v73 = JSC::iteratorForIterable((JSC::VM **)a1, a4, (uint64_t)a3, a4, a5, a6, a7, a8, (int8x16_t)0);
  v74 = a2;
  if (!*(_DWORD *)(v16 + 80))
    goto LABEL_108;
  v106 = *(_DWORD *)(v16 + 80);
  if ((v106 & 0x27) != 0 && (v106 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v16 + 16))
  {
LABEL_108:
    while (1)
    {
      v75 = *(_QWORD *)(a1 + 56);
      v76 = JSC::iteratorNext((JSC::JSGlobalObject *)a1, v73, v74, 0, a5, a6, a7, a8);
      if (*(_DWORD *)(v75 + 80))
      {
        v84 = *(_DWORD *)(v75 + 80);
        if ((v84 & 0x27) != 0 && (v84 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v75 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v75 + 16))
          goto LABEL_135;
      }
      v78 = JSC::iteratorComplete((JSC::JSGlobalObject *)a1, v76, (uint64_t)a3, a4, a5, a6, a7, a8, v77);
      if (!*(_DWORD *)(v75 + 80))
        goto LABEL_110;
      v85 = *(_DWORD *)(v75 + 80);
      if ((v85 & 0x27) != 0 && (v85 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v75 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v75 + 16))
      {
LABEL_135:
        a2 = 0;
      }
      else
      {
LABEL_110:
        if (v78)
          a2 = 6;
        else
          a2 = v76;
      }
      if (*(_QWORD *)(v16 + 16) || a2 == 6)
        break;
      v79 = JSC::iteratorValue((JSC::JSGlobalObject *)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v77);
      if (*(_DWORD *)(v16 + 80))
      {
        v93 = *(_DWORD *)(v16 + 80);
        if ((v93 & 0x27) != 0 && (v93 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v16 + 16))
          break;
      }
      v80 = v110;
      if ((_DWORD)v110 == HIDWORD(v110))
      {
        if (v110 >> 30
          || (WTF::tryFastMalloc((WTF *)(16 * v110), &v116), (v81 = v116) == 0))
        {
          v109 = 1;
LABEL_163:
          v94 = JSC::createOutOfMemoryError(a1, (JSC::JSGlobalObject *)a2);
          v101 = (JSC::Exception *)v94;
          if ((v94 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v94 & 0xFFFFFFFE) + 0x4C)))
          {
            v101 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v94, 0, v95, v96, v97, v98, v99);
          }
          JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a1, v101, v100, v95, v96, v97, v98, v99);
          goto LABEL_121;
        }
        v82 = v110;
        if ((_DWORD)v110)
        {
          v86 = 0;
          do
          {
            v87 = v111;
            *((_QWORD *)v81 + v86) = *((_QWORD *)v111 + v86);
            v88 = *((_QWORD *)v87 + v86);
            if (*(_QWORD *)&v112[0])
              v89 = 0;
            else
              v89 = (v88 & 0xFFFE000000000002) == 0;
            if (v89 && v88 != 0)
            {
              v91 = (_QWORD *)(v88 & 0xFFFFFFFFFFFFC000 | 8);
              if ((v88 & 8) != 0)
                v91 = (_QWORD *)(v88 - 16);
              *(_QWORD *)&v112[0] = *v91 + 560;
              v121[0] = (uint64_t)&v110;
              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v112[0], v121, a4, a5, a6, a7, a8, (uint64_t)&v116);
              v82 = v110;
            }
            ++v86;
          }
          while (v86 < v82);
        }
        if (v111 != (WTF *)((char *)v112 + 8) && v111 != 0)
        {
          WTF::fastFree((unint64_t)v111, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v82 = v110;
        }
        v111 = v81;
        HIDWORD(v110) = 2 * v80;
      }
      else
      {
        v81 = v111;
        if (v111 == (WTF *)((char *)v112 + 8) || !v111)
        {
          *((_QWORD *)v111 + v110) = v79;
          LODWORD(v110) = v80 + 1;
          goto LABEL_120;
        }
        v82 = v110;
      }
      *((_QWORD *)v81 + v82) = v79;
      LODWORD(v110) = v82 + 1;
      if (!*(_QWORD *)&v112[0] && (v79 & 0xFFFE000000000002) == 0 && v79)
      {
        v83 = (_QWORD *)(v79 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v79 & 8) != 0)
          v83 = (_QWORD *)(v79 - 16);
        *(_QWORD *)&v112[0] = *v83 + 560;
        v121[0] = (uint64_t)&v110;
        WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v112[0], v121, a4, a5, a6, a7, a8, (uint64_t)&v116);
      }
LABEL_120:
      if (v109)
        goto LABEL_163;
LABEL_121:
      if (*(_QWORD *)(v16 + 16))
      {
        v53 = (JSC::JSGlobalObject *)a1;
        v49 = v73;
LABEL_92:
        JSC::iteratorClose(v53, v49, (uint64_t)a3, a4, a5, a6, a7, a8, v51);
        break;
      }
    }
  }
LABEL_93:
  if (*(_DWORD *)(v12 + 80))
  {
    v103 = *(_DWORD *)(v12 + 80);
    if ((v103 & 0x27) != 0 && (v103 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_184;
  }
  v116 = v111;
  LODWORD(v117) = v110;
  v54 = *(_QWORD *)(a1 + 56);
  v55 = *(_DWORD *)(a1 + 896);
  v56 = v55 ? 16 * (v55 & 0xFFFFFFFE) : 0;
  if (!*(_DWORD *)(v54 + 80))
    goto LABEL_98;
  v104 = *(_DWORD *)(v54 + 80);
  if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v54 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v54 + 16))
    v57 = 0;
  else
LABEL_98:
    v57 = JSC::constructArray(a1, v56, (uint64_t)&v116, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_100;
  v105 = *(_DWORD *)(v12 + 80);
  if ((v105 & 0x27) != 0 && (v105 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v12 + 16))
  {
LABEL_184:
    v58 = 0;
  }
  else
  {
LABEL_100:
    v58 = (int *)JSC::ErrorInstance::create((JSC::Heap **)v12, v108, &v114, v107, 0, 0, 7, 0);
    v59 = *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1240);
    v116 = 0;
    v117 = v58;
    v118 = -1;
    v60.n128_u64[0] = 0x100000001000000;
    v119 = 0x1000000;
    v120 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v58, v12, v59, v57, 4, (uint64_t)&v116, v61, v62, v60);
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v110, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_102:
  v63 = v114;
  v114 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  return v58;
}

uint64_t JSC::JSObject::getIfPropertyExists<JSC::Identifier>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  _WORD *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned __int16 *v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  unsigned int *v52;
  JSC::VM *v53;
  uint64_t result;
  WTF::StringImpl *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  BOOL v61;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int8x16_t **v66;
  int v67;
  _BYTE *v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  char v74;
  int v75;
  BOOL v76;
  unsigned __int16 *v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  JSC::VMTraps *v81;
  char *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  JSC::VM *v86;
  JSC::VMTraps *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  int v98;
  unsigned int v99;
  int v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  JSC::VM *v106;
  _BYTE *v107;
  char OwnStaticPropertySlot;
  JSC::VM *v109;
  uint64_t v110;
  JSC::VM *v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  unsigned __int8 *v115;
  int v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  size_t v123;
  char *v124;
  char *v125;
  int v126;
  uint64_t v127;
  unsigned __int8 *v128;
  JSC::VM **v129;
  uint64_t v130;
  int v131;
  int v132;
  JSC::VM **p_dst;
  uint64_t v134;
  int v135;
  int v136;
  int v137;
  BOOL v138;
  char v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  char v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  char v157;
  int v158;
  unint64_t v159;
  unint64_t v160;
  char v161;
  uint64_t v162;
  unsigned __int8 *v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  char v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  char v177;
  int v178;
  unint64_t v179;
  unint64_t v180;
  char v181;
  uint64_t v183;
  unsigned __int8 *v184;
  unsigned int v185;
  unint64_t v186;
  JSC::VM *v187;
  char v188;
  JSC::VMTraps *v189;
  JSC::VMTraps *v190;
  JSC::VMTraps *v191;
  _BYTE *v192;
  _BYTE *v193;
  _BYTE *v194;
  JSC::Structure *v195;
  uint64_t v196;
  uint64_t v197;
  JSC::VMTraps *v198;
  JSC::VMTraps *v199;
  JSC::VMTraps *v200;
  JSC::VMTraps *v201;
  JSC::VMTraps *v202;
  JSC::VMTraps *v203;
  uint64_t (*v204)(unint64_t);
  uint64_t v205;
  unint64_t v206;
  _DWORD *v207;
  _DWORD *v208;
  uint64_t v209;
  int v210;
  char v211;
  uint64_t v212;
  char v213;
  int8x16_t **v214;
  uint64_t v215;
  JSC::VM *__dst;
  char v217;
  char __s[3];
  _BYTE v219[39];

  v8 = (unint64_t *)a3;
  *(_QWORD *)&v219[23] = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a2 + 7);
  v206 = 0xFFFFFFFF00000000;
  v208 = 0;
  v209 = 0;
  v207 = (_DWORD *)a1;
  v210 = 0x10000;
  v211 = 0;
  LOBYTE(v212) = 0;
  v213 = 0;
  v214 = 0;
  v215 = 0;
  v12 = *(_QWORD *)a3;
  v13 = (_BYTE *)(a1 + 6);
  v14 = *(_QWORD *)a3 >> 4;
  v15 = a1;
  if ((*(_BYTE *)(a1 + 6) & 8) == 0)
  {
    v16 = a1;
    do
    {
      v17 = *(_DWORD *)v16 & 0xFFFFFFFE;
      v18 = 16 * v17;
      if (!(_DWORD)v14 || (v14 & ~*(_DWORD *)(16 * v17 + 0x20)) != 0)
        goto LABEL_30;
      v19 = *(_QWORD *)(16 * v17 + 0x58);
      if (!v19)
      {
        v20 = *(_QWORD *)(16 * v17 + 0x40);
        if (!v20 || *(_BYTE *)(v20 + 5) != 1 && *(_DWORD *)(v20 + 80) < 2u)
          goto LABEL_30;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v18, (JSC::VM *)v11, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v19)
          goto LABEL_30;
      }
      if (!*(_DWORD *)(v19 + 24))
        goto LABEL_30;
      v21 = *(_QWORD *)(v19 + 16);
      v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
      v23 = *(unsigned int *)(v19 + 8);
      v24 = *(_DWORD *)(v12 + 16);
      if ((v21 & 1) != 0)
      {
        if ((v24 & 0x20) != 0)
          v24 = *(_DWORD *)(v12 + 32);
        v25 = *(_DWORD *)(v19 + 12);
        v26 = (v24 >> 8) & *(_QWORD *)&v25;
        v27 = *(unsigned __int8 *)(v22 + v26);
        if (!*(_BYTE *)(v22 + v26))
          goto LABEL_30;
        v28 = v22 + v23;
        v29 = 1;
        while (1)
        {
          v30 = *(_QWORD *)(v28 + 8 * (v27 - 1));
          if (v12 == (v30 & 0xFFFFFFFFFFFFLL))
            break;
          v26 = ((_DWORD)v26 + v29) & v25;
          v27 = *(unsigned __int8 *)(v22 + v26);
          ++v29;
          if (!*(_BYTE *)(v22 + v26))
            goto LABEL_30;
        }
        a6 = (v30 >> 16) & 0xFF00000000 | HIBYTE(v30);
      }
      else
      {
        if ((v24 & 0x20) != 0)
          v24 = *(_DWORD *)(v12 + 32);
        v31 = *(_DWORD *)(v19 + 12);
        v32 = v31 & (v24 >> 8);
        v33 = *(_DWORD *)(v22 + 4 * v32);
        if (!v33)
          goto LABEL_30;
        v34 = v22 + 4 * v23;
        v35 = 1;
        while (1)
        {
          v36 = (v33 - 1);
          if (v12 == *(_QWORD *)(v34 + 16 * v36))
            break;
          v32 = (v32 + v35) & v31;
          v33 = *(_DWORD *)(v22 + 4 * v32);
          ++v35;
          if (!v33)
            goto LABEL_30;
        }
        a6 = *(unsigned int *)(v34 + 16 * v36 + 8) | ((unint64_t)*(unsigned __int8 *)(v34 + 16 * v36 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v43 = v16 + 16;
          v44 = a6 << 32;
        }
        else
        {
          v43 = *(_QWORD *)(v16 + 8) - 8;
          v44 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v43 + (v44 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v45 = *(unsigned __int8 *)(a4 + 5);
          if (v45 != 5)
          {
            if (v45 != 6)
              goto LABEL_52;
            v63 = *(_DWORD *)(v18 + 16) & 3;
            v64 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v66 = *(int8x16_t ***)(a4 + 24);
              v65 = *(_QWORD *)(a4 + 32);
              v204 = *(uint64_t (**)(unint64_t))(a4 + 8);
              v205 = v64;
              LODWORD(v206) = HIDWORD(a6);
              v208 = (_DWORD *)v16;
              goto LABEL_96;
            }
            v204 = *(uint64_t (**)(unint64_t))(a4 + 8);
            v205 = v64;
            LODWORD(v206) = HIDWORD(a6);
            v208 = (_DWORD *)v16;
LABEL_265:
            v46 = 1;
            BYTE1(v210) = 3;
            if (v63 != 2)
              LOBYTE(v210) = 1;
            goto LABEL_72;
          }
          v52 = (unsigned int *)v16;
          v53 = (JSC::VM *)v11;
LABEL_70:
          JSC::JSObject::fillGetterPropertySlot(v52, (uint64_t)v53, (uint64_t)&v204, a4, a5, a6);
LABEL_71:
          v46 = 1;
          goto LABEL_72;
        }
LABEL_52:
        v204 = (uint64_t (*)(unint64_t))a4;
        v208 = (_DWORD *)v16;
LABEL_53:
        v206 = __PAIR64__(a6, a5);
        v46 = 1;
        LOWORD(v210) = 257;
        goto LABEL_72;
      }
LABEL_30:
      if ((*v13 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v16, (JSC::VM *)v11, v12, (uint64_t)&v204) & 1) != 0)
      {
        goto LABEL_71;
      }
      v15 = *(_QWORD *)(v18 + 48);
      if (!v15)
        v15 = *(_QWORD *)(v16 + 16);
      if ((v15 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v15 + 5) < 0x17u)
      {
        if (!v12)
          goto LABEL_68;
        v37 = *(_DWORD *)(v12 + 16);
        if ((v37 & 0x20) != 0)
          goto LABEL_68;
        v38 = *(_WORD **)(v12 + 8);
        v39 = *(unsigned int *)(v12 + 4);
        if ((v37 & 4) == 0)
        {
          if ((_DWORD)v39)
          {
            v40 = (unsigned __int16)*v38 - 48;
            if (v40 <= 9 && (*v38 != 48 || v39 <= 1))
            {
              v47 = v38 + 1;
              v48 = v39 - 1;
              while (v48)
              {
                if (v40 > 0x19999999)
                  goto LABEL_44;
                v49 = *v47 - 48;
                if (v49 > 9)
                  goto LABEL_44;
                v41 = 0;
                LOBYTE(v39) = 0;
                v42 = 0;
                v50 = __CFADD__(v49, 10 * v40);
                v40 = v49 + 10 * v40;
                ++v47;
                --v48;
                if (v50)
                  goto LABEL_67;
              }
              v42 = v40 & 0xFFFFFF00;
              v41 = 0x100000000;
              if (v40 == -1)
              {
                v41 = 0;
                LOBYTE(v39) = 0;
              }
              else
              {
                LOBYTE(v39) = v40;
              }
              if (v40 == -1)
                v42 = 0;
LABEL_67:
              v51 = v39;
              if ((v41 & 0x100000000) == 0)
              {
LABEL_68:
                v46 = 0;
                goto LABEL_72;
              }
LABEL_283:
              v147 = v42 | v51;
              v148 = *((_QWORD *)a2 + 7);
              v202 = (JSC::VMTraps *)(v148 + 64);
              v149 = a1;
              while (2)
              {
                v150 = 16 * (*(_DWORD *)v149 & 0xFFFFFFFE);
                v151 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v150 + 0x4C) + 0x70))(v149, a2, v147, &v204);
                v152 = v151;
                if (*(_DWORD *)(v148 + 80))
                {
                  v155 = *(_DWORD *)(v148 + 80);
                  if ((v155 & 0x27) != 0 && (v155 & 0x20) == 0)
                    JSC::VMTraps::handleTraps(v202, 7u, a3, a4, a5, a6, a7, a8);
                  v156 = *(_QWORD *)(v148 + 16);
                  v138 = v156 == 0;
                  if (v156)
                    v157 = 1;
                  else
                    v157 = v152;
                  if ((v157 & 1) != 0)
                  {
LABEL_392:
                    v46 = v138;
                    goto LABEL_72;
                  }
                }
                else if ((v151 & 1) != 0)
                {
                  goto LABEL_71;
                }
                if (BYTE2(v210) == 3)
                {
                  if (v211)
                    goto LABEL_68;
                  v153 = *(unsigned __int8 *)(v149 + 5);
                  if (v153 != 61)
                    goto LABEL_288;
                }
                else
                {
                  v153 = *(unsigned __int8 *)(v149 + 5);
                  if (v153 == 61)
                  {
                    if (BYTE2(v210) == 1)
                      goto LABEL_68;
                  }
                  else
                  {
LABEL_288:
                    if ((v153 - 39) <= 0xA)
                    {
                      if ((*(_BYTE *)(v149 + 40) & 7u) > 2)
                      {
                        LOBYTE(__dst) = 0;
                        v217 = 0;
                        v160 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v149, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                        v159 = v161 ? v160 : 0;
                      }
                      else
                      {
                        v159 = *(_QWORD *)(v149 + 24);
                      }
                      if (v159 <= v147)
                        goto LABEL_68;
                    }
                  }
                }
                if ((*(_WORD *)(v150 + 12) & 0x800) == 0 || BYTE2(v210) == 3)
                {
                  v154 = *(_QWORD *)(16 * (*(_DWORD *)v149 & 0xFFFFFFFE) + 0x30);
                  if (!v154)
                    v154 = *(_QWORD *)(v149 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v149 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v154 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v149 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0xB0))(v149, a2);
                  }
                  else
                  {
                    v154 = *(_QWORD *)(16 * (*(_DWORD *)v149 & 0xFFFFFFFE) + 0x30);
                    if (!v154)
                      v154 = *(_QWORD *)(v149 + 16);
                  }
                  if (*(_DWORD *)(v148 + 80))
                  {
                    v158 = *(_DWORD *)(v148 + 80);
                    if ((v158 & 0x27) != 0 && (v158 & 0x20) == 0)
                      JSC::VMTraps::handleTraps(v202, 7u, a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v148 + 16))
                      goto LABEL_68;
                  }
                }
                if ((v154 & 0xFFFE000000000002) != 0)
                  goto LABEL_68;
                v46 = 0;
                v149 = v154;
                if (*(unsigned __int8 *)(v154 + 5) <= 0x16u)
                  goto LABEL_72;
                continue;
              }
            }
LABEL_44:
            v41 = 0;
            LOBYTE(v39) = 0;
          }
          else
          {
            v41 = 0;
          }
          v42 = 0;
          goto LABEL_67;
        }
        if ((_DWORD)v39)
        {
          v145 = *(unsigned __int8 *)v38 - 48;
          if (v145 <= 9 && (v39 < 2 || *(_BYTE *)v38 != 48))
          {
            v162 = v39 - 1;
            v163 = (unsigned __int8 *)v38 + 1;
            while (v162)
            {
              if (v145 > 0x19999999)
                goto LABEL_280;
              v164 = *v163 - 48;
              if (v164 > 9)
                goto LABEL_280;
              v51 = 0;
              LOBYTE(v39) = 0;
              v146 = 0;
              v50 = __CFADD__(v164, 10 * v145);
              v145 = v164 + 10 * v145;
              --v162;
              ++v163;
              if (v50)
                goto LABEL_282;
            }
            if (v145 == -1)
              v51 = 0;
            else
              v51 = v145 & 0xFFFFFF00;
            if (v145 == -1)
              LOBYTE(v39) = 0;
            else
              LOBYTE(v39) = v145;
            if (v145 == -1)
              v146 = 0;
            else
              v146 = 0x100000000;
LABEL_282:
            v42 = v39;
            if ((v146 & 0x100000000) == 0)
              goto LABEL_68;
            goto LABEL_283;
          }
LABEL_280:
          v51 = 0;
          LOBYTE(v39) = 0;
        }
        else
        {
          v51 = 0;
        }
        v146 = 0;
        goto LABEL_282;
      }
      v13 = (_BYTE *)(v15 + 6);
      v16 = v15;
    }
    while ((*(_BYTE *)(v15 + 6) & 8) == 0);
  }
  if (!v12)
    goto LABEL_135;
  v67 = *(_DWORD *)(v12 + 16);
  if ((v67 & 0x20) != 0)
    goto LABEL_135;
  v68 = *(_BYTE **)(v12 + 8);
  v69 = *(unsigned int *)(v12 + 4);
  if ((v67 & 4) != 0)
  {
    if ((_DWORD)v69)
    {
      v165 = *v68 - 48;
      if (v165 <= 9 && (v69 < 2 || *v68 != 48))
      {
        v183 = v69 - 1;
        v184 = v68 + 1;
        while (v183)
        {
          if (v165 > 0x19999999)
            goto LABEL_346;
          v185 = *v184 - 48;
          if (v185 > 9)
            goto LABEL_346;
          v80 = 0;
          LOBYTE(v69) = 0;
          v166 = 0;
          v50 = __CFADD__(v185, 10 * v165);
          v165 = v185 + 10 * v165;
          --v183;
          ++v184;
          if (v50)
            goto LABEL_348;
        }
        if (v165 == -1)
          v80 = 0;
        else
          v80 = v165 & 0xFFFFFF00;
        if (v165 == -1)
          LOBYTE(v69) = 0;
        else
          LOBYTE(v69) = v165;
        if (v165 == -1)
          v166 = 0;
        else
          v166 = 0x100000000;
LABEL_348:
        v72 = v69;
        if ((v166 & 0x100000000) == 0)
          goto LABEL_135;
        goto LABEL_349;
      }
LABEL_346:
      v80 = 0;
      LOBYTE(v69) = 0;
    }
    else
    {
      v80 = 0;
    }
    v166 = 0;
    goto LABEL_348;
  }
  if (!(_DWORD)v69)
  {
    v71 = 0;
    goto LABEL_105;
  }
  v70 = *(unsigned __int16 *)v68 - 48;
  if (v70 > 9 || (*(_WORD *)v68 == 48 ? (v76 = v69 > 1) : (v76 = 0), v76))
  {
LABEL_104:
    v71 = 0;
    LOBYTE(v69) = 0;
LABEL_105:
    v72 = 0;
    goto LABEL_134;
  }
  v77 = (unsigned __int16 *)(v68 + 2);
  v78 = v69 - 1;
  while (v78)
  {
    if (v70 > 0x19999999)
      goto LABEL_104;
    v79 = *v77 - 48;
    if (v79 > 9)
      goto LABEL_104;
    v71 = 0;
    LOBYTE(v69) = 0;
    v72 = 0;
    v50 = __CFADD__(v79, 10 * v70);
    v70 = v79 + 10 * v70;
    ++v77;
    --v78;
    if (v50)
      goto LABEL_134;
  }
  v72 = v70 & 0xFFFFFF00;
  v71 = 0x100000000;
  if (v70 == -1)
  {
    v71 = 0;
    LOBYTE(v69) = 0;
  }
  else
  {
    LOBYTE(v69) = v70;
  }
  if (v70 == -1)
    v72 = 0;
LABEL_134:
  v80 = v69;
  if ((v71 & 0x100000000) != 0)
  {
LABEL_349:
    v167 = v72 | v80;
    v168 = *((_QWORD *)a2 + 7);
    v203 = (JSC::VMTraps *)(v168 + 64);
    v169 = a1;
    while (1)
    {
      v170 = 16 * (*(_DWORD *)v169 & 0xFFFFFFFE);
      v171 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v170 + 0x4C) + 0x70))(v169, a2, v167, &v204);
      v172 = v171;
      if (*(_DWORD *)(v168 + 80))
      {
        v175 = *(_DWORD *)(v168 + 80);
        if ((v175 & 0x27) != 0 && (v175 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v203, 7u, a3, a4, a5, a6, a7, a8);
        v176 = *(_QWORD *)(v168 + 16);
        v138 = v176 == 0;
        if (v176)
          v177 = 1;
        else
          v177 = v172;
        if ((v177 & 1) != 0)
          goto LABEL_392;
      }
      else if ((v171 & 1) != 0)
      {
        goto LABEL_71;
      }
      if (BYTE2(v210) == 3)
      {
        if (v211)
          goto LABEL_68;
        v173 = *(unsigned __int8 *)(v169 + 5);
        if (v173 == 61)
          goto LABEL_355;
      }
      else
      {
        v173 = *(unsigned __int8 *)(v169 + 5);
        if (v173 == 61)
        {
          if (BYTE2(v210) == 1)
            goto LABEL_68;
          goto LABEL_355;
        }
      }
      if ((v173 - 39) <= 0xA)
      {
        if ((*(_BYTE *)(v169 + 40) & 7u) > 2)
        {
          LOBYTE(__dst) = 0;
          v217 = 0;
          v180 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v169, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
          v179 = v181 ? v180 : 0;
        }
        else
        {
          v179 = *(_QWORD *)(v169 + 24);
        }
        if (v179 <= v167)
          goto LABEL_68;
      }
LABEL_355:
      if ((*(_WORD *)(v170 + 12) & 0x800) == 0 || BYTE2(v210) == 3)
      {
        v174 = *(_QWORD *)(16 * (*(_DWORD *)v169 & 0xFFFFFFFE) + 0x30);
        if (!v174)
          v174 = *(_QWORD *)(v169 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v169 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v174 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)v169 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0xB0))(v169, a2);
        }
        else
        {
          v174 = *(_QWORD *)(16 * (*(_DWORD *)v169 & 0xFFFFFFFE) + 0x30);
          if (!v174)
            v174 = *(_QWORD *)(v169 + 16);
        }
        if (*(_DWORD *)(v168 + 80))
        {
          v178 = *(_DWORD *)(v168 + 80);
          if ((v178 & 0x27) != 0 && (v178 & 0x20) == 0)
            JSC::VMTraps::handleTraps(v203, 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v168 + 16))
            goto LABEL_68;
        }
      }
      if ((v174 & 0xFFFE000000000002) != 0)
        goto LABEL_68;
      v46 = 0;
      v169 = v174;
      if (*(unsigned __int8 *)(v174 + 5) <= 0x16u)
        goto LABEL_72;
    }
  }
LABEL_135:
  v53 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v81 = (JSC::VM *)((char *)v53 + 64);
  v82 = &__s[1];
  v83 = v219;
  while (1)
  {
    a3 = 16 * (*(_DWORD *)v15 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v15 + 6) & 8) == 0)
      break;
    v191 = v81;
    v194 = v83;
    v197 = 16 * (*(_DWORD *)v15 & 0xFFFFFFFE);
    v201 = (JSC::VMTraps *)v82;
    v111 = v53;
    v188 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v197 + 0x4C) + 0x68))(v15, a2, v12, &v204);
    v187 = v111;
    if (*((_DWORD *)v111 + 20))
    {
      v137 = *((_DWORD *)v111 + 20);
      if ((v137 & 0x27) != 0 && (v137 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v191, 7u, a3, a4, a5, a6, a7, a8);
      v138 = *((_QWORD *)v111 + 2) == 0;
      v139 = v188;
      if (*((_QWORD *)v111 + 2))
        v139 = 1;
      if ((v139 & 1) != 0)
        goto LABEL_392;
    }
    else if ((v188 & 1) != 0)
    {
      goto LABEL_71;
    }
    if (BYTE2(v210) == 3)
    {
      if (v211)
        goto LABEL_68;
      v112 = *(unsigned __int8 *)(v15 + 5);
      if (v112 == 61)
        goto LABEL_235;
    }
    else
    {
      v112 = *(unsigned __int8 *)(v15 + 5);
      if (v112 == 61)
      {
        v53 = v111;
        v81 = v191;
        v83 = v194;
        a3 = v197;
        v82 = (char *)v201;
        if (BYTE2(v210) == 1)
          goto LABEL_68;
        goto LABEL_165;
      }
    }
    if (!v12)
      goto LABEL_235;
    if ((v112 - 50) < 0xFFFFFFF5)
      goto LABEL_235;
    v113 = *(_DWORD *)(v12 + 16);
    if ((v113 & 0x20) != 0)
      goto LABEL_235;
    v114 = *(unsigned int *)(v12 + 4);
    if (!(_DWORD)v114)
      goto LABEL_235;
    v115 = *(unsigned __int8 **)(v12 + 8);
    if ((v113 & 4) != 0)
    {
      v116 = *v115;
      if ((_DWORD)v114 == 1)
      {
LABEL_190:
        v53 = v111;
        v81 = v191;
        v83 = v194;
        a3 = v197;
        v82 = (char *)v201;
        if ((v116 - 48) < 0xA)
          goto LABEL_68;
        goto LABEL_165;
      }
      if (v116 == 45)
      {
        v116 = v115[1];
        goto LABEL_194;
      }
      if ((v116 - 48) < 0xA)
        goto LABEL_205;
      if ((_DWORD)v114 == 8)
        goto LABEL_204;
    }
    else
    {
      v116 = *(unsigned __int16 *)v115;
      if ((_DWORD)v114 == 1)
        goto LABEL_190;
      if (v116 == 45)
      {
        v116 = *((unsigned __int16 *)v115 + 1);
LABEL_194:
        if ((v116 - 48) < 0xA)
        {
          if ((_DWORD)v114 == 2)
            goto LABEL_68;
          goto LABEL_205;
        }
        if ((_DWORD)v114 != 9)
          goto LABEL_235;
LABEL_204:
        if (v116 != 73)
          goto LABEL_235;
        goto LABEL_205;
      }
      if ((v116 - 48) < 0xA || (_DWORD)v114 == 8 && v116 == 73)
        goto LABEL_205;
    }
    if ((_DWORD)v114 != 3 || v116 != 78)
      goto LABEL_235;
LABEL_205:
    v186 = v186 & 0xFFFFFF0000000000 | v114 | ((unint64_t)((v113 >> 2) & 1) << 32);
    JSC::jsToNumber(v115, v186);
    v118 = (v117 >> 52) & 0x7FF;
    if ((_DWORD)v118 == 2047)
    {
      if ((v117 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v119 = v194;
      }
      else
      {
        if ((v117 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v125 = (char *)v201;
        }
        else
        {
          v125 = __s;
        }
        *(_QWORD *)v125 = 0x7974696E69666E49;
        v119 = v125 + 8;
      }
      goto LABEL_219;
    }
    v120 = v117 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v117 & 0x8000000000000000) != 0 && v120)
    {
      __s[0] = 45;
      v121 = (char *)v201;
    }
    else
    {
      if (!v120)
      {
        __s[0] = 48;
        v119 = (char *)v201;
        goto LABEL_219;
      }
      v121 = __s;
    }
    v122 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v117 & 0x800FFFFFFFFFFFFFLL, v118);
    v119 = WTF::dragonbox::detail::to_shortest(v122, v123, (uint64_t)v121, v124);
LABEL_219:
    *v119 = 0;
    v126 = strlen(__s);
    memcpy(&__dst, __s, v126);
    *((_BYTE *)&__dst + v126) = 0;
    v127 = *(unsigned int *)(v12 + 4);
    v128 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      if ((_DWORD)v127)
      {
        p_dst = &__dst;
        v134 = *(unsigned int *)(v12 + 4);
        do
        {
          v136 = *(unsigned __int8 *)p_dst;
          p_dst = (JSC::VM **)((char *)p_dst + 1);
          v135 = v136;
          if (!v136 || *v128 != v135)
            goto LABEL_235;
          ++v128;
        }
        while (--v134);
      }
    }
    else if ((_DWORD)v127)
    {
      v129 = &__dst;
      v130 = *(unsigned int *)(v12 + 4);
      while (1)
      {
        v132 = *(unsigned __int8 *)v129;
        v129 = (JSC::VM **)((char *)v129 + 1);
        v131 = v132;
        if (!v132 || *(unsigned __int16 *)v128 != v131)
          break;
        v128 += 2;
        if (!--v130)
          goto LABEL_231;
      }
LABEL_235:
      v53 = v187;
      v81 = v191;
      v83 = v194;
      a3 = v197;
      v82 = (char *)v201;
      goto LABEL_165;
    }
LABEL_231:
    v53 = v187;
    v81 = v191;
    v83 = v194;
    a3 = v197;
    v82 = (char *)v201;
    if (!*((_BYTE *)&__dst + v127))
      goto LABEL_68;
LABEL_165:
    if ((*(_WORD *)(a3 + 12) & 0x800) != 0)
    {
      v104 = *(_DWORD *)v15;
      if (BYTE2(v210) != 3)
      {
        v190 = v81;
        v193 = v83;
        v200 = (JSC::VMTraps *)v82;
        v109 = v53;
        v110 = 16 * (v104 & 0xFFFFFFFE);
        if ((*(_WORD *)(v110 + 12) & 0x800) != 0)
        {
          v105 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v110 + 76) + 0xB0))(v15, a2);
        }
        else
        {
          v105 = *(_QWORD *)(v110 + 48);
          if (!v105)
            v105 = *(_QWORD *)(v15 + 16);
        }
        if (*((_DWORD *)v109 + 20))
        {
          v140 = *((_DWORD *)v109 + 20);
          if ((v140 & 0x27) != 0 && (v140 & 0x20) == 0)
            JSC::VMTraps::handleTraps(v190, 7u, a3, a4, a5, a6, a7, a8);
          v53 = v109;
          v81 = v190;
          v83 = v193;
          v82 = (char *)v200;
          if (*((_QWORD *)v109 + 2))
            goto LABEL_68;
        }
        else
        {
          v53 = v109;
          v81 = v190;
          v83 = v193;
          v82 = (char *)v200;
        }
        goto LABEL_169;
      }
    }
    else
    {
      v104 = *(_DWORD *)v15;
    }
    v105 = *(_QWORD *)(16 * (v104 & 0xFFFFFFFE) + 0x30);
    if (!v105)
      v105 = *(_QWORD *)(v15 + 16);
LABEL_169:
    if ((v105 & 0xFFFE000000000002) != 0)
      goto LABEL_68;
    v46 = 0;
    v15 = v105;
    if (*(unsigned __int8 *)(v105 + 5) <= 0x16u)
      goto LABEL_72;
  }
  if (!(_DWORD)v14 || (v14 & ~*(_DWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_164;
  v84 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x58);
  if (!v84)
  {
    v85 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x40);
    if (!v85 || *(_BYTE *)(v85 + 5) != 1 && *(_DWORD *)(v85 + 80) < 2u)
      goto LABEL_164;
    v86 = v53;
    v195 = (JSC::Structure *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE));
    v198 = (JSC::VMTraps *)v82;
    v87 = v81;
    v192 = v83;
    JSC::Structure::materializePropertyTable(v195, v53, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    v83 = v192;
    a3 = (uint64_t)v195;
    v82 = (char *)v198;
    v81 = v87;
    v53 = v86;
    if (!v84)
      goto LABEL_164;
  }
  if (!*(_DWORD *)(v84 + 24))
    goto LABEL_164;
  v88 = *(_QWORD *)(v84 + 16);
  v89 = v88 & 0xFFFFFFFFFFFFFFFELL;
  v90 = *(unsigned int *)(v84 + 8);
  v91 = *(_DWORD *)(v12 + 16);
  if ((v88 & 1) != 0)
  {
    if ((v91 & 0x20) != 0)
      v91 = *(_DWORD *)(v12 + 32);
    v92 = *(_DWORD *)(v84 + 12);
    v93 = (v91 >> 8) & *(_QWORD *)&v92;
    v94 = *(unsigned __int8 *)(v89 + v93);
    if (*(_BYTE *)(v89 + v93))
    {
      v95 = v89 + v90;
      v96 = 1;
      while (1)
      {
        v97 = *(_QWORD *)(v95 + 8 * (v94 - 1));
        if (v12 == (v97 & 0xFFFFFFFFFFFFLL))
          break;
        v93 = ((_DWORD)v93 + v96) & v92;
        v94 = *(unsigned __int8 *)(v89 + v93);
        ++v96;
        if (!*(_BYTE *)(v89 + v93))
          goto LABEL_164;
      }
      a6 = (v97 >> 16) & 0xFF00000000 | HIBYTE(v97);
      goto LABEL_161;
    }
    goto LABEL_164;
  }
  if ((v91 & 0x20) != 0)
    v91 = *(_DWORD *)(v12 + 32);
  v98 = *(_DWORD *)(v84 + 12);
  v99 = v98 & (v91 >> 8);
  v100 = *(_DWORD *)(v89 + 4 * v99);
  if (!v100)
    goto LABEL_164;
  v101 = v89 + 4 * v90;
  v102 = 1;
  while (1)
  {
    v103 = (v100 - 1);
    if (v12 == *(_QWORD *)(v101 + 16 * v103))
      break;
    v99 = (v99 + v102) & v98;
    v100 = *(_DWORD *)(v89 + 4 * v99);
    ++v102;
    if (!v100)
      goto LABEL_164;
  }
  a6 = *(unsigned int *)(v101 + 16 * v103 + 8) | ((unint64_t)*(unsigned __int8 *)(v101 + 16 * v103 + 12) << 32);
LABEL_161:
  if ((_DWORD)a6 == -1)
  {
LABEL_164:
    if ((*(_BYTE *)(v15 + 6) & 0x20) != 0)
    {
      v106 = v53;
      v196 = a3;
      v199 = (JSC::VMTraps *)v82;
      v189 = v81;
      v107 = v83;
      OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v15, v53, v12, (uint64_t)&v204);
      a3 = v196;
      v82 = (char *)v199;
      v83 = v107;
      v81 = v189;
      v53 = v106;
      if ((OwnStaticPropertySlot & 1) != 0)
        goto LABEL_71;
    }
    goto LABEL_165;
  }
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v141 = v15 + 16;
    v142 = a6 << 32;
  }
  else
  {
    v141 = *(_QWORD *)(v15 + 8) - 8;
    v142 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v141 + (v142 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_263:
    v204 = (uint64_t (*)(unint64_t))a4;
    v208 = (_DWORD *)v15;
    goto LABEL_53;
  }
  v143 = *(unsigned __int8 *)(a4 + 5);
  if (v143 == 5)
  {
    v52 = (unsigned int *)v15;
    goto LABEL_70;
  }
  if (v143 != 6)
    goto LABEL_263;
  v63 = *(_DWORD *)(a3 + 16) & 3;
  v144 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v204 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v205 = v144;
    LODWORD(v206) = HIDWORD(a6);
    v208 = (_DWORD *)v15;
    goto LABEL_265;
  }
  v66 = *(int8x16_t ***)(a4 + 24);
  v65 = *(_QWORD *)(a4 + 32);
  v204 = *(uint64_t (**)(unint64_t))(a4 + 8);
  v205 = v144;
  LODWORD(v206) = HIDWORD(a6);
  v208 = (_DWORD *)v15;
LABEL_96:
  BYTE1(v210) = 3;
  v46 = 1;
  if (v63 != 2)
    LOBYTE(v210) = 1;
  HIBYTE(v210) = 1;
  v214 = v66;
  v215 = v65;
LABEL_72:
  if (*(_DWORD *)(v11 + 80))
  {
    v73 = *(_DWORD *)(v11 + 80);
    if ((v73 & 0x27) != 0 && (v73 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      v74 = 0;
    else
      v74 = v46;
    if ((v74 & 1) == 0)
      goto LABEL_111;
LABEL_74:
    if (v211)
    {
      result = JSC::JSObject::get((unsigned int *)a1, (uint64_t)a2, *v8, a4, a5, a6, a7, a8);
    }
    else if (BYTE1(v210) == 1)
    {
      result = (uint64_t)v204;
    }
    else if (BYTE1(v210) == 2)
    {
      result = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v204, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v55 = (WTF::StringImpl *)*v8;
      v56 = (unint64_t)v208;
      v57 = *(_QWORD *)(16 * (*v208 & 0xFFFFFFFE) + 0x28);
      if ((v206 & 0x20) != 0)
        v56 = (unint64_t)v207;
      if (HIBYTE(v210) != 1)
        goto LABEL_93;
      if ((v56 & 0xFFFE000000000002) != 0)
        goto LABEL_277;
      v58 = *(unsigned int *)(16 * (*(_DWORD *)v56 & 0xFFFFFFFE) + 0x4C);
      v59 = *(_DWORD *)(16 * (*(_DWORD *)v56 & 0xFFFFFFFE) + 0x4C) != 0;
      v60 = 16 * v58;
      if ((_DWORD)v58)
        v61 = v214 == (int8x16_t **)v60;
      else
        v61 = 1;
      if (!v61)
      {
        do
        {
          v60 = *(_QWORD *)(v60 + 16);
          v59 = v60 != 0;
        }
        while ((int8x16_t **)v60 != v214 && v60 != 0);
      }
      if (!v59)
      {
LABEL_277:
        __dst = (JSC::VM *)*((_QWORD *)a2 + 7);
        result = JSC::throwDOMAttributeGetterTypeError(v57, &__dst, v214, v55);
      }
      else
      {
LABEL_93:
        result = v204(v57);
      }
    }
  }
  else
  {
    if (v46)
      goto LABEL_74;
LABEL_111:
    result = 0;
  }
  if (v213)
  {
    v75 = *(_DWORD *)(v212 + 4);
    if (!v75)
    {
      __break(0xC471u);
      JUMPOUT(0x19888B6E0);
    }
    *(_DWORD *)(v212 + 4) = v75 - 1;
  }
  return result;
}

unint64_t JSC::ErrorInstance::create(JSC::Heap **a1, unint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap **v8;
  JSC::Heap *v9;
  unint64_t v10;
  int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  JSC::Heap **v19;
  uint64_t v20;
  JSC::VM *v21;
  JSC::Heap **v22;
  JSC::Heap *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  JSC::Heap **v28;
  char v29;
  JSC::VM *v30;
  uint64_t SlowCase;
  unsigned int v32;

  v8 = a1;
  v9 = a1[5056];
  if (!v9)
  {
    v14 = a8;
    v15 = a6;
    v16 = a5;
    v17 = a4;
    v18 = a3;
    v19 = v8;
    v20 = a7;
    v21 = (JSC::VM *)a2;
    v9 = JSC::GCClient::Heap::errorInstanceSpaceSlow(v8 + 4694);
    a2 = (unint64_t)v21;
    a7 = v20;
    v8 = v19;
    a3 = v18;
    a4 = v17;
    a5 = v16;
    a6 = v15;
    a8 = v14;
  }
  v10 = *((_QWORD *)v9 + 3);
  if (v10 >= *((_QWORD *)v9 + 4))
  {
    v10 = *((_QWORD *)v9 + 5);
    if ((v10 & 1) != 0)
    {
      v22 = v8 + 24;
      v23 = v9;
      v32 = a8;
      v24 = a6;
      v25 = a5;
      v26 = a4;
      v27 = a3;
      v28 = v8;
      v29 = a7;
      v30 = (JSC::VM *)a2;
      JSC::sanitizeStackForVM((JSC *)v8, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v23, v22, 64, 0, 0);
      a2 = (unint64_t)v30;
      LOBYTE(a7) = v29;
      v8 = v28;
      a3 = v27;
      a4 = v26;
      a5 = v25;
      a6 = v24;
      a8 = v32;
      v10 = SlowCase;
      goto LABEL_5;
    }
    v13 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)v9 + 6);
    *((_QWORD *)v9 + 4) = v10 + HIDWORD(v13);
    *((_QWORD *)v9 + 5) = v10 + (int)v13;
  }
  *((_QWORD *)v9 + 3) = v10 + 64;
LABEL_5:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v10 = a2 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_WORD *)(v10 + 56) = 0;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_BYTE *)(v10 + 58) = a7;
  *(_BYTE *)(v10 + 59) = *(_BYTE *)(v10 + 59) & 0xE0 | 0x10;
  JSC::ErrorInstance::finishCreation(v10, (uint64_t)v8, a3, a4, a5, a6, a8, a8, (__n128)0);
  return v10;
}

int *JSC::callAggregateErrorConstructor(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t (*v16)(_QWORD *);
  _QWORD *v17;
  _QWORD v18[3];

  v10 = *(_QWORD *)(this + 56);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v12 = 10;
    v11 = 10;
  }
  else
  {
    v11 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) == 2)
    {
      v12 = 10;
    }
    else
    {
      v12 = *((_QWORD *)a2 + 7);
      if ((unint64_t)(*((int *)a2 + 8) - 1) >= 3)
      {
        v13 = *((_QWORD *)a2 + 8);
        goto LABEL_5;
      }
    }
  }
  v13 = 10;
LABEL_5:
  v14 = *(_QWORD *)(this + 208);
  if ((v14 & 1) != 0)
  {
    v16 = *(uint64_t (**)(_QWORD *))(v14 & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v17 = (_QWORD *)(this - 16);
    v18[0] = *v17;
    v18[1] = this;
    v18[2] = this + 208;
    v14 = v16(v18);
  }
  return JSC::createAggregateError(this, v10, (const WTF::String *)v14, v11, v12, v13, a8, a9, a4);
}

int *JSC::constructAggregateErrorConstructor(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  JSC::JSGlobalObject *v14;
  JSC::JSGlobalObject *i;
  char **v16;
  unint64_t v17;
  unint64_t v18;
  JSC::JSObject *SubclassStructure;
  const WTF::String *v20;
  int v22;
  int v23;
  uint64_t (*v24)(JSC::VM **);
  JSC::VM **v25;
  uint64_t (*v26)(JSC::VM **);
  JSC::VM **v27;
  unint64_t v28;
  JSC::VM *v29;
  unint64_t v30;
  char *v31;

  v10 = *(_QWORD *)(this + 56);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v12 = 10;
    v11 = 10;
  }
  else
  {
    v11 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) == 2)
    {
      v12 = 10;
    }
    else
    {
      v12 = *((_QWORD *)a2 + 7);
      if ((unint64_t)(*((int *)a2 + 8) - 1) >= 3)
      {
        v13 = *((_QWORD *)a2 + 8);
        goto LABEL_5;
      }
    }
  }
  v13 = 10;
LABEL_5:
  v14 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v14 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v20 = *(const WTF::String **)(this + 208);
    if ((v20 & 1) == 0)
      goto LABEL_19;
    v26 = *(uint64_t (**)(JSC::VM **))((unint64_t)v20 & 0xFFFFFFFFFFFFFFFCLL);
    v27 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v27 = (JSC::VM **)(this - 16);
    v29 = *v27;
    v30 = this;
    v31 = (char *)(this + 208);
    SubclassStructure = (JSC::JSObject *)v26(&v29);
  }
  else
  {
    v29 = *(JSC::VM **)(this + 56);
    for (i = v14; ; i = (JSC::JSGlobalObject *)*((_QWORD *)i + 2))
    {
      while (1)
      {
        v16 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v16 != &JSC::JSBoundFunction::s_info && v16 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v17 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_14;
      }
      if (*((_QWORD *)i + 3) == 2)
        break;
    }
    JSC::throwTypeError(this, &v29, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v17 = 0;
LABEL_14:
    if (*(_DWORD *)(v10 + 80))
    {
      v23 = *(_DWORD *)(v10 + 80);
      if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
      {
        v28 = v17;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = v28;
      }
      if (*(_QWORD *)(v10 + 16))
      {
        v20 = 0;
        goto LABEL_19;
      }
    }
    v18 = *(_QWORD *)(v17 + 208);
    if ((v18 & 1) != 0)
    {
      v24 = *(uint64_t (**)(JSC::VM **))(v18 & 0xFFFFFFFFFFFFFFFCLL);
      v25 = (JSC::VM **)(v17 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v17 & 8) != 0)
        v25 = (JSC::VM **)(v17 - 16);
      v29 = *v25;
      v30 = v17;
      v31 = (char *)(v17 + 208);
      v18 = v24(&v29);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v14, (JSC::JSObject *)v18, a4, a5, a6, a7, a8);
  }
  v20 = SubclassStructure;
  if (!*(_DWORD *)(v10 + 80))
    return JSC::createAggregateError(this, v10, v20, v11, v12, v13, a7, a8, a9);
LABEL_19:
  v22 = *(_DWORD *)(v10 + 80);
  if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
    return 0;
  else
    return JSC::createAggregateError(this, v10, v20, v11, v12, v13, a7, a8, a9);
}

uint64_t JSC::AggregateErrorConstructor::AggregateErrorConstructor(JSC::AggregateErrorConstructor *this, JSC::VM *a2, JSC::Structure *a3)
{
  return JSC::InternalFunction::InternalFunction((uint64_t)this, (uint64_t)a2, (unint64_t)a3, (uint64_t)JSC::callAggregateErrorConstructor, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructAggregateErrorConstructor);
}

void JSC::AggregateErrorConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  v6 = JSC::errorTypeName(7u);
  WTF::String::String((int **)&v28, (uint64_t)v6, v7);
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)2, (JSC::VM *)&v28, 1, v8, v9, v10);
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), a3, 14, v15, v16, v17, v18);
}

void JSC::JSObject::putDirectWithoutTransition(JSC::JSObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned __int8 v9;
  unint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  char v53;
  char v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t MoreOutOfLineStorage;
  uint64_t v67;
  int v68;
  __int16 v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  __int16 v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  _WORD *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;

  v9 = a5;
  v14 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  v15 = *(unsigned __int16 *)(v14 + 0x18);
  v97 = *(_DWORD *)a1;
  if (v15 == 65534)
    goto LABEL_5;
  if (v15 == 0xFFFF)
    v15 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
  if (v15 < 64)
  {
LABEL_5:
    v16 = 0;
  }
  else
  {
    v49 = (v15 - 64) | ((v15 - 64) >> 1) | (((v15 - 64) | ((v15 - 64) >> 1)) >> 2);
    v50 = v49 | (v49 >> 4) | ((v49 | (v49 >> 4)) >> 8);
    v51 = v50 | HIWORD(v50);
    if ((v15 - 63) >= 5)
      v16 = v51 + 1;
    else
      v16 = 4;
  }
  v17 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v17)
  {
    JSC::Structure::materializePropertyTable((JSC::Structure *)v14, (JSC::VM *)a2, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    v17 = v18;
  }
  v19 = (unsigned __int8 *)(v14 + 15);
  if (__ldaxr((unsigned __int8 *)(v14 + 15)))
  {
    __clrex();
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v14 + 15);
    goto LABEL_11;
  }
  if (__stxr(1u, v19))
    goto LABEL_10;
LABEL_11:
  ++*(_DWORD *)(a2 + 916);
  *(_DWORD *)(v14 + 16) |= 4u;
  if (v17)
  {
    *(_QWORD *)(v14 + 88) = v17;
    if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(v14 + 7))
      JSC::Heap::writeBarrierSlowPath(a2 + 192, v14);
  }
  else
  {
    *(_QWORD *)(v14 + 88) = 0;
  }
  v21 = *(_QWORD *)(v14 + 64);
  if (v21 && *(_BYTE *)(v21 + 5) != 1)
    *(_DWORD *)(v21 + 80) = 0;
  else
    *(_QWORD *)(v14 + 64) = 0;
  v22 = *(unsigned int *)(v14 + 72);
  *(_DWORD *)(v14 + 72) = 0;
  if ((_DWORD)v22)
  {
    v23 = (WTF::StringImpl *)(16 * v22);
    v24 = *(_DWORD *)(16 * v22) - 2;
    if (v24)
    {
      *(_DWORD *)v23 = v24;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v23, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
  }
  if ((v9 & 4) != 0)
  {
    v25 = *(_DWORD *)(v14 + 16) & 0xFFFFFF9F | 0x40;
LABEL_22:
    *(_DWORD *)(v14 + 16) = v25;
    goto LABEL_23;
  }
  if (a3 && (*(_BYTE *)(a3 + 16) & 0x20) != 0)
  {
    v25 = *(_DWORD *)(v14 + 16) & 0xFFFFFFDF;
    goto LABEL_22;
  }
LABEL_23:
  if ((v9 & 8) != 0)
  {
    v78 = *(_DWORD *)(v14 + 16);
    *(_DWORD *)(v14 + 16) = v78 | 0x40000000;
    if ((v9 & 0x72) != 0)
      *(_DWORD *)(v14 + 16) = v78 | 0xC0000000;
  }
  if (*(_QWORD *)(*(_QWORD *)(a2 + 41952) + 16) == a3)
    *(_DWORD *)(v14 + 16) |= 0x20000000u;
  v26 = *(unsigned __int8 *)(v14 + 14);
  v27 = *(_QWORD *)(v17 + 32);
  if (v27 && (v92 = *(unsigned int *)(v27 + 12), (_DWORD)v92))
  {
    v32 = *(_DWORD *)(*(_QWORD *)v27 + 4 * v92 - 4);
    *(_DWORD *)(v27 + 12) = v92 - 1;
  }
  else
  {
    v28 = *(_DWORD *)(v17 + 24);
    v29 = __OFSUB__(v28, v26);
    v30 = v28 - v26;
    v53 = (v30 < 0) ^ v29;
    v31 = v30 + 64;
    if (v53)
      v32 = *(_DWORD *)(v17 + 24);
    else
      v32 = v31;
  }
  v33 = *(_DWORD *)(a3 + 16);
  v34 = v33;
  if ((v33 & 0x20) != 0)
    v34 = *(_DWORD *)(a3 + 32);
  v35 = *(_DWORD *)(v14 + 28) ^ (v34 >> 8);
  v36 = *(_DWORD *)(v14 + 32) | (a3 >> 4);
  *(_DWORD *)(v14 + 28) = v35;
  *(_DWORD *)(v14 + 32) = v36;
  v37 = *(_QWORD *)(v17 + 16);
  v38 = v37 & 0xFFFFFFFFFFFFFFFELL;
  v39 = *(unsigned int *)(v17 + 8);
  if ((v37 & 1) != 0)
  {
    if ((v33 & 0x20) != 0)
      v33 = *(_DWORD *)(a3 + 32);
    v40 = *(_DWORD *)(v17 + 12);
    v41 = (v33 >> 8) & *(_QWORD *)&v40;
    v42 = *(unsigned __int8 *)(v38 + v41);
    if (*(_BYTE *)(v38 + v41))
    {
      v43 = 1;
      while (a3 != (*(_QWORD *)(v38 + v39 + 8 * (v42 - 1)) & 0xFFFFFFFFFFFFLL))
      {
        v41 = ((_DWORD)v41 + v43) & v40;
        v42 = *(unsigned __int8 *)(v38 + v41);
        ++v43;
        if (!*(_BYTE *)(v38 + v41))
          goto LABEL_53;
      }
      goto LABEL_64;
    }
LABEL_53:
    *(_DWORD *)a3 += 2;
    v52 = *(_DWORD *)(v17 + 24);
    v53 = (v37 & 1) == 0 || v32 < 256;
    if (v53)
      v54 = 1;
    else
      v54 = 0;
    if (*(_DWORD *)(v17 + 28) + v52 >= v39 >> 1 || (v54 & 1) == 0)
    {
      JSC::PropertyTable::rehash((JSC::PropertyTable *)v17, (JSC::VM *)a2, (v52 + 1), v32 < 256, a5, a6, a7, a8);
      v37 = *(_QWORD *)(v17 + 16);
      v38 = v37 & 0xFFFFFFFFFFFFFFFELL;
      v82 = *(unsigned int *)(v17 + 8);
      v83 = *(_DWORD *)(a3 + 16);
      if ((v37 & 1) != 0)
      {
        if ((v83 & 0x20) != 0)
          v83 = *(_DWORD *)(a3 + 32);
        v84 = *(_DWORD *)(v17 + 12);
        v41 = (v83 >> 8) & *(_QWORD *)&v84;
        v85 = *(unsigned __int8 *)(v38 + v41);
        if (*(_BYTE *)(v38 + v41))
        {
          v86 = v38 + v82;
          v87 = 1;
          do
          {
            if (a3 == (*(_QWORD *)(v86 + 8 * (v85 - 1)) & 0xFFFFFFFFFFFFLL))
              break;
            v41 = ((_DWORD)v41 + v87) & v84;
            v85 = *(unsigned __int8 *)(v38 + v41);
            ++v87;
          }
          while (*(_BYTE *)(v38 + v41));
        }
      }
      else
      {
        if ((v83 & 0x20) != 0)
          v83 = *(_DWORD *)(a3 + 32);
        v88 = *(_DWORD *)(v17 + 12);
        LODWORD(v41) = v88 & (v83 >> 8);
        v89 = *(_DWORD *)(v38 + 4 * v41);
        if (v89)
        {
          v90 = v38 + 4 * v82;
          v91 = 1;
          do
          {
            if (*(_QWORD *)(v90 + 16 * (v89 - 1)) == a3)
              break;
            LODWORD(v41) = (v41 + v91) & v88;
            v89 = *(_DWORD *)(v38 + 4 * v41);
            ++v91;
          }
          while (v89);
        }
      }
    }
    v55 = *(_DWORD *)(v17 + 28) + *(_DWORD *)(v17 + 24);
    v56 = v55 + 1;
    if ((v37 & 1) != 0)
    {
      *(_BYTE *)(v38 + v41) = v56;
      *(_QWORD *)(v38 + *(unsigned int *)(v17 + 8) + 8 * v55) = a3 | ((unint64_t)(v9 | (v32 << 8)) << 48);
    }
    else
    {
      *(_DWORD *)(v38 + 4 * v41) = v56;
      v65 = v38 + 4 * *(unsigned int *)(v17 + 8) + 16 * v55;
      *(_QWORD *)v65 = a3;
      *(_DWORD *)(v65 + 8) = v32;
      *(_BYTE *)(v65 + 12) = v9;
    }
    ++*(_DWORD *)(v17 + 24);
    goto LABEL_64;
  }
  if ((v33 & 0x20) != 0)
    v33 = *(_DWORD *)(a3 + 32);
  v44 = *(_DWORD *)(v17 + 12);
  LODWORD(v41) = v44 & (v33 >> 8);
  v45 = *(_DWORD *)(v38 + 4 * v41);
  if (!v45)
    goto LABEL_53;
  v46 = v38 + 4 * v39;
  v47 = 1;
  while (1)
  {
    v48 = (v45 - 1);
    if (*(_QWORD *)(v46 + 16 * v48) == a3)
      break;
    LODWORD(v41) = (v41 + v47) & v44;
    v45 = *(_DWORD *)(v38 + 4 * v41);
    ++v47;
    if (!v45)
      goto LABEL_53;
  }
  if (*(_DWORD *)(v46 + 16 * v48 + 8) == -1)
    goto LABEL_53;
LABEL_64:
  v57 = *(unsigned __int16 *)(v14 + 24);
  if (v57 == 65534)
  {
    v58 = -1;
  }
  else if (v57 == 0xFFFF)
  {
    v58 = *(_DWORD *)(*(_QWORD *)(v14 + 64) + 84);
  }
  else
  {
    v58 = *(unsigned __int16 *)(v14 + 24);
  }
  if (v32 <= v58)
    v59 = v58;
  else
    v59 = v32;
  if (v59 >= 64)
  {
    if ((v59 - 63) >= 5)
    {
      v79 = (v59 - 64) | ((v59 - 64) >> 1) | (((v59 - 64) | ((v59 - 64) >> 1)) >> 2);
      v80 = v79 | (v79 >> 4) | ((v79 | (v79 >> 4)) >> 8);
      v60 = (v80 | HIWORD(v80)) + 1;
    }
    else
    {
      v60 = 4;
    }
  }
  else
  {
    v60 = 0;
  }
  if (v60 != v16)
  {
    MoreOutOfLineStorage = JSC::JSObject::allocateMoreOutOfLineStorage(a1, (JSC::VM *)a2, v16, v60, a5, a6, a7, a8, a9);
    v67 = a2 + 192;
    if (*(_BYTE *)(a2 + 755))
    {
      v68 = v97;
      *(_DWORD *)a1 = v97 | 1;
      __dmb(0xAu);
      *((_QWORD *)a1 + 1) = MoreOutOfLineStorage;
      if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
        JSC::Heap::writeBarrierSlowPath(v67, (unint64_t)a1);
      __dmb(0xAu);
    }
    else
    {
      *((_QWORD *)a1 + 1) = MoreOutOfLineStorage;
      v68 = v97;
      if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
        JSC::Heap::writeBarrierSlowPath(v67, (unint64_t)a1);
    }
    if (v59 == -1)
    {
      v81 = -2;
    }
    else
    {
      if (v59 <= 65533)
      {
        *(_WORD *)(v14 + 24) = v59;
LABEL_105:
        __dmb(0xAu);
        *(_DWORD *)a1 = v68;
        goto LABEL_76;
      }
      v96 = *(_QWORD *)(v14 + 64);
      if (*(__int16 *)(v14 + 24) == -1)
      {
        *(_DWORD *)(v96 + 84) = v59;
        goto LABEL_105;
      }
      if (!v96 || *(_BYTE *)(v96 + 5) == 1)
      {
        JSC::Structure::allocateRareData((JSC::Structure *)v14, (JSC::VM *)a2, (JSC::Structure *)a3, a4, a5, a6, a7, a8);
        v96 = *(_QWORD *)(v14 + 64);
      }
      *(_DWORD *)(v96 + 84) = v59;
      __dmb(0xAu);
      v81 = -1;
    }
    *(_WORD *)(v14 + 24) = v81;
    goto LABEL_105;
  }
  if (v59 == -1)
  {
    v69 = -2;
LABEL_107:
    *(_WORD *)(v14 + 24) = v69;
    goto LABEL_76;
  }
  if (v59 <= 65533)
  {
    *(_WORD *)(v14 + 24) = v59;
    goto LABEL_76;
  }
  v95 = *(_QWORD *)(v14 + 64);
  if (v57 != 0xFFFF)
  {
    if (!v95 || *(_BYTE *)(v95 + 5) == 1)
    {
      JSC::Structure::allocateRareData((JSC::Structure *)v14, (JSC::VM *)a2, (JSC::Structure *)a3, a4, a5, a6, a7, a8);
      v95 = *(_QWORD *)(v14 + 64);
    }
    *(_DWORD *)(v95 + 84) = v59;
    __dmb(0xAu);
    v69 = -1;
    goto LABEL_107;
  }
  *(_DWORD *)(v95 + 84) = v59;
LABEL_76:
  v61 = __ldxr(v19);
  if (v61 != 1)
  {
    __clrex();
    goto LABEL_80;
  }
  if (__stlxr(0, v19))
LABEL_80:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v14 + 15), 0, a3, a4, a5, a6, a7, a8);
  v62 = *(_DWORD *)(a2 + 916) - 1;
  *(_DWORD *)(a2 + 916) = v62;
  if (*(unsigned __int8 *)(a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v63 = v62 == 0;
  else
    v63 = 0;
  if (v63)
  {
    *(_BYTE *)(a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(a2 + 192, 0);
  }
  if ((*(_BYTE *)((16 * *(unsigned int *)a1) | 0x12) & 8) != 0)
  {
    v93 = *(_WORD **)(a2 + 93080);
    if (v93)
    {
      if ((v93 & 1) == 0)
      {
        v94 = (unsigned __int16)v93[66560]++ + 1;
        if ((v94 & 0x10000) != 0)
          JSC::MegamorphicCache::clearEntries(v93);
      }
    }
  }
  if (v32 <= 63)
  {
    v64 = (uint64_t)a1 + 16;
  }
  else
  {
    v64 = *((_QWORD *)a1 + 1) - 8;
    v32 = 63 - v32;
  }
  *(_QWORD *)(v64 + 8 * v32) = a4;
  if (a4 && (a4 & 0xFFFE000000000002) == 0 && *(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
    JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
  if ((v9 & 2) != 0)
    *(_DWORD *)(v14 + 16) |= 0x10u;
}

uint64_t JSC::AggregateErrorPrototype::AggregateErrorPrototype(uint64_t result, uint64_t a2, unint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v3;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

void JSC::AggregateErrorPrototype::finishCreation(JSC::AggregateErrorPrototype *this, JSC::VM *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  v4 = JSC::errorTypeName(7u);
  WTF::String::String((int **)&v27, (uint64_t)v4, v5);
  JSC::ErrorPrototypeBase::finishCreation(this, a2, (const WTF::String *)&v27, v6, v7, v8, v9, v10);
  v18 = v27;
  v27 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
}

void JSC::MarkedVectorBase::markLists<JSC::SlotVisitor>(uint64_t a1, _QWORD **a2)
{
  uint64_t v3;
  unsigned int **v4;
  unsigned int **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  unint64_t v15;
  unint64_t v16;
  int v18;

  if (*a2)
    v3 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  else
    v3 = 0;
  v4 = (unsigned int **)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::begin(a2);
  if ((unsigned int **)v3 == v4)
    return;
  v12 = v4;
  v13 = v5;
  do
  {
    v14 = *v12;
    if (!**v12)
      goto LABEL_20;
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(*((_QWORD *)v14 + 1) + 8 * v15);
      if ((v16 & 0xFFFE000000000002) == 0 && v16 != 0)
      {
        if ((v16 & 8) != 0)
        {
          if ((*(_BYTE *)(v16 - 79) & 1) != 0)
            goto LABEL_15;
        }
        else
        {
          v18 = *(_DWORD *)(a1 + 132);
          if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v18)
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v18, v6, v7, v8, v9, v10, v11);
          if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
          {
LABEL_15:
            if (!*(_QWORD *)(a1 + 168))
              goto LABEL_16;
          }
        }
        JSC::SlotVisitor::appendSlow(a1, v16, 0, v7, v8, v9, v10, v11);
      }
LABEL_16:
      ++v15;
    }
    while (v15 < *v14);
LABEL_20:
    while (++v12 != v13)
    {
      if ((unint64_t)*v12 + 1 > 1)
        goto LABEL_24;
    }
    v12 = v13;
LABEL_24:
    ;
  }
  while (v12 != (unsigned int **)v3);
}

uint64_t JSC::ArgList::getSlice(uint64_t result, int a2, uint64_t a3)
{
  unsigned int v3;
  BOOL v4;
  unsigned int v5;

  if (a2 >= 1 && (v3 = *(_DWORD *)(result + 8), v4 = v3 >= a2, v5 = v3 - a2, v5 != 0 && v4))
  {
    *(_QWORD *)a3 = *(_QWORD *)result + 8 * a2;
    *(_DWORD *)(a3 + 8) = v5;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t JSC::MarkedVectorBase::slowEnsureCapacity(JSC::MarkedVectorBase *this, unint64_t a2)
{
  if (a2 >> 31)
    return 1;
  else
    return JSC::MarkedVectorBase::expandCapacity(this, a2);
}

uint64_t JSC::MarkedVectorBase::expandCapacity(JSC::MarkedVectorBase *this, unsigned int a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v18;
  uint64_t *v19;
  JSC::MarkedVectorBase *v20;
  uint64_t result;
  _QWORD v23[3];
  JSC::MarkedVectorBase *v24;

  WTF::tryFastMalloc((WTF *)(8 * a2), v23);
  v11 = v23[0];
  if (!v23[0])
    return 1;
  v12 = *(unsigned int *)this;
  if ((_DWORD)v12)
  {
    for (i = 0; i < v12; ++i)
    {
      v14 = *((_QWORD *)this + 1);
      *(_QWORD *)(v11 + 8 * i) = *(_QWORD *)(v14 + 8 * i);
      v15 = *(_QWORD *)(v14 + 8 * i);
      if (*((_QWORD *)this + 2))
        v16 = 0;
      else
        v16 = (v15 & 0xFFFE000000000002) == 0;
      if (v16 && v15 != 0)
      {
        v18 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v15 & 8) != 0)
          v18 = (_QWORD *)(v15 - 16);
        v19 = (uint64_t *)(*v18 + 560);
        *((_QWORD *)this + 2) = v19;
        v24 = this;
        WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v19, (uint64_t *)&v24, v6, v7, v8, v9, v10, (uint64_t)v23);
        v12 = *(unsigned int *)this;
      }
    }
  }
  v20 = (JSC::MarkedVectorBase *)*((_QWORD *)this + 1);
  if (v20 != (JSC::MarkedVectorBase *)((char *)this + 24) && v20 != 0)
    WTF::fastFree((unint64_t)v20, v4, v5, v6, v7, v8, v9, v10);
  result = 0;
  *((_QWORD *)this + 1) = v11;
  *((_DWORD *)this + 1) = a2;
  return result;
}

uint64_t JSC::MarkedVectorBase::slowAppend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  BOOL v11;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v10 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == *(_DWORD *)(a1 + 4))
  {
    if (v10 >> 30 || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)a1, 2 * v10))
      return 1;
    v10 = *(_DWORD *)a1;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) = a2;
  *(_DWORD *)a1 = v10 + 1;
  if (*(_QWORD *)(a1 + 16))
    v11 = 0;
  else
    v11 = (a2 & 0xFFFE000000000002) == 0;
  if (v11 && a2)
  {
    v13 = (_QWORD *)(a2 - 16);
    if ((a2 & 8) == 0)
      v13 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    v14 = (uint64_t *)(*v13 + 560);
    *(_QWORD *)(a1 + 16) = v14;
    v16 = a1;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v14, &v16, a4, a5, a6, a7, a8, (uint64_t)&v15);
  }
  return 0;
}

void JSC::ArrayBuffer::primitiveGigacageDestructor(uint64_t *a1@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  char v7;
  char **v8;
  char *v9;

  v3 = atomic_load(&JSC::ArrayBuffer::primitiveGigacageDestructor(void)::onceKey);
  if (v3 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&JSC::ArrayBuffer::primitiveGigacageDestructor(void)::onceKey, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::ArrayBuffer::primitiveGigacageDestructor(void)::$_0 &&>>);
  }
  v4 = JSC::ArrayBuffer::primitiveGigacageDestructor(void)::destructor;
  v5 = (unsigned int *)(JSC::ArrayBuffer::primitiveGigacageDestructor(void)::destructor + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *a1 = v4;
}

void JSC::ArrayBufferContents::tryAllocate(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  char **v21;
  char *v22;

  if (is_mul_ok(a2, a3)
    && (v9 = a2 * a3, v9 < 0x100000001)
    && (!v9 ? (v10 = 1) : (v10 = a2 * a3),
        (_DWORD)a4
      ? (v11 = Gigacage::tryMalloc(0, v10))
      : (v11 = Gigacage::tryZeroedMalloc(0, v10, a3, a4, a5, a6, a7, a8)),
        (*(_QWORD *)a1 = v11) != 0))
  {
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    *(_BYTE *)(a1 + 48) = 0;
    v12 = atomic_load(&JSC::ArrayBuffer::primitiveGigacageDestructor(void)::onceKey);
    if (v12 != -1)
    {
      v22 = &v20;
      v21 = &v22;
      std::__call_once(&JSC::ArrayBuffer::primitiveGigacageDestructor(void)::onceKey, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::ArrayBuffer::primitiveGigacageDestructor(void)::$_0 &&>>);
    }
    v13 = JSC::ArrayBuffer::primitiveGigacageDestructor(void)::destructor;
    v14 = (unsigned int *)(JSC::ArrayBuffer::primitiveGigacageDestructor(void)::destructor + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v16 = *(unsigned int **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v13;
    if (v16)
    {
      v17 = v16 + 2;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v16 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
      }
    }
  }
  else
  {
    JSC::ArrayBufferContents::reset((JSC::ArrayBufferContents *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::ArrayBufferContents::reset(JSC::ArrayBufferContents *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::BufferMemoryHandle *v27;

  v9 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      JSC::SharedArrayBufferContents::~SharedArrayBufferContents((JSC::SharedArrayBufferContents *)v13, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }
  v16 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      v27 = (JSC::BufferMemoryHandle *)v16;
      WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v27);
    }
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
}

unsigned int *JSC::ArrayBufferContents::makeShared(JSC::ArrayBufferContents *this)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *result;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v2 = (v2 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v3 = *((unsigned __int8 *)this + 48);
  if (*((_BYTE *)this + 48) && (v32 = *((_QWORD *)this + 2)) != 0)
  {
    v4 = atomic_load((unint64_t *)(v32 + 32));
    v3 = *((unsigned __int8 *)this + 48);
  }
  else
  {
    v4 = *((_QWORD *)this + 4);
  }
  v5 = v4;
  if (v3)
    v5 = *((_QWORD *)this + 5);
  v6 = (unsigned int *)*((_QWORD *)this + 3);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = v2;
  v16 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)(v15 + 16) = v16;
  *(_QWORD *)(v15 + 24) = v6;
  *(_QWORD *)(v15 + 32) = v4;
  *(_QWORD *)(v15 + 40) = v5;
  *(_BYTE *)(v15 + 48) = *(_BYTE *)(v15 + 48) & 0xFC | v3;
  v17 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v15;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      JSC::SharedArrayBufferContents::~SharedArrayBufferContents((JSC::SharedArrayBufferContents *)v17, v8, v9, v10, v11, v12, v13, v14);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
  }
  result = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    v21 = result + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void JSC::SharedArrayBufferContents::~SharedArrayBufferContents(JSC::SharedArrayBufferContents *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  JSC::BufferMemoryHandle **v22;
  JSC::BufferMemoryHandle *v23;

  v9 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
  if (v9 != -1)
  {
    v23 = (JSC::BufferMemoryHandle *)&v21;
    v22 = &v23;
    std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
  }
  v10 = *((_QWORD *)this + 1);
  if (v10 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v10 = (v10 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v11 = atomic_load((unint64_t *)this + 4);
  JSC::WaiterListManager::unregister((JSC::WaiterListManager *)&JSC::WaiterListManager::singleton(void)::manager, (unsigned __int8 *)v10, v11, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 2);
  if (v12)
  {
    v13 = *((_QWORD *)this + 1);
    if (v13 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v13 = (v13 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v13);
  }
  v14 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      v23 = (JSC::BufferMemoryHandle *)v14;
      WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v23);
    }
  }
  v17 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
    }
  }
}

void JSC::ArrayBufferContents::shareWith(JSC::ArrayBufferContents *this, JSC::ArrayBufferContents *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::BufferMemoryHandle *v34;

  v10 = *(_QWORD *)this;
  v11 = (unsigned int *)*((_QWORD *)a2 + 1);
  *(_QWORD *)a2 = v10;
  *((_QWORD *)a2 + 1) = 0;
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  v15 = (unsigned int *)*((_QWORD *)this + 2);
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  v17 = (unsigned int *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v15;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      JSC::SharedArrayBufferContents::~SharedArrayBufferContents((JSC::SharedArrayBufferContents *)v17, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
  }
  v20 = (unsigned int *)*((_QWORD *)this + 3);
  if (v20)
  {
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  v22 = (unsigned int *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v20;
  if (v22)
  {
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      v34 = (JSC::BufferMemoryHandle *)v22;
      WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v34);
    }
  }
  v25 = *((_OWORD *)this + 2);
  *((_OWORD *)a2 + 2) = v25;
  *((_BYTE *)a2 + 48) = *((_BYTE *)this + 48);
  if ((unint64_t)v25 >= 0x100000001)
    __break(0xC471u);
}

void JSC::ArrayBuffer::create(JSC::ArrayBuffer *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, _QWORD *a6@<X8>)
{
  uint64_t v7;

  JSC::ArrayBuffer::tryCreate((unint64_t)this, a2, 0, 0, 0, a3, a4, a5, &v7);
  if (v7)
    *a6 = v7;
  else
    __break(0xC471u);
}

void JSC::ArrayBuffer::tryCreate(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  JSC::ArrayBuffer::tryCreate(a1, a2, a3, a4, 0, a5, a6, a7, a8);
}

void JSC::ArrayBuffer::create(JSC::ArrayBuffer *this@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *((_QWORD *)this + 2);
  if (v9 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v9 = (v9 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  if (*((_BYTE *)this + 64) && (v11 = *((_QWORD *)this + 4)) != 0)
    v10 = *(_QWORD *)(v11 + 32);
  else
    v10 = *((_QWORD *)this + 6);
  JSC::ArrayBuffer::tryCreate((const void *)v9, v10, a2, a3, a4, a5, &v12);
  if (v12)
    *a6 = v12;
  else
    __break(0xC471u);
}

void JSC::ArrayBuffer::create(const void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, _QWORD *a7@<X8>)
{
  uint64_t v8;

  JSC::ArrayBuffer::tryCreate(a1, a2, a3, a4, a5, a6, &v8);
  if (v8)
    *a7 = v8;
  else
    __break(0xC471u);
}

void JSC::ArrayBuffer::tryCreate(const void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t *a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;

  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  JSC::ArrayBufferContents::tryAllocate((uint64_t)&v20, a2, 1, 1, a3, a4, a5, a6);
  if ((_QWORD)v20
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    v17 = WTF::fastMalloc((WTF *)0x60);
    v18 = v17;
    *(_DWORD *)v17 = 2;
    *(_QWORD *)(v17 + 8) = 0;
    *(_OWORD *)(v17 + 16) = v20;
    *(_OWORD *)(v17 + 32) = v21;
    v20 = 0u;
    v21 = 0u;
    *(_OWORD *)(v17 + 48) = v22;
    v22 = 0u;
    *(_BYTE *)(v17 + 64) = v23;
    v23 = 0;
    *(_QWORD *)(v17 + 72) = 3;
    *(_QWORD *)(v17 + 80) = 0;
    *(_QWORD *)(v17 + 86) = 0;
    if (a2)
    {
      v19 = *(_QWORD *)(v17 + 16);
      if (v19 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      memcpy((void *)v19, a1, a2);
    }
  }
  else
  {
    v18 = 0;
  }
  *a7 = v18;
  JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)&v20, v10, v11, v12, v13, v14, v15, v16);
}

double JSC::ArrayBuffer::create@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v4 = 2;
  result = 0.0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 49) = 0u;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  v6 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(v4 + 40);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 48) = v9;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = 0;
  v10 = *(_QWORD *)(v4 + 56);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(v4 + 64) = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(v4 + 72) = 3;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 86) = 0;
  *a2 = v4;
  return result;
}

unsigned int *JSC::ArrayBuffer::createAdopted@<X0>(Gigacage *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  unsigned int **v15;
  unsigned int *v16;

  v6 = atomic_load(&JSC::ArrayBuffer::primitiveGigacageDestructor(void)::onceKey);
  if (v6 != -1)
  {
    v16 = (unsigned int *)&v14;
    v15 = &v16;
    std::__call_once(&JSC::ArrayBuffer::primitiveGigacageDestructor(void)::onceKey, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::ArrayBuffer::primitiveGigacageDestructor(void)::$_0 &&>>);
  }
  v7 = JSC::ArrayBuffer::primitiveGigacageDestructor(void)::destructor;
  v8 = (unsigned int *)(JSC::ArrayBuffer::primitiveGigacageDestructor(void)::destructor + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v16 = (unsigned int *)v7;
  JSC::ArrayBuffer::createFromBytes(a1, a2, &v16, a3);
  result = v16;
  v16 = 0;
  if (result)
  {
    v11 = result + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void JSC::ArrayBuffer::createFromBytes(Gigacage *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD v17[3];
  char v18;

  if (a1
    && qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && (Gigacage *)(((unint64_t)a1 & 0x3FFFFFFFFLL) + qword_1ECF4C038) != a1)
  {
    v16 = a3;
    Gigacage::disablePrimitiveGigacage(a1);
    a3 = v16;
  }
  v7 = *a3;
  *a3 = 0;
  if (a2 >= 0x100000001)
  {
    __break(0xC471u);
    JUMPOUT(0x19888E010);
  }
  v8 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v8 = 2;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = v7;
  *(_OWORD *)(v8 + 32) = 0u;
  memset(v17, 0, 32);
  *(_QWORD *)(v8 + 48) = a2;
  *(_QWORD *)(v8 + 56) = a2;
  v17[2] = 0u;
  *(_BYTE *)(v8 + 64) = 0;
  v18 = 0;
  *(_QWORD *)(v8 + 72) = 3;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 86) = 0;
  *a4 = v8;
  JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)v17, v9, v10, v11, v12, v13, v14, v15);
}

void JSC::ArrayBuffer::createShared(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  unint64_t v19;
  char v20;

  v15[0] = 0;
  v15[1] = 0;
  v2 = *a1;
  *a1 = 0;
  v16 = v2;
  v3 = *(unsigned int **)(v2 + 24);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v2 = v16;
  }
  v17 = v3;
  v5 = atomic_load((unint64_t *)(v2 + 32));
  v18 = v5;
  v20 = 0;
  if (v5 >= 0x100000001)
  {
    __break(0xC471u);
    JUMPOUT(0x19888E114);
  }
  v6 = *(_BYTE *)(v16 + 48);
  if ((v6 & 2) == 0)
  {
    v20 = v6 & 1;
    if ((v6 & 1) != 0)
      v5 = *(_QWORD *)(v16 + 40);
  }
  v19 = v5;
  v7 = *(_QWORD *)(v16 + 8);
  if (v7 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v7 = (v7 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v15[0] = v7;
  JSC::ArrayBuffer::create((uint64_t)v15, a2);
  JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)v15, v8, v9, v10, v11, v12, v13, v14);
}

void JSC::ArrayBuffer::tryCreate(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t casual;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  JSC::SharedArrayBufferContents *v54;
  JSC::ArrayBuffer *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v71;
  JSC::SharedArrayBufferContents *v72[2];
  __int128 v73;
  char v74;
  char v75;
  JSC::BufferMemoryHandle **v76;
  JSC::BufferMemoryHandle *v77;

  if ((_BYTE)a4)
  {
    if (is_mul_ok(a1, a2)
      && (v53 = a1 * a2, v53 < 0x100000001)
      && a3 <= 0x100000000
      && v53 <= a3)
    {
      JSC::tryAllocateResizableMemory((JSC *)&v77, 0, v53, a3);
      v54 = v77;
      if (v77)
      {
        v71 = (unint64_t)JSC::BufferMemoryHandle::memory(v77);
        v72[0] = 0;
        v72[1] = v54;
        *(_QWORD *)&v73 = v53;
        *((_QWORD *)&v73 + 1) = a3;
        v74 = 1;
        JSC::ArrayBuffer::create((uint64_t)&v71, (uint64_t *)&v76);
        v55 = (JSC::ArrayBuffer *)v76;
        v76 = 0;
        WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((JSC::ArrayBuffer **)&v76, v56, v57, v58, v59, v60, v61, v62);
        JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)&v71, v63, v64, v65, v66, v67, v68, v69);
      }
      else
      {
        v55 = 0;
      }
      *a9 = v55;
    }
    else
    {
      *a9 = 0;
    }
    return;
  }
  v74 = 0;
  *(_OWORD *)v72 = 0u;
  v73 = 0u;
  v71 = 0u;
  if (is_mul_ok(a1, a2)
    && (v10 = a1 * a2, v10 < 0x100000001)
    && (!v10 ? (v11 = 1) : (v11 = a1 * a2),
        (_DWORD)a5
      ? (v12 = Gigacage::tryMalloc(0, v11))
      : (v12 = Gigacage::tryZeroedMalloc(0, v11, a3, a4, a5, a6, a7, a8)),
        (*(_QWORD *)&v71 = v12) != 0))
  {
    *(_QWORD *)&v73 = v10;
    *((_QWORD *)&v73 + 1) = v10;
    v74 = 0;
    v13 = atomic_load(&JSC::ArrayBuffer::primitiveGigacageDestructor(void)::onceKey);
    if (v13 != -1)
    {
      v77 = (JSC::BufferMemoryHandle *)&v75;
      v76 = &v77;
      std::__call_once(&JSC::ArrayBuffer::primitiveGigacageDestructor(void)::onceKey, &v76, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::ArrayBuffer::primitiveGigacageDestructor(void)::$_0 &&>>);
    }
    v14 = JSC::ArrayBuffer::primitiveGigacageDestructor(void)::destructor;
    v15 = (unsigned int *)(JSC::ArrayBuffer::primitiveGigacageDestructor(void)::destructor + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v17 = (unsigned int *)*((_QWORD *)&v71 + 1);
    *((_QWORD *)&v71 + 1) = v14;
    if (v17)
    {
      v18 = v17 + 2;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v17 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
      }
    }
  }
  else
  {
    JSC::ArrayBufferContents::reset((JSC::ArrayBufferContents *)&v71, a2, a3, a4, a5, a6, a7, a8);
  }
  v21 = v71;
  if (!(_QWORD)v71
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v71 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    casual = 0;
    goto LABEL_29;
  }
  v22 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v22)
    goto LABEL_55;
  v23 = (_BYTE *)(v22 + 9224);
  *(_BYTE *)(v22 + 9224) = 1;
  v24 = *(unsigned int *)(v22 + 9240);
  if (!(_DWORD)v24)
  {
    v36 = *(_QWORD *)(v22 + 9264);
    v37 = *(_QWORD *)(v22 + 9248);
    if (v36)
    {
LABEL_46:
      v38 = __clz(v36);
      *(_QWORD *)(v22 + 9264) = v36 & ~(0x8000000000000000 >> v38);
      casual = v37 + 16 * v38;
      goto LABEL_27;
    }
    if (*(_BYTE *)(v22 + 9229) == 6)
    {
      v47 = *(_DWORD *)(v22 + 9260);
      v48 = *(unsigned int *)(v22 + 9256);
      if (v48 < v47)
      {
        *(_QWORD *)&v23[8 * v48 + 56] = 0;
        v49 = (unint64_t *)(v22 + 8 * v48 + 9288);
        v50 = v47 - 1 - v48;
        while (v50)
        {
          v37 += 1024;
          v52 = *v49++;
          v51 = v52;
          LODWORD(v48) = v48 + 1;
          --v50;
          if (v52)
          {
            v36 = __rbit64(v51);
            *(_DWORD *)(v22 + 9256) = v48;
            *(_QWORD *)(v22 + 9248) = v37;
            goto LABEL_46;
          }
        }
        *(_DWORD *)(v22 + 9256) = v47;
      }
    }
    *v23 = 0;
LABEL_55:
    casual = bmalloc_allocate_casual(96, 1);
    goto LABEL_28;
  }
  *(_DWORD *)(v22 + 9240) = v24 - *(_DWORD *)(v22 + 9244);
  casual = *(_QWORD *)(v22 + 9232) - v24;
LABEL_27:
  *v23 = 0;
LABEL_28:
  v21 = 0;
  *(_DWORD *)casual = 2;
  *(_QWORD *)(casual + 8) = 0;
  *(_OWORD *)(casual + 16) = v71;
  *(_OWORD *)(casual + 32) = *(_OWORD *)v72;
  v71 = 0u;
  *(_OWORD *)v72 = 0u;
  *(_OWORD *)(casual + 48) = v73;
  v73 = 0u;
  *(_BYTE *)(casual + 64) = v74;
  v74 = 0;
  *(_QWORD *)(casual + 72) = 3;
  *(_QWORD *)(casual + 80) = 0;
  *(_QWORD *)(casual + 86) = 0;
LABEL_29:
  *a9 = casual;
  if (*((_QWORD *)&v71 + 1))
    (*(void (**)(void))(**((_QWORD **)&v71 + 1) + 16))();
  v26 = (unsigned int *)v72[1];
  v72[1] = 0;
  if (v26)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      v77 = (JSC::BufferMemoryHandle *)v26;
      WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v77);
    }
  }
  v29 = (unsigned int *)v72[0];
  v72[0] = 0;
  if (v29)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      JSC::SharedArrayBufferContents::~SharedArrayBufferContents((JSC::SharedArrayBufferContents *)v29, v21, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
  }
  v32 = (unsigned int *)*((_QWORD *)&v71 + 1);
  *((_QWORD *)&v71 + 1) = 0;
  if (v32)
  {
    v33 = v32 + 2;
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v32 + 2);
      (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v32 + 8))(v32, v21);
    }
  }
}

void JSC::ArrayBuffer::tryCreate(JSC::ArrayBuffer *this@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t *a6@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v8 = *((_QWORD *)this + 2);
  if (v8 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v8 = (v8 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  if (*((_BYTE *)this + 64) && (v10 = *((_QWORD *)this + 4)) != 0)
    v9 = *(_QWORD *)(v10 + 32);
  else
    v9 = *((_QWORD *)this + 6);
  JSC::ArrayBuffer::tryCreate((const void *)v8, v9, a2, a3, a4, a5, a6);
}

JSC::ArrayBuffer **WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(JSC::ArrayBuffer **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ArrayBuffer **v8;
  JSC::ArrayBuffer *v9;
  BOOL v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::ArrayBuffer **v20;

  v8 = a1;
  v9 = *a1;
  *v8 = 0;
  if (v9)
  {
    v11 = *(_DWORD *)v9 == 2;
    *(_DWORD *)v9 -= 2;
    if (v11)
    {
      v20 = v8;
      JSC::ArrayBuffer::~ArrayBuffer(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
      return v20;
    }
  }
  return v8;
}

void JSC::ArrayBuffer::createUninitialized(JSC::ArrayBuffer *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, _QWORD *a6@<X8>)
{
  uint64_t v7;

  JSC::ArrayBuffer::tryCreate((unint64_t)this, a2, 0, 0, 1, a3, a4, a5, &v7);
  if (v7)
    *a6 = v7;
  else
    __break(0xC471u);
}

void JSC::ArrayBuffer::tryCreateUninitialized(JSC::ArrayBuffer *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, _QWORD *a6@<X8>)
{
  JSC::ArrayBuffer::tryCreate((unint64_t)this, a2, 0, 0, 1, a3, a4, a5, a6);
}

void JSC::tryAllocateResizableMemory(JSC *this, JSC::VM *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  JSC::Heap *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int PhysicalBytes;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t GrowableBoundsCheckingMemory;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  const char *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int *v116;
  const char *v117;
  uint64_t v118;

  if (((a3 + 0xFFFF) & 0xFFFFFFFFFFFF0000) != 0)
    v5 = (a3 + 0xFFFF) & 0xFFFFFFFFFFFF0000;
  else
    v5 = 0x10000;
  if (((a4 + 0xFFFF) & 0xFFFFFFFFFFFF0000) != 0)
    v6 = (a4 + 0xFFFF) & 0xFFFFFFFFFFFF0000;
  else
    v6 = 0x10000;
  if (a2)
  {
    v8 = (JSC::VM *)((char *)a2 + 192);
    std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v117);
    PhysicalBytes = JSC::BufferMemoryManager::tryAllocatePhysicalBytes((JSC::BufferMemoryManager *)&JSC::BufferMemoryManager::singleton(void)::manager, v5, v9, v10, v11, v12, v13, v14);
    if (PhysicalBytes)
    {
      if (PhysicalBytes != 1)
      {
        if (PhysicalBytes == 2 && HIBYTE(word_1ECF4C5CC) && *((_BYTE *)a2 + 753))
        {
          LOWORD(v117) = 257;
          v118 = 0;
          v22 = JSC::Heap::requestCollection((uint64_t)v8, (uint64_t)&v117, v16, v17, v18, v19, v20, v21);
          JSC::Heap::waitForCollection(v8, v22, v23, v24, v25, v26, v27, v28);
        }
        std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v117);
        v35 = JSC::BufferMemoryManager::tryAllocatePhysicalBytes((JSC::BufferMemoryManager *)&JSC::BufferMemoryManager::singleton(void)::manager, v5, v29, v30, v31, v32, v33, v34);
        if (!v35)
          goto LABEL_21;
        if (v35 != 1)
        {
LABEL_44:
          v99 = 0;
          goto LABEL_45;
        }
      }
      LOWORD(v115) = 257;
      v116 = 0;
      JSC::Heap::collectAsync((uint64_t)v8, (unsigned __int8 *)&v115, v16, v17, v18, v19, v20, v21);
      v36 = v116;
      v116 = 0;
      if (v36)
      {
        v37 = v36 + 2;
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
        {
          atomic_store(1u, v36 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
        }
      }
    }
LABEL_21:
    std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v117);
    GrowableBoundsCheckingMemory = JSC::BufferMemoryManager::tryAllocateGrowableBoundsCheckingMemory((JSC::BufferMemoryManager *)&JSC::BufferMemoryManager::singleton(void)::manager, v6, v40, v41, v42, v43, v44, v45);
    if (v46)
    {
      if (v46 == 1)
        goto LABEL_28;
      if (v46 == 2 && HIBYTE(word_1ECF4C5CC) && *((_BYTE *)a2 + 753))
      {
        LOWORD(v117) = 257;
        v118 = 0;
        v54 = JSC::Heap::requestCollection((uint64_t)v8, (uint64_t)&v117, v47, v48, v49, v50, v51, v52);
        JSC::Heap::waitForCollection(v8, v54, v55, v56, v57, v58, v59, v60);
      }
      std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v117);
      GrowableBoundsCheckingMemory = JSC::BufferMemoryManager::tryAllocateGrowableBoundsCheckingMemory((JSC::BufferMemoryManager *)&JSC::BufferMemoryManager::singleton(void)::manager, v6, v61, v62, v63, v64, v65, v66);
      if (v67 == 1)
      {
LABEL_28:
        LOWORD(v115) = 257;
        v116 = 0;
        JSC::Heap::collectAsync((uint64_t)v8, (unsigned __int8 *)&v115, v47, v48, v49, v50, v51, v52);
        v68 = v116;
        v116 = 0;
        if (v68)
        {
          v69 = v68 + 2;
          do
          {
            v70 = __ldaxr(v69);
            v71 = v70 - 1;
          }
          while (__stlxr(v71, v69));
          if (!v71)
          {
            atomic_store(1u, v68 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v68 + 8))(v68);
          }
        }
      }
    }
    goto LABEL_38;
  }
  std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v117);
  if (JSC::BufferMemoryManager::tryAllocatePhysicalBytes((JSC::BufferMemoryManager *)&JSC::BufferMemoryManager::singleton(void)::manager, v5, v72, v73, v74, v75, v76, v77) >= 2)
  {
    std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v117);
    if (JSC::BufferMemoryManager::tryAllocatePhysicalBytes((JSC::BufferMemoryManager *)&JSC::BufferMemoryManager::singleton(void)::manager, v5, v78, v79, v80, v81, v82, v83) >= 2)goto LABEL_44;
  }
  std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v117);
  v90 = JSC::BufferMemoryManager::tryAllocateGrowableBoundsCheckingMemory((JSC::BufferMemoryManager *)&JSC::BufferMemoryManager::singleton(void)::manager, v6, v84, v85, v86, v87, v88, v89);
  if ((v91 & 0xFFFFFFFE) != 0)
  {
    std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v117);
    v90 = JSC::BufferMemoryManager::tryAllocateGrowableBoundsCheckingMemory((JSC::BufferMemoryManager *)&JSC::BufferMemoryManager::singleton(void)::manager, v6, v92, v93, v94, v95, v96, v97);
  }
  GrowableBoundsCheckingMemory = v90;
LABEL_38:
  if (!GrowableBoundsCheckingMemory)
  {
    std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v117);
    JSC::BufferMemoryManager::freePhysicalBytes((JSC::BufferMemoryManager *)&JSC::BufferMemoryManager::singleton(void)::manager, v5, v100, v101, v102, v103, v104, v105);
    goto LABEL_44;
  }
  if (mprotect((void *)(GrowableBoundsCheckingMemory + v5), v6 - v5, 0))
  {
    v106 = __error();
    WTF::safeStrerror((WTF *)*v106, &v115);
    if (v115)
      v107 = (const char *)(v115 + 16);
    else
      v107 = 0;
    v117 = v107;
    WTF::dataLogLn<char [18],char const*>("mprotect failed: ", &v117);
    WTF::CString::~CString((WTF::CString *)&v115, v108, v109, v110, v111, v112, v113, v114);
    __break(0xC471u);
LABEL_52:
    JUMPOUT(0x19888E9C0);
  }
  v98 = WTF::fastMalloc((WTF *)0x28);
  if ((v5 >> 16) > 0x10000)
  {
    __break(0xC471u);
    goto LABEL_52;
  }
  if ((v6 >> 16) >= 0x10001)
  {
    __break(0xC471u);
    JUMPOUT(0x19888E9E0);
  }
  v99 = v98;
  *(_DWORD *)v98 = 1;
  *(_WORD *)(v98 + 4) = 256;
  *(_BYTE *)(v98 + 6) = 0;
  *(_QWORD *)(v98 + 8) = GrowableBoundsCheckingMemory;
  *(_QWORD *)(v98 + 16) = v5;
  *(_QWORD *)(v98 + 24) = v6;
  *(_DWORD *)(v98 + 32) = v5 >> 16;
  *(_DWORD *)(v98 + 36) = v6 >> 16;
  std::call_once[abi:sn180100]<JSC::Wasm::activateSignalingMemory(void)::$_0>((uint64_t)&v117);
LABEL_45:
  *(_QWORD *)this = v99;
}

void JSC::ArrayBuffer::slice(JSC::ArrayBuffer *this@<X0>, double a2@<D0>, double a3@<D1>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;

  if (*((_BYTE *)this + 64) && (v16 = *((_QWORD *)this + 4)) != 0)
  {
    v8 = *(_QWORD *)(v16 + 32);
    v9 = v8;
  }
  else
  {
    v8 = *((_QWORD *)this + 6);
    v9 = v8;
  }
  if (a2 >= 0.0)
    v10 = -0.0;
  else
    v10 = (double)v8;
  v11 = v10 + a2;
  if (v11 < 0.0)
    v11 = 0.0;
  if (v11 > (double)v8)
    v11 = (double)v8;
  v12 = (unint64_t)v11;
  v13 = (double)v9;
  if (a3 >= 0.0)
    v14 = -0.0;
  else
    v14 = (double)v9;
  v15 = v14 + a3;
  if (v15 < 0.0)
    v15 = 0.0;
  if (v15 <= v13)
    v13 = v15;
  JSC::ArrayBuffer::sliceWithClampedIndex(this, v12, (unint64_t)v13, a4, a5, a6, a7, a8);
}

void JSC::ArrayBuffer::sliceWithClampedIndex(JSC::ArrayBuffer *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t (*v17)();
  uint64_t v18;

  if (a3 >= a2)
    v10 = a3 - a2;
  else
    v10 = 0;
  v11 = *((_QWORD *)this + 2);
  if (v11 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v11 = (v11 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  if (*((_BYTE *)this + 64) && (v18 = *((_QWORD *)this + 4)) != 0)
    v12 = *(_QWORD *)(v18 + 32);
  else
    v12 = *((_QWORD *)this + 6);
  v13 = v12 >= a2;
  v14 = v12 - a2;
  if (!v13)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10 != -1)
  {
    if (v14 >= v10)
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_15:
  v10 = v14;
LABEL_16:
  JSC::ArrayBuffer::tryCreate((const void *)(v11 + a2), v10, a4, a5, a6, a7, a8);
  v15 = *a8;
  if (v15)
  {
    v16 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    if (*((_QWORD *)this + 4))
      v17 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v17 = 0;
    if (!*(_QWORD *)(v15 + 32))
      v16 = 0;
    if ((v17 != 0) != (v16 != 0))
    {
      if (v16)
      {
        __break(0xC471u);
        JUMPOUT(0x19888EBD8);
      }
      if (!v17)
      {
        __break(0xC471u);
        JUMPOUT(0x19888EBF8);
      }
      JSC::ArrayBufferContents::makeShared((JSC::ArrayBufferContents *)(v15 + 16));
      *(_BYTE *)(v15 + 93) = 1;
    }
  }
}

void JSC::ArrayBuffer::slice(JSC::ArrayBuffer *this@<X0>, double a2@<D0>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t *a7@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  double v9;
  double v10;
  uint64_t v11;

  if (*((_BYTE *)this + 64) && (v11 = *((_QWORD *)this + 4)) != 0)
  {
    v7 = *(_QWORD *)(v11 + 32);
    v8 = v7;
  }
  else
  {
    v7 = *((_QWORD *)this + 6);
    v8 = v7;
  }
  v9 = -0.0;
  if (a2 < 0.0)
    v9 = (double)v7;
  v10 = v9 + a2;
  if (v10 < 0.0)
    v10 = 0.0;
  if (v10 > (double)v7)
    v10 = (double)v7;
  JSC::ArrayBuffer::sliceWithClampedIndex(this, (unint64_t)v10, v8, a3, a4, a5, a6, a7);
}

unsigned int *JSC::ArrayBuffer::makeShared(JSC::ArrayBuffer *this)
{
  unsigned int *result;

  result = JSC::ArrayBufferContents::makeShared((JSC::ArrayBuffer *)((char *)this + 16));
  *((_BYTE *)this + 93) = 1;
  return result;
}

uint64_t JSC::ArrayBuffer::makeWasmMemory(uint64_t this)
{
  *(_WORD *)(this + 92) = 257;
  return this;
}

uint64_t JSC::ArrayBuffer::shareWith(JSC::ArrayBuffer *this, JSC::ArrayBufferContents *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ArrayBufferContents *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t result;

  v11 = *((_QWORD *)this + 2);
  v9 = (JSC::ArrayBuffer *)((char *)this + 16);
  v10 = v11;
  if (v11
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v10 & 0x3FFFFFFFFLL) + qword_1ECF4C038)
    && (*((_QWORD *)this + 4)
      ? (v12 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance)
      : (v12 = 0),
        v12))
  {
    JSC::ArrayBufferContents::shareWith(v9, a2, a3, a4, a5, a6, a7, a8);
    return 1;
  }
  else
  {
    result = 0;
    *(_QWORD *)a2 = 0;
  }
  return result;
}

BOOL JSC::ArrayBuffer::transferTo(JSC::ArrayBuffer *this, JSC::VM *a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  const void **v11;
  _BOOL8 v13;
  unsigned int *v14;
  uint64_t (*v15)();
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  const void *v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v39;
  unsigned int *v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  BOOL v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  BOOL v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD v102[3];
  char v103;
  _OWORD v104[3];
  char v105;
  char v106;

  *(_DWORD *)this += 2;
  v11 = (const void **)((char *)this + 16);
  v10 = (unsigned int *)*((_QWORD *)this + 2);
  if (!v10
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !(((unint64_t)v10 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    v13 = 0;
    *a3 = 0;
    goto LABEL_39;
  }
  v14 = (unsigned int *)*((_QWORD *)this + 4);
  v15 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  if (!v14)
    v15 = 0;
  if (v15)
  {
    JSC::ArrayBufferContents::shareWith((JSC::ArrayBuffer *)((char *)this + 16), (JSC::ArrayBufferContents *)a3, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_11:
    v13 = 1;
    goto LABEL_39;
  }
  if (!*((_DWORD *)this + 22) && !*((_BYTE *)this + 93))
  {
    v39 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    v40 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
    v41 = *((_BYTE *)this + 64);
    memset(v102, 0, sizeof(v102));
    v103 = 0;
    v42 = *(_OWORD *)a3;
    v43 = *((_OWORD *)a3 + 1);
    *a3 = v10;
    a3[1] = v39;
    a3[2] = v14;
    a3[3] = v40;
    v104[0] = v42;
    v104[1] = v43;
    v44 = *((_OWORD *)this + 3);
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    v45 = *((_OWORD *)a3 + 2);
    *((_OWORD *)a3 + 2) = v44;
    v104[2] = v45;
    v46 = *((_BYTE *)a3 + 48);
    *((_BYTE *)a3 + 48) = v41;
    v105 = v46;
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)v104, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)v102, v47, v48, v49, v50, v51, v52, v53);
    v62 = *((_QWORD *)this + 1);
    if (v62)
    {
      if ((v62 & 1) != 0)
      {
        v63 = 1;
      }
      else
      {
        v63 = *(unsigned int *)(v62 + 12);
        if (!(_DWORD)v63)
          goto LABEL_60;
      }
      v64 = v63 - 1;
      do
      {
        v65 = *((_QWORD *)this + 1);
        if ((v65 & 1) != 0)
        {
          v66 = (unsigned __int8 *)(v65 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          if (v64 >= *(unsigned int *)(v65 + 12))
            goto LABEL_94;
          v66 = *(unsigned __int8 **)(*(_QWORD *)v65 + 8 * v64);
        }
        if (v66)
          v67 = v66[5] - 51 >= 0xFFFFFFF4;
        else
          v67 = 0;
        if (v67)
          JSC::JSArrayBufferView::detachFromArrayBuffer((JSC::JSArrayBufferView *)v66, v61, v54, v55, v56, v57, v58, v59, v60);
        --v64;
      }
      while (v64 != -1);
    }
LABEL_60:
    *(_QWORD *)&v104[0] = &off_1E3583C90;
    *((_QWORD *)&v104[0] + 1) = "Array buffer was detached";
    JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)this + 9, (uint64_t)a2);
    goto LABEL_11;
  }
  v16 = *((_QWORD *)this + 6);
  if (v16 >= 0x100000001)
  {
    v68 = a3[1];
    *a3 = 0;
    a3[1] = 0;
    if (v68)
    {
      v69 = v68 + 2;
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (!v71)
      {
        atomic_store(1u, v68 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v68 + 8))(v68);
      }
    }
    v72 = a3[2];
    a3[2] = 0;
    if (v72)
    {
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        atomic_store(1u, v72);
        JSC::SharedArrayBufferContents::~SharedArrayBufferContents((JSC::SharedArrayBufferContents *)v72, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
      }
    }
    v75 = a3[3];
    a3[3] = 0;
    if (!v75)
      goto LABEL_87;
    do
    {
      v76 = __ldaxr(v75);
      v77 = --v76 == 0;
    }
    while (__stlxr(v76, v75));
    goto LABEL_85;
  }
  if (v16)
    v17 = *((_QWORD *)this + 6);
  else
    v17 = 1;
  v18 = Gigacage::tryMalloc(0, v17);
  *a3 = (unsigned int *)v18;
  if (!v18)
  {
    v78 = a3[1];
    *a3 = 0;
    a3[1] = 0;
    if (v78)
    {
      v79 = v78 + 2;
      do
      {
        v80 = __ldaxr(v79);
        v81 = v80 - 1;
      }
      while (__stlxr(v81, v79));
      if (!v81)
      {
        atomic_store(1u, v78 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v78 + 8))(v78);
      }
    }
    v82 = a3[2];
    a3[2] = 0;
    if (v82)
    {
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (!v84)
      {
        atomic_store(1u, v82);
        JSC::SharedArrayBufferContents::~SharedArrayBufferContents((JSC::SharedArrayBufferContents *)v82, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
      }
    }
    v75 = a3[3];
    a3[3] = 0;
    if (!v75)
      goto LABEL_87;
    do
    {
      v85 = __ldaxr(v75);
      v77 = --v85 == 0;
    }
    while (__stlxr(v85, v75));
LABEL_85:
    if (v77)
    {
      atomic_store(1u, v75);
      *(_QWORD *)&v104[0] = v75;
      WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::BufferMemoryHandle **)v104);
    }
LABEL_87:
    a3[4] = 0;
    a3[5] = 0;
    *((_BYTE *)a3 + 48) = 0;
    goto LABEL_28;
  }
  a3[4] = (unsigned int *)v16;
  a3[5] = (unsigned int *)v16;
  *((_BYTE *)a3 + 48) = 0;
  v19 = atomic_load(&JSC::ArrayBuffer::primitiveGigacageDestructor(void)::onceKey);
  if (v19 != -1)
  {
    *(_QWORD *)&v104[0] = &v106;
    *(_QWORD *)&v102[0] = v104;
    std::__call_once(&JSC::ArrayBuffer::primitiveGigacageDestructor(void)::onceKey, v102, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::ArrayBuffer::primitiveGigacageDestructor(void)::$_0 &&>>);
  }
  v20 = JSC::ArrayBuffer::primitiveGigacageDestructor(void)::destructor;
  v21 = (unsigned int *)(JSC::ArrayBuffer::primitiveGigacageDestructor(void)::destructor + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  v23 = a3[1];
  a3[1] = (unsigned int *)v20;
  if (v23)
  {
    v24 = v23 + 2;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v23 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
    }
  }
LABEL_28:
  v27 = (uint64_t)*a3;
  if (!*a3)
    goto LABEL_88;
  if (!qword_1ECF4C038 || !byte_1ECF4C022 && disablePrimitiveGigacageRequested)
  {
    v28 = *v11;
    goto LABEL_34;
  }
  if ((v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038)
  {
    v27 = (v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    if (*v11)
      v28 = (const void *)(((unint64_t)*v11 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
    else
      v28 = 0;
LABEL_34:
    memcpy((void *)v27, v28, *((_QWORD *)this + 6));
    v29 = *((_QWORD *)this + 6);
    a3[4] = (unsigned int *)v29;
    if (v29 >= 0x100000001)
    {
LABEL_94:
      __break(0xC471u);
      JUMPOUT(0x19888F07CLL);
    }
    v27 = (uint64_t)*a3;
    if (*a3)
      goto LABEL_36;
LABEL_88:
    v13 = 0;
    goto LABEL_39;
  }
LABEL_36:
  if (!qword_1ECF4C038 || !byte_1ECF4C022 && disablePrimitiveGigacageRequested)
    goto LABEL_11;
  v13 = (v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038 != 0;
LABEL_39:
  v77 = *(_DWORD *)this == 2;
  *(_DWORD *)this -= 2;
  if (v77)
  {
    JSC::ArrayBuffer::~ArrayBuffer(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
  }
  return v13;
}

void JSC::ArrayBuffer::detach(JSC::ArrayBuffer *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[3];
  char v26;
  void (**v27)(JSC::StringFireDetail *__hidden);
  const char *v28;

  v10 = 0.0;
  v11 = *((_OWORD *)this + 2);
  v25[0] = *((_OWORD *)this + 1);
  v25[1] = v11;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v25[2] = *((_OWORD *)this + 3);
  *((_OWORD *)this + 3) = 0u;
  v26 = *((_BYTE *)this + 64);
  v12 = *((_QWORD *)this + 1);
  if (!v12)
    goto LABEL_18;
  if ((v12 & 1) != 0)
  {
    v13 = 1;
  }
  else
  {
    v13 = *(unsigned int *)(v12 + 12);
    if (!(_DWORD)v13)
    {
LABEL_18:
      v27 = &off_1E3583C90;
      v28 = "Array buffer was detached";
      JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)this + 9, (uint64_t)a2);
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)v25, v18, v19, v20, v21, v22, v23, v24);
      return;
    }
  }
  v14 = v13 - 1;
  while (1)
  {
    v15 = *((_QWORD *)this + 1);
    if ((v15 & 1) != 0)
    {
      v16 = (unsigned __int8 *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_11;
    }
    if (v14 >= *(unsigned int *)(v15 + 12))
      break;
    v16 = *(unsigned __int8 **)(*(_QWORD *)v15 + 8 * v14);
LABEL_11:
    if (v16)
      v17 = v16[5] - 51 >= 0xFFFFFFF4;
    else
      v17 = 0;
    if (v17)
      JSC::JSArrayBufferView::detachFromArrayBuffer((JSC::JSArrayBufferView *)v16, v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    if (--v14 == -1)
      goto LABEL_18;
  }
  __break(0xC471u);
}

void JSC::ArrayBuffer::grow(JSC::ArrayBuffer *this@<X0>, JSC::VM *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v10 = *((_QWORD *)this + 4);
  if (!v10)
  {
    *(_BYTE *)a9 = 4;
    *(_DWORD *)(a9 + 8) = 1;
    return;
  }
  do
    v13 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v13 + 1, (unsigned int *)v10));
  if ((*(_BYTE *)(v10 + 48) & 1) != 0)
  {
    v14 = (unsigned __int8 *)(*(_QWORD *)(v10 + 24) + 4);
    if (__ldaxr(v14))
    {
      __clrex();
    }
    else if (!__stxr(1u, v14))
    {
      goto LABEL_9;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v14);
LABEL_9:
    JSC::SharedArrayBufferContents::grow(v10, (uint64_t)a2, a3, a9);
    v16 = __ldxr(v14);
    if (v16 == 1)
    {
      if (!__stlxr(0, v14))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v14, 0, a3, a4, a5, a6, a7, a8);
LABEL_14:
    if (!*(_DWORD *)(a9 + 8))
    {
      a4 = *(_QWORD *)a9;
      if (*(uint64_t *)a9 >= 257)
        JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)a2 + 192, 0, 0, a4, a5, a6, a7, a8);
    }
    goto LABEL_17;
  }
  *(_BYTE *)a9 = 4;
  *(_DWORD *)(a9 + 8) = 1;
  do
  {
LABEL_17:
    v17 = __ldaxr((unsigned int *)v10);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, (unsigned int *)v10));
  if (!v18)
  {
    atomic_store(1u, (unsigned int *)v10);
    JSC::SharedArrayBufferContents::~SharedArrayBufferContents((JSC::SharedArrayBufferContents *)v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
  }
}

void JSC::ArrayBuffer::resize(JSC::ArrayBuffer *this@<X0>, JSC::VM *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  unsigned int v14;
  unsigned __int8 *v15;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int PhysicalBytes;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  JSC::BufferMemoryHandle *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  int *v85;
  JSC::BufferMemoryHandle *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  JSC::BufferMemoryHandle *v96[2];

  v10 = *((_QWORD *)this + 5);
  if (!v10)
  {
    *(_BYTE *)a9 = 4;
    *(_DWORD *)(a9 + 8) = 1;
    return;
  }
  do
    v14 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v14 + 1, (unsigned int *)v10));
  if (*((_QWORD *)this + 4))
  {
    v74 = 4;
    goto LABEL_46;
  }
  v15 = (unsigned __int8 *)(v10 + 4);
  if (__ldaxr((unsigned __int8 *)(v10 + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v15))
  {
    goto LABEL_8;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v10 + 4);
LABEL_8:
  v17 = __ldxr(v15);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v15))
LABEL_12:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v10 + 4), 0, a3, a4, a5, a6, a7, a8);
  if (*((_QWORD *)this + 7) < a3)
  {
    v18 = 1;
    *(_BYTE *)a9 = 1;
    goto LABEL_66;
  }
  v19 = *((_QWORD *)this + 6);
  v20 = a3 - v19;
  if (a3 == v19)
  {
    v18 = 0;
    *(_QWORD *)a9 = 0;
    goto LABEL_66;
  }
  v21 = (a3 + 0xFFFF) >> 16;
  if (v21 > 0x10000)
  {
    __break(0xC471u);
    JUMPOUT(0x19888F85CLL);
  }
  if (*(_BYTE *)(v10 + 5))
    v22 = atomic_load((unint64_t *)(v10 + 16));
  else
    v22 = *(_QWORD *)(v10 + 16);
  if ((_WORD)v22)
  {
    __break(0xC471u);
    JUMPOUT(0x19888F87CLL);
  }
  v23 = v22 >> 16;
  if (v23 >= 0x10001)
  {
    __break(0xC471u);
    JUMPOUT(0x19888F89CLL);
  }
  if ((_DWORD)v21 == (_DWORD)v23)
  {
LABEL_57:
    v81 = *((_QWORD *)this + 6);
    if (a3 > v81)
    {
      v82 = *((_QWORD *)this + 2);
      if (v82 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v82 = (v82 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      bzero((void *)(v82 + v81), a3 - v81);
    }
    *((_QWORD *)this + 6) = a3;
    if (v20 >= 257)
      JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)a2 + 192, 0, 0, v20, a5, a6, a7, a8);
    v18 = 0;
    *(_QWORD *)a9 = v20;
    goto LABEL_66;
  }
  v24 = (a3 + 0xFFFF) & 0xFFFFFFFF0000;
  v25 = *(unsigned __int8 *)(v10 + 5);
  if (*(_BYTE *)(v10 + 5))
  {
    v26 = atomic_load((unint64_t *)(v10 + 16));
    v25 = *(unsigned __int8 *)(v10 + 5);
  }
  else
  {
    v26 = *(_QWORD *)(v10 + 16);
  }
  if (v24 <= v26)
  {
    if (v25)
      v42 = atomic_load((unint64_t *)(v10 + 16));
    else
      v42 = *(_QWORD *)(v10 + 16);
    v43 = v42 - v24;
    std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)v96);
    JSC::BufferMemoryManager::freePhysicalBytes((JSC::BufferMemoryManager *)JSC::BufferMemoryManager::singleton(void)::manager, v43, v44, v45, v46, v47, v48, v49);
    v50 = JSC::BufferMemoryHandle::memory((JSC::BufferMemoryHandle *)v10);
    if (!v50)
    {
      __break(0xC471u);
      JUMPOUT(0x19888F8BCLL);
    }
    if (mprotect((void *)(v50 + v24), v43, 0))
    {
      v51 = __error();
      WTF::safeStrerror((WTF *)*v51, &v94);
      if (v94)
        v52 = (JSC::BufferMemoryHandle *)(v94 + 16);
      else
        v52 = 0;
      v96[0] = v52;
      WTF::dataLogLn<char [18],char const*>("mprotect failed: ", (const char **)v96);
      WTF::CString::~CString((WTF::CString *)&v94, v53, v54, v55, v56, v57, v58, v59);
      __break(0xC471u);
      JUMPOUT(0x19888F648);
    }
    goto LABEL_56;
  }
  if (v25)
    v27 = atomic_load((unint64_t *)(v10 + 16));
  else
    v27 = *(_QWORD *)(v10 + 16);
  v28 = v24 - v27;
  std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)v96);
  PhysicalBytes = JSC::BufferMemoryManager::tryAllocatePhysicalBytes((JSC::BufferMemoryManager *)JSC::BufferMemoryManager::singleton(void)::manager, v28, v29, v30, v31, v32, v33, v34);
  switch(PhysicalBytes)
  {
    case 0:
      goto LABEL_52;
    case 2:
      if (HIBYTE(word_1ECF4C5CC) && *((_BYTE *)a2 + 753))
      {
        LOWORD(v96[0]) = 257;
        v96[1] = 0;
        v60 = JSC::Heap::requestCollection((uint64_t)a2 + 192, (uint64_t)v96, v36, v37, v38, v39, v40, v41);
        JSC::Heap::waitForCollection((JSC::VM *)((char *)a2 + 192), v60, v61, v62, v63, v64, v65, v66);
      }
      break;
    case 1:
      goto LABEL_47;
  }
  std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)v96);
  v73 = JSC::BufferMemoryManager::tryAllocatePhysicalBytes((JSC::BufferMemoryManager *)JSC::BufferMemoryManager::singleton(void)::manager, v28, v67, v68, v69, v70, v71, v72);
  if (v73 == 1)
  {
LABEL_47:
    LOWORD(v94) = 257;
    v95 = 0;
    JSC::Heap::collectAsync((uint64_t)a2 + 192, (unsigned __int8 *)&v94, v36, v37, v38, v39, v40, v41);
    v75 = v95;
    v95 = 0;
    if (v75)
    {
      v76 = v75 + 2;
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (!v78)
      {
        atomic_store(1u, v75 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v75 + 8))(v75);
      }
    }
    goto LABEL_52;
  }
  if (!v73)
  {
LABEL_52:
    v79 = JSC::BufferMemoryHandle::memory((JSC::BufferMemoryHandle *)v10);
    if (!v79)
    {
      __break(0xC471u);
      JUMPOUT(0x19888F8DCLL);
    }
    if (*(_BYTE *)(v10 + 5))
      v80 = atomic_load((unint64_t *)(v10 + 16));
    else
      v80 = *(_QWORD *)(v10 + 16);
    if (mprotect((void *)(v79 + v80), v28, 3))
    {
      v85 = __error();
      WTF::safeStrerror((WTF *)*v85, &v94);
      if (v94)
        v86 = (JSC::BufferMemoryHandle *)(v94 + 16);
      else
        v86 = 0;
      v96[0] = v86;
      WTF::dataLogLn<char [18],char const*>("mprotect failed: ", (const char **)v96);
      WTF::CString::~CString((WTF::CString *)&v94, v87, v88, v89, v90, v91, v92, v93);
      __break(0xC471u);
      JUMPOUT(0x19888F954);
    }
LABEL_56:
    atomic_store(v24, (unint64_t *)(v10 + 16));
    goto LABEL_57;
  }
  v74 = 3;
LABEL_46:
  *(_BYTE *)a9 = v74;
  v18 = 1;
LABEL_66:
  *(_DWORD *)(a9 + 8) = v18;
  do
  {
    v83 = __ldaxr((unsigned int *)v10);
    v84 = v83 - 1;
  }
  while (__stlxr(v84, (unsigned int *)v10));
  if (!v84)
  {
    atomic_store(1u, (unsigned int *)v10);
    v96[0] = (JSC::BufferMemoryHandle *)v10;
    WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v96);
  }
}

uint64_t WTF::dataLogLn<char [18],char const*>(const char *a1, const char **a2)
{
  return WTF::dataLog<char [8],char const*,char [3]>(a1, a2, "\n");
}

void JSC::ArrayBuffer::tryCreateShared(JSC::ArrayBuffer *this@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v7;
  BOOL v8;
  JSC::BufferMemoryHandle *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::SharedArrayBufferContents *v33;
  JSC::BufferMemoryHandle *v34;
  JSC::BufferMemoryHandle *v35;

  if (is_mul_ok(a2, a3)
    && ((v7 = a2 * a3, v7 <= 0x100000000) ? (v8 = v7 > a4) : (v8 = 1),
        !v8 && (JSC::tryAllocateResizableMemory((JSC *)&v34, this, v7, a4), (v9 = v34) != 0)))
  {
    v10 = JSC::BufferMemoryHandle::memory(v34);
    v34 = 0;
    v11 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = v9;
    *(_QWORD *)(v11 + 32) = v7;
    *(_QWORD *)(v11 + 40) = a4;
    *(_BYTE *)(v11 + 48) = *(_BYTE *)(v11 + 48) & 0xFC | 1;
    v33 = (JSC::SharedArrayBufferContents *)v11;
    JSC::ArrayBuffer::createShared((uint64_t *)&v33, (uint64_t *)&v35);
    *a5 = v35;
    v35 = 0;
    v19 = (unsigned int *)v33;
    v33 = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        JSC::SharedArrayBufferContents::~SharedArrayBufferContents((JSC::SharedArrayBufferContents *)v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      }
    }
    v22 = (unsigned int *)v34;
    v34 = 0;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        v35 = (JSC::BufferMemoryHandle *)v22;
        WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v35);
      }
    }
  }
  else
  {
    *a5 = 0;
  }
}

void JSC::SharedArrayBufferContents::grow(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v5;
  int v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int PhysicalBytes;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int *v55;
  const char *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  const char *v66[2];

  v5 = atomic_load((unint64_t *)(a1 + 32));
  if (a3 < v5 || *(_QWORD *)(a1 + 40) < a3)
  {
    v8 = 1;
    *(_BYTE *)a4 = 1;
    goto LABEL_4;
  }
  if (a3 == v5)
  {
    v8 = 0;
    *(_QWORD *)a4 = 0;
    goto LABEL_4;
  }
  v9 = (a3 + 0xFFFF) >> 16;
  if (v9 > 0x10000)
  {
    __break(0xC471u);
    JUMPOUT(0x19888FD68);
  }
  v11 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v11 + 5))
    v12 = atomic_load((unint64_t *)(v11 + 16));
  else
    v12 = *(_QWORD *)(v11 + 16);
  if ((_WORD)v12)
  {
    __break(0xC471u);
    JUMPOUT(0x19888FD88);
  }
  v13 = v12 >> 16;
  if (v13 >= 0x10001)
  {
    __break(0xC471u);
    JUMPOUT(0x19888FDA8);
  }
  if ((_DWORD)v9 != (_DWORD)v13)
  {
    v14 = (a3 + 0xFFFF) & 0xFFFFFFFF0000;
    v15 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v15 + 5))
      v16 = atomic_load((unint64_t *)(v15 + 16));
    else
      v16 = *(_QWORD *)(v15 + 16);
    if (v14 <= v16)
    {
      __break(0xC471u);
      JUMPOUT(0x19888FDC8);
    }
    v17 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v17 + 5))
      v18 = atomic_load((unint64_t *)(v17 + 16));
    else
      v18 = *(_QWORD *)(v17 + 16);
    v19 = v14 - v18;
    if (v14 == v18)
    {
      __break(0xC471u);
      JUMPOUT(0x19888FDE8);
    }
    std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)v66);
    PhysicalBytes = JSC::BufferMemoryManager::tryAllocatePhysicalBytes((JSC::BufferMemoryManager *)&JSC::BufferMemoryManager::singleton(void)::manager, v19, v20, v21, v22, v23, v24, v25);
    switch(PhysicalBytes)
    {
      case 0:
        goto LABEL_34;
      case 2:
        if (HIBYTE(word_1ECF4C5CC) && *(_BYTE *)(a2 + 753))
        {
          LOWORD(v66[0]) = 257;
          v66[1] = 0;
          v33 = JSC::Heap::requestCollection(a2 + 192, (uint64_t)v66, v27, v28, v29, v30, v31, v32);
          JSC::Heap::waitForCollection((JSC::Heap *)(a2 + 192), v33, v34, v35, v36, v37, v38, v39);
        }
        break;
      case 1:
LABEL_29:
        LOWORD(v64) = 257;
        v65 = 0;
        JSC::Heap::collectAsync(a2 + 192, (unsigned __int8 *)&v64, v27, v28, v29, v30, v31, v32);
        v47 = v65;
        v65 = 0;
        if (v47)
        {
          v48 = v47 + 2;
          do
          {
            v49 = __ldaxr(v48);
            v50 = v49 - 1;
          }
          while (__stlxr(v50, v48));
          if (!v50)
          {
            atomic_store(1u, v47 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 8))(v47);
          }
        }
LABEL_34:
        v51 = JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(a1 + 24));
        if (!v51)
        {
          __break(0xC471u);
          JUMPOUT(0x19888FE08);
        }
        v52 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v52 + 5))
          v53 = atomic_load((unint64_t *)(v52 + 16));
        else
          v53 = *(_QWORD *)(v52 + 16);
        if (mprotect((void *)(v51 + v53), v19, 3))
        {
          v55 = __error();
          WTF::safeStrerror((WTF *)*v55, &v64);
          if (v64)
            v56 = (const char *)(v64 + 16);
          else
            v56 = 0;
          v66[0] = v56;
          WTF::dataLogLn<char [18],char const*>("mprotect failed: ", v66);
          WTF::CString::~CString((WTF::CString *)&v64, v57, v58, v59, v60, v61, v62, v63);
          __break(0xC471u);
          JUMPOUT(0x19888FE80);
        }
        atomic_store(v14, (unint64_t *)(*(_QWORD *)(a1 + 24) + 16));
        goto LABEL_39;
    }
    std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)v66);
    v46 = JSC::BufferMemoryManager::tryAllocatePhysicalBytes((JSC::BufferMemoryManager *)&JSC::BufferMemoryManager::singleton(void)::manager, v19, v40, v41, v42, v43, v44, v45);
    if (v46 != 1)
    {
      if (v46)
      {
        *(_BYTE *)a4 = 3;
        v8 = 1;
        goto LABEL_4;
      }
      goto LABEL_34;
    }
    goto LABEL_29;
  }
LABEL_39:
  v54 = *(_QWORD *)(a1 + 8);
  if (v54 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v54 = (v54 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  bzero((void *)(v54 + v5), a3 - v5);
  v8 = 0;
  atomic_store(a3, (unint64_t *)(a1 + 32));
  *(_QWORD *)a4 = a3 - v5;
LABEL_4:
  *(_DWORD *)(a4 + 8) = v8;
}

const char *JSC::errorMessageForTransfer(JSC *this, JSC::ArrayBuffer *a2)
{
  uint64_t (*v2)();

  if (*((_QWORD *)this + 4))
    v2 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v2 = 0;
  if (v2)
    return "Cannot transfer a SharedArrayBuffer";
  if (*((_BYTE *)this + 92))
    return "Cannot transfer a WebAssembly.Memory";
  return "Cannot transfer an ArrayBuffer whose backing store has been accessed by the JavaScriptCore C API";
}

void JSC::ArrayBufferContents::fromSpan(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _OWORD v19[3];
  char v20;
  char v21;
  _OWORD *v22;

  v6 = (void *)Gigacage::tryMalloc(0, a2);
  if (v6)
  {
    v7 = v6;
    memcpy(v6, a1, a2);
    v15 = atomic_load(&JSC::ArrayBuffer::primitiveGigacageDestructor(void)::onceKey);
    if (v15 != -1)
    {
      *(_QWORD *)&v19[0] = &v21;
      v22 = v19;
      std::__call_once(&JSC::ArrayBuffer::primitiveGigacageDestructor(void)::onceKey, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::ArrayBuffer::primitiveGigacageDestructor(void)::$_0 &&>>);
    }
    v16 = JSC::ArrayBuffer::primitiveGigacageDestructor(void)::destructor;
    v17 = (unsigned int *)(JSC::ArrayBuffer::primitiveGigacageDestructor(void)::destructor + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    if (a2 >= 0x100000001)
    {
      __break(0xC471u);
    }
    else
    {
      *(_QWORD *)a3 = v7;
      *(_QWORD *)(a3 + 8) = v16;
      *(_OWORD *)(a3 + 16) = 0u;
      memset(v19, 0, 32);
      *(_QWORD *)(a3 + 32) = a2;
      *(_QWORD *)(a3 + 40) = a2;
      v19[2] = 0u;
      *(_BYTE *)(a3 + 48) = 0;
      v20 = 0;
      *(_BYTE *)(a3 + 56) = 1;
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)v19, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 56) = 0;
  }
}

uint64_t JSC::ArrayBufferView::ArrayBufferView(uint64_t result, char a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6)
{
  BOOL v6;
  char v7;
  char v8;
  char v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t (*v16)();
  uint64_t v17;

  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 4) = a2;
  *(_BYTE *)(result + 5) = 1;
  if (*(_BYTE *)(*a3 + 64))
  {
    if (*(_QWORD *)(*a3 + 32))
      v15 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v15 = 0;
    v6 = v15 == 0;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_BYTE *)(result + 6) & 0xFE | v6;
  *(_BYTE *)(result + 6) = v7;
  if (*(_BYTE *)(*a3 + 64))
  {
    if (*(_QWORD *)(*a3 + 32))
      v16 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v16 = 0;
    v8 = 2 * (v16 != 0);
  }
  else
  {
    v8 = 0;
  }
  v9 = v8 | v7 & 0xFD;
  *(_BYTE *)(result + 6) = v9;
  if (*(_BYTE *)(*a3 + 64))
    v10 = 4 * (a6 == 0);
  else
    v10 = 0;
  *(_BYTE *)(result + 6) = v10 | v9 & 0xFB;
  *(_QWORD *)(result + 8) = a4;
  if (!a6)
  {
    v11 = (_QWORD *)(result + 24);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    v12 = *a3;
    *a3 = 0;
    *(_QWORD *)(result + 32) = v12;
LABEL_20:
    if (!v12)
      return result;
    goto LABEL_14;
  }
  *(_QWORD *)(result + 24) = 0;
  v11 = (_QWORD *)(result + 24);
  *(_QWORD *)(result + 16) = a5;
  v12 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 32) = v12;
  if ((*(_BYTE *)(result + 6) & 3) != 0)
    goto LABEL_20;
  if (__CFADD__(a4, a5)
    || (!*(_BYTE *)(v12 + 64) || (v17 = *(_QWORD *)(v12 + 32)) == 0
      ? (v13 = *(_QWORD *)(v12 + 48))
      : (v13 = *(_QWORD *)(v17 + 32)),
        a4 + a5 > v13))
  {
    __break(0xC471u);
    JUMPOUT(0x19889012CLL);
  }
LABEL_14:
  v14 = *(_QWORD *)(v12 + 16);
  if (v14 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v14 = (v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *v11 = v14 + a4;
  return result;
}

unint64_t JSC::ArrayBufferView::wrap(JSC::ArrayBufferView *this, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v11;
  uint64_t v12;
  JSC::ArrayBuffer *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::ArrayBuffer *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::ArrayBuffer *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  JSC::Heap *v35;
  uint64_t v36;
  unint64_t SlowCase;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  JSC::Heap *v87;
  int v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  JSC::Heap *v96;
  int v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  JSC::ArrayBuffer *v105;
  JSC::Heap *v106;
  int v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  JSC::ArrayBuffer *v115;
  JSC::Heap *v116;
  int v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  JSC::ArrayBuffer *v125;
  _QWORD *v126;
  int v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  JSC::ArrayBuffer *v135;
  _QWORD *v136;
  int v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  JSC::ArrayBuffer *v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  JSC::ArrayBuffer *v156;
  JSC::Heap *v157;
  int v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  JSC::ArrayBuffer *v166;
  JSC::Heap *v167;
  int v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  JSC::ArrayBuffer *v176;
  JSC::Heap *v177;
  int v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  char *v285;
  uint64_t (*v286)(unint64_t *, JSC::JSGlobalObject *);
  unint64_t *v287;
  char *v288;
  uint64_t (*v289)(unint64_t *, JSC::JSGlobalObject *);
  unint64_t *v290;
  char *v291;
  uint64_t (*v292)(unint64_t *, JSC::JSGlobalObject *);
  unint64_t *v293;
  char *v294;
  uint64_t (*v295)(unint64_t *, JSC::JSGlobalObject *);
  unint64_t *v296;
  char *v297;
  uint64_t (*v298)(unint64_t *, JSC::JSGlobalObject *);
  unint64_t *v299;
  char *v300;
  uint64_t (*v301)(unint64_t *, JSC::JSGlobalObject *);
  unint64_t *v302;
  char *v303;
  uint64_t (*v304)(unint64_t *, JSC::JSGlobalObject *);
  unint64_t *v305;
  char *v306;
  uint64_t (*v307)(unint64_t *, JSC::JSGlobalObject *);
  unint64_t *v308;
  char *v309;
  uint64_t (*v310)(unint64_t *, JSC::JSGlobalObject *);
  unint64_t *v311;
  char *v312;
  uint64_t (*v313)(unint64_t *, JSC::JSGlobalObject *);
  unint64_t *v314;
  char *v315;
  uint64_t (*v316)(unint64_t *, JSC::JSGlobalObject *);
  unint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  JSC::ArrayBuffer *v358;
  unint64_t v359;
  unint64_t v360;
  __int128 v361;
  char v362;
  uint64_t v363;

  switch(*((_BYTE *)this + 4))
  {
    case 0:
    case 0xC:
      return JSC::DataView::wrapImpl(this, a2, a3, a4, a5, a6, a7, a8);
    case 1:
      v11 = *(_QWORD *)(a3 + 56);
      if ((*((_BYTE *)this + 6) & 3) != 0)
      {
        v12 = *(_QWORD *)(a3 + 1680);
        if ((v12 & 1) == 0)
          goto LABEL_5;
        v285 = (char *)(a3 + 1680);
      }
      else
      {
        v12 = *(_QWORD *)(a3 + 1664);
        if ((v12 & 1) == 0)
          goto LABEL_5;
        v285 = (char *)(a3 + 1664);
      }
      v286 = *(uint64_t (**)(unint64_t *, JSC::JSGlobalObject *))(v12 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a3 & 8) != 0)
        v287 = (unint64_t *)(a3 - 16);
      else
        v287 = (unint64_t *)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      v359 = *v287;
      v360 = a3;
      *(_QWORD *)&v361 = v285;
      v12 = v286(&v359, a2);
LABEL_5:
      ++*(_DWORD *)this;
      v13 = (JSC::ArrayBuffer *)*((_QWORD *)this + 4);
      if (v13)
      {
        v14 = *((_QWORD *)v13 + 2);
        if (v14
          && (!qword_1ECF4C038
           || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
           || (v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          *(_DWORD *)v13 += 2;
        }
        else
        {
          v13 = 0;
        }
      }
      v358 = v13;
      if ((*((_BYTE *)this + 6) & 4) != 0)
      {
        v16 = 0;
        v15 = 0;
      }
      else
      {
        v15 = *((_QWORD *)this + 2);
        v16 = 1;
      }
      JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v359, (JSC *)v11, v12, (uint64_t)&v358, *((_QWORD *)this + 1), v15, v16, a8, a9);
      if (v13)
      {
        v34 = *(_DWORD *)v13 == 2;
        *(_DWORD *)v13 -= 2;
        if (v34)
        {
          JSC::ArrayBuffer::~ArrayBuffer(v13, v80, v81, v82, v83, v84, v85, v86);
          WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
        }
      }
      v87 = *(JSC::Heap **)(v11 + 40512);
      if (!v87)
        v87 = JSC::GCClient::Heap::int8ArraySpaceSlow((JSC::Heap **)(v11 + 37552));
      v36 = v11 + 192;
      SlowCase = *((_QWORD *)v87 + 3);
      if (SlowCase < *((_QWORD *)v87 + 4))
        goto LABEL_83;
      v349 = (uint64_t)v87;
      SlowCase = *((_QWORD *)v87 + 5);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v80, v81, v82, v83, v84, v85, v86);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v349, v11 + 192, 48, 0, 0, v321, v322, v323);
      }
      else
      {
        v276 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v87 + 6);
        *((_QWORD *)v87 + 4) = SlowCase + HIDWORD(v276);
        *((_QWORD *)v87 + 5) = SlowCase + (int)v276;
LABEL_83:
        *((_QWORD *)v87 + 3) = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      v88 = *(_DWORD *)(v359 + 8);
      *(_DWORD *)SlowCase = v359 >> 4;
      *(_DWORD *)(SlowCase + 4) = v88;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 0;
      *(_OWORD *)(SlowCase + 24) = v361;
      *(_BYTE *)(SlowCase + 40) = v362;
      v39 = v363;
      if (!*(_BYTE *)(v11 + 755))
        goto LABEL_188;
      __dmb(0xAu);
      *(_QWORD *)(SlowCase + 8) = v39;
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath(v11 + 192, SlowCase);
      goto LABEL_202;
    case 2:
      v11 = *(_QWORD *)(a3 + 56);
      if ((*((_BYTE *)this + 6) & 3) != 0)
      {
        v17 = *(_QWORD *)(a3 + 1704);
        if ((v17 & 1) == 0)
          goto LABEL_15;
        v288 = (char *)(a3 + 1704);
      }
      else
      {
        v17 = *(_QWORD *)(a3 + 1688);
        if ((v17 & 1) == 0)
          goto LABEL_15;
        v288 = (char *)(a3 + 1688);
      }
      v289 = *(uint64_t (**)(unint64_t *, JSC::JSGlobalObject *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a3 & 8) != 0)
        v290 = (unint64_t *)(a3 - 16);
      else
        v290 = (unint64_t *)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      v359 = *v290;
      v360 = a3;
      *(_QWORD *)&v361 = v288;
      v17 = v289(&v359, a2);
LABEL_15:
      ++*(_DWORD *)this;
      v18 = (JSC::ArrayBuffer *)*((_QWORD *)this + 4);
      if (v18)
      {
        v19 = *((_QWORD *)v18 + 2);
        if (v19
          && (!qword_1ECF4C038
           || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
           || (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          *(_DWORD *)v18 += 2;
        }
        else
        {
          v18 = 0;
        }
      }
      v358 = v18;
      if ((*((_BYTE *)this + 6) & 4) != 0)
      {
        v21 = 0;
        v20 = 0;
      }
      else
      {
        v20 = *((_QWORD *)this + 2);
        v21 = 1;
      }
      JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v359, (JSC *)v11, v17, (uint64_t)&v358, *((_QWORD *)this + 1), v20, v21, a8, a9);
      if (v18)
      {
        v34 = *(_DWORD *)v18 == 2;
        *(_DWORD *)v18 -= 2;
        if (v34)
        {
          JSC::ArrayBuffer::~ArrayBuffer(v18, v89, v90, v91, v92, v93, v94, v95);
          WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
        }
      }
      v96 = *(JSC::Heap **)(v11 + 40864);
      if (!v96)
        v96 = JSC::GCClient::Heap::uint8ArraySpaceSlow((JSC::Heap **)(v11 + 37552));
      v36 = v11 + 192;
      SlowCase = *((_QWORD *)v96 + 3);
      if (SlowCase < *((_QWORD *)v96 + 4))
        goto LABEL_95;
      v350 = (uint64_t)v96;
      SlowCase = *((_QWORD *)v96 + 5);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v89, v90, v91, v92, v93, v94, v95);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v350, v11 + 192, 48, 0, 0, v324, v325, v326);
      }
      else
      {
        v277 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v96 + 6);
        *((_QWORD *)v96 + 4) = SlowCase + HIDWORD(v277);
        *((_QWORD *)v96 + 5) = SlowCase + (int)v277;
LABEL_95:
        *((_QWORD *)v96 + 3) = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      v97 = *(_DWORD *)(v359 + 8);
      *(_DWORD *)SlowCase = v359 >> 4;
      *(_DWORD *)(SlowCase + 4) = v97;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 0;
      *(_OWORD *)(SlowCase + 24) = v361;
      *(_BYTE *)(SlowCase + 40) = v362;
      v39 = v363;
      if (!*(_BYTE *)(v11 + 755))
        goto LABEL_188;
      __dmb(0xAu);
      *(_QWORD *)(SlowCase + 8) = v39;
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath(v11 + 192, SlowCase);
      goto LABEL_202;
    case 3:
      v11 = *(_QWORD *)(a3 + 56);
      if ((*((_BYTE *)this + 6) & 3) != 0)
      {
        v22 = *(_QWORD *)(a3 + 1728);
        if ((v22 & 1) == 0)
          goto LABEL_25;
        v291 = (char *)(a3 + 1728);
      }
      else
      {
        v22 = *(_QWORD *)(a3 + 1712);
        if ((v22 & 1) == 0)
          goto LABEL_25;
        v291 = (char *)(a3 + 1712);
      }
      v292 = *(uint64_t (**)(unint64_t *, JSC::JSGlobalObject *))(v22 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a3 & 8) != 0)
        v293 = (unint64_t *)(a3 - 16);
      else
        v293 = (unint64_t *)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      v359 = *v293;
      v360 = a3;
      *(_QWORD *)&v361 = v291;
      v22 = v292(&v359, a2);
LABEL_25:
      ++*(_DWORD *)this;
      v23 = (JSC::ArrayBuffer *)*((_QWORD *)this + 4);
      if (v23)
      {
        v24 = *((_QWORD *)v23 + 2);
        if (v24
          && (!qword_1ECF4C038
           || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
           || (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          *(_DWORD *)v23 += 2;
        }
        else
        {
          v23 = 0;
        }
      }
      v358 = v23;
      if ((*((_BYTE *)this + 6) & 4) != 0)
      {
        v26 = 0;
        v25 = 0;
      }
      else
      {
        v25 = *((_QWORD *)this + 2);
        v26 = 1;
      }
      JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v359, (JSC *)v11, v22, (uint64_t)&v358, *((_QWORD *)this + 1), v25, v26, a8, a9);
      if (v23)
      {
        v34 = *(_DWORD *)v23 == 2;
        *(_DWORD *)v23 -= 2;
        if (v34)
        {
          JSC::ArrayBuffer::~ArrayBuffer(v23, v27, v28, v29, v30, v31, v32, v33);
          WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
        }
      }
      v35 = *(JSC::Heap **)(v11 + 40872);
      if (!v35)
        v35 = JSC::GCClient::Heap::uint8ClampedArraySpaceSlow((JSC::Heap **)(v11 + 37552));
      v36 = v11 + 192;
      SlowCase = *((_QWORD *)v35 + 3);
      if (SlowCase < *((_QWORD *)v35 + 4))
        goto LABEL_39;
      v348 = (uint64_t)v35;
      SlowCase = *((_QWORD *)v35 + 5);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v27, v28, v29, v30, v31, v32, v33);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v348, v11 + 192, 48, 0, 0, v318, v319, v320);
      }
      else
      {
        v275 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v35 + 6);
        *((_QWORD *)v35 + 4) = SlowCase + HIDWORD(v275);
        *((_QWORD *)v35 + 5) = SlowCase + (int)v275;
LABEL_39:
        *((_QWORD *)v35 + 3) = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      v38 = *(_DWORD *)(v359 + 8);
      *(_DWORD *)SlowCase = v359 >> 4;
      *(_DWORD *)(SlowCase + 4) = v38;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 0;
      *(_OWORD *)(SlowCase + 24) = v361;
      *(_BYTE *)(SlowCase + 40) = v362;
      v39 = v363;
      if (!*(_BYTE *)(v11 + 755))
        goto LABEL_188;
      __dmb(0xAu);
      *(_QWORD *)(SlowCase + 8) = v39;
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath(v11 + 192, SlowCase);
      goto LABEL_202;
    case 4:
      v11 = *(_QWORD *)(a3 + 56);
      if ((*((_BYTE *)this + 6) & 3) != 0)
      {
        v60 = *(_QWORD *)(a3 + 1752);
        if ((v60 & 1) == 0)
          goto LABEL_62;
        v306 = (char *)(a3 + 1752);
      }
      else
      {
        v60 = *(_QWORD *)(a3 + 1736);
        if ((v60 & 1) == 0)
          goto LABEL_62;
        v306 = (char *)(a3 + 1736);
      }
      v307 = *(uint64_t (**)(unint64_t *, JSC::JSGlobalObject *))(v60 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a3 & 8) != 0)
        v308 = (unint64_t *)(a3 - 16);
      else
        v308 = (unint64_t *)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      v359 = *v308;
      v360 = a3;
      *(_QWORD *)&v361 = v306;
      v60 = v307(&v359, a2);
LABEL_62:
      ++*(_DWORD *)this;
      JSC::ArrayBufferView::possiblySharedBuffer(&v358, *((_QWORD *)this + 4));
      if ((*((_BYTE *)this + 6) & 4) != 0)
      {
        v64 = 0;
        v63 = 0;
      }
      else
      {
        v63 = *((_QWORD *)this + 2) >> 1;
        v64 = 1;
      }
      JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v359, (JSC *)v11, v60, (uint64_t)&v358, *((_QWORD *)this + 1), v63, v64, v61, v62);
      v145 = v358;
      if (v358)
      {
        v34 = *(_DWORD *)v358 == 2;
        *(_DWORD *)v358 -= 2;
        if (v34)
        {
          JSC::ArrayBuffer::~ArrayBuffer(v145, v138, v139, v140, v141, v142, v143, v144);
          WTF::fastFree(v243, v244, v245, v246, v247, v248, v249, v250);
        }
      }
      SlowCase = JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>((JSC::Heap **)v11, (JSC::VM *)0x30, v139, v140, v141, v142, v143, v144);
      v146 = *(_DWORD *)(v359 + 8);
      *(_DWORD *)SlowCase = v359 >> 4;
      *(_DWORD *)(SlowCase + 4) = v146;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 0;
      *(_OWORD *)(SlowCase + 24) = v361;
      *(_BYTE *)(SlowCase + 40) = v362;
      v147 = v363;
      v148 = v11 + 192;
      if (*(_BYTE *)(v11 + 755))
      {
        __dmb(0xAu);
        *(_QWORD *)(SlowCase + 8) = v147;
        if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
          JSC::Heap::writeBarrierSlowPath(v148, SlowCase);
        goto LABEL_202;
      }
      *(_QWORD *)(SlowCase + 8) = v363;
      if (*(_DWORD *)(v11 + 760) < *(unsigned __int8 *)(SlowCase + 7))
        goto LABEL_189;
      goto LABEL_204;
    case 5:
      v11 = *(_QWORD *)(a3 + 56);
      if ((*((_BYTE *)this + 6) & 3) != 0)
      {
        v65 = *(_QWORD *)(a3 + 1776);
        if ((v65 & 1) == 0)
          goto LABEL_66;
        v309 = (char *)(a3 + 1776);
      }
      else
      {
        v65 = *(_QWORD *)(a3 + 1760);
        if ((v65 & 1) == 0)
          goto LABEL_66;
        v309 = (char *)(a3 + 1760);
      }
      v310 = *(uint64_t (**)(unint64_t *, JSC::JSGlobalObject *))(v65 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a3 & 8) != 0)
        v311 = (unint64_t *)(a3 - 16);
      else
        v311 = (unint64_t *)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      v359 = *v311;
      v360 = a3;
      *(_QWORD *)&v361 = v309;
      v65 = v310(&v359, a2);
LABEL_66:
      ++*(_DWORD *)this;
      JSC::ArrayBufferView::possiblySharedBuffer(&v358, *((_QWORD *)this + 4));
      if ((*((_BYTE *)this + 6) & 4) != 0)
      {
        v69 = 0;
        v68 = 0;
      }
      else
      {
        v68 = *((_QWORD *)this + 2) >> 1;
        v69 = 1;
      }
      JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v359, (JSC *)v11, v65, (uint64_t)&v358, *((_QWORD *)this + 1), v68, v69, v66, v67);
      v156 = v358;
      if (v358)
      {
        v34 = *(_DWORD *)v358 == 2;
        *(_DWORD *)v358 -= 2;
        if (v34)
        {
          JSC::ArrayBuffer::~ArrayBuffer(v156, v149, v150, v151, v152, v153, v154, v155);
          WTF::fastFree(v251, v252, v253, v254, v255, v256, v257, v258);
        }
      }
      v157 = *(JSC::Heap **)(v11 + 40880);
      if (!v157)
        v157 = JSC::GCClient::Heap::uint16ArraySpaceSlow((JSC::Heap **)(v11 + 37552));
      v36 = v11 + 192;
      SlowCase = *((_QWORD *)v157 + 3);
      if (SlowCase < *((_QWORD *)v157 + 4))
        goto LABEL_162;
      v355 = (uint64_t)v157;
      SlowCase = *((_QWORD *)v157 + 5);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v149, v150, v151, v152, v153, v154, v155);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v355, v11 + 192, 48, 0, 0, v339, v340, v341);
      }
      else
      {
        v282 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v157 + 6);
        *((_QWORD *)v157 + 4) = SlowCase + HIDWORD(v282);
        *((_QWORD *)v157 + 5) = SlowCase + (int)v282;
LABEL_162:
        *((_QWORD *)v157 + 3) = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      v158 = *(_DWORD *)(v359 + 8);
      *(_DWORD *)SlowCase = v359 >> 4;
      *(_DWORD *)(SlowCase + 4) = v158;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 0;
      *(_OWORD *)(SlowCase + 24) = v361;
      *(_BYTE *)(SlowCase + 40) = v362;
      v39 = v363;
      if (!*(_BYTE *)(v11 + 755))
        goto LABEL_188;
      __dmb(0xAu);
      *(_QWORD *)(SlowCase + 8) = v39;
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath(v11 + 192, SlowCase);
      goto LABEL_202;
    case 6:
      v11 = *(_QWORD *)(a3 + 56);
      if ((*((_BYTE *)this + 6) & 3) != 0)
      {
        v40 = *(_QWORD *)(a3 + 1800);
        if ((v40 & 1) == 0)
          goto LABEL_46;
        v294 = (char *)(a3 + 1800);
      }
      else
      {
        v40 = *(_QWORD *)(a3 + 1784);
        if ((v40 & 1) == 0)
          goto LABEL_46;
        v294 = (char *)(a3 + 1784);
      }
      v295 = *(uint64_t (**)(unint64_t *, JSC::JSGlobalObject *))(v40 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a3 & 8) != 0)
        v296 = (unint64_t *)(a3 - 16);
      else
        v296 = (unint64_t *)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      v359 = *v296;
      v360 = a3;
      *(_QWORD *)&v361 = v294;
      v40 = v295(&v359, a2);
LABEL_46:
      ++*(_DWORD *)this;
      JSC::ArrayBufferView::possiblySharedBuffer(&v358, *((_QWORD *)this + 4));
      if ((*((_BYTE *)this + 6) & 4) != 0)
      {
        v44 = 0;
        v43 = 0;
      }
      else
      {
        v43 = *((_QWORD *)this + 2) >> 2;
        v44 = 1;
      }
      JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v359, (JSC *)v11, v40, (uint64_t)&v358, *((_QWORD *)this + 1), v43, v44, v41, v42);
      v105 = v358;
      if (v358)
      {
        v34 = *(_DWORD *)v358 == 2;
        *(_DWORD *)v358 -= 2;
        if (v34)
        {
          JSC::ArrayBuffer::~ArrayBuffer(v105, v98, v99, v100, v101, v102, v103, v104);
          WTF::fastFree(v211, v212, v213, v214, v215, v216, v217, v218);
        }
      }
      v106 = *(JSC::Heap **)(v11 + 40528);
      if (!v106)
        v106 = JSC::GCClient::Heap::int32ArraySpaceSlow((JSC::Heap **)(v11 + 37552));
      v36 = v11 + 192;
      SlowCase = *((_QWORD *)v106 + 3);
      if (SlowCase < *((_QWORD *)v106 + 4))
        goto LABEL_107;
      v351 = (uint64_t)v106;
      SlowCase = *((_QWORD *)v106 + 5);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v98, v99, v100, v101, v102, v103, v104);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v351, v11 + 192, 48, 0, 0, v327, v328, v329);
      }
      else
      {
        v278 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v106 + 6);
        *((_QWORD *)v106 + 4) = SlowCase + HIDWORD(v278);
        *((_QWORD *)v106 + 5) = SlowCase + (int)v278;
LABEL_107:
        *((_QWORD *)v106 + 3) = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      v107 = *(_DWORD *)(v359 + 8);
      *(_DWORD *)SlowCase = v359 >> 4;
      *(_DWORD *)(SlowCase + 4) = v107;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 0;
      *(_OWORD *)(SlowCase + 24) = v361;
      *(_BYTE *)(SlowCase + 40) = v362;
      v39 = v363;
      if (!*(_BYTE *)(v11 + 755))
        goto LABEL_188;
      __dmb(0xAu);
      *(_QWORD *)(SlowCase + 8) = v39;
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath(v11 + 192, SlowCase);
      goto LABEL_202;
    case 7:
      v11 = *(_QWORD *)(a3 + 56);
      if ((*((_BYTE *)this + 6) & 3) != 0)
      {
        v70 = *(_QWORD *)(a3 + 1824);
        if ((v70 & 1) == 0)
          goto LABEL_70;
        v312 = (char *)(a3 + 1824);
      }
      else
      {
        v70 = *(_QWORD *)(a3 + 1808);
        if ((v70 & 1) == 0)
          goto LABEL_70;
        v312 = (char *)(a3 + 1808);
      }
      v313 = *(uint64_t (**)(unint64_t *, JSC::JSGlobalObject *))(v70 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a3 & 8) != 0)
        v314 = (unint64_t *)(a3 - 16);
      else
        v314 = (unint64_t *)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      v359 = *v314;
      v360 = a3;
      *(_QWORD *)&v361 = v312;
      v70 = v313(&v359, a2);
LABEL_70:
      ++*(_DWORD *)this;
      JSC::ArrayBufferView::possiblySharedBuffer(&v358, *((_QWORD *)this + 4));
      if ((*((_BYTE *)this + 6) & 4) != 0)
      {
        v74 = 0;
        v73 = 0;
      }
      else
      {
        v73 = *((_QWORD *)this + 2) >> 2;
        v74 = 1;
      }
      JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v359, (JSC *)v11, v70, (uint64_t)&v358, *((_QWORD *)this + 1), v73, v74, v71, v72);
      v166 = v358;
      if (v358)
      {
        v34 = *(_DWORD *)v358 == 2;
        *(_DWORD *)v358 -= 2;
        if (v34)
        {
          JSC::ArrayBuffer::~ArrayBuffer(v166, v159, v160, v161, v162, v163, v164, v165);
          WTF::fastFree(v259, v260, v261, v262, v263, v264, v265, v266);
        }
      }
      v167 = *(JSC::Heap **)(v11 + 40888);
      if (!v167)
        v167 = JSC::GCClient::Heap::uint32ArraySpaceSlow((JSC::Heap **)(v11 + 37552));
      v36 = v11 + 192;
      SlowCase = *((_QWORD *)v167 + 3);
      if (SlowCase < *((_QWORD *)v167 + 4))
        goto LABEL_174;
      v356 = (uint64_t)v167;
      SlowCase = *((_QWORD *)v167 + 5);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v159, v160, v161, v162, v163, v164, v165);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v356, v11 + 192, 48, 0, 0, v342, v343, v344);
      }
      else
      {
        v283 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v167 + 6);
        *((_QWORD *)v167 + 4) = SlowCase + HIDWORD(v283);
        *((_QWORD *)v167 + 5) = SlowCase + (int)v283;
LABEL_174:
        *((_QWORD *)v167 + 3) = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      v168 = *(_DWORD *)(v359 + 8);
      *(_DWORD *)SlowCase = v359 >> 4;
      *(_DWORD *)(SlowCase + 4) = v168;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 0;
      *(_OWORD *)(SlowCase + 24) = v361;
      *(_BYTE *)(SlowCase + 40) = v362;
      v39 = v363;
      if (!*(_BYTE *)(v11 + 755))
        goto LABEL_188;
      __dmb(0xAu);
      *(_QWORD *)(SlowCase + 8) = v39;
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath(v11 + 192, SlowCase);
      goto LABEL_202;
    case 8:
      v11 = *(_QWORD *)(a3 + 56);
      if ((*((_BYTE *)this + 6) & 3) != 0)
      {
        v45 = *(_QWORD *)(a3 + 1848);
        if ((v45 & 1) == 0)
          goto LABEL_50;
        v297 = (char *)(a3 + 1848);
      }
      else
      {
        v45 = *(_QWORD *)(a3 + 1832);
        if ((v45 & 1) == 0)
          goto LABEL_50;
        v297 = (char *)(a3 + 1832);
      }
      v298 = *(uint64_t (**)(unint64_t *, JSC::JSGlobalObject *))(v45 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a3 & 8) != 0)
        v299 = (unint64_t *)(a3 - 16);
      else
        v299 = (unint64_t *)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      v359 = *v299;
      v360 = a3;
      *(_QWORD *)&v361 = v297;
      v45 = v298(&v359, a2);
LABEL_50:
      ++*(_DWORD *)this;
      JSC::ArrayBufferView::possiblySharedBuffer(&v358, *((_QWORD *)this + 4));
      if ((*((_BYTE *)this + 6) & 4) != 0)
      {
        v49 = 0;
        v48 = 0;
      }
      else
      {
        v48 = *((_QWORD *)this + 2) >> 2;
        v49 = 1;
      }
      JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v359, (JSC *)v11, v45, (uint64_t)&v358, *((_QWORD *)this + 1), v48, v49, v46, v47);
      v115 = v358;
      if (v358)
      {
        v34 = *(_DWORD *)v358 == 2;
        *(_DWORD *)v358 -= 2;
        if (v34)
        {
          JSC::ArrayBuffer::~ArrayBuffer(v115, v108, v109, v110, v111, v112, v113, v114);
          WTF::fastFree(v219, v220, v221, v222, v223, v224, v225, v226);
        }
      }
      v116 = *(JSC::Heap **)(v11 + 40464);
      if (!v116)
        v116 = JSC::GCClient::Heap::float32ArraySpaceSlow((JSC::Heap **)(v11 + 37552));
      v36 = v11 + 192;
      SlowCase = *((_QWORD *)v116 + 3);
      if (SlowCase < *((_QWORD *)v116 + 4))
        goto LABEL_119;
      v352 = (uint64_t)v116;
      SlowCase = *((_QWORD *)v116 + 5);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v108, v109, v110, v111, v112, v113, v114);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v352, v11 + 192, 48, 0, 0, v330, v331, v332);
      }
      else
      {
        v279 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v116 + 6);
        *((_QWORD *)v116 + 4) = SlowCase + HIDWORD(v279);
        *((_QWORD *)v116 + 5) = SlowCase + (int)v279;
LABEL_119:
        *((_QWORD *)v116 + 3) = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      v117 = *(_DWORD *)(v359 + 8);
      *(_DWORD *)SlowCase = v359 >> 4;
      *(_DWORD *)(SlowCase + 4) = v117;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 0;
      *(_OWORD *)(SlowCase + 24) = v361;
      *(_BYTE *)(SlowCase + 40) = v362;
      v39 = v363;
      if (!*(_BYTE *)(v11 + 755))
        goto LABEL_188;
      __dmb(0xAu);
      *(_QWORD *)(SlowCase + 8) = v39;
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath(v11 + 192, SlowCase);
      goto LABEL_202;
    case 9:
      v11 = *(_QWORD *)(a3 + 56);
      if ((*((_BYTE *)this + 6) & 3) != 0)
      {
        v75 = *(_QWORD *)(a3 + 1872);
        if ((v75 & 1) == 0)
          goto LABEL_74;
        v315 = (char *)(a3 + 1872);
      }
      else
      {
        v75 = *(_QWORD *)(a3 + 1856);
        if ((v75 & 1) == 0)
          goto LABEL_74;
        v315 = (char *)(a3 + 1856);
      }
      v316 = *(uint64_t (**)(unint64_t *, JSC::JSGlobalObject *))(v75 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a3 & 8) != 0)
        v317 = (unint64_t *)(a3 - 16);
      else
        v317 = (unint64_t *)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      v359 = *v317;
      v360 = a3;
      *(_QWORD *)&v361 = v315;
      v75 = v316(&v359, a2);
LABEL_74:
      ++*(_DWORD *)this;
      JSC::ArrayBufferView::possiblySharedBuffer(&v358, *((_QWORD *)this + 4));
      if ((*((_BYTE *)this + 6) & 4) != 0)
      {
        v79 = 0;
        v78 = 0;
      }
      else
      {
        v78 = *((_QWORD *)this + 2) >> 3;
        v79 = 1;
      }
      JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v359, (JSC *)v11, v75, (uint64_t)&v358, *((_QWORD *)this + 1), v78, v79, v76, v77);
      v176 = v358;
      if (v358)
      {
        v34 = *(_DWORD *)v358 == 2;
        *(_DWORD *)v358 -= 2;
        if (v34)
        {
          JSC::ArrayBuffer::~ArrayBuffer(v176, v169, v170, v171, v172, v173, v174, v175);
          WTF::fastFree(v267, v268, v269, v270, v271, v272, v273, v274);
        }
      }
      v177 = *(JSC::Heap **)(v11 + 40472);
      if (!v177)
        v177 = JSC::GCClient::Heap::float64ArraySpaceSlow((JSC::Heap **)(v11 + 37552));
      v36 = v11 + 192;
      SlowCase = *((_QWORD *)v177 + 3);
      if (SlowCase < *((_QWORD *)v177 + 4))
        goto LABEL_186;
      v357 = (uint64_t)v177;
      SlowCase = *((_QWORD *)v177 + 5);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v169, v170, v171, v172, v173, v174, v175);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v357, v11 + 192, 48, 0, 0, v345, v346, v347);
      }
      else
      {
        v284 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v177 + 6);
        *((_QWORD *)v177 + 4) = SlowCase + HIDWORD(v284);
        *((_QWORD *)v177 + 5) = SlowCase + (int)v284;
LABEL_186:
        *((_QWORD *)v177 + 3) = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      v178 = *(_DWORD *)(v359 + 8);
      *(_DWORD *)SlowCase = v359 >> 4;
      *(_DWORD *)(SlowCase + 4) = v178;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 0;
      *(_OWORD *)(SlowCase + 24) = v361;
      *(_BYTE *)(SlowCase + 40) = v362;
      v39 = v363;
      if (!*(_BYTE *)(v11 + 755))
        goto LABEL_188;
      __dmb(0xAu);
      *(_QWORD *)(SlowCase + 8) = v39;
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath(v11 + 192, SlowCase);
      goto LABEL_202;
    case 0xA:
      v11 = *(_QWORD *)(a3 + 56);
      if ((*((_BYTE *)this + 6) & 3) != 0)
      {
        v50 = *(_QWORD *)(a3 + 1896);
        if ((v50 & 1) == 0)
          goto LABEL_54;
        v300 = (char *)(a3 + 1896);
      }
      else
      {
        v50 = *(_QWORD *)(a3 + 1880);
        if ((v50 & 1) == 0)
          goto LABEL_54;
        v300 = (char *)(a3 + 1880);
      }
      v301 = *(uint64_t (**)(unint64_t *, JSC::JSGlobalObject *))(v50 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a3 & 8) != 0)
        v302 = (unint64_t *)(a3 - 16);
      else
        v302 = (unint64_t *)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      v359 = *v302;
      v360 = a3;
      *(_QWORD *)&v361 = v300;
      v50 = v301(&v359, a2);
LABEL_54:
      ++*(_DWORD *)this;
      JSC::ArrayBufferView::possiblySharedBuffer(&v358, *((_QWORD *)this + 4));
      if ((*((_BYTE *)this + 6) & 4) != 0)
      {
        v54 = 0;
        v53 = 0;
      }
      else
      {
        v53 = *((_QWORD *)this + 2) >> 3;
        v54 = 1;
      }
      JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v359, (JSC *)v11, v50, (uint64_t)&v358, *((_QWORD *)this + 1), v53, v54, v51, v52);
      v125 = v358;
      if (v358)
      {
        v34 = *(_DWORD *)v358 == 2;
        *(_DWORD *)v358 -= 2;
        if (v34)
        {
          JSC::ArrayBuffer::~ArrayBuffer(v125, v118, v119, v120, v121, v122, v123, v124);
          WTF::fastFree(v227, v228, v229, v230, v231, v232, v233, v234);
        }
      }
      v126 = *(_QWORD **)(v11 + 40344);
      if (!v126)
        v126 = (_QWORD *)JSC::GCClient::Heap::bigInt64ArraySpaceSlow((JSC::Heap **)(v11 + 37552));
      v36 = v11 + 192;
      SlowCase = v126[3];
      if (SlowCase < v126[4])
        goto LABEL_131;
      v353 = (uint64_t)v126;
      SlowCase = v126[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v118, v119, v120, v121, v122, v123, v124);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v353, v11 + 192, 48, 0, 0, v333, v334, v335);
      }
      else
      {
        v280 = *(_QWORD *)(SlowCase + 8) ^ v126[6];
        v126[4] = SlowCase + HIDWORD(v280);
        v126[5] = SlowCase + (int)v280;
LABEL_131:
        v126[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      v127 = *(_DWORD *)(v359 + 8);
      *(_DWORD *)SlowCase = v359 >> 4;
      *(_DWORD *)(SlowCase + 4) = v127;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 0;
      *(_OWORD *)(SlowCase + 24) = v361;
      *(_BYTE *)(SlowCase + 40) = v362;
      v39 = v363;
      if (!*(_BYTE *)(v11 + 755))
        goto LABEL_188;
      __dmb(0xAu);
      *(_QWORD *)(SlowCase + 8) = v39;
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath(v11 + 192, SlowCase);
      goto LABEL_202;
    case 0xB:
      v11 = *(_QWORD *)(a3 + 56);
      if ((*((_BYTE *)this + 6) & 3) != 0)
      {
        v55 = *(_QWORD *)(a3 + 1920);
        if ((v55 & 1) == 0)
          goto LABEL_58;
        v303 = (char *)(a3 + 1920);
      }
      else
      {
        v55 = *(_QWORD *)(a3 + 1904);
        if ((v55 & 1) == 0)
          goto LABEL_58;
        v303 = (char *)(a3 + 1904);
      }
      v304 = *(uint64_t (**)(unint64_t *, JSC::JSGlobalObject *))(v55 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a3 & 8) != 0)
        v305 = (unint64_t *)(a3 - 16);
      else
        v305 = (unint64_t *)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      v359 = *v305;
      v360 = a3;
      *(_QWORD *)&v361 = v303;
      v55 = v304(&v359, a2);
LABEL_58:
      ++*(_DWORD *)this;
      JSC::ArrayBufferView::possiblySharedBuffer(&v358, *((_QWORD *)this + 4));
      if ((*((_BYTE *)this + 6) & 4) != 0)
      {
        v59 = 0;
        v58 = 0;
      }
      else
      {
        v58 = *((_QWORD *)this + 2) >> 3;
        v59 = 1;
      }
      JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v359, (JSC *)v11, v55, (uint64_t)&v358, *((_QWORD *)this + 1), v58, v59, v56, v57);
      v135 = v358;
      if (v358)
      {
        v34 = *(_DWORD *)v358 == 2;
        *(_DWORD *)v358 -= 2;
        if (v34)
        {
          JSC::ArrayBuffer::~ArrayBuffer(v135, v128, v129, v130, v131, v132, v133, v134);
          WTF::fastFree(v235, v236, v237, v238, v239, v240, v241, v242);
        }
      }
      v136 = *(_QWORD **)(v11 + 40360);
      if (!v136)
        v136 = (_QWORD *)JSC::GCClient::Heap::bigUint64ArraySpaceSlow((JSC::Heap **)(v11 + 37552));
      v36 = v11 + 192;
      SlowCase = v136[3];
      if (SlowCase < v136[4])
        goto LABEL_143;
      v354 = (uint64_t)v136;
      SlowCase = v136[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v128, v129, v130, v131, v132, v133, v134);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v354, v11 + 192, 48, 0, 0, v336, v337, v338);
      }
      else
      {
        v281 = *(_QWORD *)(SlowCase + 8) ^ v136[6];
        v136[4] = SlowCase + HIDWORD(v281);
        v136[5] = SlowCase + (int)v281;
LABEL_143:
        v136[3] = SlowCase + 48;
      }
      *(_DWORD *)SlowCase = 0;
      v137 = *(_DWORD *)(v359 + 8);
      *(_DWORD *)SlowCase = v359 >> 4;
      *(_DWORD *)(SlowCase + 4) = v137;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 0;
      *(_OWORD *)(SlowCase + 24) = v361;
      *(_BYTE *)(SlowCase + 40) = v362;
      v39 = v363;
      if (*(_BYTE *)(v11 + 755))
      {
        __dmb(0xAu);
        *(_QWORD *)(SlowCase + 8) = v39;
        if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
          JSC::Heap::writeBarrierSlowPath(v11 + 192, SlowCase);
LABEL_202:
        __dmb(0xAu);
      }
      else
      {
LABEL_188:
        *(_QWORD *)(SlowCase + 8) = v39;
        if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
        {
          v148 = v36;
LABEL_204:
          JSC::Heap::writeBarrierSlowPath(v148, SlowCase);
        }
      }
LABEL_189:
      v179 = v360;
      if (v360 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v179 = (v360 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)(SlowCase + 16) = v179;
      JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v11);
      if (*(_DWORD *)this == 1)
        JSC::ArrayBufferView::operator delete((unint64_t)this, v180, v181, v182, v183, v184, v185, v186);
      else
        --*(_DWORD *)this;
      return SlowCase;
    default:
      __break(0xC471u);
      JUMPOUT(0x198891664);
  }
}

void JSC::ArrayBufferView::operator delete(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ArrayBuffer *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  switch(*(_BYTE *)(a1 + 4))
  {
    case 0:
    case 0xC:
      v9 = *(JSC::ArrayBuffer **)(a1 + 32);
      if (*(_BYTE *)(a1 + 5))
        goto LABEL_3;
      v21 = *((_DWORD *)v9 + 22);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x198891B5CLL);
      }
      goto LABEL_52;
    case 1:
      v9 = *(JSC::ArrayBuffer **)(a1 + 32);
      if (*(_BYTE *)(a1 + 5))
        goto LABEL_3;
      v21 = *((_DWORD *)v9 + 22);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1988919E0);
      }
      goto LABEL_52;
    case 2:
      v9 = *(JSC::ArrayBuffer **)(a1 + 32);
      if (*(_BYTE *)(a1 + 5))
        goto LABEL_3;
      v21 = *((_DWORD *)v9 + 22);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1988919FCLL);
      }
      goto LABEL_52;
    case 3:
      v9 = *(JSC::ArrayBuffer **)(a1 + 32);
      if (*(_BYTE *)(a1 + 5))
        goto LABEL_3;
      v21 = *((_DWORD *)v9 + 22);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x19889198CLL);
      }
      goto LABEL_52;
    case 4:
      v9 = *(JSC::ArrayBuffer **)(a1 + 32);
      if (*(_BYTE *)(a1 + 5))
        goto LABEL_3;
      v21 = *((_DWORD *)v9 + 22);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x198891A34);
      }
      goto LABEL_52;
    case 5:
      v9 = *(JSC::ArrayBuffer **)(a1 + 32);
      if (*(_BYTE *)(a1 + 5))
        goto LABEL_3;
      v21 = *((_DWORD *)v9 + 22);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x198891A50);
      }
      goto LABEL_52;
    case 6:
      v9 = *(JSC::ArrayBuffer **)(a1 + 32);
      if (*(_BYTE *)(a1 + 5))
        goto LABEL_3;
      v21 = *((_DWORD *)v9 + 22);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x198891A18);
      }
      goto LABEL_52;
    case 7:
      v9 = *(JSC::ArrayBuffer **)(a1 + 32);
      if (*(_BYTE *)(a1 + 5))
        goto LABEL_3;
      v21 = *((_DWORD *)v9 + 22);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x198891A88);
      }
      goto LABEL_52;
    case 8:
      v9 = *(JSC::ArrayBuffer **)(a1 + 32);
      if (*(_BYTE *)(a1 + 5))
        goto LABEL_3;
      v21 = *((_DWORD *)v9 + 22);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1988919C4);
      }
      goto LABEL_52;
    case 9:
      v9 = *(JSC::ArrayBuffer **)(a1 + 32);
      if (*(_BYTE *)(a1 + 5))
        goto LABEL_3;
      v21 = *((_DWORD *)v9 + 22);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x198891A6CLL);
      }
      goto LABEL_52;
    case 0xA:
      v9 = *(JSC::ArrayBuffer **)(a1 + 32);
      if (*(_BYTE *)(a1 + 5))
        goto LABEL_3;
      v21 = *((_DWORD *)v9 + 22);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x198891970);
      }
      goto LABEL_52;
    case 0xB:
      v9 = *(JSC::ArrayBuffer **)(a1 + 32);
      if (*(_BYTE *)(a1 + 5))
      {
LABEL_3:
        *(_QWORD *)(a1 + 32) = 0;
        if (!v9)
          goto LABEL_6;
      }
      else
      {
        v21 = *((_DWORD *)v9 + 22);
        if (!v21)
        {
          __break(0xC471u);
          JUMPOUT(0x1988919A8);
        }
LABEL_52:
        *((_DWORD *)v9 + 22) = v21 - 1;
        *(_QWORD *)(a1 + 32) = 0;
      }
      v10 = *(_DWORD *)v9 == 2;
      *(_DWORD *)v9 -= 2;
      if (v10)
      {
        JSC::ArrayBuffer::~ArrayBuffer(v9, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
      }
LABEL_6:
      v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v11)
      {
        pas_try_deallocate_slow_no_cache(a1, (uint64_t)&bmalloc_heap_config, 1);
        return;
      }
      if (!(a1 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a1 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a1)) & 1) != 0)
      {
        goto LABEL_9;
      }
      if (a1 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a1 >> 24)
      {
        a4 = 0;
        goto LABEL_47;
      }
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a1 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a1) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 != 1)
      {
LABEL_47:
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v11, a1, 1, a4, a5, a6, a7, a8);
        return;
      }
LABEL_9:
      v12 = *(unsigned int *)(v11 + 8000);
      if (v12 >= 0x3E7)
      {
        pas_thread_local_cache_append_deallocation_slow(v11, a1, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
      }
      else
      {
        *(_QWORD *)(v11 + 8 * v12) = a1 | 0x5000000000000;
        *(_DWORD *)(v11 + 8000) = v12 + 1;
      }
      return;
    default:
      __break(0xC471u);
      JUMPOUT(0x198891B54);
  }
}

uint64_t JSC::ArrayBufferView::setDetachable(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;
  int v4;

  if (*(unsigned __int8 *)(this + 5) != a2)
  {
    *(_BYTE *)(this + 5) = a2;
    v2 = *(_QWORD *)(this + 32);
    if (v2)
    {
      v3 = *(_DWORD *)(v2 + 88);
      if (a2)
      {
        if (v3)
        {
          v4 = -1;
LABEL_8:
          *(_DWORD *)(v2 + 88) = v4 + v3;
          return this;
        }
      }
      else if (v3 != -1)
      {
        v4 = 1;
        goto LABEL_8;
      }
      __break(0xC471u);
      JUMPOUT(0x198891BDCLL);
    }
  }
  return this;
}

unint64_t JSC::callArrayConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v10;
  uint64_t v11;
  double v12;
  char *v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t Slow;
  _DWORD *v30;
  _DWORD *v31;
  unint64_t result;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  JSC::VM *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  __n128 *v45;
  uint64_t v46;
  unint64_t SlowCase;
  __n128 *v48;
  __n128 *v49;
  __n128 *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const WTF::String *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  char *v90;
  int v91;
  unint64_t v92;
  WTF::StringImpl *v93;

  v90 = (char *)a2 + 48;
  v91 = *((_DWORD *)a2 + 8) - 1;
  if (v91 != 1)
  {
    v40 = (JSC::VM *)*((_QWORD *)this + 7);
    v41 = *((_DWORD *)this + 224);
    if (v41)
      v42 = 16 * (v41 & 0xFFFFFFFE);
    else
      v42 = 0;
    if (!*((_DWORD *)v40 + 20)
      || !JSC::VM::hasExceptionsAfterHandlingTraps(v40, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      return JSC::constructArray((uint64_t)this, v42, (uint64_t)&v90, a4, a5, a6, a7, a8);
    }
    return 0;
  }
  v10 = *((_QWORD *)a2 + 6);
  v92 = v10;
  if (!(v10 >> 49))
    return JSC::constructArrayNegativeIndexed((unint64_t)this, 0, (JSC::ExecutableBase *)&v92, 1, 0, a6, a7, a8, a9.n128_f64[0]);
  v11 = *((_QWORD *)this + 7);
  if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v38 = v10 - 0x2000000000000;
    v39 = ((v10 - 0x2000000000000) >> 52) & 0x7FF;
    if ((v39 - 1023) <= 0x53)
    {
      v43 = (unint64_t)v38 >> (51 - ((v10 - 0x2000000000000) >> 52));
      if (v39 > 0x433)
        LODWORD(v43) = v10 << (((v10 - 0x2000000000000) >> 52) - 51);
      if (v39 >= 0x41F)
        v44 = v43;
      else
        v44 = (((1 << (((v10 - 0x2000000000000) >> 52) + 1)) - 1) & v43)
            + (1 << (((v10 - 0x2000000000000) >> 52) + 1));
      if (v38 >= 0)
        LODWORD(v10) = v44;
      else
        LODWORD(v10) = -v44;
    }
    else
    {
      LODWORD(v10) = 0;
    }
    v12 = *(double *)&v38;
  }
  else
  {
    v12 = (double)(int)v10;
  }
  if (v12 != (double)v10)
  {
    v62 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v62 = 0x3A00000002;
    *(_QWORD *)(v62 + 8) = "Array length must be a positive integer of safe magnitude.";
    *(_DWORD *)(v62 + 16) = 4;
    v93 = (WTF::StringImpl *)v62;
    v64 = JSC::createRangeError((unint64_t)this, &v93, v63);
    JSC::VM::throwException((JSC::VM *)v11, this, v64, v65, v66, v67, v68, v69);
    v77 = v93;
    v93 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
      {
        WTF::StringImpl::~StringImpl(v77, v70, v71, v72, v73, v74, v75, v76);
        WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
      }
      else
      {
        *(_DWORD *)v77 -= 2;
      }
    }
    return 0;
  }
  v93 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  if (v10 >> 27)
    v13 = (char *)this + 912;
  else
    v13 = (char *)this + 896;
  v14 = *(_DWORD *)v13;
  if (v14)
    v15 = 16 * (v14 & 0xFFFFFFFE);
  else
    v15 = 0;
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v16 = *(unsigned __int16 *)(v15 + 24);
  if (v16 == 65534
    || (v16 == 0xFFFF ? (v17 = *(_DWORD *)(*(_QWORD *)(v15 + 64) + 84)) : (v17 = *(unsigned __int16 *)(v15 + 24)),
        v17 < 64))
  {
    v18 = 0;
  }
  else if ((v17 - 63) >= 5)
  {
    v34 = (v17 - 64) | ((v17 - 64) >> 1) | (((v17 - 64) | ((v17 - 64) >> 1)) >> 2);
    v35 = v34 | (v34 >> 4) | ((v34 | (v34 >> 4)) >> 8);
    v18 = (v35 | HIWORD(v35)) + 1;
  }
  else
  {
    v18 = 4;
  }
  v19 = *(_BYTE *)(v15 + 8) & 0xE;
  if (v19 > 9)
  {
    v46 = *(_QWORD *)(v11 + 6768);
    if (v46)
    {
      SlowCase = *(_QWORD *)(v46 + 24);
      if (SlowCase >= *(_QWORD *)(v46 + 32))
      {
        v53 = *(unsigned int *)(v46 + 60);
        v48 = *(__n128 **)(v46 + 40);
        if ((v48 & 1) == 0)
        {
          v54 = v48->n128_u64[1] ^ *(_QWORD *)(v46 + 48);
          *(_QWORD *)(v46 + 32) = (char *)v48 + HIDWORD(v54);
          *(_QWORD *)(v46 + 40) = (char *)v48 + (int)v54;
          *(_QWORD *)(v46 + 24) = (char *)v48 + v53;
          SlowCase = (unint64_t)v48;
          goto LABEL_90;
        }
        JSC::sanitizeStackForVM((JSC *)v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v46, v11 + 192, v53, 0, 1, v86, v87, v88);
      }
      else
      {
        *(_QWORD *)(v46 + 24) = SlowCase + *(unsigned int *)(v46 + 60);
      }
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v11 + 6648, (JSC *)v11, 0x38uLL, 0, a5, a6, a7, a8);
    }
    if (!SlowCase)
      goto LABEL_96;
    v48 = (__n128 *)SlowCase;
LABEL_90:
    *(_QWORD *)SlowCase = v10 | 0x400000000;
    v49 = v48;
    v50 = v48;
    a9.n128_u64[0] = 0;
    while (v48 != v50)
    {
      *v48 = a9;
      v48[1] = a9;
      v48[2] = a9;
      v48[3] = a9;
      v48 += 4;
    }
    while (v48 != v49)
    {
      v48->n128_u64[0] = 0;
      v48 = (__n128 *)((char *)v48 + 8);
    }
    *(_OWORD *)(SlowCase + 8) = 0u;
    v31 = (_DWORD *)(SlowCase + 8);
    *((_OWORD *)v31 + 1) = 0u;
    *((_OWORD *)v31 + 2) = 0u;
    goto LABEL_43;
  }
  if (v10 > 0x10000000)
    goto LABEL_96;
  if (v16 == 65534)
    goto LABEL_24;
  if (v16 == 0xFFFF)
    v16 = *(_DWORD *)(*(_QWORD *)(v15 + 64) + 84);
  if (v16 < 64)
  {
LABEL_24:
    v20 = 0;
  }
  else if ((v16 - 63) >= 5)
  {
    v36 = (v16 - 64) | ((v16 - 64) >> 1) | (((v16 - 64) | ((v16 - 64) >> 1)) >> 2);
    v37 = v36 | (v36 >> 4) | ((v36 | (v36 >> 4)) >> 8);
    v20 = (v37 | HIWORD(v37)) + 1;
  }
  else
  {
    v20 = 4;
  }
  v21 = v20;
  LODWORD(v22) = v10 <= 3 ? 3 : v10;
  v22 = (_DWORD)v10 ? v22 : 5;
  v23 = v22 + v20;
  v24 = 8 * v23;
  if (v23 > 9)
    v25 = v23 > 0x3EB
        ? v24 + 8
        : *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                          + (((unint64_t)(v24 + 23) >> 2) & 0x7FFFFFFFCLL));
  else
    v25 = (v24 + 23) & 0x1FFFFFFFF0;
  v26 = v25 - 8 * v21 - 8;
  a3 = (JSC::CallFrame *)((v26 & 0x7FFFFFFF8) + 8 * v18 + 8);
  if ((unint64_t)a3 <= 0x1F60
    && (v27 = *(_QWORD *)(v11 + ((((v26 & 0x7FFFFFFF8) + 8 * v18 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
  {
    v28 = *(unsigned int *)(v27 + 60);
    Slow = *(_QWORD *)(v27 + 24);
    if (Slow >= *(_QWORD *)(v27 + 32))
    {
      Slow = *(_QWORD *)(v27 + 40);
      if ((Slow & 1) == 0)
      {
        v52 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v27 + 48);
        *(_QWORD *)(v27 + 32) = Slow + HIDWORD(v52);
        *(_QWORD *)(v27 + 40) = Slow + (int)v52;
        *(_QWORD *)(v27 + 24) = Slow + v28;
        goto LABEL_38;
      }
      v89 = v10;
      v10 = *(unsigned int *)(v27 + 60);
      JSC::sanitizeStackForVM((JSC *)v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v58 = v10;
      LODWORD(v10) = v89;
      Slow = JSC::LocalAllocator::allocateSlowCase(v27, v11 + 192, v58, 0, 1, v59, v60, v61);
    }
    else
    {
      *(_QWORD *)(v27 + 24) = Slow + v28;
    }
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v11 + 6648, (JSC *)v11, (unint64_t)a3, 0, a5, a6, a7, a8);
  }
  if (!Slow)
  {
LABEL_96:
    JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)&v93);
    return 0;
  }
LABEL_38:
  a2 = (JSC::JSGlobalObject *)(v26 >> 3);
  if ((v26 >> 3) >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x1988920E4);
  }
  v30 = (_DWORD *)(Slow + 8 * v18);
  v31 = v30 + 2;
  *v30 = v10;
  v30[1] = (_DWORD)a2;
  if (v19 == 6)
  {
    if (a2 > 0x63)
    {
      JSC::clearArrayMemset((JSC *)(v30 + 2), (double *)a2);
    }
    else if ((_DWORD)a2)
    {
      memset_pattern16(v30 + 2, &memset_pattern_1, v26 & 0x7FFFFFFF8);
    }
  }
  else if (a2 > 0x63)
  {
    v45 = (__n128 *)(v30 + 2);
    a9.n128_u64[0] = 0;
    while (v45 != (__n128 *)((char *)v31 + (v26 & 0x7FFFFFFC0)))
    {
      *v45 = a9;
      v45[1] = a9;
      v45[2] = a9;
      v45[3] = a9;
      v45 += 4;
    }
    while (v45 != (__n128 *)((char *)v31 + (v26 & 0x7FFFFFFF8)))
    {
      v45->n128_u64[0] = 0;
      v45 = (__n128 *)((char *)v45 + 8);
    }
  }
  else if ((_DWORD)a2)
  {
    bzero(v30 + 2, v26 & 0x7FFFFFFF8);
  }
LABEL_43:
  result = *(_QWORD *)(v11 + 37584);
  if (result < *(_QWORD *)(v11 + 37592))
  {
LABEL_44:
    *(_QWORD *)(v11 + 37584) = result + 16;
    goto LABEL_45;
  }
  result = *(_QWORD *)(v11 + 37600);
  if ((result & 1) == 0)
  {
    v51 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v11 + 37608);
    *(_QWORD *)(v11 + 37592) = result + HIDWORD(v51);
    *(_QWORD *)(v11 + 37600) = result + (int)v51;
    goto LABEL_44;
  }
  JSC::sanitizeStackForVM((JSC *)v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase(v11 + 37560, v11 + 192, 16, 0, 0, v55, v56, v57);
LABEL_45:
  *(_DWORD *)result = 0;
  v33 = *(_DWORD *)(v15 + 8);
  *(_DWORD *)result = v15 >> 4;
  *(_DWORD *)(result + 4) = v33;
  *(_QWORD *)(result + 8) = v31;
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::constructWithArrayConstructor(JSC *this, uint64_t a2, uint64_t a3, JSC::Structure *a4, __n128 a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t Slow;
  _DWORD *v30;
  unsigned __int32 *v31;
  unint64_t result;
  int v33;
  unint64_t j;
  char **v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  JSC::FunctionRareData *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t InternalFunctionAllocationStructureFromBase;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  JSC::JSObject *SubclassStructure;
  unint64_t v60;
  int v61;
  unint64_t i;
  char **v63;
  uint64_t v64;
  int v65;
  JSC::JSObject *v66;
  __n128 *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  __n128 *v71;
  __n128 *v72;
  __n128 *v73;
  __n128 *v74;
  unint64_t OutOfMemoryError;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  JSC::Exception *v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  unint64_t v89;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const WTF::String *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::AtomStringImpl *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  unint64_t v114;
  JSC::JSGlobalObject *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t FunctionRealm;
  int v119;
  JSC::JSObject *v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  JSC::VM *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t SlowCase;
  unint64_t v137;
  JSC::CallFrame *v138;
  JSC::CallFrame *v139;
  int v140;
  unint64_t v141;
  unsigned int v142;
  int v143;
  uint64_t v144;
  int v145;
  char *v146;
  int v147;
  unint64_t v148;
  WTF::StringImpl *v149;

  v146 = (char *)(a2 + 48);
  v147 = *(_DWORD *)(a2 + 32) - 1;
  v10 = *(_QWORD *)(a2 + 40);
  if (v147 != 1)
  {
    v57 = *((_QWORD *)this + 7);
    if (!v10 || v10 == *((_QWORD *)this + 29))
    {
      v58 = *((_DWORD *)this + 224);
      if (v58)
        SubclassStructure = (JSC::JSObject *)(16 * (v58 & 0xFFFFFFFE));
      else
        SubclassStructure = 0;
    }
    else
    {
      v149 = (WTF::StringImpl *)*((_QWORD *)this + 7);
      for (i = v10; ; i = *(_QWORD *)(i + 16))
      {
        while (1)
        {
          v63 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
          if (v63 != &JSC::JSBoundFunction::s_info && v63 != &JSC::JSRemoteFunction::s_info)
            break;
          i = *(_QWORD *)(i + 32);
        }
        if (*(_BYTE *)(i + 5) != 61)
        {
          v64 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
          goto LABEL_113;
        }
        v129 = v10;
        if (*(_QWORD *)(i + 24) == 2)
          break;
      }
      JSC::throwTypeError((unint64_t)this, &v149, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
      v64 = 0;
      v10 = v129;
LABEL_113:
      if (*(_DWORD *)(v57 + 80)
        && (v89 = v10,
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v57, a2, a3, (uint64_t)a4, v10, a7, a8, a9), v10 = v89, hasExceptionsAfterHandlingTraps))
      {
        SubclassStructure = 0;
      }
      else
      {
        v65 = *(_DWORD *)(v64 + 896);
        if (v65)
          v66 = (JSC::JSObject *)(16 * (v65 & 0xFFFFFFFE));
        else
          v66 = 0;
        SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, (JSC::JSGlobalObject *)v10, v66, a4, v10, a7, a8, a9);
      }
    }
    if (!*(_DWORD *)(v57 + 80))
      return JSC::constructArray((uint64_t)this, (unint64_t)SubclassStructure, (uint64_t)&v146, (uint64_t)a4, v10, a7, a8, a9);
    v88 = *(_DWORD *)(v57 + 80);
    if ((v88 & 0x27) != 0 && (v88 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v57 + 64), 7u, a3, (uint64_t)a4, v10, a7, a8, a9);
    if (!*(_QWORD *)(v57 + 16))
      return JSC::constructArray((uint64_t)this, (unint64_t)SubclassStructure, (uint64_t)&v146, (uint64_t)a4, v10, a7, a8, a9);
    return 0;
  }
  v11 = *(_QWORD *)(a2 + 48);
  v148 = v11;
  if (!(v11 >> 49))
    return JSC::constructArrayNegativeIndexed((unint64_t)this, 0, (JSC::ExecutableBase *)&v148, 1, v10, a7, a8, a9, a5.n128_f64[0]);
  v12 = *((_QWORD *)this + 7);
  if (v11 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v55 = v11 - 0x2000000000000;
    v56 = ((v11 - 0x2000000000000) >> 52) & 0x7FF;
    if ((v56 - 1023) <= 0x53)
    {
      v60 = (unint64_t)v55 >> (51 - ((v11 - 0x2000000000000) >> 52));
      if (v56 > 0x433)
        LODWORD(v60) = v11 << (((v11 - 0x2000000000000) >> 52) - 51);
      if (v56 >= 0x41F)
        v61 = v60;
      else
        v61 = (((1 << (((v11 - 0x2000000000000) >> 52) + 1)) - 1) & v60)
            + (1 << (((v11 - 0x2000000000000) >> 52) + 1));
      if (v55 >= 0)
        LODWORD(v11) = v61;
      else
        LODWORD(v11) = -v61;
    }
    else
    {
      LODWORD(v11) = 0;
    }
    v13 = *(double *)&v55;
  }
  else
  {
    v13 = (double)(int)v11;
  }
  if (v13 != (double)v11)
  {
    v98 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v98 = 0x3A00000002;
    *(_QWORD *)(v98 + 8) = "Array length must be a positive integer of safe magnitude.";
    *(_DWORD *)(v98 + 16) = 4;
    v149 = (WTF::StringImpl *)v98;
    v100 = JSC::createRangeError((unint64_t)this, &v149, v99);
    JSC::VM::throwException((JSC::VM *)v12, this, v100, v101, v102, v103, v104, v105);
    v113 = v149;
    v149 = 0;
    if (v113)
    {
      if (*(_DWORD *)v113 == 2)
      {
        WTF::StringImpl::~StringImpl(v113, v106, v107, v108, v109, v110, v111, v112);
        WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
      }
      else
      {
        *(_DWORD *)v113 -= 2;
      }
    }
    return 0;
  }
  if (v11 >> 27)
  {
    if (v10)
    {
      v115 = (JSC::JSGlobalObject *)v10;
      if (v10 != *((_QWORD *)this + 29))
      {
        FunctionRealm = JSC::getFunctionRealm(this, (JSC::JSGlobalObject *)v10, (JSC::JSObject *)a3);
        if (!*(_DWORD *)(v12 + 80)
          || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v116, v117, (uint64_t)a4, v10, a7, a8, a9))
        {
          v119 = *(_DWORD *)(FunctionRealm + 912);
          if (v119)
            v120 = (JSC::JSObject *)(16 * (v119 & 0xFFFFFFFE));
          else
            v120 = 0;
          InternalFunctionAllocationStructureFromBase = (unint64_t)JSC::InternalFunction::createSubclassStructure(this, v115, v120, a4, v10, a7, a8, a9);
          goto LABEL_208;
        }
LABEL_151:
        v15 = 0;
        goto LABEL_12;
      }
    }
    v14 = *((_DWORD *)this + 228);
LABEL_9:
    if (v14)
      v15 = 16 * (v14 & 0xFFFFFFFE);
    else
      v15 = 0;
    goto LABEL_12;
  }
  if (!v10 || v10 == *((_QWORD *)this + 29))
  {
    v14 = *((_DWORD *)this + 224);
    goto LABEL_9;
  }
  v149 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  for (j = v10; ; j = *(_QWORD *)(j + 16))
  {
    while (1)
    {
      v35 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)j & 0xFFFFFFFE) + 0x4C));
      if (v35 != &JSC::JSBoundFunction::s_info && v35 != &JSC::JSRemoteFunction::s_info)
        break;
      j = *(_QWORD *)(j + 32);
    }
    if (*(_BYTE *)(j + 5) != 61)
    {
      v36 = *(_QWORD *)(16 * (*(_DWORD *)j & 0xFFFFFFFE) + 0x28);
      goto LABEL_58;
    }
    v114 = v10;
    if (*(_QWORD *)(j + 24) == 2)
      break;
  }
  JSC::throwTypeError((unint64_t)this, &v149, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v36 = 0;
  v10 = v114;
LABEL_58:
  if (*(_DWORD *)(v12 + 80))
  {
    v85 = *(_DWORD *)(v12 + 80);
    if ((v85 & 0x27) != 0 && (v85 & 0x20) == 0)
    {
      v137 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, (uint64_t)a4, v10, a7, a8, a9);
      v10 = v137;
    }
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_151;
  }
  v37 = *(_DWORD *)(v36 + 896);
  v38 = 16 * (v37 & 0xFFFFFFFE);
  if (v37)
    v39 = 16 * (v37 & 0xFFFFFFFE);
  else
    v39 = 0;
  v40 = *((_QWORD *)this + 7);
  v41 = *(_QWORD **)(v39 + 40);
  if (*(_BYTE *)(v10 + 5) == 26)
  {
    a2 = *(_QWORD *)(v10 + 24);
    if ((a2 & 1) != 0)
    {
      v50 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v50 + 5) == 8)
        goto LABEL_203;
      v42 = *(_QWORD *)(v50 + 88);
    }
    else
    {
      if (*(_BYTE *)(a2 + 5) == 8)
        goto LABEL_203;
      v42 = *(_QWORD *)(a2 + 88);
    }
    if ((*(_DWORD *)(v42 + 16) & 0x80000000) != 0)
    {
      v130 = *(JSC::VM **)(*(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28) + 56);
      LODWORD(v149) = 0;
      v131 = v10;
      JSC::JSObject::getDirect((_DWORD *)v10, v130, *(_QWORD *)(*((_QWORD *)v130 + 5244) + 2160), (const JSC::PropertyTable *)&v149, v10, a7, a8, a9);
      if (!v132 || (v149 & 0x70) != 0)
      {
        v10 = v131;
        goto LABEL_203;
      }
      v10 = v131;
      a2 = *(_QWORD *)(v131 + 24);
    }
    if ((a2 & 1) != 0)
      v43 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 48);
    else
      v43 = a2;
    v44 = *(_QWORD *)(v43 + 88);
    if (((1 << *(_BYTE *)(v44 + 50)) & 0x78007) != 0 || (v45 = *(_QWORD **)(v44 + 88)) != 0 && *v45)
    {
      if ((a2 & 1) != 0)
      {
        v46 = (JSC::FunctionRareData *)(a2 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        v86 = v10;
        v87 = JSC::FunctionRareData::create((JSC::FunctionRareData *)v40, (JSC::VM *)a2, (JSC::ExecutableBase *)a3, (uint64_t)a4, v10, a7, a8, a9);
        v10 = v86;
        v46 = (JSC::FunctionRareData *)v87;
        __dmb(0xAu);
        *(_QWORD *)(v86 + 24) = v87 | 1;
        if (v87)
        {
          if (*(_DWORD *)(v40 + 760) >= *(unsigned __int8 *)(v86 + 7))
            JSC::Heap::writeBarrierSlowPath(v40 + 192, v86);
          v10 = v86;
        }
      }
      v47 = *((_DWORD *)v46 + 10) & 0xFFFFFFFE;
      if (!(_DWORD)v47
        || (v15 = 16 * v47, 16 * *(unsigned int *)(16 * v47 + 0x4C) != 16 * *(unsigned int *)(v39 + 76))
        || *(_QWORD **)(16 * v47 + 0x28) != v41)
      {
        v48 = JSC::JSObject::get((unsigned int *)v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v40 + 41952) + 2160), (uint64_t)a4, v10, a7, a8, a9);
        if ((v48 & 0xFFFE000000000002) != 0 || (a4 = (JSC::Structure *)v48, *(unsigned __int8 *)(v48 + 5) < 0x17u))
        {
          v15 = v38;
          goto LABEL_12;
        }
        InternalFunctionAllocationStructureFromBase = JSC::FunctionRareData::createInternalFunctionAllocationStructureFromBase(v46, (JSC::VM *)v40, (JSC::JSGlobalObject *)v41, (JSC::JSObject *)v48, (JSC::Structure *)v39, a5.n128_f64[0]);
LABEL_208:
        v15 = InternalFunctionAllocationStructureFromBase;
        goto LABEL_12;
      }
      goto LABEL_12;
    }
  }
LABEL_203:
  v138 = (JSC::CallFrame *)JSC::JSObject::get((unsigned int *)v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v40 + 41952) + 2160), (uint64_t)a4, v10, a7, a8, a9);
  a3 = (uint64_t)v138;
  if (*(_DWORD *)(v40 + 80))
  {
    v139 = v138;
    v140 = *(_DWORD *)(v40 + 80);
    if ((v140 & 0x27) != 0 && (v140 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v40 + 64), 7u, (uint64_t)v138, (uint64_t)a4, v10, a7, a8, a9);
    a3 = (uint64_t)v139;
    if (*(_QWORD *)(v40 + 16))
      goto LABEL_151;
  }
  v15 = v38;
  if (*(_BYTE *)(v41[256] + 4) == 2)
  {
    v141 = *(unsigned __int8 *)(v39 + 8);
    v142 = (v141 >> 1) & 7;
    if ((v141 & 0x10) != 0)
      v142 = ((v141 & 0xE) + 10) >> 1;
    v143 = *((_DWORD *)v41 + v142 + 213);
    if (v143)
      v144 = 16 * (v143 & 0xFFFFFFFE);
    else
      v144 = 0;
    v15 = v38;
    if (v144 == v39)
    {
      v145 = *((_DWORD *)v41 + ((v141 >> 1) & 7) + 223);
      if (v145)
        v15 = 16 * (v145 & 0xFFFFFFFE);
      else
        v15 = 0;
    }
  }
  if ((a3 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
  {
    InternalFunctionAllocationStructureFromBase = JSC::StructureCache::emptyStructureForPrototypeFromBaseStructure((JSC::StructureCache *)(v41 + 246), (JSC::JSGlobalObject *)v41, (JSC::JSObject *)a3, (JSC::Structure *)v15, a5.n128_f64[0]);
    goto LABEL_208;
  }
LABEL_12:
  if (*(_DWORD *)(v12 + 80))
  {
    v68 = *(_DWORD *)(v12 + 80);
    if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, (uint64_t)a4, v10, a7, a8, a9);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  v16 = *(unsigned __int16 *)(v15 + 24);
  if (v16 == 65534
    || (v16 == 0xFFFF ? (v17 = *(_DWORD *)(*(_QWORD *)(v15 + 64) + 84)) : (v17 = *(unsigned __int16 *)(v15 + 24)),
        v17 < 64))
  {
    v18 = 0;
  }
  else if ((v17 - 63) >= 5)
  {
    v51 = (v17 - 64) | ((v17 - 64) >> 1) | (((v17 - 64) | ((v17 - 64) >> 1)) >> 2);
    v52 = v51 | (v51 >> 4) | ((v51 | (v51 >> 4)) >> 8);
    v18 = (v52 | HIWORD(v52)) + 1;
  }
  else
  {
    v18 = 4;
  }
  v19 = *(_BYTE *)(v15 + 8) & 0xE;
  if (v19 > 9)
  {
    v69 = *(_QWORD *)(v12 + 6768);
    if (v69)
    {
      v70 = *(unsigned int *)(v69 + 60);
      v71 = *(__n128 **)(v69 + 24);
      if ((unint64_t)v71 < *(_QWORD *)(v69 + 32))
      {
        *(_QWORD *)(v69 + 24) = (char *)v71 + v70;
LABEL_132:
        if (!v71)
          goto LABEL_140;
        v72 = v71;
LABEL_134:
        v71->n128_u64[0] = v11 | 0x400000000;
        v73 = v72;
        v74 = v72;
        a5.n128_u64[0] = 0;
        while (v72 != v74)
        {
          *v72 = a5;
          v72[1] = a5;
          v72[2] = a5;
          v72[3] = a5;
          v72 += 4;
        }
        while (v72 != v73)
        {
          v72->n128_u64[0] = 0;
          v72 = (__n128 *)((char *)v72 + 8);
        }
        *(__n128 *)((char *)v71 + 8) = 0u;
        v31 = &v71->n128_u32[2];
        *((_OWORD *)v31 + 1) = 0u;
        *((_OWORD *)v31 + 2) = 0u;
        goto LABEL_43;
      }
      v72 = *(__n128 **)(v69 + 40);
      if ((v72 & 1) == 0)
      {
        v91 = v72->n128_u64[1] ^ *(_QWORD *)(v69 + 48);
        *(_QWORD *)(v69 + 32) = (char *)v72 + HIDWORD(v91);
        *(_QWORD *)(v69 + 40) = (char *)v72 + (int)v91;
        *(_QWORD *)(v69 + 24) = (char *)v72 + v70;
        v71 = v72;
        goto LABEL_134;
      }
      JSC::sanitizeStackForVM((JSC *)v12, (JSC::VM *)a2, a3, (uint64_t)a4, v10, a7, a8, a9);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v69, v12 + 192, v70, 0, 1, v133, v134, v135);
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v12 + 6648, (JSC *)v12, 0x38uLL, 0, v10, a7, a8, a9);
    }
    v71 = (__n128 *)SlowCase;
    goto LABEL_132;
  }
  if (v11 > 0x10000000)
    goto LABEL_140;
  if (v16 == 65534)
    goto LABEL_24;
  if (v16 == 0xFFFF)
    v16 = *(_DWORD *)(*(_QWORD *)(v15 + 64) + 84);
  if (v16 < 64)
  {
LABEL_24:
    v20 = 0;
  }
  else if ((v16 - 63) >= 5)
  {
    v53 = (v16 - 64) | ((v16 - 64) >> 1) | (((v16 - 64) | ((v16 - 64) >> 1)) >> 2);
    v54 = v53 | (v53 >> 4) | ((v53 | (v53 >> 4)) >> 8);
    v20 = (v54 | HIWORD(v54)) + 1;
  }
  else
  {
    v20 = 4;
  }
  v21 = v20;
  LODWORD(v22) = v11 <= 3 ? 3 : v11;
  v22 = (_DWORD)v11 ? v22 : 5;
  v23 = v22 + v20;
  v24 = 8 * v23;
  if (v23 > 9)
    v25 = v23 > 0x3EB
        ? v24 + 8
        : *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                          + (((unint64_t)(v24 + 23) >> 2) & 0x7FFFFFFFCLL));
  else
    v25 = (v24 + 23) & 0x1FFFFFFFF0;
  v26 = v25 - 8 * v21 - 8;
  a3 = (v26 & 0x7FFFFFFF8) + 8 * v18 + 8;
  if ((unint64_t)a3 <= 0x1F60
    && (v27 = *(_QWORD *)(v12 + ((((v26 & 0x7FFFFFFF8) + 8 * v18 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
  {
    v28 = *(unsigned int *)(v27 + 60);
    Slow = *(_QWORD *)(v27 + 24);
    if (Slow >= *(_QWORD *)(v27 + 32))
    {
      Slow = *(_QWORD *)(v27 + 40);
      if ((Slow & 1) == 0)
      {
        v84 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v27 + 48);
        *(_QWORD *)(v27 + 32) = Slow + HIDWORD(v84);
        *(_QWORD *)(v27 + 40) = Slow + (int)v84;
        *(_QWORD *)(v27 + 24) = Slow + v28;
        goto LABEL_38;
      }
      JSC::sanitizeStackForVM((JSC *)v12, (JSC::VM *)a2, a3, (uint64_t)a4, v10, a7, a8, a9);
      Slow = JSC::LocalAllocator::allocateSlowCase(v27, v12 + 192, v28, 0, 1, v95, v96, v97);
    }
    else
    {
      *(_QWORD *)(v27 + 24) = Slow + v28;
    }
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v12 + 6648, (JSC *)v12, a3, 0, v10, a7, a8, a9);
  }
  if (!Slow)
  {
LABEL_140:
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, (JSC::JSGlobalObject *)a2);
    v82 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v82 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)OutOfMemoryError, 0, v76, v77, v78, v79, v80);
    }
    JSC::VM::throwException((JSC::VM *)v12, this, v82, v81, v76, v77, v78, v79, v80);
    return 0;
  }
LABEL_38:
  a2 = v26 >> 3;
  if ((v26 >> 3) >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x198892A20);
  }
  v30 = (_DWORD *)(Slow + 8 * v18);
  v31 = v30 + 2;
  *v30 = v11;
  v30[1] = a2;
  if (v19 == 6)
  {
    if (a2 > 0x63)
    {
      JSC::clearArrayMemset((JSC *)(v30 + 2), (double *)a2);
    }
    else if ((_DWORD)a2)
    {
      memset_pattern16(v30 + 2, &memset_pattern_1, v26 & 0x7FFFFFFF8);
    }
  }
  else if (a2 > 0x63)
  {
    v67 = (__n128 *)(v30 + 2);
    a5.n128_u64[0] = 0;
    while (v67 != (__n128 *)((char *)v31 + (v26 & 0x7FFFFFFC0)))
    {
      *v67 = a5;
      v67[1] = a5;
      v67[2] = a5;
      v67[3] = a5;
      v67 += 4;
    }
    while (v67 != (__n128 *)((char *)v31 + (v26 & 0x7FFFFFFF8)))
    {
      v67->n128_u64[0] = 0;
      v67 = (__n128 *)((char *)v67 + 8);
    }
  }
  else if ((_DWORD)a2)
  {
    bzero(v30 + 2, v26 & 0x7FFFFFFF8);
  }
LABEL_43:
  result = *(_QWORD *)(v12 + 37584);
  if (result < *(_QWORD *)(v12 + 37592))
  {
LABEL_44:
    *(_QWORD *)(v12 + 37584) = result + 16;
    goto LABEL_45;
  }
  result = *(_QWORD *)(v12 + 37600);
  if ((result & 1) == 0)
  {
    v83 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v12 + 37608);
    *(_QWORD *)(v12 + 37592) = result + HIDWORD(v83);
    *(_QWORD *)(v12 + 37600) = result + (int)v83;
    goto LABEL_44;
  }
  JSC::sanitizeStackForVM((JSC *)v12, (JSC::VM *)a2, a3, (uint64_t)a4, v10, a7, a8, a9);
  result = JSC::LocalAllocator::allocateSlowCase(v12 + 37560, v12 + 192, 16, 0, 0, v92, v93, v94);
LABEL_45:
  *(_DWORD *)result = 0;
  v33 = *(_DWORD *)(v15 + 8);
  *(_DWORD *)result = v15 >> 4;
  *(_DWORD *)(result + 4) = v33;
  *(_QWORD *)(result + 8) = v31;
  if (*(_BYTE *)(v12 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::ArrayConstructor::finishCreation(JSC::JSObject *a1, JSC::BuiltinExecutables **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::BuiltinExecutables **v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  JSC::VM *v22;
  WTF::StringImpl *v23;
  uint64_t IsArrayCodeExecutable;
  _DWORD *v25;
  uint64_t v26;
  double v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  double v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  double v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __n128 v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t IsArrayCodeGenerator;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __n128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __n128 v152;
  _DWORD *v153;
  __int128 v154;

  v12 = a2 + 11644;
  v13 = a2 + 5244;
  JSC::InternalFunction::finishCreation((unint64_t)a1, (JSC *)a2, (const WTF::String *)1, (JSC::BuiltinExecutables *)((char *)a2[5244] + 504), 1, a6, a7, a8);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*v13 + 2160), a4, 14, v14, v15, v16, v17);
  JSC::JSObject::putDirectNonIndexAccessorWithoutTransition((unsigned int *)a1, (uint64_t)a2, *(_QWORD *)(*v13 + 2752), *(_QWORD *)(a3 + 1616), (const JSC::PropertyTable *)0x16, v18, v19, v20, v21);
  v23 = *(WTF::StringImpl **)(*v13 + 1664);
  if (v23)
  {
    *(_DWORD *)v23 += 2;
    IsArrayCodeExecutable = JSC::BuiltinExecutables::arrayConstructorIsArrayCodeExecutable(*v12);
    v25 = (_DWORD *)*((_QWORD *)*v12 + 1);
    ++v25[2];
    v153 = v25;
    v154 = xmmword_199125390;
    v34 = JSC::UnlinkedFunctionExecutable::link(IsArrayCodeExecutable, (uint64_t)a2, 0, (uint64_t)&v153, 0, 0, 0, v26, COERCE_DOUBLE(0x18C7D00018BD4), v27, v28);
    v35 = v153;
    v153 = 0;
    if (v35)
    {
      if (v35[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
      else
        --v35[2];
    }
    v36 = JSC::JSFunction::create((uint64_t)a2, v34, (_DWORD *)a3, v29, v30, v31, v32, v33);
    JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v23, v36, 4, v37, v38, v39, v40);
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  else
  {
    IsArrayCodeGenerator = JSC::arrayConstructorIsArrayCodeGenerator(a2, v22);
    v137 = JSC::JSFunction::create((uint64_t)a2, IsArrayCodeGenerator, (_DWORD *)a3, v132, v133, v134, v135, v136);
    JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, 0, v137, 4, v138, v139, v140, v141);
  }
  JSC::Symbols::fromPrivateName[0] += 4;
  v48 = JSC::BuiltinExecutables::arrayConstructorFromCodeExecutable(*v12);
  v49 = (_DWORD *)*((_QWORD *)*v12 + 1);
  ++v49[2];
  v153 = v49;
  v154 = xmmword_199125250;
  v58 = JSC::UnlinkedFunctionExecutable::link(v48, (uint64_t)a2, 0, (uint64_t)&v153, 0, 0, 0, v50, COERCE_DOUBLE(0x14A8000014404), v51, v52);
  v59 = v153;
  v153 = 0;
  if (v59)
  {
    if (v59[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v59 + 8))(v59);
    else
      --v59[2];
  }
  v60 = JSC::JSFunction::create((uint64_t)a2, v58, (_DWORD *)a3, v53, v54, v55, v56, v57);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)JSC::Symbols::fromPrivateName, v60, 4, v61, v62, v63, v64);
  v72 = JSC::Symbols::fromPrivateName[0] - 2;
  if (JSC::Symbols::fromPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::fromPrivateName, v65, v66, v67, v68, v69, v70, v71);
    WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    v72 = JSC::Symbols::fromPrivateName[0];
  }
  else
  {
    JSC::Symbols::fromPrivateName[0] -= 2;
  }
  v73 = v72 - 2;
  if (v73)
  {
    JSC::Symbols::fromPrivateName[0] = v73;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::fromPrivateName, v65, v66, v67, v68, v69, v70, v71);
    WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
  }
  if (BYTE1(qword_1ECF4C7A0))
  {
    v74 = *(WTF::StringImpl **)(*(_QWORD *)(*v13 + 48) + 656);
    if (v74)
    {
      *(_DWORD *)v74 += 2;
      v75 = JSC::BuiltinExecutables::arrayConstructorFromAsyncCodeExecutable(*v12);
      v76 = (_DWORD *)*((_QWORD *)*v12 + 1);
      ++v76[2];
      v153 = v76;
      v154 = xmmword_199125270;
      v85 = JSC::UnlinkedFunctionExecutable::link(v75, (uint64_t)a2, 0, (uint64_t)&v153, 0, 0, 0, v77, COERCE_DOUBLE(0x1574D000151B4), v78, v79);
      v86 = v153;
      v153 = 0;
      if (v86)
      {
        if (v86[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v86 + 8))(v86);
        else
          --v86[2];
      }
      v87 = JSC::JSFunction::create((uint64_t)a2, v85, (_DWORD *)a3, v80, v81, v82, v83, v84);
      JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v74, v87, 4, v88, v89, v90, v91);
      if (*(_DWORD *)v74 == 2)
      {
        WTF::StringImpl::~StringImpl(v74, v92, v93, v94, v95, v96, v97, v98);
        WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
      }
      else
      {
        *(_DWORD *)v74 -= 2;
      }
    }
    else
    {
      v142 = JSC::arrayConstructorFromAsyncCodeGenerator(a2, v65);
      v148 = JSC::JSFunction::create((uint64_t)a2, v142, (_DWORD *)a3, v143, v144, v145, v146, v147);
      JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, 0, v148, 4, v149, v150, v151, v152);
    }
  }
}

unint64_t JSC::constructArrayWithSizeQuirk(unint64_t a1, JSC::VM *a2, unint64_t a3, JSC::JSGlobalObject *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v10;
  unsigned int v12;
  uint64_t v13;
  double v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unint64_t SubclassStructure;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t Slow;
  unsigned int *v37;
  unsigned __int32 *v38;
  unint64_t result;
  int v40;
  JSC::JSGlobalObject *i;
  char **v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  JSC::JSObject *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  unsigned int v57;
  __n128 *v58;
  int v59;
  uint64_t v60;
  __n128 *v61;
  __n128 *v62;
  __n128 *v63;
  __n128 *v64;
  unint64_t OutOfMemoryError;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  JSC::Exception *v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const WTF::String *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t FunctionRealm;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t SlowCase;
  uint64_t v115;
  unint64_t v116;
  WTF::StringImpl *v117;

  v10 = a2;
  v116 = a3;
  if (!(a3 >> 49))
    return JSC::constructArrayNegativeIndexed(a1, (uint64_t)a2, (JSC::ExecutableBase *)&v116, 1, (unint64_t)a4, a6, a7, a8, a9.n128_f64[0]);
  v12 = a3;
  v13 = *(_QWORD *)(a1 + 56);
  if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v51 = a3 - 0x2000000000000;
    v52 = ((a3 - 0x2000000000000) >> 52) & 0x7FF;
    if ((v52 - 1023) <= 0x53)
    {
      v56 = (unint64_t)v51 >> (51 - ((a3 - 0x2000000000000) >> 52));
      if (v52 > 0x433)
        LODWORD(v56) = a3 << (((a3 - 0x2000000000000) >> 52) - 51);
      if (v52 >= 0x41F)
        v57 = v56;
      else
        v57 = (((1 << (((a3 - 0x2000000000000) >> 52) + 1)) - 1) & v56)
            + (1 << (((a3 - 0x2000000000000) >> 52) + 1));
      if (v51 >= 0)
        v12 = v57;
      else
        v12 = -v57;
    }
    else
    {
      v12 = 0;
    }
    *(_QWORD *)&v14 = a3 - 0x2000000000000;
  }
  else
  {
    v14 = (double)(int)a3;
  }
  if (v14 != (double)v12)
  {
    v84 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v84 = 0x3A00000002;
    *(_QWORD *)(v84 + 8) = "Array length must be a positive integer of safe magnitude.";
    *(_DWORD *)(v84 + 16) = 4;
    v117 = (WTF::StringImpl *)v84;
    v86 = JSC::createRangeError(a1, &v117, v85);
    JSC::VM::throwException((JSC::VM *)v13, (JSC::JSGlobalObject *)a1, v86, v87, v88, v89, v90, v91);
    v99 = v117;
    v117 = 0;
    if (v99)
    {
      if (*(_DWORD *)v99 == 2)
      {
        WTF::StringImpl::~StringImpl(v99, v92, v93, v94, v95, v96, v97, v98);
        WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
      }
      else
      {
        *(_DWORD *)v99 -= 2;
      }
    }
    return 0;
  }
  if (!(v12 >> 27))
  {
    if (a2)
    {
      v15 = *(_QWORD *)a2;
      v16 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFLL;
      if (v16)
      {
        v17 = *(_BYTE *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFLL) + 4);
        v18 = HIBYTE(v15);
        if ((v17 & 0xF) != HIBYTE(v15))
        {
          *(_QWORD *)a2 = v15 & 0xFFFF000000000000;
          if (byte_1ECF4C722)
          {
            v53 = HIWORD(v15);
            v54 = HIBYTE(v15) & 0xF;
            if (v54 <= (v17 & 0xFu))
              LODWORD(v54) = v17 & 0xF;
            if ((v18 & 0x10) != 0)
            {
              if (v54 >= 0xA)
                LODWORD(v54) = 9;
              LODWORD(v54) = v54 | 0x10;
            }
            if ((v17 & 0xE) != 0)
              v55 = *(_DWORD *)(*(_QWORD *)(v16 + 8) - 4);
            else
              v55 = 0;
            if (v53 > v55)
              v55 = v53;
            if (v55 >= 0x19)
              v55 = 25;
            v15 = (unint64_t)(v55 | ((_DWORD)v54 << 8)) << 48;
            *(_QWORD *)a2 = v15;
          }
          else
          {
            v15 &= 0xFFFF000000000000;
          }
        }
      }
      v19 = HIBYTE(v15);
      if (a4)
      {
LABEL_60:
        if (*(JSC::JSGlobalObject **)(a1 + 232) != a4)
        {
          v117 = (WTF::StringImpl *)v13;
          for (i = a4; ; i = (JSC::JSGlobalObject *)*((_QWORD *)i + 2))
          {
            while (1)
            {
              v42 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
              if (v42 != &JSC::JSBoundFunction::s_info && v42 != &JSC::JSRemoteFunction::s_info)
                break;
              i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
            }
            if (*((_BYTE *)i + 5) != 61)
            {
              v43 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
              goto LABEL_66;
            }
            if (*((_QWORD *)i + 3) == 2)
              break;
          }
          JSC::throwTypeError(a1, &v117, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
          v43 = 0;
LABEL_66:
          if (*(_DWORD *)(v13 + 80))
          {
            v75 = *(_DWORD *)(v13 + 80);
            if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v13 + 16))
              goto LABEL_140;
          }
          v44 = (v19 >> 1) & 7;
          if ((v19 & 0x10) != 0)
            v44 = ((v19 & 0xE) + 10) >> 1;
          v45 = *(_DWORD *)(v43 + 4 * v44 + 892);
LABEL_70:
          if (v45)
            v46 = (JSC::JSObject *)(16 * (v45 & 0xFFFFFFFE));
          else
            v46 = 0;
          SubclassStructure = (unint64_t)JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)a1, a4, v46, a4, a5, a6, a7, a8);
          goto LABEL_18;
        }
      }
    }
    else
    {
      LODWORD(v19) = 3;
      if (a4)
        goto LABEL_60;
    }
    v20 = (v19 >> 1) & 7;
    if ((v19 & 0x10) != 0)
      v20 = ((v19 & 0xE) + 10) >> 1;
    v21 = *(_DWORD *)(a1 + 4 * v20 + 892);
    goto LABEL_15;
  }
  if (!a4 || *(JSC::JSGlobalObject **)(a1 + 232) == a4)
  {
    v21 = *(_DWORD *)(a1 + 912);
LABEL_15:
    if (v21)
      SubclassStructure = 16 * (v21 & 0xFFFFFFFE);
    else
      SubclassStructure = 0;
    goto LABEL_18;
  }
  FunctionRealm = JSC::getFunctionRealm((JSC *)a1, a4, (JSC::JSObject *)a3);
  if (!*(_DWORD *)(v13 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, v100, v101, (uint64_t)a4, a5, a6, a7, a8))
  {
    v45 = *(_DWORD *)(FunctionRealm + 912);
    goto LABEL_70;
  }
LABEL_140:
  SubclassStructure = 0;
LABEL_18:
  if (*(_DWORD *)(v13 + 80))
  {
    v59 = *(_DWORD *)(v13 + 80);
    if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  v23 = *(unsigned __int16 *)(SubclassStructure + 24);
  if (v23 == 65534
    || (v23 == 0xFFFF
      ? (v24 = *(_DWORD *)(*(_QWORD *)(SubclassStructure + 64) + 84))
      : (v24 = *(unsigned __int16 *)(SubclassStructure + 24)),
        v24 < 64))
  {
    v25 = 0;
  }
  else if ((v24 - 63) >= 5)
  {
    v47 = (v24 - 64) | ((v24 - 64) >> 1) | (((v24 - 64) | ((v24 - 64) >> 1)) >> 2);
    v48 = v47 | (v47 >> 4) | ((v47 | (v47 >> 4)) >> 8);
    v25 = (v48 | HIWORD(v48)) + 1;
  }
  else
  {
    v25 = 4;
  }
  v26 = *(_BYTE *)(SubclassStructure + 8) & 0xE;
  if (v26 > 9)
  {
    v60 = *(_QWORD *)(v13 + 6768);
    if (v60)
    {
      v61 = *(__n128 **)(v60 + 24);
      if ((unint64_t)v61 < *(_QWORD *)(v60 + 32))
      {
        *(_QWORD *)(v60 + 24) = (char *)v61 + *(unsigned int *)(v60 + 60);
LABEL_121:
        if (!v61)
          goto LABEL_129;
        v62 = v61;
LABEL_123:
        v61->n128_u64[0] = v12 | 0x400000000;
        v63 = v62;
        v64 = v62;
        a9.n128_u64[0] = 0;
        while (v62 != v64)
        {
          *v62 = a9;
          v62[1] = a9;
          v62[2] = a9;
          v62[3] = a9;
          v62 += 4;
        }
        while (v62 != v63)
        {
          v62->n128_u64[0] = 0;
          v62 = (__n128 *)((char *)v62 + 8);
        }
        *(__n128 *)((char *)v61 + 8) = 0u;
        v38 = &v61->n128_u32[2];
        *((_OWORD *)v38 + 1) = 0u;
        *((_OWORD *)v38 + 2) = 0u;
        goto LABEL_49;
      }
      v76 = *(unsigned int *)(v60 + 60);
      v62 = *(__n128 **)(v60 + 40);
      if ((v62 & 1) == 0)
      {
        v77 = v62->n128_u64[1] ^ *(_QWORD *)(v60 + 48);
        *(_QWORD *)(v60 + 32) = (char *)v62 + HIDWORD(v77);
        *(_QWORD *)(v60 + 40) = (char *)v62 + (int)v77;
        *(_QWORD *)(v60 + 24) = (char *)v62 + v76;
        v61 = v62;
        goto LABEL_123;
      }
      JSC::sanitizeStackForVM((JSC *)v13, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v60, v13 + 192, v76, 0, 1, v111, v112, v113);
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v13 + 6648, (JSC *)v13, 0x38uLL, 0, a5, a6, a7, a8);
    }
    v61 = (__n128 *)SlowCase;
    goto LABEL_121;
  }
  if (v12 > 0x10000000)
    goto LABEL_129;
  if (v23 == 65534)
    goto LABEL_30;
  if (v23 == 0xFFFF)
    v23 = *(_DWORD *)(*(_QWORD *)(SubclassStructure + 64) + 84);
  if (v23 < 64)
  {
LABEL_30:
    v27 = 0;
  }
  else if ((v23 - 63) >= 5)
  {
    v49 = (v23 - 64) | ((v23 - 64) >> 1) | (((v23 - 64) | ((v23 - 64) >> 1)) >> 2);
    v50 = v49 | (v49 >> 4) | ((v49 | (v49 >> 4)) >> 8);
    v27 = (v50 | HIWORD(v50)) + 1;
  }
  else
  {
    v27 = 4;
  }
  v28 = v27;
  LODWORD(v29) = v12 <= 3 ? 3 : v12;
  v29 = v12 ? v29 : 5;
  v30 = v29 + v27;
  v31 = 8 * v30;
  if (v30 > 9)
    v32 = v30 > 0x3EB
        ? v31 + 8
        : *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                          + (((unint64_t)(v31 + 23) >> 2) & 0x7FFFFFFFCLL));
  else
    v32 = (v31 + 23) & 0x1FFFFFFFF0;
  v33 = v32 - 8 * v28 - 8;
  a3 = (v33 & 0x7FFFFFFF8) + 8 * v25 + 8;
  if (a3 <= 0x1F60
    && (v34 = *(_QWORD *)(v13 + ((((v33 & 0x7FFFFFFF8) + 8 * v25 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
  {
    v35 = *(unsigned int *)(v34 + 60);
    Slow = *(_QWORD *)(v34 + 24);
    if (Slow >= *(_QWORD *)(v34 + 32))
    {
      Slow = *(_QWORD *)(v34 + 40);
      if ((Slow & 1) == 0)
      {
        v74 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v34 + 48);
        *(_QWORD *)(v34 + 32) = Slow + HIDWORD(v74);
        *(_QWORD *)(v34 + 40) = Slow + (int)v74;
        *(_QWORD *)(v34 + 24) = Slow + v35;
        goto LABEL_44;
      }
      v115 = *(unsigned int *)(v34 + 60);
      JSC::sanitizeStackForVM((JSC *)v13, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      Slow = JSC::LocalAllocator::allocateSlowCase(v34, v13 + 192, v115, 0, 1, v81, v82, v83);
    }
    else
    {
      *(_QWORD *)(v34 + 24) = Slow + v35;
    }
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v13 + 6648, (JSC *)v13, a3, 0, a5, a6, a7, a8);
  }
  if (!Slow)
  {
LABEL_129:
    OutOfMemoryError = JSC::createOutOfMemoryError(a1, a2);
    v72 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v72 = (JSC::Exception *)JSC::Exception::create(v13, (JSC::VM *)OutOfMemoryError, 0, v66, v67, v68, v69, v70);
    }
    JSC::VM::throwException((JSC::VM *)v13, (JSC::JSGlobalObject *)a1, v72, v71, v66, v67, v68, v69, v70);
    return 0;
  }
LABEL_44:
  a2 = (JSC::VM *)(v33 >> 3);
  if ((v33 >> 3) >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x198893990);
  }
  v37 = (unsigned int *)(Slow + 8 * v25);
  v38 = v37 + 2;
  *v37 = v12;
  v37[1] = a2;
  if (v26 == 6)
  {
    if (a2 > 0x63)
    {
      JSC::clearArrayMemset((JSC *)(v37 + 2), (double *)a2);
    }
    else if ((_DWORD)a2)
    {
      memset_pattern16(v37 + 2, &memset_pattern_1, v33 & 0x7FFFFFFF8);
    }
  }
  else if (a2 > 0x63)
  {
    v58 = (__n128 *)(v37 + 2);
    a9.n128_u64[0] = 0;
    while (v58 != (__n128 *)((char *)v38 + (v33 & 0x7FFFFFFC0)))
    {
      *v58 = a9;
      v58[1] = a9;
      v58[2] = a9;
      v58[3] = a9;
      v58 += 4;
    }
    while (v58 != (__n128 *)((char *)v38 + (v33 & 0x7FFFFFFF8)))
    {
      v58->n128_u64[0] = 0;
      v58 = (__n128 *)((char *)v58 + 8);
    }
  }
  else if ((_DWORD)a2)
  {
    bzero(v37 + 2, v33 & 0x7FFFFFFF8);
  }
LABEL_49:
  result = *(_QWORD *)(v13 + 37584);
  if (result >= *(_QWORD *)(v13 + 37592))
  {
    result = *(_QWORD *)(v13 + 37600);
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v13, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      result = JSC::LocalAllocator::allocateSlowCase(v13 + 37560, v13 + 192, 16, 0, 0, v78, v79, v80);
      goto LABEL_51;
    }
    v73 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v13 + 37608);
    *(_QWORD *)(v13 + 37592) = result + HIDWORD(v73);
    *(_QWORD *)(v13 + 37600) = result + (int)v73;
  }
  *(_QWORD *)(v13 + 37584) = result + 16;
LABEL_51:
  *(_DWORD *)result = 0;
  v40 = *(_DWORD *)(SubclassStructure + 8);
  *(_DWORD *)result = SubclassStructure >> 4;
  *(_DWORD *)(result + 4) = v40;
  *(_QWORD *)(result + 8) = v38;
  if (*(_BYTE *)(v13 + 755))
    __dmb(0xAu);
  if (v10)
    *(_QWORD *)v10 = result | ((unint64_t)*((unsigned __int16 *)v10 + 3) << 48);
  return result;
}

uint64_t JSC::isArraySlow(JSC *this, JSC::JSGlobalObject *a2, JSC::ProxyObject *a3)
{
  JSC::VM *v4;
  int v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  JSC::VM *v32;
  _QWORD v33[2];
  _QWORD v34[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v32 = v4;
  while (*((_QWORD *)a2 + 3) != 2)
  {
    a2 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 2);
    v5 = *((unsigned __int8 *)a2 + 5);
    if ((v5 - 36) < 2)
      return 1;
    if (v5 != 61)
      return 0;
  }
  v7 = (_QWORD *)*((_QWORD *)v4 + 5);
  if (!v7)
    goto LABEL_26;
  v8 = v7[3];
  if ((v8 & 0xFFFE000000000007) == 3
    || *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x28) + 96) == v8)
  {
    v29 = *((_QWORD *)v4 + 6);
    while (1)
    {
      v7 = (_QWORD *)*v7;
      if (v7 == (_QWORD *)v29)
      {
        v30 = vmEntryRecord(v29);
        v29 = *(_QWORD *)(v30 + 16);
        v7 = *(_QWORD **)(v30 + 8);
      }
      if (!v7)
        break;
      v8 = v7[3];
      if ((v8 & 0xFFFE000000000007) != 3)
      {
        if (v8)
          goto LABEL_10;
        break;
      }
    }
LABEL_26:
    v9 = "Array.isArray";
    goto LABEL_27;
  }
LABEL_10:
  v9 = "Array.isArray";
  if (*(_BYTE *)(v8 + 5) == 26)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x28) + 512);
    if ((v10 & 1) != 0)
      v10 = 0;
    v11 = v8 == v10;
    v12 = 14;
    if (v11)
    {
      v12 = 26;
      v9 = "Object.prototype.toString";
    }
    goto LABEL_15;
  }
LABEL_27:
  v12 = 14;
LABEL_15:
  v34[0] = v9;
  v34[1] = v12;
  v33[0] = " cannot be called on a Proxy that has been revoked";
  v33[1] = 51;
  result = (uint64_t)WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(v34, (uint64_t)v33, (int **)&v31);
  if (v31)
  {
    JSC::throwTypeError((unint64_t)this, &v32, &v31);
    v20 = v31;
    v31 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      else
      {
        *(_DWORD *)v20 -= 2;
      }
    }
    return 0;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::arrayConstructorPrivateFuncIsArraySlow(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  int v6;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  const char *v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  JSC::VM *v31;

  v4 = *((_QWORD *)a2 + 6);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v31 = v5;
  while (1)
  {
    if (*(_QWORD *)(v4 + 24) == 2)
    {
      v8 = JSC::VM::topJSCallFrame(v5);
      if (!v8 || ((v9 = v8[3]) != 0 ? (v10 = (v9 & 0xFFFE000000000007) == 3) : (v10 = 1), v10))
      {
        v11 = "Array.isArray";
      }
      else
      {
        v11 = "Array.isArray";
        if (*(_BYTE *)(v9 + 5) == 26)
        {
          v21 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x28) + 512);
          if ((v21 & 1) != 0)
            v21 = 0;
          if (v21 == v9)
            v12 = 26;
          else
            v12 = 14;
          if (v21 == v9)
            v11 = "Object.prototype.toString";
          goto LABEL_16;
        }
      }
      v12 = 14;
LABEL_16:
      WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)v11, v12, (uint64_t)" cannot be called on a Proxy that has been revoked", 51, (int **)&v30);
      JSC::throwTypeError((unint64_t)this, &v31, &v30);
      v20 = v30;
      v30 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
          WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
      }
      return 6;
    }
    v4 = *(_QWORD *)(v4 + 16);
    v6 = *(unsigned __int8 *)(v4 + 5);
    if ((v6 - 36) < 2)
      return 7;
    if (v6 != 61)
      return 6;
  }
}

uint64_t std::__optional_destruct_base<JSC::AbstractModuleRecord::ExportEntry,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if (*(_BYTE *)(a1 + 40))
  {
    v9 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v9 -= 2;
      }
    }
    v10 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
    v11 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
      }
      else
      {
        *(_DWORD *)v11 -= 2;
      }
    }
    v12 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
      }
      else
      {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
  return a1;
}

_QWORD *WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ExportEntry>,WTF::HashTableTraits>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[6 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[6 * v1];
  if ((_DWORD)v1)
  {
    v3 = 48 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 6;
      v3 -= 48;
      if (!v3)
        return v2;
    }
  }
  return result;
}

char *WTF::Vector<JSC::AbstractModuleRecord *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::AbstractModuleRecord *&>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  result = WTF::Vector<JSC::AbstractModuleRecord *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *(_QWORD *)result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

char *WTF::Vector<JSC::AbstractModuleRecord *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v25 = *a1;
        return &v25[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 9)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 8;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v25 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v25 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
          v25 = *a1;
        }
        return &v25[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x19889422CLL);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 9)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 8;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return (char *)v3;
}

uint64_t WTF::HashTable<JSC::AbstractModuleRecord *,JSC::AbstractModuleRecord *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::AbstractModuleRecord *>,WTF::DefaultHash<JSC::AbstractModuleRecord *>>,JSC::AbstractModuleRecord *>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(a2) & v4;
    v6 = *(_QWORD *)(v3 + 8 * v5);
    if (v6 == a2)
    {
      return v3 + 8 * v5;
    }
    else
    {
      v7 = 1;
      while (v6)
      {
        v5 = ((_DWORD)v5 + v7) & v4;
        v6 = *(_QWORD *)(v3 + 8 * v5);
        ++v7;
        if (v6 == a2)
          return v3 + 8 * v5;
      }
      return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<JSC::AbstractModuleRecord *,JSC::AbstractModuleRecord *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  int v33;

  v11 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::AbstractModuleRecord *,JSC::AbstractModuleRecord *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>>::expand(a2, 0, (uint64_t)a3, a4, a5, a6, a7, a8), (v11 = *a2) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = *a3;
  result = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(*a3);
  v21 = result & v12;
  v22 = (_QWORD *)(v11 + 8 * (result & v12));
  v23 = *v22;
  if (*v22)
  {
    v32 = 0;
    v33 = 1;
    do
    {
      if (v23 == v13)
      {
        v31 = 0;
        v30 = v11 + 8 * *(unsigned int *)(v11 - 4);
        goto LABEL_12;
      }
      if (v23 == -1)
        v32 = v22;
      v21 = (v21 + v33) & v12;
      v22 = (_QWORD *)(v11 + 8 * v21);
      v23 = *v22;
      ++v33;
    }
    while (*v22);
    if (v32)
    {
      *v32 = 0;
      --*(_DWORD *)(*a2 - 16);
      v13 = *a3;
      v22 = v32;
    }
  }
  *v22 = v13;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 > 2 * v28)
      goto LABEL_11;
LABEL_24:
    result = (uint64_t)WTF::HashTable<JSC::AbstractModuleRecord *,JSC::AbstractModuleRecord *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>>::expand(a2, (uint64_t)v22, v15, v16, v17, v18, v19, v20);
    v22 = (_QWORD *)result;
    v26 = *a2;
    if (*a2)
      v29 = *(unsigned int *)(v26 - 4);
    else
      v29 = 0;
    goto LABEL_11;
  }
  if (3 * v29 <= 4 * v28)
    goto LABEL_24;
LABEL_11:
  v30 = v26 + 8 * v29;
  v31 = 1;
LABEL_12:
  *(_QWORD *)a1 = v22;
  *(_QWORD *)(a1 + 8) = v30;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

uint64_t *WTF::HashTable<JSC::AbstractModuleRecord *,JSC::AbstractModuleRecord *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<JSC::AbstractModuleRecord *,JSC::AbstractModuleRecord *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

uint64_t *WTF::HashTable<JSC::AbstractModuleRecord *,JSC::AbstractModuleRecord *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *result;
  void **v24;
  uint64_t *v25;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    LODWORD(v12) = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    LODWORD(v12) = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  v22 = 0;
  if ((_DWORD)v12)
  {
    v12 = v12;
    v24 = (void **)v11;
    do
    {
      v15 = *v24;
      if ((unint64_t)*v24 + 1 >= 2)
      {
        v25 = WTF::HashTable<JSC::AbstractModuleRecord *,JSC::AbstractModuleRecord *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>>::reinsert(*a1, (uint64_t)v15);
        if (v24 == (void **)a3)
          v22 = v25;
      }
      ++v24;
      --v12;
    }
    while (v12);
    goto LABEL_12;
  }
  result = 0;
  if (v11)
  {
LABEL_12:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

uint64_t *WTF::HashTable<JSC::AbstractModuleRecord *,JSC::AbstractModuleRecord *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>,WTF::HashTraits<JSC::AbstractModuleRecord *>>::reinsert(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t *result;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(a2);
  v6 = 0;
  do
  {
    v7 = v5 & v4;
    v5 = ++v6 + v7;
  }
  while (*(_QWORD *)(a1 + 8 * v7));
  result = (uint64_t *)(a1 + 8 * v7);
  *result = a2;
  return result;
}

unint64_t JSC::allocateCell<JSC::JSModuleNamespaceObject>(JSC::Heap **a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v9;
  unint64_t SlowCase;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = a1[5084];
  if (!v9)
    v9 = JSC::GCClient::Heap::moduleNamespaceObjectSpaceSlow(a1 + 4694);
  SlowCase = *((_QWORD *)v9 + 3);
  if (SlowCase >= *((_QWORD *)v9 + 4))
  {
    SlowCase = *((_QWORD *)v9 + 5);
    if ((SlowCase & 1) != 0)
    {
      v13 = (uint64_t)v9;
      JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v13, (uint64_t)(a1 + 24), 48, 0, 0, v14, v15, v16);
      goto LABEL_5;
    }
    v12 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v9 + 6);
    *((_QWORD *)v9 + 4) = SlowCase + HIDWORD(v12);
    *((_QWORD *)v9 + 5) = SlowCase + (int)v12;
  }
  *((_QWORD *)v9 + 3) = SlowCase + 48;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  return SlowCase;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>(uint64_t result, unsigned int a2, int a3, _OWORD *a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  _WORD *v11;
  char *v12;
  __int128 v13;
  char *v14;
  int8x16_t v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  char *v20;
  __int16 v21;
  unsigned __int128 *v22;
  unsigned __int128 *v23;
  unsigned __int128 v24;
  char v25;
  uint64_t v26;
  int8x16x2_t v27;
  int8x16x2_t v28;
  int8x16x2_t v29;

  v8 = (_QWORD *)result;
  if (a3)
  {
    if ((a2 & 0x80000000) == 0)
    {
      result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20), &v26);
      v9 = v26;
      if (v26)
      {
        *(_BYTE *)(v26 + 20) = 39;
        *(_DWORD *)v9 = 2;
        *(_DWORD *)(v9 + 4) = a2;
        *(_QWORD *)(v9 + 8) = v9 + 20;
        *(_DWORD *)(v9 + 16) = 4;
        v10 = (_BYTE *)(v9 + 21);
        if ((a5 & 0xFF00000000) != 0)
        {
          if ((_DWORD)a5 == 1)
          {
            *v10 = *(_BYTE *)a4;
          }
          else if ((_DWORD)a5)
          {
            result = (uint64_t)memcpy((void *)(v9 + 21), a4, a5);
          }
        }
        else
        {
          v22 = (unsigned __int128 *)(v9 + 21);
          if (a5 >= 0x10)
          {
            v22 = (unsigned __int128 *)&v10[a5 & 0xFFFFFFF0];
            v23 = (unsigned __int128 *)(v9 + 21);
            do
            {
              v24 = (unsigned __int128)vld2q_s8((const char *)a4);
              a4 += 2;
              *v23++ = v24;
            }
            while (v23 != v22);
          }
          while (v22 != (unsigned __int128 *)&v10[a5])
          {
            v25 = *(_BYTE *)a4;
            a4 = (_OWORD *)((char *)a4 + 2);
            *(_BYTE *)v22 = v25;
            v22 = (unsigned __int128 *)((char *)v22 + 1);
          }
        }
        v10[a5] = 39;
      }
      goto LABEL_23;
    }
LABEL_25:
    v9 = 0;
    goto LABEL_23;
  }
  if (a2 > 0x7FFFFFEF)
    goto LABEL_25;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20), &v26);
  v9 = v26;
  if (v26)
  {
    *(_DWORD *)v26 = 2;
    *(_DWORD *)(v9 + 4) = a2;
    *(_WORD *)(v9 + 20) = 39;
    *(_QWORD *)(v9 + 8) = v9 + 20;
    *(_DWORD *)(v9 + 16) = 0;
    v11 = (_WORD *)(v9 + 22);
    if ((a5 & 0xFF00000000) != 0)
    {
      v12 = (char *)(v9 + 22);
      if (a5 >= 0x40)
      {
        v12 = (char *)&v11[a5 & 0xFFFFFFC0];
        v13 = 0uLL;
        v14 = (char *)(v9 + 22);
        do
        {
          v27.val[0] = (int8x16_t)*a4;
          v15 = *((int8x16_t *)a4 + 1);
          v28.val[0] = (int8x16_t)a4[2];
          v16 = a4[3];
          a4 += 4;
          v17 = v16;
          v28.val[1] = 0uLL;
          v29.val[0] = v15;
          v27.val[1] = 0uLL;
          v18 = v14;
          vst2q_s8(v18, v27);
          v18 += 32;
          v29.val[1] = 0uLL;
          vst2q_s8(v18, v29);
          v19 = v14 + 64;
          vst2q_s8(v19, v28);
          v20 = v14 + 96;
          vst2q_s8(v20, *(int8x16x2_t *)(&v13 - 1));
          v14 += 128;
        }
        while (v14 != v12);
      }
      while (v12 != (char *)&v11[a5])
      {
        v21 = *(unsigned __int8 *)a4;
        a4 = (_OWORD *)((char *)a4 + 1);
        *(_WORD *)v12 = v21;
        v12 += 2;
      }
    }
    else if ((_DWORD)a5 == 1)
    {
      *v11 = *(_WORD *)a4;
    }
    else if ((_DWORD)a5)
    {
      result = (uint64_t)memcpy((void *)(v9 + 22), a4, 2 * a5);
    }
    v11[a5] = 39;
  }
LABEL_23:
  *v8 = v9;
  return result;
}

void JSC::ArrayBufferContents::~ArrayBufferContents(JSC::ArrayBufferContents *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::BufferMemoryHandle *v28;

  v9 = *((_QWORD *)this + 1);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  v10 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      v28 = (JSC::BufferMemoryHandle *)v10;
      WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v28);
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      JSC::SharedArrayBufferContents::~SharedArrayBufferContents((JSC::SharedArrayBufferContents *)v13, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
  }
  v16 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v16)
  {
    v17 = v16 + 2;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v16 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
    }
  }
}

_QWORD *JSC::ArrayBufferView::possiblySharedBuffer(_QWORD *this, uint64_t a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = *(_QWORD *)(a2 + 16);
    if (v2
      && (!qword_1ECF4C038
       || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
       || (v2 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      *(_DWORD *)a2 += 2;
    }
    else
    {
      a2 = 0;
    }
  }
  *this = a2;
  return this;
}

uint64_t *JSC::VM::topJSCallFrame(JSC::VM *this)
{
  uint64_t *result;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  result = (uint64_t *)*((_QWORD *)this + 5);
  if (result)
  {
    v3 = result[3];
    if ((v3 & 0xFFFE000000000007) == 3
      || *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28) + 96) == v3)
    {
      v4 = *((_QWORD *)this + 6);
      do
      {
        result = (uint64_t *)*result;
        if (result == (uint64_t *)v4)
        {
          v5 = (uint64_t *)(vmEntryRecord(v4) + 8);
          result = (uint64_t *)*v5;
          v4 = v5[1];
        }
      }
      while (result && (result[3] & 0xFFFE000000000007) == 3);
    }
  }
  return result;
}

void JSC::JSInternalFieldObjectImpl<2u>::visitChildren(JSC::JSObject *a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v18;
  unint64_t v19;
  int v21;

  JSC::JSObject::visitChildren(a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)a1 + 2);
  if ((v16 & 0xFFFE000000000002) != 0 || v16 == 0)
    goto LABEL_10;
  if ((v16 & 8) != 0)
  {
    if ((*(_BYTE *)(v16 - 79) & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    v18 = *(_DWORD *)(a2 + 132);
    if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v18)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v18, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
    {
LABEL_9:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_10;
    }
  }
  JSC::SlotVisitor::appendSlow(a2, v16, 0, v11, v12, v13, v14, v15);
LABEL_10:
  v19 = *((_QWORD *)a1 + 3);
  if ((v19 & 0xFFFE000000000002) == 0 && v19 != 0)
  {
    if ((v19 & 8) != 0)
    {
      if ((*(_BYTE *)(v19 - 79) & 1) == 0)
        goto LABEL_23;
    }
    else
    {
      v21 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 0x20) != v21)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v19 & 0xFFFFFFFFFFFFC000), v21, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v19 & 0xFFFFFFFFFFFFC000) + 8 * ((v19 >> 10) & 0xF) + 0x28) >> (v19 >> 4)) & 1) == 0)
        goto LABEL_23;
    }
    if (!*(_QWORD *)(a2 + 168))
      return;
LABEL_23:
    JSC::SlotVisitor::appendSlow(a2, v19, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t WTF::Vector<JSC::AbstractModuleRecord::ModuleRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  JSC::AbstractModuleRecord::ModuleRequest *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::AbstractModuleRecord::ModuleRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = (_QWORD *)v11;
      v20 = (JSC::AbstractModuleRecord::ModuleRequest *)v5;
      do
      {
        v21 = *(_QWORD *)v20;
        *(_QWORD *)v20 = 0;
        *v19 = v21;
        v22 = *((_QWORD *)v20 + 1);
        *((_QWORD *)v20 + 1) = 0;
        v19[1] = v22;
        JSC::AbstractModuleRecord::ModuleRequest::~ModuleRequest(v20, v12, v13, v14, v15, v16, v17, v18);
        v20 = (JSC::AbstractModuleRecord::ModuleRequest *)(v23 + 16);
        v19 += 2;
      }
      while (v20 != (JSC::AbstractModuleRecord::ModuleRequest *)(v5 + 16 * v10));
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::AbstractModuleRecord::ModuleRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  JSC::AbstractModuleRecord::ModuleRequest *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = (_QWORD *)v9;
        v18 = (JSC::AbstractModuleRecord::ModuleRequest *)v7;
        do
        {
          v19 = *(_QWORD *)v18;
          *(_QWORD *)v18 = 0;
          *v17 = v19;
          v20 = *((_QWORD *)v18 + 1);
          *((_QWORD *)v18 + 1) = 0;
          v17[1] = v20;
          JSC::AbstractModuleRecord::ModuleRequest::~ModuleRequest(v18, v10, v11, v12, v13, v14, v15, v16);
          v18 = (JSC::AbstractModuleRecord::ModuleRequest *)(v21 + 16);
          v17 += 2;
        }
        while (v18 != (JSC::AbstractModuleRecord::ModuleRequest *)(v7 + 16 * v8));
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>> *,WTF::ListHashSetNode<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<JSC::IdentifierRepHash>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>> *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (uint64_t *)(v11 + 8 * v22);
      v25 = *v24;
      if ((unint64_t)(*v24 + 1) >= 2)
      {
        v26 = *a1;
        if (*a1)
          v27 = *(_DWORD *)(v26 - 8);
        else
          v27 = 0;
        v28 = *(_DWORD *)(*(_QWORD *)v25 + 16);
        if ((v28 & 0x20) != 0)
          v28 = *(_DWORD *)(*(_QWORD *)v25 + 32);
        v29 = 0;
        v30 = v28 >> 8;
        do
        {
          v31 = v30 & v27;
          v30 = ++v29 + v31;
        }
        while (*(_QWORD *)(v26 + 8 * v31));
        v32 = (_QWORD *)(v26 + 8 * v31);
        *v32 = v25;
        if (v24 == (uint64_t *)a3)
          v23 = v32;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
  }
  if (v11)
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

WTF::StringImpl **WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ImportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ImportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a1, v5, a2);
}

WTF::StringImpl **WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ImportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl **result;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  _QWORD *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  _QWORD *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  _QWORD *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl **v121;
  WTF::StringImpl **v122;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 40 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if ((_DWORD)v7)
  {
    v21 = 0;
    v19 = 0;
    v7 = v7;
    v120 = v7;
    v121 = a3;
    do
    {
      v22 = (WTF::StringImpl **)(v6 + 40 * v21);
      v23 = *v22;
      if (*v22)
      {
        if (v23 != (WTF::StringImpl *)-1)
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = *((_DWORD *)v23 + 4);
          if ((v26 & 0x20) != 0)
            v26 = *((_DWORD *)v23 + 8);
          v27 = 0;
          v28 = v26 >> 8;
          do
          {
            v29 = v28 & v25;
            v30 = (WTF::StringImpl **)(v24 + 40 * (v28 & v25));
            v28 = ++v27 + (v28 & v25);
          }
          while (*v30);
          v31 = v24 + 40 * v29;
          v34 = *(WTF::StringImpl **)(v31 + 32);
          v33 = (_QWORD *)(v31 + 32);
          v32 = v34;
          *v33 = 0;
          if (v34)
          {
            if (*(_DWORD *)v32 == 2)
            {
              WTF::StringImpl::~StringImpl(v32, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
              v22 = (WTF::StringImpl **)(v6 + 40 * v21);
            }
            else
            {
              *(_DWORD *)v32 -= 2;
            }
          }
          v35 = v24 + 40 * v29;
          v38 = *(WTF::StringImpl **)(v35 + 24);
          v37 = (_QWORD *)(v35 + 24);
          v36 = v38;
          *v37 = 0;
          if (v38)
          {
            if (*(_DWORD *)v36 == 2)
            {
              WTF::StringImpl::~StringImpl(v36, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
              v22 = (WTF::StringImpl **)(v6 + 40 * v21);
            }
            else
            {
              *(_DWORD *)v36 -= 2;
            }
          }
          v122 = v19;
          v39 = v24 + 40 * v29;
          v42 = *(WTF::StringImpl **)(v39 + 16);
          v41 = (_QWORD *)(v39 + 16);
          v40 = v42;
          *v41 = 0;
          if (v42)
          {
            if (*(_DWORD *)v40 == 2)
            {
              WTF::StringImpl::~StringImpl(v40, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
              v22 = (WTF::StringImpl **)(v6 + 40 * v21);
            }
            else
            {
              *(_DWORD *)v40 -= 2;
            }
          }
          v43 = *v30;
          *v30 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
            {
              WTF::StringImpl::~StringImpl(v43, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
              v22 = (WTF::StringImpl **)(v6 + 40 * v21);
            }
            else
            {
              *(_DWORD *)v43 -= 2;
            }
          }
          v44 = *v22;
          *v22 = 0;
          *v30 = v44;
          v45 = v24 + 40 * v29;
          v46 = v6 + 40 * v21;
          v48 = *(_QWORD *)(v46 + 16);
          v47 = (WTF::StringImpl **)(v46 + 16);
          *(_QWORD *)(v46 + 16) = 0;
          *v41 = v48;
          v50 = *(_QWORD *)(v46 + 24);
          v49 = (_QWORD *)(v46 + 24);
          *(_DWORD *)(v45 + 8) = *((_DWORD *)v49 - 4);
          *v49 = 0;
          *v37 = v50;
          v51 = v49[1];
          v49[1] = 0;
          *v33 = v51;
          v52 = (WTF::StringImpl *)v49[1];
          v49[1] = 0;
          v19 = v122;
          v7 = v120;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
            {
              WTF::StringImpl::~StringImpl(v52, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
              v22 = (WTF::StringImpl **)(v6 + 40 * v21);
            }
            else
            {
              *(_DWORD *)v52 -= 2;
            }
          }
          v53 = (WTF::StringImpl *)*v49;
          *v49 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
            {
              WTF::StringImpl::~StringImpl(v53, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
              v22 = (WTF::StringImpl **)(v6 + 40 * v21);
            }
            else
            {
              *(_DWORD *)v53 -= 2;
            }
          }
          v54 = *v47;
          *v47 = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
            {
              WTF::StringImpl::~StringImpl(v54, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
              v22 = (WTF::StringImpl **)(v6 + 40 * v21);
            }
            else
            {
              *(_DWORD *)v54 -= 2;
            }
          }
          v55 = *v22;
          *v22 = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
            {
              WTF::StringImpl::~StringImpl(v55, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
              v22 = (WTF::StringImpl **)(v6 + 40 * v21);
            }
            else
            {
              *(_DWORD *)v55 -= 2;
            }
          }
          if (v22 == v121)
            v19 = v30;
        }
      }
      else
      {
        WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry>::~KeyValuePair((WTF::StringImpl **)(v6 + 40 * v21), v10, v11, v12, v13, v14, v15, v16);
      }
      ++v21;
    }
    while (v21 != v7);
  }
  else
  {
    v19 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v19;
}

WTF::StringImpl **WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry>::~KeyValuePair(WTF::StringImpl **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v9 = a1[4];
  a1[4] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = a1[3];
  a1[3] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = a1[2];
  a1[2] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = *a1;
  *a1 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  return a1;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ExportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ExportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ExportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *result;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 48 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v21 = 0;
    v19 = 0;
    v22 = v7;
    v47 = v7;
    do
    {
      v23 = (uint64_t *)(v6 + 48 * v21);
      v24 = *v23;
      if (*v23)
      {
        if (v24 != -1)
        {
          v25 = *a1;
          if (*a1)
            v26 = *(_DWORD *)(v25 - 8);
          else
            v26 = 0;
          v27 = a3;
          v28 = *(_DWORD *)(v24 + 16);
          if ((v28 & 0x20) != 0)
            v28 = *(_DWORD *)(v24 + 32);
          v29 = 0;
          v30 = v28 >> 8;
          do
          {
            v31 = v30 & v26;
            v32 = (_QWORD *)(v25 + 48 * (v30 & v26));
            v30 = ++v29 + (v30 & v26);
          }
          while (*v32);
          WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry>::~KeyValuePair((WTF::StringImpl **)(v25 + 48 * v31), v10, v11, v12, v13, v14, v15, v16);
          v33 = *v23;
          *v23 = 0;
          *v32 = v33;
          v34 = v25 + 48 * v31;
          v35 = v6 + 48 * v21;
          *(_DWORD *)(v34 + 8) = *(_DWORD *)(v35 + 8);
          v36 = *(_QWORD *)(v35 + 16);
          *(_QWORD *)(v35 + 16) = 0;
          *(_QWORD *)(v34 + 16) = v36;
          v37 = *(_QWORD *)(v35 + 24);
          *(_QWORD *)(v35 + 24) = 0;
          *(_QWORD *)(v34 + 24) = v37;
          v38 = *(_QWORD *)(v35 + 32);
          *(_QWORD *)(v35 + 32) = 0;
          *(_QWORD *)(v34 + 32) = v38;
          v39 = *(_QWORD *)(v35 + 40);
          *(_QWORD *)(v35 + 40) = 0;
          *(_QWORD *)(v34 + 40) = v39;
          WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry>::~KeyValuePair((WTF::StringImpl **)v35, v40, v41, v42, v43, v44, v45, v46);
          a3 = v27;
          if (v23 == v27)
            v19 = v32;
          v22 = v47;
        }
      }
      else
      {
        WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry>::~KeyValuePair((WTF::StringImpl **)(v6 + 48 * v21), v10, v11, v12, v13, v14, v15, v16);
      }
      ++v21;
    }
    while (v21 != v22);
  }
  else
  {
    v19 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v19;
}

WTF::StringImpl **WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry>::~KeyValuePair(WTF::StringImpl **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v9 = a1[5];
  a1[5] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = a1[4];
  a1[4] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = a1[3];
  a1[3] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = a1[2];
  a1[2] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  v13 = *a1;
  *a1 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::Resolution>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::Resolution>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::Resolution>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 32 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v19 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v21 = (uint64_t *)v6;
    do
    {
      if (*v21)
      {
        if (*v21 != -1)
        {
          WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::Resolution>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::reinsert(*a1, v21, v11, v12, v13, v14, v15, v16);
          v23 = v22;
          std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::~pair((WTF::StringImpl **)v21, v24, v25, v26, v27, v28, v29, v30);
          if (v21 == a3)
            v19 = v23;
        }
      }
      else
      {
        std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::~pair((WTF::StringImpl **)v21, v10, v11, v12, v13, v14, v15, v16);
      }
      v21 += 4;
      --v7;
    }
    while (v7);
    goto LABEL_17;
  }
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v19;
  }
  return result;
}

__n128 WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::Resolution,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::Resolution>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::reinsert(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  __n128 result;
  WTF::StringImpl *v18;

  v9 = *a2;
  if (a1)
    v10 = *(_DWORD *)(a1 - 8);
  else
    v10 = 0;
  v11 = *(_DWORD *)(v9 + 16);
  if ((v11 & 0x20) != 0)
    v11 = *(_DWORD *)(v9 + 32);
  v12 = 0;
  v13 = v11 >> 8;
  do
  {
    v14 = v13 & v10;
    v13 = ++v12 + v14;
  }
  while (*(_QWORD *)(a1 + 32 * v14));
  v15 = std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::~pair((WTF::StringImpl **)(a1 + 32 * v14), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  v16 = (WTF::StringImpl *)*a2;
  *a2 = 0;
  *v15 = v16;
  result = *(__n128 *)(a2 + 1);
  *(__n128 *)(v15 + 1) = result;
  v18 = (WTF::StringImpl *)a2[3];
  a2[3] = 0;
  v15[3] = v18;
  return result;
}

void WTF::VectorTypeOperations<JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::Task>::destruct(WTF::AtomStringImpl *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v9 = (WTF::StringImpl **)a1;
    do
    {
      v10 = v9[1];
      v9[1] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
        }
        else
        {
          *(_DWORD *)v10 -= 2;
        }
      }
      v9 += 3;
    }
    while (v9 != (WTF::StringImpl **)a2);
  }
}

__n128 WTF::Vector<JSC::AbstractModuleRecord::Resolution,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::AbstractModuleRecord::Resolution>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  uint64_t v10;
  __n128 result;
  unint64_t v12;

  v9 = (__n128 *)WTF::Vector<JSC::AbstractModuleRecord::Resolution,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
  result = *v9;
  *(__n128 *)v10 = *v9;
  v12 = v9[1].n128_u64[0];
  v9[1].n128_u64[0] = 0;
  *(_QWORD *)(v10 + 16) = v12;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::AbstractModuleRecord::Resolution,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v14 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 > a2)
      a2 = v15;
    WTF::Vector<JSC::AbstractModuleRecord::Resolution,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v11 = a3 - v10;
    v12 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 > a2)
      a2 = v13;
    WTF::Vector<JSC::AbstractModuleRecord::Resolution,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v11;
  }
  return v8;
}

void WTF::Vector<JSC::AbstractModuleRecord::Resolution,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (*(unsigned int *)(a1 + 8) >= a2)
    return;
  v9 = *(_QWORD *)a1;
  v10 = *(_DWORD *)(a1 + 12);
  if (a2 >= 9)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      return;
    }
    v11 = 24 * a2;
    v12 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v11 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v12;
    if (!v10)
      goto LABEL_14;
    goto LABEL_7;
  }
  v12 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 8;
  if (v10)
  {
LABEL_7:
    v13 = v9 + 24 * v10;
    v14 = v9;
    do
    {
      *(_OWORD *)v12 = *(_OWORD *)v14;
      v15 = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)(v12 + 16) = v15;
      v16 = *(WTF::StringImpl **)(v14 + 16);
      *(_QWORD *)(v14 + 16) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
      v14 += 24;
      v12 += 24;
    }
    while (v14 != v13);
  }
LABEL_14:
  if (a1 + 16 != v9 && v9)
  {
    if (*(_QWORD *)a1 == v9)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v9, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

unint64_t WTF::Vector<JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::Task,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::Task>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  result = WTF::Vector<JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::Task,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  v10 = *(_DWORD *)(a1 + 12);
  v11 = v10 + 1;
  v12 = *(_QWORD *)a1 + 24 * v10;
  *(_QWORD *)v12 = *(_QWORD *)result;
  v13 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(v12 + 8) = v13;
  *(_DWORD *)(v12 + 16) = *(_DWORD *)(result + 16);
  *(_DWORD *)(a1 + 12) = v11;
  return result;
}

unint64_t WTF::Vector<JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::Task,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::Task,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v11 = a3 - v10;
    WTF::Vector<JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::Task,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v11;
  }
  return v8;
}

void WTF::Vector<JSC::AbstractModuleRecord::resolveExportImpl(JSC::JSGlobalObject *,JSC::AbstractModuleRecord::ResolveQuery const&)::Task,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v10 = (unint64_t)a2;
  if (v10 > v8)
  {
    v12 = *(_QWORD *)a1;
    v13 = *(_DWORD *)(a1 + 12);
    if (v10 < 9)
    {
      v15 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
      if (!v13)
      {
LABEL_19:
        if (a1 + 16 != v12 && v12)
        {
          if (*(_QWORD *)a1 == v12)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
        }
        return;
      }
    }
    else
    {
      if (v10 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return;
      }
      v14 = 24 * v10;
      v15 = WTF::fastMalloc((WTF *)(24 * v10));
      *(_DWORD *)(a1 + 8) = (v14 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v15;
      if (!v13)
        goto LABEL_19;
    }
    v16 = v12 + 24 * v13;
    v17 = v12;
    do
    {
      *(_QWORD *)v15 = *(_QWORD *)v17;
      v18 = *(_QWORD *)(v17 + 8);
      *(_QWORD *)(v17 + 8) = 0;
      *(_QWORD *)(v15 + 8) = v18;
      *(_DWORD *)(v15 + 16) = *(_DWORD *)(v17 + 16);
      v19 = *(WTF::StringImpl **)(v17 + 8);
      *(_QWORD *)(v17 + 8) = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
        {
          WTF::StringImpl::~StringImpl(v19, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
        }
        else
        {
          *(_DWORD *)v19 -= 2;
        }
      }
      v17 += 24;
      v15 += 24;
    }
    while (v17 != v16);
    goto LABEL_19;
  }
}

void WTF::HashTable<JSC::AbstractModuleRecord::ResolveQuery,JSC::AbstractModuleRecord::ResolveQuery,WTF::IdentityExtractor,JSC::AbstractModuleRecord::ResolveQuery::Hash,WTF::CustomHashTraits<JSC::AbstractModuleRecord::ResolveQuery>,WTF::CustomHashTraits<JSC::AbstractModuleRecord::ResolveQuery>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  WTF::HashTable<JSC::AbstractModuleRecord::ResolveQuery,JSC::AbstractModuleRecord::ResolveQuery,WTF::IdentityExtractor,JSC::AbstractModuleRecord::ResolveQuery::Hash,WTF::CustomHashTraits<JSC::AbstractModuleRecord::ResolveQuery>,WTF::CustomHashTraits<JSC::AbstractModuleRecord::ResolveQuery>>::rehash(a1, v3);
}

void WTF::HashTable<JSC::AbstractModuleRecord::ResolveQuery,JSC::AbstractModuleRecord::ResolveQuery,WTF::IdentityExtractor,JSC::AbstractModuleRecord::ResolveQuery::Hash,WTF::CustomHashTraits<JSC::AbstractModuleRecord::ResolveQuery>,WTF::CustomHashTraits<JSC::AbstractModuleRecord::ResolveQuery>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  JSC::AbstractModuleRecord::ResolveQuery *v18;
  uint64_t v19;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v15 = a2;
    v16 = (_QWORD *)(v7 + 24);
    do
    {
      *v16 = 0;
      v16 += 2;
      --v15;
    }
    while (v15);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v17 = v5;
    v18 = (JSC::AbstractModuleRecord::ResolveQuery *)v4;
    do
    {
      v19 = *((_QWORD *)v18 + 1);
      if (v19 != -1)
      {
        if (v19)
          WTF::HashTable<JSC::AbstractModuleRecord::ResolveQuery,JSC::AbstractModuleRecord::ResolveQuery,WTF::IdentityExtractor,JSC::AbstractModuleRecord::ResolveQuery::Hash,WTF::CustomHashTraits<JSC::AbstractModuleRecord::ResolveQuery>,WTF::CustomHashTraits<JSC::AbstractModuleRecord::ResolveQuery>>::reinsert(*a1, v18);
        JSC::AbstractModuleRecord::ResolveQuery::~ResolveQuery(v18, v8, v9, v10, v11, v12, v13, v14);
      }
      v18 = (JSC::AbstractModuleRecord::ResolveQuery *)((char *)v18 + 16);
      --v17;
    }
    while (v17);
    goto LABEL_16;
  }
  if (v4)
LABEL_16:
    WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

_QWORD *WTF::HashTable<JSC::AbstractModuleRecord::ResolveQuery,JSC::AbstractModuleRecord::ResolveQuery,WTF::IdentityExtractor,JSC::AbstractModuleRecord::ResolveQuery::Hash,WTF::CustomHashTraits<JSC::AbstractModuleRecord::ResolveQuery>,WTF::CustomHashTraits<JSC::AbstractModuleRecord::ResolveQuery>>::reinsert(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = a2[1];
  v4 = *(_DWORD *)(v3 + 16);
  if ((v4 & 0x20) != 0)
    v4 = *(_DWORD *)(v3 + 32);
  v5 = 0;
  v6 = (~(*a2 << 32) + *a2) ^ ((~(*a2 << 32) + *a2) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((unint64_t)(v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = ((v8 >> 31) ^ v8) + (v4 >> 8);
  do
  {
    v10 = v9 & v2;
    v11 = a1 + 16 * v10;
    v13 = *(_QWORD *)(v11 + 8);
    v12 = (_QWORD *)(v11 + 8);
    v9 = ++v5 + v10;
  }
  while (v13);
  *v12 = 0;
  result = (_QWORD *)(a1 + 16 * v10);
  *result = *a2;
  v15 = a2[1];
  a2[1] = 0;
  *v12 = v15;
  return result;
}

uint64_t WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  unint64_t v12;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(WTF::StringImpl ***)a1;
    v11 = 32 * v9;
    do
    {
      v10 = std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::~pair(v10, a2, a3, a4, a5, a6, a7, a8) + 4;
      v11 -= 32;
    }
    while (v11);
  }
  v12 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

__n128 WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;

  v3 = WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v4 = v5;
  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(v4 + 8) = result;
  v7 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v4 + 24) = v7;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF::StringImpl **v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x19889602CLL);
    }
    v4 = *(WTF::StringImpl ***)a1;
    v5 = (WTF::AtomStringImpl *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
    v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>>::move(v4, v5, v6, v7, v8, v9, v10, v11);
    if (v4)
    {
      if (*(WTF::StringImpl ***)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v4, v12, v13, v14, v15, v16, v17, v18);
    }
  }
}

WTF::StringImpl **WTF::VectorMover<false,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>>::move(WTF::StringImpl **result, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  if (result != (WTF::StringImpl **)a2)
  {
    v8 = a3;
    do
    {
      v10 = *result;
      *result = 0;
      *(_QWORD *)v8 = v10;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(result + 1);
      v11 = result[3];
      result[3] = 0;
      *(_QWORD *)(v8 + 24) = v11;
      result = std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::~pair(result, a2, a3, a4, a5, a6, a7, a8)+ 4;
      v8 += 32;
    }
    while (result != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,JSC::JSModuleEnvironment>(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7, uint64_t a8, double a9)
{
  char v10;
  int v11;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  JSC::VM *v37;
  uint64_t v38;

  v10 = a6;
  v11 = a5;
  v16 = *(_QWORD *)(a2 + 56);
  v37 = (JSC::VM *)v16;
  v17 = *(_QWORD *)(a1 + 24);
  v18 = (unsigned __int8 *)(v17 + 20);
  if (__ldaxr((unsigned __int8 *)(v17 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v17 + 20);
LABEL_4:
  ++*(_DWORD *)(v16 + 916);
  v20 = *(_QWORD *)(v17 + 8);
  if (!v20)
    goto LABEL_43;
  v21 = *(_DWORD *)(v20 - 8);
  v22 = *(_DWORD *)(a3 + 16);
  if ((v22 & 0x20) != 0)
    v22 = *(_DWORD *)(a3 + 32);
  v23 = v21 & (v22 >> 8);
  v24 = *(_QWORD *)(v20 + 16 * v23);
  if (v24 != a3)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v21;
      v24 = *(_QWORD *)(v20 + 16 * v23);
      ++v25;
      if (v24 == a3)
        goto LABEL_15;
    }
    v23 = *(unsigned int *)(v20 - 4);
  }
LABEL_15:
  if (v23 == *(_DWORD *)(v20 - 4))
    goto LABEL_43;
  v26 = *(_QWORD **)(v20 + 16 * v23 + 8);
  v27 = (unint64_t)v26;
  if ((v26 & 1) == 0)
    v27 = *v26 | 1;
  if ((v27 & 2) == 0 || (v10 & 1) != 0)
  {
    if ((v27 >> 6) != -1 && *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) + 1 > (v27 >> 6))
    {
      v28 = (v27 >> 6);
      if ((v26 & 1) != 0)
        v29 = 0;
      else
        v29 = v26[1];
      v30 = 0;
      v31 = (uint64_t *)(a1 + 8 * v28 + 32);
      v32 = 1;
      goto LABEL_25;
    }
LABEL_43:
    v32 = 0;
    v31 = 0;
    v29 = 0;
    v30 = 0;
    goto LABEL_25;
  }
  if (v11)
    JSC::throwTypeError(a2, &v37, (uint64_t)"Attempted to assign to readonly property.", 42);
  v32 = 0;
  v31 = 0;
  v29 = 0;
  *a7 = 0;
  v30 = 1;
LABEL_25:
  v33 = __ldxr(v18);
  if (v33 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, v18))
LABEL_29:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v18, 0, a3, a4, a5, a6, (uint64_t)a7, a8);
  v34 = *(_DWORD *)(v16 + 916) - 1;
  *(_DWORD *)(v16 + 916) = v34;
  if (*(unsigned __int8 *)(v16 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v35 = v34 == 0;
  else
    v35 = 0;
  if (v35)
  {
    *(_BYTE *)(v16 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v16 + 192, 0);
  }
  if (v32)
  {
    v38 = a3;
    *v31 = a4;
    if ((a4 & 0xFFFE000000000002) == 0
      && a1
      && a4
      && *(_DWORD *)(v16 + 760) >= *(unsigned __int8 *)(a1 + 7))
    {
      JSC::Heap::writeBarrierSlowPath(v16 + 192, a1);
    }
    if (v29)
      JSC::VariableWriteFireDetail::touch((uint64_t *)v16, v29, a1, (uint64_t)&v38, a5, a6, (uint64_t)a7, a8, a9);
    v30 = 1;
    *a7 = 1;
  }
  return v30;
}

uint64_t WTF::dataLog<char [14],WTF::String,char [14],WTF::RawPointer,char [2],char [2]>(WTF::PrintStream *a1, const void **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  const WTF::String *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  float v14;
  char v16;
  char **v17;
  char *v18;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "      module(");
  WTF::printInternal(v6, a1, v7, v8, v9, v10, v11, v12, v13, v14);
  WTF::PrintStream::printf(v6, "%s", "),attributes(");
  WTF::PrintStream::printf(v6, "%p", *a2);
  WTF::PrintStream::printf(v6, "%s", ")");
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

_QWORD *WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[v2];
  if (!*((_DWORD *)result - 3))
    return &result[v2];
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v4 -= 8;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::ArrayBuffer::primitiveGigacageDestructor(void)::$_0 &&>>()
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3596EF8;
  JSC::ArrayBuffer::primitiveGigacageDestructor(void)::destructor = result;
  return result;
}

void WTF::SharedTaskFunctor<void ()(void *),JSC::ArrayBuffer::primitiveGigacageDestructor(void)::$_0::operator() const(void)::{lambda(void *)#1}>::run(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Gigacage::free(0, a2, a3, a4, a5, a6, a7, a8);
}

__n128 *JSC::clearArrayMemset(__n128 *result, unsigned int a2, __n128 a3)
{
  __n128 *v3;
  __n128 *v4;

  v3 = (__n128 *)((char *)result + 8 * a2);
  v4 = (__n128 *)((char *)result + ((8 * a2) & 0x7FFFFFFC0));
  a3.n128_u64[0] = 0;
  while (result != v4)
  {
    *result = a3;
    result[1] = a3;
    result[2] = a3;
    result[3] = a3;
    result += 4;
  }
  while (result != v3)
  {
    result->n128_u64[0] = 0;
    result = (__n128 *)((char *)result + 8);
  }
  return result;
}

void JSC::clearArrayMemset(JSC *this, double *a2)
{
  if ((_DWORD)a2)
    memset_pattern16(this, &memset_pattern_2, 8 * a2);
}

void JSC::ArrayIteratorPrototype::finishCreation(JSC::ArrayIteratorPrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3)
{
  char *v6;
  WTF::StringImpl *v7;
  uint64_t CodeExecutable;
  WTF::StringImpl *v9;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t CodeGenerator;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  WTF::StringImpl *v80;
  __int128 v81;

  v6 = (char *)a2 + 41952;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v7 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2000);
  if (v7)
  {
    *(_DWORD *)v7 += 2;
    CodeExecutable = JSC::BuiltinExecutables::arrayIteratorPrototypeNextCodeExecutable(*((JSC::BuiltinExecutables **)a2
                                                                                       + 11644));
    v9 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 11644) + 8);
    ++*((_DWORD *)v9 + 2);
    v80 = v9;
    v81 = xmmword_199125520;
    v18 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)a2, 0, (uint64_t)&v80, 0, 0, 0, v10, COERCE_DOUBLE(0x1B9FF0001B7F4), v11, v12);
    v19 = v80;
    v80 = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
      else
        --*((_DWORD *)v19 + 2);
    }
    v20 = JSC::JSFunction::create((uint64_t)a2, v18, a3, v13, v14, v15, v16, v17);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v7, v20, 4, v21, v22, v23, v24);
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::~StringImpl(v7, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v7 -= 2;
    }
  }
  else
  {
    CodeGenerator = JSC::arrayIteratorPrototypeNextCodeGenerator((JSC::BuiltinExecutables **)a2, a2);
    v75 = JSC::JSFunction::create((uint64_t)a2, CodeGenerator, a3, v70, v71, v72, v73, v74);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v75, 4, v76, v77, v78, v79);
  }
  v32 = *(_QWORD *)(*(_QWORD *)v6 + 2776);
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0xE00000002;
  *(_QWORD *)(v33 + 8) = "Array Iterator";
  *(_DWORD *)(v33 + 16) = 4;
  v80 = (WTF::StringImpl *)v33;
  v40 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v80, v34, v35, v36, v37, v38, v39);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v32, v40, 6, v41, v42, v43, v44);
  v52 = v80;
  v80 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
}

void JSC::ArrayPrototype::finishCreation(JSC::ArrayPrototype *this, JSC::VM *a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  unint64_t v26;
  uint64_t v27;
  JSC::BuiltinExecutables **v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  WTF::StringImpl *v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  double v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  double v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  WTF::AtomStringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  int v102;
  WTF::StringImpl *v103;
  WTF::AtomStringImpl *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __n128 v112;
  WTF::StringImpl *v113;
  WTF::AtomStringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::AtomStringImpl *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __n128 v131;
  WTF::StringImpl *v132;
  WTF::AtomStringImpl *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  int v142;
  WTF::StringImpl *v143;
  WTF::AtomStringImpl *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __n128 v152;
  WTF::StringImpl *v153;
  WTF::AtomStringImpl *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::AtomStringImpl *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __n128 v171;
  WTF::StringImpl *v172;
  WTF::AtomStringImpl *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  WTF::StringImpl *v181;
  int v182;
  WTF::StringImpl *v183;
  WTF::AtomStringImpl *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __n128 v192;
  WTF::StringImpl *v193;
  WTF::AtomStringImpl *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  WTF::StringImpl *v202;
  WTF::AtomStringImpl *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __n128 v211;
  WTF::StringImpl *v212;
  WTF::AtomStringImpl *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  int v221;
  uint64_t v222;
  WTF::StringImpl *v223;
  int v224;
  WTF::StringImpl *v225;
  WTF::AtomStringImpl *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __n128 v234;
  WTF::StringImpl *v235;
  WTF::AtomStringImpl *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  WTF::StringImpl *v244;
  int v245;
  WTF::StringImpl *v246;
  WTF::AtomStringImpl *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  __n128 v255;
  WTF::StringImpl *v256;
  WTF::AtomStringImpl *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  WTF::StringImpl *v264;
  WTF::StringImpl *v265;
  WTF::AtomStringImpl *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  __n128 v274;
  WTF::StringImpl *v275;
  WTF::AtomStringImpl *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  WTF::AtomStringImpl *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  __n128 v293;
  WTF::StringImpl *v294;
  WTF::AtomStringImpl *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  WTF::StringImpl *v302;
  uint64_t v303;
  WTF::StringImpl *v304;
  uint64_t v305;
  double v306;
  float v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  WTF::StringImpl *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  __n128 v319;
  WTF::AtomStringImpl *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  WTF::StringImpl *v327;
  uint64_t v328;
  WTF::StringImpl *v329;
  uint64_t v330;
  double v331;
  float v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  WTF::StringImpl *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  __n128 v344;
  WTF::AtomStringImpl *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  WTF::StringImpl *v352;
  uint64_t v353;
  WTF::StringImpl *v354;
  uint64_t v355;
  double v356;
  float v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  WTF::StringImpl *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  __n128 v369;
  WTF::AtomStringImpl *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  WTF::StringImpl *v378;
  int v379;
  WTF::StringImpl *v380;
  WTF::AtomStringImpl *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  __n128 v389;
  WTF::StringImpl *v390;
  WTF::AtomStringImpl *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  WTF::StringImpl *v398;
  WTF::StringImpl *v399;
  WTF::AtomStringImpl *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  __n128 v408;
  WTF::StringImpl *v409;
  WTF::AtomStringImpl *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  WTF::StringImpl *v417;
  uint64_t v418;
  WTF::StringImpl *v419;
  uint64_t v420;
  double v421;
  float v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  WTF::StringImpl *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  __n128 v434;
  WTF::AtomStringImpl *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  WTF::StringImpl *v442;
  uint64_t v443;
  WTF::StringImpl *v444;
  uint64_t v445;
  double v446;
  float v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  WTF::StringImpl *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  __n128 v459;
  WTF::AtomStringImpl *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  WTF::StringImpl *v467;
  uint64_t v468;
  WTF::StringImpl *v469;
  uint64_t v470;
  double v471;
  float v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  WTF::StringImpl *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  __n128 v484;
  WTF::AtomStringImpl *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  WTF::StringImpl *v492;
  uint64_t v493;
  WTF::StringImpl *v494;
  uint64_t v495;
  double v496;
  float v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  WTF::StringImpl *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  __n128 v509;
  WTF::AtomStringImpl *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  WTF::StringImpl *v517;
  uint64_t v518;
  WTF::StringImpl *v519;
  uint64_t v520;
  double v521;
  float v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  WTF::StringImpl *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  __n128 v534;
  WTF::AtomStringImpl *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  WTF::StringImpl *v542;
  uint64_t v543;
  WTF::StringImpl *v544;
  uint64_t v545;
  double v546;
  float v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  WTF::StringImpl *v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  __n128 v559;
  WTF::AtomStringImpl *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  WTF::StringImpl *v568;
  int v569;
  WTF::StringImpl *v570;
  WTF::AtomStringImpl *v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  __n128 v579;
  WTF::StringImpl *v580;
  WTF::AtomStringImpl *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  WTF::StringImpl *v589;
  int v590;
  WTF::StringImpl *v591;
  WTF::AtomStringImpl *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  __n128 v600;
  WTF::StringImpl *v601;
  WTF::AtomStringImpl *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  WTF::StringImpl *v609;
  uint64_t CodeExecutable;
  WTF::StringImpl *v611;
  uint64_t v612;
  double v613;
  float v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  WTF::StringImpl *v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  __n128 v626;
  WTF::AtomStringImpl *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  WTF::StringImpl *v634;
  uint64_t LastCodeExecutable;
  WTF::StringImpl *v636;
  uint64_t v637;
  double v638;
  float v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  WTF::StringImpl *v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  __n128 v651;
  WTF::AtomStringImpl *v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  WTF::StringImpl *v659;
  uint64_t IndexCodeExecutable;
  WTF::StringImpl *v661;
  uint64_t v662;
  double v663;
  float v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  WTF::StringImpl *v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  __n128 v676;
  WTF::AtomStringImpl *v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  WTF::StringImpl *v684;
  uint64_t LastIndexCodeExecutable;
  WTF::StringImpl *v686;
  uint64_t v687;
  double v688;
  float v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  WTF::StringImpl *v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  __n128 v701;
  WTF::AtomStringImpl *v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  WTF::StringImpl *v709;
  uint64_t v710;
  WTF::StringImpl *v711;
  uint64_t v712;
  double v713;
  float v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  WTF::StringImpl *v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  __n128 v726;
  WTF::AtomStringImpl *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  WTF::StringImpl *v734;
  uint64_t v735;
  WTF::StringImpl *v736;
  uint64_t v737;
  double v738;
  float v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  WTF::StringImpl *v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  __n128 v751;
  WTF::AtomStringImpl *v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  WTF::StringImpl *v759;
  uint64_t v760;
  WTF::StringImpl *v761;
  uint64_t v762;
  double v763;
  float v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  WTF::StringImpl *v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  __n128 v776;
  WTF::AtomStringImpl *v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  WTF::StringImpl *v784;
  uint64_t v785;
  WTF::StringImpl *v786;
  uint64_t v787;
  double v788;
  float v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  WTF::StringImpl *v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  __n128 v801;
  WTF::AtomStringImpl *v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  WTF::StringImpl *v809;
  uint64_t v810;
  WTF::StringImpl *v811;
  uint64_t v812;
  double v813;
  float v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  WTF::StringImpl *v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  __n128 v826;
  WTF::AtomStringImpl *v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  WTF::StringImpl *v834;
  uint64_t v835;
  WTF::StringImpl *v836;
  uint64_t v837;
  double v838;
  float v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  WTF::StringImpl *v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  __n128 v851;
  WTF::AtomStringImpl *v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  WTF::StringImpl *v859;
  uint64_t v860;
  WTF::StringImpl *v861;
  uint64_t v862;
  double v863;
  float v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  WTF::StringImpl *v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  __n128 v876;
  WTF::AtomStringImpl *v877;
  uint64_t v878;
  const JSC::PropertyTable *v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  __n128 v889;
  WTF::AtomStringImpl *v890;
  uint64_t v891;
  const JSC::PropertyTable *v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  __n128 v902;
  WTF::AtomStringImpl *v903;
  uint64_t v904;
  const JSC::PropertyTable *v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  __n128 v915;
  WTF::AtomStringImpl *v916;
  uint64_t v917;
  const JSC::PropertyTable *v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  __n128 v928;
  WTF::AtomStringImpl *v929;
  uint64_t v930;
  const JSC::PropertyTable *v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  __n128 v941;
  WTF::AtomStringImpl *v942;
  uint64_t v943;
  const JSC::PropertyTable *v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  __n128 v954;
  WTF::AtomStringImpl *v955;
  uint64_t v956;
  const JSC::PropertyTable *v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  __n128 v967;
  WTF::AtomStringImpl *v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  __n128 v975;
  uint64_t v976;
  WTF::AtomStringImpl *v977;
  JSC::Structure *v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  int v984;
  JSC::VM *v985;
  JSC::JSObject *v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  double v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  __n128 v997;
  uint64_t v998;
  uint64_t v999;
  unint64_t *v1000;
  unint64_t v1001;
  unint64_t v1002;
  void *v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  unint64_t v1010;
  void *v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  unint64_t v1018;
  void *v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  unint64_t v1026;
  void *v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  unint64_t v1034;
  void *v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  unint64_t v1042;
  void *v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  unint64_t v1050;
  void *v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  unint64_t v1058;
  void *v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  unint64_t v1066;
  void *v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  unint64_t v1074;
  void *v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  unint64_t v1082;
  void *v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  unint64_t v1090;
  void *v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  unint64_t v1098;
  void *v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  unint64_t v1106;
  void *v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  unint64_t v1114;
  void *v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  unint64_t v1122;
  void *v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  unint64_t v1130;
  void *v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  unint64_t v1138;
  void *v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  unint64_t v1146;
  void *v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  unint64_t v1154;
  void *v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  unint64_t v1162;
  void *v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  unint64_t v1170;
  void *v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  unint64_t v1178;
  void *v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  unint64_t v1186;
  void *v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  unint64_t v1194;
  void *v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  unint64_t v1202;
  void *v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  unint64_t v1210;
  void *v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  unint64_t v1218;
  void *v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  unint64_t v1226;
  void *v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  unint64_t v1234;
  void *v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  unint64_t v1242;
  void *v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  unint64_t v1250;
  void *v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  unint64_t v1258;
  void *v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  unint64_t v1266;
  void *v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  unint64_t v1274;
  void *v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  unint64_t v1282;
  void *v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  unint64_t v1290;
  void *v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  unint64_t v1298;
  void *v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  unint64_t v1306;
  void *v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  unint64_t v1314;
  void *v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  unint64_t v1322;
  void *v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  unint64_t v1330;
  void *v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  unint64_t v1338;
  void *v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  unint64_t v1346;
  void *v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  unint64_t v1354;
  void *v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  unint64_t v1362;
  void *v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  unint64_t v1370;
  void *v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  unint64_t v1378;
  void *v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  unint64_t v1386;
  void *v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  unint64_t v1394;
  void *v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  unint64_t v1402;
  void *v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  unint64_t v1410;
  void *v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  unint64_t v1418;
  void *v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  unint64_t v1426;
  void *v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  unint64_t v1434;
  void *v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  unint64_t v1442;
  void *v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  unint64_t v1450;
  void *v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  unint64_t v1458;
  void *v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  unint64_t v1466;
  void *v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  unint64_t v1474;
  void *v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  unint64_t v1482;
  void *v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t (*v1490)(WTF::StringImpl **);
  WTF::StringImpl **v1491;
  uint64_t (*v1492)(WTF::StringImpl **);
  WTF::StringImpl **v1493;
  uint64_t (*v1494)(WTF::StringImpl **);
  WTF::StringImpl **v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  __n128 v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  __n128 v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  __n128 v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  __n128 v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  __n128 v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  __n128 v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  __n128 v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  __n128 v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  __n128 v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  __n128 v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  __n128 v1616;
  uint64_t CodeGenerator;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  __n128 v1627;
  uint64_t LastCodeGenerator;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  __n128 v1638;
  uint64_t IndexCodeGenerator;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  __n128 v1649;
  uint64_t LastIndexCodeGenerator;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  __n128 v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  __n128 v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  __n128 v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  __n128 v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  __n128 v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  __n128 v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  __n128 v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  __n128 v1737;
  uint64_t (*v1738)(WTF::StringImpl **);
  WTF::StringImpl **v1739;
  unint64_t v1740[2];
  int v1741;
  int v1742;
  uint64_t v1743;
  WTF::StringImpl *v1744;
  __int128 v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;

  v1759 = *MEMORY[0x1E0C80C00];
  v12 = (char *)a2 + 41952;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v13 = *(_QWORD *)(*(_QWORD *)v12 + 2512);
  v14 = *(_QWORD *)(a3 + 520);
  if ((v14 & 1) != 0)
  {
    v1490 = *(uint64_t (**)(WTF::StringImpl **))(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a3 & 8) != 0)
      v1491 = (WTF::StringImpl **)(a3 - 16);
    else
      v1491 = (WTF::StringImpl **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
    v1744 = *v1491;
    *(_QWORD *)&v1745 = a3;
    *((_QWORD *)&v1745 + 1) = a3 + 520;
    v14 = v1490(&v1744);
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v13, v14, 4, a7, a8, a9, a4);
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 3024);
  v20 = (uint64_t *)(a3 + 528);
  v21 = *(_QWORD *)(a3 + 528);
  if ((v21 & 1) != 0)
  {
    v1492 = *(uint64_t (**)(WTF::StringImpl **))(v21 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a3 & 8) != 0)
      v1493 = (WTF::StringImpl **)(a3 - 16);
    else
      v1493 = (WTF::StringImpl **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
    v1744 = *v1493;
    *(_QWORD *)&v1745 = a3;
    *((_QWORD *)&v1745 + 1) = a3 + 528;
    v21 = v1492(&v1744);
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v19, v21, 4, v15, v16, v17, v18);
  v26 = *(_QWORD *)(*(_QWORD *)v12 + 2712);
  v27 = *v20;
  if ((*v20 & 1) != 0)
  {
    v1494 = *(uint64_t (**)(WTF::StringImpl **))(v27 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a3 & 8) != 0)
      v1495 = (WTF::StringImpl **)(a3 - 16);
    else
      v1495 = (WTF::StringImpl **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
    v1744 = *v1495;
    *(_QWORD *)&v1745 = a3;
    *((_QWORD *)&v1745 + 1) = a3 + 528;
    v27 = v1494(&v1744);
  }
  v28 = (JSC::BuiltinExecutables **)((char *)a2 + 93152);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v26, v27, 4, v22, v23, v24, v25);
  v29 = *(_QWORD *)v12;
  v30 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 2496);
  if (!v30)
  {
    v1740[0] = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, v1740, 0, (uint64_t)JSC::arrayProtoFuncToLocaleString, 0, 0, 4u);
    goto LABEL_15;
  }
  v31 = *(_DWORD *)v30 + 2;
  *(_DWORD *)v30 = v31;
  v1740[0] = (unint64_t)v30;
  if ((*((_BYTE *)v30 + 16) & 0x20) != 0)
  {
    v32 = *(WTF::StringImpl **)(v29 + 872);
    if (!v32)
      goto LABEL_10;
    v31 = *(_DWORD *)v32;
  }
  else
  {
    v32 = v30;
  }
  *(_DWORD *)v32 = v31 + 2;
LABEL_10:
  v1744 = v32;
  v40 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1744, (uint64_t)JSC::arrayProtoFuncToLocaleString, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v42 = v1744;
  v1744 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v1418, v1419, v1420, v1421, v1422, v1423, v1424, v1425);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v30, v40, 4, v37, v38, v39, v41);
  if (*(_DWORD *)v30 == 2)
  {
    WTF::StringImpl::~StringImpl(v30, v43, v44, v45, v46, v47, v48, v49);
    WTF::fastFree(v1082, v1083, v1084, v1085, v1086, v1087, v1088, v1089);
  }
  else
  {
    *(_DWORD *)v30 -= 2;
  }
LABEL_15:
  v50 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 344);
  if (v50)
  {
    *(_DWORD *)v50 += 2;
    v51 = JSC::BuiltinExecutables::arrayPrototypeConcatCodeExecutable(*v28);
    v52 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v52 + 2);
    v1744 = v52;
    v1745 = xmmword_199124FA0;
    v61 = JSC::UnlinkedFunctionExecutable::link(v51, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v53, COERCE_DOUBLE(0x442600004295), v54, v55);
    v62 = v1744;
    v1744 = 0;
    if (v62)
    {
      if (*((_DWORD *)v62 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v62 + 8))(v62);
      else
        --*((_DWORD *)v62 + 2);
    }
    v63 = JSC::JSFunction::create((uint64_t)a2, v61, (_DWORD *)a3, v56, v57, v58, v59, v60);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v50, v63, 4, v64, v65, v66, v67);
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v1090, v1091, v1092, v1093, v1094, v1095, v1096, v1097);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  else
  {
    v1496 = JSC::arrayPrototypeConcatCodeGenerator((JSC::BuiltinExecutables **)a2, v43);
    v1502 = JSC::JSFunction::create((uint64_t)a2, v1496, (_DWORD *)a3, v1497, v1498, v1499, v1500, v1501);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1502, 4, v1503, v1504, v1505, v1506);
  }
  v75 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 520);
  if (v75)
  {
    *(_DWORD *)v75 += 2;
    v76 = JSC::BuiltinExecutables::arrayPrototypeFillCodeExecutable(*v28);
    v77 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v77 + 2);
    v1744 = v77;
    v1745 = xmmword_1991250E0;
    v86 = JSC::UnlinkedFunctionExecutable::link(v76, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v78, COERCE_DOUBLE(0x11E7700011BB8), v79, v80);
    v87 = v1744;
    v1744 = 0;
    if (v87)
    {
      if (*((_DWORD *)v87 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v87 + 8))(v87);
      else
        --*((_DWORD *)v87 + 2);
    }
    v88 = JSC::JSFunction::create((uint64_t)a2, v86, (_DWORD *)a3, v81, v82, v83, v84, v85);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v75, v88, 4, v89, v90, v91, v92);
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, v93, v94, v95, v96, v97, v98, v99);
      WTF::fastFree(v1098, v1099, v1100, v1101, v1102, v1103, v1104, v1105);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
  }
  else
  {
    v1507 = JSC::arrayPrototypeFillCodeGenerator((JSC::BuiltinExecutables **)a2, v68);
    v1513 = JSC::JSFunction::create((uint64_t)a2, v1507, (_DWORD *)a3, v1508, v1509, v1510, v1511, v1512);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1513, 4, v1514, v1515, v1516, v1517);
  }
  v100 = *(_QWORD *)v12;
  v101 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 1728);
  if (!v101)
  {
    v1740[0] = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, v1740, 1, (uint64_t)JSC::arrayProtoFuncJoin, 0, 0, 4u);
    goto LABEL_36;
  }
  v102 = *(_DWORD *)v101 + 2;
  *(_DWORD *)v101 = v102;
  v1740[0] = (unint64_t)v101;
  if ((*((_BYTE *)v101 + 16) & 0x20) != 0)
  {
    v103 = *(WTF::StringImpl **)(v100 + 872);
    if (!v103)
      goto LABEL_31;
    v102 = *(_DWORD *)v103;
  }
  else
  {
    v103 = v101;
  }
  *(_DWORD *)v103 = v102 + 2;
LABEL_31:
  v1744 = v103;
  v111 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1744, (uint64_t)JSC::arrayProtoFuncJoin, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v113 = v1744;
  v1744 = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
    {
      WTF::StringImpl::~StringImpl(v113, v104, v105, v106, v107, v108, v109, v110);
      WTF::fastFree(v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433);
    }
    else
    {
      *(_DWORD *)v113 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v101, v111, 4, v108, v109, v110, v112);
  if (*(_DWORD *)v101 == 2)
  {
    WTF::StringImpl::~StringImpl(v101, v114, v115, v116, v117, v118, v119, v120);
    WTF::fastFree(v1106, v1107, v1108, v1109, v1110, v1111, v1112, v1113);
  }
  else
  {
    *(_DWORD *)v101 -= 2;
  }
LABEL_36:
  WTF::AtomStringImpl::addLiteral((uint64_t)"pop", 3uLL, v116, v117, v118, v119, v120, &v1744);
  v121 = v1744;
  if (v1744 && (*((_BYTE *)v1744 + 16) & 0x20) == 0)
  {
    v122 = v1744;
LABEL_39:
    *(_DWORD *)v122 += 2;
    goto LABEL_40;
  }
  v122 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v122)
    goto LABEL_39;
LABEL_40:
  v1744 = v122;
  v130 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1744, (uint64_t)JSC::arrayProtoFuncPop, 0, 20, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v132 = v1744;
  v1744 = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 2)
    {
      WTF::StringImpl::~StringImpl(v132, v123, v124, v125, v126, v127, v128, v129);
      WTF::fastFree(v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1121);
    }
    else
    {
      *(_DWORD *)v132 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v121, v130, 4, v127, v128, v129, v131);
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
    {
      WTF::StringImpl::~StringImpl(v121, v133, v134, v135, v136, v137, v138, v139);
      WTF::fastFree(v1122, v1123, v1124, v1125, v1126, v1127, v1128, v1129);
    }
    else
    {
      *(_DWORD *)v121 -= 2;
    }
  }
  v140 = *(_QWORD *)v12;
  v141 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 2984);
  if (!v141)
  {
    v1740[0] = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, v1740, 1, (uint64_t)JSC::arrayProtoFuncPush, 0, 19, 4u);
    goto LABEL_55;
  }
  v142 = *(_DWORD *)v141 + 2;
  *(_DWORD *)v141 = v142;
  v1740[0] = (unint64_t)v141;
  if ((*((_BYTE *)v141 + 16) & 0x20) != 0)
  {
    v143 = *(WTF::StringImpl **)(v140 + 872);
    if (!v143)
      goto LABEL_50;
    v142 = *(_DWORD *)v143;
  }
  else
  {
    v143 = v141;
  }
  *(_DWORD *)v143 = v142 + 2;
LABEL_50:
  v1744 = v143;
  v151 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1744, (uint64_t)JSC::arrayProtoFuncPush, 0, 19, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v153 = v1744;
  v1744 = 0;
  if (v153)
  {
    if (*(_DWORD *)v153 == 2)
    {
      WTF::StringImpl::~StringImpl(v153, v144, v145, v146, v147, v148, v149, v150);
      WTF::fastFree(v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441);
    }
    else
    {
      *(_DWORD *)v153 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v141, v151, 4, v148, v149, v150, v152);
  if (*(_DWORD *)v141 == 2)
  {
    WTF::StringImpl::~StringImpl(v141, v154, v155, v156, v157, v158, v159, v160);
    WTF::fastFree(v1130, v1131, v1132, v1133, v1134, v1135, v1136, v1137);
  }
  else
  {
    *(_DWORD *)v141 -= 2;
  }
LABEL_55:
  WTF::AtomStringImpl::addLiteral((uint64_t)"reverse", 7uLL, v156, v157, v158, v159, v160, &v1744);
  v161 = v1744;
  if (v1744 && (*((_BYTE *)v1744 + 16) & 0x20) == 0)
  {
    v162 = v1744;
LABEL_58:
    *(_DWORD *)v162 += 2;
    goto LABEL_59;
  }
  v162 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v162)
    goto LABEL_58;
LABEL_59:
  v1744 = v162;
  v170 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1744, (uint64_t)JSC::arrayProtoFuncReverse, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v172 = v1744;
  v1744 = 0;
  if (v172)
  {
    if (*(_DWORD *)v172 == 2)
    {
      WTF::StringImpl::~StringImpl(v172, v163, v164, v165, v166, v167, v168, v169);
      WTF::fastFree(v1138, v1139, v1140, v1141, v1142, v1143, v1144, v1145);
    }
    else
    {
      *(_DWORD *)v172 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v161, v170, 4, v167, v168, v169, v171);
  if (v161)
  {
    if (*(_DWORD *)v161 == 2)
    {
      WTF::StringImpl::~StringImpl(v161, v173, v174, v175, v176, v177, v178, v179);
      WTF::fastFree(v1146, v1147, v1148, v1149, v1150, v1151, v1152, v1153);
    }
    else
    {
      *(_DWORD *)v161 -= 2;
    }
  }
  v180 = *(_QWORD *)v12;
  v181 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 3072);
  if (!v181)
  {
    v1740[0] = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, v1740, 0, (uint64_t)JSC::arrayProtoFuncShift, 0, 0, 4u);
    goto LABEL_74;
  }
  v182 = *(_DWORD *)v181 + 2;
  *(_DWORD *)v181 = v182;
  v1740[0] = (unint64_t)v181;
  if ((*((_BYTE *)v181 + 16) & 0x20) != 0)
  {
    v183 = *(WTF::StringImpl **)(v180 + 872);
    if (!v183)
      goto LABEL_69;
    v182 = *(_DWORD *)v183;
  }
  else
  {
    v183 = v181;
  }
  *(_DWORD *)v183 = v182 + 2;
LABEL_69:
  v1744 = v183;
  v191 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1744, (uint64_t)JSC::arrayProtoFuncShift, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v193 = v1744;
  v1744 = 0;
  if (v193)
  {
    if (*(_DWORD *)v193 == 2)
    {
      WTF::StringImpl::~StringImpl(v193, v184, v185, v186, v187, v188, v189, v190);
      WTF::fastFree(v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1449);
    }
    else
    {
      *(_DWORD *)v193 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v181, v191, 4, v188, v189, v190, v192);
  if (*(_DWORD *)v181 == 2)
  {
    WTF::StringImpl::~StringImpl(v181, v194, v195, v196, v197, v198, v199, v200);
    WTF::fastFree(v1154, v1155, v1156, v1157, v1158, v1159, v1160, v1161);
  }
  else
  {
    *(_DWORD *)v181 -= 2;
  }
LABEL_74:
  v201 = JSC::Symbols::shiftPrivateName[0] + 4;
  JSC::Symbols::shiftPrivateName[0] += 4;
  if ((byte_1ECF30C40 & 0x20) == 0)
  {
    v202 = (WTF::StringImpl *)JSC::Symbols::shiftPrivateName;
LABEL_76:
    *(_DWORD *)v202 = v201 + 2;
    goto LABEL_77;
  }
  v202 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v202)
  {
    v201 = *(_DWORD *)v202;
    goto LABEL_76;
  }
LABEL_77:
  v1744 = v202;
  v210 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1744, (uint64_t)JSC::arrayProtoFuncShift, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v212 = v1744;
  v1744 = 0;
  if (v212)
  {
    if (*(_DWORD *)v212 == 2)
    {
      WTF::StringImpl::~StringImpl(v212, v203, v204, v205, v206, v207, v208, v209);
      WTF::fastFree(v1162, v1163, v1164, v1165, v1166, v1167, v1168, v1169);
    }
    else
    {
      *(_DWORD *)v212 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::shiftPrivateName, v210, 14, v207, v208, v209, v211);
  v220 = JSC::Symbols::shiftPrivateName[0] - 2;
  if (JSC::Symbols::shiftPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::shiftPrivateName, v213, v214, v215, v216, v217, v218, v219);
    WTF::fastFree(v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009);
    v220 = JSC::Symbols::shiftPrivateName[0];
  }
  else
  {
    JSC::Symbols::shiftPrivateName[0] -= 2;
  }
  v221 = v220 - 2;
  if (v221)
  {
    JSC::Symbols::shiftPrivateName[0] = v221;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::shiftPrivateName, v213, v214, v215, v216, v217, v218, v219);
    WTF::fastFree(v1010, v1011, v1012, v1013, v1014, v1015, v1016, v1017);
  }
  v222 = *(_QWORD *)v12;
  v223 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 2312);
  if (!v223)
  {
    v1740[0] = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, v1740, 2, (uint64_t)JSC::arrayProtoFuncSlice, 0, 21, 4u);
    goto LABEL_93;
  }
  v224 = *(_DWORD *)v223 + 2;
  *(_DWORD *)v223 = v224;
  v1740[0] = (unint64_t)v223;
  if ((*((_BYTE *)v223 + 16) & 0x20) != 0)
  {
    v225 = *(WTF::StringImpl **)(v222 + 872);
    if (!v225)
      goto LABEL_88;
    v224 = *(_DWORD *)v225;
  }
  else
  {
    v225 = v223;
  }
  *(_DWORD *)v225 = v224 + 2;
LABEL_88:
  v1744 = v225;
  v233 = JSC::JSFunction::create((uint64_t)a2, a3, 2, &v1744, (uint64_t)JSC::arrayProtoFuncSlice, 0, 21, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v235 = v1744;
  v1744 = 0;
  if (v235)
  {
    if (*(_DWORD *)v235 == 2)
    {
      WTF::StringImpl::~StringImpl(v235, v226, v227, v228, v229, v230, v231, v232);
      WTF::fastFree(v1450, v1451, v1452, v1453, v1454, v1455, v1456, v1457);
    }
    else
    {
      *(_DWORD *)v235 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v223, v233, 4, v230, v231, v232, v234);
  if (*(_DWORD *)v223 == 2)
  {
    WTF::StringImpl::~StringImpl(v223, v236, v237, v238, v239, v240, v241, v242);
    WTF::fastFree(v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177);
  }
  else
  {
    *(_DWORD *)v223 -= 2;
  }
LABEL_93:
  v243 = *(_QWORD *)v12;
  v244 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 2328);
  if (!v244)
  {
    v1740[0] = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, v1740, 1, (uint64_t)JSC::arrayProtoFuncSort, 0, 0, 4u);
    goto LABEL_102;
  }
  v245 = *(_DWORD *)v244 + 2;
  *(_DWORD *)v244 = v245;
  v1740[0] = (unint64_t)v244;
  if ((*((_BYTE *)v244 + 16) & 0x20) != 0)
  {
    v246 = *(WTF::StringImpl **)(v243 + 872);
    if (!v246)
      goto LABEL_97;
    v245 = *(_DWORD *)v246;
  }
  else
  {
    v246 = v244;
  }
  *(_DWORD *)v246 = v245 + 2;
LABEL_97:
  v1744 = v246;
  v254 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1744, (uint64_t)JSC::arrayProtoFuncSort, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v256 = v1744;
  v1744 = 0;
  if (v256)
  {
    if (*(_DWORD *)v256 == 2)
    {
      WTF::StringImpl::~StringImpl(v256, v247, v248, v249, v250, v251, v252, v253);
      WTF::fastFree(v1458, v1459, v1460, v1461, v1462, v1463, v1464, v1465);
    }
    else
    {
      *(_DWORD *)v256 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v244, v254, 4, v251, v252, v253, v255);
  if (*(_DWORD *)v244 == 2)
  {
    WTF::StringImpl::~StringImpl(v244, v257, v258, v259, v260, v261, v262, v263);
    WTF::fastFree(v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185);
  }
  else
  {
    *(_DWORD *)v244 -= 2;
  }
LABEL_102:
  WTF::AtomStringImpl::addLiteral((uint64_t)"splice", 6uLL, v259, v260, v261, v262, v263, &v1744);
  v264 = v1744;
  if (v1744 && (*((_BYTE *)v1744 + 16) & 0x20) == 0)
  {
    v265 = v1744;
LABEL_105:
    *(_DWORD *)v265 += 2;
    goto LABEL_106;
  }
  v265 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v265)
    goto LABEL_105;
LABEL_106:
  v1744 = v265;
  v273 = JSC::JSFunction::create((uint64_t)a2, a3, 2, &v1744, (uint64_t)JSC::arrayProtoFuncSplice, 0, 22, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v275 = v1744;
  v1744 = 0;
  if (v275)
  {
    if (*(_DWORD *)v275 == 2)
    {
      WTF::StringImpl::~StringImpl(v275, v266, v267, v268, v269, v270, v271, v272);
      WTF::fastFree(v1186, v1187, v1188, v1189, v1190, v1191, v1192, v1193);
    }
    else
    {
      *(_DWORD *)v275 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v264, v273, 4, v270, v271, v272, v274);
  if (v264)
  {
    if (*(_DWORD *)v264 == 2)
    {
      WTF::StringImpl::~StringImpl(v264, v276, v277, v278, v279, v280, v281, v282);
      WTF::fastFree(v1194, v1195, v1196, v1197, v1198, v1199, v1200, v1201);
    }
    else
    {
      *(_DWORD *)v264 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"unshift", 7uLL, v278, v279, v280, v281, v282, &v1744);
  v283 = v1744;
  if (v1744 && (*((_BYTE *)v1744 + 16) & 0x20) == 0)
  {
    v284 = v1744;
LABEL_115:
    *(_DWORD *)v284 += 2;
    goto LABEL_116;
  }
  v284 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v284)
    goto LABEL_115;
LABEL_116:
  v1744 = v284;
  v292 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1744, (uint64_t)JSC::arrayProtoFuncUnShift, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v294 = v1744;
  v1744 = 0;
  if (v294)
  {
    if (*(_DWORD *)v294 == 2)
    {
      WTF::StringImpl::~StringImpl(v294, v285, v286, v287, v288, v289, v290, v291);
      WTF::fastFree(v1202, v1203, v1204, v1205, v1206, v1207, v1208, v1209);
    }
    else
    {
      *(_DWORD *)v294 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v283, v292, 4, v289, v290, v291, v293);
  if (v283)
  {
    if (*(_DWORD *)v283 == 2)
    {
      WTF::StringImpl::~StringImpl(v283, v295, v296, v297, v298, v299, v300, v301);
      WTF::fastFree(v1210, v1211, v1212, v1213, v1214, v1215, v1216, v1217);
    }
    else
    {
      *(_DWORD *)v283 -= 2;
    }
  }
  v302 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 512);
  if (v302)
  {
    *(_DWORD *)v302 += 2;
    v303 = JSC::BuiltinExecutables::arrayPrototypeEveryCodeExecutable(*v28);
    v304 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v304 + 2);
    v1744 = v304;
    v1745 = xmmword_1991250C0;
    v313 = JSC::UnlinkedFunctionExecutable::link(v303, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v305, COERCE_DOUBLE(0x11A76000118B6), v306, v307);
    v314 = v1744;
    v1744 = 0;
    if (v314)
    {
      if (*((_DWORD *)v314 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v314 + 8))(v314);
      else
        --*((_DWORD *)v314 + 2);
    }
    v315 = JSC::JSFunction::create((uint64_t)a2, v313, (_DWORD *)a3, v308, v309, v310, v311, v312);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v302, v315, 4, v316, v317, v318, v319);
    if (*(_DWORD *)v302 == 2)
    {
      WTF::StringImpl::~StringImpl(v302, v320, v321, v322, v323, v324, v325, v326);
      WTF::fastFree(v1218, v1219, v1220, v1221, v1222, v1223, v1224, v1225);
    }
    else
    {
      *(_DWORD *)v302 -= 2;
    }
  }
  else
  {
    v1518 = JSC::arrayPrototypeEveryCodeGenerator((JSC::BuiltinExecutables **)a2, v295);
    v1524 = JSC::JSFunction::create((uint64_t)a2, v1518, (_DWORD *)a3, v1519, v1520, v1521, v1522, v1523);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1524, 4, v1525, v1526, v1527, v1528);
  }
  v327 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 632);
  if (v327)
  {
    *(_DWORD *)v327 += 2;
    v328 = JSC::BuiltinExecutables::arrayPrototypeForEachCodeExecutable(*v28);
    v329 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v329 + 2);
    v1744 = v329;
    v1745 = xmmword_199125200;
    v338 = JSC::UnlinkedFunctionExecutable::link(v328, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v330, COERCE_DOUBLE(0x13DD600013C3FLL), v331, v332);
    v339 = v1744;
    v1744 = 0;
    if (v339)
    {
      if (*((_DWORD *)v339 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v339 + 8))(v339);
      else
        --*((_DWORD *)v339 + 2);
    }
    v340 = JSC::JSFunction::create((uint64_t)a2, v338, (_DWORD *)a3, v333, v334, v335, v336, v337);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v327, v340, 4, v341, v342, v343, v344);
    if (*(_DWORD *)v327 == 2)
    {
      WTF::StringImpl::~StringImpl(v327, v345, v346, v347, v348, v349, v350, v351);
      WTF::fastFree(v1226, v1227, v1228, v1229, v1230, v1231, v1232, v1233);
    }
    else
    {
      *(_DWORD *)v327 -= 2;
    }
  }
  else
  {
    v1529 = JSC::arrayPrototypeForEachCodeGenerator((JSC::BuiltinExecutables **)a2, v320);
    v1535 = JSC::JSFunction::create((uint64_t)a2, v1529, (_DWORD *)a3, v1530, v1531, v1532, v1533, v1534);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1535, 4, v1536, v1537, v1538, v1539);
  }
  v352 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 1480);
  if (v352)
  {
    *(_DWORD *)v352 += 2;
    v353 = JSC::BuiltinExecutables::arrayPrototypeSomeCodeExecutable(*v28);
    v354 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v354 + 2);
    v1744 = v354;
    v1745 = xmmword_199125930;
    v363 = JSC::UnlinkedFunctionExecutable::link(v353, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v355, COERCE_DOUBLE(0x25FEF00025E32), v356, v357);
    v364 = v1744;
    v1744 = 0;
    if (v364)
    {
      if (*((_DWORD *)v364 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v364 + 8))(v364);
      else
        --*((_DWORD *)v364 + 2);
    }
    v365 = JSC::JSFunction::create((uint64_t)a2, v363, (_DWORD *)a3, v358, v359, v360, v361, v362);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v352, v365, 4, v366, v367, v368, v369);
    if (*(_DWORD *)v352 == 2)
    {
      WTF::StringImpl::~StringImpl(v352, v370, v371, v372, v373, v374, v375, v376);
      WTF::fastFree(v1234, v1235, v1236, v1237, v1238, v1239, v1240, v1241);
    }
    else
    {
      *(_DWORD *)v352 -= 2;
    }
  }
  else
  {
    v1540 = JSC::arrayPrototypeSomeCodeGenerator((JSC::BuiltinExecutables **)a2, v345);
    v1546 = JSC::JSFunction::create((uint64_t)a2, v1540, (_DWORD *)a3, v1541, v1542, v1543, v1544, v1545);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1546, 4, v1547, v1548, v1549, v1550);
  }
  v377 = *(_QWORD *)v12;
  v378 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 4088);
  if (!v378)
  {
    v1740[0] = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, v1740, 1, (uint64_t)JSC::arrayProtoFuncIndexOf, 0, 23, 4u);
    goto LABEL_149;
  }
  v379 = *(_DWORD *)v378 + 2;
  *(_DWORD *)v378 = v379;
  v1740[0] = (unint64_t)v378;
  if ((*((_BYTE *)v378 + 16) & 0x20) != 0)
  {
    v380 = *(WTF::StringImpl **)(v377 + 872);
    if (!v380)
      goto LABEL_144;
    v379 = *(_DWORD *)v380;
  }
  else
  {
    v380 = v378;
  }
  *(_DWORD *)v380 = v379 + 2;
LABEL_144:
  v1744 = v380;
  v388 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1744, (uint64_t)JSC::arrayProtoFuncIndexOf, 0, 23, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v390 = v1744;
  v1744 = 0;
  if (v390)
  {
    if (*(_DWORD *)v390 == 2)
    {
      WTF::StringImpl::~StringImpl(v390, v381, v382, v383, v384, v385, v386, v387);
      WTF::fastFree(v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473);
    }
    else
    {
      *(_DWORD *)v390 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v378, v388, 4, v385, v386, v387, v389);
  if (*(_DWORD *)v378 == 2)
  {
    WTF::StringImpl::~StringImpl(v378, v391, v392, v393, v394, v395, v396, v397);
    WTF::fastFree(v1242, v1243, v1244, v1245, v1246, v1247, v1248, v1249);
  }
  else
  {
    *(_DWORD *)v378 -= 2;
  }
LABEL_149:
  WTF::AtomStringImpl::addLiteral((uint64_t)"lastIndexOf", 0xBuLL, v393, v394, v395, v396, v397, &v1744);
  v398 = v1744;
  if (v1744 && (*((_BYTE *)v1744 + 16) & 0x20) == 0)
  {
    v399 = v1744;
LABEL_152:
    *(_DWORD *)v399 += 2;
    goto LABEL_153;
  }
  v399 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v399)
    goto LABEL_152;
LABEL_153:
  v1744 = v399;
  v407 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1744, (uint64_t)JSC::arrayProtoFuncLastIndexOf, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v409 = v1744;
  v1744 = 0;
  if (v409)
  {
    if (*(_DWORD *)v409 == 2)
    {
      WTF::StringImpl::~StringImpl(v409, v400, v401, v402, v403, v404, v405, v406);
      WTF::fastFree(v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257);
    }
    else
    {
      *(_DWORD *)v409 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v398, v407, 4, v404, v405, v406, v408);
  if (v398)
  {
    if (*(_DWORD *)v398 == 2)
    {
      WTF::StringImpl::~StringImpl(v398, v410, v411, v412, v413, v414, v415, v416);
      WTF::fastFree(v1258, v1259, v1260, v1261, v1262, v1263, v1264, v1265);
    }
    else
    {
      *(_DWORD *)v398 -= 2;
    }
  }
  v417 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 528);
  if (v417)
  {
    *(_DWORD *)v417 += 2;
    v418 = JSC::BuiltinExecutables::arrayPrototypeFilterCodeExecutable(*v28);
    v419 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v419 + 2);
    v1744 = v419;
    v1745 = xmmword_1991250F0;
    v428 = JSC::UnlinkedFunctionExecutable::link(v418, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v420, COERCE_DOUBLE(0x120C000011E77), v421, v422);
    v429 = v1744;
    v1744 = 0;
    if (v429)
    {
      if (*((_DWORD *)v429 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v429 + 8))(v429);
      else
        --*((_DWORD *)v429 + 2);
    }
    v430 = JSC::JSFunction::create((uint64_t)a2, v428, (_DWORD *)a3, v423, v424, v425, v426, v427);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v417, v430, 4, v431, v432, v433, v434);
    if (*(_DWORD *)v417 == 2)
    {
      WTF::StringImpl::~StringImpl(v417, v435, v436, v437, v438, v439, v440, v441);
      WTF::fastFree(v1266, v1267, v1268, v1269, v1270, v1271, v1272, v1273);
    }
    else
    {
      *(_DWORD *)v417 -= 2;
    }
  }
  else
  {
    v1551 = JSC::arrayPrototypeFilterCodeGenerator((JSC::BuiltinExecutables **)a2, v410);
    v1557 = JSC::JSFunction::create((uint64_t)a2, v1551, (_DWORD *)a3, v1552, v1553, v1554, v1555, v1556);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1557, 4, v1558, v1559, v1560, v1561);
  }
  v442 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 584);
  if (v442)
  {
    *(_DWORD *)v442 += 2;
    v443 = JSC::BuiltinExecutables::arrayPrototypeFlatCodeExecutable(*v28);
    v444 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v444 + 2);
    v1744 = v444;
    v1745 = xmmword_1991251A0;
    v453 = JSC::UnlinkedFunctionExecutable::link(v443, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v445, COERCE_DOUBLE(0x1355C000133D5), v446, v447);
    v454 = v1744;
    v1744 = 0;
    if (v454)
    {
      if (*((_DWORD *)v454 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v454 + 8))(v454);
      else
        --*((_DWORD *)v454 + 2);
    }
    v455 = JSC::JSFunction::create((uint64_t)a2, v453, (_DWORD *)a3, v448, v449, v450, v451, v452);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v442, v455, 4, v456, v457, v458, v459);
    if (*(_DWORD *)v442 == 2)
    {
      WTF::StringImpl::~StringImpl(v442, v460, v461, v462, v463, v464, v465, v466);
      WTF::fastFree(v1274, v1275, v1276, v1277, v1278, v1279, v1280, v1281);
    }
    else
    {
      *(_DWORD *)v442 -= 2;
    }
  }
  else
  {
    v1562 = JSC::arrayPrototypeFlatCodeGenerator((JSC::BuiltinExecutables **)a2, v435);
    v1568 = JSC::JSFunction::create((uint64_t)a2, v1562, (_DWORD *)a3, v1563, v1564, v1565, v1566, v1567);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1568, 4, v1569, v1570, v1571, v1572);
  }
  v467 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 608);
  if (v467)
  {
    *(_DWORD *)v467 += 2;
    v468 = JSC::BuiltinExecutables::arrayPrototypeFlatMapCodeExecutable(*v28);
    v469 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v469 + 2);
    v1744 = v469;
    v1745 = xmmword_1991251D0;
    v478 = JSC::UnlinkedFunctionExecutable::link(v468, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v470, COERCE_DOUBLE(0x13B59000139A8), v471, v472);
    v479 = v1744;
    v1744 = 0;
    if (v479)
    {
      if (*((_DWORD *)v479 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v479 + 8))(v479);
      else
        --*((_DWORD *)v479 + 2);
    }
    v480 = JSC::JSFunction::create((uint64_t)a2, v478, (_DWORD *)a3, v473, v474, v475, v476, v477);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v467, v480, 4, v481, v482, v483, v484);
    if (*(_DWORD *)v467 == 2)
    {
      WTF::StringImpl::~StringImpl(v467, v485, v486, v487, v488, v489, v490, v491);
      WTF::fastFree(v1282, v1283, v1284, v1285, v1286, v1287, v1288, v1289);
    }
    else
    {
      *(_DWORD *)v467 -= 2;
    }
  }
  else
  {
    v1573 = JSC::arrayPrototypeFlatMapCodeGenerator((JSC::BuiltinExecutables **)a2, v460);
    v1579 = JSC::JSFunction::create((uint64_t)a2, v1573, (_DWORD *)a3, v1574, v1575, v1576, v1577, v1578);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1579, 4, v1580, v1581, v1582, v1583);
  }
  v492 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 1272);
  if (v492)
  {
    *(_DWORD *)v492 += 2;
    v493 = JSC::BuiltinExecutables::arrayPrototypeReduceCodeExecutable(*v28);
    v494 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v494 + 2);
    v1744 = v494;
    v1745 = xmmword_199125750;
    v503 = JSC::UnlinkedFunctionExecutable::link(v493, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v495, COERCE_DOUBLE(0x219F0000216D3), v496, v497);
    v504 = v1744;
    v1744 = 0;
    if (v504)
    {
      if (*((_DWORD *)v504 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v504 + 8))(v504);
      else
        --*((_DWORD *)v504 + 2);
    }
    v505 = JSC::JSFunction::create((uint64_t)a2, v503, (_DWORD *)a3, v498, v499, v500, v501, v502);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v492, v505, 4, v506, v507, v508, v509);
    if (*(_DWORD *)v492 == 2)
    {
      WTF::StringImpl::~StringImpl(v492, v510, v511, v512, v513, v514, v515, v516);
      WTF::fastFree(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297);
    }
    else
    {
      *(_DWORD *)v492 -= 2;
    }
  }
  else
  {
    v1584 = JSC::arrayPrototypeReduceCodeGenerator((JSC::BuiltinExecutables **)a2, v485);
    v1590 = JSC::JSFunction::create((uint64_t)a2, v1584, (_DWORD *)a3, v1585, v1586, v1587, v1588, v1589);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1590, 4, v1591, v1592, v1593, v1594);
  }
  v517 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 1280);
  if (v517)
  {
    *(_DWORD *)v517 += 2;
    v518 = JSC::BuiltinExecutables::arrayPrototypeReduceRightCodeExecutable(*v28);
    v519 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v519 + 2);
    v1744 = v519;
    v1745 = xmmword_199125770;
    v528 = JSC::UnlinkedFunctionExecutable::link(v518, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v520, COERCE_DOUBLE(0x21F5300021C27), v521, v522);
    v529 = v1744;
    v1744 = 0;
    if (v529)
    {
      if (*((_DWORD *)v529 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v529 + 8))(v529);
      else
        --*((_DWORD *)v529 + 2);
    }
    v530 = JSC::JSFunction::create((uint64_t)a2, v528, (_DWORD *)a3, v523, v524, v525, v526, v527);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v517, v530, 4, v531, v532, v533, v534);
    if (*(_DWORD *)v517 == 2)
    {
      WTF::StringImpl::~StringImpl(v517, v535, v536, v537, v538, v539, v540, v541);
      WTF::fastFree(v1298, v1299, v1300, v1301, v1302, v1303, v1304, v1305);
    }
    else
    {
      *(_DWORD *)v517 -= 2;
    }
  }
  else
  {
    v1595 = JSC::arrayPrototypeReduceRightCodeGenerator((JSC::BuiltinExecutables **)a2, v510);
    v1601 = JSC::JSFunction::create((uint64_t)a2, v1595, (_DWORD *)a3, v1596, v1597, v1598, v1599, v1600);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1601, 4, v1602, v1603, v1604, v1605);
  }
  v542 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 912);
  if (v542)
  {
    *(_DWORD *)v542 += 2;
    v543 = JSC::BuiltinExecutables::arrayPrototypeMapCodeExecutable(*v28);
    v544 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v544 + 2);
    v1744 = v544;
    v1745 = xmmword_199125440;
    v553 = JSC::UnlinkedFunctionExecutable::link(v543, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v545, COERCE_DOUBLE(0x1A1C400019FACLL), v546, v547);
    v554 = v1744;
    v1744 = 0;
    if (v554)
    {
      if (*((_DWORD *)v554 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v554 + 8))(v554);
      else
        --*((_DWORD *)v554 + 2);
    }
    v555 = JSC::JSFunction::create((uint64_t)a2, v553, (_DWORD *)a3, v548, v549, v550, v551, v552);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v542, v555, 4, v556, v557, v558, v559);
    if (*(_DWORD *)v542 == 2)
    {
      WTF::StringImpl::~StringImpl(v542, v560, v561, v562, v563, v564, v565, v566);
      WTF::fastFree(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313);
    }
    else
    {
      *(_DWORD *)v542 -= 2;
    }
  }
  else
  {
    v1606 = JSC::arrayPrototypeMapCodeGenerator((JSC::BuiltinExecutables **)a2, v535);
    v1612 = JSC::JSFunction::create((uint64_t)a2, v1606, (_DWORD *)a3, v1607, v1608, v1609, v1610, v1611);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1612, 4, v1613, v1614, v1615, v1616);
  }
  v567 = *(_QWORD *)v12;
  v568 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 3016);
  if (!v568)
  {
    v1740[0] = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, v1740, 0, (uint64_t)JSC::arrayProtoFuncKeys, 0, 25, 4u);
    goto LABEL_204;
  }
  v569 = *(_DWORD *)v568 + 2;
  *(_DWORD *)v568 = v569;
  v1740[0] = (unint64_t)v568;
  if ((*((_BYTE *)v568 + 16) & 0x20) != 0)
  {
    v570 = *(WTF::StringImpl **)(v567 + 872);
    if (!v570)
      goto LABEL_199;
    v569 = *(_DWORD *)v570;
  }
  else
  {
    v570 = v568;
  }
  *(_DWORD *)v570 = v569 + 2;
LABEL_199:
  v1744 = v570;
  v578 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1744, (uint64_t)JSC::arrayProtoFuncKeys, 0, 25, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v580 = v1744;
  v1744 = 0;
  if (v580)
  {
    if (*(_DWORD *)v580 == 2)
    {
      WTF::StringImpl::~StringImpl(v580, v571, v572, v573, v574, v575, v576, v577);
      WTF::fastFree(v1474, v1475, v1476, v1477, v1478, v1479, v1480, v1481);
    }
    else
    {
      *(_DWORD *)v580 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v568, v578, 4, v575, v576, v577, v579);
  if (*(_DWORD *)v568 == 2)
  {
    WTF::StringImpl::~StringImpl(v568, v581, v582, v583, v584, v585, v586, v587);
    WTF::fastFree(v1314, v1315, v1316, v1317, v1318, v1319, v1320, v1321);
  }
  else
  {
    *(_DWORD *)v568 -= 2;
  }
LABEL_204:
  v588 = *(_QWORD *)v12;
  v589 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 3952);
  if (!v589)
  {
    v1740[0] = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, v1740, 0, (uint64_t)JSC::arrayProtoFuncEntries, 0, 26, 4u);
    goto LABEL_213;
  }
  v590 = *(_DWORD *)v589 + 2;
  *(_DWORD *)v589 = v590;
  v1740[0] = (unint64_t)v589;
  if ((*((_BYTE *)v589 + 16) & 0x20) != 0)
  {
    v591 = *(WTF::StringImpl **)(v588 + 872);
    if (!v591)
      goto LABEL_208;
    v590 = *(_DWORD *)v591;
  }
  else
  {
    v591 = v589;
  }
  *(_DWORD *)v591 = v590 + 2;
LABEL_208:
  v1744 = v591;
  v599 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1744, (uint64_t)JSC::arrayProtoFuncEntries, 0, 26, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v601 = v1744;
  v1744 = 0;
  if (v601)
  {
    if (*(_DWORD *)v601 == 2)
    {
      WTF::StringImpl::~StringImpl(v601, v592, v593, v594, v595, v596, v597, v598);
      WTF::fastFree(v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489);
    }
    else
    {
      *(_DWORD *)v601 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v589, v599, 4, v596, v597, v598, v600);
  if (*(_DWORD *)v589 == 2)
  {
    WTF::StringImpl::~StringImpl(v589, v602, v603, v604, v605, v606, v607, v608);
    WTF::fastFree(v1322, v1323, v1324, v1325, v1326, v1327, v1328, v1329);
  }
  else
  {
    *(_DWORD *)v589 -= 2;
  }
LABEL_213:
  v609 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 544);
  if (v609)
  {
    *(_DWORD *)v609 += 2;
    CodeExecutable = JSC::BuiltinExecutables::arrayPrototypeFindCodeExecutable(*v28);
    v611 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v611 + 2);
    v1744 = v611;
    v1745 = xmmword_199125110;
    v620 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v612, COERCE_DOUBLE(0x1290D00012751), v613, v614);
    v621 = v1744;
    v1744 = 0;
    if (v621)
    {
      if (*((_DWORD *)v621 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v621 + 8))(v621);
      else
        --*((_DWORD *)v621 + 2);
    }
    v622 = JSC::JSFunction::create((uint64_t)a2, v620, (_DWORD *)a3, v615, v616, v617, v618, v619);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v609, v622, 4, v623, v624, v625, v626);
    if (*(_DWORD *)v609 == 2)
    {
      WTF::StringImpl::~StringImpl(v609, v627, v628, v629, v630, v631, v632, v633);
      WTF::fastFree(v1330, v1331, v1332, v1333, v1334, v1335, v1336, v1337);
    }
    else
    {
      *(_DWORD *)v609 -= 2;
    }
  }
  else
  {
    CodeGenerator = JSC::arrayPrototypeFindCodeGenerator((JSC::BuiltinExecutables **)a2, v602);
    v1623 = JSC::JSFunction::create((uint64_t)a2, CodeGenerator, (_DWORD *)a3, v1618, v1619, v1620, v1621, v1622);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1623, 4, v1624, v1625, v1626, v1627);
  }
  v634 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 560);
  if (v634)
  {
    *(_DWORD *)v634 += 2;
    LastCodeExecutable = JSC::BuiltinExecutables::arrayPrototypeFindLastCodeExecutable(*v28);
    v636 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v636 + 2);
    v1744 = v636;
    v1745 = xmmword_199125150;
    v645 = JSC::UnlinkedFunctionExecutable::link(LastCodeExecutable, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v637, COERCE_DOUBLE(0x12F1200012D46), v638, v639);
    v646 = v1744;
    v1744 = 0;
    if (v646)
    {
      if (*((_DWORD *)v646 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v646 + 8))(v646);
      else
        --*((_DWORD *)v646 + 2);
    }
    v647 = JSC::JSFunction::create((uint64_t)a2, v645, (_DWORD *)a3, v640, v641, v642, v643, v644);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v634, v647, 4, v648, v649, v650, v651);
    if (*(_DWORD *)v634 == 2)
    {
      WTF::StringImpl::~StringImpl(v634, v652, v653, v654, v655, v656, v657, v658);
      WTF::fastFree(v1338, v1339, v1340, v1341, v1342, v1343, v1344, v1345);
    }
    else
    {
      *(_DWORD *)v634 -= 2;
    }
  }
  else
  {
    LastCodeGenerator = JSC::arrayPrototypeFindLastCodeGenerator((JSC::BuiltinExecutables **)a2, v627);
    v1634 = JSC::JSFunction::create((uint64_t)a2, LastCodeGenerator, (_DWORD *)a3, v1629, v1630, v1631, v1632, v1633);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1634, 4, v1635, v1636, v1637, v1638);
  }
  v659 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 552);
  if (v659)
  {
    *(_DWORD *)v659 += 2;
    IndexCodeExecutable = JSC::BuiltinExecutables::arrayPrototypeFindIndexCodeExecutable(*v28);
    v661 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v661 + 2);
    v1744 = v661;
    v1745 = xmmword_199125130;
    v670 = JSC::UnlinkedFunctionExecutable::link(IndexCodeExecutable, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v662, COERCE_DOUBLE(0x12C0700012A63), v663, v664);
    v671 = v1744;
    v1744 = 0;
    if (v671)
    {
      if (*((_DWORD *)v671 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v671 + 8))(v671);
      else
        --*((_DWORD *)v671 + 2);
    }
    v672 = JSC::JSFunction::create((uint64_t)a2, v670, (_DWORD *)a3, v665, v666, v667, v668, v669);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v659, v672, 4, v673, v674, v675, v676);
    if (*(_DWORD *)v659 == 2)
    {
      WTF::StringImpl::~StringImpl(v659, v677, v678, v679, v680, v681, v682, v683);
      WTF::fastFree(v1346, v1347, v1348, v1349, v1350, v1351, v1352, v1353);
    }
    else
    {
      *(_DWORD *)v659 -= 2;
    }
  }
  else
  {
    IndexCodeGenerator = JSC::arrayPrototypeFindIndexCodeGenerator((JSC::BuiltinExecutables **)a2, v652);
    v1645 = JSC::JSFunction::create((uint64_t)a2, IndexCodeGenerator, (_DWORD *)a3, v1640, v1641, v1642, v1643, v1644);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1645, 4, v1646, v1647, v1648, v1649);
  }
  v684 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 568);
  if (v684)
  {
    *(_DWORD *)v684 += 2;
    LastIndexCodeExecutable = JSC::BuiltinExecutables::arrayPrototypeFindLastIndexCodeExecutable(*v28);
    v686 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v686 + 2);
    v1744 = v686;
    v1745 = xmmword_199125170;
    v695 = JSC::UnlinkedFunctionExecutable::link(LastIndexCodeExecutable, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v687, COERCE_DOUBLE(0x1322B0001307ALL), v688, v689);
    v696 = v1744;
    v1744 = 0;
    if (v696)
    {
      if (*((_DWORD *)v696 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v696 + 8))(v696);
      else
        --*((_DWORD *)v696 + 2);
    }
    v697 = JSC::JSFunction::create((uint64_t)a2, v695, (_DWORD *)a3, v690, v691, v692, v693, v694);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v684, v697, 4, v698, v699, v700, v701);
    if (*(_DWORD *)v684 == 2)
    {
      WTF::StringImpl::~StringImpl(v684, v702, v703, v704, v705, v706, v707, v708);
      WTF::fastFree(v1354, v1355, v1356, v1357, v1358, v1359, v1360, v1361);
    }
    else
    {
      *(_DWORD *)v684 -= 2;
    }
  }
  else
  {
    LastIndexCodeGenerator = JSC::arrayPrototypeFindLastIndexCodeGenerator((JSC::BuiltinExecutables **)a2, v677);
    v1656 = JSC::JSFunction::create((uint64_t)a2, LastIndexCodeGenerator, (_DWORD *)a3, v1651, v1652, v1653, v1654, v1655);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1656, 4, v1657, v1658, v1659, v1660);
  }
  v709 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 784);
  if (v709)
  {
    *(_DWORD *)v709 += 2;
    v710 = JSC::BuiltinExecutables::arrayPrototypeIncludesCodeExecutable(*v28);
    v711 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v711 + 2);
    v1744 = v711;
    v1745 = xmmword_199125350;
    v720 = JSC::UnlinkedFunctionExecutable::link(v710, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v712, COERCE_DOUBLE(0x18346000180AFLL), v713, v714);
    v721 = v1744;
    v1744 = 0;
    if (v721)
    {
      if (*((_DWORD *)v721 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v721 + 8))(v721);
      else
        --*((_DWORD *)v721 + 2);
    }
    v722 = JSC::JSFunction::create((uint64_t)a2, v720, (_DWORD *)a3, v715, v716, v717, v718, v719);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v709, v722, 4, v723, v724, v725, v726);
    if (*(_DWORD *)v709 == 2)
    {
      WTF::StringImpl::~StringImpl(v709, v727, v728, v729, v730, v731, v732, v733);
      WTF::fastFree(v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1369);
    }
    else
    {
      *(_DWORD *)v709 -= 2;
    }
  }
  else
  {
    v1661 = JSC::arrayPrototypeIncludesCodeGenerator((JSC::BuiltinExecutables **)a2, v702);
    v1667 = JSC::JSFunction::create((uint64_t)a2, v1661, (_DWORD *)a3, v1662, v1663, v1664, v1665, v1666);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1667, 4, v1668, v1669, v1670, v1671);
  }
  v734 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 360);
  if (v734)
  {
    *(_DWORD *)v734 += 2;
    v735 = JSC::BuiltinExecutables::arrayPrototypeCopyWithinCodeExecutable(*v28);
    v736 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v736 + 2);
    v1744 = v736;
    v1745 = xmmword_199124FD0;
    v745 = JSC::UnlinkedFunctionExecutable::link(v735, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v737, COERCE_DOUBLE(0x4EBF00004A0DLL), v738, v739);
    v746 = v1744;
    v1744 = 0;
    if (v746)
    {
      if (*((_DWORD *)v746 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v746 + 8))(v746);
      else
        --*((_DWORD *)v746 + 2);
    }
    v747 = JSC::JSFunction::create((uint64_t)a2, v745, (_DWORD *)a3, v740, v741, v742, v743, v744);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v734, v747, 4, v748, v749, v750, v751);
    if (*(_DWORD *)v734 == 2)
    {
      WTF::StringImpl::~StringImpl(v734, v752, v753, v754, v755, v756, v757, v758);
      WTF::fastFree(v1370, v1371, v1372, v1373, v1374, v1375, v1376, v1377);
    }
    else
    {
      *(_DWORD *)v734 -= 2;
    }
  }
  else
  {
    v1672 = JSC::arrayPrototypeCopyWithinCodeGenerator((JSC::BuiltinExecutables **)a2, v727);
    v1678 = JSC::JSFunction::create((uint64_t)a2, v1672, (_DWORD *)a3, v1673, v1674, v1675, v1676, v1677);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1678, 4, v1679, v1680, v1681, v1682);
  }
  v759 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 248);
  if (v759)
  {
    *(_DWORD *)v759 += 2;
    v760 = JSC::BuiltinExecutables::arrayPrototypeAtCodeExecutable(*v28);
    v761 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v761 + 2);
    v1744 = v761;
    v1745 = xmmword_199124ED0;
    v770 = JSC::UnlinkedFunctionExecutable::link(v760, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v762, COERCE_DOUBLE(0x39AA0000388ALL), v763, v764);
    v771 = v1744;
    v1744 = 0;
    if (v771)
    {
      if (*((_DWORD *)v771 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v771 + 8))(v771);
      else
        --*((_DWORD *)v771 + 2);
    }
    v772 = JSC::JSFunction::create((uint64_t)a2, v770, (_DWORD *)a3, v765, v766, v767, v768, v769);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v759, v772, 4, v773, v774, v775, v776);
    if (*(_DWORD *)v759 == 2)
    {
      WTF::StringImpl::~StringImpl(v759, v777, v778, v779, v780, v781, v782, v783);
      WTF::fastFree(v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385);
    }
    else
    {
      *(_DWORD *)v759 -= 2;
    }
  }
  else
  {
    v1683 = JSC::arrayPrototypeAtCodeGenerator((JSC::BuiltinExecutables **)a2, v752);
    v1689 = JSC::JSFunction::create((uint64_t)a2, v1683, (_DWORD *)a3, v1684, v1685, v1686, v1687, v1688);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1689, 4, v1690, v1691, v1692, v1693);
  }
  v784 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 1600);
  if (v784)
  {
    *(_DWORD *)v784 += 2;
    v785 = JSC::BuiltinExecutables::arrayPrototypeToReversedCodeExecutable(*v28);
    v786 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v786 + 2);
    v1744 = v786;
    v1745 = xmmword_199125A60;
    v795 = JSC::UnlinkedFunctionExecutable::link(v785, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v787, COERCE_DOUBLE(0x27FA600027E4DLL), v788, v789);
    v796 = v1744;
    v1744 = 0;
    if (v796)
    {
      if (*((_DWORD *)v796 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v796 + 8))(v796);
      else
        --*((_DWORD *)v796 + 2);
    }
    v797 = JSC::JSFunction::create((uint64_t)a2, v795, (_DWORD *)a3, v790, v791, v792, v793, v794);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v784, v797, 4, v798, v799, v800, v801);
    if (*(_DWORD *)v784 == 2)
    {
      WTF::StringImpl::~StringImpl(v784, v802, v803, v804, v805, v806, v807, v808);
      WTF::fastFree(v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393);
    }
    else
    {
      *(_DWORD *)v784 -= 2;
    }
  }
  else
  {
    v1694 = JSC::arrayPrototypeToReversedCodeGenerator((JSC::BuiltinExecutables **)a2, v777);
    v1700 = JSC::JSFunction::create((uint64_t)a2, v1694, (_DWORD *)a3, v1695, v1696, v1697, v1698, v1699);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1700, 4, v1701, v1702, v1703, v1704);
  }
  v809 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 1608);
  if (v809)
  {
    *(_DWORD *)v809 += 2;
    v810 = JSC::BuiltinExecutables::arrayPrototypeToSortedCodeExecutable(*v28);
    v811 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v811 + 2);
    v1744 = v811;
    v1745 = xmmword_199125A70;
    v820 = JSC::UnlinkedFunctionExecutable::link(v810, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v812, COERCE_DOUBLE(0x281A800027FA6), v813, v814);
    v821 = v1744;
    v1744 = 0;
    if (v821)
    {
      if (*((_DWORD *)v821 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v821 + 8))(v821);
      else
        --*((_DWORD *)v821 + 2);
    }
    v822 = JSC::JSFunction::create((uint64_t)a2, v820, (_DWORD *)a3, v815, v816, v817, v818, v819);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v809, v822, 4, v823, v824, v825, v826);
    if (*(_DWORD *)v809 == 2)
    {
      WTF::StringImpl::~StringImpl(v809, v827, v828, v829, v830, v831, v832, v833);
      WTF::fastFree(v1394, v1395, v1396, v1397, v1398, v1399, v1400, v1401);
    }
    else
    {
      *(_DWORD *)v809 -= 2;
    }
  }
  else
  {
    v1705 = JSC::arrayPrototypeToSortedCodeGenerator((JSC::BuiltinExecutables **)a2, v802);
    v1711 = JSC::JSFunction::create((uint64_t)a2, v1705, (_DWORD *)a3, v1706, v1707, v1708, v1709, v1710);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1711, 4, v1712, v1713, v1714, v1715);
  }
  v834 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 1616);
  if (v834)
  {
    *(_DWORD *)v834 += 2;
    v835 = JSC::BuiltinExecutables::arrayPrototypeToSplicedCodeExecutable(*v28);
    v836 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v836 + 2);
    v1744 = v836;
    v1745 = xmmword_199125A80;
    v845 = JSC::UnlinkedFunctionExecutable::link(v835, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v837, COERCE_DOUBLE(0x286DC000281A8), v838, v839);
    v846 = v1744;
    v1744 = 0;
    if (v846)
    {
      if (*((_DWORD *)v846 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v846 + 8))(v846);
      else
        --*((_DWORD *)v846 + 2);
    }
    v847 = JSC::JSFunction::create((uint64_t)a2, v845, (_DWORD *)a3, v840, v841, v842, v843, v844);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v834, v847, 4, v848, v849, v850, v851);
    if (*(_DWORD *)v834 == 2)
    {
      WTF::StringImpl::~StringImpl(v834, v852, v853, v854, v855, v856, v857, v858);
      WTF::fastFree(v1402, v1403, v1404, v1405, v1406, v1407, v1408, v1409);
    }
    else
    {
      *(_DWORD *)v834 -= 2;
    }
  }
  else
  {
    v1716 = JSC::arrayPrototypeToSplicedCodeGenerator((JSC::BuiltinExecutables **)a2, v827);
    v1722 = JSC::JSFunction::create((uint64_t)a2, v1716, (_DWORD *)a3, v1717, v1718, v1719, v1720, v1721);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1722, 4, v1723, v1724, v1725, v1726);
  }
  v859 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 1656);
  if (v859)
  {
    *(_DWORD *)v859 += 2;
    v860 = JSC::BuiltinExecutables::arrayPrototypeWithCodeExecutable(*v28);
    v861 = (WTF::StringImpl *)*((_QWORD *)*v28 + 1);
    ++*((_DWORD *)v861 + 2);
    v1744 = v861;
    v1745 = xmmword_199125AC0;
    v870 = JSC::UnlinkedFunctionExecutable::link(v860, (uint64_t)a2, 0, (uint64_t)&v1744, 0, 0, 0, v862, COERCE_DOUBLE(0x2918200028F0ELL), v863, v864);
    v871 = v1744;
    v1744 = 0;
    if (v871)
    {
      if (*((_DWORD *)v871 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v871 + 8))(v871);
      else
        --*((_DWORD *)v871 + 2);
    }
    v872 = JSC::JSFunction::create((uint64_t)a2, v870, (_DWORD *)a3, v865, v866, v867, v868, v869);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v859, v872, 4, v873, v874, v875, v876);
    if (*(_DWORD *)v859 == 2)
    {
      WTF::StringImpl::~StringImpl(v859, v877, v878, (uint64_t)v879, v880, v881, v882, v883);
      WTF::fastFree(v1410, v1411, v1412, v1413, v1414, v1415, v1416, v1417);
    }
    else
    {
      *(_DWORD *)v859 -= 2;
    }
  }
  else
  {
    v1727 = JSC::arrayPrototypeWithCodeGenerator((JSC::BuiltinExecutables **)a2, v852);
    v1733 = JSC::JSFunction::create((uint64_t)a2, v1727, (_DWORD *)a3, v1728, v1729, v1730, v1731, v1732);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1733, 4, v1734, v1735, v1736, v1737);
  }
  v884 = *(_QWORD *)v12;
  JSC::Symbols::entriesPrivateName[0] += 2;
  JSC::JSObject::getDirect(this, a2, *(_QWORD *)(*(_QWORD *)(v884 + 48) + 3952), v879, v880, v881, v882, v883);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::entriesPrivateName, v885, 2, v886, v887, v888, v889);
  if (JSC::Symbols::entriesPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::entriesPrivateName, v890, v891, (uint64_t)v892, v893, v894, v895, v896);
    WTF::fastFree(v1018, v1019, v1020, v1021, v1022, v1023, v1024, v1025);
  }
  else
  {
    JSC::Symbols::entriesPrivateName[0] -= 2;
  }
  v897 = *(_QWORD *)v12;
  JSC::Symbols::forEachPrivateName[0] += 2;
  JSC::JSObject::getDirect(this, a2, *(_QWORD *)(*(_QWORD *)(v897 + 48) + 632), v892, v893, v894, v895, v896);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::forEachPrivateName, v898, 2, v899, v900, v901, v902);
  if (JSC::Symbols::forEachPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::forEachPrivateName, v903, v904, (uint64_t)v905, v906, v907, v908, v909);
    WTF::fastFree(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033);
  }
  else
  {
    JSC::Symbols::forEachPrivateName[0] -= 2;
  }
  v910 = *(_QWORD *)v12;
  JSC::Symbols::includesPrivateName[0] += 2;
  JSC::JSObject::getDirect(this, a2, *(_QWORD *)(*(_QWORD *)(v910 + 48) + 784), v905, v906, v907, v908, v909);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::includesPrivateName, v911, 2, v912, v913, v914, v915);
  if (JSC::Symbols::includesPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::includesPrivateName, v916, v917, (uint64_t)v918, v919, v920, v921, v922);
    WTF::fastFree(v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1041);
  }
  else
  {
    JSC::Symbols::includesPrivateName[0] -= 2;
  }
  v923 = *(_QWORD *)v12;
  JSC::Symbols::indexOfPrivateName[0] += 2;
  JSC::JSObject::getDirect(this, a2, *(_QWORD *)(*(_QWORD *)(v923 + 48) + 4088), v918, v919, v920, v921, v922);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::indexOfPrivateName, v924, 2, v925, v926, v927, v928);
  if (JSC::Symbols::indexOfPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::indexOfPrivateName, v929, v930, (uint64_t)v931, v932, v933, v934, v935);
    WTF::fastFree(v1042, v1043, v1044, v1045, v1046, v1047, v1048, v1049);
  }
  else
  {
    JSC::Symbols::indexOfPrivateName[0] -= 2;
  }
  v936 = *(_QWORD *)v12;
  JSC::Symbols::keysPrivateName[0] += 2;
  JSC::JSObject::getDirect(this, a2, *(_QWORD *)(*(_QWORD *)(v936 + 48) + 3016), v931, v932, v933, v934, v935);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::keysPrivateName, v937, 2, v938, v939, v940, v941);
  if (JSC::Symbols::keysPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::keysPrivateName, v942, v943, (uint64_t)v944, v945, v946, v947, v948);
    WTF::fastFree(v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1057);
  }
  else
  {
    JSC::Symbols::keysPrivateName[0] -= 2;
  }
  v949 = *(_QWORD *)v12;
  JSC::Symbols::mapPrivateName[0] += 2;
  JSC::JSObject::getDirect(this, a2, *(_QWORD *)(*(_QWORD *)(v949 + 48) + 912), v944, v945, v946, v947, v948);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::mapPrivateName, v950, 2, v951, v952, v953, v954);
  if (JSC::Symbols::mapPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::mapPrivateName, v955, v956, (uint64_t)v957, v958, v959, v960, v961);
    WTF::fastFree(v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1065);
  }
  else
  {
    JSC::Symbols::mapPrivateName[0] -= 2;
  }
  v962 = *(_QWORD *)v12;
  JSC::Symbols::popPrivateName[0] += 2;
  JSC::JSObject::getDirect(this, a2, *(_QWORD *)(*(_QWORD *)(v962 + 48) + 4096), v957, v958, v959, v960, v961);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::popPrivateName, v963, 2, v964, v965, v966, v967);
  if (JSC::Symbols::popPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::popPrivateName, v968, v969, v970, v971, v972, v973, v974);
    WTF::fastFree(v1066, v1067, v1068, v1069, v1070, v1071, v1072, v1073);
  }
  else
  {
    JSC::Symbols::popPrivateName[0] -= 2;
  }
  JSC::Symbols::valuesPrivateName[0] += 2;
  v976 = *v20;
  if ((*v20 & 1) != 0)
  {
    v1738 = *(uint64_t (**)(WTF::StringImpl **))(v976 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a3 & 8) != 0)
      v1739 = (WTF::StringImpl **)(a3 - 16);
    else
      v1739 = (WTF::StringImpl **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
    v1744 = *v1739;
    *(_QWORD *)&v1745 = a3;
    *((_QWORD *)&v1745 + 1) = a3 + 528;
    v976 = v1738(&v1744);
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::valuesPrivateName, v976, 2, v972, v973, v974, v975);
  if (JSC::Symbols::valuesPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::valuesPrivateName, v977, (uint64_t)v978, v979, v980, v981, v982, v983);
    WTF::fastFree(v1074, v1075, v1076, v1077, v1078, v1079, v1080, v1081);
  }
  else
  {
    JSC::Symbols::valuesPrivateName[0] -= 2;
  }
  v984 = *(_DWORD *)(a3 + 932);
  if (v984)
    v985 = (JSC::VM *)(16 * (v984 & 0xFFFFFFFE));
  else
    v985 = 0;
  v986 = (JSC::JSObject *)JSC::constructEmptyObject(a2, v985, v978, v979, v980, v981, v982, v983);
  JSC::JSObject::convertToDictionary(v986, a2, v993, v987, v988, v989, v990, v991, v992);
  v998 = 0;
  v999 = *(_QWORD *)(*(_QWORD *)v12 + 48);
  v1744 = (WTF::StringImpl *)(v999 + 248);
  *(_QWORD *)&v1745 = v999 + 360;
  *((_QWORD *)&v1745 + 1) = v999 + 3952;
  v1746 = v999 + 520;
  v1747 = v999 + 544;
  v1748 = v999 + 552;
  v1749 = v999 + 560;
  v1750 = v999 + 568;
  v1751 = v999 + 584;
  v1752 = v999 + 608;
  v1753 = v999 + 784;
  v1754 = v999 + 3016;
  v1755 = v999 + 1600;
  v1756 = v999 + 1608;
  v1757 = v999 + 1616;
  v1758 = v999 + 3024;
  do
  {
    v1000 = *(unint64_t **)((char *)&v1744 + v998);
    if (v1000)
    {
      v1001 = *v1000;
      v1740[0] = 0;
      v1740[1] = (unint64_t)v986;
      v1741 = -1;
      v997.n128_u64[0] = 0x100000001000000;
      v1742 = 0x1000000;
      v1743 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v986, (uint64_t)a2, v1001, 7, 0, (uint64_t)v1740, v995, v996, v997);
    }
    v998 += 8;
  }
  while (v998 != 128);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v12 + 2784), (uint64_t)v986, 6, v994, v995, v996, v997);
}

unint64_t JSC::arrayProtoFuncToLocaleString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int *a4, JSC::JSString *a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t *v18;
  int *v19;
  uint64_t Index;
  int8x16_t v21;
  unint64_t v22;
  unint64_t i;
  uint64_t v24;
  int8x16_t v25;
  JSC::VM *v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t v33;
  int *v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  unint64_t v39;
  int v40;
  _BOOL4 v41;
  JSC::JSRopeString *v42;
  unint64_t v43;
  JSC::JSString *v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int *v49;
  int v50;
  int v51;
  _BOOL4 v52;
  int v53;
  _BOOL4 v54;
  unint64_t OutOfMemoryError;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  JSC::Exception *v62;
  int *v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  JSC::JSObject *v67;
  int8x16_t v68;
  int v69;
  int v70;
  JSC::JSObject *v71;
  JSC *v72;
  int v73;
  uint64_t v75;
  JSC::JSObject *v76;
  double v77;
  double v78;
  double v79;
  int v80;
  int v81;
  int8x16_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  JSC::VMTraps *v90;
  uint64_t v91;
  uint64_t v92;
  JSC *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  JSC::JSObject *v97[2];
  char v98;

  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v10 + 5) - 51 <= 5)
    v10 = 10;
  v11 = *((_QWORD *)this + 7);
  v96 = v10;
  v12 = *((int *)a2 + 8) - 1;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v92 = 10;
  }
  else
  {
    v92 = *((_QWORD *)a2 + 6);
    if (v12 != 1)
    {
      v13 = *((_QWORD *)a2 + 7);
      goto LABEL_7;
    }
  }
  v13 = 10;
LABEL_7:
  v91 = v13;
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    v64 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v96, this, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
    goto LABEL_104;
  }
  if (*(unsigned __int8 *)(v10 + 5) <= 0x16u)
  {
    v64 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v10, (JSC::SymbolObject **)this, (uint64_t)a3, (JSC::Symbol *)a4, (uint64_t)a5, a6, a7, a8);
LABEL_104:
    v10 = v64;
  }
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_10;
  v65 = *(_DWORD *)(v11 + 80);
  if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_10:
    v93 = this;
    v94 = v10;
    v14 = (_QWORD *)*((_QWORD *)this + 7);
    if ((unint64_t)&v89 < v14[1])
    {
      v97[0] = *((JSC::JSObject **)this + 7);
      v22 = JSC::throwStackOverflowError((unint64_t)this, v97, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
    }
    else
    {
      v15 = v14[11322];
      if (!v15)
      {
        v14[11322] = v10;
LABEL_13:
        v95 = 0;
        goto LABEL_14;
      }
      v72 = this;
      if (v15 != v10)
      {
        WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::add(v14 + 11323, &v94, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (uint64_t)v97);
        if (v98)
          goto LABEL_13;
        v72 = v93;
      }
      v22 = *(_QWORD *)(*((_QWORD *)v72 + 7) + 41968);
    }
    v95 = v22;
    if (v22)
      goto LABEL_133;
LABEL_14:
    v16 = *(unsigned __int8 *)(v10 + 5);
    if (v16 == 36)
    {
      if ((*(_BYTE *)(v10 + 4) & 0xE) != 0)
      {
        v17 = *(unsigned int *)(*(_QWORD *)(v10 + 8) - 8);
        goto LABEL_17;
      }
      goto LABEL_162;
    }
    v66 = *((_QWORD *)this + 7);
    if (v16 == 35)
    {
      if ((*(_BYTE *)((16 * *(unsigned int *)v10) | 0x12) & 0x20) != 0)
      {
        v67 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v66 + 41952) + 1768), (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
        v97[0] = v67;
        if (*(_DWORD *)(v66 + 80))
        {
          v81 = *(_DWORD *)(v66 + 80);
          if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v66 + 64), 7u, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
          if (*(_QWORD *)(v66 + 16))
            goto LABEL_162;
          v67 = v97[0];
        }
        if ((unint64_t)v67 >= 0xFFFE000000000000)
          goto LABEL_116;
      }
      else
      {
        v71 = *(JSC::JSObject **)(*(_QWORD *)(v10 + 8) - 16);
        v97[0] = v71;
        if ((unint64_t)v71 >= 0xFFFE000000000000)
        {
          v17 = v71 & ~((int)v71 >> 31);
          goto LABEL_17;
        }
      }
      v77 = JSC::JSValue::toIntegerOrInfinity(v97, this, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, a9);
      v78 = 9.00719925e15;
      if (v77 <= 9.00719925e15)
        v78 = v77;
      if (v77 > 0.0)
        v17 = (unint64_t)v78;
      else
        v17 = 0;
      goto LABEL_17;
    }
    if (v16 != 33)
    {
      if (v16 == 34)
      {
        v17 = JSC::ScopedArguments::length((JSC::ScopedArguments *)v10, this, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
LABEL_17:
        if (!*(_DWORD *)(v11 + 80))
          goto LABEL_194;
        v69 = *(_DWORD *)(v11 + 80);
        if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
        if (!*(_QWORD *)(v11 + 16))
        {
LABEL_194:
          v18 = (unint64_t *)(v11 + 41968);
          if (!v17)
          {
            v22 = *v18;
            goto LABEL_133;
          }
          v19 = *(int **)(v11 + 42568);
          Index = JSC::JSObject::getIndex((JSC::JSObject *)v10, this, 0, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
          if (!*(_DWORD *)(v11 + 80))
            goto LABEL_20;
          v70 = *(_DWORD *)(v11 + 80);
          if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
          if (!*(_QWORD *)(v11 + 16))
          {
LABEL_20:
            if ((Index & 0xFFFFFFFFFFFFFFF7) == 2)
            {
              v22 = *v18;
              goto LABEL_24;
            }
            v22 = JSC::toLocaleString(this, Index, v92, v91, (uint64_t)a5, a6, a7, a8, v21);
            if (!*(_DWORD *)(v11 + 80))
              goto LABEL_24;
            v73 = *(_DWORD *)(v11 + 80);
            if ((v73 & 0x27) != 0 && (v73 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
            if (!*(_QWORD *)(v11 + 16))
            {
LABEL_24:
              if (v17 >= 2)
              {
                v90 = (JSC::VMTraps *)(v11 + 64);
                for (i = 1; v17 != i; ++i)
                {
                  v24 = JSC::JSObject::getIndex((JSC::JSObject *)v10, this, i, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
                  if (*(_DWORD *)(v11 + 80))
                  {
                    v45 = *(_DWORD *)(v11 + 80);
                    if ((v45 & 0x27) != 0 && (v45 & 0x20) == 0)
                      JSC::VMTraps::handleTraps(v90, 7u, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
                    if (*(_QWORD *)(v11 + 16))
                      goto LABEL_132;
                  }
                  if ((v24 & 0xFFFFFFFFFFFFFFF7) == 2)
                  {
                    a4 = (int *)*v18;
                  }
                  else
                  {
                    a4 = (int *)JSC::toLocaleString(this, v24, v92, v91, (uint64_t)a5, a6, a7, a8, v25);
                    if (*(_DWORD *)(v11 + 80))
                    {
                      v47 = *(_DWORD *)(v11 + 80);
                      if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
                      {
                        v63 = a4;
                        JSC::VMTraps::handleTraps(v90, 7u, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
                        a4 = v63;
                      }
                      if (*(_QWORD *)(v11 + 16))
                        goto LABEL_132;
                    }
                  }
                  v26 = (JSC::VM *)*((_QWORD *)this + 7);
                  v27 = *(_QWORD *)(v22 + 8);
                  if ((v27 & 1) != 0)
                    v28 = (int *)(v22 + 16);
                  else
                    v28 = (int *)(v27 + 4);
                  v29 = *v28;
                  v30 = *((_QWORD *)v19 + 1);
                  if ((v30 & 1) != 0)
                    v31 = v19 + 4;
                  else
                    v31 = (int *)(v30 + 4);
                  v32 = *v31;
                  if (v29)
                  {
                    v33 = *((_QWORD *)a4 + 1);
                    if ((v33 & 1) != 0)
                      v34 = a4 + 4;
                    else
                      v34 = (int *)(v33 + 4);
                    v35 = *v34;
                    if (v32)
                    {
                      if (v35)
                      {
                        if (((v35 | v32) & 0x80000000) == 0)
                        {
                          v36 = __OFADD__(v32, v35);
                          v37 = v32 + v35;
                          v38 = v36;
                          if ((v29 & 0x80000000) == 0 && !v38 && !__OFADD__(v29, v37))
                          {
                            v39 = JSC::JSRopeString::create(*((JSC::JSRopeString **)this + 7), v22, (JSC::JSString *)v19, (uint64_t)a4, a5, a6, a7, a8);
                            goto LABEL_50;
                          }
                        }
                      }
                      else
                      {
                        v53 = v32 | v29;
                        v54 = __OFADD__(v29, v32);
                        if ((v53 & 0x80000000) == 0 && !v54)
                        {
                          v42 = (JSC::JSRopeString *)*((_QWORD *)this + 7);
                          v43 = v22;
                          v44 = (JSC::JSString *)v19;
                          goto LABEL_62;
                        }
                      }
                    }
                    else
                    {
                      if (!v35)
                        goto LABEL_51;
                      v40 = v35 | v29;
                      v41 = __OFADD__(v29, v35);
                      if ((v40 & 0x80000000) == 0 && !v41)
                      {
                        v42 = (JSC::JSRopeString *)*((_QWORD *)this + 7);
                        v43 = v22;
                        goto LABEL_61;
                      }
                    }
                  }
                  else
                  {
                    if (!v32)
                    {
                      v22 = (unint64_t)a4;
                      goto LABEL_51;
                    }
                    v48 = *((_QWORD *)a4 + 1);
                    if ((v48 & 1) != 0)
                      v49 = a4 + 4;
                    else
                      v49 = (int *)(v48 + 4);
                    v50 = *v49;
                    v22 = (unint64_t)v19;
                    if (!v50)
                      goto LABEL_51;
                    v51 = v50 | v32;
                    v52 = __OFADD__(v32, v50);
                    if ((v51 & 0x80000000) == 0 && !v52)
                    {
                      v42 = (JSC::JSRopeString *)*((_QWORD *)this + 7);
                      v43 = (unint64_t)v19;
LABEL_61:
                      v44 = (JSC::JSString *)a4;
LABEL_62:
                      v39 = JSC::JSRopeString::create(v42, v43, v44, (JSC::JSString *)a4, (uint64_t)a5, a6, a7, a8);
LABEL_50:
                      v22 = v39;
                      goto LABEL_51;
                    }
                  }
                  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, a2);
                  v62 = (JSC::Exception *)OutOfMemoryError;
                  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
                    || &JSC::Exception::s_info != (char **)(16
                                                          * *(unsigned int *)(16
                                                                            * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                            + 0x4C)))
                  {
                    v62 = (JSC::Exception *)JSC::Exception::create((uint64_t)v26, (JSC::VM *)OutOfMemoryError, 0, v56, v57, v58, v59, v60);
                  }
                  JSC::VM::throwException(v26, this, v62, v61, v56, v57, v58, v59, v60);
                  v22 = 0;
LABEL_51:
                  if (*(_DWORD *)(v11 + 80))
                  {
                    v46 = *(_DWORD *)(v11 + 80);
                    if ((v46 & 0x27) != 0 && (v46 & 0x20) == 0)
                      JSC::VMTraps::handleTraps(v90, 7u, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
                    if (*(_QWORD *)(v11 + 16))
                      goto LABEL_132;
                  }
                }
              }
LABEL_133:
              JSC::StringRecursionChecker::~StringRecursionChecker((JSC::StringRecursionChecker *)&v93, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
              return v22;
            }
          }
        }
LABEL_132:
        v22 = 0;
        goto LABEL_133;
      }
      v67 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v66 + 41952) + 1768), (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      v97[0] = v67;
      if (*(_DWORD *)(v66 + 80))
      {
        v80 = *(_DWORD *)(v66 + 80);
        if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v66 + 64), 7u, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
        if (*(_QWORD *)(v66 + 16))
          goto LABEL_162;
        v67 = v97[0];
      }
      if ((unint64_t)v67 >= 0xFFFE000000000000)
      {
LABEL_116:
        v17 = v67 & ~((int)v67 >> 31);
        goto LABEL_17;
      }
      v79 = JSC::JSValue::toIntegerOrInfinity(v97, this, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, v68);
      if (v79 > 0.0)
      {
        if (v79 > 9.00719925e15)
          v79 = 9.00719925e15;
        v17 = (unint64_t)v79;
        goto LABEL_17;
      }
LABEL_162:
      v17 = 0;
      goto LABEL_17;
    }
    v75 = *(_QWORD *)(v10 + 40);
    if (!v75
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v75 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      LODWORD(v76) = *(_DWORD *)(v10 + 32);
LABEL_140:
      v17 = v76;
      goto LABEL_17;
    }
    v76 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v66 + 41952) + 1768), (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
    v97[0] = v76;
    if (*(_DWORD *)(v66 + 80))
    {
      v88 = *(_DWORD *)(v66 + 80);
      if ((v88 & 0x27) != 0 && (v88 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v66 + 64), 7u, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      if (*(_QWORD *)(v66 + 16))
        goto LABEL_176;
      v76 = v97[0];
    }
    if ((unint64_t)v76 >= 0xFFFE000000000000)
      goto LABEL_140;
    v83 = (unint64_t)v76 - 0x2000000000000;
    if ((unint64_t)v76 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase(v97, this, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, v82);
      v83 = v87;
    }
    v84 = (v83 >> 52) & 0x7FF;
    if ((v84 - 1023) <= 0x53)
    {
      v85 = v83 >> (51 - (v83 >> 52));
      if (v84 > 0x433)
        LODWORD(v85) = v83 << ((v83 >> 52) - 51);
      if (v84 >= 0x41F)
        v86 = v85;
      else
        v86 = (((1 << ((v83 >> 52) + 1)) - 1) & v85) + (1 << ((v83 >> 52) + 1));
      if ((v83 & 0x8000000000000000) == 0)
        LODWORD(v76) = v86;
      else
        LODWORD(v76) = -v86;
      goto LABEL_140;
    }
LABEL_176:
    LODWORD(v76) = 0;
    goto LABEL_140;
  }
  return 0;
}

unint64_t JSC::arrayProtoFuncJoin(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;
  const char *v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned __int8 *v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  JSC *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  __int16 v64;
  unsigned __int8 *v65[2];
  char v66;

  v10 = (JSC *)this;
  v11 = *(_QWORD *)(this + 56);
  v12 = *((_QWORD *)a2 + 5);
  if ((v12 & 0xFFFE000000000002) != 0)
    goto LABEL_54;
  v13 = *(unsigned __int8 *)(v12 + 5);
  if (v13 - 51 < 6)
  {
    v12 = 10;
LABEL_54:
    v61 = v12;
    this = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v61, (JSC::JSGlobalObject *)this, a3, a4, a5, a6, a7, a8);
    goto LABEL_55;
  }
  if (v13 >= 0x17)
  {
    v14 = *(_QWORD **)(this + 56);
    goto LABEL_5;
  }
  this = JSC::JSCell::toObjectSlow(*((JSC::JSCell **)a2 + 5), (JSC::SymbolObject **)this, (uint64_t)a3, (JSC::Symbol *)a4, a5, a6, a7, a8);
LABEL_55:
  v12 = this;
  if (!this)
    return 0;
  v14 = (_QWORD *)*((_QWORD *)v10 + 7);
LABEL_5:
  v61 = (uint64_t)v10;
  v62 = v12;
  if ((unint64_t)&v57 < v14[1])
  {
    v65[0] = *((unsigned __int8 **)v10 + 7);
    this = JSC::throwStackOverflowError((unint64_t)v10, (JSC::VM **)v65, (uint64_t)a3, a4, a5, a6, a7, a8);
    v18 = this;
  }
  else
  {
    v15 = v14[11322];
    if (!v15)
    {
      v14[11322] = v12;
LABEL_8:
      v63 = 0;
      goto LABEL_9;
    }
    v51 = v10;
    if (v15 != v12)
    {
      this = (unint64_t)WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::add(v14 + 11323, &v62, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)v65);
      if (v66)
        goto LABEL_8;
      v51 = (JSC *)v61;
    }
    v18 = *(_QWORD *)(*((_QWORD *)v51 + 7) + 41968);
  }
  v63 = v18;
  if (v18)
    return v18;
LABEL_9:
  v16 = *(unsigned __int8 *)(v12 + 5);
  if (v16 == 36)
  {
    if ((*(_BYTE *)(v12 + 4) & 0xE) != 0)
      v17 = *(_DWORD *)(*(_QWORD *)(v12 + 8) - 8);
    else
      v17 = 0;
    v18 = v17;
    goto LABEL_13;
  }
  v34 = *((_QWORD *)v10 + 7);
  switch(v16)
  {
    case '#':
      if ((*(_BYTE *)((16 * *(unsigned int *)v12) | 0x12) & 0x20) != 0)
      {
        v65[0] = (unsigned __int8 *)JSC::JSObject::get((unsigned int *)v12, (uint64_t)v10, *(_QWORD *)(*(_QWORD *)(v34 + 41952) + 1768), a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v34 + 80))
        {
          this = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v34, v54, (uint64_t)a3, a4, a5, a6, a7, a8);
          if ((this & 1) != 0)
            goto LABEL_118;
        }
      }
      else
      {
        v38 = *(unsigned __int8 **)(*(_QWORD *)(v12 + 8) - 16);
        v65[0] = v38;
        if ((unint64_t)v38 >= 0xFFFE000000000000)
        {
          v18 = v38 & ~((int)v38 >> 31);
          goto LABEL_13;
        }
      }
      this = JSC::JSValue::toLength((JSC::JSObject **)v65, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      v18 = this;
      goto LABEL_13;
    case '!':
      v52 = *(_QWORD *)(v12 + 40);
      if (v52
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v52 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        v65[0] = (unsigned __int8 *)JSC::JSObject::get((unsigned int *)v12, (uint64_t)v10, *(_QWORD *)(*(_QWORD *)(v34 + 41952) + 1768), a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v34 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v34, v55, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          this = 0;
        }
        else
        {
          this = (unint64_t)JSC::JSValue::toUInt32((JSC::JSObject **)v65, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        }
      }
      else
      {
        this = *(unsigned int *)(v12 + 32);
      }
      goto LABEL_101;
    case '"':
      this = (unint64_t)JSC::ScopedArguments::length((JSC::ScopedArguments *)v12, v10, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_101:
      v18 = this;
      goto LABEL_13;
  }
  this = JSC::JSObject::get((unsigned int *)v12, (uint64_t)v10, *(_QWORD *)(*(_QWORD *)(v34 + 41952) + 1768), a4, a5, a6, a7, a8);
  v65[0] = (unsigned __int8 *)this;
  if (*(_DWORD *)(v34 + 80))
  {
    this = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v34, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    if ((this & 1) != 0)
      goto LABEL_118;
    this = (unint64_t)v65[0];
  }
  if (this >= 0xFFFE000000000000)
  {
    v18 = this & ~((int)this >> 31);
    goto LABEL_13;
  }
  *(double *)a9.i64 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)v65, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (*(double *)a9.i64 <= 0.0)
  {
LABEL_118:
    v18 = 0;
    goto LABEL_13;
  }
  if (*(double *)a9.i64 > 9.00719925e15)
    *(double *)a9.i64 = 9.00719925e15;
  v18 = (unint64_t)*(double *)a9.i64;
LABEL_13:
  if (*(_DWORD *)(v11 + 80))
  {
    v35 = *(_DWORD *)(v11 + 80);
    if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      goto LABEL_69;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v65[0] = (unsigned __int8 *)10;
    goto LABEL_43;
  }
  v19 = *((_QWORD *)a2 + 6);
  v65[0] = (unsigned __int8 *)v19;
  if (v19 == 10)
  {
LABEL_43:
    v60 = 44;
    if (!HIDWORD(v18) && (*(_BYTE *)(v12 + 4) & 0xFu) - 10 > 0xFFFFFFF8)
    {
      v64 = 0;
      v33 = JSC::fastJoin(v10, v12, (uint64_t)&v60, 0x100000001, v18, (unint64_t)&v64 + 1, (uint64_t)&v64, a8, a9);
LABEL_46:
      v18 = v33;
      goto LABEL_27;
    }
    v19 = *(_QWORD *)(v11 + 42568);
    if (!*(_DWORD *)(v11 + 80)
      || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
LABEL_107:
      v33 = JSC::slowJoin(v10, (JSC::JSGlobalObject *)v12, (JSC::JSObject *)v19, (JSC::JSString *)v18, a5, a6, a7, a8);
      goto LABEL_46;
    }
LABEL_69:
    v18 = 0;
    goto LABEL_27;
  }
  if ((v19 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v19 + 5) != 2)
  {
    this = (unint64_t)JSC::JSValue::toStringSlowCase(v65, (uint64_t)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    v19 = this;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v36 = *(_DWORD *)(v11 + 80);
    if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      goto LABEL_69;
  }
  if (HIDWORD(v18) || (*(_BYTE *)(v12 + 4) & 0xFu) - 10 <= 0xFFFFFFF8)
    goto LABEL_107;
  v20 = *(int **)(v19 + 8);
  if ((v20 & 1) == 0)
  {
    if (v20)
    {
LABEL_23:
      v21 = (const char *)*((_QWORD *)v20 + 1);
      a4 = v20[1] | ((unint64_t)((v20[4] >> 2) & 1) << 32);
      goto LABEL_24;
    }
    goto LABEL_48;
  }
  if ((v20 & 2) != 0)
  {
    v24 = *(_QWORD *)(v19 + 20) & 0xFFFFFFFFFLL;
    v25 = *(_QWORD *)(v24 + 8);
    if (v25)
    {
      v26 = *(unsigned int *)(v25 + 4);
      v27 = *(_QWORD *)(v19 + 24);
      v28 = v27 >> 16;
      if (v26 > (v27 >> 16))
      {
        v29 = *(unsigned int *)(v25 + 16);
        v21 = *(const char **)(v25 + 8);
        v30 = *(_DWORD *)(v19 + 16);
        if ((int)v26 - (int)v28 <= v30)
        {
          v30 = v26 - v28;
          if (!(_DWORD)v28)
          {
            a4 = v26 & 0xFFFFFFFEFFFFFFFFLL | (((v29 >> 2) & 1) << 32);
            goto LABEL_41;
          }
        }
        v31 = (v27 >> 16);
        a4 = v30;
        v32 = v26 - v28;
        if (((v29 >> 2) & 1) != 0)
        {
          if (v32 >= v30)
          {
            v21 += v31;
            a4 = v30 | 0x100000000;
LABEL_41:
            v19 = *(_QWORD *)(v19 + 20) & 0xFFFFFFFFFLL;
            goto LABEL_24;
          }
        }
        else if (v32 >= v30)
        {
          v21 += 2 * v31;
          goto LABEL_41;
        }
        __break(1u);
LABEL_109:
        v43 = *(unsigned int *)(v24 - 4);
        goto LABEL_82;
      }
    }
    a4 = 0x100000000;
    v21 = "";
    goto LABEL_41;
  }
  v20 = *JSC::JSRopeString::resolveRope(v19, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (v20)
    goto LABEL_23;
LABEL_48:
  v21 = 0;
  a4 = 0x100000000;
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_25;
LABEL_24:
  v37 = *(_DWORD *)(v11 + 80);
  if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
  {
    v58 = v21;
    v56 = a4;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v21, a4, a5, a6, a7, a8);
    a4 = v56;
    v21 = v58;
  }
  if (*(_QWORD *)(v11 + 16))
  {
    v18 = 0;
  }
  else
  {
LABEL_25:
    v64 = 0;
    v18 = JSC::fastJoin(v10, v12, (uint64_t)v21, a4, v18, (unint64_t)&v64 + 1, (uint64_t)&v64, a8, a9);
  }
  v59 = v19;
LABEL_27:
  if (v63)
    return v18;
  v22 = (_QWORD *)(*(_QWORD *)(v61 + 56) + 90576);
  if (*v22 == v62)
  {
    *v22 = 0;
    return v18;
  }
  this = *(_QWORD *)(v61 + 56) + 90584;
  v24 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return v18;
  v39 = *(_DWORD *)(v24 - 8);
  v40 = (~(v62 << 32) + v62) ^ ((unint64_t)(~(v62 << 32) + v62) >> 22);
  v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
  v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
  v43 = v39 & ((v42 >> 31) ^ v42);
  v44 = *(_QWORD *)(v24 + 8 * v43);
  if (v44 != v62)
  {
    v53 = 1;
    while (v44)
    {
      v43 = ((_DWORD)v43 + v53) & v39;
      v44 = *(_QWORD *)(v24 + 8 * v43);
      ++v53;
      if (v44 == v62)
        goto LABEL_82;
    }
    goto LABEL_109;
  }
LABEL_82:
  if (v43 != *(_DWORD *)(v24 - 4))
  {
    *(_QWORD *)(v24 + 8 * v43) = -1;
    ++*(_DWORD *)(*(_QWORD *)this - 16);
    v45 = *(_QWORD *)this;
    v46 = *(_QWORD *)this ? *(_DWORD *)(v45 - 12) - 1 : -1;
    *(_DWORD *)(v45 - 12) = v46;
    v47 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v48 = 6 * *(_DWORD *)(v47 - 12);
      v49 = *(_DWORD *)(v47 - 4);
      if (v48 < v49 && v49 >= 9)
        WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::rehash((uint64_t *)this, v49 >> 1, 0, a4, a5, a6, a7, a8);
    }
  }
  return v18;
}

uint64_t JSC::arrayProtoFuncPop(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const WTF::String *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  unsigned int v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  JSC::VM *v68;
  WTF::StringImpl *v69;
  unint64_t v70;
  int v71;
  int v72;
  uint64_t v73;

  v10 = *((_QWORD *)this + 7);
  v68 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0)
  {
    v67 = *((_QWORD *)a2 + 5);
  }
  else
  {
    v12 = *(unsigned __int8 *)(v11 + 5);
    if ((v12 - 51) <= 5)
    {
      v67 = 10;
      goto LABEL_25;
    }
    v67 = *((_QWORD *)a2 + 5);
    if (v12 == 36)
      return JSC::JSArray::pop((JSC::JSArray *)v11, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  }
  if ((v11 & 0xFFFE000000000002) != 0)
  {
LABEL_25:
    v35 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v67, this, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_26;
  }
  v14 = *(unsigned __int8 *)(v11 + 5);
  if (v14 > 0x16)
  {
    v15 = v10;
    goto LABEL_9;
  }
  v35 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v11, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_26:
  v11 = v35;
  if (!v35)
    return 0;
  v15 = *((_QWORD *)this + 7);
  v14 = *(unsigned __int8 *)(v35 + 5);
LABEL_9:
  if (v14 != 36)
  {
    if (v14 != 35)
    {
      if (v14 == 33)
      {
        v57 = JSC::DirectArguments::length((JSC::DirectArguments *)v11, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      else
      {
        if (v14 != 34)
        {
          v69 = (WTF::StringImpl *)JSC::JSObject::get((unsigned int *)v11, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v15 + 41952) + 1768), (uint64_t)a4, a5, a6, a7, a8);
          if (*(_DWORD *)(v15 + 80)
            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, v36, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
          {
            goto LABEL_58;
          }
          v37 = JSC::JSValue::toLength(&v69, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
LABEL_52:
          v16 = v37;
          goto LABEL_12;
        }
        v57 = JSC::ScopedArguments::length((JSC::ScopedArguments *)v11, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      v16 = v57;
      goto LABEL_12;
    }
    v37 = JSC::ClonedArguments::length((JSC::ClonedArguments *)v11, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
    goto LABEL_52;
  }
  if ((*(_BYTE *)(v11 + 4) & 0xE) == 0)
  {
LABEL_58:
    v16 = 0;
    goto LABEL_12;
  }
  v16 = *(unsigned int *)(*(_QWORD *)(v11 + 8) - 8);
LABEL_12:
  if (!*(_DWORD *)(v10 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    if (!v16)
    {
      if (*(_BYTE *)(v11 + 5) == 36)
      {
        JSC::JSArray::setLength((JSC::JSArray *)v11, (JSC::VM **)this, 0, 1, a5, a6, a7, a8, a9);
      }
      else
      {
        v69 = 0;
        v70 = v11;
        v71 = -1;
        v72 = 16777217;
        v73 = 0;
        (*(void (**)(unint64_t, JSC *, _QWORD, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) + 0x48))(v11, this, *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 1768), 0xFFFE000000000000, &v69);
      }
      return 10;
    }
    v17 = v16 - 1;
    v25 = JSC::JSObject::get((JSC::JSObject *)v11, (uint64_t ***)this, (const WTF::StringImpl *)(v16 - 1), (uint64_t)a4, a5, a6, a7, a8);
    if (!*(_DWORD *)(v10 + 80)
      || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v18, v19, v20, v21, v22, v23, v24))
    {
      v26 = JSC::JSObject::deleteProperty((JSC::JSObject *)v11, this, (const WTF::StringImpl *)(v16 - 1), v20, v21, v22, v23, v24);
      if (!*(_DWORD *)(v10 + 80)
        || (v66 = v26,
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v27, v28, v29, v30, v31, v32, v33), v26 = v66, !hasExceptionsAfterHandlingTraps))
      {
        if ((v26 & 1) != 0)
        {
          if (*(_BYTE *)(v11 + 5) == 36)
          {
            if (HIDWORD(v17))
            {
              v41 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v41 = 0x1400000002;
              *(_QWORD *)(v41 + 8) = "Invalid array length";
              *(_DWORD *)(v41 + 16) = 4;
              v69 = (WTF::StringImpl *)v41;
              v43 = JSC::createRangeError((unint64_t)this, &v69, v42);
              JSC::VM::throwException((JSC::VM *)v10, this, v43, v44, v45, v46, v47, v48);
              v56 = v69;
              v69 = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                {
                  WTF::StringImpl::~StringImpl(v56, v49, v50, v51, v52, v53, v54, v55);
                  WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
                }
                else
                {
                  *(_DWORD *)v56 -= 2;
                }
              }
            }
            else
            {
              JSC::JSArray::setLength((JSC::JSArray *)v11, (JSC::VM **)this, v16 - 1, 1, v30, v31, v32, v33, v34);
            }
          }
          else
          {
            v69 = 0;
            v70 = v11;
            v71 = -1;
            v72 = 16777217;
            v73 = 0;
            v39 = v17 | 0xFFFE000000000000;
            if ((v17 & 0x80000000) != 0)
              v39 = COERCE__INT64((double)v17) + 0x2000000000000;
            if (v16 >= 0x100000001)
              v40 = COERCE__INT64((double)v17) + 0x2000000000000;
            else
              v40 = v39;
            (*(void (**)(unint64_t, JSC *, _QWORD, uint64_t, WTF::StringImpl **))(16
                                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                                                                 + 0x48))(v11, this, *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 1768), v40, &v69);
          }
          return v25;
        }
        JSC::throwTypeError((unint64_t)this, &v68, (uint64_t)"Unable to delete property.", 27);
      }
    }
  }
  return 0;
}

uint64_t JSC::arrayProtoFuncPush(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::JSGlobalObject *v9;
  JSC::VM **v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  _BYTE *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  JSC *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  JSC::VM *v35;
  uint64_t v36;
  JSC::VM **v37;
  unint64_t v38;
  unint64_t v39;
  WTF::StringImpl *v40;
  JSC::Butterfly *v41;
  char v42;
  unsigned int v43;
  unsigned int v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  JSC::VM *v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t SlowCase;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  void *v71;
  size_t v72;
  JSC::VM **v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  JSC::JSGlobalObject *v77;
  void *v78;
  size_t v79;
  JSC::VM **v80;
  char v81;
  _OWORD *i;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  unint64_t NotAnObjectError;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  JSC::Exception *v98;
  JSC::VM **v100;
  char *v101;
  double v102;
  void (*v103)(unint64_t, JSC::VM **, WTF::StringImpl *, unint64_t, WTF::StringImpl **);
  WTF::StringImpl *v104;
  int v105;
  JSC::VM **v106;
  JSC::VM **v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  JSC::JSGlobalObject *v112;
  WTF::StringImpl *v113;
  int v114;
  void (*v115)(unint64_t, JSC::VM **, uint64_t, uint64_t, WTF::StringImpl **);
  uint64_t v116;
  unint64_t v117;
  JSC::VM **v118;
  uint64_t v119;
  JSC::VM **v120;
  unint64_t v121;
  JSC::VM **v122;
  JSC::Heap **v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  JSC::Exception *v131;
  WTF::AtomStringImpl *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  JSC::VM **v141;
  uint64_t v142;
  unint64_t v143;
  JSC::Heap **v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  double v151;
  JSC::Exception *v152;
  WTF::AtomStringImpl *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  JSC::VM **v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  JSC::VM **v170;
  unint64_t v171;
  JSC::JSGlobalObject *v172;
  uint64_t v173;
  const WTF::String *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  unint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  JSC::VM **v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __n128 v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  JSC::JSGlobalObject *v205;
  uint64_t v206;
  uint64_t v207;
  JSC::VM **v208;
  JSC::VM **v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  __n128 v217;
  JSC::VM **v218;
  uint64_t (*v219)(WTF::StringImpl **);
  WTF::StringImpl **v220;
  uint64_t v221;
  double v222;
  unsigned int v223;
  uint64_t v224;
  unint64_t v226;
  JSC::VM *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unsigned __int8 *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  JSC::VM **v246;
  JSC::VM **v247;
  unsigned int v248;
  JSC::JSGlobalObject *v249;
  JSC::Butterfly *v250;
  uint64_t (*v251)(WTF::StringImpl **);
  WTF::StringImpl **v252;
  JSC::VM **v253;
  JSC::VM **v254;
  uint64_t v255;
  JSC::VM **v256;
  JSC::VM **v257;
  JSC::VM **v258;
  JSC::VM **v259;
  unint64_t v260;
  JSC::VM *v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  JSC::VM *v266;
  WTF::StringImpl *v267;
  JSC::VM **v268;
  JSC::VM **v269;
  uint64_t v270;
  WTF::StringImpl *v271;

  v9 = a2;
  v10 = (JSC::VM **)this;
  v11 = *((_QWORD *)this + 7);
  v266 = (JSC::VM *)v11;
  v12 = *((_QWORD *)a2 + 5);
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    if (v12 >> 49)
    {
      v24 = this;
      v25 = JSC::constructNumber((uint64_t)this, *((JSC::VM **)a2 + 5), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_23;
    }
    if ((v12 & 0xFFFFFFFFFFFFFFFELL) == 6)
    {
      v24 = this;
      v25 = JSC::constructBooleanFromImmediateBoolean((uint64_t)this, *((_QWORD *)a2 + 5), a3, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_23;
    }
LABEL_156:
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)this, v12);
    v98 = (JSC::Exception *)NotAnObjectError;
    if ((NotAnObjectError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)NotAnObjectError & 0xFFFFFFFE) + 0x4C)))
    {
      v98 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)NotAnObjectError, 0, v92, v93, v94, v95, v96);
    }
    JSC::VM::throwException((JSC::VM *)v11, this, v98, v97, v92, v93, v94, v95, v96);
    return 0;
  }
  v14 = (_BYTE *)(v12 + 5);
  v13 = *(unsigned __int8 *)(v12 + 5);
  if (v13 - 51 < 6)
  {
    v12 = 10;
    goto LABEL_156;
  }
  if (v13 == 36)
  {
    if (*((_DWORD *)a2 + 8) == 2)
    {
      v15 = *((_QWORD *)a2 + 6);
      v16 = *(_BYTE *)(v12 + 4);
      if ((v16 & 0x10) != 0)
      {
        JSC::JSObject::convertFromCopyOnWrite(*((JSC::JSObject **)a2 + 5), (JSC::VM *)v11, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
        v10 = (JSC::VM **)this;
        v16 = *(_BYTE *)(v12 + 4);
      }
      v17 = *(_QWORD *)(v12 + 8);
      switch(v16 & 0x1F)
      {
        case 1:
          v208 = v10;
          JSC::JSObject::createInitialUndecided((JSC::JSObject *)v12, (JSC::VM *)v11, 0, a9);
          v10 = v208;
          goto LABEL_259;
        case 3:
LABEL_259:
          v190 = v10;
          JSC::JSObject::convertUndecidedForValue(v12, (JSC::VM *)v11, v15, (uint64_t)a4, a5, a6, a7, a8, a9.n128_f64[0]);
          goto LABEL_260;
        case 5:
          if (v15 <= 0xFFFDFFFFFFFFFFFFLL)
          {
            v190 = v10;
            JSC::JSObject::convertInt32ForValue((JSC::JSObject *)v12, (JSC::VM *)v11, v15, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_260;
          }
          v19 = *(unsigned int *)(v17 - 8);
          if (v19 < *(_DWORD *)(v17 - 4))
          {
            *(_QWORD *)(v17 + 8 * v19) = v15;
            v20 = v19 + 1;
            goto LABEL_16;
          }
          if ((_DWORD)v19 != -1)
          {
            JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)4>((JSC::JSObject *)v12, (unint64_t)v10, v19, v15, a5, a6, a7, a8, (int32x4_t)a9);
            goto LABEL_17;
          }
          goto LABEL_233;
        case 7:
          if (v15 >> 49)
          {
            a9.n128_f64[0] = (double)(int)v15;
            if (v15 <= 0xFFFDFFFFFFFFFFFFLL)
              *(_QWORD *)&v45 = v15 - 0x2000000000000;
            else
              v45 = (double)(int)v15;
            v47 = *(unsigned int *)(v17 - 8);
            v46 = *(unsigned int *)(v17 - 4);
            if (v47 < v46)
            {
              *(double *)(v17 + 8 * v47) = v45;
              v20 = v47 + 1;
LABEL_16:
              *(_DWORD *)(v17 - 8) = v20;
            }
            else if ((_DWORD)v47 == -1)
            {
              v141 = v10;
              (*(void (**)(unint64_t, JSC::VM **, uint64_t, unint64_t, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C) + 0x50))(v12, v10, 0xFFFFFFFFLL, v15, 1);
              if (!*(_QWORD *)(v11 + 16))
              {
                v142 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_QWORD *)v142 = 0x2800000002;
                *(_QWORD *)(v142 + 8) = "Length exceeded the maximum array length";
                *(_DWORD *)(v142 + 16) = 4;
                v271 = (WTF::StringImpl *)v142;
                v143 = (unint64_t)v141[16];
                v144 = (JSC::Heap **)v141[7];
                if ((v143 & 1) != 0)
                {
                  v251 = *(uint64_t (**)(WTF::StringImpl **))(v143 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((v141 & 8) != 0)
                    v252 = v141 - 2;
                  else
                    v252 = (WTF::StringImpl **)((unint64_t)v141 & 0xFFFFFFFFFFFFC000 | 8);
                  v267 = *v252;
                  v268 = v141;
                  v269 = v141 + 16;
                  v143 = v251(&v267);
                }
                v145 = JSC::ErrorInstance::create(v144, v143, &v271, 0, 0, 0, 2, 1);
                v152 = (JSC::Exception *)v145;
                if ((v145 & 0xFFFE000000000002) != 0
                  || &JSC::Exception::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)v145 & 0xFFFFFFFE) + 0x4C)))
                {
                  v152 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v145, 0, v146, v147, v148, v149, v150);
                }
                JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)v141, v152, v151, v146, v147, v148, v149, v150);
                v160 = v271;
                v271 = 0;
                if (v160)
                {
LABEL_225:
                  if (*(_DWORD *)v160 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v160, v153, v154, v155, v156, v157, v158, v159);
                    WTF::fastFree(v197, v198, v199, v200, v201, v202, v203, v204);
                  }
                  else
                  {
                    *(_DWORD *)v160 -= 2;
                  }
                }
              }
            }
            else
            {
              v48 = v10[7];
              v271 = v48;
              if ((v16 & 0x10) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19889B5E4);
              }
              if (!(v47 >> 28))
              {
                if (v47 >> 5 < 0xC35)
                  goto LABEL_66;
                v223 = 0;
                v224 = v47 - 1;
                do
                {
                  a9.n128_u64[0] = *(_QWORD *)(v17 + 8 * v224);
                  ++v223;
                }
                while ((unint64_t)v224--);
                if (v223 >= v47 >> 3)
                {
LABEL_66:
                  if (v47 < 0x3E8 || v46 >= v47)
                  {
                    v49 = *(unsigned __int16 *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x18);
                    if (v49 == 65534)
                      goto LABEL_71;
                    if (v49 == 0xFFFF)
                      v49 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x40) + 84);
                    if (v49 < 64)
                    {
LABEL_71:
                      v50 = 0;
                    }
                    else if ((v49 - 63) >= 5)
                    {
                      v86 = (v49 - 64) | ((v49 - 64) >> 1) | (((v49 - 64) | ((v49 - 64) >> 1)) >> 2);
                      v87 = v86 | (v86 >> 4) | ((v86 | (v86 >> 4)) >> 8);
                      v50 = (v87 | HIWORD(v87)) + 1;
                    }
                    else
                    {
                      v50 = 4;
                    }
                    v267 = v48;
                    LOBYTE(v268) = 0;
                    v51 = 8 * v50 + 8;
                    v52 = v46 + v50;
                    v53 = 8 * v52;
                    v54 = 8 * v52 + 8;
                    if (v52 > 9)
                    {
                      if (v52 > 0x3EB)
                        v55 = 8 * v52 + 8;
                      else
                        v55 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                                              + (((unint64_t)(v53 + 23) >> 2) & 0x7FFFFFFFCLL));
                    }
                    else
                    {
                      v55 = (v53 + 23) & 0x1FFFFFFFF0;
                    }
                    v56 = v47 + 1;
                    v57 = (unint64_t)(v55 - v51) >> 3;
                    if (v47 < v57)
                    {
                      v70 = 0;
                      goto LABEL_93;
                    }
                    v58 = v50;
                    v59 = 2 * v56;
                    if ((2 * v56) >= 0x10000000)
                      v59 = 0x10000000;
                    if (v59 <= 3)
                      v59 = 3;
                    v60 = v51 + 8 * v59;
                    if (v60 > 0x50)
                    {
                      if (v60 <= 0x1F60)
                        v60 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                                              + (((v60 + 15) >> 2) & 0xFFFFFFFFCLL));
                    }
                    else
                    {
                      v60 = (v60 + 15) & 0x3FFFFFFFF0;
                    }
                    v61 = v60 - v51;
                    v57 = v61 >> 3;
                    v62 = v17 - 8 - 8 * v58;
                    v63 = (v61 & 0x7FFFFFFF8) + v51;
                    v64 = (uint64_t)v48 + 6648;
                    if ((_DWORD)v58 || *((_BYTE *)v48 + 755) || (v62 & 8) == 0)
                    {
                      if (v63 <= 0x1F60
                        && (v65 = *(_QWORD *)((char *)v48 + (((v63 + 15) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
                      {
                        v66 = *(unsigned int *)(v65 + 60);
                        SlowCase = *(_QWORD *)(v65 + 24);
                        if (SlowCase >= *(_QWORD *)(v65 + 32))
                        {
                          v259 = v10;
                          SlowCase = *(_QWORD *)(v65 + 40);
                          if ((SlowCase & 1) == 0)
                          {
                            v171 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v65 + 48);
                            *(_QWORD *)(v65 + 32) = SlowCase + HIDWORD(v171);
                            *(_QWORD *)(v65 + 40) = SlowCase + (int)v171;
                            *(_QWORD *)(v65 + 24) = SlowCase + v66;
                            v56 = v47 + 1;
                            v54 = 8 * v52 + 8;
                            goto LABEL_89;
                          }
                          JSC::sanitizeStackForVM(v48, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                          SlowCase = JSC::LocalAllocator::allocateSlowCase(v65, (uint64_t)v48 + 192, v66, (uint64_t)&v267, 1, v243, v244, v245);
                          v10 = v259;
                          v56 = v47 + 1;
                          v54 = 8 * v52 + 8;
                        }
                        else
                        {
                          *(_QWORD *)(v65 + 24) = SlowCase + v66;
                          v56 = v47 + 1;
                        }
                      }
                      else
                      {
                        v106 = v10;
                        SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v64, v48, v63, (uint64_t)&v267, a5, a6, a7, a8);
                        v54 = 8 * v52 + 8;
                        v10 = v106;
                      }
                      if (SlowCase)
                      {
LABEL_89:
                        if (v52 > 0x1D)
                        {
                          for (i = (_OWORD *)SlowCase; i != (_OWORD *)((v54 & 0x1FFFFFFFE0) + SlowCase); i += 2)
                          {
                            v83 = *(_OWORD *)v62;
                            v84 = *(_OWORD *)(v62 + 16);
                            v62 += 32;
                            *i = v83;
                            i[1] = v84;
                          }
                          while (i != (_OWORD *)(v54 + SlowCase))
                          {
                            v85 = *(_QWORD *)v62;
                            v62 += 8;
                            *(_QWORD *)i = v85;
                            i = (_OWORD *)((char *)i + 8);
                          }
                        }
                        else
                        {
                          v68 = 0;
                          v69 = 1;
                          do
                          {
                            *(_QWORD *)(SlowCase + 8 * v68) = *(_QWORD *)(v62 + 8 * v68);
                            v68 = v69++;
                          }
                          while (v54 >> 3 > v68);
                        }
                        v70 = SlowCase + 8 * v58 + 8;
                        v17 = v70;
LABEL_93:
                        if ((*(_BYTE *)(v12 + 4) & 0xE) == 6)
                        {
                          if (v46 >= v57)
                          {
LABEL_97:
                            if (v70)
                            {
                              if (v57 >= 0x10000001)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x19889B664);
                              }
                              *(_DWORD *)(v17 - 4) = v57;
                              __dmb(0xAu);
                              *(_QWORD *)(v12 + 8) = v70;
                              if (*((_DWORD *)v48 + 190) >= *(unsigned __int8 *)(v12 + 7))
                              {
                                v170 = v10;
                                JSC::Heap::writeBarrierSlowPath((uint64_t)v48 + 192, v12);
                                v10 = v170;
                              }
                            }
                            else
                            {
                              __dmb(0xAu);
                              if (v57 >= 0x10000001)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x19889B7E0);
                              }
                              *(_DWORD *)(v17 - 4) = v57;
                            }
                            v74 = 1;
                            goto LABEL_102;
                          }
                          v71 = (void *)(v17 + 8 * v46);
                          v72 = 8 * (v57 + ~(_DWORD)v46) + 8;
                          v73 = v10;
                          memset_pattern16(v71, &memset_pattern_99, v72);
                        }
                        else
                        {
                          if (v46 >= v57)
                            goto LABEL_97;
                          v78 = (void *)(v17 + 8 * v46);
                          v79 = 8 * (v57 + ~(_DWORD)v46) + 8;
                          v73 = v10;
                          bzero(v78, v79);
                        }
                        v10 = v73;
                        goto LABEL_97;
                      }
                      v74 = 0;
                    }
                    else
                    {
                      v100 = v10;
                      v101 = JSC::CompleteSubspace::reallocatePreciseAllocationNonVirtual(v64, v48, v62, v63, (uint64_t)&v267, 1, a7, a8);
                      if (v101)
                      {
                        v70 = (uint64_t)(v101 + 8);
                        v17 = (uint64_t)(v101 + 8);
                        v10 = v100;
                        v56 = v47 + 1;
                        goto LABEL_93;
                      }
                      v74 = 0;
                      v10 = v100;
                      v56 = v47 + 1;
                    }
LABEL_102:
                    if ((_BYTE)v268)
                    {
                      v161 = v10;
                      JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v267 + 192, 0);
                      v10 = v161;
                    }
                    if (v74)
                    {
                      v75 = *(_QWORD *)(v12 + 8);
                      if (*(_DWORD *)(v75 - 8) <= v47)
                      {
                        *(_DWORD *)(v75 - 8) = v56;
                        v75 = *(_QWORD *)(v12 + 8);
                      }
                      if (*(_DWORD *)(v75 - 4) <= v47)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19889B620);
                      }
                      *(double *)(v75 + 8 * v47) = v45;
                    }
                    else
                    {
                      JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)v10, (JSC::JSGlobalObject *)&v271);
                    }
                    goto LABEL_17;
                  }
                }
              }
              v226 = (unint64_t)v10;
              JSC::JSObject::ensureArrayStorageSlow((JSC::JSObject *)v12, v48, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
              v234 = JSC::SparseArrayValueMap::create(v48, v227, v228, v229, v230, v231, v232, v233);
              v235 = (unsigned __int8 *)v234;
              **(_QWORD **)(v12 + 8) = v234;
              if (v12 && v234 && *((_DWORD *)v48 + 190) >= *(unsigned __int8 *)(v12 + 7))
                JSC::Heap::writeBarrierSlowPath((uint64_t)v48 + 192, v12);
              JSC::SparseArrayValueMap::putEntry(v235, v226, (unsigned int *)v12, v47, v15, 0);
              if (!*((_DWORD *)v48 + 20)
                || !JSC::VM::hasExceptionsAfterHandlingTraps(v48, v236, v237, v238, v239, v240, v241, v242))
              {
                *(_DWORD *)(*(_QWORD *)(v12 + 8) - 8) = v47 + 1;
              }
            }
          }
          else
          {
            v190 = v10;
            JSC::JSObject::convertDoubleToContiguous((JSC::JSObject *)v12, (JSC::VM *)v11, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9.n128_f64[0]);
LABEL_260:
            JSC::JSArray::push(v12, v190, v15, v191, v192, v193, v194, v195, v196);
          }
LABEL_17:
          if ((*(_BYTE *)(v12 + 4) & 0xE) == 0)
          {
            v21 = 0;
            return v21 | 0xFFFE000000000000;
          }
          v21 = *(_DWORD *)(*(_QWORD *)(v12 + 8) - 8);
          if ((v21 & 0x80000000) == 0)
            return v21 | 0xFFFE000000000000;
          v102 = (double)v21;
          break;
        case 9:
          v18 = *(unsigned int *)(v17 - 8);
          if (v18 < *(_DWORD *)(v17 - 4))
          {
            *(_QWORD *)(v17 + 8 * v18) = v15;
            *(_DWORD *)(v17 - 8) = v18 + 1;
            if (v15
              && (v15 & 0xFFFE000000000002) == 0
              && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v12 + 7))
            {
              JSC::Heap::writeBarrierSlowPath(v11 + 192, v12);
            }
            goto LABEL_17;
          }
          if ((_DWORD)v18 != -1)
          {
            JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)8>((JSC::JSObject *)v12, (JSC::VM *)v10, v18, v15, a5, a6, a7, a8, a9);
            goto LABEL_17;
          }
LABEL_233:
          v172 = (JSC::JSGlobalObject *)v10;
          (*(void (**)(unint64_t, JSC::VM **))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0x50))(v12, v10);
          goto LABEL_234;
        case 0xB:
          goto LABEL_275;
        case 0xD:
          v209 = v10;
          if ((v16 & 0xE) != 0)
            v210 = *(unsigned int *)(v17 - 8);
          else
            v210 = 0;
          LOBYTE(v267) = 0;
          v216 = JSC::JSObject::attemptToInterceptPutByIndexOnHole((const WTF::StringImpl *)v12, (unint64_t)v10, v210, v15, 1, &v267, a7, a8);
          if (*(_DWORD *)(v11 + 80)
            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v211, v212, v213, v214, v215, a7, a8))
          {
            goto LABEL_17;
          }
          if (v216)
          {
            if ((_DWORD)v210 != -1)
              JSC::JSArray::setLength((JSC::JSArray *)v12, v209, (v210 + 1), 1, v214, v215, a7, a8, v217);
            goto LABEL_17;
          }
          v10 = v209;
LABEL_275:
          v221 = *(unsigned int *)(v17 - 8);
          if (v221 < *(_DWORD *)(v17 - 4))
          {
            *(_QWORD *)(v17 + 8 * v221 + 16) = v15;
            if (v15
              && (v15 & 0xFFFE000000000002) == 0
              && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v12 + 7))
            {
              JSC::Heap::writeBarrierSlowPath(v11 + 192, v12);
            }
            *(_DWORD *)(v17 - 8) = v221 + 1;
            ++*(_DWORD *)(v17 + 12);
            goto LABEL_17;
          }
          v172 = (JSC::JSGlobalObject *)v10;
          if ((_DWORD)v221 != -1)
          {
            JSC::JSObject::putByIndexBeyondVectorLengthWithArrayStorage((unsigned int *)v12, (JSC::VM *)v10, *(_DWORD *)(v17 - 8), v15, 1, v17, a7, a8);
            goto LABEL_17;
          }
          (*(void (**)(unint64_t, JSC::VM **))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0x50))(v12, v10);
LABEL_234:
          if (*(_QWORD *)(v11 + 16))
            goto LABEL_17;
          v173 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v173 = 0x2800000002;
          *(_QWORD *)(v173 + 8) = "Length exceeded the maximum array length";
          *(_DWORD *)(v173 + 16) = 4;
          v267 = (WTF::StringImpl *)v173;
          v175 = JSC::createRangeError((unint64_t)v172, &v267, v174);
          JSC::VM::throwException((JSC::VM *)v11, v172, v175, v176, v177, v178, v179, v180);
          v160 = v267;
          v267 = 0;
          if (!v160)
            goto LABEL_17;
          goto LABEL_225;
        default:
          __break(0xC471u);
          JUMPOUT(0x19889B97CLL);
      }
      return *(_QWORD *)&v102 + 0x2000000000000;
    }
    goto LABEL_26;
  }
  v24 = this;
  if (v13 > 0x16)
  {
    v26 = v11;
    goto LABEL_25;
  }
  v25 = JSC::JSCell::toObjectSlow(*((JSC::JSCell **)a2 + 5), (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_23:
  v12 = v25;
  if (!v25)
    return 0;
  v10 = (JSC::VM **)v24;
  v26 = *((_QWORD *)v24 + 7);
  v13 = *(unsigned __int8 *)(v25 + 5);
LABEL_25:
  v14 = (_BYTE *)(v12 + 5);
  if (v13 == 36)
  {
LABEL_26:
    if ((*(_BYTE *)(v12 + 4) & 0xE) != 0)
      v27 = *(unsigned int *)(*(_QWORD *)(v12 + 8) - 8);
    else
      v27 = 0;
    goto LABEL_28;
  }
  v112 = (JSC::JSGlobalObject *)v10;
  if (v13 != 35)
  {
    if (v13 == 33)
    {
      v181 = JSC::DirectArguments::length((JSC::DirectArguments *)v12, (JSC::JSGlobalObject *)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    else
    {
      if (v13 != 34)
      {
        v113 = (WTF::StringImpl *)JSC::JSObject::get((unsigned int *)v12, (uint64_t)v10, *(_QWORD *)(*(_QWORD *)(v26 + 41952) + 1768), (uint64_t)a4, a5, a6, a7, a8);
        v267 = v113;
        if (*(_DWORD *)(v26 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v26, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        {
LABEL_315:
          v27 = 0;
          goto LABEL_219;
        }
        if ((unint64_t)v113 < 0xFFFE000000000000)
        {
          a9.n128_f64[0] = JSC::JSValue::toIntegerOrInfinity(&v267, v112, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
          if (a9.n128_f64[0] > 0.0)
          {
            if (a9.n128_f64[0] > 9.00719925e15)
              a9.n128_f64[0] = 9.00719925e15;
            v27 = (unint64_t)a9.n128_f64[0];
            goto LABEL_219;
          }
          goto LABEL_315;
        }
        goto LABEL_194;
      }
      v181 = JSC::ScopedArguments::length((JSC::ScopedArguments *)v12, (JSC::JSGlobalObject *)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    v10 = (JSC::VM **)v112;
    v27 = v181;
    goto LABEL_28;
  }
  if ((*(_BYTE *)((16 * *(unsigned int *)v12) | 0x12) & 0x20) == 0)
  {
    v140 = *(WTF::StringImpl **)(*(_QWORD *)(v12 + 8) - 16);
    v267 = v140;
    if ((unint64_t)v140 >= 0xFFFE000000000000)
    {
      v27 = v140 & ~((int)v140 >> 31);
      goto LABEL_219;
    }
LABEL_283:
    a9.n128_f64[0] = JSC::JSValue::toIntegerOrInfinity(&v267, v112, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
    v222 = 9.00719925e15;
    if (a9.n128_f64[0] <= 9.00719925e15)
      v222 = a9.n128_f64[0];
    if (a9.n128_f64[0] > 0.0)
      v27 = (unint64_t)v222;
    else
      v27 = 0;
    goto LABEL_219;
  }
  v113 = (WTF::StringImpl *)JSC::JSObject::get((unsigned int *)v12, (uint64_t)v10, *(_QWORD *)(*(_QWORD *)(v26 + 41952) + 1768), (uint64_t)a4, a5, a6, a7, a8);
  v267 = v113;
  if (*(_DWORD *)(v26 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v26, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    goto LABEL_315;
  }
  if ((unint64_t)v113 < 0xFFFE000000000000)
    goto LABEL_283;
LABEL_194:
  v27 = v113 & ~((int)v113 >> 31);
LABEL_219:
  v10 = (JSC::VM **)v112;
LABEL_28:
  v265 = v27;
  if (*(_DWORD *)(v11 + 80))
  {
    v114 = *(_DWORD *)(v11 + 80);
    if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
    {
      v254 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v27 = v265;
      v10 = v254;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v261 = (JSC::VM *)v11;
  v28 = (*((_DWORD *)v9 + 8) - 1);
  v264 = v27 + v28;
  if ((v27 + v28) >> 53)
    return JSC::throwTypeError((unint64_t)v10, &v266, (uint64_t)"push cannot produce an array of length larger than (2 ** 53) - 1", 65);
  if (*((_DWORD *)v9 + 8) != 1)
  {
    v29 = 0;
    v30 = 0;
    v31 = 8 * v27;
    v260 = v27 - 0xFFFFFFFF;
    v32 = 0x600000000;
    v262 = 8 * v27;
    v263 = (*((_DWORD *)v9 + 8) - 1);
    do
    {
      v33 = v27 + v30;
      v34 = *(_QWORD *)((char *)v9 + (v32 >> 29));
      v35 = v10[7];
      if (v27 + v30 > 0xFFFFFFFE)
      {
        v257 = v10;
        v267 = 0;
        v268 = (JSC::VM **)v12;
        LODWORD(v269) = -1;
        BYTE4(v269) = BYTE4(v269) & 0xF8 | 1;
        *(_WORD *)((char *)&v269 + 5) = 0;
        HIBYTE(v269) = 1;
        v270 = 0;
        v103 = *(void (**)(unint64_t, JSC::VM **, WTF::StringImpl *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C) + 0x48);
        if (v260 + v30)
          JSC::Identifier::from((uint64_t **)v35, a2, (double)(unint64_t)v33, a3, (uint64_t)a4, a5, a6, a7, a8, &v271);
        else
          JSC::Identifier::from((uint64_t **)v35, 0xFFFFFFFFuLL, a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v271);
        v103(v12, v257, v271, v34, &v267);
        v104 = v271;
        v271 = 0;
        v27 = v265;
        v31 = v262;
        v28 = v263;
        a2 = (JSC::JSGlobalObject *)&jpt_19889A908;
        if (v104)
        {
          if (*(_DWORD *)v104 == 2)
          {
            WTF::StringImpl::~StringImpl(v104, (WTF::AtomStringImpl *)&jpt_19889A908, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
            a2 = (JSC::JSGlobalObject *)&jpt_19889A908;
            v31 = v262;
            v28 = v263;
            v27 = v265;
          }
          else
          {
            *(_DWORD *)v104 -= 2;
          }
        }
        v10 = v257;
      }
      else
      {
        v36 = *(_QWORD *)(v12 + 8);
        switch(*(_BYTE *)(v12 + 4) & 0x1F)
        {
          case 0:
          case 1:
            v80 = v10;
            v81 = JSC::JSObject::trySetIndexQuicklyForTypedArray(v12, (int)v27 + (int)v30, *(_QWORD *)((char *)v9 + (v32 >> 29)), 0);
            a2 = (JSC::JSGlobalObject *)&jpt_19889A908;
            v31 = v262;
            v28 = v263;
            v27 = v265;
            v10 = v80;
            if ((v81 & 1) == 0)
              goto LABEL_40;
            break;
          case 3:
            goto LABEL_40;
          case 4:
          case 5:
            if (*(_DWORD *)(v36 - 4) <= v33)
              goto LABEL_40;
            if (v34 > 0xFFFDFFFFFFFFFFFFLL)
            {
LABEL_34:
              if (*(_DWORD *)(v36 - 4) <= v33)
              {
LABEL_40:
                v37 = v10;
                (*(void (**)(unint64_t, JSC::VM **, uint64_t, unint64_t, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C) + 0x50))(v12, v10, v33, v34, 1);
LABEL_41:
                a2 = (JSC::JSGlobalObject *)&jpt_19889A908;
                v31 = v262;
                v28 = v263;
                v27 = v265;
                v10 = v37;
                break;
              }
              *(_QWORD *)(v36 + v31 + v29) = v34;
              if (*(_DWORD *)(v36 - 8) <= v33)
              {
                *(_DWORD *)(v36 - 8) = v27 + v30 + 1;
                if (!v34)
                  break;
              }
              else
              {
LABEL_36:
                if (!v34)
                  break;
              }
              if ((v34 & 0xFFFE000000000002) == 0
                && *((_DWORD *)v35 + 190) >= *(unsigned __int8 *)(v12 + 7))
              {
                v37 = v10;
                JSC::Heap::writeBarrierSlowPath((uint64_t)v35 + 192, v12);
                goto LABEL_41;
              }
            }
            else
            {
              v107 = v10;
              if (v34 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL
                && (a9.n128_u64[0] = v34 - 0x2000000000000, BYTE1(dword_1ECF4C5C0)))
              {
                JSC::JSObject::convertInt32ToDouble((JSC::JSObject *)v12, v10[7], (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9.n128_f64[0]);
              }
              else
              {
                JSC::JSObject::convertInt32ToContiguous((JSC::JSObject *)v12, v10[7], (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9.n128_f64[0]);
              }
              JSC::JSObject::setIndexQuickly(v12, v35, v33, v34, v108, v109, v110, v111);
              v10 = v107;
LABEL_197:
              v27 = v265;
              v31 = v262;
              v28 = v263;
              a2 = (JSC::JSGlobalObject *)&jpt_19889A908;
            }
            break;
          case 6:
          case 7:
            if (*(_DWORD *)(v36 - 4) <= v33)
              goto LABEL_40;
            v258 = v10;
            if (!(v34 >> 49))
            {
              JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)v12, v35, v27 + v30, v34, a5, a6, a7, a8, a9.n128_f64[0]);
              v10 = v258;
              goto LABEL_197;
            }
            a9.n128_f64[0] = (double)(int)v34;
            if (v34 <= 0xFFFDFFFFFFFFFFFFLL)
              a9.n128_u64[0] = v34 - 0x2000000000000;
            v31 = v262;
            v28 = v263;
            *(_QWORD *)(v36 + v262 + v29) = a9.n128_u64[0];
            v27 = v265;
            a2 = (JSC::JSGlobalObject *)&jpt_19889A908;
            if (*(_DWORD *)(v36 - 8) <= v33)
LABEL_186:
              *(_DWORD *)(v36 - 8) = v27 + v30 + 1;
            break;
          case 8:
          case 9:
            goto LABEL_34;
          case 0xA:
          case 0xB:
            if (*(_DWORD *)(v36 - 4) <= v33)
              goto LABEL_40;
            v88 = v36 + v31 + 8 * v30;
            v255 = *(_QWORD *)(v88 + 16);
            v256 = v10;
            *(_QWORD *)(v88 + 16) = v34;
            if (v34
              && (v34 & 0xFFFE000000000002) == 0
              && *((_DWORD *)v35 + 190) >= *(unsigned __int8 *)(v12 + 7))
            {
              JSC::Heap::writeBarrierSlowPath((uint64_t)v35 + 192, v12);
            }
            v10 = v256;
            v27 = v265;
            v31 = v262;
            v28 = v263;
            a2 = (JSC::JSGlobalObject *)&jpt_19889A908;
            if (!v255)
            {
              ++*(_DWORD *)(v36 + 12);
              if (*(_DWORD *)(v36 - 8) <= v33)
                goto LABEL_186;
            }
            break;
          case 0xC:
          case 0xD:
            if (*(_DWORD *)(v36 - 4) <= v33)
              goto LABEL_40;
            v207 = v36 + v31 + 8 * v30;
            if (!*(_QWORD *)(v207 + 16))
              goto LABEL_40;
            *(_QWORD *)(v207 + 16) = v34;
            goto LABEL_36;
          default:
            if ((*(_BYTE *)(v12 + 4) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19889AF80);
            }
            goto LABEL_40;
        }
      }
      if (*((_DWORD *)v266 + 20))
      {
        v105 = *((_DWORD *)v266 + 20);
        if ((v105 & 0x27) != 0 && (v105 & 0x20) == 0)
        {
          v253 = v10;
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v266 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          a2 = (JSC::JSGlobalObject *)&jpt_19889A908;
          v31 = v262;
          v28 = v263;
          v27 = v265;
          v10 = v253;
        }
        if (*((_QWORD *)v266 + 2))
          return 0;
      }
      ++v30;
      v32 += 0x100000000;
      v29 += 8;
    }
    while (v28 != v30);
  }
  v38 = v264;
  v39 = HIDWORD(v264);
  if (*v14 != 36)
  {
    v267 = 0;
    v268 = (JSC::VM **)v12;
    LODWORD(v269) = -1;
    BYTE4(v269) = BYTE4(v269) & 0xF8 | 1;
    *(_WORD *)((char *)&v269 + 5) = 0;
    HIBYTE(v269) = 1;
    v270 = 0;
    v115 = *(void (**)(unint64_t, JSC::VM **, uint64_t, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C) + 0x48);
    v116 = *(_QWORD *)(*((_QWORD *)v261 + 5244) + 1768);
    if (v39)
    {
      v22 = COERCE__INT64((double)v264) + 0x2000000000000;
      v115(v12, v10, v116, v22, &v267);
      return v22;
    }
    if ((v264 & 0x80000000) != 0)
      v117 = COERCE__INT64((double)v264) + 0x2000000000000;
    else
      v117 = v264 | 0xFFFE000000000000;
    v115(v12, v10, v116, v117, &v267);
    goto LABEL_54;
  }
  if (v39)
  {
    v118 = v10;
    v119 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v119 = 0x1400000002;
    *(_QWORD *)(v119 + 8) = "Invalid array length";
    *(_DWORD *)(v119 + 16) = 4;
    v271 = (WTF::StringImpl *)v119;
    v120 = v118;
    v122 = v118 + 16;
    v121 = (unint64_t)v118[16];
    v123 = (JSC::Heap **)v118[7];
    if ((v121 & 1) != 0)
    {
      v219 = *(uint64_t (**)(WTF::StringImpl **))(v121 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v120 & 8) != 0)
        v220 = v120 - 2;
      else
        v220 = (WTF::StringImpl **)((unint64_t)v120 & 0xFFFFFFFFFFFFC000 | 8);
      v267 = *v220;
      v268 = v120;
      v269 = v122;
      v121 = v219(&v267);
    }
    v124 = JSC::ErrorInstance::create(v123, v121, &v271, 0, 0, 0, 2, 1);
    v131 = (JSC::Exception *)v124;
    if ((v124 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v124 & 0xFFFFFFFE) + 0x4C)))
    {
      v131 = (JSC::Exception *)JSC::Exception::create((uint64_t)v261, (JSC::VM *)v124, 0, v125, v126, v127, v128, v129);
    }
    JSC::VM::throwException(v261, (JSC::JSGlobalObject *)v120, v131, v130, v125, v126, v127, v128, v129);
    v139 = v271;
    v271 = 0;
    if (v139)
    {
      if (*(_DWORD *)v139 == 2)
      {
        WTF::StringImpl::~StringImpl(v139, v132, v133, v134, v135, v136, v137, v138);
        WTF::fastFree(v182, v183, v184, v185, v186, v187, v188, v189);
      }
      else
      {
        *(_DWORD *)v139 -= 2;
      }
    }
    v102 = (double)v264;
    return *(_QWORD *)&v102 + 0x2000000000000;
  }
  v40 = v10[7];
  v267 = v40;
  v41 = *(JSC::Butterfly **)(v12 + 8);
  v42 = *(_BYTE *)(v12 + 4);
  v43 = v42 & 0x1F;
  if (v43 == 9)
    goto LABEL_53;
  if (v43 > 0x19)
    goto LABEL_300;
  if (((1 << v43) & 0xA8) == 0)
  {
    if (((1 << v43) & 0x2800) != 0)
    {
      v76 = v12;
      v77 = (JSC::JSGlobalObject *)v10;
      goto LABEL_117;
    }
    if (((1 << v43) & 0x2A00000) != 0)
    {
      if (*((_DWORD *)v41 - 2) == (_DWORD)v264)
        goto LABEL_54;
      v218 = v10;
      JSC::JSObject::convertFromCopyOnWrite((JSC::JSObject *)v12, v40, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      v10 = v218;
      v41 = *(JSC::Butterfly **)(v12 + 8);
      goto LABEL_53;
    }
LABEL_300:
    if (v43 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x19889BDB8);
    }
    v38 = v264;
    if (!(_DWORD)v264)
      goto LABEL_54;
    if (v264 >> 5 < 0xC35)
    {
      v38 = v264;
      JSC::JSObject::createInitialUndecided((JSC::JSObject *)v12, v40, v264, a9);
      goto LABEL_54;
    }
    v246 = v10;
    if ((v42 & 0xEu) <= 9)
      v41 = JSC::JSObject::ensureArrayStorageSlow((JSC::JSObject *)v12, v40, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    v76 = v12;
    v77 = (JSC::JSGlobalObject *)v246;
    v38 = v264;
LABEL_117:
    JSC::JSArray::setLengthWithArrayStorage(v76, v77, v38, 1, v41);
    goto LABEL_54;
  }
LABEL_53:
  v44 = *((_DWORD *)v41 - 2);
  if (v44 == (_DWORD)v264)
    goto LABEL_54;
  if (v264 > 0x10000000)
    goto LABEL_309;
  if (v264 >> 5 < 0xC35)
    goto LABEL_146;
  v247 = v10;
  v248 = JSC::JSObject::countElements((JSC::JSObject *)v12);
  v10 = v247;
  if (v248 < v264 >> 3)
  {
LABEL_309:
    v249 = (JSC::JSGlobalObject *)v10;
    if ((*(_BYTE *)(v12 + 4) & 0xEu) < 0xA)
      v250 = JSC::JSObject::ensureArrayStorageSlow((JSC::JSObject *)v12, v40, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    else
      v250 = *(JSC::Butterfly **)(v12 + 8);
    v38 = v264;
    JSC::JSArray::setLengthWithArrayStorage(v12, v249, v264, 1, v250);
    goto LABEL_54;
  }
  v44 = *((_DWORD *)v41 - 2);
LABEL_146:
  v89 = v44 - v264;
  if (v44 < v264)
  {
    v205 = (JSC::JSGlobalObject *)v10;
    v206 = *(_QWORD *)(v12 + 8);
    if (*(_DWORD *)(v206 - 4) < v264 || (*(_BYTE *)(v12 + 4) & 0x10) != 0)
    {
      if (!JSC::JSObject::ensureLengthSlow((JSC::JSObject *)v12, v40, v264, (uint64_t)a4, a5, a6, a7, a8, a9))
      {
        JSC::throwOutOfMemoryError(v205, (JSC::JSGlobalObject *)&v267);
        v38 = v264;
        goto LABEL_54;
      }
      v206 = *(_QWORD *)(v12 + 8);
    }
    v38 = v264;
    if (*(_DWORD *)(v206 - 8) < v264)
      *(_DWORD *)(v206 - 8) = v264;
  }
  else if (v89 > v264 && v89 >= 0x41)
  {
    JSC::JSObject::reallocateAndShrinkButterfly((JSC::JSObject *)v12, v40, v264);
  }
  else
  {
    if ((*(_BYTE *)(v12 + 4) & 0xF) == 7)
    {
      if (v44 > v264)
        memset_pattern16((char *)v41 + 8 * (v44 - 1 - (unint64_t)(v44 - 1 - v264)), &memset_pattern_4, 8 * (v44 - 1 - v264) + 8);
    }
    else if (v44 > v264)
    {
      bzero((char *)v41 + 8 * (v44 - 1 - (unint64_t)(v44 - 1 - v264)), 8 * (v44 - 1 - v264) + 8);
    }
    *((_DWORD *)v41 - 2) = v264;
  }
LABEL_54:
  if ((v38 & 0x80000000) != 0)
  {
    v102 = (double)v38;
    return *(_QWORD *)&v102 + 0x2000000000000;
  }
  return v38 | 0xFFFE000000000000;
}

unint64_t JSC::arrayProtoFuncReverse(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v10;
  unint64_t v11;
  unsigned int v12;
  JSC::VM *v13;
  unsigned int v14;
  unint64_t v15;
  char v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v26;
  const WTF::StringImpl *v27;
  const WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 hasProperty;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  const WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  double v52;
  uint64_t **v53;
  WTF::AtomStringImpl *v54;
  const WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t **v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t i;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v83;
  void (*v84)(unint64_t, JSC *, WTF::StringImpl *, unint64_t, JSC::JSObject **);
  WTF::StringImpl *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(unint64_t, JSC *, WTF::StringImpl *, unint64_t, JSC::JSObject **);
  JSC::VM *v103;
  WTF::StringImpl *v104;
  JSC::JSObject *v105;
  unint64_t v106;
  int v107;
  char v108;
  __int16 v109;
  char v110;
  uint64_t v111;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v103 = v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0)
    goto LABEL_64;
  v12 = *(unsigned __int8 *)(v11 + 5);
  if (v12 - 51 < 6)
  {
    v11 = 10;
LABEL_64:
    v105 = (JSC::JSObject *)v11;
    v70 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v105, this, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_65;
  }
  if (v12 >= 0x17)
  {
    v13 = v10;
    goto LABEL_5;
  }
  v70 = JSC::JSCell::toObjectSlow(*((JSC::JSCell **)a2 + 5), (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_65:
  v11 = v70;
  if (!v70)
    return v11;
  v13 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = *(unsigned __int8 *)(v70 + 5);
LABEL_5:
  if (v12 != 36)
  {
    if (v12 != 35)
    {
      if (v12 == 33)
      {
        v73 = JSC::DirectArguments::length((JSC::DirectArguments *)v11, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      else
      {
        if (v12 != 34)
        {
          v105 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v11, (uint64_t)this, *(_QWORD *)(*((_QWORD *)v13 + 5244) + 1768), (uint64_t)a4, a5, a6, a7, a8);
          if (*((_DWORD *)v13 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v13, v71, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
          {
            v15 = 0;
            goto LABEL_9;
          }
          v72 = JSC::JSValue::toLength(&v105, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
          goto LABEL_76;
        }
        v73 = JSC::ScopedArguments::length((JSC::ScopedArguments *)v11, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      v15 = v73;
      goto LABEL_9;
    }
    v72 = JSC::ClonedArguments::length((JSC::ClonedArguments *)v11, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
LABEL_76:
    v15 = v72;
    goto LABEL_9;
  }
  if ((*(_BYTE *)(v11 + 4) & 0xE) != 0)
    v14 = *(_DWORD *)(*(_QWORD *)(v11 + 8) - 8);
  else
    v14 = 0;
  v15 = v14;
LABEL_9:
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v16 = *(_BYTE *)(v11 + 4);
  if ((v16 & 0x10) != 0)
  {
    JSC::JSObject::convertFromCopyOnWrite((JSC::JSObject *)v11, v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (__n128)a9);
    v16 = *(_BYTE *)(v11 + 4);
  }
  v17 = v16 & 0xF;
  if (v17 - 8 >= 2)
  {
    if (v17 > 0xD)
    {
LABEL_35:
      if (v15 <= 1)
        return v11;
      v27 = 0;
      v28 = (const WTF::StringImpl *)(v15 >> 1);
      while (1)
      {
        hasProperty = JSC::JSObject::hasProperty((JSC::JSObject *)v11, (uint64_t ***)this, v27, (uint64_t)a4, a5, a6, a7, a8);
        if (*((_DWORD *)v103 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v103, v29, v30, v31, v32, v33, v34, v35))
          return 0;
        if (hasProperty)
        {
          v39 = JSC::JSObject::get((JSC::JSObject *)v11, (uint64_t ***)this, v27, v31, v32, v33, v34, v35);
          if (*((_DWORD *)v103 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v103, v37, v38, v31, v32, v33, v34, v35))
              return 0;
          }
        }
        else
        {
          v39 = 0;
        }
        v40 = v15 - 1;
        v43 = JSC::JSObject::hasProperty((JSC::JSObject *)v11, (uint64_t ***)this, (const WTF::StringImpl *)(v15 - 1), v31, v32, v33, v34, v35);
        if (*((_DWORD *)v103 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v103, v41, v42, (uint64_t)a4, a5, a6, a7, a8))
        {
          return 0;
        }
        if (!v43)
          break;
        v51 = JSC::JSObject::get((JSC::JSObject *)v11, (uint64_t ***)this, (const WTF::StringImpl *)(v15 - 1), (uint64_t)a4, a5, a6, a7, a8);
        if (*((_DWORD *)v103 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v103, v44, (uint64_t)v45, v46, v47, v48, v49, v50))
        {
          return 0;
        }
        v53 = (uint64_t **)*((_QWORD *)this + 7);
        if ((unint64_t)v27 > 0xFFFFFFFE)
        {
          v105 = 0;
          v106 = v11;
          v107 = -1;
          v108 = v108 & 0xF8 | 1;
          v109 = 0;
          v110 = 1;
          v111 = 0;
          v102 = *(void (**)(unint64_t, JSC *, WTF::StringImpl *, unint64_t, JSC::JSObject **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) + 0x48);
          if (v27 == (const WTF::StringImpl *)0xFFFFFFFFLL)
            JSC::Identifier::from(v53, 0xFFFFFFFFuLL, v45, v46, v47, v48, v49, v50, (int **)&v104);
          else
            JSC::Identifier::from(v53, (JSC::VM *)v53, (double)(unint64_t)v27, v45, v46, v47, v48, v49, v50, &v104);
          v102(v11, this, v104, v51, &v105);
          v83 = v104;
          v104 = 0;
          if (v83)
          {
            if (*(_DWORD *)v83 == 2)
            {
              WTF::StringImpl::~StringImpl(v83, v54, (uint64_t)v55, v56, v57, v58, v59, v60);
              WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
            }
            else
            {
              *(_DWORD *)v83 -= 2;
            }
          }
        }
        else if ((JSC::JSObject::trySetIndexQuickly(v11, (JSC::VM *)v53, (uint64_t)v27, v51, 0, v48, v49, v50, v52) & 1) == 0)
        {
          (*(void (**)(unint64_t, JSC *, const WTF::StringImpl *, unint64_t, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) + 0x50))(v11, this, v27, v51, 1);
        }
        if (*((_DWORD *)v103 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v103, (uint64_t)v54, (uint64_t)v55, v56, v57, v58, v59, v60))
        {
          return 0;
        }
        if (hasProperty)
          goto LABEL_56;
        v64 = JSC::JSObject::deleteProperty((JSC::JSObject *)v11, this, (const WTF::StringImpl *)(v15 - 1), v56, v57, v58, v59, v60);
        if (*((_DWORD *)v103 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v103, v62, v63, (uint64_t)a4, a5, a6, a7, a8))
        {
          return 0;
        }
        if ((v64 & 1) == 0)
          goto LABEL_128;
LABEL_60:
        v27 = (const WTF::StringImpl *)((char *)v27 + 1);
        v15 = v40;
        if (v28 == v27)
          return v11;
      }
      if (!hasProperty)
        goto LABEL_60;
      v66 = JSC::JSObject::deleteProperty((JSC::JSObject *)v11, this, v27, (uint64_t)a4, a5, a6, a7, a8);
      if (*((_DWORD *)v103 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v103, v65, (uint64_t)v55, v56, v57, v58, v59, v60))
      {
        return 0;
      }
      if ((v66 & 1) == 0)
      {
LABEL_128:
        JSC::throwTypeError((unint64_t)this, &v103, (uint64_t)"Unable to delete property.", 27);
        return 0;
      }
LABEL_56:
      v67 = (uint64_t **)*((_QWORD *)this + 7);
      if (v40 > 0xFFFFFFFE)
      {
        v105 = 0;
        v106 = v11;
        v107 = -1;
        v108 = v108 & 0xF8 | 1;
        v109 = 0;
        v110 = 1;
        v111 = 0;
        v84 = *(void (**)(unint64_t, JSC *, WTF::StringImpl *, unint64_t, JSC::JSObject **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) + 0x48);
        if (v15 == 0x100000000)
          JSC::Identifier::from(v67, 0xFFFFFFFFuLL, v55, v56, v57, v58, v59, v60, (int **)&v104);
        else
          JSC::Identifier::from(v67, (JSC::VM *)v67, (double)v40, v55, v56, v57, v58, v59, v60, &v104);
        v84(v11, this, v104, v39, &v105);
        v85 = v104;
        v104 = 0;
        if (v85)
        {
          if (*(_DWORD *)v85 == 2)
          {
            WTF::StringImpl::~StringImpl(v85, v68, v69, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
          }
          else
          {
            *(_DWORD *)v85 -= 2;
          }
        }
      }
      else if ((JSC::JSObject::trySetIndexQuickly(v11, (JSC::VM *)v67, v15 - 1, v39, 0, v58, v59, v60, v61) & 1) == 0)
      {
        (*(void (**)(unint64_t, JSC *, unint64_t, unint64_t, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) + 0x50))(v11, this, v15 - 1, v39, 1);
      }
      if (*((_DWORD *)v103 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v103, (uint64_t)v68, v69, (uint64_t)a4, a5, a6, a7, a8))
      {
        return 0;
      }
      goto LABEL_60;
    }
    if (((1 << v17) & 0x30) == 0)
    {
      if (((1 << v17) & 0x3C00) != 0)
      {
        v26 = *(_QWORD *)(v11 + 8);
        if (v15 <= *(unsigned int *)(v26 - 4)
          && (*(_DWORD *)(v26 + 12) == *(_DWORD *)(v26 - 8)
           || (JSC::holesMustForwardToPrototype((JSC *)v11, a2) & 1) == 0))
        {
          if (v15)
          {
            v79 = (_QWORD *)(v26 + 16 + 8 * v15 - 8);
            if ((unint64_t)v79 > v26 + 16)
            {
              v80 = v26 + 24;
              do
              {
                v81 = *(_QWORD *)(v80 - 8);
                *(_QWORD *)(v80 - 8) = *v79;
                *v79-- = v81;
                v24 = v80 >= (unint64_t)v79;
                v80 += 8;
              }
              while (!v24);
            }
          }
          goto LABEL_28;
        }
      }
      else if (((1 << v17) & 0xC0) != 0)
      {
        v74 = *(_QWORD *)(v11 + 8);
        if (v15 <= *(unsigned int *)(v74 - 8))
        {
          if ((_DWORD)v15)
          {
            for (i = 0; v15 - 1 != i; ++i)
              ;
          }
          if (v15)
          {
            v76 = (_QWORD *)(v74 + 8 * v15 - 8);
            if ((unint64_t)v76 > v74)
            {
              v77 = v74 + 8;
              do
              {
                v78 = *(_QWORD *)(v77 - 8);
                *(_QWORD *)(v77 - 8) = *v76;
                *v76-- = v78;
                v24 = v77 >= (unint64_t)v76;
                v77 += 8;
              }
              while (!v24);
            }
          }
          return v11;
        }
      }
      goto LABEL_35;
    }
  }
  v18 = *(_QWORD **)(v11 + 8);
  if (v15 > *((unsigned int *)v18 - 2))
    goto LABEL_35;
  if ((_DWORD)v15)
  {
    if (!*v18)
      goto LABEL_20;
    v19 = 0;
    do
    {
      if (v15 - 1 == v19)
        goto LABEL_21;
    }
    while (v18[++v19]);
    if (v19 < v15)
    {
LABEL_20:
      if ((JSC::holesMustForwardToPrototype((JSC *)v11, a2) & 1) != 0)
        goto LABEL_35;
    }
  }
LABEL_21:
  if (v15)
  {
    v21 = &v18[v15 - 1];
    if (v21 > v18)
    {
      v22 = v18 + 1;
      do
      {
        v23 = *(v22 - 1);
        *(v22 - 1) = *v21;
        *v21-- = v23;
        v24 = v22++ >= v21;
      }
      while (!v24);
      v16 = *(_BYTE *)(v11 + 4);
    }
  }
  if ((v16 & 0xE) != 4)
  {
LABEL_28:
    if (*((_DWORD *)v10 + 190) >= *(unsigned __int8 *)(v11 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v10 + 192, v11);
  }
  return v11;
}

uint64_t JSC::arrayProtoFuncShift(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t IndexQuicklyForTypedArray;
  JSC::VM *v17;
  char v18;
  uint64_t v19;
  JSC::Butterfly *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x16_t *v38;
  uint64_t v39;
  unint64_t v40;
  JSC::JSObject *v41;
  JSC::Butterfly *v42;
  char v43;
  unsigned int v44;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  int v51;
  uint64_t v52;
  int v53;
  int8x16_t *j;
  int8x16_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t NotAnObjectError;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  JSC::Exception *v71;
  uint64_t v72;
  uint64_t v73;
  JSC::JSObject *v74;
  int v75;
  int v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  JSC::Heap **v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  JSC::Exception *v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  JSC::JSObject *v99;
  int v100;
  uint64_t v101;
  BOOL v102;
  char v103;
  int v104;
  char v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t IfProperty;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  _OWORD *v141;
  uint64_t v142;
  uint64_t (*v143)(JSC::JSObject **);
  JSC::JSObject **v144;
  unint64_t v145;
  unint64_t v146;
  char v147;
  uint64_t v148;
  double v149;
  JSC::Butterfly *v150;
  uint64_t **v151;
  WTF::StringImpl *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  unint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t **v171;
  WTF::StringImpl *v172;
  void (*v173)(unint64_t, uint64_t, WTF::StringImpl *, unint64_t, JSC::JSObject **);
  WTF::StringImpl *v174;
  uint64_t **v175;
  WTF::StringImpl *v176;
  __int16 v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  char v215;
  JSC::Butterfly *i;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  unint64_t v220;
  int v221;
  int v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  char v228;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  int v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  JSC::VM *v289;
  unint64_t v290;
  unint64_t v291;
  JSC::JSObject *v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  _QWORD v297[2];
  uint64_t v298;
  char v299;
  uint64_t v300;
  uint64_t v301;
  JSC::VM *v302;
  WTF::StringImpl *v303;

  v10 = *(_QWORD *)(this + 56);
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0)
  {
    if (v11 >> 49)
    {
      v62 = JSC::constructNumber(this, *((JSC::VM **)a2 + 5), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_107;
    }
    if ((v11 & 0xFFFFFFFFFFFFFFFELL) == 6)
    {
      v62 = JSC::constructBooleanFromImmediateBoolean(this, *((_QWORD *)a2 + 5), a3, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_107;
    }
LABEL_132:
    NotAnObjectError = JSC::createNotAnObjectError(this, v11);
    v71 = (JSC::Exception *)NotAnObjectError;
    if ((NotAnObjectError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)NotAnObjectError & 0xFFFFFFFE) + 0x4C)))
    {
      v71 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)NotAnObjectError, 0, v65, v66, v67, v68, v69);
    }
    JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v71, v70, v65, v66, v67, v68, v69);
    return 0;
  }
  v12 = *(unsigned __int8 *)(v11 + 5);
  if (v12 - 51 < 6)
  {
    v11 = 10;
    goto LABEL_132;
  }
  if (v12 > 0x16)
  {
    v13 = *(_QWORD *)(this + 56);
    goto LABEL_5;
  }
  v62 = JSC::JSCell::toObjectSlow(*((JSC::JSCell **)a2 + 5), (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_107:
  v11 = v62;
  if (!v62)
    return 0;
  v13 = *(_QWORD *)(this + 56);
  v12 = *(unsigned __int8 *)(v62 + 5);
LABEL_5:
  if (v12 != 36)
  {
    if (v12 != 35)
    {
      if (v12 == 33)
      {
        v110 = *(_QWORD *)(v11 + 40);
        if (v110
          && (!qword_1ECF4C038
           || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
           || (v110 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          v292 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v11, this, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1768), (uint64_t)a4, a5, a6, a7, a8);
          if (*(_DWORD *)(v13 + 80)
            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, v237, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
          {
            v111 = 0;
          }
          else
          {
            v111 = JSC::JSValue::toUInt32(&v292, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
          }
        }
        else
        {
          v111 = *(_DWORD *)(v11 + 32);
        }
      }
      else
      {
        if (v12 != 34)
        {
          v74 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v11, this, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1768), (uint64_t)a4, a5, a6, a7, a8);
          v292 = v74;
          if (!*(_DWORD *)(v13 + 80)
            || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
          {
            if ((unint64_t)v74 < 0xFFFE000000000000)
            {
              *(double *)a9.i64 = JSC::JSValue::toIntegerOrInfinity(&v292, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
              v149 = 9.00719925e15;
              if (*(double *)a9.i64 <= 9.00719925e15)
                v149 = *(double *)a9.i64;
              if (*(double *)a9.i64 > 0.0)
                v14 = (unint64_t)v149;
              else
                v14 = 0;
            }
            else
            {
              v14 = v74 & ~((int)v74 >> 31);
            }
            goto LABEL_8;
          }
          goto LABEL_336;
        }
        v111 = JSC::ScopedArguments::length((JSC::ScopedArguments *)v11, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      v14 = v111;
      goto LABEL_8;
    }
    if ((*(_BYTE *)((16 * *(unsigned int *)v11) | 0x12) & 0x20) != 0)
    {
      v292 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v11, this, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1768), (uint64_t)a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v13 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, v148, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
LABEL_336:
        v14 = 0;
        goto LABEL_8;
      }
    }
    else
    {
      v99 = *(JSC::JSObject **)(*(_QWORD *)(v11 + 8) - 16);
      v292 = v99;
      if ((unint64_t)v99 >= 0xFFFE000000000000)
      {
        v14 = v99 & ~((int)v99 >> 31);
        goto LABEL_8;
      }
    }
    v14 = JSC::JSValue::toLength(&v292, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    goto LABEL_8;
  }
  if ((*(_BYTE *)(v11 + 4) & 0xE) != 0)
    v14 = *(unsigned int *)(*(_QWORD *)(v11 + 8) - 8);
  else
    v14 = 0;
LABEL_8:
  if (*(_DWORD *)(v10 + 80))
  {
    v75 = *(_DWORD *)(v10 + 80);
    if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (!v14)
  {
    if (*(_BYTE *)(v11 + 5) == 36)
    {
      JSC::JSArray::setLength((JSC::JSArray *)v11, (JSC::VM **)this, 0, 1, a5, a6, a7, a8, (__n128)a9);
    }
    else
    {
      v292 = 0;
      v293 = v11;
      v294 = 0x1000001FFFFFFFFLL;
      v295 = 0;
      (*(void (**)(unint64_t, uint64_t, _QWORD, unint64_t, JSC::JSObject **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) + 0x48))(v11, this, *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 1768), 0xFFFE000000000000, &v292);
    }
    return 10;
  }
  v15 = *(unint64_t **)(v11 + 8);
  if ((*(_BYTE *)(v11 + 4) & 0xFu) - 8 >= 2)
  {
    switch(*(_BYTE *)(v11 + 4) & 0xF)
    {
      case 0:
      case 1:
        switch(*(_BYTE *)(v11 + 5))
        {
          case '\'':
          case '(':
            if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
              goto LABEL_141;
            v123 = *(v15 - 1);
            if (*(_BYTE *)(v123 + 64) && (v275 = *(_QWORD *)(v123 + 32)) != 0)
              v124 = *(_QWORD *)(v275 + 32);
            else
              v124 = *(_QWORD *)(v123 + 48);
            v109 = *(_QWORD *)(v11 + 24);
            v125 = *(_QWORD *)(v11 + 32);
            if (v109 + v125 > v124)
              goto LABEL_70;
            if ((*(_BYTE *)(v11 + 40) & 1) == 0)
              goto LABEL_245;
            if (v124 == v125)
              goto LABEL_70;
            goto LABEL_142;
          case ')':
            if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(v11, 0))
              goto LABEL_70;
            goto LABEL_142;
          case '*':
          case '+':
            if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
              goto LABEL_141;
            v106 = *(v15 - 1);
            if (*(_BYTE *)(v106 + 64) && (v273 = *(_QWORD *)(v106 + 32)) != 0)
              v107 = *(_QWORD *)(v273 + 32);
            else
              v107 = *(_QWORD *)(v106 + 48);
            v109 = *(_QWORD *)(v11 + 24);
            v108 = *(_QWORD *)(v11 + 32);
            if (v108 + 2 * v109 > v107)
              goto LABEL_70;
            if ((*(_BYTE *)(v11 + 40) & 1) == 0)
              goto LABEL_245;
            if (v107 - v108 < 2)
              goto LABEL_70;
            goto LABEL_142;
          case ',':
          case '-':
          case '.':
            if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
              goto LABEL_141;
            v127 = *(v15 - 1);
            if (*(_BYTE *)(v127 + 64) && (v266 = *(_QWORD *)(v127 + 32)) != 0)
              v128 = *(_QWORD *)(v266 + 32);
            else
              v128 = *(_QWORD *)(v127 + 48);
            v109 = *(_QWORD *)(v11 + 24);
            v129 = *(_QWORD *)(v11 + 32);
            if (v129 + 4 * v109 > v128)
              goto LABEL_70;
            if ((*(_BYTE *)(v11 + 40) & 1) == 0)
              goto LABEL_245;
            if (v128 - v129 < 4)
              goto LABEL_70;
            goto LABEL_142;
          case '/':
            if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
            {
LABEL_141:
              if (!*(_QWORD *)(v11 + 24))
                goto LABEL_70;
            }
            else
            {
              v120 = *(v15 - 1);
              if (*(_BYTE *)(v120 + 64) && (v274 = *(_QWORD *)(v120 + 32)) != 0)
                v121 = *(_QWORD *)(v274 + 32);
              else
                v121 = *(_QWORD *)(v120 + 48);
              v109 = *(_QWORD *)(v11 + 24);
              v122 = *(_QWORD *)(v11 + 32);
              if (v122 + 8 * v109 > v121)
                goto LABEL_70;
              if ((*(_BYTE *)(v11 + 40) & 1) != 0)
              {
                if (v121 - v122 < 8)
                  goto LABEL_70;
              }
              else
              {
LABEL_245:
                if (!v109)
                  goto LABEL_70;
              }
            }
LABEL_142:
            IndexQuicklyForTypedArray = JSC::JSObject::getIndexQuicklyForTypedArray(v11, 0, 0);
            if (IndexQuicklyForTypedArray)
              goto LABEL_13;
            break;
          default:
            goto LABEL_70;
        }
        goto LABEL_70;
      case 3:
        goto LABEL_70;
      case 4:
      case 5:
        break;
      case 6:
      case 7:
        if (!*((_DWORD *)v15 - 2))
          goto LABEL_70;
        a9.i64[0] = *v15;
        IndexQuicklyForTypedArray = *v15 + 0x2000000000000;
        if (*v15 == 0xFFFE000000000000)
          goto LABEL_70;
        goto LABEL_13;
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        if (!*((_DWORD *)v15 - 1))
          goto LABEL_70;
        IndexQuicklyForTypedArray = v15[2];
        if (!IndexQuicklyForTypedArray)
          goto LABEL_70;
        goto LABEL_13;
      default:
        __break(0xC471u);
        JUMPOUT(0x19889D93CLL);
    }
  }
  if (*((_DWORD *)v15 - 2))
  {
    IndexQuicklyForTypedArray = *v15;
    if (*v15)
      goto LABEL_13;
  }
LABEL_70:
  v46 = *(_QWORD *)(this + 56);
  v294 = 0xFFFFFFFF00000000;
  LOBYTE(v298) = 0;
  v299 = 0;
  v300 = 0;
  v301 = 0;
  v296 = 0;
  memset(v297, 0, 13);
  v295 = v11;
  v47 = v11;
  while (1)
  {
    v48 = 16 * (*(_DWORD *)v47 & 0xFFFFFFFE);
    v49 = (*(uint64_t (**)(unint64_t, uint64_t, _QWORD, JSC::JSObject **))(16
                                                                                         * *(unsigned int *)(v48 + 0x4C)
                                                                                         + 0x70))(v47, this, 0, &v292);
    v50 = v49;
    if (!*(_DWORD *)(v46 + 80))
    {
      if ((v49 & 1) == 0)
        goto LABEL_73;
      if (!*(_DWORD *)(v46 + 80))
        goto LABEL_92;
      LOBYTE(v53) = 1;
LABEL_190:
      v104 = *(_DWORD *)(v46 + 80);
      if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v46 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v46 + 16))
        v105 = 0;
      else
        v105 = v53;
      if ((v105 & 1) == 0)
        goto LABEL_84;
      goto LABEL_92;
    }
    v100 = *(_DWORD *)(v46 + 80);
    if ((v100 & 0x27) != 0 && (v100 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v46 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v101 = *(_QWORD *)(v46 + 16);
    v102 = v101 == 0;
    v103 = v101 ? 1 : v50;
    if ((v103 & 1) != 0)
      break;
LABEL_73:
    if (BYTE2(v297[1]) == 3)
    {
      if (BYTE4(v297[1]))
        goto LABEL_81;
      v51 = *(unsigned __int8 *)(v47 + 5);
      if (v51 == 61)
        goto LABEL_76;
    }
    else
    {
      v51 = *(unsigned __int8 *)(v47 + 5);
      if (v51 == 61)
      {
        if (BYTE2(v297[1]) == 1)
          goto LABEL_81;
        goto LABEL_76;
      }
    }
    if ((v51 - 39) <= 0xA
      && !JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v47, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      goto LABEL_81;
    }
LABEL_76:
    if ((*(_WORD *)(v48 + 12) & 0x800) == 0 || BYTE2(v297[1]) == 3)
    {
      v52 = *(_QWORD *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x30);
      if (!v52)
        v52 = *(_QWORD *)(v47 + 16);
    }
    else
    {
      if ((*(_WORD *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v52 = (*(uint64_t (**)(unint64_t, uint64_t))(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v47 & 0xFFFFFFFE)
                                                                                     + 0x4C)
                                                                   + 0xB0))(v47, this);
      }
      else
      {
        v52 = *(_QWORD *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x30);
        if (!v52)
          v52 = *(_QWORD *)(v47 + 16);
      }
      if (*(_DWORD *)(v46 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v46, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
LABEL_81:
        v53 = 0;
        goto LABEL_82;
      }
    }
    if ((v52 & 0xFFFE000000000002) == 0)
    {
      v47 = v52;
      if (*(unsigned __int8 *)(v52 + 5) > 0x16u)
        continue;
    }
    goto LABEL_81;
  }
  v53 = v102;
LABEL_82:
  if (*(_DWORD *)(v46 + 80))
    goto LABEL_190;
  if (!v53)
  {
LABEL_84:
    IndexQuicklyForTypedArray = 10;
    goto LABEL_94;
  }
LABEL_92:
  if (BYTE1(v297[1]) == 1)
  {
    IndexQuicklyForTypedArray = (uint64_t)v292;
  }
  else if (BYTE1(v297[1]) == 2)
  {
    IndexQuicklyForTypedArray = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v292, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  else
  {
    v151 = *(uint64_t ***)(this + 56);
    JSC::Identifier::from(v151, 0, a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v303);
    IndexQuicklyForTypedArray = JSC::PropertySlot::customGetter((uint64_t)&v292, (JSC::VM *)v151, v303);
    v152 = v303;
    v303 = 0;
    if (v152)
    {
      if (*(_DWORD *)v152 == 2)
      {
        WTF::StringImpl::~StringImpl(v152, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
      }
      else
      {
        *(_DWORD *)v152 -= 2;
      }
    }
  }
LABEL_94:
  if (v299)
  {
    v57 = *(_DWORD *)(v298 + 4);
    if (!v57)
    {
      __break(0xC471u);
      JUMPOUT(0x19889D174);
    }
    *(_DWORD *)(v298 + 4) = v57 - 1;
  }
LABEL_13:
  if (*(_DWORD *)(v10 + 80))
  {
    v76 = *(_DWORD *)(v10 + 80);
    if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v17 = *(JSC::VM **)(this + 56);
  v302 = v17;
  if (*(_BYTE *)(v11 + 5) != 36)
  {
    v291 = 0;
    goto LABEL_252;
  }
  v18 = *(_BYTE *)(v11 + 4);
  if ((v18 & 0xE) != 0)
    v19 = *(unsigned int *)(*(_QWORD *)(v11 + 8) - 8);
  else
    v19 = 0;
  if (v19 != v14)
    goto LABEL_250;
  if ((*(_BYTE *)(v11 + 4) & 0x10) != 0)
  {
    JSC::JSObject::convertFromCopyOnWrite((JSC::JSObject *)v11, v17, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (__n128)a9);
    v18 = *(_BYTE *)(v11 + 4);
  }
  v20 = *(JSC::Butterfly **)(v11 + 8);
  v21 = v18 & 0xF;
  if (v21 != 9)
  {
    LODWORD(v58) = 0;
    switch(v18 & 0xF)
    {
      case 1:
        goto LABEL_63;
      case 3:
        goto LABEL_251;
      case 5:
        goto LABEL_21;
      case 7:
        v59 = *((_DWORD *)v20 - 2);
        if (!v59)
        {
          __break(0xC471u);
          JUMPOUT(0x19889D194);
        }
        if (v59 - 129 <= 0xFFFFFF7F)
          goto LABEL_247;
        v60 = v59 - 1;
        if (v59 == 1)
        {
          v61 = 0;
        }
        else
        {
          if (*(_BYTE *)(v11 + 5) == 36
            && (v137 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30)) != 0
            && (v138 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28), v137 == *(_QWORD *)(v138 + 672))
            && ((v139 = *(_QWORD *)(v138 + 2304), (v139 & 1) != 0)
              ? (v140 = (v139 >> 1) & 3)
              : (v140 = *(unsigned __int8 *)(v139 + 4)),
                v140 != 2)
            || !JSC::Structure::holesMustForwardToPrototype((JSC::Structure *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE)), (JSC::JSObject *)v11))
          {
            v141 = (_OWORD *)((char *)v20 + 8);
            if (v59 > 0x1F)
            {
              for (i = v20;
                    i != (JSC::Butterfly *)((char *)v20 + ((8 * (v59 - 1)) & 0x7FFFFFFE0));
                    i = (JSC::Butterfly *)((char *)i + 32))
              {
                v217 = *v141;
                v218 = v141[1];
                v141 += 2;
                *(_OWORD *)i = v217;
                *((_OWORD *)i + 1) = v218;
              }
              while (i != (JSC::Butterfly *)((char *)v20 + 8 * v60))
              {
                v219 = *(_QWORD *)v141;
                v141 = (_OWORD *)((char *)v141 + 8);
                *(_QWORD *)i = v219;
                i = (JSC::Butterfly *)((char *)i + 8);
              }
            }
            else
            {
              v142 = v59 - 1;
              do
              {
                *((_QWORD *)v141 - 1) = *(_QWORD *)v141;
                v141 = (_OWORD *)((char *)v141 + 8);
                --v142;
              }
              while (v142);
            }
          }
          else
          {
            v201 = 0;
            do
            {
              *((_QWORD *)v20 + v201) = *((_QWORD *)v20 + (v201 + 1));
              ++v201;
            }
            while (v60 != v201);
          }
          v61 = v60;
        }
        memset_pattern16((char *)v20 + 8 * v61, &memset_pattern_268, 8uLL);
        *((_DWORD *)v20 - 2) = v60;
        break;
      case 0xB:
      case 0xD:
        goto LABEL_249;
      default:
        __break(0xC471u);
        JUMPOUT(0x19889E0D8);
    }
    goto LABEL_63;
  }
LABEL_21:
  v22 = *((_DWORD *)v20 - 2);
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x19889D020);
  }
  if (v22 - 129 <= 0xFFFFFF7F)
  {
LABEL_247:
    if ((v18 & 0xEu) <= 9)
      v20 = JSC::JSObject::ensureArrayStorageSlow((JSC::JSObject *)v11, v17, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (__n128)a9);
LABEL_249:
    if ((JSC::JSArray::shiftCountWithArrayStorage((JSC::JSArray *)v11, v17, 0, 1, v20, a6, a7, a8) & 1) != 0)
      goto LABEL_63;
LABEL_250:
    LODWORD(v58) = 0;
LABEL_251:
    v291 = v58;
LABEL_252:
    v290 = v14 - 1;
    if (v291 >= v14 - 1)
    {
LABEL_309:
      v145 = v14;
      while (v145 > v290)
      {
        v146 = v145 - 1;
        if (HIDWORD(v145))
        {
          v171 = *(uint64_t ***)(this + 56);
          if (v145 == 0x100000000)
            JSC::Identifier::from(v171, 0xFFFFFFFFuLL, a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v303);
          else
            JSC::Identifier::from(v171, a2, (double)v146, a3, (uint64_t)a4, a5, a6, a7, a8, &v303);
          LODWORD(v292) = -1;
          WORD2(v292) = 1;
          v147 = (*(uint64_t (**)(unint64_t, uint64_t, WTF::StringImpl *, JSC::JSObject **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) + 0x58))(v11, this, v303, &v292);
          v172 = v303;
          v303 = 0;
          if (v172)
          {
            if (*(_DWORD *)v172 == 2)
            {
              WTF::StringImpl::~StringImpl(v172, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v182, v183, v184, v185, v186, v187, v188, v189);
            }
            else
            {
              *(_DWORD *)v172 -= 2;
            }
          }
        }
        else
        {
          v147 = (*(uint64_t (**)(unint64_t, uint64_t, _QWORD))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0x60))(v11, this, (v145 - 1));
        }
        if (*((_DWORD *)v17 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v17, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        {
          break;
        }
        v145 = v146;
        if ((v147 & 1) == 0)
          goto LABEL_315;
      }
      goto LABEL_63;
    }
    v130 = 8 * v291;
    while (1)
    {
      v131 = v291++;
      v292 = (JSC::JSObject *)v291;
      if (v131 <= 0xFFFFFFFD)
      {
        v132 = *(_QWORD *)(v11 + 8);
        if ((*(_BYTE *)(v11 + 4) & 0xFu) - 8 >= 2)
        {
          switch(*(_BYTE *)(v11 + 4) & 0xF)
          {
            case 0:
            case 1:
              switch(*(_BYTE *)(v11 + 5))
              {
                case '\'':
                case '(':
                  if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
                    goto LABEL_359;
                  v202 = *(_QWORD *)(v132 - 8);
                  if (*(_BYTE *)(v202 + 64) && (v284 = *(_QWORD *)(v202 + 32)) != 0)
                    v203 = *(_QWORD *)(v284 + 32);
                  else
                    v203 = *(_QWORD *)(v202 + 48);
                  v181 = *(_QWORD *)(v11 + 24);
                  v204 = *(_QWORD *)(v11 + 32);
                  if (v181 + v204 > v203)
                    goto LABEL_259;
                  if ((*(_BYTE *)(v11 + 40) & 1) == 0)
                    goto LABEL_536;
                  v154 = v203 - v204;
                  goto LABEL_360;
                case ')':
                  if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(v11, v291))
                    goto LABEL_259;
                  goto LABEL_361;
                case '*':
                case '+':
                  if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
                    goto LABEL_359;
                  v178 = *(_QWORD *)(v132 - 8);
                  if (*(_BYTE *)(v178 + 64) && (v286 = *(_QWORD *)(v178 + 32)) != 0)
                    v179 = *(_QWORD *)(v286 + 32);
                  else
                    v179 = *(_QWORD *)(v178 + 48);
                  v181 = *(_QWORD *)(v11 + 24);
                  v180 = *(_QWORD *)(v11 + 32);
                  if (v180 + 2 * v181 > v179)
                    goto LABEL_259;
                  if ((*(_BYTE *)(v11 + 40) & 1) == 0)
                    goto LABEL_536;
                  if (v291 >= (v179 - v180) >> 1)
                    goto LABEL_259;
                  goto LABEL_361;
                case ',':
                case '-':
                case '.':
                  if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
                    goto LABEL_359;
                  v230 = *(_QWORD *)(v132 - 8);
                  if (*(_BYTE *)(v230 + 64) && (v277 = *(_QWORD *)(v230 + 32)) != 0)
                    v231 = *(_QWORD *)(v277 + 32);
                  else
                    v231 = *(_QWORD *)(v230 + 48);
                  v181 = *(_QWORD *)(v11 + 24);
                  v232 = *(_QWORD *)(v11 + 32);
                  if (v232 + 4 * v181 > v231)
                    goto LABEL_259;
                  if ((*(_BYTE *)(v11 + 40) & 1) == 0)
                    goto LABEL_536;
                  if (v291 >= (v231 - v232) >> 2)
                    goto LABEL_259;
                  goto LABEL_361;
                case '/':
                  if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
                  {
LABEL_359:
                    v154 = *(_QWORD *)(v11 + 24);
LABEL_360:
                    if (v154 > v291)
                    {
LABEL_361:
                      IfProperty = JSC::JSObject::getIndexQuicklyForTypedArray(v11, v291, 0);
                      goto LABEL_258;
                    }
                  }
                  else
                  {
                    v190 = *(_QWORD *)(v132 - 8);
                    if (*(_BYTE *)(v190 + 64) && (v287 = *(_QWORD *)(v190 + 32)) != 0)
                      v191 = *(_QWORD *)(v287 + 32);
                    else
                      v191 = *(_QWORD *)(v190 + 48);
                    v181 = *(_QWORD *)(v11 + 24);
                    v192 = *(_QWORD *)(v11 + 32);
                    if (v192 + 8 * v181 <= v191)
                    {
                      if ((*(_BYTE *)(v11 + 40) & 1) != 0)
                      {
                        if (v291 < (v191 - v192) >> 3)
                          goto LABEL_361;
                      }
                      else
                      {
LABEL_536:
                        if (v181 > v291)
                          goto LABEL_361;
                      }
                    }
                  }
                  break;
                default:
                  goto LABEL_259;
              }
              break;
            case 3:
              break;
            case 4:
            case 5:
              goto LABEL_256;
            case 6:
            case 7:
              if (*(_DWORD *)(v132 - 8) <= v291)
                break;
              a9.i64[0] = *(_QWORD *)(v132 + v130 + 8);
              IfProperty = a9.i64[0] + 0x2000000000000;
              goto LABEL_258;
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
              if (*(_DWORD *)(v132 - 4) <= v291)
                break;
              IfProperty = *(_QWORD *)(v132 + 8 * v131 + 24);
              goto LABEL_258;
            default:
              __break(0xC471u);
              JUMPOUT(0x19889E6E8);
          }
        }
        else
        {
LABEL_256:
          if (*(_DWORD *)(v132 - 8) > v291)
          {
            IfProperty = *(_QWORD *)(v132 + v130 + 8);
LABEL_258:
            if (IfProperty)
              goto LABEL_260;
          }
        }
      }
LABEL_259:
      IfProperty = JSC::JSObject::getIfPropertyExists<unsigned long long>((_BYTE *)v11, (JSC::VM *)this, (const WTF::StringImpl *)&v292, (uint64_t)a4, a5, a6, a7, a8);
LABEL_260:
      v289 = v302;
      if (*((_DWORD *)v302 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v302, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        goto LABEL_63;
      }
      if (IfProperty)
      {
        a2 = *(JSC::JSGlobalObject **)(this + 56);
        if (v131 > 0xFFFFFFFE)
        {
          v292 = 0;
          v293 = v11;
          LODWORD(v294) = -1;
          BYTE4(v294) = BYTE4(v294) & 0xF8 | 1;
          *(_WORD *)((char *)&v294 + 5) = 0;
          HIBYTE(v294) = 1;
          v295 = 0;
          v173 = *(void (**)(unint64_t, uint64_t, WTF::StringImpl *, unint64_t, JSC::JSObject **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) + 0x48);
          if (v131 == 0xFFFFFFFF)
            JSC::Identifier::from((uint64_t **)a2, 0xFFFFFFFFuLL, a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v303);
          else
            JSC::Identifier::from((uint64_t **)a2, a2, (double)v131, a3, (uint64_t)a4, a5, a6, a7, a8, &v303);
          v173(v11, this, v303, IfProperty, &v292);
          v174 = v303;
          v303 = 0;
          if (v174)
          {
            if (*(_DWORD *)v174 == 2)
            {
              WTF::StringImpl::~StringImpl(v174, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
            }
            else
            {
              *(_DWORD *)v174 -= 2;
            }
          }
        }
        else
        {
          v134 = *(_QWORD *)(v11 + 8);
          switch(*(_BYTE *)(v11 + 4) & 0x1F)
          {
            case 0:
            case 1:
              switch(*(_BYTE *)(v11 + 5))
              {
                case '\'':
                  if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
                  {
                    if (*(_QWORD *)(v11 + 24) <= v131)
                      goto LABEL_276;
LABEL_405:
                    if (!(IfProperty >> 49))
                      goto LABEL_276;
                    goto LABEL_406;
                  }
                  v250 = *(_QWORD *)(v134 - 8);
                  if (*(_BYTE *)(v250 + 64) && (v281 = *(_QWORD *)(v250 + 32)) != 0)
                    v251 = *(_QWORD *)(v281 + 32);
                  else
                    v251 = *(_QWORD *)(v250 + 48);
                  v253 = *(_QWORD *)(v11 + 24);
                  v252 = *(_QWORD *)(v11 + 32);
                  if (v253 + v252 > v251)
                    goto LABEL_276;
                  if ((*(_BYTE *)(v11 + 40) & 1) == 0)
                  {
                    if (v253 <= v131)
                      goto LABEL_276;
                    goto LABEL_405;
                  }
                  if (v251 - v252 <= v131 || IfProperty >> 49 == 0)
                    goto LABEL_276;
LABEL_406:
                  if (IfProperty >= 0xFFFE000000000000)
                    goto LABEL_375;
                  v166 = JSC::IntegralTypedArrayAdaptor<signed char,JSC::GenericTypedArrayView<JSC::Int8Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>,(JSC::TypedArrayType)1>::toNativeFromDouble(COERCE_DOUBLE(IfProperty - 0x2000000000000));
LABEL_639:
                  LOBYTE(IfProperty) = v166;
LABEL_375:
                  v156 = *(_QWORD *)(v11 + 16);
                  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                    v156 = (v156 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                  *(_BYTE *)(v156 + v131) = IfProperty;
                  break;
                case '(':
                  if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
                  {
                    if (*(_QWORD *)(v11 + 24) <= v131)
                      goto LABEL_276;
LABEL_373:
                    if (!(IfProperty >> 49))
                      goto LABEL_276;
                    goto LABEL_374;
                  }
                  v238 = *(_QWORD *)(v134 - 8);
                  if (*(_BYTE *)(v238 + 64) && (v279 = *(_QWORD *)(v238 + 32)) != 0)
                    v239 = *(_QWORD *)(v279 + 32);
                  else
                    v239 = *(_QWORD *)(v238 + 48);
                  v241 = *(_QWORD *)(v11 + 24);
                  v240 = *(_QWORD *)(v11 + 32);
                  if (v241 + v240 > v239)
                    goto LABEL_276;
                  if ((*(_BYTE *)(v11 + 40) & 1) == 0)
                  {
                    if (v241 <= v131)
                      goto LABEL_276;
                    goto LABEL_373;
                  }
                  if (v239 - v240 <= v131 || IfProperty >> 49 == 0)
                    goto LABEL_276;
LABEL_374:
                  if (IfProperty >= 0xFFFE000000000000)
                    goto LABEL_375;
                  v166 = JSC::IntegralTypedArrayAdaptor<unsigned char,JSC::GenericTypedArrayView<JSC::Uint8Adaptor>,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>,(JSC::TypedArrayType)2>::toNativeFromDouble(COERCE_DOUBLE(IfProperty - 0x2000000000000));
                  goto LABEL_639;
                case ')':
                  if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(v11, v131)
                    || !(IfProperty >> 49))
                  {
                    goto LABEL_276;
                  }
                  JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setIndexQuickly(v11, v131, IfProperty);
                  goto LABEL_277;
                case '*':
                  if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
                  {
                    if (*(_QWORD *)(v11 + 24) <= v131)
                      goto LABEL_276;
LABEL_410:
                    if (!(IfProperty >> 49))
                      goto LABEL_276;
                    goto LABEL_411;
                  }
                  v254 = *(_QWORD *)(v134 - 8);
                  if (*(_BYTE *)(v254 + 64) && (v282 = *(_QWORD *)(v254 + 32)) != 0)
                    v255 = *(_QWORD *)(v282 + 32);
                  else
                    v255 = *(_QWORD *)(v254 + 48);
                  v257 = *(_QWORD *)(v11 + 24);
                  v256 = *(_QWORD *)(v11 + 32);
                  if (v256 + 2 * v257 > v255)
                    goto LABEL_276;
                  if ((*(_BYTE *)(v11 + 40) & 1) == 0)
                  {
                    if (v257 <= v131)
                      goto LABEL_276;
                    goto LABEL_410;
                  }
                  if (v131 >= (v255 - v256) >> 1 || IfProperty >> 49 == 0)
                    goto LABEL_276;
LABEL_411:
                  if (IfProperty >= 0xFFFE000000000000)
                    goto LABEL_412;
                  v177 = JSC::IntegralTypedArrayAdaptor<short,JSC::GenericTypedArrayView<JSC::Int16Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>,(JSC::TypedArrayType)4>::toNativeFromDouble(COERCE_DOUBLE(IfProperty - 0x2000000000000));
LABEL_641:
                  LOWORD(IfProperty) = v177;
LABEL_412:
                  v167 = *(_QWORD *)(v11 + 16);
                  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                    v167 = (v167 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                  *(_WORD *)(v167 + 2 * v131) = IfProperty;
                  goto LABEL_277;
                case '+':
                  if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
                  {
                    if (*(_QWORD *)(v11 + 24) <= v131)
                      goto LABEL_276;
LABEL_458:
                    if (!(IfProperty >> 49))
                      goto LABEL_276;
                    goto LABEL_459;
                  }
                  v268 = *(_QWORD *)(v134 - 8);
                  if (*(_BYTE *)(v268 + 64) && (v285 = *(_QWORD *)(v268 + 32)) != 0)
                    v269 = *(_QWORD *)(v285 + 32);
                  else
                    v269 = *(_QWORD *)(v268 + 48);
                  v271 = *(_QWORD *)(v11 + 24);
                  v270 = *(_QWORD *)(v11 + 32);
                  if (v270 + 2 * v271 > v269)
                    goto LABEL_276;
                  if ((*(_BYTE *)(v11 + 40) & 1) == 0)
                  {
                    if (v271 <= v131)
                      goto LABEL_276;
                    goto LABEL_458;
                  }
                  if (v131 >= (v269 - v270) >> 1 || IfProperty >> 49 == 0)
                    goto LABEL_276;
LABEL_459:
                  if (IfProperty >= 0xFFFE000000000000)
                    goto LABEL_412;
                  v177 = JSC::IntegralTypedArrayAdaptor<unsigned short,JSC::GenericTypedArrayView<JSC::Uint16Adaptor>,JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>,(JSC::TypedArrayType)5>::toNativeFromDouble(COERCE_DOUBLE(IfProperty - 0x2000000000000));
                  goto LABEL_641;
                case ',':
                  if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
                  {
                    if (*(_QWORD *)(v11 + 24) <= v131)
                      goto LABEL_276;
LABEL_346:
                    if (!(IfProperty >> 49))
                      goto LABEL_276;
                    goto LABEL_347;
                  }
                  v223 = *(_QWORD *)(v134 - 8);
                  if (*(_BYTE *)(v223 + 64) && (v276 = *(_QWORD *)(v223 + 32)) != 0)
                    v224 = *(_QWORD *)(v276 + 32);
                  else
                    v224 = *(_QWORD *)(v223 + 48);
                  v226 = *(_QWORD *)(v11 + 24);
                  v225 = *(_QWORD *)(v11 + 32);
                  if (v225 + 4 * v226 > v224)
                    goto LABEL_276;
                  if ((*(_BYTE *)(v11 + 40) & 1) == 0)
                  {
                    if (v226 <= v131)
                      goto LABEL_276;
                    goto LABEL_346;
                  }
                  if (v131 >= (v224 - v225) >> 2 || IfProperty >> 49 == 0)
                    goto LABEL_276;
LABEL_347:
                  if (IfProperty < 0xFFFE000000000000)
                  {
                    v213 = IfProperty - 0x2000000000000;
                    a9.i64[0] = IfProperty - 0x2000000000000;
                    if ((double)(int)COERCE_DOUBLE(IfProperty - 0x2000000000000) == COERCE_DOUBLE(IfProperty - 0x2000000000000))
                    {
                      LODWORD(IfProperty) = (int)COERCE_DOUBLE(IfProperty - 0x2000000000000);
                    }
                    else
                    {
                      v214 = (v213 >> 52) & 0x7FF;
                      v215 = (v213 >> 52) + 1;
                      if ((v214 - 1023) <= 0x53)
                      {
                        v220 = v213 >> (51 - (v213 >> 52));
                        if (v214 > 0x433)
                          LODWORD(v220) = IfProperty << (v214 - 51);
                        v221 = (((1 << v215) - 1) & v220) + (1 << v215);
                        if (v214 >= 0x41F)
                          v222 = v220;
                        else
                          v222 = v221;
                        if ((uint64_t)IfProperty >= 0x2000000000000)
                          LODWORD(IfProperty) = v222;
                        else
                          LODWORD(IfProperty) = -v222;
                      }
                      else
                      {
                        LODWORD(IfProperty) = 0;
                      }
                    }
                  }
                  v153 = *(_QWORD *)(v11 + 16);
                  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                    v153 = (v153 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                  *(_DWORD *)(v153 + 4 * v131) = IfProperty;
                  goto LABEL_277;
                case '-':
                  if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
                  {
                    if (*(_QWORD *)(v11 + 24) <= v131)
                      goto LABEL_276;
LABEL_418:
                    if (!(IfProperty >> 49))
                      goto LABEL_276;
                    goto LABEL_419;
                  }
                  v258 = *(_QWORD *)(v134 - 8);
                  if (*(_BYTE *)(v258 + 64) && (v283 = *(_QWORD *)(v258 + 32)) != 0)
                    v259 = *(_QWORD *)(v283 + 32);
                  else
                    v259 = *(_QWORD *)(v258 + 48);
                  v261 = *(_QWORD *)(v11 + 24);
                  v260 = *(_QWORD *)(v11 + 32);
                  if (v260 + 4 * v261 > v259)
                    goto LABEL_276;
                  if ((*(_BYTE *)(v11 + 40) & 1) == 0)
                  {
                    if (v261 <= v131)
                      goto LABEL_276;
                    goto LABEL_418;
                  }
                  if (v131 >= (v259 - v260) >> 2 || IfProperty >> 49 == 0)
                    goto LABEL_276;
LABEL_419:
                  if (IfProperty >= 0xFFFE000000000000)
                  {
                    v169 = IfProperty;
                  }
                  else
                  {
                    v168 = IfProperty - 0x2000000000000;
                    a9.i64[0] = IfProperty - 0x2000000000000;
                    v169 = (int)COERCE_DOUBLE(IfProperty - 0x2000000000000);
                    if ((double)v169 != COERCE_DOUBLE(IfProperty - 0x2000000000000))
                    {
                      v227 = (v168 >> 52) & 0x7FF;
                      v228 = (v168 >> 52) + 1;
                      if ((v227 - 1023) <= 0x53)
                      {
                        v242 = v168 >> (51 - (v168 >> 52));
                        if (v227 > 0x433)
                          LODWORD(v242) = IfProperty << (v227 - 51);
                        v243 = (((1 << v228) - 1) & v242) + (1 << v228);
                        if (v227 >= 0x41F)
                          v169 = v242;
                        else
                          v169 = v243;
                        if ((uint64_t)IfProperty < 0x2000000000000)
                          v169 = -v169;
                      }
                      else
                      {
                        v169 = 0;
                      }
                    }
                  }
                  v170 = *(_QWORD *)(v11 + 16);
                  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                    v170 = (v170 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                  *(_DWORD *)(v170 + 4 * v131) = v169;
                  goto LABEL_277;
                case '.':
                  if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
                  {
                    if (*(_QWORD *)(v11 + 24) <= v131)
                      goto LABEL_276;
LABEL_364:
                    if (!(IfProperty >> 49))
                      goto LABEL_276;
                    goto LABEL_365;
                  }
                  v233 = *(_QWORD *)(v134 - 8);
                  if (*(_BYTE *)(v233 + 64) && (v278 = *(_QWORD *)(v233 + 32)) != 0)
                    v234 = *(_QWORD *)(v278 + 32);
                  else
                    v234 = *(_QWORD *)(v233 + 48);
                  v236 = *(_QWORD *)(v11 + 24);
                  v235 = *(_QWORD *)(v11 + 32);
                  if (v235 + 4 * v236 > v234)
                    goto LABEL_276;
                  if ((*(_BYTE *)(v11 + 40) & 1) == 0)
                  {
                    if (v236 <= v131)
                      goto LABEL_276;
                    goto LABEL_364;
                  }
                  if (v131 >= (v234 - v235) >> 2 || IfProperty >> 49 == 0)
                    goto LABEL_276;
LABEL_365:
                  v155 = *(_QWORD *)(v11 + 16);
                  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                    v155 = (v155 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                  *(float *)a9.i32 = (float)(int)IfProperty;
                  if (IfProperty <= 0xFFFDFFFFFFFFFFFFLL)
                    *(float *)a9.i32 = COERCE_DOUBLE(IfProperty - 0x2000000000000);
                  *(_DWORD *)(v155 + 4 * v131) = a9.i32[0];
                  goto LABEL_277;
                case '/':
                  if ((*(_BYTE *)(v11 + 40) & 7u) <= 2)
                  {
                    if (*(_QWORD *)(v11 + 24) <= v131)
                      goto LABEL_276;
LABEL_381:
                    if (!(IfProperty >> 49))
                      goto LABEL_276;
                    goto LABEL_382;
                  }
                  v244 = *(_QWORD *)(v134 - 8);
                  if (*(_BYTE *)(v244 + 64) && (v280 = *(_QWORD *)(v244 + 32)) != 0)
                    v245 = *(_QWORD *)(v280 + 32);
                  else
                    v245 = *(_QWORD *)(v244 + 48);
                  v247 = *(_QWORD *)(v11 + 24);
                  v246 = *(_QWORD *)(v11 + 32);
                  if (v246 + 8 * v247 > v245)
                    goto LABEL_276;
                  if ((*(_BYTE *)(v11 + 40) & 1) == 0)
                  {
                    if (v247 <= v131)
                      goto LABEL_276;
                    goto LABEL_381;
                  }
                  if (v131 >= (v245 - v246) >> 3 || IfProperty >> 49 == 0)
                    goto LABEL_276;
LABEL_382:
                  v157 = *(_QWORD *)(v11 + 16);
                  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                    v157 = (v157 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                  *(double *)a9.i64 = (double)(int)IfProperty;
                  if (IfProperty <= 0xFFFDFFFFFFFFFFFFLL)
                    a9.i64[0] = IfProperty - 0x2000000000000;
                  *(_QWORD *)(v157 + 8 * v131) = a9.i64[0];
                  goto LABEL_277;
                default:
                  goto LABEL_276;
              }
              break;
            case 3:
              goto LABEL_276;
            case 4:
            case 5:
              if (*(_DWORD *)(v134 - 4) <= v131)
                goto LABEL_276;
              if (IfProperty > 0xFFFDFFFFFFFFFFFFLL)
              {
LABEL_264:
                if (*(_DWORD *)(v134 - 4) <= v131)
                {
LABEL_276:
                  (*(void (**)(unint64_t, uint64_t, unint64_t, unint64_t, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) + 0x50))(v11, this, v131, IfProperty, 1);
                }
                else
                {
                  *(_QWORD *)(v134 + v130) = IfProperty;
                  if (*(_DWORD *)(v134 - 8) <= v131)
                    *(_DWORD *)(v134 - 8) = v131 + 1;
LABEL_267:
                  if ((IfProperty & 0xFFFE000000000002) == 0
                    && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v11 + 7))
                  {
                    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v11);
                  }
                }
              }
              else
              {
                JSC::JSObject::convertInt32ToDoubleOrContiguousWhilePerformingSetIndex((JSC::JSObject *)v11, a2, v131, IfProperty, a5, a6, a7, a8);
              }
              break;
            case 6:
            case 7:
              if (*(_DWORD *)(v134 - 4) <= v131)
                goto LABEL_276;
              if (IfProperty >> 49)
              {
                *(double *)a9.i64 = (double)(int)IfProperty;
                if (IfProperty <= 0xFFFDFFFFFFFFFFFFLL)
                  a9.i64[0] = IfProperty - 0x2000000000000;
                *(_QWORD *)(v134 + v130) = a9.i64[0];
LABEL_454:
                if (*(_DWORD *)(v134 - 8) <= v131)
                  *(_DWORD *)(v134 - 8) = v131 + 1;
              }
              else
              {
                JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)v11, a2, v131, IfProperty, a5, a6, a7, a8, *(double *)a9.i64);
              }
              break;
            case 8:
            case 9:
              goto LABEL_264;
            case 0xA:
            case 0xB:
              if (*(_DWORD *)(v134 - 4) <= v131)
                goto LABEL_276;
              v136 = v134 + 8 * v131;
              v288 = *(_QWORD *)(v136 + 16);
              *(_QWORD *)(v136 + 16) = IfProperty;
              if ((IfProperty & 0xFFFE000000000002) == 0
                && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v11 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v11);
              }
              if (v288)
                break;
              ++*(_DWORD *)(v134 + 12);
              goto LABEL_454;
            case 0xC:
            case 0xD:
              if (*(_DWORD *)(v134 - 4) <= v131)
                goto LABEL_276;
              v267 = v134 + 8 * v131;
              if (!*(_QWORD *)(v267 + 16))
                goto LABEL_276;
              *(_QWORD *)(v267 + 16) = IfProperty;
              goto LABEL_267;
            default:
              if ((*(_BYTE *)(v11 + 4) & 0x10) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19889D960);
              }
              goto LABEL_276;
          }
        }
LABEL_277:
        if (*((_DWORD *)v289 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v289, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        {
          goto LABEL_63;
        }
      }
      else
      {
        if (v131 > 0xFFFFFFFE)
        {
          v175 = *(uint64_t ***)(this + 56);
          if (v131 == 0xFFFFFFFF)
            JSC::Identifier::from(v175, 0xFFFFFFFFuLL, a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v303);
          else
            JSC::Identifier::from(v175, a2, (double)v131, a3, (uint64_t)a4, a5, a6, a7, a8, &v303);
          LODWORD(v292) = -1;
          WORD2(v292) = 1;
          v135 = (*(uint64_t (**)(unint64_t, uint64_t, WTF::StringImpl *, JSC::JSObject **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) + 0x58))(v11, this, v303, &v292);
          v176 = v303;
          v303 = 0;
          if (v176)
          {
            if (*(_DWORD *)v176 == 2)
            {
              WTF::StringImpl::~StringImpl(v176, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v205, v206, v207, v208, v209, v210, v211, v212);
            }
            else
            {
              *(_DWORD *)v176 -= 2;
            }
          }
        }
        else
        {
          v135 = (*(uint64_t (**)(unint64_t, uint64_t, unint64_t))(16
                                                                                        * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                                                        + 0x60))(v11, this, v131);
        }
        if (*((_DWORD *)v289 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v289, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        {
          goto LABEL_63;
        }
        if ((v135 & 1) == 0)
        {
LABEL_315:
          JSC::throwTypeError(this, &v302, (uint64_t)"Unable to delete property.", 27);
          goto LABEL_63;
        }
      }
      v130 += 8;
      if (v290 == v291)
      {
        v17 = v302;
        goto LABEL_309;
      }
    }
  }
  v23 = v22 - 1;
  if (v22 == 1)
    goto LABEL_59;
  if (*(_BYTE *)(v11 + 5) != 36
    || (v24 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30)) == 0
    || (v25 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28), v24 != *(_QWORD *)(v25 + 672)))
  {
LABEL_29:
    if (*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 9) == 36)
    {
      v27 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28);
      v28 = *(unsigned __int8 *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 8);
      v29 = (v28 >> 1) & 7;
      if ((v28 & 0x10) != 0)
        v29 = ((v28 & 0xE) + 10) >> 1;
      v30 = *(_DWORD *)(v27 + 4 * v29 + 852);
      if (v30)
        v31 = 16 * (v30 & 0xFFFFFFFE);
      else
        v31 = 0;
      if (v31 == 16 * (*(_DWORD *)v11 & 0xFFFFFFFE))
      {
        v32 = *(_QWORD *)(v27 + 2304);
        v33 = (v32 & 1) != 0 ? (v32 >> 1) & 3 : *(unsigned __int8 *)(v32 + 4);
        if (v33 != 2)
          goto LABEL_54;
      }
    }
    else
    {
      LOBYTE(v28) = *(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 8);
    }
    if ((v28 & 0x20) == 0)
    {
      v34 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28);
      if (!v34 || *(_BYTE *)(*(_QWORD *)(v34 + 2048) + 4) != 2)
      {
        v35 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
        if (!v35)
          v35 = *(_QWORD *)(v11 + 16);
        if ((v35 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v35 + 5) < 0x17u)
          goto LABEL_54;
        while ((*(_BYTE *)(v35 + 4) & 0xE) == 0)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 8) & 0x20) != 0)
            break;
          v36 = *(_QWORD *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x28);
          if (v36)
          {
            if (*(_BYTE *)(*(_QWORD *)(v36 + 2048) + 4) == 2)
              break;
          }
          v37 = *(_QWORD *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x30);
          if (!v37)
            v37 = *(_QWORD *)(v35 + 16);
          if ((v37 & 0xFFFE000000000002) == 0)
          {
            v35 = v37;
            if (*(unsigned __int8 *)(v37 + 5) > 0x16u)
              continue;
          }
          goto LABEL_54;
        }
      }
    }
    v58 = 0;
    while (1)
    {
      v72 = v58 + 1;
      v73 = *((_QWORD *)v20 + (v58 + 1));
      if (!v73)
        break;
      *((_QWORD *)v20 + v58++) = v73;
      if (v23 == v72)
        goto LABEL_59;
    }
    if ((v18 & 0xEu) <= 9)
      v20 = JSC::JSObject::ensureArrayStorageSlow((JSC::JSObject *)v11, v17, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (__n128)a9);
    if ((JSC::JSArray::shiftCountWithArrayStorage((JSC::JSArray *)v11, v17, v58, 1, v20, a6, a7, a8) & 1) != 0)
      goto LABEL_63;
    goto LABEL_251;
  }
  v26 = *(_QWORD *)(v25 + 2304);
  if ((v26 & 1) != 0)
  {
    if (((v26 >> 1) & 3) != 2)
      goto LABEL_54;
    goto LABEL_29;
  }
  if (*(_BYTE *)(v26 + 4) == 2)
    goto LABEL_29;
LABEL_54:
  v38 = (int8x16_t *)((char *)v20 + 8);
  if (v22 > 0x1F)
  {
    for (j = *(int8x16_t **)(v11 + 8); j != (int8x16_t *)((char *)v20 + ((8 * (v22 - 1)) & 0x7FFFFFFE0)); j += 2)
    {
      a9 = *v38;
      v55 = v38[1];
      v38 += 2;
      *j = a9;
      j[1] = v55;
    }
    while (j != (int8x16_t *)((char *)v20 + 8 * v23))
    {
      v56 = v38->i64[0];
      v38 = (int8x16_t *)((char *)v38 + 8);
      a9.i64[0] = v56;
      j->i64[0] = v56;
      j = (int8x16_t *)((char *)j + 8);
    }
  }
  else
  {
    if (v23 <= 1)
      v39 = 1;
    else
      v39 = v23;
    do
    {
      v38[-1].i64[1] = v38->i64[0];
      v38 = (int8x16_t *)((char *)v38 + 8);
      --v39;
    }
    while (v39);
  }
LABEL_59:
  *((_QWORD *)v20 + v23) = 0;
  *((_DWORD *)v20 - 2) = v23;
  if (v21 == 9 && v11 && *((_DWORD *)v17 + 190) >= *(unsigned __int8 *)(v11 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v17 + 192, v11);
LABEL_63:
  if (*(_DWORD *)(v10 + 80))
  {
    v77 = *(_DWORD *)(v10 + 80);
    if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v40 = v14 - 1;
  if (*(_BYTE *)(v11 + 5) != 36)
  {
    v292 = 0;
    v293 = v11;
    LODWORD(v294) = -1;
    BYTE4(v294) = BYTE4(v294) & 0xF8 | 1;
    *(_WORD *)((char *)&v294 + 5) = 0;
    HIBYTE(v294) = 1;
    v295 = 0;
    v78 = v40 | 0xFFFE000000000000;
    if ((v40 & 0x80000000) != 0)
      v78 = COERCE__INT64((double)v40) + 0x2000000000000;
    if (v14 >= 0x100000001)
      v79 = COERCE__INT64((double)v40) + 0x2000000000000;
    else
      v79 = v78;
    (*(void (**)(unint64_t, uint64_t, _QWORD, uint64_t, JSC::JSObject **))(16
                                                                                         * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                                                         + 0x48))(v11, this, *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 1768), v79, &v292);
    return IndexQuicklyForTypedArray;
  }
  if (HIDWORD(v40))
  {
    v80 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v80 = 0x1400000002;
    *(_QWORD *)(v80 + 8) = "Invalid array length";
    *(_DWORD *)(v80 + 16) = 4;
    v303 = (WTF::StringImpl *)v80;
    v81 = *(_QWORD *)(this + 128);
    v82 = *(JSC::Heap ***)(this + 56);
    if ((v81 & 1) != 0)
    {
      v143 = *(uint64_t (**)(JSC::JSObject **))(v81 & 0xFFFFFFFFFFFFFFFCLL);
      v144 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v144 = (JSC::JSObject **)(this - 16);
      v292 = *v144;
      v293 = this;
      v294 = this + 128;
      v81 = v143(&v292);
    }
    v83 = JSC::ErrorInstance::create(v82, v81, &v303, 0, 0, 0, 2, 1);
    v90 = (JSC::Exception *)v83;
    if ((v83 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v83 & 0xFFFFFFFE) + 0x4C)))
    {
      v90 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v83, 0, v84, v85, v86, v87, v88);
    }
    JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v90, v89, v84, v85, v86, v87, v88);
    v98 = v303;
    v303 = 0;
    if (v98)
    {
      if (*(_DWORD *)v98 == 2)
      {
        WTF::StringImpl::~StringImpl(v98, v91, v92, v93, v94, v95, v96, v97);
        WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
      }
      else
      {
        *(_DWORD *)v98 -= 2;
      }
    }
    return IndexQuicklyForTypedArray;
  }
  v41 = *(JSC::JSObject **)(this + 56);
  v292 = v41;
  v42 = *(JSC::Butterfly **)(v11 + 8);
  v43 = *(_BYTE *)(v11 + 4);
  if ((v43 & 0x1F) != 9)
  {
    switch(*(_BYTE *)(v11 + 4) & 0x1F)
    {
      case 1:
        if (!(_DWORD)v40)
          return IndexQuicklyForTypedArray;
        if (v40 >> 5 < 0xC35)
        {
          JSC::JSObject::createInitialUndecided((JSC::JSObject *)v11, v41, v40, (__n128)a9);
        }
        else
        {
          if ((v43 & 0xEu) <= 9)
            v42 = JSC::JSObject::ensureArrayStorageSlow((JSC::JSObject *)v11, v41, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (__n128)a9);
LABEL_98:
          JSC::JSArray::setLengthWithArrayStorage(v11, (JSC::JSGlobalObject *)this, v40, 1, v42);
        }
        return IndexQuicklyForTypedArray;
      case 3:
      case 5:
      case 7:
        break;
      case 0xB:
      case 0xD:
        goto LABEL_98;
      case 0x15:
      case 0x17:
      case 0x19:
        if (*((_DWORD *)v42 - 2) == (_DWORD)v40)
          return IndexQuicklyForTypedArray;
        JSC::JSObject::convertFromCopyOnWrite((JSC::JSObject *)v11, v41, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (__n128)a9);
        v42 = *(JSC::Butterfly **)(v11 + 8);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x19889E0BCLL);
    }
  }
  v44 = *((_DWORD *)v42 - 2);
  if (v44 == (_DWORD)v40)
    return IndexQuicklyForTypedArray;
  if (v40 > 0x10000000)
  {
LABEL_328:
    if ((*(_BYTE *)(v11 + 4) & 0xEu) < 0xA)
      v150 = JSC::JSObject::ensureArrayStorageSlow((JSC::JSObject *)v11, v41, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (__n128)a9);
    else
      v150 = *(JSC::Butterfly **)(v11 + 8);
    JSC::JSArray::setLengthWithArrayStorage(v11, (JSC::JSGlobalObject *)this, v40, 1, v150);
    return IndexQuicklyForTypedArray;
  }
  if (v40 >> 5 >= 0xC35)
  {
    if (JSC::JSObject::countElements((JSC::JSObject *)v11) >= v40 >> 3)
    {
      v44 = *((_DWORD *)v42 - 2);
      goto LABEL_116;
    }
    goto LABEL_328;
  }
LABEL_116:
  v63 = v44 - v40;
  if (v44 < v40)
  {
    v126 = *(_QWORD *)(v11 + 8);
    if (*(_DWORD *)(v126 - 4) < v40 || (*(_BYTE *)(v11 + 4) & 0x10) != 0)
    {
      if (!JSC::JSObject::ensureLengthSlow((JSC::JSObject *)v11, v41, v40, (uint64_t)a4, a5, a6, a7, a8, (__n128)a9))
      {
        JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)this, (JSC::JSGlobalObject *)&v292);
        return IndexQuicklyForTypedArray;
      }
      v126 = *(_QWORD *)(v11 + 8);
    }
    if (*(_DWORD *)(v126 - 8) < v40)
      *(_DWORD *)(v126 - 8) = v40;
  }
  else if (v63 > v40 && v63 >= 0x41)
  {
    JSC::JSObject::reallocateAndShrinkButterfly((JSC::JSObject *)v11, v41, v40);
  }
  else
  {
    if ((*(_BYTE *)(v11 + 4) & 0xF) == 7)
    {
      if (v44 > v40)
        memset_pattern16((char *)v42 + 8 * (v44 - 1 - (unint64_t)(v44 - 1 - v40)), &memset_pattern_4, 8 * (v44 - 1 - v40) + 8);
    }
    else if (v44 > v40)
    {
      bzero((char *)v42 + 8 * (v44 - 1 - (unint64_t)(v44 - 1 - v40)), 8 * (v44 - 1 - v40) + 8);
    }
    *((_DWORD *)v42 - 2) = v40;
  }
  return IndexQuicklyForTypedArray;
}

unint64_t JSC::arrayProtoFuncSlice(JSC *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  JSC::Structure *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t SlowCase;
  unint64_t v58;
  unint64_t *v59;
  _DWORD *v60;
  _DWORD *v61;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _DWORD *v73;
  _DWORD *v74;
  __int128 v75;
  unint64_t v76;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  void *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int DirectOffset;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int isArraySlow;
  uint64_t v98;
  JSC::JSGlobalObject *v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  JSC::VM *v106;
  unsigned int v107;
  _BYTE *v108;
  unint64_t v109;
  uint64_t v110;
  JSC::VM *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  uint64_t v124;
  JSC::CallFrame *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  int v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  double v137;
  unint64_t v138;
  double v139;
  WTF::StringImpl *v140;
  int v141;
  _WORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  unint64_t v150;
  WTF::Thread *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __n128 v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int v169;
  uint64_t v170;
  unsigned __int16 *v171;
  uint64_t v172;
  unsigned int v173;
  BOOL v174;
  JSC::VM *v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  int v179;
  uint64_t v180;
  JSC::CallFrame *v181;
  uint64_t v182;
  char OwnStaticPropertySlot;
  JSC::CallFrame *v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  _DWORD *v188;
  _DWORD *v189;
  __int128 v190;
  unint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  JSC::CallFrame *v196;
  int v197;
  _BYTE *v198;
  uint64_t v199;
  unsigned int v200;
  JSC::VM *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  int v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char MustForwardToPrototype;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  JSC::VM *v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t IndexQuickly;
  JSC::VM *v228;
  const WTF::StringImpl *v229;
  uint64_t v230;
  unint64_t v231;
  WTF::AtomStringImpl *v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  BOOL v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  __n128 v241;
  WTF::StringImpl *v242;
  BOOL v243;
  uint64_t v244;
  const WTF::String *v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  WTF::AtomStringImpl *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  WTF::StringImpl *v259;
  unint64_t v260;
  unint64_t v261;
  BOOL v262;
  uint64_t v263;
  const WTF::String *v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  WTF::AtomStringImpl *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  WTF::StringImpl *v278;
  BOOL v279;
  unint64_t v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  void *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  JSC::CallFrame *v307;
  uint64_t v308;
  BOOL v309;
  double v310;
  unsigned __int16 *v311;
  uint64_t v312;
  unsigned int v313;
  uint64_t v314;
  char v315;
  int v316;
  unint64_t UninitializedRestricted;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  unint64_t v323;
  JSC::CallFrame *v324;
  uint64_t v325;
  unsigned int *v326;
  uint64_t v327;
  WTF::StringImpl *Index;
  int v329;
  char v330;
  uint64_t v331;
  uint64_t v332;
  __int128 v333;
  unint64_t v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  _BYTE *v340;
  uint64_t v341;
  JSC::VM *v342;
  unsigned __int16 *v343;
  uint64_t v344;
  unsigned int v345;
  uint64_t v346;
  uint64_t v347;
  char v348;
  int v349;
  unsigned int v350;
  uint64_t v351;
  unsigned __int8 *v352;
  int v353;
  double v354;
  const unsigned __int8 *v355;
  BOOL v356;
  unsigned __int8 *v357;
  uint64_t v358;
  unsigned int v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unsigned __int8 *v369;
  uint64_t v370;
  unsigned int v371;
  JSC::VM *v372;
  uint64_t v373;
  int v374;
  uint64_t v375;
  int v376;
  int v377;
  uint64_t v378;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned __int8 *v380;
  uint64_t v381;
  unsigned int v382;
  uint64_t v383;
  _DWORD *v384;
  JSC::JSArrayBufferView *v385;
  unint64_t v386;
  JSC::VM *v387;
  JSC::CallFrame *v388;
  JSC::VM *v389;
  JSC::VM *v390;
  JSC::VM *v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  JSC::VM *v396;
  _QWORD *v398;
  int v399;
  JSC::JSString *v400;
  WTF::StringImpl *v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  JSC::VM *v405;
  _QWORD v406[2];
  uint64_t v407;
  char v408;
  uint64_t v409;
  uint64_t v410;
  JSC::VM *v411;
  WTF::StringImpl *v412;
  unint64_t v413;
  uint64_t v414;
  _QWORD v415[15];

  v9 = a2;
  v415[13] = *MEMORY[0x1E0C80C00];
  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0)
    goto LABEL_161;
  v12 = *(unsigned __int8 *)(v11 + 5);
  if (v12 - 51 < 6)
  {
    v11 = 10;
LABEL_161:
    v412 = (WTF::StringImpl *)v11;
    v89 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v412, this, (JSC::Structure *)a3, a4, a5, a6, a7, a8);
    goto LABEL_162;
  }
  if (v12 >= 0x17)
  {
    v13 = *((_QWORD *)this + 7);
    goto LABEL_5;
  }
  v89 = JSC::JSCell::toObjectSlow(*((JSC::JSCell **)a2 + 5), (JSC::SymbolObject **)this, a3, (JSC::Symbol *)a4, a5, a6, a7, a8);
LABEL_162:
  v11 = v89;
  if (!v89)
    return 0;
  v13 = *((_QWORD *)this + 7);
  v12 = *(unsigned __int8 *)(v89 + 5);
LABEL_5:
  if (v12 == 36)
  {
    if ((*(_BYTE *)(v11 + 4) & 0xE) != 0)
      v14 = *(_DWORD *)(*(_QWORD *)(v11 + 8) - 8);
    else
      v14 = 0;
    v15 = v14;
    goto LABEL_9;
  }
  if (v12 != 35)
  {
    if (v12 == 33)
    {
      v169 = JSC::DirectArguments::length((JSC::DirectArguments *)v11, this, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      if (v12 != 34)
      {
        v412 = (WTF::StringImpl *)JSC::JSObject::get((unsigned int *)v11, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1768), a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v13 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, v98, a3, a4, a5, a6, a7, a8))
        {
LABEL_447:
          v15 = 0;
          goto LABEL_9;
        }
        v99 = this;
        goto LABEL_171;
      }
      v169 = JSC::ScopedArguments::length((JSC::ScopedArguments *)v11, this, a3, a4, a5, a6, a7, a8);
    }
    v15 = v169;
    goto LABEL_9;
  }
  if ((*(_BYTE *)((16 * *(unsigned int *)v11) | 0x12) & 0x20) != 0)
  {
    v412 = (WTF::StringImpl *)JSC::JSObject::get((unsigned int *)v11, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1768), a4, a5, a6, a7, a8);
    if (*(_DWORD *)(v13 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, v314, a3, a4, a5, a6, a7, a8))
      goto LABEL_447;
  }
  else
  {
    v140 = *(WTF::StringImpl **)(*(_QWORD *)(v11 + 8) - 16);
    v412 = v140;
    if ((unint64_t)v140 >= 0xFFFE000000000000)
    {
      v15 = v140 & ~((int)v140 >> 31);
      goto LABEL_9;
    }
  }
  v99 = this;
LABEL_171:
  v15 = JSC::JSValue::toLength(&v412, v99, a3, a4, a5, a6, a7, a8, (int8x16_t)a9);
LABEL_9:
  if (*((_DWORD *)v10 + 20))
  {
    v100 = *((_DWORD *)v10 + 20);
    if ((v100 & 0x27) != 0 && (v100 & 0x20) == 0)
    {
      v360 = v15;
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v15 = v360;
    }
    if (*((_QWORD *)v10 + 2))
      return 0;
  }
  if (*((_DWORD *)v9 + 8) == 1
    || (v16 = (WTF::StringImpl *)*((_QWORD *)v9 + 6), v412 = v16, v16 == (WTF::StringImpl *)10))
  {
    v18 = 0;
  }
  else if ((unint64_t)v16 < 0xFFFE000000000000)
  {
    v136 = (unint64_t)v16 - 0x2000000000000;
    if (v136 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v185 = v15;
      JSC::JSValue::toNumberSlowCase(&v412, this, a3, a4, a5, a6, a7, a8, (int8x16_t)a9);
      v15 = v185;
    }
    else
    {
      a9.n128_u64[0] = v136;
    }
    a9.n128_f64[0] = trunc(a9.n128_f64[0] + 0.0);
    v137 = (double)v15;
    if (a9.n128_f64[0] < 0.0)
    {
      a9.n128_f64[0] = a9.n128_f64[0] + v137;
      if (a9.n128_f64[0] <= 0.0)
        a9.n128_f64[0] = 0.0;
      v18 = (unint64_t)a9.n128_f64[0];
    }
    else
    {
      v18 = a9.n128_f64[0] <= v137 ? (unint64_t)a9.n128_f64[0] : v15;
    }
  }
  else
  {
    v17 = (int)v16 >= v15 ? v15 : (int)v16;
    v18 = (int)v16 < 0 ? ((int)v16 + v15) & ~((uint64_t)((int)v16 + v15) >> 63) : v17;
  }
  if (*((_DWORD *)v10 + 20))
  {
    v101 = *((_DWORD *)v10 + 20);
    if ((v101 & 0x27) != 0 && (v101 & 0x20) == 0)
    {
      v361 = v18;
      v362 = v15;
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v15 = v362;
      v18 = v361;
    }
    if (*((_QWORD *)v10 + 2))
      return 0;
  }
  if ((unint64_t)(*((int *)v9 + 8) - 3) < 0xFFFFFFFFFFFFFFFELL)
  {
    v19 = (WTF::StringImpl *)*((_QWORD *)v9 + 7);
    v412 = v19;
    if (v19 != (WTF::StringImpl *)10)
    {
      if ((unint64_t)v19 < 0xFFFE000000000000)
      {
        v138 = (unint64_t)v19 - 0x2000000000000;
        if (v138 > 0xFFFBFFFFFFFFFFFFLL)
        {
          v186 = v18;
          v187 = v15;
          JSC::JSValue::toNumberSlowCase(&v412, this, a3, a4, a5, a6, a7, a8, (int8x16_t)a9);
          v15 = v187;
          v18 = v186;
        }
        else
        {
          a9.n128_u64[0] = v138;
        }
        a9.n128_f64[0] = trunc(a9.n128_f64[0] + 0.0);
        v139 = (double)v15;
        if (a9.n128_f64[0] < 0.0)
        {
          a9.n128_f64[0] = a9.n128_f64[0] + v139;
          if (a9.n128_f64[0] <= 0.0)
            a9.n128_f64[0] = 0.0;
          v15 = (unint64_t)a9.n128_f64[0];
        }
        else if (a9.n128_f64[0] <= v139)
        {
          v15 = (unint64_t)a9.n128_f64[0];
        }
      }
      else
      {
        if ((int)v19 >= v15)
          v20 = v15;
        else
          v20 = (int)v19;
        if ((int)v19 < 0)
          v15 = ((int)v19 + v15) & ~((uint64_t)((int)v19 + v15) >> 63);
        else
          v15 = v20;
      }
    }
  }
  if (*((_DWORD *)v10 + 20))
  {
    v102 = *((_DWORD *)v10 + 20);
    if ((v102 & 0x27) != 0 && (v102 & 0x20) == 0)
    {
      v363 = v18;
      v364 = v15;
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v15 = v364;
      v18 = v363;
    }
    if (*((_QWORD *)v10 + 2))
      return 0;
  }
  if (v15 < v18)
    v15 = v18;
  v21 = *((_QWORD *)this + 7);
  v400 = (JSC::JSString *)10;
  if ((v11 & 0xFFFE000000000002) != 0)
    goto LABEL_151;
  v22 = *(unsigned __int8 *)(v11 + 5);
  if (v22 < 0x17)
    goto LABEL_151;
  if (v22 - 36 < 2)
  {
    v23 = 1;
    goto LABEL_36;
  }
  if (v22 == 61)
  {
    v95 = v18;
    v96 = v15;
    isArraySlow = JSC::isArraySlow(this, (JSC::JSGlobalObject *)v11, (JSC::ProxyObject *)a3);
    v15 = v96;
    v18 = v95;
    v23 = isArraySlow;
  }
  else
  {
LABEL_151:
    v23 = 0;
  }
LABEL_36:
  if (*(_DWORD *)(v21 + 80))
  {
    v103 = *(_DWORD *)(v21 + 80);
    if ((v103 & 0x27) != 0 && (v103 & 0x20) == 0)
    {
      v365 = v18;
      v366 = v15;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v15 = v366;
      v18 = v365;
    }
    if (*(_QWORD *)(v21 + 16))
      return 0;
  }
  v24 = v15 - v18;
  v396 = v10;
  if (!v23)
    goto LABEL_48;
  v25 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28);
  v26 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
  if (!v26)
    v26 = *(_QWORD *)(v11 + 16);
  if (v26 == *(_QWORD *)(v25 + 672)
    && ((v27 = *(_QWORD *)(v25 + 2280), (v27 & 1) != 0)
      ? (v28 = (v27 >> 1) & 3)
      : (v28 = *(unsigned __int8 *)(v27 + 4)),
        v28 == 1))
  {
    if ((*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
    {
      v90 = v18;
      v91 = v15;
      DirectOffset = JSC::JSObject::getDirectOffset((_DWORD *)v11, (JSC::VM *)v21, *(_QWORD *)(*(_QWORD *)(v21 + 41952) + 1080), (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
      v15 = v91;
      v18 = v90;
      v29 = DirectOffset == -1;
    }
    else
    {
      v29 = 1;
    }
  }
  else
  {
    v29 = 0;
  }
  if (*(_DWORD *)(v21 + 80))
  {
    v104 = *(_DWORD *)(v21 + 80);
    if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
    {
      v367 = v18;
      v368 = v15;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v15 = v368;
      v18 = v367;
    }
    if (*(_QWORD *)(v21 + 16))
      return 0;
  }
  if (v29)
    goto LABEL_48;
  v392 = v15;
  v394 = v18;
  v105 = JSC::JSObject::get((unsigned int *)v11, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v21 + 41952) + 1080), a4, a5, a6, a7, a8);
  v400 = (JSC::JSString *)v105;
  if (*(_DWORD *)(v21 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v21, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      return 0;
    v105 = (uint64_t)v400;
  }
  if ((v105 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v105 + 5) < 0x17u
    || ((*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v105 & 0xFFFFFFFE)
                                                                                          + 0x4C)
                                                                        + 0x40))(&v412, v105), v105 = (uint64_t)v400, !(_BYTE)v412))
  {
    v15 = v392;
    v18 = v394;
  }
  else
  {
    v15 = v392;
    v18 = v394;
    if (*(JSC **)(16 * (*(_DWORD *)v400 & 0xFFFFFFFE) + 0x28) != this
      && &JSC::ArrayConstructor::s_info == (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v400 & 0xFFFFFFFE) + 0x4C)))
    {
      goto LABEL_48;
    }
  }
  if ((v105 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v105 + 5) < 0x17u)
  {
LABEL_272:
    if (v105 == 10)
      goto LABEL_48;
    LOBYTE(v412) = 0;
    HIDWORD(v413) = 8;
    memset(v415, 0, 72);
    v414 = (uint64_t)&v415[1];
    if (HIDWORD(v24))
    {
      v310 = (double)v24;
    }
    else
    {
      if ((v24 & 0x80000000) == 0)
      {
        v150 = v24 | 0xFFFE000000000000;
        goto LABEL_276;
      }
      v310 = (double)v24;
    }
    v150 = *(_QWORD *)&v310 + 0x2000000000000;
LABEL_276:
    v415[1] = v150;
    LODWORD(v413) = 1;
    v398 = &v415[1];
    v399 = 1;
    v411 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((v105 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v401) = 0;
    }
    else
    {
      v151 = (WTF::Thread *)v105;
      if (*(_BYTE *)(v105 + 5) == 26)
        JSC::JSFunction::getConstructData((uint64_t *)&v401, (uint64_t *)v105, a2);
      else
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v105 & 0xFFFFFFFE)
                                                                                          + 0x4C)
                                                                        + 0x40))(&v401, v105);
      if ((_BYTE)v401)
      {
        v65 = JSC::Interpreter::executeConstruct((JSC::VM *)(*((_QWORD *)this + 7) + 90560), v151, (unsigned __int8 *)&v401, (uint64_t)&v398, v151, v152, v153, v154);
        goto LABEL_281;
      }
    }
    JSC::throwTypeError((unint64_t)this, &v411, (uint64_t)"Species construction did not get a valid constructor", 53);
    v65 = 0;
LABEL_281:
    if (!*(_DWORD *)(v21 + 80)
      || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v21, (uint64_t)v155, v156, v157, v158, v159, v160, v161))
    {
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v413, v155, v156, v157, v158, v159, v160, v161);
      v168 = v392;
      v167 = v394;
      goto LABEL_366;
    }
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v413, v155, v156, v157, v158, v159, v160, v161);
    return 0;
  }
  a3 = *(_QWORD *)(*(_QWORD *)(v21 + 41952) + 2752);
  a9.n128_u64[0] = 0xFFFFFFFF00000000;
  v403 = 0xFFFFFFFF00000000;
  LOBYTE(v407) = 0;
  v408 = 0;
  v409 = 0;
  v410 = 0;
  v405 = 0;
  memset(v406, 0, 13);
  v404 = v105;
  v106 = (JSC::VM *)*((_QWORD *)this + 7);
  v107 = *(unsigned __int8 *)(v105 + 5);
  if (v107 > 0x16)
    goto LABEL_195;
  if (v107 != 2)
    goto LABEL_417;
  v391 = (JSC::VM *)*((_QWORD *)this + 7);
  v324 = (JSC::CallFrame *)a3;
  if (*(_QWORD *)(*((_QWORD *)v106 + 5244) + 1768) == a3)
  {
    v325 = *(_QWORD *)(v105 + 8);
    if ((v325 & 1) != 0)
      v326 = (unsigned int *)(v105 + 16);
    else
      v326 = (unsigned int *)(v325 + 4);
    v327 = *v326;
    if ((v327 & 0x80000000) != 0)
    {
      a9.n128_f64[0] = (double)v327;
      Index = (WTF::StringImpl *)(COERCE__INT64((double)v327) + 0x2000000000000);
    }
    else
    {
      Index = (WTF::StringImpl *)(v327 | 0xFFFE000000000000);
    }
    v329 = 14;
    goto LABEL_470;
  }
  if (a3)
  {
    v339 = *(_DWORD *)(a3 + 16);
    if ((v339 & 0x20) == 0)
    {
      v340 = *(_BYTE **)(a3 + 8);
      v341 = *(unsigned int *)(a3 + 4);
      if ((v339 & 4) != 0)
      {
        if (!(_DWORD)v341)
          goto LABEL_493;
        a3 = *v340 - 48;
        if (a3 > 9 || v341 >= 2 && *v340 == 48)
          goto LABEL_493;
        v380 = v340 + 1;
        v381 = v341 - 1;
        while (v381)
        {
          if (a3 > 0x19999999)
            goto LABEL_493;
          v382 = *v380 - 48;
          if (v382 > 9)
            goto LABEL_493;
          v330 = 0;
          v174 = __CFADD__(v382, 10 * a3);
          a3 = v382 + 10 * (_DWORD)a3;
          ++v380;
          --v381;
          if (v174)
            goto LABEL_471;
        }
      }
      else
      {
        if (!(_DWORD)v341)
          goto LABEL_493;
        a3 = *(unsigned __int16 *)v340 - 48;
        if (a3 > 9 || *(_WORD *)v340 == 48 && v341 > 1)
          goto LABEL_493;
        v343 = (unsigned __int16 *)(v340 + 2);
        v344 = v341 - 1;
        while (v344)
        {
          if (a3 > 0x19999999)
            goto LABEL_493;
          v345 = *v343 - 48;
          if (v345 > 9)
            goto LABEL_493;
          v330 = 0;
          v174 = __CFADD__(v345, 10 * a3);
          a3 = v345 + 10 * (_DWORD)a3;
          ++v343;
          --v344;
          if (v174)
            goto LABEL_471;
        }
      }
      if ((_DWORD)a3 != -1)
      {
        v383 = *(_QWORD *)(v105 + 8);
        v384 = (_DWORD *)((v383 & 1) != 0 ? v105 + 16 : v383 + 4);
        if (*v384 > a3)
        {
          Index = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v105, this, a3, a4, a5, a6, a7, a8, (int8x16_t)a9);
          if (!*((_DWORD *)v391 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v391, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
          {
            v329 = 10;
LABEL_470:
            v401 = Index;
            LODWORD(v403) = v329;
            v405 = 0;
            v330 = 1;
            BYTE1(v406[1]) = 1;
            goto LABEL_471;
          }
        }
      }
    }
  }
LABEL_493:
  v330 = 0;
LABEL_471:
  if (*((_DWORD *)v391 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v391, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    goto LABEL_541;
  v15 = v392;
  v18 = v394;
  a3 = (uint64_t)v324;
  if ((v330 & 1) != 0)
    goto LABEL_265;
LABEL_417:
  v307 = (JSC::CallFrame *)a3;
  v308 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v400, (unint64_t)this);
  if (!v308)
  {
LABEL_541:
    v145 = 10;
    goto LABEL_297;
  }
  v105 = v308;
  v106 = (JSC::VM *)*((_QWORD *)this + 7);
  v15 = v392;
  v18 = v394;
  a3 = (uint64_t)v307;
LABEL_195:
  v108 = (_BYTE *)(v105 + 6);
  v109 = (unint64_t)a3 >> 4;
  v110 = v105;
  if ((*(_BYTE *)(v105 + 6) & 8) == 0)
  {
    v111 = (JSC::VM *)v105;
    do
    {
      v112 = *(_DWORD *)v111 & 0xFFFFFFFE;
      a7 = 16 * v112;
      if (!(_DWORD)v109 || (v109 & ~*(_DWORD *)(16 * v112 + 0x20)) != 0)
        goto LABEL_208;
      v113 = *(_QWORD *)(16 * v112 + 0x58);
      if (!v113)
      {
        v124 = *(_QWORD *)(16 * v112 + 0x40);
        if (!v124 || *(_BYTE *)(v124 + 5) != 1 && *(_DWORD *)(v124 + 80) < 2u)
          goto LABEL_208;
        v125 = (JSC::CallFrame *)a3;
        v386 = v109;
        v387 = v111;
        v126 = v105;
        v127 = a7;
        JSC::Structure::materializePropertyTable((JSC::Structure *)a7, v106, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        a7 = v127;
        v105 = v126;
        v109 = v386;
        v111 = v387;
        a3 = (uint64_t)v125;
        v15 = v392;
        v18 = v394;
        if (!v113)
          goto LABEL_208;
      }
      if (!*(_DWORD *)(v113 + 24))
        goto LABEL_208;
      v114 = *(_QWORD *)(v113 + 16);
      v115 = v114 & 0xFFFFFFFFFFFFFFFELL;
      v116 = *(unsigned int *)(v113 + 8);
      v117 = *(_DWORD *)(a3 + 16);
      if ((v114 & 1) != 0)
      {
        if ((v117 & 0x20) != 0)
          v117 = *(_DWORD *)(a3 + 32);
        v118 = *(_DWORD *)(v113 + 12);
        v119 = (v117 >> 8) & *(_QWORD *)&v118;
        v120 = *(unsigned __int8 *)(v115 + v119);
        if (!*(_BYTE *)(v115 + v119))
          goto LABEL_208;
        v121 = v115 + v116;
        v122 = 1;
        while (1)
        {
          v123 = *(_QWORD *)(v121 + 8 * (v120 - 1));
          if (a3 == (v123 & 0xFFFFFFFFFFFFLL))
            break;
          v119 = ((_DWORD)v119 + v122) & v118;
          v120 = *(unsigned __int8 *)(v115 + v119);
          ++v122;
          if (!*(_BYTE *)(v115 + v119))
            goto LABEL_208;
        }
        a6 = (v123 >> 16) & 0xFF00000000 | HIBYTE(v123);
      }
      else
      {
        if ((v117 & 0x20) != 0)
          v117 = *(_DWORD *)(a3 + 32);
        v128 = *(_DWORD *)(v113 + 12);
        v129 = v128 & (v117 >> 8);
        v130 = *(_DWORD *)(v115 + 4 * v129);
        if (!v130)
          goto LABEL_208;
        v131 = v115 + 4 * v116;
        v132 = 1;
        while (1)
        {
          v133 = (v130 - 1);
          if (a3 == *(_QWORD *)(v131 + 16 * v133))
            break;
          v129 = (v129 + v132) & v128;
          v130 = *(_DWORD *)(v115 + 4 * v129);
          ++v132;
          if (!v130)
            goto LABEL_208;
        }
        a6 = *(unsigned int *)(v131 + 16 * v133 + 8) | ((unint64_t)*(unsigned __int8 *)(v131 + 16 * v133 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v146 = (uint64_t)v111 + 16;
          v147 = a6 << 32;
        }
        else
        {
          v146 = *((_QWORD *)v111 + 1) - 8;
          v147 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v146 + (v147 >> 29));
        if ((a4 & 0xFFFE000000000002) != 0)
          goto LABEL_264;
        v148 = *(unsigned __int8 *)(a4 + 5);
        if (v148 == 5)
        {
          v184 = (JSC::CallFrame *)a3;
          JSC::JSObject::fillGetterPropertySlot((unsigned int *)v111, (uint64_t)v106, (uint64_t)&v401, a4, SHIDWORD(a6), a6);
          a3 = (uint64_t)v184;
LABEL_315:
          v15 = v392;
          v18 = v394;
          goto LABEL_265;
        }
        if (v148 != 6)
        {
LABEL_264:
          v401 = (WTF::StringImpl *)a4;
          v405 = v111;
          v403 = __PAIR64__(a6, HIDWORD(a6));
          LOWORD(v406[1]) = 257;
          goto LABEL_265;
        }
        v192 = *(_DWORD *)(a7 + 16) & 3;
        v193 = *(_QWORD *)(a4 + 16);
        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
        {
          v195 = *(_QWORD *)(a4 + 24);
          v194 = *(_QWORD *)(a4 + 32);
          v401 = *(WTF::StringImpl **)(a4 + 8);
          v402 = v193;
          LODWORD(v403) = HIDWORD(a6);
          v405 = v111;
          BYTE1(v406[1]) = 3;
          if (v192 != 2)
            LOBYTE(v406[1]) = 1;
          BYTE3(v406[1]) = 1;
          v409 = v195;
          v410 = v194;
          goto LABEL_315;
        }
        v401 = *(WTF::StringImpl **)(a4 + 8);
        v402 = v193;
        LODWORD(v403) = HIDWORD(a6);
        v405 = v111;
        BYTE1(v406[1]) = 3;
        v15 = v392;
        v18 = v394;
        if (v192 == 2)
          goto LABEL_265;
LABEL_444:
        LOBYTE(v406[1]) = 1;
        goto LABEL_265;
      }
LABEL_208:
      if ((*v108 & 0x20) != 0)
      {
        v181 = (JSC::CallFrame *)a3;
        v182 = v105;
        v389 = (JSC::VM *)a7;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v111, v106, a3, (uint64_t)&v401);
        a7 = (uint64_t)v389;
        v15 = v392;
        v105 = v182;
        a3 = (uint64_t)v181;
        v18 = v394;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_265;
      }
      v110 = *(_QWORD *)(a7 + 48);
      if (!v110)
        v110 = *((_QWORD *)v111 + 2);
      if ((v110 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v110 + 5) < 0x17u)
      {
        if (!a3)
          goto LABEL_258;
        v141 = *(_DWORD *)(a3 + 16);
        if ((v141 & 0x20) != 0)
          goto LABEL_258;
        v142 = *(_WORD **)(a3 + 8);
        v143 = *(unsigned int *)(a3 + 4);
        if ((v141 & 4) == 0)
        {
          if ((_DWORD)v143)
          {
            v144 = (unsigned __int16)*v142 - 48;
            if (v144 <= 9)
            {
              v170 = v105;
              v388 = (JSC::CallFrame *)a3;
              if (*v142 != 48 || v143 <= 1)
              {
                v171 = v142 + 1;
                v172 = v143 - 1;
                v145 = 10;
                while (v172)
                {
                  if (v144 <= 0x19999999)
                  {
                    v173 = *v171 - 48;
                    if (v173 <= 9)
                    {
                      v174 = __CFADD__(v173, 10 * v144);
                      v144 = v173 + 10 * (_DWORD)v144;
                      ++v171;
                      --v172;
                      if (!v174)
                        continue;
                    }
                  }
                  goto LABEL_267;
                }
                if ((_DWORD)v144 != -1)
                  goto LABEL_300;
                v342 = v10;
LABEL_497:
                v145 = 10;
                v10 = v342;
                goto LABEL_297;
              }
            }
          }
LABEL_258:
          v145 = 10;
          goto LABEL_267;
        }
        v388 = (JSC::CallFrame *)a3;
        v342 = v10;
        if (!(_DWORD)v143)
          goto LABEL_497;
        v144 = *(unsigned __int8 *)v142 - 48;
        if (v144 > 9)
          goto LABEL_497;
        v170 = v105;
        if (v143 >= 2 && *(_BYTE *)v142 == 48)
          goto LABEL_497;
        v357 = (unsigned __int8 *)v142 + 1;
        v358 = v143 - 1;
        v15 = v392;
        v18 = v394;
        while (v358)
        {
          if (v144 > 0x19999999)
            goto LABEL_497;
          v359 = *v357 - 48;
          if (v359 > 9)
            goto LABEL_497;
          v174 = __CFADD__(v359, 10 * v144);
          v144 = v359 + 10 * (_DWORD)v144;
          ++v357;
          --v358;
          v145 = 10;
          v10 = v342;
          if (v174)
            goto LABEL_267;
        }
        if ((_DWORD)v144 == -1)
          goto LABEL_497;
LABEL_300:
        v175 = (JSC::VM *)*((_QWORD *)this + 7);
        while (2)
        {
          v176 = 16 * (*(_DWORD *)v170 & 0xFFFFFFFE);
          v178 = (*(uint64_t (**)(uint64_t, JSC *, uint64_t, WTF::StringImpl **))(16
                                                                                        * *(unsigned int *)(v176 + 0x4C)
                                                                                        + 0x70))(v170, this, v144, &v401);
          if (*((_DWORD *)v175 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v175, (uint64_t)a2, v177, a4, a5, a6, a7, a8))
          {
LABEL_630:
            v145 = 10;
            v10 = v396;
            goto LABEL_297;
          }
          v18 = v394;
          v10 = v396;
          a3 = (uint64_t)v388;
          v15 = v392;
          if ((v178 & 1) != 0)
            goto LABEL_265;
          if (BYTE2(v406[1]) == 3)
          {
            if (BYTE4(v406[1]))
              goto LABEL_630;
            v179 = *(unsigned __int8 *)(v170 + 5);
            if (v179 != 61)
              goto LABEL_305;
          }
          else
          {
            v179 = *(unsigned __int8 *)(v170 + 5);
            if (v179 == 61)
            {
              if (BYTE2(v406[1]) == 1)
                goto LABEL_630;
            }
            else
            {
LABEL_305:
              if ((v179 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v170, (uint64_t)a2, (uint64_t)v388, a4, a5, a6, a7, a8) <= v144)
              {
                goto LABEL_630;
              }
            }
          }
          if ((*(_WORD *)(v176 + 12) & 0x800) == 0 || BYTE2(v406[1]) == 3)
          {
            v180 = *(_QWORD *)(16 * (*(_DWORD *)v170 & 0xFFFFFFFE) + 0x30);
            if (!v180)
              v180 = *(_QWORD *)(v170 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v170 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v180 = (*(uint64_t (**)(uint64_t, JSC *, uint64_t))(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v170 & 0xFFFFFFFE)
                                                                                          + 0x4C)
                                                                        + 0xB0))(v170, this, a3);
            }
            else
            {
              v180 = *(_QWORD *)(16 * (*(_DWORD *)v170 & 0xFFFFFFFE) + 0x30);
              if (!v180)
                v180 = *(_QWORD *)(v170 + 16);
            }
            if (*((_DWORD *)v175 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v175, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
            {
              goto LABEL_630;
            }
          }
          if ((v180 & 0xFFFE000000000002) != 0)
            goto LABEL_630;
          v170 = v180;
          v145 = 10;
          v18 = v394;
          v10 = v396;
          v15 = v392;
          if (*(unsigned __int8 *)(v180 + 5) <= 0x16u)
            goto LABEL_267;
          continue;
        }
      }
      v108 = (_BYTE *)(v110 + 6);
      v111 = (JSC::VM *)v110;
    }
    while ((*(_BYTE *)(v110 + 6) & 8) == 0);
  }
  v385 = (JSC::JSArrayBufferView *)v105;
  v390 = (JSC::VM *)v110;
  v196 = (JSC::CallFrame *)a3;
  if (a3)
  {
    v197 = *(_DWORD *)(a3 + 16);
    if ((v197 & 0x20) == 0)
    {
      v198 = *(_BYTE **)(a3 + 8);
      v199 = *(unsigned int *)(a3 + 4);
      if ((v197 & 4) != 0)
      {
        if ((_DWORD)v199)
        {
          v200 = *v198 - 48;
          if (v200 <= 9 && (v199 < 2 || *v198 != 48))
          {
            v369 = v198 + 1;
            v370 = v199 - 1;
            while (v370)
            {
              if (v200 <= 0x19999999)
              {
                v371 = *v369 - 48;
                if (v371 <= 9)
                {
                  v174 = __CFADD__(v371, 10 * v200);
                  v200 = v371 + 10 * v200;
                  ++v369;
                  --v370;
                  if (!v174)
                    continue;
                }
              }
              goto LABEL_338;
            }
LABEL_608:
            if (v200 != -1)
            {
              v372 = (JSC::VM *)*((_QWORD *)this + 7);
              while (1)
              {
                v373 = 16 * (*(_DWORD *)v385 & 0xFFFFFFFE);
                v374 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v373 + 0x4C) + 0x70))();
                v376 = v374;
                if (*((_DWORD *)v372 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v372, (uint64_t)a2, v375, a4, a5, a6, a7, a8);
                  v18 = v394;
                  v10 = v396;
                  v15 = v392;
                  if (((hasExceptionsAfterHandlingTraps | v376) & 1) != 0)
                  {
                    a3 = (uint64_t)v196;
                    if (!hasExceptionsAfterHandlingTraps)
                      goto LABEL_265;
                    goto LABEL_258;
                  }
                }
                else
                {
                  v18 = v394;
                  v10 = v396;
                  v15 = v392;
                  a3 = (uint64_t)v196;
                  if ((v374 & 1) != 0)
                    goto LABEL_265;
                }
                if (BYTE2(v406[1]) == 3)
                {
                  if (BYTE4(v406[1]))
                    goto LABEL_630;
                  v377 = *((unsigned __int8 *)v385 + 5);
                  if (v377 == 61)
                    goto LABEL_615;
                }
                else
                {
                  v377 = *((unsigned __int8 *)v385 + 5);
                  if (v377 == 61)
                  {
                    if (BYTE2(v406[1]) == 1)
                      goto LABEL_630;
                    goto LABEL_615;
                  }
                }
                if ((v377 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length(v385, (uint64_t)a2, a3, a4, a5, a6, a7, a8) <= v200)
                {
                  goto LABEL_630;
                }
LABEL_615:
                if ((*(_WORD *)(v373 + 12) & 0x800) == 0 || BYTE2(v406[1]) == 3)
                {
                  v378 = *(_QWORD *)(16 * (*(_DWORD *)v385 & 0xFFFFFFFE) + 0x30);
                  if (!v378)
                    v378 = *((_QWORD *)v385 + 2);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v385 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v378 = (*(uint64_t (**)(JSC::JSArrayBufferView *, JSC *, uint64_t))(16
                                                                                               * *(unsigned int *)(16 * (*(_DWORD *)v385 & 0xFFFFFFFE) + 0x4C)
                                                                                               + 0xB0))(v385, this, a3);
                  }
                  else
                  {
                    v378 = *(_QWORD *)(16 * (*(_DWORD *)v385 & 0xFFFFFFFE) + 0x30);
                    if (!v378)
                      v378 = *((_QWORD *)v385 + 2);
                  }
                  if (*((_DWORD *)v372 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v372, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_630;
                  }
                }
                if ((v378 & 0xFFFE000000000002) != 0)
                  goto LABEL_630;
                v385 = (JSC::JSArrayBufferView *)v378;
                v145 = 10;
                v18 = v394;
                v10 = v396;
                v15 = v392;
                if (*(unsigned __int8 *)(v378 + 5) <= 0x16u)
                  goto LABEL_267;
              }
            }
          }
        }
      }
      else if ((_DWORD)v199)
      {
        v200 = *(unsigned __int16 *)v198 - 48;
        if (v200 <= 9 && (*(_WORD *)v198 != 48 || v199 <= 1))
        {
          v311 = (unsigned __int16 *)(v198 + 2);
          v312 = v199 - 1;
          while (v312)
          {
            if (v200 <= 0x19999999)
            {
              v313 = *v311 - 48;
              if (v313 <= 9)
              {
                v174 = __CFADD__(v313, 10 * v200);
                v200 = v313 + 10 * v200;
                ++v311;
                --v312;
                if (!v174)
                  continue;
              }
            }
            goto LABEL_338;
          }
          goto LABEL_608;
        }
      }
    }
  }
LABEL_338:
  v201 = (JSC::VM *)*((_QWORD *)this + 7);
  while (1)
  {
    v202 = *(_DWORD *)v390 & 0xFFFFFFFE;
    v203 = 16 * v202;
    if ((*((_BYTE *)v390 + 6) & 8) == 0)
      break;
    v348 = (*(uint64_t (**)(JSC::VM *, JSC *, JSC::CallFrame *, WTF::StringImpl **))(16
                                                                                             * *(unsigned int *)(16 * v202 + 0x4C)
                                                                                             + 0x68))(v390, this, v196, &v401);
    if (*((_DWORD *)v201 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v201, (uint64_t)a2, v347, a4, a5, a6, a7, a8))
      goto LABEL_630;
    v18 = v394;
    v10 = v396;
    v15 = v392;
    a3 = (uint64_t)v196;
    if ((v348 & 1) != 0)
      goto LABEL_265;
    if (BYTE2(v406[1]) == 3)
    {
      if (BYTE4(v406[1]))
        goto LABEL_630;
      v349 = *((unsigned __int8 *)v390 + 5);
      if (v349 != 61)
      {
LABEL_518:
        if (!v196)
          goto LABEL_345;
        if ((v349 - 50) < 0xFFFFFFF5)
          goto LABEL_345;
        v350 = *((_DWORD *)v196 + 4);
        if ((v350 & 0x20) != 0)
          goto LABEL_345;
        v351 = *((unsigned int *)v196 + 1);
        if (!(_DWORD)v351)
          goto LABEL_345;
        v352 = (unsigned __int8 *)*((_QWORD *)v196 + 1);
        if ((v350 & 4) == 0)
        {
          v353 = *(unsigned __int16 *)v352;
          if ((_DWORD)v351 == 1)
            goto LABEL_524;
          if (v353 == 45)
          {
            v353 = *((unsigned __int16 *)v352 + 1);
            goto LABEL_532;
          }
          if ((v353 - 48) >= 0xA && ((_DWORD)v351 != 8 || v353 != 73))
          {
LABEL_547:
            if ((_DWORD)v351 != 3 || v353 != 78)
              goto LABEL_345;
          }
LABEL_538:
          v386 = v386 & 0xFFFFFF0000000000 | v351 | ((unint64_t)((v350 >> 2) & 1) << 32);
          JSC::jsToNumber(v352, v386);
          WTF::numberToString(&v412, v354);
          v356 = WTF::equal((unint64_t)v196, (unint64_t)&v412, v355);
          v18 = v394;
          v10 = v396;
          v15 = v392;
          if (v356)
            goto LABEL_258;
          goto LABEL_345;
        }
        v353 = *v352;
        if ((_DWORD)v351 == 1)
        {
LABEL_524:
          v18 = v394;
          v10 = v396;
          v15 = v392;
          if ((v353 - 48) < 0xA)
            goto LABEL_258;
          goto LABEL_345;
        }
        if (v353 == 45)
        {
          v353 = v352[1];
LABEL_532:
          if ((v353 - 48) < 0xA)
          {
            if ((_DWORD)v351 == 2)
              goto LABEL_630;
            goto LABEL_538;
          }
          if ((_DWORD)v351 != 9)
            goto LABEL_345;
        }
        else
        {
          if ((v353 - 48) < 0xA)
            goto LABEL_538;
          if ((_DWORD)v351 != 8)
            goto LABEL_547;
        }
        if (v353 != 73)
          goto LABEL_345;
        goto LABEL_538;
      }
    }
    else
    {
      v349 = *((unsigned __int8 *)v390 + 5);
      if (v349 != 61)
        goto LABEL_518;
      v18 = v394;
      v10 = v396;
      v15 = v392;
      if (BYTE2(v406[1]) == 1)
        goto LABEL_258;
    }
LABEL_345:
    if ((*(_WORD *)(v203 + 12) & 0x800) != 0)
    {
      v206 = *(_DWORD *)v390;
      if (BYTE2(v406[1]) != 3)
      {
        v346 = 16 * (v206 & 0xFFFFFFFE);
        if ((*(_WORD *)(v346 + 12) & 0x800) != 0)
        {
          v207 = (*(uint64_t (**)(JSC::VM *, JSC *))(16 * *(unsigned int *)(v346 + 76) + 0xB0))(v390, this);
        }
        else
        {
          v207 = *(_QWORD *)(v346 + 48);
          if (!v207)
            v207 = *((_QWORD *)v390 + 2);
        }
        if (*((_DWORD *)v201 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v201, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_630;
        }
        goto LABEL_349;
      }
    }
    else
    {
      v206 = *(_DWORD *)v390;
    }
    v207 = *(_QWORD *)(16 * (v206 & 0xFFFFFFFE) + 0x30);
    if (!v207)
      v207 = *((_QWORD *)v390 + 2);
LABEL_349:
    if ((v207 & 0xFFFE000000000002) != 0)
      goto LABEL_630;
    v390 = (JSC::VM *)v207;
    v145 = 10;
    v18 = v394;
    v10 = v396;
    v15 = v392;
    if (*(unsigned __int8 *)(v207 + 5) <= 0x16u)
      goto LABEL_267;
  }
  if (!(_DWORD)v109
    || (v109 & ~*(_DWORD *)(16 * v202 + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * v202), v201, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v204)|| (v412 = v196, v205 = JSC::PropertyTable::get(v204, (uint64_t *)&v412), a6 = v205, (_DWORD)v205 == -1))
  {
    if ((*((_BYTE *)v390 + 6) & 0x20) != 0)
    {
      v315 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v390, v201, (unint64_t)v196, (uint64_t)&v401);
      a3 = (uint64_t)v196;
      v18 = v394;
      v10 = v396;
      v15 = v392;
      if ((v315 & 1) != 0)
        goto LABEL_265;
    }
    goto LABEL_345;
  }
  a5 = HIDWORD(v205);
  if ((int)v205 <= 63)
  {
    v304 = (uint64_t)v390 + 16;
    v305 = v205 << 32;
  }
  else
  {
    v304 = *((_QWORD *)v390 + 1) - 8;
    v305 = 0x3F00000000 - (v205 << 32);
  }
  a4 = *(_QWORD *)(v304 + (v305 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_414:
    v401 = (WTF::StringImpl *)a4;
    v405 = v390;
    v403 = __PAIR64__(v205, HIDWORD(v205));
    LOWORD(v406[1]) = 257;
    goto LABEL_415;
  }
  v306 = *(unsigned __int8 *)(a4 + 5);
  if (v306 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v390, (uint64_t)v201, (uint64_t)&v401, a4, SHIDWORD(v205), v205);
    goto LABEL_415;
  }
  if (v306 != 6)
    goto LABEL_414;
  v335 = *(_DWORD *)(v203 + 16) & 3;
  v336 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v401 = *(WTF::StringImpl **)(a4 + 8);
    v402 = v336;
    LODWORD(v403) = HIDWORD(v205);
    v15 = v392;
    v405 = v390;
    BYTE1(v406[1]) = 3;
    v18 = v394;
    v10 = v396;
    a3 = (uint64_t)v196;
    if (v335 == 2)
      goto LABEL_265;
    goto LABEL_444;
  }
  v338 = *(_QWORD *)(a4 + 24);
  v337 = *(_QWORD *)(a4 + 32);
  v401 = *(WTF::StringImpl **)(a4 + 8);
  v402 = v336;
  LODWORD(v403) = HIDWORD(v205);
  v405 = v390;
  BYTE1(v406[1]) = 3;
  if (v335 != 2)
    LOBYTE(v406[1]) = 1;
  BYTE3(v406[1]) = 1;
  v409 = v338;
  v410 = v337;
LABEL_415:
  v18 = v394;
  v10 = v396;
  v15 = v392;
  a3 = (uint64_t)v196;
LABEL_265:
  if (BYTE1(v406[1]) == 1)
  {
    v145 = (uint64_t)v401;
    goto LABEL_267;
  }
  if (BYTE1(v406[1]) == 2)
    v145 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v401, this, a3, a4, a5, a6, a7, a8);
  else
    v145 = JSC::PropertySlot::customGetter((uint64_t)&v401, *((JSC::VM **)this + 7), (WTF::StringImpl *)a3);
LABEL_297:
  v15 = v392;
  v18 = v394;
LABEL_267:
  if (v408)
  {
    v149 = *(_DWORD *)(v407 + 4);
    if (!v149)
    {
      __break(0xC471u);
      JUMPOUT(0x1988A032CLL);
    }
    *(_DWORD *)(v407 + 4) = v149 - 1;
  }
  v400 = (JSC::JSString *)v145;
  if (*(_DWORD *)(v21 + 80))
  {
    v309 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v21, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v15 = v392;
    v18 = v394;
    if (!v309)
    {
      v145 = (uint64_t)v400;
      goto LABEL_271;
    }
    return 0;
  }
LABEL_271:
  v105 = v145;
  if (v145 != 2)
    goto LABEL_272;
LABEL_48:
  v30 = (JSC::Structure *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE));
  if ((*((_WORD *)v30 + 6) & 0x100) != 0)
  {
    if (*(_BYTE *)(v11 + 5) != 33)
      goto LABEL_362;
    v78 = v18;
    v79 = v15;
    v80 = JSC::DirectArguments::fastSlice(this, (JSC::JSGlobalObject *)v11, (JSC::DirectArguments *)v18, v24, a5, a6, a7, a8);
LABEL_157:
    v15 = v79;
    v18 = v78;
    v65 = v80;
LABEL_131:
    if (!v65)
      goto LABEL_362;
    return v65;
  }
  v31 = *((_QWORD *)this + 7);
  v32 = *(_BYTE *)(v11 + 4) & 0xE;
  v33 = v32 | 1;
  if ((v32 | 1) != 9)
  {
    switch(v33)
    {
      case 3:
        if (v24)
          goto LABEL_362;
        v78 = v18;
        v79 = v15;
        v80 = JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, a5, a6, a7, a8, a9);
        goto LABEL_157;
      case 5:
      case 7:
        break;
      case 11:
        if (v24 >> 5 > 0xC34)
          goto LABEL_362;
        v217 = v18;
        v218 = v15;
        MustForwardToPrototype = JSC::Structure::holesMustForwardToPrototype(v30, (JSC::JSObject *)v11);
        v15 = v218;
        v18 = v217;
        if ((MustForwardToPrototype & 1) != 0 || v218 > *(unsigned int *)(*(_QWORD *)(v11 + 8) - 4))
          goto LABEL_362;
        v316 = *((_DWORD *)this + 227);
        a2 = v316 ? (JSC::JSGlobalObject *)(16 * (v316 & 0xFFFFFFFE)) : 0;
        if ((*((_BYTE *)a2 + 8) & 0xEu) > 9)
          goto LABEL_362;
        v412 = (WTF::StringImpl *)v31;
        UninitializedRestricted = JSC::JSArray::tryCreateUninitializedRestricted((uint64_t *)&v412, (unint64_t)a2, v24, a4, a5, a6, a7, a8);
        v65 = UninitializedRestricted;
        if (UninitializedRestricted)
        {
          v318 = *(_QWORD *)(UninitializedRestricted + 8);
          v319 = *(_QWORD *)(v11 + 8) + 8 * v217 + 16;
          v320 = (8 * v24) & 0x7FFFFFFF8;
          if (v320 > 0xF0)
          {
            v331 = v320 + v318;
            v332 = ((8 * v24) & 0x7FFFFFFE0) + v318;
            while (v318 != v332)
            {
              a9 = *(__n128 *)v319;
              v333 = *(_OWORD *)(v319 + 16);
              v319 += 32;
              *(__n128 *)v318 = a9;
              *(_OWORD *)(v318 + 16) = v333;
              v318 += 32;
            }
            while (v318 != v331)
            {
              v334 = *(_QWORD *)v319;
              v319 += 8;
              a9.n128_u64[0] = v334;
              *(_QWORD *)v318 = v334;
              v318 += 8;
            }
          }
          else if (v320)
          {
            v321 = v320 >> 3;
            if (v321 <= 1)
              v321 = 1;
            v322 = 8 * v321;
            do
            {
              v323 = *(_QWORD *)v319;
              v319 += 8;
              *(_QWORD *)v318 = v323;
              v318 += 8;
              v322 -= 8;
            }
            while (v322);
          }
        }
        if (*((_BYTE *)v412 + 755))
          __dmb(0xAu);
        v18 = v217;
        v15 = v218;
        goto LABEL_131;
      default:
        goto LABEL_362;
    }
  }
  if (v24 >> 5 > 0xC34)
    goto LABEL_362;
  if (*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 9) != 36)
  {
    LOBYTE(v35) = *(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 8);
    goto LABEL_61;
  }
  v34 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28);
  v35 = *(unsigned __int8 *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 8);
  v36 = (v35 >> 1) & 7;
  if ((v35 & 0x10) != 0)
    v36 = ((v35 & 0xE) + 10) >> 1;
  v37 = *(_DWORD *)(v34 + 4 * v36 + 852);
  if (v37)
    v38 = 16 * (v37 & 0xFFFFFFFE);
  else
    v38 = 0;
  if ((JSC::Structure *)v38 == v30)
  {
    v39 = *(_QWORD *)(v34 + 2304);
    v40 = (v39 & 1) != 0 ? (v39 >> 1) & 3 : *(unsigned __int8 *)(v39 + 4);
    if (v40 != 2)
    {
LABEL_76:
      if (v15 > *(unsigned int *)(*(_QWORD *)(v11 + 8) - 4))
        goto LABEL_362;
      v45 = *(_DWORD *)((char *)this + 2 * v32 + 892);
      v46 = v45 ? 16 * (v45 & 0xFFFFFFFE) : 0;
      v47 = *(_BYTE *)(v46 + 8) & 0xE;
      if (v47 > 9)
        goto LABEL_362;
      v48 = *(unsigned __int16 *)(v46 + 24);
      if (v48 == 65534)
      {
        v50 = 0;
      }
      else
      {
        if (v48 == 0xFFFF)
          v49 = *(_DWORD *)(*(_QWORD *)(v46 + 64) + 84);
        else
          v49 = *(unsigned __int16 *)(v46 + 24);
        if (v49 >= 64)
        {
          if ((v49 - 63) >= 5)
          {
            v87 = (v49 - 64) | ((v49 - 64) >> 1) | (((v49 - 64) | ((v49 - 64) >> 1)) >> 2);
            v88 = v87 | (v87 >> 4) | ((v87 | (v87 >> 4)) >> 8);
            v50 = (v88 | HIWORD(v88)) + 1;
          }
          else
          {
            v50 = 4;
          }
        }
        else
        {
          v50 = 0;
        }
        if (v48 == 0xFFFF)
          v48 = *(_DWORD *)(*(_QWORD *)(v46 + 64) + 84);
        if (v48 >= 64)
        {
          if ((v48 - 63) >= 5)
          {
            v85 = (v48 - 64) | ((v48 - 64) >> 1) | (((v48 - 64) | ((v48 - 64) >> 1)) >> 2);
            v86 = v85 | (v85 >> 4) | ((v85 | (v85 >> 4)) >> 8);
            v51 = 8 * ((v86 | HIWORD(v86)) + 1) + 8;
          }
          else
          {
            v51 = 40;
          }
          goto LABEL_93;
        }
      }
      v51 = 8;
LABEL_93:
      if (v24 <= 3)
        v52 = 3;
      else
        v52 = v24;
      if (!(_DWORD)v24)
        v52 = 5;
      v53 = v51 + 8 * v52;
      if (v53 > 0x50)
      {
        if (v53 <= 0x1F60)
          v53 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep + (((v53 + 15) >> 2) & 0xFFFFFFFFCLL));
      }
      else
      {
        v53 = (v53 + 15) & 0x3FFFFFFFF0;
      }
      v54 = v53 - v51;
      a3 = ((v53 - v51) & 0x7FFFFFFF8) + 8 * v50 + 8;
      if ((unint64_t)a3 <= 0x1F60
        && (v55 = *(_QWORD *)(v31 + (((((v53 - v51) & 0x7FFFFFFF8) + 8 * v50 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
      {
        v56 = *(unsigned int *)(v55 + 60);
        SlowCase = *(_QWORD *)(v55 + 24);
        if (SlowCase >= *(_QWORD *)(v55 + 32))
        {
          SlowCase = *(_QWORD *)(v55 + 40);
          if ((SlowCase & 1) == 0)
          {
            v135 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v55 + 48);
            *(_QWORD *)(v55 + 32) = SlowCase + HIDWORD(v135);
            *(_QWORD *)(v55 + 40) = SlowCase + (int)v135;
            *(_QWORD *)(v55 + 24) = SlowCase + v56;
            goto LABEL_105;
          }
          v393 = v15;
          v395 = v18;
          JSC::sanitizeStackForVM((JSC *)v31, a2, a3, a4, a5, a6, a7, a8);
          SlowCase = JSC::LocalAllocator::allocateSlowCase(v55, v31 + 192, v56, 0, 1, v214, v215, v216);
          v15 = v393;
          v18 = v395;
        }
        else
        {
          *(_QWORD *)(v55 + 24) = SlowCase + v56;
        }
      }
      else
      {
        v93 = v18;
        v94 = v15;
        SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v31 + 6648, *((JSC **)this + 7), a3, 0, a5, a6, a7, a8);
        v15 = v94;
        v18 = v93;
      }
      if (!SlowCase)
      {
        v65 = 0;
LABEL_129:
        if (*(_BYTE *)(v31 + 755))
          __dmb(0xAu);
        goto LABEL_131;
      }
LABEL_105:
      v58 = v54 >> 3;
      if ((v54 >> 3) >= 0x10000001)
      {
        __break(0xC471u);
        JUMPOUT(0x19889F694);
      }
      v59 = (unint64_t *)(v31 + 37584);
      v60 = (_DWORD *)(SlowCase + 8 * v50);
      v61 = v60 + 2;
      *v60 = v24;
      v60[1] = v58;
      if (v47 == 6)
      {
        if (v58 <= v24)
        {
LABEL_110:
          v65 = *v59;
          if (*v59 >= *(_QWORD *)(v31 + 37592))
          {
            v65 = *(_QWORD *)(v31 + 37600);
            if ((v65 & 1) != 0)
            {
              v208 = v18;
              v209 = v15;
              JSC::sanitizeStackForVM((JSC *)v31, a2, a3, a4, a5, a6, a7, a8);
              v213 = JSC::LocalAllocator::allocateSlowCase(v31 + 37560, v31 + 192, 16, 0, 0, v210, v211, v212);
              v15 = v209;
              v18 = v208;
              v65 = v213;
              goto LABEL_112;
            }
            v134 = *(_QWORD *)(v65 + 8) ^ *(_QWORD *)(v31 + 37608);
            *(_QWORD *)(v31 + 37592) = v65 + HIDWORD(v134);
            *(_QWORD *)(v31 + 37600) = v65 + (int)v134;
          }
          *v59 = v65 + 16;
LABEL_112:
          *(_DWORD *)v65 = 0;
          v66 = *(_DWORD *)(v46 + 8);
          *(_DWORD *)v65 = v46 >> 4;
          *(_DWORD *)(v65 + 4) = v66;
          *(_QWORD *)(v65 + 8) = v61;
          if (*(_BYTE *)(v31 + 755))
          {
            __dmb(0xAu);
            v61 = *(_DWORD **)(v65 + 8);
          }
          v67 = 8 * v24;
          v68 = (8 * v24) & 0x7FFFFFFF8;
          v69 = *(_QWORD *)(v11 + 8) + 8 * v18;
          if (v33 == 7)
          {
            if (v68 > 0xF0)
            {
              v188 = (_DWORD *)((char *)v61 + v68);
              v189 = (_DWORD *)((char *)v61 + (v67 & 0x7FFFFFFE0));
              while (v61 != v189)
              {
                a9 = *(__n128 *)v69;
                v190 = *(_OWORD *)(v69 + 16);
                v69 += 32;
                *(__n128 *)v61 = a9;
                *((_OWORD *)v61 + 1) = v190;
                v61 += 8;
              }
              while (v61 != v188)
              {
                v191 = *(_QWORD *)v69;
                v69 += 8;
                a9.n128_u64[0] = v191;
                *(_QWORD *)v61 = v191;
                v61 += 2;
              }
            }
            else if (v68)
            {
              v82 = v68 >> 3;
              if (v82 <= 1)
                v82 = 1;
              v83 = 8 * v82;
              do
              {
                v84 = *(_QWORD *)v69;
                v69 += 8;
                *(_QWORD *)v61 = v84;
                v61 += 2;
                v83 -= 8;
              }
              while (v83);
            }
          }
          else if (v68 > 0xF0)
          {
            v73 = (_DWORD *)((char *)v61 + v68);
            v74 = (_DWORD *)((char *)v61 + (v67 & 0x7FFFFFFE0));
            while (v61 != v74)
            {
              a9 = *(__n128 *)v69;
              v75 = *(_OWORD *)(v69 + 16);
              v69 += 32;
              *(__n128 *)v61 = a9;
              *((_OWORD *)v61 + 1) = v75;
              v61 += 8;
            }
            while (v61 != v73)
            {
              v76 = *(_QWORD *)v69;
              v69 += 8;
              a9.n128_u64[0] = v76;
              *(_QWORD *)v61 = v76;
              v61 += 2;
            }
          }
          else if (v68)
          {
            v70 = v68 >> 3;
            if (v70 <= 1)
              v70 = 1;
            v71 = 8 * v70;
            do
            {
              v72 = *(_QWORD *)v69;
              v69 += 8;
              *(_QWORD *)v61 = v72;
              v61 += 2;
              v71 -= 8;
            }
            while (v71);
          }
          goto LABEL_129;
        }
        v81 = (void *)(SlowCase + 8 * (v24 + v50) + 8);
        v63 = v18;
        v64 = v15;
        memset_pattern16(v81, &memset_pattern_263, 8 * (v58 + ~(_DWORD)v24) + 8);
      }
      else
      {
        if (v58 <= v24)
          goto LABEL_110;
        v62 = (void *)(SlowCase + 8 * (v24 + v50) + 8);
        v63 = v18;
        v64 = v15;
        bzero(v62, 8 * (v58 + ~(_DWORD)v24) + 8);
      }
      v15 = v64;
      v18 = v63;
      goto LABEL_110;
    }
  }
LABEL_61:
  if ((v35 & 0x20) != 0)
    goto LABEL_362;
  v41 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28);
  if (v41)
  {
    if (*(_BYTE *)(*(_QWORD *)(v41 + 2048) + 4) == 2)
      goto LABEL_362;
  }
  v42 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
  if (!v42)
    v42 = *(_QWORD *)(v11 + 16);
  if ((v42 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v42 + 5) < 0x17u)
    goto LABEL_76;
  while ((*(_BYTE *)(v42 + 4) & 0xE) == 0)
  {
    if ((*(_BYTE *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 8) & 0x20) != 0)
      break;
    v43 = *(_QWORD *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0x28);
    if (v43)
    {
      if (*(_BYTE *)(*(_QWORD *)(v43 + 2048) + 4) == 2)
        break;
    }
    v44 = *(_QWORD *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0x30);
    if (!v44)
      v44 = *(_QWORD *)(v42 + 16);
    if ((v44 & 0xFFFE000000000002) == 0)
    {
      v42 = v44;
      if (*(unsigned __int8 *)(v44 + 5) > 0x16u)
        continue;
    }
    goto LABEL_76;
  }
LABEL_362:
  v10 = v396;
  if (*((_DWORD *)v396 + 20))
  {
    v260 = v18;
    v261 = v15;
    v262 = JSC::VM::hasExceptionsAfterHandlingTraps(v396, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v15 = v261;
    v18 = v260;
    if (v262)
      return 0;
  }
  if (HIDWORD(v24))
  {
    v263 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v263 = 0x2800000002;
    *(_QWORD *)(v263 + 8) = "Length exceeded the maximum array length";
    *(_DWORD *)(v263 + 16) = 4;
    v412 = (WTF::StringImpl *)v263;
    v265 = JSC::createRangeError((unint64_t)this, &v412, v264);
    JSC::VM::throwException(v396, this, v265, v266, v267, v268, v269, v270);
    v278 = v412;
    v412 = 0;
    if (v278)
    {
      if (*(_DWORD *)v278 == 2)
      {
        WTF::StringImpl::~StringImpl(v278, v271, v272, v273, v274, v275, v276, v277);
        WTF::fastFree(v296, v297, v298, v299, v300, v301, v302, v303);
      }
      else
      {
        *(_DWORD *)v278 -= 2;
      }
    }
    return 0;
  }
  v168 = v15;
  v220 = v18;
  v65 = JSC::constructEmptyArray((unint64_t)this, 0, v24, 0, a5, a6, a7, a8, a9);
  if (!*((_DWORD *)v396 + 20))
  {
    v167 = v220;
    goto LABEL_366;
  }
  v279 = JSC::VM::hasExceptionsAfterHandlingTraps(v396, v221, v222, v223, v162, v163, v164, v165);
  v167 = v220;
  if (v279)
    return 0;
LABEL_366:
  if (v168 > v167)
  {
    v224 = 0;
    v225 = v167 - v168;
    while (1)
    {
      v226 = v167;
      v412 = (JSC::VM *)((char *)v224 + v167);
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v11, (unint64_t)v224 + v167);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::getIfPropertyExists<unsigned long long>((_BYTE *)v11, this, (const WTF::StringImpl *)&v412, v230, v162, v163, v164, v165);
      v231 = IndexQuickly;
      v167 = v226;
      if (*((_DWORD *)v10 + 20))
      {
        v237 = JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v228, (uint64_t)v229, v230, v162, v163, v164, v165);
        v167 = v226;
        if (v237)
          return 0;
      }
      if (v231)
      {
        if ((unint64_t)v224 > 0xFFFFFFFE)
        {
          v238 = *((_QWORD *)this + 7);
          if (v224 == (JSC::VM *)0xFFFFFFFFLL)
            JSC::Identifier::from(*((uint64_t ***)this + 7), 0xFFFFFFFFuLL, v229, v230, v162, v163, v164, v165, (int **)&v401);
          else
            JSC::Identifier::from(*((uint64_t ***)this + 7), v228, (double)(unint64_t)v224, v229, v230, v162, v163, v164, v165, &v401);
          v412 = 0;
          v413 = v65;
          v414 = 0x1000000FFFFFFFFLL;
          v241.n128_u64[0] = 0x100000001000000;
          v415[0] = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v65, v238, (unint64_t)v401, v231, 0, (uint64_t)&v412, v239, v240, v241);
          v242 = v401;
          v401 = 0;
          if (v242)
          {
            if (*(_DWORD *)v242 == 2)
            {
              WTF::StringImpl::~StringImpl(v242, v232, v233, v234, v162, v163, v164, v165);
              WTF::fastFree(v280, v281, v282, v283, v284, v285, v286, v287);
            }
            else
            {
              *(_DWORD *)v242 -= 2;
            }
          }
        }
        else
        {
          JSC::JSObject::putDirectIndex(v65, (uint64_t)this, v224, v231, 0, 2, v164, v165, v166.n128_f64[0]);
        }
        v167 = v226;
        if (*((_DWORD *)v10 + 20))
        {
          v243 = JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v232, v233, v234, v162, v163, v164, v165);
          v167 = v226;
          if (v243)
            return 0;
        }
      }
      v224 = (JSC::VM *)((char *)v224 + 1);
      if (!(JSC::VM *)((char *)v224 + v225))
      {
        if (*(_BYTE *)(v65 + 5) != 36)
          goto LABEL_380;
        if (HIDWORD(v24))
        {
          v244 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v244 = 0x1400000002;
          *(_QWORD *)(v244 + 8) = "Invalid array length";
          *(_DWORD *)(v244 + 16) = 4;
          v412 = (WTF::StringImpl *)v244;
          v246 = JSC::createRangeError((unint64_t)this, &v412, v245);
          JSC::VM::throwException(v10, this, v246, v247, v248, v249, v250, v251);
          v259 = v412;
          v412 = 0;
          if (v259)
          {
            if (*(_DWORD *)v259 == 2)
            {
              WTF::StringImpl::~StringImpl(v259, v252, v253, v254, v255, v256, v257, v258);
              WTF::fastFree(v288, v289, v290, v291, v292, v293, v294, v295);
            }
            else
            {
              *(_DWORD *)v259 -= 2;
            }
          }
          return v65;
        }
        goto LABEL_378;
      }
    }
  }
  v24 = 0;
  if (*(_BYTE *)(v65 + 5) == 36)
  {
LABEL_378:
    JSC::JSArray::setLength((JSC::JSArray *)v65, (JSC::VM **)this, v24, 1, v162, v163, v164, v165, v166);
  }
  else
  {
LABEL_380:
    v412 = 0;
    v413 = v65;
    LODWORD(v414) = -1;
    BYTE4(v414) = BYTE4(v414) & 0xF8 | 1;
    *(_WORD *)((char *)&v414 + 5) = 0;
    HIBYTE(v414) = 1;
    v415[0] = 0;
    v235 = v24 | 0xFFFE000000000000;
    if ((v24 & 0x80000000) != 0)
      v235 = COERCE__INT64((double)v24) + 0x2000000000000;
    if (HIDWORD(v24))
      v236 = COERCE__INT64((double)v24) + 0x2000000000000;
    else
      v236 = v235;
    (*(void (**)(unint64_t, JSC *, _QWORD, uint64_t, WTF::StringImpl **))(16
                                                                                         * *(unsigned int *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE) + 0x4C)
                                                                                         + 0x48))(v65, this, *(_QWORD *)(*((_QWORD *)v10 + 5244) + 1768), v236, &v412);
  }
  return v65;
}

uint64_t JSC::arrayProtoFuncSort(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  JSC::Heap *v24;
  unint64_t SlowCase;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF *v43;
  _QWORD *v44;
  const WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  JSC::Structure *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  WTF *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  WTF *v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  JSC::Exception *v84;
  WTF *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v89;
  WTF *v91;
  uint64_t v92;
  WTF::Thread *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  JSC::VM *v97;
  uint64_t v98;
  __n128 v99;
  JSC::ModuleProgramExecutable *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)();
  int *v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  int *v111;
  WTF *v112;
  uint64_t v113;
  WTF *v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  WTF *v134;
  WTF *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  WTF *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  BOOL v145;
  int v146;
  unint64_t v147;
  int8x16_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  JSC::MarkedVectorBase *v153;
  JSC::ScopedArguments *v154;
  uint64_t v155;
  JSC::MarkedVectorBase *v156;
  WTF *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  unint64_t v180;
  WTF *v181;
  unint64_t v182;
  WTF *v183;
  uint64_t v184;
  WTF *v185;
  unint64_t v186;
  unint64_t v187;
  WTF *v188;
  uint64_t v189;
  BOOL v190;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  WTF *v201;
  uint64_t v202;
  BOOL v203;
  WTF *v206;
  uint64_t v207;
  WTF *v208;
  WTF *v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  BOOL v216;
  int v217;
  unint64_t v218;
  int8x16_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  BOOL v227;
  int v228;
  unint64_t v229;
  int8x16_t v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  unint64_t v234;
  WTF *v235;
  uint64_t *v236;
  uint64_t v237;
  WTF *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  BOOL v253;
  uint64_t v254;
  unsigned int v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  unsigned int v264;
  unsigned int v265;
  _QWORD *v267;
  uint64_t v268;
  WTF *v269;
  int v270;
  uint64_t v271;
  uint64_t (*v272)(void);
  int v273;
  unint64_t v274;
  WTF *v275;
  uint64_t v276;
  unint64_t v277;
  double v278;
  int v279;
  int v280;
  uint64_t IfProperty;
  int v282;
  BOOL v283;
  int v284;
  uint64_t v285;
  uint64_t (*v286)(void);
  int v287;
  WTF *v288;
  WTF::AtomStringImpl *v289;
  const WTF::String *v290;
  uint64_t v291;
  uint64_t v292;
  int8x16_t v293;
  WTF *v294;
  unint64_t v295;
  int *v296;
  JSC::VM *v297;
  int *v298;
  unint64_t *v299;
  int *v300;
  WTF::StringImpl *v301;
  WTF::StringImpl *v302;
  unint64_t v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  void *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  WTF *v319;
  JSC::JSGlobalObject *v320;
  uint64_t v321;
  WTF::StringImpl **v322;
  WTF::StringImpl *v323;
  unint64_t v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t (*v332)(JSC::JSObject **);
  JSC::JSObject **v333;
  unint64_t v334;
  unint64_t OutOfMemoryError;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  double v341;
  JSC::Exception *v342;
  int v343;
  uint64_t v344;
  uint64_t (*v345)(void);
  int v346;
  int v347;
  JSC::VM *v348;
  unint64_t v349;
  unsigned int *v350;
  uint64_t v351;
  int v352;
  int v353;
  void *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  WTF *v361;
  unint64_t v362;
  unint64_t v363;
  WTF *v364;
  uint64_t v365;
  BOOL v366;
  void *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  WTF *v376;
  unint64_t v377;
  unint64_t v378;
  WTF *v379;
  uint64_t v380;
  BOOL v381;
  double v384;
  JSC::JSObject *v385;
  double v386;
  uint64_t v387;
  unsigned int v388;
  int v389;
  uint64_t *v390;
  JSC::VM *v392;
  uint64_t v393;
  WTF *v394;
  uint64_t v395;
  unsigned int v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  unsigned int v405;
  unsigned int v406;
  int v408;
  unint64_t v409;
  unint64_t v410;
  WTF::StringImpl *v411;
  unsigned int *v412;
  int v413;
  unsigned int v414;
  int v415;
  unsigned int v416;
  unsigned int *v417;
  unsigned int v418;
  int v419;
  unsigned int v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unsigned int *v424;
  int v425;
  unsigned int v426;
  int v427;
  unsigned int v428;
  unint64_t v429;
  unint64_t v430;
  JSC::VM *v431;
  char appended;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  uint64_t **v439;
  char v440;
  void (*v441)(JSC::ScopedArguments *, JSC::JSGlobalObject *, uint64_t *, uint64_t, WTF **);
  WTF::StringImpl *v442;
  uint64_t **v443;
  WTF::StringImpl *v444;
  unint64_t v445;
  void *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  void *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  void *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  int8x16_t v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  uint64_t v474;
  char *v475;
  WTF *v476;
  uint64_t *v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  WTF *v481;
  unsigned int v482;
  unint64_t v483;
  unint64_t v484;
  int *v485;
  WTF *v486;
  WTF *v487;
  WTF *v488;
  JSC::ScopedArguments *v489;
  unint64_t v490;
  JSC::VM *v491;
  unint64_t v492;
  JSC::JSGlobalObject *v493;
  JSC::MarkedVectorBase *v494;
  unint64_t v495;
  JSC::VM *v496;
  unint64_t v497;
  unint64_t v498;
  WTF::StringImpl *v499;
  uint64_t v500;
  WTF *v501;
  uint64_t *v502;
  _BYTE v503[512];
  JSC::JSObject *v504;
  uint64_t v505;
  WTF *v506;
  uint64_t *v507;
  _BYTE v508[512];
  WTF *v509;
  uint64_t v510;
  _OWORD *v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  WTF *v516;
  uint64_t v517;
  char v518;
  uint64_t v519;
  WTF *v520;
  _OWORD v521[4];
  uint64_t v522;
  JSC::ModuleProgramExecutable *v523;
  const WTF::StringImpl *v524;
  uint64_t (*v525)(void);
  unsigned int v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  JSC::VM *v530;
  uint64_t *v531;
  int *v532;
  int *v533[2];

  v10 = (uint64_t)this;
  v11 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v51 = 1;
    v12 = 10;
    goto LABEL_23;
  }
  v12 = *((_QWORD *)a2 + 6);
  if (v12 == 10)
  {
    v51 = 1;
LABEL_23:
    v40 = *((_QWORD *)a2 + 5);
    if ((v40 & 0xFFFE000000000002) == 0)
    {
      v52 = *(unsigned __int8 *)(v40 + 5);
      if (v52 - 51 >= 6)
      {
        if (v52 > 0x16)
        {
LABEL_26:
          if (*(_DWORD *)(v11 + 80))
          {
            v347 = *(_DWORD *)(v11 + 80);
            if ((v347 & 0x27) != 0 && (v347 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v11 + 16))
              return 0;
          }
          v53 = *(unsigned __int8 *)(v40 + 5);
          v493 = (JSC::JSGlobalObject *)v10;
          v489 = (JSC::ScopedArguments *)v40;
          v495 = v12;
          if (v53 == 36)
          {
            if ((*(_BYTE *)(v40 + 4) & 0xE) != 0)
              v54 = *(_DWORD *)(*(_QWORD *)(v40 + 8) - 8);
            else
              v54 = 0;
            v55 = v54;
            goto LABEL_31;
          }
          v348 = *(JSC::VM **)(v10 + 56);
          switch(v53)
          {
            case '#':
              if ((*(_BYTE *)((16 * *(unsigned int *)v40) | 0x12) & 0x20) == 0)
              {
                v385 = *(JSC::JSObject **)(*(_QWORD *)(v40 + 8) - 16);
                v504 = v385;
                if ((unint64_t)v385 >= 0xFFFE000000000000)
                {
                  v55 = v385 & ~((int)v385 >> 31);
                  goto LABEL_619;
                }
LABEL_551:
                v55 = JSC::JSValue::toLength(&v504, v493, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
LABEL_619:
                v10 = (uint64_t)v493;
                v40 = (uint64_t)v489;
LABEL_620:
                v12 = v495;
LABEL_31:
                if (*(_DWORD *)(v11 + 80))
                {
                  v352 = *(_DWORD *)(v11 + 80);
                  if ((v352 & 0x27) != 0 && (v352 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  if (*(_QWORD *)(v11 + 16))
                    return 0;
                }
                if (v55 <= 1)
                  return v40;
                v483 = v55;
                v491 = (JSC::VM *)v11;
                LOBYTE(v504) = 0;
                v485 = (int *)&v505;
                v505 = 0x4000000000;
                v506 = (WTF *)v508;
                bzero(&v507, 0x208uLL);
                LOBYTE(v499) = 0;
                v500 = 0x4000000000;
                v488 = (WTF *)v503;
                v501 = (WTF *)v503;
                bzero(&v502, 0x208uLL);
                v56 = *(_QWORD *)(v10 + 56);
                v527 = v56;
                v57 = *(unsigned __int8 *)(v40 + 5);
                v486 = (WTF *)v508;
                if (v57 != 36)
                  goto LABEL_430;
                v58 = (JSC::Structure *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE));
                if (*((_BYTE *)v58 + 9) == 36)
                {
                  v59 = *(_QWORD *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x28);
                  v60 = *(unsigned __int8 *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 8);
                  v61 = (v60 >> 1) & 7;
                  if ((v60 & 0x10) != 0)
                    v61 = ((v60 & 0xE) + 10) >> 1;
                  v62 = *(_DWORD *)(v59 + 4 * v61 + 852);
                  if (v62)
                    v63 = 16 * (v62 & 0xFFFFFFFE);
                  else
                    v63 = 0;
                  if ((JSC::Structure *)v63 == v58)
                  {
                    v64 = *(_QWORD *)(v59 + 2304);
                    v65 = (v64 & 1) != 0 ? (v64 >> 1) & 3 : *(unsigned __int8 *)(v64 + 4);
                    if (v65 != 2)
                    {
LABEL_48:
                      v67 = *(_BYTE *)(v40 + 4) & 0xF;
                      if ((v67 - 8) < 2)
                      {
                        v68 = *(uint64_t **)(v40 + 8);
                        v69 = *((unsigned int *)v68 - 2);
                        v70 = (WTF *)v508;
                        if (v69 < 0x41)
                          goto LABEL_50;
                        if ((v69 & 0x80000000) != 0
                          || (WTF::tryFastMalloc((WTF *)(8 * v69), &v509), (v70 = v509) == 0))
                        {
                          LOBYTE(v504) = 1;
                        }
                        else
                        {
                          v199 = v505;
                          if ((_DWORD)v505)
                          {
                            v200 = 0;
                            do
                            {
                              v201 = v506;
                              *((_QWORD *)v70 + v200) = *((_QWORD *)v506 + v200);
                              v202 = *((_QWORD *)v201 + v200);
                              if (v507)
                                v203 = 0;
                              else
                                v203 = (v202 & 0xFFFE000000000002) == 0;
                              if (v203 && v202 != 0)
                              {
                                v410 = v202 - 16;
                                if ((v202 & 8) == 0)
                                  v410 = v202 & 0xFFFFFFFFFFFFC000 | 8;
                                v507 = (uint64_t *)(*(_QWORD *)v410 + 560);
                                v531 = (uint64_t *)v485;
                                WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v507, (uint64_t *)&v531, v194, v195, v196, v197, v198, (uint64_t)&v509);
                                v199 = v505;
                              }
                              ++v200;
                            }
                            while (v200 < v199);
                          }
                          if (v506 != v486 && v506 != 0)
                            WTF::fastFree((unint64_t)v506, v44, v193, v194, v195, v196, v197, v198);
                          v506 = v70;
                          HIDWORD(v505) = v69;
                          if (!(_BYTE)v504)
                          {
                            if (v70 != v486 && !v507)
                            {
                              v507 = (uint64_t *)(v56 + 560);
                              v531 = (uint64_t *)v485;
                              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add((uint64_t *)(v56 + 560), (uint64_t *)&v531, v194, v195, v196, v197, v198, (uint64_t)&v509);
                              v70 = v506;
                            }
LABEL_50:
                            LODWORD(v505) = v69;
                            bzero(v70, 8 * v69);
                            v71 = 0;
                            if ((_DWORD)v69)
                            {
                              v480 = 0;
                              do
                              {
                                v73 = *v68++;
                                v72 = v73;
                                if (v73)
                                {
                                  if (v72 == 10)
                                    ++v480;
                                  else
                                    *((_QWORD *)v70 + v71++) = v72;
                                }
                                --v69;
                              }
                              while (v69);
                            }
                            else
                            {
                              v480 = 0;
                            }
                            if (!(_BYTE)v504)
                            {
                              v74 = 9;
LABEL_58:
                              v75 = v506;
                              v10 = (uint64_t)v493;
                              goto LABEL_59;
                            }
                          }
                        }
                        v10 = (uint64_t)v493;
LABEL_518:
                        OutOfMemoryError = JSC::createOutOfMemoryError(v10, (JSC::JSGlobalObject *)v44);
                        v342 = (JSC::Exception *)OutOfMemoryError;
                        if ((OutOfMemoryError & 0xFFFE000000000002) != 0
                          || &JSC::Exception::s_info != (char **)(16
                                                                * *(unsigned int *)(16
                                                                                  * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                                  + 0x4C)))
                        {
                          v342 = (JSC::Exception *)JSC::Exception::create(v56, (JSC::VM *)OutOfMemoryError, 0, v336, v337, v338, v339, v340);
                        }
                        JSC::VM::throwException((JSC::VM *)v56, (JSC::JSGlobalObject *)v10, v342, v341, v336, v337, v338, v339, v340);
                        goto LABEL_521;
                      }
                      if ((v67 - 4) < 2)
                      {
                        v236 = *(uint64_t **)(v40 + 8);
                        v237 = *((unsigned int *)v236 - 2);
                        if (v237 < 0x41)
                        {
                          v238 = (WTF *)v508;
                          goto LABEL_345;
                        }
                        if ((v237 & 0x80000000) == 0)
                        {
                          WTF::tryFastMalloc((WTF *)(8 * v237), &v509);
                          v361 = v509;
                          if (v509)
                          {
                            v362 = v505;
                            if ((_DWORD)v505)
                            {
                              v363 = 0;
                              do
                              {
                                v364 = v506;
                                *((_QWORD *)v361 + v363) = *((_QWORD *)v506 + v363);
                                v365 = *((_QWORD *)v364 + v363);
                                if (v507)
                                  v366 = 0;
                                else
                                  v366 = (v365 & 0xFFFE000000000002) == 0;
                                if (v366 && v365 != 0)
                                {
                                  v429 = v365 - 16;
                                  if ((v365 & 8) == 0)
                                    v429 = v365 & 0xFFFFFFFFFFFFC000 | 8;
                                  v507 = (uint64_t *)(*(_QWORD *)v429 + 560);
                                  v531 = (uint64_t *)v485;
                                  WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v507, (uint64_t *)&v531, v356, v357, v358, v359, v360, (uint64_t)&v509);
                                  v362 = v505;
                                }
                                ++v363;
                              }
                              while (v363 < v362);
                            }
                            if (v506 != v486 && v506 != 0)
                              WTF::fastFree((unint64_t)v506, v354, v355, v356, v357, v358, v359, v360);
                            v506 = v361;
                            HIDWORD(v505) = v237;
                            if (!(_BYTE)v504)
                            {
                              v238 = v486;
                              if (v361 != v486)
                              {
                                v238 = v361;
                                if (!v507)
                                {
                                  v507 = (uint64_t *)(v56 + 560);
                                  v531 = (uint64_t *)v485;
                                  WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add((uint64_t *)(v56 + 560), (uint64_t *)&v531, v356, v357, v358, v359, v360, (uint64_t)&v509);
                                  v238 = v506;
                                }
                              }
LABEL_345:
                              LODWORD(v505) = v237;
                              bzero(v238, 8 * v237);
                              v71 = 0;
                              if ((_DWORD)v237)
                              {
                                do
                                {
                                  v240 = *v236++;
                                  v239 = v240;
                                  if (v240)
                                    *((_QWORD *)v238 + v71++) = v239;
                                  --v237;
                                }
                                while (v237);
                              }
                              if (!(_BYTE)v504)
                              {
                                v480 = 0;
                                v74 = 5;
                                goto LABEL_58;
                              }
                            }
LABEL_805:
                            v10 = (uint64_t)v493;
                            JSC::throwOutOfMemoryError(v493, (JSC::JSGlobalObject *)&v527);
LABEL_521:
                            v75 = 0;
                            v71 = 0;
                            v74 = 0;
                            v480 = 0;
LABEL_59:
                            v76 = &v500;
                            if (*((_DWORD *)v491 + 20))
                            {
                              v353 = *((_DWORD *)v491 + 20);
                              if ((v353 & 0x27) != 0 && (v353 & 0x20) == 0)
                                JSC::VMTraps::handleTraps((JSC::VM *)((char *)v491 + 64), 7u, (uint64_t)v45, v46, v47, v48, v49, v50);
                              if (*((_QWORD *)v491 + 2))
                              {
                                v40 = 0;
                                v86 = (uint64_t)v485;
                                v85 = v486;
                                goto LABEL_65;
                              }
                            }
                            v492 = v71;
                            if (HIDWORD(v500) < v71)
                            {
                              if ((v71 & 0x80000000) != 0
                                || (v183 = v75, WTF::tryFastMalloc((WTF *)(8 * v492), &v509), (v185 = v509) == 0))
                              {
                                LOBYTE(v499) = 1;
                                v10 = (uint64_t)v493;
LABEL_62:
                                v77 = JSC::createOutOfMemoryError(v10, (JSC::JSGlobalObject *)v44);
                                v84 = (JSC::Exception *)v77;
                                if ((v77 & 0xFFFE000000000002) != 0
                                  || &JSC::Exception::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v77 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
                                {
                                  v84 = (JSC::Exception *)JSC::Exception::create((uint64_t)v491, (JSC::VM *)v77, 0, v78, v79, v80, v81, v82);
                                }
                                v86 = (uint64_t)v485;
                                v85 = v486;
                                JSC::VM::throwException(v491, (JSC::JSGlobalObject *)v10, v84, v83, v78, v79, v80, v81, v82);
                                v40 = 0;
LABEL_65:
                                v87 = v502;
                                if (v502)
                                {
                                  v241 = *v502;
                                  if (*v502)
                                  {
                                    v242 = *(_DWORD *)(v241 - 8);
                                    v243 = ((unint64_t)v76 + ~((_QWORD)v76 << 32)) ^ (((unint64_t)v76
                                                                                            + ~((_QWORD)v76 << 32)) >> 22);
                                    v244 = 9 * ((v243 + ~(v243 << 13)) ^ ((v243 + ~(v243 << 13)) >> 8));
                                    v245 = (v244 ^ (v244 >> 15)) + ~((v244 ^ (v244 >> 15)) << 27);
                                    v246 = v242 & ((v245 >> 31) ^ v245);
                                    v247 = *(uint64_t **)(v241 + 8 * v246);
                                    if (v247 != v76)
                                    {
                                      v279 = 1;
                                      while (v247)
                                      {
                                        v246 = ((_DWORD)v246 + v279) & v242;
                                        v247 = *(uint64_t **)(v241 + 8 * v246);
                                        ++v279;
                                        if (v247 == v76)
                                          goto LABEL_355;
                                      }
                                      v246 = *(unsigned int *)(v241 - 4);
                                    }
LABEL_355:
                                    if (v246 != *(_DWORD *)(v241 - 4))
                                    {
                                      *(_QWORD *)(v241 + 8 * v246) = -1;
                                      ++*(_DWORD *)(*v87 - 16);
                                      v248 = *v87;
                                      v249 = *v87 ? *(_DWORD *)(v248 - 12) - 1 : -1;
                                      *(_DWORD *)(v248 - 12) = v249;
                                      v250 = *v87;
                                      if (*v87)
                                      {
                                        v251 = 6 * *(_DWORD *)(v250 - 12);
                                        v252 = *(_DWORD *)(v250 - 4);
                                        v253 = v251 < v252 && v252 >= 9;
                                        if (v253)
                                          WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(v87, v252 >> 1, 0, v46, v47, v48, v49, v50);
                                      }
                                    }
                                  }
                                }
                                if (v501 != v488 && v501 != 0)
                                  WTF::fastFree((unint64_t)v501, v44, (uint64_t)v45, v46, v47, v48, v49, v50);
                                v89 = v507;
                                if (v507)
                                {
                                  v254 = *v507;
                                  if (*v507)
                                  {
                                    v255 = *(_DWORD *)(v254 - 8);
                                    v256 = (~(v86 << 32) + v86) ^ ((unint64_t)(~(v86 << 32) + v86) >> 22);
                                    v257 = 9 * ((v256 + ~(v256 << 13)) ^ ((v256 + ~(v256 << 13)) >> 8));
                                    v258 = (v257 ^ (v257 >> 15)) + ~((v257 ^ (v257 >> 15)) << 27);
                                    v259 = v255 & ((v258 >> 31) ^ v258);
                                    v260 = *(_QWORD *)(v254 + 8 * v259);
                                    if (v260 != v86)
                                    {
                                      v280 = 1;
                                      while (v260)
                                      {
                                        v259 = ((_DWORD)v259 + v280) & v255;
                                        v260 = *(_QWORD *)(v254 + 8 * v259);
                                        ++v280;
                                        if (v260 == v86)
                                          goto LABEL_367;
                                      }
                                      v259 = *(unsigned int *)(v254 - 4);
                                    }
LABEL_367:
                                    if (v259 != *(_DWORD *)(v254 - 4))
                                    {
                                      *(_QWORD *)(v254 + 8 * v259) = -1;
                                      ++*(_DWORD *)(*v89 - 16);
                                      v261 = *v89;
                                      v262 = *v89 ? *(_DWORD *)(v261 - 12) - 1 : -1;
                                      *(_DWORD *)(v261 - 12) = v262;
                                      v263 = *v89;
                                      if (*v89)
                                      {
                                        v264 = 6 * *(_DWORD *)(v263 - 12);
                                        v265 = *(_DWORD *)(v263 - 4);
                                        if (v264 < v265 && v265 >= 9)
                                          WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(v89, v265 >> 1, 0, v46, v47, v48, v49, v50);
                                      }
                                    }
                                  }
                                }
                                v43 = v506;
                                if (v506 != v85 && v506 != 0)
                                  goto LABEL_19;
                                return v40;
                              }
                              v186 = v500;
                              if ((_DWORD)v500)
                              {
                                v187 = 0;
                                do
                                {
                                  v188 = v501;
                                  *((_QWORD *)v185 + v187) = *((_QWORD *)v501 + v187);
                                  v189 = *((_QWORD *)v188 + v187);
                                  if (v502)
                                    v190 = 0;
                                  else
                                    v190 = (v189 & 0xFFFE000000000002) == 0;
                                  if (v190 && v189 != 0)
                                  {
                                    v409 = v189 - 16;
                                    if ((v189 & 8) == 0)
                                      v409 = v189 & 0xFFFFFFFFFFFFC000 | 8;
                                    v502 = (uint64_t *)(*(_QWORD *)v409 + 560);
                                    v531 = &v500;
                                    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v502, (uint64_t *)&v531, v46, v47, v48, v49, v50, (uint64_t)&v509);
                                    v186 = v500;
                                  }
                                  ++v187;
                                }
                                while (v187 < v186);
                              }
                              if (v501 != v488 && v501 != 0)
                                WTF::fastFree((unint64_t)v501, v44, v184, v46, v47, v48, v49, v50);
                              v501 = v185;
                              HIDWORD(v500) = v71;
                              v10 = (uint64_t)v493;
                              v75 = v183;
                            }
                            v482 = v74;
                            if ((_BYTE)v499)
                              goto LABEL_62;
                            v91 = v501;
                            if (v501 != v488 && !v502)
                            {
                              v502 = (uint64_t *)((char *)v491 + 560);
                              v531 = &v500;
                              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add((uint64_t *)v491 + 70, (uint64_t *)&v531, v46, v47, v48, v49, v50, (uint64_t)&v509);
                              v91 = v501;
                            }
                            LODWORD(v500) = v71;
                            v92 = 8 * v492;
                            bzero(v91, 8 * v492);
                            v481 = v501;
                            v484 = v500;
                            v477 = &v500;
                            if (v51)
                            {
                              v510 = 0;
                              v509 = 0;
                              if (v71)
                              {
                                if (v71 >> 28)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1988A3B2CLL);
                                }
                                v288 = (WTF *)WTF::fastMalloc((WTF *)(16 * v492));
                                LODWORD(v510) = v71;
                                v509 = v288;
                                while (1)
                                {
                                  v294 = v75;
                                  v527 = *(_QWORD *)v75;
                                  v295 = v527;
                                  if ((v527 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v527 + 5) != 2)
                                  {
                                    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v527, v493, v290, v291, v292, v48, v49, v50, v533);
                                    v297 = v491;
                                  }
                                  else
                                  {
                                    v296 = *(int **)(v527 + 8);
                                    v297 = v491;
                                    if ((v296 & 1) != 0)
                                      v296 = *JSC::JSRopeString::resolveRope(v527, v493, (uint64_t)v290, v291, v293, v292, v48, v49, v50);
                                    if (v296)
                                      *v296 += 2;
                                    v533[0] = v296;
                                    v497 = v295;
                                  }
                                  if (*((_DWORD *)v297 + 20)
                                    && JSC::VM::hasExceptionsAfterHandlingTraps(v297, (uint64_t)v289, (uint64_t)v290, v291, v292, v48, v49, v50))
                                  {
                                    break;
                                  }
                                  v298 = v533[0];
                                  v533[0] = 0;
                                  v531 = (uint64_t *)v527;
                                  v532 = v298;
                                  if (HIDWORD(v510) == (_DWORD)v510)
                                  {
                                    WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::tuple<JSC::JSValue,WTF::String>>((uint64_t)&v509, (unint64_t)&v531);
                                  }
                                  else
                                  {
                                    v299 = (unint64_t *)((char *)v509 + 16 * HIDWORD(v510));
                                    *v299 = v527;
                                    v300 = v532;
                                    v532 = 0;
                                    v299[1] = (unint64_t)v300;
                                    ++HIDWORD(v510);
                                  }
                                  v301 = (WTF::StringImpl *)v532;
                                  v532 = 0;
                                  if (v301)
                                  {
                                    if (*(_DWORD *)v301 == 2)
                                    {
                                      WTF::StringImpl::~StringImpl(v301, v289, (uint64_t)v290, v291, v292, v48, v49, v50);
                                      WTF::fastFree(v303, v304, v305, v306, v307, v308, v309, v310);
                                    }
                                    else
                                    {
                                      *(_DWORD *)v301 -= 2;
                                    }
                                  }
                                  v302 = (WTF::StringImpl *)v533[0];
                                  v533[0] = 0;
                                  if (v302)
                                  {
                                    if (*(_DWORD *)v302 == 2)
                                    {
                                      WTF::StringImpl::~StringImpl(v302, v289, (uint64_t)v290, v291, v292, v48, v49, v50);
                                      WTF::fastFree(v311, v312, v313, v314, v315, v316, v317, v318);
                                    }
                                    else
                                    {
                                      *(_DWORD *)v302 -= 2;
                                    }
                                  }
                                  v75 = (WTF *)((char *)v294 + 8);
                                  v92 -= 8;
                                  if (!v92)
                                    goto LABEL_492;
                                }
                                v411 = (WTF::StringImpl *)v533[0];
                                v533[0] = 0;
                                if (v411)
                                {
                                  if (*(_DWORD *)v411 == 2)
                                  {
                                    WTF::StringImpl::~StringImpl(v411, v289, (uint64_t)v290, v291, v292, v48, v49, v50);
                                    WTF::fastFree(v461, v462, v463, v464, v465, v466, v467, v468);
                                  }
                                  else
                                  {
                                    *(_DWORD *)v411 -= 2;
                                  }
                                }
                                WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v509, v289, (uint64_t)v290, v291, v292, v48, v49, v50);
                                goto LABEL_775;
                              }
LABEL_492:
                              JSC::sortBucketSort((uint64_t)v481, v484, 0, (uint64_t)&v509, 0, v48, v49, v50);
                              v319 = v509;
                              v154 = v489;
                              if (HIDWORD(v510))
                              {
                                v321 = 16 * HIDWORD(v510);
                                v322 = (WTF::StringImpl **)((char *)v509 + 8);
                                do
                                {
                                  v323 = *v322;
                                  *v322 = 0;
                                  if (v323)
                                  {
                                    if (*(_DWORD *)v323 == 2)
                                    {
                                      WTF::StringImpl::~StringImpl(v323, (WTF::AtomStringImpl *)v44, (uint64_t)v45, v46, v47, v48, v49, v50);
                                      WTF::fastFree(v324, v325, v326, v327, v328, v329, v330, v331);
                                    }
                                    else
                                    {
                                      *(_DWORD *)v323 -= 2;
                                    }
                                  }
                                  v322 += 2;
                                  v321 -= 16;
                                }
                                while (v321);
                                v319 = v509;
                              }
                              v320 = v493;
                              if (v319)
                                WTF::fastFree((unint64_t)v319, v44, (uint64_t)v45, v46, v47, v48, v49, v50);
                              goto LABEL_743;
                            }
                            v487 = v75;
                            v496 = *(JSC::VM **)(v10 + 56);
                            if (*(_BYTE *)(v12 + 5) == 26)
                            {
                              v94 = *(_QWORD *)(v12 + 24);
                              v95 = v492;
                              if ((v94 & 1) != 0)
                                v94 = *(_QWORD *)((v94 & 0xFFFFFFFFFFFFFFFELL) + 48);
                              if (*(_BYTE *)(v94 + 5) != 8)
                              {
                                LOBYTE(v527) = 2;
                                v96 = *(_QWORD *)(v12 + 16);
                                v528 = v94;
                                v529 = v96;
                                goto LABEL_86;
                              }
                              LOBYTE(v527) = 1;
                              v528 = *(_QWORD *)(v94 + 40);
                              LOBYTE(v529) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                                      * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C));
                            }
                            else
                            {
                              v93 = (WTF::Thread *)(*(_QWORD *(**)(unint64_t *__return_ptr, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C) + 0x38))(&v527, v12);
                              v95 = v492;
                              if (v527 == 2)
                              {
LABEL_86:
                                v510 = 0;
                                v509 = 0;
                                LOBYTE(v511) = 3;
                                v97 = *(JSC::VM **)(v10 + 56);
                                *(_QWORD *)&v512 = v97;
                                v475 = (char *)&v512 + 8;
                                v98 = *(_QWORD *)(16 * (**(_DWORD **)(v12 + 16) & 0xFFFFFFFE) + 0x28);
                                *((_QWORD *)&v512 + 1) = v97;
                                *(_QWORD *)&v513 = v98;
                                if (*((_QWORD *)v97 + 11321))
                                  goto LABEL_87;
                                *((_QWORD *)v97 + 11321) = v475;
                                v275 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                                if (!v275)
                                {
                                  v93 = (WTF::Thread *)WTF::Thread::initializeCurrentTLS(v93);
                                  v275 = v93;
                                }
                                if ((*((_BYTE *)v275 + 5) & 0x20) == 0)
                                {
                                  *((_BYTE *)v275 + 5) |= 0x20u;
                                  if (BYTE2(dword_1ECF4C6C3))
                                    JSC::Wasm::startTrackingCurrentThread(v93, (uint64_t)v44, (uint64_t)v45, v46, v47, v48, v49, v50);
                                  WTF::registerThreadForMachExceptionHandling(v275, (WTF::Thread *)v44, (uint64_t)v45, v46, v47, v48, v49, v50);
                                  v95 = v492;
                                  v12 = v495;
                                }
                                v93 = (WTF::Thread *)*((_QWORD *)&v512 + 1);
                                if (!*(_BYTE *)(*((_QWORD *)&v512 + 1) + 56))
                                {
                                  v276 = *(_QWORD *)(*((_QWORD *)&v512 + 1) + 92992);
                                  v277 = atomic_load(&JSC::lastTimeZoneID);
                                  if (v276 == v277)
                                    goto LABEL_87;
                                  v93 = (WTF::Thread *)*((_QWORD *)&v512 + 1);
                                }
                                JSC::VM::executeEntryScopeServicesOnEntry(v93, (WTF::AtomStringImpl *)v44, (uint64_t)v45, v46, v47, v48, v49, v50);
                                v95 = v492;
                                v12 = v495;
LABEL_87:
                                *((_QWORD *)v97 + 4) = 0;
                                v518 = 0;
                                v519 = 0x800000000;
                                v476 = (WTF *)((char *)v521 + 8);
                                v520 = (WTF *)((char *)v521 + 8);
                                v99 = 0uLL;
                                memset(v521, 0, sizeof(v521));
                                v522 = 0;
                                v100 = *(JSC::ModuleProgramExecutable **)(v12 + 24);
                                v473 = (uint64_t)&v519;
                                if ((v100 & 1) != 0)
                                  v100 = *(JSC::ModuleProgramExecutable **)(((unint64_t)v100 & 0xFFFFFFFFFFFFFFFELL)
                                                                          + 48);
                                v523 = v100;
                                v524 = *(const WTF::StringImpl **)(v12 + 16);
                                v525 = 0;
                                v526 = 0;
                                v101 = v512;
                                v530 = (JSC::VM *)v512;
                                if ((unint64_t)&v471 >= *(_QWORD *)(v512 + 8))
                                {
                                  if (!*(_DWORD *)(v512 + 4))
                                  {
                                    v531 = 0;
                                    v102 = v512;
                                    if (*((_BYTE *)v523 + 5) == 8
                                      || (*((_QWORD *)v523 + 1)
                                        ? (v103 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                                        : (v103 = 0),
                                          v103))
                                    {
                                      v531 = (uint64_t *)*((_QWORD *)v523 + 12);
                                    }
                                    else
                                    {
                                      JSC::ScriptExecutable::prepareForExecutionImpl(v523, v512, v12, v524, 0, (JSC::CodeBlock **)&v531, v49, v50);
                                    }
                                    if (!*(_DWORD *)(v102 + 80))
                                      goto LABEL_98;
                                    v389 = *(_DWORD *)(v102 + 80);
                                    if ((v389 & 0x27) != 0 && (v389 & 0x20) == 0)
                                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v102 + 64), 7u, (uint64_t)v45, v46, v47, v48, v49, v50);
                                    v95 = v492;
                                    v12 = v495;
                                    if (*(_QWORD *)(v102 + 16))
                                    {
                                      v111 = 0;
                                    }
                                    else
                                    {
LABEL_98:
                                      v104 = (int *)v531;
                                      *((_BYTE *)v531 + 17) = 0;
                                      v105 = *((_QWORD *)v104 + 15);
                                      if (v105)
                                      {
                                        v106 = (unsigned int *)(v105 + 8);
                                        do
                                          v107 = __ldaxr(v106);
                                        while (__stlxr(v107 + 1, v106));
                                      }
                                      v525 = *(uint64_t (**)(void))(v105 + 16);
                                      v108 = (unsigned int *)(v105 + 8);
                                      do
                                      {
                                        v109 = __ldaxr(v108);
                                        v110 = v109 - 1;
                                      }
                                      while (__stlxr(v110, v108));
                                      if (!v110)
                                      {
                                        atomic_store(1u, (unsigned int *)(v105 + 8));
                                        (*(void (**)(uint64_t))(*(_QWORD *)v105 + 32))(v105);
                                      }
                                      v111 = (int *)v531;
                                      v112 = (WTF *)v531[11];
                                      v510 = (uint64_t)(v531 + 11);
                                      v509 = v112;
                                      v531[11] = (uint64_t)&v509;
                                      *((_QWORD *)v112 + 1) = &v509;
                                    }
                                    v113 = *(_QWORD *)(v101 + 16);
                                    v114 = v487;
                                    if (!v113)
                                    {
                                      v526 = v111[7];
                                      v115 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28);
                                      *((_QWORD *)&v513 + 1) = v111;
                                      *(_QWORD *)&v514 = v12;
                                      v516 = v520;
                                      v517 = v115;
                                      v116 = 3;
                                      DWORD2(v514) = 3;
                                      v117 = v111[7];
                                      if (v117 >= 4)
                                        v116 = v117;
                                      DWORD2(v515) = v116 | 1;
                                      HIDWORD(v514) = 0;
                                      *(_QWORD *)&v515 = 10;
                                    }
                                    goto LABEL_110;
                                  }
                                  JSC::Interpreter::checkVMEntryPermission(v93);
                                }
                                JSC::throwStackOverflowError((unint64_t)v493, &v530, (uint64_t)v45, v46, v47, v48, v49, v50);
                                v114 = v487;
LABEL_110:
                                if (*((_DWORD *)v496 + 20)
                                  && JSC::VM::hasExceptionsAfterHandlingTraps(v496, (uint64_t)v44, (uint64_t)v45, v46, v47, v48, v49, v50))
                                {
                                  goto LABEL_653;
                                }
                                v118 = 0;
                                v474 = (uint64_t)&v513 + 8;
                                while (v118 < v95)
                                {
                                  v119 = v118 + 4;
                                  if (v118 + 4 >= v95)
                                    v120 = v95;
                                  else
                                    v120 = v118 + 4;
                                  v121 = v120 - v118;
                                  if (v120 - v118 >= 2)
                                  {
                                    v495 = v118 + 4;
                                    v122 = (char *)v114 + 8 * v118;
                                    v123 = 1;
                                    while (1)
                                    {
                                      v124 = *(_QWORD *)&v122[8 * v123];
                                      v125 = v123;
                                      while (1)
                                      {
                                        v126 = v125 - 1;
                                        v127 = *(_QWORD *)&v122[8 * v125 - 8];
                                        v128 = v512;
                                        v531 = (uint64_t *)v512;
                                        if (v526 <= 3)
                                        {
                                          if (v525)
                                            v129 = vmEntryToJavaScriptWith2Arguments(v525, v512, *((uint64_t *)&v513 + 1), v514, 10, v124, v127);
                                          else
                                            v129 = 0;
                                          *(_BYTE *)(v128 + 93120) = 1;
                                          if (*(_DWORD *)(v128 + 80))
                                          {
                                            v287 = *(_DWORD *)(v128 + 80);
                                            if ((v287 & 0x27) != 0 && (v287 & 0x20) == 0)
                                              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v128 + 64), 7u, (uint64_t)v45, v46, v47, v48, v49, v50);
                                            if (*(_QWORD *)(v128 + 16))
                                              goto LABEL_463;
                                          }
                                          if (v129)
                                            goto LABEL_124;
                                        }
                                        v518 = 0;
                                        LODWORD(v519) = 0;
                                        *(_QWORD *)&v515 = 10;
                                        if (HIDWORD(v519) && (v520 != v476 ? (v283 = v520 == 0) : (v283 = 1), v283))
                                        {
                                          *(_QWORD *)v520 = v124;
                                          LODWORD(v519) = 1;
                                        }
                                        else if (JSC::MarkedVectorBase::slowAppend(v473, v124, (uint64_t)v45, v46, v47, v48, v49, v50) == 1)
                                        {
                                          v518 = 1;
                                        }
                                        v284 = v519;
                                        if ((_DWORD)v519 == HIDWORD(v519) || v520 != v476 && v520)
                                        {
                                          if (JSC::MarkedVectorBase::slowAppend(v473, v127, (uint64_t)v45, v46, v47, v48, v49, v50) == 1)
                                          {
                                            v518 = 1;
LABEL_563:
                                            JSC::throwOutOfMemoryError(v493, (JSC::JSGlobalObject *)&v531);
LABEL_463:
                                            v129 = 0;
                                            goto LABEL_124;
                                          }
                                        }
                                        else
                                        {
                                          *((_QWORD *)v520 + v519) = v127;
                                          LODWORD(v519) = v284 + 1;
                                        }
                                        if (v518)
                                          goto LABEL_563;
                                        v285 = v512;
                                        v286 = v525;
                                        if (v525)
                                          goto LABEL_458;
                                        v417 = (unsigned int *)(v512 + 80);
                                        LODWORD(v490) = *(_DWORD *)(v512 + 80);
                                        if ((v490 & 0x20) == 0)
                                        {
                                          do
                                            v418 = __ldaxr(v417);
                                          while (__stlxr(v418 | 0x20, v417));
                                        }
                                        JSC::CachedCall::relink((JSC::CachedCall *)&v509, (uint64_t)v44, (uint64_t)v45, v46, v47, v48, v49, v50);
                                        if (*v417
                                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v285, (uint64_t)v44, (uint64_t)v45, v46, v47, v48, v49, v50))
                                        {
                                          v419 = 0;
                                          v286 = 0;
                                          v494 = *(JSC::MarkedVectorBase **)(v285 + 16);
                                        }
                                        else
                                        {
                                          v419 = 1;
                                          v286 = v525;
                                        }
                                        if ((v490 & 0x20) == 0)
                                        {
                                          do
                                            v420 = __ldaxr(v417);
                                          while (__stlxr(v420 & 0xFFFFFFDF, v417));
                                        }
                                        if (v419)
LABEL_458:
                                          v494 = (JSC::MarkedVectorBase *)vmEntryToJavaScript((uint64_t)v286, (JSC::VM *)v285, v474, v46, v47, v48, v49, v50);
                                        *(_BYTE *)(v285 + 93120) = 1;
                                        v129 = (unint64_t)v494;
LABEL_124:
                                        if (*((_QWORD *)v496 + 2))
                                          goto LABEL_652;
                                        v531 = (uint64_t *)v129;
                                        if (v129 < 0xFFFE000000000000)
                                        {
                                          if ((v129 & 0xFFFFFFFFFFFFFFFELL) == 6)
                                          {
                                            v130 = 0;
                                            LODWORD(v131) = v129 != 7;
                                          }
                                          else
                                          {
                                            if (v129 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                                            {
                                              JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v531, v493, (uint64_t)v45, v46, v47, v48, v49, v50, (int8x16_t)v99);
                                              v130 = *((_QWORD *)v496 + 2);
                                            }
                                            else
                                            {
                                              v130 = 0;
                                              v99.n128_u64[0] = v129 - 0x2000000000000;
                                            }
                                            LODWORD(v131) = v99.n128_f64[0] < 0.0;
                                          }
                                        }
                                        else
                                        {
                                          v130 = 0;
                                          v131 = (v129 >> 31) & 1;
                                        }
                                        if (v130 || !(_DWORD)v131)
                                          break;
                                        *(_QWORD *)&v122[8 * v125--] = v127;
                                        if (!v126)
                                          goto LABEL_132;
                                      }
                                      if (v130)
                                        goto LABEL_652;
LABEL_132:
                                      *(_QWORD *)&v122[8 * v125] = v124;
                                      if (++v123 >= v121)
                                      {
                                        v132 = 0;
                                        v114 = v487;
                                        v95 = v492;
                                        v119 = v495;
                                        goto LABEL_134;
                                      }
                                    }
                                  }
                                  v132 = *((_QWORD *)v496 + 2);
LABEL_134:
                                  v118 = v119;
                                  if (v132)
                                  {
                                    v481 = v114;
                                    v484 = v95;
                                    goto LABEL_653;
                                  }
                                }
                                v153 = v114;
                                v253 = v71 >= 5;
                                v154 = v489;
                                if (!v253)
                                {
LABEL_223:
                                  v181 = v481;
                                  if (v153 == v114)
                                    v181 = v114;
                                  v481 = v181;
                                  v182 = v484;
                                  if (v153 == v114)
                                    v182 = v95;
                                  v484 = v182;
                                  goto LABEL_654;
                                }
                                v155 = 4;
                                v156 = v481;
                                v157 = v114;
LABEL_180:
                                v158 = 0;
                                v153 = v156;
                                v159 = 2 * v155;
                                v478 = 2 * v155;
                                v479 = v155;
                                v494 = v156;
                                while (1)
                                {
                                  v490 = v158;
                                  if (v158 + v155 >= v95)
                                    v160 = v95;
                                  else
                                    v160 = v158 + v155;
                                  if (v160 + v155 >= v95)
                                    v161 = v95;
                                  else
                                    v161 = v160 + v155;
                                  if (v160 >= v161)
                                    goto LABEL_219;
                                  v495 = v160;
                                  v162 = (uint64_t *)((char *)v157 + 8 * v160);
                                  v163 = *(v162 - 1);
                                  v164 = *v162;
                                  v165 = v512;
                                  v531 = (uint64_t *)v512;
                                  if (v526 > 3)
                                    break;
                                  if (v525)
                                    v166 = vmEntryToJavaScriptWith2Arguments(v525, v512, *((uint64_t *)&v513 + 1), v514, 10, v164, v163);
                                  else
                                    v166 = 0;
                                  *(_BYTE *)(v165 + 93120) = 1;
                                  if (*(_DWORD *)(v165 + 80))
                                  {
                                    v346 = *(_DWORD *)(v165 + 80);
                                    if ((v346 & 0x27) != 0 && (v346 & 0x20) == 0)
                                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v165 + 64), 7u, (uint64_t)v45, v46, v47, v48, v49, v50);
                                    if (*(_QWORD *)(v165 + 16))
                                      goto LABEL_538;
                                  }
                                  if (!v166)
                                    break;
LABEL_193:
                                  if (*((_QWORD *)v496 + 2))
                                    goto LABEL_534;
                                  v531 = (uint64_t *)v166;
                                  if (v166 <= 0xFFFDFFFFFFFFFFFFLL)
                                  {
                                    if ((v166 & 0xFFFFFFFFFFFFFFFELL) == 6)
                                    {
                                      if (v166 != 7)
                                        goto LABEL_196;
                                    }
                                    else if (v166 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                                    {
                                      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v531, v493, (uint64_t)v45, v46, v47, v48, v49, v50, (int8x16_t)v99);
                                      if (*((_QWORD *)v496 + 2))
                                      {
LABEL_652:
                                        v481 = v487;
                                        v484 = v492;
LABEL_653:
                                        v154 = v489;
LABEL_654:
                                        v525 = 0;
                                        v390 = *(uint64_t **)&v521[0];
                                        v320 = v493;
                                        if (*(_QWORD *)&v521[0])
                                        {
                                          v395 = **(_QWORD **)&v521[0];
                                          if (**(_QWORD **)&v521[0])
                                          {
                                            v396 = *(_DWORD *)(v395 - 8);
                                            v397 = (~(v473 << 32) + v473) ^ ((unint64_t)(~(v473 << 32) + v473) >> 22);
                                            v398 = 9 * ((v397 + ~(v397 << 13)) ^ ((v397 + ~(v397 << 13)) >> 8));
                                            v399 = (v398 ^ (v398 >> 15)) + ~((v398 ^ (v398 >> 15)) << 27);
                                            v400 = v396 & ((v399 >> 31) ^ v399);
                                            v401 = *(_QWORD *)(v395 + 8 * v400);
                                            if (v401 != v473)
                                            {
                                              v408 = 1;
                                              while (v401)
                                              {
                                                v400 = ((_DWORD)v400 + v408) & v396;
                                                v401 = *(_QWORD *)(v395 + 8 * v400);
                                                ++v408;
                                                if (v401 == v473)
                                                  goto LABEL_667;
                                              }
                                              v400 = *(unsigned int *)(v395 - 4);
                                            }
LABEL_667:
                                            if (v400 != *(_DWORD *)(v395 - 4))
                                            {
                                              *(_QWORD *)(v395 + 8 * v400) = -1;
                                              ++*(_DWORD *)(*v390 - 16);
                                              v402 = *v390;
                                              v403 = *v390 ? *(_DWORD *)(v402 - 12) - 1 : -1;
                                              *(_DWORD *)(v402 - 12) = v403;
                                              v404 = *v390;
                                              if (*v390)
                                              {
                                                v405 = 6 * *(_DWORD *)(v404 - 12);
                                                v406 = *(_DWORD *)(v404 - 4);
                                                if (v405 < v406 && v406 >= 9)
                                                  WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(v390, v406 >> 1, 0, v46, v47, v48, v49, v50);
                                              }
                                            }
                                          }
                                        }
                                        if (v520 != v476 && v520 != 0)
                                          WTF::fastFree((unint64_t)v520, v44, (uint64_t)v45, v46, v47, v48, v49, v50);
                                        v392 = (JSC::VM *)*((_QWORD *)&v512 + 1);
                                        if (*(char **)(*((_QWORD *)&v512 + 1) + 90568) == v475)
                                        {
                                          *(_QWORD *)(*((_QWORD *)&v512 + 1) + 90568) = 0;
                                          if (*((_BYTE *)v392 + 56))
                                            JSC::VM::executeEntryScopeServicesOnExit(v392, v44, (uint64_t)v45, v46, v47, v48, v49, v50);
                                        }
                                        v393 = v510;
                                        if (v510)
                                        {
                                          v394 = v509;
                                          *(_QWORD *)v510 = v509;
                                          *((_QWORD *)v394 + 1) = v393;
                                        }
LABEL_742:
                                        if (*((_DWORD *)v491 + 20)
                                          && JSC::VM::hasExceptionsAfterHandlingTraps(v491, (uint64_t)v44, (uint64_t)v45, v46, v47, v48, v49, v50))
                                        {
LABEL_775:
                                          v40 = 0;
                                          goto LABEL_748;
                                        }
LABEL_743:
                                        v431 = (JSC::VM *)*((_QWORD *)v320 + 7);
                                        v527 = (unint64_t)v431;
                                        if (*((_BYTE *)v154 + 5) != 36)
                                          goto LABEL_749;
                                        appended = JSC::JSArray::appendMemcpy(v489, v320, (uint64_t)v431, 0, v482, (uint64_t)v481, v484, v50, v99);
                                        if (*((_DWORD *)v431 + 20)
                                          && JSC::VM::hasExceptionsAfterHandlingTraps(v431, (uint64_t)v44, (uint64_t)v45, v46, v47, v48, v49, v50))
                                        {
                                          goto LABEL_747;
                                        }
                                        if ((appended & 1) != 0)
                                        {
                                          if (v484 == v483)
                                          {
LABEL_747:
                                            v40 = (uint64_t)v489;
LABEL_748:
                                            v86 = (uint64_t)v485;
                                            v85 = v486;
                                            v76 = v477;
                                            goto LABEL_65;
                                          }
                                          v433 = v484;
                                          LODWORD(v434) = v484;
                                        }
                                        else
                                        {
LABEL_749:
                                          v433 = v484;
                                          if (v484)
                                          {
                                            v434 = 0;
                                            v435 = 8 * v484;
                                            while (1)
                                            {
                                              if ((JSC::JSObject::trySetIndexQuickly((unint64_t)v489, *((JSC::VM **)v493 + 7), v434, *((_QWORD *)v481 + v434), 0, v48, v49, v50, v99.n128_f64[0]) & 1) == 0)(*(void (**)(void))(16* *(unsigned int *)(16* (*(_DWORD *)v489 & 0xFFFFFFFE)+ 0x4C)+ 0x50))();
                                              if (*((_DWORD *)v431 + 20)
                                                && JSC::VM::hasExceptionsAfterHandlingTraps(v431, (uint64_t)v44, (uint64_t)v45, v46, v47, v48, v49, v50))
                                              {
                                                goto LABEL_747;
                                              }
                                              ++v434;
                                              v435 -= 8;
                                              if (!v435)
                                              {
                                                v436 = v480;
                                                v433 = v484;
                                                goto LABEL_760;
                                              }
                                            }
                                          }
                                          LODWORD(v434) = 0;
                                        }
                                        v436 = v480;
LABEL_760:
                                        v437 = v434;
                                        v438 = v433 + v436;
                                        if (v433 + v436 <= v434)
                                        {
LABEL_767:
                                          if (v437 < v483)
                                          {
                                            while (1)
                                            {
                                              if (v437 > 0xFFFFFFFE)
                                              {
                                                v443 = (uint64_t **)*((_QWORD *)v493 + 7);
                                                if (v437 == 0xFFFFFFFF)
                                                  JSC::Identifier::from(v443, 0xFFFFFFFFuLL, v45, v46, v47, v48, v49, v50, (int **)&v531);
                                                else
                                                  JSC::Identifier::from(v443, (JSC::VM *)v44, (double)v437, v45, v46, v47, v48, v49, v50, (WTF::StringImpl **)&v531);
                                                LODWORD(v509) = -1;
                                                WORD2(v509) = 1;
                                                v440 = (*(uint64_t (**)(void))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v489 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0x58))();
                                                v444 = (WTF::StringImpl *)v531;
                                                v531 = 0;
                                                if (v444)
                                                {
                                                  if (*(_DWORD *)v444 == 2)
                                                  {
                                                    WTF::StringImpl::~StringImpl(v444, (WTF::AtomStringImpl *)v44, (uint64_t)v45, v46, v47, v48, v49, v50);
                                                    WTF::fastFree(v453, v454, v455, v456, v457, v458, v459, v460);
                                                  }
                                                  else
                                                  {
                                                    *(_DWORD *)v444 -= 2;
                                                  }
                                                }
                                              }
                                              else
                                              {
                                                v440 = (*(uint64_t (**)(void))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v489 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0x60))();
                                              }
                                              if (*((_DWORD *)v431 + 20)
                                                && JSC::VM::hasExceptionsAfterHandlingTraps(v431, (uint64_t)v44, (uint64_t)v45, v46, v47, v48, v49, v50))
                                              {
                                                break;
                                              }
                                              if ((v440 & 1) == 0)
                                              {
                                                JSC::throwTypeError((unint64_t)v493, (JSC::VM **)&v527, (uint64_t)"Unable to delete property.", 27);
                                                goto LABEL_747;
                                              }
                                              if (v483 == ++v437)
                                                goto LABEL_747;
                                            }
                                          }
                                        }
                                        else
                                        {
                                          while (1)
                                          {
                                            v439 = (uint64_t **)*((_QWORD *)v493 + 7);
                                            if (v437 > 0xFFFFFFFE)
                                            {
                                              v509 = 0;
                                              v510 = (uint64_t)v489;
                                              LODWORD(v511) = -1;
                                              BYTE4(v511) = BYTE4(v511) & 0xF8 | 1;
                                              *(_WORD *)((char *)&v511 + 5) = 0;
                                              HIBYTE(v511) = 1;
                                              *(_QWORD *)&v512 = 0;
                                              v441 = *(void (**)(JSC::ScopedArguments *, JSC::JSGlobalObject *, uint64_t *, uint64_t, WTF **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v489 & 0xFFFFFFFE) + 0x4C) + 0x48);
                                              if (v437 == 0xFFFFFFFF)
                                                JSC::Identifier::from(v439, 0xFFFFFFFFuLL, v45, v46, v47, v48, v49, v50, (int **)&v531);
                                              else
                                                JSC::Identifier::from(v439, (JSC::VM *)v439, (double)v437, v45, v46, v47, v48, v49, v50, (WTF::StringImpl **)&v531);
                                              v441(v489, v493, v531, 10, &v509);
                                              v442 = (WTF::StringImpl *)v531;
                                              v531 = 0;
                                              if (v442)
                                              {
                                                if (*(_DWORD *)v442 == 2)
                                                {
                                                  WTF::StringImpl::~StringImpl(v442, (WTF::AtomStringImpl *)v44, (uint64_t)v45, v46, v47, v48, v49, v50);
                                                  WTF::fastFree(v445, v446, v447, v448, v449, v450, v451, v452);
                                                }
                                                else
                                                {
                                                  *(_DWORD *)v442 -= 2;
                                                }
                                              }
                                            }
                                            else if ((JSC::JSObject::trySetIndexQuickly((unint64_t)v489, (JSC::VM *)v439, v437, 0xAuLL, 0, v48, v49, v50, v99.n128_f64[0]) & 1) == 0)
                                            {
                                              (*(void (**)(void))(16
                                                                * *(unsigned int *)(16
                                                                                  * (*(_DWORD *)v489 & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0x50))();
                                            }
                                            if (*((_DWORD *)v431 + 20)
                                              && JSC::VM::hasExceptionsAfterHandlingTraps(v431, (uint64_t)v44, (uint64_t)v45, v46, v47, v48, v49, v50))
                                            {
                                              break;
                                            }
                                            if (v438 == ++v437)
                                            {
                                              v437 = v438;
                                              goto LABEL_767;
                                            }
                                          }
                                        }
                                        goto LABEL_747;
                                      }
                                      v154 = v489;
                                      v95 = v492;
                                      v155 = v479;
                                      if (v99.n128_f64[0] < 0.0)
                                      {
LABEL_196:
                                        v167 = v490;
                                        v153 = v494;
                                        v168 = v495;
                                        v169 = v495;
                                        v170 = v490;
                                        if (v161 <= v490)
                                        {
LABEL_197:
                                          v154 = v489;
                                          v171 = v490;
                                          v95 = v492;
                                          v159 = v478;
                                          v155 = v479;
                                          goto LABEL_198;
                                        }
                                        while (2)
                                        {
                                          if (v169 >= v161)
                                          {
LABEL_217:
                                            v172 = (uint64_t *)((char *)v157 + 8 * v170++);
                                          }
                                          else
                                          {
                                            v172 = (uint64_t *)((char *)v157 + 8 * v169);
                                            if (v170 < v168)
                                            {
                                              v173 = *v172;
                                              v174 = *((_QWORD *)v157 + v170);
                                              v175 = v512;
                                              v531 = (uint64_t *)v512;
                                              if (v526 <= 3)
                                              {
                                                if (v525)
                                                  v176 = vmEntryToJavaScriptWith2Arguments(v525, v512, *((uint64_t *)&v513 + 1), v514, 10, v173, v174);
                                                else
                                                  v176 = 0;
                                                *(_BYTE *)(v175 + 93120) = 1;
                                                if (*(_DWORD *)(v175 + 80))
                                                {
                                                  v273 = *(_DWORD *)(v175 + 80);
                                                  if ((v273 & 0x27) != 0 && (v273 & 0x20) == 0)
                                                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v175 + 64), 7u, (uint64_t)v45, v46, v47, v48, v49, v50);
                                                  if (*(_QWORD *)(v175 + 16))
                                                  {
LABEL_400:
                                                    v176 = 0;
                                                    goto LABEL_210;
                                                  }
                                                }
                                                if (v176)
                                                  goto LABEL_210;
                                              }
                                              v518 = 0;
                                              LODWORD(v519) = 0;
                                              *(_QWORD *)&v515 = 10;
                                              if (HIDWORD(v519) && (v520 == v476 || !v520))
                                              {
                                                *(_QWORD *)v520 = v173;
                                                LODWORD(v519) = 1;
                                              }
                                              else if (JSC::MarkedVectorBase::slowAppend(v473, v173, (uint64_t)v45, v46, v47, v48, v49, v50) == 1)
                                              {
                                                v518 = 1;
                                              }
                                              v270 = v519;
                                              if ((_DWORD)v519 != HIDWORD(v519) && (v520 == v476 || !v520))
                                              {
                                                *((_QWORD *)v520 + v519) = v174;
                                                LODWORD(v519) = v270 + 1;
                                                goto LABEL_393;
                                              }
                                              if (JSC::MarkedVectorBase::slowAppend(v473, v174, (uint64_t)v45, v46, v47, v48, v49, v50) == 1)
                                              {
                                                v518 = 1;
                                                goto LABEL_502;
                                              }
LABEL_393:
                                              if (v518)
                                              {
LABEL_502:
                                                JSC::throwOutOfMemoryError(v493, (JSC::JSGlobalObject *)&v531);
                                                goto LABEL_400;
                                              }
                                              v271 = v512;
                                              v272 = v525;
                                              if (v525)
                                                goto LABEL_395;
                                              v412 = (unsigned int *)(v512 + 80);
                                              v413 = *(_DWORD *)(v512 + 80);
                                              if ((v413 & 0x20) == 0)
                                              {
                                                do
                                                  v414 = __ldaxr(v412);
                                                while (__stlxr(v414 | 0x20, v412));
                                              }
                                              JSC::CachedCall::relink((JSC::CachedCall *)&v509, (uint64_t)v44, (uint64_t)v45, v46, v47, v48, v49, v50);
                                              if (*v412
                                                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v271, (uint64_t)v44, (uint64_t)v45, v46, v47, v48, v49, v50))
                                              {
                                                v415 = 0;
                                                v272 = 0;
                                                v472 = *(_QWORD *)(v271 + 16);
                                              }
                                              else
                                              {
                                                v415 = 1;
                                                v272 = v525;
                                              }
                                              if ((v413 & 0x20) == 0)
                                              {
                                                do
                                                  v416 = __ldaxr(v412);
                                                while (__stlxr(v416 & 0xFFFFFFDF, v412));
                                              }
                                              v176 = v472;
                                              if (v415)
LABEL_395:
                                                v176 = vmEntryToJavaScript((uint64_t)v272, (JSC::VM *)v271, v474, v46, v47, v48, v49, v50);
                                              *(_BYTE *)(v271 + 93120) = 1;
                                              v472 = v176;
LABEL_210:
                                              if (*((_QWORD *)v496 + 2))
                                                goto LABEL_652;
                                              v531 = (uint64_t *)v176;
                                              if (v176 > 0xFFFDFFFFFFFFFFFFLL)
                                              {
                                                v177 = 0;
                                                v178 = (v176 >> 31) & 1;
                                                goto LABEL_213;
                                              }
                                              if ((v176 & 0xFFFFFFFFFFFFFFFELL) == 6)
                                              {
                                                v177 = 0;
                                                LOBYTE(v178) = v176 != 7;
LABEL_213:
                                                v153 = v494;
                                                v168 = v495;
                                              }
                                              else
                                              {
                                                if (v176 - 0x2000000000000 >= 0xFFFC000000000000)
                                                {
                                                  JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v531, v493, (uint64_t)v45, v46, v47, v48, v49, v50, (int8x16_t)v99);
                                                  v177 = *((_QWORD *)v496 + 2);
                                                }
                                                else
                                                {
                                                  v177 = 0;
                                                  v99.n128_u64[0] = v176 - 0x2000000000000;
                                                }
                                                v153 = v494;
                                                v168 = v495;
                                                LOBYTE(v178) = v99.n128_f64[0] < 0.0;
                                              }
                                              if (v177 || (v178 & 1) == 0)
                                              {
                                                if (v177)
                                                  goto LABEL_197;
                                                goto LABEL_217;
                                              }
                                            }
                                            ++v169;
                                          }
                                          *((_QWORD *)v153 + v167++) = *v172;
                                          if (v167 >= v161)
                                            goto LABEL_197;
                                          continue;
                                        }
                                      }
                                    }
                                    else
                                    {
                                      v99.n128_u64[0] = v166 - 0x2000000000000;
                                      if (COERCE_DOUBLE(v166 - 0x2000000000000) < 0.0)
                                        goto LABEL_196;
                                    }
                                  }
                                  else if ((v166 & 0x80000000) != 0)
                                  {
                                    goto LABEL_196;
                                  }
                                  v153 = v494;
LABEL_219:
                                  v179 = (_QWORD *)((char *)v153 + 8 * v490);
                                  v44 = (_QWORD *)((char *)v157 + 8 * v490);
                                  v180 = v161 - v490;
                                  v171 = v490;
                                  if (v180 == 1)
                                  {
                                    *v179 = *v44;
                                  }
                                  else if (v180)
                                  {
                                    memcpy(v179, v44, 8 * v180);
                                  }
LABEL_198:
                                  if (*((_QWORD *)v496 + 2))
                                  {
LABEL_534:
                                    v481 = v487;
                                    v484 = v95;
                                    goto LABEL_654;
                                  }
                                  v158 = v171 + v159;
                                  if (v158 >= v95)
                                  {
                                    v155 = v159;
                                    v156 = v157;
                                    v157 = v153;
                                    v114 = v487;
                                    if (v159 >= v95)
                                      goto LABEL_223;
                                    goto LABEL_180;
                                  }
                                }
                                v518 = 0;
                                LODWORD(v519) = 0;
                                *(_QWORD *)&v515 = 10;
                                if (HIDWORD(v519) && (v520 == v476 || !v520))
                                {
                                  *(_QWORD *)v520 = v164;
                                  LODWORD(v519) = 1;
                                }
                                else if (JSC::MarkedVectorBase::slowAppend(v473, v164, (uint64_t)v45, v46, v47, v48, v49, v50) == 1)
                                {
                                  v518 = 1;
                                }
                                v343 = v519;
                                if ((_DWORD)v519 == HIDWORD(v519) || v520 != v476 && v520)
                                {
                                  if (JSC::MarkedVectorBase::slowAppend(v473, v163, (uint64_t)v45, v46, v47, v48, v49, v50) == 1)
                                  {
                                    v518 = 1;
LABEL_639:
                                    JSC::throwOutOfMemoryError(v493, (JSC::JSGlobalObject *)&v531);
LABEL_538:
                                    v166 = 0;
                                    goto LABEL_193;
                                  }
                                }
                                else
                                {
                                  *((_QWORD *)v520 + v519) = v163;
                                  LODWORD(v519) = v343 + 1;
                                }
                                if (!v518)
                                {
                                  v344 = v512;
                                  v345 = v525;
                                  if (v525)
                                    goto LABEL_532;
                                  v424 = (unsigned int *)(v512 + 80);
                                  v425 = *(_DWORD *)(v512 + 80);
                                  if ((v425 & 0x20) == 0)
                                  {
                                    do
                                      v426 = __ldaxr(v424);
                                    while (__stlxr(v426 | 0x20, v424));
                                  }
                                  JSC::CachedCall::relink((JSC::CachedCall *)&v509, (uint64_t)v44, (uint64_t)v45, v46, v47, v48, v49, v50);
                                  if (*v424
                                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v344, (uint64_t)v44, (uint64_t)v45, v46, v47, v48, v49, v50))
                                  {
                                    v427 = 0;
                                    v345 = 0;
                                    v471 = *(_QWORD *)(v344 + 16);
                                  }
                                  else
                                  {
                                    v427 = 1;
                                    v345 = v525;
                                  }
                                  if ((v425 & 0x20) == 0)
                                  {
                                    do
                                      v428 = __ldaxr(v424);
                                    while (__stlxr(v428 & 0xFFFFFFDF, v424));
                                  }
                                  v154 = v489;
                                  v95 = v492;
                                  v155 = v479;
                                  v166 = v471;
                                  if (v427)
LABEL_532:
                                    v166 = vmEntryToJavaScript((uint64_t)v345, (JSC::VM *)v344, v474, v46, v47, v48, v49, v50);
                                  *(_BYTE *)(v344 + 93120) = 1;
                                  v471 = v166;
                                  goto LABEL_193;
                                }
                                goto LABEL_639;
                              }
                            }
                            v133 = 0;
                            LOBYTE(v509) = 0;
                            v494 = (JSC::MarkedVectorBase *)&v510;
                            v510 = 0x800000000;
                            v512 = 0u;
                            v513 = 0u;
                            v514 = 0u;
                            v515 = 0u;
                            v511 = (__int128 *)((char *)&v512 + 8);
                            v516 = 0;
                            v134 = v487;
                            v135 = v487;
LABEL_140:
                            if (v133 < v95)
                            {
                              v136 = v133 + 4;
                              if (v133 + 4 >= v95)
                                v137 = v95;
                              else
                                v137 = v133 + 4;
                              v138 = v137 - v133;
                              if (v137 - v133 < 2)
                              {
                                v152 = *((_QWORD *)v496 + 2);
                                goto LABEL_175;
                              }
                              v479 = v133 + 4;
                              v139 = (char *)v134 + 8 * v133;
                              v490 = (unint64_t)v135;
                              v140 = v135;
                              v141 = 1;
LABEL_146:
                              v142 = 0;
                              v143 = *(_QWORD *)&v139[8 * v141];
                              while (1)
                              {
                                v144 = *((_QWORD *)v140 + v142);
                                v533[0] = (int *)v496;
                                LOBYTE(v509) = 0;
                                LODWORD(v510) = 0;
                                if (HIDWORD(v510)
                                  && (v511 != (__int128 *)((char *)&v512 + 8) ? (v145 = v511 == 0) : (v145 = 1), v145))
                                {
                                  *(_QWORD *)v511 = v143;
                                  LODWORD(v510) = 1;
                                }
                                else if (JSC::MarkedVectorBase::slowAppend((uint64_t)v494, v143, (uint64_t)v45, v46, v47, v48, v49, v50) == 1)
                                {
                                  LOBYTE(v509) = 1;
                                }
                                v146 = v510;
                                if ((_DWORD)v510 == HIDWORD(v510) || v511 != (__int128 *)((char *)&v512 + 8) && v511)
                                {
                                  if (JSC::MarkedVectorBase::slowAppend((uint64_t)v494, v144, (uint64_t)v45, v46, v47, v48, v49, v50) == 1)
                                  {
                                    LOBYTE(v509) = 1;
LABEL_738:
                                    JSC::throwOutOfMemoryError(v493, (JSC::JSGlobalObject *)v533);
LABEL_739:
                                    if (*((_QWORD *)v496 + 2))
                                      goto LABEL_740;
LABEL_171:
                                    v151 = v141 + v142;
LABEL_172:
                                    *(_QWORD *)&v139[8 * v151] = v143;
                                    ++v141;
                                    v140 = (WTF *)((char *)v140 + 8);
                                    if (v141 < v138)
                                      goto LABEL_146;
                                    v152 = 0;
                                    v134 = v487;
                                    v95 = v492;
                                    v135 = (WTF *)v490;
                                    v136 = v479;
LABEL_175:
                                    v135 = (WTF *)((char *)v135 + 32);
                                    v133 = v136;
                                    v12 = v495;
                                    if (v152)
                                    {
                                      v481 = v134;
                                      goto LABEL_741;
                                    }
                                    goto LABEL_140;
                                  }
                                }
                                else
                                {
                                  *((_QWORD *)v511 + v510) = v144;
                                  LODWORD(v510) = v146 + 1;
                                }
                                if ((_BYTE)v509)
                                  goto LABEL_738;
                                v531 = (uint64_t *)v511;
                                LODWORD(v532) = v510;
                                v147 = JSC::call((uint64_t *)v493, v495, (unsigned __int8 *)&v527, 10, (uint64_t)&v531, v48, v49, v50);
                                if (*((_DWORD *)v496 + 20)
                                  && JSC::VM::hasExceptionsAfterHandlingTraps(v496, (uint64_t)v44, (uint64_t)v45, v46, v47, v48, v49, v50))
                                {
                                  goto LABEL_739;
                                }
                                v531 = (uint64_t *)v147;
                                if (v147 < 0xFFFE000000000000)
                                {
                                  if ((v147 & 0xFFFFFFFFFFFFFFFELL) == 6)
                                  {
                                    LODWORD(v149) = v147 != 7;
                                  }
                                  else
                                  {
                                    if (v147 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                                      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v531, v493, (uint64_t)v45, v46, v47, v48, v49, v50, v148);
                                    else
                                      *(_QWORD *)&v278 = v147 - 0x2000000000000;
                                    LODWORD(v149) = v278 < 0.0;
                                  }
                                }
                                else
                                {
                                  v149 = (v147 >> 31) & 1;
                                }
                                v150 = *((_QWORD *)v496 + 2);
                                if (v150 || !(_DWORD)v149)
                                {
                                  if (v150)
                                    goto LABEL_740;
                                  goto LABEL_171;
                                }
                                *((_QWORD *)v140 + v142-- + 1) = v144;
                                if (!(v141 + v142))
                                {
                                  v151 = 0;
                                  goto LABEL_172;
                                }
                              }
                            }
                            v206 = v134;
                            if (v71 < 5)
                              goto LABEL_337;
                            v207 = 4;
                            v208 = v481;
                            v209 = v134;
LABEL_272:
                            v210 = 0;
                            v206 = v208;
                            v478 = v207;
                            v479 = 2 * v207;
                            v490 = (unint64_t)v208;
                            while (1)
                            {
                              if (v210 + v207 >= v95)
                                v211 = v95;
                              else
                                v211 = v210 + v207;
                              if (v211 + v207 >= v95)
                                v212 = v95;
                              else
                                v212 = v211 + v207;
                              if (v211 >= v212)
                              {
LABEL_326:
                                v233 = (_QWORD *)((char *)v206 + 8 * v210);
                                v44 = (_QWORD *)((char *)v209 + 8 * v210);
                                v234 = v212 - v210;
                                if (v212 - v210 == 1)
                                {
                                  *v233 = *v44;
                                }
                                else if (v234)
                                {
                                  memcpy(v233, v44, 8 * v234);
                                }
LABEL_329:
                                if (*((_QWORD *)v496 + 2))
                                {
LABEL_740:
                                  v481 = v487;
                                  v95 = v492;
                                  goto LABEL_741;
                                }
                                goto LABEL_330;
                              }
                              v213 = (uint64_t *)((char *)v209 + 8 * v211);
                              v215 = *(v213 - 1);
                              v214 = *v213;
                              v533[0] = (int *)v496;
                              LOBYTE(v509) = 0;
                              LODWORD(v510) = 0;
                              if (HIDWORD(v510)
                                && (v511 != (__int128 *)((char *)&v512 + 8) ? (v216 = v511 == 0) : (v216 = 1), v216))
                              {
                                *(_QWORD *)v511 = v214;
                                LODWORD(v510) = 1;
                              }
                              else if (JSC::MarkedVectorBase::slowAppend((uint64_t)v494, v214, (uint64_t)v45, v46, v47, v48, v49, v50) == 1)
                              {
                                LOBYTE(v509) = 1;
                              }
                              v217 = v510;
                              if ((_DWORD)v510 == HIDWORD(v510) || v511 != (__int128 *)((char *)&v512 + 8) && v511)
                              {
                                if (JSC::MarkedVectorBase::slowAppend((uint64_t)v494, v215, (uint64_t)v45, v46, v47, v48, v49, v50) == 1)
                                {
                                  LOBYTE(v509) = 1;
LABEL_809:
                                  JSC::throwOutOfMemoryError(v493, (JSC::JSGlobalObject *)v533);
LABEL_810:
                                  LOBYTE(v220) = 0;
                                  goto LABEL_295;
                                }
                              }
                              else
                              {
                                *((_QWORD *)v511 + v510) = v215;
                                LODWORD(v510) = v217 + 1;
                              }
                              if ((_BYTE)v509)
                                goto LABEL_809;
                              v531 = (uint64_t *)v511;
                              LODWORD(v532) = v510;
                              v218 = JSC::call((uint64_t *)v493, v12, (unsigned __int8 *)&v527, 10, (uint64_t)&v531, v48, v49, v50);
                              if (*((_DWORD *)v496 + 20)
                                && JSC::VM::hasExceptionsAfterHandlingTraps(v496, (uint64_t)v44, (uint64_t)v45, v46, v47, v48, v49, v50))
                              {
                                goto LABEL_810;
                              }
                              v531 = (uint64_t *)v218;
                              if (v218 <= 0xFFFDFFFFFFFFFFFFLL)
                              {
                                if ((v218 & 0xFFFFFFFFFFFFFFFELL) == 6)
                                {
                                  LOBYTE(v220) = v218 != 7;
                                }
                                else
                                {
                                  if (v218 - 0x2000000000000 >= 0xFFFC000000000000)
                                    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v531, v493, (uint64_t)v45, v46, v47, v48, v49, v50, v219);
                                  else
                                    *(_QWORD *)&v386 = v218 - 0x2000000000000;
                                  LOBYTE(v220) = v386 < 0.0;
                                }
                                v95 = v492;
                              }
                              else
                              {
                                v220 = (v218 >> 31) & 1;
                              }
LABEL_295:
                              v206 = (WTF *)v490;
                              if (*((_QWORD *)v496 + 2))
                              {
                                v481 = v487;
LABEL_741:
                                JSC::MarkedVectorBase::~MarkedVectorBase(v494, v44, (uint64_t)v45, v46, v47, v48, v49, v50);
                                v484 = v95;
                                v320 = v493;
                                v154 = v489;
                                goto LABEL_742;
                              }
                              if ((v220 & 1) == 0)
                                goto LABEL_326;
                              v221 = v210;
                              v222 = v211;
                              v223 = v210;
                              if (v212 > v210)
                              {
                                while (1)
                                {
                                  if (v222 >= v212)
                                    goto LABEL_319;
                                  v224 = (uint64_t *)((char *)v209 + 8 * v222);
                                  if (v223 < v211)
                                  {
                                    v225 = *v224;
                                    v226 = *((_QWORD *)v209 + v223);
                                    v533[0] = (int *)v496;
                                    LOBYTE(v509) = 0;
                                    LODWORD(v510) = 0;
                                    if (HIDWORD(v510)
                                      && (v511 != (__int128 *)((char *)&v512 + 8) ? (v227 = v511 == 0) : (v227 = 1),
                                          v227))
                                    {
                                      *(_QWORD *)v511 = v225;
                                      LODWORD(v510) = 1;
                                    }
                                    else if (JSC::MarkedVectorBase::slowAppend((uint64_t)v494, v225, (uint64_t)v45, v46, v47, v48, v49, v50) == 1)
                                    {
                                      LOBYTE(v509) = 1;
                                    }
                                    v228 = v510;
                                    if ((_DWORD)v510 == HIDWORD(v510)
                                      || v511 != (__int128 *)((char *)&v512 + 8) && v511)
                                    {
                                      if (JSC::MarkedVectorBase::slowAppend((uint64_t)v494, v226, (uint64_t)v45, v46, v47, v48, v49, v50) == 1)
                                      {
                                        LOBYTE(v509) = 1;
LABEL_806:
                                        JSC::throwOutOfMemoryError(v493, (JSC::JSGlobalObject *)v533);
LABEL_807:
                                        v206 = (WTF *)v490;
                                        if (*((_QWORD *)v496 + 2))
                                          goto LABEL_740;
LABEL_319:
                                        v224 = (uint64_t *)((char *)v209 + 8 * v223++);
                                        goto LABEL_320;
                                      }
                                    }
                                    else
                                    {
                                      *((_QWORD *)v511 + v510) = v226;
                                      LODWORD(v510) = v228 + 1;
                                    }
                                    if ((_BYTE)v509)
                                      goto LABEL_806;
                                    v531 = (uint64_t *)v511;
                                    LODWORD(v532) = v510;
                                    v229 = JSC::call((uint64_t *)v493, v495, (unsigned __int8 *)&v527, 10, (uint64_t)&v531, v48, v49, v50);
                                    if (*((_DWORD *)v496 + 20)
                                      && JSC::VM::hasExceptionsAfterHandlingTraps(v496, (uint64_t)v44, (uint64_t)v45, v46, v47, v48, v49, v50))
                                    {
                                      goto LABEL_807;
                                    }
                                    v531 = (uint64_t *)v229;
                                    if (v229 <= 0xFFFDFFFFFFFFFFFFLL)
                                    {
                                      if ((v229 & 0xFFFFFFFFFFFFFFFELL) == 6)
                                      {
                                        LOBYTE(v231) = v229 != 7;
                                      }
                                      else
                                      {
                                        if (v229 - 0x2000000000000 >= 0xFFFC000000000000)
                                          JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v531, v493, (uint64_t)v45, v46, v47, v48, v49, v50, v230);
                                        else
                                          *(_QWORD *)&v384 = v229 - 0x2000000000000;
                                        LOBYTE(v231) = v384 < 0.0;
                                      }
                                    }
                                    else
                                    {
                                      v231 = (v229 >> 31) & 1;
                                    }
                                    v232 = *((_QWORD *)v496 + 2);
                                    v206 = (WTF *)v490;
                                    if (v232 || (v231 & 1) == 0)
                                    {
                                      if (v232)
                                        goto LABEL_740;
                                      goto LABEL_319;
                                    }
                                  }
                                  ++v222;
LABEL_320:
                                  *((_QWORD *)v206 + v221++) = *v224;
                                  if (v221 >= v212)
                                    goto LABEL_329;
                                }
                              }
LABEL_330:
                              v207 = v478;
                              v210 += v479;
                              v95 = v492;
                              v12 = v495;
                              if (v210 >= v492)
                              {
                                v207 = v479;
                                v208 = v209;
                                v209 = v206;
                                v134 = v487;
                                if (v479 >= v492)
                                {
LABEL_337:
                                  v235 = v481;
                                  if (v206 == v134)
                                    v235 = v134;
                                  v481 = v235;
                                  if (v206 != v134)
                                    v95 = v484;
                                  goto LABEL_741;
                                }
                                goto LABEL_272;
                              }
                            }
                          }
                        }
LABEL_804:
                        LOBYTE(v504) = 1;
                        goto LABEL_805;
                      }
                      if ((v67 - 6) < 2)
                      {
                        v267 = *(_QWORD **)(v40 + 8);
                        v268 = *((unsigned int *)v267 - 2);
                        if (v268 >= 0x41)
                        {
                          if ((v268 & 0x80000000) != 0)
                            goto LABEL_804;
                          WTF::tryFastMalloc((WTF *)(8 * v268), &v509);
                          v376 = v509;
                          if (!v509)
                            goto LABEL_804;
                          v377 = v505;
                          if ((_DWORD)v505)
                          {
                            v378 = 0;
                            do
                            {
                              v379 = v506;
                              *((_QWORD *)v376 + v378) = *((_QWORD *)v506 + v378);
                              v380 = *((_QWORD *)v379 + v378);
                              if (v507)
                                v381 = 0;
                              else
                                v381 = (v380 & 0xFFFE000000000002) == 0;
                              if (v381 && v380 != 0)
                              {
                                v430 = v380 - 16;
                                if ((v380 & 8) == 0)
                                  v430 = v380 & 0xFFFFFFFFFFFFC000 | 8;
                                v507 = (uint64_t *)(*(_QWORD *)v430 + 560);
                                v531 = (uint64_t *)v485;
                                WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v507, (uint64_t *)&v531, v371, v372, v373, v374, v375, (uint64_t)&v509);
                                v377 = v505;
                              }
                              ++v378;
                            }
                            while (v378 < v377);
                          }
                          if (v506 != v486 && v506 != 0)
                            WTF::fastFree((unint64_t)v506, v369, v370, v371, v372, v373, v374, v375);
                          v506 = v376;
                          HIDWORD(v505) = v268;
                          if ((_BYTE)v504)
                            goto LABEL_805;
                          v269 = v486;
                          if (v376 != v486)
                          {
                            v269 = v376;
                            if (!v507)
                            {
                              v507 = (uint64_t *)(v56 + 560);
                              v531 = (uint64_t *)v485;
                              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add((uint64_t *)(v56 + 560), (uint64_t *)&v531, v371, v372, v373, v374, v375, (uint64_t)&v509);
                              v269 = v506;
                            }
                          }
                        }
                        else
                        {
                          v269 = (WTF *)v508;
                        }
                        LODWORD(v505) = v268;
                        bzero(v269, 8 * v268);
                        v71 = 0;
                        if ((_DWORD)v268)
                        {
                          do
                          {
                            *((_QWORD *)v269 + v71++) = *v267++ + 0x2000000000000;
                            --v268;
                          }
                          while (v268);
                        }
                        if (!(_BYTE)v504)
                        {
                          v480 = 0;
                          v74 = 7;
                          goto LABEL_58;
                        }
                        goto LABEL_805;
                      }
LABEL_430:
                      v480 = 0;
                      v509 = 0;
                      while (1)
                      {
                        IfProperty = JSC::JSObject::getIfPropertyExists<unsigned long long>((_BYTE *)v40, (JSC::VM *)v10, (const WTF::StringImpl *)&v509, v46, v47, v48, v49, v50);
                        if (*(_DWORD *)(v56 + 80))
                        {
                          if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v56, (uint64_t)v44, (uint64_t)v45, v46, v47, v48, v49, v50))
                          {
                            goto LABEL_521;
                          }
                        }
                        if (IfProperty)
                        {
                          if (IfProperty == 10)
                          {
                            ++v480;
                          }
                          else
                          {
                            v282 = v505;
                            if ((_DWORD)v505 == HIDWORD(v505) || v506 != (WTF *)v508 && v506)
                            {
                              if (JSC::MarkedVectorBase::slowAppend((uint64_t)v485, IfProperty, (uint64_t)v45, v46, v47, v48, v49, v50) == 1)
                              {
                                LOBYTE(v504) = 1;
                                goto LABEL_518;
                              }
                            }
                            else
                            {
                              *((_QWORD *)v506 + v505) = IfProperty;
                              LODWORD(v505) = v282 + 1;
                            }
                            if ((_BYTE)v504)
                              goto LABEL_518;
                          }
                        }
                        v509 = (WTF *)((char *)v509 + 1);
                        if ((unint64_t)v509 >= v483)
                        {
                          v75 = v506;
                          v74 = 9;
                          v71 = v505;
                          goto LABEL_59;
                        }
                      }
                    }
                  }
                }
                else
                {
                  LOBYTE(v60) = *(_BYTE *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 8);
                }
                if ((v60 & 0x20) != 0)
                  goto LABEL_430;
                v66 = *(_QWORD *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x28);
                if (v66)
                {
                  if (*(_BYTE *)(*(_QWORD *)(v66 + 2048) + 4) == 2)
                    goto LABEL_430;
                }
                if ((JSC::Structure::holesMustForwardToPrototypeSlow(v58, (JSC::JSObject *)v40) & 1) != 0)
                  goto LABEL_430;
                goto LABEL_48;
              }
              v349 = *(_QWORD *)(*((_QWORD *)v348 + 5244) + 1768);
              v350 = (unsigned int *)v40;
              break;
            case '!':
              v387 = *(_QWORD *)(v40 + 40);
              if (v387
                && (!qword_1ECF4C038
                 || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
                 || (v387 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
              {
                v504 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v489, (uint64_t)v493, *(_QWORD *)(*((_QWORD *)v348 + 5244) + 1768), (uint64_t)a4, a5, a6, a7, a8);
                if (*((_DWORD *)v348 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v348, v469, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
                {
                  v388 = 0;
                }
                else
                {
                  v388 = JSC::JSValue::toUInt32(&v504, v493, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v470);
                }
              }
              else
              {
                v388 = *((_DWORD *)v489 + 8);
              }
              v55 = v388;
              goto LABEL_619;
            case '"':
              v40 = (uint64_t)v489;
              v10 = (uint64_t)v493;
              v55 = JSC::ScopedArguments::length(v489, v493, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              goto LABEL_620;
            default:
              v349 = *(_QWORD *)(*((_QWORD *)v348 + 5244) + 1768);
              v350 = (unsigned int *)v489;
              break;
          }
          v504 = (JSC::JSObject *)JSC::JSObject::get(v350, (uint64_t)v493, v349, (uint64_t)a4, a5, a6, a7, a8);
          if (*((_DWORD *)v348 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v348, v351, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
          {
            v55 = 0;
            goto LABEL_619;
          }
          goto LABEL_551;
        }
        v274 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v40, (JSC::SymbolObject **)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_421:
        v40 = v274;
        goto LABEL_26;
      }
      v40 = 10;
    }
    v504 = (JSC::JSObject *)v40;
    v274 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v504, (JSC::JSGlobalObject *)v10, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_421;
  }
  if ((v12 & 0xFFFE000000000002) == 0)
  {
    v13 = *(unsigned __int8 *)(v12 + 5);
    if (v13 >= 0x17)
    {
      if ((v13 & 0xFE) == 0x1A
        || (*(_BYTE *)(v12 + 6) & 4) != 0
        && ((*(void (**)(JSC::JSObject **__return_ptr, _QWORD))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0x38))(&v504, *((_QWORD *)a2 + 6)), (_BYTE)v504))
      {
        v51 = 0;
        goto LABEL_23;
      }
    }
  }
  v14 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v14 = 0x5300000002;
  *(_QWORD *)(v14 + 8) = "Array.prototype.sort requires the comparator argument to be a function or undefined";
  *(_DWORD *)(v14 + 16) = 4;
  v499 = (WTF::StringImpl *)v14;
  v22 = *(_QWORD *)(v10 + 176);
  v23 = *(_QWORD *)(v10 + 56);
  if ((v22 & 1) != 0)
  {
    v332 = *(uint64_t (**)(JSC::JSObject **))(v22 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v10 & 8) != 0)
      v333 = (JSC::JSObject **)(v10 - 16);
    else
      v333 = (JSC::JSObject **)(v10 & 0xFFFFFFFFFFFFC000 | 8);
    v504 = *v333;
    v505 = v10;
    v506 = (WTF *)(v10 + 176);
    v22 = v332(&v504);
  }
  v24 = *(JSC::Heap **)(v23 + 40448);
  if (!v24)
    v24 = JSC::GCClient::Heap::errorInstanceSpaceSlow((JSC::Heap **)(v23 + 37552));
  SlowCase = *((_QWORD *)v24 + 3);
  if (SlowCase >= *((_QWORD *)v24 + 4))
  {
    SlowCase = *((_QWORD *)v24 + 5);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v23, v15, v16, v17, v18, v19, v20, v21);
      SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v24, v23 + 192, 64, 0, 0, v421, v422, v423);
      goto LABEL_12;
    }
    v334 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v24 + 6);
    *((_QWORD *)v24 + 4) = SlowCase + HIDWORD(v334);
    *((_QWORD *)v24 + 5) = SlowCase + (int)v334;
  }
  *((_QWORD *)v24 + 3) = SlowCase + 64;
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  v26 = *(_DWORD *)(v22 + 8);
  *(_DWORD *)SlowCase = v22 >> 4;
  *(_DWORD *)(SlowCase + 4) = v26;
  v498 = v22;
  *(_WORD *)(SlowCase + 56) = 0;
  *(_OWORD *)(SlowCase + 40) = 0u;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 8) = 0u;
  *(_BYTE *)(SlowCase + 58) = 5;
  *(_BYTE *)(SlowCase + 59) = *(_BYTE *)(SlowCase + 59) & 0xE0 | 0x10;
  JSC::ErrorInstance::finishCreation(SlowCase, v23, &v499, 0, 0, 0, 1, v21, (__n128)0);
  if ((SlowCase & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x4C)))
  {
    SlowCase = JSC::Exception::create(v11, (JSC::VM *)SlowCase, 0, v27, v28, v29, v30, v31);
  }
  v40 = (uint64_t)JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)v10, (JSC::Exception *)SlowCase, v32, v27, v28, v29, v30, v31);
  v41 = v499;
  v499 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v33, v34, v35, v36, v37, v38, v39);
LABEL_19:
      WTF::fastFree((unint64_t)v43, v44, (uint64_t)v45, v46, v47, v48, v49, v50);
      return v40;
    }
    *(_DWORD *)v41 -= 2;
  }
  return v40;
}

uint64_t JSC::arrayProtoFuncSplice(uint64_t this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::JSArray *v9;
  uint64_t v10;
  unsigned int v11;
  JSC::JSArray *v12;
  unsigned int v13;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int *v19;
  double v20;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  JSC::VM *v32;
  JSC::Structure *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t SlowCase;
  unint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  _DWORD *v67;
  _DWORD *v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _DWORD *v77;
  _DWORD *v78;
  __int128 v79;
  unint64_t v80;
  JSC::VM *v81;
  uint64_t v82;
  JSC::JSString *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  JSC::Butterfly *v94;
  char v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  JSC::JSGlobalObject *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unint64_t v113;
  unint64_t v114;
  int DirectOffset;
  void (*v116)(unint64_t, uint64_t, WTF::StringImpl *, unint64_t, WTF::StringImpl **);
  WTF::StringImpl *v117;
  int v118;
  int isArraySlow;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  uint64_t IfProperty;
  unint64_t v128;
  unint64_t v129;
  uint64_t **v130;
  char v131;
  uint64_t v132;
  int *v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  JSC::JSCell *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  unint64_t v158;
  uint64_t v159;
  JSC::VM *v160;
  JSC::CallFrame *v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  unsigned int v165;
  int v166;
  unint64_t v167;
  int v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  unint64_t v172;
  JSC::Heap **v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  double v180;
  JSC::Exception *v181;
  JSC::VM *v182;
  WTF::AtomStringImpl *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  unint64_t v191;
  unint64_t v192;
  int v193;
  unint64_t v194;
  double v195;
  int *v196;
  int v197;
  _WORD *v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int v202;
  unsigned int v203;
  uint64_t v204;
  int v205;
  unint64_t v206;
  WTF::Thread *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  __n128 v222;
  unint64_t v223;
  JSC::VM *v224;
  uint64_t IndexQuickly;
  JSC::VM *v226;
  const WTF::StringImpl *v227;
  uint64_t v228;
  unint64_t v229;
  WTF::AtomStringImpl *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int v248;
  unsigned __int16 *v249;
  uint64_t v250;
  unsigned int v251;
  BOOL v252;
  unint64_t v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  JSC::JSCell *v261;
  JSC::CallFrame *v262;
  uint64_t v263;
  char OwnStaticPropertySlot;
  JSC::CallFrame *v265;
  _DWORD *v266;
  _DWORD *v267;
  __int128 v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  BOOL v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  __n128 v286;
  WTF::StringImpl *v287;
  BOOL v288;
  unint64_t v289;
  void *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  unint64_t v298;
  int v299;
  JSC::CallFrame *v300;
  int v301;
  _WORD *v302;
  uint64_t v303;
  unsigned int v304;
  uint64_t v305;
  unsigned int v306;
  unsigned int v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  const JSC::PropertyTable *v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int isArray;
  __n128 v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int v328;
  BOOL v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  __n128 v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  __n128 v345;
  uint64_t v346;
  const WTF::String *v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  WTF::StringImpl *v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  uint64_t (*v358)(WTF::StringImpl **);
  int **v359;
  BOOL v360;
  uint64_t v361;
  const WTF::String *v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  WTF::StringImpl *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  JSC::CallFrame *v377;
  uint64_t v378;
  BOOL v379;
  void (*v380)(unint64_t, uint64_t, WTF::StringImpl *, unint64_t, WTF::StringImpl **);
  WTF::StringImpl *v381;
  BOOL v382;
  double v383;
  unsigned __int16 *v384;
  uint64_t v385;
  unsigned int v386;
  uint64_t v387;
  uint64_t **v388;
  WTF::StringImpl *v389;
  double v390;
  JSC::Butterfly *v391;
  unint64_t v392;
  void *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  int v402;
  uint64_t v403;
  int v404;
  int v405;
  uint64_t v406;
  char v407;
  uint64_t v408;
  unint64_t v409;
  void *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  void *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  unint64_t UninitializedRestricted;
  uint64_t v427;
  uint64_t v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t v431;
  JSC::CallFrame *v432;
  uint64_t v433;
  unsigned int *v434;
  uint64_t v435;
  WTF::StringImpl *v436;
  int v437;
  char v438;
  unint64_t v439;
  void *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  __int128 v449;
  unint64_t v450;
  int v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  _BYTE *v456;
  uint64_t v457;
  unsigned __int16 *v458;
  uint64_t v459;
  unsigned int v460;
  uint64_t v461;
  uint64_t v462;
  int v463;
  unsigned int v464;
  uint64_t v465;
  unsigned __int8 *v466;
  int v467;
  int v468;
  unint64_t v469;
  JSC::VM **v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  _BOOL4 isConstructor;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  JSC::JSString *v482;
  unint64_t v483;
  uint64_t v484;
  unsigned int v485;
  unint64_t v486;
  unint64_t v487;
  uint64_t v488;
  JSC::JSString *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t v493;
  int v494;
  _BYTE *v495;
  uint64_t v496;
  uint64_t v497;
  JSC::VM *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  unint64_t v502;
  unsigned int v503;
  uint64_t v504;
  uint64_t v505;
  const WTF::String *v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  int v515;
  int v516;
  void *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  int v524;
  _BYTE *v525;
  uint64_t v526;
  uint64_t v527;
  _BOOL4 v528;
  unsigned __int16 *v529;
  uint64_t v530;
  unsigned int v531;
  uint64_t v532;
  unsigned int *v533;
  uint64_t v534;
  double v535;
  const unsigned __int8 *v536;
  BOOL v537;
  uint64_t v538;
  int v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  unsigned int v543;
  uint64_t v544;
  unsigned __int8 *v545;
  unsigned int v546;
  uint64_t v547;
  const WTF::String *v548;
  unint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  WTF::AtomStringImpl *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  WTF::StringImpl *v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  int v566;
  unsigned __int16 *v567;
  uint64_t v568;
  unsigned int v569;
  unint64_t v570;
  void *v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  unsigned int *v579;
  uint64_t v580;
  WTF::StringImpl *Index;
  int v582;
  char v583;
  unsigned int v584;
  int v585;
  _BYTE *v586;
  uint64_t v587;
  uint64_t v588;
  unsigned __int16 *v589;
  uint64_t v590;
  unsigned int v591;
  uint64_t v592;
  unsigned __int8 *v593;
  unsigned int v594;
  uint64_t v595;
  char v596;
  int v597;
  unsigned int v598;
  uint64_t v599;
  unsigned __int8 *v600;
  int v601;
  unsigned __int8 *v602;
  uint64_t v603;
  unsigned int v604;
  uint64_t v605;
  _DWORD *v606;
  double v607;
  const unsigned __int8 *v608;
  unsigned __int8 *v609;
  uint64_t v610;
  unsigned int v611;
  JSC::VM *v612;
  uint64_t v613;
  char v614;
  int v615;
  uint64_t v616;
  unsigned __int8 *v617;
  uint64_t v618;
  unsigned int v619;
  JSC::VM *v620;
  uint64_t v621;
  int v622;
  int v623;
  int v624;
  uint64_t v625;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned __int8 *v627;
  uint64_t v628;
  unsigned int v629;
  uint64_t v630;
  JSC::JSString *v631;
  unint64_t v632;
  JSC::CallFrame *v633;
  char v634;
  unint64_t v635;
  JSC::VM *v636;
  JSC::VM *v637;
  JSC::JSArray *v638;
  unint64_t v639;
  unint64_t v640;
  int v641;
  JSC::VM *v642;
  JSC::VM *v643;
  JSC::VM *v644;
  unint64_t v645;
  unint64_t v646;
  unint64_t v647;
  unint64_t v649;
  unint64_t v651;
  JSC::VM *v652;
  JSC::JSString *v653;
  int v654;
  JSC::JSString *v655;
  WTF::StringImpl *v656;
  uint64_t v657;
  unint64_t v658;
  JSC::JSString *v659;
  uint64_t v660;
  _QWORD v661[2];
  uint64_t v662;
  char v663;
  uint64_t v664;
  uint64_t v665;
  JSC::VM *v666;
  WTF::StringImpl *v667;
  uint64_t v668;
  WTF::StringImpl *v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  uint64_t v674;
  uint64_t v675;

  v675 = *MEMORY[0x1E0C80C00];
  v9 = *(JSC::JSArray **)(this + 56);
  v652 = v9;
  v10 = *((_QWORD *)a2 + 5);
  v638 = v9;
  if ((v10 & 0xFFFE000000000002) != 0)
    goto LABEL_226;
  v651 = *((_QWORD *)a2 + 5);
  v11 = *(unsigned __int8 *)(v10 + 5);
  if (v11 - 51 < 6)
  {
    v10 = 10;
LABEL_226:
    v667 = (WTF::StringImpl *)v10;
    v114 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v667, (JSC::JSGlobalObject *)this, (JSC::Structure *)a3, a4, a5, a6, a7, a8);
    goto LABEL_227;
  }
  if (v11 >= 0x17)
  {
    v12 = v9;
    goto LABEL_5;
  }
  v114 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v651, (JSC::SymbolObject **)this, a3, (JSC::Symbol *)a4, a5, a6, a7, a8);
LABEL_227:
  if (!v114)
    return 0;
  v12 = *(JSC::JSArray **)(this + 56);
  v651 = v114;
  v11 = *(unsigned __int8 *)(v114 + 5);
  v9 = v638;
LABEL_5:
  switch(v11)
  {
    case '$':
      if ((*(_BYTE *)(v651 + 4) & 0xE) != 0)
        v13 = *(_DWORD *)(*(_QWORD *)(v651 + 8) - 8);
      else
        v13 = 0;
      v14 = v13;
      goto LABEL_9;
    case '#':
      if ((*(_BYTE *)((16 * *(unsigned int *)v651) | 0x12) & 0x20) != 0)
      {
        v667 = (WTF::StringImpl *)JSC::JSObject::get((unsigned int *)v651, this, *(_QWORD *)(*((_QWORD *)v12 + 5244) + 1768), a4, a5, a6, a7, a8);
        if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12, v387, a3, a4, a5, a6, a7, a8))
        {
LABEL_655:
          v14 = 0;
          goto LABEL_368;
        }
      }
      else
      {
        v196 = *(int **)(*(_QWORD *)(v651 + 8) - 16);
        v667 = (WTF::StringImpl *)v196;
        if ((unint64_t)v196 >= 0xFFFE000000000000)
        {
          v14 = v196 & ~((int)v196 >> 31);
          goto LABEL_368;
        }
      }
      v14 = JSC::JSValue::toLength(&v667, (JSC::JSGlobalObject *)this, a3, a4, a5, a6, a7, a8, (int8x16_t)a9);
      goto LABEL_368;
    case '!':
      v247 = *(_QWORD *)(v651 + 40);
      if (v247
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v247 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        v667 = (WTF::StringImpl *)JSC::JSObject::get((unsigned int *)v651, this, *(_QWORD *)(*((_QWORD *)v12 + 5244) + 1768), a4, a5, a6, a7, a8);
        if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12, v538, a3, a4, a5, a6, a7, a8))
          v248 = 0;
        else
          v248 = JSC::JSValue::toUInt32(&v667, (JSC::JSGlobalObject *)this, a3, a4, a5, a6, a7, a8, (int8x16_t)a9);
      }
      else
      {
        v248 = *(_DWORD *)(v651 + 32);
      }
      break;
    case '"':
      v248 = JSC::ScopedArguments::length((JSC::ScopedArguments *)v651, (JSC::JSGlobalObject *)this, a3, a4, a5, a6, a7, a8);
      break;
    default:
      v133 = (int *)JSC::JSObject::get((unsigned int *)v651, this, *(_QWORD *)(*((_QWORD *)v12 + 5244) + 1768), a4, a5, a6, a7, a8);
      v667 = (WTF::StringImpl *)v133;
      if (!*((_DWORD *)v12 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v12, v132, a3, a4, a5, a6, a7, a8))
      {
        if ((unint64_t)v133 < 0xFFFE000000000000)
        {
          a9.n128_f64[0] = JSC::JSValue::toIntegerOrInfinity(&v667, (JSC::JSGlobalObject *)this, a3, a4, a5, a6, a7, a8, (int8x16_t)a9);
          v390 = 9.00719925e15;
          if (a9.n128_f64[0] <= 9.00719925e15)
            v390 = a9.n128_f64[0];
          if (a9.n128_f64[0] > 0.0)
            v14 = (unint64_t)v390;
          else
            v14 = 0;
        }
        else
        {
          v14 = v133 & ~((int)v133 >> 31);
        }
        goto LABEL_368;
      }
      goto LABEL_655;
  }
  v14 = v248;
LABEL_368:
  v9 = v638;
LABEL_9:
  if (*((_DWORD *)v9 + 20))
  {
    v134 = *((_DWORD *)v9 + 20);
    if ((v134 & 0x27) != 0 && (v134 & 0x20) == 0)
    {
      JSC::VMTraps::handleTraps((JSC::JSArray *)((char *)v638 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v9 = v638;
    }
    if (*((_QWORD *)v9 + 2))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v314 = v14;
    v315 = *(_QWORD *)(this + 56);
    v653 = (JSC::JSString *)10;
    isArray = JSC::isArray((JSC *)this, (JSC::JSGlobalObject *)v651, (JSC::ProxyObject *)a3);
    if (*(_DWORD *)(v315 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v315, v316, v317, (uint64_t)v318, v319, v320, v321, v322))
    {
      return 0;
    }
    if (!isArray)
      goto LABEL_545;
    v325 = *(_QWORD *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 0x28);
    v326 = *(_QWORD *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 0x30);
    if (!v326)
      v326 = *(_QWORD *)(v651 + 16);
    v329 = v326 == *(_QWORD *)(v325 + 672)
        && ((v327 = *(_QWORD *)(v325 + 2280), (v327 & 1) != 0)
          ? (v328 = (v327 >> 1) & 3)
          : (v328 = *(unsigned __int8 *)(v327 + 4)),
            v328 == 1)
        && ((*(_BYTE *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 0x12) & 0x20) == 0
         || JSC::JSObject::getDirectOffset((_DWORD *)v651, (JSC::VM *)v315, *(_QWORD *)(*(_QWORD *)(v315 + 41952) + 1080), v318, v319, v320, v321, v322) == -1);
    if (*(_DWORD *)(v315 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v315, v316, v317, (uint64_t)v318, v319, v320, v321, v322))
    {
      return 0;
    }
    if (v329)
      goto LABEL_545;
    v653 = (JSC::JSString *)JSC::JSObject::get((unsigned int *)v651, this, *(_QWORD *)(*(_QWORD *)(v315 + 41952) + 1080), (uint64_t)v318, v319, v320, v321, v322);
    if (*(_DWORD *)(v315 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v315, v471, v472, v473, v474, v475, v476, v477))
    {
      return 0;
    }
    isConstructor = JSC::JSValue::isConstructor((JSC::JSValue *)&v653);
    v482 = v653;
    if (isConstructor
      && *(_QWORD *)(16 * (*(_DWORD *)v653 & 0xFFFFFFFE) + 0x28) != this
      && &JSC::ArrayConstructor::s_info == (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v653 & 0xFFFFFFFE) + 0x4C)))
    {
      goto LABEL_545;
    }
    if (((unint64_t)v653 & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)v653 + 5) < 0x17u)
      goto LABEL_832;
    v483 = *(_QWORD *)(*(_QWORD *)(v315 + 41952) + 2752);
    v324.n128_u64[0] = 0xFFFFFFFF00000000;
    v658 = 0xFFFFFFFF00000000;
    LOBYTE(v662) = 0;
    v663 = 0;
    v664 = 0;
    v665 = 0;
    v660 = 0;
    memset(v661, 0, 13);
    v659 = v653;
    v484 = *(_QWORD *)(this + 56);
    v485 = *((unsigned __int8 *)v653 + 5);
    if (v485 > 0x16)
      goto LABEL_781;
    if (v485 != 2)
    {
LABEL_967:
      v563 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v653, this);
      if (!v563)
        goto LABEL_840;
      v482 = (JSC::JSString *)v563;
      v484 = *(_QWORD *)(this + 56);
LABEL_781:
      v486 = (unint64_t)v482 + 6;
      v487 = v483 >> 4;
      v488 = (uint64_t)v482;
      if ((*((_BYTE *)v482 + 6) & 8) == 0)
      {
        v489 = v482;
        while (1)
        {
          v490 = *(_DWORD *)v489 & 0xFFFFFFFE;
          v491 = 16 * v490;
          if ((_DWORD)v487)
          {
            if ((v487 & ~*(_DWORD *)(16 * v490 + 0x20)) == 0)
            {
              JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v491, (JSC::VM *)v484, v480, (const JSC::PropertyTable *)v481, v319, v320, v321, v322);
              if (v492)
              {
                v667 = (WTF::StringImpl *)v483;
                v493 = JSC::PropertyTable::get(v492, (uint64_t *)&v667);
                v320 = v493;
                if ((_DWORD)v493 != -1)
                {
                  v319 = HIDWORD(v493);
                  if ((int)v493 <= 63)
                  {
                    v513 = (uint64_t)v489 + 16;
                    v514 = v493 << 32;
                  }
                  else
                  {
                    v513 = *((_QWORD *)v489 + 1) - 8;
                    v514 = 0x3F00000000 - (v493 << 32);
                  }
                  v481 = *(_QWORD *)(v513 + (v514 >> 29));
                  if ((v481 & 0xFFFE000000000002) == 0)
                  {
                    v515 = *(unsigned __int8 *)(v481 + 5);
                    if (v515 == 5)
                    {
                      v533 = (unsigned int *)v489;
                      v534 = v484;
                      goto LABEL_865;
                    }
                    if (v515 == 6)
                    {
                      v539 = *(_DWORD *)(v491 + 16) & 3;
                      v540 = *(_QWORD *)(v481 + 16);
                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)v481 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
                      {
                        v542 = *(_QWORD *)(v481 + 24);
                        v541 = *(_QWORD *)(v481 + 32);
                        v656 = *(WTF::StringImpl **)(v481 + 8);
                        v657 = v540;
                        LODWORD(v658) = HIDWORD(v493);
                        v660 = (uint64_t)v489;
                        goto LABEL_894;
                      }
                      v656 = *(WTF::StringImpl **)(v481 + 8);
                      v657 = v540;
                      LODWORD(v658) = HIDWORD(v493);
                      v660 = (uint64_t)v489;
                      goto LABEL_989;
                    }
                  }
                  v656 = (WTF::StringImpl *)v481;
                  v660 = (uint64_t)v489;
LABEL_824:
                  v658 = __PAIR64__(v320, v319);
                  LOWORD(v661[1]) = 257;
                  goto LABEL_825;
                }
              }
            }
          }
          if ((*(_BYTE *)v486 & 0x20) != 0
            && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v489, (JSC::VM *)v484, v483, (uint64_t)&v656) & 1) != 0)
          {
            goto LABEL_825;
          }
          v488 = *(_QWORD *)(v491 + 48);
          if (!v488)
            v488 = *((_QWORD *)v489 + 2);
          if ((v488 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v488 + 5) < 0x17u)
            break;
          v486 = v488 + 6;
          v489 = (JSC::JSString *)v488;
          if ((*(_BYTE *)(v488 + 6) & 8) != 0)
            goto LABEL_793;
        }
        if (v483)
        {
          v524 = *(_DWORD *)(v483 + 16);
          if ((v524 & 0x20) == 0)
          {
            v525 = *(_BYTE **)(v483 + 8);
            v526 = *(unsigned int *)(v483 + 4);
            if ((v524 & 4) != 0)
            {
              if (!(_DWORD)v526)
                goto LABEL_840;
              v527 = *v525 - 48;
              if (v527 > 9 || v526 >= 2 && *v525 == 48)
                goto LABEL_840;
              v609 = v525 + 1;
              v610 = v526 - 1;
              v499 = 10;
              while (v610)
              {
                if (v527 <= 0x19999999)
                {
                  v611 = *v609 - 48;
                  if (v611 <= 9)
                  {
                    v252 = __CFADD__(v611, 10 * v527);
                    v527 = v611 + 10 * (_DWORD)v527;
                    ++v609;
                    --v610;
                    if (!v252)
                      continue;
                  }
                }
                goto LABEL_827;
              }
            }
            else
            {
              if (!(_DWORD)v526)
                goto LABEL_840;
              v527 = *(unsigned __int16 *)v525 - 48;
              if (v527 > 9 || *(_WORD *)v525 == 48 && v526 > 1)
                goto LABEL_840;
              v529 = (unsigned __int16 *)(v525 + 2);
              v530 = v526 - 1;
              v499 = 10;
              while (v530)
              {
                if (v527 <= 0x19999999)
                {
                  v531 = *v529 - 48;
                  if (v531 <= 9)
                  {
                    v252 = __CFADD__(v531, 10 * v527);
                    v527 = v531 + 10 * (_DWORD)v527;
                    ++v529;
                    --v530;
                    if (!v252)
                      continue;
                  }
                }
                goto LABEL_827;
              }
            }
            if ((_DWORD)v527 != -1)
            {
              v612 = *(JSC::VM **)(this + 56);
              v499 = 10;
              while (1)
              {
                v613 = 16 * (*(_DWORD *)v482 & 0xFFFFFFFE);
                v614 = (*(uint64_t (**)(JSC::JSString *, uint64_t, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v613 + 0x4C) + 0x70))(v482, this, v527, &v656);
                if (*((_DWORD *)v612 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v612, v479, v480, v481, v319, v320, v321, v322))
                {
                  break;
                }
                if ((v614 & 1) != 0)
                  goto LABEL_825;
                if (BYTE2(v661[1]) == 3)
                {
                  if (BYTE4(v661[1]))
                    break;
                  v615 = *((unsigned __int8 *)v482 + 5);
                  if (v615 == 61)
                    goto LABEL_1150;
                }
                else
                {
                  v615 = *((unsigned __int8 *)v482 + 5);
                  if (v615 == 61)
                  {
                    if (BYTE2(v661[1]) == 1)
                      break;
                    goto LABEL_1150;
                  }
                }
                if ((v615 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length(v482, v479, v480, v481, v319, v320, v321, v322) <= v527)
                {
                  break;
                }
LABEL_1150:
                if ((*(_WORD *)(v613 + 12) & 0x800) == 0 || BYTE2(v661[1]) == 3)
                {
                  v616 = *(_QWORD *)(16 * (*(_DWORD *)v482 & 0xFFFFFFFE) + 0x30);
                  if (!v616)
                    v616 = *((_QWORD *)v482 + 2);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v482 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v616 = (*(uint64_t (**)(JSC::JSString *, uint64_t))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v482 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(v482, this);
                  }
                  else
                  {
                    v616 = *(_QWORD *)(16 * (*(_DWORD *)v482 & 0xFFFFFFFE) + 0x30);
                    if (!v616)
                      v616 = *((_QWORD *)v482 + 2);
                  }
                  if (*((_DWORD *)v612 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v612, v479, v480, v481, v319, v320, v321, v322))
                  {
                    break;
                  }
                }
                if ((v616 & 0xFFFE000000000002) == 0)
                {
                  v482 = (JSC::JSString *)v616;
                  if (*(unsigned __int8 *)(v616 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_827;
              }
            }
          }
        }
LABEL_840:
        v499 = 10;
        goto LABEL_827;
      }
LABEL_793:
      if (v483)
      {
        v494 = *(_DWORD *)(v483 + 16);
        if ((v494 & 0x20) == 0)
        {
          v495 = *(_BYTE **)(v483 + 8);
          v496 = *(unsigned int *)(v483 + 4);
          if ((v494 & 4) != 0)
          {
            if ((_DWORD)v496)
            {
              v497 = *v495 - 48;
              if (v497 <= 9 && (v496 < 2 || *v495 != 48))
              {
                v617 = v495 + 1;
                v618 = v496 - 1;
                while (v618)
                {
                  if (v497 <= 0x19999999)
                  {
                    v619 = *v617 - 48;
                    if (v619 <= 9)
                    {
                      v252 = __CFADD__(v619, 10 * v497);
                      v497 = v619 + 10 * (_DWORD)v497;
                      ++v617;
                      --v618;
                      if (!v252)
                        continue;
                    }
                  }
                  goto LABEL_798;
                }
LABEL_1184:
                if ((_DWORD)v497 != -1)
                {
                  v620 = *(JSC::VM **)(this + 56);
                  v499 = 10;
                  while (1)
                  {
                    v621 = 16 * (*(_DWORD *)v482 & 0xFFFFFFFE);
                    v622 = (*(uint64_t (**)(JSC::JSString *, uint64_t, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v621 + 0x4C) + 0x70))(v482, this, v497, &v656);
                    v623 = v622;
                    if (*((_DWORD *)v620 + 20))
                    {
                      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v620, v479, v480, v481, v319, v320, v321, v322);
                      if (((hasExceptionsAfterHandlingTraps | v623) & 1) != 0)
                      {
                        if (!hasExceptionsAfterHandlingTraps)
                          goto LABEL_825;
                        goto LABEL_840;
                      }
                    }
                    else if ((v622 & 1) != 0)
                    {
                      goto LABEL_825;
                    }
                    if (BYTE2(v661[1]) == 3)
                    {
                      if (BYTE4(v661[1]))
                        goto LABEL_840;
                      v624 = *((unsigned __int8 *)v482 + 5);
                      if (v624 == 61)
                        goto LABEL_1191;
                    }
                    else
                    {
                      v624 = *((unsigned __int8 *)v482 + 5);
                      if (v624 == 61)
                      {
                        if (BYTE2(v661[1]) == 1)
                          goto LABEL_840;
                        goto LABEL_1191;
                      }
                    }
                    if ((v624 - 39) <= 0xA
                      && JSC::JSArrayBufferView::length(v482, v479, v480, v481, v319, v320, v321, v322) <= v497)
                    {
                      goto LABEL_840;
                    }
LABEL_1191:
                    if ((*(_WORD *)(v621 + 12) & 0x800) == 0 || BYTE2(v661[1]) == 3)
                    {
                      v625 = *(_QWORD *)(16 * (*(_DWORD *)v482 & 0xFFFFFFFE) + 0x30);
                      if (!v625)
                        v625 = *((_QWORD *)v482 + 2);
                    }
                    else
                    {
                      if ((*(_WORD *)(16 * (*(_DWORD *)v482 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                      {
                        v625 = (*(uint64_t (**)(JSC::JSString *, uint64_t))(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)v482 & 0xFFFFFFFE) + 0x4C)
                                                                                   + 0xB0))(v482, this);
                      }
                      else
                      {
                        v625 = *(_QWORD *)(16 * (*(_DWORD *)v482 & 0xFFFFFFFE) + 0x30);
                        if (!v625)
                          v625 = *((_QWORD *)v482 + 2);
                      }
                      if (*((_DWORD *)v620 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v620, v479, v480, v481, v319, v320, v321, v322))
                      {
                        goto LABEL_840;
                      }
                    }
                    if ((v625 & 0xFFFE000000000002) == 0)
                    {
                      v482 = (JSC::JSString *)v625;
                      if (*(unsigned __int8 *)(v625 + 5) > 0x16u)
                        continue;
                    }
                    goto LABEL_827;
                  }
                }
              }
            }
          }
          else if ((_DWORD)v496)
          {
            v497 = *(unsigned __int16 *)v495 - 48;
            if (v497 <= 9 && (*(_WORD *)v495 != 48 || v496 <= 1))
            {
              v567 = (unsigned __int16 *)(v495 + 2);
              v568 = v496 - 1;
              while (v568)
              {
                if (v497 <= 0x19999999)
                {
                  v569 = *v567 - 48;
                  if (v569 <= 9)
                  {
                    v252 = __CFADD__(v569, 10 * v497);
                    v497 = v569 + 10 * (_DWORD)v497;
                    ++v567;
                    --v568;
                    if (!v252)
                      continue;
                  }
                }
                goto LABEL_798;
              }
              goto LABEL_1184;
            }
          }
        }
      }
LABEL_798:
      v498 = *(JSC::VM **)(this + 56);
      v499 = 10;
      while (1)
      {
        v500 = 16 * (*(_DWORD *)v488 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v488 + 6) & 8) != 0)
        {
          v596 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v488 & 0xFFFFFFFE) + 0x4C) + 0x68))(v488, this, v483, &v656);
          if (*((_DWORD *)v498 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v498, v479, v480, v481, v319, v320, v321, v322))
          {
            goto LABEL_840;
          }
          if ((v596 & 1) != 0)
            goto LABEL_825;
          if (BYTE2(v661[1]) == 3)
          {
            if (BYTE4(v661[1]))
              goto LABEL_840;
            v597 = *(unsigned __int8 *)(v488 + 5);
            if (v597 != 61)
            {
LABEL_1073:
              if (!v483)
                goto LABEL_805;
              if ((v597 - 50) < 0xFFFFFFF5)
                goto LABEL_805;
              v598 = *(_DWORD *)(v483 + 16);
              if ((v598 & 0x20) != 0)
                goto LABEL_805;
              v599 = *(unsigned int *)(v483 + 4);
              if (!(_DWORD)v599)
                goto LABEL_805;
              v600 = *(unsigned __int8 **)(v483 + 8);
              if ((v598 & 4) == 0)
              {
                v601 = *(unsigned __int16 *)v600;
                if ((_DWORD)v599 == 1)
                  goto LABEL_1079;
                if (v601 == 45)
                {
                  v601 = *((unsigned __int16 *)v600 + 1);
                  goto LABEL_1107;
                }
                if ((v601 - 48) >= 0xA && ((_DWORD)v599 != 8 || v601 != 73))
                {
LABEL_1129:
                  if ((_DWORD)v599 != 3 || v601 != 78)
                    goto LABEL_805;
                }
LABEL_1120:
                v486 = v486 & 0xFFFFFF0000000000 | v599 | ((unint64_t)((v598 >> 2) & 1) << 32);
                JSC::jsToNumber(v600, v486);
                WTF::numberToString(&v667, v607);
                if (WTF::equal(v483, (unint64_t)&v667, v608))
                  goto LABEL_840;
                goto LABEL_805;
              }
              v601 = *v600;
              if ((_DWORD)v599 == 1)
              {
LABEL_1079:
                if ((v601 - 48) < 0xA)
                  goto LABEL_840;
                goto LABEL_805;
              }
              if (v601 == 45)
              {
                v601 = v600[1];
LABEL_1107:
                if ((v601 - 48) < 0xA)
                {
                  if ((_DWORD)v599 == 2)
                    goto LABEL_840;
                  goto LABEL_1120;
                }
                if ((_DWORD)v599 != 9)
                  goto LABEL_805;
              }
              else
              {
                if ((v601 - 48) < 0xA)
                  goto LABEL_1120;
                if ((_DWORD)v599 != 8)
                  goto LABEL_1129;
              }
              if (v601 != 73)
                goto LABEL_805;
              goto LABEL_1120;
            }
          }
          else
          {
            v597 = *(unsigned __int8 *)(v488 + 5);
            if (v597 != 61)
              goto LABEL_1073;
            if (BYTE2(v661[1]) == 1)
              goto LABEL_840;
          }
        }
        else
        {
          if ((_DWORD)v487)
          {
            if ((v487 & ~*(_DWORD *)(16 * (*(_DWORD *)v488 & 0xFFFFFFFE) + 0x20)) == 0)
            {
              JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v488 & 0xFFFFFFFE)), v498, v480, (const JSC::PropertyTable *)v481, v319, v320, v321, v322);
              if (v501)
              {
                v667 = (WTF::StringImpl *)v483;
                v502 = JSC::PropertyTable::get(v501, (uint64_t *)&v667);
                v320 = v502;
                if ((_DWORD)v502 != -1)
                {
                  v319 = HIDWORD(v502);
                  if ((int)v502 <= 63)
                  {
                    v564 = v488 + 16;
                    v565 = v502 << 32;
                  }
                  else
                  {
                    v564 = *(_QWORD *)(v488 + 8) - 8;
                    v565 = 0x3F00000000 - (v502 << 32);
                  }
                  v481 = *(_QWORD *)(v564 + (v565 >> 29));
                  if ((v481 & 0xFFFE000000000002) == 0)
                  {
                    v566 = *(unsigned __int8 *)(v481 + 5);
                    if (v566 != 5)
                    {
                      if (v566 != 6)
                        goto LABEL_976;
                      v539 = *(_DWORD *)(v500 + 16) & 3;
                      v588 = *(_QWORD *)(v481 + 16);
                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)v481 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
                      {
                        v542 = *(_QWORD *)(v481 + 24);
                        v541 = *(_QWORD *)(v481 + 32);
                        v656 = *(WTF::StringImpl **)(v481 + 8);
                        v657 = v588;
                        LODWORD(v658) = HIDWORD(v502);
                        v660 = v488;
LABEL_894:
                        BYTE1(v661[1]) = 3;
                        if (v539 != 2)
                          LOBYTE(v661[1]) = 1;
                        BYTE3(v661[1]) = 1;
                        v664 = v542;
                        v665 = v541;
LABEL_825:
                        if (BYTE1(v661[1]) == 1)
                        {
                          v499 = (uint64_t)v656;
                        }
                        else
                        {
                          if (BYTE1(v661[1]) == 2)
                            v532 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v656, (JSC::JSGlobalObject *)this, v480, v481, v319, v320, v321, v322);
                          else
                            v532 = JSC::PropertySlot::customGetter((uint64_t)&v656, *(JSC::VM **)(this + 56), (WTF::StringImpl *)v483);
                          v499 = v532;
                        }
LABEL_827:
                        if (v663)
                        {
                          v516 = *(_DWORD *)(v662 + 4);
                          if (!v516)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1988A7478);
                          }
                          *(_DWORD *)(v662 + 4) = v516 - 1;
                        }
                        v653 = (JSC::JSString *)v499;
                        if (*(_DWORD *)(v315 + 80))
                        {
                          if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v315, v479, v480, v481, v319, v320, v321, v322))
                          {
                            return 0;
                          }
                          v499 = (uint64_t)v653;
                        }
                        v482 = (JSC::JSString *)v499;
                        if (v499 != 2)
                        {
LABEL_832:
                          if (v482 != (JSC::JSString *)10)
                          {
                            LOBYTE(v667) = 0;
                            v668 = 0x800000000;
                            v670 = 0u;
                            v671 = 0u;
                            v672 = 0u;
                            v673 = 0u;
                            v669 = (WTF::StringImpl *)((char *)&v670 + 8);
                            v674 = 0;
                            JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v667, 0xFFFE000000000000, v480, v481, v319, v320, v321, v322);
                            v656 = v669;
                            LODWORD(v657) = v668;
                            v69 = JSC::construct(this, (uint64_t)v653, (uint64_t)&v656, (uint64_t)"Species construction did not get a valid constructor", 53);
                            if (*(_DWORD *)(v315 + 80)
                              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v315, (uint64_t)v517, v518, v519, v520, v521, v522, v523))
                            {
                              JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v668, v517, v518, v519, v520, v521, v522, v523);
                              return 0;
                            }
                            JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v668, v517, v518, v519, v520, v521, v522, v523);
                            goto LABEL_546;
                          }
                        }
LABEL_545:
                        v69 = JSC::constructEmptyArray(this, 0, 0, 0, v319, v320, v321, v322, v324);
                        if (*((_DWORD *)v652 + 20)
                          && JSC::VM::hasExceptionsAfterHandlingTraps(v652, v330, v331, v332, v333, v334, v335, v336))
                        {
                          return 0;
                        }
LABEL_546:
                        if (*(_BYTE *)(v69 + 5) == 36)
                        {
                          JSC::JSArray::setLength((JSC::JSArray *)v69, (JSC::VM **)this, 0, 1, v333, v334, v335, v336, v337);
                        }
                        else
                        {
                          v667 = 0;
                          v668 = v69;
                          LODWORD(v669) = -1;
                          BYTE4(v669) = BYTE4(v669) & 0xF8 | 1;
                          *(_WORD *)((char *)&v669 + 5) = 0;
                          HIBYTE(v669) = 1;
                          *(_QWORD *)&v670 = 0;
                          (*(void (**)(unint64_t, uint64_t, _QWORD, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v69 & 0xFFFFFFFE) + 0x4C) + 0x48))(v69, this, *(_QWORD *)(*((_QWORD *)v638 + 5244) + 1768), 0xFFFE000000000000, &v667);
                        }
                        if (*((_DWORD *)v652 + 20)
                          && JSC::VM::hasExceptionsAfterHandlingTraps(v652, v338, v339, v340, v341, v342, v343, v344))
                        {
                          return 0;
                        }
                        if (*(_BYTE *)(v651 + 5) == 36)
                        {
                          if (!HIDWORD(v314))
                          {
                            JSC::JSArray::setLength((JSC::JSArray *)v651, (JSC::VM **)this, v314, 1, v341, v342, v343, v344, v345);
                            return v69;
                          }
                          v505 = WTF::fastCompactMalloc((WTF *)0x20);
                          *(_QWORD *)v505 = 0x1400000002;
                          *(_QWORD *)(v505 + 8) = "Invalid array length";
                          *(_DWORD *)(v505 + 16) = 4;
                          v667 = (WTF::StringImpl *)v505;
                          v507 = JSC::createRangeError(this, &v667, v506);
                          JSC::VM::throwException(v638, (JSC::JSGlobalObject *)this, v507, v508, v509, v510, v511, v512);
                          v190 = v667;
                          v667 = 0;
                          if (!v190)
                            return v69;
                          goto LABEL_341;
                        }
LABEL_335:
                        v667 = 0;
                        v668 = v651;
                        LODWORD(v669) = -1;
                        BYTE4(v669) = BYTE4(v669) & 0xF8 | 1;
                        *(_WORD *)((char *)&v669 + 5) = 0;
                        HIBYTE(v669) = 1;
                        *(_QWORD *)&v670 = 0;
                        (*(void (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 0x4C) + 0x48))();
                        return v69;
                      }
                      v656 = *(WTF::StringImpl **)(v481 + 8);
                      v657 = v588;
                      LODWORD(v658) = HIDWORD(v502);
                      v660 = v488;
LABEL_989:
                      BYTE1(v661[1]) = 3;
                      if (v539 != 2)
                        LOBYTE(v661[1]) = 1;
                      goto LABEL_825;
                    }
                    v533 = (unsigned int *)v488;
                    v534 = (uint64_t)v498;
LABEL_865:
                    JSC::JSObject::fillGetterPropertySlot(v533, v534, (uint64_t)&v656, v481, v319, v320);
                    goto LABEL_825;
                  }
LABEL_976:
                  v656 = (WTF::StringImpl *)v481;
                  v660 = v488;
                  goto LABEL_824;
                }
              }
            }
          }
          if ((*(_BYTE *)(v488 + 6) & 0x20) != 0
            && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v488, v498, v483, (uint64_t)&v656) & 1) != 0)
          {
            goto LABEL_825;
          }
        }
LABEL_805:
        if ((*(_WORD *)(v500 + 12) & 0x800) == 0)
        {
          v503 = *(_DWORD *)v488;
LABEL_807:
          v504 = *(_QWORD *)(16 * (v503 & 0xFFFFFFFE) + 0x30);
          if (!v504)
            v504 = *(_QWORD *)(v488 + 16);
          goto LABEL_809;
        }
        v503 = *(_DWORD *)v488;
        if (BYTE2(v661[1]) == 3)
          goto LABEL_807;
        v595 = 16 * (v503 & 0xFFFFFFFE);
        if ((*(_WORD *)(v595 + 12) & 0x800) != 0)
        {
          v504 = (*(uint64_t (**)(uint64_t, uint64_t))(16 * *(unsigned int *)(v595 + 76) + 0xB0))(v488, this);
        }
        else
        {
          v504 = *(_QWORD *)(v595 + 48);
          if (!v504)
            v504 = *(_QWORD *)(v488 + 16);
        }
        if (*((_DWORD *)v498 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v498, v479, v480, v481, v319, v320, v321, v322))
        {
          goto LABEL_840;
        }
LABEL_809:
        if ((v504 & 0xFFFE000000000002) == 0)
        {
          v488 = v504;
          if (*(unsigned __int8 *)(v504 + 5) > 0x16u)
            continue;
        }
        goto LABEL_827;
      }
    }
    if (*(_QWORD *)(*(_QWORD *)(v484 + 41952) + 1768) == v483)
    {
      v578 = *((_QWORD *)v653 + 1);
      if ((v578 & 1) != 0)
        v579 = (unsigned int *)((char *)v653 + 16);
      else
        v579 = (unsigned int *)(v578 + 4);
      v580 = *v579;
      if ((v580 & 0x80000000) != 0)
      {
        v324.n128_f64[0] = (double)v580;
        Index = (WTF::StringImpl *)(COERCE__INT64((double)v580) + 0x2000000000000);
      }
      else
      {
        Index = (WTF::StringImpl *)(v580 | 0xFFFE000000000000);
      }
      v582 = 14;
      goto LABEL_1003;
    }
    if (v483)
    {
      v585 = *(_DWORD *)(v483 + 16);
      if ((v585 & 0x20) == 0)
      {
        v586 = *(_BYTE **)(v483 + 8);
        v587 = *(unsigned int *)(v483 + 4);
        if ((v585 & 4) != 0)
        {
          if (!(_DWORD)v587)
            goto LABEL_1018;
          v480 = *v586 - 48;
          if (v480 > 9 || v587 >= 2 && *v586 == 48)
            goto LABEL_1018;
          v627 = v586 + 1;
          v628 = v587 - 1;
          while (v628)
          {
            if (v480 > 0x19999999)
              goto LABEL_1018;
            v629 = *v627 - 48;
            if (v629 > 9)
              goto LABEL_1018;
            v583 = 0;
            v252 = __CFADD__(v629, 10 * v480);
            v480 = v629 + 10 * (_DWORD)v480;
            ++v627;
            --v628;
            if (v252)
              goto LABEL_1004;
          }
        }
        else
        {
          if (!(_DWORD)v587)
            goto LABEL_1018;
          v480 = *(unsigned __int16 *)v586 - 48;
          if (v480 > 9 || *(_WORD *)v586 == 48 && v587 > 1)
            goto LABEL_1018;
          v589 = (unsigned __int16 *)(v586 + 2);
          v590 = v587 - 1;
          while (v590)
          {
            if (v480 > 0x19999999)
              goto LABEL_1018;
            v591 = *v589 - 48;
            if (v591 > 9)
              goto LABEL_1018;
            v583 = 0;
            v252 = __CFADD__(v591, 10 * v480);
            v480 = v591 + 10 * (_DWORD)v480;
            ++v589;
            --v590;
            if (v252)
              goto LABEL_1004;
          }
        }
        if ((_DWORD)v480 != -1)
        {
          v630 = *((_QWORD *)v653 + 1);
          v631 = (v630 & 1) != 0 ? (JSC::JSString *)((char *)v653 + 16) : (JSC::JSString *)(v630 + 4);
          if (*(_DWORD *)v631 > v480)
          {
            Index = (WTF::StringImpl *)JSC::JSString::getIndex(v653, (JSC::JSGlobalObject *)this, v480, v481, v319, v320, v321, v322, (int8x16_t)v324);
            if (!*(_DWORD *)(v484 + 80)
              || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v484, v479, v480, v481, v319, v320, v321, v322))
            {
              v582 = 10;
LABEL_1003:
              v656 = Index;
              LODWORD(v658) = v582;
              v660 = 0;
              v583 = 1;
              BYTE1(v661[1]) = 1;
              goto LABEL_1004;
            }
          }
        }
      }
    }
LABEL_1018:
    v583 = 0;
LABEL_1004:
    if (*(_DWORD *)(v484 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v484, v479, v480, v481, v319, v320, v321, v322))
    {
      goto LABEL_840;
    }
    if ((v583 & 1) != 0)
      goto LABEL_825;
    goto LABEL_967;
  }
  v15 = (int *)*((_QWORD *)a2 + 6);
  v667 = (WTF::StringImpl *)v15;
  if (v15 == (int *)10)
  {
    v649 = 0;
  }
  else
  {
    if ((unint64_t)v15 < 0xFFFE000000000000)
    {
      v194 = (unint64_t)(v15 - 0x800000000000);
      if (v194 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase(&v667, (JSC::JSGlobalObject *)this, a3, a4, a5, a6, a7, a8, (int8x16_t)a9);
        v9 = v638;
      }
      else
      {
        a9.n128_u64[0] = v194;
      }
      a9.n128_f64[0] = trunc(a9.n128_f64[0] + 0.0);
      v195 = (double)v14;
      if (a9.n128_f64[0] < 0.0)
      {
        a9.n128_f64[0] = a9.n128_f64[0] + v195;
        if (a9.n128_f64[0] <= 0.0)
          a9.n128_f64[0] = 0.0;
        v17 = (unint64_t)a9.n128_f64[0];
      }
      else
      {
        v17 = (unint64_t)a9.n128_f64[0];
        if (a9.n128_f64[0] > v195)
          v17 = v14;
      }
    }
    else
    {
      if ((int)v15 >= v14)
        v16 = v14;
      else
        v16 = (int)v15;
      if ((int)v15 < 0)
        v17 = ((int)v15 + v14) & ~((uint64_t)((int)v15 + v14) >> 63);
      else
        v17 = v16;
    }
    v649 = v17;
  }
  if (*((_DWORD *)v9 + 20))
  {
    v135 = *((_DWORD *)v9 + 20);
    if ((v135 & 0x27) != 0 && (v135 & 0x20) == 0)
    {
      JSC::VMTraps::handleTraps((JSC::JSArray *)((char *)v638 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v9 = v638;
    }
    if (*((_QWORD *)v9 + 2))
      return 0;
  }
  v18 = v14 - v649;
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    v22 = v14 - v649;
  }
  else
  {
    v19 = (int *)*((_QWORD *)a2 + 7);
    v667 = (WTF::StringImpl *)v19;
    if ((unint64_t)v19 < 0xFFFE000000000000)
    {
      v109 = (unint64_t)(v19 - 0x800000000000);
      if (v109 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase(&v667, (JSC::JSGlobalObject *)this, a3, a4, a5, a6, a7, a8, (int8x16_t)a9);
        v9 = v638;
      }
      else
      {
        a9.n128_u64[0] = v109;
      }
      a9.n128_f64[0] = trunc(a9.n128_f64[0] + 0.0);
    }
    else
    {
      a9.n128_f64[0] = (double)(int)v19;
    }
    if (*((_DWORD *)v9 + 20))
    {
      v136 = *((_DWORD *)v9 + 20);
      if ((v136 & 0x27) != 0 && (v136 & 0x20) == 0)
      {
        v647 = a9.n128_u64[0];
        JSC::VMTraps::handleTraps((JSC::JSArray *)((char *)v638 + 64), 7u, a3, a4, a5, a6, a7, a8);
        v9 = v638;
        a9.n128_u64[0] = v647;
      }
      if (*((_QWORD *)v9 + 2))
        return 0;
    }
    v20 = (double)v18;
    if (a9.n128_f64[0] >= 0.0 && a9.n128_f64[0] <= v20)
    {
      v22 = (unint64_t)a9.n128_f64[0];
    }
    else if (a9.n128_f64[0] < 0.0)
    {
      v22 = 0;
    }
    else
    {
      v22 = v14 - v649;
      if (a9.n128_f64[0] <= v20)
        v22 = (unint64_t)a9.n128_f64[0];
    }
  }
  v23 = *((_DWORD *)a2 + 8) - 3;
  v646 = v23 & ~(v23 >> 31);
  v639 = v14 - v22;
  if ((v14 - v22 + v646) >> 53)
    return JSC::throwTypeError(this, &v652, (uint64_t)"Splice cannot produce an array of length larger than (2 ** 53) - 1", 67);
  v645 = v14 - v22 + v646;
  v24 = *(_QWORD *)(this + 56);
  v655 = (JSC::JSString *)10;
  v640 = v22;
  if ((v651 & 0xFFFE000000000002) != 0)
    goto LABEL_191;
  v25 = *(unsigned __int8 *)(v651 + 5);
  if (v25 < 0x17)
    goto LABEL_191;
  if (v25 - 36 < 2)
  {
    v26 = 1;
    goto LABEL_36;
  }
  if (v25 == 61)
  {
    isArraySlow = JSC::isArraySlow((JSC *)this, (JSC::JSGlobalObject *)v651, (JSC::ProxyObject *)a3);
    v22 = v640;
    v26 = isArraySlow;
  }
  else
  {
LABEL_191:
    v26 = 0;
  }
LABEL_36:
  if (*(_DWORD *)(v24 + 80))
  {
    v137 = *(_DWORD *)(v24 + 80);
    if ((v137 & 0x27) != 0 && (v137 & 0x20) == 0)
    {
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v24 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v22 = v640;
    }
    if (*(_QWORD *)(v24 + 16))
      return 10;
  }
  if (!v26)
    goto LABEL_48;
  v27 = *(_QWORD *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 0x28);
  v28 = *(_QWORD *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 0x30);
  if (!v28)
    v28 = *(_QWORD *)(v651 + 16);
  if (v28 == *(_QWORD *)(v27 + 672)
    && ((v29 = *(_QWORD *)(v27 + 2280), (v29 & 1) != 0)
      ? (v30 = (v29 >> 1) & 3)
      : (v30 = *(unsigned __int8 *)(v29 + 4)),
        v30 == 1))
  {
    if ((*(_BYTE *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
    {
      DirectOffset = JSC::JSObject::getDirectOffset((_DWORD *)v651, (JSC::VM *)v24, *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 1080), (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
      v22 = v640;
      v31 = DirectOffset == -1;
    }
    else
    {
      v31 = 1;
    }
  }
  else
  {
    v31 = 0;
  }
  if (*(_DWORD *)(v24 + 80))
  {
    v138 = *(_DWORD *)(v24 + 80);
    if ((v138 & 0x27) != 0 && (v138 & 0x20) == 0)
    {
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v24 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v22 = v640;
    }
    if (*(_QWORD *)(v24 + 16))
      return 10;
  }
  if (v31)
    goto LABEL_48;
  v140 = JSC::JSObject::get((unsigned int *)v651, this, *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 1080), a4, a5, a6, a7, a8);
  v655 = (JSC::JSString *)v140;
  if (*(_DWORD *)(v24 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v24, (uint64_t)v139, a3, a4, a5, a6, a7, a8))
      return 10;
    v140 = (uint64_t)v655;
  }
  if ((v140 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v140 + 5) < 0x17u
    || ((*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v140 & 0xFFFFFFFE)
                                                                                          + 0x4C)
                                                                        + 0x40))(&v667, v140), v140 = (uint64_t)v655, !(_BYTE)v667))
  {
    v22 = v640;
  }
  else
  {
    v22 = v640;
    if (*(_QWORD *)(16 * (*(_DWORD *)v655 & 0xFFFFFFFE) + 0x28) != this
      && &JSC::ArrayConstructor::s_info == (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v655 & 0xFFFFFFFE) + 0x4C)))
    {
      goto LABEL_48;
    }
  }
  if ((v140 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v140 + 5) < 0x17u)
  {
LABEL_384:
    if (v140 == 10)
      goto LABEL_48;
    LOBYTE(v667) = 0;
    HIDWORD(v668) = 8;
    v670 = 0u;
    v671 = 0u;
    v672 = 0u;
    v673 = 0u;
    v669 = (WTF::StringImpl *)((char *)&v670 + 8);
    v674 = 0;
    if (HIDWORD(v22))
    {
      v383 = (double)v22;
    }
    else
    {
      if ((v22 & 0x80000000) == 0)
      {
        v206 = v22 | 0xFFFE000000000000;
        goto LABEL_388;
      }
      v383 = (double)v22;
    }
    v206 = *(_QWORD *)&v383 + 0x2000000000000;
LABEL_388:
    *((_QWORD *)&v670 + 1) = v206;
    LODWORD(v668) = 1;
    v653 = (JSC::JSString *)((char *)&v670 + 8);
    v654 = 1;
    v666 = *(JSC::VM **)(this + 56);
    if ((v140 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v656) = 0;
    }
    else
    {
      v207 = (WTF::Thread *)v140;
      if (*(_BYTE *)(v140 + 5) == 26)
        JSC::JSFunction::getConstructData((uint64_t *)&v656, (uint64_t *)v140, v139);
      else
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v140 & 0xFFFFFFFE)
                                                                                          + 0x4C)
                                                                        + 0x40))(&v656, v140);
      if ((_BYTE)v656)
      {
        v69 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(this + 56) + 90560), v207, (unsigned __int8 *)&v656, (uint64_t)&v653, v207, v208, v209, v210);
        goto LABEL_393;
      }
    }
    JSC::throwTypeError(this, &v666, (uint64_t)"Species construction did not get a valid constructor", 53);
    v69 = 0;
LABEL_393:
    if (!*(_DWORD *)(v24 + 80)
      || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v24, (uint64_t)v211, v212, v213, v214, v215, v216, v217))
    {
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v668, v211, v212, v213, v214, v215, v216, v217);
      goto LABEL_395;
    }
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v668, v211, v212, v213, v214, v215, v216, v217);
    return 10;
  }
  a3 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2752);
  a9.n128_u64[0] = 0xFFFFFFFF00000000;
  v658 = 0xFFFFFFFF00000000;
  LOBYTE(v662) = 0;
  v663 = 0;
  v664 = 0;
  v665 = 0;
  v660 = 0;
  memset(v661, 0, 13);
  v659 = (JSC::JSString *)v140;
  v141 = *(_QWORD *)(this + 56);
  v142 = *(unsigned __int8 *)(v140 + 5);
  if (v142 > 0x16)
    goto LABEL_297;
  if (v142 != 2)
    goto LABEL_588;
  v432 = (JSC::CallFrame *)a3;
  if (*(_QWORD *)(*(_QWORD *)(v141 + 41952) + 1768) == a3)
  {
    v433 = *(_QWORD *)(v140 + 8);
    if ((v433 & 1) != 0)
      v434 = (unsigned int *)(v140 + 16);
    else
      v434 = (unsigned int *)(v433 + 4);
    v435 = *v434;
    if ((v435 & 0x80000000) != 0)
    {
      a9.n128_f64[0] = (double)v435;
      v436 = (WTF::StringImpl *)(COERCE__INT64((double)v435) + 0x2000000000000);
    }
    else
    {
      v436 = (WTF::StringImpl *)(v435 | 0xFFFE000000000000);
    }
    v437 = 14;
    goto LABEL_696;
  }
  if (a3)
  {
    v455 = *(_DWORD *)(a3 + 16);
    if ((v455 & 0x20) == 0)
    {
      v456 = *(_BYTE **)(a3 + 8);
      v457 = *(unsigned int *)(a3 + 4);
      if ((v455 & 4) != 0)
      {
        if (!(_DWORD)v457)
          goto LABEL_720;
        a3 = *v456 - 48;
        if (a3 > 9 || v457 >= 2 && *v456 == 48)
          goto LABEL_720;
        v602 = v456 + 1;
        v603 = v457 - 1;
        while (v603)
        {
          if (a3 > 0x19999999)
            goto LABEL_720;
          v604 = *v602 - 48;
          if (v604 > 9)
            goto LABEL_720;
          v438 = 0;
          v252 = __CFADD__(v604, 10 * a3);
          a3 = v604 + 10 * (_DWORD)a3;
          ++v602;
          --v603;
          if (v252)
            goto LABEL_697;
        }
      }
      else
      {
        if (!(_DWORD)v457)
          goto LABEL_720;
        a3 = *(unsigned __int16 *)v456 - 48;
        if (a3 > 9 || *(_WORD *)v456 == 48 && v457 > 1)
          goto LABEL_720;
        v458 = (unsigned __int16 *)(v456 + 2);
        v459 = v457 - 1;
        while (v459)
        {
          if (a3 > 0x19999999)
            goto LABEL_720;
          v460 = *v458 - 48;
          if (v460 > 9)
            goto LABEL_720;
          v438 = 0;
          v252 = __CFADD__(v460, 10 * a3);
          a3 = v460 + 10 * (_DWORD)a3;
          ++v458;
          --v459;
          if (v252)
            goto LABEL_697;
        }
      }
      if ((_DWORD)a3 != -1)
      {
        v605 = *(_QWORD *)(v140 + 8);
        v606 = (_DWORD *)((v605 & 1) != 0 ? v140 + 16 : v605 + 4);
        if (*v606 > a3)
        {
          v436 = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v140, (JSC::JSGlobalObject *)this, a3, a4, a5, a6, a7, a8, (int8x16_t)a9);
          if (!*(_DWORD *)(v141 + 80)
            || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v141, (uint64_t)v139, a3, a4, a5, a6, a7, a8))
          {
            v437 = 10;
LABEL_696:
            v656 = v436;
            LODWORD(v658) = v437;
            v660 = 0;
            v438 = 1;
            BYTE1(v661[1]) = 1;
            goto LABEL_697;
          }
        }
      }
    }
  }
LABEL_720:
  v438 = 0;
LABEL_697:
  if (*(_DWORD *)(v141 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v141, (uint64_t)v139, a3, a4, a5, a6, a7, a8))
  {
    goto LABEL_875;
  }
  v22 = v640;
  a3 = (uint64_t)v432;
  if ((v438 & 1) != 0)
    goto LABEL_417;
LABEL_588:
  v377 = (JSC::CallFrame *)a3;
  v378 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v655, this);
  if (!v378)
  {
LABEL_875:
    v204 = 10;
    goto LABEL_452;
  }
  v140 = v378;
  v141 = *(_QWORD *)(this + 56);
  v22 = v640;
  a3 = (uint64_t)v377;
LABEL_297:
  v143 = (_BYTE *)(v140 + 6);
  v139 = (JSC::JSCell *)((unint64_t)a3 >> 4);
  v144 = v140;
  if ((*(_BYTE *)(v140 + 6) & 8) == 0)
  {
    v145 = v140;
    do
    {
      v146 = *(_DWORD *)v145 & 0xFFFFFFFE;
      v147 = 16 * v146;
      if (!(_DWORD)v139 || (v139 & ~*(_DWORD *)(16 * v146 + 0x20)) != 0)
        goto LABEL_310;
      v148 = *(_QWORD *)(16 * v146 + 0x58);
      if (!v148)
      {
        v159 = *(_QWORD *)(16 * v146 + 0x40);
        if (!v159 || *(_BYTE *)(v159 + 5) != 1 && *(_DWORD *)(v159 + 80) < 2u)
          goto LABEL_310;
        v642 = v139;
        v160 = (JSC::VM *)v141;
        v161 = (JSC::CallFrame *)a3;
        v162 = v141;
        v163 = v140;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v147, v160, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        v22 = v640;
        v139 = v642;
        v140 = v163;
        v141 = v162;
        a3 = (uint64_t)v161;
        if (!v148)
          goto LABEL_310;
      }
      if (!*(_DWORD *)(v148 + 24))
        goto LABEL_310;
      v149 = *(_QWORD *)(v148 + 16);
      v150 = v149 & 0xFFFFFFFFFFFFFFFELL;
      v151 = *(unsigned int *)(v148 + 8);
      v152 = *(_DWORD *)(a3 + 16);
      if ((v149 & 1) != 0)
      {
        if ((v152 & 0x20) != 0)
          v152 = *(_DWORD *)(a3 + 32);
        v153 = *(_DWORD *)(v148 + 12);
        v154 = (v152 >> 8) & *(_QWORD *)&v153;
        v155 = *(unsigned __int8 *)(v150 + v154);
        if (!*(_BYTE *)(v150 + v154))
          goto LABEL_310;
        v156 = v150 + v151;
        v157 = 1;
        while (1)
        {
          v158 = *(_QWORD *)(v156 + 8 * (v155 - 1));
          if (a3 == (v158 & 0xFFFFFFFFFFFFLL))
            break;
          v154 = ((_DWORD)v154 + v157) & v153;
          v155 = *(unsigned __int8 *)(v150 + v154);
          ++v157;
          if (!*(_BYTE *)(v150 + v154))
            goto LABEL_310;
        }
        a6 = (v158 >> 16) & 0xFF00000000 | HIBYTE(v158);
      }
      else
      {
        if ((v152 & 0x20) != 0)
          v152 = *(_DWORD *)(a3 + 32);
        v164 = *(_DWORD *)(v148 + 12);
        v165 = v164 & (v152 >> 8);
        v166 = *(_DWORD *)(v150 + 4 * v165);
        if (!v166)
          goto LABEL_310;
        v167 = v150 + 4 * v151;
        v168 = 1;
        while (1)
        {
          v169 = (v166 - 1);
          if (a3 == *(_QWORD *)(v167 + 16 * v169))
            break;
          v165 = (v165 + v168) & v164;
          v166 = *(_DWORD *)(v150 + 4 * v165);
          ++v168;
          if (!v166)
            goto LABEL_310;
        }
        a6 = *(unsigned int *)(v167 + 16 * v169 + 8) | ((unint64_t)*(unsigned __int8 *)(v167 + 16 * v169 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v242 = v145 + 16;
          v243 = a6 << 32;
        }
        else
        {
          v242 = *(_QWORD *)(v145 + 8) - 8;
          v243 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v242 + (v243 >> 29));
        if ((a4 & 0xFFFE000000000002) != 0)
          goto LABEL_416;
        v244 = *(unsigned __int8 *)(a4 + 5);
        if (v244 == 5)
        {
          v265 = (JSC::CallFrame *)a3;
          JSC::JSObject::fillGetterPropertySlot((unsigned int *)v145, v141, (uint64_t)&v656, a4, SHIDWORD(a6), a6);
          a3 = (uint64_t)v265;
LABEL_457:
          v22 = v640;
          goto LABEL_417;
        }
        if (v244 != 6)
        {
LABEL_416:
          v656 = (WTF::StringImpl *)a4;
          v660 = v145;
          v658 = __PAIR64__(a6, HIDWORD(a6));
          LOWORD(v661[1]) = 257;
          goto LABEL_417;
        }
        v277 = *(_DWORD *)(v147 + 16) & 3;
        v278 = *(_QWORD *)(a4 + 16);
        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
        {
          v280 = *(_QWORD *)(a4 + 24);
          v279 = *(_QWORD *)(a4 + 32);
          v656 = *(WTF::StringImpl **)(a4 + 8);
          v657 = v278;
          LODWORD(v658) = HIDWORD(a6);
          v660 = v145;
          BYTE1(v661[1]) = 3;
          if (v277 != 2)
            LOBYTE(v661[1]) = 1;
          BYTE3(v661[1]) = 1;
          v664 = v280;
          v665 = v279;
          goto LABEL_457;
        }
        v656 = *(WTF::StringImpl **)(a4 + 8);
        v657 = v278;
        LODWORD(v658) = HIDWORD(a6);
        v660 = v145;
        BYTE1(v661[1]) = 3;
        v22 = v640;
        if (v277 == 2)
          goto LABEL_417;
LABEL_634:
        LOBYTE(v661[1]) = 1;
        goto LABEL_417;
      }
LABEL_310:
      if ((*v143 & 0x20) != 0)
      {
        v261 = v139;
        v262 = (JSC::CallFrame *)a3;
        v263 = v140;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v145, (JSC::VM *)v141, a3, (uint64_t)&v656);
        v139 = v261;
        v140 = v263;
        a3 = (uint64_t)v262;
        v22 = v640;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_417;
      }
      v144 = *(_QWORD *)(v147 + 48);
      if (!v144)
        v144 = *(_QWORD *)(v145 + 16);
      if ((v144 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v144 + 5) < 0x17u)
      {
        if (!a3)
          goto LABEL_378;
        v197 = *(_DWORD *)(a3 + 16);
        if ((v197 & 0x20) != 0)
          goto LABEL_378;
        v198 = *(_WORD **)(a3 + 8);
        v199 = *(unsigned int *)(a3 + 4);
        if ((v197 & 4) == 0)
        {
          if ((_DWORD)v199)
          {
            v200 = (unsigned __int16)*v198 - 48;
            if (v200 <= 9 && (*v198 != 48 || v199 <= 1))
            {
              v249 = v198 + 1;
              v250 = v199 - 1;
              while (v250)
              {
                if (v200 > 0x19999999)
                  goto LABEL_374;
                v251 = *v249 - 48;
                if (v251 > 9)
                  goto LABEL_374;
                v201 = 0;
                LOBYTE(v199) = 0;
                v202 = 0;
                v252 = __CFADD__(v251, 10 * v200);
                v200 = v251 + 10 * v200;
                ++v249;
                --v250;
                if (v252)
                  goto LABEL_376;
              }
              v202 = v200 & 0xFFFFFF00;
              v201 = 0x100000000;
              if (v200 == -1)
              {
                v201 = 0;
                LOBYTE(v199) = 0;
              }
              else
              {
                LOBYTE(v199) = v200;
              }
              if (v200 == -1)
                v202 = 0;
LABEL_376:
              v203 = v199;
LABEL_377:
              if ((v201 & 0x100000000) == 0)
                goto LABEL_378;
              v270 = v140;
              v633 = (JSC::CallFrame *)a3;
              v635 = v202 | v203;
              v643 = *(JSC::VM **)(this + 56);
              while (2)
              {
                v271 = 16 * (*(_DWORD *)v270 & 0xFFFFFFFE);
                v273 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v271 + 0x4C) + 0x70))(v270, this, v635, &v656);
                if (*((_DWORD *)v643 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v643, (uint64_t)v139, v272, a4, a5, a6, a7, a8))
                {
LABEL_714:
                  v204 = 10;
                  goto LABEL_452;
                }
                v22 = v640;
                a3 = (uint64_t)v633;
                if ((v273 & 1) != 0)
                  goto LABEL_417;
                if (BYTE2(v661[1]) == 3)
                {
                  if (BYTE4(v661[1]))
                    goto LABEL_714;
                  v274 = *(unsigned __int8 *)(v270 + 5);
                  if (v274 != 61)
                    goto LABEL_473;
                }
                else
                {
                  v274 = *(unsigned __int8 *)(v270 + 5);
                  if (v274 == 61)
                  {
                    if (BYTE2(v661[1]) == 1)
                      goto LABEL_714;
                  }
                  else
                  {
LABEL_473:
                    if ((v274 - 39) <= 0xA
                      && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v270, (uint64_t)v139, (uint64_t)v633, a4, a5, a6, a7, a8) <= v635)
                    {
                      goto LABEL_714;
                    }
                  }
                }
                if ((*(_WORD *)(v271 + 12) & 0x800) == 0 || BYTE2(v661[1]) == 3)
                {
                  v275 = *(_QWORD *)(16 * (*(_DWORD *)v270 & 0xFFFFFFFE) + 0x30);
                  if (!v275)
                    v275 = *(_QWORD *)(v270 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v270 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v275 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v270 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v270, this, a3);
                  }
                  else
                  {
                    v275 = *(_QWORD *)(16 * (*(_DWORD *)v270 & 0xFFFFFFFE) + 0x30);
                    if (!v275)
                      v275 = *(_QWORD *)(v270 + 16);
                  }
                  if (*((_DWORD *)v643 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v643, (uint64_t)v139, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_714;
                  }
                }
                if ((v275 & 0xFFFE000000000002) != 0)
                  goto LABEL_504;
                v270 = v275;
                v22 = v640;
                v204 = 10;
                if (*(unsigned __int8 *)(v275 + 5) <= 0x16u)
                  goto LABEL_379;
                continue;
              }
            }
LABEL_374:
            v201 = 0;
            LOBYTE(v199) = 0;
          }
          else
          {
            v201 = 0;
          }
          v202 = 0;
          goto LABEL_376;
        }
        if ((_DWORD)v199)
        {
          v543 = *(unsigned __int8 *)v198 - 48;
          if (v543 <= 9 && (v199 < 2 || *(_BYTE *)v198 != 48))
          {
            v544 = v199 - 1;
            v545 = (unsigned __int8 *)v198 + 1;
            while (v544)
            {
              if (v543 > 0x19999999)
                goto LABEL_899;
              v546 = *v545 - 48;
              if (v546 > 9)
                goto LABEL_899;
              v203 = 0;
              LOBYTE(v199) = 0;
              v201 = 0;
              v252 = __CFADD__(v546, 10 * v543);
              v543 = v546 + 10 * v543;
              --v544;
              ++v545;
              if (v252)
                goto LABEL_901;
            }
            if (v543 == -1)
              v203 = 0;
            else
              v203 = v543 & 0xFFFFFF00;
            if (v543 == -1)
              LOBYTE(v199) = 0;
            else
              LOBYTE(v199) = v543;
            if (v543 == -1)
              v201 = 0;
            else
              v201 = 0x100000000;
            goto LABEL_901;
          }
LABEL_899:
          v203 = 0;
          LOBYTE(v199) = 0;
        }
        else
        {
          v203 = 0;
        }
        v201 = 0;
LABEL_901:
        v202 = v199;
        v22 = v640;
        goto LABEL_377;
      }
      v143 = (_BYTE *)(v144 + 6);
      v145 = v144;
    }
    while ((*(_BYTE *)(v144 + 6) & 8) == 0);
  }
  v297 = (int)v139;
  v632 = v140;
  v644 = (JSC::VM *)(v14 - v649);
  v298 = v14;
  v299 = v23;
  v300 = (JSC::CallFrame *)a3;
  if (!a3)
    goto LABEL_515;
  v301 = *(_DWORD *)(a3 + 16);
  if ((v301 & 0x20) != 0)
    goto LABEL_515;
  v302 = *(_WORD **)(a3 + 8);
  v303 = *(unsigned int *)(a3 + 4);
  if ((v301 & 4) == 0)
  {
    if ((_DWORD)v303)
    {
      v304 = (unsigned __int16)*v302 - 48;
      if (v304 <= 9 && (*v302 != 48 || v303 <= 1))
      {
        v384 = v302 + 1;
        v385 = v303 - 1;
        while (v385)
        {
          if (v304 > 0x19999999)
            goto LABEL_511;
          v386 = *v384 - 48;
          if (v386 > 9)
            goto LABEL_511;
          v305 = 0;
          LOBYTE(v303) = 0;
          v306 = 0;
          v252 = __CFADD__(v386, 10 * v304);
          v304 = v386 + 10 * v304;
          ++v384;
          --v385;
          if (v252)
            goto LABEL_513;
        }
        v306 = v304 & 0xFFFFFF00;
        v305 = 0x100000000;
        if (v304 == -1)
        {
          v305 = 0;
          LOBYTE(v303) = 0;
        }
        else
        {
          LOBYTE(v303) = v304;
        }
        if (v304 == -1)
          v306 = 0;
        goto LABEL_513;
      }
LABEL_511:
      v305 = 0;
      LOBYTE(v303) = 0;
    }
    else
    {
      v305 = 0;
    }
    v306 = 0;
LABEL_513:
    v307 = v303;
    goto LABEL_514;
  }
  if ((_DWORD)v303)
  {
    v584 = *(unsigned __int8 *)v302 - 48;
    if (v584 <= 9 && (v303 < 2 || *(_BYTE *)v302 != 48))
    {
      v592 = v303 - 1;
      v593 = (unsigned __int8 *)v302 + 1;
      while (v592)
      {
        if (v584 > 0x19999999)
          goto LABEL_1010;
        v594 = *v593 - 48;
        if (v594 > 9)
          goto LABEL_1010;
        v307 = 0;
        LOBYTE(v303) = 0;
        v305 = 0;
        v252 = __CFADD__(v594, 10 * v584);
        v584 = v594 + 10 * v584;
        --v592;
        ++v593;
        if (v252)
          goto LABEL_1012;
      }
      if (v584 == -1)
        v307 = 0;
      else
        v307 = v584 & 0xFFFFFF00;
      if (v584 == -1)
        LOBYTE(v303) = 0;
      else
        LOBYTE(v303) = v584;
      if (v584 == -1)
        v305 = 0;
      else
        v305 = 0x100000000;
      goto LABEL_1012;
    }
LABEL_1010:
    v307 = 0;
    LOBYTE(v303) = 0;
  }
  else
  {
    v307 = 0;
  }
  v305 = 0;
LABEL_1012:
  v306 = v303;
LABEL_514:
  if ((v305 & 0x100000000) != 0)
  {
    v400 = v306 | v307;
    v637 = *(JSC::VM **)(this + 56);
    while (1)
    {
      v401 = 16 * (*(_DWORD *)v632 & 0xFFFFFFFE);
      v402 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v401 + 0x4C) + 0x70))();
      v404 = v402;
      if (*((_DWORD *)v637 + 20))
      {
        v528 = JSC::VM::hasExceptionsAfterHandlingTraps(v637, (uint64_t)v139, v403, a4, a5, a6, a7, a8);
        v22 = v640;
        v18 = (unint64_t)v644;
        if (((v528 | v404) & 1) != 0)
        {
          v23 = v299;
          v14 = v298;
          a3 = (uint64_t)v300;
          if (!v528)
            goto LABEL_417;
          goto LABEL_378;
        }
      }
      else
      {
        v23 = v299;
        v14 = v298;
        v22 = v640;
        v18 = (unint64_t)v644;
        a3 = (uint64_t)v300;
        if ((v402 & 1) != 0)
          goto LABEL_417;
      }
      if (BYTE2(v661[1]) == 3)
      {
        if (BYTE4(v661[1]))
          goto LABEL_944;
        v405 = *(unsigned __int8 *)(v632 + 5);
        if (v405 == 61)
          goto LABEL_664;
      }
      else
      {
        v405 = *(unsigned __int8 *)(v632 + 5);
        if (v405 == 61)
        {
          if (BYTE2(v661[1]) == 1)
            goto LABEL_944;
          goto LABEL_664;
        }
      }
      if ((v405 - 39) <= 0xA
        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v632, (uint64_t)v139, a3, a4, a5, a6, a7, a8) <= v400)
      {
        goto LABEL_944;
      }
LABEL_664:
      if ((*(_WORD *)(v401 + 12) & 0x800) == 0 || BYTE2(v661[1]) == 3)
      {
        v406 = *(_QWORD *)(16 * (*(_DWORD *)v632 & 0xFFFFFFFE) + 0x30);
        if (!v406)
          v406 = *(_QWORD *)(v632 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v632 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v406 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v632 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(v632, this, a3);
        }
        else
        {
          v406 = *(_QWORD *)(16 * (*(_DWORD *)v632 & 0xFFFFFFFE) + 0x30);
          if (!v406)
            v406 = *(_QWORD *)(v632 + 16);
        }
        if (*((_DWORD *)v637 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v637, (uint64_t)v139, a3, a4, a5, a6, a7, a8))
        {
LABEL_944:
          v204 = 10;
          v23 = v299;
          v14 = v298;
          v18 = (unint64_t)v644;
          goto LABEL_452;
        }
      }
      if ((v406 & 0xFFFE000000000002) != 0)
      {
LABEL_670:
        v23 = v299;
        v14 = v298;
        v18 = (unint64_t)v644;
LABEL_504:
        v22 = v640;
LABEL_378:
        v204 = 10;
        goto LABEL_379;
      }
      v632 = v406;
      v23 = v299;
      v14 = v298;
      v22 = v640;
      v18 = (unint64_t)v644;
      v204 = 10;
      if (*(unsigned __int8 *)(v406 + 5) <= 0x16u)
        goto LABEL_379;
    }
  }
LABEL_515:
  v636 = *(JSC::VM **)(this + 56);
  while (1)
  {
    v308 = 16 * (*(_DWORD *)v144 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v144 + 6) & 8) == 0)
      break;
    v634 = (*(uint64_t (**)(uint64_t, uint64_t, JSC::CallFrame *, WTF::StringImpl **))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)v144 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0x68))(v144, this, v300, &v656);
    if (*((_DWORD *)v636 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v636, (uint64_t)v139, v462, a4, a5, a6, a7, a8))
    {
      goto LABEL_944;
    }
    v23 = v299;
    v14 = v298;
    v22 = v640;
    v18 = (unint64_t)v644;
    a3 = (uint64_t)v300;
    if ((v634 & 1) != 0)
      goto LABEL_417;
    if (BYTE2(v661[1]) == 3)
    {
      if (BYTE4(v661[1]))
        goto LABEL_944;
      v463 = *(unsigned __int8 *)(v144 + 5);
      if (v463 == 61)
        goto LABEL_522;
LABEL_748:
      if (!v300)
        goto LABEL_522;
      if ((v463 - 50) < 0xFFFFFFF5)
        goto LABEL_522;
      v464 = *((_DWORD *)v300 + 4);
      if ((v464 & 0x20) != 0)
        goto LABEL_522;
      v465 = *((unsigned int *)v300 + 1);
      if (!(_DWORD)v465)
        goto LABEL_522;
      v466 = (unsigned __int8 *)*((_QWORD *)v300 + 1);
      if ((v464 & 4) == 0)
      {
        v467 = *(unsigned __int16 *)v466;
        if ((_DWORD)v465 == 1)
          goto LABEL_754;
        if (v467 == 45)
        {
          v467 = *((unsigned __int16 *)v466 + 1);
          goto LABEL_847;
        }
        if ((v467 - 48) >= 0xA && ((_DWORD)v465 != 8 || v467 != 73))
        {
LABEL_881:
          if ((_DWORD)v465 != 3 || v467 != 78)
            goto LABEL_522;
        }
LABEL_867:
        v632 = v632 & 0xFFFFFF0000000000 | v465 | ((unint64_t)((v464 >> 2) & 1) << 32);
        JSC::jsToNumber(v466, v632);
        WTF::numberToString(&v667, v535);
        v537 = WTF::equal((unint64_t)v300, (unint64_t)&v667, v536);
        v22 = v640;
        v18 = (unint64_t)v644;
        if (v537)
          goto LABEL_868;
        goto LABEL_522;
      }
      v467 = *v466;
      if ((_DWORD)v465 == 1)
      {
LABEL_754:
        v22 = v640;
        v18 = (unint64_t)v644;
        if ((v467 - 48) < 0xA)
          goto LABEL_868;
        goto LABEL_522;
      }
      if (v467 == 45)
      {
        v467 = v466[1];
LABEL_847:
        if ((v467 - 48) < 0xA)
        {
          if ((_DWORD)v465 == 2)
            goto LABEL_944;
          goto LABEL_867;
        }
        if ((_DWORD)v465 != 9)
          goto LABEL_522;
      }
      else
      {
        if ((v467 - 48) < 0xA)
          goto LABEL_867;
        if ((_DWORD)v465 != 8)
          goto LABEL_881;
      }
      if (v467 != 73)
        goto LABEL_522;
      goto LABEL_867;
    }
    v463 = *(unsigned __int8 *)(v144 + 5);
    if (v463 != 61)
      goto LABEL_748;
    v22 = v640;
    v18 = (unint64_t)v644;
    if (BYTE2(v661[1]) == 1)
    {
LABEL_868:
      v23 = v299;
      v14 = v298;
      goto LABEL_378;
    }
LABEL_522:
    if ((*(_WORD *)(v308 + 12) & 0x800) != 0)
    {
      v311 = *(_DWORD *)v144;
      if (BYTE2(v661[1]) != 3)
      {
        v461 = 16 * (v311 & 0xFFFFFFFE);
        if ((*(_WORD *)(v461 + 12) & 0x800) != 0)
        {
          v312 = (*(uint64_t (**)(uint64_t, uint64_t))(16 * *(unsigned int *)(v461 + 76) + 0xB0))(v144, this);
        }
        else
        {
          v312 = *(_QWORD *)(v461 + 48);
          if (!v312)
            v312 = *(_QWORD *)(v144 + 16);
        }
        if (*((_DWORD *)v636 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v636, (uint64_t)v139, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_944;
        }
        goto LABEL_526;
      }
    }
    else
    {
      v311 = *(_DWORD *)v144;
    }
    v312 = *(_QWORD *)(16 * (v311 & 0xFFFFFFFE) + 0x30);
    if (!v312)
      v312 = *(_QWORD *)(v144 + 16);
LABEL_526:
    if ((v312 & 0xFFFE000000000002) != 0)
      goto LABEL_670;
    v144 = v312;
    v23 = v299;
    v14 = v298;
    v22 = v640;
    v18 = (unint64_t)v644;
    v204 = 10;
    if (*(unsigned __int8 *)(v312 + 5) <= 0x16u)
      goto LABEL_379;
  }
  if (!v297
    || (v297 & ~*(_DWORD *)(16 * (*(_DWORD *)v144 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v144 & 0xFFFFFFFE)), v636, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v309)|| (v667 = v300, v310 = JSC::PropertyTable::get(v309, (uint64_t *)&v667), a6 = v310, (_DWORD)v310 == -1))
  {
    if ((*(_BYTE *)(v144 + 6) & 0x20) != 0)
    {
      v407 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v144, v636, (unint64_t)v300, (uint64_t)&v656);
      a3 = (uint64_t)v300;
      v23 = v299;
      v14 = v298;
      v22 = v640;
      v18 = (unint64_t)v644;
      if ((v407 & 1) != 0)
        goto LABEL_417;
    }
    goto LABEL_522;
  }
  a5 = HIDWORD(v310);
  if ((int)v310 <= 63)
  {
    v355 = v144 + 16;
    v356 = v310 << 32;
  }
  else
  {
    v355 = *(_QWORD *)(v144 + 8) - 8;
    v356 = 0x3F00000000 - (v310 << 32);
  }
  a4 = *(_QWORD *)(v355 + (v356 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_567:
    v656 = (WTF::StringImpl *)a4;
    v660 = v144;
    v658 = __PAIR64__(v310, HIDWORD(v310));
    LOWORD(v661[1]) = 257;
LABEL_568:
    v23 = v299;
    v14 = v298;
    v22 = v640;
    v18 = (unint64_t)v644;
    a3 = (uint64_t)v300;
    goto LABEL_417;
  }
  v357 = *(unsigned __int8 *)(a4 + 5);
  if (v357 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v144, (uint64_t)v636, (uint64_t)&v656, a4, SHIDWORD(v310), v310);
    goto LABEL_568;
  }
  if (v357 != 6)
    goto LABEL_567;
  v451 = *(_DWORD *)(v308 + 16) & 3;
  v452 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v454 = *(_QWORD *)(a4 + 24);
    v453 = *(_QWORD *)(a4 + 32);
    v656 = *(WTF::StringImpl **)(a4 + 8);
    v657 = v452;
    LODWORD(v658) = HIDWORD(v310);
    v660 = v144;
    BYTE1(v661[1]) = 3;
    if (v451 != 2)
      LOBYTE(v661[1]) = 1;
    BYTE3(v661[1]) = 1;
    v664 = v454;
    v665 = v453;
    goto LABEL_568;
  }
  v656 = *(WTF::StringImpl **)(a4 + 8);
  v657 = v452;
  LODWORD(v658) = HIDWORD(v310);
  v660 = v144;
  BYTE1(v661[1]) = 3;
  v23 = v299;
  v14 = v298;
  v22 = v640;
  v18 = (unint64_t)v644;
  a3 = (uint64_t)v300;
  if (v451 != 2)
    goto LABEL_634;
LABEL_417:
  if (BYTE1(v661[1]) == 1)
  {
    v204 = (uint64_t)v656;
    goto LABEL_379;
  }
  if (BYTE1(v661[1]) == 2)
    v204 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v656, (JSC::JSGlobalObject *)this, a3, a4, a5, a6, a7, a8);
  else
    v204 = JSC::PropertySlot::customGetter((uint64_t)&v656, *(JSC::VM **)(this + 56), (WTF::StringImpl *)a3);
LABEL_452:
  v22 = v640;
LABEL_379:
  if (v663)
  {
    v205 = *(_DWORD *)(v662 + 4);
    if (!v205)
    {
      __break(0xC471u);
      JUMPOUT(0x1988A6048);
    }
    *(_DWORD *)(v662 + 4) = v205 - 1;
  }
  v655 = (JSC::JSString *)v204;
  if (*(_DWORD *)(v24 + 80))
  {
    v379 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v24, (uint64_t)v139, a3, a4, a5, a6, a7, a8);
    v22 = v640;
    if (!v379)
    {
      v204 = (uint64_t)v655;
      goto LABEL_383;
    }
    return 10;
  }
LABEL_383:
  v140 = v204;
  if (v204 != 2)
    goto LABEL_384;
LABEL_48:
  v32 = (JSC::VM *)v651;
  v33 = (JSC::Structure *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE));
  if ((*((_WORD *)v33 + 6) & 0x100) != 0)
  {
    if (*(_BYTE *)(v651 + 5) != 33)
      goto LABEL_221;
    v113 = JSC::DirectArguments::fastSlice((JSC::DirectArguments *)this, (JSC::JSGlobalObject *)v651, (JSC::DirectArguments *)v649, v22, a5, a6, a7, a8);
    v22 = v640;
    v69 = v113;
    goto LABEL_130;
  }
  v34 = *(_QWORD *)(this + 56);
  v35 = *(_BYTE *)(v651 + 4) & 0xE;
  v36 = v35 | 1;
  if ((v35 | 1) != 9)
  {
    v69 = 0;
    switch(v36)
    {
      case 3:
        if (v22)
          goto LABEL_586;
        v69 = JSC::constructEmptyArray(this, 0, 0, 0, a5, a6, a7, a8, a9);
        goto LABEL_171;
      case 5:
      case 7:
        goto LABEL_50;
      case 11:
        if (v22 >> 5 > 0xC34
          || (JSC::Structure::holesMustForwardToPrototype(v33, (JSC::JSObject *)v651) & 1) != 0
          || v640 + v649 > *(unsigned int *)(*(_QWORD *)(v651 + 8) - 4)
          || ((v425 = *(_DWORD *)(this + 908)) != 0 ? (v32 = (JSC::VM *)(16 * (v425 & 0xFFFFFFFE))) : (v32 = 0),
              (*((_BYTE *)v32 + 8) & 0xEu) > 9))
        {
LABEL_586:
          v69 = 0;
        }
        else
        {
          v667 = (WTF::StringImpl *)v34;
          UninitializedRestricted = JSC::JSArray::tryCreateUninitializedRestricted((uint64_t *)&v667, (unint64_t)v32, v640, a4, a5, a6, a7, a8);
          v69 = UninitializedRestricted;
          if (UninitializedRestricted)
          {
            v427 = *(_QWORD *)(UninitializedRestricted + 8);
            v428 = *(_QWORD *)(v651 + 8) + 8 * v649 + 16;
            v429 = (8 * v640) & 0x7FFFFFFF8;
            if (v429 > 0xF0)
            {
              v447 = v429 + v427;
              v448 = ((8 * v640) & 0x7FFFFFFE0) + v427;
              while (v427 != v448)
              {
                a9 = *(__n128 *)v428;
                v449 = *(_OWORD *)(v428 + 16);
                v428 += 32;
                *(__n128 *)v427 = a9;
                *(_OWORD *)(v427 + 16) = v449;
                v427 += 32;
              }
              while (v427 != v447)
              {
                v450 = *(_QWORD *)v428;
                v428 += 8;
                a9.n128_u64[0] = v450;
                *(_QWORD *)v427 = v450;
                v427 += 8;
              }
            }
            else if (v429)
            {
              v430 = v429 >> 3;
              if (v430 <= 1)
                v430 = 1;
              do
              {
                v431 = *(_QWORD *)v428;
                v428 += 8;
                *(_QWORD *)v427 = v431;
                v427 += 8;
                --v430;
              }
              while (v430);
            }
          }
          if (*((_BYTE *)v667 + 755))
            __dmb(0xAu);
        }
LABEL_171:
        v22 = v640;
        break;
      default:
        goto LABEL_130;
    }
    goto LABEL_130;
  }
LABEL_50:
  if (v22 >> 5 > 0xC34)
    goto LABEL_221;
  if (*(_BYTE *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 9) != 36)
  {
    LOBYTE(v38) = *(_BYTE *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 8);
    goto LABEL_61;
  }
  v37 = *(_QWORD *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 0x28);
  v38 = *(unsigned __int8 *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 8);
  v39 = (v38 >> 1) & 7;
  if ((v38 & 0x10) != 0)
    v39 = ((v38 & 0xE) + 10) >> 1;
  v40 = *(_DWORD *)(v37 + 4 * v39 + 852);
  if (v40)
    v41 = 16 * (v40 & 0xFFFFFFFE);
  else
    v41 = 0;
  if ((JSC::Structure *)v41 == v33)
  {
    v42 = *(_QWORD *)(v37 + 2304);
    v43 = (v42 & 1) != 0 ? (v42 >> 1) & 3 : *(unsigned __int8 *)(v42 + 4);
    if (v43 != 2)
    {
LABEL_76:
      if (v22 + v649 > *(unsigned int *)(*(_QWORD *)(v651 + 8) - 4))
        goto LABEL_221;
      v48 = *(_DWORD *)(this + 2 * v35 + 892);
      v49 = v48 ? 16 * (v48 & 0xFFFFFFFE) : 0;
      v50 = *(_BYTE *)(v49 + 8) & 0xE;
      if (v50 > 9)
        goto LABEL_221;
      v51 = *(unsigned __int16 *)(v49 + 24);
      v641 = v36;
      if (v51 == 65534)
      {
        v53 = 0;
      }
      else
      {
        if (v51 == 0xFFFF)
          v52 = *(_DWORD *)(*(_QWORD *)(v49 + 64) + 84);
        else
          v52 = *(unsigned __int16 *)(v49 + 24);
        if (v52 >= 64)
        {
          if ((v52 - 63) >= 5)
          {
            v107 = (v52 - 64) | ((v52 - 64) >> 1) | (((v52 - 64) | ((v52 - 64) >> 1)) >> 2);
            v108 = v107 | (v107 >> 4) | ((v107 | (v107 >> 4)) >> 8);
            v53 = (v108 | HIWORD(v108)) + 1;
          }
          else
          {
            v53 = 4;
          }
        }
        else
        {
          v53 = 0;
        }
        if (v51 == 0xFFFF)
          v51 = *(_DWORD *)(*(_QWORD *)(v49 + 64) + 84);
        if (v51 >= 64)
        {
          if ((v51 - 63) >= 5)
          {
            v105 = (v51 - 64) | ((v51 - 64) >> 1) | (((v51 - 64) | ((v51 - 64) >> 1)) >> 2);
            v106 = v105 | (v105 >> 4) | ((v105 | (v105 >> 4)) >> 8);
            v54 = 8 * ((v106 | HIWORD(v106)) + 1) + 8;
          }
          else
          {
            v54 = 40;
          }
          goto LABEL_93;
        }
      }
      v54 = 8;
LABEL_93:
      v55 = v18;
      if (v22 <= 3)
        v56 = 3;
      else
        v56 = v22;
      if (!(_DWORD)v22)
        v56 = 5;
      v57 = v54 + 8 * v56;
      v58 = v14;
      if (v57 > 0x50)
      {
        v59 = v23;
        if (v57 <= 0x1F60)
          v57 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep + (((v57 + 15) >> 2) & 0xFFFFFFFFCLL));
      }
      else
      {
        v59 = v23;
        v57 = (v57 + 15) & 0x3FFFFFFFF0;
      }
      v60 = v57 - v54;
      a3 = ((v57 - v54) & 0x7FFFFFFF8) + 8 * v53 + 8;
      if ((unint64_t)a3 <= 0x1F60
        && (v61 = *(_QWORD *)(v34 + (((((v57 - v54) & 0x7FFFFFFF8) + 8 * v53 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
      {
        v62 = *(unsigned int *)(v61 + 60);
        SlowCase = *(_QWORD *)(v61 + 24);
        if (SlowCase < *(_QWORD *)(v61 + 32))
        {
          *(_QWORD *)(v61 + 24) = SlowCase + v62;
          goto LABEL_104;
        }
        SlowCase = *(_QWORD *)(v61 + 40);
        if ((SlowCase & 1) == 0)
        {
          v192 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v61 + 48);
          *(_QWORD *)(v61 + 32) = SlowCase + HIDWORD(v192);
          *(_QWORD *)(v61 + 40) = SlowCase + (int)v192;
          *(_QWORD *)(v61 + 24) = SlowCase + v62;
          goto LABEL_105;
        }
        JSC::sanitizeStackForVM((JSC *)v34, (JSC::VM *)v651, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v61, v34 + 192, v62, 0, 1, v374, v375, v376);
      }
      else
      {
        SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v34 + 6648, (JSC *)v34, a3, 0, a5, a6, a7, a8);
      }
      v22 = v640;
LABEL_104:
      if (!SlowCase)
      {
        v69 = 0;
        v23 = v59;
        v14 = v58;
        v18 = v55;
LABEL_128:
        if (*(_BYTE *)(v34 + 755))
          __dmb(0xAu);
        goto LABEL_130;
      }
LABEL_105:
      v64 = v60 >> 3;
      if ((v60 >> 3) >= 0x10000001)
      {
        __break(0xC471u);
        JUMPOUT(0x1988A4FECLL);
      }
      v65 = (unint64_t *)(v34 + 37584);
      v66 = v53;
      v67 = (_DWORD *)(SlowCase + 8 * v53);
      v68 = v67 + 2;
      *v67 = v22;
      v67[1] = v64;
      if (v50 == 6)
      {
        v23 = v59;
        if (v64 <= v22)
          goto LABEL_110;
        memset_pattern16((void *)(SlowCase + 8 * (v22 + v66) + 8), &memset_pattern_263, 8 * (v64 + ~(_DWORD)v22) + 8);
      }
      else
      {
        v23 = v59;
        if (v64 <= v22)
        {
LABEL_110:
          v69 = *v65;
          v14 = v58;
          if (*v65 >= *(_QWORD *)(v34 + 37592))
          {
            v69 = *(_QWORD *)(v34 + 37600);
            v18 = v55;
            if ((v69 & 1) != 0)
            {
              JSC::sanitizeStackForVM((JSC *)v34, v32, a3, a4, a5, a6, a7, a8);
              v373 = JSC::LocalAllocator::allocateSlowCase(v34 + 37560, v34 + 192, 16, 0, 0, v370, v371, v372);
              v22 = v640;
              v69 = v373;
            }
            else
            {
              v191 = *(_QWORD *)(v69 + 8) ^ *(_QWORD *)(v34 + 37608);
              *(_QWORD *)(v34 + 37592) = v69 + HIDWORD(v191);
              *(_QWORD *)(v34 + 37600) = v69 + (int)v191;
              *v65 = v69 + 16;
            }
          }
          else
          {
            *v65 = v69 + 16;
            v18 = v55;
          }
          *(_DWORD *)v69 = 0;
          v70 = *(_DWORD *)(v49 + 8);
          *(_DWORD *)v69 = v49 >> 4;
          *(_DWORD *)(v69 + 4) = v70;
          *(_QWORD *)(v69 + 8) = v68;
          if (*(_BYTE *)(v34 + 755))
          {
            __dmb(0xAu);
            v68 = *(_DWORD **)(v69 + 8);
          }
          v71 = *(_QWORD *)(v651 + 8);
          v72 = 8 * v22;
          v73 = (8 * v22) & 0x7FFFFFFF8;
          if (v641 == 7)
          {
            v99 = v71 + 8 * v649;
            if (v73 > 0xF0)
            {
              v266 = (_DWORD *)((char *)v68 + v73);
              v267 = (_DWORD *)((char *)v68 + (v72 & 0x7FFFFFFE0));
              while (v68 != v267)
              {
                a9 = *(__n128 *)v99;
                v268 = *(_OWORD *)(v99 + 16);
                v99 += 32;
                *(__n128 *)v68 = a9;
                *((_OWORD *)v68 + 1) = v268;
                v68 += 8;
              }
              while (v68 != v266)
              {
                v269 = *(_QWORD *)v99;
                v99 += 8;
                a9.n128_u64[0] = v269;
                *(_QWORD *)v68 = v269;
                v68 += 2;
              }
            }
            else if (v73)
            {
              v100 = v73 >> 3;
              if (v100 <= 1)
                v100 = 1;
              do
              {
                v101 = *(_QWORD *)v99;
                v99 += 8;
                *(_QWORD *)v68 = v101;
                v68 += 2;
                --v100;
              }
              while (v100);
            }
          }
          else
          {
            v74 = v71 + 8 * v649;
            if (v73 > 0xF0)
            {
              v77 = (_DWORD *)((char *)v68 + v73);
              v78 = (_DWORD *)((char *)v68 + (v72 & 0x7FFFFFFE0));
              while (v68 != v78)
              {
                a9 = *(__n128 *)v74;
                v79 = *(_OWORD *)(v74 + 16);
                v74 += 32;
                *(__n128 *)v68 = a9;
                *((_OWORD *)v68 + 1) = v79;
                v68 += 8;
              }
              while (v68 != v77)
              {
                v80 = *(_QWORD *)v74;
                v74 += 8;
                a9.n128_u64[0] = v80;
                *(_QWORD *)v68 = v80;
                v68 += 2;
              }
            }
            else if (v73)
            {
              v75 = v73 >> 3;
              if (v75 <= 1)
                v75 = 1;
              do
              {
                v76 = *(_QWORD *)v74;
                v74 += 8;
                *(_QWORD *)v68 = v76;
                v68 += 2;
                --v75;
              }
              while (v75);
            }
          }
          goto LABEL_128;
        }
        bzero((void *)(SlowCase + 8 * (v22 + v66) + 8), 8 * (v64 + ~(_DWORD)v22) + 8);
      }
      v22 = v640;
      goto LABEL_110;
    }
  }
LABEL_61:
  if ((v38 & 0x20) != 0)
    goto LABEL_221;
  v44 = *(_QWORD *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 0x28);
  if (v44)
  {
    if (*(_BYTE *)(*(_QWORD *)(v44 + 2048) + 4) == 2)
      goto LABEL_221;
  }
  v45 = *(_QWORD *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 0x30);
  if (!v45)
    v45 = *(_QWORD *)(v651 + 16);
  if ((v45 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v45 + 5) < 0x17u)
    goto LABEL_76;
  while ((*(_BYTE *)(v45 + 4) & 0xE) == 0)
  {
    if ((*(_BYTE *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 8) & 0x20) != 0)
      break;
    v46 = *(_QWORD *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x28);
    if (v46)
    {
      if (*(_BYTE *)(*(_QWORD *)(v46 + 2048) + 4) == 2)
        break;
    }
    v47 = *(_QWORD *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x30);
    if (!v47)
      v47 = *(_QWORD *)(v45 + 16);
    if ((v47 & 0xFFFE000000000002) == 0)
    {
      v45 = v47;
      if (*(unsigned __int8 *)(v47 + 5) > 0x16u)
        continue;
    }
    goto LABEL_76;
  }
LABEL_221:
  v69 = 0;
LABEL_130:
  v81 = v652;
  if (*((_DWORD *)v652 + 20))
  {
    v170 = *((_DWORD *)v652 + 20);
    if ((v170 & 0x27) != 0 && (v170 & 0x20) == 0)
    {
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v652 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v22 = v640;
    }
    if (*((_QWORD *)v652 + 2))
      return 0;
  }
  if (v69)
    goto LABEL_132;
  if (HIDWORD(v22))
  {
    v547 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v547 = 0x2800000002;
    *(_QWORD *)(v547 + 8) = "Length exceeded the maximum array length";
    *(_DWORD *)(v547 + 16) = 4;
    v667 = (WTF::StringImpl *)v547;
    v549 = JSC::createRangeError(this, &v667, v548);
    JSC::VM::throwException(v81, (JSC::JSGlobalObject *)this, v549, v550, v551, v552, v553, v554);
    v562 = v667;
    v667 = 0;
    if (v562)
    {
      if (*(_DWORD *)v562 == 2)
      {
        WTF::StringImpl::~StringImpl(v562, v555, v556, v557, v558, v559, v560, v561);
        WTF::fastFree(v570, v571, v572, v573, v574, v575, v576, v577);
      }
      else
      {
        *(_DWORD *)v562 -= 2;
      }
    }
    return 0;
  }
  v468 = *(_DWORD *)(this + 896);
  if (v468)
    v469 = 16 * (v468 & 0xFFFFFFFE);
  else
    v469 = 0;
  v69 = JSC::JSArray::tryCreate(v638, v469, (JSC::Structure *)v640, a4, a5, a6, a7, a8, a9);
  if (!v69)
  {
    v470 = &v652;
    goto LABEL_903;
  }
LABEL_395:
  v223 = v640;
  if (!v640)
  {
    if (*(_BYTE *)(v69 + 5) == 36)
    {
LABEL_407:
      JSC::JSArray::setLength((JSC::JSArray *)v69, (JSC::VM **)this, v223, 1, v218, v219, v220, v221, v222);
      goto LABEL_408;
    }
    goto LABEL_420;
  }
  v224 = 0;
  do
  {
    v667 = (JSC::VM *)((char *)v224 + v649);
    IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v651, (unint64_t)v224 + v649);
    if (!IndexQuickly)
      IndexQuickly = JSC::JSObject::getIfPropertyExists<unsigned long long>((_BYTE *)v651, (JSC::VM *)this, (const WTF::StringImpl *)&v667, v228, v218, v219, v220, v221);
    v229 = IndexQuickly;
    v223 = v640;
    if (*((_DWORD *)v652 + 20))
    {
      v281 = JSC::VM::hasExceptionsAfterHandlingTraps(v652, (uint64_t)v226, (uint64_t)v227, v228, v218, v219, v220, v221);
      v223 = v640;
      if (v281)
        return 0;
    }
    if (v229)
    {
      if ((unint64_t)v224 > 0xFFFFFFFE)
      {
        v282 = *(_QWORD *)(this + 56);
        if (v224 == (JSC::VM *)0xFFFFFFFFLL)
          JSC::Identifier::from(*(uint64_t ***)(this + 56), 0xFFFFFFFFuLL, v227, v228, v218, v219, v220, v221, (int **)&v667);
        else
          JSC::Identifier::from(*(uint64_t ***)(this + 56), v226, (double)(unint64_t)v224, v227, v228, v218, v219, v220, v221, &v667);
        JSC::JSObject::putDirect((int *)v69, v282, (unint64_t)v667, v229, 0, v286, v283, v284, v285);
        v287 = v667;
        v667 = 0;
        if (v287)
        {
          if (*(_DWORD *)v287 == 2)
          {
            WTF::StringImpl::~StringImpl(v287, v230, v231, v232, v218, v219, v220, v221);
            WTF::fastFree(v289, v290, v291, v292, v293, v294, v295, v296);
          }
          else
          {
            *(_DWORD *)v287 -= 2;
          }
        }
      }
      else
      {
        JSC::JSObject::putDirectIndex(v69, this, v224, v229, 0, 2, v220, v221, v222.n128_f64[0]);
      }
      v223 = v640;
      if (*((_DWORD *)v652 + 20))
      {
        v288 = JSC::VM::hasExceptionsAfterHandlingTraps(v652, (uint64_t)v230, v231, v232, v218, v219, v220, v221);
        v223 = v640;
        if (v288)
          return 0;
      }
    }
    v224 = (JSC::VM *)((char *)v224 + 1);
  }
  while ((JSC::VM *)v223 != v224);
  if (*(_BYTE *)(v69 + 5) != 36)
  {
LABEL_420:
    v667 = 0;
    v668 = v69;
    LODWORD(v669) = -1;
    BYTE4(v669) = BYTE4(v669) & 0xF8 | 1;
    *(_WORD *)((char *)&v669 + 5) = 0;
    HIBYTE(v669) = 1;
    *(_QWORD *)&v670 = 0;
    v245 = v223 | 0xFFFE000000000000;
    if ((v223 & 0x80000000) != 0)
      v245 = COERCE__INT64((double)v223) + 0x2000000000000;
    if (HIDWORD(v223))
      v246 = COERCE__INT64((double)v223) + 0x2000000000000;
    else
      v246 = v245;
    (*(void (**)(unint64_t, uint64_t, _QWORD, uint64_t, WTF::StringImpl **))(16
                                                                                           * *(unsigned int *)(16 * (*(_DWORD *)v69 & 0xFFFFFFFE) + 0x4C)
                                                                                           + 0x48))(v69, this, *(_QWORD *)(*((_QWORD *)v638 + 5244) + 1768), v246, &v667);
    goto LABEL_408;
  }
  if (!HIDWORD(v223))
    goto LABEL_407;
  v361 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v361 = 0x1400000002;
  *(_QWORD *)(v361 + 8) = "Invalid array length";
  *(_DWORD *)(v361 + 16) = 4;
  v667 = (WTF::StringImpl *)v361;
  v363 = JSC::createRangeError(this, &v667, v362);
  JSC::VM::throwException(v638, (JSC::JSGlobalObject *)this, v363, v364, v365, v366, v367, v368);
  v369 = v667;
  v667 = 0;
  if (v369)
  {
    if (*(_DWORD *)v369 == 2)
    {
      WTF::StringImpl::~StringImpl(v369, v32, a3, v233, a5, a6, a7, a8);
      WTF::fastFree(v409, v410, v411, v412, v413, v414, v415, v416);
    }
    else
    {
      *(_DWORD *)v369 -= 2;
    }
  }
LABEL_408:
  if (!*((_DWORD *)v652 + 20))
  {
    v22 = v640;
    goto LABEL_132;
  }
  v360 = JSC::VM::hasExceptionsAfterHandlingTraps(v652, (uint64_t)v32, a3, v233, a5, a6, a7, a8);
  v22 = v640;
  if (v360)
    return 0;
LABEL_132:
  v82 = v646 - v22;
  if (v646 < v22)
  {
    JSC::shift<(JSC::JSArray::ShiftCountMode)1>((JSC::VM **)this, (JSC::JSObject *)v651, (const WTF::StringImpl *)v649, v22, v646, v14, a7, a8, a9);
    if (*((_DWORD *)v652 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v652, (uint64_t)v32, a3, v82, a5, a6, a7, a8))
      return 0;
    goto LABEL_144;
  }
  if (v646 <= v22)
    goto LABEL_144;
  v83 = *(JSC::JSString **)(this + 56);
  v653 = v83;
  if (v14 < v649)
  {
    __break(0xC471u);
    JUMPOUT(0x1988A5074);
  }
  if (v18 < v22)
  {
    __break(0xC471u);
    JUMPOUT(0x1988A5094);
  }
  if (*(_BYTE *)(v651 + 5) != 36)
  {
LABEL_142:
    if (v639 <= v649)
      goto LABEL_143;
    v125 = (char *)(v640 - 1);
    v126 = v646 - 1;
    while (1)
    {
      v667 = (WTF::StringImpl *)&v125[v639];
      IfProperty = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v651, (unint64_t)&v125[v639]);
      if (!IfProperty)
        IfProperty = JSC::JSObject::getIfPropertyExists<unsigned long long>((_BYTE *)v651, (JSC::VM *)this, (const WTF::StringImpl *)&v667, v82, a5, a6, a7, a8);
      v128 = IfProperty;
      if (*((_DWORD *)v83 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v83, (uint64_t)v32, a3, v82, a5, a6, a7, a8))
        goto LABEL_143;
      v129 = v126 + v639;
      if (v128)
      {
        v130 = *(uint64_t ***)(this + 56);
        if (v129 > 0xFFFFFFFE)
        {
          v667 = 0;
          v668 = v651;
          LODWORD(v669) = -1;
          BYTE4(v669) = BYTE4(v669) & 0xF8 | 1;
          *(_WORD *)((char *)&v669 + 5) = 0;
          HIBYTE(v669) = 1;
          *(_QWORD *)&v670 = 0;
          v380 = *(void (**)(unint64_t, uint64_t, WTF::StringImpl *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 0x4C) + 0x48);
          if (v129 == 0xFFFFFFFF)
            JSC::Identifier::from(v130, 0xFFFFFFFFuLL, (const WTF::StringImpl *)a3, v82, a5, a6, a7, a8, (int **)&v656);
          else
            JSC::Identifier::from(v130, (JSC::VM *)v130, (double)v129, (const WTF::StringImpl *)a3, v82, a5, a6, a7, a8, &v656);
          v380(v651, this, v656, v128, &v667);
          v381 = v656;
          v656 = 0;
          if (v381)
          {
            if (*(_DWORD *)v381 == 2)
            {
              WTF::StringImpl::~StringImpl(v381, v32, a3, v82, a5, a6, a7, a8);
              WTF::fastFree(v417, v418, v419, v420, v421, v422, v423, v424);
            }
            else
            {
              *(_DWORD *)v381 -= 2;
            }
          }
        }
        else if ((JSC::JSObject::trySetIndexQuickly(v651, (JSC::VM *)v130, v126 + v639, v128, 0, a6, a7, a8, a9.n128_f64[0]) & 1) == 0)
        {
          (*(void (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 0x4C) + 0x50))();
        }
        v83 = v653;
        if (!*((_DWORD *)v653 + 20))
          goto LABEL_258;
        v382 = JSC::VM::hasExceptionsAfterHandlingTraps(v653, (uint64_t)v32, a3, v82, a5, a6, a7, a8);
        if (--v639 <= v649 || v382)
          goto LABEL_143;
      }
      else
      {
        if (v129 > 0xFFFFFFFE)
        {
          v388 = *(uint64_t ***)(this + 56);
          if (v129 == 0xFFFFFFFF)
            JSC::Identifier::from(v388, 0xFFFFFFFFuLL, (const WTF::StringImpl *)a3, v82, a5, a6, a7, a8, (int **)&v656);
          else
            JSC::Identifier::from(v388, v32, (double)v129, (const WTF::StringImpl *)a3, v82, a5, a6, a7, a8, &v656);
          LODWORD(v667) = -1;
          WORD2(v667) = 1;
          v131 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 0x4C) + 0x58))();
          v389 = v656;
          v656 = 0;
          if (v389)
          {
            if (*(_DWORD *)v389 == 2)
            {
              WTF::StringImpl::~StringImpl(v389, v32, a3, v82, a5, a6, a7, a8);
              WTF::fastFree(v439, v440, v441, v442, v443, v444, v445, v446);
            }
            else
            {
              *(_DWORD *)v389 -= 2;
            }
          }
        }
        else
        {
          v131 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 0x4C) + 0x60))();
        }
        v83 = v653;
        if (*((_DWORD *)v653 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v653, (uint64_t)v32, a3, v82, a5, a6, a7, a8))
        {
          goto LABEL_143;
        }
        if ((v131 & 1) == 0)
        {
          JSC::throwTypeError(this, &v653, (uint64_t)"Unable to delete property.", 27);
          goto LABEL_143;
        }
LABEL_258:
        if (--v639 <= v649)
          goto LABEL_143;
      }
    }
  }
  if ((v82 + v14) >> 32)
  {
    v346 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v346 = 0x2800000002;
    *(_QWORD *)(v346 + 8) = "Length exceeded the maximum array length";
    *(_DWORD *)(v346 + 16) = 4;
    v667 = (WTF::StringImpl *)v346;
    v348 = JSC::createRangeError(this, &v667, v347);
    JSC::VM::throwException(v83, (JSC::JSGlobalObject *)this, v348, v349, v350, v351, v352, v353);
    v354 = v667;
    v667 = 0;
    if (v354)
    {
      if (*(_DWORD *)v354 == 2)
      {
        WTF::StringImpl::~StringImpl(v354, v32, a3, v82, a5, a6, a7, a8);
        WTF::fastFree(v392, v393, v394, v395, v396, v397, v398, v399);
      }
      else
      {
        *(_DWORD *)v354 -= 2;
      }
    }
  }
  else
  {
    if ((*(_BYTE *)(v651 + 4) & 0xE) != 0)
      v84 = *(unsigned int *)(*(_QWORD *)(v651 + 8) - 8);
    else
      v84 = 0;
    if (v84 != v14
      || (JSC::JSArray::unshiftCountWithAnyIndexingType((JSC::JSArray *)v651, (JSC::JSGlobalObject *)this, v649, v82, a5, a6, a7, a8, a9) & 1) == 0)
    {
      goto LABEL_142;
    }
  }
LABEL_143:
  if (*((_DWORD *)v652 + 20))
  {
    v193 = *((_DWORD *)v652 + 20);
    if ((v193 & 0x27) != 0 && (v193 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v652 + 64), 7u, a3, v82, a5, a6, a7, a8);
    if (*((_QWORD *)v652 + 2))
      return 0;
  }
LABEL_144:
  if (v23 >= 1)
  {
    v85 = 0;
    v86 = 0;
    v87 = 8 * v649;
    v88 = 0x800000000;
    do
    {
      v89 = v649 + v86;
      v90 = *(_QWORD *)((char *)a2 + (v88 >> 29));
      v91 = *(_QWORD *)(this + 56);
      if (v649 + v86 > 0xFFFFFFFE)
      {
        v667 = 0;
        v668 = v651;
        LODWORD(v669) = -1;
        BYTE4(v669) = BYTE4(v669) & 0xF8 | 1;
        *(_WORD *)((char *)&v669 + 5) = 0;
        HIBYTE(v669) = 1;
        *(_QWORD *)&v670 = 0;
        v116 = *(void (**)(unint64_t, uint64_t, WTF::StringImpl *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 0x4C) + 0x48);
        if (v649 - 0xFFFFFFFF + v86)
          JSC::Identifier::from((uint64_t **)v91, v32, (double)(unint64_t)v89, (const WTF::StringImpl *)a3, v82, a5, a6, a7, a8, &v656);
        else
          JSC::Identifier::from((uint64_t **)v91, 0xFFFFFFFFuLL, (const WTF::StringImpl *)a3, v82, a5, a6, a7, a8, (int **)&v656);
        v116(v651, this, v656, v90, &v667);
        v117 = v656;
        v656 = 0;
        if (v117)
        {
          if (*(_DWORD *)v117 == 2)
          {
            WTF::StringImpl::~StringImpl(v117, v32, a3, v82, a5, a6, a7, a8);
            WTF::fastFree(v234, v235, v236, v237, v238, v239, v240, v241);
          }
          else
          {
            *(_DWORD *)v117 -= 2;
          }
        }
      }
      else
      {
        v92 = *(_QWORD *)(v651 + 8);
        switch(*(_BYTE *)(v651 + 4) & 0x1F)
        {
          case 0:
          case 1:
            if ((JSC::JSObject::trySetIndexQuicklyForTypedArray(v651, (int)v649 + (int)v86, *(_QWORD *)((char *)a2 + (v88 >> 29)), 0) & 1) == 0)goto LABEL_154;
            break;
          case 3:
            goto LABEL_154;
          case 4:
          case 5:
            if (*(_DWORD *)(v92 - 4) <= v89)
              goto LABEL_154;
            if (v90 > 0xFFFDFFFFFFFFFFFFLL)
            {
LABEL_148:
              if (*(_DWORD *)(v92 - 4) <= v89)
              {
LABEL_154:
                (*(void (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v651 & 0xFFFFFFFE) + 0x4C) + 0x50))();
                break;
              }
              *(_QWORD *)(v92 + v87 + v85) = v90;
              if (*(_DWORD *)(v92 - 8) <= v89)
              {
                *(_DWORD *)(v92 - 8) = v649 + v86 + 1;
                if (!v90)
                  break;
              }
              else if (!v90)
              {
                break;
              }
LABEL_151:
              if ((v90 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v91 + 760) >= *(unsigned __int8 *)(v651 + 7))
              {
                JSC::Heap::writeBarrierSlowPath(v91 + 192, v651);
              }
            }
            else
            {
              if (v90 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL
                && (a9.n128_u64[0] = v90 - 0x2000000000000, BYTE1(dword_1ECF4C5C0)))
              {
                v120 = v651;
                JSC::JSObject::convertInt32ToDouble((JSC::JSObject *)v651, *(JSC::VM **)(this + 56), a3, v82, a5, a6, a7, a8, a9.n128_f64[0]);
              }
              else
              {
                v120 = v651;
                JSC::JSObject::convertInt32ToContiguous((JSC::JSObject *)v651, *(JSC::VM **)(this + 56), a3, v82, a5, a6, a7, a8, a9.n128_f64[0]);
              }
              JSC::JSObject::setIndexQuickly(v120, (JSC::VM *)v91, v89, v90, v121, v122, v123, v124);
            }
            break;
          case 6:
          case 7:
            if (*(_DWORD *)(v92 - 4) <= v89)
              goto LABEL_154;
            if (v90 >> 49)
            {
              a9.n128_f64[0] = (double)(int)v90;
              if (v90 <= 0xFFFDFFFFFFFFFFFFLL)
                a9.n128_u64[0] = v90 - 0x2000000000000;
              *(_QWORD *)(v92 + v87 + v85) = a9.n128_u64[0];
LABEL_247:
              if (*(_DWORD *)(v92 - 8) <= v89)
                *(_DWORD *)(v92 - 8) = v649 + v86 + 1;
            }
            else
            {
              JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)v651, *(JSC::VM **)(this + 56), v649 + v86, *(_QWORD *)((char *)a2 + (v88 >> 29)), a5, a6, a7, a8, a9.n128_f64[0]);
            }
            break;
          case 8:
          case 9:
            goto LABEL_148;
          case 0xA:
          case 0xB:
            if (*(_DWORD *)(v92 - 4) <= v89)
              goto LABEL_154;
            v110 = v92 + v87 + 8 * v86;
            v111 = *(_QWORD *)(v110 + 16);
            *(_QWORD *)(v110 + 16) = v90;
            if (v90
              && (v90 & 0xFFFE000000000002) == 0
              && *(_DWORD *)(v91 + 760) >= *(unsigned __int8 *)(v651 + 7))
            {
              v408 = v111;
              JSC::Heap::writeBarrierSlowPath(v91 + 192, v651);
              v111 = v408;
            }
            if (v111)
              break;
            ++*(_DWORD *)(v92 + 12);
            goto LABEL_247;
          case 0xC:
          case 0xD:
            if (*(_DWORD *)(v92 - 4) <= v89)
              goto LABEL_154;
            v313 = v92 + v87 + 8 * v86;
            if (!*(_QWORD *)(v313 + 16))
              goto LABEL_154;
            *(_QWORD *)(v313 + 16) = v90;
            if (!v90)
              break;
            goto LABEL_151;
          default:
            if ((*(_BYTE *)(v651 + 4) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1988A46BCLL);
            }
            goto LABEL_154;
        }
      }
      if (*((_DWORD *)v652 + 20))
      {
        v118 = *((_DWORD *)v652 + 20);
        if ((v118 & 0x27) != 0 && (v118 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v652 + 64), 7u, a3, v82, a5, a6, a7, a8);
        if (*((_QWORD *)v652 + 2))
          return 0;
      }
      ++v86;
      v88 += 0x100000000;
      v85 += 8;
    }
    while (v646 != v86);
  }
  if (*(_BYTE *)(v651 + 5) != 36)
    goto LABEL_335;
  if (HIDWORD(v645))
  {
    v171 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v171 = 0x1400000002;
    *(_QWORD *)(v171 + 8) = "Invalid array length";
    *(_DWORD *)(v171 + 16) = 4;
    v656 = (WTF::StringImpl *)v171;
    v172 = *(_QWORD *)(this + 128);
    v173 = *(JSC::Heap ***)(this + 56);
    if ((v172 & 1) != 0)
    {
      v358 = *(uint64_t (**)(WTF::StringImpl **))(v172 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v359 = (int **)(this - 16);
      else
        v359 = (int **)(this & 0xFFFFFFFFFFFFC000 | 8);
      v667 = (WTF::StringImpl *)*v359;
      v668 = this;
      v669 = (WTF::StringImpl *)(this + 128);
      v172 = v358(&v667);
    }
    v174 = JSC::ErrorInstance::create(v173, v172, &v656, 0, 0, 0, 2, 1);
    v181 = (JSC::Exception *)v174;
    if ((v174 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v174 & 0xFFFFFFFE) + 0x4C)))
    {
      v181 = (JSC::Exception *)JSC::Exception::create((uint64_t)v638, (JSC::VM *)v174, 0, v175, v176, v177, v178, v179);
      v182 = v638;
    }
    else
    {
      v182 = v638;
    }
    JSC::VM::throwException(v182, (JSC::JSGlobalObject *)this, v181, v180, v175, v176, v177, v178, v179);
    v190 = v656;
    v656 = 0;
    if (!v190)
      return v69;
LABEL_341:
    if (*(_DWORD *)v190 == 2)
    {
      WTF::StringImpl::~StringImpl(v190, v183, v184, v185, v186, v187, v188, v189);
      WTF::fastFree(v253, v254, v255, v256, v257, v258, v259, v260);
    }
    else
    {
      *(_DWORD *)v190 -= 2;
    }
    return v69;
  }
  v93 = *(int **)(this + 56);
  v667 = (WTF::StringImpl *)v93;
  v94 = *(JSC::Butterfly **)(v651 + 8);
  v95 = *(_BYTE *)(v651 + 4);
  v96 = v95 & 0x1F;
  if (v96 == 9)
    goto LABEL_166;
  if (v96 > 0x19)
    goto LABEL_640;
  if (((1 << v96) & 0xA8) != 0)
    goto LABEL_166;
  if (((1 << v96) & 0x2800) != 0)
  {
    v103 = (JSC::JSGlobalObject *)this;
    v102 = v651;
    v104 = v645;
    goto LABEL_187;
  }
  if (((1 << v96) & 0x2A00000) == 0)
  {
LABEL_640:
    if (v96 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1988A67E4);
    }
    if ((_DWORD)v645)
    {
      if (v645 >> 5 < 0xC35)
      {
        JSC::JSObject::createInitialUndecided((JSC::JSObject *)v651, (JSC::VM *)v93, v645, a9);
        return v69;
      }
      if ((v95 & 0xEu) <= 9)
        v94 = JSC::JSObject::ensureArrayStorageSlow((JSC::JSObject *)v651, (JSC::VM *)v93, a3, v82, a5, a6, a7, a8, a9);
      v103 = (JSC::JSGlobalObject *)this;
      v102 = v651;
      v104 = v645;
LABEL_187:
      JSC::JSArray::setLengthWithArrayStorage(v102, v103, v104, 1, v94);
    }
    return v69;
  }
  if (*((_DWORD *)v94 - 2) == (_DWORD)v645)
    return v69;
  JSC::JSObject::convertFromCopyOnWrite((JSC::JSObject *)v651, (JSC::VM *)v93, a3, v82, a5, a6, a7, a8, a9);
  v94 = *(JSC::Butterfly **)(v651 + 8);
LABEL_166:
  v97 = *((_DWORD *)v94 - 2);
  if (v97 != (_DWORD)v645)
  {
    if (v645 <= 0x10000000)
    {
      if (v645 >> 5 < 0xC35)
        goto LABEL_206;
      if (JSC::JSObject::countElements((JSC::JSObject *)v651) >= v645 >> 3)
      {
        v97 = *((_DWORD *)v94 - 2);
LABEL_206:
        v112 = v97 - v645;
        if (v97 >= v645)
        {
          if (v112 > v645 && v112 >= 0x41)
          {
            JSC::JSObject::reallocateAndShrinkButterfly((JSC::JSObject *)v651, (JSC::VM *)v93, v645);
          }
          else
          {
            if ((*(_BYTE *)(v651 + 4) & 0xF) == 7)
            {
              if (v97 > v645)
                memset_pattern16((char *)v94 + 8 * (v97 - 1 - (unint64_t)(v97 - 1 - v645)), &memset_pattern_4, 8 * (v97 - 1 - v645) + 8);
            }
            else if (v97 > v645)
            {
              bzero((char *)v94 + 8 * (v97 - 1 - (unint64_t)(v97 - 1 - v645)), 8 * (v97 - 1 - v645) + 8);
            }
            *((_DWORD *)v94 - 2) = v645;
          }
          return v69;
        }
        v276 = *(_QWORD *)(v651 + 8);
        if (*(_DWORD *)(v276 - 4) < v645 || (*(_BYTE *)(v651 + 4) & 0x10) != 0)
        {
          if (!JSC::JSObject::ensureLengthSlow((JSC::JSObject *)v651, (JSC::VM *)v93, v645, v82, a5, a6, a7, a8, a9))
          {
            v470 = &v667;
LABEL_903:
            JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)this, (JSC::JSGlobalObject *)v470);
            return v69;
          }
          v276 = *(_QWORD *)(v651 + 8);
        }
        if (*(_DWORD *)(v276 - 8) < v645)
          *(_DWORD *)(v276 - 8) = v645;
        return v69;
      }
    }
    if ((*(_BYTE *)(v651 + 4) & 0xEu) < 0xA)
      v391 = JSC::JSObject::ensureArrayStorageSlow((JSC::JSObject *)v651, (JSC::VM *)v93, a3, v82, a5, a6, a7, a8, a9);
    else
      v391 = *(JSC::Butterfly **)(v651 + 8);
    JSC::JSArray::setLengthWithArrayStorage(v651, (JSC::JSGlobalObject *)this, v645, 1, v391);
  }
  return v69;
}

unint64_t JSC::arrayProtoFuncUnShift(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  void (*v34)(unint64_t, JSC *, uint64_t, uint64_t, WTF::StringImpl **);
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  const WTF::String *v38;
  unint64_t RangeError;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unsigned int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  JSC::VM *v62;
  WTF::StringImpl *v63[2];
  int v64;
  char v65;
  __int16 v66;
  char v67;
  uint64_t v68;

  v11 = *((_QWORD *)this + 7);
  v62 = (JSC::VM *)v11;
  v12 = *((_QWORD *)a2 + 5);
  if ((v12 & 0xFFFE000000000002) != 0)
    goto LABEL_26;
  v13 = *(unsigned __int8 *)(v12 + 5);
  if (v13 - 51 < 6)
  {
    v12 = 10;
LABEL_26:
    v63[0] = (WTF::StringImpl *)v12;
    v30 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)v63, this, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_27;
  }
  if (v13 >= 0x17)
  {
    v14 = v11;
    goto LABEL_5;
  }
  v30 = JSC::JSCell::toObjectSlow(*((JSC::JSCell **)a2 + 5), (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_27:
  v12 = v30;
  if (!v30)
    return 0;
  v14 = *((_QWORD *)this + 7);
  v13 = *(unsigned __int8 *)(v30 + 5);
LABEL_5:
  if (v13 != 36)
  {
    if (v13 != 35)
    {
      if (v13 == 33)
      {
        v53 = JSC::DirectArguments::length((JSC::DirectArguments *)v12, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      else
      {
        if (v13 != 34)
        {
          v63[0] = (WTF::StringImpl *)JSC::JSObject::get((unsigned int *)v12, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v14 + 41952) + 1768), (uint64_t)a4, a5, a6, a7, a8);
          if (*(_DWORD *)(v14 + 80)
            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, v32, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
          {
            goto LABEL_60;
          }
          v33 = JSC::JSValue::toLength(v63, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
LABEL_52:
          v15 = v33;
          goto LABEL_8;
        }
        v53 = JSC::ScopedArguments::length((JSC::ScopedArguments *)v12, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      v15 = v53;
      goto LABEL_8;
    }
    v33 = JSC::ClonedArguments::length((JSC::ClonedArguments *)v12, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    goto LABEL_52;
  }
  if ((*(_BYTE *)(v12 + 4) & 0xE) == 0)
  {
LABEL_60:
    v15 = 0;
    goto LABEL_8;
  }
  v15 = *(unsigned int *)(*(_QWORD *)(v12 + 8) - 8);
LABEL_8:
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v16 = *((_DWORD *)a2 + 8);
  v17 = (v16 - 1);
  v18 = v15 + v17;
  if (v16 == 1)
  {
LABEL_17:
    if (*(_BYTE *)(v12 + 5) == 36)
    {
      if (HIDWORD(v18))
      {
        v37 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v37 = 0x1400000002;
        *(_QWORD *)(v37 + 8) = "Invalid array length";
        *(_DWORD *)(v37 + 16) = 4;
        v63[0] = (WTF::StringImpl *)v37;
        RangeError = JSC::createRangeError((unint64_t)this, v63, v38);
        JSC::VM::throwException((JSC::VM *)v11, this, RangeError, v40, v41, v42, v43, v44);
        v52 = v63[0];
        v63[0] = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
          {
            WTF::StringImpl::~StringImpl(v52, v45, v46, v47, v48, v49, v50, v51);
            WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
          }
          else
          {
            *(_DWORD *)v52 -= 2;
          }
        }
        return COERCE__INT64((double)v18) + 0x2000000000000;
      }
      JSC::JSArray::setLength((JSC::JSArray *)v12, (JSC::VM **)this, v18, 1, a5, a6, a7, a8, (__n128)a9);
    }
    else
    {
      v63[0] = 0;
      v63[1] = (WTF::StringImpl *)v12;
      v64 = -1;
      v65 = v65 & 0xF8 | 1;
      v66 = 0;
      v67 = 1;
      v68 = 0;
      v34 = *(void (**)(unint64_t, JSC *, uint64_t, uint64_t, WTF::StringImpl **))(16
                                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)
                                                                                                 + 0x48);
      v35 = *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768);
      if (HIDWORD(v18))
      {
        v28 = COERCE__INT64((double)v18) + 0x2000000000000;
        v34(v12, this, v35, v28, v63);
        return v28;
      }
      if ((v18 & 0x80000000) != 0)
        v36 = COERCE__INT64((double)v18) + 0x2000000000000;
      else
        v36 = v18 | 0xFFFE000000000000;
      v34(v12, this, v35, v36, v63);
    }
    if ((v18 & 0x80000000) != 0)
      return COERCE__INT64((double)v18) + 0x2000000000000;
    else
      return v18 | 0xFFFE000000000000;
  }
  if (!(v18 >> 53))
  {
    JSC::unshift(this, (JSC::JSGlobalObject *)v12, 0, 0, v17, v15, a7, a8, (__n128)a9);
    if (!*((_DWORD *)v62 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v62, v19, v20, v21, v22, a6, a7, a8))
    {
      v23 = 0;
      v24 = 0x600000000;
      while (1)
      {
        v25 = *(_QWORD *)((char *)a2 + (v24 >> 29));
        if ((JSC::JSObject::trySetIndexQuickly(v12, *((JSC::VM **)this + 7), v23, v25, 0, a6, a7, a8, *(double *)a9.i64) & 1) == 0)(*(void (**)(unint64_t, JSC *, uint64_t, unint64_t, uint64_t))(16* *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)+ 0x50))(v12, this, v23, v25, 1);
        if (*((_DWORD *)v62 + 20))
        {
          v31 = *((_DWORD *)v62 + 20);
          if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v62 + 64), 7u, v26, v27, a5, a6, a7, a8);
          if (*((_QWORD *)v62 + 2))
            break;
        }
        ++v23;
        v24 += 0x100000000;
        if (v17 == v23)
          goto LABEL_17;
      }
    }
    return 0;
  }
  return JSC::throwTypeError((unint64_t)this, &v62, (uint64_t)"unshift cannot produce an array of length larger than (2 ** 53) - 1", 68);
}

unint64_t JSC::arrayProtoFuncIndexOf(JSC *this, JSC::JSGlobalObject *a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int64x2_t a9)
{
  JSC::JSGlobalObject *v9;
  JSC *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  JSC::JSObject *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t result;
  int v31;
  uint64_t v32;
  double v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned int v45;
  BOOL v46;
  unsigned int v47;
  BOOL v48;
  JSC::JSGlobalObject *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  JSC::Symbol *v54;
  int64x2_t *v55;
  uint64_t v56;
  int64x2_t *v57;
  int8x8_t v58;
  int64x2_t *v59;
  char *v60;
  uint32x2_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int8x16_t *v65;
  int8x16_t *v66;
  __int32 v67;
  __int32 v68;
  uint8x8_t *v69;
  unsigned int v70;
  int16x8_t *v71;
  int16x8_t *v72;
  unsigned int v73;
  uint8x8_t *v74;
  unsigned int v75;
  double v76;
  uint64_t v77;
  unint64_t IndexQuicklyForTypedArray;
  int v79;
  BOOL v80;
  _BOOL4 v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  unsigned __int16 *v87;
  unsigned __int8 *v88;
  unsigned int v89;
  int16x8_t *v90;
  int16x8_t *v91;
  unsigned int v92;
  BOOL v93;
  unsigned int v94;
  BOOL v95;
  uint8x8_t *v96;
  unsigned int v97;
  int16x8_t *v98;
  int16x8_t *v99;
  unsigned int v100;
  uint8x8_t *v101;
  unsigned int v102;
  unsigned int v103;
  BOOL v104;
  unsigned int v105;
  BOOL v106;
  __int32 v107;
  __int32 v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  int v120;
  __int32 v121;
  int v122;
  int v123;
  int v124;
  unint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  __int32 v134;
  int v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  int v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  unsigned int v146;
  BOOL v147;
  unsigned int v148;
  BOOL v149;
  int v150;
  int v151;
  uint64_t v152;
  unsigned __int8 *v153;
  unsigned __int8 *v154;
  double v155;
  unint64_t v156;
  uint64_t v157;
  int v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  JSC *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  BOOL v169;
  int v170;
  int v171;
  unint64_t v172;
  double v173;
  double v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  JSC::JSObject *v178;
  char v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  BOOL v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  JSC::VMTraps *v187;
  JSC::JSGlobalObject *v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  JSC::Symbol *v193;
  double v194;
  uint64_t v195;
  unint64_t v196;
  _BOOL4 v197;
  JSC *v198;
  unint64_t v199;
  double v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _BOOL4 v206;
  JSC::JSGlobalObject *v207;
  JSC::JSGlobalObject *v208;
  JSC::JSGlobalObject *v209;
  JSC::JSObject *v210;

  v9 = a2;
  v10 = this;
  v11 = *((_QWORD *)this + 7);
  v12 = *((_QWORD *)a2 + 5);
  if ((v12 & 0xFFFE000000000002) != 0)
    goto LABEL_336;
  v13 = *(unsigned __int8 *)(v12 + 5);
  if (v13 - 51 < 6)
  {
    v12 = 10;
LABEL_336:
    v210 = (JSC::JSObject *)v12;
    v141 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v210, this, (JSC::Structure *)a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_337;
  }
  if (v13 >= 0x17)
  {
    v14 = *((_QWORD *)this + 7);
    goto LABEL_5;
  }
  v141 = JSC::JSCell::toObjectSlow(*((JSC::JSCell **)a2 + 5), (JSC::SymbolObject **)this, a3, a4, a5, a6, a7, a8);
LABEL_337:
  v12 = v141;
  if (!v141)
    return 0;
  v14 = *((_QWORD *)v10 + 7);
  v13 = *(unsigned __int8 *)(v141 + 5);
LABEL_5:
  if (v13 == 36)
  {
    if ((*(_BYTE *)(v12 + 4) & 0xE) != 0)
      v15 = *(_DWORD *)(*(_QWORD *)(v12 + 8) - 8);
    else
      v15 = 0;
    v16 = v15;
    goto LABEL_9;
  }
  if (v13 != 35)
  {
    if (v13 == 33)
    {
      v16 = JSC::DirectArguments::length((JSC::DirectArguments *)v12, v10, a3, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_9;
    }
    if (v13 == 34)
    {
      v16 = JSC::ScopedArguments::length((JSC::ScopedArguments *)v12, v10, a3, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_9;
    }
    goto LABEL_386;
  }
  if ((*(_BYTE *)((16 * *(unsigned int *)v12) | 0x12) & 0x20) != 0)
  {
LABEL_386:
    v210 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v12, (uint64_t)v10, *(_QWORD *)(*(_QWORD *)(v14 + 41952) + 1768), (uint64_t)a4, a5, a6, a7, a8);
    if (*(_DWORD *)(v14 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, v157, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v16 = 0;
      goto LABEL_9;
    }
    goto LABEL_387;
  }
  v178 = *(JSC::JSObject **)(*(_QWORD *)(v12 + 8) - 16);
  v210 = v178;
  if ((unint64_t)v178 >= 0xFFFE000000000000)
  {
    v16 = v178 & ~((int)v178 >> 31);
    goto LABEL_9;
  }
LABEL_387:
  v16 = JSC::JSValue::toLength(&v210, v10, a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
LABEL_9:
  if (*(_DWORD *)(v11 + 80))
  {
    v158 = *(_DWORD *)(v11 + 80);
    if ((v158 & 0x27) != 0 && (v158 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if (!v16)
    return 0xFFFE0000FFFFFFFFLL;
  if ((unint64_t)(*((int *)v9 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL
    || (v17 = (JSC::JSObject *)*((_QWORD *)v9 + 7), v210 = v17, v17 == (JSC::JSObject *)10))
  {
    v19 = 0;
  }
  else if ((unint64_t)v17 < 0xFFFE000000000000)
  {
    v172 = (unint64_t)v17 - 0x2000000000000;
    if (v172 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase(&v210, v10, a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
    else
      a9.i64[0] = v172;
    v173 = trunc(*(double *)a9.i64 + 0.0);
    v174 = (double)v16;
    if (v173 < 0.0)
    {
      v200 = v173 + v174;
      if (v200 <= 0.0)
        v200 = 0.0;
      v19 = (unint64_t)v200;
    }
    else if (v173 <= v174)
    {
      v19 = (unint64_t)v173;
    }
    else
    {
      v19 = v16;
    }
  }
  else
  {
    if ((int)v17 >= v16)
      v18 = v16;
    else
      v18 = (int)v17;
    if ((int)v17 < 0)
      v19 = ((int)v17 + v16) & ~((uint64_t)((int)v17 + v16) >> 63);
    else
      v19 = v18;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v170 = *(_DWORD *)(v11 + 80);
    if ((v170 & 0x27) != 0 && (v170 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if (*((_DWORD *)v9 + 8) == 1)
    v20 = 10;
  else
    v20 = *((_QWORD *)v9 + 6);
  v21 = v20 >> 49;
  if (*(_BYTE *)(v12 + 5) == 36)
  {
    v22 = *(_QWORD **)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28);
    v23 = v22[288];
    if ((v23 & 1) != 0)
      v24 = (v23 >> 1) & 3;
    else
      v24 = *(unsigned __int8 *)(v23 + 4);
    if (v24 == 2)
      goto LABEL_453;
    v25 = *(unsigned __int8 *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 8);
    v26 = (v25 >> 1) & 7;
    if ((v25 & 0x10) != 0)
      v26 = ((v25 & 0xE) + 10) >> 1;
    v27 = *((_DWORD *)v22 + v26 + 213);
    v28 = v27 ? 16 * (v27 & 0xFFFFFFFE) : 0;
    if (v28 != 16 * (*(_DWORD *)v12 & 0xFFFFFFFE))
    {
      if ((v25 & 0x20) != 0 || *(_BYTE *)(v22[256] + 4) == 2)
        goto LABEL_453;
      v195 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
      if (!v195)
        v195 = *(_QWORD *)(v12 + 16);
      if (v195 != v22[84])
        goto LABEL_453;
    }
    if ((*(_BYTE *)(v12 + 4) & 0xE) != 0)
      v29 = *(_DWORD *)(*(_QWORD *)(v12 + 8) - 8);
    else
      v29 = 0;
    result = 0;
    if (v16 != v29 || HIDWORD(v19))
      goto LABEL_98;
    if (v19 >= v16)
      goto LABEL_445;
    v31 = *(_BYTE *)(v12 + 4) & 0xF;
    if ((v31 - 8) < 2)
    {
      v32 = *(_QWORD *)(v12 + 8);
      if ((v20 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v20 + 5) < 0x17u)
      {
        v207 = v10;
        *(double *)a9.i64 = (double)(int)v20;
        a5 = 0xFFFE000000000000;
        if (v20 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v33 = v20 - 0x2000000000000;
        else
          v33 = (double)(int)v20;
        v34 = v19;
        while (1)
        {
          a3 = *(_QWORD *)(v32 + 8 * v34);
          if (!a3)
            goto LABEL_58;
          if (v20 >= 0xFFFE000000000000)
          {
            if ((unint64_t)a3 >= 0xFFFE000000000000)
              goto LABEL_52;
          }
          else if (!v21)
          {
            goto LABEL_49;
          }
          if ((unint64_t)a3 >> 49)
          {
            *(double *)a9.i64 = (double)(int)a3;
            if ((unint64_t)a3 <= 0xFFFDFFFFFFFFFFFFLL)
              a9.i64[0] = a3 - 0x2000000000000;
            v36 = v33 == *(double *)a9.i64;
            goto LABEL_53;
          }
LABEL_49:
          if (((a3 | v20) & 0xFFFE000000000002) != 0)
            goto LABEL_52;
          v35 = *(unsigned __int8 *)(v20 + 5);
          if (v35 != 2)
          {
            if (v35 != 3 || *(_BYTE *)(a3 + 5) != 3)
            {
LABEL_52:
              v36 = v20 == a3;
              goto LABEL_53;
            }
            v49 = a2;
            v50 = v11;
            v51 = v12;
            v52 = v16;
            v53 = v21;
            v54 = a4;
            v37 = JSC::JSBigInt::equals((JSC::JSBigInt *)v20, *(JSC::JSBigInt **)(v32 + 8 * v34), (JSC::JSBigInt *)a3);
            goto LABEL_92;
          }
          if (*(_BYTE *)(a3 + 5) != 2)
            goto LABEL_52;
          v38 = *(_QWORD *)(v20 + 8);
          if ((v38 & 1) != 0 || (v39 = *(_QWORD *)(a3 + 8), (v39 & 1) != 0))
          {
            v49 = a2;
            v50 = v11;
            v51 = v12;
            v52 = v16;
            v53 = v21;
            v54 = a4;
            v37 = JSC::JSString::equalSlowCase((JSC::JSString *)v20, v207, (JSC::JSString *)a3, (uint64_t)a4, 0xFFFE000000000000, a6, a7, a8, (int8x16_t)a9);
LABEL_92:
            a5 = 0xFFFE000000000000;
            a4 = v54;
            v21 = v53;
            v16 = v52;
            v12 = v51;
            v11 = v50;
            a2 = v49;
            goto LABEL_56;
          }
          v40 = *(_DWORD *)(v38 + 16);
          v41 = *(_DWORD *)(v39 + 16);
          if (v41 >= 0x100 && v40 >= 0x100 && (v41 ^ v40) > 0xFF)
            goto LABEL_96;
          v42 = *(unsigned int *)(v38 + 4);
          if ((_DWORD)v42 != *(_DWORD *)(v39 + 4))
            goto LABEL_96;
          if (!(_DWORD)v42)
            goto LABEL_87;
          v43 = *(unsigned __int8 **)(v38 + 8);
          v44 = *(unsigned __int8 **)(v39 + 8);
          if ((v40 & 4) != 0)
          {
            if ((v41 & 4) == 0)
            {
              if (*(_WORD *)v44 != *v43)
                goto LABEL_96;
              v69 = (uint8x8_t *)(v43 + 1);
              v70 = v42 - 1;
              v71 = (int16x8_t *)(v44 + 2);
              if (v70 >= 8)
              {
                a9 = (int64x2_t)vceqq_s16(*v71, (int16x8_t)vmovl_u8(*v69));
                a9.i16[0] = vminvq_u16((uint16x8_t)a9);
                if (a9.i32[0])
                {
                  v45 = v70 & 7;
                  do
                  {
                    a9 = (int64x2_t)vceqq_s16(*(int16x8_t *)((char *)v71 + 2 * v45), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v69 + v45)));
                    a9.i16[0] = vminvq_u16((uint16x8_t)a9);
                    v37 = a9.i32[0] != 0;
                    v45 += 8;
                    if (a9.i32[0])
                      v46 = v45 >= v70;
                    else
                      v46 = 1;
                  }
                  while (!v46);
                  goto LABEL_56;
                }
LABEL_96:
                v37 = 0;
                goto LABEL_56;
              }
              if (v70 >= 4)
              {
                v109 = (v69->u32[0] | ((unint64_t)v69->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                v36 = ((v109 | (v109 << 8)) & 0xFF00FF00FF00FFLL) == v71->i64[0];
                v110 = (*(unsigned int *)((char *)v69->u32 + (v70 & 3)) | ((unint64_t)*(unsigned int *)((char *)v69->u32 + (v70 & 3)) << 16)) & 0xFFFF0000FFFFLL;
                v111 = (v110 | (v110 << 8)) & 0xFF00FF00FF00FFLL;
                v112 = *(uint64_t *)((char *)v71->i64 + 2 * (v70 & 3));
                v36 = v36 && v111 == v112;
                goto LABEL_53;
              }
              if (v70 >= 2)
              {
                v120 = (v69->u16[0] | (v69->u16[0] << 8)) & 0xFF00FF;
                v121 = v71->i32[0];
                v122 = (*(unsigned __int16 *)((char *)v69->u16 + (v70 & 1)) | (*(unsigned __int16 *)((char *)v69->u16 + (v70 & 1)) << 8)) & 0xFF00FF;
                v123 = *(__int32 *)((char *)v71->i32 + 2 * (v70 & 1));
                v36 = v120 == v121 && v122 == v123;
                goto LABEL_53;
              }
              if (v70 == 1)
              {
                v68 = v69->u8[0];
                v67 = v71->u16[0];
LABEL_120:
                v36 = v67 == v68;
LABEL_53:
                v37 = v36;
                goto LABEL_56;
              }
              goto LABEL_87;
            }
            if (*v43 != *v44)
              goto LABEL_96;
            v75 = v42 - 1;
            if ((_DWORD)v42 == 1)
              goto LABEL_87;
            v65 = (int8x16_t *)(v43 + 1);
            v66 = (int8x16_t *)(v44 + 1);
            if ((_DWORD)v42 == 2)
            {
              v67 = v65->u8[0];
              v68 = v66->u8[0];
              goto LABEL_120;
            }
            switch(31 - __clz(v42 - 2))
            {
              case 0u:
                goto LABEL_119;
              case 1u:
                if (v65->u16[0] != v66->u16[0])
                  goto LABEL_96;
                v116 = *(unsigned __int16 *)&v43[v42 - 2];
                v117 = *(unsigned __int16 *)&v44[v42 - 2];
                goto LABEL_311;
              case 2u:
                if (v65->i32[0] != v66->i32[0])
                  goto LABEL_96;
                v116 = *(_DWORD *)&v43[v42 - 4];
                v145 = &v44[v42];
LABEL_310:
                v117 = *((_DWORD *)v145 - 1);
LABEL_311:
                v36 = v116 == v117;
                goto LABEL_53;
              case 3u:
                if (v65->i64[0] != v66->i64[0])
                  goto LABEL_96;
                v143 = *(_QWORD *)&v43[v42 - 8];
                v144 = &v44[v42];
LABEL_305:
                v36 = v143 == *((_QWORD *)v144 - 1);
                goto LABEL_53;
              case 4u:
                a9 = (int64x2_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v43[v42 - 16], *(int8x16_t *)&v44[v42 - 16]), vceqq_s8(*(int8x16_t *)(v43 + 1), *(int8x16_t *)(v44 + 1)));
                a9.i8[0] = vminvq_u8((uint8x16_t)a9);
LABEL_307:
                v37 = a9.i32[0] != 0;
                break;
              default:
                a9 = (int64x2_t)vceqq_s8(*v65, *v66);
                a9.i8[0] = vminvq_u8((uint8x16_t)a9);
                if (!a9.i32[0])
                  goto LABEL_96;
                if (v75 < 0x10)
                  goto LABEL_87;
                v148 = v75 & 0xF;
                do
                {
                  a9 = (int64x2_t)vceqq_s8(*(int8x16_t *)((char *)v65 + v148), *(int8x16_t *)((char *)v66 + v148));
                  a9.i8[0] = vminvq_u8((uint8x16_t)a9);
                  v37 = a9.i32[0] != 0;
                  v148 += 16;
                  if (a9.i32[0])
                    v149 = v148 >= v75;
                  else
                    v149 = 1;
                }
                while (!v149);
                break;
            }
          }
          else
          {
            if ((v41 & 4) != 0)
            {
              if (*(_WORD *)v43 != *v44)
                goto LABEL_96;
              v72 = (int16x8_t *)(v43 + 2);
              v73 = v42 - 1;
              v74 = (uint8x8_t *)(v44 + 1);
              if (v73 >= 8)
              {
                a9 = (int64x2_t)vceqq_s16(*v72, (int16x8_t)vmovl_u8(*v74));
                a9.i16[0] = vminvq_u16((uint16x8_t)a9);
                if (a9.i32[0])
                {
                  v47 = v73 & 7;
                  do
                  {
                    a9 = (int64x2_t)vceqq_s16(*(int16x8_t *)((char *)v72 + 2 * v47), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v74 + v47)));
                    a9.i16[0] = vminvq_u16((uint16x8_t)a9);
                    v37 = a9.i32[0] != 0;
                    v47 += 8;
                    if (a9.i32[0])
                      v48 = v47 >= v73;
                    else
                      v48 = 1;
                  }
                  while (!v48);
                  goto LABEL_56;
                }
                goto LABEL_96;
              }
              if (v73 >= 4)
              {
                v113 = (v74->u32[0] | ((unint64_t)v74->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                v114 = (*(unsigned int *)((char *)v74->u32 + (v73 & 3)) | ((unint64_t)*(unsigned int *)((char *)v74->u32 + (v73 & 3)) << 16)) & 0xFFFF0000FFFFLL;
                v115 = (v114 | (v114 << 8)) & 0xFF00FF00FF00FFLL;
                v36 = ((v113 | (v113 << 8)) & 0xFF00FF00FF00FFLL) == v72->i64[0]
                   && v115 == *(uint64_t *)((char *)v72->i64 + 2 * (v73 & 3));
                goto LABEL_53;
              }
              if (v73 >= 2)
              {
                v36 = ((v74->u16[0] | (v74->u16[0] << 8)) & 0xFF00FF) == v72->i32[0];
                v124 = (*(unsigned __int16 *)((char *)v74->u16 + (v73 & 1)) | (*(unsigned __int16 *)((char *)v74->u16 + (v73 & 1)) << 8)) & 0xFF00FF;
                v36 = v36 && v124 == *(__int32 *)((char *)v72->i32 + 2 * (v73 & 1));
                goto LABEL_53;
              }
              if (v73 == 1)
              {
                v36 = v72->u16[0] == v74->u8[0];
                goto LABEL_53;
              }
LABEL_87:
              v37 = 1;
              goto LABEL_56;
            }
            if (*(unsigned __int16 *)v43 != *(unsigned __int16 *)v44)
              goto LABEL_96;
            v64 = v42 - 1;
            if ((_DWORD)v42 == 1)
              goto LABEL_87;
            v65 = (int8x16_t *)(v43 + 2);
            v66 = (int8x16_t *)(v44 + 2);
            if ((_DWORD)v42 == 2)
            {
LABEL_119:
              v67 = v65->u16[0];
              v68 = v66->u16[0];
              goto LABEL_120;
            }
            switch(31 - __clz(v42 - 2))
            {
              case 0u:
                v67 = v65->i32[0];
                v68 = v66->i32[0];
                goto LABEL_120;
              case 1u:
                if (v65->i32[0] != v66->i32[0])
                  goto LABEL_96;
                v116 = *(_DWORD *)&v43[2 * v42 - 4];
                v145 = &v44[2 * v42];
                goto LABEL_310;
              case 2u:
                if (v65->i64[0] != v66->i64[0])
                  goto LABEL_96;
                v143 = *(_QWORD *)&v43[2 * v42 - 8];
                v144 = &v44[2 * v42];
                goto LABEL_305;
              case 3u:
                a9 = (int64x2_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v43[2 * v42 - 16], *(int16x8_t *)&v44[2 * v42 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v43 + 2), *(int16x8_t *)(v44 + 2)));
                a9.i16[0] = vminvq_u16((uint16x8_t)a9);
                goto LABEL_307;
              default:
                a9 = (int64x2_t)vceqq_s16(*(int16x8_t *)v65, *(int16x8_t *)v66);
                a9.i16[0] = vminvq_u16((uint16x8_t)a9);
                if (!a9.i32[0])
                  goto LABEL_96;
                if (v64 < 8)
                  goto LABEL_87;
                v146 = v64 & 7;
                do
                {
                  a9 = (int64x2_t)vceqq_s16(*(int16x8_t *)((char *)v65 + 2 * v146), *(int16x8_t *)((char *)v66 + 2 * v146));
                  a9.i16[0] = vminvq_u16((uint16x8_t)a9);
                  v37 = a9.i32[0] != 0;
                  v146 += 8;
                  if (a9.i32[0])
                    v147 = v146 >= v64;
                  else
                    v147 = 1;
                }
                while (!v147);
                break;
            }
          }
LABEL_56:
          if (*(_DWORD *)(v11 + 80))
          {
            v142 = *(_DWORD *)(v11 + 80);
            if ((v142 & 0x27) != 0 && (v142 & 0x20) == 0)
            {
              v206 = v37;
              v187 = (JSC::VMTraps *)(v11 + 64);
              v188 = a2;
              v189 = v11;
              v190 = v12;
              v191 = v16;
              v192 = v21;
              v193 = a4;
              JSC::VMTraps::handleTraps(v187, 7u, a3, (uint64_t)a4, 0xFFFE000000000000, a6, a7, a8);
              a5 = 0xFFFE000000000000;
              a4 = v193;
              v21 = v192;
              v16 = v191;
              v12 = v190;
              v11 = v189;
              a2 = v188;
              v37 = v206;
            }
            if (*(_QWORD *)(v11 + 16))
            {
              result = 0;
              goto LABEL_97;
            }
          }
          if (v37)
          {
            if ((v34 & 0x80000000) != 0)
              result = COERCE__INT64((double)v34) + 0x2000000000000;
            else
              result = v34 | 0xFFFE000000000000;
LABEL_97:
            v10 = v207;
            goto LABEL_98;
          }
LABEL_58:
          if ((_DWORD)++v34 == (_DWORD)v16)
          {
            result = 0xFFFE0000FFFFFFFFLL;
            goto LABEL_97;
          }
        }
      }
      v55 = (int64x2_t *)(v32 + 8 * v19);
      v56 = (v16 - v19);
      v57 = (int64x2_t *)((char *)v55 + 8 * v56);
      if (v56 < 0x20)
      {
        if ((_DWORD)v16 != (_DWORD)v19)
        {
          v128 = 8 * v56;
          result = 0xFFFE0000FFFFFFFFLL;
          while (v20 != v55->i64[0])
          {
            v55 = (int64x2_t *)((char *)v55 + 8);
            v128 -= 8;
            if (!v128)
              goto LABEL_98;
          }
LABEL_114:
          if (v55 != v57)
          {
            v62 = (unint64_t)v55 - v32;
            v63 = ((uint64_t)v55->i64 - v32) >> 3;
            if (v63 == (int)v63)
              result = (v62 >> 3) | 0xFFFE000000000000;
            else
              result = COERCE__INT64((double)v63) + 0x2000000000000;
            goto LABEL_98;
          }
        }
      }
      else
      {
        a9 = vdupq_n_s64(v20);
        do
        {
          v58 = (int8x8_t)vmovn_s64(vceqq_s64(*v55, a9));
          if (v58)
            goto LABEL_113;
          v59 = v55 + 1;
          v60 = &v55[1].i8[8];
          ++v55;
        }
        while (v60 < (char *)v57);
        if (v59 < v57)
        {
          a9 = vceqq_s64(v57[-1], a9);
          v58 = (int8x8_t)vmovn_s64(a9);
          if (v58)
          {
            v55 = v57 - 1;
LABEL_113:
            v61 = (uint32x2_t)vorn_s8((int8x8_t)0x100000000, v58);
            v55 = (int64x2_t *)((char *)v55 + 8 * vpmin_u32(v61, v61).u8[0]);
            goto LABEL_114;
          }
        }
      }
LABEL_445:
      result = 0xFFFE0000FFFFFFFFLL;
      goto LABEL_98;
    }
    if ((v31 - 4) >= 2)
    {
      if ((v31 - 6) >= 2)
      {
LABEL_453:
        result = 0;
        goto LABEL_98;
      }
      if (!v21)
        goto LABEL_445;
      v155 = (double)(int)v20;
      if (v20 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v155 = v20 - 0x2000000000000;
      v156 = v19;
      result = 0xFFFE0000FFFFFFFFLL;
      do
      {
        if (*(double *)(*(_QWORD *)(v12 + 8) + 8 * v156) == v155)
        {
          if ((v156 & 0x80000000) != 0)
            result = COERCE__INT64((double)v156) + 0x2000000000000;
          else
            result = v156 | 0xFFFE000000000000;
          break;
        }
        ++v156;
      }
      while (v16 != v156);
    }
    else
    {
      if (!v21)
        goto LABEL_445;
      v118 = v20;
      if (v20 <= 0xFFFDFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v194 = v20 - 0x2000000000000;
        if (fabs(COERCE_DOUBLE(v20 - 0x2000000000000)) == INFINITY)
          goto LABEL_445;
        v205 = (int)v194;
        if ((double)(int)v205 != v194)
          goto LABEL_445;
        v118 = v205 | 0xFFFE000000000000;
      }
      v119 = v19;
      result = 0xFFFE0000FFFFFFFFLL;
      do
      {
        if (v118 == *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v119))
        {
          if ((v119 & 0x80000000) != 0)
            result = COERCE__INT64((double)v119) + 0x2000000000000;
          else
            result = v119 | 0xFFFE000000000000;
          break;
        }
        ++v119;
      }
      while (v16 != v119);
    }
LABEL_98:
    if (!*(_DWORD *)(v11 + 80))
      goto LABEL_99;
    v171 = *(_DWORD *)(v11 + 80);
    if ((v171 & 0x27) != 0 && (v171 & 0x20) == 0)
    {
      v198 = v10;
      v199 = result;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      result = v199;
      v10 = v198;
    }
    if (!*(_QWORD *)(v11 + 16))
    {
LABEL_99:
      if (result)
        return result;
      goto LABEL_133;
    }
    return 0;
  }
LABEL_133:
  if (v16 <= v19)
    return 0xFFFE0000FFFFFFFFLL;
  *(double *)a9.i64 = (double)(int)v20;
  if (v20 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v76 = v20 - 0x2000000000000;
  else
    v76 = (double)(int)v20;
  while (1)
  {
    v210 = (JSC::JSObject *)v19;
    if (v19 > 0xFFFFFFFE)
      goto LABEL_142;
    v77 = *(_QWORD *)(v12 + 8);
    if ((*(_BYTE *)(v12 + 4) & 0xFu) - 8 >= 2)
    {
      switch(*(_BYTE *)(v12 + 4) & 0xF)
      {
        case 0:
        case 1:
          switch(*(_BYTE *)(v12 + 5))
          {
            case '\'':
              v160 = v11;
              v162 = v16;
              v163 = v21;
              v164 = v10;
              v161 = v12;
              v179 = *(_BYTE *)(v12 + 40);
              if ((v179 & 7u) > 2)
                goto LABEL_423;
              goto LABEL_431;
            case '(':
              v179 = *(_BYTE *)(v12 + 40);
              if ((v179 & 7u) <= 2)
                goto LABEL_176;
              v160 = v11;
              v161 = v12;
              v162 = v16;
              v163 = v21;
              v164 = v10;
LABEL_423:
              v180 = *(_QWORD *)(v77 - 8);
              if (*(_BYTE *)(v180 + 64) && (v204 = *(_QWORD *)(v180 + 32)) != 0)
                v181 = *(_QWORD *)(v204 + 32);
              else
                v181 = *(_QWORD *)(v180 + 48);
              v12 = v161;
              v168 = *(_QWORD *)(v161 + 24);
              v182 = *(_QWORD *)(v161 + 32);
              v10 = v164;
              v21 = v163;
              v16 = v162;
              v11 = v160;
              if (v168 + v182 > v181)
                goto LABEL_142;
              if ((v179 & 1) == 0)
                goto LABEL_440;
              v183 = v181 - v182 > v19;
              goto LABEL_441;
            case ')':
              if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(v12, v19))
                goto LABEL_142;
              goto LABEL_177;
            case '*':
              v160 = v11;
              v162 = v16;
              v163 = v21;
              v164 = v10;
              v161 = v12;
              v159 = *(_BYTE *)(v12 + 40);
              if ((v159 & 7u) > 2)
                goto LABEL_393;
LABEL_431:
              v12 = v161;
              v183 = *(_QWORD *)(v161 + 24) > v19;
              v10 = v164;
              v21 = v163;
              v16 = v162;
              goto LABEL_432;
            case '+':
              v159 = *(_BYTE *)(v12 + 40);
              if ((v159 & 7u) <= 2)
                goto LABEL_176;
              v160 = v11;
              v161 = v12;
              v162 = v16;
              v163 = v21;
              v164 = v10;
LABEL_393:
              v165 = *(_QWORD *)(v77 - 8);
              if (*(_BYTE *)(v165 + 64) && (v202 = *(_QWORD *)(v165 + 32)) != 0)
                v166 = *(_QWORD *)(v202 + 32);
              else
                v166 = *(_QWORD *)(v165 + 48);
              v12 = v161;
              v168 = *(_QWORD *)(v161 + 24);
              v167 = *(_QWORD *)(v161 + 32);
              v10 = v164;
              v21 = v163;
              v16 = v162;
              v11 = v160;
              if (v167 + 2 * v168 > v166)
                goto LABEL_142;
              if ((v159 & 1) == 0)
                goto LABEL_440;
              v169 = v19 >= (v166 - v167) >> 1;
              goto LABEL_456;
            case ',':
            case '-':
            case '.':
              if ((*(_BYTE *)(v12 + 40) & 7u) <= 2)
                goto LABEL_176;
              v160 = v11;
              v161 = v12;
              v162 = v16;
              v163 = v21;
              v164 = v10;
              v184 = *(_QWORD *)(v77 - 8);
              if (*(_BYTE *)(v184 + 64) && (v201 = *(_QWORD *)(v184 + 32)) != 0)
                v185 = *(_QWORD *)(v201 + 32);
              else
                v185 = *(_QWORD *)(v184 + 48);
              v168 = *(_QWORD *)(v12 + 24);
              v186 = *(_QWORD *)(v12 + 32);
              if (v186 + 4 * v168 > v185)
                goto LABEL_142;
              if ((*(_BYTE *)(v12 + 40) & 1) == 0)
                goto LABEL_440;
              v169 = v19 >= (v185 - v186) >> 2;
              goto LABEL_456;
            case '/':
              if ((*(_BYTE *)(v12 + 40) & 7u) <= 2)
              {
LABEL_176:
                if (*(_QWORD *)(v12 + 24) <= v19)
                  goto LABEL_142;
LABEL_177:
                IndexQuicklyForTypedArray = JSC::JSObject::getIndexQuicklyForTypedArray(v12, v19, 0);
                goto LABEL_141;
              }
              v160 = v11;
              v161 = v12;
              v162 = v16;
              v163 = v21;
              v164 = v10;
              v175 = *(_QWORD *)(v77 - 8);
              if (*(_BYTE *)(v175 + 64) && (v203 = *(_QWORD *)(v175 + 32)) != 0)
                v176 = *(_QWORD *)(v203 + 32);
              else
                v176 = *(_QWORD *)(v175 + 48);
              v168 = *(_QWORD *)(v12 + 24);
              v177 = *(_QWORD *)(v12 + 32);
              if (v177 + 8 * v168 <= v176)
              {
                if ((*(_BYTE *)(v12 + 40) & 1) != 0)
                {
                  v169 = v19 >= (v176 - v177) >> 3;
LABEL_456:
                  v10 = v164;
                  v21 = v163;
                  v16 = v162;
                  v12 = v161;
                  v11 = v160;
                  if (!v169)
                    goto LABEL_177;
                }
                else
                {
LABEL_440:
                  v183 = v168 > v19;
LABEL_441:
                  v10 = v164;
                  v21 = v163;
                  v16 = v162;
                  v12 = v161;
LABEL_432:
                  v11 = v160;
                  if (v183)
                    goto LABEL_177;
                }
              }
              break;
            default:
              goto LABEL_142;
          }
          break;
        case 3:
          break;
        case 4:
        case 5:
          goto LABEL_139;
        case 6:
        case 7:
          if (*(_DWORD *)(v77 - 8) <= v19)
            break;
          a9.i64[0] = *(_QWORD *)(v77 + 8 * v19);
          IndexQuicklyForTypedArray = a9.i64[0] + 0x2000000000000;
          goto LABEL_141;
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
          if (*(_DWORD *)(v77 - 4) <= v19)
            break;
          IndexQuicklyForTypedArray = *(_QWORD *)(v77 + 8 * v19 + 16);
          goto LABEL_141;
        default:
          __break(0xC471u);
          JUMPOUT(0x1988A9BD4);
      }
LABEL_142:
      IndexQuicklyForTypedArray = JSC::JSObject::getIfPropertyExists<unsigned long long>((_BYTE *)v12, v10, (const WTF::StringImpl *)&v210, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_143;
    }
LABEL_139:
    if (*(_DWORD *)(v77 - 8) <= v19)
      goto LABEL_142;
    IndexQuicklyForTypedArray = *(_QWORD *)(v77 + 8 * v19);
LABEL_141:
    if (!IndexQuicklyForTypedArray)
      goto LABEL_142;
LABEL_143:
    if (*(_DWORD *)(v11 + 80))
    {
      v150 = *(_DWORD *)(v11 + 80);
      if ((v150 & 0x27) != 0 && (v150 & 0x20) == 0)
      {
        v208 = v10;
        v196 = IndexQuicklyForTypedArray;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, IndexQuicklyForTypedArray, (uint64_t)a4, a5, a6, a7, a8);
        IndexQuicklyForTypedArray = v196;
        v10 = v208;
      }
      if (*(_QWORD *)(v11 + 16))
        return 0;
    }
    if (IndexQuicklyForTypedArray)
      break;
LABEL_157:
    if (++v19 == v16)
      return 0xFFFE0000FFFFFFFFLL;
  }
  if (v20 >= 0xFFFE000000000000)
  {
    if (IndexQuicklyForTypedArray >= 0xFFFE000000000000)
      goto LABEL_151;
LABEL_147:
    if (!(IndexQuicklyForTypedArray >> 49))
      goto LABEL_148;
    *(double *)a9.i64 = (double)(int)IndexQuicklyForTypedArray;
    if (IndexQuicklyForTypedArray <= 0xFFFDFFFFFFFFFFFFLL)
      a9.i64[0] = IndexQuicklyForTypedArray - 0x2000000000000;
    v80 = v76 == *(double *)a9.i64;
    goto LABEL_152;
  }
  if (v21)
    goto LABEL_147;
LABEL_148:
  if (v20 & 0xFFFE000000000002 | IndexQuicklyForTypedArray & 0xFFFE000000000002)
    goto LABEL_151;
  v79 = *(unsigned __int8 *)(v20 + 5);
  if (v79 != 2)
  {
    if (v79 == 3 && *(_BYTE *)(IndexQuicklyForTypedArray + 5) == 3)
    {
      v81 = JSC::JSBigInt::equals((JSC::JSBigInt *)v20, (JSC::JSBigInt *)IndexQuicklyForTypedArray, (JSC::JSBigInt *)IndexQuicklyForTypedArray);
      goto LABEL_155;
    }
LABEL_151:
    v80 = v20 == IndexQuicklyForTypedArray;
LABEL_152:
    v81 = v80;
    goto LABEL_155;
  }
  if (*(_BYTE *)(IndexQuicklyForTypedArray + 5) != 2)
    goto LABEL_151;
  v82 = *(_QWORD *)(v20 + 8);
  if ((v82 & 1) != 0 || (v83 = *(_QWORD *)(IndexQuicklyForTypedArray + 8), (v83 & 1) != 0))
  {
    v81 = JSC::JSString::equalSlowCase((JSC::JSString *)v20, v10, (JSC::JSString *)IndexQuicklyForTypedArray, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
    goto LABEL_155;
  }
  v84 = *(_DWORD *)(v82 + 16);
  v85 = *(_DWORD *)(v83 + 16);
  if (v85 >= 0x100 && v84 >= 0x100 && (v85 ^ v84) > 0xFF)
    goto LABEL_207;
  v86 = *(unsigned int *)(v82 + 4);
  if ((_DWORD)v86 != *(_DWORD *)(v83 + 4))
    goto LABEL_207;
  if (!(_DWORD)v86)
    goto LABEL_208;
  v87 = *(unsigned __int16 **)(v82 + 8);
  v88 = *(unsigned __int8 **)(v83 + 8);
  if ((v84 & 4) == 0)
  {
    if ((v85 & 4) != 0)
    {
      if (*v87 == *v88)
      {
        v99 = (int16x8_t *)(v87 + 1);
        v100 = v86 - 1;
        v101 = (uint8x8_t *)(v88 + 1);
        if (v100 < 8)
        {
          if (v100 >= 4)
          {
            v137 = (v101->u32[0] | ((unint64_t)v101->u32[0] << 16)) & 0xFFFF0000FFFFLL;
            v138 = (*(unsigned int *)((char *)v101->u32 + (v100 & 3)) | ((unint64_t)*(unsigned int *)((char *)v101->u32 + (v100 & 3)) << 16)) & 0xFFFF0000FFFFLL;
            v139 = (v138 | (v138 << 8)) & 0xFF00FF00FF00FFLL;
            v80 = ((v137 | (v137 << 8)) & 0xFF00FF00FF00FFLL) == v99->i64[0]
               && v139 == *(uint64_t *)((char *)v99->i64 + 2 * (v100 & 3));
            goto LABEL_152;
          }
          if (v100 >= 2)
          {
            v36 = ((v101->u16[0] | (v101->u16[0] << 8)) & 0xFF00FF) == v99->i32[0];
            v140 = (*(unsigned __int16 *)((char *)v101->u16 + (v100 & 1)) | (*(unsigned __int16 *)((char *)v101->u16
                                                                                                 + (v100 & 1)) << 8)) & 0xFF00FF;
            v80 = v36 && v140 == *(__int32 *)((char *)v99->i32 + 2 * (v100 & 1));
            goto LABEL_152;
          }
          if (v100 == 1)
          {
            v80 = v99->u16[0] == v101->u8[0];
            goto LABEL_152;
          }
          goto LABEL_208;
        }
        a9 = (int64x2_t)vceqq_s16(*v99, (int16x8_t)vmovl_u8(*v101));
        a9.i16[0] = vminvq_u16((uint16x8_t)a9);
        if (a9.i32[0])
        {
          v94 = v100 & 7;
          do
          {
            a9 = (int64x2_t)vceqq_s16(*(int16x8_t *)((char *)v99 + 2 * v94), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v101 + v94)));
            a9.i16[0] = vminvq_u16((uint16x8_t)a9);
            v81 = a9.i32[0] != 0;
            v94 += 8;
            if (a9.i32[0])
              v95 = v94 >= v100;
            else
              v95 = 1;
          }
          while (!v95);
          goto LABEL_155;
        }
      }
    }
    else if (*v87 == *(unsigned __int16 *)v88)
    {
      v89 = v86 - 1;
      if ((_DWORD)v86 != 1)
      {
        v90 = (int16x8_t *)(v87 + 1);
        v91 = (int16x8_t *)(v88 + 2);
        if ((_DWORD)v86 != 2)
        {
          switch(31 - __clz(v86 - 2))
          {
            case 0u:
              v107 = v90->i32[0];
              v108 = v91->i32[0];
              goto LABEL_232;
            case 1u:
              if (v90->i32[0] != v91->i32[0])
                goto LABEL_207;
              v126 = *(_DWORD *)&v87[v86 - 2];
              v154 = &v88[2 * v86];
              goto LABEL_356;
            case 2u:
              if (v90->i64[0] != v91->i64[0])
                goto LABEL_207;
              v152 = *(_QWORD *)&v87[v86 - 4];
              v153 = &v88[2 * v86];
              goto LABEL_351;
            case 3u:
              a9 = (int64x2_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v87[v86 - 8], *(int16x8_t *)&v88[2 * v86 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v87 + 1), *(int16x8_t *)(v88 + 2)));
              a9.i16[0] = vminvq_u16((uint16x8_t)a9);
              goto LABEL_353;
            default:
              a9 = (int64x2_t)vceqq_s16(*v90, *v91);
              a9.i16[0] = vminvq_u16((uint16x8_t)a9);
              if (!a9.i32[0])
                goto LABEL_207;
              if (v89 < 8)
                goto LABEL_208;
              v103 = v89 & 7;
              do
              {
                a9 = (int64x2_t)vceqq_s16(*(int16x8_t *)((char *)v90 + 2 * v103), *(int16x8_t *)((char *)v91 + 2 * v103));
                a9.i16[0] = vminvq_u16((uint16x8_t)a9);
                v81 = a9.i32[0] != 0;
                v103 += 8;
                if (a9.i32[0])
                  v104 = v103 >= v89;
                else
                  v104 = 1;
              }
              while (!v104);
              break;
          }
          goto LABEL_155;
        }
LABEL_231:
        v107 = v90->u16[0];
        v108 = v91->u16[0];
LABEL_232:
        v80 = v107 == v108;
        goto LABEL_152;
      }
LABEL_208:
      v81 = 1;
      goto LABEL_155;
    }
    goto LABEL_207;
  }
  if ((v85 & 4) == 0)
  {
    if (*(_WORD *)v88 == *(unsigned __int8 *)v87)
    {
      v96 = (uint8x8_t *)((char *)v87 + 1);
      v97 = v86 - 1;
      v98 = (int16x8_t *)(v88 + 2);
      if (v97 < 8)
      {
        if (v97 >= 4)
        {
          v129 = (v96->u32[0] | ((unint64_t)v96->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          v36 = ((v129 | (v129 << 8)) & 0xFF00FF00FF00FFLL) == v98->i64[0];
          v130 = (*(unsigned int *)((char *)v96->u32 + (v97 & 3)) | ((unint64_t)*(unsigned int *)((char *)v96->u32 + (v97 & 3)) << 16)) & 0xFFFF0000FFFFLL;
          v131 = (v130 | (v130 << 8)) & 0xFF00FF00FF00FFLL;
          v132 = *(uint64_t *)((char *)v98->i64 + 2 * (v97 & 3));
          v80 = v36 && v131 == v132;
          goto LABEL_152;
        }
        if (v97 >= 2)
        {
          v133 = (v96->u16[0] | (v96->u16[0] << 8)) & 0xFF00FF;
          v134 = v98->i32[0];
          v135 = (*(unsigned __int16 *)((char *)v96->u16 + (v97 & 1)) | (*(unsigned __int16 *)((char *)v96->u16
                                                                                             + (v97 & 1)) << 8)) & 0xFF00FF;
          v136 = *(__int32 *)((char *)v98->i32 + 2 * (v97 & 1));
          v80 = v133 == v134 && v135 == v136;
          goto LABEL_152;
        }
        if (v97 == 1)
        {
          v108 = v96->u8[0];
          v107 = v98->u16[0];
          goto LABEL_232;
        }
        goto LABEL_208;
      }
      a9 = (int64x2_t)vceqq_s16(*v98, (int16x8_t)vmovl_u8(*v96));
      a9.i16[0] = vminvq_u16((uint16x8_t)a9);
      if (a9.i32[0])
      {
        v92 = v97 & 7;
        do
        {
          a9 = (int64x2_t)vceqq_s16(*(int16x8_t *)((char *)v98 + 2 * v92), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v96 + v92)));
          a9.i16[0] = vminvq_u16((uint16x8_t)a9);
          v81 = a9.i32[0] != 0;
          v92 += 8;
          if (a9.i32[0])
            v93 = v92 >= v97;
          else
            v93 = 1;
        }
        while (!v93);
        goto LABEL_155;
      }
    }
LABEL_207:
    v81 = 0;
    goto LABEL_155;
  }
  if (*(unsigned __int8 *)v87 != *v88)
    goto LABEL_207;
  v102 = v86 - 1;
  if ((_DWORD)v86 == 1)
    goto LABEL_208;
  v90 = (int16x8_t *)((char *)v87 + 1);
  v91 = (int16x8_t *)(v88 + 1);
  if ((_DWORD)v86 == 2)
  {
    v107 = v90->u8[0];
    v108 = v91->u8[0];
    goto LABEL_232;
  }
  switch(31 - __clz(v86 - 2))
  {
    case 0u:
      goto LABEL_231;
    case 1u:
      if (v90->u16[0] != v91->u16[0])
        goto LABEL_207;
      v126 = *(unsigned __int16 *)((char *)v87 + v86 - 2);
      v127 = *(unsigned __int16 *)&v88[v86 - 2];
      goto LABEL_357;
    case 2u:
      if (v90->i32[0] != v91->i32[0])
        goto LABEL_207;
      v126 = *(_DWORD *)((char *)v87 + v86 - 4);
      v154 = &v88[v86];
LABEL_356:
      v127 = *((_DWORD *)v154 - 1);
LABEL_357:
      v80 = v126 == v127;
      goto LABEL_152;
    case 3u:
      if (v90->i64[0] != v91->i64[0])
        goto LABEL_207;
      v152 = *(_QWORD *)((char *)v87 + v86 - 8);
      v153 = &v88[v86];
LABEL_351:
      v80 = v152 == *((_QWORD *)v153 - 1);
      goto LABEL_152;
    case 4u:
      a9 = (int64x2_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)v87 + v86 - 16), *(int8x16_t *)&v88[v86 - 16]), vceqq_s8(*(int8x16_t *)((char *)v87 + 1), *(int8x16_t *)(v88 + 1)));
      a9.i8[0] = vminvq_u8((uint8x16_t)a9);
LABEL_353:
      v81 = a9.i32[0] != 0;
      break;
    default:
      a9 = (int64x2_t)vceqq_s8(*(int8x16_t *)v90, *(int8x16_t *)v91);
      a9.i8[0] = vminvq_u8((uint8x16_t)a9);
      if (!a9.i32[0])
        goto LABEL_207;
      if (v102 < 0x10)
        goto LABEL_208;
      v105 = v102 & 0xF;
      do
      {
        a9 = (int64x2_t)vceqq_s8(*(int8x16_t *)((char *)v90 + v105), *(int8x16_t *)((char *)v91 + v105));
        a9.i8[0] = vminvq_u8((uint8x16_t)a9);
        v81 = a9.i32[0] != 0;
        v105 += 16;
        if (a9.i32[0])
          v106 = v105 >= v102;
        else
          v106 = 1;
      }
      while (!v106);
      break;
  }
LABEL_155:
  if (*(_DWORD *)(v11 + 80))
  {
    v151 = *(_DWORD *)(v11 + 80);
    if ((v151 & 0x27) != 0 && (v151 & 0x20) == 0)
    {
      v209 = v10;
      v197 = v81;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, IndexQuicklyForTypedArray, (uint64_t)a4, a5, a6, a7, a8);
      v81 = v197;
      v10 = v209;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if (!v81)
    goto LABEL_157;
  v125 = v19 | 0xFFFE000000000000;
  if ((v19 & 0x80000000) != 0)
    v125 = COERCE__INT64((double)v19) + 0x2000000000000;
  if (HIDWORD(v19))
    return COERCE__INT64((double)v19) + 0x2000000000000;
  else
    return v125;
}

unint64_t JSC::arrayProtoFuncLastIndexOf(JSC *this, JSC::JSGlobalObject *a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  JSC::JSObject *v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  double v35;
  int v36;
  BOOL v37;
  int v38;
  WTF *v39;
  const WTF::StringImpl *v40;
  _BOOL4 v41;
  unint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t IndexQuickly;
  uint64_t v54;
  const WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int8x16_t v61;
  unint64_t i;
  int v63;
  BOOL v64;
  int v65;
  uint64_t IfProperty;
  WTF *v67;
  const WTF::StringImpl *v68;
  _BOOL4 v69;
  double v70;
  double v71;
  double v72;
  unint64_t v73;
  double v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  JSC::JSGlobalObject *v78;
  unint64_t v79;
  JSC::JSObject *v80;

  v11 = *((_QWORD *)this + 7);
  v12 = *((_QWORD *)a2 + 5);
  if ((v12 & 0xFFFE000000000002) != 0)
    goto LABEL_83;
  v13 = *(unsigned __int8 *)(v12 + 5);
  if (v13 - 51 < 6)
  {
    v12 = 10;
LABEL_83:
    v80 = (JSC::JSObject *)v12;
    v45 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v80, this, (JSC::Structure *)a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_84;
  }
  if (v13 >= 0x17)
  {
    v14 = *((_QWORD *)this + 7);
    goto LABEL_5;
  }
  v45 = JSC::JSCell::toObjectSlow(*((JSC::JSCell **)a2 + 5), (JSC::SymbolObject **)this, a3, a4, a5, a6, a7, a8);
LABEL_84:
  v12 = v45;
  if (!v45)
    return 0;
  v14 = *((_QWORD *)this + 7);
  v13 = *(unsigned __int8 *)(v45 + 5);
LABEL_5:
  if (v13 != 36)
  {
    if (v13 != 35)
    {
      if (v13 == 33)
      {
        v51 = JSC::DirectArguments::length((JSC::DirectArguments *)v12, this, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      else
      {
        if (v13 != 34)
        {
          v80 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v12, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v14 + 41952) + 1768), (uint64_t)a4, a5, a6, a7, a8);
          if (*(_DWORD *)(v14 + 80)
            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, v46, a3, (uint64_t)a4, a5, a6, a7, a8))
          {
            v16 = 0;
            goto LABEL_9;
          }
          v47 = JSC::JSValue::toLength(&v80, this, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
          goto LABEL_100;
        }
        v51 = JSC::ScopedArguments::length((JSC::ScopedArguments *)v12, this, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      v16 = v51;
      goto LABEL_9;
    }
    v47 = JSC::ClonedArguments::length((JSC::ClonedArguments *)v12, this, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
LABEL_100:
    v16 = v47;
    goto LABEL_9;
  }
  if ((*(_BYTE *)(v12 + 4) & 0xE) != 0)
    v15 = *(_DWORD *)(*(_QWORD *)(v12 + 8) - 8);
  else
    v15 = 0;
  v16 = v15;
LABEL_9:
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if (!v16)
    return 0xFFFE0000FFFFFFFFLL;
  v17 = v16 - 1;
  v18 = *((int *)a2 + 8);
  if ((unint64_t)(v18 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v19 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
    v80 = v19;
    if ((unint64_t)v19 < 0xFFFE000000000000)
    {
      v43 = (unint64_t)v19 - 0x2000000000000;
      if (v43 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v80, this, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      else
        a9.i64[0] = v43;
      v20 = trunc(*(double *)a9.i64 + 0.0);
    }
    else
    {
      v20 = (double)(int)v19;
    }
    if (*(_DWORD *)(v11 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      return 0;
    }
    v21 = (double)v16;
    if (v20 < 0.0)
    {
      v20 = v20 + v21;
      if (v20 < 0.0)
        return 0xFFFE0000FFFFFFFFLL;
    }
    if (v20 < v21)
      v17 = (unint64_t)v20;
    LODWORD(v18) = *((_DWORD *)a2 + 8);
  }
  v78 = this;
  if ((_DWORD)v18 == 1)
    v22 = 10;
  else
    v22 = *((_QWORD *)a2 + 6);
  v23 = v22 >> 49;
  if (*(_BYTE *)(v12 + 5) != 36)
  {
LABEL_111:
    v80 = (JSC::JSObject *)v17;
    v52 = v17;
    IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v12, v17);
    if (!IndexQuickly)
      IndexQuickly = JSC::JSObject::getIfPropertyExists<unsigned long long>((_BYTE *)v12, v78, (const WTF::StringImpl *)&v80, v56, v57, v58, v59, v60);
    for (i = IndexQuickly; ; i = IfProperty)
    {
      if (*(_DWORD *)(v11 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v54, (uint64_t)v55, v56, v57, v58, v59, v60))
      {
        return 0;
      }
      if (i)
        break;
LABEL_128:
      if (!v52)
        return 0xFFFE0000FFFFFFFFLL;
      v80 = (JSC::JSObject *)--v52;
      IfProperty = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v12, v52);
      if (!IfProperty)
        IfProperty = JSC::JSObject::getIfPropertyExists<unsigned long long>((_BYTE *)v12, v78, (const WTF::StringImpl *)&v80, v56, v57, v58, v59, v60);
    }
    if (v22 >= 0xFFFE000000000000)
    {
      if (i >= 0xFFFE000000000000)
      {
LABEL_122:
        v64 = v22 == i;
LABEL_123:
        v65 = v64;
LABEL_126:
        if (*(_DWORD *)(v11 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v54, (uint64_t)v55, v56, v57, v58, v59, v60))
        {
          return 0;
        }
        if (v65)
        {
          if (HIDWORD(v52))
          {
            v76 = (double)v52;
          }
          else
          {
            if ((v52 & 0x80000000) == 0)
              return v52 | 0xFFFE000000000000;
            v76 = (double)v52;
          }
          return *(_QWORD *)&v76 + 0x2000000000000;
        }
        goto LABEL_128;
      }
    }
    else if (!v23)
    {
LABEL_119:
      if (!(v22 & 0xFFFE000000000002 | i & 0xFFFE000000000002))
      {
        v63 = *(unsigned __int8 *)(v22 + 5);
        if (v63 == 2)
        {
          if (*(_BYTE *)(i + 5) == 2)
          {
            v67 = *(WTF **)(v22 + 8);
            if ((v67 & 1) != 0
              || (v68 = *(const WTF::StringImpl **)(i + 8), (v68 & 1) != 0))
            {
              v69 = JSC::JSString::equalSlowCase((JSC::JSString *)v22, v78, (JSC::JSString *)i, v56, v57, v58, v59, v60, v61);
            }
            else
            {
              v69 = WTF::equal(v67, v68, v55);
            }
            goto LABEL_136;
          }
        }
        else if (v63 == 3 && *(_BYTE *)(i + 5) == 3)
        {
          v69 = JSC::JSBigInt::equals((JSC::JSBigInt *)v22, (JSC::JSBigInt *)i, v55);
LABEL_136:
          v65 = v69;
          goto LABEL_126;
        }
      }
      goto LABEL_122;
    }
    if (i >> 49)
    {
      v70 = (double)(int)v22;
      if (v22 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v70 = v22 - 0x2000000000000;
      v71 = (double)(int)i;
      if (i <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v71 = i - 0x2000000000000;
      v64 = v70 == v71;
      goto LABEL_123;
    }
    goto LABEL_119;
  }
  v24 = *(_QWORD **)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28);
  v25 = v24[288];
  if ((v25 & 1) != 0)
    v26 = (v25 >> 1) & 3;
  else
    v26 = *(unsigned __int8 *)(v25 + 4);
  if (v26 == 2)
    goto LABEL_174;
  v27 = *(unsigned __int8 *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 8);
  v28 = (v27 >> 1) & 7;
  if ((v27 & 0x10) != 0)
    v28 = ((v27 & 0xE) + 10) >> 1;
  v29 = *((_DWORD *)v24 + v28 + 213);
  v30 = v29 ? 16 * (v29 & 0xFFFFFFFE) : 0;
  if (v30 != 16 * (*(_DWORD *)v12 & 0xFFFFFFFE))
  {
    if ((v27 & 0x20) != 0 || *(_BYTE *)(v24[256] + 4) == 2)
      goto LABEL_174;
    v75 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
    if (!v75)
      v75 = *(_QWORD *)(v12 + 16);
    if (v75 != v24[84])
    {
LABEL_174:
      v32 = 0;
      goto LABEL_65;
    }
  }
  if ((*(_BYTE *)(v12 + 4) & 0xE) != 0)
    v31 = *(_DWORD *)(*(_QWORD *)(v12 + 8) - 8);
  else
    v31 = 0;
  v32 = 0;
  if (v16 == v31 && !HIDWORD(v17))
  {
    v33 = *(_BYTE *)(v12 + 4) & 0xF;
    if ((v33 - 8) < 2)
    {
      v34 = *(_QWORD *)(v12 + 8);
      *(double *)a9.i64 = (double)(int)v22;
      if (v22 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v35 = v22 - 0x2000000000000;
      else
        v35 = (double)(int)v22;
      v79 = v17;
      while (1)
      {
        a3 = *(_QWORD *)(v34 + 8 * v17);
        if (!a3)
          goto LABEL_53;
        if (v22 >= 0xFFFE000000000000)
        {
          if ((unint64_t)a3 >= 0xFFFE000000000000)
            goto LABEL_47;
        }
        else if (!v23)
        {
          goto LABEL_44;
        }
        if ((unint64_t)a3 >> 49)
        {
          *(double *)a9.i64 = (double)(int)a3;
          if ((unint64_t)a3 <= 0xFFFDFFFFFFFFFFFFLL)
            a9.i64[0] = a3 - 0x2000000000000;
          v37 = v35 == *(double *)a9.i64;
          goto LABEL_48;
        }
LABEL_44:
        if (((a3 | v22) & 0xFFFE000000000002) != 0)
          goto LABEL_47;
        v36 = *(unsigned __int8 *)(v22 + 5);
        if (v36 == 2)
        {
          if (*(_BYTE *)(a3 + 5) != 2)
            goto LABEL_47;
          v39 = *(WTF **)(v22 + 8);
          if ((v39 & 1) != 0
            || (v40 = *(const WTF::StringImpl **)(a3 + 8), (v40 & 1) != 0))
          {
            v41 = JSC::JSString::equalSlowCase((JSC::JSString *)v22, this, (JSC::JSString *)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
          }
          else
          {
            v41 = WTF::equal(v39, v40, (const WTF::StringImpl *)a3);
          }
        }
        else
        {
          if (v36 != 3 || *(_BYTE *)(a3 + 5) != 3)
          {
LABEL_47:
            v37 = v22 == a3;
LABEL_48:
            v38 = v37;
            goto LABEL_51;
          }
          v41 = JSC::JSBigInt::equals((JSC::JSBigInt *)v22, *(JSC::JSBigInt **)(v34 + 8 * v17), (JSC::JSBigInt *)a3);
        }
        v38 = v41;
LABEL_51:
        if (*(_DWORD *)(v11 + 80))
        {
          v44 = *(_DWORD *)(v11 + 80);
          if ((v44 & 0x27) != 0 && (v44 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v11 + 16))
          {
            v32 = 0;
            goto LABEL_64;
          }
        }
        if (v38)
        {
          if ((v17 & 0x80000000) != 0)
            v32 = COERCE__INT64((double)v17) + 0x2000000000000;
          else
            v32 = v17 | 0xFFFE000000000000;
LABEL_64:
          v17 = v79;
          goto LABEL_65;
        }
LABEL_53:
        if (--v17 == -1)
        {
          v32 = 0xFFFE0000FFFFFFFFLL;
          goto LABEL_64;
        }
      }
    }
    if ((v33 - 6) < 2)
    {
      if (v23)
      {
        v72 = (double)(int)v22;
        if (v22 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v72 = v22 - 0x2000000000000;
        v73 = v17;
        v32 = 0xFFFE0000FFFFFFFFLL;
        while (*(double *)(*(_QWORD *)(v12 + 8) + 8 * v73) != v72)
        {
          if (--v73 == -1)
            goto LABEL_65;
        }
        if ((v73 & 0x80000000) != 0)
          v32 = COERCE__INT64((double)v73) + 0x2000000000000;
        else
          v32 = v73 | 0xFFFE000000000000;
      }
      else
      {
        v32 = 0xFFFE0000FFFFFFFFLL;
      }
      goto LABEL_65;
    }
    if ((v33 - 4) > 1)
    {
      v32 = 0;
      goto LABEL_65;
    }
    if (v23)
    {
      v48 = v22;
      if (v22 > 0xFFFDFFFFFFFFFFFFLL)
        goto LABEL_105;
      *(_QWORD *)&v74 = v22 - 0x2000000000000;
      if (fabs(COERCE_DOUBLE(v22 - 0x2000000000000)) != INFINITY)
      {
        v77 = (int)v74;
        if ((double)(int)v77 == v74)
        {
          v48 = v77 | 0xFFFE000000000000;
LABEL_105:
          v49 = v17;
          v32 = 0xFFFE0000FFFFFFFFLL;
          while (1)
          {
            v50 = v49;
            if (v48 == *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v49))
              break;
            --v49;
            if (!v50)
              goto LABEL_65;
          }
          if ((v49 & 0x80000000) != 0)
            v32 = COERCE__INT64((double)v49) + 0x2000000000000;
          else
            v32 = v49 | 0xFFFE000000000000;
          goto LABEL_65;
        }
      }
    }
    v32 = 0xFFFE0000FFFFFFFFLL;
  }
LABEL_65:
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if (!v32)
    goto LABEL_111;
  return v32;
}

JSC::VM *JSC::arrayProtoFuncKeys(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::createArrayIteratorObject((uint64_t)this, *((_QWORD *)a2 + 5), 0, a4, a5, a6, a7, a8);
}

JSC::VM *JSC::arrayProtoFuncEntries(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::createArrayIteratorObject((uint64_t)this, *((_QWORD *)a2 + 5), 2u, a4, a5, a6, a7, a8);
}

uint64_t JSC::arrayProtoFuncToString(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, JSC::JSString *a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  int v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  WTF::AtomStringImpl *v64;
  unint64_t IndexQuickly;
  int8x16_t v66;
  JSC::VM *v67;
  int v68;
  BOOL v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  WTF::StringImpl *v77;
  BOOL v79;
  char *v80;
  unint64_t *v81;
  _WORD *v82;
  char v83;
  WTF::StringImpl *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  JSC::VM *v93;
  uint64_t v94;
  unint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  WTF::StringImpl *v100;
  BOOL v102;
  char *v103;
  unint64_t *v104;
  _WORD *v105;
  char v106;
  WTF::StringImpl *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned int v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl **v134;
  WTF::StringImpl *v135;
  int v136;
  int v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  unint64_t *v142;
  _WORD *v143;
  char v144;
  WTF::StringImpl *v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  int v155;
  int v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  int v162;
  int v163;
  int v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  unsigned int v172;
  int v173;
  int v174;
  _DWORD *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  char *v179;
  uint64_t v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  uint64_t v207;
  WTF *v208;
  uint64_t v209;
  WTF::StringImpl *v210;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  WTF *v219;
  int v221;
  uint64_t *v222;
  uint64_t v223;
  unsigned int v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  unsigned int v233;
  unsigned int v234;
  BOOL v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  _BYTE *v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  int v248;
  _BYTE *v249;
  uint64_t v250;
  uint64_t v251;
  JSC::VM *v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unsigned int v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  BOOL v262;
  unint64_t v263;
  uint64_t v264;
  int v265;
  int v266;
  _WORD *v267;
  uint64_t v268;
  unsigned int v269;
  uint64_t v270;
  unsigned int v271;
  unsigned int v272;
  unint64_t v273;
  JSC::VM *v274;
  unint64_t v275;
  uint64_t v276;
  char v277;
  int v278;
  uint64_t v279;
  WTF::StringImpl *v280;
  WTF::StringImpl *v281;
  WTF::StringImpl *v282;
  unsigned __int16 *v283;
  uint64_t v284;
  unsigned int v285;
  char *v286;
  WTF::StringImpl *v287;
  WTF::StringImpl *v288;
  WTF::StringImpl *v289;
  WTF::StringImpl *v290;
  BOOL v291;
  uint64_t v292;
  unsigned int *v293;
  uint64_t v294;
  WTF::StringImpl **v295;
  uint64_t (*v296)(WTF::StringImpl **);
  BOOL v297;
  unint64_t v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  int **v314;
  unint64_t v315;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  void *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  unsigned __int16 *v339;
  uint64_t v340;
  unsigned int v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  double v345;
  char *v346;
  BOOL v347;
  WTF::StringImpl *v348;
  unint64_t v349;
  WTF::StringImpl *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  WTF::AtomStringImpl *v357;
  WTF::StringImpl *v358;
  WTF::StringImpl *v359;
  uint64_t v360;
  WTF::StringImpl *v361;
  uint64_t v362;
  int *v363;
  int v364;
  uint64_t v365;
  int *v366;
  int v367;
  uint64_t v368;
  int *v369;
  int v370;
  BOOL v371;
  int v372;
  BOOL v373;
  unint64_t v374;
  uint64_t v375;
  int *v376;
  int v377;
  int v378;
  _BOOL4 v379;
  WTF::StringImpl **v380;
  uint64_t v381;
  unint64_t v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  int v390;
  unsigned int v391;
  uint64_t v392;
  unsigned __int8 *v393;
  int v394;
  uint64_t v395;
  int *v396;
  int v397;
  uint64_t v398;
  int *v399;
  int v400;
  int v401;
  _BOOL4 v402;
  JSC::JSString *v403;
  unint64_t v404;
  void *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  int v412;
  _BOOL4 v413;
  double v414;
  const unsigned __int8 *v415;
  unint64_t v416;
  void *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unsigned int v424;
  uint64_t v425;
  unsigned __int8 *v426;
  unsigned int v427;
  uint64_t v428;
  unsigned __int8 *v429;
  unsigned int v430;
  JSC::VM *v431;
  unint64_t v432;
  uint64_t v433;
  int v434;
  int v435;
  int v436;
  uint64_t v437;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unint64_t v439;
  WTF::StringImpl **v440;
  WTF::StringImpl *v441;
  WTF::StringImpl *v442;
  uint64_t v443;
  WTF::StringImpl *v444;
  int v445;
  int v446;
  unint64_t v447;
  uint64_t v448;
  int v449;
  unint64_t v450;
  uint64_t v451;
  int v452;
  int v453;
  unint64_t v454;
  uint64_t v455;
  int v456;
  uint64_t v457;
  uint64_t v458;
  WTF::StringImpl *v460;
  char *v461;
  unsigned int v462;
  int v463;
  int v464;
  _DWORD *v465;
  char *v466;
  uint64_t v467;
  char *v468;
  WTF::StringImpl *v469;
  WTF::StringImpl *v470;
  WTF::StringImpl *v471;
  unint64_t v472;
  void *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  WTF::StringImpl *v480;
  unint64_t v481;
  void *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  int v489;
  unint64_t v490;
  void *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  WTF::StringImpl *v498;
  unint64_t v499;
  void *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  int v507;
  unint64_t v508;
  void *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  int v516;
  unint64_t v517;
  uint64_t v518;
  int v519;
  int v520;
  unint64_t v521;
  uint64_t v522;
  int v523;
  char *v524;
  unint64_t v525;
  unint64_t v526;
  unint64_t v527;
  unint64_t v528;
  unint64_t v529;
  uint64_t v530;
  uint64_t v531;
  WTF **v532;
  WTF *v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t *v537;
  uint64_t v538;
  uint64_t v539;
  unint64_t *v540;
  int8x16_t *v541;
  int v542;
  JSC::VM *v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  unint64_t v547;
  JSC *v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  unint64_t (*v552)(unint64_t, JSC::JSGlobalObject *, JSC::CallFrame *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, int8x16_t);
  uint64_t v553;
  uint64_t v554;
  unint64_t v555;
  WTF::StringImpl *v556;
  int8x16_t v557;
  unint64_t v558;
  unint64_t v559;
  _QWORD v560[2];
  uint64_t v561;
  char v562;
  uint64_t v563;
  uint64_t v564;
  WTF::StringImpl *v565;
  WTF::StringImpl *v566[2];
  WTF *v567;
  uint64_t v568;
  _BYTE v569[512];
  char v570;
  int v571;
  char v572;
  int v573;
  __int16 v574;
  unint64_t v575;
  uint64_t v576;

  v576 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(this + 56);
  v12 = *((_QWORD *)a2 + 5);
  if ((v12 & 0xFFFE000000000002) != 0)
    goto LABEL_63;
  v13 = *(unsigned __int8 *)(v12 + 5);
  if (v13 - 51 < 6)
  {
    v12 = 10;
LABEL_63:
    v554 = v12;
    v56 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v554, (JSC::JSGlobalObject *)this, a3, a4, (uint64_t)a5, a6, a7, a8);
    goto LABEL_64;
  }
  v554 = *((_QWORD *)a2 + 5);
  if (v13 <= 0x16)
  {
    v56 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v12, (JSC::SymbolObject **)this, (uint64_t)a3, (JSC::Symbol *)a4, (uint64_t)a5, a6, a7, a8);
LABEL_64:
    v14 = v56;
    goto LABEL_5;
  }
  v14 = v12;
LABEL_5:
  if (*(_DWORD *)(v11 + 80))
  {
    v57 = *(_DWORD *)(v11 + 80);
    if ((v57 & 0x27) != 0 && (v57 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x28);
  v16 = *(_QWORD *)(v15 + 2288);
  if ((v16 & 1) != 0)
    v17 = (v16 >> 1) & 3;
  else
    v17 = *(unsigned __int8 *)(v16 + 4);
  if (v17 != 1
    || ((v18 = *(unsigned __int8 *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 8), (v18 & 0x10) != 0)
      ? (v19 = ((v18 & 0xE) + 10) >> 1)
      : (v19 = (v18 >> 1) & 7),
        (v20 = *(_DWORD *)(v15 + 4 * v19 + 852)) != 0 ? (v21 = 16 * (v20 & 0xFFFFFFFE)) : (v21 = 0),
        v21 != 16 * (*(_DWORD *)v14 & 0xFFFFFFFE)))
  {
    v59 = JSC::JSObject::get((unsigned int *)v14, this, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1728), a4, (uint64_t)a5, a6, a7, a8);
    if (*(_DWORD *)(v11 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v58, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8))
    {
      return 0;
    }
    if ((v59 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v551) = 0;
    }
    else
    {
      if (*(_BYTE *)(v59 + 5) == 26)
      {
        v60 = *(_QWORD *)(v59 + 24);
        if ((v60 & 1) != 0)
          v60 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFFFELL) + 48);
        if (*(_BYTE *)(v60 + 5) == 8)
        {
          v61 = 1;
          LOBYTE(v551) = 1;
          v552 = *(unint64_t (**)(unint64_t, JSC::JSGlobalObject *, JSC::CallFrame *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, int8x16_t))(v60 + 40);
          LOBYTE(v553) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)v59 & 0xFFFFFFFE)
                                                                                    + 0x4C));
        }
        else
        {
          v61 = 2;
          LOBYTE(v551) = 2;
          v62 = *(_QWORD *)(v59 + 16);
          v552 = (unint64_t (*)(unint64_t, JSC::JSGlobalObject *, JSC::CallFrame *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, int8x16_t))v60;
          v553 = v62;
        }
LABEL_75:
        if (v61 != 1 || *(_BYTE *)(v14 + 5) != 36 || v552 != JSC::arrayProtoFuncJoin)
          return JSC::call((uint64_t *)this, v59, (unsigned __int8 *)&v551, v14, *(_QWORD *)(v11 + 41960), a6, a7, a8);
        goto LABEL_16;
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v59 & 0xFFFFFFFE)
                                                                               + 0x4C)
                                                             + 0x38))(&v551, v59);
      v61 = v551;
      if ((_BYTE)v551)
        goto LABEL_75;
    }
    v555 = v14;
    v236 = *(_QWORD *)(this + 56);
    if (v14 == 10)
      return *(_QWORD *)(v236 + 42088);
    if (v14 == 2)
      return *(_QWORD *)(v236 + 42080);
    if ((v14 & 0xFFFE000000000002) != 0)
    {
      v335 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v555, (JSC::JSGlobalObject *)this, a3, a4, (uint64_t)a5, a6, a7, a8);
    }
    else
    {
      if (*(unsigned __int8 *)(v14 + 5) > 0x16u)
        goto LABEL_290;
      v335 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v14, (JSC::SymbolObject **)this, (uint64_t)a3, (JSC::Symbol *)a4, (uint64_t)a5, a6, a7, a8);
    }
    v14 = v335;
LABEL_290:
    if (!*(_DWORD *)(v236 + 80)
      || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v236, v58, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8))
    {
      v237 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x40);
      if (v237)
      {
        if (*(_BYTE *)(v237 + 5) != 1)
        {
          v238 = *(_QWORD *)(v237 + 64);
          if (v238)
          {
            v27 = *(_QWORD *)(v238 + 16);
            if (v27 >= 2)
              return v27;
          }
        }
      }
      v11 = *(_QWORD *)(this + 56);
      JSC::inferBuiltinTag((JSC *)this, v14, a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)&v548);
      if (!*(_DWORD *)(v11 + 80)
        || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8))
      {
        v557.i64[1] = 0xFFFFFFFF00000000;
        LOBYTE(v561) = 0;
        v562 = 0;
        v563 = 0;
        v564 = 0;
        v559 = 0;
        memset(v560, 0, 13);
        v558 = v14;
        v543 = (JSC::VM *)(v11 + 41952);
        v239 = *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2776);
        v240 = (_BYTE *)(v14 + 6);
        v241 = v239 >> 4;
        v242 = v14;
        if ((*(_BYTE *)(v14 + 6) & 8) == 0)
        {
          v9 = *(_QWORD *)(this + 56);
          v243 = v14;
          while (1)
          {
            v244 = *(_DWORD *)v243 & 0xFFFFFFFE;
            v245 = 16 * v244;
            if ((_DWORD)v241)
            {
              if ((v241 & ~*(_DWORD *)(16 * v244 + 0x20)) == 0)
              {
                JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v245, (JSC::VM *)v9, (uint64_t)a3, (const JSC::PropertyTable *)a4, (uint64_t)a5, a6, a7, a8);
                if (v246)
                {
                  v566[0] = (WTF::StringImpl *)v239;
                  v247 = JSC::PropertyTable::get(v246, (uint64_t *)v566);
                  a6 = v247;
                  if ((_DWORD)v247 != -1)
                  {
                    a5 = (JSC::JSString *)HIDWORD(v247);
                    if ((int)v247 <= 63)
                    {
                      v259 = v243 + 16;
                      v260 = v247 << 32;
                    }
                    else
                    {
                      v259 = *(_QWORD *)(v243 + 8) - 8;
                      v260 = 0x3F00000000 - (v247 << 32);
                    }
                    a4 = *(_QWORD *)(v259 + (v260 >> 29));
                    if ((a4 & 0xFFFE000000000002) == 0)
                    {
                      v261 = *(unsigned __int8 *)(a4 + 5);
                      if (v261 == 5)
                      {
                        v293 = (unsigned int *)v243;
                        v294 = v9;
                        goto LABEL_424;
                      }
                      if (v261 == 6)
                      {
                        v331 = *(_DWORD *)(v245 + 16) & 3;
                        v332 = *(_QWORD *)(a4 + 16);
                        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                                 + 0x4C)))
                        {
                          v334 = *(_QWORD *)(a4 + 24);
                          v333 = *(_QWORD *)(a4 + 32);
                          v556 = *(WTF::StringImpl **)(a4 + 8);
                          v557.i64[0] = v332;
                          v557.i32[2] = HIDWORD(v247);
                          v559 = v243;
                          goto LABEL_451;
                        }
                        v556 = *(WTF::StringImpl **)(a4 + 8);
                        v557.i64[0] = v332;
                        v557.i32[2] = HIDWORD(v247);
                        v559 = v243;
                        goto LABEL_488;
                      }
                    }
                    v556 = (WTF::StringImpl *)a4;
                    v559 = v243;
LABEL_344:
                    v557.i64[1] = __PAIR64__(a6, a5);
                    LOWORD(v560[1]) = 257;
                    goto LABEL_345;
                  }
                }
              }
            }
            if ((*v240 & 0x20) != 0
              && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v243, (JSC::VM *)v9, v239, (uint64_t)&v556) & 1) != 0)
            {
              goto LABEL_345;
            }
            v242 = *(_QWORD *)(v245 + 48);
            if (!v242)
              v242 = *(_QWORD *)(v243 + 16);
            if ((v242 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v242 + 5) < 0x17u)
              break;
            v240 = (_BYTE *)(v242 + 6);
            v243 = v242;
            if ((*(_BYTE *)(v242 + 6) & 8) != 0)
              goto LABEL_308;
          }
          if (!v239)
            goto LABEL_354;
          v266 = *(_DWORD *)(v239 + 16);
          if ((v266 & 0x20) != 0)
            goto LABEL_354;
          v267 = *(_WORD **)(v239 + 8);
          v268 = *(unsigned int *)(v239 + 4);
          if ((v266 & 4) == 0)
          {
            if ((_DWORD)v268)
            {
              v269 = (unsigned __int16)*v267 - 48;
              if (v269 <= 9 && (*v267 != 48 || v268 <= 1))
              {
                v283 = v267 + 1;
                v284 = v268 - 1;
                while (v284)
                {
                  if (v269 > 0x19999999)
                    goto LABEL_368;
                  v285 = *v283 - 48;
                  if (v285 > 9)
                    goto LABEL_368;
                  v270 = 0;
                  LOBYTE(v268) = 0;
                  v271 = 0;
                  v235 = __CFADD__(v285, 10 * v269);
                  v269 = v285 + 10 * v269;
                  ++v283;
                  --v284;
                  if (v235)
                    goto LABEL_370;
                }
                v271 = v269 & 0xFFFFFF00;
                v270 = 0x100000000;
                if (v269 == -1)
                {
                  v270 = 0;
                  LOBYTE(v268) = 0;
                }
                else
                {
                  LOBYTE(v268) = v269;
                }
                if (v269 == -1)
                  v271 = 0;
                goto LABEL_370;
              }
LABEL_368:
              v270 = 0;
              LOBYTE(v268) = 0;
            }
            else
            {
              v270 = 0;
            }
            v271 = 0;
LABEL_370:
            v272 = v268;
LABEL_371:
            if ((v270 & 0x100000000) == 0)
              goto LABEL_354;
            v273 = v271 | v272;
            v274 = *(JSC::VM **)(this + 56);
            v275 = v14;
            while (1)
            {
              v276 = 16 * (*(_DWORD *)v275 & 0xFFFFFFFE);
              v277 = (*(uint64_t (**)(unint64_t, uint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v276 + 0x4C) + 0x70))(v275, this, v273, &v556);
              if (*((_DWORD *)v274 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v274, (uint64_t)v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8))
              {
                goto LABEL_354;
              }
              if ((v277 & 1) != 0)
                goto LABEL_345;
              if (BYTE2(v560[1]) == 3)
              {
                if (BYTE4(v560[1]))
                  goto LABEL_354;
                v278 = *(unsigned __int8 *)(v275 + 5);
                if (v278 == 61)
                  goto LABEL_378;
              }
              else
              {
                v278 = *(unsigned __int8 *)(v275 + 5);
                if (v278 == 61)
                {
                  if (BYTE2(v560[1]) == 1)
                    goto LABEL_354;
                  goto LABEL_378;
                }
              }
              if ((v278 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v275, (uint64_t)v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8) <= v273)
              {
                goto LABEL_354;
              }
LABEL_378:
              if ((*(_WORD *)(v276 + 12) & 0x800) == 0 || BYTE2(v560[1]) == 3)
              {
                v279 = *(_QWORD *)(16 * (*(_DWORD *)v275 & 0xFFFFFFFE) + 0x30);
                if (!v279)
                  v279 = *(_QWORD *)(v275 + 16);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v275 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v279 = (*(uint64_t (**)(unint64_t, uint64_t))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v275 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0xB0))(v275, this);
                }
                else
                {
                  v279 = *(_QWORD *)(16 * (*(_DWORD *)v275 & 0xFFFFFFFE) + 0x30);
                  if (!v279)
                    v279 = *(_QWORD *)(v275 + 16);
                }
                if (*((_DWORD *)v274 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v274, (uint64_t)v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8))
                {
                  goto LABEL_354;
                }
              }
              if ((v279 & 0xFFFE000000000002) == 0)
              {
                v275 = v279;
                if (*(unsigned __int8 *)(v279 + 5) > 0x16u)
                  continue;
              }
              goto LABEL_354;
            }
          }
          if ((_DWORD)v268)
          {
            v424 = *(unsigned __int8 *)v267 - 48;
            if (v424 <= 9 && (v268 < 2 || *(_BYTE *)v267 != 48))
            {
              v425 = v268 - 1;
              v426 = (unsigned __int8 *)v267 + 1;
              while (v425)
              {
                if (v424 > 0x19999999)
                  goto LABEL_641;
                v427 = *v426 - 48;
                if (v427 > 9)
                  goto LABEL_641;
                v272 = 0;
                LOBYTE(v268) = 0;
                v270 = 0;
                v235 = __CFADD__(v427, 10 * v424);
                v424 = v427 + 10 * v424;
                --v425;
                ++v426;
                if (v235)
                  goto LABEL_643;
              }
              if (v424 == -1)
                v272 = 0;
              else
                v272 = v424 & 0xFFFFFF00;
              if (v424 == -1)
                LOBYTE(v268) = 0;
              else
                LOBYTE(v268) = v424;
              if (v424 == -1)
                v270 = 0;
              else
                v270 = 0x100000000;
              goto LABEL_643;
            }
LABEL_641:
            v272 = 0;
            LOBYTE(v268) = 0;
          }
          else
          {
            v272 = 0;
          }
          v270 = 0;
LABEL_643:
          v271 = v268;
          goto LABEL_371;
        }
LABEL_308:
        if (v239)
        {
          v248 = *(_DWORD *)(v239 + 16);
          if ((v248 & 0x20) == 0)
          {
            v249 = *(_BYTE **)(v239 + 8);
            v250 = *(unsigned int *)(v239 + 4);
            if ((v248 & 4) != 0)
            {
              if ((_DWORD)v250)
              {
                v251 = *v249 - 48;
                if (v251 <= 9 && (v250 < 2 || *v249 != 48))
                {
                  v428 = v250 - 1;
                  v429 = v249 + 1;
                  while (v428)
                  {
                    if (v251 <= 0x19999999)
                    {
                      v430 = *v429 - 48;
                      if (v430 <= 9)
                      {
                        v235 = __CFADD__(v430, 10 * v251);
                        v251 = v430 + 10 * (_DWORD)v251;
                        --v428;
                        ++v429;
                        if (!v235)
                          continue;
                      }
                    }
                    goto LABEL_313;
                  }
LABEL_692:
                  if ((_DWORD)v251 != -1)
                  {
                    v431 = *(JSC::VM **)(this + 56);
                    v432 = v14;
                    while (1)
                    {
                      v433 = 16 * (*(_DWORD *)v432 & 0xFFFFFFFE);
                      v434 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v433 + 0x4C) + 0x70))(v432, this, v251, &v556);
                      v435 = v434;
                      if (*((_DWORD *)v431 + 20))
                      {
                        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v431, (uint64_t)v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
                        if (((hasExceptionsAfterHandlingTraps | v435) & 1) != 0)
                        {
                          if (hasExceptionsAfterHandlingTraps)
                            goto LABEL_354;
                          goto LABEL_345;
                        }
                      }
                      else if ((v434 & 1) != 0)
                      {
                        goto LABEL_345;
                      }
                      if (BYTE2(v560[1]) == 3)
                      {
                        if (BYTE4(v560[1]))
                          goto LABEL_354;
                        v436 = *(unsigned __int8 *)(v432 + 5);
                        if (v436 == 61)
                          goto LABEL_699;
                      }
                      else
                      {
                        v436 = *(unsigned __int8 *)(v432 + 5);
                        if (v436 == 61)
                        {
                          if (BYTE2(v560[1]) == 1)
                            goto LABEL_354;
                          goto LABEL_699;
                        }
                      }
                      if ((v436 - 39) <= 0xA
                        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v432, (uint64_t)v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8) <= v251)
                      {
                        goto LABEL_354;
                      }
LABEL_699:
                      if ((*(_WORD *)(v433 + 12) & 0x800) == 0 || BYTE2(v560[1]) == 3)
                      {
                        v437 = *(_QWORD *)(16 * (*(_DWORD *)v432 & 0xFFFFFFFE) + 0x30);
                        if (!v437)
                          v437 = *(_QWORD *)(v432 + 16);
                      }
                      else
                      {
                        if ((*(_WORD *)(16 * (*(_DWORD *)v432 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                        {
                          v437 = (*(uint64_t (**)(unint64_t, uint64_t))(16
                                                                                      * *(unsigned int *)(16 * (*(_DWORD *)v432 & 0xFFFFFFFE) + 0x4C)
                                                                                      + 0xB0))(v432, this);
                        }
                        else
                        {
                          v437 = *(_QWORD *)(16 * (*(_DWORD *)v432 & 0xFFFFFFFE) + 0x30);
                          if (!v437)
                            v437 = *(_QWORD *)(v432 + 16);
                        }
                        if (*((_DWORD *)v431 + 20)
                          && JSC::VM::hasExceptionsAfterHandlingTraps(v431, (uint64_t)v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8))
                        {
                          goto LABEL_354;
                        }
                      }
                      if ((v437 & 0xFFFE000000000002) == 0)
                      {
                        v432 = v437;
                        if (*(unsigned __int8 *)(v437 + 5) > 0x16u)
                          continue;
                      }
                      goto LABEL_354;
                    }
                  }
                }
              }
            }
            else if ((_DWORD)v250)
            {
              v251 = *(unsigned __int16 *)v249 - 48;
              if (v251 <= 9 && (*(_WORD *)v249 != 48 || v250 <= 1))
              {
                v339 = (unsigned __int16 *)(v249 + 2);
                v340 = v250 - 1;
                while (v340)
                {
                  if (v251 <= 0x19999999)
                  {
                    v341 = *v339 - 48;
                    if (v341 <= 9)
                    {
                      v235 = __CFADD__(v341, 10 * v251);
                      v251 = v341 + 10 * (_DWORD)v251;
                      ++v339;
                      --v340;
                      if (!v235)
                        continue;
                    }
                  }
                  goto LABEL_313;
                }
                goto LABEL_692;
              }
            }
          }
        }
LABEL_313:
        v252 = *(JSC::VM **)(this + 56);
        while (1)
        {
          v253 = 16 * (*(_DWORD *)v242 & 0xFFFFFFFE);
          if ((*(_BYTE *)(v242 + 6) & 8) != 0)
          {
            v542 = (*(uint64_t (**)(unint64_t, uint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v242 & 0xFFFFFFFE) + 0x4C) + 0x68))(v242, this, v239, &v556);
            if (*((_DWORD *)v252 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v252, (uint64_t)v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8))
            {
              goto LABEL_354;
            }
            if ((v542 & 1) != 0)
              goto LABEL_345;
            if (BYTE2(v560[1]) == 3)
            {
              if (BYTE4(v560[1]))
                goto LABEL_354;
              v390 = *(unsigned __int8 *)(v242 + 5);
              if (v390 == 61)
                goto LABEL_320;
LABEL_577:
              if (!v239)
                goto LABEL_320;
              if ((v390 - 50) < 0xFFFFFFF5)
                goto LABEL_320;
              v391 = *(_DWORD *)(v239 + 16);
              if ((v391 & 0x20) != 0)
                goto LABEL_320;
              v392 = *(unsigned int *)(v239 + 4);
              if (!(_DWORD)v392)
                goto LABEL_320;
              v393 = *(unsigned __int8 **)(v239 + 8);
              if ((v391 & 4) == 0)
              {
                v394 = *(unsigned __int16 *)v393;
                if ((_DWORD)v392 == 1)
                  goto LABEL_583;
                if (v394 == 45)
                {
                  v394 = *((unsigned __int16 *)v393 + 1);
                  goto LABEL_612;
                }
                if ((v394 - 48) >= 0xA && ((_DWORD)v392 != 8 || v394 != 73))
                {
LABEL_628:
                  if ((_DWORD)v392 != 3 || v394 != 78)
                    goto LABEL_320;
                }
LABEL_618:
                v9 = v9 & 0xFFFFFF0000000000 | v392 | ((unint64_t)((v391 >> 2) & 1) << 32);
                JSC::jsToNumber(v393, v9);
                WTF::numberToString(v566, v414);
                if (WTF::equal(v239, (unint64_t)v566, v415))
                  goto LABEL_354;
                goto LABEL_320;
              }
              v394 = *v393;
              if ((_DWORD)v392 == 1)
              {
LABEL_583:
                if ((v394 - 48) < 0xA)
                  goto LABEL_354;
                goto LABEL_320;
              }
              if (v394 == 45)
              {
                v394 = v393[1];
LABEL_612:
                if ((v394 - 48) < 0xA)
                {
                  if ((_DWORD)v392 == 2)
                    goto LABEL_354;
                  goto LABEL_618;
                }
                if ((_DWORD)v392 != 9)
                  goto LABEL_320;
              }
              else
              {
                if ((v394 - 48) < 0xA)
                  goto LABEL_618;
                if ((_DWORD)v392 != 8)
                  goto LABEL_628;
              }
              if (v394 != 73)
                goto LABEL_320;
              goto LABEL_618;
            }
            v390 = *(unsigned __int8 *)(v242 + 5);
            if (v390 != 61)
              goto LABEL_577;
            if (BYTE2(v560[1]) == 1)
              goto LABEL_354;
          }
          else
          {
            if ((_DWORD)v241)
            {
              if ((v241 & ~*(_DWORD *)(16 * (*(_DWORD *)v242 & 0xFFFFFFFE) + 0x20)) == 0)
              {
                JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v242 & 0xFFFFFFFE)), v252, (uint64_t)a3, (const JSC::PropertyTable *)a4, (uint64_t)a5, a6, a7, a8);
                if (v254)
                {
                  v566[0] = (WTF::StringImpl *)v239;
                  v255 = JSC::PropertyTable::get(v254, (uint64_t *)v566);
                  a6 = v255;
                  if ((_DWORD)v255 != -1)
                  {
                    a5 = (JSC::JSString *)HIDWORD(v255);
                    if ((int)v255 <= 63)
                    {
                      v336 = v242 + 16;
                      v337 = v255 << 32;
                    }
                    else
                    {
                      v336 = *(_QWORD *)(v242 + 8) - 8;
                      v337 = 0x3F00000000 - (v255 << 32);
                    }
                    a4 = *(_QWORD *)(v336 + (v337 >> 29));
                    if ((a4 & 0xFFFE000000000002) == 0)
                    {
                      v338 = *(unsigned __int8 *)(a4 + 5);
                      if (v338 != 5)
                      {
                        if (v338 != 6)
                          goto LABEL_474;
                        v331 = *(_DWORD *)(v253 + 16) & 3;
                        v344 = *(_QWORD *)(a4 + 16);
                        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                                 + 0x4C)))
                        {
                          v334 = *(_QWORD *)(a4 + 24);
                          v333 = *(_QWORD *)(a4 + 32);
                          v556 = *(WTF::StringImpl **)(a4 + 8);
                          v557.i64[0] = v344;
                          v557.i32[2] = HIDWORD(v255);
                          v559 = v242;
LABEL_451:
                          BYTE1(v560[1]) = 3;
                          if (v331 != 2)
                            LOBYTE(v560[1]) = 1;
                          BYTE3(v560[1]) = 1;
                          v563 = v334;
                          v564 = v333;
LABEL_345:
                          if (BYTE1(v560[1]) == 1)
                          {
                            v12 = (uint64_t)v556;
                          }
                          else
                          {
                            if (BYTE1(v560[1]) == 2)
                              v292 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v556, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
                            else
                              v292 = JSC::PropertySlot::customGetter((uint64_t)&v556, *(JSC::VM **)(this + 56), *(WTF::StringImpl **)(*(_QWORD *)v543 + 2776));
                            v12 = v292;
                          }
                          if (!*(_DWORD *)(v11 + 80))
                            goto LABEL_348;
                          goto LABEL_485;
                        }
                        v556 = *(WTF::StringImpl **)(a4 + 8);
                        v557.i64[0] = v344;
                        v557.i32[2] = HIDWORD(v255);
                        v559 = v242;
LABEL_488:
                        BYTE1(v560[1]) = 3;
                        if (v331 != 2)
                          LOBYTE(v560[1]) = 1;
                        goto LABEL_345;
                      }
                      v293 = (unsigned int *)v242;
                      v294 = (uint64_t)v252;
LABEL_424:
                      JSC::JSObject::fillGetterPropertySlot(v293, v294, (uint64_t)&v556, a4, (int)a5, a6);
                      goto LABEL_345;
                    }
LABEL_474:
                    v556 = (WTF::StringImpl *)a4;
                    v559 = v242;
                    goto LABEL_344;
                  }
                }
              }
            }
            if ((*(_BYTE *)(v242 + 6) & 0x20) != 0
              && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v242, v252, v239, (uint64_t)&v556) & 1) != 0)
            {
              goto LABEL_345;
            }
          }
LABEL_320:
          if ((*(_WORD *)(v253 + 12) & 0x800) == 0)
          {
            v256 = *(_DWORD *)v242;
LABEL_322:
            v257 = *(_QWORD *)(16 * (v256 & 0xFFFFFFFE) + 0x30);
            if (!v257)
              v257 = *(_QWORD *)(v242 + 16);
            goto LABEL_324;
          }
          v256 = *(_DWORD *)v242;
          if (BYTE2(v560[1]) == 3)
            goto LABEL_322;
          v381 = 16 * (v256 & 0xFFFFFFFE);
          if ((*(_WORD *)(v381 + 12) & 0x800) != 0)
          {
            v257 = (*(uint64_t (**)(unint64_t, uint64_t))(16 * *(unsigned int *)(v381 + 76) + 0xB0))(v242, this);
          }
          else
          {
            v257 = *(_QWORD *)(v381 + 48);
            if (!v257)
              v257 = *(_QWORD *)(v242 + 16);
          }
          if (*((_DWORD *)v252 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v252, (uint64_t)v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8))
          {
            goto LABEL_354;
          }
LABEL_324:
          if ((v257 & 0xFFFE000000000002) == 0)
          {
            v242 = v257;
            if (*(unsigned __int8 *)(v257 + 5) > 0x16u)
              continue;
          }
          goto LABEL_354;
        }
      }
    }
    return 0;
  }
LABEL_16:
  if ((*(_BYTE *)(v12 + 4) & 0xE) != 0)
    v14 = *(unsigned int *)(*(_QWORD *)(v12 + 8) - 8);
  else
    v14 = 0;
  v548 = (JSC *)this;
  v549 = v12;
  v22 = *(_QWORD **)(this + 56);
  if ((unint64_t)&v525 < v22[1])
  {
    v566[0] = *((WTF::StringImpl **)v548 + 7);
    v27 = JSC::throwStackOverflowError((unint64_t)v548, v566, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
  }
  else
  {
    v23 = v22[11322];
    if (!v23)
    {
      v22[11322] = v549;
LABEL_21:
      v550 = 0;
      goto LABEL_22;
    }
    if (v23 != v549)
    {
      WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::add(v22 + 11323, &v549, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)v566);
      if ((_BYTE)v567)
        goto LABEL_21;
    }
    v27 = *(_QWORD *)(*((_QWORD *)v548 + 7) + 41968);
  }
  v550 = v27;
  if (v27)
    return v27;
LABEL_22:
  v24 = *(_BYTE *)(v12 + 4);
  if ((v24 & 0xFu) - 3 > 6)
  {
    v566[0] = (WTF::StringImpl *)",";
    v566[1] = (WTF::StringImpl *)0x100000001;
    v533 = (WTF *)v569;
    v567 = (WTF *)v569;
    v568 = 16;
    v570 = 0;
    v571 = 0;
    v572 = 0;
    v573 = 0;
    v574 = 256;
    v575 = 0;
    if (!(_DWORD)v14)
    {
LABEL_250:
      v27 = JSC::JSStringJoiner::join((JSC::JSStringJoiner *)v566, (int8x16_t *)this, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
LABEL_251:
      if (HIDWORD(v568))
      {
        v208 = v567;
        v209 = 32 * HIDWORD(v568);
        do
        {
          v210 = *(WTF::StringImpl **)v208;
          *(_QWORD *)v208 = 0;
          if (v210)
          {
            if (*(_DWORD *)v210 == 2)
            {
              WTF::StringImpl::~StringImpl(v210, v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
              WTF::fastFree(v211, v212, v213, v214, v215, v216, v217, v218);
            }
            else
            {
              *(_DWORD *)v210 -= 2;
            }
          }
          v208 = (WTF *)((char *)v208 + 32);
          v209 -= 32;
        }
        while (v209);
      }
      v219 = v567;
      if (v533 != v567 && v567 != 0)
      {
        v567 = 0;
        LODWORD(v568) = 0;
        WTF::fastFree((unint64_t)v219, v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
      }
      goto LABEL_52;
    }
    v63 = 0;
    v532 = &v567;
    v540 = &v558;
    v541 = &v557;
    v537 = (uint64_t *)(this + 512);
    while (1)
    {
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly(v12, v63, 0);
      if (!IndexQuickly)
      {
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)v12, (JSC::JSGlobalObject *)this, v63);
        if (*(_DWORD *)(v11 + 80))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8))
          {
            goto LABEL_414;
          }
        }
      }
      v67 = *(JSC::VM **)(this + 56);
      v543 = v67;
      v542 = v63;
      if ((IndexQuickly & 0xFFFE000000000002) == 0)
      {
        v68 = *(unsigned __int8 *)(IndexQuickly + 5);
        if (IndexQuickly)
          v69 = v68 == 2;
        else
          v69 = 0;
        v70 = v69;
        if (!v69)
          goto LABEL_124;
        v71 = *(_QWORD *)(IndexQuickly + 8);
        if ((v71 & 1) == 0)
        {
          if (v71)
          {
            v72 = *(unsigned int *)(v71 + 16);
            v73 = *(const char **)(v71 + 8);
            v71 = *(unsigned int *)(v71 + 4);
            v74 = (v72 >> 2) & 1;
          }
          else
          {
            v73 = 0;
            v74 = 1;
          }
          v75 = v538 & 0xFFFFFF0000000000 | v71 | (v74 << 32);
          v76 = IndexQuickly;
          v538 = v75;
          goto LABEL_99;
        }
        if ((v71 & 2) == 0)
        {
          v165 = (unint64_t)*JSC::JSRopeString::resolveRope(IndexQuickly, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, v66, (uint64_t)a5, a6, a7, a8);
          if (v165)
          {
            v166 = *(unsigned int *)(v165 + 16);
            v73 = *(const char **)(v165 + 8);
            v165 = *(unsigned int *)(v165 + 4);
            v167 = (v166 >> 2) & 1;
          }
          else
          {
            v73 = 0;
            v167 = 1;
          }
          v67 = v543;
          v75 = v530 & 0xFFFFFF0000000000 | v165 | (v167 << 32);
          v76 = IndexQuickly;
          v530 = v75;
          goto LABEL_99;
        }
        v76 = *(_QWORD *)(IndexQuickly + 20) & 0xFFFFFFFFFLL;
        v117 = v535 & 0xFFFFFF0000000000;
        v118 = *(_QWORD *)(v76 + 8);
        if (v118)
        {
          v119 = *(unsigned int *)(v118 + 4);
          v120 = ((unint64_t)*(unsigned int *)(v118 + 16) >> 2) & 1;
          v535 = v117 | (v120 << 32) | v119;
          v121 = *(_QWORD *)(IndexQuickly + 24);
          v122 = v121 >> 16;
          if (v119 > (v121 >> 16))
          {
            v73 = *(const char **)(v118 + 8);
            v123 = *(_DWORD *)(IndexQuickly + 16);
            if ((int)v119 - (int)v122 > v123 || (v123 = v119 - v122, (_DWORD)v122))
            {
              v124 = (v121 >> 16);
              v75 = v123;
              v125 = v119 - v122;
              if ((_DWORD)v120)
              {
                if (v125 < v123)
                  goto LABEL_484;
                v73 += v124;
                v75 = v123 | 0x100000000;
              }
              else
              {
                if (v125 < v123)
                  goto LABEL_484;
                v73 += 2 * v124;
              }
            }
            else
            {
              v75 = v535;
            }
LABEL_99:
            if (*((_DWORD *)v67 + 20))
            {
              v297 = JSC::VM::hasExceptionsAfterHandlingTraps(v67, (uint64_t)v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
              v67 = v543;
              if (v297)
              {
                v68 = 0;
                goto LABEL_123;
              }
            }
            v77 = *(WTF::StringImpl **)(v76 + 8);
            if ((v77 & 1) != 0)
            {
              v314 = JSC::JSRopeString::resolveRope(v76, 0, (uint64_t)a3, a4, v66, (uint64_t)a5, a6, a7, a8);
              v67 = v543;
              v77 = (WTF::StringImpl *)*v314;
            }
            if (v77)
              *(_DWORD *)v77 += 2;
            if (v573 == -1)
              v572 = 1;
            ++v573;
            if (v575 == IndexQuickly)
            {
              if (!HIDWORD(v568))
              {
                __break(0xC471u);
                JUMPOUT(0x1988AC3E0);
              }
              v161 = (char *)v567 + 32 * HIDWORD(v568) - 32;
              v162 = *((unsigned __int16 *)v161 + 12);
              if (v162 != 0xFFFF)
              {
                *((_WORD *)v161 + 12) = v162 + 1;
                v163 = *((_DWORD *)v161 + 4);
                v235 = __CFADD__(v571, v163);
                v164 = v571 + v163;
                if (v235)
                  v570 = 1;
                else
                  v571 = v164;
                if (v77)
                {
                  if (*(_DWORD *)v77 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v77, v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
                    WTF::fastFree(v197, v198, v199, v200, v201, v202, v203, v204);
                    v67 = v543;
                  }
                  else
                  {
                    *(_DWORD *)v77 -= 2;
                  }
                }
                goto LABEL_122;
              }
            }
            if (__CFADD__(v571, (_DWORD)v75))
              v570 = 1;
            else
              v571 += v75;
            v79 = (v75 & 0xFF00000000) != 0 && HIBYTE(v574) != 0;
            HIBYTE(v574) = v79;
            v556 = v77;
            v557.i64[0] = (uint64_t)v73;
            v557.i64[1] = v75;
            LOWORD(v558) = 0;
            if (HIDWORD(v568) != (_DWORD)v568)
            {
              v80 = (char *)v567 + 32 * HIDWORD(v568);
              v556 = 0;
              *(_QWORD *)v80 = v77;
              v81 = v540;
              v66 = *v541;
              *(int8x16_t *)(v80 + 8) = *v541;
              v82 = v80 + 24;
              goto LABEL_117;
            }
            v178 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)v532, (WTF::AtomStringImpl *)(HIDWORD(v568) + 1), (unint64_t)&v556, a4, (uint64_t)a5, a6, a7, a8);
            if (v178)
            {
              v179 = (char *)v567 + 32 * HIDWORD(v568);
              v180 = *(_QWORD *)v178;
              *(_QWORD *)v178 = 0;
              *(_QWORD *)v179 = v180;
              v66 = *(int8x16_t *)(v178 + 8);
              *(int8x16_t *)(v179 + 8) = v66;
              v82 = v179 + 24;
              v81 = (unint64_t *)(v178 + 24);
              v67 = v543;
LABEL_117:
              v83 = 0;
              *v82 = *(_WORD *)v81;
              ++HIDWORD(v568);
            }
            else
            {
              v83 = 1;
              v67 = v543;
            }
            LOBYTE(v574) = v574 | v83;
            v84 = v556;
            v556 = 0;
            if (v84)
            {
              if (*(_DWORD *)v84 == 2)
              {
                WTF::StringImpl::~StringImpl(v84, v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
                WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
                v67 = v543;
              }
              else
              {
                *(_DWORD *)v84 -= 2;
              }
            }
            v575 = IndexQuickly;
LABEL_122:
            v547 = v76;
            v68 = 1;
LABEL_123:
            v546 = v76;
LABEL_124:
            v85 = v70 & v68;
            goto LABEL_125;
          }
        }
        else
        {
          v535 = v117 | 0x100000000;
        }
        v75 = 0x100000000;
        v73 = "";
        goto LABEL_99;
      }
      if (IndexQuickly >= 0xFFFE000000000000)
      {
        if (IndexQuickly > 0xFF)
        {
          v171 = (char *)v67 + 48368;
          v172 = 9
               * ((~((_DWORD)IndexQuickly << 15) + IndexQuickly) ^ ((~((_DWORD)IndexQuickly << 15)
                                                                                 + IndexQuickly) >> 10));
          v173 = (v172 ^ (v172 >> 6)) + ~((v172 ^ (v172 >> 6)) << 11);
          v174 = (v173 ^ BYTE2(v173));
          v175 = (_DWORD *)((char *)v67 + 24 * (v173 ^ BYTE2(v173)) + 48368);
          if (*v175 != (_DWORD)IndexQuickly
            || (v176 = &v171[24 * v174], v177 = *((_QWORD *)v176 + 1), v134 = (WTF::StringImpl **)(v176 + 8), !v177))
          {
            *v175 = IndexQuickly;
            WTF::String::number(IndexQuickly, (uint64_t *)&v556);
            v286 = &v171[24 * v174];
            v287 = v556;
            v556 = 0;
            v289 = (WTF::StringImpl *)*((_QWORD *)v286 + 1);
            v134 = (WTF::StringImpl **)(v286 + 8);
            v288 = v289;
            *v134 = v287;
            if (v289)
            {
              if (*(_DWORD *)v288 == 2)
              {
                WTF::StringImpl::~StringImpl(v288, v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
                WTF::fastFree(v315, v316, v317, v318, v319, v320, v321, v322);
              }
              else
              {
                *(_DWORD *)v288 -= 2;
              }
            }
            v290 = v556;
            v556 = 0;
            if (v290)
            {
              if (*(_DWORD *)v290 == 2)
              {
                WTF::StringImpl::~StringImpl(v290, v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
                WTF::fastFree(v323, v324, v325, v326, v327, v328, v329, v330);
              }
              else
              {
                *(_DWORD *)v290 -= 2;
              }
            }
            *(_QWORD *)&v171[24 * v174 + 16] = 0;
            goto LABEL_393;
          }
        }
        else
        {
          v134 = (WTF::StringImpl **)((char *)v67 + 16 * IndexQuickly + 44272);
          if (*v134)
            goto LABEL_192;
          WTF::String::number(IndexQuickly, (uint64_t *)&v556);
          v280 = v556;
          v556 = 0;
          v281 = *v134;
          *v134 = v280;
          if (v281)
          {
            if (*(_DWORD *)v281 == 2)
            {
              WTF::StringImpl::~StringImpl(v281, v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
              WTF::fastFree(v298, v299, v300, v301, v302, v303, v304, v305);
            }
            else
            {
              *(_DWORD *)v281 -= 2;
            }
          }
          v282 = v556;
          v556 = 0;
          if (v282)
          {
            if (*(_DWORD *)v282 == 2)
            {
              WTF::StringImpl::~StringImpl(v282, v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
              WTF::fastFree(v306, v307, v308, v309, v310, v311, v312, v313);
            }
            else
            {
              *(_DWORD *)v282 -= 2;
            }
          }
LABEL_393:
          v67 = v543;
        }
LABEL_192:
        if (v573 == -1)
          v572 = 1;
        ++v573;
        v135 = *v134;
        if (*v134)
          v136 = *((_DWORD *)v135 + 1);
        else
          v136 = 0;
        v235 = __CFADD__(v571, v136);
        v137 = v571 + v136;
        if (v235)
          v570 = 1;
        else
          v571 = v137;
        v138 = v534 & 0xFFFFFF0000000000;
        if (v135)
        {
          v139 = *((_QWORD *)v135 + 1);
          v140 = *((unsigned int *)v135 + 1) | ((unint64_t)((*((_DWORD *)v135 + 4) >> 2) & 1) << 32) | v138;
          *(_DWORD *)v135 += 2;
        }
        else
        {
          v139 = 0;
          v140 = v138 | 0x100000000;
        }
        v534 = v140;
        v556 = v135;
        v557.i64[0] = v139;
        v557.i64[1] = v140;
        LOWORD(v558) = 0;
        if (HIDWORD(v568) != (_DWORD)v568)
        {
          v141 = (char *)v567 + 32 * HIDWORD(v568);
          v556 = 0;
          *(_QWORD *)v141 = v135;
          v142 = v540;
          v66 = *v541;
          *(int8x16_t *)(v141 + 8) = *v541;
          v143 = v141 + 24;
          goto LABEL_202;
        }
        v205 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)v532, (WTF::AtomStringImpl *)(HIDWORD(v568) + 1), (unint64_t)&v556, a4, (uint64_t)a5, a6, a7, a8);
        if (v205)
        {
          v206 = (char *)v567 + 32 * HIDWORD(v568);
          v207 = *(_QWORD *)v205;
          *(_QWORD *)v205 = 0;
          *(_QWORD *)v206 = v207;
          v66 = *(int8x16_t *)(v205 + 8);
          *(int8x16_t *)(v206 + 8) = v66;
          v143 = v206 + 24;
          v142 = (unint64_t *)(v205 + 24);
          v67 = v543;
LABEL_202:
          v144 = 0;
          *v143 = *(_WORD *)v142;
          ++HIDWORD(v568);
        }
        else
        {
          v144 = 1;
          v67 = v543;
        }
        LOBYTE(v574) = v574 | v144;
        v145 = v556;
        v556 = 0;
        if (v145)
        {
          if (*(_DWORD *)v145 == 2)
          {
            WTF::StringImpl::~StringImpl(v145, v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
            WTF::fastFree(v181, v182, v183, v184, v185, v186, v187, v188);
            v67 = v543;
          }
          else
          {
            *(_DWORD *)v145 -= 2;
          }
        }
        v575 = 0;
        v85 = 1;
        goto LABEL_125;
      }
      *(_QWORD *)&v345 = IndexQuickly - 0x2000000000000;
      if (IndexQuickly - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((*(_QWORD *)&v345 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v439 = (int)v345, (double)(int)v439 == v345)
          && ((*(_QWORD *)&v345 & 0x8000000000000000) == 0 || (_DWORD)v439))
        {
          if (v439 > 0xFF)
          {
            v461 = (char *)v543 + 48368;
            v462 = 9 * ((~((_DWORD)v439 << 15) + v439) ^ ((~((_DWORD)v439 << 15) + v439) >> 10));
            v463 = (v462 ^ (v462 >> 6)) + ~((v462 ^ (v462 >> 6)) << 11);
            v464 = (v463 ^ BYTE2(v463));
            v465 = (_DWORD *)((char *)v543 + 24 * (v463 ^ BYTE2(v463)) + 48368);
            if (*v465 != (_DWORD)v439
              || (v466 = &v461[24 * v464], v467 = *((_QWORD *)v466 + 1), v440 = (WTF::StringImpl **)(v466 + 8), !v467))
            {
              *v465 = v439;
              WTF::String::number(v439, (uint64_t *)&v556);
              v468 = &v461[24 * v464];
              v469 = v556;
              v556 = 0;
              v471 = (WTF::StringImpl *)*((_QWORD *)v468 + 1);
              v440 = (WTF::StringImpl **)(v468 + 8);
              v470 = v471;
              *v440 = v469;
              if (v471)
              {
                if (*(_DWORD *)v470 == 2)
                {
                  WTF::StringImpl::~StringImpl(v470, v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v490, v491, v492, v493, v494, v495, v496, v497);
                }
                else
                {
                  *(_DWORD *)v470 -= 2;
                }
              }
              v498 = v556;
              v556 = 0;
              if (v498)
              {
                if (*(_DWORD *)v498 == 2)
                {
                  WTF::StringImpl::~StringImpl(v498, v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v508, v509, v510, v511, v512, v513, v514, v515);
                }
                else
                {
                  *(_DWORD *)v498 -= 2;
                }
              }
              *(_QWORD *)&v461[24 * v464 + 16] = 0;
            }
          }
          else
          {
            v440 = (WTF::StringImpl **)((char *)v543 + 16 * v439 + 44272);
            if (!*v440)
            {
              WTF::String::number(v439, (uint64_t *)&v556);
              v441 = v556;
              v556 = 0;
              v442 = *v440;
              *v440 = v441;
              if (v442)
              {
                if (*(_DWORD *)v442 == 2)
                {
                  WTF::StringImpl::~StringImpl(v442, v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v472, v473, v474, v475, v476, v477, v478, v479);
                }
                else
                {
                  *(_DWORD *)v442 -= 2;
                }
              }
              v480 = v556;
              v556 = 0;
              if (v480)
              {
                if (*(_DWORD *)v480 == 2)
                {
                  WTF::StringImpl::~StringImpl(v480, v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v499, v500, v501, v502, v503, v504, v505, v506);
                }
                else
                {
                  *(_DWORD *)v480 -= 2;
                }
              }
            }
          }
          if (v573 == -1)
            v572 = 1;
          ++v573;
          v444 = *v440;
          if (*v440)
            v516 = *((_DWORD *)v444 + 1);
          else
            v516 = 0;
          v235 = __CFADD__(v571, v516);
          v520 = v571 + v516;
          if (v235)
            v570 = 1;
          else
            v571 = v520;
          v521 = v525 & 0xFFFFFF0000000000;
          if (v444)
          {
            v522 = *((_QWORD *)v444 + 1);
            v523 = *(_DWORD *)v444;
            v525 = *((unsigned int *)v444 + 1) | ((unint64_t)((*((_DWORD *)v444 + 4) >> 2) & 1) << 32) | v521;
            *(_DWORD *)v444 = v523 + 2;
          }
          else
          {
            v522 = 0;
            v525 = v521 | 0x100000000;
          }
          v556 = v444;
          v557.i64[0] = v522;
          v450 = v525;
        }
        else
        {
          v457 = JSC::NumericStrings::lookup((JSC::VM *)((char *)v543 + 44272), COERCE_DOUBLE(IndexQuickly - 0x2000000000000));
          v458 = v457;
          if (*(double *)v457 != v345 || *(_QWORD *)(v457 + 8) == 0)
          {
            *(double *)v457 = v345;
            WTF::String::number(COERCE_DOUBLE(IndexQuickly - 0x2000000000000), (int **)&v556);
            v460 = *(WTF::StringImpl **)(v458 + 8);
            *(_QWORD *)(v458 + 8) = v556;
            if (v460)
            {
              if (*(_DWORD *)v460 == 2)
              {
                WTF::StringImpl::~StringImpl(v460, v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
                WTF::fastFree(v481, v482, v483, v484, v485, v486, v487, v488);
              }
              else
              {
                *(_DWORD *)v460 -= 2;
              }
            }
            *(_QWORD *)(v458 + 16) = 0;
          }
          if (v573 == -1)
            v572 = 1;
          ++v573;
          v444 = *(WTF::StringImpl **)(v458 + 8);
          if (v444)
            v489 = *((_DWORD *)v444 + 1);
          else
            v489 = 0;
          v235 = __CFADD__(v571, v489);
          v507 = v571 + v489;
          if (v235)
            v570 = 1;
          else
            v571 = v507;
          v517 = v526 & 0xFFFFFF0000000000;
          if (v444)
          {
            v518 = *((_QWORD *)v444 + 1);
            v519 = *(_DWORD *)v444;
            v526 = *((unsigned int *)v444 + 1) | ((unint64_t)((*((_DWORD *)v444 + 4) >> 2) & 1) << 32) | v517;
            *(_DWORD *)v444 = v519 + 2;
          }
          else
          {
            v518 = 0;
            v526 = v517 | 0x100000000;
          }
          v556 = v444;
          v557.i64[0] = v518;
          v450 = v526;
        }
        goto LABEL_819;
      }
      if (IndexQuickly == 7)
        break;
      if (IndexQuickly == 6)
      {
        if (v573 == -1)
          v572 = 1;
        v451 = *((_QWORD *)v543 + 5244);
        ++v573;
        v444 = *(WTF::StringImpl **)(v451 + 248);
        if (v444)
          v452 = *((_DWORD *)v444 + 1);
        else
          v452 = 0;
        v235 = __CFADD__(v571, v452);
        v453 = v571 + v452;
        if (v235)
          v570 = 1;
        else
          v571 = v453;
        v454 = v528 & 0xFFFFFF0000000000;
        if (v444)
        {
          v455 = *((_QWORD *)v444 + 1);
          v456 = *(_DWORD *)v444;
          v528 = *((unsigned int *)v444 + 1) | ((unint64_t)((*((_DWORD *)v444 + 4) >> 2) & 1) << 32) | v454;
          *(_DWORD *)v444 = v456 + 2;
        }
        else
        {
          v455 = 0;
          v528 = v454 | 0x100000000;
        }
        v556 = v444;
        v557.i64[0] = v455;
        v450 = v528;
LABEL_819:
        v557.i64[1] = v450;
        LOWORD(v558) = 0;
        if (HIDWORD(v568) == (_DWORD)v568)
          goto LABEL_821;
        v524 = (char *)v567 + 32 * HIDWORD(v568);
        v556 = 0;
        *(_QWORD *)v524 = v444;
        v66 = v557;
        *(int8x16_t *)(v524 + 8) = v557;
        *((_WORD *)v524 + 12) = v558;
        goto LABEL_513;
      }
      if (v573 == -1)
        v572 = 1;
      ++v573;
      v556 = 0;
      v557.i64[0] = 0;
      v529 = v529 & 0xFFFFFF0000000000 | 0x100000000;
      v557.i64[1] = v529;
      LOWORD(v558) = 0;
      if (HIDWORD(v568) == (_DWORD)v568)
      {
LABEL_821:
        v347 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)1,JSC::JSStringJoiner::Entry>((uint64_t)v532, (unint64_t)&v556, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
        goto LABEL_514;
      }
      v346 = (char *)v567 + 32 * HIDWORD(v568);
      *(_QWORD *)v346 = 0;
      v66 = v557;
      *(int8x16_t *)(v346 + 8) = v557;
      *((_WORD *)v346 + 12) = v558;
LABEL_513:
      ++HIDWORD(v568);
      v347 = 1;
LABEL_514:
      LOBYTE(v574) = v574 | !v347;
      v348 = v556;
      v556 = 0;
      if (v348)
      {
        if (*(_DWORD *)v348 == 2)
        {
          WTF::StringImpl::~StringImpl(v348, v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
          WTF::fastFree(v382, v383, v384, v385, v386, v387, v388, v389);
        }
        else
        {
          *(_DWORD *)v348 -= 2;
        }
      }
      v575 = 0;
      v85 = 1;
      v67 = v543;
LABEL_125:
      if (*((_DWORD *)v67 + 20))
      {
        if (((v85 | JSC::VM::hasExceptionsAfterHandlingTraps(v67, (uint64_t)v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8)) & 1) != 0)
        {
LABEL_412:
          v92 = v542;
          goto LABEL_169;
        }
      }
      else if ((v85 & 1) != 0)
      {
        goto LABEL_412;
      }
      v86 = *(_QWORD *)(16 * (*(_DWORD *)IndexQuickly & 0xFFFFFFFE) + 0x40);
      if (v86)
      {
        if (*(_BYTE *)(v86 + 5) != 1)
        {
          v87 = *(_QWORD *)(v86 + 64);
          if (v87)
          {
            if ((*(_QWORD *)(v87 + 88) & 0xFFFFFFFFFFFFFFF7) == 2)
            {
              v88 = *(_QWORD *)(v87 + 40);
              if (v88 == 1)
                v89 = 0;
              else
                v89 = v88;
              v90 = *v537;
              if ((*v537 & 1) != 0)
              {
                v295 = (WTF::StringImpl **)(this - 16);
                if ((this & 8) == 0)
                  v295 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
                v296 = *(uint64_t (**)(WTF::StringImpl **))(v90 & 0xFFFFFFFFFFFFFFFCLL);
                v556 = *v295;
                v557.i64[0] = this;
                v557.i64[1] = (uint64_t)v537;
                v90 = v296(&v556);
              }
              if (v89 == v90)
              {
                v342 = *(_QWORD *)(v86 + 64);
                if (v342)
                {
                  v343 = *(_QWORD *)(v342 + 16);
                  if (v343 >= 2)
                  {
                    IndexQuickly = v343;
                    goto LABEL_138;
                  }
                }
              }
            }
          }
        }
      }
      v91 = *(unsigned __int8 *)(IndexQuickly + 5);
      if (v91 >= 0x17)
      {
        IndexQuickly = JSC::JSObject::toString((JSC::JSObject *)IndexQuickly, (JSC::JSGlobalObject *)this, a3, a4, (uint64_t)a5, a6, a7, a8);
LABEL_138:
        v92 = v542;
        goto LABEL_139;
      }
      v92 = v542;
      if (v91 != 2)
        IndexQuickly = JSC::JSCell::toStringSlowCase((JSC::JSCell *)IndexQuickly, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
LABEL_139:
      v93 = v543;
      if (!*((_DWORD *)v543 + 20)
        || (v291 = JSC::VM::hasExceptionsAfterHandlingTraps(v543, (uint64_t)v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8), v93 = v543, !v291))
      {
        v94 = *(_QWORD *)(IndexQuickly + 8);
        if ((v94 & 1) == 0)
        {
          if (v94)
          {
            v95 = *(unsigned int *)(v94 + 16);
            v96 = *(const char **)(v94 + 8);
            v94 = *(unsigned int *)(v94 + 4);
            v97 = (v95 >> 2) & 1;
          }
          else
          {
            v96 = 0;
            v97 = 1;
          }
          v98 = v539 & 0xFFFFFF0000000000 | v94 | (v97 << 32);
          v99 = IndexQuickly;
          v539 = v98;
          goto LABEL_144;
        }
        if ((v94 & 2) == 0)
        {
          v158 = (unint64_t)*JSC::JSRopeString::resolveRope(IndexQuickly, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, v66, (uint64_t)a5, a6, a7, a8);
          if (v158)
          {
            v159 = *(unsigned int *)(v158 + 16);
            v96 = *(const char **)(v158 + 8);
            v158 = *(unsigned int *)(v158 + 4);
            v160 = (v159 >> 2) & 1;
          }
          else
          {
            v96 = 0;
            v160 = 1;
          }
          v93 = v543;
          v98 = v531 & 0xFFFFFF0000000000 | v158 | (v160 << 32);
          v99 = IndexQuickly;
          v531 = v98;
          goto LABEL_144;
        }
        v99 = *(_QWORD *)(IndexQuickly + 20) & 0xFFFFFFFFFLL;
        v108 = v536 & 0xFFFFFF0000000000;
        v109 = *(_QWORD *)(v99 + 8);
        if (v109)
        {
          v110 = *(unsigned int *)(v109 + 4);
          v111 = ((unint64_t)*(unsigned int *)(v109 + 16) >> 2) & 1;
          v536 = v108 | (v111 << 32) | v110;
          v112 = *(_QWORD *)(IndexQuickly + 24);
          v113 = v112 >> 16;
          if (v110 > (v112 >> 16))
          {
            v96 = *(const char **)(v109 + 8);
            v114 = *(_DWORD *)(IndexQuickly + 16);
            if ((int)v110 - (int)v113 <= v114)
            {
              v114 = v110 - v113;
              if (!(_DWORD)v113)
              {
                v98 = v536;
                goto LABEL_144;
              }
            }
            v115 = (v112 >> 16);
            v98 = v114;
            v116 = v110 - v113;
            if ((_DWORD)v111)
            {
              if (v116 >= v114)
              {
                v96 += v115;
                v98 = v114 | 0x100000000;
                goto LABEL_144;
              }
LABEL_484:
              while (2)
              {
                __break(1u);
LABEL_485:
                if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8))
                {
LABEL_486:
                  v27 = 0;
LABEL_359:
                  if (!v562)
                    return v27;
                  v265 = *(_DWORD *)(v561 + 4);
                  if (v265)
                  {
                    *(_DWORD *)(v561 + 4) = v265 - 1;
                    return v27;
                  }
                  v64 = (WTF::AtomStringImpl *)"./runtime/DisallowVMEntry.h";
                  a3 = (JSC::CallFrame *)"JSC::DisallowVMEntryImpl<>::~DisallowVMEntryImpl() [VMType = JSC::VM]";
                  a4 = 61;
                  __break(0xC471u);
                  continue;
                }
                break;
              }
LABEL_348:
              if ((v12 & 0xFFFE000000000002) != 0
                || (*(_BYTE *)(v12 + 5) == 2 ? (v262 = v12 == 0) : (v262 = 1), v262))
              {
LABEL_354:
                v27 = v550;
                if (!v550)
                {
                  if (v549)
                    v349 = v549 - 1;
                  else
                    v349 = 0;
                  WTF::AtomStringImpl::addLiteral((uint64_t)v548, v349, a4, (uint64_t)a5, a6, a7, a8, &v565);
                  v350 = v565;
                  v565 = 0;
                  v566[0] = v350;
                  v12 = JSC::jsString(v11, (JSC::VM *)v566, v351, v352, v353, v354, v355, v356);
                  v358 = v566[0];
                  v566[0] = 0;
                  if (v358)
                  {
                    if (*(_DWORD *)v358 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v358, v357, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
                      WTF::fastFree(v404, v405, v406, v407, v408, v409, v410, v411);
                    }
                    else
                    {
                      *(_DWORD *)v358 -= 2;
                    }
                  }
                  v359 = v565;
                  v565 = 0;
                  if (v359)
                  {
                    if (*(_DWORD *)v359 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v359, v357, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
                      WTF::fastFree(v416, v417, v418, v419, v420, v421, v422, v423);
                    }
                    else
                    {
                      *(_DWORD *)v359 -= 2;
                    }
                  }
                  goto LABEL_527;
                }
                goto LABEL_355;
              }
LABEL_527:
              v360 = *((_QWORD *)v543 + 15);
              v27 = *((_QWORD *)v543 + 126);
              v361 = *(WTF::StringImpl **)(this + 56);
              v565 = v361;
              v362 = *(_QWORD *)(v360 + 8);
              if ((v362 & 1) != 0)
                v363 = (int *)(v360 + 16);
              else
                v363 = (int *)(v362 + 4);
              v364 = *v363;
              if (v364)
              {
                v365 = *(_QWORD *)(v12 + 8);
                if ((v365 & 1) != 0)
                  v366 = (int *)(v12 + 16);
                else
                  v366 = (int *)(v365 + 4);
                v367 = *v366;
                if (!v367)
                {
                  v566[0] = v361;
                  v375 = *(_QWORD *)(v27 + 8);
                  if ((v375 & 1) != 0)
                    v376 = (int *)(v27 + 16);
                  else
                    v376 = (int *)(v375 + 4);
                  v377 = *v376;
                  if (v377)
                  {
                    v378 = v377 | v364;
                    v379 = __OFADD__(v364, v377);
                    if (v378 < 0 || v379)
                    {
                      JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)this, (JSC::JSGlobalObject *)v566);
                      v360 = 0;
                    }
                    else
                    {
                      v360 = JSC::JSRopeString::create(v361, v360, (JSC::JSString *)v27, (JSC::JSString *)a4, (uint64_t)a5, a6, a7, a8);
                    }
                  }
                  v27 = v360;
                  goto LABEL_548;
                }
                v368 = *(_QWORD *)(v27 + 8);
                if ((v368 & 1) != 0)
                  v369 = (int *)(v27 + 16);
                else
                  v369 = (int *)(v368 + 4);
                v370 = *v369;
                if (v370)
                {
                  if (((v370 | v367) & 0x80000000) == 0)
                  {
                    v371 = __OFADD__(v367, v370);
                    v372 = v367 + v370;
                    v373 = v371;
                    if ((v364 & 0x80000000) == 0 && !v373 && !__OFADD__(v364, v372))
                    {
                      v374 = JSC::JSRopeString::create(v361, v360, (JSC::JSString *)v12, v27, a5, a6, a7, a8);
                      goto LABEL_547;
                    }
                  }
                  v380 = &v565;
LABEL_563:
                  JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)this, (JSC::JSGlobalObject *)v380);
                  v27 = 0;
LABEL_548:
                  if (*(_DWORD *)(v11 + 80)
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v360, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8))
                  {
                    goto LABEL_486;
                  }
LABEL_355:
                  v12 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
                  v263 = *(_QWORD *)(v12 + 0x40);
                  if (!v263 || *(_BYTE *)(v263 + 5) == 1)
                  {
                    JSC::Structure::allocateRareData((JSC::Structure *)v12, (JSC::VM *)v11, a3, a4, (uint64_t)a5, a6, a7, a8);
                    v263 = *(_QWORD *)(v12 + 64);
                  }
                  v264 = *(_QWORD *)(v263 + 64);
                  if (!v264 || *(_QWORD *)(v264 + 16) != 1)
                    JSC::StructureRareData::cacheSpecialPropertySlow(v263, (_QWORD *)this, (JSC::VM *)v11, v12, v27, 0, (uint64_t)&v556, a8);
                  goto LABEL_359;
                }
                v566[0] = v361;
                v412 = v367 | v364;
                v413 = __OFADD__(v364, v367);
                if ((v412 & 0x80000000) == 0 && !v413)
                {
                  v403 = (JSC::JSString *)v12;
LABEL_599:
                  v374 = JSC::JSRopeString::create(v361, v360, v403, (JSC::JSString *)a4, (uint64_t)a5, a6, a7, a8);
LABEL_547:
                  v27 = v374;
                  goto LABEL_548;
                }
              }
              else
              {
                v566[0] = v361;
                v395 = *(_QWORD *)(v12 + 8);
                if ((v395 & 1) != 0)
                  v396 = (int *)(v12 + 16);
                else
                  v396 = (int *)(v395 + 4);
                v397 = *v396;
                if (!v397)
                  goto LABEL_548;
                v398 = *(_QWORD *)(v27 + 8);
                if ((v398 & 1) != 0)
                  v399 = (int *)(v27 + 16);
                else
                  v399 = (int *)(v398 + 4);
                v400 = *v399;
                if (!v400)
                {
                  v27 = v12;
                  goto LABEL_548;
                }
                v401 = v400 | v397;
                v402 = __OFADD__(v397, v400);
                if ((v401 & 0x80000000) == 0 && !v402)
                {
                  v360 = v12;
                  v403 = (JSC::JSString *)v27;
                  goto LABEL_599;
                }
              }
              v380 = v566;
              goto LABEL_563;
            }
            if (v116 < v114)
              goto LABEL_484;
            v96 += 2 * v115;
LABEL_144:
            if (*((_DWORD *)v93 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v93, (uint64_t)v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8))
            {
LABEL_168:
              v544 = v99;
              goto LABEL_169;
            }
            v100 = *(WTF::StringImpl **)(v99 + 8);
            if ((v100 & 1) != 0)
              v100 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v99, 0, (uint64_t)a3, a4, v66, (uint64_t)a5, a6, a7, a8);
            if (v100)
              *(_DWORD *)v100 += 2;
            if (v573 == -1)
              v572 = 1;
            ++v573;
            if (v575 == IndexQuickly)
            {
              if (!HIDWORD(v568))
              {
                __break(0xC471u);
                JUMPOUT(0x1988AC3D8);
              }
              v154 = (char *)v567 + 32 * HIDWORD(v568) - 32;
              v155 = *((unsigned __int16 *)v154 + 12);
              if (v155 != 0xFFFF)
              {
                *((_WORD *)v154 + 12) = v155 + 1;
                v156 = *((_DWORD *)v154 + 4);
                v235 = __CFADD__(v571, v156);
                v157 = v571 + v156;
                if (v235)
                  v570 = 1;
                else
                  v571 = v157;
                if (v100)
                {
                  if (*(_DWORD *)v100 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v100, v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
                    WTF::fastFree(v189, v190, v191, v192, v193, v194, v195, v196);
                  }
                  else
                  {
                    *(_DWORD *)v100 -= 2;
                  }
                }
                goto LABEL_167;
              }
            }
            if (__CFADD__(v571, (_DWORD)v98))
              v570 = 1;
            else
              v571 += v98;
            v102 = (v98 & 0xFF00000000) != 0 && HIBYTE(v574) != 0;
            HIBYTE(v574) = v102;
            v556 = v100;
            v557.i64[0] = (uint64_t)v96;
            v557.i64[1] = v98;
            LOWORD(v558) = 0;
            if (HIDWORD(v568) != (_DWORD)v568)
            {
              v103 = (char *)v567 + 32 * HIDWORD(v568);
              v556 = 0;
              *(_QWORD *)v103 = v100;
              v104 = v540;
              *(int8x16_t *)(v103 + 8) = *v541;
              v105 = v103 + 24;
              goto LABEL_162;
            }
            v168 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)v532, (WTF::AtomStringImpl *)(HIDWORD(v568) + 1), (unint64_t)&v556, a4, (uint64_t)a5, a6, a7, a8);
            if (v168)
            {
              v169 = (char *)v567 + 32 * HIDWORD(v568);
              v170 = *(_QWORD *)v168;
              *(_QWORD *)v168 = 0;
              *(_QWORD *)v169 = v170;
              *(_OWORD *)(v169 + 8) = *(_OWORD *)(v168 + 8);
              v105 = v169 + 24;
              v104 = (unint64_t *)(v168 + 24);
LABEL_162:
              v106 = 0;
              *v105 = *(_WORD *)v104;
              ++HIDWORD(v568);
            }
            else
            {
              v106 = 1;
            }
            LOBYTE(v574) = v574 | v106;
            v107 = v556;
            v556 = 0;
            if (v107)
            {
              if (*(_DWORD *)v107 == 2)
              {
                WTF::StringImpl::~StringImpl(v107, v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
                WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
              }
              else
              {
                *(_DWORD *)v107 -= 2;
              }
            }
            v575 = IndexQuickly;
LABEL_167:
            v545 = v99;
            goto LABEL_168;
          }
        }
        else
        {
          v536 = v108 | 0x100000000;
        }
        v98 = 0x100000000;
        v96 = "";
        goto LABEL_144;
      }
LABEL_169:
      if (*(_DWORD *)(v11 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8))
      {
LABEL_414:
        v27 = 0;
        goto LABEL_251;
      }
      v63 = (v92 + 1);
      if ((_DWORD)v14 == (_DWORD)v63)
        goto LABEL_250;
    }
    if (v573 == -1)
      v572 = 1;
    v443 = *((_QWORD *)v543 + 5244);
    ++v573;
    v444 = *(WTF::StringImpl **)(v443 + 432);
    if (v444)
      v445 = *((_DWORD *)v444 + 1);
    else
      v445 = 0;
    v235 = __CFADD__(v571, v445);
    v446 = v571 + v445;
    if (v235)
      v570 = 1;
    else
      v571 = v446;
    v447 = v527 & 0xFFFFFF0000000000;
    if (v444)
    {
      v448 = *((_QWORD *)v444 + 1);
      v449 = *(_DWORD *)v444;
      v527 = *((unsigned int *)v444 + 1) | ((unint64_t)((*((_DWORD *)v444 + 4) >> 2) & 1) << 32) | v447;
      *(_DWORD *)v444 = v449 + 2;
    }
    else
    {
      v448 = 0;
      v527 = v447 | 0x100000000;
    }
    v556 = v444;
    v557.i64[0] = v448;
    v450 = v527;
    goto LABEL_819;
  }
  LOBYTE(v566[0]) = 44;
  if ((v24 & 0x10) != 0)
  {
    v25 = *(_QWORD *)(v12 + 8) - 16;
    v46 = *(_QWORD *)(v11 + 192);
    if (v46)
    {
      v47 = *(_DWORD *)(v46 - 8);
      v48 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
      v49 = 9 * ((v48 + ~(v48 << 13)) ^ ((v48 + ~(v48 << 13)) >> 8));
      v50 = (v49 ^ (v49 >> 15)) + ~((v49 ^ (v49 >> 15)) << 27);
      v51 = v47 & ((v50 >> 31) ^ v50);
      v52 = *(_QWORD *)(v46 + 16 * v51);
      if (v52 != v25)
      {
        v55 = 1;
        while (v52)
        {
          v51 = ((_DWORD)v51 + v55) & v47;
          v52 = *(_QWORD *)(v46 + 16 * v51);
          ++v55;
          if (v52 == v25)
            goto LABEL_50;
        }
        v51 = *(unsigned int *)(v46 - 4);
      }
LABEL_50:
      if (v51 != *(_DWORD *)(v46 - 4))
      {
        v27 = *(_QWORD *)(v46 + 16 * v51 + 8);
        goto LABEL_52;
      }
    }
  }
  else
  {
    v25 = 0;
  }
  LOBYTE(v556) = 0;
  LOBYTE(v551) = 0;
  v27 = JSC::fastJoin((JSC::JSGlobalObject *)this, v12, (uint64_t)v566, 0x100000001, v14, (unint64_t)&v556, (uint64_t)&v551, a8, a9);
  if (*(_DWORD *)(v11 + 80))
  {
    v221 = *(_DWORD *)(v11 + 80);
    if ((v221 & 0x27) != 0 && (v221 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v26, a4, (uint64_t)a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
    {
      v27 = 0;
      goto LABEL_52;
    }
  }
  if (!(v556 | v551)
    && v27
    && (v27 & 0xFFFE000000000002) == 0
    && (v24 & 0x10) != 0
    && *(_BYTE *)(v27 + 5) == 2)
  {
    v30 = *(_QWORD *)(v11 + 192);
    v29 = (uint64_t *)(v11 + 192);
    v28 = v30;
    if (v30
      || (WTF::HashTable<JSC::JSImmutableButterfly *,WTF::KeyValuePair<JSC::JSImmutableButterfly *,JSC::JSString *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSImmutableButterfly *,JSC::JSString *>>,WTF::DefaultHash<JSC::JSImmutableButterfly *>,WTF::HashMap<JSC::JSImmutableButterfly *,JSC::JSString *,WTF::DefaultHash<JSC::JSImmutableButterfly *>,WTF::HashTraits<JSC::JSImmutableButterfly *>,WTF::HashTraits<JSC::JSString *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSImmutableButterfly *>>::expand(v29, 0, v26, a4, (uint64_t)a5, a6, a7, a8), (v28 = *v29) != 0))
    {
      v31 = *(_DWORD *)(v28 - 8);
    }
    else
    {
      v31 = 0;
    }
    v32 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
    v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
    v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
    v35 = v31 & ((v34 >> 31) ^ v34);
    v36 = (uint64_t *)(v28 + 16 * v35);
    v37 = *v36;
    if (*v36)
    {
      v38 = 0;
      v39 = 1;
      while (v37 != v25)
      {
        if (v37 == -1)
          v38 = v36;
        v35 = (v35 + v39) & v31;
        v36 = (uint64_t *)(v28 + 16 * v35);
        v37 = *v36;
        ++v39;
        if (!*v36)
        {
          if (v38)
          {
            *v38 = 0;
            v38[1] = 0;
            --*(_DWORD *)(*v29 - 16);
            v36 = v38;
          }
          goto LABEL_41;
        }
      }
      goto LABEL_52;
    }
LABEL_41:
    *v36 = v25;
    v36[1] = v27;
    v40 = *v29;
    if (*v29)
      v41 = *(_DWORD *)(v40 - 12) + 1;
    else
      v41 = 1;
    *(_DWORD *)(v40 - 12) = v41;
    v42 = *v29;
    if (*v29)
      v43 = *(_DWORD *)(v42 - 12);
    else
      v43 = 0;
    v44 = (*(_DWORD *)(v42 - 16) + v43);
    v45 = *(unsigned int *)(v42 - 4);
    if (v45 <= 0x400)
    {
      if (3 * v45 > 4 * v44)
        goto LABEL_52;
      goto LABEL_47;
    }
    if (v45 <= 2 * v44)
LABEL_47:
      WTF::HashTable<JSC::JSImmutableButterfly *,WTF::KeyValuePair<JSC::JSImmutableButterfly *,JSC::JSString *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSImmutableButterfly *,JSC::JSString *>>,WTF::DefaultHash<JSC::JSImmutableButterfly *>,WTF::HashMap<JSC::JSImmutableButterfly *,JSC::JSString *,WTF::DefaultHash<JSC::JSImmutableButterfly *>,WTF::HashTraits<JSC::JSImmutableButterfly *>,WTF::HashTraits<JSC::JSString *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSImmutableButterfly *>>::expand(v29, (unint64_t)v36, v26, a4, (uint64_t)a5, a6, a7, a8);
  }
LABEL_52:
  if (!v550)
  {
    v53 = (_QWORD *)(*((_QWORD *)v548 + 7) + 90576);
    if (*v53 == v549)
    {
      *v53 = 0;
    }
    else
    {
      v222 = (uint64_t *)(*((_QWORD *)v548 + 7) + 90584);
      v223 = *v222;
      if (*v222)
      {
        v224 = *(_DWORD *)(v223 - 8);
        v225 = (~(v549 << 32) + v549) ^ ((unint64_t)(~(v549 << 32) + v549) >> 22);
        v226 = 9 * ((v225 + ~(v225 << 13)) ^ ((v225 + ~(v225 << 13)) >> 8));
        v227 = (v226 ^ (v226 >> 15)) + ~((v226 ^ (v226 >> 15)) << 27);
        v228 = v224 & ((v227 >> 31) ^ v227);
        v229 = *(_QWORD *)(v223 + 8 * v228);
        if (v229 != v549)
        {
          v258 = 1;
          while (v229)
          {
            v228 = ((_DWORD)v228 + v258) & v224;
            v229 = *(_QWORD *)(v223 + 8 * v228);
            ++v258;
            if (v229 == v549)
              goto LABEL_271;
          }
          v228 = *(unsigned int *)(v223 - 4);
        }
LABEL_271:
        if (v228 != *(_DWORD *)(v223 - 4))
        {
          *(_QWORD *)(v223 + 8 * v228) = -1;
          ++*(_DWORD *)(*v222 - 16);
          v230 = *v222;
          v231 = *v222 ? *(_DWORD *)(v230 - 12) - 1 : -1;
          *(_DWORD *)(v230 - 12) = v231;
          v232 = *v222;
          if (*v222)
          {
            v233 = 6 * *(_DWORD *)(v232 - 12);
            v234 = *(_DWORD *)(v232 - 4);
            v235 = v233 < v234 && v234 >= 9;
            if (v235)
              WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::rehash(v222, v234 >> 1, 0, a4, (uint64_t)a5, a6, a7, a8);
          }
        }
      }
    }
  }
  return v27;
}

uint64_t JSC::fastJoin(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  double v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  _BYTE *v14;
  uint64_t v16;
  JSC::VM *v17;
  int v18;
  unint64_t v19;
  int8x16_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  int v31;
  BOOL v33;
  char *v34;
  _WORD *v35;
  _WORD *v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  int **v48;
  WTF::StringImpl *v49;
  int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _WORD *v56;
  char *v57;
  _WORD *v58;
  char v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  _DWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v92;
  unint64_t v93;
  WTF::StringImpl **v94;
  WTF::StringImpl *v95;
  int v96;
  int v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  double *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  int **v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  size_t v114;
  char *v115;
  int v116;
  size_t v117;
  size_t v118;
  int *v119;
  _BYTE *v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  int v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  _WORD *v129;
  _WORD *v130;
  char v131;
  WTF::StringImpl *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  _DWORD *v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int *v159;
  WTF::StringImpl *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  int *v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  char *v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  _WORD *v191;
  size_t v192;
  int *v193;
  _BYTE *v194;
  WTF::StringImpl *v195;
  JSC::Structure *v196;
  uint64_t v197;
  unsigned int v198;
  unsigned int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  char MustForwardToPrototypeSlow;
  WTF::AtomStringImpl *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  int *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  int v218;
  int *v219;
  int *v220;
  WTF::StringImpl *v221;
  int v222;
  int v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  int v227;
  BOOL v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  WTF::StringImpl *v232;
  int v233;
  int v234;
  BOOL v236;
  char *v237;
  _WORD *v238;
  _WORD *v239;
  char v240;
  WTF::StringImpl *v241;
  char v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  WTF::StringImpl *v253;
  int v254;
  int v255;
  BOOL v257;
  char *v258;
  _WORD *v259;
  _WORD *v260;
  char v261;
  WTF::StringImpl *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char v266;
  char v267;
  int v268;
  uint64_t v269;
  int v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unsigned int v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unsigned int v286;
  unint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  WTF::StringImpl *v295;
  int v296;
  int v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  _WORD *v301;
  char *v302;
  _WORD *v303;
  char v304;
  WTF::StringImpl *v305;
  unint64_t v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  int v315;
  int v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  char *v320;
  int v321;
  int v322;
  int v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int v333;
  int v334;
  unsigned int v335;
  _DWORD *v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  char *v340;
  uint64_t v341;
  unint64_t v342;
  void *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _WORD *v358;
  char *v359;
  _WORD *v360;
  char v361;
  WTF::StringImpl *v362;
  unint64_t v363;
  void *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int *v371;
  _BYTE *v372;
  __int8 *v373;
  int *v374;
  WTF::StringImpl *v375;
  unint64_t v376;
  char *v377;
  uint64_t v378;
  WTF::AtomStringImpl *v379;
  uint64_t v380;
  uint64_t v381;
  int *v382;
  WTF::StringImpl *v383;
  WTF::StringImpl *v384;
  uint64_t v385;
  int v386;
  char v387;
  uint64_t IndexQuicklyForTypedArray;
  uint64_t v389;
  uint64_t v390;
  JSC::VM *v391;
  unint64_t v392;
  int **v393;
  WTF::StringImpl *v394;
  int v395;
  int v396;
  unint64_t v397;
  uint64_t v398;
  char *v399;
  _WORD *v400;
  _WORD *v401;
  char v402;
  WTF::StringImpl *v403;
  unsigned int v404;
  int v405;
  _DWORD *v406;
  unint64_t v407;
  uint64_t v408;
  unint64_t v409;
  void *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  void *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  int **v425;
  unint64_t v426;
  void *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t v434;
  void *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  void *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  void *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  void *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unsigned int v466;
  _BYTE *v467;
  WTF::StringImpl *v468;
  unint64_t v469;
  void *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  WTF::AtomStringImpl *v477;
  uint64_t v478;
  unint64_t v479;
  void *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  WTF::AtomStringImpl *v487;
  uint64_t v488;
  int *v489;
  WTF::StringImpl *v490;
  WTF::StringImpl *v491;
  WTF::StringImpl *v492;
  int v493;
  int v494;
  char v495;
  int v496;
  int v497;
  int v498;
  int v499;
  int **v500;
  uint64_t (*v501)(int **);
  int v502;
  unint64_t v503;
  char *v504;
  uint64_t v505;
  unint64_t OutOfMemoryError;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  double v512;
  JSC::Exception *v513;
  BOOL v514;
  unint64_t v515;
  char *v516;
  uint64_t v517;
  int v518;
  uint64_t v519;
  BOOL v520;
  char v521;
  int v522;
  char v523;
  char v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  unint64_t v528;
  BOOL v529;
  int **v530;
  unint64_t v531;
  void *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  int **v539;
  unint64_t v540;
  void *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t v548;
  void *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  char v556;
  uint64_t v557;
  unint64_t v558;
  uint64_t v559;
  unint64_t v560;
  void *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  char v568;
  uint64_t v569;
  unint64_t v570;
  uint64_t v571;
  WTF::AtomStringImpl *v572;
  int *v573;
  WTF::StringImpl *v574;
  int v575;
  WTF::AtomStringImpl *v576;
  unint64_t v577;
  int *v578;
  WTF::StringImpl *v579;
  WTF::StringImpl *v580;
  int v581;
  unint64_t v582;
  void *v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  WTF::AtomStringImpl *v590;
  unint64_t v591;
  void *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t v599;
  void *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  WTF::AtomStringImpl *v607;
  unint64_t v608;
  void *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  char *v616;
  BOOL v617;
  WTF::StringImpl *v618;
  uint64_t v619;
  uint64_t v620;
  unint64_t v621;
  uint64_t v622;
  BOOL v623;
  unint64_t v624;
  unsigned int v625;
  char MustForwardToPrototype;
  char *v627;
  BOOL v628;
  WTF::StringImpl *v629;
  uint64_t v630;
  unint64_t v631;
  BOOL v632;
  unint64_t v633;
  int *v634;
  uint64_t v635;
  int *v636;
  int v637;
  uint64_t v638;
  uint64_t v639;
  int *v640;
  int v641;
  int v642;
  _BOOL4 v643;
  int *v644;
  uint64_t v645;
  int v646;
  _BOOL4 v647;
  unint64_t v648;
  void *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  unint64_t v656;
  void *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t **v664;
  WTF::AtomStringImpl *v665;
  WTF::StringImpl *v666;
  double v667;
  char *v668;
  BOOL v669;
  WTF::StringImpl *v670;
  unint64_t v671;
  unint64_t v672;
  void *v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t v681;
  void *v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  BOOL v693;
  unint64_t v694;
  int **v695;
  WTF::StringImpl *v696;
  int v697;
  int v698;
  unint64_t v699;
  uint64_t v700;
  unint64_t v701;
  uint64_t v702;
  int v703;
  int v704;
  unint64_t v705;
  uint64_t v706;
  uint64_t v707;
  int v708;
  int v709;
  unint64_t v710;
  uint64_t v711;
  char *v712;
  uint64_t v713;
  uint64_t v714;
  WTF::StringImpl *v716;
  int v717;
  int v718;
  unint64_t v719;
  uint64_t v720;
  _QWORD *v721;
  unsigned int v722;
  int v723;
  unsigned int v724;
  _DWORD *v725;
  _QWORD *v726;
  uint64_t v727;
  _QWORD *v728;
  int *v729;
  WTF::StringImpl *v730;
  WTF::StringImpl *v731;
  unint64_t v732;
  int **v733;
  WTF::StringImpl *v734;
  int v735;
  int v736;
  unint64_t v737;
  uint64_t v738;
  unint64_t v739;
  uint64_t v740;
  int v741;
  int v742;
  unint64_t v743;
  uint64_t v744;
  uint64_t v745;
  int v746;
  int v747;
  unint64_t v748;
  uint64_t v749;
  char *v750;
  unint64_t v751;
  void *v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  WTF::StringImpl *v761;
  int v762;
  int v763;
  unint64_t v764;
  uint64_t v765;
  int *v766;
  WTF::StringImpl *v767;
  unint64_t v768;
  void *v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  WTF::StringImpl *v776;
  uint64_t v777;
  unsigned int v778;
  int v779;
  unsigned int v780;
  _DWORD *v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  int *v785;
  WTF::StringImpl *v786;
  WTF::StringImpl *v787;
  int *v788;
  WTF::StringImpl *v789;
  unint64_t v790;
  void *v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  unint64_t v798;
  void *v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  WTF::StringImpl *v806;
  unint64_t v807;
  void *v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  unint64_t v815;
  void *v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  WTF::StringImpl *v823;
  unint64_t v824;
  void *v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  WTF::StringImpl *v832;
  unint64_t v833;
  void *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  unint64_t v841;
  void *v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  unint64_t v849;
  void *v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  unint64_t v857;
  unint64_t v858;
  unint64_t v859;
  unint64_t v860;
  unint64_t v861;
  unint64_t v862;
  uint64_t v863;
  size_t __n;
  unint64_t v865;
  uint64_t v866;
  uint64_t StatusReg;
  uint64_t v868;
  uint64_t v869;
  JSC::JSObject *v870;
  unint64_t v871;
  unint64_t v872;
  int8x16_t *v873;
  JSC::VM *v875;
  unint64_t v876;
  _QWORD v877[2];
  _QWORD v878[2];
  void *ptr;
  uint64_t v880;
  _BYTE v881[512];
  char v882;
  int v883;
  char v884;
  int v885;
  char v886;
  char v887;
  unint64_t v888;
  int *__dst;
  int8x16_t v890;
  _QWORD v891[4];
  uint64_t v892;
  char v893;
  uint64_t v894;
  uint64_t v895;
  char __s[8];
  uint64_t v897;

  v14 = (_BYTE *)a7;
  v16 = (uint64_t)a1;
  v897 = *MEMORY[0x1E0C80C00];
  v17 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v878[0] = a3;
  v878[1] = a4;
  ptr = v881;
  a9.i64[0] = 16;
  v880 = 16;
  v882 = 0;
  v883 = 0;
  v884 = 0;
  v885 = 0;
  v886 = 0;
  v887 = BYTE4(a4);
  v888 = 0;
  v18 = *(_BYTE *)(a2 + 4) & 0xF;
  v875 = v17;
  v870 = (JSC::JSObject *)a2;
  LODWORD(v873) = a5;
  v868 = a7;
  v866 = a6;
  if ((v18 - 8) >= 2)
  {
    if ((v18 - 6) < 2)
    {
      v22 = *(_QWORD *)(a2 + 8);
      if (*(_DWORD *)(v22 - 8) < a5)
        goto LABEL_560;
      v21 = a5;
      if (a5 >= 0x11)
      {
        if (a5 >> 27 || (WTF::tryFastMalloc((WTF *)(32 * a5), &__dst), !__dst))
        {
          OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, (JSC::JSGlobalObject *)v16);
          v513 = (JSC::Exception *)OutOfMemoryError;
          if ((OutOfMemoryError & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                    + 0x4C)))
          {
            v513 = (JSC::Exception *)JSC::Exception::create((uint64_t)v875, (JSC::VM *)OutOfMemoryError, 0, v507, v508, v509, v510, v511);
          }
          a2 = (uint64_t)a1;
          JSC::VM::throwException(v875, a1, v513, v512, v507, v508, v509, v510, v511);
          v17 = v875;
          v16 = (uint64_t)a1;
          a5 = v873;
        }
        else
        {
          a5 = v873;
          LODWORD(v880) = (_DWORD)v873;
          ptr = __dst;
          v16 = (uint64_t)a1;
          v17 = v875;
        }
      }
      if (*((_DWORD *)v17 + 20))
      {
        v499 = *((_DWORD *)v17 + 20);
        if ((v499 & 0x27) != 0 && (v499 & 0x20) == 0)
        {
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v17 + 64), 7u, a3, a4, a5, a6, a7, a8);
          a5 = v873;
          v16 = (uint64_t)a1;
          v17 = v875;
        }
        if (*((_QWORD *)v17 + 2))
        {
LABEL_618:
          a2 = 0;
          goto LABEL_94;
        }
      }
      if ((_DWORD)a5)
      {
        v19 = 0;
        LODWORD(StatusReg) = 0;
        v871 = (unint64_t)v17 + 44272;
        v12 = (unint64_t)v891;
        *(_QWORD *)&v9 = (char *)v17 + 54512;
        a3 = 10;
        v869 = (uint64_t)v17 + 48368;
        v872 = (unint64_t)&v890;
        while (1)
        {
          v92 = *(double *)(v22 + 8 * v19);
          if (fabs(v92) != INFINITY)
          {
            v93 = (int)v92;
            if (v92 == (double)(int)v93 && ((_DWORD)v93 || (*(_QWORD *)&v92 & 0x8000000000000000) == 0))
            {
              if (v93 <= 0xFF)
              {
                v94 = (WTF::StringImpl **)(v871 + 16 * v93);
                if (!*v94)
                {
                  v148 = 0;
                  do
                  {
                    v147 = (v93 % 0xA) | 0x30;
                    v890.i8[v148-- + 4] = (v93 % 0xA) | 0x30;
                    v514 = v93 > 9;
                    LODWORD(v93) = v93 / 0xA;
                  }
                  while (v514);
                  if (v148 + 14 >= 15)
                    goto LABEL_937;
                  if (v148)
                  {
                    __n = -v148;
                    if ((unint64_t)-v148 >> 31)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1988B0388);
                    }
                    LODWORD(v865) = -(int)v148;
                    v371 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v148));
                    v372 = v371 + 5;
                    *v371 = 2;
                    v371[1] = -(int)v148;
                    *((_QWORD *)v371 + 1) = v371 + 5;
                    v371[4] = 4;
                    if (v148 == -1)
                    {
                      *v372 = v147;
                    }
                    else
                    {
                      v373 = &v890.i8[v148 + 5];
                      v374 = v371;
                      memcpy(v372, v373, __n);
                      v371 = v374;
                    }
                    v16 = (uint64_t)a1;
                    a5 = v873;
                    a3 = 10;
                  }
                  else
                  {
                    v371 = &WTF::StringImpl::s_emptyAtomString;
                    WTF::StringImpl::s_emptyAtomString += 2;
                  }
                  v375 = *v94;
                  *v94 = (WTF::StringImpl *)v371;
                  if (v375)
                  {
                    if (*(_DWORD *)v375 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v375, (WTF::AtomStringImpl *)v16, 10, a4, a5, a6, a7, a8);
                      WTF::fastFree(v458, v459, v460, v461, v462, v463, v464, v465);
                      a3 = 10;
                      a5 = v873;
                      v16 = (uint64_t)a1;
                    }
                    else
                    {
                      *(_DWORD *)v375 -= 2;
                    }
                  }
                }
                goto LABEL_122;
              }
              v141 = 9 * ((~((_DWORD)v93 << 15) + v93) ^ ((~((_DWORD)v93 << 15) + v93) >> 10));
              v142 = (v141 ^ (v141 >> 6)) + ~((v141 ^ (v141 >> 6)) << 11);
              v143 = (v142 ^ BYTE2(v142));
              v144 = (_DWORD *)(v869 + 24 * (v142 ^ BYTE2(v142)));
              if (*v144 == (_DWORD)v93)
              {
                v145 = v869 + 24 * v143;
                v146 = *(_QWORD *)(v145 + 8);
                v94 = (WTF::StringImpl **)(v145 + 8);
                if (v146)
                {
LABEL_122:
                  if (v885 == -1)
                    v884 = 1;
                  ++v885;
                  v95 = *v94;
                  if (*v94)
                    v96 = *((_DWORD *)v95 + 1);
                  else
                    v96 = 0;
                  v529 = __CFADD__(v883, v96);
                  v97 = v883 + v96;
                  if (v529)
                    v882 = 1;
                  else
                    v883 = v97;
                  v98 = a2 & 0xFFFFFF0000000000;
                  if (v95)
                  {
                    v99 = *((_QWORD *)v95 + 1);
                    a2 = *((unsigned int *)v95 + 1) | ((unint64_t)((*((_DWORD *)v95 + 4) >> 2) & 1) << 32) | v98;
                    *(_DWORD *)v95 += 2;
                  }
                  else
                  {
                    v99 = 0;
                    a2 = v98 | 0x100000000;
                  }
                  __dst = (int *)v95;
                  v890.i64[0] = v99;
                  v890.i64[1] = a2;
                  goto LABEL_159;
                }
              }
              *v144 = v93;
              WTF::String::number(v93, (uint64_t *)&__dst);
              a3 = 10;
              v381 = v869 + 24 * v143;
              v382 = __dst;
              __dst = 0;
              v384 = *(WTF::StringImpl **)(v381 + 8);
              v94 = (WTF::StringImpl **)(v381 + 8);
              v383 = v384;
              *v94 = (WTF::StringImpl *)v382;
              v385 = v869;
              if (v384)
              {
                v386 = *(_DWORD *)v383 - 2;
                if (*(_DWORD *)v383 != 2)
                  goto LABEL_504;
                WTF::StringImpl::~StringImpl(v383, v379, 10, a4, v380, a6, a7, a8);
                WTF::fastFree(v469, v470, v471, v472, v473, v474, v475, v476);
                v385 = v869;
                a3 = 10;
                v383 = (WTF::StringImpl *)__dst;
                __dst = 0;
                if (v383)
                {
                  v386 = *(_DWORD *)v383 - 2;
                  if (*(_DWORD *)v383 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v383, v477, 10, a4, v478, a6, a7, a8);
                    WTF::fastFree(v479, v480, v481, v482, v483, v484, v485, v486);
                    v385 = v869;
                    a3 = 10;
                  }
                  else
                  {
LABEL_504:
                    *(_DWORD *)v383 = v386;
                  }
                }
              }
              *(_QWORD *)(v385 + 24 * v143 + 16) = 0;
              v16 = (uint64_t)a1;
              a5 = v873;
              goto LABEL_122;
            }
          }
          v100 = *(_QWORD *)(v22 + 8 * v19);
          v101 = (~(*(_QWORD *)&v92 << 32) + *(_QWORD *)&v92) ^ ((~(*(_QWORD *)&v92 << 32) + *(_QWORD *)&v92) >> 22);
          v102 = 9 * ((v101 + ~(v101 << 13)) ^ ((unint64_t)(v101 + ~(v101 << 13)) >> 8));
          v103 = (v102 ^ (v102 >> 15)) + ~((v102 ^ (v102 >> 15)) << 27);
          v104 = ((v103 >> 31) ^ v103);
          v105 = (double *)(*(_QWORD *)&v9 + 24 * ((v103 >> 31) ^ v103));
          if (*v105 != v92)
            break;
          v108 = *(_QWORD *)&v9 + 24 * v104;
          v110 = *(_QWORD *)(v108 + 8);
          v109 = (int **)(v108 + 8);
          if (!v110)
            break;
LABEL_150:
          if (v885 == -1)
            v884 = 1;
          ++v885;
          v95 = (WTF::StringImpl *)*v109;
          if (*v109)
            v124 = *((_DWORD *)v95 + 1);
          else
            v124 = 0;
          v529 = __CFADD__(v883, v124);
          v125 = v883 + v124;
          if (v529)
            v882 = 1;
          else
            v883 = v125;
          v126 = v10 & 0xFFFFFF0000000000;
          if (v95)
          {
            v127 = *((_QWORD *)v95 + 1);
            v10 = *((unsigned int *)v95 + 1) | ((unint64_t)((*((_DWORD *)v95 + 4) >> 2) & 1) << 32) | v126;
            *(_DWORD *)v95 += 2;
          }
          else
          {
            v127 = 0;
            v10 = v126 | 0x100000000;
          }
          __dst = (int *)v95;
          v890.i64[0] = v127;
          v890.i64[1] = v10;
LABEL_159:
          LOWORD(v891[0]) = 0;
          if (HIDWORD(v880) == (_DWORD)v880)
          {
            v183 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&ptr, (WTF::AtomStringImpl *)(HIDWORD(v880) + 1), (unint64_t)&__dst, a4, a5, a6, a7, a8);
            if (!v183)
            {
              v131 = 1;
              v16 = (uint64_t)a1;
              a5 = v873;
              a3 = 10;
              goto LABEL_162;
            }
            v184 = (char *)ptr + 32 * HIDWORD(v880);
            v185 = *(_QWORD *)v183;
            *(_QWORD *)v183 = 0;
            *(_QWORD *)v184 = v185;
            *(_OWORD *)(v184 + 8) = *(_OWORD *)(v183 + 8);
            v129 = v184 + 24;
            v130 = (_WORD *)(v183 + 24);
            v16 = (uint64_t)a1;
            a5 = v873;
            a3 = 10;
          }
          else
          {
            v128 = (char *)ptr + 32 * HIDWORD(v880);
            __dst = 0;
            *(_QWORD *)v128 = v95;
            *(int8x16_t *)(v128 + 8) = v890;
            v129 = v128 + 24;
            v130 = v891;
          }
          v131 = 0;
          *v129 = *v130;
          ++HIDWORD(v880);
LABEL_162:
          v886 |= v131;
          v132 = (WTF::StringImpl *)__dst;
          __dst = 0;
          if (v132)
          {
            if (*(_DWORD *)v132 == 2)
            {
              WTF::StringImpl::~StringImpl(v132, (WTF::AtomStringImpl *)v16, 10, a4, a5, a6, a7, a8);
              WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
              a3 = 10;
              a5 = v873;
              v16 = (uint64_t)a1;
            }
            else
            {
              *(_DWORD *)v132 -= 2;
            }
          }
          v888 = 0;
          if (++v19 == v21)
            goto LABEL_180;
        }
        *v105 = v92;
        v106 = (*(_QWORD *)&v92 >> 52) & 0x7FFLL;
        if ((_DWORD)v106 == 2047)
        {
          if ((v100 & 0xFFFFFFFFFFFFFLL) != 0)
          {
            v107 = &__s[3];
            qmemcpy(__s, "NaN", 3);
          }
          else
          {
            if (v100 < 0)
            {
              v189 = &__s[1];
              __s[0] = 45;
            }
            else
            {
              v189 = __s;
            }
            *(_QWORD *)v189 = 0x7974696E69666E49;
            v107 = v189 + 8;
          }
          goto LABEL_141;
        }
        v111 = *(_QWORD *)&v92 & 0x7FFFFFFFFFFFFFFFLL;
        if ((*(_QWORD *)&v92 & 0x8000000000000000) != 0 && v111)
        {
          v112 = &__s[1];
          __s[0] = 45;
        }
        else
        {
          if (!v111)
          {
            v107 = &__s[1];
            __s[0] = 48;
            goto LABEL_141;
          }
          v112 = __s;
        }
        v113 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(*(_QWORD *)&v92 & 0x800FFFFFFFFFFFFFLL, v106);
        v107 = WTF::dragonbox::detail::to_shortest(v113, v114, (uint64_t)v112, v115);
LABEL_141:
        *v107 = 0;
        v116 = strlen(__s);
        memcpy(&__dst, __s, v116);
        *((_BYTE *)&__dst + v116) = 0;
        v117 = strlen((const char *)&__dst);
        if (v117)
        {
          v118 = v117;
          if (v117 >> 31)
          {
            __break(0xC471u);
            JUMPOUT(0x1988B0380);
          }
          v119 = (int *)WTF::fastCompactMalloc((WTF *)(v117 + 20));
          v120 = v119 + 5;
          *v119 = 2;
          v119[1] = v118;
          *((_QWORD *)v119 + 1) = v119 + 5;
          v119[4] = 4;
          if (v118 == 1)
            *v120 = (_BYTE)__dst;
          else
            memcpy(v120, &__dst, v118);
        }
        else
        {
          v119 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
        }
        v16 = (uint64_t)a1;
        a5 = v873;
        a3 = 10;
        v121 = *(_QWORD *)&v9 + 24 * v104;
        v123 = *(WTF::StringImpl **)(v121 + 8);
        v109 = (int **)(v121 + 8);
        v122 = v123;
        *v109 = v119;
        if (v123)
        {
          if (*(_DWORD *)v122 == 2)
          {
            WTF::StringImpl::~StringImpl(v122, a1, 10, a4, v873, a6, a7, a8);
            WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
            a3 = 10;
            a5 = v873;
            v16 = (uint64_t)a1;
          }
          else
          {
            *(_DWORD *)v122 -= 2;
          }
        }
        *(_QWORD *)(*(_QWORD *)&v9 + 24 * v104 + 16) = 0;
        goto LABEL_150;
      }
LABEL_180:
      if (v884)
      {
        __break(0xC471u);
        JUMPOUT(0x1988B0398);
      }
      if (v885 != 1)
        goto LABEL_92;
      a2 = v888;
      if (v888)
        goto LABEL_94;
      if (!HIDWORD(v880))
      {
        __break(0xC471u);
        JUMPOUT(0x1988B05E4);
      }
      v157 = *(_QWORD *)(v16 + 56);
LABEL_185:
      v158 = *((_DWORD *)ptr + 4);
      v159 = *(int **)ptr;
      if (*(_QWORD *)ptr)
      {
        if (v158 == v159[1])
        {
          *v159 += 2;
LABEL_188:
          __dst = v159;
          goto LABEL_189;
        }
      }
      else if (!v158)
      {
        goto LABEL_188;
      }
      WTF::StringView::toString((_BYTE *)ptr + 8, &__dst);
LABEL_189:
      a2 = JSC::jsString(v157, (JSC::VM *)&__dst, a3, a4, a5, a6, a7, a8);
      v160 = (WTF::StringImpl *)__dst;
      __dst = 0;
      if (v160)
      {
        if (*(_DWORD *)v160 == 2)
        {
          WTF::StringImpl::~StringImpl(v160, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v560, v561, v562, v563, v564, v565, v566, v567);
        }
        else
        {
          *(_DWORD *)v160 -= 2;
        }
      }
      goto LABEL_94;
    }
    if (v18 == 3)
    {
      v190 = a4;
      v191 = (_WORD *)a3;
      if (!(_DWORD)a5)
      {
LABEL_220:
        if ((_DWORD)v190 == 1)
        {
          v192 = (a5 - 1);
          if (a5 <= 1)
          {
            a2 = *((_QWORD *)v17 + 5246);
            goto LABEL_94;
          }
          if ((v190 & 0xFF00000000) == 0)
          {
            v84 = JSC::repeatCharacter<char16_t>(a1, (JSC::JSGlobalObject *)(unsigned __int16)*v191, (int)a5 - 1);
            goto LABEL_93;
          }
          v218 = *(unsigned __int8 *)v191;
          *(_QWORD *)__s = v17;
          if ((v192 & 0x80000000) == 0)
          {
            WTF::tryFastCompactMalloc((WTF *)(v192 + 20), &__dst);
            v219 = __dst;
            if (__dst)
            {
              v220 = __dst + 5;
              *__dst = 2;
              v219[1] = v192;
              *((_QWORD *)v219 + 1) = v219 + 5;
              v219[4] = 4;
              memset(v220, v218, v192);
              __dst = v219;
              v174 = (uint64_t)v875;
              goto LABEL_266;
            }
          }
          JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)__s);
          goto LABEL_618;
        }
        if (!(_DWORD)v190)
        {
          a2 = *((_QWORD *)v875 + 5246);
          goto LABEL_94;
        }
        v624 = *((_QWORD *)v875 + 5246);
        v625 = (_DWORD)v873 - 1;
        if (v873 <= 1)
        {
LABEL_733:
          a2 = v624;
          goto LABEL_94;
        }
        v633 = JSC::jsString((uint64_t)v875, v191, v190);
        if (*((_DWORD *)v875 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v875, v16, a3, a4, a5, a6, a7, a8))
        {
LABEL_855:
          a2 = 0;
          goto LABEL_94;
        }
        while (1)
        {
          if ((v625 & 1) != 0)
          {
            v634 = (int *)*((_QWORD *)a1 + 7);
            __dst = v634;
            v635 = *(_QWORD *)(v624 + 8);
            if ((v635 & 1) != 0)
              v636 = (int *)(v624 + 16);
            else
              v636 = (int *)(v635 + 4);
            v637 = *v636;
            v638 = v633;
            if (v637)
            {
              v639 = *(_QWORD *)(v633 + 8);
              if ((v639 & 1) != 0)
                v640 = (int *)(v633 + 16);
              else
                v640 = (int *)(v639 + 4);
              v641 = *v640;
              if (v641)
              {
                v642 = v641 | v637;
                v643 = __OFADD__(v637, v641);
                if (v642 < 0 || v643)
                {
                  JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&__dst);
                  v638 = 0;
                }
                else
                {
                  v638 = JSC::JSRopeString::create((JSC::JSRopeString *)v634, v624, (JSC::JSString *)v633, (JSC::JSString *)a4, a5, a6, a7, a8);
                }
              }
              else
              {
                v638 = v624;
              }
            }
            if (*((_DWORD *)v875 + 20))
            {
              v624 = v638;
              if (JSC::VM::hasExceptionsAfterHandlingTraps(v875, v16, a3, a4, a5, a6, a7, a8))
                goto LABEL_855;
            }
            else
            {
              v624 = v638;
            }
          }
          if (v625 <= 1)
            goto LABEL_733;
          v644 = (int *)*((_QWORD *)a1 + 7);
          __dst = v644;
          v645 = *(_QWORD *)(v633 + 8);
          if ((v645 & 1) != 0)
          {
            v646 = *(_DWORD *)(v633 + 16);
            if (v646)
            {
LABEL_778:
              v647 = __OFADD__(v646, v646);
              if (v646 < 0 || v647)
              {
                JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&__dst);
                v633 = 0;
              }
              else
              {
                v633 = JSC::JSRopeString::create((JSC::JSRopeString *)v644, v633, (JSC::JSString *)v633, (JSC::JSString *)a4, a5, a6, a7, a8);
              }
            }
          }
          else
          {
            v646 = *(_DWORD *)(v645 + 4);
            if (v646)
              goto LABEL_778;
          }
          v625 >>= 1;
          if (*((_DWORD *)v875 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v875, v16, a3, a4, a5, a6, a7, a8);
            a2 = 0;
            if (hasExceptionsAfterHandlingTraps)
              goto LABEL_94;
          }
        }
      }
      v196 = (JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE));
      if (*((_BYTE *)v196 + 9) == 36)
      {
        v197 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
        v198 = *(unsigned __int8 *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 8);
        v199 = (v198 >> 1) & 7;
        if ((v198 & 0x10) != 0)
          v199 = ((v198 & 0xE) + 10) >> 1;
        v200 = *(_DWORD *)(v197 + 4 * v199 + 852);
        if (v200)
          v201 = 16 * (v200 & 0xFFFFFFFE);
        else
          v201 = 0;
        if ((JSC::Structure *)v201 == v196)
        {
          v202 = *(_QWORD *)(v197 + 2304);
          v203 = (v202 & 1) != 0 ? (v202 >> 1) & 3 : *(unsigned __int8 *)(v202 + 4);
          if (v203 != 2)
            goto LABEL_220;
        }
      }
      else
      {
        LOBYTE(v198) = *(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 8);
      }
      if ((v198 & 0x20) != 0)
        goto LABEL_560;
      v204 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
      if (v204 && *(_BYTE *)(*(_QWORD *)(v204 + 2048) + 4) == 2)
      {
        v19 = 0;
        v16 = (uint64_t)a1;
        a5 = a5;
        goto LABEL_278;
      }
      MustForwardToPrototypeSlow = JSC::Structure::holesMustForwardToPrototypeSlow(v196, (JSC::JSObject *)a2);
      v16 = (uint64_t)a1;
      v17 = v875;
      a5 = v873;
      if ((MustForwardToPrototypeSlow & 1) != 0)
      {
LABEL_560:
        v19 = 0;
        goto LABEL_278;
      }
      goto LABEL_220;
    }
    if ((v18 - 4) > 1)
      goto LABEL_560;
    v22 = *(_QWORD *)(a2 + 8);
    if (*(_DWORD *)(v22 - 8) < a5)
    {
      v19 = 0;
      goto LABEL_277;
    }
    v389 = a5;
    v21 = a5;
    JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)v878, a1, a5, a4, a5, a6, a7, a8);
    v391 = v875;
    if (*((_DWORD *)v875 + 20))
    {
      v623 = JSC::VM::hasExceptionsAfterHandlingTraps(v875, v390, a3, a4, a5, a6, a7, a8);
      v391 = v875;
      if (v623)
        goto LABEL_271;
    }
    v16 = (uint64_t)a1;
    if (!(_DWORD)v21)
    {
LABEL_548:
      if (v884)
      {
        __break(0xC471u);
        JUMPOUT(0x1988B04CCLL);
      }
      v19 = (unint64_t)v881;
      if (v885 != 1)
        goto LABEL_92;
      a2 = v888;
      if (v888)
        goto LABEL_94;
      if (!HIDWORD(v880))
      {
        __break(0xC471u);
        goto LABEL_937;
      }
      v157 = *((_QWORD *)a1 + 7);
      goto LABEL_185;
    }
    v19 = 0;
    LODWORD(v872) = 0;
    v21 = (unint64_t)v391 + 44272;
    v9 = COERCE_DOUBLE(v891);
    v10 = (unint64_t)v391 + 48368;
    while (1)
    {
      v392 = *(_QWORD *)(v22 + 8 * v19);
      if (!v392)
      {
        *(_BYTE *)v866 = 1;
        if ((v872 & 1) == 0 && (JSC::holesMustForwardToPrototype((JSC *)a2, (JSC::JSObject *)v16) & 1) != 0)
        {
          v16 = (uint64_t)a1;
          v17 = v875;
          a5 = v873;
          goto LABEL_277;
        }
        if (v885 == -1)
          v884 = 1;
        ++v885;
        v890.i64[0] = 0;
        __dst = 0;
        v871 = v871 & 0xFFFFFF0000000000 | 0x100000000;
        v890.i64[1] = v871;
        LOWORD(v891[0]) = 0;
        if (HIDWORD(v880) == (_DWORD)v880)
        {
          v617 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)1,JSC::JSStringJoiner::Entry>((uint64_t)&ptr, (unint64_t)&__dst, a3, a4, a5, a6, a7, a8);
        }
        else
        {
          v616 = (char *)ptr + 32 * HIDWORD(v880);
          *(_QWORD *)v616 = 0;
          *(int8x16_t *)(v616 + 8) = v890;
          *((_WORD *)v616 + 12) = v891[0];
          ++HIDWORD(v880);
          v617 = 1;
        }
        v886 |= !v617;
        v618 = (WTF::StringImpl *)__dst;
        __dst = 0;
        if (v618)
        {
          if (*(_DWORD *)v618 == 2)
          {
            WTF::StringImpl::~StringImpl(v618, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v648, v649, v650, v651, v652, v653, v654, v655);
          }
          else
          {
            *(_DWORD *)v618 -= 2;
          }
        }
        LODWORD(v872) = 1;
        v16 = (uint64_t)a1;
        goto LABEL_542;
      }
      if (v392 <= 0xFF)
      {
        v393 = (int **)(v21 + 16 * v392);
        if (*v393)
          goto LABEL_528;
        WTF::String::number(v392, (uint64_t *)&__dst);
        v573 = __dst;
        __dst = 0;
        v574 = (WTF::StringImpl *)*v393;
        *v393 = v573;
        if (v574)
        {
          v575 = *(_DWORD *)v574 - 2;
          if (*(_DWORD *)v574 != 2)
            goto LABEL_689;
          WTF::StringImpl::~StringImpl(v574, v572, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v582, v583, v584, v585, v586, v587, v588, v589);
          v574 = (WTF::StringImpl *)__dst;
          __dst = 0;
          if (v574)
          {
            v575 = *(_DWORD *)v574 - 2;
            if (*(_DWORD *)v574 == 2)
            {
              WTF::StringImpl::~StringImpl(v574, v590, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v591, v592, v593, v594, v595, v596, v597, v598);
            }
            else
            {
LABEL_689:
              *(_DWORD *)v574 = v575;
            }
          }
        }
        v16 = (uint64_t)a1;
        goto LABEL_528;
      }
      v404 = 9 * ((~((_DWORD)v392 << 15) + v392) ^ ((~((_DWORD)v392 << 15) + v392) >> 10));
      v405 = (v404 ^ (v404 >> 6)) + ~((v404 ^ (v404 >> 6)) << 11);
      v12 = (v405 ^ BYTE2(v405));
      v406 = (_DWORD *)(v10 + 24 * v12);
      if (*v406 != (_DWORD)v392)
        break;
      v407 = v10 + 24 * v12;
      v408 = *(_QWORD *)(v407 + 8);
      v393 = (int **)(v407 + 8);
      if (!v408)
        break;
LABEL_528:
      if (v885 == -1)
        v884 = 1;
      ++v885;
      v394 = (WTF::StringImpl *)*v393;
      if (*v393)
        v395 = *((_DWORD *)v394 + 1);
      else
        v395 = 0;
      v529 = __CFADD__(v883, v395);
      v396 = v883 + v395;
      if (v529)
        v882 = 1;
      else
        v883 = v396;
      v397 = v11 & 0xFFFFFF0000000000;
      if (v394)
      {
        v398 = *((_QWORD *)v394 + 1);
        v11 = *((unsigned int *)v394 + 1) | ((unint64_t)((*((_DWORD *)v394 + 4) >> 2) & 1) << 32) | v397;
        *(_DWORD *)v394 += 2;
      }
      else
      {
        v398 = 0;
        v11 = v397 | 0x100000000;
      }
      __dst = (int *)v394;
      v890.i64[0] = v398;
      v890.i64[1] = v11;
      LOWORD(v891[0]) = 0;
      if (HIDWORD(v880) != (_DWORD)v880)
      {
        v399 = (char *)ptr + 32 * HIDWORD(v880);
        __dst = 0;
        *(_QWORD *)v399 = v394;
        *(int8x16_t *)(v399 + 8) = v890;
        v400 = v399 + 24;
        v401 = v891;
LABEL_538:
        v402 = 0;
        *v400 = *v401;
        ++HIDWORD(v880);
        goto LABEL_539;
      }
      v515 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&ptr, (WTF::AtomStringImpl *)(HIDWORD(v880) + 1), (unint64_t)&__dst, a4, a5, a6, a7, a8);
      if (v515)
      {
        v516 = (char *)ptr + 32 * HIDWORD(v880);
        v517 = *(_QWORD *)v515;
        *(_QWORD *)v515 = 0;
        *(_QWORD *)v516 = v517;
        *(_OWORD *)(v516 + 8) = *(_OWORD *)(v515 + 8);
        v400 = v516 + 24;
        v401 = (_WORD *)(v515 + 24);
        v16 = (uint64_t)a1;
        goto LABEL_538;
      }
      v402 = 1;
      v16 = (uint64_t)a1;
LABEL_539:
      v886 |= v402;
      v403 = (WTF::StringImpl *)__dst;
      __dst = 0;
      if (v403)
      {
        if (*(_DWORD *)v403 == 2)
        {
          WTF::StringImpl::~StringImpl(v403, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v409, v410, v411, v412, v413, v414, v415, v416);
          v16 = (uint64_t)a1;
        }
        else
        {
          *(_DWORD *)v403 -= 2;
        }
      }
LABEL_542:
      v888 = 0;
      if (v389 == ++v19)
        goto LABEL_548;
    }
    *v406 = v392;
    WTF::String::number(v392, (uint64_t *)&__dst);
    v577 = v10 + 24 * v12;
    v578 = __dst;
    __dst = 0;
    v580 = *(WTF::StringImpl **)(v577 + 8);
    v393 = (int **)(v577 + 8);
    v579 = v580;
    *v393 = v578;
    if (v580)
    {
      v581 = *(_DWORD *)v579 - 2;
      if (*(_DWORD *)v579 == 2)
      {
        WTF::StringImpl::~StringImpl(v579, v576, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v599, v600, v601, v602, v603, v604, v605, v606);
        v579 = (WTF::StringImpl *)__dst;
        __dst = 0;
        if (!v579)
          goto LABEL_695;
        v581 = *(_DWORD *)v579 - 2;
        if (*(_DWORD *)v579 == 2)
        {
          WTF::StringImpl::~StringImpl(v579, v607, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v608, v609, v610, v611, v612, v613, v614, v615);
          goto LABEL_695;
        }
      }
      *(_DWORD *)v579 = v581;
    }
LABEL_695:
    *(_QWORD *)(v10 + 24 * v12 + 16) = 0;
    v16 = (uint64_t)a1;
    goto LABEL_528;
  }
  v10 = *(_QWORD *)(a2 + 8);
  if (*(_DWORD *)(v10 - 8) < a5)
    goto LABEL_560;
  if (!(_DWORD)a5)
  {
LABEL_92:
    v84 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)v878, (int8x16_t *)v16, a3, a4, a5, a6, a7, a8);
LABEL_93:
    a2 = v84;
    goto LABEL_94;
  }
  v19 = 0;
  LODWORD(v865) = 0;
  v20 = &v890;
  v21 = (unint64_t)v891;
  v22 = a5;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  a3 = (uint64_t)v877;
  a4 = (uint64_t)&v876;
  a6 = 3435973837;
  a7 = 10;
  a8 = 24;
  v872 = (unint64_t)&v890;
  while (1)
  {
    v23 = *(_QWORD *)(v10 + 8 * v19);
    if (v23)
      break;
    *(_BYTE *)v866 = 1;
    if ((v865 & 1) == 0)
    {
      MustForwardToPrototype = JSC::holesMustForwardToPrototype(v870, (JSC::JSObject *)v16);
      a8 = 24;
      a7 = 10;
      a6 = 3435973837;
      a4 = (uint64_t)&v876;
      a3 = (uint64_t)v877;
      v20 = (int8x16_t *)v872;
      a5 = v873;
      v16 = (uint64_t)a1;
      v17 = v875;
      if ((MustForwardToPrototype & 1) != 0)
        goto LABEL_276;
    }
    if (v885 == -1)
      v884 = 1;
    ++v885;
    v890.i64[0] = 0;
    __dst = 0;
    v890.i64[1] = v862 & 0xFFFFFF0000000000 | 0x100000000;
    LOWORD(v891[0]) = 0;
    if (HIDWORD(v880) == (_DWORD)v880)
    {
      v503 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&ptr, (WTF::AtomStringImpl *)(HIDWORD(v880) + 1), (unint64_t)&__dst, (uint64_t)&v876, a5, 3435973837, 10, 24);
      if (!v503)
      {
        v361 = 1;
        v16 = (uint64_t)a1;
        v17 = v875;
        a5 = v873;
        v20 = (int8x16_t *)v872;
        a3 = (uint64_t)v877;
        a4 = (uint64_t)&v876;
        a6 = 3435973837;
        a7 = 10;
        a8 = 24;
        goto LABEL_480;
      }
      v504 = (char *)ptr + 32 * HIDWORD(v880);
      v505 = *(_QWORD *)v503;
      *(_QWORD *)v503 = 0;
      *(_QWORD *)v504 = v505;
      a9 = *(int8x16_t *)(v503 + 8);
      *(int8x16_t *)(v504 + 8) = a9;
      v360 = v504 + 24;
      v358 = (_WORD *)(v503 + 24);
      v16 = (uint64_t)a1;
      v17 = v875;
      a5 = v873;
      v20 = (int8x16_t *)v872;
      a3 = (uint64_t)v877;
      a4 = (uint64_t)&v876;
      a6 = 3435973837;
      a7 = 10;
      a8 = 24;
    }
    else
    {
      v358 = v891;
      v359 = (char *)ptr + 32 * HIDWORD(v880);
      *(_QWORD *)v359 = 0;
      a9 = v890;
      *(int8x16_t *)(v359 + 8) = v890;
      v360 = v359 + 24;
    }
    v361 = 0;
    *v360 = *v358;
    ++HIDWORD(v880);
LABEL_480:
    v886 |= v361;
    v362 = (WTF::StringImpl *)__dst;
    __dst = 0;
    if (v362)
    {
      if (*(_DWORD *)v362 == 2)
      {
        WTF::StringImpl::~StringImpl(v362, (WTF::AtomStringImpl *)v16, (uint64_t)v877, (uint64_t)&v876, a5, 3435973837, 10, 24);
        WTF::fastFree(v450, v451, v452, v453, v454, v455, v456, v457);
        a8 = 24;
        a7 = 10;
        a6 = 3435973837;
        a4 = (uint64_t)&v876;
        a3 = (uint64_t)v877;
        v20 = (int8x16_t *)v872;
        a5 = v873;
        v16 = (uint64_t)a1;
        v17 = v875;
      }
      else
      {
        *(_DWORD *)v362 -= 2;
      }
    }
    v862 = v862 & 0xFFFFFF0000000000 | 0x100000000;
    v888 = 0;
    LODWORD(v865) = 1;
LABEL_38:
    if (++v19 == v22)
    {
      if (v884)
      {
        __break(0xC471u);
        JUMPOUT(0x1988B0368);
      }
      if (v885 == 1)
      {
        a2 = v888;
        if (v888)
          goto LABEL_94;
        if (!HIDWORD(v880))
        {
          __break(0xC471u);
          JUMPOUT(0x1988B04F8);
        }
        goto LABEL_203;
      }
      goto LABEL_92;
    }
  }
  v12 = *(_QWORD *)(v16 + 56);
  if ((v23 & 0xFFFE000000000002) != 0)
  {
    if (v23 >= 0xFFFE000000000000)
    {
      if (v23 > 0xFF)
      {
        v74 = (_QWORD *)(v12 + 48368);
        v75 = 9 * ((~((_DWORD)v23 << 15) + v23) ^ ((~((_DWORD)v23 << 15) + v23) >> 10));
        v76 = (v75 ^ (v75 >> 6)) + ~((v75 ^ (v75 >> 6)) << 11);
        v77 = (v76 ^ BYTE2(v76));
        v78 = (_DWORD *)(v12 + 48368 + 24 * (v76 ^ BYTE2(v76)));
        if (*v78 != (_DWORD)v23 || (v79 = &v74[3 * v77], v80 = v79[1], v48 = (int **)(v79 + 1), !v80))
        {
          *v78 = v23;
          WTF::String::number(v23, (uint64_t *)&__dst);
          v213 = &v74[3 * v77];
          v214 = __dst;
          __dst = 0;
          v216 = (WTF::StringImpl *)v213[1];
          v48 = (int **)(v213 + 1);
          v215 = v216;
          *v48 = v214;
          if (v216)
          {
            if (*(_DWORD *)v215 == 2)
            {
              WTF::StringImpl::~StringImpl(v215, v206, v207, v208, v209, v210, v211, v212);
              WTF::fastFree(v434, v435, v436, v437, v438, v439, v440, v441);
            }
            else
            {
              *(_DWORD *)v215 -= 2;
            }
          }
          v217 = (WTF::StringImpl *)__dst;
          __dst = 0;
          v16 = (uint64_t)a1;
          v17 = v875;
          a5 = v873;
          v20 = (int8x16_t *)v872;
          a3 = (uint64_t)v877;
          a4 = (uint64_t)&v876;
          a6 = 3435973837;
          a7 = 10;
          a8 = 24;
          if (v217)
          {
            if (*(_DWORD *)v217 == 2)
            {
              WTF::StringImpl::~StringImpl(v217, a1, (uint64_t)v877, (uint64_t)&v876, v873, 3435973837, 10, 24);
              WTF::fastFree(v442, v443, v444, v445, v446, v447, v448, v449);
              a8 = 24;
              a7 = 10;
              a6 = 3435973837;
              a4 = (uint64_t)&v876;
              a3 = (uint64_t)v877;
              v20 = (int8x16_t *)v872;
              a5 = v873;
              v16 = (uint64_t)a1;
              v17 = v875;
            }
            else
            {
              *(_DWORD *)v217 -= 2;
            }
          }
          v74[3 * v77 + 2] = 0;
        }
      }
      else
      {
        v48 = (int **)(v12 + 16 * v23 + 44272);
        if (!*v48)
        {
          v9 = 0.0;
          do
          {
            v12 = (v23 % 0xA) | 0x30;
            v890.i8[(*(_QWORD *)&v9)-- + 4] = (v23 % 0xA) | 0x30;
            v514 = v23 > 9;
            LODWORD(v23) = v23 / 0xA;
          }
          while (v514);
          if (*(_QWORD *)&v9 + 14 >= 15)
            goto LABEL_937;
          if (v9 == 0.0)
          {
            v193 = &WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
          }
          else
          {
            if (-*(_QWORD *)&v9 >> 31)
            {
              __break(0xC471u);
              JUMPOUT(0x1988B0340);
            }
            LODWORD(v863) = -LODWORD(v9);
            v193 = (int *)WTF::fastCompactMalloc((WTF *)(20 - *(_QWORD *)&v9));
            v194 = v193 + 5;
            *v193 = 2;
            v193[1] = -LODWORD(v9);
            *((_QWORD *)v193 + 1) = v193 + 5;
            v193[4] = 4;
            if (v9 == NAN)
              *v194 = v12;
            else
              memcpy(v194, &v890.u8[*(_QWORD *)&v9 + 5], -*(_QWORD *)&v9);
            v16 = (uint64_t)a1;
            v17 = v875;
            a5 = v873;
            v20 = (int8x16_t *)v872;
            a3 = (uint64_t)v877;
            a4 = (uint64_t)&v876;
            a6 = 3435973837;
            a7 = 10;
            a8 = 24;
          }
          v195 = (WTF::StringImpl *)*v48;
          *v48 = v193;
          if (v195)
          {
            if (*(_DWORD *)v195 == 2)
            {
              WTF::StringImpl::~StringImpl(v195, (WTF::AtomStringImpl *)v16, (uint64_t)v877, (uint64_t)&v876, a5, 3435973837, 10, 24);
              WTF::fastFree(v417, v418, v419, v420, v421, v422, v423, v424);
              a8 = 24;
              a7 = 10;
              a6 = 3435973837;
              a4 = (uint64_t)&v876;
              a3 = (uint64_t)v877;
              v20 = (int8x16_t *)v872;
              a5 = v873;
              v16 = (uint64_t)a1;
              v17 = v875;
            }
            else
            {
              *(_DWORD *)v195 -= 2;
            }
          }
        }
      }
      if (v885 == -1)
        v884 = 1;
      ++v885;
      v49 = (WTF::StringImpl *)*v48;
      if (*v48)
        v50 = *((_DWORD *)v49 + 1);
      else
        v50 = 0;
      v529 = __CFADD__(v883, v50);
      v51 = v883 + v50;
      if (v529)
        v882 = 1;
      else
        v883 = v51;
      v52 = v869 & 0xFFFFFF0000000000;
      if (v49)
      {
        v53 = *((_QWORD *)v49 + 1);
        v54 = *((unsigned int *)v49 + 1) | ((unint64_t)((*((_DWORD *)v49 + 4) >> 2) & 1) << 32) | v52;
        *(_DWORD *)v49 += 2;
        v55 = v54;
      }
      else
      {
        v53 = 0;
        v55 = v52 | 0x100000000;
      }
      __dst = (int *)v49;
      v890.i64[0] = v53;
      v869 = v55;
      v890.i64[1] = v55;
      LOWORD(v891[0]) = 0;
      if (HIDWORD(v880) == (_DWORD)v880)
      {
        v186 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&ptr, (WTF::AtomStringImpl *)(HIDWORD(v880) + 1), (unint64_t)&__dst, (uint64_t)&v876, a5, 3435973837, 10, 24);
        if (!v186)
        {
          v59 = 1;
          v16 = (uint64_t)a1;
          v17 = v875;
          a5 = v873;
          v20 = (int8x16_t *)v872;
          a3 = (uint64_t)v877;
          a4 = (uint64_t)&v876;
          a6 = 3435973837;
          a7 = 10;
          a8 = 24;
          goto LABEL_62;
        }
        v187 = (char *)ptr + 32 * HIDWORD(v880);
        v188 = *(_QWORD *)v186;
        *(_QWORD *)v186 = 0;
        *(_QWORD *)v187 = v188;
        a9 = *(int8x16_t *)(v186 + 8);
        *(int8x16_t *)(v187 + 8) = a9;
        v58 = v187 + 24;
        v56 = (_WORD *)(v186 + 24);
        v16 = (uint64_t)a1;
        v17 = v875;
        a5 = v873;
        v20 = (int8x16_t *)v872;
        a3 = (uint64_t)v877;
        a4 = (uint64_t)&v876;
        a6 = 3435973837;
        a7 = 10;
        a8 = 24;
      }
      else
      {
        v56 = v891;
        v57 = (char *)ptr + 32 * HIDWORD(v880);
        __dst = 0;
        *(_QWORD *)v57 = v49;
        a9 = v890;
        *(int8x16_t *)(v57 + 8) = v890;
        v58 = v57 + 24;
      }
      v59 = 0;
      *v58 = *v56;
      ++HIDWORD(v880);
LABEL_62:
      v886 |= v59;
      v60 = (WTF::StringImpl *)__dst;
      __dst = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, (WTF::AtomStringImpl *)v16, (uint64_t)v877, (uint64_t)&v876, a5, 3435973837, 10, 24);
          WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
          a8 = 24;
          a7 = 10;
          a6 = 3435973837;
          a4 = (uint64_t)&v876;
          a3 = (uint64_t)v877;
          v20 = (int8x16_t *)v872;
          a5 = v873;
          v16 = (uint64_t)a1;
          v17 = v875;
        }
        else
        {
          *(_DWORD *)v60 -= 2;
        }
      }
      v888 = 0;
LABEL_37:
      if (*((_DWORD *)v17 + 20))
      {
        v222 = *((_DWORD *)v17 + 20);
        if ((v222 & 0x27) != 0 && (v222 & 0x20) == 0)
        {
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v17 + 64), 7u, (uint64_t)v877, (uint64_t)&v876, a5, 3435973837, 10, 24);
          a8 = 24;
          a7 = 10;
          a6 = 3435973837;
          a4 = (uint64_t)&v876;
          a3 = (uint64_t)v877;
          v20 = (int8x16_t *)v872;
          a5 = v873;
          v16 = (uint64_t)a1;
          v17 = v875;
        }
        if (*((_QWORD *)v17 + 2))
          goto LABEL_271;
      }
      goto LABEL_38;
    }
    *(_QWORD *)&v9 = v23 - 0x2000000000000;
    if (v23 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v13 = v23 - 0x2000000000000;
      if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_938;
      v694 = (int)v9;
      if ((double)(int)v694 != v9 || (*(_QWORD *)&v9 & 0x8000000000000000) != 0 && !(_DWORD)v694)
        goto LABEL_938;
      if (v694 > 0xFF)
      {
        v721 = (_QWORD *)(v12 + 48368);
        v722 = 9 * ((~((_DWORD)v694 << 15) + v694) ^ ((~((_DWORD)v694 << 15) + v694) >> 10));
        v723 = (v722 ^ (v722 >> 6)) + ~((v722 ^ (v722 >> 6)) << 11);
        v724 = (v723 ^ BYTE2(v723));
        v725 = (_DWORD *)(v12 + 48368 + 24 * (v723 ^ BYTE2(v723)));
        if (*v725 != (_DWORD)v694 || (v726 = &v721[3 * v724], v727 = v726[1], v695 = (int **)(v726 + 1), !v727))
        {
          *v725 = v694;
          WTF::String::number(v694, (uint64_t *)&__dst);
          v728 = &v721[3 * v724];
          v729 = __dst;
          __dst = 0;
          v731 = (WTF::StringImpl *)v728[1];
          v695 = (int **)(v728 + 1);
          v730 = v731;
          *v695 = v729;
          if (v731)
          {
            if (*(_DWORD *)v730 == 2)
            {
              WTF::StringImpl::~StringImpl(v730, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v768, v769, v770, v771, v772, v773, v774, v775);
            }
            else
            {
              *(_DWORD *)v730 -= 2;
            }
          }
          v776 = (WTF::StringImpl *)__dst;
          __dst = 0;
          if (v776)
          {
            if (*(_DWORD *)v776 == 2)
            {
              WTF::StringImpl::~StringImpl(v776, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v807, v808, v809, v810, v811, v812, v813, v814);
            }
            else
            {
              *(_DWORD *)v776 -= 2;
            }
          }
          v721[3 * v724 + 2] = 0;
        }
      }
      else
      {
        v695 = (int **)(v12 + 16 * v694 + 44272);
        if (!*v695)
        {
          WTF::String::number(v694, (uint64_t *)&__dst);
          v766 = __dst;
          __dst = 0;
          v767 = (WTF::StringImpl *)*v695;
          *v695 = v766;
          if (v767)
          {
            if (*(_DWORD *)v767 == 2)
            {
              WTF::StringImpl::~StringImpl(v767, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v798, v799, v800, v801, v802, v803, v804, v805);
            }
            else
            {
              *(_DWORD *)v767 -= 2;
            }
          }
          v806 = (WTF::StringImpl *)__dst;
          __dst = 0;
          if (v806)
          {
            if (*(_DWORD *)v806 == 2)
            {
              WTF::StringImpl::~StringImpl(v806, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v833, v834, v835, v836, v837, v838, v839, v840);
            }
            else
            {
              *(_DWORD *)v806 -= 2;
            }
          }
        }
      }
      if (v885 == -1)
        v884 = 1;
      ++v885;
      v696 = (WTF::StringImpl *)*v695;
      if (*v695)
        v697 = *((_DWORD *)v696 + 1);
      else
        v697 = 0;
      v529 = __CFADD__(v883, v697);
      v698 = v883 + v697;
      if (v529)
        v882 = 1;
      else
        v883 = v698;
      v699 = v857 & 0xFFFFFF0000000000;
      if (v696)
      {
        v700 = *((_QWORD *)v696 + 1);
        v857 = *((unsigned int *)v696 + 1) | ((unint64_t)((*((_DWORD *)v696 + 4) >> 2) & 1) << 32) | v699;
        *(_DWORD *)v696 += 2;
      }
      else
      {
        v700 = 0;
        v857 = v699 | 0x100000000;
      }
      __dst = (int *)v696;
      v890.i64[0] = v700;
      v701 = v857;
LABEL_933:
      v890.i64[1] = v701;
      LOWORD(v891[0]) = 0;
      if (HIDWORD(v880) != (_DWORD)v880)
      {
        v712 = (char *)ptr + 32 * HIDWORD(v880);
        __dst = 0;
        *(_QWORD *)v712 = v696;
        a9 = v890;
        *(int8x16_t *)(v712 + 8) = v890;
        *((_WORD *)v712 + 12) = v891[0];
        goto LABEL_744;
      }
    }
    else
    {
      if (v23 == 7)
      {
        if (v885 == -1)
          v884 = 1;
        v702 = *(_QWORD *)(v12 + 41952);
        ++v885;
        v696 = *(WTF::StringImpl **)(v702 + 432);
        if (v696)
          v703 = *((_DWORD *)v696 + 1);
        else
          v703 = 0;
        v529 = __CFADD__(v883, v703);
        v704 = v883 + v703;
        if (v529)
          v882 = 1;
        else
          v883 = v704;
        v705 = v859 & 0xFFFFFF0000000000;
        if (v696)
        {
          v706 = *((_QWORD *)v696 + 1);
          v859 = *((unsigned int *)v696 + 1) | ((unint64_t)((*((_DWORD *)v696 + 4) >> 2) & 1) << 32) | v705;
          *(_DWORD *)v696 += 2;
        }
        else
        {
          v706 = 0;
          v859 = v705 | 0x100000000;
        }
        __dst = (int *)v696;
        v890.i64[0] = v706;
        v701 = v859;
        goto LABEL_933;
      }
      if (v23 == 6)
      {
        if (v885 == -1)
          v884 = 1;
        v707 = *(_QWORD *)(v12 + 41952);
        ++v885;
        v696 = *(WTF::StringImpl **)(v707 + 248);
        if (v696)
          v708 = *((_DWORD *)v696 + 1);
        else
          v708 = 0;
        v529 = __CFADD__(v883, v708);
        v709 = v883 + v708;
        if (v529)
          v882 = 1;
        else
          v883 = v709;
        v710 = v860 & 0xFFFFFF0000000000;
        if (v696)
        {
          v711 = *((_QWORD *)v696 + 1);
          v860 = *((unsigned int *)v696 + 1) | ((unint64_t)((*((_DWORD *)v696 + 4) >> 2) & 1) << 32) | v710;
          *(_DWORD *)v696 += 2;
        }
        else
        {
          v711 = 0;
          v860 = v710 | 0x100000000;
        }
        __dst = (int *)v696;
        v890.i64[0] = v711;
        v701 = v860;
        goto LABEL_933;
      }
      if (v885 == -1)
        v884 = 1;
      ++v885;
      v890.i64[0] = 0;
      __dst = 0;
      v861 = v861 & 0xFFFFFF0000000000 | 0x100000000;
      v890.i64[1] = v861;
      LOWORD(v891[0]) = 0;
      if (HIDWORD(v880) != (_DWORD)v880)
      {
        v627 = (char *)ptr + 32 * HIDWORD(v880);
        *(_QWORD *)v627 = 0;
        a9 = v890;
        *(int8x16_t *)(v627 + 8) = v890;
        *((_WORD *)v627 + 12) = v891[0];
LABEL_744:
        ++HIDWORD(v880);
        v628 = 1;
LABEL_745:
        v886 |= !v628;
        v629 = (WTF::StringImpl *)__dst;
        __dst = 0;
        if (v629)
        {
          if (*(_DWORD *)v629 == 2)
          {
            WTF::StringImpl::~StringImpl(v629, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v656, v657, v658, v659, v660, v661, v662, v663);
          }
          else
          {
            *(_DWORD *)v629 -= 2;
          }
        }
        v888 = 0;
        v16 = (uint64_t)a1;
        v17 = v875;
        a5 = v873;
        v20 = (int8x16_t *)v872;
        a3 = (uint64_t)v877;
        a4 = (uint64_t)&v876;
        a6 = 3435973837;
        a7 = 10;
        a8 = 24;
        goto LABEL_37;
      }
    }
    v628 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)1,JSC::JSStringJoiner::Entry>((uint64_t)&ptr, (unint64_t)&__dst, a3, a4, a5, a6, a7, a8);
    goto LABEL_745;
  }
  if (*(_BYTE *)(v23 + 5) != 2)
    goto LABEL_276;
  v24 = *(_QWORD *)(v23 + 8);
  if ((v24 & 1) == 0)
  {
    if (v24)
    {
      v25 = *(unsigned int *)(v24 + 16);
      v26 = *(const char **)(v24 + 8);
      v24 = *(unsigned int *)(v24 + 4);
      v27 = (v25 >> 2) & 1;
    }
    else
    {
      v26 = 0;
      v27 = 1;
    }
    *(_QWORD *)&v9 = a2 & 0xFFFFFF0000000000 | v24 | (v27 << 32);
    v28 = *(_QWORD *)(v10 + 8 * v19);
    a2 = *(_QWORD *)&v9;
    goto LABEL_12;
  }
  if ((v24 & 2) == 0)
  {
    v71 = (unint64_t)*JSC::JSRopeString::resolveRope(*(_QWORD *)(v10 + 8 * v19), (JSC::JSGlobalObject *)v16, (uint64_t)v877, (uint64_t)&v876, a9, a5, 3435973837, 10, 24);
    if (v71)
    {
      v72 = *(unsigned int *)(v71 + 16);
      v26 = *(const char **)(v71 + 8);
      v71 = *(unsigned int *)(v71 + 4);
      v73 = (v72 >> 2) & 1;
    }
    else
    {
      v26 = 0;
      v73 = 1;
    }
    *(_QWORD *)&v9 = __n & 0xFFFFFF0000000000 | v71 | (v73 << 32);
    v28 = v23;
    __n = *(_QWORD *)&v9;
    v16 = (uint64_t)a1;
    v17 = v875;
    a5 = v873;
    v20 = (int8x16_t *)v872;
    a3 = (uint64_t)v877;
    a4 = (uint64_t)&v876;
    a6 = 3435973837;
    a7 = 10;
    a8 = 24;
    goto LABEL_12;
  }
  v28 = *(_QWORD *)(v23 + 20) & 0xFFFFFFFFFLL;
  v39 = v871 & 0xFFFFFF0000000000;
  v40 = *(_QWORD *)(v28 + 8);
  if (!v40)
  {
    v871 = v39 | 0x100000000;
    goto LABEL_72;
  }
  v41 = *(unsigned int *)(v40 + 4);
  v42 = ((unint64_t)*(unsigned int *)(v40 + 16) >> 2) & 1;
  v871 = v39 | (v42 << 32) | v41;
  v43 = *(_QWORD *)(v23 + 24);
  v44 = v43 >> 16;
  if (v41 <= (v43 >> 16))
  {
LABEL_72:
    *(_QWORD *)&v9 = 0x100000000;
    v26 = "";
    goto LABEL_12;
  }
  v26 = *(const char **)(v40 + 8);
  v45 = *(_DWORD *)(v23 + 16);
  if ((int)v41 - (int)v44 > v45 || (v45 = v41 - v44, (_DWORD)v44))
  {
    v46 = (v43 >> 16);
    *(_QWORD *)&v9 = v45;
    v47 = v41 - v44;
    if ((_DWORD)v42)
    {
      if (v47 < v45)
        goto LABEL_937;
      v26 += v46;
      *(_QWORD *)&v9 = v45 | 0x100000000;
    }
    else
    {
      if (v47 < v45)
        goto LABEL_937;
      v26 += 2 * v46;
    }
  }
  else
  {
    v9 = *(double *)&v871;
  }
LABEL_12:
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_13;
  v223 = *(_DWORD *)(v12 + 80);
  if ((v223 & 0x27) != 0 && (v223 & 0x20) == 0)
  {
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)v877, (uint64_t)&v876, a5, 3435973837, 10, 24);
    a8 = 24;
    a7 = 10;
    a6 = 3435973837;
    a4 = (uint64_t)&v876;
    a3 = (uint64_t)v877;
    v20 = (int8x16_t *)v872;
    a5 = v873;
    v16 = (uint64_t)a1;
    v17 = v875;
  }
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_13:
    v29 = *(WTF::StringImpl **)(v28 + 8);
    if ((v29 & 1) != 0)
    {
      v425 = JSC::JSRopeString::resolveRope(v28, 0, (uint64_t)v877, (uint64_t)&v876, a9, a5, 3435973837, 10, 24);
      a8 = 24;
      a7 = 10;
      a6 = 3435973837;
      a4 = (uint64_t)&v876;
      a3 = (uint64_t)v877;
      v20 = (int8x16_t *)v872;
      a5 = v873;
      v16 = (uint64_t)a1;
      v17 = v875;
      v29 = (WTF::StringImpl *)*v425;
    }
    if (v29)
      *(_DWORD *)v29 += 2;
    if (v885 == -1)
      v884 = 1;
    ++v885;
    if (v888 == v23)
    {
      if (!HIDWORD(v880))
      {
        __break(0xC471u);
        JUMPOUT(0x1988B0348);
      }
      v68 = (char *)ptr + 32 * HIDWORD(v880) - 32;
      v30 = v883;
      if (*((unsigned __int16 *)v68 + 12) != 0xFFFF)
      {
        ++*((_WORD *)v68 + 12);
        v69 = *((_DWORD *)v68 + 4);
        v529 = __CFADD__(v30, v69);
        v70 = v30 + v69;
        if (v529)
          v882 = 1;
        else
          v883 = v70;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
          {
            WTF::StringImpl::~StringImpl(v29, (WTF::AtomStringImpl *)v16, (uint64_t)v877, (uint64_t)&v876, a5, 3435973837, 10, 24);
            WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
            a8 = 24;
            a7 = 10;
            a6 = 3435973837;
            a4 = (uint64_t)&v876;
            a3 = (uint64_t)v877;
            v20 = (int8x16_t *)v872;
            a5 = v873;
            v16 = (uint64_t)a1;
            v17 = v875;
          }
          else
          {
            *(_DWORD *)v29 -= 2;
          }
        }
        goto LABEL_36;
      }
    }
    else
    {
      v30 = v883;
    }
    v529 = __CFADD__(v30, LODWORD(v9));
    v31 = v30 + LODWORD(v9);
    if (v529)
      v882 = 1;
    else
      v883 = v31;
    v33 = (*(_QWORD *)&v9 & 0xFF00000000) != 0 && v887 != 0;
    v887 = v33;
    __dst = (int *)v29;
    v890.i64[0] = (uint64_t)v26;
    *(double *)&v890.i64[1] = v9;
    LOWORD(v891[0]) = 0;
    if (HIDWORD(v880) == (_DWORD)v880)
    {
      v81 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&ptr, (WTF::AtomStringImpl *)(HIDWORD(v880) + 1), (unint64_t)&__dst, (uint64_t)&v876, a5, 3435973837, 10, 24);
      if (!v81)
      {
        v37 = 1;
        v16 = (uint64_t)a1;
        v17 = v875;
        a5 = v873;
        v20 = (int8x16_t *)v872;
        a3 = (uint64_t)v877;
        a4 = (uint64_t)&v876;
        a6 = 3435973837;
        a7 = 10;
        a8 = 24;
LABEL_32:
        v886 |= v37;
        v38 = (unint64_t)__dst;
        __dst = 0;
        if (!v38)
        {
LABEL_35:
          v888 = v23;
LABEL_36:
          v877[0] = v28;
          v876 = v28;
          goto LABEL_37;
        }
        if (*(_DWORD *)v38 != 2)
        {
          *(_DWORD *)v38 -= 2;
          goto LABEL_35;
        }
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v38, (WTF::AtomStringImpl *)v16, (uint64_t)v877, (uint64_t)&v876, a5, 3435973837, 10, 24);
        v66 = *(_QWORD *)(StatusReg + 752);
        if (v66)
        {
          if (!(v38 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v38 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v38)) & 1) != 0)
          {
            goto LABEL_69;
          }
          if (v38 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v38 >> 24)
          {
            v61 = 0;
          }
          else
          {
            v61 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v38 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v38) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v61 == 1)
            {
LABEL_69:
              v67 = *(unsigned int *)(v66 + 8000);
              if (v67 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v66, v38, (os_unfair_lock_s *)5, v61, v62, v63, v64, v65);
              }
              else
              {
                *(_QWORD *)(v66 + 8 * v67) = v38 | 0x5000000000000;
                *(_DWORD *)(v66 + 8000) = v67 + 1;
              }
              goto LABEL_71;
            }
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v66, v38, 1, v61, v62, v63, v64, v65);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v38, (uint64_t)&bmalloc_heap_config, 1);
        }
LABEL_71:
        v16 = (uint64_t)a1;
        v17 = v875;
        a5 = v873;
        v20 = (int8x16_t *)v872;
        a3 = (uint64_t)v877;
        a4 = (uint64_t)&v876;
        a6 = 3435973837;
        a7 = 10;
        a8 = 24;
        goto LABEL_35;
      }
      v82 = (char *)ptr + 32 * HIDWORD(v880);
      v83 = *(_QWORD *)v81;
      *(_QWORD *)v81 = 0;
      *(_QWORD *)v82 = v83;
      a9 = *(int8x16_t *)(v81 + 8);
      *(int8x16_t *)(v82 + 8) = a9;
      v35 = v82 + 24;
      v36 = (_WORD *)(v81 + 24);
      v16 = (uint64_t)a1;
      v17 = v875;
      a5 = v873;
      v20 = (int8x16_t *)v872;
      a3 = (uint64_t)v877;
      a4 = (uint64_t)&v876;
      a6 = 3435973837;
      a7 = 10;
      a8 = 24;
    }
    else
    {
      v34 = (char *)ptr + 32 * HIDWORD(v880);
      __dst = 0;
      *(_QWORD *)v34 = v29;
      a9 = *v20;
      *(int8x16_t *)(v34 + 8) = *v20;
      v35 = v34 + 24;
      v36 = (_WORD *)v21;
    }
    v37 = 0;
    *v35 = *v36;
    ++HIDWORD(v880);
    goto LABEL_32;
  }
  v877[1] = v28;
LABEL_276:
  a2 = (uint64_t)v870;
LABEL_277:
  v14 = (_BYTE *)v868;
LABEL_278:
  *v14 = 1;
  if (v19 >= a5)
    goto LABEL_420;
  v9 = NAN;
  v873 = &v890;
  v12 = (unint64_t)v891;
  v869 = v16 + 512;
  v10 = v19;
  v871 = a5;
  while (2)
  {
    v224 = *(_QWORD *)(a2 + 8);
    if ((*(_BYTE *)(a2 + 4) & 0xFu) - 8 < 2)
    {
LABEL_281:
      if (v10 < *(unsigned int *)(v224 - 8))
      {
        v225 = *(_QWORD *)(v224 + 8 * v10);
LABEL_283:
        if (v225)
          goto LABEL_284;
      }
      goto LABEL_370;
    }
    switch(*(_BYTE *)(a2 + 4) & 0xF)
    {
      case 0:
      case 1:
        switch(*(_BYTE *)(a2 + 5))
        {
          case '\'':
          case '(':
            v568 = *(_BYTE *)(a2 + 40);
            if ((v568 & 7u) <= 2)
              goto LABEL_636;
            v569 = *(_QWORD *)(v224 - 8);
            if (*(_BYTE *)(v569 + 64) && (v692 = *(_QWORD *)(v569 + 32)) != 0)
              v570 = *(_QWORD *)(v692 + 32);
            else
              v570 = *(_QWORD *)(v569 + 48);
            a2 = (uint64_t)v870;
            v528 = *((_QWORD *)v870 + 3);
            v571 = *((_QWORD *)v870 + 4);
            v16 = (uint64_t)a1;
            v9 = NAN;
            if (v528 + v571 > v570)
              goto LABEL_370;
            if ((v568 & 1) == 0)
              goto LABEL_727;
            v514 = v570 - v571 > v10;
            goto LABEL_728;
          case ')':
            v632 = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(a2, v10);
            v16 = (uint64_t)a1;
            if (!v632)
              goto LABEL_370;
            goto LABEL_516;
          case '*':
          case '+':
            v524 = *(_BYTE *)(a2 + 40);
            if ((v524 & 7u) <= 2)
              goto LABEL_636;
            v525 = *(_QWORD *)(v224 - 8);
            if (*(_BYTE *)(v525 + 64) && (v690 = *(_QWORD *)(v525 + 32)) != 0)
              v526 = *(_QWORD *)(v690 + 32);
            else
              v526 = *(_QWORD *)(v525 + 48);
            a2 = (uint64_t)v870;
            v528 = *((_QWORD *)v870 + 3);
            v527 = *((_QWORD *)v870 + 4);
            v16 = (uint64_t)a1;
            v9 = NAN;
            if (v527 + 2 * v528 > v526)
              goto LABEL_370;
            if ((v524 & 1) == 0)
              goto LABEL_727;
            v529 = v10 >= (v526 - v527) >> 1;
            goto LABEL_792;
          case ',':
          case '-':
            v387 = *(_BYTE *)(a2 + 40);
            if ((v387 & 7u) <= 2)
              goto LABEL_636;
            goto LABEL_723;
          case '.':
            v387 = *(_BYTE *)(a2 + 40);
            if ((v387 & 7u) <= 2)
            {
              if (*(_QWORD *)(a2 + 24) <= v10)
                goto LABEL_370;
              goto LABEL_516;
            }
LABEL_723:
            v620 = *(_QWORD *)(v224 - 8);
            if (*(_BYTE *)(v620 + 64) && (v689 = *(_QWORD *)(v620 + 32)) != 0)
              v621 = *(_QWORD *)(v689 + 32);
            else
              v621 = *(_QWORD *)(v620 + 48);
            a2 = (uint64_t)v870;
            v528 = *((_QWORD *)v870 + 3);
            v622 = *((_QWORD *)v870 + 4);
            v16 = (uint64_t)a1;
            v9 = NAN;
            if (v622 + 4 * v528 > v621)
              goto LABEL_370;
            if ((v387 & 1) == 0)
              goto LABEL_727;
            v529 = v10 >= (v621 - v622) >> 2;
            goto LABEL_792;
          case '/':
            v556 = *(_BYTE *)(a2 + 40);
            if ((v556 & 7u) <= 2)
            {
LABEL_636:
              a2 = (uint64_t)v870;
              v514 = *((_QWORD *)v870 + 3) > v10;
              v16 = (uint64_t)a1;
              v9 = NAN;
              goto LABEL_637;
            }
            v557 = *(_QWORD *)(v224 - 8);
            if (*(_BYTE *)(v557 + 64) && (v691 = *(_QWORD *)(v557 + 32)) != 0)
              v558 = *(_QWORD *)(v691 + 32);
            else
              v558 = *(_QWORD *)(v557 + 48);
            a2 = (uint64_t)v870;
            v528 = *((_QWORD *)v870 + 3);
            v559 = *((_QWORD *)v870 + 4);
            v16 = (uint64_t)a1;
            v9 = NAN;
            if (v559 + 8 * v528 > v558)
              goto LABEL_370;
            if ((v556 & 1) == 0)
            {
LABEL_727:
              v514 = v528 > v10;
LABEL_728:
              v16 = (uint64_t)a1;
              a2 = (uint64_t)v870;
LABEL_637:
              if (v514)
                goto LABEL_516;
              goto LABEL_370;
            }
            v529 = v10 >= (v558 - v559) >> 3;
LABEL_792:
            v16 = (uint64_t)a1;
            a2 = (uint64_t)v870;
            if (!v529)
            {
LABEL_516:
              IndexQuicklyForTypedArray = JSC::JSObject::getIndexQuicklyForTypedArray(a2, v10, 0);
              v16 = (uint64_t)a1;
              v17 = v875;
              v225 = IndexQuicklyForTypedArray;
              goto LABEL_283;
            }
LABEL_370:
            v263 = *(_QWORD *)(v16 + 56);
            v890.i64[1] = 0xFFFFFFFF00000000;
            LOBYTE(v892) = 0;
            v893 = 0;
            v895 = 0;
            v894 = 0;
            v891[0] = a2;
            memset(&v891[1], 0, 21);
            v19 = v263 + 64;
            v264 = a2;
            while (1)
            {
              v265 = 16 * (*(_DWORD *)v264 & 0xFFFFFFFE);
              v266 = (*(uint64_t (**)(uint64_t))(16 * *(unsigned int *)(v265 + 0x4C) + 0x70))(v264);
              v267 = v266;
              if (*(_DWORD *)(v263 + 80))
                break;
              v16 = (uint64_t)a1;
              v17 = v875;
              if ((v266 & 1) != 0)
              {
                if (!*(_DWORD *)(v263 + 80))
                  goto LABEL_382;
                LOBYTE(v323) = 1;
LABEL_651:
                v522 = *(_DWORD *)(v263 + 80);
                if ((v522 & 0x27) != 0 && (v522 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v263 + 64), 7u, a3, a4, a5, a6, a7, a8);
                if (*(_QWORD *)(v263 + 16))
                  v523 = 0;
                else
                  v523 = v323;
                v16 = (uint64_t)a1;
                v17 = v875;
                a2 = (uint64_t)v870;
                v9 = NAN;
                if ((v523 & 1) == 0)
                  goto LABEL_451;
                goto LABEL_382;
              }
LABEL_373:
              if (BYTE2(v891[3]) == 3)
              {
                if (BYTE4(v891[3]))
                {
                  v323 = 0;
                  v16 = (uint64_t)a1;
                  a2 = (uint64_t)v870;
                  v9 = NAN;
                  goto LABEL_449;
                }
                v268 = *(unsigned __int8 *)(v264 + 5);
                v16 = (uint64_t)a1;
                a2 = (uint64_t)v870;
                v9 = NAN;
                if (v268 != 61)
                {
LABEL_375:
                  if ((v268 - 39) <= 0xA)
                  {
                    v671 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v264, v16, a3, a4, a5, a6, a7, a8);
                    v16 = (uint64_t)a1;
                    if (v671 <= v10)
                      goto LABEL_448;
                  }
                }
              }
              else
              {
                v268 = *(unsigned __int8 *)(v264 + 5);
                if (v268 != 61)
                  goto LABEL_375;
                if (BYTE2(v891[3]) == 1)
                  goto LABEL_448;
              }
              if ((*(_WORD *)(v265 + 12) & 0x800) == 0 || BYTE2(v891[3]) == 3)
              {
                v269 = *(_QWORD *)(16 * (*(_DWORD *)v264 & 0xFFFFFFFE) + 0x30);
                if (!v269)
                  v269 = *(_QWORD *)(v264 + 16);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v264 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v269 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)v264 & 0xFFFFFFFE) + 0x4C)
                                                                                   + 0xB0))(v264, a1);
                }
                else
                {
                  v269 = *(_QWORD *)(16 * (*(_DWORD *)v264 & 0xFFFFFFFE) + 0x30);
                  if (!v269)
                    v269 = *(_QWORD *)(v264 + 16);
                }
                if (*(_DWORD *)(v263 + 80))
                {
                  v693 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v263, v16, a3, a4, a5, a6, a7, a8);
                  v16 = (uint64_t)a1;
                  a2 = (uint64_t)v870;
                  v9 = NAN;
                  if (v693)
                    goto LABEL_448;
                }
                else
                {
                  v16 = (uint64_t)a1;
                  a2 = (uint64_t)v870;
                  v9 = NAN;
                }
              }
              if ((v269 & 0xFFFE000000000002) == 0)
              {
                v264 = v269;
                if (*(unsigned __int8 *)(v269 + 5) > 0x16u)
                  continue;
              }
LABEL_448:
              v323 = 0;
              goto LABEL_449;
            }
            v518 = *(_DWORD *)(v263 + 80);
            if ((v518 & 0x27) != 0 && (v518 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v263 + 64), 7u, a3, a4, a5, a6, a7, a8);
            v519 = *(_QWORD *)(v263 + 16);
            v520 = v519 == 0;
            if (v519)
              v521 = 1;
            else
              v521 = v267;
            v16 = (uint64_t)a1;
            a2 = (uint64_t)v870;
            v9 = NAN;
            if ((v521 & 1) == 0)
              goto LABEL_373;
            v323 = v520;
LABEL_449:
            if (*(_DWORD *)(v263 + 80))
              goto LABEL_651;
            v17 = v875;
            if (!v323)
            {
LABEL_451:
              v225 = 10;
              goto LABEL_384;
            }
LABEL_382:
            if (BYTE1(v891[3]) == 1)
            {
              v225 = (unint64_t)__dst;
            }
            else
            {
              if (BYTE1(v891[3]) == 2)
              {
                v619 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&__dst, a1, a3, a4, a5, a6, a7, a8);
                v16 = (uint64_t)a1;
                v225 = v619;
              }
              else
              {
                v664 = (uint64_t **)*((_QWORD *)a1 + 7);
                JSC::Identifier::from(v664, v10, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)__s);
                v225 = JSC::PropertySlot::customGetter((uint64_t)&__dst, (JSC::VM *)v664, *(WTF::StringImpl **)__s);
                v666 = *(WTF::StringImpl **)__s;
                *(_QWORD *)__s = 0;
                if (v666)
                {
                  if (*(_DWORD *)v666 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v666, v665, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v672, v673, v674, v675, v676, v677, v678, v679);
                  }
                  else
                  {
                    *(_DWORD *)v666 -= 2;
                  }
                }
                v16 = (uint64_t)a1;
              }
              v17 = v875;
              a2 = (uint64_t)v870;
              v9 = NAN;
            }
LABEL_384:
            if (v893)
            {
              v270 = *(_DWORD *)(v892 + 4);
              if (!v270)
              {
                __break(0xC471u);
                JUMPOUT(0x1988AF884);
              }
              *(_DWORD *)(v892 + 4) = v270 - 1;
            }
LABEL_284:
            if (*((_DWORD *)v17 + 20))
            {
              v493 = *((_DWORD *)v17 + 20);
              if ((v493 & 0x27) != 0 && (v493 & 0x20) == 0)
              {
                JSC::VMTraps::handleTraps((JSC::VM *)((char *)v17 + 64), 7u, a3, a4, a5, a6, a7, a8);
                v16 = (uint64_t)a1;
                v17 = v875;
              }
              if (*((_QWORD *)v17 + 2))
              {
LABEL_271:
                a2 = 0;
                goto LABEL_94;
              }
            }
            v226 = *(_QWORD *)(v16 + 56);
            if ((v225 & 0xFFFE000000000002) != 0)
            {
              if (v225 >= 0xFFFE000000000000)
              {
                if (v225 > 0xFF)
                {
                  v332 = v226 + 48368;
                  v333 = 9 * ((~((_DWORD)v225 << 15) + v225) ^ ((~((_DWORD)v225 << 15) + v225) >> 10));
                  v334 = (v333 ^ (v333 >> 6)) + ~((v333 ^ (v333 >> 6)) << 11);
                  v335 = (v334 ^ BYTE2(v334));
                  v336 = (_DWORD *)(v226 + 48368 + 24 * (v334 ^ BYTE2(v334)));
                  if (*v336 != (_DWORD)v225
                    || (v337 = v332 + 24 * v335, v338 = *(_QWORD *)(v337 + 8), v22 = v337 + 8, !v338))
                  {
                    *v336 = v225;
                    WTF::String::number(v225, (uint64_t *)&__dst);
                    v488 = v332 + 24 * v335;
                    v489 = __dst;
                    __dst = 0;
                    v491 = *(WTF::StringImpl **)(v488 + 8);
                    v22 = v488 + 8;
                    v490 = v491;
                    *(_QWORD *)v22 = v489;
                    if (v491)
                    {
                      if (*(_DWORD *)v490 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v490, v487, a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v540, v541, v542, v543, v544, v545, v546, v547);
                      }
                      else
                      {
                        *(_DWORD *)v490 -= 2;
                      }
                    }
                    v492 = (WTF::StringImpl *)__dst;
                    __dst = 0;
                    v16 = (uint64_t)a1;
                    v17 = v875;
                    if (v492)
                    {
                      if (*(_DWORD *)v492 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v492, a1, a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v548, v549, v550, v551, v552, v553, v554, v555);
                        v16 = (uint64_t)a1;
                        v17 = v875;
                      }
                      else
                      {
                        *(_DWORD *)v492 -= 2;
                      }
                    }
                    *(_QWORD *)(v332 + 24 * v335 + 16) = 0;
                  }
                  a2 = (uint64_t)v870;
                }
                else
                {
                  v22 = v226 + 16 * v225 + 44272;
                  if (!*(_QWORD *)v22)
                  {
                    v21 = 0;
                    v466 = v225;
                    do
                    {
                      a2 = (v466 % 0xA) | 0x30;
                      v890.i8[v21-- + 4] = (v466 % 0xA) | 0x30;
                      v514 = v466 > 9;
                      v466 /= 0xAu;
                    }
                    while (v514);
                    if ((uint64_t)(v21 + 14) >= 15)
                      goto LABEL_937;
                    if (v21)
                    {
                      if ((unint64_t)-(uint64_t)v21 >> 31)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1988B03C4);
                      }
                      v19 = WTF::fastCompactMalloc((WTF *)(20 - v21));
                      v467 = (_BYTE *)(v19 + 20);
                      *(_DWORD *)v19 = 2;
                      *(_DWORD *)(v19 + 4) = -(int)v21;
                      *(_QWORD *)(v19 + 8) = v19 + 20;
                      *(_DWORD *)(v19 + 16) = 4;
                      if (v21 == -1)
                        *v467 = a2;
                      else
                        memcpy(v467, &v890.u8[v21 + 5], -(uint64_t)v21);
                      v16 = (uint64_t)a1;
                      v17 = v875;
                      v9 = NAN;
                    }
                    else
                    {
                      v19 = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
                      WTF::StringImpl::s_emptyAtomString += 2;
                    }
                    v468 = *(WTF::StringImpl **)v22;
                    *(_QWORD *)v22 = v19;
                    a2 = (uint64_t)v870;
                    if (v468)
                    {
                      if (*(_DWORD *)v468 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v468, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v531, v532, v533, v534, v535, v536, v537, v538);
                        v16 = (uint64_t)a1;
                        v17 = v875;
                      }
                      else
                      {
                        *(_DWORD *)v468 -= 2;
                      }
                    }
                  }
                }
                if (v885 == -1)
                  v884 = 1;
                ++v885;
                v295 = *(WTF::StringImpl **)v22;
                if (*(_QWORD *)v22)
                  v296 = *((_DWORD *)v295 + 1);
                else
                  v296 = 0;
                v529 = __CFADD__(v883, v296);
                v297 = v883 + v296;
                if (v529)
                  v882 = 1;
                else
                  v883 = v297;
                v298 = v865 & 0xFFFFFF0000000000;
                if (v295)
                {
                  v299 = *((_QWORD *)v295 + 1);
                  v300 = *((unsigned int *)v295 + 1) | ((unint64_t)((*((_DWORD *)v295 + 4) >> 2) & 1) << 32) | v298;
                  *(_DWORD *)v295 += 2;
                }
                else
                {
                  v299 = 0;
                  v300 = v298 | 0x100000000;
                }
                __dst = (int *)v295;
                v890.i64[0] = v299;
                v890.i64[1] = v300;
                LOWORD(v891[0]) = 0;
                if (HIDWORD(v880) != (_DWORD)v880)
                {
                  v301 = v891;
                  v302 = (char *)ptr + 32 * HIDWORD(v880);
                  __dst = 0;
                  *(_QWORD *)v302 = v295;
                  a9 = v890;
                  *(int8x16_t *)(v302 + 8) = v890;
                  v303 = v302 + 24;
                  goto LABEL_412;
                }
                v376 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&ptr, (WTF::AtomStringImpl *)(HIDWORD(v880) + 1), (unint64_t)&__dst, a4, a5, a6, a7, a8);
                if (v376)
                {
                  v377 = (char *)ptr + 32 * HIDWORD(v880);
                  v378 = *(_QWORD *)v376;
                  *(_QWORD *)v376 = 0;
                  *(_QWORD *)v377 = v378;
                  a9 = *(int8x16_t *)(v376 + 8);
                  *(int8x16_t *)(v377 + 8) = a9;
                  v303 = v377 + 24;
                  v301 = (_WORD *)(v376 + 24);
                  v16 = (uint64_t)a1;
                  v17 = v875;
LABEL_412:
                  v304 = 0;
                  *v303 = *v301;
                  ++HIDWORD(v880);
                }
                else
                {
                  v304 = 1;
                  v16 = (uint64_t)a1;
                  v17 = v875;
                }
                v886 |= v304;
                v305 = (WTF::StringImpl *)__dst;
                __dst = 0;
                if (v305)
                {
                  if (*(_DWORD *)v305 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v305, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v342, v343, v344, v345, v346, v347, v348, v349);
                    v16 = (uint64_t)a1;
                    v17 = v875;
                  }
                  else
                  {
                    *(_DWORD *)v305 -= 2;
                  }
                }
                v865 = v300;
                v888 = 0;
                v242 = 1;
                goto LABEL_323;
              }
              *(_QWORD *)&v667 = v225 - 0x2000000000000;
              if (v225 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
              {
                *(_QWORD *)&v13 = v225 - 0x2000000000000;
                if ((*(_QWORD *)&v667 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                  && (v732 = (int)v667, (double)(int)v732 == v667)
                  && ((*(_QWORD *)&v667 & 0x8000000000000000) == 0 || (_DWORD)v732))
                {
                  if (v732 > 0xFF)
                  {
                    v777 = v226 + 48368;
                    v778 = 9 * ((~((_DWORD)v732 << 15) + v732) ^ ((~((_DWORD)v732 << 15) + v732) >> 10));
                    v779 = (v778 ^ (v778 >> 6)) + ~((v778 ^ (v778 >> 6)) << 11);
                    v780 = (v779 ^ BYTE2(v779));
                    v781 = (_DWORD *)(v226 + 48368 + 24 * (v779 ^ BYTE2(v779)));
                    if (*v781 != (_DWORD)v732
                      || (v782 = v777 + 24 * v780, v783 = *(_QWORD *)(v782 + 8), v733 = (int **)(v782 + 8), !v783))
                    {
                      *v781 = v732;
                      WTF::String::number(v732, (uint64_t *)&__dst);
                      v784 = v777 + 24 * v780;
                      v785 = __dst;
                      __dst = 0;
                      v787 = *(WTF::StringImpl **)(v784 + 8);
                      v733 = (int **)(v784 + 8);
                      v786 = v787;
                      *v733 = v785;
                      if (v787)
                      {
                        if (*(_DWORD *)v786 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v786, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v815, v816, v817, v818, v819, v820, v821, v822);
                        }
                        else
                        {
                          *(_DWORD *)v786 -= 2;
                        }
                      }
                      v823 = (WTF::StringImpl *)__dst;
                      __dst = 0;
                      if (v823)
                      {
                        if (*(_DWORD *)v823 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v823, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v841, v842, v843, v844, v845, v846, v847, v848);
                        }
                        else
                        {
                          *(_DWORD *)v823 -= 2;
                        }
                      }
                      *(_QWORD *)(v777 + 24 * v780 + 16) = 0;
                    }
                  }
                  else
                  {
                    v733 = (int **)(v226 + 16 * v732 + 44272);
                    if (!*v733)
                    {
                      WTF::String::number(v732, (uint64_t *)&__dst);
                      v788 = __dst;
                      __dst = 0;
                      v789 = (WTF::StringImpl *)*v733;
                      *v733 = v788;
                      if (v789)
                      {
                        if (*(_DWORD *)v789 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v789, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v824, v825, v826, v827, v828, v829, v830, v831);
                        }
                        else
                        {
                          *(_DWORD *)v789 -= 2;
                        }
                      }
                      v832 = (WTF::StringImpl *)__dst;
                      __dst = 0;
                      if (v832)
                      {
                        if (*(_DWORD *)v832 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v832, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v849, v850, v851, v852, v853, v854, v855, v856);
                        }
                        else
                        {
                          *(_DWORD *)v832 -= 2;
                        }
                      }
                    }
                  }
                  if (v885 == -1)
                    v884 = 1;
                  ++v885;
                  v734 = (WTF::StringImpl *)*v733;
                  if (*v733)
                    v735 = *((_DWORD *)v734 + 1);
                  else
                    v735 = 0;
                  v529 = __CFADD__(v883, v735);
                  v736 = v883 + v735;
                  if (v529)
                    v882 = 1;
                  else
                    v883 = v736;
                  v737 = v858 & 0xFFFFFF0000000000;
                  if (v734)
                  {
                    v738 = *((_QWORD *)v734 + 1);
                    v858 = *((unsigned int *)v734 + 1) | ((unint64_t)((*((_DWORD *)v734 + 4) >> 2) & 1) << 32) | v737;
                    *(_DWORD *)v734 += 2;
                  }
                  else
                  {
                    v738 = 0;
                    v858 = v737 | 0x100000000;
                  }
                  __dst = (int *)v734;
                  v890.i64[0] = v738;
                  v739 = v858;
                }
                else
                {
                  v759 = JSC::NumericStrings::lookup((JSC::NumericStrings *)(v226 + 44272), COERCE_DOUBLE(v225 - 0x2000000000000));
                  v19 = v759;
                  if (*(double *)v759 != v667 || *(_QWORD *)(v759 + 8) == 0)
                  {
                    *(double *)v759 = v667;
                    WTF::String::number(COERCE_DOUBLE(v225 - 0x2000000000000), &__dst);
                    v761 = *(WTF::StringImpl **)(v19 + 8);
                    *(_QWORD *)(v19 + 8) = __dst;
                    if (v761)
                    {
                      if (*(_DWORD *)v761 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v761, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v790, v791, v792, v793, v794, v795, v796, v797);
                      }
                      else
                      {
                        *(_DWORD *)v761 -= 2;
                      }
                    }
                    *(_QWORD *)(v19 + 16) = 0;
                  }
                  if (v885 == -1)
                    v884 = 1;
                  ++v885;
                  v734 = *(WTF::StringImpl **)(v19 + 8);
                  if (v734)
                    v762 = *((_DWORD *)v734 + 1);
                  else
                    v762 = 0;
                  v529 = __CFADD__(v883, v762);
                  v763 = v883 + v762;
                  if (v529)
                    v882 = 1;
                  else
                    v883 = v763;
                  v764 = v859 & 0xFFFFFF0000000000;
                  if (v734)
                  {
                    v765 = *((_QWORD *)v734 + 1);
                    v859 = *((unsigned int *)v734 + 1) | ((unint64_t)((*((_DWORD *)v734 + 4) >> 2) & 1) << 32) | v764;
                    *(_DWORD *)v734 += 2;
                  }
                  else
                  {
                    v765 = 0;
                    v859 = v764 | 0x100000000;
                  }
                  __dst = (int *)v734;
                  v890.i64[0] = v765;
                  v739 = v859;
                }
              }
              else if (v225 == 7)
              {
                if (v885 == -1)
                  v884 = 1;
                v740 = *(_QWORD *)(v226 + 41952);
                ++v885;
                v734 = *(WTF::StringImpl **)(v740 + 432);
                if (v734)
                  v741 = *((_DWORD *)v734 + 1);
                else
                  v741 = 0;
                v529 = __CFADD__(v883, v741);
                v742 = v883 + v741;
                if (v529)
                  v882 = 1;
                else
                  v883 = v742;
                v743 = v860 & 0xFFFFFF0000000000;
                if (v734)
                {
                  v744 = *((_QWORD *)v734 + 1);
                  v860 = *((unsigned int *)v734 + 1) | ((unint64_t)((*((_DWORD *)v734 + 4) >> 2) & 1) << 32) | v743;
                  *(_DWORD *)v734 += 2;
                }
                else
                {
                  v744 = 0;
                  v860 = v743 | 0x100000000;
                }
                __dst = (int *)v734;
                v890.i64[0] = v744;
                v739 = v860;
              }
              else
              {
                if (v225 != 6)
                {
                  if (v885 == -1)
                    v884 = 1;
                  ++v885;
                  v890.i64[0] = 0;
                  __dst = 0;
                  v862 = v862 & 0xFFFFFF0000000000 | 0x100000000;
                  v890.i64[1] = v862;
                  LOWORD(v891[0]) = 0;
                  if (HIDWORD(v880) != (_DWORD)v880)
                  {
                    v668 = (char *)ptr + 32 * HIDWORD(v880);
                    *(_QWORD *)v668 = 0;
                    a9 = v890;
                    *(int8x16_t *)(v668 + 8) = v890;
                    *((_WORD *)v668 + 12) = v891[0];
                    goto LABEL_813;
                  }
LABEL_996:
                  v669 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)1,JSC::JSStringJoiner::Entry>((uint64_t)&ptr, (unint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                  goto LABEL_814;
                }
                if (v885 == -1)
                  v884 = 1;
                v745 = *(_QWORD *)(v226 + 41952);
                ++v885;
                v734 = *(WTF::StringImpl **)(v745 + 248);
                if (v734)
                  v746 = *((_DWORD *)v734 + 1);
                else
                  v746 = 0;
                v529 = __CFADD__(v883, v746);
                v747 = v883 + v746;
                if (v529)
                  v882 = 1;
                else
                  v883 = v747;
                v748 = v861 & 0xFFFFFF0000000000;
                if (v734)
                {
                  v749 = *((_QWORD *)v734 + 1);
                  v861 = *((unsigned int *)v734 + 1) | ((unint64_t)((*((_DWORD *)v734 + 4) >> 2) & 1) << 32) | v748;
                  *(_DWORD *)v734 += 2;
                }
                else
                {
                  v749 = 0;
                  v861 = v748 | 0x100000000;
                }
                __dst = (int *)v734;
                v890.i64[0] = v749;
                v739 = v861;
              }
              v890.i64[1] = v739;
              LOWORD(v891[0]) = 0;
              if (HIDWORD(v880) == (_DWORD)v880)
                goto LABEL_996;
              v750 = (char *)ptr + 32 * HIDWORD(v880);
              __dst = 0;
              *(_QWORD *)v750 = v734;
              a9 = v890;
              *(int8x16_t *)(v750 + 8) = v890;
              *((_WORD *)v750 + 12) = v891[0];
LABEL_813:
              ++HIDWORD(v880);
              v669 = 1;
LABEL_814:
              v886 |= !v669;
              v670 = (WTF::StringImpl *)__dst;
              __dst = 0;
              if (v670)
              {
                if (*(_DWORD *)v670 == 2)
                {
                  WTF::StringImpl::~StringImpl(v670, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v681, v682, v683, v684, v685, v686, v687, v688);
                }
                else
                {
                  *(_DWORD *)v670 -= 2;
                }
              }
              v888 = 0;
              v242 = 1;
              v16 = (uint64_t)a1;
              v17 = v875;
              a2 = (uint64_t)v870;
              v9 = NAN;
              goto LABEL_323;
            }
            v227 = *(unsigned __int8 *)(v225 + 5);
            v228 = v227 != 2 || v225 == 0;
            v22 = !v228;
            if (!v228)
            {
              v229 = *(_QWORD *)(v225 + 8);
              if ((v229 & 1) == 0)
              {
                if (v229)
                {
                  v230 = *(unsigned int *)(v229 + 16);
                  v21 = *(_QWORD *)(v229 + 8);
                  v229 = *(unsigned int *)(v229 + 4);
                  v231 = (v230 >> 2) & 1;
                }
                else
                {
                  v21 = 0;
                  v231 = 1;
                }
                a2 = v868 & 0xFFFFFF0000000000 | v229 | (v231 << 32);
                v19 = v225;
                v868 = a2;
                goto LABEL_297;
              }
              if ((v229 & 2) == 0)
              {
                v326 = (unint64_t)*JSC::JSRopeString::resolveRope(v225, (JSC::JSGlobalObject *)v16, a3, a4, a9, a5, a6, a7, a8);
                if (v326)
                {
                  v327 = *(unsigned int *)(v326 + 16);
                  v21 = *(_QWORD *)(v326 + 8);
                  v326 = *(unsigned int *)(v326 + 4);
                  v328 = (v327 >> 2) & 1;
                }
                else
                {
                  v21 = 0;
                  v328 = 1;
                }
                a2 = v863 & 0xFFFFFF0000000000 | v326 | (v328 << 32);
                v19 = v225;
                v863 = a2;
                v16 = (uint64_t)a1;
                v17 = v875;
                goto LABEL_297;
              }
              v19 = *(_QWORD *)(v225 + 20) & 0xFFFFFFFFFLL;
              v280 = v866 & 0xFFFFFF0000000000;
              v281 = *(_QWORD *)(v19 + 8);
              if (!v281)
              {
                v866 = v280 | 0x100000000;
                v21 = (unint64_t)"";
                a2 = 0x100000000;
                goto LABEL_297;
              }
              v282 = *(unsigned int *)(v281 + 4);
              v283 = ((unint64_t)*(unsigned int *)(v281 + 16) >> 2) & 1;
              v866 = v280 | (v283 << 32) | v282;
              v284 = *(_QWORD *)(v225 + 24);
              v285 = v284 >> 16;
              if (v282 > (v284 >> 16))
              {
                v21 = *(_QWORD *)(v281 + 8);
                v286 = *(_DWORD *)(v225 + 16);
                if ((int)v282 - (int)v285 <= v286)
                {
                  v286 = v282 - v285;
                  if (!(_DWORD)v285)
                  {
                    a2 = v866;
                    goto LABEL_297;
                  }
                }
                v324 = (v284 >> 16);
                a2 = v286;
                v325 = v282 - v285;
                if ((_DWORD)v283)
                {
                  if (v325 >= v286)
                  {
                    v21 += v324;
                    a2 = v286 | 0x100000000;
                    goto LABEL_297;
                  }
                }
                else if (v325 >= v286)
                {
                  v21 += 2 * v324;
                  goto LABEL_297;
                }
LABEL_937:
                __break(1u);
LABEL_938:
                v713 = JSC::NumericStrings::lookup((JSC::NumericStrings *)(v12 + 44272), v13);
                v714 = v713;
                if (*(double *)v713 != v13 || *(_QWORD *)(v713 + 8) == 0)
                {
                  *(double *)v713 = v9;
                  WTF::String::number(v13, &__dst);
                  v716 = *(WTF::StringImpl **)(v714 + 8);
                  *(_QWORD *)(v714 + 8) = __dst;
                  if (v716)
                  {
                    if (*(_DWORD *)v716 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v716, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v751, v752, v753, v754, v755, v756, v757, v758);
                    }
                    else
                    {
                      *(_DWORD *)v716 -= 2;
                    }
                  }
                  *(_QWORD *)(v714 + 16) = 0;
                }
                if (v885 == -1)
                  v884 = 1;
                ++v885;
                v696 = *(WTF::StringImpl **)(v714 + 8);
                if (v696)
                  v717 = *((_DWORD *)v696 + 1);
                else
                  v717 = 0;
                v529 = __CFADD__(v883, v717);
                v718 = v883 + v717;
                if (v529)
                  v882 = 1;
                else
                  v883 = v718;
                v719 = v858 & 0xFFFFFF0000000000;
                if (v696)
                {
                  v720 = *((_QWORD *)v696 + 1);
                  v858 = *((unsigned int *)v696 + 1) | ((unint64_t)((*((_DWORD *)v696 + 4) >> 2) & 1) << 32) | v719;
                  *(_DWORD *)v696 += 2;
                }
                else
                {
                  v720 = 0;
                  v858 = v719 | 0x100000000;
                }
                __dst = (int *)v696;
                v890.i64[0] = v720;
                v701 = v858;
                goto LABEL_933;
              }
              a2 = 0x100000000;
              v21 = (unint64_t)"";
LABEL_297:
              if (*(_DWORD *)(v226 + 80))
              {
                v502 = *(_DWORD *)(v226 + 80);
                if ((v502 & 0x27) != 0 && (v502 & 0x20) == 0)
                {
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  v16 = (uint64_t)a1;
                  v17 = v875;
                }
                if (*(_QWORD *)(v226 + 16))
                {
                  LOBYTE(v227) = 0;
                  a2 = (uint64_t)v870;
                  goto LABEL_322;
                }
              }
              v232 = *(WTF::StringImpl **)(v19 + 8);
              if ((v232 & 1) != 0)
              {
                v539 = JSC::JSRopeString::resolveRope(v19, 0, a3, a4, a9, a5, a6, a7, a8);
                v16 = (uint64_t)a1;
                v17 = v875;
                v232 = (WTF::StringImpl *)*v539;
              }
              if (v232)
                *(_DWORD *)v232 += 2;
              if (v885 == -1)
                v884 = 1;
              ++v885;
              if (v888 != v225)
              {
                v233 = v883;
                goto LABEL_306;
              }
              if (!HIDWORD(v880))
              {
                __break(0xC471u);
                JUMPOUT(0x1988B03D4);
              }
              v320 = (char *)ptr + 32 * HIDWORD(v880) - 32;
              v233 = v883;
              if (*((unsigned __int16 *)v320 + 12) != 0xFFFF)
              {
                ++*((_WORD *)v320 + 12);
                v321 = *((_DWORD *)v320 + 4);
                v529 = __CFADD__(v233, v321);
                v322 = v233 + v321;
                if (v529)
                  v882 = 1;
                else
                  v883 = v322;
                a2 = (uint64_t)v870;
                if (v232)
                {
                  if (*(_DWORD *)v232 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v232, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v363, v364, v365, v366, v367, v368, v369, v370);
                    v16 = (uint64_t)a1;
                    v17 = v875;
                  }
                  else
                  {
                    *(_DWORD *)v232 -= 2;
                  }
                }
                goto LABEL_321;
              }
LABEL_306:
              v529 = __CFADD__(v233, (_DWORD)a2);
              v234 = v233 + a2;
              if (v529)
                v882 = 1;
              else
                v883 = v234;
              v236 = (a2 & 0xFF00000000) != 0 && v887 != 0;
              v887 = v236;
              __dst = (int *)v232;
              v890.i64[0] = v21;
              v890.i64[1] = a2;
              LOWORD(v891[0]) = 0;
              if (HIDWORD(v880) != (_DWORD)v880)
              {
                v237 = (char *)ptr + 32 * HIDWORD(v880);
                __dst = 0;
                *(_QWORD *)v237 = v232;
                a9 = v890;
                *(int8x16_t *)(v237 + 8) = v890;
                v238 = v237 + 24;
                v239 = v891;
                a2 = (uint64_t)v870;
                goto LABEL_316;
              }
              v339 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&ptr, (WTF::AtomStringImpl *)(HIDWORD(v880) + 1), (unint64_t)&__dst, a4, a5, a6, a7, a8);
              a2 = (uint64_t)v870;
              if (v339)
              {
                v340 = (char *)ptr + 32 * HIDWORD(v880);
                v341 = *(_QWORD *)v339;
                *(_QWORD *)v339 = 0;
                *(_QWORD *)v340 = v341;
                a9 = *(int8x16_t *)(v339 + 8);
                *(int8x16_t *)(v340 + 8) = a9;
                v238 = v340 + 24;
                v239 = (_WORD *)(v339 + 24);
                v16 = (uint64_t)a1;
                v17 = v875;
LABEL_316:
                v240 = 0;
                *v238 = *v239;
                ++HIDWORD(v880);
              }
              else
              {
                v240 = 1;
                v16 = (uint64_t)a1;
                v17 = v875;
              }
              v886 |= v240;
              v241 = (WTF::StringImpl *)__dst;
              __dst = 0;
              if (v241)
              {
                if (*(_DWORD *)v241 == 2)
                {
                  WTF::StringImpl::~StringImpl(v241, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v306, v307, v308, v309, v310, v311, v312, v313);
                  v16 = (uint64_t)a1;
                  v17 = v875;
                }
                else
                {
                  *(_DWORD *)v241 -= 2;
                }
              }
              v888 = v225;
LABEL_321:
              LOBYTE(v227) = 1;
            }
LABEL_322:
            v242 = v22 & v227;
LABEL_323:
            if (*(_DWORD *)(v226 + 80))
            {
              v494 = *(_DWORD *)(v226 + 80);
              if ((v494 & 0x27) != 0 && (v494 & 0x20) == 0)
              {
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, a3, a4, a5, a6, a7, a8);
                v16 = (uint64_t)a1;
                v17 = v875;
              }
              if (*(_QWORD *)(v226 + 16))
                v495 = 1;
              else
                v495 = v242;
              if ((v495 & 1) != 0)
                goto LABEL_366;
LABEL_325:
              v243 = *(_QWORD *)(16 * (*(_DWORD *)v225 & 0xFFFFFFFE) + 0x40);
              if (!v243)
                goto LABEL_334;
              if (*(_BYTE *)(v243 + 5) == 1)
                goto LABEL_334;
              v244 = *(_QWORD *)(v243 + 64);
              if (!v244 || (*(_QWORD *)(v244 + 88) & 0xFFFFFFFFFFFFFFF7) != 2)
                goto LABEL_334;
              v245 = *(_QWORD *)(v244 + 40);
              if (v245 == 1)
                v246 = 0;
              else
                v246 = v245;
              v247 = *(_QWORD *)v869;
              if ((*(_QWORD *)v869 & 1) != 0)
              {
                v500 = (int **)(v16 - 16);
                if ((v16 & 8) == 0)
                  v500 = (int **)(v16 & 0xFFFFFFFFFFFFC000 | 8);
                v501 = *(uint64_t (**)(int **))(v247 & 0xFFFFFFFFFFFFFFFCLL);
                __dst = *v500;
                v890.i64[0] = v16;
                v890.i64[1] = v869;
                v247 = v501(&__dst);
                v16 = (uint64_t)a1;
              }
              if (v246 != v247 || (v630 = *(_QWORD *)(v243 + 64)) == 0 || (v631 = *(_QWORD *)(v630 + 16), v631 < 2))
              {
LABEL_334:
                v248 = *(unsigned __int8 *)(v225 + 5);
                if (v248 < 0x17)
                {
                  if (v248 == 2)
                    goto LABEL_337;
                  v249 = JSC::JSCell::toStringSlowCase((JSC::JSCell *)v225, a1, a3, a4, a5, a6, a7, a8);
                }
                else
                {
                  v249 = JSC::JSObject::toString((JSC::JSObject *)v225, (JSC::JSGlobalObject *)v16, (JSC::Structure *)a3, a4, a5, a6, a7, a8);
                }
                v225 = v249;
                goto LABEL_337;
              }
              v225 = v631;
LABEL_337:
              v16 = (uint64_t)a1;
              v17 = v875;
              if (*(_DWORD *)(v226 + 80))
              {
                v497 = *(_DWORD *)(v226 + 80);
                if ((v497 & 0x27) != 0 && (v497 & 0x20) == 0)
                {
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  v16 = (uint64_t)a1;
                  v17 = v875;
                }
                if (*(_QWORD *)(v226 + 16))
                  goto LABEL_366;
              }
              v250 = *(_QWORD *)(v225 + 8);
              if ((v250 & 1) != 0)
              {
                if ((v250 & 2) != 0)
                {
                  v19 = *(_QWORD *)(v225 + 20) & 0xFFFFFFFFFLL;
                  v271 = StatusReg & 0xFFFFFF0000000000;
                  v272 = *(_QWORD *)(v19 + 8);
                  if (v272)
                  {
                    v273 = *(unsigned int *)(v272 + 4);
                    v274 = ((unint64_t)*(unsigned int *)(v272 + 16) >> 2) & 1;
                    StatusReg = v271 | (v274 << 32) | v273;
                    v275 = *(_QWORD *)(v225 + 24);
                    v276 = v275 >> 16;
                    if (v273 <= (v275 >> 16))
                    {
                      v21 = 0x100000000;
                      v22 = (uint64_t)"";
                    }
                    else
                    {
                      v22 = *(_QWORD *)(v272 + 8);
                      v277 = *(_DWORD *)(v225 + 16);
                      if ((int)v273 - (int)v276 > v277 || (v277 = v273 - v276, (_DWORD)v276))
                      {
                        v278 = (v275 >> 16);
                        v21 = v277;
                        v279 = v273 - v276;
                        if ((_DWORD)v274)
                        {
                          if (v279 < v277)
                            goto LABEL_937;
                          v22 += v278;
                          v21 = v277 | 0x100000000;
                        }
                        else
                        {
                          if (v279 < v277)
                            goto LABEL_937;
                          v22 += 2 * v278;
                        }
                      }
                      else
                      {
                        v21 = StatusReg;
                      }
                    }
                  }
                  else
                  {
                    StatusReg = v271 | 0x100000000;
                    v22 = (uint64_t)"";
                    v21 = 0x100000000;
                  }
                }
                else
                {
                  v317 = (unint64_t)*JSC::JSRopeString::resolveRope(v225, (JSC::JSGlobalObject *)v16, a3, a4, a9, a5, a6, a7, a8);
                  if (v317)
                  {
                    v318 = *(unsigned int *)(v317 + 16);
                    v22 = *(_QWORD *)(v317 + 8);
                    v317 = *(unsigned int *)(v317 + 4);
                    v319 = (v318 >> 2) & 1;
                  }
                  else
                  {
                    v22 = 0;
                    v319 = 1;
                  }
                  v16 = (uint64_t)a1;
                  v17 = v875;
                  v21 = __n & 0xFFFFFF0000000000 | v317 | (v319 << 32);
                  v19 = v225;
                  __n = v21;
                }
              }
              else
              {
                if (v250)
                {
                  v251 = *(unsigned int *)(v250 + 16);
                  v22 = *(_QWORD *)(v250 + 8);
                  v250 = *(unsigned int *)(v250 + 4);
                  v252 = (v251 >> 2) & 1;
                }
                else
                {
                  v22 = 0;
                  v252 = 1;
                }
                v21 = v872 & 0xFFFFFF0000000000 | v250 | (v252 << 32);
                v19 = v225;
                v872 = v21;
              }
              if (*(_DWORD *)(v226 + 80))
              {
                v498 = *(_DWORD *)(v226 + 80);
                if ((v498 & 0x27) != 0 && (v498 & 0x20) == 0)
                {
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  v16 = (uint64_t)a1;
                  v17 = v875;
                }
                if (*(_QWORD *)(v226 + 16))
                  goto LABEL_366;
              }
              v253 = *(WTF::StringImpl **)(v19 + 8);
              if ((v253 & 1) != 0)
              {
                v530 = JSC::JSRopeString::resolveRope(v19, 0, a3, a4, a9, a5, a6, a7, a8);
                v16 = (uint64_t)a1;
                v17 = v875;
                v253 = (WTF::StringImpl *)*v530;
              }
              if (v253)
                *(_DWORD *)v253 += 2;
              if (v885 == -1)
                v884 = 1;
              ++v885;
              if (v888 == v225)
              {
                if (!HIDWORD(v880))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1988B03CCLL);
                }
                v314 = (char *)ptr + 32 * HIDWORD(v880) - 32;
                v254 = v883;
                if (*((unsigned __int16 *)v314 + 12) != 0xFFFF)
                {
                  ++*((_WORD *)v314 + 12);
                  v315 = *((_DWORD *)v314 + 4);
                  v529 = __CFADD__(v254, v315);
                  v316 = v254 + v315;
                  if (v529)
                    v882 = 1;
                  else
                    v883 = v316;
                  if (v253)
                  {
                    if (*(_DWORD *)v253 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v253, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v350, v351, v352, v353, v354, v355, v356, v357);
                      v16 = (uint64_t)a1;
                      v17 = v875;
                    }
                    else
                    {
                      *(_DWORD *)v253 -= 2;
                    }
                  }
                  goto LABEL_366;
                }
              }
              else
              {
                v254 = v883;
              }
              v529 = __CFADD__(v254, (_DWORD)v21);
              v255 = v254 + v21;
              if (v529)
                v882 = 1;
              else
                v883 = v255;
              v257 = (v21 & 0xFF00000000) != 0 && v887 != 0;
              v887 = v257;
              __dst = (int *)v253;
              v890.i64[0] = v22;
              v890.i64[1] = v21;
              LOWORD(v891[0]) = 0;
              if (HIDWORD(v880) != (_DWORD)v880)
              {
                v258 = (char *)ptr + 32 * HIDWORD(v880);
                __dst = 0;
                *(_QWORD *)v258 = v253;
                a9 = v890;
                *(int8x16_t *)(v258 + 8) = v890;
                v259 = v258 + 24;
                v260 = v891;
                goto LABEL_361;
              }
              v329 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&ptr, (WTF::AtomStringImpl *)(HIDWORD(v880) + 1), (unint64_t)&__dst, a4, a5, a6, a7, a8);
              if (v329)
              {
                v330 = (char *)ptr + 32 * HIDWORD(v880);
                v331 = *(_QWORD *)v329;
                *(_QWORD *)v329 = 0;
                *(_QWORD *)v330 = v331;
                a9 = *(int8x16_t *)(v329 + 8);
                *(int8x16_t *)(v330 + 8) = a9;
                v259 = v330 + 24;
                v260 = (_WORD *)(v329 + 24);
                v16 = (uint64_t)a1;
                v17 = v875;
LABEL_361:
                v261 = 0;
                *v259 = *v260;
                ++HIDWORD(v880);
              }
              else
              {
                v261 = 1;
                v16 = (uint64_t)a1;
                v17 = v875;
              }
              v886 |= v261;
              v262 = (WTF::StringImpl *)__dst;
              __dst = 0;
              if (v262)
              {
                if (*(_DWORD *)v262 == 2)
                {
                  WTF::StringImpl::~StringImpl(v262, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v287, v288, v289, v290, v291, v292, v293, v294);
                  v16 = (uint64_t)a1;
                  v17 = v875;
                }
                else
                {
                  *(_DWORD *)v262 -= 2;
                }
              }
              v888 = v225;
              goto LABEL_366;
            }
            if ((v242 & 1) == 0)
              goto LABEL_325;
LABEL_366:
            if (*((_DWORD *)v17 + 20))
            {
              v496 = *((_DWORD *)v17 + 20);
              if ((v496 & 0x27) != 0 && (v496 & 0x20) == 0)
              {
                JSC::VMTraps::handleTraps((JSC::VM *)((char *)v17 + 64), 7u, a3, a4, a5, a6, a7, a8);
                v16 = (uint64_t)a1;
                v17 = v875;
              }
              if (*((_QWORD *)v17 + 2))
                goto LABEL_271;
            }
            if (++v10 != v871)
              continue;
LABEL_420:
            if (v884)
            {
              __break(0xC471u);
              JUMPOUT(0x1988B0390);
            }
            if (v885 != 1)
              goto LABEL_92;
            a2 = v888;
            if (v888)
              goto LABEL_94;
            if (!HIDWORD(v880))
            {
              __break(0xC471u);
              JUMPOUT(0x1988AE60CLL);
            }
LABEL_203:
            v171 = *(_QWORD *)(v16 + 56);
            v172 = *((_DWORD *)ptr + 4);
            v173 = *(int **)ptr;
            if (*(_QWORD *)ptr)
            {
              if (v172 == v173[1])
              {
                *v173 += 2;
                goto LABEL_206;
              }
LABEL_686:
              WTF::StringView::toString((_BYTE *)ptr + 8, &__dst);
            }
            else
            {
              if (v172)
                goto LABEL_686;
LABEL_206:
              __dst = v173;
            }
            v174 = v171;
LABEL_266:
            a2 = JSC::jsString(v174, (JSC::VM *)&__dst, a3, a4, a5, a6, a7, a8);
            v221 = (WTF::StringImpl *)__dst;
            __dst = 0;
            if (v221)
            {
              if (*(_DWORD *)v221 == 2)
              {
                WTF::StringImpl::~StringImpl(v221, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v426, v427, v428, v429, v430, v431, v432, v433);
              }
              else
              {
                *(_DWORD *)v221 -= 2;
              }
            }
LABEL_94:
            v85 = (unint64_t)ptr;
            if (HIDWORD(v880))
            {
              v86 = 32 * HIDWORD(v880);
              v87 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
              while (1)
              {
                while (1)
                {
                  v88 = *(_QWORD *)v85;
                  *(_QWORD *)v85 = 0;
                  if (v88)
                    break;
LABEL_99:
                  v85 += 32;
                  v86 -= 32;
                  if (!v86)
                    goto LABEL_106;
                }
                if (*(_DWORD *)v88 != 2)
                {
                  *(_DWORD *)v88 -= 2;
                  goto LABEL_99;
                }
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v88, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
                v89 = *(_QWORD *)(v87 + 752);
                if (!v89)
                {
                  pas_try_deallocate_slow_no_cache(v88, (uint64_t)&bmalloc_heap_config, 1);
                  goto LABEL_99;
                }
                if (v88 >> 43
                  || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v88 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v88)) & 1) == 0)
                {
                  if (v88 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v88 >> 24)
                  {
                    a4 = 0;
LABEL_511:
                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v89, v88, 1, a4, a5, a6, a7, a8);
                    goto LABEL_99;
                  }
                  a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                  + ((((v88 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                  + 24) >> (2 * ((BYTE3(v88) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)a4 != 1)
                    goto LABEL_511;
                }
                v90 = *(unsigned int *)(v89 + 8000);
                if (v90 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v89, v88, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                  goto LABEL_99;
                }
                *(_QWORD *)(v89 + 8 * v90) = v88 | 0x5000000000000;
                *(_DWORD *)(v89 + 8000) = v90 + 1;
                v85 += 32;
                v86 -= 32;
                if (!v86)
                {
LABEL_106:
                  v85 = (unint64_t)ptr;
                  break;
                }
              }
            }
            if (v881 != (_BYTE *)v85 && v85)
            {
              ptr = 0;
              LODWORD(v880) = 0;
              v161 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
              if (!v161)
              {
                pas_try_deallocate_slow_no_cache(v85, (uint64_t)&bmalloc_heap_config, 1);
                return a2;
              }
              if (!(v85 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v85 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v85)) & 1) != 0)
              {
                goto LABEL_195;
              }
              if (v85 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v85 >> 24)
              {
                a4 = 0;
              }
              else
              {
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v85 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v85) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 == 1)
                {
LABEL_195:
                  v162 = *(unsigned int *)(v161 + 8000);
                  if (v162 >= 0x3E7)
                  {
                    pas_thread_local_cache_append_deallocation_slow(v161, v85, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                  }
                  else
                  {
                    *(_QWORD *)(v161 + 8 * v162) = v85 | 0x5000000000000;
                    *(_DWORD *)(v161 + 8000) = v162 + 1;
                  }
                  return a2;
                }
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v161, v85, 1, a4, a5, a6, a7, a8);
            }
            return a2;
          default:
            goto LABEL_370;
        }
      case 3:
        goto LABEL_370;
      case 4:
      case 5:
        goto LABEL_281;
      case 6:
      case 7:
        if (v10 >= *(unsigned int *)(v224 - 8))
          goto LABEL_370;
        a9.i64[0] = *(_QWORD *)(v224 + 8 * v10);
        v225 = a9.i64[0] + 0x2000000000000;
        goto LABEL_283;
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        if (v10 >= *(unsigned int *)(v224 - 4))
          goto LABEL_370;
        v225 = *(_QWORD *)(v224 + 8 * v10 + 16);
        goto LABEL_283;
      default:
        __break(0xC471u);
        JUMPOUT(0x1988B01F4);
    }
  }
}

unint64_t JSC::JSStringJoiner::join(JSC::JSStringJoiner *this, int8x16_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  WTF::StringImpl *v32;

  if (*((_BYTE *)this + 552))
    goto LABEL_17;
  if (*((_DWORD *)this + 139) != 1)
    return JSC::JSStringJoiner::joinSlow(this, a2, a3, a4, a5, a6, a7, a8);
  result = *((_QWORD *)this + 71);
  if (!result)
  {
    if (*((_DWORD *)this + 7))
    {
      v10 = a2[3].i64[1];
      v11 = *((_QWORD *)this + 2);
      v12 = *(_DWORD *)(v11 + 16);
      v13 = *(WTF::StringImpl **)v11;
      if (*(_QWORD *)v11)
      {
        if (v12 == *((_DWORD *)v13 + 1))
        {
          *(_DWORD *)v13 += 2;
LABEL_10:
          v32 = v13;
          goto LABEL_11;
        }
      }
      else if (!v12)
      {
        goto LABEL_10;
      }
      v30 = a2[3].i64[1];
      WTF::StringView::toString((_BYTE *)(v11 + 8), (int **)&v32);
      v10 = v30;
LABEL_11:
      result = JSC::jsString(v10, (JSC::VM *)&v32, a3, a4, a5, a6, a7, a8);
      v21 = v32;
      v32 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
        {
          v31 = result;
          WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
          WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
          return v31;
        }
        else
        {
          *(_DWORD *)v21 -= 2;
        }
      }
      return result;
    }
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x1988B1188);
  }
  return result;
}

JSC::VM *JSC::arrayProtoFuncValues(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  JSC::VM *v13;
  unint64_t v15;
  uint64_t v16;

  v9 = *((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    goto LABEL_11;
  v11 = *(unsigned __int8 *)(v10 + 5);
  if (v11 - 51 < 6)
  {
    v10 = 10;
LABEL_11:
    v16 = v10;
    v15 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v16, this, (JSC::Structure *)v10, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_12;
  }
  if (v11 >= 0x17)
    goto LABEL_4;
  v15 = JSC::JSCell::toObjectSlow(*((JSC::JSCell **)a2 + 5), (JSC::SymbolObject **)this, v10, a4, a5, a6, a7, a8);
LABEL_12:
  v10 = v15;
  if (!v15)
    return 0;
LABEL_4:
  v12 = *((_DWORD *)this + 250);
  if (v12)
    v13 = (JSC::VM *)(16 * (v12 & 0xFFFFFFFE));
  else
    v13 = 0;
  return JSC::JSArrayIterator::create(v9, v13, v10, 0xFFFE000000000001, a5, a6, a7, a8);
}

JSC::VM *JSC::createArrayIteratorObject(uint64_t a1, uint64_t a2, unsigned int a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  JSC::VM *v14;
  unint64_t v16;
  uint64_t v17;

  v9 = a2;
  v11 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    goto LABEL_11;
  v12 = *(unsigned __int8 *)(a2 + 5);
  if (v12 - 51 < 6)
  {
    v9 = 10;
LABEL_11:
    v17 = v9;
    v16 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v17, (JSC::JSGlobalObject *)a1, (JSC::Structure *)v9, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_12;
  }
  if (v12 >= 0x17)
    goto LABEL_4;
  v16 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a2, (JSC::SymbolObject **)a1, a2, a4, a5, a6, a7, a8);
LABEL_12:
  v9 = v16;
  if (!v16)
    return 0;
LABEL_4:
  v13 = *(_DWORD *)(a1 + 1000);
  if (v13)
    v14 = (JSC::VM *)(16 * (v13 & 0xFFFFFFFE));
  else
    v14 = 0;
  return JSC::JSArrayIterator::create(v11, v14, v9, a3 | 0xFFFE000000000000, a5, a6, a7, a8);
}

uint64_t JSC::arrayProtoPrivateFuncConcatMemcpy(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  JSC::JSGlobalObject *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  unint64_t v19;
  unsigned int v20;
  _OWORD *v21;
  __int128 *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  JSC::VM *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  unsigned int v70;
  int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t Slow;
  JSC *v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  _DWORD *v86;
  void *v87;
  JSC::VM *v88;
  size_t v89;
  int v90;
  unint64_t *v91;
  uint64_t v92;
  JSC *v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  uint64_t v105;
  void *v106;
  size_t v107;
  JSC *v108;
  int v109;
  _OWORD *j;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  _OWORD *v114;
  uint64_t v115;
  _OWORD *v116;
  _OWORD *v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v122;
  double v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  double *v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  JSC::VM *v132;
  JSC::Structure *v133;
  unsigned int v134;
  int v135;
  unint64_t *v136;
  uint64_t v137;
  int DirectOffset;
  _BOOL4 v140;
  int v141;
  unint64_t v142;
  JSC::VM *v143;
  JSC::JSGlobalObject *v144;
  JSC::JSArray *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __n128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int32x4_t v157;
  JSC::JSGlobalObject *v158;
  int v159;
  JSC *v160;
  int v161;
  int v162;
  BOOL v163;
  JSC::JSGlobalObject *v164;
  unint64_t OutOfMemoryError;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  double v171;
  JSC::Exception *v172;
  JSC::VM *v173;
  unint64_t v174;
  unint64_t v175;
  _DWORD *v176;
  int v177;
  _OWORD *i;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  _OWORD *v182;
  _OWORD *v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  int v187;
  int v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t SlowCase;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  JSC::JSGlobalObject *v197;
  uint64_t v198;
  JSC::JSGlobalObject *v199;
  unint64_t *v200;
  int v201;
  JSC::JSGlobalObject *v202;
  int v203;
  int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unint64_t *v209;
  unint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;

  v9 = *((_QWORD *)this + 7);
  v212 = v9;
  v10 = *((_QWORD *)a2 + 6);
  if ((*(_BYTE *)(v10 + 4) & 0xE) == 0xC)
    return 2;
  v12 = this;
  v13 = (unint64_t *)(v9 + 37584);
  v14 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
  if (!v15)
    v15 = *(_QWORD *)(v10 + 16);
  if (v15 == *(_QWORD *)(v14 + 672)
    && ((v16 = *(_QWORD *)(v14 + 2280), (v16 & 1) != 0)
      ? (v17 = (v16 >> 1) & 3)
      : (v17 = *(unsigned __int8 *)(v16 + 4)),
        v17 == 1))
  {
    if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x12) & 0x20) == 0)
    {
      v18 = (_DWORD *)(v9 + 80);
      if (!*(_DWORD *)(v9 + 80))
        goto LABEL_10;
      LOBYTE(v140) = 1;
      goto LABEL_238;
    }
    v136 = (unint64_t *)(v9 + 37584);
    v137 = v9;
    DirectOffset = JSC::JSObject::getDirectOffset(*((_DWORD **)a2 + 6), (JSC::VM *)v9, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 1080), a4, a5, a6, a7, a8);
    v12 = this;
    v9 = v137;
    v140 = DirectOffset == -1;
  }
  else
  {
    v136 = (unint64_t *)(v9 + 37584);
    v140 = 0;
  }
  v18 = (_DWORD *)(v9 + 80);
  if (*(_DWORD *)(v9 + 80))
  {
    v13 = v136;
LABEL_238:
    v162 = *(_DWORD *)(v9 + 80);
    if ((v162 & 0x27) != 0 && (v162 & 0x20) == 0)
    {
      v198 = v9;
      v199 = v12;
      v200 = v13;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v200;
      v12 = v199;
      v9 = v198;
    }
    if (*(_QWORD *)(v9 + 16))
      v163 = 0;
    else
      v163 = v140;
    if (!v163)
      return 2 * (*(_QWORD *)(v9 + 16) == 0);
    goto LABEL_10;
  }
  v13 = v136;
  if (!v140)
    return 2;
LABEL_10:
  v19 = *((_QWORD *)a2 + 7);
  if ((v19 & 0xFFFE000000000002) != 0)
  {
    v213 = v9;
    v132 = (JSC::VM *)*(unsigned int *)(*(_QWORD *)(v10 + 8) - 8);
    if ((_DWORD)v132 != -1)
    {
      v133 = (JSC::Structure *)((_DWORD)v132 + 1);
      if (v19 > 0xFFFDFFFFFFFFFFFFLL)
      {
        v134 = 5;
        goto LABEL_216;
      }
      if (v19 >> 49)
      {
        a9.n128_u64[0] = v19 - 0x2000000000000;
        if (BYTE1(dword_1ECF4C5C0))
        {
          v134 = 7;
          goto LABEL_216;
        }
      }
LABEL_211:
      v134 = 9;
LABEL_216:
      v135 = *(_BYTE *)(v10 + 4) & 0xF;
      if ((*(_BYTE *)(v10 + 4) & 1) != 0 && (*(_BYTE *)(v10 + 4) & 0xEu) <= 9)
      {
        if (v135 == 5 || v135 == 9)
        {
          if (v134 == 9)
            goto LABEL_228;
        }
        else if (v135 == 3)
        {
LABEL_228:
          v141 = *((_DWORD *)v12 + (v134 >> 1) + 223);
          if (v141)
            v142 = 16 * (v141 & 0xFFFFFFFE);
          else
            v142 = 0;
          v143 = (JSC::VM *)v9;
          v144 = v12;
          v145 = (JSC::JSArray *)JSC::JSArray::tryCreate((JSC::JSArray *)v9, v142, v133, (uint64_t)a4, a5, a6, a7, a8, a9);
          v67 = (unint64_t)v145;
          if (!v145)
          {
            JSC::throwOutOfMemoryError(v144, (JSC::JSGlobalObject *)&v213);
            return v67;
          }
          if ((JSC::JSArray::appendMemcpy(v145, v144, v143, 0, (JSC::JSArray *)v10, v146, v147, v148, v149) & 1) != 0
            || (!*v18 || !JSC::VM::hasExceptionsAfterHandlingTraps(v143, v150, v151, v152, v153, v154, v155, v156))
            && JSC::moveElements<(JSC::FillMode)1>(v144, v143, v67, 0, (JSC::JSObject *)v10, (int)v132))
          {
            JSC::JSObject::putDirectIndex(v67, (unint64_t)v144, v132, v19, v153, v154, v155, v156, v157);
            return v67;
          }
          return 0;
        }
      }
      v134 = *(_BYTE *)(v10 + 4) & 0xF;
      goto LABEL_228;
    }
LABEL_280:
    v197 = (JSC::JSGlobalObject *)&v213;
    goto LABEL_279;
  }
  v20 = *(unsigned __int8 *)(v19 + 5);
  if (v20 != 36)
  {
    v213 = v9;
    v132 = (JSC::VM *)*(unsigned int *)(*(_QWORD *)(v10 + 8) - 8);
    if ((_DWORD)v132 != -1)
    {
      v133 = (JSC::Structure *)((_DWORD)v132 + 1);
      if (v20 >= 0x17)
      {
        v67 = 2;
        if (v20 == 37 || v20 == 61)
          return v67;
      }
      goto LABEL_211;
    }
    goto LABEL_280;
  }
  v21 = *(_OWORD **)(v10 + 8);
  v22 = *(__int128 **)(v19 + 8);
  v23 = *((_DWORD *)v21 - 2);
  v24 = *((unsigned int *)v22 - 2);
  v25 = v23 + v24;
  if (__CFADD__(v23, (_DWORD)v24))
  {
    v197 = (JSC::JSGlobalObject *)&v212;
LABEL_279:
    JSC::throwOutOfMemoryError(v12, v197);
    return 0;
  }
  v26 = *(unsigned __int8 *)(v19 + 4);
  if ((v26 & 0xEu) > 9)
    goto LABEL_95;
  v27 = *(unsigned __int8 *)(v10 + 4);
  if ((v27 & 0xEu) > 9 || (v27 & v26 & 1) == 0)
    goto LABEL_95;
  v28 = v27 & 0xF;
  v29 = v26 & 0xF;
  v30 = v26 & 0xF;
  if ((_DWORD)v28 == 3)
  {
    v31 = v26 & 0xF;
    goto LABEL_32;
  }
  v31 = v27 & 0xF;
  if (v29 == 3)
    goto LABEL_32;
  switch((_DWORD)v28)
  {
    case 9:
      goto LABEL_21;
    case 7:
LABEL_27:
      if ((v26 & 0xD) == 5)
      {
        if ((_DWORD)v28 == v29)
          v30 = v28;
        else
          v30 = 7;
        goto LABEL_33;
      }
      break;
    case 5:
LABEL_21:
      if (v29 == 9)
        goto LABEL_33;
      if (v29 == 5)
      {
        v30 = v28;
        goto LABEL_33;
      }
      if ((v28 | 2) != 7)
        break;
      goto LABEL_27;
  }
  if ((_DWORD)v28 != v29)
    goto LABEL_95;
LABEL_32:
  v30 = v31;
  if (!(_DWORD)v31)
    goto LABEL_95;
LABEL_33:
  if (*(_BYTE *)(v10 + 5) == 36)
  {
    v32 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
    if (v32)
    {
      v33 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      if (v32 == *(_QWORD *)(v33 + 672))
      {
        v34 = *(_QWORD *)(v33 + 2304);
        v35 = (v34 & 1) != 0 ? (v34 >> 1) & 3 : *(unsigned __int8 *)(v34 + 4);
        if (v35 != 2)
          goto LABEL_64;
      }
    }
  }
  if (*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 9) == 36)
  {
    v36 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
    v37 = *(unsigned __int8 *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 8);
    v38 = (v37 >> 1) & 7;
    if ((v37 & 0x10) != 0)
      v38 = ((v37 & 0xE) + 10) >> 1;
    v39 = *(_DWORD *)(v36 + 4 * v38 + 852);
    if (v39)
      v40 = 16 * (v39 & 0xFFFFFFFE);
    else
      v40 = 0;
    if (v40 == 16 * (*(_DWORD *)v10 & 0xFFFFFFFE))
    {
      v41 = *(_QWORD *)(v36 + 2304);
      v42 = (v41 & 1) != 0 ? (v41 >> 1) & 3 : *(unsigned __int8 *)(v41 + 4);
      if (v42 != 2)
        goto LABEL_64;
    }
  }
  else
  {
    LOBYTE(v37) = *(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 8);
  }
  if ((v37 & 0x20) != 0)
    goto LABEL_95;
  v43 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  if (v43)
  {
    if (*(_BYTE *)(*(_QWORD *)(v43 + 2048) + 4) == 2)
      goto LABEL_95;
  }
  v44 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
  if (!v44)
    v44 = *(_QWORD *)(v10 + 16);
  if ((v44 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v44 + 5) >= 0x17u)
  {
    while ((*(_BYTE *)(v44 + 4) & 0xE) == 0)
    {
      if ((*(_BYTE *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 8) & 0x20) != 0)
        break;
      v45 = *(_QWORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x28);
      if (v45)
      {
        if (*(_BYTE *)(*(_QWORD *)(v45 + 2048) + 4) == 2)
          break;
      }
      v46 = *(_QWORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x30);
      if (!v46)
        v46 = *(_QWORD *)(v44 + 16);
      if ((v46 & 0xFFFE000000000002) == 0)
      {
        v44 = v46;
        if (*(unsigned __int8 *)(v46 + 5) > 0x16u)
          continue;
      }
      goto LABEL_64;
    }
LABEL_95:
    v59 = (_DWORD *)v9;
    v60 = v12;
    v67 = JSC::constructEmptyArray((unint64_t)v12, 0, (v23 + v24), 0, a5, a6, a7, a8, a9);
    if (!*v18)
      goto LABEL_293;
    v176 = v59;
    v177 = v59[20];
    if ((v177 & 0x27) != 0 && (v177 & 0x20) == 0)
    {
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v59 + 16), 7u, v61, v62, v63, v64, v65, v66);
      v176 = v59;
    }
    if (!*((_QWORD *)v176 + 2))
    {
LABEL_293:
      if (JSC::moveElements<(JSC::FillMode)1>(v60, (JSC::VM *)v59, v67, 0, (JSC::JSObject *)v10, v23))
      {
        if (!JSC::moveElements<(JSC::FillMode)1>(v60, (JSC::VM *)v59, v67, v23, (JSC::JSObject *)v19, v24))return 0;
        return v67;
      }
    }
    return 0;
  }
LABEL_64:
  v48 = *(_QWORD **)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x28);
  v47 = *(_QWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x30);
  if (v47 && v47 == v48[84])
  {
    v49 = v48[288];
    v50 = (v49 & 1) != 0 ? (v49 >> 1) & 3 : *(unsigned __int8 *)(v49 + 4);
    if (v50 != 2)
      goto LABEL_100;
  }
  v51 = *(unsigned __int8 *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 8);
  if (*(_BYTE *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 9) != 36)
    goto LABEL_81;
  v52 = (v51 >> 1) & 7;
  if ((v51 & 0x10) != 0)
    v52 = ((v51 & 0xE) + 10) >> 1;
  v53 = *((_DWORD *)v48 + v52 + 213);
  v54 = v53 ? 16 * (v53 & 0xFFFFFFFE) : 0;
  if (v54 == 16 * (*(_DWORD *)v19 & 0xFFFFFFFE)
    && ((v55 = v48[288], (v55 & 1) != 0) ? (v56 = (v55 >> 1) & 3) : (v56 = *(unsigned __int8 *)(v55 + 4)),
        v56 != 2))
  {
LABEL_100:
    if (v25 >= 0x186A0)
      goto LABEL_95;
  }
  else
  {
LABEL_81:
    if ((v51 & 0x20) != 0 || v48 && *(_BYTE *)(v48[256] + 4) == 2)
      goto LABEL_95;
    if (!v47)
      v47 = *(_QWORD *)(v19 + 16);
    if ((v47 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v47 + 5) >= 0x17u)
    {
      while ((*(_BYTE *)(v47 + 4) & 0xE) == 0)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 8) & 0x20) != 0)
          break;
        v57 = *(_QWORD *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x28);
        if (v57)
        {
          if (*(_BYTE *)(*(_QWORD *)(v57 + 2048) + 4) == 2)
            break;
        }
        v58 = *(_QWORD *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x30);
        if (!v58)
          v58 = *(_QWORD *)(v47 + 16);
        if ((v58 & 0xFFFE000000000002) == 0)
        {
          v47 = v58;
          if (*(unsigned __int8 *)(v58 + 5) > 0x16u)
            continue;
        }
        goto LABEL_94;
      }
      goto LABEL_95;
    }
LABEL_94:
    if (v25 >> 5 > 0xC34)
      goto LABEL_95;
  }
  v68 = *((_DWORD *)v12 + (v30 >> 1) + 223);
  if (v68)
    v69 = 16 * (v68 & 0xFFFFFFFE);
  else
    v69 = 0;
  v70 = *(_BYTE *)(v69 + 8) & 0xE;
  if (v70 > 9)
    return 2;
  v71 = *(unsigned __int16 *)(v69 + 24);
  if (v71 == 65534)
  {
    v73 = 0;
  }
  else
  {
    if (v71 == 0xFFFF)
      v72 = *(_DWORD *)(*(_QWORD *)(v69 + 64) + 84);
    else
      v72 = *(unsigned __int16 *)(v69 + 24);
    if (v72 >= 64)
    {
      if ((v72 - 63) >= 5)
      {
        v126 = (v72 - 64) | ((v72 - 64) >> 1) | (((v72 - 64) | ((v72 - 64) >> 1)) >> 2);
        v127 = v126 | (v126 >> 4) | ((v126 | (v126 >> 4)) >> 8);
        v73 = (v127 | HIWORD(v127)) + 1;
      }
      else
      {
        v73 = 4;
      }
    }
    else
    {
      v73 = 0;
    }
    if (v71 == 0xFFFF)
      v71 = *(_DWORD *)(*(_QWORD *)(v69 + 64) + 84);
    if (v71 >= 64)
    {
      if ((v71 - 63) >= 5)
      {
        v124 = (v71 - 64) | ((v71 - 64) >> 1) | (((v71 - 64) | ((v71 - 64) >> 1)) >> 2);
        v125 = v124 | (v124 >> 4) | ((v124 | (v124 >> 4)) >> 8);
        v74 = 8 * ((v125 | HIWORD(v125)) + 1) + 8;
      }
      else
      {
        v74 = 40;
      }
      goto LABEL_117;
    }
  }
  v74 = 8;
LABEL_117:
  if (v25 <= 3)
    v75 = 3;
  else
    v75 = v23 + v24;
  if (!v25)
    v75 = 5;
  v76 = v74 + 8 * v75;
  if (v76 > 0x50)
  {
    if (v76 <= 0x1F60)
      v76 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep + (((v76 + 15) >> 2) & 0xFFFFFFFFCLL));
  }
  else
  {
    v76 = (v76 + 15) & 0x3FFFFFFFF0;
  }
  v77 = v76 - v74;
  v78 = ((v76 - v74) & 0x7FFFFFFF8) + 8 * v73 + 8;
  v211 = *((unsigned int *)v21 - 2);
  if (v78 <= 0x1F60
    && (v79 = *(_QWORD *)(v9 + (((((v76 - v74) & 0x7FFFFFFF8) + 8 * v73 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
  {
    v80 = *(unsigned int *)(v79 + 60);
    Slow = *(_QWORD *)(v79 + 24);
    v82 = (JSC *)v9;
    if (Slow >= *(_QWORD *)(v79 + 32))
    {
      Slow = *(_QWORD *)(v79 + 40);
      if ((Slow & 1) == 0)
      {
        v175 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v79 + 48);
        *(_QWORD *)(v79 + 32) = Slow + HIDWORD(v175);
        *(_QWORD *)(v79 + 40) = Slow + (int)v175;
        *(_QWORD *)(v79 + 24) = Slow + v80;
LABEL_129:
        v83 = v77 >> 3;
        if ((v77 >> 3) >= 0x10000001)
        {
          __break(0xC471u);
          JUMPOUT(0x1988B1F2CLL);
        }
        v84 = v73;
        v85 = (unsigned int *)(Slow + 8 * v73);
        v86 = v85 + 2;
        *v85 = v25;
        v85[1] = v83;
        if (v70 == 6)
        {
          if (v25 >= v83)
            goto LABEL_134;
          v106 = (void *)(Slow + 8 * (v84 + v25) + 8);
          v107 = 8 * (v83 + ~v25) + 8;
          v88 = (JSC::VM *)v28;
          v90 = v29;
          v91 = v13;
          v92 = v30;
          memset_pattern16(v106, &memset_pattern_263, v107);
        }
        else
        {
          if (v25 >= v83)
          {
LABEL_134:
            v67 = *v13;
            if (*v13 >= v13[1])
            {
              v67 = v13[2];
              v93 = v82;
              if ((v67 & 1) != 0)
              {
                v187 = v29;
                v188 = v28;
                v189 = v30;
                JSC::sanitizeStackForVM(v82, (JSC::VM *)v28, v78, v30, a5, a6, a7, a8);
                SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v82 + 37560, (uint64_t)v82 + 192, 16, 0, 0, v190, v191, v192);
                LODWORD(v30) = v189;
                LODWORD(v28) = v188;
                v29 = v187;
                v93 = v82;
                v67 = SlowCase;
              }
              else
              {
                v174 = *(_QWORD *)(v67 + 8) ^ v13[3];
                v13[1] = v67 + HIDWORD(v174);
                v13[2] = v67 + (int)v174;
                *v13 = v67 + 16;
              }
            }
            else
            {
              *v13 = v67 + 16;
              v93 = v82;
            }
            v94 = v211;
            *(_DWORD *)v67 = 0;
            v95 = *(_DWORD *)(v69 + 8);
            *(_DWORD *)v67 = v69 >> 4;
            *(_DWORD *)(v67 + 4) = v95;
            *(_QWORD *)(v67 + 8) = v86;
            if (*((_BYTE *)v93 + 755))
              __dmb(0xAu);
            if ((_DWORD)v30 == 7)
            {
              v100 = *(_QWORD *)(v67 + 8);
              if ((_DWORD)v28 == 7)
              {
                if (v211 > 0x1E)
                {
                  for (i = *(_OWORD **)(v67 + 8); i != (_OWORD *)(((8 * v211) & 0x7FFFFFFE0) + v100); i += 2)
                  {
                    v179 = *v21;
                    v180 = v21[1];
                    v21 += 2;
                    *i = v179;
                    i[1] = v180;
                  }
                  while (i != (_OWORD *)(v100 + 8 * v211))
                  {
                    v181 = *(_QWORD *)v21;
                    v21 = (_OWORD *)((char *)v21 + 8);
                    *(_QWORD *)i = v181;
                    i = (_OWORD *)((char *)i + 8);
                  }
                }
                else if ((_DWORD)v211)
                {
                  v101 = *(_QWORD **)(v67 + 8);
                  v102 = v211;
                  do
                  {
                    v103 = *(_QWORD *)v21;
                    v21 = (_OWORD *)((char *)v21 + 8);
                    *v101++ = v103;
                    --v102;
                  }
                  while (v102);
                }
              }
              else if ((_DWORD)v28 == 3)
              {
                if ((_DWORD)v211)
                {
                  v160 = v93;
                  v161 = v29;
                  memset_pattern16(*(void **)(v67 + 8), &memset_pattern_2, 8 * v211);
                  v29 = v161;
                  v93 = v160;
                }
              }
              else if ((_DWORD)v211)
              {
                v128 = *(double **)(v67 + 8);
                v129 = v211;
                do
                {
                  v130 = *(_QWORD *)v21;
                  v21 = (_OWORD *)((char *)v21 + 8);
                  v131 = (double)(int)v130;
                  if (!v130)
                    v131 = NAN;
                  *v128++ = v131;
                  --v129;
                }
                while (v129);
              }
              if (v29 == 7)
              {
                v104 = (_OWORD *)(v100 + 8 * v211);
                if (v24 > 0x1E)
                {
                  v182 = (_OWORD *)((char *)v104 + 8 * v24);
                  v183 = (_OWORD *)((char *)v104 + ((8 * v24) & 0x7FFFFFFE0));
                  while (v104 != v183)
                  {
                    v184 = *v22;
                    v185 = v22[1];
                    v22 += 2;
                    *v104 = v184;
                    v104[1] = v185;
                    v104 += 2;
                  }
                  while (v104 != v182)
                  {
                    v186 = *(_QWORD *)v22;
                    v22 = (__int128 *)((char *)v22 + 8);
                    *(_QWORD *)v104 = v186;
                    v104 = (_OWORD *)((char *)v104 + 8);
                  }
                }
                else if ((_DWORD)v24)
                {
                  do
                  {
                    v105 = *(_QWORD *)v22;
                    v22 = (__int128 *)((char *)v22 + 8);
                    *(_QWORD *)v104 = v105;
                    v104 = (_OWORD *)((char *)v104 + 8);
                    --v24;
                  }
                  while (v24);
                }
              }
              else if (v29 == 3)
              {
                if ((_DWORD)v24)
                {
                  do
                  {
                    *(_QWORD *)(v100 + 8 * v94++) = 0x7FF8000000000000;
                    --v24;
                  }
                  while (v24);
                }
              }
              else if ((_DWORD)v24)
              {
                do
                {
                  v122 = *(_QWORD *)v22;
                  v22 = (__int128 *)((char *)v22 + 8);
                  v123 = (double)(int)v122;
                  if (!v122)
                    v123 = NAN;
                  *(double *)(v100 + 8 * v94++) = v123;
                  --v24;
                }
                while (v24);
              }
            }
            else if ((_DWORD)v30 != 3)
            {
              v96 = *(_QWORD *)(v67 + 8);
              if ((_DWORD)v28 == 3)
              {
                if ((_DWORD)v211)
                {
                  v108 = v93;
                  v109 = v29;
                  bzero(*(void **)(v67 + 8), 8 * v211);
                  v29 = v109;
                  v93 = v108;
                }
              }
              else if (v211 > 0x1E)
              {
                for (j = *(_OWORD **)(v67 + 8); j != (_OWORD *)(((8 * v211) & 0x7FFFFFFE0) + v96); j += 2)
                {
                  v111 = *v21;
                  v112 = v21[1];
                  v21 += 2;
                  *j = v111;
                  j[1] = v112;
                }
                while (j != (_OWORD *)(v96 + 8 * v211))
                {
                  v113 = *(_QWORD *)v21;
                  v21 = (_OWORD *)((char *)v21 + 8);
                  *(_QWORD *)j = v113;
                  j = (_OWORD *)((char *)j + 8);
                }
              }
              else if ((_DWORD)v211)
              {
                v97 = *(_QWORD **)(v67 + 8);
                v98 = v211;
                do
                {
                  v99 = *(_QWORD *)v21;
                  v21 = (_OWORD *)((char *)v21 + 8);
                  *v97++ = v99;
                  --v98;
                }
                while (v98);
              }
              if (v29 == 3)
              {
                if ((_DWORD)v24)
                {
                  do
                  {
                    *(_QWORD *)(v96 + 8 * v94++) = 0;
                    --v24;
                  }
                  while (v24);
                }
              }
              else
              {
                v114 = (_OWORD *)(v96 + 8 * v211);
                if (v24 > 0x1E)
                {
                  v116 = (_OWORD *)((char *)v114 + 8 * v24);
                  v117 = (_OWORD *)((char *)v114 + ((8 * v24) & 0x7FFFFFFE0));
                  while (v114 != v117)
                  {
                    v118 = *v22;
                    v119 = v22[1];
                    v22 += 2;
                    *v114 = v118;
                    v114[1] = v119;
                    v114 += 2;
                  }
                  while (v114 != v116)
                  {
                    v120 = *(_QWORD *)v22;
                    v22 = (__int128 *)((char *)v22 + 8);
                    *(_QWORD *)v114 = v120;
                    v114 = (_OWORD *)((char *)v114 + 8);
                  }
                }
                else if ((_DWORD)v24)
                {
                  do
                  {
                    v115 = *(_QWORD *)v22;
                    v22 = (__int128 *)((char *)v22 + 8);
                    *(_QWORD *)v114 = v115;
                    v114 = (_OWORD *)((char *)v114 + 8);
                    --v24;
                  }
                  while (v24);
                }
              }
            }
            goto LABEL_184;
          }
          v87 = (void *)(Slow + 8 * (v84 + v25) + 8);
          v88 = (JSC::VM *)v28;
          v89 = 8 * (v83 + ~v25) + 8;
          v90 = v29;
          v91 = v13;
          v92 = v30;
          bzero(v87, v89);
        }
        v30 = v92;
        v28 = (uint64_t)v88;
        v13 = v91;
        v29 = v90;
        goto LABEL_134;
      }
      v202 = v12;
      v201 = v29;
      v210 = v13;
      v206 = v30;
      v208 = v28;
      v204 = *(_BYTE *)(v69 + 8) & 0xE;
      JSC::sanitizeStackForVM((JSC *)v9, (JSC::VM *)v28, v78, v30, a5, a6, a7, a8);
      Slow = JSC::LocalAllocator::allocateSlowCase(v79, (uint64_t)v82 + 192, v80, 0, 1, v194, v195, v196);
      v70 = v204;
      v30 = v206;
      v28 = v208;
      v13 = v210;
      v29 = v201;
      v12 = v202;
    }
    else
    {
      *(_QWORD *)(v79 + 24) = Slow + v80;
    }
  }
  else
  {
    v82 = (JSC *)v9;
    v205 = v30;
    v207 = v28;
    v158 = v12;
    v159 = v29;
    v209 = v13;
    v203 = *(_BYTE *)(v69 + 8) & 0xE;
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v9 + 6648, (JSC *)v9, v78, 0, a5, a6, a7, a8);
    v70 = v203;
    v30 = v205;
    v28 = v207;
    v13 = v209;
    v29 = v159;
    v12 = v158;
  }
  if (Slow)
    goto LABEL_129;
  v164 = v12;
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)v12, (JSC::JSGlobalObject *)v28);
  v172 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v173 = v82;
    v172 = (JSC::Exception *)JSC::Exception::create((uint64_t)v82, (JSC::VM *)OutOfMemoryError, 0, v166, v167, v168, v169, v170);
  }
  else
  {
    v173 = v82;
  }
  JSC::VM::throwException(v173, v164, v172, v171, v166, v167, v168, v169, v170);
  v93 = v173;
  v67 = 0;
LABEL_184:
  if (*((_BYTE *)v93 + 755))
    __dmb(0xAu);
  return v67;
}

uint64_t JSC::moveElements<(JSC::FillMode)1>(JSC::VM *a1, JSC::VM *a2, unint64_t a3, int a4, JSC::JSObject *this, int a6)
{
  JSC::Structure *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t v38;
  int v39;
  uint64_t IndexQuickly;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;

  if ((*((_BYTE *)this + 4) & 0xEu) > 9)
    goto LABEL_33;
  v12 = (JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE));
  if (*((_BYTE *)this + 5) != 36
    || (v13 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30)) == 0
    || (v14 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v13 != *(_QWORD *)(v14 + 672))
    || ((v15 = *(_QWORD *)(v14 + 2304), (v15 & 1) != 0)
      ? (v16 = (v15 >> 1) & 3)
      : (v16 = *(unsigned __int8 *)(v15 + 4)),
        v16 == 2))
  {
    if (*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 9) != 36)
    {
      LOBYTE(v18) = *(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8);
      goto LABEL_18;
    }
    v17 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
    v18 = *(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8);
    v19 = (v18 >> 1) & 7;
    if ((v18 & 0x10) != 0)
      v19 = ((v18 & 0xE) + 10) >> 1;
    v20 = *(_DWORD *)(v17 + 4 * v19 + 852);
    if (v20)
      v21 = 16 * (v20 & 0xFFFFFFFE);
    else
      v21 = 0;
    if ((JSC::Structure *)v21 != v12
      || ((v22 = *(_QWORD *)(v17 + 2304), (v22 & 1) != 0)
        ? (v23 = (v22 >> 1) & 3)
        : (v23 = *(unsigned __int8 *)(v22 + 4)),
          v23 == 2))
    {
LABEL_18:
      if ((v18 & 0x20) == 0)
      {
        v24 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
        if ((!v24 || *(_BYTE *)(*(_QWORD *)(v24 + 2048) + 4) != 2)
          && (JSC::Structure::holesMustForwardToPrototypeSlow(v12, this) & 1) == 0)
        {
          goto LABEL_22;
        }
      }
LABEL_33:
      if (a6)
      {
        v38 = 0;
        v39 = a4;
        while (1)
        {
          v57 = v38;
          IndexQuickly = JSC::JSObject::tryGetIndexQuickly(this, v38);
          if (!IndexQuickly)
            IndexQuickly = JSC::JSObject::getIfPropertyExists<unsigned long long>(this, a1, (const WTF::StringImpl *)&v57, v43, v44, v45, v46, v47);
          v49 = IndexQuickly;
          if (*((_DWORD *)a2 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(a2, v41, v42, v43, v44, v45, v46, v47))
              break;
          }
          if (v49)
          {
            JSC::JSObject::putDirectIndex(a3, (uint64_t)a1, (JSC::VM *)(v39 + v38), v49, 0, 2, v46, v47, v48);
            if (*((_DWORD *)a2 + 20))
            {
              if (JSC::VM::hasExceptionsAfterHandlingTraps(a2, v50, v51, v52, v53, v54, v55, v56))
                break;
            }
          }
          ++v38;
          result = 1;
          if (a6 == v38)
            return result;
        }
        return 0;
      }
      return 1;
    }
  }
LABEL_22:
  if (!a6)
    return 1;
  v25 = 0;
  while (1)
  {
    v26 = JSC::JSObject::tryGetIndexQuickly((uint64_t)this, v25, 0);
    if (v26)
    {
      JSC::JSObject::putDirectIndex(a3, (uint64_t)a1, (JSC::VM *)(a4 + v25), v26, 0, 2, v27, v28, v29);
      if (*((_DWORD *)a2 + 20))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps(a2, v30, v31, v32, v33, v34, v35, v36))
          break;
      }
    }
    if (a6 == ++v25)
      return 1;
  }
  return 0;
}

uint64_t JSC::arrayProtoPrivateFuncAppendMemcpy(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::VM *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v24;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v11 = *((_QWORD *)a2 + 6);
  v12 = *((_QWORD *)a2 + 7);
  v13 = *((_QWORD *)a2 + 8);
  if (v13 >= 0xFFFE000000000000 && (v13 & 0x80000000) == 0)
    v15 = v13;
  else
    v15 = COERCE_DOUBLE(v13 - 0x2000000000000);
  a4.n128_u64[0] = v13 - 0x2000000000000;
  if ((JSC::JSArray::appendMemcpy(*((JSC::JSArray **)a2 + 6), this, v10, v15, (JSC::JSArray *)v12, a7, a8, a9, a4) & 1) != 0)
    return 10;
  if (!*((_DWORD *)v10 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v10, v16, v17, v18, v19, v20, v21, v22))
  {
    if ((*(_BYTE *)(v12 + 4) & 0xE) != 0)
      v24 = *(_DWORD *)(*(_QWORD *)(v12 + 8) - 8);
    else
      v24 = 0;
    JSC::moveElements<(JSC::FillMode)1>(this, v10, v11, v15, (JSC::JSObject *)v12, v24);
    return 10;
  }
  return 0;
}

unint64_t JSC::arrayProtoPrivateFuncFromFast(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  int v25;
  __int128 *v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int64x2_t *v36;
  int64x2_t *v37;
  int8x8_t v38;
  int64x2_t *v39;
  char *v40;
  uint32x2_t v41;
  uint64_t *v42;
  _OWORD *v43;
  uint64_t v44;
  _OWORD *v45;
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  _OWORD *v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v10 = *((_QWORD *)this + 7);
  v70 = v10;
  v11 = *((_QWORD *)a2 + 6);
  v12 = v11 != *((_QWORD *)this + 29) && (v11 & 0xFFFE000000000002) == 0;
  if (v12 && *(unsigned __int8 *)(v11 + 5) > 0x16u)
    return 10;
  v13 = *((_QWORD *)a2 + 7);
  if ((v13 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v13 + 5) != 36)
    return 10;
  v14 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28);
  v15 = *(_QWORD *)(v14 + 2216);
  v16 = (v15 & 1) != 0 ? (v15 >> 1) & 3 : *(unsigned __int8 *)(v15 + 4);
  if (v16 == 2 || *(_BYTE *)(*(_QWORD *)(v14 + 2048) + 4) == 2)
    return 10;
  v17 = *(_QWORD *)(v14 + 2304);
  v18 = (v17 & 1) != 0 ? (v17 >> 1) & 3 : *(unsigned __int8 *)(v17 + 4);
  if (v18 == 2)
    return 10;
  v19 = *(unsigned __int8 *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 8);
  v20 = (v19 >> 1) & 7;
  if ((v19 & 0x10) != 0)
    v20 = ((v19 & 0xE) + 10) >> 1;
  v21 = *(_DWORD *)(v14 + 4 * v20 + 852);
  v22 = v21 ? 16 * (v21 & 0xFFFFFFFE) : 0;
  if (v22 != 16 * (*(_DWORD *)v13 & 0xFFFFFFFE))
  {
    if ((v19 & 0x20) != 0)
      return 10;
    v63 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x30);
    if (!v63)
      v63 = *(_QWORD *)(v13 + 16);
    if (v63 != *(_QWORD *)(v14 + 672)
      || JSC::JSObject::getDirectOffset((_DWORD *)v13, *(JSC::VM **)(v14 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 56) + 41952) + 2712), a4, a5, a6, a7, a8) != -1)
    {
      return 10;
    }
  }
  v23 = *(_BYTE *)(v13 + 4);
  v24 = 10;
  if ((v23 & 0xE) == 0xC)
    return v24;
  v25 = v23 & 0xF;
  if (v25 == 1)
    return v24;
  v26 = *(__int128 **)(v13 + 8);
  v27 = *((unsigned int *)v26 - 2);
  if ((v23 & 0xEu) > 9 || v27 >> 5 >= 0xC35)
  {
    v24 = JSC::constructEmptyArray((unint64_t)this, 0, *((unsigned int *)v26 - 2), 0, a5, a6, a7, a8, a9);
    if (*(_DWORD *)(v10 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v51, v52, v53, v54, v55, v56, v57))
    {
      return 0;
    }
    JSC::moveElements<(JSC::FillMode)0>(this, v10, v24, (JSC::JSObject *)v13, v27);
    return v24;
  }
  switch(v25)
  {
    case 7:
      if ((_DWORD)v27)
      {
        v58 = *((unsigned int *)v26 - 2);
        v59 = *(_QWORD *)(v13 + 8);
        v28 = 7;
        do
        {
          v59 += 8;
          --v58;
        }
        while (v58);
      }
      else
      {
        v28 = 7;
      }
      break;
    case 5:
      v36 = (int64x2_t *)((char *)v26 + 8 * v27);
      if (v27 < 0x20)
      {
        if ((_DWORD)v27)
        {
          v50 = 8 * v27;
          v42 = *(uint64_t **)(v13 + 8);
          v28 = 5;
          while (*v42)
          {
            ++v42;
            v50 -= 8;
            if (!v50)
              goto LABEL_28;
          }
LABEL_55:
          if (v42 != (uint64_t *)v36)
          {
            v28 = 9;
            break;
          }
        }
      }
      else
      {
        v37 = *(int64x2_t **)(v13 + 8);
        do
        {
          v38 = (int8x8_t)vmovn_s64(vceqzq_s64(*v37));
          if (v38)
            goto LABEL_54;
          v39 = v37 + 1;
          v40 = &v37[1].i8[8];
          ++v37;
        }
        while (v40 < (char *)v36);
        if (v39 < v36)
        {
          v38 = (int8x8_t)vmovn_s64(vceqzq_s64(v36[-1]));
          if (v38)
          {
            v37 = v36 - 1;
LABEL_54:
            v41 = (uint32x2_t)vorn_s8((int8x8_t)0x100000000, v38);
            v42 = &v37->i64[vpmin_u32(v41, v41).u8[0]];
            goto LABEL_55;
          }
        }
      }
      v28 = 5;
      break;
    case 3:
      if ((_DWORD)v27)
        v28 = 9;
      else
        v28 = 3;
      break;
    default:
      v28 = v23 & 0xF;
      break;
  }
LABEL_28:
  v29 = *((_DWORD *)this + (v28 >> 1) + 223);
  if (v29)
    v30 = 16 * (v29 & 0xFFFFFFFE);
  else
    v30 = 0;
  if ((*(_BYTE *)(v30 + 8) & 0xEu) > 9)
    return 10;
  v69 = v10;
  v31 = JSC::JSArray::tryCreateUninitializedRestricted(&v69, 0, v30, v27, a5, a6, a7, a8);
  v24 = v31;
  if (v31)
  {
    if (v28 == 5)
    {
      v43 = *(_OWORD **)(v31 + 8);
      if (v27 > 0x1E)
      {
        v45 = (_OWORD *)((char *)v43 + 8 * v27);
        v46 = (_OWORD *)((char *)v43 + ((8 * v27) & 0x7FFFFFFE0));
        while (v43 != v46)
        {
          v47 = *v26;
          v48 = v26[1];
          v26 += 2;
          *v43 = v47;
          v43[1] = v48;
          v43 += 2;
        }
        while (v43 != v45)
        {
          v49 = *(_QWORD *)v26;
          v26 = (__int128 *)((char *)v26 + 8);
          *(_QWORD *)v43 = v49;
          v43 = (_OWORD *)((char *)v43 + 8);
        }
      }
      else if ((_DWORD)v27)
      {
        do
        {
          v44 = *(_QWORD *)v26;
          v26 = (__int128 *)((char *)v26 + 8);
          *(_QWORD *)v43 = v44;
          v43 = (_OWORD *)((char *)v43 + 8);
          --v27;
        }
        while (v27);
      }
    }
    else if (v28 != 3)
    {
      if (v28 == 7)
      {
        v60 = *(_OWORD **)(v31 + 8);
        if (v27 > 0x1E)
        {
          v64 = (_OWORD *)((char *)v60 + 8 * v27);
          v65 = (_OWORD *)((char *)v60 + ((8 * v27) & 0x7FFFFFFE0));
          while (v60 != v65)
          {
            v66 = *v26;
            v67 = v26[1];
            v26 += 2;
            *v60 = v66;
            v60[1] = v67;
            v60 += 2;
          }
          while (v60 != v64)
          {
            v68 = *(_QWORD *)v26;
            v26 = (__int128 *)((char *)v26 + 8);
            *(_QWORD *)v60 = v68;
            v60 = (_OWORD *)((char *)v60 + 8);
          }
        }
        else if ((_DWORD)v27)
        {
          do
          {
            v61 = *(_QWORD *)v26;
            v26 = (__int128 *)((char *)v26 + 8);
            *(_QWORD *)v60 = v61;
            v60 = (_OWORD *)((char *)v60 + 8);
            --v27;
          }
          while (v27);
        }
      }
      else
      {
        v32 = *(uint64_t **)(v31 + 8);
        if (v25 == 7)
        {
          if ((_DWORD)v27)
          {
            do
            {
              v62 = *(_QWORD *)v26;
              v26 = (__int128 *)((char *)v26 + 8);
              *v32++ = v62 + 0x2000000000000;
              --v27;
            }
            while (v27);
          }
        }
        else if (v25 == 3)
        {
          if ((_DWORD)v27)
            memset_pattern16(v32, &unk_199157480, 8 * v27);
        }
        else if ((_DWORD)v27)
        {
          do
          {
            v34 = *(_QWORD *)v26;
            v26 = (__int128 *)((char *)v26 + 8);
            v33 = v34;
            if (!v34)
              v33 = 10;
            *v32++ = v33;
            --v27;
          }
          while (v27);
        }
      }
    }
  }
  else
  {
    JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)&v70);
  }
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  return v24;
}

void JSC::moveElements<(JSC::FillMode)0>(JSC::VM *a1, uint64_t a2, unint64_t a3, JSC::JSObject *this, unsigned int a5)
{
  JSC::Structure *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  JSC::VM *v23;
  uint64_t IndexQuickly;
  uint64_t v25;
  uint64_t v26;
  double v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  JSC::VM *v36;
  JSC::VM *v37;
  uint64_t IfProperty;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  JSC::VM *v56;

  if ((*((_BYTE *)this + 4) & 0xEu) > 9)
    goto LABEL_38;
  v10 = (JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE));
  if (*((_BYTE *)this + 5) == 36)
  {
    v11 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
    if (v11)
    {
      v12 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
      if (v11 == *(_QWORD *)(v12 + 672))
      {
        v13 = *(_QWORD *)(v12 + 2304);
        v14 = (v13 & 1) != 0 ? (v13 >> 1) & 3 : *(unsigned __int8 *)(v13 + 4);
        if (v14 != 2)
        {
LABEL_22:
          if (a5)
          {
            v23 = 0;
            do
            {
              IndexQuickly = JSC::JSObject::tryGetIndexQuickly((uint64_t)this, v23, 0);
              if (IndexQuickly)
                v28 = IndexQuickly;
              else
                v28 = 10;
              JSC::JSObject::putDirectIndex(a3, (uint64_t)a1, v23, v28, 0, 2, v25, v26, v27);
              if (*(_DWORD *)(a2 + 80))
              {
                v35 = *(_DWORD *)(a2 + 80);
                if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v29, v30, v31, v32, v33, v34);
                if (*(_QWORD *)(a2 + 16))
                  break;
              }
              v23 = (JSC::VM *)((_DWORD)v23 + 1);
            }
            while ((_DWORD)v23 != a5);
          }
          return;
        }
      }
    }
  }
  if (*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 9) == 36)
  {
    v15 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
    v16 = *(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8);
    v17 = (v16 >> 1) & 7;
    if ((v16 & 0x10) != 0)
      v17 = ((v16 & 0xE) + 10) >> 1;
    v18 = *(_DWORD *)(v15 + 4 * v17 + 852);
    if (v18)
      v19 = 16 * (v18 & 0xFFFFFFFE);
    else
      v19 = 0;
    if ((JSC::Structure *)v19 == v10)
    {
      v20 = *(_QWORD *)(v15 + 2304);
      v21 = (v20 & 1) != 0 ? (v20 >> 1) & 3 : *(unsigned __int8 *)(v20 + 4);
      if (v21 != 2)
        goto LABEL_22;
    }
    if ((v16 & 0x20) != 0)
      goto LABEL_38;
  }
  else if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0x20) != 0)
  {
    goto LABEL_38;
  }
  v22 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  if ((!v22 || *(_BYTE *)(*(_QWORD *)(v22 + 2048) + 4) != 2)
    && (JSC::Structure::holesMustForwardToPrototypeSlow(v10, this) & 1) == 0)
  {
    goto LABEL_22;
  }
LABEL_38:
  if (a5)
  {
    v36 = 0;
    v37 = (JSC::VM *)a5;
    do
    {
      v56 = v36;
      IfProperty = JSC::JSObject::tryGetIndexQuickly(this, (unint64_t)v36);
      if (!IfProperty)
        IfProperty = JSC::JSObject::getIfPropertyExists<unsigned long long>(this, a1, (const WTF::StringImpl *)&v56, v40, v41, v42, v43, v44);
      v46 = IfProperty;
      if (*(_DWORD *)(a2 + 80))
      {
        v54 = *(_DWORD *)(a2 + 80);
        if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v39, v40, v41, v42, v43, v44);
        if (*(_QWORD *)(a2 + 16))
          break;
      }
      v47 = v46 ? v46 : 10;
      JSC::JSObject::putDirectIndex(a3, (uint64_t)a1, v36, v47, 0, 2, v43, v44, v45);
      if (*(_DWORD *)(a2 + 80))
      {
        v55 = *(_DWORD *)(a2 + 80);
        if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v48, v49, v50, v51, v52, v53);
        if (*(_QWORD *)(a2 + 16))
          break;
      }
      v36 = (JSC::VM *)((char *)v36 + 1);
    }
    while (v36 != v37);
  }
}

unint64_t JSC::callAsyncFunctionConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  int v10;

  v9 = (unint64_t *)((char *)a2 + 48);
  v10 = *((_DWORD *)a2 + 8) - 1;
  return JSC::constructFunction((unint64_t)this, a2, &v9, 2, 0, a6, a7, a8);
}

unint64_t JSC::constructAsyncFunctionConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  int v10;

  v9 = (unint64_t *)((char *)a2 + 48);
  v10 = *((_DWORD *)a2 + 8) - 1;
  return JSC::constructFunction((unint64_t)this, a2, &v9, 2, *((JSC::JSGlobalObject **)a2 + 5), a6, a7, a8);
}

unint64_t JSC::callAsyncGeneratorFunctionConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  int v10;

  v9 = (unint64_t *)((char *)a2 + 48);
  v10 = *((_DWORD *)a2 + 8) - 1;
  return JSC::constructFunction((unint64_t)this, a2, &v9, 3, 0, a6, a7, a8);
}

unint64_t JSC::constructAsyncGeneratorFunctionConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  int v10;

  v9 = (unint64_t *)((char *)a2 + 48);
  v10 = *((_DWORD *)a2 + 8) - 1;
  return JSC::constructFunction((unint64_t)this, a2, &v9, 3, *((JSC::JSGlobalObject **)a2 + 5), a6, a7, a8);
}

void JSC::Structure::cacheSpecialProperty(JSC::Structure *a1, _QWORD *a2, JSC::VM *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v14;
  uint64_t v15;

  v14 = *((_QWORD *)a1 + 8);
  if (!v14 || *(_BYTE *)(v14 + 5) == 1)
  {
    JSC::Structure::allocateRareData(a1, a3, a3, a4, a5, a6, a7, a8);
    v14 = *((_QWORD *)a1 + 8);
  }
  v15 = *(_QWORD *)(v14 + 64);
  if (!v15 || *(_QWORD *)(v15 + 24 * a5 + 16) != 1)
    JSC::StructureRareData::cacheSpecialPropertySlow(v14, a2, a3, (unint64_t)a1, a4, a5, a6, a8);
}

uint64_t JSC::isArray(JSC *a1, JSC::JSGlobalObject *a2, JSC::ProxyObject *a3)
{
  unsigned int v3;

  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
    return 0;
  v3 = *((unsigned __int8 *)a2 + 5);
  if (v3 < 0x17)
    return 0;
  if (v3 - 36 < 2)
    return 1;
  if (v3 == 61)
    return JSC::isArraySlow(a1, a2, a3);
  else
    return 0;
}

uint64_t *WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v10;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;

  v10 = result;
  v12 = *result;
  if (*result
    || (result = WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::expand(result, 0, a3, a4, a5, a6, a7, a8), (v12 = *v10) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a2;
  v16 = ~(*a2 << 32) + *a2;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (uint64_t *)(v12 + 8 * v19);
  v21 = *v20;
  if (*v20)
  {
    v30 = 0;
    v31 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v33 = 0;
        else
          v33 = *(unsigned int *)(v12 - 4);
        v29 = 0;
        v28 = v12 + 8 * v33;
        goto LABEL_11;
      }
      if (v21 == -1)
        v30 = v20;
      v19 = (v19 + v31) & v14;
      v20 = (uint64_t *)(v12 + 8 * v19);
      v21 = *v20;
      ++v31;
    }
    while (*v20);
    if (v30)
    {
      *v30 = 0;
      --*(_DWORD *)(*v10 - 16);
      v15 = *a2;
      v20 = v30;
    }
  }
  *v20 = v15;
  v22 = *v10;
  if (*v10)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v10;
  if (*v10)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_10;
    goto LABEL_24;
  }
  if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v32 = 8;
LABEL_21:
      result = WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::rehash(v10, v32, (uint64_t)v20, a4, a5, a6, a7, a8);
      v20 = result;
      v24 = *v10;
      if (*v10)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
      goto LABEL_10;
    }
LABEL_24:
    if (6 * *(_DWORD *)(v24 - 12) >= (2 * v27))
      v32 = (2 * v27);
    else
      v32 = v27;
    goto LABEL_21;
  }
LABEL_10:
  v28 = v24 + 8 * v27;
  v29 = 1;
LABEL_11:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v28;
  *(_BYTE *)(a9 + 16) = v29;
  return result;
}

_QWORD *WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  v9 = *a1;
  if (*a1 && (v10 = *(unsigned int *)(v9 - 4), (_DWORD)v10))
  {
    if (6 * *(_DWORD *)(v9 - 12) >= (2 * v10))
      v10 = (2 * v10);
  }
  else
  {
    v10 = 8;
  }
  return WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::rehash(a1, v10, a2, a4, a5, a6, a7, a8);
}

_QWORD *WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int v34;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (uint64_t *)(v11 + 8 * v22);
      v25 = *v24;
      if ((unint64_t)(*v24 + 1) >= 2)
      {
        v26 = *a1;
        if (*a1)
          v27 = *(_DWORD *)(v26 - 8);
        else
          v27 = 0;
        v28 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
        v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
        v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
        v31 = v27 & ((v30 >> 31) ^ v30);
        if (*(_QWORD *)(v26 + 8 * v31))
        {
          v34 = 1;
          do
            v31 = ((_DWORD)v31 + v34++) & v27;
          while (*(_QWORD *)(v26 + 8 * v31));
        }
        v32 = (_QWORD *)(v26 + 8 * v31);
        *v32 = v25;
        if (v24 == (uint64_t *)a3)
          v23 = v32;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
  }
  if (v11)
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void JSC::JSStringJoiner::reserveCapacity(JSC::JSStringJoiner *this, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  JSC::JSStringJoiner *v10;
  uint64_t v11;
  char *v13;
  JSC::JSStringJoiner *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;

  v25 = *((_QWORD *)a2 + 7);
  if (*((unsigned int *)this + 6) < a3)
  {
    v8 = a3;
    v10 = (JSC::JSStringJoiner *)*((_QWORD *)this + 2);
    v11 = *((unsigned int *)this + 7);
    if (a3 < 0x11)
    {
      v13 = (char *)this + 32;
      *((_QWORD *)this + 2) = (char *)this + 32;
      *((_DWORD *)this + 6) = 16;
    }
    else
    {
      if (a3 >> 27 || (WTF::tryFastMalloc((WTF *)(32 * a3), &v26), (v13 = v26) == 0))
      {
        JSC::throwOutOfMemoryError(a2, (JSC::JSGlobalObject *)&v25);
        return;
      }
      *((_DWORD *)this + 6) = v8;
      *((_QWORD *)this + 2) = v13;
    }
    if ((_DWORD)v11)
    {
      v14 = v10;
      do
      {
        v15 = *(WTF::StringImpl **)v14;
        *(_QWORD *)v14 = 0;
        *(_QWORD *)v13 = v15;
        *(_OWORD *)(v13 + 8) = *(_OWORD *)((char *)v14 + 8);
        *((_WORD *)v13 + 12) = *((_WORD *)v14 + 12);
        v16 = *(WTF::StringImpl **)v14;
        *(_QWORD *)v14 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
          {
            WTF::StringImpl::~StringImpl(v16, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
          }
          else
          {
            *(_DWORD *)v16 -= 2;
          }
        }
        v14 = (JSC::JSStringJoiner *)((char *)v14 + 32);
        v13 += 32;
      }
      while (v14 != (JSC::JSStringJoiner *)((char *)v10 + 32 * v11));
    }
    if ((JSC::JSStringJoiner *)((char *)this + 32) != v10 && v10)
    {
      if (*((JSC::JSStringJoiner **)this + 2) == v10)
      {
        *((_QWORD *)this + 2) = 0;
        *((_DWORD *)this + 6) = 0;
      }
      WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::holesMustForwardToPrototype(JSC *this, JSC::JSObject *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v3 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  if (*(_BYTE *)(v3 + 9) == 36)
  {
    v4 = *(_QWORD *)(v3 + 40);
    v5 = *(unsigned __int8 *)(v3 + 8);
    v6 = (v5 >> 1) & 7;
    if ((v5 & 0x10) != 0)
      v6 = ((v5 & 0xE) + 10) >> 1;
    v7 = *(_DWORD *)(v4 + 4 * v6 + 852);
    if (v7)
      v8 = 16 * (v7 & 0xFFFFFFFE);
    else
      v8 = 0;
    if (v8 == v3)
    {
      v9 = *(_QWORD *)(v4 + 2304);
      v10 = (v9 & 1) != 0 ? (v9 >> 1) & 3 : *(unsigned __int8 *)(v9 + 4);
      if (v10 != 2)
        return 0;
    }
  }
  else
  {
    LOBYTE(v5) = *(_BYTE *)(v3 + 8);
  }
  if ((v5 & 0x20) != 0)
    return 1;
  v11 = *(_QWORD *)(v3 + 40);
  if (v11 && *(_BYTE *)(*(_QWORD *)(v11 + 2048) + 4) == 2)
    return 1;
  else
    return JSC::Structure::holesMustForwardToPrototypeSlow((JSC::Structure *)v3, this);
}

uint64_t JSC::repeatCharacter<char16_t>(JSC::JSGlobalObject *a1, JSC::JSGlobalObject *a2, unsigned int a3)
{
  JSC::VM *v4;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t OutOfMemoryError;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  JSC::Exception *v40;
  WTF::StringImpl *v41;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (a3 <= 0x7FFFFFEF
    && (v6 = (__int16)a2, WTF::tryFastCompactMalloc((WTF *)(2 * a3 + 20), &v41), (v13 = v41) != 0))
  {
    v14 = 0;
    *(_DWORD *)v41 = 2;
    *((_DWORD *)v13 + 1) = a3;
    *((_QWORD *)v13 + 1) = (char *)v13 + 20;
    *((_DWORD *)v13 + 4) = 0;
    do
      *((_WORD *)v13 + v14++ + 10) = v6;
    while (a3 != (_DWORD)v14);
    v41 = v13;
    v22 = JSC::jsString((uint64_t)v4, (JSC::VM *)&v41, v7, v8, v9, v10, v11, v12);
    v23 = v41;
    v41 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::~StringImpl(v23, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      else
      {
        *(_DWORD *)v23 -= 2;
      }
    }
  }
  else
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, a2);
    v40 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v40 = (JSC::Exception *)JSC::Exception::create((uint64_t)v4, (JSC::VM *)OutOfMemoryError, 0, v34, v35, v36, v37, v38);
    }
    JSC::VM::throwException(v4, a1, v40, v39, v34, v35, v36, v37, v38);
    return 0;
  }
  return v22;
}

BOOL WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)1,JSC::JSStringJoiner::Entry>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>(a1, (WTF::AtomStringImpl *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  if (v9)
  {
    v10 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12);
    v11 = *(_QWORD *)v9;
    *(_QWORD *)v9 = 0;
    *(_QWORD *)v10 = v11;
    *(_OWORD *)(v10 + 8) = *(_OWORD *)(v9 + 8);
    *(_WORD *)(v10 + 24) = *(_WORD *)(v9 + 24);
    ++*(_DWORD *)(a1 + 12);
  }
  return v9 != 0;
}

unint64_t WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>(uint64_t a1, WTF::AtomStringImpl *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t StatusReg;
  unint64_t i;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v10 + 32 * *(unsigned int *)(a1 + 12) > a3)
  {
    if (WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>(a1, a2, a3, a4, a5, a6, a7, a8))return *(_QWORD *)a1 + v8 - v10;
    return 0;
  }
  v11 = *(unsigned int *)(a1 + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v16 = *(unsigned int *)(a1 + 12);
  if (v14 >= 0x11)
  {
    if (!(v14 >> 27))
    {
      WTF::tryFastMalloc((WTF *)(32 * v14), &v25);
      v17 = v25;
      if (v25)
      {
        *(_DWORD *)(a1 + 8) = v14;
        *(_QWORD *)a1 = v17;
        goto LABEL_15;
      }
    }
    return 0;
  }
  v17 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 16;
LABEL_15:
  if ((_DWORD)v16)
  {
    v18 = v10 + 32 * v16;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    for (i = v10; i != v18; i += 32)
    {
      v21 = *(_QWORD *)i;
      *(_QWORD *)i = 0;
      *(_QWORD *)v17 = v21;
      *(_OWORD *)(v17 + 8) = *(_OWORD *)(i + 8);
      *(_WORD *)(v17 + 24) = *(_WORD *)(i + 24);
      v22 = *(_QWORD *)i;
      *(_QWORD *)i = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v22, a2, a3, a4, a5, a6, a7, a8);
          v23 = *(_QWORD *)(StatusReg + 752);
          if (v23)
          {
            if (!(v22 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v22 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v22)) & 1) != 0)
            {
LABEL_28:
              v24 = *(unsigned int *)(v23 + 8000);
              if (v24 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v23, v22, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v23 + 8 * v24) = v22 | 0x5000000000000;
                *(_DWORD *)(v23 + 8000) = v24 + 1;
              }
              goto LABEL_22;
            }
            if (v22 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v22 >> 24)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v22 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v22) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
                goto LABEL_28;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v23, v22, 1, a4, a5, a6, a7, a8);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v22, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v22 -= 2;
        }
      }
LABEL_22:
      v17 += 32;
    }
  }
  if (a1 + 16 != v10 && v10)
  {
    if (*(_QWORD *)a1 == v10)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return v8;
}

uint64_t WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 <= v8)
    return 1;
  v14 = *(_QWORD *)a1;
  v15 = *(unsigned int *)(a1 + 12);
  if (v11 < 0x11)
  {
    v16 = a1 + 16;
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 16;
  }
  else
  {
    if (v11 >> 27)
      return 0;
    WTF::tryFastMalloc((WTF *)(32 * v11), &v29);
    v16 = v29;
    if (!v29)
      return 0;
    *(_DWORD *)(a1 + 8) = v11;
    *(_QWORD *)a1 = v16;
  }
  if ((_DWORD)v15)
  {
    v17 = v14 + 32 * v15;
    v18 = v14;
    do
    {
      v19 = *(WTF::StringImpl **)v18;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)v16 = v19;
      *(_OWORD *)(v16 + 8) = *(_OWORD *)(v18 + 8);
      *(_WORD *)(v16 + 24) = *(_WORD *)(v18 + 24);
      v20 = *(WTF::StringImpl **)v18;
      *(_QWORD *)v18 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::~StringImpl(v20, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
      }
      v18 += 32;
      v16 += 32;
    }
    while (v18 != v17);
  }
  result = 1;
  if (a1 + 16 != v14 && v14)
  {
    if (*(_QWORD *)a1 == v14)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
    return 1;
  }
  return result;
}

uint64_t JSC::NumericStrings::lookup(JSC::NumericStrings *this, double a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (~(*(_QWORD *)&a2 << 32) + *(_QWORD *)&a2) ^ ((~(*(_QWORD *)&a2 << 32) + *(_QWORD *)&a2) >> 22);
  v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((unint64_t)(v2 + ~(v2 << 13)) >> 8));
  v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
  return (uint64_t)this + 24 * ((v4 >> 31) ^ v4) + 10240;
}

_BYTE *WTF::StringView::toString@<X0>(_BYTE *this@<X0>, int **a2@<X8>)
{
  _WORD *v3;
  size_t v4;
  int *v5;
  const void *v6;
  size_t v7;

  v3 = *(_WORD **)this;
  v4 = *((unsigned int *)this + 2);
  if (!this[12])
  {
    if (v3)
    {
      if ((_DWORD)v4)
      {
        if (v4 < 0x7FFFFFF0)
        {
          v5 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v4 + 20));
          this = v5 + 5;
          *v5 = 2;
          v5[1] = v4;
          *((_QWORD *)v5 + 1) = v5 + 5;
          v5[4] = 0;
          if ((_DWORD)v4 == 1)
          {
            *(_WORD *)this = *v3;
            goto LABEL_17;
          }
          v6 = v3;
          v7 = 2 * v4;
LABEL_16:
          this = memcpy(this, v6, v7);
          goto LABEL_17;
        }
LABEL_18:
        __break(0xC471u);
        JUMPOUT(0x1988B3A74);
      }
LABEL_13:
      v5 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_17;
    }
LABEL_12:
    v5 = 0;
    goto LABEL_17;
  }
  if (!v3)
    goto LABEL_12;
  if (!(_DWORD)v4)
    goto LABEL_13;
  if ((v4 & 0x80000000) != 0)
    goto LABEL_18;
  v5 = (int *)WTF::fastCompactMalloc((WTF *)(v4 + 20));
  this = v5 + 5;
  *v5 = 2;
  v5[1] = v4;
  *((_QWORD *)v5 + 1) = v5 + 5;
  v5[4] = 4;
  if ((_DWORD)v4 != 1)
  {
    v6 = v3;
    v7 = v4;
    goto LABEL_16;
  }
  *this = *(_BYTE *)v3;
LABEL_17:
  *a2 = v5;
  return this;
}

void JSC::StringRecursionChecker::~StringRecursionChecker(JSC::StringRecursionChecker *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v24;

  if (!*((_QWORD *)this + 2))
  {
    v8 = *((_QWORD *)this + 1);
    v9 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56) + 90576);
    if (*v9 == v8)
    {
      *v9 = 0;
    }
    else
    {
      v10 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)this + 56) + 90584);
      v11 = *v10;
      if (*v10)
      {
        v12 = *(_DWORD *)(v11 - 8);
        v13 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = *(_QWORD *)(v11 + 8 * v16);
        if (v17 != v8)
        {
          v24 = 1;
          while (v17)
          {
            v16 = ((_DWORD)v16 + v24) & v12;
            v17 = *(_QWORD *)(v11 + 8 * v16);
            ++v24;
            if (v17 == v8)
              goto LABEL_7;
          }
          v16 = *(unsigned int *)(v11 - 4);
        }
LABEL_7:
        if (v16 != *(_DWORD *)(v11 - 4))
        {
          *(_QWORD *)(v11 + 8 * v16) = -1;
          ++*(_DWORD *)(*v10 - 16);
          v18 = *v10;
          v19 = *v10 ? *(_DWORD *)(v18 - 12) - 1 : -1;
          *(_DWORD *)(v18 - 12) = v19;
          v20 = *v10;
          if (*v10)
          {
            v21 = 6 * *(_DWORD *)(v20 - 12);
            v22 = *(_DWORD *)(v20 - 4);
            if (v21 < v22 && v22 >= 9)
              WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::rehash(v10, v22 >> 1, 0, a4, a5, a6, a7, a8);
          }
        }
      }
    }
  }
}

uint64_t JSC::toLocaleString(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char OwnStaticPropertySlot;
  int v45;
  _BYTE *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unsigned __int16 *v54;
  unsigned int v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  int v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  char v69;
  int v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int8x16_t **v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  _BYTE *v107;
  uint64_t v108;
  unsigned int v109;
  JSC::VMTraps *v110;
  JSC::VMTraps *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  JSC::VM *v116;
  uint64_t v117;
  uint64_t v118;
  JSC::VMTraps *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  unint64_t v130;
  int v131;
  unsigned int v132;
  int v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  JSC::VM *v139;
  uint64_t v140;
  uint64_t v141;
  JSC::VMTraps *v142;
  char *v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  unsigned __int8 *v155;
  int v156;
  unint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  unint64_t v162;
  size_t v163;
  char *v164;
  char *v165;
  int v166;
  uint64_t v167;
  unsigned __int8 *v168;
  JSC::VM **v169;
  uint64_t v170;
  int v171;
  int v172;
  JSC::VM **p_dst;
  uint64_t v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  unsigned __int16 *v184;
  unsigned int v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  char v191;
  int v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  char v196;
  int v197;
  unint64_t v198;
  unint64_t v199;
  char v200;
  int v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  int8x16_t **v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned __int8 *v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int *v215;
  uint64_t v216;
  uint64_t Index;
  int v218;
  char v219;
  int v220;
  _BYTE *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned __int16 *v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  unsigned __int8 *v229;
  unsigned int v230;
  int v231;
  unsigned __int8 *v233;
  uint64_t v234;
  unsigned int v235;
  uint64_t v236;
  _DWORD *v237;
  int v238;
  unint64_t v239;
  JSC::VMTraps *v240;
  JSC::VMTraps *v241;
  char v242;
  JSC::Structure *v243;
  uint64_t v244;
  uint64_t v245;
  JSC::VMTraps *v246;
  JSC::VMTraps *v247;
  JSC::VMTraps *v248;
  JSC::VMTraps *v249;
  JSC::VMTraps *v250;
  JSC::VMTraps *v251;
  unint64_t v252;
  char *v253;
  char *v254;
  char *v255;
  char *v256;
  unint64_t v257;
  unsigned __int8 *v258;
  JSC::VM *v259;
  uint64_t v260;
  uint64_t (*v261)(unint64_t);
  uint64_t v262;
  unint64_t v263;
  _DWORD *v264;
  _DWORD *v265;
  _QWORD v266[2];
  uint64_t v267;
  char v268;
  int8x16_t **v269;
  uint64_t v270;
  JSC::VM *__dst;
  _QWORD v272[3];
  uint64_t v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  uint64_t v277;
  char __s[8];
  int v279;
  uint64_t v280;

  v9 = a4;
  v280 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a1 + 7);
  v259 = (JSC::VM *)v11;
  v260 = a2;
  v12 = *(_QWORD *)(v11 + 41952);
  v13 = *(_QWORD *)(v12 + 2496);
  a9.i64[0] = 0xFFFFFFFF00000000;
  v263 = 0xFFFFFFFF00000000;
  LOBYTE(v267) = 0;
  v268 = 0;
  v269 = 0;
  v270 = 0;
  v265 = 0;
  memset(v266, 0, 13);
  v264 = (_DWORD *)a2;
  if ((a2 & 0xFFFE000000000002) != 0)
    goto LABEL_402;
  v14 = a2;
  v15 = *(unsigned __int8 *)(a2 + 5);
  if (v15 <= 0x16)
  {
    if (v15 == 2)
    {
      v149 = a3;
      v213 = a4;
      if (*(_QWORD *)(v12 + 1768) == v13)
      {
        v214 = *(_QWORD *)(a2 + 8);
        if ((v214 & 1) != 0)
          v215 = (unsigned int *)(a2 + 16);
        else
          v215 = (unsigned int *)(v214 + 4);
        v216 = *v215;
        if ((v216 & 0x80000000) != 0)
          Index = COERCE__INT64((double)v216) + 0x2000000000000;
        else
          Index = v216 | 0xFFFE000000000000;
        v218 = 14;
        goto LABEL_393;
      }
      if (v13)
      {
        v220 = *(_DWORD *)(v13 + 16);
        if ((v220 & 0x20) == 0)
        {
          v221 = *(_BYTE **)(v13 + 8);
          v222 = *(unsigned int *)(v13 + 4);
          if ((v220 & 4) != 0)
          {
            if (!(_DWORD)v222)
              goto LABEL_399;
            a3 = *v221 - 48;
            if (a3 > 9)
              goto LABEL_399;
            if (v222 >= 2 && *v221 == 48)
              goto LABEL_399;
            v233 = v221 + 1;
            v234 = v222 - 1;
            while (v234)
            {
              if (a3 > 0x19999999)
                goto LABEL_399;
              v235 = *v233 - 48;
              if (v235 > 9)
                goto LABEL_399;
              v219 = 0;
              v56 = __CFADD__(v235, 10 * a3);
              a3 = v235 + 10 * (_DWORD)a3;
              ++v233;
              --v234;
              if (v56)
                goto LABEL_400;
            }
          }
          else
          {
            if (!(_DWORD)v222)
              goto LABEL_399;
            a3 = *(unsigned __int16 *)v221 - 48;
            if (a3 > 9)
              goto LABEL_399;
            if (*(_WORD *)v221 == 48 && v222 > 1)
              goto LABEL_399;
            v225 = (unsigned __int16 *)(v221 + 2);
            v226 = v222 - 1;
            while (v226)
            {
              if (a3 > 0x19999999)
                goto LABEL_399;
              v227 = *v225 - 48;
              if (v227 > 9)
                goto LABEL_399;
              v219 = 0;
              v56 = __CFADD__(v227, 10 * a3);
              a3 = v227 + 10 * (_DWORD)a3;
              ++v225;
              --v226;
              if (v56)
                goto LABEL_400;
            }
          }
          if ((_DWORD)a3 != -1)
          {
            v236 = *(_QWORD *)(a2 + 8);
            v237 = (_DWORD *)((v236 & 1) != 0 ? a2 + 16 : v236 + 4);
            if (*v237 > a3)
            {
              Index = JSC::JSString::getIndex((JSC::JSString *)a2, a1, a3, a4, a5, a6, a7, a8, a9);
              if (!*(_DWORD *)(v11 + 80))
                goto LABEL_456;
              v238 = *(_DWORD *)(v11 + 80);
              if ((v238 & 0x27) != 0 && (v238 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (!*(_QWORD *)(v11 + 16))
              {
LABEL_456:
                v218 = 10;
LABEL_393:
                v261 = (uint64_t (*)(unint64_t))Index;
                LODWORD(v263) = v218;
                v265 = 0;
                v219 = 1;
                BYTE1(v266[1]) = 1;
                goto LABEL_400;
              }
            }
          }
        }
      }
LABEL_399:
      v219 = 0;
LABEL_400:
      if (*(_DWORD *)(v11 + 80))
      {
        v231 = *(_DWORD *)(v11 + 80);
        if ((v231 & 0x27) != 0 && (v231 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v11 + 16))
        {
          v49 = 10;
          v9 = v213;
LABEL_384:
          a3 = v149;
          goto LABEL_109;
        }
      }
      v9 = v213;
      a3 = v149;
      if ((v219 & 1) != 0)
        goto LABEL_107;
    }
LABEL_402:
    v92 = a3;
    v93 = v9;
    v223 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v260, (unint64_t)a1);
    if (!v223)
    {
      v49 = 10;
LABEL_147:
      v9 = v93;
LABEL_148:
      a3 = v92;
      goto LABEL_109;
    }
    v14 = v223;
    v11 = *((_QWORD *)a1 + 7);
    v9 = v93;
    a3 = v92;
  }
  v16 = (_BYTE *)(v14 + 6);
  v17 = v13 >> 4;
  v18 = v14;
  if ((*(_BYTE *)(v14 + 6) & 8) == 0)
  {
    v19 = v14;
    do
    {
      v20 = *(_DWORD *)v19 & 0xFFFFFFFE;
      v21 = 16 * v20;
      if (!(_DWORD)v17 || (v17 & ~*(_DWORD *)(16 * v20 + 0x20)) != 0)
        goto LABEL_32;
      v22 = *(_QWORD *)(16 * v20 + 0x58);
      if (!v22)
      {
        v23 = *(_QWORD *)(16 * v20 + 0x40);
        if (!v23 || *(_BYTE *)(v23 + 5) != 1 && *(_DWORD *)(v23 + 80) < 2u)
          goto LABEL_32;
        v24 = a3;
        v25 = v9;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v21, (JSC::VM *)v11, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        a3 = v24;
        v9 = v25;
        if (!v22)
          goto LABEL_32;
      }
      if (!*(_DWORD *)(v22 + 24))
        goto LABEL_32;
      v26 = *(_QWORD *)(v22 + 16);
      v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
      v28 = *(unsigned int *)(v22 + 8);
      v29 = *(_DWORD *)(v13 + 16);
      if ((v26 & 1) != 0)
      {
        if ((v29 & 0x20) != 0)
          v29 = *(_DWORD *)(v13 + 32);
        v30 = *(_DWORD *)(v22 + 12);
        v31 = (v29 >> 8) & *(_QWORD *)&v30;
        v32 = *(unsigned __int8 *)(v27 + v31);
        if (!*(_BYTE *)(v27 + v31))
          goto LABEL_32;
        v33 = v27 + v28;
        v34 = 1;
        while (1)
        {
          v35 = *(_QWORD *)(v33 + 8 * (v32 - 1));
          if (v13 == (v35 & 0xFFFFFFFFFFFFLL))
            break;
          v31 = ((_DWORD)v31 + v34) & v30;
          v32 = *(unsigned __int8 *)(v27 + v31);
          ++v34;
          if (!*(_BYTE *)(v27 + v31))
            goto LABEL_32;
        }
        a6 = (v35 >> 16) & 0xFF00000000 | HIBYTE(v35);
      }
      else
      {
        if ((v29 & 0x20) != 0)
          v29 = *(_DWORD *)(v13 + 32);
        v36 = *(_DWORD *)(v22 + 12);
        v37 = v36 & (v29 >> 8);
        v38 = *(_DWORD *)(v27 + 4 * v37);
        if (!v38)
          goto LABEL_32;
        v39 = v27 + 4 * v28;
        v40 = 1;
        while (1)
        {
          v41 = (v38 - 1);
          if (v13 == *(_QWORD *)(v39 + 16 * v41))
            break;
          v37 = (v37 + v40) & v36;
          v38 = *(_DWORD *)(v27 + 4 * v37);
          ++v40;
          if (!v38)
            goto LABEL_32;
        }
        a6 = *(unsigned int *)(v39 + 16 * v41 + 8) | ((unint64_t)*(unsigned __int8 *)(v39 + 16 * v41 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v50 = v19 + 16;
          v51 = a6 << 32;
        }
        else
        {
          v50 = *(_QWORD *)(v19 + 8) - 8;
          v51 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v50 + (v51 >> 29));
        if ((a4 & 0xFFFE000000000002) != 0)
          goto LABEL_53;
        v52 = *(unsigned __int8 *)(a4 + 5);
        if (v52 == 5)
        {
          v71 = a3;
          v72 = (unsigned int *)v19;
          v73 = v11;
          goto LABEL_106;
        }
        if (v52 == 6)
        {
          v100 = *(_DWORD *)(v21 + 16) & 3;
          v101 = *(_QWORD *)(a4 + 16);
          if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
          {
            v261 = *(uint64_t (**)(unint64_t))(a4 + 8);
            v262 = v101;
            LODWORD(v263) = HIDWORD(a6);
            v265 = (_DWORD *)v19;
            BYTE1(v266[1]) = 3;
            if (v100 == 2)
              goto LABEL_107;
            goto LABEL_342;
          }
          v103 = *(int8x16_t ***)(a4 + 24);
          v102 = *(_QWORD *)(a4 + 32);
          v261 = *(uint64_t (**)(unint64_t))(a4 + 8);
          v262 = v101;
          LODWORD(v263) = HIDWORD(a6);
          v265 = (_DWORD *)v19;
          BYTE1(v266[1]) = 3;
          if (v100 != 2)
            LOBYTE(v266[1]) = 1;
          BYTE3(v266[1]) = 1;
          v269 = v103;
          v270 = v102;
        }
        else
        {
LABEL_53:
          v261 = (uint64_t (*)(unint64_t))a4;
          v265 = (_DWORD *)v19;
LABEL_54:
          v263 = __PAIR64__(a6, a5);
          LOWORD(v266[1]) = 257;
        }
LABEL_107:
        if (BYTE1(v266[1]) == 1)
        {
          v49 = (uint64_t)v261;
          goto LABEL_109;
        }
        if (BYTE1(v266[1]) == 2)
        {
          v87 = v9;
          v88 = a3;
          v89 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v261, a1, a3, a4, a5, a6, a7, a8);
          a3 = v88;
          v9 = v87;
          v49 = v89;
          goto LABEL_109;
        }
        v90 = (unint64_t)v265;
        v91 = *(_QWORD *)(16 * (*v265 & 0xFFFFFFFE) + 0x28);
        v92 = a3;
        if ((v263 & 0x20) != 0)
          v90 = (unint64_t)v264;
        v93 = v9;
        if (BYTE3(v266[1]) != 1)
          goto LABEL_145;
        if ((v90 & 0xFFFE000000000002) != 0)
          goto LABEL_366;
        v94 = *(unsigned int *)(16 * (*(_DWORD *)v90 & 0xFFFFFFFE) + 0x4C);
        v95 = *(_DWORD *)(16 * (*(_DWORD *)v90 & 0xFFFFFFFE) + 0x4C) != 0;
        v96 = 16 * v94;
        if ((_DWORD)v94)
          v97 = v269 == (int8x16_t **)v96;
        else
          v97 = 1;
        if (!v97)
        {
          do
          {
            v96 = *(_QWORD *)(v96 + 16);
            v95 = v96 != 0;
          }
          while ((int8x16_t **)v96 != v269 && v96 != 0);
        }
        if (!v95)
        {
LABEL_366:
          __dst = (JSC::VM *)*((_QWORD *)a1 + 7);
          v99 = JSC::throwDOMAttributeGetterTypeError(v91, &__dst, v269, (WTF::StringImpl *)v13);
        }
        else
        {
LABEL_145:
          v99 = v261(v91);
        }
        v49 = v99;
        goto LABEL_147;
      }
LABEL_32:
      if ((*v16 & 0x20) != 0)
      {
        v42 = a3;
        v43 = v9;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v19, (JSC::VM *)v11, v13, (uint64_t)&v261);
        a3 = v42;
        v9 = v43;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_107;
      }
      v18 = *(_QWORD *)(v21 + 48);
      if (!v18)
        v18 = *(_QWORD *)(v19 + 16);
      if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) < 0x17u)
      {
        if (!v13)
          goto LABEL_46;
        v45 = *(_DWORD *)(v13 + 16);
        if ((v45 & 0x20) != 0)
          goto LABEL_46;
        v46 = *(_BYTE **)(v13 + 8);
        v47 = *(unsigned int *)(v13 + 4);
        if ((v45 & 4) != 0)
        {
          v208 = a3;
          v209 = v9;
          if (!(_DWORD)v47 || (v48 = *v46 - 48, v48 > 9) || v47 >= 2 && *v46 == 48)
          {
            v49 = 10;
LABEL_371:
            v9 = v209;
            a3 = v208;
            goto LABEL_109;
          }
          v210 = v47 - 1;
          v211 = v46 + 1;
          v49 = 10;
          while (v210)
          {
            if (v48 > 0x19999999)
              goto LABEL_371;
            v212 = *v211 - 48;
            if (v212 > 9)
              goto LABEL_371;
            v56 = __CFADD__(v212, 10 * v48);
            v48 = v212 + 10 * v48;
            --v210;
            ++v211;
            v9 = v209;
            a3 = v208;
            if (v56)
              goto LABEL_109;
          }
          v9 = v209;
          a3 = v208;
          if (v48 == -1)
            goto LABEL_46;
        }
        else
        {
          if (!(_DWORD)v47)
            goto LABEL_46;
          v48 = *(unsigned __int16 *)v46 - 48;
          if (v48 > 9 || *(_WORD *)v46 == 48 && v47 > 1)
            goto LABEL_46;
          v53 = v47 - 1;
          v54 = (unsigned __int16 *)(v46 + 2);
          v49 = 10;
          while (v53)
          {
            if (v48 <= 0x19999999)
            {
              v55 = *v54 - 48;
              if (v55 <= 9)
              {
                v56 = __CFADD__(v55, 10 * v48);
                v48 = v55 + 10 * v48;
                --v53;
                ++v54;
                if (!v56)
                  continue;
              }
            }
            goto LABEL_109;
          }
          if (v48 == -1)
            goto LABEL_46;
        }
        v57 = v48;
        v58 = *((_QWORD *)a1 + 7);
        v246 = (JSC::VMTraps *)(v58 + 64);
        v252 = v48;
        v49 = 10;
        while (2)
        {
          v59 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
          v60 = a3;
          v61 = v9;
          v62 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v59 + 0x4C) + 0x70))(v14, a1, v57, &v261);
          a3 = v60;
          v9 = v61;
          v63 = v62;
          if (*(_DWORD *)(v58 + 80))
          {
            v66 = *(_DWORD *)(v58 + 80);
            if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
            {
              JSC::VMTraps::handleTraps(v246, 7u, v60, a4, a5, a6, a7, a8);
              a3 = v60;
              v9 = v61;
            }
            if (*(_QWORD *)(v58 + 16))
              goto LABEL_109;
          }
          if ((v63 & 1) != 0)
            goto LABEL_107;
          if (BYTE2(v266[1]) == 3)
          {
            if (BYTE4(v266[1]))
            {
              v9 = v61;
              a3 = v60;
              goto LABEL_109;
            }
            v64 = *(unsigned __int8 *)(v14 + 5);
            v9 = v61;
            a3 = v60;
            if (v64 != 61)
              goto LABEL_69;
          }
          else
          {
            v64 = *(unsigned __int8 *)(v14 + 5);
            if (v64 == 61)
            {
              if (BYTE2(v266[1]) == 1)
                goto LABEL_109;
            }
            else
            {
LABEL_69:
              if ((v64 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v14 + 40) & 7u) > 2)
                {
                  LOBYTE(__dst) = 0;
                  LOBYTE(v272[0]) = 0;
                  v68 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v14, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                  v67 = v69 ? v68 : 0;
                }
                else
                {
                  v67 = *(_QWORD *)(v14 + 24);
                }
                v9 = v61;
                a3 = v60;
                if (v67 <= v252)
                  goto LABEL_109;
              }
            }
          }
          if ((*(_WORD *)(v59 + 12) & 0x800) == 0 || BYTE2(v266[1]) == 3)
          {
            v65 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
            if (!v65)
              v65 = *(_QWORD *)(v14 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v65 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t))(16
                                                                                       * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)
                                                                                       + 0xB0))(v14, a1, a3);
            }
            else
            {
              v65 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
              if (!v65)
                v65 = *(_QWORD *)(v14 + 16);
            }
            if (*(_DWORD *)(v58 + 80))
            {
              v70 = *(_DWORD *)(v58 + 80);
              if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v246, 7u, a3, a4, a5, a6, a7, a8);
              v9 = v61;
              a3 = v60;
              if (*(_QWORD *)(v58 + 16))
                goto LABEL_109;
            }
            else
            {
              v9 = v61;
              a3 = v60;
            }
          }
          if ((v65 & 0xFFFE000000000002) != 0)
            goto LABEL_109;
          v14 = v65;
          v57 = v252;
          if (*(unsigned __int8 *)(v65 + 5) <= 0x16u)
            goto LABEL_109;
          continue;
        }
      }
      v16 = (_BYTE *)(v18 + 6);
      v19 = v18;
    }
    while ((*(_BYTE *)(v18 + 6) & 8) == 0);
  }
  if (!v13)
    goto LABEL_160;
  v106 = *(_DWORD *)(v13 + 16);
  if ((v106 & 0x20) != 0)
    goto LABEL_160;
  v107 = *(_BYTE **)(v13 + 8);
  v108 = *(unsigned int *)(v13 + 4);
  if ((v106 & 4) != 0)
  {
    if ((_DWORD)v108)
    {
      v109 = *v107 - 48;
      if (v109 <= 9 && (v108 < 2 || *v107 != 48))
      {
        v228 = v108 - 1;
        v229 = v107 + 1;
        while (v228)
        {
          if (v109 <= 0x19999999)
          {
            v230 = *v229 - 48;
            if (v230 <= 9)
            {
              v56 = __CFADD__(v230, 10 * v109);
              v109 = v230 + 10 * v109;
              --v228;
              ++v229;
              if (!v56)
                continue;
            }
          }
          goto LABEL_160;
        }
        if (v109 != -1)
          goto LABEL_298;
      }
    }
    goto LABEL_160;
  }
  if (!(_DWORD)v108)
    goto LABEL_160;
  v109 = *(unsigned __int16 *)v107 - 48;
  if (v109 > 9 || *(_WORD *)v107 == 48 && v108 > 1)
    goto LABEL_160;
  v183 = v108 - 1;
  v184 = (unsigned __int16 *)(v107 + 2);
  while (v183)
  {
    if (v109 <= 0x19999999)
    {
      v185 = *v184 - 48;
      if (v185 <= 9)
      {
        v56 = __CFADD__(v185, 10 * v109);
        v109 = v185 + 10 * v109;
        --v183;
        ++v184;
        if (!v56)
          continue;
      }
    }
    goto LABEL_160;
  }
  if (v109 == -1)
  {
LABEL_160:
    v110 = (JSC::VMTraps *)*((_QWORD *)a1 + 7);
    v111 = (JSC::VMTraps *)((char *)v110 + 64);
    v112 = &__s[1];
    v113 = &__s[3];
    v49 = 10;
    while (1)
    {
      a7 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v18 + 6) & 8) == 0)
      {
        if ((_DWORD)v17 && (v17 & ~*(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x20)) == 0)
        {
          v114 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x58);
          if (v114)
            goto LABEL_465;
          v115 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x40);
          if (v115 && (*(_BYTE *)(v115 + 5) == 1 || *(_DWORD *)(v115 + 80) >= 2u))
          {
            v247 = v110;
            v253 = v113;
            v116 = v110;
            v117 = a3;
            v118 = v9;
            v119 = v111;
            v120 = v112;
            v243 = (JSC::Structure *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE));
            JSC::Structure::materializePropertyTable(v243, v116, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
            v113 = v253;
            v112 = v120;
            v111 = v119;
            a7 = (uint64_t)v243;
            v110 = v247;
            a3 = v117;
            v9 = v118;
            if (v114)
            {
LABEL_465:
              if (*(_DWORD *)(v114 + 24))
              {
                v121 = *(_QWORD *)(v114 + 16);
                v122 = v121 & 0xFFFFFFFFFFFFFFFELL;
                v123 = *(unsigned int *)(v114 + 8);
                v124 = *(_DWORD *)(v13 + 16);
                if ((v121 & 1) != 0)
                {
                  if ((v124 & 0x20) != 0)
                    v124 = *(_DWORD *)(v13 + 32);
                  v125 = *(_DWORD *)(v114 + 12);
                  v126 = (v124 >> 8) & *(_QWORD *)&v125;
                  v127 = *(unsigned __int8 *)(v122 + v126);
                  if (*(_BYTE *)(v122 + v126))
                  {
                    v128 = v122 + v123;
                    v129 = 1;
                    while (1)
                    {
                      v130 = *(_QWORD *)(v128 + 8 * (v127 - 1));
                      if (v13 == (v130 & 0xFFFFFFFFFFFFLL))
                        break;
                      v126 = ((_DWORD)v126 + v129) & v125;
                      v127 = *(unsigned __int8 *)(v122 + v126);
                      ++v129;
                      if (!*(_BYTE *)(v122 + v126))
                        goto LABEL_189;
                    }
                    a6 = (v130 >> 16) & 0xFF00000000 | HIBYTE(v130);
LABEL_186:
                    if ((_DWORD)a6 != -1)
                    {
                      a5 = HIDWORD(a6);
                      if ((int)a6 <= 63)
                      {
                        v180 = v18 + 16;
                        v181 = a6 << 32;
                      }
                      else
                      {
                        v180 = *(_QWORD *)(v18 + 8) - 8;
                        v181 = 0x3F00000000 - (a6 << 32);
                      }
                      a4 = *(_QWORD *)(v180 + (v181 >> 29));
                      if ((a4 & 0xFFFE000000000002) != 0)
                        goto LABEL_347;
                      v201 = *(unsigned __int8 *)(a4 + 5);
                      if (v201 != 5)
                      {
                        if (v201 != 6)
                        {
LABEL_347:
                          v261 = (uint64_t (*)(unint64_t))a4;
                          v265 = (_DWORD *)v18;
                          goto LABEL_54;
                        }
                        v202 = *(_DWORD *)(a7 + 16) & 3;
                        v203 = *(_QWORD *)(a4 + 16);
                        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                                 + 0x4C)))
                        {
                          v205 = *(int8x16_t ***)(a4 + 24);
                          v204 = *(_QWORD *)(a4 + 32);
                          v261 = *(uint64_t (**)(unint64_t))(a4 + 8);
                          v262 = v203;
                          LODWORD(v263) = HIDWORD(a6);
                          v265 = (_DWORD *)v18;
                          BYTE1(v266[1]) = 3;
                          if (v202 != 2)
                            LOBYTE(v266[1]) = 1;
                          BYTE3(v266[1]) = 1;
                          v269 = v205;
                          v270 = v204;
                          goto LABEL_107;
                        }
                        v261 = *(uint64_t (**)(unint64_t))(a4 + 8);
                        v262 = v203;
                        LODWORD(v263) = HIDWORD(a6);
                        v265 = (_DWORD *)v18;
                        BYTE1(v266[1]) = 3;
                        if (v202 == 2)
                          goto LABEL_107;
LABEL_342:
                        LOBYTE(v266[1]) = 1;
                        goto LABEL_107;
                      }
                      v71 = a3;
                      v72 = (unsigned int *)v18;
                      v73 = (uint64_t)v110;
LABEL_106:
                      v74 = v9;
                      JSC::JSObject::fillGetterPropertySlot(v72, v73, (uint64_t)&v261, a4, a5, a6);
                      a3 = v71;
                      v9 = v74;
                      goto LABEL_107;
                    }
                  }
                }
                else
                {
                  if ((v124 & 0x20) != 0)
                    v124 = *(_DWORD *)(v13 + 32);
                  v131 = *(_DWORD *)(v114 + 12);
                  v132 = v131 & (v124 >> 8);
                  v133 = *(_DWORD *)(v122 + 4 * v132);
                  if (v133)
                  {
                    v134 = v122 + 4 * v123;
                    v135 = 1;
                    while (1)
                    {
                      v136 = (v133 - 1);
                      if (v13 == *(_QWORD *)(v134 + 16 * v136))
                        break;
                      v132 = (v132 + v135) & v131;
                      v133 = *(_DWORD *)(v122 + 4 * v132);
                      ++v135;
                      if (!v133)
                        goto LABEL_189;
                    }
                    a6 = *(unsigned int *)(v134 + 16 * v136 + 8) | ((unint64_t)*(unsigned __int8 *)(v134 + 16 * v136 + 12) << 32);
                    goto LABEL_186;
                  }
                }
              }
            }
          }
        }
LABEL_189:
        if ((*(_BYTE *)(v18 + 6) & 0x20) != 0)
        {
          v248 = v110;
          v254 = v113;
          v139 = v110;
          v140 = a3;
          v141 = v9;
          v142 = v111;
          v143 = v112;
          v244 = a7;
          v144 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v139, v13, (uint64_t)&v261);
          v113 = v254;
          v112 = v143;
          v111 = v142;
          a7 = v244;
          v110 = v248;
          a3 = v140;
          v9 = v141;
          if ((v144 & 1) != 0)
            goto LABEL_107;
        }
        goto LABEL_190;
      }
      v256 = v113;
      v148 = v112;
      v241 = v111;
      v149 = a3;
      v150 = v9;
      v245 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
      v242 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v245 + 0x4C) + 0x68))(v18, a1, v13, &v261);
      v250 = v110;
      if (*((_DWORD *)v110 + 20))
      {
        v177 = *((_DWORD *)v110 + 20);
        if ((v177 & 0x27) != 0 && (v177 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v241, 7u, v151, a4, a5, a6, a7, a8);
        if (*((_QWORD *)v110 + 2))
        {
LABEL_383:
          v9 = v150;
          goto LABEL_384;
        }
      }
      v9 = v150;
      a3 = v149;
      if ((v242 & 1) != 0)
        goto LABEL_107;
      if (BYTE2(v266[1]) == 3)
      {
        if (BYTE4(v266[1]))
          goto LABEL_383;
        v152 = *(unsigned __int8 *)(v18 + 5);
        if (v152 == 61)
          goto LABEL_260;
      }
      else
      {
        v152 = *(unsigned __int8 *)(v18 + 5);
        if (v152 == 61)
        {
          v9 = v150;
          a3 = v149;
          v111 = v241;
          v113 = v256;
          v112 = v148;
          a7 = v245;
          if (BYTE2(v266[1]) == 1)
            goto LABEL_109;
          goto LABEL_190;
        }
      }
      if (!v13)
        goto LABEL_260;
      if ((v152 - 50) < 0xFFFFFFF5)
        goto LABEL_260;
      v153 = *(_DWORD *)(v13 + 16);
      if ((v153 & 0x20) != 0)
        goto LABEL_260;
      v154 = *(unsigned int *)(v13 + 4);
      if (!(_DWORD)v154)
        goto LABEL_260;
      v155 = *(unsigned __int8 **)(v13 + 8);
      if ((v153 & 4) != 0)
      {
        v156 = *v155;
        if ((_DWORD)v154 == 1)
        {
LABEL_215:
          v9 = v150;
          a3 = v149;
          v111 = v241;
          v113 = v256;
          v112 = v148;
          a7 = v245;
          if ((v156 - 48) < 0xA)
            goto LABEL_109;
          goto LABEL_190;
        }
        if (v156 == 45)
        {
          v156 = v155[1];
          goto LABEL_219;
        }
        if ((v156 - 48) < 0xA)
          goto LABEL_230;
        if ((_DWORD)v154 == 8)
          goto LABEL_229;
      }
      else
      {
        v156 = *(unsigned __int16 *)v155;
        if ((_DWORD)v154 == 1)
          goto LABEL_215;
        if (v156 == 45)
        {
          v156 = *((unsigned __int16 *)v155 + 1);
LABEL_219:
          if ((v156 - 48) < 0xA)
          {
            if ((_DWORD)v154 == 2)
              goto LABEL_383;
            goto LABEL_230;
          }
          if ((_DWORD)v154 != 9)
            goto LABEL_260;
LABEL_229:
          if (v156 != 73)
            goto LABEL_260;
          goto LABEL_230;
        }
        if ((v156 - 48) < 0xA || (_DWORD)v154 == 8 && v156 == 73)
          goto LABEL_230;
      }
      if ((_DWORD)v154 != 3 || v156 != 78)
        goto LABEL_260;
LABEL_230:
      v239 = v239 & 0xFFFFFF0000000000 | v154 | ((unint64_t)((v153 >> 2) & 1) << 32);
      JSC::jsToNumber(v155, v239);
      v158 = (v157 >> 52) & 0x7FF;
      if ((_DWORD)v158 == 2047)
      {
        if ((v157 & 0xFFFFFFFFFFFFFLL) != 0)
        {
          qmemcpy(__s, "NaN", 3);
          v159 = v256;
        }
        else
        {
          if ((v157 & 0x8000000000000000) != 0)
          {
            __s[0] = 45;
            v165 = v148;
          }
          else
          {
            v165 = __s;
          }
          *(_QWORD *)v165 = 0x7974696E69666E49;
          v159 = v165 + 8;
        }
        goto LABEL_244;
      }
      v160 = v157 & 0x7FFFFFFFFFFFFFFFLL;
      if ((v157 & 0x8000000000000000) != 0 && v160)
      {
        __s[0] = 45;
        v161 = v148;
      }
      else
      {
        if (!v160)
        {
          __s[0] = 48;
          v159 = v148;
          goto LABEL_244;
        }
        v161 = __s;
      }
      v162 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v157 & 0x800FFFFFFFFFFFFFLL, v158);
      v159 = WTF::dragonbox::detail::to_shortest(v162, v163, (uint64_t)v161, v164);
LABEL_244:
      *v159 = 0;
      v166 = strlen(__s);
      memcpy(&__dst, __s, v166);
      *((_BYTE *)&v272[-1] + v166) = 0;
      v167 = *(unsigned int *)(v13 + 4);
      v168 = *(unsigned __int8 **)(v13 + 8);
      if ((*(_BYTE *)(v13 + 16) & 4) != 0)
      {
        if ((_DWORD)v167)
        {
          p_dst = &__dst;
          v174 = *(unsigned int *)(v13 + 4);
          do
          {
            v176 = *(unsigned __int8 *)p_dst;
            p_dst = (JSC::VM **)((char *)p_dst + 1);
            v175 = v176;
            if (!v176 || *v168 != v175)
              goto LABEL_260;
            ++v168;
          }
          while (--v174);
        }
      }
      else if ((_DWORD)v167)
      {
        v169 = &__dst;
        v170 = *(unsigned int *)(v13 + 4);
        while (1)
        {
          v172 = *(unsigned __int8 *)v169;
          v169 = (JSC::VM **)((char *)v169 + 1);
          v171 = v172;
          if (!v172 || *(unsigned __int16 *)v168 != v171)
            break;
          v168 += 2;
          if (!--v170)
            goto LABEL_256;
        }
LABEL_260:
        v9 = v150;
        a3 = v149;
        v111 = v241;
        v110 = v250;
        v113 = v256;
        v112 = v148;
        a7 = v245;
        goto LABEL_190;
      }
LABEL_256:
      v9 = v150;
      a3 = v149;
      v111 = v241;
      v110 = v250;
      v113 = v256;
      v112 = v148;
      a7 = v245;
      if (!*((_BYTE *)&v272[-1] + v167))
        goto LABEL_109;
LABEL_190:
      if ((*(_WORD *)(a7 + 12) & 0x800) == 0)
      {
        v137 = *(_DWORD *)v18;
LABEL_192:
        v138 = *(_QWORD *)(16 * (v137 & 0xFFFFFFFE) + 0x30);
        if (!v138)
          v138 = *(_QWORD *)(v18 + 16);
        goto LABEL_194;
      }
      v137 = *(_DWORD *)v18;
      if (BYTE2(v266[1]) == 3)
        goto LABEL_192;
      v249 = (JSC::VMTraps *)v112;
      v255 = v113;
      v240 = v111;
      v145 = a3;
      v146 = v9;
      v147 = 16 * (v137 & 0xFFFFFFFE);
      if ((*(_WORD *)(v147 + 12) & 0x800) != 0)
      {
        v138 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v147 + 76) + 0xB0))(v18, a1);
      }
      else
      {
        v138 = *(_QWORD *)(v147 + 48);
        if (!v138)
          v138 = *(_QWORD *)(v18 + 16);
      }
      if (*((_DWORD *)v110 + 20))
      {
        v178 = *((_DWORD *)v110 + 20);
        if ((v178 & 0x27) != 0 && (v178 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v240, 7u, a3, a4, a5, a6, a7, a8);
        v9 = v146;
        a3 = v145;
        v111 = v240;
        v112 = (char *)v249;
        v113 = v255;
        if (*((_QWORD *)v110 + 2))
          goto LABEL_109;
      }
      else
      {
        v9 = v146;
        a3 = v145;
        v111 = v240;
        v112 = (char *)v249;
        v113 = v255;
      }
LABEL_194:
      if ((v138 & 0xFFFE000000000002) == 0)
      {
        v18 = v138;
        if (*(unsigned __int8 *)(v138 + 5) > 0x16u)
          continue;
      }
      goto LABEL_109;
    }
  }
LABEL_298:
  v186 = v109;
  v187 = *((_QWORD *)a1 + 7);
  v251 = (JSC::VMTraps *)(v187 + 64);
  v257 = v109;
  v49 = 10;
  while (1)
  {
    v92 = a3;
    v188 = v9;
    v189 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
    v190 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v189 + 0x4C) + 0x70))(v14, a1, v186, &v261);
    v191 = v190;
    if (*(_DWORD *)(v187 + 80))
      break;
    v9 = v188;
    a3 = v92;
    if ((v190 & 1) != 0)
      goto LABEL_107;
LABEL_301:
    if (BYTE2(v266[1]) == 3)
    {
      if (BYTE4(v266[1]))
        goto LABEL_355;
      v192 = *(unsigned __int8 *)(v14 + 5);
      if (v192 == 61)
        goto LABEL_304;
    }
    else
    {
      v192 = *(unsigned __int8 *)(v14 + 5);
      if (v192 == 61)
      {
        if (BYTE2(v266[1]) == 1)
          goto LABEL_355;
        goto LABEL_304;
      }
    }
    if ((v192 - 39) <= 0xA)
    {
      if ((*(_BYTE *)(v14 + 40) & 7u) > 2)
      {
        LOBYTE(__dst) = 0;
        LOBYTE(v272[0]) = 0;
        v199 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v14, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
        v198 = v200 ? v199 : 0;
      }
      else
      {
        v198 = *(_QWORD *)(v14 + 24);
      }
      if (v198 <= v257)
        goto LABEL_355;
    }
LABEL_304:
    if ((*(_WORD *)(v189 + 12) & 0x800) == 0 || BYTE2(v266[1]) == 3)
    {
      v193 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
      if (!v193)
        v193 = *(_QWORD *)(v14 + 16);
    }
    else
    {
      if ((*(_WORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v193 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t))(16
                                                                                  * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0xB0))(v14, a1, a3);
      }
      else
      {
        v193 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
        if (!v193)
          v193 = *(_QWORD *)(v14 + 16);
      }
      if (*(_DWORD *)(v187 + 80))
      {
        v197 = *(_DWORD *)(v187 + 80);
        if ((v197 & 0x27) != 0 && (v197 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v251, 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v187 + 16))
        {
LABEL_355:
          v9 = v188;
          goto LABEL_148;
        }
      }
    }
    if ((v193 & 0xFFFE000000000002) != 0)
      goto LABEL_355;
    v14 = v193;
    v9 = v188;
    a3 = v92;
    v186 = v257;
    if (*(unsigned __int8 *)(v193 + 5) <= 0x16u)
      goto LABEL_109;
  }
  v194 = *(_DWORD *)(v187 + 80);
  if ((v194 & 0x27) != 0 && (v194 & 0x20) == 0)
    JSC::VMTraps::handleTraps(v251, 7u, a3, a4, a5, a6, a7, a8);
  v195 = *(_QWORD *)(v187 + 16);
  if (v195)
    v196 = 1;
  else
    v196 = v191;
  if ((v196 & 1) == 0)
    goto LABEL_301;
  v9 = v188;
  a3 = v92;
  if (!v195)
    goto LABEL_107;
LABEL_46:
  v49 = 10;
LABEL_109:
  if (v268)
  {
    v75 = *(_DWORD *)(v267 + 4);
    if (!v75)
    {
      __break(0xC471u);
      JUMPOUT(0x1988B4C08);
    }
    *(_DWORD *)(v267 + 4) = v75 - 1;
  }
  if (*((_DWORD *)v259 + 20))
  {
    v179 = *((_DWORD *)v259 + 20);
    if ((v179 & 0x27) != 0 && (v179 & 0x20) == 0)
    {
      v206 = v9;
      v207 = a3;
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v259 + 64), 7u, a3, a4, a5, a6, a7, a8);
      a3 = v207;
      v9 = v206;
    }
    if (*((_QWORD *)v259 + 2))
      return 0;
  }
  if ((v49 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v261) = 0;
LABEL_126:
    JSC::throwTypeError((unint64_t)a1, &v259, (uint64_t)"toLocaleString is not callable", 31);
    return 0;
  }
  if (*(_BYTE *)(v49 + 5) != 26)
  {
    v104 = v9;
    v105 = a3;
    (*(void (**)(uint64_t (**__return_ptr)(unint64_t), uint64_t))(16
                                                                                           * *(unsigned int *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0x4C)
                                                                                           + 0x38))(&v261, v49);
    a3 = v105;
    v9 = v104;
    if ((_BYTE)v261)
      goto LABEL_120;
    goto LABEL_126;
  }
  v76 = *(_QWORD *)(v49 + 24);
  if ((v76 & 1) != 0)
    v76 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v76 + 5) == 8)
  {
    LOBYTE(v261) = 1;
    v262 = *(_QWORD *)(v76 + 40);
    LOBYTE(v263) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE)
                                                                              + 0x4C));
  }
  else
  {
    LOBYTE(v261) = 2;
    v77 = *(_QWORD *)(v49 + 16);
    v262 = v76;
    v263 = v77;
  }
LABEL_120:
  LOBYTE(__dst) = 0;
  v272[2] = 0;
  v274 = 0u;
  v275 = 0u;
  v276 = 0u;
  v272[1] = &v273;
  v273 = a3;
  *(_QWORD *)&v274 = v9;
  v277 = 0;
  v272[0] = 0x800000002;
  *(_QWORD *)__s = &v273;
  v279 = 2;
  v85 = JSC::call((uint64_t *)a1, v49, (unsigned __int8 *)&v261, v260, (uint64_t)__s, a6, a7, a8);
  v258 = (unsigned __int8 *)v85;
  if (!*((_DWORD *)v259 + 20))
    goto LABEL_122;
  v182 = *((_DWORD *)v259 + 20);
  if ((v182 & 0x27) != 0 && (v182 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v259 + 64), 7u, v79, v80, v81, v82, v83, v84);
  if (*((_QWORD *)v259 + 2))
  {
    v85 = 0;
  }
  else
  {
LABEL_122:
    if ((v85 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v85 + 5) != 2)
      v85 = (uint64_t)JSC::JSValue::toStringSlowCase(&v258, (uint64_t)a1, (JSC::Structure *)1, v80, v81, v82, v83, v84);
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v272, v78, v79, v80, v81, v82, v83, v84);
  return v85;
}

JSC::JSObject *JSC::DirectArguments::length(JSC::DirectArguments *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  JSC::JSObject *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::JSObject *v26;
  JSC::JSObject *v27;

  v8 = *((_QWORD *)this + 5);
  if (!v8)
    return (JSC::JSObject *)*((unsigned int *)this + 8);
  v10 = *((_QWORD *)a2 + 7);
  if (qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v8 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    return (JSC::JSObject *)*((unsigned int *)this + 8);
  }
  result = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 1768), a4, a5, a6, a7, a8);
  v27 = result;
  if (*(_DWORD *)(v10 + 80))
  {
    v26 = result;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v12, v13, v14, v15, v16, v17, v18);
    result = v26;
    if (hasExceptionsAfterHandlingTraps)
      return 0;
  }
  if ((unint64_t)result < 0xFFFE000000000000)
  {
    v20 = (unint64_t)result - 0x2000000000000;
    if ((unint64_t)result - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase(&v27, a2, v13, v14, v15, v16, v17, v18, v19);
      v20 = v24;
    }
    v21 = (v20 >> 52) & 0x7FF;
    if ((v21 - 1023) > 0x53)
      return 0;
    v22 = v20 >> (51 - (v20 >> 52));
    if (v21 > 0x433)
      LODWORD(v22) = v20 << ((v20 >> 52) - 51);
    if (v21 >= 0x41F)
      v23 = v22;
    else
      v23 = (((1 << ((v20 >> 52) + 1)) - 1) & v22) + (1 << ((v20 >> 52) + 1));
    if ((v20 & 0x8000000000000000) == 0)
      return (JSC::JSObject *)v23;
    else
      return (JSC::JSObject *)-v23;
  }
  return result;
}

unint64_t JSC::ClonedArguments::length(JSC::ClonedArguments *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v10;
  uint64_t v12;
  JSC::JSObject *v13;
  uint64_t v14;
  double v15;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::JSObject *v17;
  JSC::JSObject *v18;

  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x12) & 0x20) != 0)
  {
    v12 = *((_QWORD *)a2 + 7);
    v13 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1768), a4, a5, a6, a7, a8);
    v18 = v13;
    if (*(_DWORD *)(v12 + 80))
    {
      v17 = v13;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v14, a3, a4, a5, a6, a7, a8);
      v13 = v17;
      if (hasExceptionsAfterHandlingTraps)
        return 0;
    }
    if ((unint64_t)v13 >= 0xFFFE000000000000)
      return v13 & ~((int)v13 >> 31);
  }
  else
  {
    v10 = *(JSC::JSObject **)(*((_QWORD *)this + 1) - 16);
    v18 = v10;
    if ((unint64_t)v10 >= 0xFFFE000000000000)
      return v10 & ~((int)v10 >> 31);
  }
  v15 = JSC::JSValue::toIntegerOrInfinity(&v18, a2, a3, a4, a5, a6, a7, a8, a9);
  if (v15 <= 0.0)
    return 0;
  if (v15 > 9.00719925e15)
    return (unint64_t)9.00719925e15;
  return (unint64_t)v15;
}

unint64_t JSC::slowJoin(JSC *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, JSC::JSString *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  JSC::JSString *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t Index;
  unint64_t i;
  JSC::JSGlobalObject *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  JSC::VM *v25;
  uint64_t v26;
  int *v27;
  int v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  int *v33;
  int v34;
  BOOL v35;
  int v36;
  BOOL v37;
  unint64_t v38;
  int v39;
  _BOOL4 v40;
  JSC::JSRopeString *v41;
  JSC::JSObject *v42;
  JSC::JSString *v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int *v48;
  int v49;
  int v50;
  _BOOL4 v51;
  int v52;
  _BOOL4 v53;
  unint64_t OutOfMemoryError;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  JSC::Exception *v61;
  uint64_t v62;
  int v63;
  int v64;
  JSC::VMTraps *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;

  v8 = *((_QWORD *)this + 7);
  if (!a4)
    return *(_QWORD *)(v8 + 41968);
  Index = JSC::JSObject::getIndex(a2, this, 0, (uint64_t)a4, a5, a6, a7, a8);
  v68 = (unsigned __int8 *)Index;
  if (*(_DWORD *)(v8 + 80))
  {
    v63 = *(_DWORD *)(v8 + 80);
    if ((v63 & 0x27) != 0 && (v63 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v13, v14, (uint64_t)v15, v16, v17, v18);
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  if ((Index & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Index = *(_QWORD *)(v8 + 41968);
  }
  else if ((Index & 0xFFFE000000000002) != 0 || *(_BYTE *)(Index + 5) != 2)
  {
    Index = (unint64_t)JSC::JSValue::toStringSlowCase(&v68, (uint64_t)this, (JSC::Structure *)1, v14, (uint64_t)v15, v16, v17, v18);
  }
  if (*(_DWORD *)(v8 + 80))
  {
    v64 = *(_DWORD *)(v8 + 80);
    if ((v64 & 0x27) != 0 && (v64 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v13, v14, (uint64_t)v15, v16, v17, v18);
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  if ((unint64_t)a4 >= 2)
  {
    v66 = (JSC::VMTraps *)(v8 + 64);
    for (i = 1; a4 != (JSC::JSString *)i; ++i)
    {
      v14 = JSC::JSObject::getIndex(a2, this, i, v14, (uint64_t)v15, v16, v17, v18);
      v67 = (unsigned __int8 *)v14;
      if (*(_DWORD *)(v8 + 80))
      {
        v44 = *(_DWORD *)(v8 + 80);
        if ((v44 & 0x27) != 0 && (v44 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v66, 7u, v22, v14, (uint64_t)v15, v16, v17, v18);
        if (*(_QWORD *)(v8 + 16))
          return 0;
        v14 = (uint64_t)v67;
      }
      if ((v14 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v23 = *((_QWORD *)a3 + 1);
        if ((v23 & 1) != 0)
          v24 = (_DWORD *)((char *)a3 + 16);
        else
          v24 = (_DWORD *)(v23 + 4);
        if (!*v24)
          continue;
        v14 = *(_QWORD *)(v8 + 41968);
      }
      else if ((v14 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v14 + 5) != 2)
      {
        v14 = (uint64_t)JSC::JSValue::toStringSlowCase(&v67, (uint64_t)this, (JSC::Structure *)1, v14, (uint64_t)v15, v16, v17, v18);
      }
      if (*(_DWORD *)(v8 + 80))
      {
        v45 = *(_DWORD *)(v8 + 80);
        if ((v45 & 0x27) != 0 && (v45 & 0x20) == 0)
        {
          v62 = v14;
          JSC::VMTraps::handleTraps(v66, 7u, v22, v14, (uint64_t)v15, v16, v17, v18);
          v14 = v62;
        }
        if (*(_QWORD *)(v8 + 16))
          return 0;
      }
      v25 = (JSC::VM *)*((_QWORD *)this + 7);
      v26 = *(_QWORD *)(Index + 8);
      if ((v26 & 1) != 0)
        v27 = (int *)(Index + 16);
      else
        v27 = (int *)(v26 + 4);
      v28 = *v27;
      v29 = *((_QWORD *)a3 + 1);
      if ((v29 & 1) != 0)
        v30 = (int *)((char *)a3 + 16);
      else
        v30 = (int *)(v29 + 4);
      v31 = *v30;
      if (v28)
      {
        v32 = *(_QWORD *)(v14 + 8);
        if ((v32 & 1) != 0)
          v33 = (int *)(v14 + 16);
        else
          v33 = (int *)(v32 + 4);
        v34 = *v33;
        if (v31)
        {
          if (v34)
          {
            if (((v34 | v31) & 0x80000000) == 0)
            {
              v35 = __OFADD__(v31, v34);
              v36 = v31 + v34;
              v37 = v35;
              if ((v28 & 0x80000000) == 0 && !v37 && !__OFADD__(v28, v36))
              {
                v38 = JSC::JSRopeString::create(*((JSC::JSRopeString **)this + 7), Index, a3, v14, v15, v16, v17, v18);
                goto LABEL_41;
              }
            }
          }
          else
          {
            v52 = v31 | v28;
            v53 = __OFADD__(v28, v31);
            if ((v52 & 0x80000000) == 0 && !v53)
            {
              v41 = (JSC::JSRopeString *)*((_QWORD *)this + 7);
              v42 = (JSC::JSObject *)Index;
              v43 = a3;
              goto LABEL_54;
            }
          }
        }
        else
        {
          if (!v34)
            goto LABEL_42;
          v39 = v34 | v28;
          v40 = __OFADD__(v28, v34);
          if ((v39 & 0x80000000) == 0 && !v40)
          {
            v41 = (JSC::JSRopeString *)*((_QWORD *)this + 7);
            v42 = (JSC::JSObject *)Index;
            goto LABEL_53;
          }
        }
      }
      else
      {
        if (!v31)
        {
          Index = v14;
          goto LABEL_42;
        }
        v47 = *(_QWORD *)(v14 + 8);
        if ((v47 & 1) != 0)
          v48 = (int *)(v14 + 16);
        else
          v48 = (int *)(v47 + 4);
        v49 = *v48;
        Index = (unint64_t)a3;
        if (!v49)
          goto LABEL_42;
        v50 = v49 | v31;
        v51 = __OFADD__(v31, v49);
        if ((v50 & 0x80000000) == 0 && !v51)
        {
          v41 = (JSC::JSRopeString *)*((_QWORD *)this + 7);
          v42 = a3;
LABEL_53:
          v43 = (JSC::JSString *)v14;
LABEL_54:
          v38 = JSC::JSRopeString::create(v41, (unint64_t)v42, v43, (JSC::JSString *)v14, (uint64_t)v15, v16, v17, v18);
LABEL_41:
          Index = v38;
          goto LABEL_42;
        }
      }
      OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, v21);
      v61 = (JSC::Exception *)OutOfMemoryError;
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v61 = (JSC::Exception *)JSC::Exception::create((uint64_t)v25, (JSC::VM *)OutOfMemoryError, 0, v55, v56, v57, v58, v59);
      }
      JSC::VM::throwException(v25, this, v61, v60, v55, v56, v57, v58, v59);
      Index = 0;
LABEL_42:
      if (*(_DWORD *)(v8 + 80))
      {
        v46 = *(_DWORD *)(v8 + 80);
        if ((v46 & 0x27) != 0 && (v46 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v66, 7u, v22, v14, (uint64_t)v15, v16, v17, v18);
        if (*(_QWORD *)(v8 + 16))
          return 0;
      }
    }
  }
  return Index;
}

uint64_t JSC::JSObject::deleteProperty(JSC::JSObject *this, JSC::JSGlobalObject *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  __int16 v31;

  if ((unint64_t)a3 <= 0xFFFFFFFE)
    return (*(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *))(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                               + 0x4C)
                                                                             + 0x60))(this, a2);
  v11 = (uint64_t **)*((_QWORD *)a2 + 7);
  if (a3 == (const WTF::StringImpl *)0xFFFFFFFFLL)
    JSC::Identifier::from(v11, 0xFFFFFFFFuLL, (const WTF::StringImpl *)0xFFFFFFFFLL, a4, a5, a6, a7, a8, (int **)&v29);
  else
    JSC::Identifier::from(v11, a2, (double)(unint64_t)a3, a3, a4, a5, a6, a7, a8, &v29);
  v30 = -1;
  v31 = 1;
  v19 = (*(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, WTF::StringImpl *, int *))(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) + 0x58))(this, a2, v29, &v30);
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  return v19;
}

uint64_t JSC::sortBucketSort(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  _DWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t **v42;
  BOOL v43;
  uint64_t v44;
  uint64_t **v45;
  uint64_t *v46;
  uint64_t v47;

  v11 = (uint64_t *)a4;
  v15 = *(unsigned int *)(a4 + 12);
  if (a5 <= 0x20 && v15 > 0x1F)
  {
    v8 = a5;
    v9 = &v46;
    v46 = 0;
    v47 = 0;
    v11 = *(uint64_t **)a4;
    v10 = *(_QWORD *)a4 + 16 * v15;
    v44 = v10;
    v45 = &v46;
    goto LABEL_12;
  }
  v16 = 126 - 2 * __clz(v15);
  if ((_DWORD)v15)
    v17 = v16;
  else
    v17 = 0;
  std::__introsort<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*,false>(*(uint64_t **)a4, (WTF::AtomStringImpl *)(*(_QWORD *)a4 + 16 * v15), v17, 1, a5, a6, a7, a8);
  v19 = *((unsigned int *)v11 + 3);
  if (!(_DWORD)v19)
    return a3;
  v20 = (uint64_t *)*v11;
  v21 = 16 * v19;
  while (a2 > a3)
  {
    v22 = a3;
    a3 = (a3 + 1);
    v23 = *v20;
    v20 += 2;
    *(_QWORD *)(a1 + 8 * v22) = v23;
    v21 -= 16;
    if (!v21)
      return a3;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  v26 = WTF::StringImpl::at(v18, v8);
LABEL_16:
  v27 = v46;
  v28 = v9;
  v29 = (uint64_t)v9;
  if (v46)
  {
    do
    {
      while (1)
      {
        v29 = (uint64_t)v27;
        v30 = *((unsigned __int16 *)v27 + 16);
        if (v26 >= v30)
          break;
        v27 = *(uint64_t **)v29;
        v28 = (uint64_t **)v29;
        if (!*(_QWORD *)v29)
          goto LABEL_22;
      }
      if (v30 >= v26)
        goto LABEL_25;
      v27 = *(uint64_t **)(v29 + 8);
    }
    while (v27);
    v28 = (uint64_t **)(v29 + 8);
  }
LABEL_22:
  v31 = v29;
  v29 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v29 + 32) = v26;
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 40) = 0;
  *(_QWORD *)(v29 + 48) = 0;
  *(_QWORD *)(v29 + 16) = v31;
  *v28 = (uint64_t *)v29;
  v32 = (uint64_t *)v29;
  if (*v45)
  {
    v45 = (uint64_t **)*v45;
    v32 = *v28;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v46, v32);
  ++v47;
  v10 = v44;
LABEL_25:
  v33 = (_QWORD *)(v29 + 40);
  v34 = *(unsigned int *)(v29 + 52);
  if ((_DWORD)v34 != *(_DWORD *)(v29 + 48))
  {
    v35 = (uint64_t *)(*v33 + 16 * v34);
    *v35 = *v11;
    v36 = (_DWORD *)v11[1];
    if (!v36)
      goto LABEL_28;
    goto LABEL_27;
  }
  v37 = (uint64_t *)WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v34 + 1, (unint64_t)v11);
  v35 = (uint64_t *)(*(_QWORD *)(v29 + 40) + 16 * *(unsigned int *)(v29 + 52));
  *v35 = *v37;
  v36 = (_DWORD *)v37[1];
  if (v36)
LABEL_27:
    *v36 += 2;
LABEL_28:
  v35[1] = (uint64_t)v36;
  ++*(_DWORD *)(v29 + 52);
  while (1)
  {
    v11 += 2;
    if (v11 == (uint64_t *)v10)
      break;
LABEL_12:
    v18 = (WTF::StringImpl *)v11[1];
    if (v18)
    {
      v25 = *((_DWORD *)v18 + 1);
      if (v25 != v8)
      {
        if (v25 > v8)
          goto LABEL_46;
LABEL_15:
        v26 = 0;
        goto LABEL_16;
      }
    }
    else if (v8)
    {
      goto LABEL_15;
    }
    if (a2 <= a3)
      goto LABEL_45;
    v38 = a3;
    a3 = (a3 + 1);
    *(_QWORD *)(a1 + 8 * v38) = *v11;
  }
  v39 = v45;
  if (v45 != v9)
  {
    v40 = v8 + 1;
    do
    {
      a3 = JSC::sortBucketSort(a1, a2, a3, v39 + 5, v40);
      v41 = v39[1];
      if (v41)
      {
        do
        {
          v42 = (uint64_t **)v41;
          v41 = (uint64_t *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = (uint64_t **)v39[2];
          v43 = *v42 == (uint64_t *)v39;
          v39 = v42;
        }
        while (!v43);
      }
      v39 = v42;
    }
    while (v42 != v9);
  }
  std::__tree<std::__value_type<char16_t,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::__map_value_compare<char16_t,std::__value_type<char16_t,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::less<char16_t>,true>,WTF::FastAllocator<std::__value_type<char16_t,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::destroy((unint64_t)v46);
  return a3;
}

unsigned int *WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = a1[3];
  if ((_DWORD)v9)
  {
    v12 = 16 * v9;
    v13 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8);
    do
    {
      v14 = *v13;
      *v13 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
        }
        else
        {
          *(_DWORD *)v14 -= 2;
        }
      }
      v13 += 2;
      v12 -= 16;
    }
    while (v12);
  }
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

_QWORD *WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::tuple<JSC::JSValue,WTF::String>>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;

  result = (_QWORD *)WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_QWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
  *v4 = *result;
  v5 = result[1];
  result[1] = 0;
  v4[1] = v5;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v7 = a3 - v5;
    WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v7;
  }
  else
  {
    WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = (_QWORD *)v9;
        v18 = (_QWORD *)(v7 + 16 * v8);
        v19 = (_QWORD *)v7;
        do
        {
          *v17 = *v19;
          v20 = v19[1];
          v19[1] = 0;
          v17[1] = v20;
          v21 = (WTF::StringImpl *)v19[1];
          v19[1] = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
            {
              WTF::StringImpl::~StringImpl(v21, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
            }
            else
            {
              *(_DWORD *)v21 -= 2;
            }
          }
          v19 += 2;
          v17 += 2;
        }
        while (v19 != v18);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*,false>(uint64_t *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  unsigned __int16 *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned __int8 *v48;
  unsigned __int16 *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  const WTF::String *v95;
  const WTF::String *v96;
  uint64_t *v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  const WTF::String *v103;

uint64_t std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  const WTF::String *v10;
  uint64_t result;
  const WTF::String *v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  const WTF::String *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(a1, a2, a3, a4);
  result = WTF::codePointCompareLessThan((WTF *)(a5 + 1), (const WTF::String *)(a4 + 1), v10);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    v14 = a4[1];
    a4[1] = a5[1];
    a5[1] = v14;
    result = WTF::codePointCompareLessThan((WTF *)(a4 + 1), (const WTF::String *)(a3 + 1), v12);
    if ((_DWORD)result)
    {
      v16 = *a3;
      *a3 = *a4;
      *a4 = v16;
      v17 = a3[1];
      a3[1] = a4[1];
      a4[1] = v17;
      result = WTF::codePointCompareLessThan((WTF *)(a3 + 1), (const WTF::String *)(a2 + 1), v15);
      if ((_DWORD)result)
      {
        v19 = *a2;
        *a2 = *a3;
        *a3 = v19;
        v20 = a2[1];
        a2[1] = a3[1];
        a3[1] = v20;
        result = WTF::codePointCompareLessThan((WTF *)(a2 + 1), (const WTF::String *)(a1 + 1), v18);
        if ((_DWORD)result)
        {
          v21 = *a1;
          *a1 = *a2;
          *a2 = v21;
          v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

void std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(_QWORD *a1, _QWORD *a2, const WTF::String *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  unsigned __int16 *v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned __int16 *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  if (a1 != a2)
  {
    v5 = a1 + 2;
    if (a1 + 2 != a2)
    {
      v6 = 0;
      v7 = -2;
      v8 = a1;
      v9 = 1;
      while (1)
      {
        v10 = v6;
        v6 = v9;
        v11 = &a1[2 * v10];
        v12 = v11 + 3;
        if (!WTF::codePointCompareLessThan((WTF *)(v11 + 3), (const WTF::String *)(v11 + 1), a3))
          goto LABEL_51;
        v19 = *v5;
        v20 = *v12;
        *v12 = 0;
        if (v20)
          break;
        v56 = v7;
        v57 = v8;
        do
        {
          v5 = v57;
          v58 = *v57;
          v59 = v5[1];
          v5[1] = 0;
          v5[2] = v58;
          v60 = (WTF::StringImpl *)v5[3];
          v5[3] = v59;
          if (v60)
          {
            if (*(_DWORD *)v60 == 2)
            {
              WTF::StringImpl::~StringImpl(v60, v13, (uint64_t)a3, v14, v15, v16, v17, v18);
              WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
            }
            else
            {
              *(_DWORD *)v60 -= 2;
            }
          }
          if (__CFADD__(v56++, 1))
          {
LABEL_64:
            __break(1u);
            return;
          }
          v62 = *(v5 - 1);
          if (!v62)
            break;
          v57 = v5 - 2;
        }
        while (*(_DWORD *)(v62 + 4));
LABEL_48:
        v55 = (WTF::StringImpl *)v5[1];
        *v5 = v19;
        v5[1] = v20;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
          {
            WTF::StringImpl::~StringImpl(v55, v13, (uint64_t)a3, v14, v15, v16, v17, v18);
            WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
          }
          else
          {
            *(_DWORD *)v55 -= 2;
          }
        }
LABEL_51:
        v9 = v6 + 1;
        v5 = &a1[2 * v6 + 2];
        v8 += 2;
        --v7;
        if (v5 == a2)
          return;
      }
      while (1)
      {
        v21 = v5;
        v5 = &a1[2 * v10];
        *v21 = *v5;
        v22 = v5[1];
        v5[1] = 0;
        v23 = (WTF::StringImpl *)v21[1];
        v21[1] = v22;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
          {
            WTF::StringImpl::~StringImpl(v23, v13, (uint64_t)a3, v14, v15, v16, v17, v18);
            WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
          }
          else
          {
            *(_DWORD *)v23 -= 2;
          }
        }
        if (v10 == -1)
          goto LABEL_64;
        --v10;
        v24 = a1[2 * v10 + 1];
        if (!v24)
          goto LABEL_48;
        v25 = *(_DWORD *)(v24 + 16);
        v26 = *(_DWORD *)(v20 + 4);
        v27 = *(_DWORD *)(v24 + 4);
        if (v27 >= v26)
          v28 = v26;
        else
          v28 = v27;
        if ((*(_BYTE *)(v20 + 16) & 4) != 0)
        {
          if ((v25 & 4) != 0)
          {
            if ((_DWORD)v28)
            {
              v42 = *(unsigned __int8 **)(v24 + 8);
              v43 = *(unsigned __int8 **)(v20 + 8);
              do
              {
                v44 = *v43;
                v45 = *v42;
                v33 = v44 > v45;
                if (v44 != v45)
                  goto LABEL_41;
                ++v43;
                ++v42;
              }
              while (--v28);
            }
          }
          else if ((_DWORD)v28)
          {
            v34 = *(unsigned __int16 **)(v24 + 8);
            v35 = *(unsigned __int8 **)(v20 + 8);
            while (1)
            {
              v36 = *v35;
              v37 = *v34;
              if (v37 != v36)
                break;
              ++v35;
              ++v34;
              if (!--v28)
                goto LABEL_36;
            }
            if (v37 < v36)
              goto LABEL_48;
            goto LABEL_46;
          }
        }
        else if ((v25 & 4) != 0)
        {
          if ((_DWORD)v28)
          {
            v38 = *(unsigned __int8 **)(v24 + 8);
            v39 = *(unsigned __int16 **)(v20 + 8);
            do
            {
              v40 = *v39;
              v41 = *v38;
              v33 = v40 > v41;
              if (v40 != v41)
                goto LABEL_41;
              ++v39;
              ++v38;
            }
            while (--v28);
          }
        }
        else if ((_DWORD)v28)
        {
          v29 = *(unsigned __int16 **)(v24 + 8);
          v30 = *(unsigned __int16 **)(v20 + 8);
          while (1)
          {
            v31 = *v30;
            v32 = *v29;
            v33 = v31 > v32;
            if (v31 != v32)
              break;
            ++v30;
            ++v29;
            if (!--v28)
              goto LABEL_36;
          }
LABEL_41:
          if (v33)
            goto LABEL_48;
LABEL_46:
          v46 = -1;
          goto LABEL_47;
        }
LABEL_36:
        if (v27 < v26)
          v46 = 1;
        else
          v46 = -1;
        if (v26 == v27)
          goto LABEL_48;
LABEL_47:
        if ((v46 & 0x80000000) == 0)
          goto LABEL_48;
      }
    }
  }
}

void std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*,std::tuple<JSC::JSValue,WTF::String>*>(uint64_t a1, WTF::AtomStringImpl *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const WTF::String *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  const WTF::String *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  unsigned __int16 *v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned __int8 *v44;
  unsigned __int16 *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  unsigned __int16 *v79;
  unsigned __int16 *v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  int v84;
  unsigned __int16 *v85;
  unsigned __int8 *v86;
  unsigned int v87;
  unsigned int v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 *v97;
  unsigned __int16 *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  unsigned int v103;
  unsigned int v104;
  WTF::StringImpl *v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  if ((WTF::AtomStringImpl *)a1 != a2)
  {
    v9 = a2;
    v11 = (uint64_t)a2 - a1;
    v12 = ((uint64_t)a2 - a1) >> 4;
    if ((uint64_t)a2 - a1 >= 17)
    {
      v13 = (unint64_t)(v12 - 2) >> 1;
      v14 = v13 + 1;
      v15 = (const WTF::String *)(a1 + 16 * v13);
      do
      {
        std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(a1, v12, v15);
        v15 = (const WTF::String *)((char *)v15 - 16);
        --v14;
      }
      while (v14);
    }
    if (v9 != a3)
    {
      v16 = (WTF::AtomStringImpl *)((char *)v9 + 8);
      do
      {
        if (WTF::codePointCompareLessThan(v16, (const WTF::String *)(a1 + 8), a3))
        {
          v17 = *((_QWORD *)v16 - 1);
          *((_QWORD *)v16 - 1) = *(_QWORD *)a1;
          *(_QWORD *)a1 = v17;
          v18 = *(_QWORD *)v16;
          *(_QWORD *)v16 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v18;
          std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(a1, v12, (const WTF::String *)a1);
        }
        v19 = (WTF *)((char *)v16 + 8);
        v16 = (WTF *)((char *)v16 + 16);
      }
      while (v19 != a3);
    }
    if (v11 >= 17)
    {
      v20 = (unint64_t)v11 >> 4;
      do
      {
        v21 = 0;
        v23 = *(_QWORD *)a1;
        v22 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        v24 = (_QWORD *)a1;
        do
        {
          v25 = v24;
          v24 += 2 * v21 + 2;
          v26 = 2 * v21;
          v21 = (2 * v21) | 1;
          v27 = v26 + 2;
          if (v27 >= v20)
            goto LABEL_57;
          v28 = v24[1];
          v29 = v24[3];
          if (!v28)
          {
            if (!v29)
              goto LABEL_57;
            if (*(_DWORD *)(v29 + 4))
              v39 = -1;
            else
              v39 = 0;
LABEL_49:
            v24 += 2 * (v39 >> 31);
            if ((v39 & 0x80000000) == 0)
              goto LABEL_57;
LABEL_56:
            v21 = v27;
            goto LABEL_57;
          }
          if (!v29)
            goto LABEL_57;
          v30 = *(_DWORD *)(v29 + 16);
          v31 = *(_DWORD *)(v28 + 4);
          v32 = *(_DWORD *)(v29 + 4);
          if (v32 >= v31)
            v33 = v31;
          else
            v33 = v32;
          if ((*(_BYTE *)(v28 + 16) & 4) == 0)
          {
            if ((v30 & 4) != 0)
            {
              if ((_DWORD)v33)
              {
                v44 = *(unsigned __int8 **)(v29 + 8);
                v45 = *(unsigned __int16 **)(v28 + 8);
                do
                {
                  v46 = *v45;
                  v47 = *v44;
                  v38 = v46 > v47;
                  if (v46 != v47)
                    goto LABEL_51;
                  ++v45;
                  ++v44;
                }
                while (--v33);
              }
            }
            else if ((_DWORD)v33)
            {
              v34 = *(unsigned __int16 **)(v29 + 8);
              v35 = *(unsigned __int16 **)(v28 + 8);
              do
              {
                v36 = *v35;
                v37 = *v34;
                v38 = v36 > v37;
                if (v36 != v37)
                  goto LABEL_51;
                ++v35;
                ++v34;
              }
              while (--v33);
            }
LABEL_45:
            if (v32 < v31)
              v39 = 1;
            else
              v39 = -1;
            if (v31 != v32)
              goto LABEL_49;
            goto LABEL_57;
          }
          if ((v30 & 4) != 0)
          {
            if ((_DWORD)v33)
            {
              v48 = *(unsigned __int8 **)(v29 + 8);
              v49 = *(unsigned __int8 **)(v28 + 8);
              while (1)
              {
                v50 = *v49;
                v51 = *v48;
                v38 = v50 > v51;
                if (v50 != v51)
                  break;
                ++v49;
                ++v48;
                if (!--v33)
                  goto LABEL_45;
              }
LABEL_51:
              if (!v38)
                goto LABEL_55;
              goto LABEL_57;
            }
            goto LABEL_45;
          }
          if (!(_DWORD)v33)
            goto LABEL_45;
          v40 = *(unsigned __int16 **)(v29 + 8);
          v41 = *(unsigned __int8 **)(v28 + 8);
          while (1)
          {
            v42 = *v41;
            v43 = *v40;
            if (v43 != v42)
              break;
            ++v41;
            ++v40;
            if (!--v33)
              goto LABEL_45;
          }
          if (v43 >= v42)
          {
LABEL_55:
            v24 += 2;
            goto LABEL_56;
          }
LABEL_57:
          *v25 = *v24;
          v52 = v24[1];
          v24[1] = 0;
          v53 = (WTF::StringImpl *)v25[1];
          v25[1] = v52;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
            {
              WTF::StringImpl::~StringImpl(v53, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
            }
            else
            {
              *(_DWORD *)v53 -= 2;
            }
          }
        }
        while (v21 <= (uint64_t)((unint64_t)(v20 - 2) >> 1));
        v62 = (WTF::AtomStringImpl *)((char *)v9 - 16);
        if (v24 == (_QWORD *)((char *)v9 - 16))
        {
          v105 = (WTF::StringImpl *)v24[1];
          *v24 = v23;
          v24[1] = v22;
          if (!v105)
            goto LABEL_126;
          goto LABEL_124;
        }
        *v24 = *((_QWORD *)v9 - 2);
        v63 = *((_QWORD *)v9 - 1);
        *((_QWORD *)v9 - 1) = 0;
        v64 = (WTF::StringImpl *)v24[1];
        v24[1] = v63;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
          {
            WTF::StringImpl::~StringImpl(v64, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
          }
          else
          {
            *(_DWORD *)v64 -= 2;
          }
        }
        v65 = (WTF::StringImpl *)*((_QWORD *)v9 - 1);
        *((_QWORD *)v9 - 2) = v23;
        *((_QWORD *)v9 - 1) = v22;
        if (v65)
        {
          if (*(_DWORD *)v65 == 2)
          {
            WTF::StringImpl::~StringImpl(v65, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
          }
          else
          {
            *(_DWORD *)v65 -= 2;
          }
        }
        v66 = (uint64_t)v24 - a1 + 16;
        if (v66 >= 17)
        {
          v67 = (((unint64_t)v66 >> 4) - 2) >> 1;
          v68 = (_QWORD *)(a1 + 16 * v67);
          if (WTF::codePointCompareLessThan((WTF *)(v68 + 1), (const WTF::String *)(v24 + 1), a3))
          {
            v69 = *v24;
            v70 = v24[1];
            v24[1] = 0;
            while (1)
            {
              v71 = v68;
              *v24 = *v68;
              v72 = v68[1];
              v68[1] = 0;
              v73 = (WTF::StringImpl *)v24[1];
              v24[1] = v72;
              if (!v73)
                goto LABEL_76;
              if (*(_DWORD *)v73 != 2)
                break;
              WTF::StringImpl::~StringImpl(v73, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
              if (!v67)
                goto LABEL_121;
LABEL_77:
              v67 = (v67 - 1) >> 1;
              v68 = (_QWORD *)(a1 + 16 * v67);
              v74 = v68[1];
              if (!v74)
              {
                if (!v70)
                  goto LABEL_121;
                if (*(_DWORD *)(v70 + 4))
                  v84 = -1;
                else
                  v84 = 0;
                goto LABEL_120;
              }
              if (!v70)
                goto LABEL_121;
              v75 = *(_DWORD *)(v70 + 16);
              v76 = *(_DWORD *)(v74 + 4);
              v77 = *(_DWORD *)(v70 + 4);
              if (v77 >= v76)
                v78 = v76;
              else
                v78 = v77;
              if ((*(_BYTE *)(v74 + 16) & 4) != 0)
              {
                if ((v75 & 4) != 0)
                {
                  if ((_DWORD)v78)
                  {
                    v101 = *(unsigned __int8 **)(v70 + 8);
                    v102 = *(unsigned __int8 **)(v74 + 8);
                    do
                    {
                      v103 = *v102;
                      v104 = *v101;
                      v83 = v103 > v104;
                      if (v103 != v104)
                        goto LABEL_115;
                      ++v102;
                      ++v101;
                    }
                    while (--v78);
                  }
                }
                else if ((_DWORD)v78)
                {
                  v85 = *(unsigned __int16 **)(v70 + 8);
                  v86 = *(unsigned __int8 **)(v74 + 8);
                  while (1)
                  {
                    v87 = *v86;
                    v88 = *v85;
                    if (v88 != v87)
                      break;
                    ++v86;
                    ++v85;
                    if (!--v78)
                      goto LABEL_110;
                  }
                  if (v88 < v87)
                  {
LABEL_121:
                    v105 = (WTF::StringImpl *)v71[1];
                    *v71 = v69;
                    v71[1] = v70;
                    if (!v105)
                      goto LABEL_126;
LABEL_124:
                    if (*(_DWORD *)v105 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v105, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
                    }
                    else
                    {
                      *(_DWORD *)v105 -= 2;
                    }
                    goto LABEL_126;
                  }
                  goto LABEL_119;
                }
              }
              else if ((v75 & 4) != 0)
              {
                if ((_DWORD)v78)
                {
                  v97 = *(unsigned __int8 **)(v70 + 8);
                  v98 = *(unsigned __int16 **)(v74 + 8);
                  do
                  {
                    v99 = *v98;
                    v100 = *v97;
                    v83 = v99 > v100;
                    if (v99 != v100)
                      goto LABEL_115;
                    ++v98;
                    ++v97;
                  }
                  while (--v78);
                }
              }
              else if ((_DWORD)v78)
              {
                v79 = *(unsigned __int16 **)(v70 + 8);
                v80 = *(unsigned __int16 **)(v74 + 8);
                while (1)
                {
                  v81 = *v80;
                  v82 = *v79;
                  v83 = v81 > v82;
                  if (v81 != v82)
                    break;
                  ++v80;
                  ++v79;
                  if (!--v78)
                    goto LABEL_110;
                }
LABEL_115:
                if (v83)
                  goto LABEL_121;
LABEL_119:
                v84 = -1;
                goto LABEL_120;
              }
LABEL_110:
              if (v77 < v76)
                v84 = 1;
              else
                v84 = -1;
              if (v76 == v77)
                goto LABEL_121;
LABEL_120:
              v24 = v71;
              if ((v84 & 0x80000000) == 0)
                goto LABEL_121;
            }
            *(_DWORD *)v73 -= 2;
LABEL_76:
            if (!v67)
              goto LABEL_121;
            goto LABEL_77;
          }
        }
LABEL_126:
        v9 = v62;
        v38 = v20-- <= 2;
      }
      while (!v38);
    }
  }
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  const WTF::String *v6;
  const WTF::String *v7;
  char v8;
  const WTF::String *v9;
  uint64_t result;
  const WTF::String *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = (const WTF::String *)(a2 + 1);
  v7 = (const WTF::String *)(a1 + 1);
  v8 = WTF::codePointCompareLessThan((WTF *)(a2 + 1), (const WTF::String *)(a1 + 1), (const WTF::String *)a3);
  result = WTF::codePointCompareLessThan((WTF *)(a3 + 8), v6, v9);
  if ((v8 & 1) != 0)
  {
    v12 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v12;
    }
    else
    {
      *a1 = *a2;
      *a2 = v12;
      v16 = a1[1];
      a1[1] = a2[1];
      a2[1] = v16;
      result = WTF::codePointCompareLessThan((WTF *)(a3 + 8), v6, v11);
      if (!(_DWORD)result)
        return result;
      v17 = *a2;
      *a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v17;
      v7 = v6;
    }
    v6 = (const WTF::String *)(a3 + 8);
    goto LABEL_10;
  }
  if ((_DWORD)result)
  {
    v13 = *a2;
    *a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v13;
    v14 = a2[1];
    a2[1] = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v14;
    result = WTF::codePointCompareLessThan(v6, v7, v11);
    if ((_DWORD)result)
    {
      v15 = *a1;
      *a1 = *a2;
      *a2 = v15;
LABEL_10:
      v18 = *(_QWORD *)v7;
      *(_QWORD *)v7 = *(_QWORD *)v6;
      *(_QWORD *)v6 = v18;
    }
  }
  return result;
}

_QWORD *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,std::tuple<JSC::JSValue,WTF::String> *,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &>(_QWORD *a1, unint64_t a2, const WTF::String *a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  const WTF::String *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const WTF::String *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  _BOOL4 v33;
  unsigned __int16 *v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned __int16 *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  unsigned __int16 *v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned __int8 *v63;
  unsigned __int16 *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;

  v5 = *a1;
  v6 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  v103 = v5;
  v104 = v6;
  v7 = WTF::codePointCompareLessThan((WTF *)&v104, (const WTF::String *)(a2 - 8), a3);
  if ((v7 & 1) != 0)
  {
    v15 = a1;
    while (1)
    {
      v16 = v15 + 2;
      if (v15 + 2 == (_QWORD *)a2)
        goto LABEL_114;
      v7 = WTF::codePointCompareLessThan((WTF *)&v104, (const WTF::String *)(v15 + 3), v9);
      v15 = v16;
      if ((v7 & 1) != 0)
        goto LABEL_9;
    }
  }
  v17 = (const WTF::String *)(a1 + 3);
  do
  {
    v16 = (_QWORD *)((char *)v17 - 8);
    if ((unint64_t)v17 - 8 >= a2)
      break;
    v7 = WTF::codePointCompareLessThan((WTF *)&v104, v17, v9);
    v17 = (const WTF::String *)((char *)v17 + 16);
  }
  while (!(_DWORD)v7);
LABEL_9:
  v18 = (_QWORD *)a2;
  if ((unint64_t)v16 < a2)
  {
    v19 = (_QWORD *)a2;
    while (v19 != a1)
    {
      v18 = v19 - 2;
      v7 = WTF::codePointCompareLessThan((WTF *)&v104, (const WTF::String *)(v19 - 1), v9);
      v19 = v18;
      if ((v7 & 1) == 0)
        goto LABEL_13;
    }
LABEL_114:
    __break(1u);
LABEL_115:
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v8, (uint64_t)v9, v10, v11, v12, v13, v14);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
    goto LABEL_110;
  }
LABEL_13:
  if (v16 < v18)
  {
    while (1)
    {
      v20 = *v16;
      *v16 = *v18;
      *v18 = v20;
      v21 = v16[1];
      v16[1] = v18[1];
      v18[1] = v21;
      if (v104)
      {
        while (1)
        {
          v22 = v16;
          v16 += 2;
          if (v16 == (_QWORD *)a2)
            goto LABEL_114;
          v23 = v22[3];
          if (v23)
            break;
          v33 = *((_DWORD *)v104 + 1) != 0;
LABEL_53:
          if (v33 < 0)
            goto LABEL_58;
        }
        v24 = *(_DWORD *)(v23 + 16);
        v25 = *((_DWORD *)v104 + 1);
        v26 = *(_DWORD *)(v23 + 4);
        if (v26 >= v25)
          v27 = v25;
        else
          v27 = v26;
        if ((*((_BYTE *)v104 + 16) & 4) != 0)
        {
          if ((v24 & 4) == 0)
          {
            if (!(_DWORD)v27)
              goto LABEL_43;
            v34 = *(unsigned __int16 **)(v23 + 8);
            v35 = (unsigned __int8 *)*((_QWORD *)v104 + 1);
            while (1)
            {
              v36 = *v35;
              v37 = *v34;
              if (v37 != v36)
                break;
              ++v35;
              ++v34;
              if (!--v27)
                goto LABEL_43;
            }
            if (v37 >= v36)
              goto LABEL_58;
            goto LABEL_52;
          }
          if (!(_DWORD)v27)
          {
LABEL_43:
            if (v26 < v25)
              v46 = 1;
            else
              v46 = -1;
            if (v25 == v26)
              v33 = 0;
            else
              v33 = v46;
            goto LABEL_53;
          }
          v42 = *(unsigned __int8 **)(v23 + 8);
          v43 = (unsigned __int8 *)*((_QWORD *)v104 + 1);
          while (1)
          {
            v44 = *v43;
            v45 = *v42;
            v32 = v44 > v45;
            if (v44 != v45)
              break;
            ++v43;
            ++v42;
            if (!--v27)
              goto LABEL_43;
          }
        }
        else if ((v24 & 4) != 0)
        {
          if (!(_DWORD)v27)
            goto LABEL_43;
          v38 = *(unsigned __int8 **)(v23 + 8);
          v39 = (unsigned __int16 *)*((_QWORD *)v104 + 1);
          while (1)
          {
            v40 = *v39;
            v41 = *v38;
            v32 = v40 > v41;
            if (v40 != v41)
              break;
            ++v39;
            ++v38;
            if (!--v27)
              goto LABEL_43;
          }
        }
        else
        {
          if (!(_DWORD)v27)
            goto LABEL_43;
          v28 = *(unsigned __int16 **)(v23 + 8);
          v29 = (unsigned __int16 *)*((_QWORD *)v104 + 1);
          while (1)
          {
            v30 = *v29;
            v31 = *v28;
            v32 = v30 > v31;
            if (v30 != v31)
              break;
            ++v29;
            ++v28;
            if (!--v27)
              goto LABEL_43;
          }
        }
        if (!v32)
          goto LABEL_58;
LABEL_52:
        v33 = 1;
        goto LABEL_53;
      }
      do
      {
        v16 += 2;
        if (v16 == (_QWORD *)a2)
          goto LABEL_114;
        v47 = v16[1];
      }
      while (!v47 || !*(_DWORD *)(v47 + 4));
LABEL_58:
      if (v104)
        break;
      do
      {
        if (v18 == a1)
          goto LABEL_114;
        v72 = v18;
        v73 = *(v18 - 1);
        if (!v73)
          break;
        v18 -= 2;
      }
      while (*(_DWORD *)(v73 + 4));
      v18 = v72 - 2;
LABEL_102:
      if (v16 >= v18)
        goto LABEL_103;
    }
    while (1)
    {
      if (v18 == a1)
        goto LABEL_114;
      v48 = v18;
      v18 -= 2;
      v49 = *(v48 - 1);
      if (!v49)
        goto LABEL_102;
      v50 = *(_DWORD *)(v49 + 16);
      v51 = *((_DWORD *)v104 + 1);
      v52 = *(_DWORD *)(v49 + 4);
      if (v52 >= v51)
        v53 = v51;
      else
        v53 = v52;
      if ((*((_BYTE *)v104 + 16) & 4) != 0)
      {
        if ((v50 & 4) != 0)
        {
          if ((_DWORD)v53)
          {
            v67 = *(unsigned __int8 **)(v49 + 8);
            v68 = (unsigned __int8 *)*((_QWORD *)v104 + 1);
            do
            {
              v69 = *v68;
              v70 = *v67;
              v58 = v69 > v70;
              if (v69 != v70)
                goto LABEL_91;
              ++v68;
              ++v67;
            }
            while (--v53);
          }
        }
        else if ((_DWORD)v53)
        {
          v59 = *(unsigned __int16 **)(v49 + 8);
          v60 = (unsigned __int8 *)*((_QWORD *)v104 + 1);
          while (1)
          {
            v61 = *v60;
            v62 = *v59;
            if (v62 != v61)
              break;
            ++v60;
            ++v59;
            if (!--v53)
              goto LABEL_86;
          }
          if (v62 < v61)
            goto LABEL_102;
          goto LABEL_95;
        }
      }
      else if ((v50 & 4) != 0)
      {
        if ((_DWORD)v53)
        {
          v63 = *(unsigned __int8 **)(v49 + 8);
          v64 = (unsigned __int16 *)*((_QWORD *)v104 + 1);
          do
          {
            v65 = *v64;
            v66 = *v63;
            v58 = v65 > v66;
            if (v65 != v66)
              goto LABEL_91;
            ++v64;
            ++v63;
          }
          while (--v53);
        }
      }
      else if ((_DWORD)v53)
      {
        v54 = *(unsigned __int16 **)(v49 + 8);
        v55 = (unsigned __int16 *)*((_QWORD *)v104 + 1);
        while (1)
        {
          v56 = *v55;
          v57 = *v54;
          v58 = v56 > v57;
          if (v56 != v57)
            break;
          ++v55;
          ++v54;
          if (!--v53)
            goto LABEL_86;
        }
LABEL_91:
        if (v58)
          goto LABEL_102;
LABEL_95:
        v71 = -1;
        goto LABEL_96;
      }
LABEL_86:
      if (v52 < v51)
        v71 = 1;
      else
        v71 = -1;
      if (v51 == v52)
        goto LABEL_102;
LABEL_96:
      if ((v71 & 0x80000000) == 0)
        goto LABEL_102;
    }
  }
LABEL_103:
  if (v16 - 2 != a1)
  {
    *a1 = *(v16 - 2);
    v74 = *(v16 - 1);
    *(v16 - 1) = 0;
    v75 = (WTF::StringImpl *)a1[1];
    a1[1] = v74;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
      {
        WTF::StringImpl::~StringImpl(v75, v8, (uint64_t)v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
      }
      else
      {
        *(_DWORD *)v75 -= 2;
      }
    }
  }
  *(v16 - 2) = v103;
  v76 = v104;
  v104 = 0;
  v7 = *(v16 - 1);
  *(v16 - 1) = v76;
  if (v7)
  {
    if (*(_DWORD *)v7 != 2)
    {
      *(_DWORD *)v7 -= 2;
      goto LABEL_110;
    }
    goto LABEL_115;
  }
LABEL_110:
  v77 = v104;
  v104 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
    {
      WTF::StringImpl::~StringImpl(v77, v8, (uint64_t)v9, v10, v11, v12, v13, v14);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v77 -= 2;
    }
  }
  return v16;
}

uint64_t std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,std::tuple<JSC::JSValue,WTF::String> *,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &>(uint64_t result, _QWORD *a2, const WTF::String *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  unsigned __int16 *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned __int8 *v37;
  unsigned __int16 *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  BOOL v55;
  unsigned __int16 *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int16 *v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  int v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;

  v4 = (_QWORD *)result;
  v5 = 0;
  v6 = *(_QWORD *)result;
  v7 = *(WTF::StringImpl **)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  v92 = v6;
  v93 = v7;
  do
  {
    if (&v4[v5 + 2] == a2)
      goto LABEL_116;
    result = WTF::codePointCompareLessThan((WTF *)&v4[v5 + 3], (const WTF::String *)&v93, a3);
    v5 += 2;
  }
  while ((result & 1) != 0);
  v14 = &v4[v5];
  v15 = a2;
  if (v5 != 2)
  {
    while (v15 != v4)
    {
      v16 = v15 - 2;
      result = WTF::codePointCompareLessThan((WTF *)(v15 - 1), (const WTF::String *)&v93, a3);
      v15 = v16;
      if ((_DWORD)result)
        goto LABEL_11;
    }
    goto LABEL_116;
  }
  while (v14 < v15)
  {
    v16 = v15 - 2;
    result = WTF::codePointCompareLessThan((WTF *)(v15 - 1), (const WTF::String *)&v93, a3);
    v15 = v16;
    if ((result & 1) != 0)
      goto LABEL_11;
  }
  v16 = v15;
LABEL_11:
  if (v14 < v16)
  {
    v17 = v14;
    v18 = v16;
LABEL_13:
    v19 = *v17;
    *v17 = *v18;
    *v18 = v19;
    v20 = v17[1];
    v17[1] = v18[1];
    v18[1] = v20;
    if (!v93)
    {
LABEL_116:
      __break(1u);
      return result;
    }
    while (1)
    {
      v21 = v17;
      v17 += 2;
      if (v17 == a2)
        goto LABEL_116;
      v22 = v21[3];
      if (!v22)
      {
        v25 = *((unsigned int *)v93 + 1);
        if ((_DWORD)v25)
          v32 = -1;
        else
          v32 = 0;
        goto LABEL_54;
      }
      v23 = *((_DWORD *)v93 + 4);
      v24 = *(unsigned int *)(v22 + 4);
      v25 = *((unsigned int *)v93 + 1);
      if (v25 >= v24)
        v26 = v24;
      else
        v26 = v25;
      if ((*(_BYTE *)(v22 + 16) & 4) != 0)
      {
        if ((v23 & 4) != 0)
        {
          if ((_DWORD)v26)
          {
            v41 = (unsigned __int8 *)*((_QWORD *)v93 + 1);
            v42 = *(unsigned __int8 **)(v22 + 8);
            do
            {
              v43 = *v42;
              v44 = *v41;
              v31 = v43 > v44;
              if (v43 != v44)
                goto LABEL_49;
              ++v42;
              ++v41;
            }
            while (--v26);
          }
        }
        else if ((_DWORD)v26)
        {
          v33 = (unsigned __int16 *)*((_QWORD *)v93 + 1);
          v34 = *(unsigned __int8 **)(v22 + 8);
          while (1)
          {
            v35 = *v34;
            v36 = *v33;
            if (v36 != v35)
              break;
            ++v34;
            ++v33;
            if (!--v26)
              goto LABEL_44;
          }
          if (v36 < v35)
          {
LABEL_100:
            v24 = *((unsigned int *)v93 + 1);
LABEL_55:
            if ((_DWORD)v24)
              v45 = -1;
            else
              v45 = 0;
            v46 = v24;
            while (2)
            {
              if (v18 == v4)
                goto LABEL_116;
              v47 = v18;
              v18 -= 2;
              v48 = *(v47 - 1);
              result = v24;
              v49 = v45;
              if (!v48)
                goto LABEL_97;
              v50 = *((_DWORD *)v93 + 4);
              v51 = *(_DWORD *)(v48 + 4);
              if (v46 >= v51)
                v52 = v51;
              else
                v52 = v46;
              if ((*(_BYTE *)(v48 + 16) & 4) != 0)
              {
                if ((v50 & 4) != 0)
                {
                  if ((_DWORD)v52)
                  {
                    v60 = (unsigned __int8 *)*((_QWORD *)v93 + 1);
                    v61 = *(unsigned __int8 **)(v48 + 8);
                    do
                    {
                      result = *v61;
                      v8 = (WTF::AtomStringImpl *)*v60;
                      v55 = result > v8;
                      if ((_DWORD)result != (_DWORD)v8)
                        goto LABEL_92;
                      ++v61;
                      ++v60;
                    }
                    while (--v52);
                  }
                }
                else if ((_DWORD)v52)
                {
                  v56 = (unsigned __int16 *)*((_QWORD *)v93 + 1);
                  v57 = *(unsigned __int8 **)(v48 + 8);
                  while (1)
                  {
                    result = *v57;
                    v8 = (WTF::AtomStringImpl *)*v56;
                    if ((_DWORD)v8 != (_DWORD)result)
                      break;
                    ++v57;
                    ++v56;
                    if (!--v52)
                      goto LABEL_86;
                  }
                  if (v8 >= result)
                  {
LABEL_98:
                    if (v17 < v18)
                      goto LABEL_13;
                    goto LABEL_102;
                  }
                  goto LABEL_95;
                }
              }
              else if ((v50 & 4) != 0)
              {
                if ((_DWORD)v52)
                {
                  v58 = (unsigned __int8 *)*((_QWORD *)v93 + 1);
                  v59 = *(unsigned __int16 **)(v48 + 8);
                  do
                  {
                    result = *v59;
                    v8 = (WTF::AtomStringImpl *)*v58;
                    v55 = result > v8;
                    if ((_DWORD)result != (_DWORD)v8)
                      goto LABEL_92;
                    ++v59;
                    ++v58;
                  }
                  while (--v52);
                }
              }
              else if ((_DWORD)v52)
              {
                v53 = (unsigned __int16 *)*((_QWORD *)v93 + 1);
                v54 = *(unsigned __int16 **)(v48 + 8);
                while (1)
                {
                  result = *v54;
                  v8 = (WTF::AtomStringImpl *)*v53;
                  v55 = result > v8;
                  if ((_DWORD)result != (_DWORD)v8)
                    break;
                  ++v54;
                  ++v53;
                  if (!--v52)
                    goto LABEL_86;
                }
LABEL_92:
                if (!v55)
                  goto LABEL_98;
LABEL_95:
                v49 = 1;
LABEL_96:
                result = v46;
LABEL_97:
                v46 = result;
                if (v49 < 0)
                  goto LABEL_98;
                continue;
              }
              break;
            }
LABEL_86:
            if (v46 < v51)
              v62 = 1;
            else
              v62 = -1;
            if (v51 == (_DWORD)v46)
              v49 = 0;
            else
              v49 = v62;
            goto LABEL_96;
          }
          goto LABEL_53;
        }
      }
      else if ((v23 & 4) != 0)
      {
        if ((_DWORD)v26)
        {
          v37 = (unsigned __int8 *)*((_QWORD *)v93 + 1);
          v38 = *(unsigned __int16 **)(v22 + 8);
          do
          {
            v39 = *v38;
            v40 = *v37;
            v31 = v39 > v40;
            if (v39 != v40)
              goto LABEL_49;
            ++v38;
            ++v37;
          }
          while (--v26);
        }
      }
      else if ((_DWORD)v26)
      {
        v27 = (unsigned __int16 *)*((_QWORD *)v93 + 1);
        v28 = *(unsigned __int16 **)(v22 + 8);
        while (1)
        {
          v29 = *v28;
          v30 = *v27;
          v31 = v29 > v30;
          if (v29 != v30)
            break;
          ++v28;
          ++v27;
          if (!--v26)
            goto LABEL_44;
        }
LABEL_49:
        if (v31)
          goto LABEL_100;
LABEL_53:
        v32 = -1;
        goto LABEL_54;
      }
LABEL_44:
      if (v25 < v24)
        v32 = 1;
      else
        v32 = -1;
      if ((_DWORD)v24 == (_DWORD)v25)
        goto LABEL_55;
LABEL_54:
      v24 = v25;
      if ((v32 & 0x80000000) == 0)
        goto LABEL_55;
    }
  }
  v17 = v14;
LABEL_102:
  if (v17 - 2 != v4)
  {
    *v4 = *(v17 - 2);
    v63 = *(v17 - 1);
    *(v17 - 1) = 0;
    v64 = (WTF::StringImpl *)v4[1];
    v4[1] = v63;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
      {
        WTF::StringImpl::~StringImpl(v64, v8, (uint64_t)a3, v9, v10, v11, v12, v13);
        WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      }
      else
      {
        *(_DWORD *)v64 -= 2;
      }
    }
  }
  *(v17 - 2) = v92;
  v65 = v93;
  v93 = 0;
  v66 = (WTF::StringImpl *)*(v17 - 1);
  *(v17 - 1) = v65;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v8, (uint64_t)a3, v9, v10, v11, v12, v13);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = v93;
  v93 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
    {
      WTF::StringImpl::~StringImpl(v67, v8, (uint64_t)a3, v9, v10, v11, v12, v13);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
    }
    else
    {
      *(_DWORD *)v67 -= 2;
    }
  }
  return (uint64_t)(v17 - 2);
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(uint64_t *a1, uint64_t *a2, const WTF::String *a3)
{
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const WTF::String *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  char v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;

  v5 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (WTF::codePointCompareLessThan((WTF *)(a2 - 1), (const WTF::String *)(a1 + 1), a3))
      {
        v7 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(a1, a1 + 2, (uint64_t)(a2 - 2));
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(a1, a1 + 2, (uint64_t)(a1 + 4));
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (WTF::codePointCompareLessThan((WTF *)(v11 + 1), (const WTF::String *)(v9 + 1), v10))
    {
      v20 = *v11;
      v21 = (WTF::StringImpl *)v11[1];
      v11[1] = 0;
      v56 = v20;
      v57 = v21;
      v22 = v12;
      while (1)
      {
        v23 = (uint64_t *)((char *)a1 + v22);
        v24 = *(uint64_t *)((char *)a1 + v22 + 32);
        v25 = *(uint64_t *)((char *)a1 + v22 + 40);
        v23[5] = 0;
        v23[6] = v24;
        v26 = *(WTF::StringImpl **)((char *)a1 + v22 + 56);
        v23[7] = v25;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
          {
            WTF::StringImpl::~StringImpl(v26, v14, (uint64_t)v10, v15, v16, v17, v18, v19);
            WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
          }
          else
          {
            *(_DWORD *)v26 -= 2;
          }
        }
        if (v22 == -32)
          break;
        v27 = WTF::codePointCompareLessThan((WTF *)&v57, (const WTF::String *)((char *)a1 + v22 + 24), v10);
        v22 -= 16;
        if ((v27 & 1) == 0)
        {
          v36 = (uint64_t *)((char *)a1 + v22 + 48);
          goto LABEL_16;
        }
      }
      v36 = a1;
LABEL_16:
      v37 = v57;
      v57 = 0;
      v38 = (WTF::StringImpl *)v36[1];
      *v36 = v56;
      v36[1] = (uint64_t)v37;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
        {
          WTF::StringImpl::~StringImpl(v38, v14, (uint64_t)v10, v15, v16, v17, v18, v19);
          WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
        }
        else
        {
          *(_DWORD *)v38 -= 2;
        }
      }
      v39 = v57;
      v57 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
        {
          WTF::StringImpl::~StringImpl(v39, v14, (uint64_t)v10, v15, v16, v17, v18, v19);
          WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
        }
        else
        {
          *(_DWORD *)v39 -= 2;
        }
      }
      if (++v13 == 8)
        return v11 + 2 == a2;
    }
    v9 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  const WTF::String *v8;
  uint64_t result;
  const WTF::String *v10;
  uint64_t v11;
  uint64_t v12;
  const WTF::String *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(a1, a2, (uint64_t)a3);
  result = WTF::codePointCompareLessThan((WTF *)(a4 + 1), (const WTF::String *)(a3 + 1), v8);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    result = WTF::codePointCompareLessThan((WTF *)(a3 + 1), (const WTF::String *)(a2 + 1), v10);
    if ((_DWORD)result)
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      v15 = a2[1];
      a2[1] = a3[1];
      a3[1] = v15;
      result = WTF::codePointCompareLessThan((WTF *)(a2 + 1), (const WTF::String *)(a1 + 1), v13);
      if ((_DWORD)result)
      {
        v16 = *a1;
        *a1 = *a2;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

void std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,JSC::sortBucketSort(std::span<long long,18446744073709551615ul>,unsigned int,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0 &,std::tuple<JSC::JSValue,WTF::String>*>(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  const WTF::String *v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  WTF::AtomStringImpl *v15;
  const WTF::String *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  const WTF::String *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57[11];

  v5 = a2 - 2;
  if (a2 >= 2)
  {
    v57[9] = v3;
    v57[10] = v4;
    v6 = a3;
    v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= ((uint64_t)a3 - a1) >> 4)
    {
      v10 = ((uint64_t)a3 - a1) >> 3;
      v11 = v10 + 1;
      v12 = (_QWORD *)(a1 + 16 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a2)
      {
        v14 = WTF::codePointCompareLessThan((WTF *)(v12 + 1), (const WTF::String *)(v12 + 3), a3);
        v12 += 2 * v14;
        if (v14)
          v11 = v13;
      }
      if ((WTF::codePointCompareLessThan((WTF *)(v12 + 1), (const WTF::String *)((char *)v6 + 8), a3) & 1) == 0)
      {
        v22 = *(_QWORD *)v6;
        v23 = (WTF::StringImpl *)*((_QWORD *)v6 + 1);
        *((_QWORD *)v6 + 1) = 0;
        v56 = v22;
        v57[0] = v23;
        do
        {
          v24 = (const WTF::String *)v12;
          *(_QWORD *)v6 = *v12;
          v25 = v12[1];
          v12[1] = 0;
          v26 = (WTF::StringImpl *)*((_QWORD *)v6 + 1);
          *((_QWORD *)v6 + 1) = v25;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
            {
              WTF::StringImpl::~StringImpl(v26, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
            }
            else
            {
              *(_DWORD *)v26 -= 2;
            }
          }
          if (v8 < v11)
            break;
          v27 = (2 * v11) | 1;
          v12 = (_QWORD *)(a1 + 16 * v27);
          v11 = 2 * v11 + 2;
          if (v11 >= a2)
          {
            v11 = v27;
          }
          else
          {
            v28 = WTF::codePointCompareLessThan((WTF *)(v12 + 1), (const WTF::String *)(v12 + 3), v16);
            v12 += 2 * v28;
            if (!v28)
              v11 = v27;
          }
          v6 = v24;
        }
        while (!WTF::codePointCompareLessThan((WTF *)(v12 + 1), (const WTF::String *)v57, v16));
        *(_QWORD *)v24 = v56;
        v37 = v57[0];
        v57[0] = 0;
        v38 = (WTF::StringImpl *)*((_QWORD *)v24 + 1);
        *((_QWORD *)v24 + 1) = v37;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::~StringImpl(v38, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
            WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
          }
          else
          {
            *(_DWORD *)v38 -= 2;
          }
        }
        v39 = v57[0];
        v57[0] = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
          {
            WTF::StringImpl::~StringImpl(v39, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
            WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
          }
          else
          {
            *(_DWORD *)v39 -= 2;
          }
        }
      }
    }
  }
}

void std::__tree<std::__value_type<char16_t,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::__map_value_compare<char16_t,std::__value_type<char16_t,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::less<char16_t>,true>,WTF::FastAllocator<std::__value_type<char16_t,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::destroy(unint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1)
  {
    std::__tree<std::__value_type<char16_t,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::__map_value_compare<char16_t,std::__value_type<char16_t,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::less<char16_t>,true>,WTF::FastAllocator<std::__value_type<char16_t,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<char16_t,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::__map_value_compare<char16_t,std::__value_type<char16_t,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::less<char16_t>,true>,WTF::FastAllocator<std::__value_type<char16_t,WTF::Vector<std::tuple<JSC::JSValue,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::destroy(*(_QWORD *)(a1 + 8));
    v9 = *(unsigned int *)(a1 + 52);
    if ((_DWORD)v9)
    {
      v11 = 16 * v9;
      v12 = (WTF::StringImpl **)(*(_QWORD *)(a1 + 40) + 8);
      do
      {
        v13 = *v12;
        *v12 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
          {
            WTF::StringImpl::~StringImpl(v13, v2, v3, v4, v5, v6, v7, v8);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v13 -= 2;
          }
        }
        v12 += 2;
        v11 -= 16;
      }
      while (v11);
    }
    v10 = *(_QWORD *)(a1 + 40);
    if (v10)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      WTF::fastFree(v10, v2, v3, v4, v5, v6, v7, v8);
    }
    WTF::fastFree(a1, v2, v3, v4, v5, v6, v7, v8);
  }
}

void JSC::unshift(JSC *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t IndexQuickly;
  JSC::VM *v23;
  const WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t **v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  const WTF::String *v50;
  unint64_t RangeError;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  void (*v65)(JSC::JSGlobalObject *, JSC *, WTF::StringImpl *, unint64_t, WTF::StringImpl **);
  WTF::StringImpl *v66;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t **v68;
  WTF::StringImpl *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  JSC::VM *v94;
  WTF::StringImpl *v95[2];
  int v96;
  char v97;
  __int16 v98;
  char v99;
  uint64_t v100;
  WTF::StringImpl *v101;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v94 = v10;
  v11 = a5 >= a4;
  v12 = a5 - a4;
  if (v12 == 0 || !v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B7EACLL);
  }
  if (a6 < (unint64_t)a3)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B7ECCLL);
  }
  if (a6 - (unint64_t)a3 < a4)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B7EECLL);
  }
  if (*((_BYTE *)a2 + 5) != 36)
    goto LABEL_11;
  if ((v12 + a6) >> 32)
  {
    v49 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v49 = 0x2800000002;
    *(_QWORD *)(v49 + 8) = "Length exceeded the maximum array length";
    *(_DWORD *)(v49 + 16) = 4;
    v95[0] = (WTF::StringImpl *)v49;
    RangeError = JSC::createRangeError((unint64_t)this, v95, v50);
    JSC::VM::throwException(v10, this, RangeError, v52, v53, v54, v55, v56);
    v64 = v95[0];
    v95[0] = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
      {
        WTF::StringImpl::~StringImpl(v64, v57, v58, v59, v60, v61, v62, v63);
        WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
      }
      else
      {
        *(_DWORD *)v64 -= 2;
      }
    }
  }
  else
  {
    if ((*((_BYTE *)a2 + 4) & 0xE) != 0)
      v18 = *(unsigned int *)(*((_QWORD *)a2 + 1) - 8);
    else
      v18 = 0;
    if (v18 != a6
      || (JSC::JSArray::unshiftCountWithAnyIndexingType(a2, this, (uint64_t)a3, v12, a5, a6, a7, a8, a9) & 1) == 0)
    {
LABEL_11:
      v19 = a6 - a4;
      if (v19 <= (unint64_t)a3)
        return;
      v20 = a4 - 1;
      v21 = a5 - 1;
      while (1)
      {
        v95[0] = (WTF::StringImpl *)(v20 + v19);
        IndexQuickly = JSC::JSObject::tryGetIndexQuickly(a2, v20 + v19);
        if (!IndexQuickly)
          IndexQuickly = JSC::JSObject::getIfPropertyExists<unsigned long long>(a2, this, (const WTF::StringImpl *)v95, v25, v26, v27, v28, v29);
        v31 = IndexQuickly;
        if (*((_DWORD *)v10 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v23, (uint64_t)v24, v25, v26, v27, v28, v29))
        {
          return;
        }
        v32 = v21 + v19;
        if (v31)
        {
          v33 = (uint64_t **)*((_QWORD *)this + 7);
          if (v32 > 0xFFFFFFFE)
          {
            v95[0] = 0;
            v95[1] = a2;
            v96 = -1;
            v97 = v97 & 0xF8 | 1;
            v98 = 0;
            v99 = 1;
            v100 = 0;
            v65 = *(void (**)(JSC::JSGlobalObject *, JSC *, WTF::StringImpl *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x48);
            if (v32 == 0xFFFFFFFF)
              JSC::Identifier::from(v33, 0xFFFFFFFFuLL, v24, v25, v26, v27, v28, v29, (int **)&v101);
            else
              JSC::Identifier::from(v33, (JSC::VM *)v33, (double)v32, v24, v25, v26, v27, v28, v29, &v101);
            v65(a2, this, v101, v31, v95);
            v66 = v101;
            v101 = 0;
            if (v66)
            {
              if (*(_DWORD *)v66 == 2)
              {
                WTF::StringImpl::~StringImpl(v66, v34, v35, v36, v37, v38, v39, v40);
                WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
              }
              else
              {
                *(_DWORD *)v66 -= 2;
              }
            }
          }
          else if ((JSC::JSObject::trySetIndexQuickly((unint64_t)a2, (JSC::VM *)v33, v21 + v19, v31, 0, v27, v28, v29, v30) & 1) == 0)
          {
            (*(void (**)(JSC::JSGlobalObject *, JSC *, unint64_t, unint64_t, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x50))(a2, this, v21 + v19, v31, 1);
          }
          v10 = v94;
          if (!*((_DWORD *)v94 + 20))
            goto LABEL_22;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v94, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
          if (--v19 <= (unint64_t)a3 || hasExceptionsAfterHandlingTraps)
            return;
        }
        else
        {
          if (v32 > 0xFFFFFFFE)
          {
            v68 = (uint64_t **)*((_QWORD *)this + 7);
            if (v32 == 0xFFFFFFFF)
              JSC::Identifier::from(v68, 0xFFFFFFFFuLL, v24, v25, v26, v27, v28, v29, (int **)&v101);
            else
              JSC::Identifier::from(v68, v23, (double)v32, v24, v25, v26, v27, v28, v29, &v101);
            LODWORD(v95[0]) = -1;
            WORD2(v95[0]) = 1;
            v48 = (*(uint64_t (**)(JSC::JSGlobalObject *, JSC *, WTF::StringImpl *, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x58))(a2, this, v101, v95);
            v69 = v101;
            v101 = 0;
            if (v69)
            {
              if (*(_DWORD *)v69 == 2)
              {
                WTF::StringImpl::~StringImpl(v69, v41, v42, v43, v44, v45, v46, v47);
                WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
              }
              else
              {
                *(_DWORD *)v69 -= 2;
              }
            }
          }
          else
          {
            v48 = (*(uint64_t (**)(JSC::JSGlobalObject *, JSC *, unint64_t))(16
                                                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                                                            + 0x60))(a2, this, v21 + v19);
          }
          v10 = v94;
          if (*((_DWORD *)v94 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v94, (uint64_t)v41, v42, v43, v44, v45, v46, v47))
          {
            return;
          }
          if ((v48 & 1) == 0)
          {
            JSC::throwTypeError((unint64_t)this, &v94, (uint64_t)"Unable to delete property.", 27);
            return;
          }
LABEL_22:
          if (--v19 <= (unint64_t)a3)
            return;
        }
      }
    }
  }
}

void WTF::HashTable<JSC::JSImmutableButterfly *,WTF::KeyValuePair<JSC::JSImmutableButterfly *,JSC::JSString *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSImmutableButterfly *,JSC::JSString *>>,WTF::DefaultHash<JSC::JSImmutableButterfly *>,WTF::HashMap<JSC::JSImmutableButterfly *,JSC::JSString *,WTF::DefaultHash<JSC::JSImmutableButterfly *>,WTF::HashTraits<JSC::JSImmutableButterfly *>,WTF::HashTraits<JSC::JSString *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSImmutableButterfly *>>::expand(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;

  v9 = *a1;
  if (!*a1)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_3;
  }
  v10 = *(_DWORD *)(v9 - 4);
  v11 = *(_DWORD *)(v9 - 12);
  if (!v10)
  {
LABEL_3:
    v12 = 8;
    goto LABEL_5;
  }
  v12 = v10 << (6 * v11 >= (2 * v10));
LABEL_5:
  v13 = WTF::fastZeroedMalloc(16 * v12 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v12;
  *(_DWORD *)(*a1 - 8) = v12 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if (v10)
  {
    for (i = 0; i != v10; ++i)
    {
      v22 = (_QWORD *)(v9 + 16 * i);
      if ((unint64_t)(*v22 + 1) >= 2)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 8);
        else
          v24 = 0;
        v25 = (~(*v22 << 32) + *v22) ^ ((~(*v22 << 32) + *v22) >> 22);
        v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((unint64_t)(v25 + ~(v25 << 13)) >> 8));
        v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
        v28 = v24 & ((v27 >> 31) ^ v27);
        v29 = 1;
        do
        {
          v30 = v28;
          v31 = *(_QWORD *)(v23 + 16 * v28);
          v28 = (v28 + v29++) & v24;
        }
        while (v31);
        *(_OWORD *)(v23 + 16 * v30) = *(_OWORD *)v22;
      }
    }
    goto LABEL_14;
  }
  if (v9)
LABEL_14:
    WTF::fastFree(v9 - 16, v14, v15, v16, v17, v18, v19, v20);
}

unint64_t JSC::AtomicsObject::create(JSC::AtomicsObject *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  int v11;
  unint64_t v13;
  char *v14;
  char *v15;
  JSC::VM *v16;
  JSC::JSGlobalObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t SlowCase;

  v9 = this;
  v10 = *((_QWORD *)this + 4863);
  if (v10 >= *((_QWORD *)this + 4864))
  {
    v10 = *((_QWORD *)this + 4865);
    if ((v10 & 1) != 0)
    {
      v14 = (char *)this + 38880;
      v15 = (char *)this + 192;
      v16 = a2;
      v18 = (JSC::JSGlobalObject *)a3;
      JSC::sanitizeStackForVM(this, this, a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v14, (uint64_t)v15, 16, 0, 0, v19, v20, v21);
      a3 = (uint64_t)v18;
      v9 = this;
      a2 = v16;
      v10 = SlowCase;
      goto LABEL_3;
    }
    v13 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v13);
    *((_QWORD *)this + 4865) = v10 + (int)v13;
  }
  *((_QWORD *)this + 4863) = v10 + 16;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  JSC::AtomicsObject::finishCreation((JSC::AtomicsObject *)v10, v9, a2, (uint64_t)a4, a5, a6, a7, a8);
  return v10;
}

void JSC::AtomicsObject::finishCreation(JSC::AtomicsObject *this, JSC::VM *a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  WTF::StringImpl *v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  WTF::StringImpl *v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  WTF::StringImpl *v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  WTF::StringImpl *v80;
  WTF::AtomStringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  WTF::StringImpl *v99;
  WTF::AtomStringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::AtomStringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __n128 v117;
  WTF::StringImpl *v118;
  WTF::AtomStringImpl *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::AtomStringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __n128 v136;
  WTF::StringImpl *v137;
  WTF::AtomStringImpl *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::AtomStringImpl *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __n128 v155;
  WTF::StringImpl *v156;
  WTF::AtomStringImpl *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::AtomStringImpl *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __n128 v174;
  WTF::StringImpl *v175;
  WTF::AtomStringImpl *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::AtomStringImpl *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  __n128 v193;
  WTF::StringImpl *v194;
  WTF::AtomStringImpl *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  WTF::AtomStringImpl *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  __n128 v212;
  WTF::StringImpl *v213;
  WTF::AtomStringImpl *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  WTF::StringImpl *v221;
  WTF::StringImpl *v222;
  WTF::AtomStringImpl *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __n128 v231;
  WTF::StringImpl *v232;
  WTF::AtomStringImpl *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  WTF::AtomStringImpl *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  __n128 v250;
  WTF::StringImpl *v251;
  WTF::AtomStringImpl *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  __n128 v271;
  WTF::AtomStringImpl *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  WTF::StringImpl *v279;
  unint64_t v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  void *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  void *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  void *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  void *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  void *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  void *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  void *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  void *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  void *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  void *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  void *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  void *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t v408;
  void *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  void *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  void *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  void *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unint64_t v440;
  void *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  void *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  void *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  void *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  void *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  void *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  unint64_t v488;
  void *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  WTF::StringImpl *v496;

  v11 = (char *)a2 + 41448;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"add", 3uLL, a4, a5, a6, a7, a8, &v496);
  v12 = v496;
  if (v496 && (*((_BYTE *)v496 + 16) & 0x20) == 0)
  {
    v13 = v496;
LABEL_6:
    *(_DWORD *)v13 += 2;
    goto LABEL_7;
  }
  v13 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 63) + 872);
  if (v13)
    goto LABEL_6;
LABEL_7:
  v496 = v13;
  v21 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 3, &v496, (uint64_t)JSC::atomicsFuncAdd, 0, 135, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v23 = v496;
  v496 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v280, v281, v282, v283, v284, v285, v286, v287);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v12, v21, 4, v18, v19, v20, v22);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v288, v289, v290, v291, v292, v293, v294, v295);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"and", 3uLL, v26, v27, v28, v29, v30, &v496);
  v31 = v496;
  if (v496 && (*((_BYTE *)v496 + 16) & 0x20) == 0)
  {
    v32 = v496;
LABEL_16:
    *(_DWORD *)v32 += 2;
    goto LABEL_17;
  }
  v32 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 63) + 872);
  if (v32)
    goto LABEL_16;
LABEL_17:
  v496 = v32;
  v40 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 3, &v496, (uint64_t)JSC::atomicsFuncAnd, 0, 136, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v42 = v496;
  v496 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v296, v297, v298, v299, v300, v301, v302, v303);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v31, v40, 4, v37, v38, v39, v41);
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v43, v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v304, v305, v306, v307, v308, v309, v310, v311);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"compareExchange", 0xFuLL, v45, v46, v47, v48, v49, &v496);
  v50 = v496;
  if (v496 && (*((_BYTE *)v496 + 16) & 0x20) == 0)
  {
    v51 = v496;
LABEL_26:
    *(_DWORD *)v51 += 2;
    goto LABEL_27;
  }
  v51 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 63) + 872);
  if (v51)
    goto LABEL_26;
LABEL_27:
  v496 = v51;
  v59 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 4, &v496, (uint64_t)JSC::atomicsFuncCompareExchange, 0, 137, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v61 = v496;
  v496 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v312, v313, v314, v315, v316, v317, v318, v319);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v50, v59, 4, v56, v57, v58, v60);
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v320, v321, v322, v323, v324, v325, v326, v327);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"exchange", 8uLL, v64, v65, v66, v67, v68, &v496);
  v69 = v496;
  if (v496 && (*((_BYTE *)v496 + 16) & 0x20) == 0)
  {
    v70 = v496;
LABEL_36:
    *(_DWORD *)v70 += 2;
    goto LABEL_37;
  }
  v70 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 63) + 872);
  if (v70)
    goto LABEL_36;
LABEL_37:
  v496 = v70;
  v78 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 3, &v496, (uint64_t)JSC::atomicsFuncExchange, 0, 138, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v80 = v496;
  v496 = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
    {
      WTF::StringImpl::~StringImpl(v80, v71, v72, v73, v74, v75, v76, v77);
      WTF::fastFree(v328, v329, v330, v331, v332, v333, v334, v335);
    }
    else
    {
      *(_DWORD *)v80 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v69, v78, 4, v75, v76, v77, v79);
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, v81, v82, v83, v84, v85, v86, v87);
      WTF::fastFree(v336, v337, v338, v339, v340, v341, v342, v343);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"isLockFree", 0xAuLL, v83, v84, v85, v86, v87, &v496);
  v88 = v496;
  if (v496 && (*((_BYTE *)v496 + 16) & 0x20) == 0)
  {
    v89 = v496;
LABEL_46:
    *(_DWORD *)v89 += 2;
    goto LABEL_47;
  }
  v89 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 63) + 872);
  if (v89)
    goto LABEL_46;
LABEL_47:
  v496 = v89;
  v97 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v496, (uint64_t)JSC::atomicsFuncIsLockFree, 0, 139, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v99 = v496;
  v496 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v344, v345, v346, v347, v348, v349, v350, v351);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v88, v97, 4, v94, v95, v96, v98);
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v100, v101, v102, v103, v104, v105, v106);
      WTF::fastFree(v352, v353, v354, v355, v356, v357, v358, v359);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"load", 4uLL, v102, v103, v104, v105, v106, &v496);
  v107 = v496;
  if (v496 && (*((_BYTE *)v496 + 16) & 0x20) == 0)
  {
    v108 = v496;
LABEL_56:
    *(_DWORD *)v108 += 2;
    goto LABEL_57;
  }
  v108 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 63) + 872);
  if (v108)
    goto LABEL_56;
LABEL_57:
  v496 = v108;
  v116 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 2, &v496, (uint64_t)JSC::atomicsFuncLoad, 0, 140, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v118 = v496;
  v496 = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2)
    {
      WTF::StringImpl::~StringImpl(v118, v109, v110, v111, v112, v113, v114, v115);
      WTF::fastFree(v360, v361, v362, v363, v364, v365, v366, v367);
    }
    else
    {
      *(_DWORD *)v118 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v107, v116, 4, v113, v114, v115, v117);
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v119, v120, v121, v122, v123, v124, v125);
      WTF::fastFree(v368, v369, v370, v371, v372, v373, v374, v375);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"notify", 6uLL, v121, v122, v123, v124, v125, &v496);
  v126 = v496;
  if (v496 && (*((_BYTE *)v496 + 16) & 0x20) == 0)
  {
    v127 = v496;
LABEL_66:
    *(_DWORD *)v127 += 2;
    goto LABEL_67;
  }
  v127 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 63) + 872);
  if (v127)
    goto LABEL_66;
LABEL_67:
  v496 = v127;
  v135 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 3, &v496, (uint64_t)JSC::atomicsFuncNotify, 0, 141, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v137 = v496;
  v496 = 0;
  if (v137)
  {
    if (*(_DWORD *)v137 == 2)
    {
      WTF::StringImpl::~StringImpl(v137, v128, v129, v130, v131, v132, v133, v134);
      WTF::fastFree(v376, v377, v378, v379, v380, v381, v382, v383);
    }
    else
    {
      *(_DWORD *)v137 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v126, v135, 4, v132, v133, v134, v136);
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
    {
      WTF::StringImpl::~StringImpl(v126, v138, v139, v140, v141, v142, v143, v144);
      WTF::fastFree(v384, v385, v386, v387, v388, v389, v390, v391);
    }
    else
    {
      *(_DWORD *)v126 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"or", 2uLL, v140, v141, v142, v143, v144, &v496);
  v145 = v496;
  if (v496 && (*((_BYTE *)v496 + 16) & 0x20) == 0)
  {
    v146 = v496;
LABEL_76:
    *(_DWORD *)v146 += 2;
    goto LABEL_77;
  }
  v146 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 63) + 872);
  if (v146)
    goto LABEL_76;
LABEL_77:
  v496 = v146;
  v154 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 3, &v496, (uint64_t)JSC::atomicsFuncOr, 0, 142, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v156 = v496;
  v496 = 0;
  if (v156)
  {
    if (*(_DWORD *)v156 == 2)
    {
      WTF::StringImpl::~StringImpl(v156, v147, v148, v149, v150, v151, v152, v153);
      WTF::fastFree(v392, v393, v394, v395, v396, v397, v398, v399);
    }
    else
    {
      *(_DWORD *)v156 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v145, v154, 4, v151, v152, v153, v155);
  if (v145)
  {
    if (*(_DWORD *)v145 == 2)
    {
      WTF::StringImpl::~StringImpl(v145, v157, v158, v159, v160, v161, v162, v163);
      WTF::fastFree(v400, v401, v402, v403, v404, v405, v406, v407);
    }
    else
    {
      *(_DWORD *)v145 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"store", 5uLL, v159, v160, v161, v162, v163, &v496);
  v164 = v496;
  if (v496 && (*((_BYTE *)v496 + 16) & 0x20) == 0)
  {
    v165 = v496;
LABEL_86:
    *(_DWORD *)v165 += 2;
    goto LABEL_87;
  }
  v165 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 63) + 872);
  if (v165)
    goto LABEL_86;
LABEL_87:
  v496 = v165;
  v173 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 3, &v496, (uint64_t)JSC::atomicsFuncStore, 0, 143, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v175 = v496;
  v496 = 0;
  if (v175)
  {
    if (*(_DWORD *)v175 == 2)
    {
      WTF::StringImpl::~StringImpl(v175, v166, v167, v168, v169, v170, v171, v172);
      WTF::fastFree(v408, v409, v410, v411, v412, v413, v414, v415);
    }
    else
    {
      *(_DWORD *)v175 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v164, v173, 4, v170, v171, v172, v174);
  if (v164)
  {
    if (*(_DWORD *)v164 == 2)
    {
      WTF::StringImpl::~StringImpl(v164, v176, v177, v178, v179, v180, v181, v182);
      WTF::fastFree(v416, v417, v418, v419, v420, v421, v422, v423);
    }
    else
    {
      *(_DWORD *)v164 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"sub", 3uLL, v178, v179, v180, v181, v182, &v496);
  v183 = v496;
  if (v496 && (*((_BYTE *)v496 + 16) & 0x20) == 0)
  {
    v184 = v496;
LABEL_96:
    *(_DWORD *)v184 += 2;
    goto LABEL_97;
  }
  v184 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 63) + 872);
  if (v184)
    goto LABEL_96;
LABEL_97:
  v496 = v184;
  v192 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 3, &v496, (uint64_t)JSC::atomicsFuncSub, 0, 144, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v194 = v496;
  v496 = 0;
  if (v194)
  {
    if (*(_DWORD *)v194 == 2)
    {
      WTF::StringImpl::~StringImpl(v194, v185, v186, v187, v188, v189, v190, v191);
      WTF::fastFree(v424, v425, v426, v427, v428, v429, v430, v431);
    }
    else
    {
      *(_DWORD *)v194 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v183, v192, 4, v189, v190, v191, v193);
  if (v183)
  {
    if (*(_DWORD *)v183 == 2)
    {
      WTF::StringImpl::~StringImpl(v183, v195, v196, v197, v198, v199, v200, v201);
      WTF::fastFree(v432, v433, v434, v435, v436, v437, v438, v439);
    }
    else
    {
      *(_DWORD *)v183 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"wait", 4uLL, v197, v198, v199, v200, v201, &v496);
  v202 = v496;
  if (v496 && (*((_BYTE *)v496 + 16) & 0x20) == 0)
  {
    v203 = v496;
LABEL_106:
    *(_DWORD *)v203 += 2;
    goto LABEL_107;
  }
  v203 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 63) + 872);
  if (v203)
    goto LABEL_106;
LABEL_107:
  v496 = v203;
  v211 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 4, &v496, (uint64_t)JSC::atomicsFuncWait, 0, 145, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v213 = v496;
  v496 = 0;
  if (v213)
  {
    if (*(_DWORD *)v213 == 2)
    {
      WTF::StringImpl::~StringImpl(v213, v204, v205, v206, v207, v208, v209, v210);
      WTF::fastFree(v440, v441, v442, v443, v444, v445, v446, v447);
    }
    else
    {
      *(_DWORD *)v213 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v202, v211, 4, v208, v209, v210, v212);
  if (v202)
  {
    if (*(_DWORD *)v202 == 2)
    {
      WTF::StringImpl::~StringImpl(v202, v214, v215, v216, v217, v218, v219, v220);
      WTF::fastFree(v448, v449, v450, v451, v452, v453, v454, v455);
    }
    else
    {
      *(_DWORD *)v202 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"xor", 3uLL, v216, v217, v218, v219, v220, &v496);
  v221 = v496;
  if (v496 && (*((_BYTE *)v496 + 16) & 0x20) == 0)
  {
    v222 = v496;
LABEL_116:
    *(_DWORD *)v222 += 2;
    goto LABEL_117;
  }
  v222 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 63) + 872);
  if (v222)
    goto LABEL_116;
LABEL_117:
  v496 = v222;
  v230 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 3, &v496, (uint64_t)JSC::atomicsFuncXor, 0, 147, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v232 = v496;
  v496 = 0;
  if (v232)
  {
    if (*(_DWORD *)v232 == 2)
    {
      WTF::StringImpl::~StringImpl(v232, v223, v224, v225, v226, v227, v228, v229);
      WTF::fastFree(v456, v457, v458, v459, v460, v461, v462, v463);
    }
    else
    {
      *(_DWORD *)v232 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v221, v230, 4, v227, v228, v229, v231);
  if (v221)
  {
    if (*(_DWORD *)v221 == 2)
    {
      WTF::StringImpl::~StringImpl(v221, v233, v234, v235, v236, v237, v238, v239);
      WTF::fastFree(v464, v465, v466, v467, v468, v469, v470, v471);
    }
    else
    {
      *(_DWORD *)v221 -= 2;
    }
  }
  if (BYTE3(qword_1ECF4C7A0) && !*(_DWORD *)v11)
  {
    WTF::AtomStringImpl::addLiteral((uint64_t)"waitAsync", 9uLL, v235, v236, v237, v238, v239, &v496);
    v240 = v496;
    if (!v496 || (*((_BYTE *)v496 + 16) & 0x20) != 0)
    {
      v241 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 63) + 872);
      if (!v241)
        goto LABEL_129;
    }
    else
    {
      v241 = v496;
    }
    *(_DWORD *)v241 += 2;
LABEL_129:
    v496 = v241;
    v249 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 4, &v496, (uint64_t)JSC::atomicsFuncWaitAsync, 0, 146, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    v251 = v496;
    v496 = 0;
    if (v251)
    {
      if (*(_DWORD *)v251 == 2)
      {
        WTF::StringImpl::~StringImpl(v251, v242, v243, v244, v245, v246, v247, v248);
        WTF::fastFree(v480, v481, v482, v483, v484, v485, v486, v487);
      }
      else
      {
        *(_DWORD *)v251 -= 2;
      }
    }
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v240, v249, 4, v246, v247, v248, v250);
    if (v240)
    {
      if (*(_DWORD *)v240 == 2)
      {
        WTF::StringImpl::~StringImpl(v240, v252, v253, v254, v255, v256, v257, v258);
        WTF::fastFree(v488, v489, v490, v491, v492, v493, v494, v495);
      }
      else
      {
        *(_DWORD *)v240 -= 2;
      }
    }
  }
  v259 = *(_QWORD *)(*((_QWORD *)v11 + 63) + 2776);
  v260 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v260 = 0x700000002;
  *(_QWORD *)(v260 + 8) = "Atomics";
  *(_DWORD *)(v260 + 16) = 4;
  v496 = (WTF::StringImpl *)v260;
  v267 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v496, v261, v262, v263, v264, v265, v266);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v259, v267, 6, v268, v269, v270, v271);
  v279 = v496;
  v496 = 0;
  if (v279)
  {
    if (*(_DWORD *)v279 == 2)
    {
      WTF::StringImpl::~StringImpl(v279, v272, v273, v274, v275, v276, v277, v278);
      WTF::fastFree(v472, v473, v474, v475, v476, v477, v478, v479);
    }
    else
    {
      *(_DWORD *)v279 -= 2;
    }
  }
}

uint64_t JSC::AtomicsObject::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::AtomicsObject::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::atomicsFuncAdd(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v8 = *((int *)a2 + 8) - 1;
  if (v8 < 3)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 8);
  v13[2] = v9;
  if (v8 < 2)
    v10 = 10;
  else
    v10 = *((_QWORD *)a2 + 7);
  v13[1] = v10;
  if (v8)
    v11 = *((_QWORD *)a2 + 6);
  else
    v11 = 10;
  v13[0] = v11;
}

uint64_t JSC::atomicsFuncAnd(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v8 = *((int *)a2 + 8) - 1;
  if (v8 < 3)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 8);
  v13[2] = v9;
  if (v8 < 2)
    v10 = 10;
  else
    v10 = *((_QWORD *)a2 + 7);
  v13[1] = v10;
  if (v8)
    v11 = *((_QWORD *)a2 + 6);
  else
    v11 = 10;
  v13[0] = v11;
}

uint64_t JSC::atomicsFuncCompareExchange(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  v8 = *((int *)a2 + 8) - 1;
  if (v8 < 4)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 9);
  v14[3] = v9;
  if (v8 < 3)
    v10 = 10;
  else
    v10 = *((_QWORD *)a2 + 8);
  v14[2] = v10;
  if (v8 < 2)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 7);
  v14[1] = v11;
  if (v8)
    v12 = *((_QWORD *)a2 + 6);
  else
    v12 = 10;
  v14[0] = v12;
}

uint64_t JSC::atomicsFuncExchange(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v8 = *((int *)a2 + 8) - 1;
  if (v8 < 3)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 8);
  v13[2] = v9;
  if (v8 < 2)
    v10 = 10;
  else
    v10 = *((_QWORD *)a2 + 7);
  v13[1] = v10;
  if (v8)
    v11 = *((_QWORD *)a2 + 6);
  else
    v11 = 10;
  v13[0] = v11;
}

uint64_t JSC::atomicsFuncIsLockFree(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20 = 10;
    v10 = *((_QWORD *)this + 7);
LABEL_9:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v20, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v13 = v12;
    goto LABEL_11;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v20 = (uint64_t)v9;
  v10 = *((_QWORD *)this + 7);
  if ((unint64_t)v9 >= 0xFFFE000000000000)
    goto LABEL_3;
  v13 = (unint64_t)v9 - 0x2000000000000;
  if (v13 >= 0xFFFC000000000000)
    goto LABEL_9;
LABEL_11:
  v14 = (v13 >> 52) & 0x7FF;
  v15 = v14 - 1023;
  v16 = v13 >> (51 - (v13 >> 52));
  if (v14 > 0x433)
    LODWORD(v16) = v13 << ((v13 >> 52) - 51);
  if (v14 >= 0x41F)
    v17 = v16;
  else
    v17 = (((1 << ((v13 >> 52) + 1)) - 1) & v16) + (1 << ((v13 >> 52) + 1));
  if ((v13 & 0x8000000000000000) != 0)
    v17 = -v17;
  if (v15 <= 0x53)
    LODWORD(v9) = v17;
  else
    LODWORD(v9) = 0;
LABEL_3:
  if (*(_DWORD *)(v10 + 80))
  {
    v18 = *(_DWORD *)(v10 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v19 = (int)v9;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      LODWORD(v9) = v19;
    }
    if (*(_QWORD *)(v10 + 16))
      return 10;
  }
  if (((_DWORD)v9 - 1) > 7)
    return 6;
  return qword_199157530[(int)v9 - 1];
}

uint64_t JSC::atomicsFuncLoad(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC::JSObject *v12[3];

  v12[2] = *(JSC::JSObject **)MEMORY[0x1E0C80C00];
  v8 = *((int *)a2 + 8) - 1;
  if (v8 < 2)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 7);
  v12[1] = (JSC::JSObject *)v9;
  if (v8)
    v10 = *((_QWORD *)a2 + 6);
  else
    v10 = 10;
  v12[0] = (JSC::JSObject *)v10;
}

unint64_t JSC::atomicsFuncNotify(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  int8x16_t v19;
  int v20;
  JSC::JSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int8x16_t v29;
  JSC::JSObject *v30;
  uint64_t v31;
  double v32;
  unint64_t result;
  unsigned int v34;
  uint64_t v35;
  uint64_t (*v36)();
  int v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  double v44;
  int v45;
  int v46;
  int v47;
  int v48;
  double v49;
  uint64_t v50;
  char v51;
  JSC::VM **v52;
  JSC::VM *v53;

  v10 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  v53 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = JSC::validateTypedArray(this, v11, a3, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_4;
  v45 = *(_DWORD *)(v10 + 80);
  if ((v45 & 0x27) != 0 && (v45 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v12, v13, v14, v15, v16, v17);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_4:
    v20 = *((unsigned __int8 *)v18 + 5);
    if (v20 == 44 || v20 == 48)
      goto LABEL_8;
    JSC::throwTypeError((unint64_t)this, &v53, (uint64_t)"Typed array argument must be an Int32Array or BigInt64Array.", 61);
  }
  v18 = 0;
LABEL_8:
  if (*(_DWORD *)(v10 + 80))
  {
    v46 = *(_DWORD *)(v10 + 80);
    if ((v46 & 0x27) != 0 && (v46 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v21 = (JSC::JSObject *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7));
  if (*(_DWORD *)(v10 + 80))
  {
    v47 = *(_DWORD *)(v10 + 80);
    if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v22, v23, v24, v25, v26, v27);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    v50 = 10;
    goto LABEL_14;
  }
  v30 = (JSC::JSObject *)*((_QWORD *)a2 + 8);
  v50 = (uint64_t)v30;
  if (v30 == (JSC::JSObject *)10)
  {
LABEL_14:
    v31 = 0xFFFFFFFFLL;
    goto LABEL_19;
  }
  if ((unint64_t)v30 < 0xFFFE000000000000)
  {
    v43 = (unint64_t)v30 - 0x2000000000000;
    if (v43 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v50, this, v22, v23, v24, v25, v26, v27, v29);
    else
      v44 = *(double *)&v43;
    v32 = trunc(v44 + 0.0);
  }
  else
  {
    v32 = (double)(int)v30;
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v48 = *(_DWORD *)(v10 + 80);
    if ((v48 & 0x27) != 0 && (v48 & 0x20) == 0)
    {
      v49 = v32;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v22, v23, v24, v25, v26, v27);
      v32 = v49;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v31 = fmin(fmax(v32, 0.0), 4294967300.0);
LABEL_19:
  result = 0xFFFE000000000000;
  v34 = *((unsigned __int8 *)v18 + 40) - 88;
  if (v34 > 0x35)
    return result;
  if (((1 << v34) & 0x3D) != 0)
  {
    v35 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
  }
  else
  {
    if (((1 << v34) & 0x3D000000000000) == 0)
      return result;
    v35 = *((_QWORD *)v18 + 6);
  }
  if (*(_QWORD *)(v35 + 32))
    v36 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v36 = 0;
  if (v36)
  {
    v37 = *((unsigned __int8 *)v18 + 5);
    if (v37 == 48)
    {
      v40 = *((_QWORD *)v18 + 2);
      if (v40 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v40 = (v40 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v39 = (void *)(v40 + 8 * v28);
    }
    else
    {
      if (v37 != 44)
      {
        __break(0xC471u);
        JUMPOUT(0x1988B9828);
      }
      v38 = *((_QWORD *)v18 + 2);
      if (v38 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v38 = (v38 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v39 = (void *)(v38 + 4 * v28);
    }
    v41 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
    if (v41 != -1)
    {
      v53 = (JSC::VM *)&v51;
      v52 = &v53;
      std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, &v52, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
    }
    v42 = JSC::WaiterListManager::notifyWaiter((JSC::WaiterListManager *)&JSC::WaiterListManager::singleton(void)::manager, v39, v31, v23, v24, v25, v26, v27);
    if ((v42 & 0x80000000) != 0)
      return COERCE__INT64((double)v42) + 0x2000000000000;
    else
      return v42 | 0xFFFE000000000000;
  }
  return result;
}

uint64_t JSC::atomicsFuncOr(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v8 = *((int *)a2 + 8) - 1;
  if (v8 < 3)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 8);
  v13[2] = v9;
  if (v8 < 2)
    v10 = 10;
  else
    v10 = *((_QWORD *)a2 + 7);
  v13[1] = v10;
  if (v8)
    v11 = *((_QWORD *)a2 + 6);
  else
    v11 = 10;
  v13[0] = v11;
}

uint64_t JSC::atomicsFuncStore(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v9 = 10;
    v8 = 10;
    goto LABEL_7;
  }
  v8 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
    v9 = 10;
    goto LABEL_7;
  }
  v9 = *((_QWORD *)a2 + 7);
  if ((unint64_t)(*((int *)a2 + 8) - 1) < 3)
  {
LABEL_7:
    v10 = 10;
  }
  v10 = *((_QWORD *)a2 + 8);
}

uint64_t JSC::atomicsFuncSub(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v8 = *((int *)a2 + 8) - 1;
  if (v8 < 3)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 8);
  v13[2] = v9;
  if (v8 < 2)
    v10 = 10;
  else
    v10 = *((_QWORD *)a2 + 7);
  v13[1] = v10;
  if (v8)
    v11 = *((_QWORD *)a2 + 6);
  else
    v11 = 10;
  v13[0] = v11;
}

unint64_t JSC::atomicsFuncWait(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  int8x16_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::JSObject *v31;
  int8x16_t v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int8x16_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::VM *v63;
  uint64_t v64;

  v10 = *((_QWORD *)this + 7);
  v63 = (JSC::VM *)v10;
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  v64 = v10;
  v18 = JSC::validateTypedArray(this, v11, a3, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_4;
  v53 = *(_DWORD *)(v10 + 80);
  if ((v53 & 0x27) != 0 && (v53 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v12, v13, v14, v15, v16, v17);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_4:
    v20 = *((unsigned __int8 *)v18 + 5);
    if (v20 == 44 || v20 == 48)
      goto LABEL_8;
    JSC::throwTypeError((unint64_t)this, (JSC::VM **)&v64, (uint64_t)"Typed array argument must be an Int32Array or BigInt64Array.", 61);
  }
  v18 = 0;
LABEL_8:
  if (*(_DWORD *)(v10 + 80))
  {
    v54 = *(_DWORD *)(v10 + 80);
    if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v21 = *((unsigned __int8 *)v18 + 40) - 88;
  if (v21 > 0x35)
    return JSC::throwTypeError((unint64_t)this, &v63, (uint64_t)"Typed array for wait/waitAsync/notify must wrap a SharedArrayBuffer.", 69);
  if (((1 << v21) & 0x3D) == 0)
  {
    if (((1 << v21) & 0x3D000000000000) != 0)
    {
      v22 = *((_QWORD *)v18 + 6);
      goto LABEL_14;
    }
    return JSC::throwTypeError((unint64_t)this, &v63, (uint64_t)"Typed array for wait/waitAsync/notify must wrap a SharedArrayBuffer.", 69);
  }
  v22 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
LABEL_14:
  if (*(_QWORD *)(v22 + 32))
    v23 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v23 = 0;
  if (!v23)
    return JSC::throwTypeError((unint64_t)this, &v63, (uint64_t)"Typed array for wait/waitAsync/notify must wrap a SharedArrayBuffer.", 69);
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v24 = 10;
  else
    v24 = *((_QWORD *)a2 + 7);
  if (*(_DWORD *)(v10 + 80))
  {
    v55 = *(_DWORD *)(v10 + 80);
    if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v25, v26, v27, v28, v29, v30);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v33 = *((unsigned __int8 *)v18 + 5);
  if (v33 != 48)
  {
    if (v33 != 44)
    {
      __break(0xC471u);
      JUMPOUT(0x1988B9DFCLL);
    }
    if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL)
    {
      v64 = 10;
    }
    else
    {
      v26 = *((_QWORD *)a2 + 8);
      v64 = v26;
      if (v26 >= 0xFFFE000000000000)
        goto LABEL_25;
      v49 = v26 - 0x2000000000000;
      if (v26 - 0x2000000000000 < 0xFFFC000000000000)
      {
LABEL_47:
        v50 = (v49 >> 52) & 0x7FF;
        if ((v50 - 1023) <= 0x53)
        {
          v51 = v49 >> (51 - (v49 >> 52));
          if (v50 > 0x433)
            LODWORD(v51) = v49 << ((v49 >> 52) - 51);
          if (v50 >= 0x41F)
            v52 = v51;
          else
            v52 = (((1 << ((v49 >> 52) + 1)) - 1) & v51) + (1 << ((v49 >> 52) + 1));
          if ((v49 & 0x8000000000000000) == 0)
            v26 = v52;
          else
            v26 = -v52;
        }
        else
        {
          v26 = 0;
        }
LABEL_25:
        if (!*(_DWORD *)(v10 + 80))
          goto LABEL_26;
        v56 = *(_DWORD *)(v10 + 80);
        if ((v56 & 0x27) != 0 && (v56 & 0x20) == 0)
        {
          v60 = v26;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v25, v26, v27, v28, v29, v30);
          v26 = v60;
        }
        if (!*(_QWORD *)(v10 + 16))
        {
LABEL_26:
          if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
            v34 = 10;
          else
            v34 = *((_QWORD *)a2 + 9);
          return JSC::atomicsWaitImpl<int,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(this, *((_QWORD *)v18 + 2), (uint64_t)v31, v26, (JSC::JSObject *)v34, 0, v29, v30, v32);
        }
        return 0;
      }
    }
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v64, this, v25, v26, v27, v28, v29, v30, v32);
    v49 = v32.i64[0];
    goto LABEL_47;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
    v36 = 10;
  else
    v36 = *((_QWORD *)a2 + 8);
  v64 = v36;
  v37 = *((_QWORD *)this + 7);
  JSC::JSValue::toBigInt((JSC::Structure **)&v64, this, v25, v26, v27, v28, v29, v30, v32);
  if (*(_DWORD *)(v37 + 80))
  {
    v57 = *(_DWORD *)(v37 + 80);
    if ((v57 & 0x27) != 0 && (v57 & 0x20) == 0)
    {
      v62 = v38;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v37 + 64), 7u, v39, v40, v41, v42, v43, v44);
      v38 = v62;
    }
    if (*(_QWORD *)(v37 + 16))
      goto LABEL_71;
  }
  if (!*(_DWORD *)(v38 + 8))
  {
LABEL_71:
    v48 = 0;
  }
  else
  {
    v46 = *(_QWORD *)(v38 + 24);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v46 = (v46 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v47 = *(_QWORD *)v46;
    if (*(_BYTE *)(v38 + 16))
      v48 = -v47;
    else
      v48 = v47;
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v59 = *(_DWORD *)(v10 + 80);
    if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
    {
      v61 = v48;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v39, v48, v41, v42, v43, v44);
      v48 = v61;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
    v58 = 10;
  else
    v58 = *((_QWORD *)a2 + 9);
  return JSC::atomicsWaitImpl<long long,JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(this, *((_QWORD *)v18 + 2), (uint64_t)v31, v48, (JSC::JSObject *)v58, 0, v43, v44, v45);
}

uint64_t JSC::atomicsFuncXor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v8 = *((int *)a2 + 8) - 1;
  if (v8 < 3)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 8);
  v13[2] = v9;
  if (v8 < 2)
    v10 = 10;
  else
    v10 = *((_QWORD *)a2 + 7);
  v13[1] = v10;
  if (v8)
    v11 = *((_QWORD *)a2 + 6);
  else
    v11 = 10;
  v13[0] = v11;
}

unint64_t JSC::atomicsFuncWaitAsync(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  int8x16_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::JSObject *v31;
  int8x16_t v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int8x16_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::VM *v63;
  uint64_t v64;

  v10 = *((_QWORD *)this + 7);
  v63 = (JSC::VM *)v10;
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  v64 = v10;
  v18 = JSC::validateTypedArray(this, v11, a3, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_4;
  v53 = *(_DWORD *)(v10 + 80);
  if ((v53 & 0x27) != 0 && (v53 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v12, v13, v14, v15, v16, v17);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_4:
    v20 = *((unsigned __int8 *)v18 + 5);
    if (v20 == 44 || v20 == 48)
      goto LABEL_8;
    JSC::throwTypeError((unint64_t)this, (JSC::VM **)&v64, (uint64_t)"Typed array argument must be an Int32Array or BigInt64Array.", 61);
  }
  v18 = 0;
LABEL_8:
  if (*(_DWORD *)(v10 + 80))
  {
    v54 = *(_DWORD *)(v10 + 80);
    if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v21 = *((unsigned __int8 *)v18 + 40) - 88;
  if (v21 > 0x35)
    return JSC::throwTypeError((unint64_t)this, &v63, (uint64_t)"Typed array for wait/waitAsync/notify must wrap a SharedArrayBuffer.", 69);
  if (((1 << v21) & 0x3D) == 0)
  {
    if (((1 << v21) & 0x3D000000000000) != 0)
    {
      v22 = *((_QWORD *)v18 + 6);
      goto LABEL_14;
    }
    return JSC::throwTypeError((unint64_t)this, &v63, (uint64_t)"Typed array for wait/waitAsync/notify must wrap a SharedArrayBuffer.", 69);
  }
  v22 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
LABEL_14:
  if (*(_QWORD *)(v22 + 32))
    v23 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v23 = 0;
  if (!v23)
    return JSC::throwTypeError((unint64_t)this, &v63, (uint64_t)"Typed array for wait/waitAsync/notify must wrap a SharedArrayBuffer.", 69);
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v24 = 10;
  else
    v24 = *((_QWORD *)a2 + 7);
  if (*(_DWORD *)(v10 + 80))
  {
    v55 = *(_DWORD *)(v10 + 80);
    if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v25, v26, v27, v28, v29, v30);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v33 = *((unsigned __int8 *)v18 + 5);
  if (v33 != 48)
  {
    if (v33 != 44)
    {
      __break(0xC471u);
      JUMPOUT(0x1988BA310);
    }
    if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL)
    {
      v64 = 10;
    }
    else
    {
      v26 = *((_QWORD *)a2 + 8);
      v64 = v26;
      if (v26 >= 0xFFFE000000000000)
        goto LABEL_25;
      v49 = v26 - 0x2000000000000;
      if (v26 - 0x2000000000000 < 0xFFFC000000000000)
      {
LABEL_47:
        v50 = (v49 >> 52) & 0x7FF;
        if ((v50 - 1023) <= 0x53)
        {
          v51 = v49 >> (51 - (v49 >> 52));
          if (v50 > 0x433)
            LODWORD(v51) = v49 << ((v49 >> 52) - 51);
          if (v50 >= 0x41F)
            v52 = v51;
          else
            v52 = (((1 << ((v49 >> 52) + 1)) - 1) & v51) + (1 << ((v49 >> 52) + 1));
          if ((v49 & 0x8000000000000000) == 0)
            v26 = v52;
          else
            v26 = -v52;
        }
        else
        {
          v26 = 0;
        }
LABEL_25:
        if (!*(_DWORD *)(v10 + 80))
          goto LABEL_26;
        v56 = *(_DWORD *)(v10 + 80);
        if ((v56 & 0x27) != 0 && (v56 & 0x20) == 0)
        {
          v60 = v26;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v25, v26, v27, v28, v29, v30);
          v26 = v60;
        }
        if (!*(_QWORD *)(v10 + 16))
        {
LABEL_26:
          if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
            v34 = 10;
          else
            v34 = *((_QWORD *)a2 + 9);
          return JSC::atomicsWaitImpl<int,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(this, *((_QWORD *)v18 + 2), (uint64_t)v31, v26, (JSC::JSObject *)v34, 1uLL, v29, v30, v32);
        }
        return 0;
      }
    }
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v64, this, v25, v26, v27, v28, v29, v30, v32);
    v49 = v32.i64[0];
    goto LABEL_47;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
    v36 = 10;
  else
    v36 = *((_QWORD *)a2 + 8);
  v64 = v36;
  v37 = *((_QWORD *)this + 7);
  JSC::JSValue::toBigInt((JSC::Structure **)&v64, this, v25, v26, v27, v28, v29, v30, v32);
  if (*(_DWORD *)(v37 + 80))
  {
    v57 = *(_DWORD *)(v37 + 80);
    if ((v57 & 0x27) != 0 && (v57 & 0x20) == 0)
    {
      v62 = v38;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v37 + 64), 7u, v39, v40, v41, v42, v43, v44);
      v38 = v62;
    }
    if (*(_QWORD *)(v37 + 16))
      goto LABEL_71;
  }
  if (!*(_DWORD *)(v38 + 8))
  {
LABEL_71:
    v48 = 0;
  }
  else
  {
    v46 = *(_QWORD *)(v38 + 24);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v46 = (v46 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v47 = *(_QWORD *)v46;
    if (*(_BYTE *)(v38 + 16))
      v48 = -v47;
    else
      v48 = v47;
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v59 = *(_DWORD *)(v10 + 80);
    if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
    {
      v61 = v48;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v39, v48, v41, v42, v43, v44);
      v48 = v61;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
    v58 = 10;
  else
    v58 = *((_QWORD *)a2 + 9);
  return JSC::atomicsWaitImpl<long long,JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(this, *((_QWORD *)v18 + 2), (uint64_t)v31, v48, (JSC::JSObject *)v58, 1uLL, v43, v44, v45);
}

unint64_t JSC::getWaiterListSize(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  int8x16_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  JSC::VM *v45;
  char v46;
  JSC::VM **v47;
  JSC::VM *v48;

  v10 = *((_QWORD *)this + 7);
  v45 = (JSC::VM *)v10;
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  v48 = (JSC::VM *)v10;
  v18 = JSC::validateTypedArray(this, v11, a3, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_4;
  v42 = *(_DWORD *)(v10 + 80);
  if ((v42 & 0x27) != 0 && (v42 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v12, v13, v14, v15, v16, v17);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_4:
    v20 = *((unsigned __int8 *)v18 + 5);
    if (v20 == 44 || v20 == 48)
      goto LABEL_8;
    JSC::throwTypeError((unint64_t)this, &v48, (uint64_t)"Typed array argument must be an Int32Array or BigInt64Array.", 61);
  }
  v18 = 0;
LABEL_8:
  if (*(_DWORD *)(v10 + 80))
  {
    v43 = *(_DWORD *)(v10 + 80);
    if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v21 = *((unsigned __int8 *)v18 + 40) - 88;
  if (v21 > 0x35)
    return JSC::throwTypeError((unint64_t)this, &v45, (uint64_t)"Typed array for waiterListSize must wrap a SharedArrayBuffer.", 62);
  if (((1 << v21) & 0x3D) == 0)
  {
    if (((1 << v21) & 0x3D000000000000) != 0)
    {
      v22 = *((_QWORD *)v18 + 6);
      goto LABEL_14;
    }
    return JSC::throwTypeError((unint64_t)this, &v45, (uint64_t)"Typed array for waiterListSize must wrap a SharedArrayBuffer.", 62);
  }
  v22 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
LABEL_14:
  if (*(_QWORD *)(v22 + 32))
    v23 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v23 = 0;
  if (!v23)
    return JSC::throwTypeError((unint64_t)this, &v45, (uint64_t)"Typed array for waiterListSize must wrap a SharedArrayBuffer.", 62);
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v24 = 10;
  else
    v24 = *((_QWORD *)a2 + 7);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_21;
  v44 = *(_DWORD *)(v10 + 80);
  if ((v44 & 0x27) != 0 && (v44 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v25, v26, v27, v28, v29, v30);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_21:
    v32 = *((unsigned __int8 *)v18 + 5);
    if (v32 == 48)
    {
      v39 = *((_QWORD *)v18 + 2);
      if (v39 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v39 = (v39 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v40 = (void *)(v39 + 8 * v31);
      v41 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
      if (v41 != -1)
      {
        v48 = (JSC::VM *)&v46;
        v47 = &v48;
        std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, &v47, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
      }
      v36 = JSC::WaiterListManager::waiterListSize((JSC::WaiterListManager *)&JSC::WaiterListManager::singleton(void)::manager, v40, v25, v26, v27, v28, v29, v30);
      if (!HIDWORD(v36))
      {
        if ((v36 & 0x80000000) != 0)
          goto LABEL_31;
        return v36 | 0xFFFE000000000000;
      }
    }
    else
    {
      if (v32 != 44)
      {
        __break(0xC471u);
        JUMPOUT(0x1988BA6B8);
      }
      v33 = *((_QWORD *)v18 + 2);
      if (v33 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v33 = (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v34 = (void *)(v33 + 4 * v31);
      v35 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
      if (v35 != -1)
      {
        v48 = (JSC::VM *)&v46;
        v47 = &v48;
        std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, &v47, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
      }
      v36 = JSC::WaiterListManager::waiterListSize((JSC::WaiterListManager *)&JSC::WaiterListManager::singleton(void)::manager, v34, v25, v26, v27, v28, v29, v30);
      if (!HIDWORD(v36))
      {
        if ((v36 & 0x80000000) != 0)
        {
LABEL_31:
          v37 = (double)v36;
          return *(_QWORD *)&v37 + 0x2000000000000;
        }
        return v36 | 0xFFFE000000000000;
      }
    }
    v37 = (double)v36;
    return *(_QWORD *)&v37 + 0x2000000000000;
  }
  return 0;
}

JSC::JSObject *JSC::`anonymous namespace'::validateAtomicAccess(unint64_t a1, uint64_t a2, uint64_t a3, JSC::JSObject *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  JSC::Heap **v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  JSC::Exception *v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t (*v50)(uint64_t *);
  uint64_t *v51;
  WTF::StringImpl *v52;
  JSC::JSObject *v53;
  uint64_t v54;
  JSC::JSGlobalObject *v55;
  _QWORD *v56;

  v9 = a4;
  v53 = a4;
  if ((*(_BYTE *)(a3 + 40) & 7u) > 2)
  {
    LOBYTE(v54) = 0;
    LOBYTE(v55) = 0;
    v41 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a3, (uint64_t)&v54, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (v42)
      v12 = v41;
    else
      v12 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(a3 + 24);
  }
  if ((unint64_t)v9 < 0xFFFE000000000000 || (v9 & 0x80000000) != 0)
  {
    v9 = JSC::JSValue::toIndex(&v53, (JSC::JSGlobalObject *)a1, (uint64_t)"accessIndex", 12, a5, a6, a7, a8, a9);
    if (*(_DWORD *)(a2 + 80))
    {
      v49 = *(_DWORD *)(a2 + 80);
      if ((v49 & 0x27) != 0 && (v49 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v43, v44, v45, v46, v47, v48);
      if (*(_QWORD *)(a2 + 16))
        return 0;
    }
  }
  if (v12 <= v9)
  {
    v13 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v13 = 0x2D00000002;
    *(_QWORD *)(v13 + 8) = "Access index out of bounds for atomic access.";
    *(_DWORD *)(v13 + 16) = 4;
    v52 = (WTF::StringImpl *)v13;
    v14 = *(_QWORD *)(a1 + 128);
    v15 = *(JSC::Heap ***)(a1 + 56);
    if ((v14 & 1) != 0)
    {
      v50 = *(uint64_t (**)(uint64_t *))(v14 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a1 & 8) != 0)
        v51 = (uint64_t *)(a1 - 16);
      else
        v51 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      v54 = *v51;
      v55 = (JSC::JSGlobalObject *)a1;
      v56 = (_QWORD *)(a1 + 128);
      v14 = v50(&v54);
    }
    v16 = JSC::ErrorInstance::create(v15, v14, &v52, 0, 0, 0, 2, 1);
    v23 = (JSC::Exception *)v16;
    if ((v16 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C)))
    {
      v23 = (JSC::Exception *)JSC::Exception::create(a2, (JSC::VM *)v16, 0, v17, v18, v19, v20, v21);
    }
    JSC::VM::throwException((JSC::VM *)a2, (JSC::JSGlobalObject *)a1, v23, v22, v17, v18, v19, v20, v21);
    v31 = v52;
    v52 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
        WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
    return 0;
  }
  return v9;
}

uint64_t operationAtomicsAdd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD var30[7];

  var30[3] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v8 + 40) = var30[6];
  var30[0] = a2;
  var30[1] = a3;
  var30[2] = a4;
}

uint64_t JSC::`anonymous namespace'::atomicReadModifyWrite<JSC::`anonymous namespace'::AddFunc>(JSC::JSGlobalObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  int8x16_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  signed __int8 v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int16 *v76;
  signed __int16 v77;
  unint64_t v78;
  JSC::Structure *v79;
  JSC::JSGlobalObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int16 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  JSC::Structure *v113;
  JSC::JSGlobalObject *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  JSC::JSGlobalObject *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  int v188;
  JSC::VM **v189;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  JSC::Structure *v200;

  v11 = *(_QWORD *)a3;
  v200 = a1[7];
  v18 = JSC::validateTypedArray((JSC *)a1, v11, (JSC::JSArrayBufferView *)a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v200 + 20))
  {
    v126 = *((_DWORD *)v200 + 20);
    if ((v126 & 0x27) != 0 && (v126 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::Structure *)((char *)v200 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*((_QWORD *)v200 + 2))
      goto LABEL_121;
  }
  v20 = *((unsigned __int8 *)v18 + 5);
  v21 = v20 > 0x31;
  v22 = (1 << v20) & 0x33D8000000000;
  if (v21 || v22 == 0)
  {
    JSC::throwTypeError((unint64_t)a1, &v200, (uint64_t)"Typed array argument must be an Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, Uint32Array, BigInt64Array, or BigUint64Array.", 139);
LABEL_121:
    v18 = 0;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v127 = *(_DWORD *)(a2 + 80);
    if ((v127 & 0x27) != 0 && (v127 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(a2 + 16))
      return 0;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v128 = *(_DWORD *)(a2 + 80);
    if ((v128 & 0x27) != 0 && (v128 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v24, v25, v26, v27, v28, v29);
    if (*(_QWORD *)(a2 + 16))
      return 0;
  }
  switch(*((_BYTE *)v18 + 5))
  {
    case '\'':
      v200 = (JSC::Structure *)a2;
      v38 = JSC::toNativeFromValue<JSC::Int8Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v129 = *(_DWORD *)(a2 + 80);
        if ((v129 & 0x27) != 0 && (v129 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v32, v33, v34, v35, v36, v37);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v39 = *((_QWORD *)v18 + 2);
        if (!v39
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v39 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        v40 = *((_QWORD *)v18 + 3);
        goto LABEL_17;
      }
      v156 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v156 + 64) && (v191 = *(_QWORD *)(v156 + 32)) != 0)
        v157 = *(_QWORD *)(v191 + 32);
      else
        v157 = *(_QWORD *)(v156 + 48);
      v159 = *((_QWORD *)v18 + 3);
      v158 = *((_QWORD *)v18 + 4);
      if (v159 + v158 <= v157)
      {
        if ((*((_BYTE *)v18 + 40) & 1) == 0)
        {
          if (v159 <= v30)
            goto LABEL_257;
          goto LABEL_18;
        }
        v40 = v157 - v158;
LABEL_17:
        if (v40 <= v30)
          goto LABEL_257;
LABEL_18:
        v41 = *((_QWORD *)v18 + 2);
        if (v41 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v41 = (v41 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v42 = (unsigned __int8 *)(v41 + v30);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 + v38, v42));
        v44 = v43;
        return v44 | 0xFFFE000000000000;
      }
LABEL_257:
      v189 = &v200;
      return JSC::throwTypeError((unint64_t)a1, v189, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    case '(':
      v200 = (JSC::Structure *)a2;
      v108 = JSC::toNativeFromValue<JSC::Uint8Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v148 = *(_DWORD *)(a2 + 80);
        if ((v148 & 0x27) != 0 && (v148 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v102, v103, v104, v105, v106, v107);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v109 = *((_QWORD *)v18 + 2);
        if (!v109
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v109 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        v110 = *((_QWORD *)v18 + 3);
        goto LABEL_103;
      }
      v176 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v176 + 64) && (v196 = *(_QWORD *)(v176 + 32)) != 0)
        v177 = *(_QWORD *)(v196 + 32);
      else
        v177 = *(_QWORD *)(v176 + 48);
      v179 = *((_QWORD *)v18 + 3);
      v178 = *((_QWORD *)v18 + 4);
      if (v179 + v178 > v177)
        goto LABEL_257;
      if ((*((_BYTE *)v18 + 40) & 1) != 0)
      {
        v110 = v177 - v178;
LABEL_103:
        if (v110 <= v30)
          goto LABEL_257;
        goto LABEL_104;
      }
      if (v179 <= v30)
        goto LABEL_257;
LABEL_104:
      v111 = *((_QWORD *)v18 + 2);
      if (v111 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v111 = (v111 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v112 = (unsigned __int8 *)(v111 + v30);
      do
        v55 = __ldaxr(v112);
      while (__stlxr(v55 + v108, v112));
LABEL_110:
      v66 = v55;
      return v66 | 0xFFFE000000000000;
    case '*':
      v200 = (JSC::Structure *)a2;
      v73 = JSC::toNativeFromValue<JSC::Int16Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v132 = *(_DWORD *)(a2 + 80);
        if ((v132 & 0x27) != 0 && (v132 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v67, v68, v69, v70, v71, v72);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v74 = *((_QWORD *)v18 + 2);
        if (!v74
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v74 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v168 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v168 + 64) && (v194 = *(_QWORD *)(v168 + 32)) != 0)
          v169 = *(_QWORD *)(v194 + 32);
        else
          v169 = *(_QWORD *)(v168 + 48);
        v171 = *((_QWORD *)v18 + 3);
        v170 = *((_QWORD *)v18 + 4);
        if (v170 + 2 * v171 > v169)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v169 - v170) >> 1)
            goto LABEL_257;
        }
        else if (v171 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v75 = *((_QWORD *)v18 + 2);
      if (v75 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v75 = (v75 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v76 = (unsigned __int16 *)(v75 + 2 * v30);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 + v73, v76));
      v44 = v77;
      return v44 | 0xFFFE000000000000;
    case '+':
      v200 = (JSC::Structure *)a2;
      v98 = JSC::toNativeFromValue<JSC::Uint16Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v147 = *(_DWORD *)(a2 + 80);
        if ((v147 & 0x27) != 0 && (v147 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v92, v93, v94, v95, v96, v97);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v99 = *((_QWORD *)v18 + 2);
        if (!v99
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v99 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v172 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v172 + 64) && (v195 = *(_QWORD *)(v172 + 32)) != 0)
          v173 = *(_QWORD *)(v195 + 32);
        else
          v173 = *(_QWORD *)(v172 + 48);
        v175 = *((_QWORD *)v18 + 3);
        v174 = *((_QWORD *)v18 + 4);
        if (v174 + 2 * v175 > v173)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v173 - v174) >> 1)
            goto LABEL_257;
        }
        else if (v175 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v100 = *((_QWORD *)v18 + 2);
      if (v100 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v100 = (v100 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v101 = (unsigned __int16 *)(v100 + 2 * v30);
      do
        v55 = __ldaxr(v101);
      while (__stlxr(v55 + v98, v101));
      goto LABEL_110;
    case ',':
      v200 = (JSC::Structure *)a2;
      v51 = JSC::toNativeFromValue<JSC::Int32Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v130 = *(_DWORD *)(a2 + 80);
        if ((v130 & 0x27) != 0 && (v130 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v45, v46, v47, v48, v49, v50);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v52 = *((_QWORD *)v18 + 2);
        if (!v52
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v52 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v160 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v160 + 64) && (v192 = *(_QWORD *)(v160 + 32)) != 0)
          v161 = *(_QWORD *)(v192 + 32);
        else
          v161 = *(_QWORD *)(v160 + 48);
        v163 = *((_QWORD *)v18 + 3);
        v162 = *((_QWORD *)v18 + 4);
        if (v162 + 4 * v163 > v161)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v161 - v162) >> 2)
            goto LABEL_257;
        }
        else if (v163 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v53 = *((_QWORD *)v18 + 2);
      if (v53 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v53 = (v53 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v54 = (unsigned int *)(v53 + 4 * v30);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 + v51, v54));
      goto LABEL_110;
    case '-':
      v200 = (JSC::Structure *)a2;
      v62 = JSC::toNativeFromValue<JSC::Uint32Adaptor>((JSC::JSGlobalObject *)a1, *(JSC::JSObject **)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v131 = *(_DWORD *)(a2 + 80);
        if ((v131 & 0x27) != 0 && (v131 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v56, v57, v58, v59, v60, v61);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v63 = *((_QWORD *)v18 + 2);
        if (!v63
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v63 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v164 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v164 + 64) && (v193 = *(_QWORD *)(v164 + 32)) != 0)
          v165 = *(_QWORD *)(v193 + 32);
        else
          v165 = *(_QWORD *)(v164 + 48);
        v167 = *((_QWORD *)v18 + 3);
        v166 = *((_QWORD *)v18 + 4);
        if (v166 + 4 * v167 > v165)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v165 - v166) >> 2)
            goto LABEL_257;
        }
        else if (v167 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v64 = *((_QWORD *)v18 + 2);
      if (v64 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v64 = (v64 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v65 = (unsigned int *)(v64 + 4 * v30);
      do
        LODWORD(v66) = __ldaxr(v65);
      while (__stlxr(v66 + v62, v65));
      if ((v66 & 0x80000000) == 0)
      {
        v66 = v66;
        return v66 | 0xFFFE000000000000;
      }
      return COERCE__INT64((double)v66) + 0x2000000000000;
    case '0':
      v113 = *(JSC::Structure **)(a3 + 16);
      v199 = a2;
      v200 = v113;
      v114 = a1[7];
      JSC::JSValue::toBigInt(&v200, (JSC::JSGlobalObject *)a1, v24, v25, v26, v27, v28, v29, v31);
      v122 = v121;
      if (*((_DWORD *)v114 + 20))
      {
        v149 = *((_DWORD *)v114 + 20);
        if ((v149 & 0x27) != 0 && (v149 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v114 + 64), 7u, v115, v116, v117, v118, v119, v120);
        if (*((_QWORD *)v114 + 2))
          goto LABEL_175;
      }
      if (!*(_DWORD *)(v122 + 8))
      {
LABEL_175:
        v125 = 0;
      }
      else
      {
        v123 = *(_QWORD *)(v122 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v123 = (v123 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v124 = *(_QWORD *)v123;
        if (*(_BYTE *)(v122 + 16))
          v125 = -v124;
        else
          v125 = v124;
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v155 = *(_DWORD *)(a2 + 80);
        if ((v155 & 0x27) != 0 && (v155 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v115, v116, v117, v118, v119, v120);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v150 = *((_QWORD *)v18 + 2);
        if (!v150
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v150 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_262;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v184 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v184 + 64) && (v198 = *(_QWORD *)(v184 + 32)) != 0)
          v185 = *(_QWORD *)(v198 + 32);
        else
          v185 = *(_QWORD *)(v184 + 48);
        v187 = *((_QWORD *)v18 + 3);
        v186 = *((_QWORD *)v18 + 4);
        if (v186 + 8 * v187 > v185)
          goto LABEL_262;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v185 - v186) >> 3)
            goto LABEL_262;
        }
        else if (v187 <= v30)
        {
          goto LABEL_262;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_262;
      }
      v151 = *((_QWORD *)v18 + 2);
      if (v151 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v151 = (v151 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v152 = (unint64_t *)(v151 + 8 * v30);
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 + v125, v152));
      return JSC::JSBigInt::createFrom((JSC::JSBigInt *)a1, v153, v115, v116, v117, v118, v119, v120);
    case '1':
      v79 = *(JSC::Structure **)(a3 + 16);
      v199 = a2;
      v200 = v79;
      v80 = a1[7];
      JSC::JSValue::toBigInt(&v200, (JSC::JSGlobalObject *)a1, v24, v25, v26, v27, v28, v29, v31);
      v88 = v87;
      if (*((_DWORD *)v80 + 20))
      {
        v133 = *((_DWORD *)v80 + 20);
        if ((v133 & 0x27) != 0 && (v133 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v80 + 64), 7u, v81, v82, v83, v84, v85, v86);
        if (*((_QWORD *)v80 + 2))
          goto LABEL_145;
      }
      if (!*(_DWORD *)(v88 + 8))
      {
LABEL_145:
        v91 = 0;
      }
      else
      {
        v89 = *(_QWORD *)(v88 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v89 = (v89 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v90 = *(_QWORD *)v89;
        if (*(_BYTE *)(v88 + 16))
          v91 = -v90;
        else
          v91 = v90;
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v154 = *(_DWORD *)(a2 + 80);
        if ((v154 & 0x27) != 0 && (v154 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v81, v82, v83, v84, v85, v86);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v134 = *((_QWORD *)v18 + 2);
        if (!v134
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v134 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_262;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        if (*((_QWORD *)v18 + 3) > (unint64_t)v30)
          goto LABEL_154;
LABEL_262:
        v189 = (JSC::VM **)&v199;
        return JSC::throwTypeError((unint64_t)a1, v189, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      }
      v180 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v180 + 64) && (v197 = *(_QWORD *)(v180 + 32)) != 0)
        v181 = *(_QWORD *)(v197 + 32);
      else
        v181 = *(_QWORD *)(v180 + 48);
      v183 = *((_QWORD *)v18 + 3);
      v182 = *((_QWORD *)v18 + 4);
      if (v182 + 8 * v183 > v181)
        goto LABEL_262;
      if ((*((_BYTE *)v18 + 40) & 1) != 0)
      {
        if (v30 >= (v181 - v182) >> 3)
          goto LABEL_262;
      }
      else if (v183 <= v30)
      {
        goto LABEL_262;
      }
LABEL_154:
      v135 = *((_QWORD *)v18 + 2);
      if (v135 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v135 = (v135 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v136 = (unint64_t *)(v135 + 8 * v30);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 + v91, v136));
      v138 = a1[7];
      if (!v137)
        return JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], 0, v82, v83, v84, v85, v86);
      v78 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], (JSC::VM *)1, v82, v83, v84, v85, v86);
      if (*((_DWORD *)v138 + 20))
      {
        v188 = *((_DWORD *)v138 + 20);
        if ((v188 & 0x27) != 0 && (v188 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v138 + 64), 7u, v139, v140, v141, v142, v143, v144);
        if (*((_QWORD *)v138 + 2))
          return 0;
      }
      v145 = *(_QWORD *)(v78 + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v145 = (v145 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)v145 = v137;
      *(_BYTE *)(v78 + 16) = 0;
      return v78;
    default:
      __break(0xC471u);
      JUMPOUT(0x1988BB520);
  }
}

uint64_t operationAtomicsAnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD var30[7];

  var30[3] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v8 + 40) = var30[6];
  var30[0] = a2;
  var30[1] = a3;
  var30[2] = a4;
}

uint64_t JSC::`anonymous namespace'::atomicReadModifyWrite<JSC::`anonymous namespace'::AndFunc>(JSC::JSGlobalObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  int8x16_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  signed __int8 v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int16 *v76;
  signed __int16 v77;
  unint64_t v78;
  JSC::Structure *v79;
  JSC::JSGlobalObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int16 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  JSC::Structure *v113;
  JSC::JSGlobalObject *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  JSC::JSGlobalObject *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  int v188;
  JSC::VM **v189;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  JSC::Structure *v200;

  v11 = *(_QWORD *)a3;
  v200 = a1[7];
  v18 = JSC::validateTypedArray((JSC *)a1, v11, (JSC::JSArrayBufferView *)a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v200 + 20))
  {
    v126 = *((_DWORD *)v200 + 20);
    if ((v126 & 0x27) != 0 && (v126 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::Structure *)((char *)v200 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*((_QWORD *)v200 + 2))
      goto LABEL_121;
  }
  v20 = *((unsigned __int8 *)v18 + 5);
  v21 = v20 > 0x31;
  v22 = (1 << v20) & 0x33D8000000000;
  if (v21 || v22 == 0)
  {
    JSC::throwTypeError((unint64_t)a1, &v200, (uint64_t)"Typed array argument must be an Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, Uint32Array, BigInt64Array, or BigUint64Array.", 139);
LABEL_121:
    v18 = 0;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v127 = *(_DWORD *)(a2 + 80);
    if ((v127 & 0x27) != 0 && (v127 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(a2 + 16))
      return 0;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v128 = *(_DWORD *)(a2 + 80);
    if ((v128 & 0x27) != 0 && (v128 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v24, v25, v26, v27, v28, v29);
    if (*(_QWORD *)(a2 + 16))
      return 0;
  }
  switch(*((_BYTE *)v18 + 5))
  {
    case '\'':
      v200 = (JSC::Structure *)a2;
      v38 = JSC::toNativeFromValue<JSC::Int8Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v129 = *(_DWORD *)(a2 + 80);
        if ((v129 & 0x27) != 0 && (v129 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v32, v33, v34, v35, v36, v37);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v39 = *((_QWORD *)v18 + 2);
        if (!v39
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v39 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        v40 = *((_QWORD *)v18 + 3);
        goto LABEL_17;
      }
      v156 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v156 + 64) && (v191 = *(_QWORD *)(v156 + 32)) != 0)
        v157 = *(_QWORD *)(v191 + 32);
      else
        v157 = *(_QWORD *)(v156 + 48);
      v159 = *((_QWORD *)v18 + 3);
      v158 = *((_QWORD *)v18 + 4);
      if (v159 + v158 <= v157)
      {
        if ((*((_BYTE *)v18 + 40) & 1) == 0)
        {
          if (v159 <= v30)
            goto LABEL_257;
          goto LABEL_18;
        }
        v40 = v157 - v158;
LABEL_17:
        if (v40 <= v30)
          goto LABEL_257;
LABEL_18:
        v41 = *((_QWORD *)v18 + 2);
        if (v41 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v41 = (v41 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v42 = (unsigned __int8 *)(v41 + v30);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 & v38, v42));
        v44 = v43;
        return v44 | 0xFFFE000000000000;
      }
LABEL_257:
      v189 = &v200;
      return JSC::throwTypeError((unint64_t)a1, v189, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    case '(':
      v200 = (JSC::Structure *)a2;
      v108 = JSC::toNativeFromValue<JSC::Uint8Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v148 = *(_DWORD *)(a2 + 80);
        if ((v148 & 0x27) != 0 && (v148 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v102, v103, v104, v105, v106, v107);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v109 = *((_QWORD *)v18 + 2);
        if (!v109
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v109 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        v110 = *((_QWORD *)v18 + 3);
        goto LABEL_103;
      }
      v176 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v176 + 64) && (v196 = *(_QWORD *)(v176 + 32)) != 0)
        v177 = *(_QWORD *)(v196 + 32);
      else
        v177 = *(_QWORD *)(v176 + 48);
      v179 = *((_QWORD *)v18 + 3);
      v178 = *((_QWORD *)v18 + 4);
      if (v179 + v178 > v177)
        goto LABEL_257;
      if ((*((_BYTE *)v18 + 40) & 1) != 0)
      {
        v110 = v177 - v178;
LABEL_103:
        if (v110 <= v30)
          goto LABEL_257;
        goto LABEL_104;
      }
      if (v179 <= v30)
        goto LABEL_257;
LABEL_104:
      v111 = *((_QWORD *)v18 + 2);
      if (v111 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v111 = (v111 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v112 = (unsigned __int8 *)(v111 + v30);
      do
        v55 = __ldaxr(v112);
      while (__stlxr(v55 & v108, v112));
LABEL_110:
      v66 = v55;
      return v66 | 0xFFFE000000000000;
    case '*':
      v200 = (JSC::Structure *)a2;
      v73 = JSC::toNativeFromValue<JSC::Int16Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v132 = *(_DWORD *)(a2 + 80);
        if ((v132 & 0x27) != 0 && (v132 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v67, v68, v69, v70, v71, v72);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v74 = *((_QWORD *)v18 + 2);
        if (!v74
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v74 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v168 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v168 + 64) && (v194 = *(_QWORD *)(v168 + 32)) != 0)
          v169 = *(_QWORD *)(v194 + 32);
        else
          v169 = *(_QWORD *)(v168 + 48);
        v171 = *((_QWORD *)v18 + 3);
        v170 = *((_QWORD *)v18 + 4);
        if (v170 + 2 * v171 > v169)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v169 - v170) >> 1)
            goto LABEL_257;
        }
        else if (v171 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v75 = *((_QWORD *)v18 + 2);
      if (v75 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v75 = (v75 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v76 = (unsigned __int16 *)(v75 + 2 * v30);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 & v73, v76));
      v44 = v77;
      return v44 | 0xFFFE000000000000;
    case '+':
      v200 = (JSC::Structure *)a2;
      v98 = JSC::toNativeFromValue<JSC::Uint16Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v147 = *(_DWORD *)(a2 + 80);
        if ((v147 & 0x27) != 0 && (v147 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v92, v93, v94, v95, v96, v97);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v99 = *((_QWORD *)v18 + 2);
        if (!v99
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v99 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v172 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v172 + 64) && (v195 = *(_QWORD *)(v172 + 32)) != 0)
          v173 = *(_QWORD *)(v195 + 32);
        else
          v173 = *(_QWORD *)(v172 + 48);
        v175 = *((_QWORD *)v18 + 3);
        v174 = *((_QWORD *)v18 + 4);
        if (v174 + 2 * v175 > v173)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v173 - v174) >> 1)
            goto LABEL_257;
        }
        else if (v175 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v100 = *((_QWORD *)v18 + 2);
      if (v100 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v100 = (v100 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v101 = (unsigned __int16 *)(v100 + 2 * v30);
      do
        v55 = __ldaxr(v101);
      while (__stlxr(v55 & v98, v101));
      goto LABEL_110;
    case ',':
      v200 = (JSC::Structure *)a2;
      v51 = JSC::toNativeFromValue<JSC::Int32Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v130 = *(_DWORD *)(a2 + 80);
        if ((v130 & 0x27) != 0 && (v130 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v45, v46, v47, v48, v49, v50);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v52 = *((_QWORD *)v18 + 2);
        if (!v52
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v52 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v160 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v160 + 64) && (v192 = *(_QWORD *)(v160 + 32)) != 0)
          v161 = *(_QWORD *)(v192 + 32);
        else
          v161 = *(_QWORD *)(v160 + 48);
        v163 = *((_QWORD *)v18 + 3);
        v162 = *((_QWORD *)v18 + 4);
        if (v162 + 4 * v163 > v161)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v161 - v162) >> 2)
            goto LABEL_257;
        }
        else if (v163 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v53 = *((_QWORD *)v18 + 2);
      if (v53 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v53 = (v53 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v54 = (unsigned int *)(v53 + 4 * v30);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 & v51, v54));
      goto LABEL_110;
    case '-':
      v200 = (JSC::Structure *)a2;
      v62 = JSC::toNativeFromValue<JSC::Uint32Adaptor>((JSC::JSGlobalObject *)a1, *(JSC::JSObject **)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v131 = *(_DWORD *)(a2 + 80);
        if ((v131 & 0x27) != 0 && (v131 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v56, v57, v58, v59, v60, v61);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v63 = *((_QWORD *)v18 + 2);
        if (!v63
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v63 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v164 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v164 + 64) && (v193 = *(_QWORD *)(v164 + 32)) != 0)
          v165 = *(_QWORD *)(v193 + 32);
        else
          v165 = *(_QWORD *)(v164 + 48);
        v167 = *((_QWORD *)v18 + 3);
        v166 = *((_QWORD *)v18 + 4);
        if (v166 + 4 * v167 > v165)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v165 - v166) >> 2)
            goto LABEL_257;
        }
        else if (v167 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v64 = *((_QWORD *)v18 + 2);
      if (v64 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v64 = (v64 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v65 = (unsigned int *)(v64 + 4 * v30);
      do
        LODWORD(v66) = __ldaxr(v65);
      while (__stlxr(v66 & v62, v65));
      if ((v66 & 0x80000000) == 0)
      {
        v66 = v66;
        return v66 | 0xFFFE000000000000;
      }
      return COERCE__INT64((double)v66) + 0x2000000000000;
    case '0':
      v113 = *(JSC::Structure **)(a3 + 16);
      v199 = a2;
      v200 = v113;
      v114 = a1[7];
      JSC::JSValue::toBigInt(&v200, (JSC::JSGlobalObject *)a1, v24, v25, v26, v27, v28, v29, v31);
      v122 = v121;
      if (*((_DWORD *)v114 + 20))
      {
        v149 = *((_DWORD *)v114 + 20);
        if ((v149 & 0x27) != 0 && (v149 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v114 + 64), 7u, v115, v116, v117, v118, v119, v120);
        if (*((_QWORD *)v114 + 2))
          goto LABEL_175;
      }
      if (!*(_DWORD *)(v122 + 8))
      {
LABEL_175:
        v125 = 0;
      }
      else
      {
        v123 = *(_QWORD *)(v122 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v123 = (v123 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v124 = *(_QWORD *)v123;
        if (*(_BYTE *)(v122 + 16))
          v125 = -v124;
        else
          v125 = v124;
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v155 = *(_DWORD *)(a2 + 80);
        if ((v155 & 0x27) != 0 && (v155 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v115, v116, v117, v118, v119, v120);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v150 = *((_QWORD *)v18 + 2);
        if (!v150
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v150 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_262;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v184 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v184 + 64) && (v198 = *(_QWORD *)(v184 + 32)) != 0)
          v185 = *(_QWORD *)(v198 + 32);
        else
          v185 = *(_QWORD *)(v184 + 48);
        v187 = *((_QWORD *)v18 + 3);
        v186 = *((_QWORD *)v18 + 4);
        if (v186 + 8 * v187 > v185)
          goto LABEL_262;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v185 - v186) >> 3)
            goto LABEL_262;
        }
        else if (v187 <= v30)
        {
          goto LABEL_262;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_262;
      }
      v151 = *((_QWORD *)v18 + 2);
      if (v151 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v151 = (v151 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v152 = (unint64_t *)(v151 + 8 * v30);
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 & v125, v152));
      return JSC::JSBigInt::createFrom((JSC::JSBigInt *)a1, v153, v115, v116, v117, v118, v119, v120);
    case '1':
      v79 = *(JSC::Structure **)(a3 + 16);
      v199 = a2;
      v200 = v79;
      v80 = a1[7];
      JSC::JSValue::toBigInt(&v200, (JSC::JSGlobalObject *)a1, v24, v25, v26, v27, v28, v29, v31);
      v88 = v87;
      if (*((_DWORD *)v80 + 20))
      {
        v133 = *((_DWORD *)v80 + 20);
        if ((v133 & 0x27) != 0 && (v133 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v80 + 64), 7u, v81, v82, v83, v84, v85, v86);
        if (*((_QWORD *)v80 + 2))
          goto LABEL_145;
      }
      if (!*(_DWORD *)(v88 + 8))
      {
LABEL_145:
        v91 = 0;
      }
      else
      {
        v89 = *(_QWORD *)(v88 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v89 = (v89 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v90 = *(_QWORD *)v89;
        if (*(_BYTE *)(v88 + 16))
          v91 = -v90;
        else
          v91 = v90;
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v154 = *(_DWORD *)(a2 + 80);
        if ((v154 & 0x27) != 0 && (v154 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v81, v82, v83, v84, v85, v86);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v134 = *((_QWORD *)v18 + 2);
        if (!v134
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v134 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_262;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        if (*((_QWORD *)v18 + 3) > (unint64_t)v30)
          goto LABEL_154;
LABEL_262:
        v189 = (JSC::VM **)&v199;
        return JSC::throwTypeError((unint64_t)a1, v189, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      }
      v180 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v180 + 64) && (v197 = *(_QWORD *)(v180 + 32)) != 0)
        v181 = *(_QWORD *)(v197 + 32);
      else
        v181 = *(_QWORD *)(v180 + 48);
      v183 = *((_QWORD *)v18 + 3);
      v182 = *((_QWORD *)v18 + 4);
      if (v182 + 8 * v183 > v181)
        goto LABEL_262;
      if ((*((_BYTE *)v18 + 40) & 1) != 0)
      {
        if (v30 >= (v181 - v182) >> 3)
          goto LABEL_262;
      }
      else if (v183 <= v30)
      {
        goto LABEL_262;
      }
LABEL_154:
      v135 = *((_QWORD *)v18 + 2);
      if (v135 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v135 = (v135 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v136 = (unint64_t *)(v135 + 8 * v30);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 & v91, v136));
      v138 = a1[7];
      if (!v137)
        return JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], 0, v82, v83, v84, v85, v86);
      v78 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], (JSC::VM *)1, v82, v83, v84, v85, v86);
      if (*((_DWORD *)v138 + 20))
      {
        v188 = *((_DWORD *)v138 + 20);
        if ((v188 & 0x27) != 0 && (v188 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v138 + 64), 7u, v139, v140, v141, v142, v143, v144);
        if (*((_QWORD *)v138 + 2))
          return 0;
      }
      v145 = *(_QWORD *)(v78 + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v145 = (v145 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)v145 = v137;
      *(_BYTE *)(v78 + 16) = 0;
      return v78;
    default:
      __break(0xC471u);
      JUMPOUT(0x1988BC42CLL);
  }
}

uint64_t operationAtomicsCompareExchange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD var38[8];

  var38[4] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v8 + 40) = var38[7];
  var38[0] = a2;
  var38[1] = a3;
  var38[2] = a4;
  var38[3] = a5;
}

uint64_t JSC::`anonymous namespace'::atomicReadModifyWrite<JSC::`anonymous namespace'::CompareExchangeFunc>(JSC::JSGlobalObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  int8x16_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  int8x16_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int8x16_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int8x16_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int16 v95;
  int8x16_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int16 v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int16 *v106;
  int v107;
  JSC::Structure *v108;
  JSC::JSGlobalObject *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int8x16_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int8x16_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int16 v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int16 *v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int8x16_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned __int8 v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unsigned __int8 *v159;
  JSC::Structure *v160;
  JSC::JSGlobalObject *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int8x16_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unsigned int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  JSC::JSGlobalObject *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  int v196;
  int v197;
  int v198;
  JSC::JSGlobalObject *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  JSC::JSGlobalObject *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t *v236;
  uint64_t v237;
  int v238;
  int v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  int v272;
  JSC::VM **v273;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  JSC::Structure *v284;

  v11 = *(_QWORD *)a3;
  v284 = a1[7];
  v18 = JSC::validateTypedArray((JSC *)a1, v11, (JSC::JSArrayBufferView *)a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v284 + 20))
  {
    v176 = *((_DWORD *)v284 + 20);
    if ((v176 & 0x27) != 0 && (v176 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::Structure *)((char *)v284 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*((_QWORD *)v284 + 2))
      goto LABEL_130;
  }
  v20 = *((unsigned __int8 *)v18 + 5);
  v21 = v20 > 0x31;
  v22 = (1 << v20) & 0x33D8000000000;
  if (v21 || v22 == 0)
  {
    JSC::throwTypeError((unint64_t)a1, &v284, (uint64_t)"Typed array argument must be an Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, Uint32Array, BigInt64Array, or BigUint64Array.", 139);
LABEL_130:
    v18 = 0;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v177 = *(_DWORD *)(a2 + 80);
    if ((v177 & 0x27) != 0 && (v177 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(a2 + 16))
      return 0;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v178 = *(_DWORD *)(a2 + 80);
    if ((v178 & 0x27) != 0 && (v178 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v24, v25, v26, v27, v28, v29);
    if (*(_QWORD *)(a2 + 16))
      return 0;
  }
  switch(*((_BYTE *)v18 + 5))
  {
    case '\'':
      v284 = (JSC::Structure *)a2;
      v38 = JSC::toNativeFromValue<JSC::Int8Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v179 = *(_DWORD *)(a2 + 80);
        if ((v179 & 0x27) != 0 && (v179 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v32, v33, v34, v35, v36, v37);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      v46 = JSC::toNativeFromValue<JSC::Int8Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 24), v32, v33, v34, v35, v36, v37, v39);
      if (*(_DWORD *)(a2 + 80))
      {
        v213 = *(_DWORD *)(a2 + 80);
        if ((v213 & 0x27) != 0 && (v213 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v40, v41, v42, v43, v44, v45);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v47 = *((_QWORD *)v18 + 2);
        if (!v47
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v47 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_332;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        v48 = *((_QWORD *)v18 + 3);
        goto LABEL_18;
      }
      v240 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v240 + 64) && (v275 = *(_QWORD *)(v240 + 32)) != 0)
        v241 = *(_QWORD *)(v275 + 32);
      else
        v241 = *(_QWORD *)(v240 + 48);
      v243 = *((_QWORD *)v18 + 3);
      v242 = *((_QWORD *)v18 + 4);
      if (v243 + v242 <= v241)
      {
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          v48 = v241 - v242;
LABEL_18:
          if (v48 <= v30)
            goto LABEL_332;
          goto LABEL_19;
        }
        if (v243 > v30)
        {
LABEL_19:
          v49 = *((_QWORD *)v18 + 2);
          if (v49 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v49 = (v49 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v50 = (unsigned __int8 *)(v49 + v30);
          while (1)
          {
            v51 = __ldaxr(v50);
            if (v51 != v38)
              break;
            if (!__stlxr(v46, v50))
              goto LABEL_141;
          }
          __clrex();
LABEL_141:
          v175 = (char)v51;
          return v175 | 0xFFFE000000000000;
        }
      }
LABEL_332:
      v273 = &v284;
      return JSC::throwTypeError((unint64_t)a1, v273, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    case '(':
      v284 = (JSC::Structure *)a2;
      v147 = JSC::toNativeFromValue<JSC::Uint8Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v197 = *(_DWORD *)(a2 + 80);
        if ((v197 & 0x27) != 0 && (v197 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v141, v142, v143, v144, v145, v146);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      v155 = JSC::toNativeFromValue<JSC::Uint8Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 24), v141, v142, v143, v144, v145, v146, v148);
      if (*(_DWORD *)(a2 + 80))
      {
        v218 = *(_DWORD *)(a2 + 80);
        if ((v218 & 0x27) != 0 && (v218 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v149, v150, v151, v152, v153, v154);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v156 = *((_QWORD *)v18 + 2);
        if (!v156
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v156 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_332;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        v157 = *((_QWORD *)v18 + 3);
        goto LABEL_112;
      }
      v260 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v260 + 64) && (v280 = *(_QWORD *)(v260 + 32)) != 0)
        v261 = *(_QWORD *)(v280 + 32);
      else
        v261 = *(_QWORD *)(v260 + 48);
      v263 = *((_QWORD *)v18 + 3);
      v262 = *((_QWORD *)v18 + 4);
      if (v263 + v262 > v261)
        goto LABEL_332;
      if ((*((_BYTE *)v18 + 40) & 1) != 0)
      {
        v157 = v261 - v262;
LABEL_112:
        if (v157 <= v30)
          goto LABEL_332;
        goto LABEL_113;
      }
      if (v263 <= v30)
        goto LABEL_332;
LABEL_113:
      v158 = *((_QWORD *)v18 + 2);
      if (v158 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v158 = (v158 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v159 = (unsigned __int8 *)(v158 + v30);
      do
      {
        v140 = __ldaxr(v159);
        if (v140 != v147)
          goto LABEL_131;
      }
      while (__stlxr(v155, v159));
LABEL_132:
      v70 = v140;
      return v70 | 0xFFFE000000000000;
    case '*':
      v284 = (JSC::Structure *)a2;
      v95 = JSC::toNativeFromValue<JSC::Int16Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v182 = *(_DWORD *)(a2 + 80);
        if ((v182 & 0x27) != 0 && (v182 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v89, v90, v91, v92, v93, v94);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      v103 = JSC::toNativeFromValue<JSC::Int16Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 24), v89, v90, v91, v92, v93, v94, v96);
      if (*(_DWORD *)(a2 + 80))
      {
        v216 = *(_DWORD *)(a2 + 80);
        if ((v216 & 0x27) != 0 && (v216 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v97, v98, v99, v100, v101, v102);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v104 = *((_QWORD *)v18 + 2);
        if (!v104
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v104 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_332;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v252 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v252 + 64) && (v278 = *(_QWORD *)(v252 + 32)) != 0)
          v253 = *(_QWORD *)(v278 + 32);
        else
          v253 = *(_QWORD *)(v252 + 48);
        v255 = *((_QWORD *)v18 + 3);
        v254 = *((_QWORD *)v18 + 4);
        if (v254 + 2 * v255 > v253)
          goto LABEL_332;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v253 - v254) >> 1)
            goto LABEL_332;
        }
        else if (v255 <= v30)
        {
          goto LABEL_332;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_332;
      }
      v105 = *((_QWORD *)v18 + 2);
      if (v105 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v105 = (v105 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v106 = (unsigned __int16 *)(v105 + 2 * v30);
      while (1)
      {
        v107 = __ldaxr(v106);
        if (v107 != v95)
          break;
        if (!__stlxr(v103, v106))
          goto LABEL_139;
      }
      __clrex();
LABEL_139:
      v175 = (__int16)v107;
      return v175 | 0xFFFE000000000000;
    case '+':
      v284 = (JSC::Structure *)a2;
      v128 = JSC::toNativeFromValue<JSC::Uint16Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v196 = *(_DWORD *)(a2 + 80);
        if ((v196 & 0x27) != 0 && (v196 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v122, v123, v124, v125, v126, v127);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      v136 = JSC::toNativeFromValue<JSC::Uint16Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 24), v122, v123, v124, v125, v126, v127, v129);
      if (*(_DWORD *)(a2 + 80))
      {
        v217 = *(_DWORD *)(a2 + 80);
        if ((v217 & 0x27) != 0 && (v217 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v130, v131, v132, v133, v134, v135);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v137 = *((_QWORD *)v18 + 2);
        if (!v137
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v137 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_332;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v256 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v256 + 64) && (v279 = *(_QWORD *)(v256 + 32)) != 0)
          v257 = *(_QWORD *)(v279 + 32);
        else
          v257 = *(_QWORD *)(v256 + 48);
        v259 = *((_QWORD *)v18 + 3);
        v258 = *((_QWORD *)v18 + 4);
        if (v258 + 2 * v259 > v257)
          goto LABEL_332;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v257 - v258) >> 1)
            goto LABEL_332;
        }
        else if (v259 <= v30)
        {
          goto LABEL_332;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_332;
      }
      v138 = *((_QWORD *)v18 + 2);
      if (v138 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v138 = (v138 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v139 = (unsigned __int16 *)(v138 + 2 * v30);
      while (1)
      {
        v140 = __ldaxr(v139);
        if (v140 != v128)
          break;
        if (!__stlxr(v136, v139))
          goto LABEL_132;
      }
LABEL_131:
      __clrex();
      goto LABEL_132;
    case ',':
      v284 = (JSC::Structure *)a2;
      v58 = JSC::toNativeFromValue<JSC::Int32Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v180 = *(_DWORD *)(a2 + 80);
        if ((v180 & 0x27) != 0 && (v180 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v52, v53, v54, v55, v56, v57);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      v66 = JSC::toNativeFromValue<JSC::Int32Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 24), v52, v53, v54, v55, v56, v57, v59);
      if (*(_DWORD *)(a2 + 80))
      {
        v214 = *(_DWORD *)(a2 + 80);
        if ((v214 & 0x27) != 0 && (v214 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v60, v61, v62, v63, v64, v65);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v67 = *((_QWORD *)v18 + 2);
        if (!v67
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v67 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_332;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v244 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v244 + 64) && (v276 = *(_QWORD *)(v244 + 32)) != 0)
          v245 = *(_QWORD *)(v276 + 32);
        else
          v245 = *(_QWORD *)(v244 + 48);
        v247 = *((_QWORD *)v18 + 3);
        v246 = *((_QWORD *)v18 + 4);
        if (v246 + 4 * v247 > v245)
          goto LABEL_332;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v245 - v246) >> 2)
            goto LABEL_332;
        }
        else if (v247 <= v30)
        {
          goto LABEL_332;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_332;
      }
      v68 = *((_QWORD *)v18 + 2);
      if (v68 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v68 = (v68 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v69 = (unsigned int *)(v68 + 4 * v30);
      while (1)
      {
        LODWORD(v70) = __ldaxr(v69);
        if ((_DWORD)v70 != v58)
          break;
        if (!__stlxr(v66, v69))
          goto LABEL_136;
      }
      __clrex();
      goto LABEL_136;
    case '-':
      v284 = (JSC::Structure *)a2;
      v77 = JSC::toNativeFromValue<JSC::Uint32Adaptor>((JSC::JSGlobalObject *)a1, *(JSC::JSObject **)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v181 = *(_DWORD *)(a2 + 80);
        if ((v181 & 0x27) != 0 && (v181 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v71, v72, v73, v74, v75, v76);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      v85 = JSC::toNativeFromValue<JSC::Uint32Adaptor>((JSC::JSGlobalObject *)a1, *(JSC::JSObject **)(a3 + 24), v71, v72, v73, v74, v75, v76, v78);
      if (*(_DWORD *)(a2 + 80))
      {
        v215 = *(_DWORD *)(a2 + 80);
        if ((v215 & 0x27) != 0 && (v215 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v79, v80, v81, v82, v83, v84);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v86 = *((_QWORD *)v18 + 2);
        if (!v86
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v86 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_332;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v248 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v248 + 64) && (v277 = *(_QWORD *)(v248 + 32)) != 0)
          v249 = *(_QWORD *)(v277 + 32);
        else
          v249 = *(_QWORD *)(v248 + 48);
        v251 = *((_QWORD *)v18 + 3);
        v250 = *((_QWORD *)v18 + 4);
        if (v250 + 4 * v251 > v249)
          goto LABEL_332;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v249 - v250) >> 2)
            goto LABEL_332;
        }
        else if (v251 <= v30)
        {
          goto LABEL_332;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_332;
      }
      v87 = *((_QWORD *)v18 + 2);
      if (v87 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v87 = (v87 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v88 = (unsigned int *)(v87 + 4 * v30);
      while (1)
      {
        LODWORD(v70) = __ldaxr(v88);
        if ((_DWORD)v70 != v77)
          break;
        if (!__stlxr(v85, v88))
          goto LABEL_135;
      }
      __clrex();
LABEL_135:
      if ((v70 & 0x80000000) == 0)
      {
LABEL_136:
        v70 = v70;
        return v70 | 0xFFFE000000000000;
      }
      return COERCE__INT64((double)v70) + 0x2000000000000;
    case '0':
      v160 = *(JSC::Structure **)(a3 + 16);
      v283 = a2;
      v284 = v160;
      v161 = a1[7];
      JSC::JSValue::toBigInt(&v284, (JSC::JSGlobalObject *)a1, v24, v25, v26, v27, v28, v29, v31);
      v170 = v169;
      if (*((_DWORD *)v161 + 20))
      {
        v198 = *((_DWORD *)v161 + 20);
        if ((v198 & 0x27) != 0 && (v198 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v161 + 64), 7u, v162, v163, v164, v165, v166, v167);
        if (*((_QWORD *)v161 + 2))
          goto LABEL_184;
      }
      if (!*(_DWORD *)(v170 + 8))
      {
LABEL_184:
        v173 = 0;
      }
      else
      {
        v171 = *(_QWORD *)(v170 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v171 = (v171 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v172 = *(_QWORD *)v171;
        if (*(_BYTE *)(v170 + 16))
          v173 = -v172;
        else
          v173 = v172;
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v212 = *(_DWORD *)(a2 + 80);
        if ((v212 & 0x27) != 0 && (v212 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v162, v163, v164, v165, v166, v167);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      v284 = *(JSC::Structure **)(a3 + 24);
      v199 = a1[7];
      JSC::JSValue::toBigInt(&v284, (JSC::JSGlobalObject *)a1, v162, v163, v164, v165, v166, v167, v168);
      v207 = v206;
      if (*((_DWORD *)v199 + 20))
      {
        v233 = *((_DWORD *)v199 + 20);
        if ((v233 & 0x27) != 0 && (v233 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v199 + 64), 7u, v200, v201, v202, v203, v204, v205);
        if (*((_QWORD *)v199 + 2))
          goto LABEL_247;
      }
      if (!*(_DWORD *)(v207 + 8))
      {
LABEL_247:
        v210 = 0;
      }
      else
      {
        v208 = *(_QWORD *)(v207 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v208 = (v208 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v209 = *(_QWORD *)v208;
        v210 = *(_BYTE *)(v207 + 16) ? -v209 : v209;
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v239 = *(_DWORD *)(a2 + 80);
        if ((v239 & 0x27) != 0 && (v239 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v200, v201, v202, v203, v204, v205);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v234 = *((_QWORD *)v18 + 2);
        if (!v234
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v234 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_337;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
          goto LABEL_337;
        goto LABEL_256;
      }
      v268 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v268 + 64) && (v282 = *(_QWORD *)(v268 + 32)) != 0)
        v269 = *(_QWORD *)(v282 + 32);
      else
        v269 = *(_QWORD *)(v268 + 48);
      v271 = *((_QWORD *)v18 + 3);
      v270 = *((_QWORD *)v18 + 4);
      if (v270 + 8 * v271 > v269)
        goto LABEL_337;
      if ((*((_BYTE *)v18 + 40) & 1) != 0)
      {
        if (v30 >= (v269 - v270) >> 3)
          goto LABEL_337;
LABEL_256:
        v235 = *((_QWORD *)v18 + 2);
        if (v235 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v235 = (v235 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v236 = (unint64_t *)(v235 + 8 * v30);
        while (1)
        {
          v237 = __ldaxr(v236);
          if (v237 != v173)
            break;
          if (!__stlxr(v210, v236))
            return JSC::JSBigInt::createFrom((JSC::JSBigInt *)a1, v237, v200, v201, v202, v203, v204, v205);
        }
        __clrex();
        return JSC::JSBigInt::createFrom((JSC::JSBigInt *)a1, v237, v200, v201, v202, v203, v204, v205);
      }
      if (v271 > v30)
        goto LABEL_256;
LABEL_337:
      v273 = (JSC::VM **)&v283;
      return JSC::throwTypeError((unint64_t)a1, v273, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    case '1':
      v108 = *(JSC::Structure **)(a3 + 16);
      v283 = a2;
      v284 = v108;
      v109 = a1[7];
      JSC::JSValue::toBigInt(&v284, (JSC::JSGlobalObject *)a1, v24, v25, v26, v27, v28, v29, v31);
      v118 = v117;
      if (*((_DWORD *)v109 + 20))
      {
        v183 = *((_DWORD *)v109 + 20);
        if ((v183 & 0x27) != 0 && (v183 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v109 + 64), 7u, v110, v111, v112, v113, v114, v115);
        if (*((_QWORD *)v109 + 2))
          goto LABEL_166;
      }
      if (!*(_DWORD *)(v118 + 8))
      {
LABEL_166:
        v121 = 0;
      }
      else
      {
        v119 = *(_QWORD *)(v118 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v119 = (v119 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v120 = *(_QWORD *)v119;
        if (*(_BYTE *)(v118 + 16))
          v121 = -v120;
        else
          v121 = v120;
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v211 = *(_DWORD *)(a2 + 80);
        if ((v211 & 0x27) != 0 && (v211 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v110, v111, v112, v113, v114, v115);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      v284 = *(JSC::Structure **)(a3 + 24);
      v184 = a1[7];
      JSC::JSValue::toBigInt(&v284, (JSC::JSGlobalObject *)a1, v110, v111, v112, v113, v114, v115, v116);
      v192 = v191;
      if (*((_DWORD *)v184 + 20))
      {
        v219 = *((_DWORD *)v184 + 20);
        if ((v219 & 0x27) != 0 && (v219 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v184 + 64), 7u, v185, v186, v187, v188, v189, v190);
        if (*((_QWORD *)v184 + 2))
          goto LABEL_220;
      }
      if (!*(_DWORD *)(v192 + 8))
      {
LABEL_220:
        v195 = 0;
      }
      else
      {
        v193 = *(_QWORD *)(v192 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v193 = (v193 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v194 = *(_QWORD *)v193;
        v195 = *(_BYTE *)(v192 + 16) ? -v194 : v194;
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v238 = *(_DWORD *)(a2 + 80);
        if ((v238 & 0x27) != 0 && (v238 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v185, v186, v187, v188, v189, v190);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v220 = *((_QWORD *)v18 + 2);
        if (!v220
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v220 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_337;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v264 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v264 + 64) && (v281 = *(_QWORD *)(v264 + 32)) != 0)
          v265 = *(_QWORD *)(v281 + 32);
        else
          v265 = *(_QWORD *)(v264 + 48);
        v267 = *((_QWORD *)v18 + 3);
        v266 = *((_QWORD *)v18 + 4);
        if (v266 + 8 * v267 > v265)
          goto LABEL_337;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v265 - v266) >> 3)
            goto LABEL_337;
        }
        else if (v267 <= v30)
        {
          goto LABEL_337;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_337;
      }
      v221 = *((_QWORD *)v18 + 2);
      if (v221 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v221 = (v221 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v222 = (unint64_t *)(v221 + 8 * v30);
      while (1)
      {
        v223 = __ldaxr(v222);
        if (v223 != v121)
          break;
        if (!__stlxr(v195, v222))
          goto LABEL_238;
      }
      __clrex();
LABEL_238:
      v224 = a1[7];
      if (!v223)
        return JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], 0, v186, v187, v188, v189, v190);
      v174 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], (JSC::VM *)1, v186, v187, v188, v189, v190);
      if (*((_DWORD *)v224 + 20))
      {
        v272 = *((_DWORD *)v224 + 20);
        if ((v272 & 0x27) != 0 && (v272 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v224 + 64), 7u, v225, v226, v227, v228, v229, v230);
        if (*((_QWORD *)v224 + 2))
          return 0;
      }
      v231 = *(_QWORD *)(v174 + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v231 = (v231 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)v231 = v223;
      *(_BYTE *)(v174 + 16) = 0;
      return v174;
    default:
      __break(0xC471u);
      JUMPOUT(0x1988BD610);
  }
}

uint64_t operationAtomicsExchange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD var30[7];

  var30[3] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v8 + 40) = var30[6];
  var30[0] = a2;
  var30[1] = a3;
  var30[2] = a4;
}

uint64_t JSC::`anonymous namespace'::atomicReadModifyWrite<JSC::`anonymous namespace'::ExchangeFunc>(JSC::JSGlobalObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  int8x16_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  signed __int8 v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int16 v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int16 *v75;
  signed __int16 v76;
  unint64_t v77;
  JSC::Structure *v78;
  JSC::JSGlobalObject *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int16 v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int16 *v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int8 v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  JSC::Structure *v113;
  JSC::JSGlobalObject *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  JSC::JSGlobalObject *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  int v188;
  JSC::VM **v189;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  JSC::Structure *v200;

  v11 = *(_QWORD *)a3;
  v200 = a1[7];
  v18 = JSC::validateTypedArray((JSC *)a1, v11, (JSC::JSArrayBufferView *)a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v200 + 20))
  {
    v126 = *((_DWORD *)v200 + 20);
    if ((v126 & 0x27) != 0 && (v126 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::Structure *)((char *)v200 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*((_QWORD *)v200 + 2))
      goto LABEL_121;
  }
  v20 = *((unsigned __int8 *)v18 + 5);
  v21 = v20 > 0x31;
  v22 = (1 << v20) & 0x33D8000000000;
  if (v21 || v22 == 0)
  {
    JSC::throwTypeError((unint64_t)a1, &v200, (uint64_t)"Typed array argument must be an Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, Uint32Array, BigInt64Array, or BigUint64Array.", 139);
LABEL_121:
    v18 = 0;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v127 = *(_DWORD *)(a2 + 80);
    if ((v127 & 0x27) != 0 && (v127 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(a2 + 16))
      return 0;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v128 = *(_DWORD *)(a2 + 80);
    if ((v128 & 0x27) != 0 && (v128 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v24, v25, v26, v27, v28, v29);
    if (*(_QWORD *)(a2 + 16))
      return 0;
  }
  switch(*((_BYTE *)v18 + 5))
  {
    case '\'':
      v200 = (JSC::Structure *)a2;
      v38 = JSC::toNativeFromValue<JSC::Int8Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v129 = *(_DWORD *)(a2 + 80);
        if ((v129 & 0x27) != 0 && (v129 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v32, v33, v34, v35, v36, v37);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v39 = *((_QWORD *)v18 + 2);
        if (!v39
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v39 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        v40 = *((_QWORD *)v18 + 3);
        goto LABEL_17;
      }
      v156 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v156 + 64) && (v191 = *(_QWORD *)(v156 + 32)) != 0)
        v157 = *(_QWORD *)(v191 + 32);
      else
        v157 = *(_QWORD *)(v156 + 48);
      v159 = *((_QWORD *)v18 + 3);
      v158 = *((_QWORD *)v18 + 4);
      if (v159 + v158 <= v157)
      {
        if ((*((_BYTE *)v18 + 40) & 1) == 0)
        {
          if (v159 <= v30)
            goto LABEL_257;
          goto LABEL_18;
        }
        v40 = v157 - v158;
LABEL_17:
        if (v40 <= v30)
          goto LABEL_257;
LABEL_18:
        v41 = *((_QWORD *)v18 + 2);
        if (v41 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v41 = (v41 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v42 = (unsigned __int8 *)(v41 + v30);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v38, v42));
        v44 = v43;
        return v44 | 0xFFFE000000000000;
      }
LABEL_257:
      v189 = &v200;
      return JSC::throwTypeError((unint64_t)a1, v189, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    case '(':
      v200 = (JSC::Structure *)a2;
      v108 = JSC::toNativeFromValue<JSC::Uint8Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v148 = *(_DWORD *)(a2 + 80);
        if ((v148 & 0x27) != 0 && (v148 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v102, v103, v104, v105, v106, v107);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v109 = *((_QWORD *)v18 + 2);
        if (!v109
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v109 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        v110 = *((_QWORD *)v18 + 3);
        goto LABEL_103;
      }
      v176 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v176 + 64) && (v196 = *(_QWORD *)(v176 + 32)) != 0)
        v177 = *(_QWORD *)(v196 + 32);
      else
        v177 = *(_QWORD *)(v176 + 48);
      v179 = *((_QWORD *)v18 + 3);
      v178 = *((_QWORD *)v18 + 4);
      if (v179 + v178 > v177)
        goto LABEL_257;
      if ((*((_BYTE *)v18 + 40) & 1) != 0)
      {
        v110 = v177 - v178;
LABEL_103:
        if (v110 <= v30)
          goto LABEL_257;
        goto LABEL_104;
      }
      if (v179 <= v30)
        goto LABEL_257;
LABEL_104:
      v111 = *((_QWORD *)v18 + 2);
      if (v111 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v111 = (v111 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v112 = (unsigned __int8 *)(v111 + v30);
      do
        v101 = __ldaxr(v112);
      while (__stlxr(v108, v112));
LABEL_110:
      v55 = v101;
      return v55 | 0xFFFE000000000000;
    case '*':
      v200 = (JSC::Structure *)a2;
      v72 = JSC::toNativeFromValue<JSC::Int16Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v132 = *(_DWORD *)(a2 + 80);
        if ((v132 & 0x27) != 0 && (v132 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v66, v67, v68, v69, v70, v71);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v73 = *((_QWORD *)v18 + 2);
        if (!v73
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v73 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v168 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v168 + 64) && (v194 = *(_QWORD *)(v168 + 32)) != 0)
          v169 = *(_QWORD *)(v194 + 32);
        else
          v169 = *(_QWORD *)(v168 + 48);
        v171 = *((_QWORD *)v18 + 3);
        v170 = *((_QWORD *)v18 + 4);
        if (v170 + 2 * v171 > v169)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v169 - v170) >> 1)
            goto LABEL_257;
        }
        else if (v171 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v74 = *((_QWORD *)v18 + 2);
      if (v74 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v74 = (v74 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v75 = (unsigned __int16 *)(v74 + 2 * v30);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v72, v75));
      v44 = v76;
      return v44 | 0xFFFE000000000000;
    case '+':
      v200 = (JSC::Structure *)a2;
      v97 = JSC::toNativeFromValue<JSC::Uint16Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v147 = *(_DWORD *)(a2 + 80);
        if ((v147 & 0x27) != 0 && (v147 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v91, v92, v93, v94, v95, v96);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v98 = *((_QWORD *)v18 + 2);
        if (!v98
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v98 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v172 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v172 + 64) && (v195 = *(_QWORD *)(v172 + 32)) != 0)
          v173 = *(_QWORD *)(v195 + 32);
        else
          v173 = *(_QWORD *)(v172 + 48);
        v175 = *((_QWORD *)v18 + 3);
        v174 = *((_QWORD *)v18 + 4);
        if (v174 + 2 * v175 > v173)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v173 - v174) >> 1)
            goto LABEL_257;
        }
        else if (v175 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v99 = *((_QWORD *)v18 + 2);
      if (v99 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v99 = (v99 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v100 = (unsigned __int16 *)(v99 + 2 * v30);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v97, v100));
      goto LABEL_110;
    case ',':
      v200 = (JSC::Structure *)a2;
      v51 = JSC::toNativeFromValue<JSC::Int32Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v130 = *(_DWORD *)(a2 + 80);
        if ((v130 & 0x27) != 0 && (v130 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v45, v46, v47, v48, v49, v50);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v52 = *((_QWORD *)v18 + 2);
        if (!v52
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v52 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v160 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v160 + 64) && (v192 = *(_QWORD *)(v160 + 32)) != 0)
          v161 = *(_QWORD *)(v192 + 32);
        else
          v161 = *(_QWORD *)(v160 + 48);
        v163 = *((_QWORD *)v18 + 3);
        v162 = *((_QWORD *)v18 + 4);
        if (v162 + 4 * v163 > v161)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v161 - v162) >> 2)
            goto LABEL_257;
        }
        else if (v163 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v53 = *((_QWORD *)v18 + 2);
      if (v53 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v53 = (v53 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v54 = (unsigned int *)(v53 + 4 * v30);
      do
        LODWORD(v55) = __ldaxr(v54);
      while (__stlxr(v51, v54));
      goto LABEL_55;
    case '-':
      v200 = (JSC::Structure *)a2;
      v62 = JSC::toNativeFromValue<JSC::Uint32Adaptor>((JSC::JSGlobalObject *)a1, *(JSC::JSObject **)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v131 = *(_DWORD *)(a2 + 80);
        if ((v131 & 0x27) != 0 && (v131 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v56, v57, v58, v59, v60, v61);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v63 = *((_QWORD *)v18 + 2);
        if (!v63
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v63 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v164 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v164 + 64) && (v193 = *(_QWORD *)(v164 + 32)) != 0)
          v165 = *(_QWORD *)(v193 + 32);
        else
          v165 = *(_QWORD *)(v164 + 48);
        v167 = *((_QWORD *)v18 + 3);
        v166 = *((_QWORD *)v18 + 4);
        if (v166 + 4 * v167 > v165)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v165 - v166) >> 2)
            goto LABEL_257;
        }
        else if (v167 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v64 = *((_QWORD *)v18 + 2);
      if (v64 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v64 = (v64 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v65 = (unsigned int *)(v64 + 4 * v30);
      do
        LODWORD(v55) = __ldaxr(v65);
      while (__stlxr(v62, v65));
      if ((v55 & 0x80000000) == 0)
      {
LABEL_55:
        v55 = v55;
        return v55 | 0xFFFE000000000000;
      }
      return COERCE__INT64((double)v55) + 0x2000000000000;
    case '0':
      v113 = *(JSC::Structure **)(a3 + 16);
      v199 = a2;
      v200 = v113;
      v114 = a1[7];
      JSC::JSValue::toBigInt(&v200, (JSC::JSGlobalObject *)a1, v24, v25, v26, v27, v28, v29, v31);
      v122 = v121;
      if (*((_DWORD *)v114 + 20))
      {
        v149 = *((_DWORD *)v114 + 20);
        if ((v149 & 0x27) != 0 && (v149 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v114 + 64), 7u, v115, v116, v117, v118, v119, v120);
        if (*((_QWORD *)v114 + 2))
          goto LABEL_175;
      }
      if (!*(_DWORD *)(v122 + 8))
      {
LABEL_175:
        v125 = 0;
      }
      else
      {
        v123 = *(_QWORD *)(v122 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v123 = (v123 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v124 = *(_QWORD *)v123;
        if (*(_BYTE *)(v122 + 16))
          v125 = -(uint64_t)v124;
        else
          v125 = v124;
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v155 = *(_DWORD *)(a2 + 80);
        if ((v155 & 0x27) != 0 && (v155 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v115, v116, v117, v118, v119, v120);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v150 = *((_QWORD *)v18 + 2);
        if (!v150
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v150 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_262;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v184 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v184 + 64) && (v198 = *(_QWORD *)(v184 + 32)) != 0)
          v185 = *(_QWORD *)(v198 + 32);
        else
          v185 = *(_QWORD *)(v184 + 48);
        v187 = *((_QWORD *)v18 + 3);
        v186 = *((_QWORD *)v18 + 4);
        if (v186 + 8 * v187 > v185)
          goto LABEL_262;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v185 - v186) >> 3)
            goto LABEL_262;
        }
        else if (v187 <= v30)
        {
          goto LABEL_262;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_262;
      }
      v151 = *((_QWORD *)v18 + 2);
      if (v151 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v151 = (v151 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v152 = (unint64_t *)(v151 + 8 * v30);
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v125, v152));
      return JSC::JSBigInt::createFrom((JSC::JSBigInt *)a1, v153, v115, v116, v117, v118, v119, v120);
    case '1':
      v78 = *(JSC::Structure **)(a3 + 16);
      v199 = a2;
      v200 = v78;
      v79 = a1[7];
      JSC::JSValue::toBigInt(&v200, (JSC::JSGlobalObject *)a1, v24, v25, v26, v27, v28, v29, v31);
      v87 = v86;
      if (*((_DWORD *)v79 + 20))
      {
        v133 = *((_DWORD *)v79 + 20);
        if ((v133 & 0x27) != 0 && (v133 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v79 + 64), 7u, v80, v81, v82, v83, v84, v85);
        if (*((_QWORD *)v79 + 2))
          goto LABEL_145;
      }
      if (!*(_DWORD *)(v87 + 8))
      {
LABEL_145:
        v90 = 0;
      }
      else
      {
        v88 = *(_QWORD *)(v87 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v88 = (v88 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v89 = *(_QWORD *)v88;
        if (*(_BYTE *)(v87 + 16))
          v90 = -(uint64_t)v89;
        else
          v90 = v89;
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v154 = *(_DWORD *)(a2 + 80);
        if ((v154 & 0x27) != 0 && (v154 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v80, v81, v82, v83, v84, v85);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v134 = *((_QWORD *)v18 + 2);
        if (!v134
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v134 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_262;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        if (*((_QWORD *)v18 + 3) > (unint64_t)v30)
          goto LABEL_154;
LABEL_262:
        v189 = (JSC::VM **)&v199;
        return JSC::throwTypeError((unint64_t)a1, v189, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      }
      v180 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v180 + 64) && (v197 = *(_QWORD *)(v180 + 32)) != 0)
        v181 = *(_QWORD *)(v197 + 32);
      else
        v181 = *(_QWORD *)(v180 + 48);
      v183 = *((_QWORD *)v18 + 3);
      v182 = *((_QWORD *)v18 + 4);
      if (v182 + 8 * v183 > v181)
        goto LABEL_262;
      if ((*((_BYTE *)v18 + 40) & 1) != 0)
      {
        if (v30 >= (v181 - v182) >> 3)
          goto LABEL_262;
      }
      else if (v183 <= v30)
      {
        goto LABEL_262;
      }
LABEL_154:
      v135 = *((_QWORD *)v18 + 2);
      if (v135 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v135 = (v135 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v136 = (unint64_t *)(v135 + 8 * v30);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v90, v136));
      v138 = a1[7];
      if (!v137)
        return JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], 0, v81, v82, v83, v84, v85);
      v77 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], (JSC::VM *)1, v81, v82, v83, v84, v85);
      if (*((_DWORD *)v138 + 20))
      {
        v188 = *((_DWORD *)v138 + 20);
        if ((v188 & 0x27) != 0 && (v188 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v138 + 64), 7u, v139, v140, v141, v142, v143, v144);
        if (*((_QWORD *)v138 + 2))
          return 0;
      }
      v145 = *(_QWORD *)(v77 + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v145 = (v145 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)v145 = v137;
      *(_BYTE *)(v77 + 16) = 0;
      return v77;
    default:
      __break(0xC471u);
      JUMPOUT(0x1988BE5F4);
  }
}

uint64_t operationAtomicsIsLockFree(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 < 0xFFFE000000000000)
  {
    v11 = (unint64_t)a2 - 0x2000000000000;
    if ((unint64_t)a2 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
      v11 = v16;
    }
    v12 = (v11 >> 52) & 0x7FF;
    v13 = v12 - 1023;
    v14 = v11 >> (51 - (v11 >> 52));
    if (v12 > 0x433)
      LODWORD(v14) = v11 << ((v11 >> 52) - 51);
    if (v12 >= 0x41F)
      v15 = v14;
    else
      v15 = (((1 << ((v11 >> 52) + 1)) - 1) & v14) + (1 << ((v11 >> 52) + 1));
    if ((v11 & 0x8000000000000000) != 0)
      v15 = -v15;
    if (v13 <= 0x53)
      LODWORD(a2) = v15;
    else
      LODWORD(a2) = 0;
  }
  if (*(_DWORD *)(v9 + 80))
  {
    v17 = *(_DWORD *)(v9 + 80);
    if ((v17 & 0x27) != 0 && (v17 & 0x20) == 0)
    {
      v18 = (int)a2;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
      LODWORD(a2) = v18;
    }
    if (*(_QWORD *)(v9 + 16))
      return 10;
  }
  if (((_DWORD)a2 - 1) > 7)
    return 6;
  return qword_199157530[(int)a2 - 1];
}

uint64_t operationAtomicsLoad(uint64_t a1, JSC::JSObject *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::JSObject *var28[6];

  var28[2] = *(JSC::JSObject **)MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 56);
  *(JSC::JSObject **)(v8 + 40) = var28[5];
  var28[0] = a2;
  var28[1] = a3;
}

uint64_t JSC::`anonymous namespace'::atomicReadModifyWrite<JSC::`anonymous namespace'::LoadFunc>(JSC::JSGlobalObject **a1, uint64_t a2, JSC::JSObject **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  int8x16_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  signed __int8 v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  signed __int16 v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  JSC::JSGlobalObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int16 *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  JSC::VM *v120;

  v11 = (uint64_t)*a3;
  v120 = a1[7];
  v18 = JSC::validateTypedArray((JSC *)a1, v11, (JSC::JSArrayBufferView *)a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v120 + 20))
  {
    v74 = *((_DWORD *)v120 + 20);
    if ((v74 & 0x27) != 0 && (v74 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v120 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*((_QWORD *)v120 + 2))
      goto LABEL_132;
  }
  v20 = *((unsigned __int8 *)v18 + 5);
  v21 = v20 > 0x31;
  v22 = (1 << v20) & 0x33D8000000000;
  if (v21 || v22 == 0)
  {
    JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Typed array argument must be an Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, Uint32Array, BigInt64Array, or BigUint64Array.", 139);
LABEL_132:
    v18 = 0;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v75 = *(_DWORD *)(a2 + 80);
    if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(a2 + 16))
      return 0;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v76 = *(_DWORD *)(a2 + 80);
    if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
    {
      v111 = v24;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v25, v26, v27, v28, v29, v30);
      v24 = v111;
    }
    if (*(_QWORD *)(a2 + 16))
      return 0;
  }
  switch(*((_BYTE *)v18 + 5))
  {
    case '\'':
      v120 = (JSC::VM *)a2;
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v31 = *((_QWORD *)v18 + 2);
        if (!v31
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        v32 = *((_QWORD *)v18 + 3);
        goto LABEL_16;
      }
      v77 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v77 + 64) && (v112 = *(_QWORD *)(v77 + 32)) != 0)
        v78 = *(_QWORD *)(v112 + 32);
      else
        v78 = *(_QWORD *)(v77 + 48);
      v80 = *((_QWORD *)v18 + 3);
      v79 = *((_QWORD *)v18 + 4);
      if (v80 + v79 <= v78)
      {
        if ((*((_BYTE *)v18 + 40) & 1) == 0)
        {
          if (v80 <= v24)
            return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
          goto LABEL_17;
        }
        v32 = v78 - v79;
LABEL_16:
        if (v32 <= v24)
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
LABEL_17:
        v33 = *((_QWORD *)v18 + 2);
        if (v33 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v33 = (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v34 = (unsigned __int8 *)(v33 + v24);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35, v34));
        v36 = v35;
        return v36 | 0xFFFE000000000000;
      }
      return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    case '(':
      v120 = (JSC::VM *)a2;
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v65 = *((_QWORD *)v18 + 2);
        if (!v65
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v65 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        v66 = *((_QWORD *)v18 + 3);
        goto LABEL_108;
      }
      v101 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v101 + 64) && (v118 = *(_QWORD *)(v101 + 32)) != 0)
        v102 = *(_QWORD *)(v118 + 32);
      else
        v102 = *(_QWORD *)(v101 + 48);
      v104 = *((_QWORD *)v18 + 3);
      v103 = *((_QWORD *)v18 + 4);
      if (v104 + v103 > v102)
        return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      if ((*((_BYTE *)v18 + 40) & 1) != 0)
      {
        v66 = v102 - v103;
LABEL_108:
        if (v66 <= v24)
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        goto LABEL_109;
      }
      if (v104 <= v24)
        return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
LABEL_109:
      v67 = *((_QWORD *)v18 + 2);
      if (v67 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v67 = (v67 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v68 = (unsigned __int8 *)(v67 + v24);
      do
        v40 = __ldaxr(v68);
      while (__stlxr(v40, v68));
LABEL_115:
      v44 = v40;
      return v44 | 0xFFFE000000000000;
    case '*':
      v120 = (JSC::VM *)a2;
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v45 = *((_QWORD *)v18 + 2);
        if (!v45
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v45 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v89 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v89 + 64) && (v115 = *(_QWORD *)(v89 + 32)) != 0)
          v90 = *(_QWORD *)(v115 + 32);
        else
          v90 = *(_QWORD *)(v89 + 48);
        v92 = *((_QWORD *)v18 + 3);
        v91 = *((_QWORD *)v18 + 4);
        if (v91 + 2 * v92 > v90)
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v24 >= (v90 - v91) >> 1)
            return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
        else if (v92 <= v24)
        {
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v24)
      {
        return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      }
      v46 = *((_QWORD *)v18 + 2);
      if (v46 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v46 = (v46 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v47 = (unsigned __int16 *)(v46 + 2 * v24);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48, v47));
      v36 = v48;
      return v36 | 0xFFFE000000000000;
    case '+':
      v120 = (JSC::VM *)a2;
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v62 = *((_QWORD *)v18 + 2);
        if (!v62
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v62 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v97 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v97 + 64) && (v117 = *(_QWORD *)(v97 + 32)) != 0)
          v98 = *(_QWORD *)(v117 + 32);
        else
          v98 = *(_QWORD *)(v97 + 48);
        v100 = *((_QWORD *)v18 + 3);
        v99 = *((_QWORD *)v18 + 4);
        if (v99 + 2 * v100 > v98)
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v24 >= (v98 - v99) >> 1)
            return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
        else if (v100 <= v24)
        {
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v24)
      {
        return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      }
      v63 = *((_QWORD *)v18 + 2);
      if (v63 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v63 = (v63 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v64 = (unsigned __int16 *)(v63 + 2 * v24);
      do
        v40 = __ldaxr(v64);
      while (__stlxr(v40, v64));
      goto LABEL_115;
    case ',':
      v120 = (JSC::VM *)a2;
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v37 = *((_QWORD *)v18 + 2);
        if (!v37
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v37 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v81 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v81 + 64) && (v113 = *(_QWORD *)(v81 + 32)) != 0)
          v82 = *(_QWORD *)(v113 + 32);
        else
          v82 = *(_QWORD *)(v81 + 48);
        v84 = *((_QWORD *)v18 + 3);
        v83 = *((_QWORD *)v18 + 4);
        if (v83 + 4 * v84 > v82)
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v24 >= (v82 - v83) >> 2)
            return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
        else if (v84 <= v24)
        {
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v24)
      {
        return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      }
      v38 = *((_QWORD *)v18 + 2);
      if (v38 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v38 = (v38 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v39 = (unsigned int *)(v38 + 4 * v24);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40, v39));
      goto LABEL_115;
    case '-':
      v120 = (JSC::VM *)a2;
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v41 = *((_QWORD *)v18 + 2);
        if (!v41
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v41 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v85 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v85 + 64) && (v114 = *(_QWORD *)(v85 + 32)) != 0)
          v86 = *(_QWORD *)(v114 + 32);
        else
          v86 = *(_QWORD *)(v85 + 48);
        v88 = *((_QWORD *)v18 + 3);
        v87 = *((_QWORD *)v18 + 4);
        if (v87 + 4 * v88 > v86)
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v24 >= (v86 - v87) >> 2)
            return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
        else if (v88 <= v24)
        {
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v24)
      {
        return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      }
      v42 = *((_QWORD *)v18 + 2);
      if (v42 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v42 = (v42 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v43 = (unsigned int *)(v42 + 4 * v24);
      do
        LODWORD(v44) = __ldaxr(v43);
      while (__stlxr(v44, v43));
      if ((v44 & 0x80000000) == 0)
      {
        v44 = v44;
        return v44 | 0xFFFE000000000000;
      }
      return COERCE__INT64((double)v44) + 0x2000000000000;
    case '0':
      v120 = (JSC::VM *)a2;
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v69 = *((_QWORD *)v18 + 2);
        if (!v69
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v69 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v105 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v105 + 64) && (v119 = *(_QWORD *)(v105 + 32)) != 0)
          v106 = *(_QWORD *)(v119 + 32);
        else
          v106 = *(_QWORD *)(v105 + 48);
        v108 = *((_QWORD *)v18 + 3);
        v107 = *((_QWORD *)v18 + 4);
        if (v107 + 8 * v108 > v106)
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v24 >= (v106 - v107) >> 3)
            return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
        else if (v108 <= v24)
        {
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v24)
      {
        return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      }
      v70 = *((_QWORD *)v18 + 2);
      if (v70 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v70 = (v70 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v71 = (unint64_t *)(v70 + 8 * v24);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72, v71));
      return JSC::JSBigInt::createFrom((JSC::JSBigInt *)a1, v72, v25, v26, v27, v28, v29, v30);
    case '1':
      v120 = (JSC::VM *)a2;
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v50 = *((_QWORD *)v18 + 2);
        if (!v50
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v50 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v93 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v93 + 64) && (v116 = *(_QWORD *)(v93 + 32)) != 0)
          v94 = *(_QWORD *)(v116 + 32);
        else
          v94 = *(_QWORD *)(v93 + 48);
        v96 = *((_QWORD *)v18 + 3);
        v95 = *((_QWORD *)v18 + 4);
        if (v95 + 8 * v96 > v94)
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v24 >= (v94 - v95) >> 3)
            return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
        else if (v96 <= v24)
        {
          return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v24)
      {
        return JSC::throwTypeError((unint64_t)a1, &v120, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      }
      v51 = *((_QWORD *)v18 + 2);
      if (v51 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v51 = (v51 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v52 = (unint64_t *)(v51 + 8 * v24);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53, v52));
      v54 = a1[7];
      if (!v53)
        return JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], 0, v26, v27, v28, v29, v30);
      v49 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], (JSC::VM *)1, v26, v27, v28, v29, v30);
      if (*((_DWORD *)v54 + 20))
      {
        v109 = *((_DWORD *)v54 + 20);
        if ((v109 & 0x27) != 0 && (v109 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v54 + 64), 7u, v55, v56, v57, v58, v59, v60);
        if (*((_QWORD *)v54 + 2))
          return 0;
      }
      v61 = *(_QWORD *)(v49 + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v61 = (v61 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)v61 = v53;
      *(_BYTE *)(v49 + 16) = 0;
      return v49;
    default:
      __break(0xC471u);
      JUMPOUT(0x1988BF37CLL);
  }
}

uint64_t operationAtomicsOr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD var30[7];

  var30[3] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v8 + 40) = var30[6];
  var30[0] = a2;
  var30[1] = a3;
  var30[2] = a4;
}

uint64_t JSC::`anonymous namespace'::atomicReadModifyWrite<JSC::`anonymous namespace'::OrFunc>(JSC::JSGlobalObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  int8x16_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  signed __int8 v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int16 *v76;
  signed __int16 v77;
  unint64_t v78;
  JSC::Structure *v79;
  JSC::JSGlobalObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int16 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  JSC::Structure *v113;
  JSC::JSGlobalObject *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  JSC::JSGlobalObject *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  int v188;
  JSC::VM **v189;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  JSC::Structure *v200;

  v11 = *(_QWORD *)a3;
  v200 = a1[7];
  v18 = JSC::validateTypedArray((JSC *)a1, v11, (JSC::JSArrayBufferView *)a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v200 + 20))
  {
    v126 = *((_DWORD *)v200 + 20);
    if ((v126 & 0x27) != 0 && (v126 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::Structure *)((char *)v200 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*((_QWORD *)v200 + 2))
      goto LABEL_121;
  }
  v20 = *((unsigned __int8 *)v18 + 5);
  v21 = v20 > 0x31;
  v22 = (1 << v20) & 0x33D8000000000;
  if (v21 || v22 == 0)
  {
    JSC::throwTypeError((unint64_t)a1, &v200, (uint64_t)"Typed array argument must be an Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, Uint32Array, BigInt64Array, or BigUint64Array.", 139);
LABEL_121:
    v18 = 0;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v127 = *(_DWORD *)(a2 + 80);
    if ((v127 & 0x27) != 0 && (v127 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(a2 + 16))
      return 0;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v128 = *(_DWORD *)(a2 + 80);
    if ((v128 & 0x27) != 0 && (v128 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v24, v25, v26, v27, v28, v29);
    if (*(_QWORD *)(a2 + 16))
      return 0;
  }
  switch(*((_BYTE *)v18 + 5))
  {
    case '\'':
      v200 = (JSC::Structure *)a2;
      v38 = JSC::toNativeFromValue<JSC::Int8Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v129 = *(_DWORD *)(a2 + 80);
        if ((v129 & 0x27) != 0 && (v129 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v32, v33, v34, v35, v36, v37);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v39 = *((_QWORD *)v18 + 2);
        if (!v39
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v39 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        v40 = *((_QWORD *)v18 + 3);
        goto LABEL_17;
      }
      v156 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v156 + 64) && (v191 = *(_QWORD *)(v156 + 32)) != 0)
        v157 = *(_QWORD *)(v191 + 32);
      else
        v157 = *(_QWORD *)(v156 + 48);
      v159 = *((_QWORD *)v18 + 3);
      v158 = *((_QWORD *)v18 + 4);
      if (v159 + v158 <= v157)
      {
        if ((*((_BYTE *)v18 + 40) & 1) == 0)
        {
          if (v159 <= v30)
            goto LABEL_257;
          goto LABEL_18;
        }
        v40 = v157 - v158;
LABEL_17:
        if (v40 <= v30)
          goto LABEL_257;
LABEL_18:
        v41 = *((_QWORD *)v18 + 2);
        if (v41 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v41 = (v41 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v42 = (unsigned __int8 *)(v41 + v30);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 | v38, v42));
        v44 = v43;
        return v44 | 0xFFFE000000000000;
      }
LABEL_257:
      v189 = &v200;
      return JSC::throwTypeError((unint64_t)a1, v189, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    case '(':
      v200 = (JSC::Structure *)a2;
      v108 = JSC::toNativeFromValue<JSC::Uint8Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v148 = *(_DWORD *)(a2 + 80);
        if ((v148 & 0x27) != 0 && (v148 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v102, v103, v104, v105, v106, v107);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v109 = *((_QWORD *)v18 + 2);
        if (!v109
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v109 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        v110 = *((_QWORD *)v18 + 3);
        goto LABEL_103;
      }
      v176 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v176 + 64) && (v196 = *(_QWORD *)(v176 + 32)) != 0)
        v177 = *(_QWORD *)(v196 + 32);
      else
        v177 = *(_QWORD *)(v176 + 48);
      v179 = *((_QWORD *)v18 + 3);
      v178 = *((_QWORD *)v18 + 4);
      if (v179 + v178 > v177)
        goto LABEL_257;
      if ((*((_BYTE *)v18 + 40) & 1) != 0)
      {
        v110 = v177 - v178;
LABEL_103:
        if (v110 <= v30)
          goto LABEL_257;
        goto LABEL_104;
      }
      if (v179 <= v30)
        goto LABEL_257;
LABEL_104:
      v111 = *((_QWORD *)v18 + 2);
      if (v111 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v111 = (v111 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v112 = (unsigned __int8 *)(v111 + v30);
      do
        v55 = __ldaxr(v112);
      while (__stlxr(v55 | v108, v112));
LABEL_110:
      v66 = v55;
      return v66 | 0xFFFE000000000000;
    case '*':
      v200 = (JSC::Structure *)a2;
      v73 = JSC::toNativeFromValue<JSC::Int16Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v132 = *(_DWORD *)(a2 + 80);
        if ((v132 & 0x27) != 0 && (v132 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v67, v68, v69, v70, v71, v72);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v74 = *((_QWORD *)v18 + 2);
        if (!v74
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v74 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v168 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v168 + 64) && (v194 = *(_QWORD *)(v168 + 32)) != 0)
          v169 = *(_QWORD *)(v194 + 32);
        else
          v169 = *(_QWORD *)(v168 + 48);
        v171 = *((_QWORD *)v18 + 3);
        v170 = *((_QWORD *)v18 + 4);
        if (v170 + 2 * v171 > v169)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v169 - v170) >> 1)
            goto LABEL_257;
        }
        else if (v171 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v75 = *((_QWORD *)v18 + 2);
      if (v75 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v75 = (v75 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v76 = (unsigned __int16 *)(v75 + 2 * v30);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 | v73, v76));
      v44 = v77;
      return v44 | 0xFFFE000000000000;
    case '+':
      v200 = (JSC::Structure *)a2;
      v98 = JSC::toNativeFromValue<JSC::Uint16Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v147 = *(_DWORD *)(a2 + 80);
        if ((v147 & 0x27) != 0 && (v147 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v92, v93, v94, v95, v96, v97);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v99 = *((_QWORD *)v18 + 2);
        if (!v99
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v99 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v172 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v172 + 64) && (v195 = *(_QWORD *)(v172 + 32)) != 0)
          v173 = *(_QWORD *)(v195 + 32);
        else
          v173 = *(_QWORD *)(v172 + 48);
        v175 = *((_QWORD *)v18 + 3);
        v174 = *((_QWORD *)v18 + 4);
        if (v174 + 2 * v175 > v173)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v173 - v174) >> 1)
            goto LABEL_257;
        }
        else if (v175 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v100 = *((_QWORD *)v18 + 2);
      if (v100 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v100 = (v100 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v101 = (unsigned __int16 *)(v100 + 2 * v30);
      do
        v55 = __ldaxr(v101);
      while (__stlxr(v55 | v98, v101));
      goto LABEL_110;
    case ',':
      v200 = (JSC::Structure *)a2;
      v51 = JSC::toNativeFromValue<JSC::Int32Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v130 = *(_DWORD *)(a2 + 80);
        if ((v130 & 0x27) != 0 && (v130 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v45, v46, v47, v48, v49, v50);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v52 = *((_QWORD *)v18 + 2);
        if (!v52
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v52 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v160 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v160 + 64) && (v192 = *(_QWORD *)(v160 + 32)) != 0)
          v161 = *(_QWORD *)(v192 + 32);
        else
          v161 = *(_QWORD *)(v160 + 48);
        v163 = *((_QWORD *)v18 + 3);
        v162 = *((_QWORD *)v18 + 4);
        if (v162 + 4 * v163 > v161)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v161 - v162) >> 2)
            goto LABEL_257;
        }
        else if (v163 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v53 = *((_QWORD *)v18 + 2);
      if (v53 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v53 = (v53 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v54 = (unsigned int *)(v53 + 4 * v30);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 | v51, v54));
      goto LABEL_110;
    case '-':
      v200 = (JSC::Structure *)a2;
      v62 = JSC::toNativeFromValue<JSC::Uint32Adaptor>((JSC::JSGlobalObject *)a1, *(JSC::JSObject **)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v131 = *(_DWORD *)(a2 + 80);
        if ((v131 & 0x27) != 0 && (v131 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v56, v57, v58, v59, v60, v61);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v63 = *((_QWORD *)v18 + 2);
        if (!v63
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v63 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v164 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v164 + 64) && (v193 = *(_QWORD *)(v164 + 32)) != 0)
          v165 = *(_QWORD *)(v193 + 32);
        else
          v165 = *(_QWORD *)(v164 + 48);
        v167 = *((_QWORD *)v18 + 3);
        v166 = *((_QWORD *)v18 + 4);
        if (v166 + 4 * v167 > v165)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v165 - v166) >> 2)
            goto LABEL_257;
        }
        else if (v167 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v64 = *((_QWORD *)v18 + 2);
      if (v64 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v64 = (v64 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v65 = (unsigned int *)(v64 + 4 * v30);
      do
        LODWORD(v66) = __ldaxr(v65);
      while (__stlxr(v66 | v62, v65));
      if ((v66 & 0x80000000) == 0)
      {
        v66 = v66;
        return v66 | 0xFFFE000000000000;
      }
      return COERCE__INT64((double)v66) + 0x2000000000000;
    case '0':
      v113 = *(JSC::Structure **)(a3 + 16);
      v199 = a2;
      v200 = v113;
      v114 = a1[7];
      JSC::JSValue::toBigInt(&v200, (JSC::JSGlobalObject *)a1, v24, v25, v26, v27, v28, v29, v31);
      v122 = v121;
      if (*((_DWORD *)v114 + 20))
      {
        v149 = *((_DWORD *)v114 + 20);
        if ((v149 & 0x27) != 0 && (v149 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v114 + 64), 7u, v115, v116, v117, v118, v119, v120);
        if (*((_QWORD *)v114 + 2))
          goto LABEL_175;
      }
      if (!*(_DWORD *)(v122 + 8))
      {
LABEL_175:
        v125 = 0;
      }
      else
      {
        v123 = *(_QWORD *)(v122 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v123 = (v123 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v124 = *(_QWORD *)v123;
        if (*(_BYTE *)(v122 + 16))
          v125 = -v124;
        else
          v125 = v124;
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v155 = *(_DWORD *)(a2 + 80);
        if ((v155 & 0x27) != 0 && (v155 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v115, v116, v117, v118, v119, v120);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v150 = *((_QWORD *)v18 + 2);
        if (!v150
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v150 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_262;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v184 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v184 + 64) && (v198 = *(_QWORD *)(v184 + 32)) != 0)
          v185 = *(_QWORD *)(v198 + 32);
        else
          v185 = *(_QWORD *)(v184 + 48);
        v187 = *((_QWORD *)v18 + 3);
        v186 = *((_QWORD *)v18 + 4);
        if (v186 + 8 * v187 > v185)
          goto LABEL_262;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v185 - v186) >> 3)
            goto LABEL_262;
        }
        else if (v187 <= v30)
        {
          goto LABEL_262;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_262;
      }
      v151 = *((_QWORD *)v18 + 2);
      if (v151 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v151 = (v151 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v152 = (unint64_t *)(v151 + 8 * v30);
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 | v125, v152));
      return JSC::JSBigInt::createFrom((JSC::JSBigInt *)a1, v153, v115, v116, v117, v118, v119, v120);
    case '1':
      v79 = *(JSC::Structure **)(a3 + 16);
      v199 = a2;
      v200 = v79;
      v80 = a1[7];
      JSC::JSValue::toBigInt(&v200, (JSC::JSGlobalObject *)a1, v24, v25, v26, v27, v28, v29, v31);
      v88 = v87;
      if (*((_DWORD *)v80 + 20))
      {
        v133 = *((_DWORD *)v80 + 20);
        if ((v133 & 0x27) != 0 && (v133 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v80 + 64), 7u, v81, v82, v83, v84, v85, v86);
        if (*((_QWORD *)v80 + 2))
          goto LABEL_145;
      }
      if (!*(_DWORD *)(v88 + 8))
      {
LABEL_145:
        v91 = 0;
      }
      else
      {
        v89 = *(_QWORD *)(v88 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v89 = (v89 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v90 = *(_QWORD *)v89;
        if (*(_BYTE *)(v88 + 16))
          v91 = -v90;
        else
          v91 = v90;
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v154 = *(_DWORD *)(a2 + 80);
        if ((v154 & 0x27) != 0 && (v154 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v81, v82, v83, v84, v85, v86);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v134 = *((_QWORD *)v18 + 2);
        if (!v134
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v134 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_262;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        if (*((_QWORD *)v18 + 3) > (unint64_t)v30)
          goto LABEL_154;
LABEL_262:
        v189 = (JSC::VM **)&v199;
        return JSC::throwTypeError((unint64_t)a1, v189, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      }
      v180 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v180 + 64) && (v197 = *(_QWORD *)(v180 + 32)) != 0)
        v181 = *(_QWORD *)(v197 + 32);
      else
        v181 = *(_QWORD *)(v180 + 48);
      v183 = *((_QWORD *)v18 + 3);
      v182 = *((_QWORD *)v18 + 4);
      if (v182 + 8 * v183 > v181)
        goto LABEL_262;
      if ((*((_BYTE *)v18 + 40) & 1) != 0)
      {
        if (v30 >= (v181 - v182) >> 3)
          goto LABEL_262;
      }
      else if (v183 <= v30)
      {
        goto LABEL_262;
      }
LABEL_154:
      v135 = *((_QWORD *)v18 + 2);
      if (v135 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v135 = (v135 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v136 = (unint64_t *)(v135 + 8 * v30);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 | v91, v136));
      v138 = a1[7];
      if (!v137)
        return JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], 0, v82, v83, v84, v85, v86);
      v78 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], (JSC::VM *)1, v82, v83, v84, v85, v86);
      if (*((_DWORD *)v138 + 20))
      {
        v188 = *((_DWORD *)v138 + 20);
        if ((v188 & 0x27) != 0 && (v188 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v138 + 64), 7u, v139, v140, v141, v142, v143, v144);
        if (*((_QWORD *)v138 + 2))
          return 0;
      }
      v145 = *(_QWORD *)(v78 + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v145 = (v145 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)v145 = v137;
      *(_BYTE *)(v78 + 16) = 0;
      return v78;
    default:
      __break(0xC471u);
      JUMPOUT(0x1988C0198);
  }
}

uint64_t operationAtomicsStore(JSC *a1, JSC::JSArrayBufferView *a2, JSC::JSObject *a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t vars0;

  v8 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v8 + 40) = vars0;
}

uint64_t JSC::`anonymous namespace'::atomicStore(JSC *a1, uint64_t a2, JSC::JSArrayBufferView *a3, JSC::JSObject *a4, JSC::Structure *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  int8x16_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int8x16_t v31;
  uint64_t v32;
  JSC::JSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x16_t v43;
  JSC::JSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int8x16_t v63;
  JSC::JSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned __int16 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int16 *v104;
  unsigned __int16 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int16 *v114;
  unsigned __int8 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unsigned __int8 *v125;
  unsigned __int8 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unsigned __int8 *v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t *v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  JSC::VM **v196;
  unsigned int v198;
  unsigned int v199;
  unsigned __int16 v200;
  unsigned __int16 v201;
  unsigned __int8 v202;
  unsigned __int8 v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  JSC::Structure *v217;
  JSC::Structure *v218;

  v218 = (JSC::Structure *)*((_QWORD *)a1 + 7);
  v18 = JSC::validateTypedArray(a1, (uint64_t)a3, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  if (*((_DWORD *)v218 + 20))
  {
    v137 = *((_DWORD *)v218 + 20);
    if ((v137 & 0x27) != 0 && (v137 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::Structure *)((char *)v218 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*((_QWORD *)v218 + 2))
      goto LABEL_70;
  }
  v20 = *((unsigned __int8 *)v18 + 5);
  v21 = v20 > 0x31;
  v22 = (1 << v20) & 0x33D8000000000;
  if (v21 || v22 == 0)
  {
    JSC::throwTypeError((unint64_t)a1, &v218, (uint64_t)"Typed array argument must be an Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, Uint32Array, BigInt64Array, or BigUint64Array.", 139);
LABEL_70:
    v18 = 0;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v138 = *(_DWORD *)(a2 + 80);
    if ((v138 & 0x27) != 0 && (v138 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(a2 + 16))
      return 0;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v139 = *(_DWORD *)(a2 + 80);
    if ((v139 & 0x27) != 0 && (v139 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v24, v25, v26, v27, v28, v29);
    if (*(_QWORD *)(a2 + 16))
      return 0;
  }
  switch(*((_BYTE *)v18 + 5))
  {
    case '\'':
      v217 = (JSC::Structure *)a2;
      v218 = a5;
      if ((unint64_t)a5 < 0xFFFE000000000000)
      {
        if ((unint64_t)a5 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(&v218, a1, v24, v25, v26, v27, v28, v29, v31);
        else
          v31.i64[0] = (uint64_t)a5 - 0x2000000000000;
        *(double *)v31.i64 = trunc(*(double *)v31.i64 + 0.0);
      }
      else
      {
        *(double *)v31.i64 = (double)(int)a5;
      }
      if ((v31.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v32 = (int)*(double *)v31.i64, *(double *)v31.i64 == (double)(int)v32)
        && ((_DWORD)v32 || (v31.i64[0] & 0x8000000000000000) == 0))
      {
        v33 = (JSC::JSObject *)(v32 | 0xFFFE000000000000);
      }
      else
      {
        v33 = (JSC::JSObject *)(v31.i64[0] + 0x2000000000000);
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v146 = *(_DWORD *)(a2 + 80);
        if ((v146 & 0x27) != 0 && (v146 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v24, v25, v26, v27, v28, v29);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      v115 = JSC::toNativeFromValue<JSC::Int8Adaptor>(a1, (uint64_t)v33, v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v160 = *(_DWORD *)(a2 + 80);
        if ((v160 & 0x27) != 0 && (v160 & 0x20) == 0)
        {
          v202 = v115;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v116, v117, v118, v119, v120, v121);
          v115 = v202;
        }
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v122 = *((_QWORD *)v18 + 2);
        if (!v122
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v122 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_347;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        v123 = *((_QWORD *)v18 + 3);
        goto LABEL_149;
      }
      v180 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v180 + 64) && (v210 = *(_QWORD *)(v180 + 32)) != 0)
        v181 = *(_QWORD *)(v210 + 32);
      else
        v181 = *(_QWORD *)(v180 + 48);
      v183 = *((_QWORD *)v18 + 3);
      v182 = *((_QWORD *)v18 + 4);
      if (v183 + v182 <= v181)
      {
        if ((*((_BYTE *)v18 + 40) & 1) == 0)
        {
          if (v183 <= v30)
            goto LABEL_347;
          goto LABEL_150;
        }
        v123 = v181 - v182;
LABEL_149:
        if (v123 <= v30)
          goto LABEL_347;
LABEL_150:
        v124 = *((_QWORD *)v18 + 2);
        if (v124 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v124 = (v124 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v125 = (unsigned __int8 *)(v124 + v30);
        do
          __ldaxr(v125);
        while (__stlxr(v115, v125));
        return (uint64_t)v33;
      }
LABEL_347:
      v196 = &v217;
      return JSC::throwTypeError((unint64_t)a1, v196, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    case '(':
      v217 = (JSC::Structure *)a2;
      v218 = a5;
      if ((unint64_t)a5 < 0xFFFE000000000000)
      {
        if ((unint64_t)a5 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(&v218, a1, v24, v25, v26, v27, v28, v29, v31);
        else
          v31.i64[0] = (uint64_t)a5 - 0x2000000000000;
        *(double *)v31.i64 = trunc(*(double *)v31.i64 + 0.0);
      }
      else
      {
        *(double *)v31.i64 = (double)(int)a5;
      }
      if ((v31.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v56 = (int)*(double *)v31.i64, *(double *)v31.i64 == (double)(int)v56)
        && ((_DWORD)v56 || (v31.i64[0] & 0x8000000000000000) == 0))
      {
        v33 = (JSC::JSObject *)(v56 | 0xFFFE000000000000);
      }
      else
      {
        v33 = (JSC::JSObject *)(v31.i64[0] + 0x2000000000000);
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v147 = *(_DWORD *)(a2 + 80);
        if ((v147 & 0x27) != 0 && (v147 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v24, v25, v26, v27, v28, v29);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      v126 = JSC::toNativeFromValue<JSC::Uint8Adaptor>(a1, (uint64_t)v33, v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v161 = *(_DWORD *)(a2 + 80);
        if ((v161 & 0x27) != 0 && (v161 & 0x20) == 0)
        {
          v203 = v126;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v127, v128, v129, v130, v131, v132);
          v126 = v203;
        }
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v133 = *((_QWORD *)v18 + 2);
        if (!v133
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v133 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_347;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        v134 = *((_QWORD *)v18 + 3);
        goto LABEL_167;
      }
      v184 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v184 + 64) && (v211 = *(_QWORD *)(v184 + 32)) != 0)
        v185 = *(_QWORD *)(v211 + 32);
      else
        v185 = *(_QWORD *)(v184 + 48);
      v187 = *((_QWORD *)v18 + 3);
      v186 = *((_QWORD *)v18 + 4);
      if (v187 + v186 > v185)
        goto LABEL_347;
      if ((*((_BYTE *)v18 + 40) & 1) != 0)
      {
        v134 = v185 - v186;
LABEL_167:
        if (v134 <= v30)
          goto LABEL_347;
        goto LABEL_168;
      }
      if (v187 <= v30)
        goto LABEL_347;
LABEL_168:
      v135 = *((_QWORD *)v18 + 2);
      if (v135 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v135 = (v135 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v136 = (unsigned __int8 *)(v135 + v30);
      do
        __ldaxr(v136);
      while (__stlxr(v126, v136));
      return (uint64_t)v33;
    case '*':
      v217 = (JSC::Structure *)a2;
      v218 = a5;
      if ((unint64_t)a5 < 0xFFFE000000000000)
      {
        if ((unint64_t)a5 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(&v218, a1, v24, v25, v26, v27, v28, v29, v31);
        else
          v31.i64[0] = (uint64_t)a5 - 0x2000000000000;
        *(double *)v31.i64 = trunc(*(double *)v31.i64 + 0.0);
      }
      else
      {
        *(double *)v31.i64 = (double)(int)a5;
      }
      if ((v31.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v36 = (int)*(double *)v31.i64, *(double *)v31.i64 == (double)(int)v36)
        && ((_DWORD)v36 || (v31.i64[0] & 0x8000000000000000) == 0))
      {
        v33 = (JSC::JSObject *)(v36 | 0xFFFE000000000000);
      }
      else
      {
        v33 = (JSC::JSObject *)(v31.i64[0] + 0x2000000000000);
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v144 = *(_DWORD *)(a2 + 80);
        if ((v144 & 0x27) != 0 && (v144 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v24, v25, v26, v27, v28, v29);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      v95 = JSC::toNativeFromValue<JSC::Int16Adaptor>(a1, (uint64_t)v33, v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v158 = *(_DWORD *)(a2 + 80);
        if ((v158 & 0x27) != 0 && (v158 & 0x20) == 0)
        {
          v200 = v95;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v96, v97, v98, v99, v100, v101);
          v95 = v200;
        }
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v102 = *((_QWORD *)v18 + 2);
        if (!v102
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v102 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_347;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v172 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v172 + 64) && (v208 = *(_QWORD *)(v172 + 32)) != 0)
          v173 = *(_QWORD *)(v208 + 32);
        else
          v173 = *(_QWORD *)(v172 + 48);
        v175 = *((_QWORD *)v18 + 3);
        v174 = *((_QWORD *)v18 + 4);
        if (v174 + 2 * v175 > v173)
          goto LABEL_347;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v173 - v174) >> 1)
            goto LABEL_347;
        }
        else if (v175 <= v30)
        {
          goto LABEL_347;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_347;
      }
      v103 = *((_QWORD *)v18 + 2);
      if (v103 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v103 = (v103 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v104 = (unsigned __int16 *)(v103 + 2 * v30);
      do
        __ldaxr(v104);
      while (__stlxr(v95, v104));
      return (uint64_t)v33;
    case '+':
      v217 = (JSC::Structure *)a2;
      v218 = a5;
      if ((unint64_t)a5 < 0xFFFE000000000000)
      {
        if ((unint64_t)a5 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(&v218, a1, v24, v25, v26, v27, v28, v29, v31);
        else
          v31.i64[0] = (uint64_t)a5 - 0x2000000000000;
        *(double *)v31.i64 = trunc(*(double *)v31.i64 + 0.0);
      }
      else
      {
        *(double *)v31.i64 = (double)(int)a5;
      }
      if ((v31.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v55 = (int)*(double *)v31.i64, *(double *)v31.i64 == (double)(int)v55)
        && ((_DWORD)v55 || (v31.i64[0] & 0x8000000000000000) == 0))
      {
        v33 = (JSC::JSObject *)(v55 | 0xFFFE000000000000);
      }
      else
      {
        v33 = (JSC::JSObject *)(v31.i64[0] + 0x2000000000000);
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v145 = *(_DWORD *)(a2 + 80);
        if ((v145 & 0x27) != 0 && (v145 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v24, v25, v26, v27, v28, v29);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      v105 = JSC::toNativeFromValue<JSC::Uint16Adaptor>(a1, (uint64_t)v33, v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v159 = *(_DWORD *)(a2 + 80);
        if ((v159 & 0x27) != 0 && (v159 & 0x20) == 0)
        {
          v201 = v105;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v106, v107, v108, v109, v110, v111);
          v105 = v201;
        }
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v112 = *((_QWORD *)v18 + 2);
        if (!v112
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v112 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_347;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v176 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v176 + 64) && (v209 = *(_QWORD *)(v176 + 32)) != 0)
          v177 = *(_QWORD *)(v209 + 32);
        else
          v177 = *(_QWORD *)(v176 + 48);
        v179 = *((_QWORD *)v18 + 3);
        v178 = *((_QWORD *)v18 + 4);
        if (v178 + 2 * v179 > v177)
          goto LABEL_347;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v177 - v178) >> 1)
            goto LABEL_347;
        }
        else if (v179 <= v30)
        {
          goto LABEL_347;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_347;
      }
      v113 = *((_QWORD *)v18 + 2);
      if (v113 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v113 = (v113 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v114 = (unsigned __int16 *)(v113 + 2 * v30);
      do
        __ldaxr(v114);
      while (__stlxr(v105, v114));
      return (uint64_t)v33;
    case ',':
      v217 = (JSC::Structure *)a2;
      v218 = a5;
      if ((unint64_t)a5 < 0xFFFE000000000000)
      {
        if ((unint64_t)a5 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(&v218, a1, v24, v25, v26, v27, v28, v29, v31);
        else
          v31.i64[0] = (uint64_t)a5 - 0x2000000000000;
        *(double *)v31.i64 = trunc(*(double *)v31.i64 + 0.0);
      }
      else
      {
        *(double *)v31.i64 = (double)(int)a5;
      }
      if ((v31.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v34 = (int)*(double *)v31.i64, *(double *)v31.i64 == (double)(int)v34)
        && ((_DWORD)v34 || (v31.i64[0] & 0x8000000000000000) == 0))
      {
        v33 = (JSC::JSObject *)(v34 | 0xFFFE000000000000);
      }
      else
      {
        v33 = (JSC::JSObject *)(v31.i64[0] + 0x2000000000000);
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v142 = *(_DWORD *)(a2 + 80);
        if ((v142 & 0x27) != 0 && (v142 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v24, v25, v26, v27, v28, v29);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      v75 = JSC::toNativeFromValue<JSC::Int32Adaptor>(a1, (uint64_t)v33, v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v156 = *(_DWORD *)(a2 + 80);
        if ((v156 & 0x27) != 0 && (v156 & 0x20) == 0)
        {
          v198 = v75;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v76, v77, v78, v79, v80, v81);
          v75 = v198;
        }
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v82 = *((_QWORD *)v18 + 2);
        if (!v82
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v82 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_347;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v164 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v164 + 64) && (v206 = *(_QWORD *)(v164 + 32)) != 0)
          v165 = *(_QWORD *)(v206 + 32);
        else
          v165 = *(_QWORD *)(v164 + 48);
        v167 = *((_QWORD *)v18 + 3);
        v166 = *((_QWORD *)v18 + 4);
        if (v166 + 4 * v167 > v165)
          goto LABEL_347;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v165 - v166) >> 2)
            goto LABEL_347;
        }
        else if (v167 <= v30)
        {
          goto LABEL_347;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_347;
      }
      v83 = *((_QWORD *)v18 + 2);
      if (v83 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v83 = (v83 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v84 = (unsigned int *)(v83 + 4 * v30);
      do
        __ldaxr(v84);
      while (__stlxr(v75, v84));
      return (uint64_t)v33;
    case '-':
      v217 = (JSC::Structure *)a2;
      v218 = a5;
      if ((unint64_t)a5 < 0xFFFE000000000000)
      {
        if ((unint64_t)a5 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(&v218, a1, v24, v25, v26, v27, v28, v29, v31);
        else
          v31.i64[0] = (uint64_t)a5 - 0x2000000000000;
        *(double *)v31.i64 = trunc(*(double *)v31.i64 + 0.0);
      }
      else
      {
        *(double *)v31.i64 = (double)(int)a5;
      }
      if ((v31.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v35 = (int)*(double *)v31.i64, *(double *)v31.i64 == (double)(int)v35)
        && ((_DWORD)v35 || (v31.i64[0] & 0x8000000000000000) == 0))
      {
        v33 = (JSC::JSObject *)(v35 | 0xFFFE000000000000);
      }
      else
      {
        v33 = (JSC::JSObject *)(v31.i64[0] + 0x2000000000000);
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v143 = *(_DWORD *)(a2 + 80);
        if ((v143 & 0x27) != 0 && (v143 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v24, v25, v26, v27, v28, v29);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      v85 = JSC::toNativeFromValue<JSC::Uint32Adaptor>(a1, v33, v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v157 = *(_DWORD *)(a2 + 80);
        if ((v157 & 0x27) != 0 && (v157 & 0x20) == 0)
        {
          v199 = v85;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v86, v87, v88, v89, v90, v91);
          v85 = v199;
        }
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v92 = *((_QWORD *)v18 + 2);
        if (!v92
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v92 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_347;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v168 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v168 + 64) && (v207 = *(_QWORD *)(v168 + 32)) != 0)
          v169 = *(_QWORD *)(v207 + 32);
        else
          v169 = *(_QWORD *)(v168 + 48);
        v171 = *((_QWORD *)v18 + 3);
        v170 = *((_QWORD *)v18 + 4);
        if (v170 + 4 * v171 > v169)
          goto LABEL_347;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v169 - v170) >> 2)
            goto LABEL_347;
        }
        else if (v171 <= v30)
        {
          goto LABEL_347;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_347;
      }
      v93 = *((_QWORD *)v18 + 2);
      if (v93 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v93 = (v93 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v94 = (unsigned int *)(v93 + 4 * v30);
      do
        __ldaxr(v94);
      while (__stlxr(v85, v94));
      return (uint64_t)v33;
    case '0':
      v216 = a2;
      v217 = a5;
      JSC::JSValue::toBigInt(&v217, a1, v24, v25, v26, v27, v28, v29, v31);
      v33 = v64;
      if (*(_DWORD *)(a2 + 80))
      {
        v141 = *(_DWORD *)(a2 + 80);
        if ((v141 & 0x27) != 0 && (v141 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v57, v58, v59, v60, v61, v62);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      v218 = v33;
      v65 = *((_QWORD *)a1 + 7);
      JSC::JSValue::toBigInt(&v218, a1, v57, v58, v59, v60, v61, v62, v63);
      if (*(_DWORD *)(v65 + 80))
      {
        v152 = *(_DWORD *)(v65 + 80);
        if ((v152 & 0x27) != 0 && (v152 & 0x20) == 0)
        {
          v215 = v66;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v65 + 64), 7u, v67, v68, v69, v70, v71, v72);
          v66 = v215;
        }
        if (*(_QWORD *)(v65 + 16))
          goto LABEL_252;
      }
      if (!*(_DWORD *)(v66 + 8))
      {
LABEL_252:
        v74 = 0;
      }
      else
      {
        v73 = *(_QWORD *)(v66 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v73 = (v73 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v74 = *(_QWORD *)v73;
        if (*(_BYTE *)(v66 + 16))
          v74 = -(uint64_t)v74;
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v163 = *(_DWORD *)(a2 + 80);
        if ((v163 & 0x27) != 0 && (v163 & 0x20) == 0)
        {
          v205 = v74;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v67, v68, v69, v70, v71, v72);
          v74 = v205;
        }
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v153 = *((_QWORD *)v18 + 2);
        if (!v153
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v153 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_353;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v192 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v192 + 64) && (v213 = *(_QWORD *)(v192 + 32)) != 0)
          v193 = *(_QWORD *)(v213 + 32);
        else
          v193 = *(_QWORD *)(v192 + 48);
        v195 = *((_QWORD *)v18 + 3);
        v194 = *((_QWORD *)v18 + 4);
        if (v194 + 8 * v195 > v193)
          goto LABEL_353;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v193 - v194) >> 3)
            goto LABEL_353;
        }
        else if (v195 <= v30)
        {
          goto LABEL_353;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_353;
      }
      v154 = *((_QWORD *)v18 + 2);
      if (v154 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v154 = (v154 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v155 = (unint64_t *)(v154 + 8 * v30);
      do
        __ldaxr(v155);
      while (__stlxr(v74, v155));
      return (uint64_t)v33;
    case '1':
      v216 = a2;
      v217 = a5;
      JSC::JSValue::toBigInt(&v217, a1, v24, v25, v26, v27, v28, v29, v31);
      v33 = v44;
      if (*(_DWORD *)(a2 + 80))
      {
        v140 = *(_DWORD *)(a2 + 80);
        if ((v140 & 0x27) != 0 && (v140 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v37, v38, v39, v40, v41, v42);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      v218 = v33;
      v45 = *((_QWORD *)a1 + 7);
      JSC::JSValue::toBigInt(&v218, a1, v37, v38, v39, v40, v41, v42, v43);
      if (*(_DWORD *)(v45 + 80))
      {
        v148 = *(_DWORD *)(v45 + 80);
        if ((v148 & 0x27) != 0 && (v148 & 0x20) == 0)
        {
          v214 = v46;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v45 + 64), 7u, v47, v48, v49, v50, v51, v52);
          v46 = v214;
        }
        if (*(_QWORD *)(v45 + 16))
          goto LABEL_234;
      }
      if (!*(_DWORD *)(v46 + 8))
      {
LABEL_234:
        v54 = 0;
      }
      else
      {
        v53 = *(_QWORD *)(v46 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v53 = (v53 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v54 = *(_QWORD *)v53;
        if (*(_BYTE *)(v46 + 16))
          v54 = -(uint64_t)v54;
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v162 = *(_DWORD *)(a2 + 80);
        if ((v162 & 0x27) != 0 && (v162 & 0x20) == 0)
        {
          v204 = v54;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v47, v48, v49, v50, v51, v52);
          v54 = v204;
        }
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v149 = *((_QWORD *)v18 + 2);
        if (!v149
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v149 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_353;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        if (*((_QWORD *)v18 + 3) > (unint64_t)v30)
          goto LABEL_243;
LABEL_353:
        v196 = (JSC::VM **)&v216;
        return JSC::throwTypeError((unint64_t)a1, v196, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      }
      v188 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v188 + 64) && (v212 = *(_QWORD *)(v188 + 32)) != 0)
        v189 = *(_QWORD *)(v212 + 32);
      else
        v189 = *(_QWORD *)(v188 + 48);
      v191 = *((_QWORD *)v18 + 3);
      v190 = *((_QWORD *)v18 + 4);
      if (v190 + 8 * v191 > v189)
        goto LABEL_353;
      if ((*((_BYTE *)v18 + 40) & 1) != 0)
      {
        if (v30 >= (v189 - v190) >> 3)
          goto LABEL_353;
      }
      else if (v191 <= v30)
      {
        goto LABEL_353;
      }
LABEL_243:
      v150 = *((_QWORD *)v18 + 2);
      if (v150 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v150 = (v150 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v151 = (unint64_t *)(v150 + 8 * v30);
      do
        __ldaxr(v151);
      while (__stlxr(v54, v151));
      return (uint64_t)v33;
    default:
      __break(0xC471u);
      JUMPOUT(0x1988C1424);
  }
}

uint64_t operationAtomicsSub(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD var30[7];

  var30[3] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v8 + 40) = var30[6];
  var30[0] = a2;
  var30[1] = a3;
  var30[2] = a4;
}

uint64_t JSC::`anonymous namespace'::atomicReadModifyWrite<JSC::`anonymous namespace'::SubFunc>(JSC::JSGlobalObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  int8x16_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  signed __int8 v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int16 *v76;
  signed __int16 v77;
  unint64_t v78;
  JSC::Structure *v79;
  JSC::JSGlobalObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int16 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  JSC::Structure *v113;
  JSC::JSGlobalObject *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  JSC::JSGlobalObject *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  int v188;
  JSC::VM **v189;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  JSC::Structure *v200;

  v11 = *(_QWORD *)a3;
  v200 = a1[7];
  v18 = JSC::validateTypedArray((JSC *)a1, v11, (JSC::JSArrayBufferView *)a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v200 + 20))
  {
    v126 = *((_DWORD *)v200 + 20);
    if ((v126 & 0x27) != 0 && (v126 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::Structure *)((char *)v200 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*((_QWORD *)v200 + 2))
      goto LABEL_121;
  }
  v20 = *((unsigned __int8 *)v18 + 5);
  v21 = v20 > 0x31;
  v22 = (1 << v20) & 0x33D8000000000;
  if (v21 || v22 == 0)
  {
    JSC::throwTypeError((unint64_t)a1, &v200, (uint64_t)"Typed array argument must be an Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, Uint32Array, BigInt64Array, or BigUint64Array.", 139);
LABEL_121:
    v18 = 0;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v127 = *(_DWORD *)(a2 + 80);
    if ((v127 & 0x27) != 0 && (v127 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(a2 + 16))
      return 0;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v128 = *(_DWORD *)(a2 + 80);
    if ((v128 & 0x27) != 0 && (v128 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v24, v25, v26, v27, v28, v29);
    if (*(_QWORD *)(a2 + 16))
      return 0;
  }
  switch(*((_BYTE *)v18 + 5))
  {
    case '\'':
      v200 = (JSC::Structure *)a2;
      v38 = JSC::toNativeFromValue<JSC::Int8Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v129 = *(_DWORD *)(a2 + 80);
        if ((v129 & 0x27) != 0 && (v129 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v32, v33, v34, v35, v36, v37);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v39 = *((_QWORD *)v18 + 2);
        if (!v39
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v39 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        v40 = *((_QWORD *)v18 + 3);
        goto LABEL_17;
      }
      v156 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v156 + 64) && (v191 = *(_QWORD *)(v156 + 32)) != 0)
        v157 = *(_QWORD *)(v191 + 32);
      else
        v157 = *(_QWORD *)(v156 + 48);
      v159 = *((_QWORD *)v18 + 3);
      v158 = *((_QWORD *)v18 + 4);
      if (v159 + v158 <= v157)
      {
        if ((*((_BYTE *)v18 + 40) & 1) == 0)
        {
          if (v159 <= v30)
            goto LABEL_257;
          goto LABEL_18;
        }
        v40 = v157 - v158;
LABEL_17:
        if (v40 <= v30)
          goto LABEL_257;
LABEL_18:
        v41 = *((_QWORD *)v18 + 2);
        if (v41 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v41 = (v41 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v42 = (unsigned __int8 *)(v41 + v30);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - v38, v42));
        v44 = v43;
        return v44 | 0xFFFE000000000000;
      }
LABEL_257:
      v189 = &v200;
      return JSC::throwTypeError((unint64_t)a1, v189, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    case '(':
      v200 = (JSC::Structure *)a2;
      v108 = JSC::toNativeFromValue<JSC::Uint8Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v148 = *(_DWORD *)(a2 + 80);
        if ((v148 & 0x27) != 0 && (v148 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v102, v103, v104, v105, v106, v107);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v109 = *((_QWORD *)v18 + 2);
        if (!v109
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v109 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        v110 = *((_QWORD *)v18 + 3);
        goto LABEL_103;
      }
      v176 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v176 + 64) && (v196 = *(_QWORD *)(v176 + 32)) != 0)
        v177 = *(_QWORD *)(v196 + 32);
      else
        v177 = *(_QWORD *)(v176 + 48);
      v179 = *((_QWORD *)v18 + 3);
      v178 = *((_QWORD *)v18 + 4);
      if (v179 + v178 > v177)
        goto LABEL_257;
      if ((*((_BYTE *)v18 + 40) & 1) != 0)
      {
        v110 = v177 - v178;
LABEL_103:
        if (v110 <= v30)
          goto LABEL_257;
        goto LABEL_104;
      }
      if (v179 <= v30)
        goto LABEL_257;
LABEL_104:
      v111 = *((_QWORD *)v18 + 2);
      if (v111 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v111 = (v111 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v112 = (unsigned __int8 *)(v111 + v30);
      do
        v55 = __ldaxr(v112);
      while (__stlxr(v55 - v108, v112));
LABEL_110:
      v66 = v55;
      return v66 | 0xFFFE000000000000;
    case '*':
      v200 = (JSC::Structure *)a2;
      v73 = JSC::toNativeFromValue<JSC::Int16Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v132 = *(_DWORD *)(a2 + 80);
        if ((v132 & 0x27) != 0 && (v132 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v67, v68, v69, v70, v71, v72);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v74 = *((_QWORD *)v18 + 2);
        if (!v74
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v74 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v168 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v168 + 64) && (v194 = *(_QWORD *)(v168 + 32)) != 0)
          v169 = *(_QWORD *)(v194 + 32);
        else
          v169 = *(_QWORD *)(v168 + 48);
        v171 = *((_QWORD *)v18 + 3);
        v170 = *((_QWORD *)v18 + 4);
        if (v170 + 2 * v171 > v169)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v169 - v170) >> 1)
            goto LABEL_257;
        }
        else if (v171 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v75 = *((_QWORD *)v18 + 2);
      if (v75 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v75 = (v75 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v76 = (unsigned __int16 *)(v75 + 2 * v30);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - v73, v76));
      v44 = v77;
      return v44 | 0xFFFE000000000000;
    case '+':
      v200 = (JSC::Structure *)a2;
      v98 = JSC::toNativeFromValue<JSC::Uint16Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v147 = *(_DWORD *)(a2 + 80);
        if ((v147 & 0x27) != 0 && (v147 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v92, v93, v94, v95, v96, v97);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v99 = *((_QWORD *)v18 + 2);
        if (!v99
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v99 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v172 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v172 + 64) && (v195 = *(_QWORD *)(v172 + 32)) != 0)
          v173 = *(_QWORD *)(v195 + 32);
        else
          v173 = *(_QWORD *)(v172 + 48);
        v175 = *((_QWORD *)v18 + 3);
        v174 = *((_QWORD *)v18 + 4);
        if (v174 + 2 * v175 > v173)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v173 - v174) >> 1)
            goto LABEL_257;
        }
        else if (v175 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v100 = *((_QWORD *)v18 + 2);
      if (v100 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v100 = (v100 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v101 = (unsigned __int16 *)(v100 + 2 * v30);
      do
        v55 = __ldaxr(v101);
      while (__stlxr(v55 - v98, v101));
      goto LABEL_110;
    case ',':
      v200 = (JSC::Structure *)a2;
      v51 = JSC::toNativeFromValue<JSC::Int32Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v130 = *(_DWORD *)(a2 + 80);
        if ((v130 & 0x27) != 0 && (v130 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v45, v46, v47, v48, v49, v50);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v52 = *((_QWORD *)v18 + 2);
        if (!v52
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v52 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v160 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v160 + 64) && (v192 = *(_QWORD *)(v160 + 32)) != 0)
          v161 = *(_QWORD *)(v192 + 32);
        else
          v161 = *(_QWORD *)(v160 + 48);
        v163 = *((_QWORD *)v18 + 3);
        v162 = *((_QWORD *)v18 + 4);
        if (v162 + 4 * v163 > v161)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v161 - v162) >> 2)
            goto LABEL_257;
        }
        else if (v163 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v53 = *((_QWORD *)v18 + 2);
      if (v53 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v53 = (v53 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v54 = (unsigned int *)(v53 + 4 * v30);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - v51, v54));
      goto LABEL_110;
    case '-':
      v200 = (JSC::Structure *)a2;
      v62 = JSC::toNativeFromValue<JSC::Uint32Adaptor>((JSC::JSGlobalObject *)a1, *(JSC::JSObject **)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v131 = *(_DWORD *)(a2 + 80);
        if ((v131 & 0x27) != 0 && (v131 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v56, v57, v58, v59, v60, v61);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v63 = *((_QWORD *)v18 + 2);
        if (!v63
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v63 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v164 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v164 + 64) && (v193 = *(_QWORD *)(v164 + 32)) != 0)
          v165 = *(_QWORD *)(v193 + 32);
        else
          v165 = *(_QWORD *)(v164 + 48);
        v167 = *((_QWORD *)v18 + 3);
        v166 = *((_QWORD *)v18 + 4);
        if (v166 + 4 * v167 > v165)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v165 - v166) >> 2)
            goto LABEL_257;
        }
        else if (v167 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v64 = *((_QWORD *)v18 + 2);
      if (v64 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v64 = (v64 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v65 = (unsigned int *)(v64 + 4 * v30);
      do
        LODWORD(v66) = __ldaxr(v65);
      while (__stlxr(v66 - v62, v65));
      if ((v66 & 0x80000000) == 0)
      {
        v66 = v66;
        return v66 | 0xFFFE000000000000;
      }
      return COERCE__INT64((double)v66) + 0x2000000000000;
    case '0':
      v113 = *(JSC::Structure **)(a3 + 16);
      v199 = a2;
      v200 = v113;
      v114 = a1[7];
      JSC::JSValue::toBigInt(&v200, (JSC::JSGlobalObject *)a1, v24, v25, v26, v27, v28, v29, v31);
      v122 = v121;
      if (*((_DWORD *)v114 + 20))
      {
        v149 = *((_DWORD *)v114 + 20);
        if ((v149 & 0x27) != 0 && (v149 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v114 + 64), 7u, v115, v116, v117, v118, v119, v120);
        if (*((_QWORD *)v114 + 2))
          goto LABEL_175;
      }
      if (!*(_DWORD *)(v122 + 8))
      {
LABEL_175:
        v125 = 0;
      }
      else
      {
        v123 = *(_QWORD *)(v122 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v123 = (v123 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v124 = *(_QWORD *)v123;
        if (*(_BYTE *)(v122 + 16))
          v125 = -v124;
        else
          v125 = v124;
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v155 = *(_DWORD *)(a2 + 80);
        if ((v155 & 0x27) != 0 && (v155 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v115, v116, v117, v118, v119, v120);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v150 = *((_QWORD *)v18 + 2);
        if (!v150
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v150 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_262;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v184 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v184 + 64) && (v198 = *(_QWORD *)(v184 + 32)) != 0)
          v185 = *(_QWORD *)(v198 + 32);
        else
          v185 = *(_QWORD *)(v184 + 48);
        v187 = *((_QWORD *)v18 + 3);
        v186 = *((_QWORD *)v18 + 4);
        if (v186 + 8 * v187 > v185)
          goto LABEL_262;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v185 - v186) >> 3)
            goto LABEL_262;
        }
        else if (v187 <= v30)
        {
          goto LABEL_262;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_262;
      }
      v151 = *((_QWORD *)v18 + 2);
      if (v151 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v151 = (v151 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v152 = (unint64_t *)(v151 + 8 * v30);
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - v125, v152));
      return JSC::JSBigInt::createFrom((JSC::JSBigInt *)a1, v153, v115, v116, v117, v118, v119, v120);
    case '1':
      v79 = *(JSC::Structure **)(a3 + 16);
      v199 = a2;
      v200 = v79;
      v80 = a1[7];
      JSC::JSValue::toBigInt(&v200, (JSC::JSGlobalObject *)a1, v24, v25, v26, v27, v28, v29, v31);
      v88 = v87;
      if (*((_DWORD *)v80 + 20))
      {
        v133 = *((_DWORD *)v80 + 20);
        if ((v133 & 0x27) != 0 && (v133 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v80 + 64), 7u, v81, v82, v83, v84, v85, v86);
        if (*((_QWORD *)v80 + 2))
          goto LABEL_145;
      }
      if (!*(_DWORD *)(v88 + 8))
      {
LABEL_145:
        v91 = 0;
      }
      else
      {
        v89 = *(_QWORD *)(v88 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v89 = (v89 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v90 = *(_QWORD *)v89;
        if (*(_BYTE *)(v88 + 16))
          v91 = -v90;
        else
          v91 = v90;
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v154 = *(_DWORD *)(a2 + 80);
        if ((v154 & 0x27) != 0 && (v154 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v81, v82, v83, v84, v85, v86);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v134 = *((_QWORD *)v18 + 2);
        if (!v134
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v134 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_262;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        if (*((_QWORD *)v18 + 3) > (unint64_t)v30)
          goto LABEL_154;
LABEL_262:
        v189 = (JSC::VM **)&v199;
        return JSC::throwTypeError((unint64_t)a1, v189, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      }
      v180 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v180 + 64) && (v197 = *(_QWORD *)(v180 + 32)) != 0)
        v181 = *(_QWORD *)(v197 + 32);
      else
        v181 = *(_QWORD *)(v180 + 48);
      v183 = *((_QWORD *)v18 + 3);
      v182 = *((_QWORD *)v18 + 4);
      if (v182 + 8 * v183 > v181)
        goto LABEL_262;
      if ((*((_BYTE *)v18 + 40) & 1) != 0)
      {
        if (v30 >= (v181 - v182) >> 3)
          goto LABEL_262;
      }
      else if (v183 <= v30)
      {
        goto LABEL_262;
      }
LABEL_154:
      v135 = *((_QWORD *)v18 + 2);
      if (v135 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v135 = (v135 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v136 = (unint64_t *)(v135 + 8 * v30);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - v91, v136));
      v138 = a1[7];
      if (!v137)
        return JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], 0, v82, v83, v84, v85, v86);
      v78 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], (JSC::VM *)1, v82, v83, v84, v85, v86);
      if (*((_DWORD *)v138 + 20))
      {
        v188 = *((_DWORD *)v138 + 20);
        if ((v188 & 0x27) != 0 && (v188 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v138 + 64), 7u, v139, v140, v141, v142, v143, v144);
        if (*((_QWORD *)v138 + 2))
          return 0;
      }
      v145 = *(_QWORD *)(v78 + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v145 = (v145 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)v145 = v137;
      *(_BYTE *)(v78 + 16) = 0;
      return v78;
    default:
      __break(0xC471u);
      JUMPOUT(0x1988C2428);
  }
}

uint64_t operationAtomicsXor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD var30[7];

  var30[3] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v8 + 40) = var30[6];
  var30[0] = a2;
  var30[1] = a3;
  var30[2] = a4;
}

uint64_t JSC::`anonymous namespace'::atomicReadModifyWrite<JSC::`anonymous namespace'::XorFunc>(JSC::JSGlobalObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  int8x16_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  signed __int8 v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int16 *v76;
  signed __int16 v77;
  unint64_t v78;
  JSC::Structure *v79;
  JSC::JSGlobalObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int16 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  JSC::Structure *v113;
  JSC::JSGlobalObject *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  JSC::JSGlobalObject *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  int v188;
  JSC::VM **v189;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  JSC::Structure *v200;

  v11 = *(_QWORD *)a3;
  v200 = a1[7];
  v18 = JSC::validateTypedArray((JSC *)a1, v11, (JSC::JSArrayBufferView *)a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v200 + 20))
  {
    v126 = *((_DWORD *)v200 + 20);
    if ((v126 & 0x27) != 0 && (v126 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::Structure *)((char *)v200 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*((_QWORD *)v200 + 2))
      goto LABEL_121;
  }
  v20 = *((unsigned __int8 *)v18 + 5);
  v21 = v20 > 0x31;
  v22 = (1 << v20) & 0x33D8000000000;
  if (v21 || v22 == 0)
  {
    JSC::throwTypeError((unint64_t)a1, &v200, (uint64_t)"Typed array argument must be an Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, Uint32Array, BigInt64Array, or BigUint64Array.", 139);
LABEL_121:
    v18 = 0;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v127 = *(_DWORD *)(a2 + 80);
    if ((v127 & 0x27) != 0 && (v127 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(a2 + 16))
      return 0;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    v128 = *(_DWORD *)(a2 + 80);
    if ((v128 & 0x27) != 0 && (v128 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v24, v25, v26, v27, v28, v29);
    if (*(_QWORD *)(a2 + 16))
      return 0;
  }
  switch(*((_BYTE *)v18 + 5))
  {
    case '\'':
      v200 = (JSC::Structure *)a2;
      v38 = JSC::toNativeFromValue<JSC::Int8Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v129 = *(_DWORD *)(a2 + 80);
        if ((v129 & 0x27) != 0 && (v129 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v32, v33, v34, v35, v36, v37);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v39 = *((_QWORD *)v18 + 2);
        if (!v39
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v39 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        v40 = *((_QWORD *)v18 + 3);
        goto LABEL_17;
      }
      v156 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v156 + 64) && (v191 = *(_QWORD *)(v156 + 32)) != 0)
        v157 = *(_QWORD *)(v191 + 32);
      else
        v157 = *(_QWORD *)(v156 + 48);
      v159 = *((_QWORD *)v18 + 3);
      v158 = *((_QWORD *)v18 + 4);
      if (v159 + v158 <= v157)
      {
        if ((*((_BYTE *)v18 + 40) & 1) == 0)
        {
          if (v159 <= v30)
            goto LABEL_257;
          goto LABEL_18;
        }
        v40 = v157 - v158;
LABEL_17:
        if (v40 <= v30)
          goto LABEL_257;
LABEL_18:
        v41 = *((_QWORD *)v18 + 2);
        if (v41 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v41 = (v41 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v42 = (unsigned __int8 *)(v41 + v30);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 ^ v38, v42));
        v44 = v43;
        return v44 | 0xFFFE000000000000;
      }
LABEL_257:
      v189 = &v200;
      return JSC::throwTypeError((unint64_t)a1, v189, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    case '(':
      v200 = (JSC::Structure *)a2;
      v108 = JSC::toNativeFromValue<JSC::Uint8Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v148 = *(_DWORD *)(a2 + 80);
        if ((v148 & 0x27) != 0 && (v148 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v102, v103, v104, v105, v106, v107);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v109 = *((_QWORD *)v18 + 2);
        if (!v109
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v109 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        v110 = *((_QWORD *)v18 + 3);
        goto LABEL_103;
      }
      v176 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v176 + 64) && (v196 = *(_QWORD *)(v176 + 32)) != 0)
        v177 = *(_QWORD *)(v196 + 32);
      else
        v177 = *(_QWORD *)(v176 + 48);
      v179 = *((_QWORD *)v18 + 3);
      v178 = *((_QWORD *)v18 + 4);
      if (v179 + v178 > v177)
        goto LABEL_257;
      if ((*((_BYTE *)v18 + 40) & 1) != 0)
      {
        v110 = v177 - v178;
LABEL_103:
        if (v110 <= v30)
          goto LABEL_257;
        goto LABEL_104;
      }
      if (v179 <= v30)
        goto LABEL_257;
LABEL_104:
      v111 = *((_QWORD *)v18 + 2);
      if (v111 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v111 = (v111 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v112 = (unsigned __int8 *)(v111 + v30);
      do
        v55 = __ldaxr(v112);
      while (__stlxr(v55 ^ v108, v112));
LABEL_110:
      v66 = v55;
      return v66 | 0xFFFE000000000000;
    case '*':
      v200 = (JSC::Structure *)a2;
      v73 = JSC::toNativeFromValue<JSC::Int16Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v132 = *(_DWORD *)(a2 + 80);
        if ((v132 & 0x27) != 0 && (v132 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v67, v68, v69, v70, v71, v72);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v74 = *((_QWORD *)v18 + 2);
        if (!v74
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v74 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v168 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v168 + 64) && (v194 = *(_QWORD *)(v168 + 32)) != 0)
          v169 = *(_QWORD *)(v194 + 32);
        else
          v169 = *(_QWORD *)(v168 + 48);
        v171 = *((_QWORD *)v18 + 3);
        v170 = *((_QWORD *)v18 + 4);
        if (v170 + 2 * v171 > v169)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v169 - v170) >> 1)
            goto LABEL_257;
        }
        else if (v171 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v75 = *((_QWORD *)v18 + 2);
      if (v75 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v75 = (v75 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v76 = (unsigned __int16 *)(v75 + 2 * v30);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 ^ v73, v76));
      v44 = v77;
      return v44 | 0xFFFE000000000000;
    case '+':
      v200 = (JSC::Structure *)a2;
      v98 = JSC::toNativeFromValue<JSC::Uint16Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v147 = *(_DWORD *)(a2 + 80);
        if ((v147 & 0x27) != 0 && (v147 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v92, v93, v94, v95, v96, v97);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v99 = *((_QWORD *)v18 + 2);
        if (!v99
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v99 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v172 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v172 + 64) && (v195 = *(_QWORD *)(v172 + 32)) != 0)
          v173 = *(_QWORD *)(v195 + 32);
        else
          v173 = *(_QWORD *)(v172 + 48);
        v175 = *((_QWORD *)v18 + 3);
        v174 = *((_QWORD *)v18 + 4);
        if (v174 + 2 * v175 > v173)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v173 - v174) >> 1)
            goto LABEL_257;
        }
        else if (v175 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v100 = *((_QWORD *)v18 + 2);
      if (v100 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v100 = (v100 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v101 = (unsigned __int16 *)(v100 + 2 * v30);
      do
        v55 = __ldaxr(v101);
      while (__stlxr(v55 ^ v98, v101));
      goto LABEL_110;
    case ',':
      v200 = (JSC::Structure *)a2;
      v51 = JSC::toNativeFromValue<JSC::Int32Adaptor>((JSC::JSGlobalObject *)a1, *(_QWORD *)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v130 = *(_DWORD *)(a2 + 80);
        if ((v130 & 0x27) != 0 && (v130 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v45, v46, v47, v48, v49, v50);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v52 = *((_QWORD *)v18 + 2);
        if (!v52
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v52 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v160 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v160 + 64) && (v192 = *(_QWORD *)(v160 + 32)) != 0)
          v161 = *(_QWORD *)(v192 + 32);
        else
          v161 = *(_QWORD *)(v160 + 48);
        v163 = *((_QWORD *)v18 + 3);
        v162 = *((_QWORD *)v18 + 4);
        if (v162 + 4 * v163 > v161)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v161 - v162) >> 2)
            goto LABEL_257;
        }
        else if (v163 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v53 = *((_QWORD *)v18 + 2);
      if (v53 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v53 = (v53 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v54 = (unsigned int *)(v53 + 4 * v30);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 ^ v51, v54));
      goto LABEL_110;
    case '-':
      v200 = (JSC::Structure *)a2;
      v62 = JSC::toNativeFromValue<JSC::Uint32Adaptor>((JSC::JSGlobalObject *)a1, *(JSC::JSObject **)(a3 + 16), v24, v25, v26, v27, v28, v29, v31);
      if (*(_DWORD *)(a2 + 80))
      {
        v131 = *(_DWORD *)(a2 + 80);
        if ((v131 & 0x27) != 0 && (v131 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v56, v57, v58, v59, v60, v61);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v63 = *((_QWORD *)v18 + 2);
        if (!v63
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v63 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_257;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v164 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v164 + 64) && (v193 = *(_QWORD *)(v164 + 32)) != 0)
          v165 = *(_QWORD *)(v193 + 32);
        else
          v165 = *(_QWORD *)(v164 + 48);
        v167 = *((_QWORD *)v18 + 3);
        v166 = *((_QWORD *)v18 + 4);
        if (v166 + 4 * v167 > v165)
          goto LABEL_257;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v165 - v166) >> 2)
            goto LABEL_257;
        }
        else if (v167 <= v30)
        {
          goto LABEL_257;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_257;
      }
      v64 = *((_QWORD *)v18 + 2);
      if (v64 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v64 = (v64 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v65 = (unsigned int *)(v64 + 4 * v30);
      do
        LODWORD(v66) = __ldaxr(v65);
      while (__stlxr(v66 ^ v62, v65));
      if ((v66 & 0x80000000) == 0)
      {
        v66 = v66;
        return v66 | 0xFFFE000000000000;
      }
      return COERCE__INT64((double)v66) + 0x2000000000000;
    case '0':
      v113 = *(JSC::Structure **)(a3 + 16);
      v199 = a2;
      v200 = v113;
      v114 = a1[7];
      JSC::JSValue::toBigInt(&v200, (JSC::JSGlobalObject *)a1, v24, v25, v26, v27, v28, v29, v31);
      v122 = v121;
      if (*((_DWORD *)v114 + 20))
      {
        v149 = *((_DWORD *)v114 + 20);
        if ((v149 & 0x27) != 0 && (v149 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v114 + 64), 7u, v115, v116, v117, v118, v119, v120);
        if (*((_QWORD *)v114 + 2))
          goto LABEL_175;
      }
      if (!*(_DWORD *)(v122 + 8))
      {
LABEL_175:
        v125 = 0;
      }
      else
      {
        v123 = *(_QWORD *)(v122 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v123 = (v123 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v124 = *(_QWORD *)v123;
        if (*(_BYTE *)(v122 + 16))
          v125 = -v124;
        else
          v125 = v124;
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v155 = *(_DWORD *)(a2 + 80);
        if ((v155 & 0x27) != 0 && (v155 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v115, v116, v117, v118, v119, v120);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v150 = *((_QWORD *)v18 + 2);
        if (!v150
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v150 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_262;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) > 2)
      {
        v184 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
        if (*(_BYTE *)(v184 + 64) && (v198 = *(_QWORD *)(v184 + 32)) != 0)
          v185 = *(_QWORD *)(v198 + 32);
        else
          v185 = *(_QWORD *)(v184 + 48);
        v187 = *((_QWORD *)v18 + 3);
        v186 = *((_QWORD *)v18 + 4);
        if (v186 + 8 * v187 > v185)
          goto LABEL_262;
        if ((*((_BYTE *)v18 + 40) & 1) != 0)
        {
          if (v30 >= (v185 - v186) >> 3)
            goto LABEL_262;
        }
        else if (v187 <= v30)
        {
          goto LABEL_262;
        }
      }
      else if (*((_QWORD *)v18 + 3) <= (unint64_t)v30)
      {
        goto LABEL_262;
      }
      v151 = *((_QWORD *)v18 + 2);
      if (v151 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v151 = (v151 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v152 = (unint64_t *)(v151 + 8 * v30);
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 ^ v125, v152));
      return JSC::JSBigInt::createFrom((JSC::JSBigInt *)a1, v153, v115, v116, v117, v118, v119, v120);
    case '1':
      v79 = *(JSC::Structure **)(a3 + 16);
      v199 = a2;
      v200 = v79;
      v80 = a1[7];
      JSC::JSValue::toBigInt(&v200, (JSC::JSGlobalObject *)a1, v24, v25, v26, v27, v28, v29, v31);
      v88 = v87;
      if (*((_DWORD *)v80 + 20))
      {
        v133 = *((_DWORD *)v80 + 20);
        if ((v133 & 0x27) != 0 && (v133 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v80 + 64), 7u, v81, v82, v83, v84, v85, v86);
        if (*((_QWORD *)v80 + 2))
          goto LABEL_145;
      }
      if (!*(_DWORD *)(v88 + 8))
      {
LABEL_145:
        v91 = 0;
      }
      else
      {
        v89 = *(_QWORD *)(v88 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v89 = (v89 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v90 = *(_QWORD *)v89;
        if (*(_BYTE *)(v88 + 16))
          v91 = -v90;
        else
          v91 = v90;
      }
      if (*(_DWORD *)(a2 + 80))
      {
        v154 = *(_DWORD *)(a2 + 80);
        if ((v154 & 0x27) != 0 && (v154 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v81, v82, v83, v84, v85, v86);
        if (*(_QWORD *)(a2 + 16))
          return 0;
      }
      if ((*((_BYTE *)v18 + 40) & 8) != 0)
      {
        v134 = *((_QWORD *)v18 + 2);
        if (!v134
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v134 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          goto LABEL_262;
        }
      }
      if ((*((_BYTE *)v18 + 40) & 7u) <= 2)
      {
        if (*((_QWORD *)v18 + 3) > (unint64_t)v30)
          goto LABEL_154;
LABEL_262:
        v189 = (JSC::VM **)&v199;
        return JSC::throwTypeError((unint64_t)a1, v189, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      }
      v180 = *(_QWORD *)(*((_QWORD *)v18 + 1) - 8);
      if (*(_BYTE *)(v180 + 64) && (v197 = *(_QWORD *)(v180 + 32)) != 0)
        v181 = *(_QWORD *)(v197 + 32);
      else
        v181 = *(_QWORD *)(v180 + 48);
      v183 = *((_QWORD *)v18 + 3);
      v182 = *((_QWORD *)v18 + 4);
      if (v182 + 8 * v183 > v181)
        goto LABEL_262;
      if ((*((_BYTE *)v18 + 40) & 1) != 0)
      {
        if (v30 >= (v181 - v182) >> 3)
          goto LABEL_262;
      }
      else if (v183 <= v30)
      {
        goto LABEL_262;
      }
LABEL_154:
      v135 = *((_QWORD *)v18 + 2);
      if (v135 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v135 = (v135 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v136 = (unint64_t *)(v135 + 8 * v30);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 ^ v91, v136));
      v138 = a1[7];
      if (!v137)
        return JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], 0, v82, v83, v84, v85, v86);
      v78 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], (JSC::VM *)1, v82, v83, v84, v85, v86);
      if (*((_DWORD *)v138 + 20))
      {
        v188 = *((_DWORD *)v138 + 20);
        if ((v188 & 0x27) != 0 && (v188 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v138 + 64), 7u, v139, v140, v141, v142, v143, v144);
        if (*((_QWORD *)v138 + 2))
          return 0;
      }
      v145 = *(_QWORD *)(v78 + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v145 = (v145 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)v145 = v137;
      *(_BYTE *)(v78 + 16) = 0;
      return v78;
    default:
      __break(0xC471u);
      JUMPOUT(0x1988C3334);
  }
}

void JSC::BasicBlockLocation::getExecutedRanges(const void **this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  const void **v16;
  uint64_t v17;
  const void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  const void *v28;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *((unsigned int *)this + 5);
  if ((_DWORD)v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v5 = (int *)WTF::fastMalloc((WTF *)(8 * v4));
    memcpy(v5, this[1], 8 * *((unsigned int *)this + 5));
    LODWORD(v6) = 0;
    v7 = *(_DWORD *)this;
    do
    {
      v8 = 0;
      v9 = 0;
      v10 = v4 - 1;
      if (v4 <= 1)
        v11 = 1;
      else
        v11 = v4;
      v12 = 0x7FFFFFFF;
      v13 = v5 + 1;
      v14 = 0xFFFFFFFFLL;
      do
      {
        if (*(v13 - 1) < v12)
        {
          v9 = *v13;
          v14 = v8;
          v12 = *(v13 - 1);
        }
        ++v8;
        v13 += 2;
      }
      while (v11 != v8);
      LODWORD(v28) = v7;
      HIDWORD(v28) = v12 - 1;
      v15 = v6;
      if ((_DWORD)v6 == *(_DWORD *)(a2 + 8))
      {
        v16 = (const void **)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v6 + 1, (unint64_t)&v28);
        v15 = *(unsigned int *)(a2 + 12);
        v17 = *(_QWORD *)a2;
        v18 = *v16;
      }
      else
      {
        v17 = *(_QWORD *)a2;
        v18 = v28;
      }
      *(_QWORD *)(v17 + 8 * v15) = v18;
      v6 = (*(_DWORD *)(a2 + 12) + 1);
      *(_DWORD *)(a2 + 12) = v6;
      v7 = v9 + 1;
      memmove(&v5[2 * v14], &v5[2 * v14 + 2], 8 * v4-- - (8 * v14 + 8));
    }
    while (v10);
    v26 = *(_DWORD *)(a2 + 8);
    v27 = *((_DWORD *)this + 1);
    LODWORD(v28) = v9 + 1;
    HIDWORD(v28) = v27;
    if ((_DWORD)v6 != v26)
    {
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v6) = v28;
      ++*(_DWORD *)(a2 + 12);
LABEL_17:
      WTF::fastFree((unint64_t)v5, v19, v20, v21, v22, v23, v24, v25);
      return;
    }
  }
  else
  {
    v6 = 0;
    v5 = 0;
    v28 = *this;
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * (*(_DWORD *)(a2 + 12))++) = *(_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v6 + 1, (unint64_t)&v28);
  if (v5)
    goto LABEL_17;
}

void JSC::BasicBlockLocation::dumpData(const void **this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  int v16;
  unsigned int v17;

  JSC::BasicBlockLocation::getExecutedRanges(this, (uint64_t)&v15);
  v9 = v15;
  if (v17)
  {
    v10 = (WTF *)((char *)v15 + 8 * v17);
    v11 = this + 3;
    do
    {
      if (*v11)
        v12 = "true";
      else
        v12 = "false";
      v13 = *(unsigned int *)v9;
      v14 = *((unsigned int *)v9 + 1);
      v9 = (WTF *)((char *)v9 + 8);
      WTF::dataLogF((WTF *)"\tBasicBlock: [%d, %d] hasExecuted: %s, executionCount:", v2, v13, v14, v12);
      WTF::dataLog<unsigned long long,char [2]>(v11, "\n");
    }
    while (v9 != v10);
    v9 = v15;
  }
  if (v9)
  {
    v15 = 0;
    v16 = 0;
    WTF::fastFree((unint64_t)v9, v2, v3, v4, v5, v6, v7, v8);
  }
}

void JSC::BasicBlockLocation::emitExecuteCode(JSC::BasicBlockLocation *this, JSC::CCallHelpers *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  if (!*((_BYTE *)a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1988C395CLL);
  }
  v9 = (char *)this + 24;
  *(_DWORD *)(*((_QWORD *)a2 + 33) + 208) &= ~*((_DWORD *)a2 + 72);
  JSC::MacroAssemblerARM64::load64((uint64_t)a2, (uint64_t)this + 24, *((char *)a2 + 272), a4, a5, a6, a7, a8);
  v17 = *((_DWORD *)a2 + 50);
  if (v17 + 4 > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v10, v11, v12, v13, v14, v15, v16);
    v17 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v17) = -1862269424;
  *((_DWORD *)a2 + 50) += 4;
  JSC::MacroAssemblerARM64::store64((uint64_t)a2, 16, (uint64_t)v9, v12, v13, v14, v15, v16);
}

JSC::JSBigInt *JSC::callBigIntConstructor(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  JSC::JSGlobalObject *v12;
  unint64_t v13;
  JSC::Exception *v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v19;
  unint64_t v20;
  JSC::Heap **v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  JSC::Exception *v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD *);
  _QWORD *v51;
  WTF::StringImpl *v52;
  JSC::Structure *v53;
  _QWORD v54[3];

  v10 = *(_QWORD *)(this + 56);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v11 = 10;
  }
  else
  {
    v11 = *((_QWORD *)a2 + 6);
    if ((v11 & 0xFFFE000000000002) == 0)
      v11 = JSC::JSCell::toPrimitive(*((_QWORD *)a2 + 6), (JSC::VM **)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  v53 = (JSC::Structure *)v11;
  if (*(_DWORD *)(v10 + 80))
  {
    v48 = *(_DWORD *)(v10 + 80);
    if ((v48 & 0x27) != 0 && (v48 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (v11 >= 0xFFFE000000000000)
  {
    v12 = *(JSC::JSGlobalObject **)(this + 56);
    if ((_DWORD)v11)
    {
      v13 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)this, v12, (JSC::VM *)1, a4, a5, a6, a7, a8);
      v14 = (JSC::Exception *)v13;
      if (v13)
      {
        if ((v11 & 0x80000000) != 0)
        {
          v49 = *(_QWORD *)(v13 + 24);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v49 = (v49 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_QWORD *)v49 = -(uint64_t)(int)v11;
          *(_BYTE *)(v13 + 16) = 1;
        }
        else
        {
          v15 = *(_QWORD *)(v13 + 24);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_QWORD *)v15 = v11;
        }
      }
      return v14;
    }
    return (JSC::JSBigInt *)JSC::JSBigInt::createWithLength((JSC::JSBigInt *)this, v12, 0, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)&v16 = v11 - 0x2000000000000;
  if (v11 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toBigInt(&v53, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return (JSC::JSBigInt *)v38;
  }
  v17 = trunc(v16);
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v17 == v16)
  {
    if (fabs(v16) <= 9.00719925e15)
      return (JSC::JSBigInt *)JSC::JSBigInt::createFrom((JSC::JSBigInt *)this, (uint64_t)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
    else
      return JSC::JSBigInt::createFrom((JSC::JSBigInt *)this, a2, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v19 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v19 = 0xE00000002;
  *(_QWORD *)(v19 + 8) = "Not an integer";
  *(_DWORD *)(v19 + 16) = 4;
  v52 = (WTF::StringImpl *)v19;
  v20 = *(_QWORD *)(this + 128);
  v21 = *(JSC::Heap ***)(this + 56);
  if ((v20 & 1) != 0)
  {
    v50 = *(uint64_t (**)(_QWORD *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v51 = (_QWORD *)(this - 16);
    else
      v51 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v54[0] = *v51;
    v54[1] = this;
    v54[2] = this + 128;
    v20 = v50(v54);
  }
  v22 = JSC::ErrorInstance::create(v21, v20, &v52, 0, 0, 0, 2, 1);
  v29 = (JSC::Exception *)v22;
  if ((v22 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C)))
  {
    v29 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v22, 0, v23, v24, v25, v26, v27);
  }
  v14 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v29, v28, v23, v24, v25, v26, v27);
  v37 = v52;
  v52 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  return v14;
}

JSC::Exception *JSC::constructBigIntConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v5 = *((_QWORD *)a2 + 3);
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  v7.i64[0] = 0x1400000002;
  *(_QWORD *)v6 = 0x1400000002;
  *(_QWORD *)(v6 + 8) = "is not a constructor";
  *(_DWORD *)(v6 + 16) = 4;
  v30 = v6;
  v19 = JSC::createError((unint64_t)this, v5, &v30, (uint64_t)JSC::defaultSourceAppender, v8, v9, v10, v11, v7);
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v12, v13, v14, v15, v16, v17, v18);
    WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  if ((v19 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C)))
  {
    v19 = JSC::Exception::create((uint64_t)v4, (JSC::VM *)v19, 0, v14, v15, v16, v17, v18);
  }
  return JSC::VM::throwException(v4, this, (JSC::Exception *)v19, v20, v14, v15, v16, v17, v18);
}

unint64_t JSC::BigIntObject::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  uint64_t v12;
  unint64_t SlowCase;
  int v14;
  unint64_t v15;
  int v16;
  unint64_t v18;
  unint64_t v19;

  v11 = *(_QWORD **)(a1 + 40352);
  if (!v11)
    v11 = (_QWORD *)JSC::GCClient::Heap::bigIntObjectSpaceSlow((JSC::Heap **)(a1 + 37552));
  v12 = a1 + 192;
  SlowCase = v11[3];
  if (SlowCase < v11[4])
    goto LABEL_4;
  SlowCase = v11[5];
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ v11[6];
    v11[4] = SlowCase + HIDWORD(v18);
    v11[5] = SlowCase + (int)v18;
LABEL_4:
    v11[3] = SlowCase + 32;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v11, a1 + 192, 32, 0, 0);
  v12 = a1 + 192;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v14 = *((_DWORD *)a2 + 292);
  if (v14)
    v15 = 16 * (v14 & 0xFFFFFFFE);
  else
    v15 = 0;
  v16 = *(_DWORD *)(v15 + 8);
  *(_DWORD *)SlowCase = v15 >> 4;
  *(_DWORD *)(SlowCase + 4) = v16;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_QWORD *)(SlowCase + 16) = a3;
  if (a3
    && (a3 & 0xFFFE000000000002) == 0
    && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
  {
    v19 = SlowCase;
    JSC::Heap::writeBarrierSlowPath(v12, SlowCase);
    return v19;
  }
  return SlowCase;
}

uint64_t JSC::BigIntObject::BigIntObject(uint64_t result, uint64_t a2, unint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

{
  int v3;

  v3 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

unint64_t JSC::BigIntObject::finishCreation(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  *(_QWORD *)(result + 16) = a3;
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(result + 7))
    return JSC::Heap::writeBarrierSlowPath(a2 + 192, result);
  return result;
}

unint64_t JSC::atomicsWaitImpl<int,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSObject *a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  double v15;
  unsigned int *v16;
  double v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  double v26;
  int v27;
  JSC::VM *v28;
  JSC::JSObject *v29;
  char v30;
  char **v31;
  char *v32;

  v9 = a6;
  v11 = a3;
  v12 = a2;
  v14 = *((_QWORD *)a1 + 7);
  v28 = (JSC::VM *)v14;
  v29 = a5;
  if (a2 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v12 = (a2 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  if ((unint64_t)a5 >= 0xFFFE000000000000)
  {
    v15 = (double)(int)a5;
  }
  else if ((unint64_t)a5 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(&v29, a1, a3, a4, (uint64_t)a5, a6, a7, a8, a9);
    v15 = v26;
  }
  else
  {
    *(_QWORD *)&v15 = (char *)a5 - 0x2000000000000;
  }
  if (*(_DWORD *)(v14 + 80))
  {
    v27 = *(_DWORD *)(v14 + 80);
    if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
      return 0;
  }
  v16 = (unsigned int *)(v12 + 4 * v11);
  if (v15 / 1000.0 >= 0.0)
    v17 = v15 / 1000.0;
  else
    v17 = 0.0;
  if (v9 == 1)
  {
    v18 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
    if (v18 != -1)
    {
      v32 = &v30;
      v31 = &v32;
      std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
    }
    return JSC::WaiterListManager::waitAsyncImpl<int>((char *)&JSC::WaiterListManager::singleton(void)::manager, (uint64_t)a1, v14, v16, a4, a6, a7, a8, v17);
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 93024) + 32))(*(_QWORD *)(v14 + 93024)) & 1) == 0)
  {
    JSC::throwTypeError((unint64_t)a1, &v28, (uint64_t)"Atomics.wait cannot be called from the current thread.", 55);
    return 0;
  }
  v24 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
  if (v24 != -1)
  {
    v32 = &v30;
    v31 = &v32;
    std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
  }
  v25 = JSC::WaiterListManager::waitSyncImpl<int>((char *)&JSC::WaiterListManager::singleton(void)::manager, v14, v16, a4, v20, v21, v22, v23, v17);
  if (v25 == 2)
    return *(_QWORD *)(v14 + 42192);
  if (v25 == 1)
    return *(_QWORD *)(v14 + 42184);
  if (v25)
  {
    __break(0xC471u);
    JUMPOUT(0x1988C41E4);
  }
  return *(_QWORD *)(v14 + 42200);
}

unint64_t JSC::atomicsWaitImpl<long long,JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::JSObject *a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  double v15;
  unint64_t *v16;
  double v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  double v26;
  int v27;
  JSC::VM *v28;
  JSC::JSObject *v29;
  char v30;
  char **v31;
  char *v32;

  v9 = a6;
  v11 = a3;
  v12 = a2;
  v14 = *((_QWORD *)a1 + 7);
  v28 = (JSC::VM *)v14;
  v29 = a5;
  if (a2 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v12 = (a2 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  if ((unint64_t)a5 >= 0xFFFE000000000000)
  {
    v15 = (double)(int)a5;
  }
  else if ((unint64_t)a5 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(&v29, a1, a3, a4, (uint64_t)a5, a6, a7, a8, a9);
    v15 = v26;
  }
  else
  {
    *(_QWORD *)&v15 = (char *)a5 - 0x2000000000000;
  }
  if (*(_DWORD *)(v14 + 80))
  {
    v27 = *(_DWORD *)(v14 + 80);
    if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
      return 0;
  }
  v16 = (unint64_t *)(v12 + 8 * v11);
  if (v15 / 1000.0 >= 0.0)
    v17 = v15 / 1000.0;
  else
    v17 = 0.0;
  if (v9 == 1)
  {
    v18 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
    if (v18 != -1)
    {
      v32 = &v30;
      v31 = &v32;
      std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
    }
    return JSC::WaiterListManager::waitAsyncImpl<long long>((char *)&JSC::WaiterListManager::singleton(void)::manager, (uint64_t)a1, v14, v16, a4, a6, a7, a8, v17);
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 93024) + 32))(*(_QWORD *)(v14 + 93024)) & 1) == 0)
  {
    JSC::throwTypeError((unint64_t)a1, &v28, (uint64_t)"Atomics.wait cannot be called from the current thread.", 55);
    return 0;
  }
  v24 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
  if (v24 != -1)
  {
    v32 = &v30;
    v31 = &v32;
    std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
  }
  v25 = JSC::WaiterListManager::waitSyncImpl<long long>((char *)&JSC::WaiterListManager::singleton(void)::manager, v14, v16, a4, v20, v21, v22, v23, v17);
  if (v25 == 2)
    return *(_QWORD *)(v14 + 42192);
  if (v25 == 1)
    return *(_QWORD *)(v14 + 42184);
  if (v25)
  {
    __break(0xC471u);
    JUMPOUT(0x1988C4460);
  }
  return *(_QWORD *)(v14 + 42200);
}

JSC::JSObject *JSC::JSValue::toIndex(JSC::JSObject **a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v13;
  JSC::JSObject *v14;
  unint64_t v15;
  double v16;
  JSC::JSObject *result;
  double v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const WTF::String *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;

  v13 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v14 = *a1;
  if ((unint64_t)*a1 >= 0xFFFE000000000000)
  {
    v16 = (double)(int)v14;
  }
  else
  {
    v15 = (unint64_t)v14 - 0x2000000000000;
    if (v15 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase(a1, a2, a3, a4, a5, a6, a7, a8, a9);
      v16 = v18;
    }
    else
    {
      v16 = *(double *)&v15;
    }
  }
  if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if (v16 <= -1.0)
  {
    v19 = " cannot be negative";
    v20 = a3;
    v21 = a4;
    v22 = 20;
    goto LABEL_13;
  }
  result = *a1;
  if ((unint64_t)*a1 >= 0xFFFE000000000000)
    return result;
  if (v16 > 4294967300.0)
  {
    v19 = " too large";
    v20 = a3;
    v21 = a4;
    v22 = 11;
LABEL_13:
    WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(v20, v21, (uint64_t)v19, v22, (int **)&v49);
    v24 = JSC::createRangeError((unint64_t)a2, &v49, v23);
    JSC::VM::throwException(v13, a2, v24, v25, v26, v27, v28, v29);
    v37 = v49;
    v49 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
      {
        WTF::StringImpl::~StringImpl(v37, v30, v31, v32, v33, v34, v35, v36);
        WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
      }
      else
      {
        *(_DWORD *)v37 -= 2;
      }
    }
    return 0;
  }
  v38 = (*(_QWORD *)&v16 >> 52) & 0x7FFLL;
  if ((v38 - 1023) > 0x53)
    return 0;
  v39 = *(_QWORD *)&v16 >> (51 - (*(_QWORD *)&v16 >> 52));
  if (v38 > 0x433)
    LODWORD(v39) = *(_QWORD *)&v16 << ((*(_QWORD *)&v16 >> 52) - 51);
  if (v38 >= 0x41F)
    v40 = v39;
  else
    v40 = (((1 << ((*(_QWORD *)&v16 >> 52) + 1)) - 1) & v39) + (1 << ((*(_QWORD *)&v16 >> 52) + 1));
  if (v16 >= 0.0)
    return (JSC::JSObject *)v40;
  else
    return (JSC::JSObject *)-v40;
}

JSC::JSGlobalObject *JSC::validateTypedArray(JSC *a1, uint64_t a2, JSC::JSArrayBufferView *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  JSC::VM *v28;

  v28 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(a2 + 5) - 39 < 0xB)
    return JSC::validateTypedArray(a1, (JSC::ArrayBuffer **)a2, a3, a4, a5, a6, a7, a8);
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x2300000002;
  *(_QWORD *)(v10 + 8) = "Argument needs to be a typed array.";
  *(_DWORD *)(v10 + 16) = 4;
  v27 = (WTF::StringImpl *)v10;
  JSC::throwTypeError((unint64_t)a1, &v28, &v27);
  v18 = v27;
  v27 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return 0;
}

JSC::JSGlobalObject *JSC::validateTypedArray(JSC *this, JSC::ArrayBuffer **a2, JSC::JSArrayBufferView *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v9;
  int v10;
  JSC::ArrayBuffer *v11;
  uint64_t v13;
  const char *v14;
  JSC::ArrayBuffer *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL4 v21;
  BOOL v22;
  BOOL v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  JSC::VM *v51;

  v51 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((unsigned __int8 *)a2 + 5) - 39 < 0xB)
  {
    v9 = (JSC::JSGlobalObject *)a2;
    v10 = *((unsigned __int8 *)a2 + 40);
    if ((v10 & 8) == 0
      || (v11 = a2[2]) != 0
      && (!qword_1ECF4C038
       || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
       || ((unint64_t)v11 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      if ((v10 & 6) == 0)
        return v9;
      if (v10 == 88)
        goto LABEL_11;
      if (v10 == 48 || v10 == 16)
      {
        v15 = JSC::JSArrayBufferView::slowDownAndWasteMemory((uint64_t)a2, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_12;
      }
      v32 = v10 - 90;
      if (v32 <= 0x33)
      {
        if (((1 << v32) & 0xF400000000000) != 0)
        {
          v15 = a2[6];
LABEL_12:
          if (v15)
          {
            *(_DWORD *)v15 += 2;
            if (*((_BYTE *)v15 + 64) && (v49 = *((_QWORD *)v15 + 4)) != 0)
              v16 = atomic_load((unint64_t *)(v49 + 32));
            else
              v16 = *((_QWORD *)v15 + 6);
            v17 = *((_QWORD *)v9 + 4);
            v18 = v16;
            if ((*((_BYTE *)v9 + 40) & 1) == 0)
            {
              if ((*((_BYTE *)v9 + 5) - 42) > 7u)
                LOBYTE(v19) = 0;
              else
                v19 = qword_199157570[(char)(*((_BYTE *)v9 + 5) - 42)];
              v18 = (*((_QWORD *)v9 + 3) << v19) + v17;
            }
            v21 = v17 > v16 || v18 > v16;
            v22 = *(_DWORD *)v15 == 2;
            *(_DWORD *)v15 -= 2;
            if (v22)
            {
              v23 = v21;
              JSC::ArrayBuffer::~ArrayBuffer(v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
              if (!v23)
                return v9;
            }
            else if (!v21)
            {
              return v9;
            }
          }
          goto LABEL_40;
        }
        if (((1 << v32) & 0xF) != 0)
        {
LABEL_11:
          v15 = (JSC::ArrayBuffer *)*((_QWORD *)a2[1] - 1);
          goto LABEL_12;
        }
      }
    }
LABEL_40:
    v13 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v13 = 0x4700000002;
    v14 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    goto LABEL_41;
  }
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x2300000002;
  v14 = "Argument needs to be a typed array.";
LABEL_41:
  *(_QWORD *)(v13 + 8) = v14;
  *(_DWORD *)(v13 + 16) = 4;
  v50 = (WTF::StringImpl *)v13;
  JSC::throwTypeError((unint64_t)this, &v51, &v50);
  v40 = v50;
  v50 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
  }
  return 0;
}

uint64_t JSC::toNativeFromValue<JSC::Int32Adaptor>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  JSC::JSObject *v20;

  v20 = (JSC::JSObject *)a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
    return a2;
  if ((unint64_t)a2 >> 49)
  {
    v9 = a2 - 0x2000000000000;
    if ((double)(int)COERCE_DOUBLE(a2 - 0x2000000000000) == COERCE_DOUBLE(a2 - 0x2000000000000))
      return (int)COERCE_DOUBLE(a2 - 0x2000000000000);
    v10 = (v9 >> 52) & 0x7FF;
    v11 = (v9 >> 52) + 1;
    if ((v10 - 1023) <= 0x53)
    {
      v12 = v9 >> (51 - (v9 >> 52));
      if (v10 > 0x433)
        LODWORD(v12) = a2 << (v10 - 51);
      v13 = (((1 << v11) - 1) & v12) + (1 << v11);
      if (v10 >= 0x41F)
        v14 = v12;
      else
        v14 = v13;
      if (a2 >= 0x2000000000000)
        return v14;
      else
        return -v14;
    }
    return 0;
  }
  JSC::JSValue::toNumberSlowCase(&v20, a1, a3, a4, a5, a6, a7, a8, a9);
  a2 = (int)v15;
  if (v15 == (double)(int)a2)
    return a2;
  v16 = (*(_QWORD *)&v15 >> 52) & 0x7FFLL;
  if ((v16 - 1023) > 0x53)
    return 0;
  v17 = *(_QWORD *)&v15 >> (51 - (*(_QWORD *)&v15 >> 52));
  if (v16 > 0x433)
    LODWORD(v17) = *(_QWORD *)&v15 << ((*(_QWORD *)&v15 >> 52) - 51);
  if (v16 >= 0x41F)
    v18 = v17;
  else
    v18 = (((1 << ((*(_QWORD *)&v15 >> 52) + 1)) - 1) & v17) + (1 << ((*(_QWORD *)&v15 >> 52) + 1));
  if (v15 >= 0.0)
    return v18;
  else
    return -v18;
}

JSC::JSBigInt *JSC::bigIntConstructorFuncAsUintN(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  JSC::Structure *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  int v32;
  JSC::Structure *v33;

  v11 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  v33 = (JSC::Structure *)v12;
  v19 = JSC::JSValue::toIndex(&v33, this, (uint64_t)"number of bits", 15, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v11 + 80))
  {
    v31 = *(_DWORD *)(v11 + 80);
    if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v21 = (JSC::Structure *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7));
  v33 = v21;
  JSC::JSValue::toBigInt(&v33, this, v13, v14, v15, v16, v17, v18, v20);
  v29 = v28;
  if (!*(_DWORD *)(v11 + 80))
    return JSC::JSBigInt::asUintNImpl<JSC::HeapBigIntImpl>(this, v19, v29, v23, v24, v25, v26, v27);
  v32 = *(_DWORD *)(v11 + 80);
  if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v22, v23, v24, v25, v26, v27);
  if (*(_QWORD *)(v11 + 16))
    return 0;
  else
    return JSC::JSBigInt::asUintNImpl<JSC::HeapBigIntImpl>(this, v19, v29, v23, v24, v25, v26, v27);
}

JSC::JSBigInt *JSC::bigIntConstructorFuncAsIntN(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  JSC::Structure *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  int v32;
  JSC::Structure *v33;

  v11 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  v33 = (JSC::Structure *)v12;
  v19 = JSC::JSValue::toIndex(&v33, this, (uint64_t)"number of bits", 15, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v11 + 80))
  {
    v31 = *(_DWORD *)(v11 + 80);
    if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v21 = (JSC::Structure *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7));
  v33 = v21;
  JSC::JSValue::toBigInt(&v33, this, v13, v14, v15, v16, v17, v18, v20);
  v29 = v28;
  if (!*(_DWORD *)(v11 + 80))
    return JSC::JSBigInt::asIntNImpl<JSC::HeapBigIntImpl>((JSC::JSGlobalObject **)this, v19, v29, v23, v24, v25, v26, v27);
  v32 = *(_DWORD *)(v11 + 80);
  if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v22, v23, v24, v25, v26, v27);
  if (*(_QWORD *)(v11 + 16))
    return 0;
  else
    return JSC::JSBigInt::asIntNImpl<JSC::HeapBigIntImpl>((JSC::JSGlobalObject **)this, v19, v29, v23, v24, v25, v26, v27);
}

uint64_t JSC::bigIntProtoFuncToString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  JSC::JSObject *v14;
  WTF::AtomStringImpl *v15;
  const WTF::String *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::JSObject *v22;
  int8x8_t v23;
  uint8x8_t v24;
  JSC::JSBigInt *v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  JSC::VM *v42;
  WTF::StringImpl *v43;
  char v44;

  v11 = *((_QWORD *)this + 7);
  v42 = (JSC::VM *)v11;
  v43 = (WTF::StringImpl *)v11;
  v12 = *((_QWORD *)a2 + 5);
  if ((v12 & 0xFFFE000000000002) != 0)
    goto LABEL_2;
  if (v12)
    v13 = *(_BYTE *)(v12 + 5) == 3;
  else
    v13 = 0;
  if (!v13)
  {
    if (&JSC::BigIntObject::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)))
    {
LABEL_2:
      JSC::throwTypeError((unint64_t)this, &v43, (uint64_t)"'this' value must be a BigInt or BigIntObject", 46);
      v12 = 0;
      goto LABEL_9;
    }
    v12 = *(_QWORD *)(v12 + 16);
  }
LABEL_9:
  if (*(_DWORD *)(v11 + 80))
  {
    v39 = *(_DWORD *)(v11 + 80);
    if ((v39 & 0x27) != 0 && (v39 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v14 = (JSC::JSObject *)(*((_DWORD *)a2 + 8) == 1 ? 10 : *((_QWORD *)a2 + 6));
  v22 = JSC::extractToStringRadixArgument(this, v14, &v42, a4, a5, a6, a7, a8, a9);
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_52;
  v40 = *(_DWORD *)(v11 + 80);
  if ((v40 & 0x27) != 0 && (v40 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v16, v17, v18, v19, v20, v21);
  if (*(_QWORD *)(v11 + 16))
    return 0;
LABEL_52:
  if (*(_DWORD *)(v12 + 8))
  {
    v23.i32[0] = (int)v22;
    v24 = (uint8x8_t)vcnt_s8(v23);
    v24.i16[0] = vaddlv_u8(v24);
    v25 = (JSC::JSBigInt *)*((_QWORD *)this + 7);
    if (v24.i32[0] == 1)
      JSC::JSBigInt::toStringBasePowerOfTwo(v25, this, (JSC::JSGlobalObject *)v12, v22, (uint64_t *)&v43);
    else
      JSC::JSBigInt::toStringGeneric(v25, this, (JSC::JSGlobalObject *)v12, (uint64_t)v22, v18, v19, v20, v21, (int **)&v43);
  }
  else
  {
    if (*(_BYTE *)(*((_QWORD *)this + 7) + 44265))
    {
      v26 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)this + 7) + 42600) + 8);
      if ((v26 & 1) != 0)
        v27 = 0;
      else
        v27 = *(_DWORD **)(*(_QWORD *)(*((_QWORD *)this + 7) + 42600) + 8);
      *v27 += 2;
    }
    else
    {
      v44 = 48;
      WTF::AtomStringImpl::add((uint64_t)&v44, 1uLL, v17, v18, v19, v20, v21, &v43);
      v26 = v43;
    }
    v43 = v26;
  }
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_25;
  v41 = *(_DWORD *)(v11 + 80);
  if ((v41 & 0x27) != 0 && (v41 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v16, v17, v18, v19, v20, v21);
  if (*(_QWORD *)(v11 + 16))
  {
    v28 = 0;
  }
  else
  {
LABEL_25:
    if (v43 && *((_DWORD *)v43 + 1) == 1)
      v28 = *(_QWORD *)(v11 + 8 * **((unsigned __int8 **)v43 + 1) + 42216);
    else
      v28 = JSC::jsNontrivialString((JSC *)v11, (JSC::VM *)&v43, v16, v17, v18, v19, v20, v21);
  }
  v29 = v43;
  v43 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  return v28;
}

uint64_t JSC::bigIntProtoFuncToLocaleString(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  JSC::IntlNumberFormat *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  uint64_t (*v40)(JSC::VM **);
  JSC::VM **v41;
  int v42;
  int v43;
  JSC::VM *v44;
  unint64_t v45;
  char *v46;
  char v47;

  v10 = *(_QWORD *)(this + 56);
  v11 = *((_QWORD *)a2 + 5);
  v44 = (JSC::VM *)v10;
  if ((v11 & 0xFFFE000000000002) != 0)
    goto LABEL_2;
  if (v11)
    v12 = *(_BYTE *)(v11 + 5) == 3;
  else
    v12 = 0;
  if (v12)
    goto LABEL_9;
  if (&JSC::BigIntObject::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
LABEL_2:
    JSC::throwTypeError(this, &v44, (uint64_t)"'this' value must be a BigInt or BigIntObject", 46);
    v11 = 0;
  }
  else
  {
    v11 = *(_QWORD *)(v11 + 16);
  }
LABEL_9:
  if (*(_DWORD *)(v10 + 80))
  {
    v39 = *(_DWORD *)(v10 + 80);
    if ((v39 & 0x27) != 0 && (v39 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v13 = *(_QWORD *)(this + 400);
  if ((v13 & 1) != 0)
  {
    v40 = *(uint64_t (**)(JSC::VM **))(v13 & 0xFFFFFFFFFFFFFFFCLL);
    v41 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v41 = (JSC::VM **)(this - 16);
    v44 = *v41;
    v45 = this;
    v46 = (char *)(this + 400);
    v13 = v40(&v44);
  }
  v14 = JSC::IntlNumberFormat::create((JSC::IntlNumberFormat *)v10, (JSC::VM *)v13, a3, a4, a5, a6, a7, a8);
  v20 = (JSC::IntlNumberFormat *)v14;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21 = 10;
    goto LABEL_23;
  }
  v21 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
LABEL_23:
    v22 = 10;
    goto LABEL_14;
  }
  v22 = *((_QWORD *)a2 + 7);
LABEL_14:
  JSC::IntlNumberFormat::initializeNumberFormat(v14, (JSC::JSGlobalObject *)this, v21, (JSC::Symbol *)v22, v15, v16, v17, v18, v19);
  if (*(_DWORD *)(v10 + 80))
  {
    v42 = *(_DWORD *)(v10 + 80);
    if ((v42 & 0x27) != 0 && (v42 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  JSC::toIntlMathematicalValue((JSC::VM **)this, v11, v23, v24, v25, v26, v27, v28, (uint64_t)&v44, v29);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_16;
  v43 = *(_DWORD *)(v10 + 80);
  if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v30, v31, v32, v33, v34, v35);
  if (*(_QWORD *)(v10 + 16))
  {
    v37 = 0;
  }
  else
  {
LABEL_16:
    if ((_DWORD)v45)
      v36 = JSC::IntlNumberFormat::format((uint64_t)v20, this, (JSC::IntlMathematicalValue *)&v44);
    else
      v36 = JSC::IntlNumberFormat::format(v20, (JSC::JSGlobalObject *)this, *(double *)&v44);
    v37 = v36;
  }
  if ((_DWORD)v45 != -1)
    ((void (*)(char *, JSC::VM **))off_1E3598080[v45])(&v47, &v44);
  return v37;
}

uint64_t JSC::bigIntProtoFuncValueOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  BOOL v11;
  int v12;
  uint64_t v13;
  JSC::VM *v14;

  v9 = *((_QWORD *)this + 7);
  result = *((_QWORD *)a2 + 5);
  v14 = (JSC::VM *)v9;
  if ((result & 0xFFFE000000000002) != 0)
    goto LABEL_2;
  if (result)
    v11 = *(_BYTE *)(result + 5) == 3;
  else
    v11 = 0;
  if (!v11)
  {
    if (&JSC::BigIntObject::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C)))
    {
LABEL_2:
      JSC::throwTypeError((unint64_t)this, &v14, (uint64_t)"'this' value must be a BigInt or BigIntObject", 46);
      result = 0;
      goto LABEL_9;
    }
    result = *(_QWORD *)(result + 16);
  }
LABEL_9:
  if (*(_DWORD *)(v9 + 80))
  {
    v12 = *(_DWORD *)(v9 + 80);
    if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
    {
      v13 = result;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      result = v13;
    }
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  return result;
}

void JSC::toIntlMathematicalValue(JSC::VM **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int8x16_t a10@<Q0>)
{
  unint64_t v10;
  double v12;
  JSC::VM *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int **v19;
  int *v20;
  char *v21;
  unint64_t v22;
  JSC::JSObject *v23;

  v10 = a2;
  if (a2 >> 49)
  {
    v12 = (double)(int)a2;
    if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v12 = a2 - 0x2000000000000;
    goto LABEL_4;
  }
  v14 = a1[7];
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(a2 + 5) == 3)
    {
      v15 = *(_DWORD *)(a2 + 8);
      if (!v15)
      {
        v12 = 0.0;
        goto LABEL_4;
      }
      if (v15 == 1)
      {
        v16 = *(_QWORD *)(a2 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v16 = (v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v17 = *(_QWORD *)v16;
        if (!(v17 >> 53))
        {
          v12 = (double)v17;
          if (*(_BYTE *)(a2 + 16))
            v12 = -(double)v17;
          goto LABEL_4;
        }
      }
    }
    v10 = JSC::JSCell::toPrimitive(a2, a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  v23 = (JSC::JSObject *)v10;
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14, a2, a3, a4, a5, a6, a7, a8))
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    return;
  }
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    if (v10 >= 0xFFFE000000000000)
    {
      v12 = (double)(int)v10;
      goto LABEL_4;
    }
    if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v12 = v10 - 0x2000000000000;
LABEL_4:
      *(double *)a9 = v12;
      *(_DWORD *)(a9 + 8) = 0;
      *(_DWORD *)(a9 + 16) = (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(a9 + 20) = v12 < 0.0;
      return;
    }
LABEL_22:
    JSC::JSValue::toNumberSlowCase(&v23, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a10);
    goto LABEL_4;
  }
  v18 = *(unsigned __int8 *)(v10 + 5);
  if (v18 != 2)
  {
    if (v18 == 3)
    {
      JSC::toIntlMathematicalValue(JSC::JSGlobalObject *,JSC::JSValue)::{lambda(JSC::JSGlobalObject *,JSC::JSValue)#1}::operator()(a1, v10, a4, a5, a6, a7, a8, a9);
      return;
    }
    goto LABEL_22;
  }
  v19 = (int **)(v10 + 8);
  if ((*(_BYTE *)(v10 + 8) & 1) != 0)
    v19 = JSC::JSRopeString::resolveRope(v10, (JSC::JSGlobalObject *)a1, a3, a4, a10, a5, a6, a7, a8);
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14, a2, a3, a4, a5, a6, a7, a8))
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
  }
  else
  {
    v20 = *v19;
    if (*v19)
    {
      v21 = (char *)*((_QWORD *)v20 + 1);
      v22 = v20[1] | ((unint64_t)((v20[4] >> 2) & 1) << 32);
    }
    else
    {
      v21 = 0;
      v22 = 0x100000000;
    }
    JSC::IntlMathematicalValue::parseString(a1, v21, v22, a9, *(double *)a10.i64);
  }
}

void JSC::toIntlMathematicalValue(JSC::JSGlobalObject *,JSC::JSValue)::{lambda(JSC::JSGlobalObject *,JSC::JSValue)#1}::operator()(JSC::JSBigInt **a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  double v10;
  JSC::JSBigInt *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  int v17;
  WTF *v18;
  int v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  WTF *v29;
  WTF::StringImpl *v30;
  char v31;

  if (a2 >> 49)
  {
    v10 = (double)(int)a2;
    if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v10 = a2 - 0x2000000000000;
    goto LABEL_4;
  }
  v11 = a1[7];
  if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 3)
  {
    v12 = *(_DWORD *)(a2 + 8);
    if (!v12)
    {
      v10 = 0.0;
LABEL_4:
      *(double *)a8 = v10;
      *(_DWORD *)(a8 + 8) = 0;
      *(_DWORD *)(a8 + 16) = (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(a8 + 20) = v10 < 0.0;
      return;
    }
    if (v12 == 1)
    {
      v13 = *(_QWORD *)(a2 + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v13 = (v13 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v14 = *(_QWORD *)v13;
      if (!(v14 >> 53))
      {
        v10 = (double)v14;
        if (*(_BYTE *)(a2 + 16))
          v10 = -(double)v14;
        goto LABEL_4;
      }
    }
  }
  if (*(_DWORD *)(a2 + 8))
  {
    JSC::JSBigInt::toStringGeneric(a1[7], (JSC::VM *)a1, (JSC::JSGlobalObject *)a2, 10, a4, a5, a6, a7, (int **)&v30);
  }
  else
  {
    if (*((_BYTE *)v11 + 44265))
    {
      v15 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 5325) + 8);
      if ((v15 & 1) != 0)
        v16 = 0;
      else
        v16 = *(_DWORD **)(*((_QWORD *)v11 + 5325) + 8);
      *v16 += 2;
    }
    else
    {
      v31 = 48;
      WTF::AtomStringImpl::add((uint64_t)&v31, 1uLL, a3, a4, a5, a6, a7, &v30);
      v15 = v30;
    }
    v30 = v15;
  }
  if (!*((_DWORD *)v11 + 20))
    goto LABEL_23;
  v28 = *((_DWORD *)v11 + 20);
  if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::JSBigInt *)((char *)v11 + 64), 7u, a2, a3, a4, a5, a6, a7);
  if (*((_QWORD *)v11 + 2))
  {
    *(_QWORD *)a8 = 0;
    *(_QWORD *)(a8 + 8) = 0;
    *(_QWORD *)(a8 + 16) = 0;
  }
  else
  {
LABEL_23:
    v17 = *(unsigned __int8 *)(a2 + 16);
    WTF::String::ascii((WTF::String *)&v30, (int8x16_t **)&v29);
    v18 = v29;
    if (v29)
    {
      v19 = (*(_DWORD *)v29)++;
      *(_QWORD *)a8 = v18;
      *(_DWORD *)(a8 + 8) = 1;
      *(_DWORD *)(a8 + 16) = 0;
      *(_BYTE *)(a8 + 20) = v17 != 0;
      v29 = 0;
      if (v19)
        *(_DWORD *)v18 = v19;
      else
        WTF::fastFree((unint64_t)v18, a1, a2, a3, a4, a5, a6, a7);
    }
    else
    {
      *(_QWORD *)a8 = 0;
      *(_DWORD *)(a8 + 8) = 1;
      *(_DWORD *)(a8 + 16) = 0;
      *(_BYTE *)(a8 + 20) = v17 != 0;
      v29 = 0;
    }
  }
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, (WTF::AtomStringImpl *)a1, a2, a3, a4, a5, a6, a7);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
}

uint64_t WTF::dataLog<unsigned long long,char [2]>(_QWORD *a1, const char *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%llu", *a1);
  WTF::PrintStream::printf(v6, "%s", a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

unint64_t JSC::BooleanConstructor::create(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v11;
  uint64_t v12;
  JSC::VM *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t HostFunction;
  unint64_t SlowCase;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  unint64_t v30;
  unint64_t v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v11 = (unint64_t *)(a1 + 38288);
  v12 = *(_QWORD *)(a2 + 40);
  HostFunction = JSC::VM::getHostFunction((uint64_t *)a1, (uint64_t)JSC::callBooleanConstructor, 0, 27, (unint64_t)JSC::constructWithBooleanConstructor, 0, (WTF::StringImpl **)(*(_QWORD *)(a1 + 41952) + 544), a8);
  SlowCase = *v11;
  if (*v11 < v11[1])
    goto LABEL_2;
  SlowCase = v11[2];
  if ((SlowCase & 1) == 0)
  {
    v44 = *(_QWORD *)(SlowCase + 8) ^ v11[3];
    v11[1] = SlowCase + HIDWORD(v44);
    v11[2] = SlowCase + (int)v44;
LABEL_2:
    *v11 = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v13, v14, v15, v16, v17, v18, v19);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 38264, a1 + 192, 32, 0, 0, v45, v46, v47);
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  JSC::JSCallee::JSCallee(SlowCase, a1, v12, a2);
  *(_QWORD *)(SlowCase + 24) = HostFunction;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, a1, *(_QWORD *)(v11[458] + 2160), a3, 14, v22, v23, v24, v25);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, a1, *(_QWORD *)(v11[458] + 1768), 0xFFFE000000000001, 6, v26, v27, v28, v29);
  v30 = v11[458];
  v31 = *(_QWORD *)(v30 + 1968);
  v38 = JSC::jsString((JSC *)a1, (JSC::VM *)(v30 + 544), v32, v33, v34, v35, v36, v37);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, a1, v31, v38, 6, v39, v40, v41, v42);
  return SlowCase;
}

uint64_t JSC::callBooleanConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  if (*((_DWORD *)a2 + 8) == 1)
    return 6;
  v3 = *((_QWORD *)a2 + 6);
  if (v3 >= 0xFFFE000000000000)
    goto LABEL_16;
  if (v3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v3 & 0xFFFE000000000002) != 0)
    {
      if (v3 == 7)
        return 7;
      return 6;
    }
    v5 = *(unsigned __int8 *)(v3 + 5);
    if (v5 == 2)
    {
      v7 = *(_QWORD *)(v3 + 8);
      v3 += 16;
      if ((v7 & 1) == 0)
        v3 = v7 + 4;
      LODWORD(v3) = *(_DWORD *)v3;
    }
    else
    {
      if (v5 != 3)
      {
        v6 = 16 * (*(_DWORD *)v3 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v6 + 10) & 1) == 0 || *(JSC **)(v6 + 40) != this)
          return 7;
        return 6;
      }
      LODWORD(v3) = *(_DWORD *)(v3 + 8);
    }
LABEL_16:
    if ((_DWORD)v3)
      return 7;
    return 6;
  }
  result = 6;
  if (COERCE_DOUBLE(v3 - 0x2000000000000) != 0.0)
    return 7;
  return result;
}

unint64_t JSC::constructWithBooleanConstructor(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::JSGlobalObject *v15;
  JSC::JSGlobalObject *i;
  char **v17;
  unint64_t v18;
  unint64_t v19;
  JSC::JSObject *SubclassStructure;
  JSC::VM *v21;
  unint64_t result;
  int v23;
  int v24;
  uint64_t (*v25)(JSC::VM **);
  JSC::VM **v26;
  uint64_t (*v27)(JSC::VM **);
  JSC::VM **v28;
  JSC::JSGlobalObject *v29;
  unint64_t v30;
  JSC::VM *v31;
  unint64_t v32;
  char *v33;

  v9 = *(_QWORD *)(this + 56);
  if (*((_DWORD *)a2 + 8) == 1)
    goto LABEL_17;
  v10 = *((_QWORD *)a2 + 6);
  if (v10 >= 0xFFFE000000000000)
    goto LABEL_15;
  if (v10 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      if (v10 != 7)
        goto LABEL_17;
      goto LABEL_16;
    }
    v11 = *(unsigned __int8 *)(v10 + 5);
    if (v11 == 2)
    {
      v13 = *(_QWORD *)(v10 + 8);
      v10 += 16;
      if ((v13 & 1) == 0)
        v10 = v13 + 4;
      LODWORD(v10) = *(_DWORD *)v10;
    }
    else
    {
      if (v11 != 3)
      {
        v12 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v12 + 10) & 1) != 0 && *(_QWORD *)(v12 + 40) == this)
          goto LABEL_17;
        goto LABEL_16;
      }
      LODWORD(v10) = *(_DWORD *)(v10 + 8);
    }
LABEL_15:
    if (!(_DWORD)v10)
    {
LABEL_17:
      v14 = 6;
      goto LABEL_18;
    }
LABEL_16:
    v14 = 7;
    goto LABEL_18;
  }
  v14 = 6;
  if (COERCE_DOUBLE(v10 - 0x2000000000000) != 0.0)
    goto LABEL_16;
LABEL_18:
  v15 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v15 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v21 = *(JSC::VM **)(this + 1472);
    if ((v21 & 1) == 0)
      goto LABEL_32;
    v27 = *(uint64_t (**)(JSC::VM **))((unint64_t)v21 & 0xFFFFFFFFFFFFFFFCLL);
    v28 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v28 = (JSC::VM **)(this - 16);
    v31 = *v28;
    v32 = this;
    v33 = (char *)(this + 1472);
    SubclassStructure = (JSC::JSObject *)v27(&v31);
  }
  else
  {
    v31 = *(JSC::VM **)(this + 56);
    for (i = v15; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v29 + 2))
    {
      while (1)
      {
        v17 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v17 != &JSC::JSBoundFunction::s_info && v17 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v18 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_27;
      }
      v29 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v31, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v18 = 0;
LABEL_27:
    if (*(_DWORD *)(v9 + 80))
    {
      v24 = *(_DWORD *)(v9 + 80);
      if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
      {
        v30 = v18;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v18 = v30;
      }
      if (*(_QWORD *)(v9 + 16))
      {
        v21 = 0;
        goto LABEL_32;
      }
    }
    v19 = *(_QWORD *)(v18 + 1472);
    if ((v19 & 1) != 0)
    {
      v25 = *(uint64_t (**)(JSC::VM **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
      v26 = (JSC::VM **)(v18 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v18 & 8) != 0)
        v26 = (JSC::VM **)(v18 - 16);
      v31 = *v26;
      v32 = v18;
      v33 = (char *)(v18 + 1472);
      v19 = v25(&v31);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v15, (JSC::JSObject *)v19, a4, a5, a6, a7, a8);
  }
  v21 = SubclassStructure;
LABEL_32:
  if (*(_DWORD *)(v9 + 80))
  {
    v23 = *(_DWORD *)(v9 + 80);
    if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  result = JSC::BooleanObject::create((JSC::BooleanObject *)v9, v21, a3, (uint64_t)a4, a5, a6, a7, a8);
  *(_QWORD *)(result + 16) = v14;
  return result;
}

unint64_t JSC::constructBooleanFromImmediateBoolean(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::BooleanObject *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t (*v14)(_QWORD *);
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[3];

  v9 = *(JSC::BooleanObject **)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 1472);
  if ((v10 & 1) != 0)
  {
    v14 = *(uint64_t (**)(_QWORD *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    v15 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v15 = (_QWORD *)(a1 - 16);
    v18[0] = *v15;
    v18[1] = a1;
    v18[2] = a1 + 1472;
    v10 = v14(v18);
  }
  v11 = JSC::BooleanObject::create(v9, (JSC::VM *)v10, a3, a4, a5, a6, a7, a8);
  v12 = v11;
  *(_QWORD *)(v11 + 16) = a2;
  if (a2 && (a2 & 0xFFFE000000000002) == 0 && *((_DWORD *)v9 + 190) >= *(unsigned __int8 *)(v11 + 7))
  {
    v16 = (uint64_t)v9 + 192;
    v17 = v12;
    JSC::Heap::writeBarrierSlowPath(v16, v12);
    return v17;
  }
  return v12;
}

unint64_t JSC::BooleanObject::create(JSC::BooleanObject *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t result;
  int v12;
  unint64_t v13;

  v10 = (_QWORD *)*((_QWORD *)this + 5046);
  if (!v10)
    v10 = (_QWORD *)JSC::GCClient::Heap::BOOLeanObjectSpaceSlow((JSC::Heap **)this + 4694);
  result = v10[3];
  if (result < v10[4])
    goto LABEL_4;
  result = v10[5];
  if ((result & 1) == 0)
  {
    v13 = *(_QWORD *)(result + 8) ^ v10[6];
    v10[4] = result + HIDWORD(v13);
    v10[5] = result + (int)v13;
LABEL_4:
    v10[3] = result + 32;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase(v10, (char *)this + 192, 32, 0, 0);
LABEL_5:
  *(_DWORD *)result = 0;
  v12 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v12;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::BooleanObject::BooleanObject(uint64_t result, uint64_t a2, unint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

{
  int v3;

  v3 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

JSC::Structure *JSC::BrandedStructure::BrandedStructure(JSC::Structure *a1, JSC::VM *a2, unsigned int *a3)
{
  JSC::Structure *result;
  uint64_t v5;

  result = JSC::Structure::Structure(a1, a2, (JSC::Structure *)a3);
  v5 = a3[26];
  if ((_DWORD)v5)
    *(_DWORD *)(16 * v5) += 2;
  *((_DWORD *)result + 26) = v5;
  *((_DWORD *)result + 27) = a3[27] & 0xFFFFFFFE;
  *((_DWORD *)result + 4) |= 0x1000000u;
  return result;
}

unint64_t JSC::BrandedStructure::create(uint64_t a1, unint64_t a2, unint64_t a3, JSC::DeferredStructureTransitionWatchpointFire *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t SlowCase;
  void *v13;
  JSC::Structure *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  int v21;
  uint64_t v22;
  unsigned int *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;

  SlowCase = *(_QWORD *)(a1 + 40224);
  if (SlowCase < *(_QWORD *)(a1 + 40232))
    goto LABEL_2;
  SlowCase = *(_QWORD *)(a1 + 40240);
  if ((SlowCase & 1) == 0)
  {
    v30 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(a1 + 40248);
    *(_QWORD *)(a1 + 40232) = SlowCase + HIDWORD(v30);
    *(_QWORD *)(a1 + 40240) = SlowCase + (int)v30;
LABEL_2:
    *(_QWORD *)(a1 + 40224) = SlowCase + 128;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM((JSC *)a1, (JSC::VM *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 40200, a1 + 192, 128, 0, 0);
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure((JSC::Structure *)SlowCase, (JSC::VM *)a1, (JSC::Structure *)a2);
  if (a3)
    *(_DWORD *)a3 += 2;
  *(_DWORD *)(SlowCase + 104) = a3 >> 4;
  if ((*(_BYTE *)(a2 + 19) & 1) != 0)
    v21 = a2 >> 4;
  else
    v21 = 0;
  *(_DWORD *)(SlowCase + 108) = v21;
  *(_DWORD *)(SlowCase + 16) |= 0x1000000u;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v22 = *(_QWORD *)(a2 + 64);
  if (v22)
  {
    if (*(_BYTE *)(v22 + 5) != 1)
    {
      v24 = *(unsigned int **)(v22 + 72);
      if (v24)
      {
        v25 = *(_QWORD *)(SlowCase + 64);
        if (v25 && *(_BYTE *)(v25 + 5) != 1
          || (JSC::Structure::allocateRareData((JSC::Structure *)SlowCase, (JSC::VM *)a1, v14, v15, v16, v17, v18, v19),
              v25 = *(_QWORD *)(SlowCase + 64),
              (v24 = *(unsigned int **)(v22 + 72)) != 0))
        {
          do
            v26 = __ldaxr(v24);
          while (__stlxr(v26 + 1, v24));
        }
        v27 = *(unsigned int **)(v25 + 72);
        *(_QWORD *)(v25 + 72) = v24;
        if (v27)
        {
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            atomic_store(1u, v27);
            if ((v27[2] & 1) == 0)
              JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v27 + 2), v13, (uint64_t)v14, v15, v16, v17, v18, v19);
            WTF::fastFree((unint64_t)v27, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
          }
        }
      }
    }
  }
  JSC::Structure::fireStructureTransitionWatchpoint(a2, a4, v20, (uint64_t)v14, v15, v16, v17, v18, v19);
  return SlowCase;
}

unint64_t JSC::BufferMemoryHandle::fastMappedBytes(JSC::BufferMemoryHandle *this)
{
  return ((unint64_t)dword_1ECF4C6F4 << 16) + 0x100000000;
}

void *JSC::BufferMemoryManager::tryAllocateFastMemory(JSC::BufferMemoryManager *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *result;
  uint64_t v10;
  _QWORD v11[2];

  result = JSC::BufferMemoryManager::tryAllocateFastMemory(void)::$_0::operator()((uint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  v11[0] = result;
  v11[1] = v10;
  if (HIBYTE(word_1ECF4C6F0))
  {
    WTF::dataLog<char [20],JSC::BufferMemoryResult,char [10],JSC::BufferMemoryManager,char [2]>("Allocated virtual: ", (uint64_t)v11, "; state: ",
      this,
      "\n");
    return (void *)v11[0];
  }
  return result;
}

void *JSC::BufferMemoryManager::tryAllocateFastMemory(void)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  void *v18;

  if (__ldaxr((unsigned __int8 *)a1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)a1))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1);
LABEL_5:
  if (*(_DWORD *)(a1 + 20) >= *(_DWORD *)(a1 + 4))
  {
    v12 = 0;
  }
  else
  {
    v10 = dword_1ECF4C6F4;
    v11 = WTF::s_pageSize;
    if (!WTF::s_pageSize)
    {
      v11 = sysconf(29);
      WTF::s_pageSize = v11;
      if ((v11 & (v11 - 1)) != 0)
        goto LABEL_25;
      if (v11 > 0x4000)
      {
        __break(0xC471u);
        JUMPOUT(0x1988C635CLL);
      }
      if (((v11 + 0x3FFF) & -(uint64_t)v11) != 0x4000)
      {
LABEL_25:
        __break(0xC471u);
        JUMPOUT(0x1988C633CLL);
      }
    }
    v12 = bmalloc::api::tryLargeZeroedMemalignVirtual(v11, (v10 << 16) + 0x100000000, 0, 1, a5, a6, a7, a8);
    v18 = v12;
    if (v12)
    {
      v13 = (_QWORD *)(a1 + 8);
      v14 = *(unsigned int *)(a1 + 20);
      if ((_DWORD)v14 == *(_DWORD *)(a1 + 16))
      {
        v15 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v14 + 1, (unint64_t)&v18);
        v14 = *(unsigned int *)(a1 + 20);
        *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14) = *v15;
        v12 = v18;
      }
      else
      {
        *(_QWORD *)(*v13 + 8 * v14) = v12;
      }
      *(_DWORD *)(a1 + 20) = v14 + 1;
    }
  }
  v16 = __ldxr((unsigned __int8 *)a1);
  if (v16 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)a1))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a1, 0, a3, a4, a5, a6, a7, a8);
  return v12;
}

void JSC::BufferMemoryManager::freeFastMemory(JSC::BufferMemoryManager *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (__ldaxr(JSC::BufferMemoryManager::singleton(void)::manager))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)JSC::BufferMemoryManager::singleton(void)::manager);
    goto LABEL_4;
  }
  if (__stxr(1u, JSC::BufferMemoryManager::singleton(void)::manager))
    goto LABEL_3;
LABEL_4:
  Gigacage::freeVirtualPages(0, (unint64_t)this, ((unint64_t)dword_1ECF4C6F4 << 16) + 0x100000000, a4, a5, a6, a7, a8);
  WTF::Vector<void *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirst<void *>(this);
  v16 = __ldxr(JSC::BufferMemoryManager::singleton(void)::manager);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_8;
  }
  if (__stlxr(0, JSC::BufferMemoryManager::singleton(void)::manager))
LABEL_8:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(JSC::BufferMemoryManager::singleton(void)::manager, 0, v10, v11, v12, v13, v14, v15);
  if (HIBYTE(word_1ECF4C6F0))
    WTF::dataLog<char [23],JSC::BufferMemoryManager,char [2]>();
}

void *WTF::Vector<void *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirst<void *>(void *result)
{
  uint64_t v1;
  void *v2;

  if (dword_1EE342F9C)
  {
    if (*(void **)qword_1EE342F90 == result)
    {
      v1 = 0;
LABEL_4:
      result = memmove((void *)(qword_1EE342F90 + 8 * v1), (const void *)(qword_1EE342F90 + 8 * v1 + 8), qword_1EE342F90 + 8 * dword_1EE342F9C - (qword_1EE342F90 + 8 * v1 + 8));
      --dword_1EE342F9C;
    }
    else
    {
      v1 = 0;
      while (dword_1EE342F9C - 1 != v1)
      {
        v2 = *(void **)(qword_1EE342F90 + 8 + 8 * v1++);
        if (v2 == result)
          goto LABEL_4;
      }
    }
  }
  return result;
}

uint64_t JSC::BufferMemoryManager::tryAllocateGrowableBoundsCheckingMemory(JSC::BufferMemoryManager *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  void *v23;
  unint64_t v24;
  BOOL v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  _QWORD v34[2];

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_4;
LABEL_5:
  v11 = WTF::s_pageSize;
  if (!WTF::s_pageSize)
  {
    v11 = sysconf(29);
    WTF::s_pageSize = v11;
    if ((v11 & (v11 - 1)) != 0)
      goto LABEL_46;
    if (v11 > 0x4000)
    {
      __break(0xC471u);
      JUMPOUT(0x1988C66F4);
    }
    if (((v11 + 0x3FFF) & -(uint64_t)v11) != 0x4000)
    {
LABEL_46:
      __break(0xC471u);
      JUMPOUT(0x1988C66D4);
    }
  }
  v12 = bmalloc::api::tryLargeZeroedMemalignVirtual(v11, a2, 0, 1, a5, a6, a7, a8);
  v19 = (uint64_t)v12;
  if (!v12)
  {
    v28 = 2;
    goto LABEL_36;
  }
  v21 = (uint64_t **)((char *)this + 32);
  v20 = (uint64_t *)*((_QWORD *)this + 4);
  if (v20)
  {
    while (1)
    {
      while (1)
      {
        v22 = (uint64_t **)v20;
        v23 = (void *)v20[4];
        if (v23 == v12)
          break;
        if (v23 <= v12)
        {
          if (v23 >= v12)
            v27 = 1;
          else
            v27 = -1;
          if ((v27 & 0x80) == 0)
            goto LABEL_35;
          goto LABEL_27;
        }
LABEL_21:
        v20 = *v22;
        v21 = v22;
        if (!*v22)
          goto LABEL_31;
      }
      v24 = (unint64_t)v22[5];
      v25 = v24 == a2;
      if (v24 > a2)
        goto LABEL_21;
      if (v24 >= a2)
        v26 = 1;
      else
        v26 = -1;
      if (v25)
        v26 = 0;
      if ((v26 & 0x80) == 0)
      {
LABEL_35:
        v28 = 0;
        goto LABEL_36;
      }
LABEL_27:
      v20 = v22[1];
      if (!v20)
      {
        v21 = v22 + 1;
        goto LABEL_31;
      }
    }
  }
  v22 = (uint64_t **)((char *)this + 32);
LABEL_31:
  v29 = (uint64_t *)WTF::fastMalloc((WTF *)0x30);
  v29[4] = v19;
  v29[5] = a2;
  *v29 = 0;
  v29[1] = 0;
  v29[2] = (uint64_t)v22;
  *v21 = v29;
  v30 = **((_QWORD **)this + 3);
  if (v30)
  {
    *((_QWORD *)this + 3) = v30;
    v31 = *v21;
  }
  else
  {
    v31 = v29;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 4), v31);
  v28 = 0;
  ++*((_QWORD *)this + 5);
LABEL_36:
  v32 = __ldxr((unsigned __int8 *)this);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_40;
  }
  if (__stlxr(0, (unsigned __int8 *)this))
LABEL_40:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, v13, v14, v15, v16, v17, v18);
  v34[0] = v19;
  v34[1] = v28;
  if (HIBYTE(word_1ECF4C6F0))
  {
    WTF::dataLog<char [20],JSC::BufferMemoryResult,char [10],JSC::BufferMemoryManager,char [2]>("Allocated virtual: ", (uint64_t)v34, "; state: ",
      this,
      "\n");
    return v34[0];
  }
  return v19;
}

void JSC::BufferMemoryManager::freeGrowableBoundsCheckingMemory(unint64_t this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v11;
  uint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  char v17;
  unint64_t v18;
  BOOL v19;
  BOOL v20;
  _QWORD *v21;
  unint64_t v22;
  BOOL v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  if (__ldaxr(JSC::BufferMemoryManager::singleton(void)::manager))
  {
    __clrex();
  }
  else if (!__stxr(1u, JSC::BufferMemoryManager::singleton(void)::manager))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)JSC::BufferMemoryManager::singleton(void)::manager);
LABEL_5:
  if (this)
  {
    if (qword_1ECF4C038)
    {
      v11 = byte_1ECF4C022 || disablePrimitiveGigacageRequested == 0;
      if (v11 && (this & 0x3FFFFFFFFLL) + qword_1ECF4C038 != this)
      {
        __break(0xC471u);
        JUMPOUT(0x1988C6904);
      }
    }
    bmalloc::api::freeLargeVirtual(this, a2, 1, a4, a5, a6, a7, a8);
  }
  if ((_QWORD)xmmword_1EE342FA8)
  {
    v13 = (uint64_t *)&xmmword_1EE342FA8;
    v14 = (_QWORD *)xmmword_1EE342FA8;
    do
    {
      v15 = v14[4];
      v16 = v15 == this;
      if (v15 >= this)
        v17 = 1;
      else
        v17 = -1;
      if (v16)
      {
        v18 = v14[5];
        v19 = v18 == a2;
        v17 = v18 >= a2 ? 1 : -1;
        if (v19)
          v17 = 0;
      }
      v20 = (v17 & 0x80) == 0;
      if (v17 < 0)
        v21 = v14 + 1;
      else
        v21 = v14;
      if (v20)
        v13 = v14;
      v14 = (_QWORD *)*v21;
    }
    while (*v21);
    if (v13 != (uint64_t *)&xmmword_1EE342FA8)
    {
      v22 = v13[4];
      v23 = v22 == this;
      if (v22 <= this)
        v24 = 1;
      else
        v24 = -1;
      if (v23)
      {
        v25 = v13[5];
        v26 = v25 == a2;
        v27 = v25 > a2;
        v24 = -1;
        if (!v27)
          v24 = 1;
        if (v26)
          v24 = 0;
      }
      if ((v24 & 0x80) == 0)
      {
        v28 = (uint64_t *)v13[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (uint64_t *)*v28;
          }
          while (v28);
        }
        else
        {
          v30 = v13;
          do
          {
            v29 = (uint64_t *)v30[2];
            v11 = *v29 == (_QWORD)v30;
            v30 = v29;
          }
          while (!v11);
        }
        if ((uint64_t *)qword_1EE342FA0 == v13)
          qword_1EE342FA0 = (uint64_t)v29;
        --*((_QWORD *)&xmmword_1EE342FA8 + 1);
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)xmmword_1EE342FA8, v13);
        WTF::fastFree((unint64_t)v13, v31, v32, v33, v34, v35, v36, v37);
      }
    }
  }
  v38 = __ldxr(JSC::BufferMemoryManager::singleton(void)::manager);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_58;
  }
  if (__stlxr(0, JSC::BufferMemoryManager::singleton(void)::manager))
LABEL_58:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(JSC::BufferMemoryManager::singleton(void)::manager, 0, a3, a4, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C6F0))
    WTF::dataLog<char [23],JSC::BufferMemoryManager,char [2]>();
}

uint64_t JSC::BufferMemoryManager::isInGrowableOrFastMemory(JSC::BufferMemoryManager *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  BOOL v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
LABEL_5:
  v11 = *((unsigned int *)this + 5);
  if ((_DWORD)v11)
  {
    v12 = (unint64_t *)*((_QWORD *)this + 1);
    v13 = 8 * v11;
    while (*v12 > a2 || *v12 + ((unint64_t)dword_1ECF4C6F4 << 16) + 0x100000000 < a2)
    {
      ++v12;
      v13 -= 8;
      if (!v13)
        goto LABEL_12;
    }
    goto LABEL_40;
  }
LABEL_12:
  v15 = (char *)*((_QWORD *)this + 3);
  v16 = (char *)this + 32;
  if (v15 != (char *)this + 32)
  {
    v17 = 0;
    v18 = (char *)*((_QWORD *)this + 3);
    do
    {
      v19 = (char *)*((_QWORD *)v18 + 1);
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = *(char **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (char *)*((_QWORD *)v18 + 2);
          v21 = *(_QWORD *)v20 == (_QWORD)v18;
          v18 = v20;
        }
        while (!v21);
      }
      ++v17;
      v18 = v20;
    }
    while (v20 != v16);
    do
    {
      v22 = v17 >> 1;
      v23 = v15;
      if (v17 != 1)
      {
        v24 = v17 >> 1;
        v25 = v15;
        do
        {
          v26 = (char *)*((_QWORD *)v25 + 1);
          if (v26)
          {
            do
            {
              v23 = v26;
              v26 = *(char **)v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              v23 = (char *)*((_QWORD *)v25 + 2);
              v21 = *(_QWORD *)v23 == (_QWORD)v25;
              v25 = v23;
            }
            while (!v21);
          }
          v25 = v23;
        }
        while (v24-- > 1);
      }
      if (*((_QWORD *)v23 + 5) + *((_QWORD *)v23 + 4) <= a2)
      {
        v28 = (char *)*((_QWORD *)v23 + 1);
        if (v28)
        {
          do
          {
            v15 = v28;
            v28 = *(char **)v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v15 = (char *)*((_QWORD *)v23 + 2);
            v21 = *(_QWORD *)v15 == (_QWORD)v23;
            v23 = v15;
          }
          while (!v21);
        }
        v22 = v17 + ~v22;
      }
      v17 = v22;
    }
    while (v22);
  }
  if (v15 != v16)
  {
    v29 = *((_QWORD *)v15 + 4);
    if (v29 <= a2 && *((_QWORD *)v15 + 5) + v29 > a2)
    {
LABEL_40:
      v30 = 1;
      goto LABEL_42;
    }
  }
  v30 = 0;
LABEL_42:
  v31 = __ldxr((unsigned __int8 *)this);
  if (v31 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)this))
      return v30;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
  return v30;
}

uint64_t JSC::BufferMemoryManager::tryAllocatePhysicalBytes(JSC::BufferMemoryManager *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  const char *v12;
  uint64_t v13;
  JSC::BufferMemoryManager *v14;
  _QWORD *v15;
  uint64_t v16;

  v14 = this;
  v15 = &v16;
  v16 = a2;
  v9 = JSC::BufferMemoryManager::tryAllocatePhysicalBytes(unsigned long)::$_0::operator()((uint64_t)&v14, a2, a3, a4, a5, a6, a7, a8);
  v10 = v9;
  if (!HIBYTE(word_1ECF4C6F0))
    return v10;
  switch((_DWORD)v9)
  {
    case 0:
      v12 = "Success";
      v13 = 8;
      goto LABEL_9;
    case 2:
      v12 = "SyncTryToReclaimMemory";
      v13 = 23;
      goto LABEL_9;
    case 1:
      v12 = "SuccessAndNotifyMemoryPressure";
      v13 = 31;
LABEL_9:
      v14 = (JSC::BufferMemoryManager *)v12;
      v15 = (_QWORD *)v13;
      WTF::dataLog<char [21],unsigned long,char [3],WTF::ASCIILiteral,char [10],JSC::BufferMemoryManager,char [2]>("Allocated physical: ", &v16, ", ", (uint64_t)&v14, "; state: ",
        this,
        "\n");
      return v10;
  }
  result = 78;
  __break(0xC471u);
  return result;
}

uint64_t JSC::BufferMemoryManager::tryAllocatePhysicalBytes(unsigned long)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  char v23;
  char **v24;
  char *v25;

  v9 = *(unsigned __int8 **)a1;
  if (__ldaxr(*(unsigned __int8 **)a1))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_5:
  v11 = *((_QWORD *)v9 + 6);
  v12 = **(_QWORD **)(a1 + 8);
  v13 = atomic_load(&WTF::ramSize(void)::onceFlag);
  if (v13 != -1)
  {
    v25 = &v23;
    v24 = &v25;
    std::__call_once(&WTF::ramSize(void)::onceFlag, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ramSize(void)::$_0 &&>>);
  }
  if ((unint64_t)WTF::ramSize(void)::ramSize > 0x5555555555555555)
    goto LABEL_12;
  v14 = v12 + v11;
  v15 = atomic_load(&WTF::ramSize(void)::onceFlag);
  if (v15 != -1)
  {
    v25 = &v23;
    v24 = &v25;
    std::__call_once(&WTF::ramSize(void)::onceFlag, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ramSize(void)::$_0 &&>>);
  }
  if (v14 <= 3 * WTF::ramSize(void)::ramSize)
  {
LABEL_12:
    v17 = *((_QWORD *)v9 + 6) + **(_QWORD **)(a1 + 8);
    *((_QWORD *)v9 + 6) = v17;
    v18 = atomic_load(&WTF::ramSize(void)::onceFlag);
    if (v18 != -1)
    {
      v25 = &v23;
      v24 = &v25;
      std::__call_once(&WTF::ramSize(void)::onceFlag, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ramSize(void)::$_0 &&>>);
    }
    if ((unint64_t)WTF::ramSize(void)::ramSize > 0x5555555555555555)
    {
      v20 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v19 = atomic_load(&WTF::ramSize(void)::onceFlag);
      if (v19 != -1)
      {
        v25 = &v23;
        v24 = &v25;
        std::__call_once(&WTF::ramSize(void)::onceFlag, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ramSize(void)::$_0 &&>>);
      }
      v20 = (unint64_t)(3 * WTF::ramSize(void)::ramSize) >> 1;
    }
    v16 = v17 >= v20;
  }
  else
  {
    v16 = 2;
  }
  v21 = __ldxr(v9);
  if (v21 == 1)
  {
    if (!__stlxr(0, v9))
      return v16;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
  return v16;
}

void JSC::BufferMemoryManager::freePhysicalBytes(JSC::BufferMemoryManager *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;

  v11 = a2;
  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_3;
LABEL_4:
  *((_QWORD *)this + 6) -= v11;
  v10 = __ldxr((unsigned __int8 *)this);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_8;
  }
  if (__stlxr(0, (unsigned __int8 *)this))
LABEL_8:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C6F0))
    WTF::dataLog<char [17],unsigned long,char [10],JSC::BufferMemoryManager,char [2]>("Freed physical: ", &v11, "; state: ",
      this,
      "\n");
}

uint64_t JSC::BufferMemoryManager::dump(JSC::BufferMemoryManager *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v4 = *((unsigned int *)this + 5);
  v5 = atomic_load(&WTF::ramSize(void)::onceFlag);
  if (v5 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::ramSize(void)::onceFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ramSize(void)::$_0 &&>>);
  }
  if ((unint64_t)WTF::ramSize(void)::ramSize > 0x5555555555555555)
  {
    v7 = -1;
  }
  else
  {
    v6 = atomic_load(&WTF::ramSize(void)::onceFlag);
    if (v6 != -1)
    {
      v12 = &v10;
      v11 = &v12;
      std::__call_once(&WTF::ramSize(void)::onceFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ramSize(void)::$_0 &&>>);
    }
    v7 = 3 * WTF::ramSize(void)::ramSize;
  }
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v8, "%s", "fast memories =  ");
  WTF::PrintStream::printf(v8, "%lu", v4);
  WTF::PrintStream::printf(v8, "%s", "/");
  WTF::PrintStream::printf(v8, "%u", *((_DWORD *)this + 1));
  WTF::PrintStream::printf(v8, "%s", ", bytes = ");
  WTF::PrintStream::printf(v8, "%lu", *((_QWORD *)this + 6));
  WTF::PrintStream::printf(v8, "%s", "/");
  WTF::PrintStream::printf(v8, "%lu", v7);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::BufferMemoryManager::singleton(void)::onceFlag);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::BufferMemoryManager::singleton(void)::onceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::BufferMemoryManager::singleton(void)::$_0 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::BufferMemoryHandle::nullBasePointer(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::BufferMemoryHandle::nullBasePointer(void)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::BufferMemoryHandle::nullBasePointer(void)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::BufferMemoryHandle::nullBasePointer(void)::$_0 &&>>);
  }
}

void JSC::BufferMemoryHandle::~BufferMemoryHandle(JSC::BufferMemoryHandle *this)
{
  uint64_t v2;
  JSC::BufferMemoryManager *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  const char *v33;
  int *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;

  v2 = *((_QWORD *)this + 1);
  if (v2
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v2 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    v3 = (JSC::BufferMemoryManager *)JSC::BufferMemoryHandle::memory(this);
    std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v43);
    v4 = atomic_load((unint64_t *)this + 2);
    JSC::BufferMemoryManager::freePhysicalBytes((JSC::BufferMemoryManager *)JSC::BufferMemoryManager::singleton(void)::manager, v4, v5, v6, v7, v8, v9, v10);
    if (*((_BYTE *)this + 6))
    {
      if (*((_BYTE *)this + 6) != 1)
        return;
      if (WTF::OSAllocator::protect(v3, ((unint64_t)dword_1ECF4C6F4 << 16) + 0x100000000, 1, 1))
      {
        std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v43);
        JSC::BufferMemoryManager::freeFastMemory(v3, v17, v18, v19, v20, v21, v22, v23);
        return;
      }
      v32 = __error();
      WTF::safeStrerror((WTF *)*v32, &v42);
      if (v42)
        v33 = (const char *)(v42 + 16);
      else
        v33 = 0;
    }
    else
    {
      if (!*((_BYTE *)this + 5))
      {
        std::call_once[abi:sn180100]<JSC::BufferMemoryHandle::nullBasePointer(void)::$_0>((uint64_t)&v43);
        if (v3 != (JSC::BufferMemoryManager *)JSC::BufferMemoryHandle::nullBasePointer(void)::result
          || (v16 = atomic_load((unint64_t *)this + 2)) != 0)
        {
          v31 = atomic_load((unint64_t *)this + 2);
          Gigacage::freeVirtualPages(0, (unint64_t)v3, v31, v11, v12, v13, v14, v15);
        }
        return;
      }
      if (*((_BYTE *)this + 5) != 1)
        return;
      std::call_once[abi:sn180100]<JSC::BufferMemoryHandle::nullBasePointer(void)::$_0>((uint64_t)&v43);
      v24 = *((_QWORD *)this + 3);
      if (v3 == (JSC::BufferMemoryManager *)JSC::BufferMemoryHandle::nullBasePointer(void)::result && !v24)
        return;
      if (WTF::OSAllocator::protect(v3, v24, 1, 1))
      {
        std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v43);
        JSC::BufferMemoryManager::freeGrowableBoundsCheckingMemory((unint64_t)v3, *((_QWORD *)this + 3), v25, v26, v27, v28, v29, v30);
        return;
      }
      v34 = __error();
      WTF::safeStrerror((WTF *)*v34, &v42);
      if (v42)
        v33 = (const char *)(v42 + 16);
      else
        v33 = 0;
    }
    v43 = v33;
    WTF::dataLogLn<char [18],char const*>("mprotect failed: ", &v43);
    WTF::CString::~CString((WTF::CString *)&v42, v35, v36, v37, v38, v39, v40, v41);
    __break(0xC471u);
    JUMPOUT(0x1988C7268);
  }
}

uint64_t JSC::BufferMemoryHandle::memory(JSC::BufferMemoryHandle *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    return (result & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  return result;
}

uint64_t JSC::BytecodeCacheError::operator=(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _DWORD *v20;
  int v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v10 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v10 != -1)
  {
    if (!(_DWORD)v10)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v11 = *(_OWORD *)(a2 + 16);
      v12 = *(_OWORD *)(a2 + 32);
      v13 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 32) = v12;
      *(_OWORD *)(a1 + 48) = v13;
      *(_OWORD *)(a1 + 16) = v11;
      v14 = *(_DWORD **)(a2 + 72);
      if (v14)
        *v14 += 2;
      v15 = *(WTF::StringImpl **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v14;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::~StringImpl(v15, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
        }
        else
        {
          *(_DWORD *)v15 -= 2;
        }
      }
      v16 = *(_DWORD *)(a2 + 80);
      *(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 84);
      *(_DWORD *)(a1 + 80) = v16;
      return a1;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC11ParserErrorENS6_18BytecodeCacheError13StandardErrorENS8_10WriteErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v10])(&v31, a1);
  }
  *(_DWORD *)(a1 + 88) = -1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v17 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)(a2 + 32);
  v19 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v18;
  *(_OWORD *)(a1 + 48) = v19;
  *(_OWORD *)(a1 + 16) = v17;
  v20 = *(_DWORD **)(a2 + 72);
  if (v20)
    *v20 += 2;
  *(_QWORD *)(a1 + 72) = v20;
  v21 = *(_DWORD *)(a2 + 80);
  *(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = v21;
  *(_DWORD *)(a1 + 88) = 0;
  return a1;
}

_DWORD *JSC::BytecodeCacheError::operator=(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = a1[22];
  if ((_DWORD)v4 == -1)
    goto LABEL_5;
  if ((_DWORD)v4 != 1)
  {
    ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC11ParserErrorENS6_18BytecodeCacheError13StandardErrorENS8_10WriteErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v4])(&v6, a1);
LABEL_5:
    a1[22] = -1;
    *a1 = *a2;
    a1[22] = 1;
    return a1;
  }
  *a1 = *a2;
  return a1;
}

uint64_t JSC::BytecodeCacheError::operator=(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v4 == -1)
    goto LABEL_5;
  if ((_DWORD)v4 != 2)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC11ParserErrorENS6_18BytecodeCacheError13StandardErrorENS8_10WriteErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v4])(&v6, a1);
LABEL_5:
    *(_DWORD *)(a1 + 88) = -1;
    *(_OWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 88) = 2;
    return a1;
  }
  *(_OWORD *)a1 = *a2;
  return a1;
}

uint64_t JSC::BytecodeCacheError::isValid(JSC::BytecodeCacheError *this)
{
  uint64_t v1;
  JSC::BytecodeCacheError *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 22);
  if ((_DWORD)v1 == -1)
  {
    v3 = (JSC::BytecodeCacheError *)std::__throw_bad_variant_access[abi:sn180100]();
    return JSC::BytecodeCacheError::message(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, JSC::BytecodeCacheError *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC18BytecodeCacheError7isValidEvE3__0JEEEEEJRKNS0_6__implIJNS8_11ParserErrorENS9_13StandardErrorENS9_10WriteErrorEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, this);
  }
}

uint64_t *JSC::BytecodeCacheError::message(JSC::BytecodeCacheError *this)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 22);
  if ((_DWORD)v1 == -1)
  {
    v3 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return JSC::CachePayload::makeMappedPayload(v3, v4);
  }
  else
  {
    v6 = &v5;
    return (uint64_t *)((uint64_t (*)(char **, JSC::BytecodeCacheError *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC18BytecodeCacheError7messageEvE3__0JEEEEEJRKNS0_6__implIJNS8_11ParserErrorENS9_13StandardErrorENS9_10WriteErrorEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v6, this);
  }
}

uint64_t *JSC::CachePayload::makeMappedPayload@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = *result;
  *result = 0;
  v3 = *((_DWORD *)result + 2);
  *((_DWORD *)result + 2) = 0;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

void JSC::CachePayload::makeMallocPayload(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = *a1;
  *a1 = 0;
  *(_QWORD *)a9 = v9;
  *(_QWORD *)(a9 + 8) = a2;
  *(_DWORD *)(a9 + 16) = 1;
  WTF::fastFree(0, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(0, v10, v11, v12, v13, v14, v15, v16);
}

void JSC::CachePayload::makeEmptyPayload(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_DWORD *)(a8 + 16) = 1;
  WTF::fastFree(0, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t JSC::CachePayload::CachePayload(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  v10 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v10 == -1)
  {
    *(_DWORD *)(a1 + 16) = -1;
  }
  else
  {
    v21 = a1;
    ((void (*)(uint64_t *, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRSF_SJ_EEEDcmSL_DpOT0____fdiagonal[v10])(&v21, a1, a2);
  }
  v11 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v11 == -1)
    goto LABEL_8;
  if ((_DWORD)v11 != 1)
  {
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v11])(&v22, a2);
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    *((_DWORD *)a2 + 4) = 1;
    return a1;
  }
  v12 = *a2;
  *a2 = 0;
  WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(0, v13, v14, v15, v16, v17, v18, v19);
  a2[1] = 0;
  return a1;
}

{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  v10 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v10 == -1)
  {
    *(_DWORD *)(a1 + 16) = -1;
  }
  else
  {
    v21 = a1;
    ((void (*)(uint64_t *, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRSF_SJ_EEEDcmSL_DpOT0____fdiagonal[v10])(&v21, a1, a2);
  }
  v11 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v11 == -1)
    goto LABEL_8;
  if ((_DWORD)v11 != 1)
  {
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v11])(&v22, a2);
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    *((_DWORD *)a2 + 4) = 1;
    return a1;
  }
  v12 = *a2;
  *a2 = 0;
  WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(0, v13, v14, v15, v16, v17, v18, v19);
  a2[1] = 0;
  return a1;
}

void JSC::CachePayload::~CachePayload(JSC::CachePayload *this)
{
  uint64_t v2;
  char v3;

  v2 = *((unsigned int *)this + 4);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, JSC::CachePayload *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v2])(&v3, this);
  *((_DWORD *)this + 4) = -1;
}

{
  uint64_t v2;
  char v3;

  v2 = *((unsigned int *)this + 4);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, JSC::CachePayload *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v2])(&v3, this);
  *((_DWORD *)this + 4) = -1;
}

uint64_t JSC::CachePayload::data(JSC::CachePayload *this)
{
  uint64_t v1;
  JSC::CachePayload *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (JSC::CachePayload *)std::__throw_bad_variant_access[abi:sn180100]();
    return JSC::CachePayload::size(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, JSC::CachePayload *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, this);
  }
}

uint64_t JSC::CachePayload::size(JSC::CachePayload *this)
{
  uint64_t v1;
  JSC *v3;
  JSC::JSGlobalObject *v4;
  JSC::CallFrame *v5;
  char v6;
  char *v7;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (JSC *)std::__throw_bad_variant_access[abi:sn180100]();
    return JSC::BOOLeanProtoFuncToString(v3, v4, v5);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(char **, JSC::CachePayload *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v7, this);
  }
}

uint64_t JSC::BOOLeanProtoFuncToString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v7;
  JSC::VM *v8;

  v4 = (_QWORD *)(*((_QWORD *)this + 7) + 41992);
  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v5 = *((_QWORD *)a2 + 5);
  if (v5 == 6)
    return *v4;
  if (v5 == 7)
    return v4[9];
  v7 = JSC::jsDynamicCast<JSC::BooleanObject *>(v5);
  if (v7)
  {
    if (*(_QWORD *)(v7 + 16) == 6)
      return *v4;
    return v4[9];
  }
  return JSC::throwTypeError(this, &v8);
}

uint64_t JSC::BOOLeanProtoFuncValueOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  JSC::VM *v10;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  result = *((_QWORD *)a2 + 5);
  if ((result & 0xFFFFFFFFFFFFFFFELL) != 6)
  {
    if ((result & 0xFFFE000000000002) != 0)
      return JSC::throwTypeError(this, &v10);
    v5 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
    v6 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
    v7 = (char **)(16 * v5);
    if ((_DWORD)v5)
      v8 = v7 == &JSC::BooleanObject::s_info;
    else
      v8 = 1;
    if (!v8)
    {
      do
      {
        v7 = (char **)v7[2];
        v6 = v7 != 0;
      }
      while (v7 != &JSC::BooleanObject::s_info && v7 != 0);
    }
    if (!v6)
      return JSC::throwTypeError(this, &v10);
    else
      return *(_QWORD *)(result + 16);
  }
  return result;
}

unint64_t JSC::jsDynamicCast<JSC::BooleanObject *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &JSC::BooleanObject::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &JSC::BooleanObject::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS8_9MallocPtrIhNS8_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)a2;
  if (*(_QWORD *)a2)
    return (void *)munmap(result, *(unsigned int *)(a2 + 8));
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS8_9MallocPtrIhNS8_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::fastFree(*a2, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS8_9MallocPtrIhNS8_10FastMallocEEEmEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSA_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v6 = *a3;
      *a3 = 0;
      *(_QWORD *)a2 = v6;
      LODWORD(v6) = *((_DWORD *)a3 + 2);
      *((_DWORD *)a3 + 2) = 0;
      *(_DWORD *)(a2 + 8) = v6;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)v4 = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(v4 + 8) = v7;
  *(_DWORD *)(v4 + 16) = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS8_9MallocPtrIhNS8_10FastMallocEEEmEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSA_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  v9 = *a1;
  v10 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v10 != -1)
  {
    if ((_DWORD)v10 == 1)
    {
      v12 = *a3;
      *a3 = 0;
      v13 = *a2;
      *a2 = v12;
      WTF::fastFree(v13, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      a2[1] = a3[1];
      return;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v10])(&v16, v9);
  }
  v14 = *a3;
  v15 = a3[1];
  *a3 = 0;
  *(_QWORD *)v9 = v14;
  *(_QWORD *)(v9 + 8) = v15;
  *(_DWORD *)(v9 + 16) = 1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC11CacheUpdate12GlobalUpdateENS9_14FunctionUpdateEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  char v20;

  *(_QWORD *)a2 = 0;
  a2[2] = 0;
  a2[4] = 0;
  v9 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v9 == -1)
  {
    a2[4] = -1;
  }
  else
  {
    v19 = a2;
    ((void (*)(_DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRSF_SJ_EEEDcmSL_DpOT0____fdiagonal[v9])(&v19);
  }
  v10 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v10 != -1)
  {
    if ((_DWORD)v10 == 1)
    {
      v11 = *(_QWORD *)a3;
      *(_QWORD *)a3 = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(0, v12, v13, v14, v15, v16, v17, v18);
      *(_QWORD *)(a3 + 8) = 0;
      return;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v10])(&v20, a3);
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC11CacheUpdate12GlobalUpdateENS9_14FunctionUpdateEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;

  v9 = *(_QWORD *)a3;
  *(_QWORD *)((char *)a2 + 6) = *(_QWORD *)(a3 + 6);
  a2[2] = 0;
  *a2 = v9;
  v10 = (_QWORD *)(a3 + 16);
  *((_DWORD *)a2 + 6) = 0;
  *((_DWORD *)a2 + 8) = 0;
  v11 = *(unsigned int *)(a3 + 32);
  if ((_DWORD)v11 == -1)
  {
    *((_DWORD *)a2 + 8) = -1;
  }
  else
  {
    v21 = (char *)(a2 + 2);
    ((void (*)(char **, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRSF_SJ_EEEDcmSL_DpOT0____fdiagonal[v11])(&v21, a2 + 2, a3 + 16);
  }
  v12 = *(unsigned int *)(a3 + 32);
  if ((_DWORD)v12 != -1)
  {
    if ((_DWORD)v12 == 1)
    {
      v13 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = 0;
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(0, v14, v15, v16, v17, v18, v19, v20);
      *(_QWORD *)(a3 + 24) = 0;
      return;
    }
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v12])(&v22, v10);
  }
  *v10 = 0;
  v10[1] = 0;
  *(_DWORD *)(a3 + 32) = 1;
}

uint64_t WTF::dataLog<char [20],JSC::BufferMemoryResult,char [10],JSC::BufferMemoryManager,char [2]>(const char *a1, uint64_t a2, const char *a3, JSC::BufferMemoryManager *a4, const char *a5)
{
  unint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  const void *v13;
  int v14;
  char *v15;
  int v16;
  WTF::PrintStream *v17;
  WTF::PrintStream *v18;
  float v19;
  uint64_t result;
  char v21;
  char **v22;
  char *v23;
  int v24;

  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v23 = &v21;
    v22 = &v23;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v11 = WTF::s_file;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v12, "%s", a1);
  v13 = *(const void **)a2;
  v14 = *(_DWORD *)(a2 + 8);
  if (v14)
  {
    if (v14 == 2)
    {
      v15 = "SyncTryToReclaimMemory";
      v16 = 23;
    }
    else
    {
      if (v14 != 1)
      {
        result = 78;
        __break(0xC471u);
        return result;
      }
      v15 = "SuccessAndNotifyMemoryPressure";
      v16 = 31;
    }
  }
  else
  {
    v15 = "Success";
    v16 = 8;
  }
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
  WTF::PrintStream::printf(v17, "%s", "{basePtr = ");
  WTF::PrintStream::printf(v17, "%p", v13);
  WTF::PrintStream::printf(v17, "%s", ", kind = ");
  v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v17 + 32))(v17);
  if (v15)
  {
    WTF::StringImpl::utf8ForCharacters(v15, (v16 - 1), (uint64_t)&v23, v19);
  }
  else
  {
    WTF::CString::CString((uint64_t *)&v23, &str_25, 0);
    v24 = 0;
  }
  WTF::printExpectedCStringHelper(v18, "StringView", &v23);
  if (v24 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v24])(&v22, &v23);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v17 + 40))(v17);
  WTF::PrintStream::printf(v17, "%s", "}");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
  WTF::PrintStream::printf(v12, "%s", a3);
  JSC::BufferMemoryManager::dump(a4, v12);
  WTF::PrintStream::printf(v12, "%s", a5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
}

uint64_t WTF::dataLog<char [23],JSC::BufferMemoryManager,char [2]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "Freed virtual; state: ");
  JSC::BufferMemoryManager::dump((JSC::BufferMemoryManager *)&JSC::BufferMemoryManager::singleton(void)::manager, v2);
  WTF::PrintStream::printf(v2, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [21],unsigned long,char [3],WTF::ASCIILiteral,char [10],JSC::BufferMemoryManager,char [2]>(const char *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5, JSC::BufferMemoryManager *a6, const char *a7)
{
  unint64_t v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  char *v17;
  uint64_t v18;
  WTF::PrintStream *v19;
  float v20;
  unsigned int v21;
  char v23;
  char **v24;
  char *v25;
  int v26;

  v14 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v14 != -1)
  {
    v25 = &v23;
    v24 = &v25;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v15 = WTF::s_file;
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v16, "%s", a1);
  WTF::PrintStream::printf(v16, "%lu", *a2);
  WTF::PrintStream::printf(v16, "%s", a3);
  v17 = *(char **)a4;
  v18 = *(_QWORD *)(a4 + 8);
  v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 32))(v16);
  if (v17)
  {
    v21 = v18 - 1;
    if (!v18)
      v21 = 0;
    WTF::StringImpl::utf8ForCharacters(v17, v21, (uint64_t)&v25, v20);
  }
  else
  {
    WTF::CString::CString((uint64_t *)&v25, &str_25, 0);
    v26 = 0;
  }
  WTF::printExpectedCStringHelper(v19, "StringView", &v25);
  if (v26 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v26])(&v24, &v25);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 40))(v16);
  WTF::PrintStream::printf(v16, "%s", a5);
  JSC::BufferMemoryManager::dump(a6, v16);
  WTF::PrintStream::printf(v16, "%s", a7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
}

uint64_t WTF::dataLog<char [17],unsigned long,char [10],JSC::BufferMemoryManager,char [2]>(const char *a1, _QWORD *a2, const char *a3, JSC::BufferMemoryManager *a4, const char *a5)
{
  unint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  char v14;
  char **v15;
  char *v16;

  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v11 = WTF::s_file;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v12, "%s", a1);
  WTF::PrintStream::printf(v12, "%lu", *a2);
  WTF::PrintStream::printf(v12, "%s", a3);
  JSC::BufferMemoryManager::dump(a4, v12);
  WTF::PrintStream::printf(v12, "%s", a5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
}

double std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::BufferMemoryManager::singleton(void)::$_0 &&>>()
{
  double result;

  result = 0.0;
  JSC::BufferMemoryManager::singleton(void)::manager = 0u;
  dword_1EE342F8C = dword_1ECF4C6FC;
  qword_1EE342F90 = 0;
  unk_1EE342F98 = 0;
  unk_1EE342FB8 = 0;
  xmmword_1EE342FA8 = 0uLL;
  qword_1EE342FA0 = (uint64_t)&xmmword_1EE342FA8;
  return result;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::BufferMemoryHandle::nullBasePointer(void)::$_0 &&>>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;

  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
  {
    JSC::BufferMemoryHandle::nullBasePointer(void)::result = qword_1ECF4C038;
  }
  else
  {
    v8 = WTF::fastAlignedMalloc(0x10000uLL, 0x10000uLL, a3, a4, a5, a6, a7, a8);
    JSC::BufferMemoryHandle::nullBasePointer(void)::result = (uint64_t)v8;
    while (madvise(v8, 0x10000uLL, 7) == -1 && *__error() == 35)
      ;
  }
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::BytecodeCacheError::isValid(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,JSC::ParserError,JSC::BytecodeCacheError::StandardError,JSC::BytecodeCacheError::WriteError> const&>(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 84) != 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::BytecodeCacheError::isValid(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,JSC::ParserError,JSC::BytecodeCacheError::StandardError,JSC::BytecodeCacheError::WriteError> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::BytecodeCacheError::isValid(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,JSC::ParserError,JSC::BytecodeCacheError::StandardError,JSC::BytecodeCacheError::WriteError> const&>()
{
  return 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::BytecodeCacheError::message(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,JSC::ParserError,JSC::BytecodeCacheError::StandardError,JSC::BytecodeCacheError::WriteError> const&>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(a1 + 72);
  if (v2)
    *v2 += 2;
  *a2 = v2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::BytecodeCacheError::message(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,JSC::ParserError,JSC::BytecodeCacheError::StandardError,JSC::BytecodeCacheError::WriteError> const&>(int *a1@<X1>, int **a2@<X8>)
{
  int v3;
  unint64_t v4;
  char *v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int *v15;
  char *v16;

  v3 = *a1;
  v4 = WTF::fastMalloc((WTF *)0x411);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 1024;
  v5 = (char *)(v4 + 16);
  *(_BYTE *)(v4 + 1040) = 0;
  if (strerror_r(v3, (char *)(v4 + 16), 0x400uLL))
    snprintf(v5, 0x400uLL, "%s %d", "Unknown error", v3);
  v6 = strlen(v5);
  if (v6)
  {
    v14 = v6;
    if (v6 >> 31)
    {
      __break(0xC471u);
      return;
    }
    v15 = (int *)WTF::fastCompactMalloc((WTF *)(v6 + 20));
    v16 = (char *)(v15 + 5);
    *v15 = 2;
    v15[1] = v14;
    *((_QWORD *)v15 + 1) = v15 + 5;
    v15[4] = 4;
    if (v14 == 1)
      *v16 = *v5;
    else
      memcpy(v16, v5, v14);
  }
  else
  {
    v15 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  *a2 = v15;
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
  else
    --*(_DWORD *)v4;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::BytecodeCacheError::message(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,JSC::ParserError,JSC::BytecodeCacheError::StandardError,JSC::BytecodeCacheError::WriteError> const&>@<X0>(unint64_t *a1@<X1>, int **a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  int v25;
  char *v26;
  _QWORD v27[5];

  v3 = 0;
  v27[4] = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v4 = a1[1];
  v6 = *a1;
  do
  {
    ++v3;
    v7 = v6 > 9;
    v6 /= 0xAuLL;
  }
  while (v7);
  v8 = 0;
  v9 = a1[1];
  do
  {
    ++v8;
    v7 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v7);
  if ((v8 & 0x80000000) == 0)
  {
    v10 = __OFADD__(v8, 7);
    v11 = v8 + 7;
    if (!v10)
    {
      v10 = __OFADD__(v11, 17);
      v12 = v11 + 17;
      v13 = v10;
      if ((v3 & 0x80000000) == 0 && !v13)
      {
        v10 = __OFADD__(v3, v12);
        v14 = v3 + v12;
        if (!v10)
        {
          v15 = (v14 + 56);
          if (!__OFADD__(v14, 56))
          {
            if (v14 == -56)
            {
              v17 = &WTF::StringImpl::s_emptyAtomString;
              WTF::StringImpl::s_emptyAtomString += 2;
LABEL_30:
              *a2 = v17;
              return result;
            }
            if ((v15 & 0x80000000) == 0)
            {
              result = WTF::tryFastCompactMalloc((WTF *)(v15 + 20), v27);
              v17 = (int *)v27[0];
              if (v27[0])
              {
                v18 = 0;
                *(_OWORD *)(v27[0] + 20) = *(_OWORD *)"Could not write the full cache file to disk. Only wrote ";
                *v17 = 2;
                v17[1] = v15;
                *((_QWORD *)v17 + 1) = v17 + 5;
                v17[4] = 4;
                qmemcpy(v17 + 9, "the full cache file to disk. Only wrote ", 40);
                v19 = v5;
                do
                {
                  *((_BYTE *)&v27[3] + v18--) = (v19 % 0xA) | 0x30;
                  v7 = v19 > 9;
                  v19 /= 0xAuLL;
                }
                while (v7);
                if (v18 + 26 <= 25)
                  result = (uint64_t)memcpy(v17 + 19, (char *)&v27[3] + v18 + 1, -v18);
                v20 = 0;
                do
                {
                  ++v20;
                  v7 = v5 > 9;
                  v5 /= 0xAuLL;
                }
                while (v7);
                v21 = 0;
                v22 = (uint64_t)v17 + v20 + 76;
                *(_OWORD *)v22 = *(_OWORD *)" of the expected ";
                *(_BYTE *)(v22 + 16) = 32;
                v23 = v4;
                do
                {
                  *((_BYTE *)&v27[3] + v21--) = (v23 % 0xA) | 0x30;
                  v7 = v23 > 9;
                  v23 /= 0xAuLL;
                }
                while (v7);
                v24 = (char *)(v22 + 17);
                if (v21 + 26 <= 25)
                  result = (uint64_t)memcpy(v24, (char *)&v27[3] + v21 + 1, -v21);
                v25 = 0;
                do
                {
                  ++v25;
                  v7 = v4 > 9;
                  v4 /= 0xAuLL;
                }
                while (v7);
                v26 = &v24[v25];
                *(_DWORD *)(v26 + 3) = 779314548;
                *(_DWORD *)v26 = 1954112032;
                goto LABEL_30;
              }
            }
          }
        }
      }
    }
  }
  *a2 = 0;
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::CachePayload::data(void)::$_0,JSC::CachePayload::data(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::FileSystemImpl::MappedFileData,std::pair<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,unsigned long>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::CachePayload::data(void)::$_0,JSC::CachePayload::data(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::FileSystemImpl::MappedFileData,std::pair<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,unsigned long>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::CachePayload::size(void)::$_0,JSC::CachePayload::size(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::FileSystemImpl::MappedFileData,std::pair<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,unsigned long>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 8);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::CachePayload::size(void)::$_0,JSC::CachePayload::size(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::FileSystemImpl::MappedFileData,std::pair<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,unsigned long>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

uint64_t JSC::CacheableIdentifier::dump(JSC::CacheableIdentifier *this, WTF::PrintStream *a2)
{
  unint64_t v3;
  unint64_t v5;
  WTF::PrintStream *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  float v21;
  uint64_t result;
  unint64_t v23;
  WTF::PrintStream *v24;
  JSC::Structure *v25;
  unint64_t v26;
  int v27;
  char v28;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    if ((v3 & 1) != 0)
      v5 = v3 & 0xFFFFFFFFFFFFFFFELL;
    else
      v5 = *(_QWORD *)(v3 + 8);
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v6, "%s", "uid:(");
    if (v5)
    {
      v13 = *(char **)(v5 + 8);
      v14 = *(unsigned int *)(v5 + 4);
      if ((*(_BYTE *)(v5 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v13, v14, (uint64_t)&v26, v12);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v13, v14, 0, v7, v8, v9, v10, v11, (uint64_t)&v26);
      WTF::printExpectedCStringHelper(v6, "StringImpl*", &v26);
      if (v27 != -1)
        ((void (*)(char *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v27])(&v28, &v26);
    }
    else
    {
      WTF::PrintStream::printf(v6, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf(v6, "%s", ")");
    result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v23 = *(_QWORD *)this;
    if ((*(_QWORD *)this & 1) == 0)
    {
      v26 = *(_QWORD *)this;
      v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v24, "%s", ",cell:(");
      v25 = 0;
      if (v23)
      {
        if ((v23 & 0xFFFE000000000002) == 0)
          v25 = (JSC::Structure *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE));
      }
      JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v26, v24, 0, v25);
      WTF::PrintStream::printf(v24, "%s", ")");
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    }
  }
  else
  {
    v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    if ((dword_1ECF2C430 & 4) != 0)
      WTF::StringImpl::utf8ForCharacters(off_1ECF2C428, dword_1ECF2C424, (uint64_t)&v26, v21);
    else
      WTF::StringImpl::utf8ForCharacters(off_1ECF2C428, dword_1ECF2C424, 0, v15, v16, v17, v18, v19, (uint64_t)&v26);
    WTF::printExpectedCStringHelper(v20, "StringImpl*", &v26);
    if (v27 != -1)
      ((void (*)(char *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v27])(&v28, &v26);
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return result;
}

void JSC::CachedBytecode::addGlobalUpdate(uint64_t a1, const JSC::CachedBytecode **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  const JSC::CachedBytecode *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  WTF *v50;
  uint64_t v51;
  int v52;
  WTF **v53;

  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
  {
    *(_QWORD *)(a1 + 40) = 0;
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::CachedBytecode::copyLeafExecutables((JSC::CachedBytecode *)a1, *a2);
  v11 = *a2;
  v12 = (_QWORD *)((char *)*a2 + 16);
  v50 = 0;
  LODWORD(v51) = 0;
  v52 = 0;
  v13 = *((unsigned int *)v11 + 8);
  if ((_DWORD)v13 == -1)
  {
    v52 = -1;
  }
  else
  {
    v53 = &v50;
    ((void (*)(WTF ***, WTF **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRSF_SJ_EEEDcmSL_DpOT0____fdiagonal[v13])(&v53, &v50, v12);
    v21 = *((unsigned int *)v11 + 8);
    if ((_DWORD)v21 != -1)
    {
      if ((_DWORD)v21 == 1)
      {
        v22 = *((_QWORD *)v11 + 2);
        *((_QWORD *)v11 + 2) = 0;
        WTF::fastFree(v22, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(0, v23, v24, v25, v26, v27, v28, v29);
        *((_QWORD *)v11 + 3) = 0;
        goto LABEL_10;
      }
      ((void (*)(WTF ***, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v21])(&v53, v12);
    }
  }
  *v12 = 0;
  v12[1] = 0;
  *((_DWORD *)v11 + 8) = 1;
LABEL_10:
  v30 = (uint64_t *)(a1 + 48);
  v31 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v31 == *(_DWORD *)(a1 + 56))
  {
    WTF::Vector<JSC::CacheUpdate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v31 + 1);
    LODWORD(v31) = *(_DWORD *)(a1 + 60);
    v32 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v32 = *v30;
  }
  v33 = v32 + 56 * v31;
  *(_QWORD *)(v33 + 8) = 0;
  *(_DWORD *)(v33 + 16) = 0;
  *(_DWORD *)(v33 + 24) = 0;
  if (v52 == -1)
  {
    *(_DWORD *)(v33 + 24) = -1;
    goto LABEL_20;
  }
  v53 = (WTF **)(v33 + 8);
  ((void (*)(WTF ***))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRSF_SJ_EEEDcmSL_DpOT0____fdiagonal[v52])(&v53);
  if (v52 == -1)
  {
LABEL_20:
    v50 = 0;
    v51 = 0;
    v49 = 1;
    v52 = 1;
    *(_DWORD *)(v33 + 48) = 0;
    ++*(_DWORD *)(a1 + 60);
    goto LABEL_21;
  }
  if (v52 != 1)
  {
    ((void (*)(WTF ***, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v52])(&v53, &v50);
    goto LABEL_20;
  }
  v41 = v50;
  v50 = 0;
  WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  WTF::fastFree(0, v42, v43, v44, v45, v46, v47, v48);
  v51 = 0;
  v49 = v52;
  *(_DWORD *)(v33 + 48) = 0;
  ++*(_DWORD *)(a1 + 60);
  if (v49 != -1)
LABEL_21:
    ((void (*)(WTF ***, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v49])(&v53, &v50);
}

uint64_t JSC::CachedBytecode::copyLeafExecutables(JSC::CachedBytecode *this, const JSC::CachedBytecode *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t result;
  JSC::CachedBytecode *v34;
  char v35;
  char *v36;

  v4 = *((_QWORD *)a2 + 5);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    v6 = (uint64_t *)(v4 + 16 * v5);
    if (*(_DWORD *)(v4 - 12))
    {
      v7 = (uint64_t *)*((_QWORD *)a2 + 5);
      if ((_DWORD)v5)
      {
        v8 = 16 * v5;
        v7 = (uint64_t *)*((_QWORD *)a2 + 5);
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          v7 += 2;
          v8 -= 16;
          if (!v8)
          {
            v7 = v6;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v7 = (uint64_t *)(v4 + 16 * v5);
  }
  else
  {
    v7 = 0;
    v5 = 0;
  }
  v6 = (uint64_t *)(v4 + 16 * v5);
  if (v4)
  {
LABEL_8:
    v9 = (uint64_t *)(v4 + 16 * *(unsigned int *)(v4 - 4));
    goto LABEL_13;
  }
  v9 = 0;
LABEL_13:
  if (v9 != v7)
  {
    v10 = (uint64_t *)((char *)this + 40);
    while (1)
    {
      v11 = *((_QWORD *)this + 1);
      v12 = v7[1];
      v13 = *((_QWORD *)this + 5);
      if (v13
        || (WTF::HashTable<JSC::UnlinkedFunctionExecutable const*,WTF::KeyValuePair<JSC::UnlinkedFunctionExecutable const*,JSC::LeafExecutable>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::UnlinkedFunctionExecutable const*,JSC::LeafExecutable>>,WTF::DefaultHash<JSC::UnlinkedFunctionExecutable const*>,WTF::HashMap<JSC::UnlinkedFunctionExecutable const*,JSC::LeafExecutable,WTF::DefaultHash<JSC::UnlinkedFunctionExecutable const*>,WTF::HashTraits<JSC::UnlinkedFunctionExecutable const*>,WTF::HashTraits<JSC::LeafExecutable>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::UnlinkedFunctionExecutable const*>>::rehash((uint64_t *)this + 5, 8u, 0), (v13 = *v10) != 0))
      {
        v14 = *(_DWORD *)(v13 - 8);
      }
      else
      {
        v14 = 0;
      }
      v15 = *v7;
      v16 = ~(*v7 << 32) + *v7;
      v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
      v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
      v19 = v14 & (((v18 + ~(v18 << 27)) >> 31) ^ (v18 + ~((_DWORD)v18 << 27)));
      v20 = (_QWORD *)(v13 + 16 * v19);
      v21 = *v20;
      if (*v20)
      {
        v22 = 0;
        v23 = 1;
        while (v21 != v15)
        {
          if (v21 == -1)
            v22 = v20;
          v19 = (v19 + v23) & v14;
          v20 = (_QWORD *)(v13 + 16 * v19);
          v21 = *v20;
          ++v23;
          if (!*v20)
          {
            if (v22)
            {
              *v22 = 0;
              v22[1] = 0;
              --*(_DWORD *)(*v10 - 16);
              v15 = *v7;
              v20 = v22;
            }
            goto LABEL_26;
          }
        }
        goto LABEL_39;
      }
LABEL_26:
      *v20 = v15;
      v20[1] = v12 + v11;
      v24 = *v10;
      v25 = *v10 ? *(_DWORD *)(v24 - 12) + 1 : 1;
      *(_DWORD *)(v24 - 12) = v25;
      v26 = *v10;
      v27 = *v10 ? *(_DWORD *)(v26 - 12) : 0;
      v28 = (*(_DWORD *)(v26 - 16) + v27);
      v29 = *(unsigned int *)(v26 - 4);
      if (v29 > 0x400)
        break;
      if (3 * v29 <= 4 * v28)
      {
        if ((_DWORD)v29)
          goto LABEL_35;
        v30 = 8;
        goto LABEL_38;
      }
LABEL_39:
      v31 = v7 + 2;
      v7 = v6;
      if (v31 != v6)
      {
        v7 = v31;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          v7 += 2;
          if (v7 == v6)
          {
            v7 = v6;
            break;
          }
        }
      }
      if (v7 == v9)
        goto LABEL_48;
    }
    if (v29 > 2 * v28)
      goto LABEL_39;
LABEL_35:
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_38:
    WTF::HashTable<JSC::UnlinkedFunctionExecutable const*,WTF::KeyValuePair<JSC::UnlinkedFunctionExecutable const*,JSC::LeafExecutable>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::UnlinkedFunctionExecutable const*,JSC::LeafExecutable>>,WTF::DefaultHash<JSC::UnlinkedFunctionExecutable const*>,WTF::HashMap<JSC::UnlinkedFunctionExecutable const*,JSC::LeafExecutable,WTF::DefaultHash<JSC::UnlinkedFunctionExecutable const*>,WTF::HashTraits<JSC::UnlinkedFunctionExecutable const*>,WTF::HashTraits<JSC::LeafExecutable>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::UnlinkedFunctionExecutable const*>>::rehash((uint64_t *)this + 5, v30, v20);
    goto LABEL_39;
  }
LABEL_48:
  v32 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v32 == -1)
  {
    v34 = (JSC::CachedBytecode *)std::__throw_bad_variant_access[abi:sn180100]();
    return JSC::CachedBytecode::addFunctionUpdate(v34);
  }
  else
  {
    v36 = &v35;
    result = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v32])(&v36, (char *)a2 + 16);
    *((_QWORD *)this + 1) += result;
  }
  return result;
}

void JSC::CachedBytecode::addFunctionUpdate(JSC::CachedBytecode *this, uint64_t a2, char a3, const JSC::CachedBytecode **a4)
{
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const JSC::CachedBytecode *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  int v59;
  WTF **v60;

  v8 = *((_QWORD *)this + 5);
  v9 = *(_DWORD *)(v8 - 8);
  v10 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = *(_QWORD *)(v8 + 16 * v13);
  if (v14 != a2)
  {
    v15 = 1;
    while (v14)
    {
      v13 = ((_DWORD)v13 + v15) & v9;
      v14 = *(_QWORD *)(v8 + 16 * v13);
      ++v15;
      if (v14 == a2)
        goto LABEL_7;
    }
    v13 = *(unsigned int *)(v8 - 4);
  }
LABEL_7:
  v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
  JSC::CachedBytecode::copyLeafExecutables(this, *a4);
  LOWORD(v56) = HIWORD(v16);
  BYTE2(v56) = a3;
  WORD2(v56) = *(_WORD *)(a2 + 48) & 0x3FFF;
  BYTE6(v56) = (*(_BYTE *)(a2 + 51) >> 2) & 3;
  HIBYTE(v56) = *(uint64_t *)(a2 + 8) < 0;
  v17 = *a4;
  v18 = (_QWORD *)((char *)*a4 + 16);
  v57 = 0;
  LODWORD(v58) = 0;
  v59 = 0;
  v19 = *((unsigned int *)v17 + 8);
  if ((_DWORD)v19 == -1)
  {
    v59 = -1;
  }
  else
  {
    v60 = &v57;
    ((void (*)(WTF ***, WTF **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRSF_SJ_EEEDcmSL_DpOT0____fdiagonal[v19])(&v60, &v57, v18);
    v27 = *((unsigned int *)v17 + 8);
    if ((_DWORD)v27 != -1)
    {
      if ((_DWORD)v27 == 1)
      {
        v28 = *((_QWORD *)v17 + 2);
        *((_QWORD *)v17 + 2) = 0;
        WTF::fastFree(v28, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(0, v29, v30, v31, v32, v33, v34, v35);
        *((_QWORD *)v17 + 3) = 0;
        goto LABEL_14;
      }
      ((void (*)(WTF ***, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v27])(&v60, v18);
    }
  }
  *v18 = 0;
  v18[1] = 0;
  *((_DWORD *)v17 + 8) = 1;
LABEL_14:
  v36 = (uint64_t *)((char *)this + 48);
  v37 = *((unsigned int *)this + 15);
  if ((_DWORD)v37 == *((_DWORD *)this + 14))
  {
    WTF::Vector<JSC::CacheUpdate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v36, v37 + 1);
    LODWORD(v37) = *((_DWORD *)this + 15);
    v38 = *((_QWORD *)this + 6);
  }
  else
  {
    v38 = *v36;
  }
  v39 = v38 + 56 * v37;
  *(_QWORD *)(v39 + 24) = 0;
  *(_QWORD *)(v39 + 14) = v56;
  *(_QWORD *)(v39 + 8) = v16;
  *(_DWORD *)(v39 + 32) = 0;
  *(_DWORD *)(v39 + 40) = 0;
  if (v59 == -1)
  {
    *(_DWORD *)(v39 + 40) = -1;
    goto LABEL_24;
  }
  v60 = (WTF **)(v39 + 24);
  ((void (*)(WTF ***))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRSF_SJ_EEEDcmSL_DpOT0____fdiagonal[v59])(&v60);
  if (v59 == -1)
  {
LABEL_24:
    v57 = 0;
    v58 = 0;
    v55 = 1;
    v59 = 1;
    *(_DWORD *)(v39 + 48) = 1;
    ++*((_DWORD *)this + 15);
    goto LABEL_25;
  }
  if (v59 != 1)
  {
    ((void (*)(WTF ***, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v59])(&v60, &v57);
    goto LABEL_24;
  }
  v47 = v57;
  v57 = 0;
  WTF::fastFree((unint64_t)v47, v40, v41, v42, v43, v44, v45, v46);
  WTF::fastFree(0, v48, v49, v50, v51, v52, v53, v54);
  v58 = 0;
  v55 = v59;
  *(_DWORD *)(v39 + 48) = 1;
  ++*((_DWORD *)this + 15);
  if (v55 != -1)
LABEL_25:
    ((void (*)(WTF ***, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v55])(&v60, &v57);
}

void JSC::CachedBytecode::commitUpdates(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char *v30;

  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 == -1)
  {
LABEL_15:
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
    JSC::CachedSpecialPropertyAdaptiveStructureWatchpoint::fireInternal(v21, v22, v23, v24, v25, v26, v27, v28);
    return;
  }
  v30 = &v29;
  v5 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v30, a1 + 16);
  v6 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v6)
  {
    v7 = v5;
    v8 = *(_QWORD *)(a1 + 48);
    v9 = v8 + 18;
    v10 = v8 + 24;
    v11 = 56 * v6;
    while (1)
    {
      v12 = *(_DWORD *)(v10 + 24);
      if (v12 == 1)
      {
        v14 = 112;
        if (!*(_BYTE *)(v10 - 8))
          v14 = 104;
        v30 = (char *)(v7 - (v14 + *(_QWORD *)(v10 - 16)));
        (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
        (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(v10 - 16), v9, 4);
        v13 = v10;
      }
      else
      {
        if (v12)
          goto LABEL_15;
        v13 = v8 + 8;
      }
      v15 = *(unsigned int *)(v13 + 16);
      if ((_DWORD)v15 == -1)
        goto LABEL_15;
      v30 = &v29;
      v16 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v15])(&v30, v13);
      v17 = *(unsigned int *)(v13 + 16);
      if ((_DWORD)v17 == -1)
        goto LABEL_15;
      v18 = v16;
      v30 = &v29;
      v19 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v17])(&v30, v13);
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v7, v18, v19);
      v20 = *(unsigned int *)(v13 + 16);
      if ((_DWORD)v20 == -1)
        goto LABEL_15;
      v30 = &v29;
      v7 += ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v20])(&v30, v13);
      v8 += 56;
      v9 += 56;
      v10 += 56;
      v11 -= 56;
      if (!v11)
        return;
    }
  }
}

void JSC::CachedSpecialPropertyAdaptiveStructureWatchpoint::fireInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned __int8 v33;
  unsigned int v34;

  v10 = *(unsigned int *)(a1 + 17);
  v11 = v10 | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 32);
  if ((v10 & 8) != 0)
  {
    if ((*(_BYTE *)(v11 - 79) & 1) == 0 && (*(_BYTE *)(v11 - 80) & 1) == 0)
      return;
  }
  else
  {
    v12 = *(_QWORD *)(v11 & 0xFFFFFFC000);
    if (*(_BYTE *)(v12 + 10))
    {
      v25 = *(_QWORD *)(v12 + 24);
      v28 = *(_QWORD **)(v25 + 104);
      v27 = (_QWORD *)(v25 + 104);
      v26 = v28;
      if (v28 != v27)
      {
        v29 = 0;
        do
        {
          v30 = (_QWORD *)*v26;
          v29 |= JSC::FreeList::contains(v26 + 3, v11);
          v26 = v30;
        }
        while (v30 != v27);
        if ((_BYTE)v29)
          return;
      }
    }
    else if ((JSC::MarkedBlock::Handle::isLive(v12, v11, a3, a4, a5, a6, a7, a8) & 1) == 0)
    {
      return;
    }
  }
  JSC::ObjectPropertyCondition::isWatchable(a1 + 24, 1, a3, a4, a5, a6, a7, a8);
  if (v19)
  {
    JSC::ObjectPropertyCondition::isWatchable(a1 + 24, 0, v13, v14, v15, v16, v17, v18);
    if ((v20 & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1988C9528);
    }
    v21 = 16 * (**(_DWORD **)(a1 + 24) & 0xFFFFFFFE);
    v22 = *(_QWORD *)(v21 + 0x60);
    if ((v22 & 1) != 0)
    {
      v34 = (v22 >> 1) & 3;
      v22 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v22 = 1;
      *(_BYTE *)(v22 + 4) = v34;
      *(_BYTE *)(v22 + 5) = 0;
      *(_QWORD *)(v22 + 8) = v22 + 8;
      *(_QWORD *)(v22 + 16) = v22 + 8;
      __dmb(0xAu);
      *(_QWORD *)(v21 + 96) = v22;
    }
    v24 = *(_QWORD *)(v22 + 8);
    v23 = (_QWORD *)(v22 + 8);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v23;
    *v23 = a1;
    *(_QWORD *)(v24 + 8) = a1;
    *((_WORD *)v23 - 2) = 257;
  }
  else
  {
    v31 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFLL;
    v32 = *(_QWORD **)(a2 + 41952);
    if (v32[347] == v31)
    {
      v33 = 0;
    }
    else if (v32[314] == v31)
    {
      v33 = 1;
    }
    else if (v32[327] == v31)
    {
      v33 = 2;
    }
    else if (v32[311] == v31)
    {
      v33 = 4;
    }
    else
    {
      v33 = 3;
    }
    JSC::StructureRareData::clearCachedSpecialProperty(*(unsigned int *)(a1 + 17) | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 32), (void *)v33, v13, v14, v15, v16, v17, v18);
  }
}

_OWORD *WTF::HashMap<long,void *,WTF::DefaultHash<long>,WTF::HashTraits<long>,WTF::HashTraits<void *>,WTF::HashTableTraits>::add<void *&>(_OWORD *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = WTF::HashTable<long,WTF::KeyValuePair<long,void *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long,void *>>,WTF::DefaultHash<long>,WTF::HashMap<long,void *,WTF::DefaultHash<long>,WTF::HashTraits<long>,WTF::HashTraits<void *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<long>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = *a3 + ~(*a3 << 32);
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (_QWORD *)(v12 + 16 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v12 - 4);
        v33 = 0;
        v34 = v12 + 16 * v27;
        goto LABEL_32;
      }
      if (v21 == -1)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (_QWORD *)(v12 + 16 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = v22;
    }
  }
  v24 = *a4;
  *v20 = v15;
  v20[1] = v24;
  v25 = *a2;
  if (*a2)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v28 = *a2;
  if (*a2)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
      goto LABEL_23;
  }
  else if (3 * v31 <= 4 * v30)
  {
    if (!(_DWORD)v31)
    {
      v32 = 8;
LABEL_28:
      result = WTF::HashTable<long,WTF::KeyValuePair<long,void *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long,void *>>,WTF::DefaultHash<long>,WTF::HashMap<long,void *,WTF::DefaultHash<long>,WTF::HashTraits<long>,WTF::HashTraits<void *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<long>>::rehash(a2, v32, (uint64_t)v20, (uint64_t)a4, a5, a6, a7, a8);
      v20 = result;
      v28 = *a2;
      if (*a2)
        v31 = *(unsigned int *)(v28 - 4);
      else
        v31 = 0;
      goto LABEL_31;
    }
LABEL_23:
    v32 = ((_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31)));
    goto LABEL_28;
  }
LABEL_31:
  v34 = v28 + 16 * v31;
  v33 = 1;
LABEL_32:
  *(_QWORD *)v11 = v20;
  *((_QWORD *)v11 + 1) = v34;
  *((_BYTE *)v11 + 16) = v33;
  return result;
}

_OWORD *WTF::HashMap<JSC::UnlinkedFunctionExecutable const*,JSC::LeafExecutable,WTF::DefaultHash<JSC::UnlinkedFunctionExecutable const*>,WTF::HashTraits<JSC::UnlinkedFunctionExecutable const*>,WTF::HashTraits<JSC::LeafExecutable>,WTF::HashTableTraits>::add<long &>(_OWORD *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _OWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::UnlinkedFunctionExecutable const*,WTF::KeyValuePair<JSC::UnlinkedFunctionExecutable const*,JSC::LeafExecutable>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::UnlinkedFunctionExecutable const*,JSC::LeafExecutable>>,WTF::DefaultHash<JSC::UnlinkedFunctionExecutable const*>,WTF::HashMap<JSC::UnlinkedFunctionExecutable const*,JSC::LeafExecutable,WTF::DefaultHash<JSC::UnlinkedFunctionExecutable const*>,WTF::HashTraits<JSC::UnlinkedFunctionExecutable const*>,WTF::HashTraits<JSC::LeafExecutable>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::UnlinkedFunctionExecutable const*>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (_QWORD *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v30 = v8 + 16 * v23;
        goto LABEL_32;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (_QWORD *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  v20 = *a4;
  *v16 = v11;
  v16[1] = v20;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
      goto LABEL_23;
  }
  else if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v28 = 8;
LABEL_28:
      result = WTF::HashTable<JSC::UnlinkedFunctionExecutable const*,WTF::KeyValuePair<JSC::UnlinkedFunctionExecutable const*,JSC::LeafExecutable>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::UnlinkedFunctionExecutable const*,JSC::LeafExecutable>>,WTF::DefaultHash<JSC::UnlinkedFunctionExecutable const*>,WTF::HashMap<JSC::UnlinkedFunctionExecutable const*,JSC::LeafExecutable,WTF::DefaultHash<JSC::UnlinkedFunctionExecutable const*>,WTF::HashTraits<JSC::UnlinkedFunctionExecutable const*>,WTF::HashTraits<JSC::LeafExecutable>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::UnlinkedFunctionExecutable const*>>::rehash(a2, v28, v16);
      v16 = result;
      v24 = *a2;
      if (*a2)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
      goto LABEL_31;
    }
LABEL_23:
    v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
    goto LABEL_28;
  }
LABEL_31:
  v30 = v24 + 16 * v27;
  v29 = 1;
LABEL_32:
  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v30;
  *((_BYTE *)v7 + 16) = v29;
  return result;
}

BOOL JSC::GenericCacheEntry::isUpToDate(JSC *a1, uint64_t a2)
{
  int v4;
  WTF::AtomStringImpl *v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  const WTF::StringImpl *v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char **v40;
  char *v41;

  v4 = *(_DWORD *)a1;
  if (v4 != JSC::computeJSCBytecodeCacheVersion(a1))
    return 0;
  LOBYTE(v41) = 0;
  v12 = JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::decode<>((_QWORD *)a1 + 2, a2, &v41);
  if (v12)
  {
    if ((_BYTE)v41)
    {
      v13 = (_QWORD *)(a2 + 32);
      v14 = *(unsigned int *)(a2 + 44);
      if ((_DWORD)v14 == *(_DWORD *)(a2 + 40))
      {
        v15 = v14 + (v14 >> 2);
        if (v15 >= 0x10)
          v16 = v15 + 1;
        else
          v16 = 16;
        if (v16 <= v14 + 1)
          v17 = v14 + 1;
        else
          v17 = v16;
        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v13, v17);
        v14 = *(unsigned int *)(a2 + 44);
        v18 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v14);
      }
      else
      {
        v18 = (_QWORD *)(*v13 + 32 * v14);
      }
      *v18 = &off_1E35986B0;
      v18[1] = v12;
      v18[3] = v18;
      *(_DWORD *)(a2 + 44) = v14 + 1;
    }
    *(_DWORD *)v12 += 2;
  }
  v20 = atomic_load(&WTF::bootSessionUUIDString(void)::onceKey);
  if (v20 != -1)
  {
    v41 = &v39;
    v40 = &v41;
    std::__call_once(&WTF::bootSessionUUIDString(void)::onceKey, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::bootSessionUUIDString(void)::$_0 &&>>);
  }
  v21 = (const WTF::StringImpl *)WTF::bootSessionUUIDString(void)::bootSessionUUID;
  if (WTF::bootSessionUUIDString(void)::bootSessionUUID)
    *(_DWORD *)WTF::bootSessionUUIDString(void)::bootSessionUUID += 2;
  v19 = v12 == v21;
  if (v12 != v21 && v12 && v21)
  {
    v19 = WTF::equal(v12, v21, v6);
  }
  else if (!v21)
  {
    goto LABEL_27;
  }
  if (*(_DWORD *)v21 != 2)
  {
    *(_DWORD *)v21 -= 2;
LABEL_27:
    if (!v12)
      return v19;
    goto LABEL_28;
  }
  WTF::StringImpl::~StringImpl(v21, v5, (uint64_t)v6, v7, v8, v9, v10, v11);
  WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
  if (!v12)
    return v19;
LABEL_28:
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::~StringImpl(v12, v5, (uint64_t)v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
  }
  else
  {
    *(_DWORD *)v12 -= 2;
  }
  return v19;
}

BOOL JSC::CacheEntry<JSC::UnlinkedProgramCodeBlock>::isStillValid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const WTF::StringImpl *v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  WTF::StringImpl *v27;
  int v28;
  int32x2_t v29;

  v26[0] = 0;
  v26[1] = 0;
  v28 = 0;
  v27 = 0;
  JSC::CachedUnlinkedSourceCodeShape<JSC::UnlinkedSourceCode>::decode((double *)(a1 + 32), a2, (uint64_t)v26);
  JSC::CachedString::decode(a1 + 48, a2, &v27);
  v28 = *(_DWORD *)(a1 + 64);
  v29 = vrev64_s32(*(int32x2_t *)(a1 + 68));
  v14 = JSC::SourceCodeKey::operator==(v26, a3, v6);
  v15 = v27;
  v27 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, v7, v8, v9, v10, v11, v12, v13);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  v16 = (_DWORD *)v26[0];
  v26[0] = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  return v14;
}

void JSC::encodeCodeBlock(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, int a4@<W3>, JSC::BytecodeCacheError *a5@<X4>, uint64_t *a6@<X8>)
{
  char **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  WTF *v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  WTF *v25[2];
  __int128 v26;

  v10 = (char **)(16 * *(unsigned int *)(16 * (*a3 & 0xFFFFFFFE) + 0x4C));
  v22 = a1;
  v23 = a4;
  v24 = 0u;
  *(_OWORD *)v25 = 0u;
  v26 = 0u;
  JSC::Encoder::allocateNewPage((JSC::Encoder *)&v22, 0);
  if (v10 == &JSC::UnlinkedProgramCodeBlock::s_info)
  {
    JSC::encodeCodeBlock<JSC::UnlinkedProgramCodeBlock>((uint64_t)&v22, a2, (uint64_t)a3);
  }
  else if (v10 == &JSC::UnlinkedModuleProgramCodeBlock::s_info)
  {
    JSC::encodeCodeBlock<JSC::UnlinkedModuleProgramCodeBlock>((uint64_t)&v22, a2, (uint64_t)a3);
  }
  JSC::Encoder::release((JSC::Encoder *)&v22, a5, a6);
  if (*((_QWORD *)&v26 + 1))
    WTF::fastFree(*((_QWORD *)&v26 + 1) - 16, v11, v12, v13, v14, v15, v16, v17);
  if ((_QWORD)v26)
    WTF::fastFree(v26 - 16, v11, v12, v13, v14, v15, v16, v17);
  if (HIDWORD(v25[1]))
  {
    v18 = (unint64_t *)v25[0];
    v19 = 24 * HIDWORD(v25[1]);
    do
    {
      v20 = *v18;
      v18 += 3;
      WTF::fastFree(v20, v11, v12, v13, v14, v15, v16, v17);
      v19 -= 24;
    }
    while (v19);
  }
  v21 = v25[0];
  if (v25[0])
  {
    v25[0] = 0;
    LODWORD(v25[1]) = 0;
    WTF::fastFree((unint64_t)v21, v11, v12, v13, v14, v15, v16, v17);
  }
}

void JSC::encodeCodeBlock<JSC::UnlinkedProgramCodeBlock>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  int v18;
  int v19;
  WTF::StringImpl *v20;
  int v21;
  int32x2_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int64x2_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  _DWORD *v70;
  _DWORD *v71;
  _DWORD *v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _OWORD *v110;
  unint64_t v111;
  _OWORD *v112;
  unint64_t v113;
  _BYTE *v114;
  _OWORD *v115;
  unint64_t v116;
  uint64_t v117;
  _OWORD *v118;
  _OWORD *v119;
  WTF::StringImpl *v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123[2];

  v6 = JSC::Encoder::malloc((JSC::Encoder *)a1, 0x58u);
  *(_DWORD *)v6 = JSC::computeJSCBytecodeCacheVersion((JSC *)v6);
  *(int64x2_t *)(v6 + 8) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_DWORD *)(v6 + 24) = 0;
  v7 = atomic_load(&WTF::bootSessionUUIDString(void)::onceKey);
  if (v7 != -1)
  {
    *(_QWORD *)&v121 = &v122;
    v123[0] = (uint64_t)&v121;
    std::__call_once(&WTF::bootSessionUUIDString(void)::onceKey, v123, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::bootSessionUUIDString(void)::$_0 &&>>);
  }
  v8 = (WTF::StringImpl *)WTF::bootSessionUUIDString(void)::bootSessionUUID;
  if (WTF::bootSessionUUIDString(void)::bootSessionUUID)
  {
    *(_DWORD *)WTF::bootSessionUUIDString(void)::bootSessionUUID += 2;
    JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v6 + 16), (JSC::Encoder *)a1, v8);
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
  else
  {
    JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v6 + 16), (JSC::Encoder *)a1, 0);
  }
  *(_QWORD *)(v6 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  *(int64x2_t *)(v6 + 48) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_QWORD *)(v6 + 80) = 0x7FFFFFFFFFFFFFFFLL;
  v16 = (_QWORD *)(v6 + 80);
  v17 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    ++v17[2];
  v18 = *(_DWORD *)(a2 + 8);
  v19 = *(_DWORD *)(a2 + 12);
  v20 = *(WTF::StringImpl **)(a2 + 16);
  if (v20)
    *(_DWORD *)v20 += 2;
  v120 = v20;
  v21 = *(_DWORD *)(a2 + 24);
  v22 = *(int32x2_t *)(a2 + 28);
  if (v17)
  {
    ++v17[2];
    JSC::CachedPtr<JSC::CachedSourceProvider,JSC::SourceProvider>::encode((_OWORD *)(v6 + 32), (JSC::Encoder *)a1, (uint64_t)v17);
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  *(_DWORD *)(v6 + 40) = v18;
  *(_DWORD *)(v6 + 44) = v19;
  JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v6 + 56), (JSC::Encoder *)a1, v120);
  *(_DWORD *)(v6 + 64) = v21;
  *(int32x2_t *)(v6 + 68) = vrev64_s32(v22);
  if (a3)
  {
    v30 = *(_QWORD *)(a1 + 48);
    if (!v30)
      goto LABEL_24;
    v31 = *(_DWORD *)(v30 - 8);
    v32 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
    v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
    v35 = v31 & ((v34 >> 31) ^ v34);
    v36 = *(_QWORD *)(v30 + 16 * v35);
    if (v36 != a3)
    {
      v37 = 1;
      while (v36)
      {
        v35 = ((_DWORD)v35 + v37) & v31;
        v36 = *(_QWORD *)(v30 + 16 * v35);
        ++v37;
        if (v36 == a3)
          goto LABEL_23;
      }
      v35 = *(unsigned int *)(v30 - 4);
    }
LABEL_23:
    if (v35 != *(_DWORD *)(v30 - 4))
    {
      v95 = *(_DWORD *)(a1 + 44);
      if (!v95)
      {
LABEL_56:
        __break(0xC471u);
        JUMPOUT(0x1988CA4B8);
      }
      v96 = 0;
      v97 = *(_QWORD *)(v30 + 16 * v35 + 8);
      v98 = *(_QWORD **)(a1 + 32);
      v99 = &v98[3 * v95];
      while (1)
      {
        v100 = v98[1];
        if (*v98 <= (unint64_t)v16 && *v98 + v100 > (unint64_t)v16)
          break;
        v96 += v100;
        v98 += 3;
        if (v98 == v99)
          goto LABEL_56;
      }
      *v16 = v97 - ((_QWORD)v16 + v96) + *v98;
    }
    else
    {
LABEL_24:
      v46 = *(_DWORD *)(a1 + 44);
      if (!v46)
      {
LABEL_31:
        __break(0xC471u);
        JUMPOUT(0x1988CA068);
      }
      v47 = 0;
      v48 = *(_QWORD **)(a1 + 32);
      v49 = &v48[3 * v46];
      while (1)
      {
        v50 = v48[1];
        if (*v48 <= (unint64_t)v16 && *v48 + v50 > (unint64_t)v16)
          break;
        v47 += v50;
        v48 += 3;
        if (v48 == v49)
          goto LABEL_31;
      }
      v52 = *v48 - ((_QWORD)v16 + v47);
      v53 = JSC::Encoder::malloc((JSC::Encoder *)a1, 0x1F0u);
      v54 = v53;
      *v16 = v52 + v55;
      *(_QWORD *)v53 = 0xC0000000C0000000;
      v56 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      *(_BYTE *)(v53 + 15) = 0;
      *(int64x2_t *)(v53 + 256) = v56;
      *(int64x2_t *)(v53 + 272) = v56;
      *(_QWORD *)(v53 + 288) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v53 + 304) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v53 + 320) = 0x7FFFFFFFFFFFFFFFLL;
      *(int64x2_t *)(v53 + 336) = v56;
      *(_QWORD *)(v53 + 352) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v53 + 368) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v53 + 384) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v53 + 400) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v53 + 424) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v53 + 432) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v53 + 448) = 0x7FFFFFFFFFFFFFFFLL;
      *(int64x2_t *)(v53 + 464) = v56;
      *(_QWORD *)(v53 + 488) = 0x7FFFFFFFFFFFFFFFLL;
      *(_DWORD *)v53 = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(v53 + 4) = *(_DWORD *)(a3 + 12);
      v57 = *(_DWORD *)(v53 + 8) & 0xFFFFFFFE | (*(_DWORD *)(a3 + 20) >> 31);
      *(_DWORD *)(v53 + 8) = v57;
      v58 = v57 & 0xFFFFFFFD | (2 * (((*(_QWORD *)(a3 + 20) >> 62) >> 1) & 1));
      *(_DWORD *)(v53 + 8) = v58;
      v59 = v58 & 0xFFFFFFFB | (4 * (*(_WORD *)(a3 + 28) & 1));
      *(_DWORD *)(v53 + 8) = v59;
      v60 = v59 & 0xFFFFFFF7 | (8 * ((*(unsigned __int16 *)(a3 + 28) >> 1) & 1));
      *(_DWORD *)(v53 + 8) = v60;
      v61 = v60 & 0xFFFFFFEF | (16 * ((*(unsigned __int16 *)(a3 + 28) >> 2) & 1));
      *(_DWORD *)(v53 + 8) = v61;
      v62 = v61 & 0xFFFFFFDF | (32 * ((*(unsigned __int16 *)(a3 + 28) >> 3) & 1));
      *(_DWORD *)(v53 + 8) = v62;
      v63 = v62 & 0xFFFFFFBF | (((*(unsigned __int16 *)(a3 + 28) >> 4) & 1) << 6);
      *(_DWORD *)(v53 + 8) = v63;
      v64 = v63 & 0xFFFFDFFF | (((*(_DWORD *)(a3 + 27) >> 13) & 1) << 13);
      *(_DWORD *)(v53 + 8) = v64;
      v65 = v64 & 0xFFFFFE7F | (((*(unsigned __int16 *)(a3 + 28) >> 6) & 3) << 7);
      *(_DWORD *)(v53 + 8) = v65;
      v66 = v65 & 0xFFFFF9FF | ((HIBYTE(*(unsigned __int16 *)(a3 + 28)) & 3) << 9);
      *(_DWORD *)(v53 + 8) = v66;
      v67 = v66 & 0xFFFFE7FF | (((*(unsigned __int16 *)(a3 + 28) >> 10) & 3) << 11);
      *(_DWORD *)(v53 + 8) = v67;
      *(_QWORD *)(v53 + 16) = *(_QWORD *)(a3 + 44);
      *(_DWORD *)(v53 + 24) = *(_DWORD *)(a3 + 16) & 0x7FFFFFFF;
      *(_DWORD *)(v53 + 28) = *(_DWORD *)(a3 + 20) & 0x7FFFFFFF;
      *(_DWORD *)(v53 + 32) = *(_DWORD *)(a3 + 24) & 0x7FFFFFFF;
      *(_WORD *)(v53 + 12) = *(_WORD *)(a3 + 40);
      v68 = v67 & 0xFFF9FFFF | (((*(unsigned __int8 *)(a3 + 30) >> 2) & 3) << 17);
      *(_DWORD *)(v53 + 8) = v68;
      *(_BYTE *)(v53 + 14) = *(_BYTE *)(a3 + 42);
      *(_BYTE *)(v53 + 15) = *(_BYTE *)(a3 + 43);
      v69 = v68 & 0xFFFF3FFF | (((*(unsigned __int16 *)(a3 + 28) >> 12) & 3) << 14);
      *(_DWORD *)(v53 + 8) = v69;
      *(_DWORD *)(v53 + 8) = v69 & 0xFFFEFFFF | (((*(unsigned __int8 *)(a3 + 30) >> 1) & 1) << 16);
      v70 = *(_DWORD **)(a3 + 184);
      if (v70)
        LODWORD(v70) = *v70;
      *(_DWORD *)(v53 + 36) = (_DWORD)v70;
      v71 = *(_DWORD **)(a3 + 192);
      if (v71)
        LODWORD(v71) = *v71;
      *(_DWORD *)(v53 + 40) = (_DWORD)v71;
      v72 = *(_DWORD **)(a3 + 200);
      if (v72)
        LODWORD(v72) = *v72;
      *(_DWORD *)(v53 + 44) = (_DWORD)v72;
      v73 = *(_DWORD **)(a3 + 208);
      v118 = (_OWORD *)(v53 + 448);
      v119 = (_OWORD *)(v53 + 488);
      v116 = v53 + 400;
      v117 = v53 + 424;
      v114 = (_BYTE *)(v53 + 320);
      v115 = (_OWORD *)(v53 + 336);
      v112 = (_OWORD *)(v53 + 280);
      v113 = v53 + 304;
      v110 = (_OWORD *)(v53 + 272);
      v111 = v53 + 288;
      if (v73)
        LODWORD(v73) = *v73;
      *(_DWORD *)(v53 + 48) = (_DWORD)v73;
      JSC::CachedMetadataTable::encode(v53 + 52, *(_QWORD *)(a3 + 72));
      JSC::CachedPtr<JSC::CachedCodeBlockRareData,JSC::UnlinkedCodeBlock::RareData>::encode((_OWORD *)(v54 + 256), a1, *(unsigned int ***)(a3 + 152));
      JSC::CachedPtr<JSC::CachedStringImpl,WTF::StringImpl>::encode((_OWORD *)(v54 + 264), (JSC::Encoder *)a1, *(unsigned int *)(a3 + 52) | ((unint64_t)*(unsigned __int8 *)(a3 + 56) << 32));
      JSC::CachedPtr<JSC::CachedStringImpl,WTF::StringImpl>::encode(v110, (JSC::Encoder *)a1, *(unsigned int *)(a3 + 52) | ((unint64_t)*(unsigned __int8 *)(a3 + 56) << 32));
      JSC::CachedPtr<JSC::CachedInstructionStream,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>::encode(v112, a1, *(_QWORD *)(a3 + 80));
      JSC::CachedVector<JSC::CachedJSValue,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>>(v113, a1, (_QWORD *)(a3 + 112));
      JSC::CachedVector<JSC::SourceCodeRepresentation,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::SourceCodeRepresentation>>(v114, a1, (unsigned int **)(a3 + 120));
      JSC::CachedPtr<JSC::CachedExpressionInfo,JSC::ExpressionInfo>::encode(v115, a1, *(_QWORD *)(a3 + 160));
      JSC::CachedVector<unsigned int,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<unsigned int>>(v111, a1, (unsigned int **)(a3 + 64));
      JSC::CachedHashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::encode(v54 + 344, a1, (_QWORD *)(a3 + 144));
      JSC::CachedVector<JSC::CachedIdentifier,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::Identifier>>(v54 + 368, a1, (unsigned int **)(a3 + 104));
      JSC::CachedVector<JSC::CachedWriteBarrier<JSC::CachedFunctionExecutable,JSC::UnlinkedFunctionExecutable>,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::WriteBarrier<JSC::UnlinkedFunctionExecutable,WTF::RawPtrTraits<JSC::UnlinkedFunctionExecutable>>>>(v54 + 384, a1, (_QWORD *)(a3 + 128));
      JSC::CachedVector<JSC::CachedWriteBarrier<JSC::CachedFunctionExecutable,JSC::UnlinkedFunctionExecutable>,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::WriteBarrier<JSC::UnlinkedFunctionExecutable,WTF::RawPtrTraits<JSC::UnlinkedFunctionExecutable>>>>(v116, a1, (_QWORD *)(a3 + 136));
      *(_BYTE *)(v54 + 416) = *(_BYTE *)(a3 + 224);
      JSC::CachedHashMap<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::encode(v117, a1, (uint64_t **)(a3 + 216), v74, v75, v76, v77, v78);
      JSC::CachedPtr<JSC::CachedVariableEnvironmentRareData,JSC::VariableEnvironment::RareData>::encode(v118, (JSC::Encoder *)a1, *(uint64_t ***)(a3 + 232));
      *(_BYTE *)(v54 + 456) = *(_BYTE *)(a3 + 248);
      JSC::CachedHashMap<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::encode(v54 + 464, a1, (uint64_t **)(a3 + 240), v79, v80, v81, v82, v83);
      JSC::CachedPtr<JSC::CachedVariableEnvironmentRareData,JSC::VariableEnvironment::RareData>::encode(v119, (JSC::Encoder *)a1, *(uint64_t ***)(a3 + 256));
      v88 = *(_DWORD *)(a1 + 44);
      if (!v88)
      {
LABEL_47:
        __break(0xC471u);
        JUMPOUT(0x1988CA42CLL);
      }
      v89 = 0;
      v90 = *(unint64_t **)(a1 + 32);
      v91 = &v90[3 * v88];
      while (1)
      {
        v92 = v90[1];
        if (*v90 <= v54 && *v90 + v92 > v54)
          break;
        v89 += v92;
        v90 += 3;
        if (v90 == v91)
          goto LABEL_47;
      }
      v94 = v89 + v54 - *v90;
      v123[0] = a3;
      v122 = v94;
      WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(&v121, (uint64_t *)(a1 + 48), v123, &v122, v84, v85, v86, v87);
    }
  }
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
    {
      WTF::StringImpl::~StringImpl(v120, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
      if (!v17)
        return;
      goto LABEL_62;
    }
    *(_DWORD *)v120 -= 2;
  }
  if (!v17)
    return;
LABEL_62:
  if (v17[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
  else
    --v17[2];
}

void JSC::encodeCodeBlock<JSC::UnlinkedModuleProgramCodeBlock>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  int v18;
  int v19;
  WTF::StringImpl *v20;
  int v21;
  int32x2_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int64x2_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  _DWORD *v70;
  _DWORD *v71;
  _DWORD *v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t *v81;
  unint64_t v82;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _OWORD *v100;
  _OWORD *v101;
  unint64_t v102;
  _BYTE *v103;
  unint64_t v104;
  WTF::StringImpl *v105;
  __int128 v106;
  unint64_t v107;
  __int128 *v108;

  v6 = JSC::Encoder::malloc((JSC::Encoder *)a1, 0x58u);
  *(_DWORD *)v6 = JSC::computeJSCBytecodeCacheVersion((JSC *)v6);
  *(int64x2_t *)(v6 + 8) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_DWORD *)(v6 + 24) = 1;
  v7 = atomic_load(&WTF::bootSessionUUIDString(void)::onceKey);
  if (v7 != -1)
  {
    *(_QWORD *)&v106 = &v107;
    v108 = &v106;
    std::__call_once(&WTF::bootSessionUUIDString(void)::onceKey, &v108, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::bootSessionUUIDString(void)::$_0 &&>>);
  }
  v8 = (WTF::StringImpl *)WTF::bootSessionUUIDString(void)::bootSessionUUID;
  if (WTF::bootSessionUUIDString(void)::bootSessionUUID)
  {
    *(_DWORD *)WTF::bootSessionUUIDString(void)::bootSessionUUID += 2;
    JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v6 + 16), (JSC::Encoder *)a1, v8);
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
  else
  {
    JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v6 + 16), (JSC::Encoder *)a1, 0);
  }
  *(_QWORD *)(v6 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  *(int64x2_t *)(v6 + 48) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_QWORD *)(v6 + 80) = 0x7FFFFFFFFFFFFFFFLL;
  v16 = (_QWORD *)(v6 + 80);
  v17 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    ++v17[2];
  v18 = *(_DWORD *)(a2 + 8);
  v19 = *(_DWORD *)(a2 + 12);
  v20 = *(WTF::StringImpl **)(a2 + 16);
  if (v20)
    *(_DWORD *)v20 += 2;
  v105 = v20;
  v21 = *(_DWORD *)(a2 + 24);
  v22 = *(int32x2_t *)(a2 + 28);
  if (v17)
  {
    ++v17[2];
    JSC::CachedPtr<JSC::CachedSourceProvider,JSC::SourceProvider>::encode((_OWORD *)(v6 + 32), (JSC::Encoder *)a1, (uint64_t)v17);
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  *(_DWORD *)(v6 + 40) = v18;
  *(_DWORD *)(v6 + 44) = v19;
  JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v6 + 56), (JSC::Encoder *)a1, v105);
  *(_DWORD *)(v6 + 64) = v21;
  *(int32x2_t *)(v6 + 68) = vrev64_s32(v22);
  if (a3)
  {
    v30 = *(_QWORD *)(a1 + 48);
    if (!v30)
      goto LABEL_24;
    v31 = *(_DWORD *)(v30 - 8);
    v32 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
    v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
    v35 = v31 & ((v34 >> 31) ^ v34);
    v36 = *(_QWORD *)(v30 + 16 * v35);
    if (v36 != a3)
    {
      v37 = 1;
      while (v36)
      {
        v35 = ((_DWORD)v35 + v37) & v31;
        v36 = *(_QWORD *)(v30 + 16 * v35);
        ++v37;
        if (v36 == a3)
          goto LABEL_23;
      }
      v35 = *(unsigned int *)(v30 - 4);
    }
LABEL_23:
    if (v35 != *(_DWORD *)(v30 - 4))
    {
      v84 = *(_DWORD *)(a1 + 44);
      if (!v84)
      {
LABEL_56:
        __break(0xC471u);
        JUMPOUT(0x1988CABB4);
      }
      v85 = 0;
      v86 = *(_QWORD *)(v30 + 16 * v35 + 8);
      v87 = *(_QWORD **)(a1 + 32);
      v88 = &v87[3 * v84];
      while (1)
      {
        v89 = v87[1];
        if (*v87 <= (unint64_t)v16 && *v87 + v89 > (unint64_t)v16)
          break;
        v85 += v89;
        v87 += 3;
        if (v87 == v88)
          goto LABEL_56;
      }
      *v16 = v86 - ((_QWORD)v16 + v85) + *v87;
    }
    else
    {
LABEL_24:
      v46 = *(_DWORD *)(a1 + 44);
      if (!v46)
      {
LABEL_31:
        __break(0xC471u);
        JUMPOUT(0x1988CA7D8);
      }
      v47 = 0;
      v48 = *(_QWORD **)(a1 + 32);
      v49 = &v48[3 * v46];
      while (1)
      {
        v50 = v48[1];
        if (*v48 <= (unint64_t)v16 && *v48 + v50 > (unint64_t)v16)
          break;
        v47 += v50;
        v48 += 3;
        if (v48 == v49)
          goto LABEL_31;
      }
      v52 = *v48 - ((_QWORD)v16 + v47);
      v53 = JSC::Encoder::malloc((JSC::Encoder *)a1, 0x1A8u);
      v54 = v53;
      *v16 = v52 + v55;
      *(_QWORD *)v53 = 0xC0000000C0000000;
      *(_BYTE *)(v53 + 15) = 0;
      v56 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      *(int64x2_t *)(v53 + 256) = v56;
      *(int64x2_t *)(v53 + 272) = v56;
      *(_QWORD *)(v53 + 288) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v53 + 304) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v53 + 320) = 0x7FFFFFFFFFFFFFFFLL;
      *(int64x2_t *)(v53 + 336) = v56;
      *(_QWORD *)(v53 + 352) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v53 + 368) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v53 + 384) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v53 + 400) = 0x7FFFFFFFFFFFFFFFLL;
      *(_DWORD *)v53 = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(v53 + 4) = *(_DWORD *)(a3 + 12);
      v57 = *(_DWORD *)(v53 + 8) & 0xFFFFFFFE | (*(_DWORD *)(a3 + 20) >> 31);
      *(_DWORD *)(v53 + 8) = v57;
      v58 = v57 & 0xFFFFFFFD | (2 * (((*(_QWORD *)(a3 + 20) >> 62) >> 1) & 1));
      *(_DWORD *)(v53 + 8) = v58;
      v59 = v58 & 0xFFFFFFFB | (4 * (*(_WORD *)(a3 + 28) & 1));
      *(_DWORD *)(v53 + 8) = v59;
      v60 = v59 & 0xFFFFFFF7 | (8 * ((*(unsigned __int16 *)(a3 + 28) >> 1) & 1));
      *(_DWORD *)(v53 + 8) = v60;
      v61 = v60 & 0xFFFFFFEF | (16 * ((*(unsigned __int16 *)(a3 + 28) >> 2) & 1));
      *(_DWORD *)(v53 + 8) = v61;
      v62 = v61 & 0xFFFFFFDF | (32 * ((*(unsigned __int16 *)(a3 + 28) >> 3) & 1));
      *(_DWORD *)(v53 + 8) = v62;
      v63 = v62 & 0xFFFFFFBF | (((*(unsigned __int16 *)(a3 + 28) >> 4) & 1) << 6);
      *(_DWORD *)(v53 + 8) = v63;
      v64 = v63 & 0xFFFFDFFF | (((*(_DWORD *)(a3 + 27) >> 13) & 1) << 13);
      *(_DWORD *)(v53 + 8) = v64;
      v65 = v64 & 0xFFFFFE7F | (((*(unsigned __int16 *)(a3 + 28) >> 6) & 3) << 7);
      *(_DWORD *)(v53 + 8) = v65;
      v66 = v65 & 0xFFFFF9FF | ((HIBYTE(*(unsigned __int16 *)(a3 + 28)) & 3) << 9);
      *(_DWORD *)(v53 + 8) = v66;
      v67 = v66 & 0xFFFFE7FF | (((*(unsigned __int16 *)(a3 + 28) >> 10) & 3) << 11);
      *(_DWORD *)(v53 + 8) = v67;
      *(_QWORD *)(v53 + 16) = *(_QWORD *)(a3 + 44);
      *(_DWORD *)(v53 + 24) = *(_DWORD *)(a3 + 16) & 0x7FFFFFFF;
      *(_DWORD *)(v53 + 28) = *(_DWORD *)(a3 + 20) & 0x7FFFFFFF;
      *(_DWORD *)(v53 + 32) = *(_DWORD *)(a3 + 24) & 0x7FFFFFFF;
      *(_WORD *)(v53 + 12) = *(_WORD *)(a3 + 40);
      v68 = v67 & 0xFFF9FFFF | (((*(unsigned __int8 *)(a3 + 30) >> 2) & 3) << 17);
      *(_DWORD *)(v53 + 8) = v68;
      *(_BYTE *)(v53 + 14) = *(_BYTE *)(a3 + 42);
      *(_BYTE *)(v53 + 15) = *(_BYTE *)(a3 + 43);
      v69 = v68 & 0xFFFF3FFF | (((*(unsigned __int16 *)(a3 + 28) >> 12) & 3) << 14);
      *(_DWORD *)(v53 + 8) = v69;
      *(_DWORD *)(v53 + 8) = v69 & 0xFFFEFFFF | (((*(unsigned __int8 *)(a3 + 30) >> 1) & 1) << 16);
      v70 = *(_DWORD **)(a3 + 184);
      if (v70)
        LODWORD(v70) = *v70;
      *(_DWORD *)(v53 + 36) = (_DWORD)v70;
      v71 = *(_DWORD **)(a3 + 192);
      if (v71)
        LODWORD(v71) = *v71;
      *(_DWORD *)(v53 + 40) = (_DWORD)v71;
      v72 = *(_DWORD **)(a3 + 200);
      if (v72)
        LODWORD(v72) = *v72;
      *(_DWORD *)(v53 + 44) = (_DWORD)v72;
      v73 = *(_DWORD **)(a3 + 208);
      v103 = (_BYTE *)(v53 + 320);
      v104 = v53 + 400;
      v101 = (_OWORD *)(v53 + 280);
      v102 = v53 + 304;
      v99 = v53 + 288;
      v100 = (_OWORD *)(v53 + 272);
      if (v73)
        LODWORD(v73) = *v73;
      *(_DWORD *)(v53 + 48) = (_DWORD)v73;
      JSC::CachedMetadataTable::encode(v53 + 52, *(_QWORD *)(a3 + 72));
      JSC::CachedPtr<JSC::CachedCodeBlockRareData,JSC::UnlinkedCodeBlock::RareData>::encode((_OWORD *)(v54 + 256), a1, *(unsigned int ***)(a3 + 152));
      JSC::CachedPtr<JSC::CachedStringImpl,WTF::StringImpl>::encode((_OWORD *)(v54 + 264), (JSC::Encoder *)a1, *(unsigned int *)(a3 + 52) | ((unint64_t)*(unsigned __int8 *)(a3 + 56) << 32));
      JSC::CachedPtr<JSC::CachedStringImpl,WTF::StringImpl>::encode(v100, (JSC::Encoder *)a1, *(unsigned int *)(a3 + 52) | ((unint64_t)*(unsigned __int8 *)(a3 + 56) << 32));
      JSC::CachedPtr<JSC::CachedInstructionStream,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>::encode(v101, a1, *(_QWORD *)(a3 + 80));
      JSC::CachedVector<JSC::CachedJSValue,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>>(v102, a1, (_QWORD *)(a3 + 112));
      JSC::CachedVector<JSC::SourceCodeRepresentation,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::SourceCodeRepresentation>>(v103, a1, (unsigned int **)(a3 + 120));
      JSC::CachedPtr<JSC::CachedExpressionInfo,JSC::ExpressionInfo>::encode((_OWORD *)(v54 + 336), a1, *(_QWORD *)(a3 + 160));
      JSC::CachedVector<unsigned int,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<unsigned int>>(v99, a1, (unsigned int **)(a3 + 64));
      JSC::CachedHashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::encode(v54 + 344, a1, (_QWORD *)(a3 + 144));
      JSC::CachedVector<JSC::CachedIdentifier,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::Identifier>>(v54 + 368, a1, (unsigned int **)(a3 + 104));
      JSC::CachedVector<JSC::CachedWriteBarrier<JSC::CachedFunctionExecutable,JSC::UnlinkedFunctionExecutable>,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::WriteBarrier<JSC::UnlinkedFunctionExecutable,WTF::RawPtrTraits<JSC::UnlinkedFunctionExecutable>>>>(v54 + 384, a1, (_QWORD *)(a3 + 128));
      JSC::CachedVector<JSC::CachedWriteBarrier<JSC::CachedFunctionExecutable,JSC::UnlinkedFunctionExecutable>,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::WriteBarrier<JSC::UnlinkedFunctionExecutable,WTF::RawPtrTraits<JSC::UnlinkedFunctionExecutable>>>>(v104, a1, (_QWORD *)(a3 + 136));
      *(_DWORD *)(v54 + 416) = *(_DWORD *)(a3 + 216);
      v78 = *(_DWORD *)(a1 + 44);
      if (!v78)
      {
LABEL_47:
        __break(0xC471u);
        JUMPOUT(0x1988CAB2CLL);
      }
      v79 = 0;
      v80 = *(unint64_t **)(a1 + 32);
      v81 = &v80[3 * v78];
      while (1)
      {
        v82 = v80[1];
        if (*v80 <= v54 && *v80 + v82 > v54)
          break;
        v79 += v82;
        v80 += 3;
        if (v80 == v81)
          goto LABEL_47;
      }
      v107 = v79 + v54 - *v80;
      v108 = (__int128 *)a3;
      WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(&v106, (uint64_t *)(a1 + 48), (uint64_t *)&v108, (uint64_t *)&v107, v74, v75, v76, v77);
    }
  }
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
      if (!v17)
        return;
      goto LABEL_62;
    }
    *(_DWORD *)v105 -= 2;
  }
  if (!v17)
    return;
LABEL_62:
  if (v17[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
  else
    --v17[2];
}

void JSC::Encoder::release(JSC::Encoder *this@<X0>, JSC::BytecodeCacheError *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  unsigned int v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const void *v23;
  size_t v24;
  ssize_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int st_size;
  void *v30;
  int v31;
  uint64_t v32;
  uid_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uid_t st_uid;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  stat v87;
  uint64_t v88;

  v4 = *((_QWORD *)this + 3);
  if (!v4)
  {
    *a3 = 0;
    return;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v8 != v7)
  {
    if (v8 > *(_QWORD *)(v4 + 16))
      goto LABEL_57;
    *(_QWORD *)(v4 + 8) = v8;
    v7 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  v9 = *((_DWORD *)this + 2);
  if (v9 != -1)
  {
    if (ftruncate(v9, v7 + *((_QWORD *)this + 2)))
      goto LABEL_7;
    v19 = *((_DWORD *)this + 11);
    if (v19)
    {
      v20 = *((_QWORD *)this + 4);
      v21 = v20 + 24 * v19;
      while (1)
      {
        v22 = *((_DWORD *)this + 2);
        v23 = *(const void **)v20;
        v24 = *(_QWORD *)(v20 + 8);
        while (1)
        {
          v25 = write(v22, v23, v24);
          if ((v25 & 0x8000000000000000) == 0)
            break;
          if (*__error() != 4)
            goto LABEL_7;
        }
        if ((_DWORD)v25 == -1)
          break;
        v26 = (int)v25;
        v27 = *(_QWORD *)(v20 + 8);
        if ((int)v25 != v27)
        {
          v69 = *((unsigned int *)a2 + 22);
          if ((_DWORD)v69 != -1)
          {
            if ((_DWORD)v69 == 2)
            {
              v12 = 0;
              *(_QWORD *)a2 = (int)v25;
              *((_QWORD *)a2 + 1) = v27;
              goto LABEL_33;
            }
            ((void (*)(stat *, JSC::BytecodeCacheError *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC11ParserErrorENS6_18BytecodeCacheError13StandardErrorENS8_10WriteErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v69])(&v87, a2);
          }
          v12 = 0;
          *(_QWORD *)a2 = v26;
          *((_QWORD *)a2 + 1) = v27;
          v31 = 2;
          goto LABEL_32;
        }
        v20 += 24;
        if (v20 == v21)
          goto LABEL_24;
      }
LABEL_7:
      v10 = *__error();
      v11 = *((unsigned int *)a2 + 22);
      if ((_DWORD)v11 != -1)
      {
        if ((_DWORD)v11 == 1)
        {
          v12 = 0;
          *(_DWORD *)a2 = v10;
LABEL_33:
          *a3 = v12;
          return;
        }
        ((void (*)(stat *, JSC::BytecodeCacheError *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC11ParserErrorENS6_18BytecodeCacheError13StandardErrorENS8_10WriteErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v11])(&v87, a2);
      }
      v12 = 0;
      *(_DWORD *)a2 = v10;
      v31 = 1;
LABEL_32:
      *((_DWORD *)a2 + 22) = v31;
      goto LABEL_33;
    }
LABEL_24:
    v28 = *((_DWORD *)this + 2);
    if (v28 == -1)
      goto LABEL_7;
    if (fstat(*((_DWORD *)this + 2), &v87))
      goto LABEL_7;
    st_size = v87.st_size;
    if (HIDWORD(v87.st_size))
      goto LABEL_7;
    if (LODWORD(v87.st_size))
    {
      v30 = mmap(0, v87.st_size, 1, 2, v28, 0);
      if (v30 == (void *)-1)
        goto LABEL_7;
    }
    else
    {
      v30 = 0;
    }
    v12 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)&v87.st_dev = v30;
    LODWORD(v87.st_ino) = st_size;
    v87.st_uid = 0;
    st_uid = 1;
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::CachePayload::size(void)::$_0,JSC::CachePayload::size(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::FileSystemImpl::MappedFileData,std::pair<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,unsigned long>> const&>((uint64_t)&v88, (uint64_t)&v87);
    *(_QWORD *)(v12 + 16) = 0;
    *(_DWORD *)(v12 + 24) = 0;
    *(_DWORD *)(v12 + 32) = 0;
    v88 = v12 + 16;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS8_9MallocPtrIhNS8_10FastMallocEEEmEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSA_SF_EEEOSU_EEEDcSM_DpT0_((uint64_t)&v88, v12 + 16, (uint64_t *)&v87.st_dev);
    if (v87.st_uid != -1)
    {
      if (v87.st_uid == 1)
      {
        v78 = *(_QWORD *)&v87.st_dev;
        *(_QWORD *)&v87.st_dev = 0;
        WTF::fastFree(v78, v71, v72, v73, v74, v75, v76, v77);
        WTF::fastFree(0, v79, v80, v81, v82, v83, v84, v85);
        v87.st_ino = 0;
        st_uid = v87.st_uid;
        goto LABEL_53;
      }
      ((void (*)(uint64_t *, stat *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v87.st_uid])(&v88, &v87);
    }
    *(_QWORD *)&v87.st_dev = 0;
    v87.st_ino = 0;
    v87.st_uid = 1;
LABEL_53:
    *(_QWORD *)(v12 + 40) = 0;
    v86 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    *(_QWORD *)(v12 + 48) = 0;
    *(_QWORD *)(v12 + 56) = 0;
    *(_QWORD *)(v12 + 40) = v86;
    if (st_uid != -1)
      ((void (*)(uint64_t *, stat *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[st_uid])(&v88, &v87);
    goto LABEL_33;
  }
  v13 = (WTF *)(*((_QWORD *)this + 2) + v7);
  v14 = WTF::fastMalloc(v13);
  v15 = *((_DWORD *)this + 11);
  if (v15)
  {
    LODWORD(v16) = 0;
    v17 = *((_QWORD *)this + 4);
    v18 = v17 + 24 * v15;
    do
    {
      memcpy((void *)(v14 + v16), *(const void **)v17, *(_QWORD *)(v17 + 8));
      v16 = (WTF *)((_DWORD)v16 + *(_DWORD *)(v17 + 8));
      v17 += 24;
    }
    while (v17 != v18);
  }
  else
  {
    v16 = 0;
  }
  if (v13 != v16)
  {
LABEL_57:
    __break(0xC471u);
    JUMPOUT(0x1988CB090);
  }
  v32 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)&v87.st_dev = v14;
  v87.st_ino = (__darwin_ino64_t)v13;
  v33 = 1;
  v87.st_uid = 1;
  WTF::fastFree(0, v34, v35, v36, v37, v38, v39, v40);
  WTF::fastFree(0, v41, v42, v43, v44, v45, v46, v47);
  *(_DWORD *)v32 = 1;
  *(_QWORD *)(v32 + 8) = std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::CachePayload::size(void)::$_0,JSC::CachePayload::size(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::FileSystemImpl::MappedFileData,std::pair<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,unsigned long>> const&>((uint64_t)&v88, (uint64_t)&v87);
  *(_QWORD *)(v32 + 16) = 0;
  *(_DWORD *)(v32 + 24) = 0;
  *(_DWORD *)(v32 + 32) = 0;
  v88 = v32 + 16;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS8_9MallocPtrIhNS8_10FastMallocEEEmEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSA_SF_EEEOSU_EEEDcSM_DpT0_(&v88, (unint64_t *)(v32 + 16), (unint64_t *)&v87, v48, v49, v50, v51, v52);
  if (v87.st_uid == -1)
  {
LABEL_40:
    *(_QWORD *)&v87.st_dev = 0;
    v87.st_ino = 0;
    v87.st_uid = 1;
    goto LABEL_41;
  }
  if (v87.st_uid != 1)
  {
    ((void (*)(uint64_t *, stat *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v87.st_uid])(&v88, &v87);
    goto LABEL_40;
  }
  v60 = *(_QWORD *)&v87.st_dev;
  *(_QWORD *)&v87.st_dev = 0;
  WTF::fastFree(v60, v53, v54, v55, v56, v57, v58, v59);
  WTF::fastFree(0, v61, v62, v63, v64, v65, v66, v67);
  v87.st_ino = 0;
  v33 = v87.st_uid;
LABEL_41:
  *(_QWORD *)(v32 + 40) = 0;
  v68 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)(v32 + 48) = 0;
  *(_QWORD *)(v32 + 56) = 0;
  *(_QWORD *)(v32 + 40) = v68;
  if (v33 != -1)
    ((void (*)(uint64_t *, stat *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v33])(&v88, &v87);
  *a3 = v32;
  WTF::fastFree(0, v53, v54, v55, v56, v57, v58, v59);
}

void JSC::encodeCodeBlock(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  char v4;
  int v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = 0x100000;
  v6 = 0u;
  v7 = 0u;
  v8 = 0;
  v9 = -1;
  v10 = -1;
  v11 = -1;
  v12 = 0;
  v13 = -1;
  v14 = 0;
  v15 = 0;
  JSC::encodeCodeBlock(a1, a2, a3, -1, (JSC::BytecodeCacheError *)&v5, a4);
  if (v15 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC11ParserErrorENS6_18BytecodeCacheError13StandardErrorENS8_10WriteErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix_0[v15])(&v4, &v5);
}

void JSC::encodeFunctionCodeBlock(JSC *this@<X0>, JSC::VM *a2@<X1>, const JSC::UnlinkedFunctionCodeBlock *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  int64x2_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  WTF *v20;
  JSC *v21;
  int v22;
  __int128 v23;
  WTF *v24[2];
  __int128 v25;

  v21 = this;
  v22 = -1;
  v23 = 0u;
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  JSC::Encoder::allocateNewPage((JSC::Encoder *)&v21, 0);
  v8 = JSC::Encoder::malloc((JSC::Encoder *)&v21, 0x1A0u);
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_OWORD *)(v8 + 248) = 0u;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 264) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  v9 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_QWORD *)v8 = 0xC0000000C0000000;
  *(int64x2_t *)(v8 + 256) = v9;
  *(int64x2_t *)(v8 + 272) = v9;
  *(_QWORD *)(v8 + 288) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v8 + 304) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v8 + 320) = 0x7FFFFFFFFFFFFFFFLL;
  *(int64x2_t *)(v8 + 336) = v9;
  *(_QWORD *)(v8 + 352) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v8 + 368) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v8 + 384) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v8 + 400) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v8 + 408) = 0;
  JSC::CachedCodeBlock<JSC::UnlinkedFunctionCodeBlock>::encode(v8, (JSC::Encoder *)&v21, (uint64_t)a2);
  JSC::Encoder::release((JSC::Encoder *)&v21, a3, a4);
  if (*((_QWORD *)&v25 + 1))
    WTF::fastFree(*((_QWORD *)&v25 + 1) - 16, v10, v11, v12, v13, v14, v15, v16);
  if ((_QWORD)v25)
    WTF::fastFree(v25 - 16, v10, v11, v12, v13, v14, v15, v16);
  if (HIDWORD(v24[1]))
  {
    v17 = (unint64_t *)v24[0];
    v18 = 24 * HIDWORD(v24[1]);
    do
    {
      v19 = *v17;
      v17 += 3;
      WTF::fastFree(v19, v10, v11, v12, v13, v14, v15, v16);
      v18 -= 24;
    }
    while (v18);
  }
  v20 = v24[0];
  if (v24[0])
  {
    v24[0] = 0;
    LODWORD(v24[1]) = 0;
    WTF::fastFree((unint64_t)v20, v10, v11, v12, v13, v14, v15, v16);
  }
}

unint64_t JSC::decodeCodeBlockImpl(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t SlowCase;
  uint64_t (**v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  _BOOL4 isUpToDate;
  JSC::VM *v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t (**v44)();
  int v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  JSC::Heap **v63;
  JSC::Heap *v64;
  unint64_t v65;
  int v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  int *v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  int v95;
  int v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  int *v112;
  _QWORD *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  int *v119;
  _QWORD *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  int *v126;
  _QWORD *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  unint64_t *v133;
  _DWORD *v134;
  uint64_t v135;
  _DWORD *v136;
  uint64_t v137;
  _DWORD *v138;
  uint64_t v139;
  _DWORD *v140;
  uint64_t v141;
  _DWORD *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  unsigned int *v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _DWORD *v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  _DWORD *v167;
  _BYTE *v168;
  uint64_t v169;
  unsigned int v170;
  char v171;
  uint64_t v172;
  unsigned int *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _DWORD *v186;
  int *v187;
  int v188;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  int *v206;
  _DWORD *v207;
  int v208;
  int *v209;
  int *v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _DWORD *v222;
  unint64_t v223;
  unint64_t v224;
  unsigned int *v225;
  _DWORD *v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  WTF::StringImpl *v236;
  unint64_t *v237;
  _DWORD *v238;
  uint64_t v239;
  uint64_t v240;
  _DWORD *v241;
  uint64_t v242;
  _DWORD *v243;
  uint64_t v244;
  _DWORD *v245;
  uint64_t v246;
  _DWORD *v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  unsigned int *v259;
  uint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _DWORD *v268;
  unint64_t v269;
  uint64_t v270;
  char *v271;
  _DWORD *v272;
  _BYTE *v273;
  uint64_t v274;
  unsigned int v275;
  char v276;
  uint64_t v277;
  unsigned int *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  void *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  _DWORD *v291;
  int *v292;
  int v293;
  unint64_t v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  unint64_t v310;
  int *v311;
  _DWORD *v312;
  int v313;
  int *v314;
  int *v315;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _DWORD *v327;
  unint64_t v328;
  unint64_t v329;
  unsigned int *v330;
  _DWORD *v331;
  uint64_t v332;
  unsigned int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  _QWORD *v339;
  uint64_t v340;
  WTF::StringImpl *v341;
  _DWORD *v342;
  int v343;
  _BOOL4 v344;
  unint64_t v345;
  _DWORD *v346;
  unint64_t v348;
  void *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  void *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  void *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  void *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  uint64_t v382;
  _QWORD *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t *v387;
  _BOOL4 v388;
  _QWORD *v389;
  uint64_t v390;
  WTF::StringImpl *v391;
  uint64_t v392;
  int v393;
  unint64_t v394;
  _DWORD *v395;
  uint64_t v396;
  WTF::StringImpl *v397;
  _BYTE v398[12];
  unint64_t v399;
  uint64_t (**v400)();
  _OWORD v401[2];

  v10 = *(_QWORD *)a3;
  v11 = *(unsigned int *)(*(_QWORD *)a3 + 32);
  if ((_DWORD)v11 == -1)
    goto LABEL_241;
  v3 = a3;
  v7 = a2;
  v4 = a1;
  v5 = v10 + 16;
  v6 = (unint64_t)&v395;
  v389 = &v395;
  v9 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix;
  v12 = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v389, v10 + 16);
  v13 = *(unsigned int *)(v10 + 32);
  if ((_DWORD)v13 == -1)
    goto LABEL_241;
  v14 = v12;
  v389 = &v395;
  ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v389, v10 + 16);
  v15 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  v16 = *(_DWORD **)v7;
  ++*(_DWORD *)(*(_QWORD *)v7 + 8);
  v3 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v3 = 1;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_QWORD *)(v3 + 8) = v4;
  *(_QWORD *)(v3 + 16) = v15;
  *(_OWORD *)(v3 + 40) = 0u;
  v17 = v16[2];
  v16[2] = v17 + 1;
  *(_QWORD *)(v3 + 56) = v16;
  if (v17)
    v16[2] = v17;
  else
    (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
  v389 = 0;
  v390 = 0;
  LODWORD(v392) = 0;
  v391 = 0;
  v394 = 0;
  ++*((_DWORD *)v4 + 229);
  isUpToDate = JSC::GenericCacheEntry::isUpToDate((JSC *)v14, v3);
  v26 = isUpToDate;
  v27 = 0;
  if (!isUpToDate)
    goto LABEL_203;
  v28 = *(_DWORD *)(v14 + 24);
  v388 = isUpToDate;
  v385 = v14;
  if (v28)
  {
    if (v28 != 1)
    {
      if (v28 == 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1988CCA70);
      }
      __break(0xC471u);
      JUMPOUT(0x1988CCA90);
    }
    v29 = v7;
    v395 = 0;
    v396 = 0;
    *(_DWORD *)v398 = 0;
    v397 = 0;
    v7 = (uint64_t)&v395;
    JSC::CachedUnlinkedSourceCodeShape<JSC::UnlinkedSourceCode>::decode((double *)(v14 + 32), v3, (uint64_t)&v395);
    JSC::CachedString::decode(v14 + 48, v3, &v397);
    v30 = 0;
    v31 = v14;
    SlowCase = 0;
    *(_DWORD *)v398 = *(_DWORD *)(v31 + 64);
    *(int32x2_t *)&v398[4] = vrev64_s32(*(int32x2_t *)(v31 + 68));
    v33 = *(_QWORD *)(v31 + 80);
    v5 = v31 + 80;
    v32 = v33;
    if (v33 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_137;
    v386 = v29;
    v387 = (uint64_t *)(v3 + 24);
    v6 = *(_QWORD *)(v3 + 16);
    v34 = *(unsigned int *)(v6 + 32);
    if ((_DWORD)v34 != -1)
    {
      SlowCase = v6 + 16;
      v7 = (uint64_t)&v400;
      *(_QWORD *)&v401[0] = &v400;
      v35 = ((uint64_t (*)(_OWORD *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v34])(v401, v6 + 16);
      v36 = *(unsigned int *)(v6 + 32);
      if ((_DWORD)v36 != -1)
      {
        v37 = v35;
        *(_QWORD *)&v401[0] = &v400;
        ((void (*)(_OWORD *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v36])(v401, v6 + 16);
        v9 = (uint64_t (**)())(v5 + v32 - v37);
        v38 = *v387;
        if (*v387)
        {
          v39 = *(_DWORD *)(v38 - 8);
          v40 = ((unint64_t)v9 + ~((_QWORD)v9 << 32)) ^ (((unint64_t)v9 + ~((_QWORD)v9 << 32)) >> 22);
          v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
          v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
          v43 = v39 & ((v42 >> 31) ^ v42);
          v44 = *(uint64_t (***)())(v38 + 16 * v43);
          if (v44 != v9)
          {
            v45 = 1;
            while (v44)
            {
              v43 = ((_DWORD)v43 + v45) & v39;
              v44 = *(uint64_t (***)())(v38 + 16 * v43);
              ++v45;
              if (v44 == v9)
                goto LABEL_28;
            }
            v43 = *(unsigned int *)(v38 - 4);
          }
LABEL_28:
          if (v43 != *(_DWORD *)(v38 - 4))
          {
            v30 = 0;
            SlowCase = *(_QWORD *)(v38 + 16 * v43 + 8);
            goto LABEL_137;
          }
        }
        v7 = *(_QWORD *)v5;
        if (*(_QWORD *)v5 == 0x7FFFFFFFFFFFFFFFLL)
        {
          __break(0xC471u);
          JUMPOUT(0x1988CC884);
        }
        v5 += v7;
        v63 = *(JSC::Heap ***)(v3 + 8);
        v64 = v63[5114];
        if (!v64)
          v64 = JSC::GCClient::Heap::unlinkedModuleProgramCodeBlockSpaceSlow(v63 + 4694);
        SlowCase = *((_QWORD *)v64 + 3);
        if (SlowCase >= *((_QWORD *)v64 + 4))
        {
          SlowCase = *((_QWORD *)v64 + 5);
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM((JSC *)v63, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
            SlowCase = JSC::LocalAllocator::allocateSlowCase(v64, v63 + 24, 224, 0, 0);
LABEL_34:
            *(_DWORD *)SlowCase = 0;
            v65 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 41744);
            v66 = *(_DWORD *)(v65 + 8);
            *(_DWORD *)SlowCase = v65 >> 4;
            *(_DWORD *)(SlowCase + 4) = v66;
            v67 = *(unsigned __int16 *)(SlowCase + 28);
            *(_DWORD *)(SlowCase + 8) = *(_DWORD *)v5;
            *(_DWORD *)(SlowCase + 12) = *(_DWORD *)(v5 + 4);
            *(_DWORD *)(SlowCase + 16) = *(_DWORD *)(SlowCase + 16) & 0x80000000 | *(_DWORD *)(v5 + 24) & 0x7FFFFFFF;
            v68 = v67 | (*(unsigned __int8 *)(SlowCase + 30) << 16);
            v69 = *(_QWORD *)(SlowCase + 20) & 0xFFFFFFFF80000000 | *(_DWORD *)(v5 + 28) & 0x7FFFFFFF;
            *(_QWORD *)(SlowCase + 20) = v69;
            v70 = v69 & 0xFFFFFFFF7FFFFFFFLL | (*(_DWORD *)(v5 + 8) << 31);
            *(_QWORD *)(SlowCase + 20) = v70;
            v71 = v70 & 0x80000000FFFFFFFFLL | ((unint64_t)(*(_DWORD *)(v5 + 32) & 0x7FFFFFFF) << 32);
            *(_QWORD *)(SlowCase + 20) = v71;
            v72 = v71 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(*(_DWORD *)(v5 + 8) >> 1) << 63);
            *(_QWORD *)(SlowCase + 20) = v72;
            v73 = v68 & 0xFFFFFFFE | (*(_DWORD *)(v5 + 8) >> 2) & 1;
            *(_QWORD *)(SlowCase + 20) = v72;
            *(_WORD *)(SlowCase + 28) = v73;
            v74 = v73 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(v5 + 8) >> 3) & 1));
            *(_QWORD *)(SlowCase + 20) = v72;
            *(_WORD *)(SlowCase + 28) = v74;
            v75 = v74 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(v5 + 8) >> 4) & 1));
            *(_QWORD *)(SlowCase + 20) = v72;
            *(_WORD *)(SlowCase + 28) = v75;
            v76 = v75 & 0xFFFFFFF7 | (8 * ((*(_DWORD *)(v5 + 8) >> 5) & 1));
            *(_QWORD *)(SlowCase + 20) = v72;
            *(_WORD *)(SlowCase + 28) = v76;
            v77 = v76 & 0xFFFFFFEF | (16 * ((*(_DWORD *)(v5 + 8) >> 6) & 1));
            *(_QWORD *)(SlowCase + 20) = v72;
            *(_WORD *)(SlowCase + 28) = v77;
            v78 = v77 & 0xFFFFFFDF | (32 * ((*(_DWORD *)(v5 + 8) >> 13) & 1));
            *(_QWORD *)(SlowCase + 20) = v72;
            *(_WORD *)(SlowCase + 28) = v78;
            v79 = v78 & 0xFFFFFF3F | (((*(_DWORD *)(v5 + 8) >> 7) & 3) << 6);
            *(_QWORD *)(SlowCase + 20) = v72;
            *(_WORD *)(SlowCase + 28) = v79;
            v80 = v79 & 0xFFFFFCFF | (((*(_DWORD *)(v5 + 8) >> 9) & 3) << 8);
            *(_QWORD *)(SlowCase + 20) = v72;
            *(_WORD *)(SlowCase + 28) = v80;
            v81 = v80 & 0xFFFFF3FF | (((*(_DWORD *)(v5 + 8) >> 11) & 3) << 10);
            *(_QWORD *)(SlowCase + 20) = v72;
            *(_WORD *)(SlowCase + 28) = v81;
            v81 &= 0xFFFE0FFF;
            LODWORD(v69) = v81 | ((unsigned __int16)*(_DWORD *)(v5 + 8) >> 14 << 12);
            *(_QWORD *)(SlowCase + 20) = v72;
            *(_BYTE *)(SlowCase + 30) = BYTE2(v81);
            *(_WORD *)(SlowCase + 28) = v69;
            v82 = v69 & 0xFFFC3FFF | (2 * (*(_DWORD *)(v5 + 8) & 0x10000));
            *(_WORD *)(SlowCase + 28) = v69;
            *(_QWORD *)(SlowCase + 20) = v72;
            *(_BYTE *)(SlowCase + 30) = BYTE2(v82);
            LODWORD(v69) = *(_DWORD *)(v5 + 8) >> 17;
            v82 &= 0xFFF23FFF;
            *(_WORD *)(SlowCase + 28) = v82;
            *(_QWORD *)(SlowCase + 20) = v72;
            *(_WORD *)(SlowCase + 30) = ((v82 & 0xFFF3FFFF | ((v69 & 3) << 18)) >> 16);
            *(_QWORD *)(SlowCase + 32) = 0;
            *(_WORD *)(SlowCase + 40) = *(_WORD *)(v5 + 12);
            *(_BYTE *)(SlowCase + 42) = *(_BYTE *)(v5 + 14);
            *(_BYTE *)(SlowCase + 43) = *(_BYTE *)(v5 + 15);
            *(_QWORD *)(SlowCase + 44) = *(_QWORD *)(v5 + 16);
            LOBYTE(v401[0]) = 0;
            v83 = JSC::CachedPtr<JSC::CachedStringImpl,WTF::StringImpl>::decode<>((_QWORD *)(v5 + 264), (_QWORD *)v3, v401);
            if (v83)
            {
              if (LOBYTE(v401[0]))
              {
                v84 = (_QWORD *)(v3 + 32);
                v85 = *(unsigned int *)(v3 + 44);
                if ((_DWORD)v85 == *(_DWORD *)(v3 + 40))
                {
                  v86 = v85 + (v85 >> 2);
                  if (v86 >= 0x10)
                    v87 = v86 + 1;
                  else
                    v87 = 16;
                  if (v87 <= v85 + 1)
                    v88 = v85 + 1;
                  else
                    v88 = v87;
                  WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v84, v88);
                  v85 = *(unsigned int *)(v3 + 44);
                  v89 = (_QWORD *)(*(_QWORD *)(v3 + 32) + 32 * v85);
                }
                else
                {
                  v89 = (_QWORD *)(*v84 + 32 * v85);
                }
                *v89 = &off_1E35987D8;
                v89[1] = v83;
                v89[3] = v89;
                *(_DWORD *)(v3 + 44) = v85 + 1;
              }
              *v83 += 2;
            }
            *(_DWORD *)(SlowCase + 52) = (_DWORD)v83;
            *(_BYTE *)(SlowCase + 56) = BYTE4(v83);
            LOBYTE(v401[0]) = 0;
            v119 = JSC::CachedPtr<JSC::CachedStringImpl,WTF::StringImpl>::decode<>((_QWORD *)(v5 + 272), (_QWORD *)v3, v401);
            if (v119)
            {
              if (LOBYTE(v401[0]))
              {
                v120 = (_QWORD *)(v3 + 32);
                v121 = *(unsigned int *)(v3 + 44);
                if ((_DWORD)v121 == *(_DWORD *)(v3 + 40))
                {
                  v122 = v121 + (v121 >> 2);
                  if (v122 >= 0x10)
                    v123 = v122 + 1;
                  else
                    v123 = 16;
                  if (v123 <= v121 + 1)
                    v124 = v121 + 1;
                  else
                    v124 = v123;
                  WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v120, v124);
                  v121 = *(unsigned int *)(v3 + 44);
                  v125 = (_QWORD *)(*(_QWORD *)(v3 + 32) + 32 * v121);
                }
                else
                {
                  v125 = (_QWORD *)(*v120 + 32 * v121);
                }
                *v125 = &off_1E35987D8;
                v125[1] = v119;
                v125[3] = v125;
                *(_DWORD *)(v3 + 44) = v121 + 1;
              }
              *v119 += 2;
            }
            *(_DWORD *)(SlowCase + 57) = (_DWORD)v119;
            *(_BYTE *)(SlowCase + 61) = BYTE4(v119);
            *(_QWORD *)(SlowCase + 64) = 0;
            JSC::CachedMetadataTable::decode((uint64_t *)(SlowCase + 72), v5 + 52);
            *(_QWORD *)(SlowCase + 80) = JSC::CachedPtr<JSC::CachedInstructionStream,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>::decode<>((uint64_t *)(v5 + 280), v3, v401);
            *(_OWORD *)(SlowCase + 88) = 0u;
            *(_OWORD *)(SlowCase + 104) = 0u;
            *(_OWORD *)(SlowCase + 120) = 0u;
            *(_OWORD *)(SlowCase + 136) = 0u;
            v133 = JSC::CachedPtr<JSC::CachedCodeBlockRareData,JSC::UnlinkedCodeBlock::RareData>::decode<>((_QWORD *)(v5 + 256), v3, v401);
            v134 = 0;
            *(_QWORD *)(SlowCase + 160) = 0;
            *(_QWORD *)(SlowCase + 168) = 0;
            *(_QWORD *)(SlowCase + 152) = v133;
            *(_DWORD *)(SlowCase + 176) = 0;
            v135 = *(unsigned int *)(v5 + 36);
            if ((_DWORD)v135)
            {
              v134 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v135 + 8));
              *v134 = v135;
              bzero(v134 + 2, 8 * v135);
            }
            *(_QWORD *)(SlowCase + 184) = v134;
            v6 = *(unsigned int *)(v5 + 40);
            if (!(_DWORD)v6)
            {
              v136 = 0;
LABEL_96:
              *(_QWORD *)(SlowCase + 192) = v136;
              v137 = *(unsigned int *)(v5 + 44);
              if ((_DWORD)v137)
              {
                v138 = (_DWORD *)WTF::fastMalloc((WTF *)(2 * v137 + 4));
                *v138 = v137;
                bzero(v138 + 1, 2 * v137);
              }
              else
              {
                v138 = 0;
              }
              *(_QWORD *)(SlowCase + 200) = v138;
              v139 = *(unsigned int *)(v5 + 48);
              if ((_DWORD)v139)
              {
                v140 = (_DWORD *)WTF::fastMalloc((WTF *)(2 * v139 + 4));
                *v140 = v139;
                bzero(v140 + 1, 2 * v139);
              }
              else
              {
                v140 = 0;
              }
              *(_QWORD *)(SlowCase + 208) = v140;
              *(_DWORD *)(SlowCase + 216) = 0;
              if (*(_BYTE *)(*(_QWORD *)(v3 + 8) + 755))
                __dmb(0xAu);
              v141 = *(unsigned int *)(v5 + 312);
              if ((_DWORD)v141)
              {
                v142 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v141 + 8));
                *v142 = v141;
                bzero(v142 + 2, 8 * v141);
                v150 = *(_QWORD *)(SlowCase + 112);
                *(_QWORD *)(SlowCase + 112) = v142;
                if (v150)
                  WTF::fastFree(v150, v143, v144, v145, v146, v147, v148, v149);
                if (*(_DWORD *)(v5 + 312))
                {
                  v151 = 0;
                  v152 = (uint64_t *)(v5 + 304 + *(_QWORD *)(v5 + 304));
                  v153 = 2;
                  while (1)
                  {
                    v154 = *(unsigned int **)(SlowCase + 112);
                    if (v151 >= *v154)
                      break;
                    JSC::CachedJSValue::decode(v152, v3, (uint64_t)&v154[v153], SlowCase, v146, v147, v148, v149);
                    ++v151;
                    v153 += 2;
                    v152 += 2;
                    if (v151 >= *(unsigned int *)(v5 + 312))
                      goto LABEL_109;
                  }
LABEL_256:
                  __break(0xC471u);
                  JUMPOUT(0x1988CC7C4);
                }
              }
LABEL_109:
              v155 = *(unsigned int *)(v5 + 328);
              if ((_DWORD)v155)
              {
                v163 = (_DWORD *)WTF::fastMalloc((WTF *)(v155 + 4));
                *v163 = v155;
                v164 = *(_QWORD *)(SlowCase + 120);
                *(_QWORD *)(SlowCase + 120) = v163;
                if (v164)
                  WTF::fastFree(v164, v156, v157, v158, v159, v160, v161, v162);
                v165 = *(unsigned int *)(v5 + 328);
                if ((_DWORD)v165)
                {
                  v166 = (char *)(v5 + 320 + *(_QWORD *)(v5 + 320));
                  v167 = *(_DWORD **)(SlowCase + 120);
                  v170 = *v167;
                  v168 = v167 + 1;
                  v169 = v170;
                  do
                  {
                    if (!v169)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1988CC804);
                    }
                    v171 = *v166++;
                    *v168++ = v171;
                    --v169;
                    --v165;
                  }
                  while (v165);
                }
              }
              v384 = v7;
              v172 = *(_QWORD *)(v5 + 336);
              if (v172 == 0x7FFFFFFFFFFFFFFFLL)
              {
                __break(0xC471u);
                JUMPOUT(0x1988CC91CLL);
              }
              v173 = (unsigned int *)(v5 + 336 + v172);
              v174 = *v173;
              v175 = v173[1];
              v176 = v173[2];
              v177 = WTF::fastMalloc((WTF *)(8 * v174 + 4 * (v176 + v175) + 24));
              *(_QWORD *)v177 = 0;
              *(_DWORD *)(v177 + 8) = v174;
              *(_DWORD *)(v177 + 12) = v175;
              *(_DWORD *)(v177 + 16) = v176;
              v185 = (v175 + 2 * v174 + v176);
              if ((_DWORD)v185)
              {
                v186 = (_DWORD *)(v177 + 24);
                v187 = (int *)((char *)v173 + *((_QWORD *)v173 + 2) + 16);
                do
                {
                  v188 = *v187++;
                  *v186++ = v188;
                  --v185;
                }
                while (v185);
              }
              v189 = *(_QWORD *)(SlowCase + 160);
              *(_QWORD *)(SlowCase + 160) = v177;
              WTF::fastFree(v189, v178, v179, v180, v181, v182, v183, v184);
              WTF::fastFree(0, v190, v191, v192, v193, v194, v195, v196);
              v197 = *(unsigned int *)(v5 + 360);
              v198 = v387;
              if ((_DWORD)v197)
              {
                if (v197 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1988CCB00);
                }
                v199 = WTF::fastMalloc((WTF *)(8 * v197));
                v204 = v199;
                if (*(_DWORD *)(v5 + 360))
                {
                  v205 = 0;
                  v206 = (int *)(*(_QWORD *)(v5 + 352) + v384 + v385 + 436);
                  v207 = (_DWORD *)(v199 + 4);
                  do
                  {
                    if (v197 == v205)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1988CCAF0);
                    }
                    *(v207 - 1) = *(v206 - 1);
                    v208 = *v206;
                    v206 += 2;
                    *v207 = v208;
                    v207 += 2;
                    ++v205;
                  }
                  while (v205 < *(unsigned int *)(v5 + 360));
                }
                v209 = (int *)(v199 + 8 * v197);
                v210 = (int *)v199;
                do
                {
                  WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int const&>(v401, (uint64_t *)(SlowCase + 144), v210, v210 + 1, v200, v201, v202, v203);
                  v210 += 2;
                }
                while (v210 != v209);
                WTF::fastFree(v204, v211, v212, v213, v200, v201, v202, v203);
                v198 = v387;
              }
              v214 = *(unsigned int *)(v5 + 296);
              if ((_DWORD)v214)
              {
                v222 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v214 + 4));
                *v222 = v214;
                v223 = *(_QWORD *)(SlowCase + 64);
                *(_QWORD *)(SlowCase + 64) = v222;
                if (v223)
                  WTF::fastFree(v223, v215, v216, v217, v218, v219, v220, v221);
                if (*(_DWORD *)(v5 + 296))
                {
                  v224 = 0;
                  v225 = *(unsigned int **)(SlowCase + 64);
                  v228 = *v225;
                  v226 = v225 + 1;
                  v227 = v228;
                  v229 = v384 + *(_QWORD *)(v5 + 288) + v385 + 368;
                  do
                  {
                    if (v227 == v224)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1988CC844);
                    }
                    v226[v224] = *(_DWORD *)(v229 + 4 * v224);
                    ++v224;
                  }
                  while (v224 < *(unsigned int *)(v5 + 296));
                }
              }
              v29 = v386;
              _ZNK3JSC12CachedVectorINS_16CachedIdentifierELm0EN3WTF15CrashOnOverflowENS2_10FastMallocEE6decodeIJENS2_11FixedVectorINS_10IdentifierEEEEEvRNS_7DecoderERT0_DpT_(v5 + 368, v3, (unsigned int **)(SlowCase + 104));
              JSC::CachedVector<JSC::CachedWriteBarrier<JSC::CachedFunctionExecutable,JSC::UnlinkedFunctionExecutable>,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::decode<JSC::UnlinkedCodeBlock *,WTF::FixedVector<JSC::WriteBarrier<JSC::UnlinkedFunctionExecutable,WTF::RawPtrTraits<JSC::UnlinkedFunctionExecutable>>>>(v5 + 384, (uint64_t *)v3, (unint64_t *)(SlowCase + 128), SlowCase);
              JSC::CachedVector<JSC::CachedWriteBarrier<JSC::CachedFunctionExecutable,JSC::UnlinkedFunctionExecutable>,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::decode<JSC::UnlinkedCodeBlock *,WTF::FixedVector<JSC::WriteBarrier<JSC::UnlinkedFunctionExecutable,WTF::RawPtrTraits<JSC::UnlinkedFunctionExecutable>>>>(v5 + 400, (uint64_t *)v3, (unint64_t *)(SlowCase + 136), SlowCase);
              *(_DWORD *)(SlowCase + 216) = *(_DWORD *)(v5 + 416);
              v399 = SlowCase;
              v400 = v9;
              WTF::HashMap<long,void *,WTF::DefaultHash<long>,WTF::HashTraits<long>,WTF::HashTraits<void *>,WTF::HashTableTraits>::add<void *&>(v401, v198, (uint64_t *)&v400, (uint64_t *)&v399, v230, v231, v232, v233);
              v30 = v389;
LABEL_137:
              v234 = v395;
              v235 = v396;
              v27 = v397;
              v395 = 0;
              v397 = 0;
              *(_QWORD *)&v401[0] = *(_QWORD *)v398;
              DWORD2(v401[0]) = *(_DWORD *)&v398[8];
              v389 = v234;
              if (v30)
              {
                if (v30[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
                else
                  --v30[2];
              }
              v236 = v391;
              v390 = v235;
              v391 = v27;
              v26 = v388;
              v7 = v29;
              if (!v236)
                goto LABEL_197;
              goto LABEL_195;
            }
LABEL_242:
            v136 = (_DWORD *)WTF::fastMalloc((WTF *)((8 * v6) | 4));
            *v136 = v6;
            bzero(v136 + 1, 8 * v6);
            goto LABEL_96;
          }
          v380 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v64 + 6);
          *((_QWORD *)v64 + 4) = SlowCase + HIDWORD(v380);
          *((_QWORD *)v64 + 5) = SlowCase + (int)v380;
        }
        *((_QWORD *)v64 + 3) = SlowCase + 224;
        goto LABEL_34;
      }
    }
LABEL_241:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_242;
  }
  v383 = v4;
  v395 = 0;
  v396 = 0;
  *(_DWORD *)v398 = 0;
  v397 = 0;
  v4 = &v395;
  JSC::CachedUnlinkedSourceCodeShape<JSC::UnlinkedSourceCode>::decode((double *)(v14 + 32), v3, (uint64_t)&v395);
  JSC::CachedString::decode(v14 + 48, v3, &v397);
  v46 = 0;
  v47 = v14;
  SlowCase = 0;
  *(_DWORD *)v398 = *(_DWORD *)(v47 + 64);
  *(int32x2_t *)&v398[4] = vrev64_s32(*(int32x2_t *)(v47 + 68));
  v49 = *(_QWORD *)(v47 + 80);
  v5 = v47 + 80;
  v48 = v49;
  if (v49 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v386 = v7;
    v387 = (uint64_t *)(v3 + 24);
    v6 = *(_QWORD *)(v3 + 16);
    v50 = *(unsigned int *)(v6 + 32);
    if ((_DWORD)v50 == -1)
      goto LABEL_241;
    SlowCase = v6 + 16;
    v7 = (uint64_t)&v400;
    *(_QWORD *)&v401[0] = &v400;
    v51 = ((uint64_t (*)(_OWORD *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v50])(v401, v6 + 16);
    v52 = *(unsigned int *)(v6 + 32);
    if ((_DWORD)v52 == -1)
      goto LABEL_241;
    v53 = v51;
    *(_QWORD *)&v401[0] = &v400;
    ((void (*)(_OWORD *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v52])(v401, v6 + 16);
    v54 = v5 + v48 - v53;
    v7 = v386;
    v55 = *v387;
    if (*v387)
    {
      v56 = *(_DWORD *)(v55 - 8);
      v57 = (v54 + ~(v54 << 32)) ^ ((unint64_t)(v54 + ~(v54 << 32)) >> 22);
      v58 = 9 * ((v57 + ~(v57 << 13)) ^ ((v57 + ~(v57 << 13)) >> 8));
      v59 = (v58 ^ (v58 >> 15)) + ~((v58 ^ (v58 >> 15)) << 27);
      v60 = v56 & ((v59 >> 31) ^ v59);
      v61 = *(_QWORD *)(v55 + 16 * v60);
      if (v61 != v54)
      {
        v62 = 1;
        while (v61)
        {
          v60 = ((_DWORD)v60 + v62) & v56;
          v61 = *(_QWORD *)(v55 + 16 * v60);
          ++v62;
          if (v61 == v54)
            goto LABEL_46;
        }
        v60 = *(unsigned int *)(v55 - 4);
      }
LABEL_46:
      if (v60 != *(_DWORD *)(v55 - 4))
      {
        v46 = 0;
        SlowCase = *(_QWORD *)(v55 + 16 * v60 + 8);
        goto LABEL_191;
      }
    }
    v90 = *(_QWORD *)v5;
    if (*(_QWORD *)v5 == 0x7FFFFFFFFFFFFFFFLL)
    {
      __break(0xC471u);
      JUMPOUT(0x1988CC8A4);
    }
    v91 = v5 + v90;
    v92 = *(_QWORD *)(v3 + 8);
    v93 = *(_QWORD **)(v92 + 40920);
    if (!v93)
      v93 = (_QWORD *)JSC::GCClient::Heap::unlinkedProgramCodeBlockSpaceSlow((JSC::Heap **)(v92 + 37552));
    SlowCase = v93[3];
    if (SlowCase >= v93[4])
    {
      SlowCase = v93[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v92, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v93, v92 + 192, 272, 0, 0);
        goto LABEL_52;
      }
      v381 = *(_QWORD *)(SlowCase + 8) ^ v93[6];
      v93[4] = SlowCase + HIDWORD(v381);
      v93[5] = SlowCase + (int)v381;
    }
    v93[3] = SlowCase + 272;
LABEL_52:
    *(_DWORD *)SlowCase = 0;
    v94 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 41720);
    v95 = *(_DWORD *)(v94 + 8);
    *(_DWORD *)SlowCase = v94 >> 4;
    *(_DWORD *)(SlowCase + 4) = v95;
    v96 = *(unsigned __int16 *)(SlowCase + 28);
    *(_DWORD *)(SlowCase + 8) = *(_DWORD *)v91;
    *(_DWORD *)(SlowCase + 12) = *(_DWORD *)(v91 + 4);
    *(_DWORD *)(SlowCase + 16) = *(_DWORD *)(SlowCase + 16) & 0x80000000 | *(_DWORD *)(v91 + 24) & 0x7FFFFFFF;
    v97 = v96 | (*(unsigned __int8 *)(SlowCase + 30) << 16);
    v98 = *(_QWORD *)(SlowCase + 20) & 0xFFFFFFFF80000000 | *(_DWORD *)(v91 + 28) & 0x7FFFFFFF;
    *(_QWORD *)(SlowCase + 20) = v98;
    v99 = v98 & 0xFFFFFFFF7FFFFFFFLL | (*(_DWORD *)(v91 + 8) << 31);
    *(_QWORD *)(SlowCase + 20) = v99;
    v100 = v99 & 0x80000000FFFFFFFFLL | ((unint64_t)(*(_DWORD *)(v91 + 32) & 0x7FFFFFFF) << 32);
    *(_QWORD *)(SlowCase + 20) = v100;
    v101 = v100 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(*(_DWORD *)(v91 + 8) >> 1) << 63);
    *(_QWORD *)(SlowCase + 20) = v101;
    v102 = v97 & 0xFFFFFFFE | (*(_DWORD *)(v91 + 8) >> 2) & 1;
    *(_QWORD *)(SlowCase + 20) = v101;
    *(_WORD *)(SlowCase + 28) = v102;
    v103 = v102 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(v91 + 8) >> 3) & 1));
    *(_QWORD *)(SlowCase + 20) = v101;
    *(_WORD *)(SlowCase + 28) = v103;
    v104 = v103 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(v91 + 8) >> 4) & 1));
    *(_QWORD *)(SlowCase + 20) = v101;
    *(_WORD *)(SlowCase + 28) = v104;
    v105 = v104 & 0xFFFFFFF7 | (8 * ((*(_DWORD *)(v91 + 8) >> 5) & 1));
    *(_QWORD *)(SlowCase + 20) = v101;
    *(_WORD *)(SlowCase + 28) = v105;
    v106 = v105 & 0xFFFFFFEF | (16 * ((*(_DWORD *)(v91 + 8) >> 6) & 1));
    *(_QWORD *)(SlowCase + 20) = v101;
    *(_WORD *)(SlowCase + 28) = v106;
    v107 = v106 & 0xFFFFFFDF | (32 * ((*(_DWORD *)(v91 + 8) >> 13) & 1));
    *(_QWORD *)(SlowCase + 20) = v101;
    *(_WORD *)(SlowCase + 28) = v107;
    v108 = v107 & 0xFFFFFF3F | (((*(_DWORD *)(v91 + 8) >> 7) & 3) << 6);
    *(_QWORD *)(SlowCase + 20) = v101;
    *(_WORD *)(SlowCase + 28) = v108;
    v109 = v108 & 0xFFFFFCFF | (((*(_DWORD *)(v91 + 8) >> 9) & 3) << 8);
    *(_QWORD *)(SlowCase + 20) = v101;
    *(_WORD *)(SlowCase + 28) = v109;
    v110 = v109 & 0xFFFFF3FF | (((*(_DWORD *)(v91 + 8) >> 11) & 3) << 10);
    *(_QWORD *)(SlowCase + 20) = v101;
    *(_WORD *)(SlowCase + 28) = v110;
    v110 &= 0xFFFE0FFF;
    LODWORD(v98) = v110 | ((unsigned __int16)*(_DWORD *)(v91 + 8) >> 14 << 12);
    *(_QWORD *)(SlowCase + 20) = v101;
    *(_BYTE *)(SlowCase + 30) = BYTE2(v110);
    *(_WORD *)(SlowCase + 28) = v98;
    v111 = v98 & 0xFFFC3FFF | (2 * (*(_DWORD *)(v91 + 8) & 0x10000));
    *(_WORD *)(SlowCase + 28) = v98;
    *(_QWORD *)(SlowCase + 20) = v101;
    *(_BYTE *)(SlowCase + 30) = BYTE2(v111);
    LODWORD(v98) = *(_DWORD *)(v91 + 8) >> 17;
    v111 &= 0xFFF23FFF;
    *(_WORD *)(SlowCase + 28) = v111;
    *(_QWORD *)(SlowCase + 20) = v101;
    *(_WORD *)(SlowCase + 30) = ((v111 & 0xFFF3FFFF | ((v98 & 3) << 18)) >> 16);
    *(_QWORD *)(SlowCase + 32) = 0;
    *(_WORD *)(SlowCase + 40) = *(_WORD *)(v91 + 12);
    *(_BYTE *)(SlowCase + 42) = *(_BYTE *)(v91 + 14);
    *(_BYTE *)(SlowCase + 43) = *(_BYTE *)(v91 + 15);
    *(_QWORD *)(SlowCase + 44) = *(_QWORD *)(v91 + 16);
    LOBYTE(v401[0]) = 0;
    v112 = JSC::CachedPtr<JSC::CachedStringImpl,WTF::StringImpl>::decode<>((_QWORD *)(v91 + 264), (_QWORD *)v3, v401);
    if (v112)
    {
      if (LOBYTE(v401[0]))
      {
        v113 = (_QWORD *)(v3 + 32);
        v114 = *(unsigned int *)(v3 + 44);
        if ((_DWORD)v114 == *(_DWORD *)(v3 + 40))
        {
          v115 = v114 + (v114 >> 2);
          if (v115 >= 0x10)
            v116 = v115 + 1;
          else
            v116 = 16;
          if (v116 <= v114 + 1)
            v117 = v114 + 1;
          else
            v117 = v116;
          WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v113, v117);
          v114 = *(unsigned int *)(v3 + 44);
          v118 = (_QWORD *)(*(_QWORD *)(v3 + 32) + 32 * v114);
        }
        else
        {
          v118 = (_QWORD *)(*v113 + 32 * v114);
        }
        *v118 = &off_1E35987D8;
        v118[1] = v112;
        v118[3] = v118;
        *(_DWORD *)(v3 + 44) = v114 + 1;
      }
      *v112 += 2;
    }
    *(_DWORD *)(SlowCase + 52) = (_DWORD)v112;
    *(_BYTE *)(SlowCase + 56) = BYTE4(v112);
    LOBYTE(v401[0]) = 0;
    v126 = JSC::CachedPtr<JSC::CachedStringImpl,WTF::StringImpl>::decode<>((_QWORD *)(v91 + 272), (_QWORD *)v3, v401);
    if (v126)
    {
      if (LOBYTE(v401[0]))
      {
        v127 = (_QWORD *)(v3 + 32);
        v128 = *(unsigned int *)(v3 + 44);
        if ((_DWORD)v128 == *(_DWORD *)(v3 + 40))
        {
          v129 = v128 + (v128 >> 2);
          if (v129 >= 0x10)
            v130 = v129 + 1;
          else
            v130 = 16;
          if (v130 <= v128 + 1)
            v131 = v128 + 1;
          else
            v131 = v130;
          WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v127, v131);
          v128 = *(unsigned int *)(v3 + 44);
          v132 = (_QWORD *)(*(_QWORD *)(v3 + 32) + 32 * v128);
        }
        else
        {
          v132 = (_QWORD *)(*v127 + 32 * v128);
        }
        *v132 = &off_1E35987D8;
        v132[1] = v126;
        v132[3] = v132;
        *(_DWORD *)(v3 + 44) = v128 + 1;
      }
      *v126 += 2;
    }
    *(_DWORD *)(SlowCase + 57) = (_DWORD)v126;
    *(_BYTE *)(SlowCase + 61) = BYTE4(v126);
    *(_QWORD *)(SlowCase + 64) = 0;
    JSC::CachedMetadataTable::decode((uint64_t *)(SlowCase + 72), v91 + 52);
    *(_QWORD *)(SlowCase + 80) = JSC::CachedPtr<JSC::CachedInstructionStream,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>::decode<>((uint64_t *)(v91 + 280), v3, v401);
    *(_OWORD *)(SlowCase + 88) = 0u;
    *(_OWORD *)(SlowCase + 104) = 0u;
    *(_OWORD *)(SlowCase + 120) = 0u;
    *(_OWORD *)(SlowCase + 136) = 0u;
    v237 = JSC::CachedPtr<JSC::CachedCodeBlockRareData,JSC::UnlinkedCodeBlock::RareData>::decode<>((_QWORD *)(v91 + 256), v3, v401);
    v238 = 0;
    *(_QWORD *)(SlowCase + 160) = 0;
    *(_QWORD *)(SlowCase + 168) = 0;
    *(_QWORD *)(SlowCase + 152) = v237;
    *(_DWORD *)(SlowCase + 176) = 0;
    v239 = *(unsigned int *)(v91 + 36);
    if ((_DWORD)v239)
    {
      v238 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v239 + 8));
      *v238 = v239;
      bzero(v238 + 2, 8 * v239);
    }
    *(_QWORD *)(SlowCase + 184) = v238;
    v240 = *(unsigned int *)(v91 + 40);
    if ((_DWORD)v240)
    {
      v241 = (_DWORD *)WTF::fastMalloc((WTF *)((8 * *(unsigned int *)(v91 + 40)) | 4));
      *v241 = v240;
      bzero(v241 + 1, 8 * v240);
    }
    else
    {
      v241 = 0;
    }
    *(_QWORD *)(SlowCase + 192) = v241;
    v242 = *(unsigned int *)(v91 + 44);
    if ((_DWORD)v242)
    {
      v243 = (_DWORD *)WTF::fastMalloc((WTF *)(2 * v242 + 4));
      *v243 = v242;
      bzero(v243 + 1, 2 * v242);
    }
    else
    {
      v243 = 0;
    }
    *(_QWORD *)(SlowCase + 200) = v243;
    v244 = *(unsigned int *)(v91 + 48);
    if ((_DWORD)v244)
    {
      v245 = (_DWORD *)WTF::fastMalloc((WTF *)(2 * v244 + 4));
      *v245 = v244;
      bzero(v245 + 1, 2 * v244);
    }
    else
    {
      v245 = 0;
    }
    *(_QWORD *)(SlowCase + 216) = 0;
    *(_QWORD *)(SlowCase + 208) = v245;
    *(_BYTE *)(SlowCase + 224) = 0;
    *(_QWORD *)(SlowCase + 256) = 0;
    *(_QWORD *)(SlowCase + 232) = 0;
    *(_QWORD *)(SlowCase + 240) = 0;
    *(_BYTE *)(SlowCase + 248) = 0;
    if (*(_BYTE *)(*(_QWORD *)(v3 + 8) + 755))
      __dmb(0xAu);
    v246 = *(unsigned int *)(v91 + 312);
    if ((_DWORD)v246)
    {
      v247 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v246 + 8));
      *v247 = v246;
      bzero(v247 + 2, 8 * v246);
      v255 = *(_QWORD *)(SlowCase + 112);
      *(_QWORD *)(SlowCase + 112) = v247;
      if (v255)
        WTF::fastFree(v255, v248, v249, v250, v251, v252, v253, v254);
      if (*(_DWORD *)(v91 + 312))
      {
        v256 = 0;
        v257 = (uint64_t *)(v91 + 304 + *(_QWORD *)(v91 + 304));
        v258 = 2;
        do
        {
          v259 = *(unsigned int **)(SlowCase + 112);
          if (v256 >= *v259)
          {
            __break(0xC471u);
            JUMPOUT(0x1988CC7E4);
          }
          JSC::CachedJSValue::decode(v257, v3, (uint64_t)&v259[v258], SlowCase, v251, v252, v253, v254);
          ++v256;
          v258 += 2;
          v257 += 2;
        }
        while (v256 < *(unsigned int *)(v91 + 312));
      }
    }
    v260 = *(unsigned int *)(v91 + 328);
    if ((_DWORD)v260)
    {
      v268 = (_DWORD *)WTF::fastMalloc((WTF *)(v260 + 4));
      *v268 = v260;
      v269 = *(_QWORD *)(SlowCase + 120);
      *(_QWORD *)(SlowCase + 120) = v268;
      if (v269)
        WTF::fastFree(v269, v261, v262, v263, v264, v265, v266, v267);
      v270 = *(unsigned int *)(v91 + 328);
      if ((_DWORD)v270)
      {
        v271 = (char *)(v91 + 320 + *(_QWORD *)(v91 + 320));
        v272 = *(_DWORD **)(SlowCase + 120);
        v275 = *v272;
        v273 = v272 + 1;
        v274 = v275;
        do
        {
          if (!v274)
          {
            __break(0xC471u);
            JUMPOUT(0x1988CC824);
          }
          v276 = *v271++;
          *v273++ = v276;
          --v274;
          --v270;
        }
        while (v270);
      }
    }
    v382 = v90;
    v277 = *(_QWORD *)(v91 + 336);
    if (v277 == 0x7FFFFFFFFFFFFFFFLL)
    {
      __break(0xC471u);
      JUMPOUT(0x1988CC93CLL);
    }
    v278 = (unsigned int *)(v91 + 336 + v277);
    v279 = *v278;
    v280 = v278[1];
    v281 = v278[2];
    v282 = WTF::fastMalloc((WTF *)(8 * v279 + 4 * (v281 + v280) + 24));
    *(_QWORD *)v282 = 0;
    *(_DWORD *)(v282 + 8) = v279;
    *(_DWORD *)(v282 + 12) = v280;
    *(_DWORD *)(v282 + 16) = v281;
    v290 = (v280 + 2 * v279 + v281);
    if ((_DWORD)v290)
    {
      v291 = (_DWORD *)(v282 + 24);
      v292 = (int *)((char *)v278 + *((_QWORD *)v278 + 2) + 16);
      do
      {
        v293 = *v292++;
        *v291++ = v293;
        --v290;
      }
      while (v290);
    }
    v294 = *(_QWORD *)(SlowCase + 160);
    *(_QWORD *)(SlowCase + 160) = v282;
    WTF::fastFree(v294, v283, v284, v285, v286, v287, v288, v289);
    WTF::fastFree(0, v295, v296, v297, v298, v299, v300, v301);
    v302 = *(unsigned int *)(v91 + 360);
    v7 = v386;
    v303 = (uint64_t *)(v3 + 24);
    if ((_DWORD)v302)
    {
      if (v302 >> 29)
        goto LABEL_256;
      v304 = WTF::fastMalloc((WTF *)(8 * v302));
      v309 = v304;
      if (*(_DWORD *)(v91 + 360))
      {
        v310 = 0;
        v311 = (int *)(*(_QWORD *)(v91 + 352) + v382 + v385 + 436);
        v312 = (_DWORD *)(v304 + 4);
        do
        {
          if (v302 == v310)
          {
            __break(0xC471u);
            JUMPOUT(0x1988CCAF8);
          }
          *(v312 - 1) = *(v311 - 1);
          v313 = *v311;
          v311 += 2;
          *v312 = v313;
          v312 += 2;
          ++v310;
        }
        while (v310 < *(unsigned int *)(v91 + 360));
      }
      v314 = (int *)(v304 + 8 * v302);
      v315 = (int *)v304;
      do
      {
        WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int const&>(v401, (uint64_t *)(SlowCase + 144), v315, v315 + 1, v305, v306, v307, v308);
        v315 += 2;
      }
      while (v315 != v314);
      WTF::fastFree(v309, v316, v317, v318, v305, v306, v307, v308);
      v303 = (uint64_t *)(v3 + 24);
    }
    v319 = *(unsigned int *)(v91 + 296);
    if ((_DWORD)v319)
    {
      v327 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v319 + 4));
      *v327 = v319;
      v328 = *(_QWORD *)(SlowCase + 64);
      *(_QWORD *)(SlowCase + 64) = v327;
      if (v328)
        WTF::fastFree(v328, v320, v321, v322, v323, v324, v325, v326);
      if (*(_DWORD *)(v91 + 296))
      {
        v329 = 0;
        v330 = *(unsigned int **)(SlowCase + 64);
        v333 = *v330;
        v331 = v330 + 1;
        v332 = v333;
        v334 = v382 + *(_QWORD *)(v91 + 288) + v385 + 368;
        do
        {
          if (v332 == v329)
          {
            __break(0xC471u);
            JUMPOUT(0x1988CC864);
          }
          v331[v329] = *(_DWORD *)(v334 + 4 * v329);
          ++v329;
        }
        while (v329 < *(unsigned int *)(v91 + 296));
      }
    }
    _ZNK3JSC12CachedVectorINS_16CachedIdentifierELm0EN3WTF15CrashOnOverflowENS2_10FastMallocEE6decodeIJENS2_11FixedVectorINS_10IdentifierEEEEEvRNS_7DecoderERT0_DpT_(v91 + 368, v3, (unsigned int **)(SlowCase + 104));
    JSC::CachedVector<JSC::CachedWriteBarrier<JSC::CachedFunctionExecutable,JSC::UnlinkedFunctionExecutable>,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::decode<JSC::UnlinkedCodeBlock *,WTF::FixedVector<JSC::WriteBarrier<JSC::UnlinkedFunctionExecutable,WTF::RawPtrTraits<JSC::UnlinkedFunctionExecutable>>>>(v91 + 384, (uint64_t *)v3, (unint64_t *)(SlowCase + 128), SlowCase);
    JSC::CachedVector<JSC::CachedWriteBarrier<JSC::CachedFunctionExecutable,JSC::UnlinkedFunctionExecutable>,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::decode<JSC::UnlinkedCodeBlock *,WTF::FixedVector<JSC::WriteBarrier<JSC::UnlinkedFunctionExecutable,WTF::RawPtrTraits<JSC::UnlinkedFunctionExecutable>>>>(v91 + 400, (uint64_t *)v3, (unint64_t *)(SlowCase + 136), SlowCase);
    JSC::CachedVariableEnvironment::decode(v91 + 416, v3, SlowCase + 216);
    JSC::CachedVariableEnvironment::decode(v91 + 456, v3, SlowCase + 240);
    v399 = SlowCase;
    v400 = (uint64_t (**)())v54;
    WTF::HashMap<long,void *,WTF::DefaultHash<long>,WTF::HashTraits<long>,WTF::HashTraits<void *>,WTF::HashTableTraits>::add<void *&>(v401, v303, (uint64_t *)&v400, (uint64_t *)&v399, v335, v336, v337, v338);
    v46 = v389;
  }
LABEL_191:
  v339 = v395;
  v340 = v396;
  v27 = v397;
  v395 = 0;
  v397 = 0;
  *(_QWORD *)&v401[0] = *(_QWORD *)v398;
  DWORD2(v401[0]) = *(_DWORD *)&v398[8];
  v389 = v339;
  v4 = v383;
  if (v46)
  {
    if (v46[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
    else
      --v46[2];
  }
  v236 = v391;
  v390 = v340;
  v391 = v27;
  v26 = v388;
  if (!v236)
    goto LABEL_197;
LABEL_195:
  if (*(_DWORD *)v236 == 2)
  {
    WTF::StringImpl::~StringImpl(v236, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v364, v365, v366, v367, v368, v369, v370, v371);
  }
  else
  {
    *(_DWORD *)v236 -= 2;
  }
LABEL_197:
  v392 = *(_QWORD *)&v401[0];
  v393 = DWORD2(v401[0]);
  v394 = SlowCase;
  v341 = v397;
  v397 = 0;
  if (v341)
  {
    if (*(_DWORD *)v341 == 2)
    {
      WTF::StringImpl::~StringImpl(v341, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v372, v373, v374, v375, v376, v377, v378, v379);
    }
    else
    {
      *(_DWORD *)v341 -= 2;
    }
  }
  v342 = v395;
  v395 = 0;
  if (v342)
  {
    if (v342[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v342 + 8))(v342);
    else
      --v342[2];
  }
LABEL_203:
  v343 = *((_DWORD *)v4 + 229) - 1;
  *((_DWORD *)v4 + 229) = v343;
  if (*((unsigned __int8 *)v4 + 1198) | HIBYTE(dword_1ECF4C5CE) && !v343)
  {
    *((_BYTE *)v4 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)(v4 + 24), 0);
  }
  if (v26)
  {
    v344 = JSC::SourceCodeKey::operator==(&v389, v7, v20);
    v27 = v391;
    if (v344)
      v345 = v394;
    else
      v345 = 0;
  }
  else
  {
    v345 = 0;
  }
  v391 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v356, v357, v358, v359, v360, v361, v362, v363);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v346 = v389;
  v389 = 0;
  if (v346)
  {
    if (v346[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v346 + 8))(v346);
    else
      --v346[2];
  }
  if (*(_DWORD *)v3 == 1)
  {
    JSC::Decoder::~Decoder((JSC::Decoder *)v3);
    WTF::fastFree(v348, v349, v350, v351, v352, v353, v354, v355);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return v345;
}

BOOL JSC::SourceCodeKey::operator==(_QWORD *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  unsigned int *v4;
  WTF *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;

  if (*((_DWORD *)a1 + 8) != *(_DWORD *)(a2 + 32))
    return 0;
  v4 = (unsigned int *)a2;
  if (*((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 2) != *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 8))
    return 0;
  if (*((_DWORD *)a1 + 6) != *(_DWORD *)(a2 + 24))
    return 0;
  if (*((_DWORD *)a1 + 7) != *(_DWORD *)(a2 + 28))
    return 0;
  v6 = (WTF *)a1[2];
  v7 = *(const WTF::StringImpl **)(a2 + 16);
  if (v6 != v7 && (!v6 || !v7 || !WTF::equal(v6, v7, a3)))
    return 0;
  v8 = *a1;
  if ((*(_BYTE *)(*a1 + 24) & 1) != 0)
  {
    LODWORD(v22) = *(_DWORD *)(v8 + 36);
    v22 = (_DWORD)v22 == *(_DWORD *)(v8 + 28) ? v22 : (v22 + 1);
    v23 = *(_QWORD *)(v8 + 16);
    if (v23)
    {
      v9 = *(unsigned __int8 **)(v23 + 8);
      v24 = *(unsigned int *)(v23 + 4) | ((unint64_t)((*(_DWORD *)(v23 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v9 = 0;
      v24 = 0x100000000;
    }
    if (v24 <= v22)
    {
      v10 = 0x100000000;
      v9 = "";
    }
    else
    {
      v25 = *(_DWORD *)(v8 + 40) - v22;
      if ((int)v24 - (int)v22 > v25 || (v25 = v24 - v22, (_DWORD)v22))
      {
        v10 = v25;
        v26 = v24 - (unint64_t)v22;
        if ((v24 & 0x100000000) != 0)
        {
          if (v26 < v10)
            goto LABEL_70;
          v9 += v22;
          v10 |= 0x100000000uLL;
        }
        else
        {
          if (v26 < v10)
            goto LABEL_70;
          v9 += 2 * v22;
        }
      }
      else
      {
        v10 = v24;
      }
    }
  }
  else
  {
    v9 = 0;
    v10 = 0x100000000;
  }
  v11 = *(_QWORD *)v4;
  if ((*(_BYTE *)(*(_QWORD *)v4 + 24) & 1) != 0)
  {
    LODWORD(v27) = *(_DWORD *)(v11 + 36);
    v27 = (_DWORD)v27 == *(_DWORD *)(v11 + 28) ? v27 : (v27 + 1);
    v28 = *(_QWORD *)(v11 + 16);
    if (v28)
    {
      v12 = *(unsigned __int8 **)(v28 + 8);
      v29 = *(unsigned int *)(v28 + 4) | ((unint64_t)((*(_DWORD *)(v28 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v12 = 0;
      v29 = 0x100000000;
    }
    if (v29 <= v27)
    {
      v13 = 0x100000000;
      v12 = "";
    }
    else
    {
      v30 = *(_DWORD *)(v11 + 40) - v27;
      if ((int)v29 - (int)v27 > v30 || (v30 = v29 - v27, (_DWORD)v27))
      {
        v13 = v30;
        v31 = v29 - (unint64_t)v27;
        if ((v29 & 0x100000000) != 0)
        {
          if (v31 < v13)
            goto LABEL_70;
          v12 += v27;
          v13 |= 0x100000000uLL;
        }
        else
        {
          if (v31 < v13)
            goto LABEL_70;
          v12 += 2 * v27;
        }
      }
      else
      {
        v13 = v29;
      }
    }
  }
  else
  {
    v12 = 0;
    v13 = 0x100000000;
  }
  if (!WTF::operator==(v9, v10, v12, v13))
    return 0;
  if (!*a1)
    goto LABEL_71;
  v15 = *((unsigned int *)a1 + 2);
  v14 = *((_DWORD *)a1 + 3);
  v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  if (v17 <= v15)
  {
    v20 = 0x100000000;
    v18 = "";
  }
  else
  {
    v18 = (unsigned __int8 *)v16;
    v19 = v14 - v15;
    if ((int)v17 - (int)v15 > (v14 - v15) || (v19 = v17 - v15, (_DWORD)v15))
    {
      v20 = v19;
      v21 = v17 - v15;
      if ((v17 & 0xFF00000000) != 0)
      {
        if (v21 < v20)
          goto LABEL_70;
        v18 = (unsigned __int8 *)(v16 + v15);
        v20 |= 0x100000000uLL;
      }
      else
      {
        if (v21 < v20)
          goto LABEL_70;
        v18 = (unsigned __int8 *)(v16 + 2 * v15);
      }
    }
    else
    {
      v20 = v17;
    }
  }
  while (1)
  {
    v32 = *(_QWORD *)v4;
    if (!*(_QWORD *)v4)
      break;
    v33 = v4[2];
    v4 = (unsigned int *)v4[3];
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
    if (v35 <= v33)
    {
      v38 = 0x100000000;
      v36 = "";
      return WTF::operator==(v18, v20, v36, v38);
    }
    v36 = (unsigned __int8 *)v34;
    v37 = (_DWORD)v4 - v33;
    if ((int)v35 - (int)v33 <= ((_DWORD)v4 - v33))
    {
      v37 = v35 - v33;
      if (!(_DWORD)v33)
      {
        v38 = v35;
        return WTF::operator==(v18, v20, v36, v38);
      }
    }
    v38 = v37;
    v39 = v35 - v33;
    if ((v35 & 0xFF00000000) != 0)
    {
      if (v39 >= v38)
      {
        v36 = (unsigned __int8 *)(v34 + v33);
        v38 |= 0x100000000uLL;
        return WTF::operator==(v18, v20, v36, v38);
      }
    }
    else if (v39 >= v38)
    {
      v36 = (unsigned __int8 *)(v34 + 2 * v33);
      return WTF::operator==(v18, v20, v36, v38);
    }
LABEL_70:
    __break(1u);
LABEL_71:
    v18 = 0;
    v20 = 0x100000000;
  }
  v36 = 0;
  v38 = 0x100000000;
  return WTF::operator==(v18, v20, v36, v38);
}

BOOL JSC::isCachedBytecodeStillValid(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _BOOL8 isStillValid;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;

  v4 = *(unsigned int *)(*a2 + 32);
  if ((_DWORD)v4 == -1)
    goto LABEL_17;
  v9 = *a2 + 16;
  v29 = &v28;
  if (!((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v29, v9))return 0;
  v10 = *a2;
  v11 = *(unsigned int *)(*a2 + 32);
  if ((_DWORD)v11 == -1
    || (v29 = &v28,
        v12 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v29, v10 + 16), v13 = *(unsigned int *)(v10 + 32), (_DWORD)v13 == -1))
  {
LABEL_17:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_18;
  }
  v14 = (JSC *)v12;
  v29 = &v28;
  ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v29, v10 + 16);
  v15 = *a2;
  *a2 = 0;
  v16 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v16 = 1;
  *(_QWORD *)(v16 + 8) = a1;
  *(_QWORD *)(v16 + 16) = v15;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_QWORD *)(v16 + 56) = 0;
  if (a4 > 3)
    v17 = -1;
  else
    v17 = dword_1991575E0[a4];
  if (JSC::GenericCacheEntry::isUpToDate(v14, v16))
  {
    if (v17 <= 1)
    {
      isStillValid = JSC::CacheEntry<JSC::UnlinkedProgramCodeBlock>::isStillValid((uint64_t)v14, v16, a3);
      goto LABEL_13;
    }
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1988CD014);
  }
  isStillValid = 0;
LABEL_13:
  if (*(_DWORD *)v16 == 1)
  {
    JSC::Decoder::~Decoder((JSC::Decoder *)v16);
    WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
  }
  else
  {
    --*(_DWORD *)v16;
  }
  return isStillValid;
}

unint64_t JSC::decodeFunctionCodeBlock(uint64_t a1, int a2, unint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned int *)(v4 + 32);
  if ((_DWORD)v5 == -1
    || (v17 = &v16,
        v10 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v17, v4 + 16), v11 = *(unsigned int *)(v4 + 32), (_DWORD)v11 == -1))
  {
    v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return JSC::call(v15);
  }
  v12 = v10;
  v17 = &v16;
  result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v17, v4 + 16);
  if (result < a2)
  {
    __break(1u);
LABEL_8:
    if (*(_DWORD *)(v14 + 760) >= *(unsigned __int8 *)(a4 + 7))
      return JSC::Heap::writeBarrierSlowPath(v14 + 192, a4);
    return result;
  }
  LOBYTE(v17) = 0;
  result = JSC::CachedPtr<JSC::CachedFunctionCodeBlock,JSC::UnlinkedFunctionCodeBlock>::decode<>((uint64_t *)(v12 + a2), a1, (uint64_t)&v17);
  if (result)
  {
    v14 = *(_QWORD *)(a1 + 8);
    *a3 = result;
    if (a4)
      goto LABEL_8;
  }
  return result;
}

uint64_t JSC::call(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::VM *v19;

  v19 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    if (*(_BYTE *)(a2 + 5) == 26)
    {
      v13 = *(_QWORD *)(a2 + 24);
      if ((v13 & 1) != 0)
        v13 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v13 + 5) == 8)
      {
        LOBYTE(v16) = 1;
        v17 = *(_QWORD *)(v13 + 40);
        LOBYTE(v18) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C));
      }
      else
      {
        LOBYTE(v16) = 2;
        v14 = *(_QWORD *)(a2 + 16);
        v17 = v13;
        v18 = v14;
      }
      return JSC::Interpreter::executeCall((JSC::VM *)(*(_QWORD *)(a1 + 56) + 90560), a2, (unsigned __int8 *)&v16, a2, a3, a6, a7, a8);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                           + 0x38))(&v16, a2);
    if ((_BYTE)v16)
      return JSC::Interpreter::executeCall((JSC::VM *)(*(_QWORD *)(a1 + 56) + 90560), a2, (unsigned __int8 *)&v16, a2, a3, a6, a7, a8);
  }
  return JSC::throwTypeError(a1, &v19, a4, a5);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::VM *v20;

  v20 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v17) = 0;
  }
  else
  {
    if (*(_BYTE *)(a2 + 5) == 26)
    {
      v14 = *(_QWORD *)(a2 + 24);
      if ((v14 & 1) != 0)
        v14 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v14 + 5) == 8)
      {
        LOBYTE(v17) = 1;
        v18 = *(_QWORD *)(v14 + 40);
        LOBYTE(v19) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C));
      }
      else
      {
        LOBYTE(v17) = 2;
        v15 = *(_QWORD *)(a2 + 16);
        v18 = v14;
        v19 = v15;
      }
      return JSC::Interpreter::executeCall((JSC::VM *)(*(_QWORD *)(a1 + 56) + 90560), a2, (unsigned __int8 *)&v17, a3, a4, a6, a7, a8);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                           + 0x38))(&v17, a2);
    if ((_BYTE)v17)
      return JSC::Interpreter::executeCall((JSC::VM *)(*(_QWORD *)(a1 + 56) + 90560), a2, (unsigned __int8 *)&v17, a3, a4, a6, a7, a8);
  }
  return JSC::throwTypeError(a1, &v20, a5, a6);
}

uint64_t JSC::call(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  int v18;
  int v19;
  unsigned int *v20;
  int v21;
  unsigned int v22;
  JSC::CodeBlock *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  JSC::VM *v33;
  uint64_t (*v35)();
  unsigned int *v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const WTF::StringImpl *v53;
  JSC::Interpreter *v54;
  JSC::Interpreter *v55;
  _DWORD *v56;
  int v57;
  _DWORD *v58;
  JSC::VM *v59;
  int v60;
  int v61;
  unsigned int *v62;
  int v63;
  unsigned int v64;
  JSC::CodeBlock *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  _QWORD *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  JSC::VM *v75;
  uint64_t (*v76)();
  unsigned int *v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  JSC::Interpreter *v82;
  uint64_t v83;
  WTF *v84;
  JSC::VM *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  const WTF::StringImpl *v89;
  uint64_t v90;
  const WTF::StringImpl *v91;
  const WTF::StringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  JSC::Interpreter *v99;
  uint64_t v100;
  uint64_t v101;
  const WTF::StringImpl *v102;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  _BOOL4 v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const WTF::StringImpl *v110;
  _QWORD *v111;
  JSC::VM *v112;
  JSC::Interpreter *v113;
  _DWORD *v114;
  JSC::CodeBlock *v115;
  JSC::VM *v116[2];
  JSC::CodeBlock *v117;
  JSC::CodeBlock *v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  unint64_t v125;

  v8 = a2;
  v9 = a1[7];
  v10 = v9 + 90568;
  v11 = *a3;
  v12 = v11 == 2 || a3[16] == 0;
  if (v12)
  {
    v116[0] = (JSC::VM *)a1[7];
    if (v11 == 2)
    {
      v15 = 0;
      v14 = *((_QWORD *)a3 + 1);
      v13 = (const WTF::StringImpl *)*((_QWORD *)a3 + 2);
      v16 = v13;
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = *((_QWORD *)a3 + 1);
      v16 = (_DWORD *)a2;
    }
    v17 = *(_QWORD *)(16 * (*v16 & 0xFFFFFFFE) + 0x28);
    v18 = *(_DWORD *)(a5 + 8);
    v112 = (JSC::VM *)v9;
    v113 = (JSC::Interpreter *)v17;
    if (*(_QWORD *)v10)
    {
LABEL_9:
      *(_QWORD *)(v9 + 32) = 0;
      if ((unint64_t)&v110 < *(_QWORD *)(v9 + 8) || *(_DWORD *)(a5 + 8) > 0x10000u)
      {
        v29 = JSC::throwStackOverflowError(v17, v116, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      else if (*(_DWORD *)(v9 + 4))
      {
        v29 = JSC::Interpreter::checkVMEntryPermission((JSC::Interpreter *)a1);
      }
      else
      {
        v19 = *(_DWORD *)(v9 + 80);
        if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
        {
          v79 = *(_DWORD *)(v9 + 80);
          if ((v79 & 0x27) != 0 && (v79 & 0x20) == 0)
          {
            v106 = a5;
            v107 = a4;
            v108 = v15;
            v109 = v8;
            v110 = v13;
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
            v13 = v110;
            v8 = v109;
            v15 = v108;
            a4 = v107;
            a5 = v106;
          }
          v29 = *(_QWORD *)(v9 + 16);
          if (v29)
            goto LABEL_28;
        }
        v20 = (unsigned int *)(v9 + 80);
        v21 = *(_DWORD *)(v9 + 80);
        if ((v21 & 0x20) == 0)
        {
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 | 0x20, v20));
        }
        v23 = 0;
        v24 = 0;
        v117 = 0;
        if (v11 == 2)
        {
          if (*(_BYTE *)(v14 + 5) == 8
            || (*(_QWORD *)(v14 + 8)
              ? (v35 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
              : (v35 = 0),
                v35))
          {
            v117 = *(JSC::CodeBlock **)(v14 + 96);
          }
          else
          {
            v110 = (const WTF::StringImpl *)a4;
            v111 = (_QWORD *)v8;
            v50 = a5;
            v51 = v15;
            JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v14, v9, v8, v13, 0, &v117, a7, a8);
            a4 = (uint64_t)v110;
            v8 = (uint64_t)v111;
            v15 = v51;
            a5 = v50;
          }
          v29 = *((_QWORD *)v116[0] + 2);
          if (v29)
          {
            if ((v21 & 0x20) == 0)
            {
              do
                v80 = __ldaxr(v20);
              while (__stlxr(v80 & 0xFFFFFFDF, v20));
            }
            v10 = v9 + 90568;
            goto LABEL_28;
          }
          *((_BYTE *)v117 + 17) = 0;
          v24 = *(_QWORD *)(v14 + 8);
          v36 = (unsigned int *)(v24 + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 + 1, v36));
          v23 = v117;
        }
        v25 = v18 + 1;
        v26 = *(_QWORD *)a5;
        v118 = v23;
        v119 = v8;
        v124 = v26;
        v125 = v17;
        v120 = v18 + 1;
        if (v23)
        {
          v27 = *((_DWORD *)v23 + 7);
          if (v27 <= v25)
            v25 = v18 + 1;
          else
            v25 = v27;
        }
        v123 = v25 | 1;
        v121 = 0;
        v122 = a4;
        if ((v21 & 0x20) == 0)
        {
          do
            v28 = __ldaxr(v20);
          while (__stlxr(v28 & 0xFFFFFFDF, v20));
        }
        if (v11 == 2)
        {
          v29 = vmEntryToJavaScript(*(_QWORD *)(v24 + 16), (JSC::VM *)v9, (uint64_t)&v118, a4, a5, a6, a7, a8);
          v10 = v9 + 90568;
          goto LABEL_24;
        }
        v29 = vmEntryToNative(v15, (JSC::VM *)v9, (uint64_t)&v118, a4, a5, a6, a7, a8);
        v10 = v9 + 90568;
        if (v24)
        {
LABEL_24:
          v30 = (unsigned int *)(v24 + 8);
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            atomic_store(1u, (unsigned int *)(v24 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          }
        }
      }
LABEL_28:
      v33 = v112;
      if (*((JSC::VM ***)v112 + 11321) == &v112)
      {
        *((_QWORD *)v112 + 11321) = 0;
        if (*((_BYTE *)v33 + 56))
          JSC::VM::executeEntryScopeServicesOnExit(v33, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      *(_BYTE *)(v10 + 2552) = 1;
      return v29;
    }
    *(_QWORD *)v10 = &v112;
    v38 = *(uint64_t **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v38)
    {
      v39 = a5;
      v40 = a4;
      v41 = v15;
      v110 = v13;
      a1 = (uint64_t *)WTF::Thread::initializeCurrentTLS((WTF::Thread *)a1);
      v13 = v110;
      v8 = a2;
      v15 = v41;
      a4 = v40;
      a5 = v39;
      v38 = a1;
    }
    v43 = *((_BYTE *)v38 + 5);
    if ((v43 & 0x20) == 0)
    {
      v110 = v13;
      v111 = (_QWORD *)v8;
      v95 = v15;
      v96 = a4;
      v97 = a5;
      *((_BYTE *)v38 + 5) = v43 | 0x20;
      if (BYTE2(dword_1ECF4C6C3))
        JSC::Wasm::startTrackingCurrentThread((JSC::Wasm *)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::registerThreadForMachExceptionHandling((WTF *)v38, (WTF::Thread *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      a5 = v97;
      a4 = v96;
      v15 = v95;
      v13 = v110;
      v8 = (uint64_t)v111;
    }
    a1 = (uint64_t *)v112;
    if (*((_BYTE *)v112 + 56))
    {
      v110 = v13;
      v46 = v8;
      v47 = v15;
      v48 = a4;
      v49 = a5;
    }
    else
    {
      v44 = *((_QWORD *)v112 + 11624);
      v45 = atomic_load(&JSC::lastTimeZoneID);
      if (v44 == v45)
        goto LABEL_9;
      v110 = v13;
      v46 = v8;
      v47 = v15;
      v48 = a4;
      v49 = a5;
      a1 = (uint64_t *)v112;
    }
    JSC::VM::executeEntryScopeServicesOnEntry((JSC::VM *)a1, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    a5 = v49;
    a4 = v48;
    v15 = v47;
    v8 = v46;
    v13 = v110;
    goto LABEL_9;
  }
  if (!*(_DWORD *)(a2 + 88))
  {
    v52 = *(_QWORD *)(a2 + 32);
    v53 = *(const WTF::StringImpl **)(a2 + 40);
    if (*(_BYTE *)(v52 + 5) == 26)
    {
      v54 = *(JSC::Interpreter **)(v52 + 24);
      if ((v54 & 1) != 0)
        v54 = *(JSC::Interpreter **)(((unint64_t)v54 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*((_BYTE *)v54 + 5) != 8)
      {
        v55 = 0;
        LOBYTE(v112) = 2;
        v56 = *(_DWORD **)(v52 + 16);
        v113 = v54;
        v114 = v56;
        v117 = (JSC::CodeBlock *)v9;
        v57 = 1;
        v58 = v56;
        goto LABEL_59;
      }
      LOBYTE(v112) = 1;
      v55 = (JSC::Interpreter *)*((_QWORD *)v54 + 5);
      v113 = v55;
      LOBYTE(v114) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v52 & 0xFFFFFFFE)
                                                                                + 0x4C));
      v117 = (JSC::CodeBlock *)v9;
    }
    else
    {
      v92 = *(const WTF::StringImpl **)(a2 + 40);
      v93 = a5;
      v94 = *(_QWORD *)(a2 + 32);
      (*(void (**)(JSC::VM **__return_ptr, uint64_t))(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v52 & 0xFFFFFFFE)
                                                                                + 0x4C)
                                                              + 0x38))(&v112, v94);
      v117 = (JSC::CodeBlock *)v9;
      if (v112 == 2)
      {
        v55 = 0;
        v57 = 1;
        v54 = v113;
        v56 = v114;
        v58 = v114;
        v52 = v94;
        v10 = v9 + 90568;
        a5 = v93;
        v53 = v92;
LABEL_59:
        v59 = *(JSC::VM **)(16 * (*v58 & 0xFFFFFFFE) + 0x28);
        v60 = *(_DWORD *)(a5 + 8);
        v116[0] = (JSC::VM *)v9;
        v116[1] = v59;
        v111 = (_QWORD *)v10;
        if (*(_QWORD *)v10)
        {
LABEL_60:
          *(_QWORD *)(v9 + 32) = 0;
          if ((unint64_t)&v110 < *(_QWORD *)(v9 + 8) || *(_DWORD *)(a5 + 8) > 0x10000u)
          {
            v98 = JSC::throwStackOverflowError((unint64_t)v59, &v117, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
          else
          {
            if (!*(_DWORD *)(v9 + 4))
            {
              v61 = *(_DWORD *)(v9 + 80);
              if ((v61 & 0x27) == 0)
                goto LABEL_64;
              if ((v61 & 0x20) != 0)
                goto LABEL_64;
              v99 = v55;
              v100 = v52;
              v101 = a5;
              v102 = v53;
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              v53 = v102;
              a5 = v101;
              v52 = v100;
              v104 = hasExceptionsAfterHandlingTraps;
              v55 = v99;
              if (!v104)
              {
LABEL_64:
                v62 = (unsigned int *)(v9 + 80);
                v63 = *(_DWORD *)(v9 + 80);
                if ((v63 & 0x20) == 0)
                {
                  do
                    v64 = __ldaxr(v62);
                  while (__stlxr(v64 | 0x20, v62));
                }
                v65 = 0;
                v66 = 0;
                v115 = 0;
                if (v57)
                {
                  if (*((_BYTE *)v54 + 5) == 8
                    || (*((_QWORD *)v54 + 1)
                      ? (v76 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                      : (v76 = 0),
                        v76))
                  {
                    v115 = (JSC::CodeBlock *)*((_QWORD *)v54 + 12);
                  }
                  else
                  {
                    v110 = v55;
                    v88 = v52;
                    v89 = (const WTF::StringImpl *)v56;
                    v90 = a5;
                    v91 = v53;
                    JSC::ScriptExecutable::prepareForExecutionImpl(v54, v9, v52, v89, 0, &v115, a7, a8);
                    v53 = v91;
                    a5 = v90;
                    v55 = v110;
                    v52 = v88;
                  }
                  v29 = *((_QWORD *)v117 + 2);
                  if (v29)
                  {
                    if ((v63 & 0x20) == 0)
                    {
                      do
                        v105 = __ldaxr(v62);
                      while (__stlxr(v105 & 0xFFFFFFDF, v62));
                    }
                    goto LABEL_122;
                  }
                  *((_BYTE *)v115 + 17) = 0;
                  v66 = *((_QWORD *)v54 + 1);
                  v77 = (unsigned int *)(v66 + 8);
                  do
                    v78 = __ldaxr(v77);
                  while (__stlxr(v78 + 1, v77));
                  v65 = v115;
                }
                v67 = v60 + 1;
                v68 = *(_QWORD *)a5;
                v118 = v65;
                v119 = v52;
                v124 = v68;
                v125 = (unint64_t)v59;
                v120 = v60 + 1;
                if (v65)
                {
                  v69 = *((_DWORD *)v65 + 7);
                  if (v69 <= v67)
                    v67 = v60 + 1;
                  else
                    v67 = v69;
                }
                v123 = v67 | 1;
                v121 = 0;
                v122 = (uint64_t)v53;
                if ((v63 & 0x20) == 0)
                {
                  do
                    v70 = __ldaxr(v62);
                  while (__stlxr(v70 & 0xFFFFFFDF, v62));
                }
                if (v57)
                {
                  v29 = vmEntryToJavaScript(*(_QWORD *)(v66 + 16), (JSC::VM *)v9, (uint64_t)&v118, a4, a5, a6, a7, a8);
                  v71 = v111;
                }
                else
                {
                  v29 = vmEntryToNative((uint64_t)v55, (JSC::VM *)v9, (uint64_t)&v118, a4, a5, a6, a7, a8);
                  v71 = v111;
                  if (!v66)
                  {
LABEL_79:
                    v75 = v116[0];
                    if (*((JSC::VM ***)v116[0] + 11321) == v116)
                    {
                      *((_QWORD *)v116[0] + 11321) = 0;
                      if (*((_BYTE *)v75 + 56))
                        JSC::VM::executeEntryScopeServicesOnExit(v75, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    }
                    *((_BYTE *)v71 + 2552) = 1;
                    return v29;
                  }
                }
                v72 = (unsigned int *)(v66 + 8);
                do
                {
                  v73 = __ldaxr(v72);
                  v74 = v73 - 1;
                }
                while (__stlxr(v74, v72));
                if (!v74)
                {
                  atomic_store(1u, (unsigned int *)(v66 + 8));
                  (*(void (**)(uint64_t))(*(_QWORD *)v66 + 32))(v66);
                }
                goto LABEL_79;
              }
              v29 = *(_QWORD *)(v9 + 16);
LABEL_122:
              v71 = v111;
              goto LABEL_79;
            }
            v98 = JSC::Interpreter::checkVMEntryPermission(v55);
          }
          v29 = v98;
          goto LABEL_122;
        }
        v110 = v53;
        v81 = a5;
        v82 = v55;
        v83 = v52;
        *v111 = v116;
        v84 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v84)
        {
          v55 = (JSC::Interpreter *)WTF::Thread::initializeCurrentTLS(v55);
          v84 = v55;
        }
        if ((*((_BYTE *)v84 + 5) & 0x20) == 0)
        {
          *((_BYTE *)v84 + 5) |= 0x20u;
          if (BYTE2(dword_1ECF4C6C3))
            JSC::Wasm::startTrackingCurrentThread(v55, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::registerThreadForMachExceptionHandling(v84, (WTF::Thread *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        v85 = v116[0];
        if (!*((_BYTE *)v116[0] + 56))
        {
          v86 = *((_QWORD *)v116[0] + 11624);
          v87 = atomic_load(&JSC::lastTimeZoneID);
          v12 = v86 == v87;
          v52 = v83;
          v55 = v82;
          a5 = v81;
          v53 = v110;
          if (v12)
            goto LABEL_60;
          v85 = v116[0];
        }
        JSC::VM::executeEntryScopeServicesOnEntry(v85, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v52 = v83;
        v55 = v82;
        a5 = v81;
        v53 = v110;
        goto LABEL_60;
      }
      v55 = v113;
      v52 = v94;
      v10 = v9 + 90568;
      a5 = v93;
      v53 = v92;
    }
    v57 = 0;
    v56 = 0;
    v54 = 0;
    v58 = (_DWORD *)v52;
    goto LABEL_59;
  }
  return JSC::Interpreter::executeBoundCall((WTF::Thread *)a1, a1[7], a2, a5, a5, a6, a7, a8);
}

uint64_t JSC::call(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  v9 = *(_QWORD *)(a1 + 56);
  result = JSC::Interpreter::executeCall((JSC::VM *)(v9 + 90560), a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  v11 = *(_QWORD *)(v9 + 16);
  if (v11)
  {
    *a6 = v11;
    *(_QWORD *)(v9 + 16) = 0;
    v12 = (unsigned int *)(v9 + 80);
    result = 10;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 & 0xFFFFFFEF, v12));
  }
  else if (!result)
  {
    result = 70;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::profiledCall(JSC::VM *a1, void *a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const WTF::StringImpl *v8;
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  int v21;
  int v22;
  unsigned int *v23;
  int v24;
  unsigned int v25;
  JSC::CodeBlock *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  JSC::VM *v36;
  char *v37;
  JSC::VM **v38;
  JSC::VM **v39;
  uint64_t (*v41)();
  unsigned int *v42;
  unsigned int v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  int v63;
  _DWORD *v64;
  JSC::VM *v65;
  int v66;
  int v67;
  unsigned int *v68;
  int v69;
  unsigned int v70;
  JSC::CodeBlock *v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t (*v80)();
  unsigned int *v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  WTF *v85;
  uint64_t v86;
  unint64_t v87;
  const WTF::StringImpl *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const WTF::StringImpl *v114;
  JSC::VM *v115;
  uint64_t v116;
  _DWORD *v117;
  JSC::CodeBlock *v118;
  JSC::VM *v119[2];
  JSC::CodeBlock *v120;
  JSC::CodeBlock *v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  unint64_t v128;

  v8 = a4;
  v9 = a1;
  v10 = *((_QWORD *)a1 + 7);
  v11 = *(_QWORD *)(v10 + 90568);
  v12 = a1;
  if (!v11 || (v12 = *(JSC::VM **)(v11 + 8)) != 0)
  {
    v13 = *((_QWORD *)v12 + 252);
    if (v13)
    {
      a1 = *(JSC::VM **)(v13 + 208);
      if (a1)
      {
        v96 = a3;
        v97 = a5;
        v98 = a6;
        a1 = (JSC::VM *)(*(uint64_t (**)(JSC::VM *))(*(_QWORD *)a1 + 16))(a1);
        if (!(_DWORD)a1)
        {
          JSC::Debugger::willEvaluateScript(*((JSC::Debugger **)v12 + 252));
          v32 = JSC::Interpreter::executeCall((JSC::VM *)(*((_QWORD *)v9 + 7) + 90560), v96, (unsigned __int8 *)v8, v97, v98, v99, v100, v101);
          v102 = *((_QWORD *)v12 + 252);
          if (v102 && *(_QWORD *)(v102 + 208))
            JSC::Debugger::didEvaluateScript(v102);
          return v32;
        }
        v10 = *((_QWORD *)v9 + 7);
        a6 = v98;
        a5 = v97;
        a3 = v96;
      }
    }
  }
  v14 = v10 + 90568;
  v15 = *(unsigned __int8 *)v8;
  if (v15 == 2 || *((_BYTE *)v8 + 16) == 0)
  {
    v119[0] = (JSC::VM *)v10;
    if (v15 == 2)
    {
      v18 = 0;
      v17 = *((_QWORD *)v8 + 1);
      a4 = (const WTF::StringImpl *)*((_QWORD *)v8 + 2);
      v19 = a4;
    }
    else
    {
      a4 = 0;
      v17 = 0;
      v18 = *((_QWORD *)v8 + 1);
      v19 = (_DWORD *)a3;
    }
    v20 = *(_QWORD *)(16 * (*v19 & 0xFFFFFFFE) + 0x28);
    v21 = *(_DWORD *)(a6 + 8);
    v115 = (JSC::VM *)v10;
    v116 = v20;
    if (*(_QWORD *)v14)
    {
LABEL_11:
      *(_QWORD *)(v10 + 32) = 0;
      if ((unint64_t)&v112 < *(_QWORD *)(v10 + 8) || *(_DWORD *)(a6 + 8) > 0x10000u)
      {
        v32 = JSC::throwStackOverflowError(v20, v119, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      else if (*(_DWORD *)(v10 + 4))
      {
        v32 = JSC::Interpreter::checkVMEntryPermission(a1);
      }
      else
      {
        v22 = *(_DWORD *)(v10 + 80);
        if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
        {
          v83 = *(_DWORD *)(v10 + 80);
          if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
          {
            v108 = a6;
            v109 = a5;
            v110 = a3;
            v111 = v18;
            v114 = a4;
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
            a4 = v114;
            v18 = v111;
            a3 = v110;
            a5 = v109;
            a6 = v108;
          }
          v32 = *(_QWORD *)(v10 + 16);
          if (v32)
            goto LABEL_30;
        }
        v23 = (unsigned int *)(v10 + 80);
        v24 = *(_DWORD *)(v10 + 80);
        if ((v24 & 0x20) == 0)
        {
          do
            v25 = __ldaxr(v23);
          while (__stlxr(v25 | 0x20, v23));
        }
        v26 = 0;
        v27 = 0;
        v120 = 0;
        if (v15 == 2)
        {
          if (*(_BYTE *)(v17 + 5) == 8
            || (*(_QWORD *)(v17 + 8)
              ? (v41 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
              : (v41 = 0),
                v41))
          {
            v120 = *(JSC::CodeBlock **)(v17 + 96);
          }
          else
          {
            v113 = a5;
            v114 = (const WTF::StringImpl *)a6;
            v56 = a3;
            v57 = v18;
            JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v17, v10, a3, a4, 0, &v120, a7, a8);
            v18 = v57;
            a3 = v56;
            a5 = v113;
            a6 = (uint64_t)v114;
          }
          v32 = *((_QWORD *)v119[0] + 2);
          if (v32)
          {
            if ((v24 & 0x20) == 0)
            {
              do
                v84 = __ldaxr(v23);
              while (__stlxr(v84 & 0xFFFFFFDF, v23));
            }
            v14 = v10 + 90568;
            goto LABEL_30;
          }
          *((_BYTE *)v120 + 17) = 0;
          v27 = *(_QWORD *)(v17 + 8);
          v42 = (unsigned int *)(v27 + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 + 1, v42));
          v26 = v120;
        }
        v28 = v21 + 1;
        v29 = *(_QWORD *)a6;
        v121 = v26;
        v122 = a3;
        v127 = v29;
        v128 = v20;
        v123 = v21 + 1;
        if (v26)
        {
          v30 = *((_DWORD *)v26 + 7);
          if (v30 <= v28)
            v28 = v21 + 1;
          else
            v28 = v30;
        }
        v126 = v28 | 1;
        v124 = 0;
        v125 = a5;
        if ((v24 & 0x20) == 0)
        {
          do
            v31 = __ldaxr(v23);
          while (__stlxr(v31 & 0xFFFFFFDF, v23));
        }
        if (v15 == 2)
        {
          v32 = vmEntryToJavaScript(*(_QWORD *)(v27 + 16), (JSC::VM *)v10, (uint64_t)&v121, (uint64_t)a4, a5, a6, a7, a8);
          v14 = v10 + 90568;
          goto LABEL_26;
        }
        v32 = vmEntryToNative(v18, (JSC::VM *)v10, (uint64_t)&v121, (uint64_t)a4, a5, a6, a7, a8);
        v14 = v10 + 90568;
        if (v27)
        {
LABEL_26:
          v33 = (unsigned int *)(v27 + 8);
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            atomic_store(1u, (unsigned int *)(v27 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
          }
        }
      }
LABEL_30:
      v36 = v115;
      v37 = (char *)v115 + 90568;
      v38 = (JSC::VM **)*((_QWORD *)v115 + 11321);
      v39 = &v115;
LABEL_31:
      if (v38 == v39)
      {
        *(_QWORD *)v37 = 0;
        if (*((_BYTE *)v36 + 56))
          JSC::VM::executeEntryScopeServicesOnExit(v36, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      *(_BYTE *)(v14 + 2552) = 1;
      return v32;
    }
    *(_QWORD *)v14 = &v115;
    v44 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v44)
    {
      v45 = a6;
      v46 = a5;
      v47 = a3;
      v48 = v18;
      v114 = a4;
      a1 = (JSC::VM *)WTF::Thread::initializeCurrentTLS(a1);
      a4 = v114;
      v18 = v48;
      a3 = v47;
      a5 = v46;
      a6 = v45;
      v44 = a1;
    }
    v49 = *((_BYTE *)v44 + 5);
    if ((v49 & 0x20) == 0)
    {
      v113 = v18;
      v114 = a4;
      v93 = a3;
      v94 = a5;
      v95 = a6;
      *((_BYTE *)v44 + 5) = v49 | 0x20;
      if (BYTE2(dword_1ECF4C6C3))
        JSC::Wasm::startTrackingCurrentThread(a1, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::registerThreadForMachExceptionHandling(v44, (WTF::Thread *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      a6 = v95;
      a5 = v94;
      a3 = v93;
      v18 = v113;
      a4 = v114;
    }
    a1 = v115;
    if (*((_BYTE *)v115 + 56))
    {
      v114 = a4;
      v52 = v18;
      v53 = a3;
      v54 = a5;
      v55 = a6;
    }
    else
    {
      v50 = *((_QWORD *)v115 + 11624);
      v51 = atomic_load(&JSC::lastTimeZoneID);
      if (v50 == v51)
        goto LABEL_11;
      v114 = a4;
      v52 = v18;
      v53 = a3;
      v54 = a5;
      v55 = a6;
      a1 = v115;
    }
    JSC::VM::executeEntryScopeServicesOnEntry(a1, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    a6 = v55;
    a5 = v54;
    a3 = v53;
    v18 = v52;
    a4 = v114;
    goto LABEL_11;
  }
  if (!*(_DWORD *)(a3 + 88))
  {
    v59 = *(_QWORD *)(a3 + 32);
    v58 = *(_QWORD *)(a3 + 40);
    if (*(_BYTE *)(v59 + 5) == 26)
    {
      v60 = *(_QWORD *)(v59 + 24);
      if ((v60 & 1) != 0)
        v60 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v60 + 5) != 8)
      {
        v61 = 0;
        LOBYTE(v115) = 2;
        v62 = *(_DWORD **)(v59 + 16);
        v116 = v60;
        v117 = v62;
        v120 = (JSC::CodeBlock *)v10;
        v63 = 1;
        v64 = v62;
        goto LABEL_64;
      }
      LOBYTE(v115) = 1;
      v61 = *(_QWORD *)(v60 + 40);
      v116 = v61;
      LOBYTE(v117) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v59 & 0xFFFFFFFE)
                                                                                + 0x4C));
      v120 = (JSC::CodeBlock *)v10;
    }
    else
    {
      v91 = *(_QWORD *)(a3 + 40);
      v92 = a6;
      a1 = (JSC::VM *)(*(_QWORD *(**)(JSC::VM **__return_ptr, _QWORD))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v59 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0x38))(&v115, *(_QWORD *)(a3 + 32));
      v120 = (JSC::CodeBlock *)v10;
      if (v115 == 2)
      {
        v61 = 0;
        v63 = 1;
        v60 = v116;
        v62 = v117;
        v64 = v117;
        a6 = v92;
        v58 = v91;
LABEL_64:
        v65 = *(JSC::VM **)(16 * (*v64 & 0xFFFFFFFE) + 0x28);
        v66 = *(_DWORD *)(a6 + 8);
        v119[0] = (JSC::VM *)v10;
        v119[1] = v65;
        if (*(_QWORD *)v14)
        {
LABEL_65:
          *(_QWORD *)(v10 + 32) = 0;
          if ((unint64_t)&v112 < *(_QWORD *)(v10 + 8) || *(_DWORD *)(a6 + 8) > 0x10000u)
          {
            v32 = JSC::throwStackOverflowError((unint64_t)v65, &v120, a3, (uint64_t)a4, a5, a6, a7, a8);
          }
          else if (*(_DWORD *)(v10 + 4))
          {
            v32 = JSC::Interpreter::checkVMEntryPermission(a1);
          }
          else
          {
            v113 = v14;
            v67 = *(_DWORD *)(v10 + 80);
            if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
            {
              v103 = a6;
              v104 = v58;
              v105 = v61;
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
              v61 = v105;
              v58 = v104;
              a6 = v103;
              if (hasExceptionsAfterHandlingTraps)
              {
                v32 = *(_QWORD *)(v10 + 16);
LABEL_132:
                v14 = v113;
                goto LABEL_84;
              }
            }
            v68 = (unsigned int *)(v10 + 80);
            v69 = *(_DWORD *)(v10 + 80);
            if ((v69 & 0x20) == 0)
            {
              do
                v70 = __ldaxr(v68);
              while (__stlxr(v70 | 0x20, v68));
            }
            v71 = 0;
            v72 = 0;
            v118 = 0;
            if (v63)
            {
              if (*(_BYTE *)(v60 + 5) == 8
                || (*(_QWORD *)(v60 + 8)
                  ? (v80 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                  : (v80 = 0),
                    v80))
              {
                v118 = *(JSC::CodeBlock **)(v60 + 96);
              }
              else
              {
                v114 = (const WTF::StringImpl *)a6;
                v88 = (const WTF::StringImpl *)v62;
                v89 = v58;
                v90 = v61;
                JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v60, v10, v59, v88, 0, &v118, a7, a8);
                v61 = v90;
                v58 = v89;
                a6 = (uint64_t)v114;
              }
              v32 = *((_QWORD *)v120 + 2);
              if (v32)
              {
                if ((v69 & 0x20) == 0)
                {
                  do
                    v107 = __ldaxr(v68);
                  while (__stlxr(v107 & 0xFFFFFFDF, v68));
                }
                goto LABEL_132;
              }
              *((_BYTE *)v118 + 17) = 0;
              v72 = *(_QWORD *)(v60 + 8);
              v81 = (unsigned int *)(v72 + 8);
              do
                v82 = __ldaxr(v81);
              while (__stlxr(v82 + 1, v81));
              v71 = v118;
            }
            v73 = v66 + 1;
            v74 = *(_QWORD *)a6;
            v121 = v71;
            v122 = v59;
            v127 = v74;
            v128 = (unint64_t)v65;
            v123 = v66 + 1;
            if (v71)
            {
              v75 = *((_DWORD *)v71 + 7);
              if (v75 <= v73)
                v73 = v66 + 1;
              else
                v73 = v75;
            }
            v126 = v73 | 1;
            v124 = 0;
            v125 = v58;
            if ((v69 & 0x20) == 0)
            {
              do
                v76 = __ldaxr(v68);
              while (__stlxr(v76 & 0xFFFFFFDF, v68));
            }
            if (v63)
            {
              v32 = vmEntryToJavaScript(*(_QWORD *)(v72 + 16), (JSC::VM *)v10, (uint64_t)&v121, (uint64_t)a4, a5, a6, a7, a8);
              v14 = v113;
              goto LABEL_80;
            }
            v32 = vmEntryToNative(v61, (JSC::VM *)v10, (uint64_t)&v121, (uint64_t)a4, a5, a6, a7, a8);
            v14 = v113;
            if (v72)
            {
LABEL_80:
              v77 = (unsigned int *)(v72 + 8);
              do
              {
                v78 = __ldaxr(v77);
                v79 = v78 - 1;
              }
              while (__stlxr(v79, v77));
              if (!v79)
              {
                atomic_store(1u, (unsigned int *)(v72 + 8));
                (*(void (**)(uint64_t))(*(_QWORD *)v72 + 32))(v72);
              }
            }
          }
LABEL_84:
          v36 = v119[0];
          v37 = (char *)v119[0] + 90568;
          v38 = (JSC::VM **)*((_QWORD *)v119[0] + 11321);
          v39 = v119;
          goto LABEL_31;
        }
        v112 = v61;
        v113 = v58;
        v114 = (const WTF::StringImpl *)a6;
        *(_QWORD *)v14 = v119;
        v85 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v85)
        {
          a1 = (JSC::VM *)WTF::Thread::initializeCurrentTLS(a1);
          v85 = a1;
        }
        if ((*((_BYTE *)v85 + 5) & 0x20) == 0)
        {
          *((_BYTE *)v85 + 5) |= 0x20u;
          if (BYTE2(dword_1ECF4C6C3))
            JSC::Wasm::startTrackingCurrentThread(a1, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::registerThreadForMachExceptionHandling(v85, (WTF::Thread *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        }
        a1 = v119[0];
        if (!*((_BYTE *)v119[0] + 56))
        {
          v86 = *((_QWORD *)v119[0] + 11624);
          v87 = atomic_load(&JSC::lastTimeZoneID);
          v58 = v113;
          a6 = (uint64_t)v114;
          v61 = v112;
          if (v86 == v87)
            goto LABEL_65;
          a1 = v119[0];
        }
        JSC::VM::executeEntryScopeServicesOnEntry(a1, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        v14 = v10 + 90568;
        v58 = v113;
        a6 = (uint64_t)v114;
        v61 = v112;
        goto LABEL_65;
      }
      v61 = v116;
      a6 = v92;
      v58 = v91;
    }
    v63 = 0;
    v62 = 0;
    v60 = 0;
    v64 = (_DWORD *)v59;
    goto LABEL_64;
  }
  return JSC::Interpreter::executeBoundCall(a1, v10, a3, a6, a5, a6, a7, a8);
}

uint64_t JSC::profiledCall(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 90568);
  v10 = a1;
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) != 0)
  {
    v11 = *(_QWORD *)(v10 + 2016);
    if (v11)
    {
      v24 = a1;
      v25 = a3;
      v22 = a5;
      v23 = a4;
      v21 = a6;
      v18 = *(_QWORD *)(v11 + 208);
      if (!v18 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18) & 1) != 0)
      {
        v12 = 1;
      }
      else
      {
        JSC::Debugger::willEvaluateScript(*(JSC::Debugger **)(v10 + 2016));
        v12 = 0;
      }
      a6 = v21;
      a5 = v22;
      a4 = v23;
      a1 = v24;
      a3 = v25;
    }
    else
    {
      v12 = 1;
    }
  }
  else
  {
    v12 = 1;
  }
  v13 = *(_QWORD *)(a1 + 56);
  result = JSC::Interpreter::executeCall((JSC::VM *)(v13 + 90560), a3, a4, a5, a6, a6, (uint64_t)a7, a8);
  v15 = *(_QWORD *)(v13 + 16);
  if (v15)
  {
    *a7 = v15;
    *(_QWORD *)(v13 + 16) = 0;
    v16 = (unsigned int *)(v13 + 80);
    result = 10;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 & 0xFFFFFFEF, v16));
  }
  else if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1988CE74CLL);
  }
  if ((v12 & 1) == 0)
  {
    v19 = *(_QWORD *)(v10 + 2016);
    if (v19)
    {
      if (*(_QWORD *)(v19 + 208))
      {
        v20 = result;
        JSC::Debugger::didEvaluateScript(*(_QWORD *)(v10 + 2016));
        return v20;
      }
    }
  }
  return result;
}

uint64_t JSC::ClassInfo::dump(char **this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;
  char *v5;
  char *v6;
  WTF::PrintStream *v7;
  float v8;
  unsigned int v9;
  uint64_t v11;
  int v12;
  char v13;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%p", this);
  WTF::PrintStream::printf(v4, "%s", ":[");
  v5 = *this;
  v6 = this[1];
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  if (v5)
  {
    v9 = (_DWORD)v6 - 1;
    if (!v6)
      v9 = 0;
    WTF::StringImpl::utf8ForCharacters(v5, v9, (uint64_t)&v11, v8);
  }
  else
  {
    WTF::CString::CString(&v11, &str_25, 0);
    v12 = 0;
  }
  WTF::printExpectedCStringHelper(v7, "StringView", &v11);
  if (v12 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v12])(&v13, &v11);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "]");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::ClonedArguments::put(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v14;
  __n128 v16;
  __n128 v17[2];

  v14 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 41952);
  if (*(_QWORD *)(v14 + 976) != a3 && *(_QWORD *)(v14 + 2712) != a3)
    return JSC::JSObject::put((unsigned __int8 *)a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  if (*(_QWORD *)(a1 + 16))
    JSC::ClonedArguments::materializeSpecials((JSC::ClonedArguments *)a1, a2, a9, a3, (uint64_t)a4, a5, a6, a7, a8);
  v16 = *(__n128 *)(a5 + 16);
  v17[0] = *(__n128 *)a5;
  v17[1] = v16;
  return JSC::JSObject::put((unsigned __int8 *)a1, (unint64_t)a2, a3, a4, (uint64_t)v17, a6, a7, a8, v17[0]);
}

uint64_t JSC::ClonedArguments::deleteProperty(JSC::ClonedArguments *a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v13;

  v13 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 41952);
  if (*(_QWORD *)(v13 + 976) == a3 || *(_QWORD *)(v13 + 2712) == a3)
  {
    if (*((_QWORD *)a1 + 2))
      JSC::ClonedArguments::materializeSpecials(a1, a2, a9, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::ClonedArguments::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t result;
  int v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  _BYTE *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned __int16 *v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned int v58;

  v12 = *(JSC::VM **)(a2 + 56);
  v14 = a1 + 16;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v15 = *(_QWORD *)(v13 + 24);
    if ((v15 & 1) != 0)
      v15 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 48);
    v16 = *((_QWORD *)v12 + 5244);
    if (*(_QWORD *)(v16 + 976) == a3)
    {
      if ((*(_BYTE *)(v15 + 68) & 1) != 0 || (*(_WORD *)(v15 + 66) & 0x10) != 0)
      {
        *(_QWORD *)a4 = JSC::JSGlobalObject::throwTypeErrorArgumentsCalleeGetterSetter(*(_QWORD *)(16
                                                                                                 * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                                 + 0x28));
        *(_DWORD *)(a4 + 16) = 28;
        *(_QWORD *)(a4 + 32) = a1;
        *(_BYTE *)(a4 + 49) = 2;
        return 1;
      }
      *(_QWORD *)a4 = v13;
      *(_DWORD *)(a4 + 16) = 0;
    }
    else
    {
      if (*(_QWORD *)(v16 + 2712) != a3)
        goto LABEL_6;
      *(_QWORD *)a4 = JSC::JSGlobalObject::arrayProtoValuesFunction(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                              + 0x28));
      *(_DWORD *)(a4 + 16) = 4;
    }
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 1;
    return result;
  }
LABEL_6:
  if (!(a3 >> 4))
    goto LABEL_41;
  v17 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v17 + 0x20)) != 0)
    goto LABEL_41;
  v18 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v18)
  {
    v29 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v29 || *(_BYTE *)(v29 + 5) != 1 && *(_DWORD *)(v29 + 80) < 2u)
      goto LABEL_41;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v18)
      goto LABEL_41;
  }
  if (!*(_DWORD *)(v18 + 24))
    goto LABEL_41;
  v19 = *(_QWORD *)(v18 + 16);
  v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
  v21 = *(unsigned int *)(v18 + 8);
  v22 = *(_DWORD *)(a3 + 16);
  if ((v19 & 1) != 0)
  {
    if ((v22 & 0x20) != 0)
      v22 = *(_DWORD *)(a3 + 32);
    v23 = *(_DWORD *)(v18 + 12);
    v24 = (v22 >> 8) & *(_QWORD *)&v23;
    v25 = *(unsigned __int8 *)(v20 + v24);
    if (*(_BYTE *)(v20 + v24))
    {
      v26 = v20 + v21;
      v27 = 1;
      while (1)
      {
        v28 = *(_QWORD *)(v26 + 8 * (v25 - 1));
        if (a3 == (v28 & 0xFFFFFFFFFFFFLL))
          break;
        v24 = ((_DWORD)v24 + v27) & v23;
        v25 = *(unsigned __int8 *)(v20 + v24);
        ++v27;
        if (!*(_BYTE *)(v20 + v24))
          goto LABEL_41;
      }
      a6 = (v28 >> 16) & 0xFF00000000 | HIBYTE(v28);
      goto LABEL_23;
    }
LABEL_41:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v12, a3, a4) & 1) != 0)
    {
      return 1;
    }
    if (!a3)
      return 0;
    v40 = *(_DWORD *)(a3 + 16);
    if ((v40 & 0x20) != 0)
      return 0;
    v41 = *(_BYTE **)(a3 + 8);
    v42 = *(unsigned int *)(a3 + 4);
    if ((v40 & 4) != 0)
    {
      if ((_DWORD)v42)
      {
        v43 = *v41 - 48;
        if (v43 <= 9 && (v42 < 2 || *v41 != 48))
        {
          v56 = v41 + 1;
          v57 = v42 - 1;
          while (v57)
          {
            if (v43 > 0x19999999)
              goto LABEL_47;
            v58 = *v56 - 48;
            if (v58 > 9)
              goto LABEL_47;
            v44 = 0;
            v45 = 0;
            v46 = 0;
            v50 = __CFADD__(v58, 10 * v43);
            v43 = v58 + 10 * v43;
            ++v56;
            --v57;
            if (v50)
              goto LABEL_48;
          }
          goto LABEL_87;
        }
      }
    }
    else if ((_DWORD)v42)
    {
      v43 = *(unsigned __int16 *)v41 - 48;
      if (v43 <= 9 && (*(_WORD *)v41 != 48 || v42 <= 1))
      {
        v47 = (unsigned __int16 *)(v41 + 2);
        v48 = v42 - 1;
        while (v48)
        {
          if (v43 > 0x19999999)
            goto LABEL_47;
          v49 = *v47 - 48;
          if (v49 > 9)
            goto LABEL_47;
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v50 = __CFADD__(v49, 10 * v43);
          v43 = v49 + 10 * v43;
          ++v47;
          --v48;
          if (v50)
            goto LABEL_48;
        }
LABEL_87:
        v44 = 0x100000000;
        if (v43 == -1)
        {
          v44 = 0;
          v45 = 0;
        }
        else
        {
          v45 = v43;
        }
        if (v43 == -1)
          v46 = 0;
        else
          v46 = v43 & 0xFFFFFF00;
LABEL_48:
        if ((v44 & 0x100000000) != 0)
          return JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, (const WTF::StringImpl *)(v46 | v45), a4, a5, a6, a7, a8);
        return 0;
      }
    }
LABEL_47:
    v44 = 0;
    v45 = 0;
    v46 = 0;
    goto LABEL_48;
  }
  if ((v22 & 0x20) != 0)
    v22 = *(_DWORD *)(a3 + 32);
  v34 = *(_DWORD *)(v18 + 12);
  v35 = v34 & (v22 >> 8);
  v36 = *(_DWORD *)(v20 + 4 * v35);
  if (!v36)
    goto LABEL_41;
  v37 = v20 + 4 * v21;
  v38 = 1;
  while (1)
  {
    v39 = (v36 - 1);
    if (*(_QWORD *)(v37 + 16 * v39) == a3)
      break;
    v35 = (v35 + v38) & v34;
    v36 = *(_DWORD *)(v20 + 4 * v35);
    ++v38;
    if (!v36)
      goto LABEL_41;
  }
  a6 = *(unsigned int *)(v37 + 16 * v39 + 8) | ((unint64_t)*(unsigned __int8 *)(v37 + 16 * v39 + 12) << 32);
LABEL_23:
  if ((_DWORD)a6 == -1)
    goto LABEL_41;
  if ((int)a6 <= 63)
  {
    v30 = a6 << 32;
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 8) - 8;
    v30 = 0x3F00000000 - (a6 << 32);
  }
  v31 = *(_QWORD *)(v14 + (v30 >> 29));
  if ((v31 & 0xFFFE000000000002) != 0)
    goto LABEL_29;
  v32 = *(unsigned __int8 *)(v31 + 5);
  if (v32 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v12, a4, v31, SHIDWORD(a6), a6);
    return 1;
  }
  if (v32 != 6)
  {
LABEL_29:
    *(_QWORD *)a4 = v31;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_DWORD *)(a4 + 20) = a6;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v51 = *(_DWORD *)(v17 + 16) & 3;
  v53 = *(_QWORD *)(v31 + 8);
  v52 = *(_QWORD *)(v31 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x4C)))
  {
    v55 = *(_QWORD *)(v31 + 24);
    v54 = *(_QWORD *)(v31 + 32);
    *(_QWORD *)a4 = v53;
    *(_QWORD *)(a4 + 8) = v52;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v51 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v55;
    *(_QWORD *)(a4 + 80) = v54;
  }
  else
  {
    *(_QWORD *)a4 = v53;
    *(_QWORD *)(a4 + 8) = v52;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v51 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

JSC::ClonedArguments *JSC::ClonedArguments::getOwnSpecialPropertyNames(JSC::ClonedArguments *this, JSC::JSGlobalObject *a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!(_DWORD)a5)
  {
    if (*((_QWORD *)this + 2))
      return (JSC::ClonedArguments *)JSC::ClonedArguments::materializeSpecials(this, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return this;
}

uint64_t JSC::ClonedArguments::defineOwnProperty(JSC::ClonedArguments *a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v14;

  v14 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 41952);
  if (*(_QWORD *)(v14 + 976) == a3 || *(_QWORD *)(v14 + 2712) == a3)
  {
    if (*((_QWORD *)a1 + 2))
      JSC::ClonedArguments::materializeSpecials(a1, a2, a9, a3, a4, a5, a6, a7, a8);
  }
  return JSC::JSObject::defineOwnProperty(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void JSC::ClonedArguments::visitChildren(JSC::ClonedArguments *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_9;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_9:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::ClonedArguments::visitChildren(JSC::ClonedArguments *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t JSC::ClonedArguments::createEmpty(JSC::ClonedArguments *this, JSC::VM *a2, JSC::JSGlobalObject *a3, JSC::Structure *a4, JSC::JSFunction *a5, uint64_t a6, JSC::Butterfly *a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v13;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _QWORD *ArrayStorageButterflyImpl;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 *SlowCase;
  unint64_t *v29;
  __n128 *v30;
  __n128 *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[11];

  if (a5 > 0x10000000)
    return 0;
  v53[9] = v9;
  v53[10] = v10;
  v11 = a5;
  v13 = (unint64_t)a3;
  if ((*((_BYTE *)a3 + 8) & 0x20) == 0)
  {
    v16 = *((_QWORD *)a3 + 5);
    if (!v16 || *(_BYTE *)(*(_QWORD *)(v16 + 2048) + 4) != 2)
    {
      v17 = (_DWORD *)*((_QWORD *)a3 + 6);
      v18 = 16 * (*v17 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v18 + 8) & 0x20) == 0)
      {
        v19 = 16 * (*v17 & 0xFFFFFFFE);
        while (1)
        {
          v20 = *(_QWORD *)(v19 + 40);
          if (v20 && *(_BYTE *)(*(_QWORD *)(v20 + 2048) + 4) == 2)
            goto LABEL_13;
          v21 = *(_DWORD **)(v19 + 48);
          if (!v21)
            v21 = (_DWORD *)*((_QWORD *)v17 + 2);
          if (v21 == (_DWORD *)2)
            break;
          v19 = 16 * (*v21 & 0xFFFFFFFE);
          v17 = v21;
          if ((*(_BYTE *)(v19 + 8) & 0x20) != 0)
            goto LABEL_13;
        }
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 40) + 2048) + 4) == 2)
          goto LABEL_13;
        if (!a6)
        {
          v23 = *((unsigned __int16 *)a3 + 12);
          if (v23 == 65534)
            goto LABEL_22;
          if (v23 == 0xFFFF)
            v23 = *(_DWORD *)(*((_QWORD *)a3 + 8) + 84);
          if (v23 < 64)
          {
LABEL_22:
            v24 = 0;
          }
          else if ((v23 - 63) >= 5)
          {
            v35 = (v23 - 64) | ((v23 - 64) >> 1) | (((v23 - 64) | ((v23 - 64) >> 1)) >> 2);
            v36 = v35 | (v35 >> 4) | ((v35 | (v35 >> 4)) >> 8);
            v24 = (v36 | HIWORD(v36)) + 1;
          }
          else
          {
            v24 = 4;
          }
          v25 = 8 * v24;
          a3 = (JSC::JSGlobalObject *)(8 * v24 + 8 * a5 + 8);
          if ((unint64_t)a3 <= 0x1F60
            && (v26 = *(_QWORD *)((char *)this
                                + (((8 * v24 + 8 * (unint64_t)a5 + 23) >> 1) & 0x1FFFFFFFF8)
                                + 6736)) != 0)
          {
            v27 = *(unsigned int *)(v26 + 60);
            SlowCase = *(__n128 **)(v26 + 24);
            if ((unint64_t)SlowCase >= *(_QWORD *)(v26 + 32))
            {
              SlowCase = *(__n128 **)(v26 + 40);
              if ((SlowCase & 1) == 0)
              {
                v40 = SlowCase->n128_u64[1] ^ *(_QWORD *)(v26 + 48);
                *(_QWORD *)(v26 + 32) = (char *)SlowCase + HIDWORD(v40);
                *(_QWORD *)(v26 + 40) = (char *)SlowCase + (int)v40;
                *(_QWORD *)(v26 + 24) = (char *)SlowCase + v27;
LABEL_28:
                v29 = &SlowCase->n128_u64[v24];
                *v29 = v11 | ((unint64_t)v11 << 32);
                a6 = (uint64_t)(v29 + 1);
                v30 = (__n128 *)((char *)SlowCase + v25);
                v31 = (__n128 *)((char *)SlowCase + (v25 & 0x7FFFFFFC0));
                a9.n128_u64[0] = 0;
                while (SlowCase != v31)
                {
                  *SlowCase = a9;
                  SlowCase[1] = a9;
                  SlowCase[2] = a9;
                  SlowCase[3] = a9;
                  SlowCase += 4;
                }
                while (SlowCase != v30)
                {
                  SlowCase->n128_u64[0] = 0;
                  SlowCase = (__n128 *)((char *)SlowCase + 8);
                }
                goto LABEL_33;
              }
              v51 = v24;
              v52 = 8 * v24;
              v46 = v26;
              JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, 0, (uint64_t)a7, a8);
              v47 = v46;
              v24 = v51;
              v25 = v52;
              SlowCase = (__n128 *)JSC::LocalAllocator::allocateSlowCase(v47, (uint64_t)this + 192, v27, 0, 1, v48, v49, v50);
            }
            else
            {
              *(_QWORD *)(v26 + 24) = (char *)SlowCase + v27;
            }
          }
          else
          {
            SlowCase = (__n128 *)JSC::CompleteSubspace::tryAllocateSlow((uint64_t)this + 6648, this, (unint64_t)a3, 0, (uint64_t)a5, 0, (uint64_t)a7, a8);
          }
          if (!SlowCase)
            goto LABEL_50;
          goto LABEL_28;
        }
LABEL_33:
        v32 = *((_QWORD *)this + 4731);
        if (v32 >= *((_QWORD *)this + 4732))
        {
          v32 = *((_QWORD *)this + 4733);
          if ((v32 & 1) != 0)
          {
            v41 = a6;
            JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, a8);
            v45 = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 37824, (uint64_t)this + 192, 32, 0, 0, v42, v43, v44);
            a6 = v41;
            v32 = v45;
            goto LABEL_35;
          }
          v37 = *(_QWORD *)(v32 + 8) ^ *((_QWORD *)this + 4734);
          *((_QWORD *)this + 4732) = v32 + HIDWORD(v37);
          *((_QWORD *)this + 4733) = v32 + (int)v37;
        }
        *((_QWORD *)this + 4731) = v32 + 32;
LABEL_35:
        *(_DWORD *)v32 = 0;
        v33 = *(_DWORD *)(v13 + 8);
        *(_DWORD *)v32 = v13 >> 4;
        *(_DWORD *)(v32 + 4) = v33;
        *(_QWORD *)(v32 + 8) = a6;
        *(_QWORD *)(v32 + 16) = 0;
        if (*((_BYTE *)this + 755))
          __dmb(0xAu);
        *(_QWORD *)(v32 + 16) = a4;
        if (a4 && *((_DWORD *)this + 190) >= *(unsigned __int8 *)(v32 + 7))
        {
          v38 = (char *)this + 192;
          v39 = v32;
          JSC::Heap::writeBarrierSlowPath((uint64_t)v38, v32);
          v32 = v39;
        }
        *(_QWORD *)(*(_QWORD *)(v32 + 8) - 16) = v11 | 0xFFFE000000000000;
        return v32;
      }
    }
  }
LABEL_13:
  if (a6)
    goto LABEL_33;
  ArrayStorageButterflyImpl = JSC::createArrayStorageButterflyImpl(this, 0, a3, (int)a5, a5, 0, 1, a9);
  if (ArrayStorageButterflyImpl)
  {
    a6 = (uint64_t)ArrayStorageButterflyImpl;
    *((_DWORD *)ArrayStorageButterflyImpl + 3) = v11;
    goto LABEL_33;
  }
LABEL_50:
  if (a2)
  {
    v53[0] = this;
    JSC::throwOutOfMemoryError(a2, (JSC::JSGlobalObject *)v53);
  }
  return 0;
}

unint64_t JSC::ClonedArguments::createWithInlineFrame(unint64_t a1, uint64_t a2, unsigned int **a3, int a4, __n128 a5)
{
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSObject *v16;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _UNKNOWN *__ptr32 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 *v30;
  unint64_t *v31;
  _QWORD *ArrayStorageButterflyImpl;
  __n128 *v33;
  __n128 *v34;
  uint64_t v35;
  unint64_t SlowCase;
  int v37;
  int64_t v38;
  uint64_t i;
  unsigned int v40;
  unint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  JSC::VM *v45;
  int v46;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  JSC::VM *v51;
  _UNKNOWN *__ptr32 *v52;
  uint64_t v53;
  unint64_t Slow;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int32x4_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  if (a3)
    v9 = JSC::ValueRecovery::recover((uint64_t)(a3 + 5), a2);
  else
    v9 = *(_QWORD *)(a2 + 24);
  if (a4)
  {
    if (a4 == 1)
      return JSC::ClonedArguments::createWithInlineFrame(JSC::JSGlobalObject *,JSC::CallFrame *,JSC::InlineCallFrame *,JSC::ArgumentsMode)::$_0::operator()(a1, v9, 0, a5);
    return 0;
  }
  if (a3)
  {
    v57 = *((int *)a3 + 9);
    if ((_DWORD)v57 == 0x3FFFFFFF)
    {
      v58 = (_DWORD)a3[3] & 0x3FFFFF;
    }
    else
    {
      if ((int)v57 >= 0x40000000)
      {
        v77 = *(_QWORD *)(a2 + 16);
        v78 = v57 - 0x40000000;
        if (v78 >= *(_DWORD *)(v77 + 172))
        {
          __break(0xC471u);
          JUMPOUT(0x1988CFBA4);
        }
        v59 = (int *)(*(_QWORD *)(v77 + 160) + 8 * v78);
      }
      else
      {
        v59 = (int *)(a2 + 8 * v57);
      }
      v58 = *v59;
    }
    v60 = (v58 - 1);
    SlowCase = JSC::ClonedArguments::createWithInlineFrame(JSC::JSGlobalObject *,JSC::CallFrame *,JSC::InlineCallFrame *,JSC::ArgumentsMode)::$_0::operator()(a1, v9, v58 - 1, a5);
    if (SlowCase && v58 != 1)
    {
      v61 = (v58 - 2);
      v62 = 9 * (v58 - 1) + 4;
      do
      {
        if (v60 >= **a3)
        {
          __break(0xC471u);
          JUMPOUT(0x1988CFB7CLL);
        }
        --v60;
        v63 = JSC::ValueRecovery::recover((uint64_t)*a3 + v62, a2);
        JSC::JSObject::putDirectIndex(SlowCase, a1, (JSC::VM *)v61, v63, v64, v65, v66, v67, v68);
        v61 = (v61 - 1);
        v62 -= 9;
      }
      while ((_DWORD)v61 != -1);
    }
    return SlowCase;
  }
  v10 = *(_DWORD *)(a2 + 32);
  v11 = (v10 - 1);
  v12 = *(_DWORD *)(a1 + 844);
  if (v12)
    v13 = 16 * (v12 & 0xFFFFFFFE);
  else
    v13 = 0;
  if (v11 > 0x10000000)
    return 0;
  v14 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(v13 + 8) & 0x20) != 0
    || (v15 = *(_QWORD *)(v13 + 40)) != 0 && *(_BYTE *)(*(_QWORD *)(v15 + 2048) + 4) == 2
    || (*(_QWORD *)(v13 + 48) != 2 ? (v16 = *(JSC::JSObject **)(v13 + 48)) : (v16 = 0),
        JSC::JSObject::needsSlowPutIndexing(v16)))
  {
    ArrayStorageButterflyImpl = JSC::createArrayStorageButterflyImpl((JSC::VM *)v14, 0, (JSC::Structure *)v13, v10 - 1, v10 - 1, 0, 1, a5);
    if (ArrayStorageButterflyImpl)
    {
      *((_DWORD *)ArrayStorageButterflyImpl + 3) = v11;
      goto LABEL_31;
    }
LABEL_79:
    v82 = v14;
    JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v82);
    return 0;
  }
  v24 = *(unsigned __int16 *)(v13 + 24);
  if (v24 == 65534)
    goto LABEL_20;
  if (v24 == 0xFFFF)
    v24 = *(_DWORD *)(*(_QWORD *)(v13 + 64) + 84);
  if (v24 < 64)
  {
LABEL_20:
    v25 = 0;
  }
  else if ((v24 - 63) >= 5)
  {
    v48 = (v24 - 64) | ((v24 - 64) >> 1) | (((v24 - 64) | ((v24 - 64) >> 1)) >> 2);
    v49 = v48 | (v48 >> 4) | ((v48 | (v48 >> 4)) >> 8);
    v25 = (v49 | HIWORD(v49)) + 1;
  }
  else
  {
    v25 = 4;
  }
  v26 = 8 * v25;
  v27 = 8 * v25 + 8 * v11 + 8;
  if (v27 > 0x1F60
    || (v28 = *(_QWORD *)(v14 + (((8 * v25 + 8 * (unint64_t)v11 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) == 0)
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v14 + 6648, (JSC *)v14, v27, 0, v19, v20, v21, v22);
LABEL_68:
    v30 = (__n128 *)Slow;
LABEL_25:
    if (v30)
      goto LABEL_26;
    goto LABEL_79;
  }
  v29 = *(unsigned int *)(v28 + 60);
  v30 = *(__n128 **)(v28 + 24);
  if ((unint64_t)v30 < *(_QWORD *)(v28 + 32))
  {
    *(_QWORD *)(v28 + 24) = (char *)v30 + v29;
    goto LABEL_25;
  }
  v30 = *(__n128 **)(v28 + 40);
  if ((v30 & 1) != 0)
  {
    v80 = *(unsigned int *)(v28 + 60);
    JSC::sanitizeStackForVM((JSC *)v14, v17, v27, v18, v19, v20, v21, v22);
    Slow = JSC::LocalAllocator::allocateSlowCase(v28, v14 + 192, v80, 0, 1, v74, v75, v76);
    goto LABEL_68;
  }
  v56 = v30->n128_u64[1] ^ *(_QWORD *)(v28 + 48);
  *(_QWORD *)(v28 + 32) = (char *)v30 + HIDWORD(v56);
  *(_QWORD *)(v28 + 40) = (char *)v30 + (int)v56;
  *(_QWORD *)(v28 + 24) = (char *)v30 + v29;
LABEL_26:
  v31 = &v30->n128_u64[v25];
  *v31 = v11 | (v11 << 32);
  ArrayStorageButterflyImpl = v31 + 1;
  v33 = (__n128 *)((char *)v30 + v26);
  v34 = (__n128 *)((char *)v30 + (v26 & 0x7FFFFFFC0));
  a5.n128_u64[0] = 0;
  while (v30 != v34)
  {
    *v30 = a5;
    v30[1] = a5;
    v30[2] = a5;
    v30[3] = a5;
    v30 += 4;
  }
  while (v30 != v33)
  {
    v30->n128_u64[0] = 0;
    v30 = (__n128 *)((char *)v30 + 8);
  }
LABEL_31:
  v35 = v14 + 192;
  SlowCase = *(_QWORD *)(v14 + 37848);
  if (SlowCase < *(_QWORD *)(v14 + 37856))
  {
LABEL_32:
    *(_QWORD *)(v14 + 37848) = SlowCase + 32;
    goto LABEL_33;
  }
  SlowCase = *(_QWORD *)(v14 + 37864);
  if ((SlowCase & 1) == 0)
  {
    v55 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v14 + 37872);
    *(_QWORD *)(v14 + 37856) = SlowCase + HIDWORD(v55);
    *(_QWORD *)(v14 + 37864) = SlowCase + (int)v55;
    goto LABEL_32;
  }
  v70 = ArrayStorageButterflyImpl;
  JSC::sanitizeStackForVM((JSC *)v14, v17, v27, v18, v19, v20, v21, v22);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v14 + 37824, v14 + 192, 32, 0, 0, v71, v72, v73);
  v35 = v14 + 192;
  ArrayStorageButterflyImpl = v70;
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  v37 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)SlowCase = v13 >> 4;
  *(_DWORD *)(SlowCase + 4) = v37;
  *(_QWORD *)(SlowCase + 8) = ArrayStorageButterflyImpl;
  *(_QWORD *)(SlowCase + 16) = 0;
  if (*(_BYTE *)(v14 + 755))
    __dmb(0xAu);
  *(_QWORD *)(SlowCase + 16) = v9;
  if (v9 && *(_DWORD *)(v14 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v35, SlowCase);
  *(_QWORD *)(*(_QWORD *)(SlowCase + 8) - 16) = v11 | 0xFFFE000000000000;
  if (v10 != 1)
  {
    v38 = ((unint64_t)(v10 - 2) << 32) + 0x600000000;
    for (i = 8 * (v10 - 2); ; i -= 8)
    {
      v40 = v11 - 1;
      v41 = *(_QWORD *)(a2 + (v38 >> 29));
      v42 = *(_BYTE *)(SlowCase + 4);
      v43 = v42 & 0x1F;
      if (v43 - 4 >= 0xA)
        break;
      v44 = *(_QWORD *)(SlowCase + 8);
      if (*(_DWORD *)(v44 - 4) <= v40)
        goto LABEL_61;
      v45 = *(JSC::VM **)(a1 + 56);
      v46 = v42 & 0xF;
      if ((v46 - 8) >= 2)
      {
        switch(v46)
        {
          case 0:
          case 1:
            v79 = v11 - 1;
            v52 = v23;
            JSC::JSObject::setIndexQuicklyForTypedArray(SlowCase, v79, *(_QWORD *)(a2 + (v38 >> 29)));
            goto LABEL_62;
          case 4:
          case 5:
            if (v41 > 0xFFFDFFFFFFFFFFFFLL)
              goto LABEL_41;
            v53 = (v11 - 1);
            v52 = v23;
            JSC::JSObject::convertInt32ToDoubleOrContiguousWhilePerformingSetIndex((JSC::JSObject *)SlowCase, v45, v53, v41, v19, v20, v21, v22);
            goto LABEL_62;
          case 6:
          case 7:
            if (!(v41 >> 49))
            {
              v69 = (v11 - 1);
              v52 = v23;
              JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)SlowCase, v45, v69, v41, v19, v20, v21, v22, a5.n128_f64[0]);
              goto LABEL_62;
            }
            a5.n128_f64[0] = (double)(int)v41;
            if (v41 <= 0xFFFDFFFFFFFFFFFFLL)
              a5.n128_u64[0] = v41 - 0x2000000000000;
            *(_QWORD *)(v44 + i) = a5.n128_u64[0];
LABEL_55:
            if (*(_DWORD *)(v44 - 8) <= v40)
              *(_DWORD *)(v44 - 8) = v11;
            break;
          case 10:
          case 11:
          case 12:
          case 13:
            v81 = *(_QWORD *)(v44 + i + 16);
            *(_QWORD *)(v44 + i + 16) = v41;
            if (v41
              && (v41 & 0xFFFE000000000002) == 0
              && *((_DWORD *)v45 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
            {
              JSC::Heap::writeBarrierSlowPath((uint64_t)v45 + 192, SlowCase);
            }
            v23 = &jpt_1988CF798;
            if (v81)
              goto LABEL_45;
            ++*(_DWORD *)(v44 + 12);
            goto LABEL_55;
          default:
            __break(0xC471u);
            JUMPOUT(0x1988CFB38);
        }
        goto LABEL_45;
      }
LABEL_41:
      *(_QWORD *)(v44 + i) = v41;
      if (*(_DWORD *)(v44 - 8) <= v40)
        *(_DWORD *)(v44 - 8) = v11;
      if (v41
        && (v41 & 0xFFFE000000000002) == 0
        && *((_DWORD *)v45 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
      {
        v52 = v23;
        JSC::Heap::writeBarrierSlowPath((uint64_t)v45 + 192, SlowCase);
        goto LABEL_62;
      }
LABEL_45:
      v38 -= 0x100000000;
      LODWORD(v11) = v40;
      if (!v40)
        return SlowCase;
    }
    v50 = v43 > 3 || v43 == 2;
    if (v50 && (*(_BYTE *)(SlowCase + 4) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1988CFB5CLL);
    }
LABEL_61:
    v51 = (JSC::VM *)(v11 - 1);
    v52 = v23;
    JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength((JSC::JSObject *)SlowCase, a1, v51, v41, 0, 0, v21, v22, (int32x4_t)a5);
LABEL_62:
    v23 = v52;
    goto LABEL_45;
  }
  return SlowCase;
}

unint64_t JSC::ClonedArguments::createWithInlineFrame(JSC::JSGlobalObject *,JSC::CallFrame *,JSC::InlineCallFrame *,JSC::ArgumentsMode)::$_0::operator()(uint64_t a1, uint64_t a2, unsigned int a3, __n128 a4)
{
  int v4;
  unint64_t v5;
  uint64_t v9;
  uint64_t v10;
  JSC::JSObject *v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 *v24;
  unint64_t *v25;
  _QWORD *ArrayStorageButterflyImpl;
  __n128 *v27;
  __n128 *v28;
  unint64_t SlowCase;
  int v30;
  unsigned int v32;
  unsigned int v33;
  unint64_t Slow;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = *(_DWORD *)(a1 + 844);
  if (v4)
    v5 = 16 * (v4 & 0xFFFFFFFE);
  else
    v5 = 0;
  if (a3 > 0x10000000)
    return 0;
  v9 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(v5 + 8) & 0x20) != 0
    || (v10 = *(_QWORD *)(v5 + 40)) != 0 && *(_BYTE *)(*(_QWORD *)(v10 + 2048) + 4) == 2
    || (*(_QWORD *)(v5 + 48) != 2 ? (v11 = *(JSC::JSObject **)(v5 + 48)) : (v11 = 0),
        JSC::JSObject::needsSlowPutIndexing(v11)))
  {
    ArrayStorageButterflyImpl = JSC::createArrayStorageButterflyImpl((JSC::VM *)v9, 0, (JSC::Structure *)v5, a3, a3, 0, 1, a4);
    if (ArrayStorageButterflyImpl)
    {
      *((_DWORD *)ArrayStorageButterflyImpl + 3) = a3;
      goto LABEL_27;
    }
LABEL_47:
    v49 = v9;
    JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v49);
    return 0;
  }
  v18 = *(unsigned __int16 *)(v5 + 24);
  if (v18 == 65534)
    goto LABEL_16;
  if (v18 == 0xFFFF)
    v18 = *(_DWORD *)(*(_QWORD *)(v5 + 64) + 84);
  if (v18 < 64)
  {
LABEL_16:
    v19 = 0;
  }
  else if ((v18 - 63) >= 5)
  {
    v32 = (v18 - 64) | ((v18 - 64) >> 1) | (((v18 - 64) | ((v18 - 64) >> 1)) >> 2);
    v33 = v32 | (v32 >> 4) | ((v32 | (v32 >> 4)) >> 8);
    v19 = (v33 | HIWORD(v33)) + 1;
  }
  else
  {
    v19 = 4;
  }
  v20 = 8 * v19;
  v21 = 8 * v19 + 8 * a3 + 8;
  if (v21 > 0x1F60
    || (v22 = *(_QWORD *)(v9 + (((8 * v19 + 8 * (unint64_t)a3 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) == 0)
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v9 + 6648, (JSC *)v9, v21, 0, v14, v15, v16, v17);
LABEL_40:
    v24 = (__n128 *)Slow;
LABEL_21:
    if (v24)
      goto LABEL_22;
    goto LABEL_47;
  }
  v23 = *(unsigned int *)(v22 + 60);
  v24 = *(__n128 **)(v22 + 24);
  if ((unint64_t)v24 < *(_QWORD *)(v22 + 32))
  {
    *(_QWORD *)(v22 + 24) = (char *)v24 + v23;
    goto LABEL_21;
  }
  v24 = *(__n128 **)(v22 + 40);
  if ((v24 & 1) != 0)
  {
    v47 = v19;
    v48 = 8 * v19;
    v42 = *(_QWORD *)(v9 + (((8 * v19 + 8 * (unint64_t)a3 + 23) >> 1) & 0x1FFFFFFFF8) + 6736);
    JSC::sanitizeStackForVM((JSC *)v9, v12, v21, v13, v14, v15, v16, v17);
    v43 = v42;
    v19 = v47;
    v20 = v48;
    Slow = JSC::LocalAllocator::allocateSlowCase(v43, v9 + 192, v23, 0, 1, v44, v45, v46);
    goto LABEL_40;
  }
  v37 = v24->n128_u64[1] ^ *(_QWORD *)(v22 + 48);
  *(_QWORD *)(v22 + 32) = (char *)v24 + HIDWORD(v37);
  *(_QWORD *)(v22 + 40) = (char *)v24 + (int)v37;
  *(_QWORD *)(v22 + 24) = (char *)v24 + v23;
LABEL_22:
  v25 = &v24->n128_u64[v19];
  *v25 = a3 | ((unint64_t)a3 << 32);
  ArrayStorageButterflyImpl = v25 + 1;
  v27 = (__n128 *)((char *)v24 + v20);
  v28 = (__n128 *)((char *)v24 + (v20 & 0x7FFFFFFC0));
  a4.n128_u64[0] = 0;
  while (v24 != v28)
  {
    *v24 = a4;
    v24[1] = a4;
    v24[2] = a4;
    v24[3] = a4;
    v24 += 4;
  }
  while (v24 != v27)
  {
    v24->n128_u64[0] = 0;
    v24 = (__n128 *)((char *)v24 + 8);
  }
LABEL_27:
  SlowCase = *(_QWORD *)(v9 + 37848);
  if (SlowCase >= *(_QWORD *)(v9 + 37856))
  {
    SlowCase = *(_QWORD *)(v9 + 37864);
    if ((SlowCase & 1) != 0)
    {
      v38 = ArrayStorageButterflyImpl;
      JSC::sanitizeStackForVM((JSC *)v9, v12, v21, v13, v14, v15, v16, v17);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v9 + 37824, v9 + 192, 32, 0, 0, v39, v40, v41);
      ArrayStorageButterflyImpl = v38;
      goto LABEL_29;
    }
    v35 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v9 + 37872);
    *(_QWORD *)(v9 + 37856) = SlowCase + HIDWORD(v35);
    *(_QWORD *)(v9 + 37864) = SlowCase + (int)v35;
  }
  *(_QWORD *)(v9 + 37848) = SlowCase + 32;
LABEL_29:
  *(_DWORD *)SlowCase = 0;
  v30 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)SlowCase = v5 >> 4;
  *(_DWORD *)(SlowCase + 4) = v30;
  *(_QWORD *)(SlowCase + 8) = ArrayStorageButterflyImpl;
  *(_QWORD *)(SlowCase + 16) = 0;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  *(_QWORD *)(SlowCase + 16) = a2;
  if (a2 && *(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
  {
    v36 = SlowCase;
    JSC::Heap::writeBarrierSlowPath(v9 + 192, SlowCase);
    SlowCase = v36;
  }
  *(_QWORD *)(*(_QWORD *)(SlowCase + 8) - 16) = a3 | 0xFFFE000000000000;
  return SlowCase;
}

unint64_t JSC::ClonedArguments::createWithMachineFrame(unint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  _UNKNOWN *__ptr32 *v9;
  uint64_t v11;
  int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _QWORD *ArrayStorageButterflyImpl;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 *v31;
  unint64_t *v32;
  __n128 *v33;
  __n128 *v34;
  uint64_t v35;
  unint64_t SlowCase;
  int v37;
  int64_t v38;
  uint64_t i;
  unsigned int v40;
  unint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  JSC::VM *v45;
  int v46;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  JSC::VM *v51;
  _UNKNOWN *__ptr32 *v52;
  uint64_t v53;
  unint64_t Slow;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v11 = *(_QWORD *)(a2 + 24);
  if (a3)
  {
    if (a3 == 1)
      return JSC::ClonedArguments::createWithInlineFrame(JSC::JSGlobalObject *,JSC::CallFrame *,JSC::InlineCallFrame *,JSC::ArgumentsMode)::$_0::operator()(a1, *(_QWORD *)(a2 + 24), 0, a9);
    return 0;
  }
  v13 = *(_DWORD *)(a2 + 32);
  v14 = (v13 - 1);
  v15 = *(_DWORD *)(a1 + 844);
  if (v15)
    v16 = 16 * (v15 & 0xFFFFFFFE);
  else
    v16 = 0;
  if (v14 > 0x10000000)
    return 0;
  v17 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(v16 + 8) & 0x20) != 0)
    goto LABEL_17;
  v18 = *(_QWORD *)(v16 + 40);
  if (v18)
  {
    if (*(_BYTE *)(*(_QWORD *)(v18 + 2048) + 4) == 2)
      goto LABEL_17;
  }
  v19 = *(_DWORD **)(v16 + 48);
  v20 = 16 * (*v19 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v20 + 8) & 0x20) != 0)
    goto LABEL_17;
  v21 = 16 * (*v19 & 0xFFFFFFFE);
  while (1)
  {
    v22 = *(_QWORD *)(v21 + 40);
    if (v22 && *(_BYTE *)(*(_QWORD *)(v22 + 2048) + 4) == 2)
      goto LABEL_17;
    v23 = *(_DWORD **)(v21 + 48);
    if (!v23)
      v23 = (_DWORD *)*((_QWORD *)v19 + 2);
    if (v23 == (_DWORD *)2)
      break;
    v21 = 16 * (*v23 & 0xFFFFFFFE);
    v19 = v23;
    if ((*(_BYTE *)(v21 + 8) & 0x20) != 0)
      goto LABEL_17;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 40) + 2048) + 4) == 2)
  {
LABEL_17:
    ArrayStorageButterflyImpl = JSC::createArrayStorageButterflyImpl(*(JSC::VM **)(a1 + 56), 0, (JSC::Structure *)v16, v13 - 1, v13 - 1, 0, 1, a9);
    if (ArrayStorageButterflyImpl)
    {
      *((_DWORD *)ArrayStorageButterflyImpl + 3) = v14;
      goto LABEL_35;
    }
LABEL_79:
    v68 = v17;
    JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v68);
    return 0;
  }
  v26 = *(unsigned __int16 *)(v16 + 24);
  if (v26 == 65534)
    goto LABEL_24;
  if (v26 == 0xFFFF)
    v26 = *(_DWORD *)(*(_QWORD *)(v16 + 64) + 84);
  if (v26 < 64)
  {
LABEL_24:
    v27 = 0;
  }
  else if ((v26 - 63) >= 5)
  {
    v48 = (v26 - 64) | ((v26 - 64) >> 1) | (((v26 - 64) | ((v26 - 64) >> 1)) >> 2);
    v49 = v48 | (v48 >> 4) | ((v48 | (v48 >> 4)) >> 8);
    v27 = (v49 | HIWORD(v49)) + 1;
  }
  else
  {
    v27 = 4;
  }
  v28 = 8 * v27;
  v25 = 8 * v27 + 8 * v14 + 8;
  if (v25 > 0x1F60
    || (v29 = *(_QWORD *)(v17 + (((8 * v27 + 8 * (unint64_t)v14 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) == 0)
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v17 + 6648, *(JSC **)(a1 + 56), v25, 0, a5, a6, a7, a8);
LABEL_70:
    v31 = (__n128 *)Slow;
LABEL_29:
    if (v31)
      goto LABEL_30;
    goto LABEL_79;
  }
  v30 = *(unsigned int *)(v29 + 60);
  v31 = *(__n128 **)(v29 + 24);
  if ((unint64_t)v31 < *(_QWORD *)(v29 + 32))
  {
    *(_QWORD *)(v29 + 24) = (char *)v31 + v30;
    goto LABEL_29;
  }
  v31 = *(__n128 **)(v29 + 40);
  if ((v31 & 1) != 0)
  {
    v66 = *(unsigned int *)(v29 + 60);
    JSC::sanitizeStackForVM((JSC *)v17, (JSC::VM *)a2, v25, a4, a5, a6, a7, a8);
    Slow = JSC::LocalAllocator::allocateSlowCase(v29, v17 + 192, v66, 0, 1, v62, v63, v64);
    goto LABEL_70;
  }
  v56 = v31->n128_u64[1] ^ *(_QWORD *)(v29 + 48);
  *(_QWORD *)(v29 + 32) = (char *)v31 + HIDWORD(v56);
  *(_QWORD *)(v29 + 40) = (char *)v31 + (int)v56;
  *(_QWORD *)(v29 + 24) = (char *)v31 + v30;
LABEL_30:
  v32 = &v31->n128_u64[v27];
  *v32 = v14 | (v14 << 32);
  ArrayStorageButterflyImpl = v32 + 1;
  v33 = (__n128 *)((char *)v31 + v28);
  v34 = (__n128 *)((char *)v31 + (v28 & 0x7FFFFFFC0));
  a9.n128_u64[0] = 0;
  while (v31 != v34)
  {
    *v31 = a9;
    v31[1] = a9;
    v31[2] = a9;
    v31[3] = a9;
    v31 += 4;
  }
  while (v31 != v33)
  {
    v31->n128_u64[0] = 0;
    v31 = (__n128 *)((char *)v31 + 8);
  }
LABEL_35:
  v35 = v17 + 192;
  SlowCase = *(_QWORD *)(v17 + 37848);
  if (SlowCase < *(_QWORD *)(v17 + 37856))
  {
LABEL_36:
    *(_QWORD *)(v17 + 37848) = SlowCase + 32;
    goto LABEL_37;
  }
  SlowCase = *(_QWORD *)(v17 + 37864);
  if ((SlowCase & 1) == 0)
  {
    v55 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v17 + 37872);
    *(_QWORD *)(v17 + 37856) = SlowCase + HIDWORD(v55);
    *(_QWORD *)(v17 + 37864) = SlowCase + (int)v55;
    goto LABEL_36;
  }
  v58 = ArrayStorageButterflyImpl;
  JSC::sanitizeStackForVM((JSC *)v17, (JSC::VM *)a2, v25, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v17 + 37824, v17 + 192, 32, 0, 0, v59, v60, v61);
  v35 = v17 + 192;
  ArrayStorageButterflyImpl = v58;
LABEL_37:
  *(_DWORD *)SlowCase = 0;
  v37 = *(_DWORD *)(v16 + 8);
  *(_DWORD *)SlowCase = v16 >> 4;
  *(_DWORD *)(SlowCase + 4) = v37;
  *(_QWORD *)(SlowCase + 8) = ArrayStorageButterflyImpl;
  *(_QWORD *)(SlowCase + 16) = 0;
  if (*(_BYTE *)(v17 + 755))
    __dmb(0xAu);
  *(_QWORD *)(SlowCase + 16) = v11;
  if (v11 && *(_DWORD *)(v17 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v35, SlowCase);
  *(_QWORD *)(*(_QWORD *)(SlowCase + 8) - 16) = v14 | 0xFFFE000000000000;
  if (v13 != 1)
  {
    v38 = ((unint64_t)(v13 - 2) << 32) + 0x600000000;
    for (i = 8 * (v13 - 2); ; i -= 8)
    {
      v40 = v14 - 1;
      v41 = *(_QWORD *)(a2 + (v38 >> 29));
      v42 = *(_BYTE *)(SlowCase + 4);
      v43 = v42 & 0x1F;
      if (v43 - 4 >= 0xA)
        break;
      v44 = *(_QWORD *)(SlowCase + 8);
      if (*(_DWORD *)(v44 - 4) <= v40)
        goto LABEL_65;
      v45 = *(JSC::VM **)(a1 + 56);
      v46 = v42 & 0xF;
      if ((v46 - 8) >= 2)
      {
        switch(v46)
        {
          case 0:
          case 1:
            v65 = v14 - 1;
            v52 = v9;
            JSC::JSObject::setIndexQuicklyForTypedArray(SlowCase, v65, *(_QWORD *)(a2 + (v38 >> 29)));
            goto LABEL_66;
          case 4:
          case 5:
            if (v41 > 0xFFFDFFFFFFFFFFFFLL)
              goto LABEL_45;
            v53 = (v14 - 1);
            v52 = v9;
            JSC::JSObject::convertInt32ToDoubleOrContiguousWhilePerformingSetIndex((JSC::JSObject *)SlowCase, v45, v53, v41, a5, a6, a7, a8);
            goto LABEL_66;
          case 6:
          case 7:
            if (!(v41 >> 49))
            {
              v57 = (v14 - 1);
              v52 = v9;
              JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)SlowCase, v45, v57, v41, a5, a6, a7, a8, a9.n128_f64[0]);
              goto LABEL_66;
            }
            a9.n128_f64[0] = (double)(int)v41;
            if (v41 <= 0xFFFDFFFFFFFFFFFFLL)
              a9.n128_u64[0] = v41 - 0x2000000000000;
            *(_QWORD *)(v44 + i) = a9.n128_u64[0];
LABEL_59:
            if (*(_DWORD *)(v44 - 8) <= v40)
              *(_DWORD *)(v44 - 8) = v14;
            break;
          case 10:
          case 11:
          case 12:
          case 13:
            v67 = *(_QWORD *)(v44 + i + 16);
            *(_QWORD *)(v44 + i + 16) = v41;
            if (v41
              && (v41 & 0xFFFE000000000002) == 0
              && *((_DWORD *)v45 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
            {
              JSC::Heap::writeBarrierSlowPath((uint64_t)v45 + 192, SlowCase);
            }
            v9 = &jpt_1988D02A8;
            if (v67)
              goto LABEL_49;
            ++*(_DWORD *)(v44 + 12);
            goto LABEL_59;
          default:
            __break(0xC471u);
            JUMPOUT(0x1988D0544);
        }
        goto LABEL_49;
      }
LABEL_45:
      *(_QWORD *)(v44 + i) = v41;
      if (*(_DWORD *)(v44 - 8) <= v40)
        *(_DWORD *)(v44 - 8) = v14;
      if (v41
        && (v41 & 0xFFFE000000000002) == 0
        && *((_DWORD *)v45 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
      {
        v52 = v9;
        JSC::Heap::writeBarrierSlowPath((uint64_t)v45 + 192, SlowCase);
        goto LABEL_66;
      }
LABEL_49:
      v38 -= 0x100000000;
      LODWORD(v14) = v40;
      if (!v40)
        return SlowCase;
    }
    v50 = v43 > 3 || v43 == 2;
    if (v50 && (*(_BYTE *)(SlowCase + 4) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1988D0568);
    }
LABEL_65:
    v51 = (JSC::VM *)(v14 - 1);
    v52 = v9;
    JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength((JSC::JSObject *)SlowCase, a1, v51, v41, 0, 0, a7, a8, (int32x4_t)a9);
LABEL_66:
    v9 = v52;
    goto LABEL_49;
  }
  return SlowCase;
}

uint64_t JSC::ClonedArguments::createStructure(uint64_t a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  char v9;
  uint64_t *v13;
  uint64_t SlowCase;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  const JSC::PropertyTable *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  char v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  JSC::Structure *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  __int16 v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  char v69;

  v9 = a4;
  v13 = (uint64_t *)(a1 + 40136);
  LODWORD(v67) = 67373091;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v13;
  if (*v13 < (unint64_t)v13[1])
    goto LABEL_6;
  SlowCase = v13[2];
  if ((SlowCase & 1) == 0)
  {
    v65 = *(_QWORD *)(SlowCase + 8) ^ v13[3];
    v13[1] = SlowCase + HIDWORD(v65);
    v13[2] = SlowCase + (int)v65;
LABEL_6:
    *v13 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 40112, a1 + 192, 128, 0, 0);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, a1, (uint64_t)a2, a3, (uint64_t)&v67, (unint64_t)&JSC::ClonedArguments::s_info, v9, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v22 = *(_QWORD *)(v13[227] + 1768);
  v23 = *(_QWORD *)(SlowCase + 88);
  if (!v23)
  {
    JSC::Structure::materializePropertyTable((JSC::Structure *)SlowCase, (JSC::VM *)a1, 1, v17, v18, v19, v20, v21);
    v23 = v24;
  }
  v25 = (unsigned __int8 *)(SlowCase + 15);
  if (__ldaxr((unsigned __int8 *)(SlowCase + 15)))
  {
    __clrex();
LABEL_13:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(SlowCase + 15);
    goto LABEL_14;
  }
  if (__stxr(1u, v25))
    goto LABEL_13;
LABEL_14:
  ++*(_DWORD *)(a1 + 916);
  *(_DWORD *)(SlowCase + 16) |= 4u;
  if (v23)
  {
    *(_QWORD *)(SlowCase + 88) = v23;
    if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(a1 + 192, SlowCase);
  }
  else
  {
    *(_QWORD *)(SlowCase + 88) = 0;
  }
  v27 = *(_QWORD *)(SlowCase + 64);
  if (v27 && *(_BYTE *)(v27 + 5) != 1)
    *(_DWORD *)(v27 + 80) = 0;
  else
    *(_QWORD *)(SlowCase + 64) = 0;
  v28 = *(unsigned int *)(SlowCase + 72);
  *(_DWORD *)(SlowCase + 72) = 0;
  if ((_DWORD)v28)
  {
    v29 = (WTF::StringImpl *)(16 * v28);
    v30 = *(_DWORD *)(16 * v28) - 2;
    if (v30)
    {
      *(_DWORD *)v29 = v30;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v29, v15, v16, (uint64_t)v17, v18, v19, v20, v21);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
  }
  v31 = *(_DWORD *)(SlowCase + 16) & 0xFFFFFF9F;
  *(_DWORD *)(SlowCase + 16) = v31 | 0x40;
  if (*(_QWORD *)(v13[227] + 16) == v22)
    *(_DWORD *)(SlowCase + 16) = v31 | 0x20000040;
  v32 = *(unsigned __int8 *)(SlowCase + 14);
  v33 = *(_QWORD *)(v23 + 32);
  if (v33 && (v64 = *(unsigned int *)(v33 + 12), (_DWORD)v64))
  {
    v39 = *(_DWORD *)(*(_QWORD *)v33 + 4 * v64 - 4);
    *(_DWORD *)(v33 + 12) = v64 - 1;
  }
  else
  {
    v34 = *(_DWORD *)(v23 + 24);
    v35 = __OFSUB__(v34, v32);
    v37 = v34 - v32;
    v36 = (v37 < 0) ^ v35;
    v38 = v37 + 64;
    if (v36)
      v39 = *(_DWORD *)(v23 + 24);
    else
      v39 = v38;
  }
  v40 = *(_DWORD *)(v22 + 16);
  if ((v40 & 0x20) != 0)
    v40 = *(_DWORD *)(v22 + 32);
  v41 = *(_DWORD *)(SlowCase + 28) ^ (v40 >> 8);
  v42 = *(_DWORD *)(SlowCase + 32) | (v22 >> 4);
  *(_DWORD *)(SlowCase + 28) = v41;
  *(_DWORD *)(SlowCase + 32) = v42;
  v67 = v22;
  v68 = v39;
  v69 = 4;
  JSC::PropertyTable::add((JSC::PropertyTable *)v23, (JSC::VM *)a1, (int *)&v67, (uint64_t)v17, v18, v19, v20, v21);
  v49 = *(unsigned __int16 *)(SlowCase + 24);
  if (v49 == 65534)
  {
    v50 = -1;
  }
  else if (v49 == 0xFFFF)
  {
    v50 = *(_DWORD *)(*(_QWORD *)(SlowCase + 64) + 84);
  }
  else
  {
    v50 = *(unsigned __int16 *)(SlowCase + 24);
  }
  if (v39 <= v50)
    v51 = v50;
  else
    v51 = v39;
  if (v39 != 64)
  {
    __break(0xC471u);
    JUMPOUT(0x1988D0944);
  }
  if (v51 == -1)
  {
    v55 = -2;
LABEL_52:
    *(_WORD *)(SlowCase + 24) = v55;
    goto LABEL_41;
  }
  if (v51 <= 65533)
  {
    *(_WORD *)(SlowCase + 24) = v51;
    goto LABEL_41;
  }
  v66 = *(_QWORD *)(SlowCase + 64);
  if (v49 != 0xFFFF)
  {
    if (!v66 || *(_BYTE *)(v66 + 5) == 1)
    {
      JSC::Structure::allocateRareData((JSC::Structure *)SlowCase, (JSC::VM *)a1, v43, v44, v45, v46, v47, v48);
      v66 = *(_QWORD *)(SlowCase + 64);
    }
    *(_DWORD *)(v66 + 84) = v51;
    __dmb(0xAu);
    v55 = -1;
    goto LABEL_52;
  }
  *(_DWORD *)(v66 + 84) = v51;
LABEL_41:
  v52 = __ldxr(v25);
  if (v52 == 1)
  {
    if (!__stlxr(0, v25))
      goto LABEL_46;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(SlowCase + 15), 0, (uint64_t)v43, v44, v45, v46, v47, v48);
LABEL_46:
  v53 = *(_DWORD *)(a1 + 916) - 1;
  *(_DWORD *)(a1 + 916) = v53;
  if (*(unsigned __int8 *)(a1 + 1198) | HIBYTE(dword_1ECF4C5CE) && !v53)
  {
    *(_BYTE *)(a1 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(a1 + 192, 0);
  }
  return SlowCase;
}

uint64_t JSC::JSGlobalObject::throwTypeErrorArgumentsCalleeGetterSetter(unint64_t this)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(this + 640);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v4 = (_QWORD *)(this - 16);
    v5[0] = *v4;
    v5[1] = this;
    v5[2] = this + 640;
    return v3(v5);
  }
  return v1;
}

uint64_t JSC::ClonedArguments::materializeSpecials(JSC::ClonedArguments *this, JSC::JSGlobalObject *a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  unint64_t v18;
  JSC::ClonedArguments *v19;
  unint64_t v20;
  unint64_t v21;
  JSC::ClonedArguments *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t (*v25)(unint64_t *);
  uint64_t *v26;
  uint64_t (*v27)(unint64_t *);
  unint64_t *v28;
  unint64_t v29;
  JSC::ClonedArguments *v30;
  uint64_t v31;
  uint64_t v32;

  v9 = *((_QWORD *)this + 2);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1988D0B70);
  }
  v12 = *((_QWORD *)a2 + 7);
  v13 = *(_QWORD *)(v9 + 24);
  if ((v13 & 1) != 0)
    v13 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if ((*(_BYTE *)(v13 + 68) & 1) != 0 || (*(_WORD *)(v13 + 66) & 0x10) != 0)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 976);
    v19 = *(JSC::ClonedArguments **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
    v20 = *((_QWORD *)v19 + 80);
    if ((v20 & 1) != 0)
    {
      v27 = *(uint64_t (**)(unint64_t *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
      v28 = (unint64_t *)((unint64_t)v19 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v19 & 8) != 0)
        v28 = (unint64_t *)((char *)v19 - 16);
      v29 = *v28;
      v30 = v19;
      v31 = (uint64_t)v19 + 640;
      v20 = v27(&v29);
    }
    JSC::JSObject::putDirectAccessor((int *)this, (uint64_t)a2, v18, v20, 28, a3, a7, a8, a9);
  }
  else
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 976);
    v29 = 0;
    v30 = this;
    v31 = 0x1000000FFFFFFFFLL;
    a3.n128_u64[0] = 0x100000001000000;
    v32 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)this, v12, v14, v9, 0, (uint64_t)&v29, a8, a9, a3);
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 2712);
  v22 = *(JSC::ClonedArguments **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  v23 = *((_QWORD *)v22 + 66);
  if ((v23 & 1) != 0)
  {
    v25 = *(uint64_t (**)(unint64_t *))(v23 & 0xFFFFFFFFFFFFFFFCLL);
    v26 = (uint64_t *)((unint64_t)v22 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v22 & 8) != 0)
      v26 = (uint64_t *)((char *)v22 - 16);
    v29 = *v26;
    v30 = v22;
    v31 = (uint64_t)v22 + 528;
    v23 = v25(&v29);
  }
  v29 = 0;
  v30 = this;
  v31 = 0x1000000FFFFFFFFLL;
  v17.n128_u64[0] = 0x100000001000000;
  v32 = 0;
  result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)this, v12, v21, v23, 4, (uint64_t)&v29, v15, v16, v17);
  *((_QWORD *)this + 2) = 0;
  return result;
}

uint64_t JSC::ClonedArguments::copyToArguments(uint64_t this, JSC::JSGlobalObject *a2, JSC::JSValue *a3, unint64_t a4, unsigned int a5)
{
  int v6;
  JSC::JSObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  JSC::JSValue *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v6 = a4;
  v9 = (JSC::JSObject *)this;
  v10 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((*(_BYTE *)(this + 4) & 0xE) == 8)
  {
    v11 = *(_QWORD *)(this + 8);
    v12 = *(_DWORD *)(v11 - 4);
    if (v12 >= a5 + a4)
      v13 = a5 + a4;
    else
      v13 = v12;
    v14 = a4;
    if (v13 <= a4)
    {
LABEL_10:
      while (v14 < a5)
      {
        this = JSC::JSObject::get(v9, a2, v14);
        *((_QWORD *)a3 + (v14 - v6)) = this;
        if (*((_DWORD *)v10 + 20))
        {
          this = JSC::VM::hasExceptionsAfterHandlingTraps(v10, v28, v29, v30, v31, v32, v33, v34);
          if ((this & 1) != 0)
            break;
        }
        v14 = (v14 + 1);
      }
    }
    else
    {
      v15 = (uint64_t *)(v11 + 8 * a4);
      v16 = a3;
      v17 = a4;
      while (1)
      {
        v18 = *v15++;
        this = v18;
        if (!v18)
        {
          this = JSC::JSObject::get(v9, a2, v17);
          if (*((_DWORD *)v10 + 20))
          {
            v47 = this;
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v10, v19, v20, v21, v22, v23, v24, v25);
            this = v47;
            if (hasExceptionsAfterHandlingTraps)
              break;
          }
        }
        *(_QWORD *)v16 = this;
        v16 = (JSC::JSValue *)((char *)v16 + 8);
        v17 = (v17 + 1);
        if ((_DWORD)v13 == (_DWORD)v17)
        {
          v14 = v13;
          goto LABEL_10;
        }
      }
    }
  }
  else
  {
    if (a5)
    {
      v27 = 0;
      while (1)
      {
        this = JSC::JSObject::canGetIndexQuickly(v9, v6 + v27);
        if (!(_DWORD)this)
          break;
        this = JSC::JSObject::getIndexQuickly(v9, v6 + (int)v27);
        *((_QWORD *)a3 + v27++) = this;
        if (a5 == v27)
          return this;
      }
    }
    else
    {
      LODWORD(v27) = 0;
    }
    v35 = a5 >= v27;
    v36 = a5 - v27;
    if (v36 != 0 && v35)
    {
      v37 = (uint64_t *)((char *)a3 + 8 * v27);
      v38 = (v27 + v6);
      do
      {
        this = JSC::JSObject::get(v9, a2, v38);
        v46 = this;
        if (*((_DWORD *)v10 + 20))
        {
          this = JSC::VM::hasExceptionsAfterHandlingTraps(v10, v39, v40, v41, v42, v43, v44, v45);
          if ((this & 1) != 0)
            break;
        }
        *v37++ = v46;
        v38 = (v38 + 1);
        --v36;
      }
      while (v36);
    }
  }
  return this;
}

BOOL JSC::JSObject::canGetIndexQuickly(JSC::JSObject *this, unsigned int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _BOOL8 result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_BYTE *)this + 4) & 0xF;
  if ((v3 - 8) >= 2)
  {
    result = 0;
    switch(v3)
    {
      case 0:
      case 1:
        return JSC::JSObject::canGetIndexQuicklyForTypedArray(this, a2);
      case 3:
        return result;
      case 4:
      case 5:
        break;
      case 6:
      case 7:
        return *(_DWORD *)(v2 - 4) > a2;
      case 10:
      case 11:
      case 12:
      case 13:
        if (*(_DWORD *)(v2 - 4) <= a2)
          return 0;
        v4 = *(_QWORD *)(v2 + 8 * a2 + 16);
        return v4 != 0;
      default:
        __break(0xC471u);
        JUMPOUT(0x1988D0E64);
    }
  }
  if (*(_DWORD *)(v2 - 4) <= a2)
    return 0;
  v4 = *(_QWORD *)(v2 + 8 * a2);
  return v4 != 0;
}

BOOL JSC::ClonedArguments::isIteratorProtocolFastAndNonObservable(JSC::ClonedArguments *this)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v12;

  v1 = *(_QWORD **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  v2 = v1[277];
  if ((v2 & 1) != 0)
    v3 = (v2 >> 1) & 3;
  else
    v3 = *(unsigned __int8 *)(v2 + 4);
  if (v3 != 2 && *(_BYTE *)(v1[256] + 4) != 2)
  {
    v4 = v1[289];
    v5 = (v4 & 1) != 0 ? (v4 >> 1) & 3 : *(unsigned __int8 *)(v4 + 4);
    if (v5 != 2
      && (*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x12) & 0x20) == 0
      && (*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0x20) == 0)
    {
      v6 = *(_DWORD **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
      v7 = 16 * (*v6 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v7 + 8) & 0x20) == 0)
      {
        v8 = 16 * (*v6 & 0xFFFFFFFE);
        do
        {
          v9 = *(_QWORD *)(v8 + 40);
          if (v9)
          {
            if (*(_BYTE *)(*(_QWORD *)(v9 + 2048) + 4) == 2)
              break;
          }
          v10 = *(_DWORD **)(v8 + 48);
          if (!v10)
            v10 = (_DWORD *)*((_QWORD *)v6 + 2);
          if (v10 == (_DWORD *)2)
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 2048) + 4) != 2)
            {
              v12 = *(_QWORD *)(*((_QWORD *)this + 1) - 16);
              if (v12 >= 0xFFFE000000000000)
                return (v12 & 0x80000000) == 0;
            }
            return 0;
          }
          v8 = 16 * (*v10 & 0xFFFFFFFE);
          v6 = v10;
        }
        while ((*(_BYTE *)(v8 + 8) & 0x20) == 0);
      }
    }
  }
  return 0;
}

WTF::StringImpl *JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::decode<>(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  int *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  char v30;
  _BYTE *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  int *v45;
  uint64_t v46;

  v4 = *a1;
  if (*a1 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = 0;
    goto LABEL_18;
  }
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)(v7 + 32);
  if ((_DWORD)v8 != -1)
  {
    *(_QWORD *)&v44 = &v46;
    v10 = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v44, v7 + 16);
    v11 = *(unsigned int *)(v7 + 32);
    if ((_DWORD)v11 != -1)
    {
      v12 = v10;
      *(_QWORD *)&v44 = &v46;
      ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v44, v7 + 16);
      v17 = (uint64_t)a1 + v4 - v12;
      v19 = (uint64_t *)(a2 + 24);
      v18 = *(_QWORD *)(a2 + 24);
      if (!v18)
        goto LABEL_13;
      v20 = *(_DWORD *)(v18 - 8);
      v21 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
      v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
      v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
      v24 = v20 & ((v23 >> 31) ^ v23);
      v25 = *(_QWORD *)(v18 + 16 * v24);
      if (v25 != v17)
      {
        v26 = 1;
        while (v25)
        {
          v24 = ((_DWORD)v24 + v26) & v20;
          v25 = *(_QWORD *)(v18 + 16 * v24);
          ++v26;
          if (v25 == v17)
            goto LABEL_12;
        }
        v24 = *(unsigned int *)(v18 - 4);
      }
LABEL_12:
      if (v24 == *(_DWORD *)(v18 - 4))
      {
LABEL_13:
        *a3 = 1;
        v27 = *a1;
        if (*a1 == 0x7FFFFFFFFFFFFFFFLL)
        {
          __break(0xC471u);
          JUMPOUT(0x1988D11FCLL);
        }
        v28 = (_QWORD *)((char *)a1 + v27);
        v29 = *(unsigned int *)((char *)a1 + v27 + 12);
        v30 = *((_BYTE *)a1 + v27 + 8);
        if ((_DWORD)v29)
        {
          v31 = (char *)v28 + *v28;
          if ((v30 & 1) != 0)
            v32 = JSC::CachedUniquedStringImplBase<WTF::UniquedStringImpl>::decode(JSC::Decoder &)const::{lambda(WTF::UniquedStringImpl)#1}::operator()<std::span<unsigned char const,18446744073709551615ul>>((uint64_t)v28, a2, v31, v29, v13, v14, v15, v16);
          else
            v32 = JSC::CachedUniquedStringImplBase<WTF::UniquedStringImpl>::decode(JSC::Decoder &)const::{lambda(WTF::UniquedStringImpl)#1}::operator()<std::span<char16_t const,18446744073709551615ul>>((uint64_t)v28, a2, v31, v29, v13, v14, v15, v16);
          v5 = (int *)v32;
        }
        else if ((v30 & 2) != 0)
        {
          v5 = (int *)WTF::fastCompactMalloc((WTF *)0x30);
          v33 = off_1ECF2C428;
          v34 = dword_1ECF2C424;
          *v5 = 2;
          v5[1] = v34;
          *((_QWORD *)v5 + 1) = v33;
          v5[4] = 38;
          *((_QWORD *)v5 + 3) = &WTF::StringImpl::s_emptyAtomString;
          WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol = (WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol
                                                                         + 256) | 0x80000000;
          v5[8] = WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol;
          v5[9] = 1;
        }
        else
        {
          v5 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
        }
        v45 = v5;
        v46 = v17;
        WTF::HashMap<long,void *,WTF::DefaultHash<long>,WTF::HashTraits<long>,WTF::HashTraits<void *>,WTF::HashTableTraits>::add<void *&>(&v44, v19, &v46, (uint64_t *)&v45, v13, v14, v15, v16);
        return (WTF::StringImpl *)v5;
      }
      v5 = *(int **)(v18 + 16 * v24 + 8);
LABEL_18:
      *a3 = 0;
      return (WTF::StringImpl *)v5;
    }
  }
  v36 = std::__throw_bad_variant_access[abi:sn180100]();
  return JSC::CachedUniquedStringImplBase<WTF::UniquedStringImpl>::decode(JSC::Decoder &)const::{lambda(WTF::UniquedStringImpl)#1}::operator()<std::span<unsigned char const,18446744073709551615ul>>(v36, v37, v38, v39, v40, v41, v42, v43);
}

